// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 29
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 31
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 30
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 33
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 32
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 34
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 43
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 25
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 26
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 36
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 37
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 38
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 39
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 40
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 44
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 45
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 46
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 35
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 41
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 42
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// if Difficulty < 4 then
 219: LD_OWVAR 67
 223: PUSH
 224: LD_INT 4
 226: LESS
 227: IFFALSE 236
// RemoveEnvironmentArea ( sibBlockArea ) ;
 229: LD_INT 18
 231: PPUSH
 232: CALL_OW 355
// PrepareVehicles ;
 236: CALL 1247 0 0
// PrepareHeroes ;
 240: CALL 477 0 0
// PrepareAmericansRandom ;
 244: CALL 1151 0 0
// PrepareDifficulty ;
 248: CALL 8613 0 0
// Action ;
 252: CALL 5425 0 0
// end ;
 256: END
// every 0 0$1 trigger debugMode do var i , j ;
 257: LD_EXP 41
 261: IFFALSE 432
 263: GO 265
 265: DISABLE
 266: LD_INT 0
 268: PPUSH
 269: PPUSH
// begin enable ;
 270: ENABLE
// FogOff ( true ) ;
 271: LD_INT 1
 273: PPUSH
 274: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 278: LD_ADDR_VAR 0 1
 282: PUSH
 283: LD_INT 22
 285: PUSH
 286: LD_INT 1
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: LD_INT 21
 295: PUSH
 296: LD_INT 1
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 329
// SetLives ( i , 1000 ) ;
 315: LD_VAR 0 1
 319: PPUSH
 320: LD_INT 1000
 322: PPUSH
 323: CALL_OW 234
 327: GO 312
 329: POP
 330: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 331: LD_ADDR_VAR 0 1
 335: PUSH
 336: LD_INT 22
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: LD_INT 30
 351: PUSH
 352: LD_INT 0
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 30
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PPUSH
 378: CALL_OW 69
 382: PUSH
 383: FOR_IN
 384: IFFALSE 430
// for j := 1 to 3 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 3
 398: PUSH
 399: FOR_TO
 400: IFFALSE 426
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 274
 411: PPUSH
 412: LD_VAR 0 2
 416: PPUSH
 417: LD_INT 9999
 419: PPUSH
 420: CALL_OW 277
 424: GO 399
 426: POP
 427: POP
 428: GO 383
 430: POP
 431: POP
// end ;
 432: PPOPN 2
 434: END
// every 0 0$1 trigger achivCounter >= 2 do
 435: LD_EXP 42
 439: PUSH
 440: LD_INT 2
 442: GREATEREQUAL
 443: IFFALSE 455
 445: GO 447
 447: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 448: LD_STRING ACH_REMOTE
 450: PPUSH
 451: CALL_OW 543
 455: END
// every 0 0$1 trigger destroyCounter >= 30 do
 456: LD_EXP 43
 460: PUSH
 461: LD_INT 30
 463: GREATEREQUAL
 464: IFFALSE 476
 466: GO 468
 468: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 469: LD_STRING ACH_DEFMASTER
 471: PPUSH
 472: CALL_OW 543
 476: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 477: LD_INT 0
 479: PPUSH
 480: PPUSH
 481: PPUSH
 482: PPUSH
// uc_side = 1 ;
 483: LD_ADDR_OWVAR 20
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 491: LD_ADDR_EXP 1
 495: PUSH
 496: LD_STRING JMM
 498: PPUSH
 499: LD_EXP 41
 503: NOT
 504: PPUSH
 505: LD_STRING 13c_
 507: PPUSH
 508: CALL 32782 0 3
 512: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 513: LD_ADDR_EXP 2
 517: PUSH
 518: LD_STRING Stevens
 520: PPUSH
 521: LD_EXP 41
 525: NOT
 526: PPUSH
 527: LD_STRING 13c_
 529: PPUSH
 530: CALL 32782 0 3
 534: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING Lisa
 542: PPUSH
 543: LD_EXP 41
 547: NOT
 548: PPUSH
 549: LD_STRING 13c_
 551: PPUSH
 552: CALL 32782 0 3
 556: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 557: LD_ADDR_EXP 4
 561: PUSH
 562: LD_STRING Donaldson
 564: PPUSH
 565: LD_EXP 41
 569: NOT
 570: PPUSH
 571: LD_STRING 13c_
 573: PPUSH
 574: CALL 32782 0 3
 578: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 579: LD_ADDR_EXP 5
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_EXP 41
 591: NOT
 592: PPUSH
 593: LD_STRING 13c_
 595: PPUSH
 596: CALL 32782 0 3
 600: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 601: LD_ADDR_EXP 6
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_EXP 41
 613: NOT
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 32782 0 3
 622: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 623: LD_ADDR_EXP 7
 627: PUSH
 628: LD_STRING Denis
 630: PPUSH
 631: LD_EXP 41
 635: NOT
 636: PPUSH
 637: LD_STRING 13c_
 639: PPUSH
 640: CALL 32782 0 3
 644: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_STRING Brown
 652: PPUSH
 653: LD_EXP 41
 657: NOT
 658: PPUSH
 659: LD_STRING 13c_
 661: PPUSH
 662: CALL 32782 0 3
 666: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 667: LD_ADDR_EXP 9
 671: PUSH
 672: LD_STRING Gladstone
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: LD_STRING 13c_
 680: PPUSH
 681: CALL 32782 0 3
 685: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 686: LD_ADDR_EXP 10
 690: PUSH
 691: LD_STRING Houten
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: LD_STRING 13c_
 699: PPUSH
 700: CALL 32782 0 3
 704: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 705: LD_ADDR_EXP 11
 709: PUSH
 710: LD_STRING Cornel
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_STRING 13c_
 718: PPUSH
 719: CALL 32782 0 3
 723: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 724: LD_ADDR_EXP 12
 728: PUSH
 729: LD_STRING Gary
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_STRING 13c_
 737: PPUSH
 738: CALL 32782 0 3
 742: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 743: LD_ADDR_EXP 13
 747: PUSH
 748: LD_STRING Frank
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_STRING 13c_
 756: PPUSH
 757: CALL 32782 0 3
 761: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 762: LD_ADDR_EXP 14
 766: PUSH
 767: LD_STRING Kikuchi
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_STRING 13c_
 775: PPUSH
 776: CALL 32782 0 3
 780: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , true , 13c_ ) ;
 781: LD_ADDR_EXP 15
 785: PUSH
 786: LD_STRING DeltaDoctor
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: LD_STRING 13c_
 794: PPUSH
 795: CALL 32782 0 3
 799: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 800: LD_ADDR_EXP 16
 804: PUSH
 805: LD_STRING Powell
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_STRING 
 813: PPUSH
 814: CALL 32782 0 3
 818: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ] ;
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: LD_EXP 1
 828: PUSH
 829: LD_EXP 2
 833: PUSH
 834: LD_EXP 3
 838: PUSH
 839: LD_EXP 4
 843: PUSH
 844: LD_EXP 5
 848: PUSH
 849: LD_EXP 6
 853: PUSH
 854: LD_EXP 7
 858: PUSH
 859: LD_EXP 8
 863: PUSH
 864: LD_EXP 9
 868: PUSH
 869: LD_EXP 10
 873: PUSH
 874: LD_EXP 11
 878: PUSH
 879: LD_EXP 12
 883: PUSH
 884: LD_EXP 13
 888: PUSH
 889: LD_EXP 14
 893: PUSH
 894: LD_EXP 15
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 33
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 21
 943: PUSH
 944: LD_INT 2
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PPUSH
 956: CALL_OW 69
 960: ST_TO_ADDR
// for i = tmp downto 1 do
 961: LD_ADDR_VAR 0 4
 965: PUSH
 966: DOUBLE
 967: LD_VAR 0 2
 971: INC
 972: ST_TO_ADDR
 973: LD_INT 1
 975: PUSH
 976: FOR_DOWNTO
 977: IFFALSE 1014
// if not tmp [ i ] then
 979: LD_VAR 0 2
 983: PUSH
 984: LD_VAR 0 4
 988: ARRAY
 989: NOT
 990: IFFALSE 1012
// tmp := Delete ( tmp , i ) ;
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_VAR 0 4
1006: PPUSH
1007: CALL_OW 3
1011: ST_TO_ADDR
1012: GO 976
1014: POP
1015: POP
// for i = 1 to tmp do
1016: LD_ADDR_VAR 0 4
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_VAR 0 2
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1062
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1034: LD_VAR 0 2
1038: PUSH
1039: LD_VAR 0 4
1043: ARRAY
1044: PPUSH
1045: LD_VAR 0 3
1049: PUSH
1050: LD_VAR 0 4
1054: ARRAY
1055: PPUSH
1056: CALL_OW 52
1060: GO 1031
1062: POP
1063: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1064: LD_INT 22
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 25
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 69
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: IFFALSE 1132
1098: PUSH
1099: LD_INT 22
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 34
1111: PUSH
1112: LD_INT 13
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: PPUSH
1123: CALL_OW 69
1127: PUSH
1128: LD_INT 0
1130: EQUAL
1131: AND
1132: IFFALSE 1146
// SetClass ( JMM , 2 ) ;
1134: LD_EXP 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 336
// end ;
1146: LD_VAR 0 1
1150: RET
// export function PrepareAmericansRandom ; var i ; begin
1151: LD_INT 0
1153: PPUSH
1154: PPUSH
// uc_side = 1 ;
1155: LD_ADDR_OWVAR 20
1159: PUSH
1160: LD_INT 1
1162: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1163: LD_ADDR_EXP 17
1167: PUSH
1168: LD_STRING 13c_others
1170: PPUSH
1171: CALL_OW 31
1175: ST_TO_ADDR
// for i in others13 do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_EXP 17
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1240
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1189: LD_VAR 0 2
1193: PPUSH
1194: LD_INT 22
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: PUSH
1204: LD_INT 21
1206: PUSH
1207: LD_INT 2
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 58
1216: PUSH
1217: EMPTY
1218: LIST
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 69
1229: PUSH
1230: LD_INT 1
1232: ARRAY
1233: PPUSH
1234: CALL_OW 52
1238: GO 1186
1240: POP
1241: POP
// end ;
1242: LD_VAR 0 1
1246: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1247: LD_INT 0
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
1253: PPUSH
1254: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1255: LD_ADDR_VAR 0 5
1259: PUSH
1260: LD_STRING 13_VehiclesIn13_1
1262: PPUSH
1263: LD_INT 1
1265: PUSH
1266: LD_INT 5
1268: PUSH
1269: LD_INT 3
1271: PUSH
1272: LD_INT 1
1274: PUSH
1275: LD_INT 6
1277: PUSH
1278: LD_INT 100
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: LD_INT 5
1294: PUSH
1295: LD_INT 3
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: LD_INT 6
1303: PUSH
1304: LD_INT 100
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: PUSH
1315: LD_INT 1
1317: PUSH
1318: LD_INT 5
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: LD_INT 6
1329: PUSH
1330: LD_INT 100
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_INT 1
1343: PUSH
1344: LD_INT 5
1346: PUSH
1347: LD_INT 3
1349: PUSH
1350: LD_INT 1
1352: PUSH
1353: LD_INT 6
1355: PUSH
1356: LD_INT 100
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 1
1369: PUSH
1370: LD_INT 5
1372: PUSH
1373: LD_INT 3
1375: PUSH
1376: LD_INT 1
1378: PUSH
1379: LD_INT 6
1381: PUSH
1382: LD_INT 100
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: LD_INT 5
1398: PUSH
1399: LD_INT 3
1401: PUSH
1402: LD_INT 1
1404: PUSH
1405: LD_INT 6
1407: PUSH
1408: LD_INT 100
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 1
1421: PUSH
1422: LD_INT 5
1424: PUSH
1425: LD_INT 3
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 6
1433: PUSH
1434: LD_INT 100
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: PUSH
1445: LD_INT 1
1447: PUSH
1448: LD_INT 5
1450: PUSH
1451: LD_INT 3
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: LD_INT 6
1459: PUSH
1460: LD_INT 100
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: PPUSH
1481: CALL_OW 30
1485: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1486: LD_ADDR_EXP 25
1490: PUSH
1491: LD_STRING 13_ResourcesInCargo13_1
1493: PPUSH
1494: EMPTY
1495: PPUSH
1496: CALL_OW 30
1500: ST_TO_ADDR
// cargoList = [ ] ;
1501: LD_ADDR_VAR 0 6
1505: PUSH
1506: EMPTY
1507: ST_TO_ADDR
// uc_side = 1 ;
1508: LD_ADDR_OWVAR 20
1512: PUSH
1513: LD_INT 1
1515: ST_TO_ADDR
// if vehicles then
1516: LD_VAR 0 5
1520: IFFALSE 1867
// begin for i := 1 to vehicles do
1522: LD_ADDR_VAR 0 2
1526: PUSH
1527: DOUBLE
1528: LD_INT 1
1530: DEC
1531: ST_TO_ADDR
1532: LD_VAR 0 5
1536: PUSH
1537: FOR_TO
1538: IFFALSE 1687
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1540: LD_ADDR_OWVAR 21
1544: PUSH
1545: LD_VAR 0 5
1549: PUSH
1550: LD_VAR 0 2
1554: ARRAY
1555: PUSH
1556: LD_INT 1
1558: ARRAY
1559: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1560: LD_ADDR_OWVAR 37
1564: PUSH
1565: LD_VAR 0 5
1569: PUSH
1570: LD_VAR 0 2
1574: ARRAY
1575: PUSH
1576: LD_INT 2
1578: ARRAY
1579: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1580: LD_ADDR_OWVAR 39
1584: PUSH
1585: LD_VAR 0 5
1589: PUSH
1590: LD_VAR 0 2
1594: ARRAY
1595: PUSH
1596: LD_INT 3
1598: ARRAY
1599: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1600: LD_ADDR_OWVAR 38
1604: PUSH
1605: LD_VAR 0 5
1609: PUSH
1610: LD_VAR 0 2
1614: ARRAY
1615: PUSH
1616: LD_INT 4
1618: ARRAY
1619: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1620: LD_ADDR_OWVAR 40
1624: PUSH
1625: LD_VAR 0 5
1629: PUSH
1630: LD_VAR 0 2
1634: ARRAY
1635: PUSH
1636: LD_INT 5
1638: ARRAY
1639: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1640: LD_ADDR_OWVAR 41
1644: PUSH
1645: LD_INT 40
1647: ST_TO_ADDR
// veh = CreateVehicle ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: CALL_OW 45
1657: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1658: LD_VAR 0 4
1662: PPUSH
1663: LD_INT 1
1665: PPUSH
1666: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1670: LD_VAR 0 4
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: LD_INT 0
1680: PPUSH
1681: CALL_OW 49
// end ;
1685: GO 1537
1687: POP
1688: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1689: LD_ADDR_VAR 0 6
1693: PUSH
1694: LD_INT 22
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 21
1706: PUSH
1707: LD_INT 2
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: LD_INT 34
1716: PUSH
1717: LD_INT 12
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: PPUSH
1729: CALL_OW 69
1733: ST_TO_ADDR
// if cargoList then
1734: LD_VAR 0 6
1738: IFFALSE 1867
// for i = 1 to cargoList do
1740: LD_ADDR_VAR 0 2
1744: PUSH
1745: DOUBLE
1746: LD_INT 1
1748: DEC
1749: ST_TO_ADDR
1750: LD_VAR 0 6
1754: PUSH
1755: FOR_TO
1756: IFFALSE 1865
// begin if resources then
1758: LD_EXP 25
1762: IFFALSE 1863
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1764: LD_VAR 0 6
1768: PUSH
1769: LD_VAR 0 2
1773: ARRAY
1774: PPUSH
1775: LD_INT 1
1777: PPUSH
1778: LD_EXP 25
1782: PUSH
1783: LD_VAR 0 2
1787: ARRAY
1788: PUSH
1789: LD_INT 1
1791: ARRAY
1792: PPUSH
1793: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1797: LD_VAR 0 6
1801: PUSH
1802: LD_VAR 0 2
1806: ARRAY
1807: PPUSH
1808: LD_INT 2
1810: PPUSH
1811: LD_EXP 25
1815: PUSH
1816: LD_VAR 0 2
1820: ARRAY
1821: PUSH
1822: LD_INT 2
1824: ARRAY
1825: PPUSH
1826: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1830: LD_VAR 0 6
1834: PUSH
1835: LD_VAR 0 2
1839: ARRAY
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: LD_EXP 25
1848: PUSH
1849: LD_VAR 0 2
1853: ARRAY
1854: PUSH
1855: LD_INT 3
1857: ARRAY
1858: PPUSH
1859: CALL_OW 291
// end ; end ;
1863: GO 1755
1865: POP
1866: POP
// end ; end ;
1867: LD_VAR 0 1
1871: RET
// export function PowellSupport ; var i , veh , un ; begin
1872: LD_INT 0
1874: PPUSH
1875: PPUSH
1876: PPUSH
1877: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1878: LD_ADDR_VAR 0 2
1882: PUSH
1883: DOUBLE
1884: LD_INT 1
1886: DEC
1887: ST_TO_ADDR
1888: LD_INT 4
1890: PUSH
1891: LD_INT 3
1893: PUSH
1894: LD_INT 2
1896: PUSH
1897: LD_INT 2
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_OWVAR 67
1910: ARRAY
1911: PUSH
1912: FOR_TO
1913: IFFALSE 2186
// begin uc_nation := 1 ;
1915: LD_ADDR_OWVAR 21
1919: PUSH
1920: LD_INT 1
1922: ST_TO_ADDR
// uc_side := 1 ;
1923: LD_ADDR_OWVAR 20
1927: PUSH
1928: LD_INT 1
1930: ST_TO_ADDR
// vc_engine := engine_siberite ;
1931: LD_ADDR_OWVAR 39
1935: PUSH
1936: LD_INT 3
1938: ST_TO_ADDR
// vc_control := control_manual ;
1939: LD_ADDR_OWVAR 38
1943: PUSH
1944: LD_INT 1
1946: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 9
1954: PUSH
1955: LD_INT 6
1957: PUSH
1958: LD_INT 9
1960: PUSH
1961: LD_INT 5
1963: PUSH
1964: LD_INT 5
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: LD_OWVAR 67
1978: PUSH
1979: LD_INT 0
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: CALL_OW 12
1989: PLUS
1990: ARRAY
1991: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1992: LD_OWVAR 40
1996: PUSH
1997: LD_INT 6
1999: EQUAL
2000: IFFALSE 2029
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
2002: LD_ADDR_OWVAR 37
2006: PUSH
2007: LD_INT 5
2009: PUSH
2010: LD_INT 4
2012: PUSH
2013: LD_INT 4
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_OWVAR 67
2025: ARRAY
2026: ST_TO_ADDR
2027: GO 2064
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
2029: LD_ADDR_OWVAR 37
2033: PUSH
2034: LD_INT 5
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: LD_INT 3
2042: PUSH
2043: LD_INT 3
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 1
2054: PPUSH
2055: LD_INT 4
2057: PPUSH
2058: CALL_OW 12
2062: ARRAY
2063: ST_TO_ADDR
// veh = CreateVehicle ;
2064: LD_ADDR_VAR 0 3
2068: PUSH
2069: CALL_OW 45
2073: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2074: LD_INT 35
2076: PPUSH
2077: CALL_OW 67
// until PlaceUnitArea ( veh , PlayerSpawn2 , false ) ;
2081: LD_VAR 0 3
2085: PPUSH
2086: LD_INT 24
2088: PPUSH
2089: LD_INT 0
2091: PPUSH
2092: CALL_OW 49
2096: IFFALSE 2074
// SetDir ( veh , 1 ) ;
2098: LD_VAR 0 3
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL_OW 233
// hc_gallery :=  ;
2110: LD_ADDR_OWVAR 33
2114: PUSH
2115: LD_STRING 
2117: ST_TO_ADDR
// hc_name :=  ;
2118: LD_ADDR_OWVAR 26
2122: PUSH
2123: LD_STRING 
2125: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2126: LD_INT 0
2128: PPUSH
2129: LD_INT 3
2131: PPUSH
2132: LD_INT 9
2134: PUSH
2135: LD_INT 8
2137: PUSH
2138: LD_INT 8
2140: PUSH
2141: LD_INT 7
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_OWVAR 67
2154: ARRAY
2155: PPUSH
2156: CALL_OW 380
// un := CreateHuman ;
2160: LD_ADDR_VAR 0 4
2164: PUSH
2165: CALL_OW 44
2169: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2170: LD_VAR 0 4
2174: PPUSH
2175: LD_VAR 0 3
2179: PPUSH
2180: CALL_OW 52
// end ;
2184: GO 1912
2186: POP
2187: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2188: LD_ADDR_VAR 0 2
2192: PUSH
2193: DOUBLE
2194: LD_INT 1
2196: DEC
2197: ST_TO_ADDR
2198: LD_INT 2
2200: PUSH
2201: LD_INT 2
2203: PUSH
2204: LD_INT 2
2206: PUSH
2207: LD_INT 1
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: PUSH
2216: LD_OWVAR 67
2220: ARRAY
2221: PUSH
2222: FOR_TO
2223: IFFALSE 2307
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2225: LD_INT 0
2227: PPUSH
2228: LD_INT 1
2230: PPUSH
2231: LD_INT 9
2233: PUSH
2234: LD_INT 8
2236: PUSH
2237: LD_INT 8
2239: PUSH
2240: LD_INT 7
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: PUSH
2249: LD_OWVAR 67
2253: ARRAY
2254: PPUSH
2255: CALL_OW 380
// un := CreateHuman ;
2259: LD_ADDR_VAR 0 4
2263: PUSH
2264: CALL_OW 44
2268: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2269: LD_VAR 0 4
2273: PPUSH
2274: LD_INT 1
2276: PPUSH
2277: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2281: LD_INT 35
2283: PPUSH
2284: CALL_OW 67
// until PlaceUnitArea ( un , PlayerSpawn2 , false ) ;
2288: LD_VAR 0 4
2292: PPUSH
2293: LD_INT 24
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: CALL_OW 49
2303: IFFALSE 2281
// end ;
2305: GO 2222
2307: POP
2308: POP
// end ; end_of_file
2309: LD_VAR 0 1
2313: RET
// export function PrepareBurlak ; begin
2314: LD_INT 0
2316: PPUSH
// uc_side := 7 ;
2317: LD_ADDR_OWVAR 20
2321: PUSH
2322: LD_INT 7
2324: ST_TO_ADDR
// uc_nation := 3 ;
2325: LD_ADDR_OWVAR 21
2329: PUSH
2330: LD_INT 3
2332: ST_TO_ADDR
// vc_engine := engine_siberite ;
2333: LD_ADDR_OWVAR 39
2337: PUSH
2338: LD_INT 3
2340: ST_TO_ADDR
// vc_control := control_manual ;
2341: LD_ADDR_OWVAR 38
2345: PUSH
2346: LD_INT 1
2348: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2349: LD_ADDR_OWVAR 40
2353: PUSH
2354: LD_INT 44
2356: PUSH
2357: LD_INT 45
2359: PUSH
2360: LD_INT 46
2362: PUSH
2363: LD_INT 46
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: PUSH
2372: LD_OWVAR 67
2376: ARRAY
2377: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2378: LD_ADDR_OWVAR 37
2382: PUSH
2383: LD_INT 24
2385: ST_TO_ADDR
// Masha := CreateVehicle ;
2386: LD_ADDR_EXP 19
2390: PUSH
2391: CALL_OW 45
2395: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2396: LD_EXP 19
2400: PPUSH
2401: LD_INT 2
2403: PPUSH
2404: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2408: LD_EXP 19
2412: PPUSH
2413: LD_INT 3
2415: PPUSH
2416: LD_INT 0
2418: PPUSH
2419: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2423: LD_EXP 19
2427: PPUSH
2428: LD_INT 1
2430: PPUSH
2431: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2435: LD_ADDR_EXP 18
2439: PUSH
2440: LD_STRING Burlak
2442: PPUSH
2443: LD_INT 0
2445: PPUSH
2446: LD_STRING 
2448: PPUSH
2449: CALL 32782 0 3
2453: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2454: LD_EXP 18
2458: PPUSH
2459: LD_EXP 19
2463: PPUSH
2464: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2468: LD_EXP 19
2472: PPUSH
2473: LD_INT 107
2475: PPUSH
2476: LD_INT 118
2478: PPUSH
2479: CALL_OW 114
// spawnBurlak := 1 ;
2483: LD_ADDR_EXP 28
2487: PUSH
2488: LD_INT 1
2490: ST_TO_ADDR
// end ;
2491: LD_VAR 0 1
2495: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2496: LD_INT 0
2498: PPUSH
2499: PPUSH
2500: PPUSH
2501: PPUSH
2502: PPUSH
// uc_side := 7 ;
2503: LD_ADDR_OWVAR 20
2507: PUSH
2508: LD_INT 7
2510: ST_TO_ADDR
// uc_nation := 3 ;
2511: LD_ADDR_OWVAR 21
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2519: LD_ADDR_EXP 20
2523: PUSH
2524: LD_STRING Gnyevko
2526: PPUSH
2527: LD_INT 0
2529: PPUSH
2530: LD_STRING 
2532: PPUSH
2533: CALL 32782 0 3
2537: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2538: LD_ADDR_EXP 21
2542: PUSH
2543: LD_STRING Titov
2545: PPUSH
2546: LD_INT 0
2548: PPUSH
2549: LD_STRING 
2551: PPUSH
2552: CALL 32782 0 3
2556: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2557: LD_ADDR_EXP 22
2561: PUSH
2562: LD_STRING Xavier2
2564: PPUSH
2565: LD_INT 0
2567: PPUSH
2568: LD_STRING 
2570: PPUSH
2571: CALL 32782 0 3
2575: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2576: LD_ADDR_EXP 23
2580: PUSH
2581: LD_STRING Belkov
2583: PPUSH
2584: LD_INT 0
2586: PPUSH
2587: LD_STRING 
2589: PPUSH
2590: CALL 32782 0 3
2594: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2595: LD_ADDR_EXP 24
2599: PUSH
2600: LD_STRING Lipshchin
2602: PPUSH
2603: LD_INT 0
2605: PPUSH
2606: LD_STRING 
2608: PPUSH
2609: CALL 32782 0 3
2613: ST_TO_ADDR
// for i = 1 to 5 do
2614: LD_ADDR_VAR 0 2
2618: PUSH
2619: DOUBLE
2620: LD_INT 1
2622: DEC
2623: ST_TO_ADDR
2624: LD_INT 5
2626: PUSH
2627: FOR_TO
2628: IFFALSE 2753
// begin vc_engine := engine_siberite ;
2630: LD_ADDR_OWVAR 39
2634: PUSH
2635: LD_INT 3
2637: ST_TO_ADDR
// vc_control := control_manual ;
2638: LD_ADDR_OWVAR 38
2642: PUSH
2643: LD_INT 1
2645: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2646: LD_ADDR_OWVAR 40
2650: PUSH
2651: LD_INT 43
2653: PUSH
2654: LD_INT 45
2656: PUSH
2657: LD_INT 45
2659: PUSH
2660: LD_INT 44
2662: PUSH
2663: LD_INT 49
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: LD_INT 1
2675: PPUSH
2676: LD_INT 5
2678: PPUSH
2679: CALL_OW 12
2683: ARRAY
2684: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2685: LD_ADDR_OWVAR 37
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 22
2695: PUSH
2696: LD_INT 24
2698: PUSH
2699: LD_INT 24
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: PUSH
2708: LD_OWVAR 67
2712: ARRAY
2713: ST_TO_ADDR
// veh = CreateVehicle ;
2714: LD_ADDR_VAR 0 3
2718: PUSH
2719: CALL_OW 45
2723: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2724: LD_VAR 0 3
2728: PPUSH
2729: LD_INT 2
2731: PPUSH
2732: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2736: LD_VAR 0 3
2740: PPUSH
2741: LD_INT 3
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 49
// end ;
2751: GO 2627
2753: POP
2754: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2755: LD_ADDR_VAR 0 4
2759: PUSH
2760: LD_INT 22
2762: PUSH
2763: LD_INT 7
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: PUSH
2770: LD_INT 21
2772: PUSH
2773: LD_INT 2
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: LD_INT 58
2782: PUSH
2783: EMPTY
2784: LIST
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: PPUSH
2791: CALL_OW 69
2795: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2796: LD_EXP 20
2800: PPUSH
2801: LD_VAR 0 4
2805: PUSH
2806: LD_INT 1
2808: ARRAY
2809: PPUSH
2810: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2814: LD_EXP 21
2818: PPUSH
2819: LD_VAR 0 4
2823: PUSH
2824: LD_INT 2
2826: ARRAY
2827: PPUSH
2828: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2832: LD_EXP 22
2836: PPUSH
2837: LD_VAR 0 4
2841: PUSH
2842: LD_INT 3
2844: ARRAY
2845: PPUSH
2846: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2850: LD_EXP 23
2854: PPUSH
2855: LD_VAR 0 4
2859: PUSH
2860: LD_INT 4
2862: ARRAY
2863: PPUSH
2864: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2868: LD_EXP 24
2872: PPUSH
2873: LD_VAR 0 4
2877: PUSH
2878: LD_INT 5
2880: ARRAY
2881: PPUSH
2882: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2886: LD_EXP 20
2890: PPUSH
2891: LD_INT 3
2893: PPUSH
2894: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2898: LD_EXP 21
2902: PUSH
2903: LD_EXP 24
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PPUSH
2912: LD_INT 9
2914: PPUSH
2915: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2919: LD_ADDR_VAR 0 4
2923: PUSH
2924: LD_INT 22
2926: PUSH
2927: LD_INT 7
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PPUSH
2934: CALL_OW 69
2938: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2939: LD_VAR 0 4
2943: PPUSH
2944: LD_INT 107
2946: PPUSH
2947: LD_INT 118
2949: PPUSH
2950: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2954: LD_INT 35
2956: PPUSH
2957: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2961: LD_VAR 0 4
2965: PPUSH
2966: LD_INT 34
2968: PUSH
2969: LD_INT 49
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PPUSH
2976: CALL_OW 72
2980: PPUSH
2981: LD_EXP 19
2985: PPUSH
2986: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2990: LD_VAR 0 4
2994: PPUSH
2995: LD_INT 3
2997: PUSH
2998: LD_INT 34
3000: PUSH
3001: LD_INT 49
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PPUSH
3012: CALL_OW 72
3016: PPUSH
3017: LD_INT 107
3019: PPUSH
3020: LD_INT 118
3022: PPUSH
3023: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3027: LD_ADDR_VAR 0 5
3031: PUSH
3032: LD_EXP 21
3036: PUSH
3037: LD_EXP 24
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: LD_INT 50
3048: PUSH
3049: EMPTY
3050: LIST
3051: PUSH
3052: LD_INT 3
3054: PUSH
3055: LD_INT 54
3057: PUSH
3058: EMPTY
3059: LIST
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: PPUSH
3069: CALL_OW 72
3073: ST_TO_ADDR
// if bazooka then
3074: LD_VAR 0 5
3078: IFFALSE 3120
// begin for i in bazooka do
3080: LD_ADDR_VAR 0 2
3084: PUSH
3085: LD_VAR 0 5
3089: PUSH
3090: FOR_IN
3091: IFFALSE 3118
// if See ( 1 , i ) then
3093: LD_INT 1
3095: PPUSH
3096: LD_VAR 0 2
3100: PPUSH
3101: CALL_OW 292
3105: IFFALSE 3116
// ComSpaceTimeShoot ( i ) ;
3107: LD_VAR 0 2
3111: PPUSH
3112: CALL 33817 0 1
3116: GO 3090
3118: POP
3119: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3120: LD_VAR 0 4
3124: PPUSH
3125: LD_INT 34
3127: PUSH
3128: LD_INT 49
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: CALL_OW 72
3139: PUSH
3140: LD_INT 0
3142: EQUAL
3143: IFTRUE 3156
3145: PUSH
3146: LD_EXP 19
3150: PPUSH
3151: CALL_OW 303
3155: OR
3156: IFFALSE 2954
// repeat wait ( 0 0$1 ) ;
3158: LD_INT 35
3160: PPUSH
3161: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3165: LD_ADDR_VAR 0 4
3169: PUSH
3170: LD_INT 22
3172: PUSH
3173: LD_INT 7
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PPUSH
3180: CALL_OW 69
3184: PUSH
3185: LD_EXP 18
3189: DIFF
3190: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3191: LD_VAR 0 4
3195: PPUSH
3196: LD_INT 107
3198: PPUSH
3199: LD_INT 118
3201: PPUSH
3202: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3206: LD_ADDR_VAR 0 5
3210: PUSH
3211: LD_EXP 21
3215: PUSH
3216: LD_EXP 24
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: LD_INT 50
3227: PUSH
3228: EMPTY
3229: LIST
3230: PUSH
3231: LD_INT 3
3233: PUSH
3234: LD_INT 54
3236: PUSH
3237: EMPTY
3238: LIST
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 72
3252: ST_TO_ADDR
// if bazooka then
3253: LD_VAR 0 5
3257: IFFALSE 3299
// begin for i in bazooka do
3259: LD_ADDR_VAR 0 2
3263: PUSH
3264: LD_VAR 0 5
3268: PUSH
3269: FOR_IN
3270: IFFALSE 3297
// if See ( 1 , i ) then
3272: LD_INT 1
3274: PPUSH
3275: LD_VAR 0 2
3279: PPUSH
3280: CALL_OW 292
3284: IFFALSE 3295
// ComSpaceTimeShoot ( i ) ;
3286: LD_VAR 0 2
3290: PPUSH
3291: CALL 33817 0 1
3295: GO 3269
3297: POP
3298: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3299: LD_EXP 18
3303: PPUSH
3304: CALL_OW 302
3308: IFFALSE 3322
3310: PUSH
3311: LD_EXP 18
3315: PPUSH
3316: CALL_OW 310
3320: NOT
3321: AND
3322: IFFALSE 3339
// ComMoveXY ( Burlak , 107 , 118 ) ;
3324: LD_EXP 18
3328: PPUSH
3329: LD_INT 107
3331: PPUSH
3332: LD_INT 118
3334: PPUSH
3335: CALL_OW 111
// until not tmp ;
3339: LD_VAR 0 4
3343: NOT
3344: IFFALSE 3158
// end ;
3346: LD_VAR 0 1
3350: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3351: LD_INT 0
3353: PPUSH
3354: PPUSH
3355: PPUSH
3356: PPUSH
3357: PPUSH
3358: PPUSH
// result := [ ] ;
3359: LD_ADDR_VAR 0 1
3363: PUSH
3364: EMPTY
3365: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3366: LD_ADDR_VAR 0 6
3370: PUSH
3371: LD_INT 1
3373: PPUSH
3374: LD_INT 2
3376: PPUSH
3377: CALL_OW 12
3381: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3382: LD_ADDR_VAR 0 5
3386: PUSH
3387: LD_INT 8
3389: PUSH
3390: LD_INT 9
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: LD_VAR 0 6
3401: ARRAY
3402: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3403: LD_ADDR_VAR 0 2
3407: PUSH
3408: DOUBLE
3409: LD_INT 1
3411: DEC
3412: ST_TO_ADDR
3413: LD_INT 6
3415: PUSH
3416: LD_INT 8
3418: PUSH
3419: LD_INT 10
3421: PUSH
3422: LD_INT 11
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: LD_OWVAR 67
3435: ARRAY
3436: PUSH
3437: FOR_TO
3438: IFFALSE 3676
// begin uc_side := 3 ;
3440: LD_ADDR_OWVAR 20
3444: PUSH
3445: LD_INT 3
3447: ST_TO_ADDR
// uc_nation := 3 ;
3448: LD_ADDR_OWVAR 21
3452: PUSH
3453: LD_INT 3
3455: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3456: LD_INT 24
3458: PPUSH
3459: LD_INT 3
3461: PPUSH
3462: LD_INT 1
3464: PUSH
3465: LD_INT 3
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PPUSH
3478: CALL_OW 12
3482: ARRAY
3483: PPUSH
3484: LD_INT 46
3486: PUSH
3487: LD_INT 46
3489: PUSH
3490: LD_INT 45
3492: PUSH
3493: LD_INT 47
3495: PUSH
3496: LD_INT 49
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_INT 1
3508: PPUSH
3509: LD_INT 5
3511: PPUSH
3512: CALL_OW 12
3516: ARRAY
3517: PPUSH
3518: LD_INT 100
3520: PPUSH
3521: CALL 37744 0 5
// veh := CreateVehicle ;
3525: LD_ADDR_VAR 0 4
3529: PUSH
3530: CALL_OW 45
3534: ST_TO_ADDR
// result := Join ( result , veh ) ;
3535: LD_ADDR_VAR 0 1
3539: PUSH
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_VAR 0 4
3549: PPUSH
3550: CALL 70914 0 2
3554: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3555: LD_VAR 0 4
3559: PPUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 5
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: LD_VAR 0 6
3574: ARRAY
3575: PPUSH
3576: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3580: LD_VAR 0 4
3584: PPUSH
3585: LD_VAR 0 5
3589: PPUSH
3590: LD_INT 0
3592: PPUSH
3593: CALL_OW 49
// if vc_control = control_manual then
3597: LD_OWVAR 38
3601: PUSH
3602: LD_INT 1
3604: EQUAL
3605: IFFALSE 3652
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3607: LD_INT 0
3609: PPUSH
3610: LD_INT 7
3612: PUSH
3613: LD_INT 8
3615: PUSH
3616: LD_INT 9
3618: PUSH
3619: LD_INT 10
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: PUSH
3628: LD_OWVAR 67
3632: ARRAY
3633: PPUSH
3634: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3638: CALL_OW 44
3642: PPUSH
3643: LD_VAR 0 4
3647: PPUSH
3648: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3652: LD_INT 18
3654: PPUSH
3655: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3659: LD_VAR 0 4
3663: PPUSH
3664: LD_INT 100
3666: PPUSH
3667: LD_INT 55
3669: PPUSH
3670: CALL_OW 114
// end ;
3674: GO 3437
3676: POP
3677: POP
// for i in result do
3678: LD_ADDR_VAR 0 2
3682: PUSH
3683: LD_VAR 0 1
3687: PUSH
3688: FOR_IN
3689: IFFALSE 3705
// SetTag ( i , 10 ) ;
3691: LD_VAR 0 2
3695: PPUSH
3696: LD_INT 10
3698: PPUSH
3699: CALL_OW 109
3703: GO 3688
3705: POP
3706: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3707: LD_EXP 45
3711: PPUSH
3712: CALL_OW 427
// end ; end_of_file
3716: LD_VAR 0 1
3720: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3721: LD_INT 0
3723: PPUSH
3724: PPUSH
3725: PPUSH
// rnd := 0 ;
3726: LD_ADDR_VAR 0 3
3730: PUSH
3731: LD_INT 0
3733: ST_TO_ADDR
// uc_side := 8 ;
3734: LD_ADDR_OWVAR 20
3738: PUSH
3739: LD_INT 8
3741: ST_TO_ADDR
// uc_nation := 2 ;
3742: LD_ADDR_OWVAR 21
3746: PUSH
3747: LD_INT 2
3749: ST_TO_ADDR
// hc_name :=  ;
3750: LD_ADDR_OWVAR 26
3754: PUSH
3755: LD_STRING 
3757: ST_TO_ADDR
// hc_gallery :=  ;
3758: LD_ADDR_OWVAR 33
3762: PUSH
3763: LD_STRING 
3765: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3766: LD_ADDR_OWVAR 29
3770: PUSH
3771: LD_INT 10
3773: PUSH
3774: LD_INT 11
3776: PUSH
3777: LD_INT 12
3779: PUSH
3780: LD_INT 12
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PUSH
3795: LD_INT 10
3797: PUSH
3798: LD_INT 11
3800: PUSH
3801: LD_INT 12
3803: PUSH
3804: LD_INT 12
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_OWVAR 67
3817: ARRAY
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3823: LD_INT 0
3825: PPUSH
3826: LD_INT 4
3828: PPUSH
3829: LD_INT 7
3831: PUSH
3832: LD_INT 8
3834: PUSH
3835: LD_INT 9
3837: PUSH
3838: LD_INT 10
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: PUSH
3847: LD_OWVAR 67
3851: ARRAY
3852: PPUSH
3853: CALL_OW 380
// un := CreateHuman ;
3857: LD_ADDR_VAR 0 2
3861: PUSH
3862: CALL_OW 44
3866: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3867: LD_VAR 0 2
3871: PPUSH
3872: LD_INT 8
3874: PUSH
3875: LD_INT 9
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 12
3892: ARRAY
3893: PPUSH
3894: LD_INT 0
3896: PPUSH
3897: CALL_OW 49
// SetTag ( un , 1 ) ;
3901: LD_VAR 0 2
3905: PPUSH
3906: LD_INT 1
3908: PPUSH
3909: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_INT 1
3920: PPUSH
3921: LD_EXP 32
3925: PPUSH
3926: CALL_OW 12
3930: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3931: LD_EXP 46
3935: PPUSH
3936: LD_VAR 0 2
3940: PPUSH
3941: LD_EXP 32
3945: PUSH
3946: LD_VAR 0 3
3950: ARRAY
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_EXP 32
3960: PUSH
3961: LD_VAR 0 3
3965: ARRAY
3966: PUSH
3967: LD_INT 2
3969: ARRAY
3970: PPUSH
3971: LD_INT 0
3973: PPUSH
3974: LD_INT 0
3976: PPUSH
3977: LD_INT 0
3979: PPUSH
3980: CALL_OW 595
// end ;
3984: LD_VAR 0 1
3988: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3989: LD_INT 22
3991: PUSH
3992: LD_INT 8
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 3
4001: PUSH
4002: LD_INT 61
4004: PUSH
4005: EMPTY
4006: LIST
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_INT 50
4014: PUSH
4015: EMPTY
4016: LIST
4017: PUSH
4018: LD_INT 33
4020: PUSH
4021: LD_INT 2
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: PPUSH
4034: CALL_OW 69
4038: IFFALSE 4125
4040: GO 4042
4042: DISABLE
4043: LD_INT 0
4045: PPUSH
// begin enable ;
4046: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
4047: LD_ADDR_VAR 0 1
4051: PUSH
4052: LD_INT 22
4054: PUSH
4055: LD_INT 8
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 3
4064: PUSH
4065: LD_INT 61
4067: PUSH
4068: EMPTY
4069: LIST
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 50
4077: PUSH
4078: EMPTY
4079: LIST
4080: PUSH
4081: LD_INT 33
4083: PUSH
4084: LD_INT 2
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PPUSH
4097: CALL_OW 69
4101: PUSH
4102: FOR_IN
4103: IFFALSE 4123
// begin wait ( 0 0$0.3 ) ;
4105: LD_INT 10
4107: PPUSH
4108: CALL_OW 67
// Connect ( i ) ;
4112: LD_VAR 0 1
4116: PPUSH
4117: CALL 41226 0 1
// end ;
4121: GO 4102
4123: POP
4124: POP
// end ;
4125: PPOPN 1
4127: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4128: LD_INT 0
4130: PPUSH
4131: PPUSH
4132: PPUSH
4133: PPUSH
4134: PPUSH
4135: PPUSH
4136: PPUSH
4137: PPUSH
4138: PPUSH
// result := [ ] ;
4139: LD_ADDR_VAR 0 1
4143: PUSH
4144: EMPTY
4145: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4146: LD_ADDR_EXP 34
4150: PUSH
4151: LD_EXP 34
4155: PUSH
4156: LD_INT 1
4158: PLUS
4159: ST_TO_ADDR
// xy := [ ctArea1 , ctArea2 , ctArea3 , ctArea4 ] ;
4160: LD_ADDR_VAR 0 4
4164: PUSH
4165: LD_INT 19
4167: PUSH
4168: LD_INT 20
4170: PUSH
4171: LD_INT 21
4173: PUSH
4174: LD_INT 22
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4183: LD_INT 22
4185: PUSH
4186: LD_INT 8
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 3
4195: PUSH
4196: LD_INT 58
4198: PUSH
4199: EMPTY
4200: LIST
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 34
4208: PUSH
4209: LD_INT 31
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 2
4228: LESS
4229: IFFALSE 4534
// begin uc_side := 8 ;
4231: LD_ADDR_OWVAR 20
4235: PUSH
4236: LD_INT 8
4238: ST_TO_ADDR
// uc_nation := 2 ;
4239: LD_ADDR_OWVAR 21
4243: PUSH
4244: LD_INT 2
4246: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4247: LD_INT 14
4249: PPUSH
4250: LD_INT 3
4252: PPUSH
4253: LD_INT 1
4255: PPUSH
4256: LD_INT 31
4258: PPUSH
4259: LD_INT 100
4261: PPUSH
4262: CALL 37744 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4266: LD_ADDR_VAR 0 2
4270: PUSH
4271: DOUBLE
4272: LD_INT 22
4274: PUSH
4275: LD_INT 8
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 3
4284: PUSH
4285: LD_INT 58
4287: PUSH
4288: EMPTY
4289: LIST
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 34
4297: PUSH
4298: LD_INT 31
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 69
4314: PUSH
4315: LD_INT 1
4317: PLUS
4318: DEC
4319: ST_TO_ADDR
4320: LD_INT 2
4322: PUSH
4323: FOR_TO
4324: IFFALSE 4532
// begin veh := CreateVehicle ;
4326: LD_ADDR_VAR 0 3
4330: PUSH
4331: CALL_OW 45
4335: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
4336: LD_VAR 0 3
4340: PPUSH
4341: LD_INT 0
4343: PPUSH
4344: LD_INT 5
4346: PPUSH
4347: CALL_OW 12
4351: PPUSH
4352: CALL_OW 233
// xy := Delete ( xy , rand ( 1 , Count ( xy ) ) ) ;
4356: LD_ADDR_VAR 0 4
4360: PUSH
4361: LD_VAR 0 4
4365: PPUSH
4366: LD_INT 1
4368: PPUSH
4369: LD_VAR 0 4
4373: PPUSH
4374: CALL 34982 0 1
4378: PPUSH
4379: CALL_OW 12
4383: PPUSH
4384: CALL_OW 3
4388: ST_TO_ADDR
// area := xy [ rand ( 1 , Count ( xy ) ) ] ;
4389: LD_ADDR_VAR 0 6
4393: PUSH
4394: LD_VAR 0 4
4398: PUSH
4399: LD_INT 1
4401: PPUSH
4402: LD_VAR 0 4
4406: PPUSH
4407: CALL 34982 0 1
4411: PPUSH
4412: CALL_OW 12
4416: ARRAY
4417: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_ok ] ) then
4418: LD_VAR 0 6
4422: PPUSH
4423: LD_INT 50
4425: PUSH
4426: EMPTY
4427: LIST
4428: PPUSH
4429: CALL_OW 70
4433: IFFALSE 4443
// area := ctAreaExtra ;
4435: LD_ADDR_VAR 0 6
4439: PUSH
4440: LD_INT 23
4442: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4443: LD_VAR 0 3
4447: PPUSH
4448: LD_VAR 0 6
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4460: LD_INT 0
4462: PPUSH
4463: LD_INT 7
4465: PUSH
4466: LD_INT 9
4468: PUSH
4469: LD_INT 10
4471: PUSH
4472: LD_INT 10
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: PUSH
4481: LD_OWVAR 67
4485: ARRAY
4486: PPUSH
4487: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4491: CALL_OW 44
4495: PPUSH
4496: LD_VAR 0 3
4500: PPUSH
4501: CALL_OW 52
// if area = ctAreaExtra then
4505: LD_VAR 0 6
4509: PUSH
4510: LD_INT 23
4512: EQUAL
4513: IFFALSE 4530
// ComMoveXY ( veh , 73 , 21 ) ;
4515: LD_VAR 0 3
4519: PPUSH
4520: LD_INT 73
4522: PPUSH
4523: LD_INT 21
4525: PPUSH
4526: CALL_OW 111
// end ;
4530: GO 4323
4532: POP
4533: POP
// end ; dir := rand ( 1 , 2 ) ;
4534: LD_ADDR_VAR 0 9
4538: PUSH
4539: LD_INT 1
4541: PPUSH
4542: LD_INT 2
4544: PPUSH
4545: CALL_OW 12
4549: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4550: LD_ADDR_VAR 0 6
4554: PUSH
4555: LD_INT 8
4557: PUSH
4558: LD_INT 9
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: PUSH
4565: LD_VAR 0 9
4569: ARRAY
4570: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4571: LD_ADDR_VAR 0 7
4575: PUSH
4576: LD_INT 6
4578: PUSH
4579: LD_INT 8
4581: PUSH
4582: LD_INT 10
4584: PUSH
4585: LD_INT 11
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: PUSH
4594: LD_OWVAR 67
4598: ARRAY
4599: PUSH
4600: LD_EXP 34
4604: PLUS
4605: ST_TO_ADDR
// if counter > 20 then
4606: LD_VAR 0 7
4610: PUSH
4611: LD_INT 20
4613: GREATER
4614: IFFALSE 4624
// counter := 20 ;
4616: LD_ADDR_VAR 0 7
4620: PUSH
4621: LD_INT 20
4623: ST_TO_ADDR
// for i := 1 to counter do
4624: LD_ADDR_VAR 0 2
4628: PUSH
4629: DOUBLE
4630: LD_INT 1
4632: DEC
4633: ST_TO_ADDR
4634: LD_VAR 0 7
4638: PUSH
4639: FOR_TO
4640: IFFALSE 4975
// begin uc_side := 8 ;
4642: LD_ADDR_OWVAR 20
4646: PUSH
4647: LD_INT 8
4649: ST_TO_ADDR
// uc_nation := 2 ;
4650: LD_ADDR_OWVAR 21
4654: PUSH
4655: LD_INT 2
4657: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4658: LD_INT 13
4660: PUSH
4661: LD_INT 14
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: LD_INT 1
4670: PPUSH
4671: LD_INT 2
4673: PPUSH
4674: CALL_OW 12
4678: ARRAY
4679: PPUSH
4680: LD_INT 3
4682: PPUSH
4683: LD_INT 1
4685: PUSH
4686: LD_INT 2
4688: PUSH
4689: LD_INT 5
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 1
4699: PPUSH
4700: LD_INT 3
4702: PPUSH
4703: CALL_OW 12
4707: ARRAY
4708: PPUSH
4709: LD_INT 27
4711: PUSH
4712: LD_INT 28
4714: PUSH
4715: LD_INT 27
4717: PUSH
4718: LD_INT 92
4720: PUSH
4721: LD_INT 29
4723: PUSH
4724: LD_INT 25
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: PUSH
4735: LD_INT 1
4737: PPUSH
4738: LD_INT 6
4740: PPUSH
4741: CALL_OW 12
4745: ARRAY
4746: PPUSH
4747: LD_INT 100
4749: PPUSH
4750: CALL 37744 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4754: LD_OWVAR 40
4758: PUSH
4759: LD_INT 29
4761: EQUAL
4762: IFFALSE 4772
// vc_control := control_remote ;
4764: LD_ADDR_OWVAR 38
4768: PUSH
4769: LD_INT 2
4771: ST_TO_ADDR
// veh := CreateVehicle ;
4772: LD_ADDR_VAR 0 3
4776: PUSH
4777: CALL_OW 45
4781: ST_TO_ADDR
// result := Join ( result , veh ) ;
4782: LD_ADDR_VAR 0 1
4786: PUSH
4787: LD_VAR 0 1
4791: PPUSH
4792: LD_VAR 0 3
4796: PPUSH
4797: CALL 70914 0 2
4801: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4802: LD_VAR 0 3
4806: PPUSH
4807: LD_INT 3
4809: PUSH
4810: LD_INT 5
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: LD_VAR 0 9
4821: ARRAY
4822: PPUSH
4823: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4827: LD_VAR 0 3
4831: PPUSH
4832: LD_VAR 0 6
4836: PPUSH
4837: LD_INT 0
4839: PPUSH
4840: CALL_OW 49
// if vc_control = control_manual then
4844: LD_OWVAR 38
4848: PUSH
4849: LD_INT 1
4851: EQUAL
4852: IFFALSE 4899
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4854: LD_INT 0
4856: PPUSH
4857: LD_INT 7
4859: PUSH
4860: LD_INT 8
4862: PUSH
4863: LD_INT 9
4865: PUSH
4866: LD_INT 10
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: PUSH
4875: LD_OWVAR 67
4879: ARRAY
4880: PPUSH
4881: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4885: CALL_OW 44
4889: PPUSH
4890: LD_VAR 0 3
4894: PPUSH
4895: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4899: LD_INT 10
4901: PPUSH
4902: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4906: LD_VAR 0 3
4910: PPUSH
4911: CALL_OW 263
4915: PUSH
4916: LD_INT 2
4918: EQUAL
4919: IFFALSE 4933
4921: PUSH
4922: LD_VAR 0 3
4926: PPUSH
4927: CALL_OW 312
4931: NOT
4932: AND
4933: IFFALSE 4951
// begin Connect ( veh ) ;
4935: LD_VAR 0 3
4939: PPUSH
4940: CALL 41226 0 1
// wait ( 0 0$0.3 ) ;
4944: LD_INT 10
4946: PPUSH
4947: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4951: LD_VAR 0 3
4955: PPUSH
4956: LD_INT 100
4958: PPUSH
4959: LD_INT 55
4961: PPUSH
4962: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4966: LD_INT 18
4968: PPUSH
4969: CALL_OW 67
// end ;
4973: GO 4639
4975: POP
4976: POP
// if arabianAttacksCounter = 1 then
4977: LD_EXP 34
4981: PUSH
4982: LD_INT 1
4984: EQUAL
4985: IFFALSE 4991
// DestroySibDeposit ;
4987: CALL 3721 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4991: LD_EXP 34
4995: PUSH
4996: LD_INT 4
4998: PUSH
4999: LD_INT 3
5001: PUSH
5002: LD_INT 3
5004: PUSH
5005: LD_INT 2
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: PUSH
5014: LD_OWVAR 67
5018: ARRAY
5019: MOD
5020: PUSH
5021: LD_INT 0
5023: EQUAL
5024: IFFALSE 5382
// begin tmp := rand ( 0 , 2 ) ;
5026: LD_ADDR_VAR 0 8
5030: PUSH
5031: LD_INT 0
5033: PPUSH
5034: LD_INT 2
5036: PPUSH
5037: CALL_OW 12
5041: ST_TO_ADDR
// if not tmp then
5042: LD_VAR 0 8
5046: NOT
5047: IFFALSE 5208
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
5049: LD_ADDR_VAR 0 2
5053: PUSH
5054: DOUBLE
5055: LD_INT 1
5057: DEC
5058: ST_TO_ADDR
5059: LD_INT 3
5061: PUSH
5062: LD_INT 4
5064: PUSH
5065: LD_INT 4
5067: PUSH
5068: LD_INT 5
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: PUSH
5077: LD_OWVAR 67
5081: ARRAY
5082: PUSH
5083: FOR_TO
5084: IFFALSE 5204
// begin uc_side := 8 ;
5086: LD_ADDR_OWVAR 20
5090: PUSH
5091: LD_INT 8
5093: ST_TO_ADDR
// uc_nation := 2 ;
5094: LD_ADDR_OWVAR 21
5098: PUSH
5099: LD_INT 2
5101: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5102: LD_INT 0
5104: PPUSH
5105: LD_INT 1
5107: PPUSH
5108: LD_INT 7
5110: PUSH
5111: LD_INT 8
5113: PUSH
5114: LD_INT 9
5116: PUSH
5117: LD_INT 10
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: PUSH
5126: LD_OWVAR 67
5130: ARRAY
5131: PPUSH
5132: CALL_OW 380
// un := CreateHuman ;
5136: LD_ADDR_VAR 0 5
5140: PUSH
5141: CALL_OW 44
5145: ST_TO_ADDR
// result := Join ( result , un ) ;
5146: LD_ADDR_VAR 0 1
5150: PUSH
5151: LD_VAR 0 1
5155: PPUSH
5156: LD_VAR 0 5
5160: PPUSH
5161: CALL 70914 0 2
5165: ST_TO_ADDR
// if Prob ( 60 ) then
5166: LD_INT 60
5168: PPUSH
5169: CALL_OW 13
5173: IFFALSE 5187
// SetClass ( un , class_mortar ) ;
5175: LD_VAR 0 5
5179: PPUSH
5180: LD_INT 8
5182: PPUSH
5183: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5187: LD_VAR 0 5
5191: PPUSH
5192: LD_INT 16
5194: PPUSH
5195: LD_INT 0
5197: PPUSH
5198: CALL_OW 49
// end ;
5202: GO 5083
5204: POP
5205: POP
// end else
5206: GO 5372
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5208: LD_ADDR_VAR 0 2
5212: PUSH
5213: DOUBLE
5214: LD_INT 1
5216: DEC
5217: ST_TO_ADDR
5218: LD_INT 2
5220: PUSH
5221: LD_INT 3
5223: PUSH
5224: LD_INT 3
5226: PUSH
5227: LD_INT 4
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: PUSH
5236: LD_OWVAR 67
5240: ARRAY
5241: PUSH
5242: FOR_TO
5243: IFFALSE 5370
// begin uc_side := 8 ;
5245: LD_ADDR_OWVAR 20
5249: PUSH
5250: LD_INT 8
5252: ST_TO_ADDR
// uc_nation := 0 ;
5253: LD_ADDR_OWVAR 21
5257: PUSH
5258: LD_INT 0
5260: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5261: LD_ADDR_OWVAR 28
5265: PUSH
5266: LD_INT 17
5268: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5269: LD_ADDR_OWVAR 31
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: LD_INT 0
5279: PUSH
5280: LD_INT 0
5282: PUSH
5283: LD_INT 0
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5292: LD_ADDR_OWVAR 29
5296: PUSH
5297: LD_INT 10
5299: PUSH
5300: LD_INT 10
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: ST_TO_ADDR
// hc_gallery :=  ;
5307: LD_ADDR_OWVAR 33
5311: PUSH
5312: LD_STRING 
5314: ST_TO_ADDR
// hc_name :=  ;
5315: LD_ADDR_OWVAR 26
5319: PUSH
5320: LD_STRING 
5322: ST_TO_ADDR
// un := CreateHuman ;
5323: LD_ADDR_VAR 0 5
5327: PUSH
5328: CALL_OW 44
5332: ST_TO_ADDR
// result := Join ( result , un ) ;
5333: LD_ADDR_VAR 0 1
5337: PUSH
5338: LD_VAR 0 1
5342: PPUSH
5343: LD_VAR 0 5
5347: PPUSH
5348: CALL 70914 0 2
5352: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5353: LD_VAR 0 5
5357: PPUSH
5358: LD_INT 16
5360: PPUSH
5361: LD_INT 0
5363: PPUSH
5364: CALL_OW 49
// end ;
5368: GO 5242
5370: POP
5371: POP
// end ; if sibDeposits then
5372: LD_EXP 32
5376: IFFALSE 5382
// DestroySibDeposit ;
5378: CALL 3721 0 0
// end ; for i in result do
5382: LD_ADDR_VAR 0 2
5386: PUSH
5387: LD_VAR 0 1
5391: PUSH
5392: FOR_IN
5393: IFFALSE 5409
// SetTag ( i , 10 ) ;
5395: LD_VAR 0 2
5399: PPUSH
5400: LD_INT 10
5402: PPUSH
5403: CALL_OW 109
5407: GO 5392
5409: POP
5410: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5411: LD_EXP 44
5415: PPUSH
5416: CALL_OW 427
// end ; end_of_file
5420: LD_VAR 0 1
5424: RET
// export function Action ; var tmp ; begin
5425: LD_INT 0
5427: PPUSH
5428: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5429: LD_ADDR_VAR 0 2
5433: PUSH
5434: LD_INT 22
5436: PUSH
5437: LD_INT 1
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 21
5446: PUSH
5447: LD_INT 2
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// InGameOn ;
5463: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5467: LD_VAR 0 2
5471: PPUSH
5472: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5476: LD_INT 22
5478: PUSH
5479: LD_INT 1
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 21
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: PPUSH
5500: CALL_OW 69
5504: PPUSH
5505: LD_INT 69
5507: PPUSH
5508: LD_INT 94
5510: PPUSH
5511: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5515: LD_EXP 1
5519: PPUSH
5520: LD_STRING D2-JMM-1
5522: PPUSH
5523: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5527: LD_VAR 0 2
5531: PPUSH
5532: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5536: LD_EXP 2
5540: PPUSH
5541: LD_STRING D2-Huck-1
5543: PPUSH
5544: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5548: LD_VAR 0 2
5552: PPUSH
5553: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5557: LD_EXP 1
5561: PPUSH
5562: LD_STRING D2-JMM-2
5564: PPUSH
5565: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5569: LD_VAR 0 2
5573: PPUSH
5574: CALL_OW 87
// InGameOff ;
5578: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5582: LD_STRING M1
5584: PPUSH
5585: CALL_OW 337
// SaveForQuickRestart ;
5589: CALL_OW 22
// wait ( 10 10$00 ) ;
5593: LD_INT 21000
5595: PPUSH
5596: CALL_OW 67
// DialogueOn ;
5600: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5604: LD_EXP 16
5608: PPUSH
5609: LD_STRING D3-Pow-1
5611: PPUSH
5612: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5616: LD_EXP 1
5620: PPUSH
5621: LD_STRING D3-JMM-1
5623: PPUSH
5624: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5628: LD_EXP 16
5632: PPUSH
5633: LD_STRING D3-Pow-2
5635: PPUSH
5636: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5640: LD_EXP 1
5644: PPUSH
5645: LD_STRING D3-JMM-2
5647: PPUSH
5648: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5652: LD_EXP 16
5656: PPUSH
5657: LD_STRING D3-Pow-3
5659: PPUSH
5660: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5664: LD_EXP 1
5668: PPUSH
5669: LD_STRING D3-JMM-3
5671: PPUSH
5672: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5676: LD_EXP 16
5680: PPUSH
5681: LD_STRING D3-Pow-4
5683: PPUSH
5684: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5688: LD_EXP 1
5692: PPUSH
5693: LD_STRING D3-JMM-4
5695: PPUSH
5696: CALL_OW 88
// DialogueOff ;
5700: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5704: LD_STRING M2
5706: PPUSH
5707: CALL_OW 337
// wait ( 2 2$30 ) ;
5711: LD_INT 5250
5713: PPUSH
5714: CALL_OW 67
// PrepareBurlak ;
5718: CALL 2314 0 0
// BurlakArmy ;
5722: CALL 2496 0 0
// end ;
5726: LD_VAR 0 1
5730: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5731: LD_INT 1
5733: PPUSH
5734: LD_EXP 19
5738: PPUSH
5739: CALL_OW 292
5743: IFFALSE 5902
5745: GO 5747
5747: DISABLE
// begin DialogueOn ;
5748: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5752: LD_EXP 19
5756: PPUSH
5757: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5761: LD_INT 22
5763: PUSH
5764: LD_INT 1
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: PUSH
5771: LD_INT 26
5773: PUSH
5774: LD_INT 1
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 2
5783: PUSH
5784: LD_INT 25
5786: PUSH
5787: LD_INT 1
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PUSH
5794: LD_INT 25
5796: PUSH
5797: LD_INT 2
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: PUSH
5804: LD_INT 25
5806: PUSH
5807: LD_INT 3
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 25
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 25
5826: PUSH
5827: LD_INT 5
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: LIST
5846: PPUSH
5847: CALL_OW 69
5851: PPUSH
5852: LD_STRING D5-Sol1-1
5854: PPUSH
5855: LD_STRING D5-FSol1-1
5857: PPUSH
5858: CALL 8412 0 3
// Say ( JMM , D5-JMM-1 ) ;
5862: LD_EXP 1
5866: PPUSH
5867: LD_STRING D5-JMM-1
5869: PPUSH
5870: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5874: LD_EXP 18
5878: PPUSH
5879: LD_STRING DAmer-Bur-1
5881: PPUSH
5882: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5886: LD_EXP 1
5890: PPUSH
5891: LD_STRING DAmer-JMM-1
5893: PPUSH
5894: CALL_OW 88
// DialogueOff ;
5898: CALL_OW 7
// end ;
5902: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5903: LD_INT 4
5905: PPUSH
5906: LD_INT 22
5908: PUSH
5909: LD_INT 7
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 70
5920: IFFALSE 6323
5922: GO 5924
5924: DISABLE
5925: LD_INT 0
5927: PPUSH
// begin enable ;
5928: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5929: LD_ADDR_VAR 0 1
5933: PUSH
5934: LD_INT 4
5936: PPUSH
5937: LD_INT 22
5939: PUSH
5940: LD_INT 7
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PPUSH
5947: CALL_OW 70
5951: PUSH
5952: FOR_IN
5953: IFFALSE 6321
// begin if i = Burlak or i = Masha then
5955: LD_VAR 0 1
5959: PUSH
5960: LD_EXP 18
5964: EQUAL
5965: IFTRUE 5979
5967: PUSH
5968: LD_VAR 0 1
5972: PUSH
5973: LD_EXP 19
5977: EQUAL
5978: OR
5979: IFFALSE 6126
// begin RemoveUnit ( i ) ;
5981: LD_VAR 0 1
5985: PPUSH
5986: CALL_OW 64
// DialogueOn ;
5990: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5994: LD_EXP 1
5998: PPUSH
5999: LD_STRING D5a-JMM-1
6001: PPUSH
6002: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
6006: LD_INT 22
6008: PUSH
6009: LD_INT 1
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: LD_INT 26
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: LD_INT 25
6031: PUSH
6032: LD_INT 1
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: PUSH
6039: LD_INT 25
6041: PUSH
6042: LD_INT 2
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: PUSH
6049: LD_INT 25
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 25
6061: PUSH
6062: LD_INT 4
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 5
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: PPUSH
6092: CALL_OW 69
6096: PPUSH
6097: LD_STRING D5a-Sol1-1
6099: PPUSH
6100: LD_STRING D5-FSol1-1
6102: PPUSH
6103: CALL 8412 0 3
// DialogueOff ;
6107: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
6111: LD_STRING M2b
6113: PPUSH
6114: CALL_OW 337
// spawnBurlak = 0 ;
6118: LD_ADDR_EXP 28
6122: PUSH
6123: LD_INT 0
6125: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
6126: LD_VAR 0 1
6130: PPUSH
6131: CALL_OW 247
6135: PUSH
6136: LD_INT 2
6138: EQUAL
6139: IFFALSE 6156
6141: PUSH
6142: LD_VAR 0 1
6146: PPUSH
6147: CALL_OW 263
6151: PUSH
6152: LD_INT 1
6154: EQUAL
6155: AND
6156: IFFALSE 6284
// begin case IsDrivenBy ( i ) of Gnyevko :
6158: LD_VAR 0 1
6162: PPUSH
6163: CALL_OW 311
6167: PUSH
6168: LD_EXP 20
6172: DOUBLE
6173: EQUAL
6174: IFTRUE 6178
6176: GO 6191
6178: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6179: LD_INT 1
6181: PPUSH
6182: LD_STRING 13_Gnyevko_1
6184: PPUSH
6185: CALL_OW 39
6189: GO 6284
6191: LD_EXP 21
6195: DOUBLE
6196: EQUAL
6197: IFTRUE 6201
6199: GO 6214
6201: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6202: LD_INT 1
6204: PPUSH
6205: LD_STRING 13_Titov_1
6207: PPUSH
6208: CALL_OW 39
6212: GO 6284
6214: LD_EXP 22
6218: DOUBLE
6219: EQUAL
6220: IFTRUE 6224
6222: GO 6237
6224: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6225: LD_INT 1
6227: PPUSH
6228: LD_STRING 13_Xavier_1
6230: PPUSH
6231: CALL_OW 39
6235: GO 6284
6237: LD_EXP 23
6241: DOUBLE
6242: EQUAL
6243: IFTRUE 6247
6245: GO 6260
6247: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6248: LD_INT 1
6250: PPUSH
6251: LD_STRING 13_Belkov_1
6253: PPUSH
6254: CALL_OW 39
6258: GO 6284
6260: LD_EXP 24
6264: DOUBLE
6265: EQUAL
6266: IFTRUE 6270
6268: GO 6283
6270: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6271: LD_INT 1
6273: PPUSH
6274: LD_STRING 13_Lipshchin_1
6276: PPUSH
6277: CALL_OW 39
6281: GO 6284
6283: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6284: LD_VAR 0 1
6288: PPUSH
6289: CALL_OW 264
6293: PUSH
6294: LD_INT 49
6296: EQUAL
6297: IFFALSE 6310
// DestroyUnit ( i ) else
6299: LD_VAR 0 1
6303: PPUSH
6304: CALL_OW 65
6308: GO 6319
// RemoveUnit ( i ) ;
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 64
// end ;
6319: GO 5952
6321: POP
6322: POP
// end ;
6323: PPOPN 1
6325: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6326: LD_EXP 18
6330: PPUSH
6331: CALL_OW 302
6335: IFFALSE 6352
6337: PUSH
6338: LD_EXP 19
6342: PPUSH
6343: CALL_OW 256
6347: PUSH
6348: LD_INT 500
6350: LESS
6351: AND
6352: IFFALSE 6369
6354: PUSH
6355: LD_EXP 19
6359: PPUSH
6360: CALL_OW 255
6364: PUSH
6365: LD_INT 7
6367: EQUAL
6368: AND
6369: IFFALSE 6389
6371: GO 6373
6373: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6374: LD_EXP 18
6378: PPUSH
6379: LD_INT 107
6381: PPUSH
6382: LD_INT 118
6384: PPUSH
6385: CALL_OW 111
6389: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6390: LD_EXP 18
6394: PPUSH
6395: CALL_OW 301
6399: IFFALSE 6411
6401: PUSH
6402: LD_EXP 28
6406: PUSH
6407: LD_INT 1
6409: EQUAL
6410: AND
6411: IFFALSE 6544
6413: GO 6415
6415: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6416: LD_EXP 1
6420: PPUSH
6421: LD_STRING D5b-JMM-1
6423: PPUSH
6424: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6428: LD_INT 22
6430: PUSH
6431: LD_INT 1
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 26
6440: PUSH
6441: LD_INT 1
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 25
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 25
6463: PUSH
6464: LD_INT 2
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 3
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 25
6483: PUSH
6484: LD_INT 4
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 25
6493: PUSH
6494: LD_INT 5
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: PPUSH
6514: CALL_OW 69
6518: PPUSH
6519: LD_STRING D5b-Sol1-1
6521: PPUSH
6522: LD_STRING 
6524: PPUSH
6525: CALL 8412 0 3
// ChangeMissionObjectives ( M2a ) ;
6529: LD_STRING M2a
6531: PPUSH
6532: CALL_OW 337
// burlakStatus := 1 ;
6536: LD_ADDR_EXP 29
6540: PUSH
6541: LD_INT 1
6543: ST_TO_ADDR
// end ;
6544: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6545: LD_EXP 2
6549: PPUSH
6550: CALL_OW 301
6554: IFFALSE 6691
6556: GO 6558
6558: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6559: LD_EXP 1
6563: PPUSH
6564: LD_STRING D6-JMM-1
6566: PPUSH
6567: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6571: LD_INT 22
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 26
6583: PUSH
6584: LD_INT 1
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 2
6593: PUSH
6594: LD_INT 25
6596: PUSH
6597: LD_INT 1
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 25
6606: PUSH
6607: LD_INT 2
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 25
6616: PUSH
6617: LD_INT 3
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 25
6626: PUSH
6627: LD_INT 4
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 25
6636: PUSH
6637: LD_INT 5
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: PPUSH
6657: CALL_OW 69
6661: PPUSH
6662: LD_STRING D6-Sol1-1
6664: PPUSH
6665: LD_STRING 
6667: PPUSH
6668: CALL 8412 0 3
// Say ( JMM , D6-JMM-2 ) ;
6672: LD_EXP 1
6676: PPUSH
6677: LD_STRING D6-JMM-2
6679: PPUSH
6680: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6684: LD_STRING M1a
6686: PPUSH
6687: CALL_OW 337
// end ;
6691: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6692: LD_INT 25
6694: PPUSH
6695: LD_INT 1
6697: PPUSH
6698: CALL_OW 321
6702: PUSH
6703: LD_INT 2
6705: EQUAL
6706: IFFALSE 6723
6708: GO 6710
6710: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6711: LD_EXP 2
6715: PPUSH
6716: LD_STRING D6-Huck-2
6718: PPUSH
6719: CALL_OW 88
6723: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6724: LD_INT 22
6726: PUSH
6727: LD_INT 1
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: PUSH
6734: LD_INT 2
6736: PUSH
6737: LD_INT 34
6739: PUSH
6740: LD_INT 8
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: LD_INT 35
6749: PUSH
6750: LD_INT 8
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 69
6770: IFFALSE 6830
6772: PUSH
6773: LD_INT 5
6775: PPUSH
6776: LD_INT 22
6778: PUSH
6779: LD_INT 1
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 21
6788: PUSH
6789: LD_INT 3
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: LD_INT 30
6798: PUSH
6799: LD_INT 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 3
6808: PUSH
6809: LD_INT 57
6811: PUSH
6812: EMPTY
6813: LIST
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: PPUSH
6825: CALL_OW 70
6829: AND
6830: IFFALSE 6890
6832: PUSH
6833: LD_INT 5
6835: PPUSH
6836: LD_INT 22
6838: PUSH
6839: LD_INT 1
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 21
6848: PUSH
6849: LD_INT 3
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 30
6858: PUSH
6859: LD_INT 5
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 3
6868: PUSH
6869: LD_INT 57
6871: PUSH
6872: EMPTY
6873: LIST
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: PPUSH
6885: CALL_OW 70
6889: AND
6890: IFFALSE 6932
6892: GO 6894
6894: DISABLE
// begin DialogueOn ;
6895: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6899: LD_EXP 1
6903: PPUSH
6904: LD_STRING D7-JMM-1
6906: PPUSH
6907: CALL_OW 88
// DialogueOff ;
6911: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6915: LD_STRING M4
6917: PPUSH
6918: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6922: LD_INT 5
6924: PPUSH
6925: LD_INT 0
6927: PPUSH
6928: CALL_OW 424
// end ;
6932: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6933: LD_INT 6
6935: PPUSH
6936: LD_INT 22
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 4
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PPUSH
6960: CALL_OW 70
6964: IFFALSE 6976
6966: PUSH
6967: LD_EXP 38
6971: PUSH
6972: LD_INT 1
6974: EQUAL
6975: AND
6976: IFFALSE 6988
6978: PUSH
6979: LD_EXP 30
6983: PUSH
6984: LD_INT 0
6986: EQUAL
6987: AND
6988: IFFALSE 7053
6990: GO 6992
6992: DISABLE
// begin enable ;
6993: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6994: LD_ADDR_EXP 27
6998: PUSH
6999: LD_INT 6
7001: PPUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 25
7014: PUSH
7015: LD_INT 4
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PPUSH
7026: CALL_OW 70
7030: PUSH
7031: LD_INT 1
7033: ARRAY
7034: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
7035: LD_INT 6
7037: PPUSH
7038: LD_INT 0
7040: PPUSH
7041: CALL_OW 424
// radationResearched := 1 ;
7045: LD_ADDR_EXP 30
7049: PUSH
7050: LD_INT 1
7052: ST_TO_ADDR
// end ;
7053: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
7054: LD_EXP 27
7058: PPUSH
7059: CALL_OW 301
7063: IFFALSE 7075
7065: PUSH
7066: LD_EXP 30
7070: PUSH
7071: LD_INT 1
7073: EQUAL
7074: AND
7075: IFFALSE 7111
7077: GO 7079
7079: DISABLE
// begin enable ;
7080: ENABLE
// radationResearched = 0 ;
7081: LD_ADDR_EXP 30
7085: PUSH
7086: LD_INT 0
7088: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7089: LD_INT 6
7091: PPUSH
7092: LD_INT 1
7094: PPUSH
7095: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
7099: LD_EXP 1
7103: PPUSH
7104: LD_STRING D9a-JMM-1
7106: PPUSH
7107: CALL_OW 88
// end ; end_of_file
7111: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
7112: LD_VAR 0 5
7116: PUSH
7117: LD_INT 8
7119: EQUAL
7120: IFFALSE 7132
7122: PUSH
7123: LD_EXP 36
7127: PUSH
7128: LD_INT 0
7130: EQUAL
7131: AND
7132: IFFALSE 7185
// begin eventVar1 := 1 ;
7134: LD_ADDR_EXP 36
7138: PUSH
7139: LD_INT 1
7141: ST_TO_ADDR
// DialogueOn ;
7142: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
7146: LD_EXP 1
7150: PPUSH
7151: LD_STRING D6a-JMM-1
7153: PPUSH
7154: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
7158: LD_EXP 16
7162: PPUSH
7163: LD_STRING D6a-Pow-1
7165: PPUSH
7166: CALL_OW 94
// DialogueOff ;
7170: CALL_OW 7
// wait ( 3 3$0 ) ;
7174: LD_INT 6300
7176: PPUSH
7177: CALL_OW 67
// PowellSupport ;
7181: CALL 1872 0 0
// end ; end ;
7185: PPOPN 5
7187: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL 27356 0 1
// if un = JMM then
7197: LD_VAR 0 1
7201: PUSH
7202: LD_EXP 1
7206: EQUAL
7207: IFFALSE 7216
// YouLost ( JMM ) ;
7209: LD_STRING JMM
7211: PPUSH
7212: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7216: LD_VAR 0 1
7220: PPUSH
7221: CALL_OW 264
7225: PUSH
7226: LD_INT 31
7228: EQUAL
7229: IFFALSE 7245
// achivCounter := achivCounter + 1 ;
7231: LD_ADDR_EXP 42
7235: PUSH
7236: LD_EXP 42
7240: PUSH
7241: LD_INT 1
7243: PLUS
7244: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7245: LD_VAR 0 1
7249: PPUSH
7250: CALL_OW 255
7254: PUSH
7255: LD_INT 1
7257: NONEQUAL
7258: IFFALSE 7275
7260: PUSH
7261: LD_VAR 0 1
7265: PPUSH
7266: CALL_OW 247
7270: PUSH
7271: LD_INT 2
7273: EQUAL
7274: AND
7275: IFFALSE 7291
// destroyCounter := destroyCounter + 1 ;
7277: LD_ADDR_EXP 43
7281: PUSH
7282: LD_EXP 43
7286: PUSH
7287: LD_INT 1
7289: PLUS
7290: ST_TO_ADDR
// end ;
7291: PPOPN 1
7293: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7294: LD_VAR 0 2
7298: PUSH
7299: LD_EXP 19
7303: EQUAL
7304: IFFALSE 7313
// SetAchievement ( ACH_MASHA ) ;
7306: LD_STRING ACH_MASHA
7308: PPUSH
7309: CALL_OW 543
// end ;
7313: PPOPN 4
7315: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7316: LD_VAR 0 1
7320: PPUSH
7321: LD_VAR 0 2
7325: PPUSH
7326: CALL 27414 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7330: LD_VAR 0 1
7334: PPUSH
7335: CALL_OW 264
7339: PUSH
7340: LD_INT 8
7342: EQUAL
7343: IFFALSE 7355
7345: PUSH
7346: LD_EXP 37
7350: PUSH
7351: LD_INT 0
7353: EQUAL
7354: AND
7355: IFFALSE 7424
// begin eventVar2 := 1 ;
7357: LD_ADDR_EXP 37
7361: PUSH
7362: LD_INT 1
7364: ST_TO_ADDR
// DialogueOn ;
7365: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7369: LD_EXP 1
7373: PPUSH
7374: LD_STRING D6b-JMM-1
7376: PPUSH
7377: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7381: LD_EXP 16
7385: PPUSH
7386: LD_STRING D6b-Pow-1
7388: PPUSH
7389: CALL_OW 94
// DialogueOff ;
7393: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7397: LD_INT 5
7399: PPUSH
7400: LD_INT 1
7402: PPUSH
7403: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7407: LD_INT 7
7409: PPUSH
7410: LD_INT 1
7412: PPUSH
7413: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7417: LD_STRING M3
7419: PPUSH
7420: CALL_OW 337
// end ; end ;
7424: PPOPN 2
7426: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7427: LD_VAR 0 2
7431: PPUSH
7432: LD_VAR 0 3
7436: PPUSH
7437: LD_INT 5
7439: PPUSH
7440: CALL_OW 309
7444: IFFALSE 7456
7446: PUSH
7447: LD_EXP 38
7451: PUSH
7452: LD_INT 0
7454: EQUAL
7455: AND
7456: IFFALSE 7681
// begin eventVar3 := 1 ;
7458: LD_ADDR_EXP 38
7462: PUSH
7463: LD_INT 1
7465: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7466: LD_INT 175
7468: PPUSH
7469: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7473: LD_INT 7
7475: PPUSH
7476: LD_INT 22
7478: PUSH
7479: LD_INT 1
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 21
7488: PUSH
7489: LD_INT 2
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 34
7498: PUSH
7499: LD_INT 11
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: PPUSH
7511: CALL_OW 70
7515: IFFALSE 7534
// begin radarOnSpot := 1 ;
7517: LD_ADDR_EXP 31
7521: PUSH
7522: LD_INT 1
7524: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7525: LD_STRING M3a
7527: PPUSH
7528: CALL_OW 337
// end else
7532: GO 7541
// ChangeMissionObjectives ( M3b ) ;
7534: LD_STRING M3b
7536: PPUSH
7537: CALL_OW 337
// DialogueOn ;
7541: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7545: LD_EXP 2
7549: PPUSH
7550: LD_STRING D8-Huck-1
7552: PPUSH
7553: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7557: LD_EXP 1
7561: PPUSH
7562: LD_STRING D8-JMM-1
7564: PPUSH
7565: CALL_OW 88
// if IsOk ( Stevens ) then
7569: LD_EXP 2
7573: PPUSH
7574: CALL_OW 302
7578: IFFALSE 7640
// begin Say ( Stevens , D8-Huck-2 ) ;
7580: LD_EXP 2
7584: PPUSH
7585: LD_STRING D8-Huck-2
7587: PPUSH
7588: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7592: LD_EXP 1
7596: PPUSH
7597: LD_STRING D8-JMM-2
7599: PPUSH
7600: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7604: LD_EXP 2
7608: PPUSH
7609: LD_STRING D8-Huck-3
7611: PPUSH
7612: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7616: LD_EXP 1
7620: PPUSH
7621: LD_STRING D8-JMM-3
7623: PPUSH
7624: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7628: LD_EXP 2
7632: PPUSH
7633: LD_STRING D8-Huck-4
7635: PPUSH
7636: CALL_OW 88
// end ; DialogueOff ;
7640: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7644: LD_INT 5
7646: PPUSH
7647: LD_INT 0
7649: PPUSH
7650: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7654: LD_INT 7
7656: PPUSH
7657: LD_INT 0
7659: PPUSH
7660: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7664: LD_INT 6
7666: PPUSH
7667: LD_INT 1
7669: PPUSH
7670: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7674: LD_STRING M5
7676: PPUSH
7677: CALL_OW 337
// end ; end ;
7681: PPOPN 3
7683: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7684: LD_EXP 27
7688: PPUSH
7689: CALL_OW 302
7693: IFFALSE 7707
7695: PUSH
7696: LD_VAR 0 2
7700: PUSH
7701: LD_EXP 27
7705: EQUAL
7706: AND
7707: IFFALSE 7719
7709: PUSH
7710: LD_EXP 39
7714: PUSH
7715: LD_INT 0
7717: EQUAL
7718: AND
7719: IFFALSE 7731
7721: PUSH
7722: LD_EXP 38
7726: PUSH
7727: LD_INT 1
7729: EQUAL
7730: AND
7731: IFFALSE 7771
7733: PUSH
7734: LD_VAR 0 1
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: CALL_OW 268
7746: PUSH
7747: LD_INT 11
7749: EQUAL
7750: IFTRUE 7770
7752: PUSH
7753: LD_VAR 0 1
7757: PPUSH
7758: LD_INT 2
7760: PPUSH
7761: CALL_OW 268
7765: PUSH
7766: LD_INT 11
7768: EQUAL
7769: OR
7770: AND
7771: IFFALSE 7781
// eventVar4 := 1 ;
7773: LD_ADDR_EXP 39
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// end ;
7781: PPOPN 2
7783: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7784: LD_INT 0
7786: PPUSH
7787: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7788: LD_VAR 0 1
7792: PPUSH
7793: CALL_OW 248
7797: PUSH
7798: LD_INT 2
7800: EQUAL
7801: IFFALSE 8037
// begin for i := sibDeposits downto 1 do
7803: LD_ADDR_VAR 0 4
7807: PUSH
7808: DOUBLE
7809: LD_EXP 32
7813: INC
7814: ST_TO_ADDR
7815: LD_INT 1
7817: PUSH
7818: FOR_DOWNTO
7819: IFFALSE 7891
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7821: LD_EXP 32
7825: PUSH
7826: LD_VAR 0 4
7830: ARRAY
7831: PUSH
7832: LD_INT 1
7834: ARRAY
7835: PUSH
7836: LD_VAR 0 2
7840: EQUAL
7841: IFFALSE 7865
7843: PUSH
7844: LD_EXP 32
7848: PUSH
7849: LD_VAR 0 4
7853: ARRAY
7854: PUSH
7855: LD_INT 2
7857: ARRAY
7858: PUSH
7859: LD_VAR 0 3
7863: EQUAL
7864: AND
7865: IFFALSE 7889
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7867: LD_ADDR_EXP 32
7871: PUSH
7872: LD_EXP 32
7876: PPUSH
7877: LD_VAR 0 4
7881: PPUSH
7882: CALL_OW 3
7886: ST_TO_ADDR
// break ;
7887: GO 7891
// end ;
7889: GO 7818
7891: POP
7892: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7893: LD_EXP 40
7897: PUSH
7898: LD_INT 0
7900: EQUAL
7901: IFFALSE 7935
7903: PUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: LD_VAR 0 3
7913: PPUSH
7914: CALL_OW 428
7918: PUSH
7919: LD_INT 22
7921: PUSH
7922: LD_INT 1
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PPUSH
7929: CALL_OW 69
7933: IN
7934: AND
7935: IFFALSE 8037
// begin eventVar5 := 1 ;
7937: LD_ADDR_EXP 40
7941: PUSH
7942: LD_INT 1
7944: ST_TO_ADDR
// DialogueOn ;
7945: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7949: LD_EXP 2
7953: PPUSH
7954: LD_STRING D4-Sci1-1
7956: PPUSH
7957: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7961: LD_EXP 1
7965: PPUSH
7966: LD_STRING D4-JMM-1
7968: PPUSH
7969: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7973: LD_EXP 2
7977: PPUSH
7978: LD_STRING D4-Sci1-2
7980: PPUSH
7981: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7985: LD_EXP 1
7989: PPUSH
7990: LD_STRING D4-JMM-2
7992: PPUSH
7993: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7997: LD_EXP 2
8001: PPUSH
8002: LD_STRING D4-Sci1-3
8004: PPUSH
8005: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8009: LD_EXP 1
8013: PPUSH
8014: LD_STRING D4-JMM-3
8016: PPUSH
8017: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
8021: LD_EXP 1
8025: PPUSH
8026: LD_STRING D4-JMM-3a
8028: PPUSH
8029: CALL_OW 88
// DialogueOff ;
8033: CALL_OW 7
// end ; end ; end ;
8037: PPOPN 5
8039: END
// on SiberiteDepositDestroyed ( x , y ) do begin sibDestroyedCounter := Inc ( sibDestroyedCounter ) ;
8040: LD_ADDR_EXP 33
8044: PUSH
8045: LD_EXP 33
8049: PPUSH
8050: CALL 72287 0 1
8054: ST_TO_ADDR
// end ;
8055: PPOPN 2
8057: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
8058: LD_VAR 0 1
8062: PPUSH
8063: CALL_OW 255
8067: PUSH
8068: LD_INT 1
8070: EQUAL
8071: IFFALSE 8088
8073: PUSH
8074: LD_VAR 0 1
8078: PPUSH
8079: CALL_OW 266
8083: PUSH
8084: LD_INT 0
8086: EQUAL
8087: AND
8088: IFFALSE 8153
8090: PUSH
8091: LD_INT 22
8093: PUSH
8094: LD_INT 1
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 21
8103: PUSH
8104: LD_INT 3
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 2
8113: PUSH
8114: LD_INT 30
8116: PUSH
8117: LD_INT 0
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: LD_INT 30
8126: PUSH
8127: LD_INT 1
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 69
8148: PUSH
8149: LD_INT 1
8151: EQUAL
8152: AND
8153: IFFALSE 8167
// SetBName ( building , omega ) ;
8155: LD_VAR 0 1
8159: PPUSH
8160: LD_STRING omega
8162: PPUSH
8163: CALL_OW 500
// end ;
8167: PPOPN 2
8169: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8170: LD_VAR 0 1
8174: PPUSH
8175: CALL 27398 0 1
// end ;
8179: PPOPN 1
8181: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
8182: LD_VAR 0 1
8186: PUSH
8187: LD_EXP 44
8191: EQUAL
8192: IFFALSE 8198
// ArabianAttack ;
8194: CALL 10352 0 0
// if event = eventRussianAttack then
8198: LD_VAR 0 1
8202: PUSH
8203: LD_EXP 45
8207: EQUAL
8208: IFFALSE 8214
// RussianAttack ;
8210: CALL 10717 0 0
// end ;
8214: PPOPN 1
8216: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8217: LD_VAR 0 1
8221: PUSH
8222: LD_EXP 46
8226: EQUAL
8227: IFFALSE 8323
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8229: LD_VAR 0 2
8233: PPUSH
8234: CALL_OW 302
8238: IFFALSE 8256
8240: PUSH
8241: LD_VAR 0 3
8245: PPUSH
8246: LD_VAR 0 4
8250: PPUSH
8251: CALL_OW 488
8255: AND
8256: IFFALSE 8323
// begin repeat wait ( 0 0$1 ) ;
8258: LD_INT 35
8260: PPUSH
8261: CALL_OW 67
// if not HasTask ( p1 ) then
8265: LD_VAR 0 2
8269: PPUSH
8270: CALL_OW 314
8274: NOT
8275: IFFALSE 8311
// begin ComContaminate ( p1 , p2 , p3 ) ;
8277: LD_VAR 0 2
8281: PPUSH
8282: LD_VAR 0 3
8286: PPUSH
8287: LD_VAR 0 4
8291: PPUSH
8292: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8296: LD_VAR 0 2
8300: PPUSH
8301: LD_INT 42
8303: PPUSH
8304: LD_INT 3
8306: PPUSH
8307: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8311: LD_VAR 0 2
8315: PPUSH
8316: CALL_OW 302
8320: NOT
8321: IFFALSE 8258
// end ; end ; end ;
8323: PPOPN 7
8325: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8326: LD_VAR 0 1
8330: PPUSH
8331: CALL_OW 255
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: LD_INT 8
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: IN
8346: IFFALSE 8409
// begin ComMoveXY ( driver , 41 , 2 ) ;
8348: LD_VAR 0 1
8352: PPUSH
8353: LD_INT 41
8355: PPUSH
8356: LD_INT 2
8358: PPUSH
8359: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8363: LD_INT 35
8365: PPUSH
8366: CALL_OW 67
// if IsDead ( driver ) then
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 301
8379: IFFALSE 8383
// exit ;
8381: GO 8409
// until IsAt ( driver , 41 , 2 ) ;
8383: LD_VAR 0 1
8387: PPUSH
8388: LD_INT 41
8390: PPUSH
8391: LD_INT 2
8393: PPUSH
8394: CALL_OW 307
8398: IFFALSE 8363
// RemoveUnit ( driver ) ;
8400: LD_VAR 0 1
8404: PPUSH
8405: CALL_OW 64
// end ; end ; end_of_file
8409: PPOPN 4
8411: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8412: LD_INT 0
8414: PPUSH
8415: PPUSH
8416: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8417: LD_ADDR_VAR 0 1
8421: PUSH
8422: LD_VAR 0 1
8426: PUSH
8427: LD_EXP 1
8431: PUSH
8432: LD_EXP 2
8436: PUSH
8437: LD_EXP 3
8441: PUSH
8442: LD_EXP 4
8446: PUSH
8447: LD_EXP 5
8451: PUSH
8452: LD_EXP 6
8456: PUSH
8457: LD_EXP 7
8461: PUSH
8462: LD_EXP 8
8466: PUSH
8467: LD_EXP 9
8471: PUSH
8472: LD_EXP 10
8476: PUSH
8477: LD_EXP 11
8481: PUSH
8482: LD_EXP 12
8486: PUSH
8487: LD_EXP 13
8491: PUSH
8492: LD_EXP 14
8496: PUSH
8497: LD_EXP 16
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: DIFF
8519: ST_TO_ADDR
// if not characters then
8520: LD_VAR 0 1
8524: NOT
8525: IFFALSE 8529
// exit ;
8527: GO 8608
// speaker := characters [ rand ( 1 , characters ) ] ;
8529: LD_ADDR_VAR 0 6
8533: PUSH
8534: LD_VAR 0 1
8538: PUSH
8539: LD_INT 1
8541: PPUSH
8542: LD_VAR 0 1
8546: PPUSH
8547: CALL_OW 12
8551: ARRAY
8552: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8553: LD_VAR 0 6
8557: PPUSH
8558: CALL_OW 258
8562: PUSH
8563: LD_INT 1
8565: EQUAL
8566: IFFALSE 8584
// Say ( speaker , dialogMID ) else
8568: LD_VAR 0 6
8572: PPUSH
8573: LD_VAR 0 2
8577: PPUSH
8578: CALL_OW 88
8582: GO 8598
// Say ( speaker , dialogFID ) ;
8584: LD_VAR 0 6
8588: PPUSH
8589: LD_VAR 0 3
8593: PPUSH
8594: CALL_OW 88
// result := speaker ;
8598: LD_ADDR_VAR 0 4
8602: PUSH
8603: LD_VAR 0 6
8607: ST_TO_ADDR
// end ;
8608: LD_VAR 0 4
8612: RET
// export function PrepareDifficulty ; begin
8613: LD_INT 0
8615: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8616: LD_INT 5
8618: PPUSH
8619: LD_INT 8
8621: PPUSH
8622: LD_INT 2
8624: PPUSH
8625: CALL_OW 322
// if Difficulty = 1 then
8629: LD_OWVAR 67
8633: PUSH
8634: LD_INT 1
8636: EQUAL
8637: IFFALSE 8756
// begin SetTech ( 66 , 8 , state_researched ) ;
8639: LD_INT 66
8641: PPUSH
8642: LD_INT 8
8644: PPUSH
8645: LD_INT 2
8647: PPUSH
8648: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8652: LD_INT 67
8654: PPUSH
8655: LD_INT 8
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8665: LD_INT 68
8667: PPUSH
8668: LD_INT 8
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8678: LD_INT 51
8680: PPUSH
8681: LD_INT 8
8683: PPUSH
8684: LD_INT 2
8686: PPUSH
8687: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8691: LD_INT 52
8693: PPUSH
8694: LD_INT 8
8696: PPUSH
8697: LD_INT 0
8699: PPUSH
8700: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8704: LD_INT 53
8706: PPUSH
8707: LD_INT 8
8709: PPUSH
8710: LD_INT 0
8712: PPUSH
8713: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8717: LD_INT 60
8719: PPUSH
8720: LD_INT 8
8722: PPUSH
8723: LD_INT 2
8725: PPUSH
8726: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8730: LD_INT 61
8732: PPUSH
8733: LD_INT 8
8735: PPUSH
8736: LD_INT 0
8738: PPUSH
8739: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8743: LD_INT 62
8745: PPUSH
8746: LD_INT 8
8748: PPUSH
8749: LD_INT 0
8751: PPUSH
8752: CALL_OW 322
// end ; if Difficulty = 2 then
8756: LD_OWVAR 67
8760: PUSH
8761: LD_INT 2
8763: EQUAL
8764: IFFALSE 8883
// begin SetTech ( 66 , 8 , state_researched ) ;
8766: LD_INT 66
8768: PPUSH
8769: LD_INT 8
8771: PPUSH
8772: LD_INT 2
8774: PPUSH
8775: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8779: LD_INT 67
8781: PPUSH
8782: LD_INT 8
8784: PPUSH
8785: LD_INT 2
8787: PPUSH
8788: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8792: LD_INT 68
8794: PPUSH
8795: LD_INT 8
8797: PPUSH
8798: LD_INT 0
8800: PPUSH
8801: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8805: LD_INT 51
8807: PPUSH
8808: LD_INT 8
8810: PPUSH
8811: LD_INT 2
8813: PPUSH
8814: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8818: LD_INT 52
8820: PPUSH
8821: LD_INT 8
8823: PPUSH
8824: LD_INT 2
8826: PPUSH
8827: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8831: LD_INT 53
8833: PPUSH
8834: LD_INT 8
8836: PPUSH
8837: LD_INT 2
8839: PPUSH
8840: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8844: LD_INT 60
8846: PPUSH
8847: LD_INT 8
8849: PPUSH
8850: LD_INT 2
8852: PPUSH
8853: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8857: LD_INT 61
8859: PPUSH
8860: LD_INT 8
8862: PPUSH
8863: LD_INT 2
8865: PPUSH
8866: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8870: LD_INT 62
8872: PPUSH
8873: LD_INT 8
8875: PPUSH
8876: LD_INT 0
8878: PPUSH
8879: CALL_OW 322
// end ; if Difficulty >= 3 then
8883: LD_OWVAR 67
8887: PUSH
8888: LD_INT 3
8890: GREATEREQUAL
8891: IFFALSE 9010
// begin SetTech ( 66 , 8 , state_researched ) ;
8893: LD_INT 66
8895: PPUSH
8896: LD_INT 8
8898: PPUSH
8899: LD_INT 2
8901: PPUSH
8902: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8906: LD_INT 67
8908: PPUSH
8909: LD_INT 8
8911: PPUSH
8912: LD_INT 2
8914: PPUSH
8915: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8919: LD_INT 68
8921: PPUSH
8922: LD_INT 8
8924: PPUSH
8925: LD_INT 0
8927: PPUSH
8928: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8932: LD_INT 51
8934: PPUSH
8935: LD_INT 8
8937: PPUSH
8938: LD_INT 2
8940: PPUSH
8941: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8945: LD_INT 52
8947: PPUSH
8948: LD_INT 8
8950: PPUSH
8951: LD_INT 2
8953: PPUSH
8954: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8958: LD_INT 53
8960: PPUSH
8961: LD_INT 8
8963: PPUSH
8964: LD_INT 2
8966: PPUSH
8967: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8971: LD_INT 60
8973: PPUSH
8974: LD_INT 8
8976: PPUSH
8977: LD_INT 2
8979: PPUSH
8980: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8984: LD_INT 61
8986: PPUSH
8987: LD_INT 8
8989: PPUSH
8990: LD_INT 2
8992: PPUSH
8993: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8997: LD_INT 62
8999: PPUSH
9000: LD_INT 8
9002: PPUSH
9003: LD_INT 0
9005: PPUSH
9006: CALL_OW 322
// end ; end ;
9010: LD_VAR 0 1
9014: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9015: LD_INT 0
9017: PPUSH
9018: PPUSH
// for i in charactersList do
9019: LD_ADDR_VAR 0 4
9023: PUSH
9024: LD_VAR 0 1
9028: PUSH
9029: FOR_IN
9030: IFFALSE 9048
// SaveCharacters ( i , ident ) ;
9032: LD_VAR 0 4
9036: PPUSH
9037: LD_VAR 0 2
9041: PPUSH
9042: CALL_OW 38
9046: GO 9029
9048: POP
9049: POP
// end ; end_of_file
9050: LD_VAR 0 3
9054: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
9055: LD_EXP 39
9059: PUSH
9060: LD_INT 1
9062: EQUAL
9063: IFFALSE 10041
9065: GO 9067
9067: DISABLE
9068: LD_INT 0
9070: PPUSH
9071: PPUSH
9072: PPUSH
// begin m1 := false ;
9073: LD_ADDR_VAR 0 1
9077: PUSH
9078: LD_INT 0
9080: ST_TO_ADDR
// m2 := false ;
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_INT 0
9088: ST_TO_ADDR
// m3 := false ;
9089: LD_ADDR_VAR 0 3
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
9097: LD_INT 22
9099: PUSH
9100: LD_INT 1
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 21
9109: PUSH
9110: LD_INT 1
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 23
9119: PUSH
9120: LD_INT 1
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 50
9129: PUSH
9130: EMPTY
9131: LIST
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: PPUSH
9139: CALL_OW 69
9143: PPUSH
9144: CALL 34982 0 1
9148: PUSH
9149: LD_INT 5
9151: LESS
9152: IFFALSE 9163
// begin YouLost ( Troops ) ;
9154: LD_STRING Troops
9156: PPUSH
9157: CALL_OW 104
// exit ;
9161: GO 10041
// end ; DialogueOn ;
9163: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
9167: LD_EXP 1
9171: PPUSH
9172: LD_STRING D9b-JMM-1
9174: PPUSH
9175: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
9179: LD_EXP 16
9183: PPUSH
9184: LD_STRING D9b-Pow-1
9186: PPUSH
9187: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
9191: LD_EXP 1
9195: PPUSH
9196: LD_STRING D9b-JMM-2
9198: PPUSH
9199: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
9203: LD_EXP 16
9207: PPUSH
9208: LD_STRING D9b-Pow-2
9210: PPUSH
9211: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
9215: LD_EXP 1
9219: PPUSH
9220: LD_STRING D9b-JMM-3
9222: PPUSH
9223: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
9227: LD_EXP 16
9231: PPUSH
9232: LD_STRING D9b-Pow-3
9234: PPUSH
9235: CALL_OW 94
// if tick <= 60 60$00 then
9239: LD_OWVAR 1
9243: PUSH
9244: LD_INT 126000
9246: LESSEQUAL
9247: IFFALSE 9256
// SetAchievement ( ACH_ASPEED_13 ) ;
9249: LD_STRING ACH_ASPEED_13
9251: PPUSH
9252: CALL_OW 543
// if burlakStatus = 1 then
9256: LD_EXP 29
9260: PUSH
9261: LD_INT 1
9263: EQUAL
9264: IFFALSE 9286
// begin m1 := true ;
9266: LD_ADDR_VAR 0 1
9270: PUSH
9271: LD_INT 1
9273: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9274: LD_STRING Burlak
9276: PPUSH
9277: LD_INT 1
9279: PPUSH
9280: CALL_OW 101
// end else
9284: GO 9297
// begin AddMedal ( Burlak , - 1 ) ;
9286: LD_STRING Burlak
9288: PPUSH
9289: LD_INT 1
9291: NEG
9292: PPUSH
9293: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9297: LD_EXP 2
9301: PPUSH
9302: CALL_OW 302
9306: IFFALSE 9328
// begin m2 := true ;
9308: LD_ADDR_VAR 0 2
9312: PUSH
9313: LD_INT 1
9315: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9316: LD_STRING Stevens
9318: PPUSH
9319: LD_INT 1
9321: PPUSH
9322: CALL_OW 101
// end else
9326: GO 9339
// begin AddMedal ( Stevens , - 1 ) ;
9328: LD_STRING Stevens
9330: PPUSH
9331: LD_INT 1
9333: NEG
9334: PPUSH
9335: CALL_OW 101
// end ; if radarOnSpot = 1 then
9339: LD_EXP 31
9343: PUSH
9344: LD_INT 1
9346: EQUAL
9347: IFFALSE 9369
// begin m3 := true ;
9349: LD_ADDR_VAR 0 3
9353: PUSH
9354: LD_INT 1
9356: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9357: LD_STRING Observation
9359: PPUSH
9360: LD_INT 1
9362: PPUSH
9363: CALL_OW 101
// end else
9367: GO 9380
// begin AddMedal ( Observation , - 1 ) ;
9369: LD_STRING Observation
9371: PPUSH
9372: LD_INT 1
9374: NEG
9375: PPUSH
9376: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9380: LD_VAR 0 1
9384: IFFALSE 9392
9386: PUSH
9387: LD_VAR 0 2
9391: AND
9392: IFFALSE 9400
9394: PUSH
9395: LD_VAR 0 3
9399: AND
9400: IFFALSE 9412
9402: PUSH
9403: LD_OWVAR 67
9407: PUSH
9408: LD_INT 3
9410: GREATEREQUAL
9411: AND
9412: IFFALSE 9424
// SetAchievementEX ( ACH_AMER , 13 ) ;
9414: LD_STRING ACH_AMER
9416: PPUSH
9417: LD_INT 13
9419: PPUSH
9420: CALL_OW 564
// GiveMedals ( MAIN ) ;
9424: LD_STRING MAIN
9426: PPUSH
9427: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9431: LD_EXP 29
9435: PPUSH
9436: LD_STRING 13_BurlakStatus_1
9438: PPUSH
9439: CALL_OW 39
// if IsLive ( Stevens ) then
9443: LD_EXP 2
9447: PPUSH
9448: CALL_OW 300
9452: IFFALSE 9466
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9454: LD_INT 1
9456: PPUSH
9457: LD_STRING 13_StevensStatus_1
9459: PPUSH
9460: CALL_OW 39
9464: GO 9476
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9466: LD_INT 0
9468: PPUSH
9469: LD_STRING 13_StevensStatus_1
9471: PPUSH
9472: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9476: LD_INT 22
9478: PUSH
9479: LD_INT 1
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 21
9488: PUSH
9489: LD_INT 1
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PUSH
9496: LD_INT 2
9498: PUSH
9499: LD_INT 25
9501: PUSH
9502: LD_INT 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 25
9511: PUSH
9512: LD_INT 2
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 25
9521: PUSH
9522: LD_INT 3
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 25
9531: PUSH
9532: LD_INT 4
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: LD_INT 25
9541: PUSH
9542: LD_INT 5
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 25
9551: PUSH
9552: LD_INT 8
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: PPUSH
9578: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9582: LD_EXP 1
9586: PPUSH
9587: LD_EXP 35
9591: PUSH
9592: LD_STRING JMM
9594: STR
9595: PPUSH
9596: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9600: LD_EXP 8
9604: PPUSH
9605: LD_EXP 35
9609: PUSH
9610: LD_STRING Brown
9612: STR
9613: PPUSH
9614: CALL 9015 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9618: LD_EXP 4
9622: PPUSH
9623: LD_EXP 35
9627: PUSH
9628: LD_STRING Donaldson
9630: STR
9631: PPUSH
9632: CALL 9015 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9636: LD_EXP 5
9640: PPUSH
9641: LD_EXP 35
9645: PUSH
9646: LD_STRING Bobby
9648: STR
9649: PPUSH
9650: CALL 9015 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9654: LD_EXP 6
9658: PPUSH
9659: LD_EXP 35
9663: PUSH
9664: LD_STRING Cyrus
9666: STR
9667: PPUSH
9668: CALL 9015 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9672: LD_EXP 3
9676: PPUSH
9677: LD_EXP 35
9681: PUSH
9682: LD_STRING Lisa
9684: STR
9685: PPUSH
9686: CALL 9015 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9690: LD_EXP 13
9694: PPUSH
9695: LD_EXP 35
9699: PUSH
9700: LD_STRING Frank
9702: STR
9703: PPUSH
9704: CALL 9015 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9708: LD_EXP 14
9712: PPUSH
9713: LD_EXP 35
9717: PUSH
9718: LD_STRING Kikuchi
9720: STR
9721: PPUSH
9722: CALL 9015 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9726: LD_EXP 10
9730: PPUSH
9731: LD_EXP 35
9735: PUSH
9736: LD_STRING Houten
9738: STR
9739: PPUSH
9740: CALL 9015 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9744: LD_EXP 12
9748: PPUSH
9749: LD_EXP 35
9753: PUSH
9754: LD_STRING Gary
9756: STR
9757: PPUSH
9758: CALL 9015 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9762: LD_EXP 11
9766: PPUSH
9767: LD_EXP 35
9771: PUSH
9772: LD_STRING Cornell
9774: STR
9775: PPUSH
9776: CALL 9015 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9780: LD_EXP 7
9784: PPUSH
9785: LD_EXP 35
9789: PUSH
9790: LD_STRING Denis
9792: STR
9793: PPUSH
9794: CALL 9015 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9798: LD_EXP 9
9802: PPUSH
9803: LD_EXP 35
9807: PUSH
9808: LD_STRING Gladstone
9810: STR
9811: PPUSH
9812: CALL 9015 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9816: LD_EXP 2
9820: PPUSH
9821: LD_EXP 35
9825: PUSH
9826: LD_STRING Stevens
9828: STR
9829: PPUSH
9830: CALL 9015 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9834: LD_INT 50
9836: PUSH
9837: EMPTY
9838: LIST
9839: PUSH
9840: LD_INT 22
9842: PUSH
9843: LD_INT 1
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 21
9852: PUSH
9853: LD_INT 1
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 2
9862: PUSH
9863: LD_INT 25
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 25
9875: PUSH
9876: LD_INT 2
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 25
9885: PUSH
9886: LD_INT 3
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: LD_INT 25
9895: PUSH
9896: LD_INT 4
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 25
9905: PUSH
9906: LD_INT 5
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: LD_INT 25
9915: PUSH
9916: LD_INT 8
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: PPUSH
9938: CALL_OW 69
9942: PUSH
9943: LD_EXP 1
9947: PUSH
9948: LD_EXP 8
9952: PUSH
9953: LD_EXP 4
9957: PUSH
9958: LD_EXP 5
9962: PUSH
9963: LD_EXP 6
9967: PUSH
9968: LD_EXP 3
9972: PUSH
9973: LD_EXP 13
9977: PUSH
9978: LD_EXP 9
9982: PUSH
9983: LD_EXP 14
9987: PUSH
9988: LD_EXP 7
9992: PUSH
9993: LD_EXP 10
9997: PUSH
9998: LD_EXP 12
10002: PUSH
10003: LD_EXP 11
10007: PUSH
10008: LD_EXP 2
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: DIFF
10029: PPUSH
10030: LD_STRING 13_other_survivors
10032: PPUSH
10033: CALL_OW 38
// YouWin ;
10037: CALL_OW 103
// end ; end_of_file
10041: PPOPN 3
10043: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
10044: LD_EXP 33
10048: PUSH
10049: LD_INT 2
10051: EQUAL
10052: IFFALSE 10071
10054: PUSH
10055: LD_INT 34
10057: PUSH
10058: LD_INT 8
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PPUSH
10065: CALL_OW 69
10069: NOT
10070: AND
10071: IFFALSE 10089
10073: PUSH
10074: LD_INT 25
10076: PPUSH
10077: LD_INT 1
10079: PPUSH
10080: CALL_OW 321
10084: PUSH
10085: LD_INT 1
10087: EQUAL
10088: AND
10089: IFFALSE 10234
10091: GO 10093
10093: DISABLE
10094: LD_INT 0
10096: PPUSH
10097: PPUSH
10098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10099: LD_ADDR_VAR 0 2
10103: PUSH
10104: LD_INT 22
10106: PUSH
10107: LD_INT 1
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 21
10116: PUSH
10117: LD_INT 3
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 2
10126: PUSH
10127: LD_INT 30
10129: PUSH
10130: LD_INT 0
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PUSH
10137: LD_INT 30
10139: PUSH
10140: LD_INT 1
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: LIST
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: LIST
10156: PPUSH
10157: CALL_OW 69
10161: ST_TO_ADDR
// for i in tmp do
10162: LD_ADDR_VAR 0 1
10166: PUSH
10167: LD_VAR 0 2
10171: PUSH
10172: FOR_IN
10173: IFFALSE 10206
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
10175: LD_ADDR_VAR 0 3
10179: PUSH
10180: LD_VAR 0 3
10184: PUSH
10185: LD_VAR 0 1
10189: PPUSH
10190: CALL_OW 274
10194: PPUSH
10195: LD_INT 3
10197: PPUSH
10198: CALL_OW 275
10202: PLUS
10203: ST_TO_ADDR
10204: GO 10172
10206: POP
10207: POP
// if yourSiberite < CostOfWeapon ( us_siberium_rocket ) [ 3 ] then
10208: LD_VAR 0 3
10212: PUSH
10213: LD_INT 8
10215: PPUSH
10216: CALL_OW 451
10220: PUSH
10221: LD_INT 3
10223: ARRAY
10224: LESS
10225: IFFALSE 10234
// YouLost ( siberite ) ;
10227: LD_STRING siberite
10229: PPUSH
10230: CALL_OW 104
// end ; end_of_file
10234: PPOPN 3
10236: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10237: LD_INT 22
10239: PUSH
10240: LD_INT 8
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 21
10249: PUSH
10250: LD_INT 1
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 69
10265: PUSH
10266: LD_INT 6
10268: LESS
10269: IFFALSE 10279
10271: GO 10273
10273: DISABLE
// begin enable ;
10274: ENABLE
// PrepareArabianAttack ;
10275: CALL 4128 0 0
// end ;
10279: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10280: LD_EXP 36
10284: PUSH
10285: LD_INT 1
10287: EQUAL
10288: IFFALSE 10324
10290: PUSH
10291: LD_INT 22
10293: PUSH
10294: LD_INT 8
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 21
10303: PUSH
10304: LD_INT 1
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PPUSH
10315: CALL_OW 69
10319: PUSH
10320: LD_INT 6
10322: LESS
10323: AND
10324: IFFALSE 10351
10326: GO 10328
10328: DISABLE
// begin wait ( 4 4$00 ) ;
10329: LD_INT 8400
10331: PPUSH
10332: CALL_OW 67
// PrepareRussianAttack ;
10336: CALL 3351 0 0
// wait ( 12 12$00 ) ;
10340: LD_INT 25200
10342: PPUSH
10343: CALL_OW 67
// PrepareRussianAttack ;
10347: CALL 3351 0 0
// end ;
10351: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10352: LD_INT 0
10354: PPUSH
10355: PPUSH
10356: PPUSH
10357: PPUSH
10358: PPUSH
10359: PPUSH
10360: PPUSH
10361: PPUSH
10362: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10363: LD_ADDR_VAR 0 8
10367: PUSH
10368: LD_INT 22
10370: PUSH
10371: LD_INT 8
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 120
10380: PUSH
10381: LD_INT 10
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PPUSH
10392: CALL_OW 69
10396: ST_TO_ADDR
// if not units then
10397: LD_VAR 0 8
10401: NOT
10402: IFFALSE 10406
// exit ;
10404: GO 10712
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10406: LD_ADDR_VAR 0 4
10410: PUSH
10411: LD_INT 80
10413: PUSH
10414: LD_INT 60
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 54
10423: PUSH
10424: LD_INT 57
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 55
10433: PUSH
10434: LD_INT 74
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 61
10443: PUSH
10444: LD_INT 85
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10457: LD_ADDR_VAR 0 5
10461: PUSH
10462: LD_INT 93
10464: PUSH
10465: LD_INT 99
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 85
10474: PUSH
10475: LD_INT 99
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10486: LD_INT 35
10488: PPUSH
10489: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10493: LD_ADDR_VAR 0 6
10497: PUSH
10498: LD_VAR 0 8
10502: PPUSH
10503: LD_INT 21
10505: PUSH
10506: LD_INT 2
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PPUSH
10513: CALL_OW 72
10517: ST_TO_ADDR
// if vehicles then
10518: LD_VAR 0 6
10522: IFFALSE 10538
// AgressiveMove ( vehicles , path ) ;
10524: LD_VAR 0 6
10528: PPUSH
10529: LD_VAR 0 4
10533: PPUSH
10534: CALL 73680 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10538: LD_ADDR_VAR 0 7
10542: PUSH
10543: LD_VAR 0 8
10547: PPUSH
10548: LD_INT 23
10550: PUSH
10551: LD_INT 2
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 21
10560: PUSH
10561: LD_INT 1
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PPUSH
10572: CALL_OW 72
10576: ST_TO_ADDR
// if infantry then
10577: LD_VAR 0 7
10581: IFFALSE 10597
// AgressiveMove ( infantry , path2 ) ;
10583: LD_VAR 0 7
10587: PPUSH
10588: LD_VAR 0 5
10592: PPUSH
10593: CALL 73680 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10597: LD_ADDR_VAR 0 9
10601: PUSH
10602: LD_VAR 0 8
10606: PPUSH
10607: LD_INT 23
10609: PUSH
10610: LD_INT 0
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 21
10619: PUSH
10620: LD_INT 1
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 72
10635: ST_TO_ADDR
// if apes then
10636: LD_VAR 0 9
10640: IFFALSE 10684
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10642: LD_VAR 0 9
10646: PUSH
10647: LD_INT 1
10649: ARRAY
10650: PPUSH
10651: LD_INT 22
10653: PUSH
10654: LD_INT 1
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PPUSH
10661: CALL_OW 69
10665: PPUSH
10666: LD_VAR 0 9
10670: PUSH
10671: LD_INT 1
10673: ARRAY
10674: PPUSH
10675: CALL_OW 74
10679: PPUSH
10680: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10684: LD_ADDR_VAR 0 8
10688: PUSH
10689: LD_VAR 0 8
10693: PPUSH
10694: LD_INT 50
10696: PUSH
10697: EMPTY
10698: LIST
10699: PPUSH
10700: CALL_OW 72
10704: ST_TO_ADDR
// until not units ;
10705: LD_VAR 0 8
10709: NOT
10710: IFFALSE 10486
// end ;
10712: LD_VAR 0 1
10716: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10717: LD_INT 0
10719: PPUSH
10720: PPUSH
10721: PPUSH
10722: PPUSH
10723: PPUSH
10724: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10725: LD_ADDR_VAR 0 6
10729: PUSH
10730: LD_INT 22
10732: PUSH
10733: LD_INT 3
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 120
10742: PUSH
10743: LD_INT 10
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PPUSH
10754: CALL_OW 69
10758: ST_TO_ADDR
// if not units then
10759: LD_VAR 0 6
10763: NOT
10764: IFFALSE 10768
// exit ;
10766: GO 10899
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10768: LD_ADDR_VAR 0 4
10772: PUSH
10773: LD_INT 80
10775: PUSH
10776: LD_INT 60
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 54
10785: PUSH
10786: LD_INT 57
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: LD_INT 55
10795: PUSH
10796: LD_INT 74
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 61
10805: PUSH
10806: LD_INT 85
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10819: LD_INT 35
10821: PPUSH
10822: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10826: LD_ADDR_VAR 0 5
10830: PUSH
10831: LD_VAR 0 6
10835: PPUSH
10836: LD_INT 21
10838: PUSH
10839: LD_INT 2
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PPUSH
10846: CALL_OW 72
10850: ST_TO_ADDR
// if vehicles then
10851: LD_VAR 0 5
10855: IFFALSE 10871
// AgressiveMove ( vehicles , path ) ;
10857: LD_VAR 0 5
10861: PPUSH
10862: LD_VAR 0 4
10866: PPUSH
10867: CALL 73680 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10871: LD_ADDR_VAR 0 6
10875: PUSH
10876: LD_VAR 0 6
10880: PPUSH
10881: LD_INT 50
10883: PUSH
10884: EMPTY
10885: LIST
10886: PPUSH
10887: CALL_OW 72
10891: ST_TO_ADDR
// until not units ;
10892: LD_VAR 0 6
10896: NOT
10897: IFFALSE 10819
// end ; end_of_file
10899: LD_VAR 0 1
10903: RET
// every 0 0$01 do var i , cratesSpawned ;
10904: GO 10906
10906: DISABLE
10907: LD_INT 0
10909: PPUSH
10910: PPUSH
// begin cratesSpawned := 0 ;
10911: LD_ADDR_VAR 0 2
10915: PUSH
10916: LD_INT 0
10918: ST_TO_ADDR
// for i := 1 to 6 do
10919: LD_ADDR_VAR 0 1
10923: PUSH
10924: DOUBLE
10925: LD_INT 1
10927: DEC
10928: ST_TO_ADDR
10929: LD_INT 6
10931: PUSH
10932: FOR_TO
10933: IFFALSE 10958
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10935: LD_INT 2
10937: PPUSH
10938: LD_INT 5
10940: PPUSH
10941: CALL_OW 12
10945: PPUSH
10946: LD_INT 17
10948: PPUSH
10949: LD_INT 0
10951: PPUSH
10952: CALL_OW 55
10956: GO 10932
10958: POP
10959: POP
// wait ( 0 0$20 ) ;
10960: LD_INT 700
10962: PPUSH
10963: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10967: LD_INT 280
10969: PPUSH
10970: CALL_OW 67
// if cratesSpawned < 12 then
10974: LD_VAR 0 2
10978: PUSH
10979: LD_INT 12
10981: LESS
10982: IFFALSE 11034
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10984: LD_INT 105
10986: PPUSH
10987: LD_INT 350
10989: PPUSH
10990: CALL_OW 12
10994: PPUSH
10995: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10999: LD_INT 3
11001: PPUSH
11002: LD_INT 5
11004: PPUSH
11005: CALL_OW 12
11009: PPUSH
11010: LD_INT 13
11012: PPUSH
11013: LD_INT 1
11015: PPUSH
11016: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11020: LD_ADDR_VAR 0 2
11024: PUSH
11025: LD_VAR 0 2
11029: PUSH
11030: LD_INT 1
11032: PLUS
11033: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
11034: LD_VAR 0 2
11038: PUSH
11039: LD_INT 12
11041: GREATEREQUAL
11042: IFFALSE 11054
11044: PUSH
11045: LD_VAR 0 2
11049: PUSH
11050: LD_INT 32
11052: LESS
11053: AND
11054: IFFALSE 11106
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
11056: LD_INT 420
11058: PPUSH
11059: LD_INT 700
11061: PPUSH
11062: CALL_OW 12
11066: PPUSH
11067: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
11071: LD_INT 3
11073: PPUSH
11074: LD_INT 5
11076: PPUSH
11077: CALL_OW 12
11081: PPUSH
11082: LD_INT 13
11084: PPUSH
11085: LD_INT 1
11087: PPUSH
11088: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11092: LD_ADDR_VAR 0 2
11096: PUSH
11097: LD_VAR 0 2
11101: PUSH
11102: LD_INT 1
11104: PLUS
11105: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
11106: LD_VAR 0 2
11110: PUSH
11111: LD_INT 32
11113: GREATEREQUAL
11114: IFFALSE 11188
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
11116: LD_INT 13
11118: PPUSH
11119: CALL_OW 435
11123: PUSH
11124: LD_INT 14
11126: LESS
11127: IFFALSE 11138
// wait ( 0 0$20 ) else
11129: LD_INT 700
11131: PPUSH
11132: CALL_OW 67
11136: GO 11153
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
11138: LD_INT 1750
11140: PPUSH
11141: LD_INT 3150
11143: PPUSH
11144: CALL_OW 12
11148: PPUSH
11149: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
11153: LD_INT 2
11155: PPUSH
11156: LD_INT 5
11158: PPUSH
11159: CALL_OW 12
11163: PPUSH
11164: LD_INT 13
11166: PPUSH
11167: LD_INT 1
11169: PPUSH
11170: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11174: LD_ADDR_VAR 0 2
11178: PUSH
11179: LD_VAR 0 2
11183: PUSH
11184: LD_INT 1
11186: PLUS
11187: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
11188: LD_VAR 0 2
11192: PUSH
11193: LD_INT 120
11195: GREATEREQUAL
11196: IFFALSE 11270
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
11198: LD_INT 13
11200: PPUSH
11201: CALL_OW 435
11205: PUSH
11206: LD_INT 14
11208: LESS
11209: IFFALSE 11220
// wait ( 0 0$40 ) else
11211: LD_INT 1400
11213: PPUSH
11214: CALL_OW 67
11218: GO 11235
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
11220: LD_INT 2450
11222: PPUSH
11223: LD_INT 3850
11225: PPUSH
11226: CALL_OW 12
11230: PPUSH
11231: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11235: LD_INT 1
11237: PPUSH
11238: LD_INT 5
11240: PPUSH
11241: CALL_OW 12
11245: PPUSH
11246: LD_INT 13
11248: PPUSH
11249: LD_INT 1
11251: PPUSH
11252: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11256: LD_ADDR_VAR 0 2
11260: PUSH
11261: LD_VAR 0 2
11265: PUSH
11266: LD_INT 1
11268: PLUS
11269: ST_TO_ADDR
// end ; until false ;
11270: LD_INT 0
11272: IFFALSE 10967
// end ; end_of_file end_of_file
11274: PPOPN 2
11276: END
// export globalGameSaveCounter ; every 0 0$1 do
11277: GO 11279
11279: DISABLE
// begin enable ;
11280: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11281: LD_STRING updateTimer(
11283: PUSH
11284: LD_OWVAR 1
11288: STR
11289: PUSH
11290: LD_STRING );
11292: STR
11293: PPUSH
11294: CALL_OW 559
// end ;
11298: END
// every 0 0$1 do
11299: GO 11301
11301: DISABLE
// begin globalGameSaveCounter := 0 ;
11302: LD_ADDR_EXP 47
11306: PUSH
11307: LD_INT 0
11309: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11310: LD_STRING setGameSaveCounter(0)
11312: PPUSH
11313: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11317: LD_STRING initStreamRollete();
11319: PPUSH
11320: CALL_OW 559
// InitStreamMode ;
11324: CALL 12669 0 0
// DefineStreamItems ( false ) ;
11328: LD_INT 0
11330: PPUSH
11331: CALL 13133 0 1
// end ;
11335: END
// export function SOS_MapStart ( ) ; begin
11336: LD_INT 0
11338: PPUSH
// if streamModeActive then
11339: LD_EXP 48
11343: IFFALSE 11352
// DefineStreamItems ( true ) ;
11345: LD_INT 1
11347: PPUSH
11348: CALL 13133 0 1
// UpdateLuaVariables ( ) ;
11352: CALL 11369 0 0
// UpdateFactoryWaypoints ( ) ;
11356: CALL 26255 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11360: CALL 26507 0 0
// end ;
11364: LD_VAR 0 1
11368: RET
// function UpdateLuaVariables ( ) ; begin
11369: LD_INT 0
11371: PPUSH
// if globalGameSaveCounter then
11372: LD_EXP 47
11376: IFFALSE 11410
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11378: LD_ADDR_EXP 47
11382: PUSH
11383: LD_EXP 47
11387: PPUSH
11388: CALL 72287 0 1
11392: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11393: LD_STRING setGameSaveCounter(
11395: PUSH
11396: LD_EXP 47
11400: STR
11401: PUSH
11402: LD_STRING )
11404: STR
11405: PPUSH
11406: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11410: LD_STRING setGameDifficulty(
11412: PUSH
11413: LD_OWVAR 67
11417: STR
11418: PUSH
11419: LD_STRING )
11421: STR
11422: PPUSH
11423: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11427: LD_STRING displayDifficulty(
11429: PUSH
11430: LD_OWVAR 67
11434: STR
11435: PUSH
11436: LD_STRING )
11438: STR
11439: PPUSH
11440: CALL_OW 559
// end ;
11444: LD_VAR 0 1
11448: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11449: LD_INT 0
11451: PPUSH
// if p2 = stream_mode then
11452: LD_VAR 0 2
11456: PUSH
11457: LD_INT 100
11459: EQUAL
11460: IFFALSE 12463
// begin if not StreamModeActive then
11462: LD_EXP 48
11466: NOT
11467: IFFALSE 11477
// StreamModeActive := true ;
11469: LD_ADDR_EXP 48
11473: PUSH
11474: LD_INT 1
11476: ST_TO_ADDR
// if p3 = 0 then
11477: LD_VAR 0 3
11481: PUSH
11482: LD_INT 0
11484: EQUAL
11485: IFFALSE 11491
// InitStreamMode ;
11487: CALL 12669 0 0
// if p3 = 1 then
11491: LD_VAR 0 3
11495: PUSH
11496: LD_INT 1
11498: EQUAL
11499: IFFALSE 11509
// sRocket := true ;
11501: LD_ADDR_EXP 53
11505: PUSH
11506: LD_INT 1
11508: ST_TO_ADDR
// if p3 = 2 then
11509: LD_VAR 0 3
11513: PUSH
11514: LD_INT 2
11516: EQUAL
11517: IFFALSE 11527
// sSpeed := true ;
11519: LD_ADDR_EXP 52
11523: PUSH
11524: LD_INT 1
11526: ST_TO_ADDR
// if p3 = 3 then
11527: LD_VAR 0 3
11531: PUSH
11532: LD_INT 3
11534: EQUAL
11535: IFFALSE 11545
// sEngine := true ;
11537: LD_ADDR_EXP 54
11541: PUSH
11542: LD_INT 1
11544: ST_TO_ADDR
// if p3 = 4 then
11545: LD_VAR 0 3
11549: PUSH
11550: LD_INT 4
11552: EQUAL
11553: IFFALSE 11563
// sSpec := true ;
11555: LD_ADDR_EXP 51
11559: PUSH
11560: LD_INT 1
11562: ST_TO_ADDR
// if p3 = 5 then
11563: LD_VAR 0 3
11567: PUSH
11568: LD_INT 5
11570: EQUAL
11571: IFFALSE 11581
// sLevel := true ;
11573: LD_ADDR_EXP 55
11577: PUSH
11578: LD_INT 1
11580: ST_TO_ADDR
// if p3 = 6 then
11581: LD_VAR 0 3
11585: PUSH
11586: LD_INT 6
11588: EQUAL
11589: IFFALSE 11599
// sArmoury := true ;
11591: LD_ADDR_EXP 56
11595: PUSH
11596: LD_INT 1
11598: ST_TO_ADDR
// if p3 = 7 then
11599: LD_VAR 0 3
11603: PUSH
11604: LD_INT 7
11606: EQUAL
11607: IFFALSE 11617
// sRadar := true ;
11609: LD_ADDR_EXP 57
11613: PUSH
11614: LD_INT 1
11616: ST_TO_ADDR
// if p3 = 8 then
11617: LD_VAR 0 3
11621: PUSH
11622: LD_INT 8
11624: EQUAL
11625: IFFALSE 11635
// sBunker := true ;
11627: LD_ADDR_EXP 58
11631: PUSH
11632: LD_INT 1
11634: ST_TO_ADDR
// if p3 = 9 then
11635: LD_VAR 0 3
11639: PUSH
11640: LD_INT 9
11642: EQUAL
11643: IFFALSE 11653
// sHack := true ;
11645: LD_ADDR_EXP 59
11649: PUSH
11650: LD_INT 1
11652: ST_TO_ADDR
// if p3 = 10 then
11653: LD_VAR 0 3
11657: PUSH
11658: LD_INT 10
11660: EQUAL
11661: IFFALSE 11671
// sFire := true ;
11663: LD_ADDR_EXP 60
11667: PUSH
11668: LD_INT 1
11670: ST_TO_ADDR
// if p3 = 11 then
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 11
11678: EQUAL
11679: IFFALSE 11689
// sRefresh := true ;
11681: LD_ADDR_EXP 61
11685: PUSH
11686: LD_INT 1
11688: ST_TO_ADDR
// if p3 = 12 then
11689: LD_VAR 0 3
11693: PUSH
11694: LD_INT 12
11696: EQUAL
11697: IFFALSE 11707
// sExp := true ;
11699: LD_ADDR_EXP 62
11703: PUSH
11704: LD_INT 1
11706: ST_TO_ADDR
// if p3 = 13 then
11707: LD_VAR 0 3
11711: PUSH
11712: LD_INT 13
11714: EQUAL
11715: IFFALSE 11725
// sDepot := true ;
11717: LD_ADDR_EXP 63
11721: PUSH
11722: LD_INT 1
11724: ST_TO_ADDR
// if p3 = 14 then
11725: LD_VAR 0 3
11729: PUSH
11730: LD_INT 14
11732: EQUAL
11733: IFFALSE 11743
// sFlag := true ;
11735: LD_ADDR_EXP 64
11739: PUSH
11740: LD_INT 1
11742: ST_TO_ADDR
// if p3 = 15 then
11743: LD_VAR 0 3
11747: PUSH
11748: LD_INT 15
11750: EQUAL
11751: IFFALSE 11761
// sKamikadze := true ;
11753: LD_ADDR_EXP 72
11757: PUSH
11758: LD_INT 1
11760: ST_TO_ADDR
// if p3 = 16 then
11761: LD_VAR 0 3
11765: PUSH
11766: LD_INT 16
11768: EQUAL
11769: IFFALSE 11779
// sTroll := true ;
11771: LD_ADDR_EXP 73
11775: PUSH
11776: LD_INT 1
11778: ST_TO_ADDR
// if p3 = 17 then
11779: LD_VAR 0 3
11783: PUSH
11784: LD_INT 17
11786: EQUAL
11787: IFFALSE 11797
// sSlow := true ;
11789: LD_ADDR_EXP 74
11793: PUSH
11794: LD_INT 1
11796: ST_TO_ADDR
// if p3 = 18 then
11797: LD_VAR 0 3
11801: PUSH
11802: LD_INT 18
11804: EQUAL
11805: IFFALSE 11815
// sLack := true ;
11807: LD_ADDR_EXP 75
11811: PUSH
11812: LD_INT 1
11814: ST_TO_ADDR
// if p3 = 19 then
11815: LD_VAR 0 3
11819: PUSH
11820: LD_INT 19
11822: EQUAL
11823: IFFALSE 11833
// sTank := true ;
11825: LD_ADDR_EXP 77
11829: PUSH
11830: LD_INT 1
11832: ST_TO_ADDR
// if p3 = 20 then
11833: LD_VAR 0 3
11837: PUSH
11838: LD_INT 20
11840: EQUAL
11841: IFFALSE 11851
// sRemote := true ;
11843: LD_ADDR_EXP 78
11847: PUSH
11848: LD_INT 1
11850: ST_TO_ADDR
// if p3 = 21 then
11851: LD_VAR 0 3
11855: PUSH
11856: LD_INT 21
11858: EQUAL
11859: IFFALSE 11869
// sPowell := true ;
11861: LD_ADDR_EXP 79
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// if p3 = 22 then
11869: LD_VAR 0 3
11873: PUSH
11874: LD_INT 22
11876: EQUAL
11877: IFFALSE 11887
// sTeleport := true ;
11879: LD_ADDR_EXP 82
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// if p3 = 23 then
11887: LD_VAR 0 3
11891: PUSH
11892: LD_INT 23
11894: EQUAL
11895: IFFALSE 11905
// sOilTower := true ;
11897: LD_ADDR_EXP 84
11901: PUSH
11902: LD_INT 1
11904: ST_TO_ADDR
// if p3 = 24 then
11905: LD_VAR 0 3
11909: PUSH
11910: LD_INT 24
11912: EQUAL
11913: IFFALSE 11923
// sShovel := true ;
11915: LD_ADDR_EXP 85
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// if p3 = 25 then
11923: LD_VAR 0 3
11927: PUSH
11928: LD_INT 25
11930: EQUAL
11931: IFFALSE 11941
// sSheik := true ;
11933: LD_ADDR_EXP 86
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// if p3 = 26 then
11941: LD_VAR 0 3
11945: PUSH
11946: LD_INT 26
11948: EQUAL
11949: IFFALSE 11959
// sEarthquake := true ;
11951: LD_ADDR_EXP 88
11955: PUSH
11956: LD_INT 1
11958: ST_TO_ADDR
// if p3 = 27 then
11959: LD_VAR 0 3
11963: PUSH
11964: LD_INT 27
11966: EQUAL
11967: IFFALSE 11977
// sAI := true ;
11969: LD_ADDR_EXP 89
11973: PUSH
11974: LD_INT 1
11976: ST_TO_ADDR
// if p3 = 28 then
11977: LD_VAR 0 3
11981: PUSH
11982: LD_INT 28
11984: EQUAL
11985: IFFALSE 11995
// sCargo := true ;
11987: LD_ADDR_EXP 92
11991: PUSH
11992: LD_INT 1
11994: ST_TO_ADDR
// if p3 = 29 then
11995: LD_VAR 0 3
11999: PUSH
12000: LD_INT 29
12002: EQUAL
12003: IFFALSE 12013
// sDLaser := true ;
12005: LD_ADDR_EXP 93
12009: PUSH
12010: LD_INT 1
12012: ST_TO_ADDR
// if p3 = 30 then
12013: LD_VAR 0 3
12017: PUSH
12018: LD_INT 30
12020: EQUAL
12021: IFFALSE 12031
// sExchange := true ;
12023: LD_ADDR_EXP 94
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// if p3 = 31 then
12031: LD_VAR 0 3
12035: PUSH
12036: LD_INT 31
12038: EQUAL
12039: IFFALSE 12049
// sFac := true ;
12041: LD_ADDR_EXP 95
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// if p3 = 32 then
12049: LD_VAR 0 3
12053: PUSH
12054: LD_INT 32
12056: EQUAL
12057: IFFALSE 12067
// sPower := true ;
12059: LD_ADDR_EXP 96
12063: PUSH
12064: LD_INT 1
12066: ST_TO_ADDR
// if p3 = 33 then
12067: LD_VAR 0 3
12071: PUSH
12072: LD_INT 33
12074: EQUAL
12075: IFFALSE 12085
// sRandom := true ;
12077: LD_ADDR_EXP 97
12081: PUSH
12082: LD_INT 1
12084: ST_TO_ADDR
// if p3 = 34 then
12085: LD_VAR 0 3
12089: PUSH
12090: LD_INT 34
12092: EQUAL
12093: IFFALSE 12103
// sShield := true ;
12095: LD_ADDR_EXP 98
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// if p3 = 35 then
12103: LD_VAR 0 3
12107: PUSH
12108: LD_INT 35
12110: EQUAL
12111: IFFALSE 12121
// sTime := true ;
12113: LD_ADDR_EXP 99
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// if p3 = 36 then
12121: LD_VAR 0 3
12125: PUSH
12126: LD_INT 36
12128: EQUAL
12129: IFFALSE 12139
// sTools := true ;
12131: LD_ADDR_EXP 100
12135: PUSH
12136: LD_INT 1
12138: ST_TO_ADDR
// if p3 = 101 then
12139: LD_VAR 0 3
12143: PUSH
12144: LD_INT 101
12146: EQUAL
12147: IFFALSE 12157
// sSold := true ;
12149: LD_ADDR_EXP 65
12153: PUSH
12154: LD_INT 1
12156: ST_TO_ADDR
// if p3 = 102 then
12157: LD_VAR 0 3
12161: PUSH
12162: LD_INT 102
12164: EQUAL
12165: IFFALSE 12175
// sDiff := true ;
12167: LD_ADDR_EXP 66
12171: PUSH
12172: LD_INT 1
12174: ST_TO_ADDR
// if p3 = 103 then
12175: LD_VAR 0 3
12179: PUSH
12180: LD_INT 103
12182: EQUAL
12183: IFFALSE 12193
// sFog := true ;
12185: LD_ADDR_EXP 69
12189: PUSH
12190: LD_INT 1
12192: ST_TO_ADDR
// if p3 = 104 then
12193: LD_VAR 0 3
12197: PUSH
12198: LD_INT 104
12200: EQUAL
12201: IFFALSE 12211
// sReset := true ;
12203: LD_ADDR_EXP 70
12207: PUSH
12208: LD_INT 1
12210: ST_TO_ADDR
// if p3 = 105 then
12211: LD_VAR 0 3
12215: PUSH
12216: LD_INT 105
12218: EQUAL
12219: IFFALSE 12229
// sSun := true ;
12221: LD_ADDR_EXP 71
12225: PUSH
12226: LD_INT 1
12228: ST_TO_ADDR
// if p3 = 106 then
12229: LD_VAR 0 3
12233: PUSH
12234: LD_INT 106
12236: EQUAL
12237: IFFALSE 12247
// sTiger := true ;
12239: LD_ADDR_EXP 67
12243: PUSH
12244: LD_INT 1
12246: ST_TO_ADDR
// if p3 = 107 then
12247: LD_VAR 0 3
12251: PUSH
12252: LD_INT 107
12254: EQUAL
12255: IFFALSE 12265
// sBomb := true ;
12257: LD_ADDR_EXP 68
12261: PUSH
12262: LD_INT 1
12264: ST_TO_ADDR
// if p3 = 108 then
12265: LD_VAR 0 3
12269: PUSH
12270: LD_INT 108
12272: EQUAL
12273: IFFALSE 12283
// sWound := true ;
12275: LD_ADDR_EXP 76
12279: PUSH
12280: LD_INT 1
12282: ST_TO_ADDR
// if p3 = 109 then
12283: LD_VAR 0 3
12287: PUSH
12288: LD_INT 109
12290: EQUAL
12291: IFFALSE 12301
// sBetray := true ;
12293: LD_ADDR_EXP 80
12297: PUSH
12298: LD_INT 1
12300: ST_TO_ADDR
// if p3 = 110 then
12301: LD_VAR 0 3
12305: PUSH
12306: LD_INT 110
12308: EQUAL
12309: IFFALSE 12319
// sContamin := true ;
12311: LD_ADDR_EXP 81
12315: PUSH
12316: LD_INT 1
12318: ST_TO_ADDR
// if p3 = 111 then
12319: LD_VAR 0 3
12323: PUSH
12324: LD_INT 111
12326: EQUAL
12327: IFFALSE 12337
// sOil := true ;
12329: LD_ADDR_EXP 83
12333: PUSH
12334: LD_INT 1
12336: ST_TO_ADDR
// if p3 = 112 then
12337: LD_VAR 0 3
12341: PUSH
12342: LD_INT 112
12344: EQUAL
12345: IFFALSE 12355
// sStu := true ;
12347: LD_ADDR_EXP 87
12351: PUSH
12352: LD_INT 1
12354: ST_TO_ADDR
// if p3 = 113 then
12355: LD_VAR 0 3
12359: PUSH
12360: LD_INT 113
12362: EQUAL
12363: IFFALSE 12373
// sBazooka := true ;
12365: LD_ADDR_EXP 90
12369: PUSH
12370: LD_INT 1
12372: ST_TO_ADDR
// if p3 = 114 then
12373: LD_VAR 0 3
12377: PUSH
12378: LD_INT 114
12380: EQUAL
12381: IFFALSE 12391
// sMortar := true ;
12383: LD_ADDR_EXP 91
12387: PUSH
12388: LD_INT 1
12390: ST_TO_ADDR
// if p3 = 115 then
12391: LD_VAR 0 3
12395: PUSH
12396: LD_INT 115
12398: EQUAL
12399: IFFALSE 12409
// sRanger := true ;
12401: LD_ADDR_EXP 101
12405: PUSH
12406: LD_INT 1
12408: ST_TO_ADDR
// if p3 = 116 then
12409: LD_VAR 0 3
12413: PUSH
12414: LD_INT 116
12416: EQUAL
12417: IFFALSE 12427
// sComputer := true ;
12419: LD_ADDR_EXP 102
12423: PUSH
12424: LD_INT 1
12426: ST_TO_ADDR
// if p3 = 117 then
12427: LD_VAR 0 3
12431: PUSH
12432: LD_INT 117
12434: EQUAL
12435: IFFALSE 12445
// s30 := true ;
12437: LD_ADDR_EXP 103
12441: PUSH
12442: LD_INT 1
12444: ST_TO_ADDR
// if p3 = 118 then
12445: LD_VAR 0 3
12449: PUSH
12450: LD_INT 118
12452: EQUAL
12453: IFFALSE 12463
// s60 := true ;
12455: LD_ADDR_EXP 104
12459: PUSH
12460: LD_INT 1
12462: ST_TO_ADDR
// end ; if p2 = hack_mode then
12463: LD_VAR 0 2
12467: PUSH
12468: LD_INT 101
12470: EQUAL
12471: IFFALSE 12599
// begin case p3 of 1 :
12473: LD_VAR 0 3
12477: PUSH
12478: LD_INT 1
12480: DOUBLE
12481: EQUAL
12482: IFTRUE 12486
12484: GO 12493
12486: POP
// hHackUnlimitedResources ; 2 :
12487: CALL 24862 0 0
12491: GO 12599
12493: LD_INT 2
12495: DOUBLE
12496: EQUAL
12497: IFTRUE 12501
12499: GO 12508
12501: POP
// hHackSetLevel10 ; 3 :
12502: CALL 24995 0 0
12506: GO 12599
12508: LD_INT 3
12510: DOUBLE
12511: EQUAL
12512: IFTRUE 12516
12514: GO 12523
12516: POP
// hHackSetLevel10YourUnits ; 4 :
12517: CALL 25080 0 0
12521: GO 12599
12523: LD_INT 4
12525: DOUBLE
12526: EQUAL
12527: IFTRUE 12531
12529: GO 12538
12531: POP
// hHackInvincible ; 5 :
12532: CALL 25528 0 0
12536: GO 12599
12538: LD_INT 5
12540: DOUBLE
12541: EQUAL
12542: IFTRUE 12546
12544: GO 12553
12546: POP
// hHackInvisible ; 6 :
12547: CALL 25639 0 0
12551: GO 12599
12553: LD_INT 6
12555: DOUBLE
12556: EQUAL
12557: IFTRUE 12561
12559: GO 12568
12561: POP
// hHackChangeYourSide ; 7 :
12562: CALL 25696 0 0
12566: GO 12599
12568: LD_INT 7
12570: DOUBLE
12571: EQUAL
12572: IFTRUE 12576
12574: GO 12583
12576: POP
// hHackChangeUnitSide ; 8 :
12577: CALL 25738 0 0
12581: GO 12599
12583: LD_INT 8
12585: DOUBLE
12586: EQUAL
12587: IFTRUE 12591
12589: GO 12598
12591: POP
// hHackFog ; end ;
12592: CALL 25839 0 0
12596: GO 12599
12598: POP
// end ; if p2 = game_save_mode then
12599: LD_VAR 0 2
12603: PUSH
12604: LD_INT 102
12606: EQUAL
12607: IFFALSE 12664
// begin if p3 = 1 then
12609: LD_VAR 0 3
12613: PUSH
12614: LD_INT 1
12616: EQUAL
12617: IFFALSE 12629
// globalGameSaveCounter := p4 ;
12619: LD_ADDR_EXP 47
12623: PUSH
12624: LD_VAR 0 4
12628: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12629: LD_VAR 0 3
12633: PUSH
12634: LD_INT 2
12636: EQUAL
12637: IFFALSE 12645
12639: PUSH
12640: LD_EXP 47
12644: AND
12645: IFFALSE 12664
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12647: LD_STRING setGameSaveCounter(
12649: PUSH
12650: LD_EXP 47
12654: STR
12655: PUSH
12656: LD_STRING )
12658: STR
12659: PPUSH
12660: CALL_OW 559
// end ; end ;
12664: LD_VAR 0 7
12668: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12669: LD_INT 0
12671: PPUSH
// streamModeActive := false ;
12672: LD_ADDR_EXP 48
12676: PUSH
12677: LD_INT 0
12679: ST_TO_ADDR
// normalCounter := 36 ;
12680: LD_ADDR_EXP 49
12684: PUSH
12685: LD_INT 36
12687: ST_TO_ADDR
// hardcoreCounter := 18 ;
12688: LD_ADDR_EXP 50
12692: PUSH
12693: LD_INT 18
12695: ST_TO_ADDR
// sRocket := false ;
12696: LD_ADDR_EXP 53
12700: PUSH
12701: LD_INT 0
12703: ST_TO_ADDR
// sSpeed := false ;
12704: LD_ADDR_EXP 52
12708: PUSH
12709: LD_INT 0
12711: ST_TO_ADDR
// sEngine := false ;
12712: LD_ADDR_EXP 54
12716: PUSH
12717: LD_INT 0
12719: ST_TO_ADDR
// sSpec := false ;
12720: LD_ADDR_EXP 51
12724: PUSH
12725: LD_INT 0
12727: ST_TO_ADDR
// sLevel := false ;
12728: LD_ADDR_EXP 55
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// sArmoury := false ;
12736: LD_ADDR_EXP 56
12740: PUSH
12741: LD_INT 0
12743: ST_TO_ADDR
// sRadar := false ;
12744: LD_ADDR_EXP 57
12748: PUSH
12749: LD_INT 0
12751: ST_TO_ADDR
// sBunker := false ;
12752: LD_ADDR_EXP 58
12756: PUSH
12757: LD_INT 0
12759: ST_TO_ADDR
// sHack := false ;
12760: LD_ADDR_EXP 59
12764: PUSH
12765: LD_INT 0
12767: ST_TO_ADDR
// sFire := false ;
12768: LD_ADDR_EXP 60
12772: PUSH
12773: LD_INT 0
12775: ST_TO_ADDR
// sRefresh := false ;
12776: LD_ADDR_EXP 61
12780: PUSH
12781: LD_INT 0
12783: ST_TO_ADDR
// sExp := false ;
12784: LD_ADDR_EXP 62
12788: PUSH
12789: LD_INT 0
12791: ST_TO_ADDR
// sDepot := false ;
12792: LD_ADDR_EXP 63
12796: PUSH
12797: LD_INT 0
12799: ST_TO_ADDR
// sFlag := false ;
12800: LD_ADDR_EXP 64
12804: PUSH
12805: LD_INT 0
12807: ST_TO_ADDR
// sKamikadze := false ;
12808: LD_ADDR_EXP 72
12812: PUSH
12813: LD_INT 0
12815: ST_TO_ADDR
// sTroll := false ;
12816: LD_ADDR_EXP 73
12820: PUSH
12821: LD_INT 0
12823: ST_TO_ADDR
// sSlow := false ;
12824: LD_ADDR_EXP 74
12828: PUSH
12829: LD_INT 0
12831: ST_TO_ADDR
// sLack := false ;
12832: LD_ADDR_EXP 75
12836: PUSH
12837: LD_INT 0
12839: ST_TO_ADDR
// sTank := false ;
12840: LD_ADDR_EXP 77
12844: PUSH
12845: LD_INT 0
12847: ST_TO_ADDR
// sRemote := false ;
12848: LD_ADDR_EXP 78
12852: PUSH
12853: LD_INT 0
12855: ST_TO_ADDR
// sPowell := false ;
12856: LD_ADDR_EXP 79
12860: PUSH
12861: LD_INT 0
12863: ST_TO_ADDR
// sTeleport := false ;
12864: LD_ADDR_EXP 82
12868: PUSH
12869: LD_INT 0
12871: ST_TO_ADDR
// sOilTower := false ;
12872: LD_ADDR_EXP 84
12876: PUSH
12877: LD_INT 0
12879: ST_TO_ADDR
// sShovel := false ;
12880: LD_ADDR_EXP 85
12884: PUSH
12885: LD_INT 0
12887: ST_TO_ADDR
// sSheik := false ;
12888: LD_ADDR_EXP 86
12892: PUSH
12893: LD_INT 0
12895: ST_TO_ADDR
// sEarthquake := false ;
12896: LD_ADDR_EXP 88
12900: PUSH
12901: LD_INT 0
12903: ST_TO_ADDR
// sAI := false ;
12904: LD_ADDR_EXP 89
12908: PUSH
12909: LD_INT 0
12911: ST_TO_ADDR
// sCargo := false ;
12912: LD_ADDR_EXP 92
12916: PUSH
12917: LD_INT 0
12919: ST_TO_ADDR
// sDLaser := false ;
12920: LD_ADDR_EXP 93
12924: PUSH
12925: LD_INT 0
12927: ST_TO_ADDR
// sExchange := false ;
12928: LD_ADDR_EXP 94
12932: PUSH
12933: LD_INT 0
12935: ST_TO_ADDR
// sFac := false ;
12936: LD_ADDR_EXP 95
12940: PUSH
12941: LD_INT 0
12943: ST_TO_ADDR
// sPower := false ;
12944: LD_ADDR_EXP 96
12948: PUSH
12949: LD_INT 0
12951: ST_TO_ADDR
// sRandom := false ;
12952: LD_ADDR_EXP 97
12956: PUSH
12957: LD_INT 0
12959: ST_TO_ADDR
// sShield := false ;
12960: LD_ADDR_EXP 98
12964: PUSH
12965: LD_INT 0
12967: ST_TO_ADDR
// sTime := false ;
12968: LD_ADDR_EXP 99
12972: PUSH
12973: LD_INT 0
12975: ST_TO_ADDR
// sTools := false ;
12976: LD_ADDR_EXP 100
12980: PUSH
12981: LD_INT 0
12983: ST_TO_ADDR
// sSold := false ;
12984: LD_ADDR_EXP 65
12988: PUSH
12989: LD_INT 0
12991: ST_TO_ADDR
// sDiff := false ;
12992: LD_ADDR_EXP 66
12996: PUSH
12997: LD_INT 0
12999: ST_TO_ADDR
// sFog := false ;
13000: LD_ADDR_EXP 69
13004: PUSH
13005: LD_INT 0
13007: ST_TO_ADDR
// sReset := false ;
13008: LD_ADDR_EXP 70
13012: PUSH
13013: LD_INT 0
13015: ST_TO_ADDR
// sSun := false ;
13016: LD_ADDR_EXP 71
13020: PUSH
13021: LD_INT 0
13023: ST_TO_ADDR
// sTiger := false ;
13024: LD_ADDR_EXP 67
13028: PUSH
13029: LD_INT 0
13031: ST_TO_ADDR
// sBomb := false ;
13032: LD_ADDR_EXP 68
13036: PUSH
13037: LD_INT 0
13039: ST_TO_ADDR
// sWound := false ;
13040: LD_ADDR_EXP 76
13044: PUSH
13045: LD_INT 0
13047: ST_TO_ADDR
// sBetray := false ;
13048: LD_ADDR_EXP 80
13052: PUSH
13053: LD_INT 0
13055: ST_TO_ADDR
// sContamin := false ;
13056: LD_ADDR_EXP 81
13060: PUSH
13061: LD_INT 0
13063: ST_TO_ADDR
// sOil := false ;
13064: LD_ADDR_EXP 83
13068: PUSH
13069: LD_INT 0
13071: ST_TO_ADDR
// sStu := false ;
13072: LD_ADDR_EXP 87
13076: PUSH
13077: LD_INT 0
13079: ST_TO_ADDR
// sBazooka := false ;
13080: LD_ADDR_EXP 90
13084: PUSH
13085: LD_INT 0
13087: ST_TO_ADDR
// sMortar := false ;
13088: LD_ADDR_EXP 91
13092: PUSH
13093: LD_INT 0
13095: ST_TO_ADDR
// sRanger := false ;
13096: LD_ADDR_EXP 101
13100: PUSH
13101: LD_INT 0
13103: ST_TO_ADDR
// sComputer := false ;
13104: LD_ADDR_EXP 102
13108: PUSH
13109: LD_INT 0
13111: ST_TO_ADDR
// s30 := false ;
13112: LD_ADDR_EXP 103
13116: PUSH
13117: LD_INT 0
13119: ST_TO_ADDR
// s60 := false ;
13120: LD_ADDR_EXP 104
13124: PUSH
13125: LD_INT 0
13127: ST_TO_ADDR
// end ;
13128: LD_VAR 0 1
13132: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13133: LD_INT 0
13135: PPUSH
13136: PPUSH
13137: PPUSH
13138: PPUSH
13139: PPUSH
13140: PPUSH
13141: PPUSH
// result := [ ] ;
13142: LD_ADDR_VAR 0 2
13146: PUSH
13147: EMPTY
13148: ST_TO_ADDR
// if campaign_id = 1 then
13149: LD_OWVAR 69
13153: PUSH
13154: LD_INT 1
13156: EQUAL
13157: IFFALSE 16323
// begin case mission_number of 1 :
13159: LD_OWVAR 70
13163: PUSH
13164: LD_INT 1
13166: DOUBLE
13167: EQUAL
13168: IFTRUE 13172
13170: GO 13248
13172: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13173: LD_ADDR_VAR 0 2
13177: PUSH
13178: LD_INT 2
13180: PUSH
13181: LD_INT 4
13183: PUSH
13184: LD_INT 11
13186: PUSH
13187: LD_INT 12
13189: PUSH
13190: LD_INT 15
13192: PUSH
13193: LD_INT 16
13195: PUSH
13196: LD_INT 22
13198: PUSH
13199: LD_INT 23
13201: PUSH
13202: LD_INT 26
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 101
13218: PUSH
13219: LD_INT 102
13221: PUSH
13222: LD_INT 106
13224: PUSH
13225: LD_INT 116
13227: PUSH
13228: LD_INT 117
13230: PUSH
13231: LD_INT 118
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: ST_TO_ADDR
13246: GO 16321
13248: LD_INT 2
13250: DOUBLE
13251: EQUAL
13252: IFTRUE 13256
13254: GO 13340
13256: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13257: LD_ADDR_VAR 0 2
13261: PUSH
13262: LD_INT 2
13264: PUSH
13265: LD_INT 4
13267: PUSH
13268: LD_INT 11
13270: PUSH
13271: LD_INT 12
13273: PUSH
13274: LD_INT 15
13276: PUSH
13277: LD_INT 16
13279: PUSH
13280: LD_INT 22
13282: PUSH
13283: LD_INT 23
13285: PUSH
13286: LD_INT 26
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 101
13302: PUSH
13303: LD_INT 102
13305: PUSH
13306: LD_INT 105
13308: PUSH
13309: LD_INT 106
13311: PUSH
13312: LD_INT 108
13314: PUSH
13315: LD_INT 116
13317: PUSH
13318: LD_INT 117
13320: PUSH
13321: LD_INT 118
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: ST_TO_ADDR
13338: GO 16321
13340: LD_INT 3
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13436
13348: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13349: LD_ADDR_VAR 0 2
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: LD_INT 4
13359: PUSH
13360: LD_INT 5
13362: PUSH
13363: LD_INT 11
13365: PUSH
13366: LD_INT 12
13368: PUSH
13369: LD_INT 15
13371: PUSH
13372: LD_INT 16
13374: PUSH
13375: LD_INT 22
13377: PUSH
13378: LD_INT 26
13380: PUSH
13381: LD_INT 36
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 101
13398: PUSH
13399: LD_INT 102
13401: PUSH
13402: LD_INT 105
13404: PUSH
13405: LD_INT 106
13407: PUSH
13408: LD_INT 108
13410: PUSH
13411: LD_INT 116
13413: PUSH
13414: LD_INT 117
13416: PUSH
13417: LD_INT 118
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: ST_TO_ADDR
13434: GO 16321
13436: LD_INT 4
13438: DOUBLE
13439: EQUAL
13440: IFTRUE 13444
13442: GO 13540
13444: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13445: LD_ADDR_VAR 0 2
13449: PUSH
13450: LD_INT 2
13452: PUSH
13453: LD_INT 4
13455: PUSH
13456: LD_INT 5
13458: PUSH
13459: LD_INT 8
13461: PUSH
13462: LD_INT 11
13464: PUSH
13465: LD_INT 12
13467: PUSH
13468: LD_INT 15
13470: PUSH
13471: LD_INT 16
13473: PUSH
13474: LD_INT 22
13476: PUSH
13477: LD_INT 23
13479: PUSH
13480: LD_INT 26
13482: PUSH
13483: LD_INT 36
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 101
13502: PUSH
13503: LD_INT 102
13505: PUSH
13506: LD_INT 105
13508: PUSH
13509: LD_INT 106
13511: PUSH
13512: LD_INT 108
13514: PUSH
13515: LD_INT 116
13517: PUSH
13518: LD_INT 117
13520: PUSH
13521: LD_INT 118
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: ST_TO_ADDR
13538: GO 16321
13540: LD_INT 5
13542: DOUBLE
13543: EQUAL
13544: IFTRUE 13548
13546: GO 13660
13548: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13549: LD_ADDR_VAR 0 2
13553: PUSH
13554: LD_INT 2
13556: PUSH
13557: LD_INT 4
13559: PUSH
13560: LD_INT 5
13562: PUSH
13563: LD_INT 6
13565: PUSH
13566: LD_INT 8
13568: PUSH
13569: LD_INT 11
13571: PUSH
13572: LD_INT 12
13574: PUSH
13575: LD_INT 15
13577: PUSH
13578: LD_INT 16
13580: PUSH
13581: LD_INT 22
13583: PUSH
13584: LD_INT 23
13586: PUSH
13587: LD_INT 25
13589: PUSH
13590: LD_INT 26
13592: PUSH
13593: LD_INT 36
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 101
13614: PUSH
13615: LD_INT 102
13617: PUSH
13618: LD_INT 105
13620: PUSH
13621: LD_INT 106
13623: PUSH
13624: LD_INT 108
13626: PUSH
13627: LD_INT 109
13629: PUSH
13630: LD_INT 112
13632: PUSH
13633: LD_INT 116
13635: PUSH
13636: LD_INT 117
13638: PUSH
13639: LD_INT 118
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: ST_TO_ADDR
13658: GO 16321
13660: LD_INT 6
13662: DOUBLE
13663: EQUAL
13664: IFTRUE 13668
13666: GO 13800
13668: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13669: LD_ADDR_VAR 0 2
13673: PUSH
13674: LD_INT 2
13676: PUSH
13677: LD_INT 4
13679: PUSH
13680: LD_INT 5
13682: PUSH
13683: LD_INT 6
13685: PUSH
13686: LD_INT 8
13688: PUSH
13689: LD_INT 11
13691: PUSH
13692: LD_INT 12
13694: PUSH
13695: LD_INT 15
13697: PUSH
13698: LD_INT 16
13700: PUSH
13701: LD_INT 20
13703: PUSH
13704: LD_INT 21
13706: PUSH
13707: LD_INT 22
13709: PUSH
13710: LD_INT 23
13712: PUSH
13713: LD_INT 25
13715: PUSH
13716: LD_INT 26
13718: PUSH
13719: LD_INT 30
13721: PUSH
13722: LD_INT 31
13724: PUSH
13725: LD_INT 32
13727: PUSH
13728: LD_INT 36
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 101
13754: PUSH
13755: LD_INT 102
13757: PUSH
13758: LD_INT 105
13760: PUSH
13761: LD_INT 106
13763: PUSH
13764: LD_INT 108
13766: PUSH
13767: LD_INT 109
13769: PUSH
13770: LD_INT 112
13772: PUSH
13773: LD_INT 116
13775: PUSH
13776: LD_INT 117
13778: PUSH
13779: LD_INT 118
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: ST_TO_ADDR
13798: GO 16321
13800: LD_INT 7
13802: DOUBLE
13803: EQUAL
13804: IFTRUE 13808
13806: GO 13920
13808: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13809: LD_ADDR_VAR 0 2
13813: PUSH
13814: LD_INT 2
13816: PUSH
13817: LD_INT 4
13819: PUSH
13820: LD_INT 5
13822: PUSH
13823: LD_INT 7
13825: PUSH
13826: LD_INT 11
13828: PUSH
13829: LD_INT 12
13831: PUSH
13832: LD_INT 15
13834: PUSH
13835: LD_INT 16
13837: PUSH
13838: LD_INT 20
13840: PUSH
13841: LD_INT 21
13843: PUSH
13844: LD_INT 22
13846: PUSH
13847: LD_INT 23
13849: PUSH
13850: LD_INT 25
13852: PUSH
13853: LD_INT 26
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: PUSH
13872: LD_INT 101
13874: PUSH
13875: LD_INT 102
13877: PUSH
13878: LD_INT 103
13880: PUSH
13881: LD_INT 105
13883: PUSH
13884: LD_INT 106
13886: PUSH
13887: LD_INT 108
13889: PUSH
13890: LD_INT 112
13892: PUSH
13893: LD_INT 116
13895: PUSH
13896: LD_INT 117
13898: PUSH
13899: LD_INT 118
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: ST_TO_ADDR
13918: GO 16321
13920: LD_INT 8
13922: DOUBLE
13923: EQUAL
13924: IFTRUE 13928
13926: GO 14068
13928: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13929: LD_ADDR_VAR 0 2
13933: PUSH
13934: LD_INT 2
13936: PUSH
13937: LD_INT 4
13939: PUSH
13940: LD_INT 5
13942: PUSH
13943: LD_INT 6
13945: PUSH
13946: LD_INT 7
13948: PUSH
13949: LD_INT 8
13951: PUSH
13952: LD_INT 11
13954: PUSH
13955: LD_INT 12
13957: PUSH
13958: LD_INT 15
13960: PUSH
13961: LD_INT 16
13963: PUSH
13964: LD_INT 20
13966: PUSH
13967: LD_INT 21
13969: PUSH
13970: LD_INT 22
13972: PUSH
13973: LD_INT 23
13975: PUSH
13976: LD_INT 25
13978: PUSH
13979: LD_INT 26
13981: PUSH
13982: LD_INT 30
13984: PUSH
13985: LD_INT 31
13987: PUSH
13988: LD_INT 32
13990: PUSH
13991: LD_INT 36
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 101
14018: PUSH
14019: LD_INT 102
14021: PUSH
14022: LD_INT 103
14024: PUSH
14025: LD_INT 105
14027: PUSH
14028: LD_INT 106
14030: PUSH
14031: LD_INT 108
14033: PUSH
14034: LD_INT 109
14036: PUSH
14037: LD_INT 112
14039: PUSH
14040: LD_INT 116
14042: PUSH
14043: LD_INT 117
14045: PUSH
14046: LD_INT 118
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: ST_TO_ADDR
14066: GO 16321
14068: LD_INT 9
14070: DOUBLE
14071: EQUAL
14072: IFTRUE 14076
14074: GO 14224
14076: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14077: LD_ADDR_VAR 0 2
14081: PUSH
14082: LD_INT 2
14084: PUSH
14085: LD_INT 4
14087: PUSH
14088: LD_INT 5
14090: PUSH
14091: LD_INT 6
14093: PUSH
14094: LD_INT 7
14096: PUSH
14097: LD_INT 8
14099: PUSH
14100: LD_INT 11
14102: PUSH
14103: LD_INT 12
14105: PUSH
14106: LD_INT 15
14108: PUSH
14109: LD_INT 16
14111: PUSH
14112: LD_INT 20
14114: PUSH
14115: LD_INT 21
14117: PUSH
14118: LD_INT 22
14120: PUSH
14121: LD_INT 23
14123: PUSH
14124: LD_INT 25
14126: PUSH
14127: LD_INT 26
14129: PUSH
14130: LD_INT 28
14132: PUSH
14133: LD_INT 30
14135: PUSH
14136: LD_INT 31
14138: PUSH
14139: LD_INT 32
14141: PUSH
14142: LD_INT 36
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 101
14170: PUSH
14171: LD_INT 102
14173: PUSH
14174: LD_INT 103
14176: PUSH
14177: LD_INT 105
14179: PUSH
14180: LD_INT 106
14182: PUSH
14183: LD_INT 108
14185: PUSH
14186: LD_INT 109
14188: PUSH
14189: LD_INT 112
14191: PUSH
14192: LD_INT 114
14194: PUSH
14195: LD_INT 116
14197: PUSH
14198: LD_INT 117
14200: PUSH
14201: LD_INT 118
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: ST_TO_ADDR
14222: GO 16321
14224: LD_INT 10
14226: DOUBLE
14227: EQUAL
14228: IFTRUE 14232
14230: GO 14428
14232: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14233: LD_ADDR_VAR 0 2
14237: PUSH
14238: LD_INT 2
14240: PUSH
14241: LD_INT 4
14243: PUSH
14244: LD_INT 5
14246: PUSH
14247: LD_INT 6
14249: PUSH
14250: LD_INT 7
14252: PUSH
14253: LD_INT 8
14255: PUSH
14256: LD_INT 9
14258: PUSH
14259: LD_INT 10
14261: PUSH
14262: LD_INT 11
14264: PUSH
14265: LD_INT 12
14267: PUSH
14268: LD_INT 13
14270: PUSH
14271: LD_INT 14
14273: PUSH
14274: LD_INT 15
14276: PUSH
14277: LD_INT 16
14279: PUSH
14280: LD_INT 17
14282: PUSH
14283: LD_INT 18
14285: PUSH
14286: LD_INT 19
14288: PUSH
14289: LD_INT 20
14291: PUSH
14292: LD_INT 21
14294: PUSH
14295: LD_INT 22
14297: PUSH
14298: LD_INT 23
14300: PUSH
14301: LD_INT 24
14303: PUSH
14304: LD_INT 25
14306: PUSH
14307: LD_INT 26
14309: PUSH
14310: LD_INT 28
14312: PUSH
14313: LD_INT 30
14315: PUSH
14316: LD_INT 31
14318: PUSH
14319: LD_INT 32
14321: PUSH
14322: LD_INT 36
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 101
14358: PUSH
14359: LD_INT 102
14361: PUSH
14362: LD_INT 103
14364: PUSH
14365: LD_INT 104
14367: PUSH
14368: LD_INT 105
14370: PUSH
14371: LD_INT 106
14373: PUSH
14374: LD_INT 107
14376: PUSH
14377: LD_INT 108
14379: PUSH
14380: LD_INT 109
14382: PUSH
14383: LD_INT 110
14385: PUSH
14386: LD_INT 111
14388: PUSH
14389: LD_INT 112
14391: PUSH
14392: LD_INT 114
14394: PUSH
14395: LD_INT 116
14397: PUSH
14398: LD_INT 117
14400: PUSH
14401: LD_INT 118
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: ST_TO_ADDR
14426: GO 16321
14428: LD_INT 11
14430: DOUBLE
14431: EQUAL
14432: IFTRUE 14436
14434: GO 14640
14436: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14437: LD_ADDR_VAR 0 2
14441: PUSH
14442: LD_INT 2
14444: PUSH
14445: LD_INT 3
14447: PUSH
14448: LD_INT 4
14450: PUSH
14451: LD_INT 5
14453: PUSH
14454: LD_INT 6
14456: PUSH
14457: LD_INT 7
14459: PUSH
14460: LD_INT 8
14462: PUSH
14463: LD_INT 9
14465: PUSH
14466: LD_INT 10
14468: PUSH
14469: LD_INT 11
14471: PUSH
14472: LD_INT 12
14474: PUSH
14475: LD_INT 13
14477: PUSH
14478: LD_INT 14
14480: PUSH
14481: LD_INT 15
14483: PUSH
14484: LD_INT 16
14486: PUSH
14487: LD_INT 17
14489: PUSH
14490: LD_INT 18
14492: PUSH
14493: LD_INT 19
14495: PUSH
14496: LD_INT 20
14498: PUSH
14499: LD_INT 21
14501: PUSH
14502: LD_INT 22
14504: PUSH
14505: LD_INT 23
14507: PUSH
14508: LD_INT 24
14510: PUSH
14511: LD_INT 25
14513: PUSH
14514: LD_INT 26
14516: PUSH
14517: LD_INT 28
14519: PUSH
14520: LD_INT 30
14522: PUSH
14523: LD_INT 31
14525: PUSH
14526: LD_INT 32
14528: PUSH
14529: LD_INT 34
14531: PUSH
14532: LD_INT 36
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: LD_INT 101
14570: PUSH
14571: LD_INT 102
14573: PUSH
14574: LD_INT 103
14576: PUSH
14577: LD_INT 104
14579: PUSH
14580: LD_INT 105
14582: PUSH
14583: LD_INT 106
14585: PUSH
14586: LD_INT 107
14588: PUSH
14589: LD_INT 108
14591: PUSH
14592: LD_INT 109
14594: PUSH
14595: LD_INT 110
14597: PUSH
14598: LD_INT 111
14600: PUSH
14601: LD_INT 112
14603: PUSH
14604: LD_INT 114
14606: PUSH
14607: LD_INT 116
14609: PUSH
14610: LD_INT 117
14612: PUSH
14613: LD_INT 118
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: ST_TO_ADDR
14638: GO 16321
14640: LD_INT 12
14642: DOUBLE
14643: EQUAL
14644: IFTRUE 14648
14646: GO 14868
14648: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14649: LD_ADDR_VAR 0 2
14653: PUSH
14654: LD_INT 1
14656: PUSH
14657: LD_INT 2
14659: PUSH
14660: LD_INT 3
14662: PUSH
14663: LD_INT 4
14665: PUSH
14666: LD_INT 5
14668: PUSH
14669: LD_INT 6
14671: PUSH
14672: LD_INT 7
14674: PUSH
14675: LD_INT 8
14677: PUSH
14678: LD_INT 9
14680: PUSH
14681: LD_INT 10
14683: PUSH
14684: LD_INT 11
14686: PUSH
14687: LD_INT 12
14689: PUSH
14690: LD_INT 13
14692: PUSH
14693: LD_INT 14
14695: PUSH
14696: LD_INT 15
14698: PUSH
14699: LD_INT 16
14701: PUSH
14702: LD_INT 17
14704: PUSH
14705: LD_INT 18
14707: PUSH
14708: LD_INT 19
14710: PUSH
14711: LD_INT 20
14713: PUSH
14714: LD_INT 21
14716: PUSH
14717: LD_INT 22
14719: PUSH
14720: LD_INT 23
14722: PUSH
14723: LD_INT 24
14725: PUSH
14726: LD_INT 25
14728: PUSH
14729: LD_INT 26
14731: PUSH
14732: LD_INT 27
14734: PUSH
14735: LD_INT 28
14737: PUSH
14738: LD_INT 30
14740: PUSH
14741: LD_INT 31
14743: PUSH
14744: LD_INT 32
14746: PUSH
14747: LD_INT 33
14749: PUSH
14750: LD_INT 34
14752: PUSH
14753: LD_INT 36
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: PUSH
14792: LD_INT 101
14794: PUSH
14795: LD_INT 102
14797: PUSH
14798: LD_INT 103
14800: PUSH
14801: LD_INT 104
14803: PUSH
14804: LD_INT 105
14806: PUSH
14807: LD_INT 106
14809: PUSH
14810: LD_INT 107
14812: PUSH
14813: LD_INT 108
14815: PUSH
14816: LD_INT 109
14818: PUSH
14819: LD_INT 110
14821: PUSH
14822: LD_INT 111
14824: PUSH
14825: LD_INT 112
14827: PUSH
14828: LD_INT 113
14830: PUSH
14831: LD_INT 114
14833: PUSH
14834: LD_INT 116
14836: PUSH
14837: LD_INT 117
14839: PUSH
14840: LD_INT 118
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: ST_TO_ADDR
14866: GO 16321
14868: LD_INT 13
14870: DOUBLE
14871: EQUAL
14872: IFTRUE 14876
14874: GO 15084
14876: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14877: LD_ADDR_VAR 0 2
14881: PUSH
14882: LD_INT 1
14884: PUSH
14885: LD_INT 2
14887: PUSH
14888: LD_INT 3
14890: PUSH
14891: LD_INT 4
14893: PUSH
14894: LD_INT 5
14896: PUSH
14897: LD_INT 8
14899: PUSH
14900: LD_INT 9
14902: PUSH
14903: LD_INT 10
14905: PUSH
14906: LD_INT 11
14908: PUSH
14909: LD_INT 12
14911: PUSH
14912: LD_INT 14
14914: PUSH
14915: LD_INT 15
14917: PUSH
14918: LD_INT 16
14920: PUSH
14921: LD_INT 17
14923: PUSH
14924: LD_INT 18
14926: PUSH
14927: LD_INT 19
14929: PUSH
14930: LD_INT 20
14932: PUSH
14933: LD_INT 21
14935: PUSH
14936: LD_INT 22
14938: PUSH
14939: LD_INT 23
14941: PUSH
14942: LD_INT 24
14944: PUSH
14945: LD_INT 25
14947: PUSH
14948: LD_INT 26
14950: PUSH
14951: LD_INT 27
14953: PUSH
14954: LD_INT 28
14956: PUSH
14957: LD_INT 30
14959: PUSH
14960: LD_INT 31
14962: PUSH
14963: LD_INT 32
14965: PUSH
14966: LD_INT 33
14968: PUSH
14969: LD_INT 34
14971: PUSH
14972: LD_INT 36
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 101
15010: PUSH
15011: LD_INT 102
15013: PUSH
15014: LD_INT 103
15016: PUSH
15017: LD_INT 104
15019: PUSH
15020: LD_INT 105
15022: PUSH
15023: LD_INT 106
15025: PUSH
15026: LD_INT 107
15028: PUSH
15029: LD_INT 108
15031: PUSH
15032: LD_INT 109
15034: PUSH
15035: LD_INT 110
15037: PUSH
15038: LD_INT 111
15040: PUSH
15041: LD_INT 112
15043: PUSH
15044: LD_INT 113
15046: PUSH
15047: LD_INT 114
15049: PUSH
15050: LD_INT 116
15052: PUSH
15053: LD_INT 117
15055: PUSH
15056: LD_INT 118
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: ST_TO_ADDR
15082: GO 16321
15084: LD_INT 14
15086: DOUBLE
15087: EQUAL
15088: IFTRUE 15092
15090: GO 15316
15092: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15093: LD_ADDR_VAR 0 2
15097: PUSH
15098: LD_INT 1
15100: PUSH
15101: LD_INT 2
15103: PUSH
15104: LD_INT 3
15106: PUSH
15107: LD_INT 4
15109: PUSH
15110: LD_INT 5
15112: PUSH
15113: LD_INT 6
15115: PUSH
15116: LD_INT 7
15118: PUSH
15119: LD_INT 8
15121: PUSH
15122: LD_INT 9
15124: PUSH
15125: LD_INT 10
15127: PUSH
15128: LD_INT 11
15130: PUSH
15131: LD_INT 12
15133: PUSH
15134: LD_INT 13
15136: PUSH
15137: LD_INT 14
15139: PUSH
15140: LD_INT 15
15142: PUSH
15143: LD_INT 16
15145: PUSH
15146: LD_INT 17
15148: PUSH
15149: LD_INT 18
15151: PUSH
15152: LD_INT 19
15154: PUSH
15155: LD_INT 20
15157: PUSH
15158: LD_INT 21
15160: PUSH
15161: LD_INT 22
15163: PUSH
15164: LD_INT 23
15166: PUSH
15167: LD_INT 24
15169: PUSH
15170: LD_INT 25
15172: PUSH
15173: LD_INT 26
15175: PUSH
15176: LD_INT 27
15178: PUSH
15179: LD_INT 28
15181: PUSH
15182: LD_INT 29
15184: PUSH
15185: LD_INT 30
15187: PUSH
15188: LD_INT 31
15190: PUSH
15191: LD_INT 32
15193: PUSH
15194: LD_INT 33
15196: PUSH
15197: LD_INT 34
15199: PUSH
15200: LD_INT 36
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 101
15242: PUSH
15243: LD_INT 102
15245: PUSH
15246: LD_INT 103
15248: PUSH
15249: LD_INT 104
15251: PUSH
15252: LD_INT 105
15254: PUSH
15255: LD_INT 106
15257: PUSH
15258: LD_INT 107
15260: PUSH
15261: LD_INT 108
15263: PUSH
15264: LD_INT 109
15266: PUSH
15267: LD_INT 110
15269: PUSH
15270: LD_INT 111
15272: PUSH
15273: LD_INT 112
15275: PUSH
15276: LD_INT 113
15278: PUSH
15279: LD_INT 114
15281: PUSH
15282: LD_INT 116
15284: PUSH
15285: LD_INT 117
15287: PUSH
15288: LD_INT 118
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: ST_TO_ADDR
15314: GO 16321
15316: LD_INT 15
15318: DOUBLE
15319: EQUAL
15320: IFTRUE 15324
15322: GO 15548
15324: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15325: LD_ADDR_VAR 0 2
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: LD_INT 2
15335: PUSH
15336: LD_INT 3
15338: PUSH
15339: LD_INT 4
15341: PUSH
15342: LD_INT 5
15344: PUSH
15345: LD_INT 6
15347: PUSH
15348: LD_INT 7
15350: PUSH
15351: LD_INT 8
15353: PUSH
15354: LD_INT 9
15356: PUSH
15357: LD_INT 10
15359: PUSH
15360: LD_INT 11
15362: PUSH
15363: LD_INT 12
15365: PUSH
15366: LD_INT 13
15368: PUSH
15369: LD_INT 14
15371: PUSH
15372: LD_INT 15
15374: PUSH
15375: LD_INT 16
15377: PUSH
15378: LD_INT 17
15380: PUSH
15381: LD_INT 18
15383: PUSH
15384: LD_INT 19
15386: PUSH
15387: LD_INT 20
15389: PUSH
15390: LD_INT 21
15392: PUSH
15393: LD_INT 22
15395: PUSH
15396: LD_INT 23
15398: PUSH
15399: LD_INT 24
15401: PUSH
15402: LD_INT 25
15404: PUSH
15405: LD_INT 26
15407: PUSH
15408: LD_INT 27
15410: PUSH
15411: LD_INT 28
15413: PUSH
15414: LD_INT 29
15416: PUSH
15417: LD_INT 30
15419: PUSH
15420: LD_INT 31
15422: PUSH
15423: LD_INT 32
15425: PUSH
15426: LD_INT 33
15428: PUSH
15429: LD_INT 34
15431: PUSH
15432: LD_INT 36
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: PUSH
15472: LD_INT 101
15474: PUSH
15475: LD_INT 102
15477: PUSH
15478: LD_INT 103
15480: PUSH
15481: LD_INT 104
15483: PUSH
15484: LD_INT 105
15486: PUSH
15487: LD_INT 106
15489: PUSH
15490: LD_INT 107
15492: PUSH
15493: LD_INT 108
15495: PUSH
15496: LD_INT 109
15498: PUSH
15499: LD_INT 110
15501: PUSH
15502: LD_INT 111
15504: PUSH
15505: LD_INT 112
15507: PUSH
15508: LD_INT 113
15510: PUSH
15511: LD_INT 114
15513: PUSH
15514: LD_INT 116
15516: PUSH
15517: LD_INT 117
15519: PUSH
15520: LD_INT 118
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: ST_TO_ADDR
15546: GO 16321
15548: LD_INT 16
15550: DOUBLE
15551: EQUAL
15552: IFTRUE 15556
15554: GO 15692
15556: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15557: LD_ADDR_VAR 0 2
15561: PUSH
15562: LD_INT 2
15564: PUSH
15565: LD_INT 4
15567: PUSH
15568: LD_INT 5
15570: PUSH
15571: LD_INT 7
15573: PUSH
15574: LD_INT 11
15576: PUSH
15577: LD_INT 12
15579: PUSH
15580: LD_INT 15
15582: PUSH
15583: LD_INT 16
15585: PUSH
15586: LD_INT 20
15588: PUSH
15589: LD_INT 21
15591: PUSH
15592: LD_INT 22
15594: PUSH
15595: LD_INT 23
15597: PUSH
15598: LD_INT 25
15600: PUSH
15601: LD_INT 26
15603: PUSH
15604: LD_INT 30
15606: PUSH
15607: LD_INT 31
15609: PUSH
15610: LD_INT 32
15612: PUSH
15613: LD_INT 33
15615: PUSH
15616: LD_INT 34
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 101
15642: PUSH
15643: LD_INT 102
15645: PUSH
15646: LD_INT 103
15648: PUSH
15649: LD_INT 106
15651: PUSH
15652: LD_INT 108
15654: PUSH
15655: LD_INT 112
15657: PUSH
15658: LD_INT 113
15660: PUSH
15661: LD_INT 114
15663: PUSH
15664: LD_INT 116
15666: PUSH
15667: LD_INT 117
15669: PUSH
15670: LD_INT 118
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: ST_TO_ADDR
15690: GO 16321
15692: LD_INT 17
15694: DOUBLE
15695: EQUAL
15696: IFTRUE 15700
15698: GO 15924
15700: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15701: LD_ADDR_VAR 0 2
15705: PUSH
15706: LD_INT 1
15708: PUSH
15709: LD_INT 2
15711: PUSH
15712: LD_INT 3
15714: PUSH
15715: LD_INT 4
15717: PUSH
15718: LD_INT 5
15720: PUSH
15721: LD_INT 6
15723: PUSH
15724: LD_INT 7
15726: PUSH
15727: LD_INT 8
15729: PUSH
15730: LD_INT 9
15732: PUSH
15733: LD_INT 10
15735: PUSH
15736: LD_INT 11
15738: PUSH
15739: LD_INT 12
15741: PUSH
15742: LD_INT 13
15744: PUSH
15745: LD_INT 14
15747: PUSH
15748: LD_INT 15
15750: PUSH
15751: LD_INT 16
15753: PUSH
15754: LD_INT 17
15756: PUSH
15757: LD_INT 18
15759: PUSH
15760: LD_INT 19
15762: PUSH
15763: LD_INT 20
15765: PUSH
15766: LD_INT 21
15768: PUSH
15769: LD_INT 22
15771: PUSH
15772: LD_INT 23
15774: PUSH
15775: LD_INT 24
15777: PUSH
15778: LD_INT 25
15780: PUSH
15781: LD_INT 26
15783: PUSH
15784: LD_INT 27
15786: PUSH
15787: LD_INT 28
15789: PUSH
15790: LD_INT 29
15792: PUSH
15793: LD_INT 30
15795: PUSH
15796: LD_INT 31
15798: PUSH
15799: LD_INT 32
15801: PUSH
15802: LD_INT 33
15804: PUSH
15805: LD_INT 34
15807: PUSH
15808: LD_INT 36
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 101
15850: PUSH
15851: LD_INT 102
15853: PUSH
15854: LD_INT 103
15856: PUSH
15857: LD_INT 104
15859: PUSH
15860: LD_INT 105
15862: PUSH
15863: LD_INT 106
15865: PUSH
15866: LD_INT 107
15868: PUSH
15869: LD_INT 108
15871: PUSH
15872: LD_INT 109
15874: PUSH
15875: LD_INT 110
15877: PUSH
15878: LD_INT 111
15880: PUSH
15881: LD_INT 112
15883: PUSH
15884: LD_INT 113
15886: PUSH
15887: LD_INT 114
15889: PUSH
15890: LD_INT 116
15892: PUSH
15893: LD_INT 117
15895: PUSH
15896: LD_INT 118
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: ST_TO_ADDR
15922: GO 16321
15924: LD_INT 18
15926: DOUBLE
15927: EQUAL
15928: IFTRUE 15932
15930: GO 16080
15932: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15933: LD_ADDR_VAR 0 2
15937: PUSH
15938: LD_INT 2
15940: PUSH
15941: LD_INT 4
15943: PUSH
15944: LD_INT 5
15946: PUSH
15947: LD_INT 7
15949: PUSH
15950: LD_INT 11
15952: PUSH
15953: LD_INT 12
15955: PUSH
15956: LD_INT 15
15958: PUSH
15959: LD_INT 16
15961: PUSH
15962: LD_INT 20
15964: PUSH
15965: LD_INT 21
15967: PUSH
15968: LD_INT 22
15970: PUSH
15971: LD_INT 23
15973: PUSH
15974: LD_INT 25
15976: PUSH
15977: LD_INT 26
15979: PUSH
15980: LD_INT 30
15982: PUSH
15983: LD_INT 31
15985: PUSH
15986: LD_INT 32
15988: PUSH
15989: LD_INT 33
15991: PUSH
15992: LD_INT 34
15994: PUSH
15995: LD_INT 35
15997: PUSH
15998: LD_INT 36
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 101
16026: PUSH
16027: LD_INT 102
16029: PUSH
16030: LD_INT 103
16032: PUSH
16033: LD_INT 106
16035: PUSH
16036: LD_INT 108
16038: PUSH
16039: LD_INT 112
16041: PUSH
16042: LD_INT 113
16044: PUSH
16045: LD_INT 114
16047: PUSH
16048: LD_INT 115
16050: PUSH
16051: LD_INT 116
16053: PUSH
16054: LD_INT 117
16056: PUSH
16057: LD_INT 118
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: ST_TO_ADDR
16078: GO 16321
16080: LD_INT 19
16082: DOUBLE
16083: EQUAL
16084: IFTRUE 16088
16086: GO 16320
16088: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16089: LD_ADDR_VAR 0 2
16093: PUSH
16094: LD_INT 1
16096: PUSH
16097: LD_INT 2
16099: PUSH
16100: LD_INT 3
16102: PUSH
16103: LD_INT 4
16105: PUSH
16106: LD_INT 5
16108: PUSH
16109: LD_INT 6
16111: PUSH
16112: LD_INT 7
16114: PUSH
16115: LD_INT 8
16117: PUSH
16118: LD_INT 9
16120: PUSH
16121: LD_INT 10
16123: PUSH
16124: LD_INT 11
16126: PUSH
16127: LD_INT 12
16129: PUSH
16130: LD_INT 13
16132: PUSH
16133: LD_INT 14
16135: PUSH
16136: LD_INT 15
16138: PUSH
16139: LD_INT 16
16141: PUSH
16142: LD_INT 17
16144: PUSH
16145: LD_INT 18
16147: PUSH
16148: LD_INT 19
16150: PUSH
16151: LD_INT 20
16153: PUSH
16154: LD_INT 21
16156: PUSH
16157: LD_INT 22
16159: PUSH
16160: LD_INT 23
16162: PUSH
16163: LD_INT 24
16165: PUSH
16166: LD_INT 25
16168: PUSH
16169: LD_INT 26
16171: PUSH
16172: LD_INT 27
16174: PUSH
16175: LD_INT 28
16177: PUSH
16178: LD_INT 29
16180: PUSH
16181: LD_INT 30
16183: PUSH
16184: LD_INT 31
16186: PUSH
16187: LD_INT 32
16189: PUSH
16190: LD_INT 33
16192: PUSH
16193: LD_INT 34
16195: PUSH
16196: LD_INT 35
16198: PUSH
16199: LD_INT 36
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 101
16242: PUSH
16243: LD_INT 102
16245: PUSH
16246: LD_INT 103
16248: PUSH
16249: LD_INT 104
16251: PUSH
16252: LD_INT 105
16254: PUSH
16255: LD_INT 106
16257: PUSH
16258: LD_INT 107
16260: PUSH
16261: LD_INT 108
16263: PUSH
16264: LD_INT 109
16266: PUSH
16267: LD_INT 110
16269: PUSH
16270: LD_INT 111
16272: PUSH
16273: LD_INT 112
16275: PUSH
16276: LD_INT 113
16278: PUSH
16279: LD_INT 114
16281: PUSH
16282: LD_INT 115
16284: PUSH
16285: LD_INT 116
16287: PUSH
16288: LD_INT 117
16290: PUSH
16291: LD_INT 118
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: ST_TO_ADDR
16318: GO 16321
16320: POP
// end else
16321: GO 16552
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16323: LD_ADDR_VAR 0 2
16327: PUSH
16328: LD_INT 1
16330: PUSH
16331: LD_INT 2
16333: PUSH
16334: LD_INT 3
16336: PUSH
16337: LD_INT 4
16339: PUSH
16340: LD_INT 5
16342: PUSH
16343: LD_INT 6
16345: PUSH
16346: LD_INT 7
16348: PUSH
16349: LD_INT 8
16351: PUSH
16352: LD_INT 9
16354: PUSH
16355: LD_INT 10
16357: PUSH
16358: LD_INT 11
16360: PUSH
16361: LD_INT 12
16363: PUSH
16364: LD_INT 13
16366: PUSH
16367: LD_INT 14
16369: PUSH
16370: LD_INT 15
16372: PUSH
16373: LD_INT 16
16375: PUSH
16376: LD_INT 17
16378: PUSH
16379: LD_INT 18
16381: PUSH
16382: LD_INT 19
16384: PUSH
16385: LD_INT 20
16387: PUSH
16388: LD_INT 21
16390: PUSH
16391: LD_INT 22
16393: PUSH
16394: LD_INT 23
16396: PUSH
16397: LD_INT 24
16399: PUSH
16400: LD_INT 25
16402: PUSH
16403: LD_INT 26
16405: PUSH
16406: LD_INT 27
16408: PUSH
16409: LD_INT 28
16411: PUSH
16412: LD_INT 29
16414: PUSH
16415: LD_INT 30
16417: PUSH
16418: LD_INT 31
16420: PUSH
16421: LD_INT 32
16423: PUSH
16424: LD_INT 33
16426: PUSH
16427: LD_INT 34
16429: PUSH
16430: LD_INT 35
16432: PUSH
16433: LD_INT 36
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 101
16476: PUSH
16477: LD_INT 102
16479: PUSH
16480: LD_INT 103
16482: PUSH
16483: LD_INT 104
16485: PUSH
16486: LD_INT 105
16488: PUSH
16489: LD_INT 106
16491: PUSH
16492: LD_INT 107
16494: PUSH
16495: LD_INT 108
16497: PUSH
16498: LD_INT 109
16500: PUSH
16501: LD_INT 110
16503: PUSH
16504: LD_INT 111
16506: PUSH
16507: LD_INT 112
16509: PUSH
16510: LD_INT 113
16512: PUSH
16513: LD_INT 114
16515: PUSH
16516: LD_INT 115
16518: PUSH
16519: LD_INT 116
16521: PUSH
16522: LD_INT 117
16524: PUSH
16525: LD_INT 118
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: ST_TO_ADDR
// if result then
16552: LD_VAR 0 2
16556: IFFALSE 17342
// begin normal :=  ;
16558: LD_ADDR_VAR 0 5
16562: PUSH
16563: LD_STRING 
16565: ST_TO_ADDR
// hardcore :=  ;
16566: LD_ADDR_VAR 0 6
16570: PUSH
16571: LD_STRING 
16573: ST_TO_ADDR
// active :=  ;
16574: LD_ADDR_VAR 0 7
16578: PUSH
16579: LD_STRING 
16581: ST_TO_ADDR
// for i = 1 to normalCounter do
16582: LD_ADDR_VAR 0 8
16586: PUSH
16587: DOUBLE
16588: LD_INT 1
16590: DEC
16591: ST_TO_ADDR
16592: LD_EXP 49
16596: PUSH
16597: FOR_TO
16598: IFFALSE 16699
// begin tmp := 0 ;
16600: LD_ADDR_VAR 0 3
16604: PUSH
16605: LD_STRING 0
16607: ST_TO_ADDR
// if result [ 1 ] then
16608: LD_VAR 0 2
16612: PUSH
16613: LD_INT 1
16615: ARRAY
16616: IFFALSE 16681
// if result [ 1 ] [ 1 ] = i then
16618: LD_VAR 0 2
16622: PUSH
16623: LD_INT 1
16625: ARRAY
16626: PUSH
16627: LD_INT 1
16629: ARRAY
16630: PUSH
16631: LD_VAR 0 8
16635: EQUAL
16636: IFFALSE 16681
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16638: LD_ADDR_VAR 0 2
16642: PUSH
16643: LD_VAR 0 2
16647: PPUSH
16648: LD_INT 1
16650: PPUSH
16651: LD_VAR 0 2
16655: PUSH
16656: LD_INT 1
16658: ARRAY
16659: PPUSH
16660: LD_INT 1
16662: PPUSH
16663: CALL_OW 3
16667: PPUSH
16668: CALL_OW 1
16672: ST_TO_ADDR
// tmp := 1 ;
16673: LD_ADDR_VAR 0 3
16677: PUSH
16678: LD_STRING 1
16680: ST_TO_ADDR
// end ; normal := normal & tmp ;
16681: LD_ADDR_VAR 0 5
16685: PUSH
16686: LD_VAR 0 5
16690: PUSH
16691: LD_VAR 0 3
16695: STR
16696: ST_TO_ADDR
// end ;
16697: GO 16597
16699: POP
16700: POP
// for i = 1 to hardcoreCounter do
16701: LD_ADDR_VAR 0 8
16705: PUSH
16706: DOUBLE
16707: LD_INT 1
16709: DEC
16710: ST_TO_ADDR
16711: LD_EXP 50
16715: PUSH
16716: FOR_TO
16717: IFFALSE 16822
// begin tmp := 0 ;
16719: LD_ADDR_VAR 0 3
16723: PUSH
16724: LD_STRING 0
16726: ST_TO_ADDR
// if result [ 2 ] then
16727: LD_VAR 0 2
16731: PUSH
16732: LD_INT 2
16734: ARRAY
16735: IFFALSE 16804
// if result [ 2 ] [ 1 ] = 100 + i then
16737: LD_VAR 0 2
16741: PUSH
16742: LD_INT 2
16744: ARRAY
16745: PUSH
16746: LD_INT 1
16748: ARRAY
16749: PUSH
16750: LD_INT 100
16752: PUSH
16753: LD_VAR 0 8
16757: PLUS
16758: EQUAL
16759: IFFALSE 16804
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16761: LD_ADDR_VAR 0 2
16765: PUSH
16766: LD_VAR 0 2
16770: PPUSH
16771: LD_INT 2
16773: PPUSH
16774: LD_VAR 0 2
16778: PUSH
16779: LD_INT 2
16781: ARRAY
16782: PPUSH
16783: LD_INT 1
16785: PPUSH
16786: CALL_OW 3
16790: PPUSH
16791: CALL_OW 1
16795: ST_TO_ADDR
// tmp := 1 ;
16796: LD_ADDR_VAR 0 3
16800: PUSH
16801: LD_STRING 1
16803: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16804: LD_ADDR_VAR 0 6
16808: PUSH
16809: LD_VAR 0 6
16813: PUSH
16814: LD_VAR 0 3
16818: STR
16819: ST_TO_ADDR
// end ;
16820: GO 16716
16822: POP
16823: POP
// if isGameLoad then
16824: LD_VAR 0 1
16828: IFFALSE 17303
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16830: LD_ADDR_VAR 0 4
16834: PUSH
16835: LD_EXP 53
16839: PUSH
16840: LD_EXP 52
16844: PUSH
16845: LD_EXP 54
16849: PUSH
16850: LD_EXP 51
16854: PUSH
16855: LD_EXP 55
16859: PUSH
16860: LD_EXP 56
16864: PUSH
16865: LD_EXP 57
16869: PUSH
16870: LD_EXP 58
16874: PUSH
16875: LD_EXP 59
16879: PUSH
16880: LD_EXP 60
16884: PUSH
16885: LD_EXP 61
16889: PUSH
16890: LD_EXP 62
16894: PUSH
16895: LD_EXP 63
16899: PUSH
16900: LD_EXP 64
16904: PUSH
16905: LD_EXP 72
16909: PUSH
16910: LD_EXP 73
16914: PUSH
16915: LD_EXP 74
16919: PUSH
16920: LD_EXP 75
16924: PUSH
16925: LD_EXP 77
16929: PUSH
16930: LD_EXP 78
16934: PUSH
16935: LD_EXP 79
16939: PUSH
16940: LD_EXP 82
16944: PUSH
16945: LD_EXP 84
16949: PUSH
16950: LD_EXP 85
16954: PUSH
16955: LD_EXP 86
16959: PUSH
16960: LD_EXP 88
16964: PUSH
16965: LD_EXP 89
16969: PUSH
16970: LD_EXP 92
16974: PUSH
16975: LD_EXP 93
16979: PUSH
16980: LD_EXP 94
16984: PUSH
16985: LD_EXP 95
16989: PUSH
16990: LD_EXP 96
16994: PUSH
16995: LD_EXP 97
16999: PUSH
17000: LD_EXP 98
17004: PUSH
17005: LD_EXP 99
17009: PUSH
17010: LD_EXP 100
17014: PUSH
17015: LD_EXP 65
17019: PUSH
17020: LD_EXP 66
17024: PUSH
17025: LD_EXP 69
17029: PUSH
17030: LD_EXP 70
17034: PUSH
17035: LD_EXP 71
17039: PUSH
17040: LD_EXP 67
17044: PUSH
17045: LD_EXP 68
17049: PUSH
17050: LD_EXP 76
17054: PUSH
17055: LD_EXP 80
17059: PUSH
17060: LD_EXP 81
17064: PUSH
17065: LD_EXP 83
17069: PUSH
17070: LD_EXP 87
17074: PUSH
17075: LD_EXP 90
17079: PUSH
17080: LD_EXP 91
17084: PUSH
17085: LD_EXP 101
17089: PUSH
17090: LD_EXP 102
17094: PUSH
17095: LD_EXP 103
17099: PUSH
17100: LD_EXP 104
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: ST_TO_ADDR
// tmp :=  ;
17161: LD_ADDR_VAR 0 3
17165: PUSH
17166: LD_STRING 
17168: ST_TO_ADDR
// for i = 1 to normalCounter do
17169: LD_ADDR_VAR 0 8
17173: PUSH
17174: DOUBLE
17175: LD_INT 1
17177: DEC
17178: ST_TO_ADDR
17179: LD_EXP 49
17183: PUSH
17184: FOR_TO
17185: IFFALSE 17221
// begin if flags [ i ] then
17187: LD_VAR 0 4
17191: PUSH
17192: LD_VAR 0 8
17196: ARRAY
17197: IFFALSE 17219
// tmp := tmp & i & ; ;
17199: LD_ADDR_VAR 0 3
17203: PUSH
17204: LD_VAR 0 3
17208: PUSH
17209: LD_VAR 0 8
17213: STR
17214: PUSH
17215: LD_STRING ;
17217: STR
17218: ST_TO_ADDR
// end ;
17219: GO 17184
17221: POP
17222: POP
// for i = 1 to hardcoreCounter do
17223: LD_ADDR_VAR 0 8
17227: PUSH
17228: DOUBLE
17229: LD_INT 1
17231: DEC
17232: ST_TO_ADDR
17233: LD_EXP 50
17237: PUSH
17238: FOR_TO
17239: IFFALSE 17285
// begin if flags [ normalCounter + i ] then
17241: LD_VAR 0 4
17245: PUSH
17246: LD_EXP 49
17250: PUSH
17251: LD_VAR 0 8
17255: PLUS
17256: ARRAY
17257: IFFALSE 17283
// tmp := tmp & ( 100 + i ) & ; ;
17259: LD_ADDR_VAR 0 3
17263: PUSH
17264: LD_VAR 0 3
17268: PUSH
17269: LD_INT 100
17271: PUSH
17272: LD_VAR 0 8
17276: PLUS
17277: STR
17278: PUSH
17279: LD_STRING ;
17281: STR
17282: ST_TO_ADDR
// end ;
17283: GO 17238
17285: POP
17286: POP
// if tmp then
17287: LD_VAR 0 3
17291: IFFALSE 17303
// active := tmp ;
17293: LD_ADDR_VAR 0 7
17297: PUSH
17298: LD_VAR 0 3
17302: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17303: LD_STRING getStreamItemsFromMission("
17305: PUSH
17306: LD_VAR 0 5
17310: STR
17311: PUSH
17312: LD_STRING ","
17314: STR
17315: PUSH
17316: LD_VAR 0 6
17320: STR
17321: PUSH
17322: LD_STRING ","
17324: STR
17325: PUSH
17326: LD_VAR 0 7
17330: STR
17331: PUSH
17332: LD_STRING ")
17334: STR
17335: PPUSH
17336: CALL_OW 559
// end else
17340: GO 17349
// ToLua ( getStreamItemsFromMission("","","") ) ;
17342: LD_STRING getStreamItemsFromMission("","","")
17344: PPUSH
17345: CALL_OW 559
// end ;
17349: LD_VAR 0 2
17353: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17354: LD_EXP 48
17358: IFFALSE 17366
17360: PUSH
17361: LD_EXP 53
17365: AND
17366: IFFALSE 17490
17368: GO 17370
17370: DISABLE
17371: LD_INT 0
17373: PPUSH
17374: PPUSH
// begin enable ;
17375: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17376: LD_ADDR_VAR 0 2
17380: PUSH
17381: LD_INT 22
17383: PUSH
17384: LD_OWVAR 2
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 2
17395: PUSH
17396: LD_INT 34
17398: PUSH
17399: LD_INT 7
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 34
17408: PUSH
17409: LD_INT 45
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 34
17418: PUSH
17419: LD_INT 28
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 34
17428: PUSH
17429: LD_INT 47
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PPUSH
17447: CALL_OW 69
17451: ST_TO_ADDR
// if not tmp then
17452: LD_VAR 0 2
17456: NOT
17457: IFFALSE 17461
// exit ;
17459: GO 17490
// for i in tmp do
17461: LD_ADDR_VAR 0 1
17465: PUSH
17466: LD_VAR 0 2
17470: PUSH
17471: FOR_IN
17472: IFFALSE 17488
// begin SetLives ( i , 0 ) ;
17474: LD_VAR 0 1
17478: PPUSH
17479: LD_INT 0
17481: PPUSH
17482: CALL_OW 234
// end ;
17486: GO 17471
17488: POP
17489: POP
// end ;
17490: PPOPN 2
17492: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17493: LD_EXP 48
17497: IFFALSE 17505
17499: PUSH
17500: LD_EXP 54
17504: AND
17505: IFFALSE 17589
17507: GO 17509
17509: DISABLE
17510: LD_INT 0
17512: PPUSH
17513: PPUSH
// begin enable ;
17514: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17515: LD_ADDR_VAR 0 2
17519: PUSH
17520: LD_INT 22
17522: PUSH
17523: LD_OWVAR 2
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 32
17534: PUSH
17535: LD_INT 3
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PPUSH
17546: CALL_OW 69
17550: ST_TO_ADDR
// if not tmp then
17551: LD_VAR 0 2
17555: NOT
17556: IFFALSE 17560
// exit ;
17558: GO 17589
// for i in tmp do
17560: LD_ADDR_VAR 0 1
17564: PUSH
17565: LD_VAR 0 2
17569: PUSH
17570: FOR_IN
17571: IFFALSE 17587
// begin SetLives ( i , 0 ) ;
17573: LD_VAR 0 1
17577: PPUSH
17578: LD_INT 0
17580: PPUSH
17581: CALL_OW 234
// end ;
17585: GO 17570
17587: POP
17588: POP
// end ;
17589: PPOPN 2
17591: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17592: LD_EXP 48
17596: IFFALSE 17604
17598: PUSH
17599: LD_EXP 51
17603: AND
17604: IFFALSE 17697
17606: GO 17608
17608: DISABLE
17609: LD_INT 0
17611: PPUSH
// begin enable ;
17612: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17613: LD_ADDR_VAR 0 1
17617: PUSH
17618: LD_INT 22
17620: PUSH
17621: LD_OWVAR 2
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 2
17632: PUSH
17633: LD_INT 25
17635: PUSH
17636: LD_INT 5
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 25
17645: PUSH
17646: LD_INT 9
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 25
17655: PUSH
17656: LD_INT 8
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PPUSH
17673: CALL_OW 69
17677: PUSH
17678: FOR_IN
17679: IFFALSE 17695
// begin SetClass ( i , 1 ) ;
17681: LD_VAR 0 1
17685: PPUSH
17686: LD_INT 1
17688: PPUSH
17689: CALL_OW 336
// end ;
17693: GO 17678
17695: POP
17696: POP
// end ;
17697: PPOPN 1
17699: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17700: LD_EXP 48
17704: IFFALSE 17712
17706: PUSH
17707: LD_EXP 52
17711: AND
17712: IFFALSE 17724
17714: PUSH
17715: LD_OWVAR 65
17719: PUSH
17720: LD_INT 7
17722: LESS
17723: AND
17724: IFFALSE 17738
17726: GO 17728
17728: DISABLE
// begin enable ;
17729: ENABLE
// game_speed := 7 ;
17730: LD_ADDR_OWVAR 65
17734: PUSH
17735: LD_INT 7
17737: ST_TO_ADDR
// end ;
17738: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17739: LD_EXP 48
17743: IFFALSE 17751
17745: PUSH
17746: LD_EXP 55
17750: AND
17751: IFFALSE 17953
17753: GO 17755
17755: DISABLE
17756: LD_INT 0
17758: PPUSH
17759: PPUSH
17760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17761: LD_ADDR_VAR 0 3
17765: PUSH
17766: LD_INT 81
17768: PUSH
17769: LD_OWVAR 2
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 21
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PPUSH
17792: CALL_OW 69
17796: ST_TO_ADDR
// if not tmp then
17797: LD_VAR 0 3
17801: NOT
17802: IFFALSE 17806
// exit ;
17804: GO 17953
// if tmp > 5 then
17806: LD_VAR 0 3
17810: PUSH
17811: LD_INT 5
17813: GREATER
17814: IFFALSE 17826
// k := 5 else
17816: LD_ADDR_VAR 0 2
17820: PUSH
17821: LD_INT 5
17823: ST_TO_ADDR
17824: GO 17836
// k := tmp ;
17826: LD_ADDR_VAR 0 2
17830: PUSH
17831: LD_VAR 0 3
17835: ST_TO_ADDR
// for i := 1 to k do
17836: LD_ADDR_VAR 0 1
17840: PUSH
17841: DOUBLE
17842: LD_INT 1
17844: DEC
17845: ST_TO_ADDR
17846: LD_VAR 0 2
17850: PUSH
17851: FOR_TO
17852: IFFALSE 17951
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17854: LD_VAR 0 3
17858: PUSH
17859: LD_VAR 0 1
17863: ARRAY
17864: PPUSH
17865: LD_VAR 0 1
17869: PUSH
17870: LD_INT 4
17872: MOD
17873: PUSH
17874: LD_INT 1
17876: PLUS
17877: PPUSH
17878: CALL_OW 259
17882: PUSH
17883: LD_INT 10
17885: LESS
17886: IFFALSE 17949
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17888: LD_VAR 0 3
17892: PUSH
17893: LD_VAR 0 1
17897: ARRAY
17898: PPUSH
17899: LD_VAR 0 1
17903: PUSH
17904: LD_INT 4
17906: MOD
17907: PUSH
17908: LD_INT 1
17910: PLUS
17911: PPUSH
17912: LD_VAR 0 3
17916: PUSH
17917: LD_VAR 0 1
17921: ARRAY
17922: PPUSH
17923: LD_VAR 0 1
17927: PUSH
17928: LD_INT 4
17930: MOD
17931: PUSH
17932: LD_INT 1
17934: PLUS
17935: PPUSH
17936: CALL_OW 259
17940: PUSH
17941: LD_INT 1
17943: PLUS
17944: PPUSH
17945: CALL_OW 237
17949: GO 17851
17951: POP
17952: POP
// end ;
17953: PPOPN 3
17955: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17956: LD_EXP 48
17960: IFFALSE 17968
17962: PUSH
17963: LD_EXP 56
17967: AND
17968: IFFALSE 17988
17970: GO 17972
17972: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17973: LD_INT 4
17975: PPUSH
17976: LD_OWVAR 2
17980: PPUSH
17981: LD_INT 0
17983: PPUSH
17984: CALL_OW 324
17988: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17989: LD_EXP 48
17993: IFFALSE 18001
17995: PUSH
17996: LD_EXP 85
18000: AND
18001: IFFALSE 18021
18003: GO 18005
18005: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18006: LD_INT 19
18008: PPUSH
18009: LD_OWVAR 2
18013: PPUSH
18014: LD_INT 0
18016: PPUSH
18017: CALL_OW 324
18021: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18022: LD_EXP 48
18026: IFFALSE 18034
18028: PUSH
18029: LD_EXP 57
18033: AND
18034: IFFALSE 18136
18036: GO 18038
18038: DISABLE
18039: LD_INT 0
18041: PPUSH
18042: PPUSH
// begin enable ;
18043: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18044: LD_ADDR_VAR 0 2
18048: PUSH
18049: LD_INT 22
18051: PUSH
18052: LD_OWVAR 2
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 2
18063: PUSH
18064: LD_INT 34
18066: PUSH
18067: LD_INT 11
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 34
18076: PUSH
18077: LD_INT 30
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: LIST
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PPUSH
18093: CALL_OW 69
18097: ST_TO_ADDR
// if not tmp then
18098: LD_VAR 0 2
18102: NOT
18103: IFFALSE 18107
// exit ;
18105: GO 18136
// for i in tmp do
18107: LD_ADDR_VAR 0 1
18111: PUSH
18112: LD_VAR 0 2
18116: PUSH
18117: FOR_IN
18118: IFFALSE 18134
// begin SetLives ( i , 0 ) ;
18120: LD_VAR 0 1
18124: PPUSH
18125: LD_INT 0
18127: PPUSH
18128: CALL_OW 234
// end ;
18132: GO 18117
18134: POP
18135: POP
// end ;
18136: PPOPN 2
18138: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18139: LD_EXP 48
18143: IFFALSE 18151
18145: PUSH
18146: LD_EXP 58
18150: AND
18151: IFFALSE 18171
18153: GO 18155
18155: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18156: LD_INT 32
18158: PPUSH
18159: LD_OWVAR 2
18163: PPUSH
18164: LD_INT 0
18166: PPUSH
18167: CALL_OW 324
18171: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18172: LD_EXP 48
18176: IFFALSE 18184
18178: PUSH
18179: LD_EXP 59
18183: AND
18184: IFFALSE 18367
18186: GO 18188
18188: DISABLE
18189: LD_INT 0
18191: PPUSH
18192: PPUSH
18193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18194: LD_ADDR_VAR 0 2
18198: PUSH
18199: LD_INT 22
18201: PUSH
18202: LD_OWVAR 2
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 33
18213: PUSH
18214: LD_INT 3
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PPUSH
18225: CALL_OW 69
18229: ST_TO_ADDR
// if not tmp then
18230: LD_VAR 0 2
18234: NOT
18235: IFFALSE 18239
// exit ;
18237: GO 18367
// side := 0 ;
18239: LD_ADDR_VAR 0 3
18243: PUSH
18244: LD_INT 0
18246: ST_TO_ADDR
// for i := 1 to 8 do
18247: LD_ADDR_VAR 0 1
18251: PUSH
18252: DOUBLE
18253: LD_INT 1
18255: DEC
18256: ST_TO_ADDR
18257: LD_INT 8
18259: PUSH
18260: FOR_TO
18261: IFFALSE 18311
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18263: LD_OWVAR 2
18267: PUSH
18268: LD_VAR 0 1
18272: NONEQUAL
18273: IFFALSE 18295
18275: PUSH
18276: LD_OWVAR 2
18280: PPUSH
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 81
18290: PUSH
18291: LD_INT 2
18293: EQUAL
18294: AND
18295: IFFALSE 18309
// begin side := i ;
18297: LD_ADDR_VAR 0 3
18301: PUSH
18302: LD_VAR 0 1
18306: ST_TO_ADDR
// break ;
18307: GO 18311
// end ;
18309: GO 18260
18311: POP
18312: POP
// if not side then
18313: LD_VAR 0 3
18317: NOT
18318: IFFALSE 18322
// exit ;
18320: GO 18367
// for i := 1 to tmp do
18322: LD_ADDR_VAR 0 1
18326: PUSH
18327: DOUBLE
18328: LD_INT 1
18330: DEC
18331: ST_TO_ADDR
18332: LD_VAR 0 2
18336: PUSH
18337: FOR_TO
18338: IFFALSE 18365
// if Prob ( 60 ) then
18340: LD_INT 60
18342: PPUSH
18343: CALL_OW 13
18347: IFFALSE 18363
// SetSide ( i , side ) ;
18349: LD_VAR 0 1
18353: PPUSH
18354: LD_VAR 0 3
18358: PPUSH
18359: CALL_OW 235
18363: GO 18337
18365: POP
18366: POP
// end ;
18367: PPOPN 3
18369: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18370: LD_EXP 48
18374: IFFALSE 18382
18376: PUSH
18377: LD_EXP 61
18381: AND
18382: IFFALSE 18501
18384: GO 18386
18386: DISABLE
18387: LD_INT 0
18389: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18390: LD_ADDR_VAR 0 1
18394: PUSH
18395: LD_INT 22
18397: PUSH
18398: LD_OWVAR 2
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 21
18409: PUSH
18410: LD_INT 1
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 3
18419: PUSH
18420: LD_INT 23
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: LIST
18438: PPUSH
18439: CALL_OW 69
18443: PUSH
18444: FOR_IN
18445: IFFALSE 18499
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18447: LD_VAR 0 1
18451: PPUSH
18452: CALL_OW 257
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: LD_INT 2
18462: PUSH
18463: LD_INT 3
18465: PUSH
18466: LD_INT 4
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: IN
18475: IFFALSE 18497
// SetClass ( un , rand ( 1 , 4 ) ) ;
18477: LD_VAR 0 1
18481: PPUSH
18482: LD_INT 1
18484: PPUSH
18485: LD_INT 4
18487: PPUSH
18488: CALL_OW 12
18492: PPUSH
18493: CALL_OW 336
18497: GO 18444
18499: POP
18500: POP
// end ;
18501: PPOPN 1
18503: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18504: LD_EXP 48
18508: IFFALSE 18516
18510: PUSH
18511: LD_EXP 60
18515: AND
18516: IFFALSE 18595
18518: GO 18520
18520: DISABLE
18521: LD_INT 0
18523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18524: LD_ADDR_VAR 0 1
18528: PUSH
18529: LD_INT 22
18531: PUSH
18532: LD_OWVAR 2
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 21
18543: PUSH
18544: LD_INT 3
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PPUSH
18555: CALL_OW 69
18559: ST_TO_ADDR
// if not tmp then
18560: LD_VAR 0 1
18564: NOT
18565: IFFALSE 18569
// exit ;
18567: GO 18595
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18569: LD_VAR 0 1
18573: PUSH
18574: LD_INT 1
18576: PPUSH
18577: LD_VAR 0 1
18581: PPUSH
18582: CALL_OW 12
18586: ARRAY
18587: PPUSH
18588: LD_INT 100
18590: PPUSH
18591: CALL_OW 234
// end ;
18595: PPOPN 1
18597: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18598: LD_EXP 48
18602: IFFALSE 18610
18604: PUSH
18605: LD_EXP 62
18609: AND
18610: IFFALSE 18708
18612: GO 18614
18614: DISABLE
18615: LD_INT 0
18617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18618: LD_ADDR_VAR 0 1
18622: PUSH
18623: LD_INT 22
18625: PUSH
18626: LD_OWVAR 2
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 21
18637: PUSH
18638: LD_INT 1
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PPUSH
18649: CALL_OW 69
18653: ST_TO_ADDR
// if not tmp then
18654: LD_VAR 0 1
18658: NOT
18659: IFFALSE 18663
// exit ;
18661: GO 18708
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18663: LD_VAR 0 1
18667: PUSH
18668: LD_INT 1
18670: PPUSH
18671: LD_VAR 0 1
18675: PPUSH
18676: CALL_OW 12
18680: ARRAY
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: LD_INT 4
18687: PPUSH
18688: CALL_OW 12
18692: PPUSH
18693: LD_INT 3000
18695: PPUSH
18696: LD_INT 9000
18698: PPUSH
18699: CALL_OW 12
18703: PPUSH
18704: CALL_OW 492
// end ;
18708: PPOPN 1
18710: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18711: LD_EXP 48
18715: IFFALSE 18723
18717: PUSH
18718: LD_EXP 63
18722: AND
18723: IFFALSE 18743
18725: GO 18727
18727: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18728: LD_INT 1
18730: PPUSH
18731: LD_OWVAR 2
18735: PPUSH
18736: LD_INT 0
18738: PPUSH
18739: CALL_OW 324
18743: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18744: LD_EXP 48
18748: IFFALSE 18756
18750: PUSH
18751: LD_EXP 64
18755: AND
18756: IFFALSE 18839
18758: GO 18760
18760: DISABLE
18761: LD_INT 0
18763: PPUSH
18764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18765: LD_ADDR_VAR 0 2
18769: PUSH
18770: LD_INT 22
18772: PUSH
18773: LD_OWVAR 2
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 21
18784: PUSH
18785: LD_INT 3
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PPUSH
18796: CALL_OW 69
18800: ST_TO_ADDR
// if not tmp then
18801: LD_VAR 0 2
18805: NOT
18806: IFFALSE 18810
// exit ;
18808: GO 18839
// for i in tmp do
18810: LD_ADDR_VAR 0 1
18814: PUSH
18815: LD_VAR 0 2
18819: PUSH
18820: FOR_IN
18821: IFFALSE 18837
// SetBLevel ( i , 10 ) ;
18823: LD_VAR 0 1
18827: PPUSH
18828: LD_INT 10
18830: PPUSH
18831: CALL_OW 241
18835: GO 18820
18837: POP
18838: POP
// end ;
18839: PPOPN 2
18841: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18842: LD_EXP 48
18846: IFFALSE 18854
18848: PUSH
18849: LD_EXP 65
18853: AND
18854: IFFALSE 18965
18856: GO 18858
18858: DISABLE
18859: LD_INT 0
18861: PPUSH
18862: PPUSH
18863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18864: LD_ADDR_VAR 0 3
18868: PUSH
18869: LD_INT 22
18871: PUSH
18872: LD_OWVAR 2
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 25
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PPUSH
18895: CALL_OW 69
18899: ST_TO_ADDR
// if not tmp then
18900: LD_VAR 0 3
18904: NOT
18905: IFFALSE 18909
// exit ;
18907: GO 18965
// un := tmp [ rand ( 1 , tmp ) ] ;
18909: LD_ADDR_VAR 0 2
18913: PUSH
18914: LD_VAR 0 3
18918: PUSH
18919: LD_INT 1
18921: PPUSH
18922: LD_VAR 0 3
18926: PPUSH
18927: CALL_OW 12
18931: ARRAY
18932: ST_TO_ADDR
// if Crawls ( un ) then
18933: LD_VAR 0 2
18937: PPUSH
18938: CALL_OW 318
18942: IFFALSE 18953
// ComWalk ( un ) ;
18944: LD_VAR 0 2
18948: PPUSH
18949: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18953: LD_VAR 0 2
18957: PPUSH
18958: LD_INT 5
18960: PPUSH
18961: CALL_OW 336
// end ;
18965: PPOPN 3
18967: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18968: LD_EXP 48
18972: IFFALSE 18980
18974: PUSH
18975: LD_EXP 66
18979: AND
18980: IFFALSE 18992
18982: PUSH
18983: LD_OWVAR 67
18987: PUSH
18988: LD_INT 4
18990: LESS
18991: AND
18992: IFFALSE 19011
18994: GO 18996
18996: DISABLE
// begin Difficulty := Difficulty + 1 ;
18997: LD_ADDR_OWVAR 67
19001: PUSH
19002: LD_OWVAR 67
19006: PUSH
19007: LD_INT 1
19009: PLUS
19010: ST_TO_ADDR
// end ;
19011: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19012: LD_EXP 48
19016: IFFALSE 19024
19018: PUSH
19019: LD_EXP 67
19023: AND
19024: IFFALSE 19127
19026: GO 19028
19028: DISABLE
19029: LD_INT 0
19031: PPUSH
// begin for i := 1 to 5 do
19032: LD_ADDR_VAR 0 1
19036: PUSH
19037: DOUBLE
19038: LD_INT 1
19040: DEC
19041: ST_TO_ADDR
19042: LD_INT 5
19044: PUSH
19045: FOR_TO
19046: IFFALSE 19125
// begin uc_nation := nation_nature ;
19048: LD_ADDR_OWVAR 21
19052: PUSH
19053: LD_INT 0
19055: ST_TO_ADDR
// uc_side := 0 ;
19056: LD_ADDR_OWVAR 20
19060: PUSH
19061: LD_INT 0
19063: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19064: LD_ADDR_OWVAR 29
19068: PUSH
19069: LD_INT 12
19071: PUSH
19072: LD_INT 12
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: ST_TO_ADDR
// hc_agressivity := 20 ;
19079: LD_ADDR_OWVAR 35
19083: PUSH
19084: LD_INT 20
19086: ST_TO_ADDR
// hc_class := class_tiger ;
19087: LD_ADDR_OWVAR 28
19091: PUSH
19092: LD_INT 14
19094: ST_TO_ADDR
// hc_gallery :=  ;
19095: LD_ADDR_OWVAR 33
19099: PUSH
19100: LD_STRING 
19102: ST_TO_ADDR
// hc_name :=  ;
19103: LD_ADDR_OWVAR 26
19107: PUSH
19108: LD_STRING 
19110: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19111: CALL_OW 44
19115: PPUSH
19116: LD_INT 0
19118: PPUSH
19119: CALL_OW 51
// end ;
19123: GO 19045
19125: POP
19126: POP
// end ;
19127: PPOPN 1
19129: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19130: LD_EXP 48
19134: IFFALSE 19142
19136: PUSH
19137: LD_EXP 68
19141: AND
19142: IFFALSE 19151
19144: GO 19146
19146: DISABLE
// StreamSibBomb ;
19147: CALL 19152 0 0
19151: END
// export function StreamSibBomb ; var i , x , y ; begin
19152: LD_INT 0
19154: PPUSH
19155: PPUSH
19156: PPUSH
19157: PPUSH
// result := false ;
19158: LD_ADDR_VAR 0 1
19162: PUSH
19163: LD_INT 0
19165: ST_TO_ADDR
// for i := 1 to 16 do
19166: LD_ADDR_VAR 0 2
19170: PUSH
19171: DOUBLE
19172: LD_INT 1
19174: DEC
19175: ST_TO_ADDR
19176: LD_INT 16
19178: PUSH
19179: FOR_TO
19180: IFFALSE 19379
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19182: LD_ADDR_VAR 0 3
19186: PUSH
19187: LD_INT 10
19189: PUSH
19190: LD_INT 20
19192: PUSH
19193: LD_INT 30
19195: PUSH
19196: LD_INT 40
19198: PUSH
19199: LD_INT 50
19201: PUSH
19202: LD_INT 60
19204: PUSH
19205: LD_INT 70
19207: PUSH
19208: LD_INT 80
19210: PUSH
19211: LD_INT 90
19213: PUSH
19214: LD_INT 100
19216: PUSH
19217: LD_INT 110
19219: PUSH
19220: LD_INT 120
19222: PUSH
19223: LD_INT 130
19225: PUSH
19226: LD_INT 140
19228: PUSH
19229: LD_INT 150
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 1
19251: PPUSH
19252: LD_INT 15
19254: PPUSH
19255: CALL_OW 12
19259: ARRAY
19260: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19261: LD_ADDR_VAR 0 4
19265: PUSH
19266: LD_INT 10
19268: PUSH
19269: LD_INT 20
19271: PUSH
19272: LD_INT 30
19274: PUSH
19275: LD_INT 40
19277: PUSH
19278: LD_INT 50
19280: PUSH
19281: LD_INT 60
19283: PUSH
19284: LD_INT 70
19286: PUSH
19287: LD_INT 80
19289: PUSH
19290: LD_INT 90
19292: PUSH
19293: LD_INT 100
19295: PUSH
19296: LD_INT 110
19298: PUSH
19299: LD_INT 120
19301: PUSH
19302: LD_INT 130
19304: PUSH
19305: LD_INT 140
19307: PUSH
19308: LD_INT 150
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 1
19330: PPUSH
19331: LD_INT 15
19333: PPUSH
19334: CALL_OW 12
19338: ARRAY
19339: ST_TO_ADDR
// if ValidHex ( x , y ) then
19340: LD_VAR 0 3
19344: PPUSH
19345: LD_VAR 0 4
19349: PPUSH
19350: CALL_OW 488
19354: IFFALSE 19377
// begin result := [ x , y ] ;
19356: LD_ADDR_VAR 0 1
19360: PUSH
19361: LD_VAR 0 3
19365: PUSH
19366: LD_VAR 0 4
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: ST_TO_ADDR
// break ;
19375: GO 19379
// end ; end ;
19377: GO 19179
19379: POP
19380: POP
// if result then
19381: LD_VAR 0 1
19385: IFFALSE 19445
// begin ToLua ( playSibBomb() ) ;
19387: LD_STRING playSibBomb()
19389: PPUSH
19390: CALL_OW 559
// wait ( 0 0$14 ) ;
19394: LD_INT 490
19396: PPUSH
19397: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19401: LD_VAR 0 1
19405: PUSH
19406: LD_INT 1
19408: ARRAY
19409: PPUSH
19410: LD_VAR 0 1
19414: PUSH
19415: LD_INT 2
19417: ARRAY
19418: PPUSH
19419: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19423: LD_VAR 0 1
19427: PUSH
19428: LD_INT 1
19430: ARRAY
19431: PPUSH
19432: LD_VAR 0 1
19436: PUSH
19437: LD_INT 2
19439: ARRAY
19440: PPUSH
19441: CALL_OW 429
// end ; end ;
19445: LD_VAR 0 1
19449: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19450: LD_EXP 48
19454: IFFALSE 19462
19456: PUSH
19457: LD_EXP 70
19461: AND
19462: IFFALSE 19474
19464: GO 19466
19466: DISABLE
// YouLost (  ) ;
19467: LD_STRING 
19469: PPUSH
19470: CALL_OW 104
19474: END
// every 0 0$1 trigger StreamModeActive and sFog do
19475: LD_EXP 48
19479: IFFALSE 19487
19481: PUSH
19482: LD_EXP 69
19486: AND
19487: IFFALSE 19501
19489: GO 19491
19491: DISABLE
// FogOff ( your_side ) ;
19492: LD_OWVAR 2
19496: PPUSH
19497: CALL_OW 344
19501: END
// every 0 0$1 trigger StreamModeActive and sSun do
19502: LD_EXP 48
19506: IFFALSE 19514
19508: PUSH
19509: LD_EXP 71
19513: AND
19514: IFFALSE 19542
19516: GO 19518
19518: DISABLE
// begin solar_recharge_percent := 0 ;
19519: LD_ADDR_OWVAR 79
19523: PUSH
19524: LD_INT 0
19526: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19527: LD_INT 10500
19529: PPUSH
19530: CALL_OW 67
// solar_recharge_percent := 100 ;
19534: LD_ADDR_OWVAR 79
19538: PUSH
19539: LD_INT 100
19541: ST_TO_ADDR
// end ;
19542: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19543: LD_EXP 48
19547: IFFALSE 19555
19549: PUSH
19550: LD_EXP 72
19554: AND
19555: IFFALSE 19794
19557: GO 19559
19559: DISABLE
19560: LD_INT 0
19562: PPUSH
19563: PPUSH
19564: PPUSH
// begin tmp := [ ] ;
19565: LD_ADDR_VAR 0 3
19569: PUSH
19570: EMPTY
19571: ST_TO_ADDR
// for i := 1 to 6 do
19572: LD_ADDR_VAR 0 1
19576: PUSH
19577: DOUBLE
19578: LD_INT 1
19580: DEC
19581: ST_TO_ADDR
19582: LD_INT 6
19584: PUSH
19585: FOR_TO
19586: IFFALSE 19691
// begin uc_nation := nation_nature ;
19588: LD_ADDR_OWVAR 21
19592: PUSH
19593: LD_INT 0
19595: ST_TO_ADDR
// uc_side := 0 ;
19596: LD_ADDR_OWVAR 20
19600: PUSH
19601: LD_INT 0
19603: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19604: LD_ADDR_OWVAR 29
19608: PUSH
19609: LD_INT 12
19611: PUSH
19612: LD_INT 12
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: ST_TO_ADDR
// hc_agressivity := 20 ;
19619: LD_ADDR_OWVAR 35
19623: PUSH
19624: LD_INT 20
19626: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19627: LD_ADDR_OWVAR 28
19631: PUSH
19632: LD_INT 17
19634: ST_TO_ADDR
// hc_gallery :=  ;
19635: LD_ADDR_OWVAR 33
19639: PUSH
19640: LD_STRING 
19642: ST_TO_ADDR
// hc_name :=  ;
19643: LD_ADDR_OWVAR 26
19647: PUSH
19648: LD_STRING 
19650: ST_TO_ADDR
// un := CreateHuman ;
19651: LD_ADDR_VAR 0 2
19655: PUSH
19656: CALL_OW 44
19660: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19661: LD_VAR 0 2
19665: PPUSH
19666: LD_INT 1
19668: PPUSH
19669: CALL_OW 51
// tmp := tmp ^ un ;
19673: LD_ADDR_VAR 0 3
19677: PUSH
19678: LD_VAR 0 3
19682: PUSH
19683: LD_VAR 0 2
19687: ADD
19688: ST_TO_ADDR
// end ;
19689: GO 19585
19691: POP
19692: POP
// repeat wait ( 0 0$1 ) ;
19693: LD_INT 35
19695: PPUSH
19696: CALL_OW 67
// for un in tmp do
19700: LD_ADDR_VAR 0 2
19704: PUSH
19705: LD_VAR 0 3
19709: PUSH
19710: FOR_IN
19711: IFFALSE 19785
// begin if IsDead ( un ) then
19713: LD_VAR 0 2
19717: PPUSH
19718: CALL_OW 301
19722: IFFALSE 19742
// begin tmp := tmp diff un ;
19724: LD_ADDR_VAR 0 3
19728: PUSH
19729: LD_VAR 0 3
19733: PUSH
19734: LD_VAR 0 2
19738: DIFF
19739: ST_TO_ADDR
// continue ;
19740: GO 19710
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19742: LD_VAR 0 2
19746: PPUSH
19747: LD_INT 3
19749: PUSH
19750: LD_INT 22
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PPUSH
19764: CALL_OW 69
19768: PPUSH
19769: LD_VAR 0 2
19773: PPUSH
19774: CALL_OW 74
19778: PPUSH
19779: CALL_OW 115
// end ;
19783: GO 19710
19785: POP
19786: POP
// until not tmp ;
19787: LD_VAR 0 3
19791: NOT
19792: IFFALSE 19693
// end ;
19794: PPOPN 3
19796: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19797: LD_EXP 48
19801: IFFALSE 19809
19803: PUSH
19804: LD_EXP 73
19808: AND
19809: IFFALSE 19863
19811: GO 19813
19813: DISABLE
// begin ToLua ( displayTroll(); ) ;
19814: LD_STRING displayTroll();
19816: PPUSH
19817: CALL_OW 559
// wait ( 3 3$00 ) ;
19821: LD_INT 6300
19823: PPUSH
19824: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19828: LD_STRING hideTroll();
19830: PPUSH
19831: CALL_OW 559
// wait ( 1 1$00 ) ;
19835: LD_INT 2100
19837: PPUSH
19838: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19842: LD_STRING displayTroll();
19844: PPUSH
19845: CALL_OW 559
// wait ( 1 1$00 ) ;
19849: LD_INT 2100
19851: PPUSH
19852: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19856: LD_STRING hideTroll();
19858: PPUSH
19859: CALL_OW 559
// end ;
19863: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19864: LD_EXP 48
19868: IFFALSE 19876
19870: PUSH
19871: LD_EXP 74
19875: AND
19876: IFFALSE 19939
19878: GO 19880
19880: DISABLE
19881: LD_INT 0
19883: PPUSH
// begin p := 0 ;
19884: LD_ADDR_VAR 0 1
19888: PUSH
19889: LD_INT 0
19891: ST_TO_ADDR
// repeat game_speed := 1 ;
19892: LD_ADDR_OWVAR 65
19896: PUSH
19897: LD_INT 1
19899: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19900: LD_INT 35
19902: PPUSH
19903: CALL_OW 67
// p := p + 1 ;
19907: LD_ADDR_VAR 0 1
19911: PUSH
19912: LD_VAR 0 1
19916: PUSH
19917: LD_INT 1
19919: PLUS
19920: ST_TO_ADDR
// until p >= 60 ;
19921: LD_VAR 0 1
19925: PUSH
19926: LD_INT 60
19928: GREATEREQUAL
19929: IFFALSE 19892
// game_speed := 4 ;
19931: LD_ADDR_OWVAR 65
19935: PUSH
19936: LD_INT 4
19938: ST_TO_ADDR
// end ;
19939: PPOPN 1
19941: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19942: LD_EXP 48
19946: IFFALSE 19954
19948: PUSH
19949: LD_EXP 75
19953: AND
19954: IFFALSE 20100
19956: GO 19958
19958: DISABLE
19959: LD_INT 0
19961: PPUSH
19962: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19963: LD_ADDR_VAR 0 1
19967: PUSH
19968: LD_INT 22
19970: PUSH
19971: LD_OWVAR 2
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 2
19982: PUSH
19983: LD_INT 30
19985: PUSH
19986: LD_INT 0
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 30
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: LIST
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PPUSH
20012: CALL_OW 69
20016: ST_TO_ADDR
// if not depot then
20017: LD_VAR 0 1
20021: NOT
20022: IFFALSE 20026
// exit ;
20024: GO 20100
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20026: LD_ADDR_VAR 0 2
20030: PUSH
20031: LD_VAR 0 1
20035: PUSH
20036: LD_INT 1
20038: PPUSH
20039: LD_VAR 0 1
20043: PPUSH
20044: CALL_OW 12
20048: ARRAY
20049: PPUSH
20050: CALL_OW 274
20054: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20055: LD_VAR 0 2
20059: PPUSH
20060: LD_INT 1
20062: PPUSH
20063: LD_INT 0
20065: PPUSH
20066: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20070: LD_VAR 0 2
20074: PPUSH
20075: LD_INT 2
20077: PPUSH
20078: LD_INT 0
20080: PPUSH
20081: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20085: LD_VAR 0 2
20089: PPUSH
20090: LD_INT 3
20092: PPUSH
20093: LD_INT 0
20095: PPUSH
20096: CALL_OW 277
// end ;
20100: PPOPN 2
20102: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20103: LD_EXP 48
20107: IFFALSE 20115
20109: PUSH
20110: LD_EXP 76
20114: AND
20115: IFFALSE 20212
20117: GO 20119
20119: DISABLE
20120: LD_INT 0
20122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20123: LD_ADDR_VAR 0 1
20127: PUSH
20128: LD_INT 22
20130: PUSH
20131: LD_OWVAR 2
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 21
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 3
20152: PUSH
20153: LD_INT 23
20155: PUSH
20156: LD_INT 0
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: PPUSH
20172: CALL_OW 69
20176: ST_TO_ADDR
// if not tmp then
20177: LD_VAR 0 1
20181: NOT
20182: IFFALSE 20186
// exit ;
20184: GO 20212
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20186: LD_VAR 0 1
20190: PUSH
20191: LD_INT 1
20193: PPUSH
20194: LD_VAR 0 1
20198: PPUSH
20199: CALL_OW 12
20203: ARRAY
20204: PPUSH
20205: LD_INT 200
20207: PPUSH
20208: CALL_OW 234
// end ;
20212: PPOPN 1
20214: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20215: LD_EXP 48
20219: IFFALSE 20227
20221: PUSH
20222: LD_EXP 77
20226: AND
20227: IFFALSE 20306
20229: GO 20231
20231: DISABLE
20232: LD_INT 0
20234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20235: LD_ADDR_VAR 0 1
20239: PUSH
20240: LD_INT 22
20242: PUSH
20243: LD_OWVAR 2
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 21
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PPUSH
20266: CALL_OW 69
20270: ST_TO_ADDR
// if not tmp then
20271: LD_VAR 0 1
20275: NOT
20276: IFFALSE 20280
// exit ;
20278: GO 20306
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20280: LD_VAR 0 1
20284: PUSH
20285: LD_INT 1
20287: PPUSH
20288: LD_VAR 0 1
20292: PPUSH
20293: CALL_OW 12
20297: ARRAY
20298: PPUSH
20299: LD_INT 60
20301: PPUSH
20302: CALL_OW 234
// end ;
20306: PPOPN 1
20308: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20309: LD_EXP 48
20313: IFFALSE 20321
20315: PUSH
20316: LD_EXP 78
20320: AND
20321: IFFALSE 20420
20323: GO 20325
20325: DISABLE
20326: LD_INT 0
20328: PPUSH
20329: PPUSH
// begin enable ;
20330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20331: LD_ADDR_VAR 0 1
20335: PUSH
20336: LD_INT 22
20338: PUSH
20339: LD_OWVAR 2
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 61
20350: PUSH
20351: EMPTY
20352: LIST
20353: PUSH
20354: LD_INT 33
20356: PUSH
20357: LD_INT 2
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: LIST
20368: PPUSH
20369: CALL_OW 69
20373: ST_TO_ADDR
// if not tmp then
20374: LD_VAR 0 1
20378: NOT
20379: IFFALSE 20383
// exit ;
20381: GO 20420
// for i in tmp do
20383: LD_ADDR_VAR 0 2
20387: PUSH
20388: LD_VAR 0 1
20392: PUSH
20393: FOR_IN
20394: IFFALSE 20418
// if IsControledBy ( i ) then
20396: LD_VAR 0 2
20400: PPUSH
20401: CALL_OW 312
20405: IFFALSE 20416
// ComUnlink ( i ) ;
20407: LD_VAR 0 2
20411: PPUSH
20412: CALL_OW 136
20416: GO 20393
20418: POP
20419: POP
// end ;
20420: PPOPN 2
20422: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20423: LD_EXP 48
20427: IFFALSE 20435
20429: PUSH
20430: LD_EXP 79
20434: AND
20435: IFFALSE 20575
20437: GO 20439
20439: DISABLE
20440: LD_INT 0
20442: PPUSH
20443: PPUSH
// begin ToLua ( displayPowell(); ) ;
20444: LD_STRING displayPowell();
20446: PPUSH
20447: CALL_OW 559
// uc_side := 0 ;
20451: LD_ADDR_OWVAR 20
20455: PUSH
20456: LD_INT 0
20458: ST_TO_ADDR
// uc_nation := 2 ;
20459: LD_ADDR_OWVAR 21
20463: PUSH
20464: LD_INT 2
20466: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20467: LD_ADDR_OWVAR 37
20471: PUSH
20472: LD_INT 14
20474: ST_TO_ADDR
// vc_engine := engine_siberite ;
20475: LD_ADDR_OWVAR 39
20479: PUSH
20480: LD_INT 3
20482: ST_TO_ADDR
// vc_control := control_apeman ;
20483: LD_ADDR_OWVAR 38
20487: PUSH
20488: LD_INT 5
20490: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20491: LD_ADDR_OWVAR 40
20495: PUSH
20496: LD_INT 29
20498: ST_TO_ADDR
// un := CreateVehicle ;
20499: LD_ADDR_VAR 0 2
20503: PUSH
20504: CALL_OW 45
20508: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20509: LD_VAR 0 2
20513: PPUSH
20514: LD_INT 1
20516: PPUSH
20517: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20521: LD_INT 35
20523: PPUSH
20524: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20528: LD_VAR 0 2
20532: PPUSH
20533: LD_INT 22
20535: PUSH
20536: LD_OWVAR 2
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PPUSH
20545: CALL_OW 69
20549: PPUSH
20550: LD_VAR 0 2
20554: PPUSH
20555: CALL_OW 74
20559: PPUSH
20560: CALL_OW 115
// until IsDead ( un ) ;
20564: LD_VAR 0 2
20568: PPUSH
20569: CALL_OW 301
20573: IFFALSE 20521
// end ;
20575: PPOPN 2
20577: END
// every 0 0$1 trigger StreamModeActive and sStu do
20578: LD_EXP 48
20582: IFFALSE 20590
20584: PUSH
20585: LD_EXP 87
20589: AND
20590: IFFALSE 20606
20592: GO 20594
20594: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20595: LD_STRING displayStucuk();
20597: PPUSH
20598: CALL_OW 559
// ResetFog ;
20602: CALL_OW 335
// end ;
20606: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20607: LD_EXP 48
20611: IFFALSE 20619
20613: PUSH
20614: LD_EXP 80
20618: AND
20619: IFFALSE 20760
20621: GO 20623
20623: DISABLE
20624: LD_INT 0
20626: PPUSH
20627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20628: LD_ADDR_VAR 0 2
20632: PUSH
20633: LD_INT 22
20635: PUSH
20636: LD_OWVAR 2
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 21
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PPUSH
20659: CALL_OW 69
20663: ST_TO_ADDR
// if not tmp then
20664: LD_VAR 0 2
20668: NOT
20669: IFFALSE 20673
// exit ;
20671: GO 20760
// un := tmp [ rand ( 1 , tmp ) ] ;
20673: LD_ADDR_VAR 0 1
20677: PUSH
20678: LD_VAR 0 2
20682: PUSH
20683: LD_INT 1
20685: PPUSH
20686: LD_VAR 0 2
20690: PPUSH
20691: CALL_OW 12
20695: ARRAY
20696: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20697: LD_VAR 0 1
20701: PPUSH
20702: LD_INT 0
20704: PPUSH
20705: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20709: LD_VAR 0 1
20713: PPUSH
20714: LD_OWVAR 3
20718: PUSH
20719: LD_VAR 0 1
20723: DIFF
20724: PPUSH
20725: LD_VAR 0 1
20729: PPUSH
20730: CALL_OW 74
20734: PPUSH
20735: CALL_OW 115
// wait ( 0 0$20 ) ;
20739: LD_INT 700
20741: PPUSH
20742: CALL_OW 67
// SetSide ( un , your_side ) ;
20746: LD_VAR 0 1
20750: PPUSH
20751: LD_OWVAR 2
20755: PPUSH
20756: CALL_OW 235
// end ;
20760: PPOPN 2
20762: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20763: LD_EXP 48
20767: IFFALSE 20775
20769: PUSH
20770: LD_EXP 81
20774: AND
20775: IFFALSE 20881
20777: GO 20779
20779: DISABLE
20780: LD_INT 0
20782: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20783: LD_ADDR_VAR 0 1
20787: PUSH
20788: LD_INT 22
20790: PUSH
20791: LD_OWVAR 2
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 2
20802: PUSH
20803: LD_INT 30
20805: PUSH
20806: LD_INT 0
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 30
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PPUSH
20832: CALL_OW 69
20836: ST_TO_ADDR
// if not depot then
20837: LD_VAR 0 1
20841: NOT
20842: IFFALSE 20846
// exit ;
20844: GO 20881
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20846: LD_VAR 0 1
20850: PUSH
20851: LD_INT 1
20853: ARRAY
20854: PPUSH
20855: CALL_OW 250
20859: PPUSH
20860: LD_VAR 0 1
20864: PUSH
20865: LD_INT 1
20867: ARRAY
20868: PPUSH
20869: CALL_OW 251
20873: PPUSH
20874: LD_INT 70
20876: PPUSH
20877: CALL_OW 495
// end ;
20881: PPOPN 1
20883: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20884: LD_EXP 48
20888: IFFALSE 20896
20890: PUSH
20891: LD_EXP 82
20895: AND
20896: IFFALSE 21107
20898: GO 20900
20900: DISABLE
20901: LD_INT 0
20903: PPUSH
20904: PPUSH
20905: PPUSH
20906: PPUSH
20907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20908: LD_ADDR_VAR 0 5
20912: PUSH
20913: LD_INT 22
20915: PUSH
20916: LD_OWVAR 2
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 21
20927: PUSH
20928: LD_INT 1
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PPUSH
20939: CALL_OW 69
20943: ST_TO_ADDR
// if not tmp then
20944: LD_VAR 0 5
20948: NOT
20949: IFFALSE 20953
// exit ;
20951: GO 21107
// for i in tmp do
20953: LD_ADDR_VAR 0 1
20957: PUSH
20958: LD_VAR 0 5
20962: PUSH
20963: FOR_IN
20964: IFFALSE 21105
// begin d := rand ( 0 , 5 ) ;
20966: LD_ADDR_VAR 0 4
20970: PUSH
20971: LD_INT 0
20973: PPUSH
20974: LD_INT 5
20976: PPUSH
20977: CALL_OW 12
20981: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20982: LD_ADDR_VAR 0 2
20986: PUSH
20987: LD_VAR 0 1
20991: PPUSH
20992: CALL_OW 250
20996: PPUSH
20997: LD_VAR 0 4
21001: PPUSH
21002: LD_INT 3
21004: PPUSH
21005: LD_INT 12
21007: PPUSH
21008: CALL_OW 12
21012: PPUSH
21013: CALL_OW 272
21017: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21018: LD_ADDR_VAR 0 3
21022: PUSH
21023: LD_VAR 0 1
21027: PPUSH
21028: CALL_OW 251
21032: PPUSH
21033: LD_VAR 0 4
21037: PPUSH
21038: LD_INT 3
21040: PPUSH
21041: LD_INT 12
21043: PPUSH
21044: CALL_OW 12
21048: PPUSH
21049: CALL_OW 273
21053: ST_TO_ADDR
// if ValidHex ( x , y ) then
21054: LD_VAR 0 2
21058: PPUSH
21059: LD_VAR 0 3
21063: PPUSH
21064: CALL_OW 488
21068: IFFALSE 21103
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21070: LD_VAR 0 1
21074: PPUSH
21075: LD_VAR 0 2
21079: PPUSH
21080: LD_VAR 0 3
21084: PPUSH
21085: LD_INT 3
21087: PPUSH
21088: LD_INT 6
21090: PPUSH
21091: CALL_OW 12
21095: PPUSH
21096: LD_INT 1
21098: PPUSH
21099: CALL_OW 483
// end ;
21103: GO 20963
21105: POP
21106: POP
// end ;
21107: PPOPN 5
21109: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21110: LD_EXP 48
21114: IFFALSE 21122
21116: PUSH
21117: LD_EXP 83
21121: AND
21122: IFFALSE 21216
21124: GO 21126
21126: DISABLE
21127: LD_INT 0
21129: PPUSH
21130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21131: LD_ADDR_VAR 0 2
21135: PUSH
21136: LD_INT 22
21138: PUSH
21139: LD_OWVAR 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 32
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 21
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: LIST
21172: PPUSH
21173: CALL_OW 69
21177: ST_TO_ADDR
// if not tmp then
21178: LD_VAR 0 2
21182: NOT
21183: IFFALSE 21187
// exit ;
21185: GO 21216
// for i in tmp do
21187: LD_ADDR_VAR 0 1
21191: PUSH
21192: LD_VAR 0 2
21196: PUSH
21197: FOR_IN
21198: IFFALSE 21214
// SetFuel ( i , 0 ) ;
21200: LD_VAR 0 1
21204: PPUSH
21205: LD_INT 0
21207: PPUSH
21208: CALL_OW 240
21212: GO 21197
21214: POP
21215: POP
// end ;
21216: PPOPN 2
21218: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21219: LD_EXP 48
21223: IFFALSE 21231
21225: PUSH
21226: LD_EXP 84
21230: AND
21231: IFFALSE 21297
21233: GO 21235
21235: DISABLE
21236: LD_INT 0
21238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21239: LD_ADDR_VAR 0 1
21243: PUSH
21244: LD_INT 22
21246: PUSH
21247: LD_OWVAR 2
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 30
21258: PUSH
21259: LD_INT 29
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PPUSH
21270: CALL_OW 69
21274: ST_TO_ADDR
// if not tmp then
21275: LD_VAR 0 1
21279: NOT
21280: IFFALSE 21284
// exit ;
21282: GO 21297
// DestroyUnit ( tmp [ 1 ] ) ;
21284: LD_VAR 0 1
21288: PUSH
21289: LD_INT 1
21291: ARRAY
21292: PPUSH
21293: CALL_OW 65
// end ;
21297: PPOPN 1
21299: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21300: LD_EXP 48
21304: IFFALSE 21312
21306: PUSH
21307: LD_EXP 86
21311: AND
21312: IFFALSE 21441
21314: GO 21316
21316: DISABLE
21317: LD_INT 0
21319: PPUSH
// begin uc_side := 0 ;
21320: LD_ADDR_OWVAR 20
21324: PUSH
21325: LD_INT 0
21327: ST_TO_ADDR
// uc_nation := nation_arabian ;
21328: LD_ADDR_OWVAR 21
21332: PUSH
21333: LD_INT 2
21335: ST_TO_ADDR
// hc_gallery :=  ;
21336: LD_ADDR_OWVAR 33
21340: PUSH
21341: LD_STRING 
21343: ST_TO_ADDR
// hc_name :=  ;
21344: LD_ADDR_OWVAR 26
21348: PUSH
21349: LD_STRING 
21351: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21352: LD_INT 1
21354: PPUSH
21355: LD_INT 11
21357: PPUSH
21358: LD_INT 10
21360: PPUSH
21361: CALL_OW 380
// un := CreateHuman ;
21365: LD_ADDR_VAR 0 1
21369: PUSH
21370: CALL_OW 44
21374: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21375: LD_VAR 0 1
21379: PPUSH
21380: LD_INT 1
21382: PPUSH
21383: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21387: LD_INT 35
21389: PPUSH
21390: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21394: LD_VAR 0 1
21398: PPUSH
21399: LD_INT 22
21401: PUSH
21402: LD_OWVAR 2
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PPUSH
21411: CALL_OW 69
21415: PPUSH
21416: LD_VAR 0 1
21420: PPUSH
21421: CALL_OW 74
21425: PPUSH
21426: CALL_OW 115
// until IsDead ( un ) ;
21430: LD_VAR 0 1
21434: PPUSH
21435: CALL_OW 301
21439: IFFALSE 21387
// end ;
21441: PPOPN 1
21443: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21444: LD_EXP 48
21448: IFFALSE 21456
21450: PUSH
21451: LD_EXP 88
21455: AND
21456: IFFALSE 21468
21458: GO 21460
21460: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21461: LD_STRING earthquake(getX(game), 0, 32)
21463: PPUSH
21464: CALL_OW 559
21468: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21469: LD_EXP 48
21473: IFFALSE 21481
21475: PUSH
21476: LD_EXP 89
21480: AND
21481: IFFALSE 21572
21483: GO 21485
21485: DISABLE
21486: LD_INT 0
21488: PPUSH
// begin enable ;
21489: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21490: LD_ADDR_VAR 0 1
21494: PUSH
21495: LD_INT 22
21497: PUSH
21498: LD_OWVAR 2
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 21
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 33
21519: PUSH
21520: LD_INT 3
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: PPUSH
21532: CALL_OW 69
21536: ST_TO_ADDR
// if not tmp then
21537: LD_VAR 0 1
21541: NOT
21542: IFFALSE 21546
// exit ;
21544: GO 21572
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21546: LD_VAR 0 1
21550: PUSH
21551: LD_INT 1
21553: PPUSH
21554: LD_VAR 0 1
21558: PPUSH
21559: CALL_OW 12
21563: ARRAY
21564: PPUSH
21565: LD_INT 1
21567: PPUSH
21568: CALL_OW 234
// end ;
21572: PPOPN 1
21574: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21575: LD_EXP 48
21579: IFFALSE 21587
21581: PUSH
21582: LD_EXP 90
21586: AND
21587: IFFALSE 21728
21589: GO 21591
21591: DISABLE
21592: LD_INT 0
21594: PPUSH
21595: PPUSH
21596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21597: LD_ADDR_VAR 0 3
21601: PUSH
21602: LD_INT 22
21604: PUSH
21605: LD_OWVAR 2
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 25
21616: PUSH
21617: LD_INT 1
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PPUSH
21628: CALL_OW 69
21632: ST_TO_ADDR
// if not tmp then
21633: LD_VAR 0 3
21637: NOT
21638: IFFALSE 21642
// exit ;
21640: GO 21728
// un := tmp [ rand ( 1 , tmp ) ] ;
21642: LD_ADDR_VAR 0 2
21646: PUSH
21647: LD_VAR 0 3
21651: PUSH
21652: LD_INT 1
21654: PPUSH
21655: LD_VAR 0 3
21659: PPUSH
21660: CALL_OW 12
21664: ARRAY
21665: ST_TO_ADDR
// if Crawls ( un ) then
21666: LD_VAR 0 2
21670: PPUSH
21671: CALL_OW 318
21675: IFFALSE 21686
// ComWalk ( un ) ;
21677: LD_VAR 0 2
21681: PPUSH
21682: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21686: LD_VAR 0 2
21690: PPUSH
21691: LD_INT 9
21693: PPUSH
21694: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21698: LD_INT 28
21700: PPUSH
21701: LD_OWVAR 2
21705: PPUSH
21706: LD_INT 2
21708: PPUSH
21709: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21713: LD_INT 29
21715: PPUSH
21716: LD_OWVAR 2
21720: PPUSH
21721: LD_INT 2
21723: PPUSH
21724: CALL_OW 322
// end ;
21728: PPOPN 3
21730: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21731: LD_EXP 48
21735: IFFALSE 21743
21737: PUSH
21738: LD_EXP 91
21742: AND
21743: IFFALSE 21854
21745: GO 21747
21747: DISABLE
21748: LD_INT 0
21750: PPUSH
21751: PPUSH
21752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21753: LD_ADDR_VAR 0 3
21757: PUSH
21758: LD_INT 22
21760: PUSH
21761: LD_OWVAR 2
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 25
21772: PUSH
21773: LD_INT 1
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PPUSH
21784: CALL_OW 69
21788: ST_TO_ADDR
// if not tmp then
21789: LD_VAR 0 3
21793: NOT
21794: IFFALSE 21798
// exit ;
21796: GO 21854
// un := tmp [ rand ( 1 , tmp ) ] ;
21798: LD_ADDR_VAR 0 2
21802: PUSH
21803: LD_VAR 0 3
21807: PUSH
21808: LD_INT 1
21810: PPUSH
21811: LD_VAR 0 3
21815: PPUSH
21816: CALL_OW 12
21820: ARRAY
21821: ST_TO_ADDR
// if Crawls ( un ) then
21822: LD_VAR 0 2
21826: PPUSH
21827: CALL_OW 318
21831: IFFALSE 21842
// ComWalk ( un ) ;
21833: LD_VAR 0 2
21837: PPUSH
21838: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21842: LD_VAR 0 2
21846: PPUSH
21847: LD_INT 8
21849: PPUSH
21850: CALL_OW 336
// end ;
21854: PPOPN 3
21856: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21857: LD_EXP 48
21861: IFFALSE 21869
21863: PUSH
21864: LD_EXP 92
21868: AND
21869: IFFALSE 22013
21871: GO 21873
21873: DISABLE
21874: LD_INT 0
21876: PPUSH
21877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21878: LD_ADDR_VAR 0 2
21882: PUSH
21883: LD_INT 22
21885: PUSH
21886: LD_OWVAR 2
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 21
21897: PUSH
21898: LD_INT 2
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 2
21907: PUSH
21908: LD_INT 34
21910: PUSH
21911: LD_INT 12
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 34
21920: PUSH
21921: LD_INT 51
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 34
21930: PUSH
21931: LD_INT 32
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: LIST
21948: PPUSH
21949: CALL_OW 69
21953: ST_TO_ADDR
// if not tmp then
21954: LD_VAR 0 2
21958: NOT
21959: IFFALSE 21963
// exit ;
21961: GO 22013
// for i in tmp do
21963: LD_ADDR_VAR 0 1
21967: PUSH
21968: LD_VAR 0 2
21972: PUSH
21973: FOR_IN
21974: IFFALSE 22011
// if GetCargo ( i , mat_artifact ) = 0 then
21976: LD_VAR 0 1
21980: PPUSH
21981: LD_INT 4
21983: PPUSH
21984: CALL_OW 289
21988: PUSH
21989: LD_INT 0
21991: EQUAL
21992: IFFALSE 22009
// SetCargo ( i , mat_siberit , 100 ) ;
21994: LD_VAR 0 1
21998: PPUSH
21999: LD_INT 3
22001: PPUSH
22002: LD_INT 100
22004: PPUSH
22005: CALL_OW 290
22009: GO 21973
22011: POP
22012: POP
// end ;
22013: PPOPN 2
22015: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22016: LD_EXP 48
22020: IFFALSE 22028
22022: PUSH
22023: LD_EXP 93
22027: AND
22028: IFFALSE 22211
22030: GO 22032
22032: DISABLE
22033: LD_INT 0
22035: PPUSH
22036: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22037: LD_ADDR_VAR 0 2
22041: PUSH
22042: LD_INT 22
22044: PUSH
22045: LD_OWVAR 2
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PPUSH
22054: CALL_OW 69
22058: ST_TO_ADDR
// if not tmp then
22059: LD_VAR 0 2
22063: NOT
22064: IFFALSE 22068
// exit ;
22066: GO 22211
// for i := 1 to 2 do
22068: LD_ADDR_VAR 0 1
22072: PUSH
22073: DOUBLE
22074: LD_INT 1
22076: DEC
22077: ST_TO_ADDR
22078: LD_INT 2
22080: PUSH
22081: FOR_TO
22082: IFFALSE 22209
// begin uc_side := your_side ;
22084: LD_ADDR_OWVAR 20
22088: PUSH
22089: LD_OWVAR 2
22093: ST_TO_ADDR
// uc_nation := nation_american ;
22094: LD_ADDR_OWVAR 21
22098: PUSH
22099: LD_INT 1
22101: ST_TO_ADDR
// vc_chassis := us_morphling ;
22102: LD_ADDR_OWVAR 37
22106: PUSH
22107: LD_INT 5
22109: ST_TO_ADDR
// vc_engine := engine_siberite ;
22110: LD_ADDR_OWVAR 39
22114: PUSH
22115: LD_INT 3
22117: ST_TO_ADDR
// vc_control := control_computer ;
22118: LD_ADDR_OWVAR 38
22122: PUSH
22123: LD_INT 3
22125: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22126: LD_ADDR_OWVAR 40
22130: PUSH
22131: LD_INT 10
22133: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22134: LD_VAR 0 2
22138: PUSH
22139: LD_INT 1
22141: ARRAY
22142: PPUSH
22143: CALL_OW 310
22147: NOT
22148: IFFALSE 22195
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22150: CALL_OW 45
22154: PPUSH
22155: LD_VAR 0 2
22159: PUSH
22160: LD_INT 1
22162: ARRAY
22163: PPUSH
22164: CALL_OW 250
22168: PPUSH
22169: LD_VAR 0 2
22173: PUSH
22174: LD_INT 1
22176: ARRAY
22177: PPUSH
22178: CALL_OW 251
22182: PPUSH
22183: LD_INT 12
22185: PPUSH
22186: LD_INT 1
22188: PPUSH
22189: CALL_OW 50
22193: GO 22207
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22195: CALL_OW 45
22199: PPUSH
22200: LD_INT 1
22202: PPUSH
22203: CALL_OW 51
// end ;
22207: GO 22081
22209: POP
22210: POP
// end ;
22211: PPOPN 2
22213: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22214: LD_EXP 48
22218: IFFALSE 22226
22220: PUSH
22221: LD_EXP 94
22225: AND
22226: IFFALSE 22448
22228: GO 22230
22230: DISABLE
22231: LD_INT 0
22233: PPUSH
22234: PPUSH
22235: PPUSH
22236: PPUSH
22237: PPUSH
22238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22239: LD_ADDR_VAR 0 6
22243: PUSH
22244: LD_INT 22
22246: PUSH
22247: LD_OWVAR 2
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 21
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 3
22268: PUSH
22269: LD_INT 23
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: PPUSH
22288: CALL_OW 69
22292: ST_TO_ADDR
// if not tmp then
22293: LD_VAR 0 6
22297: NOT
22298: IFFALSE 22302
// exit ;
22300: GO 22448
// s1 := rand ( 1 , 4 ) ;
22302: LD_ADDR_VAR 0 2
22306: PUSH
22307: LD_INT 1
22309: PPUSH
22310: LD_INT 4
22312: PPUSH
22313: CALL_OW 12
22317: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22318: LD_ADDR_VAR 0 4
22322: PUSH
22323: LD_VAR 0 6
22327: PUSH
22328: LD_INT 1
22330: ARRAY
22331: PPUSH
22332: LD_VAR 0 2
22336: PPUSH
22337: CALL_OW 259
22341: ST_TO_ADDR
// if s1 = 1 then
22342: LD_VAR 0 2
22346: PUSH
22347: LD_INT 1
22349: EQUAL
22350: IFFALSE 22370
// s2 := rand ( 2 , 4 ) else
22352: LD_ADDR_VAR 0 3
22356: PUSH
22357: LD_INT 2
22359: PPUSH
22360: LD_INT 4
22362: PPUSH
22363: CALL_OW 12
22367: ST_TO_ADDR
22368: GO 22378
// s2 := 1 ;
22370: LD_ADDR_VAR 0 3
22374: PUSH
22375: LD_INT 1
22377: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22378: LD_ADDR_VAR 0 5
22382: PUSH
22383: LD_VAR 0 6
22387: PUSH
22388: LD_INT 1
22390: ARRAY
22391: PPUSH
22392: LD_VAR 0 3
22396: PPUSH
22397: CALL_OW 259
22401: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22402: LD_VAR 0 6
22406: PUSH
22407: LD_INT 1
22409: ARRAY
22410: PPUSH
22411: LD_VAR 0 2
22415: PPUSH
22416: LD_VAR 0 5
22420: PPUSH
22421: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22425: LD_VAR 0 6
22429: PUSH
22430: LD_INT 1
22432: ARRAY
22433: PPUSH
22434: LD_VAR 0 3
22438: PPUSH
22439: LD_VAR 0 4
22443: PPUSH
22444: CALL_OW 237
// end ;
22448: PPOPN 6
22450: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22451: LD_EXP 48
22455: IFFALSE 22463
22457: PUSH
22458: LD_EXP 95
22462: AND
22463: IFFALSE 22542
22465: GO 22467
22467: DISABLE
22468: LD_INT 0
22470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22471: LD_ADDR_VAR 0 1
22475: PUSH
22476: LD_INT 22
22478: PUSH
22479: LD_OWVAR 2
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 30
22490: PUSH
22491: LD_INT 3
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PPUSH
22502: CALL_OW 69
22506: ST_TO_ADDR
// if not tmp then
22507: LD_VAR 0 1
22511: NOT
22512: IFFALSE 22516
// exit ;
22514: GO 22542
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22516: LD_VAR 0 1
22520: PUSH
22521: LD_INT 1
22523: PPUSH
22524: LD_VAR 0 1
22528: PPUSH
22529: CALL_OW 12
22533: ARRAY
22534: PPUSH
22535: LD_INT 1
22537: PPUSH
22538: CALL_OW 234
// end ;
22542: PPOPN 1
22544: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22545: LD_EXP 48
22549: IFFALSE 22557
22551: PUSH
22552: LD_EXP 96
22556: AND
22557: IFFALSE 22669
22559: GO 22561
22561: DISABLE
22562: LD_INT 0
22564: PPUSH
22565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22566: LD_ADDR_VAR 0 2
22570: PUSH
22571: LD_INT 22
22573: PUSH
22574: LD_OWVAR 2
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 2
22585: PUSH
22586: LD_INT 30
22588: PUSH
22589: LD_INT 27
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 30
22598: PUSH
22599: LD_INT 26
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 30
22608: PUSH
22609: LD_INT 28
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PPUSH
22626: CALL_OW 69
22630: ST_TO_ADDR
// if not tmp then
22631: LD_VAR 0 2
22635: NOT
22636: IFFALSE 22640
// exit ;
22638: GO 22669
// for i in tmp do
22640: LD_ADDR_VAR 0 1
22644: PUSH
22645: LD_VAR 0 2
22649: PUSH
22650: FOR_IN
22651: IFFALSE 22667
// SetLives ( i , 1 ) ;
22653: LD_VAR 0 1
22657: PPUSH
22658: LD_INT 1
22660: PPUSH
22661: CALL_OW 234
22665: GO 22650
22667: POP
22668: POP
// end ;
22669: PPOPN 2
22671: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22672: LD_EXP 48
22676: IFFALSE 22684
22678: PUSH
22679: LD_EXP 97
22683: AND
22684: IFFALSE 22971
22686: GO 22688
22688: DISABLE
22689: LD_INT 0
22691: PPUSH
22692: PPUSH
22693: PPUSH
// begin i := rand ( 1 , 7 ) ;
22694: LD_ADDR_VAR 0 1
22698: PUSH
22699: LD_INT 1
22701: PPUSH
22702: LD_INT 7
22704: PPUSH
22705: CALL_OW 12
22709: ST_TO_ADDR
// case i of 1 :
22710: LD_VAR 0 1
22714: PUSH
22715: LD_INT 1
22717: DOUBLE
22718: EQUAL
22719: IFTRUE 22723
22721: GO 22733
22723: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22724: LD_STRING earthquake(getX(game), 0, 32)
22726: PPUSH
22727: CALL_OW 559
22731: GO 22971
22733: LD_INT 2
22735: DOUBLE
22736: EQUAL
22737: IFTRUE 22741
22739: GO 22755
22741: POP
// begin ToLua ( displayStucuk(); ) ;
22742: LD_STRING displayStucuk();
22744: PPUSH
22745: CALL_OW 559
// ResetFog ;
22749: CALL_OW 335
// end ; 3 :
22753: GO 22971
22755: LD_INT 3
22757: DOUBLE
22758: EQUAL
22759: IFTRUE 22763
22761: GO 22867
22763: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22764: LD_ADDR_VAR 0 2
22768: PUSH
22769: LD_INT 22
22771: PUSH
22772: LD_OWVAR 2
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 25
22783: PUSH
22784: LD_INT 1
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PPUSH
22795: CALL_OW 69
22799: ST_TO_ADDR
// if not tmp then
22800: LD_VAR 0 2
22804: NOT
22805: IFFALSE 22809
// exit ;
22807: GO 22971
// un := tmp [ rand ( 1 , tmp ) ] ;
22809: LD_ADDR_VAR 0 3
22813: PUSH
22814: LD_VAR 0 2
22818: PUSH
22819: LD_INT 1
22821: PPUSH
22822: LD_VAR 0 2
22826: PPUSH
22827: CALL_OW 12
22831: ARRAY
22832: ST_TO_ADDR
// if Crawls ( un ) then
22833: LD_VAR 0 3
22837: PPUSH
22838: CALL_OW 318
22842: IFFALSE 22853
// ComWalk ( un ) ;
22844: LD_VAR 0 3
22848: PPUSH
22849: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22853: LD_VAR 0 3
22857: PPUSH
22858: LD_INT 8
22860: PPUSH
22861: CALL_OW 336
// end ; 4 :
22865: GO 22971
22867: LD_INT 4
22869: DOUBLE
22870: EQUAL
22871: IFTRUE 22875
22873: GO 22949
22875: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22876: LD_ADDR_VAR 0 2
22880: PUSH
22881: LD_INT 22
22883: PUSH
22884: LD_OWVAR 2
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 30
22895: PUSH
22896: LD_INT 29
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PPUSH
22907: CALL_OW 69
22911: ST_TO_ADDR
// if not tmp then
22912: LD_VAR 0 2
22916: NOT
22917: IFFALSE 22921
// exit ;
22919: GO 22971
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22921: LD_VAR 0 2
22925: PUSH
22926: LD_INT 1
22928: ARRAY
22929: PPUSH
22930: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22934: LD_VAR 0 2
22938: PUSH
22939: LD_INT 1
22941: ARRAY
22942: PPUSH
22943: CALL_OW 65
// end ; 5 .. 7 :
22947: GO 22971
22949: LD_INT 5
22951: DOUBLE
22952: GREATEREQUAL
22953: IFFALSE 22961
22955: LD_INT 7
22957: DOUBLE
22958: LESSEQUAL
22959: IFTRUE 22963
22961: GO 22970
22963: POP
// StreamSibBomb ; end ;
22964: CALL 19152 0 0
22968: GO 22971
22970: POP
// end ;
22971: PPOPN 3
22973: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22974: LD_EXP 48
22978: IFFALSE 22986
22980: PUSH
22981: LD_EXP 98
22985: AND
22986: IFFALSE 23142
22988: GO 22990
22990: DISABLE
22991: LD_INT 0
22993: PPUSH
22994: PPUSH
22995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22996: LD_ADDR_VAR 0 2
23000: PUSH
23001: LD_INT 81
23003: PUSH
23004: LD_OWVAR 2
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 2
23015: PUSH
23016: LD_INT 21
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 21
23028: PUSH
23029: LD_INT 2
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PPUSH
23045: CALL_OW 69
23049: ST_TO_ADDR
// if not tmp then
23050: LD_VAR 0 2
23054: NOT
23055: IFFALSE 23059
// exit ;
23057: GO 23142
// p := 0 ;
23059: LD_ADDR_VAR 0 3
23063: PUSH
23064: LD_INT 0
23066: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23067: LD_INT 35
23069: PPUSH
23070: CALL_OW 67
// p := p + 1 ;
23074: LD_ADDR_VAR 0 3
23078: PUSH
23079: LD_VAR 0 3
23083: PUSH
23084: LD_INT 1
23086: PLUS
23087: ST_TO_ADDR
// for i in tmp do
23088: LD_ADDR_VAR 0 1
23092: PUSH
23093: LD_VAR 0 2
23097: PUSH
23098: FOR_IN
23099: IFFALSE 23130
// if GetLives ( i ) < 1000 then
23101: LD_VAR 0 1
23105: PPUSH
23106: CALL_OW 256
23110: PUSH
23111: LD_INT 1000
23113: LESS
23114: IFFALSE 23128
// SetLives ( i , 1000 ) ;
23116: LD_VAR 0 1
23120: PPUSH
23121: LD_INT 1000
23123: PPUSH
23124: CALL_OW 234
23128: GO 23098
23130: POP
23131: POP
// until p > 20 ;
23132: LD_VAR 0 3
23136: PUSH
23137: LD_INT 20
23139: GREATER
23140: IFFALSE 23067
// end ;
23142: PPOPN 3
23144: END
// every 0 0$1 trigger StreamModeActive and sTime do
23145: LD_EXP 48
23149: IFFALSE 23157
23151: PUSH
23152: LD_EXP 99
23156: AND
23157: IFFALSE 23192
23159: GO 23161
23161: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23162: LD_INT 28
23164: PPUSH
23165: LD_OWVAR 2
23169: PPUSH
23170: LD_INT 2
23172: PPUSH
23173: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23177: LD_INT 30
23179: PPUSH
23180: LD_OWVAR 2
23184: PPUSH
23185: LD_INT 2
23187: PPUSH
23188: CALL_OW 322
// end ;
23192: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23193: LD_EXP 48
23197: IFFALSE 23205
23199: PUSH
23200: LD_EXP 100
23204: AND
23205: IFFALSE 23326
23207: GO 23209
23209: DISABLE
23210: LD_INT 0
23212: PPUSH
23213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23214: LD_ADDR_VAR 0 2
23218: PUSH
23219: LD_INT 22
23221: PUSH
23222: LD_OWVAR 2
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 21
23233: PUSH
23234: LD_INT 1
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 3
23243: PUSH
23244: LD_INT 23
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: LIST
23262: PPUSH
23263: CALL_OW 69
23267: ST_TO_ADDR
// if not tmp then
23268: LD_VAR 0 2
23272: NOT
23273: IFFALSE 23277
// exit ;
23275: GO 23326
// for i in tmp do
23277: LD_ADDR_VAR 0 1
23281: PUSH
23282: LD_VAR 0 2
23286: PUSH
23287: FOR_IN
23288: IFFALSE 23324
// begin if Crawls ( i ) then
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL_OW 318
23299: IFFALSE 23310
// ComWalk ( i ) ;
23301: LD_VAR 0 1
23305: PPUSH
23306: CALL_OW 138
// SetClass ( i , 2 ) ;
23310: LD_VAR 0 1
23314: PPUSH
23315: LD_INT 2
23317: PPUSH
23318: CALL_OW 336
// end ;
23322: GO 23287
23324: POP
23325: POP
// end ;
23326: PPOPN 2
23328: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23329: LD_EXP 48
23333: IFFALSE 23341
23335: PUSH
23336: LD_EXP 101
23340: AND
23341: IFFALSE 23631
23343: GO 23345
23345: DISABLE
23346: LD_INT 0
23348: PPUSH
23349: PPUSH
23350: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23351: LD_OWVAR 2
23355: PPUSH
23356: LD_INT 9
23358: PPUSH
23359: LD_INT 1
23361: PPUSH
23362: LD_INT 1
23364: PPUSH
23365: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23369: LD_INT 9
23371: PPUSH
23372: LD_OWVAR 2
23376: PPUSH
23377: CALL_OW 343
// uc_side := 9 ;
23381: LD_ADDR_OWVAR 20
23385: PUSH
23386: LD_INT 9
23388: ST_TO_ADDR
// uc_nation := 2 ;
23389: LD_ADDR_OWVAR 21
23393: PUSH
23394: LD_INT 2
23396: ST_TO_ADDR
// hc_name := Dark Warrior ;
23397: LD_ADDR_OWVAR 26
23401: PUSH
23402: LD_STRING Dark Warrior
23404: ST_TO_ADDR
// hc_gallery :=  ;
23405: LD_ADDR_OWVAR 33
23409: PUSH
23410: LD_STRING 
23412: ST_TO_ADDR
// hc_noskilllimit := true ;
23413: LD_ADDR_OWVAR 76
23417: PUSH
23418: LD_INT 1
23420: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23421: LD_ADDR_OWVAR 31
23425: PUSH
23426: LD_INT 30
23428: PUSH
23429: LD_INT 30
23431: PUSH
23432: LD_INT 30
23434: PUSH
23435: LD_INT 30
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: ST_TO_ADDR
// un := CreateHuman ;
23444: LD_ADDR_VAR 0 3
23448: PUSH
23449: CALL_OW 44
23453: ST_TO_ADDR
// hc_noskilllimit := false ;
23454: LD_ADDR_OWVAR 76
23458: PUSH
23459: LD_INT 0
23461: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23462: LD_VAR 0 3
23466: PPUSH
23467: LD_INT 1
23469: PPUSH
23470: CALL_OW 51
// ToLua ( playRanger() ) ;
23474: LD_STRING playRanger()
23476: PPUSH
23477: CALL_OW 559
// p := 0 ;
23481: LD_ADDR_VAR 0 2
23485: PUSH
23486: LD_INT 0
23488: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23489: LD_INT 35
23491: PPUSH
23492: CALL_OW 67
// p := p + 1 ;
23496: LD_ADDR_VAR 0 2
23500: PUSH
23501: LD_VAR 0 2
23505: PUSH
23506: LD_INT 1
23508: PLUS
23509: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23510: LD_VAR 0 3
23514: PPUSH
23515: CALL_OW 256
23519: PUSH
23520: LD_INT 1000
23522: LESS
23523: IFFALSE 23537
// SetLives ( un , 1000 ) ;
23525: LD_VAR 0 3
23529: PPUSH
23530: LD_INT 1000
23532: PPUSH
23533: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23537: LD_VAR 0 3
23541: PPUSH
23542: LD_INT 81
23544: PUSH
23545: LD_OWVAR 2
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 91
23556: PUSH
23557: LD_VAR 0 3
23561: PUSH
23562: LD_INT 30
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: LIST
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PPUSH
23574: CALL_OW 69
23578: PPUSH
23579: LD_VAR 0 3
23583: PPUSH
23584: CALL_OW 74
23588: PPUSH
23589: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23593: LD_VAR 0 2
23597: PUSH
23598: LD_INT 80
23600: GREATER
23601: IFTRUE 23614
23603: PUSH
23604: LD_VAR 0 3
23608: PPUSH
23609: CALL_OW 301
23613: OR
23614: IFFALSE 23489
// if un then
23616: LD_VAR 0 3
23620: IFFALSE 23631
// RemoveUnit ( un ) ;
23622: LD_VAR 0 3
23626: PPUSH
23627: CALL_OW 64
// end ;
23631: PPOPN 3
23633: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23634: LD_EXP 102
23638: IFFALSE 23754
23640: GO 23642
23642: DISABLE
23643: LD_INT 0
23645: PPUSH
23646: PPUSH
23647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23648: LD_ADDR_VAR 0 2
23652: PUSH
23653: LD_INT 81
23655: PUSH
23656: LD_OWVAR 2
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 21
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PPUSH
23679: CALL_OW 69
23683: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23684: LD_STRING playComputer()
23686: PPUSH
23687: CALL_OW 559
// if not tmp then
23691: LD_VAR 0 2
23695: NOT
23696: IFFALSE 23700
// exit ;
23698: GO 23754
// for i in tmp do
23700: LD_ADDR_VAR 0 1
23704: PUSH
23705: LD_VAR 0 2
23709: PUSH
23710: FOR_IN
23711: IFFALSE 23752
// for j := 1 to 4 do
23713: LD_ADDR_VAR 0 3
23717: PUSH
23718: DOUBLE
23719: LD_INT 1
23721: DEC
23722: ST_TO_ADDR
23723: LD_INT 4
23725: PUSH
23726: FOR_TO
23727: IFFALSE 23748
// SetSkill ( i , j , 10 ) ;
23729: LD_VAR 0 1
23733: PPUSH
23734: LD_VAR 0 3
23738: PPUSH
23739: LD_INT 10
23741: PPUSH
23742: CALL_OW 237
23746: GO 23726
23748: POP
23749: POP
23750: GO 23710
23752: POP
23753: POP
// end ;
23754: PPOPN 3
23756: END
// every 0 0$1 trigger s30 do var i , tmp ;
23757: LD_EXP 103
23761: IFFALSE 23830
23763: GO 23765
23765: DISABLE
23766: LD_INT 0
23768: PPUSH
23769: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23770: LD_ADDR_VAR 0 2
23774: PUSH
23775: LD_INT 22
23777: PUSH
23778: LD_OWVAR 2
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PPUSH
23787: CALL_OW 69
23791: ST_TO_ADDR
// if not tmp then
23792: LD_VAR 0 2
23796: NOT
23797: IFFALSE 23801
// exit ;
23799: GO 23830
// for i in tmp do
23801: LD_ADDR_VAR 0 1
23805: PUSH
23806: LD_VAR 0 2
23810: PUSH
23811: FOR_IN
23812: IFFALSE 23828
// SetLives ( i , 300 ) ;
23814: LD_VAR 0 1
23818: PPUSH
23819: LD_INT 300
23821: PPUSH
23822: CALL_OW 234
23826: GO 23811
23828: POP
23829: POP
// end ;
23830: PPOPN 2
23832: END
// every 0 0$1 trigger s60 do var i , tmp ;
23833: LD_EXP 104
23837: IFFALSE 23906
23839: GO 23841
23841: DISABLE
23842: LD_INT 0
23844: PPUSH
23845: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23846: LD_ADDR_VAR 0 2
23850: PUSH
23851: LD_INT 22
23853: PUSH
23854: LD_OWVAR 2
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PPUSH
23863: CALL_OW 69
23867: ST_TO_ADDR
// if not tmp then
23868: LD_VAR 0 2
23872: NOT
23873: IFFALSE 23877
// exit ;
23875: GO 23906
// for i in tmp do
23877: LD_ADDR_VAR 0 1
23881: PUSH
23882: LD_VAR 0 2
23886: PUSH
23887: FOR_IN
23888: IFFALSE 23904
// SetLives ( i , 600 ) ;
23890: LD_VAR 0 1
23894: PPUSH
23895: LD_INT 600
23897: PPUSH
23898: CALL_OW 234
23902: GO 23887
23904: POP
23905: POP
// end ;
23906: PPOPN 2
23908: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23909: LD_INT 0
23911: PPUSH
// case cmd of 301 :
23912: LD_VAR 0 1
23916: PUSH
23917: LD_INT 301
23919: DOUBLE
23920: EQUAL
23921: IFTRUE 23925
23923: GO 23957
23925: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23926: LD_VAR 0 6
23930: PPUSH
23931: LD_VAR 0 7
23935: PPUSH
23936: LD_VAR 0 8
23940: PPUSH
23941: LD_VAR 0 4
23945: PPUSH
23946: LD_VAR 0 5
23950: PPUSH
23951: CALL 25170 0 5
23955: GO 24078
23957: LD_INT 302
23959: DOUBLE
23960: EQUAL
23961: IFTRUE 23965
23963: GO 24002
23965: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23966: LD_VAR 0 6
23970: PPUSH
23971: LD_VAR 0 7
23975: PPUSH
23976: LD_VAR 0 8
23980: PPUSH
23981: LD_VAR 0 9
23985: PPUSH
23986: LD_VAR 0 4
23990: PPUSH
23991: LD_VAR 0 5
23995: PPUSH
23996: CALL 25261 0 6
24000: GO 24078
24002: LD_INT 303
24004: DOUBLE
24005: EQUAL
24006: IFTRUE 24010
24008: GO 24047
24010: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24011: LD_VAR 0 6
24015: PPUSH
24016: LD_VAR 0 7
24020: PPUSH
24021: LD_VAR 0 8
24025: PPUSH
24026: LD_VAR 0 9
24030: PPUSH
24031: LD_VAR 0 4
24035: PPUSH
24036: LD_VAR 0 5
24040: PPUSH
24041: CALL 24083 0 6
24045: GO 24078
24047: LD_INT 304
24049: DOUBLE
24050: EQUAL
24051: IFTRUE 24055
24053: GO 24077
24055: POP
// hHackTeleport ( unit , x , y ) ; end ;
24056: LD_VAR 0 2
24060: PPUSH
24061: LD_VAR 0 4
24065: PPUSH
24066: LD_VAR 0 5
24070: PPUSH
24071: CALL 25854 0 3
24075: GO 24078
24077: POP
// end ;
24078: LD_VAR 0 12
24082: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24083: LD_INT 0
24085: PPUSH
24086: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24087: LD_VAR 0 1
24091: PUSH
24092: LD_INT 1
24094: LESS
24095: IFTRUE 24107
24097: PUSH
24098: LD_VAR 0 1
24102: PUSH
24103: LD_INT 3
24105: GREATER
24106: OR
24107: IFTRUE 24125
24109: PUSH
24110: LD_VAR 0 5
24114: PPUSH
24115: LD_VAR 0 6
24119: PPUSH
24120: CALL_OW 428
24124: OR
24125: IFFALSE 24129
// exit ;
24127: GO 24857
// uc_side := your_side ;
24129: LD_ADDR_OWVAR 20
24133: PUSH
24134: LD_OWVAR 2
24138: ST_TO_ADDR
// uc_nation := nation ;
24139: LD_ADDR_OWVAR 21
24143: PUSH
24144: LD_VAR 0 1
24148: ST_TO_ADDR
// bc_level = 1 ;
24149: LD_ADDR_OWVAR 43
24153: PUSH
24154: LD_INT 1
24156: ST_TO_ADDR
// case btype of 1 :
24157: LD_VAR 0 2
24161: PUSH
24162: LD_INT 1
24164: DOUBLE
24165: EQUAL
24166: IFTRUE 24170
24168: GO 24181
24170: POP
// bc_type := b_depot ; 2 :
24171: LD_ADDR_OWVAR 42
24175: PUSH
24176: LD_INT 0
24178: ST_TO_ADDR
24179: GO 24801
24181: LD_INT 2
24183: DOUBLE
24184: EQUAL
24185: IFTRUE 24189
24187: GO 24200
24189: POP
// bc_type := b_warehouse ; 3 :
24190: LD_ADDR_OWVAR 42
24194: PUSH
24195: LD_INT 1
24197: ST_TO_ADDR
24198: GO 24801
24200: LD_INT 3
24202: DOUBLE
24203: EQUAL
24204: IFTRUE 24208
24206: GO 24219
24208: POP
// bc_type := b_lab ; 4 .. 9 :
24209: LD_ADDR_OWVAR 42
24213: PUSH
24214: LD_INT 6
24216: ST_TO_ADDR
24217: GO 24801
24219: LD_INT 4
24221: DOUBLE
24222: GREATEREQUAL
24223: IFFALSE 24231
24225: LD_INT 9
24227: DOUBLE
24228: LESSEQUAL
24229: IFTRUE 24233
24231: GO 24293
24233: POP
// begin bc_type := b_lab_half ;
24234: LD_ADDR_OWVAR 42
24238: PUSH
24239: LD_INT 7
24241: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24242: LD_ADDR_OWVAR 44
24246: PUSH
24247: LD_INT 10
24249: PUSH
24250: LD_INT 11
24252: PUSH
24253: LD_INT 12
24255: PUSH
24256: LD_INT 15
24258: PUSH
24259: LD_INT 14
24261: PUSH
24262: LD_INT 13
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: PUSH
24273: LD_VAR 0 2
24277: PUSH
24278: LD_INT 3
24280: MINUS
24281: ARRAY
24282: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24283: LD_ADDR_OWVAR 45
24287: PUSH
24288: LD_INT 9
24290: ST_TO_ADDR
// end ; 10 .. 13 :
24291: GO 24801
24293: LD_INT 10
24295: DOUBLE
24296: GREATEREQUAL
24297: IFFALSE 24305
24299: LD_INT 13
24301: DOUBLE
24302: LESSEQUAL
24303: IFTRUE 24307
24305: GO 24384
24307: POP
// begin bc_type := b_lab_full ;
24308: LD_ADDR_OWVAR 42
24312: PUSH
24313: LD_INT 8
24315: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24316: LD_ADDR_OWVAR 44
24320: PUSH
24321: LD_INT 10
24323: PUSH
24324: LD_INT 12
24326: PUSH
24327: LD_INT 14
24329: PUSH
24330: LD_INT 13
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: PUSH
24339: LD_VAR 0 2
24343: PUSH
24344: LD_INT 9
24346: MINUS
24347: ARRAY
24348: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24349: LD_ADDR_OWVAR 45
24353: PUSH
24354: LD_INT 11
24356: PUSH
24357: LD_INT 15
24359: PUSH
24360: LD_INT 12
24362: PUSH
24363: LD_INT 15
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: PUSH
24372: LD_VAR 0 2
24376: PUSH
24377: LD_INT 9
24379: MINUS
24380: ARRAY
24381: ST_TO_ADDR
// end ; 14 :
24382: GO 24801
24384: LD_INT 14
24386: DOUBLE
24387: EQUAL
24388: IFTRUE 24392
24390: GO 24403
24392: POP
// bc_type := b_workshop ; 15 :
24393: LD_ADDR_OWVAR 42
24397: PUSH
24398: LD_INT 2
24400: ST_TO_ADDR
24401: GO 24801
24403: LD_INT 15
24405: DOUBLE
24406: EQUAL
24407: IFTRUE 24411
24409: GO 24422
24411: POP
// bc_type := b_factory ; 16 :
24412: LD_ADDR_OWVAR 42
24416: PUSH
24417: LD_INT 3
24419: ST_TO_ADDR
24420: GO 24801
24422: LD_INT 16
24424: DOUBLE
24425: EQUAL
24426: IFTRUE 24430
24428: GO 24441
24430: POP
// bc_type := b_ext_gun ; 17 :
24431: LD_ADDR_OWVAR 42
24435: PUSH
24436: LD_INT 17
24438: ST_TO_ADDR
24439: GO 24801
24441: LD_INT 17
24443: DOUBLE
24444: EQUAL
24445: IFTRUE 24449
24447: GO 24477
24449: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24450: LD_ADDR_OWVAR 42
24454: PUSH
24455: LD_INT 19
24457: PUSH
24458: LD_INT 23
24460: PUSH
24461: LD_INT 19
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: LIST
24468: PUSH
24469: LD_VAR 0 1
24473: ARRAY
24474: ST_TO_ADDR
24475: GO 24801
24477: LD_INT 18
24479: DOUBLE
24480: EQUAL
24481: IFTRUE 24485
24483: GO 24496
24485: POP
// bc_type := b_ext_radar ; 19 :
24486: LD_ADDR_OWVAR 42
24490: PUSH
24491: LD_INT 20
24493: ST_TO_ADDR
24494: GO 24801
24496: LD_INT 19
24498: DOUBLE
24499: EQUAL
24500: IFTRUE 24504
24502: GO 24515
24504: POP
// bc_type := b_ext_radio ; 20 :
24505: LD_ADDR_OWVAR 42
24509: PUSH
24510: LD_INT 22
24512: ST_TO_ADDR
24513: GO 24801
24515: LD_INT 20
24517: DOUBLE
24518: EQUAL
24519: IFTRUE 24523
24521: GO 24534
24523: POP
// bc_type := b_ext_siberium ; 21 :
24524: LD_ADDR_OWVAR 42
24528: PUSH
24529: LD_INT 21
24531: ST_TO_ADDR
24532: GO 24801
24534: LD_INT 21
24536: DOUBLE
24537: EQUAL
24538: IFTRUE 24542
24540: GO 24553
24542: POP
// bc_type := b_ext_computer ; 22 :
24543: LD_ADDR_OWVAR 42
24547: PUSH
24548: LD_INT 24
24550: ST_TO_ADDR
24551: GO 24801
24553: LD_INT 22
24555: DOUBLE
24556: EQUAL
24557: IFTRUE 24561
24559: GO 24572
24561: POP
// bc_type := b_ext_track ; 23 :
24562: LD_ADDR_OWVAR 42
24566: PUSH
24567: LD_INT 16
24569: ST_TO_ADDR
24570: GO 24801
24572: LD_INT 23
24574: DOUBLE
24575: EQUAL
24576: IFTRUE 24580
24578: GO 24591
24580: POP
// bc_type := b_ext_laser ; 24 :
24581: LD_ADDR_OWVAR 42
24585: PUSH
24586: LD_INT 25
24588: ST_TO_ADDR
24589: GO 24801
24591: LD_INT 24
24593: DOUBLE
24594: EQUAL
24595: IFTRUE 24599
24597: GO 24610
24599: POP
// bc_type := b_control_tower ; 25 :
24600: LD_ADDR_OWVAR 42
24604: PUSH
24605: LD_INT 36
24607: ST_TO_ADDR
24608: GO 24801
24610: LD_INT 25
24612: DOUBLE
24613: EQUAL
24614: IFTRUE 24618
24616: GO 24629
24618: POP
// bc_type := b_breastwork ; 26 :
24619: LD_ADDR_OWVAR 42
24623: PUSH
24624: LD_INT 31
24626: ST_TO_ADDR
24627: GO 24801
24629: LD_INT 26
24631: DOUBLE
24632: EQUAL
24633: IFTRUE 24637
24635: GO 24648
24637: POP
// bc_type := b_bunker ; 27 :
24638: LD_ADDR_OWVAR 42
24642: PUSH
24643: LD_INT 32
24645: ST_TO_ADDR
24646: GO 24801
24648: LD_INT 27
24650: DOUBLE
24651: EQUAL
24652: IFTRUE 24656
24654: GO 24667
24656: POP
// bc_type := b_turret ; 28 :
24657: LD_ADDR_OWVAR 42
24661: PUSH
24662: LD_INT 33
24664: ST_TO_ADDR
24665: GO 24801
24667: LD_INT 28
24669: DOUBLE
24670: EQUAL
24671: IFTRUE 24675
24673: GO 24686
24675: POP
// bc_type := b_armoury ; 29 :
24676: LD_ADDR_OWVAR 42
24680: PUSH
24681: LD_INT 4
24683: ST_TO_ADDR
24684: GO 24801
24686: LD_INT 29
24688: DOUBLE
24689: EQUAL
24690: IFTRUE 24694
24692: GO 24705
24694: POP
// bc_type := b_barracks ; 30 :
24695: LD_ADDR_OWVAR 42
24699: PUSH
24700: LD_INT 5
24702: ST_TO_ADDR
24703: GO 24801
24705: LD_INT 30
24707: DOUBLE
24708: EQUAL
24709: IFTRUE 24713
24711: GO 24724
24713: POP
// bc_type := b_solar_power ; 31 :
24714: LD_ADDR_OWVAR 42
24718: PUSH
24719: LD_INT 27
24721: ST_TO_ADDR
24722: GO 24801
24724: LD_INT 31
24726: DOUBLE
24727: EQUAL
24728: IFTRUE 24732
24730: GO 24743
24732: POP
// bc_type := b_oil_power ; 32 :
24733: LD_ADDR_OWVAR 42
24737: PUSH
24738: LD_INT 26
24740: ST_TO_ADDR
24741: GO 24801
24743: LD_INT 32
24745: DOUBLE
24746: EQUAL
24747: IFTRUE 24751
24749: GO 24762
24751: POP
// bc_type := b_siberite_power ; 33 :
24752: LD_ADDR_OWVAR 42
24756: PUSH
24757: LD_INT 28
24759: ST_TO_ADDR
24760: GO 24801
24762: LD_INT 33
24764: DOUBLE
24765: EQUAL
24766: IFTRUE 24770
24768: GO 24781
24770: POP
// bc_type := b_oil_mine ; 34 :
24771: LD_ADDR_OWVAR 42
24775: PUSH
24776: LD_INT 29
24778: ST_TO_ADDR
24779: GO 24801
24781: LD_INT 34
24783: DOUBLE
24784: EQUAL
24785: IFTRUE 24789
24787: GO 24800
24789: POP
// bc_type := b_siberite_mine ; end ;
24790: LD_ADDR_OWVAR 42
24794: PUSH
24795: LD_INT 30
24797: ST_TO_ADDR
24798: GO 24801
24800: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24801: LD_ADDR_VAR 0 8
24805: PUSH
24806: LD_VAR 0 5
24810: PPUSH
24811: LD_VAR 0 6
24815: PPUSH
24816: LD_VAR 0 3
24820: PPUSH
24821: CALL_OW 47
24825: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24826: LD_OWVAR 42
24830: PUSH
24831: LD_INT 32
24833: PUSH
24834: LD_INT 33
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: IN
24841: IFFALSE 24857
// PlaceWeaponTurret ( b , weapon ) ;
24843: LD_VAR 0 8
24847: PPUSH
24848: LD_VAR 0 4
24852: PPUSH
24853: CALL_OW 431
// end ;
24857: LD_VAR 0 7
24861: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24862: LD_INT 0
24864: PPUSH
24865: PPUSH
24866: PPUSH
24867: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24868: LD_ADDR_VAR 0 4
24872: PUSH
24873: LD_INT 22
24875: PUSH
24876: LD_OWVAR 2
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 2
24887: PUSH
24888: LD_INT 30
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 30
24900: PUSH
24901: LD_INT 1
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: LIST
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PPUSH
24917: CALL_OW 69
24921: ST_TO_ADDR
// if not tmp then
24922: LD_VAR 0 4
24926: NOT
24927: IFFALSE 24931
// exit ;
24929: GO 24990
// for i in tmp do
24931: LD_ADDR_VAR 0 2
24935: PUSH
24936: LD_VAR 0 4
24940: PUSH
24941: FOR_IN
24942: IFFALSE 24988
// for j = 1 to 3 do
24944: LD_ADDR_VAR 0 3
24948: PUSH
24949: DOUBLE
24950: LD_INT 1
24952: DEC
24953: ST_TO_ADDR
24954: LD_INT 3
24956: PUSH
24957: FOR_TO
24958: IFFALSE 24984
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24960: LD_VAR 0 2
24964: PPUSH
24965: CALL_OW 274
24969: PPUSH
24970: LD_VAR 0 3
24974: PPUSH
24975: LD_INT 99999
24977: PPUSH
24978: CALL_OW 277
24982: GO 24957
24984: POP
24985: POP
24986: GO 24941
24988: POP
24989: POP
// end ;
24990: LD_VAR 0 1
24994: RET
// export function hHackSetLevel10 ; var i , j ; begin
24995: LD_INT 0
24997: PPUSH
24998: PPUSH
24999: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25000: LD_ADDR_VAR 0 2
25004: PUSH
25005: LD_INT 21
25007: PUSH
25008: LD_INT 1
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PPUSH
25015: CALL_OW 69
25019: PUSH
25020: FOR_IN
25021: IFFALSE 25073
// if IsSelected ( i ) then
25023: LD_VAR 0 2
25027: PPUSH
25028: CALL_OW 306
25032: IFFALSE 25071
// begin for j := 1 to 4 do
25034: LD_ADDR_VAR 0 3
25038: PUSH
25039: DOUBLE
25040: LD_INT 1
25042: DEC
25043: ST_TO_ADDR
25044: LD_INT 4
25046: PUSH
25047: FOR_TO
25048: IFFALSE 25069
// SetSkill ( i , j , 10 ) ;
25050: LD_VAR 0 2
25054: PPUSH
25055: LD_VAR 0 3
25059: PPUSH
25060: LD_INT 10
25062: PPUSH
25063: CALL_OW 237
25067: GO 25047
25069: POP
25070: POP
// end ;
25071: GO 25020
25073: POP
25074: POP
// end ;
25075: LD_VAR 0 1
25079: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25080: LD_INT 0
25082: PPUSH
25083: PPUSH
25084: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25085: LD_ADDR_VAR 0 2
25089: PUSH
25090: LD_INT 22
25092: PUSH
25093: LD_OWVAR 2
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 21
25104: PUSH
25105: LD_INT 1
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PPUSH
25116: CALL_OW 69
25120: PUSH
25121: FOR_IN
25122: IFFALSE 25163
// begin for j := 1 to 4 do
25124: LD_ADDR_VAR 0 3
25128: PUSH
25129: DOUBLE
25130: LD_INT 1
25132: DEC
25133: ST_TO_ADDR
25134: LD_INT 4
25136: PUSH
25137: FOR_TO
25138: IFFALSE 25159
// SetSkill ( i , j , 10 ) ;
25140: LD_VAR 0 2
25144: PPUSH
25145: LD_VAR 0 3
25149: PPUSH
25150: LD_INT 10
25152: PPUSH
25153: CALL_OW 237
25157: GO 25137
25159: POP
25160: POP
// end ;
25161: GO 25121
25163: POP
25164: POP
// end ;
25165: LD_VAR 0 1
25169: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25170: LD_INT 0
25172: PPUSH
// uc_side := your_side ;
25173: LD_ADDR_OWVAR 20
25177: PUSH
25178: LD_OWVAR 2
25182: ST_TO_ADDR
// uc_nation := nation ;
25183: LD_ADDR_OWVAR 21
25187: PUSH
25188: LD_VAR 0 1
25192: ST_TO_ADDR
// InitHc ;
25193: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25197: LD_INT 0
25199: PPUSH
25200: LD_VAR 0 2
25204: PPUSH
25205: LD_VAR 0 3
25209: PPUSH
25210: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25214: LD_VAR 0 4
25218: PPUSH
25219: LD_VAR 0 5
25223: PPUSH
25224: CALL_OW 428
25228: PUSH
25229: LD_INT 0
25231: EQUAL
25232: IFFALSE 25256
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25234: CALL_OW 44
25238: PPUSH
25239: LD_VAR 0 4
25243: PPUSH
25244: LD_VAR 0 5
25248: PPUSH
25249: LD_INT 1
25251: PPUSH
25252: CALL_OW 48
// end ;
25256: LD_VAR 0 6
25260: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25261: LD_INT 0
25263: PPUSH
25264: PPUSH
// uc_side := your_side ;
25265: LD_ADDR_OWVAR 20
25269: PUSH
25270: LD_OWVAR 2
25274: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25275: LD_VAR 0 1
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: LD_INT 2
25285: PUSH
25286: LD_INT 3
25288: PUSH
25289: LD_INT 4
25291: PUSH
25292: LD_INT 5
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: IN
25302: IFFALSE 25314
// uc_nation := nation_american else
25304: LD_ADDR_OWVAR 21
25308: PUSH
25309: LD_INT 1
25311: ST_TO_ADDR
25312: GO 25357
// if chassis in [ 11 , 12 , 13 , 14 ] then
25314: LD_VAR 0 1
25318: PUSH
25319: LD_INT 11
25321: PUSH
25322: LD_INT 12
25324: PUSH
25325: LD_INT 13
25327: PUSH
25328: LD_INT 14
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: IN
25337: IFFALSE 25349
// uc_nation := nation_arabian else
25339: LD_ADDR_OWVAR 21
25343: PUSH
25344: LD_INT 2
25346: ST_TO_ADDR
25347: GO 25357
// uc_nation := nation_russian ;
25349: LD_ADDR_OWVAR 21
25353: PUSH
25354: LD_INT 3
25356: ST_TO_ADDR
// vc_chassis := chassis ;
25357: LD_ADDR_OWVAR 37
25361: PUSH
25362: LD_VAR 0 1
25366: ST_TO_ADDR
// vc_engine := engine ;
25367: LD_ADDR_OWVAR 39
25371: PUSH
25372: LD_VAR 0 2
25376: ST_TO_ADDR
// vc_control := control ;
25377: LD_ADDR_OWVAR 38
25381: PUSH
25382: LD_VAR 0 3
25386: ST_TO_ADDR
// vc_weapon := weapon ;
25387: LD_ADDR_OWVAR 40
25391: PUSH
25392: LD_VAR 0 4
25396: ST_TO_ADDR
// un := CreateVehicle ;
25397: LD_ADDR_VAR 0 8
25401: PUSH
25402: CALL_OW 45
25406: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25407: LD_VAR 0 8
25411: PPUSH
25412: LD_INT 0
25414: PPUSH
25415: LD_INT 5
25417: PPUSH
25418: CALL_OW 12
25422: PPUSH
25423: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25427: LD_VAR 0 8
25431: PPUSH
25432: LD_VAR 0 5
25436: PPUSH
25437: LD_VAR 0 6
25441: PPUSH
25442: LD_INT 1
25444: PPUSH
25445: CALL_OW 48
// end ;
25449: LD_VAR 0 7
25453: RET
// export hInvincible ; every 1 do
25454: GO 25456
25456: DISABLE
// hInvincible := [ ] ;
25457: LD_ADDR_EXP 105
25461: PUSH
25462: EMPTY
25463: ST_TO_ADDR
25464: END
// every 10 do var i ;
25465: GO 25467
25467: DISABLE
25468: LD_INT 0
25470: PPUSH
// begin enable ;
25471: ENABLE
// if not hInvincible then
25472: LD_EXP 105
25476: NOT
25477: IFFALSE 25481
// exit ;
25479: GO 25525
// for i in hInvincible do
25481: LD_ADDR_VAR 0 1
25485: PUSH
25486: LD_EXP 105
25490: PUSH
25491: FOR_IN
25492: IFFALSE 25523
// if GetLives ( i ) < 1000 then
25494: LD_VAR 0 1
25498: PPUSH
25499: CALL_OW 256
25503: PUSH
25504: LD_INT 1000
25506: LESS
25507: IFFALSE 25521
// SetLives ( i , 1000 ) ;
25509: LD_VAR 0 1
25513: PPUSH
25514: LD_INT 1000
25516: PPUSH
25517: CALL_OW 234
25521: GO 25491
25523: POP
25524: POP
// end ;
25525: PPOPN 1
25527: END
// export function hHackInvincible ; var i ; begin
25528: LD_INT 0
25530: PPUSH
25531: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25532: LD_ADDR_VAR 0 2
25536: PUSH
25537: LD_INT 2
25539: PUSH
25540: LD_INT 21
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 21
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: PPUSH
25565: CALL_OW 69
25569: PUSH
25570: FOR_IN
25571: IFFALSE 25632
// if IsSelected ( i ) then
25573: LD_VAR 0 2
25577: PPUSH
25578: CALL_OW 306
25582: IFFALSE 25630
// begin if i in hInvincible then
25584: LD_VAR 0 2
25588: PUSH
25589: LD_EXP 105
25593: IN
25594: IFFALSE 25614
// hInvincible := hInvincible diff i else
25596: LD_ADDR_EXP 105
25600: PUSH
25601: LD_EXP 105
25605: PUSH
25606: LD_VAR 0 2
25610: DIFF
25611: ST_TO_ADDR
25612: GO 25630
// hInvincible := hInvincible union i ;
25614: LD_ADDR_EXP 105
25618: PUSH
25619: LD_EXP 105
25623: PUSH
25624: LD_VAR 0 2
25628: UNION
25629: ST_TO_ADDR
// end ;
25630: GO 25570
25632: POP
25633: POP
// end ;
25634: LD_VAR 0 1
25638: RET
// export function hHackInvisible ; var i , j ; begin
25639: LD_INT 0
25641: PPUSH
25642: PPUSH
25643: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25644: LD_ADDR_VAR 0 2
25648: PUSH
25649: LD_INT 21
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PPUSH
25659: CALL_OW 69
25663: PUSH
25664: FOR_IN
25665: IFFALSE 25689
// if IsSelected ( i ) then
25667: LD_VAR 0 2
25671: PPUSH
25672: CALL_OW 306
25676: IFFALSE 25687
// ComForceInvisible ( i ) ;
25678: LD_VAR 0 2
25682: PPUSH
25683: CALL_OW 496
25687: GO 25664
25689: POP
25690: POP
// end ;
25691: LD_VAR 0 1
25695: RET
// export function hHackChangeYourSide ; begin
25696: LD_INT 0
25698: PPUSH
// if your_side = 8 then
25699: LD_OWVAR 2
25703: PUSH
25704: LD_INT 8
25706: EQUAL
25707: IFFALSE 25719
// your_side := 0 else
25709: LD_ADDR_OWVAR 2
25713: PUSH
25714: LD_INT 0
25716: ST_TO_ADDR
25717: GO 25733
// your_side := your_side + 1 ;
25719: LD_ADDR_OWVAR 2
25723: PUSH
25724: LD_OWVAR 2
25728: PUSH
25729: LD_INT 1
25731: PLUS
25732: ST_TO_ADDR
// end ;
25733: LD_VAR 0 1
25737: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25738: LD_INT 0
25740: PPUSH
25741: PPUSH
25742: PPUSH
// for i in all_units do
25743: LD_ADDR_VAR 0 2
25747: PUSH
25748: LD_OWVAR 3
25752: PUSH
25753: FOR_IN
25754: IFFALSE 25832
// if IsSelected ( i ) then
25756: LD_VAR 0 2
25760: PPUSH
25761: CALL_OW 306
25765: IFFALSE 25830
// begin j := GetSide ( i ) ;
25767: LD_ADDR_VAR 0 3
25771: PUSH
25772: LD_VAR 0 2
25776: PPUSH
25777: CALL_OW 255
25781: ST_TO_ADDR
// if j = 8 then
25782: LD_VAR 0 3
25786: PUSH
25787: LD_INT 8
25789: EQUAL
25790: IFFALSE 25802
// j := 0 else
25792: LD_ADDR_VAR 0 3
25796: PUSH
25797: LD_INT 0
25799: ST_TO_ADDR
25800: GO 25816
// j := j + 1 ;
25802: LD_ADDR_VAR 0 3
25806: PUSH
25807: LD_VAR 0 3
25811: PUSH
25812: LD_INT 1
25814: PLUS
25815: ST_TO_ADDR
// SetSide ( i , j ) ;
25816: LD_VAR 0 2
25820: PPUSH
25821: LD_VAR 0 3
25825: PPUSH
25826: CALL_OW 235
// end ;
25830: GO 25753
25832: POP
25833: POP
// end ;
25834: LD_VAR 0 1
25838: RET
// export function hHackFog ; begin
25839: LD_INT 0
25841: PPUSH
// FogOff ( true ) ;
25842: LD_INT 1
25844: PPUSH
25845: CALL_OW 344
// end ;
25849: LD_VAR 0 1
25853: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25854: LD_INT 0
25856: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25857: LD_VAR 0 1
25861: PPUSH
25862: LD_VAR 0 2
25866: PPUSH
25867: LD_VAR 0 3
25871: PPUSH
25872: LD_INT 1
25874: PPUSH
25875: LD_INT 1
25877: PPUSH
25878: CALL_OW 483
// CenterOnXY ( x , y ) ;
25882: LD_VAR 0 2
25886: PPUSH
25887: LD_VAR 0 3
25891: PPUSH
25892: CALL_OW 84
// end ;
25896: LD_VAR 0 4
25900: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25901: LD_INT 0
25903: PPUSH
25904: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25905: LD_VAR 0 1
25909: NOT
25910: IFTRUE 25929
25912: PUSH
25913: LD_VAR 0 2
25917: PPUSH
25918: LD_VAR 0 3
25922: PPUSH
25923: CALL_OW 488
25927: NOT
25928: OR
25929: IFTRUE 25964
25931: PUSH
25932: LD_VAR 0 1
25936: PPUSH
25937: CALL_OW 266
25941: PUSH
25942: LD_INT 3
25944: NONEQUAL
25945: IFFALSE 25963
25947: PUSH
25948: LD_VAR 0 1
25952: PPUSH
25953: CALL_OW 247
25957: PUSH
25958: LD_INT 1
25960: EQUAL
25961: NOT
25962: AND
25963: OR
25964: IFFALSE 25968
// exit ;
25966: GO 26250
// if GetType ( factory ) = unit_human then
25968: LD_VAR 0 1
25972: PPUSH
25973: CALL_OW 247
25977: PUSH
25978: LD_INT 1
25980: EQUAL
25981: IFFALSE 25998
// factory := IsInUnit ( factory ) ;
25983: LD_ADDR_VAR 0 1
25987: PUSH
25988: LD_VAR 0 1
25992: PPUSH
25993: CALL_OW 310
25997: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25998: LD_VAR 0 1
26002: PPUSH
26003: CALL_OW 266
26007: PUSH
26008: LD_INT 3
26010: NONEQUAL
26011: IFFALSE 26015
// exit ;
26013: GO 26250
// for i := 1 to Count ( factoryWaypoints ) do
26015: LD_ADDR_VAR 0 5
26019: PUSH
26020: DOUBLE
26021: LD_INT 1
26023: DEC
26024: ST_TO_ADDR
26025: LD_EXP 106
26029: PPUSH
26030: CALL 34982 0 1
26034: PUSH
26035: FOR_TO
26036: IFFALSE 26198
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26038: LD_VAR 0 2
26042: PPUSH
26043: LD_VAR 0 3
26047: PPUSH
26048: CALL_OW 428
26052: PUSH
26053: LD_EXP 106
26057: PUSH
26058: LD_VAR 0 5
26062: ARRAY
26063: PUSH
26064: LD_INT 2
26066: ARRAY
26067: EQUAL
26068: IFFALSE 26100
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26070: LD_ADDR_EXP 106
26074: PUSH
26075: LD_EXP 106
26079: PPUSH
26080: LD_VAR 0 5
26084: PPUSH
26085: CALL_OW 3
26089: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26090: CALL 26255 0 0
// exit ;
26094: POP
26095: POP
26096: GO 26250
// end else
26098: GO 26196
// if factory = factoryWaypoints [ i ] [ 2 ] then
26100: LD_VAR 0 1
26104: PUSH
26105: LD_EXP 106
26109: PUSH
26110: LD_VAR 0 5
26114: ARRAY
26115: PUSH
26116: LD_INT 2
26118: ARRAY
26119: EQUAL
26120: IFFALSE 26196
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26122: LD_ADDR_EXP 106
26126: PUSH
26127: LD_EXP 106
26131: PPUSH
26132: LD_VAR 0 5
26136: PPUSH
26137: CALL_OW 3
26141: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26142: LD_ADDR_EXP 106
26146: PUSH
26147: LD_EXP 106
26151: PPUSH
26152: LD_VAR 0 1
26156: PPUSH
26157: CALL_OW 255
26161: PUSH
26162: LD_VAR 0 1
26166: PUSH
26167: LD_VAR 0 2
26171: PUSH
26172: LD_VAR 0 3
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: PPUSH
26183: CALL 70914 0 2
26187: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26188: CALL 26255 0 0
// exit ;
26192: POP
26193: POP
26194: GO 26250
// end ; end ;
26196: GO 26035
26198: POP
26199: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26200: LD_ADDR_EXP 106
26204: PUSH
26205: LD_EXP 106
26209: PPUSH
26210: LD_VAR 0 1
26214: PPUSH
26215: CALL_OW 255
26219: PUSH
26220: LD_VAR 0 1
26224: PUSH
26225: LD_VAR 0 2
26229: PUSH
26230: LD_VAR 0 3
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: PPUSH
26241: CALL 70914 0 2
26245: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26246: CALL 26255 0 0
// end ;
26250: LD_VAR 0 4
26254: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26255: LD_INT 0
26257: PPUSH
26258: PPUSH
26259: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26260: LD_STRING resetFactoryWaypoint();
26262: PPUSH
26263: CALL_OW 559
// if factoryWaypoints then
26267: LD_EXP 106
26271: IFFALSE 26392
// begin list := factoryWaypoints ;
26273: LD_ADDR_VAR 0 3
26277: PUSH
26278: LD_EXP 106
26282: ST_TO_ADDR
// for i := 1 to list do
26283: LD_ADDR_VAR 0 2
26287: PUSH
26288: DOUBLE
26289: LD_INT 1
26291: DEC
26292: ST_TO_ADDR
26293: LD_VAR 0 3
26297: PUSH
26298: FOR_TO
26299: IFFALSE 26390
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26301: LD_STRING setFactoryWaypointXY(
26303: PUSH
26304: LD_VAR 0 3
26308: PUSH
26309: LD_VAR 0 2
26313: ARRAY
26314: PUSH
26315: LD_INT 1
26317: ARRAY
26318: STR
26319: PUSH
26320: LD_STRING ,
26322: STR
26323: PUSH
26324: LD_VAR 0 3
26328: PUSH
26329: LD_VAR 0 2
26333: ARRAY
26334: PUSH
26335: LD_INT 2
26337: ARRAY
26338: STR
26339: PUSH
26340: LD_STRING ,
26342: STR
26343: PUSH
26344: LD_VAR 0 3
26348: PUSH
26349: LD_VAR 0 2
26353: ARRAY
26354: PUSH
26355: LD_INT 3
26357: ARRAY
26358: STR
26359: PUSH
26360: LD_STRING ,
26362: STR
26363: PUSH
26364: LD_VAR 0 3
26368: PUSH
26369: LD_VAR 0 2
26373: ARRAY
26374: PUSH
26375: LD_INT 4
26377: ARRAY
26378: STR
26379: PUSH
26380: LD_STRING )
26382: STR
26383: PPUSH
26384: CALL_OW 559
26388: GO 26298
26390: POP
26391: POP
// end ; end ;
26392: LD_VAR 0 1
26396: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26397: LD_INT 0
26399: PPUSH
// if HexInfo ( x , y ) = warehouse then
26400: LD_VAR 0 2
26404: PPUSH
26405: LD_VAR 0 3
26409: PPUSH
26410: CALL_OW 428
26414: PUSH
26415: LD_VAR 0 1
26419: EQUAL
26420: IFFALSE 26447
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26422: LD_ADDR_EXP 108
26426: PUSH
26427: LD_EXP 108
26431: PPUSH
26432: LD_VAR 0 1
26436: PPUSH
26437: LD_INT 0
26439: PPUSH
26440: CALL_OW 1
26444: ST_TO_ADDR
26445: GO 26498
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26447: LD_ADDR_EXP 108
26451: PUSH
26452: LD_EXP 108
26456: PPUSH
26457: LD_VAR 0 1
26461: PPUSH
26462: LD_VAR 0 1
26466: PPUSH
26467: CALL_OW 255
26471: PUSH
26472: LD_VAR 0 1
26476: PUSH
26477: LD_VAR 0 2
26481: PUSH
26482: LD_VAR 0 3
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: PPUSH
26493: CALL_OW 1
26497: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26498: CALL 26507 0 0
// end ;
26502: LD_VAR 0 4
26506: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26507: LD_INT 0
26509: PPUSH
26510: PPUSH
26511: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26512: LD_STRING resetWarehouseGatheringPoints();
26514: PPUSH
26515: CALL_OW 559
// if warehouseGatheringPoints then
26519: LD_EXP 108
26523: IFFALSE 26649
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26525: LD_ADDR_VAR 0 3
26529: PUSH
26530: LD_EXP 108
26534: PPUSH
26535: CALL 74848 0 1
26539: ST_TO_ADDR
// for i := 1 to list do
26540: LD_ADDR_VAR 0 2
26544: PUSH
26545: DOUBLE
26546: LD_INT 1
26548: DEC
26549: ST_TO_ADDR
26550: LD_VAR 0 3
26554: PUSH
26555: FOR_TO
26556: IFFALSE 26647
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26558: LD_STRING setWarehouseGatheringPointXY(
26560: PUSH
26561: LD_VAR 0 3
26565: PUSH
26566: LD_VAR 0 2
26570: ARRAY
26571: PUSH
26572: LD_INT 1
26574: ARRAY
26575: STR
26576: PUSH
26577: LD_STRING ,
26579: STR
26580: PUSH
26581: LD_VAR 0 3
26585: PUSH
26586: LD_VAR 0 2
26590: ARRAY
26591: PUSH
26592: LD_INT 2
26594: ARRAY
26595: STR
26596: PUSH
26597: LD_STRING ,
26599: STR
26600: PUSH
26601: LD_VAR 0 3
26605: PUSH
26606: LD_VAR 0 2
26610: ARRAY
26611: PUSH
26612: LD_INT 3
26614: ARRAY
26615: STR
26616: PUSH
26617: LD_STRING ,
26619: STR
26620: PUSH
26621: LD_VAR 0 3
26625: PUSH
26626: LD_VAR 0 2
26630: ARRAY
26631: PUSH
26632: LD_INT 4
26634: ARRAY
26635: STR
26636: PUSH
26637: LD_STRING )
26639: STR
26640: PPUSH
26641: CALL_OW 559
26645: GO 26555
26647: POP
26648: POP
// end ; end ;
26649: LD_VAR 0 1
26653: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26654: LD_EXP 108
26658: IFFALSE 27353
26660: GO 26662
26662: DISABLE
26663: LD_INT 0
26665: PPUSH
26666: PPUSH
26667: PPUSH
26668: PPUSH
26669: PPUSH
26670: PPUSH
26671: PPUSH
26672: PPUSH
26673: PPUSH
// begin enable ;
26674: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26675: LD_ADDR_VAR 0 3
26679: PUSH
26680: LD_EXP 108
26684: PPUSH
26685: CALL 74848 0 1
26689: ST_TO_ADDR
// if not list then
26690: LD_VAR 0 3
26694: NOT
26695: IFFALSE 26699
// exit ;
26697: GO 27353
// for i := 1 to list do
26699: LD_ADDR_VAR 0 1
26703: PUSH
26704: DOUBLE
26705: LD_INT 1
26707: DEC
26708: ST_TO_ADDR
26709: LD_VAR 0 3
26713: PUSH
26714: FOR_TO
26715: IFFALSE 27351
// begin depot := list [ i ] [ 2 ] ;
26717: LD_ADDR_VAR 0 8
26721: PUSH
26722: LD_VAR 0 3
26726: PUSH
26727: LD_VAR 0 1
26731: ARRAY
26732: PUSH
26733: LD_INT 2
26735: ARRAY
26736: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26737: LD_ADDR_VAR 0 5
26741: PUSH
26742: LD_VAR 0 3
26746: PUSH
26747: LD_VAR 0 1
26751: ARRAY
26752: PUSH
26753: LD_INT 1
26755: ARRAY
26756: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26757: LD_VAR 0 8
26761: PPUSH
26762: CALL_OW 301
26766: IFTRUE 26785
26768: PUSH
26769: LD_VAR 0 5
26773: PUSH
26774: LD_VAR 0 8
26778: PPUSH
26779: CALL_OW 255
26783: NONEQUAL
26784: OR
26785: IFFALSE 26814
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26787: LD_ADDR_EXP 108
26791: PUSH
26792: LD_EXP 108
26796: PPUSH
26797: LD_VAR 0 8
26801: PPUSH
26802: LD_INT 0
26804: PPUSH
26805: CALL_OW 1
26809: ST_TO_ADDR
// exit ;
26810: POP
26811: POP
26812: GO 27353
// end ; x := list [ i ] [ 3 ] ;
26814: LD_ADDR_VAR 0 6
26818: PUSH
26819: LD_VAR 0 3
26823: PUSH
26824: LD_VAR 0 1
26828: ARRAY
26829: PUSH
26830: LD_INT 3
26832: ARRAY
26833: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26834: LD_ADDR_VAR 0 7
26838: PUSH
26839: LD_VAR 0 3
26843: PUSH
26844: LD_VAR 0 1
26848: ARRAY
26849: PUSH
26850: LD_INT 4
26852: ARRAY
26853: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26854: LD_ADDR_VAR 0 9
26858: PUSH
26859: LD_VAR 0 6
26863: PPUSH
26864: LD_VAR 0 7
26868: PPUSH
26869: LD_INT 16
26871: PPUSH
26872: CALL 73422 0 3
26876: ST_TO_ADDR
// if not cratesNearbyPoint then
26877: LD_VAR 0 9
26881: NOT
26882: IFFALSE 26888
// exit ;
26884: POP
26885: POP
26886: GO 27353
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26888: LD_ADDR_VAR 0 4
26892: PUSH
26893: LD_INT 22
26895: PUSH
26896: LD_VAR 0 5
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 3
26907: PUSH
26908: LD_INT 60
26910: PUSH
26911: EMPTY
26912: LIST
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 91
26920: PUSH
26921: LD_VAR 0 8
26925: PUSH
26926: LD_INT 6
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 2
26936: PUSH
26937: LD_INT 25
26939: PUSH
26940: LD_INT 2
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 25
26949: PUSH
26950: LD_INT 16
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: LIST
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: PPUSH
26968: CALL_OW 69
26972: PUSH
26973: LD_VAR 0 8
26977: PPUSH
26978: CALL_OW 313
26982: PPUSH
26983: LD_INT 3
26985: PUSH
26986: LD_INT 60
26988: PUSH
26989: EMPTY
26990: LIST
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 2
26998: PUSH
26999: LD_INT 25
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 25
27011: PUSH
27012: LD_INT 16
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: LIST
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PPUSH
27028: CALL_OW 72
27032: UNION
27033: ST_TO_ADDR
// if tmp then
27034: LD_VAR 0 4
27038: IFFALSE 27118
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27040: LD_ADDR_VAR 0 4
27044: PUSH
27045: LD_VAR 0 4
27049: PPUSH
27050: LD_INT 3
27052: PPUSH
27053: CALL 71229 0 2
27057: ST_TO_ADDR
// for j in tmp do
27058: LD_ADDR_VAR 0 2
27062: PUSH
27063: LD_VAR 0 4
27067: PUSH
27068: FOR_IN
27069: IFFALSE 27112
// begin if IsInUnit ( j ) then
27071: LD_VAR 0 2
27075: PPUSH
27076: CALL_OW 310
27080: IFFALSE 27091
// ComExit ( j ) ;
27082: LD_VAR 0 2
27086: PPUSH
27087: CALL 71312 0 1
// AddComCollect ( j , x , y ) ;
27091: LD_VAR 0 2
27095: PPUSH
27096: LD_VAR 0 6
27100: PPUSH
27101: LD_VAR 0 7
27105: PPUSH
27106: CALL_OW 177
// end ;
27110: GO 27068
27112: POP
27113: POP
// exit ;
27114: POP
27115: POP
27116: GO 27353
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27118: LD_ADDR_VAR 0 4
27122: PUSH
27123: LD_INT 22
27125: PUSH
27126: LD_VAR 0 5
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 91
27137: PUSH
27138: LD_VAR 0 8
27142: PUSH
27143: LD_INT 8
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: LD_INT 34
27156: PUSH
27157: LD_INT 12
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 34
27166: PUSH
27167: LD_INT 51
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 34
27176: PUSH
27177: LD_INT 32
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 34
27186: PUSH
27187: LD_INT 89
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: LIST
27205: PPUSH
27206: CALL_OW 69
27210: ST_TO_ADDR
// if tmp then
27211: LD_VAR 0 4
27215: IFFALSE 27349
// begin for j in tmp do
27217: LD_ADDR_VAR 0 2
27221: PUSH
27222: LD_VAR 0 4
27226: PUSH
27227: FOR_IN
27228: IFFALSE 27347
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27230: LD_VAR 0 2
27234: PPUSH
27235: CALL_OW 262
27239: PUSH
27240: LD_INT 3
27242: EQUAL
27243: IFTRUE 27260
27245: PUSH
27246: LD_VAR 0 2
27250: PPUSH
27251: CALL_OW 261
27255: PUSH
27256: LD_INT 20
27258: GREATER
27259: OR
27260: IFFALSE 27274
27262: PUSH
27263: LD_VAR 0 2
27267: PPUSH
27268: CALL_OW 314
27272: NOT
27273: AND
27274: IFFALSE 27304
27276: PUSH
27277: LD_VAR 0 2
27281: PPUSH
27282: CALL_OW 263
27286: PUSH
27287: LD_INT 1
27289: NONEQUAL
27290: IFTRUE 27303
27292: PUSH
27293: LD_VAR 0 2
27297: PPUSH
27298: CALL_OW 311
27302: OR
27303: AND
27304: IFFALSE 27345
// begin ComCollect ( j , x , y ) ;
27306: LD_VAR 0 2
27310: PPUSH
27311: LD_VAR 0 6
27315: PPUSH
27316: LD_VAR 0 7
27320: PPUSH
27321: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27325: LD_VAR 0 2
27329: PPUSH
27330: LD_VAR 0 8
27334: PPUSH
27335: CALL_OW 172
// exit ;
27339: POP
27340: POP
27341: POP
27342: POP
27343: GO 27353
// end ;
27345: GO 27227
27347: POP
27348: POP
// end ; end ;
27349: GO 26714
27351: POP
27352: POP
// end ; end_of_file
27353: PPOPN 9
27355: END
// export function SOS_UnitDestroyed ( un ) ; begin
27356: LD_INT 0
27358: PPUSH
// ComRadiation ( un ) ;
27359: LD_VAR 0 1
27363: PPUSH
27364: CALL 28445 0 1
// end ;
27368: LD_VAR 0 2
27372: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27373: LD_INT 0
27375: PPUSH
// ComRadiation ( un ) ;
27376: LD_VAR 0 1
27380: PPUSH
27381: CALL 28445 0 1
// end ;
27385: LD_VAR 0 2
27389: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27390: LD_INT 0
27392: PPUSH
// end ;
27393: LD_VAR 0 4
27397: RET
// export function SOS_Command ( cmd ) ; begin
27398: LD_INT 0
27400: PPUSH
// end ;
27401: LD_VAR 0 2
27405: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27406: LD_INT 0
27408: PPUSH
// end ;
27409: LD_VAR 0 6
27413: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
27414: LD_INT 0
27416: PPUSH
27417: PPUSH
27418: PPUSH
27419: PPUSH
// if not vehicle or not factory then
27420: LD_VAR 0 1
27424: NOT
27425: IFTRUE 27434
27427: PUSH
27428: LD_VAR 0 2
27432: NOT
27433: OR
27434: IFFALSE 27438
// exit ;
27436: GO 28020
// if not factoryWaypoints then
27438: LD_EXP 106
27442: NOT
27443: IFFALSE 27447
// exit ;
27445: GO 28020
// for i := 1 to Count ( factoryWaypoints ) do
27447: LD_ADDR_VAR 0 4
27451: PUSH
27452: DOUBLE
27453: LD_INT 1
27455: DEC
27456: ST_TO_ADDR
27457: LD_EXP 106
27461: PPUSH
27462: CALL 34982 0 1
27466: PUSH
27467: FOR_TO
27468: IFFALSE 28018
// if factoryWaypoints [ i ] [ 2 ] = factory then
27470: LD_EXP 106
27474: PUSH
27475: LD_VAR 0 4
27479: ARRAY
27480: PUSH
27481: LD_INT 2
27483: ARRAY
27484: PUSH
27485: LD_VAR 0 2
27489: EQUAL
27490: IFFALSE 28016
// begin if GetControl ( vehicle ) = control_manual then
27492: LD_VAR 0 1
27496: PPUSH
27497: CALL_OW 263
27501: PUSH
27502: LD_INT 1
27504: EQUAL
27505: IFFALSE 27869
// begin driver := IsDrivenBy ( vehicle ) ;
27507: LD_ADDR_VAR 0 5
27511: PUSH
27512: LD_VAR 0 1
27516: PPUSH
27517: CALL_OW 311
27521: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27522: LD_VAR 0 5
27526: PUSH
27527: LD_EXP 107
27531: IN
27532: IFTRUE 27546
27534: PUSH
27535: LD_VAR 0 1
27539: PUSH
27540: LD_EXP 107
27544: IN
27545: OR
27546: IFFALSE 27552
// exit ;
27548: POP
27549: POP
27550: GO 28020
// if not HasTask ( driver ) then
27552: LD_VAR 0 5
27556: PPUSH
27557: CALL_OW 314
27561: NOT
27562: IFFALSE 27867
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27564: LD_ADDR_EXP 107
27568: PUSH
27569: LD_EXP 107
27573: PPUSH
27574: LD_VAR 0 5
27578: PPUSH
27579: CALL 70914 0 2
27583: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27584: LD_ADDR_EXP 107
27588: PUSH
27589: LD_EXP 107
27593: PPUSH
27594: LD_VAR 0 1
27598: PPUSH
27599: CALL 70914 0 2
27603: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27604: LD_ADDR_VAR 0 6
27608: PUSH
27609: LD_EXP 106
27613: PUSH
27614: LD_VAR 0 4
27618: ARRAY
27619: PUSH
27620: LD_INT 3
27622: ARRAY
27623: PPUSH
27624: LD_EXP 106
27628: PUSH
27629: LD_VAR 0 4
27633: ARRAY
27634: PUSH
27635: LD_INT 4
27637: ARRAY
27638: PPUSH
27639: CALL_OW 428
27643: ST_TO_ADDR
// if hex then
27644: LD_VAR 0 6
27648: IFFALSE 27666
// ComMoveUnit ( driver , hex ) else
27650: LD_VAR 0 5
27654: PPUSH
27655: LD_VAR 0 6
27659: PPUSH
27660: CALL_OW 112
27664: GO 27750
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27666: LD_VAR 0 1
27670: PPUSH
27671: LD_EXP 106
27675: PUSH
27676: LD_VAR 0 4
27680: ARRAY
27681: PUSH
27682: LD_INT 3
27684: ARRAY
27685: PPUSH
27686: LD_EXP 106
27690: PUSH
27691: LD_VAR 0 4
27695: ARRAY
27696: PUSH
27697: LD_INT 4
27699: ARRAY
27700: PPUSH
27701: CALL_OW 297
27705: PUSH
27706: LD_INT 0
27708: GREATER
27709: IFFALSE 27750
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27711: LD_VAR 0 5
27715: PPUSH
27716: LD_EXP 106
27720: PUSH
27721: LD_VAR 0 4
27725: ARRAY
27726: PUSH
27727: LD_INT 3
27729: ARRAY
27730: PPUSH
27731: LD_EXP 106
27735: PUSH
27736: LD_VAR 0 4
27740: ARRAY
27741: PUSH
27742: LD_INT 4
27744: ARRAY
27745: PPUSH
27746: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27750: LD_VAR 0 5
27754: PPUSH
27755: CALL_OW 181
// if Multiplayer then
27759: LD_OWVAR 4
27763: IFFALSE 27812
// begin repeat wait ( 10 ) ;
27765: LD_INT 10
27767: PPUSH
27768: CALL_OW 67
// until not IsInUnit ( driver ) ;
27772: LD_VAR 0 5
27776: PPUSH
27777: CALL_OW 310
27781: NOT
27782: IFFALSE 27765
// if not HasTask ( driver ) then
27784: LD_VAR 0 5
27788: PPUSH
27789: CALL_OW 314
27793: NOT
27794: IFFALSE 27810
// ComEnterUnit ( driver , factory ) ;
27796: LD_VAR 0 5
27800: PPUSH
27801: LD_VAR 0 2
27805: PPUSH
27806: CALL_OW 120
// end else
27810: GO 27826
// AddComEnterUnit ( driver , factory ) ;
27812: LD_VAR 0 5
27816: PPUSH
27817: LD_VAR 0 2
27821: PPUSH
27822: CALL_OW 180
// wait ( 0 0$1 ) ;
27826: LD_INT 35
27828: PPUSH
27829: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
27833: LD_ADDR_EXP 107
27837: PUSH
27838: LD_EXP 107
27842: PUSH
27843: LD_VAR 0 5
27847: DIFF
27848: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
27849: LD_ADDR_EXP 107
27853: PUSH
27854: LD_EXP 107
27858: PUSH
27859: LD_VAR 0 1
27863: DIFF
27864: ST_TO_ADDR
// break ;
27865: GO 28018
// end ; end else
27867: GO 28016
// if GetControl ( vehicle ) = control_remote then
27869: LD_VAR 0 1
27873: PPUSH
27874: CALL_OW 263
27878: PUSH
27879: LD_INT 2
27881: EQUAL
27882: IFFALSE 27968
// begin wait ( 0 0$2 ) ;
27884: LD_INT 70
27886: PPUSH
27887: CALL_OW 67
// repeat wait ( 10 ) ;
27891: LD_INT 10
27893: PPUSH
27894: CALL_OW 67
// Connect ( vehicle ) ;
27898: LD_VAR 0 1
27902: PPUSH
27903: CALL 41226 0 1
// until IsControledBy ( vehicle ) ;
27907: LD_VAR 0 1
27911: PPUSH
27912: CALL_OW 312
27916: IFFALSE 27891
// wait ( 10 ) ;
27918: LD_INT 10
27920: PPUSH
27921: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27925: LD_VAR 0 1
27929: PPUSH
27930: LD_EXP 106
27934: PUSH
27935: LD_VAR 0 4
27939: ARRAY
27940: PUSH
27941: LD_INT 3
27943: ARRAY
27944: PPUSH
27945: LD_EXP 106
27949: PUSH
27950: LD_VAR 0 4
27954: ARRAY
27955: PUSH
27956: LD_INT 4
27958: ARRAY
27959: PPUSH
27960: CALL_OW 111
// break ;
27964: GO 28018
// end else
27966: GO 28016
// begin wait ( 0 0$3 ) ;
27968: LD_INT 105
27970: PPUSH
27971: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27975: LD_VAR 0 1
27979: PPUSH
27980: LD_EXP 106
27984: PUSH
27985: LD_VAR 0 4
27989: ARRAY
27990: PUSH
27991: LD_INT 3
27993: ARRAY
27994: PPUSH
27995: LD_EXP 106
27999: PUSH
28000: LD_VAR 0 4
28004: ARRAY
28005: PUSH
28006: LD_INT 4
28008: ARRAY
28009: PPUSH
28010: CALL_OW 111
// break ;
28014: GO 28018
// end ; end ;
28016: GO 27467
28018: POP
28019: POP
// end ;
28020: LD_VAR 0 3
28024: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28025: LD_INT 0
28027: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28028: LD_VAR 0 1
28032: PUSH
28033: LD_INT 250
28035: EQUAL
28036: IFFALSE 28053
28038: PUSH
28039: LD_VAR 0 2
28043: PPUSH
28044: CALL_OW 264
28048: PUSH
28049: LD_INT 81
28051: EQUAL
28052: AND
28053: IFFALSE 28074
// MinerPlaceMine ( unit , x , y ) ;
28055: LD_VAR 0 2
28059: PPUSH
28060: LD_VAR 0 4
28064: PPUSH
28065: LD_VAR 0 5
28069: PPUSH
28070: CALL 31206 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28074: LD_VAR 0 1
28078: PUSH
28079: LD_INT 251
28081: EQUAL
28082: IFFALSE 28099
28084: PUSH
28085: LD_VAR 0 2
28089: PPUSH
28090: CALL_OW 264
28094: PUSH
28095: LD_INT 81
28097: EQUAL
28098: AND
28099: IFFALSE 28120
// MinerDetonateMine ( unit , x , y ) ;
28101: LD_VAR 0 2
28105: PPUSH
28106: LD_VAR 0 4
28110: PPUSH
28111: LD_VAR 0 5
28115: PPUSH
28116: CALL 31485 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28120: LD_VAR 0 1
28124: PUSH
28125: LD_INT 252
28127: EQUAL
28128: IFFALSE 28145
28130: PUSH
28131: LD_VAR 0 2
28135: PPUSH
28136: CALL_OW 264
28140: PUSH
28141: LD_INT 81
28143: EQUAL
28144: AND
28145: IFFALSE 28166
// MinerCreateMinefield ( unit , x , y ) ;
28147: LD_VAR 0 2
28151: PPUSH
28152: LD_VAR 0 4
28156: PPUSH
28157: LD_VAR 0 5
28161: PPUSH
28162: CALL 31904 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28166: LD_VAR 0 1
28170: PUSH
28171: LD_INT 253
28173: EQUAL
28174: IFFALSE 28191
28176: PUSH
28177: LD_VAR 0 2
28181: PPUSH
28182: CALL_OW 257
28186: PUSH
28187: LD_INT 5
28189: EQUAL
28190: AND
28191: IFFALSE 28212
// ComBinocular ( unit , x , y ) ;
28193: LD_VAR 0 2
28197: PPUSH
28198: LD_VAR 0 4
28202: PPUSH
28203: LD_VAR 0 5
28207: PPUSH
28208: CALL 32279 0 3
// if selectedUnit then
28212: LD_VAR 0 3
28216: IFFALSE 28276
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28218: LD_VAR 0 1
28222: PUSH
28223: LD_INT 254
28225: EQUAL
28226: IFFALSE 28243
28228: PUSH
28229: LD_VAR 0 2
28233: PPUSH
28234: CALL_OW 264
28238: PUSH
28239: LD_INT 99
28241: EQUAL
28242: AND
28243: IFFALSE 28260
28245: PUSH
28246: LD_VAR 0 3
28250: PPUSH
28251: CALL_OW 263
28255: PUSH
28256: LD_INT 3
28258: EQUAL
28259: AND
28260: IFFALSE 28276
// HackDestroyVehicle ( unit , selectedUnit ) ;
28262: LD_VAR 0 2
28266: PPUSH
28267: LD_VAR 0 3
28271: PPUSH
28272: CALL 30566 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28276: LD_VAR 0 1
28280: PUSH
28281: LD_INT 255
28283: EQUAL
28284: IFFALSE 28308
28286: PUSH
28287: LD_VAR 0 2
28291: PPUSH
28292: CALL_OW 264
28296: PUSH
28297: LD_INT 14
28299: PUSH
28300: LD_INT 53
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: IN
28307: AND
28308: IFFALSE 28326
28310: PUSH
28311: LD_VAR 0 4
28315: PPUSH
28316: LD_VAR 0 5
28320: PPUSH
28321: CALL_OW 488
28325: AND
28326: IFFALSE 28350
// CutTreeXYR ( unit , x , y , 12 ) ;
28328: LD_VAR 0 2
28332: PPUSH
28333: LD_VAR 0 4
28337: PPUSH
28338: LD_VAR 0 5
28342: PPUSH
28343: LD_INT 12
28345: PPUSH
28346: CALL 28541 0 4
// if cmd = 256 then
28350: LD_VAR 0 1
28354: PUSH
28355: LD_INT 256
28357: EQUAL
28358: IFFALSE 28379
// SetFactoryWaypoint ( unit , x , y ) ;
28360: LD_VAR 0 2
28364: PPUSH
28365: LD_VAR 0 4
28369: PPUSH
28370: LD_VAR 0 5
28374: PPUSH
28375: CALL 25901 0 3
// if cmd = 257 then
28379: LD_VAR 0 1
28383: PUSH
28384: LD_INT 257
28386: EQUAL
28387: IFFALSE 28408
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28389: LD_VAR 0 2
28393: PPUSH
28394: LD_VAR 0 4
28398: PPUSH
28399: LD_VAR 0 5
28403: PPUSH
28404: CALL 26397 0 3
// if cmd = 258 then
28408: LD_VAR 0 1
28412: PUSH
28413: LD_INT 258
28415: EQUAL
28416: IFFALSE 28440
// BurnTreeXYR ( unit , x , y , 8 ) ;
28418: LD_VAR 0 2
28422: PPUSH
28423: LD_VAR 0 4
28427: PPUSH
28428: LD_VAR 0 5
28432: PPUSH
28433: LD_INT 8
28435: PPUSH
28436: CALL 28941 0 4
// end ;
28440: LD_VAR 0 6
28444: RET
// export function ComRadiation ( un ) ; var eff ; begin
28445: LD_INT 0
28447: PPUSH
28448: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28449: LD_VAR 0 1
28453: PPUSH
28454: CALL_OW 264
28458: PUSH
28459: LD_INT 91
28461: NONEQUAL
28462: IFFALSE 28466
// exit ;
28464: GO 28536
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28466: LD_INT 68
28468: PPUSH
28469: LD_VAR 0 1
28473: PPUSH
28474: CALL_OW 255
28478: PPUSH
28479: CALL_OW 321
28483: PUSH
28484: LD_INT 2
28486: EQUAL
28487: IFFALSE 28499
// eff := 50 else
28489: LD_ADDR_VAR 0 3
28493: PUSH
28494: LD_INT 50
28496: ST_TO_ADDR
28497: GO 28507
// eff := 25 ;
28499: LD_ADDR_VAR 0 3
28503: PUSH
28504: LD_INT 25
28506: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28507: LD_VAR 0 1
28511: PPUSH
28512: CALL_OW 250
28516: PPUSH
28517: LD_VAR 0 1
28521: PPUSH
28522: CALL_OW 251
28526: PPUSH
28527: LD_VAR 0 3
28531: PPUSH
28532: CALL_OW 495
// end ;
28536: LD_VAR 0 2
28540: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28541: LD_INT 0
28543: PPUSH
28544: PPUSH
28545: PPUSH
28546: PPUSH
28547: PPUSH
28548: PPUSH
28549: PPUSH
28550: PPUSH
28551: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28552: LD_VAR 0 1
28556: PPUSH
28557: CALL_OW 302
28561: NOT
28562: IFTRUE 28581
28564: PUSH
28565: LD_VAR 0 2
28569: PPUSH
28570: LD_VAR 0 3
28574: PPUSH
28575: CALL_OW 488
28579: NOT
28580: OR
28581: IFTRUE 28590
28583: PUSH
28584: LD_VAR 0 4
28588: NOT
28589: OR
28590: IFFALSE 28594
// exit ;
28592: GO 28936
// list := [ ] ;
28594: LD_ADDR_VAR 0 13
28598: PUSH
28599: EMPTY
28600: ST_TO_ADDR
// if x - r < 0 then
28601: LD_VAR 0 2
28605: PUSH
28606: LD_VAR 0 4
28610: MINUS
28611: PUSH
28612: LD_INT 0
28614: LESS
28615: IFFALSE 28627
// min_x := 0 else
28617: LD_ADDR_VAR 0 7
28621: PUSH
28622: LD_INT 0
28624: ST_TO_ADDR
28625: GO 28643
// min_x := x - r ;
28627: LD_ADDR_VAR 0 7
28631: PUSH
28632: LD_VAR 0 2
28636: PUSH
28637: LD_VAR 0 4
28641: MINUS
28642: ST_TO_ADDR
// if y - r < 0 then
28643: LD_VAR 0 3
28647: PUSH
28648: LD_VAR 0 4
28652: MINUS
28653: PUSH
28654: LD_INT 0
28656: LESS
28657: IFFALSE 28669
// min_y := 0 else
28659: LD_ADDR_VAR 0 8
28663: PUSH
28664: LD_INT 0
28666: ST_TO_ADDR
28667: GO 28685
// min_y := y - r ;
28669: LD_ADDR_VAR 0 8
28673: PUSH
28674: LD_VAR 0 3
28678: PUSH
28679: LD_VAR 0 4
28683: MINUS
28684: ST_TO_ADDR
// max_x := x + r ;
28685: LD_ADDR_VAR 0 9
28689: PUSH
28690: LD_VAR 0 2
28694: PUSH
28695: LD_VAR 0 4
28699: PLUS
28700: ST_TO_ADDR
// max_y := y + r ;
28701: LD_ADDR_VAR 0 10
28705: PUSH
28706: LD_VAR 0 3
28710: PUSH
28711: LD_VAR 0 4
28715: PLUS
28716: ST_TO_ADDR
// for _x = min_x to max_x do
28717: LD_ADDR_VAR 0 11
28721: PUSH
28722: DOUBLE
28723: LD_VAR 0 7
28727: DEC
28728: ST_TO_ADDR
28729: LD_VAR 0 9
28733: PUSH
28734: FOR_TO
28735: IFFALSE 28854
// for _y = min_y to max_y do
28737: LD_ADDR_VAR 0 12
28741: PUSH
28742: DOUBLE
28743: LD_VAR 0 8
28747: DEC
28748: ST_TO_ADDR
28749: LD_VAR 0 10
28753: PUSH
28754: FOR_TO
28755: IFFALSE 28850
// begin if not ValidHex ( _x , _y ) then
28757: LD_VAR 0 11
28761: PPUSH
28762: LD_VAR 0 12
28766: PPUSH
28767: CALL_OW 488
28771: NOT
28772: IFFALSE 28776
// continue ;
28774: GO 28754
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28776: LD_VAR 0 11
28780: PPUSH
28781: LD_VAR 0 12
28785: PPUSH
28786: CALL_OW 351
28790: IFFALSE 28808
28792: PUSH
28793: LD_VAR 0 11
28797: PPUSH
28798: LD_VAR 0 12
28802: PPUSH
28803: CALL_OW 554
28807: AND
28808: IFFALSE 28848
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28810: LD_ADDR_VAR 0 13
28814: PUSH
28815: LD_VAR 0 13
28819: PPUSH
28820: LD_VAR 0 13
28824: PUSH
28825: LD_INT 1
28827: PLUS
28828: PPUSH
28829: LD_VAR 0 11
28833: PUSH
28834: LD_VAR 0 12
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PPUSH
28843: CALL_OW 2
28847: ST_TO_ADDR
// end ;
28848: GO 28754
28850: POP
28851: POP
28852: GO 28734
28854: POP
28855: POP
// if not list then
28856: LD_VAR 0 13
28860: NOT
28861: IFFALSE 28865
// exit ;
28863: GO 28936
// for i in list do
28865: LD_ADDR_VAR 0 6
28869: PUSH
28870: LD_VAR 0 13
28874: PUSH
28875: FOR_IN
28876: IFFALSE 28934
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28878: LD_VAR 0 1
28882: PPUSH
28883: LD_STRING M
28885: PUSH
28886: LD_VAR 0 6
28890: PUSH
28891: LD_INT 1
28893: ARRAY
28894: PUSH
28895: LD_VAR 0 6
28899: PUSH
28900: LD_INT 2
28902: ARRAY
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: LD_INT 0
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: PUSH
28925: EMPTY
28926: LIST
28927: PPUSH
28928: CALL_OW 447
28932: GO 28875
28934: POP
28935: POP
// end ;
28936: LD_VAR 0 5
28940: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28941: LD_INT 0
28943: PPUSH
28944: PPUSH
28945: PPUSH
28946: PPUSH
28947: PPUSH
28948: PPUSH
28949: PPUSH
28950: PPUSH
28951: PPUSH
28952: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28953: LD_VAR 0 1
28957: PPUSH
28958: CALL_OW 302
28962: NOT
28963: IFTRUE 28982
28965: PUSH
28966: LD_VAR 0 2
28970: PPUSH
28971: LD_VAR 0 3
28975: PPUSH
28976: CALL_OW 488
28980: NOT
28981: OR
28982: IFTRUE 28991
28984: PUSH
28985: LD_VAR 0 4
28989: NOT
28990: OR
28991: IFFALSE 28995
// exit ;
28993: GO 29512
// list := [ ] ;
28995: LD_ADDR_VAR 0 13
28999: PUSH
29000: EMPTY
29001: ST_TO_ADDR
// if x - r < 0 then
29002: LD_VAR 0 2
29006: PUSH
29007: LD_VAR 0 4
29011: MINUS
29012: PUSH
29013: LD_INT 0
29015: LESS
29016: IFFALSE 29028
// min_x := 0 else
29018: LD_ADDR_VAR 0 7
29022: PUSH
29023: LD_INT 0
29025: ST_TO_ADDR
29026: GO 29044
// min_x := x - r ;
29028: LD_ADDR_VAR 0 7
29032: PUSH
29033: LD_VAR 0 2
29037: PUSH
29038: LD_VAR 0 4
29042: MINUS
29043: ST_TO_ADDR
// if y - r < 0 then
29044: LD_VAR 0 3
29048: PUSH
29049: LD_VAR 0 4
29053: MINUS
29054: PUSH
29055: LD_INT 0
29057: LESS
29058: IFFALSE 29070
// min_y := 0 else
29060: LD_ADDR_VAR 0 8
29064: PUSH
29065: LD_INT 0
29067: ST_TO_ADDR
29068: GO 29086
// min_y := y - r ;
29070: LD_ADDR_VAR 0 8
29074: PUSH
29075: LD_VAR 0 3
29079: PUSH
29080: LD_VAR 0 4
29084: MINUS
29085: ST_TO_ADDR
// max_x := x + r ;
29086: LD_ADDR_VAR 0 9
29090: PUSH
29091: LD_VAR 0 2
29095: PUSH
29096: LD_VAR 0 4
29100: PLUS
29101: ST_TO_ADDR
// max_y := y + r ;
29102: LD_ADDR_VAR 0 10
29106: PUSH
29107: LD_VAR 0 3
29111: PUSH
29112: LD_VAR 0 4
29116: PLUS
29117: ST_TO_ADDR
// for _x = min_x to max_x do
29118: LD_ADDR_VAR 0 11
29122: PUSH
29123: DOUBLE
29124: LD_VAR 0 7
29128: DEC
29129: ST_TO_ADDR
29130: LD_VAR 0 9
29134: PUSH
29135: FOR_TO
29136: IFFALSE 29255
// for _y = min_y to max_y do
29138: LD_ADDR_VAR 0 12
29142: PUSH
29143: DOUBLE
29144: LD_VAR 0 8
29148: DEC
29149: ST_TO_ADDR
29150: LD_VAR 0 10
29154: PUSH
29155: FOR_TO
29156: IFFALSE 29251
// begin if not ValidHex ( _x , _y ) then
29158: LD_VAR 0 11
29162: PPUSH
29163: LD_VAR 0 12
29167: PPUSH
29168: CALL_OW 488
29172: NOT
29173: IFFALSE 29177
// continue ;
29175: GO 29155
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29177: LD_VAR 0 11
29181: PPUSH
29182: LD_VAR 0 12
29186: PPUSH
29187: CALL_OW 351
29191: IFFALSE 29209
29193: PUSH
29194: LD_VAR 0 11
29198: PPUSH
29199: LD_VAR 0 12
29203: PPUSH
29204: CALL_OW 554
29208: AND
29209: IFFALSE 29249
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29211: LD_ADDR_VAR 0 13
29215: PUSH
29216: LD_VAR 0 13
29220: PPUSH
29221: LD_VAR 0 13
29225: PUSH
29226: LD_INT 1
29228: PLUS
29229: PPUSH
29230: LD_VAR 0 11
29234: PUSH
29235: LD_VAR 0 12
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PPUSH
29244: CALL_OW 2
29248: ST_TO_ADDR
// end ;
29249: GO 29155
29251: POP
29252: POP
29253: GO 29135
29255: POP
29256: POP
// if not list then
29257: LD_VAR 0 13
29261: NOT
29262: IFFALSE 29266
// exit ;
29264: GO 29512
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29266: LD_ADDR_VAR 0 13
29270: PUSH
29271: LD_VAR 0 1
29275: PPUSH
29276: LD_VAR 0 13
29280: PPUSH
29281: LD_INT 1
29283: PPUSH
29284: LD_INT 1
29286: PPUSH
29287: CALL 38354 0 4
29291: ST_TO_ADDR
// ComStop ( flame ) ;
29292: LD_VAR 0 1
29296: PPUSH
29297: CALL_OW 141
// for i in list do
29301: LD_ADDR_VAR 0 6
29305: PUSH
29306: LD_VAR 0 13
29310: PUSH
29311: FOR_IN
29312: IFFALSE 29343
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29314: LD_VAR 0 1
29318: PPUSH
29319: LD_VAR 0 6
29323: PUSH
29324: LD_INT 1
29326: ARRAY
29327: PPUSH
29328: LD_VAR 0 6
29332: PUSH
29333: LD_INT 2
29335: ARRAY
29336: PPUSH
29337: CALL_OW 176
29341: GO 29311
29343: POP
29344: POP
// repeat wait ( 0 0$1 ) ;
29345: LD_INT 35
29347: PPUSH
29348: CALL_OW 67
// task := GetTaskList ( flame ) ;
29352: LD_ADDR_VAR 0 14
29356: PUSH
29357: LD_VAR 0 1
29361: PPUSH
29362: CALL_OW 437
29366: ST_TO_ADDR
// if not task then
29367: LD_VAR 0 14
29371: NOT
29372: IFFALSE 29376
// exit ;
29374: GO 29512
// if task [ 1 ] [ 1 ] <> | then
29376: LD_VAR 0 14
29380: PUSH
29381: LD_INT 1
29383: ARRAY
29384: PUSH
29385: LD_INT 1
29387: ARRAY
29388: PUSH
29389: LD_STRING |
29391: NONEQUAL
29392: IFFALSE 29396
// exit ;
29394: GO 29512
// _x := task [ 1 ] [ 2 ] ;
29396: LD_ADDR_VAR 0 11
29400: PUSH
29401: LD_VAR 0 14
29405: PUSH
29406: LD_INT 1
29408: ARRAY
29409: PUSH
29410: LD_INT 2
29412: ARRAY
29413: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29414: LD_ADDR_VAR 0 12
29418: PUSH
29419: LD_VAR 0 14
29423: PUSH
29424: LD_INT 1
29426: ARRAY
29427: PUSH
29428: LD_INT 3
29430: ARRAY
29431: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29432: LD_VAR 0 11
29436: PPUSH
29437: LD_VAR 0 12
29441: PPUSH
29442: CALL_OW 351
29446: NOT
29447: IFTRUE 29466
29449: PUSH
29450: LD_VAR 0 11
29454: PPUSH
29455: LD_VAR 0 12
29459: PPUSH
29460: CALL_OW 554
29464: NOT
29465: OR
29466: IFFALSE 29500
// begin task := Delete ( task , 1 ) ;
29468: LD_ADDR_VAR 0 14
29472: PUSH
29473: LD_VAR 0 14
29477: PPUSH
29478: LD_INT 1
29480: PPUSH
29481: CALL_OW 3
29485: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29486: LD_VAR 0 1
29490: PPUSH
29491: LD_VAR 0 14
29495: PPUSH
29496: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29500: LD_VAR 0 1
29504: PPUSH
29505: CALL_OW 314
29509: NOT
29510: IFFALSE 29345
// end ;
29512: LD_VAR 0 5
29516: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29517: LD_EXP 110
29521: NOT
29522: IFFALSE 29572
29524: GO 29526
29526: DISABLE
// begin initHack := true ;
29527: LD_ADDR_EXP 110
29531: PUSH
29532: LD_INT 1
29534: ST_TO_ADDR
// hackTanks := [ ] ;
29535: LD_ADDR_EXP 111
29539: PUSH
29540: EMPTY
29541: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29542: LD_ADDR_EXP 112
29546: PUSH
29547: EMPTY
29548: ST_TO_ADDR
// hackLimit := 3 ;
29549: LD_ADDR_EXP 113
29553: PUSH
29554: LD_INT 3
29556: ST_TO_ADDR
// hackDist := 12 ;
29557: LD_ADDR_EXP 114
29561: PUSH
29562: LD_INT 12
29564: ST_TO_ADDR
// hackCounter := [ ] ;
29565: LD_ADDR_EXP 115
29569: PUSH
29570: EMPTY
29571: ST_TO_ADDR
// end ;
29572: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29573: LD_EXP 110
29577: IFFALSE 29595
29579: PUSH
29580: LD_INT 34
29582: PUSH
29583: LD_INT 99
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PPUSH
29590: CALL_OW 69
29594: AND
29595: IFFALSE 29848
29597: GO 29599
29599: DISABLE
29600: LD_INT 0
29602: PPUSH
29603: PPUSH
// begin enable ;
29604: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29605: LD_ADDR_VAR 0 1
29609: PUSH
29610: LD_INT 34
29612: PUSH
29613: LD_INT 99
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PPUSH
29620: CALL_OW 69
29624: PUSH
29625: FOR_IN
29626: IFFALSE 29846
// begin if not i in hackTanks then
29628: LD_VAR 0 1
29632: PUSH
29633: LD_EXP 111
29637: IN
29638: NOT
29639: IFFALSE 29722
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29641: LD_ADDR_EXP 111
29645: PUSH
29646: LD_EXP 111
29650: PPUSH
29651: LD_EXP 111
29655: PUSH
29656: LD_INT 1
29658: PLUS
29659: PPUSH
29660: LD_VAR 0 1
29664: PPUSH
29665: CALL_OW 1
29669: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29670: LD_ADDR_EXP 112
29674: PUSH
29675: LD_EXP 112
29679: PPUSH
29680: LD_EXP 112
29684: PUSH
29685: LD_INT 1
29687: PLUS
29688: PPUSH
29689: EMPTY
29690: PPUSH
29691: CALL_OW 1
29695: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29696: LD_ADDR_EXP 115
29700: PUSH
29701: LD_EXP 115
29705: PPUSH
29706: LD_EXP 115
29710: PUSH
29711: LD_INT 1
29713: PLUS
29714: PPUSH
29715: EMPTY
29716: PPUSH
29717: CALL_OW 1
29721: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29722: LD_VAR 0 1
29726: PPUSH
29727: CALL_OW 302
29731: NOT
29732: IFFALSE 29745
// begin HackUnlinkAll ( i ) ;
29734: LD_VAR 0 1
29738: PPUSH
29739: CALL 29851 0 1
// continue ;
29743: GO 29625
// end ; HackCheckCapturedStatus ( i ) ;
29745: LD_VAR 0 1
29749: PPUSH
29750: CALL 30296 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29754: LD_ADDR_VAR 0 2
29758: PUSH
29759: LD_INT 81
29761: PUSH
29762: LD_VAR 0 1
29766: PPUSH
29767: CALL_OW 255
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 33
29778: PUSH
29779: LD_INT 3
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 91
29788: PUSH
29789: LD_VAR 0 1
29793: PUSH
29794: LD_EXP 114
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 50
29806: PUSH
29807: EMPTY
29808: LIST
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: PPUSH
29816: CALL_OW 69
29820: ST_TO_ADDR
// if not tmp then
29821: LD_VAR 0 2
29825: NOT
29826: IFFALSE 29830
// continue ;
29828: GO 29625
// HackLink ( i , tmp ) ;
29830: LD_VAR 0 1
29834: PPUSH
29835: LD_VAR 0 2
29839: PPUSH
29840: CALL 29987 0 2
// end ;
29844: GO 29625
29846: POP
29847: POP
// end ;
29848: PPOPN 2
29850: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29851: LD_INT 0
29853: PPUSH
29854: PPUSH
29855: PPUSH
// if not hack in hackTanks then
29856: LD_VAR 0 1
29860: PUSH
29861: LD_EXP 111
29865: IN
29866: NOT
29867: IFFALSE 29871
// exit ;
29869: GO 29982
// index := GetElementIndex ( hackTanks , hack ) ;
29871: LD_ADDR_VAR 0 4
29875: PUSH
29876: LD_EXP 111
29880: PPUSH
29881: LD_VAR 0 1
29885: PPUSH
29886: CALL 37649 0 2
29890: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29891: LD_EXP 112
29895: PUSH
29896: LD_VAR 0 4
29900: ARRAY
29901: IFFALSE 29982
// begin for i in hackTanksCaptured [ index ] do
29903: LD_ADDR_VAR 0 3
29907: PUSH
29908: LD_EXP 112
29912: PUSH
29913: LD_VAR 0 4
29917: ARRAY
29918: PUSH
29919: FOR_IN
29920: IFFALSE 29946
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29922: LD_VAR 0 3
29926: PUSH
29927: LD_INT 1
29929: ARRAY
29930: PPUSH
29931: LD_VAR 0 3
29935: PUSH
29936: LD_INT 2
29938: ARRAY
29939: PPUSH
29940: CALL_OW 235
29944: GO 29919
29946: POP
29947: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29948: LD_ADDR_EXP 112
29952: PUSH
29953: LD_EXP 112
29957: PPUSH
29958: LD_VAR 0 4
29962: PPUSH
29963: EMPTY
29964: PPUSH
29965: CALL_OW 1
29969: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29970: LD_VAR 0 1
29974: PPUSH
29975: LD_INT 0
29977: PPUSH
29978: CALL_OW 505
// end ; end ;
29982: LD_VAR 0 2
29986: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29987: LD_INT 0
29989: PPUSH
29990: PPUSH
29991: PPUSH
// if not hack in hackTanks or not vehicles then
29992: LD_VAR 0 1
29996: PUSH
29997: LD_EXP 111
30001: IN
30002: NOT
30003: IFTRUE 30012
30005: PUSH
30006: LD_VAR 0 2
30010: NOT
30011: OR
30012: IFFALSE 30016
// exit ;
30014: GO 30291
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30016: LD_ADDR_VAR 0 2
30020: PUSH
30021: LD_VAR 0 1
30025: PPUSH
30026: LD_VAR 0 2
30030: PPUSH
30031: LD_INT 1
30033: PPUSH
30034: LD_INT 1
30036: PPUSH
30037: CALL 38301 0 4
30041: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30042: LD_ADDR_VAR 0 5
30046: PUSH
30047: LD_EXP 111
30051: PPUSH
30052: LD_VAR 0 1
30056: PPUSH
30057: CALL 37649 0 2
30061: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30062: LD_EXP 112
30066: PUSH
30067: LD_VAR 0 5
30071: ARRAY
30072: PUSH
30073: LD_EXP 113
30077: LESS
30078: IFFALSE 30267
// begin for i := 1 to vehicles do
30080: LD_ADDR_VAR 0 4
30084: PUSH
30085: DOUBLE
30086: LD_INT 1
30088: DEC
30089: ST_TO_ADDR
30090: LD_VAR 0 2
30094: PUSH
30095: FOR_TO
30096: IFFALSE 30265
// begin if hackTanksCaptured [ index ] = hackLimit then
30098: LD_EXP 112
30102: PUSH
30103: LD_VAR 0 5
30107: ARRAY
30108: PUSH
30109: LD_EXP 113
30113: EQUAL
30114: IFFALSE 30118
// break ;
30116: GO 30265
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30118: LD_ADDR_EXP 115
30122: PUSH
30123: LD_EXP 115
30127: PPUSH
30128: LD_VAR 0 5
30132: PPUSH
30133: LD_EXP 115
30137: PUSH
30138: LD_VAR 0 5
30142: ARRAY
30143: PUSH
30144: LD_INT 1
30146: PLUS
30147: PPUSH
30148: CALL_OW 1
30152: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30153: LD_ADDR_EXP 112
30157: PUSH
30158: LD_EXP 112
30162: PPUSH
30163: LD_VAR 0 5
30167: PUSH
30168: LD_EXP 112
30172: PUSH
30173: LD_VAR 0 5
30177: ARRAY
30178: PUSH
30179: LD_INT 1
30181: PLUS
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PPUSH
30187: LD_VAR 0 2
30191: PUSH
30192: LD_VAR 0 4
30196: ARRAY
30197: PUSH
30198: LD_VAR 0 2
30202: PUSH
30203: LD_VAR 0 4
30207: ARRAY
30208: PPUSH
30209: CALL_OW 255
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PPUSH
30218: CALL 37866 0 3
30222: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30223: LD_VAR 0 2
30227: PUSH
30228: LD_VAR 0 4
30232: ARRAY
30233: PPUSH
30234: LD_VAR 0 1
30238: PPUSH
30239: CALL_OW 255
30243: PPUSH
30244: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30248: LD_VAR 0 2
30252: PUSH
30253: LD_VAR 0 4
30257: ARRAY
30258: PPUSH
30259: CALL_OW 141
// end ;
30263: GO 30095
30265: POP
30266: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30267: LD_VAR 0 1
30271: PPUSH
30272: LD_EXP 112
30276: PUSH
30277: LD_VAR 0 5
30281: ARRAY
30282: PUSH
30283: LD_INT 0
30285: PLUS
30286: PPUSH
30287: CALL_OW 505
// end ;
30291: LD_VAR 0 3
30295: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30296: LD_INT 0
30298: PPUSH
30299: PPUSH
30300: PPUSH
30301: PPUSH
// if not hack in hackTanks then
30302: LD_VAR 0 1
30306: PUSH
30307: LD_EXP 111
30311: IN
30312: NOT
30313: IFFALSE 30317
// exit ;
30315: GO 30561
// index := GetElementIndex ( hackTanks , hack ) ;
30317: LD_ADDR_VAR 0 4
30321: PUSH
30322: LD_EXP 111
30326: PPUSH
30327: LD_VAR 0 1
30331: PPUSH
30332: CALL 37649 0 2
30336: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30337: LD_ADDR_VAR 0 3
30341: PUSH
30342: DOUBLE
30343: LD_EXP 112
30347: PUSH
30348: LD_VAR 0 4
30352: ARRAY
30353: INC
30354: ST_TO_ADDR
30355: LD_INT 1
30357: PUSH
30358: FOR_DOWNTO
30359: IFFALSE 30535
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30361: LD_ADDR_VAR 0 5
30365: PUSH
30366: LD_EXP 112
30370: PUSH
30371: LD_VAR 0 4
30375: ARRAY
30376: PUSH
30377: LD_VAR 0 3
30381: ARRAY
30382: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30383: LD_VAR 0 5
30387: PUSH
30388: LD_INT 1
30390: ARRAY
30391: PPUSH
30392: CALL_OW 302
30396: NOT
30397: IFTRUE 30425
30399: PUSH
30400: LD_VAR 0 5
30404: PUSH
30405: LD_INT 1
30407: ARRAY
30408: PPUSH
30409: CALL_OW 255
30413: PUSH
30414: LD_VAR 0 1
30418: PPUSH
30419: CALL_OW 255
30423: NONEQUAL
30424: OR
30425: IFFALSE 30533
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30427: LD_VAR 0 5
30431: PUSH
30432: LD_INT 1
30434: ARRAY
30435: PPUSH
30436: CALL_OW 305
30440: IFFALSE 30468
30442: PUSH
30443: LD_VAR 0 5
30447: PUSH
30448: LD_INT 1
30450: ARRAY
30451: PPUSH
30452: CALL_OW 255
30456: PUSH
30457: LD_VAR 0 1
30461: PPUSH
30462: CALL_OW 255
30466: EQUAL
30467: AND
30468: IFFALSE 30492
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30470: LD_VAR 0 5
30474: PUSH
30475: LD_INT 1
30477: ARRAY
30478: PPUSH
30479: LD_VAR 0 5
30483: PUSH
30484: LD_INT 2
30486: ARRAY
30487: PPUSH
30488: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30492: LD_ADDR_EXP 112
30496: PUSH
30497: LD_EXP 112
30501: PPUSH
30502: LD_VAR 0 4
30506: PPUSH
30507: LD_EXP 112
30511: PUSH
30512: LD_VAR 0 4
30516: ARRAY
30517: PPUSH
30518: LD_VAR 0 3
30522: PPUSH
30523: CALL_OW 3
30527: PPUSH
30528: CALL_OW 1
30532: ST_TO_ADDR
// end ; end ;
30533: GO 30358
30535: POP
30536: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30537: LD_VAR 0 1
30541: PPUSH
30542: LD_EXP 112
30546: PUSH
30547: LD_VAR 0 4
30551: ARRAY
30552: PUSH
30553: LD_INT 0
30555: PLUS
30556: PPUSH
30557: CALL_OW 505
// end ;
30561: LD_VAR 0 2
30565: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30566: LD_INT 0
30568: PPUSH
30569: PPUSH
30570: PPUSH
30571: PPUSH
// if not hack in hackTanks then
30572: LD_VAR 0 1
30576: PUSH
30577: LD_EXP 111
30581: IN
30582: NOT
30583: IFFALSE 30587
// exit ;
30585: GO 30672
// index := GetElementIndex ( hackTanks , hack ) ;
30587: LD_ADDR_VAR 0 5
30591: PUSH
30592: LD_EXP 111
30596: PPUSH
30597: LD_VAR 0 1
30601: PPUSH
30602: CALL 37649 0 2
30606: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30607: LD_ADDR_VAR 0 4
30611: PUSH
30612: DOUBLE
30613: LD_INT 1
30615: DEC
30616: ST_TO_ADDR
30617: LD_EXP 112
30621: PUSH
30622: LD_VAR 0 5
30626: ARRAY
30627: PUSH
30628: FOR_TO
30629: IFFALSE 30670
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30631: LD_EXP 112
30635: PUSH
30636: LD_VAR 0 5
30640: ARRAY
30641: PUSH
30642: LD_VAR 0 4
30646: ARRAY
30647: PUSH
30648: LD_INT 1
30650: ARRAY
30651: PUSH
30652: LD_VAR 0 2
30656: EQUAL
30657: IFFALSE 30668
// KillUnit ( vehicle ) ;
30659: LD_VAR 0 2
30663: PPUSH
30664: CALL_OW 66
30668: GO 30628
30670: POP
30671: POP
// end ;
30672: LD_VAR 0 3
30676: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30677: LD_EXP 116
30681: NOT
30682: IFFALSE 30717
30684: GO 30686
30686: DISABLE
// begin initMiner := true ;
30687: LD_ADDR_EXP 116
30691: PUSH
30692: LD_INT 1
30694: ST_TO_ADDR
// minersList := [ ] ;
30695: LD_ADDR_EXP 117
30699: PUSH
30700: EMPTY
30701: ST_TO_ADDR
// minerMinesList := [ ] ;
30702: LD_ADDR_EXP 118
30706: PUSH
30707: EMPTY
30708: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30709: LD_ADDR_EXP 119
30713: PUSH
30714: LD_INT 5
30716: ST_TO_ADDR
// end ;
30717: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30718: LD_EXP 116
30722: IFFALSE 30740
30724: PUSH
30725: LD_INT 34
30727: PUSH
30728: LD_INT 81
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PPUSH
30735: CALL_OW 69
30739: AND
30740: IFFALSE 31203
30742: GO 30744
30744: DISABLE
30745: LD_INT 0
30747: PPUSH
30748: PPUSH
30749: PPUSH
30750: PPUSH
// begin enable ;
30751: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30752: LD_ADDR_VAR 0 1
30756: PUSH
30757: LD_INT 34
30759: PUSH
30760: LD_INT 81
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PPUSH
30767: CALL_OW 69
30771: PUSH
30772: FOR_IN
30773: IFFALSE 30845
// begin if not i in minersList then
30775: LD_VAR 0 1
30779: PUSH
30780: LD_EXP 117
30784: IN
30785: NOT
30786: IFFALSE 30843
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30788: LD_ADDR_EXP 117
30792: PUSH
30793: LD_EXP 117
30797: PPUSH
30798: LD_EXP 117
30802: PUSH
30803: LD_INT 1
30805: PLUS
30806: PPUSH
30807: LD_VAR 0 1
30811: PPUSH
30812: CALL_OW 1
30816: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30817: LD_ADDR_EXP 118
30821: PUSH
30822: LD_EXP 118
30826: PPUSH
30827: LD_EXP 118
30831: PUSH
30832: LD_INT 1
30834: PLUS
30835: PPUSH
30836: EMPTY
30837: PPUSH
30838: CALL_OW 1
30842: ST_TO_ADDR
// end end ;
30843: GO 30772
30845: POP
30846: POP
// for i := minerMinesList downto 1 do
30847: LD_ADDR_VAR 0 1
30851: PUSH
30852: DOUBLE
30853: LD_EXP 118
30857: INC
30858: ST_TO_ADDR
30859: LD_INT 1
30861: PUSH
30862: FOR_DOWNTO
30863: IFFALSE 31201
// begin if IsLive ( minersList [ i ] ) then
30865: LD_EXP 117
30869: PUSH
30870: LD_VAR 0 1
30874: ARRAY
30875: PPUSH
30876: CALL_OW 300
30880: IFFALSE 30908
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30882: LD_EXP 117
30886: PUSH
30887: LD_VAR 0 1
30891: ARRAY
30892: PPUSH
30893: LD_EXP 118
30897: PUSH
30898: LD_VAR 0 1
30902: ARRAY
30903: PPUSH
30904: CALL_OW 505
// if not minerMinesList [ i ] then
30908: LD_EXP 118
30912: PUSH
30913: LD_VAR 0 1
30917: ARRAY
30918: NOT
30919: IFFALSE 30923
// continue ;
30921: GO 30862
// for j := minerMinesList [ i ] downto 1 do
30923: LD_ADDR_VAR 0 2
30927: PUSH
30928: DOUBLE
30929: LD_EXP 118
30933: PUSH
30934: LD_VAR 0 1
30938: ARRAY
30939: INC
30940: ST_TO_ADDR
30941: LD_INT 1
30943: PUSH
30944: FOR_DOWNTO
30945: IFFALSE 31197
// begin side := GetSide ( minersList [ i ] ) ;
30947: LD_ADDR_VAR 0 3
30951: PUSH
30952: LD_EXP 117
30956: PUSH
30957: LD_VAR 0 1
30961: ARRAY
30962: PPUSH
30963: CALL_OW 255
30967: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30968: LD_ADDR_VAR 0 4
30972: PUSH
30973: LD_EXP 118
30977: PUSH
30978: LD_VAR 0 1
30982: ARRAY
30983: PUSH
30984: LD_VAR 0 2
30988: ARRAY
30989: PUSH
30990: LD_INT 1
30992: ARRAY
30993: PPUSH
30994: LD_EXP 118
30998: PUSH
30999: LD_VAR 0 1
31003: ARRAY
31004: PUSH
31005: LD_VAR 0 2
31009: ARRAY
31010: PUSH
31011: LD_INT 2
31013: ARRAY
31014: PPUSH
31015: CALL_OW 428
31019: ST_TO_ADDR
// if not tmp then
31020: LD_VAR 0 4
31024: NOT
31025: IFFALSE 31029
// continue ;
31027: GO 30944
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31029: LD_VAR 0 4
31033: PUSH
31034: LD_INT 81
31036: PUSH
31037: LD_VAR 0 3
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PPUSH
31046: CALL_OW 69
31050: IN
31051: IFFALSE 31101
31053: PUSH
31054: LD_EXP 118
31058: PUSH
31059: LD_VAR 0 1
31063: ARRAY
31064: PUSH
31065: LD_VAR 0 2
31069: ARRAY
31070: PUSH
31071: LD_INT 1
31073: ARRAY
31074: PPUSH
31075: LD_EXP 118
31079: PUSH
31080: LD_VAR 0 1
31084: ARRAY
31085: PUSH
31086: LD_VAR 0 2
31090: ARRAY
31091: PUSH
31092: LD_INT 2
31094: ARRAY
31095: PPUSH
31096: CALL_OW 458
31100: AND
31101: IFFALSE 31195
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31103: LD_EXP 118
31107: PUSH
31108: LD_VAR 0 1
31112: ARRAY
31113: PUSH
31114: LD_VAR 0 2
31118: ARRAY
31119: PUSH
31120: LD_INT 1
31122: ARRAY
31123: PPUSH
31124: LD_EXP 118
31128: PUSH
31129: LD_VAR 0 1
31133: ARRAY
31134: PUSH
31135: LD_VAR 0 2
31139: ARRAY
31140: PUSH
31141: LD_INT 2
31143: ARRAY
31144: PPUSH
31145: LD_VAR 0 3
31149: PPUSH
31150: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31154: LD_ADDR_EXP 118
31158: PUSH
31159: LD_EXP 118
31163: PPUSH
31164: LD_VAR 0 1
31168: PPUSH
31169: LD_EXP 118
31173: PUSH
31174: LD_VAR 0 1
31178: ARRAY
31179: PPUSH
31180: LD_VAR 0 2
31184: PPUSH
31185: CALL_OW 3
31189: PPUSH
31190: CALL_OW 1
31194: ST_TO_ADDR
// end ; end ;
31195: GO 30944
31197: POP
31198: POP
// end ;
31199: GO 30862
31201: POP
31202: POP
// end ;
31203: PPOPN 4
31205: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31206: LD_INT 0
31208: PPUSH
31209: PPUSH
// result := false ;
31210: LD_ADDR_VAR 0 4
31214: PUSH
31215: LD_INT 0
31217: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31218: LD_VAR 0 1
31222: PPUSH
31223: CALL_OW 264
31227: PUSH
31228: LD_INT 81
31230: EQUAL
31231: NOT
31232: IFFALSE 31236
// exit ;
31234: GO 31480
// index := GetElementIndex ( minersList , unit ) ;
31236: LD_ADDR_VAR 0 5
31240: PUSH
31241: LD_EXP 117
31245: PPUSH
31246: LD_VAR 0 1
31250: PPUSH
31251: CALL 37649 0 2
31255: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31256: LD_EXP 118
31260: PUSH
31261: LD_VAR 0 5
31265: ARRAY
31266: PUSH
31267: LD_EXP 119
31271: GREATEREQUAL
31272: IFFALSE 31276
// exit ;
31274: GO 31480
// ComMoveXY ( unit , x , y ) ;
31276: LD_VAR 0 1
31280: PPUSH
31281: LD_VAR 0 2
31285: PPUSH
31286: LD_VAR 0 3
31290: PPUSH
31291: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31295: LD_INT 35
31297: PPUSH
31298: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31302: LD_VAR 0 1
31306: PPUSH
31307: LD_VAR 0 2
31311: PPUSH
31312: LD_VAR 0 3
31316: PPUSH
31317: CALL 69695 0 3
31321: NOT
31322: IFFALSE 31335
31324: PUSH
31325: LD_VAR 0 1
31329: PPUSH
31330: CALL_OW 314
31334: AND
31335: IFFALSE 31339
// exit ;
31337: GO 31480
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31339: LD_VAR 0 2
31343: PPUSH
31344: LD_VAR 0 3
31348: PPUSH
31349: CALL_OW 428
31353: PUSH
31354: LD_VAR 0 1
31358: EQUAL
31359: IFFALSE 31373
31361: PUSH
31362: LD_VAR 0 1
31366: PPUSH
31367: CALL_OW 314
31371: NOT
31372: AND
31373: IFFALSE 31295
// PlaySoundXY ( x , y , PlantMine ) ;
31375: LD_VAR 0 2
31379: PPUSH
31380: LD_VAR 0 3
31384: PPUSH
31385: LD_STRING PlantMine
31387: PPUSH
31388: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31392: LD_VAR 0 2
31396: PPUSH
31397: LD_VAR 0 3
31401: PPUSH
31402: LD_VAR 0 1
31406: PPUSH
31407: CALL_OW 255
31411: PPUSH
31412: LD_INT 0
31414: PPUSH
31415: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31419: LD_ADDR_EXP 118
31423: PUSH
31424: LD_EXP 118
31428: PPUSH
31429: LD_VAR 0 5
31433: PUSH
31434: LD_EXP 118
31438: PUSH
31439: LD_VAR 0 5
31443: ARRAY
31444: PUSH
31445: LD_INT 1
31447: PLUS
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PPUSH
31453: LD_VAR 0 2
31457: PUSH
31458: LD_VAR 0 3
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PPUSH
31467: CALL 37866 0 3
31471: ST_TO_ADDR
// result := true ;
31472: LD_ADDR_VAR 0 4
31476: PUSH
31477: LD_INT 1
31479: ST_TO_ADDR
// end ;
31480: LD_VAR 0 4
31484: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31485: LD_INT 0
31487: PPUSH
31488: PPUSH
31489: PPUSH
// if not unit in minersList then
31490: LD_VAR 0 1
31494: PUSH
31495: LD_EXP 117
31499: IN
31500: NOT
31501: IFFALSE 31505
// exit ;
31503: GO 31899
// index := GetElementIndex ( minersList , unit ) ;
31505: LD_ADDR_VAR 0 6
31509: PUSH
31510: LD_EXP 117
31514: PPUSH
31515: LD_VAR 0 1
31519: PPUSH
31520: CALL 37649 0 2
31524: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31525: LD_ADDR_VAR 0 5
31529: PUSH
31530: DOUBLE
31531: LD_EXP 118
31535: PUSH
31536: LD_VAR 0 6
31540: ARRAY
31541: INC
31542: ST_TO_ADDR
31543: LD_INT 1
31545: PUSH
31546: FOR_DOWNTO
31547: IFFALSE 31710
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31549: LD_EXP 118
31553: PUSH
31554: LD_VAR 0 6
31558: ARRAY
31559: PUSH
31560: LD_VAR 0 5
31564: ARRAY
31565: PUSH
31566: LD_INT 1
31568: ARRAY
31569: PUSH
31570: LD_VAR 0 2
31574: EQUAL
31575: IFFALSE 31605
31577: PUSH
31578: LD_EXP 118
31582: PUSH
31583: LD_VAR 0 6
31587: ARRAY
31588: PUSH
31589: LD_VAR 0 5
31593: ARRAY
31594: PUSH
31595: LD_INT 2
31597: ARRAY
31598: PUSH
31599: LD_VAR 0 3
31603: EQUAL
31604: AND
31605: IFFALSE 31708
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31607: LD_EXP 118
31611: PUSH
31612: LD_VAR 0 6
31616: ARRAY
31617: PUSH
31618: LD_VAR 0 5
31622: ARRAY
31623: PUSH
31624: LD_INT 1
31626: ARRAY
31627: PPUSH
31628: LD_EXP 118
31632: PUSH
31633: LD_VAR 0 6
31637: ARRAY
31638: PUSH
31639: LD_VAR 0 5
31643: ARRAY
31644: PUSH
31645: LD_INT 2
31647: ARRAY
31648: PPUSH
31649: LD_VAR 0 1
31653: PPUSH
31654: CALL_OW 255
31658: PPUSH
31659: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31663: LD_ADDR_EXP 118
31667: PUSH
31668: LD_EXP 118
31672: PPUSH
31673: LD_VAR 0 6
31677: PPUSH
31678: LD_EXP 118
31682: PUSH
31683: LD_VAR 0 6
31687: ARRAY
31688: PPUSH
31689: LD_VAR 0 5
31693: PPUSH
31694: CALL_OW 3
31698: PPUSH
31699: CALL_OW 1
31703: ST_TO_ADDR
// exit ;
31704: POP
31705: POP
31706: GO 31899
// end ; end ;
31708: GO 31546
31710: POP
31711: POP
// for i := minerMinesList [ index ] downto 1 do
31712: LD_ADDR_VAR 0 5
31716: PUSH
31717: DOUBLE
31718: LD_EXP 118
31722: PUSH
31723: LD_VAR 0 6
31727: ARRAY
31728: INC
31729: ST_TO_ADDR
31730: LD_INT 1
31732: PUSH
31733: FOR_DOWNTO
31734: IFFALSE 31897
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31736: LD_EXP 118
31740: PUSH
31741: LD_VAR 0 6
31745: ARRAY
31746: PUSH
31747: LD_VAR 0 5
31751: ARRAY
31752: PUSH
31753: LD_INT 1
31755: ARRAY
31756: PPUSH
31757: LD_EXP 118
31761: PUSH
31762: LD_VAR 0 6
31766: ARRAY
31767: PUSH
31768: LD_VAR 0 5
31772: ARRAY
31773: PUSH
31774: LD_INT 2
31776: ARRAY
31777: PPUSH
31778: LD_VAR 0 2
31782: PPUSH
31783: LD_VAR 0 3
31787: PPUSH
31788: CALL_OW 298
31792: PUSH
31793: LD_INT 6
31795: LESS
31796: IFFALSE 31895
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31798: LD_EXP 118
31802: PUSH
31803: LD_VAR 0 6
31807: ARRAY
31808: PUSH
31809: LD_VAR 0 5
31813: ARRAY
31814: PUSH
31815: LD_INT 1
31817: ARRAY
31818: PPUSH
31819: LD_EXP 118
31823: PUSH
31824: LD_VAR 0 6
31828: ARRAY
31829: PUSH
31830: LD_VAR 0 5
31834: ARRAY
31835: PUSH
31836: LD_INT 2
31838: ARRAY
31839: PPUSH
31840: LD_VAR 0 1
31844: PPUSH
31845: CALL_OW 255
31849: PPUSH
31850: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31854: LD_ADDR_EXP 118
31858: PUSH
31859: LD_EXP 118
31863: PPUSH
31864: LD_VAR 0 6
31868: PPUSH
31869: LD_EXP 118
31873: PUSH
31874: LD_VAR 0 6
31878: ARRAY
31879: PPUSH
31880: LD_VAR 0 5
31884: PPUSH
31885: CALL_OW 3
31889: PPUSH
31890: CALL_OW 1
31894: ST_TO_ADDR
// end ; end ;
31895: GO 31733
31897: POP
31898: POP
// end ;
31899: LD_VAR 0 4
31903: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31904: LD_INT 0
31906: PPUSH
31907: PPUSH
31908: PPUSH
31909: PPUSH
31910: PPUSH
31911: PPUSH
31912: PPUSH
31913: PPUSH
31914: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31915: LD_VAR 0 1
31919: PPUSH
31920: CALL_OW 264
31924: PUSH
31925: LD_INT 81
31927: EQUAL
31928: NOT
31929: IFTRUE 31944
31931: PUSH
31932: LD_VAR 0 1
31936: PUSH
31937: LD_EXP 117
31941: IN
31942: NOT
31943: OR
31944: IFFALSE 31948
// exit ;
31946: GO 32274
// index := GetElementIndex ( minersList , unit ) ;
31948: LD_ADDR_VAR 0 6
31952: PUSH
31953: LD_EXP 117
31957: PPUSH
31958: LD_VAR 0 1
31962: PPUSH
31963: CALL 37649 0 2
31967: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31968: LD_ADDR_VAR 0 8
31972: PUSH
31973: LD_EXP 119
31977: PUSH
31978: LD_EXP 118
31982: PUSH
31983: LD_VAR 0 6
31987: ARRAY
31988: MINUS
31989: ST_TO_ADDR
// if not minesFreeAmount then
31990: LD_VAR 0 8
31994: NOT
31995: IFFALSE 31999
// exit ;
31997: GO 32274
// tmp := [ ] ;
31999: LD_ADDR_VAR 0 7
32003: PUSH
32004: EMPTY
32005: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32006: LD_ADDR_VAR 0 5
32010: PUSH
32011: DOUBLE
32012: LD_INT 1
32014: DEC
32015: ST_TO_ADDR
32016: LD_VAR 0 8
32020: PUSH
32021: FOR_TO
32022: IFFALSE 32221
// begin _d := rand ( 0 , 5 ) ;
32024: LD_ADDR_VAR 0 11
32028: PUSH
32029: LD_INT 0
32031: PPUSH
32032: LD_INT 5
32034: PPUSH
32035: CALL_OW 12
32039: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32040: LD_ADDR_VAR 0 12
32044: PUSH
32045: LD_INT 2
32047: PPUSH
32048: LD_INT 6
32050: PPUSH
32051: CALL_OW 12
32055: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32056: LD_ADDR_VAR 0 9
32060: PUSH
32061: LD_VAR 0 2
32065: PPUSH
32066: LD_VAR 0 11
32070: PPUSH
32071: LD_VAR 0 12
32075: PPUSH
32076: CALL_OW 272
32080: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32081: LD_ADDR_VAR 0 10
32085: PUSH
32086: LD_VAR 0 3
32090: PPUSH
32091: LD_VAR 0 11
32095: PPUSH
32096: LD_VAR 0 12
32100: PPUSH
32101: CALL_OW 273
32105: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32106: LD_VAR 0 9
32110: PPUSH
32111: LD_VAR 0 10
32115: PPUSH
32116: CALL_OW 488
32120: IFFALSE 32144
32122: PUSH
32123: LD_VAR 0 9
32127: PUSH
32128: LD_VAR 0 10
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_VAR 0 7
32141: IN
32142: NOT
32143: AND
32144: IFFALSE 32163
32146: PUSH
32147: LD_VAR 0 9
32151: PPUSH
32152: LD_VAR 0 10
32156: PPUSH
32157: CALL_OW 458
32161: NOT
32162: AND
32163: IFFALSE 32205
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32165: LD_ADDR_VAR 0 7
32169: PUSH
32170: LD_VAR 0 7
32174: PPUSH
32175: LD_VAR 0 7
32179: PUSH
32180: LD_INT 1
32182: PLUS
32183: PPUSH
32184: LD_VAR 0 9
32188: PUSH
32189: LD_VAR 0 10
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PPUSH
32198: CALL_OW 1
32202: ST_TO_ADDR
32203: GO 32219
// i := i - 1 ;
32205: LD_ADDR_VAR 0 5
32209: PUSH
32210: LD_VAR 0 5
32214: PUSH
32215: LD_INT 1
32217: MINUS
32218: ST_TO_ADDR
// end ;
32219: GO 32021
32221: POP
32222: POP
// for i in tmp do
32223: LD_ADDR_VAR 0 5
32227: PUSH
32228: LD_VAR 0 7
32232: PUSH
32233: FOR_IN
32234: IFFALSE 32272
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32236: LD_VAR 0 1
32240: PPUSH
32241: LD_VAR 0 5
32245: PUSH
32246: LD_INT 1
32248: ARRAY
32249: PPUSH
32250: LD_VAR 0 5
32254: PUSH
32255: LD_INT 2
32257: ARRAY
32258: PPUSH
32259: CALL 31206 0 3
32263: NOT
32264: IFFALSE 32270
// exit ;
32266: POP
32267: POP
32268: GO 32274
32270: GO 32233
32272: POP
32273: POP
// end ;
32274: LD_VAR 0 4
32278: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32279: LD_INT 0
32281: PPUSH
32282: PPUSH
32283: PPUSH
32284: PPUSH
32285: PPUSH
32286: PPUSH
32287: PPUSH
32288: PPUSH
32289: PPUSH
// if GetClass ( unit ) <> class_sniper then
32290: LD_VAR 0 1
32294: PPUSH
32295: CALL_OW 257
32299: PUSH
32300: LD_INT 5
32302: NONEQUAL
32303: IFFALSE 32307
// exit ;
32305: GO 32777
// dist := 8 ;
32307: LD_ADDR_VAR 0 5
32311: PUSH
32312: LD_INT 8
32314: ST_TO_ADDR
// viewRange := 12 ;
32315: LD_ADDR_VAR 0 8
32319: PUSH
32320: LD_INT 12
32322: ST_TO_ADDR
// side := GetSide ( unit ) ;
32323: LD_ADDR_VAR 0 6
32327: PUSH
32328: LD_VAR 0 1
32332: PPUSH
32333: CALL_OW 255
32337: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32338: LD_INT 61
32340: PPUSH
32341: LD_VAR 0 6
32345: PPUSH
32346: CALL_OW 321
32350: PUSH
32351: LD_INT 2
32353: EQUAL
32354: IFFALSE 32364
// viewRange := 16 ;
32356: LD_ADDR_VAR 0 8
32360: PUSH
32361: LD_INT 16
32363: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32364: LD_VAR 0 1
32368: PPUSH
32369: LD_VAR 0 2
32373: PPUSH
32374: LD_VAR 0 3
32378: PPUSH
32379: CALL_OW 297
32383: PUSH
32384: LD_VAR 0 5
32388: GREATER
32389: IFFALSE 32468
// begin ComMoveXY ( unit , x , y ) ;
32391: LD_VAR 0 1
32395: PPUSH
32396: LD_VAR 0 2
32400: PPUSH
32401: LD_VAR 0 3
32405: PPUSH
32406: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32410: LD_INT 35
32412: PPUSH
32413: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32417: LD_VAR 0 1
32421: PPUSH
32422: LD_VAR 0 2
32426: PPUSH
32427: LD_VAR 0 3
32431: PPUSH
32432: CALL 69695 0 3
32436: NOT
32437: IFFALSE 32441
// exit ;
32439: GO 32777
// until GetDistUnitXY ( unit , x , y ) < dist ;
32441: LD_VAR 0 1
32445: PPUSH
32446: LD_VAR 0 2
32450: PPUSH
32451: LD_VAR 0 3
32455: PPUSH
32456: CALL_OW 297
32460: PUSH
32461: LD_VAR 0 5
32465: LESS
32466: IFFALSE 32410
// end ; ComTurnXY ( unit , x , y ) ;
32468: LD_VAR 0 1
32472: PPUSH
32473: LD_VAR 0 2
32477: PPUSH
32478: LD_VAR 0 3
32482: PPUSH
32483: CALL_OW 118
// repeat if Multiplayer then
32487: LD_OWVAR 4
32491: IFFALSE 32502
// wait ( 35 ) else
32493: LD_INT 35
32495: PPUSH
32496: CALL_OW 67
32500: GO 32509
// wait ( 5 ) ;
32502: LD_INT 5
32504: PPUSH
32505: CALL_OW 67
// _d := GetDir ( unit ) ;
32509: LD_ADDR_VAR 0 11
32513: PUSH
32514: LD_VAR 0 1
32518: PPUSH
32519: CALL_OW 254
32523: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32524: LD_ADDR_VAR 0 7
32528: PUSH
32529: LD_VAR 0 1
32533: PPUSH
32534: CALL_OW 250
32538: PPUSH
32539: LD_VAR 0 1
32543: PPUSH
32544: CALL_OW 251
32548: PPUSH
32549: LD_VAR 0 2
32553: PPUSH
32554: LD_VAR 0 3
32558: PPUSH
32559: CALL 72331 0 4
32563: ST_TO_ADDR
// until dir = _d ;
32564: LD_VAR 0 7
32568: PUSH
32569: LD_VAR 0 11
32573: EQUAL
32574: IFFALSE 32487
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32576: LD_ADDR_VAR 0 9
32580: PUSH
32581: LD_VAR 0 1
32585: PPUSH
32586: CALL_OW 250
32590: PPUSH
32591: LD_VAR 0 7
32595: PPUSH
32596: LD_VAR 0 5
32600: PPUSH
32601: CALL_OW 272
32605: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32606: LD_ADDR_VAR 0 10
32610: PUSH
32611: LD_VAR 0 1
32615: PPUSH
32616: CALL_OW 251
32620: PPUSH
32621: LD_VAR 0 7
32625: PPUSH
32626: LD_VAR 0 5
32630: PPUSH
32631: CALL_OW 273
32635: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32636: LD_VAR 0 9
32640: PPUSH
32641: LD_VAR 0 10
32645: PPUSH
32646: CALL_OW 488
32650: NOT
32651: IFFALSE 32655
// exit ;
32653: GO 32777
// ComAnimCustom ( unit , 1 ) ;
32655: LD_VAR 0 1
32659: PPUSH
32660: LD_INT 1
32662: PPUSH
32663: CALL_OW 592
// p := 0 ;
32667: LD_ADDR_VAR 0 12
32671: PUSH
32672: LD_INT 0
32674: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32675: LD_VAR 0 9
32679: PPUSH
32680: LD_VAR 0 10
32684: PPUSH
32685: LD_VAR 0 6
32689: PPUSH
32690: LD_VAR 0 8
32694: PPUSH
32695: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32699: LD_INT 35
32701: PPUSH
32702: CALL_OW 67
// p := Inc ( p ) ;
32706: LD_ADDR_VAR 0 12
32710: PUSH
32711: LD_VAR 0 12
32715: PPUSH
32716: CALL 72287 0 1
32720: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32721: LD_VAR 0 12
32725: PUSH
32726: LD_INT 3
32728: EQUAL
32729: IFTRUE 32743
32731: PUSH
32732: LD_VAR 0 1
32736: PPUSH
32737: CALL_OW 302
32741: NOT
32742: OR
32743: IFTRUE 32756
32745: PUSH
32746: LD_VAR 0 1
32750: PPUSH
32751: CALL_OW 301
32755: OR
32756: IFFALSE 32699
// RemoveSeeing ( _x , _y , side ) ;
32758: LD_VAR 0 9
32762: PPUSH
32763: LD_VAR 0 10
32767: PPUSH
32768: LD_VAR 0 6
32772: PPUSH
32773: CALL_OW 331
// end ; end_of_file
32777: LD_VAR 0 4
32781: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32782: LD_INT 0
32784: PPUSH
32785: PPUSH
// if exist_mode then
32786: LD_VAR 0 2
32790: IFFALSE 32836
// begin unit := CreateCharacter ( prefix & ident ) ;
32792: LD_ADDR_VAR 0 5
32796: PUSH
32797: LD_VAR 0 3
32801: PUSH
32802: LD_VAR 0 1
32806: STR
32807: PPUSH
32808: CALL_OW 34
32812: ST_TO_ADDR
// if unit then
32813: LD_VAR 0 5
32817: IFFALSE 32834
// DeleteCharacters ( prefix & ident ) ;
32819: LD_VAR 0 3
32823: PUSH
32824: LD_VAR 0 1
32828: STR
32829: PPUSH
32830: CALL_OW 40
// end else
32834: GO 32851
// unit := NewCharacter ( ident ) ;
32836: LD_ADDR_VAR 0 5
32840: PUSH
32841: LD_VAR 0 1
32845: PPUSH
32846: CALL_OW 25
32850: ST_TO_ADDR
// result := unit ;
32851: LD_ADDR_VAR 0 4
32855: PUSH
32856: LD_VAR 0 5
32860: ST_TO_ADDR
// end ;
32861: LD_VAR 0 4
32865: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
32866: LD_INT 0
32868: PPUSH
32869: PPUSH
// if exist_mode then
32870: LD_VAR 0 2
32874: IFFALSE 32899
// unit := CreateCharacter ( prefix & ident ) else
32876: LD_ADDR_VAR 0 5
32880: PUSH
32881: LD_VAR 0 3
32885: PUSH
32886: LD_VAR 0 1
32890: STR
32891: PPUSH
32892: CALL_OW 34
32896: ST_TO_ADDR
32897: GO 32914
// unit := NewCharacter ( ident ) ;
32899: LD_ADDR_VAR 0 5
32903: PUSH
32904: LD_VAR 0 1
32908: PPUSH
32909: CALL_OW 25
32913: ST_TO_ADDR
// result := unit ;
32914: LD_ADDR_VAR 0 4
32918: PUSH
32919: LD_VAR 0 5
32923: ST_TO_ADDR
// end ;
32924: LD_VAR 0 4
32928: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32929: LD_INT 0
32931: PPUSH
32932: PPUSH
// if not side or not nation then
32933: LD_VAR 0 1
32937: NOT
32938: IFTRUE 32947
32940: PUSH
32941: LD_VAR 0 2
32945: NOT
32946: OR
32947: IFFALSE 32951
// exit ;
32949: GO 33721
// case nation of nation_american :
32951: LD_VAR 0 2
32955: PUSH
32956: LD_INT 1
32958: DOUBLE
32959: EQUAL
32960: IFTRUE 32964
32962: GO 33178
32964: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32965: LD_ADDR_VAR 0 4
32969: PUSH
32970: LD_INT 35
32972: PUSH
32973: LD_INT 45
32975: PUSH
32976: LD_INT 46
32978: PUSH
32979: LD_INT 47
32981: PUSH
32982: LD_INT 82
32984: PUSH
32985: LD_INT 83
32987: PUSH
32988: LD_INT 84
32990: PUSH
32991: LD_INT 85
32993: PUSH
32994: LD_INT 86
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: LD_INT 2
33002: PUSH
33003: LD_INT 6
33005: PUSH
33006: LD_INT 15
33008: PUSH
33009: LD_INT 16
33011: PUSH
33012: LD_INT 7
33014: PUSH
33015: LD_INT 12
33017: PUSH
33018: LD_INT 13
33020: PUSH
33021: LD_INT 10
33023: PUSH
33024: LD_INT 14
33026: PUSH
33027: LD_INT 20
33029: PUSH
33030: LD_INT 21
33032: PUSH
33033: LD_INT 22
33035: PUSH
33036: LD_INT 25
33038: PUSH
33039: LD_INT 32
33041: PUSH
33042: LD_INT 27
33044: PUSH
33045: LD_INT 36
33047: PUSH
33048: LD_INT 69
33050: PUSH
33051: LD_INT 39
33053: PUSH
33054: LD_INT 34
33056: PUSH
33057: LD_INT 40
33059: PUSH
33060: LD_INT 48
33062: PUSH
33063: LD_INT 49
33065: PUSH
33066: LD_INT 50
33068: PUSH
33069: LD_INT 51
33071: PUSH
33072: LD_INT 52
33074: PUSH
33075: LD_INT 53
33077: PUSH
33078: LD_INT 54
33080: PUSH
33081: LD_INT 55
33083: PUSH
33084: LD_INT 56
33086: PUSH
33087: LD_INT 57
33089: PUSH
33090: LD_INT 58
33092: PUSH
33093: LD_INT 59
33095: PUSH
33096: LD_INT 60
33098: PUSH
33099: LD_INT 61
33101: PUSH
33102: LD_INT 62
33104: PUSH
33105: LD_INT 80
33107: PUSH
33108: LD_INT 82
33110: PUSH
33111: LD_INT 83
33113: PUSH
33114: LD_INT 84
33116: PUSH
33117: LD_INT 85
33119: PUSH
33120: LD_INT 86
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: ST_TO_ADDR
33176: GO 33643
33178: LD_INT 2
33180: DOUBLE
33181: EQUAL
33182: IFTRUE 33186
33184: GO 33412
33186: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33187: LD_ADDR_VAR 0 4
33191: PUSH
33192: LD_INT 35
33194: PUSH
33195: LD_INT 45
33197: PUSH
33198: LD_INT 46
33200: PUSH
33201: LD_INT 47
33203: PUSH
33204: LD_INT 82
33206: PUSH
33207: LD_INT 83
33209: PUSH
33210: LD_INT 84
33212: PUSH
33213: LD_INT 85
33215: PUSH
33216: LD_INT 87
33218: PUSH
33219: LD_INT 70
33221: PUSH
33222: LD_INT 1
33224: PUSH
33225: LD_INT 11
33227: PUSH
33228: LD_INT 3
33230: PUSH
33231: LD_INT 4
33233: PUSH
33234: LD_INT 5
33236: PUSH
33237: LD_INT 6
33239: PUSH
33240: LD_INT 15
33242: PUSH
33243: LD_INT 18
33245: PUSH
33246: LD_INT 7
33248: PUSH
33249: LD_INT 17
33251: PUSH
33252: LD_INT 8
33254: PUSH
33255: LD_INT 20
33257: PUSH
33258: LD_INT 21
33260: PUSH
33261: LD_INT 22
33263: PUSH
33264: LD_INT 72
33266: PUSH
33267: LD_INT 26
33269: PUSH
33270: LD_INT 69
33272: PUSH
33273: LD_INT 39
33275: PUSH
33276: LD_INT 40
33278: PUSH
33279: LD_INT 41
33281: PUSH
33282: LD_INT 42
33284: PUSH
33285: LD_INT 43
33287: PUSH
33288: LD_INT 48
33290: PUSH
33291: LD_INT 49
33293: PUSH
33294: LD_INT 50
33296: PUSH
33297: LD_INT 51
33299: PUSH
33300: LD_INT 52
33302: PUSH
33303: LD_INT 53
33305: PUSH
33306: LD_INT 54
33308: PUSH
33309: LD_INT 55
33311: PUSH
33312: LD_INT 56
33314: PUSH
33315: LD_INT 60
33317: PUSH
33318: LD_INT 61
33320: PUSH
33321: LD_INT 62
33323: PUSH
33324: LD_INT 66
33326: PUSH
33327: LD_INT 67
33329: PUSH
33330: LD_INT 68
33332: PUSH
33333: LD_INT 81
33335: PUSH
33336: LD_INT 82
33338: PUSH
33339: LD_INT 83
33341: PUSH
33342: LD_INT 84
33344: PUSH
33345: LD_INT 85
33347: PUSH
33348: LD_INT 87
33350: PUSH
33351: LD_INT 88
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: ST_TO_ADDR
33410: GO 33643
33412: LD_INT 3
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33420
33418: GO 33642
33420: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33421: LD_ADDR_VAR 0 4
33425: PUSH
33426: LD_INT 46
33428: PUSH
33429: LD_INT 47
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: LD_INT 82
33440: PUSH
33441: LD_INT 83
33443: PUSH
33444: LD_INT 84
33446: PUSH
33447: LD_INT 85
33449: PUSH
33450: LD_INT 86
33452: PUSH
33453: LD_INT 11
33455: PUSH
33456: LD_INT 9
33458: PUSH
33459: LD_INT 20
33461: PUSH
33462: LD_INT 19
33464: PUSH
33465: LD_INT 21
33467: PUSH
33468: LD_INT 24
33470: PUSH
33471: LD_INT 22
33473: PUSH
33474: LD_INT 25
33476: PUSH
33477: LD_INT 28
33479: PUSH
33480: LD_INT 29
33482: PUSH
33483: LD_INT 30
33485: PUSH
33486: LD_INT 31
33488: PUSH
33489: LD_INT 37
33491: PUSH
33492: LD_INT 38
33494: PUSH
33495: LD_INT 32
33497: PUSH
33498: LD_INT 27
33500: PUSH
33501: LD_INT 33
33503: PUSH
33504: LD_INT 69
33506: PUSH
33507: LD_INT 39
33509: PUSH
33510: LD_INT 34
33512: PUSH
33513: LD_INT 40
33515: PUSH
33516: LD_INT 71
33518: PUSH
33519: LD_INT 23
33521: PUSH
33522: LD_INT 44
33524: PUSH
33525: LD_INT 48
33527: PUSH
33528: LD_INT 49
33530: PUSH
33531: LD_INT 50
33533: PUSH
33534: LD_INT 51
33536: PUSH
33537: LD_INT 52
33539: PUSH
33540: LD_INT 53
33542: PUSH
33543: LD_INT 54
33545: PUSH
33546: LD_INT 55
33548: PUSH
33549: LD_INT 56
33551: PUSH
33552: LD_INT 57
33554: PUSH
33555: LD_INT 58
33557: PUSH
33558: LD_INT 59
33560: PUSH
33561: LD_INT 63
33563: PUSH
33564: LD_INT 64
33566: PUSH
33567: LD_INT 65
33569: PUSH
33570: LD_INT 82
33572: PUSH
33573: LD_INT 83
33575: PUSH
33576: LD_INT 84
33578: PUSH
33579: LD_INT 85
33581: PUSH
33582: LD_INT 86
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: ST_TO_ADDR
33640: GO 33643
33642: POP
// if state > - 1 and state < 3 then
33643: LD_VAR 0 3
33647: PUSH
33648: LD_INT 1
33650: NEG
33651: GREATER
33652: IFFALSE 33664
33654: PUSH
33655: LD_VAR 0 3
33659: PUSH
33660: LD_INT 3
33662: LESS
33663: AND
33664: IFFALSE 33721
// for i in result do
33666: LD_ADDR_VAR 0 5
33670: PUSH
33671: LD_VAR 0 4
33675: PUSH
33676: FOR_IN
33677: IFFALSE 33719
// if GetTech ( i , side ) <> state then
33679: LD_VAR 0 5
33683: PPUSH
33684: LD_VAR 0 1
33688: PPUSH
33689: CALL_OW 321
33693: PUSH
33694: LD_VAR 0 3
33698: NONEQUAL
33699: IFFALSE 33717
// result := result diff i ;
33701: LD_ADDR_VAR 0 4
33705: PUSH
33706: LD_VAR 0 4
33710: PUSH
33711: LD_VAR 0 5
33715: DIFF
33716: ST_TO_ADDR
33717: GO 33676
33719: POP
33720: POP
// end ;
33721: LD_VAR 0 4
33725: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33726: LD_INT 0
33728: PPUSH
33729: PPUSH
33730: PPUSH
// result := true ;
33731: LD_ADDR_VAR 0 3
33735: PUSH
33736: LD_INT 1
33738: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33739: LD_ADDR_VAR 0 5
33743: PUSH
33744: LD_VAR 0 2
33748: PPUSH
33749: CALL_OW 480
33753: ST_TO_ADDR
// if not tmp then
33754: LD_VAR 0 5
33758: NOT
33759: IFFALSE 33763
// exit ;
33761: GO 33812
// for i in tmp do
33763: LD_ADDR_VAR 0 4
33767: PUSH
33768: LD_VAR 0 5
33772: PUSH
33773: FOR_IN
33774: IFFALSE 33810
// if GetTech ( i , side ) <> state_researched then
33776: LD_VAR 0 4
33780: PPUSH
33781: LD_VAR 0 1
33785: PPUSH
33786: CALL_OW 321
33790: PUSH
33791: LD_INT 2
33793: NONEQUAL
33794: IFFALSE 33808
// begin result := false ;
33796: LD_ADDR_VAR 0 3
33800: PUSH
33801: LD_INT 0
33803: ST_TO_ADDR
// exit ;
33804: POP
33805: POP
33806: GO 33812
// end ;
33808: GO 33773
33810: POP
33811: POP
// end ;
33812: LD_VAR 0 3
33816: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33817: LD_INT 0
33819: PPUSH
33820: PPUSH
33821: PPUSH
33822: PPUSH
33823: PPUSH
33824: PPUSH
33825: PPUSH
33826: PPUSH
33827: PPUSH
33828: PPUSH
33829: PPUSH
33830: PPUSH
33831: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33832: LD_VAR 0 1
33836: NOT
33837: IFTRUE 33854
33839: PUSH
33840: LD_VAR 0 1
33844: PPUSH
33845: CALL_OW 257
33849: PUSH
33850: LD_INT 9
33852: NONEQUAL
33853: OR
33854: IFFALSE 33858
// exit ;
33856: GO 34437
// side := GetSide ( unit ) ;
33858: LD_ADDR_VAR 0 9
33862: PUSH
33863: LD_VAR 0 1
33867: PPUSH
33868: CALL_OW 255
33872: ST_TO_ADDR
// tech_space := tech_spacanom ;
33873: LD_ADDR_VAR 0 12
33877: PUSH
33878: LD_INT 29
33880: ST_TO_ADDR
// tech_time := tech_taurad ;
33881: LD_ADDR_VAR 0 13
33885: PUSH
33886: LD_INT 28
33888: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33889: LD_ADDR_VAR 0 11
33893: PUSH
33894: LD_VAR 0 1
33898: PPUSH
33899: CALL_OW 310
33903: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33904: LD_VAR 0 11
33908: PPUSH
33909: CALL_OW 247
33913: PUSH
33914: LD_INT 2
33916: EQUAL
33917: IFFALSE 33921
// exit ;
33919: GO 34437
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33921: LD_ADDR_VAR 0 8
33925: PUSH
33926: LD_INT 81
33928: PUSH
33929: LD_VAR 0 9
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 3
33940: PUSH
33941: LD_INT 21
33943: PUSH
33944: LD_INT 3
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PPUSH
33959: CALL_OW 69
33963: ST_TO_ADDR
// if not tmp then
33964: LD_VAR 0 8
33968: NOT
33969: IFFALSE 33973
// exit ;
33971: GO 34437
// if in_unit then
33973: LD_VAR 0 11
33977: IFFALSE 34001
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33979: LD_ADDR_VAR 0 10
33983: PUSH
33984: LD_VAR 0 8
33988: PPUSH
33989: LD_VAR 0 11
33993: PPUSH
33994: CALL_OW 74
33998: ST_TO_ADDR
33999: GO 34021
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34001: LD_ADDR_VAR 0 10
34005: PUSH
34006: LD_VAR 0 8
34010: PPUSH
34011: LD_VAR 0 1
34015: PPUSH
34016: CALL_OW 74
34020: ST_TO_ADDR
// if not enemy then
34021: LD_VAR 0 10
34025: NOT
34026: IFFALSE 34030
// exit ;
34028: GO 34437
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34030: LD_VAR 0 11
34034: IFFALSE 34056
34036: PUSH
34037: LD_VAR 0 11
34041: PPUSH
34042: LD_VAR 0 10
34046: PPUSH
34047: CALL_OW 296
34051: PUSH
34052: LD_INT 13
34054: GREATER
34055: AND
34056: IFTRUE 34078
34058: PUSH
34059: LD_VAR 0 1
34063: PPUSH
34064: LD_VAR 0 10
34068: PPUSH
34069: CALL_OW 296
34073: PUSH
34074: LD_INT 12
34076: GREATER
34077: OR
34078: IFFALSE 34082
// exit ;
34080: GO 34437
// missile := [ 1 ] ;
34082: LD_ADDR_VAR 0 14
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34093: LD_VAR 0 9
34097: PPUSH
34098: LD_VAR 0 12
34102: PPUSH
34103: CALL_OW 325
34107: IFFALSE 34136
// missile := Replace ( missile , missile + 1 , 2 ) ;
34109: LD_ADDR_VAR 0 14
34113: PUSH
34114: LD_VAR 0 14
34118: PPUSH
34119: LD_VAR 0 14
34123: PUSH
34124: LD_INT 1
34126: PLUS
34127: PPUSH
34128: LD_INT 2
34130: PPUSH
34131: CALL_OW 1
34135: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34136: LD_VAR 0 9
34140: PPUSH
34141: LD_VAR 0 13
34145: PPUSH
34146: CALL_OW 325
34150: IFFALSE 34174
34152: PUSH
34153: LD_VAR 0 10
34157: PPUSH
34158: CALL_OW 255
34162: PPUSH
34163: LD_VAR 0 13
34167: PPUSH
34168: CALL_OW 325
34172: NOT
34173: AND
34174: IFFALSE 34203
// missile := Replace ( missile , missile + 1 , 3 ) ;
34176: LD_ADDR_VAR 0 14
34180: PUSH
34181: LD_VAR 0 14
34185: PPUSH
34186: LD_VAR 0 14
34190: PUSH
34191: LD_INT 1
34193: PLUS
34194: PPUSH
34195: LD_INT 3
34197: PPUSH
34198: CALL_OW 1
34202: ST_TO_ADDR
// if missile < 2 then
34203: LD_VAR 0 14
34207: PUSH
34208: LD_INT 2
34210: LESS
34211: IFFALSE 34215
// exit ;
34213: GO 34437
// x := GetX ( enemy ) ;
34215: LD_ADDR_VAR 0 4
34219: PUSH
34220: LD_VAR 0 10
34224: PPUSH
34225: CALL_OW 250
34229: ST_TO_ADDR
// y := GetY ( enemy ) ;
34230: LD_ADDR_VAR 0 5
34234: PUSH
34235: LD_VAR 0 10
34239: PPUSH
34240: CALL_OW 251
34244: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34245: LD_ADDR_VAR 0 6
34249: PUSH
34250: LD_VAR 0 4
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PPUSH
34259: LD_INT 1
34261: PPUSH
34262: CALL_OW 12
34266: PLUS
34267: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34268: LD_ADDR_VAR 0 7
34272: PUSH
34273: LD_VAR 0 5
34277: PUSH
34278: LD_INT 1
34280: NEG
34281: PPUSH
34282: LD_INT 1
34284: PPUSH
34285: CALL_OW 12
34289: PLUS
34290: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34291: LD_VAR 0 6
34295: PPUSH
34296: LD_VAR 0 7
34300: PPUSH
34301: CALL_OW 488
34305: NOT
34306: IFFALSE 34328
// begin _x := x ;
34308: LD_ADDR_VAR 0 6
34312: PUSH
34313: LD_VAR 0 4
34317: ST_TO_ADDR
// _y := y ;
34318: LD_ADDR_VAR 0 7
34322: PUSH
34323: LD_VAR 0 5
34327: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34328: LD_ADDR_VAR 0 3
34332: PUSH
34333: LD_INT 1
34335: PPUSH
34336: LD_VAR 0 14
34340: PPUSH
34341: CALL_OW 12
34345: ST_TO_ADDR
// case i of 1 :
34346: LD_VAR 0 3
34350: PUSH
34351: LD_INT 1
34353: DOUBLE
34354: EQUAL
34355: IFTRUE 34359
34357: GO 34376
34359: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34360: LD_VAR 0 1
34364: PPUSH
34365: LD_VAR 0 10
34369: PPUSH
34370: CALL_OW 115
34374: GO 34437
34376: LD_INT 2
34378: DOUBLE
34379: EQUAL
34380: IFTRUE 34384
34382: GO 34406
34384: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34385: LD_VAR 0 1
34389: PPUSH
34390: LD_VAR 0 6
34394: PPUSH
34395: LD_VAR 0 7
34399: PPUSH
34400: CALL_OW 153
34404: GO 34437
34406: LD_INT 3
34408: DOUBLE
34409: EQUAL
34410: IFTRUE 34414
34412: GO 34436
34414: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34415: LD_VAR 0 1
34419: PPUSH
34420: LD_VAR 0 6
34424: PPUSH
34425: LD_VAR 0 7
34429: PPUSH
34430: CALL_OW 154
34434: GO 34437
34436: POP
// end ;
34437: LD_VAR 0 2
34441: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34442: LD_INT 0
34444: PPUSH
34445: PPUSH
34446: PPUSH
34447: PPUSH
34448: PPUSH
34449: PPUSH
// if not unit or not building then
34450: LD_VAR 0 1
34454: NOT
34455: IFTRUE 34464
34457: PUSH
34458: LD_VAR 0 2
34462: NOT
34463: OR
34464: IFFALSE 34468
// exit ;
34466: GO 34626
// x := GetX ( building ) ;
34468: LD_ADDR_VAR 0 5
34472: PUSH
34473: LD_VAR 0 2
34477: PPUSH
34478: CALL_OW 250
34482: ST_TO_ADDR
// y := GetY ( building ) ;
34483: LD_ADDR_VAR 0 6
34487: PUSH
34488: LD_VAR 0 2
34492: PPUSH
34493: CALL_OW 251
34497: ST_TO_ADDR
// for i := 0 to 5 do
34498: LD_ADDR_VAR 0 4
34502: PUSH
34503: DOUBLE
34504: LD_INT 0
34506: DEC
34507: ST_TO_ADDR
34508: LD_INT 5
34510: PUSH
34511: FOR_TO
34512: IFFALSE 34624
// begin _x := ShiftX ( x , i , 3 ) ;
34514: LD_ADDR_VAR 0 7
34518: PUSH
34519: LD_VAR 0 5
34523: PPUSH
34524: LD_VAR 0 4
34528: PPUSH
34529: LD_INT 3
34531: PPUSH
34532: CALL_OW 272
34536: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34537: LD_ADDR_VAR 0 8
34541: PUSH
34542: LD_VAR 0 6
34546: PPUSH
34547: LD_VAR 0 4
34551: PPUSH
34552: LD_INT 3
34554: PPUSH
34555: CALL_OW 273
34559: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34560: LD_VAR 0 7
34564: PPUSH
34565: LD_VAR 0 8
34569: PPUSH
34570: CALL_OW 488
34574: NOT
34575: IFFALSE 34579
// continue ;
34577: GO 34511
// if HexInfo ( _x , _y ) = 0 then
34579: LD_VAR 0 7
34583: PPUSH
34584: LD_VAR 0 8
34588: PPUSH
34589: CALL_OW 428
34593: PUSH
34594: LD_INT 0
34596: EQUAL
34597: IFFALSE 34622
// begin ComMoveXY ( unit , _x , _y ) ;
34599: LD_VAR 0 1
34603: PPUSH
34604: LD_VAR 0 7
34608: PPUSH
34609: LD_VAR 0 8
34613: PPUSH
34614: CALL_OW 111
// exit ;
34618: POP
34619: POP
34620: GO 34626
// end ; end ;
34622: GO 34511
34624: POP
34625: POP
// end ;
34626: LD_VAR 0 3
34630: RET
// export function ScanBase ( side , base_area ) ; begin
34631: LD_INT 0
34633: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34634: LD_ADDR_VAR 0 3
34638: PUSH
34639: LD_VAR 0 2
34643: PPUSH
34644: LD_INT 81
34646: PUSH
34647: LD_VAR 0 1
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PPUSH
34656: CALL_OW 70
34660: ST_TO_ADDR
// end ;
34661: LD_VAR 0 3
34665: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34666: LD_INT 0
34668: PPUSH
34669: PPUSH
34670: PPUSH
34671: PPUSH
// result := false ;
34672: LD_ADDR_VAR 0 2
34676: PUSH
34677: LD_INT 0
34679: ST_TO_ADDR
// side := GetSide ( unit ) ;
34680: LD_ADDR_VAR 0 3
34684: PUSH
34685: LD_VAR 0 1
34689: PPUSH
34690: CALL_OW 255
34694: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34695: LD_ADDR_VAR 0 4
34699: PUSH
34700: LD_VAR 0 1
34704: PPUSH
34705: CALL_OW 248
34709: ST_TO_ADDR
// case nat of 1 :
34710: LD_VAR 0 4
34714: PUSH
34715: LD_INT 1
34717: DOUBLE
34718: EQUAL
34719: IFTRUE 34723
34721: GO 34734
34723: POP
// tech := tech_lassight ; 2 :
34724: LD_ADDR_VAR 0 5
34728: PUSH
34729: LD_INT 12
34731: ST_TO_ADDR
34732: GO 34773
34734: LD_INT 2
34736: DOUBLE
34737: EQUAL
34738: IFTRUE 34742
34740: GO 34753
34742: POP
// tech := tech_mortar ; 3 :
34743: LD_ADDR_VAR 0 5
34747: PUSH
34748: LD_INT 41
34750: ST_TO_ADDR
34751: GO 34773
34753: LD_INT 3
34755: DOUBLE
34756: EQUAL
34757: IFTRUE 34761
34759: GO 34772
34761: POP
// tech := tech_bazooka ; end ;
34762: LD_ADDR_VAR 0 5
34766: PUSH
34767: LD_INT 44
34769: ST_TO_ADDR
34770: GO 34773
34772: POP
// if Researched ( side , tech ) then
34773: LD_VAR 0 3
34777: PPUSH
34778: LD_VAR 0 5
34782: PPUSH
34783: CALL_OW 325
34787: IFFALSE 34814
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34789: LD_ADDR_VAR 0 2
34793: PUSH
34794: LD_INT 5
34796: PUSH
34797: LD_INT 8
34799: PUSH
34800: LD_INT 9
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: LIST
34807: PUSH
34808: LD_VAR 0 4
34812: ARRAY
34813: ST_TO_ADDR
// end ;
34814: LD_VAR 0 2
34818: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34819: LD_INT 0
34821: PPUSH
34822: PPUSH
34823: PPUSH
// if not mines then
34824: LD_VAR 0 2
34828: NOT
34829: IFFALSE 34833
// exit ;
34831: GO 34977
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34833: LD_ADDR_VAR 0 5
34837: PUSH
34838: LD_INT 81
34840: PUSH
34841: LD_VAR 0 1
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 3
34852: PUSH
34853: LD_INT 21
34855: PUSH
34856: LD_INT 3
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PPUSH
34871: CALL_OW 69
34875: ST_TO_ADDR
// for i in mines do
34876: LD_ADDR_VAR 0 4
34880: PUSH
34881: LD_VAR 0 2
34885: PUSH
34886: FOR_IN
34887: IFFALSE 34975
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34889: LD_VAR 0 4
34893: PUSH
34894: LD_INT 1
34896: ARRAY
34897: PPUSH
34898: LD_VAR 0 4
34902: PUSH
34903: LD_INT 2
34905: ARRAY
34906: PPUSH
34907: CALL_OW 458
34911: NOT
34912: IFFALSE 34916
// continue ;
34914: GO 34886
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34916: LD_VAR 0 4
34920: PUSH
34921: LD_INT 1
34923: ARRAY
34924: PPUSH
34925: LD_VAR 0 4
34929: PUSH
34930: LD_INT 2
34932: ARRAY
34933: PPUSH
34934: CALL_OW 428
34938: PUSH
34939: LD_VAR 0 5
34943: IN
34944: IFFALSE 34973
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34946: LD_VAR 0 4
34950: PUSH
34951: LD_INT 1
34953: ARRAY
34954: PPUSH
34955: LD_VAR 0 4
34959: PUSH
34960: LD_INT 2
34962: ARRAY
34963: PPUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: CALL_OW 456
// end ;
34973: GO 34886
34975: POP
34976: POP
// end ;
34977: LD_VAR 0 3
34981: RET
// export function Count ( array ) ; begin
34982: LD_INT 0
34984: PPUSH
// result := array + 0 ;
34985: LD_ADDR_VAR 0 2
34989: PUSH
34990: LD_VAR 0 1
34994: PUSH
34995: LD_INT 0
34997: PLUS
34998: ST_TO_ADDR
// end ;
34999: LD_VAR 0 2
35003: RET
// export function IsEmpty ( building ) ; begin
35004: LD_INT 0
35006: PPUSH
// if not building then
35007: LD_VAR 0 1
35011: NOT
35012: IFFALSE 35016
// exit ;
35014: GO 35059
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35016: LD_ADDR_VAR 0 2
35020: PUSH
35021: LD_VAR 0 1
35025: PUSH
35026: LD_INT 22
35028: PUSH
35029: LD_VAR 0 1
35033: PPUSH
35034: CALL_OW 255
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 58
35045: PUSH
35046: EMPTY
35047: LIST
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PPUSH
35053: CALL_OW 69
35057: IN
35058: ST_TO_ADDR
// end ;
35059: LD_VAR 0 2
35063: RET
// export function IsNotFull ( building ) ; var places ; begin
35064: LD_INT 0
35066: PPUSH
35067: PPUSH
// if not building then
35068: LD_VAR 0 1
35072: NOT
35073: IFFALSE 35077
// exit ;
35075: GO 35105
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35077: LD_ADDR_VAR 0 2
35081: PUSH
35082: LD_VAR 0 1
35086: PPUSH
35087: LD_INT 3
35089: PUSH
35090: LD_INT 62
35092: PUSH
35093: EMPTY
35094: LIST
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PPUSH
35100: CALL_OW 72
35104: ST_TO_ADDR
// end ;
35105: LD_VAR 0 2
35109: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35110: LD_INT 0
35112: PPUSH
35113: PPUSH
35114: PPUSH
35115: PPUSH
// tmp := [ ] ;
35116: LD_ADDR_VAR 0 3
35120: PUSH
35121: EMPTY
35122: ST_TO_ADDR
// list := [ ] ;
35123: LD_ADDR_VAR 0 5
35127: PUSH
35128: EMPTY
35129: ST_TO_ADDR
// for i = 16 to 25 do
35130: LD_ADDR_VAR 0 4
35134: PUSH
35135: DOUBLE
35136: LD_INT 16
35138: DEC
35139: ST_TO_ADDR
35140: LD_INT 25
35142: PUSH
35143: FOR_TO
35144: IFFALSE 35217
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35146: LD_ADDR_VAR 0 3
35150: PUSH
35151: LD_VAR 0 3
35155: PUSH
35156: LD_INT 22
35158: PUSH
35159: LD_VAR 0 1
35163: PPUSH
35164: CALL_OW 255
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 91
35175: PUSH
35176: LD_VAR 0 1
35180: PUSH
35181: LD_INT 6
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 30
35191: PUSH
35192: LD_VAR 0 4
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: LIST
35205: PUSH
35206: EMPTY
35207: LIST
35208: PPUSH
35209: CALL_OW 69
35213: ADD
35214: ST_TO_ADDR
35215: GO 35143
35217: POP
35218: POP
// for i = 1 to tmp do
35219: LD_ADDR_VAR 0 4
35223: PUSH
35224: DOUBLE
35225: LD_INT 1
35227: DEC
35228: ST_TO_ADDR
35229: LD_VAR 0 3
35233: PUSH
35234: FOR_TO
35235: IFFALSE 35323
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35237: LD_ADDR_VAR 0 5
35241: PUSH
35242: LD_VAR 0 5
35246: PUSH
35247: LD_VAR 0 3
35251: PUSH
35252: LD_VAR 0 4
35256: ARRAY
35257: PPUSH
35258: CALL_OW 266
35262: PUSH
35263: LD_VAR 0 3
35267: PUSH
35268: LD_VAR 0 4
35272: ARRAY
35273: PPUSH
35274: CALL_OW 250
35278: PUSH
35279: LD_VAR 0 3
35283: PUSH
35284: LD_VAR 0 4
35288: ARRAY
35289: PPUSH
35290: CALL_OW 251
35294: PUSH
35295: LD_VAR 0 3
35299: PUSH
35300: LD_VAR 0 4
35304: ARRAY
35305: PPUSH
35306: CALL_OW 254
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: PUSH
35317: EMPTY
35318: LIST
35319: ADD
35320: ST_TO_ADDR
35321: GO 35234
35323: POP
35324: POP
// result := list ;
35325: LD_ADDR_VAR 0 2
35329: PUSH
35330: LD_VAR 0 5
35334: ST_TO_ADDR
// end ;
35335: LD_VAR 0 2
35339: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35340: LD_INT 0
35342: PPUSH
35343: PPUSH
35344: PPUSH
35345: PPUSH
35346: PPUSH
35347: PPUSH
35348: PPUSH
// if not factory then
35349: LD_VAR 0 1
35353: NOT
35354: IFFALSE 35358
// exit ;
35356: GO 35961
// if control = control_apeman then
35358: LD_VAR 0 4
35362: PUSH
35363: LD_INT 5
35365: EQUAL
35366: IFFALSE 35475
// begin tmp := UnitsInside ( factory ) ;
35368: LD_ADDR_VAR 0 8
35372: PUSH
35373: LD_VAR 0 1
35377: PPUSH
35378: CALL_OW 313
35382: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35383: LD_VAR 0 8
35387: PPUSH
35388: LD_INT 25
35390: PUSH
35391: LD_INT 12
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PPUSH
35398: CALL_OW 72
35402: NOT
35403: IFFALSE 35413
// control := control_manual ;
35405: LD_ADDR_VAR 0 4
35409: PUSH
35410: LD_INT 1
35412: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35413: LD_ADDR_VAR 0 8
35417: PUSH
35418: LD_VAR 0 1
35422: PPUSH
35423: CALL 35110 0 1
35427: ST_TO_ADDR
// if tmp then
35428: LD_VAR 0 8
35432: IFFALSE 35475
// begin for i in tmp do
35434: LD_ADDR_VAR 0 7
35438: PUSH
35439: LD_VAR 0 8
35443: PUSH
35444: FOR_IN
35445: IFFALSE 35473
// if i [ 1 ] = b_ext_radio then
35447: LD_VAR 0 7
35451: PUSH
35452: LD_INT 1
35454: ARRAY
35455: PUSH
35456: LD_INT 22
35458: EQUAL
35459: IFFALSE 35471
// begin control := control_remote ;
35461: LD_ADDR_VAR 0 4
35465: PUSH
35466: LD_INT 2
35468: ST_TO_ADDR
// break ;
35469: GO 35473
// end ;
35471: GO 35444
35473: POP
35474: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35475: LD_VAR 0 1
35479: PPUSH
35480: LD_VAR 0 2
35484: PPUSH
35485: LD_VAR 0 3
35489: PPUSH
35490: LD_VAR 0 4
35494: PPUSH
35495: LD_VAR 0 5
35499: PPUSH
35500: CALL_OW 448
35504: IFFALSE 35539
// begin result := [ chassis , engine , control , weapon ] ;
35506: LD_ADDR_VAR 0 6
35510: PUSH
35511: LD_VAR 0 2
35515: PUSH
35516: LD_VAR 0 3
35520: PUSH
35521: LD_VAR 0 4
35525: PUSH
35526: LD_VAR 0 5
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: ST_TO_ADDR
// exit ;
35537: GO 35961
// end ; _chassis := AvailableChassisList ( factory ) ;
35539: LD_ADDR_VAR 0 9
35543: PUSH
35544: LD_VAR 0 1
35548: PPUSH
35549: CALL_OW 475
35553: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35554: LD_ADDR_VAR 0 11
35558: PUSH
35559: LD_VAR 0 1
35563: PPUSH
35564: CALL_OW 476
35568: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35569: LD_ADDR_VAR 0 12
35573: PUSH
35574: LD_VAR 0 1
35578: PPUSH
35579: CALL_OW 477
35583: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35584: LD_ADDR_VAR 0 10
35588: PUSH
35589: LD_VAR 0 1
35593: PPUSH
35594: CALL_OW 478
35598: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35599: LD_VAR 0 9
35603: NOT
35604: IFTRUE 35613
35606: PUSH
35607: LD_VAR 0 11
35611: NOT
35612: OR
35613: IFTRUE 35622
35615: PUSH
35616: LD_VAR 0 12
35620: NOT
35621: OR
35622: IFTRUE 35631
35624: PUSH
35625: LD_VAR 0 10
35629: NOT
35630: OR
35631: IFFALSE 35666
// begin result := [ chassis , engine , control , weapon ] ;
35633: LD_ADDR_VAR 0 6
35637: PUSH
35638: LD_VAR 0 2
35642: PUSH
35643: LD_VAR 0 3
35647: PUSH
35648: LD_VAR 0 4
35652: PUSH
35653: LD_VAR 0 5
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: ST_TO_ADDR
// exit ;
35664: GO 35961
// end ; if not chassis in _chassis then
35666: LD_VAR 0 2
35670: PUSH
35671: LD_VAR 0 9
35675: IN
35676: NOT
35677: IFFALSE 35703
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35679: LD_ADDR_VAR 0 2
35683: PUSH
35684: LD_VAR 0 9
35688: PUSH
35689: LD_INT 1
35691: PPUSH
35692: LD_VAR 0 9
35696: PPUSH
35697: CALL_OW 12
35701: ARRAY
35702: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35703: LD_VAR 0 2
35707: PPUSH
35708: LD_VAR 0 3
35712: PPUSH
35713: CALL 35966 0 2
35717: NOT
35718: IFFALSE 35779
// repeat engine := _engine [ 1 ] ;
35720: LD_ADDR_VAR 0 3
35724: PUSH
35725: LD_VAR 0 11
35729: PUSH
35730: LD_INT 1
35732: ARRAY
35733: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35734: LD_ADDR_VAR 0 11
35738: PUSH
35739: LD_VAR 0 11
35743: PPUSH
35744: LD_INT 1
35746: PPUSH
35747: CALL_OW 3
35751: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35752: LD_VAR 0 2
35756: PPUSH
35757: LD_VAR 0 3
35761: PPUSH
35762: CALL 35966 0 2
35766: IFTRUE 35777
35768: PUSH
35769: LD_VAR 0 11
35773: PUSH
35774: EMPTY
35775: EQUAL
35776: OR
35777: IFFALSE 35720
// if not control in _control then
35779: LD_VAR 0 4
35783: PUSH
35784: LD_VAR 0 12
35788: IN
35789: NOT
35790: IFFALSE 35816
// control := _control [ rand ( 1 , _control ) ] ;
35792: LD_ADDR_VAR 0 4
35796: PUSH
35797: LD_VAR 0 12
35801: PUSH
35802: LD_INT 1
35804: PPUSH
35805: LD_VAR 0 12
35809: PPUSH
35810: CALL_OW 12
35814: ARRAY
35815: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35816: LD_VAR 0 2
35820: PPUSH
35821: LD_VAR 0 5
35825: PPUSH
35826: CALL 36188 0 2
35830: NOT
35831: IFFALSE 35892
// repeat weapon := _weapon [ 1 ] ;
35833: LD_ADDR_VAR 0 5
35837: PUSH
35838: LD_VAR 0 10
35842: PUSH
35843: LD_INT 1
35845: ARRAY
35846: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35847: LD_ADDR_VAR 0 10
35851: PUSH
35852: LD_VAR 0 10
35856: PPUSH
35857: LD_INT 1
35859: PPUSH
35860: CALL_OW 3
35864: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35865: LD_VAR 0 2
35869: PPUSH
35870: LD_VAR 0 5
35874: PPUSH
35875: CALL 36188 0 2
35879: IFTRUE 35890
35881: PUSH
35882: LD_VAR 0 10
35886: PUSH
35887: EMPTY
35888: EQUAL
35889: OR
35890: IFFALSE 35833
// result := [ ] ;
35892: LD_ADDR_VAR 0 6
35896: PUSH
35897: EMPTY
35898: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35899: LD_VAR 0 1
35903: PPUSH
35904: LD_VAR 0 2
35908: PPUSH
35909: LD_VAR 0 3
35913: PPUSH
35914: LD_VAR 0 4
35918: PPUSH
35919: LD_VAR 0 5
35923: PPUSH
35924: CALL_OW 448
35928: IFFALSE 35961
// result := [ chassis , engine , control , weapon ] ;
35930: LD_ADDR_VAR 0 6
35934: PUSH
35935: LD_VAR 0 2
35939: PUSH
35940: LD_VAR 0 3
35944: PUSH
35945: LD_VAR 0 4
35949: PUSH
35950: LD_VAR 0 5
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: ST_TO_ADDR
// end ;
35961: LD_VAR 0 6
35965: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35966: LD_INT 0
35968: PPUSH
// if not chassis or not engine then
35969: LD_VAR 0 1
35973: NOT
35974: IFTRUE 35983
35976: PUSH
35977: LD_VAR 0 2
35981: NOT
35982: OR
35983: IFFALSE 35987
// exit ;
35985: GO 36183
// case engine of engine_solar :
35987: LD_VAR 0 2
35991: PUSH
35992: LD_INT 2
35994: DOUBLE
35995: EQUAL
35996: IFTRUE 36000
35998: GO 36038
36000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36001: LD_ADDR_VAR 0 3
36005: PUSH
36006: LD_INT 11
36008: PUSH
36009: LD_INT 12
36011: PUSH
36012: LD_INT 13
36014: PUSH
36015: LD_INT 14
36017: PUSH
36018: LD_INT 1
36020: PUSH
36021: LD_INT 2
36023: PUSH
36024: LD_INT 3
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: ST_TO_ADDR
36036: GO 36167
36038: LD_INT 1
36040: DOUBLE
36041: EQUAL
36042: IFTRUE 36046
36044: GO 36108
36046: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36047: LD_ADDR_VAR 0 3
36051: PUSH
36052: LD_INT 11
36054: PUSH
36055: LD_INT 12
36057: PUSH
36058: LD_INT 13
36060: PUSH
36061: LD_INT 14
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: LD_INT 2
36069: PUSH
36070: LD_INT 3
36072: PUSH
36073: LD_INT 4
36075: PUSH
36076: LD_INT 5
36078: PUSH
36079: LD_INT 21
36081: PUSH
36082: LD_INT 23
36084: PUSH
36085: LD_INT 22
36087: PUSH
36088: LD_INT 24
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: ST_TO_ADDR
36106: GO 36167
36108: LD_INT 3
36110: DOUBLE
36111: EQUAL
36112: IFTRUE 36116
36114: GO 36166
36116: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36117: LD_ADDR_VAR 0 3
36121: PUSH
36122: LD_INT 13
36124: PUSH
36125: LD_INT 14
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: LD_INT 3
36133: PUSH
36134: LD_INT 4
36136: PUSH
36137: LD_INT 5
36139: PUSH
36140: LD_INT 21
36142: PUSH
36143: LD_INT 22
36145: PUSH
36146: LD_INT 23
36148: PUSH
36149: LD_INT 24
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: ST_TO_ADDR
36164: GO 36167
36166: POP
// result := ( chassis in result ) ;
36167: LD_ADDR_VAR 0 3
36171: PUSH
36172: LD_VAR 0 1
36176: PUSH
36177: LD_VAR 0 3
36181: IN
36182: ST_TO_ADDR
// end ;
36183: LD_VAR 0 3
36187: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36188: LD_INT 0
36190: PPUSH
// if not chassis or not weapon then
36191: LD_VAR 0 1
36195: NOT
36196: IFTRUE 36205
36198: PUSH
36199: LD_VAR 0 2
36203: NOT
36204: OR
36205: IFFALSE 36209
// exit ;
36207: GO 37269
// case weapon of us_machine_gun :
36209: LD_VAR 0 2
36213: PUSH
36214: LD_INT 2
36216: DOUBLE
36217: EQUAL
36218: IFTRUE 36222
36220: GO 36252
36222: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36223: LD_ADDR_VAR 0 3
36227: PUSH
36228: LD_INT 1
36230: PUSH
36231: LD_INT 2
36233: PUSH
36234: LD_INT 3
36236: PUSH
36237: LD_INT 4
36239: PUSH
36240: LD_INT 5
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: ST_TO_ADDR
36250: GO 37253
36252: LD_INT 3
36254: DOUBLE
36255: EQUAL
36256: IFTRUE 36260
36258: GO 36290
36260: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36261: LD_ADDR_VAR 0 3
36265: PUSH
36266: LD_INT 1
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: LD_INT 3
36274: PUSH
36275: LD_INT 4
36277: PUSH
36278: LD_INT 5
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: ST_TO_ADDR
36288: GO 37253
36290: LD_INT 11
36292: DOUBLE
36293: EQUAL
36294: IFTRUE 36298
36296: GO 36328
36298: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36299: LD_ADDR_VAR 0 3
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: LD_INT 2
36309: PUSH
36310: LD_INT 3
36312: PUSH
36313: LD_INT 4
36315: PUSH
36316: LD_INT 5
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: ST_TO_ADDR
36326: GO 37253
36328: LD_INT 4
36330: DOUBLE
36331: EQUAL
36332: IFTRUE 36336
36334: GO 36362
36336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36337: LD_ADDR_VAR 0 3
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: LD_INT 3
36347: PUSH
36348: LD_INT 4
36350: PUSH
36351: LD_INT 5
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: ST_TO_ADDR
36360: GO 37253
36362: LD_INT 5
36364: DOUBLE
36365: EQUAL
36366: IFTRUE 36370
36368: GO 36396
36370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36371: LD_ADDR_VAR 0 3
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: LD_INT 3
36381: PUSH
36382: LD_INT 4
36384: PUSH
36385: LD_INT 5
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: ST_TO_ADDR
36394: GO 37253
36396: LD_INT 9
36398: DOUBLE
36399: EQUAL
36400: IFTRUE 36404
36402: GO 36430
36404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36405: LD_ADDR_VAR 0 3
36409: PUSH
36410: LD_INT 2
36412: PUSH
36413: LD_INT 3
36415: PUSH
36416: LD_INT 4
36418: PUSH
36419: LD_INT 5
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: ST_TO_ADDR
36428: GO 37253
36430: LD_INT 7
36432: DOUBLE
36433: EQUAL
36434: IFTRUE 36438
36436: GO 36464
36438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36439: LD_ADDR_VAR 0 3
36443: PUSH
36444: LD_INT 2
36446: PUSH
36447: LD_INT 3
36449: PUSH
36450: LD_INT 4
36452: PUSH
36453: LD_INT 5
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: ST_TO_ADDR
36462: GO 37253
36464: LD_INT 12
36466: DOUBLE
36467: EQUAL
36468: IFTRUE 36472
36470: GO 36498
36472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36473: LD_ADDR_VAR 0 3
36477: PUSH
36478: LD_INT 2
36480: PUSH
36481: LD_INT 3
36483: PUSH
36484: LD_INT 4
36486: PUSH
36487: LD_INT 5
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: ST_TO_ADDR
36496: GO 37253
36498: LD_INT 13
36500: DOUBLE
36501: EQUAL
36502: IFTRUE 36506
36504: GO 36532
36506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36507: LD_ADDR_VAR 0 3
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: LD_INT 3
36517: PUSH
36518: LD_INT 4
36520: PUSH
36521: LD_INT 5
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: ST_TO_ADDR
36530: GO 37253
36532: LD_INT 14
36534: DOUBLE
36535: EQUAL
36536: IFTRUE 36540
36538: GO 36558
36540: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36541: LD_ADDR_VAR 0 3
36545: PUSH
36546: LD_INT 4
36548: PUSH
36549: LD_INT 5
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: ST_TO_ADDR
36556: GO 37253
36558: LD_INT 6
36560: DOUBLE
36561: EQUAL
36562: IFTRUE 36566
36564: GO 36584
36566: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36567: LD_ADDR_VAR 0 3
36571: PUSH
36572: LD_INT 4
36574: PUSH
36575: LD_INT 5
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: ST_TO_ADDR
36582: GO 37253
36584: LD_INT 10
36586: DOUBLE
36587: EQUAL
36588: IFTRUE 36592
36590: GO 36610
36592: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36593: LD_ADDR_VAR 0 3
36597: PUSH
36598: LD_INT 4
36600: PUSH
36601: LD_INT 5
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: ST_TO_ADDR
36608: GO 37253
36610: LD_INT 22
36612: DOUBLE
36613: EQUAL
36614: IFTRUE 36618
36616: GO 36644
36618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36619: LD_ADDR_VAR 0 3
36623: PUSH
36624: LD_INT 11
36626: PUSH
36627: LD_INT 12
36629: PUSH
36630: LD_INT 13
36632: PUSH
36633: LD_INT 14
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: ST_TO_ADDR
36642: GO 37253
36644: LD_INT 23
36646: DOUBLE
36647: EQUAL
36648: IFTRUE 36652
36650: GO 36678
36652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36653: LD_ADDR_VAR 0 3
36657: PUSH
36658: LD_INT 11
36660: PUSH
36661: LD_INT 12
36663: PUSH
36664: LD_INT 13
36666: PUSH
36667: LD_INT 14
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: ST_TO_ADDR
36676: GO 37253
36678: LD_INT 24
36680: DOUBLE
36681: EQUAL
36682: IFTRUE 36686
36684: GO 36712
36686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36687: LD_ADDR_VAR 0 3
36691: PUSH
36692: LD_INT 11
36694: PUSH
36695: LD_INT 12
36697: PUSH
36698: LD_INT 13
36700: PUSH
36701: LD_INT 14
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: ST_TO_ADDR
36710: GO 37253
36712: LD_INT 30
36714: DOUBLE
36715: EQUAL
36716: IFTRUE 36720
36718: GO 36746
36720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36721: LD_ADDR_VAR 0 3
36725: PUSH
36726: LD_INT 11
36728: PUSH
36729: LD_INT 12
36731: PUSH
36732: LD_INT 13
36734: PUSH
36735: LD_INT 14
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: ST_TO_ADDR
36744: GO 37253
36746: LD_INT 25
36748: DOUBLE
36749: EQUAL
36750: IFTRUE 36754
36752: GO 36772
36754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36755: LD_ADDR_VAR 0 3
36759: PUSH
36760: LD_INT 13
36762: PUSH
36763: LD_INT 14
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: ST_TO_ADDR
36770: GO 37253
36772: LD_INT 27
36774: DOUBLE
36775: EQUAL
36776: IFTRUE 36780
36778: GO 36798
36780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36781: LD_ADDR_VAR 0 3
36785: PUSH
36786: LD_INT 13
36788: PUSH
36789: LD_INT 14
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: ST_TO_ADDR
36796: GO 37253
36798: LD_INT 92
36800: DOUBLE
36801: EQUAL
36802: IFTRUE 36806
36804: GO 36832
36806: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36807: LD_ADDR_VAR 0 3
36811: PUSH
36812: LD_INT 11
36814: PUSH
36815: LD_INT 12
36817: PUSH
36818: LD_INT 13
36820: PUSH
36821: LD_INT 14
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: ST_TO_ADDR
36830: GO 37253
36832: LD_INT 28
36834: DOUBLE
36835: EQUAL
36836: IFTRUE 36840
36838: GO 36858
36840: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36841: LD_ADDR_VAR 0 3
36845: PUSH
36846: LD_INT 13
36848: PUSH
36849: LD_INT 14
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: ST_TO_ADDR
36856: GO 37253
36858: LD_INT 29
36860: DOUBLE
36861: EQUAL
36862: IFTRUE 36866
36864: GO 36884
36866: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36867: LD_ADDR_VAR 0 3
36871: PUSH
36872: LD_INT 13
36874: PUSH
36875: LD_INT 14
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: ST_TO_ADDR
36882: GO 37253
36884: LD_INT 31
36886: DOUBLE
36887: EQUAL
36888: IFTRUE 36892
36890: GO 36910
36892: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36893: LD_ADDR_VAR 0 3
36897: PUSH
36898: LD_INT 13
36900: PUSH
36901: LD_INT 14
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: ST_TO_ADDR
36908: GO 37253
36910: LD_INT 26
36912: DOUBLE
36913: EQUAL
36914: IFTRUE 36918
36916: GO 36936
36918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36919: LD_ADDR_VAR 0 3
36923: PUSH
36924: LD_INT 13
36926: PUSH
36927: LD_INT 14
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: ST_TO_ADDR
36934: GO 37253
36936: LD_INT 42
36938: DOUBLE
36939: EQUAL
36940: IFTRUE 36944
36942: GO 36970
36944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36945: LD_ADDR_VAR 0 3
36949: PUSH
36950: LD_INT 21
36952: PUSH
36953: LD_INT 22
36955: PUSH
36956: LD_INT 23
36958: PUSH
36959: LD_INT 24
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: ST_TO_ADDR
36968: GO 37253
36970: LD_INT 43
36972: DOUBLE
36973: EQUAL
36974: IFTRUE 36978
36976: GO 37004
36978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36979: LD_ADDR_VAR 0 3
36983: PUSH
36984: LD_INT 21
36986: PUSH
36987: LD_INT 22
36989: PUSH
36990: LD_INT 23
36992: PUSH
36993: LD_INT 24
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: ST_TO_ADDR
37002: GO 37253
37004: LD_INT 44
37006: DOUBLE
37007: EQUAL
37008: IFTRUE 37012
37010: GO 37038
37012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37013: LD_ADDR_VAR 0 3
37017: PUSH
37018: LD_INT 21
37020: PUSH
37021: LD_INT 22
37023: PUSH
37024: LD_INT 23
37026: PUSH
37027: LD_INT 24
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: ST_TO_ADDR
37036: GO 37253
37038: LD_INT 45
37040: DOUBLE
37041: EQUAL
37042: IFTRUE 37046
37044: GO 37072
37046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37047: LD_ADDR_VAR 0 3
37051: PUSH
37052: LD_INT 21
37054: PUSH
37055: LD_INT 22
37057: PUSH
37058: LD_INT 23
37060: PUSH
37061: LD_INT 24
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: ST_TO_ADDR
37070: GO 37253
37072: LD_INT 49
37074: DOUBLE
37075: EQUAL
37076: IFTRUE 37080
37078: GO 37106
37080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37081: LD_ADDR_VAR 0 3
37085: PUSH
37086: LD_INT 21
37088: PUSH
37089: LD_INT 22
37091: PUSH
37092: LD_INT 23
37094: PUSH
37095: LD_INT 24
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: ST_TO_ADDR
37104: GO 37253
37106: LD_INT 51
37108: DOUBLE
37109: EQUAL
37110: IFTRUE 37114
37112: GO 37140
37114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37115: LD_ADDR_VAR 0 3
37119: PUSH
37120: LD_INT 21
37122: PUSH
37123: LD_INT 22
37125: PUSH
37126: LD_INT 23
37128: PUSH
37129: LD_INT 24
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: ST_TO_ADDR
37138: GO 37253
37140: LD_INT 52
37142: DOUBLE
37143: EQUAL
37144: IFTRUE 37148
37146: GO 37174
37148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37149: LD_ADDR_VAR 0 3
37153: PUSH
37154: LD_INT 21
37156: PUSH
37157: LD_INT 22
37159: PUSH
37160: LD_INT 23
37162: PUSH
37163: LD_INT 24
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: ST_TO_ADDR
37172: GO 37253
37174: LD_INT 53
37176: DOUBLE
37177: EQUAL
37178: IFTRUE 37182
37180: GO 37200
37182: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37183: LD_ADDR_VAR 0 3
37187: PUSH
37188: LD_INT 23
37190: PUSH
37191: LD_INT 24
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: ST_TO_ADDR
37198: GO 37253
37200: LD_INT 46
37202: DOUBLE
37203: EQUAL
37204: IFTRUE 37208
37206: GO 37226
37208: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37209: LD_ADDR_VAR 0 3
37213: PUSH
37214: LD_INT 23
37216: PUSH
37217: LD_INT 24
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: ST_TO_ADDR
37224: GO 37253
37226: LD_INT 47
37228: DOUBLE
37229: EQUAL
37230: IFTRUE 37234
37232: GO 37252
37234: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37235: LD_ADDR_VAR 0 3
37239: PUSH
37240: LD_INT 23
37242: PUSH
37243: LD_INT 24
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: ST_TO_ADDR
37250: GO 37253
37252: POP
// result := ( chassis in result ) ;
37253: LD_ADDR_VAR 0 3
37257: PUSH
37258: LD_VAR 0 1
37262: PUSH
37263: LD_VAR 0 3
37267: IN
37268: ST_TO_ADDR
// end ;
37269: LD_VAR 0 3
37273: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37274: LD_INT 0
37276: PPUSH
37277: PPUSH
37278: PPUSH
37279: PPUSH
37280: PPUSH
37281: PPUSH
37282: PPUSH
// result := array ;
37283: LD_ADDR_VAR 0 5
37287: PUSH
37288: LD_VAR 0 1
37292: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37293: LD_VAR 0 1
37297: NOT
37298: IFTRUE 37307
37300: PUSH
37301: LD_VAR 0 2
37305: NOT
37306: OR
37307: IFTRUE 37316
37309: PUSH
37310: LD_VAR 0 3
37314: NOT
37315: OR
37316: IFTRUE 37330
37318: PUSH
37319: LD_VAR 0 2
37323: PUSH
37324: LD_VAR 0 1
37328: GREATER
37329: OR
37330: IFTRUE 37344
37332: PUSH
37333: LD_VAR 0 3
37337: PUSH
37338: LD_VAR 0 1
37342: GREATER
37343: OR
37344: IFFALSE 37348
// exit ;
37346: GO 37644
// if direction then
37348: LD_VAR 0 4
37352: IFFALSE 37416
// begin d := 1 ;
37354: LD_ADDR_VAR 0 9
37358: PUSH
37359: LD_INT 1
37361: ST_TO_ADDR
// if i_from > i_to then
37362: LD_VAR 0 2
37366: PUSH
37367: LD_VAR 0 3
37371: GREATER
37372: IFFALSE 37398
// length := ( array - i_from ) + i_to else
37374: LD_ADDR_VAR 0 11
37378: PUSH
37379: LD_VAR 0 1
37383: PUSH
37384: LD_VAR 0 2
37388: MINUS
37389: PUSH
37390: LD_VAR 0 3
37394: PLUS
37395: ST_TO_ADDR
37396: GO 37414
// length := i_to - i_from ;
37398: LD_ADDR_VAR 0 11
37402: PUSH
37403: LD_VAR 0 3
37407: PUSH
37408: LD_VAR 0 2
37412: MINUS
37413: ST_TO_ADDR
// end else
37414: GO 37477
// begin d := - 1 ;
37416: LD_ADDR_VAR 0 9
37420: PUSH
37421: LD_INT 1
37423: NEG
37424: ST_TO_ADDR
// if i_from > i_to then
37425: LD_VAR 0 2
37429: PUSH
37430: LD_VAR 0 3
37434: GREATER
37435: IFFALSE 37455
// length := i_from - i_to else
37437: LD_ADDR_VAR 0 11
37441: PUSH
37442: LD_VAR 0 2
37446: PUSH
37447: LD_VAR 0 3
37451: MINUS
37452: ST_TO_ADDR
37453: GO 37477
// length := ( array - i_to ) + i_from ;
37455: LD_ADDR_VAR 0 11
37459: PUSH
37460: LD_VAR 0 1
37464: PUSH
37465: LD_VAR 0 3
37469: MINUS
37470: PUSH
37471: LD_VAR 0 2
37475: PLUS
37476: ST_TO_ADDR
// end ; if not length then
37477: LD_VAR 0 11
37481: NOT
37482: IFFALSE 37486
// exit ;
37484: GO 37644
// tmp := array ;
37486: LD_ADDR_VAR 0 10
37490: PUSH
37491: LD_VAR 0 1
37495: ST_TO_ADDR
// for i = 1 to length do
37496: LD_ADDR_VAR 0 6
37500: PUSH
37501: DOUBLE
37502: LD_INT 1
37504: DEC
37505: ST_TO_ADDR
37506: LD_VAR 0 11
37510: PUSH
37511: FOR_TO
37512: IFFALSE 37632
// begin for j = 1 to array do
37514: LD_ADDR_VAR 0 7
37518: PUSH
37519: DOUBLE
37520: LD_INT 1
37522: DEC
37523: ST_TO_ADDR
37524: LD_VAR 0 1
37528: PUSH
37529: FOR_TO
37530: IFFALSE 37618
// begin k := j + d ;
37532: LD_ADDR_VAR 0 8
37536: PUSH
37537: LD_VAR 0 7
37541: PUSH
37542: LD_VAR 0 9
37546: PLUS
37547: ST_TO_ADDR
// if k > array then
37548: LD_VAR 0 8
37552: PUSH
37553: LD_VAR 0 1
37557: GREATER
37558: IFFALSE 37568
// k := 1 ;
37560: LD_ADDR_VAR 0 8
37564: PUSH
37565: LD_INT 1
37567: ST_TO_ADDR
// if not k then
37568: LD_VAR 0 8
37572: NOT
37573: IFFALSE 37585
// k := array ;
37575: LD_ADDR_VAR 0 8
37579: PUSH
37580: LD_VAR 0 1
37584: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37585: LD_ADDR_VAR 0 10
37589: PUSH
37590: LD_VAR 0 10
37594: PPUSH
37595: LD_VAR 0 8
37599: PPUSH
37600: LD_VAR 0 1
37604: PUSH
37605: LD_VAR 0 7
37609: ARRAY
37610: PPUSH
37611: CALL_OW 1
37615: ST_TO_ADDR
// end ;
37616: GO 37529
37618: POP
37619: POP
// array := tmp ;
37620: LD_ADDR_VAR 0 1
37624: PUSH
37625: LD_VAR 0 10
37629: ST_TO_ADDR
// end ;
37630: GO 37511
37632: POP
37633: POP
// result := array ;
37634: LD_ADDR_VAR 0 5
37638: PUSH
37639: LD_VAR 0 1
37643: ST_TO_ADDR
// end ;
37644: LD_VAR 0 5
37648: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37649: LD_INT 0
37651: PPUSH
37652: PPUSH
// result := 0 ;
37653: LD_ADDR_VAR 0 3
37657: PUSH
37658: LD_INT 0
37660: ST_TO_ADDR
// if not array or not value in array then
37661: LD_VAR 0 1
37665: NOT
37666: IFTRUE 37681
37668: PUSH
37669: LD_VAR 0 2
37673: PUSH
37674: LD_VAR 0 1
37678: IN
37679: NOT
37680: OR
37681: IFFALSE 37685
// exit ;
37683: GO 37739
// for i = 1 to array do
37685: LD_ADDR_VAR 0 4
37689: PUSH
37690: DOUBLE
37691: LD_INT 1
37693: DEC
37694: ST_TO_ADDR
37695: LD_VAR 0 1
37699: PUSH
37700: FOR_TO
37701: IFFALSE 37737
// if value = array [ i ] then
37703: LD_VAR 0 2
37707: PUSH
37708: LD_VAR 0 1
37712: PUSH
37713: LD_VAR 0 4
37717: ARRAY
37718: EQUAL
37719: IFFALSE 37735
// begin result := i ;
37721: LD_ADDR_VAR 0 3
37725: PUSH
37726: LD_VAR 0 4
37730: ST_TO_ADDR
// exit ;
37731: POP
37732: POP
37733: GO 37739
// end ;
37735: GO 37700
37737: POP
37738: POP
// end ;
37739: LD_VAR 0 3
37743: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37744: LD_INT 0
37746: PPUSH
// vc_chassis := chassis ;
37747: LD_ADDR_OWVAR 37
37751: PUSH
37752: LD_VAR 0 1
37756: ST_TO_ADDR
// vc_engine := engine ;
37757: LD_ADDR_OWVAR 39
37761: PUSH
37762: LD_VAR 0 2
37766: ST_TO_ADDR
// vc_control := control ;
37767: LD_ADDR_OWVAR 38
37771: PUSH
37772: LD_VAR 0 3
37776: ST_TO_ADDR
// vc_weapon := weapon ;
37777: LD_ADDR_OWVAR 40
37781: PUSH
37782: LD_VAR 0 4
37786: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37787: LD_ADDR_OWVAR 41
37791: PUSH
37792: LD_VAR 0 5
37796: ST_TO_ADDR
// end ;
37797: LD_VAR 0 6
37801: RET
// export function WantPlant ( unit ) ; var task ; begin
37802: LD_INT 0
37804: PPUSH
37805: PPUSH
// result := false ;
37806: LD_ADDR_VAR 0 2
37810: PUSH
37811: LD_INT 0
37813: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37814: LD_ADDR_VAR 0 3
37818: PUSH
37819: LD_VAR 0 1
37823: PPUSH
37824: CALL_OW 437
37828: ST_TO_ADDR
// if task then
37829: LD_VAR 0 3
37833: IFFALSE 37861
// if task [ 1 ] [ 1 ] = p then
37835: LD_VAR 0 3
37839: PUSH
37840: LD_INT 1
37842: ARRAY
37843: PUSH
37844: LD_INT 1
37846: ARRAY
37847: PUSH
37848: LD_STRING p
37850: EQUAL
37851: IFFALSE 37861
// result := true ;
37853: LD_ADDR_VAR 0 2
37857: PUSH
37858: LD_INT 1
37860: ST_TO_ADDR
// end ;
37861: LD_VAR 0 2
37865: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37866: LD_INT 0
37868: PPUSH
37869: PPUSH
37870: PPUSH
37871: PPUSH
// if pos < 1 then
37872: LD_VAR 0 2
37876: PUSH
37877: LD_INT 1
37879: LESS
37880: IFFALSE 37884
// exit ;
37882: GO 38187
// if pos = 1 then
37884: LD_VAR 0 2
37888: PUSH
37889: LD_INT 1
37891: EQUAL
37892: IFFALSE 37925
// result := Replace ( arr , pos [ 1 ] , value ) else
37894: LD_ADDR_VAR 0 4
37898: PUSH
37899: LD_VAR 0 1
37903: PPUSH
37904: LD_VAR 0 2
37908: PUSH
37909: LD_INT 1
37911: ARRAY
37912: PPUSH
37913: LD_VAR 0 3
37917: PPUSH
37918: CALL_OW 1
37922: ST_TO_ADDR
37923: GO 38187
// begin tmp := arr ;
37925: LD_ADDR_VAR 0 6
37929: PUSH
37930: LD_VAR 0 1
37934: ST_TO_ADDR
// s_arr := [ tmp ] ;
37935: LD_ADDR_VAR 0 7
37939: PUSH
37940: LD_VAR 0 6
37944: PUSH
37945: EMPTY
37946: LIST
37947: ST_TO_ADDR
// for i = 1 to pos - 1 do
37948: LD_ADDR_VAR 0 5
37952: PUSH
37953: DOUBLE
37954: LD_INT 1
37956: DEC
37957: ST_TO_ADDR
37958: LD_VAR 0 2
37962: PUSH
37963: LD_INT 1
37965: MINUS
37966: PUSH
37967: FOR_TO
37968: IFFALSE 38013
// begin tmp := tmp [ pos [ i ] ] ;
37970: LD_ADDR_VAR 0 6
37974: PUSH
37975: LD_VAR 0 6
37979: PUSH
37980: LD_VAR 0 2
37984: PUSH
37985: LD_VAR 0 5
37989: ARRAY
37990: ARRAY
37991: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37992: LD_ADDR_VAR 0 7
37996: PUSH
37997: LD_VAR 0 7
38001: PUSH
38002: LD_VAR 0 6
38006: PUSH
38007: EMPTY
38008: LIST
38009: ADD
38010: ST_TO_ADDR
// end ;
38011: GO 37967
38013: POP
38014: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38015: LD_ADDR_VAR 0 6
38019: PUSH
38020: LD_VAR 0 6
38024: PPUSH
38025: LD_VAR 0 2
38029: PUSH
38030: LD_VAR 0 2
38034: ARRAY
38035: PPUSH
38036: LD_VAR 0 3
38040: PPUSH
38041: CALL_OW 1
38045: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38046: LD_ADDR_VAR 0 7
38050: PUSH
38051: LD_VAR 0 7
38055: PPUSH
38056: LD_VAR 0 7
38060: PPUSH
38061: LD_VAR 0 6
38065: PPUSH
38066: CALL_OW 1
38070: ST_TO_ADDR
// for i = s_arr downto 2 do
38071: LD_ADDR_VAR 0 5
38075: PUSH
38076: DOUBLE
38077: LD_VAR 0 7
38081: INC
38082: ST_TO_ADDR
38083: LD_INT 2
38085: PUSH
38086: FOR_DOWNTO
38087: IFFALSE 38171
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38089: LD_ADDR_VAR 0 6
38093: PUSH
38094: LD_VAR 0 7
38098: PUSH
38099: LD_VAR 0 5
38103: PUSH
38104: LD_INT 1
38106: MINUS
38107: ARRAY
38108: PPUSH
38109: LD_VAR 0 2
38113: PUSH
38114: LD_VAR 0 5
38118: PUSH
38119: LD_INT 1
38121: MINUS
38122: ARRAY
38123: PPUSH
38124: LD_VAR 0 7
38128: PUSH
38129: LD_VAR 0 5
38133: ARRAY
38134: PPUSH
38135: CALL_OW 1
38139: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38140: LD_ADDR_VAR 0 7
38144: PUSH
38145: LD_VAR 0 7
38149: PPUSH
38150: LD_VAR 0 5
38154: PUSH
38155: LD_INT 1
38157: MINUS
38158: PPUSH
38159: LD_VAR 0 6
38163: PPUSH
38164: CALL_OW 1
38168: ST_TO_ADDR
// end ;
38169: GO 38086
38171: POP
38172: POP
// result := s_arr [ 1 ] ;
38173: LD_ADDR_VAR 0 4
38177: PUSH
38178: LD_VAR 0 7
38182: PUSH
38183: LD_INT 1
38185: ARRAY
38186: ST_TO_ADDR
// end ; end ;
38187: LD_VAR 0 4
38191: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38192: LD_INT 0
38194: PPUSH
38195: PPUSH
// if not list then
38196: LD_VAR 0 1
38200: NOT
38201: IFFALSE 38205
// exit ;
38203: GO 38296
// i := list [ pos1 ] ;
38205: LD_ADDR_VAR 0 5
38209: PUSH
38210: LD_VAR 0 1
38214: PUSH
38215: LD_VAR 0 2
38219: ARRAY
38220: ST_TO_ADDR
// if not i then
38221: LD_VAR 0 5
38225: NOT
38226: IFFALSE 38230
// exit ;
38228: GO 38296
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38230: LD_ADDR_VAR 0 1
38234: PUSH
38235: LD_VAR 0 1
38239: PPUSH
38240: LD_VAR 0 2
38244: PPUSH
38245: LD_VAR 0 1
38249: PUSH
38250: LD_VAR 0 3
38254: ARRAY
38255: PPUSH
38256: CALL_OW 1
38260: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38261: LD_ADDR_VAR 0 1
38265: PUSH
38266: LD_VAR 0 1
38270: PPUSH
38271: LD_VAR 0 3
38275: PPUSH
38276: LD_VAR 0 5
38280: PPUSH
38281: CALL_OW 1
38285: ST_TO_ADDR
// result := list ;
38286: LD_ADDR_VAR 0 4
38290: PUSH
38291: LD_VAR 0 1
38295: ST_TO_ADDR
// end ;
38296: LD_VAR 0 4
38300: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38301: LD_INT 0
38303: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38304: LD_ADDR_VAR 0 5
38308: PUSH
38309: LD_VAR 0 1
38313: PPUSH
38314: CALL_OW 250
38318: PPUSH
38319: LD_VAR 0 1
38323: PPUSH
38324: CALL_OW 251
38328: PPUSH
38329: LD_VAR 0 2
38333: PPUSH
38334: LD_VAR 0 3
38338: PPUSH
38339: LD_VAR 0 4
38343: PPUSH
38344: CALL 38726 0 5
38348: ST_TO_ADDR
// end ;
38349: LD_VAR 0 5
38353: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38354: LD_INT 0
38356: PPUSH
38357: PPUSH
38358: PPUSH
38359: PPUSH
// if not list or not unit then
38360: LD_VAR 0 2
38364: NOT
38365: IFTRUE 38374
38367: PUSH
38368: LD_VAR 0 1
38372: NOT
38373: OR
38374: IFFALSE 38378
// exit ;
38376: GO 38721
// result := [ ] ;
38378: LD_ADDR_VAR 0 5
38382: PUSH
38383: EMPTY
38384: ST_TO_ADDR
// for i in list do
38385: LD_ADDR_VAR 0 6
38389: PUSH
38390: LD_VAR 0 2
38394: PUSH
38395: FOR_IN
38396: IFFALSE 38614
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38398: LD_ADDR_VAR 0 8
38402: PUSH
38403: LD_VAR 0 1
38407: PPUSH
38408: LD_VAR 0 6
38412: PUSH
38413: LD_INT 1
38415: ARRAY
38416: PPUSH
38417: LD_VAR 0 6
38421: PUSH
38422: LD_INT 2
38424: ARRAY
38425: PPUSH
38426: CALL_OW 297
38430: ST_TO_ADDR
// if not Count ( result ) then
38431: LD_VAR 0 5
38435: PPUSH
38436: CALL 34982 0 1
38440: NOT
38441: IFFALSE 38474
// begin result := Join ( result , [ i , tmp ] ) ;
38443: LD_ADDR_VAR 0 5
38447: PUSH
38448: LD_VAR 0 5
38452: PPUSH
38453: LD_VAR 0 6
38457: PUSH
38458: LD_VAR 0 8
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PPUSH
38467: CALL 70914 0 2
38471: ST_TO_ADDR
// continue ;
38472: GO 38395
// end ; if result [ result ] [ 2 ] <= tmp then
38474: LD_VAR 0 5
38478: PUSH
38479: LD_VAR 0 5
38483: ARRAY
38484: PUSH
38485: LD_INT 2
38487: ARRAY
38488: PUSH
38489: LD_VAR 0 8
38493: LESSEQUAL
38494: IFFALSE 38527
// result := Join ( result , [ i , tmp ] ) else
38496: LD_ADDR_VAR 0 5
38500: PUSH
38501: LD_VAR 0 5
38505: PPUSH
38506: LD_VAR 0 6
38510: PUSH
38511: LD_VAR 0 8
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PPUSH
38520: CALL 70914 0 2
38524: ST_TO_ADDR
38525: GO 38612
// begin for j := 1 to Count ( result ) do
38527: LD_ADDR_VAR 0 7
38531: PUSH
38532: DOUBLE
38533: LD_INT 1
38535: DEC
38536: ST_TO_ADDR
38537: LD_VAR 0 5
38541: PPUSH
38542: CALL 34982 0 1
38546: PUSH
38547: FOR_TO
38548: IFFALSE 38610
// begin if tmp < result [ j ] [ 2 ] then
38550: LD_VAR 0 8
38554: PUSH
38555: LD_VAR 0 5
38559: PUSH
38560: LD_VAR 0 7
38564: ARRAY
38565: PUSH
38566: LD_INT 2
38568: ARRAY
38569: LESS
38570: IFFALSE 38608
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38572: LD_ADDR_VAR 0 5
38576: PUSH
38577: LD_VAR 0 5
38581: PPUSH
38582: LD_VAR 0 7
38586: PPUSH
38587: LD_VAR 0 6
38591: PUSH
38592: LD_VAR 0 8
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PPUSH
38601: CALL_OW 2
38605: ST_TO_ADDR
// break ;
38606: GO 38610
// end ; end ;
38608: GO 38547
38610: POP
38611: POP
// end ; end ;
38612: GO 38395
38614: POP
38615: POP
// if result and not asc then
38616: LD_VAR 0 5
38620: IFFALSE 38629
38622: PUSH
38623: LD_VAR 0 3
38627: NOT
38628: AND
38629: IFFALSE 38646
// result := ReverseArray ( result ) ;
38631: LD_ADDR_VAR 0 5
38635: PUSH
38636: LD_VAR 0 5
38640: PPUSH
38641: CALL 66004 0 1
38645: ST_TO_ADDR
// tmp := [ ] ;
38646: LD_ADDR_VAR 0 8
38650: PUSH
38651: EMPTY
38652: ST_TO_ADDR
// if mode then
38653: LD_VAR 0 4
38657: IFFALSE 38721
// begin for i := 1 to result do
38659: LD_ADDR_VAR 0 6
38663: PUSH
38664: DOUBLE
38665: LD_INT 1
38667: DEC
38668: ST_TO_ADDR
38669: LD_VAR 0 5
38673: PUSH
38674: FOR_TO
38675: IFFALSE 38709
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38677: LD_ADDR_VAR 0 8
38681: PUSH
38682: LD_VAR 0 8
38686: PPUSH
38687: LD_VAR 0 5
38691: PUSH
38692: LD_VAR 0 6
38696: ARRAY
38697: PUSH
38698: LD_INT 1
38700: ARRAY
38701: PPUSH
38702: CALL 70914 0 2
38706: ST_TO_ADDR
38707: GO 38674
38709: POP
38710: POP
// result := tmp ;
38711: LD_ADDR_VAR 0 5
38715: PUSH
38716: LD_VAR 0 8
38720: ST_TO_ADDR
// end ; end ;
38721: LD_VAR 0 5
38725: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38726: LD_INT 0
38728: PPUSH
38729: PPUSH
38730: PPUSH
38731: PPUSH
// if not list then
38732: LD_VAR 0 3
38736: NOT
38737: IFFALSE 38741
// exit ;
38739: GO 39131
// result := [ ] ;
38741: LD_ADDR_VAR 0 6
38745: PUSH
38746: EMPTY
38747: ST_TO_ADDR
// for i in list do
38748: LD_ADDR_VAR 0 7
38752: PUSH
38753: LD_VAR 0 3
38757: PUSH
38758: FOR_IN
38759: IFFALSE 38961
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38761: LD_ADDR_VAR 0 9
38765: PUSH
38766: LD_VAR 0 7
38770: PPUSH
38771: LD_VAR 0 1
38775: PPUSH
38776: LD_VAR 0 2
38780: PPUSH
38781: CALL_OW 297
38785: ST_TO_ADDR
// if not result then
38786: LD_VAR 0 6
38790: NOT
38791: IFFALSE 38817
// result := [ [ i , tmp ] ] else
38793: LD_ADDR_VAR 0 6
38797: PUSH
38798: LD_VAR 0 7
38802: PUSH
38803: LD_VAR 0 9
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: EMPTY
38813: LIST
38814: ST_TO_ADDR
38815: GO 38959
// begin if result [ result ] [ 2 ] <= tmp then
38817: LD_VAR 0 6
38821: PUSH
38822: LD_VAR 0 6
38826: ARRAY
38827: PUSH
38828: LD_INT 2
38830: ARRAY
38831: PUSH
38832: LD_VAR 0 9
38836: LESSEQUAL
38837: IFFALSE 38879
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38839: LD_ADDR_VAR 0 6
38843: PUSH
38844: LD_VAR 0 6
38848: PPUSH
38849: LD_VAR 0 6
38853: PUSH
38854: LD_INT 1
38856: PLUS
38857: PPUSH
38858: LD_VAR 0 7
38862: PUSH
38863: LD_VAR 0 9
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PPUSH
38872: CALL_OW 2
38876: ST_TO_ADDR
38877: GO 38959
// for j := 1 to result do
38879: LD_ADDR_VAR 0 8
38883: PUSH
38884: DOUBLE
38885: LD_INT 1
38887: DEC
38888: ST_TO_ADDR
38889: LD_VAR 0 6
38893: PUSH
38894: FOR_TO
38895: IFFALSE 38957
// begin if tmp < result [ j ] [ 2 ] then
38897: LD_VAR 0 9
38901: PUSH
38902: LD_VAR 0 6
38906: PUSH
38907: LD_VAR 0 8
38911: ARRAY
38912: PUSH
38913: LD_INT 2
38915: ARRAY
38916: LESS
38917: IFFALSE 38955
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38919: LD_ADDR_VAR 0 6
38923: PUSH
38924: LD_VAR 0 6
38928: PPUSH
38929: LD_VAR 0 8
38933: PPUSH
38934: LD_VAR 0 7
38938: PUSH
38939: LD_VAR 0 9
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PPUSH
38948: CALL_OW 2
38952: ST_TO_ADDR
// break ;
38953: GO 38957
// end ; end ;
38955: GO 38894
38957: POP
38958: POP
// end ; end ;
38959: GO 38758
38961: POP
38962: POP
// if result and not asc then
38963: LD_VAR 0 6
38967: IFFALSE 38976
38969: PUSH
38970: LD_VAR 0 4
38974: NOT
38975: AND
38976: IFFALSE 39051
// begin tmp := result ;
38978: LD_ADDR_VAR 0 9
38982: PUSH
38983: LD_VAR 0 6
38987: ST_TO_ADDR
// for i = tmp downto 1 do
38988: LD_ADDR_VAR 0 7
38992: PUSH
38993: DOUBLE
38994: LD_VAR 0 9
38998: INC
38999: ST_TO_ADDR
39000: LD_INT 1
39002: PUSH
39003: FOR_DOWNTO
39004: IFFALSE 39049
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39006: LD_ADDR_VAR 0 6
39010: PUSH
39011: LD_VAR 0 6
39015: PPUSH
39016: LD_VAR 0 9
39020: PUSH
39021: LD_VAR 0 7
39025: MINUS
39026: PUSH
39027: LD_INT 1
39029: PLUS
39030: PPUSH
39031: LD_VAR 0 9
39035: PUSH
39036: LD_VAR 0 7
39040: ARRAY
39041: PPUSH
39042: CALL_OW 1
39046: ST_TO_ADDR
39047: GO 39003
39049: POP
39050: POP
// end ; tmp := [ ] ;
39051: LD_ADDR_VAR 0 9
39055: PUSH
39056: EMPTY
39057: ST_TO_ADDR
// if mode then
39058: LD_VAR 0 5
39062: IFFALSE 39131
// begin for i = 1 to result do
39064: LD_ADDR_VAR 0 7
39068: PUSH
39069: DOUBLE
39070: LD_INT 1
39072: DEC
39073: ST_TO_ADDR
39074: LD_VAR 0 6
39078: PUSH
39079: FOR_TO
39080: IFFALSE 39119
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39082: LD_ADDR_VAR 0 9
39086: PUSH
39087: LD_VAR 0 9
39091: PPUSH
39092: LD_VAR 0 7
39096: PPUSH
39097: LD_VAR 0 6
39101: PUSH
39102: LD_VAR 0 7
39106: ARRAY
39107: PUSH
39108: LD_INT 1
39110: ARRAY
39111: PPUSH
39112: CALL_OW 1
39116: ST_TO_ADDR
39117: GO 39079
39119: POP
39120: POP
// result := tmp ;
39121: LD_ADDR_VAR 0 6
39125: PUSH
39126: LD_VAR 0 9
39130: ST_TO_ADDR
// end ; end ;
39131: LD_VAR 0 6
39135: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39136: LD_INT 0
39138: PPUSH
39139: PPUSH
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39144: LD_ADDR_VAR 0 5
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: ST_TO_ADDR
// if not x or not y then
39166: LD_VAR 0 2
39170: NOT
39171: IFTRUE 39180
39173: PUSH
39174: LD_VAR 0 3
39178: NOT
39179: OR
39180: IFFALSE 39184
// exit ;
39182: GO 40840
// if not range then
39184: LD_VAR 0 4
39188: NOT
39189: IFFALSE 39199
// range := 10 ;
39191: LD_ADDR_VAR 0 4
39195: PUSH
39196: LD_INT 10
39198: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39199: LD_ADDR_VAR 0 8
39203: PUSH
39204: LD_INT 81
39206: PUSH
39207: LD_VAR 0 1
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 92
39218: PUSH
39219: LD_VAR 0 2
39223: PUSH
39224: LD_VAR 0 3
39228: PUSH
39229: LD_VAR 0 4
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: LD_INT 21
39245: PUSH
39246: LD_INT 3
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: LIST
39261: PPUSH
39262: CALL_OW 69
39266: ST_TO_ADDR
// if not tmp then
39267: LD_VAR 0 8
39271: NOT
39272: IFFALSE 39276
// exit ;
39274: GO 40840
// for i in tmp do
39276: LD_ADDR_VAR 0 6
39280: PUSH
39281: LD_VAR 0 8
39285: PUSH
39286: FOR_IN
39287: IFFALSE 40815
// begin points := [ 0 , 0 , 0 ] ;
39289: LD_ADDR_VAR 0 9
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: ST_TO_ADDR
// bpoints := 1 ;
39308: LD_ADDR_VAR 0 10
39312: PUSH
39313: LD_INT 1
39315: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39316: LD_VAR 0 6
39320: PPUSH
39321: CALL_OW 247
39325: PUSH
39326: LD_INT 1
39328: DOUBLE
39329: EQUAL
39330: IFTRUE 39334
39332: GO 39916
39334: POP
// begin if GetClass ( i ) = 1 then
39335: LD_VAR 0 6
39339: PPUSH
39340: CALL_OW 257
39344: PUSH
39345: LD_INT 1
39347: EQUAL
39348: IFFALSE 39369
// points := [ 10 , 5 , 3 ] ;
39350: LD_ADDR_VAR 0 9
39354: PUSH
39355: LD_INT 10
39357: PUSH
39358: LD_INT 5
39360: PUSH
39361: LD_INT 3
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: LIST
39368: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39369: LD_VAR 0 6
39373: PPUSH
39374: CALL_OW 257
39378: PUSH
39379: LD_INT 2
39381: PUSH
39382: LD_INT 3
39384: PUSH
39385: LD_INT 4
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: LIST
39392: IN
39393: IFFALSE 39414
// points := [ 3 , 2 , 1 ] ;
39395: LD_ADDR_VAR 0 9
39399: PUSH
39400: LD_INT 3
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: LIST
39413: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39414: LD_VAR 0 6
39418: PPUSH
39419: CALL_OW 257
39423: PUSH
39424: LD_INT 5
39426: EQUAL
39427: IFFALSE 39448
// points := [ 130 , 5 , 2 ] ;
39429: LD_ADDR_VAR 0 9
39433: PUSH
39434: LD_INT 130
39436: PUSH
39437: LD_INT 5
39439: PUSH
39440: LD_INT 2
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: LIST
39447: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39448: LD_VAR 0 6
39452: PPUSH
39453: CALL_OW 257
39457: PUSH
39458: LD_INT 8
39460: EQUAL
39461: IFFALSE 39482
// points := [ 35 , 35 , 30 ] ;
39463: LD_ADDR_VAR 0 9
39467: PUSH
39468: LD_INT 35
39470: PUSH
39471: LD_INT 35
39473: PUSH
39474: LD_INT 30
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: LIST
39481: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39482: LD_VAR 0 6
39486: PPUSH
39487: CALL_OW 257
39491: PUSH
39492: LD_INT 9
39494: EQUAL
39495: IFFALSE 39516
// points := [ 20 , 55 , 40 ] ;
39497: LD_ADDR_VAR 0 9
39501: PUSH
39502: LD_INT 20
39504: PUSH
39505: LD_INT 55
39507: PUSH
39508: LD_INT 40
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39516: LD_VAR 0 6
39520: PPUSH
39521: CALL_OW 257
39525: PUSH
39526: LD_INT 12
39528: PUSH
39529: LD_INT 16
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: IN
39536: IFFALSE 39557
// points := [ 5 , 3 , 2 ] ;
39538: LD_ADDR_VAR 0 9
39542: PUSH
39543: LD_INT 5
39545: PUSH
39546: LD_INT 3
39548: PUSH
39549: LD_INT 2
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: LIST
39556: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39557: LD_VAR 0 6
39561: PPUSH
39562: CALL_OW 257
39566: PUSH
39567: LD_INT 17
39569: EQUAL
39570: IFFALSE 39591
// points := [ 100 , 50 , 75 ] ;
39572: LD_ADDR_VAR 0 9
39576: PUSH
39577: LD_INT 100
39579: PUSH
39580: LD_INT 50
39582: PUSH
39583: LD_INT 75
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: LIST
39590: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39591: LD_VAR 0 6
39595: PPUSH
39596: CALL_OW 257
39600: PUSH
39601: LD_INT 15
39603: EQUAL
39604: IFFALSE 39625
// points := [ 10 , 5 , 3 ] ;
39606: LD_ADDR_VAR 0 9
39610: PUSH
39611: LD_INT 10
39613: PUSH
39614: LD_INT 5
39616: PUSH
39617: LD_INT 3
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: LIST
39624: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39625: LD_VAR 0 6
39629: PPUSH
39630: CALL_OW 257
39634: PUSH
39635: LD_INT 14
39637: EQUAL
39638: IFFALSE 39659
// points := [ 10 , 0 , 0 ] ;
39640: LD_ADDR_VAR 0 9
39644: PUSH
39645: LD_INT 10
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: LIST
39658: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39659: LD_VAR 0 6
39663: PPUSH
39664: CALL_OW 257
39668: PUSH
39669: LD_INT 11
39671: EQUAL
39672: IFFALSE 39693
// points := [ 30 , 10 , 5 ] ;
39674: LD_ADDR_VAR 0 9
39678: PUSH
39679: LD_INT 30
39681: PUSH
39682: LD_INT 10
39684: PUSH
39685: LD_INT 5
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: LIST
39692: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39693: LD_VAR 0 1
39697: PPUSH
39698: LD_INT 5
39700: PPUSH
39701: CALL_OW 321
39705: PUSH
39706: LD_INT 2
39708: EQUAL
39709: IFFALSE 39726
// bpoints := bpoints * 1.8 ;
39711: LD_ADDR_VAR 0 10
39715: PUSH
39716: LD_VAR 0 10
39720: PUSH
39721: LD_REAL  1.80000000000000E+0000
39724: MUL
39725: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39726: LD_VAR 0 6
39730: PPUSH
39731: CALL_OW 257
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: LD_INT 2
39741: PUSH
39742: LD_INT 3
39744: PUSH
39745: LD_INT 4
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: IN
39754: IFFALSE 39774
39756: PUSH
39757: LD_VAR 0 1
39761: PPUSH
39762: LD_INT 51
39764: PPUSH
39765: CALL_OW 321
39769: PUSH
39770: LD_INT 2
39772: EQUAL
39773: AND
39774: IFFALSE 39791
// bpoints := bpoints * 1.2 ;
39776: LD_ADDR_VAR 0 10
39780: PUSH
39781: LD_VAR 0 10
39785: PUSH
39786: LD_REAL  1.20000000000000E+0000
39789: MUL
39790: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39791: LD_VAR 0 6
39795: PPUSH
39796: CALL_OW 257
39800: PUSH
39801: LD_INT 5
39803: PUSH
39804: LD_INT 7
39806: PUSH
39807: LD_INT 9
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: IN
39815: IFFALSE 39835
39817: PUSH
39818: LD_VAR 0 1
39822: PPUSH
39823: LD_INT 52
39825: PPUSH
39826: CALL_OW 321
39830: PUSH
39831: LD_INT 2
39833: EQUAL
39834: AND
39835: IFFALSE 39852
// bpoints := bpoints * 1.5 ;
39837: LD_ADDR_VAR 0 10
39841: PUSH
39842: LD_VAR 0 10
39846: PUSH
39847: LD_REAL  1.50000000000000E+0000
39850: MUL
39851: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39852: LD_VAR 0 1
39856: PPUSH
39857: LD_INT 66
39859: PPUSH
39860: CALL_OW 321
39864: PUSH
39865: LD_INT 2
39867: EQUAL
39868: IFFALSE 39885
// bpoints := bpoints * 1.1 ;
39870: LD_ADDR_VAR 0 10
39874: PUSH
39875: LD_VAR 0 10
39879: PUSH
39880: LD_REAL  1.10000000000000E+0000
39883: MUL
39884: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39885: LD_ADDR_VAR 0 10
39889: PUSH
39890: LD_VAR 0 10
39894: PUSH
39895: LD_VAR 0 6
39899: PPUSH
39900: LD_INT 1
39902: PPUSH
39903: CALL_OW 259
39907: PUSH
39908: LD_REAL  1.15000000000000E+0000
39911: MUL
39912: MUL
39913: ST_TO_ADDR
// end ; unit_vehicle :
39914: GO 40744
39916: LD_INT 2
39918: DOUBLE
39919: EQUAL
39920: IFTRUE 39924
39922: GO 40732
39924: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39925: LD_VAR 0 6
39929: PPUSH
39930: CALL_OW 264
39934: PUSH
39935: LD_INT 2
39937: PUSH
39938: LD_INT 42
39940: PUSH
39941: LD_INT 24
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: LIST
39948: IN
39949: IFFALSE 39970
// points := [ 25 , 5 , 3 ] ;
39951: LD_ADDR_VAR 0 9
39955: PUSH
39956: LD_INT 25
39958: PUSH
39959: LD_INT 5
39961: PUSH
39962: LD_INT 3
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: LIST
39969: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39970: LD_VAR 0 6
39974: PPUSH
39975: CALL_OW 264
39979: PUSH
39980: LD_INT 4
39982: PUSH
39983: LD_INT 43
39985: PUSH
39986: LD_INT 25
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: IN
39994: IFFALSE 40015
// points := [ 40 , 15 , 5 ] ;
39996: LD_ADDR_VAR 0 9
40000: PUSH
40001: LD_INT 40
40003: PUSH
40004: LD_INT 15
40006: PUSH
40007: LD_INT 5
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: LIST
40014: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40015: LD_VAR 0 6
40019: PPUSH
40020: CALL_OW 264
40024: PUSH
40025: LD_INT 3
40027: PUSH
40028: LD_INT 23
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: IN
40035: IFFALSE 40056
// points := [ 7 , 25 , 8 ] ;
40037: LD_ADDR_VAR 0 9
40041: PUSH
40042: LD_INT 7
40044: PUSH
40045: LD_INT 25
40047: PUSH
40048: LD_INT 8
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: LIST
40055: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40056: LD_VAR 0 6
40060: PPUSH
40061: CALL_OW 264
40065: PUSH
40066: LD_INT 5
40068: PUSH
40069: LD_INT 27
40071: PUSH
40072: LD_INT 44
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: LIST
40079: IN
40080: IFFALSE 40101
// points := [ 14 , 50 , 16 ] ;
40082: LD_ADDR_VAR 0 9
40086: PUSH
40087: LD_INT 14
40089: PUSH
40090: LD_INT 50
40092: PUSH
40093: LD_INT 16
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: LIST
40100: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40101: LD_VAR 0 6
40105: PPUSH
40106: CALL_OW 264
40110: PUSH
40111: LD_INT 6
40113: PUSH
40114: LD_INT 46
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: IN
40121: IFFALSE 40142
// points := [ 32 , 120 , 70 ] ;
40123: LD_ADDR_VAR 0 9
40127: PUSH
40128: LD_INT 32
40130: PUSH
40131: LD_INT 120
40133: PUSH
40134: LD_INT 70
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: LIST
40141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40142: LD_VAR 0 6
40146: PPUSH
40147: CALL_OW 264
40151: PUSH
40152: LD_INT 7
40154: PUSH
40155: LD_INT 28
40157: PUSH
40158: LD_INT 45
40160: PUSH
40161: LD_INT 92
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: IN
40170: IFFALSE 40191
// points := [ 35 , 20 , 45 ] ;
40172: LD_ADDR_VAR 0 9
40176: PUSH
40177: LD_INT 35
40179: PUSH
40180: LD_INT 20
40182: PUSH
40183: LD_INT 45
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: LIST
40190: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40191: LD_VAR 0 6
40195: PPUSH
40196: CALL_OW 264
40200: PUSH
40201: LD_INT 47
40203: PUSH
40204: EMPTY
40205: LIST
40206: IN
40207: IFFALSE 40228
// points := [ 67 , 45 , 75 ] ;
40209: LD_ADDR_VAR 0 9
40213: PUSH
40214: LD_INT 67
40216: PUSH
40217: LD_INT 45
40219: PUSH
40220: LD_INT 75
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: LIST
40227: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40228: LD_VAR 0 6
40232: PPUSH
40233: CALL_OW 264
40237: PUSH
40238: LD_INT 26
40240: PUSH
40241: EMPTY
40242: LIST
40243: IN
40244: IFFALSE 40265
// points := [ 120 , 30 , 80 ] ;
40246: LD_ADDR_VAR 0 9
40250: PUSH
40251: LD_INT 120
40253: PUSH
40254: LD_INT 30
40256: PUSH
40257: LD_INT 80
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: LIST
40264: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40265: LD_VAR 0 6
40269: PPUSH
40270: CALL_OW 264
40274: PUSH
40275: LD_INT 22
40277: PUSH
40278: EMPTY
40279: LIST
40280: IN
40281: IFFALSE 40302
// points := [ 40 , 1 , 1 ] ;
40283: LD_ADDR_VAR 0 9
40287: PUSH
40288: LD_INT 40
40290: PUSH
40291: LD_INT 1
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: LIST
40301: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40302: LD_VAR 0 6
40306: PPUSH
40307: CALL_OW 264
40311: PUSH
40312: LD_INT 29
40314: PUSH
40315: EMPTY
40316: LIST
40317: IN
40318: IFFALSE 40339
// points := [ 70 , 200 , 400 ] ;
40320: LD_ADDR_VAR 0 9
40324: PUSH
40325: LD_INT 70
40327: PUSH
40328: LD_INT 200
40330: PUSH
40331: LD_INT 400
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: LIST
40338: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40339: LD_VAR 0 6
40343: PPUSH
40344: CALL_OW 264
40348: PUSH
40349: LD_INT 14
40351: PUSH
40352: LD_INT 53
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: IN
40359: IFFALSE 40380
// points := [ 40 , 10 , 20 ] ;
40361: LD_ADDR_VAR 0 9
40365: PUSH
40366: LD_INT 40
40368: PUSH
40369: LD_INT 10
40371: PUSH
40372: LD_INT 20
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: LIST
40379: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40380: LD_VAR 0 6
40384: PPUSH
40385: CALL_OW 264
40389: PUSH
40390: LD_INT 9
40392: PUSH
40393: EMPTY
40394: LIST
40395: IN
40396: IFFALSE 40417
// points := [ 5 , 70 , 20 ] ;
40398: LD_ADDR_VAR 0 9
40402: PUSH
40403: LD_INT 5
40405: PUSH
40406: LD_INT 70
40408: PUSH
40409: LD_INT 20
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: LIST
40416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40417: LD_VAR 0 6
40421: PPUSH
40422: CALL_OW 264
40426: PUSH
40427: LD_INT 10
40429: PUSH
40430: EMPTY
40431: LIST
40432: IN
40433: IFFALSE 40454
// points := [ 35 , 110 , 70 ] ;
40435: LD_ADDR_VAR 0 9
40439: PUSH
40440: LD_INT 35
40442: PUSH
40443: LD_INT 110
40445: PUSH
40446: LD_INT 70
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: LIST
40453: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40454: LD_VAR 0 6
40458: PPUSH
40459: CALL_OW 265
40463: PUSH
40464: LD_INT 25
40466: EQUAL
40467: IFFALSE 40488
// points := [ 80 , 65 , 100 ] ;
40469: LD_ADDR_VAR 0 9
40473: PUSH
40474: LD_INT 80
40476: PUSH
40477: LD_INT 65
40479: PUSH
40480: LD_INT 100
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: LIST
40487: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40488: LD_VAR 0 6
40492: PPUSH
40493: CALL_OW 263
40497: PUSH
40498: LD_INT 1
40500: EQUAL
40501: IFFALSE 40536
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40503: LD_ADDR_VAR 0 10
40507: PUSH
40508: LD_VAR 0 10
40512: PUSH
40513: LD_VAR 0 6
40517: PPUSH
40518: CALL_OW 311
40522: PPUSH
40523: LD_INT 3
40525: PPUSH
40526: CALL_OW 259
40530: PUSH
40531: LD_INT 4
40533: MUL
40534: MUL
40535: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40536: LD_VAR 0 6
40540: PPUSH
40541: CALL_OW 263
40545: PUSH
40546: LD_INT 2
40548: EQUAL
40549: IFFALSE 40600
// begin j := IsControledBy ( i ) ;
40551: LD_ADDR_VAR 0 7
40555: PUSH
40556: LD_VAR 0 6
40560: PPUSH
40561: CALL_OW 312
40565: ST_TO_ADDR
// if j then
40566: LD_VAR 0 7
40570: IFFALSE 40600
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40572: LD_ADDR_VAR 0 10
40576: PUSH
40577: LD_VAR 0 10
40581: PUSH
40582: LD_VAR 0 7
40586: PPUSH
40587: LD_INT 3
40589: PPUSH
40590: CALL_OW 259
40594: PUSH
40595: LD_INT 3
40597: MUL
40598: MUL
40599: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40600: LD_VAR 0 6
40604: PPUSH
40605: CALL_OW 264
40609: PUSH
40610: LD_INT 5
40612: PUSH
40613: LD_INT 6
40615: PUSH
40616: LD_INT 46
40618: PUSH
40619: LD_INT 44
40621: PUSH
40622: LD_INT 47
40624: PUSH
40625: LD_INT 45
40627: PUSH
40628: LD_INT 28
40630: PUSH
40631: LD_INT 7
40633: PUSH
40634: LD_INT 27
40636: PUSH
40637: LD_INT 29
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: IN
40652: IFFALSE 40672
40654: PUSH
40655: LD_VAR 0 1
40659: PPUSH
40660: LD_INT 52
40662: PPUSH
40663: CALL_OW 321
40667: PUSH
40668: LD_INT 2
40670: EQUAL
40671: AND
40672: IFFALSE 40689
// bpoints := bpoints * 1.2 ;
40674: LD_ADDR_VAR 0 10
40678: PUSH
40679: LD_VAR 0 10
40683: PUSH
40684: LD_REAL  1.20000000000000E+0000
40687: MUL
40688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40689: LD_VAR 0 6
40693: PPUSH
40694: CALL_OW 264
40698: PUSH
40699: LD_INT 6
40701: PUSH
40702: LD_INT 46
40704: PUSH
40705: LD_INT 47
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: LIST
40712: IN
40713: IFFALSE 40730
// bpoints := bpoints * 1.2 ;
40715: LD_ADDR_VAR 0 10
40719: PUSH
40720: LD_VAR 0 10
40724: PUSH
40725: LD_REAL  1.20000000000000E+0000
40728: MUL
40729: ST_TO_ADDR
// end ; unit_building :
40730: GO 40744
40732: LD_INT 3
40734: DOUBLE
40735: EQUAL
40736: IFTRUE 40740
40738: GO 40743
40740: POP
// ; end ;
40741: GO 40744
40743: POP
// for j = 1 to 3 do
40744: LD_ADDR_VAR 0 7
40748: PUSH
40749: DOUBLE
40750: LD_INT 1
40752: DEC
40753: ST_TO_ADDR
40754: LD_INT 3
40756: PUSH
40757: FOR_TO
40758: IFFALSE 40811
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40760: LD_ADDR_VAR 0 5
40764: PUSH
40765: LD_VAR 0 5
40769: PPUSH
40770: LD_VAR 0 7
40774: PPUSH
40775: LD_VAR 0 5
40779: PUSH
40780: LD_VAR 0 7
40784: ARRAY
40785: PUSH
40786: LD_VAR 0 9
40790: PUSH
40791: LD_VAR 0 7
40795: ARRAY
40796: PUSH
40797: LD_VAR 0 10
40801: MUL
40802: PLUS
40803: PPUSH
40804: CALL_OW 1
40808: ST_TO_ADDR
40809: GO 40757
40811: POP
40812: POP
// end ;
40813: GO 39286
40815: POP
40816: POP
// result := Replace ( result , 4 , tmp ) ;
40817: LD_ADDR_VAR 0 5
40821: PUSH
40822: LD_VAR 0 5
40826: PPUSH
40827: LD_INT 4
40829: PPUSH
40830: LD_VAR 0 8
40834: PPUSH
40835: CALL_OW 1
40839: ST_TO_ADDR
// end ;
40840: LD_VAR 0 5
40844: RET
// export function DangerAtRange ( unit , range ) ; begin
40845: LD_INT 0
40847: PPUSH
// if not unit then
40848: LD_VAR 0 1
40852: NOT
40853: IFFALSE 40857
// exit ;
40855: GO 40902
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40857: LD_ADDR_VAR 0 3
40861: PUSH
40862: LD_VAR 0 1
40866: PPUSH
40867: CALL_OW 255
40871: PPUSH
40872: LD_VAR 0 1
40876: PPUSH
40877: CALL_OW 250
40881: PPUSH
40882: LD_VAR 0 1
40886: PPUSH
40887: CALL_OW 251
40891: PPUSH
40892: LD_VAR 0 2
40896: PPUSH
40897: CALL 39136 0 4
40901: ST_TO_ADDR
// end ;
40902: LD_VAR 0 3
40906: RET
// export function DangerInArea ( side , area ) ; begin
40907: LD_INT 0
40909: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40910: LD_ADDR_VAR 0 3
40914: PUSH
40915: LD_VAR 0 2
40919: PPUSH
40920: LD_INT 81
40922: PUSH
40923: LD_VAR 0 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PPUSH
40932: CALL_OW 70
40936: ST_TO_ADDR
// end ;
40937: LD_VAR 0 3
40941: RET
// export function IsExtension ( b ) ; begin
40942: LD_INT 0
40944: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40945: LD_ADDR_VAR 0 2
40949: PUSH
40950: LD_VAR 0 1
40954: PUSH
40955: LD_INT 23
40957: PUSH
40958: LD_INT 20
40960: PUSH
40961: LD_INT 22
40963: PUSH
40964: LD_INT 17
40966: PUSH
40967: LD_INT 24
40969: PUSH
40970: LD_INT 21
40972: PUSH
40973: LD_INT 19
40975: PUSH
40976: LD_INT 16
40978: PUSH
40979: LD_INT 25
40981: PUSH
40982: LD_INT 18
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: IN
40997: ST_TO_ADDR
// end ;
40998: LD_VAR 0 2
41002: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41003: LD_INT 0
41005: PPUSH
41006: PPUSH
41007: PPUSH
// result := [ ] ;
41008: LD_ADDR_VAR 0 4
41012: PUSH
41013: EMPTY
41014: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41015: LD_ADDR_VAR 0 5
41019: PUSH
41020: LD_VAR 0 2
41024: PPUSH
41025: LD_INT 21
41027: PUSH
41028: LD_INT 3
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PPUSH
41035: CALL_OW 70
41039: ST_TO_ADDR
// if not tmp then
41040: LD_VAR 0 5
41044: NOT
41045: IFFALSE 41049
// exit ;
41047: GO 41113
// if checkLink then
41049: LD_VAR 0 3
41053: IFFALSE 41103
// begin for i in tmp do
41055: LD_ADDR_VAR 0 6
41059: PUSH
41060: LD_VAR 0 5
41064: PUSH
41065: FOR_IN
41066: IFFALSE 41101
// if GetBase ( i ) <> base then
41068: LD_VAR 0 6
41072: PPUSH
41073: CALL_OW 274
41077: PUSH
41078: LD_VAR 0 1
41082: NONEQUAL
41083: IFFALSE 41099
// ComLinkToBase ( base , i ) ;
41085: LD_VAR 0 1
41089: PPUSH
41090: LD_VAR 0 6
41094: PPUSH
41095: CALL_OW 169
41099: GO 41065
41101: POP
41102: POP
// end ; result := tmp ;
41103: LD_ADDR_VAR 0 4
41107: PUSH
41108: LD_VAR 0 5
41112: ST_TO_ADDR
// end ;
41113: LD_VAR 0 4
41117: RET
// export function ComComplete ( units , b ) ; var i ; begin
41118: LD_INT 0
41120: PPUSH
41121: PPUSH
// if not units then
41122: LD_VAR 0 1
41126: NOT
41127: IFFALSE 41131
// exit ;
41129: GO 41221
// for i in units do
41131: LD_ADDR_VAR 0 4
41135: PUSH
41136: LD_VAR 0 1
41140: PUSH
41141: FOR_IN
41142: IFFALSE 41219
// if BuildingStatus ( b ) = bs_build then
41144: LD_VAR 0 2
41148: PPUSH
41149: CALL_OW 461
41153: PUSH
41154: LD_INT 1
41156: EQUAL
41157: IFFALSE 41217
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41159: LD_VAR 0 4
41163: PPUSH
41164: LD_STRING h
41166: PUSH
41167: LD_VAR 0 2
41171: PPUSH
41172: CALL_OW 250
41176: PUSH
41177: LD_VAR 0 2
41181: PPUSH
41182: CALL_OW 251
41186: PUSH
41187: LD_VAR 0 2
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: PUSH
41210: EMPTY
41211: LIST
41212: PPUSH
41213: CALL_OW 446
41217: GO 41141
41219: POP
41220: POP
// end ;
41221: LD_VAR 0 3
41225: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41226: LD_INT 0
41228: PPUSH
41229: PPUSH
41230: PPUSH
41231: PPUSH
41232: PPUSH
41233: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41234: LD_VAR 0 1
41238: NOT
41239: IFTRUE 41256
41241: PUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: CALL_OW 263
41251: PUSH
41252: LD_INT 2
41254: NONEQUAL
41255: OR
41256: IFFALSE 41260
// exit ;
41258: GO 41576
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41260: LD_ADDR_VAR 0 6
41264: PUSH
41265: LD_INT 22
41267: PUSH
41268: LD_VAR 0 1
41272: PPUSH
41273: CALL_OW 255
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: LD_INT 30
41287: PUSH
41288: LD_INT 36
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 34
41297: PUSH
41298: LD_INT 31
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: LIST
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PPUSH
41314: CALL_OW 69
41318: ST_TO_ADDR
// if not tmp then
41319: LD_VAR 0 6
41323: NOT
41324: IFFALSE 41328
// exit ;
41326: GO 41576
// result := [ ] ;
41328: LD_ADDR_VAR 0 2
41332: PUSH
41333: EMPTY
41334: ST_TO_ADDR
// for i in tmp do
41335: LD_ADDR_VAR 0 3
41339: PUSH
41340: LD_VAR 0 6
41344: PUSH
41345: FOR_IN
41346: IFFALSE 41417
// begin t := UnitsInside ( i ) ;
41348: LD_ADDR_VAR 0 4
41352: PUSH
41353: LD_VAR 0 3
41357: PPUSH
41358: CALL_OW 313
41362: ST_TO_ADDR
// if t then
41363: LD_VAR 0 4
41367: IFFALSE 41415
// for j in t do
41369: LD_ADDR_VAR 0 7
41373: PUSH
41374: LD_VAR 0 4
41378: PUSH
41379: FOR_IN
41380: IFFALSE 41413
// result := Replace ( result , result + 1 , j ) ;
41382: LD_ADDR_VAR 0 2
41386: PUSH
41387: LD_VAR 0 2
41391: PPUSH
41392: LD_VAR 0 2
41396: PUSH
41397: LD_INT 1
41399: PLUS
41400: PPUSH
41401: LD_VAR 0 7
41405: PPUSH
41406: CALL_OW 1
41410: ST_TO_ADDR
41411: GO 41379
41413: POP
41414: POP
// end ;
41415: GO 41345
41417: POP
41418: POP
// if not result then
41419: LD_VAR 0 2
41423: NOT
41424: IFFALSE 41428
// exit ;
41426: GO 41576
// mech := result [ 1 ] ;
41428: LD_ADDR_VAR 0 5
41432: PUSH
41433: LD_VAR 0 2
41437: PUSH
41438: LD_INT 1
41440: ARRAY
41441: ST_TO_ADDR
// if result > 1 then
41442: LD_VAR 0 2
41446: PUSH
41447: LD_INT 1
41449: GREATER
41450: IFFALSE 41562
// begin for i = 2 to result do
41452: LD_ADDR_VAR 0 3
41456: PUSH
41457: DOUBLE
41458: LD_INT 2
41460: DEC
41461: ST_TO_ADDR
41462: LD_VAR 0 2
41466: PUSH
41467: FOR_TO
41468: IFFALSE 41560
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41470: LD_ADDR_VAR 0 4
41474: PUSH
41475: LD_VAR 0 2
41479: PUSH
41480: LD_VAR 0 3
41484: ARRAY
41485: PPUSH
41486: LD_INT 3
41488: PPUSH
41489: CALL_OW 259
41493: PUSH
41494: LD_VAR 0 2
41498: PUSH
41499: LD_VAR 0 3
41503: ARRAY
41504: PPUSH
41505: CALL_OW 432
41509: MINUS
41510: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41511: LD_VAR 0 4
41515: PUSH
41516: LD_VAR 0 5
41520: PPUSH
41521: LD_INT 3
41523: PPUSH
41524: CALL_OW 259
41528: PUSH
41529: LD_VAR 0 5
41533: PPUSH
41534: CALL_OW 432
41538: MINUS
41539: GREATEREQUAL
41540: IFFALSE 41558
// mech := result [ i ] ;
41542: LD_ADDR_VAR 0 5
41546: PUSH
41547: LD_VAR 0 2
41551: PUSH
41552: LD_VAR 0 3
41556: ARRAY
41557: ST_TO_ADDR
// end ;
41558: GO 41467
41560: POP
41561: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41562: LD_VAR 0 1
41566: PPUSH
41567: LD_VAR 0 5
41571: PPUSH
41572: CALL_OW 135
// end ;
41576: LD_VAR 0 2
41580: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41581: LD_INT 0
41583: PPUSH
41584: PPUSH
41585: PPUSH
41586: PPUSH
41587: PPUSH
41588: PPUSH
41589: PPUSH
41590: PPUSH
41591: PPUSH
41592: PPUSH
41593: PPUSH
41594: PPUSH
41595: PPUSH
// result := [ ] ;
41596: LD_ADDR_VAR 0 7
41600: PUSH
41601: EMPTY
41602: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41603: LD_VAR 0 1
41607: PPUSH
41608: CALL_OW 266
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: IN
41623: NOT
41624: IFFALSE 41628
// exit ;
41626: GO 43268
// if name then
41628: LD_VAR 0 3
41632: IFFALSE 41648
// SetBName ( base_dep , name ) ;
41634: LD_VAR 0 1
41638: PPUSH
41639: LD_VAR 0 3
41643: PPUSH
41644: CALL_OW 500
// base := GetBase ( base_dep ) ;
41648: LD_ADDR_VAR 0 15
41652: PUSH
41653: LD_VAR 0 1
41657: PPUSH
41658: CALL_OW 274
41662: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41663: LD_ADDR_VAR 0 16
41667: PUSH
41668: LD_VAR 0 1
41672: PPUSH
41673: CALL_OW 255
41677: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41678: LD_ADDR_VAR 0 17
41682: PUSH
41683: LD_VAR 0 1
41687: PPUSH
41688: CALL_OW 248
41692: ST_TO_ADDR
// if sources then
41693: LD_VAR 0 5
41697: IFFALSE 41744
// for i = 1 to 3 do
41699: LD_ADDR_VAR 0 8
41703: PUSH
41704: DOUBLE
41705: LD_INT 1
41707: DEC
41708: ST_TO_ADDR
41709: LD_INT 3
41711: PUSH
41712: FOR_TO
41713: IFFALSE 41742
// AddResourceType ( base , i , sources [ i ] ) ;
41715: LD_VAR 0 15
41719: PPUSH
41720: LD_VAR 0 8
41724: PPUSH
41725: LD_VAR 0 5
41729: PUSH
41730: LD_VAR 0 8
41734: ARRAY
41735: PPUSH
41736: CALL_OW 276
41740: GO 41712
41742: POP
41743: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41744: LD_ADDR_VAR 0 18
41748: PUSH
41749: LD_VAR 0 15
41753: PPUSH
41754: LD_VAR 0 2
41758: PPUSH
41759: LD_INT 1
41761: PPUSH
41762: CALL 41003 0 3
41766: ST_TO_ADDR
// InitHc ;
41767: CALL_OW 19
// InitUc ;
41771: CALL_OW 18
// uc_side := side ;
41775: LD_ADDR_OWVAR 20
41779: PUSH
41780: LD_VAR 0 16
41784: ST_TO_ADDR
// uc_nation := nation ;
41785: LD_ADDR_OWVAR 21
41789: PUSH
41790: LD_VAR 0 17
41794: ST_TO_ADDR
// if buildings then
41795: LD_VAR 0 18
41799: IFFALSE 43127
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41801: LD_ADDR_VAR 0 19
41805: PUSH
41806: LD_VAR 0 18
41810: PPUSH
41811: LD_INT 2
41813: PUSH
41814: LD_INT 30
41816: PUSH
41817: LD_INT 29
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 30
41826: PUSH
41827: LD_INT 30
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: LIST
41838: PPUSH
41839: CALL_OW 72
41843: ST_TO_ADDR
// if tmp then
41844: LD_VAR 0 19
41848: IFFALSE 41896
// for i in tmp do
41850: LD_ADDR_VAR 0 8
41854: PUSH
41855: LD_VAR 0 19
41859: PUSH
41860: FOR_IN
41861: IFFALSE 41894
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41863: LD_VAR 0 8
41867: PPUSH
41868: CALL_OW 250
41872: PPUSH
41873: LD_VAR 0 8
41877: PPUSH
41878: CALL_OW 251
41882: PPUSH
41883: LD_VAR 0 16
41887: PPUSH
41888: CALL_OW 441
41892: GO 41860
41894: POP
41895: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41896: LD_VAR 0 18
41900: PPUSH
41901: LD_INT 2
41903: PUSH
41904: LD_INT 30
41906: PUSH
41907: LD_INT 32
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 30
41916: PUSH
41917: LD_INT 33
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: LIST
41928: PPUSH
41929: CALL_OW 72
41933: IFFALSE 42021
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41935: LD_ADDR_VAR 0 8
41939: PUSH
41940: LD_VAR 0 18
41944: PPUSH
41945: LD_INT 2
41947: PUSH
41948: LD_INT 30
41950: PUSH
41951: LD_INT 32
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 30
41960: PUSH
41961: LD_INT 33
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: LIST
41972: PPUSH
41973: CALL_OW 72
41977: PUSH
41978: FOR_IN
41979: IFFALSE 42019
// begin if not GetBWeapon ( i ) then
41981: LD_VAR 0 8
41985: PPUSH
41986: CALL_OW 269
41990: NOT
41991: IFFALSE 42017
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41993: LD_VAR 0 8
41997: PPUSH
41998: LD_VAR 0 8
42002: PPUSH
42003: LD_VAR 0 2
42007: PPUSH
42008: CALL 43273 0 2
42012: PPUSH
42013: CALL_OW 431
// end ;
42017: GO 41978
42019: POP
42020: POP
// end ; for i = 1 to personel do
42021: LD_ADDR_VAR 0 8
42025: PUSH
42026: DOUBLE
42027: LD_INT 1
42029: DEC
42030: ST_TO_ADDR
42031: LD_VAR 0 6
42035: PUSH
42036: FOR_TO
42037: IFFALSE 43107
// begin if i > 4 then
42039: LD_VAR 0 8
42043: PUSH
42044: LD_INT 4
42046: GREATER
42047: IFFALSE 42051
// break ;
42049: GO 43107
// case i of 1 :
42051: LD_VAR 0 8
42055: PUSH
42056: LD_INT 1
42058: DOUBLE
42059: EQUAL
42060: IFTRUE 42064
42062: GO 42144
42064: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42065: LD_ADDR_VAR 0 12
42069: PUSH
42070: LD_VAR 0 18
42074: PPUSH
42075: LD_INT 22
42077: PUSH
42078: LD_VAR 0 16
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 58
42089: PUSH
42090: EMPTY
42091: LIST
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: LD_INT 30
42098: PUSH
42099: LD_INT 32
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 30
42108: PUSH
42109: LD_INT 4
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 30
42118: PUSH
42119: LD_INT 5
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: LIST
42136: PPUSH
42137: CALL_OW 72
42141: ST_TO_ADDR
42142: GO 42366
42144: LD_INT 2
42146: DOUBLE
42147: EQUAL
42148: IFTRUE 42152
42150: GO 42214
42152: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42153: LD_ADDR_VAR 0 12
42157: PUSH
42158: LD_VAR 0 18
42162: PPUSH
42163: LD_INT 22
42165: PUSH
42166: LD_VAR 0 16
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 2
42177: PUSH
42178: LD_INT 30
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 30
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: LIST
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PPUSH
42207: CALL_OW 72
42211: ST_TO_ADDR
42212: GO 42366
42214: LD_INT 3
42216: DOUBLE
42217: EQUAL
42218: IFTRUE 42222
42220: GO 42284
42222: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42223: LD_ADDR_VAR 0 12
42227: PUSH
42228: LD_VAR 0 18
42232: PPUSH
42233: LD_INT 22
42235: PUSH
42236: LD_VAR 0 16
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: PUSH
42248: LD_INT 30
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 30
42260: PUSH
42261: LD_INT 3
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PPUSH
42277: CALL_OW 72
42281: ST_TO_ADDR
42282: GO 42366
42284: LD_INT 4
42286: DOUBLE
42287: EQUAL
42288: IFTRUE 42292
42290: GO 42365
42292: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42293: LD_ADDR_VAR 0 12
42297: PUSH
42298: LD_VAR 0 18
42302: PPUSH
42303: LD_INT 22
42305: PUSH
42306: LD_VAR 0 16
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 2
42317: PUSH
42318: LD_INT 30
42320: PUSH
42321: LD_INT 6
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 30
42330: PUSH
42331: LD_INT 7
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 30
42340: PUSH
42341: LD_INT 8
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PPUSH
42358: CALL_OW 72
42362: ST_TO_ADDR
42363: GO 42366
42365: POP
// if i = 1 then
42366: LD_VAR 0 8
42370: PUSH
42371: LD_INT 1
42373: EQUAL
42374: IFFALSE 42485
// begin tmp := [ ] ;
42376: LD_ADDR_VAR 0 19
42380: PUSH
42381: EMPTY
42382: ST_TO_ADDR
// for j in f do
42383: LD_ADDR_VAR 0 9
42387: PUSH
42388: LD_VAR 0 12
42392: PUSH
42393: FOR_IN
42394: IFFALSE 42467
// if GetBType ( j ) = b_bunker then
42396: LD_VAR 0 9
42400: PPUSH
42401: CALL_OW 266
42405: PUSH
42406: LD_INT 32
42408: EQUAL
42409: IFFALSE 42436
// tmp := Insert ( tmp , 1 , j ) else
42411: LD_ADDR_VAR 0 19
42415: PUSH
42416: LD_VAR 0 19
42420: PPUSH
42421: LD_INT 1
42423: PPUSH
42424: LD_VAR 0 9
42428: PPUSH
42429: CALL_OW 2
42433: ST_TO_ADDR
42434: GO 42465
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42436: LD_ADDR_VAR 0 19
42440: PUSH
42441: LD_VAR 0 19
42445: PPUSH
42446: LD_VAR 0 19
42450: PUSH
42451: LD_INT 1
42453: PLUS
42454: PPUSH
42455: LD_VAR 0 9
42459: PPUSH
42460: CALL_OW 2
42464: ST_TO_ADDR
42465: GO 42393
42467: POP
42468: POP
// if tmp then
42469: LD_VAR 0 19
42473: IFFALSE 42485
// f := tmp ;
42475: LD_ADDR_VAR 0 12
42479: PUSH
42480: LD_VAR 0 19
42484: ST_TO_ADDR
// end ; x := personel [ i ] ;
42485: LD_ADDR_VAR 0 13
42489: PUSH
42490: LD_VAR 0 6
42494: PUSH
42495: LD_VAR 0 8
42499: ARRAY
42500: ST_TO_ADDR
// if x = - 1 then
42501: LD_VAR 0 13
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: EQUAL
42510: IFFALSE 42721
// begin for j in f do
42512: LD_ADDR_VAR 0 9
42516: PUSH
42517: LD_VAR 0 12
42521: PUSH
42522: FOR_IN
42523: IFFALSE 42717
// repeat InitHc ;
42525: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42529: LD_VAR 0 9
42533: PPUSH
42534: CALL_OW 266
42538: PUSH
42539: LD_INT 5
42541: EQUAL
42542: IFFALSE 42612
// begin if UnitsInside ( j ) < 3 then
42544: LD_VAR 0 9
42548: PPUSH
42549: CALL_OW 313
42553: PUSH
42554: LD_INT 3
42556: LESS
42557: IFFALSE 42593
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42559: LD_INT 0
42561: PPUSH
42562: LD_INT 5
42564: PUSH
42565: LD_INT 8
42567: PUSH
42568: LD_INT 9
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: PUSH
42576: LD_VAR 0 17
42580: ARRAY
42581: PPUSH
42582: LD_VAR 0 4
42586: PPUSH
42587: CALL_OW 380
42591: GO 42610
// PrepareHuman ( false , i , skill ) ;
42593: LD_INT 0
42595: PPUSH
42596: LD_VAR 0 8
42600: PPUSH
42601: LD_VAR 0 4
42605: PPUSH
42606: CALL_OW 380
// end else
42610: GO 42629
// PrepareHuman ( false , i , skill ) ;
42612: LD_INT 0
42614: PPUSH
42615: LD_VAR 0 8
42619: PPUSH
42620: LD_VAR 0 4
42624: PPUSH
42625: CALL_OW 380
// un := CreateHuman ;
42629: LD_ADDR_VAR 0 14
42633: PUSH
42634: CALL_OW 44
42638: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42639: LD_ADDR_VAR 0 7
42643: PUSH
42644: LD_VAR 0 7
42648: PPUSH
42649: LD_INT 1
42651: PPUSH
42652: LD_VAR 0 14
42656: PPUSH
42657: CALL_OW 2
42661: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42662: LD_VAR 0 14
42666: PPUSH
42667: LD_VAR 0 9
42671: PPUSH
42672: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42676: LD_VAR 0 9
42680: PPUSH
42681: CALL_OW 313
42685: PUSH
42686: LD_INT 6
42688: EQUAL
42689: IFTRUE 42713
42691: PUSH
42692: LD_VAR 0 9
42696: PPUSH
42697: CALL_OW 266
42701: PUSH
42702: LD_INT 32
42704: PUSH
42705: LD_INT 31
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: IN
42712: OR
42713: IFFALSE 42525
42715: GO 42522
42717: POP
42718: POP
// end else
42719: GO 43105
// for j = 1 to x do
42721: LD_ADDR_VAR 0 9
42725: PUSH
42726: DOUBLE
42727: LD_INT 1
42729: DEC
42730: ST_TO_ADDR
42731: LD_VAR 0 13
42735: PUSH
42736: FOR_TO
42737: IFFALSE 43103
// begin InitHc ;
42739: CALL_OW 19
// if not f then
42743: LD_VAR 0 12
42747: NOT
42748: IFFALSE 42837
// begin PrepareHuman ( false , i , skill ) ;
42750: LD_INT 0
42752: PPUSH
42753: LD_VAR 0 8
42757: PPUSH
42758: LD_VAR 0 4
42762: PPUSH
42763: CALL_OW 380
// un := CreateHuman ;
42767: LD_ADDR_VAR 0 14
42771: PUSH
42772: CALL_OW 44
42776: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42777: LD_ADDR_VAR 0 7
42781: PUSH
42782: LD_VAR 0 7
42786: PPUSH
42787: LD_INT 1
42789: PPUSH
42790: LD_VAR 0 14
42794: PPUSH
42795: CALL_OW 2
42799: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42800: LD_VAR 0 14
42804: PPUSH
42805: LD_VAR 0 1
42809: PPUSH
42810: CALL_OW 250
42814: PPUSH
42815: LD_VAR 0 1
42819: PPUSH
42820: CALL_OW 251
42824: PPUSH
42825: LD_INT 10
42827: PPUSH
42828: LD_INT 0
42830: PPUSH
42831: CALL_OW 50
// continue ;
42835: GO 42736
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42837: LD_VAR 0 12
42841: PUSH
42842: LD_INT 1
42844: ARRAY
42845: PPUSH
42846: CALL_OW 313
42850: IFFALSE 42878
42852: PUSH
42853: LD_VAR 0 12
42857: PUSH
42858: LD_INT 1
42860: ARRAY
42861: PPUSH
42862: CALL_OW 266
42866: PUSH
42867: LD_INT 32
42869: PUSH
42870: LD_INT 31
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: IN
42877: AND
42878: IFTRUE 42899
42880: PUSH
42881: LD_VAR 0 12
42885: PUSH
42886: LD_INT 1
42888: ARRAY
42889: PPUSH
42890: CALL_OW 313
42894: PUSH
42895: LD_INT 6
42897: EQUAL
42898: OR
42899: IFFALSE 42919
// f := Delete ( f , 1 ) ;
42901: LD_ADDR_VAR 0 12
42905: PUSH
42906: LD_VAR 0 12
42910: PPUSH
42911: LD_INT 1
42913: PPUSH
42914: CALL_OW 3
42918: ST_TO_ADDR
// if not f then
42919: LD_VAR 0 12
42923: NOT
42924: IFFALSE 42942
// begin x := x + 2 ;
42926: LD_ADDR_VAR 0 13
42930: PUSH
42931: LD_VAR 0 13
42935: PUSH
42936: LD_INT 2
42938: PLUS
42939: ST_TO_ADDR
// continue ;
42940: GO 42736
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42942: LD_VAR 0 12
42946: PUSH
42947: LD_INT 1
42949: ARRAY
42950: PPUSH
42951: CALL_OW 266
42955: PUSH
42956: LD_INT 5
42958: EQUAL
42959: IFFALSE 43033
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42961: LD_VAR 0 12
42965: PUSH
42966: LD_INT 1
42968: ARRAY
42969: PPUSH
42970: CALL_OW 313
42974: PUSH
42975: LD_INT 3
42977: LESS
42978: IFFALSE 43014
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42980: LD_INT 0
42982: PPUSH
42983: LD_INT 5
42985: PUSH
42986: LD_INT 8
42988: PUSH
42989: LD_INT 9
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: LIST
42996: PUSH
42997: LD_VAR 0 17
43001: ARRAY
43002: PPUSH
43003: LD_VAR 0 4
43007: PPUSH
43008: CALL_OW 380
43012: GO 43031
// PrepareHuman ( false , i , skill ) ;
43014: LD_INT 0
43016: PPUSH
43017: LD_VAR 0 8
43021: PPUSH
43022: LD_VAR 0 4
43026: PPUSH
43027: CALL_OW 380
// end else
43031: GO 43050
// PrepareHuman ( false , i , skill ) ;
43033: LD_INT 0
43035: PPUSH
43036: LD_VAR 0 8
43040: PPUSH
43041: LD_VAR 0 4
43045: PPUSH
43046: CALL_OW 380
// un := CreateHuman ;
43050: LD_ADDR_VAR 0 14
43054: PUSH
43055: CALL_OW 44
43059: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43060: LD_ADDR_VAR 0 7
43064: PUSH
43065: LD_VAR 0 7
43069: PPUSH
43070: LD_INT 1
43072: PPUSH
43073: LD_VAR 0 14
43077: PPUSH
43078: CALL_OW 2
43082: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43083: LD_VAR 0 14
43087: PPUSH
43088: LD_VAR 0 12
43092: PUSH
43093: LD_INT 1
43095: ARRAY
43096: PPUSH
43097: CALL_OW 52
// end ;
43101: GO 42736
43103: POP
43104: POP
// end ;
43105: GO 42036
43107: POP
43108: POP
// result := result ^ buildings ;
43109: LD_ADDR_VAR 0 7
43113: PUSH
43114: LD_VAR 0 7
43118: PUSH
43119: LD_VAR 0 18
43123: ADD
43124: ST_TO_ADDR
// end else
43125: GO 43268
// begin for i = 1 to personel do
43127: LD_ADDR_VAR 0 8
43131: PUSH
43132: DOUBLE
43133: LD_INT 1
43135: DEC
43136: ST_TO_ADDR
43137: LD_VAR 0 6
43141: PUSH
43142: FOR_TO
43143: IFFALSE 43266
// begin if i > 4 then
43145: LD_VAR 0 8
43149: PUSH
43150: LD_INT 4
43152: GREATER
43153: IFFALSE 43157
// break ;
43155: GO 43266
// x := personel [ i ] ;
43157: LD_ADDR_VAR 0 13
43161: PUSH
43162: LD_VAR 0 6
43166: PUSH
43167: LD_VAR 0 8
43171: ARRAY
43172: ST_TO_ADDR
// if x = - 1 then
43173: LD_VAR 0 13
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: EQUAL
43182: IFFALSE 43186
// continue ;
43184: GO 43142
// PrepareHuman ( false , i , skill ) ;
43186: LD_INT 0
43188: PPUSH
43189: LD_VAR 0 8
43193: PPUSH
43194: LD_VAR 0 4
43198: PPUSH
43199: CALL_OW 380
// un := CreateHuman ;
43203: LD_ADDR_VAR 0 14
43207: PUSH
43208: CALL_OW 44
43212: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43213: LD_VAR 0 14
43217: PPUSH
43218: LD_VAR 0 1
43222: PPUSH
43223: CALL_OW 250
43227: PPUSH
43228: LD_VAR 0 1
43232: PPUSH
43233: CALL_OW 251
43237: PPUSH
43238: LD_INT 10
43240: PPUSH
43241: LD_INT 0
43243: PPUSH
43244: CALL_OW 50
// result := result ^ un ;
43248: LD_ADDR_VAR 0 7
43252: PUSH
43253: LD_VAR 0 7
43257: PUSH
43258: LD_VAR 0 14
43262: ADD
43263: ST_TO_ADDR
// end ;
43264: GO 43142
43266: POP
43267: POP
// end ; end ;
43268: LD_VAR 0 7
43272: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43273: LD_INT 0
43275: PPUSH
43276: PPUSH
43277: PPUSH
43278: PPUSH
43279: PPUSH
43280: PPUSH
43281: PPUSH
43282: PPUSH
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
43287: PPUSH
43288: PPUSH
43289: PPUSH
43290: PPUSH
// result := false ;
43291: LD_ADDR_VAR 0 3
43295: PUSH
43296: LD_INT 0
43298: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43299: LD_VAR 0 1
43303: NOT
43304: IFTRUE 43329
43306: PUSH
43307: LD_VAR 0 1
43311: PPUSH
43312: CALL_OW 266
43316: PUSH
43317: LD_INT 32
43319: PUSH
43320: LD_INT 33
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: IN
43327: NOT
43328: OR
43329: IFFALSE 43333
// exit ;
43331: GO 44468
// nat := GetNation ( tower ) ;
43333: LD_ADDR_VAR 0 12
43337: PUSH
43338: LD_VAR 0 1
43342: PPUSH
43343: CALL_OW 248
43347: ST_TO_ADDR
// side := GetSide ( tower ) ;
43348: LD_ADDR_VAR 0 16
43352: PUSH
43353: LD_VAR 0 1
43357: PPUSH
43358: CALL_OW 255
43362: ST_TO_ADDR
// x := GetX ( tower ) ;
43363: LD_ADDR_VAR 0 10
43367: PUSH
43368: LD_VAR 0 1
43372: PPUSH
43373: CALL_OW 250
43377: ST_TO_ADDR
// y := GetY ( tower ) ;
43378: LD_ADDR_VAR 0 11
43382: PUSH
43383: LD_VAR 0 1
43387: PPUSH
43388: CALL_OW 251
43392: ST_TO_ADDR
// if not x or not y then
43393: LD_VAR 0 10
43397: NOT
43398: IFTRUE 43407
43400: PUSH
43401: LD_VAR 0 11
43405: NOT
43406: OR
43407: IFFALSE 43411
// exit ;
43409: GO 44468
// weapon := 0 ;
43411: LD_ADDR_VAR 0 18
43415: PUSH
43416: LD_INT 0
43418: ST_TO_ADDR
// fac_list := [ ] ;
43419: LD_ADDR_VAR 0 17
43423: PUSH
43424: EMPTY
43425: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43426: LD_ADDR_VAR 0 6
43430: PUSH
43431: LD_VAR 0 1
43435: PPUSH
43436: CALL_OW 274
43440: PPUSH
43441: LD_VAR 0 2
43445: PPUSH
43446: LD_INT 0
43448: PPUSH
43449: CALL 41003 0 3
43453: PPUSH
43454: LD_INT 30
43456: PUSH
43457: LD_INT 3
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PPUSH
43464: CALL_OW 72
43468: ST_TO_ADDR
// if not factories then
43469: LD_VAR 0 6
43473: NOT
43474: IFFALSE 43478
// exit ;
43476: GO 44468
// for i in factories do
43478: LD_ADDR_VAR 0 8
43482: PUSH
43483: LD_VAR 0 6
43487: PUSH
43488: FOR_IN
43489: IFFALSE 43514
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43491: LD_ADDR_VAR 0 17
43495: PUSH
43496: LD_VAR 0 17
43500: PUSH
43501: LD_VAR 0 8
43505: PPUSH
43506: CALL_OW 478
43510: UNION
43511: ST_TO_ADDR
43512: GO 43488
43514: POP
43515: POP
// if not fac_list then
43516: LD_VAR 0 17
43520: NOT
43521: IFFALSE 43525
// exit ;
43523: GO 44468
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43525: LD_ADDR_VAR 0 5
43529: PUSH
43530: LD_INT 4
43532: PUSH
43533: LD_INT 5
43535: PUSH
43536: LD_INT 9
43538: PUSH
43539: LD_INT 10
43541: PUSH
43542: LD_INT 6
43544: PUSH
43545: LD_INT 7
43547: PUSH
43548: LD_INT 11
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 27
43562: PUSH
43563: LD_INT 28
43565: PUSH
43566: LD_INT 26
43568: PUSH
43569: LD_INT 30
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 43
43580: PUSH
43581: LD_INT 44
43583: PUSH
43584: LD_INT 46
43586: PUSH
43587: LD_INT 45
43589: PUSH
43590: LD_INT 47
43592: PUSH
43593: LD_INT 49
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: PUSH
43609: LD_VAR 0 12
43613: ARRAY
43614: ST_TO_ADDR
// list := list isect fac_list ;
43615: LD_ADDR_VAR 0 5
43619: PUSH
43620: LD_VAR 0 5
43624: PUSH
43625: LD_VAR 0 17
43629: ISECT
43630: ST_TO_ADDR
// if not list then
43631: LD_VAR 0 5
43635: NOT
43636: IFFALSE 43640
// exit ;
43638: GO 44468
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43640: LD_VAR 0 12
43644: PUSH
43645: LD_INT 3
43647: EQUAL
43648: IFFALSE 43660
43650: PUSH
43651: LD_INT 49
43653: PUSH
43654: LD_VAR 0 5
43658: IN
43659: AND
43660: IFFALSE 43680
43662: PUSH
43663: LD_INT 31
43665: PPUSH
43666: LD_VAR 0 16
43670: PPUSH
43671: CALL_OW 321
43675: PUSH
43676: LD_INT 2
43678: EQUAL
43679: AND
43680: IFFALSE 43740
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43682: LD_INT 22
43684: PUSH
43685: LD_VAR 0 16
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 35
43696: PUSH
43697: LD_INT 49
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 91
43706: PUSH
43707: LD_VAR 0 1
43711: PUSH
43712: LD_INT 10
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: LIST
43724: PPUSH
43725: CALL_OW 69
43729: NOT
43730: IFFALSE 43740
// weapon := ru_time_lapser ;
43732: LD_ADDR_VAR 0 18
43736: PUSH
43737: LD_INT 49
43739: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43740: LD_VAR 0 12
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: IN
43755: IFFALSE 43779
43757: PUSH
43758: LD_INT 11
43760: PUSH
43761: LD_VAR 0 5
43765: IN
43766: IFTRUE 43778
43768: PUSH
43769: LD_INT 30
43771: PUSH
43772: LD_VAR 0 5
43776: IN
43777: OR
43778: AND
43779: IFFALSE 43799
43781: PUSH
43782: LD_INT 6
43784: PPUSH
43785: LD_VAR 0 16
43789: PPUSH
43790: CALL_OW 321
43794: PUSH
43795: LD_INT 2
43797: EQUAL
43798: AND
43799: IFFALSE 43966
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43801: LD_INT 22
43803: PUSH
43804: LD_VAR 0 16
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: LD_INT 35
43818: PUSH
43819: LD_INT 11
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 35
43828: PUSH
43829: LD_INT 30
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 91
43843: PUSH
43844: LD_VAR 0 1
43848: PUSH
43849: LD_INT 18
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: LIST
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: LIST
43861: PPUSH
43862: CALL_OW 69
43866: NOT
43867: IFFALSE 43943
43869: PUSH
43870: LD_INT 22
43872: PUSH
43873: LD_VAR 0 16
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: PUSH
43885: LD_INT 30
43887: PUSH
43888: LD_INT 32
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 30
43897: PUSH
43898: LD_INT 33
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 91
43912: PUSH
43913: LD_VAR 0 1
43917: PUSH
43918: LD_INT 12
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: LIST
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: PUSH
43931: EMPTY
43932: LIST
43933: PPUSH
43934: CALL_OW 69
43938: PUSH
43939: LD_INT 2
43941: GREATER
43942: AND
43943: IFFALSE 43966
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43945: LD_ADDR_VAR 0 18
43949: PUSH
43950: LD_INT 11
43952: PUSH
43953: LD_INT 30
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_VAR 0 12
43964: ARRAY
43965: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43966: LD_VAR 0 18
43970: NOT
43971: IFFALSE 43991
43973: PUSH
43974: LD_INT 40
43976: PPUSH
43977: LD_VAR 0 16
43981: PPUSH
43982: CALL_OW 321
43986: PUSH
43987: LD_INT 2
43989: EQUAL
43990: AND
43991: IFFALSE 44027
43993: PUSH
43994: LD_INT 7
43996: PUSH
43997: LD_VAR 0 5
44001: IN
44002: IFTRUE 44014
44004: PUSH
44005: LD_INT 28
44007: PUSH
44008: LD_VAR 0 5
44012: IN
44013: OR
44014: IFTRUE 44026
44016: PUSH
44017: LD_INT 45
44019: PUSH
44020: LD_VAR 0 5
44024: IN
44025: OR
44026: AND
44027: IFFALSE 44281
// begin hex := GetHexInfo ( x , y ) ;
44029: LD_ADDR_VAR 0 4
44033: PUSH
44034: LD_VAR 0 10
44038: PPUSH
44039: LD_VAR 0 11
44043: PPUSH
44044: CALL_OW 546
44048: ST_TO_ADDR
// if hex [ 1 ] then
44049: LD_VAR 0 4
44053: PUSH
44054: LD_INT 1
44056: ARRAY
44057: IFFALSE 44061
// exit ;
44059: GO 44468
// height := hex [ 2 ] ;
44061: LD_ADDR_VAR 0 15
44065: PUSH
44066: LD_VAR 0 4
44070: PUSH
44071: LD_INT 2
44073: ARRAY
44074: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44075: LD_ADDR_VAR 0 14
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: LD_INT 3
44088: PUSH
44089: LD_INT 5
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: ST_TO_ADDR
// for i in tmp do
44098: LD_ADDR_VAR 0 8
44102: PUSH
44103: LD_VAR 0 14
44107: PUSH
44108: FOR_IN
44109: IFFALSE 44279
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44111: LD_ADDR_VAR 0 9
44115: PUSH
44116: LD_VAR 0 10
44120: PPUSH
44121: LD_VAR 0 8
44125: PPUSH
44126: LD_INT 5
44128: PPUSH
44129: CALL_OW 272
44133: PUSH
44134: LD_VAR 0 11
44138: PPUSH
44139: LD_VAR 0 8
44143: PPUSH
44144: LD_INT 5
44146: PPUSH
44147: CALL_OW 273
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44156: LD_VAR 0 9
44160: PUSH
44161: LD_INT 1
44163: ARRAY
44164: PPUSH
44165: LD_VAR 0 9
44169: PUSH
44170: LD_INT 2
44172: ARRAY
44173: PPUSH
44174: CALL_OW 488
44178: IFFALSE 44277
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44180: LD_ADDR_VAR 0 4
44184: PUSH
44185: LD_VAR 0 9
44189: PUSH
44190: LD_INT 1
44192: ARRAY
44193: PPUSH
44194: LD_VAR 0 9
44198: PUSH
44199: LD_INT 2
44201: ARRAY
44202: PPUSH
44203: CALL_OW 546
44207: ST_TO_ADDR
// if hex [ 1 ] then
44208: LD_VAR 0 4
44212: PUSH
44213: LD_INT 1
44215: ARRAY
44216: IFFALSE 44220
// continue ;
44218: GO 44108
// h := hex [ 2 ] ;
44220: LD_ADDR_VAR 0 13
44224: PUSH
44225: LD_VAR 0 4
44229: PUSH
44230: LD_INT 2
44232: ARRAY
44233: ST_TO_ADDR
// if h + 7 < height then
44234: LD_VAR 0 13
44238: PUSH
44239: LD_INT 7
44241: PLUS
44242: PUSH
44243: LD_VAR 0 15
44247: LESS
44248: IFFALSE 44277
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44250: LD_ADDR_VAR 0 18
44254: PUSH
44255: LD_INT 7
44257: PUSH
44258: LD_INT 28
44260: PUSH
44261: LD_INT 45
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: LIST
44268: PUSH
44269: LD_VAR 0 12
44273: ARRAY
44274: ST_TO_ADDR
// break ;
44275: GO 44279
// end ; end ; end ;
44277: GO 44108
44279: POP
44280: POP
// end ; if not weapon then
44281: LD_VAR 0 18
44285: NOT
44286: IFFALSE 44346
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44288: LD_ADDR_VAR 0 5
44292: PUSH
44293: LD_VAR 0 5
44297: PUSH
44298: LD_INT 11
44300: PUSH
44301: LD_INT 30
44303: PUSH
44304: LD_INT 49
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: LIST
44311: DIFF
44312: ST_TO_ADDR
// if not list then
44313: LD_VAR 0 5
44317: NOT
44318: IFFALSE 44322
// exit ;
44320: GO 44468
// weapon := list [ rand ( 1 , list ) ] ;
44322: LD_ADDR_VAR 0 18
44326: PUSH
44327: LD_VAR 0 5
44331: PUSH
44332: LD_INT 1
44334: PPUSH
44335: LD_VAR 0 5
44339: PPUSH
44340: CALL_OW 12
44344: ARRAY
44345: ST_TO_ADDR
// end ; if weapon then
44346: LD_VAR 0 18
44350: IFFALSE 44468
// begin tmp := CostOfWeapon ( weapon ) ;
44352: LD_ADDR_VAR 0 14
44356: PUSH
44357: LD_VAR 0 18
44361: PPUSH
44362: CALL_OW 451
44366: ST_TO_ADDR
// j := GetBase ( tower ) ;
44367: LD_ADDR_VAR 0 9
44371: PUSH
44372: LD_VAR 0 1
44376: PPUSH
44377: CALL_OW 274
44381: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44382: LD_VAR 0 9
44386: PPUSH
44387: LD_INT 1
44389: PPUSH
44390: CALL_OW 275
44394: PUSH
44395: LD_VAR 0 14
44399: PUSH
44400: LD_INT 1
44402: ARRAY
44403: GREATEREQUAL
44404: IFFALSE 44430
44406: PUSH
44407: LD_VAR 0 9
44411: PPUSH
44412: LD_INT 2
44414: PPUSH
44415: CALL_OW 275
44419: PUSH
44420: LD_VAR 0 14
44424: PUSH
44425: LD_INT 2
44427: ARRAY
44428: GREATEREQUAL
44429: AND
44430: IFFALSE 44456
44432: PUSH
44433: LD_VAR 0 9
44437: PPUSH
44438: LD_INT 3
44440: PPUSH
44441: CALL_OW 275
44445: PUSH
44446: LD_VAR 0 14
44450: PUSH
44451: LD_INT 3
44453: ARRAY
44454: GREATEREQUAL
44455: AND
44456: IFFALSE 44468
// result := weapon ;
44458: LD_ADDR_VAR 0 3
44462: PUSH
44463: LD_VAR 0 18
44467: ST_TO_ADDR
// end ; end ;
44468: LD_VAR 0 3
44472: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44473: LD_INT 0
44475: PPUSH
44476: PPUSH
// result := true ;
44477: LD_ADDR_VAR 0 3
44481: PUSH
44482: LD_INT 1
44484: ST_TO_ADDR
// if array1 = array2 then
44485: LD_VAR 0 1
44489: PUSH
44490: LD_VAR 0 2
44494: EQUAL
44495: IFFALSE 44555
// begin for i = 1 to array1 do
44497: LD_ADDR_VAR 0 4
44501: PUSH
44502: DOUBLE
44503: LD_INT 1
44505: DEC
44506: ST_TO_ADDR
44507: LD_VAR 0 1
44511: PUSH
44512: FOR_TO
44513: IFFALSE 44551
// if array1 [ i ] <> array2 [ i ] then
44515: LD_VAR 0 1
44519: PUSH
44520: LD_VAR 0 4
44524: ARRAY
44525: PUSH
44526: LD_VAR 0 2
44530: PUSH
44531: LD_VAR 0 4
44535: ARRAY
44536: NONEQUAL
44537: IFFALSE 44549
// begin result := false ;
44539: LD_ADDR_VAR 0 3
44543: PUSH
44544: LD_INT 0
44546: ST_TO_ADDR
// break ;
44547: GO 44551
// end ;
44549: GO 44512
44551: POP
44552: POP
// end else
44553: GO 44563
// result := false ;
44555: LD_ADDR_VAR 0 3
44559: PUSH
44560: LD_INT 0
44562: ST_TO_ADDR
// end ;
44563: LD_VAR 0 3
44567: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44568: LD_INT 0
44570: PPUSH
44571: PPUSH
// if not array1 or not array2 then
44572: LD_VAR 0 1
44576: NOT
44577: IFTRUE 44586
44579: PUSH
44580: LD_VAR 0 2
44584: NOT
44585: OR
44586: IFFALSE 44590
// exit ;
44588: GO 44654
// result := true ;
44590: LD_ADDR_VAR 0 3
44594: PUSH
44595: LD_INT 1
44597: ST_TO_ADDR
// for i = 1 to array1 do
44598: LD_ADDR_VAR 0 4
44602: PUSH
44603: DOUBLE
44604: LD_INT 1
44606: DEC
44607: ST_TO_ADDR
44608: LD_VAR 0 1
44612: PUSH
44613: FOR_TO
44614: IFFALSE 44652
// if array1 [ i ] <> array2 [ i ] then
44616: LD_VAR 0 1
44620: PUSH
44621: LD_VAR 0 4
44625: ARRAY
44626: PUSH
44627: LD_VAR 0 2
44631: PUSH
44632: LD_VAR 0 4
44636: ARRAY
44637: NONEQUAL
44638: IFFALSE 44650
// begin result := false ;
44640: LD_ADDR_VAR 0 3
44644: PUSH
44645: LD_INT 0
44647: ST_TO_ADDR
// break ;
44648: GO 44652
// end ;
44650: GO 44613
44652: POP
44653: POP
// end ;
44654: LD_VAR 0 3
44658: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44659: LD_INT 0
44661: PPUSH
44662: PPUSH
44663: PPUSH
// pom := GetBase ( fac ) ;
44664: LD_ADDR_VAR 0 5
44668: PUSH
44669: LD_VAR 0 1
44673: PPUSH
44674: CALL_OW 274
44678: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44679: LD_ADDR_VAR 0 4
44683: PUSH
44684: LD_VAR 0 2
44688: PUSH
44689: LD_INT 1
44691: ARRAY
44692: PPUSH
44693: LD_VAR 0 2
44697: PUSH
44698: LD_INT 2
44700: ARRAY
44701: PPUSH
44702: LD_VAR 0 2
44706: PUSH
44707: LD_INT 3
44709: ARRAY
44710: PPUSH
44711: LD_VAR 0 2
44715: PUSH
44716: LD_INT 4
44718: ARRAY
44719: PPUSH
44720: CALL_OW 449
44724: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44725: LD_ADDR_VAR 0 3
44729: PUSH
44730: LD_VAR 0 5
44734: PPUSH
44735: LD_INT 1
44737: PPUSH
44738: CALL_OW 275
44742: PUSH
44743: LD_VAR 0 4
44747: PUSH
44748: LD_INT 1
44750: ARRAY
44751: GREATEREQUAL
44752: IFFALSE 44778
44754: PUSH
44755: LD_VAR 0 5
44759: PPUSH
44760: LD_INT 2
44762: PPUSH
44763: CALL_OW 275
44767: PUSH
44768: LD_VAR 0 4
44772: PUSH
44773: LD_INT 2
44775: ARRAY
44776: GREATEREQUAL
44777: AND
44778: IFFALSE 44804
44780: PUSH
44781: LD_VAR 0 5
44785: PPUSH
44786: LD_INT 3
44788: PPUSH
44789: CALL_OW 275
44793: PUSH
44794: LD_VAR 0 4
44798: PUSH
44799: LD_INT 3
44801: ARRAY
44802: GREATEREQUAL
44803: AND
44804: ST_TO_ADDR
// end ;
44805: LD_VAR 0 3
44809: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44810: LD_INT 0
44812: PPUSH
44813: PPUSH
44814: PPUSH
44815: PPUSH
// pom := GetBase ( building ) ;
44816: LD_ADDR_VAR 0 3
44820: PUSH
44821: LD_VAR 0 1
44825: PPUSH
44826: CALL_OW 274
44830: ST_TO_ADDR
// if not pom then
44831: LD_VAR 0 3
44835: NOT
44836: IFFALSE 44840
// exit ;
44838: GO 45014
// btype := GetBType ( building ) ;
44840: LD_ADDR_VAR 0 5
44844: PUSH
44845: LD_VAR 0 1
44849: PPUSH
44850: CALL_OW 266
44854: ST_TO_ADDR
// if btype = b_armoury then
44855: LD_VAR 0 5
44859: PUSH
44860: LD_INT 4
44862: EQUAL
44863: IFFALSE 44873
// btype := b_barracks ;
44865: LD_ADDR_VAR 0 5
44869: PUSH
44870: LD_INT 5
44872: ST_TO_ADDR
// if btype = b_depot then
44873: LD_VAR 0 5
44877: PUSH
44878: LD_INT 0
44880: EQUAL
44881: IFFALSE 44891
// btype := b_warehouse ;
44883: LD_ADDR_VAR 0 5
44887: PUSH
44888: LD_INT 1
44890: ST_TO_ADDR
// if btype = b_workshop then
44891: LD_VAR 0 5
44895: PUSH
44896: LD_INT 2
44898: EQUAL
44899: IFFALSE 44909
// btype := b_factory ;
44901: LD_ADDR_VAR 0 5
44905: PUSH
44906: LD_INT 3
44908: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44909: LD_ADDR_VAR 0 4
44913: PUSH
44914: LD_VAR 0 5
44918: PPUSH
44919: LD_VAR 0 1
44923: PPUSH
44924: CALL_OW 248
44928: PPUSH
44929: CALL_OW 450
44933: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44934: LD_ADDR_VAR 0 2
44938: PUSH
44939: LD_VAR 0 3
44943: PPUSH
44944: LD_INT 1
44946: PPUSH
44947: CALL_OW 275
44951: PUSH
44952: LD_VAR 0 4
44956: PUSH
44957: LD_INT 1
44959: ARRAY
44960: GREATEREQUAL
44961: IFFALSE 44987
44963: PUSH
44964: LD_VAR 0 3
44968: PPUSH
44969: LD_INT 2
44971: PPUSH
44972: CALL_OW 275
44976: PUSH
44977: LD_VAR 0 4
44981: PUSH
44982: LD_INT 2
44984: ARRAY
44985: GREATEREQUAL
44986: AND
44987: IFFALSE 45013
44989: PUSH
44990: LD_VAR 0 3
44994: PPUSH
44995: LD_INT 3
44997: PPUSH
44998: CALL_OW 275
45002: PUSH
45003: LD_VAR 0 4
45007: PUSH
45008: LD_INT 3
45010: ARRAY
45011: GREATEREQUAL
45012: AND
45013: ST_TO_ADDR
// end ;
45014: LD_VAR 0 2
45018: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45019: LD_INT 0
45021: PPUSH
45022: PPUSH
45023: PPUSH
// pom := GetBase ( building ) ;
45024: LD_ADDR_VAR 0 4
45028: PUSH
45029: LD_VAR 0 1
45033: PPUSH
45034: CALL_OW 274
45038: ST_TO_ADDR
// if not pom then
45039: LD_VAR 0 4
45043: NOT
45044: IFFALSE 45048
// exit ;
45046: GO 45153
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45048: LD_ADDR_VAR 0 5
45052: PUSH
45053: LD_VAR 0 2
45057: PPUSH
45058: LD_VAR 0 1
45062: PPUSH
45063: CALL_OW 248
45067: PPUSH
45068: CALL_OW 450
45072: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45073: LD_ADDR_VAR 0 3
45077: PUSH
45078: LD_VAR 0 4
45082: PPUSH
45083: LD_INT 1
45085: PPUSH
45086: CALL_OW 275
45090: PUSH
45091: LD_VAR 0 5
45095: PUSH
45096: LD_INT 1
45098: ARRAY
45099: GREATEREQUAL
45100: IFFALSE 45126
45102: PUSH
45103: LD_VAR 0 4
45107: PPUSH
45108: LD_INT 2
45110: PPUSH
45111: CALL_OW 275
45115: PUSH
45116: LD_VAR 0 5
45120: PUSH
45121: LD_INT 2
45123: ARRAY
45124: GREATEREQUAL
45125: AND
45126: IFFALSE 45152
45128: PUSH
45129: LD_VAR 0 4
45133: PPUSH
45134: LD_INT 3
45136: PPUSH
45137: CALL_OW 275
45141: PUSH
45142: LD_VAR 0 5
45146: PUSH
45147: LD_INT 3
45149: ARRAY
45150: GREATEREQUAL
45151: AND
45152: ST_TO_ADDR
// end ;
45153: LD_VAR 0 3
45157: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45158: LD_INT 0
45160: PPUSH
45161: PPUSH
45162: PPUSH
45163: PPUSH
45164: PPUSH
45165: PPUSH
45166: PPUSH
45167: PPUSH
45168: PPUSH
45169: PPUSH
45170: PPUSH
// result := false ;
45171: LD_ADDR_VAR 0 8
45175: PUSH
45176: LD_INT 0
45178: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45179: LD_VAR 0 5
45183: NOT
45184: IFTRUE 45193
45186: PUSH
45187: LD_VAR 0 1
45191: NOT
45192: OR
45193: IFTRUE 45202
45195: PUSH
45196: LD_VAR 0 2
45200: NOT
45201: OR
45202: IFTRUE 45211
45204: PUSH
45205: LD_VAR 0 3
45209: NOT
45210: OR
45211: IFFALSE 45215
// exit ;
45213: GO 46041
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45215: LD_ADDR_VAR 0 14
45219: PUSH
45220: LD_VAR 0 1
45224: PPUSH
45225: LD_VAR 0 2
45229: PPUSH
45230: LD_VAR 0 3
45234: PPUSH
45235: LD_VAR 0 4
45239: PPUSH
45240: LD_VAR 0 5
45244: PUSH
45245: LD_INT 1
45247: ARRAY
45248: PPUSH
45249: CALL_OW 248
45253: PPUSH
45254: LD_INT 0
45256: PPUSH
45257: CALL 47322 0 6
45261: ST_TO_ADDR
// if not hexes then
45262: LD_VAR 0 14
45266: NOT
45267: IFFALSE 45271
// exit ;
45269: GO 46041
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45271: LD_ADDR_VAR 0 17
45275: PUSH
45276: LD_VAR 0 5
45280: PPUSH
45281: LD_INT 22
45283: PUSH
45284: LD_VAR 0 13
45288: PPUSH
45289: CALL_OW 255
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 2
45300: PUSH
45301: LD_INT 30
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 30
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PPUSH
45330: CALL_OW 72
45334: ST_TO_ADDR
// for i = 1 to hexes do
45335: LD_ADDR_VAR 0 9
45339: PUSH
45340: DOUBLE
45341: LD_INT 1
45343: DEC
45344: ST_TO_ADDR
45345: LD_VAR 0 14
45349: PUSH
45350: FOR_TO
45351: IFFALSE 46039
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45353: LD_ADDR_VAR 0 13
45357: PUSH
45358: LD_VAR 0 14
45362: PUSH
45363: LD_VAR 0 9
45367: ARRAY
45368: PUSH
45369: LD_INT 1
45371: ARRAY
45372: PPUSH
45373: LD_VAR 0 14
45377: PUSH
45378: LD_VAR 0 9
45382: ARRAY
45383: PUSH
45384: LD_INT 2
45386: ARRAY
45387: PPUSH
45388: CALL_OW 428
45392: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45393: LD_VAR 0 14
45397: PUSH
45398: LD_VAR 0 9
45402: ARRAY
45403: PUSH
45404: LD_INT 1
45406: ARRAY
45407: PPUSH
45408: LD_VAR 0 14
45412: PUSH
45413: LD_VAR 0 9
45417: ARRAY
45418: PUSH
45419: LD_INT 2
45421: ARRAY
45422: PPUSH
45423: CALL_OW 351
45427: IFTRUE 45466
45429: PUSH
45430: LD_VAR 0 14
45434: PUSH
45435: LD_VAR 0 9
45439: ARRAY
45440: PUSH
45441: LD_INT 1
45443: ARRAY
45444: PPUSH
45445: LD_VAR 0 14
45449: PUSH
45450: LD_VAR 0 9
45454: ARRAY
45455: PUSH
45456: LD_INT 2
45458: ARRAY
45459: PPUSH
45460: CALL_OW 488
45464: NOT
45465: OR
45466: IFTRUE 45483
45468: PUSH
45469: LD_VAR 0 13
45473: PPUSH
45474: CALL_OW 247
45478: PUSH
45479: LD_INT 3
45481: EQUAL
45482: OR
45483: IFFALSE 45489
// exit ;
45485: POP
45486: POP
45487: GO 46041
// if not tmp then
45489: LD_VAR 0 13
45493: NOT
45494: IFFALSE 45498
// continue ;
45496: GO 45350
// result := true ;
45498: LD_ADDR_VAR 0 8
45502: PUSH
45503: LD_INT 1
45505: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45506: LD_VAR 0 6
45510: IFFALSE 45527
45512: PUSH
45513: LD_VAR 0 13
45517: PPUSH
45518: CALL_OW 247
45522: PUSH
45523: LD_INT 2
45525: EQUAL
45526: AND
45527: IFFALSE 45544
45529: PUSH
45530: LD_VAR 0 13
45534: PPUSH
45535: CALL_OW 263
45539: PUSH
45540: LD_INT 1
45542: EQUAL
45543: AND
45544: IFFALSE 45708
// begin if IsDrivenBy ( tmp ) then
45546: LD_VAR 0 13
45550: PPUSH
45551: CALL_OW 311
45555: IFFALSE 45559
// continue ;
45557: GO 45350
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45559: LD_VAR 0 6
45563: PPUSH
45564: LD_INT 3
45566: PUSH
45567: LD_INT 60
45569: PUSH
45570: EMPTY
45571: LIST
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 3
45579: PUSH
45580: LD_INT 55
45582: PUSH
45583: EMPTY
45584: LIST
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PPUSH
45594: CALL_OW 72
45598: IFFALSE 45706
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45600: LD_ADDR_VAR 0 18
45604: PUSH
45605: LD_VAR 0 6
45609: PPUSH
45610: LD_INT 3
45612: PUSH
45613: LD_INT 60
45615: PUSH
45616: EMPTY
45617: LIST
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 3
45625: PUSH
45626: LD_INT 55
45628: PUSH
45629: EMPTY
45630: LIST
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PPUSH
45640: CALL_OW 72
45644: PUSH
45645: LD_INT 1
45647: ARRAY
45648: ST_TO_ADDR
// if IsInUnit ( driver ) then
45649: LD_VAR 0 18
45653: PPUSH
45654: CALL_OW 310
45658: IFFALSE 45669
// ComExit ( driver ) ;
45660: LD_VAR 0 18
45664: PPUSH
45665: CALL 71312 0 1
// AddComEnterUnit ( driver , tmp ) ;
45669: LD_VAR 0 18
45673: PPUSH
45674: LD_VAR 0 13
45678: PPUSH
45679: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45683: LD_VAR 0 18
45687: PPUSH
45688: LD_VAR 0 7
45692: PPUSH
45693: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45697: LD_VAR 0 18
45701: PPUSH
45702: CALL_OW 181
// end ; continue ;
45706: GO 45350
// end ; if not cleaners or not tmp in cleaners then
45708: LD_VAR 0 6
45712: NOT
45713: IFTRUE 45728
45715: PUSH
45716: LD_VAR 0 13
45720: PUSH
45721: LD_VAR 0 6
45725: IN
45726: NOT
45727: OR
45728: IFFALSE 46037
// begin if dep then
45730: LD_VAR 0 17
45734: IFFALSE 45870
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45736: LD_ADDR_VAR 0 16
45740: PUSH
45741: LD_VAR 0 17
45745: PUSH
45746: LD_INT 1
45748: ARRAY
45749: PPUSH
45750: CALL_OW 250
45754: PPUSH
45755: LD_VAR 0 17
45759: PUSH
45760: LD_INT 1
45762: ARRAY
45763: PPUSH
45764: CALL_OW 254
45768: PPUSH
45769: LD_INT 5
45771: PPUSH
45772: CALL_OW 272
45776: PUSH
45777: LD_VAR 0 17
45781: PUSH
45782: LD_INT 1
45784: ARRAY
45785: PPUSH
45786: CALL_OW 251
45790: PPUSH
45791: LD_VAR 0 17
45795: PUSH
45796: LD_INT 1
45798: ARRAY
45799: PPUSH
45800: CALL_OW 254
45804: PPUSH
45805: LD_INT 5
45807: PPUSH
45808: CALL_OW 273
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45817: LD_VAR 0 16
45821: PUSH
45822: LD_INT 1
45824: ARRAY
45825: PPUSH
45826: LD_VAR 0 16
45830: PUSH
45831: LD_INT 2
45833: ARRAY
45834: PPUSH
45835: CALL_OW 488
45839: IFFALSE 45870
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45841: LD_VAR 0 13
45845: PPUSH
45846: LD_VAR 0 16
45850: PUSH
45851: LD_INT 1
45853: ARRAY
45854: PPUSH
45855: LD_VAR 0 16
45859: PUSH
45860: LD_INT 2
45862: ARRAY
45863: PPUSH
45864: CALL_OW 111
// continue ;
45868: GO 45350
// end ; end ; r := GetDir ( tmp ) ;
45870: LD_ADDR_VAR 0 15
45874: PUSH
45875: LD_VAR 0 13
45879: PPUSH
45880: CALL_OW 254
45884: ST_TO_ADDR
// if r = 5 then
45885: LD_VAR 0 15
45889: PUSH
45890: LD_INT 5
45892: EQUAL
45893: IFFALSE 45903
// r := 0 ;
45895: LD_ADDR_VAR 0 15
45899: PUSH
45900: LD_INT 0
45902: ST_TO_ADDR
// for j = r to 5 do
45903: LD_ADDR_VAR 0 10
45907: PUSH
45908: DOUBLE
45909: LD_VAR 0 15
45913: DEC
45914: ST_TO_ADDR
45915: LD_INT 5
45917: PUSH
45918: FOR_TO
45919: IFFALSE 46035
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45921: LD_ADDR_VAR 0 11
45925: PUSH
45926: LD_VAR 0 13
45930: PPUSH
45931: CALL_OW 250
45935: PPUSH
45936: LD_VAR 0 10
45940: PPUSH
45941: LD_INT 2
45943: PPUSH
45944: CALL_OW 272
45948: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45949: LD_ADDR_VAR 0 12
45953: PUSH
45954: LD_VAR 0 13
45958: PPUSH
45959: CALL_OW 251
45963: PPUSH
45964: LD_VAR 0 10
45968: PPUSH
45969: LD_INT 2
45971: PPUSH
45972: CALL_OW 273
45976: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45977: LD_VAR 0 11
45981: PPUSH
45982: LD_VAR 0 12
45986: PPUSH
45987: CALL_OW 488
45991: IFFALSE 46010
45993: PUSH
45994: LD_VAR 0 11
45998: PPUSH
45999: LD_VAR 0 12
46003: PPUSH
46004: CALL_OW 428
46008: NOT
46009: AND
46010: IFFALSE 46033
// begin ComMoveXY ( tmp , _x , _y ) ;
46012: LD_VAR 0 13
46016: PPUSH
46017: LD_VAR 0 11
46021: PPUSH
46022: LD_VAR 0 12
46026: PPUSH
46027: CALL_OW 111
// break ;
46031: GO 46035
// end ; end ;
46033: GO 45918
46035: POP
46036: POP
// end ; end ;
46037: GO 45350
46039: POP
46040: POP
// end ;
46041: LD_VAR 0 8
46045: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46046: LD_INT 0
46048: PPUSH
// result := true ;
46049: LD_ADDR_VAR 0 3
46053: PUSH
46054: LD_INT 1
46056: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46057: LD_VAR 0 2
46061: PUSH
46062: LD_INT 24
46064: DOUBLE
46065: EQUAL
46066: IFTRUE 46076
46068: LD_INT 33
46070: DOUBLE
46071: EQUAL
46072: IFTRUE 46076
46074: GO 46101
46076: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46077: LD_ADDR_VAR 0 3
46081: PUSH
46082: LD_INT 32
46084: PPUSH
46085: LD_VAR 0 1
46089: PPUSH
46090: CALL_OW 321
46094: PUSH
46095: LD_INT 2
46097: EQUAL
46098: ST_TO_ADDR
46099: GO 46417
46101: LD_INT 20
46103: DOUBLE
46104: EQUAL
46105: IFTRUE 46109
46107: GO 46134
46109: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46110: LD_ADDR_VAR 0 3
46114: PUSH
46115: LD_INT 6
46117: PPUSH
46118: LD_VAR 0 1
46122: PPUSH
46123: CALL_OW 321
46127: PUSH
46128: LD_INT 2
46130: EQUAL
46131: ST_TO_ADDR
46132: GO 46417
46134: LD_INT 22
46136: DOUBLE
46137: EQUAL
46138: IFTRUE 46148
46140: LD_INT 36
46142: DOUBLE
46143: EQUAL
46144: IFTRUE 46148
46146: GO 46173
46148: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46149: LD_ADDR_VAR 0 3
46153: PUSH
46154: LD_INT 15
46156: PPUSH
46157: LD_VAR 0 1
46161: PPUSH
46162: CALL_OW 321
46166: PUSH
46167: LD_INT 2
46169: EQUAL
46170: ST_TO_ADDR
46171: GO 46417
46173: LD_INT 30
46175: DOUBLE
46176: EQUAL
46177: IFTRUE 46181
46179: GO 46206
46181: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46182: LD_ADDR_VAR 0 3
46186: PUSH
46187: LD_INT 20
46189: PPUSH
46190: LD_VAR 0 1
46194: PPUSH
46195: CALL_OW 321
46199: PUSH
46200: LD_INT 2
46202: EQUAL
46203: ST_TO_ADDR
46204: GO 46417
46206: LD_INT 28
46208: DOUBLE
46209: EQUAL
46210: IFTRUE 46220
46212: LD_INT 21
46214: DOUBLE
46215: EQUAL
46216: IFTRUE 46220
46218: GO 46245
46220: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46221: LD_ADDR_VAR 0 3
46225: PUSH
46226: LD_INT 21
46228: PPUSH
46229: LD_VAR 0 1
46233: PPUSH
46234: CALL_OW 321
46238: PUSH
46239: LD_INT 2
46241: EQUAL
46242: ST_TO_ADDR
46243: GO 46417
46245: LD_INT 16
46247: DOUBLE
46248: EQUAL
46249: IFTRUE 46253
46251: GO 46278
46253: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46254: LD_ADDR_VAR 0 3
46258: PUSH
46259: LD_INT 84
46261: PPUSH
46262: LD_VAR 0 1
46266: PPUSH
46267: CALL_OW 321
46271: PUSH
46272: LD_INT 2
46274: EQUAL
46275: ST_TO_ADDR
46276: GO 46417
46278: LD_INT 19
46280: DOUBLE
46281: EQUAL
46282: IFTRUE 46292
46284: LD_INT 23
46286: DOUBLE
46287: EQUAL
46288: IFTRUE 46292
46290: GO 46317
46292: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46293: LD_ADDR_VAR 0 3
46297: PUSH
46298: LD_INT 83
46300: PPUSH
46301: LD_VAR 0 1
46305: PPUSH
46306: CALL_OW 321
46310: PUSH
46311: LD_INT 2
46313: EQUAL
46314: ST_TO_ADDR
46315: GO 46417
46317: LD_INT 17
46319: DOUBLE
46320: EQUAL
46321: IFTRUE 46325
46323: GO 46350
46325: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46326: LD_ADDR_VAR 0 3
46330: PUSH
46331: LD_INT 39
46333: PPUSH
46334: LD_VAR 0 1
46338: PPUSH
46339: CALL_OW 321
46343: PUSH
46344: LD_INT 2
46346: EQUAL
46347: ST_TO_ADDR
46348: GO 46417
46350: LD_INT 18
46352: DOUBLE
46353: EQUAL
46354: IFTRUE 46358
46356: GO 46383
46358: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46359: LD_ADDR_VAR 0 3
46363: PUSH
46364: LD_INT 40
46366: PPUSH
46367: LD_VAR 0 1
46371: PPUSH
46372: CALL_OW 321
46376: PUSH
46377: LD_INT 2
46379: EQUAL
46380: ST_TO_ADDR
46381: GO 46417
46383: LD_INT 27
46385: DOUBLE
46386: EQUAL
46387: IFTRUE 46391
46389: GO 46416
46391: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46392: LD_ADDR_VAR 0 3
46396: PUSH
46397: LD_INT 35
46399: PPUSH
46400: LD_VAR 0 1
46404: PPUSH
46405: CALL_OW 321
46409: PUSH
46410: LD_INT 2
46412: EQUAL
46413: ST_TO_ADDR
46414: GO 46417
46416: POP
// end ;
46417: LD_VAR 0 3
46421: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46422: LD_INT 0
46424: PPUSH
46425: PPUSH
46426: PPUSH
46427: PPUSH
46428: PPUSH
46429: PPUSH
46430: PPUSH
46431: PPUSH
46432: PPUSH
46433: PPUSH
46434: PPUSH
// result := false ;
46435: LD_ADDR_VAR 0 6
46439: PUSH
46440: LD_INT 0
46442: ST_TO_ADDR
// if btype = b_depot then
46443: LD_VAR 0 2
46447: PUSH
46448: LD_INT 0
46450: EQUAL
46451: IFFALSE 46463
// begin result := true ;
46453: LD_ADDR_VAR 0 6
46457: PUSH
46458: LD_INT 1
46460: ST_TO_ADDR
// exit ;
46461: GO 47317
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46463: LD_VAR 0 1
46467: NOT
46468: IFTRUE 46493
46470: PUSH
46471: LD_VAR 0 1
46475: PPUSH
46476: CALL_OW 266
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: IN
46491: NOT
46492: OR
46493: IFTRUE 46502
46495: PUSH
46496: LD_VAR 0 2
46500: NOT
46501: OR
46502: IFTRUE 46538
46504: PUSH
46505: LD_VAR 0 5
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 2
46518: PUSH
46519: LD_INT 3
46521: PUSH
46522: LD_INT 4
46524: PUSH
46525: LD_INT 5
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: IN
46536: NOT
46537: OR
46538: IFTRUE 46557
46540: PUSH
46541: LD_VAR 0 3
46545: PPUSH
46546: LD_VAR 0 4
46550: PPUSH
46551: CALL_OW 488
46555: NOT
46556: OR
46557: IFFALSE 46561
// exit ;
46559: GO 47317
// side := GetSide ( depot ) ;
46561: LD_ADDR_VAR 0 9
46565: PUSH
46566: LD_VAR 0 1
46570: PPUSH
46571: CALL_OW 255
46575: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46576: LD_VAR 0 9
46580: PPUSH
46581: LD_VAR 0 2
46585: PPUSH
46586: CALL 46046 0 2
46590: NOT
46591: IFFALSE 46595
// exit ;
46593: GO 47317
// pom := GetBase ( depot ) ;
46595: LD_ADDR_VAR 0 10
46599: PUSH
46600: LD_VAR 0 1
46604: PPUSH
46605: CALL_OW 274
46609: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46610: LD_ADDR_VAR 0 11
46614: PUSH
46615: LD_VAR 0 2
46619: PPUSH
46620: LD_VAR 0 1
46624: PPUSH
46625: CALL_OW 248
46629: PPUSH
46630: CALL_OW 450
46634: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46635: LD_VAR 0 10
46639: PPUSH
46640: LD_INT 1
46642: PPUSH
46643: CALL_OW 275
46647: PUSH
46648: LD_VAR 0 11
46652: PUSH
46653: LD_INT 1
46655: ARRAY
46656: GREATEREQUAL
46657: IFFALSE 46683
46659: PUSH
46660: LD_VAR 0 10
46664: PPUSH
46665: LD_INT 2
46667: PPUSH
46668: CALL_OW 275
46672: PUSH
46673: LD_VAR 0 11
46677: PUSH
46678: LD_INT 2
46680: ARRAY
46681: GREATEREQUAL
46682: AND
46683: IFFALSE 46709
46685: PUSH
46686: LD_VAR 0 10
46690: PPUSH
46691: LD_INT 3
46693: PPUSH
46694: CALL_OW 275
46698: PUSH
46699: LD_VAR 0 11
46703: PUSH
46704: LD_INT 3
46706: ARRAY
46707: GREATEREQUAL
46708: AND
46709: NOT
46710: IFFALSE 46714
// exit ;
46712: GO 47317
// if GetBType ( depot ) = b_depot then
46714: LD_VAR 0 1
46718: PPUSH
46719: CALL_OW 266
46723: PUSH
46724: LD_INT 0
46726: EQUAL
46727: IFFALSE 46739
// dist := 28 else
46729: LD_ADDR_VAR 0 14
46733: PUSH
46734: LD_INT 28
46736: ST_TO_ADDR
46737: GO 46747
// dist := 36 ;
46739: LD_ADDR_VAR 0 14
46743: PUSH
46744: LD_INT 36
46746: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46747: LD_VAR 0 1
46751: PPUSH
46752: LD_VAR 0 3
46756: PPUSH
46757: LD_VAR 0 4
46761: PPUSH
46762: CALL_OW 297
46766: PUSH
46767: LD_VAR 0 14
46771: GREATER
46772: IFFALSE 46776
// exit ;
46774: GO 47317
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46776: LD_ADDR_VAR 0 12
46780: PUSH
46781: LD_VAR 0 2
46785: PPUSH
46786: LD_VAR 0 3
46790: PPUSH
46791: LD_VAR 0 4
46795: PPUSH
46796: LD_VAR 0 5
46800: PPUSH
46801: LD_VAR 0 1
46805: PPUSH
46806: CALL_OW 248
46810: PPUSH
46811: LD_INT 0
46813: PPUSH
46814: CALL 47322 0 6
46818: ST_TO_ADDR
// if not hexes then
46819: LD_VAR 0 12
46823: NOT
46824: IFFALSE 46828
// exit ;
46826: GO 47317
// hex := GetHexInfo ( x , y ) ;
46828: LD_ADDR_VAR 0 15
46832: PUSH
46833: LD_VAR 0 3
46837: PPUSH
46838: LD_VAR 0 4
46842: PPUSH
46843: CALL_OW 546
46847: ST_TO_ADDR
// if hex [ 1 ] then
46848: LD_VAR 0 15
46852: PUSH
46853: LD_INT 1
46855: ARRAY
46856: IFFALSE 46860
// exit ;
46858: GO 47317
// height := hex [ 2 ] ;
46860: LD_ADDR_VAR 0 13
46864: PUSH
46865: LD_VAR 0 15
46869: PUSH
46870: LD_INT 2
46872: ARRAY
46873: ST_TO_ADDR
// for i = 1 to hexes do
46874: LD_ADDR_VAR 0 7
46878: PUSH
46879: DOUBLE
46880: LD_INT 1
46882: DEC
46883: ST_TO_ADDR
46884: LD_VAR 0 12
46888: PUSH
46889: FOR_TO
46890: IFFALSE 47234
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46892: LD_VAR 0 12
46896: PUSH
46897: LD_VAR 0 7
46901: ARRAY
46902: PUSH
46903: LD_INT 1
46905: ARRAY
46906: PPUSH
46907: LD_VAR 0 12
46911: PUSH
46912: LD_VAR 0 7
46916: ARRAY
46917: PUSH
46918: LD_INT 2
46920: ARRAY
46921: PPUSH
46922: CALL_OW 488
46926: NOT
46927: IFTRUE 46969
46929: PUSH
46930: LD_VAR 0 12
46934: PUSH
46935: LD_VAR 0 7
46939: ARRAY
46940: PUSH
46941: LD_INT 1
46943: ARRAY
46944: PPUSH
46945: LD_VAR 0 12
46949: PUSH
46950: LD_VAR 0 7
46954: ARRAY
46955: PUSH
46956: LD_INT 2
46958: ARRAY
46959: PPUSH
46960: CALL_OW 428
46964: PUSH
46965: LD_INT 0
46967: GREATER
46968: OR
46969: IFTRUE 47007
46971: PUSH
46972: LD_VAR 0 12
46976: PUSH
46977: LD_VAR 0 7
46981: ARRAY
46982: PUSH
46983: LD_INT 1
46985: ARRAY
46986: PPUSH
46987: LD_VAR 0 12
46991: PUSH
46992: LD_VAR 0 7
46996: ARRAY
46997: PUSH
46998: LD_INT 2
47000: ARRAY
47001: PPUSH
47002: CALL_OW 351
47006: OR
47007: IFFALSE 47013
// exit ;
47009: POP
47010: POP
47011: GO 47317
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47013: LD_ADDR_VAR 0 8
47017: PUSH
47018: LD_VAR 0 12
47022: PUSH
47023: LD_VAR 0 7
47027: ARRAY
47028: PUSH
47029: LD_INT 1
47031: ARRAY
47032: PPUSH
47033: LD_VAR 0 12
47037: PUSH
47038: LD_VAR 0 7
47042: ARRAY
47043: PUSH
47044: LD_INT 2
47046: ARRAY
47047: PPUSH
47048: CALL_OW 546
47052: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47053: LD_VAR 0 8
47057: PUSH
47058: LD_INT 1
47060: ARRAY
47061: IFTRUE 47083
47063: PUSH
47064: LD_VAR 0 8
47068: PUSH
47069: LD_INT 2
47071: ARRAY
47072: PUSH
47073: LD_VAR 0 13
47077: PUSH
47078: LD_INT 2
47080: PLUS
47081: GREATER
47082: OR
47083: IFTRUE 47105
47085: PUSH
47086: LD_VAR 0 8
47090: PUSH
47091: LD_INT 2
47093: ARRAY
47094: PUSH
47095: LD_VAR 0 13
47099: PUSH
47100: LD_INT 2
47102: MINUS
47103: LESS
47104: OR
47105: IFTRUE 47173
47107: PUSH
47108: LD_VAR 0 8
47112: PUSH
47113: LD_INT 3
47115: ARRAY
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 8
47122: PUSH
47123: LD_INT 9
47125: PUSH
47126: LD_INT 10
47128: PUSH
47129: LD_INT 11
47131: PUSH
47132: LD_INT 12
47134: PUSH
47135: LD_INT 13
47137: PUSH
47138: LD_INT 16
47140: PUSH
47141: LD_INT 17
47143: PUSH
47144: LD_INT 18
47146: PUSH
47147: LD_INT 19
47149: PUSH
47150: LD_INT 20
47152: PUSH
47153: LD_INT 21
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: IN
47171: NOT
47172: OR
47173: IFTRUE 47186
47175: PUSH
47176: LD_VAR 0 8
47180: PUSH
47181: LD_INT 5
47183: ARRAY
47184: NOT
47185: OR
47186: IFTRUE 47226
47188: PUSH
47189: LD_VAR 0 8
47193: PUSH
47194: LD_INT 6
47196: ARRAY
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: LD_INT 7
47206: PUSH
47207: LD_INT 9
47209: PUSH
47210: LD_INT 10
47212: PUSH
47213: LD_INT 11
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: IN
47224: NOT
47225: OR
47226: IFFALSE 47232
// exit ;
47228: POP
47229: POP
47230: GO 47317
// end ;
47232: GO 46889
47234: POP
47235: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47236: LD_VAR 0 9
47240: PPUSH
47241: LD_VAR 0 3
47245: PPUSH
47246: LD_VAR 0 4
47250: PPUSH
47251: LD_INT 20
47253: PPUSH
47254: CALL 39136 0 4
47258: PUSH
47259: LD_INT 4
47261: ARRAY
47262: IFFALSE 47266
// exit ;
47264: GO 47317
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47266: LD_VAR 0 2
47270: PUSH
47271: LD_INT 29
47273: PUSH
47274: LD_INT 30
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: IN
47281: IFFALSE 47305
47283: PUSH
47284: LD_VAR 0 3
47288: PPUSH
47289: LD_VAR 0 4
47293: PPUSH
47294: LD_VAR 0 9
47298: PPUSH
47299: CALL_OW 440
47303: NOT
47304: AND
47305: IFFALSE 47309
// exit ;
47307: GO 47317
// result := true ;
47309: LD_ADDR_VAR 0 6
47313: PUSH
47314: LD_INT 1
47316: ST_TO_ADDR
// end ;
47317: LD_VAR 0 6
47321: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47322: LD_INT 0
47324: PPUSH
47325: PPUSH
47326: PPUSH
47327: PPUSH
47328: PPUSH
47329: PPUSH
47330: PPUSH
47331: PPUSH
47332: PPUSH
47333: PPUSH
47334: PPUSH
47335: PPUSH
47336: PPUSH
47337: PPUSH
47338: PPUSH
47339: PPUSH
47340: PPUSH
47341: PPUSH
47342: PPUSH
47343: PPUSH
47344: PPUSH
47345: PPUSH
47346: PPUSH
47347: PPUSH
47348: PPUSH
47349: PPUSH
47350: PPUSH
47351: PPUSH
47352: PPUSH
47353: PPUSH
47354: PPUSH
47355: PPUSH
47356: PPUSH
47357: PPUSH
47358: PPUSH
47359: PPUSH
47360: PPUSH
47361: PPUSH
47362: PPUSH
47363: PPUSH
47364: PPUSH
47365: PPUSH
47366: PPUSH
47367: PPUSH
47368: PPUSH
47369: PPUSH
47370: PPUSH
47371: PPUSH
47372: PPUSH
47373: PPUSH
47374: PPUSH
47375: PPUSH
47376: PPUSH
47377: PPUSH
47378: PPUSH
47379: PPUSH
47380: PPUSH
47381: PPUSH
// result = [ ] ;
47382: LD_ADDR_VAR 0 7
47386: PUSH
47387: EMPTY
47388: ST_TO_ADDR
// temp_list = [ ] ;
47389: LD_ADDR_VAR 0 9
47393: PUSH
47394: EMPTY
47395: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47396: LD_VAR 0 4
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: LD_INT 3
47412: PUSH
47413: LD_INT 4
47415: PUSH
47416: LD_INT 5
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: IN
47427: NOT
47428: IFTRUE 47471
47430: PUSH
47431: LD_VAR 0 1
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: IN
47446: IFFALSE 47470
47448: PUSH
47449: LD_VAR 0 5
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: LD_INT 3
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: LIST
47467: IN
47468: NOT
47469: AND
47470: OR
47471: IFFALSE 47475
// exit ;
47473: GO 65874
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47475: LD_VAR 0 1
47479: PUSH
47480: LD_INT 6
47482: PUSH
47483: LD_INT 7
47485: PUSH
47486: LD_INT 8
47488: PUSH
47489: LD_INT 13
47491: PUSH
47492: LD_INT 12
47494: PUSH
47495: LD_INT 15
47497: PUSH
47498: LD_INT 11
47500: PUSH
47501: LD_INT 14
47503: PUSH
47504: LD_INT 10
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: IN
47518: IFFALSE 47528
// btype = b_lab ;
47520: LD_ADDR_VAR 0 1
47524: PUSH
47525: LD_INT 6
47527: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47528: LD_VAR 0 6
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: LIST
47546: IN
47547: NOT
47548: IFTRUE 47616
47550: PUSH
47551: LD_VAR 0 1
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: LD_INT 2
47564: PUSH
47565: LD_INT 3
47567: PUSH
47568: LD_INT 6
47570: PUSH
47571: LD_INT 36
47573: PUSH
47574: LD_INT 4
47576: PUSH
47577: LD_INT 5
47579: PUSH
47580: LD_INT 31
47582: PUSH
47583: LD_INT 32
47585: PUSH
47586: LD_INT 33
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: IN
47602: NOT
47603: IFFALSE 47615
47605: PUSH
47606: LD_VAR 0 6
47610: PUSH
47611: LD_INT 1
47613: EQUAL
47614: AND
47615: OR
47616: IFTRUE 47648
47618: PUSH
47619: LD_VAR 0 1
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: IN
47634: NOT
47635: IFFALSE 47647
47637: PUSH
47638: LD_VAR 0 6
47642: PUSH
47643: LD_INT 2
47645: EQUAL
47646: AND
47647: OR
47648: IFFALSE 47658
// mode = 0 ;
47650: LD_ADDR_VAR 0 6
47654: PUSH
47655: LD_INT 0
47657: ST_TO_ADDR
// case mode of 0 :
47658: LD_VAR 0 6
47662: PUSH
47663: LD_INT 0
47665: DOUBLE
47666: EQUAL
47667: IFTRUE 47671
47669: GO 59124
47671: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47672: LD_ADDR_VAR 0 11
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: LD_INT 3
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47865: LD_ADDR_VAR 0 12
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 1
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 3
48022: NEG
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 3
48033: NEG
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48061: LD_ADDR_VAR 0 13
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: LD_INT 3
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 3
48220: NEG
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 3
48232: NEG
48233: PUSH
48234: LD_INT 3
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48260: LD_ADDR_VAR 0 14
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: LD_INT 3
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: LD_INT 3
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 2
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48456: LD_ADDR_VAR 0 15
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 3
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 3
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48649: LD_ADDR_VAR 0 16
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: LD_INT 2
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 3
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 3
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: LD_INT 3
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48842: LD_ADDR_VAR 0 17
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: LD_INT 2
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: LD_INT 2
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 2
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 2
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: NEG
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49072: LD_ADDR_VAR 0 18
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 2
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49302: LD_ADDR_VAR 0 19
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49532: LD_ADDR_VAR 0 20
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: LD_INT 1
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 2
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: LD_INT 2
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49762: LD_ADDR_VAR 0 21
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 2
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: NEG
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49992: LD_ADDR_VAR 0 22
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 2
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: LD_INT 2
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50222: LD_ADDR_VAR 0 23
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: LD_INT 3
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 3
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50502: LD_ADDR_VAR 0 24
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 2
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 2
50689: NEG
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: LD_INT 2
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 3
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50778: LD_ADDR_VAR 0 25
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 3
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 3
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 2
51009: PUSH
51010: LD_INT 3
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: LD_INT 3
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51052: LD_ADDR_VAR 0 26
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 2
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: LD_INT 3
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 3
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51328: LD_ADDR_VAR 0 27
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 2
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: LD_INT 2
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: LD_INT 2
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: LD_INT 2
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 3
51561: NEG
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 3
51573: NEG
51574: PUSH
51575: LD_INT 2
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51608: LD_ADDR_VAR 0 28
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: NEG
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: LD_INT 2
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 2
51819: NEG
51820: PUSH
51821: LD_INT 3
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: LD_INT 3
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 3
51843: NEG
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 3
51855: NEG
51856: PUSH
51857: LD_INT 2
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51890: LD_ADDR_VAR 0 29
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 2
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 2
52080: NEG
52081: PUSH
52082: LD_INT 3
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 3
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: LD_INT 3
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: LD_INT 2
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 3
52134: NEG
52135: PUSH
52136: LD_INT 2
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52169: LD_ADDR_VAR 0 30
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: NEG
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 3
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 3
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: LD_INT 3
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 3
52412: NEG
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52447: LD_ADDR_VAR 0 31
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 2
52624: NEG
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: LD_INT 3
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 3
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: LD_INT 3
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 3
52690: NEG
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52725: LD_ADDR_VAR 0 32
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 2
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 2
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 2
52902: NEG
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: LD_INT 3
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 2
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 3
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: LD_INT 3
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 3
52968: NEG
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53003: LD_ADDR_VAR 0 33
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 2
53169: NEG
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: NEG
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: LD_INT 3
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: NEG
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53282: LD_ADDR_VAR 0 34
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: LD_INT 3
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 3
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: LD_INT 3
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 3
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53562: LD_ADDR_VAR 0 35
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53674: LD_ADDR_VAR 0 36
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53786: LD_ADDR_VAR 0 37
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53898: LD_ADDR_VAR 0 38
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: NEG
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54010: LD_ADDR_VAR 0 39
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54122: LD_ADDR_VAR 0 40
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54234: LD_ADDR_VAR 0 41
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: NEG
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: LD_INT 3
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 3
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: LD_INT 3
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: LD_INT 3
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 3
54508: NEG
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 3
54519: NEG
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 3
54531: NEG
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 3
54543: NEG
54544: PUSH
54545: LD_INT 3
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54584: LD_ADDR_VAR 0 42
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 2
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: LD_INT 3
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 3
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 3
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 3
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: LD_INT 3
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: LD_INT 3
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: LD_INT 3
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 3
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 3
54881: NEG
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 3
54893: NEG
54894: PUSH
54895: LD_INT 3
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54934: LD_ADDR_VAR 0 43
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 3
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 3
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 2
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 3
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 3
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 3
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 3
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 3
55241: NEG
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55282: LD_ADDR_VAR 0 44
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: NEG
55473: PUSH
55474: LD_INT 3
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 3
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 3
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 3
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 3
55525: PUSH
55526: LD_INT 3
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 3
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 3
55556: NEG
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 3
55567: NEG
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 3
55591: NEG
55592: PUSH
55593: LD_INT 3
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55632: LD_ADDR_VAR 0 45
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: LD_INT 3
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 3
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 3
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: PUSH
55879: LD_INT 3
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: LD_INT 3
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 3
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 3
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 3
55929: NEG
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: LD_INT 3
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55982: LD_ADDR_VAR 0 46
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 2
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: LD_INT 2
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: LD_INT 2
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: LD_INT 3
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 3
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 2
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 3
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 3
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 3
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: LD_INT 2
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 3
56278: NEG
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 3
56289: NEG
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56330: LD_ADDR_VAR 0 47
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: LD_INT 2
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56481: LD_ADDR_VAR 0 48
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56628: LD_ADDR_VAR 0 49
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 2
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: LD_INT 2
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56772: LD_ADDR_VAR 0 50
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 2
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56916: LD_ADDR_VAR 0 51
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57063: LD_ADDR_VAR 0 52
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 2
57167: NEG
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57214: LD_ADDR_VAR 0 53
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 2
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57444: LD_ADDR_VAR 0 54
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: LD_INT 2
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 2
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: LD_INT 2
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: NEG
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: NEG
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57674: LD_ADDR_VAR 0 55
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: LD_INT 2
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 2
57850: NEG
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57904: LD_ADDR_VAR 0 56
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 2
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: NEG
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58134: LD_ADDR_VAR 0 57
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: LD_INT 1
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 2
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 2
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: LD_INT 2
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 2
58321: NEG
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58364: LD_ADDR_VAR 0 58
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 0
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 2
58499: PUSH
58500: LD_INT 2
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: LD_INT 2
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: NEG
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: LD_INT 2
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58594: LD_ADDR_VAR 0 59
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: NEG
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58682: LD_ADDR_VAR 0 60
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58770: LD_ADDR_VAR 0 61
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58858: LD_ADDR_VAR 0 62
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 0
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58946: LD_ADDR_VAR 0 63
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59034: LD_ADDR_VAR 0 64
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: ST_TO_ADDR
// end ; 1 :
59122: GO 65019
59124: LD_INT 1
59126: DOUBLE
59127: EQUAL
59128: IFTRUE 59132
59130: GO 61755
59132: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59133: LD_ADDR_VAR 0 11
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: LD_INT 3
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 3
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: LIST
59176: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59177: LD_ADDR_VAR 0 12
59181: PUSH
59182: LD_INT 2
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 3
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59218: LD_ADDR_VAR 0 13
59222: PUSH
59223: LD_INT 3
59225: PUSH
59226: LD_INT 2
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 3
59235: PUSH
59236: LD_INT 3
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: LD_INT 3
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: LIST
59257: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59258: LD_ADDR_VAR 0 14
59262: PUSH
59263: LD_INT 1
59265: PUSH
59266: LD_INT 3
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: LD_INT 3
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: LIST
59298: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59299: LD_ADDR_VAR 0 15
59303: PUSH
59304: LD_INT 2
59306: NEG
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 3
59317: NEG
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 3
59328: NEG
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: LIST
59342: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59343: LD_ADDR_VAR 0 16
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: LD_INT 3
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 3
59362: NEG
59363: PUSH
59364: LD_INT 2
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 3
59374: NEG
59375: PUSH
59376: LD_INT 3
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: LIST
59388: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59389: LD_ADDR_VAR 0 17
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: LD_INT 3
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 3
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: LD_INT 2
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: LIST
59432: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59433: LD_ADDR_VAR 0 18
59437: PUSH
59438: LD_INT 2
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 3
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 3
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: LIST
59473: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59474: LD_ADDR_VAR 0 19
59478: PUSH
59479: LD_INT 3
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 3
59491: PUSH
59492: LD_INT 3
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: LD_INT 3
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: LIST
59513: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59514: LD_ADDR_VAR 0 20
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 3
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 3
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: LD_INT 2
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: LIST
59554: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59555: LD_ADDR_VAR 0 21
59559: PUSH
59560: LD_INT 2
59562: NEG
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 3
59573: NEG
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 3
59584: NEG
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: LIST
59598: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59599: LD_ADDR_VAR 0 22
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: LD_INT 3
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 3
59618: NEG
59619: PUSH
59620: LD_INT 2
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 3
59630: NEG
59631: PUSH
59632: LD_INT 3
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: LIST
59644: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59645: LD_ADDR_VAR 0 23
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 3
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: LD_INT 4
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: LD_INT 3
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: LIST
59688: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59689: LD_ADDR_VAR 0 24
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 3
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 4
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: LIST
59729: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59730: LD_ADDR_VAR 0 25
59734: PUSH
59735: LD_INT 3
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 4
59747: PUSH
59748: LD_INT 3
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 3
59757: PUSH
59758: LD_INT 4
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: LIST
59769: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59770: LD_ADDR_VAR 0 26
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 3
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 4
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: LD_INT 3
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: LIST
59810: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59811: LD_ADDR_VAR 0 27
59815: PUSH
59816: LD_INT 3
59818: NEG
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 3
59829: NEG
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 4
59840: NEG
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59855: LD_ADDR_VAR 0 28
59859: PUSH
59860: LD_INT 3
59862: NEG
59863: PUSH
59864: LD_INT 3
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 3
59874: NEG
59875: PUSH
59876: LD_INT 4
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 4
59886: NEG
59887: PUSH
59888: LD_INT 3
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: LIST
59900: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59901: LD_ADDR_VAR 0 29
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: LD_INT 3
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: LD_INT 3
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 4
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: LD_INT 4
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: LD_INT 3
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: LD_INT 5
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: LD_INT 5
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: LD_INT 4
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: LD_INT 6
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 6
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 5
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60056: LD_ADDR_VAR 0 30
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 3
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 3
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 3
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 4
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 4
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 4
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 5
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 5
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 5
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 6
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 6
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60199: LD_ADDR_VAR 0 31
60203: PUSH
60204: LD_INT 3
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: LD_INT 3
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: LD_INT 3
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 4
60236: PUSH
60237: LD_INT 3
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 4
60246: PUSH
60247: LD_INT 4
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 3
60256: PUSH
60257: LD_INT 4
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 5
60266: PUSH
60267: LD_INT 4
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 5
60276: PUSH
60277: LD_INT 5
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 4
60286: PUSH
60287: LD_INT 5
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 6
60296: PUSH
60297: LD_INT 5
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 6
60306: PUSH
60307: LD_INT 6
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 5
60316: PUSH
60317: LD_INT 6
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60338: LD_ADDR_VAR 0 32
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: LD_INT 3
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: LD_INT 3
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: LD_INT 2
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: LD_INT 4
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: LD_INT 4
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: LD_INT 3
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: PUSH
60408: LD_INT 5
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: LD_INT 5
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 4
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: PUSH
60439: LD_INT 6
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: LD_INT 6
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: LD_INT 5
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60481: LD_ADDR_VAR 0 33
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 3
60499: NEG
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 3
60510: NEG
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 3
60522: NEG
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 4
60533: NEG
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 4
60544: NEG
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 4
60556: NEG
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 5
60567: NEG
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 5
60578: NEG
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 5
60590: NEG
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 6
60601: NEG
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 6
60612: NEG
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60636: LD_ADDR_VAR 0 34
60640: PUSH
60641: LD_INT 2
60643: NEG
60644: PUSH
60645: LD_INT 3
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 3
60655: NEG
60656: PUSH
60657: LD_INT 2
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 3
60667: NEG
60668: PUSH
60669: LD_INT 3
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 3
60679: NEG
60680: PUSH
60681: LD_INT 4
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 4
60691: NEG
60692: PUSH
60693: LD_INT 3
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 4
60703: NEG
60704: PUSH
60705: LD_INT 4
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 4
60715: NEG
60716: PUSH
60717: LD_INT 5
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 5
60727: NEG
60728: PUSH
60729: LD_INT 4
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 5
60739: NEG
60740: PUSH
60741: LD_INT 5
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 5
60751: NEG
60752: PUSH
60753: LD_INT 6
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 6
60763: NEG
60764: PUSH
60765: LD_INT 5
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 6
60775: NEG
60776: PUSH
60777: LD_INT 6
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60799: LD_ADDR_VAR 0 41
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: LD_INT 2
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: LD_INT 3
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 1
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: LIST
60842: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60843: LD_ADDR_VAR 0 42
60847: PUSH
60848: LD_INT 2
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 2
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: LIST
60883: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60884: LD_ADDR_VAR 0 43
60888: PUSH
60889: LD_INT 2
60891: PUSH
60892: LD_INT 2
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 3
60901: PUSH
60902: LD_INT 2
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 2
60911: PUSH
60912: LD_INT 3
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: LIST
60923: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60924: LD_ADDR_VAR 0 44
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: LD_INT 3
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: LD_INT 2
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: LIST
60964: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60965: LD_ADDR_VAR 0 45
60969: PUSH
60970: LD_INT 2
60972: NEG
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 2
60983: NEG
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 3
60994: NEG
60995: PUSH
60996: LD_INT 1
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61009: LD_ADDR_VAR 0 46
61013: PUSH
61014: LD_INT 2
61016: NEG
61017: PUSH
61018: LD_INT 2
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: LD_INT 3
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 3
61040: NEG
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: LIST
61054: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61055: LD_ADDR_VAR 0 47
61059: PUSH
61060: LD_INT 2
61062: NEG
61063: PUSH
61064: LD_INT 3
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: LD_INT 3
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61088: LD_ADDR_VAR 0 48
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: LD_INT 2
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: LD_INT 1
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61119: LD_ADDR_VAR 0 49
61123: PUSH
61124: LD_INT 3
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: LD_INT 2
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61148: LD_ADDR_VAR 0 50
61152: PUSH
61153: LD_INT 2
61155: PUSH
61156: LD_INT 3
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: LD_INT 3
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61177: LD_ADDR_VAR 0 51
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: LD_INT 2
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 2
61195: NEG
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61208: LD_ADDR_VAR 0 52
61212: PUSH
61213: LD_INT 3
61215: NEG
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 3
61227: NEG
61228: PUSH
61229: LD_INT 2
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61241: LD_ADDR_VAR 0 53
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: LD_INT 3
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: LD_INT 2
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: LIST
61284: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61285: LD_ADDR_VAR 0 54
61289: PUSH
61290: LD_INT 2
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 3
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: LIST
61325: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61326: LD_ADDR_VAR 0 55
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 3
61343: PUSH
61344: LD_INT 3
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 2
61353: PUSH
61354: LD_INT 3
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: LIST
61365: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61366: LD_ADDR_VAR 0 56
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: LD_INT 3
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 3
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 1
61393: NEG
61394: PUSH
61395: LD_INT 2
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: LIST
61406: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61407: LD_ADDR_VAR 0 57
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 3
61425: NEG
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 3
61436: NEG
61437: PUSH
61438: LD_INT 1
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: LIST
61450: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61451: LD_ADDR_VAR 0 58
61455: PUSH
61456: LD_INT 2
61458: NEG
61459: PUSH
61460: LD_INT 3
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 3
61470: NEG
61471: PUSH
61472: LD_INT 2
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 3
61482: NEG
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: LIST
61496: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61497: LD_ADDR_VAR 0 59
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 0
61516: PUSH
61517: LD_INT 2
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: PUSH
61528: LD_INT 1
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: LIST
61540: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61541: LD_ADDR_VAR 0 60
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 2
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: LIST
61581: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61582: LD_ADDR_VAR 0 61
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 2
61599: PUSH
61600: LD_INT 2
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: LD_INT 2
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: LIST
61621: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61622: LD_ADDR_VAR 0 62
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 2
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: LIST
61662: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61663: LD_ADDR_VAR 0 63
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 2
61681: NEG
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 2
61692: NEG
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: LIST
61706: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61707: LD_ADDR_VAR 0 64
61711: PUSH
61712: LD_INT 1
61714: NEG
61715: PUSH
61716: LD_INT 2
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 2
61726: NEG
61727: PUSH
61728: LD_INT 1
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 2
61738: NEG
61739: PUSH
61740: LD_INT 2
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: LIST
61752: ST_TO_ADDR
// end ; 2 :
61753: GO 65019
61755: LD_INT 2
61757: DOUBLE
61758: EQUAL
61759: IFTRUE 61763
61761: GO 65018
61763: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61764: LD_ADDR_VAR 0 29
61768: PUSH
61769: LD_INT 4
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 4
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 5
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 5
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 4
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 3
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 3
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 3
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 5
61854: PUSH
61855: LD_INT 2
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 3
61864: PUSH
61865: LD_INT 3
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 3
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 4
61884: PUSH
61885: LD_INT 3
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 4
61894: PUSH
61895: LD_INT 4
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 3
61904: PUSH
61905: LD_INT 4
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: LD_INT 3
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 2
61924: PUSH
61925: LD_INT 2
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 4
61934: PUSH
61935: LD_INT 2
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: LD_INT 4
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: LD_INT 4
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 3
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: LD_INT 4
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: LD_INT 5
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: LD_INT 5
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 1
62004: NEG
62005: PUSH
62006: LD_INT 4
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: LD_INT 3
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 2
62026: PUSH
62027: LD_INT 5
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 2
62036: NEG
62037: PUSH
62038: LD_INT 3
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 3
62047: NEG
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 3
62058: NEG
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 2
62070: NEG
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 2
62081: NEG
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 3
62092: NEG
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 4
62103: NEG
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 4
62114: NEG
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 4
62126: NEG
62127: PUSH
62128: LD_INT 2
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 2
62138: NEG
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 4
62149: NEG
62150: PUSH
62151: LD_INT 4
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 4
62161: NEG
62162: PUSH
62163: LD_INT 5
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 3
62173: NEG
62174: PUSH
62175: LD_INT 4
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 3
62185: NEG
62186: PUSH
62187: LD_INT 3
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 4
62197: NEG
62198: PUSH
62199: LD_INT 3
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 5
62209: NEG
62210: PUSH
62211: LD_INT 4
62213: NEG
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 5
62221: NEG
62222: PUSH
62223: LD_INT 5
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 3
62233: NEG
62234: PUSH
62235: LD_INT 5
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 5
62245: NEG
62246: PUSH
62247: LD_INT 3
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62302: LD_ADDR_VAR 0 30
62306: PUSH
62307: LD_INT 4
62309: PUSH
62310: LD_INT 4
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 4
62319: PUSH
62320: LD_INT 3
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 5
62329: PUSH
62330: LD_INT 4
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 5
62339: PUSH
62340: LD_INT 5
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 4
62349: PUSH
62350: LD_INT 5
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 3
62359: PUSH
62360: LD_INT 4
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 3
62369: PUSH
62370: LD_INT 3
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 5
62379: PUSH
62380: LD_INT 3
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 3
62389: PUSH
62390: LD_INT 5
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: LD_INT 3
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: LD_INT 2
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: LD_INT 3
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: LD_INT 4
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: LD_INT 4
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 1
62449: NEG
62450: PUSH
62451: LD_INT 3
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: LD_INT 4
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 2
62481: NEG
62482: PUSH
62483: LD_INT 2
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 4
62492: NEG
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 4
62503: NEG
62504: PUSH
62505: LD_INT 1
62507: NEG
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 3
62515: NEG
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 3
62526: NEG
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 4
62537: NEG
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 5
62548: NEG
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 5
62559: NEG
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 5
62571: NEG
62572: PUSH
62573: LD_INT 2
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 3
62583: NEG
62584: PUSH
62585: LD_INT 2
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 3
62594: NEG
62595: PUSH
62596: LD_INT 3
62598: NEG
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 3
62606: NEG
62607: PUSH
62608: LD_INT 4
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 2
62618: NEG
62619: PUSH
62620: LD_INT 3
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 2
62630: NEG
62631: PUSH
62632: LD_INT 2
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 3
62642: NEG
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 4
62654: NEG
62655: PUSH
62656: LD_INT 3
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 4
62666: NEG
62667: PUSH
62668: LD_INT 4
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 2
62678: NEG
62679: PUSH
62680: LD_INT 4
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 4
62690: NEG
62691: PUSH
62692: LD_INT 2
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: LD_INT 4
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: LD_INT 5
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: LD_INT 4
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: LD_INT 3
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: LD_INT 3
62749: NEG
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: LD_INT 4
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: LD_INT 5
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 2
62781: PUSH
62782: LD_INT 3
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 2
62792: NEG
62793: PUSH
62794: LD_INT 5
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62849: LD_ADDR_VAR 0 31
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: LD_INT 4
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: LD_INT 3
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: LD_INT 4
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: LD_INT 5
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: LD_INT 5
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: LD_INT 4
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 1
62917: NEG
62918: PUSH
62919: LD_INT 3
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 2
62928: PUSH
62929: LD_INT 5
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 2
62938: NEG
62939: PUSH
62940: LD_INT 3
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 3
62949: NEG
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 3
62960: NEG
62961: PUSH
62962: LD_INT 1
62964: NEG
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 2
62972: NEG
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 2
62983: NEG
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 3
62994: NEG
62995: PUSH
62996: LD_INT 1
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 4
63005: NEG
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 4
63016: NEG
63017: PUSH
63018: LD_INT 1
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 4
63028: NEG
63029: PUSH
63030: LD_INT 2
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 2
63040: NEG
63041: PUSH
63042: LD_INT 2
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 4
63051: NEG
63052: PUSH
63053: LD_INT 4
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 4
63063: NEG
63064: PUSH
63065: LD_INT 5
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 3
63075: NEG
63076: PUSH
63077: LD_INT 4
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 3
63087: NEG
63088: PUSH
63089: LD_INT 3
63091: NEG
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 4
63099: NEG
63100: PUSH
63101: LD_INT 3
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 5
63111: NEG
63112: PUSH
63113: LD_INT 4
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 5
63123: NEG
63124: PUSH
63125: LD_INT 5
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 3
63135: NEG
63136: PUSH
63137: LD_INT 5
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 5
63147: NEG
63148: PUSH
63149: LD_INT 3
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: LD_INT 3
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: LD_INT 4
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: LD_INT 3
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: LD_INT 2
63195: NEG
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: LD_INT 2
63206: NEG
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 1
63214: NEG
63215: PUSH
63216: LD_INT 3
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: LD_INT 4
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 2
63238: PUSH
63239: LD_INT 2
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 2
63249: NEG
63250: PUSH
63251: LD_INT 4
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 4
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 4
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 5
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 5
63292: PUSH
63293: LD_INT 1
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 4
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 3
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 3
63322: PUSH
63323: LD_INT 1
63325: NEG
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 3
63333: PUSH
63334: LD_INT 2
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 5
63344: PUSH
63345: LD_INT 2
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63399: LD_ADDR_VAR 0 32
63403: PUSH
63404: LD_INT 4
63406: NEG
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 4
63417: NEG
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 3
63429: NEG
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 3
63440: NEG
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 4
63451: NEG
63452: PUSH
63453: LD_INT 1
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 5
63462: NEG
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 5
63473: NEG
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 5
63485: NEG
63486: PUSH
63487: LD_INT 2
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 3
63497: NEG
63498: PUSH
63499: LD_INT 2
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 3
63508: NEG
63509: PUSH
63510: LD_INT 3
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 3
63520: NEG
63521: PUSH
63522: LD_INT 4
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 2
63532: NEG
63533: PUSH
63534: LD_INT 3
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 2
63544: NEG
63545: PUSH
63546: LD_INT 2
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 3
63556: NEG
63557: PUSH
63558: LD_INT 2
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 4
63568: NEG
63569: PUSH
63570: LD_INT 3
63572: NEG
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 4
63580: NEG
63581: PUSH
63582: LD_INT 4
63584: NEG
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 2
63592: NEG
63593: PUSH
63594: LD_INT 4
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 4
63604: NEG
63605: PUSH
63606: LD_INT 2
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 0
63616: PUSH
63617: LD_INT 4
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: LD_INT 5
63630: NEG
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 1
63638: PUSH
63639: LD_INT 4
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: LD_INT 3
63652: NEG
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_INT 3
63663: NEG
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 1
63671: NEG
63672: PUSH
63673: LD_INT 4
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 5
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 2
63695: PUSH
63696: LD_INT 3
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 2
63706: NEG
63707: PUSH
63708: LD_INT 5
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 3
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 3
63728: PUSH
63729: LD_INT 1
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 4
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 4
63749: PUSH
63750: LD_INT 1
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 3
63759: PUSH
63760: LD_INT 1
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 2
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 4
63801: PUSH
63802: LD_INT 2
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 4
63811: PUSH
63812: LD_INT 4
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 4
63821: PUSH
63822: LD_INT 3
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 5
63831: PUSH
63832: LD_INT 4
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 5
63841: PUSH
63842: LD_INT 5
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 4
63851: PUSH
63852: LD_INT 5
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 3
63861: PUSH
63862: LD_INT 4
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 3
63871: PUSH
63872: LD_INT 3
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 5
63881: PUSH
63882: LD_INT 3
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 3
63891: PUSH
63892: LD_INT 5
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63946: LD_ADDR_VAR 0 33
63950: PUSH
63951: LD_INT 4
63953: NEG
63954: PUSH
63955: LD_INT 4
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 4
63965: NEG
63966: PUSH
63967: LD_INT 5
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: LD_INT 4
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 3
63989: NEG
63990: PUSH
63991: LD_INT 3
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 4
64001: NEG
64002: PUSH
64003: LD_INT 3
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 5
64013: NEG
64014: PUSH
64015: LD_INT 4
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 5
64025: NEG
64026: PUSH
64027: LD_INT 5
64029: NEG
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 3
64037: NEG
64038: PUSH
64039: LD_INT 5
64041: NEG
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 5
64049: NEG
64050: PUSH
64051: LD_INT 3
64053: NEG
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: LD_INT 3
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 0
64072: PUSH
64073: LD_INT 4
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 1
64083: PUSH
64084: LD_INT 3
64086: NEG
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: LD_INT 2
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 1
64116: NEG
64117: PUSH
64118: LD_INT 3
64120: NEG
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: LD_INT 4
64132: NEG
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 2
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 2
64151: NEG
64152: PUSH
64153: LD_INT 4
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 4
64163: PUSH
64164: LD_INT 0
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 4
64173: PUSH
64174: LD_INT 1
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 5
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 5
64194: PUSH
64195: LD_INT 1
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 4
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 3
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 3
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 3
64235: PUSH
64236: LD_INT 2
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 5
64246: PUSH
64247: LD_INT 2
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 3
64256: PUSH
64257: LD_INT 3
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 3
64266: PUSH
64267: LD_INT 2
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 4
64276: PUSH
64277: LD_INT 3
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 4
64286: PUSH
64287: LD_INT 4
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 3
64296: PUSH
64297: LD_INT 4
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 2
64306: PUSH
64307: LD_INT 3
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 2
64316: PUSH
64317: LD_INT 2
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 4
64326: PUSH
64327: LD_INT 2
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: LD_INT 4
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: LD_INT 4
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: LD_INT 3
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: LD_INT 4
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: LD_INT 5
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 5
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: LD_INT 4
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: LD_INT 3
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 2
64418: PUSH
64419: LD_INT 5
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 2
64428: NEG
64429: PUSH
64430: LD_INT 3
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64484: LD_ADDR_VAR 0 34
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: LD_INT 4
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 5
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: LD_INT 4
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: LD_INT 3
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 3
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: NEG
64547: PUSH
64548: LD_INT 4
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: LD_INT 5
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 2
64570: PUSH
64571: LD_INT 3
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 2
64581: NEG
64582: PUSH
64583: LD_INT 5
64585: NEG
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 3
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 3
64603: PUSH
64604: LD_INT 1
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 4
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 4
64624: PUSH
64625: LD_INT 1
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 3
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 2
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 2
64654: PUSH
64655: LD_INT 1
64657: NEG
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 2
64665: PUSH
64666: LD_INT 2
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 4
64676: PUSH
64677: LD_INT 2
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 4
64686: PUSH
64687: LD_INT 4
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 4
64696: PUSH
64697: LD_INT 3
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 5
64706: PUSH
64707: LD_INT 4
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 5
64716: PUSH
64717: LD_INT 5
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 4
64726: PUSH
64727: LD_INT 5
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 3
64736: PUSH
64737: LD_INT 4
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 3
64746: PUSH
64747: LD_INT 3
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 5
64756: PUSH
64757: LD_INT 3
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 3
64766: PUSH
64767: LD_INT 5
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: LD_INT 3
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: LD_INT 2
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 1
64796: PUSH
64797: LD_INT 3
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: PUSH
64807: LD_INT 4
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: LD_INT 4
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: LD_INT 3
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: LD_INT 2
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 2
64848: PUSH
64849: LD_INT 4
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 2
64858: NEG
64859: PUSH
64860: LD_INT 2
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 4
64869: NEG
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 4
64880: NEG
64881: PUSH
64882: LD_INT 1
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 3
64892: NEG
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 3
64903: NEG
64904: PUSH
64905: LD_INT 1
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 4
64914: NEG
64915: PUSH
64916: LD_INT 1
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 5
64925: NEG
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 5
64936: NEG
64937: PUSH
64938: LD_INT 1
64940: NEG
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 5
64948: NEG
64949: PUSH
64950: LD_INT 2
64952: NEG
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 3
64960: NEG
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: ST_TO_ADDR
// end ; end ;
65016: GO 65019
65018: POP
// case btype of b_depot , b_warehouse :
65019: LD_VAR 0 1
65023: PUSH
65024: LD_INT 0
65026: DOUBLE
65027: EQUAL
65028: IFTRUE 65038
65030: LD_INT 1
65032: DOUBLE
65033: EQUAL
65034: IFTRUE 65038
65036: GO 65239
65038: POP
// case nation of nation_american :
65039: LD_VAR 0 5
65043: PUSH
65044: LD_INT 1
65046: DOUBLE
65047: EQUAL
65048: IFTRUE 65052
65050: GO 65108
65052: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65053: LD_ADDR_VAR 0 9
65057: PUSH
65058: LD_VAR 0 11
65062: PUSH
65063: LD_VAR 0 12
65067: PUSH
65068: LD_VAR 0 13
65072: PUSH
65073: LD_VAR 0 14
65077: PUSH
65078: LD_VAR 0 15
65082: PUSH
65083: LD_VAR 0 16
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: PUSH
65096: LD_VAR 0 4
65100: PUSH
65101: LD_INT 1
65103: PLUS
65104: ARRAY
65105: ST_TO_ADDR
65106: GO 65237
65108: LD_INT 2
65110: DOUBLE
65111: EQUAL
65112: IFTRUE 65116
65114: GO 65172
65116: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65117: LD_ADDR_VAR 0 9
65121: PUSH
65122: LD_VAR 0 17
65126: PUSH
65127: LD_VAR 0 18
65131: PUSH
65132: LD_VAR 0 19
65136: PUSH
65137: LD_VAR 0 20
65141: PUSH
65142: LD_VAR 0 21
65146: PUSH
65147: LD_VAR 0 22
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: PUSH
65160: LD_VAR 0 4
65164: PUSH
65165: LD_INT 1
65167: PLUS
65168: ARRAY
65169: ST_TO_ADDR
65170: GO 65237
65172: LD_INT 3
65174: DOUBLE
65175: EQUAL
65176: IFTRUE 65180
65178: GO 65236
65180: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65181: LD_ADDR_VAR 0 9
65185: PUSH
65186: LD_VAR 0 23
65190: PUSH
65191: LD_VAR 0 24
65195: PUSH
65196: LD_VAR 0 25
65200: PUSH
65201: LD_VAR 0 26
65205: PUSH
65206: LD_VAR 0 27
65210: PUSH
65211: LD_VAR 0 28
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: PUSH
65224: LD_VAR 0 4
65228: PUSH
65229: LD_INT 1
65231: PLUS
65232: ARRAY
65233: ST_TO_ADDR
65234: GO 65237
65236: POP
65237: GO 65792
65239: LD_INT 2
65241: DOUBLE
65242: EQUAL
65243: IFTRUE 65253
65245: LD_INT 3
65247: DOUBLE
65248: EQUAL
65249: IFTRUE 65253
65251: GO 65309
65253: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65254: LD_ADDR_VAR 0 9
65258: PUSH
65259: LD_VAR 0 29
65263: PUSH
65264: LD_VAR 0 30
65268: PUSH
65269: LD_VAR 0 31
65273: PUSH
65274: LD_VAR 0 32
65278: PUSH
65279: LD_VAR 0 33
65283: PUSH
65284: LD_VAR 0 34
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: PUSH
65297: LD_VAR 0 4
65301: PUSH
65302: LD_INT 1
65304: PLUS
65305: ARRAY
65306: ST_TO_ADDR
65307: GO 65792
65309: LD_INT 16
65311: DOUBLE
65312: EQUAL
65313: IFTRUE 65371
65315: LD_INT 17
65317: DOUBLE
65318: EQUAL
65319: IFTRUE 65371
65321: LD_INT 18
65323: DOUBLE
65324: EQUAL
65325: IFTRUE 65371
65327: LD_INT 19
65329: DOUBLE
65330: EQUAL
65331: IFTRUE 65371
65333: LD_INT 22
65335: DOUBLE
65336: EQUAL
65337: IFTRUE 65371
65339: LD_INT 20
65341: DOUBLE
65342: EQUAL
65343: IFTRUE 65371
65345: LD_INT 21
65347: DOUBLE
65348: EQUAL
65349: IFTRUE 65371
65351: LD_INT 23
65353: DOUBLE
65354: EQUAL
65355: IFTRUE 65371
65357: LD_INT 24
65359: DOUBLE
65360: EQUAL
65361: IFTRUE 65371
65363: LD_INT 25
65365: DOUBLE
65366: EQUAL
65367: IFTRUE 65371
65369: GO 65427
65371: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65372: LD_ADDR_VAR 0 9
65376: PUSH
65377: LD_VAR 0 35
65381: PUSH
65382: LD_VAR 0 36
65386: PUSH
65387: LD_VAR 0 37
65391: PUSH
65392: LD_VAR 0 38
65396: PUSH
65397: LD_VAR 0 39
65401: PUSH
65402: LD_VAR 0 40
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: PUSH
65415: LD_VAR 0 4
65419: PUSH
65420: LD_INT 1
65422: PLUS
65423: ARRAY
65424: ST_TO_ADDR
65425: GO 65792
65427: LD_INT 6
65429: DOUBLE
65430: EQUAL
65431: IFTRUE 65483
65433: LD_INT 7
65435: DOUBLE
65436: EQUAL
65437: IFTRUE 65483
65439: LD_INT 8
65441: DOUBLE
65442: EQUAL
65443: IFTRUE 65483
65445: LD_INT 13
65447: DOUBLE
65448: EQUAL
65449: IFTRUE 65483
65451: LD_INT 12
65453: DOUBLE
65454: EQUAL
65455: IFTRUE 65483
65457: LD_INT 15
65459: DOUBLE
65460: EQUAL
65461: IFTRUE 65483
65463: LD_INT 11
65465: DOUBLE
65466: EQUAL
65467: IFTRUE 65483
65469: LD_INT 14
65471: DOUBLE
65472: EQUAL
65473: IFTRUE 65483
65475: LD_INT 10
65477: DOUBLE
65478: EQUAL
65479: IFTRUE 65483
65481: GO 65539
65483: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65484: LD_ADDR_VAR 0 9
65488: PUSH
65489: LD_VAR 0 41
65493: PUSH
65494: LD_VAR 0 42
65498: PUSH
65499: LD_VAR 0 43
65503: PUSH
65504: LD_VAR 0 44
65508: PUSH
65509: LD_VAR 0 45
65513: PUSH
65514: LD_VAR 0 46
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: PUSH
65527: LD_VAR 0 4
65531: PUSH
65532: LD_INT 1
65534: PLUS
65535: ARRAY
65536: ST_TO_ADDR
65537: GO 65792
65539: LD_INT 36
65541: DOUBLE
65542: EQUAL
65543: IFTRUE 65547
65545: GO 65603
65547: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65548: LD_ADDR_VAR 0 9
65552: PUSH
65553: LD_VAR 0 47
65557: PUSH
65558: LD_VAR 0 48
65562: PUSH
65563: LD_VAR 0 49
65567: PUSH
65568: LD_VAR 0 50
65572: PUSH
65573: LD_VAR 0 51
65577: PUSH
65578: LD_VAR 0 52
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: PUSH
65591: LD_VAR 0 4
65595: PUSH
65596: LD_INT 1
65598: PLUS
65599: ARRAY
65600: ST_TO_ADDR
65601: GO 65792
65603: LD_INT 4
65605: DOUBLE
65606: EQUAL
65607: IFTRUE 65629
65609: LD_INT 5
65611: DOUBLE
65612: EQUAL
65613: IFTRUE 65629
65615: LD_INT 34
65617: DOUBLE
65618: EQUAL
65619: IFTRUE 65629
65621: LD_INT 37
65623: DOUBLE
65624: EQUAL
65625: IFTRUE 65629
65627: GO 65685
65629: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65630: LD_ADDR_VAR 0 9
65634: PUSH
65635: LD_VAR 0 53
65639: PUSH
65640: LD_VAR 0 54
65644: PUSH
65645: LD_VAR 0 55
65649: PUSH
65650: LD_VAR 0 56
65654: PUSH
65655: LD_VAR 0 57
65659: PUSH
65660: LD_VAR 0 58
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: PUSH
65673: LD_VAR 0 4
65677: PUSH
65678: LD_INT 1
65680: PLUS
65681: ARRAY
65682: ST_TO_ADDR
65683: GO 65792
65685: LD_INT 31
65687: DOUBLE
65688: EQUAL
65689: IFTRUE 65735
65691: LD_INT 32
65693: DOUBLE
65694: EQUAL
65695: IFTRUE 65735
65697: LD_INT 33
65699: DOUBLE
65700: EQUAL
65701: IFTRUE 65735
65703: LD_INT 27
65705: DOUBLE
65706: EQUAL
65707: IFTRUE 65735
65709: LD_INT 26
65711: DOUBLE
65712: EQUAL
65713: IFTRUE 65735
65715: LD_INT 28
65717: DOUBLE
65718: EQUAL
65719: IFTRUE 65735
65721: LD_INT 29
65723: DOUBLE
65724: EQUAL
65725: IFTRUE 65735
65727: LD_INT 30
65729: DOUBLE
65730: EQUAL
65731: IFTRUE 65735
65733: GO 65791
65735: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65736: LD_ADDR_VAR 0 9
65740: PUSH
65741: LD_VAR 0 59
65745: PUSH
65746: LD_VAR 0 60
65750: PUSH
65751: LD_VAR 0 61
65755: PUSH
65756: LD_VAR 0 62
65760: PUSH
65761: LD_VAR 0 63
65765: PUSH
65766: LD_VAR 0 64
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: PUSH
65779: LD_VAR 0 4
65783: PUSH
65784: LD_INT 1
65786: PLUS
65787: ARRAY
65788: ST_TO_ADDR
65789: GO 65792
65791: POP
// temp_list2 = [ ] ;
65792: LD_ADDR_VAR 0 10
65796: PUSH
65797: EMPTY
65798: ST_TO_ADDR
// for i in temp_list do
65799: LD_ADDR_VAR 0 8
65803: PUSH
65804: LD_VAR 0 9
65808: PUSH
65809: FOR_IN
65810: IFFALSE 65862
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65812: LD_ADDR_VAR 0 10
65816: PUSH
65817: LD_VAR 0 10
65821: PUSH
65822: LD_VAR 0 8
65826: PUSH
65827: LD_INT 1
65829: ARRAY
65830: PUSH
65831: LD_VAR 0 2
65835: PLUS
65836: PUSH
65837: LD_VAR 0 8
65841: PUSH
65842: LD_INT 2
65844: ARRAY
65845: PUSH
65846: LD_VAR 0 3
65850: PLUS
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: EMPTY
65857: LIST
65858: ADD
65859: ST_TO_ADDR
65860: GO 65809
65862: POP
65863: POP
// result = temp_list2 ;
65864: LD_ADDR_VAR 0 7
65868: PUSH
65869: LD_VAR 0 10
65873: ST_TO_ADDR
// end ;
65874: LD_VAR 0 7
65878: RET
// export function EnemyInRange ( unit , dist ) ; begin
65879: LD_INT 0
65881: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65882: LD_ADDR_VAR 0 3
65886: PUSH
65887: LD_VAR 0 1
65891: PPUSH
65892: CALL_OW 255
65896: PPUSH
65897: LD_VAR 0 1
65901: PPUSH
65902: CALL_OW 250
65906: PPUSH
65907: LD_VAR 0 1
65911: PPUSH
65912: CALL_OW 251
65916: PPUSH
65917: LD_VAR 0 2
65921: PPUSH
65922: CALL 39136 0 4
65926: PUSH
65927: LD_INT 4
65929: ARRAY
65930: ST_TO_ADDR
// end ;
65931: LD_VAR 0 3
65935: RET
// export function PlayerSeeMe ( unit ) ; begin
65936: LD_INT 0
65938: PPUSH
// result := See ( your_side , unit ) ;
65939: LD_ADDR_VAR 0 2
65943: PUSH
65944: LD_OWVAR 2
65948: PPUSH
65949: LD_VAR 0 1
65953: PPUSH
65954: CALL_OW 292
65958: ST_TO_ADDR
// end ;
65959: LD_VAR 0 2
65963: RET
// export function ReverseDir ( unit ) ; begin
65964: LD_INT 0
65966: PPUSH
// if not unit then
65967: LD_VAR 0 1
65971: NOT
65972: IFFALSE 65976
// exit ;
65974: GO 65999
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65976: LD_ADDR_VAR 0 2
65980: PUSH
65981: LD_VAR 0 1
65985: PPUSH
65986: CALL_OW 254
65990: PUSH
65991: LD_INT 3
65993: PLUS
65994: PUSH
65995: LD_INT 6
65997: MOD
65998: ST_TO_ADDR
// end ;
65999: LD_VAR 0 2
66003: RET
// export function ReverseArray ( array ) ; var i ; begin
66004: LD_INT 0
66006: PPUSH
66007: PPUSH
// if not array then
66008: LD_VAR 0 1
66012: NOT
66013: IFFALSE 66017
// exit ;
66015: GO 66072
// result := [ ] ;
66017: LD_ADDR_VAR 0 2
66021: PUSH
66022: EMPTY
66023: ST_TO_ADDR
// for i := array downto 1 do
66024: LD_ADDR_VAR 0 3
66028: PUSH
66029: DOUBLE
66030: LD_VAR 0 1
66034: INC
66035: ST_TO_ADDR
66036: LD_INT 1
66038: PUSH
66039: FOR_DOWNTO
66040: IFFALSE 66070
// result := Join ( result , array [ i ] ) ;
66042: LD_ADDR_VAR 0 2
66046: PUSH
66047: LD_VAR 0 2
66051: PPUSH
66052: LD_VAR 0 1
66056: PUSH
66057: LD_VAR 0 3
66061: ARRAY
66062: PPUSH
66063: CALL 70914 0 2
66067: ST_TO_ADDR
66068: GO 66039
66070: POP
66071: POP
// end ;
66072: LD_VAR 0 2
66076: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66077: LD_INT 0
66079: PPUSH
66080: PPUSH
66081: PPUSH
66082: PPUSH
66083: PPUSH
66084: PPUSH
// if not unit or not hexes then
66085: LD_VAR 0 1
66089: NOT
66090: IFTRUE 66099
66092: PUSH
66093: LD_VAR 0 2
66097: NOT
66098: OR
66099: IFFALSE 66103
// exit ;
66101: GO 66226
// dist := 9999 ;
66103: LD_ADDR_VAR 0 5
66107: PUSH
66108: LD_INT 9999
66110: ST_TO_ADDR
// for i = 1 to hexes do
66111: LD_ADDR_VAR 0 4
66115: PUSH
66116: DOUBLE
66117: LD_INT 1
66119: DEC
66120: ST_TO_ADDR
66121: LD_VAR 0 2
66125: PUSH
66126: FOR_TO
66127: IFFALSE 66214
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66129: LD_ADDR_VAR 0 6
66133: PUSH
66134: LD_VAR 0 1
66138: PPUSH
66139: LD_VAR 0 2
66143: PUSH
66144: LD_VAR 0 4
66148: ARRAY
66149: PUSH
66150: LD_INT 1
66152: ARRAY
66153: PPUSH
66154: LD_VAR 0 2
66158: PUSH
66159: LD_VAR 0 4
66163: ARRAY
66164: PUSH
66165: LD_INT 2
66167: ARRAY
66168: PPUSH
66169: CALL_OW 297
66173: ST_TO_ADDR
// if tdist < dist then
66174: LD_VAR 0 6
66178: PUSH
66179: LD_VAR 0 5
66183: LESS
66184: IFFALSE 66212
// begin hex := hexes [ i ] ;
66186: LD_ADDR_VAR 0 8
66190: PUSH
66191: LD_VAR 0 2
66195: PUSH
66196: LD_VAR 0 4
66200: ARRAY
66201: ST_TO_ADDR
// dist := tdist ;
66202: LD_ADDR_VAR 0 5
66206: PUSH
66207: LD_VAR 0 6
66211: ST_TO_ADDR
// end ; end ;
66212: GO 66126
66214: POP
66215: POP
// result := hex ;
66216: LD_ADDR_VAR 0 3
66220: PUSH
66221: LD_VAR 0 8
66225: ST_TO_ADDR
// end ;
66226: LD_VAR 0 3
66230: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66231: LD_INT 0
66233: PPUSH
66234: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66235: LD_VAR 0 1
66239: NOT
66240: IFTRUE 66279
66242: PUSH
66243: LD_VAR 0 1
66247: PUSH
66248: LD_INT 21
66250: PUSH
66251: LD_INT 2
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 23
66260: PUSH
66261: LD_INT 2
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PPUSH
66272: CALL_OW 69
66276: IN
66277: NOT
66278: OR
66279: IFFALSE 66283
// exit ;
66281: GO 66330
// for i = 1 to 3 do
66283: LD_ADDR_VAR 0 3
66287: PUSH
66288: DOUBLE
66289: LD_INT 1
66291: DEC
66292: ST_TO_ADDR
66293: LD_INT 3
66295: PUSH
66296: FOR_TO
66297: IFFALSE 66328
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66299: LD_VAR 0 1
66303: PPUSH
66304: CALL_OW 250
66308: PPUSH
66309: LD_VAR 0 1
66313: PPUSH
66314: CALL_OW 251
66318: PPUSH
66319: LD_INT 1
66321: PPUSH
66322: CALL_OW 453
66326: GO 66296
66328: POP
66329: POP
// end ;
66330: LD_VAR 0 2
66334: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66335: LD_INT 0
66337: PPUSH
66338: PPUSH
66339: PPUSH
66340: PPUSH
66341: PPUSH
66342: PPUSH
// if not unit or not enemy_unit then
66343: LD_VAR 0 1
66347: NOT
66348: IFTRUE 66357
66350: PUSH
66351: LD_VAR 0 2
66355: NOT
66356: OR
66357: IFFALSE 66361
// exit ;
66359: GO 66832
// if GetLives ( i ) < 250 then
66361: LD_VAR 0 4
66365: PPUSH
66366: CALL_OW 256
66370: PUSH
66371: LD_INT 250
66373: LESS
66374: IFFALSE 66387
// begin ComAutodestruct ( i ) ;
66376: LD_VAR 0 4
66380: PPUSH
66381: CALL 66231 0 1
// exit ;
66385: GO 66832
// end ; x := GetX ( enemy_unit ) ;
66387: LD_ADDR_VAR 0 7
66391: PUSH
66392: LD_VAR 0 2
66396: PPUSH
66397: CALL_OW 250
66401: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66402: LD_ADDR_VAR 0 8
66406: PUSH
66407: LD_VAR 0 2
66411: PPUSH
66412: CALL_OW 251
66416: ST_TO_ADDR
// if not x or not y then
66417: LD_VAR 0 7
66421: NOT
66422: IFTRUE 66431
66424: PUSH
66425: LD_VAR 0 8
66429: NOT
66430: OR
66431: IFFALSE 66435
// exit ;
66433: GO 66832
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66435: LD_ADDR_VAR 0 6
66439: PUSH
66440: LD_VAR 0 7
66444: PPUSH
66445: LD_INT 0
66447: PPUSH
66448: LD_INT 4
66450: PPUSH
66451: CALL_OW 272
66455: PUSH
66456: LD_VAR 0 8
66460: PPUSH
66461: LD_INT 0
66463: PPUSH
66464: LD_INT 4
66466: PPUSH
66467: CALL_OW 273
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_VAR 0 7
66480: PPUSH
66481: LD_INT 1
66483: PPUSH
66484: LD_INT 4
66486: PPUSH
66487: CALL_OW 272
66491: PUSH
66492: LD_VAR 0 8
66496: PPUSH
66497: LD_INT 1
66499: PPUSH
66500: LD_INT 4
66502: PPUSH
66503: CALL_OW 273
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_VAR 0 7
66516: PPUSH
66517: LD_INT 2
66519: PPUSH
66520: LD_INT 4
66522: PPUSH
66523: CALL_OW 272
66527: PUSH
66528: LD_VAR 0 8
66532: PPUSH
66533: LD_INT 2
66535: PPUSH
66536: LD_INT 4
66538: PPUSH
66539: CALL_OW 273
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_VAR 0 7
66552: PPUSH
66553: LD_INT 3
66555: PPUSH
66556: LD_INT 4
66558: PPUSH
66559: CALL_OW 272
66563: PUSH
66564: LD_VAR 0 8
66568: PPUSH
66569: LD_INT 3
66571: PPUSH
66572: LD_INT 4
66574: PPUSH
66575: CALL_OW 273
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_VAR 0 7
66588: PPUSH
66589: LD_INT 4
66591: PPUSH
66592: LD_INT 4
66594: PPUSH
66595: CALL_OW 272
66599: PUSH
66600: LD_VAR 0 8
66604: PPUSH
66605: LD_INT 4
66607: PPUSH
66608: LD_INT 4
66610: PPUSH
66611: CALL_OW 273
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_VAR 0 7
66624: PPUSH
66625: LD_INT 5
66627: PPUSH
66628: LD_INT 4
66630: PPUSH
66631: CALL_OW 272
66635: PUSH
66636: LD_VAR 0 8
66640: PPUSH
66641: LD_INT 5
66643: PPUSH
66644: LD_INT 4
66646: PPUSH
66647: CALL_OW 273
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: ST_TO_ADDR
// for i = tmp downto 1 do
66664: LD_ADDR_VAR 0 4
66668: PUSH
66669: DOUBLE
66670: LD_VAR 0 6
66674: INC
66675: ST_TO_ADDR
66676: LD_INT 1
66678: PUSH
66679: FOR_DOWNTO
66680: IFFALSE 66783
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66682: LD_VAR 0 6
66686: PUSH
66687: LD_VAR 0 4
66691: ARRAY
66692: PUSH
66693: LD_INT 1
66695: ARRAY
66696: PPUSH
66697: LD_VAR 0 6
66701: PUSH
66702: LD_VAR 0 4
66706: ARRAY
66707: PUSH
66708: LD_INT 2
66710: ARRAY
66711: PPUSH
66712: CALL_OW 488
66716: NOT
66717: IFTRUE 66759
66719: PUSH
66720: LD_VAR 0 6
66724: PUSH
66725: LD_VAR 0 4
66729: ARRAY
66730: PUSH
66731: LD_INT 1
66733: ARRAY
66734: PPUSH
66735: LD_VAR 0 6
66739: PUSH
66740: LD_VAR 0 4
66744: ARRAY
66745: PUSH
66746: LD_INT 2
66748: ARRAY
66749: PPUSH
66750: CALL_OW 428
66754: PUSH
66755: LD_INT 0
66757: NONEQUAL
66758: OR
66759: IFFALSE 66781
// tmp := Delete ( tmp , i ) ;
66761: LD_ADDR_VAR 0 6
66765: PUSH
66766: LD_VAR 0 6
66770: PPUSH
66771: LD_VAR 0 4
66775: PPUSH
66776: CALL_OW 3
66780: ST_TO_ADDR
66781: GO 66679
66783: POP
66784: POP
// j := GetClosestHex ( unit , tmp ) ;
66785: LD_ADDR_VAR 0 5
66789: PUSH
66790: LD_VAR 0 1
66794: PPUSH
66795: LD_VAR 0 6
66799: PPUSH
66800: CALL 66077 0 2
66804: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66805: LD_VAR 0 1
66809: PPUSH
66810: LD_VAR 0 5
66814: PUSH
66815: LD_INT 1
66817: ARRAY
66818: PPUSH
66819: LD_VAR 0 5
66823: PUSH
66824: LD_INT 2
66826: ARRAY
66827: PPUSH
66828: CALL_OW 111
// end ;
66832: LD_VAR 0 3
66836: RET
// export function PrepareApemanSoldier ( ) ; begin
66837: LD_INT 0
66839: PPUSH
// uc_nation := 0 ;
66840: LD_ADDR_OWVAR 21
66844: PUSH
66845: LD_INT 0
66847: ST_TO_ADDR
// hc_sex := sex_male ;
66848: LD_ADDR_OWVAR 27
66852: PUSH
66853: LD_INT 1
66855: ST_TO_ADDR
// hc_name :=  ;
66856: LD_ADDR_OWVAR 26
66860: PUSH
66861: LD_STRING 
66863: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66864: LD_ADDR_OWVAR 28
66868: PUSH
66869: LD_INT 15
66871: ST_TO_ADDR
// hc_gallery :=  ;
66872: LD_ADDR_OWVAR 33
66876: PUSH
66877: LD_STRING 
66879: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66880: LD_ADDR_OWVAR 31
66884: PUSH
66885: LD_INT 0
66887: PPUSH
66888: LD_INT 3
66890: PPUSH
66891: CALL_OW 12
66895: PUSH
66896: LD_INT 0
66898: PPUSH
66899: LD_INT 3
66901: PPUSH
66902: CALL_OW 12
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66919: LD_ADDR_OWVAR 29
66923: PUSH
66924: LD_INT 12
66926: PUSH
66927: LD_INT 12
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: ST_TO_ADDR
// end ;
66934: LD_VAR 0 1
66938: RET
// export function PrepareApemanEngineer ( ) ; begin
66939: LD_INT 0
66941: PPUSH
// uc_nation := 0 ;
66942: LD_ADDR_OWVAR 21
66946: PUSH
66947: LD_INT 0
66949: ST_TO_ADDR
// hc_sex := sex_male ;
66950: LD_ADDR_OWVAR 27
66954: PUSH
66955: LD_INT 1
66957: ST_TO_ADDR
// hc_name :=  ;
66958: LD_ADDR_OWVAR 26
66962: PUSH
66963: LD_STRING 
66965: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66966: LD_ADDR_OWVAR 28
66970: PUSH
66971: LD_INT 16
66973: ST_TO_ADDR
// hc_gallery :=  ;
66974: LD_ADDR_OWVAR 33
66978: PUSH
66979: LD_STRING 
66981: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66982: LD_ADDR_OWVAR 31
66986: PUSH
66987: LD_INT 0
66989: PPUSH
66990: LD_INT 3
66992: PPUSH
66993: CALL_OW 12
66997: PUSH
66998: LD_INT 0
67000: PPUSH
67001: LD_INT 3
67003: PPUSH
67004: CALL_OW 12
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67021: LD_ADDR_OWVAR 29
67025: PUSH
67026: LD_INT 12
67028: PUSH
67029: LD_INT 12
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: ST_TO_ADDR
// end ;
67036: LD_VAR 0 1
67040: RET
// export function PrepareApeman ( agressivity ) ; begin
67041: LD_INT 0
67043: PPUSH
// uc_side := 0 ;
67044: LD_ADDR_OWVAR 20
67048: PUSH
67049: LD_INT 0
67051: ST_TO_ADDR
// uc_nation := 0 ;
67052: LD_ADDR_OWVAR 21
67056: PUSH
67057: LD_INT 0
67059: ST_TO_ADDR
// hc_sex := sex_male ;
67060: LD_ADDR_OWVAR 27
67064: PUSH
67065: LD_INT 1
67067: ST_TO_ADDR
// hc_class := class_apeman ;
67068: LD_ADDR_OWVAR 28
67072: PUSH
67073: LD_INT 12
67075: ST_TO_ADDR
// hc_gallery :=  ;
67076: LD_ADDR_OWVAR 33
67080: PUSH
67081: LD_STRING 
67083: ST_TO_ADDR
// hc_name :=  ;
67084: LD_ADDR_OWVAR 26
67088: PUSH
67089: LD_STRING 
67091: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67092: LD_ADDR_OWVAR 29
67096: PUSH
67097: LD_INT 12
67099: PUSH
67100: LD_INT 12
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: ST_TO_ADDR
// if agressivity = 0 then
67107: LD_VAR 0 1
67111: PUSH
67112: LD_INT 0
67114: EQUAL
67115: IFFALSE 67127
// hc_agressivity := 0 else
67117: LD_ADDR_OWVAR 35
67121: PUSH
67122: LD_INT 0
67124: ST_TO_ADDR
67125: GO 67148
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67127: LD_ADDR_OWVAR 35
67131: PUSH
67132: LD_VAR 0 1
67136: NEG
67137: PPUSH
67138: LD_VAR 0 1
67142: PPUSH
67143: CALL_OW 12
67147: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67148: LD_ADDR_OWVAR 31
67152: PUSH
67153: LD_INT 0
67155: PPUSH
67156: LD_INT 3
67158: PPUSH
67159: CALL_OW 12
67163: PUSH
67164: LD_INT 0
67166: PPUSH
67167: LD_INT 3
67169: PPUSH
67170: CALL_OW 12
67174: PUSH
67175: LD_INT 0
67177: PUSH
67178: LD_INT 0
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: ST_TO_ADDR
// end ;
67187: LD_VAR 0 2
67191: RET
// export function PrepareTiger ( agressivity ) ; begin
67192: LD_INT 0
67194: PPUSH
// uc_side := 0 ;
67195: LD_ADDR_OWVAR 20
67199: PUSH
67200: LD_INT 0
67202: ST_TO_ADDR
// uc_nation := 0 ;
67203: LD_ADDR_OWVAR 21
67207: PUSH
67208: LD_INT 0
67210: ST_TO_ADDR
// InitHc ;
67211: CALL_OW 19
// hc_class := class_tiger ;
67215: LD_ADDR_OWVAR 28
67219: PUSH
67220: LD_INT 14
67222: ST_TO_ADDR
// hc_gallery :=  ;
67223: LD_ADDR_OWVAR 33
67227: PUSH
67228: LD_STRING 
67230: ST_TO_ADDR
// hc_name :=  ;
67231: LD_ADDR_OWVAR 26
67235: PUSH
67236: LD_STRING 
67238: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67239: LD_ADDR_OWVAR 35
67243: PUSH
67244: LD_VAR 0 1
67248: NEG
67249: PPUSH
67250: LD_VAR 0 1
67254: PPUSH
67255: CALL_OW 12
67259: ST_TO_ADDR
// end ;
67260: LD_VAR 0 2
67264: RET
// export function PrepareEnchidna ( ) ; begin
67265: LD_INT 0
67267: PPUSH
// uc_side := 0 ;
67268: LD_ADDR_OWVAR 20
67272: PUSH
67273: LD_INT 0
67275: ST_TO_ADDR
// uc_nation := 0 ;
67276: LD_ADDR_OWVAR 21
67280: PUSH
67281: LD_INT 0
67283: ST_TO_ADDR
// InitHc ;
67284: CALL_OW 19
// hc_class := class_baggie ;
67288: LD_ADDR_OWVAR 28
67292: PUSH
67293: LD_INT 13
67295: ST_TO_ADDR
// hc_gallery :=  ;
67296: LD_ADDR_OWVAR 33
67300: PUSH
67301: LD_STRING 
67303: ST_TO_ADDR
// hc_name :=  ;
67304: LD_ADDR_OWVAR 26
67308: PUSH
67309: LD_STRING 
67311: ST_TO_ADDR
// end ;
67312: LD_VAR 0 1
67316: RET
// export function PrepareFrog ( ) ; begin
67317: LD_INT 0
67319: PPUSH
// uc_side := 0 ;
67320: LD_ADDR_OWVAR 20
67324: PUSH
67325: LD_INT 0
67327: ST_TO_ADDR
// uc_nation := 0 ;
67328: LD_ADDR_OWVAR 21
67332: PUSH
67333: LD_INT 0
67335: ST_TO_ADDR
// InitHc ;
67336: CALL_OW 19
// hc_class := class_frog ;
67340: LD_ADDR_OWVAR 28
67344: PUSH
67345: LD_INT 19
67347: ST_TO_ADDR
// hc_gallery :=  ;
67348: LD_ADDR_OWVAR 33
67352: PUSH
67353: LD_STRING 
67355: ST_TO_ADDR
// hc_name :=  ;
67356: LD_ADDR_OWVAR 26
67360: PUSH
67361: LD_STRING 
67363: ST_TO_ADDR
// end ;
67364: LD_VAR 0 1
67368: RET
// export function PrepareFish ( ) ; begin
67369: LD_INT 0
67371: PPUSH
// uc_side := 0 ;
67372: LD_ADDR_OWVAR 20
67376: PUSH
67377: LD_INT 0
67379: ST_TO_ADDR
// uc_nation := 0 ;
67380: LD_ADDR_OWVAR 21
67384: PUSH
67385: LD_INT 0
67387: ST_TO_ADDR
// InitHc ;
67388: CALL_OW 19
// hc_class := class_fish ;
67392: LD_ADDR_OWVAR 28
67396: PUSH
67397: LD_INT 20
67399: ST_TO_ADDR
// hc_gallery :=  ;
67400: LD_ADDR_OWVAR 33
67404: PUSH
67405: LD_STRING 
67407: ST_TO_ADDR
// hc_name :=  ;
67408: LD_ADDR_OWVAR 26
67412: PUSH
67413: LD_STRING 
67415: ST_TO_ADDR
// end ;
67416: LD_VAR 0 1
67420: RET
// export function PrepareBird ( ) ; begin
67421: LD_INT 0
67423: PPUSH
// uc_side := 0 ;
67424: LD_ADDR_OWVAR 20
67428: PUSH
67429: LD_INT 0
67431: ST_TO_ADDR
// uc_nation := 0 ;
67432: LD_ADDR_OWVAR 21
67436: PUSH
67437: LD_INT 0
67439: ST_TO_ADDR
// InitHc ;
67440: CALL_OW 19
// hc_class := class_phororhacos ;
67444: LD_ADDR_OWVAR 28
67448: PUSH
67449: LD_INT 18
67451: ST_TO_ADDR
// hc_gallery :=  ;
67452: LD_ADDR_OWVAR 33
67456: PUSH
67457: LD_STRING 
67459: ST_TO_ADDR
// hc_name :=  ;
67460: LD_ADDR_OWVAR 26
67464: PUSH
67465: LD_STRING 
67467: ST_TO_ADDR
// end ;
67468: LD_VAR 0 1
67472: RET
// export function PrepareHorse ( ) ; begin
67473: LD_INT 0
67475: PPUSH
// uc_side := 0 ;
67476: LD_ADDR_OWVAR 20
67480: PUSH
67481: LD_INT 0
67483: ST_TO_ADDR
// uc_nation := 0 ;
67484: LD_ADDR_OWVAR 21
67488: PUSH
67489: LD_INT 0
67491: ST_TO_ADDR
// InitHc ;
67492: CALL_OW 19
// hc_class := class_horse ;
67496: LD_ADDR_OWVAR 28
67500: PUSH
67501: LD_INT 21
67503: ST_TO_ADDR
// hc_gallery :=  ;
67504: LD_ADDR_OWVAR 33
67508: PUSH
67509: LD_STRING 
67511: ST_TO_ADDR
// hc_name :=  ;
67512: LD_ADDR_OWVAR 26
67516: PUSH
67517: LD_STRING 
67519: ST_TO_ADDR
// end ;
67520: LD_VAR 0 1
67524: RET
// export function PrepareMastodont ( ) ; begin
67525: LD_INT 0
67527: PPUSH
// uc_side := 0 ;
67528: LD_ADDR_OWVAR 20
67532: PUSH
67533: LD_INT 0
67535: ST_TO_ADDR
// uc_nation := 0 ;
67536: LD_ADDR_OWVAR 21
67540: PUSH
67541: LD_INT 0
67543: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67544: LD_ADDR_OWVAR 37
67548: PUSH
67549: LD_INT 31
67551: ST_TO_ADDR
// vc_control := control_rider ;
67552: LD_ADDR_OWVAR 38
67556: PUSH
67557: LD_INT 4
67559: ST_TO_ADDR
// end ;
67560: LD_VAR 0 1
67564: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67565: LD_INT 0
67567: PPUSH
67568: PPUSH
67569: PPUSH
// uc_side = 0 ;
67570: LD_ADDR_OWVAR 20
67574: PUSH
67575: LD_INT 0
67577: ST_TO_ADDR
// uc_nation = 0 ;
67578: LD_ADDR_OWVAR 21
67582: PUSH
67583: LD_INT 0
67585: ST_TO_ADDR
// InitHc_All ( ) ;
67586: CALL_OW 584
// InitVc ;
67590: CALL_OW 20
// if mastodonts then
67594: LD_VAR 0 6
67598: IFFALSE 67665
// for i = 1 to mastodonts do
67600: LD_ADDR_VAR 0 11
67604: PUSH
67605: DOUBLE
67606: LD_INT 1
67608: DEC
67609: ST_TO_ADDR
67610: LD_VAR 0 6
67614: PUSH
67615: FOR_TO
67616: IFFALSE 67663
// begin vc_chassis := 31 ;
67618: LD_ADDR_OWVAR 37
67622: PUSH
67623: LD_INT 31
67625: ST_TO_ADDR
// vc_control := control_rider ;
67626: LD_ADDR_OWVAR 38
67630: PUSH
67631: LD_INT 4
67633: ST_TO_ADDR
// animal := CreateVehicle ;
67634: LD_ADDR_VAR 0 12
67638: PUSH
67639: CALL_OW 45
67643: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67644: LD_VAR 0 12
67648: PPUSH
67649: LD_VAR 0 8
67653: PPUSH
67654: LD_INT 0
67656: PPUSH
67657: CALL 69807 0 3
// end ;
67661: GO 67615
67663: POP
67664: POP
// if horses then
67665: LD_VAR 0 5
67669: IFFALSE 67736
// for i = 1 to horses do
67671: LD_ADDR_VAR 0 11
67675: PUSH
67676: DOUBLE
67677: LD_INT 1
67679: DEC
67680: ST_TO_ADDR
67681: LD_VAR 0 5
67685: PUSH
67686: FOR_TO
67687: IFFALSE 67734
// begin hc_class := 21 ;
67689: LD_ADDR_OWVAR 28
67693: PUSH
67694: LD_INT 21
67696: ST_TO_ADDR
// hc_gallery :=  ;
67697: LD_ADDR_OWVAR 33
67701: PUSH
67702: LD_STRING 
67704: ST_TO_ADDR
// animal := CreateHuman ;
67705: LD_ADDR_VAR 0 12
67709: PUSH
67710: CALL_OW 44
67714: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67715: LD_VAR 0 12
67719: PPUSH
67720: LD_VAR 0 8
67724: PPUSH
67725: LD_INT 0
67727: PPUSH
67728: CALL 69807 0 3
// end ;
67732: GO 67686
67734: POP
67735: POP
// if birds then
67736: LD_VAR 0 1
67740: IFFALSE 67807
// for i = 1 to birds do
67742: LD_ADDR_VAR 0 11
67746: PUSH
67747: DOUBLE
67748: LD_INT 1
67750: DEC
67751: ST_TO_ADDR
67752: LD_VAR 0 1
67756: PUSH
67757: FOR_TO
67758: IFFALSE 67805
// begin hc_class := 18 ;
67760: LD_ADDR_OWVAR 28
67764: PUSH
67765: LD_INT 18
67767: ST_TO_ADDR
// hc_gallery =  ;
67768: LD_ADDR_OWVAR 33
67772: PUSH
67773: LD_STRING 
67775: ST_TO_ADDR
// animal := CreateHuman ;
67776: LD_ADDR_VAR 0 12
67780: PUSH
67781: CALL_OW 44
67785: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67786: LD_VAR 0 12
67790: PPUSH
67791: LD_VAR 0 8
67795: PPUSH
67796: LD_INT 0
67798: PPUSH
67799: CALL 69807 0 3
// end ;
67803: GO 67757
67805: POP
67806: POP
// if tigers then
67807: LD_VAR 0 2
67811: IFFALSE 67895
// for i = 1 to tigers do
67813: LD_ADDR_VAR 0 11
67817: PUSH
67818: DOUBLE
67819: LD_INT 1
67821: DEC
67822: ST_TO_ADDR
67823: LD_VAR 0 2
67827: PUSH
67828: FOR_TO
67829: IFFALSE 67893
// begin hc_class = class_tiger ;
67831: LD_ADDR_OWVAR 28
67835: PUSH
67836: LD_INT 14
67838: ST_TO_ADDR
// hc_gallery =  ;
67839: LD_ADDR_OWVAR 33
67843: PUSH
67844: LD_STRING 
67846: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67847: LD_ADDR_OWVAR 35
67851: PUSH
67852: LD_INT 7
67854: NEG
67855: PPUSH
67856: LD_INT 7
67858: PPUSH
67859: CALL_OW 12
67863: ST_TO_ADDR
// animal := CreateHuman ;
67864: LD_ADDR_VAR 0 12
67868: PUSH
67869: CALL_OW 44
67873: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67874: LD_VAR 0 12
67878: PPUSH
67879: LD_VAR 0 8
67883: PPUSH
67884: LD_INT 0
67886: PPUSH
67887: CALL 69807 0 3
// end ;
67891: GO 67828
67893: POP
67894: POP
// if apemans then
67895: LD_VAR 0 3
67899: IFFALSE 68022
// for i = 1 to apemans do
67901: LD_ADDR_VAR 0 11
67905: PUSH
67906: DOUBLE
67907: LD_INT 1
67909: DEC
67910: ST_TO_ADDR
67911: LD_VAR 0 3
67915: PUSH
67916: FOR_TO
67917: IFFALSE 68020
// begin hc_class = class_apeman ;
67919: LD_ADDR_OWVAR 28
67923: PUSH
67924: LD_INT 12
67926: ST_TO_ADDR
// hc_gallery =  ;
67927: LD_ADDR_OWVAR 33
67931: PUSH
67932: LD_STRING 
67934: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67935: LD_ADDR_OWVAR 35
67939: PUSH
67940: LD_INT 2
67942: NEG
67943: PPUSH
67944: LD_INT 2
67946: PPUSH
67947: CALL_OW 12
67951: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67952: LD_ADDR_OWVAR 31
67956: PUSH
67957: LD_INT 1
67959: PPUSH
67960: LD_INT 3
67962: PPUSH
67963: CALL_OW 12
67967: PUSH
67968: LD_INT 1
67970: PPUSH
67971: LD_INT 3
67973: PPUSH
67974: CALL_OW 12
67978: PUSH
67979: LD_INT 0
67981: PUSH
67982: LD_INT 0
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: ST_TO_ADDR
// animal := CreateHuman ;
67991: LD_ADDR_VAR 0 12
67995: PUSH
67996: CALL_OW 44
68000: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68001: LD_VAR 0 12
68005: PPUSH
68006: LD_VAR 0 8
68010: PPUSH
68011: LD_INT 0
68013: PPUSH
68014: CALL 69807 0 3
// end ;
68018: GO 67916
68020: POP
68021: POP
// if enchidnas then
68022: LD_VAR 0 4
68026: IFFALSE 68093
// for i = 1 to enchidnas do
68028: LD_ADDR_VAR 0 11
68032: PUSH
68033: DOUBLE
68034: LD_INT 1
68036: DEC
68037: ST_TO_ADDR
68038: LD_VAR 0 4
68042: PUSH
68043: FOR_TO
68044: IFFALSE 68091
// begin hc_class = 13 ;
68046: LD_ADDR_OWVAR 28
68050: PUSH
68051: LD_INT 13
68053: ST_TO_ADDR
// hc_gallery =  ;
68054: LD_ADDR_OWVAR 33
68058: PUSH
68059: LD_STRING 
68061: ST_TO_ADDR
// animal := CreateHuman ;
68062: LD_ADDR_VAR 0 12
68066: PUSH
68067: CALL_OW 44
68071: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68072: LD_VAR 0 12
68076: PPUSH
68077: LD_VAR 0 8
68081: PPUSH
68082: LD_INT 0
68084: PPUSH
68085: CALL 69807 0 3
// end ;
68089: GO 68043
68091: POP
68092: POP
// if fishes then
68093: LD_VAR 0 7
68097: IFFALSE 68164
// for i = 1 to fishes do
68099: LD_ADDR_VAR 0 11
68103: PUSH
68104: DOUBLE
68105: LD_INT 1
68107: DEC
68108: ST_TO_ADDR
68109: LD_VAR 0 7
68113: PUSH
68114: FOR_TO
68115: IFFALSE 68162
// begin hc_class = 20 ;
68117: LD_ADDR_OWVAR 28
68121: PUSH
68122: LD_INT 20
68124: ST_TO_ADDR
// hc_gallery =  ;
68125: LD_ADDR_OWVAR 33
68129: PUSH
68130: LD_STRING 
68132: ST_TO_ADDR
// animal := CreateHuman ;
68133: LD_ADDR_VAR 0 12
68137: PUSH
68138: CALL_OW 44
68142: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68143: LD_VAR 0 12
68147: PPUSH
68148: LD_VAR 0 9
68152: PPUSH
68153: LD_INT 0
68155: PPUSH
68156: CALL 69807 0 3
// end ;
68160: GO 68114
68162: POP
68163: POP
// end ;
68164: LD_VAR 0 10
68168: RET
// export function WantHeal ( sci , unit ) ; begin
68169: LD_INT 0
68171: PPUSH
// if GetTaskList ( sci ) > 0 then
68172: LD_VAR 0 1
68176: PPUSH
68177: CALL_OW 437
68181: PUSH
68182: LD_INT 0
68184: GREATER
68185: IFFALSE 68257
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68187: LD_VAR 0 1
68191: PPUSH
68192: CALL_OW 437
68196: PUSH
68197: LD_INT 1
68199: ARRAY
68200: PUSH
68201: LD_INT 1
68203: ARRAY
68204: PUSH
68205: LD_STRING l
68207: EQUAL
68208: IFFALSE 68235
68210: PUSH
68211: LD_VAR 0 1
68215: PPUSH
68216: CALL_OW 437
68220: PUSH
68221: LD_INT 1
68223: ARRAY
68224: PUSH
68225: LD_INT 4
68227: ARRAY
68228: PUSH
68229: LD_VAR 0 2
68233: EQUAL
68234: AND
68235: IFFALSE 68247
// result := true else
68237: LD_ADDR_VAR 0 3
68241: PUSH
68242: LD_INT 1
68244: ST_TO_ADDR
68245: GO 68255
// result := false ;
68247: LD_ADDR_VAR 0 3
68251: PUSH
68252: LD_INT 0
68254: ST_TO_ADDR
// end else
68255: GO 68265
// result := false ;
68257: LD_ADDR_VAR 0 3
68261: PUSH
68262: LD_INT 0
68264: ST_TO_ADDR
// end ;
68265: LD_VAR 0 3
68269: RET
// export function HealTarget ( sci ) ; begin
68270: LD_INT 0
68272: PPUSH
// if not sci then
68273: LD_VAR 0 1
68277: NOT
68278: IFFALSE 68282
// exit ;
68280: GO 68347
// result := 0 ;
68282: LD_ADDR_VAR 0 2
68286: PUSH
68287: LD_INT 0
68289: ST_TO_ADDR
// if GetTaskList ( sci ) then
68290: LD_VAR 0 1
68294: PPUSH
68295: CALL_OW 437
68299: IFFALSE 68347
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68301: LD_VAR 0 1
68305: PPUSH
68306: CALL_OW 437
68310: PUSH
68311: LD_INT 1
68313: ARRAY
68314: PUSH
68315: LD_INT 1
68317: ARRAY
68318: PUSH
68319: LD_STRING l
68321: EQUAL
68322: IFFALSE 68347
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68324: LD_ADDR_VAR 0 2
68328: PUSH
68329: LD_VAR 0 1
68333: PPUSH
68334: CALL_OW 437
68338: PUSH
68339: LD_INT 1
68341: ARRAY
68342: PUSH
68343: LD_INT 4
68345: ARRAY
68346: ST_TO_ADDR
// end ;
68347: LD_VAR 0 2
68351: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68352: LD_INT 0
68354: PPUSH
68355: PPUSH
68356: PPUSH
68357: PPUSH
// if not base_units then
68358: LD_VAR 0 1
68362: NOT
68363: IFFALSE 68367
// exit ;
68365: GO 68454
// result := false ;
68367: LD_ADDR_VAR 0 2
68371: PUSH
68372: LD_INT 0
68374: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68375: LD_ADDR_VAR 0 5
68379: PUSH
68380: LD_VAR 0 1
68384: PPUSH
68385: LD_INT 21
68387: PUSH
68388: LD_INT 3
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PPUSH
68395: CALL_OW 72
68399: ST_TO_ADDR
// if not tmp then
68400: LD_VAR 0 5
68404: NOT
68405: IFFALSE 68409
// exit ;
68407: GO 68454
// for i in tmp do
68409: LD_ADDR_VAR 0 3
68413: PUSH
68414: LD_VAR 0 5
68418: PUSH
68419: FOR_IN
68420: IFFALSE 68452
// begin result := EnemyInRange ( i , 22 ) ;
68422: LD_ADDR_VAR 0 2
68426: PUSH
68427: LD_VAR 0 3
68431: PPUSH
68432: LD_INT 22
68434: PPUSH
68435: CALL 65879 0 2
68439: ST_TO_ADDR
// if result then
68440: LD_VAR 0 2
68444: IFFALSE 68450
// exit ;
68446: POP
68447: POP
68448: GO 68454
// end ;
68450: GO 68419
68452: POP
68453: POP
// end ;
68454: LD_VAR 0 2
68458: RET
// export function FilterByTag ( units , tag ) ; begin
68459: LD_INT 0
68461: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68462: LD_ADDR_VAR 0 3
68466: PUSH
68467: LD_VAR 0 1
68471: PPUSH
68472: LD_INT 120
68474: PUSH
68475: LD_VAR 0 2
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PPUSH
68484: CALL_OW 72
68488: ST_TO_ADDR
// end ;
68489: LD_VAR 0 3
68493: RET
// export function IsDriver ( un ) ; begin
68494: LD_INT 0
68496: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68497: LD_ADDR_VAR 0 2
68501: PUSH
68502: LD_VAR 0 1
68506: PUSH
68507: LD_INT 55
68509: PUSH
68510: EMPTY
68511: LIST
68512: PPUSH
68513: CALL_OW 69
68517: IN
68518: ST_TO_ADDR
// end ;
68519: LD_VAR 0 2
68523: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68524: LD_INT 0
68526: PPUSH
68527: PPUSH
// list := [ ] ;
68528: LD_ADDR_VAR 0 5
68532: PUSH
68533: EMPTY
68534: ST_TO_ADDR
// case d of 0 :
68535: LD_VAR 0 3
68539: PUSH
68540: LD_INT 0
68542: DOUBLE
68543: EQUAL
68544: IFTRUE 68548
68546: GO 68681
68548: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68549: LD_ADDR_VAR 0 5
68553: PUSH
68554: LD_VAR 0 1
68558: PUSH
68559: LD_INT 4
68561: MINUS
68562: PUSH
68563: LD_VAR 0 2
68567: PUSH
68568: LD_INT 4
68570: MINUS
68571: PUSH
68572: LD_INT 2
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: LIST
68579: PUSH
68580: LD_VAR 0 1
68584: PUSH
68585: LD_INT 3
68587: MINUS
68588: PUSH
68589: LD_VAR 0 2
68593: PUSH
68594: LD_INT 1
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: LIST
68601: PUSH
68602: LD_VAR 0 1
68606: PUSH
68607: LD_INT 4
68609: PLUS
68610: PUSH
68611: LD_VAR 0 2
68615: PUSH
68616: LD_INT 4
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: LIST
68623: PUSH
68624: LD_VAR 0 1
68628: PUSH
68629: LD_INT 3
68631: PLUS
68632: PUSH
68633: LD_VAR 0 2
68637: PUSH
68638: LD_INT 3
68640: PLUS
68641: PUSH
68642: LD_INT 5
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: LIST
68649: PUSH
68650: LD_VAR 0 1
68654: PUSH
68655: LD_VAR 0 2
68659: PUSH
68660: LD_INT 4
68662: PLUS
68663: PUSH
68664: LD_INT 0
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: LIST
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: ST_TO_ADDR
// end ; 1 :
68679: GO 69379
68681: LD_INT 1
68683: DOUBLE
68684: EQUAL
68685: IFTRUE 68689
68687: GO 68822
68689: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68690: LD_ADDR_VAR 0 5
68694: PUSH
68695: LD_VAR 0 1
68699: PUSH
68700: LD_VAR 0 2
68704: PUSH
68705: LD_INT 4
68707: MINUS
68708: PUSH
68709: LD_INT 3
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: LIST
68716: PUSH
68717: LD_VAR 0 1
68721: PUSH
68722: LD_INT 3
68724: MINUS
68725: PUSH
68726: LD_VAR 0 2
68730: PUSH
68731: LD_INT 3
68733: MINUS
68734: PUSH
68735: LD_INT 2
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: LIST
68742: PUSH
68743: LD_VAR 0 1
68747: PUSH
68748: LD_INT 4
68750: MINUS
68751: PUSH
68752: LD_VAR 0 2
68756: PUSH
68757: LD_INT 1
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: LIST
68764: PUSH
68765: LD_VAR 0 1
68769: PUSH
68770: LD_VAR 0 2
68774: PUSH
68775: LD_INT 3
68777: PLUS
68778: PUSH
68779: LD_INT 0
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: LIST
68786: PUSH
68787: LD_VAR 0 1
68791: PUSH
68792: LD_INT 4
68794: PLUS
68795: PUSH
68796: LD_VAR 0 2
68800: PUSH
68801: LD_INT 4
68803: PLUS
68804: PUSH
68805: LD_INT 5
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: LIST
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: ST_TO_ADDR
// end ; 2 :
68820: GO 69379
68822: LD_INT 2
68824: DOUBLE
68825: EQUAL
68826: IFTRUE 68830
68828: GO 68959
68830: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68831: LD_ADDR_VAR 0 5
68835: PUSH
68836: LD_VAR 0 1
68840: PUSH
68841: LD_VAR 0 2
68845: PUSH
68846: LD_INT 3
68848: MINUS
68849: PUSH
68850: LD_INT 3
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: LIST
68857: PUSH
68858: LD_VAR 0 1
68862: PUSH
68863: LD_INT 4
68865: PLUS
68866: PUSH
68867: LD_VAR 0 2
68871: PUSH
68872: LD_INT 4
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: LIST
68879: PUSH
68880: LD_VAR 0 1
68884: PUSH
68885: LD_VAR 0 2
68889: PUSH
68890: LD_INT 4
68892: PLUS
68893: PUSH
68894: LD_INT 0
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: LIST
68901: PUSH
68902: LD_VAR 0 1
68906: PUSH
68907: LD_INT 3
68909: MINUS
68910: PUSH
68911: LD_VAR 0 2
68915: PUSH
68916: LD_INT 1
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: LIST
68923: PUSH
68924: LD_VAR 0 1
68928: PUSH
68929: LD_INT 4
68931: MINUS
68932: PUSH
68933: LD_VAR 0 2
68937: PUSH
68938: LD_INT 4
68940: MINUS
68941: PUSH
68942: LD_INT 2
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: LIST
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: ST_TO_ADDR
// end ; 3 :
68957: GO 69379
68959: LD_INT 3
68961: DOUBLE
68962: EQUAL
68963: IFTRUE 68967
68965: GO 69100
68967: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68968: LD_ADDR_VAR 0 5
68972: PUSH
68973: LD_VAR 0 1
68977: PUSH
68978: LD_INT 3
68980: PLUS
68981: PUSH
68982: LD_VAR 0 2
68986: PUSH
68987: LD_INT 4
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: LIST
68994: PUSH
68995: LD_VAR 0 1
68999: PUSH
69000: LD_INT 4
69002: PLUS
69003: PUSH
69004: LD_VAR 0 2
69008: PUSH
69009: LD_INT 4
69011: PLUS
69012: PUSH
69013: LD_INT 5
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: LIST
69020: PUSH
69021: LD_VAR 0 1
69025: PUSH
69026: LD_INT 4
69028: MINUS
69029: PUSH
69030: LD_VAR 0 2
69034: PUSH
69035: LD_INT 1
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: LIST
69042: PUSH
69043: LD_VAR 0 1
69047: PUSH
69048: LD_VAR 0 2
69052: PUSH
69053: LD_INT 4
69055: MINUS
69056: PUSH
69057: LD_INT 3
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: LIST
69064: PUSH
69065: LD_VAR 0 1
69069: PUSH
69070: LD_INT 3
69072: MINUS
69073: PUSH
69074: LD_VAR 0 2
69078: PUSH
69079: LD_INT 3
69081: MINUS
69082: PUSH
69083: LD_INT 2
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: LIST
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: ST_TO_ADDR
// end ; 4 :
69098: GO 69379
69100: LD_INT 4
69102: DOUBLE
69103: EQUAL
69104: IFTRUE 69108
69106: GO 69241
69108: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69109: LD_ADDR_VAR 0 5
69113: PUSH
69114: LD_VAR 0 1
69118: PUSH
69119: LD_VAR 0 2
69123: PUSH
69124: LD_INT 4
69126: PLUS
69127: PUSH
69128: LD_INT 0
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: LIST
69135: PUSH
69136: LD_VAR 0 1
69140: PUSH
69141: LD_INT 3
69143: PLUS
69144: PUSH
69145: LD_VAR 0 2
69149: PUSH
69150: LD_INT 3
69152: PLUS
69153: PUSH
69154: LD_INT 5
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: LIST
69161: PUSH
69162: LD_VAR 0 1
69166: PUSH
69167: LD_INT 4
69169: PLUS
69170: PUSH
69171: LD_VAR 0 2
69175: PUSH
69176: LD_INT 4
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: LIST
69183: PUSH
69184: LD_VAR 0 1
69188: PUSH
69189: LD_VAR 0 2
69193: PUSH
69194: LD_INT 3
69196: MINUS
69197: PUSH
69198: LD_INT 3
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: LIST
69205: PUSH
69206: LD_VAR 0 1
69210: PUSH
69211: LD_INT 4
69213: MINUS
69214: PUSH
69215: LD_VAR 0 2
69219: PUSH
69220: LD_INT 4
69222: MINUS
69223: PUSH
69224: LD_INT 2
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: LIST
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: ST_TO_ADDR
// end ; 5 :
69239: GO 69379
69241: LD_INT 5
69243: DOUBLE
69244: EQUAL
69245: IFTRUE 69249
69247: GO 69378
69249: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69250: LD_ADDR_VAR 0 5
69254: PUSH
69255: LD_VAR 0 1
69259: PUSH
69260: LD_INT 4
69262: MINUS
69263: PUSH
69264: LD_VAR 0 2
69268: PUSH
69269: LD_INT 1
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: LIST
69276: PUSH
69277: LD_VAR 0 1
69281: PUSH
69282: LD_VAR 0 2
69286: PUSH
69287: LD_INT 4
69289: MINUS
69290: PUSH
69291: LD_INT 3
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: LIST
69298: PUSH
69299: LD_VAR 0 1
69303: PUSH
69304: LD_INT 4
69306: PLUS
69307: PUSH
69308: LD_VAR 0 2
69312: PUSH
69313: LD_INT 4
69315: PLUS
69316: PUSH
69317: LD_INT 5
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: LIST
69324: PUSH
69325: LD_VAR 0 1
69329: PUSH
69330: LD_INT 3
69332: PLUS
69333: PUSH
69334: LD_VAR 0 2
69338: PUSH
69339: LD_INT 4
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: LIST
69346: PUSH
69347: LD_VAR 0 1
69351: PUSH
69352: LD_VAR 0 2
69356: PUSH
69357: LD_INT 3
69359: PLUS
69360: PUSH
69361: LD_INT 0
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: LIST
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: ST_TO_ADDR
// end ; end ;
69376: GO 69379
69378: POP
// result := list ;
69379: LD_ADDR_VAR 0 4
69383: PUSH
69384: LD_VAR 0 5
69388: ST_TO_ADDR
// end ;
69389: LD_VAR 0 4
69393: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69394: LD_INT 0
69396: PPUSH
69397: PPUSH
69398: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69399: LD_VAR 0 1
69403: NOT
69404: IFTRUE 69432
69406: PUSH
69407: LD_VAR 0 2
69411: PUSH
69412: LD_INT 1
69414: PUSH
69415: LD_INT 2
69417: PUSH
69418: LD_INT 3
69420: PUSH
69421: LD_INT 4
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: IN
69430: NOT
69431: OR
69432: IFFALSE 69436
// exit ;
69434: GO 69519
// tmp := [ ] ;
69436: LD_ADDR_VAR 0 5
69440: PUSH
69441: EMPTY
69442: ST_TO_ADDR
// for i in units do
69443: LD_ADDR_VAR 0 4
69447: PUSH
69448: LD_VAR 0 1
69452: PUSH
69453: FOR_IN
69454: IFFALSE 69488
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69456: LD_ADDR_VAR 0 5
69460: PUSH
69461: LD_VAR 0 5
69465: PPUSH
69466: LD_VAR 0 4
69470: PPUSH
69471: LD_VAR 0 2
69475: PPUSH
69476: CALL_OW 259
69480: PPUSH
69481: CALL 70914 0 2
69485: ST_TO_ADDR
69486: GO 69453
69488: POP
69489: POP
// if not tmp then
69490: LD_VAR 0 5
69494: NOT
69495: IFFALSE 69499
// exit ;
69497: GO 69519
// result := SortListByListDesc ( units , tmp ) ;
69499: LD_ADDR_VAR 0 3
69503: PUSH
69504: LD_VAR 0 1
69508: PPUSH
69509: LD_VAR 0 5
69513: PPUSH
69514: CALL_OW 77
69518: ST_TO_ADDR
// end ;
69519: LD_VAR 0 3
69523: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69524: LD_INT 0
69526: PPUSH
69527: PPUSH
69528: PPUSH
// result := false ;
69529: LD_ADDR_VAR 0 3
69533: PUSH
69534: LD_INT 0
69536: ST_TO_ADDR
// if not building then
69537: LD_VAR 0 2
69541: NOT
69542: IFFALSE 69546
// exit ;
69544: GO 69690
// x := GetX ( building ) ;
69546: LD_ADDR_VAR 0 4
69550: PUSH
69551: LD_VAR 0 2
69555: PPUSH
69556: CALL_OW 250
69560: ST_TO_ADDR
// y := GetY ( building ) ;
69561: LD_ADDR_VAR 0 5
69565: PUSH
69566: LD_VAR 0 2
69570: PPUSH
69571: CALL_OW 251
69575: ST_TO_ADDR
// if not x or not y then
69576: LD_VAR 0 4
69580: NOT
69581: IFTRUE 69590
69583: PUSH
69584: LD_VAR 0 5
69588: NOT
69589: OR
69590: IFFALSE 69594
// exit ;
69592: GO 69690
// if GetTaskList ( unit ) then
69594: LD_VAR 0 1
69598: PPUSH
69599: CALL_OW 437
69603: IFFALSE 69690
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69605: LD_STRING e
69607: PUSH
69608: LD_VAR 0 1
69612: PPUSH
69613: CALL_OW 437
69617: PUSH
69618: LD_INT 1
69620: ARRAY
69621: PUSH
69622: LD_INT 1
69624: ARRAY
69625: EQUAL
69626: IFFALSE 69653
69628: PUSH
69629: LD_VAR 0 4
69633: PUSH
69634: LD_VAR 0 1
69638: PPUSH
69639: CALL_OW 437
69643: PUSH
69644: LD_INT 1
69646: ARRAY
69647: PUSH
69648: LD_INT 2
69650: ARRAY
69651: EQUAL
69652: AND
69653: IFFALSE 69680
69655: PUSH
69656: LD_VAR 0 5
69660: PUSH
69661: LD_VAR 0 1
69665: PPUSH
69666: CALL_OW 437
69670: PUSH
69671: LD_INT 1
69673: ARRAY
69674: PUSH
69675: LD_INT 3
69677: ARRAY
69678: EQUAL
69679: AND
69680: IFFALSE 69690
// result := true end ;
69682: LD_ADDR_VAR 0 3
69686: PUSH
69687: LD_INT 1
69689: ST_TO_ADDR
// end ;
69690: LD_VAR 0 3
69694: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69695: LD_INT 0
69697: PPUSH
// result := false ;
69698: LD_ADDR_VAR 0 4
69702: PUSH
69703: LD_INT 0
69705: ST_TO_ADDR
// if GetTaskList ( unit ) then
69706: LD_VAR 0 1
69710: PPUSH
69711: CALL_OW 437
69715: IFFALSE 69802
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69717: LD_STRING M
69719: PUSH
69720: LD_VAR 0 1
69724: PPUSH
69725: CALL_OW 437
69729: PUSH
69730: LD_INT 1
69732: ARRAY
69733: PUSH
69734: LD_INT 1
69736: ARRAY
69737: EQUAL
69738: IFFALSE 69765
69740: PUSH
69741: LD_VAR 0 2
69745: PUSH
69746: LD_VAR 0 1
69750: PPUSH
69751: CALL_OW 437
69755: PUSH
69756: LD_INT 1
69758: ARRAY
69759: PUSH
69760: LD_INT 2
69762: ARRAY
69763: EQUAL
69764: AND
69765: IFFALSE 69792
69767: PUSH
69768: LD_VAR 0 3
69772: PUSH
69773: LD_VAR 0 1
69777: PPUSH
69778: CALL_OW 437
69782: PUSH
69783: LD_INT 1
69785: ARRAY
69786: PUSH
69787: LD_INT 3
69789: ARRAY
69790: EQUAL
69791: AND
69792: IFFALSE 69802
// result := true ;
69794: LD_ADDR_VAR 0 4
69798: PUSH
69799: LD_INT 1
69801: ST_TO_ADDR
// end ; end ;
69802: LD_VAR 0 4
69806: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69807: LD_INT 0
69809: PPUSH
69810: PPUSH
69811: PPUSH
69812: PPUSH
// if not unit or not area then
69813: LD_VAR 0 1
69817: NOT
69818: IFTRUE 69827
69820: PUSH
69821: LD_VAR 0 2
69825: NOT
69826: OR
69827: IFFALSE 69831
// exit ;
69829: GO 70007
// tmp := AreaToList ( area , i ) ;
69831: LD_ADDR_VAR 0 6
69835: PUSH
69836: LD_VAR 0 2
69840: PPUSH
69841: LD_VAR 0 5
69845: PPUSH
69846: CALL_OW 517
69850: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69851: LD_ADDR_VAR 0 5
69855: PUSH
69856: DOUBLE
69857: LD_INT 1
69859: DEC
69860: ST_TO_ADDR
69861: LD_VAR 0 6
69865: PUSH
69866: LD_INT 1
69868: ARRAY
69869: PUSH
69870: FOR_TO
69871: IFFALSE 70005
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69873: LD_ADDR_VAR 0 7
69877: PUSH
69878: LD_VAR 0 6
69882: PUSH
69883: LD_INT 1
69885: ARRAY
69886: PUSH
69887: LD_VAR 0 5
69891: ARRAY
69892: PUSH
69893: LD_VAR 0 6
69897: PUSH
69898: LD_INT 2
69900: ARRAY
69901: PUSH
69902: LD_VAR 0 5
69906: ARRAY
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
69912: LD_INT 92
69914: PUSH
69915: LD_VAR 0 7
69919: PUSH
69920: LD_INT 1
69922: ARRAY
69923: PUSH
69924: LD_VAR 0 7
69928: PUSH
69929: LD_INT 2
69931: ARRAY
69932: PUSH
69933: LD_INT 2
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: PPUSH
69942: CALL_OW 69
69946: PUSH
69947: LD_INT 0
69949: EQUAL
69950: IFFALSE 70003
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69952: LD_VAR 0 1
69956: PPUSH
69957: LD_VAR 0 7
69961: PUSH
69962: LD_INT 1
69964: ARRAY
69965: PPUSH
69966: LD_VAR 0 7
69970: PUSH
69971: LD_INT 2
69973: ARRAY
69974: PPUSH
69975: LD_VAR 0 3
69979: PPUSH
69980: CALL_OW 48
// result := IsPlaced ( unit ) ;
69984: LD_ADDR_VAR 0 4
69988: PUSH
69989: LD_VAR 0 1
69993: PPUSH
69994: CALL_OW 305
69998: ST_TO_ADDR
// exit ;
69999: POP
70000: POP
70001: GO 70007
// end ; end ;
70003: GO 69870
70005: POP
70006: POP
// end ;
70007: LD_VAR 0 4
70011: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70012: LD_INT 0
70014: PPUSH
70015: PPUSH
70016: PPUSH
// if not side or side > 8 then
70017: LD_VAR 0 1
70021: NOT
70022: IFTRUE 70034
70024: PUSH
70025: LD_VAR 0 1
70029: PUSH
70030: LD_INT 8
70032: GREATER
70033: OR
70034: IFFALSE 70038
// exit ;
70036: GO 70225
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70038: LD_ADDR_VAR 0 4
70042: PUSH
70043: LD_INT 22
70045: PUSH
70046: LD_VAR 0 1
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 21
70057: PUSH
70058: LD_INT 3
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PPUSH
70069: CALL_OW 69
70073: ST_TO_ADDR
// if not tmp then
70074: LD_VAR 0 4
70078: NOT
70079: IFFALSE 70083
// exit ;
70081: GO 70225
// enable_addtolog := true ;
70083: LD_ADDR_OWVAR 81
70087: PUSH
70088: LD_INT 1
70090: ST_TO_ADDR
// AddToLog ( [ ) ;
70091: LD_STRING [
70093: PPUSH
70094: CALL_OW 561
// for i in tmp do
70098: LD_ADDR_VAR 0 3
70102: PUSH
70103: LD_VAR 0 4
70107: PUSH
70108: FOR_IN
70109: IFFALSE 70216
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70111: LD_STRING [
70113: PUSH
70114: LD_VAR 0 3
70118: PPUSH
70119: CALL_OW 266
70123: STR
70124: PUSH
70125: LD_STRING , 
70127: STR
70128: PUSH
70129: LD_VAR 0 3
70133: PPUSH
70134: CALL_OW 250
70138: STR
70139: PUSH
70140: LD_STRING , 
70142: STR
70143: PUSH
70144: LD_VAR 0 3
70148: PPUSH
70149: CALL_OW 251
70153: STR
70154: PUSH
70155: LD_STRING , 
70157: STR
70158: PUSH
70159: LD_VAR 0 3
70163: PPUSH
70164: CALL_OW 254
70168: STR
70169: PUSH
70170: LD_STRING , 
70172: STR
70173: PUSH
70174: LD_VAR 0 3
70178: PPUSH
70179: LD_INT 1
70181: PPUSH
70182: CALL_OW 268
70186: STR
70187: PUSH
70188: LD_STRING , 
70190: STR
70191: PUSH
70192: LD_VAR 0 3
70196: PPUSH
70197: LD_INT 2
70199: PPUSH
70200: CALL_OW 268
70204: STR
70205: PUSH
70206: LD_STRING ],
70208: STR
70209: PPUSH
70210: CALL_OW 561
// end ;
70214: GO 70108
70216: POP
70217: POP
// AddToLog ( ]; ) ;
70218: LD_STRING ];
70220: PPUSH
70221: CALL_OW 561
// end ;
70225: LD_VAR 0 2
70229: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70230: LD_INT 0
70232: PPUSH
70233: PPUSH
70234: PPUSH
70235: PPUSH
70236: PPUSH
// if not area or not rate or not max then
70237: LD_VAR 0 1
70241: NOT
70242: IFTRUE 70251
70244: PUSH
70245: LD_VAR 0 2
70249: NOT
70250: OR
70251: IFTRUE 70260
70253: PUSH
70254: LD_VAR 0 4
70258: NOT
70259: OR
70260: IFFALSE 70264
// exit ;
70262: GO 70453
// while 1 do
70264: LD_INT 1
70266: IFFALSE 70453
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70268: LD_ADDR_VAR 0 9
70272: PUSH
70273: LD_VAR 0 1
70277: PPUSH
70278: LD_INT 1
70280: PPUSH
70281: CALL_OW 287
70285: PUSH
70286: LD_INT 10
70288: MUL
70289: ST_TO_ADDR
// r := rate / 10 ;
70290: LD_ADDR_VAR 0 7
70294: PUSH
70295: LD_VAR 0 2
70299: PUSH
70300: LD_INT 10
70302: DIVREAL
70303: ST_TO_ADDR
// time := 1 1$00 ;
70304: LD_ADDR_VAR 0 8
70308: PUSH
70309: LD_INT 2100
70311: ST_TO_ADDR
// if amount < min then
70312: LD_VAR 0 9
70316: PUSH
70317: LD_VAR 0 3
70321: LESS
70322: IFFALSE 70340
// r := r * 2 else
70324: LD_ADDR_VAR 0 7
70328: PUSH
70329: LD_VAR 0 7
70333: PUSH
70334: LD_INT 2
70336: MUL
70337: ST_TO_ADDR
70338: GO 70366
// if amount > max then
70340: LD_VAR 0 9
70344: PUSH
70345: LD_VAR 0 4
70349: GREATER
70350: IFFALSE 70366
// r := r / 2 ;
70352: LD_ADDR_VAR 0 7
70356: PUSH
70357: LD_VAR 0 7
70361: PUSH
70362: LD_INT 2
70364: DIVREAL
70365: ST_TO_ADDR
// time := time / r ;
70366: LD_ADDR_VAR 0 8
70370: PUSH
70371: LD_VAR 0 8
70375: PUSH
70376: LD_VAR 0 7
70380: DIVREAL
70381: ST_TO_ADDR
// if time < 0 then
70382: LD_VAR 0 8
70386: PUSH
70387: LD_INT 0
70389: LESS
70390: IFFALSE 70407
// time := time * - 1 ;
70392: LD_ADDR_VAR 0 8
70396: PUSH
70397: LD_VAR 0 8
70401: PUSH
70402: LD_INT 1
70404: NEG
70405: MUL
70406: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70407: LD_VAR 0 8
70411: PUSH
70412: LD_INT 35
70414: PPUSH
70415: LD_INT 875
70417: PPUSH
70418: CALL_OW 12
70422: PLUS
70423: PPUSH
70424: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70428: LD_INT 1
70430: PPUSH
70431: LD_INT 5
70433: PPUSH
70434: CALL_OW 12
70438: PPUSH
70439: LD_VAR 0 1
70443: PPUSH
70444: LD_INT 1
70446: PPUSH
70447: CALL_OW 55
// end ;
70451: GO 70264
// end ;
70453: LD_VAR 0 5
70457: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70458: LD_INT 0
70460: PPUSH
70461: PPUSH
70462: PPUSH
70463: PPUSH
70464: PPUSH
70465: PPUSH
70466: PPUSH
70467: PPUSH
// if not turrets or not factories then
70468: LD_VAR 0 1
70472: NOT
70473: IFTRUE 70482
70475: PUSH
70476: LD_VAR 0 2
70480: NOT
70481: OR
70482: IFFALSE 70486
// exit ;
70484: GO 70793
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70486: LD_ADDR_VAR 0 10
70490: PUSH
70491: LD_INT 5
70493: PUSH
70494: LD_INT 6
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 2
70503: PUSH
70504: LD_INT 4
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 3
70513: PUSH
70514: LD_INT 5
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 24
70528: PUSH
70529: LD_INT 25
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 23
70538: PUSH
70539: LD_INT 27
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 42
70552: PUSH
70553: LD_INT 43
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 44
70562: PUSH
70563: LD_INT 46
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 45
70572: PUSH
70573: LD_INT 47
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: LIST
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: LIST
70589: ST_TO_ADDR
// result := [ ] ;
70590: LD_ADDR_VAR 0 3
70594: PUSH
70595: EMPTY
70596: ST_TO_ADDR
// for i in turrets do
70597: LD_ADDR_VAR 0 4
70601: PUSH
70602: LD_VAR 0 1
70606: PUSH
70607: FOR_IN
70608: IFFALSE 70791
// begin nat := GetNation ( i ) ;
70610: LD_ADDR_VAR 0 7
70614: PUSH
70615: LD_VAR 0 4
70619: PPUSH
70620: CALL_OW 248
70624: ST_TO_ADDR
// weapon := 0 ;
70625: LD_ADDR_VAR 0 8
70629: PUSH
70630: LD_INT 0
70632: ST_TO_ADDR
// if not nat then
70633: LD_VAR 0 7
70637: NOT
70638: IFFALSE 70642
// continue ;
70640: GO 70607
// for j in list [ nat ] do
70642: LD_ADDR_VAR 0 5
70646: PUSH
70647: LD_VAR 0 10
70651: PUSH
70652: LD_VAR 0 7
70656: ARRAY
70657: PUSH
70658: FOR_IN
70659: IFFALSE 70700
// if GetBWeapon ( i ) = j [ 1 ] then
70661: LD_VAR 0 4
70665: PPUSH
70666: CALL_OW 269
70670: PUSH
70671: LD_VAR 0 5
70675: PUSH
70676: LD_INT 1
70678: ARRAY
70679: EQUAL
70680: IFFALSE 70698
// begin weapon := j [ 2 ] ;
70682: LD_ADDR_VAR 0 8
70686: PUSH
70687: LD_VAR 0 5
70691: PUSH
70692: LD_INT 2
70694: ARRAY
70695: ST_TO_ADDR
// break ;
70696: GO 70700
// end ;
70698: GO 70658
70700: POP
70701: POP
// if not weapon then
70702: LD_VAR 0 8
70706: NOT
70707: IFFALSE 70711
// continue ;
70709: GO 70607
// for k in factories do
70711: LD_ADDR_VAR 0 6
70715: PUSH
70716: LD_VAR 0 2
70720: PUSH
70721: FOR_IN
70722: IFFALSE 70787
// begin weapons := AvailableWeaponList ( k ) ;
70724: LD_ADDR_VAR 0 9
70728: PUSH
70729: LD_VAR 0 6
70733: PPUSH
70734: CALL_OW 478
70738: ST_TO_ADDR
// if not weapons then
70739: LD_VAR 0 9
70743: NOT
70744: IFFALSE 70748
// continue ;
70746: GO 70721
// if weapon in weapons then
70748: LD_VAR 0 8
70752: PUSH
70753: LD_VAR 0 9
70757: IN
70758: IFFALSE 70785
// begin result := [ i , weapon ] ;
70760: LD_ADDR_VAR 0 3
70764: PUSH
70765: LD_VAR 0 4
70769: PUSH
70770: LD_VAR 0 8
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: ST_TO_ADDR
// exit ;
70779: POP
70780: POP
70781: POP
70782: POP
70783: GO 70793
// end ; end ;
70785: GO 70721
70787: POP
70788: POP
// end ;
70789: GO 70607
70791: POP
70792: POP
// end ;
70793: LD_VAR 0 3
70797: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70798: LD_INT 0
70800: PPUSH
// if not side or side > 8 then
70801: LD_VAR 0 3
70805: NOT
70806: IFTRUE 70818
70808: PUSH
70809: LD_VAR 0 3
70813: PUSH
70814: LD_INT 8
70816: GREATER
70817: OR
70818: IFFALSE 70822
// exit ;
70820: GO 70881
// if not range then
70822: LD_VAR 0 4
70826: NOT
70827: IFFALSE 70838
// range := - 12 ;
70829: LD_ADDR_VAR 0 4
70833: PUSH
70834: LD_INT 12
70836: NEG
70837: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70838: LD_VAR 0 1
70842: PPUSH
70843: LD_VAR 0 2
70847: PPUSH
70848: LD_VAR 0 3
70852: PPUSH
70853: LD_VAR 0 4
70857: PPUSH
70858: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70862: LD_VAR 0 1
70866: PPUSH
70867: LD_VAR 0 2
70871: PPUSH
70872: LD_VAR 0 3
70876: PPUSH
70877: CALL_OW 331
// end ;
70881: LD_VAR 0 5
70885: RET
// export function Video ( mode ) ; begin
70886: LD_INT 0
70888: PPUSH
// ingame_video = mode ;
70889: LD_ADDR_OWVAR 52
70893: PUSH
70894: LD_VAR 0 1
70898: ST_TO_ADDR
// interface_hidden = mode ;
70899: LD_ADDR_OWVAR 54
70903: PUSH
70904: LD_VAR 0 1
70908: ST_TO_ADDR
// end ;
70909: LD_VAR 0 2
70913: RET
// export function Join ( array , element ) ; begin
70914: LD_INT 0
70916: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70917: LD_ADDR_VAR 0 3
70921: PUSH
70922: LD_VAR 0 1
70926: PPUSH
70927: LD_VAR 0 1
70931: PUSH
70932: LD_INT 1
70934: PLUS
70935: PPUSH
70936: LD_VAR 0 2
70940: PPUSH
70941: CALL_OW 1
70945: ST_TO_ADDR
// end ;
70946: LD_VAR 0 3
70950: RET
// export function JoinUnion ( array , element ) ; begin
70951: LD_INT 0
70953: PPUSH
// result := array union element ;
70954: LD_ADDR_VAR 0 3
70958: PUSH
70959: LD_VAR 0 1
70963: PUSH
70964: LD_VAR 0 2
70968: UNION
70969: ST_TO_ADDR
// end ;
70970: LD_VAR 0 3
70974: RET
// export function GetBehemoths ( side ) ; begin
70975: LD_INT 0
70977: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70978: LD_ADDR_VAR 0 2
70982: PUSH
70983: LD_INT 22
70985: PUSH
70986: LD_VAR 0 1
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 31
70997: PUSH
70998: LD_INT 25
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PPUSH
71009: CALL_OW 69
71013: ST_TO_ADDR
// end ;
71014: LD_VAR 0 2
71018: RET
// export function Shuffle ( array ) ; var i , index ; begin
71019: LD_INT 0
71021: PPUSH
71022: PPUSH
71023: PPUSH
// result := [ ] ;
71024: LD_ADDR_VAR 0 2
71028: PUSH
71029: EMPTY
71030: ST_TO_ADDR
// if not array then
71031: LD_VAR 0 1
71035: NOT
71036: IFFALSE 71040
// exit ;
71038: GO 71139
// Randomize ;
71040: CALL_OW 10
// for i = array downto 1 do
71044: LD_ADDR_VAR 0 3
71048: PUSH
71049: DOUBLE
71050: LD_VAR 0 1
71054: INC
71055: ST_TO_ADDR
71056: LD_INT 1
71058: PUSH
71059: FOR_DOWNTO
71060: IFFALSE 71137
// begin index := rand ( 1 , array ) ;
71062: LD_ADDR_VAR 0 4
71066: PUSH
71067: LD_INT 1
71069: PPUSH
71070: LD_VAR 0 1
71074: PPUSH
71075: CALL_OW 12
71079: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71080: LD_ADDR_VAR 0 2
71084: PUSH
71085: LD_VAR 0 2
71089: PPUSH
71090: LD_VAR 0 2
71094: PUSH
71095: LD_INT 1
71097: PLUS
71098: PPUSH
71099: LD_VAR 0 1
71103: PUSH
71104: LD_VAR 0 4
71108: ARRAY
71109: PPUSH
71110: CALL_OW 2
71114: ST_TO_ADDR
// array := Delete ( array , index ) ;
71115: LD_ADDR_VAR 0 1
71119: PUSH
71120: LD_VAR 0 1
71124: PPUSH
71125: LD_VAR 0 4
71129: PPUSH
71130: CALL_OW 3
71134: ST_TO_ADDR
// end ;
71135: GO 71059
71137: POP
71138: POP
// end ;
71139: LD_VAR 0 2
71143: RET
// export function GetBaseMaterials ( base ) ; begin
71144: LD_INT 0
71146: PPUSH
// result := [ 0 , 0 , 0 ] ;
71147: LD_ADDR_VAR 0 2
71151: PUSH
71152: LD_INT 0
71154: PUSH
71155: LD_INT 0
71157: PUSH
71158: LD_INT 0
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: LIST
71165: ST_TO_ADDR
// if not base then
71166: LD_VAR 0 1
71170: NOT
71171: IFFALSE 71175
// exit ;
71173: GO 71224
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71175: LD_ADDR_VAR 0 2
71179: PUSH
71180: LD_VAR 0 1
71184: PPUSH
71185: LD_INT 1
71187: PPUSH
71188: CALL_OW 275
71192: PUSH
71193: LD_VAR 0 1
71197: PPUSH
71198: LD_INT 2
71200: PPUSH
71201: CALL_OW 275
71205: PUSH
71206: LD_VAR 0 1
71210: PPUSH
71211: LD_INT 3
71213: PPUSH
71214: CALL_OW 275
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: LIST
71223: ST_TO_ADDR
// end ;
71224: LD_VAR 0 2
71228: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71229: LD_INT 0
71231: PPUSH
71232: PPUSH
// result := array ;
71233: LD_ADDR_VAR 0 3
71237: PUSH
71238: LD_VAR 0 1
71242: ST_TO_ADDR
// if size >= result then
71243: LD_VAR 0 2
71247: PUSH
71248: LD_VAR 0 3
71252: GREATEREQUAL
71253: IFFALSE 71257
// exit ;
71255: GO 71307
// if size then
71257: LD_VAR 0 2
71261: IFFALSE 71307
// for i := array downto size do
71263: LD_ADDR_VAR 0 4
71267: PUSH
71268: DOUBLE
71269: LD_VAR 0 1
71273: INC
71274: ST_TO_ADDR
71275: LD_VAR 0 2
71279: PUSH
71280: FOR_DOWNTO
71281: IFFALSE 71305
// result := Delete ( result , result ) ;
71283: LD_ADDR_VAR 0 3
71287: PUSH
71288: LD_VAR 0 3
71292: PPUSH
71293: LD_VAR 0 3
71297: PPUSH
71298: CALL_OW 3
71302: ST_TO_ADDR
71303: GO 71280
71305: POP
71306: POP
// end ;
71307: LD_VAR 0 3
71311: RET
// export function ComExit ( unit ) ; var tmp ; begin
71312: LD_INT 0
71314: PPUSH
71315: PPUSH
// if not IsInUnit ( unit ) then
71316: LD_VAR 0 1
71320: PPUSH
71321: CALL_OW 310
71325: NOT
71326: IFFALSE 71330
// exit ;
71328: GO 71390
// tmp := IsInUnit ( unit ) ;
71330: LD_ADDR_VAR 0 3
71334: PUSH
71335: LD_VAR 0 1
71339: PPUSH
71340: CALL_OW 310
71344: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71345: LD_VAR 0 3
71349: PPUSH
71350: CALL_OW 247
71354: PUSH
71355: LD_INT 2
71357: EQUAL
71358: IFFALSE 71371
// ComExitVehicle ( unit ) else
71360: LD_VAR 0 1
71364: PPUSH
71365: CALL_OW 121
71369: GO 71380
// ComExitBuilding ( unit ) ;
71371: LD_VAR 0 1
71375: PPUSH
71376: CALL_OW 122
// result := tmp ;
71380: LD_ADDR_VAR 0 2
71384: PUSH
71385: LD_VAR 0 3
71389: ST_TO_ADDR
// end ;
71390: LD_VAR 0 2
71394: RET
// export function ComExitAll ( units ) ; var i ; begin
71395: LD_INT 0
71397: PPUSH
71398: PPUSH
// if not units then
71399: LD_VAR 0 1
71403: NOT
71404: IFFALSE 71408
// exit ;
71406: GO 71434
// for i in units do
71408: LD_ADDR_VAR 0 3
71412: PUSH
71413: LD_VAR 0 1
71417: PUSH
71418: FOR_IN
71419: IFFALSE 71432
// ComExit ( i ) ;
71421: LD_VAR 0 3
71425: PPUSH
71426: CALL 71312 0 1
71430: GO 71418
71432: POP
71433: POP
// end ;
71434: LD_VAR 0 2
71438: RET
// export function ResetHc ; begin
71439: LD_INT 0
71441: PPUSH
// InitHc ;
71442: CALL_OW 19
// hc_importance := 0 ;
71446: LD_ADDR_OWVAR 32
71450: PUSH
71451: LD_INT 0
71453: ST_TO_ADDR
// end ;
71454: LD_VAR 0 1
71458: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71459: LD_INT 0
71461: PPUSH
71462: PPUSH
71463: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71464: LD_ADDR_VAR 0 6
71468: PUSH
71469: LD_VAR 0 1
71473: PUSH
71474: LD_VAR 0 3
71478: PLUS
71479: PUSH
71480: LD_INT 2
71482: DIV
71483: ST_TO_ADDR
// if _x < 0 then
71484: LD_VAR 0 6
71488: PUSH
71489: LD_INT 0
71491: LESS
71492: IFFALSE 71509
// _x := _x * - 1 ;
71494: LD_ADDR_VAR 0 6
71498: PUSH
71499: LD_VAR 0 6
71503: PUSH
71504: LD_INT 1
71506: NEG
71507: MUL
71508: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71509: LD_ADDR_VAR 0 7
71513: PUSH
71514: LD_VAR 0 2
71518: PUSH
71519: LD_VAR 0 4
71523: PLUS
71524: PUSH
71525: LD_INT 2
71527: DIV
71528: ST_TO_ADDR
// if _y < 0 then
71529: LD_VAR 0 7
71533: PUSH
71534: LD_INT 0
71536: LESS
71537: IFFALSE 71554
// _y := _y * - 1 ;
71539: LD_ADDR_VAR 0 7
71543: PUSH
71544: LD_VAR 0 7
71548: PUSH
71549: LD_INT 1
71551: NEG
71552: MUL
71553: ST_TO_ADDR
// result := [ _x , _y ] ;
71554: LD_ADDR_VAR 0 5
71558: PUSH
71559: LD_VAR 0 6
71563: PUSH
71564: LD_VAR 0 7
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: ST_TO_ADDR
// end ;
71573: LD_VAR 0 5
71577: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71578: LD_INT 0
71580: PPUSH
71581: PPUSH
71582: PPUSH
71583: PPUSH
// task := GetTaskList ( unit ) ;
71584: LD_ADDR_VAR 0 7
71588: PUSH
71589: LD_VAR 0 1
71593: PPUSH
71594: CALL_OW 437
71598: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71599: LD_VAR 0 7
71603: NOT
71604: IFFALSE 71623
71606: PUSH
71607: LD_VAR 0 1
71611: PPUSH
71612: LD_VAR 0 2
71616: PPUSH
71617: CALL_OW 308
71621: NOT
71622: AND
71623: IFFALSE 71627
// exit ;
71625: GO 71745
// if IsInArea ( unit , area ) then
71627: LD_VAR 0 1
71631: PPUSH
71632: LD_VAR 0 2
71636: PPUSH
71637: CALL_OW 308
71641: IFFALSE 71659
// begin ComMoveToArea ( unit , goAway ) ;
71643: LD_VAR 0 1
71647: PPUSH
71648: LD_VAR 0 3
71652: PPUSH
71653: CALL_OW 113
// exit ;
71657: GO 71745
// end ; if task [ 1 ] [ 1 ] <> M then
71659: LD_VAR 0 7
71663: PUSH
71664: LD_INT 1
71666: ARRAY
71667: PUSH
71668: LD_INT 1
71670: ARRAY
71671: PUSH
71672: LD_STRING M
71674: NONEQUAL
71675: IFFALSE 71679
// exit ;
71677: GO 71745
// x := task [ 1 ] [ 2 ] ;
71679: LD_ADDR_VAR 0 5
71683: PUSH
71684: LD_VAR 0 7
71688: PUSH
71689: LD_INT 1
71691: ARRAY
71692: PUSH
71693: LD_INT 2
71695: ARRAY
71696: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71697: LD_ADDR_VAR 0 6
71701: PUSH
71702: LD_VAR 0 7
71706: PUSH
71707: LD_INT 1
71709: ARRAY
71710: PUSH
71711: LD_INT 3
71713: ARRAY
71714: ST_TO_ADDR
// if InArea ( x , y , area ) then
71715: LD_VAR 0 5
71719: PPUSH
71720: LD_VAR 0 6
71724: PPUSH
71725: LD_VAR 0 2
71729: PPUSH
71730: CALL_OW 309
71734: IFFALSE 71745
// ComStop ( unit ) ;
71736: LD_VAR 0 1
71740: PPUSH
71741: CALL_OW 141
// end ;
71745: LD_VAR 0 4
71749: RET
// export function Abs ( value ) ; begin
71750: LD_INT 0
71752: PPUSH
// result := value ;
71753: LD_ADDR_VAR 0 2
71757: PUSH
71758: LD_VAR 0 1
71762: ST_TO_ADDR
// if value < 0 then
71763: LD_VAR 0 1
71767: PUSH
71768: LD_INT 0
71770: LESS
71771: IFFALSE 71788
// result := value * - 1 ;
71773: LD_ADDR_VAR 0 2
71777: PUSH
71778: LD_VAR 0 1
71782: PUSH
71783: LD_INT 1
71785: NEG
71786: MUL
71787: ST_TO_ADDR
// end ;
71788: LD_VAR 0 2
71792: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71793: LD_INT 0
71795: PPUSH
71796: PPUSH
71797: PPUSH
71798: PPUSH
71799: PPUSH
71800: PPUSH
71801: PPUSH
71802: PPUSH
// if not unit or not building then
71803: LD_VAR 0 1
71807: NOT
71808: IFTRUE 71817
71810: PUSH
71811: LD_VAR 0 2
71815: NOT
71816: OR
71817: IFFALSE 71821
// exit ;
71819: GO 72049
// x := GetX ( building ) ;
71821: LD_ADDR_VAR 0 4
71825: PUSH
71826: LD_VAR 0 2
71830: PPUSH
71831: CALL_OW 250
71835: ST_TO_ADDR
// y := GetY ( building ) ;
71836: LD_ADDR_VAR 0 6
71840: PUSH
71841: LD_VAR 0 2
71845: PPUSH
71846: CALL_OW 251
71850: ST_TO_ADDR
// d := GetDir ( building ) ;
71851: LD_ADDR_VAR 0 8
71855: PUSH
71856: LD_VAR 0 2
71860: PPUSH
71861: CALL_OW 254
71865: ST_TO_ADDR
// r := 4 ;
71866: LD_ADDR_VAR 0 9
71870: PUSH
71871: LD_INT 4
71873: ST_TO_ADDR
// for i := 1 to 5 do
71874: LD_ADDR_VAR 0 10
71878: PUSH
71879: DOUBLE
71880: LD_INT 1
71882: DEC
71883: ST_TO_ADDR
71884: LD_INT 5
71886: PUSH
71887: FOR_TO
71888: IFFALSE 72047
// begin _x := ShiftX ( x , d , r + i ) ;
71890: LD_ADDR_VAR 0 5
71894: PUSH
71895: LD_VAR 0 4
71899: PPUSH
71900: LD_VAR 0 8
71904: PPUSH
71905: LD_VAR 0 9
71909: PUSH
71910: LD_VAR 0 10
71914: PLUS
71915: PPUSH
71916: CALL_OW 272
71920: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71921: LD_ADDR_VAR 0 7
71925: PUSH
71926: LD_VAR 0 6
71930: PPUSH
71931: LD_VAR 0 8
71935: PPUSH
71936: LD_VAR 0 9
71940: PUSH
71941: LD_VAR 0 10
71945: PLUS
71946: PPUSH
71947: CALL_OW 273
71951: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71952: LD_VAR 0 5
71956: PPUSH
71957: LD_VAR 0 7
71961: PPUSH
71962: CALL_OW 488
71966: IFFALSE 72001
71968: PUSH
71969: LD_VAR 0 5
71973: PPUSH
71974: LD_VAR 0 7
71978: PPUSH
71979: CALL_OW 428
71983: PPUSH
71984: CALL_OW 247
71988: PUSH
71989: LD_INT 3
71991: PUSH
71992: LD_INT 2
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: IN
71999: NOT
72000: AND
72001: IFFALSE 72045
// begin ComMoveXY ( unit , _x , _y ) ;
72003: LD_VAR 0 1
72007: PPUSH
72008: LD_VAR 0 5
72012: PPUSH
72013: LD_VAR 0 7
72017: PPUSH
72018: CALL_OW 111
// result := [ _x , _y ] ;
72022: LD_ADDR_VAR 0 3
72026: PUSH
72027: LD_VAR 0 5
72031: PUSH
72032: LD_VAR 0 7
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: ST_TO_ADDR
// exit ;
72041: POP
72042: POP
72043: GO 72049
// end ; end ;
72045: GO 71887
72047: POP
72048: POP
// end ;
72049: LD_VAR 0 3
72053: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72054: LD_INT 0
72056: PPUSH
72057: PPUSH
72058: PPUSH
// result := 0 ;
72059: LD_ADDR_VAR 0 3
72063: PUSH
72064: LD_INT 0
72066: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72067: LD_VAR 0 1
72071: PUSH
72072: LD_INT 0
72074: LESS
72075: IFTRUE 72087
72077: PUSH
72078: LD_VAR 0 1
72082: PUSH
72083: LD_INT 8
72085: GREATER
72086: OR
72087: IFTRUE 72099
72089: PUSH
72090: LD_VAR 0 2
72094: PUSH
72095: LD_INT 0
72097: LESS
72098: OR
72099: IFTRUE 72111
72101: PUSH
72102: LD_VAR 0 2
72106: PUSH
72107: LD_INT 8
72109: GREATER
72110: OR
72111: IFFALSE 72115
// exit ;
72113: GO 72190
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72115: LD_ADDR_VAR 0 4
72119: PUSH
72120: LD_INT 22
72122: PUSH
72123: LD_VAR 0 2
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PPUSH
72132: CALL_OW 69
72136: PUSH
72137: FOR_IN
72138: IFFALSE 72188
// begin un := UnitShoot ( i ) ;
72140: LD_ADDR_VAR 0 5
72144: PUSH
72145: LD_VAR 0 4
72149: PPUSH
72150: CALL_OW 504
72154: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72155: LD_VAR 0 5
72159: PPUSH
72160: CALL_OW 255
72164: PUSH
72165: LD_VAR 0 1
72169: EQUAL
72170: IFFALSE 72186
// begin result := un ;
72172: LD_ADDR_VAR 0 3
72176: PUSH
72177: LD_VAR 0 5
72181: ST_TO_ADDR
// exit ;
72182: POP
72183: POP
72184: GO 72190
// end ; end ;
72186: GO 72137
72188: POP
72189: POP
// end ;
72190: LD_VAR 0 3
72194: RET
// export function GetCargoBay ( units ) ; begin
72195: LD_INT 0
72197: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72198: LD_ADDR_VAR 0 2
72202: PUSH
72203: LD_VAR 0 1
72207: PPUSH
72208: LD_INT 2
72210: PUSH
72211: LD_INT 34
72213: PUSH
72214: LD_INT 12
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 34
72223: PUSH
72224: LD_INT 51
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 34
72233: PUSH
72234: LD_INT 32
72236: PUSH
72237: EMPTY
72238: LIST
72239: LIST
72240: PUSH
72241: LD_INT 34
72243: PUSH
72244: LD_INT 89
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: PPUSH
72258: CALL_OW 72
72262: ST_TO_ADDR
// end ;
72263: LD_VAR 0 2
72267: RET
// export function Negate ( value ) ; begin
72268: LD_INT 0
72270: PPUSH
// result := not value ;
72271: LD_ADDR_VAR 0 2
72275: PUSH
72276: LD_VAR 0 1
72280: NOT
72281: ST_TO_ADDR
// end ;
72282: LD_VAR 0 2
72286: RET
// export function Inc ( value ) ; begin
72287: LD_INT 0
72289: PPUSH
// result := value + 1 ;
72290: LD_ADDR_VAR 0 2
72294: PUSH
72295: LD_VAR 0 1
72299: PUSH
72300: LD_INT 1
72302: PLUS
72303: ST_TO_ADDR
// end ;
72304: LD_VAR 0 2
72308: RET
// export function Dec ( value ) ; begin
72309: LD_INT 0
72311: PPUSH
// result := value - 1 ;
72312: LD_ADDR_VAR 0 2
72316: PUSH
72317: LD_VAR 0 1
72321: PUSH
72322: LD_INT 1
72324: MINUS
72325: ST_TO_ADDR
// end ;
72326: LD_VAR 0 2
72330: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72331: LD_INT 0
72333: PPUSH
72334: PPUSH
72335: PPUSH
72336: PPUSH
72337: PPUSH
72338: PPUSH
72339: PPUSH
72340: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72341: LD_VAR 0 1
72345: PPUSH
72346: LD_VAR 0 2
72350: PPUSH
72351: CALL_OW 488
72355: NOT
72356: IFTRUE 72375
72358: PUSH
72359: LD_VAR 0 3
72363: PPUSH
72364: LD_VAR 0 4
72368: PPUSH
72369: CALL_OW 488
72373: NOT
72374: OR
72375: IFFALSE 72388
// begin result := - 1 ;
72377: LD_ADDR_VAR 0 5
72381: PUSH
72382: LD_INT 1
72384: NEG
72385: ST_TO_ADDR
// exit ;
72386: GO 72623
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72388: LD_ADDR_VAR 0 12
72392: PUSH
72393: LD_VAR 0 1
72397: PPUSH
72398: LD_VAR 0 2
72402: PPUSH
72403: LD_VAR 0 3
72407: PPUSH
72408: LD_VAR 0 4
72412: PPUSH
72413: CALL 71459 0 4
72417: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72418: LD_ADDR_VAR 0 11
72422: PUSH
72423: LD_VAR 0 1
72427: PPUSH
72428: LD_VAR 0 2
72432: PPUSH
72433: LD_VAR 0 12
72437: PUSH
72438: LD_INT 1
72440: ARRAY
72441: PPUSH
72442: LD_VAR 0 12
72446: PUSH
72447: LD_INT 2
72449: ARRAY
72450: PPUSH
72451: CALL_OW 298
72455: ST_TO_ADDR
// distance := 9999 ;
72456: LD_ADDR_VAR 0 10
72460: PUSH
72461: LD_INT 9999
72463: ST_TO_ADDR
// for i := 0 to 5 do
72464: LD_ADDR_VAR 0 6
72468: PUSH
72469: DOUBLE
72470: LD_INT 0
72472: DEC
72473: ST_TO_ADDR
72474: LD_INT 5
72476: PUSH
72477: FOR_TO
72478: IFFALSE 72621
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72480: LD_ADDR_VAR 0 7
72484: PUSH
72485: LD_VAR 0 1
72489: PPUSH
72490: LD_VAR 0 6
72494: PPUSH
72495: LD_VAR 0 11
72499: PPUSH
72500: CALL_OW 272
72504: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72505: LD_ADDR_VAR 0 8
72509: PUSH
72510: LD_VAR 0 2
72514: PPUSH
72515: LD_VAR 0 6
72519: PPUSH
72520: LD_VAR 0 11
72524: PPUSH
72525: CALL_OW 273
72529: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72530: LD_VAR 0 7
72534: PPUSH
72535: LD_VAR 0 8
72539: PPUSH
72540: CALL_OW 488
72544: NOT
72545: IFFALSE 72549
// continue ;
72547: GO 72477
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72549: LD_ADDR_VAR 0 9
72553: PUSH
72554: LD_VAR 0 12
72558: PUSH
72559: LD_INT 1
72561: ARRAY
72562: PPUSH
72563: LD_VAR 0 12
72567: PUSH
72568: LD_INT 2
72570: ARRAY
72571: PPUSH
72572: LD_VAR 0 7
72576: PPUSH
72577: LD_VAR 0 8
72581: PPUSH
72582: CALL_OW 298
72586: ST_TO_ADDR
// if tmp < distance then
72587: LD_VAR 0 9
72591: PUSH
72592: LD_VAR 0 10
72596: LESS
72597: IFFALSE 72619
// begin result := i ;
72599: LD_ADDR_VAR 0 5
72603: PUSH
72604: LD_VAR 0 6
72608: ST_TO_ADDR
// distance := tmp ;
72609: LD_ADDR_VAR 0 10
72613: PUSH
72614: LD_VAR 0 9
72618: ST_TO_ADDR
// end ; end ;
72619: GO 72477
72621: POP
72622: POP
// end ;
72623: LD_VAR 0 5
72627: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72628: LD_INT 0
72630: PPUSH
72631: PPUSH
// if not driver or not IsInUnit ( driver ) then
72632: LD_VAR 0 1
72636: NOT
72637: IFTRUE 72651
72639: PUSH
72640: LD_VAR 0 1
72644: PPUSH
72645: CALL_OW 310
72649: NOT
72650: OR
72651: IFFALSE 72655
// exit ;
72653: GO 72745
// vehicle := IsInUnit ( driver ) ;
72655: LD_ADDR_VAR 0 3
72659: PUSH
72660: LD_VAR 0 1
72664: PPUSH
72665: CALL_OW 310
72669: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72670: LD_VAR 0 1
72674: PPUSH
72675: LD_STRING \
72677: PUSH
72678: LD_INT 0
72680: PUSH
72681: LD_INT 0
72683: PUSH
72684: LD_INT 0
72686: PUSH
72687: LD_INT 0
72689: PUSH
72690: LD_INT 0
72692: PUSH
72693: LD_INT 0
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: LIST
72704: PUSH
72705: LD_STRING E
72707: PUSH
72708: LD_INT 0
72710: PUSH
72711: LD_INT 0
72713: PUSH
72714: LD_VAR 0 3
72718: PUSH
72719: LD_INT 0
72721: PUSH
72722: LD_INT 0
72724: PUSH
72725: LD_INT 0
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PPUSH
72741: CALL_OW 446
// end ;
72745: LD_VAR 0 2
72749: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72750: LD_INT 0
72752: PPUSH
72753: PPUSH
// if not driver or not IsInUnit ( driver ) then
72754: LD_VAR 0 1
72758: NOT
72759: IFTRUE 72773
72761: PUSH
72762: LD_VAR 0 1
72766: PPUSH
72767: CALL_OW 310
72771: NOT
72772: OR
72773: IFFALSE 72777
// exit ;
72775: GO 72867
// vehicle := IsInUnit ( driver ) ;
72777: LD_ADDR_VAR 0 3
72781: PUSH
72782: LD_VAR 0 1
72786: PPUSH
72787: CALL_OW 310
72791: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72792: LD_VAR 0 1
72796: PPUSH
72797: LD_STRING \
72799: PUSH
72800: LD_INT 0
72802: PUSH
72803: LD_INT 0
72805: PUSH
72806: LD_INT 0
72808: PUSH
72809: LD_INT 0
72811: PUSH
72812: LD_INT 0
72814: PUSH
72815: LD_INT 0
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: PUSH
72827: LD_STRING E
72829: PUSH
72830: LD_INT 0
72832: PUSH
72833: LD_INT 0
72835: PUSH
72836: LD_VAR 0 3
72840: PUSH
72841: LD_INT 0
72843: PUSH
72844: LD_INT 0
72846: PUSH
72847: LD_INT 0
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PPUSH
72863: CALL_OW 447
// end ;
72867: LD_VAR 0 2
72871: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72872: LD_INT 0
72874: PPUSH
72875: PPUSH
72876: PPUSH
// tmp := [ ] ;
72877: LD_ADDR_VAR 0 5
72881: PUSH
72882: EMPTY
72883: ST_TO_ADDR
// for i in units do
72884: LD_ADDR_VAR 0 4
72888: PUSH
72889: LD_VAR 0 1
72893: PUSH
72894: FOR_IN
72895: IFFALSE 72933
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72897: LD_ADDR_VAR 0 5
72901: PUSH
72902: LD_VAR 0 5
72906: PPUSH
72907: LD_VAR 0 5
72911: PUSH
72912: LD_INT 1
72914: PLUS
72915: PPUSH
72916: LD_VAR 0 4
72920: PPUSH
72921: CALL_OW 256
72925: PPUSH
72926: CALL_OW 2
72930: ST_TO_ADDR
72931: GO 72894
72933: POP
72934: POP
// if not tmp then
72935: LD_VAR 0 5
72939: NOT
72940: IFFALSE 72944
// exit ;
72942: GO 72992
// if asc then
72944: LD_VAR 0 2
72948: IFFALSE 72972
// result := SortListByListAsc ( units , tmp ) else
72950: LD_ADDR_VAR 0 3
72954: PUSH
72955: LD_VAR 0 1
72959: PPUSH
72960: LD_VAR 0 5
72964: PPUSH
72965: CALL_OW 76
72969: ST_TO_ADDR
72970: GO 72992
// result := SortListByListDesc ( units , tmp ) ;
72972: LD_ADDR_VAR 0 3
72976: PUSH
72977: LD_VAR 0 1
72981: PPUSH
72982: LD_VAR 0 5
72986: PPUSH
72987: CALL_OW 77
72991: ST_TO_ADDR
// end ;
72992: LD_VAR 0 3
72996: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72997: LD_INT 0
72999: PPUSH
73000: PPUSH
// task := GetTaskList ( mech ) ;
73001: LD_ADDR_VAR 0 4
73005: PUSH
73006: LD_VAR 0 1
73010: PPUSH
73011: CALL_OW 437
73015: ST_TO_ADDR
// if not task then
73016: LD_VAR 0 4
73020: NOT
73021: IFFALSE 73025
// exit ;
73023: GO 73069
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73025: LD_ADDR_VAR 0 3
73029: PUSH
73030: LD_VAR 0 4
73034: PUSH
73035: LD_INT 1
73037: ARRAY
73038: PUSH
73039: LD_INT 1
73041: ARRAY
73042: PUSH
73043: LD_STRING r
73045: EQUAL
73046: IFFALSE 73068
73048: PUSH
73049: LD_VAR 0 4
73053: PUSH
73054: LD_INT 1
73056: ARRAY
73057: PUSH
73058: LD_INT 4
73060: ARRAY
73061: PUSH
73062: LD_VAR 0 2
73066: EQUAL
73067: AND
73068: ST_TO_ADDR
// end ;
73069: LD_VAR 0 3
73073: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73074: LD_INT 0
73076: PPUSH
// SetDir ( unit , d ) ;
73077: LD_VAR 0 1
73081: PPUSH
73082: LD_VAR 0 4
73086: PPUSH
73087: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73091: LD_ADDR_VAR 0 6
73095: PUSH
73096: LD_VAR 0 1
73100: PPUSH
73101: LD_VAR 0 2
73105: PPUSH
73106: LD_VAR 0 3
73110: PPUSH
73111: LD_VAR 0 5
73115: PPUSH
73116: CALL_OW 48
73120: ST_TO_ADDR
// end ;
73121: LD_VAR 0 6
73125: RET
// export function ToNaturalNumber ( number ) ; begin
73126: LD_INT 0
73128: PPUSH
// result := number div 1 ;
73129: LD_ADDR_VAR 0 2
73133: PUSH
73134: LD_VAR 0 1
73138: PUSH
73139: LD_INT 1
73141: DIV
73142: ST_TO_ADDR
// if number < 0 then
73143: LD_VAR 0 1
73147: PUSH
73148: LD_INT 0
73150: LESS
73151: IFFALSE 73161
// result := 0 ;
73153: LD_ADDR_VAR 0 2
73157: PUSH
73158: LD_INT 0
73160: ST_TO_ADDR
// end ;
73161: LD_VAR 0 2
73165: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
73166: LD_INT 0
73168: PPUSH
73169: PPUSH
73170: PPUSH
// if not buildings then
73171: LD_VAR 0 1
73175: NOT
73176: IFFALSE 73180
// exit ;
73178: GO 73295
// tmp := [ ] ;
73180: LD_ADDR_VAR 0 5
73184: PUSH
73185: EMPTY
73186: ST_TO_ADDR
// for b in buildings do
73187: LD_ADDR_VAR 0 4
73191: PUSH
73192: LD_VAR 0 1
73196: PUSH
73197: FOR_IN
73198: IFFALSE 73236
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
73200: LD_ADDR_VAR 0 5
73204: PUSH
73205: LD_VAR 0 5
73209: PPUSH
73210: LD_VAR 0 5
73214: PUSH
73215: LD_INT 1
73217: PLUS
73218: PPUSH
73219: LD_VAR 0 4
73223: PPUSH
73224: CALL_OW 266
73228: PPUSH
73229: CALL_OW 1
73233: ST_TO_ADDR
73234: GO 73197
73236: POP
73237: POP
// if not tmp then
73238: LD_VAR 0 5
73242: NOT
73243: IFFALSE 73247
// exit ;
73245: GO 73295
// if asc then
73247: LD_VAR 0 2
73251: IFFALSE 73275
// result := SortListByListAsc ( buildings , tmp ) else
73253: LD_ADDR_VAR 0 3
73257: PUSH
73258: LD_VAR 0 1
73262: PPUSH
73263: LD_VAR 0 5
73267: PPUSH
73268: CALL_OW 76
73272: ST_TO_ADDR
73273: GO 73295
// result := SortListByListDesc ( buildings , tmp ) ;
73275: LD_ADDR_VAR 0 3
73279: PUSH
73280: LD_VAR 0 1
73284: PPUSH
73285: LD_VAR 0 5
73289: PPUSH
73290: CALL_OW 77
73294: ST_TO_ADDR
// end ;
73295: LD_VAR 0 3
73299: RET
// export function SortByClass ( units , class ) ; var un ; begin
73300: LD_INT 0
73302: PPUSH
73303: PPUSH
// if not units or not class then
73304: LD_VAR 0 1
73308: NOT
73309: IFTRUE 73318
73311: PUSH
73312: LD_VAR 0 2
73316: NOT
73317: OR
73318: IFFALSE 73322
// exit ;
73320: GO 73417
// result := [ ] ;
73322: LD_ADDR_VAR 0 3
73326: PUSH
73327: EMPTY
73328: ST_TO_ADDR
// for un in units do
73329: LD_ADDR_VAR 0 4
73333: PUSH
73334: LD_VAR 0 1
73338: PUSH
73339: FOR_IN
73340: IFFALSE 73415
// if GetClass ( un ) = class then
73342: LD_VAR 0 4
73346: PPUSH
73347: CALL_OW 257
73351: PUSH
73352: LD_VAR 0 2
73356: EQUAL
73357: IFFALSE 73384
// result := Insert ( result , 1 , un ) else
73359: LD_ADDR_VAR 0 3
73363: PUSH
73364: LD_VAR 0 3
73368: PPUSH
73369: LD_INT 1
73371: PPUSH
73372: LD_VAR 0 4
73376: PPUSH
73377: CALL_OW 2
73381: ST_TO_ADDR
73382: GO 73413
// result := Replace ( result , result + 1 , un ) ;
73384: LD_ADDR_VAR 0 3
73388: PUSH
73389: LD_VAR 0 3
73393: PPUSH
73394: LD_VAR 0 3
73398: PUSH
73399: LD_INT 1
73401: PLUS
73402: PPUSH
73403: LD_VAR 0 4
73407: PPUSH
73408: CALL_OW 1
73412: ST_TO_ADDR
73413: GO 73339
73415: POP
73416: POP
// end ;
73417: LD_VAR 0 3
73421: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73422: LD_INT 0
73424: PPUSH
73425: PPUSH
73426: PPUSH
73427: PPUSH
73428: PPUSH
73429: PPUSH
73430: PPUSH
// result := [ ] ;
73431: LD_ADDR_VAR 0 4
73435: PUSH
73436: EMPTY
73437: ST_TO_ADDR
// if x - r < 0 then
73438: LD_VAR 0 1
73442: PUSH
73443: LD_VAR 0 3
73447: MINUS
73448: PUSH
73449: LD_INT 0
73451: LESS
73452: IFFALSE 73464
// min_x := 0 else
73454: LD_ADDR_VAR 0 8
73458: PUSH
73459: LD_INT 0
73461: ST_TO_ADDR
73462: GO 73480
// min_x := x - r ;
73464: LD_ADDR_VAR 0 8
73468: PUSH
73469: LD_VAR 0 1
73473: PUSH
73474: LD_VAR 0 3
73478: MINUS
73479: ST_TO_ADDR
// if y - r < 0 then
73480: LD_VAR 0 2
73484: PUSH
73485: LD_VAR 0 3
73489: MINUS
73490: PUSH
73491: LD_INT 0
73493: LESS
73494: IFFALSE 73506
// min_y := 0 else
73496: LD_ADDR_VAR 0 7
73500: PUSH
73501: LD_INT 0
73503: ST_TO_ADDR
73504: GO 73522
// min_y := y - r ;
73506: LD_ADDR_VAR 0 7
73510: PUSH
73511: LD_VAR 0 2
73515: PUSH
73516: LD_VAR 0 3
73520: MINUS
73521: ST_TO_ADDR
// max_x := x + r ;
73522: LD_ADDR_VAR 0 9
73526: PUSH
73527: LD_VAR 0 1
73531: PUSH
73532: LD_VAR 0 3
73536: PLUS
73537: ST_TO_ADDR
// max_y := y + r ;
73538: LD_ADDR_VAR 0 10
73542: PUSH
73543: LD_VAR 0 2
73547: PUSH
73548: LD_VAR 0 3
73552: PLUS
73553: ST_TO_ADDR
// for _x = min_x to max_x do
73554: LD_ADDR_VAR 0 5
73558: PUSH
73559: DOUBLE
73560: LD_VAR 0 8
73564: DEC
73565: ST_TO_ADDR
73566: LD_VAR 0 9
73570: PUSH
73571: FOR_TO
73572: IFFALSE 73673
// for _y = min_y to max_y do
73574: LD_ADDR_VAR 0 6
73578: PUSH
73579: DOUBLE
73580: LD_VAR 0 7
73584: DEC
73585: ST_TO_ADDR
73586: LD_VAR 0 10
73590: PUSH
73591: FOR_TO
73592: IFFALSE 73669
// begin if not ValidHex ( _x , _y ) then
73594: LD_VAR 0 5
73598: PPUSH
73599: LD_VAR 0 6
73603: PPUSH
73604: CALL_OW 488
73608: NOT
73609: IFFALSE 73613
// continue ;
73611: GO 73591
// if GetResourceTypeXY ( _x , _y ) then
73613: LD_VAR 0 5
73617: PPUSH
73618: LD_VAR 0 6
73622: PPUSH
73623: CALL_OW 283
73627: IFFALSE 73667
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73629: LD_ADDR_VAR 0 4
73633: PUSH
73634: LD_VAR 0 4
73638: PPUSH
73639: LD_VAR 0 4
73643: PUSH
73644: LD_INT 1
73646: PLUS
73647: PPUSH
73648: LD_VAR 0 5
73652: PUSH
73653: LD_VAR 0 6
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PPUSH
73662: CALL_OW 1
73666: ST_TO_ADDR
// end ;
73667: GO 73591
73669: POP
73670: POP
73671: GO 73571
73673: POP
73674: POP
// end ;
73675: LD_VAR 0 4
73679: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73680: LD_INT 0
73682: PPUSH
73683: PPUSH
73684: PPUSH
73685: PPUSH
73686: PPUSH
73687: PPUSH
73688: PPUSH
73689: PPUSH
// if not units then
73690: LD_VAR 0 1
73694: NOT
73695: IFFALSE 73699
// exit ;
73697: GO 74231
// result := UnitFilter ( units , [ f_ok ] ) ;
73699: LD_ADDR_VAR 0 3
73703: PUSH
73704: LD_VAR 0 1
73708: PPUSH
73709: LD_INT 50
73711: PUSH
73712: EMPTY
73713: LIST
73714: PPUSH
73715: CALL_OW 72
73719: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73720: LD_ADDR_VAR 0 8
73724: PUSH
73725: LD_VAR 0 1
73729: PUSH
73730: LD_INT 1
73732: ARRAY
73733: PPUSH
73734: CALL_OW 255
73738: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73739: LD_ADDR_VAR 0 10
73743: PUSH
73744: LD_INT 29
73746: PUSH
73747: LD_INT 91
73749: PUSH
73750: LD_INT 49
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: LIST
73757: ST_TO_ADDR
// if not result then
73758: LD_VAR 0 3
73762: NOT
73763: IFFALSE 73767
// exit ;
73765: GO 74231
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73767: LD_ADDR_VAR 0 5
73771: PUSH
73772: LD_INT 81
73774: PUSH
73775: LD_VAR 0 8
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PPUSH
73784: CALL_OW 69
73788: ST_TO_ADDR
// for i in result do
73789: LD_ADDR_VAR 0 4
73793: PUSH
73794: LD_VAR 0 3
73798: PUSH
73799: FOR_IN
73800: IFFALSE 74229
// begin tag := GetTag ( i ) + 1 ;
73802: LD_ADDR_VAR 0 9
73806: PUSH
73807: LD_VAR 0 4
73811: PPUSH
73812: CALL_OW 110
73816: PUSH
73817: LD_INT 1
73819: PLUS
73820: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
73821: LD_ADDR_VAR 0 7
73825: PUSH
73826: LD_VAR 0 4
73830: PPUSH
73831: CALL_OW 250
73835: PPUSH
73836: LD_VAR 0 4
73840: PPUSH
73841: CALL_OW 251
73845: PPUSH
73846: LD_INT 4
73848: PPUSH
73849: CALL 73422 0 3
73853: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
73854: LD_VAR 0 4
73858: PPUSH
73859: CALL_OW 247
73863: PUSH
73864: LD_INT 2
73866: EQUAL
73867: IFFALSE 73879
73869: PUSH
73870: LD_VAR 0 7
73874: PUSH
73875: LD_INT 2
73877: GREATER
73878: AND
73879: IFFALSE 73899
73881: PUSH
73882: LD_VAR 0 4
73886: PPUSH
73887: CALL_OW 264
73891: PUSH
73892: LD_VAR 0 10
73896: IN
73897: NOT
73898: AND
73899: IFFALSE 73938
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73901: LD_VAR 0 4
73905: PPUSH
73906: LD_VAR 0 7
73910: PUSH
73911: LD_INT 1
73913: ARRAY
73914: PUSH
73915: LD_INT 1
73917: ARRAY
73918: PPUSH
73919: LD_VAR 0 7
73923: PUSH
73924: LD_INT 1
73926: ARRAY
73927: PUSH
73928: LD_INT 2
73930: ARRAY
73931: PPUSH
73932: CALL_OW 116
73936: GO 74227
// if path > tag then
73938: LD_VAR 0 2
73942: PUSH
73943: LD_VAR 0 9
73947: GREATER
73948: IFFALSE 74156
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73950: LD_ADDR_VAR 0 6
73954: PUSH
73955: LD_VAR 0 5
73959: PPUSH
73960: LD_INT 91
73962: PUSH
73963: LD_VAR 0 4
73967: PUSH
73968: LD_INT 8
73970: PUSH
73971: EMPTY
73972: LIST
73973: LIST
73974: LIST
73975: PPUSH
73976: CALL_OW 72
73980: ST_TO_ADDR
// if nearEnemy then
73981: LD_VAR 0 6
73985: IFFALSE 74054
// begin if GetWeapon ( i ) = ru_time_lapser then
73987: LD_VAR 0 4
73991: PPUSH
73992: CALL_OW 264
73996: PUSH
73997: LD_INT 49
73999: EQUAL
74000: IFFALSE 74028
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74002: LD_VAR 0 4
74006: PPUSH
74007: LD_VAR 0 6
74011: PPUSH
74012: LD_VAR 0 4
74016: PPUSH
74017: CALL_OW 74
74021: PPUSH
74022: CALL_OW 112
74026: GO 74052
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74028: LD_VAR 0 4
74032: PPUSH
74033: LD_VAR 0 6
74037: PPUSH
74038: LD_VAR 0 4
74042: PPUSH
74043: CALL_OW 74
74047: PPUSH
74048: CALL 75312 0 2
// end else
74052: GO 74154
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74054: LD_VAR 0 4
74058: PPUSH
74059: LD_VAR 0 2
74063: PUSH
74064: LD_VAR 0 9
74068: ARRAY
74069: PUSH
74070: LD_INT 1
74072: ARRAY
74073: PPUSH
74074: LD_VAR 0 2
74078: PUSH
74079: LD_VAR 0 9
74083: ARRAY
74084: PUSH
74085: LD_INT 2
74087: ARRAY
74088: PPUSH
74089: CALL_OW 297
74093: PUSH
74094: LD_INT 6
74096: GREATER
74097: IFFALSE 74140
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74099: LD_VAR 0 4
74103: PPUSH
74104: LD_VAR 0 2
74108: PUSH
74109: LD_VAR 0 9
74113: ARRAY
74114: PUSH
74115: LD_INT 1
74117: ARRAY
74118: PPUSH
74119: LD_VAR 0 2
74123: PUSH
74124: LD_VAR 0 9
74128: ARRAY
74129: PUSH
74130: LD_INT 2
74132: ARRAY
74133: PPUSH
74134: CALL_OW 114
74138: GO 74154
// SetTag ( i , tag ) ;
74140: LD_VAR 0 4
74144: PPUSH
74145: LD_VAR 0 9
74149: PPUSH
74150: CALL_OW 109
// end else
74154: GO 74227
// if enemy then
74156: LD_VAR 0 5
74160: IFFALSE 74227
// begin if GetWeapon ( i ) = ru_time_lapser then
74162: LD_VAR 0 4
74166: PPUSH
74167: CALL_OW 264
74171: PUSH
74172: LD_INT 49
74174: EQUAL
74175: IFFALSE 74203
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74177: LD_VAR 0 4
74181: PPUSH
74182: LD_VAR 0 5
74186: PPUSH
74187: LD_VAR 0 4
74191: PPUSH
74192: CALL_OW 74
74196: PPUSH
74197: CALL_OW 112
74201: GO 74227
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74203: LD_VAR 0 4
74207: PPUSH
74208: LD_VAR 0 5
74212: PPUSH
74213: LD_VAR 0 4
74217: PPUSH
74218: CALL_OW 74
74222: PPUSH
74223: CALL 75312 0 2
// end ; end ;
74227: GO 73799
74229: POP
74230: POP
// end ;
74231: LD_VAR 0 3
74235: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74236: LD_INT 0
74238: PPUSH
74239: PPUSH
74240: PPUSH
// if not unit or IsInUnit ( unit ) then
74241: LD_VAR 0 1
74245: NOT
74246: IFTRUE 74259
74248: PUSH
74249: LD_VAR 0 1
74253: PPUSH
74254: CALL_OW 310
74258: OR
74259: IFFALSE 74263
// exit ;
74261: GO 74354
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74263: LD_ADDR_VAR 0 4
74267: PUSH
74268: LD_VAR 0 1
74272: PPUSH
74273: CALL_OW 250
74277: PPUSH
74278: LD_VAR 0 2
74282: PPUSH
74283: LD_INT 1
74285: PPUSH
74286: CALL_OW 272
74290: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74291: LD_ADDR_VAR 0 5
74295: PUSH
74296: LD_VAR 0 1
74300: PPUSH
74301: CALL_OW 251
74305: PPUSH
74306: LD_VAR 0 2
74310: PPUSH
74311: LD_INT 1
74313: PPUSH
74314: CALL_OW 273
74318: ST_TO_ADDR
// if ValidHex ( x , y ) then
74319: LD_VAR 0 4
74323: PPUSH
74324: LD_VAR 0 5
74328: PPUSH
74329: CALL_OW 488
74333: IFFALSE 74354
// ComTurnXY ( unit , x , y ) ;
74335: LD_VAR 0 1
74339: PPUSH
74340: LD_VAR 0 4
74344: PPUSH
74345: LD_VAR 0 5
74349: PPUSH
74350: CALL_OW 118
// end ;
74354: LD_VAR 0 3
74358: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74359: LD_INT 0
74361: PPUSH
74362: PPUSH
// result := false ;
74363: LD_ADDR_VAR 0 3
74367: PUSH
74368: LD_INT 0
74370: ST_TO_ADDR
// if not units then
74371: LD_VAR 0 2
74375: NOT
74376: IFFALSE 74380
// exit ;
74378: GO 74425
// for i in units do
74380: LD_ADDR_VAR 0 4
74384: PUSH
74385: LD_VAR 0 2
74389: PUSH
74390: FOR_IN
74391: IFFALSE 74423
// if See ( side , i ) then
74393: LD_VAR 0 1
74397: PPUSH
74398: LD_VAR 0 4
74402: PPUSH
74403: CALL_OW 292
74407: IFFALSE 74421
// begin result := true ;
74409: LD_ADDR_VAR 0 3
74413: PUSH
74414: LD_INT 1
74416: ST_TO_ADDR
// exit ;
74417: POP
74418: POP
74419: GO 74425
// end ;
74421: GO 74390
74423: POP
74424: POP
// end ;
74425: LD_VAR 0 3
74429: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74430: LD_INT 0
74432: PPUSH
74433: PPUSH
74434: PPUSH
74435: PPUSH
// if not unit or not points then
74436: LD_VAR 0 1
74440: NOT
74441: IFTRUE 74450
74443: PUSH
74444: LD_VAR 0 2
74448: NOT
74449: OR
74450: IFFALSE 74454
// exit ;
74452: GO 74544
// dist := 99999 ;
74454: LD_ADDR_VAR 0 5
74458: PUSH
74459: LD_INT 99999
74461: ST_TO_ADDR
// for i in points do
74462: LD_ADDR_VAR 0 4
74466: PUSH
74467: LD_VAR 0 2
74471: PUSH
74472: FOR_IN
74473: IFFALSE 74542
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74475: LD_ADDR_VAR 0 6
74479: PUSH
74480: LD_VAR 0 1
74484: PPUSH
74485: LD_VAR 0 4
74489: PUSH
74490: LD_INT 1
74492: ARRAY
74493: PPUSH
74494: LD_VAR 0 4
74498: PUSH
74499: LD_INT 2
74501: ARRAY
74502: PPUSH
74503: CALL_OW 297
74507: ST_TO_ADDR
// if tmpDist < dist then
74508: LD_VAR 0 6
74512: PUSH
74513: LD_VAR 0 5
74517: LESS
74518: IFFALSE 74540
// begin result := i ;
74520: LD_ADDR_VAR 0 3
74524: PUSH
74525: LD_VAR 0 4
74529: ST_TO_ADDR
// dist := tmpDist ;
74530: LD_ADDR_VAR 0 5
74534: PUSH
74535: LD_VAR 0 6
74539: ST_TO_ADDR
// end ; end ;
74540: GO 74472
74542: POP
74543: POP
// end ;
74544: LD_VAR 0 3
74548: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74549: LD_INT 0
74551: PPUSH
// uc_side := side ;
74552: LD_ADDR_OWVAR 20
74556: PUSH
74557: LD_VAR 0 1
74561: ST_TO_ADDR
// uc_nation := 3 ;
74562: LD_ADDR_OWVAR 21
74566: PUSH
74567: LD_INT 3
74569: ST_TO_ADDR
// vc_chassis := 25 ;
74570: LD_ADDR_OWVAR 37
74574: PUSH
74575: LD_INT 25
74577: ST_TO_ADDR
// vc_engine := engine_siberite ;
74578: LD_ADDR_OWVAR 39
74582: PUSH
74583: LD_INT 3
74585: ST_TO_ADDR
// vc_control := control_computer ;
74586: LD_ADDR_OWVAR 38
74590: PUSH
74591: LD_INT 3
74593: ST_TO_ADDR
// vc_weapon := 59 ;
74594: LD_ADDR_OWVAR 40
74598: PUSH
74599: LD_INT 59
74601: ST_TO_ADDR
// result := CreateVehicle ;
74602: LD_ADDR_VAR 0 5
74606: PUSH
74607: CALL_OW 45
74611: ST_TO_ADDR
// SetDir ( result , d ) ;
74612: LD_VAR 0 5
74616: PPUSH
74617: LD_VAR 0 4
74621: PPUSH
74622: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74626: LD_VAR 0 5
74630: PPUSH
74631: LD_VAR 0 2
74635: PPUSH
74636: LD_VAR 0 3
74640: PPUSH
74641: LD_INT 0
74643: PPUSH
74644: CALL_OW 48
// end ;
74648: LD_VAR 0 5
74652: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74653: LD_INT 0
74655: PPUSH
74656: PPUSH
74657: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74658: LD_ADDR_VAR 0 2
74662: PUSH
74663: LD_INT 0
74665: PUSH
74666: LD_INT 0
74668: PUSH
74669: LD_INT 0
74671: PUSH
74672: LD_INT 0
74674: PUSH
74675: EMPTY
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74681: LD_VAR 0 1
74685: NOT
74686: IFTRUE 74719
74688: PUSH
74689: LD_VAR 0 1
74693: PPUSH
74694: CALL_OW 264
74698: PUSH
74699: LD_INT 12
74701: PUSH
74702: LD_INT 51
74704: PUSH
74705: LD_INT 32
74707: PUSH
74708: LD_INT 89
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: LIST
74715: LIST
74716: IN
74717: NOT
74718: OR
74719: IFFALSE 74723
// exit ;
74721: GO 74821
// for i := 1 to 3 do
74723: LD_ADDR_VAR 0 3
74727: PUSH
74728: DOUBLE
74729: LD_INT 1
74731: DEC
74732: ST_TO_ADDR
74733: LD_INT 3
74735: PUSH
74736: FOR_TO
74737: IFFALSE 74819
// begin tmp := GetCargo ( cargo , i ) ;
74739: LD_ADDR_VAR 0 4
74743: PUSH
74744: LD_VAR 0 1
74748: PPUSH
74749: LD_VAR 0 3
74753: PPUSH
74754: CALL_OW 289
74758: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74759: LD_ADDR_VAR 0 2
74763: PUSH
74764: LD_VAR 0 2
74768: PPUSH
74769: LD_VAR 0 3
74773: PPUSH
74774: LD_VAR 0 4
74778: PPUSH
74779: CALL_OW 1
74783: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74784: LD_ADDR_VAR 0 2
74788: PUSH
74789: LD_VAR 0 2
74793: PPUSH
74794: LD_INT 4
74796: PPUSH
74797: LD_VAR 0 2
74801: PUSH
74802: LD_INT 4
74804: ARRAY
74805: PUSH
74806: LD_VAR 0 4
74810: PLUS
74811: PPUSH
74812: CALL_OW 1
74816: ST_TO_ADDR
// end ;
74817: GO 74736
74819: POP
74820: POP
// end ;
74821: LD_VAR 0 2
74825: RET
// export function Length ( array ) ; begin
74826: LD_INT 0
74828: PPUSH
// result := array + 0 ;
74829: LD_ADDR_VAR 0 2
74833: PUSH
74834: LD_VAR 0 1
74838: PUSH
74839: LD_INT 0
74841: PLUS
74842: ST_TO_ADDR
// end ;
74843: LD_VAR 0 2
74847: RET
// export function PrepareArray ( array ) ; begin
74848: LD_INT 0
74850: PPUSH
// result := array diff 0 ;
74851: LD_ADDR_VAR 0 2
74855: PUSH
74856: LD_VAR 0 1
74860: PUSH
74861: LD_INT 0
74863: DIFF
74864: ST_TO_ADDR
// if not result [ 1 ] then
74865: LD_VAR 0 2
74869: PUSH
74870: LD_INT 1
74872: ARRAY
74873: NOT
74874: IFFALSE 74894
// result := Delete ( result , 1 ) ;
74876: LD_ADDR_VAR 0 2
74880: PUSH
74881: LD_VAR 0 2
74885: PPUSH
74886: LD_INT 1
74888: PPUSH
74889: CALL_OW 3
74893: ST_TO_ADDR
// end ;
74894: LD_VAR 0 2
74898: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74899: LD_INT 0
74901: PPUSH
74902: PPUSH
74903: PPUSH
74904: PPUSH
// sibRocketRange := 25 ;
74905: LD_ADDR_VAR 0 6
74909: PUSH
74910: LD_INT 25
74912: ST_TO_ADDR
// result := false ;
74913: LD_ADDR_VAR 0 4
74917: PUSH
74918: LD_INT 0
74920: ST_TO_ADDR
// for i := 0 to 5 do
74921: LD_ADDR_VAR 0 5
74925: PUSH
74926: DOUBLE
74927: LD_INT 0
74929: DEC
74930: ST_TO_ADDR
74931: LD_INT 5
74933: PUSH
74934: FOR_TO
74935: IFFALSE 75002
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74937: LD_VAR 0 1
74941: PPUSH
74942: LD_VAR 0 5
74946: PPUSH
74947: LD_VAR 0 6
74951: PPUSH
74952: CALL_OW 272
74956: PPUSH
74957: LD_VAR 0 2
74961: PPUSH
74962: LD_VAR 0 5
74966: PPUSH
74967: LD_VAR 0 6
74971: PPUSH
74972: CALL_OW 273
74976: PPUSH
74977: LD_VAR 0 3
74981: PPUSH
74982: CALL_OW 309
74986: IFFALSE 75000
// begin result := true ;
74988: LD_ADDR_VAR 0 4
74992: PUSH
74993: LD_INT 1
74995: ST_TO_ADDR
// exit ;
74996: POP
74997: POP
74998: GO 75004
// end ;
75000: GO 74934
75002: POP
75003: POP
// end ;
75004: LD_VAR 0 4
75008: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75009: LD_INT 0
75011: PPUSH
75012: PPUSH
75013: PPUSH
// if btype = b_depot then
75014: LD_VAR 0 2
75018: PUSH
75019: LD_INT 0
75021: EQUAL
75022: IFFALSE 75034
// begin result := true ;
75024: LD_ADDR_VAR 0 3
75028: PUSH
75029: LD_INT 1
75031: ST_TO_ADDR
// exit ;
75032: GO 75154
// end ; pom := GetBase ( depot ) ;
75034: LD_ADDR_VAR 0 4
75038: PUSH
75039: LD_VAR 0 1
75043: PPUSH
75044: CALL_OW 274
75048: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75049: LD_ADDR_VAR 0 5
75053: PUSH
75054: LD_VAR 0 2
75058: PPUSH
75059: LD_VAR 0 1
75063: PPUSH
75064: CALL_OW 248
75068: PPUSH
75069: CALL_OW 450
75073: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75074: LD_ADDR_VAR 0 3
75078: PUSH
75079: LD_VAR 0 4
75083: PPUSH
75084: LD_INT 1
75086: PPUSH
75087: CALL_OW 275
75091: PUSH
75092: LD_VAR 0 5
75096: PUSH
75097: LD_INT 1
75099: ARRAY
75100: GREATEREQUAL
75101: IFFALSE 75127
75103: PUSH
75104: LD_VAR 0 4
75108: PPUSH
75109: LD_INT 2
75111: PPUSH
75112: CALL_OW 275
75116: PUSH
75117: LD_VAR 0 5
75121: PUSH
75122: LD_INT 2
75124: ARRAY
75125: GREATEREQUAL
75126: AND
75127: IFFALSE 75153
75129: PUSH
75130: LD_VAR 0 4
75134: PPUSH
75135: LD_INT 3
75137: PPUSH
75138: CALL_OW 275
75142: PUSH
75143: LD_VAR 0 5
75147: PUSH
75148: LD_INT 3
75150: ARRAY
75151: GREATEREQUAL
75152: AND
75153: ST_TO_ADDR
// end ;
75154: LD_VAR 0 3
75158: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75159: LD_INT 0
75161: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75162: LD_VAR 0 1
75166: PPUSH
75167: LD_VAR 0 2
75171: PPUSH
75172: LD_INT 0
75174: PPUSH
75175: LD_INT 0
75177: PPUSH
75178: LD_INT 1
75180: PPUSH
75181: LD_INT 0
75183: PPUSH
75184: CALL_OW 587
// end ;
75188: LD_VAR 0 3
75192: RET
// export function CenterOnNow ( unit ) ; begin
75193: LD_INT 0
75195: PPUSH
// result := IsInUnit ( unit ) ;
75196: LD_ADDR_VAR 0 2
75200: PUSH
75201: LD_VAR 0 1
75205: PPUSH
75206: CALL_OW 310
75210: ST_TO_ADDR
// if not result then
75211: LD_VAR 0 2
75215: NOT
75216: IFFALSE 75228
// result := unit ;
75218: LD_ADDR_VAR 0 2
75222: PUSH
75223: LD_VAR 0 1
75227: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75228: LD_VAR 0 1
75232: PPUSH
75233: CALL_OW 87
// end ;
75237: LD_VAR 0 2
75241: RET
// export function ComMoveHex ( unit , hex ) ; begin
75242: LD_INT 0
75244: PPUSH
// if not hex then
75245: LD_VAR 0 2
75249: NOT
75250: IFFALSE 75254
// exit ;
75252: GO 75307
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75254: LD_VAR 0 2
75258: PUSH
75259: LD_INT 1
75261: ARRAY
75262: PPUSH
75263: LD_VAR 0 2
75267: PUSH
75268: LD_INT 2
75270: ARRAY
75271: PPUSH
75272: CALL_OW 428
75276: IFFALSE 75280
// exit ;
75278: GO 75307
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75280: LD_VAR 0 1
75284: PPUSH
75285: LD_VAR 0 2
75289: PUSH
75290: LD_INT 1
75292: ARRAY
75293: PPUSH
75294: LD_VAR 0 2
75298: PUSH
75299: LD_INT 2
75301: ARRAY
75302: PPUSH
75303: CALL_OW 111
// end ;
75307: LD_VAR 0 3
75311: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
75312: LD_INT 0
75314: PPUSH
75315: PPUSH
75316: PPUSH
// if not unit or not enemy then
75317: LD_VAR 0 1
75321: NOT
75322: IFTRUE 75331
75324: PUSH
75325: LD_VAR 0 2
75329: NOT
75330: OR
75331: IFFALSE 75335
// exit ;
75333: GO 75461
// x := GetX ( enemy ) ;
75335: LD_ADDR_VAR 0 4
75339: PUSH
75340: LD_VAR 0 2
75344: PPUSH
75345: CALL_OW 250
75349: ST_TO_ADDR
// y := GetY ( enemy ) ;
75350: LD_ADDR_VAR 0 5
75354: PUSH
75355: LD_VAR 0 2
75359: PPUSH
75360: CALL_OW 251
75364: ST_TO_ADDR
// if ValidHex ( x , y ) then
75365: LD_VAR 0 4
75369: PPUSH
75370: LD_VAR 0 5
75374: PPUSH
75375: CALL_OW 488
75379: IFFALSE 75461
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
75381: LD_VAR 0 2
75385: PPUSH
75386: CALL_OW 247
75390: PUSH
75391: LD_INT 3
75393: PUSH
75394: LD_INT 2
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: IN
75401: IFTRUE 75424
75403: PUSH
75404: LD_VAR 0 1
75408: PPUSH
75409: CALL_OW 255
75413: PPUSH
75414: LD_VAR 0 2
75418: PPUSH
75419: CALL_OW 292
75423: OR
75424: IFFALSE 75442
// ComAttackUnit ( unit , enemy ) else
75426: LD_VAR 0 1
75430: PPUSH
75431: LD_VAR 0 2
75435: PPUSH
75436: CALL_OW 115
75440: GO 75461
// ComAgressiveMove ( unit , x , y ) ;
75442: LD_VAR 0 1
75446: PPUSH
75447: LD_VAR 0 4
75451: PPUSH
75452: LD_VAR 0 5
75456: PPUSH
75457: CALL_OW 114
// end ;
75461: LD_VAR 0 3
75465: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
75466: LD_INT 0
75468: PPUSH
75469: PPUSH
75470: PPUSH
// list := AreaToList ( area , 0 ) ;
75471: LD_ADDR_VAR 0 5
75475: PUSH
75476: LD_VAR 0 1
75480: PPUSH
75481: LD_INT 0
75483: PPUSH
75484: CALL_OW 517
75488: ST_TO_ADDR
// if not list then
75489: LD_VAR 0 5
75493: NOT
75494: IFFALSE 75498
// exit ;
75496: GO 75628
// if all then
75498: LD_VAR 0 2
75502: IFFALSE 75590
// begin for i := 1 to list [ 1 ] do
75504: LD_ADDR_VAR 0 4
75508: PUSH
75509: DOUBLE
75510: LD_INT 1
75512: DEC
75513: ST_TO_ADDR
75514: LD_VAR 0 5
75518: PUSH
75519: LD_INT 1
75521: ARRAY
75522: PUSH
75523: FOR_TO
75524: IFFALSE 75586
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
75526: LD_ADDR_VAR 0 3
75530: PUSH
75531: LD_VAR 0 3
75535: PPUSH
75536: LD_VAR 0 3
75540: PUSH
75541: LD_INT 1
75543: PLUS
75544: PPUSH
75545: LD_VAR 0 5
75549: PUSH
75550: LD_INT 1
75552: ARRAY
75553: PUSH
75554: LD_VAR 0 4
75558: ARRAY
75559: PUSH
75560: LD_VAR 0 5
75564: PUSH
75565: LD_INT 2
75567: ARRAY
75568: PUSH
75569: LD_VAR 0 4
75573: ARRAY
75574: PUSH
75575: EMPTY
75576: LIST
75577: LIST
75578: PPUSH
75579: CALL_OW 1
75583: ST_TO_ADDR
75584: GO 75523
75586: POP
75587: POP
// exit ;
75588: GO 75628
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
75590: LD_ADDR_VAR 0 3
75594: PUSH
75595: LD_VAR 0 5
75599: PUSH
75600: LD_INT 1
75602: ARRAY
75603: PUSH
75604: LD_INT 1
75606: ARRAY
75607: PUSH
75608: LD_VAR 0 5
75612: PUSH
75613: LD_INT 2
75615: ARRAY
75616: PUSH
75617: LD_INT 1
75619: ARRAY
75620: PUSH
75621: EMPTY
75622: LIST
75623: LIST
75624: PUSH
75625: EMPTY
75626: LIST
75627: ST_TO_ADDR
// end ;
75628: LD_VAR 0 3
75632: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75633: LD_INT 0
75635: PPUSH
75636: PPUSH
// list := AreaToList ( area , 0 ) ;
75637: LD_ADDR_VAR 0 4
75641: PUSH
75642: LD_VAR 0 1
75646: PPUSH
75647: LD_INT 0
75649: PPUSH
75650: CALL_OW 517
75654: ST_TO_ADDR
// if not list then
75655: LD_VAR 0 4
75659: NOT
75660: IFFALSE 75664
// exit ;
75662: GO 75705
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75664: LD_ADDR_VAR 0 3
75668: PUSH
75669: LD_VAR 0 4
75673: PUSH
75674: LD_INT 1
75676: ARRAY
75677: PUSH
75678: LD_INT 1
75680: ARRAY
75681: PUSH
75682: LD_VAR 0 4
75686: PUSH
75687: LD_INT 2
75689: ARRAY
75690: PUSH
75691: LD_INT 1
75693: ARRAY
75694: PUSH
75695: LD_VAR 0 2
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: LIST
75704: ST_TO_ADDR
// end ;
75705: LD_VAR 0 3
75709: RET
// export function First ( array ) ; begin
75710: LD_INT 0
75712: PPUSH
// if not array then
75713: LD_VAR 0 1
75717: NOT
75718: IFFALSE 75722
// exit ;
75720: GO 75736
// result := array [ 1 ] ;
75722: LD_ADDR_VAR 0 2
75726: PUSH
75727: LD_VAR 0 1
75731: PUSH
75732: LD_INT 1
75734: ARRAY
75735: ST_TO_ADDR
// end ;
75736: LD_VAR 0 2
75740: RET
// export function Last ( array ) ; begin
75741: LD_INT 0
75743: PPUSH
// if not array then
75744: LD_VAR 0 1
75748: NOT
75749: IFFALSE 75753
// exit ;
75751: GO 75769
// result := array [ array ] ;
75753: LD_ADDR_VAR 0 2
75757: PUSH
75758: LD_VAR 0 1
75762: PUSH
75763: LD_VAR 0 1
75767: ARRAY
75768: ST_TO_ADDR
// end ;
75769: LD_VAR 0 2
75773: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
75774: LD_INT 0
75776: PPUSH
75777: PPUSH
// result := [ ] ;
75778: LD_ADDR_VAR 0 5
75782: PUSH
75783: EMPTY
75784: ST_TO_ADDR
// if not array then
75785: LD_VAR 0 1
75789: NOT
75790: IFFALSE 75794
// exit ;
75792: GO 75906
// for i := 1 to array do
75794: LD_ADDR_VAR 0 6
75798: PUSH
75799: DOUBLE
75800: LD_INT 1
75802: DEC
75803: ST_TO_ADDR
75804: LD_VAR 0 1
75808: PUSH
75809: FOR_TO
75810: IFFALSE 75904
// if array [ i ] [ index ] = value then
75812: LD_VAR 0 1
75816: PUSH
75817: LD_VAR 0 6
75821: ARRAY
75822: PUSH
75823: LD_VAR 0 2
75827: ARRAY
75828: PUSH
75829: LD_VAR 0 3
75833: EQUAL
75834: IFFALSE 75902
// begin if indexColumn then
75836: LD_VAR 0 4
75840: IFFALSE 75876
// result := Join ( result , array [ i ] [ indexColumn ] ) else
75842: LD_ADDR_VAR 0 5
75846: PUSH
75847: LD_VAR 0 5
75851: PPUSH
75852: LD_VAR 0 1
75856: PUSH
75857: LD_VAR 0 6
75861: ARRAY
75862: PUSH
75863: LD_VAR 0 4
75867: ARRAY
75868: PPUSH
75869: CALL 70914 0 2
75873: ST_TO_ADDR
75874: GO 75902
// result := Join ( result , array [ i ] ) ;
75876: LD_ADDR_VAR 0 5
75880: PUSH
75881: LD_VAR 0 5
75885: PPUSH
75886: LD_VAR 0 1
75890: PUSH
75891: LD_VAR 0 6
75895: ARRAY
75896: PPUSH
75897: CALL 70914 0 2
75901: ST_TO_ADDR
// end ;
75902: GO 75809
75904: POP
75905: POP
// end ;
75906: LD_VAR 0 5
75910: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
75911: LD_INT 0
75913: PPUSH
// if not vehicles or not parkingPoint then
75914: LD_VAR 0 1
75918: NOT
75919: IFTRUE 75928
75921: PUSH
75922: LD_VAR 0 2
75926: NOT
75927: OR
75928: IFFALSE 75932
// exit ;
75930: GO 76030
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
75932: LD_ADDR_VAR 0 1
75936: PUSH
75937: LD_VAR 0 1
75941: PPUSH
75942: LD_INT 50
75944: PUSH
75945: EMPTY
75946: LIST
75947: PUSH
75948: LD_INT 3
75950: PUSH
75951: LD_INT 92
75953: PUSH
75954: LD_VAR 0 2
75958: PUSH
75959: LD_INT 1
75961: ARRAY
75962: PUSH
75963: LD_VAR 0 2
75967: PUSH
75968: LD_INT 2
75970: ARRAY
75971: PUSH
75972: LD_INT 8
75974: PUSH
75975: EMPTY
75976: LIST
75977: LIST
75978: LIST
75979: LIST
75980: PUSH
75981: EMPTY
75982: LIST
75983: LIST
75984: PUSH
75985: EMPTY
75986: LIST
75987: LIST
75988: PPUSH
75989: CALL_OW 72
75993: ST_TO_ADDR
// if not vehicles then
75994: LD_VAR 0 1
75998: NOT
75999: IFFALSE 76003
// exit ;
76001: GO 76030
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76003: LD_VAR 0 1
76007: PPUSH
76008: LD_VAR 0 2
76012: PUSH
76013: LD_INT 1
76015: ARRAY
76016: PPUSH
76017: LD_VAR 0 2
76021: PUSH
76022: LD_INT 2
76024: ARRAY
76025: PPUSH
76026: CALL_OW 111
// end ;
76030: LD_VAR 0 3
76034: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76035: LD_INT 0
76037: PPUSH
76038: PPUSH
76039: PPUSH
// if not side or not area then
76040: LD_VAR 0 1
76044: NOT
76045: IFTRUE 76054
76047: PUSH
76048: LD_VAR 0 2
76052: NOT
76053: OR
76054: IFFALSE 76058
// exit ;
76056: GO 76177
// tmp := AreaToList ( area , 0 ) ;
76058: LD_ADDR_VAR 0 5
76062: PUSH
76063: LD_VAR 0 2
76067: PPUSH
76068: LD_INT 0
76070: PPUSH
76071: CALL_OW 517
76075: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76076: LD_ADDR_VAR 0 4
76080: PUSH
76081: DOUBLE
76082: LD_INT 1
76084: DEC
76085: ST_TO_ADDR
76086: LD_VAR 0 5
76090: PUSH
76091: LD_INT 1
76093: ARRAY
76094: PUSH
76095: FOR_TO
76096: IFFALSE 76175
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76098: LD_VAR 0 5
76102: PUSH
76103: LD_INT 1
76105: ARRAY
76106: PUSH
76107: LD_VAR 0 4
76111: ARRAY
76112: PPUSH
76113: LD_VAR 0 5
76117: PUSH
76118: LD_INT 2
76120: ARRAY
76121: PUSH
76122: LD_VAR 0 4
76126: ARRAY
76127: PPUSH
76128: CALL_OW 351
76132: IFFALSE 76173
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76134: LD_VAR 0 5
76138: PUSH
76139: LD_INT 1
76141: ARRAY
76142: PUSH
76143: LD_VAR 0 4
76147: ARRAY
76148: PPUSH
76149: LD_VAR 0 5
76153: PUSH
76154: LD_INT 2
76156: ARRAY
76157: PUSH
76158: LD_VAR 0 4
76162: ARRAY
76163: PPUSH
76164: LD_VAR 0 1
76168: PPUSH
76169: CALL_OW 244
// end ;
76173: GO 76095
76175: POP
76176: POP
// end ;
76177: LD_VAR 0 3
76181: RET
// export function UniqueArray ( array ) ; var i ; begin
76182: LD_INT 0
76184: PPUSH
76185: PPUSH
// result := [ ] ;
76186: LD_ADDR_VAR 0 2
76190: PUSH
76191: EMPTY
76192: ST_TO_ADDR
// if not array then
76193: LD_VAR 0 1
76197: NOT
76198: IFFALSE 76202
// exit ;
76200: GO 76263
// for i := 1 to array do
76202: LD_ADDR_VAR 0 3
76206: PUSH
76207: DOUBLE
76208: LD_INT 1
76210: DEC
76211: ST_TO_ADDR
76212: LD_VAR 0 1
76216: PUSH
76217: FOR_TO
76218: IFFALSE 76261
// if not array [ i ] in result then
76220: LD_VAR 0 1
76224: PUSH
76225: LD_VAR 0 3
76229: ARRAY
76230: PUSH
76231: LD_VAR 0 2
76235: IN
76236: NOT
76237: IFFALSE 76259
// result := Join ( result , i ) ;
76239: LD_ADDR_VAR 0 2
76243: PUSH
76244: LD_VAR 0 2
76248: PPUSH
76249: LD_VAR 0 3
76253: PPUSH
76254: CALL 70914 0 2
76258: ST_TO_ADDR
76259: GO 76217
76261: POP
76262: POP
// end ; end_of_file
76263: LD_VAR 0 2
76267: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76268: LD_VAR 0 1
76272: PUSH
76273: LD_INT 200
76275: DOUBLE
76276: GREATEREQUAL
76277: IFFALSE 76285
76279: LD_INT 299
76281: DOUBLE
76282: LESSEQUAL
76283: IFTRUE 76287
76285: GO 76319
76287: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76288: LD_VAR 0 1
76292: PPUSH
76293: LD_VAR 0 2
76297: PPUSH
76298: LD_VAR 0 3
76302: PPUSH
76303: LD_VAR 0 4
76307: PPUSH
76308: LD_VAR 0 5
76312: PPUSH
76313: CALL 28025 0 5
76317: GO 76396
76319: LD_INT 300
76321: DOUBLE
76322: GREATEREQUAL
76323: IFFALSE 76331
76325: LD_INT 399
76327: DOUBLE
76328: LESSEQUAL
76329: IFTRUE 76333
76331: GO 76395
76333: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76334: LD_VAR 0 1
76338: PPUSH
76339: LD_VAR 0 2
76343: PPUSH
76344: LD_VAR 0 3
76348: PPUSH
76349: LD_VAR 0 4
76353: PPUSH
76354: LD_VAR 0 5
76358: PPUSH
76359: LD_VAR 0 6
76363: PPUSH
76364: LD_VAR 0 7
76368: PPUSH
76369: LD_VAR 0 8
76373: PPUSH
76374: LD_VAR 0 9
76378: PPUSH
76379: LD_VAR 0 10
76383: PPUSH
76384: LD_VAR 0 11
76388: PPUSH
76389: CALL 23909 0 11
76393: GO 76396
76395: POP
// end ;
76396: PPOPN 11
76398: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76399: LD_VAR 0 1
76403: PPUSH
76404: LD_VAR 0 2
76408: PPUSH
76409: LD_VAR 0 3
76413: PPUSH
76414: LD_VAR 0 4
76418: PPUSH
76419: LD_VAR 0 5
76423: PPUSH
76424: CALL 27406 0 5
// end ; end_of_file
76428: PPOPN 5
76430: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76431: LD_VAR 0 1
76435: PPUSH
76436: LD_VAR 0 2
76440: PPUSH
76441: LD_VAR 0 3
76445: PPUSH
76446: LD_VAR 0 4
76450: PPUSH
76451: LD_VAR 0 5
76455: PPUSH
76456: LD_VAR 0 6
76460: PPUSH
76461: CALL 11449 0 6
// end ;
76465: PPOPN 6
76467: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76468: LD_INT 0
76470: PPUSH
// begin if not units then
76471: LD_VAR 0 1
76475: NOT
76476: IFFALSE 76480
// exit ;
76478: GO 76480
// end ;
76480: PPOPN 7
76482: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76483: CALL 11336 0 0
// end ;
76487: PPOPN 1
76489: END
