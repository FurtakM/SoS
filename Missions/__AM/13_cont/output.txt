// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1245 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1149 0 0
// PrepareDifficulty ;
 207: CALL 6457 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING 13c_JMM
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: CALL 5787 0 2
 600: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 601: LD_ADDR_EXP 2
 605: PUSH
 606: LD_STRING 13c_Stevens
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 5787 0 2
 616: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 617: LD_ADDR_EXP 3
 621: PUSH
 622: LD_STRING 13c_Lisa
 624: PPUSH
 625: LD_INT 1
 627: PPUSH
 628: CALL 5787 0 2
 632: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 633: LD_ADDR_EXP 4
 637: PUSH
 638: LD_STRING 13c_Donaldson
 640: PPUSH
 641: LD_INT 1
 643: PPUSH
 644: CALL 5787 0 2
 648: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 649: LD_ADDR_EXP 5
 653: PUSH
 654: LD_STRING 13c_Bobby
 656: PPUSH
 657: LD_INT 1
 659: PPUSH
 660: CALL 5787 0 2
 664: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 665: LD_ADDR_EXP 6
 669: PUSH
 670: LD_STRING 13c_Cyrus
 672: PPUSH
 673: LD_INT 1
 675: PPUSH
 676: CALL 5787 0 2
 680: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 681: LD_ADDR_EXP 7
 685: PUSH
 686: LD_STRING 13c_Denis
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL 5787 0 2
 696: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 697: LD_ADDR_EXP 8
 701: PUSH
 702: LD_STRING 13c_Brown
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 5787 0 2
 712: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 713: LD_ADDR_EXP 9
 717: PUSH
 718: LD_STRING 13c_Gladstone
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: CALL 5787 0 2
 728: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 729: LD_ADDR_EXP 10
 733: PUSH
 734: LD_STRING 13c_Houten
 736: PPUSH
 737: LD_INT 1
 739: PPUSH
 740: CALL 5787 0 2
 744: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 745: LD_ADDR_EXP 11
 749: PUSH
 750: LD_STRING 13c_Cornel
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 5787 0 2
 760: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 761: LD_ADDR_EXP 12
 765: PUSH
 766: LD_STRING 13c_Gary
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: CALL 5787 0 2
 776: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 777: LD_ADDR_EXP 13
 781: PUSH
 782: LD_STRING 13c_Frank
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL 5787 0 2
 792: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 793: LD_ADDR_EXP 14
 797: PUSH
 798: LD_STRING 13c_Kikuchi
 800: PPUSH
 801: LD_INT 1
 803: PPUSH
 804: CALL 5787 0 2
 808: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 809: LD_ADDR_EXP 15
 813: PUSH
 814: LD_STRING Powell
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL 5787 0 2
 824: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 825: LD_ADDR_VAR 0 2
 829: PUSH
 830: LD_EXP 1
 834: PUSH
 835: LD_EXP 2
 839: PUSH
 840: LD_EXP 3
 844: PUSH
 845: LD_EXP 4
 849: PUSH
 850: LD_EXP 5
 854: PUSH
 855: LD_EXP 6
 859: PUSH
 860: LD_EXP 7
 864: PUSH
 865: LD_EXP 8
 869: PUSH
 870: LD_EXP 9
 874: PUSH
 875: LD_EXP 10
 879: PUSH
 880: LD_EXP 11
 884: PUSH
 885: LD_EXP 12
 889: PUSH
 890: LD_EXP 13
 894: PUSH
 895: LD_EXP 14
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 33
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 21
 943: PUSH
 944: LD_INT 2
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PPUSH
 956: CALL_OW 69
 960: ST_TO_ADDR
// for i = tmp downto 1 do
 961: LD_ADDR_VAR 0 4
 965: PUSH
 966: DOUBLE
 967: LD_VAR 0 2
 971: INC
 972: ST_TO_ADDR
 973: LD_INT 1
 975: PUSH
 976: FOR_DOWNTO
 977: IFFALSE 1014
// if not tmp [ i ] then
 979: LD_VAR 0 2
 983: PUSH
 984: LD_VAR 0 4
 988: ARRAY
 989: NOT
 990: IFFALSE 1012
// tmp := Delete ( tmp , i ) ;
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_VAR 0 4
1006: PPUSH
1007: CALL_OW 3
1011: ST_TO_ADDR
1012: GO 976
1014: POP
1015: POP
// for i = 1 to tmp do
1016: LD_ADDR_VAR 0 4
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_VAR 0 2
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1062
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1034: LD_VAR 0 2
1038: PUSH
1039: LD_VAR 0 4
1043: ARRAY
1044: PPUSH
1045: LD_VAR 0 3
1049: PUSH
1050: LD_VAR 0 4
1054: ARRAY
1055: PPUSH
1056: CALL_OW 52
1060: GO 1031
1062: POP
1063: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1064: LD_INT 22
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 25
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 69
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: PUSH
1097: LD_INT 22
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 34
1109: PUSH
1110: LD_INT 13
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PPUSH
1121: CALL_OW 69
1125: PUSH
1126: LD_INT 0
1128: EQUAL
1129: AND
1130: IFFALSE 1144
// SetClass ( JMM , 2 ) ;
1132: LD_EXP 1
1136: PPUSH
1137: LD_INT 2
1139: PPUSH
1140: CALL_OW 336
// end ;
1144: LD_VAR 0 1
1148: RET
// export function PrepareAmericansRandom ; var i ; begin
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
// uc_side = 1 ;
1153: LD_ADDR_OWVAR 20
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1161: LD_ADDR_EXP 16
1165: PUSH
1166: LD_STRING 13c_others
1168: PPUSH
1169: CALL_OW 31
1173: ST_TO_ADDR
// for i in others13 do
1174: LD_ADDR_VAR 0 2
1178: PUSH
1179: LD_EXP 16
1183: PUSH
1184: FOR_IN
1185: IFFALSE 1238
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1187: LD_VAR 0 2
1191: PPUSH
1192: LD_INT 22
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PUSH
1202: LD_INT 21
1204: PUSH
1205: LD_INT 2
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 58
1214: PUSH
1215: EMPTY
1216: LIST
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: PPUSH
1223: CALL_OW 69
1227: PUSH
1228: LD_INT 1
1230: ARRAY
1231: PPUSH
1232: CALL_OW 52
1236: GO 1184
1238: POP
1239: POP
// end ;
1240: LD_VAR 0 1
1244: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_STRING 13_VehiclesIn13_1
1260: PPUSH
1261: EMPTY
1262: PPUSH
1263: CALL_OW 30
1267: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1268: LD_ADDR_EXP 24
1272: PUSH
1273: LD_STRING 13_ResourcesInCargo13_1
1275: PPUSH
1276: EMPTY
1277: PPUSH
1278: CALL_OW 30
1282: ST_TO_ADDR
// cargoList = [ ] ;
1283: LD_ADDR_VAR 0 6
1287: PUSH
1288: EMPTY
1289: ST_TO_ADDR
// uc_side = 1 ;
1290: LD_ADDR_OWVAR 20
1294: PUSH
1295: LD_INT 1
1297: ST_TO_ADDR
// if vehicles > 0 then
1298: LD_VAR 0 5
1302: PUSH
1303: LD_INT 0
1305: GREATER
1306: IFFALSE 1661
// begin for i := 1 to vehicles do
1308: LD_ADDR_VAR 0 2
1312: PUSH
1313: DOUBLE
1314: LD_INT 1
1316: DEC
1317: ST_TO_ADDR
1318: LD_VAR 0 5
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1473
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1326: LD_ADDR_OWVAR 21
1330: PUSH
1331: LD_VAR 0 5
1335: PUSH
1336: LD_VAR 0 2
1340: ARRAY
1341: PUSH
1342: LD_INT 1
1344: ARRAY
1345: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1346: LD_ADDR_OWVAR 37
1350: PUSH
1351: LD_VAR 0 5
1355: PUSH
1356: LD_VAR 0 2
1360: ARRAY
1361: PUSH
1362: LD_INT 2
1364: ARRAY
1365: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1366: LD_ADDR_OWVAR 39
1370: PUSH
1371: LD_VAR 0 5
1375: PUSH
1376: LD_VAR 0 2
1380: ARRAY
1381: PUSH
1382: LD_INT 3
1384: ARRAY
1385: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1386: LD_ADDR_OWVAR 38
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_VAR 0 2
1400: ARRAY
1401: PUSH
1402: LD_INT 4
1404: ARRAY
1405: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1406: LD_ADDR_OWVAR 40
1410: PUSH
1411: LD_VAR 0 5
1415: PUSH
1416: LD_VAR 0 2
1420: ARRAY
1421: PUSH
1422: LD_INT 5
1424: ARRAY
1425: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1426: LD_ADDR_OWVAR 41
1430: PUSH
1431: LD_INT 40
1433: ST_TO_ADDR
// veh = CreateVehicle ;
1434: LD_ADDR_VAR 0 4
1438: PUSH
1439: CALL_OW 45
1443: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1444: LD_VAR 0 4
1448: PPUSH
1449: LD_INT 3
1451: PPUSH
1452: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1456: LD_VAR 0 4
1460: PPUSH
1461: LD_INT 2
1463: PPUSH
1464: LD_INT 0
1466: PPUSH
1467: CALL_OW 49
// end ;
1471: GO 1323
1473: POP
1474: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1475: LD_ADDR_VAR 0 6
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 1
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 21
1492: PUSH
1493: LD_INT 2
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 34
1502: PUSH
1503: LD_INT 12
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: ST_TO_ADDR
// if cargoList > 0 then
1520: LD_VAR 0 6
1524: PUSH
1525: LD_INT 0
1527: GREATER
1528: IFFALSE 1661
// for i = 1 to cargoList do
1530: LD_ADDR_VAR 0 2
1534: PUSH
1535: DOUBLE
1536: LD_INT 1
1538: DEC
1539: ST_TO_ADDR
1540: LD_VAR 0 6
1544: PUSH
1545: FOR_TO
1546: IFFALSE 1659
// begin if resources > 0 then
1548: LD_EXP 24
1552: PUSH
1553: LD_INT 0
1555: GREATER
1556: IFFALSE 1657
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1558: LD_VAR 0 6
1562: PUSH
1563: LD_VAR 0 2
1567: ARRAY
1568: PPUSH
1569: LD_INT 1
1571: PPUSH
1572: LD_EXP 24
1576: PUSH
1577: LD_VAR 0 2
1581: ARRAY
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1591: LD_VAR 0 6
1595: PUSH
1596: LD_VAR 0 2
1600: ARRAY
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_EXP 24
1609: PUSH
1610: LD_VAR 0 2
1614: ARRAY
1615: PUSH
1616: LD_INT 2
1618: ARRAY
1619: PPUSH
1620: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1624: LD_VAR 0 6
1628: PUSH
1629: LD_VAR 0 2
1633: ARRAY
1634: PPUSH
1635: LD_INT 3
1637: PPUSH
1638: LD_EXP 24
1642: PUSH
1643: LD_VAR 0 2
1647: ARRAY
1648: PUSH
1649: LD_INT 3
1651: ARRAY
1652: PPUSH
1653: CALL_OW 291
// end ; end ;
1657: GO 1545
1659: POP
1660: POP
// end ; end ;
1661: LD_VAR 0 1
1665: RET
// export function PowellSupport ; var i , veh , un ; begin
1666: LD_INT 0
1668: PPUSH
1669: PPUSH
1670: PPUSH
1671: PPUSH
// for i = 1 to 3 do
1672: LD_ADDR_VAR 0 2
1676: PUSH
1677: DOUBLE
1678: LD_INT 1
1680: DEC
1681: ST_TO_ADDR
1682: LD_INT 3
1684: PUSH
1685: FOR_TO
1686: IFFALSE 1887
// begin uc_nation = 1 ;
1688: LD_ADDR_OWVAR 21
1692: PUSH
1693: LD_INT 1
1695: ST_TO_ADDR
// uc_side = 1 ;
1696: LD_ADDR_OWVAR 20
1700: PUSH
1701: LD_INT 1
1703: ST_TO_ADDR
// vc_engine = 3 ;
1704: LD_ADDR_OWVAR 39
1708: PUSH
1709: LD_INT 3
1711: ST_TO_ADDR
// vc_control = 1 ;
1712: LD_ADDR_OWVAR 38
1716: PUSH
1717: LD_INT 1
1719: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1720: LD_ADDR_OWVAR 40
1724: PUSH
1725: LD_INT 9
1727: PUSH
1728: LD_INT 5
1730: PUSH
1731: LD_INT 4
1733: PUSH
1734: LD_INT 7
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 1
1749: PPUSH
1750: LD_INT 5
1752: PPUSH
1753: CALL_OW 12
1757: ARRAY
1758: ST_TO_ADDR
// if vc_weapon = 6 then
1759: LD_OWVAR 40
1763: PUSH
1764: LD_INT 6
1766: EQUAL
1767: IFFALSE 1779
// vc_chassis = 4 else
1769: LD_ADDR_OWVAR 37
1773: PUSH
1774: LD_INT 4
1776: ST_TO_ADDR
1777: GO 1787
// vc_chassis = 3 ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 3
1786: ST_TO_ADDR
// veh = CreateVehicle ;
1787: LD_ADDR_VAR 0 3
1791: PUSH
1792: CALL_OW 45
1796: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1797: LD_VAR 0 3
1801: PPUSH
1802: LD_INT 2
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// SetDir ( veh , 1 ) ;
1812: LD_VAR 0 3
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: CALL_OW 233
// hc_gallery =  ;
1824: LD_ADDR_OWVAR 33
1828: PUSH
1829: LD_STRING 
1831: ST_TO_ADDR
// hc_name =  ;
1832: LD_ADDR_OWVAR 26
1836: PUSH
1837: LD_STRING 
1839: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1840: LD_INT 0
1842: PPUSH
1843: LD_INT 3
1845: PPUSH
1846: LD_INT 7
1848: PPUSH
1849: LD_INT 10
1851: PPUSH
1852: CALL_OW 12
1856: PPUSH
1857: CALL_OW 380
// un = CreateHuman ;
1861: LD_ADDR_VAR 0 4
1865: PUSH
1866: CALL_OW 44
1870: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1871: LD_VAR 0 4
1875: PPUSH
1876: LD_VAR 0 3
1880: PPUSH
1881: CALL_OW 52
// end ;
1885: GO 1685
1887: POP
1888: POP
// end ; end_of_file
1889: LD_VAR 0 1
1893: RET
// export function PrepareBurlak ; begin
1894: LD_INT 0
1896: PPUSH
// uc_side = 7 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 7
1904: ST_TO_ADDR
// uc_nation = 3 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// vc_engine = 3 ;
1913: LD_ADDR_OWVAR 39
1917: PUSH
1918: LD_INT 3
1920: ST_TO_ADDR
// vc_control = 1 ;
1921: LD_ADDR_OWVAR 38
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// vc_weapon = 46 ;
1929: LD_ADDR_OWVAR 40
1933: PUSH
1934: LD_INT 46
1936: ST_TO_ADDR
// vc_chassis = 24 ;
1937: LD_ADDR_OWVAR 37
1941: PUSH
1942: LD_INT 24
1944: ST_TO_ADDR
// Masha = CreateVehicle ;
1945: LD_ADDR_EXP 18
1949: PUSH
1950: CALL_OW 45
1954: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
1955: LD_EXP 18
1959: PPUSH
1960: LD_INT 3
1962: PPUSH
1963: LD_INT 0
1965: PPUSH
1966: CALL_OW 49
// SetMark ( Masha , 1 ) ;
1970: LD_EXP 18
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
1982: LD_ADDR_EXP 17
1986: PUSH
1987: LD_STRING Burlak
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL 5787 0 2
1997: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
1998: LD_EXP 17
2002: PPUSH
2003: LD_EXP 18
2007: PPUSH
2008: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2012: LD_EXP 18
2016: PPUSH
2017: LD_INT 107
2019: PPUSH
2020: LD_INT 118
2022: PPUSH
2023: CALL_OW 114
// spawnBurlak = 1 ;
2027: LD_ADDR_EXP 27
2031: PUSH
2032: LD_INT 1
2034: ST_TO_ADDR
// end ;
2035: LD_VAR 0 1
2039: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2040: LD_INT 0
2042: PPUSH
2043: PPUSH
2044: PPUSH
2045: PPUSH
// uc_side = 7 ;
2046: LD_ADDR_OWVAR 20
2050: PUSH
2051: LD_INT 7
2053: ST_TO_ADDR
// uc_nation = 3 ;
2054: LD_ADDR_OWVAR 21
2058: PUSH
2059: LD_INT 3
2061: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
2062: LD_ADDR_EXP 19
2066: PUSH
2067: LD_STRING Gnyevko
2069: PPUSH
2070: LD_INT 0
2072: PPUSH
2073: CALL 5787 0 2
2077: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
2078: LD_ADDR_EXP 20
2082: PUSH
2083: LD_STRING Titov
2085: PPUSH
2086: LD_INT 0
2088: PPUSH
2089: CALL 5787 0 2
2093: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2094: LD_ADDR_EXP 21
2098: PUSH
2099: LD_STRING Xavier2
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: CALL 5787 0 2
2109: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2110: LD_ADDR_EXP 22
2114: PUSH
2115: LD_STRING Belkov
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL 5787 0 2
2125: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2126: LD_ADDR_EXP 23
2130: PUSH
2131: LD_STRING Lipshchin
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: CALL 5787 0 2
2141: ST_TO_ADDR
// for i = 1 to 5 do
2142: LD_ADDR_VAR 0 2
2146: PUSH
2147: DOUBLE
2148: LD_INT 1
2150: DEC
2151: ST_TO_ADDR
2152: LD_INT 5
2154: PUSH
2155: FOR_TO
2156: IFFALSE 2244
// begin vc_engine = 3 ;
2158: LD_ADDR_OWVAR 39
2162: PUSH
2163: LD_INT 3
2165: ST_TO_ADDR
// vc_control = 1 ;
2166: LD_ADDR_OWVAR 38
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2174: LD_ADDR_OWVAR 40
2178: PUSH
2179: LD_INT 43
2181: PUSH
2182: LD_INT 44
2184: PUSH
2185: LD_INT 45
2187: PUSH
2188: LD_INT 49
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 1
2199: PPUSH
2200: LD_INT 4
2202: PPUSH
2203: CALL_OW 12
2207: ARRAY
2208: ST_TO_ADDR
// vc_chassis = 22 ;
2209: LD_ADDR_OWVAR 37
2213: PUSH
2214: LD_INT 22
2216: ST_TO_ADDR
// veh = CreateVehicle ;
2217: LD_ADDR_VAR 0 3
2221: PUSH
2222: CALL_OW 45
2226: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 3
2234: PPUSH
2235: LD_INT 0
2237: PPUSH
2238: CALL_OW 49
// end ;
2242: GO 2155
2244: POP
2245: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2246: LD_ADDR_VAR 0 4
2250: PUSH
2251: LD_INT 22
2253: PUSH
2254: LD_INT 7
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 21
2263: PUSH
2264: LD_INT 2
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 58
2273: PUSH
2274: EMPTY
2275: LIST
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: PPUSH
2282: CALL_OW 69
2286: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2287: LD_EXP 19
2291: PPUSH
2292: LD_VAR 0 4
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2305: LD_EXP 20
2309: PPUSH
2310: LD_VAR 0 4
2314: PUSH
2315: LD_INT 2
2317: ARRAY
2318: PPUSH
2319: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2323: LD_EXP 21
2327: PPUSH
2328: LD_VAR 0 4
2332: PUSH
2333: LD_INT 3
2335: ARRAY
2336: PPUSH
2337: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2341: LD_EXP 22
2345: PPUSH
2346: LD_VAR 0 4
2350: PUSH
2351: LD_INT 4
2353: ARRAY
2354: PPUSH
2355: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2359: LD_EXP 23
2363: PPUSH
2364: LD_VAR 0 4
2368: PUSH
2369: LD_INT 5
2371: ARRAY
2372: PPUSH
2373: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2377: LD_EXP 19
2381: PPUSH
2382: LD_INT 3
2384: PPUSH
2385: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2389: LD_EXP 20
2393: PUSH
2394: LD_EXP 23
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: PPUSH
2403: LD_INT 9
2405: PPUSH
2406: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2410: LD_ADDR_VAR 0 4
2414: PUSH
2415: LD_INT 22
2417: PUSH
2418: LD_INT 7
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PPUSH
2425: CALL_OW 69
2429: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2430: LD_VAR 0 4
2434: PPUSH
2435: LD_INT 107
2437: PPUSH
2438: LD_INT 118
2440: PPUSH
2441: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2445: LD_INT 35
2447: PPUSH
2448: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2452: LD_VAR 0 4
2456: PPUSH
2457: LD_INT 34
2459: PUSH
2460: LD_INT 49
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 72
2471: PPUSH
2472: LD_EXP 18
2476: PPUSH
2477: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2481: LD_VAR 0 4
2485: PPUSH
2486: LD_INT 3
2488: PUSH
2489: LD_INT 34
2491: PUSH
2492: LD_INT 49
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 72
2507: PPUSH
2508: LD_INT 107
2510: PPUSH
2511: LD_INT 118
2513: PPUSH
2514: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2518: LD_VAR 0 4
2522: PPUSH
2523: LD_INT 34
2525: PUSH
2526: LD_INT 49
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 72
2537: PUSH
2538: LD_INT 0
2540: EQUAL
2541: PUSH
2542: LD_EXP 18
2546: PPUSH
2547: CALL_OW 303
2551: OR
2552: IFFALSE 2445
// repeat wait ( 0 0$1 ) ;
2554: LD_INT 35
2556: PPUSH
2557: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2561: LD_ADDR_VAR 0 4
2565: PUSH
2566: LD_INT 22
2568: PUSH
2569: LD_INT 7
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 69
2580: PUSH
2581: LD_EXP 17
2585: DIFF
2586: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2587: LD_VAR 0 4
2591: PPUSH
2592: LD_INT 107
2594: PPUSH
2595: LD_INT 118
2597: PPUSH
2598: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2602: LD_EXP 17
2606: PPUSH
2607: CALL_OW 302
2611: PUSH
2612: LD_EXP 17
2616: PPUSH
2617: CALL_OW 310
2621: NOT
2622: AND
2623: IFFALSE 2640
// ComMoveXY ( Burlak , 107 , 118 ) ;
2625: LD_EXP 17
2629: PPUSH
2630: LD_INT 107
2632: PPUSH
2633: LD_INT 118
2635: PPUSH
2636: CALL_OW 111
// until not tmp ;
2640: LD_VAR 0 4
2644: NOT
2645: IFFALSE 2554
// end ; end_of_file
2647: LD_VAR 0 1
2651: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2652: LD_EXP 31
2656: IFFALSE 2832
2658: GO 2660
2660: DISABLE
2661: LD_INT 0
2663: PPUSH
2664: PPUSH
// begin enable ;
2665: ENABLE
// rnd = 0 ;
2666: LD_ADDR_VAR 0 2
2670: PUSH
2671: LD_INT 0
2673: ST_TO_ADDR
// uc_side = 8 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 8
2681: ST_TO_ADDR
// uc_nation = 2 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 2
2689: ST_TO_ADDR
// hc_name =  ;
2690: LD_ADDR_OWVAR 26
2694: PUSH
2695: LD_STRING 
2697: ST_TO_ADDR
// hc_gallery =  ;
2698: LD_ADDR_OWVAR 33
2702: PUSH
2703: LD_STRING 
2705: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2706: LD_INT 0
2708: PPUSH
2709: LD_INT 4
2711: PPUSH
2712: LD_INT 10
2714: PPUSH
2715: CALL_OW 380
// un = CreateHuman ;
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2729: LD_VAR 0 1
2733: PPUSH
2734: LD_INT 8
2736: PUSH
2737: LD_INT 9
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_INT 2
2749: PPUSH
2750: CALL_OW 12
2754: ARRAY
2755: PPUSH
2756: LD_INT 0
2758: PPUSH
2759: CALL_OW 49
// SetTag ( un , 1 ) ;
2763: LD_VAR 0 1
2767: PPUSH
2768: LD_INT 1
2770: PPUSH
2771: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: LD_INT 1
2782: PPUSH
2783: LD_EXP 31
2787: PPUSH
2788: CALL_OW 12
2792: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
2793: LD_VAR 0 1
2797: PPUSH
2798: LD_EXP 31
2802: PUSH
2803: LD_VAR 0 2
2807: ARRAY
2808: PUSH
2809: LD_INT 1
2811: ARRAY
2812: PPUSH
2813: LD_EXP 31
2817: PUSH
2818: LD_VAR 0 2
2822: ARRAY
2823: PUSH
2824: LD_INT 2
2826: ARRAY
2827: PPUSH
2828: CALL_OW 158
// end ;
2832: PPOPN 2
2834: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
2835: LD_INT 22
2837: PUSH
2838: LD_INT 8
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PUSH
2845: LD_INT 3
2847: PUSH
2848: LD_INT 61
2850: PUSH
2851: EMPTY
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: LD_INT 33
2860: PUSH
2861: LD_INT 2
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: IFFALSE 2950
2879: GO 2881
2881: DISABLE
2882: LD_INT 0
2884: PPUSH
// begin enable ;
2885: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
2886: LD_ADDR_VAR 0 1
2890: PUSH
2891: LD_INT 22
2893: PUSH
2894: LD_INT 8
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: LD_INT 3
2903: PUSH
2904: LD_INT 61
2906: PUSH
2907: EMPTY
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: LD_INT 33
2916: PUSH
2917: LD_INT 2
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: PPUSH
2929: CALL_OW 69
2933: PUSH
2934: FOR_IN
2935: IFFALSE 2948
// Connect ( i ) ;
2937: LD_VAR 0 1
2941: PPUSH
2942: CALL 5902 0 1
2946: GO 2934
2948: POP
2949: POP
// end ; end_of_file
2950: PPOPN 1
2952: END
// every 1 do
2953: GO 2955
2955: DISABLE
// begin InGameOn ;
2956: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 21
2972: PUSH
2973: LD_INT 2
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: PUSH
2989: LD_INT 1
2991: ARRAY
2992: PPUSH
2993: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
2997: LD_INT 22
2999: PUSH
3000: LD_INT 1
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 21
3009: PUSH
3010: LD_INT 2
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 69
3025: PPUSH
3026: LD_INT 69
3028: PPUSH
3029: LD_INT 94
3031: PPUSH
3032: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3036: LD_EXP 1
3040: PPUSH
3041: LD_STRING D2-JMM-1
3043: PPUSH
3044: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3048: LD_INT 22
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 21
3060: PUSH
3061: LD_INT 2
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: PUSH
3077: LD_INT 1
3079: ARRAY
3080: PPUSH
3081: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3085: LD_EXP 2
3089: PPUSH
3090: LD_STRING D2-Huck-1
3092: PPUSH
3093: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 2
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PPUSH
3121: CALL_OW 69
3125: PUSH
3126: LD_INT 1
3128: ARRAY
3129: PPUSH
3130: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3134: LD_EXP 1
3138: PPUSH
3139: LD_STRING D2-JMM-2
3141: PPUSH
3142: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3146: LD_INT 22
3148: PUSH
3149: LD_INT 1
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: LD_INT 21
3158: PUSH
3159: LD_INT 2
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PPUSH
3170: CALL_OW 69
3174: PUSH
3175: LD_INT 1
3177: ARRAY
3178: PPUSH
3179: CALL_OW 87
// InGameOff ;
3183: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3187: LD_STRING M1
3189: PPUSH
3190: CALL_OW 337
// SaveForQuickRestart ;
3194: CALL_OW 22
// end ;
3198: END
// every 10 10$0 do
3199: GO 3201
3201: DISABLE
// begin DialogueOn ;
3202: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3206: LD_EXP 15
3210: PPUSH
3211: LD_STRING D3-Pow-1
3213: PPUSH
3214: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3218: LD_EXP 1
3222: PPUSH
3223: LD_STRING D3-JMM-1
3225: PPUSH
3226: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3230: LD_EXP 15
3234: PPUSH
3235: LD_STRING D3-Pow-2
3237: PPUSH
3238: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3242: LD_EXP 1
3246: PPUSH
3247: LD_STRING D3-JMM-2
3249: PPUSH
3250: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3254: LD_EXP 15
3258: PPUSH
3259: LD_STRING D3-Pow-3
3261: PPUSH
3262: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3266: LD_EXP 1
3270: PPUSH
3271: LD_STRING D3-JMM-3
3273: PPUSH
3274: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3278: LD_EXP 15
3282: PPUSH
3283: LD_STRING D3-Pow-4
3285: PPUSH
3286: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3290: LD_EXP 1
3294: PPUSH
3295: LD_STRING D3-JMM-4
3297: PPUSH
3298: CALL_OW 88
// DialogueOff ;
3302: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3306: LD_STRING M2
3308: PPUSH
3309: CALL_OW 337
// wait ( 2 2$30 ) ;
3313: LD_INT 5250
3315: PPUSH
3316: CALL_OW 67
// PrepareBurlak ;
3320: CALL 1894 0 0
// BurlakArmy ;
3324: CALL 2040 0 0
// end ;
3328: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3329: LD_INT 1
3331: PPUSH
3332: LD_EXP 18
3336: PPUSH
3337: CALL_OW 292
3341: IFFALSE 3500
3343: GO 3345
3345: DISABLE
// begin DialogueOn ;
3346: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3350: LD_EXP 18
3354: PPUSH
3355: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3359: LD_INT 22
3361: PUSH
3362: LD_INT 1
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 26
3371: PUSH
3372: LD_INT 1
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 2
3381: PUSH
3382: LD_INT 25
3384: PUSH
3385: LD_INT 1
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: PUSH
3392: LD_INT 25
3394: PUSH
3395: LD_INT 2
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 25
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 25
3414: PUSH
3415: LD_INT 4
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: LD_INT 25
3424: PUSH
3425: LD_INT 5
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: LIST
3444: PPUSH
3445: CALL_OW 69
3449: PPUSH
3450: LD_STRING D5-Sol1-1
3452: PPUSH
3453: LD_STRING D5-FSol1-1
3455: PPUSH
3456: CALL 6256 0 3
// Say ( JMM , D5-JMM-1 ) ;
3460: LD_EXP 1
3464: PPUSH
3465: LD_STRING D5-JMM-1
3467: PPUSH
3468: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3472: LD_EXP 17
3476: PPUSH
3477: LD_STRING DAmer-Bur-1
3479: PPUSH
3480: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3484: LD_EXP 1
3488: PPUSH
3489: LD_STRING DAmer-JMM-1
3491: PPUSH
3492: CALL_OW 88
// DialogueOff ;
3496: CALL_OW 7
// end ;
3500: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3501: LD_INT 4
3503: PPUSH
3504: LD_INT 22
3506: PUSH
3507: LD_INT 7
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PPUSH
3514: CALL_OW 70
3518: IFFALSE 3917
3520: GO 3522
3522: DISABLE
3523: LD_INT 0
3525: PPUSH
// begin enable ;
3526: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3527: LD_ADDR_VAR 0 1
3531: PUSH
3532: LD_INT 4
3534: PPUSH
3535: LD_INT 22
3537: PUSH
3538: LD_INT 7
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PPUSH
3545: CALL_OW 70
3549: PUSH
3550: FOR_IN
3551: IFFALSE 3915
// begin if i = Burlak or i = Masha then
3553: LD_VAR 0 1
3557: PUSH
3558: LD_EXP 17
3562: EQUAL
3563: PUSH
3564: LD_VAR 0 1
3568: PUSH
3569: LD_EXP 18
3573: EQUAL
3574: OR
3575: IFFALSE 3722
// begin RemoveUnit ( i ) ;
3577: LD_VAR 0 1
3581: PPUSH
3582: CALL_OW 64
// DialogueOn ;
3586: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3590: LD_EXP 1
3594: PPUSH
3595: LD_STRING D5a-JMM-1
3597: PPUSH
3598: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3602: LD_INT 22
3604: PUSH
3605: LD_INT 1
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PUSH
3612: LD_INT 26
3614: PUSH
3615: LD_INT 1
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 2
3624: PUSH
3625: LD_INT 25
3627: PUSH
3628: LD_INT 1
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 25
3637: PUSH
3638: LD_INT 2
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 25
3647: PUSH
3648: LD_INT 3
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: PUSH
3655: LD_INT 25
3657: PUSH
3658: LD_INT 4
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: PUSH
3665: LD_INT 25
3667: PUSH
3668: LD_INT 5
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: PPUSH
3688: CALL_OW 69
3692: PPUSH
3693: LD_STRING D5a-Sol1-1
3695: PPUSH
3696: LD_STRING D5-FSol1-1
3698: PPUSH
3699: CALL 6256 0 3
// DialogueOff ;
3703: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3707: LD_STRING M2b
3709: PPUSH
3710: CALL_OW 337
// spawnBurlak = 0 ;
3714: LD_ADDR_EXP 27
3718: PUSH
3719: LD_INT 0
3721: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
3722: LD_VAR 0 1
3726: PPUSH
3727: CALL_OW 247
3731: PUSH
3732: LD_INT 2
3734: EQUAL
3735: PUSH
3736: LD_VAR 0 1
3740: PPUSH
3741: CALL_OW 263
3745: PUSH
3746: LD_INT 1
3748: EQUAL
3749: AND
3750: IFFALSE 3878
// begin case IsDrivenBy ( i ) of Gnyevko :
3752: LD_VAR 0 1
3756: PPUSH
3757: CALL_OW 311
3761: PUSH
3762: LD_EXP 19
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3785
3772: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
3773: LD_INT 1
3775: PPUSH
3776: LD_STRING 13_Gnyevko_1
3778: PPUSH
3779: CALL_OW 39
3783: GO 3878
3785: LD_EXP 20
3789: DOUBLE
3790: EQUAL
3791: IFTRUE 3795
3793: GO 3808
3795: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
3796: LD_INT 1
3798: PPUSH
3799: LD_STRING 13_Titov_1
3801: PPUSH
3802: CALL_OW 39
3806: GO 3878
3808: LD_EXP 21
3812: DOUBLE
3813: EQUAL
3814: IFTRUE 3818
3816: GO 3831
3818: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
3819: LD_INT 1
3821: PPUSH
3822: LD_STRING 13_Xavier_1
3824: PPUSH
3825: CALL_OW 39
3829: GO 3878
3831: LD_EXP 22
3835: DOUBLE
3836: EQUAL
3837: IFTRUE 3841
3839: GO 3854
3841: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
3842: LD_INT 1
3844: PPUSH
3845: LD_STRING 13_Belkov_1
3847: PPUSH
3848: CALL_OW 39
3852: GO 3878
3854: LD_EXP 23
3858: DOUBLE
3859: EQUAL
3860: IFTRUE 3864
3862: GO 3877
3864: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
3865: LD_INT 1
3867: PPUSH
3868: LD_STRING 13_Lipshchin_1
3870: PPUSH
3871: CALL_OW 39
3875: GO 3878
3877: POP
// end ; if GetWeapon ( i ) = 49 then
3878: LD_VAR 0 1
3882: PPUSH
3883: CALL_OW 264
3887: PUSH
3888: LD_INT 49
3890: EQUAL
3891: IFFALSE 3904
// DestroyUnit ( i ) else
3893: LD_VAR 0 1
3897: PPUSH
3898: CALL_OW 65
3902: GO 3913
// RemoveUnit ( i ) ;
3904: LD_VAR 0 1
3908: PPUSH
3909: CALL_OW 64
// end ;
3913: GO 3550
3915: POP
3916: POP
// end ;
3917: PPOPN 1
3919: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
3920: LD_EXP 17
3924: PPUSH
3925: CALL_OW 302
3929: PUSH
3930: LD_EXP 18
3934: PPUSH
3935: CALL_OW 256
3939: PUSH
3940: LD_INT 500
3942: LESS
3943: AND
3944: PUSH
3945: LD_EXP 18
3949: PPUSH
3950: CALL_OW 255
3954: PUSH
3955: LD_INT 7
3957: EQUAL
3958: AND
3959: IFFALSE 3979
3961: GO 3963
3963: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
3964: LD_EXP 17
3968: PPUSH
3969: LD_INT 107
3971: PPUSH
3972: LD_INT 118
3974: PPUSH
3975: CALL_OW 111
3979: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
3980: LD_EXP 17
3984: PPUSH
3985: CALL_OW 301
3989: PUSH
3990: LD_EXP 27
3994: PUSH
3995: LD_INT 1
3997: EQUAL
3998: AND
3999: IFFALSE 4132
4001: GO 4003
4003: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4004: LD_EXP 1
4008: PPUSH
4009: LD_STRING D5b-JMM-1
4011: PPUSH
4012: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4016: LD_INT 22
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 26
4028: PUSH
4029: LD_INT 1
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 2
4038: PUSH
4039: LD_INT 25
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 25
4051: PUSH
4052: LD_INT 2
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 25
4061: PUSH
4062: LD_INT 3
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: LD_INT 25
4071: PUSH
4072: LD_INT 4
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 5
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PPUSH
4107: LD_STRING D5b-Sol1-1
4109: PPUSH
4110: LD_STRING 
4112: PPUSH
4113: CALL 6256 0 3
// ChangeMissionObjectives ( M2a ) ;
4117: LD_STRING M2a
4119: PPUSH
4120: CALL_OW 337
// burlakStatus = 1 ;
4124: LD_ADDR_EXP 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// end ;
4132: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4133: LD_EXP 2
4137: PPUSH
4138: CALL_OW 301
4142: IFFALSE 4279
4144: GO 4146
4146: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4147: LD_EXP 1
4151: PPUSH
4152: LD_STRING D6-JMM-1
4154: PPUSH
4155: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4159: LD_INT 22
4161: PUSH
4162: LD_INT 1
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PUSH
4169: LD_INT 26
4171: PUSH
4172: LD_INT 1
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 2
4181: PUSH
4182: LD_INT 25
4184: PUSH
4185: LD_INT 1
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 25
4194: PUSH
4195: LD_INT 2
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: LD_INT 25
4204: PUSH
4205: LD_INT 3
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 25
4214: PUSH
4215: LD_INT 4
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 5
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: LIST
4244: PPUSH
4245: CALL_OW 69
4249: PPUSH
4250: LD_STRING D6-Sol1-1
4252: PPUSH
4253: LD_STRING 
4255: PPUSH
4256: CALL 6256 0 3
// Say ( JMM , D6-JMM-2 ) ;
4260: LD_EXP 1
4264: PPUSH
4265: LD_STRING D6-JMM-2
4267: PPUSH
4268: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4272: LD_STRING M1a
4274: PPUSH
4275: CALL_OW 337
// end ;
4279: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4280: LD_INT 25
4282: PPUSH
4283: LD_INT 1
4285: PPUSH
4286: CALL_OW 321
4290: PUSH
4291: LD_INT 2
4293: EQUAL
4294: IFFALSE 4311
4296: GO 4298
4298: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4299: LD_EXP 2
4303: PPUSH
4304: LD_STRING D6-Huck-2
4306: PPUSH
4307: CALL_OW 88
// end ;
4311: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4312: LD_INT 22
4314: PUSH
4315: LD_INT 1
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 2
4324: PUSH
4325: LD_INT 34
4327: PUSH
4328: LD_INT 8
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: LD_INT 35
4337: PUSH
4338: LD_INT 8
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 69
4358: PUSH
4359: LD_INT 0
4361: GREATER
4362: IFFALSE 4554
4364: GO 4366
4366: DISABLE
4367: LD_INT 0
4369: PPUSH
4370: PPUSH
// begin enable ;
4371: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4372: LD_ADDR_VAR 0 1
4376: PUSH
4377: LD_INT 5
4379: PPUSH
4380: LD_INT 22
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 21
4392: PUSH
4393: LD_INT 3
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 30
4402: PUSH
4403: LD_INT 1
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 57
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 70
4433: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4434: LD_ADDR_VAR 0 2
4438: PUSH
4439: LD_INT 5
4441: PPUSH
4442: LD_INT 22
4444: PUSH
4445: LD_INT 1
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 21
4454: PUSH
4455: LD_INT 3
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 30
4464: PUSH
4465: LD_INT 5
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 3
4474: PUSH
4475: LD_INT 57
4477: PUSH
4478: EMPTY
4479: LIST
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: PPUSH
4491: CALL_OW 70
4495: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4496: LD_VAR 0 1
4500: PUSH
4501: LD_INT 0
4503: GREATER
4504: PUSH
4505: LD_VAR 0 2
4509: PUSH
4510: LD_INT 0
4512: GREATER
4513: AND
4514: IFFALSE 4554
// begin disable ;
4516: DISABLE
// DialogueOn ;
4517: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4521: LD_EXP 1
4525: PPUSH
4526: LD_STRING D7-JMM-1
4528: PPUSH
4529: CALL_OW 88
// DialogueOff ;
4533: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4537: LD_STRING M4
4539: PPUSH
4540: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4544: LD_INT 5
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 424
// end ; end ;
4554: PPOPN 2
4556: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4557: LD_INT 6
4559: PPUSH
4560: LD_INT 22
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 25
4572: PUSH
4573: LD_INT 4
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PPUSH
4584: CALL_OW 70
4588: PUSH
4589: LD_INT 0
4591: GREATER
4592: PUSH
4593: LD_EXP 37
4597: PUSH
4598: LD_INT 1
4600: EQUAL
4601: AND
4602: PUSH
4603: LD_EXP 29
4607: PUSH
4608: LD_INT 0
4610: EQUAL
4611: AND
4612: IFFALSE 4677
4614: GO 4616
4616: DISABLE
// begin enable ;
4617: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4618: LD_ADDR_EXP 26
4622: PUSH
4623: LD_INT 6
4625: PPUSH
4626: LD_INT 22
4628: PUSH
4629: LD_INT 1
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 25
4638: PUSH
4639: LD_INT 4
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PPUSH
4650: CALL_OW 70
4654: PUSH
4655: LD_INT 1
4657: ARRAY
4658: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4659: LD_INT 6
4661: PPUSH
4662: LD_INT 0
4664: PPUSH
4665: CALL_OW 424
// radationResearched = 1 ;
4669: LD_ADDR_EXP 29
4673: PUSH
4674: LD_INT 1
4676: ST_TO_ADDR
// end ;
4677: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4678: LD_EXP 26
4682: PPUSH
4683: CALL_OW 301
4687: PUSH
4688: LD_EXP 29
4692: PUSH
4693: LD_INT 1
4695: EQUAL
4696: AND
4697: IFFALSE 4733
4699: GO 4701
4701: DISABLE
// begin enable ;
4702: ENABLE
// radationResearched = 0 ;
4703: LD_ADDR_EXP 29
4707: PUSH
4708: LD_INT 0
4710: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4711: LD_INT 6
4713: PPUSH
4714: LD_INT 1
4716: PPUSH
4717: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4721: LD_EXP 1
4725: PPUSH
4726: LD_STRING D9a-JMM-1
4728: PPUSH
4729: CALL_OW 88
// end ; end_of_file
4733: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4734: LD_VAR 0 5
4738: PUSH
4739: LD_INT 8
4741: EQUAL
4742: PUSH
4743: LD_EXP 35
4747: PUSH
4748: LD_INT 0
4750: EQUAL
4751: AND
4752: IFFALSE 4805
// begin eventVar1 = 1 ;
4754: LD_ADDR_EXP 35
4758: PUSH
4759: LD_INT 1
4761: ST_TO_ADDR
// DialogueOn ;
4762: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4766: LD_EXP 1
4770: PPUSH
4771: LD_STRING D6a-JMM-1
4773: PPUSH
4774: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4778: LD_EXP 15
4782: PPUSH
4783: LD_STRING D6a-Pow-1
4785: PPUSH
4786: CALL_OW 94
// DialogueOff ;
4790: CALL_OW 7
// wait ( 3 3$0 ) ;
4794: LD_INT 6300
4796: PPUSH
4797: CALL_OW 67
// PowellSupport ;
4801: CALL 1666 0 0
// end ; end ;
4805: PPOPN 5
4807: END
// on UnitDestroyed ( un ) do begin if un = JMM then
4808: LD_VAR 0 1
4812: PUSH
4813: LD_EXP 1
4817: EQUAL
4818: IFFALSE 4827
// YouLost ( JMM ) ;
4820: LD_STRING JMM
4822: PPUSH
4823: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
4827: LD_VAR 0 1
4831: PPUSH
4832: CALL_OW 264
4836: PUSH
4837: LD_INT 31
4839: EQUAL
4840: IFFALSE 4856
// achivCounter := achivCounter + 1 ;
4842: LD_ADDR_EXP 41
4846: PUSH
4847: LD_EXP 41
4851: PUSH
4852: LD_INT 1
4854: PLUS
4855: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
4856: LD_VAR 0 1
4860: PPUSH
4861: CALL_OW 255
4865: PUSH
4866: LD_INT 1
4868: NONEQUAL
4869: PUSH
4870: LD_VAR 0 1
4874: PPUSH
4875: CALL_OW 247
4879: PUSH
4880: LD_INT 2
4882: EQUAL
4883: AND
4884: IFFALSE 4900
// destroyCounter := destroyCounter + 1 ;
4886: LD_ADDR_EXP 42
4890: PUSH
4891: LD_EXP 42
4895: PUSH
4896: LD_INT 1
4898: PLUS
4899: ST_TO_ADDR
// end ;
4900: PPOPN 1
4902: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
4903: LD_VAR 0 2
4907: PUSH
4908: LD_EXP 18
4912: EQUAL
4913: IFFALSE 4922
// SetAchievement ( ACH_MASHA ) ;
4915: LD_STRING ACH_MASHA
4917: PPUSH
4918: CALL_OW 543
// end ;
4922: PPOPN 4
4924: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4925: LD_VAR 0 1
4929: PPUSH
4930: CALL_OW 264
4934: PUSH
4935: LD_INT 8
4937: EQUAL
4938: PUSH
4939: LD_EXP 36
4943: PUSH
4944: LD_INT 0
4946: EQUAL
4947: AND
4948: IFFALSE 5017
// begin eventVar2 = 1 ;
4950: LD_ADDR_EXP 36
4954: PUSH
4955: LD_INT 1
4957: ST_TO_ADDR
// DialogueOn ;
4958: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
4962: LD_EXP 1
4966: PPUSH
4967: LD_STRING D6b-JMM-1
4969: PPUSH
4970: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
4974: LD_EXP 15
4978: PPUSH
4979: LD_STRING D6b-Pow-1
4981: PPUSH
4982: CALL_OW 94
// DialogueOff ;
4986: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
4990: LD_INT 5
4992: PPUSH
4993: LD_INT 1
4995: PPUSH
4996: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5000: LD_INT 7
5002: PPUSH
5003: LD_INT 1
5005: PPUSH
5006: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5010: LD_STRING M3
5012: PPUSH
5013: CALL_OW 337
// end ; end ;
5017: PPOPN 2
5019: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5020: LD_VAR 0 2
5024: PPUSH
5025: LD_VAR 0 3
5029: PPUSH
5030: LD_INT 5
5032: PPUSH
5033: CALL_OW 309
5037: PUSH
5038: LD_EXP 37
5042: PUSH
5043: LD_INT 0
5045: EQUAL
5046: AND
5047: IFFALSE 5276
// begin eventVar3 = 1 ;
5049: LD_ADDR_EXP 37
5053: PUSH
5054: LD_INT 1
5056: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5057: LD_INT 175
5059: PPUSH
5060: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5064: LD_INT 7
5066: PPUSH
5067: LD_INT 22
5069: PUSH
5070: LD_INT 1
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: LD_INT 21
5079: PUSH
5080: LD_INT 2
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: PUSH
5087: LD_INT 34
5089: PUSH
5090: LD_INT 11
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: PPUSH
5102: CALL_OW 70
5106: PUSH
5107: LD_INT 0
5109: GREATER
5110: IFFALSE 5129
// begin radarOnSpot = 1 ;
5112: LD_ADDR_EXP 30
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5120: LD_STRING M3a
5122: PPUSH
5123: CALL_OW 337
// end else
5127: GO 5136
// begin ChangeMissionObjectives ( M3b ) ;
5129: LD_STRING M3b
5131: PPUSH
5132: CALL_OW 337
// end ; DialogueOn ;
5136: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5140: LD_EXP 2
5144: PPUSH
5145: LD_STRING D8-Huck-1
5147: PPUSH
5148: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5152: LD_EXP 1
5156: PPUSH
5157: LD_STRING D8-JMM-1
5159: PPUSH
5160: CALL_OW 88
// if IsOk ( Stevens ) then
5164: LD_EXP 2
5168: PPUSH
5169: CALL_OW 302
5173: IFFALSE 5235
// begin Say ( Stevens , D8-Huck-2 ) ;
5175: LD_EXP 2
5179: PPUSH
5180: LD_STRING D8-Huck-2
5182: PPUSH
5183: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5187: LD_EXP 1
5191: PPUSH
5192: LD_STRING D8-JMM-2
5194: PPUSH
5195: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5199: LD_EXP 2
5203: PPUSH
5204: LD_STRING D8-Huck-3
5206: PPUSH
5207: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5211: LD_EXP 1
5215: PPUSH
5216: LD_STRING D8-JMM-3
5218: PPUSH
5219: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5223: LD_EXP 2
5227: PPUSH
5228: LD_STRING D8-Huck-4
5230: PPUSH
5231: CALL_OW 88
// end ; DialogueOff ;
5235: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5239: LD_INT 5
5241: PPUSH
5242: LD_INT 0
5244: PPUSH
5245: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5249: LD_INT 7
5251: PPUSH
5252: LD_INT 0
5254: PPUSH
5255: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5259: LD_INT 6
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5269: LD_STRING M5
5271: PPUSH
5272: CALL_OW 337
// end ; end ;
5276: PPOPN 3
5278: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5279: LD_EXP 26
5283: PPUSH
5284: CALL_OW 302
5288: PUSH
5289: LD_VAR 0 2
5293: PUSH
5294: LD_EXP 26
5298: EQUAL
5299: AND
5300: PUSH
5301: LD_EXP 38
5305: PUSH
5306: LD_INT 0
5308: EQUAL
5309: AND
5310: PUSH
5311: LD_EXP 37
5315: PUSH
5316: LD_INT 1
5318: EQUAL
5319: AND
5320: IFFALSE 5366
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5322: LD_VAR 0 1
5326: PPUSH
5327: LD_INT 1
5329: PPUSH
5330: CALL_OW 268
5334: PUSH
5335: LD_INT 11
5337: EQUAL
5338: PUSH
5339: LD_VAR 0 1
5343: PPUSH
5344: LD_INT 2
5346: PPUSH
5347: CALL_OW 268
5351: PUSH
5352: LD_INT 11
5354: EQUAL
5355: OR
5356: IFFALSE 5366
// eventVar4 = 1 ;
5358: LD_ADDR_EXP 38
5362: PUSH
5363: LD_INT 1
5365: ST_TO_ADDR
// end ;
5366: PPOPN 2
5368: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5369: LD_INT 0
5371: PPUSH
5372: PPUSH
// begin if GetNation ( unit ) = 2 then
5373: LD_VAR 0 1
5377: PPUSH
5378: CALL_OW 248
5382: PUSH
5383: LD_INT 2
5385: EQUAL
5386: IFFALSE 5664
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5388: LD_ADDR_EXP 32
5392: PUSH
5393: LD_EXP 32
5397: PUSH
5398: LD_INT 1
5400: PLUS
5401: ST_TO_ADDR
// for i := 1 to sibDeposits do
5402: LD_ADDR_VAR 0 4
5406: PUSH
5407: DOUBLE
5408: LD_INT 1
5410: DEC
5411: ST_TO_ADDR
5412: LD_EXP 31
5416: PUSH
5417: FOR_TO
5418: IFFALSE 5520
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5420: LD_EXP 31
5424: PUSH
5425: LD_VAR 0 4
5429: ARRAY
5430: PUSH
5431: LD_INT 1
5433: ARRAY
5434: PUSH
5435: LD_VAR 0 2
5439: EQUAL
5440: PUSH
5441: LD_EXP 31
5445: PUSH
5446: LD_VAR 0 4
5450: ARRAY
5451: PUSH
5452: LD_INT 2
5454: ARRAY
5455: PUSH
5456: LD_VAR 0 3
5460: EQUAL
5461: AND
5462: IFFALSE 5518
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5464: LD_ADDR_EXP 31
5468: PUSH
5469: LD_EXP 31
5473: PPUSH
5474: LD_VAR 0 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: PPUSH
5486: CALL_OW 3
5490: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5491: LD_ADDR_EXP 31
5495: PUSH
5496: LD_EXP 31
5500: PPUSH
5501: LD_VAR 0 4
5505: PUSH
5506: EMPTY
5507: LIST
5508: PUSH
5509: LD_INT 2
5511: ARRAY
5512: PPUSH
5513: CALL_OW 3
5517: ST_TO_ADDR
// end ;
5518: GO 5417
5520: POP
5521: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5522: LD_EXP 39
5526: PUSH
5527: LD_INT 0
5529: EQUAL
5530: PUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: LD_VAR 0 3
5540: PPUSH
5541: CALL_OW 428
5545: PUSH
5546: LD_INT 22
5548: PUSH
5549: LD_INT 1
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PPUSH
5556: CALL_OW 69
5560: IN
5561: AND
5562: IFFALSE 5664
// begin eventVar5 = 1 ;
5564: LD_ADDR_EXP 39
5568: PUSH
5569: LD_INT 1
5571: ST_TO_ADDR
// DialogueOn ;
5572: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5576: LD_EXP 2
5580: PPUSH
5581: LD_STRING D4-Sci1-1
5583: PPUSH
5584: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5588: LD_EXP 1
5592: PPUSH
5593: LD_STRING D4-JMM-1
5595: PPUSH
5596: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5600: LD_EXP 2
5604: PPUSH
5605: LD_STRING D4-Sci1-2
5607: PPUSH
5608: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5612: LD_EXP 1
5616: PPUSH
5617: LD_STRING D4-JMM-2
5619: PPUSH
5620: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5624: LD_EXP 2
5628: PPUSH
5629: LD_STRING D4-Sci1-3
5631: PPUSH
5632: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5636: LD_EXP 1
5640: PPUSH
5641: LD_STRING D4-JMM-3
5643: PPUSH
5644: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5648: LD_EXP 1
5652: PPUSH
5653: LD_STRING D4-JMM-3a
5655: PPUSH
5656: CALL_OW 88
// DialogueOff ;
5660: CALL_OW 7
// end ; end ; end ;
5664: PPOPN 5
5666: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5667: LD_VAR 0 1
5671: PPUSH
5672: CALL_OW 255
5676: PUSH
5677: LD_INT 1
5679: EQUAL
5680: PUSH
5681: LD_VAR 0 1
5685: PPUSH
5686: CALL_OW 266
5690: PUSH
5691: LD_INT 0
5693: EQUAL
5694: AND
5695: PUSH
5696: LD_INT 22
5698: PUSH
5699: LD_INT 1
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 21
5708: PUSH
5709: LD_INT 3
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 2
5718: PUSH
5719: LD_INT 30
5721: PUSH
5722: LD_INT 0
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 30
5731: PUSH
5732: LD_INT 1
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: LIST
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: PPUSH
5749: CALL_OW 69
5753: PUSH
5754: LD_INT 1
5756: EQUAL
5757: AND
5758: IFFALSE 5772
// SetBName ( building , omega ) ;
5760: LD_VAR 0 1
5764: PPUSH
5765: LD_STRING omega
5767: PPUSH
5768: CALL_OW 500
// end ;
5772: PPOPN 2
5774: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5775: LD_VAR 0 1
5779: PPUSH
5780: CALL 16722 0 1
// end ; end_of_file
5784: PPOPN 1
5786: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5787: LD_INT 0
5789: PPUSH
5790: PPUSH
// if exist_mode then
5791: LD_VAR 0 2
5795: IFFALSE 5814
// unit := CreateCharacter ( ident ) else
5797: LD_ADDR_VAR 0 4
5801: PUSH
5802: LD_VAR 0 1
5806: PPUSH
5807: CALL_OW 34
5811: ST_TO_ADDR
5812: GO 5829
// unit := NewCharacter ( ident ) ;
5814: LD_ADDR_VAR 0 4
5818: PUSH
5819: LD_VAR 0 1
5823: PPUSH
5824: CALL_OW 25
5828: ST_TO_ADDR
// result := unit ;
5829: LD_ADDR_VAR 0 3
5833: PUSH
5834: LD_VAR 0 4
5838: ST_TO_ADDR
// end ;
5839: LD_VAR 0 3
5843: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5844: LD_INT 0
5846: PPUSH
// vc_chassis := chassis ;
5847: LD_ADDR_OWVAR 37
5851: PUSH
5852: LD_VAR 0 1
5856: ST_TO_ADDR
// vc_engine := engine ;
5857: LD_ADDR_OWVAR 39
5861: PUSH
5862: LD_VAR 0 2
5866: ST_TO_ADDR
// vc_control := control ;
5867: LD_ADDR_OWVAR 38
5871: PUSH
5872: LD_VAR 0 3
5876: ST_TO_ADDR
// vc_weapon := weapon ;
5877: LD_ADDR_OWVAR 40
5881: PUSH
5882: LD_VAR 0 4
5886: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5887: LD_ADDR_OWVAR 41
5891: PUSH
5892: LD_VAR 0 5
5896: ST_TO_ADDR
// end ;
5897: LD_VAR 0 6
5901: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
5902: LD_INT 0
5904: PPUSH
5905: PPUSH
5906: PPUSH
5907: PPUSH
5908: PPUSH
5909: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5910: LD_VAR 0 1
5914: NOT
5915: PUSH
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 263
5925: PUSH
5926: LD_INT 2
5928: EQUAL
5929: NOT
5930: OR
5931: IFFALSE 5935
// exit ;
5933: GO 6251
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5935: LD_ADDR_VAR 0 6
5939: PUSH
5940: LD_INT 22
5942: PUSH
5943: LD_VAR 0 1
5947: PPUSH
5948: CALL_OW 255
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 2
5959: PUSH
5960: LD_INT 30
5962: PUSH
5963: LD_INT 36
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PUSH
5970: LD_INT 34
5972: PUSH
5973: LD_INT 31
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 69
5993: ST_TO_ADDR
// if not tmp then
5994: LD_VAR 0 6
5998: NOT
5999: IFFALSE 6003
// exit ;
6001: GO 6251
// result := [ ] ;
6003: LD_ADDR_VAR 0 2
6007: PUSH
6008: EMPTY
6009: ST_TO_ADDR
// for i in tmp do
6010: LD_ADDR_VAR 0 3
6014: PUSH
6015: LD_VAR 0 6
6019: PUSH
6020: FOR_IN
6021: IFFALSE 6092
// begin t := UnitsInside ( i ) ;
6023: LD_ADDR_VAR 0 4
6027: PUSH
6028: LD_VAR 0 3
6032: PPUSH
6033: CALL_OW 313
6037: ST_TO_ADDR
// if t then
6038: LD_VAR 0 4
6042: IFFALSE 6090
// for j in t do
6044: LD_ADDR_VAR 0 7
6048: PUSH
6049: LD_VAR 0 4
6053: PUSH
6054: FOR_IN
6055: IFFALSE 6088
// result := Insert ( result , result + 1 , j ) ;
6057: LD_ADDR_VAR 0 2
6061: PUSH
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_VAR 0 2
6071: PUSH
6072: LD_INT 1
6074: PLUS
6075: PPUSH
6076: LD_VAR 0 7
6080: PPUSH
6081: CALL_OW 2
6085: ST_TO_ADDR
6086: GO 6054
6088: POP
6089: POP
// end ;
6090: GO 6020
6092: POP
6093: POP
// if not result then
6094: LD_VAR 0 2
6098: NOT
6099: IFFALSE 6103
// exit ;
6101: GO 6251
// mech := result [ 1 ] ;
6103: LD_ADDR_VAR 0 5
6107: PUSH
6108: LD_VAR 0 2
6112: PUSH
6113: LD_INT 1
6115: ARRAY
6116: ST_TO_ADDR
// if result > 1 then
6117: LD_VAR 0 2
6121: PUSH
6122: LD_INT 1
6124: GREATER
6125: IFFALSE 6237
// for i = 2 to result do
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: DOUBLE
6133: LD_INT 2
6135: DEC
6136: ST_TO_ADDR
6137: LD_VAR 0 2
6141: PUSH
6142: FOR_TO
6143: IFFALSE 6235
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
6145: LD_ADDR_VAR 0 4
6149: PUSH
6150: LD_VAR 0 2
6154: PUSH
6155: LD_VAR 0 3
6159: ARRAY
6160: PPUSH
6161: LD_INT 3
6163: PPUSH
6164: CALL_OW 259
6168: PUSH
6169: LD_VAR 0 2
6173: PUSH
6174: LD_VAR 0 3
6178: ARRAY
6179: PPUSH
6180: CALL_OW 432
6184: MINUS
6185: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
6186: LD_VAR 0 4
6190: PUSH
6191: LD_VAR 0 5
6195: PPUSH
6196: LD_INT 3
6198: PPUSH
6199: CALL_OW 259
6203: PUSH
6204: LD_VAR 0 5
6208: PPUSH
6209: CALL_OW 432
6213: MINUS
6214: GREATEREQUAL
6215: IFFALSE 6233
// mech := result [ i ] ;
6217: LD_ADDR_VAR 0 5
6221: PUSH
6222: LD_VAR 0 2
6226: PUSH
6227: LD_VAR 0 3
6231: ARRAY
6232: ST_TO_ADDR
// end ;
6233: GO 6142
6235: POP
6236: POP
// ComLinkTo ( vehicle , mech ) ;
6237: LD_VAR 0 1
6241: PPUSH
6242: LD_VAR 0 5
6246: PPUSH
6247: CALL_OW 135
// end ;
6251: LD_VAR 0 2
6255: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6256: LD_INT 0
6258: PPUSH
6259: PPUSH
6260: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6261: LD_ADDR_VAR 0 1
6265: PUSH
6266: LD_VAR 0 1
6270: PUSH
6271: LD_EXP 1
6275: PUSH
6276: LD_EXP 2
6280: PUSH
6281: LD_EXP 3
6285: PUSH
6286: LD_EXP 4
6290: PUSH
6291: LD_EXP 5
6295: PUSH
6296: LD_EXP 6
6300: PUSH
6301: LD_EXP 7
6305: PUSH
6306: LD_EXP 8
6310: PUSH
6311: LD_EXP 9
6315: PUSH
6316: LD_EXP 10
6320: PUSH
6321: LD_EXP 11
6325: PUSH
6326: LD_EXP 12
6330: PUSH
6331: LD_EXP 13
6335: PUSH
6336: LD_EXP 14
6340: PUSH
6341: LD_EXP 15
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: DIFF
6363: ST_TO_ADDR
// if not characters then
6364: LD_VAR 0 1
6368: NOT
6369: IFFALSE 6373
// exit ;
6371: GO 6452
// speaker := characters [ rand ( 1 , characters ) ] ;
6373: LD_ADDR_VAR 0 6
6377: PUSH
6378: LD_VAR 0 1
6382: PUSH
6383: LD_INT 1
6385: PPUSH
6386: LD_VAR 0 1
6390: PPUSH
6391: CALL_OW 12
6395: ARRAY
6396: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6397: LD_VAR 0 6
6401: PPUSH
6402: CALL_OW 258
6406: PUSH
6407: LD_INT 1
6409: EQUAL
6410: IFFALSE 6428
// Say ( speaker , dialogMID ) else
6412: LD_VAR 0 6
6416: PPUSH
6417: LD_VAR 0 2
6421: PPUSH
6422: CALL_OW 88
6426: GO 6442
// Say ( speaker , dialogFID ) ;
6428: LD_VAR 0 6
6432: PPUSH
6433: LD_VAR 0 3
6437: PPUSH
6438: CALL_OW 88
// result := speaker ;
6442: LD_ADDR_VAR 0 4
6446: PUSH
6447: LD_VAR 0 6
6451: ST_TO_ADDR
// end ;
6452: LD_VAR 0 4
6456: RET
// export function PrepareDifficulty ; begin
6457: LD_INT 0
6459: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6460: LD_INT 5
6462: PPUSH
6463: LD_INT 8
6465: PPUSH
6466: LD_INT 2
6468: PPUSH
6469: CALL_OW 322
// if difficulty = 1 then
6473: LD_OWVAR 67
6477: PUSH
6478: LD_INT 1
6480: EQUAL
6481: IFFALSE 6600
// begin SetTech ( 66 , 8 , state_researched ) ;
6483: LD_INT 66
6485: PPUSH
6486: LD_INT 8
6488: PPUSH
6489: LD_INT 2
6491: PPUSH
6492: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6496: LD_INT 67
6498: PPUSH
6499: LD_INT 8
6501: PPUSH
6502: LD_INT 0
6504: PPUSH
6505: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6509: LD_INT 68
6511: PPUSH
6512: LD_INT 8
6514: PPUSH
6515: LD_INT 0
6517: PPUSH
6518: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6522: LD_INT 51
6524: PPUSH
6525: LD_INT 8
6527: PPUSH
6528: LD_INT 2
6530: PPUSH
6531: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6535: LD_INT 52
6537: PPUSH
6538: LD_INT 8
6540: PPUSH
6541: LD_INT 0
6543: PPUSH
6544: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6548: LD_INT 53
6550: PPUSH
6551: LD_INT 8
6553: PPUSH
6554: LD_INT 0
6556: PPUSH
6557: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6561: LD_INT 60
6563: PPUSH
6564: LD_INT 8
6566: PPUSH
6567: LD_INT 2
6569: PPUSH
6570: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6574: LD_INT 61
6576: PPUSH
6577: LD_INT 8
6579: PPUSH
6580: LD_INT 0
6582: PPUSH
6583: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6587: LD_INT 62
6589: PPUSH
6590: LD_INT 8
6592: PPUSH
6593: LD_INT 0
6595: PPUSH
6596: CALL_OW 322
// end ; if difficulty = 2 then
6600: LD_OWVAR 67
6604: PUSH
6605: LD_INT 2
6607: EQUAL
6608: IFFALSE 6727
// begin SetTech ( 66 , 8 , state_researched ) ;
6610: LD_INT 66
6612: PPUSH
6613: LD_INT 8
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6623: LD_INT 67
6625: PPUSH
6626: LD_INT 8
6628: PPUSH
6629: LD_INT 2
6631: PPUSH
6632: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6636: LD_INT 68
6638: PPUSH
6639: LD_INT 8
6641: PPUSH
6642: LD_INT 0
6644: PPUSH
6645: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6649: LD_INT 51
6651: PPUSH
6652: LD_INT 8
6654: PPUSH
6655: LD_INT 2
6657: PPUSH
6658: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6662: LD_INT 52
6664: PPUSH
6665: LD_INT 8
6667: PPUSH
6668: LD_INT 2
6670: PPUSH
6671: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6675: LD_INT 53
6677: PPUSH
6678: LD_INT 8
6680: PPUSH
6681: LD_INT 2
6683: PPUSH
6684: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6688: LD_INT 60
6690: PPUSH
6691: LD_INT 8
6693: PPUSH
6694: LD_INT 2
6696: PPUSH
6697: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6701: LD_INT 61
6703: PPUSH
6704: LD_INT 8
6706: PPUSH
6707: LD_INT 2
6709: PPUSH
6710: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6714: LD_INT 62
6716: PPUSH
6717: LD_INT 8
6719: PPUSH
6720: LD_INT 0
6722: PPUSH
6723: CALL_OW 322
// end ; if difficulty = 3 then
6727: LD_OWVAR 67
6731: PUSH
6732: LD_INT 3
6734: EQUAL
6735: IFFALSE 6854
// begin SetTech ( 66 , 8 , state_researched ) ;
6737: LD_INT 66
6739: PPUSH
6740: LD_INT 8
6742: PPUSH
6743: LD_INT 2
6745: PPUSH
6746: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6750: LD_INT 67
6752: PPUSH
6753: LD_INT 8
6755: PPUSH
6756: LD_INT 2
6758: PPUSH
6759: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6763: LD_INT 68
6765: PPUSH
6766: LD_INT 8
6768: PPUSH
6769: LD_INT 0
6771: PPUSH
6772: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6776: LD_INT 51
6778: PPUSH
6779: LD_INT 8
6781: PPUSH
6782: LD_INT 2
6784: PPUSH
6785: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6789: LD_INT 52
6791: PPUSH
6792: LD_INT 8
6794: PPUSH
6795: LD_INT 2
6797: PPUSH
6798: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6802: LD_INT 53
6804: PPUSH
6805: LD_INT 8
6807: PPUSH
6808: LD_INT 2
6810: PPUSH
6811: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6815: LD_INT 60
6817: PPUSH
6818: LD_INT 8
6820: PPUSH
6821: LD_INT 2
6823: PPUSH
6824: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6828: LD_INT 61
6830: PPUSH
6831: LD_INT 8
6833: PPUSH
6834: LD_INT 2
6836: PPUSH
6837: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6841: LD_INT 62
6843: PPUSH
6844: LD_INT 8
6846: PPUSH
6847: LD_INT 0
6849: PPUSH
6850: CALL_OW 322
// end ; end ;
6854: LD_VAR 0 1
6858: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6859: LD_INT 0
6861: PPUSH
6862: PPUSH
6863: PPUSH
6864: PPUSH
6865: PPUSH
6866: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6867: LD_ADDR_VAR 0 7
6871: PUSH
6872: LD_INT 22
6874: PUSH
6875: LD_VAR 0 1
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 25
6886: PUSH
6887: LD_INT 9
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PPUSH
6898: CALL_OW 69
6902: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6903: LD_ADDR_VAR 0 8
6907: PUSH
6908: LD_INT 22
6910: PUSH
6911: LD_VAR 0 2
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 3
6922: PUSH
6923: LD_INT 21
6925: PUSH
6926: LD_INT 3
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PPUSH
6941: CALL_OW 69
6945: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6946: LD_ADDR_VAR 0 5
6950: PUSH
6951: LD_INT 1
6953: PPUSH
6954: LD_INT 3
6956: PPUSH
6957: CALL_OW 12
6961: ST_TO_ADDR
// for i = 1 to list do
6962: LD_ADDR_VAR 0 6
6966: PUSH
6967: DOUBLE
6968: LD_INT 1
6970: DEC
6971: ST_TO_ADDR
6972: LD_VAR 0 7
6976: PUSH
6977: FOR_TO
6978: IFFALSE 7160
// for ta in filter do
6980: LD_ADDR_VAR 0 4
6984: PUSH
6985: LD_VAR 0 8
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7156
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6993: LD_VAR 0 7
6997: PUSH
6998: LD_VAR 0 6
7002: ARRAY
7003: PPUSH
7004: LD_VAR 0 4
7008: PPUSH
7009: CALL_OW 296
7013: PUSH
7014: LD_INT 13
7016: LESSEQUAL
7017: IFFALSE 7154
// begin case c of 1 :
7019: LD_VAR 0 5
7023: PUSH
7024: LD_INT 1
7026: DOUBLE
7027: EQUAL
7028: IFTRUE 7032
7030: GO 7070
7032: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
7033: LD_VAR 0 7
7037: PUSH
7038: LD_VAR 0 6
7042: ARRAY
7043: PPUSH
7044: LD_VAR 0 4
7048: PPUSH
7049: CALL_OW 250
7053: PPUSH
7054: LD_VAR 0 4
7058: PPUSH
7059: CALL_OW 251
7063: PPUSH
7064: CALL_OW 154
7068: GO 7154
7070: LD_INT 2
7072: DOUBLE
7073: EQUAL
7074: IFTRUE 7078
7076: GO 7142
7078: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
7079: LD_VAR 0 7
7083: PUSH
7084: LD_VAR 0 6
7088: ARRAY
7089: PPUSH
7090: LD_VAR 0 4
7094: PPUSH
7095: CALL_OW 250
7099: PUSH
7100: LD_INT 1
7102: NEG
7103: PPUSH
7104: LD_INT 1
7106: PPUSH
7107: CALL_OW 12
7111: PLUS
7112: PPUSH
7113: LD_VAR 0 4
7117: PPUSH
7118: CALL_OW 251
7122: PUSH
7123: LD_INT 1
7125: NEG
7126: PPUSH
7127: LD_INT 1
7129: PPUSH
7130: CALL_OW 12
7134: PLUS
7135: PPUSH
7136: CALL_OW 153
7140: GO 7154
7142: LD_INT 3
7144: DOUBLE
7145: EQUAL
7146: IFTRUE 7150
7148: GO 7153
7150: POP
// ; end ;
7151: GO 7154
7153: POP
// end ; end ;
7154: GO 6990
7156: POP
7157: POP
7158: GO 6977
7160: POP
7161: POP
// end ;
7162: LD_VAR 0 3
7166: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7167: LD_INT 0
7169: PPUSH
7170: PPUSH
// for i in charactersList do
7171: LD_ADDR_VAR 0 4
7175: PUSH
7176: LD_VAR 0 1
7180: PUSH
7181: FOR_IN
7182: IFFALSE 7200
// SaveCharacters ( i , ident ) ;
7184: LD_VAR 0 4
7188: PPUSH
7189: LD_VAR 0 2
7193: PPUSH
7194: CALL_OW 38
7198: GO 7181
7200: POP
7201: POP
// end ;
7202: LD_VAR 0 3
7206: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7207: LD_INT 0
7209: PPUSH
7210: PPUSH
7211: PPUSH
7212: PPUSH
7213: PPUSH
7214: PPUSH
7215: PPUSH
7216: PPUSH
7217: PPUSH
7218: PPUSH
7219: PPUSH
// for i = 1 to medicCount do
7220: LD_ADDR_VAR 0 13
7224: PUSH
7225: DOUBLE
7226: LD_INT 1
7228: DEC
7229: ST_TO_ADDR
7230: LD_VAR 0 7
7234: PUSH
7235: FOR_TO
7236: IFFALSE 7318
// begin uc_side = side ;
7238: LD_ADDR_OWVAR 20
7242: PUSH
7243: LD_VAR 0 1
7247: ST_TO_ADDR
// uc_nation = nation ;
7248: LD_ADDR_OWVAR 21
7252: PUSH
7253: LD_VAR 0 2
7257: ST_TO_ADDR
// hc_name =  ;
7258: LD_ADDR_OWVAR 26
7262: PUSH
7263: LD_STRING 
7265: ST_TO_ADDR
// hc_gallery =  ;
7266: LD_ADDR_OWVAR 33
7270: PUSH
7271: LD_STRING 
7273: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7274: LD_INT 0
7276: PPUSH
7277: LD_INT 4
7279: PPUSH
7280: LD_VAR 0 8
7284: PPUSH
7285: CALL_OW 380
// un = CreateHuman ;
7289: LD_ADDR_VAR 0 15
7293: PUSH
7294: CALL_OW 44
7298: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7299: LD_VAR 0 15
7303: PPUSH
7304: LD_VAR 0 9
7308: PPUSH
7309: LD_INT 0
7311: PPUSH
7312: CALL_OW 49
// end ;
7316: GO 7235
7318: POP
7319: POP
// for i = 1 to soldierCount do
7320: LD_ADDR_VAR 0 13
7324: PUSH
7325: DOUBLE
7326: LD_INT 1
7328: DEC
7329: ST_TO_ADDR
7330: LD_VAR 0 3
7334: PUSH
7335: FOR_TO
7336: IFFALSE 7418
// begin uc_side = side ;
7338: LD_ADDR_OWVAR 20
7342: PUSH
7343: LD_VAR 0 1
7347: ST_TO_ADDR
// uc_nation = nation ;
7348: LD_ADDR_OWVAR 21
7352: PUSH
7353: LD_VAR 0 2
7357: ST_TO_ADDR
// hc_name =  ;
7358: LD_ADDR_OWVAR 26
7362: PUSH
7363: LD_STRING 
7365: ST_TO_ADDR
// hc_gallery =  ;
7366: LD_ADDR_OWVAR 33
7370: PUSH
7371: LD_STRING 
7373: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7374: LD_INT 0
7376: PPUSH
7377: LD_INT 1
7379: PPUSH
7380: LD_VAR 0 8
7384: PPUSH
7385: CALL_OW 380
// un = CreateHuman ;
7389: LD_ADDR_VAR 0 15
7393: PUSH
7394: CALL_OW 44
7398: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7399: LD_VAR 0 15
7403: PPUSH
7404: LD_VAR 0 9
7408: PPUSH
7409: LD_INT 0
7411: PPUSH
7412: CALL_OW 49
// end ;
7416: GO 7335
7418: POP
7419: POP
// for i = 1 to sniperCount do
7420: LD_ADDR_VAR 0 13
7424: PUSH
7425: DOUBLE
7426: LD_INT 1
7428: DEC
7429: ST_TO_ADDR
7430: LD_VAR 0 4
7434: PUSH
7435: FOR_TO
7436: IFFALSE 7518
// begin uc_side = side ;
7438: LD_ADDR_OWVAR 20
7442: PUSH
7443: LD_VAR 0 1
7447: ST_TO_ADDR
// uc_nation = nation ;
7448: LD_ADDR_OWVAR 21
7452: PUSH
7453: LD_VAR 0 2
7457: ST_TO_ADDR
// hc_name =  ;
7458: LD_ADDR_OWVAR 26
7462: PUSH
7463: LD_STRING 
7465: ST_TO_ADDR
// hc_gallery =  ;
7466: LD_ADDR_OWVAR 33
7470: PUSH
7471: LD_STRING 
7473: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7474: LD_INT 0
7476: PPUSH
7477: LD_INT 5
7479: PPUSH
7480: LD_VAR 0 8
7484: PPUSH
7485: CALL_OW 380
// un = CreateHuman ;
7489: LD_ADDR_VAR 0 15
7493: PUSH
7494: CALL_OW 44
7498: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7499: LD_VAR 0 15
7503: PPUSH
7504: LD_VAR 0 9
7508: PPUSH
7509: LD_INT 0
7511: PPUSH
7512: CALL_OW 49
// end ;
7516: GO 7435
7518: POP
7519: POP
// for i = 1 to bazookCount do
7520: LD_ADDR_VAR 0 13
7524: PUSH
7525: DOUBLE
7526: LD_INT 1
7528: DEC
7529: ST_TO_ADDR
7530: LD_VAR 0 5
7534: PUSH
7535: FOR_TO
7536: IFFALSE 7618
// begin uc_side = side ;
7538: LD_ADDR_OWVAR 20
7542: PUSH
7543: LD_VAR 0 1
7547: ST_TO_ADDR
// uc_nation = nation ;
7548: LD_ADDR_OWVAR 21
7552: PUSH
7553: LD_VAR 0 2
7557: ST_TO_ADDR
// hc_name =  ;
7558: LD_ADDR_OWVAR 26
7562: PUSH
7563: LD_STRING 
7565: ST_TO_ADDR
// hc_gallery =  ;
7566: LD_ADDR_OWVAR 33
7570: PUSH
7571: LD_STRING 
7573: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7574: LD_INT 0
7576: PPUSH
7577: LD_INT 9
7579: PPUSH
7580: LD_VAR 0 8
7584: PPUSH
7585: CALL_OW 380
// un = CreateHuman ;
7589: LD_ADDR_VAR 0 15
7593: PUSH
7594: CALL_OW 44
7598: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7599: LD_VAR 0 15
7603: PPUSH
7604: LD_VAR 0 9
7608: PPUSH
7609: LD_INT 0
7611: PPUSH
7612: CALL_OW 49
// end ;
7616: GO 7535
7618: POP
7619: POP
// for i = 1 to mortalCount do
7620: LD_ADDR_VAR 0 13
7624: PUSH
7625: DOUBLE
7626: LD_INT 1
7628: DEC
7629: ST_TO_ADDR
7630: LD_VAR 0 6
7634: PUSH
7635: FOR_TO
7636: IFFALSE 7718
// begin uc_side = side ;
7638: LD_ADDR_OWVAR 20
7642: PUSH
7643: LD_VAR 0 1
7647: ST_TO_ADDR
// uc_nation = nation ;
7648: LD_ADDR_OWVAR 21
7652: PUSH
7653: LD_VAR 0 2
7657: ST_TO_ADDR
// hc_name =  ;
7658: LD_ADDR_OWVAR 26
7662: PUSH
7663: LD_STRING 
7665: ST_TO_ADDR
// hc_gallery =  ;
7666: LD_ADDR_OWVAR 33
7670: PUSH
7671: LD_STRING 
7673: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 8
7679: PPUSH
7680: LD_VAR 0 8
7684: PPUSH
7685: CALL_OW 380
// un = CreateHuman ;
7689: LD_ADDR_VAR 0 15
7693: PUSH
7694: CALL_OW 44
7698: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7699: LD_VAR 0 15
7703: PPUSH
7704: LD_VAR 0 9
7708: PPUSH
7709: LD_INT 0
7711: PPUSH
7712: CALL_OW 49
// end ;
7716: GO 7635
7718: POP
7719: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7720: LD_ADDR_VAR 0 17
7724: PUSH
7725: LD_INT 22
7727: PUSH
7728: LD_VAR 0 1
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 25
7739: PUSH
7740: LD_INT 4
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 69
7755: ST_TO_ADDR
// for i in medic_list do
7756: LD_ADDR_VAR 0 13
7760: PUSH
7761: LD_VAR 0 17
7765: PUSH
7766: FOR_IN
7767: IFFALSE 7802
// if GetTag ( i ) = 1 then
7769: LD_VAR 0 13
7773: PPUSH
7774: CALL_OW 110
7778: PUSH
7779: LD_INT 1
7781: EQUAL
7782: IFFALSE 7800
// medic_list := medic_list diff i ;
7784: LD_ADDR_VAR 0 17
7788: PUSH
7789: LD_VAR 0 17
7793: PUSH
7794: LD_VAR 0 13
7798: DIFF
7799: ST_TO_ADDR
7800: GO 7766
7802: POP
7803: POP
// for i in medic_list do
7804: LD_ADDR_VAR 0 13
7808: PUSH
7809: LD_VAR 0 17
7813: PUSH
7814: FOR_IN
7815: IFFALSE 7833
// ComMoveToArea ( i , healArea ) ;
7817: LD_VAR 0 13
7821: PPUSH
7822: LD_VAR 0 10
7826: PPUSH
7827: CALL_OW 113
7831: GO 7814
7833: POP
7834: POP
// repeat wait ( 0 0$1 ) ;
7835: LD_INT 35
7837: PPUSH
7838: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7842: LD_ADDR_VAR 0 16
7846: PUSH
7847: LD_INT 22
7849: PUSH
7850: LD_VAR 0 1
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 1
7861: PUSH
7862: LD_INT 3
7864: PUSH
7865: LD_INT 24
7867: PUSH
7868: LD_INT 550
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: PUSH
7879: LD_INT 24
7881: PUSH
7882: LD_INT 250
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: LIST
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PPUSH
7898: CALL_OW 69
7902: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7903: LD_ADDR_VAR 0 18
7907: PUSH
7908: LD_INT 22
7910: PUSH
7911: LD_VAR 0 1
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 2
7922: PUSH
7923: LD_INT 25
7925: PUSH
7926: LD_INT 1
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 25
7935: PUSH
7936: LD_INT 5
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 25
7945: PUSH
7946: LD_INT 8
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PUSH
7953: LD_INT 25
7955: PUSH
7956: LD_INT 9
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: PUSH
7970: LD_INT 24
7972: PUSH
7973: LD_INT 1000
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: PPUSH
7985: CALL_OW 69
7989: ST_TO_ADDR
// if medicCount > 0 then
7990: LD_VAR 0 7
7994: PUSH
7995: LD_INT 0
7997: GREATER
7998: IFFALSE 8072
// begin if damageUnit_list > 0 then
8000: LD_VAR 0 16
8004: PUSH
8005: LD_INT 0
8007: GREATER
8008: IFFALSE 8072
// begin for i in damageUnit_list do
8010: LD_ADDR_VAR 0 13
8014: PUSH
8015: LD_VAR 0 16
8019: PUSH
8020: FOR_IN
8021: IFFALSE 8070
// begin ComMoveToArea ( i , healArea ) ;
8023: LD_VAR 0 13
8027: PPUSH
8028: LD_VAR 0 10
8032: PPUSH
8033: CALL_OW 113
// for j in medic_list do
8037: LD_ADDR_VAR 0 14
8041: PUSH
8042: LD_VAR 0 17
8046: PUSH
8047: FOR_IN
8048: IFFALSE 8066
// AddComHeal ( j , i ) ;
8050: LD_VAR 0 14
8054: PPUSH
8055: LD_VAR 0 13
8059: PPUSH
8060: CALL_OW 188
8064: GO 8047
8066: POP
8067: POP
// end ;
8068: GO 8020
8070: POP
8071: POP
// end ; end ; for i in soldiersOK_list do
8072: LD_ADDR_VAR 0 13
8076: PUSH
8077: LD_VAR 0 18
8081: PUSH
8082: FOR_IN
8083: IFFALSE 8259
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8085: LD_ADDR_VAR 0 21
8089: PUSH
8090: LD_INT 22
8092: PUSH
8093: LD_VAR 0 11
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PPUSH
8102: CALL_OW 69
8106: PPUSH
8107: LD_VAR 0 13
8111: PPUSH
8112: CALL_OW 74
8116: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8117: LD_ADDR_VAR 0 22
8121: PUSH
8122: LD_INT 22
8124: PUSH
8125: LD_VAR 0 11
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: LD_INT 2
8136: PUSH
8137: LD_INT 59
8139: PUSH
8140: EMPTY
8141: LIST
8142: PUSH
8143: LD_INT 21
8145: PUSH
8146: LD_INT 1
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PUSH
8153: LD_INT 21
8155: PUSH
8156: LD_INT 2
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: PPUSH
8176: CALL_OW 69
8180: PPUSH
8181: LD_VAR 0 13
8185: PPUSH
8186: CALL_OW 74
8190: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8191: LD_VAR 0 13
8195: PPUSH
8196: LD_VAR 0 21
8200: PPUSH
8201: CALL_OW 296
8205: PUSH
8206: LD_INT 8
8208: PLUS
8209: PUSH
8210: LD_VAR 0 13
8214: PPUSH
8215: LD_VAR 0 22
8219: PPUSH
8220: CALL_OW 296
8224: LESS
8225: IFFALSE 8243
// begin ComAttackUnit ( i , target1 ) ;
8227: LD_VAR 0 13
8231: PPUSH
8232: LD_VAR 0 21
8236: PPUSH
8237: CALL_OW 115
// end else
8241: GO 8257
// begin ComAttackUnit ( i , target2 ) ;
8243: LD_VAR 0 13
8247: PPUSH
8248: LD_VAR 0 22
8252: PPUSH
8253: CALL_OW 115
// end ; end ;
8257: GO 8082
8259: POP
8260: POP
// until soldiersOK_list = [ ] ;
8261: LD_VAR 0 18
8265: PUSH
8266: EMPTY
8267: EQUAL
8268: IFFALSE 7835
// end ;
8270: LD_VAR 0 12
8274: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
8283: PPUSH
8284: PPUSH
8285: PPUSH
8286: PPUSH
8287: PPUSH
// amChassisTab = [ ] ;
8288: LD_ADDR_VAR 0 19
8292: PUSH
8293: EMPTY
8294: ST_TO_ADDR
// arChassisTab = [ ] ;
8295: LD_ADDR_VAR 0 18
8299: PUSH
8300: EMPTY
8301: ST_TO_ADDR
// ruChassisTab = [ ] ;
8302: LD_ADDR_VAR 0 17
8306: PUSH
8307: EMPTY
8308: ST_TO_ADDR
// for i = 1 to vehCount do
8309: LD_ADDR_VAR 0 13
8313: PUSH
8314: DOUBLE
8315: LD_INT 1
8317: DEC
8318: ST_TO_ADDR
8319: LD_VAR 0 3
8323: PUSH
8324: FOR_TO
8325: IFFALSE 9749
// begin wait ( 0 0$01 ) ;
8327: LD_INT 35
8329: PPUSH
8330: CALL_OW 67
// if nation = 1 then
8334: LD_VAR 0 5
8338: PUSH
8339: LD_INT 1
8341: EQUAL
8342: IFFALSE 8823
// begin uc_side = side ;
8344: LD_ADDR_OWVAR 20
8348: PUSH
8349: LD_VAR 0 2
8353: ST_TO_ADDR
// uc_nation = nation ;
8354: LD_ADDR_OWVAR 21
8358: PUSH
8359: LD_VAR 0 5
8363: ST_TO_ADDR
// vc_engine = vehengine ;
8364: LD_ADDR_OWVAR 39
8368: PUSH
8369: LD_VAR 0 6
8373: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8374: LD_ADDR_OWVAR 40
8378: PUSH
8379: LD_VAR 0 10
8383: PUSH
8384: LD_INT 1
8386: PPUSH
8387: LD_VAR 0 10
8391: PPUSH
8392: CALL_OW 12
8396: ARRAY
8397: ST_TO_ADDR
// for j = 1 to AMWeapon do
8398: LD_ADDR_VAR 0 14
8402: PUSH
8403: DOUBLE
8404: LD_INT 1
8406: DEC
8407: ST_TO_ADDR
8408: LD_VAR 0 10
8412: PUSH
8413: FOR_TO
8414: IFFALSE 8715
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8416: LD_VAR 0 10
8420: PUSH
8421: LD_VAR 0 14
8425: ARRAY
8426: PUSH
8427: LD_INT 2
8429: EQUAL
8430: PUSH
8431: LD_VAR 0 10
8435: PUSH
8436: LD_VAR 0 14
8440: ARRAY
8441: PUSH
8442: LD_INT 3
8444: EQUAL
8445: OR
8446: IFFALSE 8499
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8448: LD_ADDR_VAR 0 19
8452: PUSH
8453: LD_INT 1
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: LD_INT 3
8461: PUSH
8462: LD_INT 4
8464: PUSH
8465: LD_INT 5
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8475: LD_ADDR_OWVAR 37
8479: PUSH
8480: LD_VAR 0 19
8484: PUSH
8485: LD_INT 1
8487: PPUSH
8488: LD_VAR 0 19
8492: PPUSH
8493: CALL_OW 12
8497: ARRAY
8498: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8499: LD_VAR 0 10
8503: PUSH
8504: LD_VAR 0 14
8508: ARRAY
8509: PUSH
8510: LD_INT 4
8512: EQUAL
8513: PUSH
8514: LD_VAR 0 10
8518: PUSH
8519: LD_VAR 0 14
8523: ARRAY
8524: PUSH
8525: LD_INT 5
8527: EQUAL
8528: OR
8529: PUSH
8530: LD_VAR 0 10
8534: PUSH
8535: LD_VAR 0 14
8539: ARRAY
8540: PUSH
8541: LD_INT 9
8543: EQUAL
8544: OR
8545: PUSH
8546: LD_VAR 0 10
8550: PUSH
8551: LD_VAR 0 14
8555: ARRAY
8556: PUSH
8557: LD_INT 11
8559: EQUAL
8560: OR
8561: PUSH
8562: LD_VAR 0 10
8566: PUSH
8567: LD_VAR 0 14
8571: ARRAY
8572: PUSH
8573: LD_INT 7
8575: EQUAL
8576: OR
8577: IFFALSE 8626
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8579: LD_ADDR_VAR 0 19
8583: PUSH
8584: LD_INT 2
8586: PUSH
8587: LD_INT 3
8589: PUSH
8590: LD_INT 4
8592: PUSH
8593: LD_INT 5
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8602: LD_ADDR_OWVAR 37
8606: PUSH
8607: LD_VAR 0 19
8611: PUSH
8612: LD_INT 1
8614: PPUSH
8615: LD_VAR 0 19
8619: PPUSH
8620: CALL_OW 12
8624: ARRAY
8625: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8626: LD_VAR 0 10
8630: PUSH
8631: LD_VAR 0 14
8635: ARRAY
8636: PUSH
8637: LD_INT 8
8639: EQUAL
8640: PUSH
8641: LD_VAR 0 10
8645: PUSH
8646: LD_VAR 0 14
8650: ARRAY
8651: PUSH
8652: LD_INT 6
8654: EQUAL
8655: OR
8656: PUSH
8657: LD_VAR 0 10
8661: PUSH
8662: LD_VAR 0 14
8666: ARRAY
8667: PUSH
8668: LD_INT 10
8670: EQUAL
8671: OR
8672: IFFALSE 8713
// begin amChassisTab = [ 4 , 5 ] ;
8674: LD_ADDR_VAR 0 19
8678: PUSH
8679: LD_INT 4
8681: PUSH
8682: LD_INT 5
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8689: LD_ADDR_OWVAR 37
8693: PUSH
8694: LD_VAR 0 19
8698: PUSH
8699: LD_INT 1
8701: PPUSH
8702: LD_VAR 0 19
8706: PPUSH
8707: CALL_OW 12
8711: ARRAY
8712: ST_TO_ADDR
// end ; end ;
8713: GO 8413
8715: POP
8716: POP
// veh = CreateVehicle ;
8717: LD_ADDR_VAR 0 16
8721: PUSH
8722: CALL_OW 45
8726: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8727: LD_VAR 0 16
8731: PPUSH
8732: LD_VAR 0 1
8736: PPUSH
8737: LD_INT 0
8739: PPUSH
8740: CALL_OW 49
// if vc_control = 1 then
8744: LD_OWVAR 38
8748: PUSH
8749: LD_INT 1
8751: EQUAL
8752: IFFALSE 8809
// begin hc_gallery =  ;
8754: LD_ADDR_OWVAR 33
8758: PUSH
8759: LD_STRING 
8761: ST_TO_ADDR
// hc_name =  ;
8762: LD_ADDR_OWVAR 26
8766: PUSH
8767: LD_STRING 
8769: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8770: LD_INT 0
8772: PPUSH
8773: LD_INT 3
8775: PPUSH
8776: LD_VAR 0 4
8780: PPUSH
8781: CALL_OW 380
// un = CreateHuman ;
8785: LD_ADDR_VAR 0 15
8789: PUSH
8790: CALL_OW 44
8794: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8795: LD_VAR 0 15
8799: PPUSH
8800: LD_VAR 0 16
8804: PPUSH
8805: CALL_OW 52
// end ; i = i + 1 ;
8809: LD_ADDR_VAR 0 13
8813: PUSH
8814: LD_VAR 0 13
8818: PUSH
8819: LD_INT 1
8821: PLUS
8822: ST_TO_ADDR
// end ; if nation = 2 then
8823: LD_VAR 0 5
8827: PUSH
8828: LD_INT 2
8830: EQUAL
8831: IFFALSE 9333
// begin uc_side = side ;
8833: LD_ADDR_OWVAR 20
8837: PUSH
8838: LD_VAR 0 2
8842: ST_TO_ADDR
// uc_nation = nation ;
8843: LD_ADDR_OWVAR 21
8847: PUSH
8848: LD_VAR 0 5
8852: ST_TO_ADDR
// vc_engine = vehengine ;
8853: LD_ADDR_OWVAR 39
8857: PUSH
8858: LD_VAR 0 6
8862: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8863: LD_INT 22
8865: PUSH
8866: LD_VAR 0 2
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PUSH
8875: LD_INT 21
8877: PUSH
8878: LD_INT 2
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: PUSH
8885: LD_INT 33
8887: PUSH
8888: LD_INT 2
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PUSH
8895: LD_INT 50
8897: PUSH
8898: EMPTY
8899: LIST
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 69
8911: PUSH
8912: LD_INT 8
8914: LESSEQUAL
8915: IFFALSE 8943
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8917: LD_ADDR_OWVAR 38
8921: PUSH
8922: LD_VAR 0 7
8926: PUSH
8927: LD_INT 1
8929: PPUSH
8930: LD_VAR 0 7
8934: PPUSH
8935: CALL_OW 12
8939: ARRAY
8940: ST_TO_ADDR
8941: GO 8951
// vc_control = control_apeman ;
8943: LD_ADDR_OWVAR 38
8947: PUSH
8948: LD_INT 5
8950: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8951: LD_ADDR_OWVAR 40
8955: PUSH
8956: LD_VAR 0 9
8960: PUSH
8961: LD_INT 1
8963: PPUSH
8964: LD_VAR 0 9
8968: PPUSH
8969: CALL_OW 12
8973: ARRAY
8974: ST_TO_ADDR
// for j = 1 to ARWeapons do
8975: LD_ADDR_VAR 0 14
8979: PUSH
8980: DOUBLE
8981: LD_INT 1
8983: DEC
8984: ST_TO_ADDR
8985: LD_VAR 0 9
8989: PUSH
8990: FOR_TO
8991: IFFALSE 9225
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8993: LD_VAR 0 9
8997: PUSH
8998: LD_VAR 0 14
9002: ARRAY
9003: PUSH
9004: LD_INT 24
9006: EQUAL
9007: PUSH
9008: LD_VAR 0 9
9012: PUSH
9013: LD_VAR 0 14
9017: ARRAY
9018: PUSH
9019: LD_INT 22
9021: EQUAL
9022: OR
9023: PUSH
9024: LD_VAR 0 9
9028: PUSH
9029: LD_VAR 0 14
9033: ARRAY
9034: PUSH
9035: LD_INT 23
9037: EQUAL
9038: OR
9039: PUSH
9040: LD_VAR 0 9
9044: PUSH
9045: LD_VAR 0 14
9049: ARRAY
9050: PUSH
9051: LD_INT 30
9053: EQUAL
9054: OR
9055: IFFALSE 9104
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9057: LD_ADDR_VAR 0 18
9061: PUSH
9062: LD_INT 11
9064: PUSH
9065: LD_INT 12
9067: PUSH
9068: LD_INT 13
9070: PUSH
9071: LD_INT 14
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9080: LD_ADDR_OWVAR 37
9084: PUSH
9085: LD_VAR 0 18
9089: PUSH
9090: LD_INT 1
9092: PPUSH
9093: LD_VAR 0 18
9097: PPUSH
9098: CALL_OW 12
9102: ARRAY
9103: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9104: LD_VAR 0 9
9108: PUSH
9109: LD_VAR 0 14
9113: ARRAY
9114: PUSH
9115: LD_INT 29
9117: EQUAL
9118: PUSH
9119: LD_VAR 0 9
9123: PUSH
9124: LD_VAR 0 14
9128: ARRAY
9129: PUSH
9130: LD_INT 28
9132: EQUAL
9133: OR
9134: PUSH
9135: LD_VAR 0 9
9139: PUSH
9140: LD_VAR 0 14
9144: ARRAY
9145: PUSH
9146: LD_INT 27
9148: EQUAL
9149: OR
9150: PUSH
9151: LD_VAR 0 9
9155: PUSH
9156: LD_VAR 0 14
9160: ARRAY
9161: PUSH
9162: LD_INT 26
9164: EQUAL
9165: OR
9166: PUSH
9167: LD_VAR 0 9
9171: PUSH
9172: LD_VAR 0 14
9176: ARRAY
9177: PUSH
9178: LD_INT 25
9180: EQUAL
9181: OR
9182: IFFALSE 9223
// begin arChassisTab = [ 13 , 14 ] ;
9184: LD_ADDR_VAR 0 18
9188: PUSH
9189: LD_INT 13
9191: PUSH
9192: LD_INT 14
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9199: LD_ADDR_OWVAR 37
9203: PUSH
9204: LD_VAR 0 18
9208: PUSH
9209: LD_INT 1
9211: PPUSH
9212: LD_VAR 0 18
9216: PPUSH
9217: CALL_OW 12
9221: ARRAY
9222: ST_TO_ADDR
// end ; end ;
9223: GO 8990
9225: POP
9226: POP
// veh = CreateVehicle ;
9227: LD_ADDR_VAR 0 16
9231: PUSH
9232: CALL_OW 45
9236: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9237: LD_VAR 0 16
9241: PPUSH
9242: LD_VAR 0 1
9246: PPUSH
9247: LD_INT 0
9249: PPUSH
9250: CALL_OW 49
// if vc_control = 1 then
9254: LD_OWVAR 38
9258: PUSH
9259: LD_INT 1
9261: EQUAL
9262: IFFALSE 9319
// begin hc_gallery =  ;
9264: LD_ADDR_OWVAR 33
9268: PUSH
9269: LD_STRING 
9271: ST_TO_ADDR
// hc_name =  ;
9272: LD_ADDR_OWVAR 26
9276: PUSH
9277: LD_STRING 
9279: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9280: LD_INT 0
9282: PPUSH
9283: LD_INT 3
9285: PPUSH
9286: LD_VAR 0 4
9290: PPUSH
9291: CALL_OW 380
// un = CreateHuman ;
9295: LD_ADDR_VAR 0 15
9299: PUSH
9300: CALL_OW 44
9304: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9305: LD_VAR 0 15
9309: PPUSH
9310: LD_VAR 0 16
9314: PPUSH
9315: CALL_OW 52
// end ; i = i + 1 ;
9319: LD_ADDR_VAR 0 13
9323: PUSH
9324: LD_VAR 0 13
9328: PUSH
9329: LD_INT 1
9331: PLUS
9332: ST_TO_ADDR
// end ; if nation = 3 then
9333: LD_VAR 0 5
9337: PUSH
9338: LD_INT 3
9340: EQUAL
9341: IFFALSE 9747
// begin uc_side = side ;
9343: LD_ADDR_OWVAR 20
9347: PUSH
9348: LD_VAR 0 2
9352: ST_TO_ADDR
// uc_nation = nation ;
9353: LD_ADDR_OWVAR 21
9357: PUSH
9358: LD_VAR 0 5
9362: ST_TO_ADDR
// vc_engine = vehengine ;
9363: LD_ADDR_OWVAR 39
9367: PUSH
9368: LD_VAR 0 6
9372: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9373: LD_ADDR_OWVAR 38
9377: PUSH
9378: LD_VAR 0 7
9382: PUSH
9383: LD_INT 1
9385: PPUSH
9386: LD_VAR 0 7
9390: PPUSH
9391: CALL_OW 12
9395: ARRAY
9396: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9397: LD_ADDR_OWVAR 40
9401: PUSH
9402: LD_VAR 0 8
9406: PUSH
9407: LD_INT 1
9409: PPUSH
9410: LD_VAR 0 8
9414: PPUSH
9415: CALL_OW 12
9419: ARRAY
9420: ST_TO_ADDR
// for j = 1 to RuWeapons do
9421: LD_ADDR_VAR 0 14
9425: PUSH
9426: DOUBLE
9427: LD_INT 1
9429: DEC
9430: ST_TO_ADDR
9431: LD_VAR 0 8
9435: PUSH
9436: FOR_TO
9437: IFFALSE 9623
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9439: LD_VAR 0 8
9443: PUSH
9444: LD_VAR 0 14
9448: ARRAY
9449: PUSH
9450: LD_INT 42
9452: EQUAL
9453: PUSH
9454: LD_VAR 0 8
9458: PUSH
9459: LD_VAR 0 14
9463: ARRAY
9464: PUSH
9465: LD_INT 43
9467: EQUAL
9468: OR
9469: PUSH
9470: LD_VAR 0 8
9474: PUSH
9475: LD_VAR 0 14
9479: ARRAY
9480: PUSH
9481: LD_INT 44
9483: EQUAL
9484: OR
9485: PUSH
9486: LD_VAR 0 8
9490: PUSH
9491: LD_VAR 0 14
9495: ARRAY
9496: PUSH
9497: LD_INT 45
9499: EQUAL
9500: OR
9501: PUSH
9502: LD_VAR 0 8
9506: PUSH
9507: LD_VAR 0 14
9511: ARRAY
9512: PUSH
9513: LD_INT 49
9515: EQUAL
9516: OR
9517: IFFALSE 9554
// begin ruChassisTab = [ 24 ] ;
9519: LD_ADDR_VAR 0 17
9523: PUSH
9524: LD_INT 24
9526: PUSH
9527: EMPTY
9528: LIST
9529: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9530: LD_ADDR_OWVAR 37
9534: PUSH
9535: LD_VAR 0 17
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_VAR 0 17
9547: PPUSH
9548: CALL_OW 12
9552: ARRAY
9553: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9554: LD_VAR 0 8
9558: PUSH
9559: LD_VAR 0 14
9563: ARRAY
9564: PUSH
9565: LD_INT 46
9567: EQUAL
9568: PUSH
9569: LD_VAR 0 8
9573: PUSH
9574: LD_VAR 0 14
9578: ARRAY
9579: PUSH
9580: LD_INT 47
9582: EQUAL
9583: OR
9584: IFFALSE 9621
// begin ruChassisTab = [ 24 ] ;
9586: LD_ADDR_VAR 0 17
9590: PUSH
9591: LD_INT 24
9593: PUSH
9594: EMPTY
9595: LIST
9596: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9597: LD_ADDR_OWVAR 37
9601: PUSH
9602: LD_VAR 0 17
9606: PUSH
9607: LD_INT 1
9609: PPUSH
9610: LD_VAR 0 17
9614: PPUSH
9615: CALL_OW 12
9619: ARRAY
9620: ST_TO_ADDR
// end ; end ;
9621: GO 9436
9623: POP
9624: POP
// veh = CreateVehicle ;
9625: LD_ADDR_VAR 0 16
9629: PUSH
9630: CALL_OW 45
9634: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9635: LD_VAR 0 16
9639: PPUSH
9640: LD_VAR 0 1
9644: PPUSH
9645: LD_INT 0
9647: PPUSH
9648: CALL_OW 49
// if vc_control = 1 then
9652: LD_OWVAR 38
9656: PUSH
9657: LD_INT 1
9659: EQUAL
9660: IFFALSE 9747
// begin if uc_side = 8 then
9662: LD_OWVAR 20
9666: PUSH
9667: LD_INT 8
9669: EQUAL
9670: IFFALSE 9682
// uc_nation = 2 else
9672: LD_ADDR_OWVAR 21
9676: PUSH
9677: LD_INT 2
9679: ST_TO_ADDR
9680: GO 9692
// uc_nation = nation ;
9682: LD_ADDR_OWVAR 21
9686: PUSH
9687: LD_VAR 0 5
9691: ST_TO_ADDR
// hc_gallery =  ;
9692: LD_ADDR_OWVAR 33
9696: PUSH
9697: LD_STRING 
9699: ST_TO_ADDR
// hc_name =  ;
9700: LD_ADDR_OWVAR 26
9704: PUSH
9705: LD_STRING 
9707: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9708: LD_INT 0
9710: PPUSH
9711: LD_INT 3
9713: PPUSH
9714: LD_VAR 0 4
9718: PPUSH
9719: CALL_OW 380
// un = CreateHuman ;
9723: LD_ADDR_VAR 0 15
9727: PUSH
9728: CALL_OW 44
9732: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9733: LD_VAR 0 15
9737: PPUSH
9738: LD_VAR 0 16
9742: PPUSH
9743: CALL_OW 52
// end ; end ; end ;
9747: GO 8324
9749: POP
9750: POP
// repeat wait ( 0 0$1 ) ;
9751: LD_INT 35
9753: PPUSH
9754: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9758: LD_ADDR_VAR 0 20
9762: PUSH
9763: LD_INT 22
9765: PUSH
9766: LD_VAR 0 2
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: LD_INT 21
9777: PUSH
9778: LD_INT 2
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 24
9787: PUSH
9788: LD_INT 250
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 2
9797: PUSH
9798: LD_INT 34
9800: PUSH
9801: LD_INT 25
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 34
9810: PUSH
9811: LD_INT 26
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PUSH
9818: LD_INT 34
9820: PUSH
9821: LD_INT 27
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 34
9830: PUSH
9831: LD_INT 28
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 34
9840: PUSH
9841: LD_INT 29
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 34
9850: PUSH
9851: LD_INT 46
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 34
9860: PUSH
9861: LD_INT 44
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: LD_INT 34
9870: PUSH
9871: LD_INT 45
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PUSH
9878: LD_INT 34
9880: PUSH
9881: LD_INT 47
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PPUSH
9906: CALL_OW 69
9910: ST_TO_ADDR
// if vehicleOK_list > 0 then
9911: LD_VAR 0 20
9915: PUSH
9916: LD_INT 0
9918: GREATER
9919: IFFALSE 10138
// begin for i in vehicleOK_list do
9921: LD_ADDR_VAR 0 13
9925: PUSH
9926: LD_VAR 0 20
9930: PUSH
9931: FOR_IN
9932: IFFALSE 10136
// begin if GetSide ( i ) <> side then
9934: LD_VAR 0 13
9938: PPUSH
9939: CALL_OW 255
9943: PUSH
9944: LD_VAR 0 2
9948: NONEQUAL
9949: IFFALSE 9962
// begin ComStop ( i ) ;
9951: LD_VAR 0 13
9955: PPUSH
9956: CALL_OW 141
// continue ;
9960: GO 9931
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9962: LD_ADDR_VAR 0 21
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_VAR 0 11
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PPUSH
9979: CALL_OW 69
9983: PPUSH
9984: LD_VAR 0 13
9988: PPUSH
9989: CALL_OW 74
9993: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9994: LD_ADDR_VAR 0 22
9998: PUSH
9999: LD_INT 22
10001: PUSH
10002: LD_VAR 0 11
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: LD_INT 2
10013: PUSH
10014: LD_INT 59
10016: PUSH
10017: EMPTY
10018: LIST
10019: PUSH
10020: LD_INT 21
10022: PUSH
10023: LD_INT 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 21
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: EMPTY
10051: LIST
10052: PPUSH
10053: CALL_OW 69
10057: PPUSH
10058: LD_VAR 0 13
10062: PPUSH
10063: CALL_OW 74
10067: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10068: LD_VAR 0 13
10072: PPUSH
10073: LD_VAR 0 21
10077: PPUSH
10078: CALL_OW 296
10082: PUSH
10083: LD_INT 8
10085: PLUS
10086: PUSH
10087: LD_VAR 0 13
10091: PPUSH
10092: LD_VAR 0 22
10096: PPUSH
10097: CALL_OW 296
10101: LESS
10102: IFFALSE 10120
// begin ComAttackUnit ( i , target1 ) ;
10104: LD_VAR 0 13
10108: PPUSH
10109: LD_VAR 0 21
10113: PPUSH
10114: CALL_OW 115
// end else
10118: GO 10134
// begin ComAttackUnit ( i , target2 ) ;
10120: LD_VAR 0 13
10124: PPUSH
10125: LD_VAR 0 22
10129: PPUSH
10130: CALL_OW 115
// end ; end ;
10134: GO 9931
10136: POP
10137: POP
// end ; until vehicleOK_list = 0 ;
10138: LD_VAR 0 20
10142: PUSH
10143: LD_INT 0
10145: EQUAL
10146: IFFALSE 9751
// end ;
10148: LD_VAR 0 12
10152: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
10153: LD_INT 0
10155: PPUSH
10156: PPUSH
10157: PPUSH
10158: PPUSH
10159: PPUSH
10160: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
10161: LD_ADDR_VAR 0 6
10165: PUSH
10166: LD_INT 22
10168: PUSH
10169: LD_VAR 0 1
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 34
10180: PUSH
10181: LD_INT 29
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PPUSH
10192: CALL_OW 69
10196: ST_TO_ADDR
// if veh_list = 0 then
10197: LD_VAR 0 6
10201: PUSH
10202: LD_INT 0
10204: EQUAL
10205: IFFALSE 10209
// exit ;
10207: GO 10414
// if veh_list > 0 then
10209: LD_VAR 0 6
10213: PUSH
10214: LD_INT 0
10216: GREATER
10217: IFFALSE 10414
// begin for i in veh_List do
10219: LD_ADDR_VAR 0 4
10223: PUSH
10224: LD_VAR 0 6
10228: PUSH
10229: FOR_IN
10230: IFFALSE 10412
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10232: LD_ADDR_VAR 0 7
10236: PUSH
10237: LD_INT 22
10239: PUSH
10240: LD_VAR 0 2
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 24
10251: PUSH
10252: LD_INT 250
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 2
10261: PUSH
10262: LD_INT 59
10264: PUSH
10265: EMPTY
10266: LIST
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 1
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 2
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: EMPTY
10300: LIST
10301: PPUSH
10302: CALL_OW 69
10306: PPUSH
10307: LD_VAR 0 4
10311: PPUSH
10312: CALL_OW 74
10316: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10317: LD_VAR 0 4
10321: PPUSH
10322: LD_VAR 0 7
10326: PPUSH
10327: CALL_OW 115
// if not HasTask ( i ) then
10331: LD_VAR 0 4
10335: PPUSH
10336: CALL_OW 314
10340: NOT
10341: IFFALSE 10410
// begin wait ( 0 0$0.1 ) ;
10343: LD_INT 4
10345: PPUSH
10346: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10350: LD_ADDR_VAR 0 8
10354: PUSH
10355: LD_INT 22
10357: PUSH
10358: LD_VAR 0 2
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 24
10369: PUSH
10370: LD_INT 250
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 69
10385: PPUSH
10386: LD_VAR 0 4
10390: PPUSH
10391: CALL_OW 74
10395: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10396: LD_VAR 0 4
10400: PPUSH
10401: LD_VAR 0 8
10405: PPUSH
10406: CALL_OW 115
// end ; end ;
10410: GO 10229
10412: POP
10413: POP
// end ; end ; end_of_file
10414: LD_VAR 0 3
10418: RET
// every 0 0$1 do
10419: GO 10421
10421: DISABLE
// begin enable ;
10422: ENABLE
// IntBazooka ( 7 , 1 ) ;
10423: LD_INT 7
10425: PPUSH
10426: LD_INT 1
10428: PPUSH
10429: CALL 6859 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10433: LD_INT 8
10435: PPUSH
10436: LD_INT 1
10438: PPUSH
10439: CALL 10153 0 2
// end ;
10443: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10444: LD_INT 22
10446: PUSH
10447: LD_INT 3
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 21
10456: PUSH
10457: LD_INT 2
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 50
10466: PUSH
10467: EMPTY
10468: LIST
10469: PUSH
10470: LD_INT 2
10472: PUSH
10473: LD_INT 34
10475: PUSH
10476: LD_INT 46
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 34
10485: PUSH
10486: LD_INT 44
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 34
10495: PUSH
10496: LD_INT 45
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 34
10505: PUSH
10506: LD_INT 47
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: PPUSH
10526: CALL_OW 69
10530: PUSH
10531: LD_INT 0
10533: GREATER
10534: PUSH
10535: LD_INT 22
10537: PUSH
10538: LD_INT 3
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 21
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 50
10557: PUSH
10558: EMPTY
10559: LIST
10560: PUSH
10561: LD_INT 34
10563: PUSH
10564: LD_INT 49
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: PPUSH
10577: CALL_OW 69
10581: PUSH
10582: LD_INT 0
10584: GREATER
10585: AND
10586: IFFALSE 10758
10588: GO 10590
10590: DISABLE
10591: LD_INT 0
10593: PPUSH
10594: PPUSH
// begin enable ;
10595: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10596: LD_ADDR_VAR 0 1
10600: PUSH
10601: LD_INT 22
10603: PUSH
10604: LD_INT 3
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 21
10613: PUSH
10614: LD_INT 2
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 50
10623: PUSH
10624: EMPTY
10625: LIST
10626: PUSH
10627: LD_INT 2
10629: PUSH
10630: LD_INT 34
10632: PUSH
10633: LD_INT 46
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PUSH
10640: LD_INT 34
10642: PUSH
10643: LD_INT 44
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: LD_INT 34
10652: PUSH
10653: LD_INT 45
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 34
10662: PUSH
10663: LD_INT 47
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: PPUSH
10683: CALL_OW 69
10687: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10688: LD_ADDR_VAR 0 2
10692: PUSH
10693: LD_INT 22
10695: PUSH
10696: LD_INT 3
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 21
10705: PUSH
10706: LD_INT 2
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: LD_INT 50
10715: PUSH
10716: EMPTY
10717: LIST
10718: PUSH
10719: LD_INT 34
10721: PUSH
10722: LD_INT 49
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: PPUSH
10735: CALL_OW 69
10739: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10740: LD_VAR 0 2
10744: PPUSH
10745: LD_VAR 0 1
10749: PUSH
10750: LD_INT 1
10752: ARRAY
10753: PPUSH
10754: CALL_OW 112
// end ; end_of_file
10758: PPOPN 2
10760: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10761: LD_EXP 38
10765: PUSH
10766: LD_INT 1
10768: EQUAL
10769: IFFALSE 11671
10771: GO 10773
10773: DISABLE
10774: LD_INT 0
10776: PPUSH
10777: PPUSH
10778: PPUSH
// begin m1 := false ;
10779: LD_ADDR_VAR 0 1
10783: PUSH
10784: LD_INT 0
10786: ST_TO_ADDR
// m2 := false ;
10787: LD_ADDR_VAR 0 2
10791: PUSH
10792: LD_INT 0
10794: ST_TO_ADDR
// m3 := false ;
10795: LD_ADDR_VAR 0 3
10799: PUSH
10800: LD_INT 0
10802: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10803: LD_EXP 1
10807: PPUSH
10808: LD_STRING D9b-JMM-1
10810: PPUSH
10811: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10815: LD_EXP 15
10819: PPUSH
10820: LD_STRING D9b-Pow-1
10822: PPUSH
10823: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10827: LD_EXP 1
10831: PPUSH
10832: LD_STRING D9b-JMM-2
10834: PPUSH
10835: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10839: LD_EXP 15
10843: PPUSH
10844: LD_STRING D9b-Pow-2
10846: PPUSH
10847: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10851: LD_EXP 1
10855: PPUSH
10856: LD_STRING D9b-JMM-3
10858: PPUSH
10859: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10863: LD_EXP 15
10867: PPUSH
10868: LD_STRING D9b-Pow-3
10870: PPUSH
10871: CALL_OW 94
// if tick <= 60 60$00 then
10875: LD_OWVAR 1
10879: PUSH
10880: LD_INT 126000
10882: LESSEQUAL
10883: IFFALSE 10892
// SetAchievement ( ACH_ASPEED_13 ) ;
10885: LD_STRING ACH_ASPEED_13
10887: PPUSH
10888: CALL_OW 543
// if burlakStatus = 1 then
10892: LD_EXP 28
10896: PUSH
10897: LD_INT 1
10899: EQUAL
10900: IFFALSE 10922
// begin m1 := true ;
10902: LD_ADDR_VAR 0 1
10906: PUSH
10907: LD_INT 1
10909: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10910: LD_STRING Burlak
10912: PPUSH
10913: LD_INT 1
10915: PPUSH
10916: CALL_OW 101
// end else
10920: GO 10933
// begin AddMedal ( Burlak , - 1 ) ;
10922: LD_STRING Burlak
10924: PPUSH
10925: LD_INT 1
10927: NEG
10928: PPUSH
10929: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10933: LD_EXP 2
10937: PPUSH
10938: CALL_OW 302
10942: IFFALSE 10964
// begin m2 := true ;
10944: LD_ADDR_VAR 0 2
10948: PUSH
10949: LD_INT 1
10951: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10952: LD_STRING Stevens
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 101
// end else
10962: GO 10975
// begin AddMedal ( Stevens , - 1 ) ;
10964: LD_STRING Stevens
10966: PPUSH
10967: LD_INT 1
10969: NEG
10970: PPUSH
10971: CALL_OW 101
// end ; if radarOnSpot = 1 then
10975: LD_EXP 30
10979: PUSH
10980: LD_INT 1
10982: EQUAL
10983: IFFALSE 11005
// begin m3 := true ;
10985: LD_ADDR_VAR 0 3
10989: PUSH
10990: LD_INT 1
10992: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10993: LD_STRING Observation
10995: PPUSH
10996: LD_INT 1
10998: PPUSH
10999: CALL_OW 101
// end else
11003: GO 11016
// begin AddMedal ( Observation , - 1 ) ;
11005: LD_STRING Observation
11007: PPUSH
11008: LD_INT 1
11010: NEG
11011: PPUSH
11012: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
11016: LD_VAR 0 1
11020: PUSH
11021: LD_VAR 0 2
11025: AND
11026: PUSH
11027: LD_VAR 0 3
11031: AND
11032: PUSH
11033: LD_OWVAR 67
11037: PUSH
11038: LD_INT 3
11040: EQUAL
11041: AND
11042: IFFALSE 11054
// SetAchievementEX ( ACH_AMER , 13 ) ;
11044: LD_STRING ACH_AMER
11046: PPUSH
11047: LD_INT 13
11049: PPUSH
11050: CALL_OW 564
// GiveMedals ( MAIN ) ;
11054: LD_STRING MAIN
11056: PPUSH
11057: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
11061: LD_EXP 28
11065: PPUSH
11066: LD_STRING 13_BurlakStatus_1
11068: PPUSH
11069: CALL_OW 39
// if IsLive ( Stevens ) then
11073: LD_EXP 2
11077: PPUSH
11078: CALL_OW 300
11082: IFFALSE 11096
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
11084: LD_INT 1
11086: PPUSH
11087: LD_STRING 13_StevensStatus_1
11089: PPUSH
11090: CALL_OW 39
11094: GO 11106
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
11096: LD_INT 0
11098: PPUSH
11099: LD_STRING 13_StevensStatus_1
11101: PPUSH
11102: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
11106: LD_INT 22
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 21
11118: PUSH
11119: LD_INT 1
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 2
11128: PUSH
11129: LD_INT 25
11131: PUSH
11132: LD_INT 1
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 25
11141: PUSH
11142: LD_INT 2
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 25
11151: PUSH
11152: LD_INT 3
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 25
11161: PUSH
11162: LD_INT 4
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 25
11171: PUSH
11172: LD_INT 5
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 25
11181: PUSH
11182: LD_INT 8
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: PPUSH
11203: CALL_OW 69
11207: PPUSH
11208: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11212: LD_EXP 1
11216: PPUSH
11217: LD_EXP 34
11221: PUSH
11222: LD_STRING JMM
11224: STR
11225: PPUSH
11226: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11230: LD_EXP 8
11234: PPUSH
11235: LD_EXP 34
11239: PUSH
11240: LD_STRING Brown
11242: STR
11243: PPUSH
11244: CALL 7167 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11248: LD_EXP 4
11252: PPUSH
11253: LD_EXP 34
11257: PUSH
11258: LD_STRING Donaldson
11260: STR
11261: PPUSH
11262: CALL 7167 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11266: LD_EXP 5
11270: PPUSH
11271: LD_EXP 34
11275: PUSH
11276: LD_STRING Bobby
11278: STR
11279: PPUSH
11280: CALL 7167 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11284: LD_EXP 6
11288: PPUSH
11289: LD_EXP 34
11293: PUSH
11294: LD_STRING Cyrus
11296: STR
11297: PPUSH
11298: CALL 7167 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11302: LD_EXP 3
11306: PPUSH
11307: LD_EXP 34
11311: PUSH
11312: LD_STRING Lisa
11314: STR
11315: PPUSH
11316: CALL 7167 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11320: LD_EXP 13
11324: PPUSH
11325: LD_EXP 34
11329: PUSH
11330: LD_STRING Frank
11332: STR
11333: PPUSH
11334: CALL 7167 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11338: LD_EXP 14
11342: PPUSH
11343: LD_EXP 34
11347: PUSH
11348: LD_STRING Kikuchi
11350: STR
11351: PPUSH
11352: CALL 7167 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11356: LD_EXP 10
11360: PPUSH
11361: LD_EXP 34
11365: PUSH
11366: LD_STRING Houten
11368: STR
11369: PPUSH
11370: CALL 7167 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11374: LD_EXP 12
11378: PPUSH
11379: LD_EXP 34
11383: PUSH
11384: LD_STRING Gary
11386: STR
11387: PPUSH
11388: CALL 7167 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11392: LD_EXP 11
11396: PPUSH
11397: LD_EXP 34
11401: PUSH
11402: LD_STRING Cornell
11404: STR
11405: PPUSH
11406: CALL 7167 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11410: LD_EXP 7
11414: PPUSH
11415: LD_EXP 34
11419: PUSH
11420: LD_STRING Denis
11422: STR
11423: PPUSH
11424: CALL 7167 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11428: LD_EXP 9
11432: PPUSH
11433: LD_EXP 34
11437: PUSH
11438: LD_STRING Gladstone
11440: STR
11441: PPUSH
11442: CALL 7167 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11446: LD_EXP 2
11450: PPUSH
11451: LD_EXP 34
11455: PUSH
11456: LD_STRING Stevens
11458: STR
11459: PPUSH
11460: CALL 7167 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11464: LD_INT 50
11466: PUSH
11467: EMPTY
11468: LIST
11469: PUSH
11470: LD_INT 22
11472: PUSH
11473: LD_INT 1
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 21
11482: PUSH
11483: LD_INT 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 2
11492: PUSH
11493: LD_INT 25
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 25
11505: PUSH
11506: LD_INT 2
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 25
11515: PUSH
11516: LD_INT 3
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 25
11525: PUSH
11526: LD_INT 4
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 25
11535: PUSH
11536: LD_INT 5
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 25
11545: PUSH
11546: LD_INT 8
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: PPUSH
11568: CALL_OW 69
11572: PUSH
11573: LD_EXP 1
11577: PUSH
11578: LD_EXP 8
11582: PUSH
11583: LD_EXP 4
11587: PUSH
11588: LD_EXP 5
11592: PUSH
11593: LD_EXP 6
11597: PUSH
11598: LD_EXP 3
11602: PUSH
11603: LD_EXP 13
11607: PUSH
11608: LD_EXP 9
11612: PUSH
11613: LD_EXP 14
11617: PUSH
11618: LD_EXP 7
11622: PUSH
11623: LD_EXP 10
11627: PUSH
11628: LD_EXP 12
11632: PUSH
11633: LD_EXP 11
11637: PUSH
11638: LD_EXP 2
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: DIFF
11659: PPUSH
11660: LD_STRING 13_other_survivors
11662: PPUSH
11663: CALL_OW 38
// YouWin ;
11667: CALL_OW 103
// end ; end_of_file
11671: PPOPN 3
11673: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11674: LD_EXP 32
11678: PUSH
11679: LD_INT 2
11681: EQUAL
11682: IFFALSE 11818
11684: GO 11686
11686: DISABLE
11687: LD_INT 0
11689: PPUSH
11690: PPUSH
11691: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11692: LD_ADDR_VAR 0 2
11696: PUSH
11697: LD_INT 22
11699: PUSH
11700: LD_INT 1
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 21
11709: PUSH
11710: LD_INT 3
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 2
11719: PUSH
11720: LD_INT 30
11722: PUSH
11723: LD_INT 0
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 30
11732: PUSH
11733: LD_INT 1
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: PPUSH
11750: CALL_OW 69
11754: ST_TO_ADDR
// for i in tmp do
11755: LD_ADDR_VAR 0 1
11759: PUSH
11760: LD_VAR 0 2
11764: PUSH
11765: FOR_IN
11766: IFFALSE 11799
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11768: LD_ADDR_VAR 0 3
11772: PUSH
11773: LD_VAR 0 3
11777: PUSH
11778: LD_VAR 0 1
11782: PPUSH
11783: CALL_OW 274
11787: PPUSH
11788: LD_INT 3
11790: PPUSH
11791: CALL_OW 275
11795: PLUS
11796: ST_TO_ADDR
11797: GO 11765
11799: POP
11800: POP
// if yourSiberite < 79 then
11801: LD_VAR 0 3
11805: PUSH
11806: LD_INT 79
11808: LESS
11809: IFFALSE 11818
// YouLost ( siberite ) ;
11811: LD_STRING siberite
11813: PPUSH
11814: CALL_OW 104
// end ; end_of_file
11818: PPOPN 3
11820: END
// every 8 8$0 + 7 7$0 do
11821: GO 11823
11823: DISABLE
// begin enable ;
11824: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11825: LD_INT 8
11827: PPUSH
11828: LD_INT 2
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: LD_INT 3
11836: PPUSH
11837: CALL_OW 12
11841: PPUSH
11842: LD_INT 0
11844: PPUSH
11845: LD_INT 0
11847: PPUSH
11848: LD_INT 2
11850: PUSH
11851: LD_INT 3
11853: PUSH
11854: LD_INT 4
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: LIST
11861: PUSH
11862: LD_OWVAR 67
11866: ARRAY
11867: PPUSH
11868: LD_INT 0
11870: PPUSH
11871: LD_INT 10
11873: PPUSH
11874: LD_INT 8
11876: PUSH
11877: LD_INT 9
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: LD_INT 1
11886: PPUSH
11887: LD_INT 2
11889: PPUSH
11890: CALL_OW 12
11894: ARRAY
11895: PPUSH
11896: LD_INT 12
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: CALL 7207 0 11
// end ;
11906: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11907: GO 11909
11909: DISABLE
11910: LD_INT 0
11912: PPUSH
11913: PPUSH
11914: PPUSH
// begin enable ;
11915: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11916: LD_ADDR_EXP 33
11920: PUSH
11921: LD_EXP 33
11925: PUSH
11926: LD_INT 1
11928: PLUS
11929: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11930: LD_INT 22
11932: PUSH
11933: LD_INT 8
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 3
11942: PUSH
11943: LD_INT 58
11945: PUSH
11946: EMPTY
11947: LIST
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 34
11955: PUSH
11956: LD_INT 31
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: LIST
11967: PPUSH
11968: CALL_OW 69
11972: PUSH
11973: LD_INT 2
11975: LESS
11976: IFFALSE 12216
// begin uc_side := 8 ;
11978: LD_ADDR_OWVAR 20
11982: PUSH
11983: LD_INT 8
11985: ST_TO_ADDR
// uc_nation := 2 ;
11986: LD_ADDR_OWVAR 21
11990: PUSH
11991: LD_INT 2
11993: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11994: LD_INT 14
11996: PPUSH
11997: LD_INT 3
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: LD_INT 31
12005: PPUSH
12006: LD_INT 100
12008: PPUSH
12009: CALL 5844 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12013: LD_ADDR_VAR 0 1
12017: PUSH
12018: DOUBLE
12019: LD_INT 22
12021: PUSH
12022: LD_INT 8
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 3
12031: PUSH
12032: LD_INT 58
12034: PUSH
12035: EMPTY
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 34
12044: PUSH
12045: LD_INT 31
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: PPUSH
12057: CALL_OW 69
12061: PUSH
12062: LD_INT 1
12064: PLUS
12065: DEC
12066: ST_TO_ADDR
12067: LD_INT 2
12069: PUSH
12070: FOR_TO
12071: IFFALSE 12214
// begin veh := CreateVehicle ;
12073: LD_ADDR_VAR 0 2
12077: PUSH
12078: CALL_OW 45
12082: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12083: LD_VAR 0 2
12087: PPUSH
12088: LD_INT 5
12090: PPUSH
12091: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
12095: LD_ADDR_VAR 0 3
12099: PUSH
12100: LD_INT 181
12102: PUSH
12103: LD_INT 105
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 137
12112: PUSH
12113: LD_INT 6
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_VAR 0 1
12128: PUSH
12129: LD_INT 2
12131: MOD
12132: PUSH
12133: LD_INT 1
12135: PLUS
12136: ARRAY
12137: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
12138: LD_VAR 0 2
12142: PPUSH
12143: LD_VAR 0 3
12147: PUSH
12148: LD_INT 1
12150: ARRAY
12151: PPUSH
12152: LD_VAR 0 3
12156: PUSH
12157: LD_INT 2
12159: ARRAY
12160: PPUSH
12161: LD_INT 12
12163: PPUSH
12164: LD_INT 0
12166: PPUSH
12167: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 ] [ Difficulty ] ) ;
12171: LD_INT 0
12173: PPUSH
12174: LD_INT 7
12176: PUSH
12177: LD_INT 9
12179: PUSH
12180: LD_INT 10
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: PUSH
12188: LD_OWVAR 67
12192: ARRAY
12193: PPUSH
12194: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12198: CALL_OW 44
12202: PPUSH
12203: LD_VAR 0 2
12207: PPUSH
12208: CALL_OW 52
// end ;
12212: GO 12070
12214: POP
12215: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
12216: LD_INT 8
12218: PUSH
12219: LD_INT 9
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 1
12228: PPUSH
12229: LD_INT 2
12231: PPUSH
12232: CALL_OW 12
12236: ARRAY
12237: PPUSH
12238: LD_INT 8
12240: PPUSH
12241: LD_INT 4
12243: PPUSH
12244: LD_INT 6
12246: PPUSH
12247: CALL_OW 12
12251: PUSH
12252: LD_INT 6
12254: PPUSH
12255: LD_INT 9
12257: PPUSH
12258: CALL_OW 12
12262: PUSH
12263: LD_INT 7
12265: PPUSH
12266: LD_INT 10
12268: PPUSH
12269: CALL_OW 12
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_OWVAR 67
12283: ARRAY
12284: PPUSH
12285: LD_INT 10
12287: PPUSH
12288: LD_INT 2
12290: PPUSH
12291: LD_INT 3
12293: PPUSH
12294: LD_INT 5
12296: PUSH
12297: LD_INT 2
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PPUSH
12304: EMPTY
12305: PPUSH
12306: LD_INT 25
12308: PUSH
12309: LD_INT 26
12311: PUSH
12312: LD_INT 27
12314: PUSH
12315: LD_INT 28
12317: PUSH
12318: LD_INT 29
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PPUSH
12328: EMPTY
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: CALL 8275 0 11
// end ;
12337: PPOPN 3
12339: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
12340: LD_EXP 33
12344: PUSH
12345: LD_INT 4
12347: GREATEREQUAL
12348: IFFALSE 12688
12350: GO 12352
12352: DISABLE
12353: LD_INT 0
12355: PPUSH
12356: PPUSH
// begin enable ;
12357: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
12358: LD_ADDR_EXP 33
12362: PUSH
12363: LD_EXP 33
12367: PUSH
12368: LD_INT 1
12370: PLUS
12371: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12372: LD_INT 22
12374: PUSH
12375: LD_INT 8
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 3
12384: PUSH
12385: LD_INT 58
12387: PUSH
12388: EMPTY
12389: LIST
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 34
12397: PUSH
12398: LD_INT 31
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: PPUSH
12410: CALL_OW 69
12414: PUSH
12415: LD_INT 2
12417: LESS
12418: IFFALSE 12603
// begin uc_side := 8 ;
12420: LD_ADDR_OWVAR 20
12424: PUSH
12425: LD_INT 8
12427: ST_TO_ADDR
// uc_nation := 2 ;
12428: LD_ADDR_OWVAR 21
12432: PUSH
12433: LD_INT 2
12435: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12436: LD_INT 14
12438: PPUSH
12439: LD_INT 3
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: LD_INT 31
12447: PPUSH
12448: LD_INT 100
12450: PPUSH
12451: CALL 5844 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12455: LD_ADDR_VAR 0 1
12459: PUSH
12460: DOUBLE
12461: LD_INT 22
12463: PUSH
12464: LD_INT 8
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: LD_INT 58
12476: PUSH
12477: EMPTY
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 34
12486: PUSH
12487: LD_INT 31
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: PPUSH
12499: CALL_OW 69
12503: PUSH
12504: LD_INT 1
12506: PLUS
12507: DEC
12508: ST_TO_ADDR
12509: LD_INT 2
12511: PUSH
12512: FOR_TO
12513: IFFALSE 12601
// begin veh := CreateVehicle ;
12515: LD_ADDR_VAR 0 2
12519: PUSH
12520: CALL_OW 45
12524: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12525: LD_VAR 0 2
12529: PPUSH
12530: LD_INT 5
12532: PPUSH
12533: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12537: LD_VAR 0 2
12541: PPUSH
12542: LD_INT 181
12544: PPUSH
12545: LD_INT 105
12547: PPUSH
12548: LD_INT 12
12550: PPUSH
12551: LD_INT 0
12553: PPUSH
12554: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12558: LD_INT 0
12560: PPUSH
12561: LD_INT 8
12563: PUSH
12564: LD_INT 9
12566: PUSH
12567: LD_INT 10
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: LIST
12574: PUSH
12575: LD_OWVAR 67
12579: ARRAY
12580: PPUSH
12581: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12585: CALL_OW 44
12589: PPUSH
12590: LD_VAR 0 2
12594: PPUSH
12595: CALL_OW 52
// end ;
12599: GO 12512
12601: POP
12602: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12603: LD_INT 8
12605: PUSH
12606: LD_INT 9
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 1
12615: PPUSH
12616: LD_INT 2
12618: PPUSH
12619: CALL_OW 12
12623: ARRAY
12624: PPUSH
12625: LD_INT 8
12627: PPUSH
12628: LD_INT 1
12630: PUSH
12631: LD_INT 2
12633: PUSH
12634: LD_INT 3
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_OWVAR 67
12646: ARRAY
12647: PPUSH
12648: LD_INT 10
12650: PPUSH
12651: LD_INT 3
12653: PPUSH
12654: LD_INT 3
12656: PPUSH
12657: LD_INT 1
12659: PUSH
12660: LD_INT 1
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PPUSH
12667: LD_INT 47
12669: PUSH
12670: LD_INT 47
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PPUSH
12677: EMPTY
12678: PPUSH
12679: EMPTY
12680: PPUSH
12681: LD_INT 1
12683: PPUSH
12684: CALL 8275 0 11
// end ;
12688: PPOPN 2
12690: END
// every 1 1$0 trigger eventVar2 = 1 do var i , veh ;
12691: LD_EXP 36
12695: PUSH
12696: LD_INT 1
12698: EQUAL
12699: IFFALSE 13036
12701: GO 12703
12703: DISABLE
12704: LD_INT 0
12706: PPUSH
12707: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12708: LD_INT 22
12710: PUSH
12711: LD_INT 8
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 3
12720: PUSH
12721: LD_INT 58
12723: PUSH
12724: EMPTY
12725: LIST
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 34
12733: PUSH
12734: LD_INT 31
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: LIST
12745: PPUSH
12746: CALL_OW 69
12750: PUSH
12751: LD_INT 2
12753: LESS
12754: IFFALSE 12939
// begin uc_side := 8 ;
12756: LD_ADDR_OWVAR 20
12760: PUSH
12761: LD_INT 8
12763: ST_TO_ADDR
// uc_nation := 2 ;
12764: LD_ADDR_OWVAR 21
12768: PUSH
12769: LD_INT 2
12771: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12772: LD_INT 14
12774: PPUSH
12775: LD_INT 3
12777: PPUSH
12778: LD_INT 1
12780: PPUSH
12781: LD_INT 31
12783: PPUSH
12784: LD_INT 100
12786: PPUSH
12787: CALL 5844 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12791: LD_ADDR_VAR 0 1
12795: PUSH
12796: DOUBLE
12797: LD_INT 22
12799: PUSH
12800: LD_INT 8
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: LD_INT 3
12809: PUSH
12810: LD_INT 58
12812: PUSH
12813: EMPTY
12814: LIST
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 34
12822: PUSH
12823: LD_INT 31
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: LIST
12834: PPUSH
12835: CALL_OW 69
12839: PUSH
12840: LD_INT 1
12842: PLUS
12843: DEC
12844: ST_TO_ADDR
12845: LD_INT 2
12847: PUSH
12848: FOR_TO
12849: IFFALSE 12937
// begin veh := CreateVehicle ;
12851: LD_ADDR_VAR 0 2
12855: PUSH
12856: CALL_OW 45
12860: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12861: LD_VAR 0 2
12865: PPUSH
12866: LD_INT 5
12868: PPUSH
12869: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12873: LD_VAR 0 2
12877: PPUSH
12878: LD_INT 181
12880: PPUSH
12881: LD_INT 105
12883: PPUSH
12884: LD_INT 12
12886: PPUSH
12887: LD_INT 0
12889: PPUSH
12890: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12894: LD_INT 0
12896: PPUSH
12897: LD_INT 8
12899: PUSH
12900: LD_INT 9
12902: PUSH
12903: LD_INT 10
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: LIST
12910: PUSH
12911: LD_OWVAR 67
12915: ARRAY
12916: PPUSH
12917: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12921: CALL_OW 44
12925: PPUSH
12926: LD_VAR 0 2
12930: PPUSH
12931: CALL_OW 52
// end ;
12935: GO 12848
12937: POP
12938: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12939: LD_INT 8
12941: PUSH
12942: LD_INT 9
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 1
12951: PPUSH
12952: LD_INT 2
12954: PPUSH
12955: CALL_OW 12
12959: ARRAY
12960: PPUSH
12961: LD_INT 3
12963: PPUSH
12964: LD_INT 5
12966: PUSH
12967: LD_INT 7
12969: PUSH
12970: LD_INT 8
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: LIST
12977: PUSH
12978: LD_OWVAR 67
12982: ARRAY
12983: PPUSH
12984: LD_INT 10
12986: PPUSH
12987: LD_INT 3
12989: PPUSH
12990: LD_INT 3
12992: PPUSH
12993: LD_INT 3
12995: PUSH
12996: LD_INT 3
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PPUSH
13003: LD_INT 46
13005: PUSH
13006: LD_INT 44
13008: PUSH
13009: LD_INT 45
13011: PUSH
13012: LD_INT 47
13014: PUSH
13015: LD_INT 49
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: PPUSH
13025: EMPTY
13026: PPUSH
13027: EMPTY
13028: PPUSH
13029: LD_INT 1
13031: PPUSH
13032: CALL 8275 0 11
// end ; end_of_file
13036: PPOPN 2
13038: END
// every 1 1$0 do
13039: GO 13041
13041: DISABLE
// begin enable ;
13042: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
13043: LD_INT 3
13045: PPUSH
13046: LD_INT 5
13048: PPUSH
13049: CALL_OW 12
13053: PPUSH
13054: LD_INT 13
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 55
// end ; end_of_file
13064: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
13065: GO 13067
13067: DISABLE
// begin ru_radar := 98 ;
13068: LD_ADDR_EXP 43
13072: PUSH
13073: LD_INT 98
13075: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13076: LD_ADDR_EXP 44
13080: PUSH
13081: LD_INT 89
13083: ST_TO_ADDR
// us_hack := 99 ;
13084: LD_ADDR_EXP 45
13088: PUSH
13089: LD_INT 99
13091: ST_TO_ADDR
// us_artillery := 97 ;
13092: LD_ADDR_EXP 46
13096: PUSH
13097: LD_INT 97
13099: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13100: LD_ADDR_EXP 47
13104: PUSH
13105: LD_INT 91
13107: ST_TO_ADDR
// end ; end_of_file end_of_file
13108: END
// export StreamModeActive , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote ; every 0 0$1 do
13109: GO 13111
13111: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13112: LD_STRING initStreamRollete();
13114: PPUSH
13115: CALL_OW 559
// InitStreamMode ;
13119: CALL 13124 0 0
// end ;
13123: END
// function InitStreamMode ; begin
13124: LD_INT 0
13126: PPUSH
// streamModeActive := false ;
13127: LD_ADDR_EXP 48
13131: PUSH
13132: LD_INT 0
13134: ST_TO_ADDR
// sRocket := false ;
13135: LD_ADDR_EXP 51
13139: PUSH
13140: LD_INT 0
13142: ST_TO_ADDR
// sSpeed := false ;
13143: LD_ADDR_EXP 50
13147: PUSH
13148: LD_INT 0
13150: ST_TO_ADDR
// sEngine := false ;
13151: LD_ADDR_EXP 52
13155: PUSH
13156: LD_INT 0
13158: ST_TO_ADDR
// sSpec := false ;
13159: LD_ADDR_EXP 49
13163: PUSH
13164: LD_INT 0
13166: ST_TO_ADDR
// sLevel := false ;
13167: LD_ADDR_EXP 53
13171: PUSH
13172: LD_INT 0
13174: ST_TO_ADDR
// sArmoury := false ;
13175: LD_ADDR_EXP 54
13179: PUSH
13180: LD_INT 0
13182: ST_TO_ADDR
// sRadar := false ;
13183: LD_ADDR_EXP 55
13187: PUSH
13188: LD_INT 0
13190: ST_TO_ADDR
// sBunker := false ;
13191: LD_ADDR_EXP 56
13195: PUSH
13196: LD_INT 0
13198: ST_TO_ADDR
// sHack := false ;
13199: LD_ADDR_EXP 57
13203: PUSH
13204: LD_INT 0
13206: ST_TO_ADDR
// sFire := false ;
13207: LD_ADDR_EXP 58
13211: PUSH
13212: LD_INT 0
13214: ST_TO_ADDR
// sRefresh := false ;
13215: LD_ADDR_EXP 59
13219: PUSH
13220: LD_INT 0
13222: ST_TO_ADDR
// sExp := false ;
13223: LD_ADDR_EXP 60
13227: PUSH
13228: LD_INT 0
13230: ST_TO_ADDR
// sDepot := false ;
13231: LD_ADDR_EXP 61
13235: PUSH
13236: LD_INT 0
13238: ST_TO_ADDR
// sFlag := false ;
13239: LD_ADDR_EXP 62
13243: PUSH
13244: LD_INT 0
13246: ST_TO_ADDR
// sKamikadze := false ;
13247: LD_ADDR_EXP 70
13251: PUSH
13252: LD_INT 0
13254: ST_TO_ADDR
// sTroll := false ;
13255: LD_ADDR_EXP 71
13259: PUSH
13260: LD_INT 0
13262: ST_TO_ADDR
// sSlow := false ;
13263: LD_ADDR_EXP 72
13267: PUSH
13268: LD_INT 0
13270: ST_TO_ADDR
// sLack := false ;
13271: LD_ADDR_EXP 73
13275: PUSH
13276: LD_INT 0
13278: ST_TO_ADDR
// sTank := false ;
13279: LD_ADDR_EXP 75
13283: PUSH
13284: LD_INT 0
13286: ST_TO_ADDR
// sRemote := false ;
13287: LD_ADDR_EXP 76
13291: PUSH
13292: LD_INT 0
13294: ST_TO_ADDR
// sSold := false ;
13295: LD_ADDR_EXP 63
13299: PUSH
13300: LD_INT 0
13302: ST_TO_ADDR
// sDiff := false ;
13303: LD_ADDR_EXP 64
13307: PUSH
13308: LD_INT 0
13310: ST_TO_ADDR
// sFog := false ;
13311: LD_ADDR_EXP 67
13315: PUSH
13316: LD_INT 0
13318: ST_TO_ADDR
// sReset := false ;
13319: LD_ADDR_EXP 68
13323: PUSH
13324: LD_INT 0
13326: ST_TO_ADDR
// sSun := false ;
13327: LD_ADDR_EXP 69
13331: PUSH
13332: LD_INT 0
13334: ST_TO_ADDR
// sTiger := false ;
13335: LD_ADDR_EXP 65
13339: PUSH
13340: LD_INT 0
13342: ST_TO_ADDR
// sBomb := false ;
13343: LD_ADDR_EXP 66
13347: PUSH
13348: LD_INT 0
13350: ST_TO_ADDR
// sWound := false ;
13351: LD_ADDR_EXP 74
13355: PUSH
13356: LD_INT 0
13358: ST_TO_ADDR
// end ;
13359: LD_VAR 0 1
13363: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
13364: LD_VAR 0 2
13368: PUSH
13369: LD_INT 100
13371: EQUAL
13372: IFFALSE 13907
// begin if not StreamModeActive then
13374: LD_EXP 48
13378: NOT
13379: IFFALSE 13389
// StreamModeActive := true ;
13381: LD_ADDR_EXP 48
13385: PUSH
13386: LD_INT 1
13388: ST_TO_ADDR
// if p3 = 0 then
13389: LD_VAR 0 3
13393: PUSH
13394: LD_INT 0
13396: EQUAL
13397: IFFALSE 13403
// InitStreamMode ;
13399: CALL 13124 0 0
// if p3 = 1 then
13403: LD_VAR 0 3
13407: PUSH
13408: LD_INT 1
13410: EQUAL
13411: IFFALSE 13421
// sRocket := true ;
13413: LD_ADDR_EXP 51
13417: PUSH
13418: LD_INT 1
13420: ST_TO_ADDR
// if p3 = 2 then
13421: LD_VAR 0 3
13425: PUSH
13426: LD_INT 2
13428: EQUAL
13429: IFFALSE 13439
// sSpeed := true ;
13431: LD_ADDR_EXP 50
13435: PUSH
13436: LD_INT 1
13438: ST_TO_ADDR
// if p3 = 3 then
13439: LD_VAR 0 3
13443: PUSH
13444: LD_INT 3
13446: EQUAL
13447: IFFALSE 13457
// sEngine := true ;
13449: LD_ADDR_EXP 52
13453: PUSH
13454: LD_INT 1
13456: ST_TO_ADDR
// if p3 = 4 then
13457: LD_VAR 0 3
13461: PUSH
13462: LD_INT 4
13464: EQUAL
13465: IFFALSE 13475
// sSpec := true ;
13467: LD_ADDR_EXP 49
13471: PUSH
13472: LD_INT 1
13474: ST_TO_ADDR
// if p3 = 5 then
13475: LD_VAR 0 3
13479: PUSH
13480: LD_INT 5
13482: EQUAL
13483: IFFALSE 13493
// sLevel := true ;
13485: LD_ADDR_EXP 53
13489: PUSH
13490: LD_INT 1
13492: ST_TO_ADDR
// if p3 = 6 then
13493: LD_VAR 0 3
13497: PUSH
13498: LD_INT 6
13500: EQUAL
13501: IFFALSE 13511
// sArmoury := true ;
13503: LD_ADDR_EXP 54
13507: PUSH
13508: LD_INT 1
13510: ST_TO_ADDR
// if p3 = 7 then
13511: LD_VAR 0 3
13515: PUSH
13516: LD_INT 7
13518: EQUAL
13519: IFFALSE 13529
// sRadar := true ;
13521: LD_ADDR_EXP 55
13525: PUSH
13526: LD_INT 1
13528: ST_TO_ADDR
// if p3 = 8 then
13529: LD_VAR 0 3
13533: PUSH
13534: LD_INT 8
13536: EQUAL
13537: IFFALSE 13547
// sBunker := true ;
13539: LD_ADDR_EXP 56
13543: PUSH
13544: LD_INT 1
13546: ST_TO_ADDR
// if p3 = 9 then
13547: LD_VAR 0 3
13551: PUSH
13552: LD_INT 9
13554: EQUAL
13555: IFFALSE 13565
// sHack := true ;
13557: LD_ADDR_EXP 57
13561: PUSH
13562: LD_INT 1
13564: ST_TO_ADDR
// if p3 = 10 then
13565: LD_VAR 0 3
13569: PUSH
13570: LD_INT 10
13572: EQUAL
13573: IFFALSE 13583
// sFire := true ;
13575: LD_ADDR_EXP 58
13579: PUSH
13580: LD_INT 1
13582: ST_TO_ADDR
// if p3 = 11 then
13583: LD_VAR 0 3
13587: PUSH
13588: LD_INT 11
13590: EQUAL
13591: IFFALSE 13601
// sRefresh := true ;
13593: LD_ADDR_EXP 59
13597: PUSH
13598: LD_INT 1
13600: ST_TO_ADDR
// if p3 = 12 then
13601: LD_VAR 0 3
13605: PUSH
13606: LD_INT 12
13608: EQUAL
13609: IFFALSE 13619
// sExp := true ;
13611: LD_ADDR_EXP 60
13615: PUSH
13616: LD_INT 1
13618: ST_TO_ADDR
// if p3 = 13 then
13619: LD_VAR 0 3
13623: PUSH
13624: LD_INT 13
13626: EQUAL
13627: IFFALSE 13637
// sDepot := true ;
13629: LD_ADDR_EXP 61
13633: PUSH
13634: LD_INT 1
13636: ST_TO_ADDR
// if p3 = 14 then
13637: LD_VAR 0 3
13641: PUSH
13642: LD_INT 14
13644: EQUAL
13645: IFFALSE 13655
// sFlag := true ;
13647: LD_ADDR_EXP 62
13651: PUSH
13652: LD_INT 1
13654: ST_TO_ADDR
// if p3 = 15 then
13655: LD_VAR 0 3
13659: PUSH
13660: LD_INT 15
13662: EQUAL
13663: IFFALSE 13673
// sKamikadze := true ;
13665: LD_ADDR_EXP 70
13669: PUSH
13670: LD_INT 1
13672: ST_TO_ADDR
// if p3 = 16 then
13673: LD_VAR 0 3
13677: PUSH
13678: LD_INT 16
13680: EQUAL
13681: IFFALSE 13691
// sTroll := true ;
13683: LD_ADDR_EXP 71
13687: PUSH
13688: LD_INT 1
13690: ST_TO_ADDR
// if p3 = 17 then
13691: LD_VAR 0 3
13695: PUSH
13696: LD_INT 17
13698: EQUAL
13699: IFFALSE 13709
// sSlow := true ;
13701: LD_ADDR_EXP 72
13705: PUSH
13706: LD_INT 1
13708: ST_TO_ADDR
// if p3 = 18 then
13709: LD_VAR 0 3
13713: PUSH
13714: LD_INT 18
13716: EQUAL
13717: IFFALSE 13727
// sLack := true ;
13719: LD_ADDR_EXP 73
13723: PUSH
13724: LD_INT 1
13726: ST_TO_ADDR
// if p3 = 19 then
13727: LD_VAR 0 3
13731: PUSH
13732: LD_INT 19
13734: EQUAL
13735: IFFALSE 13745
// sTank := true ;
13737: LD_ADDR_EXP 75
13741: PUSH
13742: LD_INT 1
13744: ST_TO_ADDR
// if p3 = 20 then
13745: LD_VAR 0 3
13749: PUSH
13750: LD_INT 20
13752: EQUAL
13753: IFFALSE 13763
// sRemote := true ;
13755: LD_ADDR_EXP 76
13759: PUSH
13760: LD_INT 1
13762: ST_TO_ADDR
// if p3 = 101 then
13763: LD_VAR 0 3
13767: PUSH
13768: LD_INT 101
13770: EQUAL
13771: IFFALSE 13781
// sSold := true ;
13773: LD_ADDR_EXP 63
13777: PUSH
13778: LD_INT 1
13780: ST_TO_ADDR
// if p3 = 102 then
13781: LD_VAR 0 3
13785: PUSH
13786: LD_INT 102
13788: EQUAL
13789: IFFALSE 13799
// sDiff := true ;
13791: LD_ADDR_EXP 64
13795: PUSH
13796: LD_INT 1
13798: ST_TO_ADDR
// if p3 = 103 then
13799: LD_VAR 0 3
13803: PUSH
13804: LD_INT 103
13806: EQUAL
13807: IFFALSE 13817
// sFog := true ;
13809: LD_ADDR_EXP 67
13813: PUSH
13814: LD_INT 1
13816: ST_TO_ADDR
// if p3 = 104 then
13817: LD_VAR 0 3
13821: PUSH
13822: LD_INT 104
13824: EQUAL
13825: IFFALSE 13835
// sReset := true ;
13827: LD_ADDR_EXP 68
13831: PUSH
13832: LD_INT 1
13834: ST_TO_ADDR
// if p3 = 105 then
13835: LD_VAR 0 3
13839: PUSH
13840: LD_INT 105
13842: EQUAL
13843: IFFALSE 13853
// sSun := true ;
13845: LD_ADDR_EXP 69
13849: PUSH
13850: LD_INT 1
13852: ST_TO_ADDR
// if p3 = 106 then
13853: LD_VAR 0 3
13857: PUSH
13858: LD_INT 106
13860: EQUAL
13861: IFFALSE 13871
// sTiger := true ;
13863: LD_ADDR_EXP 65
13867: PUSH
13868: LD_INT 1
13870: ST_TO_ADDR
// if p3 = 107 then
13871: LD_VAR 0 3
13875: PUSH
13876: LD_INT 107
13878: EQUAL
13879: IFFALSE 13889
// sBomb := true ;
13881: LD_ADDR_EXP 66
13885: PUSH
13886: LD_INT 1
13888: ST_TO_ADDR
// if p3 = 108 then
13889: LD_VAR 0 3
13893: PUSH
13894: LD_INT 108
13896: EQUAL
13897: IFFALSE 13907
// sWound := true ;
13899: LD_ADDR_EXP 74
13903: PUSH
13904: LD_INT 1
13906: ST_TO_ADDR
// end ; end ;
13907: PPOPN 6
13909: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13910: LD_EXP 48
13914: PUSH
13915: LD_EXP 51
13919: AND
13920: IFFALSE 14041
13922: GO 13924
13924: DISABLE
13925: LD_INT 0
13927: PPUSH
13928: PPUSH
// begin enable ;
13929: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13930: LD_ADDR_VAR 0 2
13934: PUSH
13935: LD_INT 22
13937: PUSH
13938: LD_OWVAR 2
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: LD_INT 2
13949: PUSH
13950: LD_INT 34
13952: PUSH
13953: LD_INT 7
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_INT 34
13962: PUSH
13963: LD_INT 45
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PUSH
13970: LD_INT 34
13972: PUSH
13973: LD_INT 28
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PUSH
13980: LD_INT 34
13982: PUSH
13983: LD_INT 47
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PPUSH
14001: CALL_OW 69
14005: ST_TO_ADDR
// if not tmp then
14006: LD_VAR 0 2
14010: NOT
14011: IFFALSE 14015
// exit ;
14013: GO 14041
// for i in tmp do
14015: LD_ADDR_VAR 0 1
14019: PUSH
14020: LD_VAR 0 2
14024: PUSH
14025: FOR_IN
14026: IFFALSE 14039
// begin DestroyUnit ( i ) ;
14028: LD_VAR 0 1
14032: PPUSH
14033: CALL_OW 65
// end ;
14037: GO 14025
14039: POP
14040: POP
// end ;
14041: PPOPN 2
14043: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14044: LD_EXP 48
14048: PUSH
14049: LD_EXP 52
14053: AND
14054: IFFALSE 14135
14056: GO 14058
14058: DISABLE
14059: LD_INT 0
14061: PPUSH
14062: PPUSH
// begin enable ;
14063: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14064: LD_ADDR_VAR 0 2
14068: PUSH
14069: LD_INT 22
14071: PUSH
14072: LD_OWVAR 2
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 32
14083: PUSH
14084: LD_INT 3
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 69
14099: ST_TO_ADDR
// if not tmp then
14100: LD_VAR 0 2
14104: NOT
14105: IFFALSE 14109
// exit ;
14107: GO 14135
// for i in tmp do
14109: LD_ADDR_VAR 0 1
14113: PUSH
14114: LD_VAR 0 2
14118: PUSH
14119: FOR_IN
14120: IFFALSE 14133
// begin DestroyUnit ( i ) ;
14122: LD_VAR 0 1
14126: PPUSH
14127: CALL_OW 65
// end ;
14131: GO 14119
14133: POP
14134: POP
// end ;
14135: PPOPN 2
14137: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14138: LD_EXP 48
14142: PUSH
14143: LD_EXP 49
14147: AND
14148: IFFALSE 14241
14150: GO 14152
14152: DISABLE
14153: LD_INT 0
14155: PPUSH
// begin enable ;
14156: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14157: LD_ADDR_VAR 0 1
14161: PUSH
14162: LD_INT 22
14164: PUSH
14165: LD_OWVAR 2
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 2
14176: PUSH
14177: LD_INT 25
14179: PUSH
14180: LD_INT 5
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 25
14189: PUSH
14190: LD_INT 9
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 25
14199: PUSH
14200: LD_INT 8
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PPUSH
14217: CALL_OW 69
14221: PUSH
14222: FOR_IN
14223: IFFALSE 14239
// begin SetClass ( i , 1 ) ;
14225: LD_VAR 0 1
14229: PPUSH
14230: LD_INT 1
14232: PPUSH
14233: CALL_OW 336
// end ;
14237: GO 14222
14239: POP
14240: POP
// end ;
14241: PPOPN 1
14243: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14244: LD_EXP 48
14248: PUSH
14249: LD_EXP 50
14253: AND
14254: PUSH
14255: LD_OWVAR 65
14259: PUSH
14260: LD_INT 7
14262: LESS
14263: AND
14264: IFFALSE 14278
14266: GO 14268
14268: DISABLE
// begin enable ;
14269: ENABLE
// game_speed := 7 ;
14270: LD_ADDR_OWVAR 65
14274: PUSH
14275: LD_INT 7
14277: ST_TO_ADDR
// end ;
14278: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14279: LD_EXP 48
14283: PUSH
14284: LD_EXP 53
14288: AND
14289: IFFALSE 14491
14291: GO 14293
14293: DISABLE
14294: LD_INT 0
14296: PPUSH
14297: PPUSH
14298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14299: LD_ADDR_VAR 0 3
14303: PUSH
14304: LD_INT 81
14306: PUSH
14307: LD_OWVAR 2
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 21
14318: PUSH
14319: LD_INT 1
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PPUSH
14330: CALL_OW 69
14334: ST_TO_ADDR
// if not tmp then
14335: LD_VAR 0 3
14339: NOT
14340: IFFALSE 14344
// exit ;
14342: GO 14491
// if tmp > 5 then
14344: LD_VAR 0 3
14348: PUSH
14349: LD_INT 5
14351: GREATER
14352: IFFALSE 14364
// k := 5 else
14354: LD_ADDR_VAR 0 2
14358: PUSH
14359: LD_INT 5
14361: ST_TO_ADDR
14362: GO 14374
// k := tmp ;
14364: LD_ADDR_VAR 0 2
14368: PUSH
14369: LD_VAR 0 3
14373: ST_TO_ADDR
// for i := 1 to k do
14374: LD_ADDR_VAR 0 1
14378: PUSH
14379: DOUBLE
14380: LD_INT 1
14382: DEC
14383: ST_TO_ADDR
14384: LD_VAR 0 2
14388: PUSH
14389: FOR_TO
14390: IFFALSE 14489
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14392: LD_VAR 0 3
14396: PUSH
14397: LD_VAR 0 1
14401: ARRAY
14402: PPUSH
14403: LD_VAR 0 1
14407: PUSH
14408: LD_INT 4
14410: MOD
14411: PUSH
14412: LD_INT 1
14414: PLUS
14415: PPUSH
14416: CALL_OW 259
14420: PUSH
14421: LD_INT 10
14423: LESS
14424: IFFALSE 14487
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14426: LD_VAR 0 3
14430: PUSH
14431: LD_VAR 0 1
14435: ARRAY
14436: PPUSH
14437: LD_VAR 0 1
14441: PUSH
14442: LD_INT 4
14444: MOD
14445: PUSH
14446: LD_INT 1
14448: PLUS
14449: PPUSH
14450: LD_VAR 0 3
14454: PUSH
14455: LD_VAR 0 1
14459: ARRAY
14460: PPUSH
14461: LD_VAR 0 1
14465: PUSH
14466: LD_INT 4
14468: MOD
14469: PUSH
14470: LD_INT 1
14472: PLUS
14473: PPUSH
14474: CALL_OW 259
14478: PUSH
14479: LD_INT 1
14481: PLUS
14482: PPUSH
14483: CALL_OW 237
14487: GO 14389
14489: POP
14490: POP
// end ;
14491: PPOPN 3
14493: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14494: LD_EXP 48
14498: PUSH
14499: LD_EXP 54
14503: AND
14504: IFFALSE 14524
14506: GO 14508
14508: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14509: LD_INT 4
14511: PPUSH
14512: LD_OWVAR 2
14516: PPUSH
14517: LD_INT 0
14519: PPUSH
14520: CALL_OW 324
14524: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14525: LD_EXP 48
14529: PUSH
14530: LD_EXP 55
14534: AND
14535: IFFALSE 14634
14537: GO 14539
14539: DISABLE
14540: LD_INT 0
14542: PPUSH
14543: PPUSH
// begin enable ;
14544: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14545: LD_ADDR_VAR 0 2
14549: PUSH
14550: LD_INT 22
14552: PUSH
14553: LD_OWVAR 2
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PUSH
14562: LD_INT 2
14564: PUSH
14565: LD_INT 34
14567: PUSH
14568: LD_INT 11
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 34
14577: PUSH
14578: LD_INT 30
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: LIST
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PPUSH
14594: CALL_OW 69
14598: ST_TO_ADDR
// if not tmp then
14599: LD_VAR 0 2
14603: NOT
14604: IFFALSE 14608
// exit ;
14606: GO 14634
// for i in tmp do
14608: LD_ADDR_VAR 0 1
14612: PUSH
14613: LD_VAR 0 2
14617: PUSH
14618: FOR_IN
14619: IFFALSE 14632
// begin DestroyUnit ( i ) ;
14621: LD_VAR 0 1
14625: PPUSH
14626: CALL_OW 65
// end ;
14630: GO 14618
14632: POP
14633: POP
// end ;
14634: PPOPN 2
14636: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14637: LD_EXP 48
14641: PUSH
14642: LD_EXP 56
14646: AND
14647: IFFALSE 14667
14649: GO 14651
14651: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14652: LD_INT 32
14654: PPUSH
14655: LD_OWVAR 2
14659: PPUSH
14660: LD_INT 0
14662: PPUSH
14663: CALL_OW 324
14667: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14668: LD_EXP 48
14672: PUSH
14673: LD_EXP 57
14677: AND
14678: IFFALSE 14859
14680: GO 14682
14682: DISABLE
14683: LD_INT 0
14685: PPUSH
14686: PPUSH
14687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14688: LD_ADDR_VAR 0 2
14692: PUSH
14693: LD_INT 22
14695: PUSH
14696: LD_OWVAR 2
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 33
14707: PUSH
14708: LD_INT 3
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 69
14723: ST_TO_ADDR
// if not tmp then
14724: LD_VAR 0 2
14728: NOT
14729: IFFALSE 14733
// exit ;
14731: GO 14859
// side := 0 ;
14733: LD_ADDR_VAR 0 3
14737: PUSH
14738: LD_INT 0
14740: ST_TO_ADDR
// for i := 1 to 8 do
14741: LD_ADDR_VAR 0 1
14745: PUSH
14746: DOUBLE
14747: LD_INT 1
14749: DEC
14750: ST_TO_ADDR
14751: LD_INT 8
14753: PUSH
14754: FOR_TO
14755: IFFALSE 14803
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14757: LD_OWVAR 2
14761: PUSH
14762: LD_VAR 0 1
14766: NONEQUAL
14767: PUSH
14768: LD_OWVAR 2
14772: PPUSH
14773: LD_VAR 0 1
14777: PPUSH
14778: CALL_OW 81
14782: PUSH
14783: LD_INT 2
14785: EQUAL
14786: AND
14787: IFFALSE 14801
// begin side := i ;
14789: LD_ADDR_VAR 0 3
14793: PUSH
14794: LD_VAR 0 1
14798: ST_TO_ADDR
// break ;
14799: GO 14803
// end ;
14801: GO 14754
14803: POP
14804: POP
// if not side then
14805: LD_VAR 0 3
14809: NOT
14810: IFFALSE 14814
// exit ;
14812: GO 14859
// for i := 1 to tmp do
14814: LD_ADDR_VAR 0 1
14818: PUSH
14819: DOUBLE
14820: LD_INT 1
14822: DEC
14823: ST_TO_ADDR
14824: LD_VAR 0 2
14828: PUSH
14829: FOR_TO
14830: IFFALSE 14857
// if Prob ( 30 ) then
14832: LD_INT 30
14834: PPUSH
14835: CALL_OW 13
14839: IFFALSE 14855
// SetSide ( i , side ) ;
14841: LD_VAR 0 1
14845: PPUSH
14846: LD_VAR 0 3
14850: PPUSH
14851: CALL_OW 235
14855: GO 14829
14857: POP
14858: POP
// end ;
14859: PPOPN 3
14861: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14862: LD_EXP 48
14866: PUSH
14867: LD_EXP 59
14871: AND
14872: IFFALSE 14991
14874: GO 14876
14876: DISABLE
14877: LD_INT 0
14879: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14880: LD_ADDR_VAR 0 1
14884: PUSH
14885: LD_INT 22
14887: PUSH
14888: LD_OWVAR 2
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 21
14899: PUSH
14900: LD_INT 1
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: LD_INT 3
14909: PUSH
14910: LD_INT 23
14912: PUSH
14913: LD_INT 0
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: LIST
14928: PPUSH
14929: CALL_OW 69
14933: PUSH
14934: FOR_IN
14935: IFFALSE 14989
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14937: LD_VAR 0 1
14941: PPUSH
14942: CALL_OW 257
14946: PUSH
14947: LD_INT 1
14949: PUSH
14950: LD_INT 2
14952: PUSH
14953: LD_INT 3
14955: PUSH
14956: LD_INT 4
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: IN
14965: IFFALSE 14987
// SetClass ( un , rand ( 1 , 4 ) ) ;
14967: LD_VAR 0 1
14971: PPUSH
14972: LD_INT 1
14974: PPUSH
14975: LD_INT 4
14977: PPUSH
14978: CALL_OW 12
14982: PPUSH
14983: CALL_OW 336
14987: GO 14934
14989: POP
14990: POP
// end ;
14991: PPOPN 1
14993: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14994: LD_EXP 48
14998: PUSH
14999: LD_EXP 58
15003: AND
15004: IFFALSE 15083
15006: GO 15008
15008: DISABLE
15009: LD_INT 0
15011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15012: LD_ADDR_VAR 0 1
15016: PUSH
15017: LD_INT 22
15019: PUSH
15020: LD_OWVAR 2
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: LD_INT 21
15031: PUSH
15032: LD_INT 3
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PPUSH
15043: CALL_OW 69
15047: ST_TO_ADDR
// if not tmp then
15048: LD_VAR 0 1
15052: NOT
15053: IFFALSE 15057
// exit ;
15055: GO 15083
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15057: LD_VAR 0 1
15061: PUSH
15062: LD_INT 1
15064: PPUSH
15065: LD_VAR 0 1
15069: PPUSH
15070: CALL_OW 12
15074: ARRAY
15075: PPUSH
15076: LD_INT 100
15078: PPUSH
15079: CALL_OW 234
// end ;
15083: PPOPN 1
15085: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15086: LD_EXP 48
15090: PUSH
15091: LD_EXP 60
15095: AND
15096: IFFALSE 15194
15098: GO 15100
15100: DISABLE
15101: LD_INT 0
15103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15104: LD_ADDR_VAR 0 1
15108: PUSH
15109: LD_INT 22
15111: PUSH
15112: LD_OWVAR 2
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 21
15123: PUSH
15124: LD_INT 1
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PPUSH
15135: CALL_OW 69
15139: ST_TO_ADDR
// if not tmp then
15140: LD_VAR 0 1
15144: NOT
15145: IFFALSE 15149
// exit ;
15147: GO 15194
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15149: LD_VAR 0 1
15153: PUSH
15154: LD_INT 1
15156: PPUSH
15157: LD_VAR 0 1
15161: PPUSH
15162: CALL_OW 12
15166: ARRAY
15167: PPUSH
15168: LD_INT 1
15170: PPUSH
15171: LD_INT 4
15173: PPUSH
15174: CALL_OW 12
15178: PPUSH
15179: LD_INT 3000
15181: PPUSH
15182: LD_INT 9000
15184: PPUSH
15185: CALL_OW 12
15189: PPUSH
15190: CALL_OW 492
// end ;
15194: PPOPN 1
15196: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15197: LD_EXP 48
15201: PUSH
15202: LD_EXP 61
15206: AND
15207: IFFALSE 15227
15209: GO 15211
15211: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15212: LD_INT 1
15214: PPUSH
15215: LD_OWVAR 2
15219: PPUSH
15220: LD_INT 0
15222: PPUSH
15223: CALL_OW 324
15227: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15228: LD_EXP 48
15232: PUSH
15233: LD_EXP 62
15237: AND
15238: IFFALSE 15321
15240: GO 15242
15242: DISABLE
15243: LD_INT 0
15245: PPUSH
15246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15247: LD_ADDR_VAR 0 2
15251: PUSH
15252: LD_INT 22
15254: PUSH
15255: LD_OWVAR 2
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 21
15266: PUSH
15267: LD_INT 3
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PPUSH
15278: CALL_OW 69
15282: ST_TO_ADDR
// if not tmp then
15283: LD_VAR 0 2
15287: NOT
15288: IFFALSE 15292
// exit ;
15290: GO 15321
// for i in tmp do
15292: LD_ADDR_VAR 0 1
15296: PUSH
15297: LD_VAR 0 2
15301: PUSH
15302: FOR_IN
15303: IFFALSE 15319
// SetBLevel ( i , 10 ) ;
15305: LD_VAR 0 1
15309: PPUSH
15310: LD_INT 10
15312: PPUSH
15313: CALL_OW 241
15317: GO 15302
15319: POP
15320: POP
// end ;
15321: PPOPN 2
15323: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , tmp ;
15324: LD_EXP 48
15328: PUSH
15329: LD_EXP 63
15333: AND
15334: IFFALSE 15437
15336: GO 15338
15338: DISABLE
15339: LD_INT 0
15341: PPUSH
15342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15343: LD_ADDR_VAR 0 2
15347: PUSH
15348: LD_INT 22
15350: PUSH
15351: LD_OWVAR 2
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 25
15362: PUSH
15363: LD_INT 1
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PPUSH
15374: CALL_OW 69
15378: ST_TO_ADDR
// if not tmp then
15379: LD_VAR 0 2
15383: NOT
15384: IFFALSE 15388
// exit ;
15386: GO 15437
// for i in tmp do
15388: LD_ADDR_VAR 0 1
15392: PUSH
15393: LD_VAR 0 2
15397: PUSH
15398: FOR_IN
15399: IFFALSE 15435
// begin if Crawls ( i ) then
15401: LD_VAR 0 1
15405: PPUSH
15406: CALL_OW 318
15410: IFFALSE 15421
// ComWalk ( i ) ;
15412: LD_VAR 0 1
15416: PPUSH
15417: CALL_OW 138
// SetClass ( i , 4 ) ;
15421: LD_VAR 0 1
15425: PPUSH
15426: LD_INT 4
15428: PPUSH
15429: CALL_OW 336
// end ;
15433: GO 15398
15435: POP
15436: POP
// end ;
15437: PPOPN 2
15439: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
15440: LD_EXP 48
15444: PUSH
15445: LD_EXP 64
15449: AND
15450: PUSH
15451: LD_OWVAR 67
15455: PUSH
15456: LD_INT 3
15458: LESS
15459: AND
15460: IFFALSE 15479
15462: GO 15464
15464: DISABLE
// Difficulty := Difficulty + 1 ;
15465: LD_ADDR_OWVAR 67
15469: PUSH
15470: LD_OWVAR 67
15474: PUSH
15475: LD_INT 1
15477: PLUS
15478: ST_TO_ADDR
15479: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15480: LD_EXP 48
15484: PUSH
15485: LD_EXP 65
15489: AND
15490: IFFALSE 15593
15492: GO 15494
15494: DISABLE
15495: LD_INT 0
15497: PPUSH
// begin for i := 1 to 5 do
15498: LD_ADDR_VAR 0 1
15502: PUSH
15503: DOUBLE
15504: LD_INT 1
15506: DEC
15507: ST_TO_ADDR
15508: LD_INT 5
15510: PUSH
15511: FOR_TO
15512: IFFALSE 15591
// begin uc_nation := nation_nature ;
15514: LD_ADDR_OWVAR 21
15518: PUSH
15519: LD_INT 0
15521: ST_TO_ADDR
// uc_side := 0 ;
15522: LD_ADDR_OWVAR 20
15526: PUSH
15527: LD_INT 0
15529: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15530: LD_ADDR_OWVAR 29
15534: PUSH
15535: LD_INT 12
15537: PUSH
15538: LD_INT 12
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: ST_TO_ADDR
// hc_agressivity := 20 ;
15545: LD_ADDR_OWVAR 35
15549: PUSH
15550: LD_INT 20
15552: ST_TO_ADDR
// hc_class := class_tiger ;
15553: LD_ADDR_OWVAR 28
15557: PUSH
15558: LD_INT 14
15560: ST_TO_ADDR
// hc_gallery :=  ;
15561: LD_ADDR_OWVAR 33
15565: PUSH
15566: LD_STRING 
15568: ST_TO_ADDR
// hc_name :=  ;
15569: LD_ADDR_OWVAR 26
15573: PUSH
15574: LD_STRING 
15576: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15577: CALL_OW 44
15581: PPUSH
15582: LD_INT 0
15584: PPUSH
15585: CALL_OW 51
// end ;
15589: GO 15511
15591: POP
15592: POP
// end ;
15593: PPOPN 1
15595: END
// every 0 0$1 trigger StreamModeActive and sBomb do var i , x , y , result ;
15596: LD_EXP 48
15600: PUSH
15601: LD_EXP 66
15605: AND
15606: IFFALSE 15780
15608: GO 15610
15610: DISABLE
15611: LD_INT 0
15613: PPUSH
15614: PPUSH
15615: PPUSH
15616: PPUSH
// begin result := false ;
15617: LD_ADDR_VAR 0 4
15621: PUSH
15622: LD_INT 0
15624: ST_TO_ADDR
// for i := 1 to 8 do
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: DOUBLE
15631: LD_INT 1
15633: DEC
15634: ST_TO_ADDR
15635: LD_INT 8
15637: PUSH
15638: FOR_TO
15639: IFFALSE 15750
// begin x := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
15641: LD_ADDR_VAR 0 2
15645: PUSH
15646: LD_INT 10
15648: PUSH
15649: LD_INT 50
15651: PUSH
15652: LD_INT 90
15654: PUSH
15655: LD_INT 140
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 1
15666: PPUSH
15667: LD_INT 4
15669: PPUSH
15670: CALL_OW 12
15674: ARRAY
15675: ST_TO_ADDR
// y := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
15676: LD_ADDR_VAR 0 3
15680: PUSH
15681: LD_INT 10
15683: PUSH
15684: LD_INT 50
15686: PUSH
15687: LD_INT 90
15689: PUSH
15690: LD_INT 140
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: PUSH
15699: LD_INT 1
15701: PPUSH
15702: LD_INT 4
15704: PPUSH
15705: CALL_OW 12
15709: ARRAY
15710: ST_TO_ADDR
// if ValidHex ( x , y ) then
15711: LD_VAR 0 2
15715: PPUSH
15716: LD_VAR 0 3
15720: PPUSH
15721: CALL_OW 488
15725: IFFALSE 15748
// begin result := [ x , y ] ;
15727: LD_ADDR_VAR 0 4
15731: PUSH
15732: LD_VAR 0 2
15736: PUSH
15737: LD_VAR 0 3
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: ST_TO_ADDR
// break ;
15746: GO 15750
// end ; end ;
15748: GO 15638
15750: POP
15751: POP
// if result then
15752: LD_VAR 0 4
15756: IFFALSE 15780
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15758: LD_VAR 0 4
15762: PUSH
15763: LD_INT 1
15765: ARRAY
15766: PPUSH
15767: LD_VAR 0 4
15771: PUSH
15772: LD_INT 2
15774: ARRAY
15775: PPUSH
15776: CALL_OW 429
// end ;
15780: PPOPN 4
15782: END
// every 0 0$1 trigger StreamModeActive and sReset do
15783: LD_EXP 48
15787: PUSH
15788: LD_EXP 68
15792: AND
15793: IFFALSE 15805
15795: GO 15797
15797: DISABLE
// YouLost (  ) ;
15798: LD_STRING 
15800: PPUSH
15801: CALL_OW 104
15805: END
// every 0 0$1 trigger StreamModeActive and sFog do
15806: LD_EXP 48
15810: PUSH
15811: LD_EXP 67
15815: AND
15816: IFFALSE 15830
15818: GO 15820
15820: DISABLE
// FogOff ( your_side ) ;
15821: LD_OWVAR 2
15825: PPUSH
15826: CALL_OW 344
15830: END
// every 0 0$1 trigger StreamModeActive and sSun do
15831: LD_EXP 48
15835: PUSH
15836: LD_EXP 69
15840: AND
15841: IFFALSE 15869
15843: GO 15845
15845: DISABLE
// begin solar_recharge_percent := 0 ;
15846: LD_ADDR_OWVAR 79
15850: PUSH
15851: LD_INT 0
15853: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15854: LD_INT 10500
15856: PPUSH
15857: CALL_OW 67
// solar_recharge_percent := 100 ;
15861: LD_ADDR_OWVAR 79
15865: PUSH
15866: LD_INT 100
15868: ST_TO_ADDR
// end ;
15869: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un ;
15870: LD_EXP 48
15874: PUSH
15875: LD_EXP 70
15879: AND
15880: IFFALSE 16035
15882: GO 15884
15884: DISABLE
15885: LD_INT 0
15887: PPUSH
15888: PPUSH
// begin for i := 1 to 6 do
15889: LD_ADDR_VAR 0 1
15893: PUSH
15894: DOUBLE
15895: LD_INT 1
15897: DEC
15898: ST_TO_ADDR
15899: LD_INT 6
15901: PUSH
15902: FOR_TO
15903: IFFALSE 16033
// begin uc_nation := nation_nature ;
15905: LD_ADDR_OWVAR 21
15909: PUSH
15910: LD_INT 0
15912: ST_TO_ADDR
// uc_side := 0 ;
15913: LD_ADDR_OWVAR 20
15917: PUSH
15918: LD_INT 0
15920: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15921: LD_ADDR_OWVAR 29
15925: PUSH
15926: LD_INT 12
15928: PUSH
15929: LD_INT 12
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: ST_TO_ADDR
// hc_agressivity := 20 ;
15936: LD_ADDR_OWVAR 35
15940: PUSH
15941: LD_INT 20
15943: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15944: LD_ADDR_OWVAR 28
15948: PUSH
15949: LD_INT 17
15951: ST_TO_ADDR
// hc_gallery :=  ;
15952: LD_ADDR_OWVAR 33
15956: PUSH
15957: LD_STRING 
15959: ST_TO_ADDR
// hc_name :=  ;
15960: LD_ADDR_OWVAR 26
15964: PUSH
15965: LD_STRING 
15967: ST_TO_ADDR
// un := CreateHuman ;
15968: LD_ADDR_VAR 0 2
15972: PUSH
15973: CALL_OW 44
15977: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15978: LD_VAR 0 2
15982: PPUSH
15983: LD_INT 1
15985: PPUSH
15986: CALL_OW 51
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15990: LD_VAR 0 2
15994: PPUSH
15995: LD_INT 3
15997: PUSH
15998: LD_INT 22
16000: PUSH
16001: LD_INT 0
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PPUSH
16012: CALL_OW 69
16016: PPUSH
16017: LD_VAR 0 2
16021: PPUSH
16022: CALL_OW 74
16026: PPUSH
16027: CALL_OW 115
// end ;
16031: GO 15902
16033: POP
16034: POP
// end ;
16035: PPOPN 2
16037: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16038: LD_EXP 48
16042: PUSH
16043: LD_EXP 71
16047: AND
16048: IFFALSE 16074
16050: GO 16052
16052: DISABLE
// begin ToLua ( displayTroll(); ) ;
16053: LD_STRING displayTroll();
16055: PPUSH
16056: CALL_OW 559
// wait ( 3 3$00 ) ;
16060: LD_INT 6300
16062: PPUSH
16063: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16067: LD_STRING hideTroll();
16069: PPUSH
16070: CALL_OW 559
// end ;
16074: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16075: LD_EXP 48
16079: PUSH
16080: LD_EXP 72
16084: AND
16085: IFFALSE 16148
16087: GO 16089
16089: DISABLE
16090: LD_INT 0
16092: PPUSH
// begin p := 0 ;
16093: LD_ADDR_VAR 0 1
16097: PUSH
16098: LD_INT 0
16100: ST_TO_ADDR
// repeat game_speed := 1 ;
16101: LD_ADDR_OWVAR 65
16105: PUSH
16106: LD_INT 1
16108: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16109: LD_INT 35
16111: PPUSH
16112: CALL_OW 67
// p := p + 1 ;
16116: LD_ADDR_VAR 0 1
16120: PUSH
16121: LD_VAR 0 1
16125: PUSH
16126: LD_INT 1
16128: PLUS
16129: ST_TO_ADDR
// until p >= 60 ;
16130: LD_VAR 0 1
16134: PUSH
16135: LD_INT 60
16137: GREATEREQUAL
16138: IFFALSE 16101
// game_speed := 4 ;
16140: LD_ADDR_OWVAR 65
16144: PUSH
16145: LD_INT 4
16147: ST_TO_ADDR
// end ;
16148: PPOPN 1
16150: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16151: LD_EXP 48
16155: PUSH
16156: LD_EXP 73
16160: AND
16161: IFFALSE 16307
16163: GO 16165
16165: DISABLE
16166: LD_INT 0
16168: PPUSH
16169: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16170: LD_ADDR_VAR 0 1
16174: PUSH
16175: LD_INT 22
16177: PUSH
16178: LD_OWVAR 2
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 2
16189: PUSH
16190: LD_INT 30
16192: PUSH
16193: LD_INT 0
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: LD_INT 30
16202: PUSH
16203: LD_INT 1
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PPUSH
16219: CALL_OW 69
16223: ST_TO_ADDR
// if not depot then
16224: LD_VAR 0 1
16228: NOT
16229: IFFALSE 16233
// exit ;
16231: GO 16307
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16233: LD_ADDR_VAR 0 2
16237: PUSH
16238: LD_VAR 0 1
16242: PUSH
16243: LD_INT 1
16245: PPUSH
16246: LD_VAR 0 1
16250: PPUSH
16251: CALL_OW 12
16255: ARRAY
16256: PPUSH
16257: CALL_OW 274
16261: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16262: LD_VAR 0 2
16266: PPUSH
16267: LD_INT 1
16269: PPUSH
16270: LD_INT 0
16272: PPUSH
16273: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16277: LD_VAR 0 2
16281: PPUSH
16282: LD_INT 2
16284: PPUSH
16285: LD_INT 0
16287: PPUSH
16288: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16292: LD_VAR 0 2
16296: PPUSH
16297: LD_INT 3
16299: PPUSH
16300: LD_INT 0
16302: PPUSH
16303: CALL_OW 277
// end ;
16307: PPOPN 2
16309: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16310: LD_EXP 48
16314: PUSH
16315: LD_EXP 74
16319: AND
16320: IFFALSE 16417
16322: GO 16324
16324: DISABLE
16325: LD_INT 0
16327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16328: LD_ADDR_VAR 0 1
16332: PUSH
16333: LD_INT 22
16335: PUSH
16336: LD_OWVAR 2
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 21
16347: PUSH
16348: LD_INT 1
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 3
16357: PUSH
16358: LD_INT 23
16360: PUSH
16361: LD_INT 0
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: PPUSH
16377: CALL_OW 69
16381: ST_TO_ADDR
// if not tmp then
16382: LD_VAR 0 1
16386: NOT
16387: IFFALSE 16391
// exit ;
16389: GO 16417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16391: LD_VAR 0 1
16395: PUSH
16396: LD_INT 1
16398: PPUSH
16399: LD_VAR 0 1
16403: PPUSH
16404: CALL_OW 12
16408: ARRAY
16409: PPUSH
16410: LD_INT 200
16412: PPUSH
16413: CALL_OW 234
// end ;
16417: PPOPN 1
16419: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16420: LD_EXP 48
16424: PUSH
16425: LD_EXP 75
16429: AND
16430: IFFALSE 16509
16432: GO 16434
16434: DISABLE
16435: LD_INT 0
16437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16438: LD_ADDR_VAR 0 1
16442: PUSH
16443: LD_INT 22
16445: PUSH
16446: LD_OWVAR 2
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 21
16457: PUSH
16458: LD_INT 2
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PPUSH
16469: CALL_OW 69
16473: ST_TO_ADDR
// if not tmp then
16474: LD_VAR 0 1
16478: NOT
16479: IFFALSE 16483
// exit ;
16481: GO 16509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 10 ) ;
16483: LD_VAR 0 1
16487: PUSH
16488: LD_INT 1
16490: PPUSH
16491: LD_VAR 0 1
16495: PPUSH
16496: CALL_OW 12
16500: ARRAY
16501: PPUSH
16502: LD_INT 10
16504: PPUSH
16505: CALL_OW 234
// end ;
16509: PPOPN 1
16511: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16512: LD_EXP 48
16516: PUSH
16517: LD_EXP 76
16521: AND
16522: IFFALSE 16621
16524: GO 16526
16526: DISABLE
16527: LD_INT 0
16529: PPUSH
16530: PPUSH
// begin enable ;
16531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16532: LD_ADDR_VAR 0 1
16536: PUSH
16537: LD_INT 22
16539: PUSH
16540: LD_OWVAR 2
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: LD_INT 61
16551: PUSH
16552: EMPTY
16553: LIST
16554: PUSH
16555: LD_INT 33
16557: PUSH
16558: LD_INT 2
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: PPUSH
16570: CALL_OW 69
16574: ST_TO_ADDR
// if not tmp then
16575: LD_VAR 0 1
16579: NOT
16580: IFFALSE 16584
// exit ;
16582: GO 16621
// for i in tmp do
16584: LD_ADDR_VAR 0 2
16588: PUSH
16589: LD_VAR 0 1
16593: PUSH
16594: FOR_IN
16595: IFFALSE 16619
// if IsControledBy ( i ) then
16597: LD_VAR 0 2
16601: PPUSH
16602: CALL_OW 312
16606: IFFALSE 16617
// ComUnlink ( i ) ;
16608: LD_VAR 0 2
16612: PPUSH
16613: CALL_OW 136
16617: GO 16594
16619: POP
16620: POP
// end ; end_of_file
16621: PPOPN 2
16623: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
16624: LD_INT 0
16626: PPUSH
16627: PPUSH
16628: PPUSH
16629: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
16630: LD_VAR 0 1
16634: PPUSH
16635: CALL_OW 264
16639: PUSH
16640: LD_EXP 47
16644: EQUAL
16645: IFFALSE 16717
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16647: LD_INT 68
16649: PPUSH
16650: LD_VAR 0 1
16654: PPUSH
16655: CALL_OW 255
16659: PPUSH
16660: CALL_OW 321
16664: PUSH
16665: LD_INT 2
16667: EQUAL
16668: IFFALSE 16680
// eff := 70 else
16670: LD_ADDR_VAR 0 6
16674: PUSH
16675: LD_INT 70
16677: ST_TO_ADDR
16678: GO 16688
// eff := 30 ;
16680: LD_ADDR_VAR 0 6
16684: PUSH
16685: LD_INT 30
16687: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16688: LD_VAR 0 1
16692: PPUSH
16693: CALL_OW 250
16697: PPUSH
16698: LD_VAR 0 1
16702: PPUSH
16703: CALL_OW 251
16707: PPUSH
16708: LD_VAR 0 6
16712: PPUSH
16713: CALL_OW 495
// end ; end ;
16717: LD_VAR 0 4
16721: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
16722: LD_INT 0
16724: PPUSH
16725: PPUSH
16726: PPUSH
16727: PPUSH
16728: PPUSH
16729: PPUSH
// if cmd = 124 then
16730: LD_VAR 0 1
16734: PUSH
16735: LD_INT 124
16737: EQUAL
16738: IFFALSE 16944
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
16740: LD_ADDR_VAR 0 5
16744: PUSH
16745: LD_INT 2
16747: PUSH
16748: LD_INT 34
16750: PUSH
16751: LD_INT 53
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 34
16760: PUSH
16761: LD_INT 14
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: LIST
16772: PPUSH
16773: CALL_OW 69
16777: ST_TO_ADDR
// if not tmp then
16778: LD_VAR 0 5
16782: NOT
16783: IFFALSE 16787
// exit ;
16785: GO 16944
// for i in tmp do
16787: LD_ADDR_VAR 0 3
16791: PUSH
16792: LD_VAR 0 5
16796: PUSH
16797: FOR_IN
16798: IFFALSE 16942
// begin taskList := GetTaskList ( i ) ;
16800: LD_ADDR_VAR 0 6
16804: PUSH
16805: LD_VAR 0 3
16809: PPUSH
16810: CALL_OW 437
16814: ST_TO_ADDR
// if not taskList then
16815: LD_VAR 0 6
16819: NOT
16820: IFFALSE 16824
// continue ;
16822: GO 16797
// for j = 1 to taskList do
16824: LD_ADDR_VAR 0 4
16828: PUSH
16829: DOUBLE
16830: LD_INT 1
16832: DEC
16833: ST_TO_ADDR
16834: LD_VAR 0 6
16838: PUSH
16839: FOR_TO
16840: IFFALSE 16938
// if taskList [ j ] [ 1 ] = | then
16842: LD_VAR 0 6
16846: PUSH
16847: LD_VAR 0 4
16851: ARRAY
16852: PUSH
16853: LD_INT 1
16855: ARRAY
16856: PUSH
16857: LD_STRING |
16859: EQUAL
16860: IFFALSE 16936
// begin _taskList := Delete ( taskList , 1 ) ;
16862: LD_ADDR_VAR 0 7
16866: PUSH
16867: LD_VAR 0 6
16871: PPUSH
16872: LD_INT 1
16874: PPUSH
16875: CALL_OW 3
16879: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
16880: LD_VAR 0 3
16884: PPUSH
16885: LD_VAR 0 7
16889: PPUSH
16890: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
16894: LD_VAR 0 3
16898: PPUSH
16899: LD_VAR 0 6
16903: PUSH
16904: LD_VAR 0 4
16908: ARRAY
16909: PUSH
16910: LD_INT 2
16912: ARRAY
16913: PPUSH
16914: LD_VAR 0 6
16918: PUSH
16919: LD_VAR 0 4
16923: ARRAY
16924: PUSH
16925: LD_INT 3
16927: ARRAY
16928: PPUSH
16929: LD_INT 8
16931: PPUSH
16932: CALL 16949 0 4
// end ;
16936: GO 16839
16938: POP
16939: POP
// end ;
16940: GO 16797
16942: POP
16943: POP
// end ; end ;
16944: LD_VAR 0 2
16948: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16949: LD_INT 0
16951: PPUSH
16952: PPUSH
16953: PPUSH
16954: PPUSH
16955: PPUSH
16956: PPUSH
16957: PPUSH
16958: PPUSH
16959: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16960: LD_VAR 0 1
16964: NOT
16965: PUSH
16966: LD_VAR 0 2
16970: PPUSH
16971: LD_VAR 0 3
16975: PPUSH
16976: CALL_OW 488
16980: NOT
16981: OR
16982: PUSH
16983: LD_VAR 0 4
16987: NOT
16988: OR
16989: IFFALSE 16993
// exit ;
16991: GO 17333
// list := [ ] ;
16993: LD_ADDR_VAR 0 13
16997: PUSH
16998: EMPTY
16999: ST_TO_ADDR
// if x - r < 0 then
17000: LD_VAR 0 2
17004: PUSH
17005: LD_VAR 0 4
17009: MINUS
17010: PUSH
17011: LD_INT 0
17013: LESS
17014: IFFALSE 17026
// min_x := 0 else
17016: LD_ADDR_VAR 0 7
17020: PUSH
17021: LD_INT 0
17023: ST_TO_ADDR
17024: GO 17042
// min_x := x - r ;
17026: LD_ADDR_VAR 0 7
17030: PUSH
17031: LD_VAR 0 2
17035: PUSH
17036: LD_VAR 0 4
17040: MINUS
17041: ST_TO_ADDR
// if y - r < 0 then
17042: LD_VAR 0 3
17046: PUSH
17047: LD_VAR 0 4
17051: MINUS
17052: PUSH
17053: LD_INT 0
17055: LESS
17056: IFFALSE 17068
// min_y := 0 else
17058: LD_ADDR_VAR 0 8
17062: PUSH
17063: LD_INT 0
17065: ST_TO_ADDR
17066: GO 17084
// min_y := y - r ;
17068: LD_ADDR_VAR 0 8
17072: PUSH
17073: LD_VAR 0 3
17077: PUSH
17078: LD_VAR 0 4
17082: MINUS
17083: ST_TO_ADDR
// max_x := x + r ;
17084: LD_ADDR_VAR 0 9
17088: PUSH
17089: LD_VAR 0 2
17093: PUSH
17094: LD_VAR 0 4
17098: PLUS
17099: ST_TO_ADDR
// max_y := y + r ;
17100: LD_ADDR_VAR 0 10
17104: PUSH
17105: LD_VAR 0 3
17109: PUSH
17110: LD_VAR 0 4
17114: PLUS
17115: ST_TO_ADDR
// for _x = min_x to max_x do
17116: LD_ADDR_VAR 0 11
17120: PUSH
17121: DOUBLE
17122: LD_VAR 0 7
17126: DEC
17127: ST_TO_ADDR
17128: LD_VAR 0 9
17132: PUSH
17133: FOR_TO
17134: IFFALSE 17251
// for _y = min_y to max_y do
17136: LD_ADDR_VAR 0 12
17140: PUSH
17141: DOUBLE
17142: LD_VAR 0 8
17146: DEC
17147: ST_TO_ADDR
17148: LD_VAR 0 10
17152: PUSH
17153: FOR_TO
17154: IFFALSE 17247
// begin if not ValidHex ( _x , _y ) then
17156: LD_VAR 0 11
17160: PPUSH
17161: LD_VAR 0 12
17165: PPUSH
17166: CALL_OW 488
17170: NOT
17171: IFFALSE 17175
// continue ;
17173: GO 17153
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17175: LD_VAR 0 11
17179: PPUSH
17180: LD_VAR 0 12
17184: PPUSH
17185: CALL_OW 351
17189: PUSH
17190: LD_VAR 0 11
17194: PPUSH
17195: LD_VAR 0 12
17199: PPUSH
17200: CALL_OW 554
17204: AND
17205: IFFALSE 17245
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17207: LD_ADDR_VAR 0 13
17211: PUSH
17212: LD_VAR 0 13
17216: PPUSH
17217: LD_VAR 0 13
17221: PUSH
17222: LD_INT 1
17224: PLUS
17225: PPUSH
17226: LD_VAR 0 11
17230: PUSH
17231: LD_VAR 0 12
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 2
17244: ST_TO_ADDR
// end ;
17245: GO 17153
17247: POP
17248: POP
17249: GO 17133
17251: POP
17252: POP
// if not list then
17253: LD_VAR 0 13
17257: NOT
17258: IFFALSE 17262
// exit ;
17260: GO 17333
// for i in list do
17262: LD_ADDR_VAR 0 6
17266: PUSH
17267: LD_VAR 0 13
17271: PUSH
17272: FOR_IN
17273: IFFALSE 17331
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17275: LD_VAR 0 1
17279: PPUSH
17280: LD_STRING M
17282: PUSH
17283: LD_VAR 0 6
17287: PUSH
17288: LD_INT 1
17290: ARRAY
17291: PUSH
17292: LD_VAR 0 6
17296: PUSH
17297: LD_INT 2
17299: ARRAY
17300: PUSH
17301: LD_INT 0
17303: PUSH
17304: LD_INT 0
17306: PUSH
17307: LD_INT 0
17309: PUSH
17310: LD_INT 0
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: PUSH
17322: EMPTY
17323: LIST
17324: PPUSH
17325: CALL_OW 447
17329: GO 17272
17331: POP
17332: POP
// end ;
17333: LD_VAR 0 5
17337: RET
