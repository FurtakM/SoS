// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// mission_prefix := 13f_ ;
 170: LD_ADDR_EXP 34
 174: PUSH
 175: LD_STRING 13f_
 177: ST_TO_ADDR
// debugMode := 0 ;
 178: LD_ADDR_EXP 40
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// achivCounter := 0 ;
 186: LD_ADDR_EXP 41
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// if Difficulty = 1 then
 194: LD_OWVAR 67
 198: PUSH
 199: LD_INT 1
 201: EQUAL
 202: IFFALSE 211
// RemoveEnvironmentArea ( oilBlockArea ) ;
 204: LD_INT 15
 206: PPUSH
 207: CALL_OW 355
// PrepareVehicles ;
 211: CALL 1195 0 0
// PrepareHeroes ;
 215: CALL 452 0 0
// PrepareAmericansRandom ;
 219: CALL 1099 0 0
// PrepareDifficulty ;
 223: CALL 8246 0 0
// Action ;
 227: CALL 5217 0 0
// end ;
 231: END
// every 0 0$1 trigger debugMode do var i , j ;
 232: LD_EXP 40
 236: IFFALSE 407
 238: GO 240
 240: DISABLE
 241: LD_INT 0
 243: PPUSH
 244: PPUSH
// begin enable ;
 245: ENABLE
// FogOff ( true ) ;
 246: LD_INT 1
 248: PPUSH
 249: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 253: LD_ADDR_VAR 0 1
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 1
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 21
 270: PUSH
 271: LD_INT 1
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PPUSH
 282: CALL_OW 69
 286: PUSH
 287: FOR_IN
 288: IFFALSE 304
// SetLives ( i , 1000 ) ;
 290: LD_VAR 0 1
 294: PPUSH
 295: LD_INT 1000
 297: PPUSH
 298: CALL_OW 234
 302: GO 287
 304: POP
 305: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 306: LD_ADDR_VAR 0 1
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 2
 323: PUSH
 324: LD_INT 30
 326: PUSH
 327: LD_INT 0
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: PUSH
 334: LD_INT 30
 336: PUSH
 337: LD_INT 1
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: LIST
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PPUSH
 353: CALL_OW 69
 357: PUSH
 358: FOR_IN
 359: IFFALSE 405
// for j := 1 to 3 do
 361: LD_ADDR_VAR 0 2
 365: PUSH
 366: DOUBLE
 367: LD_INT 1
 369: DEC
 370: ST_TO_ADDR
 371: LD_INT 3
 373: PUSH
 374: FOR_TO
 375: IFFALSE 401
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 377: LD_VAR 0 1
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_VAR 0 2
 391: PPUSH
 392: LD_INT 9999
 394: PPUSH
 395: CALL_OW 277
 399: GO 374
 401: POP
 402: POP
 403: GO 358
 405: POP
 406: POP
// end ;
 407: PPOPN 2
 409: END
// every 0 0$1 trigger achivCounter >= 2 do
 410: LD_EXP 41
 414: PUSH
 415: LD_INT 2
 417: GREATEREQUAL
 418: IFFALSE 430
 420: GO 422
 422: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 423: LD_STRING ACH_REMOTE
 425: PPUSH
 426: CALL_OW 543
 430: END
// every 0 0$1 trigger destroyCounter >= 30 do
 431: LD_EXP 42
 435: PUSH
 436: LD_INT 30
 438: GREATEREQUAL
 439: IFFALSE 451
 441: GO 443
 443: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 444: LD_STRING ACH_DEFMASTER
 446: PPUSH
 447: CALL_OW 543
 451: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
 456: PPUSH
 457: PPUSH
// uc_side = 1 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 466: LD_ADDR_EXP 1
 470: PUSH
 471: LD_STRING JMM
 473: PPUSH
 474: LD_EXP 40
 478: NOT
 479: PPUSH
 480: LD_STRING 13c_
 482: PPUSH
 483: CALL 29517 0 3
 487: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 488: LD_ADDR_EXP 2
 492: PUSH
 493: LD_STRING Stevens
 495: PPUSH
 496: LD_EXP 40
 500: NOT
 501: PPUSH
 502: LD_STRING 13c_
 504: PPUSH
 505: CALL 29517 0 3
 509: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 510: LD_ADDR_EXP 3
 514: PUSH
 515: LD_STRING Lisa
 517: PPUSH
 518: LD_EXP 40
 522: NOT
 523: PPUSH
 524: LD_STRING 13c_
 526: PPUSH
 527: CALL 29517 0 3
 531: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 532: LD_ADDR_EXP 4
 536: PUSH
 537: LD_STRING Donaldson
 539: PPUSH
 540: LD_EXP 40
 544: NOT
 545: PPUSH
 546: LD_STRING 13c_
 548: PPUSH
 549: CALL 29517 0 3
 553: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 554: LD_ADDR_EXP 5
 558: PUSH
 559: LD_STRING Bobby
 561: PPUSH
 562: LD_EXP 40
 566: NOT
 567: PPUSH
 568: LD_STRING 13c_
 570: PPUSH
 571: CALL 29517 0 3
 575: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 576: LD_ADDR_EXP 6
 580: PUSH
 581: LD_STRING Cyrus
 583: PPUSH
 584: LD_EXP 40
 588: NOT
 589: PPUSH
 590: LD_STRING 13c_
 592: PPUSH
 593: CALL 29517 0 3
 597: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 598: LD_ADDR_EXP 7
 602: PUSH
 603: LD_STRING Denis
 605: PPUSH
 606: LD_EXP 40
 610: NOT
 611: PPUSH
 612: LD_STRING 13c_
 614: PPUSH
 615: CALL 29517 0 3
 619: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 620: LD_ADDR_EXP 8
 624: PUSH
 625: LD_STRING Brown
 627: PPUSH
 628: LD_EXP 40
 632: NOT
 633: PPUSH
 634: LD_STRING 13c_
 636: PPUSH
 637: CALL 29517 0 3
 641: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 642: LD_ADDR_EXP 9
 646: PUSH
 647: LD_STRING Gladstone
 649: PPUSH
 650: LD_INT 1
 652: PPUSH
 653: LD_STRING 13c_
 655: PPUSH
 656: CALL 29517 0 3
 660: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 661: LD_ADDR_EXP 10
 665: PUSH
 666: LD_STRING Houten
 668: PPUSH
 669: LD_INT 1
 671: PPUSH
 672: LD_STRING 13c_
 674: PPUSH
 675: CALL 29517 0 3
 679: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 680: LD_ADDR_EXP 11
 684: PUSH
 685: LD_STRING Cornel
 687: PPUSH
 688: LD_INT 1
 690: PPUSH
 691: LD_STRING 13c_
 693: PPUSH
 694: CALL 29517 0 3
 698: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 699: LD_ADDR_EXP 12
 703: PUSH
 704: LD_STRING Gary
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: LD_STRING 13c_
 712: PPUSH
 713: CALL 29517 0 3
 717: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 718: LD_ADDR_EXP 13
 722: PUSH
 723: LD_STRING Frank
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: LD_STRING 13c_
 731: PPUSH
 732: CALL 29517 0 3
 736: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 737: LD_ADDR_EXP 14
 741: PUSH
 742: LD_STRING Kikuchi
 744: PPUSH
 745: LD_INT 1
 747: PPUSH
 748: LD_STRING 13c_
 750: PPUSH
 751: CALL 29517 0 3
 755: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 756: LD_ADDR_EXP 15
 760: PUSH
 761: LD_STRING Powell
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: LD_STRING 
 769: PPUSH
 770: CALL 29517 0 3
 774: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 775: LD_ADDR_VAR 0 2
 779: PUSH
 780: LD_EXP 1
 784: PUSH
 785: LD_EXP 2
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: LD_EXP 4
 799: PUSH
 800: LD_EXP 5
 804: PUSH
 805: LD_EXP 6
 809: PUSH
 810: LD_EXP 7
 814: PUSH
 815: LD_EXP 8
 819: PUSH
 820: LD_EXP 9
 824: PUSH
 825: LD_EXP 10
 829: PUSH
 830: LD_EXP 11
 834: PUSH
 835: LD_EXP 12
 839: PUSH
 840: LD_EXP 13
 844: PUSH
 845: LD_EXP 14
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 866: LD_ADDR_VAR 0 3
 870: PUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 33
 883: PUSH
 884: LD_INT 1
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: LD_INT 21
 893: PUSH
 894: LD_INT 2
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: LIST
 905: PPUSH
 906: CALL_OW 69
 910: ST_TO_ADDR
// for i = tmp downto 1 do
 911: LD_ADDR_VAR 0 4
 915: PUSH
 916: DOUBLE
 917: LD_VAR 0 2
 921: INC
 922: ST_TO_ADDR
 923: LD_INT 1
 925: PUSH
 926: FOR_DOWNTO
 927: IFFALSE 964
// if not tmp [ i ] then
 929: LD_VAR 0 2
 933: PUSH
 934: LD_VAR 0 4
 938: ARRAY
 939: NOT
 940: IFFALSE 962
// tmp := Delete ( tmp , i ) ;
 942: LD_ADDR_VAR 0 2
 946: PUSH
 947: LD_VAR 0 2
 951: PPUSH
 952: LD_VAR 0 4
 956: PPUSH
 957: CALL_OW 3
 961: ST_TO_ADDR
 962: GO 926
 964: POP
 965: POP
// for i = 1 to tmp do
 966: LD_ADDR_VAR 0 4
 970: PUSH
 971: DOUBLE
 972: LD_INT 1
 974: DEC
 975: ST_TO_ADDR
 976: LD_VAR 0 2
 980: PUSH
 981: FOR_TO
 982: IFFALSE 1012
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
 984: LD_VAR 0 2
 988: PUSH
 989: LD_VAR 0 4
 993: ARRAY
 994: PPUSH
 995: LD_VAR 0 3
 999: PUSH
1000: LD_VAR 0 4
1004: ARRAY
1005: PPUSH
1006: CALL_OW 52
1010: GO 981
1012: POP
1013: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1014: LD_INT 22
1016: PUSH
1017: LD_INT 1
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 25
1026: PUSH
1027: LD_INT 2
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: PPUSH
1038: CALL_OW 69
1042: PUSH
1043: LD_INT 0
1045: EQUAL
1046: PUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PUSH
1057: LD_INT 34
1059: PUSH
1060: LD_INT 13
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PPUSH
1071: CALL_OW 69
1075: PUSH
1076: LD_INT 0
1078: EQUAL
1079: AND
1080: IFFALSE 1094
// SetClass ( JMM , 2 ) ;
1082: LD_EXP 1
1086: PPUSH
1087: LD_INT 2
1089: PPUSH
1090: CALL_OW 336
// end ;
1094: LD_VAR 0 1
1098: RET
// export function PrepareAmericansRandom ; var i ; begin
1099: LD_INT 0
1101: PPUSH
1102: PPUSH
// uc_side = 1 ;
1103: LD_ADDR_OWVAR 20
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1111: LD_ADDR_EXP 16
1115: PUSH
1116: LD_STRING 13c_others
1118: PPUSH
1119: CALL_OW 31
1123: ST_TO_ADDR
// for i in others13 do
1124: LD_ADDR_VAR 0 2
1128: PUSH
1129: LD_EXP 16
1133: PUSH
1134: FOR_IN
1135: IFFALSE 1188
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1137: LD_VAR 0 2
1141: PPUSH
1142: LD_INT 22
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 21
1154: PUSH
1155: LD_INT 2
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: PUSH
1162: LD_INT 58
1164: PUSH
1165: EMPTY
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: PPUSH
1173: CALL_OW 69
1177: PUSH
1178: LD_INT 1
1180: ARRAY
1181: PPUSH
1182: CALL_OW 52
1186: GO 1134
1188: POP
1189: POP
// end ;
1190: LD_VAR 0 1
1194: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1195: LD_INT 0
1197: PPUSH
1198: PPUSH
1199: PPUSH
1200: PPUSH
1201: PPUSH
1202: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1203: LD_ADDR_VAR 0 5
1207: PUSH
1208: LD_STRING 13_VehiclesIn13_1
1210: PPUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 5
1216: PUSH
1217: LD_INT 3
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 6
1225: PUSH
1226: LD_INT 100
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 3
1245: PUSH
1246: LD_INT 1
1248: PUSH
1249: LD_INT 6
1251: PUSH
1252: LD_INT 100
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: PUSH
1263: LD_INT 1
1265: PUSH
1266: LD_INT 5
1268: PUSH
1269: LD_INT 3
1271: PUSH
1272: LD_INT 1
1274: PUSH
1275: LD_INT 6
1277: PUSH
1278: LD_INT 100
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: LD_INT 5
1294: PUSH
1295: LD_INT 3
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: LD_INT 6
1303: PUSH
1304: LD_INT 100
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: PUSH
1315: LD_INT 1
1317: PUSH
1318: LD_INT 5
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: LD_INT 6
1329: PUSH
1330: LD_INT 100
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_INT 1
1343: PUSH
1344: LD_INT 5
1346: PUSH
1347: LD_INT 3
1349: PUSH
1350: LD_INT 1
1352: PUSH
1353: LD_INT 6
1355: PUSH
1356: LD_INT 100
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 1
1369: PUSH
1370: LD_INT 5
1372: PUSH
1373: LD_INT 3
1375: PUSH
1376: LD_INT 1
1378: PUSH
1379: LD_INT 6
1381: PUSH
1382: LD_INT 100
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: LD_INT 5
1398: PUSH
1399: LD_INT 3
1401: PUSH
1402: LD_INT 1
1404: PUSH
1405: LD_INT 6
1407: PUSH
1408: LD_INT 100
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 30
1433: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1434: LD_ADDR_EXP 24
1438: PUSH
1439: LD_STRING 13_ResourcesInCargo13_1
1441: PPUSH
1442: EMPTY
1443: PPUSH
1444: CALL_OW 30
1448: ST_TO_ADDR
// cargoList = [ ] ;
1449: LD_ADDR_VAR 0 6
1453: PUSH
1454: EMPTY
1455: ST_TO_ADDR
// uc_side = 1 ;
1456: LD_ADDR_OWVAR 20
1460: PUSH
1461: LD_INT 1
1463: ST_TO_ADDR
// if vehicles then
1464: LD_VAR 0 5
1468: IFFALSE 1815
// begin for i := 1 to vehicles do
1470: LD_ADDR_VAR 0 2
1474: PUSH
1475: DOUBLE
1476: LD_INT 1
1478: DEC
1479: ST_TO_ADDR
1480: LD_VAR 0 5
1484: PUSH
1485: FOR_TO
1486: IFFALSE 1635
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1488: LD_ADDR_OWVAR 21
1492: PUSH
1493: LD_VAR 0 5
1497: PUSH
1498: LD_VAR 0 2
1502: ARRAY
1503: PUSH
1504: LD_INT 1
1506: ARRAY
1507: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1508: LD_ADDR_OWVAR 37
1512: PUSH
1513: LD_VAR 0 5
1517: PUSH
1518: LD_VAR 0 2
1522: ARRAY
1523: PUSH
1524: LD_INT 2
1526: ARRAY
1527: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1528: LD_ADDR_OWVAR 39
1532: PUSH
1533: LD_VAR 0 5
1537: PUSH
1538: LD_VAR 0 2
1542: ARRAY
1543: PUSH
1544: LD_INT 3
1546: ARRAY
1547: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1548: LD_ADDR_OWVAR 38
1552: PUSH
1553: LD_VAR 0 5
1557: PUSH
1558: LD_VAR 0 2
1562: ARRAY
1563: PUSH
1564: LD_INT 4
1566: ARRAY
1567: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1568: LD_ADDR_OWVAR 40
1572: PUSH
1573: LD_VAR 0 5
1577: PUSH
1578: LD_VAR 0 2
1582: ARRAY
1583: PUSH
1584: LD_INT 5
1586: ARRAY
1587: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1588: LD_ADDR_OWVAR 41
1592: PUSH
1593: LD_INT 40
1595: ST_TO_ADDR
// veh = CreateVehicle ;
1596: LD_ADDR_VAR 0 4
1600: PUSH
1601: CALL_OW 45
1605: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1606: LD_VAR 0 4
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1618: LD_VAR 0 4
1622: PPUSH
1623: LD_INT 2
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 49
// end ;
1633: GO 1485
1635: POP
1636: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1637: LD_ADDR_VAR 0 6
1641: PUSH
1642: LD_INT 22
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: LD_INT 21
1654: PUSH
1655: LD_INT 2
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 34
1664: PUSH
1665: LD_INT 12
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: PPUSH
1677: CALL_OW 69
1681: ST_TO_ADDR
// if cargoList then
1682: LD_VAR 0 6
1686: IFFALSE 1815
// for i = 1 to cargoList do
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: DOUBLE
1694: LD_INT 1
1696: DEC
1697: ST_TO_ADDR
1698: LD_VAR 0 6
1702: PUSH
1703: FOR_TO
1704: IFFALSE 1813
// begin if resources then
1706: LD_EXP 24
1710: IFFALSE 1811
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1712: LD_VAR 0 6
1716: PUSH
1717: LD_VAR 0 2
1721: ARRAY
1722: PPUSH
1723: LD_INT 1
1725: PPUSH
1726: LD_EXP 24
1730: PUSH
1731: LD_VAR 0 2
1735: ARRAY
1736: PUSH
1737: LD_INT 1
1739: ARRAY
1740: PPUSH
1741: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1745: LD_VAR 0 6
1749: PUSH
1750: LD_VAR 0 2
1754: ARRAY
1755: PPUSH
1756: LD_INT 2
1758: PPUSH
1759: LD_EXP 24
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 2
1772: ARRAY
1773: PPUSH
1774: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1778: LD_VAR 0 6
1782: PUSH
1783: LD_VAR 0 2
1787: ARRAY
1788: PPUSH
1789: LD_INT 3
1791: PPUSH
1792: LD_EXP 24
1796: PUSH
1797: LD_VAR 0 2
1801: ARRAY
1802: PUSH
1803: LD_INT 3
1805: ARRAY
1806: PPUSH
1807: CALL_OW 291
// end ; end ;
1811: GO 1703
1813: POP
1814: POP
// end ; end ;
1815: LD_VAR 0 1
1819: RET
// export function PowellSupport ; var i , veh , un ; begin
1820: LD_INT 0
1822: PPUSH
1823: PPUSH
1824: PPUSH
1825: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1826: LD_ADDR_VAR 0 2
1830: PUSH
1831: DOUBLE
1832: LD_INT 1
1834: DEC
1835: ST_TO_ADDR
1836: LD_INT 4
1838: PUSH
1839: LD_INT 3
1841: PUSH
1842: LD_INT 2
1844: PUSH
1845: LD_INT 2
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: PUSH
1854: LD_OWVAR 67
1858: ARRAY
1859: PUSH
1860: FOR_TO
1861: IFFALSE 2125
// begin uc_nation := 1 ;
1863: LD_ADDR_OWVAR 21
1867: PUSH
1868: LD_INT 1
1870: ST_TO_ADDR
// uc_side := 1 ;
1871: LD_ADDR_OWVAR 20
1875: PUSH
1876: LD_INT 1
1878: ST_TO_ADDR
// vc_engine := engine_siberite ;
1879: LD_ADDR_OWVAR 39
1883: PUSH
1884: LD_INT 3
1886: ST_TO_ADDR
// vc_control := control_manual ;
1887: LD_ADDR_OWVAR 38
1891: PUSH
1892: LD_INT 1
1894: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1895: LD_ADDR_OWVAR 40
1899: PUSH
1900: LD_INT 9
1902: PUSH
1903: LD_INT 6
1905: PUSH
1906: LD_INT 9
1908: PUSH
1909: LD_INT 5
1911: PUSH
1912: LD_INT 5
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: PUSH
1922: LD_OWVAR 67
1926: PUSH
1927: LD_INT 0
1929: PPUSH
1930: LD_INT 1
1932: PPUSH
1933: CALL_OW 12
1937: PLUS
1938: ARRAY
1939: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1940: LD_OWVAR 40
1944: PUSH
1945: LD_INT 6
1947: EQUAL
1948: IFFALSE 1977
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1950: LD_ADDR_OWVAR 37
1954: PUSH
1955: LD_INT 5
1957: PUSH
1958: LD_INT 4
1960: PUSH
1961: LD_INT 4
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: LIST
1968: PUSH
1969: LD_OWVAR 67
1973: ARRAY
1974: ST_TO_ADDR
1975: GO 2012
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
1977: LD_ADDR_OWVAR 37
1981: PUSH
1982: LD_INT 5
1984: PUSH
1985: LD_INT 4
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: LD_INT 3
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 4
2005: PPUSH
2006: CALL_OW 12
2010: ARRAY
2011: ST_TO_ADDR
// veh = CreateVehicle ;
2012: LD_ADDR_VAR 0 3
2016: PUSH
2017: CALL_OW 45
2021: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2022: LD_VAR 0 3
2026: PPUSH
2027: LD_INT 2
2029: PPUSH
2030: LD_INT 0
2032: PPUSH
2033: CALL_OW 49
// SetDir ( veh , 1 ) ;
2037: LD_VAR 0 3
2041: PPUSH
2042: LD_INT 1
2044: PPUSH
2045: CALL_OW 233
// hc_gallery :=  ;
2049: LD_ADDR_OWVAR 33
2053: PUSH
2054: LD_STRING 
2056: ST_TO_ADDR
// hc_name :=  ;
2057: LD_ADDR_OWVAR 26
2061: PUSH
2062: LD_STRING 
2064: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2065: LD_INT 0
2067: PPUSH
2068: LD_INT 3
2070: PPUSH
2071: LD_INT 9
2073: PUSH
2074: LD_INT 8
2076: PUSH
2077: LD_INT 8
2079: PUSH
2080: LD_INT 7
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: LD_OWVAR 67
2093: ARRAY
2094: PPUSH
2095: CALL_OW 380
// un := CreateHuman ;
2099: LD_ADDR_VAR 0 4
2103: PUSH
2104: CALL_OW 44
2108: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2109: LD_VAR 0 4
2113: PPUSH
2114: LD_VAR 0 3
2118: PPUSH
2119: CALL_OW 52
// end ;
2123: GO 1860
2125: POP
2126: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2127: LD_ADDR_VAR 0 2
2131: PUSH
2132: DOUBLE
2133: LD_INT 1
2135: DEC
2136: ST_TO_ADDR
2137: LD_INT 2
2139: PUSH
2140: LD_INT 2
2142: PUSH
2143: LD_INT 2
2145: PUSH
2146: LD_INT 1
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PUSH
2155: LD_OWVAR 67
2159: ARRAY
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2237
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2164: LD_INT 0
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_INT 9
2172: PUSH
2173: LD_INT 8
2175: PUSH
2176: LD_INT 8
2178: PUSH
2179: LD_INT 7
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_OWVAR 67
2192: ARRAY
2193: PPUSH
2194: CALL_OW 380
// un := CreateHuman ;
2198: LD_ADDR_VAR 0 4
2202: PUSH
2203: CALL_OW 44
2207: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2208: LD_VAR 0 4
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2220: LD_VAR 0 4
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
// end ;
2235: GO 2161
2237: POP
2238: POP
// end ; end_of_file
2239: LD_VAR 0 1
2243: RET
// export function PrepareBurlak ; begin
2244: LD_INT 0
2246: PPUSH
// uc_side := 7 ;
2247: LD_ADDR_OWVAR 20
2251: PUSH
2252: LD_INT 7
2254: ST_TO_ADDR
// uc_nation := 3 ;
2255: LD_ADDR_OWVAR 21
2259: PUSH
2260: LD_INT 3
2262: ST_TO_ADDR
// vc_engine := engine_siberite ;
2263: LD_ADDR_OWVAR 39
2267: PUSH
2268: LD_INT 3
2270: ST_TO_ADDR
// vc_control := control_manual ;
2271: LD_ADDR_OWVAR 38
2275: PUSH
2276: LD_INT 1
2278: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2279: LD_ADDR_OWVAR 40
2283: PUSH
2284: LD_INT 44
2286: PUSH
2287: LD_INT 45
2289: PUSH
2290: LD_INT 46
2292: PUSH
2293: LD_INT 46
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: PUSH
2302: LD_OWVAR 67
2306: ARRAY
2307: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2308: LD_ADDR_OWVAR 37
2312: PUSH
2313: LD_INT 24
2315: ST_TO_ADDR
// Masha := CreateVehicle ;
2316: LD_ADDR_EXP 18
2320: PUSH
2321: CALL_OW 45
2325: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2326: LD_EXP 18
2330: PPUSH
2331: LD_INT 2
2333: PPUSH
2334: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2338: LD_EXP 18
2342: PPUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2353: LD_EXP 18
2357: PPUSH
2358: LD_INT 1
2360: PPUSH
2361: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2365: LD_ADDR_EXP 17
2369: PUSH
2370: LD_STRING Burlak
2372: PPUSH
2373: LD_INT 0
2375: PPUSH
2376: LD_STRING 
2378: PPUSH
2379: CALL 29517 0 3
2383: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2384: LD_EXP 17
2388: PPUSH
2389: LD_EXP 18
2393: PPUSH
2394: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2398: LD_EXP 18
2402: PPUSH
2403: LD_INT 107
2405: PPUSH
2406: LD_INT 118
2408: PPUSH
2409: CALL_OW 114
// spawnBurlak := 1 ;
2413: LD_ADDR_EXP 27
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// end ;
2421: LD_VAR 0 1
2425: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2426: LD_INT 0
2428: PPUSH
2429: PPUSH
2430: PPUSH
2431: PPUSH
2432: PPUSH
// uc_side := 7 ;
2433: LD_ADDR_OWVAR 20
2437: PUSH
2438: LD_INT 7
2440: ST_TO_ADDR
// uc_nation := 3 ;
2441: LD_ADDR_OWVAR 21
2445: PUSH
2446: LD_INT 3
2448: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2449: LD_ADDR_EXP 19
2453: PUSH
2454: LD_STRING Gnyevko
2456: PPUSH
2457: LD_INT 0
2459: PPUSH
2460: LD_STRING 
2462: PPUSH
2463: CALL 29517 0 3
2467: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2468: LD_ADDR_EXP 20
2472: PUSH
2473: LD_STRING Titov
2475: PPUSH
2476: LD_INT 0
2478: PPUSH
2479: LD_STRING 
2481: PPUSH
2482: CALL 29517 0 3
2486: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2487: LD_ADDR_EXP 21
2491: PUSH
2492: LD_STRING Xavier2
2494: PPUSH
2495: LD_INT 0
2497: PPUSH
2498: LD_STRING 
2500: PPUSH
2501: CALL 29517 0 3
2505: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2506: LD_ADDR_EXP 22
2510: PUSH
2511: LD_STRING Belkov
2513: PPUSH
2514: LD_INT 0
2516: PPUSH
2517: LD_STRING 
2519: PPUSH
2520: CALL 29517 0 3
2524: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2525: LD_ADDR_EXP 23
2529: PUSH
2530: LD_STRING Lipshchin
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: LD_STRING 
2538: PPUSH
2539: CALL 29517 0 3
2543: ST_TO_ADDR
// for i = 1 to 5 do
2544: LD_ADDR_VAR 0 2
2548: PUSH
2549: DOUBLE
2550: LD_INT 1
2552: DEC
2553: ST_TO_ADDR
2554: LD_INT 5
2556: PUSH
2557: FOR_TO
2558: IFFALSE 2683
// begin vc_engine := engine_siberite ;
2560: LD_ADDR_OWVAR 39
2564: PUSH
2565: LD_INT 3
2567: ST_TO_ADDR
// vc_control := control_manual ;
2568: LD_ADDR_OWVAR 38
2572: PUSH
2573: LD_INT 1
2575: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2576: LD_ADDR_OWVAR 40
2580: PUSH
2581: LD_INT 43
2583: PUSH
2584: LD_INT 45
2586: PUSH
2587: LD_INT 45
2589: PUSH
2590: LD_INT 44
2592: PUSH
2593: LD_INT 49
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: PUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_INT 5
2608: PPUSH
2609: CALL_OW 12
2613: ARRAY
2614: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2615: LD_ADDR_OWVAR 37
2619: PUSH
2620: LD_INT 22
2622: PUSH
2623: LD_INT 22
2625: PUSH
2626: LD_INT 24
2628: PUSH
2629: LD_INT 24
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: PUSH
2638: LD_OWVAR 67
2642: ARRAY
2643: ST_TO_ADDR
// veh = CreateVehicle ;
2644: LD_ADDR_VAR 0 3
2648: PUSH
2649: CALL_OW 45
2653: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2654: LD_VAR 0 3
2658: PPUSH
2659: LD_INT 2
2661: PPUSH
2662: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2666: LD_VAR 0 3
2670: PPUSH
2671: LD_INT 3
2673: PPUSH
2674: LD_INT 0
2676: PPUSH
2677: CALL_OW 49
// end ;
2681: GO 2557
2683: POP
2684: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2685: LD_ADDR_VAR 0 4
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 7
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 21
2702: PUSH
2703: LD_INT 2
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 58
2712: PUSH
2713: EMPTY
2714: LIST
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2726: LD_EXP 19
2730: PPUSH
2731: LD_VAR 0 4
2735: PUSH
2736: LD_INT 1
2738: ARRAY
2739: PPUSH
2740: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2744: LD_EXP 20
2748: PPUSH
2749: LD_VAR 0 4
2753: PUSH
2754: LD_INT 2
2756: ARRAY
2757: PPUSH
2758: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2762: LD_EXP 21
2766: PPUSH
2767: LD_VAR 0 4
2771: PUSH
2772: LD_INT 3
2774: ARRAY
2775: PPUSH
2776: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2780: LD_EXP 22
2784: PPUSH
2785: LD_VAR 0 4
2789: PUSH
2790: LD_INT 4
2792: ARRAY
2793: PPUSH
2794: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2798: LD_EXP 23
2802: PPUSH
2803: LD_VAR 0 4
2807: PUSH
2808: LD_INT 5
2810: ARRAY
2811: PPUSH
2812: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2816: LD_EXP 19
2820: PPUSH
2821: LD_INT 3
2823: PPUSH
2824: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2828: LD_EXP 20
2832: PUSH
2833: LD_EXP 23
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PPUSH
2842: LD_INT 9
2844: PPUSH
2845: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2849: LD_ADDR_VAR 0 4
2853: PUSH
2854: LD_INT 22
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PPUSH
2864: CALL_OW 69
2868: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2869: LD_VAR 0 4
2873: PPUSH
2874: LD_INT 107
2876: PPUSH
2877: LD_INT 118
2879: PPUSH
2880: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2884: LD_INT 35
2886: PPUSH
2887: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2891: LD_VAR 0 4
2895: PPUSH
2896: LD_INT 34
2898: PUSH
2899: LD_INT 49
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 72
2910: PPUSH
2911: LD_EXP 18
2915: PPUSH
2916: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2920: LD_VAR 0 4
2924: PPUSH
2925: LD_INT 3
2927: PUSH
2928: LD_INT 34
2930: PUSH
2931: LD_INT 49
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PPUSH
2942: CALL_OW 72
2946: PPUSH
2947: LD_INT 107
2949: PPUSH
2950: LD_INT 118
2952: PPUSH
2953: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2957: LD_ADDR_VAR 0 5
2961: PUSH
2962: LD_EXP 20
2966: PUSH
2967: LD_EXP 23
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PPUSH
2976: LD_INT 50
2978: PUSH
2979: EMPTY
2980: LIST
2981: PUSH
2982: LD_INT 3
2984: PUSH
2985: LD_INT 54
2987: PUSH
2988: EMPTY
2989: LIST
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PPUSH
2999: CALL_OW 72
3003: ST_TO_ADDR
// if bazooka then
3004: LD_VAR 0 5
3008: IFFALSE 3050
// begin for i in bazooka do
3010: LD_ADDR_VAR 0 2
3014: PUSH
3015: LD_VAR 0 5
3019: PUSH
3020: FOR_IN
3021: IFFALSE 3048
// if See ( 1 , i ) then
3023: LD_INT 1
3025: PPUSH
3026: LD_VAR 0 2
3030: PPUSH
3031: CALL_OW 292
3035: IFFALSE 3046
// ComSpaceTimeShoot ( i ) ;
3037: LD_VAR 0 2
3041: PPUSH
3042: CALL 30464 0 1
3046: GO 3020
3048: POP
3049: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3050: LD_VAR 0 4
3054: PPUSH
3055: LD_INT 34
3057: PUSH
3058: LD_INT 49
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PPUSH
3065: CALL_OW 72
3069: PUSH
3070: LD_INT 0
3072: EQUAL
3073: PUSH
3074: LD_EXP 18
3078: PPUSH
3079: CALL_OW 303
3083: OR
3084: IFFALSE 2884
// repeat wait ( 0 0$1 ) ;
3086: LD_INT 35
3088: PPUSH
3089: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3093: LD_ADDR_VAR 0 4
3097: PUSH
3098: LD_INT 22
3100: PUSH
3101: LD_INT 7
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PPUSH
3108: CALL_OW 69
3112: PUSH
3113: LD_EXP 17
3117: DIFF
3118: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3119: LD_VAR 0 4
3123: PPUSH
3124: LD_INT 107
3126: PPUSH
3127: LD_INT 118
3129: PPUSH
3130: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3134: LD_ADDR_VAR 0 5
3138: PUSH
3139: LD_EXP 20
3143: PUSH
3144: LD_EXP 23
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PPUSH
3153: LD_INT 50
3155: PUSH
3156: EMPTY
3157: LIST
3158: PUSH
3159: LD_INT 3
3161: PUSH
3162: LD_INT 54
3164: PUSH
3165: EMPTY
3166: LIST
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 72
3180: ST_TO_ADDR
// if bazooka then
3181: LD_VAR 0 5
3185: IFFALSE 3227
// begin for i in bazooka do
3187: LD_ADDR_VAR 0 2
3191: PUSH
3192: LD_VAR 0 5
3196: PUSH
3197: FOR_IN
3198: IFFALSE 3225
// if See ( 1 , i ) then
3200: LD_INT 1
3202: PPUSH
3203: LD_VAR 0 2
3207: PPUSH
3208: CALL_OW 292
3212: IFFALSE 3223
// ComSpaceTimeShoot ( i ) ;
3214: LD_VAR 0 2
3218: PPUSH
3219: CALL 30464 0 1
3223: GO 3197
3225: POP
3226: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3227: LD_EXP 17
3231: PPUSH
3232: CALL_OW 302
3236: PUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 310
3246: NOT
3247: AND
3248: IFFALSE 3265
// ComMoveXY ( Burlak , 107 , 118 ) ;
3250: LD_EXP 17
3254: PPUSH
3255: LD_INT 107
3257: PPUSH
3258: LD_INT 118
3260: PPUSH
3261: CALL_OW 111
// until not tmp ;
3265: LD_VAR 0 4
3269: NOT
3270: IFFALSE 3086
// end ;
3272: LD_VAR 0 1
3276: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3277: LD_INT 0
3279: PPUSH
3280: PPUSH
3281: PPUSH
3282: PPUSH
3283: PPUSH
3284: PPUSH
// result := [ ] ;
3285: LD_ADDR_VAR 0 1
3289: PUSH
3290: EMPTY
3291: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3292: LD_ADDR_VAR 0 6
3296: PUSH
3297: LD_INT 1
3299: PPUSH
3300: LD_INT 2
3302: PPUSH
3303: CALL_OW 12
3307: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3308: LD_ADDR_VAR 0 5
3312: PUSH
3313: LD_INT 8
3315: PUSH
3316: LD_INT 9
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PUSH
3323: LD_VAR 0 6
3327: ARRAY
3328: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3329: LD_ADDR_VAR 0 2
3333: PUSH
3334: DOUBLE
3335: LD_INT 1
3337: DEC
3338: ST_TO_ADDR
3339: LD_INT 6
3341: PUSH
3342: LD_INT 8
3344: PUSH
3345: LD_INT 10
3347: PUSH
3348: LD_INT 11
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: PUSH
3357: LD_OWVAR 67
3361: ARRAY
3362: PUSH
3363: FOR_TO
3364: IFFALSE 3580
// begin uc_side := 3 ;
3366: LD_ADDR_OWVAR 20
3370: PUSH
3371: LD_INT 3
3373: ST_TO_ADDR
// uc_nation := 3 ;
3374: LD_ADDR_OWVAR 21
3378: PUSH
3379: LD_INT 3
3381: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3382: LD_INT 24
3384: PPUSH
3385: LD_INT 3
3387: PPUSH
3388: LD_INT 1
3390: PUSH
3391: LD_INT 3
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 1
3400: PPUSH
3401: LD_INT 2
3403: PPUSH
3404: CALL_OW 12
3408: ARRAY
3409: PPUSH
3410: LD_INT 46
3412: PUSH
3413: LD_INT 46
3415: PUSH
3416: LD_INT 45
3418: PUSH
3419: LD_INT 47
3421: PUSH
3422: LD_INT 49
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 1
3434: PPUSH
3435: LD_INT 5
3437: PPUSH
3438: CALL_OW 12
3442: ARRAY
3443: PPUSH
3444: LD_INT 100
3446: PPUSH
3447: CALL 34381 0 5
// veh := CreateVehicle ;
3451: LD_ADDR_VAR 0 4
3455: PUSH
3456: CALL_OW 45
3460: ST_TO_ADDR
// result := Join ( result , veh ) ;
3461: LD_ADDR_VAR 0 1
3465: PUSH
3466: LD_VAR 0 1
3470: PPUSH
3471: LD_VAR 0 4
3475: PPUSH
3476: CALL 66198 0 2
3480: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3481: LD_VAR 0 4
3485: PPUSH
3486: LD_INT 3
3488: PUSH
3489: LD_INT 5
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: LD_VAR 0 6
3500: ARRAY
3501: PPUSH
3502: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3506: LD_VAR 0 4
3510: PPUSH
3511: LD_VAR 0 5
3515: PPUSH
3516: LD_INT 0
3518: PPUSH
3519: CALL_OW 49
// if vc_control = control_manual then
3523: LD_OWVAR 38
3527: PUSH
3528: LD_INT 1
3530: EQUAL
3531: IFFALSE 3578
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3533: LD_INT 0
3535: PPUSH
3536: LD_INT 7
3538: PUSH
3539: LD_INT 8
3541: PUSH
3542: LD_INT 9
3544: PUSH
3545: LD_INT 10
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: PUSH
3554: LD_OWVAR 67
3558: ARRAY
3559: PPUSH
3560: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3564: CALL_OW 44
3568: PPUSH
3569: LD_VAR 0 4
3573: PPUSH
3574: CALL_OW 52
// end ; end ;
3578: GO 3363
3580: POP
3581: POP
// for i in result do
3582: LD_ADDR_VAR 0 2
3586: PUSH
3587: LD_VAR 0 1
3591: PUSH
3592: FOR_IN
3593: IFFALSE 3609
// SetTag ( i , 10 ) ;
3595: LD_VAR 0 2
3599: PPUSH
3600: LD_INT 10
3602: PPUSH
3603: CALL_OW 109
3607: GO 3592
3609: POP
3610: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3611: LD_EXP 44
3615: PPUSH
3616: CALL_OW 427
// end ; end_of_file
3620: LD_VAR 0 1
3624: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3625: LD_INT 0
3627: PPUSH
3628: PPUSH
3629: PPUSH
// rnd := 0 ;
3630: LD_ADDR_VAR 0 3
3634: PUSH
3635: LD_INT 0
3637: ST_TO_ADDR
// uc_side := 8 ;
3638: LD_ADDR_OWVAR 20
3642: PUSH
3643: LD_INT 8
3645: ST_TO_ADDR
// uc_nation := 2 ;
3646: LD_ADDR_OWVAR 21
3650: PUSH
3651: LD_INT 2
3653: ST_TO_ADDR
// hc_name :=  ;
3654: LD_ADDR_OWVAR 26
3658: PUSH
3659: LD_STRING 
3661: ST_TO_ADDR
// hc_gallery :=  ;
3662: LD_ADDR_OWVAR 33
3666: PUSH
3667: LD_STRING 
3669: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3670: LD_ADDR_OWVAR 29
3674: PUSH
3675: LD_INT 10
3677: PUSH
3678: LD_INT 11
3680: PUSH
3681: LD_INT 12
3683: PUSH
3684: LD_INT 12
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: PUSH
3693: LD_OWVAR 67
3697: ARRAY
3698: PUSH
3699: LD_INT 10
3701: PUSH
3702: LD_INT 11
3704: PUSH
3705: LD_INT 12
3707: PUSH
3708: LD_INT 12
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: LD_OWVAR 67
3721: ARRAY
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3727: LD_INT 0
3729: PPUSH
3730: LD_INT 4
3732: PPUSH
3733: LD_INT 7
3735: PUSH
3736: LD_INT 8
3738: PUSH
3739: LD_INT 9
3741: PUSH
3742: LD_INT 10
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: PUSH
3751: LD_OWVAR 67
3755: ARRAY
3756: PPUSH
3757: CALL_OW 380
// un := CreateHuman ;
3761: LD_ADDR_VAR 0 2
3765: PUSH
3766: CALL_OW 44
3770: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3771: LD_VAR 0 2
3775: PPUSH
3776: LD_INT 8
3778: PUSH
3779: LD_INT 9
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PUSH
3786: LD_INT 1
3788: PPUSH
3789: LD_INT 2
3791: PPUSH
3792: CALL_OW 12
3796: ARRAY
3797: PPUSH
3798: LD_INT 0
3800: PPUSH
3801: CALL_OW 49
// SetTag ( un , 1 ) ;
3805: LD_VAR 0 2
3809: PPUSH
3810: LD_INT 1
3812: PPUSH
3813: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3817: LD_ADDR_VAR 0 3
3821: PUSH
3822: LD_INT 1
3824: PPUSH
3825: LD_EXP 31
3829: PPUSH
3830: CALL_OW 12
3834: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3835: LD_VAR 0 2
3839: PPUSH
3840: LD_EXP 31
3844: PUSH
3845: LD_VAR 0 3
3849: ARRAY
3850: PUSH
3851: LD_INT 1
3853: ARRAY
3854: PPUSH
3855: LD_EXP 31
3859: PUSH
3860: LD_VAR 0 3
3864: ARRAY
3865: PUSH
3866: LD_INT 2
3868: ARRAY
3869: PPUSH
3870: CALL_OW 158
// end ;
3874: LD_VAR 0 1
3878: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3879: LD_INT 22
3881: PUSH
3882: LD_INT 8
3884: PUSH
3885: EMPTY
3886: LIST
3887: LIST
3888: PUSH
3889: LD_INT 3
3891: PUSH
3892: LD_INT 61
3894: PUSH
3895: EMPTY
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 50
3904: PUSH
3905: EMPTY
3906: LIST
3907: PUSH
3908: LD_INT 33
3910: PUSH
3911: LD_INT 2
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: PPUSH
3924: CALL_OW 69
3928: IFFALSE 4015
3930: GO 3932
3932: DISABLE
3933: LD_INT 0
3935: PPUSH
// begin enable ;
3936: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3937: LD_ADDR_VAR 0 1
3941: PUSH
3942: LD_INT 22
3944: PUSH
3945: LD_INT 8
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 3
3954: PUSH
3955: LD_INT 61
3957: PUSH
3958: EMPTY
3959: LIST
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PUSH
3965: LD_INT 50
3967: PUSH
3968: EMPTY
3969: LIST
3970: PUSH
3971: LD_INT 33
3973: PUSH
3974: LD_INT 2
3976: PUSH
3977: EMPTY
3978: LIST
3979: LIST
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: PPUSH
3987: CALL_OW 69
3991: PUSH
3992: FOR_IN
3993: IFFALSE 4013
// begin wait ( 0 0$0.3 ) ;
3995: LD_INT 10
3997: PPUSH
3998: CALL_OW 67
// Connect ( i ) ;
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL 37474 0 1
// end ;
4011: GO 3992
4013: POP
4014: POP
// end ;
4015: PPOPN 1
4017: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4018: LD_INT 0
4020: PPUSH
4021: PPUSH
4022: PPUSH
4023: PPUSH
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// result := [ ] ;
4029: LD_ADDR_VAR 0 1
4033: PUSH
4034: EMPTY
4035: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4036: LD_ADDR_EXP 33
4040: PUSH
4041: LD_EXP 33
4045: PUSH
4046: LD_INT 1
4048: PLUS
4049: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4050: LD_INT 22
4052: PUSH
4053: LD_INT 8
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PUSH
4060: LD_INT 3
4062: PUSH
4063: LD_INT 58
4065: PUSH
4066: EMPTY
4067: LIST
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PUSH
4073: LD_INT 34
4075: PUSH
4076: LD_INT 31
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: PUSH
4093: LD_INT 2
4095: LESS
4096: IFFALSE 4340
// begin uc_side := 8 ;
4098: LD_ADDR_OWVAR 20
4102: PUSH
4103: LD_INT 8
4105: ST_TO_ADDR
// uc_nation := 2 ;
4106: LD_ADDR_OWVAR 21
4110: PUSH
4111: LD_INT 2
4113: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4114: LD_INT 14
4116: PPUSH
4117: LD_INT 3
4119: PPUSH
4120: LD_INT 1
4122: PPUSH
4123: LD_INT 31
4125: PPUSH
4126: LD_INT 100
4128: PPUSH
4129: CALL 34381 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4133: LD_ADDR_VAR 0 2
4137: PUSH
4138: DOUBLE
4139: LD_INT 22
4141: PUSH
4142: LD_INT 8
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: PUSH
4149: LD_INT 3
4151: PUSH
4152: LD_INT 58
4154: PUSH
4155: EMPTY
4156: LIST
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 34
4164: PUSH
4165: LD_INT 31
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 69
4181: PUSH
4182: LD_INT 1
4184: PLUS
4185: DEC
4186: ST_TO_ADDR
4187: LD_INT 2
4189: PUSH
4190: FOR_TO
4191: IFFALSE 4338
// begin veh := CreateVehicle ;
4193: LD_ADDR_VAR 0 3
4197: PUSH
4198: CALL_OW 45
4202: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4203: LD_VAR 0 3
4207: PPUSH
4208: LD_INT 5
4210: PPUSH
4211: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4215: LD_ADDR_VAR 0 4
4219: PUSH
4220: LD_INT 181
4222: PUSH
4223: LD_INT 105
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: LD_INT 137
4232: PUSH
4233: LD_INT 6
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: LD_VAR 0 2
4248: PUSH
4249: LD_INT 2
4251: MOD
4252: PUSH
4253: LD_INT 1
4255: PLUS
4256: ARRAY
4257: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4258: LD_VAR 0 3
4262: PPUSH
4263: LD_VAR 0 4
4267: PUSH
4268: LD_INT 1
4270: ARRAY
4271: PPUSH
4272: LD_VAR 0 4
4276: PUSH
4277: LD_INT 2
4279: ARRAY
4280: PPUSH
4281: LD_INT 12
4283: PPUSH
4284: LD_INT 0
4286: PPUSH
4287: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4291: LD_INT 0
4293: PPUSH
4294: LD_INT 7
4296: PUSH
4297: LD_INT 9
4299: PUSH
4300: LD_INT 10
4302: PUSH
4303: LD_INT 10
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: LD_OWVAR 67
4316: ARRAY
4317: PPUSH
4318: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4322: CALL_OW 44
4326: PPUSH
4327: LD_VAR 0 3
4331: PPUSH
4332: CALL_OW 52
// end ;
4336: GO 4190
4338: POP
4339: POP
// end ; dir := rand ( 1 , 2 ) ;
4340: LD_ADDR_VAR 0 9
4344: PUSH
4345: LD_INT 1
4347: PPUSH
4348: LD_INT 2
4350: PPUSH
4351: CALL_OW 12
4355: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4356: LD_ADDR_VAR 0 6
4360: PUSH
4361: LD_INT 8
4363: PUSH
4364: LD_INT 9
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_VAR 0 9
4375: ARRAY
4376: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4377: LD_ADDR_VAR 0 7
4381: PUSH
4382: LD_INT 6
4384: PUSH
4385: LD_INT 8
4387: PUSH
4388: LD_INT 10
4390: PUSH
4391: LD_INT 11
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: LD_OWVAR 67
4404: ARRAY
4405: PUSH
4406: LD_EXP 33
4410: PLUS
4411: ST_TO_ADDR
// if counter > 20 then
4412: LD_VAR 0 7
4416: PUSH
4417: LD_INT 20
4419: GREATER
4420: IFFALSE 4430
// counter := 20 ;
4422: LD_ADDR_VAR 0 7
4426: PUSH
4427: LD_INT 20
4429: ST_TO_ADDR
// for i := 1 to counter do
4430: LD_ADDR_VAR 0 2
4434: PUSH
4435: DOUBLE
4436: LD_INT 1
4438: DEC
4439: ST_TO_ADDR
4440: LD_VAR 0 7
4444: PUSH
4445: FOR_TO
4446: IFFALSE 4781
// begin uc_side := 8 ;
4448: LD_ADDR_OWVAR 20
4452: PUSH
4453: LD_INT 8
4455: ST_TO_ADDR
// uc_nation := 2 ;
4456: LD_ADDR_OWVAR 21
4460: PUSH
4461: LD_INT 2
4463: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4464: LD_INT 13
4466: PUSH
4467: LD_INT 14
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 1
4476: PPUSH
4477: LD_INT 2
4479: PPUSH
4480: CALL_OW 12
4484: ARRAY
4485: PPUSH
4486: LD_INT 3
4488: PPUSH
4489: LD_INT 1
4491: PUSH
4492: LD_INT 2
4494: PUSH
4495: LD_INT 5
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 1
4505: PPUSH
4506: LD_INT 3
4508: PPUSH
4509: CALL_OW 12
4513: ARRAY
4514: PPUSH
4515: LD_INT 27
4517: PUSH
4518: LD_INT 28
4520: PUSH
4521: LD_INT 27
4523: PUSH
4524: LD_EXP 50
4528: PUSH
4529: LD_INT 29
4531: PUSH
4532: LD_INT 25
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 1
4545: PPUSH
4546: LD_INT 6
4548: PPUSH
4549: CALL_OW 12
4553: ARRAY
4554: PPUSH
4555: LD_INT 100
4557: PPUSH
4558: CALL 34381 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4562: LD_OWVAR 40
4566: PUSH
4567: LD_INT 29
4569: EQUAL
4570: IFFALSE 4580
// vc_control := control_remote ;
4572: LD_ADDR_OWVAR 38
4576: PUSH
4577: LD_INT 2
4579: ST_TO_ADDR
// veh := CreateVehicle ;
4580: LD_ADDR_VAR 0 3
4584: PUSH
4585: CALL_OW 45
4589: ST_TO_ADDR
// result := Join ( result , veh ) ;
4590: LD_ADDR_VAR 0 1
4594: PUSH
4595: LD_VAR 0 1
4599: PPUSH
4600: LD_VAR 0 3
4604: PPUSH
4605: CALL 66198 0 2
4609: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4610: LD_VAR 0 3
4614: PPUSH
4615: LD_INT 3
4617: PUSH
4618: LD_INT 5
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PUSH
4625: LD_VAR 0 9
4629: ARRAY
4630: PPUSH
4631: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4635: LD_VAR 0 3
4639: PPUSH
4640: LD_VAR 0 6
4644: PPUSH
4645: LD_INT 0
4647: PPUSH
4648: CALL_OW 49
// if vc_control = control_manual then
4652: LD_OWVAR 38
4656: PUSH
4657: LD_INT 1
4659: EQUAL
4660: IFFALSE 4707
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4662: LD_INT 0
4664: PPUSH
4665: LD_INT 7
4667: PUSH
4668: LD_INT 8
4670: PUSH
4671: LD_INT 9
4673: PUSH
4674: LD_INT 10
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: PUSH
4683: LD_OWVAR 67
4687: ARRAY
4688: PPUSH
4689: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4693: CALL_OW 44
4697: PPUSH
4698: LD_VAR 0 3
4702: PPUSH
4703: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4707: LD_INT 10
4709: PPUSH
4710: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4714: LD_VAR 0 3
4718: PPUSH
4719: CALL_OW 263
4723: PUSH
4724: LD_INT 2
4726: EQUAL
4727: PUSH
4728: LD_VAR 0 3
4732: PPUSH
4733: CALL_OW 312
4737: NOT
4738: AND
4739: IFFALSE 4757
// begin Connect ( veh ) ;
4741: LD_VAR 0 3
4745: PPUSH
4746: CALL 37474 0 1
// wait ( 0 0$0.3 ) ;
4750: LD_INT 10
4752: PPUSH
4753: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4757: LD_VAR 0 3
4761: PPUSH
4762: LD_INT 100
4764: PPUSH
4765: LD_INT 55
4767: PPUSH
4768: CALL_OW 114
// wait ( 0 0$0.3 ) ;
4772: LD_INT 10
4774: PPUSH
4775: CALL_OW 67
// end ;
4779: GO 4445
4781: POP
4782: POP
// if sibDeposits and arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4783: LD_EXP 31
4787: PUSH
4788: LD_EXP 33
4792: PUSH
4793: LD_INT 4
4795: PUSH
4796: LD_INT 3
4798: PUSH
4799: LD_INT 3
4801: PUSH
4802: LD_INT 2
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: LD_OWVAR 67
4815: ARRAY
4816: MOD
4817: PUSH
4818: LD_INT 0
4820: EQUAL
4821: AND
4822: IFFALSE 5174
// begin tmp := rand ( 0 , 2 ) ;
4824: LD_ADDR_VAR 0 8
4828: PUSH
4829: LD_INT 0
4831: PPUSH
4832: LD_INT 2
4834: PPUSH
4835: CALL_OW 12
4839: ST_TO_ADDR
// if not tmp then
4840: LD_VAR 0 8
4844: NOT
4845: IFFALSE 5006
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4847: LD_ADDR_VAR 0 2
4851: PUSH
4852: DOUBLE
4853: LD_INT 1
4855: DEC
4856: ST_TO_ADDR
4857: LD_INT 3
4859: PUSH
4860: LD_INT 4
4862: PUSH
4863: LD_INT 4
4865: PUSH
4866: LD_INT 5
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: PUSH
4875: LD_OWVAR 67
4879: ARRAY
4880: PUSH
4881: FOR_TO
4882: IFFALSE 5002
// begin uc_side := 8 ;
4884: LD_ADDR_OWVAR 20
4888: PUSH
4889: LD_INT 8
4891: ST_TO_ADDR
// uc_nation := 2 ;
4892: LD_ADDR_OWVAR 21
4896: PUSH
4897: LD_INT 2
4899: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4900: LD_INT 0
4902: PPUSH
4903: LD_INT 1
4905: PPUSH
4906: LD_INT 7
4908: PUSH
4909: LD_INT 8
4911: PUSH
4912: LD_INT 9
4914: PUSH
4915: LD_INT 10
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: PUSH
4924: LD_OWVAR 67
4928: ARRAY
4929: PPUSH
4930: CALL_OW 380
// un := CreateHuman ;
4934: LD_ADDR_VAR 0 5
4938: PUSH
4939: CALL_OW 44
4943: ST_TO_ADDR
// result := Join ( result , un ) ;
4944: LD_ADDR_VAR 0 1
4948: PUSH
4949: LD_VAR 0 1
4953: PPUSH
4954: LD_VAR 0 5
4958: PPUSH
4959: CALL 66198 0 2
4963: ST_TO_ADDR
// if Prob ( 60 ) then
4964: LD_INT 60
4966: PPUSH
4967: CALL_OW 13
4971: IFFALSE 4985
// SetClass ( un , class_mortar ) ;
4973: LD_VAR 0 5
4977: PPUSH
4978: LD_INT 8
4980: PPUSH
4981: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
4985: LD_VAR 0 5
4989: PPUSH
4990: LD_INT 16
4992: PPUSH
4993: LD_INT 0
4995: PPUSH
4996: CALL_OW 49
// end ;
5000: GO 4881
5002: POP
5003: POP
// end else
5004: GO 5170
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5006: LD_ADDR_VAR 0 2
5010: PUSH
5011: DOUBLE
5012: LD_INT 1
5014: DEC
5015: ST_TO_ADDR
5016: LD_INT 2
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: LD_INT 3
5024: PUSH
5025: LD_INT 4
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: PUSH
5034: LD_OWVAR 67
5038: ARRAY
5039: PUSH
5040: FOR_TO
5041: IFFALSE 5168
// begin uc_side := 8 ;
5043: LD_ADDR_OWVAR 20
5047: PUSH
5048: LD_INT 8
5050: ST_TO_ADDR
// uc_nation := 0 ;
5051: LD_ADDR_OWVAR 21
5055: PUSH
5056: LD_INT 0
5058: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5059: LD_ADDR_OWVAR 28
5063: PUSH
5064: LD_INT 17
5066: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5067: LD_ADDR_OWVAR 31
5071: PUSH
5072: LD_INT 3
5074: PUSH
5075: LD_INT 0
5077: PUSH
5078: LD_INT 0
5080: PUSH
5081: LD_INT 0
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5090: LD_ADDR_OWVAR 29
5094: PUSH
5095: LD_INT 10
5097: PUSH
5098: LD_INT 10
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: ST_TO_ADDR
// hc_gallery :=  ;
5105: LD_ADDR_OWVAR 33
5109: PUSH
5110: LD_STRING 
5112: ST_TO_ADDR
// hc_name :=  ;
5113: LD_ADDR_OWVAR 26
5117: PUSH
5118: LD_STRING 
5120: ST_TO_ADDR
// un := CreateHuman ;
5121: LD_ADDR_VAR 0 5
5125: PUSH
5126: CALL_OW 44
5130: ST_TO_ADDR
// result := Join ( result , un ) ;
5131: LD_ADDR_VAR 0 1
5135: PUSH
5136: LD_VAR 0 1
5140: PPUSH
5141: LD_VAR 0 5
5145: PPUSH
5146: CALL 66198 0 2
5150: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5151: LD_VAR 0 5
5155: PPUSH
5156: LD_INT 16
5158: PPUSH
5159: LD_INT 0
5161: PPUSH
5162: CALL_OW 49
// end ;
5166: GO 5040
5168: POP
5169: POP
// end ; DestroySibDeposit ;
5170: CALL 3625 0 0
// end ; for i in result do
5174: LD_ADDR_VAR 0 2
5178: PUSH
5179: LD_VAR 0 1
5183: PUSH
5184: FOR_IN
5185: IFFALSE 5201
// SetTag ( i , 10 ) ;
5187: LD_VAR 0 2
5191: PPUSH
5192: LD_INT 10
5194: PPUSH
5195: CALL_OW 109
5199: GO 5184
5201: POP
5202: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5203: LD_EXP 43
5207: PPUSH
5208: CALL_OW 427
// end ; end_of_file
5212: LD_VAR 0 1
5216: RET
// export function Action ; var tmp ; begin
5217: LD_INT 0
5219: PPUSH
5220: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5221: LD_ADDR_VAR 0 2
5225: PUSH
5226: LD_INT 22
5228: PUSH
5229: LD_INT 1
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 21
5238: PUSH
5239: LD_INT 2
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PPUSH
5250: CALL_OW 69
5254: ST_TO_ADDR
// InGameOn ;
5255: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5268: LD_INT 22
5270: PUSH
5271: LD_INT 1
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: PUSH
5278: LD_INT 21
5280: PUSH
5281: LD_INT 2
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PPUSH
5292: CALL_OW 69
5296: PPUSH
5297: LD_INT 69
5299: PPUSH
5300: LD_INT 94
5302: PPUSH
5303: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5307: LD_EXP 1
5311: PPUSH
5312: LD_STRING D2-JMM-1
5314: PPUSH
5315: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5319: LD_VAR 0 2
5323: PPUSH
5324: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5328: LD_EXP 2
5332: PPUSH
5333: LD_STRING D2-Huck-1
5335: PPUSH
5336: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5340: LD_VAR 0 2
5344: PPUSH
5345: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5349: LD_EXP 1
5353: PPUSH
5354: LD_STRING D2-JMM-2
5356: PPUSH
5357: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5361: LD_VAR 0 2
5365: PPUSH
5366: CALL_OW 87
// InGameOff ;
5370: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5374: LD_STRING M1
5376: PPUSH
5377: CALL_OW 337
// SaveForQuickRestart ;
5381: CALL_OW 22
// wait ( 10 10$00 ) ;
5385: LD_INT 21000
5387: PPUSH
5388: CALL_OW 67
// DialogueOn ;
5392: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5396: LD_EXP 15
5400: PPUSH
5401: LD_STRING D3-Pow-1
5403: PPUSH
5404: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5408: LD_EXP 1
5412: PPUSH
5413: LD_STRING D3-JMM-1
5415: PPUSH
5416: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5420: LD_EXP 15
5424: PPUSH
5425: LD_STRING D3-Pow-2
5427: PPUSH
5428: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5432: LD_EXP 1
5436: PPUSH
5437: LD_STRING D3-JMM-2
5439: PPUSH
5440: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5444: LD_EXP 15
5448: PPUSH
5449: LD_STRING D3-Pow-3
5451: PPUSH
5452: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5456: LD_EXP 1
5460: PPUSH
5461: LD_STRING D3-JMM-3
5463: PPUSH
5464: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5468: LD_EXP 15
5472: PPUSH
5473: LD_STRING D3-Pow-4
5475: PPUSH
5476: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5480: LD_EXP 1
5484: PPUSH
5485: LD_STRING D3-JMM-4
5487: PPUSH
5488: CALL_OW 88
// DialogueOff ;
5492: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5496: LD_STRING M2
5498: PPUSH
5499: CALL_OW 337
// wait ( 2 2$30 ) ;
5503: LD_INT 5250
5505: PPUSH
5506: CALL_OW 67
// PrepareBurlak ;
5510: CALL 2244 0 0
// BurlakArmy ;
5514: CALL 2426 0 0
// end ;
5518: LD_VAR 0 1
5522: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5523: LD_INT 1
5525: PPUSH
5526: LD_EXP 18
5530: PPUSH
5531: CALL_OW 292
5535: IFFALSE 5694
5537: GO 5539
5539: DISABLE
// begin DialogueOn ;
5540: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5544: LD_EXP 18
5548: PPUSH
5549: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5553: LD_INT 22
5555: PUSH
5556: LD_INT 1
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: PUSH
5563: LD_INT 26
5565: PUSH
5566: LD_INT 1
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: LD_INT 2
5575: PUSH
5576: LD_INT 25
5578: PUSH
5579: LD_INT 1
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 25
5588: PUSH
5589: LD_INT 2
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: PUSH
5596: LD_INT 25
5598: PUSH
5599: LD_INT 3
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PUSH
5606: LD_INT 25
5608: PUSH
5609: LD_INT 4
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: LD_INT 25
5618: PUSH
5619: LD_INT 5
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: LIST
5638: PPUSH
5639: CALL_OW 69
5643: PPUSH
5644: LD_STRING D5-Sol1-1
5646: PPUSH
5647: LD_STRING D5-FSol1-1
5649: PPUSH
5650: CALL 8045 0 3
// Say ( JMM , D5-JMM-1 ) ;
5654: LD_EXP 1
5658: PPUSH
5659: LD_STRING D5-JMM-1
5661: PPUSH
5662: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5666: LD_EXP 17
5670: PPUSH
5671: LD_STRING DAmer-Bur-1
5673: PPUSH
5674: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5678: LD_EXP 1
5682: PPUSH
5683: LD_STRING DAmer-JMM-1
5685: PPUSH
5686: CALL_OW 88
// DialogueOff ;
5690: CALL_OW 7
// end ;
5694: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5695: LD_INT 4
5697: PPUSH
5698: LD_INT 22
5700: PUSH
5701: LD_INT 7
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: PPUSH
5708: CALL_OW 70
5712: IFFALSE 6111
5714: GO 5716
5716: DISABLE
5717: LD_INT 0
5719: PPUSH
// begin enable ;
5720: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5721: LD_ADDR_VAR 0 1
5725: PUSH
5726: LD_INT 4
5728: PPUSH
5729: LD_INT 22
5731: PUSH
5732: LD_INT 7
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PPUSH
5739: CALL_OW 70
5743: PUSH
5744: FOR_IN
5745: IFFALSE 6109
// begin if i = Burlak or i = Masha then
5747: LD_VAR 0 1
5751: PUSH
5752: LD_EXP 17
5756: EQUAL
5757: PUSH
5758: LD_VAR 0 1
5762: PUSH
5763: LD_EXP 18
5767: EQUAL
5768: OR
5769: IFFALSE 5916
// begin RemoveUnit ( i ) ;
5771: LD_VAR 0 1
5775: PPUSH
5776: CALL_OW 64
// DialogueOn ;
5780: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5784: LD_EXP 1
5788: PPUSH
5789: LD_STRING D5a-JMM-1
5791: PPUSH
5792: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5796: LD_INT 22
5798: PUSH
5799: LD_INT 1
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 26
5808: PUSH
5809: LD_INT 1
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: LD_INT 2
5818: PUSH
5819: LD_INT 25
5821: PUSH
5822: LD_INT 1
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: PUSH
5829: LD_INT 25
5831: PUSH
5832: LD_INT 2
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PUSH
5839: LD_INT 25
5841: PUSH
5842: LD_INT 3
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: PUSH
5849: LD_INT 25
5851: PUSH
5852: LD_INT 4
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PUSH
5859: LD_INT 25
5861: PUSH
5862: LD_INT 5
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: PPUSH
5882: CALL_OW 69
5886: PPUSH
5887: LD_STRING D5a-Sol1-1
5889: PPUSH
5890: LD_STRING D5-FSol1-1
5892: PPUSH
5893: CALL 8045 0 3
// DialogueOff ;
5897: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5901: LD_STRING M2b
5903: PPUSH
5904: CALL_OW 337
// spawnBurlak = 0 ;
5908: LD_ADDR_EXP 27
5912: PUSH
5913: LD_INT 0
5915: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 247
5925: PUSH
5926: LD_INT 2
5928: EQUAL
5929: PUSH
5930: LD_VAR 0 1
5934: PPUSH
5935: CALL_OW 263
5939: PUSH
5940: LD_INT 1
5942: EQUAL
5943: AND
5944: IFFALSE 6072
// begin case IsDrivenBy ( i ) of Gnyevko :
5946: LD_VAR 0 1
5950: PPUSH
5951: CALL_OW 311
5955: PUSH
5956: LD_EXP 19
5960: DOUBLE
5961: EQUAL
5962: IFTRUE 5966
5964: GO 5979
5966: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
5967: LD_INT 1
5969: PPUSH
5970: LD_STRING 13_Gnyevko_1
5972: PPUSH
5973: CALL_OW 39
5977: GO 6072
5979: LD_EXP 20
5983: DOUBLE
5984: EQUAL
5985: IFTRUE 5989
5987: GO 6002
5989: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
5990: LD_INT 1
5992: PPUSH
5993: LD_STRING 13_Titov_1
5995: PPUSH
5996: CALL_OW 39
6000: GO 6072
6002: LD_EXP 21
6006: DOUBLE
6007: EQUAL
6008: IFTRUE 6012
6010: GO 6025
6012: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6013: LD_INT 1
6015: PPUSH
6016: LD_STRING 13_Xavier_1
6018: PPUSH
6019: CALL_OW 39
6023: GO 6072
6025: LD_EXP 22
6029: DOUBLE
6030: EQUAL
6031: IFTRUE 6035
6033: GO 6048
6035: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6036: LD_INT 1
6038: PPUSH
6039: LD_STRING 13_Belkov_1
6041: PPUSH
6042: CALL_OW 39
6046: GO 6072
6048: LD_EXP 23
6052: DOUBLE
6053: EQUAL
6054: IFTRUE 6058
6056: GO 6071
6058: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6059: LD_INT 1
6061: PPUSH
6062: LD_STRING 13_Lipshchin_1
6064: PPUSH
6065: CALL_OW 39
6069: GO 6072
6071: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6072: LD_VAR 0 1
6076: PPUSH
6077: CALL_OW 264
6081: PUSH
6082: LD_INT 49
6084: EQUAL
6085: IFFALSE 6098
// DestroyUnit ( i ) else
6087: LD_VAR 0 1
6091: PPUSH
6092: CALL_OW 65
6096: GO 6107
// RemoveUnit ( i ) ;
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 64
// end ;
6107: GO 5744
6109: POP
6110: POP
// end ;
6111: PPOPN 1
6113: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6114: LD_EXP 17
6118: PPUSH
6119: CALL_OW 302
6123: PUSH
6124: LD_EXP 18
6128: PPUSH
6129: CALL_OW 256
6133: PUSH
6134: LD_INT 500
6136: LESS
6137: AND
6138: PUSH
6139: LD_EXP 18
6143: PPUSH
6144: CALL_OW 255
6148: PUSH
6149: LD_INT 7
6151: EQUAL
6152: AND
6153: IFFALSE 6173
6155: GO 6157
6157: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6158: LD_EXP 17
6162: PPUSH
6163: LD_INT 107
6165: PPUSH
6166: LD_INT 118
6168: PPUSH
6169: CALL_OW 111
6173: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6174: LD_EXP 17
6178: PPUSH
6179: CALL_OW 301
6183: PUSH
6184: LD_EXP 27
6188: PUSH
6189: LD_INT 1
6191: EQUAL
6192: AND
6193: IFFALSE 6326
6195: GO 6197
6197: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6198: LD_EXP 1
6202: PPUSH
6203: LD_STRING D5b-JMM-1
6205: PPUSH
6206: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6210: LD_INT 22
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 26
6222: PUSH
6223: LD_INT 1
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PUSH
6230: LD_INT 2
6232: PUSH
6233: LD_INT 25
6235: PUSH
6236: LD_INT 1
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 25
6245: PUSH
6246: LD_INT 2
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 25
6255: PUSH
6256: LD_INT 3
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 25
6265: PUSH
6266: LD_INT 4
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 25
6275: PUSH
6276: LD_INT 5
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: LIST
6295: PPUSH
6296: CALL_OW 69
6300: PPUSH
6301: LD_STRING D5b-Sol1-1
6303: PPUSH
6304: LD_STRING 
6306: PPUSH
6307: CALL 8045 0 3
// ChangeMissionObjectives ( M2a ) ;
6311: LD_STRING M2a
6313: PPUSH
6314: CALL_OW 337
// burlakStatus := 1 ;
6318: LD_ADDR_EXP 28
6322: PUSH
6323: LD_INT 1
6325: ST_TO_ADDR
// end ;
6326: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6327: LD_EXP 2
6331: PPUSH
6332: CALL_OW 301
6336: IFFALSE 6473
6338: GO 6340
6340: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6341: LD_EXP 1
6345: PPUSH
6346: LD_STRING D6-JMM-1
6348: PPUSH
6349: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6353: LD_INT 22
6355: PUSH
6356: LD_INT 1
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PUSH
6363: LD_INT 26
6365: PUSH
6366: LD_INT 1
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: LD_INT 25
6378: PUSH
6379: LD_INT 1
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 25
6388: PUSH
6389: LD_INT 2
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 25
6398: PUSH
6399: LD_INT 3
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: PUSH
6406: LD_INT 25
6408: PUSH
6409: LD_INT 4
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 25
6418: PUSH
6419: LD_INT 5
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: PPUSH
6439: CALL_OW 69
6443: PPUSH
6444: LD_STRING D6-Sol1-1
6446: PPUSH
6447: LD_STRING 
6449: PPUSH
6450: CALL 8045 0 3
// Say ( JMM , D6-JMM-2 ) ;
6454: LD_EXP 1
6458: PPUSH
6459: LD_STRING D6-JMM-2
6461: PPUSH
6462: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6466: LD_STRING M1a
6468: PPUSH
6469: CALL_OW 337
// end ;
6473: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6474: LD_INT 25
6476: PPUSH
6477: LD_INT 1
6479: PPUSH
6480: CALL_OW 321
6484: PUSH
6485: LD_INT 2
6487: EQUAL
6488: IFFALSE 6505
6490: GO 6492
6492: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6493: LD_EXP 2
6497: PPUSH
6498: LD_STRING D6-Huck-2
6500: PPUSH
6501: CALL_OW 88
6505: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6506: LD_INT 22
6508: PUSH
6509: LD_INT 1
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PUSH
6516: LD_INT 2
6518: PUSH
6519: LD_INT 34
6521: PUSH
6522: LD_INT 8
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 35
6531: PUSH
6532: LD_INT 8
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PPUSH
6548: CALL_OW 69
6552: PUSH
6553: LD_INT 5
6555: PPUSH
6556: LD_INT 22
6558: PUSH
6559: LD_INT 1
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 21
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: LD_INT 30
6578: PUSH
6579: LD_INT 1
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 3
6588: PUSH
6589: LD_INT 57
6591: PUSH
6592: EMPTY
6593: LIST
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: PPUSH
6605: CALL_OW 70
6609: AND
6610: PUSH
6611: LD_INT 5
6613: PPUSH
6614: LD_INT 22
6616: PUSH
6617: LD_INT 1
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 21
6626: PUSH
6627: LD_INT 3
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 30
6636: PUSH
6637: LD_INT 5
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 3
6646: PUSH
6647: LD_INT 57
6649: PUSH
6650: EMPTY
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 70
6667: AND
6668: IFFALSE 6710
6670: GO 6672
6672: DISABLE
// begin DialogueOn ;
6673: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6677: LD_EXP 1
6681: PPUSH
6682: LD_STRING D7-JMM-1
6684: PPUSH
6685: CALL_OW 88
// DialogueOff ;
6689: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6693: LD_STRING M4
6695: PPUSH
6696: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6700: LD_INT 5
6702: PPUSH
6703: LD_INT 0
6705: PPUSH
6706: CALL_OW 424
// end ;
6710: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6711: LD_INT 6
6713: PPUSH
6714: LD_INT 22
6716: PUSH
6717: LD_INT 1
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PUSH
6724: LD_INT 25
6726: PUSH
6727: LD_INT 4
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: PPUSH
6738: CALL_OW 70
6742: PUSH
6743: LD_EXP 37
6747: PUSH
6748: LD_INT 1
6750: EQUAL
6751: AND
6752: PUSH
6753: LD_EXP 29
6757: PUSH
6758: LD_INT 0
6760: EQUAL
6761: AND
6762: IFFALSE 6827
6764: GO 6766
6766: DISABLE
// begin enable ;
6767: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6768: LD_ADDR_EXP 26
6772: PUSH
6773: LD_INT 6
6775: PPUSH
6776: LD_INT 22
6778: PUSH
6779: LD_INT 1
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 25
6788: PUSH
6789: LD_INT 4
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 70
6804: PUSH
6805: LD_INT 1
6807: ARRAY
6808: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6809: LD_INT 6
6811: PPUSH
6812: LD_INT 0
6814: PPUSH
6815: CALL_OW 424
// radationResearched := 1 ;
6819: LD_ADDR_EXP 29
6823: PUSH
6824: LD_INT 1
6826: ST_TO_ADDR
// end ;
6827: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6828: LD_EXP 26
6832: PPUSH
6833: CALL_OW 301
6837: PUSH
6838: LD_EXP 29
6842: PUSH
6843: LD_INT 1
6845: EQUAL
6846: AND
6847: IFFALSE 6883
6849: GO 6851
6851: DISABLE
// begin enable ;
6852: ENABLE
// radationResearched = 0 ;
6853: LD_ADDR_EXP 29
6857: PUSH
6858: LD_INT 0
6860: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6861: LD_INT 6
6863: PPUSH
6864: LD_INT 1
6866: PPUSH
6867: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6871: LD_EXP 1
6875: PPUSH
6876: LD_STRING D9a-JMM-1
6878: PPUSH
6879: CALL_OW 88
// end ; end_of_file
6883: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6884: LD_VAR 0 5
6888: PUSH
6889: LD_INT 8
6891: EQUAL
6892: PUSH
6893: LD_EXP 35
6897: PUSH
6898: LD_INT 0
6900: EQUAL
6901: AND
6902: IFFALSE 6955
// begin eventVar1 := 1 ;
6904: LD_ADDR_EXP 35
6908: PUSH
6909: LD_INT 1
6911: ST_TO_ADDR
// DialogueOn ;
6912: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6916: LD_EXP 1
6920: PPUSH
6921: LD_STRING D6a-JMM-1
6923: PPUSH
6924: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
6928: LD_EXP 15
6932: PPUSH
6933: LD_STRING D6a-Pow-1
6935: PPUSH
6936: CALL_OW 94
// DialogueOff ;
6940: CALL_OW 7
// wait ( 3 3$0 ) ;
6944: LD_INT 6300
6946: PPUSH
6947: CALL_OW 67
// PowellSupport ;
6951: CALL 1820 0 0
// end ; end ;
6955: PPOPN 5
6957: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6958: LD_VAR 0 1
6962: PPUSH
6963: CALL 24877 0 1
// if un = JMM then
6967: LD_VAR 0 1
6971: PUSH
6972: LD_EXP 1
6976: EQUAL
6977: IFFALSE 6986
// YouLost ( JMM ) ;
6979: LD_STRING JMM
6981: PPUSH
6982: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
6986: LD_VAR 0 1
6990: PPUSH
6991: CALL_OW 264
6995: PUSH
6996: LD_INT 31
6998: EQUAL
6999: IFFALSE 7015
// achivCounter := achivCounter + 1 ;
7001: LD_ADDR_EXP 41
7005: PUSH
7006: LD_EXP 41
7010: PUSH
7011: LD_INT 1
7013: PLUS
7014: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7015: LD_VAR 0 1
7019: PPUSH
7020: CALL_OW 255
7024: PUSH
7025: LD_INT 1
7027: NONEQUAL
7028: PUSH
7029: LD_VAR 0 1
7033: PPUSH
7034: CALL_OW 247
7038: PUSH
7039: LD_INT 2
7041: EQUAL
7042: AND
7043: IFFALSE 7059
// destroyCounter := destroyCounter + 1 ;
7045: LD_ADDR_EXP 42
7049: PUSH
7050: LD_EXP 42
7054: PUSH
7055: LD_INT 1
7057: PLUS
7058: ST_TO_ADDR
// end ;
7059: PPOPN 1
7061: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7062: LD_VAR 0 2
7066: PUSH
7067: LD_EXP 18
7071: EQUAL
7072: IFFALSE 7081
// SetAchievement ( ACH_MASHA ) ;
7074: LD_STRING ACH_MASHA
7076: PPUSH
7077: CALL_OW 543
// end ;
7081: PPOPN 4
7083: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7084: LD_VAR 0 1
7088: PPUSH
7089: LD_VAR 0 2
7093: PPUSH
7094: CALL 24999 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7098: LD_VAR 0 1
7102: PPUSH
7103: CALL_OW 264
7107: PUSH
7108: LD_INT 8
7110: EQUAL
7111: PUSH
7112: LD_EXP 36
7116: PUSH
7117: LD_INT 0
7119: EQUAL
7120: AND
7121: IFFALSE 7190
// begin eventVar2 := 1 ;
7123: LD_ADDR_EXP 36
7127: PUSH
7128: LD_INT 1
7130: ST_TO_ADDR
// DialogueOn ;
7131: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7135: LD_EXP 1
7139: PPUSH
7140: LD_STRING D6b-JMM-1
7142: PPUSH
7143: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7147: LD_EXP 15
7151: PPUSH
7152: LD_STRING D6b-Pow-1
7154: PPUSH
7155: CALL_OW 94
// DialogueOff ;
7159: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7163: LD_INT 5
7165: PPUSH
7166: LD_INT 1
7168: PPUSH
7169: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7173: LD_INT 7
7175: PPUSH
7176: LD_INT 1
7178: PPUSH
7179: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7183: LD_STRING M3
7185: PPUSH
7186: CALL_OW 337
// end ; end ;
7190: PPOPN 2
7192: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7193: LD_VAR 0 2
7197: PPUSH
7198: LD_VAR 0 3
7202: PPUSH
7203: LD_INT 5
7205: PPUSH
7206: CALL_OW 309
7210: PUSH
7211: LD_EXP 37
7215: PUSH
7216: LD_INT 0
7218: EQUAL
7219: AND
7220: IFFALSE 7445
// begin eventVar3 := 1 ;
7222: LD_ADDR_EXP 37
7226: PUSH
7227: LD_INT 1
7229: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7230: LD_INT 175
7232: PPUSH
7233: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7237: LD_INT 7
7239: PPUSH
7240: LD_INT 22
7242: PUSH
7243: LD_INT 1
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 21
7252: PUSH
7253: LD_INT 2
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 34
7262: PUSH
7263: LD_INT 11
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PPUSH
7275: CALL_OW 70
7279: IFFALSE 7298
// begin radarOnSpot = 1 ;
7281: LD_ADDR_EXP 30
7285: PUSH
7286: LD_INT 1
7288: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7289: LD_STRING M3a
7291: PPUSH
7292: CALL_OW 337
// end else
7296: GO 7305
// ChangeMissionObjectives ( M3b ) ;
7298: LD_STRING M3b
7300: PPUSH
7301: CALL_OW 337
// DialogueOn ;
7305: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7309: LD_EXP 2
7313: PPUSH
7314: LD_STRING D8-Huck-1
7316: PPUSH
7317: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7321: LD_EXP 1
7325: PPUSH
7326: LD_STRING D8-JMM-1
7328: PPUSH
7329: CALL_OW 88
// if IsOk ( Stevens ) then
7333: LD_EXP 2
7337: PPUSH
7338: CALL_OW 302
7342: IFFALSE 7404
// begin Say ( Stevens , D8-Huck-2 ) ;
7344: LD_EXP 2
7348: PPUSH
7349: LD_STRING D8-Huck-2
7351: PPUSH
7352: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7356: LD_EXP 1
7360: PPUSH
7361: LD_STRING D8-JMM-2
7363: PPUSH
7364: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7368: LD_EXP 2
7372: PPUSH
7373: LD_STRING D8-Huck-3
7375: PPUSH
7376: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7380: LD_EXP 1
7384: PPUSH
7385: LD_STRING D8-JMM-3
7387: PPUSH
7388: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7392: LD_EXP 2
7396: PPUSH
7397: LD_STRING D8-Huck-4
7399: PPUSH
7400: CALL_OW 88
// end ; DialogueOff ;
7404: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7408: LD_INT 5
7410: PPUSH
7411: LD_INT 0
7413: PPUSH
7414: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7418: LD_INT 7
7420: PPUSH
7421: LD_INT 0
7423: PPUSH
7424: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7428: LD_INT 6
7430: PPUSH
7431: LD_INT 1
7433: PPUSH
7434: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7438: LD_STRING M5
7440: PPUSH
7441: CALL_OW 337
// end ; end ;
7445: PPOPN 3
7447: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7448: LD_EXP 26
7452: PPUSH
7453: CALL_OW 302
7457: PUSH
7458: LD_VAR 0 2
7462: PUSH
7463: LD_EXP 26
7467: EQUAL
7468: AND
7469: PUSH
7470: LD_EXP 38
7474: PUSH
7475: LD_INT 0
7477: EQUAL
7478: AND
7479: PUSH
7480: LD_EXP 37
7484: PUSH
7485: LD_INT 1
7487: EQUAL
7488: AND
7489: PUSH
7490: LD_VAR 0 1
7494: PPUSH
7495: LD_INT 1
7497: PPUSH
7498: CALL_OW 268
7502: PUSH
7503: LD_INT 11
7505: EQUAL
7506: PUSH
7507: LD_VAR 0 1
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: CALL_OW 268
7519: PUSH
7520: LD_INT 11
7522: EQUAL
7523: OR
7524: AND
7525: IFFALSE 7535
// eventVar4 := 1 ;
7527: LD_ADDR_EXP 38
7531: PUSH
7532: LD_INT 1
7534: ST_TO_ADDR
// end ;
7535: PPOPN 2
7537: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7538: LD_INT 0
7540: PPUSH
7541: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7542: LD_VAR 0 1
7546: PPUSH
7547: CALL_OW 248
7551: PUSH
7552: LD_INT 2
7554: EQUAL
7555: IFFALSE 7801
// begin sibDestroyedCounter := sibDestroyedCounter + 1 ;
7557: LD_ADDR_EXP 32
7561: PUSH
7562: LD_EXP 32
7566: PUSH
7567: LD_INT 1
7569: PLUS
7570: ST_TO_ADDR
// for i := sibDeposits downto 1 do
7571: LD_ADDR_VAR 0 4
7575: PUSH
7576: DOUBLE
7577: LD_EXP 31
7581: INC
7582: ST_TO_ADDR
7583: LD_INT 1
7585: PUSH
7586: FOR_DOWNTO
7587: IFFALSE 7657
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7589: LD_EXP 31
7593: PUSH
7594: LD_VAR 0 4
7598: ARRAY
7599: PUSH
7600: LD_INT 1
7602: ARRAY
7603: PUSH
7604: LD_VAR 0 2
7608: EQUAL
7609: PUSH
7610: LD_EXP 31
7614: PUSH
7615: LD_VAR 0 4
7619: ARRAY
7620: PUSH
7621: LD_INT 2
7623: ARRAY
7624: PUSH
7625: LD_VAR 0 3
7629: EQUAL
7630: AND
7631: IFFALSE 7655
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7633: LD_ADDR_EXP 31
7637: PUSH
7638: LD_EXP 31
7642: PPUSH
7643: LD_VAR 0 4
7647: PPUSH
7648: CALL_OW 3
7652: ST_TO_ADDR
// break ;
7653: GO 7657
// end ;
7655: GO 7586
7657: POP
7658: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7659: LD_EXP 39
7663: PUSH
7664: LD_INT 0
7666: EQUAL
7667: PUSH
7668: LD_VAR 0 2
7672: PPUSH
7673: LD_VAR 0 3
7677: PPUSH
7678: CALL_OW 428
7682: PUSH
7683: LD_INT 22
7685: PUSH
7686: LD_INT 1
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PPUSH
7693: CALL_OW 69
7697: IN
7698: AND
7699: IFFALSE 7801
// begin eventVar5 := 1 ;
7701: LD_ADDR_EXP 39
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// DialogueOn ;
7709: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7713: LD_EXP 2
7717: PPUSH
7718: LD_STRING D4-Sci1-1
7720: PPUSH
7721: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7725: LD_EXP 1
7729: PPUSH
7730: LD_STRING D4-JMM-1
7732: PPUSH
7733: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7737: LD_EXP 2
7741: PPUSH
7742: LD_STRING D4-Sci1-2
7744: PPUSH
7745: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7749: LD_EXP 1
7753: PPUSH
7754: LD_STRING D4-JMM-2
7756: PPUSH
7757: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7761: LD_EXP 2
7765: PPUSH
7766: LD_STRING D4-Sci1-3
7768: PPUSH
7769: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7773: LD_EXP 1
7777: PPUSH
7778: LD_STRING D4-JMM-3
7780: PPUSH
7781: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7785: LD_EXP 1
7789: PPUSH
7790: LD_STRING D4-JMM-3a
7792: PPUSH
7793: CALL_OW 88
// DialogueOff ;
7797: CALL_OW 7
// end ; end ; end ;
7801: PPOPN 5
7803: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7804: LD_VAR 0 1
7808: PPUSH
7809: CALL_OW 255
7813: PUSH
7814: LD_INT 1
7816: EQUAL
7817: PUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: CALL_OW 266
7827: PUSH
7828: LD_INT 0
7830: EQUAL
7831: AND
7832: PUSH
7833: LD_INT 22
7835: PUSH
7836: LD_INT 1
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: LD_INT 21
7845: PUSH
7846: LD_INT 3
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PUSH
7853: LD_INT 2
7855: PUSH
7856: LD_INT 30
7858: PUSH
7859: LD_INT 0
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 30
7868: PUSH
7869: LD_INT 1
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: LIST
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 69
7890: PUSH
7891: LD_INT 1
7893: EQUAL
7894: AND
7895: IFFALSE 7909
// SetBName ( building , omega ) ;
7897: LD_VAR 0 1
7901: PPUSH
7902: LD_STRING omega
7904: PPUSH
7905: CALL_OW 500
// end ;
7909: PPOPN 2
7911: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL 24983 0 1
// end ;
7921: PPOPN 1
7923: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7924: LD_VAR 0 1
7928: PUSH
7929: LD_EXP 43
7933: EQUAL
7934: IFFALSE 7940
// ArabianAttack ;
7936: CALL 9878 0 0
// if event = eventRussianAttack then
7940: LD_VAR 0 1
7944: PUSH
7945: LD_EXP 44
7949: EQUAL
7950: IFFALSE 7956
// RussianAttack ;
7952: CALL 10141 0 0
// end ;
7956: PPOPN 1
7958: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
7959: LD_VAR 0 1
7963: PPUSH
7964: CALL_OW 255
7968: PUSH
7969: LD_INT 3
7971: PUSH
7972: LD_INT 8
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: IN
7979: IFFALSE 8042
// begin ComMoveXY ( driver , 41 , 2 ) ;
7981: LD_VAR 0 1
7985: PPUSH
7986: LD_INT 41
7988: PPUSH
7989: LD_INT 2
7991: PPUSH
7992: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7996: LD_INT 35
7998: PPUSH
7999: CALL_OW 67
// if IsDead ( driver ) then
8003: LD_VAR 0 1
8007: PPUSH
8008: CALL_OW 301
8012: IFFALSE 8016
// exit ;
8014: GO 8042
// until IsAt ( driver , 41 , 2 ) ;
8016: LD_VAR 0 1
8020: PPUSH
8021: LD_INT 41
8023: PPUSH
8024: LD_INT 2
8026: PPUSH
8027: CALL_OW 307
8031: IFFALSE 7996
// RemoveUnit ( driver ) ;
8033: LD_VAR 0 1
8037: PPUSH
8038: CALL_OW 64
// end ; end ; end_of_file
8042: PPOPN 4
8044: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8045: LD_INT 0
8047: PPUSH
8048: PPUSH
8049: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8050: LD_ADDR_VAR 0 1
8054: PUSH
8055: LD_VAR 0 1
8059: PUSH
8060: LD_EXP 1
8064: PUSH
8065: LD_EXP 2
8069: PUSH
8070: LD_EXP 3
8074: PUSH
8075: LD_EXP 4
8079: PUSH
8080: LD_EXP 5
8084: PUSH
8085: LD_EXP 6
8089: PUSH
8090: LD_EXP 7
8094: PUSH
8095: LD_EXP 8
8099: PUSH
8100: LD_EXP 9
8104: PUSH
8105: LD_EXP 10
8109: PUSH
8110: LD_EXP 11
8114: PUSH
8115: LD_EXP 12
8119: PUSH
8120: LD_EXP 13
8124: PUSH
8125: LD_EXP 14
8129: PUSH
8130: LD_EXP 15
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: DIFF
8152: ST_TO_ADDR
// if not characters then
8153: LD_VAR 0 1
8157: NOT
8158: IFFALSE 8162
// exit ;
8160: GO 8241
// speaker := characters [ rand ( 1 , characters ) ] ;
8162: LD_ADDR_VAR 0 6
8166: PUSH
8167: LD_VAR 0 1
8171: PUSH
8172: LD_INT 1
8174: PPUSH
8175: LD_VAR 0 1
8179: PPUSH
8180: CALL_OW 12
8184: ARRAY
8185: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8186: LD_VAR 0 6
8190: PPUSH
8191: CALL_OW 258
8195: PUSH
8196: LD_INT 1
8198: EQUAL
8199: IFFALSE 8217
// Say ( speaker , dialogMID ) else
8201: LD_VAR 0 6
8205: PPUSH
8206: LD_VAR 0 2
8210: PPUSH
8211: CALL_OW 88
8215: GO 8231
// Say ( speaker , dialogFID ) ;
8217: LD_VAR 0 6
8221: PPUSH
8222: LD_VAR 0 3
8226: PPUSH
8227: CALL_OW 88
// result := speaker ;
8231: LD_ADDR_VAR 0 4
8235: PUSH
8236: LD_VAR 0 6
8240: ST_TO_ADDR
// end ;
8241: LD_VAR 0 4
8245: RET
// export function PrepareDifficulty ; begin
8246: LD_INT 0
8248: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8249: LD_INT 5
8251: PPUSH
8252: LD_INT 8
8254: PPUSH
8255: LD_INT 2
8257: PPUSH
8258: CALL_OW 322
// if Difficulty = 1 then
8262: LD_OWVAR 67
8266: PUSH
8267: LD_INT 1
8269: EQUAL
8270: IFFALSE 8389
// begin SetTech ( 66 , 8 , state_researched ) ;
8272: LD_INT 66
8274: PPUSH
8275: LD_INT 8
8277: PPUSH
8278: LD_INT 2
8280: PPUSH
8281: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8285: LD_INT 67
8287: PPUSH
8288: LD_INT 8
8290: PPUSH
8291: LD_INT 0
8293: PPUSH
8294: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8298: LD_INT 68
8300: PPUSH
8301: LD_INT 8
8303: PPUSH
8304: LD_INT 0
8306: PPUSH
8307: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8311: LD_INT 51
8313: PPUSH
8314: LD_INT 8
8316: PPUSH
8317: LD_INT 2
8319: PPUSH
8320: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8324: LD_INT 52
8326: PPUSH
8327: LD_INT 8
8329: PPUSH
8330: LD_INT 0
8332: PPUSH
8333: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8337: LD_INT 53
8339: PPUSH
8340: LD_INT 8
8342: PPUSH
8343: LD_INT 0
8345: PPUSH
8346: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8350: LD_INT 60
8352: PPUSH
8353: LD_INT 8
8355: PPUSH
8356: LD_INT 2
8358: PPUSH
8359: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8363: LD_INT 61
8365: PPUSH
8366: LD_INT 8
8368: PPUSH
8369: LD_INT 0
8371: PPUSH
8372: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8376: LD_INT 62
8378: PPUSH
8379: LD_INT 8
8381: PPUSH
8382: LD_INT 0
8384: PPUSH
8385: CALL_OW 322
// end ; if Difficulty = 2 then
8389: LD_OWVAR 67
8393: PUSH
8394: LD_INT 2
8396: EQUAL
8397: IFFALSE 8516
// begin SetTech ( 66 , 8 , state_researched ) ;
8399: LD_INT 66
8401: PPUSH
8402: LD_INT 8
8404: PPUSH
8405: LD_INT 2
8407: PPUSH
8408: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8412: LD_INT 67
8414: PPUSH
8415: LD_INT 8
8417: PPUSH
8418: LD_INT 2
8420: PPUSH
8421: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8425: LD_INT 68
8427: PPUSH
8428: LD_INT 8
8430: PPUSH
8431: LD_INT 0
8433: PPUSH
8434: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8438: LD_INT 51
8440: PPUSH
8441: LD_INT 8
8443: PPUSH
8444: LD_INT 2
8446: PPUSH
8447: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8451: LD_INT 52
8453: PPUSH
8454: LD_INT 8
8456: PPUSH
8457: LD_INT 2
8459: PPUSH
8460: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8464: LD_INT 53
8466: PPUSH
8467: LD_INT 8
8469: PPUSH
8470: LD_INT 2
8472: PPUSH
8473: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8477: LD_INT 60
8479: PPUSH
8480: LD_INT 8
8482: PPUSH
8483: LD_INT 2
8485: PPUSH
8486: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8490: LD_INT 61
8492: PPUSH
8493: LD_INT 8
8495: PPUSH
8496: LD_INT 2
8498: PPUSH
8499: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8503: LD_INT 62
8505: PPUSH
8506: LD_INT 8
8508: PPUSH
8509: LD_INT 0
8511: PPUSH
8512: CALL_OW 322
// end ; if Difficulty >= 3 then
8516: LD_OWVAR 67
8520: PUSH
8521: LD_INT 3
8523: GREATEREQUAL
8524: IFFALSE 8643
// begin SetTech ( 66 , 8 , state_researched ) ;
8526: LD_INT 66
8528: PPUSH
8529: LD_INT 8
8531: PPUSH
8532: LD_INT 2
8534: PPUSH
8535: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8539: LD_INT 67
8541: PPUSH
8542: LD_INT 8
8544: PPUSH
8545: LD_INT 2
8547: PPUSH
8548: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8552: LD_INT 68
8554: PPUSH
8555: LD_INT 8
8557: PPUSH
8558: LD_INT 0
8560: PPUSH
8561: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8565: LD_INT 51
8567: PPUSH
8568: LD_INT 8
8570: PPUSH
8571: LD_INT 2
8573: PPUSH
8574: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8578: LD_INT 52
8580: PPUSH
8581: LD_INT 8
8583: PPUSH
8584: LD_INT 2
8586: PPUSH
8587: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8591: LD_INT 53
8593: PPUSH
8594: LD_INT 8
8596: PPUSH
8597: LD_INT 2
8599: PPUSH
8600: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8604: LD_INT 60
8606: PPUSH
8607: LD_INT 8
8609: PPUSH
8610: LD_INT 2
8612: PPUSH
8613: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8617: LD_INT 61
8619: PPUSH
8620: LD_INT 8
8622: PPUSH
8623: LD_INT 2
8625: PPUSH
8626: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8630: LD_INT 62
8632: PPUSH
8633: LD_INT 8
8635: PPUSH
8636: LD_INT 0
8638: PPUSH
8639: CALL_OW 322
// end ; end ;
8643: LD_VAR 0 1
8647: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8648: LD_INT 0
8650: PPUSH
8651: PPUSH
// for i in charactersList do
8652: LD_ADDR_VAR 0 4
8656: PUSH
8657: LD_VAR 0 1
8661: PUSH
8662: FOR_IN
8663: IFFALSE 8681
// SaveCharacters ( i , ident ) ;
8665: LD_VAR 0 4
8669: PPUSH
8670: LD_VAR 0 2
8674: PPUSH
8675: CALL_OW 38
8679: GO 8662
8681: POP
8682: POP
// end ; end_of_file
8683: LD_VAR 0 3
8687: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8688: LD_EXP 38
8692: PUSH
8693: LD_INT 1
8695: EQUAL
8696: IFFALSE 9598
8698: GO 8700
8700: DISABLE
8701: LD_INT 0
8703: PPUSH
8704: PPUSH
8705: PPUSH
// begin m1 := false ;
8706: LD_ADDR_VAR 0 1
8710: PUSH
8711: LD_INT 0
8713: ST_TO_ADDR
// m2 := false ;
8714: LD_ADDR_VAR 0 2
8718: PUSH
8719: LD_INT 0
8721: ST_TO_ADDR
// m3 := false ;
8722: LD_ADDR_VAR 0 3
8726: PUSH
8727: LD_INT 0
8729: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
8730: LD_EXP 1
8734: PPUSH
8735: LD_STRING D9b-JMM-1
8737: PPUSH
8738: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8742: LD_EXP 15
8746: PPUSH
8747: LD_STRING D9b-Pow-1
8749: PPUSH
8750: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
8754: LD_EXP 1
8758: PPUSH
8759: LD_STRING D9b-JMM-2
8761: PPUSH
8762: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
8766: LD_EXP 15
8770: PPUSH
8771: LD_STRING D9b-Pow-2
8773: PPUSH
8774: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
8778: LD_EXP 1
8782: PPUSH
8783: LD_STRING D9b-JMM-3
8785: PPUSH
8786: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
8790: LD_EXP 15
8794: PPUSH
8795: LD_STRING D9b-Pow-3
8797: PPUSH
8798: CALL_OW 94
// if tick <= 60 60$00 then
8802: LD_OWVAR 1
8806: PUSH
8807: LD_INT 126000
8809: LESSEQUAL
8810: IFFALSE 8819
// SetAchievement ( ACH_ASPEED_13 ) ;
8812: LD_STRING ACH_ASPEED_13
8814: PPUSH
8815: CALL_OW 543
// if burlakStatus = 1 then
8819: LD_EXP 28
8823: PUSH
8824: LD_INT 1
8826: EQUAL
8827: IFFALSE 8849
// begin m1 := true ;
8829: LD_ADDR_VAR 0 1
8833: PUSH
8834: LD_INT 1
8836: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
8837: LD_STRING Burlak
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: CALL_OW 101
// end else
8847: GO 8860
// begin AddMedal ( Burlak , - 1 ) ;
8849: LD_STRING Burlak
8851: PPUSH
8852: LD_INT 1
8854: NEG
8855: PPUSH
8856: CALL_OW 101
// end ; if IsOk ( Stevens ) then
8860: LD_EXP 2
8864: PPUSH
8865: CALL_OW 302
8869: IFFALSE 8891
// begin m2 := true ;
8871: LD_ADDR_VAR 0 2
8875: PUSH
8876: LD_INT 1
8878: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
8879: LD_STRING Stevens
8881: PPUSH
8882: LD_INT 1
8884: PPUSH
8885: CALL_OW 101
// end else
8889: GO 8902
// begin AddMedal ( Stevens , - 1 ) ;
8891: LD_STRING Stevens
8893: PPUSH
8894: LD_INT 1
8896: NEG
8897: PPUSH
8898: CALL_OW 101
// end ; if radarOnSpot = 1 then
8902: LD_EXP 30
8906: PUSH
8907: LD_INT 1
8909: EQUAL
8910: IFFALSE 8932
// begin m3 := true ;
8912: LD_ADDR_VAR 0 3
8916: PUSH
8917: LD_INT 1
8919: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
8920: LD_STRING Observation
8922: PPUSH
8923: LD_INT 1
8925: PPUSH
8926: CALL_OW 101
// end else
8930: GO 8943
// begin AddMedal ( Observation , - 1 ) ;
8932: LD_STRING Observation
8934: PPUSH
8935: LD_INT 1
8937: NEG
8938: PPUSH
8939: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
8943: LD_VAR 0 1
8947: PUSH
8948: LD_VAR 0 2
8952: AND
8953: PUSH
8954: LD_VAR 0 3
8958: AND
8959: PUSH
8960: LD_OWVAR 67
8964: PUSH
8965: LD_INT 3
8967: GREATEREQUAL
8968: AND
8969: IFFALSE 8981
// SetAchievementEX ( ACH_AMER , 13 ) ;
8971: LD_STRING ACH_AMER
8973: PPUSH
8974: LD_INT 13
8976: PPUSH
8977: CALL_OW 564
// GiveMedals ( MAIN ) ;
8981: LD_STRING MAIN
8983: PPUSH
8984: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
8988: LD_EXP 28
8992: PPUSH
8993: LD_STRING 13_BurlakStatus_1
8995: PPUSH
8996: CALL_OW 39
// if IsLive ( Stevens ) then
9000: LD_EXP 2
9004: PPUSH
9005: CALL_OW 300
9009: IFFALSE 9023
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9011: LD_INT 1
9013: PPUSH
9014: LD_STRING 13_StevensStatus_1
9016: PPUSH
9017: CALL_OW 39
9021: GO 9033
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9023: LD_INT 0
9025: PPUSH
9026: LD_STRING 13_StevensStatus_1
9028: PPUSH
9029: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9033: LD_INT 22
9035: PUSH
9036: LD_INT 1
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: LD_INT 21
9045: PUSH
9046: LD_INT 1
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: PUSH
9053: LD_INT 2
9055: PUSH
9056: LD_INT 25
9058: PUSH
9059: LD_INT 1
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: PUSH
9066: LD_INT 25
9068: PUSH
9069: LD_INT 2
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PUSH
9076: LD_INT 25
9078: PUSH
9079: LD_INT 3
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 25
9088: PUSH
9089: LD_INT 4
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: LD_INT 25
9098: PUSH
9099: LD_INT 5
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 25
9108: PUSH
9109: LD_INT 8
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: PPUSH
9130: CALL_OW 69
9134: PPUSH
9135: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9139: LD_EXP 1
9143: PPUSH
9144: LD_EXP 34
9148: PUSH
9149: LD_STRING JMM
9151: STR
9152: PPUSH
9153: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9157: LD_EXP 8
9161: PPUSH
9162: LD_EXP 34
9166: PUSH
9167: LD_STRING Brown
9169: STR
9170: PPUSH
9171: CALL 8648 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9175: LD_EXP 4
9179: PPUSH
9180: LD_EXP 34
9184: PUSH
9185: LD_STRING Donaldson
9187: STR
9188: PPUSH
9189: CALL 8648 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9193: LD_EXP 5
9197: PPUSH
9198: LD_EXP 34
9202: PUSH
9203: LD_STRING Bobby
9205: STR
9206: PPUSH
9207: CALL 8648 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9211: LD_EXP 6
9215: PPUSH
9216: LD_EXP 34
9220: PUSH
9221: LD_STRING Cyrus
9223: STR
9224: PPUSH
9225: CALL 8648 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9229: LD_EXP 3
9233: PPUSH
9234: LD_EXP 34
9238: PUSH
9239: LD_STRING Lisa
9241: STR
9242: PPUSH
9243: CALL 8648 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9247: LD_EXP 13
9251: PPUSH
9252: LD_EXP 34
9256: PUSH
9257: LD_STRING Frank
9259: STR
9260: PPUSH
9261: CALL 8648 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9265: LD_EXP 14
9269: PPUSH
9270: LD_EXP 34
9274: PUSH
9275: LD_STRING Kikuchi
9277: STR
9278: PPUSH
9279: CALL 8648 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9283: LD_EXP 10
9287: PPUSH
9288: LD_EXP 34
9292: PUSH
9293: LD_STRING Houten
9295: STR
9296: PPUSH
9297: CALL 8648 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9301: LD_EXP 12
9305: PPUSH
9306: LD_EXP 34
9310: PUSH
9311: LD_STRING Gary
9313: STR
9314: PPUSH
9315: CALL 8648 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9319: LD_EXP 11
9323: PPUSH
9324: LD_EXP 34
9328: PUSH
9329: LD_STRING Cornell
9331: STR
9332: PPUSH
9333: CALL 8648 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9337: LD_EXP 7
9341: PPUSH
9342: LD_EXP 34
9346: PUSH
9347: LD_STRING Denis
9349: STR
9350: PPUSH
9351: CALL 8648 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9355: LD_EXP 9
9359: PPUSH
9360: LD_EXP 34
9364: PUSH
9365: LD_STRING Gladstone
9367: STR
9368: PPUSH
9369: CALL 8648 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9373: LD_EXP 2
9377: PPUSH
9378: LD_EXP 34
9382: PUSH
9383: LD_STRING Stevens
9385: STR
9386: PPUSH
9387: CALL 8648 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9391: LD_INT 50
9393: PUSH
9394: EMPTY
9395: LIST
9396: PUSH
9397: LD_INT 22
9399: PUSH
9400: LD_INT 1
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: LD_INT 21
9409: PUSH
9410: LD_INT 1
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: LD_INT 2
9419: PUSH
9420: LD_INT 25
9422: PUSH
9423: LD_INT 1
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: LD_INT 25
9432: PUSH
9433: LD_INT 2
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PUSH
9440: LD_INT 25
9442: PUSH
9443: LD_INT 3
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PUSH
9450: LD_INT 25
9452: PUSH
9453: LD_INT 4
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PUSH
9460: LD_INT 25
9462: PUSH
9463: LD_INT 5
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: LD_INT 25
9472: PUSH
9473: LD_INT 8
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PUSH
9500: LD_EXP 1
9504: PUSH
9505: LD_EXP 8
9509: PUSH
9510: LD_EXP 4
9514: PUSH
9515: LD_EXP 5
9519: PUSH
9520: LD_EXP 6
9524: PUSH
9525: LD_EXP 3
9529: PUSH
9530: LD_EXP 13
9534: PUSH
9535: LD_EXP 9
9539: PUSH
9540: LD_EXP 14
9544: PUSH
9545: LD_EXP 7
9549: PUSH
9550: LD_EXP 10
9554: PUSH
9555: LD_EXP 12
9559: PUSH
9560: LD_EXP 11
9564: PUSH
9565: LD_EXP 2
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: DIFF
9586: PPUSH
9587: LD_STRING 13_other_survivors
9589: PPUSH
9590: CALL_OW 38
// YouWin ;
9594: CALL_OW 103
// end ; end_of_file
9598: PPOPN 3
9600: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do var i , tmp , yourSiberite ;
9601: LD_EXP 32
9605: PUSH
9606: LD_INT 2
9608: EQUAL
9609: PUSH
9610: LD_INT 34
9612: PUSH
9613: LD_INT 8
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PPUSH
9620: CALL_OW 69
9624: NOT
9625: AND
9626: IFFALSE 9762
9628: GO 9630
9630: DISABLE
9631: LD_INT 0
9633: PPUSH
9634: PPUSH
9635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9636: LD_ADDR_VAR 0 2
9640: PUSH
9641: LD_INT 22
9643: PUSH
9644: LD_INT 1
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 21
9653: PUSH
9654: LD_INT 3
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: LD_INT 2
9663: PUSH
9664: LD_INT 30
9666: PUSH
9667: LD_INT 0
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: PUSH
9674: LD_INT 30
9676: PUSH
9677: LD_INT 1
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: PPUSH
9694: CALL_OW 69
9698: ST_TO_ADDR
// for i in tmp do
9699: LD_ADDR_VAR 0 1
9703: PUSH
9704: LD_VAR 0 2
9708: PUSH
9709: FOR_IN
9710: IFFALSE 9743
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9712: LD_ADDR_VAR 0 3
9716: PUSH
9717: LD_VAR 0 3
9721: PUSH
9722: LD_VAR 0 1
9726: PPUSH
9727: CALL_OW 274
9731: PPUSH
9732: LD_INT 3
9734: PPUSH
9735: CALL_OW 275
9739: PLUS
9740: ST_TO_ADDR
9741: GO 9709
9743: POP
9744: POP
// if yourSiberite < 60 then
9745: LD_VAR 0 3
9749: PUSH
9750: LD_INT 60
9752: LESS
9753: IFFALSE 9762
// YouLost ( siberite ) ;
9755: LD_STRING siberite
9757: PPUSH
9758: CALL_OW 104
// end ; end_of_file
9762: PPOPN 3
9764: END
// every 9 9$00 + 7 7$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 4 do
9765: LD_INT 22
9767: PUSH
9768: LD_INT 8
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: LD_INT 21
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PPUSH
9789: CALL_OW 69
9793: PUSH
9794: LD_INT 4
9796: LESS
9797: IFFALSE 9807
9799: GO 9801
9801: DISABLE
// begin enable ;
9802: ENABLE
// PrepareArabianAttack ;
9803: CALL 4018 0 0
// end ;
9807: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 4 do
9808: LD_EXP 35
9812: PUSH
9813: LD_INT 1
9815: EQUAL
9816: PUSH
9817: LD_INT 22
9819: PUSH
9820: LD_INT 8
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 21
9829: PUSH
9830: LD_INT 1
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PPUSH
9841: CALL_OW 69
9845: PUSH
9846: LD_INT 4
9848: LESS
9849: AND
9850: IFFALSE 9877
9852: GO 9854
9854: DISABLE
// begin wait ( 3 3$30 ) ;
9855: LD_INT 7350
9857: PPUSH
9858: CALL_OW 67
// PrepareRussianAttack ;
9862: CALL 3277 0 0
// wait ( 20 20$00 ) ;
9866: LD_INT 42000
9868: PPUSH
9869: CALL_OW 67
// PrepareRussianAttack ;
9873: CALL 3277 0 0
// end ;
9877: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units ; begin
9878: LD_INT 0
9880: PPUSH
9881: PPUSH
9882: PPUSH
9883: PPUSH
9884: PPUSH
9885: PPUSH
9886: PPUSH
9887: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
9888: LD_ADDR_VAR 0 8
9892: PUSH
9893: LD_INT 22
9895: PUSH
9896: LD_INT 8
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 120
9905: PUSH
9906: LD_INT 10
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PPUSH
9917: CALL_OW 69
9921: ST_TO_ADDR
// if not units then
9922: LD_VAR 0 8
9926: NOT
9927: IFFALSE 9931
// exit ;
9929: GO 10136
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
9931: LD_ADDR_VAR 0 4
9935: PUSH
9936: LD_INT 80
9938: PUSH
9939: LD_INT 60
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 54
9948: PUSH
9949: LD_INT 57
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: LD_INT 55
9958: PUSH
9959: LD_INT 74
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 61
9968: PUSH
9969: LD_INT 85
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
9982: LD_ADDR_VAR 0 5
9986: PUSH
9987: LD_INT 93
9989: PUSH
9990: LD_INT 99
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: LD_INT 85
9999: PUSH
10000: LD_INT 99
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10011: LD_INT 35
10013: PPUSH
10014: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10018: LD_ADDR_VAR 0 6
10022: PUSH
10023: LD_VAR 0 8
10027: PPUSH
10028: LD_INT 21
10030: PUSH
10031: LD_INT 2
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PPUSH
10038: CALL_OW 72
10042: ST_TO_ADDR
// if vehicles then
10043: LD_VAR 0 6
10047: IFFALSE 10063
// AgressiveMove ( vehicles , path ) ;
10049: LD_VAR 0 6
10053: PPUSH
10054: LD_VAR 0 4
10058: PPUSH
10059: CALL 68794 0 2
// infantry := UnitFilter ( units , [ f_type , unit_human ] ) ;
10063: LD_ADDR_VAR 0 7
10067: PUSH
10068: LD_VAR 0 8
10072: PPUSH
10073: LD_INT 21
10075: PUSH
10076: LD_INT 1
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PPUSH
10083: CALL_OW 72
10087: ST_TO_ADDR
// if infantry then
10088: LD_VAR 0 7
10092: IFFALSE 10108
// AgressiveMove ( infantry , path2 ) ;
10094: LD_VAR 0 7
10098: PPUSH
10099: LD_VAR 0 5
10103: PPUSH
10104: CALL 68794 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10108: LD_ADDR_VAR 0 8
10112: PUSH
10113: LD_VAR 0 8
10117: PPUSH
10118: LD_INT 50
10120: PUSH
10121: EMPTY
10122: LIST
10123: PPUSH
10124: CALL_OW 72
10128: ST_TO_ADDR
// until not units ;
10129: LD_VAR 0 8
10133: NOT
10134: IFFALSE 10011
// end ;
10136: LD_VAR 0 1
10140: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10141: LD_INT 0
10143: PPUSH
10144: PPUSH
10145: PPUSH
10146: PPUSH
10147: PPUSH
10148: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10149: LD_ADDR_VAR 0 6
10153: PUSH
10154: LD_INT 22
10156: PUSH
10157: LD_INT 3
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: LD_INT 120
10166: PUSH
10167: LD_INT 10
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PPUSH
10178: CALL_OW 69
10182: ST_TO_ADDR
// if not units then
10183: LD_VAR 0 6
10187: NOT
10188: IFFALSE 10192
// exit ;
10190: GO 10323
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10192: LD_ADDR_VAR 0 4
10196: PUSH
10197: LD_INT 80
10199: PUSH
10200: LD_INT 60
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 54
10209: PUSH
10210: LD_INT 57
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 55
10219: PUSH
10220: LD_INT 74
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: LD_INT 61
10229: PUSH
10230: LD_INT 85
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10243: LD_INT 35
10245: PPUSH
10246: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10250: LD_ADDR_VAR 0 5
10254: PUSH
10255: LD_VAR 0 6
10259: PPUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 2
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PPUSH
10270: CALL_OW 72
10274: ST_TO_ADDR
// if vehicles then
10275: LD_VAR 0 5
10279: IFFALSE 10295
// AgressiveMove ( vehicles , path ) ;
10281: LD_VAR 0 5
10285: PPUSH
10286: LD_VAR 0 4
10290: PPUSH
10291: CALL 68794 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10295: LD_ADDR_VAR 0 6
10299: PUSH
10300: LD_VAR 0 6
10304: PPUSH
10305: LD_INT 50
10307: PUSH
10308: EMPTY
10309: LIST
10310: PPUSH
10311: CALL_OW 72
10315: ST_TO_ADDR
// until not units ;
10316: LD_VAR 0 6
10320: NOT
10321: IFFALSE 10243
// end ; end_of_file
10323: LD_VAR 0 1
10327: RET
// every 1 1$0 trigger GetListOfCratesInArea ( CratesArea ) < 40 do
10328: LD_INT 13
10330: PPUSH
10331: CALL_OW 435
10335: PUSH
10336: LD_INT 40
10338: LESS
10339: IFFALSE 10366
10341: GO 10343
10343: DISABLE
// begin enable ;
10344: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10345: LD_INT 3
10347: PPUSH
10348: LD_INT 5
10350: PPUSH
10351: CALL_OW 12
10355: PPUSH
10356: LD_INT 13
10358: PPUSH
10359: LD_INT 1
10361: PPUSH
10362: CALL_OW 55
// end ; end_of_file
10366: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10367: LD_INT 0
10369: PPUSH
// ar_miner := 81 ;
10370: LD_ADDR_EXP 52
10374: PUSH
10375: LD_INT 81
10377: ST_TO_ADDR
// ar_crane := 88 ;
10378: LD_ADDR_EXP 51
10382: PUSH
10383: LD_INT 88
10385: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10386: LD_ADDR_EXP 46
10390: PUSH
10391: LD_INT 89
10393: ST_TO_ADDR
// us_hack := 99 ;
10394: LD_ADDR_EXP 47
10398: PUSH
10399: LD_INT 99
10401: ST_TO_ADDR
// us_artillery := 97 ;
10402: LD_ADDR_EXP 48
10406: PUSH
10407: LD_INT 97
10409: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10410: LD_ADDR_EXP 49
10414: PUSH
10415: LD_INT 91
10417: ST_TO_ADDR
// ar_mortar := 92 ;
10418: LD_ADDR_EXP 50
10422: PUSH
10423: LD_INT 92
10425: ST_TO_ADDR
// ru_flamethrower := 93 ;
10426: LD_ADDR_EXP 53
10430: PUSH
10431: LD_INT 93
10433: ST_TO_ADDR
// ru_radar := 98 ;
10434: LD_ADDR_EXP 45
10438: PUSH
10439: LD_INT 98
10441: ST_TO_ADDR
// tech_Artillery := 80 ;
10442: LD_ADDR_EXP 54
10446: PUSH
10447: LD_INT 80
10449: ST_TO_ADDR
// tech_RadMat := 81 ;
10450: LD_ADDR_EXP 55
10454: PUSH
10455: LD_INT 81
10457: ST_TO_ADDR
// tech_BasicTools := 82 ;
10458: LD_ADDR_EXP 56
10462: PUSH
10463: LD_INT 82
10465: ST_TO_ADDR
// tech_Cargo := 83 ;
10466: LD_ADDR_EXP 57
10470: PUSH
10471: LD_INT 83
10473: ST_TO_ADDR
// tech_Track := 84 ;
10474: LD_ADDR_EXP 58
10478: PUSH
10479: LD_INT 84
10481: ST_TO_ADDR
// tech_Crane := 85 ;
10482: LD_ADDR_EXP 59
10486: PUSH
10487: LD_INT 85
10489: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10490: LD_ADDR_EXP 60
10494: PUSH
10495: LD_INT 86
10497: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10498: LD_ADDR_EXP 61
10502: PUSH
10503: LD_INT 87
10505: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10506: LD_ADDR_EXP 62
10510: PUSH
10511: LD_INT 88
10513: ST_TO_ADDR
// class_mastodont := 31 ;
10514: LD_ADDR_EXP 63
10518: PUSH
10519: LD_INT 31
10521: ST_TO_ADDR
// class_horse := 21 ;
10522: LD_ADDR_EXP 64
10526: PUSH
10527: LD_INT 21
10529: ST_TO_ADDR
// end ;
10530: LD_VAR 0 1
10534: RET
// every 1 do
10535: GO 10537
10537: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10538: CALL 10367 0 0
10542: END
// every 0 0$1 do
10543: GO 10545
10545: DISABLE
// begin enable ;
10546: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10547: LD_STRING updateTimer(
10549: PUSH
10550: LD_OWVAR 1
10554: STR
10555: PUSH
10556: LD_STRING );
10558: STR
10559: PPUSH
10560: CALL_OW 559
// end ;
10564: END
// export function SOS_MapStart ( ) ; begin
10565: LD_INT 0
10567: PPUSH
// if streamModeActive then
10568: LD_EXP 65
10572: IFFALSE 10581
// DefineStreamItems ( true ) ;
10574: LD_INT 1
10576: PPUSH
10577: CALL 12231 0 1
// UpdateFactoryWaypoints ( ) ;
10581: CALL 25815 0 0
// end ;
10585: LD_VAR 0 1
10589: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10590: LD_INT 0
10592: PPUSH
// if p2 = 100 then
10593: LD_VAR 0 2
10597: PUSH
10598: LD_INT 100
10600: EQUAL
10601: IFFALSE 11604
// begin if not StreamModeActive then
10603: LD_EXP 65
10607: NOT
10608: IFFALSE 10618
// StreamModeActive := true ;
10610: LD_ADDR_EXP 65
10614: PUSH
10615: LD_INT 1
10617: ST_TO_ADDR
// if p3 = 0 then
10618: LD_VAR 0 3
10622: PUSH
10623: LD_INT 0
10625: EQUAL
10626: IFFALSE 10632
// InitStreamMode ;
10628: CALL 11767 0 0
// if p3 = 1 then
10632: LD_VAR 0 3
10636: PUSH
10637: LD_INT 1
10639: EQUAL
10640: IFFALSE 10650
// sRocket := true ;
10642: LD_ADDR_EXP 70
10646: PUSH
10647: LD_INT 1
10649: ST_TO_ADDR
// if p3 = 2 then
10650: LD_VAR 0 3
10654: PUSH
10655: LD_INT 2
10657: EQUAL
10658: IFFALSE 10668
// sSpeed := true ;
10660: LD_ADDR_EXP 69
10664: PUSH
10665: LD_INT 1
10667: ST_TO_ADDR
// if p3 = 3 then
10668: LD_VAR 0 3
10672: PUSH
10673: LD_INT 3
10675: EQUAL
10676: IFFALSE 10686
// sEngine := true ;
10678: LD_ADDR_EXP 71
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// if p3 = 4 then
10686: LD_VAR 0 3
10690: PUSH
10691: LD_INT 4
10693: EQUAL
10694: IFFALSE 10704
// sSpec := true ;
10696: LD_ADDR_EXP 68
10700: PUSH
10701: LD_INT 1
10703: ST_TO_ADDR
// if p3 = 5 then
10704: LD_VAR 0 3
10708: PUSH
10709: LD_INT 5
10711: EQUAL
10712: IFFALSE 10722
// sLevel := true ;
10714: LD_ADDR_EXP 72
10718: PUSH
10719: LD_INT 1
10721: ST_TO_ADDR
// if p3 = 6 then
10722: LD_VAR 0 3
10726: PUSH
10727: LD_INT 6
10729: EQUAL
10730: IFFALSE 10740
// sArmoury := true ;
10732: LD_ADDR_EXP 73
10736: PUSH
10737: LD_INT 1
10739: ST_TO_ADDR
// if p3 = 7 then
10740: LD_VAR 0 3
10744: PUSH
10745: LD_INT 7
10747: EQUAL
10748: IFFALSE 10758
// sRadar := true ;
10750: LD_ADDR_EXP 74
10754: PUSH
10755: LD_INT 1
10757: ST_TO_ADDR
// if p3 = 8 then
10758: LD_VAR 0 3
10762: PUSH
10763: LD_INT 8
10765: EQUAL
10766: IFFALSE 10776
// sBunker := true ;
10768: LD_ADDR_EXP 75
10772: PUSH
10773: LD_INT 1
10775: ST_TO_ADDR
// if p3 = 9 then
10776: LD_VAR 0 3
10780: PUSH
10781: LD_INT 9
10783: EQUAL
10784: IFFALSE 10794
// sHack := true ;
10786: LD_ADDR_EXP 76
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// if p3 = 10 then
10794: LD_VAR 0 3
10798: PUSH
10799: LD_INT 10
10801: EQUAL
10802: IFFALSE 10812
// sFire := true ;
10804: LD_ADDR_EXP 77
10808: PUSH
10809: LD_INT 1
10811: ST_TO_ADDR
// if p3 = 11 then
10812: LD_VAR 0 3
10816: PUSH
10817: LD_INT 11
10819: EQUAL
10820: IFFALSE 10830
// sRefresh := true ;
10822: LD_ADDR_EXP 78
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// if p3 = 12 then
10830: LD_VAR 0 3
10834: PUSH
10835: LD_INT 12
10837: EQUAL
10838: IFFALSE 10848
// sExp := true ;
10840: LD_ADDR_EXP 79
10844: PUSH
10845: LD_INT 1
10847: ST_TO_ADDR
// if p3 = 13 then
10848: LD_VAR 0 3
10852: PUSH
10853: LD_INT 13
10855: EQUAL
10856: IFFALSE 10866
// sDepot := true ;
10858: LD_ADDR_EXP 80
10862: PUSH
10863: LD_INT 1
10865: ST_TO_ADDR
// if p3 = 14 then
10866: LD_VAR 0 3
10870: PUSH
10871: LD_INT 14
10873: EQUAL
10874: IFFALSE 10884
// sFlag := true ;
10876: LD_ADDR_EXP 81
10880: PUSH
10881: LD_INT 1
10883: ST_TO_ADDR
// if p3 = 15 then
10884: LD_VAR 0 3
10888: PUSH
10889: LD_INT 15
10891: EQUAL
10892: IFFALSE 10902
// sKamikadze := true ;
10894: LD_ADDR_EXP 89
10898: PUSH
10899: LD_INT 1
10901: ST_TO_ADDR
// if p3 = 16 then
10902: LD_VAR 0 3
10906: PUSH
10907: LD_INT 16
10909: EQUAL
10910: IFFALSE 10920
// sTroll := true ;
10912: LD_ADDR_EXP 90
10916: PUSH
10917: LD_INT 1
10919: ST_TO_ADDR
// if p3 = 17 then
10920: LD_VAR 0 3
10924: PUSH
10925: LD_INT 17
10927: EQUAL
10928: IFFALSE 10938
// sSlow := true ;
10930: LD_ADDR_EXP 91
10934: PUSH
10935: LD_INT 1
10937: ST_TO_ADDR
// if p3 = 18 then
10938: LD_VAR 0 3
10942: PUSH
10943: LD_INT 18
10945: EQUAL
10946: IFFALSE 10956
// sLack := true ;
10948: LD_ADDR_EXP 92
10952: PUSH
10953: LD_INT 1
10955: ST_TO_ADDR
// if p3 = 19 then
10956: LD_VAR 0 3
10960: PUSH
10961: LD_INT 19
10963: EQUAL
10964: IFFALSE 10974
// sTank := true ;
10966: LD_ADDR_EXP 94
10970: PUSH
10971: LD_INT 1
10973: ST_TO_ADDR
// if p3 = 20 then
10974: LD_VAR 0 3
10978: PUSH
10979: LD_INT 20
10981: EQUAL
10982: IFFALSE 10992
// sRemote := true ;
10984: LD_ADDR_EXP 95
10988: PUSH
10989: LD_INT 1
10991: ST_TO_ADDR
// if p3 = 21 then
10992: LD_VAR 0 3
10996: PUSH
10997: LD_INT 21
10999: EQUAL
11000: IFFALSE 11010
// sPowell := true ;
11002: LD_ADDR_EXP 96
11006: PUSH
11007: LD_INT 1
11009: ST_TO_ADDR
// if p3 = 22 then
11010: LD_VAR 0 3
11014: PUSH
11015: LD_INT 22
11017: EQUAL
11018: IFFALSE 11028
// sTeleport := true ;
11020: LD_ADDR_EXP 99
11024: PUSH
11025: LD_INT 1
11027: ST_TO_ADDR
// if p3 = 23 then
11028: LD_VAR 0 3
11032: PUSH
11033: LD_INT 23
11035: EQUAL
11036: IFFALSE 11046
// sOilTower := true ;
11038: LD_ADDR_EXP 101
11042: PUSH
11043: LD_INT 1
11045: ST_TO_ADDR
// if p3 = 24 then
11046: LD_VAR 0 3
11050: PUSH
11051: LD_INT 24
11053: EQUAL
11054: IFFALSE 11064
// sShovel := true ;
11056: LD_ADDR_EXP 102
11060: PUSH
11061: LD_INT 1
11063: ST_TO_ADDR
// if p3 = 25 then
11064: LD_VAR 0 3
11068: PUSH
11069: LD_INT 25
11071: EQUAL
11072: IFFALSE 11082
// sSheik := true ;
11074: LD_ADDR_EXP 103
11078: PUSH
11079: LD_INT 1
11081: ST_TO_ADDR
// if p3 = 26 then
11082: LD_VAR 0 3
11086: PUSH
11087: LD_INT 26
11089: EQUAL
11090: IFFALSE 11100
// sEarthquake := true ;
11092: LD_ADDR_EXP 105
11096: PUSH
11097: LD_INT 1
11099: ST_TO_ADDR
// if p3 = 27 then
11100: LD_VAR 0 3
11104: PUSH
11105: LD_INT 27
11107: EQUAL
11108: IFFALSE 11118
// sAI := true ;
11110: LD_ADDR_EXP 106
11114: PUSH
11115: LD_INT 1
11117: ST_TO_ADDR
// if p3 = 28 then
11118: LD_VAR 0 3
11122: PUSH
11123: LD_INT 28
11125: EQUAL
11126: IFFALSE 11136
// sCargo := true ;
11128: LD_ADDR_EXP 109
11132: PUSH
11133: LD_INT 1
11135: ST_TO_ADDR
// if p3 = 29 then
11136: LD_VAR 0 3
11140: PUSH
11141: LD_INT 29
11143: EQUAL
11144: IFFALSE 11154
// sDLaser := true ;
11146: LD_ADDR_EXP 110
11150: PUSH
11151: LD_INT 1
11153: ST_TO_ADDR
// if p3 = 30 then
11154: LD_VAR 0 3
11158: PUSH
11159: LD_INT 30
11161: EQUAL
11162: IFFALSE 11172
// sExchange := true ;
11164: LD_ADDR_EXP 111
11168: PUSH
11169: LD_INT 1
11171: ST_TO_ADDR
// if p3 = 31 then
11172: LD_VAR 0 3
11176: PUSH
11177: LD_INT 31
11179: EQUAL
11180: IFFALSE 11190
// sFac := true ;
11182: LD_ADDR_EXP 112
11186: PUSH
11187: LD_INT 1
11189: ST_TO_ADDR
// if p3 = 32 then
11190: LD_VAR 0 3
11194: PUSH
11195: LD_INT 32
11197: EQUAL
11198: IFFALSE 11208
// sPower := true ;
11200: LD_ADDR_EXP 113
11204: PUSH
11205: LD_INT 1
11207: ST_TO_ADDR
// if p3 = 33 then
11208: LD_VAR 0 3
11212: PUSH
11213: LD_INT 33
11215: EQUAL
11216: IFFALSE 11226
// sRandom := true ;
11218: LD_ADDR_EXP 114
11222: PUSH
11223: LD_INT 1
11225: ST_TO_ADDR
// if p3 = 34 then
11226: LD_VAR 0 3
11230: PUSH
11231: LD_INT 34
11233: EQUAL
11234: IFFALSE 11244
// sShield := true ;
11236: LD_ADDR_EXP 115
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// if p3 = 35 then
11244: LD_VAR 0 3
11248: PUSH
11249: LD_INT 35
11251: EQUAL
11252: IFFALSE 11262
// sTime := true ;
11254: LD_ADDR_EXP 116
11258: PUSH
11259: LD_INT 1
11261: ST_TO_ADDR
// if p3 = 36 then
11262: LD_VAR 0 3
11266: PUSH
11267: LD_INT 36
11269: EQUAL
11270: IFFALSE 11280
// sTools := true ;
11272: LD_ADDR_EXP 117
11276: PUSH
11277: LD_INT 1
11279: ST_TO_ADDR
// if p3 = 101 then
11280: LD_VAR 0 3
11284: PUSH
11285: LD_INT 101
11287: EQUAL
11288: IFFALSE 11298
// sSold := true ;
11290: LD_ADDR_EXP 82
11294: PUSH
11295: LD_INT 1
11297: ST_TO_ADDR
// if p3 = 102 then
11298: LD_VAR 0 3
11302: PUSH
11303: LD_INT 102
11305: EQUAL
11306: IFFALSE 11316
// sDiff := true ;
11308: LD_ADDR_EXP 83
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// if p3 = 103 then
11316: LD_VAR 0 3
11320: PUSH
11321: LD_INT 103
11323: EQUAL
11324: IFFALSE 11334
// sFog := true ;
11326: LD_ADDR_EXP 86
11330: PUSH
11331: LD_INT 1
11333: ST_TO_ADDR
// if p3 = 104 then
11334: LD_VAR 0 3
11338: PUSH
11339: LD_INT 104
11341: EQUAL
11342: IFFALSE 11352
// sReset := true ;
11344: LD_ADDR_EXP 87
11348: PUSH
11349: LD_INT 1
11351: ST_TO_ADDR
// if p3 = 105 then
11352: LD_VAR 0 3
11356: PUSH
11357: LD_INT 105
11359: EQUAL
11360: IFFALSE 11370
// sSun := true ;
11362: LD_ADDR_EXP 88
11366: PUSH
11367: LD_INT 1
11369: ST_TO_ADDR
// if p3 = 106 then
11370: LD_VAR 0 3
11374: PUSH
11375: LD_INT 106
11377: EQUAL
11378: IFFALSE 11388
// sTiger := true ;
11380: LD_ADDR_EXP 84
11384: PUSH
11385: LD_INT 1
11387: ST_TO_ADDR
// if p3 = 107 then
11388: LD_VAR 0 3
11392: PUSH
11393: LD_INT 107
11395: EQUAL
11396: IFFALSE 11406
// sBomb := true ;
11398: LD_ADDR_EXP 85
11402: PUSH
11403: LD_INT 1
11405: ST_TO_ADDR
// if p3 = 108 then
11406: LD_VAR 0 3
11410: PUSH
11411: LD_INT 108
11413: EQUAL
11414: IFFALSE 11424
// sWound := true ;
11416: LD_ADDR_EXP 93
11420: PUSH
11421: LD_INT 1
11423: ST_TO_ADDR
// if p3 = 109 then
11424: LD_VAR 0 3
11428: PUSH
11429: LD_INT 109
11431: EQUAL
11432: IFFALSE 11442
// sBetray := true ;
11434: LD_ADDR_EXP 97
11438: PUSH
11439: LD_INT 1
11441: ST_TO_ADDR
// if p3 = 110 then
11442: LD_VAR 0 3
11446: PUSH
11447: LD_INT 110
11449: EQUAL
11450: IFFALSE 11460
// sContamin := true ;
11452: LD_ADDR_EXP 98
11456: PUSH
11457: LD_INT 1
11459: ST_TO_ADDR
// if p3 = 111 then
11460: LD_VAR 0 3
11464: PUSH
11465: LD_INT 111
11467: EQUAL
11468: IFFALSE 11478
// sOil := true ;
11470: LD_ADDR_EXP 100
11474: PUSH
11475: LD_INT 1
11477: ST_TO_ADDR
// if p3 = 112 then
11478: LD_VAR 0 3
11482: PUSH
11483: LD_INT 112
11485: EQUAL
11486: IFFALSE 11496
// sStu := true ;
11488: LD_ADDR_EXP 104
11492: PUSH
11493: LD_INT 1
11495: ST_TO_ADDR
// if p3 = 113 then
11496: LD_VAR 0 3
11500: PUSH
11501: LD_INT 113
11503: EQUAL
11504: IFFALSE 11514
// sBazooka := true ;
11506: LD_ADDR_EXP 107
11510: PUSH
11511: LD_INT 1
11513: ST_TO_ADDR
// if p3 = 114 then
11514: LD_VAR 0 3
11518: PUSH
11519: LD_INT 114
11521: EQUAL
11522: IFFALSE 11532
// sMortar := true ;
11524: LD_ADDR_EXP 108
11528: PUSH
11529: LD_INT 1
11531: ST_TO_ADDR
// if p3 = 115 then
11532: LD_VAR 0 3
11536: PUSH
11537: LD_INT 115
11539: EQUAL
11540: IFFALSE 11550
// sRanger := true ;
11542: LD_ADDR_EXP 118
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
// if p3 = 116 then
11550: LD_VAR 0 3
11554: PUSH
11555: LD_INT 116
11557: EQUAL
11558: IFFALSE 11568
// sComputer := true ;
11560: LD_ADDR_EXP 119
11564: PUSH
11565: LD_INT 1
11567: ST_TO_ADDR
// if p3 = 117 then
11568: LD_VAR 0 3
11572: PUSH
11573: LD_INT 117
11575: EQUAL
11576: IFFALSE 11586
// s30 := true ;
11578: LD_ADDR_EXP 120
11582: PUSH
11583: LD_INT 1
11585: ST_TO_ADDR
// if p3 = 118 then
11586: LD_VAR 0 3
11590: PUSH
11591: LD_INT 118
11593: EQUAL
11594: IFFALSE 11604
// s60 := true ;
11596: LD_ADDR_EXP 121
11600: PUSH
11601: LD_INT 1
11603: ST_TO_ADDR
// end ; if p2 = 101 then
11604: LD_VAR 0 2
11608: PUSH
11609: LD_INT 101
11611: EQUAL
11612: IFFALSE 11740
// begin case p3 of 1 :
11614: LD_VAR 0 3
11618: PUSH
11619: LD_INT 1
11621: DOUBLE
11622: EQUAL
11623: IFTRUE 11627
11625: GO 11634
11627: POP
// hHackUnlimitedResources ; 2 :
11628: CALL 23838 0 0
11632: GO 11740
11634: LD_INT 2
11636: DOUBLE
11637: EQUAL
11638: IFTRUE 11642
11640: GO 11649
11642: POP
// hHackSetLevel10 ; 3 :
11643: CALL 23971 0 0
11647: GO 11740
11649: LD_INT 3
11651: DOUBLE
11652: EQUAL
11653: IFTRUE 11657
11655: GO 11664
11657: POP
// hHackSetLevel10YourUnits ; 4 :
11658: CALL 24056 0 0
11662: GO 11740
11664: LD_INT 4
11666: DOUBLE
11667: EQUAL
11668: IFTRUE 11672
11670: GO 11679
11672: POP
// hHackInvincible ; 5 :
11673: CALL 24504 0 0
11677: GO 11740
11679: LD_INT 5
11681: DOUBLE
11682: EQUAL
11683: IFTRUE 11687
11685: GO 11694
11687: POP
// hHackInvisible ; 6 :
11688: CALL 24615 0 0
11692: GO 11740
11694: LD_INT 6
11696: DOUBLE
11697: EQUAL
11698: IFTRUE 11702
11700: GO 11709
11702: POP
// hHackChangeYourSide ; 7 :
11703: CALL 24672 0 0
11707: GO 11740
11709: LD_INT 7
11711: DOUBLE
11712: EQUAL
11713: IFTRUE 11717
11715: GO 11724
11717: POP
// hHackChangeUnitSide ; 8 :
11718: CALL 24714 0 0
11722: GO 11740
11724: LD_INT 8
11726: DOUBLE
11727: EQUAL
11728: IFTRUE 11732
11730: GO 11739
11732: POP
// hHackFog ; end ;
11733: CALL 24815 0 0
11737: GO 11740
11739: POP
// end ; end ;
11740: LD_VAR 0 7
11744: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11745: GO 11747
11747: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11748: LD_STRING initStreamRollete();
11750: PPUSH
11751: CALL_OW 559
// InitStreamMode ;
11755: CALL 11767 0 0
// DefineStreamItems ( false ) ;
11759: LD_INT 0
11761: PPUSH
11762: CALL 12231 0 1
// end ;
11766: END
// function InitStreamMode ; begin
11767: LD_INT 0
11769: PPUSH
// streamModeActive := false ;
11770: LD_ADDR_EXP 65
11774: PUSH
11775: LD_INT 0
11777: ST_TO_ADDR
// normalCounter := 36 ;
11778: LD_ADDR_EXP 66
11782: PUSH
11783: LD_INT 36
11785: ST_TO_ADDR
// hardcoreCounter := 18 ;
11786: LD_ADDR_EXP 67
11790: PUSH
11791: LD_INT 18
11793: ST_TO_ADDR
// sRocket := false ;
11794: LD_ADDR_EXP 70
11798: PUSH
11799: LD_INT 0
11801: ST_TO_ADDR
// sSpeed := false ;
11802: LD_ADDR_EXP 69
11806: PUSH
11807: LD_INT 0
11809: ST_TO_ADDR
// sEngine := false ;
11810: LD_ADDR_EXP 71
11814: PUSH
11815: LD_INT 0
11817: ST_TO_ADDR
// sSpec := false ;
11818: LD_ADDR_EXP 68
11822: PUSH
11823: LD_INT 0
11825: ST_TO_ADDR
// sLevel := false ;
11826: LD_ADDR_EXP 72
11830: PUSH
11831: LD_INT 0
11833: ST_TO_ADDR
// sArmoury := false ;
11834: LD_ADDR_EXP 73
11838: PUSH
11839: LD_INT 0
11841: ST_TO_ADDR
// sRadar := false ;
11842: LD_ADDR_EXP 74
11846: PUSH
11847: LD_INT 0
11849: ST_TO_ADDR
// sBunker := false ;
11850: LD_ADDR_EXP 75
11854: PUSH
11855: LD_INT 0
11857: ST_TO_ADDR
// sHack := false ;
11858: LD_ADDR_EXP 76
11862: PUSH
11863: LD_INT 0
11865: ST_TO_ADDR
// sFire := false ;
11866: LD_ADDR_EXP 77
11870: PUSH
11871: LD_INT 0
11873: ST_TO_ADDR
// sRefresh := false ;
11874: LD_ADDR_EXP 78
11878: PUSH
11879: LD_INT 0
11881: ST_TO_ADDR
// sExp := false ;
11882: LD_ADDR_EXP 79
11886: PUSH
11887: LD_INT 0
11889: ST_TO_ADDR
// sDepot := false ;
11890: LD_ADDR_EXP 80
11894: PUSH
11895: LD_INT 0
11897: ST_TO_ADDR
// sFlag := false ;
11898: LD_ADDR_EXP 81
11902: PUSH
11903: LD_INT 0
11905: ST_TO_ADDR
// sKamikadze := false ;
11906: LD_ADDR_EXP 89
11910: PUSH
11911: LD_INT 0
11913: ST_TO_ADDR
// sTroll := false ;
11914: LD_ADDR_EXP 90
11918: PUSH
11919: LD_INT 0
11921: ST_TO_ADDR
// sSlow := false ;
11922: LD_ADDR_EXP 91
11926: PUSH
11927: LD_INT 0
11929: ST_TO_ADDR
// sLack := false ;
11930: LD_ADDR_EXP 92
11934: PUSH
11935: LD_INT 0
11937: ST_TO_ADDR
// sTank := false ;
11938: LD_ADDR_EXP 94
11942: PUSH
11943: LD_INT 0
11945: ST_TO_ADDR
// sRemote := false ;
11946: LD_ADDR_EXP 95
11950: PUSH
11951: LD_INT 0
11953: ST_TO_ADDR
// sPowell := false ;
11954: LD_ADDR_EXP 96
11958: PUSH
11959: LD_INT 0
11961: ST_TO_ADDR
// sTeleport := false ;
11962: LD_ADDR_EXP 99
11966: PUSH
11967: LD_INT 0
11969: ST_TO_ADDR
// sOilTower := false ;
11970: LD_ADDR_EXP 101
11974: PUSH
11975: LD_INT 0
11977: ST_TO_ADDR
// sShovel := false ;
11978: LD_ADDR_EXP 102
11982: PUSH
11983: LD_INT 0
11985: ST_TO_ADDR
// sSheik := false ;
11986: LD_ADDR_EXP 103
11990: PUSH
11991: LD_INT 0
11993: ST_TO_ADDR
// sEarthquake := false ;
11994: LD_ADDR_EXP 105
11998: PUSH
11999: LD_INT 0
12001: ST_TO_ADDR
// sAI := false ;
12002: LD_ADDR_EXP 106
12006: PUSH
12007: LD_INT 0
12009: ST_TO_ADDR
// sCargo := false ;
12010: LD_ADDR_EXP 109
12014: PUSH
12015: LD_INT 0
12017: ST_TO_ADDR
// sDLaser := false ;
12018: LD_ADDR_EXP 110
12022: PUSH
12023: LD_INT 0
12025: ST_TO_ADDR
// sExchange := false ;
12026: LD_ADDR_EXP 111
12030: PUSH
12031: LD_INT 0
12033: ST_TO_ADDR
// sFac := false ;
12034: LD_ADDR_EXP 112
12038: PUSH
12039: LD_INT 0
12041: ST_TO_ADDR
// sPower := false ;
12042: LD_ADDR_EXP 113
12046: PUSH
12047: LD_INT 0
12049: ST_TO_ADDR
// sRandom := false ;
12050: LD_ADDR_EXP 114
12054: PUSH
12055: LD_INT 0
12057: ST_TO_ADDR
// sShield := false ;
12058: LD_ADDR_EXP 115
12062: PUSH
12063: LD_INT 0
12065: ST_TO_ADDR
// sTime := false ;
12066: LD_ADDR_EXP 116
12070: PUSH
12071: LD_INT 0
12073: ST_TO_ADDR
// sTools := false ;
12074: LD_ADDR_EXP 117
12078: PUSH
12079: LD_INT 0
12081: ST_TO_ADDR
// sSold := false ;
12082: LD_ADDR_EXP 82
12086: PUSH
12087: LD_INT 0
12089: ST_TO_ADDR
// sDiff := false ;
12090: LD_ADDR_EXP 83
12094: PUSH
12095: LD_INT 0
12097: ST_TO_ADDR
// sFog := false ;
12098: LD_ADDR_EXP 86
12102: PUSH
12103: LD_INT 0
12105: ST_TO_ADDR
// sReset := false ;
12106: LD_ADDR_EXP 87
12110: PUSH
12111: LD_INT 0
12113: ST_TO_ADDR
// sSun := false ;
12114: LD_ADDR_EXP 88
12118: PUSH
12119: LD_INT 0
12121: ST_TO_ADDR
// sTiger := false ;
12122: LD_ADDR_EXP 84
12126: PUSH
12127: LD_INT 0
12129: ST_TO_ADDR
// sBomb := false ;
12130: LD_ADDR_EXP 85
12134: PUSH
12135: LD_INT 0
12137: ST_TO_ADDR
// sWound := false ;
12138: LD_ADDR_EXP 93
12142: PUSH
12143: LD_INT 0
12145: ST_TO_ADDR
// sBetray := false ;
12146: LD_ADDR_EXP 97
12150: PUSH
12151: LD_INT 0
12153: ST_TO_ADDR
// sContamin := false ;
12154: LD_ADDR_EXP 98
12158: PUSH
12159: LD_INT 0
12161: ST_TO_ADDR
// sOil := false ;
12162: LD_ADDR_EXP 100
12166: PUSH
12167: LD_INT 0
12169: ST_TO_ADDR
// sStu := false ;
12170: LD_ADDR_EXP 104
12174: PUSH
12175: LD_INT 0
12177: ST_TO_ADDR
// sBazooka := false ;
12178: LD_ADDR_EXP 107
12182: PUSH
12183: LD_INT 0
12185: ST_TO_ADDR
// sMortar := false ;
12186: LD_ADDR_EXP 108
12190: PUSH
12191: LD_INT 0
12193: ST_TO_ADDR
// sRanger := false ;
12194: LD_ADDR_EXP 118
12198: PUSH
12199: LD_INT 0
12201: ST_TO_ADDR
// sComputer := false ;
12202: LD_ADDR_EXP 119
12206: PUSH
12207: LD_INT 0
12209: ST_TO_ADDR
// s30 := false ;
12210: LD_ADDR_EXP 120
12214: PUSH
12215: LD_INT 0
12217: ST_TO_ADDR
// s60 := false ;
12218: LD_ADDR_EXP 121
12222: PUSH
12223: LD_INT 0
12225: ST_TO_ADDR
// end ;
12226: LD_VAR 0 1
12230: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12231: LD_INT 0
12233: PPUSH
12234: PPUSH
12235: PPUSH
12236: PPUSH
12237: PPUSH
12238: PPUSH
12239: PPUSH
// result := [ ] ;
12240: LD_ADDR_VAR 0 2
12244: PUSH
12245: EMPTY
12246: ST_TO_ADDR
// if campaign_id = 1 then
12247: LD_OWVAR 69
12251: PUSH
12252: LD_INT 1
12254: EQUAL
12255: IFFALSE 15421
// begin case mission_number of 1 :
12257: LD_OWVAR 70
12261: PUSH
12262: LD_INT 1
12264: DOUBLE
12265: EQUAL
12266: IFTRUE 12270
12268: GO 12346
12270: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12271: LD_ADDR_VAR 0 2
12275: PUSH
12276: LD_INT 2
12278: PUSH
12279: LD_INT 4
12281: PUSH
12282: LD_INT 11
12284: PUSH
12285: LD_INT 12
12287: PUSH
12288: LD_INT 15
12290: PUSH
12291: LD_INT 16
12293: PUSH
12294: LD_INT 22
12296: PUSH
12297: LD_INT 23
12299: PUSH
12300: LD_INT 26
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 101
12316: PUSH
12317: LD_INT 102
12319: PUSH
12320: LD_INT 106
12322: PUSH
12323: LD_INT 116
12325: PUSH
12326: LD_INT 117
12328: PUSH
12329: LD_INT 118
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: ST_TO_ADDR
12344: GO 15419
12346: LD_INT 2
12348: DOUBLE
12349: EQUAL
12350: IFTRUE 12354
12352: GO 12438
12354: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12355: LD_ADDR_VAR 0 2
12359: PUSH
12360: LD_INT 2
12362: PUSH
12363: LD_INT 4
12365: PUSH
12366: LD_INT 11
12368: PUSH
12369: LD_INT 12
12371: PUSH
12372: LD_INT 15
12374: PUSH
12375: LD_INT 16
12377: PUSH
12378: LD_INT 22
12380: PUSH
12381: LD_INT 23
12383: PUSH
12384: LD_INT 26
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: PUSH
12398: LD_INT 101
12400: PUSH
12401: LD_INT 102
12403: PUSH
12404: LD_INT 105
12406: PUSH
12407: LD_INT 106
12409: PUSH
12410: LD_INT 108
12412: PUSH
12413: LD_INT 116
12415: PUSH
12416: LD_INT 117
12418: PUSH
12419: LD_INT 118
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: ST_TO_ADDR
12436: GO 15419
12438: LD_INT 3
12440: DOUBLE
12441: EQUAL
12442: IFTRUE 12446
12444: GO 12534
12446: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12447: LD_ADDR_VAR 0 2
12451: PUSH
12452: LD_INT 2
12454: PUSH
12455: LD_INT 4
12457: PUSH
12458: LD_INT 5
12460: PUSH
12461: LD_INT 11
12463: PUSH
12464: LD_INT 12
12466: PUSH
12467: LD_INT 15
12469: PUSH
12470: LD_INT 16
12472: PUSH
12473: LD_INT 22
12475: PUSH
12476: LD_INT 26
12478: PUSH
12479: LD_INT 36
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 101
12496: PUSH
12497: LD_INT 102
12499: PUSH
12500: LD_INT 105
12502: PUSH
12503: LD_INT 106
12505: PUSH
12506: LD_INT 108
12508: PUSH
12509: LD_INT 116
12511: PUSH
12512: LD_INT 117
12514: PUSH
12515: LD_INT 118
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: ST_TO_ADDR
12532: GO 15419
12534: LD_INT 4
12536: DOUBLE
12537: EQUAL
12538: IFTRUE 12542
12540: GO 12638
12542: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12543: LD_ADDR_VAR 0 2
12547: PUSH
12548: LD_INT 2
12550: PUSH
12551: LD_INT 4
12553: PUSH
12554: LD_INT 5
12556: PUSH
12557: LD_INT 8
12559: PUSH
12560: LD_INT 11
12562: PUSH
12563: LD_INT 12
12565: PUSH
12566: LD_INT 15
12568: PUSH
12569: LD_INT 16
12571: PUSH
12572: LD_INT 22
12574: PUSH
12575: LD_INT 23
12577: PUSH
12578: LD_INT 26
12580: PUSH
12581: LD_INT 36
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: LD_INT 101
12600: PUSH
12601: LD_INT 102
12603: PUSH
12604: LD_INT 105
12606: PUSH
12607: LD_INT 106
12609: PUSH
12610: LD_INT 108
12612: PUSH
12613: LD_INT 116
12615: PUSH
12616: LD_INT 117
12618: PUSH
12619: LD_INT 118
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: ST_TO_ADDR
12636: GO 15419
12638: LD_INT 5
12640: DOUBLE
12641: EQUAL
12642: IFTRUE 12646
12644: GO 12758
12646: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12647: LD_ADDR_VAR 0 2
12651: PUSH
12652: LD_INT 2
12654: PUSH
12655: LD_INT 4
12657: PUSH
12658: LD_INT 5
12660: PUSH
12661: LD_INT 6
12663: PUSH
12664: LD_INT 8
12666: PUSH
12667: LD_INT 11
12669: PUSH
12670: LD_INT 12
12672: PUSH
12673: LD_INT 15
12675: PUSH
12676: LD_INT 16
12678: PUSH
12679: LD_INT 22
12681: PUSH
12682: LD_INT 23
12684: PUSH
12685: LD_INT 25
12687: PUSH
12688: LD_INT 26
12690: PUSH
12691: LD_INT 36
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 101
12712: PUSH
12713: LD_INT 102
12715: PUSH
12716: LD_INT 105
12718: PUSH
12719: LD_INT 106
12721: PUSH
12722: LD_INT 108
12724: PUSH
12725: LD_INT 109
12727: PUSH
12728: LD_INT 112
12730: PUSH
12731: LD_INT 116
12733: PUSH
12734: LD_INT 117
12736: PUSH
12737: LD_INT 118
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: ST_TO_ADDR
12756: GO 15419
12758: LD_INT 6
12760: DOUBLE
12761: EQUAL
12762: IFTRUE 12766
12764: GO 12898
12766: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12767: LD_ADDR_VAR 0 2
12771: PUSH
12772: LD_INT 2
12774: PUSH
12775: LD_INT 4
12777: PUSH
12778: LD_INT 5
12780: PUSH
12781: LD_INT 6
12783: PUSH
12784: LD_INT 8
12786: PUSH
12787: LD_INT 11
12789: PUSH
12790: LD_INT 12
12792: PUSH
12793: LD_INT 15
12795: PUSH
12796: LD_INT 16
12798: PUSH
12799: LD_INT 20
12801: PUSH
12802: LD_INT 21
12804: PUSH
12805: LD_INT 22
12807: PUSH
12808: LD_INT 23
12810: PUSH
12811: LD_INT 25
12813: PUSH
12814: LD_INT 26
12816: PUSH
12817: LD_INT 30
12819: PUSH
12820: LD_INT 31
12822: PUSH
12823: LD_INT 32
12825: PUSH
12826: LD_INT 36
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: PUSH
12850: LD_INT 101
12852: PUSH
12853: LD_INT 102
12855: PUSH
12856: LD_INT 105
12858: PUSH
12859: LD_INT 106
12861: PUSH
12862: LD_INT 108
12864: PUSH
12865: LD_INT 109
12867: PUSH
12868: LD_INT 112
12870: PUSH
12871: LD_INT 116
12873: PUSH
12874: LD_INT 117
12876: PUSH
12877: LD_INT 118
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: ST_TO_ADDR
12896: GO 15419
12898: LD_INT 7
12900: DOUBLE
12901: EQUAL
12902: IFTRUE 12906
12904: GO 13018
12906: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12907: LD_ADDR_VAR 0 2
12911: PUSH
12912: LD_INT 2
12914: PUSH
12915: LD_INT 4
12917: PUSH
12918: LD_INT 5
12920: PUSH
12921: LD_INT 7
12923: PUSH
12924: LD_INT 11
12926: PUSH
12927: LD_INT 12
12929: PUSH
12930: LD_INT 15
12932: PUSH
12933: LD_INT 16
12935: PUSH
12936: LD_INT 20
12938: PUSH
12939: LD_INT 21
12941: PUSH
12942: LD_INT 22
12944: PUSH
12945: LD_INT 23
12947: PUSH
12948: LD_INT 25
12950: PUSH
12951: LD_INT 26
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 101
12972: PUSH
12973: LD_INT 102
12975: PUSH
12976: LD_INT 103
12978: PUSH
12979: LD_INT 105
12981: PUSH
12982: LD_INT 106
12984: PUSH
12985: LD_INT 108
12987: PUSH
12988: LD_INT 112
12990: PUSH
12991: LD_INT 116
12993: PUSH
12994: LD_INT 117
12996: PUSH
12997: LD_INT 118
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: ST_TO_ADDR
13016: GO 15419
13018: LD_INT 8
13020: DOUBLE
13021: EQUAL
13022: IFTRUE 13026
13024: GO 13166
13026: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13027: LD_ADDR_VAR 0 2
13031: PUSH
13032: LD_INT 2
13034: PUSH
13035: LD_INT 4
13037: PUSH
13038: LD_INT 5
13040: PUSH
13041: LD_INT 6
13043: PUSH
13044: LD_INT 7
13046: PUSH
13047: LD_INT 8
13049: PUSH
13050: LD_INT 11
13052: PUSH
13053: LD_INT 12
13055: PUSH
13056: LD_INT 15
13058: PUSH
13059: LD_INT 16
13061: PUSH
13062: LD_INT 20
13064: PUSH
13065: LD_INT 21
13067: PUSH
13068: LD_INT 22
13070: PUSH
13071: LD_INT 23
13073: PUSH
13074: LD_INT 25
13076: PUSH
13077: LD_INT 26
13079: PUSH
13080: LD_INT 30
13082: PUSH
13083: LD_INT 31
13085: PUSH
13086: LD_INT 32
13088: PUSH
13089: LD_INT 36
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 101
13116: PUSH
13117: LD_INT 102
13119: PUSH
13120: LD_INT 103
13122: PUSH
13123: LD_INT 105
13125: PUSH
13126: LD_INT 106
13128: PUSH
13129: LD_INT 108
13131: PUSH
13132: LD_INT 109
13134: PUSH
13135: LD_INT 112
13137: PUSH
13138: LD_INT 116
13140: PUSH
13141: LD_INT 117
13143: PUSH
13144: LD_INT 118
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: ST_TO_ADDR
13164: GO 15419
13166: LD_INT 9
13168: DOUBLE
13169: EQUAL
13170: IFTRUE 13174
13172: GO 13322
13174: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13175: LD_ADDR_VAR 0 2
13179: PUSH
13180: LD_INT 2
13182: PUSH
13183: LD_INT 4
13185: PUSH
13186: LD_INT 5
13188: PUSH
13189: LD_INT 6
13191: PUSH
13192: LD_INT 7
13194: PUSH
13195: LD_INT 8
13197: PUSH
13198: LD_INT 11
13200: PUSH
13201: LD_INT 12
13203: PUSH
13204: LD_INT 15
13206: PUSH
13207: LD_INT 16
13209: PUSH
13210: LD_INT 20
13212: PUSH
13213: LD_INT 21
13215: PUSH
13216: LD_INT 22
13218: PUSH
13219: LD_INT 23
13221: PUSH
13222: LD_INT 25
13224: PUSH
13225: LD_INT 26
13227: PUSH
13228: LD_INT 28
13230: PUSH
13231: LD_INT 30
13233: PUSH
13234: LD_INT 31
13236: PUSH
13237: LD_INT 32
13239: PUSH
13240: LD_INT 36
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 101
13268: PUSH
13269: LD_INT 102
13271: PUSH
13272: LD_INT 103
13274: PUSH
13275: LD_INT 105
13277: PUSH
13278: LD_INT 106
13280: PUSH
13281: LD_INT 108
13283: PUSH
13284: LD_INT 109
13286: PUSH
13287: LD_INT 112
13289: PUSH
13290: LD_INT 114
13292: PUSH
13293: LD_INT 116
13295: PUSH
13296: LD_INT 117
13298: PUSH
13299: LD_INT 118
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: ST_TO_ADDR
13320: GO 15419
13322: LD_INT 10
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13526
13330: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13331: LD_ADDR_VAR 0 2
13335: PUSH
13336: LD_INT 2
13338: PUSH
13339: LD_INT 4
13341: PUSH
13342: LD_INT 5
13344: PUSH
13345: LD_INT 6
13347: PUSH
13348: LD_INT 7
13350: PUSH
13351: LD_INT 8
13353: PUSH
13354: LD_INT 9
13356: PUSH
13357: LD_INT 10
13359: PUSH
13360: LD_INT 11
13362: PUSH
13363: LD_INT 12
13365: PUSH
13366: LD_INT 13
13368: PUSH
13369: LD_INT 14
13371: PUSH
13372: LD_INT 15
13374: PUSH
13375: LD_INT 16
13377: PUSH
13378: LD_INT 17
13380: PUSH
13381: LD_INT 18
13383: PUSH
13384: LD_INT 19
13386: PUSH
13387: LD_INT 20
13389: PUSH
13390: LD_INT 21
13392: PUSH
13393: LD_INT 22
13395: PUSH
13396: LD_INT 23
13398: PUSH
13399: LD_INT 24
13401: PUSH
13402: LD_INT 25
13404: PUSH
13405: LD_INT 26
13407: PUSH
13408: LD_INT 28
13410: PUSH
13411: LD_INT 30
13413: PUSH
13414: LD_INT 31
13416: PUSH
13417: LD_INT 32
13419: PUSH
13420: LD_INT 36
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 101
13456: PUSH
13457: LD_INT 102
13459: PUSH
13460: LD_INT 103
13462: PUSH
13463: LD_INT 104
13465: PUSH
13466: LD_INT 105
13468: PUSH
13469: LD_INT 106
13471: PUSH
13472: LD_INT 107
13474: PUSH
13475: LD_INT 108
13477: PUSH
13478: LD_INT 109
13480: PUSH
13481: LD_INT 110
13483: PUSH
13484: LD_INT 111
13486: PUSH
13487: LD_INT 112
13489: PUSH
13490: LD_INT 114
13492: PUSH
13493: LD_INT 116
13495: PUSH
13496: LD_INT 117
13498: PUSH
13499: LD_INT 118
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: ST_TO_ADDR
13524: GO 15419
13526: LD_INT 11
13528: DOUBLE
13529: EQUAL
13530: IFTRUE 13534
13532: GO 13738
13534: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13535: LD_ADDR_VAR 0 2
13539: PUSH
13540: LD_INT 2
13542: PUSH
13543: LD_INT 3
13545: PUSH
13546: LD_INT 4
13548: PUSH
13549: LD_INT 5
13551: PUSH
13552: LD_INT 6
13554: PUSH
13555: LD_INT 7
13557: PUSH
13558: LD_INT 8
13560: PUSH
13561: LD_INT 9
13563: PUSH
13564: LD_INT 10
13566: PUSH
13567: LD_INT 11
13569: PUSH
13570: LD_INT 12
13572: PUSH
13573: LD_INT 13
13575: PUSH
13576: LD_INT 14
13578: PUSH
13579: LD_INT 15
13581: PUSH
13582: LD_INT 16
13584: PUSH
13585: LD_INT 17
13587: PUSH
13588: LD_INT 18
13590: PUSH
13591: LD_INT 19
13593: PUSH
13594: LD_INT 20
13596: PUSH
13597: LD_INT 21
13599: PUSH
13600: LD_INT 22
13602: PUSH
13603: LD_INT 23
13605: PUSH
13606: LD_INT 24
13608: PUSH
13609: LD_INT 25
13611: PUSH
13612: LD_INT 26
13614: PUSH
13615: LD_INT 28
13617: PUSH
13618: LD_INT 30
13620: PUSH
13621: LD_INT 31
13623: PUSH
13624: LD_INT 32
13626: PUSH
13627: LD_INT 34
13629: PUSH
13630: LD_INT 36
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: PUSH
13666: LD_INT 101
13668: PUSH
13669: LD_INT 102
13671: PUSH
13672: LD_INT 103
13674: PUSH
13675: LD_INT 104
13677: PUSH
13678: LD_INT 105
13680: PUSH
13681: LD_INT 106
13683: PUSH
13684: LD_INT 107
13686: PUSH
13687: LD_INT 108
13689: PUSH
13690: LD_INT 109
13692: PUSH
13693: LD_INT 110
13695: PUSH
13696: LD_INT 111
13698: PUSH
13699: LD_INT 112
13701: PUSH
13702: LD_INT 114
13704: PUSH
13705: LD_INT 116
13707: PUSH
13708: LD_INT 117
13710: PUSH
13711: LD_INT 118
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: ST_TO_ADDR
13736: GO 15419
13738: LD_INT 12
13740: DOUBLE
13741: EQUAL
13742: IFTRUE 13746
13744: GO 13966
13746: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13747: LD_ADDR_VAR 0 2
13751: PUSH
13752: LD_INT 1
13754: PUSH
13755: LD_INT 2
13757: PUSH
13758: LD_INT 3
13760: PUSH
13761: LD_INT 4
13763: PUSH
13764: LD_INT 5
13766: PUSH
13767: LD_INT 6
13769: PUSH
13770: LD_INT 7
13772: PUSH
13773: LD_INT 8
13775: PUSH
13776: LD_INT 9
13778: PUSH
13779: LD_INT 10
13781: PUSH
13782: LD_INT 11
13784: PUSH
13785: LD_INT 12
13787: PUSH
13788: LD_INT 13
13790: PUSH
13791: LD_INT 14
13793: PUSH
13794: LD_INT 15
13796: PUSH
13797: LD_INT 16
13799: PUSH
13800: LD_INT 17
13802: PUSH
13803: LD_INT 18
13805: PUSH
13806: LD_INT 19
13808: PUSH
13809: LD_INT 20
13811: PUSH
13812: LD_INT 21
13814: PUSH
13815: LD_INT 22
13817: PUSH
13818: LD_INT 23
13820: PUSH
13821: LD_INT 24
13823: PUSH
13824: LD_INT 25
13826: PUSH
13827: LD_INT 26
13829: PUSH
13830: LD_INT 27
13832: PUSH
13833: LD_INT 28
13835: PUSH
13836: LD_INT 30
13838: PUSH
13839: LD_INT 31
13841: PUSH
13842: LD_INT 32
13844: PUSH
13845: LD_INT 33
13847: PUSH
13848: LD_INT 34
13850: PUSH
13851: LD_INT 36
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: PUSH
13890: LD_INT 101
13892: PUSH
13893: LD_INT 102
13895: PUSH
13896: LD_INT 103
13898: PUSH
13899: LD_INT 104
13901: PUSH
13902: LD_INT 105
13904: PUSH
13905: LD_INT 106
13907: PUSH
13908: LD_INT 107
13910: PUSH
13911: LD_INT 108
13913: PUSH
13914: LD_INT 109
13916: PUSH
13917: LD_INT 110
13919: PUSH
13920: LD_INT 111
13922: PUSH
13923: LD_INT 112
13925: PUSH
13926: LD_INT 113
13928: PUSH
13929: LD_INT 114
13931: PUSH
13932: LD_INT 116
13934: PUSH
13935: LD_INT 117
13937: PUSH
13938: LD_INT 118
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: ST_TO_ADDR
13964: GO 15419
13966: LD_INT 13
13968: DOUBLE
13969: EQUAL
13970: IFTRUE 13974
13972: GO 14182
13974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13975: LD_ADDR_VAR 0 2
13979: PUSH
13980: LD_INT 1
13982: PUSH
13983: LD_INT 2
13985: PUSH
13986: LD_INT 3
13988: PUSH
13989: LD_INT 4
13991: PUSH
13992: LD_INT 5
13994: PUSH
13995: LD_INT 8
13997: PUSH
13998: LD_INT 9
14000: PUSH
14001: LD_INT 10
14003: PUSH
14004: LD_INT 11
14006: PUSH
14007: LD_INT 12
14009: PUSH
14010: LD_INT 14
14012: PUSH
14013: LD_INT 15
14015: PUSH
14016: LD_INT 16
14018: PUSH
14019: LD_INT 17
14021: PUSH
14022: LD_INT 18
14024: PUSH
14025: LD_INT 19
14027: PUSH
14028: LD_INT 20
14030: PUSH
14031: LD_INT 21
14033: PUSH
14034: LD_INT 22
14036: PUSH
14037: LD_INT 23
14039: PUSH
14040: LD_INT 24
14042: PUSH
14043: LD_INT 25
14045: PUSH
14046: LD_INT 26
14048: PUSH
14049: LD_INT 27
14051: PUSH
14052: LD_INT 28
14054: PUSH
14055: LD_INT 30
14057: PUSH
14058: LD_INT 31
14060: PUSH
14061: LD_INT 32
14063: PUSH
14064: LD_INT 33
14066: PUSH
14067: LD_INT 34
14069: PUSH
14070: LD_INT 36
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 101
14108: PUSH
14109: LD_INT 102
14111: PUSH
14112: LD_INT 103
14114: PUSH
14115: LD_INT 104
14117: PUSH
14118: LD_INT 105
14120: PUSH
14121: LD_INT 106
14123: PUSH
14124: LD_INT 107
14126: PUSH
14127: LD_INT 108
14129: PUSH
14130: LD_INT 109
14132: PUSH
14133: LD_INT 110
14135: PUSH
14136: LD_INT 111
14138: PUSH
14139: LD_INT 112
14141: PUSH
14142: LD_INT 113
14144: PUSH
14145: LD_INT 114
14147: PUSH
14148: LD_INT 116
14150: PUSH
14151: LD_INT 117
14153: PUSH
14154: LD_INT 118
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: ST_TO_ADDR
14180: GO 15419
14182: LD_INT 14
14184: DOUBLE
14185: EQUAL
14186: IFTRUE 14190
14188: GO 14414
14190: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14191: LD_ADDR_VAR 0 2
14195: PUSH
14196: LD_INT 1
14198: PUSH
14199: LD_INT 2
14201: PUSH
14202: LD_INT 3
14204: PUSH
14205: LD_INT 4
14207: PUSH
14208: LD_INT 5
14210: PUSH
14211: LD_INT 6
14213: PUSH
14214: LD_INT 7
14216: PUSH
14217: LD_INT 8
14219: PUSH
14220: LD_INT 9
14222: PUSH
14223: LD_INT 10
14225: PUSH
14226: LD_INT 11
14228: PUSH
14229: LD_INT 12
14231: PUSH
14232: LD_INT 13
14234: PUSH
14235: LD_INT 14
14237: PUSH
14238: LD_INT 15
14240: PUSH
14241: LD_INT 16
14243: PUSH
14244: LD_INT 17
14246: PUSH
14247: LD_INT 18
14249: PUSH
14250: LD_INT 19
14252: PUSH
14253: LD_INT 20
14255: PUSH
14256: LD_INT 21
14258: PUSH
14259: LD_INT 22
14261: PUSH
14262: LD_INT 23
14264: PUSH
14265: LD_INT 24
14267: PUSH
14268: LD_INT 25
14270: PUSH
14271: LD_INT 26
14273: PUSH
14274: LD_INT 27
14276: PUSH
14277: LD_INT 28
14279: PUSH
14280: LD_INT 29
14282: PUSH
14283: LD_INT 30
14285: PUSH
14286: LD_INT 31
14288: PUSH
14289: LD_INT 32
14291: PUSH
14292: LD_INT 33
14294: PUSH
14295: LD_INT 34
14297: PUSH
14298: LD_INT 36
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 101
14340: PUSH
14341: LD_INT 102
14343: PUSH
14344: LD_INT 103
14346: PUSH
14347: LD_INT 104
14349: PUSH
14350: LD_INT 105
14352: PUSH
14353: LD_INT 106
14355: PUSH
14356: LD_INT 107
14358: PUSH
14359: LD_INT 108
14361: PUSH
14362: LD_INT 109
14364: PUSH
14365: LD_INT 110
14367: PUSH
14368: LD_INT 111
14370: PUSH
14371: LD_INT 112
14373: PUSH
14374: LD_INT 113
14376: PUSH
14377: LD_INT 114
14379: PUSH
14380: LD_INT 116
14382: PUSH
14383: LD_INT 117
14385: PUSH
14386: LD_INT 118
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: ST_TO_ADDR
14412: GO 15419
14414: LD_INT 15
14416: DOUBLE
14417: EQUAL
14418: IFTRUE 14422
14420: GO 14646
14422: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14423: LD_ADDR_VAR 0 2
14427: PUSH
14428: LD_INT 1
14430: PUSH
14431: LD_INT 2
14433: PUSH
14434: LD_INT 3
14436: PUSH
14437: LD_INT 4
14439: PUSH
14440: LD_INT 5
14442: PUSH
14443: LD_INT 6
14445: PUSH
14446: LD_INT 7
14448: PUSH
14449: LD_INT 8
14451: PUSH
14452: LD_INT 9
14454: PUSH
14455: LD_INT 10
14457: PUSH
14458: LD_INT 11
14460: PUSH
14461: LD_INT 12
14463: PUSH
14464: LD_INT 13
14466: PUSH
14467: LD_INT 14
14469: PUSH
14470: LD_INT 15
14472: PUSH
14473: LD_INT 16
14475: PUSH
14476: LD_INT 17
14478: PUSH
14479: LD_INT 18
14481: PUSH
14482: LD_INT 19
14484: PUSH
14485: LD_INT 20
14487: PUSH
14488: LD_INT 21
14490: PUSH
14491: LD_INT 22
14493: PUSH
14494: LD_INT 23
14496: PUSH
14497: LD_INT 24
14499: PUSH
14500: LD_INT 25
14502: PUSH
14503: LD_INT 26
14505: PUSH
14506: LD_INT 27
14508: PUSH
14509: LD_INT 28
14511: PUSH
14512: LD_INT 29
14514: PUSH
14515: LD_INT 30
14517: PUSH
14518: LD_INT 31
14520: PUSH
14521: LD_INT 32
14523: PUSH
14524: LD_INT 33
14526: PUSH
14527: LD_INT 34
14529: PUSH
14530: LD_INT 36
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 101
14572: PUSH
14573: LD_INT 102
14575: PUSH
14576: LD_INT 103
14578: PUSH
14579: LD_INT 104
14581: PUSH
14582: LD_INT 105
14584: PUSH
14585: LD_INT 106
14587: PUSH
14588: LD_INT 107
14590: PUSH
14591: LD_INT 108
14593: PUSH
14594: LD_INT 109
14596: PUSH
14597: LD_INT 110
14599: PUSH
14600: LD_INT 111
14602: PUSH
14603: LD_INT 112
14605: PUSH
14606: LD_INT 113
14608: PUSH
14609: LD_INT 114
14611: PUSH
14612: LD_INT 116
14614: PUSH
14615: LD_INT 117
14617: PUSH
14618: LD_INT 118
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: ST_TO_ADDR
14644: GO 15419
14646: LD_INT 16
14648: DOUBLE
14649: EQUAL
14650: IFTRUE 14654
14652: GO 14790
14654: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14655: LD_ADDR_VAR 0 2
14659: PUSH
14660: LD_INT 2
14662: PUSH
14663: LD_INT 4
14665: PUSH
14666: LD_INT 5
14668: PUSH
14669: LD_INT 7
14671: PUSH
14672: LD_INT 11
14674: PUSH
14675: LD_INT 12
14677: PUSH
14678: LD_INT 15
14680: PUSH
14681: LD_INT 16
14683: PUSH
14684: LD_INT 20
14686: PUSH
14687: LD_INT 21
14689: PUSH
14690: LD_INT 22
14692: PUSH
14693: LD_INT 23
14695: PUSH
14696: LD_INT 25
14698: PUSH
14699: LD_INT 26
14701: PUSH
14702: LD_INT 30
14704: PUSH
14705: LD_INT 31
14707: PUSH
14708: LD_INT 32
14710: PUSH
14711: LD_INT 33
14713: PUSH
14714: LD_INT 34
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: PUSH
14738: LD_INT 101
14740: PUSH
14741: LD_INT 102
14743: PUSH
14744: LD_INT 103
14746: PUSH
14747: LD_INT 106
14749: PUSH
14750: LD_INT 108
14752: PUSH
14753: LD_INT 112
14755: PUSH
14756: LD_INT 113
14758: PUSH
14759: LD_INT 114
14761: PUSH
14762: LD_INT 116
14764: PUSH
14765: LD_INT 117
14767: PUSH
14768: LD_INT 118
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: ST_TO_ADDR
14788: GO 15419
14790: LD_INT 17
14792: DOUBLE
14793: EQUAL
14794: IFTRUE 14798
14796: GO 15022
14798: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14799: LD_ADDR_VAR 0 2
14803: PUSH
14804: LD_INT 1
14806: PUSH
14807: LD_INT 2
14809: PUSH
14810: LD_INT 3
14812: PUSH
14813: LD_INT 4
14815: PUSH
14816: LD_INT 5
14818: PUSH
14819: LD_INT 6
14821: PUSH
14822: LD_INT 7
14824: PUSH
14825: LD_INT 8
14827: PUSH
14828: LD_INT 9
14830: PUSH
14831: LD_INT 10
14833: PUSH
14834: LD_INT 11
14836: PUSH
14837: LD_INT 12
14839: PUSH
14840: LD_INT 13
14842: PUSH
14843: LD_INT 14
14845: PUSH
14846: LD_INT 15
14848: PUSH
14849: LD_INT 16
14851: PUSH
14852: LD_INT 17
14854: PUSH
14855: LD_INT 18
14857: PUSH
14858: LD_INT 19
14860: PUSH
14861: LD_INT 20
14863: PUSH
14864: LD_INT 21
14866: PUSH
14867: LD_INT 22
14869: PUSH
14870: LD_INT 23
14872: PUSH
14873: LD_INT 24
14875: PUSH
14876: LD_INT 25
14878: PUSH
14879: LD_INT 26
14881: PUSH
14882: LD_INT 27
14884: PUSH
14885: LD_INT 28
14887: PUSH
14888: LD_INT 29
14890: PUSH
14891: LD_INT 30
14893: PUSH
14894: LD_INT 31
14896: PUSH
14897: LD_INT 32
14899: PUSH
14900: LD_INT 33
14902: PUSH
14903: LD_INT 34
14905: PUSH
14906: LD_INT 36
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 101
14948: PUSH
14949: LD_INT 102
14951: PUSH
14952: LD_INT 103
14954: PUSH
14955: LD_INT 104
14957: PUSH
14958: LD_INT 105
14960: PUSH
14961: LD_INT 106
14963: PUSH
14964: LD_INT 107
14966: PUSH
14967: LD_INT 108
14969: PUSH
14970: LD_INT 109
14972: PUSH
14973: LD_INT 110
14975: PUSH
14976: LD_INT 111
14978: PUSH
14979: LD_INT 112
14981: PUSH
14982: LD_INT 113
14984: PUSH
14985: LD_INT 114
14987: PUSH
14988: LD_INT 116
14990: PUSH
14991: LD_INT 117
14993: PUSH
14994: LD_INT 118
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: ST_TO_ADDR
15020: GO 15419
15022: LD_INT 18
15024: DOUBLE
15025: EQUAL
15026: IFTRUE 15030
15028: GO 15178
15030: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15031: LD_ADDR_VAR 0 2
15035: PUSH
15036: LD_INT 2
15038: PUSH
15039: LD_INT 4
15041: PUSH
15042: LD_INT 5
15044: PUSH
15045: LD_INT 7
15047: PUSH
15048: LD_INT 11
15050: PUSH
15051: LD_INT 12
15053: PUSH
15054: LD_INT 15
15056: PUSH
15057: LD_INT 16
15059: PUSH
15060: LD_INT 20
15062: PUSH
15063: LD_INT 21
15065: PUSH
15066: LD_INT 22
15068: PUSH
15069: LD_INT 23
15071: PUSH
15072: LD_INT 25
15074: PUSH
15075: LD_INT 26
15077: PUSH
15078: LD_INT 30
15080: PUSH
15081: LD_INT 31
15083: PUSH
15084: LD_INT 32
15086: PUSH
15087: LD_INT 33
15089: PUSH
15090: LD_INT 34
15092: PUSH
15093: LD_INT 35
15095: PUSH
15096: LD_INT 36
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: PUSH
15122: LD_INT 101
15124: PUSH
15125: LD_INT 102
15127: PUSH
15128: LD_INT 103
15130: PUSH
15131: LD_INT 106
15133: PUSH
15134: LD_INT 108
15136: PUSH
15137: LD_INT 112
15139: PUSH
15140: LD_INT 113
15142: PUSH
15143: LD_INT 114
15145: PUSH
15146: LD_INT 115
15148: PUSH
15149: LD_INT 116
15151: PUSH
15152: LD_INT 117
15154: PUSH
15155: LD_INT 118
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: ST_TO_ADDR
15176: GO 15419
15178: LD_INT 19
15180: DOUBLE
15181: EQUAL
15182: IFTRUE 15186
15184: GO 15418
15186: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15187: LD_ADDR_VAR 0 2
15191: PUSH
15192: LD_INT 1
15194: PUSH
15195: LD_INT 2
15197: PUSH
15198: LD_INT 3
15200: PUSH
15201: LD_INT 4
15203: PUSH
15204: LD_INT 5
15206: PUSH
15207: LD_INT 6
15209: PUSH
15210: LD_INT 7
15212: PUSH
15213: LD_INT 8
15215: PUSH
15216: LD_INT 9
15218: PUSH
15219: LD_INT 10
15221: PUSH
15222: LD_INT 11
15224: PUSH
15225: LD_INT 12
15227: PUSH
15228: LD_INT 13
15230: PUSH
15231: LD_INT 14
15233: PUSH
15234: LD_INT 15
15236: PUSH
15237: LD_INT 16
15239: PUSH
15240: LD_INT 17
15242: PUSH
15243: LD_INT 18
15245: PUSH
15246: LD_INT 19
15248: PUSH
15249: LD_INT 20
15251: PUSH
15252: LD_INT 21
15254: PUSH
15255: LD_INT 22
15257: PUSH
15258: LD_INT 23
15260: PUSH
15261: LD_INT 24
15263: PUSH
15264: LD_INT 25
15266: PUSH
15267: LD_INT 26
15269: PUSH
15270: LD_INT 27
15272: PUSH
15273: LD_INT 28
15275: PUSH
15276: LD_INT 29
15278: PUSH
15279: LD_INT 30
15281: PUSH
15282: LD_INT 31
15284: PUSH
15285: LD_INT 32
15287: PUSH
15288: LD_INT 33
15290: PUSH
15291: LD_INT 34
15293: PUSH
15294: LD_INT 35
15296: PUSH
15297: LD_INT 36
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 101
15340: PUSH
15341: LD_INT 102
15343: PUSH
15344: LD_INT 103
15346: PUSH
15347: LD_INT 104
15349: PUSH
15350: LD_INT 105
15352: PUSH
15353: LD_INT 106
15355: PUSH
15356: LD_INT 107
15358: PUSH
15359: LD_INT 108
15361: PUSH
15362: LD_INT 109
15364: PUSH
15365: LD_INT 110
15367: PUSH
15368: LD_INT 111
15370: PUSH
15371: LD_INT 112
15373: PUSH
15374: LD_INT 113
15376: PUSH
15377: LD_INT 114
15379: PUSH
15380: LD_INT 115
15382: PUSH
15383: LD_INT 116
15385: PUSH
15386: LD_INT 117
15388: PUSH
15389: LD_INT 118
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: ST_TO_ADDR
15416: GO 15419
15418: POP
// end else
15419: GO 15650
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15421: LD_ADDR_VAR 0 2
15425: PUSH
15426: LD_INT 1
15428: PUSH
15429: LD_INT 2
15431: PUSH
15432: LD_INT 3
15434: PUSH
15435: LD_INT 4
15437: PUSH
15438: LD_INT 5
15440: PUSH
15441: LD_INT 6
15443: PUSH
15444: LD_INT 7
15446: PUSH
15447: LD_INT 8
15449: PUSH
15450: LD_INT 9
15452: PUSH
15453: LD_INT 10
15455: PUSH
15456: LD_INT 11
15458: PUSH
15459: LD_INT 12
15461: PUSH
15462: LD_INT 13
15464: PUSH
15465: LD_INT 14
15467: PUSH
15468: LD_INT 15
15470: PUSH
15471: LD_INT 16
15473: PUSH
15474: LD_INT 17
15476: PUSH
15477: LD_INT 18
15479: PUSH
15480: LD_INT 19
15482: PUSH
15483: LD_INT 20
15485: PUSH
15486: LD_INT 21
15488: PUSH
15489: LD_INT 22
15491: PUSH
15492: LD_INT 23
15494: PUSH
15495: LD_INT 24
15497: PUSH
15498: LD_INT 25
15500: PUSH
15501: LD_INT 26
15503: PUSH
15504: LD_INT 27
15506: PUSH
15507: LD_INT 28
15509: PUSH
15510: LD_INT 29
15512: PUSH
15513: LD_INT 30
15515: PUSH
15516: LD_INT 31
15518: PUSH
15519: LD_INT 32
15521: PUSH
15522: LD_INT 33
15524: PUSH
15525: LD_INT 34
15527: PUSH
15528: LD_INT 35
15530: PUSH
15531: LD_INT 36
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 101
15574: PUSH
15575: LD_INT 102
15577: PUSH
15578: LD_INT 103
15580: PUSH
15581: LD_INT 104
15583: PUSH
15584: LD_INT 105
15586: PUSH
15587: LD_INT 106
15589: PUSH
15590: LD_INT 107
15592: PUSH
15593: LD_INT 108
15595: PUSH
15596: LD_INT 109
15598: PUSH
15599: LD_INT 110
15601: PUSH
15602: LD_INT 111
15604: PUSH
15605: LD_INT 112
15607: PUSH
15608: LD_INT 113
15610: PUSH
15611: LD_INT 114
15613: PUSH
15614: LD_INT 115
15616: PUSH
15617: LD_INT 116
15619: PUSH
15620: LD_INT 117
15622: PUSH
15623: LD_INT 118
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: ST_TO_ADDR
// if result then
15650: LD_VAR 0 2
15654: IFFALSE 16440
// begin normal :=  ;
15656: LD_ADDR_VAR 0 5
15660: PUSH
15661: LD_STRING 
15663: ST_TO_ADDR
// hardcore :=  ;
15664: LD_ADDR_VAR 0 6
15668: PUSH
15669: LD_STRING 
15671: ST_TO_ADDR
// active :=  ;
15672: LD_ADDR_VAR 0 7
15676: PUSH
15677: LD_STRING 
15679: ST_TO_ADDR
// for i = 1 to normalCounter do
15680: LD_ADDR_VAR 0 8
15684: PUSH
15685: DOUBLE
15686: LD_INT 1
15688: DEC
15689: ST_TO_ADDR
15690: LD_EXP 66
15694: PUSH
15695: FOR_TO
15696: IFFALSE 15797
// begin tmp := 0 ;
15698: LD_ADDR_VAR 0 3
15702: PUSH
15703: LD_STRING 0
15705: ST_TO_ADDR
// if result [ 1 ] then
15706: LD_VAR 0 2
15710: PUSH
15711: LD_INT 1
15713: ARRAY
15714: IFFALSE 15779
// if result [ 1 ] [ 1 ] = i then
15716: LD_VAR 0 2
15720: PUSH
15721: LD_INT 1
15723: ARRAY
15724: PUSH
15725: LD_INT 1
15727: ARRAY
15728: PUSH
15729: LD_VAR 0 8
15733: EQUAL
15734: IFFALSE 15779
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15736: LD_ADDR_VAR 0 2
15740: PUSH
15741: LD_VAR 0 2
15745: PPUSH
15746: LD_INT 1
15748: PPUSH
15749: LD_VAR 0 2
15753: PUSH
15754: LD_INT 1
15756: ARRAY
15757: PPUSH
15758: LD_INT 1
15760: PPUSH
15761: CALL_OW 3
15765: PPUSH
15766: CALL_OW 1
15770: ST_TO_ADDR
// tmp := 1 ;
15771: LD_ADDR_VAR 0 3
15775: PUSH
15776: LD_STRING 1
15778: ST_TO_ADDR
// end ; normal := normal & tmp ;
15779: LD_ADDR_VAR 0 5
15783: PUSH
15784: LD_VAR 0 5
15788: PUSH
15789: LD_VAR 0 3
15793: STR
15794: ST_TO_ADDR
// end ;
15795: GO 15695
15797: POP
15798: POP
// for i = 1 to hardcoreCounter do
15799: LD_ADDR_VAR 0 8
15803: PUSH
15804: DOUBLE
15805: LD_INT 1
15807: DEC
15808: ST_TO_ADDR
15809: LD_EXP 67
15813: PUSH
15814: FOR_TO
15815: IFFALSE 15920
// begin tmp := 0 ;
15817: LD_ADDR_VAR 0 3
15821: PUSH
15822: LD_STRING 0
15824: ST_TO_ADDR
// if result [ 2 ] then
15825: LD_VAR 0 2
15829: PUSH
15830: LD_INT 2
15832: ARRAY
15833: IFFALSE 15902
// if result [ 2 ] [ 1 ] = 100 + i then
15835: LD_VAR 0 2
15839: PUSH
15840: LD_INT 2
15842: ARRAY
15843: PUSH
15844: LD_INT 1
15846: ARRAY
15847: PUSH
15848: LD_INT 100
15850: PUSH
15851: LD_VAR 0 8
15855: PLUS
15856: EQUAL
15857: IFFALSE 15902
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15859: LD_ADDR_VAR 0 2
15863: PUSH
15864: LD_VAR 0 2
15868: PPUSH
15869: LD_INT 2
15871: PPUSH
15872: LD_VAR 0 2
15876: PUSH
15877: LD_INT 2
15879: ARRAY
15880: PPUSH
15881: LD_INT 1
15883: PPUSH
15884: CALL_OW 3
15888: PPUSH
15889: CALL_OW 1
15893: ST_TO_ADDR
// tmp := 1 ;
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: LD_STRING 1
15901: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15902: LD_ADDR_VAR 0 6
15906: PUSH
15907: LD_VAR 0 6
15911: PUSH
15912: LD_VAR 0 3
15916: STR
15917: ST_TO_ADDR
// end ;
15918: GO 15814
15920: POP
15921: POP
// if isGameLoad then
15922: LD_VAR 0 1
15926: IFFALSE 16401
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15928: LD_ADDR_VAR 0 4
15932: PUSH
15933: LD_EXP 70
15937: PUSH
15938: LD_EXP 69
15942: PUSH
15943: LD_EXP 71
15947: PUSH
15948: LD_EXP 68
15952: PUSH
15953: LD_EXP 72
15957: PUSH
15958: LD_EXP 73
15962: PUSH
15963: LD_EXP 74
15967: PUSH
15968: LD_EXP 75
15972: PUSH
15973: LD_EXP 76
15977: PUSH
15978: LD_EXP 77
15982: PUSH
15983: LD_EXP 78
15987: PUSH
15988: LD_EXP 79
15992: PUSH
15993: LD_EXP 80
15997: PUSH
15998: LD_EXP 81
16002: PUSH
16003: LD_EXP 89
16007: PUSH
16008: LD_EXP 90
16012: PUSH
16013: LD_EXP 91
16017: PUSH
16018: LD_EXP 92
16022: PUSH
16023: LD_EXP 94
16027: PUSH
16028: LD_EXP 95
16032: PUSH
16033: LD_EXP 96
16037: PUSH
16038: LD_EXP 99
16042: PUSH
16043: LD_EXP 101
16047: PUSH
16048: LD_EXP 102
16052: PUSH
16053: LD_EXP 103
16057: PUSH
16058: LD_EXP 105
16062: PUSH
16063: LD_EXP 106
16067: PUSH
16068: LD_EXP 109
16072: PUSH
16073: LD_EXP 110
16077: PUSH
16078: LD_EXP 111
16082: PUSH
16083: LD_EXP 112
16087: PUSH
16088: LD_EXP 113
16092: PUSH
16093: LD_EXP 114
16097: PUSH
16098: LD_EXP 115
16102: PUSH
16103: LD_EXP 116
16107: PUSH
16108: LD_EXP 117
16112: PUSH
16113: LD_EXP 82
16117: PUSH
16118: LD_EXP 83
16122: PUSH
16123: LD_EXP 86
16127: PUSH
16128: LD_EXP 87
16132: PUSH
16133: LD_EXP 88
16137: PUSH
16138: LD_EXP 84
16142: PUSH
16143: LD_EXP 85
16147: PUSH
16148: LD_EXP 93
16152: PUSH
16153: LD_EXP 97
16157: PUSH
16158: LD_EXP 98
16162: PUSH
16163: LD_EXP 100
16167: PUSH
16168: LD_EXP 104
16172: PUSH
16173: LD_EXP 107
16177: PUSH
16178: LD_EXP 108
16182: PUSH
16183: LD_EXP 118
16187: PUSH
16188: LD_EXP 119
16192: PUSH
16193: LD_EXP 120
16197: PUSH
16198: LD_EXP 121
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: ST_TO_ADDR
// tmp :=  ;
16259: LD_ADDR_VAR 0 3
16263: PUSH
16264: LD_STRING 
16266: ST_TO_ADDR
// for i = 1 to normalCounter do
16267: LD_ADDR_VAR 0 8
16271: PUSH
16272: DOUBLE
16273: LD_INT 1
16275: DEC
16276: ST_TO_ADDR
16277: LD_EXP 66
16281: PUSH
16282: FOR_TO
16283: IFFALSE 16319
// begin if flags [ i ] then
16285: LD_VAR 0 4
16289: PUSH
16290: LD_VAR 0 8
16294: ARRAY
16295: IFFALSE 16317
// tmp := tmp & i & ; ;
16297: LD_ADDR_VAR 0 3
16301: PUSH
16302: LD_VAR 0 3
16306: PUSH
16307: LD_VAR 0 8
16311: STR
16312: PUSH
16313: LD_STRING ;
16315: STR
16316: ST_TO_ADDR
// end ;
16317: GO 16282
16319: POP
16320: POP
// for i = 1 to hardcoreCounter do
16321: LD_ADDR_VAR 0 8
16325: PUSH
16326: DOUBLE
16327: LD_INT 1
16329: DEC
16330: ST_TO_ADDR
16331: LD_EXP 67
16335: PUSH
16336: FOR_TO
16337: IFFALSE 16383
// begin if flags [ normalCounter + i ] then
16339: LD_VAR 0 4
16343: PUSH
16344: LD_EXP 66
16348: PUSH
16349: LD_VAR 0 8
16353: PLUS
16354: ARRAY
16355: IFFALSE 16381
// tmp := tmp & ( 100 + i ) & ; ;
16357: LD_ADDR_VAR 0 3
16361: PUSH
16362: LD_VAR 0 3
16366: PUSH
16367: LD_INT 100
16369: PUSH
16370: LD_VAR 0 8
16374: PLUS
16375: STR
16376: PUSH
16377: LD_STRING ;
16379: STR
16380: ST_TO_ADDR
// end ;
16381: GO 16336
16383: POP
16384: POP
// if tmp then
16385: LD_VAR 0 3
16389: IFFALSE 16401
// active := tmp ;
16391: LD_ADDR_VAR 0 7
16395: PUSH
16396: LD_VAR 0 3
16400: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16401: LD_STRING getStreamItemsFromMission("
16403: PUSH
16404: LD_VAR 0 5
16408: STR
16409: PUSH
16410: LD_STRING ","
16412: STR
16413: PUSH
16414: LD_VAR 0 6
16418: STR
16419: PUSH
16420: LD_STRING ","
16422: STR
16423: PUSH
16424: LD_VAR 0 7
16428: STR
16429: PUSH
16430: LD_STRING ")
16432: STR
16433: PPUSH
16434: CALL_OW 559
// end else
16438: GO 16447
// ToLua ( getStreamItemsFromMission("","","") ) ;
16440: LD_STRING getStreamItemsFromMission("","","")
16442: PPUSH
16443: CALL_OW 559
// end ;
16447: LD_VAR 0 2
16451: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16452: LD_EXP 65
16456: PUSH
16457: LD_EXP 70
16461: AND
16462: IFFALSE 16586
16464: GO 16466
16466: DISABLE
16467: LD_INT 0
16469: PPUSH
16470: PPUSH
// begin enable ;
16471: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16472: LD_ADDR_VAR 0 2
16476: PUSH
16477: LD_INT 22
16479: PUSH
16480: LD_OWVAR 2
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: LD_INT 34
16494: PUSH
16495: LD_INT 7
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 34
16504: PUSH
16505: LD_INT 45
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 34
16514: PUSH
16515: LD_INT 28
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 34
16524: PUSH
16525: LD_INT 47
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PPUSH
16543: CALL_OW 69
16547: ST_TO_ADDR
// if not tmp then
16548: LD_VAR 0 2
16552: NOT
16553: IFFALSE 16557
// exit ;
16555: GO 16586
// for i in tmp do
16557: LD_ADDR_VAR 0 1
16561: PUSH
16562: LD_VAR 0 2
16566: PUSH
16567: FOR_IN
16568: IFFALSE 16584
// begin SetLives ( i , 0 ) ;
16570: LD_VAR 0 1
16574: PPUSH
16575: LD_INT 0
16577: PPUSH
16578: CALL_OW 234
// end ;
16582: GO 16567
16584: POP
16585: POP
// end ;
16586: PPOPN 2
16588: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16589: LD_EXP 65
16593: PUSH
16594: LD_EXP 71
16598: AND
16599: IFFALSE 16683
16601: GO 16603
16603: DISABLE
16604: LD_INT 0
16606: PPUSH
16607: PPUSH
// begin enable ;
16608: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16609: LD_ADDR_VAR 0 2
16613: PUSH
16614: LD_INT 22
16616: PUSH
16617: LD_OWVAR 2
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 32
16628: PUSH
16629: LD_INT 3
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PPUSH
16640: CALL_OW 69
16644: ST_TO_ADDR
// if not tmp then
16645: LD_VAR 0 2
16649: NOT
16650: IFFALSE 16654
// exit ;
16652: GO 16683
// for i in tmp do
16654: LD_ADDR_VAR 0 1
16658: PUSH
16659: LD_VAR 0 2
16663: PUSH
16664: FOR_IN
16665: IFFALSE 16681
// begin SetLives ( i , 0 ) ;
16667: LD_VAR 0 1
16671: PPUSH
16672: LD_INT 0
16674: PPUSH
16675: CALL_OW 234
// end ;
16679: GO 16664
16681: POP
16682: POP
// end ;
16683: PPOPN 2
16685: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16686: LD_EXP 65
16690: PUSH
16691: LD_EXP 68
16695: AND
16696: IFFALSE 16789
16698: GO 16700
16700: DISABLE
16701: LD_INT 0
16703: PPUSH
// begin enable ;
16704: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16705: LD_ADDR_VAR 0 1
16709: PUSH
16710: LD_INT 22
16712: PUSH
16713: LD_OWVAR 2
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 2
16724: PUSH
16725: LD_INT 25
16727: PUSH
16728: LD_INT 5
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 25
16737: PUSH
16738: LD_INT 9
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: LD_INT 25
16747: PUSH
16748: LD_INT 8
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PPUSH
16765: CALL_OW 69
16769: PUSH
16770: FOR_IN
16771: IFFALSE 16787
// begin SetClass ( i , 1 ) ;
16773: LD_VAR 0 1
16777: PPUSH
16778: LD_INT 1
16780: PPUSH
16781: CALL_OW 336
// end ;
16785: GO 16770
16787: POP
16788: POP
// end ;
16789: PPOPN 1
16791: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16792: LD_EXP 65
16796: PUSH
16797: LD_EXP 69
16801: AND
16802: PUSH
16803: LD_OWVAR 65
16807: PUSH
16808: LD_INT 7
16810: LESS
16811: AND
16812: IFFALSE 16826
16814: GO 16816
16816: DISABLE
// begin enable ;
16817: ENABLE
// game_speed := 7 ;
16818: LD_ADDR_OWVAR 65
16822: PUSH
16823: LD_INT 7
16825: ST_TO_ADDR
// end ;
16826: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16827: LD_EXP 65
16831: PUSH
16832: LD_EXP 72
16836: AND
16837: IFFALSE 17039
16839: GO 16841
16841: DISABLE
16842: LD_INT 0
16844: PPUSH
16845: PPUSH
16846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16847: LD_ADDR_VAR 0 3
16851: PUSH
16852: LD_INT 81
16854: PUSH
16855: LD_OWVAR 2
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 21
16866: PUSH
16867: LD_INT 1
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PPUSH
16878: CALL_OW 69
16882: ST_TO_ADDR
// if not tmp then
16883: LD_VAR 0 3
16887: NOT
16888: IFFALSE 16892
// exit ;
16890: GO 17039
// if tmp > 5 then
16892: LD_VAR 0 3
16896: PUSH
16897: LD_INT 5
16899: GREATER
16900: IFFALSE 16912
// k := 5 else
16902: LD_ADDR_VAR 0 2
16906: PUSH
16907: LD_INT 5
16909: ST_TO_ADDR
16910: GO 16922
// k := tmp ;
16912: LD_ADDR_VAR 0 2
16916: PUSH
16917: LD_VAR 0 3
16921: ST_TO_ADDR
// for i := 1 to k do
16922: LD_ADDR_VAR 0 1
16926: PUSH
16927: DOUBLE
16928: LD_INT 1
16930: DEC
16931: ST_TO_ADDR
16932: LD_VAR 0 2
16936: PUSH
16937: FOR_TO
16938: IFFALSE 17037
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16940: LD_VAR 0 3
16944: PUSH
16945: LD_VAR 0 1
16949: ARRAY
16950: PPUSH
16951: LD_VAR 0 1
16955: PUSH
16956: LD_INT 4
16958: MOD
16959: PUSH
16960: LD_INT 1
16962: PLUS
16963: PPUSH
16964: CALL_OW 259
16968: PUSH
16969: LD_INT 10
16971: LESS
16972: IFFALSE 17035
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16974: LD_VAR 0 3
16978: PUSH
16979: LD_VAR 0 1
16983: ARRAY
16984: PPUSH
16985: LD_VAR 0 1
16989: PUSH
16990: LD_INT 4
16992: MOD
16993: PUSH
16994: LD_INT 1
16996: PLUS
16997: PPUSH
16998: LD_VAR 0 3
17002: PUSH
17003: LD_VAR 0 1
17007: ARRAY
17008: PPUSH
17009: LD_VAR 0 1
17013: PUSH
17014: LD_INT 4
17016: MOD
17017: PUSH
17018: LD_INT 1
17020: PLUS
17021: PPUSH
17022: CALL_OW 259
17026: PUSH
17027: LD_INT 1
17029: PLUS
17030: PPUSH
17031: CALL_OW 237
17035: GO 16937
17037: POP
17038: POP
// end ;
17039: PPOPN 3
17041: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17042: LD_EXP 65
17046: PUSH
17047: LD_EXP 73
17051: AND
17052: IFFALSE 17072
17054: GO 17056
17056: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17057: LD_INT 4
17059: PPUSH
17060: LD_OWVAR 2
17064: PPUSH
17065: LD_INT 0
17067: PPUSH
17068: CALL_OW 324
17072: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17073: LD_EXP 65
17077: PUSH
17078: LD_EXP 102
17082: AND
17083: IFFALSE 17103
17085: GO 17087
17087: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17088: LD_INT 19
17090: PPUSH
17091: LD_OWVAR 2
17095: PPUSH
17096: LD_INT 0
17098: PPUSH
17099: CALL_OW 324
17103: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17104: LD_EXP 65
17108: PUSH
17109: LD_EXP 74
17113: AND
17114: IFFALSE 17216
17116: GO 17118
17118: DISABLE
17119: LD_INT 0
17121: PPUSH
17122: PPUSH
// begin enable ;
17123: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17124: LD_ADDR_VAR 0 2
17128: PUSH
17129: LD_INT 22
17131: PUSH
17132: LD_OWVAR 2
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 2
17143: PUSH
17144: LD_INT 34
17146: PUSH
17147: LD_INT 11
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 34
17156: PUSH
17157: LD_INT 30
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: LIST
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PPUSH
17173: CALL_OW 69
17177: ST_TO_ADDR
// if not tmp then
17178: LD_VAR 0 2
17182: NOT
17183: IFFALSE 17187
// exit ;
17185: GO 17216
// for i in tmp do
17187: LD_ADDR_VAR 0 1
17191: PUSH
17192: LD_VAR 0 2
17196: PUSH
17197: FOR_IN
17198: IFFALSE 17214
// begin SetLives ( i , 0 ) ;
17200: LD_VAR 0 1
17204: PPUSH
17205: LD_INT 0
17207: PPUSH
17208: CALL_OW 234
// end ;
17212: GO 17197
17214: POP
17215: POP
// end ;
17216: PPOPN 2
17218: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17219: LD_EXP 65
17223: PUSH
17224: LD_EXP 75
17228: AND
17229: IFFALSE 17249
17231: GO 17233
17233: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17234: LD_INT 32
17236: PPUSH
17237: LD_OWVAR 2
17241: PPUSH
17242: LD_INT 0
17244: PPUSH
17245: CALL_OW 324
17249: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17250: LD_EXP 65
17254: PUSH
17255: LD_EXP 76
17259: AND
17260: IFFALSE 17441
17262: GO 17264
17264: DISABLE
17265: LD_INT 0
17267: PPUSH
17268: PPUSH
17269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17270: LD_ADDR_VAR 0 2
17274: PUSH
17275: LD_INT 22
17277: PUSH
17278: LD_OWVAR 2
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 33
17289: PUSH
17290: LD_INT 3
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PPUSH
17301: CALL_OW 69
17305: ST_TO_ADDR
// if not tmp then
17306: LD_VAR 0 2
17310: NOT
17311: IFFALSE 17315
// exit ;
17313: GO 17441
// side := 0 ;
17315: LD_ADDR_VAR 0 3
17319: PUSH
17320: LD_INT 0
17322: ST_TO_ADDR
// for i := 1 to 8 do
17323: LD_ADDR_VAR 0 1
17327: PUSH
17328: DOUBLE
17329: LD_INT 1
17331: DEC
17332: ST_TO_ADDR
17333: LD_INT 8
17335: PUSH
17336: FOR_TO
17337: IFFALSE 17385
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17339: LD_OWVAR 2
17343: PUSH
17344: LD_VAR 0 1
17348: NONEQUAL
17349: PUSH
17350: LD_OWVAR 2
17354: PPUSH
17355: LD_VAR 0 1
17359: PPUSH
17360: CALL_OW 81
17364: PUSH
17365: LD_INT 2
17367: EQUAL
17368: AND
17369: IFFALSE 17383
// begin side := i ;
17371: LD_ADDR_VAR 0 3
17375: PUSH
17376: LD_VAR 0 1
17380: ST_TO_ADDR
// break ;
17381: GO 17385
// end ;
17383: GO 17336
17385: POP
17386: POP
// if not side then
17387: LD_VAR 0 3
17391: NOT
17392: IFFALSE 17396
// exit ;
17394: GO 17441
// for i := 1 to tmp do
17396: LD_ADDR_VAR 0 1
17400: PUSH
17401: DOUBLE
17402: LD_INT 1
17404: DEC
17405: ST_TO_ADDR
17406: LD_VAR 0 2
17410: PUSH
17411: FOR_TO
17412: IFFALSE 17439
// if Prob ( 60 ) then
17414: LD_INT 60
17416: PPUSH
17417: CALL_OW 13
17421: IFFALSE 17437
// SetSide ( i , side ) ;
17423: LD_VAR 0 1
17427: PPUSH
17428: LD_VAR 0 3
17432: PPUSH
17433: CALL_OW 235
17437: GO 17411
17439: POP
17440: POP
// end ;
17441: PPOPN 3
17443: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17444: LD_EXP 65
17448: PUSH
17449: LD_EXP 78
17453: AND
17454: IFFALSE 17573
17456: GO 17458
17458: DISABLE
17459: LD_INT 0
17461: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17462: LD_ADDR_VAR 0 1
17466: PUSH
17467: LD_INT 22
17469: PUSH
17470: LD_OWVAR 2
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 21
17481: PUSH
17482: LD_INT 1
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 3
17491: PUSH
17492: LD_INT 23
17494: PUSH
17495: LD_INT 0
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: PPUSH
17511: CALL_OW 69
17515: PUSH
17516: FOR_IN
17517: IFFALSE 17571
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17519: LD_VAR 0 1
17523: PPUSH
17524: CALL_OW 257
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: LD_INT 2
17534: PUSH
17535: LD_INT 3
17537: PUSH
17538: LD_INT 4
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: IN
17547: IFFALSE 17569
// SetClass ( un , rand ( 1 , 4 ) ) ;
17549: LD_VAR 0 1
17553: PPUSH
17554: LD_INT 1
17556: PPUSH
17557: LD_INT 4
17559: PPUSH
17560: CALL_OW 12
17564: PPUSH
17565: CALL_OW 336
17569: GO 17516
17571: POP
17572: POP
// end ;
17573: PPOPN 1
17575: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17576: LD_EXP 65
17580: PUSH
17581: LD_EXP 77
17585: AND
17586: IFFALSE 17665
17588: GO 17590
17590: DISABLE
17591: LD_INT 0
17593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17594: LD_ADDR_VAR 0 1
17598: PUSH
17599: LD_INT 22
17601: PUSH
17602: LD_OWVAR 2
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 21
17613: PUSH
17614: LD_INT 3
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PPUSH
17625: CALL_OW 69
17629: ST_TO_ADDR
// if not tmp then
17630: LD_VAR 0 1
17634: NOT
17635: IFFALSE 17639
// exit ;
17637: GO 17665
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17639: LD_VAR 0 1
17643: PUSH
17644: LD_INT 1
17646: PPUSH
17647: LD_VAR 0 1
17651: PPUSH
17652: CALL_OW 12
17656: ARRAY
17657: PPUSH
17658: LD_INT 100
17660: PPUSH
17661: CALL_OW 234
// end ;
17665: PPOPN 1
17667: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17668: LD_EXP 65
17672: PUSH
17673: LD_EXP 79
17677: AND
17678: IFFALSE 17776
17680: GO 17682
17682: DISABLE
17683: LD_INT 0
17685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17686: LD_ADDR_VAR 0 1
17690: PUSH
17691: LD_INT 22
17693: PUSH
17694: LD_OWVAR 2
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 21
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PPUSH
17717: CALL_OW 69
17721: ST_TO_ADDR
// if not tmp then
17722: LD_VAR 0 1
17726: NOT
17727: IFFALSE 17731
// exit ;
17729: GO 17776
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17731: LD_VAR 0 1
17735: PUSH
17736: LD_INT 1
17738: PPUSH
17739: LD_VAR 0 1
17743: PPUSH
17744: CALL_OW 12
17748: ARRAY
17749: PPUSH
17750: LD_INT 1
17752: PPUSH
17753: LD_INT 4
17755: PPUSH
17756: CALL_OW 12
17760: PPUSH
17761: LD_INT 3000
17763: PPUSH
17764: LD_INT 9000
17766: PPUSH
17767: CALL_OW 12
17771: PPUSH
17772: CALL_OW 492
// end ;
17776: PPOPN 1
17778: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17779: LD_EXP 65
17783: PUSH
17784: LD_EXP 80
17788: AND
17789: IFFALSE 17809
17791: GO 17793
17793: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17794: LD_INT 1
17796: PPUSH
17797: LD_OWVAR 2
17801: PPUSH
17802: LD_INT 0
17804: PPUSH
17805: CALL_OW 324
17809: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17810: LD_EXP 65
17814: PUSH
17815: LD_EXP 81
17819: AND
17820: IFFALSE 17903
17822: GO 17824
17824: DISABLE
17825: LD_INT 0
17827: PPUSH
17828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17829: LD_ADDR_VAR 0 2
17833: PUSH
17834: LD_INT 22
17836: PUSH
17837: LD_OWVAR 2
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 21
17848: PUSH
17849: LD_INT 3
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PPUSH
17860: CALL_OW 69
17864: ST_TO_ADDR
// if not tmp then
17865: LD_VAR 0 2
17869: NOT
17870: IFFALSE 17874
// exit ;
17872: GO 17903
// for i in tmp do
17874: LD_ADDR_VAR 0 1
17878: PUSH
17879: LD_VAR 0 2
17883: PUSH
17884: FOR_IN
17885: IFFALSE 17901
// SetBLevel ( i , 10 ) ;
17887: LD_VAR 0 1
17891: PPUSH
17892: LD_INT 10
17894: PPUSH
17895: CALL_OW 241
17899: GO 17884
17901: POP
17902: POP
// end ;
17903: PPOPN 2
17905: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17906: LD_EXP 65
17910: PUSH
17911: LD_EXP 82
17915: AND
17916: IFFALSE 18027
17918: GO 17920
17920: DISABLE
17921: LD_INT 0
17923: PPUSH
17924: PPUSH
17925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17926: LD_ADDR_VAR 0 3
17930: PUSH
17931: LD_INT 22
17933: PUSH
17934: LD_OWVAR 2
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 25
17945: PUSH
17946: LD_INT 1
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PPUSH
17957: CALL_OW 69
17961: ST_TO_ADDR
// if not tmp then
17962: LD_VAR 0 3
17966: NOT
17967: IFFALSE 17971
// exit ;
17969: GO 18027
// un := tmp [ rand ( 1 , tmp ) ] ;
17971: LD_ADDR_VAR 0 2
17975: PUSH
17976: LD_VAR 0 3
17980: PUSH
17981: LD_INT 1
17983: PPUSH
17984: LD_VAR 0 3
17988: PPUSH
17989: CALL_OW 12
17993: ARRAY
17994: ST_TO_ADDR
// if Crawls ( un ) then
17995: LD_VAR 0 2
17999: PPUSH
18000: CALL_OW 318
18004: IFFALSE 18015
// ComWalk ( un ) ;
18006: LD_VAR 0 2
18010: PPUSH
18011: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18015: LD_VAR 0 2
18019: PPUSH
18020: LD_INT 5
18022: PPUSH
18023: CALL_OW 336
// end ;
18027: PPOPN 3
18029: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18030: LD_EXP 65
18034: PUSH
18035: LD_EXP 83
18039: AND
18040: PUSH
18041: LD_OWVAR 67
18045: PUSH
18046: LD_INT 4
18048: LESS
18049: AND
18050: IFFALSE 18069
18052: GO 18054
18054: DISABLE
// begin Difficulty := Difficulty + 1 ;
18055: LD_ADDR_OWVAR 67
18059: PUSH
18060: LD_OWVAR 67
18064: PUSH
18065: LD_INT 1
18067: PLUS
18068: ST_TO_ADDR
// end ;
18069: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18070: LD_EXP 65
18074: PUSH
18075: LD_EXP 84
18079: AND
18080: IFFALSE 18183
18082: GO 18084
18084: DISABLE
18085: LD_INT 0
18087: PPUSH
// begin for i := 1 to 5 do
18088: LD_ADDR_VAR 0 1
18092: PUSH
18093: DOUBLE
18094: LD_INT 1
18096: DEC
18097: ST_TO_ADDR
18098: LD_INT 5
18100: PUSH
18101: FOR_TO
18102: IFFALSE 18181
// begin uc_nation := nation_nature ;
18104: LD_ADDR_OWVAR 21
18108: PUSH
18109: LD_INT 0
18111: ST_TO_ADDR
// uc_side := 0 ;
18112: LD_ADDR_OWVAR 20
18116: PUSH
18117: LD_INT 0
18119: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18120: LD_ADDR_OWVAR 29
18124: PUSH
18125: LD_INT 12
18127: PUSH
18128: LD_INT 12
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: ST_TO_ADDR
// hc_agressivity := 20 ;
18135: LD_ADDR_OWVAR 35
18139: PUSH
18140: LD_INT 20
18142: ST_TO_ADDR
// hc_class := class_tiger ;
18143: LD_ADDR_OWVAR 28
18147: PUSH
18148: LD_INT 14
18150: ST_TO_ADDR
// hc_gallery :=  ;
18151: LD_ADDR_OWVAR 33
18155: PUSH
18156: LD_STRING 
18158: ST_TO_ADDR
// hc_name :=  ;
18159: LD_ADDR_OWVAR 26
18163: PUSH
18164: LD_STRING 
18166: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18167: CALL_OW 44
18171: PPUSH
18172: LD_INT 0
18174: PPUSH
18175: CALL_OW 51
// end ;
18179: GO 18101
18181: POP
18182: POP
// end ;
18183: PPOPN 1
18185: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18186: LD_EXP 65
18190: PUSH
18191: LD_EXP 85
18195: AND
18196: IFFALSE 18205
18198: GO 18200
18200: DISABLE
// StreamSibBomb ;
18201: CALL 18206 0 0
18205: END
// export function StreamSibBomb ; var i , x , y ; begin
18206: LD_INT 0
18208: PPUSH
18209: PPUSH
18210: PPUSH
18211: PPUSH
// result := false ;
18212: LD_ADDR_VAR 0 1
18216: PUSH
18217: LD_INT 0
18219: ST_TO_ADDR
// for i := 1 to 16 do
18220: LD_ADDR_VAR 0 2
18224: PUSH
18225: DOUBLE
18226: LD_INT 1
18228: DEC
18229: ST_TO_ADDR
18230: LD_INT 16
18232: PUSH
18233: FOR_TO
18234: IFFALSE 18433
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18236: LD_ADDR_VAR 0 3
18240: PUSH
18241: LD_INT 10
18243: PUSH
18244: LD_INT 20
18246: PUSH
18247: LD_INT 30
18249: PUSH
18250: LD_INT 40
18252: PUSH
18253: LD_INT 50
18255: PUSH
18256: LD_INT 60
18258: PUSH
18259: LD_INT 70
18261: PUSH
18262: LD_INT 80
18264: PUSH
18265: LD_INT 90
18267: PUSH
18268: LD_INT 100
18270: PUSH
18271: LD_INT 110
18273: PUSH
18274: LD_INT 120
18276: PUSH
18277: LD_INT 130
18279: PUSH
18280: LD_INT 140
18282: PUSH
18283: LD_INT 150
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 1
18305: PPUSH
18306: LD_INT 15
18308: PPUSH
18309: CALL_OW 12
18313: ARRAY
18314: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18315: LD_ADDR_VAR 0 4
18319: PUSH
18320: LD_INT 10
18322: PUSH
18323: LD_INT 20
18325: PUSH
18326: LD_INT 30
18328: PUSH
18329: LD_INT 40
18331: PUSH
18332: LD_INT 50
18334: PUSH
18335: LD_INT 60
18337: PUSH
18338: LD_INT 70
18340: PUSH
18341: LD_INT 80
18343: PUSH
18344: LD_INT 90
18346: PUSH
18347: LD_INT 100
18349: PUSH
18350: LD_INT 110
18352: PUSH
18353: LD_INT 120
18355: PUSH
18356: LD_INT 130
18358: PUSH
18359: LD_INT 140
18361: PUSH
18362: LD_INT 150
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: PPUSH
18385: LD_INT 15
18387: PPUSH
18388: CALL_OW 12
18392: ARRAY
18393: ST_TO_ADDR
// if ValidHex ( x , y ) then
18394: LD_VAR 0 3
18398: PPUSH
18399: LD_VAR 0 4
18403: PPUSH
18404: CALL_OW 488
18408: IFFALSE 18431
// begin result := [ x , y ] ;
18410: LD_ADDR_VAR 0 1
18414: PUSH
18415: LD_VAR 0 3
18419: PUSH
18420: LD_VAR 0 4
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: ST_TO_ADDR
// break ;
18429: GO 18433
// end ; end ;
18431: GO 18233
18433: POP
18434: POP
// if result then
18435: LD_VAR 0 1
18439: IFFALSE 18499
// begin ToLua ( playSibBomb() ) ;
18441: LD_STRING playSibBomb()
18443: PPUSH
18444: CALL_OW 559
// wait ( 0 0$14 ) ;
18448: LD_INT 490
18450: PPUSH
18451: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18455: LD_VAR 0 1
18459: PUSH
18460: LD_INT 1
18462: ARRAY
18463: PPUSH
18464: LD_VAR 0 1
18468: PUSH
18469: LD_INT 2
18471: ARRAY
18472: PPUSH
18473: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18477: LD_VAR 0 1
18481: PUSH
18482: LD_INT 1
18484: ARRAY
18485: PPUSH
18486: LD_VAR 0 1
18490: PUSH
18491: LD_INT 2
18493: ARRAY
18494: PPUSH
18495: CALL_OW 429
// end ; end ;
18499: LD_VAR 0 1
18503: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18504: LD_EXP 65
18508: PUSH
18509: LD_EXP 87
18513: AND
18514: IFFALSE 18526
18516: GO 18518
18518: DISABLE
// YouLost (  ) ;
18519: LD_STRING 
18521: PPUSH
18522: CALL_OW 104
18526: END
// every 0 0$1 trigger StreamModeActive and sFog do
18527: LD_EXP 65
18531: PUSH
18532: LD_EXP 86
18536: AND
18537: IFFALSE 18551
18539: GO 18541
18541: DISABLE
// FogOff ( your_side ) ;
18542: LD_OWVAR 2
18546: PPUSH
18547: CALL_OW 344
18551: END
// every 0 0$1 trigger StreamModeActive and sSun do
18552: LD_EXP 65
18556: PUSH
18557: LD_EXP 88
18561: AND
18562: IFFALSE 18590
18564: GO 18566
18566: DISABLE
// begin solar_recharge_percent := 0 ;
18567: LD_ADDR_OWVAR 79
18571: PUSH
18572: LD_INT 0
18574: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18575: LD_INT 10500
18577: PPUSH
18578: CALL_OW 67
// solar_recharge_percent := 100 ;
18582: LD_ADDR_OWVAR 79
18586: PUSH
18587: LD_INT 100
18589: ST_TO_ADDR
// end ;
18590: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18591: LD_EXP 65
18595: PUSH
18596: LD_EXP 89
18600: AND
18601: IFFALSE 18840
18603: GO 18605
18605: DISABLE
18606: LD_INT 0
18608: PPUSH
18609: PPUSH
18610: PPUSH
// begin tmp := [ ] ;
18611: LD_ADDR_VAR 0 3
18615: PUSH
18616: EMPTY
18617: ST_TO_ADDR
// for i := 1 to 6 do
18618: LD_ADDR_VAR 0 1
18622: PUSH
18623: DOUBLE
18624: LD_INT 1
18626: DEC
18627: ST_TO_ADDR
18628: LD_INT 6
18630: PUSH
18631: FOR_TO
18632: IFFALSE 18737
// begin uc_nation := nation_nature ;
18634: LD_ADDR_OWVAR 21
18638: PUSH
18639: LD_INT 0
18641: ST_TO_ADDR
// uc_side := 0 ;
18642: LD_ADDR_OWVAR 20
18646: PUSH
18647: LD_INT 0
18649: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18650: LD_ADDR_OWVAR 29
18654: PUSH
18655: LD_INT 12
18657: PUSH
18658: LD_INT 12
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: ST_TO_ADDR
// hc_agressivity := 20 ;
18665: LD_ADDR_OWVAR 35
18669: PUSH
18670: LD_INT 20
18672: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18673: LD_ADDR_OWVAR 28
18677: PUSH
18678: LD_INT 17
18680: ST_TO_ADDR
// hc_gallery :=  ;
18681: LD_ADDR_OWVAR 33
18685: PUSH
18686: LD_STRING 
18688: ST_TO_ADDR
// hc_name :=  ;
18689: LD_ADDR_OWVAR 26
18693: PUSH
18694: LD_STRING 
18696: ST_TO_ADDR
// un := CreateHuman ;
18697: LD_ADDR_VAR 0 2
18701: PUSH
18702: CALL_OW 44
18706: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18707: LD_VAR 0 2
18711: PPUSH
18712: LD_INT 1
18714: PPUSH
18715: CALL_OW 51
// tmp := tmp ^ un ;
18719: LD_ADDR_VAR 0 3
18723: PUSH
18724: LD_VAR 0 3
18728: PUSH
18729: LD_VAR 0 2
18733: ADD
18734: ST_TO_ADDR
// end ;
18735: GO 18631
18737: POP
18738: POP
// repeat wait ( 0 0$1 ) ;
18739: LD_INT 35
18741: PPUSH
18742: CALL_OW 67
// for un in tmp do
18746: LD_ADDR_VAR 0 2
18750: PUSH
18751: LD_VAR 0 3
18755: PUSH
18756: FOR_IN
18757: IFFALSE 18831
// begin if IsDead ( un ) then
18759: LD_VAR 0 2
18763: PPUSH
18764: CALL_OW 301
18768: IFFALSE 18788
// begin tmp := tmp diff un ;
18770: LD_ADDR_VAR 0 3
18774: PUSH
18775: LD_VAR 0 3
18779: PUSH
18780: LD_VAR 0 2
18784: DIFF
18785: ST_TO_ADDR
// continue ;
18786: GO 18756
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18788: LD_VAR 0 2
18792: PPUSH
18793: LD_INT 3
18795: PUSH
18796: LD_INT 22
18798: PUSH
18799: LD_INT 0
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PPUSH
18810: CALL_OW 69
18814: PPUSH
18815: LD_VAR 0 2
18819: PPUSH
18820: CALL_OW 74
18824: PPUSH
18825: CALL_OW 115
// end ;
18829: GO 18756
18831: POP
18832: POP
// until not tmp ;
18833: LD_VAR 0 3
18837: NOT
18838: IFFALSE 18739
// end ;
18840: PPOPN 3
18842: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18843: LD_EXP 65
18847: PUSH
18848: LD_EXP 90
18852: AND
18853: IFFALSE 18907
18855: GO 18857
18857: DISABLE
// begin ToLua ( displayTroll(); ) ;
18858: LD_STRING displayTroll();
18860: PPUSH
18861: CALL_OW 559
// wait ( 3 3$00 ) ;
18865: LD_INT 6300
18867: PPUSH
18868: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18872: LD_STRING hideTroll();
18874: PPUSH
18875: CALL_OW 559
// wait ( 1 1$00 ) ;
18879: LD_INT 2100
18881: PPUSH
18882: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18886: LD_STRING displayTroll();
18888: PPUSH
18889: CALL_OW 559
// wait ( 1 1$00 ) ;
18893: LD_INT 2100
18895: PPUSH
18896: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18900: LD_STRING hideTroll();
18902: PPUSH
18903: CALL_OW 559
// end ;
18907: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18908: LD_EXP 65
18912: PUSH
18913: LD_EXP 91
18917: AND
18918: IFFALSE 18981
18920: GO 18922
18922: DISABLE
18923: LD_INT 0
18925: PPUSH
// begin p := 0 ;
18926: LD_ADDR_VAR 0 1
18930: PUSH
18931: LD_INT 0
18933: ST_TO_ADDR
// repeat game_speed := 1 ;
18934: LD_ADDR_OWVAR 65
18938: PUSH
18939: LD_INT 1
18941: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18942: LD_INT 35
18944: PPUSH
18945: CALL_OW 67
// p := p + 1 ;
18949: LD_ADDR_VAR 0 1
18953: PUSH
18954: LD_VAR 0 1
18958: PUSH
18959: LD_INT 1
18961: PLUS
18962: ST_TO_ADDR
// until p >= 60 ;
18963: LD_VAR 0 1
18967: PUSH
18968: LD_INT 60
18970: GREATEREQUAL
18971: IFFALSE 18934
// game_speed := 4 ;
18973: LD_ADDR_OWVAR 65
18977: PUSH
18978: LD_INT 4
18980: ST_TO_ADDR
// end ;
18981: PPOPN 1
18983: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18984: LD_EXP 65
18988: PUSH
18989: LD_EXP 92
18993: AND
18994: IFFALSE 19140
18996: GO 18998
18998: DISABLE
18999: LD_INT 0
19001: PPUSH
19002: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19003: LD_ADDR_VAR 0 1
19007: PUSH
19008: LD_INT 22
19010: PUSH
19011: LD_OWVAR 2
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 2
19022: PUSH
19023: LD_INT 30
19025: PUSH
19026: LD_INT 0
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 30
19035: PUSH
19036: LD_INT 1
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: LIST
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PPUSH
19052: CALL_OW 69
19056: ST_TO_ADDR
// if not depot then
19057: LD_VAR 0 1
19061: NOT
19062: IFFALSE 19066
// exit ;
19064: GO 19140
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19066: LD_ADDR_VAR 0 2
19070: PUSH
19071: LD_VAR 0 1
19075: PUSH
19076: LD_INT 1
19078: PPUSH
19079: LD_VAR 0 1
19083: PPUSH
19084: CALL_OW 12
19088: ARRAY
19089: PPUSH
19090: CALL_OW 274
19094: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19095: LD_VAR 0 2
19099: PPUSH
19100: LD_INT 1
19102: PPUSH
19103: LD_INT 0
19105: PPUSH
19106: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19110: LD_VAR 0 2
19114: PPUSH
19115: LD_INT 2
19117: PPUSH
19118: LD_INT 0
19120: PPUSH
19121: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19125: LD_VAR 0 2
19129: PPUSH
19130: LD_INT 3
19132: PPUSH
19133: LD_INT 0
19135: PPUSH
19136: CALL_OW 277
// end ;
19140: PPOPN 2
19142: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19143: LD_EXP 65
19147: PUSH
19148: LD_EXP 93
19152: AND
19153: IFFALSE 19250
19155: GO 19157
19157: DISABLE
19158: LD_INT 0
19160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19161: LD_ADDR_VAR 0 1
19165: PUSH
19166: LD_INT 22
19168: PUSH
19169: LD_OWVAR 2
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 21
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 3
19190: PUSH
19191: LD_INT 23
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: LIST
19209: PPUSH
19210: CALL_OW 69
19214: ST_TO_ADDR
// if not tmp then
19215: LD_VAR 0 1
19219: NOT
19220: IFFALSE 19224
// exit ;
19222: GO 19250
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19224: LD_VAR 0 1
19228: PUSH
19229: LD_INT 1
19231: PPUSH
19232: LD_VAR 0 1
19236: PPUSH
19237: CALL_OW 12
19241: ARRAY
19242: PPUSH
19243: LD_INT 200
19245: PPUSH
19246: CALL_OW 234
// end ;
19250: PPOPN 1
19252: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19253: LD_EXP 65
19257: PUSH
19258: LD_EXP 94
19262: AND
19263: IFFALSE 19342
19265: GO 19267
19267: DISABLE
19268: LD_INT 0
19270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19271: LD_ADDR_VAR 0 1
19275: PUSH
19276: LD_INT 22
19278: PUSH
19279: LD_OWVAR 2
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 21
19290: PUSH
19291: LD_INT 2
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PPUSH
19302: CALL_OW 69
19306: ST_TO_ADDR
// if not tmp then
19307: LD_VAR 0 1
19311: NOT
19312: IFFALSE 19316
// exit ;
19314: GO 19342
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19316: LD_VAR 0 1
19320: PUSH
19321: LD_INT 1
19323: PPUSH
19324: LD_VAR 0 1
19328: PPUSH
19329: CALL_OW 12
19333: ARRAY
19334: PPUSH
19335: LD_INT 60
19337: PPUSH
19338: CALL_OW 234
// end ;
19342: PPOPN 1
19344: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19345: LD_EXP 65
19349: PUSH
19350: LD_EXP 95
19354: AND
19355: IFFALSE 19454
19357: GO 19359
19359: DISABLE
19360: LD_INT 0
19362: PPUSH
19363: PPUSH
// begin enable ;
19364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19365: LD_ADDR_VAR 0 1
19369: PUSH
19370: LD_INT 22
19372: PUSH
19373: LD_OWVAR 2
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 61
19384: PUSH
19385: EMPTY
19386: LIST
19387: PUSH
19388: LD_INT 33
19390: PUSH
19391: LD_INT 2
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: LIST
19402: PPUSH
19403: CALL_OW 69
19407: ST_TO_ADDR
// if not tmp then
19408: LD_VAR 0 1
19412: NOT
19413: IFFALSE 19417
// exit ;
19415: GO 19454
// for i in tmp do
19417: LD_ADDR_VAR 0 2
19421: PUSH
19422: LD_VAR 0 1
19426: PUSH
19427: FOR_IN
19428: IFFALSE 19452
// if IsControledBy ( i ) then
19430: LD_VAR 0 2
19434: PPUSH
19435: CALL_OW 312
19439: IFFALSE 19450
// ComUnlink ( i ) ;
19441: LD_VAR 0 2
19445: PPUSH
19446: CALL_OW 136
19450: GO 19427
19452: POP
19453: POP
// end ;
19454: PPOPN 2
19456: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19457: LD_EXP 65
19461: PUSH
19462: LD_EXP 96
19466: AND
19467: IFFALSE 19607
19469: GO 19471
19471: DISABLE
19472: LD_INT 0
19474: PPUSH
19475: PPUSH
// begin ToLua ( displayPowell(); ) ;
19476: LD_STRING displayPowell();
19478: PPUSH
19479: CALL_OW 559
// uc_side := 0 ;
19483: LD_ADDR_OWVAR 20
19487: PUSH
19488: LD_INT 0
19490: ST_TO_ADDR
// uc_nation := 2 ;
19491: LD_ADDR_OWVAR 21
19495: PUSH
19496: LD_INT 2
19498: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19499: LD_ADDR_OWVAR 37
19503: PUSH
19504: LD_INT 14
19506: ST_TO_ADDR
// vc_engine := engine_siberite ;
19507: LD_ADDR_OWVAR 39
19511: PUSH
19512: LD_INT 3
19514: ST_TO_ADDR
// vc_control := control_apeman ;
19515: LD_ADDR_OWVAR 38
19519: PUSH
19520: LD_INT 5
19522: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19523: LD_ADDR_OWVAR 40
19527: PUSH
19528: LD_INT 29
19530: ST_TO_ADDR
// un := CreateVehicle ;
19531: LD_ADDR_VAR 0 2
19535: PUSH
19536: CALL_OW 45
19540: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19541: LD_VAR 0 2
19545: PPUSH
19546: LD_INT 1
19548: PPUSH
19549: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19553: LD_INT 35
19555: PPUSH
19556: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19560: LD_VAR 0 2
19564: PPUSH
19565: LD_INT 22
19567: PUSH
19568: LD_OWVAR 2
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 69
19581: PPUSH
19582: LD_VAR 0 2
19586: PPUSH
19587: CALL_OW 74
19591: PPUSH
19592: CALL_OW 115
// until IsDead ( un ) ;
19596: LD_VAR 0 2
19600: PPUSH
19601: CALL_OW 301
19605: IFFALSE 19553
// end ;
19607: PPOPN 2
19609: END
// every 0 0$1 trigger StreamModeActive and sStu do
19610: LD_EXP 65
19614: PUSH
19615: LD_EXP 104
19619: AND
19620: IFFALSE 19636
19622: GO 19624
19624: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19625: LD_STRING displayStucuk();
19627: PPUSH
19628: CALL_OW 559
// ResetFog ;
19632: CALL_OW 335
// end ;
19636: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19637: LD_EXP 65
19641: PUSH
19642: LD_EXP 97
19646: AND
19647: IFFALSE 19788
19649: GO 19651
19651: DISABLE
19652: LD_INT 0
19654: PPUSH
19655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19656: LD_ADDR_VAR 0 2
19660: PUSH
19661: LD_INT 22
19663: PUSH
19664: LD_OWVAR 2
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 21
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PPUSH
19687: CALL_OW 69
19691: ST_TO_ADDR
// if not tmp then
19692: LD_VAR 0 2
19696: NOT
19697: IFFALSE 19701
// exit ;
19699: GO 19788
// un := tmp [ rand ( 1 , tmp ) ] ;
19701: LD_ADDR_VAR 0 1
19705: PUSH
19706: LD_VAR 0 2
19710: PUSH
19711: LD_INT 1
19713: PPUSH
19714: LD_VAR 0 2
19718: PPUSH
19719: CALL_OW 12
19723: ARRAY
19724: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19725: LD_VAR 0 1
19729: PPUSH
19730: LD_INT 0
19732: PPUSH
19733: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19737: LD_VAR 0 1
19741: PPUSH
19742: LD_OWVAR 3
19746: PUSH
19747: LD_VAR 0 1
19751: DIFF
19752: PPUSH
19753: LD_VAR 0 1
19757: PPUSH
19758: CALL_OW 74
19762: PPUSH
19763: CALL_OW 115
// wait ( 0 0$20 ) ;
19767: LD_INT 700
19769: PPUSH
19770: CALL_OW 67
// SetSide ( un , your_side ) ;
19774: LD_VAR 0 1
19778: PPUSH
19779: LD_OWVAR 2
19783: PPUSH
19784: CALL_OW 235
// end ;
19788: PPOPN 2
19790: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19791: LD_EXP 65
19795: PUSH
19796: LD_EXP 98
19800: AND
19801: IFFALSE 19907
19803: GO 19805
19805: DISABLE
19806: LD_INT 0
19808: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19809: LD_ADDR_VAR 0 1
19813: PUSH
19814: LD_INT 22
19816: PUSH
19817: LD_OWVAR 2
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: LD_INT 30
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 30
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: LIST
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PPUSH
19858: CALL_OW 69
19862: ST_TO_ADDR
// if not depot then
19863: LD_VAR 0 1
19867: NOT
19868: IFFALSE 19872
// exit ;
19870: GO 19907
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19872: LD_VAR 0 1
19876: PUSH
19877: LD_INT 1
19879: ARRAY
19880: PPUSH
19881: CALL_OW 250
19885: PPUSH
19886: LD_VAR 0 1
19890: PUSH
19891: LD_INT 1
19893: ARRAY
19894: PPUSH
19895: CALL_OW 251
19899: PPUSH
19900: LD_INT 70
19902: PPUSH
19903: CALL_OW 495
// end ;
19907: PPOPN 1
19909: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19910: LD_EXP 65
19914: PUSH
19915: LD_EXP 99
19919: AND
19920: IFFALSE 20131
19922: GO 19924
19924: DISABLE
19925: LD_INT 0
19927: PPUSH
19928: PPUSH
19929: PPUSH
19930: PPUSH
19931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19932: LD_ADDR_VAR 0 5
19936: PUSH
19937: LD_INT 22
19939: PUSH
19940: LD_OWVAR 2
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 21
19951: PUSH
19952: LD_INT 1
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PPUSH
19963: CALL_OW 69
19967: ST_TO_ADDR
// if not tmp then
19968: LD_VAR 0 5
19972: NOT
19973: IFFALSE 19977
// exit ;
19975: GO 20131
// for i in tmp do
19977: LD_ADDR_VAR 0 1
19981: PUSH
19982: LD_VAR 0 5
19986: PUSH
19987: FOR_IN
19988: IFFALSE 20129
// begin d := rand ( 0 , 5 ) ;
19990: LD_ADDR_VAR 0 4
19994: PUSH
19995: LD_INT 0
19997: PPUSH
19998: LD_INT 5
20000: PPUSH
20001: CALL_OW 12
20005: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20006: LD_ADDR_VAR 0 2
20010: PUSH
20011: LD_VAR 0 1
20015: PPUSH
20016: CALL_OW 250
20020: PPUSH
20021: LD_VAR 0 4
20025: PPUSH
20026: LD_INT 3
20028: PPUSH
20029: LD_INT 12
20031: PPUSH
20032: CALL_OW 12
20036: PPUSH
20037: CALL_OW 272
20041: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20042: LD_ADDR_VAR 0 3
20046: PUSH
20047: LD_VAR 0 1
20051: PPUSH
20052: CALL_OW 251
20056: PPUSH
20057: LD_VAR 0 4
20061: PPUSH
20062: LD_INT 3
20064: PPUSH
20065: LD_INT 12
20067: PPUSH
20068: CALL_OW 12
20072: PPUSH
20073: CALL_OW 273
20077: ST_TO_ADDR
// if ValidHex ( x , y ) then
20078: LD_VAR 0 2
20082: PPUSH
20083: LD_VAR 0 3
20087: PPUSH
20088: CALL_OW 488
20092: IFFALSE 20127
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20094: LD_VAR 0 1
20098: PPUSH
20099: LD_VAR 0 2
20103: PPUSH
20104: LD_VAR 0 3
20108: PPUSH
20109: LD_INT 3
20111: PPUSH
20112: LD_INT 6
20114: PPUSH
20115: CALL_OW 12
20119: PPUSH
20120: LD_INT 1
20122: PPUSH
20123: CALL_OW 483
// end ;
20127: GO 19987
20129: POP
20130: POP
// end ;
20131: PPOPN 5
20133: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20134: LD_EXP 65
20138: PUSH
20139: LD_EXP 100
20143: AND
20144: IFFALSE 20238
20146: GO 20148
20148: DISABLE
20149: LD_INT 0
20151: PPUSH
20152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20153: LD_ADDR_VAR 0 2
20157: PUSH
20158: LD_INT 22
20160: PUSH
20161: LD_OWVAR 2
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 32
20172: PUSH
20173: LD_INT 1
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 21
20182: PUSH
20183: LD_INT 2
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: LIST
20194: PPUSH
20195: CALL_OW 69
20199: ST_TO_ADDR
// if not tmp then
20200: LD_VAR 0 2
20204: NOT
20205: IFFALSE 20209
// exit ;
20207: GO 20238
// for i in tmp do
20209: LD_ADDR_VAR 0 1
20213: PUSH
20214: LD_VAR 0 2
20218: PUSH
20219: FOR_IN
20220: IFFALSE 20236
// SetFuel ( i , 0 ) ;
20222: LD_VAR 0 1
20226: PPUSH
20227: LD_INT 0
20229: PPUSH
20230: CALL_OW 240
20234: GO 20219
20236: POP
20237: POP
// end ;
20238: PPOPN 2
20240: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20241: LD_EXP 65
20245: PUSH
20246: LD_EXP 101
20250: AND
20251: IFFALSE 20317
20253: GO 20255
20255: DISABLE
20256: LD_INT 0
20258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20259: LD_ADDR_VAR 0 1
20263: PUSH
20264: LD_INT 22
20266: PUSH
20267: LD_OWVAR 2
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 30
20278: PUSH
20279: LD_INT 29
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PPUSH
20290: CALL_OW 69
20294: ST_TO_ADDR
// if not tmp then
20295: LD_VAR 0 1
20299: NOT
20300: IFFALSE 20304
// exit ;
20302: GO 20317
// DestroyUnit ( tmp [ 1 ] ) ;
20304: LD_VAR 0 1
20308: PUSH
20309: LD_INT 1
20311: ARRAY
20312: PPUSH
20313: CALL_OW 65
// end ;
20317: PPOPN 1
20319: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20320: LD_EXP 65
20324: PUSH
20325: LD_EXP 103
20329: AND
20330: IFFALSE 20459
20332: GO 20334
20334: DISABLE
20335: LD_INT 0
20337: PPUSH
// begin uc_side := 0 ;
20338: LD_ADDR_OWVAR 20
20342: PUSH
20343: LD_INT 0
20345: ST_TO_ADDR
// uc_nation := nation_arabian ;
20346: LD_ADDR_OWVAR 21
20350: PUSH
20351: LD_INT 2
20353: ST_TO_ADDR
// hc_gallery :=  ;
20354: LD_ADDR_OWVAR 33
20358: PUSH
20359: LD_STRING 
20361: ST_TO_ADDR
// hc_name :=  ;
20362: LD_ADDR_OWVAR 26
20366: PUSH
20367: LD_STRING 
20369: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20370: LD_INT 1
20372: PPUSH
20373: LD_INT 11
20375: PPUSH
20376: LD_INT 10
20378: PPUSH
20379: CALL_OW 380
// un := CreateHuman ;
20383: LD_ADDR_VAR 0 1
20387: PUSH
20388: CALL_OW 44
20392: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20393: LD_VAR 0 1
20397: PPUSH
20398: LD_INT 1
20400: PPUSH
20401: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20405: LD_INT 35
20407: PPUSH
20408: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20412: LD_VAR 0 1
20416: PPUSH
20417: LD_INT 22
20419: PUSH
20420: LD_OWVAR 2
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PPUSH
20429: CALL_OW 69
20433: PPUSH
20434: LD_VAR 0 1
20438: PPUSH
20439: CALL_OW 74
20443: PPUSH
20444: CALL_OW 115
// until IsDead ( un ) ;
20448: LD_VAR 0 1
20452: PPUSH
20453: CALL_OW 301
20457: IFFALSE 20405
// end ;
20459: PPOPN 1
20461: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20462: LD_EXP 65
20466: PUSH
20467: LD_EXP 105
20471: AND
20472: IFFALSE 20484
20474: GO 20476
20476: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20477: LD_STRING earthquake(getX(game), 0, 32)
20479: PPUSH
20480: CALL_OW 559
20484: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20485: LD_EXP 65
20489: PUSH
20490: LD_EXP 106
20494: AND
20495: IFFALSE 20586
20497: GO 20499
20499: DISABLE
20500: LD_INT 0
20502: PPUSH
// begin enable ;
20503: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20504: LD_ADDR_VAR 0 1
20508: PUSH
20509: LD_INT 22
20511: PUSH
20512: LD_OWVAR 2
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 21
20523: PUSH
20524: LD_INT 2
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 33
20533: PUSH
20534: LD_INT 3
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: LIST
20545: PPUSH
20546: CALL_OW 69
20550: ST_TO_ADDR
// if not tmp then
20551: LD_VAR 0 1
20555: NOT
20556: IFFALSE 20560
// exit ;
20558: GO 20586
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20560: LD_VAR 0 1
20564: PUSH
20565: LD_INT 1
20567: PPUSH
20568: LD_VAR 0 1
20572: PPUSH
20573: CALL_OW 12
20577: ARRAY
20578: PPUSH
20579: LD_INT 1
20581: PPUSH
20582: CALL_OW 234
// end ;
20586: PPOPN 1
20588: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20589: LD_EXP 65
20593: PUSH
20594: LD_EXP 107
20598: AND
20599: IFFALSE 20740
20601: GO 20603
20603: DISABLE
20604: LD_INT 0
20606: PPUSH
20607: PPUSH
20608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20609: LD_ADDR_VAR 0 3
20613: PUSH
20614: LD_INT 22
20616: PUSH
20617: LD_OWVAR 2
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 25
20628: PUSH
20629: LD_INT 1
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PPUSH
20640: CALL_OW 69
20644: ST_TO_ADDR
// if not tmp then
20645: LD_VAR 0 3
20649: NOT
20650: IFFALSE 20654
// exit ;
20652: GO 20740
// un := tmp [ rand ( 1 , tmp ) ] ;
20654: LD_ADDR_VAR 0 2
20658: PUSH
20659: LD_VAR 0 3
20663: PUSH
20664: LD_INT 1
20666: PPUSH
20667: LD_VAR 0 3
20671: PPUSH
20672: CALL_OW 12
20676: ARRAY
20677: ST_TO_ADDR
// if Crawls ( un ) then
20678: LD_VAR 0 2
20682: PPUSH
20683: CALL_OW 318
20687: IFFALSE 20698
// ComWalk ( un ) ;
20689: LD_VAR 0 2
20693: PPUSH
20694: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20698: LD_VAR 0 2
20702: PPUSH
20703: LD_INT 9
20705: PPUSH
20706: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20710: LD_INT 28
20712: PPUSH
20713: LD_OWVAR 2
20717: PPUSH
20718: LD_INT 2
20720: PPUSH
20721: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20725: LD_INT 29
20727: PPUSH
20728: LD_OWVAR 2
20732: PPUSH
20733: LD_INT 2
20735: PPUSH
20736: CALL_OW 322
// end ;
20740: PPOPN 3
20742: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20743: LD_EXP 65
20747: PUSH
20748: LD_EXP 108
20752: AND
20753: IFFALSE 20864
20755: GO 20757
20757: DISABLE
20758: LD_INT 0
20760: PPUSH
20761: PPUSH
20762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20763: LD_ADDR_VAR 0 3
20767: PUSH
20768: LD_INT 22
20770: PUSH
20771: LD_OWVAR 2
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 25
20782: PUSH
20783: LD_INT 1
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PPUSH
20794: CALL_OW 69
20798: ST_TO_ADDR
// if not tmp then
20799: LD_VAR 0 3
20803: NOT
20804: IFFALSE 20808
// exit ;
20806: GO 20864
// un := tmp [ rand ( 1 , tmp ) ] ;
20808: LD_ADDR_VAR 0 2
20812: PUSH
20813: LD_VAR 0 3
20817: PUSH
20818: LD_INT 1
20820: PPUSH
20821: LD_VAR 0 3
20825: PPUSH
20826: CALL_OW 12
20830: ARRAY
20831: ST_TO_ADDR
// if Crawls ( un ) then
20832: LD_VAR 0 2
20836: PPUSH
20837: CALL_OW 318
20841: IFFALSE 20852
// ComWalk ( un ) ;
20843: LD_VAR 0 2
20847: PPUSH
20848: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20852: LD_VAR 0 2
20856: PPUSH
20857: LD_INT 8
20859: PPUSH
20860: CALL_OW 336
// end ;
20864: PPOPN 3
20866: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20867: LD_EXP 65
20871: PUSH
20872: LD_EXP 109
20876: AND
20877: IFFALSE 21021
20879: GO 20881
20881: DISABLE
20882: LD_INT 0
20884: PPUSH
20885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20886: LD_ADDR_VAR 0 2
20890: PUSH
20891: LD_INT 22
20893: PUSH
20894: LD_OWVAR 2
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 21
20905: PUSH
20906: LD_INT 2
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 2
20915: PUSH
20916: LD_INT 34
20918: PUSH
20919: LD_INT 12
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 34
20928: PUSH
20929: LD_INT 51
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 34
20938: PUSH
20939: LD_INT 32
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: LIST
20956: PPUSH
20957: CALL_OW 69
20961: ST_TO_ADDR
// if not tmp then
20962: LD_VAR 0 2
20966: NOT
20967: IFFALSE 20971
// exit ;
20969: GO 21021
// for i in tmp do
20971: LD_ADDR_VAR 0 1
20975: PUSH
20976: LD_VAR 0 2
20980: PUSH
20981: FOR_IN
20982: IFFALSE 21019
// if GetCargo ( i , mat_artifact ) = 0 then
20984: LD_VAR 0 1
20988: PPUSH
20989: LD_INT 4
20991: PPUSH
20992: CALL_OW 289
20996: PUSH
20997: LD_INT 0
20999: EQUAL
21000: IFFALSE 21017
// SetCargo ( i , mat_siberit , 100 ) ;
21002: LD_VAR 0 1
21006: PPUSH
21007: LD_INT 3
21009: PPUSH
21010: LD_INT 100
21012: PPUSH
21013: CALL_OW 290
21017: GO 20981
21019: POP
21020: POP
// end ;
21021: PPOPN 2
21023: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21024: LD_EXP 65
21028: PUSH
21029: LD_EXP 110
21033: AND
21034: IFFALSE 21217
21036: GO 21038
21038: DISABLE
21039: LD_INT 0
21041: PPUSH
21042: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21043: LD_ADDR_VAR 0 2
21047: PUSH
21048: LD_INT 22
21050: PUSH
21051: LD_OWVAR 2
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PPUSH
21060: CALL_OW 69
21064: ST_TO_ADDR
// if not tmp then
21065: LD_VAR 0 2
21069: NOT
21070: IFFALSE 21074
// exit ;
21072: GO 21217
// for i := 1 to 2 do
21074: LD_ADDR_VAR 0 1
21078: PUSH
21079: DOUBLE
21080: LD_INT 1
21082: DEC
21083: ST_TO_ADDR
21084: LD_INT 2
21086: PUSH
21087: FOR_TO
21088: IFFALSE 21215
// begin uc_side := your_side ;
21090: LD_ADDR_OWVAR 20
21094: PUSH
21095: LD_OWVAR 2
21099: ST_TO_ADDR
// uc_nation := nation_american ;
21100: LD_ADDR_OWVAR 21
21104: PUSH
21105: LD_INT 1
21107: ST_TO_ADDR
// vc_chassis := us_morphling ;
21108: LD_ADDR_OWVAR 37
21112: PUSH
21113: LD_INT 5
21115: ST_TO_ADDR
// vc_engine := engine_siberite ;
21116: LD_ADDR_OWVAR 39
21120: PUSH
21121: LD_INT 3
21123: ST_TO_ADDR
// vc_control := control_computer ;
21124: LD_ADDR_OWVAR 38
21128: PUSH
21129: LD_INT 3
21131: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21132: LD_ADDR_OWVAR 40
21136: PUSH
21137: LD_INT 10
21139: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21140: LD_VAR 0 2
21144: PUSH
21145: LD_INT 1
21147: ARRAY
21148: PPUSH
21149: CALL_OW 310
21153: NOT
21154: IFFALSE 21201
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21156: CALL_OW 45
21160: PPUSH
21161: LD_VAR 0 2
21165: PUSH
21166: LD_INT 1
21168: ARRAY
21169: PPUSH
21170: CALL_OW 250
21174: PPUSH
21175: LD_VAR 0 2
21179: PUSH
21180: LD_INT 1
21182: ARRAY
21183: PPUSH
21184: CALL_OW 251
21188: PPUSH
21189: LD_INT 12
21191: PPUSH
21192: LD_INT 1
21194: PPUSH
21195: CALL_OW 50
21199: GO 21213
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21201: CALL_OW 45
21205: PPUSH
21206: LD_INT 1
21208: PPUSH
21209: CALL_OW 51
// end ;
21213: GO 21087
21215: POP
21216: POP
// end ;
21217: PPOPN 2
21219: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21220: LD_EXP 65
21224: PUSH
21225: LD_EXP 111
21229: AND
21230: IFFALSE 21452
21232: GO 21234
21234: DISABLE
21235: LD_INT 0
21237: PPUSH
21238: PPUSH
21239: PPUSH
21240: PPUSH
21241: PPUSH
21242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21243: LD_ADDR_VAR 0 6
21247: PUSH
21248: LD_INT 22
21250: PUSH
21251: LD_OWVAR 2
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 21
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 3
21272: PUSH
21273: LD_INT 23
21275: PUSH
21276: LD_INT 0
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: LIST
21291: PPUSH
21292: CALL_OW 69
21296: ST_TO_ADDR
// if not tmp then
21297: LD_VAR 0 6
21301: NOT
21302: IFFALSE 21306
// exit ;
21304: GO 21452
// s1 := rand ( 1 , 4 ) ;
21306: LD_ADDR_VAR 0 2
21310: PUSH
21311: LD_INT 1
21313: PPUSH
21314: LD_INT 4
21316: PPUSH
21317: CALL_OW 12
21321: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21322: LD_ADDR_VAR 0 4
21326: PUSH
21327: LD_VAR 0 6
21331: PUSH
21332: LD_INT 1
21334: ARRAY
21335: PPUSH
21336: LD_VAR 0 2
21340: PPUSH
21341: CALL_OW 259
21345: ST_TO_ADDR
// if s1 = 1 then
21346: LD_VAR 0 2
21350: PUSH
21351: LD_INT 1
21353: EQUAL
21354: IFFALSE 21374
// s2 := rand ( 2 , 4 ) else
21356: LD_ADDR_VAR 0 3
21360: PUSH
21361: LD_INT 2
21363: PPUSH
21364: LD_INT 4
21366: PPUSH
21367: CALL_OW 12
21371: ST_TO_ADDR
21372: GO 21382
// s2 := 1 ;
21374: LD_ADDR_VAR 0 3
21378: PUSH
21379: LD_INT 1
21381: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21382: LD_ADDR_VAR 0 5
21386: PUSH
21387: LD_VAR 0 6
21391: PUSH
21392: LD_INT 1
21394: ARRAY
21395: PPUSH
21396: LD_VAR 0 3
21400: PPUSH
21401: CALL_OW 259
21405: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21406: LD_VAR 0 6
21410: PUSH
21411: LD_INT 1
21413: ARRAY
21414: PPUSH
21415: LD_VAR 0 2
21419: PPUSH
21420: LD_VAR 0 5
21424: PPUSH
21425: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21429: LD_VAR 0 6
21433: PUSH
21434: LD_INT 1
21436: ARRAY
21437: PPUSH
21438: LD_VAR 0 3
21442: PPUSH
21443: LD_VAR 0 4
21447: PPUSH
21448: CALL_OW 237
// end ;
21452: PPOPN 6
21454: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21455: LD_EXP 65
21459: PUSH
21460: LD_EXP 112
21464: AND
21465: IFFALSE 21544
21467: GO 21469
21469: DISABLE
21470: LD_INT 0
21472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21473: LD_ADDR_VAR 0 1
21477: PUSH
21478: LD_INT 22
21480: PUSH
21481: LD_OWVAR 2
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 30
21492: PUSH
21493: LD_INT 3
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PPUSH
21504: CALL_OW 69
21508: ST_TO_ADDR
// if not tmp then
21509: LD_VAR 0 1
21513: NOT
21514: IFFALSE 21518
// exit ;
21516: GO 21544
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21518: LD_VAR 0 1
21522: PUSH
21523: LD_INT 1
21525: PPUSH
21526: LD_VAR 0 1
21530: PPUSH
21531: CALL_OW 12
21535: ARRAY
21536: PPUSH
21537: LD_INT 1
21539: PPUSH
21540: CALL_OW 234
// end ;
21544: PPOPN 1
21546: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21547: LD_EXP 65
21551: PUSH
21552: LD_EXP 113
21556: AND
21557: IFFALSE 21669
21559: GO 21561
21561: DISABLE
21562: LD_INT 0
21564: PPUSH
21565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21566: LD_ADDR_VAR 0 2
21570: PUSH
21571: LD_INT 22
21573: PUSH
21574: LD_OWVAR 2
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 2
21585: PUSH
21586: LD_INT 30
21588: PUSH
21589: LD_INT 27
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 30
21598: PUSH
21599: LD_INT 26
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 30
21608: PUSH
21609: LD_INT 28
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PPUSH
21626: CALL_OW 69
21630: ST_TO_ADDR
// if not tmp then
21631: LD_VAR 0 2
21635: NOT
21636: IFFALSE 21640
// exit ;
21638: GO 21669
// for i in tmp do
21640: LD_ADDR_VAR 0 1
21644: PUSH
21645: LD_VAR 0 2
21649: PUSH
21650: FOR_IN
21651: IFFALSE 21667
// SetLives ( i , 1 ) ;
21653: LD_VAR 0 1
21657: PPUSH
21658: LD_INT 1
21660: PPUSH
21661: CALL_OW 234
21665: GO 21650
21667: POP
21668: POP
// end ;
21669: PPOPN 2
21671: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21672: LD_EXP 65
21676: PUSH
21677: LD_EXP 114
21681: AND
21682: IFFALSE 21969
21684: GO 21686
21686: DISABLE
21687: LD_INT 0
21689: PPUSH
21690: PPUSH
21691: PPUSH
// begin i := rand ( 1 , 7 ) ;
21692: LD_ADDR_VAR 0 1
21696: PUSH
21697: LD_INT 1
21699: PPUSH
21700: LD_INT 7
21702: PPUSH
21703: CALL_OW 12
21707: ST_TO_ADDR
// case i of 1 :
21708: LD_VAR 0 1
21712: PUSH
21713: LD_INT 1
21715: DOUBLE
21716: EQUAL
21717: IFTRUE 21721
21719: GO 21731
21721: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21722: LD_STRING earthquake(getX(game), 0, 32)
21724: PPUSH
21725: CALL_OW 559
21729: GO 21969
21731: LD_INT 2
21733: DOUBLE
21734: EQUAL
21735: IFTRUE 21739
21737: GO 21753
21739: POP
// begin ToLua ( displayStucuk(); ) ;
21740: LD_STRING displayStucuk();
21742: PPUSH
21743: CALL_OW 559
// ResetFog ;
21747: CALL_OW 335
// end ; 3 :
21751: GO 21969
21753: LD_INT 3
21755: DOUBLE
21756: EQUAL
21757: IFTRUE 21761
21759: GO 21865
21761: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21762: LD_ADDR_VAR 0 2
21766: PUSH
21767: LD_INT 22
21769: PUSH
21770: LD_OWVAR 2
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 25
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PPUSH
21793: CALL_OW 69
21797: ST_TO_ADDR
// if not tmp then
21798: LD_VAR 0 2
21802: NOT
21803: IFFALSE 21807
// exit ;
21805: GO 21969
// un := tmp [ rand ( 1 , tmp ) ] ;
21807: LD_ADDR_VAR 0 3
21811: PUSH
21812: LD_VAR 0 2
21816: PUSH
21817: LD_INT 1
21819: PPUSH
21820: LD_VAR 0 2
21824: PPUSH
21825: CALL_OW 12
21829: ARRAY
21830: ST_TO_ADDR
// if Crawls ( un ) then
21831: LD_VAR 0 3
21835: PPUSH
21836: CALL_OW 318
21840: IFFALSE 21851
// ComWalk ( un ) ;
21842: LD_VAR 0 3
21846: PPUSH
21847: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21851: LD_VAR 0 3
21855: PPUSH
21856: LD_INT 8
21858: PPUSH
21859: CALL_OW 336
// end ; 4 :
21863: GO 21969
21865: LD_INT 4
21867: DOUBLE
21868: EQUAL
21869: IFTRUE 21873
21871: GO 21947
21873: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21874: LD_ADDR_VAR 0 2
21878: PUSH
21879: LD_INT 22
21881: PUSH
21882: LD_OWVAR 2
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 30
21893: PUSH
21894: LD_INT 29
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PPUSH
21905: CALL_OW 69
21909: ST_TO_ADDR
// if not tmp then
21910: LD_VAR 0 2
21914: NOT
21915: IFFALSE 21919
// exit ;
21917: GO 21969
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21919: LD_VAR 0 2
21923: PUSH
21924: LD_INT 1
21926: ARRAY
21927: PPUSH
21928: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21932: LD_VAR 0 2
21936: PUSH
21937: LD_INT 1
21939: ARRAY
21940: PPUSH
21941: CALL_OW 65
// end ; 5 .. 7 :
21945: GO 21969
21947: LD_INT 5
21949: DOUBLE
21950: GREATEREQUAL
21951: IFFALSE 21959
21953: LD_INT 7
21955: DOUBLE
21956: LESSEQUAL
21957: IFTRUE 21961
21959: GO 21968
21961: POP
// StreamSibBomb ; end ;
21962: CALL 18206 0 0
21966: GO 21969
21968: POP
// end ;
21969: PPOPN 3
21971: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21972: LD_EXP 65
21976: PUSH
21977: LD_EXP 115
21981: AND
21982: IFFALSE 22138
21984: GO 21986
21986: DISABLE
21987: LD_INT 0
21989: PPUSH
21990: PPUSH
21991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21992: LD_ADDR_VAR 0 2
21996: PUSH
21997: LD_INT 81
21999: PUSH
22000: LD_OWVAR 2
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 2
22011: PUSH
22012: LD_INT 21
22014: PUSH
22015: LD_INT 1
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 21
22024: PUSH
22025: LD_INT 2
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: LIST
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 69
22045: ST_TO_ADDR
// if not tmp then
22046: LD_VAR 0 2
22050: NOT
22051: IFFALSE 22055
// exit ;
22053: GO 22138
// p := 0 ;
22055: LD_ADDR_VAR 0 3
22059: PUSH
22060: LD_INT 0
22062: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22063: LD_INT 35
22065: PPUSH
22066: CALL_OW 67
// p := p + 1 ;
22070: LD_ADDR_VAR 0 3
22074: PUSH
22075: LD_VAR 0 3
22079: PUSH
22080: LD_INT 1
22082: PLUS
22083: ST_TO_ADDR
// for i in tmp do
22084: LD_ADDR_VAR 0 1
22088: PUSH
22089: LD_VAR 0 2
22093: PUSH
22094: FOR_IN
22095: IFFALSE 22126
// if GetLives ( i ) < 1000 then
22097: LD_VAR 0 1
22101: PPUSH
22102: CALL_OW 256
22106: PUSH
22107: LD_INT 1000
22109: LESS
22110: IFFALSE 22124
// SetLives ( i , 1000 ) ;
22112: LD_VAR 0 1
22116: PPUSH
22117: LD_INT 1000
22119: PPUSH
22120: CALL_OW 234
22124: GO 22094
22126: POP
22127: POP
// until p > 20 ;
22128: LD_VAR 0 3
22132: PUSH
22133: LD_INT 20
22135: GREATER
22136: IFFALSE 22063
// end ;
22138: PPOPN 3
22140: END
// every 0 0$1 trigger StreamModeActive and sTime do
22141: LD_EXP 65
22145: PUSH
22146: LD_EXP 116
22150: AND
22151: IFFALSE 22186
22153: GO 22155
22155: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22156: LD_INT 28
22158: PPUSH
22159: LD_OWVAR 2
22163: PPUSH
22164: LD_INT 2
22166: PPUSH
22167: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22171: LD_INT 30
22173: PPUSH
22174: LD_OWVAR 2
22178: PPUSH
22179: LD_INT 2
22181: PPUSH
22182: CALL_OW 322
// end ;
22186: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22187: LD_EXP 65
22191: PUSH
22192: LD_EXP 117
22196: AND
22197: IFFALSE 22318
22199: GO 22201
22201: DISABLE
22202: LD_INT 0
22204: PPUSH
22205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22206: LD_ADDR_VAR 0 2
22210: PUSH
22211: LD_INT 22
22213: PUSH
22214: LD_OWVAR 2
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 21
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 3
22235: PUSH
22236: LD_INT 23
22238: PUSH
22239: LD_INT 0
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: LIST
22254: PPUSH
22255: CALL_OW 69
22259: ST_TO_ADDR
// if not tmp then
22260: LD_VAR 0 2
22264: NOT
22265: IFFALSE 22269
// exit ;
22267: GO 22318
// for i in tmp do
22269: LD_ADDR_VAR 0 1
22273: PUSH
22274: LD_VAR 0 2
22278: PUSH
22279: FOR_IN
22280: IFFALSE 22316
// begin if Crawls ( i ) then
22282: LD_VAR 0 1
22286: PPUSH
22287: CALL_OW 318
22291: IFFALSE 22302
// ComWalk ( i ) ;
22293: LD_VAR 0 1
22297: PPUSH
22298: CALL_OW 138
// SetClass ( i , 2 ) ;
22302: LD_VAR 0 1
22306: PPUSH
22307: LD_INT 2
22309: PPUSH
22310: CALL_OW 336
// end ;
22314: GO 22279
22316: POP
22317: POP
// end ;
22318: PPOPN 2
22320: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22321: LD_EXP 65
22325: PUSH
22326: LD_EXP 118
22330: AND
22331: IFFALSE 22619
22333: GO 22335
22335: DISABLE
22336: LD_INT 0
22338: PPUSH
22339: PPUSH
22340: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22341: LD_OWVAR 2
22345: PPUSH
22346: LD_INT 9
22348: PPUSH
22349: LD_INT 1
22351: PPUSH
22352: LD_INT 1
22354: PPUSH
22355: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22359: LD_INT 9
22361: PPUSH
22362: LD_OWVAR 2
22366: PPUSH
22367: CALL_OW 343
// uc_side := 9 ;
22371: LD_ADDR_OWVAR 20
22375: PUSH
22376: LD_INT 9
22378: ST_TO_ADDR
// uc_nation := 2 ;
22379: LD_ADDR_OWVAR 21
22383: PUSH
22384: LD_INT 2
22386: ST_TO_ADDR
// hc_name := Dark Warrior ;
22387: LD_ADDR_OWVAR 26
22391: PUSH
22392: LD_STRING Dark Warrior
22394: ST_TO_ADDR
// hc_gallery :=  ;
22395: LD_ADDR_OWVAR 33
22399: PUSH
22400: LD_STRING 
22402: ST_TO_ADDR
// hc_noskilllimit := true ;
22403: LD_ADDR_OWVAR 76
22407: PUSH
22408: LD_INT 1
22410: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22411: LD_ADDR_OWVAR 31
22415: PUSH
22416: LD_INT 30
22418: PUSH
22419: LD_INT 30
22421: PUSH
22422: LD_INT 30
22424: PUSH
22425: LD_INT 30
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: ST_TO_ADDR
// un := CreateHuman ;
22434: LD_ADDR_VAR 0 3
22438: PUSH
22439: CALL_OW 44
22443: ST_TO_ADDR
// hc_noskilllimit := false ;
22444: LD_ADDR_OWVAR 76
22448: PUSH
22449: LD_INT 0
22451: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22452: LD_VAR 0 3
22456: PPUSH
22457: LD_INT 1
22459: PPUSH
22460: CALL_OW 51
// ToLua ( playRanger() ) ;
22464: LD_STRING playRanger()
22466: PPUSH
22467: CALL_OW 559
// p := 0 ;
22471: LD_ADDR_VAR 0 2
22475: PUSH
22476: LD_INT 0
22478: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22479: LD_INT 35
22481: PPUSH
22482: CALL_OW 67
// p := p + 1 ;
22486: LD_ADDR_VAR 0 2
22490: PUSH
22491: LD_VAR 0 2
22495: PUSH
22496: LD_INT 1
22498: PLUS
22499: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22500: LD_VAR 0 3
22504: PPUSH
22505: CALL_OW 256
22509: PUSH
22510: LD_INT 1000
22512: LESS
22513: IFFALSE 22527
// SetLives ( un , 1000 ) ;
22515: LD_VAR 0 3
22519: PPUSH
22520: LD_INT 1000
22522: PPUSH
22523: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22527: LD_VAR 0 3
22531: PPUSH
22532: LD_INT 81
22534: PUSH
22535: LD_OWVAR 2
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 91
22546: PUSH
22547: LD_VAR 0 3
22551: PUSH
22552: LD_INT 30
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: LIST
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PPUSH
22564: CALL_OW 69
22568: PPUSH
22569: LD_VAR 0 3
22573: PPUSH
22574: CALL_OW 74
22578: PPUSH
22579: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22583: LD_VAR 0 2
22587: PUSH
22588: LD_INT 80
22590: GREATER
22591: PUSH
22592: LD_VAR 0 3
22596: PPUSH
22597: CALL_OW 301
22601: OR
22602: IFFALSE 22479
// if un then
22604: LD_VAR 0 3
22608: IFFALSE 22619
// RemoveUnit ( un ) ;
22610: LD_VAR 0 3
22614: PPUSH
22615: CALL_OW 64
// end ;
22619: PPOPN 3
22621: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22622: LD_EXP 119
22626: IFFALSE 22742
22628: GO 22630
22630: DISABLE
22631: LD_INT 0
22633: PPUSH
22634: PPUSH
22635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22636: LD_ADDR_VAR 0 2
22640: PUSH
22641: LD_INT 81
22643: PUSH
22644: LD_OWVAR 2
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 21
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PPUSH
22667: CALL_OW 69
22671: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22672: LD_STRING playComputer()
22674: PPUSH
22675: CALL_OW 559
// if not tmp then
22679: LD_VAR 0 2
22683: NOT
22684: IFFALSE 22688
// exit ;
22686: GO 22742
// for i in tmp do
22688: LD_ADDR_VAR 0 1
22692: PUSH
22693: LD_VAR 0 2
22697: PUSH
22698: FOR_IN
22699: IFFALSE 22740
// for j := 1 to 4 do
22701: LD_ADDR_VAR 0 3
22705: PUSH
22706: DOUBLE
22707: LD_INT 1
22709: DEC
22710: ST_TO_ADDR
22711: LD_INT 4
22713: PUSH
22714: FOR_TO
22715: IFFALSE 22736
// SetSkill ( i , j , 10 ) ;
22717: LD_VAR 0 1
22721: PPUSH
22722: LD_VAR 0 3
22726: PPUSH
22727: LD_INT 10
22729: PPUSH
22730: CALL_OW 237
22734: GO 22714
22736: POP
22737: POP
22738: GO 22698
22740: POP
22741: POP
// end ;
22742: PPOPN 3
22744: END
// every 0 0$1 trigger s30 do var i , tmp ;
22745: LD_EXP 120
22749: IFFALSE 22818
22751: GO 22753
22753: DISABLE
22754: LD_INT 0
22756: PPUSH
22757: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22758: LD_ADDR_VAR 0 2
22762: PUSH
22763: LD_INT 22
22765: PUSH
22766: LD_OWVAR 2
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PPUSH
22775: CALL_OW 69
22779: ST_TO_ADDR
// if not tmp then
22780: LD_VAR 0 2
22784: NOT
22785: IFFALSE 22789
// exit ;
22787: GO 22818
// for i in tmp do
22789: LD_ADDR_VAR 0 1
22793: PUSH
22794: LD_VAR 0 2
22798: PUSH
22799: FOR_IN
22800: IFFALSE 22816
// SetLives ( i , 300 ) ;
22802: LD_VAR 0 1
22806: PPUSH
22807: LD_INT 300
22809: PPUSH
22810: CALL_OW 234
22814: GO 22799
22816: POP
22817: POP
// end ;
22818: PPOPN 2
22820: END
// every 0 0$1 trigger s60 do var i , tmp ;
22821: LD_EXP 121
22825: IFFALSE 22894
22827: GO 22829
22829: DISABLE
22830: LD_INT 0
22832: PPUSH
22833: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22834: LD_ADDR_VAR 0 2
22838: PUSH
22839: LD_INT 22
22841: PUSH
22842: LD_OWVAR 2
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PPUSH
22851: CALL_OW 69
22855: ST_TO_ADDR
// if not tmp then
22856: LD_VAR 0 2
22860: NOT
22861: IFFALSE 22865
// exit ;
22863: GO 22894
// for i in tmp do
22865: LD_ADDR_VAR 0 1
22869: PUSH
22870: LD_VAR 0 2
22874: PUSH
22875: FOR_IN
22876: IFFALSE 22892
// SetLives ( i , 600 ) ;
22878: LD_VAR 0 1
22882: PPUSH
22883: LD_INT 600
22885: PPUSH
22886: CALL_OW 234
22890: GO 22875
22892: POP
22893: POP
// end ;
22894: PPOPN 2
22896: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22897: LD_INT 0
22899: PPUSH
// case cmd of 301 :
22900: LD_VAR 0 1
22904: PUSH
22905: LD_INT 301
22907: DOUBLE
22908: EQUAL
22909: IFTRUE 22913
22911: GO 22945
22913: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22914: LD_VAR 0 6
22918: PPUSH
22919: LD_VAR 0 7
22923: PPUSH
22924: LD_VAR 0 8
22928: PPUSH
22929: LD_VAR 0 4
22933: PPUSH
22934: LD_VAR 0 5
22938: PPUSH
22939: CALL 24146 0 5
22943: GO 23066
22945: LD_INT 302
22947: DOUBLE
22948: EQUAL
22949: IFTRUE 22953
22951: GO 22990
22953: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22954: LD_VAR 0 6
22958: PPUSH
22959: LD_VAR 0 7
22963: PPUSH
22964: LD_VAR 0 8
22968: PPUSH
22969: LD_VAR 0 9
22973: PPUSH
22974: LD_VAR 0 4
22978: PPUSH
22979: LD_VAR 0 5
22983: PPUSH
22984: CALL 24237 0 6
22988: GO 23066
22990: LD_INT 303
22992: DOUBLE
22993: EQUAL
22994: IFTRUE 22998
22996: GO 23035
22998: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22999: LD_VAR 0 6
23003: PPUSH
23004: LD_VAR 0 7
23008: PPUSH
23009: LD_VAR 0 8
23013: PPUSH
23014: LD_VAR 0 9
23018: PPUSH
23019: LD_VAR 0 4
23023: PPUSH
23024: LD_VAR 0 5
23028: PPUSH
23029: CALL 23071 0 6
23033: GO 23066
23035: LD_INT 304
23037: DOUBLE
23038: EQUAL
23039: IFTRUE 23043
23041: GO 23065
23043: POP
// hHackTeleport ( unit , x , y ) ; end ;
23044: LD_VAR 0 2
23048: PPUSH
23049: LD_VAR 0 4
23053: PPUSH
23054: LD_VAR 0 5
23058: PPUSH
23059: CALL 24830 0 3
23063: GO 23066
23065: POP
// end ;
23066: LD_VAR 0 12
23070: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23071: LD_INT 0
23073: PPUSH
23074: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23075: LD_VAR 0 1
23079: PUSH
23080: LD_INT 1
23082: LESS
23083: PUSH
23084: LD_VAR 0 1
23088: PUSH
23089: LD_INT 3
23091: GREATER
23092: OR
23093: PUSH
23094: LD_VAR 0 5
23098: PPUSH
23099: LD_VAR 0 6
23103: PPUSH
23104: CALL_OW 428
23108: OR
23109: IFFALSE 23113
// exit ;
23111: GO 23833
// uc_side := your_side ;
23113: LD_ADDR_OWVAR 20
23117: PUSH
23118: LD_OWVAR 2
23122: ST_TO_ADDR
// uc_nation := nation ;
23123: LD_ADDR_OWVAR 21
23127: PUSH
23128: LD_VAR 0 1
23132: ST_TO_ADDR
// bc_level = 1 ;
23133: LD_ADDR_OWVAR 43
23137: PUSH
23138: LD_INT 1
23140: ST_TO_ADDR
// case btype of 1 :
23141: LD_VAR 0 2
23145: PUSH
23146: LD_INT 1
23148: DOUBLE
23149: EQUAL
23150: IFTRUE 23154
23152: GO 23165
23154: POP
// bc_type := b_depot ; 2 :
23155: LD_ADDR_OWVAR 42
23159: PUSH
23160: LD_INT 0
23162: ST_TO_ADDR
23163: GO 23777
23165: LD_INT 2
23167: DOUBLE
23168: EQUAL
23169: IFTRUE 23173
23171: GO 23184
23173: POP
// bc_type := b_warehouse ; 3 :
23174: LD_ADDR_OWVAR 42
23178: PUSH
23179: LD_INT 1
23181: ST_TO_ADDR
23182: GO 23777
23184: LD_INT 3
23186: DOUBLE
23187: EQUAL
23188: IFTRUE 23192
23190: GO 23203
23192: POP
// bc_type := b_lab ; 4 .. 9 :
23193: LD_ADDR_OWVAR 42
23197: PUSH
23198: LD_INT 6
23200: ST_TO_ADDR
23201: GO 23777
23203: LD_INT 4
23205: DOUBLE
23206: GREATEREQUAL
23207: IFFALSE 23215
23209: LD_INT 9
23211: DOUBLE
23212: LESSEQUAL
23213: IFTRUE 23217
23215: GO 23269
23217: POP
// begin bc_type := b_lab_half ;
23218: LD_ADDR_OWVAR 42
23222: PUSH
23223: LD_INT 7
23225: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23226: LD_ADDR_OWVAR 44
23230: PUSH
23231: LD_INT 10
23233: PUSH
23234: LD_INT 11
23236: PUSH
23237: LD_INT 12
23239: PUSH
23240: LD_INT 15
23242: PUSH
23243: LD_INT 14
23245: PUSH
23246: LD_INT 13
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: PUSH
23257: LD_VAR 0 2
23261: PUSH
23262: LD_INT 3
23264: MINUS
23265: ARRAY
23266: ST_TO_ADDR
// end ; 10 .. 13 :
23267: GO 23777
23269: LD_INT 10
23271: DOUBLE
23272: GREATEREQUAL
23273: IFFALSE 23281
23275: LD_INT 13
23277: DOUBLE
23278: LESSEQUAL
23279: IFTRUE 23283
23281: GO 23360
23283: POP
// begin bc_type := b_lab_full ;
23284: LD_ADDR_OWVAR 42
23288: PUSH
23289: LD_INT 8
23291: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23292: LD_ADDR_OWVAR 44
23296: PUSH
23297: LD_INT 10
23299: PUSH
23300: LD_INT 12
23302: PUSH
23303: LD_INT 14
23305: PUSH
23306: LD_INT 13
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: PUSH
23315: LD_VAR 0 2
23319: PUSH
23320: LD_INT 9
23322: MINUS
23323: ARRAY
23324: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23325: LD_ADDR_OWVAR 45
23329: PUSH
23330: LD_INT 11
23332: PUSH
23333: LD_INT 15
23335: PUSH
23336: LD_INT 12
23338: PUSH
23339: LD_INT 15
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: PUSH
23348: LD_VAR 0 2
23352: PUSH
23353: LD_INT 9
23355: MINUS
23356: ARRAY
23357: ST_TO_ADDR
// end ; 14 :
23358: GO 23777
23360: LD_INT 14
23362: DOUBLE
23363: EQUAL
23364: IFTRUE 23368
23366: GO 23379
23368: POP
// bc_type := b_workshop ; 15 :
23369: LD_ADDR_OWVAR 42
23373: PUSH
23374: LD_INT 2
23376: ST_TO_ADDR
23377: GO 23777
23379: LD_INT 15
23381: DOUBLE
23382: EQUAL
23383: IFTRUE 23387
23385: GO 23398
23387: POP
// bc_type := b_factory ; 16 :
23388: LD_ADDR_OWVAR 42
23392: PUSH
23393: LD_INT 3
23395: ST_TO_ADDR
23396: GO 23777
23398: LD_INT 16
23400: DOUBLE
23401: EQUAL
23402: IFTRUE 23406
23404: GO 23417
23406: POP
// bc_type := b_ext_gun ; 17 :
23407: LD_ADDR_OWVAR 42
23411: PUSH
23412: LD_INT 17
23414: ST_TO_ADDR
23415: GO 23777
23417: LD_INT 17
23419: DOUBLE
23420: EQUAL
23421: IFTRUE 23425
23423: GO 23453
23425: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23426: LD_ADDR_OWVAR 42
23430: PUSH
23431: LD_INT 19
23433: PUSH
23434: LD_INT 23
23436: PUSH
23437: LD_INT 19
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: LIST
23444: PUSH
23445: LD_VAR 0 1
23449: ARRAY
23450: ST_TO_ADDR
23451: GO 23777
23453: LD_INT 18
23455: DOUBLE
23456: EQUAL
23457: IFTRUE 23461
23459: GO 23472
23461: POP
// bc_type := b_ext_radar ; 19 :
23462: LD_ADDR_OWVAR 42
23466: PUSH
23467: LD_INT 20
23469: ST_TO_ADDR
23470: GO 23777
23472: LD_INT 19
23474: DOUBLE
23475: EQUAL
23476: IFTRUE 23480
23478: GO 23491
23480: POP
// bc_type := b_ext_radio ; 20 :
23481: LD_ADDR_OWVAR 42
23485: PUSH
23486: LD_INT 22
23488: ST_TO_ADDR
23489: GO 23777
23491: LD_INT 20
23493: DOUBLE
23494: EQUAL
23495: IFTRUE 23499
23497: GO 23510
23499: POP
// bc_type := b_ext_siberium ; 21 :
23500: LD_ADDR_OWVAR 42
23504: PUSH
23505: LD_INT 21
23507: ST_TO_ADDR
23508: GO 23777
23510: LD_INT 21
23512: DOUBLE
23513: EQUAL
23514: IFTRUE 23518
23516: GO 23529
23518: POP
// bc_type := b_ext_computer ; 22 :
23519: LD_ADDR_OWVAR 42
23523: PUSH
23524: LD_INT 24
23526: ST_TO_ADDR
23527: GO 23777
23529: LD_INT 22
23531: DOUBLE
23532: EQUAL
23533: IFTRUE 23537
23535: GO 23548
23537: POP
// bc_type := b_ext_track ; 23 :
23538: LD_ADDR_OWVAR 42
23542: PUSH
23543: LD_INT 16
23545: ST_TO_ADDR
23546: GO 23777
23548: LD_INT 23
23550: DOUBLE
23551: EQUAL
23552: IFTRUE 23556
23554: GO 23567
23556: POP
// bc_type := b_ext_laser ; 24 :
23557: LD_ADDR_OWVAR 42
23561: PUSH
23562: LD_INT 25
23564: ST_TO_ADDR
23565: GO 23777
23567: LD_INT 24
23569: DOUBLE
23570: EQUAL
23571: IFTRUE 23575
23573: GO 23586
23575: POP
// bc_type := b_control_tower ; 25 :
23576: LD_ADDR_OWVAR 42
23580: PUSH
23581: LD_INT 36
23583: ST_TO_ADDR
23584: GO 23777
23586: LD_INT 25
23588: DOUBLE
23589: EQUAL
23590: IFTRUE 23594
23592: GO 23605
23594: POP
// bc_type := b_breastwork ; 26 :
23595: LD_ADDR_OWVAR 42
23599: PUSH
23600: LD_INT 31
23602: ST_TO_ADDR
23603: GO 23777
23605: LD_INT 26
23607: DOUBLE
23608: EQUAL
23609: IFTRUE 23613
23611: GO 23624
23613: POP
// bc_type := b_bunker ; 27 :
23614: LD_ADDR_OWVAR 42
23618: PUSH
23619: LD_INT 32
23621: ST_TO_ADDR
23622: GO 23777
23624: LD_INT 27
23626: DOUBLE
23627: EQUAL
23628: IFTRUE 23632
23630: GO 23643
23632: POP
// bc_type := b_turret ; 28 :
23633: LD_ADDR_OWVAR 42
23637: PUSH
23638: LD_INT 33
23640: ST_TO_ADDR
23641: GO 23777
23643: LD_INT 28
23645: DOUBLE
23646: EQUAL
23647: IFTRUE 23651
23649: GO 23662
23651: POP
// bc_type := b_armoury ; 29 :
23652: LD_ADDR_OWVAR 42
23656: PUSH
23657: LD_INT 4
23659: ST_TO_ADDR
23660: GO 23777
23662: LD_INT 29
23664: DOUBLE
23665: EQUAL
23666: IFTRUE 23670
23668: GO 23681
23670: POP
// bc_type := b_barracks ; 30 :
23671: LD_ADDR_OWVAR 42
23675: PUSH
23676: LD_INT 5
23678: ST_TO_ADDR
23679: GO 23777
23681: LD_INT 30
23683: DOUBLE
23684: EQUAL
23685: IFTRUE 23689
23687: GO 23700
23689: POP
// bc_type := b_solar_power ; 31 :
23690: LD_ADDR_OWVAR 42
23694: PUSH
23695: LD_INT 27
23697: ST_TO_ADDR
23698: GO 23777
23700: LD_INT 31
23702: DOUBLE
23703: EQUAL
23704: IFTRUE 23708
23706: GO 23719
23708: POP
// bc_type := b_oil_power ; 32 :
23709: LD_ADDR_OWVAR 42
23713: PUSH
23714: LD_INT 26
23716: ST_TO_ADDR
23717: GO 23777
23719: LD_INT 32
23721: DOUBLE
23722: EQUAL
23723: IFTRUE 23727
23725: GO 23738
23727: POP
// bc_type := b_siberite_power ; 33 :
23728: LD_ADDR_OWVAR 42
23732: PUSH
23733: LD_INT 28
23735: ST_TO_ADDR
23736: GO 23777
23738: LD_INT 33
23740: DOUBLE
23741: EQUAL
23742: IFTRUE 23746
23744: GO 23757
23746: POP
// bc_type := b_oil_mine ; 34 :
23747: LD_ADDR_OWVAR 42
23751: PUSH
23752: LD_INT 29
23754: ST_TO_ADDR
23755: GO 23777
23757: LD_INT 34
23759: DOUBLE
23760: EQUAL
23761: IFTRUE 23765
23763: GO 23776
23765: POP
// bc_type := b_siberite_mine ; end ;
23766: LD_ADDR_OWVAR 42
23770: PUSH
23771: LD_INT 30
23773: ST_TO_ADDR
23774: GO 23777
23776: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23777: LD_ADDR_VAR 0 8
23781: PUSH
23782: LD_VAR 0 5
23786: PPUSH
23787: LD_VAR 0 6
23791: PPUSH
23792: LD_VAR 0 3
23796: PPUSH
23797: CALL_OW 47
23801: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23802: LD_OWVAR 42
23806: PUSH
23807: LD_INT 32
23809: PUSH
23810: LD_INT 33
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: IN
23817: IFFALSE 23833
// PlaceWeaponTurret ( b , weapon ) ;
23819: LD_VAR 0 8
23823: PPUSH
23824: LD_VAR 0 4
23828: PPUSH
23829: CALL_OW 431
// end ;
23833: LD_VAR 0 7
23837: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23838: LD_INT 0
23840: PPUSH
23841: PPUSH
23842: PPUSH
23843: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23844: LD_ADDR_VAR 0 4
23848: PUSH
23849: LD_INT 22
23851: PUSH
23852: LD_OWVAR 2
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 2
23863: PUSH
23864: LD_INT 30
23866: PUSH
23867: LD_INT 0
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 30
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: LIST
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PPUSH
23893: CALL_OW 69
23897: ST_TO_ADDR
// if not tmp then
23898: LD_VAR 0 4
23902: NOT
23903: IFFALSE 23907
// exit ;
23905: GO 23966
// for i in tmp do
23907: LD_ADDR_VAR 0 2
23911: PUSH
23912: LD_VAR 0 4
23916: PUSH
23917: FOR_IN
23918: IFFALSE 23964
// for j = 1 to 3 do
23920: LD_ADDR_VAR 0 3
23924: PUSH
23925: DOUBLE
23926: LD_INT 1
23928: DEC
23929: ST_TO_ADDR
23930: LD_INT 3
23932: PUSH
23933: FOR_TO
23934: IFFALSE 23960
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23936: LD_VAR 0 2
23940: PPUSH
23941: CALL_OW 274
23945: PPUSH
23946: LD_VAR 0 3
23950: PPUSH
23951: LD_INT 99999
23953: PPUSH
23954: CALL_OW 277
23958: GO 23933
23960: POP
23961: POP
23962: GO 23917
23964: POP
23965: POP
// end ;
23966: LD_VAR 0 1
23970: RET
// export function hHackSetLevel10 ; var i , j ; begin
23971: LD_INT 0
23973: PPUSH
23974: PPUSH
23975: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23976: LD_ADDR_VAR 0 2
23980: PUSH
23981: LD_INT 21
23983: PUSH
23984: LD_INT 1
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PPUSH
23991: CALL_OW 69
23995: PUSH
23996: FOR_IN
23997: IFFALSE 24049
// if IsSelected ( i ) then
23999: LD_VAR 0 2
24003: PPUSH
24004: CALL_OW 306
24008: IFFALSE 24047
// begin for j := 1 to 4 do
24010: LD_ADDR_VAR 0 3
24014: PUSH
24015: DOUBLE
24016: LD_INT 1
24018: DEC
24019: ST_TO_ADDR
24020: LD_INT 4
24022: PUSH
24023: FOR_TO
24024: IFFALSE 24045
// SetSkill ( i , j , 10 ) ;
24026: LD_VAR 0 2
24030: PPUSH
24031: LD_VAR 0 3
24035: PPUSH
24036: LD_INT 10
24038: PPUSH
24039: CALL_OW 237
24043: GO 24023
24045: POP
24046: POP
// end ;
24047: GO 23996
24049: POP
24050: POP
// end ;
24051: LD_VAR 0 1
24055: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24056: LD_INT 0
24058: PPUSH
24059: PPUSH
24060: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24061: LD_ADDR_VAR 0 2
24065: PUSH
24066: LD_INT 22
24068: PUSH
24069: LD_OWVAR 2
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 21
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PPUSH
24092: CALL_OW 69
24096: PUSH
24097: FOR_IN
24098: IFFALSE 24139
// begin for j := 1 to 4 do
24100: LD_ADDR_VAR 0 3
24104: PUSH
24105: DOUBLE
24106: LD_INT 1
24108: DEC
24109: ST_TO_ADDR
24110: LD_INT 4
24112: PUSH
24113: FOR_TO
24114: IFFALSE 24135
// SetSkill ( i , j , 10 ) ;
24116: LD_VAR 0 2
24120: PPUSH
24121: LD_VAR 0 3
24125: PPUSH
24126: LD_INT 10
24128: PPUSH
24129: CALL_OW 237
24133: GO 24113
24135: POP
24136: POP
// end ;
24137: GO 24097
24139: POP
24140: POP
// end ;
24141: LD_VAR 0 1
24145: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24146: LD_INT 0
24148: PPUSH
// uc_side := your_side ;
24149: LD_ADDR_OWVAR 20
24153: PUSH
24154: LD_OWVAR 2
24158: ST_TO_ADDR
// uc_nation := nation ;
24159: LD_ADDR_OWVAR 21
24163: PUSH
24164: LD_VAR 0 1
24168: ST_TO_ADDR
// InitHc ;
24169: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24173: LD_INT 0
24175: PPUSH
24176: LD_VAR 0 2
24180: PPUSH
24181: LD_VAR 0 3
24185: PPUSH
24186: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24190: LD_VAR 0 4
24194: PPUSH
24195: LD_VAR 0 5
24199: PPUSH
24200: CALL_OW 428
24204: PUSH
24205: LD_INT 0
24207: EQUAL
24208: IFFALSE 24232
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24210: CALL_OW 44
24214: PPUSH
24215: LD_VAR 0 4
24219: PPUSH
24220: LD_VAR 0 5
24224: PPUSH
24225: LD_INT 1
24227: PPUSH
24228: CALL_OW 48
// end ;
24232: LD_VAR 0 6
24236: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24237: LD_INT 0
24239: PPUSH
24240: PPUSH
// uc_side := your_side ;
24241: LD_ADDR_OWVAR 20
24245: PUSH
24246: LD_OWVAR 2
24250: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24251: LD_VAR 0 1
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: LD_INT 2
24261: PUSH
24262: LD_INT 3
24264: PUSH
24265: LD_INT 4
24267: PUSH
24268: LD_INT 5
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: IN
24278: IFFALSE 24290
// uc_nation := nation_american else
24280: LD_ADDR_OWVAR 21
24284: PUSH
24285: LD_INT 1
24287: ST_TO_ADDR
24288: GO 24333
// if chassis in [ 11 , 12 , 13 , 14 ] then
24290: LD_VAR 0 1
24294: PUSH
24295: LD_INT 11
24297: PUSH
24298: LD_INT 12
24300: PUSH
24301: LD_INT 13
24303: PUSH
24304: LD_INT 14
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: IN
24313: IFFALSE 24325
// uc_nation := nation_arabian else
24315: LD_ADDR_OWVAR 21
24319: PUSH
24320: LD_INT 2
24322: ST_TO_ADDR
24323: GO 24333
// uc_nation := nation_russian ;
24325: LD_ADDR_OWVAR 21
24329: PUSH
24330: LD_INT 3
24332: ST_TO_ADDR
// vc_chassis := chassis ;
24333: LD_ADDR_OWVAR 37
24337: PUSH
24338: LD_VAR 0 1
24342: ST_TO_ADDR
// vc_engine := engine ;
24343: LD_ADDR_OWVAR 39
24347: PUSH
24348: LD_VAR 0 2
24352: ST_TO_ADDR
// vc_control := control ;
24353: LD_ADDR_OWVAR 38
24357: PUSH
24358: LD_VAR 0 3
24362: ST_TO_ADDR
// vc_weapon := weapon ;
24363: LD_ADDR_OWVAR 40
24367: PUSH
24368: LD_VAR 0 4
24372: ST_TO_ADDR
// un := CreateVehicle ;
24373: LD_ADDR_VAR 0 8
24377: PUSH
24378: CALL_OW 45
24382: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24383: LD_VAR 0 8
24387: PPUSH
24388: LD_INT 0
24390: PPUSH
24391: LD_INT 5
24393: PPUSH
24394: CALL_OW 12
24398: PPUSH
24399: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24403: LD_VAR 0 8
24407: PPUSH
24408: LD_VAR 0 5
24412: PPUSH
24413: LD_VAR 0 6
24417: PPUSH
24418: LD_INT 1
24420: PPUSH
24421: CALL_OW 48
// end ;
24425: LD_VAR 0 7
24429: RET
// export hInvincible ; every 1 do
24430: GO 24432
24432: DISABLE
// hInvincible := [ ] ;
24433: LD_ADDR_EXP 122
24437: PUSH
24438: EMPTY
24439: ST_TO_ADDR
24440: END
// every 10 do var i ;
24441: GO 24443
24443: DISABLE
24444: LD_INT 0
24446: PPUSH
// begin enable ;
24447: ENABLE
// if not hInvincible then
24448: LD_EXP 122
24452: NOT
24453: IFFALSE 24457
// exit ;
24455: GO 24501
// for i in hInvincible do
24457: LD_ADDR_VAR 0 1
24461: PUSH
24462: LD_EXP 122
24466: PUSH
24467: FOR_IN
24468: IFFALSE 24499
// if GetLives ( i ) < 1000 then
24470: LD_VAR 0 1
24474: PPUSH
24475: CALL_OW 256
24479: PUSH
24480: LD_INT 1000
24482: LESS
24483: IFFALSE 24497
// SetLives ( i , 1000 ) ;
24485: LD_VAR 0 1
24489: PPUSH
24490: LD_INT 1000
24492: PPUSH
24493: CALL_OW 234
24497: GO 24467
24499: POP
24500: POP
// end ;
24501: PPOPN 1
24503: END
// export function hHackInvincible ; var i ; begin
24504: LD_INT 0
24506: PPUSH
24507: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24508: LD_ADDR_VAR 0 2
24512: PUSH
24513: LD_INT 2
24515: PUSH
24516: LD_INT 21
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 21
24528: PUSH
24529: LD_INT 2
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: LIST
24540: PPUSH
24541: CALL_OW 69
24545: PUSH
24546: FOR_IN
24547: IFFALSE 24608
// if IsSelected ( i ) then
24549: LD_VAR 0 2
24553: PPUSH
24554: CALL_OW 306
24558: IFFALSE 24606
// begin if i in hInvincible then
24560: LD_VAR 0 2
24564: PUSH
24565: LD_EXP 122
24569: IN
24570: IFFALSE 24590
// hInvincible := hInvincible diff i else
24572: LD_ADDR_EXP 122
24576: PUSH
24577: LD_EXP 122
24581: PUSH
24582: LD_VAR 0 2
24586: DIFF
24587: ST_TO_ADDR
24588: GO 24606
// hInvincible := hInvincible union i ;
24590: LD_ADDR_EXP 122
24594: PUSH
24595: LD_EXP 122
24599: PUSH
24600: LD_VAR 0 2
24604: UNION
24605: ST_TO_ADDR
// end ;
24606: GO 24546
24608: POP
24609: POP
// end ;
24610: LD_VAR 0 1
24614: RET
// export function hHackInvisible ; var i , j ; begin
24615: LD_INT 0
24617: PPUSH
24618: PPUSH
24619: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24620: LD_ADDR_VAR 0 2
24624: PUSH
24625: LD_INT 21
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PPUSH
24635: CALL_OW 69
24639: PUSH
24640: FOR_IN
24641: IFFALSE 24665
// if IsSelected ( i ) then
24643: LD_VAR 0 2
24647: PPUSH
24648: CALL_OW 306
24652: IFFALSE 24663
// ComForceInvisible ( i ) ;
24654: LD_VAR 0 2
24658: PPUSH
24659: CALL_OW 496
24663: GO 24640
24665: POP
24666: POP
// end ;
24667: LD_VAR 0 1
24671: RET
// export function hHackChangeYourSide ; begin
24672: LD_INT 0
24674: PPUSH
// if your_side = 8 then
24675: LD_OWVAR 2
24679: PUSH
24680: LD_INT 8
24682: EQUAL
24683: IFFALSE 24695
// your_side := 0 else
24685: LD_ADDR_OWVAR 2
24689: PUSH
24690: LD_INT 0
24692: ST_TO_ADDR
24693: GO 24709
// your_side := your_side + 1 ;
24695: LD_ADDR_OWVAR 2
24699: PUSH
24700: LD_OWVAR 2
24704: PUSH
24705: LD_INT 1
24707: PLUS
24708: ST_TO_ADDR
// end ;
24709: LD_VAR 0 1
24713: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24714: LD_INT 0
24716: PPUSH
24717: PPUSH
24718: PPUSH
// for i in all_units do
24719: LD_ADDR_VAR 0 2
24723: PUSH
24724: LD_OWVAR 3
24728: PUSH
24729: FOR_IN
24730: IFFALSE 24808
// if IsSelected ( i ) then
24732: LD_VAR 0 2
24736: PPUSH
24737: CALL_OW 306
24741: IFFALSE 24806
// begin j := GetSide ( i ) ;
24743: LD_ADDR_VAR 0 3
24747: PUSH
24748: LD_VAR 0 2
24752: PPUSH
24753: CALL_OW 255
24757: ST_TO_ADDR
// if j = 8 then
24758: LD_VAR 0 3
24762: PUSH
24763: LD_INT 8
24765: EQUAL
24766: IFFALSE 24778
// j := 0 else
24768: LD_ADDR_VAR 0 3
24772: PUSH
24773: LD_INT 0
24775: ST_TO_ADDR
24776: GO 24792
// j := j + 1 ;
24778: LD_ADDR_VAR 0 3
24782: PUSH
24783: LD_VAR 0 3
24787: PUSH
24788: LD_INT 1
24790: PLUS
24791: ST_TO_ADDR
// SetSide ( i , j ) ;
24792: LD_VAR 0 2
24796: PPUSH
24797: LD_VAR 0 3
24801: PPUSH
24802: CALL_OW 235
// end ;
24806: GO 24729
24808: POP
24809: POP
// end ;
24810: LD_VAR 0 1
24814: RET
// export function hHackFog ; begin
24815: LD_INT 0
24817: PPUSH
// FogOff ( true ) ;
24818: LD_INT 1
24820: PPUSH
24821: CALL_OW 344
// end ;
24825: LD_VAR 0 1
24829: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24830: LD_INT 0
24832: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24833: LD_VAR 0 1
24837: PPUSH
24838: LD_VAR 0 2
24842: PPUSH
24843: LD_VAR 0 3
24847: PPUSH
24848: LD_INT 1
24850: PPUSH
24851: LD_INT 1
24853: PPUSH
24854: CALL_OW 483
// CenterOnXY ( x , y ) ;
24858: LD_VAR 0 2
24862: PPUSH
24863: LD_VAR 0 3
24867: PPUSH
24868: CALL_OW 84
// end ; end_of_file
24872: LD_VAR 0 4
24876: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24877: LD_INT 0
24879: PPUSH
24880: PPUSH
24881: PPUSH
24882: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24883: LD_VAR 0 1
24887: PPUSH
24888: CALL_OW 264
24892: PUSH
24893: LD_EXP 49
24897: EQUAL
24898: IFFALSE 24970
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24900: LD_INT 68
24902: PPUSH
24903: LD_VAR 0 1
24907: PPUSH
24908: CALL_OW 255
24912: PPUSH
24913: CALL_OW 321
24917: PUSH
24918: LD_INT 2
24920: EQUAL
24921: IFFALSE 24933
// eff := 70 else
24923: LD_ADDR_VAR 0 4
24927: PUSH
24928: LD_INT 70
24930: ST_TO_ADDR
24931: GO 24941
// eff := 30 ;
24933: LD_ADDR_VAR 0 4
24937: PUSH
24938: LD_INT 30
24940: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24941: LD_VAR 0 1
24945: PPUSH
24946: CALL_OW 250
24950: PPUSH
24951: LD_VAR 0 1
24955: PPUSH
24956: CALL_OW 251
24960: PPUSH
24961: LD_VAR 0 4
24965: PPUSH
24966: CALL_OW 495
// end ; end ;
24970: LD_VAR 0 2
24974: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24975: LD_INT 0
24977: PPUSH
// end ;
24978: LD_VAR 0 4
24982: RET
// export function SOS_Command ( cmd ) ; begin
24983: LD_INT 0
24985: PPUSH
// end ;
24986: LD_VAR 0 2
24990: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24991: LD_INT 0
24993: PPUSH
// end ;
24994: LD_VAR 0 6
24998: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24999: LD_INT 0
25001: PPUSH
25002: PPUSH
// if not vehicle or not factory then
25003: LD_VAR 0 1
25007: NOT
25008: PUSH
25009: LD_VAR 0 2
25013: NOT
25014: OR
25015: IFFALSE 25019
// exit ;
25017: GO 25250
// if factoryWaypoints >= factory then
25019: LD_EXP 123
25023: PUSH
25024: LD_VAR 0 2
25028: GREATEREQUAL
25029: IFFALSE 25250
// if factoryWaypoints [ factory ] then
25031: LD_EXP 123
25035: PUSH
25036: LD_VAR 0 2
25040: ARRAY
25041: IFFALSE 25250
// begin if GetControl ( vehicle ) = control_manual then
25043: LD_VAR 0 1
25047: PPUSH
25048: CALL_OW 263
25052: PUSH
25053: LD_INT 1
25055: EQUAL
25056: IFFALSE 25137
// begin driver := IsDrivenBy ( vehicle ) ;
25058: LD_ADDR_VAR 0 4
25062: PUSH
25063: LD_VAR 0 1
25067: PPUSH
25068: CALL_OW 311
25072: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25073: LD_VAR 0 4
25077: PPUSH
25078: LD_EXP 123
25082: PUSH
25083: LD_VAR 0 2
25087: ARRAY
25088: PUSH
25089: LD_INT 3
25091: ARRAY
25092: PPUSH
25093: LD_EXP 123
25097: PUSH
25098: LD_VAR 0 2
25102: ARRAY
25103: PUSH
25104: LD_INT 4
25106: ARRAY
25107: PPUSH
25108: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25112: LD_VAR 0 4
25116: PPUSH
25117: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25121: LD_VAR 0 4
25125: PPUSH
25126: LD_VAR 0 2
25130: PPUSH
25131: CALL_OW 180
// end else
25135: GO 25250
// if GetControl ( vehicle ) = control_remote then
25137: LD_VAR 0 1
25141: PPUSH
25142: CALL_OW 263
25146: PUSH
25147: LD_INT 2
25149: EQUAL
25150: IFFALSE 25211
// begin wait ( 0 0$2 ) ;
25152: LD_INT 70
25154: PPUSH
25155: CALL_OW 67
// if Connect ( vehicle ) then
25159: LD_VAR 0 1
25163: PPUSH
25164: CALL 37474 0 1
25168: IFFALSE 25209
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25170: LD_VAR 0 1
25174: PPUSH
25175: LD_EXP 123
25179: PUSH
25180: LD_VAR 0 2
25184: ARRAY
25185: PUSH
25186: LD_INT 3
25188: ARRAY
25189: PPUSH
25190: LD_EXP 123
25194: PUSH
25195: LD_VAR 0 2
25199: ARRAY
25200: PUSH
25201: LD_INT 4
25203: ARRAY
25204: PPUSH
25205: CALL_OW 171
// end else
25209: GO 25250
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25211: LD_VAR 0 1
25215: PPUSH
25216: LD_EXP 123
25220: PUSH
25221: LD_VAR 0 2
25225: ARRAY
25226: PUSH
25227: LD_INT 3
25229: ARRAY
25230: PPUSH
25231: LD_EXP 123
25235: PUSH
25236: LD_VAR 0 2
25240: ARRAY
25241: PUSH
25242: LD_INT 4
25244: ARRAY
25245: PPUSH
25246: CALL_OW 171
// end ; end ;
25250: LD_VAR 0 3
25254: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25255: LD_INT 0
25257: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25258: LD_VAR 0 1
25262: PUSH
25263: LD_INT 250
25265: EQUAL
25266: PUSH
25267: LD_VAR 0 2
25271: PPUSH
25272: CALL_OW 264
25276: PUSH
25277: LD_EXP 52
25281: EQUAL
25282: AND
25283: IFFALSE 25304
// MinerPlaceMine ( unit , x , y ) ;
25285: LD_VAR 0 2
25289: PPUSH
25290: LD_VAR 0 4
25294: PPUSH
25295: LD_VAR 0 5
25299: PPUSH
25300: CALL 28032 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25304: LD_VAR 0 1
25308: PUSH
25309: LD_INT 251
25311: EQUAL
25312: PUSH
25313: LD_VAR 0 2
25317: PPUSH
25318: CALL_OW 264
25322: PUSH
25323: LD_EXP 52
25327: EQUAL
25328: AND
25329: IFFALSE 25350
// MinerDetonateMine ( unit , x , y ) ;
25331: LD_VAR 0 2
25335: PPUSH
25336: LD_VAR 0 4
25340: PPUSH
25341: LD_VAR 0 5
25345: PPUSH
25346: CALL 28309 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25350: LD_VAR 0 1
25354: PUSH
25355: LD_INT 252
25357: EQUAL
25358: PUSH
25359: LD_VAR 0 2
25363: PPUSH
25364: CALL_OW 264
25368: PUSH
25369: LD_EXP 52
25373: EQUAL
25374: AND
25375: IFFALSE 25396
// MinerCreateMinefield ( unit , x , y ) ;
25377: LD_VAR 0 2
25381: PPUSH
25382: LD_VAR 0 4
25386: PPUSH
25387: LD_VAR 0 5
25391: PPUSH
25392: CALL 28726 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25396: LD_VAR 0 1
25400: PUSH
25401: LD_INT 253
25403: EQUAL
25404: PUSH
25405: LD_VAR 0 2
25409: PPUSH
25410: CALL_OW 257
25414: PUSH
25415: LD_INT 5
25417: EQUAL
25418: AND
25419: IFFALSE 25440
// ComBinocular ( unit , x , y ) ;
25421: LD_VAR 0 2
25425: PPUSH
25426: LD_VAR 0 4
25430: PPUSH
25431: LD_VAR 0 5
25435: PPUSH
25436: CALL 29097 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25440: LD_VAR 0 1
25444: PUSH
25445: LD_INT 254
25447: EQUAL
25448: PUSH
25449: LD_VAR 0 2
25453: PPUSH
25454: CALL_OW 264
25458: PUSH
25459: LD_EXP 47
25463: EQUAL
25464: AND
25465: PUSH
25466: LD_VAR 0 3
25470: PPUSH
25471: CALL_OW 263
25475: PUSH
25476: LD_INT 3
25478: EQUAL
25479: AND
25480: IFFALSE 25496
// HackDestroyVehicle ( unit , selectedUnit ) ;
25482: LD_VAR 0 2
25486: PPUSH
25487: LD_VAR 0 3
25491: PPUSH
25492: CALL 27392 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25496: LD_VAR 0 1
25500: PUSH
25501: LD_INT 255
25503: EQUAL
25504: PUSH
25505: LD_VAR 0 2
25509: PPUSH
25510: CALL_OW 264
25514: PUSH
25515: LD_INT 14
25517: PUSH
25518: LD_INT 53
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: IN
25525: AND
25526: PUSH
25527: LD_VAR 0 4
25531: PPUSH
25532: LD_VAR 0 5
25536: PPUSH
25537: CALL_OW 488
25541: AND
25542: IFFALSE 25566
// CutTreeXYR ( unit , x , y , 12 ) ;
25544: LD_VAR 0 2
25548: PPUSH
25549: LD_VAR 0 4
25553: PPUSH
25554: LD_VAR 0 5
25558: PPUSH
25559: LD_INT 12
25561: PPUSH
25562: CALL 25958 0 4
// if cmd = 256 then
25566: LD_VAR 0 1
25570: PUSH
25571: LD_INT 256
25573: EQUAL
25574: IFFALSE 25595
// SetFactoryWaypoint ( unit , x , y ) ;
25576: LD_VAR 0 2
25580: PPUSH
25581: LD_VAR 0 4
25585: PPUSH
25586: LD_VAR 0 5
25590: PPUSH
25591: CALL 25600 0 3
// end ;
25595: LD_VAR 0 6
25599: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25600: LD_INT 0
25602: PPUSH
25603: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25604: LD_VAR 0 1
25608: NOT
25609: PUSH
25610: LD_VAR 0 2
25614: PPUSH
25615: LD_VAR 0 3
25619: PPUSH
25620: CALL_OW 488
25624: NOT
25625: OR
25626: PUSH
25627: LD_VAR 0 1
25631: PPUSH
25632: CALL_OW 266
25636: PUSH
25637: LD_INT 3
25639: NONEQUAL
25640: PUSH
25641: LD_VAR 0 1
25645: PPUSH
25646: CALL_OW 247
25650: PUSH
25651: LD_INT 1
25653: EQUAL
25654: NOT
25655: AND
25656: OR
25657: IFFALSE 25661
// exit ;
25659: GO 25810
// if GetType ( factory ) = unit_human then
25661: LD_VAR 0 1
25665: PPUSH
25666: CALL_OW 247
25670: PUSH
25671: LD_INT 1
25673: EQUAL
25674: IFFALSE 25691
// factory := IsInUnit ( factory ) ;
25676: LD_ADDR_VAR 0 1
25680: PUSH
25681: LD_VAR 0 1
25685: PPUSH
25686: CALL_OW 310
25690: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25691: LD_VAR 0 1
25695: PPUSH
25696: CALL_OW 266
25700: PUSH
25701: LD_INT 3
25703: NONEQUAL
25704: IFFALSE 25708
// exit ;
25706: GO 25810
// if HexInfo ( x , y ) = factory then
25708: LD_VAR 0 2
25712: PPUSH
25713: LD_VAR 0 3
25717: PPUSH
25718: CALL_OW 428
25722: PUSH
25723: LD_VAR 0 1
25727: EQUAL
25728: IFFALSE 25755
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25730: LD_ADDR_EXP 123
25734: PUSH
25735: LD_EXP 123
25739: PPUSH
25740: LD_VAR 0 1
25744: PPUSH
25745: LD_INT 0
25747: PPUSH
25748: CALL_OW 1
25752: ST_TO_ADDR
25753: GO 25806
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25755: LD_ADDR_EXP 123
25759: PUSH
25760: LD_EXP 123
25764: PPUSH
25765: LD_VAR 0 1
25769: PPUSH
25770: LD_VAR 0 1
25774: PPUSH
25775: CALL_OW 255
25779: PUSH
25780: LD_VAR 0 1
25784: PUSH
25785: LD_VAR 0 2
25789: PUSH
25790: LD_VAR 0 3
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: PPUSH
25801: CALL_OW 1
25805: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25806: CALL 25815 0 0
// end ;
25810: LD_VAR 0 4
25814: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
25815: LD_INT 0
25817: PPUSH
25818: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25819: LD_STRING resetFactoryWaypoint();
25821: PPUSH
25822: CALL_OW 559
// if factoryWaypoints then
25826: LD_EXP 123
25830: IFFALSE 25953
// begin for i := 1 to factoryWaypoints do
25832: LD_ADDR_VAR 0 2
25836: PUSH
25837: DOUBLE
25838: LD_INT 1
25840: DEC
25841: ST_TO_ADDR
25842: LD_EXP 123
25846: PUSH
25847: FOR_TO
25848: IFFALSE 25951
// if factoryWaypoints [ i ] then
25850: LD_EXP 123
25854: PUSH
25855: LD_VAR 0 2
25859: ARRAY
25860: IFFALSE 25949
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
25862: LD_STRING setFactoryWaypointXY(
25864: PUSH
25865: LD_EXP 123
25869: PUSH
25870: LD_VAR 0 2
25874: ARRAY
25875: PUSH
25876: LD_INT 1
25878: ARRAY
25879: STR
25880: PUSH
25881: LD_STRING ,
25883: STR
25884: PUSH
25885: LD_EXP 123
25889: PUSH
25890: LD_VAR 0 2
25894: ARRAY
25895: PUSH
25896: LD_INT 2
25898: ARRAY
25899: STR
25900: PUSH
25901: LD_STRING ,
25903: STR
25904: PUSH
25905: LD_EXP 123
25909: PUSH
25910: LD_VAR 0 2
25914: ARRAY
25915: PUSH
25916: LD_INT 3
25918: ARRAY
25919: STR
25920: PUSH
25921: LD_STRING ,
25923: STR
25924: PUSH
25925: LD_EXP 123
25929: PUSH
25930: LD_VAR 0 2
25934: ARRAY
25935: PUSH
25936: LD_INT 4
25938: ARRAY
25939: STR
25940: PUSH
25941: LD_STRING )
25943: STR
25944: PPUSH
25945: CALL_OW 559
25949: GO 25847
25951: POP
25952: POP
// end ; end ;
25953: LD_VAR 0 1
25957: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25958: LD_INT 0
25960: PPUSH
25961: PPUSH
25962: PPUSH
25963: PPUSH
25964: PPUSH
25965: PPUSH
25966: PPUSH
25967: PPUSH
25968: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25969: LD_VAR 0 1
25973: NOT
25974: PUSH
25975: LD_VAR 0 2
25979: PPUSH
25980: LD_VAR 0 3
25984: PPUSH
25985: CALL_OW 488
25989: NOT
25990: OR
25991: PUSH
25992: LD_VAR 0 4
25996: NOT
25997: OR
25998: IFFALSE 26002
// exit ;
26000: GO 26342
// list := [ ] ;
26002: LD_ADDR_VAR 0 13
26006: PUSH
26007: EMPTY
26008: ST_TO_ADDR
// if x - r < 0 then
26009: LD_VAR 0 2
26013: PUSH
26014: LD_VAR 0 4
26018: MINUS
26019: PUSH
26020: LD_INT 0
26022: LESS
26023: IFFALSE 26035
// min_x := 0 else
26025: LD_ADDR_VAR 0 7
26029: PUSH
26030: LD_INT 0
26032: ST_TO_ADDR
26033: GO 26051
// min_x := x - r ;
26035: LD_ADDR_VAR 0 7
26039: PUSH
26040: LD_VAR 0 2
26044: PUSH
26045: LD_VAR 0 4
26049: MINUS
26050: ST_TO_ADDR
// if y - r < 0 then
26051: LD_VAR 0 3
26055: PUSH
26056: LD_VAR 0 4
26060: MINUS
26061: PUSH
26062: LD_INT 0
26064: LESS
26065: IFFALSE 26077
// min_y := 0 else
26067: LD_ADDR_VAR 0 8
26071: PUSH
26072: LD_INT 0
26074: ST_TO_ADDR
26075: GO 26093
// min_y := y - r ;
26077: LD_ADDR_VAR 0 8
26081: PUSH
26082: LD_VAR 0 3
26086: PUSH
26087: LD_VAR 0 4
26091: MINUS
26092: ST_TO_ADDR
// max_x := x + r ;
26093: LD_ADDR_VAR 0 9
26097: PUSH
26098: LD_VAR 0 2
26102: PUSH
26103: LD_VAR 0 4
26107: PLUS
26108: ST_TO_ADDR
// max_y := y + r ;
26109: LD_ADDR_VAR 0 10
26113: PUSH
26114: LD_VAR 0 3
26118: PUSH
26119: LD_VAR 0 4
26123: PLUS
26124: ST_TO_ADDR
// for _x = min_x to max_x do
26125: LD_ADDR_VAR 0 11
26129: PUSH
26130: DOUBLE
26131: LD_VAR 0 7
26135: DEC
26136: ST_TO_ADDR
26137: LD_VAR 0 9
26141: PUSH
26142: FOR_TO
26143: IFFALSE 26260
// for _y = min_y to max_y do
26145: LD_ADDR_VAR 0 12
26149: PUSH
26150: DOUBLE
26151: LD_VAR 0 8
26155: DEC
26156: ST_TO_ADDR
26157: LD_VAR 0 10
26161: PUSH
26162: FOR_TO
26163: IFFALSE 26256
// begin if not ValidHex ( _x , _y ) then
26165: LD_VAR 0 11
26169: PPUSH
26170: LD_VAR 0 12
26174: PPUSH
26175: CALL_OW 488
26179: NOT
26180: IFFALSE 26184
// continue ;
26182: GO 26162
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26184: LD_VAR 0 11
26188: PPUSH
26189: LD_VAR 0 12
26193: PPUSH
26194: CALL_OW 351
26198: PUSH
26199: LD_VAR 0 11
26203: PPUSH
26204: LD_VAR 0 12
26208: PPUSH
26209: CALL_OW 554
26213: AND
26214: IFFALSE 26254
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26216: LD_ADDR_VAR 0 13
26220: PUSH
26221: LD_VAR 0 13
26225: PPUSH
26226: LD_VAR 0 13
26230: PUSH
26231: LD_INT 1
26233: PLUS
26234: PPUSH
26235: LD_VAR 0 11
26239: PUSH
26240: LD_VAR 0 12
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PPUSH
26249: CALL_OW 2
26253: ST_TO_ADDR
// end ;
26254: GO 26162
26256: POP
26257: POP
26258: GO 26142
26260: POP
26261: POP
// if not list then
26262: LD_VAR 0 13
26266: NOT
26267: IFFALSE 26271
// exit ;
26269: GO 26342
// for i in list do
26271: LD_ADDR_VAR 0 6
26275: PUSH
26276: LD_VAR 0 13
26280: PUSH
26281: FOR_IN
26282: IFFALSE 26340
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26284: LD_VAR 0 1
26288: PPUSH
26289: LD_STRING M
26291: PUSH
26292: LD_VAR 0 6
26296: PUSH
26297: LD_INT 1
26299: ARRAY
26300: PUSH
26301: LD_VAR 0 6
26305: PUSH
26306: LD_INT 2
26308: ARRAY
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: PUSH
26331: EMPTY
26332: LIST
26333: PPUSH
26334: CALL_OW 447
26338: GO 26281
26340: POP
26341: POP
// end ;
26342: LD_VAR 0 5
26346: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26347: LD_EXP 124
26351: NOT
26352: IFFALSE 26402
26354: GO 26356
26356: DISABLE
// begin initHack := true ;
26357: LD_ADDR_EXP 124
26361: PUSH
26362: LD_INT 1
26364: ST_TO_ADDR
// hackTanks := [ ] ;
26365: LD_ADDR_EXP 125
26369: PUSH
26370: EMPTY
26371: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26372: LD_ADDR_EXP 126
26376: PUSH
26377: EMPTY
26378: ST_TO_ADDR
// hackLimit := 3 ;
26379: LD_ADDR_EXP 127
26383: PUSH
26384: LD_INT 3
26386: ST_TO_ADDR
// hackDist := 12 ;
26387: LD_ADDR_EXP 128
26391: PUSH
26392: LD_INT 12
26394: ST_TO_ADDR
// hackCounter := [ ] ;
26395: LD_ADDR_EXP 129
26399: PUSH
26400: EMPTY
26401: ST_TO_ADDR
// end ;
26402: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26403: LD_EXP 124
26407: PUSH
26408: LD_INT 34
26410: PUSH
26411: LD_EXP 47
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PPUSH
26420: CALL_OW 69
26424: AND
26425: IFFALSE 26680
26427: GO 26429
26429: DISABLE
26430: LD_INT 0
26432: PPUSH
26433: PPUSH
// begin enable ;
26434: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26435: LD_ADDR_VAR 0 1
26439: PUSH
26440: LD_INT 34
26442: PUSH
26443: LD_EXP 47
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PPUSH
26452: CALL_OW 69
26456: PUSH
26457: FOR_IN
26458: IFFALSE 26678
// begin if not i in hackTanks then
26460: LD_VAR 0 1
26464: PUSH
26465: LD_EXP 125
26469: IN
26470: NOT
26471: IFFALSE 26554
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26473: LD_ADDR_EXP 125
26477: PUSH
26478: LD_EXP 125
26482: PPUSH
26483: LD_EXP 125
26487: PUSH
26488: LD_INT 1
26490: PLUS
26491: PPUSH
26492: LD_VAR 0 1
26496: PPUSH
26497: CALL_OW 1
26501: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26502: LD_ADDR_EXP 126
26506: PUSH
26507: LD_EXP 126
26511: PPUSH
26512: LD_EXP 126
26516: PUSH
26517: LD_INT 1
26519: PLUS
26520: PPUSH
26521: EMPTY
26522: PPUSH
26523: CALL_OW 1
26527: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26528: LD_ADDR_EXP 129
26532: PUSH
26533: LD_EXP 129
26537: PPUSH
26538: LD_EXP 129
26542: PUSH
26543: LD_INT 1
26545: PLUS
26546: PPUSH
26547: EMPTY
26548: PPUSH
26549: CALL_OW 1
26553: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26554: LD_VAR 0 1
26558: PPUSH
26559: CALL_OW 302
26563: NOT
26564: IFFALSE 26577
// begin HackUnlinkAll ( i ) ;
26566: LD_VAR 0 1
26570: PPUSH
26571: CALL 26683 0 1
// continue ;
26575: GO 26457
// end ; HackCheckCapturedStatus ( i ) ;
26577: LD_VAR 0 1
26581: PPUSH
26582: CALL 27126 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26586: LD_ADDR_VAR 0 2
26590: PUSH
26591: LD_INT 81
26593: PUSH
26594: LD_VAR 0 1
26598: PPUSH
26599: CALL_OW 255
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 33
26610: PUSH
26611: LD_INT 3
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 91
26620: PUSH
26621: LD_VAR 0 1
26625: PUSH
26626: LD_EXP 128
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 50
26638: PUSH
26639: EMPTY
26640: LIST
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: PPUSH
26648: CALL_OW 69
26652: ST_TO_ADDR
// if not tmp then
26653: LD_VAR 0 2
26657: NOT
26658: IFFALSE 26662
// continue ;
26660: GO 26457
// HackLink ( i , tmp ) ;
26662: LD_VAR 0 1
26666: PPUSH
26667: LD_VAR 0 2
26671: PPUSH
26672: CALL 26819 0 2
// end ;
26676: GO 26457
26678: POP
26679: POP
// end ;
26680: PPOPN 2
26682: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26683: LD_INT 0
26685: PPUSH
26686: PPUSH
26687: PPUSH
// if not hack in hackTanks then
26688: LD_VAR 0 1
26692: PUSH
26693: LD_EXP 125
26697: IN
26698: NOT
26699: IFFALSE 26703
// exit ;
26701: GO 26814
// index := GetElementIndex ( hackTanks , hack ) ;
26703: LD_ADDR_VAR 0 4
26707: PUSH
26708: LD_EXP 125
26712: PPUSH
26713: LD_VAR 0 1
26717: PPUSH
26718: CALL 34288 0 2
26722: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26723: LD_EXP 126
26727: PUSH
26728: LD_VAR 0 4
26732: ARRAY
26733: IFFALSE 26814
// begin for i in hackTanksCaptured [ index ] do
26735: LD_ADDR_VAR 0 3
26739: PUSH
26740: LD_EXP 126
26744: PUSH
26745: LD_VAR 0 4
26749: ARRAY
26750: PUSH
26751: FOR_IN
26752: IFFALSE 26778
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26754: LD_VAR 0 3
26758: PUSH
26759: LD_INT 1
26761: ARRAY
26762: PPUSH
26763: LD_VAR 0 3
26767: PUSH
26768: LD_INT 2
26770: ARRAY
26771: PPUSH
26772: CALL_OW 235
26776: GO 26751
26778: POP
26779: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26780: LD_ADDR_EXP 126
26784: PUSH
26785: LD_EXP 126
26789: PPUSH
26790: LD_VAR 0 4
26794: PPUSH
26795: EMPTY
26796: PPUSH
26797: CALL_OW 1
26801: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26802: LD_VAR 0 1
26806: PPUSH
26807: LD_INT 0
26809: PPUSH
26810: CALL_OW 505
// end ; end ;
26814: LD_VAR 0 2
26818: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26819: LD_INT 0
26821: PPUSH
26822: PPUSH
26823: PPUSH
// if not hack in hackTanks or not vehicles then
26824: LD_VAR 0 1
26828: PUSH
26829: LD_EXP 125
26833: IN
26834: NOT
26835: PUSH
26836: LD_VAR 0 2
26840: NOT
26841: OR
26842: IFFALSE 26846
// exit ;
26844: GO 27121
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26846: LD_ADDR_VAR 0 2
26850: PUSH
26851: LD_VAR 0 1
26855: PPUSH
26856: LD_VAR 0 2
26860: PPUSH
26861: LD_INT 1
26863: PPUSH
26864: LD_INT 1
26866: PPUSH
26867: CALL 34938 0 4
26871: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26872: LD_ADDR_VAR 0 5
26876: PUSH
26877: LD_EXP 125
26881: PPUSH
26882: LD_VAR 0 1
26886: PPUSH
26887: CALL 34288 0 2
26891: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26892: LD_EXP 126
26896: PUSH
26897: LD_VAR 0 5
26901: ARRAY
26902: PUSH
26903: LD_EXP 127
26907: LESS
26908: IFFALSE 27097
// begin for i := 1 to vehicles do
26910: LD_ADDR_VAR 0 4
26914: PUSH
26915: DOUBLE
26916: LD_INT 1
26918: DEC
26919: ST_TO_ADDR
26920: LD_VAR 0 2
26924: PUSH
26925: FOR_TO
26926: IFFALSE 27095
// begin if hackTanksCaptured [ index ] = hackLimit then
26928: LD_EXP 126
26932: PUSH
26933: LD_VAR 0 5
26937: ARRAY
26938: PUSH
26939: LD_EXP 127
26943: EQUAL
26944: IFFALSE 26948
// break ;
26946: GO 27095
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26948: LD_ADDR_EXP 129
26952: PUSH
26953: LD_EXP 129
26957: PPUSH
26958: LD_VAR 0 5
26962: PPUSH
26963: LD_EXP 129
26967: PUSH
26968: LD_VAR 0 5
26972: ARRAY
26973: PUSH
26974: LD_INT 1
26976: PLUS
26977: PPUSH
26978: CALL_OW 1
26982: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26983: LD_ADDR_EXP 126
26987: PUSH
26988: LD_EXP 126
26992: PPUSH
26993: LD_VAR 0 5
26997: PUSH
26998: LD_EXP 126
27002: PUSH
27003: LD_VAR 0 5
27007: ARRAY
27008: PUSH
27009: LD_INT 1
27011: PLUS
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PPUSH
27017: LD_VAR 0 2
27021: PUSH
27022: LD_VAR 0 4
27026: ARRAY
27027: PUSH
27028: LD_VAR 0 2
27032: PUSH
27033: LD_VAR 0 4
27037: ARRAY
27038: PPUSH
27039: CALL_OW 255
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PPUSH
27048: CALL 34503 0 3
27052: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27053: LD_VAR 0 2
27057: PUSH
27058: LD_VAR 0 4
27062: ARRAY
27063: PPUSH
27064: LD_VAR 0 1
27068: PPUSH
27069: CALL_OW 255
27073: PPUSH
27074: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27078: LD_VAR 0 2
27082: PUSH
27083: LD_VAR 0 4
27087: ARRAY
27088: PPUSH
27089: CALL_OW 141
// end ;
27093: GO 26925
27095: POP
27096: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27097: LD_VAR 0 1
27101: PPUSH
27102: LD_EXP 126
27106: PUSH
27107: LD_VAR 0 5
27111: ARRAY
27112: PUSH
27113: LD_INT 0
27115: PLUS
27116: PPUSH
27117: CALL_OW 505
// end ;
27121: LD_VAR 0 3
27125: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27126: LD_INT 0
27128: PPUSH
27129: PPUSH
27130: PPUSH
27131: PPUSH
// if not hack in hackTanks then
27132: LD_VAR 0 1
27136: PUSH
27137: LD_EXP 125
27141: IN
27142: NOT
27143: IFFALSE 27147
// exit ;
27145: GO 27387
// index := GetElementIndex ( hackTanks , hack ) ;
27147: LD_ADDR_VAR 0 4
27151: PUSH
27152: LD_EXP 125
27156: PPUSH
27157: LD_VAR 0 1
27161: PPUSH
27162: CALL 34288 0 2
27166: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27167: LD_ADDR_VAR 0 3
27171: PUSH
27172: DOUBLE
27173: LD_EXP 126
27177: PUSH
27178: LD_VAR 0 4
27182: ARRAY
27183: INC
27184: ST_TO_ADDR
27185: LD_INT 1
27187: PUSH
27188: FOR_DOWNTO
27189: IFFALSE 27361
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27191: LD_ADDR_VAR 0 5
27195: PUSH
27196: LD_EXP 126
27200: PUSH
27201: LD_VAR 0 4
27205: ARRAY
27206: PUSH
27207: LD_VAR 0 3
27211: ARRAY
27212: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27213: LD_VAR 0 5
27217: PUSH
27218: LD_INT 1
27220: ARRAY
27221: PPUSH
27222: CALL_OW 302
27226: NOT
27227: PUSH
27228: LD_VAR 0 5
27232: PUSH
27233: LD_INT 1
27235: ARRAY
27236: PPUSH
27237: CALL_OW 255
27241: PUSH
27242: LD_VAR 0 1
27246: PPUSH
27247: CALL_OW 255
27251: NONEQUAL
27252: OR
27253: IFFALSE 27359
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27255: LD_VAR 0 5
27259: PUSH
27260: LD_INT 1
27262: ARRAY
27263: PPUSH
27264: CALL_OW 305
27268: PUSH
27269: LD_VAR 0 5
27273: PUSH
27274: LD_INT 1
27276: ARRAY
27277: PPUSH
27278: CALL_OW 255
27282: PUSH
27283: LD_VAR 0 1
27287: PPUSH
27288: CALL_OW 255
27292: EQUAL
27293: AND
27294: IFFALSE 27318
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27296: LD_VAR 0 5
27300: PUSH
27301: LD_INT 1
27303: ARRAY
27304: PPUSH
27305: LD_VAR 0 5
27309: PUSH
27310: LD_INT 2
27312: ARRAY
27313: PPUSH
27314: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27318: LD_ADDR_EXP 126
27322: PUSH
27323: LD_EXP 126
27327: PPUSH
27328: LD_VAR 0 4
27332: PPUSH
27333: LD_EXP 126
27337: PUSH
27338: LD_VAR 0 4
27342: ARRAY
27343: PPUSH
27344: LD_VAR 0 3
27348: PPUSH
27349: CALL_OW 3
27353: PPUSH
27354: CALL_OW 1
27358: ST_TO_ADDR
// end ; end ;
27359: GO 27188
27361: POP
27362: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27363: LD_VAR 0 1
27367: PPUSH
27368: LD_EXP 126
27372: PUSH
27373: LD_VAR 0 4
27377: ARRAY
27378: PUSH
27379: LD_INT 0
27381: PLUS
27382: PPUSH
27383: CALL_OW 505
// end ;
27387: LD_VAR 0 2
27391: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27392: LD_INT 0
27394: PPUSH
27395: PPUSH
27396: PPUSH
27397: PPUSH
// if not hack in hackTanks then
27398: LD_VAR 0 1
27402: PUSH
27403: LD_EXP 125
27407: IN
27408: NOT
27409: IFFALSE 27413
// exit ;
27411: GO 27498
// index := GetElementIndex ( hackTanks , hack ) ;
27413: LD_ADDR_VAR 0 5
27417: PUSH
27418: LD_EXP 125
27422: PPUSH
27423: LD_VAR 0 1
27427: PPUSH
27428: CALL 34288 0 2
27432: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27433: LD_ADDR_VAR 0 4
27437: PUSH
27438: DOUBLE
27439: LD_INT 1
27441: DEC
27442: ST_TO_ADDR
27443: LD_EXP 126
27447: PUSH
27448: LD_VAR 0 5
27452: ARRAY
27453: PUSH
27454: FOR_TO
27455: IFFALSE 27496
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27457: LD_EXP 126
27461: PUSH
27462: LD_VAR 0 5
27466: ARRAY
27467: PUSH
27468: LD_VAR 0 4
27472: ARRAY
27473: PUSH
27474: LD_INT 1
27476: ARRAY
27477: PUSH
27478: LD_VAR 0 2
27482: EQUAL
27483: IFFALSE 27494
// KillUnit ( vehicle ) ;
27485: LD_VAR 0 2
27489: PPUSH
27490: CALL_OW 66
27494: GO 27454
27496: POP
27497: POP
// end ;
27498: LD_VAR 0 3
27502: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27503: LD_EXP 130
27507: NOT
27508: IFFALSE 27543
27510: GO 27512
27512: DISABLE
// begin initMiner := true ;
27513: LD_ADDR_EXP 130
27517: PUSH
27518: LD_INT 1
27520: ST_TO_ADDR
// minersList := [ ] ;
27521: LD_ADDR_EXP 131
27525: PUSH
27526: EMPTY
27527: ST_TO_ADDR
// minerMinesList := [ ] ;
27528: LD_ADDR_EXP 132
27532: PUSH
27533: EMPTY
27534: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27535: LD_ADDR_EXP 133
27539: PUSH
27540: LD_INT 5
27542: ST_TO_ADDR
// end ;
27543: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27544: LD_EXP 130
27548: PUSH
27549: LD_INT 34
27551: PUSH
27552: LD_EXP 52
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PPUSH
27561: CALL_OW 69
27565: AND
27566: IFFALSE 28029
27568: GO 27570
27570: DISABLE
27571: LD_INT 0
27573: PPUSH
27574: PPUSH
27575: PPUSH
27576: PPUSH
// begin enable ;
27577: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27578: LD_ADDR_VAR 0 1
27582: PUSH
27583: LD_INT 34
27585: PUSH
27586: LD_EXP 52
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PPUSH
27595: CALL_OW 69
27599: PUSH
27600: FOR_IN
27601: IFFALSE 27673
// begin if not i in minersList then
27603: LD_VAR 0 1
27607: PUSH
27608: LD_EXP 131
27612: IN
27613: NOT
27614: IFFALSE 27671
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27616: LD_ADDR_EXP 131
27620: PUSH
27621: LD_EXP 131
27625: PPUSH
27626: LD_EXP 131
27630: PUSH
27631: LD_INT 1
27633: PLUS
27634: PPUSH
27635: LD_VAR 0 1
27639: PPUSH
27640: CALL_OW 1
27644: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27645: LD_ADDR_EXP 132
27649: PUSH
27650: LD_EXP 132
27654: PPUSH
27655: LD_EXP 132
27659: PUSH
27660: LD_INT 1
27662: PLUS
27663: PPUSH
27664: EMPTY
27665: PPUSH
27666: CALL_OW 1
27670: ST_TO_ADDR
// end end ;
27671: GO 27600
27673: POP
27674: POP
// for i := minerMinesList downto 1 do
27675: LD_ADDR_VAR 0 1
27679: PUSH
27680: DOUBLE
27681: LD_EXP 132
27685: INC
27686: ST_TO_ADDR
27687: LD_INT 1
27689: PUSH
27690: FOR_DOWNTO
27691: IFFALSE 28027
// begin if IsLive ( minersList [ i ] ) then
27693: LD_EXP 131
27697: PUSH
27698: LD_VAR 0 1
27702: ARRAY
27703: PPUSH
27704: CALL_OW 300
27708: IFFALSE 27736
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27710: LD_EXP 131
27714: PUSH
27715: LD_VAR 0 1
27719: ARRAY
27720: PPUSH
27721: LD_EXP 132
27725: PUSH
27726: LD_VAR 0 1
27730: ARRAY
27731: PPUSH
27732: CALL_OW 505
// if not minerMinesList [ i ] then
27736: LD_EXP 132
27740: PUSH
27741: LD_VAR 0 1
27745: ARRAY
27746: NOT
27747: IFFALSE 27751
// continue ;
27749: GO 27690
// for j := minerMinesList [ i ] downto 1 do
27751: LD_ADDR_VAR 0 2
27755: PUSH
27756: DOUBLE
27757: LD_EXP 132
27761: PUSH
27762: LD_VAR 0 1
27766: ARRAY
27767: INC
27768: ST_TO_ADDR
27769: LD_INT 1
27771: PUSH
27772: FOR_DOWNTO
27773: IFFALSE 28023
// begin side := GetSide ( minersList [ i ] ) ;
27775: LD_ADDR_VAR 0 3
27779: PUSH
27780: LD_EXP 131
27784: PUSH
27785: LD_VAR 0 1
27789: ARRAY
27790: PPUSH
27791: CALL_OW 255
27795: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27796: LD_ADDR_VAR 0 4
27800: PUSH
27801: LD_EXP 132
27805: PUSH
27806: LD_VAR 0 1
27810: ARRAY
27811: PUSH
27812: LD_VAR 0 2
27816: ARRAY
27817: PUSH
27818: LD_INT 1
27820: ARRAY
27821: PPUSH
27822: LD_EXP 132
27826: PUSH
27827: LD_VAR 0 1
27831: ARRAY
27832: PUSH
27833: LD_VAR 0 2
27837: ARRAY
27838: PUSH
27839: LD_INT 2
27841: ARRAY
27842: PPUSH
27843: CALL_OW 428
27847: ST_TO_ADDR
// if not tmp then
27848: LD_VAR 0 4
27852: NOT
27853: IFFALSE 27857
// continue ;
27855: GO 27772
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27857: LD_VAR 0 4
27861: PUSH
27862: LD_INT 81
27864: PUSH
27865: LD_VAR 0 3
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PPUSH
27874: CALL_OW 69
27878: IN
27879: PUSH
27880: LD_EXP 132
27884: PUSH
27885: LD_VAR 0 1
27889: ARRAY
27890: PUSH
27891: LD_VAR 0 2
27895: ARRAY
27896: PUSH
27897: LD_INT 1
27899: ARRAY
27900: PPUSH
27901: LD_EXP 132
27905: PUSH
27906: LD_VAR 0 1
27910: ARRAY
27911: PUSH
27912: LD_VAR 0 2
27916: ARRAY
27917: PUSH
27918: LD_INT 2
27920: ARRAY
27921: PPUSH
27922: CALL_OW 458
27926: AND
27927: IFFALSE 28021
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27929: LD_EXP 132
27933: PUSH
27934: LD_VAR 0 1
27938: ARRAY
27939: PUSH
27940: LD_VAR 0 2
27944: ARRAY
27945: PUSH
27946: LD_INT 1
27948: ARRAY
27949: PPUSH
27950: LD_EXP 132
27954: PUSH
27955: LD_VAR 0 1
27959: ARRAY
27960: PUSH
27961: LD_VAR 0 2
27965: ARRAY
27966: PUSH
27967: LD_INT 2
27969: ARRAY
27970: PPUSH
27971: LD_VAR 0 3
27975: PPUSH
27976: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27980: LD_ADDR_EXP 132
27984: PUSH
27985: LD_EXP 132
27989: PPUSH
27990: LD_VAR 0 1
27994: PPUSH
27995: LD_EXP 132
27999: PUSH
28000: LD_VAR 0 1
28004: ARRAY
28005: PPUSH
28006: LD_VAR 0 2
28010: PPUSH
28011: CALL_OW 3
28015: PPUSH
28016: CALL_OW 1
28020: ST_TO_ADDR
// end ; end ;
28021: GO 27772
28023: POP
28024: POP
// end ;
28025: GO 27690
28027: POP
28028: POP
// end ;
28029: PPOPN 4
28031: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28032: LD_INT 0
28034: PPUSH
28035: PPUSH
// result := false ;
28036: LD_ADDR_VAR 0 4
28040: PUSH
28041: LD_INT 0
28043: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28044: LD_VAR 0 1
28048: PPUSH
28049: CALL_OW 264
28053: PUSH
28054: LD_EXP 52
28058: EQUAL
28059: NOT
28060: IFFALSE 28064
// exit ;
28062: GO 28304
// index := GetElementIndex ( minersList , unit ) ;
28064: LD_ADDR_VAR 0 5
28068: PUSH
28069: LD_EXP 131
28073: PPUSH
28074: LD_VAR 0 1
28078: PPUSH
28079: CALL 34288 0 2
28083: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28084: LD_EXP 132
28088: PUSH
28089: LD_VAR 0 5
28093: ARRAY
28094: PUSH
28095: LD_EXP 133
28099: GREATEREQUAL
28100: IFFALSE 28104
// exit ;
28102: GO 28304
// ComMoveXY ( unit , x , y ) ;
28104: LD_VAR 0 1
28108: PPUSH
28109: LD_VAR 0 2
28113: PPUSH
28114: LD_VAR 0 3
28118: PPUSH
28119: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28123: LD_INT 35
28125: PPUSH
28126: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28130: LD_VAR 0 1
28134: PPUSH
28135: LD_VAR 0 2
28139: PPUSH
28140: LD_VAR 0 3
28144: PPUSH
28145: CALL 65007 0 3
28149: NOT
28150: PUSH
28151: LD_VAR 0 1
28155: PPUSH
28156: CALL_OW 314
28160: AND
28161: IFFALSE 28165
// exit ;
28163: GO 28304
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28165: LD_VAR 0 2
28169: PPUSH
28170: LD_VAR 0 3
28174: PPUSH
28175: CALL_OW 428
28179: PUSH
28180: LD_VAR 0 1
28184: EQUAL
28185: PUSH
28186: LD_VAR 0 1
28190: PPUSH
28191: CALL_OW 314
28195: NOT
28196: AND
28197: IFFALSE 28123
// PlaySoundXY ( x , y , PlantMine ) ;
28199: LD_VAR 0 2
28203: PPUSH
28204: LD_VAR 0 3
28208: PPUSH
28209: LD_STRING PlantMine
28211: PPUSH
28212: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28216: LD_VAR 0 2
28220: PPUSH
28221: LD_VAR 0 3
28225: PPUSH
28226: LD_VAR 0 1
28230: PPUSH
28231: CALL_OW 255
28235: PPUSH
28236: LD_INT 0
28238: PPUSH
28239: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28243: LD_ADDR_EXP 132
28247: PUSH
28248: LD_EXP 132
28252: PPUSH
28253: LD_VAR 0 5
28257: PUSH
28258: LD_EXP 132
28262: PUSH
28263: LD_VAR 0 5
28267: ARRAY
28268: PUSH
28269: LD_INT 1
28271: PLUS
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PPUSH
28277: LD_VAR 0 2
28281: PUSH
28282: LD_VAR 0 3
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PPUSH
28291: CALL 34503 0 3
28295: ST_TO_ADDR
// result := true ;
28296: LD_ADDR_VAR 0 4
28300: PUSH
28301: LD_INT 1
28303: ST_TO_ADDR
// end ;
28304: LD_VAR 0 4
28308: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28309: LD_INT 0
28311: PPUSH
28312: PPUSH
28313: PPUSH
// if not unit in minersList then
28314: LD_VAR 0 1
28318: PUSH
28319: LD_EXP 131
28323: IN
28324: NOT
28325: IFFALSE 28329
// exit ;
28327: GO 28721
// index := GetElementIndex ( minersList , unit ) ;
28329: LD_ADDR_VAR 0 6
28333: PUSH
28334: LD_EXP 131
28338: PPUSH
28339: LD_VAR 0 1
28343: PPUSH
28344: CALL 34288 0 2
28348: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28349: LD_ADDR_VAR 0 5
28353: PUSH
28354: DOUBLE
28355: LD_EXP 132
28359: PUSH
28360: LD_VAR 0 6
28364: ARRAY
28365: INC
28366: ST_TO_ADDR
28367: LD_INT 1
28369: PUSH
28370: FOR_DOWNTO
28371: IFFALSE 28532
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28373: LD_EXP 132
28377: PUSH
28378: LD_VAR 0 6
28382: ARRAY
28383: PUSH
28384: LD_VAR 0 5
28388: ARRAY
28389: PUSH
28390: LD_INT 1
28392: ARRAY
28393: PUSH
28394: LD_VAR 0 2
28398: EQUAL
28399: PUSH
28400: LD_EXP 132
28404: PUSH
28405: LD_VAR 0 6
28409: ARRAY
28410: PUSH
28411: LD_VAR 0 5
28415: ARRAY
28416: PUSH
28417: LD_INT 2
28419: ARRAY
28420: PUSH
28421: LD_VAR 0 3
28425: EQUAL
28426: AND
28427: IFFALSE 28530
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28429: LD_EXP 132
28433: PUSH
28434: LD_VAR 0 6
28438: ARRAY
28439: PUSH
28440: LD_VAR 0 5
28444: ARRAY
28445: PUSH
28446: LD_INT 1
28448: ARRAY
28449: PPUSH
28450: LD_EXP 132
28454: PUSH
28455: LD_VAR 0 6
28459: ARRAY
28460: PUSH
28461: LD_VAR 0 5
28465: ARRAY
28466: PUSH
28467: LD_INT 2
28469: ARRAY
28470: PPUSH
28471: LD_VAR 0 1
28475: PPUSH
28476: CALL_OW 255
28480: PPUSH
28481: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28485: LD_ADDR_EXP 132
28489: PUSH
28490: LD_EXP 132
28494: PPUSH
28495: LD_VAR 0 6
28499: PPUSH
28500: LD_EXP 132
28504: PUSH
28505: LD_VAR 0 6
28509: ARRAY
28510: PPUSH
28511: LD_VAR 0 5
28515: PPUSH
28516: CALL_OW 3
28520: PPUSH
28521: CALL_OW 1
28525: ST_TO_ADDR
// exit ;
28526: POP
28527: POP
28528: GO 28721
// end ; end ;
28530: GO 28370
28532: POP
28533: POP
// for i := minerMinesList [ index ] downto 1 do
28534: LD_ADDR_VAR 0 5
28538: PUSH
28539: DOUBLE
28540: LD_EXP 132
28544: PUSH
28545: LD_VAR 0 6
28549: ARRAY
28550: INC
28551: ST_TO_ADDR
28552: LD_INT 1
28554: PUSH
28555: FOR_DOWNTO
28556: IFFALSE 28719
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28558: LD_EXP 132
28562: PUSH
28563: LD_VAR 0 6
28567: ARRAY
28568: PUSH
28569: LD_VAR 0 5
28573: ARRAY
28574: PUSH
28575: LD_INT 1
28577: ARRAY
28578: PPUSH
28579: LD_EXP 132
28583: PUSH
28584: LD_VAR 0 6
28588: ARRAY
28589: PUSH
28590: LD_VAR 0 5
28594: ARRAY
28595: PUSH
28596: LD_INT 2
28598: ARRAY
28599: PPUSH
28600: LD_VAR 0 2
28604: PPUSH
28605: LD_VAR 0 3
28609: PPUSH
28610: CALL_OW 298
28614: PUSH
28615: LD_INT 6
28617: LESS
28618: IFFALSE 28717
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28620: LD_EXP 132
28624: PUSH
28625: LD_VAR 0 6
28629: ARRAY
28630: PUSH
28631: LD_VAR 0 5
28635: ARRAY
28636: PUSH
28637: LD_INT 1
28639: ARRAY
28640: PPUSH
28641: LD_EXP 132
28645: PUSH
28646: LD_VAR 0 6
28650: ARRAY
28651: PUSH
28652: LD_VAR 0 5
28656: ARRAY
28657: PUSH
28658: LD_INT 2
28660: ARRAY
28661: PPUSH
28662: LD_VAR 0 1
28666: PPUSH
28667: CALL_OW 255
28671: PPUSH
28672: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28676: LD_ADDR_EXP 132
28680: PUSH
28681: LD_EXP 132
28685: PPUSH
28686: LD_VAR 0 6
28690: PPUSH
28691: LD_EXP 132
28695: PUSH
28696: LD_VAR 0 6
28700: ARRAY
28701: PPUSH
28702: LD_VAR 0 5
28706: PPUSH
28707: CALL_OW 3
28711: PPUSH
28712: CALL_OW 1
28716: ST_TO_ADDR
// end ; end ;
28717: GO 28555
28719: POP
28720: POP
// end ;
28721: LD_VAR 0 4
28725: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28726: LD_INT 0
28728: PPUSH
28729: PPUSH
28730: PPUSH
28731: PPUSH
28732: PPUSH
28733: PPUSH
28734: PPUSH
28735: PPUSH
28736: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28737: LD_VAR 0 1
28741: PPUSH
28742: CALL_OW 264
28746: PUSH
28747: LD_EXP 52
28751: EQUAL
28752: NOT
28753: PUSH
28754: LD_VAR 0 1
28758: PUSH
28759: LD_EXP 131
28763: IN
28764: NOT
28765: OR
28766: IFFALSE 28770
// exit ;
28768: GO 29092
// index := GetElementIndex ( minersList , unit ) ;
28770: LD_ADDR_VAR 0 6
28774: PUSH
28775: LD_EXP 131
28779: PPUSH
28780: LD_VAR 0 1
28784: PPUSH
28785: CALL 34288 0 2
28789: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28790: LD_ADDR_VAR 0 8
28794: PUSH
28795: LD_EXP 133
28799: PUSH
28800: LD_EXP 132
28804: PUSH
28805: LD_VAR 0 6
28809: ARRAY
28810: MINUS
28811: ST_TO_ADDR
// if not minesFreeAmount then
28812: LD_VAR 0 8
28816: NOT
28817: IFFALSE 28821
// exit ;
28819: GO 29092
// tmp := [ ] ;
28821: LD_ADDR_VAR 0 7
28825: PUSH
28826: EMPTY
28827: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28828: LD_ADDR_VAR 0 5
28832: PUSH
28833: DOUBLE
28834: LD_INT 1
28836: DEC
28837: ST_TO_ADDR
28838: LD_VAR 0 8
28842: PUSH
28843: FOR_TO
28844: IFFALSE 29039
// begin _d := rand ( 0 , 5 ) ;
28846: LD_ADDR_VAR 0 11
28850: PUSH
28851: LD_INT 0
28853: PPUSH
28854: LD_INT 5
28856: PPUSH
28857: CALL_OW 12
28861: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28862: LD_ADDR_VAR 0 12
28866: PUSH
28867: LD_INT 2
28869: PPUSH
28870: LD_INT 6
28872: PPUSH
28873: CALL_OW 12
28877: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28878: LD_ADDR_VAR 0 9
28882: PUSH
28883: LD_VAR 0 2
28887: PPUSH
28888: LD_VAR 0 11
28892: PPUSH
28893: LD_VAR 0 12
28897: PPUSH
28898: CALL_OW 272
28902: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28903: LD_ADDR_VAR 0 10
28907: PUSH
28908: LD_VAR 0 3
28912: PPUSH
28913: LD_VAR 0 11
28917: PPUSH
28918: LD_VAR 0 12
28922: PPUSH
28923: CALL_OW 273
28927: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28928: LD_VAR 0 9
28932: PPUSH
28933: LD_VAR 0 10
28937: PPUSH
28938: CALL_OW 488
28942: PUSH
28943: LD_VAR 0 9
28947: PUSH
28948: LD_VAR 0 10
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_VAR 0 7
28961: IN
28962: NOT
28963: AND
28964: PUSH
28965: LD_VAR 0 9
28969: PPUSH
28970: LD_VAR 0 10
28974: PPUSH
28975: CALL_OW 458
28979: NOT
28980: AND
28981: IFFALSE 29023
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28983: LD_ADDR_VAR 0 7
28987: PUSH
28988: LD_VAR 0 7
28992: PPUSH
28993: LD_VAR 0 7
28997: PUSH
28998: LD_INT 1
29000: PLUS
29001: PPUSH
29002: LD_VAR 0 9
29006: PUSH
29007: LD_VAR 0 10
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PPUSH
29016: CALL_OW 1
29020: ST_TO_ADDR
29021: GO 29037
// i := i - 1 ;
29023: LD_ADDR_VAR 0 5
29027: PUSH
29028: LD_VAR 0 5
29032: PUSH
29033: LD_INT 1
29035: MINUS
29036: ST_TO_ADDR
// end ;
29037: GO 28843
29039: POP
29040: POP
// for i in tmp do
29041: LD_ADDR_VAR 0 5
29045: PUSH
29046: LD_VAR 0 7
29050: PUSH
29051: FOR_IN
29052: IFFALSE 29090
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29054: LD_VAR 0 1
29058: PPUSH
29059: LD_VAR 0 5
29063: PUSH
29064: LD_INT 1
29066: ARRAY
29067: PPUSH
29068: LD_VAR 0 5
29072: PUSH
29073: LD_INT 2
29075: ARRAY
29076: PPUSH
29077: CALL 28032 0 3
29081: NOT
29082: IFFALSE 29088
// exit ;
29084: POP
29085: POP
29086: GO 29092
29088: GO 29051
29090: POP
29091: POP
// end ;
29092: LD_VAR 0 4
29096: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29097: LD_INT 0
29099: PPUSH
29100: PPUSH
29101: PPUSH
29102: PPUSH
29103: PPUSH
29104: PPUSH
29105: PPUSH
// if not GetClass ( unit ) = class_sniper then
29106: LD_VAR 0 1
29110: PPUSH
29111: CALL_OW 257
29115: PUSH
29116: LD_INT 5
29118: EQUAL
29119: NOT
29120: IFFALSE 29124
// exit ;
29122: GO 29512
// dist := 8 ;
29124: LD_ADDR_VAR 0 5
29128: PUSH
29129: LD_INT 8
29131: ST_TO_ADDR
// viewRange := 12 ;
29132: LD_ADDR_VAR 0 7
29136: PUSH
29137: LD_INT 12
29139: ST_TO_ADDR
// side := GetSide ( unit ) ;
29140: LD_ADDR_VAR 0 6
29144: PUSH
29145: LD_VAR 0 1
29149: PPUSH
29150: CALL_OW 255
29154: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29155: LD_INT 61
29157: PPUSH
29158: LD_VAR 0 6
29162: PPUSH
29163: CALL_OW 321
29167: PUSH
29168: LD_INT 2
29170: EQUAL
29171: IFFALSE 29181
// viewRange := 16 ;
29173: LD_ADDR_VAR 0 7
29177: PUSH
29178: LD_INT 16
29180: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29181: LD_VAR 0 1
29185: PPUSH
29186: LD_VAR 0 2
29190: PPUSH
29191: LD_VAR 0 3
29195: PPUSH
29196: CALL_OW 297
29200: PUSH
29201: LD_VAR 0 5
29205: GREATER
29206: IFFALSE 29285
// begin ComMoveXY ( unit , x , y ) ;
29208: LD_VAR 0 1
29212: PPUSH
29213: LD_VAR 0 2
29217: PPUSH
29218: LD_VAR 0 3
29222: PPUSH
29223: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29227: LD_INT 35
29229: PPUSH
29230: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29234: LD_VAR 0 1
29238: PPUSH
29239: LD_VAR 0 2
29243: PPUSH
29244: LD_VAR 0 3
29248: PPUSH
29249: CALL 65007 0 3
29253: NOT
29254: IFFALSE 29258
// exit ;
29256: GO 29512
// until GetDistUnitXY ( unit , x , y ) < dist ;
29258: LD_VAR 0 1
29262: PPUSH
29263: LD_VAR 0 2
29267: PPUSH
29268: LD_VAR 0 3
29272: PPUSH
29273: CALL_OW 297
29277: PUSH
29278: LD_VAR 0 5
29282: LESS
29283: IFFALSE 29227
// end ; ComTurnXY ( unit , x , y ) ;
29285: LD_VAR 0 1
29289: PPUSH
29290: LD_VAR 0 2
29294: PPUSH
29295: LD_VAR 0 3
29299: PPUSH
29300: CALL_OW 118
// wait ( 5 ) ;
29304: LD_INT 5
29306: PPUSH
29307: CALL_OW 67
// _d := GetDir ( unit ) ;
29311: LD_ADDR_VAR 0 10
29315: PUSH
29316: LD_VAR 0 1
29320: PPUSH
29321: CALL_OW 254
29325: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29326: LD_ADDR_VAR 0 8
29330: PUSH
29331: LD_VAR 0 1
29335: PPUSH
29336: CALL_OW 250
29340: PPUSH
29341: LD_VAR 0 10
29345: PPUSH
29346: LD_VAR 0 5
29350: PPUSH
29351: CALL_OW 272
29355: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29356: LD_ADDR_VAR 0 9
29360: PUSH
29361: LD_VAR 0 1
29365: PPUSH
29366: CALL_OW 251
29370: PPUSH
29371: LD_VAR 0 10
29375: PPUSH
29376: LD_VAR 0 5
29380: PPUSH
29381: CALL_OW 273
29385: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29386: LD_VAR 0 8
29390: PPUSH
29391: LD_VAR 0 9
29395: PPUSH
29396: CALL_OW 488
29400: NOT
29401: IFFALSE 29405
// exit ;
29403: GO 29512
// ComAnimCustom ( unit , 1 ) ;
29405: LD_VAR 0 1
29409: PPUSH
29410: LD_INT 1
29412: PPUSH
29413: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29417: LD_VAR 0 8
29421: PPUSH
29422: LD_VAR 0 9
29426: PPUSH
29427: LD_VAR 0 6
29431: PPUSH
29432: LD_VAR 0 7
29436: PPUSH
29437: CALL_OW 330
// repeat wait ( 1 ) ;
29441: LD_INT 1
29443: PPUSH
29444: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29448: LD_VAR 0 1
29452: PPUSH
29453: CALL_OW 316
29457: PUSH
29458: LD_VAR 0 1
29462: PPUSH
29463: CALL_OW 314
29467: OR
29468: PUSH
29469: LD_VAR 0 1
29473: PPUSH
29474: CALL_OW 302
29478: NOT
29479: OR
29480: PUSH
29481: LD_VAR 0 1
29485: PPUSH
29486: CALL_OW 301
29490: OR
29491: IFFALSE 29441
// RemoveSeeing ( _x , _y , side ) ;
29493: LD_VAR 0 8
29497: PPUSH
29498: LD_VAR 0 9
29502: PPUSH
29503: LD_VAR 0 6
29507: PPUSH
29508: CALL_OW 331
// end ; end_of_file
29512: LD_VAR 0 4
29516: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29517: LD_INT 0
29519: PPUSH
29520: PPUSH
// if exist_mode then
29521: LD_VAR 0 2
29525: IFFALSE 29550
// unit := CreateCharacter ( prefix & ident ) else
29527: LD_ADDR_VAR 0 5
29531: PUSH
29532: LD_VAR 0 3
29536: PUSH
29537: LD_VAR 0 1
29541: STR
29542: PPUSH
29543: CALL_OW 34
29547: ST_TO_ADDR
29548: GO 29565
// unit := NewCharacter ( ident ) ;
29550: LD_ADDR_VAR 0 5
29554: PUSH
29555: LD_VAR 0 1
29559: PPUSH
29560: CALL_OW 25
29564: ST_TO_ADDR
// result := unit ;
29565: LD_ADDR_VAR 0 4
29569: PUSH
29570: LD_VAR 0 5
29574: ST_TO_ADDR
// end ;
29575: LD_VAR 0 4
29579: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29580: LD_INT 0
29582: PPUSH
29583: PPUSH
// if not side or not nation then
29584: LD_VAR 0 1
29588: NOT
29589: PUSH
29590: LD_VAR 0 2
29594: NOT
29595: OR
29596: IFFALSE 29600
// exit ;
29598: GO 30368
// case nation of nation_american :
29600: LD_VAR 0 2
29604: PUSH
29605: LD_INT 1
29607: DOUBLE
29608: EQUAL
29609: IFTRUE 29613
29611: GO 29827
29613: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29614: LD_ADDR_VAR 0 4
29618: PUSH
29619: LD_INT 35
29621: PUSH
29622: LD_INT 45
29624: PUSH
29625: LD_INT 46
29627: PUSH
29628: LD_INT 47
29630: PUSH
29631: LD_INT 82
29633: PUSH
29634: LD_INT 83
29636: PUSH
29637: LD_INT 84
29639: PUSH
29640: LD_INT 85
29642: PUSH
29643: LD_INT 86
29645: PUSH
29646: LD_INT 1
29648: PUSH
29649: LD_INT 2
29651: PUSH
29652: LD_INT 6
29654: PUSH
29655: LD_INT 15
29657: PUSH
29658: LD_INT 16
29660: PUSH
29661: LD_INT 7
29663: PUSH
29664: LD_INT 12
29666: PUSH
29667: LD_INT 13
29669: PUSH
29670: LD_INT 10
29672: PUSH
29673: LD_INT 14
29675: PUSH
29676: LD_INT 20
29678: PUSH
29679: LD_INT 21
29681: PUSH
29682: LD_INT 22
29684: PUSH
29685: LD_INT 25
29687: PUSH
29688: LD_INT 32
29690: PUSH
29691: LD_INT 27
29693: PUSH
29694: LD_INT 36
29696: PUSH
29697: LD_INT 69
29699: PUSH
29700: LD_INT 39
29702: PUSH
29703: LD_INT 34
29705: PUSH
29706: LD_INT 40
29708: PUSH
29709: LD_INT 48
29711: PUSH
29712: LD_INT 49
29714: PUSH
29715: LD_INT 50
29717: PUSH
29718: LD_INT 51
29720: PUSH
29721: LD_INT 52
29723: PUSH
29724: LD_INT 53
29726: PUSH
29727: LD_INT 54
29729: PUSH
29730: LD_INT 55
29732: PUSH
29733: LD_INT 56
29735: PUSH
29736: LD_INT 57
29738: PUSH
29739: LD_INT 58
29741: PUSH
29742: LD_INT 59
29744: PUSH
29745: LD_INT 60
29747: PUSH
29748: LD_INT 61
29750: PUSH
29751: LD_INT 62
29753: PUSH
29754: LD_INT 80
29756: PUSH
29757: LD_INT 82
29759: PUSH
29760: LD_INT 83
29762: PUSH
29763: LD_INT 84
29765: PUSH
29766: LD_INT 85
29768: PUSH
29769: LD_INT 86
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: ST_TO_ADDR
29825: GO 30292
29827: LD_INT 2
29829: DOUBLE
29830: EQUAL
29831: IFTRUE 29835
29833: GO 30061
29835: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29836: LD_ADDR_VAR 0 4
29840: PUSH
29841: LD_INT 35
29843: PUSH
29844: LD_INT 45
29846: PUSH
29847: LD_INT 46
29849: PUSH
29850: LD_INT 47
29852: PUSH
29853: LD_INT 82
29855: PUSH
29856: LD_INT 83
29858: PUSH
29859: LD_INT 84
29861: PUSH
29862: LD_INT 85
29864: PUSH
29865: LD_INT 87
29867: PUSH
29868: LD_INT 70
29870: PUSH
29871: LD_INT 1
29873: PUSH
29874: LD_INT 11
29876: PUSH
29877: LD_INT 3
29879: PUSH
29880: LD_INT 4
29882: PUSH
29883: LD_INT 5
29885: PUSH
29886: LD_INT 6
29888: PUSH
29889: LD_INT 15
29891: PUSH
29892: LD_INT 18
29894: PUSH
29895: LD_INT 7
29897: PUSH
29898: LD_INT 17
29900: PUSH
29901: LD_INT 8
29903: PUSH
29904: LD_INT 20
29906: PUSH
29907: LD_INT 21
29909: PUSH
29910: LD_INT 22
29912: PUSH
29913: LD_INT 72
29915: PUSH
29916: LD_INT 26
29918: PUSH
29919: LD_INT 69
29921: PUSH
29922: LD_INT 39
29924: PUSH
29925: LD_INT 40
29927: PUSH
29928: LD_INT 41
29930: PUSH
29931: LD_INT 42
29933: PUSH
29934: LD_INT 43
29936: PUSH
29937: LD_INT 48
29939: PUSH
29940: LD_INT 49
29942: PUSH
29943: LD_INT 50
29945: PUSH
29946: LD_INT 51
29948: PUSH
29949: LD_INT 52
29951: PUSH
29952: LD_INT 53
29954: PUSH
29955: LD_INT 54
29957: PUSH
29958: LD_INT 55
29960: PUSH
29961: LD_INT 56
29963: PUSH
29964: LD_INT 60
29966: PUSH
29967: LD_INT 61
29969: PUSH
29970: LD_INT 62
29972: PUSH
29973: LD_INT 66
29975: PUSH
29976: LD_INT 67
29978: PUSH
29979: LD_INT 68
29981: PUSH
29982: LD_INT 81
29984: PUSH
29985: LD_INT 82
29987: PUSH
29988: LD_INT 83
29990: PUSH
29991: LD_INT 84
29993: PUSH
29994: LD_INT 85
29996: PUSH
29997: LD_INT 87
29999: PUSH
30000: LD_INT 88
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: ST_TO_ADDR
30059: GO 30292
30061: LD_INT 3
30063: DOUBLE
30064: EQUAL
30065: IFTRUE 30069
30067: GO 30291
30069: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30070: LD_ADDR_VAR 0 4
30074: PUSH
30075: LD_INT 46
30077: PUSH
30078: LD_INT 47
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: LD_INT 82
30089: PUSH
30090: LD_INT 83
30092: PUSH
30093: LD_INT 84
30095: PUSH
30096: LD_INT 85
30098: PUSH
30099: LD_INT 86
30101: PUSH
30102: LD_INT 11
30104: PUSH
30105: LD_INT 9
30107: PUSH
30108: LD_INT 20
30110: PUSH
30111: LD_INT 19
30113: PUSH
30114: LD_INT 21
30116: PUSH
30117: LD_INT 24
30119: PUSH
30120: LD_INT 22
30122: PUSH
30123: LD_INT 25
30125: PUSH
30126: LD_INT 28
30128: PUSH
30129: LD_INT 29
30131: PUSH
30132: LD_INT 30
30134: PUSH
30135: LD_INT 31
30137: PUSH
30138: LD_INT 37
30140: PUSH
30141: LD_INT 38
30143: PUSH
30144: LD_INT 32
30146: PUSH
30147: LD_INT 27
30149: PUSH
30150: LD_INT 33
30152: PUSH
30153: LD_INT 69
30155: PUSH
30156: LD_INT 39
30158: PUSH
30159: LD_INT 34
30161: PUSH
30162: LD_INT 40
30164: PUSH
30165: LD_INT 71
30167: PUSH
30168: LD_INT 23
30170: PUSH
30171: LD_INT 44
30173: PUSH
30174: LD_INT 48
30176: PUSH
30177: LD_INT 49
30179: PUSH
30180: LD_INT 50
30182: PUSH
30183: LD_INT 51
30185: PUSH
30186: LD_INT 52
30188: PUSH
30189: LD_INT 53
30191: PUSH
30192: LD_INT 54
30194: PUSH
30195: LD_INT 55
30197: PUSH
30198: LD_INT 56
30200: PUSH
30201: LD_INT 57
30203: PUSH
30204: LD_INT 58
30206: PUSH
30207: LD_INT 59
30209: PUSH
30210: LD_INT 63
30212: PUSH
30213: LD_INT 64
30215: PUSH
30216: LD_INT 65
30218: PUSH
30219: LD_INT 82
30221: PUSH
30222: LD_INT 83
30224: PUSH
30225: LD_INT 84
30227: PUSH
30228: LD_INT 85
30230: PUSH
30231: LD_INT 86
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: ST_TO_ADDR
30289: GO 30292
30291: POP
// if state > - 1 and state < 3 then
30292: LD_VAR 0 3
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: GREATER
30301: PUSH
30302: LD_VAR 0 3
30306: PUSH
30307: LD_INT 3
30309: LESS
30310: AND
30311: IFFALSE 30368
// for i in result do
30313: LD_ADDR_VAR 0 5
30317: PUSH
30318: LD_VAR 0 4
30322: PUSH
30323: FOR_IN
30324: IFFALSE 30366
// if GetTech ( i , side ) <> state then
30326: LD_VAR 0 5
30330: PPUSH
30331: LD_VAR 0 1
30335: PPUSH
30336: CALL_OW 321
30340: PUSH
30341: LD_VAR 0 3
30345: NONEQUAL
30346: IFFALSE 30364
// result := result diff i ;
30348: LD_ADDR_VAR 0 4
30352: PUSH
30353: LD_VAR 0 4
30357: PUSH
30358: LD_VAR 0 5
30362: DIFF
30363: ST_TO_ADDR
30364: GO 30323
30366: POP
30367: POP
// end ;
30368: LD_VAR 0 4
30372: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30373: LD_INT 0
30375: PPUSH
30376: PPUSH
30377: PPUSH
// result := true ;
30378: LD_ADDR_VAR 0 3
30382: PUSH
30383: LD_INT 1
30385: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30386: LD_ADDR_VAR 0 5
30390: PUSH
30391: LD_VAR 0 2
30395: PPUSH
30396: CALL_OW 480
30400: ST_TO_ADDR
// if not tmp then
30401: LD_VAR 0 5
30405: NOT
30406: IFFALSE 30410
// exit ;
30408: GO 30459
// for i in tmp do
30410: LD_ADDR_VAR 0 4
30414: PUSH
30415: LD_VAR 0 5
30419: PUSH
30420: FOR_IN
30421: IFFALSE 30457
// if GetTech ( i , side ) <> state_researched then
30423: LD_VAR 0 4
30427: PPUSH
30428: LD_VAR 0 1
30432: PPUSH
30433: CALL_OW 321
30437: PUSH
30438: LD_INT 2
30440: NONEQUAL
30441: IFFALSE 30455
// begin result := false ;
30443: LD_ADDR_VAR 0 3
30447: PUSH
30448: LD_INT 0
30450: ST_TO_ADDR
// exit ;
30451: POP
30452: POP
30453: GO 30459
// end ;
30455: GO 30420
30457: POP
30458: POP
// end ;
30459: LD_VAR 0 3
30463: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30464: LD_INT 0
30466: PPUSH
30467: PPUSH
30468: PPUSH
30469: PPUSH
30470: PPUSH
30471: PPUSH
30472: PPUSH
30473: PPUSH
30474: PPUSH
30475: PPUSH
30476: PPUSH
30477: PPUSH
30478: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30479: LD_VAR 0 1
30483: NOT
30484: PUSH
30485: LD_VAR 0 1
30489: PPUSH
30490: CALL_OW 257
30494: PUSH
30495: LD_INT 9
30497: NONEQUAL
30498: OR
30499: IFFALSE 30503
// exit ;
30501: GO 31076
// side := GetSide ( unit ) ;
30503: LD_ADDR_VAR 0 9
30507: PUSH
30508: LD_VAR 0 1
30512: PPUSH
30513: CALL_OW 255
30517: ST_TO_ADDR
// tech_space := tech_spacanom ;
30518: LD_ADDR_VAR 0 12
30522: PUSH
30523: LD_INT 29
30525: ST_TO_ADDR
// tech_time := tech_taurad ;
30526: LD_ADDR_VAR 0 13
30530: PUSH
30531: LD_INT 28
30533: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30534: LD_ADDR_VAR 0 11
30538: PUSH
30539: LD_VAR 0 1
30543: PPUSH
30544: CALL_OW 310
30548: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30549: LD_VAR 0 11
30553: PPUSH
30554: CALL_OW 247
30558: PUSH
30559: LD_INT 2
30561: EQUAL
30562: IFFALSE 30566
// exit ;
30564: GO 31076
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30566: LD_ADDR_VAR 0 8
30570: PUSH
30571: LD_INT 81
30573: PUSH
30574: LD_VAR 0 9
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 3
30585: PUSH
30586: LD_INT 21
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PPUSH
30604: CALL_OW 69
30608: ST_TO_ADDR
// if not tmp then
30609: LD_VAR 0 8
30613: NOT
30614: IFFALSE 30618
// exit ;
30616: GO 31076
// if in_unit then
30618: LD_VAR 0 11
30622: IFFALSE 30646
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30624: LD_ADDR_VAR 0 10
30628: PUSH
30629: LD_VAR 0 8
30633: PPUSH
30634: LD_VAR 0 11
30638: PPUSH
30639: CALL_OW 74
30643: ST_TO_ADDR
30644: GO 30666
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30646: LD_ADDR_VAR 0 10
30650: PUSH
30651: LD_VAR 0 8
30655: PPUSH
30656: LD_VAR 0 1
30660: PPUSH
30661: CALL_OW 74
30665: ST_TO_ADDR
// if not enemy then
30666: LD_VAR 0 10
30670: NOT
30671: IFFALSE 30675
// exit ;
30673: GO 31076
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30675: LD_VAR 0 11
30679: PUSH
30680: LD_VAR 0 11
30684: PPUSH
30685: LD_VAR 0 10
30689: PPUSH
30690: CALL_OW 296
30694: PUSH
30695: LD_INT 13
30697: GREATER
30698: AND
30699: PUSH
30700: LD_VAR 0 1
30704: PPUSH
30705: LD_VAR 0 10
30709: PPUSH
30710: CALL_OW 296
30714: PUSH
30715: LD_INT 12
30717: GREATER
30718: OR
30719: IFFALSE 30723
// exit ;
30721: GO 31076
// missile := [ 1 ] ;
30723: LD_ADDR_VAR 0 14
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: EMPTY
30732: LIST
30733: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30734: LD_VAR 0 9
30738: PPUSH
30739: LD_VAR 0 12
30743: PPUSH
30744: CALL_OW 325
30748: IFFALSE 30777
// missile := Replace ( missile , missile + 1 , 2 ) ;
30750: LD_ADDR_VAR 0 14
30754: PUSH
30755: LD_VAR 0 14
30759: PPUSH
30760: LD_VAR 0 14
30764: PUSH
30765: LD_INT 1
30767: PLUS
30768: PPUSH
30769: LD_INT 2
30771: PPUSH
30772: CALL_OW 1
30776: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30777: LD_VAR 0 9
30781: PPUSH
30782: LD_VAR 0 13
30786: PPUSH
30787: CALL_OW 325
30791: PUSH
30792: LD_VAR 0 10
30796: PPUSH
30797: CALL_OW 255
30801: PPUSH
30802: LD_VAR 0 13
30806: PPUSH
30807: CALL_OW 325
30811: NOT
30812: AND
30813: IFFALSE 30842
// missile := Replace ( missile , missile + 1 , 3 ) ;
30815: LD_ADDR_VAR 0 14
30819: PUSH
30820: LD_VAR 0 14
30824: PPUSH
30825: LD_VAR 0 14
30829: PUSH
30830: LD_INT 1
30832: PLUS
30833: PPUSH
30834: LD_INT 3
30836: PPUSH
30837: CALL_OW 1
30841: ST_TO_ADDR
// if missile < 2 then
30842: LD_VAR 0 14
30846: PUSH
30847: LD_INT 2
30849: LESS
30850: IFFALSE 30854
// exit ;
30852: GO 31076
// x := GetX ( enemy ) ;
30854: LD_ADDR_VAR 0 4
30858: PUSH
30859: LD_VAR 0 10
30863: PPUSH
30864: CALL_OW 250
30868: ST_TO_ADDR
// y := GetY ( enemy ) ;
30869: LD_ADDR_VAR 0 5
30873: PUSH
30874: LD_VAR 0 10
30878: PPUSH
30879: CALL_OW 251
30883: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30884: LD_ADDR_VAR 0 6
30888: PUSH
30889: LD_VAR 0 4
30893: PUSH
30894: LD_INT 1
30896: NEG
30897: PPUSH
30898: LD_INT 1
30900: PPUSH
30901: CALL_OW 12
30905: PLUS
30906: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30907: LD_ADDR_VAR 0 7
30911: PUSH
30912: LD_VAR 0 5
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PPUSH
30921: LD_INT 1
30923: PPUSH
30924: CALL_OW 12
30928: PLUS
30929: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30930: LD_VAR 0 6
30934: PPUSH
30935: LD_VAR 0 7
30939: PPUSH
30940: CALL_OW 488
30944: NOT
30945: IFFALSE 30967
// begin _x := x ;
30947: LD_ADDR_VAR 0 6
30951: PUSH
30952: LD_VAR 0 4
30956: ST_TO_ADDR
// _y := y ;
30957: LD_ADDR_VAR 0 7
30961: PUSH
30962: LD_VAR 0 5
30966: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30967: LD_ADDR_VAR 0 3
30971: PUSH
30972: LD_INT 1
30974: PPUSH
30975: LD_VAR 0 14
30979: PPUSH
30980: CALL_OW 12
30984: ST_TO_ADDR
// case i of 1 :
30985: LD_VAR 0 3
30989: PUSH
30990: LD_INT 1
30992: DOUBLE
30993: EQUAL
30994: IFTRUE 30998
30996: GO 31015
30998: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30999: LD_VAR 0 1
31003: PPUSH
31004: LD_VAR 0 10
31008: PPUSH
31009: CALL_OW 115
31013: GO 31076
31015: LD_INT 2
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31023
31021: GO 31045
31023: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31024: LD_VAR 0 1
31028: PPUSH
31029: LD_VAR 0 6
31033: PPUSH
31034: LD_VAR 0 7
31038: PPUSH
31039: CALL_OW 153
31043: GO 31076
31045: LD_INT 3
31047: DOUBLE
31048: EQUAL
31049: IFTRUE 31053
31051: GO 31075
31053: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31054: LD_VAR 0 1
31058: PPUSH
31059: LD_VAR 0 6
31063: PPUSH
31064: LD_VAR 0 7
31068: PPUSH
31069: CALL_OW 154
31073: GO 31076
31075: POP
// end ;
31076: LD_VAR 0 2
31080: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31081: LD_INT 0
31083: PPUSH
31084: PPUSH
31085: PPUSH
31086: PPUSH
31087: PPUSH
31088: PPUSH
// if not unit or not building then
31089: LD_VAR 0 1
31093: NOT
31094: PUSH
31095: LD_VAR 0 2
31099: NOT
31100: OR
31101: IFFALSE 31105
// exit ;
31103: GO 31263
// x := GetX ( building ) ;
31105: LD_ADDR_VAR 0 5
31109: PUSH
31110: LD_VAR 0 2
31114: PPUSH
31115: CALL_OW 250
31119: ST_TO_ADDR
// y := GetY ( building ) ;
31120: LD_ADDR_VAR 0 6
31124: PUSH
31125: LD_VAR 0 2
31129: PPUSH
31130: CALL_OW 251
31134: ST_TO_ADDR
// for i = 0 to 5 do
31135: LD_ADDR_VAR 0 4
31139: PUSH
31140: DOUBLE
31141: LD_INT 0
31143: DEC
31144: ST_TO_ADDR
31145: LD_INT 5
31147: PUSH
31148: FOR_TO
31149: IFFALSE 31261
// begin _x := ShiftX ( x , i , 3 ) ;
31151: LD_ADDR_VAR 0 7
31155: PUSH
31156: LD_VAR 0 5
31160: PPUSH
31161: LD_VAR 0 4
31165: PPUSH
31166: LD_INT 3
31168: PPUSH
31169: CALL_OW 272
31173: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31174: LD_ADDR_VAR 0 8
31178: PUSH
31179: LD_VAR 0 6
31183: PPUSH
31184: LD_VAR 0 4
31188: PPUSH
31189: LD_INT 3
31191: PPUSH
31192: CALL_OW 273
31196: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31197: LD_VAR 0 7
31201: PPUSH
31202: LD_VAR 0 8
31206: PPUSH
31207: CALL_OW 488
31211: NOT
31212: IFFALSE 31216
// continue ;
31214: GO 31148
// if HexInfo ( _x , _y ) = 0 then
31216: LD_VAR 0 7
31220: PPUSH
31221: LD_VAR 0 8
31225: PPUSH
31226: CALL_OW 428
31230: PUSH
31231: LD_INT 0
31233: EQUAL
31234: IFFALSE 31259
// begin ComMoveXY ( unit , _x , _y ) ;
31236: LD_VAR 0 1
31240: PPUSH
31241: LD_VAR 0 7
31245: PPUSH
31246: LD_VAR 0 8
31250: PPUSH
31251: CALL_OW 111
// exit ;
31255: POP
31256: POP
31257: GO 31263
// end ; end ;
31259: GO 31148
31261: POP
31262: POP
// end ;
31263: LD_VAR 0 3
31267: RET
// export function ScanBase ( side , base_area ) ; begin
31268: LD_INT 0
31270: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31271: LD_ADDR_VAR 0 3
31275: PUSH
31276: LD_VAR 0 2
31280: PPUSH
31281: LD_INT 81
31283: PUSH
31284: LD_VAR 0 1
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PPUSH
31293: CALL_OW 70
31297: ST_TO_ADDR
// end ;
31298: LD_VAR 0 3
31302: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31303: LD_INT 0
31305: PPUSH
31306: PPUSH
31307: PPUSH
31308: PPUSH
// result := false ;
31309: LD_ADDR_VAR 0 2
31313: PUSH
31314: LD_INT 0
31316: ST_TO_ADDR
// side := GetSide ( unit ) ;
31317: LD_ADDR_VAR 0 3
31321: PUSH
31322: LD_VAR 0 1
31326: PPUSH
31327: CALL_OW 255
31331: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31332: LD_ADDR_VAR 0 4
31336: PUSH
31337: LD_VAR 0 1
31341: PPUSH
31342: CALL_OW 248
31346: ST_TO_ADDR
// case nat of 1 :
31347: LD_VAR 0 4
31351: PUSH
31352: LD_INT 1
31354: DOUBLE
31355: EQUAL
31356: IFTRUE 31360
31358: GO 31371
31360: POP
// tech := tech_lassight ; 2 :
31361: LD_ADDR_VAR 0 5
31365: PUSH
31366: LD_INT 12
31368: ST_TO_ADDR
31369: GO 31410
31371: LD_INT 2
31373: DOUBLE
31374: EQUAL
31375: IFTRUE 31379
31377: GO 31390
31379: POP
// tech := tech_mortar ; 3 :
31380: LD_ADDR_VAR 0 5
31384: PUSH
31385: LD_INT 41
31387: ST_TO_ADDR
31388: GO 31410
31390: LD_INT 3
31392: DOUBLE
31393: EQUAL
31394: IFTRUE 31398
31396: GO 31409
31398: POP
// tech := tech_bazooka ; end ;
31399: LD_ADDR_VAR 0 5
31403: PUSH
31404: LD_INT 44
31406: ST_TO_ADDR
31407: GO 31410
31409: POP
// if Researched ( side , tech ) then
31410: LD_VAR 0 3
31414: PPUSH
31415: LD_VAR 0 5
31419: PPUSH
31420: CALL_OW 325
31424: IFFALSE 31451
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31426: LD_ADDR_VAR 0 2
31430: PUSH
31431: LD_INT 5
31433: PUSH
31434: LD_INT 8
31436: PUSH
31437: LD_INT 9
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: PUSH
31445: LD_VAR 0 4
31449: ARRAY
31450: ST_TO_ADDR
// end ;
31451: LD_VAR 0 2
31455: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31456: LD_INT 0
31458: PPUSH
31459: PPUSH
31460: PPUSH
// if not mines then
31461: LD_VAR 0 2
31465: NOT
31466: IFFALSE 31470
// exit ;
31468: GO 31614
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31470: LD_ADDR_VAR 0 5
31474: PUSH
31475: LD_INT 81
31477: PUSH
31478: LD_VAR 0 1
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 3
31489: PUSH
31490: LD_INT 21
31492: PUSH
31493: LD_INT 3
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PPUSH
31508: CALL_OW 69
31512: ST_TO_ADDR
// for i in mines do
31513: LD_ADDR_VAR 0 4
31517: PUSH
31518: LD_VAR 0 2
31522: PUSH
31523: FOR_IN
31524: IFFALSE 31612
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31526: LD_VAR 0 4
31530: PUSH
31531: LD_INT 1
31533: ARRAY
31534: PPUSH
31535: LD_VAR 0 4
31539: PUSH
31540: LD_INT 2
31542: ARRAY
31543: PPUSH
31544: CALL_OW 458
31548: NOT
31549: IFFALSE 31553
// continue ;
31551: GO 31523
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31553: LD_VAR 0 4
31557: PUSH
31558: LD_INT 1
31560: ARRAY
31561: PPUSH
31562: LD_VAR 0 4
31566: PUSH
31567: LD_INT 2
31569: ARRAY
31570: PPUSH
31571: CALL_OW 428
31575: PUSH
31576: LD_VAR 0 5
31580: IN
31581: IFFALSE 31610
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31583: LD_VAR 0 4
31587: PUSH
31588: LD_INT 1
31590: ARRAY
31591: PPUSH
31592: LD_VAR 0 4
31596: PUSH
31597: LD_INT 2
31599: ARRAY
31600: PPUSH
31601: LD_VAR 0 1
31605: PPUSH
31606: CALL_OW 456
// end ;
31610: GO 31523
31612: POP
31613: POP
// end ;
31614: LD_VAR 0 3
31618: RET
// export function Count ( array ) ; var i ; begin
31619: LD_INT 0
31621: PPUSH
31622: PPUSH
// result := 0 ;
31623: LD_ADDR_VAR 0 2
31627: PUSH
31628: LD_INT 0
31630: ST_TO_ADDR
// for i in array do
31631: LD_ADDR_VAR 0 3
31635: PUSH
31636: LD_VAR 0 1
31640: PUSH
31641: FOR_IN
31642: IFFALSE 31666
// if i then
31644: LD_VAR 0 3
31648: IFFALSE 31664
// result := result + 1 ;
31650: LD_ADDR_VAR 0 2
31654: PUSH
31655: LD_VAR 0 2
31659: PUSH
31660: LD_INT 1
31662: PLUS
31663: ST_TO_ADDR
31664: GO 31641
31666: POP
31667: POP
// end ;
31668: LD_VAR 0 2
31672: RET
// export function IsEmpty ( building ) ; begin
31673: LD_INT 0
31675: PPUSH
// if not building then
31676: LD_VAR 0 1
31680: NOT
31681: IFFALSE 31685
// exit ;
31683: GO 31728
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31685: LD_ADDR_VAR 0 2
31689: PUSH
31690: LD_VAR 0 1
31694: PUSH
31695: LD_INT 22
31697: PUSH
31698: LD_VAR 0 1
31702: PPUSH
31703: CALL_OW 255
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 58
31714: PUSH
31715: EMPTY
31716: LIST
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PPUSH
31722: CALL_OW 69
31726: IN
31727: ST_TO_ADDR
// end ;
31728: LD_VAR 0 2
31732: RET
// export function IsNotFull ( building ) ; begin
31733: LD_INT 0
31735: PPUSH
// if not building then
31736: LD_VAR 0 1
31740: NOT
31741: IFFALSE 31745
// exit ;
31743: GO 31764
// result := UnitsInside ( building ) < 6 ;
31745: LD_ADDR_VAR 0 2
31749: PUSH
31750: LD_VAR 0 1
31754: PPUSH
31755: CALL_OW 313
31759: PUSH
31760: LD_INT 6
31762: LESS
31763: ST_TO_ADDR
// end ;
31764: LD_VAR 0 2
31768: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31769: LD_INT 0
31771: PPUSH
31772: PPUSH
31773: PPUSH
31774: PPUSH
// tmp := [ ] ;
31775: LD_ADDR_VAR 0 3
31779: PUSH
31780: EMPTY
31781: ST_TO_ADDR
// list := [ ] ;
31782: LD_ADDR_VAR 0 5
31786: PUSH
31787: EMPTY
31788: ST_TO_ADDR
// for i = 16 to 25 do
31789: LD_ADDR_VAR 0 4
31793: PUSH
31794: DOUBLE
31795: LD_INT 16
31797: DEC
31798: ST_TO_ADDR
31799: LD_INT 25
31801: PUSH
31802: FOR_TO
31803: IFFALSE 31876
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31805: LD_ADDR_VAR 0 3
31809: PUSH
31810: LD_VAR 0 3
31814: PUSH
31815: LD_INT 22
31817: PUSH
31818: LD_VAR 0 1
31822: PPUSH
31823: CALL_OW 255
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 91
31834: PUSH
31835: LD_VAR 0 1
31839: PUSH
31840: LD_INT 6
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 30
31850: PUSH
31851: LD_VAR 0 4
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: LIST
31864: PUSH
31865: EMPTY
31866: LIST
31867: PPUSH
31868: CALL_OW 69
31872: ADD
31873: ST_TO_ADDR
31874: GO 31802
31876: POP
31877: POP
// for i = 1 to tmp do
31878: LD_ADDR_VAR 0 4
31882: PUSH
31883: DOUBLE
31884: LD_INT 1
31886: DEC
31887: ST_TO_ADDR
31888: LD_VAR 0 3
31892: PUSH
31893: FOR_TO
31894: IFFALSE 31982
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31896: LD_ADDR_VAR 0 5
31900: PUSH
31901: LD_VAR 0 5
31905: PUSH
31906: LD_VAR 0 3
31910: PUSH
31911: LD_VAR 0 4
31915: ARRAY
31916: PPUSH
31917: CALL_OW 266
31921: PUSH
31922: LD_VAR 0 3
31926: PUSH
31927: LD_VAR 0 4
31931: ARRAY
31932: PPUSH
31933: CALL_OW 250
31937: PUSH
31938: LD_VAR 0 3
31942: PUSH
31943: LD_VAR 0 4
31947: ARRAY
31948: PPUSH
31949: CALL_OW 251
31953: PUSH
31954: LD_VAR 0 3
31958: PUSH
31959: LD_VAR 0 4
31963: ARRAY
31964: PPUSH
31965: CALL_OW 254
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: PUSH
31976: EMPTY
31977: LIST
31978: ADD
31979: ST_TO_ADDR
31980: GO 31893
31982: POP
31983: POP
// result := list ;
31984: LD_ADDR_VAR 0 2
31988: PUSH
31989: LD_VAR 0 5
31993: ST_TO_ADDR
// end ;
31994: LD_VAR 0 2
31998: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31999: LD_INT 0
32001: PPUSH
32002: PPUSH
32003: PPUSH
32004: PPUSH
32005: PPUSH
32006: PPUSH
32007: PPUSH
// if not factory then
32008: LD_VAR 0 1
32012: NOT
32013: IFFALSE 32017
// exit ;
32015: GO 32610
// if control = control_apeman then
32017: LD_VAR 0 4
32021: PUSH
32022: LD_INT 5
32024: EQUAL
32025: IFFALSE 32134
// begin tmp := UnitsInside ( factory ) ;
32027: LD_ADDR_VAR 0 8
32031: PUSH
32032: LD_VAR 0 1
32036: PPUSH
32037: CALL_OW 313
32041: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32042: LD_VAR 0 8
32046: PPUSH
32047: LD_INT 25
32049: PUSH
32050: LD_INT 12
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PPUSH
32057: CALL_OW 72
32061: NOT
32062: IFFALSE 32072
// control := control_manual ;
32064: LD_ADDR_VAR 0 4
32068: PUSH
32069: LD_INT 1
32071: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32072: LD_ADDR_VAR 0 8
32076: PUSH
32077: LD_VAR 0 1
32081: PPUSH
32082: CALL 31769 0 1
32086: ST_TO_ADDR
// if tmp then
32087: LD_VAR 0 8
32091: IFFALSE 32134
// begin for i in tmp do
32093: LD_ADDR_VAR 0 7
32097: PUSH
32098: LD_VAR 0 8
32102: PUSH
32103: FOR_IN
32104: IFFALSE 32132
// if i [ 1 ] = b_ext_radio then
32106: LD_VAR 0 7
32110: PUSH
32111: LD_INT 1
32113: ARRAY
32114: PUSH
32115: LD_INT 22
32117: EQUAL
32118: IFFALSE 32130
// begin control := control_remote ;
32120: LD_ADDR_VAR 0 4
32124: PUSH
32125: LD_INT 2
32127: ST_TO_ADDR
// break ;
32128: GO 32132
// end ;
32130: GO 32103
32132: POP
32133: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32134: LD_VAR 0 1
32138: PPUSH
32139: LD_VAR 0 2
32143: PPUSH
32144: LD_VAR 0 3
32148: PPUSH
32149: LD_VAR 0 4
32153: PPUSH
32154: LD_VAR 0 5
32158: PPUSH
32159: CALL_OW 448
32163: IFFALSE 32198
// begin result := [ chassis , engine , control , weapon ] ;
32165: LD_ADDR_VAR 0 6
32169: PUSH
32170: LD_VAR 0 2
32174: PUSH
32175: LD_VAR 0 3
32179: PUSH
32180: LD_VAR 0 4
32184: PUSH
32185: LD_VAR 0 5
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: ST_TO_ADDR
// exit ;
32196: GO 32610
// end ; _chassis := AvailableChassisList ( factory ) ;
32198: LD_ADDR_VAR 0 9
32202: PUSH
32203: LD_VAR 0 1
32207: PPUSH
32208: CALL_OW 475
32212: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32213: LD_ADDR_VAR 0 11
32217: PUSH
32218: LD_VAR 0 1
32222: PPUSH
32223: CALL_OW 476
32227: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32228: LD_ADDR_VAR 0 12
32232: PUSH
32233: LD_VAR 0 1
32237: PPUSH
32238: CALL_OW 477
32242: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32243: LD_ADDR_VAR 0 10
32247: PUSH
32248: LD_VAR 0 1
32252: PPUSH
32253: CALL_OW 478
32257: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32258: LD_VAR 0 9
32262: NOT
32263: PUSH
32264: LD_VAR 0 11
32268: NOT
32269: OR
32270: PUSH
32271: LD_VAR 0 12
32275: NOT
32276: OR
32277: PUSH
32278: LD_VAR 0 10
32282: NOT
32283: OR
32284: IFFALSE 32319
// begin result := [ chassis , engine , control , weapon ] ;
32286: LD_ADDR_VAR 0 6
32290: PUSH
32291: LD_VAR 0 2
32295: PUSH
32296: LD_VAR 0 3
32300: PUSH
32301: LD_VAR 0 4
32305: PUSH
32306: LD_VAR 0 5
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: ST_TO_ADDR
// exit ;
32317: GO 32610
// end ; if not chassis in _chassis then
32319: LD_VAR 0 2
32323: PUSH
32324: LD_VAR 0 9
32328: IN
32329: NOT
32330: IFFALSE 32356
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32332: LD_ADDR_VAR 0 2
32336: PUSH
32337: LD_VAR 0 9
32341: PUSH
32342: LD_INT 1
32344: PPUSH
32345: LD_VAR 0 9
32349: PPUSH
32350: CALL_OW 12
32354: ARRAY
32355: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32356: LD_VAR 0 2
32360: PPUSH
32361: LD_VAR 0 3
32365: PPUSH
32366: CALL 32615 0 2
32370: NOT
32371: IFFALSE 32430
// repeat engine := _engine [ 1 ] ;
32373: LD_ADDR_VAR 0 3
32377: PUSH
32378: LD_VAR 0 11
32382: PUSH
32383: LD_INT 1
32385: ARRAY
32386: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32387: LD_ADDR_VAR 0 11
32391: PUSH
32392: LD_VAR 0 11
32396: PPUSH
32397: LD_INT 1
32399: PPUSH
32400: CALL_OW 3
32404: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32405: LD_VAR 0 2
32409: PPUSH
32410: LD_VAR 0 3
32414: PPUSH
32415: CALL 32615 0 2
32419: PUSH
32420: LD_VAR 0 11
32424: PUSH
32425: EMPTY
32426: EQUAL
32427: OR
32428: IFFALSE 32373
// if not control in _control then
32430: LD_VAR 0 4
32434: PUSH
32435: LD_VAR 0 12
32439: IN
32440: NOT
32441: IFFALSE 32467
// control := _control [ rand ( 1 , _control ) ] ;
32443: LD_ADDR_VAR 0 4
32447: PUSH
32448: LD_VAR 0 12
32452: PUSH
32453: LD_INT 1
32455: PPUSH
32456: LD_VAR 0 12
32460: PPUSH
32461: CALL_OW 12
32465: ARRAY
32466: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32467: LD_VAR 0 2
32471: PPUSH
32472: LD_VAR 0 5
32476: PPUSH
32477: CALL 32835 0 2
32481: NOT
32482: IFFALSE 32541
// repeat weapon := _weapon [ 1 ] ;
32484: LD_ADDR_VAR 0 5
32488: PUSH
32489: LD_VAR 0 10
32493: PUSH
32494: LD_INT 1
32496: ARRAY
32497: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32498: LD_ADDR_VAR 0 10
32502: PUSH
32503: LD_VAR 0 10
32507: PPUSH
32508: LD_INT 1
32510: PPUSH
32511: CALL_OW 3
32515: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32516: LD_VAR 0 2
32520: PPUSH
32521: LD_VAR 0 5
32525: PPUSH
32526: CALL 32835 0 2
32530: PUSH
32531: LD_VAR 0 10
32535: PUSH
32536: EMPTY
32537: EQUAL
32538: OR
32539: IFFALSE 32484
// result := [ ] ;
32541: LD_ADDR_VAR 0 6
32545: PUSH
32546: EMPTY
32547: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32548: LD_VAR 0 1
32552: PPUSH
32553: LD_VAR 0 2
32557: PPUSH
32558: LD_VAR 0 3
32562: PPUSH
32563: LD_VAR 0 4
32567: PPUSH
32568: LD_VAR 0 5
32572: PPUSH
32573: CALL_OW 448
32577: IFFALSE 32610
// result := [ chassis , engine , control , weapon ] ;
32579: LD_ADDR_VAR 0 6
32583: PUSH
32584: LD_VAR 0 2
32588: PUSH
32589: LD_VAR 0 3
32593: PUSH
32594: LD_VAR 0 4
32598: PUSH
32599: LD_VAR 0 5
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: ST_TO_ADDR
// end ;
32610: LD_VAR 0 6
32614: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32615: LD_INT 0
32617: PPUSH
// if not chassis or not engine then
32618: LD_VAR 0 1
32622: NOT
32623: PUSH
32624: LD_VAR 0 2
32628: NOT
32629: OR
32630: IFFALSE 32634
// exit ;
32632: GO 32830
// case engine of engine_solar :
32634: LD_VAR 0 2
32638: PUSH
32639: LD_INT 2
32641: DOUBLE
32642: EQUAL
32643: IFTRUE 32647
32645: GO 32685
32647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32648: LD_ADDR_VAR 0 3
32652: PUSH
32653: LD_INT 11
32655: PUSH
32656: LD_INT 12
32658: PUSH
32659: LD_INT 13
32661: PUSH
32662: LD_INT 14
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: LD_INT 3
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: ST_TO_ADDR
32683: GO 32814
32685: LD_INT 1
32687: DOUBLE
32688: EQUAL
32689: IFTRUE 32693
32691: GO 32755
32693: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32694: LD_ADDR_VAR 0 3
32698: PUSH
32699: LD_INT 11
32701: PUSH
32702: LD_INT 12
32704: PUSH
32705: LD_INT 13
32707: PUSH
32708: LD_INT 14
32710: PUSH
32711: LD_INT 1
32713: PUSH
32714: LD_INT 2
32716: PUSH
32717: LD_INT 3
32719: PUSH
32720: LD_INT 4
32722: PUSH
32723: LD_INT 5
32725: PUSH
32726: LD_INT 21
32728: PUSH
32729: LD_INT 23
32731: PUSH
32732: LD_INT 22
32734: PUSH
32735: LD_INT 24
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: ST_TO_ADDR
32753: GO 32814
32755: LD_INT 3
32757: DOUBLE
32758: EQUAL
32759: IFTRUE 32763
32761: GO 32813
32763: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32764: LD_ADDR_VAR 0 3
32768: PUSH
32769: LD_INT 13
32771: PUSH
32772: LD_INT 14
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: LD_INT 3
32780: PUSH
32781: LD_INT 4
32783: PUSH
32784: LD_INT 5
32786: PUSH
32787: LD_INT 21
32789: PUSH
32790: LD_INT 22
32792: PUSH
32793: LD_INT 23
32795: PUSH
32796: LD_INT 24
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: ST_TO_ADDR
32811: GO 32814
32813: POP
// result := ( chassis in result ) ;
32814: LD_ADDR_VAR 0 3
32818: PUSH
32819: LD_VAR 0 1
32823: PUSH
32824: LD_VAR 0 3
32828: IN
32829: ST_TO_ADDR
// end ;
32830: LD_VAR 0 3
32834: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32835: LD_INT 0
32837: PPUSH
// if not chassis or not weapon then
32838: LD_VAR 0 1
32842: NOT
32843: PUSH
32844: LD_VAR 0 2
32848: NOT
32849: OR
32850: IFFALSE 32854
// exit ;
32852: GO 33916
// case weapon of us_machine_gun :
32854: LD_VAR 0 2
32858: PUSH
32859: LD_INT 2
32861: DOUBLE
32862: EQUAL
32863: IFTRUE 32867
32865: GO 32897
32867: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32868: LD_ADDR_VAR 0 3
32872: PUSH
32873: LD_INT 1
32875: PUSH
32876: LD_INT 2
32878: PUSH
32879: LD_INT 3
32881: PUSH
32882: LD_INT 4
32884: PUSH
32885: LD_INT 5
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: ST_TO_ADDR
32895: GO 33900
32897: LD_INT 3
32899: DOUBLE
32900: EQUAL
32901: IFTRUE 32905
32903: GO 32935
32905: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32906: LD_ADDR_VAR 0 3
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: LD_INT 2
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: LD_INT 4
32922: PUSH
32923: LD_INT 5
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: ST_TO_ADDR
32933: GO 33900
32935: LD_INT 11
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32943
32941: GO 32973
32943: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32944: LD_ADDR_VAR 0 3
32948: PUSH
32949: LD_INT 1
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: LD_INT 3
32957: PUSH
32958: LD_INT 4
32960: PUSH
32961: LD_INT 5
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: ST_TO_ADDR
32971: GO 33900
32973: LD_INT 4
32975: DOUBLE
32976: EQUAL
32977: IFTRUE 32981
32979: GO 33007
32981: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32982: LD_ADDR_VAR 0 3
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: LD_INT 3
32992: PUSH
32993: LD_INT 4
32995: PUSH
32996: LD_INT 5
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: ST_TO_ADDR
33005: GO 33900
33007: LD_INT 5
33009: DOUBLE
33010: EQUAL
33011: IFTRUE 33015
33013: GO 33041
33015: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33016: LD_ADDR_VAR 0 3
33020: PUSH
33021: LD_INT 2
33023: PUSH
33024: LD_INT 3
33026: PUSH
33027: LD_INT 4
33029: PUSH
33030: LD_INT 5
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: ST_TO_ADDR
33039: GO 33900
33041: LD_INT 9
33043: DOUBLE
33044: EQUAL
33045: IFTRUE 33049
33047: GO 33075
33049: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33050: LD_ADDR_VAR 0 3
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: LD_INT 3
33060: PUSH
33061: LD_INT 4
33063: PUSH
33064: LD_INT 5
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: ST_TO_ADDR
33073: GO 33900
33075: LD_INT 7
33077: DOUBLE
33078: EQUAL
33079: IFTRUE 33083
33081: GO 33109
33083: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33084: LD_ADDR_VAR 0 3
33088: PUSH
33089: LD_INT 2
33091: PUSH
33092: LD_INT 3
33094: PUSH
33095: LD_INT 4
33097: PUSH
33098: LD_INT 5
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: ST_TO_ADDR
33107: GO 33900
33109: LD_INT 12
33111: DOUBLE
33112: EQUAL
33113: IFTRUE 33117
33115: GO 33143
33117: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33118: LD_ADDR_VAR 0 3
33122: PUSH
33123: LD_INT 2
33125: PUSH
33126: LD_INT 3
33128: PUSH
33129: LD_INT 4
33131: PUSH
33132: LD_INT 5
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: ST_TO_ADDR
33141: GO 33900
33143: LD_INT 13
33145: DOUBLE
33146: EQUAL
33147: IFTRUE 33151
33149: GO 33177
33151: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33152: LD_ADDR_VAR 0 3
33156: PUSH
33157: LD_INT 2
33159: PUSH
33160: LD_INT 3
33162: PUSH
33163: LD_INT 4
33165: PUSH
33166: LD_INT 5
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: ST_TO_ADDR
33175: GO 33900
33177: LD_INT 14
33179: DOUBLE
33180: EQUAL
33181: IFTRUE 33185
33183: GO 33203
33185: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33186: LD_ADDR_VAR 0 3
33190: PUSH
33191: LD_INT 4
33193: PUSH
33194: LD_INT 5
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: ST_TO_ADDR
33201: GO 33900
33203: LD_INT 6
33205: DOUBLE
33206: EQUAL
33207: IFTRUE 33211
33209: GO 33229
33211: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33212: LD_ADDR_VAR 0 3
33216: PUSH
33217: LD_INT 4
33219: PUSH
33220: LD_INT 5
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: ST_TO_ADDR
33227: GO 33900
33229: LD_INT 10
33231: DOUBLE
33232: EQUAL
33233: IFTRUE 33237
33235: GO 33255
33237: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33238: LD_ADDR_VAR 0 3
33242: PUSH
33243: LD_INT 4
33245: PUSH
33246: LD_INT 5
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: ST_TO_ADDR
33253: GO 33900
33255: LD_INT 22
33257: DOUBLE
33258: EQUAL
33259: IFTRUE 33263
33261: GO 33289
33263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33264: LD_ADDR_VAR 0 3
33268: PUSH
33269: LD_INT 11
33271: PUSH
33272: LD_INT 12
33274: PUSH
33275: LD_INT 13
33277: PUSH
33278: LD_INT 14
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: ST_TO_ADDR
33287: GO 33900
33289: LD_INT 23
33291: DOUBLE
33292: EQUAL
33293: IFTRUE 33297
33295: GO 33323
33297: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33298: LD_ADDR_VAR 0 3
33302: PUSH
33303: LD_INT 11
33305: PUSH
33306: LD_INT 12
33308: PUSH
33309: LD_INT 13
33311: PUSH
33312: LD_INT 14
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: ST_TO_ADDR
33321: GO 33900
33323: LD_INT 24
33325: DOUBLE
33326: EQUAL
33327: IFTRUE 33331
33329: GO 33357
33331: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33332: LD_ADDR_VAR 0 3
33336: PUSH
33337: LD_INT 11
33339: PUSH
33340: LD_INT 12
33342: PUSH
33343: LD_INT 13
33345: PUSH
33346: LD_INT 14
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: ST_TO_ADDR
33355: GO 33900
33357: LD_INT 30
33359: DOUBLE
33360: EQUAL
33361: IFTRUE 33365
33363: GO 33391
33365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33366: LD_ADDR_VAR 0 3
33370: PUSH
33371: LD_INT 11
33373: PUSH
33374: LD_INT 12
33376: PUSH
33377: LD_INT 13
33379: PUSH
33380: LD_INT 14
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: ST_TO_ADDR
33389: GO 33900
33391: LD_INT 25
33393: DOUBLE
33394: EQUAL
33395: IFTRUE 33399
33397: GO 33417
33399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33400: LD_ADDR_VAR 0 3
33404: PUSH
33405: LD_INT 13
33407: PUSH
33408: LD_INT 14
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: ST_TO_ADDR
33415: GO 33900
33417: LD_INT 27
33419: DOUBLE
33420: EQUAL
33421: IFTRUE 33425
33423: GO 33443
33425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33426: LD_ADDR_VAR 0 3
33430: PUSH
33431: LD_INT 13
33433: PUSH
33434: LD_INT 14
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: ST_TO_ADDR
33441: GO 33900
33443: LD_EXP 50
33447: DOUBLE
33448: EQUAL
33449: IFTRUE 33453
33451: GO 33479
33453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33454: LD_ADDR_VAR 0 3
33458: PUSH
33459: LD_INT 11
33461: PUSH
33462: LD_INT 12
33464: PUSH
33465: LD_INT 13
33467: PUSH
33468: LD_INT 14
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: ST_TO_ADDR
33477: GO 33900
33479: LD_INT 28
33481: DOUBLE
33482: EQUAL
33483: IFTRUE 33487
33485: GO 33505
33487: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33488: LD_ADDR_VAR 0 3
33492: PUSH
33493: LD_INT 13
33495: PUSH
33496: LD_INT 14
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: ST_TO_ADDR
33503: GO 33900
33505: LD_INT 29
33507: DOUBLE
33508: EQUAL
33509: IFTRUE 33513
33511: GO 33531
33513: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33514: LD_ADDR_VAR 0 3
33518: PUSH
33519: LD_INT 13
33521: PUSH
33522: LD_INT 14
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: ST_TO_ADDR
33529: GO 33900
33531: LD_INT 31
33533: DOUBLE
33534: EQUAL
33535: IFTRUE 33539
33537: GO 33557
33539: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33540: LD_ADDR_VAR 0 3
33544: PUSH
33545: LD_INT 13
33547: PUSH
33548: LD_INT 14
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: ST_TO_ADDR
33555: GO 33900
33557: LD_INT 26
33559: DOUBLE
33560: EQUAL
33561: IFTRUE 33565
33563: GO 33583
33565: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33566: LD_ADDR_VAR 0 3
33570: PUSH
33571: LD_INT 13
33573: PUSH
33574: LD_INT 14
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: ST_TO_ADDR
33581: GO 33900
33583: LD_INT 42
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33591
33589: GO 33617
33591: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33592: LD_ADDR_VAR 0 3
33596: PUSH
33597: LD_INT 21
33599: PUSH
33600: LD_INT 22
33602: PUSH
33603: LD_INT 23
33605: PUSH
33606: LD_INT 24
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: ST_TO_ADDR
33615: GO 33900
33617: LD_INT 43
33619: DOUBLE
33620: EQUAL
33621: IFTRUE 33625
33623: GO 33651
33625: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33626: LD_ADDR_VAR 0 3
33630: PUSH
33631: LD_INT 21
33633: PUSH
33634: LD_INT 22
33636: PUSH
33637: LD_INT 23
33639: PUSH
33640: LD_INT 24
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: ST_TO_ADDR
33649: GO 33900
33651: LD_INT 44
33653: DOUBLE
33654: EQUAL
33655: IFTRUE 33659
33657: GO 33685
33659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33660: LD_ADDR_VAR 0 3
33664: PUSH
33665: LD_INT 21
33667: PUSH
33668: LD_INT 22
33670: PUSH
33671: LD_INT 23
33673: PUSH
33674: LD_INT 24
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: ST_TO_ADDR
33683: GO 33900
33685: LD_INT 45
33687: DOUBLE
33688: EQUAL
33689: IFTRUE 33693
33691: GO 33719
33693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33694: LD_ADDR_VAR 0 3
33698: PUSH
33699: LD_INT 21
33701: PUSH
33702: LD_INT 22
33704: PUSH
33705: LD_INT 23
33707: PUSH
33708: LD_INT 24
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: ST_TO_ADDR
33717: GO 33900
33719: LD_INT 49
33721: DOUBLE
33722: EQUAL
33723: IFTRUE 33727
33725: GO 33753
33727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33728: LD_ADDR_VAR 0 3
33732: PUSH
33733: LD_INT 21
33735: PUSH
33736: LD_INT 22
33738: PUSH
33739: LD_INT 23
33741: PUSH
33742: LD_INT 24
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: ST_TO_ADDR
33751: GO 33900
33753: LD_INT 51
33755: DOUBLE
33756: EQUAL
33757: IFTRUE 33761
33759: GO 33787
33761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33762: LD_ADDR_VAR 0 3
33766: PUSH
33767: LD_INT 21
33769: PUSH
33770: LD_INT 22
33772: PUSH
33773: LD_INT 23
33775: PUSH
33776: LD_INT 24
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: ST_TO_ADDR
33785: GO 33900
33787: LD_INT 52
33789: DOUBLE
33790: EQUAL
33791: IFTRUE 33795
33793: GO 33821
33795: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33796: LD_ADDR_VAR 0 3
33800: PUSH
33801: LD_INT 21
33803: PUSH
33804: LD_INT 22
33806: PUSH
33807: LD_INT 23
33809: PUSH
33810: LD_INT 24
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: ST_TO_ADDR
33819: GO 33900
33821: LD_INT 53
33823: DOUBLE
33824: EQUAL
33825: IFTRUE 33829
33827: GO 33847
33829: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33830: LD_ADDR_VAR 0 3
33834: PUSH
33835: LD_INT 23
33837: PUSH
33838: LD_INT 24
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: ST_TO_ADDR
33845: GO 33900
33847: LD_INT 46
33849: DOUBLE
33850: EQUAL
33851: IFTRUE 33855
33853: GO 33873
33855: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33856: LD_ADDR_VAR 0 3
33860: PUSH
33861: LD_INT 23
33863: PUSH
33864: LD_INT 24
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: ST_TO_ADDR
33871: GO 33900
33873: LD_INT 47
33875: DOUBLE
33876: EQUAL
33877: IFTRUE 33881
33879: GO 33899
33881: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33882: LD_ADDR_VAR 0 3
33886: PUSH
33887: LD_INT 23
33889: PUSH
33890: LD_INT 24
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: ST_TO_ADDR
33897: GO 33900
33899: POP
// result := ( chassis in result ) ;
33900: LD_ADDR_VAR 0 3
33904: PUSH
33905: LD_VAR 0 1
33909: PUSH
33910: LD_VAR 0 3
33914: IN
33915: ST_TO_ADDR
// end ;
33916: LD_VAR 0 3
33920: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33921: LD_INT 0
33923: PPUSH
33924: PPUSH
33925: PPUSH
33926: PPUSH
33927: PPUSH
33928: PPUSH
33929: PPUSH
// result := array ;
33930: LD_ADDR_VAR 0 5
33934: PUSH
33935: LD_VAR 0 1
33939: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33940: LD_VAR 0 1
33944: NOT
33945: PUSH
33946: LD_VAR 0 2
33950: NOT
33951: OR
33952: PUSH
33953: LD_VAR 0 3
33957: NOT
33958: OR
33959: PUSH
33960: LD_VAR 0 2
33964: PUSH
33965: LD_VAR 0 1
33969: GREATER
33970: OR
33971: PUSH
33972: LD_VAR 0 3
33976: PUSH
33977: LD_VAR 0 1
33981: GREATER
33982: OR
33983: IFFALSE 33987
// exit ;
33985: GO 34283
// if direction then
33987: LD_VAR 0 4
33991: IFFALSE 34055
// begin d := 1 ;
33993: LD_ADDR_VAR 0 9
33997: PUSH
33998: LD_INT 1
34000: ST_TO_ADDR
// if i_from > i_to then
34001: LD_VAR 0 2
34005: PUSH
34006: LD_VAR 0 3
34010: GREATER
34011: IFFALSE 34037
// length := ( array - i_from ) + i_to else
34013: LD_ADDR_VAR 0 11
34017: PUSH
34018: LD_VAR 0 1
34022: PUSH
34023: LD_VAR 0 2
34027: MINUS
34028: PUSH
34029: LD_VAR 0 3
34033: PLUS
34034: ST_TO_ADDR
34035: GO 34053
// length := i_to - i_from ;
34037: LD_ADDR_VAR 0 11
34041: PUSH
34042: LD_VAR 0 3
34046: PUSH
34047: LD_VAR 0 2
34051: MINUS
34052: ST_TO_ADDR
// end else
34053: GO 34116
// begin d := - 1 ;
34055: LD_ADDR_VAR 0 9
34059: PUSH
34060: LD_INT 1
34062: NEG
34063: ST_TO_ADDR
// if i_from > i_to then
34064: LD_VAR 0 2
34068: PUSH
34069: LD_VAR 0 3
34073: GREATER
34074: IFFALSE 34094
// length := i_from - i_to else
34076: LD_ADDR_VAR 0 11
34080: PUSH
34081: LD_VAR 0 2
34085: PUSH
34086: LD_VAR 0 3
34090: MINUS
34091: ST_TO_ADDR
34092: GO 34116
// length := ( array - i_to ) + i_from ;
34094: LD_ADDR_VAR 0 11
34098: PUSH
34099: LD_VAR 0 1
34103: PUSH
34104: LD_VAR 0 3
34108: MINUS
34109: PUSH
34110: LD_VAR 0 2
34114: PLUS
34115: ST_TO_ADDR
// end ; if not length then
34116: LD_VAR 0 11
34120: NOT
34121: IFFALSE 34125
// exit ;
34123: GO 34283
// tmp := array ;
34125: LD_ADDR_VAR 0 10
34129: PUSH
34130: LD_VAR 0 1
34134: ST_TO_ADDR
// for i = 1 to length do
34135: LD_ADDR_VAR 0 6
34139: PUSH
34140: DOUBLE
34141: LD_INT 1
34143: DEC
34144: ST_TO_ADDR
34145: LD_VAR 0 11
34149: PUSH
34150: FOR_TO
34151: IFFALSE 34271
// begin for j = 1 to array do
34153: LD_ADDR_VAR 0 7
34157: PUSH
34158: DOUBLE
34159: LD_INT 1
34161: DEC
34162: ST_TO_ADDR
34163: LD_VAR 0 1
34167: PUSH
34168: FOR_TO
34169: IFFALSE 34257
// begin k := j + d ;
34171: LD_ADDR_VAR 0 8
34175: PUSH
34176: LD_VAR 0 7
34180: PUSH
34181: LD_VAR 0 9
34185: PLUS
34186: ST_TO_ADDR
// if k > array then
34187: LD_VAR 0 8
34191: PUSH
34192: LD_VAR 0 1
34196: GREATER
34197: IFFALSE 34207
// k := 1 ;
34199: LD_ADDR_VAR 0 8
34203: PUSH
34204: LD_INT 1
34206: ST_TO_ADDR
// if not k then
34207: LD_VAR 0 8
34211: NOT
34212: IFFALSE 34224
// k := array ;
34214: LD_ADDR_VAR 0 8
34218: PUSH
34219: LD_VAR 0 1
34223: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34224: LD_ADDR_VAR 0 10
34228: PUSH
34229: LD_VAR 0 10
34233: PPUSH
34234: LD_VAR 0 8
34238: PPUSH
34239: LD_VAR 0 1
34243: PUSH
34244: LD_VAR 0 7
34248: ARRAY
34249: PPUSH
34250: CALL_OW 1
34254: ST_TO_ADDR
// end ;
34255: GO 34168
34257: POP
34258: POP
// array := tmp ;
34259: LD_ADDR_VAR 0 1
34263: PUSH
34264: LD_VAR 0 10
34268: ST_TO_ADDR
// end ;
34269: GO 34150
34271: POP
34272: POP
// result := array ;
34273: LD_ADDR_VAR 0 5
34277: PUSH
34278: LD_VAR 0 1
34282: ST_TO_ADDR
// end ;
34283: LD_VAR 0 5
34287: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34288: LD_INT 0
34290: PPUSH
34291: PPUSH
// result := 0 ;
34292: LD_ADDR_VAR 0 3
34296: PUSH
34297: LD_INT 0
34299: ST_TO_ADDR
// if not array or not value in array then
34300: LD_VAR 0 1
34304: NOT
34305: PUSH
34306: LD_VAR 0 2
34310: PUSH
34311: LD_VAR 0 1
34315: IN
34316: NOT
34317: OR
34318: IFFALSE 34322
// exit ;
34320: GO 34376
// for i = 1 to array do
34322: LD_ADDR_VAR 0 4
34326: PUSH
34327: DOUBLE
34328: LD_INT 1
34330: DEC
34331: ST_TO_ADDR
34332: LD_VAR 0 1
34336: PUSH
34337: FOR_TO
34338: IFFALSE 34374
// if value = array [ i ] then
34340: LD_VAR 0 2
34344: PUSH
34345: LD_VAR 0 1
34349: PUSH
34350: LD_VAR 0 4
34354: ARRAY
34355: EQUAL
34356: IFFALSE 34372
// begin result := i ;
34358: LD_ADDR_VAR 0 3
34362: PUSH
34363: LD_VAR 0 4
34367: ST_TO_ADDR
// exit ;
34368: POP
34369: POP
34370: GO 34376
// end ;
34372: GO 34337
34374: POP
34375: POP
// end ;
34376: LD_VAR 0 3
34380: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34381: LD_INT 0
34383: PPUSH
// vc_chassis := chassis ;
34384: LD_ADDR_OWVAR 37
34388: PUSH
34389: LD_VAR 0 1
34393: ST_TO_ADDR
// vc_engine := engine ;
34394: LD_ADDR_OWVAR 39
34398: PUSH
34399: LD_VAR 0 2
34403: ST_TO_ADDR
// vc_control := control ;
34404: LD_ADDR_OWVAR 38
34408: PUSH
34409: LD_VAR 0 3
34413: ST_TO_ADDR
// vc_weapon := weapon ;
34414: LD_ADDR_OWVAR 40
34418: PUSH
34419: LD_VAR 0 4
34423: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34424: LD_ADDR_OWVAR 41
34428: PUSH
34429: LD_VAR 0 5
34433: ST_TO_ADDR
// end ;
34434: LD_VAR 0 6
34438: RET
// export function WantPlant ( unit ) ; var task ; begin
34439: LD_INT 0
34441: PPUSH
34442: PPUSH
// result := false ;
34443: LD_ADDR_VAR 0 2
34447: PUSH
34448: LD_INT 0
34450: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34451: LD_ADDR_VAR 0 3
34455: PUSH
34456: LD_VAR 0 1
34460: PPUSH
34461: CALL_OW 437
34465: ST_TO_ADDR
// if task then
34466: LD_VAR 0 3
34470: IFFALSE 34498
// if task [ 1 ] [ 1 ] = p then
34472: LD_VAR 0 3
34476: PUSH
34477: LD_INT 1
34479: ARRAY
34480: PUSH
34481: LD_INT 1
34483: ARRAY
34484: PUSH
34485: LD_STRING p
34487: EQUAL
34488: IFFALSE 34498
// result := true ;
34490: LD_ADDR_VAR 0 2
34494: PUSH
34495: LD_INT 1
34497: ST_TO_ADDR
// end ;
34498: LD_VAR 0 2
34502: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34503: LD_INT 0
34505: PPUSH
34506: PPUSH
34507: PPUSH
34508: PPUSH
// if pos < 1 then
34509: LD_VAR 0 2
34513: PUSH
34514: LD_INT 1
34516: LESS
34517: IFFALSE 34521
// exit ;
34519: GO 34824
// if pos = 1 then
34521: LD_VAR 0 2
34525: PUSH
34526: LD_INT 1
34528: EQUAL
34529: IFFALSE 34562
// result := Replace ( arr , pos [ 1 ] , value ) else
34531: LD_ADDR_VAR 0 4
34535: PUSH
34536: LD_VAR 0 1
34540: PPUSH
34541: LD_VAR 0 2
34545: PUSH
34546: LD_INT 1
34548: ARRAY
34549: PPUSH
34550: LD_VAR 0 3
34554: PPUSH
34555: CALL_OW 1
34559: ST_TO_ADDR
34560: GO 34824
// begin tmp := arr ;
34562: LD_ADDR_VAR 0 6
34566: PUSH
34567: LD_VAR 0 1
34571: ST_TO_ADDR
// s_arr := [ tmp ] ;
34572: LD_ADDR_VAR 0 7
34576: PUSH
34577: LD_VAR 0 6
34581: PUSH
34582: EMPTY
34583: LIST
34584: ST_TO_ADDR
// for i = 1 to pos - 1 do
34585: LD_ADDR_VAR 0 5
34589: PUSH
34590: DOUBLE
34591: LD_INT 1
34593: DEC
34594: ST_TO_ADDR
34595: LD_VAR 0 2
34599: PUSH
34600: LD_INT 1
34602: MINUS
34603: PUSH
34604: FOR_TO
34605: IFFALSE 34650
// begin tmp := tmp [ pos [ i ] ] ;
34607: LD_ADDR_VAR 0 6
34611: PUSH
34612: LD_VAR 0 6
34616: PUSH
34617: LD_VAR 0 2
34621: PUSH
34622: LD_VAR 0 5
34626: ARRAY
34627: ARRAY
34628: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34629: LD_ADDR_VAR 0 7
34633: PUSH
34634: LD_VAR 0 7
34638: PUSH
34639: LD_VAR 0 6
34643: PUSH
34644: EMPTY
34645: LIST
34646: ADD
34647: ST_TO_ADDR
// end ;
34648: GO 34604
34650: POP
34651: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34652: LD_ADDR_VAR 0 6
34656: PUSH
34657: LD_VAR 0 6
34661: PPUSH
34662: LD_VAR 0 2
34666: PUSH
34667: LD_VAR 0 2
34671: ARRAY
34672: PPUSH
34673: LD_VAR 0 3
34677: PPUSH
34678: CALL_OW 1
34682: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34683: LD_ADDR_VAR 0 7
34687: PUSH
34688: LD_VAR 0 7
34692: PPUSH
34693: LD_VAR 0 7
34697: PPUSH
34698: LD_VAR 0 6
34702: PPUSH
34703: CALL_OW 1
34707: ST_TO_ADDR
// for i = s_arr downto 2 do
34708: LD_ADDR_VAR 0 5
34712: PUSH
34713: DOUBLE
34714: LD_VAR 0 7
34718: INC
34719: ST_TO_ADDR
34720: LD_INT 2
34722: PUSH
34723: FOR_DOWNTO
34724: IFFALSE 34808
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34726: LD_ADDR_VAR 0 6
34730: PUSH
34731: LD_VAR 0 7
34735: PUSH
34736: LD_VAR 0 5
34740: PUSH
34741: LD_INT 1
34743: MINUS
34744: ARRAY
34745: PPUSH
34746: LD_VAR 0 2
34750: PUSH
34751: LD_VAR 0 5
34755: PUSH
34756: LD_INT 1
34758: MINUS
34759: ARRAY
34760: PPUSH
34761: LD_VAR 0 7
34765: PUSH
34766: LD_VAR 0 5
34770: ARRAY
34771: PPUSH
34772: CALL_OW 1
34776: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34777: LD_ADDR_VAR 0 7
34781: PUSH
34782: LD_VAR 0 7
34786: PPUSH
34787: LD_VAR 0 5
34791: PUSH
34792: LD_INT 1
34794: MINUS
34795: PPUSH
34796: LD_VAR 0 6
34800: PPUSH
34801: CALL_OW 1
34805: ST_TO_ADDR
// end ;
34806: GO 34723
34808: POP
34809: POP
// result := s_arr [ 1 ] ;
34810: LD_ADDR_VAR 0 4
34814: PUSH
34815: LD_VAR 0 7
34819: PUSH
34820: LD_INT 1
34822: ARRAY
34823: ST_TO_ADDR
// end ; end ;
34824: LD_VAR 0 4
34828: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34829: LD_INT 0
34831: PPUSH
34832: PPUSH
// if not list then
34833: LD_VAR 0 1
34837: NOT
34838: IFFALSE 34842
// exit ;
34840: GO 34933
// i := list [ pos1 ] ;
34842: LD_ADDR_VAR 0 5
34846: PUSH
34847: LD_VAR 0 1
34851: PUSH
34852: LD_VAR 0 2
34856: ARRAY
34857: ST_TO_ADDR
// if not i then
34858: LD_VAR 0 5
34862: NOT
34863: IFFALSE 34867
// exit ;
34865: GO 34933
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34867: LD_ADDR_VAR 0 1
34871: PUSH
34872: LD_VAR 0 1
34876: PPUSH
34877: LD_VAR 0 2
34881: PPUSH
34882: LD_VAR 0 1
34886: PUSH
34887: LD_VAR 0 3
34891: ARRAY
34892: PPUSH
34893: CALL_OW 1
34897: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34898: LD_ADDR_VAR 0 1
34902: PUSH
34903: LD_VAR 0 1
34907: PPUSH
34908: LD_VAR 0 3
34912: PPUSH
34913: LD_VAR 0 5
34917: PPUSH
34918: CALL_OW 1
34922: ST_TO_ADDR
// result := list ;
34923: LD_ADDR_VAR 0 4
34927: PUSH
34928: LD_VAR 0 1
34932: ST_TO_ADDR
// end ;
34933: LD_VAR 0 4
34937: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34938: LD_INT 0
34940: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34941: LD_ADDR_VAR 0 5
34945: PUSH
34946: LD_VAR 0 1
34950: PPUSH
34951: CALL_OW 250
34955: PPUSH
34956: LD_VAR 0 1
34960: PPUSH
34961: CALL_OW 251
34965: PPUSH
34966: LD_VAR 0 2
34970: PPUSH
34971: LD_VAR 0 3
34975: PPUSH
34976: LD_VAR 0 4
34980: PPUSH
34981: CALL 34991 0 5
34985: ST_TO_ADDR
// end ;
34986: LD_VAR 0 5
34990: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34991: LD_INT 0
34993: PPUSH
34994: PPUSH
34995: PPUSH
34996: PPUSH
// if not list then
34997: LD_VAR 0 3
35001: NOT
35002: IFFALSE 35006
// exit ;
35004: GO 35394
// result := [ ] ;
35006: LD_ADDR_VAR 0 6
35010: PUSH
35011: EMPTY
35012: ST_TO_ADDR
// for i in list do
35013: LD_ADDR_VAR 0 7
35017: PUSH
35018: LD_VAR 0 3
35022: PUSH
35023: FOR_IN
35024: IFFALSE 35226
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35026: LD_ADDR_VAR 0 9
35030: PUSH
35031: LD_VAR 0 7
35035: PPUSH
35036: LD_VAR 0 1
35040: PPUSH
35041: LD_VAR 0 2
35045: PPUSH
35046: CALL_OW 297
35050: ST_TO_ADDR
// if not result then
35051: LD_VAR 0 6
35055: NOT
35056: IFFALSE 35082
// result := [ [ i , tmp ] ] else
35058: LD_ADDR_VAR 0 6
35062: PUSH
35063: LD_VAR 0 7
35067: PUSH
35068: LD_VAR 0 9
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: EMPTY
35078: LIST
35079: ST_TO_ADDR
35080: GO 35224
// begin if result [ result ] [ 2 ] < tmp then
35082: LD_VAR 0 6
35086: PUSH
35087: LD_VAR 0 6
35091: ARRAY
35092: PUSH
35093: LD_INT 2
35095: ARRAY
35096: PUSH
35097: LD_VAR 0 9
35101: LESS
35102: IFFALSE 35144
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35104: LD_ADDR_VAR 0 6
35108: PUSH
35109: LD_VAR 0 6
35113: PPUSH
35114: LD_VAR 0 6
35118: PUSH
35119: LD_INT 1
35121: PLUS
35122: PPUSH
35123: LD_VAR 0 7
35127: PUSH
35128: LD_VAR 0 9
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PPUSH
35137: CALL_OW 2
35141: ST_TO_ADDR
35142: GO 35224
// for j = 1 to result do
35144: LD_ADDR_VAR 0 8
35148: PUSH
35149: DOUBLE
35150: LD_INT 1
35152: DEC
35153: ST_TO_ADDR
35154: LD_VAR 0 6
35158: PUSH
35159: FOR_TO
35160: IFFALSE 35222
// begin if tmp < result [ j ] [ 2 ] then
35162: LD_VAR 0 9
35166: PUSH
35167: LD_VAR 0 6
35171: PUSH
35172: LD_VAR 0 8
35176: ARRAY
35177: PUSH
35178: LD_INT 2
35180: ARRAY
35181: LESS
35182: IFFALSE 35220
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35184: LD_ADDR_VAR 0 6
35188: PUSH
35189: LD_VAR 0 6
35193: PPUSH
35194: LD_VAR 0 8
35198: PPUSH
35199: LD_VAR 0 7
35203: PUSH
35204: LD_VAR 0 9
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PPUSH
35213: CALL_OW 2
35217: ST_TO_ADDR
// break ;
35218: GO 35222
// end ; end ;
35220: GO 35159
35222: POP
35223: POP
// end ; end ;
35224: GO 35023
35226: POP
35227: POP
// if result and not asc then
35228: LD_VAR 0 6
35232: PUSH
35233: LD_VAR 0 4
35237: NOT
35238: AND
35239: IFFALSE 35314
// begin tmp := result ;
35241: LD_ADDR_VAR 0 9
35245: PUSH
35246: LD_VAR 0 6
35250: ST_TO_ADDR
// for i = tmp downto 1 do
35251: LD_ADDR_VAR 0 7
35255: PUSH
35256: DOUBLE
35257: LD_VAR 0 9
35261: INC
35262: ST_TO_ADDR
35263: LD_INT 1
35265: PUSH
35266: FOR_DOWNTO
35267: IFFALSE 35312
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35269: LD_ADDR_VAR 0 6
35273: PUSH
35274: LD_VAR 0 6
35278: PPUSH
35279: LD_VAR 0 9
35283: PUSH
35284: LD_VAR 0 7
35288: MINUS
35289: PUSH
35290: LD_INT 1
35292: PLUS
35293: PPUSH
35294: LD_VAR 0 9
35298: PUSH
35299: LD_VAR 0 7
35303: ARRAY
35304: PPUSH
35305: CALL_OW 1
35309: ST_TO_ADDR
35310: GO 35266
35312: POP
35313: POP
// end ; tmp := [ ] ;
35314: LD_ADDR_VAR 0 9
35318: PUSH
35319: EMPTY
35320: ST_TO_ADDR
// if mode then
35321: LD_VAR 0 5
35325: IFFALSE 35394
// begin for i = 1 to result do
35327: LD_ADDR_VAR 0 7
35331: PUSH
35332: DOUBLE
35333: LD_INT 1
35335: DEC
35336: ST_TO_ADDR
35337: LD_VAR 0 6
35341: PUSH
35342: FOR_TO
35343: IFFALSE 35382
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35345: LD_ADDR_VAR 0 9
35349: PUSH
35350: LD_VAR 0 9
35354: PPUSH
35355: LD_VAR 0 7
35359: PPUSH
35360: LD_VAR 0 6
35364: PUSH
35365: LD_VAR 0 7
35369: ARRAY
35370: PUSH
35371: LD_INT 1
35373: ARRAY
35374: PPUSH
35375: CALL_OW 1
35379: ST_TO_ADDR
35380: GO 35342
35382: POP
35383: POP
// result := tmp ;
35384: LD_ADDR_VAR 0 6
35388: PUSH
35389: LD_VAR 0 9
35393: ST_TO_ADDR
// end ; end ;
35394: LD_VAR 0 6
35398: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35399: LD_INT 0
35401: PPUSH
35402: PPUSH
35403: PPUSH
35404: PPUSH
35405: PPUSH
35406: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35407: LD_ADDR_VAR 0 5
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: EMPTY
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: ST_TO_ADDR
// if not x or not y then
35429: LD_VAR 0 2
35433: NOT
35434: PUSH
35435: LD_VAR 0 3
35439: NOT
35440: OR
35441: IFFALSE 35445
// exit ;
35443: GO 37097
// if not range then
35445: LD_VAR 0 4
35449: NOT
35450: IFFALSE 35460
// range := 10 ;
35452: LD_ADDR_VAR 0 4
35456: PUSH
35457: LD_INT 10
35459: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35460: LD_ADDR_VAR 0 8
35464: PUSH
35465: LD_INT 81
35467: PUSH
35468: LD_VAR 0 1
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 92
35479: PUSH
35480: LD_VAR 0 2
35484: PUSH
35485: LD_VAR 0 3
35489: PUSH
35490: LD_VAR 0 4
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 3
35503: PUSH
35504: LD_INT 21
35506: PUSH
35507: LD_INT 3
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: LIST
35522: PPUSH
35523: CALL_OW 69
35527: ST_TO_ADDR
// if not tmp then
35528: LD_VAR 0 8
35532: NOT
35533: IFFALSE 35537
// exit ;
35535: GO 37097
// for i in tmp do
35537: LD_ADDR_VAR 0 6
35541: PUSH
35542: LD_VAR 0 8
35546: PUSH
35547: FOR_IN
35548: IFFALSE 37072
// begin points := [ 0 , 0 , 0 ] ;
35550: LD_ADDR_VAR 0 9
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: LD_INT 0
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: LIST
35568: ST_TO_ADDR
// bpoints := 1 ;
35569: LD_ADDR_VAR 0 10
35573: PUSH
35574: LD_INT 1
35576: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35577: LD_VAR 0 6
35581: PPUSH
35582: CALL_OW 247
35586: PUSH
35587: LD_INT 1
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35595
35593: GO 36173
35595: POP
// begin if GetClass ( i ) = 1 then
35596: LD_VAR 0 6
35600: PPUSH
35601: CALL_OW 257
35605: PUSH
35606: LD_INT 1
35608: EQUAL
35609: IFFALSE 35630
// points := [ 10 , 5 , 3 ] ;
35611: LD_ADDR_VAR 0 9
35615: PUSH
35616: LD_INT 10
35618: PUSH
35619: LD_INT 5
35621: PUSH
35622: LD_INT 3
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: LIST
35629: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35630: LD_VAR 0 6
35634: PPUSH
35635: CALL_OW 257
35639: PUSH
35640: LD_INT 2
35642: PUSH
35643: LD_INT 3
35645: PUSH
35646: LD_INT 4
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: LIST
35653: IN
35654: IFFALSE 35675
// points := [ 3 , 2 , 1 ] ;
35656: LD_ADDR_VAR 0 9
35660: PUSH
35661: LD_INT 3
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: LD_INT 1
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: LIST
35674: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35675: LD_VAR 0 6
35679: PPUSH
35680: CALL_OW 257
35684: PUSH
35685: LD_INT 5
35687: EQUAL
35688: IFFALSE 35709
// points := [ 130 , 5 , 2 ] ;
35690: LD_ADDR_VAR 0 9
35694: PUSH
35695: LD_INT 130
35697: PUSH
35698: LD_INT 5
35700: PUSH
35701: LD_INT 2
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: LIST
35708: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35709: LD_VAR 0 6
35713: PPUSH
35714: CALL_OW 257
35718: PUSH
35719: LD_INT 8
35721: EQUAL
35722: IFFALSE 35743
// points := [ 35 , 35 , 30 ] ;
35724: LD_ADDR_VAR 0 9
35728: PUSH
35729: LD_INT 35
35731: PUSH
35732: LD_INT 35
35734: PUSH
35735: LD_INT 30
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: LIST
35742: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35743: LD_VAR 0 6
35747: PPUSH
35748: CALL_OW 257
35752: PUSH
35753: LD_INT 9
35755: EQUAL
35756: IFFALSE 35777
// points := [ 20 , 55 , 40 ] ;
35758: LD_ADDR_VAR 0 9
35762: PUSH
35763: LD_INT 20
35765: PUSH
35766: LD_INT 55
35768: PUSH
35769: LD_INT 40
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: LIST
35776: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35777: LD_VAR 0 6
35781: PPUSH
35782: CALL_OW 257
35786: PUSH
35787: LD_INT 12
35789: PUSH
35790: LD_INT 16
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: IN
35797: IFFALSE 35818
// points := [ 5 , 3 , 2 ] ;
35799: LD_ADDR_VAR 0 9
35803: PUSH
35804: LD_INT 5
35806: PUSH
35807: LD_INT 3
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35818: LD_VAR 0 6
35822: PPUSH
35823: CALL_OW 257
35827: PUSH
35828: LD_INT 17
35830: EQUAL
35831: IFFALSE 35852
// points := [ 100 , 50 , 75 ] ;
35833: LD_ADDR_VAR 0 9
35837: PUSH
35838: LD_INT 100
35840: PUSH
35841: LD_INT 50
35843: PUSH
35844: LD_INT 75
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: LIST
35851: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35852: LD_VAR 0 6
35856: PPUSH
35857: CALL_OW 257
35861: PUSH
35862: LD_INT 15
35864: EQUAL
35865: IFFALSE 35886
// points := [ 10 , 5 , 3 ] ;
35867: LD_ADDR_VAR 0 9
35871: PUSH
35872: LD_INT 10
35874: PUSH
35875: LD_INT 5
35877: PUSH
35878: LD_INT 3
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: LIST
35885: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35886: LD_VAR 0 6
35890: PPUSH
35891: CALL_OW 257
35895: PUSH
35896: LD_INT 14
35898: EQUAL
35899: IFFALSE 35920
// points := [ 10 , 0 , 0 ] ;
35901: LD_ADDR_VAR 0 9
35905: PUSH
35906: LD_INT 10
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35920: LD_VAR 0 6
35924: PPUSH
35925: CALL_OW 257
35929: PUSH
35930: LD_INT 11
35932: EQUAL
35933: IFFALSE 35954
// points := [ 30 , 10 , 5 ] ;
35935: LD_ADDR_VAR 0 9
35939: PUSH
35940: LD_INT 30
35942: PUSH
35943: LD_INT 10
35945: PUSH
35946: LD_INT 5
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: LIST
35953: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35954: LD_VAR 0 1
35958: PPUSH
35959: LD_INT 5
35961: PPUSH
35962: CALL_OW 321
35966: PUSH
35967: LD_INT 2
35969: EQUAL
35970: IFFALSE 35987
// bpoints := bpoints * 1.8 ;
35972: LD_ADDR_VAR 0 10
35976: PUSH
35977: LD_VAR 0 10
35981: PUSH
35982: LD_REAL  1.80000000000000E+0000
35985: MUL
35986: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35987: LD_VAR 0 6
35991: PPUSH
35992: CALL_OW 257
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: LD_INT 2
36002: PUSH
36003: LD_INT 3
36005: PUSH
36006: LD_INT 4
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: IN
36015: PUSH
36016: LD_VAR 0 1
36020: PPUSH
36021: LD_INT 51
36023: PPUSH
36024: CALL_OW 321
36028: PUSH
36029: LD_INT 2
36031: EQUAL
36032: AND
36033: IFFALSE 36050
// bpoints := bpoints * 1.2 ;
36035: LD_ADDR_VAR 0 10
36039: PUSH
36040: LD_VAR 0 10
36044: PUSH
36045: LD_REAL  1.20000000000000E+0000
36048: MUL
36049: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36050: LD_VAR 0 6
36054: PPUSH
36055: CALL_OW 257
36059: PUSH
36060: LD_INT 5
36062: PUSH
36063: LD_INT 7
36065: PUSH
36066: LD_INT 9
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: LIST
36073: IN
36074: PUSH
36075: LD_VAR 0 1
36079: PPUSH
36080: LD_INT 52
36082: PPUSH
36083: CALL_OW 321
36087: PUSH
36088: LD_INT 2
36090: EQUAL
36091: AND
36092: IFFALSE 36109
// bpoints := bpoints * 1.5 ;
36094: LD_ADDR_VAR 0 10
36098: PUSH
36099: LD_VAR 0 10
36103: PUSH
36104: LD_REAL  1.50000000000000E+0000
36107: MUL
36108: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36109: LD_VAR 0 1
36113: PPUSH
36114: LD_INT 66
36116: PPUSH
36117: CALL_OW 321
36121: PUSH
36122: LD_INT 2
36124: EQUAL
36125: IFFALSE 36142
// bpoints := bpoints * 1.1 ;
36127: LD_ADDR_VAR 0 10
36131: PUSH
36132: LD_VAR 0 10
36136: PUSH
36137: LD_REAL  1.10000000000000E+0000
36140: MUL
36141: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36142: LD_ADDR_VAR 0 10
36146: PUSH
36147: LD_VAR 0 10
36151: PUSH
36152: LD_VAR 0 6
36156: PPUSH
36157: LD_INT 1
36159: PPUSH
36160: CALL_OW 259
36164: PUSH
36165: LD_REAL  1.15000000000000E+0000
36168: MUL
36169: MUL
36170: ST_TO_ADDR
// end ; unit_vehicle :
36171: GO 37001
36173: LD_INT 2
36175: DOUBLE
36176: EQUAL
36177: IFTRUE 36181
36179: GO 36989
36181: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36182: LD_VAR 0 6
36186: PPUSH
36187: CALL_OW 264
36191: PUSH
36192: LD_INT 2
36194: PUSH
36195: LD_INT 42
36197: PUSH
36198: LD_INT 24
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: LIST
36205: IN
36206: IFFALSE 36227
// points := [ 25 , 5 , 3 ] ;
36208: LD_ADDR_VAR 0 9
36212: PUSH
36213: LD_INT 25
36215: PUSH
36216: LD_INT 5
36218: PUSH
36219: LD_INT 3
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36227: LD_VAR 0 6
36231: PPUSH
36232: CALL_OW 264
36236: PUSH
36237: LD_INT 4
36239: PUSH
36240: LD_INT 43
36242: PUSH
36243: LD_INT 25
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: IN
36251: IFFALSE 36272
// points := [ 40 , 15 , 5 ] ;
36253: LD_ADDR_VAR 0 9
36257: PUSH
36258: LD_INT 40
36260: PUSH
36261: LD_INT 15
36263: PUSH
36264: LD_INT 5
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36272: LD_VAR 0 6
36276: PPUSH
36277: CALL_OW 264
36281: PUSH
36282: LD_INT 3
36284: PUSH
36285: LD_INT 23
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: IN
36292: IFFALSE 36313
// points := [ 7 , 25 , 8 ] ;
36294: LD_ADDR_VAR 0 9
36298: PUSH
36299: LD_INT 7
36301: PUSH
36302: LD_INT 25
36304: PUSH
36305: LD_INT 8
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36313: LD_VAR 0 6
36317: PPUSH
36318: CALL_OW 264
36322: PUSH
36323: LD_INT 5
36325: PUSH
36326: LD_INT 27
36328: PUSH
36329: LD_INT 44
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: LIST
36336: IN
36337: IFFALSE 36358
// points := [ 14 , 50 , 16 ] ;
36339: LD_ADDR_VAR 0 9
36343: PUSH
36344: LD_INT 14
36346: PUSH
36347: LD_INT 50
36349: PUSH
36350: LD_INT 16
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: LIST
36357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36358: LD_VAR 0 6
36362: PPUSH
36363: CALL_OW 264
36367: PUSH
36368: LD_INT 6
36370: PUSH
36371: LD_INT 46
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: IN
36378: IFFALSE 36399
// points := [ 32 , 120 , 70 ] ;
36380: LD_ADDR_VAR 0 9
36384: PUSH
36385: LD_INT 32
36387: PUSH
36388: LD_INT 120
36390: PUSH
36391: LD_INT 70
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36399: LD_VAR 0 6
36403: PPUSH
36404: CALL_OW 264
36408: PUSH
36409: LD_INT 7
36411: PUSH
36412: LD_INT 28
36414: PUSH
36415: LD_INT 45
36417: PUSH
36418: LD_EXP 50
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: IN
36429: IFFALSE 36450
// points := [ 35 , 20 , 45 ] ;
36431: LD_ADDR_VAR 0 9
36435: PUSH
36436: LD_INT 35
36438: PUSH
36439: LD_INT 20
36441: PUSH
36442: LD_INT 45
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: LIST
36449: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36450: LD_VAR 0 6
36454: PPUSH
36455: CALL_OW 264
36459: PUSH
36460: LD_INT 47
36462: PUSH
36463: EMPTY
36464: LIST
36465: IN
36466: IFFALSE 36487
// points := [ 67 , 45 , 75 ] ;
36468: LD_ADDR_VAR 0 9
36472: PUSH
36473: LD_INT 67
36475: PUSH
36476: LD_INT 45
36478: PUSH
36479: LD_INT 75
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36487: LD_VAR 0 6
36491: PPUSH
36492: CALL_OW 264
36496: PUSH
36497: LD_INT 26
36499: PUSH
36500: EMPTY
36501: LIST
36502: IN
36503: IFFALSE 36524
// points := [ 120 , 30 , 80 ] ;
36505: LD_ADDR_VAR 0 9
36509: PUSH
36510: LD_INT 120
36512: PUSH
36513: LD_INT 30
36515: PUSH
36516: LD_INT 80
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36524: LD_VAR 0 6
36528: PPUSH
36529: CALL_OW 264
36533: PUSH
36534: LD_INT 22
36536: PUSH
36537: EMPTY
36538: LIST
36539: IN
36540: IFFALSE 36561
// points := [ 40 , 1 , 1 ] ;
36542: LD_ADDR_VAR 0 9
36546: PUSH
36547: LD_INT 40
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: LIST
36560: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36561: LD_VAR 0 6
36565: PPUSH
36566: CALL_OW 264
36570: PUSH
36571: LD_INT 29
36573: PUSH
36574: EMPTY
36575: LIST
36576: IN
36577: IFFALSE 36598
// points := [ 70 , 200 , 400 ] ;
36579: LD_ADDR_VAR 0 9
36583: PUSH
36584: LD_INT 70
36586: PUSH
36587: LD_INT 200
36589: PUSH
36590: LD_INT 400
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: LIST
36597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36598: LD_VAR 0 6
36602: PPUSH
36603: CALL_OW 264
36607: PUSH
36608: LD_INT 14
36610: PUSH
36611: LD_INT 53
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: IN
36618: IFFALSE 36639
// points := [ 40 , 10 , 20 ] ;
36620: LD_ADDR_VAR 0 9
36624: PUSH
36625: LD_INT 40
36627: PUSH
36628: LD_INT 10
36630: PUSH
36631: LD_INT 20
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36639: LD_VAR 0 6
36643: PPUSH
36644: CALL_OW 264
36648: PUSH
36649: LD_INT 9
36651: PUSH
36652: EMPTY
36653: LIST
36654: IN
36655: IFFALSE 36676
// points := [ 5 , 70 , 20 ] ;
36657: LD_ADDR_VAR 0 9
36661: PUSH
36662: LD_INT 5
36664: PUSH
36665: LD_INT 70
36667: PUSH
36668: LD_INT 20
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: LIST
36675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36676: LD_VAR 0 6
36680: PPUSH
36681: CALL_OW 264
36685: PUSH
36686: LD_INT 10
36688: PUSH
36689: EMPTY
36690: LIST
36691: IN
36692: IFFALSE 36713
// points := [ 35 , 110 , 70 ] ;
36694: LD_ADDR_VAR 0 9
36698: PUSH
36699: LD_INT 35
36701: PUSH
36702: LD_INT 110
36704: PUSH
36705: LD_INT 70
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36713: LD_VAR 0 6
36717: PPUSH
36718: CALL_OW 265
36722: PUSH
36723: LD_INT 25
36725: EQUAL
36726: IFFALSE 36747
// points := [ 80 , 65 , 100 ] ;
36728: LD_ADDR_VAR 0 9
36732: PUSH
36733: LD_INT 80
36735: PUSH
36736: LD_INT 65
36738: PUSH
36739: LD_INT 100
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: LIST
36746: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36747: LD_VAR 0 6
36751: PPUSH
36752: CALL_OW 263
36756: PUSH
36757: LD_INT 1
36759: EQUAL
36760: IFFALSE 36795
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36762: LD_ADDR_VAR 0 10
36766: PUSH
36767: LD_VAR 0 10
36771: PUSH
36772: LD_VAR 0 6
36776: PPUSH
36777: CALL_OW 311
36781: PPUSH
36782: LD_INT 3
36784: PPUSH
36785: CALL_OW 259
36789: PUSH
36790: LD_INT 4
36792: MUL
36793: MUL
36794: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36795: LD_VAR 0 6
36799: PPUSH
36800: CALL_OW 263
36804: PUSH
36805: LD_INT 2
36807: EQUAL
36808: IFFALSE 36859
// begin j := IsControledBy ( i ) ;
36810: LD_ADDR_VAR 0 7
36814: PUSH
36815: LD_VAR 0 6
36819: PPUSH
36820: CALL_OW 312
36824: ST_TO_ADDR
// if j then
36825: LD_VAR 0 7
36829: IFFALSE 36859
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36831: LD_ADDR_VAR 0 10
36835: PUSH
36836: LD_VAR 0 10
36840: PUSH
36841: LD_VAR 0 7
36845: PPUSH
36846: LD_INT 3
36848: PPUSH
36849: CALL_OW 259
36853: PUSH
36854: LD_INT 3
36856: MUL
36857: MUL
36858: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36859: LD_VAR 0 6
36863: PPUSH
36864: CALL_OW 264
36868: PUSH
36869: LD_INT 5
36871: PUSH
36872: LD_INT 6
36874: PUSH
36875: LD_INT 46
36877: PUSH
36878: LD_INT 44
36880: PUSH
36881: LD_INT 47
36883: PUSH
36884: LD_INT 45
36886: PUSH
36887: LD_INT 28
36889: PUSH
36890: LD_INT 7
36892: PUSH
36893: LD_INT 27
36895: PUSH
36896: LD_INT 29
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: IN
36911: PUSH
36912: LD_VAR 0 1
36916: PPUSH
36917: LD_INT 52
36919: PPUSH
36920: CALL_OW 321
36924: PUSH
36925: LD_INT 2
36927: EQUAL
36928: AND
36929: IFFALSE 36946
// bpoints := bpoints * 1.2 ;
36931: LD_ADDR_VAR 0 10
36935: PUSH
36936: LD_VAR 0 10
36940: PUSH
36941: LD_REAL  1.20000000000000E+0000
36944: MUL
36945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36946: LD_VAR 0 6
36950: PPUSH
36951: CALL_OW 264
36955: PUSH
36956: LD_INT 6
36958: PUSH
36959: LD_INT 46
36961: PUSH
36962: LD_INT 47
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: LIST
36969: IN
36970: IFFALSE 36987
// bpoints := bpoints * 1.2 ;
36972: LD_ADDR_VAR 0 10
36976: PUSH
36977: LD_VAR 0 10
36981: PUSH
36982: LD_REAL  1.20000000000000E+0000
36985: MUL
36986: ST_TO_ADDR
// end ; unit_building :
36987: GO 37001
36989: LD_INT 3
36991: DOUBLE
36992: EQUAL
36993: IFTRUE 36997
36995: GO 37000
36997: POP
// ; end ;
36998: GO 37001
37000: POP
// for j = 1 to 3 do
37001: LD_ADDR_VAR 0 7
37005: PUSH
37006: DOUBLE
37007: LD_INT 1
37009: DEC
37010: ST_TO_ADDR
37011: LD_INT 3
37013: PUSH
37014: FOR_TO
37015: IFFALSE 37068
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37017: LD_ADDR_VAR 0 5
37021: PUSH
37022: LD_VAR 0 5
37026: PPUSH
37027: LD_VAR 0 7
37031: PPUSH
37032: LD_VAR 0 5
37036: PUSH
37037: LD_VAR 0 7
37041: ARRAY
37042: PUSH
37043: LD_VAR 0 9
37047: PUSH
37048: LD_VAR 0 7
37052: ARRAY
37053: PUSH
37054: LD_VAR 0 10
37058: MUL
37059: PLUS
37060: PPUSH
37061: CALL_OW 1
37065: ST_TO_ADDR
37066: GO 37014
37068: POP
37069: POP
// end ;
37070: GO 35547
37072: POP
37073: POP
// result := Replace ( result , 4 , tmp ) ;
37074: LD_ADDR_VAR 0 5
37078: PUSH
37079: LD_VAR 0 5
37083: PPUSH
37084: LD_INT 4
37086: PPUSH
37087: LD_VAR 0 8
37091: PPUSH
37092: CALL_OW 1
37096: ST_TO_ADDR
// end ;
37097: LD_VAR 0 5
37101: RET
// export function DangerAtRange ( unit , range ) ; begin
37102: LD_INT 0
37104: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37105: LD_ADDR_VAR 0 3
37109: PUSH
37110: LD_VAR 0 1
37114: PPUSH
37115: CALL_OW 255
37119: PPUSH
37120: LD_VAR 0 1
37124: PPUSH
37125: CALL_OW 250
37129: PPUSH
37130: LD_VAR 0 1
37134: PPUSH
37135: CALL_OW 251
37139: PPUSH
37140: LD_VAR 0 2
37144: PPUSH
37145: CALL 35399 0 4
37149: ST_TO_ADDR
// end ;
37150: LD_VAR 0 3
37154: RET
// export function DangerInArea ( side , area ) ; begin
37155: LD_INT 0
37157: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37158: LD_ADDR_VAR 0 3
37162: PUSH
37163: LD_VAR 0 2
37167: PPUSH
37168: LD_INT 81
37170: PUSH
37171: LD_VAR 0 1
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PPUSH
37180: CALL_OW 70
37184: ST_TO_ADDR
// end ;
37185: LD_VAR 0 3
37189: RET
// export function IsExtension ( b ) ; begin
37190: LD_INT 0
37192: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37193: LD_ADDR_VAR 0 2
37197: PUSH
37198: LD_VAR 0 1
37202: PUSH
37203: LD_INT 23
37205: PUSH
37206: LD_INT 20
37208: PUSH
37209: LD_INT 22
37211: PUSH
37212: LD_INT 17
37214: PUSH
37215: LD_INT 24
37217: PUSH
37218: LD_INT 21
37220: PUSH
37221: LD_INT 19
37223: PUSH
37224: LD_INT 16
37226: PUSH
37227: LD_INT 25
37229: PUSH
37230: LD_INT 18
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: IN
37245: ST_TO_ADDR
// end ;
37246: LD_VAR 0 2
37250: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37251: LD_INT 0
37253: PPUSH
37254: PPUSH
37255: PPUSH
// result := [ ] ;
37256: LD_ADDR_VAR 0 4
37260: PUSH
37261: EMPTY
37262: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37263: LD_ADDR_VAR 0 5
37267: PUSH
37268: LD_VAR 0 2
37272: PPUSH
37273: LD_INT 21
37275: PUSH
37276: LD_INT 3
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PPUSH
37283: CALL_OW 70
37287: ST_TO_ADDR
// if not tmp then
37288: LD_VAR 0 5
37292: NOT
37293: IFFALSE 37297
// exit ;
37295: GO 37361
// if checkLink then
37297: LD_VAR 0 3
37301: IFFALSE 37351
// begin for i in tmp do
37303: LD_ADDR_VAR 0 6
37307: PUSH
37308: LD_VAR 0 5
37312: PUSH
37313: FOR_IN
37314: IFFALSE 37349
// if GetBase ( i ) <> base then
37316: LD_VAR 0 6
37320: PPUSH
37321: CALL_OW 274
37325: PUSH
37326: LD_VAR 0 1
37330: NONEQUAL
37331: IFFALSE 37347
// ComLinkToBase ( base , i ) ;
37333: LD_VAR 0 1
37337: PPUSH
37338: LD_VAR 0 6
37342: PPUSH
37343: CALL_OW 169
37347: GO 37313
37349: POP
37350: POP
// end ; result := tmp ;
37351: LD_ADDR_VAR 0 4
37355: PUSH
37356: LD_VAR 0 5
37360: ST_TO_ADDR
// end ;
37361: LD_VAR 0 4
37365: RET
// export function ComComplete ( units , b ) ; var i ; begin
37366: LD_INT 0
37368: PPUSH
37369: PPUSH
// if not units then
37370: LD_VAR 0 1
37374: NOT
37375: IFFALSE 37379
// exit ;
37377: GO 37469
// for i in units do
37379: LD_ADDR_VAR 0 4
37383: PUSH
37384: LD_VAR 0 1
37388: PUSH
37389: FOR_IN
37390: IFFALSE 37467
// if BuildingStatus ( b ) = bs_build then
37392: LD_VAR 0 2
37396: PPUSH
37397: CALL_OW 461
37401: PUSH
37402: LD_INT 1
37404: EQUAL
37405: IFFALSE 37465
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37407: LD_VAR 0 4
37411: PPUSH
37412: LD_STRING h
37414: PUSH
37415: LD_VAR 0 2
37419: PPUSH
37420: CALL_OW 250
37424: PUSH
37425: LD_VAR 0 2
37429: PPUSH
37430: CALL_OW 251
37434: PUSH
37435: LD_VAR 0 2
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: LD_INT 0
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: PUSH
37458: EMPTY
37459: LIST
37460: PPUSH
37461: CALL_OW 446
37465: GO 37389
37467: POP
37468: POP
// end ;
37469: LD_VAR 0 3
37473: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37474: LD_INT 0
37476: PPUSH
37477: PPUSH
37478: PPUSH
37479: PPUSH
37480: PPUSH
37481: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37482: LD_VAR 0 1
37486: NOT
37487: PUSH
37488: LD_VAR 0 1
37492: PPUSH
37493: CALL_OW 263
37497: PUSH
37498: LD_INT 2
37500: NONEQUAL
37501: OR
37502: IFFALSE 37506
// exit ;
37504: GO 37822
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37506: LD_ADDR_VAR 0 6
37510: PUSH
37511: LD_INT 22
37513: PUSH
37514: LD_VAR 0 1
37518: PPUSH
37519: CALL_OW 255
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 2
37530: PUSH
37531: LD_INT 30
37533: PUSH
37534: LD_INT 36
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 34
37543: PUSH
37544: LD_INT 31
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: LIST
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PPUSH
37560: CALL_OW 69
37564: ST_TO_ADDR
// if not tmp then
37565: LD_VAR 0 6
37569: NOT
37570: IFFALSE 37574
// exit ;
37572: GO 37822
// result := [ ] ;
37574: LD_ADDR_VAR 0 2
37578: PUSH
37579: EMPTY
37580: ST_TO_ADDR
// for i in tmp do
37581: LD_ADDR_VAR 0 3
37585: PUSH
37586: LD_VAR 0 6
37590: PUSH
37591: FOR_IN
37592: IFFALSE 37663
// begin t := UnitsInside ( i ) ;
37594: LD_ADDR_VAR 0 4
37598: PUSH
37599: LD_VAR 0 3
37603: PPUSH
37604: CALL_OW 313
37608: ST_TO_ADDR
// if t then
37609: LD_VAR 0 4
37613: IFFALSE 37661
// for j in t do
37615: LD_ADDR_VAR 0 7
37619: PUSH
37620: LD_VAR 0 4
37624: PUSH
37625: FOR_IN
37626: IFFALSE 37659
// result := Replace ( result , result + 1 , j ) ;
37628: LD_ADDR_VAR 0 2
37632: PUSH
37633: LD_VAR 0 2
37637: PPUSH
37638: LD_VAR 0 2
37642: PUSH
37643: LD_INT 1
37645: PLUS
37646: PPUSH
37647: LD_VAR 0 7
37651: PPUSH
37652: CALL_OW 1
37656: ST_TO_ADDR
37657: GO 37625
37659: POP
37660: POP
// end ;
37661: GO 37591
37663: POP
37664: POP
// if not result then
37665: LD_VAR 0 2
37669: NOT
37670: IFFALSE 37674
// exit ;
37672: GO 37822
// mech := result [ 1 ] ;
37674: LD_ADDR_VAR 0 5
37678: PUSH
37679: LD_VAR 0 2
37683: PUSH
37684: LD_INT 1
37686: ARRAY
37687: ST_TO_ADDR
// if result > 1 then
37688: LD_VAR 0 2
37692: PUSH
37693: LD_INT 1
37695: GREATER
37696: IFFALSE 37808
// begin for i = 2 to result do
37698: LD_ADDR_VAR 0 3
37702: PUSH
37703: DOUBLE
37704: LD_INT 2
37706: DEC
37707: ST_TO_ADDR
37708: LD_VAR 0 2
37712: PUSH
37713: FOR_TO
37714: IFFALSE 37806
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37716: LD_ADDR_VAR 0 4
37720: PUSH
37721: LD_VAR 0 2
37725: PUSH
37726: LD_VAR 0 3
37730: ARRAY
37731: PPUSH
37732: LD_INT 3
37734: PPUSH
37735: CALL_OW 259
37739: PUSH
37740: LD_VAR 0 2
37744: PUSH
37745: LD_VAR 0 3
37749: ARRAY
37750: PPUSH
37751: CALL_OW 432
37755: MINUS
37756: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37757: LD_VAR 0 4
37761: PUSH
37762: LD_VAR 0 5
37766: PPUSH
37767: LD_INT 3
37769: PPUSH
37770: CALL_OW 259
37774: PUSH
37775: LD_VAR 0 5
37779: PPUSH
37780: CALL_OW 432
37784: MINUS
37785: GREATEREQUAL
37786: IFFALSE 37804
// mech := result [ i ] ;
37788: LD_ADDR_VAR 0 5
37792: PUSH
37793: LD_VAR 0 2
37797: PUSH
37798: LD_VAR 0 3
37802: ARRAY
37803: ST_TO_ADDR
// end ;
37804: GO 37713
37806: POP
37807: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37808: LD_VAR 0 1
37812: PPUSH
37813: LD_VAR 0 5
37817: PPUSH
37818: CALL_OW 135
// end ;
37822: LD_VAR 0 2
37826: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37827: LD_INT 0
37829: PPUSH
37830: PPUSH
37831: PPUSH
37832: PPUSH
37833: PPUSH
37834: PPUSH
37835: PPUSH
37836: PPUSH
37837: PPUSH
37838: PPUSH
37839: PPUSH
37840: PPUSH
37841: PPUSH
// result := [ ] ;
37842: LD_ADDR_VAR 0 7
37846: PUSH
37847: EMPTY
37848: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37849: LD_VAR 0 1
37853: PPUSH
37854: CALL_OW 266
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: IN
37869: NOT
37870: IFFALSE 37874
// exit ;
37872: GO 39508
// if name then
37874: LD_VAR 0 3
37878: IFFALSE 37894
// SetBName ( base_dep , name ) ;
37880: LD_VAR 0 1
37884: PPUSH
37885: LD_VAR 0 3
37889: PPUSH
37890: CALL_OW 500
// base := GetBase ( base_dep ) ;
37894: LD_ADDR_VAR 0 15
37898: PUSH
37899: LD_VAR 0 1
37903: PPUSH
37904: CALL_OW 274
37908: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37909: LD_ADDR_VAR 0 16
37913: PUSH
37914: LD_VAR 0 1
37918: PPUSH
37919: CALL_OW 255
37923: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37924: LD_ADDR_VAR 0 17
37928: PUSH
37929: LD_VAR 0 1
37933: PPUSH
37934: CALL_OW 248
37938: ST_TO_ADDR
// if sources then
37939: LD_VAR 0 5
37943: IFFALSE 37990
// for i = 1 to 3 do
37945: LD_ADDR_VAR 0 8
37949: PUSH
37950: DOUBLE
37951: LD_INT 1
37953: DEC
37954: ST_TO_ADDR
37955: LD_INT 3
37957: PUSH
37958: FOR_TO
37959: IFFALSE 37988
// AddResourceType ( base , i , sources [ i ] ) ;
37961: LD_VAR 0 15
37965: PPUSH
37966: LD_VAR 0 8
37970: PPUSH
37971: LD_VAR 0 5
37975: PUSH
37976: LD_VAR 0 8
37980: ARRAY
37981: PPUSH
37982: CALL_OW 276
37986: GO 37958
37988: POP
37989: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37990: LD_ADDR_VAR 0 18
37994: PUSH
37995: LD_VAR 0 15
37999: PPUSH
38000: LD_VAR 0 2
38004: PPUSH
38005: LD_INT 1
38007: PPUSH
38008: CALL 37251 0 3
38012: ST_TO_ADDR
// InitHc ;
38013: CALL_OW 19
// InitUc ;
38017: CALL_OW 18
// uc_side := side ;
38021: LD_ADDR_OWVAR 20
38025: PUSH
38026: LD_VAR 0 16
38030: ST_TO_ADDR
// uc_nation := nation ;
38031: LD_ADDR_OWVAR 21
38035: PUSH
38036: LD_VAR 0 17
38040: ST_TO_ADDR
// if buildings then
38041: LD_VAR 0 18
38045: IFFALSE 39367
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38047: LD_ADDR_VAR 0 19
38051: PUSH
38052: LD_VAR 0 18
38056: PPUSH
38057: LD_INT 2
38059: PUSH
38060: LD_INT 30
38062: PUSH
38063: LD_INT 29
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 30
38072: PUSH
38073: LD_INT 30
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: LIST
38084: PPUSH
38085: CALL_OW 72
38089: ST_TO_ADDR
// if tmp then
38090: LD_VAR 0 19
38094: IFFALSE 38142
// for i in tmp do
38096: LD_ADDR_VAR 0 8
38100: PUSH
38101: LD_VAR 0 19
38105: PUSH
38106: FOR_IN
38107: IFFALSE 38140
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38109: LD_VAR 0 8
38113: PPUSH
38114: CALL_OW 250
38118: PPUSH
38119: LD_VAR 0 8
38123: PPUSH
38124: CALL_OW 251
38128: PPUSH
38129: LD_VAR 0 16
38133: PPUSH
38134: CALL_OW 441
38138: GO 38106
38140: POP
38141: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38142: LD_VAR 0 18
38146: PPUSH
38147: LD_INT 2
38149: PUSH
38150: LD_INT 30
38152: PUSH
38153: LD_INT 32
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 30
38162: PUSH
38163: LD_INT 33
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: LIST
38174: PPUSH
38175: CALL_OW 72
38179: IFFALSE 38267
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38181: LD_ADDR_VAR 0 8
38185: PUSH
38186: LD_VAR 0 18
38190: PPUSH
38191: LD_INT 2
38193: PUSH
38194: LD_INT 30
38196: PUSH
38197: LD_INT 32
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 30
38206: PUSH
38207: LD_INT 33
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: LIST
38218: PPUSH
38219: CALL_OW 72
38223: PUSH
38224: FOR_IN
38225: IFFALSE 38265
// begin if not GetBWeapon ( i ) then
38227: LD_VAR 0 8
38231: PPUSH
38232: CALL_OW 269
38236: NOT
38237: IFFALSE 38263
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38239: LD_VAR 0 8
38243: PPUSH
38244: LD_VAR 0 8
38248: PPUSH
38249: LD_VAR 0 2
38253: PPUSH
38254: CALL 39513 0 2
38258: PPUSH
38259: CALL_OW 431
// end ;
38263: GO 38224
38265: POP
38266: POP
// end ; for i = 1 to personel do
38267: LD_ADDR_VAR 0 8
38271: PUSH
38272: DOUBLE
38273: LD_INT 1
38275: DEC
38276: ST_TO_ADDR
38277: LD_VAR 0 6
38281: PUSH
38282: FOR_TO
38283: IFFALSE 39347
// begin if i > 4 then
38285: LD_VAR 0 8
38289: PUSH
38290: LD_INT 4
38292: GREATER
38293: IFFALSE 38297
// break ;
38295: GO 39347
// case i of 1 :
38297: LD_VAR 0 8
38301: PUSH
38302: LD_INT 1
38304: DOUBLE
38305: EQUAL
38306: IFTRUE 38310
38308: GO 38390
38310: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38311: LD_ADDR_VAR 0 12
38315: PUSH
38316: LD_VAR 0 18
38320: PPUSH
38321: LD_INT 22
38323: PUSH
38324: LD_VAR 0 16
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 58
38335: PUSH
38336: EMPTY
38337: LIST
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: LD_INT 30
38344: PUSH
38345: LD_INT 32
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 30
38354: PUSH
38355: LD_INT 4
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 30
38364: PUSH
38365: LD_INT 5
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: LIST
38382: PPUSH
38383: CALL_OW 72
38387: ST_TO_ADDR
38388: GO 38612
38390: LD_INT 2
38392: DOUBLE
38393: EQUAL
38394: IFTRUE 38398
38396: GO 38460
38398: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38399: LD_ADDR_VAR 0 12
38403: PUSH
38404: LD_VAR 0 18
38408: PPUSH
38409: LD_INT 22
38411: PUSH
38412: LD_VAR 0 16
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: LD_INT 30
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 30
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: LIST
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PPUSH
38453: CALL_OW 72
38457: ST_TO_ADDR
38458: GO 38612
38460: LD_INT 3
38462: DOUBLE
38463: EQUAL
38464: IFTRUE 38468
38466: GO 38530
38468: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38469: LD_ADDR_VAR 0 12
38473: PUSH
38474: LD_VAR 0 18
38478: PPUSH
38479: LD_INT 22
38481: PUSH
38482: LD_VAR 0 16
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 2
38493: PUSH
38494: LD_INT 30
38496: PUSH
38497: LD_INT 2
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 30
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PPUSH
38523: CALL_OW 72
38527: ST_TO_ADDR
38528: GO 38612
38530: LD_INT 4
38532: DOUBLE
38533: EQUAL
38534: IFTRUE 38538
38536: GO 38611
38538: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38539: LD_ADDR_VAR 0 12
38543: PUSH
38544: LD_VAR 0 18
38548: PPUSH
38549: LD_INT 22
38551: PUSH
38552: LD_VAR 0 16
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: LD_INT 30
38566: PUSH
38567: LD_INT 6
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 30
38576: PUSH
38577: LD_INT 7
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 30
38586: PUSH
38587: LD_INT 8
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PPUSH
38604: CALL_OW 72
38608: ST_TO_ADDR
38609: GO 38612
38611: POP
// if i = 1 then
38612: LD_VAR 0 8
38616: PUSH
38617: LD_INT 1
38619: EQUAL
38620: IFFALSE 38731
// begin tmp := [ ] ;
38622: LD_ADDR_VAR 0 19
38626: PUSH
38627: EMPTY
38628: ST_TO_ADDR
// for j in f do
38629: LD_ADDR_VAR 0 9
38633: PUSH
38634: LD_VAR 0 12
38638: PUSH
38639: FOR_IN
38640: IFFALSE 38713
// if GetBType ( j ) = b_bunker then
38642: LD_VAR 0 9
38646: PPUSH
38647: CALL_OW 266
38651: PUSH
38652: LD_INT 32
38654: EQUAL
38655: IFFALSE 38682
// tmp := Insert ( tmp , 1 , j ) else
38657: LD_ADDR_VAR 0 19
38661: PUSH
38662: LD_VAR 0 19
38666: PPUSH
38667: LD_INT 1
38669: PPUSH
38670: LD_VAR 0 9
38674: PPUSH
38675: CALL_OW 2
38679: ST_TO_ADDR
38680: GO 38711
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38682: LD_ADDR_VAR 0 19
38686: PUSH
38687: LD_VAR 0 19
38691: PPUSH
38692: LD_VAR 0 19
38696: PUSH
38697: LD_INT 1
38699: PLUS
38700: PPUSH
38701: LD_VAR 0 9
38705: PPUSH
38706: CALL_OW 2
38710: ST_TO_ADDR
38711: GO 38639
38713: POP
38714: POP
// if tmp then
38715: LD_VAR 0 19
38719: IFFALSE 38731
// f := tmp ;
38721: LD_ADDR_VAR 0 12
38725: PUSH
38726: LD_VAR 0 19
38730: ST_TO_ADDR
// end ; x := personel [ i ] ;
38731: LD_ADDR_VAR 0 13
38735: PUSH
38736: LD_VAR 0 6
38740: PUSH
38741: LD_VAR 0 8
38745: ARRAY
38746: ST_TO_ADDR
// if x = - 1 then
38747: LD_VAR 0 13
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: EQUAL
38756: IFFALSE 38965
// begin for j in f do
38758: LD_ADDR_VAR 0 9
38762: PUSH
38763: LD_VAR 0 12
38767: PUSH
38768: FOR_IN
38769: IFFALSE 38961
// repeat InitHc ;
38771: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38775: LD_VAR 0 9
38779: PPUSH
38780: CALL_OW 266
38784: PUSH
38785: LD_INT 5
38787: EQUAL
38788: IFFALSE 38858
// begin if UnitsInside ( j ) < 3 then
38790: LD_VAR 0 9
38794: PPUSH
38795: CALL_OW 313
38799: PUSH
38800: LD_INT 3
38802: LESS
38803: IFFALSE 38839
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38805: LD_INT 0
38807: PPUSH
38808: LD_INT 5
38810: PUSH
38811: LD_INT 8
38813: PUSH
38814: LD_INT 9
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: LIST
38821: PUSH
38822: LD_VAR 0 17
38826: ARRAY
38827: PPUSH
38828: LD_VAR 0 4
38832: PPUSH
38833: CALL_OW 380
38837: GO 38856
// PrepareHuman ( false , i , skill ) ;
38839: LD_INT 0
38841: PPUSH
38842: LD_VAR 0 8
38846: PPUSH
38847: LD_VAR 0 4
38851: PPUSH
38852: CALL_OW 380
// end else
38856: GO 38875
// PrepareHuman ( false , i , skill ) ;
38858: LD_INT 0
38860: PPUSH
38861: LD_VAR 0 8
38865: PPUSH
38866: LD_VAR 0 4
38870: PPUSH
38871: CALL_OW 380
// un := CreateHuman ;
38875: LD_ADDR_VAR 0 14
38879: PUSH
38880: CALL_OW 44
38884: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38885: LD_ADDR_VAR 0 7
38889: PUSH
38890: LD_VAR 0 7
38894: PPUSH
38895: LD_INT 1
38897: PPUSH
38898: LD_VAR 0 14
38902: PPUSH
38903: CALL_OW 2
38907: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38908: LD_VAR 0 14
38912: PPUSH
38913: LD_VAR 0 9
38917: PPUSH
38918: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38922: LD_VAR 0 9
38926: PPUSH
38927: CALL_OW 313
38931: PUSH
38932: LD_INT 6
38934: EQUAL
38935: PUSH
38936: LD_VAR 0 9
38940: PPUSH
38941: CALL_OW 266
38945: PUSH
38946: LD_INT 32
38948: PUSH
38949: LD_INT 31
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: IN
38956: OR
38957: IFFALSE 38771
38959: GO 38768
38961: POP
38962: POP
// end else
38963: GO 39345
// for j = 1 to x do
38965: LD_ADDR_VAR 0 9
38969: PUSH
38970: DOUBLE
38971: LD_INT 1
38973: DEC
38974: ST_TO_ADDR
38975: LD_VAR 0 13
38979: PUSH
38980: FOR_TO
38981: IFFALSE 39343
// begin InitHc ;
38983: CALL_OW 19
// if not f then
38987: LD_VAR 0 12
38991: NOT
38992: IFFALSE 39081
// begin PrepareHuman ( false , i , skill ) ;
38994: LD_INT 0
38996: PPUSH
38997: LD_VAR 0 8
39001: PPUSH
39002: LD_VAR 0 4
39006: PPUSH
39007: CALL_OW 380
// un := CreateHuman ;
39011: LD_ADDR_VAR 0 14
39015: PUSH
39016: CALL_OW 44
39020: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39021: LD_ADDR_VAR 0 7
39025: PUSH
39026: LD_VAR 0 7
39030: PPUSH
39031: LD_INT 1
39033: PPUSH
39034: LD_VAR 0 14
39038: PPUSH
39039: CALL_OW 2
39043: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39044: LD_VAR 0 14
39048: PPUSH
39049: LD_VAR 0 1
39053: PPUSH
39054: CALL_OW 250
39058: PPUSH
39059: LD_VAR 0 1
39063: PPUSH
39064: CALL_OW 251
39068: PPUSH
39069: LD_INT 10
39071: PPUSH
39072: LD_INT 0
39074: PPUSH
39075: CALL_OW 50
// continue ;
39079: GO 38980
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39081: LD_VAR 0 12
39085: PUSH
39086: LD_INT 1
39088: ARRAY
39089: PPUSH
39090: CALL_OW 313
39094: PUSH
39095: LD_VAR 0 12
39099: PUSH
39100: LD_INT 1
39102: ARRAY
39103: PPUSH
39104: CALL_OW 266
39108: PUSH
39109: LD_INT 32
39111: PUSH
39112: LD_INT 31
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: IN
39119: AND
39120: PUSH
39121: LD_VAR 0 12
39125: PUSH
39126: LD_INT 1
39128: ARRAY
39129: PPUSH
39130: CALL_OW 313
39134: PUSH
39135: LD_INT 6
39137: EQUAL
39138: OR
39139: IFFALSE 39159
// f := Delete ( f , 1 ) ;
39141: LD_ADDR_VAR 0 12
39145: PUSH
39146: LD_VAR 0 12
39150: PPUSH
39151: LD_INT 1
39153: PPUSH
39154: CALL_OW 3
39158: ST_TO_ADDR
// if not f then
39159: LD_VAR 0 12
39163: NOT
39164: IFFALSE 39182
// begin x := x + 2 ;
39166: LD_ADDR_VAR 0 13
39170: PUSH
39171: LD_VAR 0 13
39175: PUSH
39176: LD_INT 2
39178: PLUS
39179: ST_TO_ADDR
// continue ;
39180: GO 38980
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39182: LD_VAR 0 12
39186: PUSH
39187: LD_INT 1
39189: ARRAY
39190: PPUSH
39191: CALL_OW 266
39195: PUSH
39196: LD_INT 5
39198: EQUAL
39199: IFFALSE 39273
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39201: LD_VAR 0 12
39205: PUSH
39206: LD_INT 1
39208: ARRAY
39209: PPUSH
39210: CALL_OW 313
39214: PUSH
39215: LD_INT 3
39217: LESS
39218: IFFALSE 39254
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39220: LD_INT 0
39222: PPUSH
39223: LD_INT 5
39225: PUSH
39226: LD_INT 8
39228: PUSH
39229: LD_INT 9
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: LIST
39236: PUSH
39237: LD_VAR 0 17
39241: ARRAY
39242: PPUSH
39243: LD_VAR 0 4
39247: PPUSH
39248: CALL_OW 380
39252: GO 39271
// PrepareHuman ( false , i , skill ) ;
39254: LD_INT 0
39256: PPUSH
39257: LD_VAR 0 8
39261: PPUSH
39262: LD_VAR 0 4
39266: PPUSH
39267: CALL_OW 380
// end else
39271: GO 39290
// PrepareHuman ( false , i , skill ) ;
39273: LD_INT 0
39275: PPUSH
39276: LD_VAR 0 8
39280: PPUSH
39281: LD_VAR 0 4
39285: PPUSH
39286: CALL_OW 380
// un := CreateHuman ;
39290: LD_ADDR_VAR 0 14
39294: PUSH
39295: CALL_OW 44
39299: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39300: LD_ADDR_VAR 0 7
39304: PUSH
39305: LD_VAR 0 7
39309: PPUSH
39310: LD_INT 1
39312: PPUSH
39313: LD_VAR 0 14
39317: PPUSH
39318: CALL_OW 2
39322: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39323: LD_VAR 0 14
39327: PPUSH
39328: LD_VAR 0 12
39332: PUSH
39333: LD_INT 1
39335: ARRAY
39336: PPUSH
39337: CALL_OW 52
// end ;
39341: GO 38980
39343: POP
39344: POP
// end ;
39345: GO 38282
39347: POP
39348: POP
// result := result ^ buildings ;
39349: LD_ADDR_VAR 0 7
39353: PUSH
39354: LD_VAR 0 7
39358: PUSH
39359: LD_VAR 0 18
39363: ADD
39364: ST_TO_ADDR
// end else
39365: GO 39508
// begin for i = 1 to personel do
39367: LD_ADDR_VAR 0 8
39371: PUSH
39372: DOUBLE
39373: LD_INT 1
39375: DEC
39376: ST_TO_ADDR
39377: LD_VAR 0 6
39381: PUSH
39382: FOR_TO
39383: IFFALSE 39506
// begin if i > 4 then
39385: LD_VAR 0 8
39389: PUSH
39390: LD_INT 4
39392: GREATER
39393: IFFALSE 39397
// break ;
39395: GO 39506
// x := personel [ i ] ;
39397: LD_ADDR_VAR 0 13
39401: PUSH
39402: LD_VAR 0 6
39406: PUSH
39407: LD_VAR 0 8
39411: ARRAY
39412: ST_TO_ADDR
// if x = - 1 then
39413: LD_VAR 0 13
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: EQUAL
39422: IFFALSE 39426
// continue ;
39424: GO 39382
// PrepareHuman ( false , i , skill ) ;
39426: LD_INT 0
39428: PPUSH
39429: LD_VAR 0 8
39433: PPUSH
39434: LD_VAR 0 4
39438: PPUSH
39439: CALL_OW 380
// un := CreateHuman ;
39443: LD_ADDR_VAR 0 14
39447: PUSH
39448: CALL_OW 44
39452: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39453: LD_VAR 0 14
39457: PPUSH
39458: LD_VAR 0 1
39462: PPUSH
39463: CALL_OW 250
39467: PPUSH
39468: LD_VAR 0 1
39472: PPUSH
39473: CALL_OW 251
39477: PPUSH
39478: LD_INT 10
39480: PPUSH
39481: LD_INT 0
39483: PPUSH
39484: CALL_OW 50
// result := result ^ un ;
39488: LD_ADDR_VAR 0 7
39492: PUSH
39493: LD_VAR 0 7
39497: PUSH
39498: LD_VAR 0 14
39502: ADD
39503: ST_TO_ADDR
// end ;
39504: GO 39382
39506: POP
39507: POP
// end ; end ;
39508: LD_VAR 0 7
39512: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39513: LD_INT 0
39515: PPUSH
39516: PPUSH
39517: PPUSH
39518: PPUSH
39519: PPUSH
39520: PPUSH
39521: PPUSH
39522: PPUSH
39523: PPUSH
39524: PPUSH
39525: PPUSH
39526: PPUSH
39527: PPUSH
39528: PPUSH
39529: PPUSH
39530: PPUSH
// result := false ;
39531: LD_ADDR_VAR 0 3
39535: PUSH
39536: LD_INT 0
39538: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39539: LD_VAR 0 1
39543: NOT
39544: PUSH
39545: LD_VAR 0 1
39549: PPUSH
39550: CALL_OW 266
39554: PUSH
39555: LD_INT 32
39557: PUSH
39558: LD_INT 33
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: IN
39565: NOT
39566: OR
39567: IFFALSE 39571
// exit ;
39569: GO 40680
// nat := GetNation ( tower ) ;
39571: LD_ADDR_VAR 0 12
39575: PUSH
39576: LD_VAR 0 1
39580: PPUSH
39581: CALL_OW 248
39585: ST_TO_ADDR
// side := GetSide ( tower ) ;
39586: LD_ADDR_VAR 0 16
39590: PUSH
39591: LD_VAR 0 1
39595: PPUSH
39596: CALL_OW 255
39600: ST_TO_ADDR
// x := GetX ( tower ) ;
39601: LD_ADDR_VAR 0 10
39605: PUSH
39606: LD_VAR 0 1
39610: PPUSH
39611: CALL_OW 250
39615: ST_TO_ADDR
// y := GetY ( tower ) ;
39616: LD_ADDR_VAR 0 11
39620: PUSH
39621: LD_VAR 0 1
39625: PPUSH
39626: CALL_OW 251
39630: ST_TO_ADDR
// if not x or not y then
39631: LD_VAR 0 10
39635: NOT
39636: PUSH
39637: LD_VAR 0 11
39641: NOT
39642: OR
39643: IFFALSE 39647
// exit ;
39645: GO 40680
// weapon := 0 ;
39647: LD_ADDR_VAR 0 18
39651: PUSH
39652: LD_INT 0
39654: ST_TO_ADDR
// fac_list := [ ] ;
39655: LD_ADDR_VAR 0 17
39659: PUSH
39660: EMPTY
39661: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39662: LD_ADDR_VAR 0 6
39666: PUSH
39667: LD_VAR 0 1
39671: PPUSH
39672: CALL_OW 274
39676: PPUSH
39677: LD_VAR 0 2
39681: PPUSH
39682: LD_INT 0
39684: PPUSH
39685: CALL 37251 0 3
39689: PPUSH
39690: LD_INT 30
39692: PUSH
39693: LD_INT 3
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PPUSH
39700: CALL_OW 72
39704: ST_TO_ADDR
// if not factories then
39705: LD_VAR 0 6
39709: NOT
39710: IFFALSE 39714
// exit ;
39712: GO 40680
// for i in factories do
39714: LD_ADDR_VAR 0 8
39718: PUSH
39719: LD_VAR 0 6
39723: PUSH
39724: FOR_IN
39725: IFFALSE 39750
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39727: LD_ADDR_VAR 0 17
39731: PUSH
39732: LD_VAR 0 17
39736: PUSH
39737: LD_VAR 0 8
39741: PPUSH
39742: CALL_OW 478
39746: UNION
39747: ST_TO_ADDR
39748: GO 39724
39750: POP
39751: POP
// if not fac_list then
39752: LD_VAR 0 17
39756: NOT
39757: IFFALSE 39761
// exit ;
39759: GO 40680
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39761: LD_ADDR_VAR 0 5
39765: PUSH
39766: LD_INT 4
39768: PUSH
39769: LD_INT 5
39771: PUSH
39772: LD_INT 9
39774: PUSH
39775: LD_INT 10
39777: PUSH
39778: LD_INT 6
39780: PUSH
39781: LD_INT 7
39783: PUSH
39784: LD_INT 11
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 27
39798: PUSH
39799: LD_INT 28
39801: PUSH
39802: LD_INT 26
39804: PUSH
39805: LD_INT 30
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 43
39816: PUSH
39817: LD_INT 44
39819: PUSH
39820: LD_INT 46
39822: PUSH
39823: LD_INT 45
39825: PUSH
39826: LD_INT 47
39828: PUSH
39829: LD_INT 49
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: LIST
39844: PUSH
39845: LD_VAR 0 12
39849: ARRAY
39850: ST_TO_ADDR
// list := list isect fac_list ;
39851: LD_ADDR_VAR 0 5
39855: PUSH
39856: LD_VAR 0 5
39860: PUSH
39861: LD_VAR 0 17
39865: ISECT
39866: ST_TO_ADDR
// if not list then
39867: LD_VAR 0 5
39871: NOT
39872: IFFALSE 39876
// exit ;
39874: GO 40680
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39876: LD_VAR 0 12
39880: PUSH
39881: LD_INT 3
39883: EQUAL
39884: PUSH
39885: LD_INT 49
39887: PUSH
39888: LD_VAR 0 5
39892: IN
39893: AND
39894: PUSH
39895: LD_INT 31
39897: PPUSH
39898: LD_VAR 0 16
39902: PPUSH
39903: CALL_OW 321
39907: PUSH
39908: LD_INT 2
39910: EQUAL
39911: AND
39912: IFFALSE 39972
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39914: LD_INT 22
39916: PUSH
39917: LD_VAR 0 16
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 35
39928: PUSH
39929: LD_INT 49
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 91
39938: PUSH
39939: LD_VAR 0 1
39943: PUSH
39944: LD_INT 10
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: LIST
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: LIST
39956: PPUSH
39957: CALL_OW 69
39961: NOT
39962: IFFALSE 39972
// weapon := ru_time_lapser ;
39964: LD_ADDR_VAR 0 18
39968: PUSH
39969: LD_INT 49
39971: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39972: LD_VAR 0 12
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: IN
39987: PUSH
39988: LD_INT 11
39990: PUSH
39991: LD_VAR 0 5
39995: IN
39996: PUSH
39997: LD_INT 30
39999: PUSH
40000: LD_VAR 0 5
40004: IN
40005: OR
40006: AND
40007: PUSH
40008: LD_INT 6
40010: PPUSH
40011: LD_VAR 0 16
40015: PPUSH
40016: CALL_OW 321
40020: PUSH
40021: LD_INT 2
40023: EQUAL
40024: AND
40025: IFFALSE 40190
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40027: LD_INT 22
40029: PUSH
40030: LD_VAR 0 16
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 2
40041: PUSH
40042: LD_INT 35
40044: PUSH
40045: LD_INT 11
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 35
40054: PUSH
40055: LD_INT 30
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 91
40069: PUSH
40070: LD_VAR 0 1
40074: PUSH
40075: LD_INT 18
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: LIST
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: LIST
40087: PPUSH
40088: CALL_OW 69
40092: NOT
40093: PUSH
40094: LD_INT 22
40096: PUSH
40097: LD_VAR 0 16
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 2
40108: PUSH
40109: LD_INT 30
40111: PUSH
40112: LD_INT 32
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 30
40121: PUSH
40122: LD_INT 33
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 91
40136: PUSH
40137: LD_VAR 0 1
40141: PUSH
40142: LD_INT 12
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: LIST
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: LIST
40154: PUSH
40155: EMPTY
40156: LIST
40157: PPUSH
40158: CALL_OW 69
40162: PUSH
40163: LD_INT 2
40165: GREATER
40166: AND
40167: IFFALSE 40190
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40169: LD_ADDR_VAR 0 18
40173: PUSH
40174: LD_INT 11
40176: PUSH
40177: LD_INT 30
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_VAR 0 12
40188: ARRAY
40189: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40190: LD_VAR 0 18
40194: NOT
40195: PUSH
40196: LD_INT 40
40198: PPUSH
40199: LD_VAR 0 16
40203: PPUSH
40204: CALL_OW 321
40208: PUSH
40209: LD_INT 2
40211: EQUAL
40212: AND
40213: PUSH
40214: LD_INT 7
40216: PUSH
40217: LD_VAR 0 5
40221: IN
40222: PUSH
40223: LD_INT 28
40225: PUSH
40226: LD_VAR 0 5
40230: IN
40231: OR
40232: PUSH
40233: LD_INT 45
40235: PUSH
40236: LD_VAR 0 5
40240: IN
40241: OR
40242: AND
40243: IFFALSE 40497
// begin hex := GetHexInfo ( x , y ) ;
40245: LD_ADDR_VAR 0 4
40249: PUSH
40250: LD_VAR 0 10
40254: PPUSH
40255: LD_VAR 0 11
40259: PPUSH
40260: CALL_OW 546
40264: ST_TO_ADDR
// if hex [ 1 ] then
40265: LD_VAR 0 4
40269: PUSH
40270: LD_INT 1
40272: ARRAY
40273: IFFALSE 40277
// exit ;
40275: GO 40680
// height := hex [ 2 ] ;
40277: LD_ADDR_VAR 0 15
40281: PUSH
40282: LD_VAR 0 4
40286: PUSH
40287: LD_INT 2
40289: ARRAY
40290: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40291: LD_ADDR_VAR 0 14
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: LD_INT 2
40301: PUSH
40302: LD_INT 3
40304: PUSH
40305: LD_INT 5
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: ST_TO_ADDR
// for i in tmp do
40314: LD_ADDR_VAR 0 8
40318: PUSH
40319: LD_VAR 0 14
40323: PUSH
40324: FOR_IN
40325: IFFALSE 40495
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40327: LD_ADDR_VAR 0 9
40331: PUSH
40332: LD_VAR 0 10
40336: PPUSH
40337: LD_VAR 0 8
40341: PPUSH
40342: LD_INT 5
40344: PPUSH
40345: CALL_OW 272
40349: PUSH
40350: LD_VAR 0 11
40354: PPUSH
40355: LD_VAR 0 8
40359: PPUSH
40360: LD_INT 5
40362: PPUSH
40363: CALL_OW 273
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40372: LD_VAR 0 9
40376: PUSH
40377: LD_INT 1
40379: ARRAY
40380: PPUSH
40381: LD_VAR 0 9
40385: PUSH
40386: LD_INT 2
40388: ARRAY
40389: PPUSH
40390: CALL_OW 488
40394: IFFALSE 40493
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40396: LD_ADDR_VAR 0 4
40400: PUSH
40401: LD_VAR 0 9
40405: PUSH
40406: LD_INT 1
40408: ARRAY
40409: PPUSH
40410: LD_VAR 0 9
40414: PUSH
40415: LD_INT 2
40417: ARRAY
40418: PPUSH
40419: CALL_OW 546
40423: ST_TO_ADDR
// if hex [ 1 ] then
40424: LD_VAR 0 4
40428: PUSH
40429: LD_INT 1
40431: ARRAY
40432: IFFALSE 40436
// continue ;
40434: GO 40324
// h := hex [ 2 ] ;
40436: LD_ADDR_VAR 0 13
40440: PUSH
40441: LD_VAR 0 4
40445: PUSH
40446: LD_INT 2
40448: ARRAY
40449: ST_TO_ADDR
// if h + 7 < height then
40450: LD_VAR 0 13
40454: PUSH
40455: LD_INT 7
40457: PLUS
40458: PUSH
40459: LD_VAR 0 15
40463: LESS
40464: IFFALSE 40493
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40466: LD_ADDR_VAR 0 18
40470: PUSH
40471: LD_INT 7
40473: PUSH
40474: LD_INT 28
40476: PUSH
40477: LD_INT 45
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: PUSH
40485: LD_VAR 0 12
40489: ARRAY
40490: ST_TO_ADDR
// break ;
40491: GO 40495
// end ; end ; end ;
40493: GO 40324
40495: POP
40496: POP
// end ; if not weapon then
40497: LD_VAR 0 18
40501: NOT
40502: IFFALSE 40562
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40504: LD_ADDR_VAR 0 5
40508: PUSH
40509: LD_VAR 0 5
40513: PUSH
40514: LD_INT 11
40516: PUSH
40517: LD_INT 30
40519: PUSH
40520: LD_INT 49
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: LIST
40527: DIFF
40528: ST_TO_ADDR
// if not list then
40529: LD_VAR 0 5
40533: NOT
40534: IFFALSE 40538
// exit ;
40536: GO 40680
// weapon := list [ rand ( 1 , list ) ] ;
40538: LD_ADDR_VAR 0 18
40542: PUSH
40543: LD_VAR 0 5
40547: PUSH
40548: LD_INT 1
40550: PPUSH
40551: LD_VAR 0 5
40555: PPUSH
40556: CALL_OW 12
40560: ARRAY
40561: ST_TO_ADDR
// end ; if weapon then
40562: LD_VAR 0 18
40566: IFFALSE 40680
// begin tmp := CostOfWeapon ( weapon ) ;
40568: LD_ADDR_VAR 0 14
40572: PUSH
40573: LD_VAR 0 18
40577: PPUSH
40578: CALL_OW 451
40582: ST_TO_ADDR
// j := GetBase ( tower ) ;
40583: LD_ADDR_VAR 0 9
40587: PUSH
40588: LD_VAR 0 1
40592: PPUSH
40593: CALL_OW 274
40597: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40598: LD_VAR 0 9
40602: PPUSH
40603: LD_INT 1
40605: PPUSH
40606: CALL_OW 275
40610: PUSH
40611: LD_VAR 0 14
40615: PUSH
40616: LD_INT 1
40618: ARRAY
40619: GREATEREQUAL
40620: PUSH
40621: LD_VAR 0 9
40625: PPUSH
40626: LD_INT 2
40628: PPUSH
40629: CALL_OW 275
40633: PUSH
40634: LD_VAR 0 14
40638: PUSH
40639: LD_INT 2
40641: ARRAY
40642: GREATEREQUAL
40643: AND
40644: PUSH
40645: LD_VAR 0 9
40649: PPUSH
40650: LD_INT 3
40652: PPUSH
40653: CALL_OW 275
40657: PUSH
40658: LD_VAR 0 14
40662: PUSH
40663: LD_INT 3
40665: ARRAY
40666: GREATEREQUAL
40667: AND
40668: IFFALSE 40680
// result := weapon ;
40670: LD_ADDR_VAR 0 3
40674: PUSH
40675: LD_VAR 0 18
40679: ST_TO_ADDR
// end ; end ;
40680: LD_VAR 0 3
40684: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40685: LD_INT 0
40687: PPUSH
40688: PPUSH
// result := true ;
40689: LD_ADDR_VAR 0 3
40693: PUSH
40694: LD_INT 1
40696: ST_TO_ADDR
// if array1 = array2 then
40697: LD_VAR 0 1
40701: PUSH
40702: LD_VAR 0 2
40706: EQUAL
40707: IFFALSE 40767
// begin for i = 1 to array1 do
40709: LD_ADDR_VAR 0 4
40713: PUSH
40714: DOUBLE
40715: LD_INT 1
40717: DEC
40718: ST_TO_ADDR
40719: LD_VAR 0 1
40723: PUSH
40724: FOR_TO
40725: IFFALSE 40763
// if array1 [ i ] <> array2 [ i ] then
40727: LD_VAR 0 1
40731: PUSH
40732: LD_VAR 0 4
40736: ARRAY
40737: PUSH
40738: LD_VAR 0 2
40742: PUSH
40743: LD_VAR 0 4
40747: ARRAY
40748: NONEQUAL
40749: IFFALSE 40761
// begin result := false ;
40751: LD_ADDR_VAR 0 3
40755: PUSH
40756: LD_INT 0
40758: ST_TO_ADDR
// break ;
40759: GO 40763
// end ;
40761: GO 40724
40763: POP
40764: POP
// end else
40765: GO 40775
// result := false ;
40767: LD_ADDR_VAR 0 3
40771: PUSH
40772: LD_INT 0
40774: ST_TO_ADDR
// end ;
40775: LD_VAR 0 3
40779: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40780: LD_INT 0
40782: PPUSH
40783: PPUSH
// if not array1 or not array2 then
40784: LD_VAR 0 1
40788: NOT
40789: PUSH
40790: LD_VAR 0 2
40794: NOT
40795: OR
40796: IFFALSE 40800
// exit ;
40798: GO 40864
// result := true ;
40800: LD_ADDR_VAR 0 3
40804: PUSH
40805: LD_INT 1
40807: ST_TO_ADDR
// for i = 1 to array1 do
40808: LD_ADDR_VAR 0 4
40812: PUSH
40813: DOUBLE
40814: LD_INT 1
40816: DEC
40817: ST_TO_ADDR
40818: LD_VAR 0 1
40822: PUSH
40823: FOR_TO
40824: IFFALSE 40862
// if array1 [ i ] <> array2 [ i ] then
40826: LD_VAR 0 1
40830: PUSH
40831: LD_VAR 0 4
40835: ARRAY
40836: PUSH
40837: LD_VAR 0 2
40841: PUSH
40842: LD_VAR 0 4
40846: ARRAY
40847: NONEQUAL
40848: IFFALSE 40860
// begin result := false ;
40850: LD_ADDR_VAR 0 3
40854: PUSH
40855: LD_INT 0
40857: ST_TO_ADDR
// break ;
40858: GO 40862
// end ;
40860: GO 40823
40862: POP
40863: POP
// end ;
40864: LD_VAR 0 3
40868: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40869: LD_INT 0
40871: PPUSH
40872: PPUSH
40873: PPUSH
// pom := GetBase ( fac ) ;
40874: LD_ADDR_VAR 0 5
40878: PUSH
40879: LD_VAR 0 1
40883: PPUSH
40884: CALL_OW 274
40888: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40889: LD_ADDR_VAR 0 4
40893: PUSH
40894: LD_VAR 0 2
40898: PUSH
40899: LD_INT 1
40901: ARRAY
40902: PPUSH
40903: LD_VAR 0 2
40907: PUSH
40908: LD_INT 2
40910: ARRAY
40911: PPUSH
40912: LD_VAR 0 2
40916: PUSH
40917: LD_INT 3
40919: ARRAY
40920: PPUSH
40921: LD_VAR 0 2
40925: PUSH
40926: LD_INT 4
40928: ARRAY
40929: PPUSH
40930: CALL_OW 449
40934: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40935: LD_ADDR_VAR 0 3
40939: PUSH
40940: LD_VAR 0 5
40944: PPUSH
40945: LD_INT 1
40947: PPUSH
40948: CALL_OW 275
40952: PUSH
40953: LD_VAR 0 4
40957: PUSH
40958: LD_INT 1
40960: ARRAY
40961: GREATEREQUAL
40962: PUSH
40963: LD_VAR 0 5
40967: PPUSH
40968: LD_INT 2
40970: PPUSH
40971: CALL_OW 275
40975: PUSH
40976: LD_VAR 0 4
40980: PUSH
40981: LD_INT 2
40983: ARRAY
40984: GREATEREQUAL
40985: AND
40986: PUSH
40987: LD_VAR 0 5
40991: PPUSH
40992: LD_INT 3
40994: PPUSH
40995: CALL_OW 275
40999: PUSH
41000: LD_VAR 0 4
41004: PUSH
41005: LD_INT 3
41007: ARRAY
41008: GREATEREQUAL
41009: AND
41010: ST_TO_ADDR
// end ;
41011: LD_VAR 0 3
41015: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41016: LD_INT 0
41018: PPUSH
41019: PPUSH
41020: PPUSH
41021: PPUSH
// pom := GetBase ( building ) ;
41022: LD_ADDR_VAR 0 3
41026: PUSH
41027: LD_VAR 0 1
41031: PPUSH
41032: CALL_OW 274
41036: ST_TO_ADDR
// if not pom then
41037: LD_VAR 0 3
41041: NOT
41042: IFFALSE 41046
// exit ;
41044: GO 41216
// btype := GetBType ( building ) ;
41046: LD_ADDR_VAR 0 5
41050: PUSH
41051: LD_VAR 0 1
41055: PPUSH
41056: CALL_OW 266
41060: ST_TO_ADDR
// if btype = b_armoury then
41061: LD_VAR 0 5
41065: PUSH
41066: LD_INT 4
41068: EQUAL
41069: IFFALSE 41079
// btype := b_barracks ;
41071: LD_ADDR_VAR 0 5
41075: PUSH
41076: LD_INT 5
41078: ST_TO_ADDR
// if btype = b_depot then
41079: LD_VAR 0 5
41083: PUSH
41084: LD_INT 0
41086: EQUAL
41087: IFFALSE 41097
// btype := b_warehouse ;
41089: LD_ADDR_VAR 0 5
41093: PUSH
41094: LD_INT 1
41096: ST_TO_ADDR
// if btype = b_workshop then
41097: LD_VAR 0 5
41101: PUSH
41102: LD_INT 2
41104: EQUAL
41105: IFFALSE 41115
// btype := b_factory ;
41107: LD_ADDR_VAR 0 5
41111: PUSH
41112: LD_INT 3
41114: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41115: LD_ADDR_VAR 0 4
41119: PUSH
41120: LD_VAR 0 5
41124: PPUSH
41125: LD_VAR 0 1
41129: PPUSH
41130: CALL_OW 248
41134: PPUSH
41135: CALL_OW 450
41139: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41140: LD_ADDR_VAR 0 2
41144: PUSH
41145: LD_VAR 0 3
41149: PPUSH
41150: LD_INT 1
41152: PPUSH
41153: CALL_OW 275
41157: PUSH
41158: LD_VAR 0 4
41162: PUSH
41163: LD_INT 1
41165: ARRAY
41166: GREATEREQUAL
41167: PUSH
41168: LD_VAR 0 3
41172: PPUSH
41173: LD_INT 2
41175: PPUSH
41176: CALL_OW 275
41180: PUSH
41181: LD_VAR 0 4
41185: PUSH
41186: LD_INT 2
41188: ARRAY
41189: GREATEREQUAL
41190: AND
41191: PUSH
41192: LD_VAR 0 3
41196: PPUSH
41197: LD_INT 3
41199: PPUSH
41200: CALL_OW 275
41204: PUSH
41205: LD_VAR 0 4
41209: PUSH
41210: LD_INT 3
41212: ARRAY
41213: GREATEREQUAL
41214: AND
41215: ST_TO_ADDR
// end ;
41216: LD_VAR 0 2
41220: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41221: LD_INT 0
41223: PPUSH
41224: PPUSH
41225: PPUSH
// pom := GetBase ( building ) ;
41226: LD_ADDR_VAR 0 4
41230: PUSH
41231: LD_VAR 0 1
41235: PPUSH
41236: CALL_OW 274
41240: ST_TO_ADDR
// if not pom then
41241: LD_VAR 0 4
41245: NOT
41246: IFFALSE 41250
// exit ;
41248: GO 41351
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41250: LD_ADDR_VAR 0 5
41254: PUSH
41255: LD_VAR 0 2
41259: PPUSH
41260: LD_VAR 0 1
41264: PPUSH
41265: CALL_OW 248
41269: PPUSH
41270: CALL_OW 450
41274: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41275: LD_ADDR_VAR 0 3
41279: PUSH
41280: LD_VAR 0 4
41284: PPUSH
41285: LD_INT 1
41287: PPUSH
41288: CALL_OW 275
41292: PUSH
41293: LD_VAR 0 5
41297: PUSH
41298: LD_INT 1
41300: ARRAY
41301: GREATEREQUAL
41302: PUSH
41303: LD_VAR 0 4
41307: PPUSH
41308: LD_INT 2
41310: PPUSH
41311: CALL_OW 275
41315: PUSH
41316: LD_VAR 0 5
41320: PUSH
41321: LD_INT 2
41323: ARRAY
41324: GREATEREQUAL
41325: AND
41326: PUSH
41327: LD_VAR 0 4
41331: PPUSH
41332: LD_INT 3
41334: PPUSH
41335: CALL_OW 275
41339: PUSH
41340: LD_VAR 0 5
41344: PUSH
41345: LD_INT 3
41347: ARRAY
41348: GREATEREQUAL
41349: AND
41350: ST_TO_ADDR
// end ;
41351: LD_VAR 0 3
41355: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41356: LD_INT 0
41358: PPUSH
41359: PPUSH
41360: PPUSH
41361: PPUSH
41362: PPUSH
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
41368: PPUSH
// result := false ;
41369: LD_ADDR_VAR 0 8
41373: PUSH
41374: LD_INT 0
41376: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41377: LD_VAR 0 5
41381: NOT
41382: PUSH
41383: LD_VAR 0 1
41387: NOT
41388: OR
41389: PUSH
41390: LD_VAR 0 2
41394: NOT
41395: OR
41396: PUSH
41397: LD_VAR 0 3
41401: NOT
41402: OR
41403: IFFALSE 41407
// exit ;
41405: GO 42221
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41407: LD_ADDR_VAR 0 14
41411: PUSH
41412: LD_VAR 0 1
41416: PPUSH
41417: LD_VAR 0 2
41421: PPUSH
41422: LD_VAR 0 3
41426: PPUSH
41427: LD_VAR 0 4
41431: PPUSH
41432: LD_VAR 0 5
41436: PUSH
41437: LD_INT 1
41439: ARRAY
41440: PPUSH
41441: CALL_OW 248
41445: PPUSH
41446: LD_INT 0
41448: PPUSH
41449: CALL 43458 0 6
41453: ST_TO_ADDR
// if not hexes then
41454: LD_VAR 0 14
41458: NOT
41459: IFFALSE 41463
// exit ;
41461: GO 42221
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41463: LD_ADDR_VAR 0 17
41467: PUSH
41468: LD_VAR 0 5
41472: PPUSH
41473: LD_INT 22
41475: PUSH
41476: LD_VAR 0 13
41480: PPUSH
41481: CALL_OW 255
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: LD_INT 30
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 30
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PPUSH
41522: CALL_OW 72
41526: ST_TO_ADDR
// for i = 1 to hexes do
41527: LD_ADDR_VAR 0 9
41531: PUSH
41532: DOUBLE
41533: LD_INT 1
41535: DEC
41536: ST_TO_ADDR
41537: LD_VAR 0 14
41541: PUSH
41542: FOR_TO
41543: IFFALSE 42219
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41545: LD_ADDR_VAR 0 13
41549: PUSH
41550: LD_VAR 0 14
41554: PUSH
41555: LD_VAR 0 9
41559: ARRAY
41560: PUSH
41561: LD_INT 1
41563: ARRAY
41564: PPUSH
41565: LD_VAR 0 14
41569: PUSH
41570: LD_VAR 0 9
41574: ARRAY
41575: PUSH
41576: LD_INT 2
41578: ARRAY
41579: PPUSH
41580: CALL_OW 428
41584: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41585: LD_VAR 0 14
41589: PUSH
41590: LD_VAR 0 9
41594: ARRAY
41595: PUSH
41596: LD_INT 1
41598: ARRAY
41599: PPUSH
41600: LD_VAR 0 14
41604: PUSH
41605: LD_VAR 0 9
41609: ARRAY
41610: PUSH
41611: LD_INT 2
41613: ARRAY
41614: PPUSH
41615: CALL_OW 351
41619: PUSH
41620: LD_VAR 0 14
41624: PUSH
41625: LD_VAR 0 9
41629: ARRAY
41630: PUSH
41631: LD_INT 1
41633: ARRAY
41634: PPUSH
41635: LD_VAR 0 14
41639: PUSH
41640: LD_VAR 0 9
41644: ARRAY
41645: PUSH
41646: LD_INT 2
41648: ARRAY
41649: PPUSH
41650: CALL_OW 488
41654: NOT
41655: OR
41656: PUSH
41657: LD_VAR 0 13
41661: PPUSH
41662: CALL_OW 247
41666: PUSH
41667: LD_INT 3
41669: EQUAL
41670: OR
41671: IFFALSE 41677
// exit ;
41673: POP
41674: POP
41675: GO 42221
// if not tmp then
41677: LD_VAR 0 13
41681: NOT
41682: IFFALSE 41686
// continue ;
41684: GO 41542
// result := true ;
41686: LD_ADDR_VAR 0 8
41690: PUSH
41691: LD_INT 1
41693: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41694: LD_VAR 0 6
41698: PUSH
41699: LD_VAR 0 13
41703: PPUSH
41704: CALL_OW 247
41708: PUSH
41709: LD_INT 2
41711: EQUAL
41712: AND
41713: PUSH
41714: LD_VAR 0 13
41718: PPUSH
41719: CALL_OW 263
41723: PUSH
41724: LD_INT 1
41726: EQUAL
41727: AND
41728: IFFALSE 41892
// begin if IsDrivenBy ( tmp ) then
41730: LD_VAR 0 13
41734: PPUSH
41735: CALL_OW 311
41739: IFFALSE 41743
// continue ;
41741: GO 41542
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41743: LD_VAR 0 6
41747: PPUSH
41748: LD_INT 3
41750: PUSH
41751: LD_INT 60
41753: PUSH
41754: EMPTY
41755: LIST
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 3
41763: PUSH
41764: LD_INT 55
41766: PUSH
41767: EMPTY
41768: LIST
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PPUSH
41778: CALL_OW 72
41782: IFFALSE 41890
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41784: LD_ADDR_VAR 0 18
41788: PUSH
41789: LD_VAR 0 6
41793: PPUSH
41794: LD_INT 3
41796: PUSH
41797: LD_INT 60
41799: PUSH
41800: EMPTY
41801: LIST
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 3
41809: PUSH
41810: LD_INT 55
41812: PUSH
41813: EMPTY
41814: LIST
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PPUSH
41824: CALL_OW 72
41828: PUSH
41829: LD_INT 1
41831: ARRAY
41832: ST_TO_ADDR
// if IsInUnit ( driver ) then
41833: LD_VAR 0 18
41837: PPUSH
41838: CALL_OW 310
41842: IFFALSE 41853
// ComExit ( driver ) ;
41844: LD_VAR 0 18
41848: PPUSH
41849: CALL 66586 0 1
// AddComEnterUnit ( driver , tmp ) ;
41853: LD_VAR 0 18
41857: PPUSH
41858: LD_VAR 0 13
41862: PPUSH
41863: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41867: LD_VAR 0 18
41871: PPUSH
41872: LD_VAR 0 7
41876: PPUSH
41877: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41881: LD_VAR 0 18
41885: PPUSH
41886: CALL_OW 181
// end ; continue ;
41890: GO 41542
// end ; if not cleaners or not tmp in cleaners then
41892: LD_VAR 0 6
41896: NOT
41897: PUSH
41898: LD_VAR 0 13
41902: PUSH
41903: LD_VAR 0 6
41907: IN
41908: NOT
41909: OR
41910: IFFALSE 42217
// begin if dep then
41912: LD_VAR 0 17
41916: IFFALSE 42052
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41918: LD_ADDR_VAR 0 16
41922: PUSH
41923: LD_VAR 0 17
41927: PUSH
41928: LD_INT 1
41930: ARRAY
41931: PPUSH
41932: CALL_OW 250
41936: PPUSH
41937: LD_VAR 0 17
41941: PUSH
41942: LD_INT 1
41944: ARRAY
41945: PPUSH
41946: CALL_OW 254
41950: PPUSH
41951: LD_INT 5
41953: PPUSH
41954: CALL_OW 272
41958: PUSH
41959: LD_VAR 0 17
41963: PUSH
41964: LD_INT 1
41966: ARRAY
41967: PPUSH
41968: CALL_OW 251
41972: PPUSH
41973: LD_VAR 0 17
41977: PUSH
41978: LD_INT 1
41980: ARRAY
41981: PPUSH
41982: CALL_OW 254
41986: PPUSH
41987: LD_INT 5
41989: PPUSH
41990: CALL_OW 273
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41999: LD_VAR 0 16
42003: PUSH
42004: LD_INT 1
42006: ARRAY
42007: PPUSH
42008: LD_VAR 0 16
42012: PUSH
42013: LD_INT 2
42015: ARRAY
42016: PPUSH
42017: CALL_OW 488
42021: IFFALSE 42052
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42023: LD_VAR 0 13
42027: PPUSH
42028: LD_VAR 0 16
42032: PUSH
42033: LD_INT 1
42035: ARRAY
42036: PPUSH
42037: LD_VAR 0 16
42041: PUSH
42042: LD_INT 2
42044: ARRAY
42045: PPUSH
42046: CALL_OW 111
// continue ;
42050: GO 41542
// end ; end ; r := GetDir ( tmp ) ;
42052: LD_ADDR_VAR 0 15
42056: PUSH
42057: LD_VAR 0 13
42061: PPUSH
42062: CALL_OW 254
42066: ST_TO_ADDR
// if r = 5 then
42067: LD_VAR 0 15
42071: PUSH
42072: LD_INT 5
42074: EQUAL
42075: IFFALSE 42085
// r := 0 ;
42077: LD_ADDR_VAR 0 15
42081: PUSH
42082: LD_INT 0
42084: ST_TO_ADDR
// for j = r to 5 do
42085: LD_ADDR_VAR 0 10
42089: PUSH
42090: DOUBLE
42091: LD_VAR 0 15
42095: DEC
42096: ST_TO_ADDR
42097: LD_INT 5
42099: PUSH
42100: FOR_TO
42101: IFFALSE 42215
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42103: LD_ADDR_VAR 0 11
42107: PUSH
42108: LD_VAR 0 13
42112: PPUSH
42113: CALL_OW 250
42117: PPUSH
42118: LD_VAR 0 10
42122: PPUSH
42123: LD_INT 2
42125: PPUSH
42126: CALL_OW 272
42130: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42131: LD_ADDR_VAR 0 12
42135: PUSH
42136: LD_VAR 0 13
42140: PPUSH
42141: CALL_OW 251
42145: PPUSH
42146: LD_VAR 0 10
42150: PPUSH
42151: LD_INT 2
42153: PPUSH
42154: CALL_OW 273
42158: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42159: LD_VAR 0 11
42163: PPUSH
42164: LD_VAR 0 12
42168: PPUSH
42169: CALL_OW 488
42173: PUSH
42174: LD_VAR 0 11
42178: PPUSH
42179: LD_VAR 0 12
42183: PPUSH
42184: CALL_OW 428
42188: NOT
42189: AND
42190: IFFALSE 42213
// begin ComMoveXY ( tmp , _x , _y ) ;
42192: LD_VAR 0 13
42196: PPUSH
42197: LD_VAR 0 11
42201: PPUSH
42202: LD_VAR 0 12
42206: PPUSH
42207: CALL_OW 111
// break ;
42211: GO 42215
// end ; end ;
42213: GO 42100
42215: POP
42216: POP
// end ; end ;
42217: GO 41542
42219: POP
42220: POP
// end ;
42221: LD_VAR 0 8
42225: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42226: LD_INT 0
42228: PPUSH
// result := true ;
42229: LD_ADDR_VAR 0 3
42233: PUSH
42234: LD_INT 1
42236: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42237: LD_VAR 0 2
42241: PUSH
42242: LD_INT 24
42244: DOUBLE
42245: EQUAL
42246: IFTRUE 42256
42248: LD_INT 33
42250: DOUBLE
42251: EQUAL
42252: IFTRUE 42256
42254: GO 42281
42256: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42257: LD_ADDR_VAR 0 3
42261: PUSH
42262: LD_INT 32
42264: PPUSH
42265: LD_VAR 0 1
42269: PPUSH
42270: CALL_OW 321
42274: PUSH
42275: LD_INT 2
42277: EQUAL
42278: ST_TO_ADDR
42279: GO 42601
42281: LD_INT 20
42283: DOUBLE
42284: EQUAL
42285: IFTRUE 42289
42287: GO 42314
42289: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42290: LD_ADDR_VAR 0 3
42294: PUSH
42295: LD_INT 6
42297: PPUSH
42298: LD_VAR 0 1
42302: PPUSH
42303: CALL_OW 321
42307: PUSH
42308: LD_INT 2
42310: EQUAL
42311: ST_TO_ADDR
42312: GO 42601
42314: LD_INT 22
42316: DOUBLE
42317: EQUAL
42318: IFTRUE 42328
42320: LD_INT 36
42322: DOUBLE
42323: EQUAL
42324: IFTRUE 42328
42326: GO 42353
42328: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42329: LD_ADDR_VAR 0 3
42333: PUSH
42334: LD_INT 15
42336: PPUSH
42337: LD_VAR 0 1
42341: PPUSH
42342: CALL_OW 321
42346: PUSH
42347: LD_INT 2
42349: EQUAL
42350: ST_TO_ADDR
42351: GO 42601
42353: LD_INT 30
42355: DOUBLE
42356: EQUAL
42357: IFTRUE 42361
42359: GO 42386
42361: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42362: LD_ADDR_VAR 0 3
42366: PUSH
42367: LD_INT 20
42369: PPUSH
42370: LD_VAR 0 1
42374: PPUSH
42375: CALL_OW 321
42379: PUSH
42380: LD_INT 2
42382: EQUAL
42383: ST_TO_ADDR
42384: GO 42601
42386: LD_INT 28
42388: DOUBLE
42389: EQUAL
42390: IFTRUE 42400
42392: LD_INT 21
42394: DOUBLE
42395: EQUAL
42396: IFTRUE 42400
42398: GO 42425
42400: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42401: LD_ADDR_VAR 0 3
42405: PUSH
42406: LD_INT 21
42408: PPUSH
42409: LD_VAR 0 1
42413: PPUSH
42414: CALL_OW 321
42418: PUSH
42419: LD_INT 2
42421: EQUAL
42422: ST_TO_ADDR
42423: GO 42601
42425: LD_INT 16
42427: DOUBLE
42428: EQUAL
42429: IFTRUE 42433
42431: GO 42460
42433: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42434: LD_ADDR_VAR 0 3
42438: PUSH
42439: LD_EXP 58
42443: PPUSH
42444: LD_VAR 0 1
42448: PPUSH
42449: CALL_OW 321
42453: PUSH
42454: LD_INT 2
42456: EQUAL
42457: ST_TO_ADDR
42458: GO 42601
42460: LD_INT 19
42462: DOUBLE
42463: EQUAL
42464: IFTRUE 42474
42466: LD_INT 23
42468: DOUBLE
42469: EQUAL
42470: IFTRUE 42474
42472: GO 42501
42474: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42475: LD_ADDR_VAR 0 3
42479: PUSH
42480: LD_EXP 57
42484: PPUSH
42485: LD_VAR 0 1
42489: PPUSH
42490: CALL_OW 321
42494: PUSH
42495: LD_INT 2
42497: EQUAL
42498: ST_TO_ADDR
42499: GO 42601
42501: LD_INT 17
42503: DOUBLE
42504: EQUAL
42505: IFTRUE 42509
42507: GO 42534
42509: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42510: LD_ADDR_VAR 0 3
42514: PUSH
42515: LD_INT 39
42517: PPUSH
42518: LD_VAR 0 1
42522: PPUSH
42523: CALL_OW 321
42527: PUSH
42528: LD_INT 2
42530: EQUAL
42531: ST_TO_ADDR
42532: GO 42601
42534: LD_INT 18
42536: DOUBLE
42537: EQUAL
42538: IFTRUE 42542
42540: GO 42567
42542: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42543: LD_ADDR_VAR 0 3
42547: PUSH
42548: LD_INT 40
42550: PPUSH
42551: LD_VAR 0 1
42555: PPUSH
42556: CALL_OW 321
42560: PUSH
42561: LD_INT 2
42563: EQUAL
42564: ST_TO_ADDR
42565: GO 42601
42567: LD_INT 27
42569: DOUBLE
42570: EQUAL
42571: IFTRUE 42575
42573: GO 42600
42575: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42576: LD_ADDR_VAR 0 3
42580: PUSH
42581: LD_INT 35
42583: PPUSH
42584: LD_VAR 0 1
42588: PPUSH
42589: CALL_OW 321
42593: PUSH
42594: LD_INT 2
42596: EQUAL
42597: ST_TO_ADDR
42598: GO 42601
42600: POP
// end ;
42601: LD_VAR 0 3
42605: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42606: LD_INT 0
42608: PPUSH
42609: PPUSH
42610: PPUSH
42611: PPUSH
42612: PPUSH
42613: PPUSH
42614: PPUSH
42615: PPUSH
42616: PPUSH
42617: PPUSH
42618: PPUSH
// result := false ;
42619: LD_ADDR_VAR 0 6
42623: PUSH
42624: LD_INT 0
42626: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42627: LD_VAR 0 1
42631: NOT
42632: PUSH
42633: LD_VAR 0 1
42637: PPUSH
42638: CALL_OW 266
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: IN
42653: NOT
42654: OR
42655: PUSH
42656: LD_VAR 0 2
42660: NOT
42661: OR
42662: PUSH
42663: LD_VAR 0 5
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: LD_INT 2
42676: PUSH
42677: LD_INT 3
42679: PUSH
42680: LD_INT 4
42682: PUSH
42683: LD_INT 5
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: IN
42694: NOT
42695: OR
42696: PUSH
42697: LD_VAR 0 3
42701: PPUSH
42702: LD_VAR 0 4
42706: PPUSH
42707: CALL_OW 488
42711: NOT
42712: OR
42713: IFFALSE 42717
// exit ;
42715: GO 43453
// side := GetSide ( depot ) ;
42717: LD_ADDR_VAR 0 9
42721: PUSH
42722: LD_VAR 0 1
42726: PPUSH
42727: CALL_OW 255
42731: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42732: LD_VAR 0 9
42736: PPUSH
42737: LD_VAR 0 2
42741: PPUSH
42742: CALL 42226 0 2
42746: NOT
42747: IFFALSE 42751
// exit ;
42749: GO 43453
// pom := GetBase ( depot ) ;
42751: LD_ADDR_VAR 0 10
42755: PUSH
42756: LD_VAR 0 1
42760: PPUSH
42761: CALL_OW 274
42765: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42766: LD_ADDR_VAR 0 11
42770: PUSH
42771: LD_VAR 0 2
42775: PPUSH
42776: LD_VAR 0 1
42780: PPUSH
42781: CALL_OW 248
42785: PPUSH
42786: CALL_OW 450
42790: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42791: LD_VAR 0 10
42795: PPUSH
42796: LD_INT 1
42798: PPUSH
42799: CALL_OW 275
42803: PUSH
42804: LD_VAR 0 11
42808: PUSH
42809: LD_INT 1
42811: ARRAY
42812: GREATEREQUAL
42813: PUSH
42814: LD_VAR 0 10
42818: PPUSH
42819: LD_INT 2
42821: PPUSH
42822: CALL_OW 275
42826: PUSH
42827: LD_VAR 0 11
42831: PUSH
42832: LD_INT 2
42834: ARRAY
42835: GREATEREQUAL
42836: AND
42837: PUSH
42838: LD_VAR 0 10
42842: PPUSH
42843: LD_INT 3
42845: PPUSH
42846: CALL_OW 275
42850: PUSH
42851: LD_VAR 0 11
42855: PUSH
42856: LD_INT 3
42858: ARRAY
42859: GREATEREQUAL
42860: AND
42861: NOT
42862: IFFALSE 42866
// exit ;
42864: GO 43453
// if GetBType ( depot ) = b_depot then
42866: LD_VAR 0 1
42870: PPUSH
42871: CALL_OW 266
42875: PUSH
42876: LD_INT 0
42878: EQUAL
42879: IFFALSE 42891
// dist := 28 else
42881: LD_ADDR_VAR 0 14
42885: PUSH
42886: LD_INT 28
42888: ST_TO_ADDR
42889: GO 42899
// dist := 36 ;
42891: LD_ADDR_VAR 0 14
42895: PUSH
42896: LD_INT 36
42898: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42899: LD_VAR 0 1
42903: PPUSH
42904: LD_VAR 0 3
42908: PPUSH
42909: LD_VAR 0 4
42913: PPUSH
42914: CALL_OW 297
42918: PUSH
42919: LD_VAR 0 14
42923: GREATER
42924: IFFALSE 42928
// exit ;
42926: GO 43453
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42928: LD_ADDR_VAR 0 12
42932: PUSH
42933: LD_VAR 0 2
42937: PPUSH
42938: LD_VAR 0 3
42942: PPUSH
42943: LD_VAR 0 4
42947: PPUSH
42948: LD_VAR 0 5
42952: PPUSH
42953: LD_VAR 0 1
42957: PPUSH
42958: CALL_OW 248
42962: PPUSH
42963: LD_INT 0
42965: PPUSH
42966: CALL 43458 0 6
42970: ST_TO_ADDR
// if not hexes then
42971: LD_VAR 0 12
42975: NOT
42976: IFFALSE 42980
// exit ;
42978: GO 43453
// hex := GetHexInfo ( x , y ) ;
42980: LD_ADDR_VAR 0 15
42984: PUSH
42985: LD_VAR 0 3
42989: PPUSH
42990: LD_VAR 0 4
42994: PPUSH
42995: CALL_OW 546
42999: ST_TO_ADDR
// if hex [ 1 ] then
43000: LD_VAR 0 15
43004: PUSH
43005: LD_INT 1
43007: ARRAY
43008: IFFALSE 43012
// exit ;
43010: GO 43453
// height := hex [ 2 ] ;
43012: LD_ADDR_VAR 0 13
43016: PUSH
43017: LD_VAR 0 15
43021: PUSH
43022: LD_INT 2
43024: ARRAY
43025: ST_TO_ADDR
// for i = 1 to hexes do
43026: LD_ADDR_VAR 0 7
43030: PUSH
43031: DOUBLE
43032: LD_INT 1
43034: DEC
43035: ST_TO_ADDR
43036: LD_VAR 0 12
43040: PUSH
43041: FOR_TO
43042: IFFALSE 43372
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43044: LD_VAR 0 12
43048: PUSH
43049: LD_VAR 0 7
43053: ARRAY
43054: PUSH
43055: LD_INT 1
43057: ARRAY
43058: PPUSH
43059: LD_VAR 0 12
43063: PUSH
43064: LD_VAR 0 7
43068: ARRAY
43069: PUSH
43070: LD_INT 2
43072: ARRAY
43073: PPUSH
43074: CALL_OW 488
43078: NOT
43079: PUSH
43080: LD_VAR 0 12
43084: PUSH
43085: LD_VAR 0 7
43089: ARRAY
43090: PUSH
43091: LD_INT 1
43093: ARRAY
43094: PPUSH
43095: LD_VAR 0 12
43099: PUSH
43100: LD_VAR 0 7
43104: ARRAY
43105: PUSH
43106: LD_INT 2
43108: ARRAY
43109: PPUSH
43110: CALL_OW 428
43114: PUSH
43115: LD_INT 0
43117: GREATER
43118: OR
43119: PUSH
43120: LD_VAR 0 12
43124: PUSH
43125: LD_VAR 0 7
43129: ARRAY
43130: PUSH
43131: LD_INT 1
43133: ARRAY
43134: PPUSH
43135: LD_VAR 0 12
43139: PUSH
43140: LD_VAR 0 7
43144: ARRAY
43145: PUSH
43146: LD_INT 2
43148: ARRAY
43149: PPUSH
43150: CALL_OW 351
43154: OR
43155: IFFALSE 43161
// exit ;
43157: POP
43158: POP
43159: GO 43453
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43161: LD_ADDR_VAR 0 8
43165: PUSH
43166: LD_VAR 0 12
43170: PUSH
43171: LD_VAR 0 7
43175: ARRAY
43176: PUSH
43177: LD_INT 1
43179: ARRAY
43180: PPUSH
43181: LD_VAR 0 12
43185: PUSH
43186: LD_VAR 0 7
43190: ARRAY
43191: PUSH
43192: LD_INT 2
43194: ARRAY
43195: PPUSH
43196: CALL_OW 546
43200: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43201: LD_VAR 0 8
43205: PUSH
43206: LD_INT 1
43208: ARRAY
43209: PUSH
43210: LD_VAR 0 8
43214: PUSH
43215: LD_INT 2
43217: ARRAY
43218: PUSH
43219: LD_VAR 0 13
43223: PUSH
43224: LD_INT 2
43226: PLUS
43227: GREATER
43228: OR
43229: PUSH
43230: LD_VAR 0 8
43234: PUSH
43235: LD_INT 2
43237: ARRAY
43238: PUSH
43239: LD_VAR 0 13
43243: PUSH
43244: LD_INT 2
43246: MINUS
43247: LESS
43248: OR
43249: PUSH
43250: LD_VAR 0 8
43254: PUSH
43255: LD_INT 3
43257: ARRAY
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 8
43264: PUSH
43265: LD_INT 9
43267: PUSH
43268: LD_INT 10
43270: PUSH
43271: LD_INT 11
43273: PUSH
43274: LD_INT 12
43276: PUSH
43277: LD_INT 13
43279: PUSH
43280: LD_INT 16
43282: PUSH
43283: LD_INT 17
43285: PUSH
43286: LD_INT 18
43288: PUSH
43289: LD_INT 19
43291: PUSH
43292: LD_INT 20
43294: PUSH
43295: LD_INT 21
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: IN
43313: NOT
43314: OR
43315: PUSH
43316: LD_VAR 0 8
43320: PUSH
43321: LD_INT 5
43323: ARRAY
43324: NOT
43325: OR
43326: PUSH
43327: LD_VAR 0 8
43331: PUSH
43332: LD_INT 6
43334: ARRAY
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: LD_INT 7
43344: PUSH
43345: LD_INT 9
43347: PUSH
43348: LD_INT 10
43350: PUSH
43351: LD_INT 11
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: IN
43362: NOT
43363: OR
43364: IFFALSE 43370
// exit ;
43366: POP
43367: POP
43368: GO 43453
// end ;
43370: GO 43041
43372: POP
43373: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43374: LD_VAR 0 9
43378: PPUSH
43379: LD_VAR 0 3
43383: PPUSH
43384: LD_VAR 0 4
43388: PPUSH
43389: LD_INT 20
43391: PPUSH
43392: CALL 35399 0 4
43396: PUSH
43397: LD_INT 4
43399: ARRAY
43400: IFFALSE 43404
// exit ;
43402: GO 43453
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43404: LD_VAR 0 2
43408: PUSH
43409: LD_INT 29
43411: PUSH
43412: LD_INT 30
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: IN
43419: PUSH
43420: LD_VAR 0 3
43424: PPUSH
43425: LD_VAR 0 4
43429: PPUSH
43430: LD_VAR 0 9
43434: PPUSH
43435: CALL_OW 440
43439: NOT
43440: AND
43441: IFFALSE 43445
// exit ;
43443: GO 43453
// result := true ;
43445: LD_ADDR_VAR 0 6
43449: PUSH
43450: LD_INT 1
43452: ST_TO_ADDR
// end ;
43453: LD_VAR 0 6
43457: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43458: LD_INT 0
43460: PPUSH
43461: PPUSH
43462: PPUSH
43463: PPUSH
43464: PPUSH
43465: PPUSH
43466: PPUSH
43467: PPUSH
43468: PPUSH
43469: PPUSH
43470: PPUSH
43471: PPUSH
43472: PPUSH
43473: PPUSH
43474: PPUSH
43475: PPUSH
43476: PPUSH
43477: PPUSH
43478: PPUSH
43479: PPUSH
43480: PPUSH
43481: PPUSH
43482: PPUSH
43483: PPUSH
43484: PPUSH
43485: PPUSH
43486: PPUSH
43487: PPUSH
43488: PPUSH
43489: PPUSH
43490: PPUSH
43491: PPUSH
43492: PPUSH
43493: PPUSH
43494: PPUSH
43495: PPUSH
43496: PPUSH
43497: PPUSH
43498: PPUSH
43499: PPUSH
43500: PPUSH
43501: PPUSH
43502: PPUSH
43503: PPUSH
43504: PPUSH
43505: PPUSH
43506: PPUSH
43507: PPUSH
43508: PPUSH
43509: PPUSH
43510: PPUSH
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
43515: PPUSH
43516: PPUSH
43517: PPUSH
// result = [ ] ;
43518: LD_ADDR_VAR 0 7
43522: PUSH
43523: EMPTY
43524: ST_TO_ADDR
// temp_list = [ ] ;
43525: LD_ADDR_VAR 0 9
43529: PUSH
43530: EMPTY
43531: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43532: LD_VAR 0 4
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: LD_INT 3
43548: PUSH
43549: LD_INT 4
43551: PUSH
43552: LD_INT 5
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: IN
43563: NOT
43564: PUSH
43565: LD_VAR 0 1
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: IN
43580: PUSH
43581: LD_VAR 0 5
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: LD_INT 3
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: LIST
43599: IN
43600: NOT
43601: AND
43602: OR
43603: IFFALSE 43607
// exit ;
43605: GO 61998
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43607: LD_VAR 0 1
43611: PUSH
43612: LD_INT 6
43614: PUSH
43615: LD_INT 7
43617: PUSH
43618: LD_INT 8
43620: PUSH
43621: LD_INT 13
43623: PUSH
43624: LD_INT 12
43626: PUSH
43627: LD_INT 15
43629: PUSH
43630: LD_INT 11
43632: PUSH
43633: LD_INT 14
43635: PUSH
43636: LD_INT 10
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: IN
43650: IFFALSE 43660
// btype = b_lab ;
43652: LD_ADDR_VAR 0 1
43656: PUSH
43657: LD_INT 6
43659: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43660: LD_VAR 0 6
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: IN
43679: NOT
43680: PUSH
43681: LD_VAR 0 1
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 2
43694: PUSH
43695: LD_INT 3
43697: PUSH
43698: LD_INT 6
43700: PUSH
43701: LD_INT 36
43703: PUSH
43704: LD_INT 4
43706: PUSH
43707: LD_INT 5
43709: PUSH
43710: LD_INT 31
43712: PUSH
43713: LD_INT 32
43715: PUSH
43716: LD_INT 33
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: IN
43732: NOT
43733: PUSH
43734: LD_VAR 0 6
43738: PUSH
43739: LD_INT 1
43741: EQUAL
43742: AND
43743: OR
43744: PUSH
43745: LD_VAR 0 1
43749: PUSH
43750: LD_INT 2
43752: PUSH
43753: LD_INT 3
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: IN
43760: NOT
43761: PUSH
43762: LD_VAR 0 6
43766: PUSH
43767: LD_INT 2
43769: EQUAL
43770: AND
43771: OR
43772: IFFALSE 43782
// mode = 0 ;
43774: LD_ADDR_VAR 0 6
43778: PUSH
43779: LD_INT 0
43781: ST_TO_ADDR
// case mode of 0 :
43782: LD_VAR 0 6
43786: PUSH
43787: LD_INT 0
43789: DOUBLE
43790: EQUAL
43791: IFTRUE 43795
43793: GO 55248
43795: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43796: LD_ADDR_VAR 0 11
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: LD_INT 1
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 2
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 2
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: LD_INT 2
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 3
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 3
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 2
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43989: LD_ADDR_VAR 0 12
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 3
44146: NEG
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 3
44157: NEG
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44185: LD_ADDR_VAR 0 13
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: LD_INT 2
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: LD_INT 2
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 2
44308: NEG
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: LD_INT 2
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: NEG
44333: PUSH
44334: LD_INT 3
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 3
44344: NEG
44345: PUSH
44346: LD_INT 2
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 3
44356: NEG
44357: PUSH
44358: LD_INT 3
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44384: LD_ADDR_VAR 0 14
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: LD_INT 2
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: LD_INT 3
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: LD_INT 3
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44580: LD_ADDR_VAR 0 15
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 3
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 3
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44773: LD_ADDR_VAR 0 16
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: LD_INT 2
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: PUSH
44877: LD_INT 2
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: LD_INT 2
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 3
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 3
44930: PUSH
44931: LD_INT 3
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: LD_INT 3
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44966: LD_ADDR_VAR 0 17
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45196: LD_ADDR_VAR 0 18
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 2
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45426: LD_ADDR_VAR 0 19
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45656: LD_ADDR_VAR 0 20
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45886: LD_ADDR_VAR 0 21
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: LD_INT 2
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46116: LD_ADDR_VAR 0 22
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: LD_INT 2
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: LD_INT 2
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 2
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: LD_INT 2
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46346: LD_ADDR_VAR 0 23
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: LD_INT 3
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: LD_INT 3
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46626: LD_ADDR_VAR 0 24
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 2
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 2
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 2
46825: NEG
46826: PUSH
46827: LD_INT 2
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 3
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 3
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46902: LD_ADDR_VAR 0 25
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: NEG
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 3
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 3
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 2
47133: PUSH
47134: LD_INT 3
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: LD_INT 3
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47176: LD_ADDR_VAR 0 26
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: LD_INT 3
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 3
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47452: LD_ADDR_VAR 0 27
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: NEG
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: NEG
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 2
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 3
47685: NEG
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 3
47697: NEG
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47732: LD_ADDR_VAR 0 28
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 2
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: LD_INT 2
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: NEG
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: LD_INT 3
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: LD_INT 3
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 3
47967: NEG
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 3
47979: NEG
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48014: LD_ADDR_VAR 0 29
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: NEG
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: LD_INT 3
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 3
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 3
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 3
48258: NEG
48259: PUSH
48260: LD_INT 2
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48293: LD_ADDR_VAR 0 30
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: LD_INT 2
48378: NEG
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: NEG
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: LD_INT 3
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: LD_INT 2
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: LD_INT 3
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 3
48536: NEG
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48571: LD_ADDR_VAR 0 31
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 3
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 3
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: LD_INT 3
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 3
48814: NEG
48815: PUSH
48816: LD_INT 2
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48849: LD_ADDR_VAR 0 32
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: LD_INT 2
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: LD_INT 3
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 2
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 3
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 3
49092: NEG
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49127: LD_ADDR_VAR 0 33
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 2
49282: NEG
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: NEG
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 3
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 3
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 3
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 3
49371: NEG
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49406: LD_ADDR_VAR 0 34
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 2
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 2
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 2
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 3
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 3
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: LD_INT 3
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 3
49651: NEG
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49686: LD_ADDR_VAR 0 35
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49798: LD_ADDR_VAR 0 36
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49910: LD_ADDR_VAR 0 37
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50022: LD_ADDR_VAR 0 38
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50134: LD_ADDR_VAR 0 39
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50246: LD_ADDR_VAR 0 40
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50358: LD_ADDR_VAR 0 41
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: LD_INT 2
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 2
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: LD_INT 2
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: LD_INT 3
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 3
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 3
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 3
50591: PUSH
50592: LD_INT 2
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 3
50601: PUSH
50602: LD_INT 3
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 2
50611: PUSH
50612: LD_INT 3
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 3
50632: NEG
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 3
50643: NEG
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 3
50655: NEG
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 3
50667: NEG
50668: PUSH
50669: LD_INT 3
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50708: LD_ADDR_VAR 0 42
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: NEG
50899: PUSH
50900: LD_INT 3
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 3
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 3
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 3
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 3
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: LD_INT 3
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 3
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 3
51005: NEG
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 3
51017: NEG
51018: PUSH
51019: LD_INT 3
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51058: LD_ADDR_VAR 0 43
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 2
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 2
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 2
51224: NEG
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: NEG
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 3
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 3
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 3
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 3
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 3
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 3
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 2
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 3
51354: NEG
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 3
51365: NEG
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51406: LD_ADDR_VAR 0 44
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: LD_INT 2
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: LD_INT 2
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 2
51596: NEG
51597: PUSH
51598: LD_INT 3
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 3
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 3
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 3
51649: PUSH
51650: LD_INT 3
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: LD_INT 3
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 3
51680: NEG
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 3
51703: NEG
51704: PUSH
51705: LD_INT 2
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: LD_INT 3
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51756: LD_ADDR_VAR 0 45
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 2
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: LD_INT 2
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: NEG
51947: PUSH
51948: LD_INT 3
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 3
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 3
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 2
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 3
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 3
52002: PUSH
52003: LD_INT 3
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: LD_INT 3
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: LD_INT 3
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 3
52053: NEG
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 3
52065: NEG
52066: PUSH
52067: LD_INT 3
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52106: LD_ADDR_VAR 0 46
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: LD_INT 3
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: LD_INT 3
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 2
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 3
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 3
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: LD_INT 3
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: LD_INT 3
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 2
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 3
52402: NEG
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 3
52413: NEG
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52454: LD_ADDR_VAR 0 47
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52605: LD_ADDR_VAR 0 48
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 2
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52752: LD_ADDR_VAR 0 49
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 2
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52896: LD_ADDR_VAR 0 50
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53040: LD_ADDR_VAR 0 51
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53187: LD_ADDR_VAR 0 52
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: LD_INT 2
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: LD_INT 2
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53338: LD_ADDR_VAR 0 53
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 2
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: LD_INT 2
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: LD_INT 2
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 2
53525: NEG
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53568: LD_ADDR_VAR 0 54
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: LD_INT 2
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53798: LD_ADDR_VAR 0 55
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 2
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: LD_INT 2
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54028: LD_ADDR_VAR 0 56
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 2
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: LD_INT 2
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54258: LD_ADDR_VAR 0 57
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: LD_INT 2
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: LD_INT 2
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 2
54457: NEG
54458: PUSH
54459: LD_INT 2
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54488: LD_ADDR_VAR 0 58
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: LD_INT 2
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54718: LD_ADDR_VAR 0 59
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54806: LD_ADDR_VAR 0 60
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54894: LD_ADDR_VAR 0 61
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54982: LD_ADDR_VAR 0 62
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55070: LD_ADDR_VAR 0 63
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55158: LD_ADDR_VAR 0 64
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 0
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: ST_TO_ADDR
// end ; 1 :
55246: GO 61143
55248: LD_INT 1
55250: DOUBLE
55251: EQUAL
55252: IFTRUE 55256
55254: GO 57879
55256: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55257: LD_ADDR_VAR 0 11
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: LD_INT 3
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 3
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 2
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: LIST
55300: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55301: LD_ADDR_VAR 0 12
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: LIST
55341: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55342: LD_ADDR_VAR 0 13
55346: PUSH
55347: LD_INT 3
55349: PUSH
55350: LD_INT 2
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 3
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 3
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: LIST
55381: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55382: LD_ADDR_VAR 0 14
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 3
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 2
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: LIST
55422: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55423: LD_ADDR_VAR 0 15
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 3
55441: NEG
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: LIST
55466: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55467: LD_ADDR_VAR 0 16
55471: PUSH
55472: LD_INT 2
55474: NEG
55475: PUSH
55476: LD_INT 3
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 3
55486: NEG
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 3
55498: NEG
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: LIST
55512: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55513: LD_ADDR_VAR 0 17
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: LD_INT 3
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 2
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: LIST
55556: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55557: LD_ADDR_VAR 0 18
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 3
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: LIST
55597: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55598: LD_ADDR_VAR 0 19
55602: PUSH
55603: LD_INT 3
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 3
55615: PUSH
55616: LD_INT 3
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: LD_INT 3
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: LIST
55637: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55638: LD_ADDR_VAR 0 20
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: LD_INT 3
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: LD_INT 3
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: LIST
55678: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55679: LD_ADDR_VAR 0 21
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 3
55697: NEG
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 3
55708: NEG
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55723: LD_ADDR_VAR 0 22
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: LD_INT 3
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 3
55742: NEG
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 3
55754: NEG
55755: PUSH
55756: LD_INT 3
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: LIST
55768: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55769: LD_ADDR_VAR 0 23
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 3
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: LD_INT 4
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 3
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: LIST
55812: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55813: LD_ADDR_VAR 0 24
55817: PUSH
55818: LD_INT 3
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 3
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 4
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55854: LD_ADDR_VAR 0 25
55858: PUSH
55859: LD_INT 3
55861: PUSH
55862: LD_INT 3
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 4
55871: PUSH
55872: LD_INT 3
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 3
55881: PUSH
55882: LD_INT 4
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: LIST
55893: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55894: LD_ADDR_VAR 0 26
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: LD_INT 3
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 4
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: LD_INT 3
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: LIST
55934: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55935: LD_ADDR_VAR 0 27
55939: PUSH
55940: LD_INT 3
55942: NEG
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 4
55964: NEG
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: LIST
55978: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55979: LD_ADDR_VAR 0 28
55983: PUSH
55984: LD_INT 3
55986: NEG
55987: PUSH
55988: LD_INT 3
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 3
55998: NEG
55999: PUSH
56000: LD_INT 4
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 4
56010: NEG
56011: PUSH
56012: LD_INT 3
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: LIST
56024: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56025: LD_ADDR_VAR 0 29
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 3
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: LD_INT 4
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 4
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 3
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: LD_INT 5
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 5
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: LD_INT 4
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: LD_INT 6
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 6
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: LD_INT 5
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56180: LD_ADDR_VAR 0 30
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 3
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 3
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 3
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 4
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 4
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 4
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 5
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 5
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 5
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 6
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 6
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56323: LD_ADDR_VAR 0 31
56327: PUSH
56328: LD_INT 3
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 3
56340: PUSH
56341: LD_INT 3
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 4
56360: PUSH
56361: LD_INT 3
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 4
56370: PUSH
56371: LD_INT 4
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 3
56380: PUSH
56381: LD_INT 4
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 5
56390: PUSH
56391: LD_INT 4
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 5
56400: PUSH
56401: LD_INT 5
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 4
56410: PUSH
56411: LD_INT 5
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 6
56420: PUSH
56421: LD_INT 5
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 6
56430: PUSH
56431: LD_INT 6
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 5
56440: PUSH
56441: LD_INT 6
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56462: LD_ADDR_VAR 0 32
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: LD_INT 3
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: LD_INT 3
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 4
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 4
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 3
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 5
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 5
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 4
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: LD_INT 6
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: LD_INT 6
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: LD_INT 5
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56605: LD_ADDR_VAR 0 33
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 3
56623: NEG
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 3
56634: NEG
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 4
56657: NEG
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 4
56668: NEG
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 4
56680: NEG
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 5
56691: NEG
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 5
56702: NEG
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 5
56714: NEG
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 6
56725: NEG
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 6
56736: NEG
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56760: LD_ADDR_VAR 0 34
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: LD_INT 3
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 3
56779: NEG
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 3
56791: NEG
56792: PUSH
56793: LD_INT 3
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 3
56803: NEG
56804: PUSH
56805: LD_INT 4
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 4
56815: NEG
56816: PUSH
56817: LD_INT 3
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 4
56827: NEG
56828: PUSH
56829: LD_INT 4
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 4
56839: NEG
56840: PUSH
56841: LD_INT 5
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 5
56851: NEG
56852: PUSH
56853: LD_INT 4
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 5
56863: NEG
56864: PUSH
56865: LD_INT 5
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 5
56875: NEG
56876: PUSH
56877: LD_INT 6
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 6
56887: NEG
56888: PUSH
56889: LD_INT 5
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 6
56899: NEG
56900: PUSH
56901: LD_INT 6
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56923: LD_ADDR_VAR 0 41
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: LD_INT 3
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: LIST
56966: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56967: LD_ADDR_VAR 0 42
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 3
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: LIST
57007: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57008: LD_ADDR_VAR 0 43
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: LD_INT 2
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 3
57025: PUSH
57026: LD_INT 2
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: LIST
57047: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57048: LD_ADDR_VAR 0 44
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 2
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: LD_INT 3
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: LIST
57088: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57089: LD_ADDR_VAR 0 45
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 3
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: LIST
57132: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57133: LD_ADDR_VAR 0 46
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: LD_INT 2
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: LD_INT 3
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 3
57164: NEG
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: LIST
57178: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57179: LD_ADDR_VAR 0 47
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: LD_INT 3
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: LD_INT 3
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57212: LD_ADDR_VAR 0 48
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57243: LD_ADDR_VAR 0 49
57247: PUSH
57248: LD_INT 3
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 3
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57272: LD_ADDR_VAR 0 50
57276: PUSH
57277: LD_INT 2
57279: PUSH
57280: LD_INT 3
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 3
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57301: LD_ADDR_VAR 0 51
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57332: LD_ADDR_VAR 0 52
57336: PUSH
57337: LD_INT 3
57339: NEG
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 3
57351: NEG
57352: PUSH
57353: LD_INT 2
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57365: LD_ADDR_VAR 0 53
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 3
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: LD_INT 2
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: LIST
57408: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57409: LD_ADDR_VAR 0 54
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 3
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57450: LD_ADDR_VAR 0 55
57454: PUSH
57455: LD_INT 3
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 3
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: LD_INT 3
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: LIST
57489: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57490: LD_ADDR_VAR 0 56
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: LD_INT 3
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: LD_INT 3
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: LIST
57530: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57531: LD_ADDR_VAR 0 57
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 3
57549: NEG
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 3
57560: NEG
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: LIST
57574: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57575: LD_ADDR_VAR 0 58
57579: PUSH
57580: LD_INT 2
57582: NEG
57583: PUSH
57584: LD_INT 3
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 3
57594: NEG
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 3
57606: NEG
57607: PUSH
57608: LD_INT 3
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57621: LD_ADDR_VAR 0 59
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57665: LD_ADDR_VAR 0 60
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 2
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: LIST
57705: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57706: LD_ADDR_VAR 0 61
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: LIST
57745: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57746: LD_ADDR_VAR 0 62
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57787: LD_ADDR_VAR 0 63
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 2
57805: NEG
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 2
57816: NEG
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: LIST
57830: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57831: LD_ADDR_VAR 0 64
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 2
57850: NEG
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: LIST
57876: ST_TO_ADDR
// end ; 2 :
57877: GO 61143
57879: LD_INT 2
57881: DOUBLE
57882: EQUAL
57883: IFTRUE 57887
57885: GO 61142
57887: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57888: LD_ADDR_VAR 0 29
57892: PUSH
57893: LD_INT 4
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 4
57905: PUSH
57906: LD_INT 1
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 5
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 5
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 4
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 3
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 3
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 3
57967: PUSH
57968: LD_INT 2
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 5
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 3
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 3
57998: PUSH
57999: LD_INT 2
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 4
58008: PUSH
58009: LD_INT 3
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 4
58018: PUSH
58019: LD_INT 4
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 3
58028: PUSH
58029: LD_INT 4
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: PUSH
58039: LD_INT 3
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 2
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 4
58058: PUSH
58059: LD_INT 2
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: LD_INT 4
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: LD_INT 4
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: LD_INT 3
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: LD_INT 4
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: LD_INT 5
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: LD_INT 5
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: LD_INT 4
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: NEG
58140: PUSH
58141: LD_INT 3
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: LD_INT 5
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 3
58171: NEG
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 3
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 3
58216: NEG
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 4
58227: NEG
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 4
58238: NEG
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 4
58250: NEG
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 4
58273: NEG
58274: PUSH
58275: LD_INT 4
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 4
58285: NEG
58286: PUSH
58287: LD_INT 5
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 3
58297: NEG
58298: PUSH
58299: LD_INT 4
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 3
58309: NEG
58310: PUSH
58311: LD_INT 3
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 4
58321: NEG
58322: PUSH
58323: LD_INT 3
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 5
58333: NEG
58334: PUSH
58335: LD_INT 4
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 5
58345: NEG
58346: PUSH
58347: LD_INT 5
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 3
58357: NEG
58358: PUSH
58359: LD_INT 5
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 5
58369: NEG
58370: PUSH
58371: LD_INT 3
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58426: LD_ADDR_VAR 0 30
58430: PUSH
58431: LD_INT 4
58433: PUSH
58434: LD_INT 4
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 4
58443: PUSH
58444: LD_INT 3
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 5
58453: PUSH
58454: LD_INT 4
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 5
58463: PUSH
58464: LD_INT 5
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 4
58473: PUSH
58474: LD_INT 5
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: LD_INT 4
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 3
58493: PUSH
58494: LD_INT 3
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 5
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 3
58513: PUSH
58514: LD_INT 5
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 3
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: LD_INT 2
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: LD_INT 4
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: LD_INT 4
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: LD_INT 4
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 4
58616: NEG
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 4
58627: NEG
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 3
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 4
58661: NEG
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 5
58672: NEG
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 5
58683: NEG
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 5
58695: NEG
58696: PUSH
58697: LD_INT 2
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 3
58707: NEG
58708: PUSH
58709: LD_INT 2
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: LD_INT 3
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 3
58730: NEG
58731: PUSH
58732: LD_INT 4
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: LD_INT 3
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: LD_INT 2
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 3
58766: NEG
58767: PUSH
58768: LD_INT 2
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 4
58778: NEG
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 4
58790: NEG
58791: PUSH
58792: LD_INT 4
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: LD_INT 4
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 4
58814: NEG
58815: PUSH
58816: LD_INT 2
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: LD_INT 4
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: LD_INT 5
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 4
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: LD_INT 3
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 3
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 4
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: LD_INT 5
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 2
58905: PUSH
58906: LD_INT 3
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: LD_INT 5
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58973: LD_ADDR_VAR 0 31
58977: PUSH
58978: LD_INT 0
58980: PUSH
58981: LD_INT 4
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: LD_INT 3
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: LD_INT 4
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 5
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: LD_INT 5
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: LD_INT 4
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: LD_INT 3
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: LD_INT 5
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: LD_INT 3
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 3
59073: NEG
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 3
59084: NEG
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 3
59118: NEG
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 4
59129: NEG
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 4
59140: NEG
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 4
59152: NEG
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: LD_INT 2
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 4
59175: NEG
59176: PUSH
59177: LD_INT 4
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 4
59187: NEG
59188: PUSH
59189: LD_INT 5
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 3
59199: NEG
59200: PUSH
59201: LD_INT 4
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 3
59211: NEG
59212: PUSH
59213: LD_INT 3
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 4
59223: NEG
59224: PUSH
59225: LD_INT 3
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 5
59235: NEG
59236: PUSH
59237: LD_INT 4
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 5
59247: NEG
59248: PUSH
59249: LD_INT 5
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 3
59259: NEG
59260: PUSH
59261: LD_INT 5
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 5
59271: NEG
59272: PUSH
59273: LD_INT 3
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: LD_INT 3
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 4
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: LD_INT 3
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: LD_INT 2
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: NEG
59339: PUSH
59340: LD_INT 3
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: LD_INT 4
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 2
59362: PUSH
59363: LD_INT 2
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: NEG
59374: PUSH
59375: LD_INT 4
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 4
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 4
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 5
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 5
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 4
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 3
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 3
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 3
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 5
59468: PUSH
59469: LD_INT 2
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59523: LD_ADDR_VAR 0 32
59527: PUSH
59528: LD_INT 4
59530: NEG
59531: PUSH
59532: LD_INT 0
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 4
59541: NEG
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: NEG
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 3
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 4
59575: NEG
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 5
59586: NEG
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 5
59597: NEG
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 5
59609: NEG
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 3
59621: NEG
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 3
59632: NEG
59633: PUSH
59634: LD_INT 3
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: NEG
59645: PUSH
59646: LD_INT 4
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 2
59656: NEG
59657: PUSH
59658: LD_INT 3
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 2
59668: NEG
59669: PUSH
59670: LD_INT 2
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 3
59680: NEG
59681: PUSH
59682: LD_INT 2
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 4
59692: NEG
59693: PUSH
59694: LD_INT 3
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 4
59704: NEG
59705: PUSH
59706: LD_INT 4
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 4
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 4
59728: NEG
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 4
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 5
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: LD_INT 4
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 3
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 3
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 4
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: LD_INT 5
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: LD_INT 3
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: LD_INT 5
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 3
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 4
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 4
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 3
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 2
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 2
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 4
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 4
59935: PUSH
59936: LD_INT 4
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 4
59945: PUSH
59946: LD_INT 3
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 5
59955: PUSH
59956: LD_INT 4
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 5
59965: PUSH
59966: LD_INT 5
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 4
59975: PUSH
59976: LD_INT 5
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 3
59985: PUSH
59986: LD_INT 4
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 3
59995: PUSH
59996: LD_INT 3
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 5
60005: PUSH
60006: LD_INT 3
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 3
60015: PUSH
60016: LD_INT 5
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60070: LD_ADDR_VAR 0 33
60074: PUSH
60075: LD_INT 4
60077: NEG
60078: PUSH
60079: LD_INT 4
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 4
60089: NEG
60090: PUSH
60091: LD_INT 5
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 3
60101: NEG
60102: PUSH
60103: LD_INT 4
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 3
60113: NEG
60114: PUSH
60115: LD_INT 3
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 4
60125: NEG
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 5
60137: NEG
60138: PUSH
60139: LD_INT 4
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 5
60149: NEG
60150: PUSH
60151: LD_INT 5
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 3
60161: NEG
60162: PUSH
60163: LD_INT 5
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 5
60173: NEG
60174: PUSH
60175: LD_INT 3
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: LD_INT 3
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: LD_INT 4
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: LD_INT 3
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: LD_INT 2
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: LD_INT 3
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: LD_INT 4
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: LD_INT 2
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: LD_INT 4
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 4
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 4
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 5
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 5
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 4
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 3
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 3
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 3
60359: PUSH
60360: LD_INT 2
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 5
60370: PUSH
60371: LD_INT 2
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 3
60380: PUSH
60381: LD_INT 3
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 3
60390: PUSH
60391: LD_INT 2
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 4
60400: PUSH
60401: LD_INT 3
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 4
60410: PUSH
60411: LD_INT 4
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 3
60420: PUSH
60421: LD_INT 4
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 2
60430: PUSH
60431: LD_INT 3
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 2
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 4
60450: PUSH
60451: LD_INT 2
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: PUSH
60461: LD_INT 4
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: LD_INT 4
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: LD_INT 4
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: LD_INT 5
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 5
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: LD_INT 4
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 3
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 2
60542: PUSH
60543: LD_INT 5
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 2
60552: NEG
60553: PUSH
60554: LD_INT 3
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60608: LD_ADDR_VAR 0 34
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 4
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: LD_INT 5
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: LD_INT 4
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: LD_INT 3
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 3
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: LD_INT 4
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: LD_INT 5
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 2
60694: PUSH
60695: LD_INT 3
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 2
60705: NEG
60706: PUSH
60707: LD_INT 5
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 3
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 3
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 4
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 4
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 3
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 2
60789: PUSH
60790: LD_INT 2
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 4
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 4
60810: PUSH
60811: LD_INT 4
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 4
60820: PUSH
60821: LD_INT 3
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 5
60830: PUSH
60831: LD_INT 4
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 5
60840: PUSH
60841: LD_INT 5
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 4
60850: PUSH
60851: LD_INT 5
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 3
60860: PUSH
60861: LD_INT 4
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 3
60870: PUSH
60871: LD_INT 3
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 5
60880: PUSH
60881: LD_INT 3
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 3
60890: PUSH
60891: LD_INT 5
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: LD_INT 3
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: LD_INT 4
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 4
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: LD_INT 3
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 1
60961: NEG
60962: PUSH
60963: LD_INT 2
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 2
60972: PUSH
60973: LD_INT 4
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 2
60982: NEG
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 4
60993: NEG
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 4
61004: NEG
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 3
61016: NEG
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 3
61027: NEG
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 4
61038: NEG
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 5
61049: NEG
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 5
61060: NEG
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 5
61072: NEG
61073: PUSH
61074: LD_INT 2
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 3
61084: NEG
61085: PUSH
61086: LD_INT 2
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: ST_TO_ADDR
// end ; end ;
61140: GO 61143
61142: POP
// case btype of b_depot , b_warehouse :
61143: LD_VAR 0 1
61147: PUSH
61148: LD_INT 0
61150: DOUBLE
61151: EQUAL
61152: IFTRUE 61162
61154: LD_INT 1
61156: DOUBLE
61157: EQUAL
61158: IFTRUE 61162
61160: GO 61363
61162: POP
// case nation of nation_american :
61163: LD_VAR 0 5
61167: PUSH
61168: LD_INT 1
61170: DOUBLE
61171: EQUAL
61172: IFTRUE 61176
61174: GO 61232
61176: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61177: LD_ADDR_VAR 0 9
61181: PUSH
61182: LD_VAR 0 11
61186: PUSH
61187: LD_VAR 0 12
61191: PUSH
61192: LD_VAR 0 13
61196: PUSH
61197: LD_VAR 0 14
61201: PUSH
61202: LD_VAR 0 15
61206: PUSH
61207: LD_VAR 0 16
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: PUSH
61220: LD_VAR 0 4
61224: PUSH
61225: LD_INT 1
61227: PLUS
61228: ARRAY
61229: ST_TO_ADDR
61230: GO 61361
61232: LD_INT 2
61234: DOUBLE
61235: EQUAL
61236: IFTRUE 61240
61238: GO 61296
61240: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61241: LD_ADDR_VAR 0 9
61245: PUSH
61246: LD_VAR 0 17
61250: PUSH
61251: LD_VAR 0 18
61255: PUSH
61256: LD_VAR 0 19
61260: PUSH
61261: LD_VAR 0 20
61265: PUSH
61266: LD_VAR 0 21
61270: PUSH
61271: LD_VAR 0 22
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: PUSH
61284: LD_VAR 0 4
61288: PUSH
61289: LD_INT 1
61291: PLUS
61292: ARRAY
61293: ST_TO_ADDR
61294: GO 61361
61296: LD_INT 3
61298: DOUBLE
61299: EQUAL
61300: IFTRUE 61304
61302: GO 61360
61304: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61305: LD_ADDR_VAR 0 9
61309: PUSH
61310: LD_VAR 0 23
61314: PUSH
61315: LD_VAR 0 24
61319: PUSH
61320: LD_VAR 0 25
61324: PUSH
61325: LD_VAR 0 26
61329: PUSH
61330: LD_VAR 0 27
61334: PUSH
61335: LD_VAR 0 28
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: PUSH
61348: LD_VAR 0 4
61352: PUSH
61353: LD_INT 1
61355: PLUS
61356: ARRAY
61357: ST_TO_ADDR
61358: GO 61361
61360: POP
61361: GO 61916
61363: LD_INT 2
61365: DOUBLE
61366: EQUAL
61367: IFTRUE 61377
61369: LD_INT 3
61371: DOUBLE
61372: EQUAL
61373: IFTRUE 61377
61375: GO 61433
61377: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61378: LD_ADDR_VAR 0 9
61382: PUSH
61383: LD_VAR 0 29
61387: PUSH
61388: LD_VAR 0 30
61392: PUSH
61393: LD_VAR 0 31
61397: PUSH
61398: LD_VAR 0 32
61402: PUSH
61403: LD_VAR 0 33
61407: PUSH
61408: LD_VAR 0 34
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: PUSH
61421: LD_VAR 0 4
61425: PUSH
61426: LD_INT 1
61428: PLUS
61429: ARRAY
61430: ST_TO_ADDR
61431: GO 61916
61433: LD_INT 16
61435: DOUBLE
61436: EQUAL
61437: IFTRUE 61495
61439: LD_INT 17
61441: DOUBLE
61442: EQUAL
61443: IFTRUE 61495
61445: LD_INT 18
61447: DOUBLE
61448: EQUAL
61449: IFTRUE 61495
61451: LD_INT 19
61453: DOUBLE
61454: EQUAL
61455: IFTRUE 61495
61457: LD_INT 22
61459: DOUBLE
61460: EQUAL
61461: IFTRUE 61495
61463: LD_INT 20
61465: DOUBLE
61466: EQUAL
61467: IFTRUE 61495
61469: LD_INT 21
61471: DOUBLE
61472: EQUAL
61473: IFTRUE 61495
61475: LD_INT 23
61477: DOUBLE
61478: EQUAL
61479: IFTRUE 61495
61481: LD_INT 24
61483: DOUBLE
61484: EQUAL
61485: IFTRUE 61495
61487: LD_INT 25
61489: DOUBLE
61490: EQUAL
61491: IFTRUE 61495
61493: GO 61551
61495: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61496: LD_ADDR_VAR 0 9
61500: PUSH
61501: LD_VAR 0 35
61505: PUSH
61506: LD_VAR 0 36
61510: PUSH
61511: LD_VAR 0 37
61515: PUSH
61516: LD_VAR 0 38
61520: PUSH
61521: LD_VAR 0 39
61525: PUSH
61526: LD_VAR 0 40
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: PUSH
61539: LD_VAR 0 4
61543: PUSH
61544: LD_INT 1
61546: PLUS
61547: ARRAY
61548: ST_TO_ADDR
61549: GO 61916
61551: LD_INT 6
61553: DOUBLE
61554: EQUAL
61555: IFTRUE 61607
61557: LD_INT 7
61559: DOUBLE
61560: EQUAL
61561: IFTRUE 61607
61563: LD_INT 8
61565: DOUBLE
61566: EQUAL
61567: IFTRUE 61607
61569: LD_INT 13
61571: DOUBLE
61572: EQUAL
61573: IFTRUE 61607
61575: LD_INT 12
61577: DOUBLE
61578: EQUAL
61579: IFTRUE 61607
61581: LD_INT 15
61583: DOUBLE
61584: EQUAL
61585: IFTRUE 61607
61587: LD_INT 11
61589: DOUBLE
61590: EQUAL
61591: IFTRUE 61607
61593: LD_INT 14
61595: DOUBLE
61596: EQUAL
61597: IFTRUE 61607
61599: LD_INT 10
61601: DOUBLE
61602: EQUAL
61603: IFTRUE 61607
61605: GO 61663
61607: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61608: LD_ADDR_VAR 0 9
61612: PUSH
61613: LD_VAR 0 41
61617: PUSH
61618: LD_VAR 0 42
61622: PUSH
61623: LD_VAR 0 43
61627: PUSH
61628: LD_VAR 0 44
61632: PUSH
61633: LD_VAR 0 45
61637: PUSH
61638: LD_VAR 0 46
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: PUSH
61651: LD_VAR 0 4
61655: PUSH
61656: LD_INT 1
61658: PLUS
61659: ARRAY
61660: ST_TO_ADDR
61661: GO 61916
61663: LD_INT 36
61665: DOUBLE
61666: EQUAL
61667: IFTRUE 61671
61669: GO 61727
61671: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61672: LD_ADDR_VAR 0 9
61676: PUSH
61677: LD_VAR 0 47
61681: PUSH
61682: LD_VAR 0 48
61686: PUSH
61687: LD_VAR 0 49
61691: PUSH
61692: LD_VAR 0 50
61696: PUSH
61697: LD_VAR 0 51
61701: PUSH
61702: LD_VAR 0 52
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: PUSH
61715: LD_VAR 0 4
61719: PUSH
61720: LD_INT 1
61722: PLUS
61723: ARRAY
61724: ST_TO_ADDR
61725: GO 61916
61727: LD_INT 4
61729: DOUBLE
61730: EQUAL
61731: IFTRUE 61753
61733: LD_INT 5
61735: DOUBLE
61736: EQUAL
61737: IFTRUE 61753
61739: LD_INT 34
61741: DOUBLE
61742: EQUAL
61743: IFTRUE 61753
61745: LD_INT 37
61747: DOUBLE
61748: EQUAL
61749: IFTRUE 61753
61751: GO 61809
61753: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61754: LD_ADDR_VAR 0 9
61758: PUSH
61759: LD_VAR 0 53
61763: PUSH
61764: LD_VAR 0 54
61768: PUSH
61769: LD_VAR 0 55
61773: PUSH
61774: LD_VAR 0 56
61778: PUSH
61779: LD_VAR 0 57
61783: PUSH
61784: LD_VAR 0 58
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: PUSH
61797: LD_VAR 0 4
61801: PUSH
61802: LD_INT 1
61804: PLUS
61805: ARRAY
61806: ST_TO_ADDR
61807: GO 61916
61809: LD_INT 31
61811: DOUBLE
61812: EQUAL
61813: IFTRUE 61859
61815: LD_INT 32
61817: DOUBLE
61818: EQUAL
61819: IFTRUE 61859
61821: LD_INT 33
61823: DOUBLE
61824: EQUAL
61825: IFTRUE 61859
61827: LD_INT 27
61829: DOUBLE
61830: EQUAL
61831: IFTRUE 61859
61833: LD_INT 26
61835: DOUBLE
61836: EQUAL
61837: IFTRUE 61859
61839: LD_INT 28
61841: DOUBLE
61842: EQUAL
61843: IFTRUE 61859
61845: LD_INT 29
61847: DOUBLE
61848: EQUAL
61849: IFTRUE 61859
61851: LD_INT 30
61853: DOUBLE
61854: EQUAL
61855: IFTRUE 61859
61857: GO 61915
61859: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61860: LD_ADDR_VAR 0 9
61864: PUSH
61865: LD_VAR 0 59
61869: PUSH
61870: LD_VAR 0 60
61874: PUSH
61875: LD_VAR 0 61
61879: PUSH
61880: LD_VAR 0 62
61884: PUSH
61885: LD_VAR 0 63
61889: PUSH
61890: LD_VAR 0 64
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: PUSH
61903: LD_VAR 0 4
61907: PUSH
61908: LD_INT 1
61910: PLUS
61911: ARRAY
61912: ST_TO_ADDR
61913: GO 61916
61915: POP
// temp_list2 = [ ] ;
61916: LD_ADDR_VAR 0 10
61920: PUSH
61921: EMPTY
61922: ST_TO_ADDR
// for i in temp_list do
61923: LD_ADDR_VAR 0 8
61927: PUSH
61928: LD_VAR 0 9
61932: PUSH
61933: FOR_IN
61934: IFFALSE 61986
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61936: LD_ADDR_VAR 0 10
61940: PUSH
61941: LD_VAR 0 10
61945: PUSH
61946: LD_VAR 0 8
61950: PUSH
61951: LD_INT 1
61953: ARRAY
61954: PUSH
61955: LD_VAR 0 2
61959: PLUS
61960: PUSH
61961: LD_VAR 0 8
61965: PUSH
61966: LD_INT 2
61968: ARRAY
61969: PUSH
61970: LD_VAR 0 3
61974: PLUS
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: EMPTY
61981: LIST
61982: ADD
61983: ST_TO_ADDR
61984: GO 61933
61986: POP
61987: POP
// result = temp_list2 ;
61988: LD_ADDR_VAR 0 7
61992: PUSH
61993: LD_VAR 0 10
61997: ST_TO_ADDR
// end ;
61998: LD_VAR 0 7
62002: RET
// export function EnemyInRange ( unit , dist ) ; begin
62003: LD_INT 0
62005: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62006: LD_ADDR_VAR 0 3
62010: PUSH
62011: LD_VAR 0 1
62015: PPUSH
62016: CALL_OW 255
62020: PPUSH
62021: LD_VAR 0 1
62025: PPUSH
62026: CALL_OW 250
62030: PPUSH
62031: LD_VAR 0 1
62035: PPUSH
62036: CALL_OW 251
62040: PPUSH
62041: LD_VAR 0 2
62045: PPUSH
62046: CALL 35399 0 4
62050: PUSH
62051: LD_INT 4
62053: ARRAY
62054: ST_TO_ADDR
// end ;
62055: LD_VAR 0 3
62059: RET
// export function PlayerSeeMe ( unit ) ; begin
62060: LD_INT 0
62062: PPUSH
// result := See ( your_side , unit ) ;
62063: LD_ADDR_VAR 0 2
62067: PUSH
62068: LD_OWVAR 2
62072: PPUSH
62073: LD_VAR 0 1
62077: PPUSH
62078: CALL_OW 292
62082: ST_TO_ADDR
// end ;
62083: LD_VAR 0 2
62087: RET
// export function ReverseDir ( unit ) ; begin
62088: LD_INT 0
62090: PPUSH
// if not unit then
62091: LD_VAR 0 1
62095: NOT
62096: IFFALSE 62100
// exit ;
62098: GO 62123
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62100: LD_ADDR_VAR 0 2
62104: PUSH
62105: LD_VAR 0 1
62109: PPUSH
62110: CALL_OW 254
62114: PUSH
62115: LD_INT 3
62117: PLUS
62118: PUSH
62119: LD_INT 6
62121: MOD
62122: ST_TO_ADDR
// end ;
62123: LD_VAR 0 2
62127: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62128: LD_INT 0
62130: PPUSH
62131: PPUSH
62132: PPUSH
62133: PPUSH
62134: PPUSH
// if not hexes then
62135: LD_VAR 0 2
62139: NOT
62140: IFFALSE 62144
// exit ;
62142: GO 62292
// dist := 9999 ;
62144: LD_ADDR_VAR 0 5
62148: PUSH
62149: LD_INT 9999
62151: ST_TO_ADDR
// for i = 1 to hexes do
62152: LD_ADDR_VAR 0 4
62156: PUSH
62157: DOUBLE
62158: LD_INT 1
62160: DEC
62161: ST_TO_ADDR
62162: LD_VAR 0 2
62166: PUSH
62167: FOR_TO
62168: IFFALSE 62280
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62170: LD_VAR 0 1
62174: PPUSH
62175: LD_VAR 0 2
62179: PUSH
62180: LD_VAR 0 4
62184: ARRAY
62185: PUSH
62186: LD_INT 1
62188: ARRAY
62189: PPUSH
62190: LD_VAR 0 2
62194: PUSH
62195: LD_VAR 0 4
62199: ARRAY
62200: PUSH
62201: LD_INT 2
62203: ARRAY
62204: PPUSH
62205: CALL_OW 297
62209: PUSH
62210: LD_VAR 0 5
62214: LESS
62215: IFFALSE 62278
// begin hex := hexes [ i ] ;
62217: LD_ADDR_VAR 0 7
62221: PUSH
62222: LD_VAR 0 2
62226: PUSH
62227: LD_VAR 0 4
62231: ARRAY
62232: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62233: LD_ADDR_VAR 0 5
62237: PUSH
62238: LD_VAR 0 1
62242: PPUSH
62243: LD_VAR 0 2
62247: PUSH
62248: LD_VAR 0 4
62252: ARRAY
62253: PUSH
62254: LD_INT 1
62256: ARRAY
62257: PPUSH
62258: LD_VAR 0 2
62262: PUSH
62263: LD_VAR 0 4
62267: ARRAY
62268: PUSH
62269: LD_INT 2
62271: ARRAY
62272: PPUSH
62273: CALL_OW 297
62277: ST_TO_ADDR
// end ; end ;
62278: GO 62167
62280: POP
62281: POP
// result := hex ;
62282: LD_ADDR_VAR 0 3
62286: PUSH
62287: LD_VAR 0 7
62291: ST_TO_ADDR
// end ;
62292: LD_VAR 0 3
62296: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62297: LD_INT 0
62299: PPUSH
62300: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62301: LD_VAR 0 1
62305: NOT
62306: PUSH
62307: LD_VAR 0 1
62311: PUSH
62312: LD_INT 21
62314: PUSH
62315: LD_INT 2
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 23
62324: PUSH
62325: LD_INT 2
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PPUSH
62336: CALL_OW 69
62340: IN
62341: NOT
62342: OR
62343: IFFALSE 62347
// exit ;
62345: GO 62394
// for i = 1 to 3 do
62347: LD_ADDR_VAR 0 3
62351: PUSH
62352: DOUBLE
62353: LD_INT 1
62355: DEC
62356: ST_TO_ADDR
62357: LD_INT 3
62359: PUSH
62360: FOR_TO
62361: IFFALSE 62392
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62363: LD_VAR 0 1
62367: PPUSH
62368: CALL_OW 250
62372: PPUSH
62373: LD_VAR 0 1
62377: PPUSH
62378: CALL_OW 251
62382: PPUSH
62383: LD_INT 1
62385: PPUSH
62386: CALL_OW 453
62390: GO 62360
62392: POP
62393: POP
// end ;
62394: LD_VAR 0 2
62398: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62399: LD_INT 0
62401: PPUSH
62402: PPUSH
62403: PPUSH
62404: PPUSH
62405: PPUSH
62406: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62407: LD_VAR 0 1
62411: NOT
62412: PUSH
62413: LD_VAR 0 2
62417: NOT
62418: OR
62419: PUSH
62420: LD_VAR 0 1
62424: PPUSH
62425: CALL_OW 314
62429: OR
62430: IFFALSE 62434
// exit ;
62432: GO 62875
// x := GetX ( enemy_unit ) ;
62434: LD_ADDR_VAR 0 7
62438: PUSH
62439: LD_VAR 0 2
62443: PPUSH
62444: CALL_OW 250
62448: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62449: LD_ADDR_VAR 0 8
62453: PUSH
62454: LD_VAR 0 2
62458: PPUSH
62459: CALL_OW 251
62463: ST_TO_ADDR
// if not x or not y then
62464: LD_VAR 0 7
62468: NOT
62469: PUSH
62470: LD_VAR 0 8
62474: NOT
62475: OR
62476: IFFALSE 62480
// exit ;
62478: GO 62875
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62480: LD_ADDR_VAR 0 6
62484: PUSH
62485: LD_VAR 0 7
62489: PPUSH
62490: LD_INT 0
62492: PPUSH
62493: LD_INT 4
62495: PPUSH
62496: CALL_OW 272
62500: PUSH
62501: LD_VAR 0 8
62505: PPUSH
62506: LD_INT 0
62508: PPUSH
62509: LD_INT 4
62511: PPUSH
62512: CALL_OW 273
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_VAR 0 7
62525: PPUSH
62526: LD_INT 1
62528: PPUSH
62529: LD_INT 4
62531: PPUSH
62532: CALL_OW 272
62536: PUSH
62537: LD_VAR 0 8
62541: PPUSH
62542: LD_INT 1
62544: PPUSH
62545: LD_INT 4
62547: PPUSH
62548: CALL_OW 273
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_VAR 0 7
62561: PPUSH
62562: LD_INT 2
62564: PPUSH
62565: LD_INT 4
62567: PPUSH
62568: CALL_OW 272
62572: PUSH
62573: LD_VAR 0 8
62577: PPUSH
62578: LD_INT 2
62580: PPUSH
62581: LD_INT 4
62583: PPUSH
62584: CALL_OW 273
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_VAR 0 7
62597: PPUSH
62598: LD_INT 3
62600: PPUSH
62601: LD_INT 4
62603: PPUSH
62604: CALL_OW 272
62608: PUSH
62609: LD_VAR 0 8
62613: PPUSH
62614: LD_INT 3
62616: PPUSH
62617: LD_INT 4
62619: PPUSH
62620: CALL_OW 273
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_VAR 0 7
62633: PPUSH
62634: LD_INT 4
62636: PPUSH
62637: LD_INT 4
62639: PPUSH
62640: CALL_OW 272
62644: PUSH
62645: LD_VAR 0 8
62649: PPUSH
62650: LD_INT 4
62652: PPUSH
62653: LD_INT 4
62655: PPUSH
62656: CALL_OW 273
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_VAR 0 7
62669: PPUSH
62670: LD_INT 5
62672: PPUSH
62673: LD_INT 4
62675: PPUSH
62676: CALL_OW 272
62680: PUSH
62681: LD_VAR 0 8
62685: PPUSH
62686: LD_INT 5
62688: PPUSH
62689: LD_INT 4
62691: PPUSH
62692: CALL_OW 273
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: ST_TO_ADDR
// for i = tmp downto 1 do
62709: LD_ADDR_VAR 0 4
62713: PUSH
62714: DOUBLE
62715: LD_VAR 0 6
62719: INC
62720: ST_TO_ADDR
62721: LD_INT 1
62723: PUSH
62724: FOR_DOWNTO
62725: IFFALSE 62826
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62727: LD_VAR 0 6
62731: PUSH
62732: LD_VAR 0 4
62736: ARRAY
62737: PUSH
62738: LD_INT 1
62740: ARRAY
62741: PPUSH
62742: LD_VAR 0 6
62746: PUSH
62747: LD_VAR 0 4
62751: ARRAY
62752: PUSH
62753: LD_INT 2
62755: ARRAY
62756: PPUSH
62757: CALL_OW 488
62761: NOT
62762: PUSH
62763: LD_VAR 0 6
62767: PUSH
62768: LD_VAR 0 4
62772: ARRAY
62773: PUSH
62774: LD_INT 1
62776: ARRAY
62777: PPUSH
62778: LD_VAR 0 6
62782: PUSH
62783: LD_VAR 0 4
62787: ARRAY
62788: PUSH
62789: LD_INT 2
62791: ARRAY
62792: PPUSH
62793: CALL_OW 428
62797: PUSH
62798: LD_INT 0
62800: NONEQUAL
62801: OR
62802: IFFALSE 62824
// tmp := Delete ( tmp , i ) ;
62804: LD_ADDR_VAR 0 6
62808: PUSH
62809: LD_VAR 0 6
62813: PPUSH
62814: LD_VAR 0 4
62818: PPUSH
62819: CALL_OW 3
62823: ST_TO_ADDR
62824: GO 62724
62826: POP
62827: POP
// j := GetClosestHex ( unit , tmp ) ;
62828: LD_ADDR_VAR 0 5
62832: PUSH
62833: LD_VAR 0 1
62837: PPUSH
62838: LD_VAR 0 6
62842: PPUSH
62843: CALL 62128 0 2
62847: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62848: LD_VAR 0 1
62852: PPUSH
62853: LD_VAR 0 5
62857: PUSH
62858: LD_INT 1
62860: ARRAY
62861: PPUSH
62862: LD_VAR 0 5
62866: PUSH
62867: LD_INT 2
62869: ARRAY
62870: PPUSH
62871: CALL_OW 111
// end ;
62875: LD_VAR 0 3
62879: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62880: LD_INT 0
62882: PPUSH
62883: PPUSH
62884: PPUSH
// uc_side = 0 ;
62885: LD_ADDR_OWVAR 20
62889: PUSH
62890: LD_INT 0
62892: ST_TO_ADDR
// uc_nation = 0 ;
62893: LD_ADDR_OWVAR 21
62897: PUSH
62898: LD_INT 0
62900: ST_TO_ADDR
// InitHc_All ( ) ;
62901: CALL_OW 584
// InitVc ;
62905: CALL_OW 20
// if mastodonts then
62909: LD_VAR 0 6
62913: IFFALSE 62980
// for i = 1 to mastodonts do
62915: LD_ADDR_VAR 0 11
62919: PUSH
62920: DOUBLE
62921: LD_INT 1
62923: DEC
62924: ST_TO_ADDR
62925: LD_VAR 0 6
62929: PUSH
62930: FOR_TO
62931: IFFALSE 62978
// begin vc_chassis := 31 ;
62933: LD_ADDR_OWVAR 37
62937: PUSH
62938: LD_INT 31
62940: ST_TO_ADDR
// vc_control := control_rider ;
62941: LD_ADDR_OWVAR 38
62945: PUSH
62946: LD_INT 4
62948: ST_TO_ADDR
// animal := CreateVehicle ;
62949: LD_ADDR_VAR 0 12
62953: PUSH
62954: CALL_OW 45
62958: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62959: LD_VAR 0 12
62963: PPUSH
62964: LD_VAR 0 8
62968: PPUSH
62969: LD_INT 0
62971: PPUSH
62972: CALL 65115 0 3
// end ;
62976: GO 62930
62978: POP
62979: POP
// if horses then
62980: LD_VAR 0 5
62984: IFFALSE 63051
// for i = 1 to horses do
62986: LD_ADDR_VAR 0 11
62990: PUSH
62991: DOUBLE
62992: LD_INT 1
62994: DEC
62995: ST_TO_ADDR
62996: LD_VAR 0 5
63000: PUSH
63001: FOR_TO
63002: IFFALSE 63049
// begin hc_class := 21 ;
63004: LD_ADDR_OWVAR 28
63008: PUSH
63009: LD_INT 21
63011: ST_TO_ADDR
// hc_gallery :=  ;
63012: LD_ADDR_OWVAR 33
63016: PUSH
63017: LD_STRING 
63019: ST_TO_ADDR
// animal := CreateHuman ;
63020: LD_ADDR_VAR 0 12
63024: PUSH
63025: CALL_OW 44
63029: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63030: LD_VAR 0 12
63034: PPUSH
63035: LD_VAR 0 8
63039: PPUSH
63040: LD_INT 0
63042: PPUSH
63043: CALL 65115 0 3
// end ;
63047: GO 63001
63049: POP
63050: POP
// if birds then
63051: LD_VAR 0 1
63055: IFFALSE 63122
// for i = 1 to birds do
63057: LD_ADDR_VAR 0 11
63061: PUSH
63062: DOUBLE
63063: LD_INT 1
63065: DEC
63066: ST_TO_ADDR
63067: LD_VAR 0 1
63071: PUSH
63072: FOR_TO
63073: IFFALSE 63120
// begin hc_class = 18 ;
63075: LD_ADDR_OWVAR 28
63079: PUSH
63080: LD_INT 18
63082: ST_TO_ADDR
// hc_gallery =  ;
63083: LD_ADDR_OWVAR 33
63087: PUSH
63088: LD_STRING 
63090: ST_TO_ADDR
// animal := CreateHuman ;
63091: LD_ADDR_VAR 0 12
63095: PUSH
63096: CALL_OW 44
63100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63101: LD_VAR 0 12
63105: PPUSH
63106: LD_VAR 0 8
63110: PPUSH
63111: LD_INT 0
63113: PPUSH
63114: CALL 65115 0 3
// end ;
63118: GO 63072
63120: POP
63121: POP
// if tigers then
63122: LD_VAR 0 2
63126: IFFALSE 63210
// for i = 1 to tigers do
63128: LD_ADDR_VAR 0 11
63132: PUSH
63133: DOUBLE
63134: LD_INT 1
63136: DEC
63137: ST_TO_ADDR
63138: LD_VAR 0 2
63142: PUSH
63143: FOR_TO
63144: IFFALSE 63208
// begin hc_class = class_tiger ;
63146: LD_ADDR_OWVAR 28
63150: PUSH
63151: LD_INT 14
63153: ST_TO_ADDR
// hc_gallery =  ;
63154: LD_ADDR_OWVAR 33
63158: PUSH
63159: LD_STRING 
63161: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63162: LD_ADDR_OWVAR 35
63166: PUSH
63167: LD_INT 7
63169: NEG
63170: PPUSH
63171: LD_INT 7
63173: PPUSH
63174: CALL_OW 12
63178: ST_TO_ADDR
// animal := CreateHuman ;
63179: LD_ADDR_VAR 0 12
63183: PUSH
63184: CALL_OW 44
63188: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63189: LD_VAR 0 12
63193: PPUSH
63194: LD_VAR 0 8
63198: PPUSH
63199: LD_INT 0
63201: PPUSH
63202: CALL 65115 0 3
// end ;
63206: GO 63143
63208: POP
63209: POP
// if apemans then
63210: LD_VAR 0 3
63214: IFFALSE 63337
// for i = 1 to apemans do
63216: LD_ADDR_VAR 0 11
63220: PUSH
63221: DOUBLE
63222: LD_INT 1
63224: DEC
63225: ST_TO_ADDR
63226: LD_VAR 0 3
63230: PUSH
63231: FOR_TO
63232: IFFALSE 63335
// begin hc_class = class_apeman ;
63234: LD_ADDR_OWVAR 28
63238: PUSH
63239: LD_INT 12
63241: ST_TO_ADDR
// hc_gallery =  ;
63242: LD_ADDR_OWVAR 33
63246: PUSH
63247: LD_STRING 
63249: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63250: LD_ADDR_OWVAR 35
63254: PUSH
63255: LD_INT 2
63257: NEG
63258: PPUSH
63259: LD_INT 2
63261: PPUSH
63262: CALL_OW 12
63266: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63267: LD_ADDR_OWVAR 31
63271: PUSH
63272: LD_INT 1
63274: PPUSH
63275: LD_INT 3
63277: PPUSH
63278: CALL_OW 12
63282: PUSH
63283: LD_INT 1
63285: PPUSH
63286: LD_INT 3
63288: PPUSH
63289: CALL_OW 12
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: ST_TO_ADDR
// animal := CreateHuman ;
63306: LD_ADDR_VAR 0 12
63310: PUSH
63311: CALL_OW 44
63315: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63316: LD_VAR 0 12
63320: PPUSH
63321: LD_VAR 0 8
63325: PPUSH
63326: LD_INT 0
63328: PPUSH
63329: CALL 65115 0 3
// end ;
63333: GO 63231
63335: POP
63336: POP
// if enchidnas then
63337: LD_VAR 0 4
63341: IFFALSE 63408
// for i = 1 to enchidnas do
63343: LD_ADDR_VAR 0 11
63347: PUSH
63348: DOUBLE
63349: LD_INT 1
63351: DEC
63352: ST_TO_ADDR
63353: LD_VAR 0 4
63357: PUSH
63358: FOR_TO
63359: IFFALSE 63406
// begin hc_class = 13 ;
63361: LD_ADDR_OWVAR 28
63365: PUSH
63366: LD_INT 13
63368: ST_TO_ADDR
// hc_gallery =  ;
63369: LD_ADDR_OWVAR 33
63373: PUSH
63374: LD_STRING 
63376: ST_TO_ADDR
// animal := CreateHuman ;
63377: LD_ADDR_VAR 0 12
63381: PUSH
63382: CALL_OW 44
63386: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63387: LD_VAR 0 12
63391: PPUSH
63392: LD_VAR 0 8
63396: PPUSH
63397: LD_INT 0
63399: PPUSH
63400: CALL 65115 0 3
// end ;
63404: GO 63358
63406: POP
63407: POP
// if fishes then
63408: LD_VAR 0 7
63412: IFFALSE 63479
// for i = 1 to fishes do
63414: LD_ADDR_VAR 0 11
63418: PUSH
63419: DOUBLE
63420: LD_INT 1
63422: DEC
63423: ST_TO_ADDR
63424: LD_VAR 0 7
63428: PUSH
63429: FOR_TO
63430: IFFALSE 63477
// begin hc_class = 20 ;
63432: LD_ADDR_OWVAR 28
63436: PUSH
63437: LD_INT 20
63439: ST_TO_ADDR
// hc_gallery =  ;
63440: LD_ADDR_OWVAR 33
63444: PUSH
63445: LD_STRING 
63447: ST_TO_ADDR
// animal := CreateHuman ;
63448: LD_ADDR_VAR 0 12
63452: PUSH
63453: CALL_OW 44
63457: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63458: LD_VAR 0 12
63462: PPUSH
63463: LD_VAR 0 9
63467: PPUSH
63468: LD_INT 0
63470: PPUSH
63471: CALL 65115 0 3
// end ;
63475: GO 63429
63477: POP
63478: POP
// end ;
63479: LD_VAR 0 10
63483: RET
// export function WantHeal ( sci , unit ) ; begin
63484: LD_INT 0
63486: PPUSH
// if GetTaskList ( sci ) > 0 then
63487: LD_VAR 0 1
63491: PPUSH
63492: CALL_OW 437
63496: PUSH
63497: LD_INT 0
63499: GREATER
63500: IFFALSE 63570
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63502: LD_VAR 0 1
63506: PPUSH
63507: CALL_OW 437
63511: PUSH
63512: LD_INT 1
63514: ARRAY
63515: PUSH
63516: LD_INT 1
63518: ARRAY
63519: PUSH
63520: LD_STRING l
63522: EQUAL
63523: PUSH
63524: LD_VAR 0 1
63528: PPUSH
63529: CALL_OW 437
63533: PUSH
63534: LD_INT 1
63536: ARRAY
63537: PUSH
63538: LD_INT 4
63540: ARRAY
63541: PUSH
63542: LD_VAR 0 2
63546: EQUAL
63547: AND
63548: IFFALSE 63560
// result := true else
63550: LD_ADDR_VAR 0 3
63554: PUSH
63555: LD_INT 1
63557: ST_TO_ADDR
63558: GO 63568
// result := false ;
63560: LD_ADDR_VAR 0 3
63564: PUSH
63565: LD_INT 0
63567: ST_TO_ADDR
// end else
63568: GO 63578
// result := false ;
63570: LD_ADDR_VAR 0 3
63574: PUSH
63575: LD_INT 0
63577: ST_TO_ADDR
// end ;
63578: LD_VAR 0 3
63582: RET
// export function HealTarget ( sci ) ; begin
63583: LD_INT 0
63585: PPUSH
// if not sci then
63586: LD_VAR 0 1
63590: NOT
63591: IFFALSE 63595
// exit ;
63593: GO 63660
// result := 0 ;
63595: LD_ADDR_VAR 0 2
63599: PUSH
63600: LD_INT 0
63602: ST_TO_ADDR
// if GetTaskList ( sci ) then
63603: LD_VAR 0 1
63607: PPUSH
63608: CALL_OW 437
63612: IFFALSE 63660
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63614: LD_VAR 0 1
63618: PPUSH
63619: CALL_OW 437
63623: PUSH
63624: LD_INT 1
63626: ARRAY
63627: PUSH
63628: LD_INT 1
63630: ARRAY
63631: PUSH
63632: LD_STRING l
63634: EQUAL
63635: IFFALSE 63660
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63637: LD_ADDR_VAR 0 2
63641: PUSH
63642: LD_VAR 0 1
63646: PPUSH
63647: CALL_OW 437
63651: PUSH
63652: LD_INT 1
63654: ARRAY
63655: PUSH
63656: LD_INT 4
63658: ARRAY
63659: ST_TO_ADDR
// end ;
63660: LD_VAR 0 2
63664: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63665: LD_INT 0
63667: PPUSH
63668: PPUSH
63669: PPUSH
63670: PPUSH
// if not base_units then
63671: LD_VAR 0 1
63675: NOT
63676: IFFALSE 63680
// exit ;
63678: GO 63767
// result := false ;
63680: LD_ADDR_VAR 0 2
63684: PUSH
63685: LD_INT 0
63687: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63688: LD_ADDR_VAR 0 5
63692: PUSH
63693: LD_VAR 0 1
63697: PPUSH
63698: LD_INT 21
63700: PUSH
63701: LD_INT 3
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PPUSH
63708: CALL_OW 72
63712: ST_TO_ADDR
// if not tmp then
63713: LD_VAR 0 5
63717: NOT
63718: IFFALSE 63722
// exit ;
63720: GO 63767
// for i in tmp do
63722: LD_ADDR_VAR 0 3
63726: PUSH
63727: LD_VAR 0 5
63731: PUSH
63732: FOR_IN
63733: IFFALSE 63765
// begin result := EnemyInRange ( i , 22 ) ;
63735: LD_ADDR_VAR 0 2
63739: PUSH
63740: LD_VAR 0 3
63744: PPUSH
63745: LD_INT 22
63747: PPUSH
63748: CALL 62003 0 2
63752: ST_TO_ADDR
// if result then
63753: LD_VAR 0 2
63757: IFFALSE 63763
// exit ;
63759: POP
63760: POP
63761: GO 63767
// end ;
63763: GO 63732
63765: POP
63766: POP
// end ;
63767: LD_VAR 0 2
63771: RET
// export function FilterByTag ( units , tag ) ; begin
63772: LD_INT 0
63774: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63775: LD_ADDR_VAR 0 3
63779: PUSH
63780: LD_VAR 0 1
63784: PPUSH
63785: LD_INT 120
63787: PUSH
63788: LD_VAR 0 2
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PPUSH
63797: CALL_OW 72
63801: ST_TO_ADDR
// end ;
63802: LD_VAR 0 3
63806: RET
// export function IsDriver ( un ) ; begin
63807: LD_INT 0
63809: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63810: LD_ADDR_VAR 0 2
63814: PUSH
63815: LD_VAR 0 1
63819: PUSH
63820: LD_INT 55
63822: PUSH
63823: EMPTY
63824: LIST
63825: PPUSH
63826: CALL_OW 69
63830: IN
63831: ST_TO_ADDR
// end ;
63832: LD_VAR 0 2
63836: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63837: LD_INT 0
63839: PPUSH
63840: PPUSH
// list := [ ] ;
63841: LD_ADDR_VAR 0 5
63845: PUSH
63846: EMPTY
63847: ST_TO_ADDR
// case d of 0 :
63848: LD_VAR 0 3
63852: PUSH
63853: LD_INT 0
63855: DOUBLE
63856: EQUAL
63857: IFTRUE 63861
63859: GO 63994
63861: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63862: LD_ADDR_VAR 0 5
63866: PUSH
63867: LD_VAR 0 1
63871: PUSH
63872: LD_INT 4
63874: MINUS
63875: PUSH
63876: LD_VAR 0 2
63880: PUSH
63881: LD_INT 4
63883: MINUS
63884: PUSH
63885: LD_INT 2
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: LIST
63892: PUSH
63893: LD_VAR 0 1
63897: PUSH
63898: LD_INT 3
63900: MINUS
63901: PUSH
63902: LD_VAR 0 2
63906: PUSH
63907: LD_INT 1
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: LIST
63914: PUSH
63915: LD_VAR 0 1
63919: PUSH
63920: LD_INT 4
63922: PLUS
63923: PUSH
63924: LD_VAR 0 2
63928: PUSH
63929: LD_INT 4
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: LIST
63936: PUSH
63937: LD_VAR 0 1
63941: PUSH
63942: LD_INT 3
63944: PLUS
63945: PUSH
63946: LD_VAR 0 2
63950: PUSH
63951: LD_INT 3
63953: PLUS
63954: PUSH
63955: LD_INT 5
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: LIST
63962: PUSH
63963: LD_VAR 0 1
63967: PUSH
63968: LD_VAR 0 2
63972: PUSH
63973: LD_INT 4
63975: PLUS
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: LIST
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: ST_TO_ADDR
// end ; 1 :
63992: GO 64692
63994: LD_INT 1
63996: DOUBLE
63997: EQUAL
63998: IFTRUE 64002
64000: GO 64135
64002: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64003: LD_ADDR_VAR 0 5
64007: PUSH
64008: LD_VAR 0 1
64012: PUSH
64013: LD_VAR 0 2
64017: PUSH
64018: LD_INT 4
64020: MINUS
64021: PUSH
64022: LD_INT 3
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: LIST
64029: PUSH
64030: LD_VAR 0 1
64034: PUSH
64035: LD_INT 3
64037: MINUS
64038: PUSH
64039: LD_VAR 0 2
64043: PUSH
64044: LD_INT 3
64046: MINUS
64047: PUSH
64048: LD_INT 2
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: LIST
64055: PUSH
64056: LD_VAR 0 1
64060: PUSH
64061: LD_INT 4
64063: MINUS
64064: PUSH
64065: LD_VAR 0 2
64069: PUSH
64070: LD_INT 1
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: LIST
64077: PUSH
64078: LD_VAR 0 1
64082: PUSH
64083: LD_VAR 0 2
64087: PUSH
64088: LD_INT 3
64090: PLUS
64091: PUSH
64092: LD_INT 0
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: LIST
64099: PUSH
64100: LD_VAR 0 1
64104: PUSH
64105: LD_INT 4
64107: PLUS
64108: PUSH
64109: LD_VAR 0 2
64113: PUSH
64114: LD_INT 4
64116: PLUS
64117: PUSH
64118: LD_INT 5
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: LIST
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: ST_TO_ADDR
// end ; 2 :
64133: GO 64692
64135: LD_INT 2
64137: DOUBLE
64138: EQUAL
64139: IFTRUE 64143
64141: GO 64272
64143: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64144: LD_ADDR_VAR 0 5
64148: PUSH
64149: LD_VAR 0 1
64153: PUSH
64154: LD_VAR 0 2
64158: PUSH
64159: LD_INT 3
64161: MINUS
64162: PUSH
64163: LD_INT 3
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: LIST
64170: PUSH
64171: LD_VAR 0 1
64175: PUSH
64176: LD_INT 4
64178: PLUS
64179: PUSH
64180: LD_VAR 0 2
64184: PUSH
64185: LD_INT 4
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: LIST
64192: PUSH
64193: LD_VAR 0 1
64197: PUSH
64198: LD_VAR 0 2
64202: PUSH
64203: LD_INT 4
64205: PLUS
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: LIST
64214: PUSH
64215: LD_VAR 0 1
64219: PUSH
64220: LD_INT 3
64222: MINUS
64223: PUSH
64224: LD_VAR 0 2
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: LIST
64236: PUSH
64237: LD_VAR 0 1
64241: PUSH
64242: LD_INT 4
64244: MINUS
64245: PUSH
64246: LD_VAR 0 2
64250: PUSH
64251: LD_INT 4
64253: MINUS
64254: PUSH
64255: LD_INT 2
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: LIST
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: ST_TO_ADDR
// end ; 3 :
64270: GO 64692
64272: LD_INT 3
64274: DOUBLE
64275: EQUAL
64276: IFTRUE 64280
64278: GO 64413
64280: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64281: LD_ADDR_VAR 0 5
64285: PUSH
64286: LD_VAR 0 1
64290: PUSH
64291: LD_INT 3
64293: PLUS
64294: PUSH
64295: LD_VAR 0 2
64299: PUSH
64300: LD_INT 4
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: LIST
64307: PUSH
64308: LD_VAR 0 1
64312: PUSH
64313: LD_INT 4
64315: PLUS
64316: PUSH
64317: LD_VAR 0 2
64321: PUSH
64322: LD_INT 4
64324: PLUS
64325: PUSH
64326: LD_INT 5
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: LIST
64333: PUSH
64334: LD_VAR 0 1
64338: PUSH
64339: LD_INT 4
64341: MINUS
64342: PUSH
64343: LD_VAR 0 2
64347: PUSH
64348: LD_INT 1
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: LIST
64355: PUSH
64356: LD_VAR 0 1
64360: PUSH
64361: LD_VAR 0 2
64365: PUSH
64366: LD_INT 4
64368: MINUS
64369: PUSH
64370: LD_INT 3
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: LIST
64377: PUSH
64378: LD_VAR 0 1
64382: PUSH
64383: LD_INT 3
64385: MINUS
64386: PUSH
64387: LD_VAR 0 2
64391: PUSH
64392: LD_INT 3
64394: MINUS
64395: PUSH
64396: LD_INT 2
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: LIST
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: ST_TO_ADDR
// end ; 4 :
64411: GO 64692
64413: LD_INT 4
64415: DOUBLE
64416: EQUAL
64417: IFTRUE 64421
64419: GO 64554
64421: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64422: LD_ADDR_VAR 0 5
64426: PUSH
64427: LD_VAR 0 1
64431: PUSH
64432: LD_VAR 0 2
64436: PUSH
64437: LD_INT 4
64439: PLUS
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: LIST
64448: PUSH
64449: LD_VAR 0 1
64453: PUSH
64454: LD_INT 3
64456: PLUS
64457: PUSH
64458: LD_VAR 0 2
64462: PUSH
64463: LD_INT 3
64465: PLUS
64466: PUSH
64467: LD_INT 5
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: LIST
64474: PUSH
64475: LD_VAR 0 1
64479: PUSH
64480: LD_INT 4
64482: PLUS
64483: PUSH
64484: LD_VAR 0 2
64488: PUSH
64489: LD_INT 4
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: LIST
64496: PUSH
64497: LD_VAR 0 1
64501: PUSH
64502: LD_VAR 0 2
64506: PUSH
64507: LD_INT 3
64509: MINUS
64510: PUSH
64511: LD_INT 3
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: LIST
64518: PUSH
64519: LD_VAR 0 1
64523: PUSH
64524: LD_INT 4
64526: MINUS
64527: PUSH
64528: LD_VAR 0 2
64532: PUSH
64533: LD_INT 4
64535: MINUS
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: LIST
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: ST_TO_ADDR
// end ; 5 :
64552: GO 64692
64554: LD_INT 5
64556: DOUBLE
64557: EQUAL
64558: IFTRUE 64562
64560: GO 64691
64562: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64563: LD_ADDR_VAR 0 5
64567: PUSH
64568: LD_VAR 0 1
64572: PUSH
64573: LD_INT 4
64575: MINUS
64576: PUSH
64577: LD_VAR 0 2
64581: PUSH
64582: LD_INT 1
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: LIST
64589: PUSH
64590: LD_VAR 0 1
64594: PUSH
64595: LD_VAR 0 2
64599: PUSH
64600: LD_INT 4
64602: MINUS
64603: PUSH
64604: LD_INT 3
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: LIST
64611: PUSH
64612: LD_VAR 0 1
64616: PUSH
64617: LD_INT 4
64619: PLUS
64620: PUSH
64621: LD_VAR 0 2
64625: PUSH
64626: LD_INT 4
64628: PLUS
64629: PUSH
64630: LD_INT 5
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: LIST
64637: PUSH
64638: LD_VAR 0 1
64642: PUSH
64643: LD_INT 3
64645: PLUS
64646: PUSH
64647: LD_VAR 0 2
64651: PUSH
64652: LD_INT 4
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: LIST
64659: PUSH
64660: LD_VAR 0 1
64664: PUSH
64665: LD_VAR 0 2
64669: PUSH
64670: LD_INT 3
64672: PLUS
64673: PUSH
64674: LD_INT 0
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: LIST
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: ST_TO_ADDR
// end ; end ;
64689: GO 64692
64691: POP
// result := list ;
64692: LD_ADDR_VAR 0 4
64696: PUSH
64697: LD_VAR 0 5
64701: ST_TO_ADDR
// end ;
64702: LD_VAR 0 4
64706: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64707: LD_INT 0
64709: PPUSH
64710: PPUSH
64711: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64712: LD_VAR 0 1
64716: NOT
64717: PUSH
64718: LD_VAR 0 2
64722: PUSH
64723: LD_INT 1
64725: PUSH
64726: LD_INT 2
64728: PUSH
64729: LD_INT 3
64731: PUSH
64732: LD_INT 4
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: IN
64741: NOT
64742: OR
64743: IFFALSE 64747
// exit ;
64745: GO 64839
// tmp := [ ] ;
64747: LD_ADDR_VAR 0 5
64751: PUSH
64752: EMPTY
64753: ST_TO_ADDR
// for i in units do
64754: LD_ADDR_VAR 0 4
64758: PUSH
64759: LD_VAR 0 1
64763: PUSH
64764: FOR_IN
64765: IFFALSE 64808
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64767: LD_ADDR_VAR 0 5
64771: PUSH
64772: LD_VAR 0 5
64776: PPUSH
64777: LD_VAR 0 5
64781: PUSH
64782: LD_INT 1
64784: PLUS
64785: PPUSH
64786: LD_VAR 0 4
64790: PPUSH
64791: LD_VAR 0 2
64795: PPUSH
64796: CALL_OW 259
64800: PPUSH
64801: CALL_OW 2
64805: ST_TO_ADDR
64806: GO 64764
64808: POP
64809: POP
// if not tmp then
64810: LD_VAR 0 5
64814: NOT
64815: IFFALSE 64819
// exit ;
64817: GO 64839
// result := SortListByListDesc ( units , tmp ) ;
64819: LD_ADDR_VAR 0 3
64823: PUSH
64824: LD_VAR 0 1
64828: PPUSH
64829: LD_VAR 0 5
64833: PPUSH
64834: CALL_OW 77
64838: ST_TO_ADDR
// end ;
64839: LD_VAR 0 3
64843: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64844: LD_INT 0
64846: PPUSH
64847: PPUSH
64848: PPUSH
// result := false ;
64849: LD_ADDR_VAR 0 3
64853: PUSH
64854: LD_INT 0
64856: ST_TO_ADDR
// x := GetX ( building ) ;
64857: LD_ADDR_VAR 0 4
64861: PUSH
64862: LD_VAR 0 2
64866: PPUSH
64867: CALL_OW 250
64871: ST_TO_ADDR
// y := GetY ( building ) ;
64872: LD_ADDR_VAR 0 5
64876: PUSH
64877: LD_VAR 0 2
64881: PPUSH
64882: CALL_OW 251
64886: ST_TO_ADDR
// if not building or not x or not y then
64887: LD_VAR 0 2
64891: NOT
64892: PUSH
64893: LD_VAR 0 4
64897: NOT
64898: OR
64899: PUSH
64900: LD_VAR 0 5
64904: NOT
64905: OR
64906: IFFALSE 64910
// exit ;
64908: GO 65002
// if GetTaskList ( unit ) then
64910: LD_VAR 0 1
64914: PPUSH
64915: CALL_OW 437
64919: IFFALSE 65002
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64921: LD_STRING e
64923: PUSH
64924: LD_VAR 0 1
64928: PPUSH
64929: CALL_OW 437
64933: PUSH
64934: LD_INT 1
64936: ARRAY
64937: PUSH
64938: LD_INT 1
64940: ARRAY
64941: EQUAL
64942: PUSH
64943: LD_VAR 0 4
64947: PUSH
64948: LD_VAR 0 1
64952: PPUSH
64953: CALL_OW 437
64957: PUSH
64958: LD_INT 1
64960: ARRAY
64961: PUSH
64962: LD_INT 2
64964: ARRAY
64965: EQUAL
64966: AND
64967: PUSH
64968: LD_VAR 0 5
64972: PUSH
64973: LD_VAR 0 1
64977: PPUSH
64978: CALL_OW 437
64982: PUSH
64983: LD_INT 1
64985: ARRAY
64986: PUSH
64987: LD_INT 3
64989: ARRAY
64990: EQUAL
64991: AND
64992: IFFALSE 65002
// result := true end ;
64994: LD_ADDR_VAR 0 3
64998: PUSH
64999: LD_INT 1
65001: ST_TO_ADDR
// end ;
65002: LD_VAR 0 3
65006: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65007: LD_INT 0
65009: PPUSH
// result := false ;
65010: LD_ADDR_VAR 0 4
65014: PUSH
65015: LD_INT 0
65017: ST_TO_ADDR
// if GetTaskList ( unit ) then
65018: LD_VAR 0 1
65022: PPUSH
65023: CALL_OW 437
65027: IFFALSE 65110
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65029: LD_STRING M
65031: PUSH
65032: LD_VAR 0 1
65036: PPUSH
65037: CALL_OW 437
65041: PUSH
65042: LD_INT 1
65044: ARRAY
65045: PUSH
65046: LD_INT 1
65048: ARRAY
65049: EQUAL
65050: PUSH
65051: LD_VAR 0 2
65055: PUSH
65056: LD_VAR 0 1
65060: PPUSH
65061: CALL_OW 437
65065: PUSH
65066: LD_INT 1
65068: ARRAY
65069: PUSH
65070: LD_INT 2
65072: ARRAY
65073: EQUAL
65074: AND
65075: PUSH
65076: LD_VAR 0 3
65080: PUSH
65081: LD_VAR 0 1
65085: PPUSH
65086: CALL_OW 437
65090: PUSH
65091: LD_INT 1
65093: ARRAY
65094: PUSH
65095: LD_INT 3
65097: ARRAY
65098: EQUAL
65099: AND
65100: IFFALSE 65110
// result := true ;
65102: LD_ADDR_VAR 0 4
65106: PUSH
65107: LD_INT 1
65109: ST_TO_ADDR
// end ; end ;
65110: LD_VAR 0 4
65114: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65115: LD_INT 0
65117: PPUSH
65118: PPUSH
65119: PPUSH
65120: PPUSH
// if not unit or not area then
65121: LD_VAR 0 1
65125: NOT
65126: PUSH
65127: LD_VAR 0 2
65131: NOT
65132: OR
65133: IFFALSE 65137
// exit ;
65135: GO 65301
// tmp := AreaToList ( area , i ) ;
65137: LD_ADDR_VAR 0 6
65141: PUSH
65142: LD_VAR 0 2
65146: PPUSH
65147: LD_VAR 0 5
65151: PPUSH
65152: CALL_OW 517
65156: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65157: LD_ADDR_VAR 0 5
65161: PUSH
65162: DOUBLE
65163: LD_INT 1
65165: DEC
65166: ST_TO_ADDR
65167: LD_VAR 0 6
65171: PUSH
65172: LD_INT 1
65174: ARRAY
65175: PUSH
65176: FOR_TO
65177: IFFALSE 65299
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65179: LD_ADDR_VAR 0 7
65183: PUSH
65184: LD_VAR 0 6
65188: PUSH
65189: LD_INT 1
65191: ARRAY
65192: PUSH
65193: LD_VAR 0 5
65197: ARRAY
65198: PUSH
65199: LD_VAR 0 6
65203: PUSH
65204: LD_INT 2
65206: ARRAY
65207: PUSH
65208: LD_VAR 0 5
65212: ARRAY
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65218: LD_VAR 0 7
65222: PUSH
65223: LD_INT 1
65225: ARRAY
65226: PPUSH
65227: LD_VAR 0 7
65231: PUSH
65232: LD_INT 2
65234: ARRAY
65235: PPUSH
65236: CALL_OW 428
65240: PUSH
65241: LD_INT 0
65243: EQUAL
65244: IFFALSE 65297
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65246: LD_VAR 0 1
65250: PPUSH
65251: LD_VAR 0 7
65255: PUSH
65256: LD_INT 1
65258: ARRAY
65259: PPUSH
65260: LD_VAR 0 7
65264: PUSH
65265: LD_INT 2
65267: ARRAY
65268: PPUSH
65269: LD_VAR 0 3
65273: PPUSH
65274: CALL_OW 48
// result := IsPlaced ( unit ) ;
65278: LD_ADDR_VAR 0 4
65282: PUSH
65283: LD_VAR 0 1
65287: PPUSH
65288: CALL_OW 305
65292: ST_TO_ADDR
// exit ;
65293: POP
65294: POP
65295: GO 65301
// end ; end ;
65297: GO 65176
65299: POP
65300: POP
// end ;
65301: LD_VAR 0 4
65305: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65306: LD_INT 0
65308: PPUSH
65309: PPUSH
65310: PPUSH
// if not side or side > 8 then
65311: LD_VAR 0 1
65315: NOT
65316: PUSH
65317: LD_VAR 0 1
65321: PUSH
65322: LD_INT 8
65324: GREATER
65325: OR
65326: IFFALSE 65330
// exit ;
65328: GO 65517
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65330: LD_ADDR_VAR 0 4
65334: PUSH
65335: LD_INT 22
65337: PUSH
65338: LD_VAR 0 1
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 21
65349: PUSH
65350: LD_INT 3
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PPUSH
65361: CALL_OW 69
65365: ST_TO_ADDR
// if not tmp then
65366: LD_VAR 0 4
65370: NOT
65371: IFFALSE 65375
// exit ;
65373: GO 65517
// enable_addtolog := true ;
65375: LD_ADDR_OWVAR 81
65379: PUSH
65380: LD_INT 1
65382: ST_TO_ADDR
// AddToLog ( [ ) ;
65383: LD_STRING [
65385: PPUSH
65386: CALL_OW 561
// for i in tmp do
65390: LD_ADDR_VAR 0 3
65394: PUSH
65395: LD_VAR 0 4
65399: PUSH
65400: FOR_IN
65401: IFFALSE 65508
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65403: LD_STRING [
65405: PUSH
65406: LD_VAR 0 3
65410: PPUSH
65411: CALL_OW 266
65415: STR
65416: PUSH
65417: LD_STRING , 
65419: STR
65420: PUSH
65421: LD_VAR 0 3
65425: PPUSH
65426: CALL_OW 250
65430: STR
65431: PUSH
65432: LD_STRING , 
65434: STR
65435: PUSH
65436: LD_VAR 0 3
65440: PPUSH
65441: CALL_OW 251
65445: STR
65446: PUSH
65447: LD_STRING , 
65449: STR
65450: PUSH
65451: LD_VAR 0 3
65455: PPUSH
65456: CALL_OW 254
65460: STR
65461: PUSH
65462: LD_STRING , 
65464: STR
65465: PUSH
65466: LD_VAR 0 3
65470: PPUSH
65471: LD_INT 1
65473: PPUSH
65474: CALL_OW 268
65478: STR
65479: PUSH
65480: LD_STRING , 
65482: STR
65483: PUSH
65484: LD_VAR 0 3
65488: PPUSH
65489: LD_INT 2
65491: PPUSH
65492: CALL_OW 268
65496: STR
65497: PUSH
65498: LD_STRING ],
65500: STR
65501: PPUSH
65502: CALL_OW 561
// end ;
65506: GO 65400
65508: POP
65509: POP
// AddToLog ( ]; ) ;
65510: LD_STRING ];
65512: PPUSH
65513: CALL_OW 561
// end ;
65517: LD_VAR 0 2
65521: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65522: LD_INT 0
65524: PPUSH
65525: PPUSH
65526: PPUSH
65527: PPUSH
65528: PPUSH
// if not area or not rate or not max then
65529: LD_VAR 0 1
65533: NOT
65534: PUSH
65535: LD_VAR 0 2
65539: NOT
65540: OR
65541: PUSH
65542: LD_VAR 0 4
65546: NOT
65547: OR
65548: IFFALSE 65552
// exit ;
65550: GO 65741
// while 1 do
65552: LD_INT 1
65554: IFFALSE 65741
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65556: LD_ADDR_VAR 0 9
65560: PUSH
65561: LD_VAR 0 1
65565: PPUSH
65566: LD_INT 1
65568: PPUSH
65569: CALL_OW 287
65573: PUSH
65574: LD_INT 10
65576: MUL
65577: ST_TO_ADDR
// r := rate / 10 ;
65578: LD_ADDR_VAR 0 7
65582: PUSH
65583: LD_VAR 0 2
65587: PUSH
65588: LD_INT 10
65590: DIVREAL
65591: ST_TO_ADDR
// time := 1 1$00 ;
65592: LD_ADDR_VAR 0 8
65596: PUSH
65597: LD_INT 2100
65599: ST_TO_ADDR
// if amount < min then
65600: LD_VAR 0 9
65604: PUSH
65605: LD_VAR 0 3
65609: LESS
65610: IFFALSE 65628
// r := r * 2 else
65612: LD_ADDR_VAR 0 7
65616: PUSH
65617: LD_VAR 0 7
65621: PUSH
65622: LD_INT 2
65624: MUL
65625: ST_TO_ADDR
65626: GO 65654
// if amount > max then
65628: LD_VAR 0 9
65632: PUSH
65633: LD_VAR 0 4
65637: GREATER
65638: IFFALSE 65654
// r := r / 2 ;
65640: LD_ADDR_VAR 0 7
65644: PUSH
65645: LD_VAR 0 7
65649: PUSH
65650: LD_INT 2
65652: DIVREAL
65653: ST_TO_ADDR
// time := time / r ;
65654: LD_ADDR_VAR 0 8
65658: PUSH
65659: LD_VAR 0 8
65663: PUSH
65664: LD_VAR 0 7
65668: DIVREAL
65669: ST_TO_ADDR
// if time < 0 then
65670: LD_VAR 0 8
65674: PUSH
65675: LD_INT 0
65677: LESS
65678: IFFALSE 65695
// time := time * - 1 ;
65680: LD_ADDR_VAR 0 8
65684: PUSH
65685: LD_VAR 0 8
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: MUL
65694: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65695: LD_VAR 0 8
65699: PUSH
65700: LD_INT 35
65702: PPUSH
65703: LD_INT 875
65705: PPUSH
65706: CALL_OW 12
65710: PLUS
65711: PPUSH
65712: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65716: LD_INT 1
65718: PPUSH
65719: LD_INT 5
65721: PPUSH
65722: CALL_OW 12
65726: PPUSH
65727: LD_VAR 0 1
65731: PPUSH
65732: LD_INT 1
65734: PPUSH
65735: CALL_OW 55
// end ;
65739: GO 65552
// end ;
65741: LD_VAR 0 5
65745: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65746: LD_INT 0
65748: PPUSH
65749: PPUSH
65750: PPUSH
65751: PPUSH
65752: PPUSH
65753: PPUSH
65754: PPUSH
65755: PPUSH
// if not turrets or not factories then
65756: LD_VAR 0 1
65760: NOT
65761: PUSH
65762: LD_VAR 0 2
65766: NOT
65767: OR
65768: IFFALSE 65772
// exit ;
65770: GO 66079
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65772: LD_ADDR_VAR 0 10
65776: PUSH
65777: LD_INT 5
65779: PUSH
65780: LD_INT 6
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 2
65789: PUSH
65790: LD_INT 4
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 3
65799: PUSH
65800: LD_INT 5
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 24
65814: PUSH
65815: LD_INT 25
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 23
65824: PUSH
65825: LD_INT 27
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 42
65838: PUSH
65839: LD_INT 43
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 44
65848: PUSH
65849: LD_INT 46
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 45
65858: PUSH
65859: LD_INT 47
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: LIST
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: LIST
65875: ST_TO_ADDR
// result := [ ] ;
65876: LD_ADDR_VAR 0 3
65880: PUSH
65881: EMPTY
65882: ST_TO_ADDR
// for i in turrets do
65883: LD_ADDR_VAR 0 4
65887: PUSH
65888: LD_VAR 0 1
65892: PUSH
65893: FOR_IN
65894: IFFALSE 66077
// begin nat := GetNation ( i ) ;
65896: LD_ADDR_VAR 0 7
65900: PUSH
65901: LD_VAR 0 4
65905: PPUSH
65906: CALL_OW 248
65910: ST_TO_ADDR
// weapon := 0 ;
65911: LD_ADDR_VAR 0 8
65915: PUSH
65916: LD_INT 0
65918: ST_TO_ADDR
// if not nat then
65919: LD_VAR 0 7
65923: NOT
65924: IFFALSE 65928
// continue ;
65926: GO 65893
// for j in list [ nat ] do
65928: LD_ADDR_VAR 0 5
65932: PUSH
65933: LD_VAR 0 10
65937: PUSH
65938: LD_VAR 0 7
65942: ARRAY
65943: PUSH
65944: FOR_IN
65945: IFFALSE 65986
// if GetBWeapon ( i ) = j [ 1 ] then
65947: LD_VAR 0 4
65951: PPUSH
65952: CALL_OW 269
65956: PUSH
65957: LD_VAR 0 5
65961: PUSH
65962: LD_INT 1
65964: ARRAY
65965: EQUAL
65966: IFFALSE 65984
// begin weapon := j [ 2 ] ;
65968: LD_ADDR_VAR 0 8
65972: PUSH
65973: LD_VAR 0 5
65977: PUSH
65978: LD_INT 2
65980: ARRAY
65981: ST_TO_ADDR
// break ;
65982: GO 65986
// end ;
65984: GO 65944
65986: POP
65987: POP
// if not weapon then
65988: LD_VAR 0 8
65992: NOT
65993: IFFALSE 65997
// continue ;
65995: GO 65893
// for k in factories do
65997: LD_ADDR_VAR 0 6
66001: PUSH
66002: LD_VAR 0 2
66006: PUSH
66007: FOR_IN
66008: IFFALSE 66073
// begin weapons := AvailableWeaponList ( k ) ;
66010: LD_ADDR_VAR 0 9
66014: PUSH
66015: LD_VAR 0 6
66019: PPUSH
66020: CALL_OW 478
66024: ST_TO_ADDR
// if not weapons then
66025: LD_VAR 0 9
66029: NOT
66030: IFFALSE 66034
// continue ;
66032: GO 66007
// if weapon in weapons then
66034: LD_VAR 0 8
66038: PUSH
66039: LD_VAR 0 9
66043: IN
66044: IFFALSE 66071
// begin result := [ i , weapon ] ;
66046: LD_ADDR_VAR 0 3
66050: PUSH
66051: LD_VAR 0 4
66055: PUSH
66056: LD_VAR 0 8
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: ST_TO_ADDR
// exit ;
66065: POP
66066: POP
66067: POP
66068: POP
66069: GO 66079
// end ; end ;
66071: GO 66007
66073: POP
66074: POP
// end ;
66075: GO 65893
66077: POP
66078: POP
// end ;
66079: LD_VAR 0 3
66083: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66084: LD_INT 0
66086: PPUSH
// if not side or side > 8 then
66087: LD_VAR 0 3
66091: NOT
66092: PUSH
66093: LD_VAR 0 3
66097: PUSH
66098: LD_INT 8
66100: GREATER
66101: OR
66102: IFFALSE 66106
// exit ;
66104: GO 66165
// if not range then
66106: LD_VAR 0 4
66110: NOT
66111: IFFALSE 66122
// range := - 12 ;
66113: LD_ADDR_VAR 0 4
66117: PUSH
66118: LD_INT 12
66120: NEG
66121: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66122: LD_VAR 0 1
66126: PPUSH
66127: LD_VAR 0 2
66131: PPUSH
66132: LD_VAR 0 3
66136: PPUSH
66137: LD_VAR 0 4
66141: PPUSH
66142: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66146: LD_VAR 0 1
66150: PPUSH
66151: LD_VAR 0 2
66155: PPUSH
66156: LD_VAR 0 3
66160: PPUSH
66161: CALL_OW 331
// end ;
66165: LD_VAR 0 5
66169: RET
// export function Video ( mode ) ; begin
66170: LD_INT 0
66172: PPUSH
// ingame_video = mode ;
66173: LD_ADDR_OWVAR 52
66177: PUSH
66178: LD_VAR 0 1
66182: ST_TO_ADDR
// interface_hidden = mode ;
66183: LD_ADDR_OWVAR 54
66187: PUSH
66188: LD_VAR 0 1
66192: ST_TO_ADDR
// end ;
66193: LD_VAR 0 2
66197: RET
// export function Join ( array , element ) ; begin
66198: LD_INT 0
66200: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66201: LD_ADDR_VAR 0 3
66205: PUSH
66206: LD_VAR 0 1
66210: PPUSH
66211: LD_VAR 0 1
66215: PUSH
66216: LD_INT 1
66218: PLUS
66219: PPUSH
66220: LD_VAR 0 2
66224: PPUSH
66225: CALL_OW 1
66229: ST_TO_ADDR
// end ;
66230: LD_VAR 0 3
66234: RET
// export function JoinUnion ( array , element ) ; begin
66235: LD_INT 0
66237: PPUSH
// result := array union element ;
66238: LD_ADDR_VAR 0 3
66242: PUSH
66243: LD_VAR 0 1
66247: PUSH
66248: LD_VAR 0 2
66252: UNION
66253: ST_TO_ADDR
// end ;
66254: LD_VAR 0 3
66258: RET
// export function GetBehemoths ( side ) ; begin
66259: LD_INT 0
66261: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66262: LD_ADDR_VAR 0 2
66266: PUSH
66267: LD_INT 22
66269: PUSH
66270: LD_VAR 0 1
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 31
66281: PUSH
66282: LD_INT 25
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PPUSH
66293: CALL_OW 69
66297: ST_TO_ADDR
// end ;
66298: LD_VAR 0 2
66302: RET
// export function Shuffle ( array ) ; var i , index ; begin
66303: LD_INT 0
66305: PPUSH
66306: PPUSH
66307: PPUSH
// result := [ ] ;
66308: LD_ADDR_VAR 0 2
66312: PUSH
66313: EMPTY
66314: ST_TO_ADDR
// if not array then
66315: LD_VAR 0 1
66319: NOT
66320: IFFALSE 66324
// exit ;
66322: GO 66423
// Randomize ;
66324: CALL_OW 10
// for i = array downto 1 do
66328: LD_ADDR_VAR 0 3
66332: PUSH
66333: DOUBLE
66334: LD_VAR 0 1
66338: INC
66339: ST_TO_ADDR
66340: LD_INT 1
66342: PUSH
66343: FOR_DOWNTO
66344: IFFALSE 66421
// begin index := rand ( 1 , array ) ;
66346: LD_ADDR_VAR 0 4
66350: PUSH
66351: LD_INT 1
66353: PPUSH
66354: LD_VAR 0 1
66358: PPUSH
66359: CALL_OW 12
66363: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66364: LD_ADDR_VAR 0 2
66368: PUSH
66369: LD_VAR 0 2
66373: PPUSH
66374: LD_VAR 0 2
66378: PUSH
66379: LD_INT 1
66381: PLUS
66382: PPUSH
66383: LD_VAR 0 1
66387: PUSH
66388: LD_VAR 0 4
66392: ARRAY
66393: PPUSH
66394: CALL_OW 2
66398: ST_TO_ADDR
// array := Delete ( array , index ) ;
66399: LD_ADDR_VAR 0 1
66403: PUSH
66404: LD_VAR 0 1
66408: PPUSH
66409: LD_VAR 0 4
66413: PPUSH
66414: CALL_OW 3
66418: ST_TO_ADDR
// end ;
66419: GO 66343
66421: POP
66422: POP
// end ;
66423: LD_VAR 0 2
66427: RET
// export function GetBaseMaterials ( base ) ; begin
66428: LD_INT 0
66430: PPUSH
// result := [ 0 , 0 , 0 ] ;
66431: LD_ADDR_VAR 0 2
66435: PUSH
66436: LD_INT 0
66438: PUSH
66439: LD_INT 0
66441: PUSH
66442: LD_INT 0
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: LIST
66449: ST_TO_ADDR
// if not base then
66450: LD_VAR 0 1
66454: NOT
66455: IFFALSE 66459
// exit ;
66457: GO 66508
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66459: LD_ADDR_VAR 0 2
66463: PUSH
66464: LD_VAR 0 1
66468: PPUSH
66469: LD_INT 1
66471: PPUSH
66472: CALL_OW 275
66476: PUSH
66477: LD_VAR 0 1
66481: PPUSH
66482: LD_INT 2
66484: PPUSH
66485: CALL_OW 275
66489: PUSH
66490: LD_VAR 0 1
66494: PPUSH
66495: LD_INT 3
66497: PPUSH
66498: CALL_OW 275
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: LIST
66507: ST_TO_ADDR
// end ;
66508: LD_VAR 0 2
66512: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66513: LD_INT 0
66515: PPUSH
66516: PPUSH
// result := array ;
66517: LD_ADDR_VAR 0 3
66521: PUSH
66522: LD_VAR 0 1
66526: ST_TO_ADDR
// if size > 0 then
66527: LD_VAR 0 2
66531: PUSH
66532: LD_INT 0
66534: GREATER
66535: IFFALSE 66581
// for i := array downto size do
66537: LD_ADDR_VAR 0 4
66541: PUSH
66542: DOUBLE
66543: LD_VAR 0 1
66547: INC
66548: ST_TO_ADDR
66549: LD_VAR 0 2
66553: PUSH
66554: FOR_DOWNTO
66555: IFFALSE 66579
// result := Delete ( result , result ) ;
66557: LD_ADDR_VAR 0 3
66561: PUSH
66562: LD_VAR 0 3
66566: PPUSH
66567: LD_VAR 0 3
66571: PPUSH
66572: CALL_OW 3
66576: ST_TO_ADDR
66577: GO 66554
66579: POP
66580: POP
// end ;
66581: LD_VAR 0 3
66585: RET
// export function ComExit ( unit ) ; var tmp ; begin
66586: LD_INT 0
66588: PPUSH
66589: PPUSH
// if not IsInUnit ( unit ) then
66590: LD_VAR 0 1
66594: PPUSH
66595: CALL_OW 310
66599: NOT
66600: IFFALSE 66604
// exit ;
66602: GO 66664
// tmp := IsInUnit ( unit ) ;
66604: LD_ADDR_VAR 0 3
66608: PUSH
66609: LD_VAR 0 1
66613: PPUSH
66614: CALL_OW 310
66618: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66619: LD_VAR 0 3
66623: PPUSH
66624: CALL_OW 247
66628: PUSH
66629: LD_INT 2
66631: EQUAL
66632: IFFALSE 66645
// ComExitVehicle ( unit ) else
66634: LD_VAR 0 1
66638: PPUSH
66639: CALL_OW 121
66643: GO 66654
// ComExitBuilding ( unit ) ;
66645: LD_VAR 0 1
66649: PPUSH
66650: CALL_OW 122
// result := tmp ;
66654: LD_ADDR_VAR 0 2
66658: PUSH
66659: LD_VAR 0 3
66663: ST_TO_ADDR
// end ;
66664: LD_VAR 0 2
66668: RET
// export function ComExitAll ( units ) ; var i ; begin
66669: LD_INT 0
66671: PPUSH
66672: PPUSH
// if not units then
66673: LD_VAR 0 1
66677: NOT
66678: IFFALSE 66682
// exit ;
66680: GO 66708
// for i in units do
66682: LD_ADDR_VAR 0 3
66686: PUSH
66687: LD_VAR 0 1
66691: PUSH
66692: FOR_IN
66693: IFFALSE 66706
// ComExit ( i ) ;
66695: LD_VAR 0 3
66699: PPUSH
66700: CALL 66586 0 1
66704: GO 66692
66706: POP
66707: POP
// end ;
66708: LD_VAR 0 2
66712: RET
// export function ResetHc ; begin
66713: LD_INT 0
66715: PPUSH
// InitHc ;
66716: CALL_OW 19
// hc_importance := 0 ;
66720: LD_ADDR_OWVAR 32
66724: PUSH
66725: LD_INT 0
66727: ST_TO_ADDR
// end ;
66728: LD_VAR 0 1
66732: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66733: LD_INT 0
66735: PPUSH
66736: PPUSH
66737: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66738: LD_ADDR_VAR 0 6
66742: PUSH
66743: LD_VAR 0 1
66747: PUSH
66748: LD_VAR 0 3
66752: PLUS
66753: PUSH
66754: LD_INT 2
66756: DIV
66757: ST_TO_ADDR
// if _x < 0 then
66758: LD_VAR 0 6
66762: PUSH
66763: LD_INT 0
66765: LESS
66766: IFFALSE 66783
// _x := _x * - 1 ;
66768: LD_ADDR_VAR 0 6
66772: PUSH
66773: LD_VAR 0 6
66777: PUSH
66778: LD_INT 1
66780: NEG
66781: MUL
66782: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66783: LD_ADDR_VAR 0 7
66787: PUSH
66788: LD_VAR 0 2
66792: PUSH
66793: LD_VAR 0 4
66797: PLUS
66798: PUSH
66799: LD_INT 2
66801: DIV
66802: ST_TO_ADDR
// if _y < 0 then
66803: LD_VAR 0 7
66807: PUSH
66808: LD_INT 0
66810: LESS
66811: IFFALSE 66828
// _y := _y * - 1 ;
66813: LD_ADDR_VAR 0 7
66817: PUSH
66818: LD_VAR 0 7
66822: PUSH
66823: LD_INT 1
66825: NEG
66826: MUL
66827: ST_TO_ADDR
// result := [ _x , _y ] ;
66828: LD_ADDR_VAR 0 5
66832: PUSH
66833: LD_VAR 0 6
66837: PUSH
66838: LD_VAR 0 7
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: ST_TO_ADDR
// end ;
66847: LD_VAR 0 5
66851: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66852: LD_INT 0
66854: PPUSH
66855: PPUSH
66856: PPUSH
66857: PPUSH
// task := GetTaskList ( unit ) ;
66858: LD_ADDR_VAR 0 7
66862: PUSH
66863: LD_VAR 0 1
66867: PPUSH
66868: CALL_OW 437
66872: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66873: LD_VAR 0 7
66877: NOT
66878: PUSH
66879: LD_VAR 0 1
66883: PPUSH
66884: LD_VAR 0 2
66888: PPUSH
66889: CALL_OW 308
66893: NOT
66894: AND
66895: IFFALSE 66899
// exit ;
66897: GO 67017
// if IsInArea ( unit , area ) then
66899: LD_VAR 0 1
66903: PPUSH
66904: LD_VAR 0 2
66908: PPUSH
66909: CALL_OW 308
66913: IFFALSE 66931
// begin ComMoveToArea ( unit , goAway ) ;
66915: LD_VAR 0 1
66919: PPUSH
66920: LD_VAR 0 3
66924: PPUSH
66925: CALL_OW 113
// exit ;
66929: GO 67017
// end ; if task [ 1 ] [ 1 ] <> M then
66931: LD_VAR 0 7
66935: PUSH
66936: LD_INT 1
66938: ARRAY
66939: PUSH
66940: LD_INT 1
66942: ARRAY
66943: PUSH
66944: LD_STRING M
66946: NONEQUAL
66947: IFFALSE 66951
// exit ;
66949: GO 67017
// x := task [ 1 ] [ 2 ] ;
66951: LD_ADDR_VAR 0 5
66955: PUSH
66956: LD_VAR 0 7
66960: PUSH
66961: LD_INT 1
66963: ARRAY
66964: PUSH
66965: LD_INT 2
66967: ARRAY
66968: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66969: LD_ADDR_VAR 0 6
66973: PUSH
66974: LD_VAR 0 7
66978: PUSH
66979: LD_INT 1
66981: ARRAY
66982: PUSH
66983: LD_INT 3
66985: ARRAY
66986: ST_TO_ADDR
// if InArea ( x , y , area ) then
66987: LD_VAR 0 5
66991: PPUSH
66992: LD_VAR 0 6
66996: PPUSH
66997: LD_VAR 0 2
67001: PPUSH
67002: CALL_OW 309
67006: IFFALSE 67017
// ComStop ( unit ) ;
67008: LD_VAR 0 1
67012: PPUSH
67013: CALL_OW 141
// end ;
67017: LD_VAR 0 4
67021: RET
// export function Abs ( value ) ; begin
67022: LD_INT 0
67024: PPUSH
// result := value ;
67025: LD_ADDR_VAR 0 2
67029: PUSH
67030: LD_VAR 0 1
67034: ST_TO_ADDR
// if value < 0 then
67035: LD_VAR 0 1
67039: PUSH
67040: LD_INT 0
67042: LESS
67043: IFFALSE 67060
// result := value * - 1 ;
67045: LD_ADDR_VAR 0 2
67049: PUSH
67050: LD_VAR 0 1
67054: PUSH
67055: LD_INT 1
67057: NEG
67058: MUL
67059: ST_TO_ADDR
// end ;
67060: LD_VAR 0 2
67064: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67065: LD_INT 0
67067: PPUSH
67068: PPUSH
67069: PPUSH
67070: PPUSH
67071: PPUSH
67072: PPUSH
67073: PPUSH
67074: PPUSH
// if not unit or not building then
67075: LD_VAR 0 1
67079: NOT
67080: PUSH
67081: LD_VAR 0 2
67085: NOT
67086: OR
67087: IFFALSE 67091
// exit ;
67089: GO 67317
// x := GetX ( building ) ;
67091: LD_ADDR_VAR 0 4
67095: PUSH
67096: LD_VAR 0 2
67100: PPUSH
67101: CALL_OW 250
67105: ST_TO_ADDR
// y := GetY ( building ) ;
67106: LD_ADDR_VAR 0 6
67110: PUSH
67111: LD_VAR 0 2
67115: PPUSH
67116: CALL_OW 251
67120: ST_TO_ADDR
// d := GetDir ( building ) ;
67121: LD_ADDR_VAR 0 8
67125: PUSH
67126: LD_VAR 0 2
67130: PPUSH
67131: CALL_OW 254
67135: ST_TO_ADDR
// r := 4 ;
67136: LD_ADDR_VAR 0 9
67140: PUSH
67141: LD_INT 4
67143: ST_TO_ADDR
// for i := 1 to 5 do
67144: LD_ADDR_VAR 0 10
67148: PUSH
67149: DOUBLE
67150: LD_INT 1
67152: DEC
67153: ST_TO_ADDR
67154: LD_INT 5
67156: PUSH
67157: FOR_TO
67158: IFFALSE 67315
// begin _x := ShiftX ( x , d , r + i ) ;
67160: LD_ADDR_VAR 0 5
67164: PUSH
67165: LD_VAR 0 4
67169: PPUSH
67170: LD_VAR 0 8
67174: PPUSH
67175: LD_VAR 0 9
67179: PUSH
67180: LD_VAR 0 10
67184: PLUS
67185: PPUSH
67186: CALL_OW 272
67190: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67191: LD_ADDR_VAR 0 7
67195: PUSH
67196: LD_VAR 0 6
67200: PPUSH
67201: LD_VAR 0 8
67205: PPUSH
67206: LD_VAR 0 9
67210: PUSH
67211: LD_VAR 0 10
67215: PLUS
67216: PPUSH
67217: CALL_OW 273
67221: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67222: LD_VAR 0 5
67226: PPUSH
67227: LD_VAR 0 7
67231: PPUSH
67232: CALL_OW 488
67236: PUSH
67237: LD_VAR 0 5
67241: PPUSH
67242: LD_VAR 0 7
67246: PPUSH
67247: CALL_OW 428
67251: PPUSH
67252: CALL_OW 247
67256: PUSH
67257: LD_INT 3
67259: PUSH
67260: LD_INT 2
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: IN
67267: NOT
67268: AND
67269: IFFALSE 67313
// begin ComMoveXY ( unit , _x , _y ) ;
67271: LD_VAR 0 1
67275: PPUSH
67276: LD_VAR 0 5
67280: PPUSH
67281: LD_VAR 0 7
67285: PPUSH
67286: CALL_OW 111
// result := [ _x , _y ] ;
67290: LD_ADDR_VAR 0 3
67294: PUSH
67295: LD_VAR 0 5
67299: PUSH
67300: LD_VAR 0 7
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: ST_TO_ADDR
// exit ;
67309: POP
67310: POP
67311: GO 67317
// end ; end ;
67313: GO 67157
67315: POP
67316: POP
// end ;
67317: LD_VAR 0 3
67321: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67322: LD_INT 0
67324: PPUSH
67325: PPUSH
67326: PPUSH
// result := 0 ;
67327: LD_ADDR_VAR 0 3
67331: PUSH
67332: LD_INT 0
67334: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67335: LD_VAR 0 1
67339: PUSH
67340: LD_INT 0
67342: LESS
67343: PUSH
67344: LD_VAR 0 1
67348: PUSH
67349: LD_INT 8
67351: GREATER
67352: OR
67353: PUSH
67354: LD_VAR 0 2
67358: PUSH
67359: LD_INT 0
67361: LESS
67362: OR
67363: PUSH
67364: LD_VAR 0 2
67368: PUSH
67369: LD_INT 8
67371: GREATER
67372: OR
67373: IFFALSE 67377
// exit ;
67375: GO 67452
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67377: LD_ADDR_VAR 0 4
67381: PUSH
67382: LD_INT 22
67384: PUSH
67385: LD_VAR 0 2
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PPUSH
67394: CALL_OW 69
67398: PUSH
67399: FOR_IN
67400: IFFALSE 67450
// begin un := UnitShoot ( i ) ;
67402: LD_ADDR_VAR 0 5
67406: PUSH
67407: LD_VAR 0 4
67411: PPUSH
67412: CALL_OW 504
67416: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67417: LD_VAR 0 5
67421: PPUSH
67422: CALL_OW 255
67426: PUSH
67427: LD_VAR 0 1
67431: EQUAL
67432: IFFALSE 67448
// begin result := un ;
67434: LD_ADDR_VAR 0 3
67438: PUSH
67439: LD_VAR 0 5
67443: ST_TO_ADDR
// exit ;
67444: POP
67445: POP
67446: GO 67452
// end ; end ;
67448: GO 67399
67450: POP
67451: POP
// end ;
67452: LD_VAR 0 3
67456: RET
// export function GetCargoBay ( units ) ; begin
67457: LD_INT 0
67459: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67460: LD_ADDR_VAR 0 2
67464: PUSH
67465: LD_VAR 0 1
67469: PPUSH
67470: LD_INT 2
67472: PUSH
67473: LD_INT 34
67475: PUSH
67476: LD_INT 12
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 34
67485: PUSH
67486: LD_INT 51
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 34
67495: PUSH
67496: LD_INT 32
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 34
67505: PUSH
67506: LD_EXP 46
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: PPUSH
67522: CALL_OW 72
67526: ST_TO_ADDR
// end ;
67527: LD_VAR 0 2
67531: RET
// export function Negate ( value ) ; begin
67532: LD_INT 0
67534: PPUSH
// result := not value ;
67535: LD_ADDR_VAR 0 2
67539: PUSH
67540: LD_VAR 0 1
67544: NOT
67545: ST_TO_ADDR
// end ;
67546: LD_VAR 0 2
67550: RET
// export function Inc ( value ) ; begin
67551: LD_INT 0
67553: PPUSH
// result := value + 1 ;
67554: LD_ADDR_VAR 0 2
67558: PUSH
67559: LD_VAR 0 1
67563: PUSH
67564: LD_INT 1
67566: PLUS
67567: ST_TO_ADDR
// end ;
67568: LD_VAR 0 2
67572: RET
// export function Dec ( value ) ; begin
67573: LD_INT 0
67575: PPUSH
// result := value - 1 ;
67576: LD_ADDR_VAR 0 2
67580: PUSH
67581: LD_VAR 0 1
67585: PUSH
67586: LD_INT 1
67588: MINUS
67589: ST_TO_ADDR
// end ;
67590: LD_VAR 0 2
67594: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67595: LD_INT 0
67597: PPUSH
67598: PPUSH
67599: PPUSH
67600: PPUSH
67601: PPUSH
67602: PPUSH
67603: PPUSH
67604: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67605: LD_VAR 0 1
67609: PPUSH
67610: LD_VAR 0 2
67614: PPUSH
67615: CALL_OW 488
67619: NOT
67620: PUSH
67621: LD_VAR 0 3
67625: PPUSH
67626: LD_VAR 0 4
67630: PPUSH
67631: CALL_OW 488
67635: NOT
67636: OR
67637: IFFALSE 67650
// begin result := - 1 ;
67639: LD_ADDR_VAR 0 5
67643: PUSH
67644: LD_INT 1
67646: NEG
67647: ST_TO_ADDR
// exit ;
67648: GO 67885
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67650: LD_ADDR_VAR 0 12
67654: PUSH
67655: LD_VAR 0 1
67659: PPUSH
67660: LD_VAR 0 2
67664: PPUSH
67665: LD_VAR 0 3
67669: PPUSH
67670: LD_VAR 0 4
67674: PPUSH
67675: CALL 66733 0 4
67679: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67680: LD_ADDR_VAR 0 11
67684: PUSH
67685: LD_VAR 0 1
67689: PPUSH
67690: LD_VAR 0 2
67694: PPUSH
67695: LD_VAR 0 12
67699: PUSH
67700: LD_INT 1
67702: ARRAY
67703: PPUSH
67704: LD_VAR 0 12
67708: PUSH
67709: LD_INT 2
67711: ARRAY
67712: PPUSH
67713: CALL_OW 298
67717: ST_TO_ADDR
// distance := 9999 ;
67718: LD_ADDR_VAR 0 10
67722: PUSH
67723: LD_INT 9999
67725: ST_TO_ADDR
// for i := 0 to 5 do
67726: LD_ADDR_VAR 0 6
67730: PUSH
67731: DOUBLE
67732: LD_INT 0
67734: DEC
67735: ST_TO_ADDR
67736: LD_INT 5
67738: PUSH
67739: FOR_TO
67740: IFFALSE 67883
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67742: LD_ADDR_VAR 0 7
67746: PUSH
67747: LD_VAR 0 1
67751: PPUSH
67752: LD_VAR 0 6
67756: PPUSH
67757: LD_VAR 0 11
67761: PPUSH
67762: CALL_OW 272
67766: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67767: LD_ADDR_VAR 0 8
67771: PUSH
67772: LD_VAR 0 2
67776: PPUSH
67777: LD_VAR 0 6
67781: PPUSH
67782: LD_VAR 0 11
67786: PPUSH
67787: CALL_OW 273
67791: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67792: LD_VAR 0 7
67796: PPUSH
67797: LD_VAR 0 8
67801: PPUSH
67802: CALL_OW 488
67806: NOT
67807: IFFALSE 67811
// continue ;
67809: GO 67739
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67811: LD_ADDR_VAR 0 9
67815: PUSH
67816: LD_VAR 0 12
67820: PUSH
67821: LD_INT 1
67823: ARRAY
67824: PPUSH
67825: LD_VAR 0 12
67829: PUSH
67830: LD_INT 2
67832: ARRAY
67833: PPUSH
67834: LD_VAR 0 7
67838: PPUSH
67839: LD_VAR 0 8
67843: PPUSH
67844: CALL_OW 298
67848: ST_TO_ADDR
// if tmp < distance then
67849: LD_VAR 0 9
67853: PUSH
67854: LD_VAR 0 10
67858: LESS
67859: IFFALSE 67881
// begin result := i ;
67861: LD_ADDR_VAR 0 5
67865: PUSH
67866: LD_VAR 0 6
67870: ST_TO_ADDR
// distance := tmp ;
67871: LD_ADDR_VAR 0 10
67875: PUSH
67876: LD_VAR 0 9
67880: ST_TO_ADDR
// end ; end ;
67881: GO 67739
67883: POP
67884: POP
// end ;
67885: LD_VAR 0 5
67889: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67890: LD_INT 0
67892: PPUSH
67893: PPUSH
// if not driver or not IsInUnit ( driver ) then
67894: LD_VAR 0 1
67898: NOT
67899: PUSH
67900: LD_VAR 0 1
67904: PPUSH
67905: CALL_OW 310
67909: NOT
67910: OR
67911: IFFALSE 67915
// exit ;
67913: GO 68005
// vehicle := IsInUnit ( driver ) ;
67915: LD_ADDR_VAR 0 3
67919: PUSH
67920: LD_VAR 0 1
67924: PPUSH
67925: CALL_OW 310
67929: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67930: LD_VAR 0 1
67934: PPUSH
67935: LD_STRING \
67937: PUSH
67938: LD_INT 0
67940: PUSH
67941: LD_INT 0
67943: PUSH
67944: LD_INT 0
67946: PUSH
67947: LD_INT 0
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: LD_INT 0
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: PUSH
67965: LD_STRING E
67967: PUSH
67968: LD_INT 0
67970: PUSH
67971: LD_INT 0
67973: PUSH
67974: LD_VAR 0 3
67978: PUSH
67979: LD_INT 0
67981: PUSH
67982: LD_INT 0
67984: PUSH
67985: LD_INT 0
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PPUSH
68001: CALL_OW 446
// end ;
68005: LD_VAR 0 2
68009: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68010: LD_INT 0
68012: PPUSH
68013: PPUSH
// if not driver or not IsInUnit ( driver ) then
68014: LD_VAR 0 1
68018: NOT
68019: PUSH
68020: LD_VAR 0 1
68024: PPUSH
68025: CALL_OW 310
68029: NOT
68030: OR
68031: IFFALSE 68035
// exit ;
68033: GO 68125
// vehicle := IsInUnit ( driver ) ;
68035: LD_ADDR_VAR 0 3
68039: PUSH
68040: LD_VAR 0 1
68044: PPUSH
68045: CALL_OW 310
68049: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68050: LD_VAR 0 1
68054: PPUSH
68055: LD_STRING \
68057: PUSH
68058: LD_INT 0
68060: PUSH
68061: LD_INT 0
68063: PUSH
68064: LD_INT 0
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: PUSH
68085: LD_STRING E
68087: PUSH
68088: LD_INT 0
68090: PUSH
68091: LD_INT 0
68093: PUSH
68094: LD_VAR 0 3
68098: PUSH
68099: LD_INT 0
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: LD_INT 0
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PPUSH
68121: CALL_OW 447
// end ;
68125: LD_VAR 0 2
68129: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68130: LD_INT 0
68132: PPUSH
68133: PPUSH
68134: PPUSH
// tmp := [ ] ;
68135: LD_ADDR_VAR 0 5
68139: PUSH
68140: EMPTY
68141: ST_TO_ADDR
// for i in units do
68142: LD_ADDR_VAR 0 4
68146: PUSH
68147: LD_VAR 0 1
68151: PUSH
68152: FOR_IN
68153: IFFALSE 68191
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68155: LD_ADDR_VAR 0 5
68159: PUSH
68160: LD_VAR 0 5
68164: PPUSH
68165: LD_VAR 0 5
68169: PUSH
68170: LD_INT 1
68172: PLUS
68173: PPUSH
68174: LD_VAR 0 4
68178: PPUSH
68179: CALL_OW 256
68183: PPUSH
68184: CALL_OW 2
68188: ST_TO_ADDR
68189: GO 68152
68191: POP
68192: POP
// if not tmp then
68193: LD_VAR 0 5
68197: NOT
68198: IFFALSE 68202
// exit ;
68200: GO 68250
// if asc then
68202: LD_VAR 0 2
68206: IFFALSE 68230
// result := SortListByListAsc ( units , tmp ) else
68208: LD_ADDR_VAR 0 3
68212: PUSH
68213: LD_VAR 0 1
68217: PPUSH
68218: LD_VAR 0 5
68222: PPUSH
68223: CALL_OW 76
68227: ST_TO_ADDR
68228: GO 68250
// result := SortListByListDesc ( units , tmp ) ;
68230: LD_ADDR_VAR 0 3
68234: PUSH
68235: LD_VAR 0 1
68239: PPUSH
68240: LD_VAR 0 5
68244: PPUSH
68245: CALL_OW 77
68249: ST_TO_ADDR
// end ;
68250: LD_VAR 0 3
68254: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68255: LD_INT 0
68257: PPUSH
68258: PPUSH
// task := GetTaskList ( mech ) ;
68259: LD_ADDR_VAR 0 4
68263: PUSH
68264: LD_VAR 0 1
68268: PPUSH
68269: CALL_OW 437
68273: ST_TO_ADDR
// if not task then
68274: LD_VAR 0 4
68278: NOT
68279: IFFALSE 68283
// exit ;
68281: GO 68325
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68283: LD_ADDR_VAR 0 3
68287: PUSH
68288: LD_VAR 0 4
68292: PUSH
68293: LD_INT 1
68295: ARRAY
68296: PUSH
68297: LD_INT 1
68299: ARRAY
68300: PUSH
68301: LD_STRING r
68303: EQUAL
68304: PUSH
68305: LD_VAR 0 4
68309: PUSH
68310: LD_INT 1
68312: ARRAY
68313: PUSH
68314: LD_INT 4
68316: ARRAY
68317: PUSH
68318: LD_VAR 0 2
68322: EQUAL
68323: AND
68324: ST_TO_ADDR
// end ;
68325: LD_VAR 0 3
68329: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68330: LD_INT 0
68332: PPUSH
// SetDir ( unit , d ) ;
68333: LD_VAR 0 1
68337: PPUSH
68338: LD_VAR 0 4
68342: PPUSH
68343: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68347: LD_VAR 0 1
68351: PPUSH
68352: LD_VAR 0 2
68356: PPUSH
68357: LD_VAR 0 3
68361: PPUSH
68362: LD_VAR 0 5
68366: PPUSH
68367: CALL_OW 48
// end ;
68371: LD_VAR 0 6
68375: RET
// export function ToNaturalNumber ( number ) ; begin
68376: LD_INT 0
68378: PPUSH
// result := number div 1 ;
68379: LD_ADDR_VAR 0 2
68383: PUSH
68384: LD_VAR 0 1
68388: PUSH
68389: LD_INT 1
68391: DIV
68392: ST_TO_ADDR
// if number < 0 then
68393: LD_VAR 0 1
68397: PUSH
68398: LD_INT 0
68400: LESS
68401: IFFALSE 68411
// result := 0 ;
68403: LD_ADDR_VAR 0 2
68407: PUSH
68408: LD_INT 0
68410: ST_TO_ADDR
// end ;
68411: LD_VAR 0 2
68415: RET
// export function SortByClass ( units , class ) ; var un ; begin
68416: LD_INT 0
68418: PPUSH
68419: PPUSH
// if not units or not class then
68420: LD_VAR 0 1
68424: NOT
68425: PUSH
68426: LD_VAR 0 2
68430: NOT
68431: OR
68432: IFFALSE 68436
// exit ;
68434: GO 68531
// result := [ ] ;
68436: LD_ADDR_VAR 0 3
68440: PUSH
68441: EMPTY
68442: ST_TO_ADDR
// for un in units do
68443: LD_ADDR_VAR 0 4
68447: PUSH
68448: LD_VAR 0 1
68452: PUSH
68453: FOR_IN
68454: IFFALSE 68529
// if GetClass ( un ) = class then
68456: LD_VAR 0 4
68460: PPUSH
68461: CALL_OW 257
68465: PUSH
68466: LD_VAR 0 2
68470: EQUAL
68471: IFFALSE 68498
// result := Insert ( result , 1 , un ) else
68473: LD_ADDR_VAR 0 3
68477: PUSH
68478: LD_VAR 0 3
68482: PPUSH
68483: LD_INT 1
68485: PPUSH
68486: LD_VAR 0 4
68490: PPUSH
68491: CALL_OW 2
68495: ST_TO_ADDR
68496: GO 68527
// result := Replace ( result , result + 1 , un ) ;
68498: LD_ADDR_VAR 0 3
68502: PUSH
68503: LD_VAR 0 3
68507: PPUSH
68508: LD_VAR 0 3
68512: PUSH
68513: LD_INT 1
68515: PLUS
68516: PPUSH
68517: LD_VAR 0 4
68521: PPUSH
68522: CALL_OW 1
68526: ST_TO_ADDR
68527: GO 68453
68529: POP
68530: POP
// end ;
68531: LD_VAR 0 3
68535: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68536: LD_INT 0
68538: PPUSH
68539: PPUSH
68540: PPUSH
68541: PPUSH
68542: PPUSH
68543: PPUSH
68544: PPUSH
// result := [ ] ;
68545: LD_ADDR_VAR 0 4
68549: PUSH
68550: EMPTY
68551: ST_TO_ADDR
// if x - r < 0 then
68552: LD_VAR 0 1
68556: PUSH
68557: LD_VAR 0 3
68561: MINUS
68562: PUSH
68563: LD_INT 0
68565: LESS
68566: IFFALSE 68578
// min_x := 0 else
68568: LD_ADDR_VAR 0 8
68572: PUSH
68573: LD_INT 0
68575: ST_TO_ADDR
68576: GO 68594
// min_x := x - r ;
68578: LD_ADDR_VAR 0 8
68582: PUSH
68583: LD_VAR 0 1
68587: PUSH
68588: LD_VAR 0 3
68592: MINUS
68593: ST_TO_ADDR
// if y - r < 0 then
68594: LD_VAR 0 2
68598: PUSH
68599: LD_VAR 0 3
68603: MINUS
68604: PUSH
68605: LD_INT 0
68607: LESS
68608: IFFALSE 68620
// min_y := 0 else
68610: LD_ADDR_VAR 0 7
68614: PUSH
68615: LD_INT 0
68617: ST_TO_ADDR
68618: GO 68636
// min_y := y - r ;
68620: LD_ADDR_VAR 0 7
68624: PUSH
68625: LD_VAR 0 2
68629: PUSH
68630: LD_VAR 0 3
68634: MINUS
68635: ST_TO_ADDR
// max_x := x + r ;
68636: LD_ADDR_VAR 0 9
68640: PUSH
68641: LD_VAR 0 1
68645: PUSH
68646: LD_VAR 0 3
68650: PLUS
68651: ST_TO_ADDR
// max_y := y + r ;
68652: LD_ADDR_VAR 0 10
68656: PUSH
68657: LD_VAR 0 2
68661: PUSH
68662: LD_VAR 0 3
68666: PLUS
68667: ST_TO_ADDR
// for _x = min_x to max_x do
68668: LD_ADDR_VAR 0 5
68672: PUSH
68673: DOUBLE
68674: LD_VAR 0 8
68678: DEC
68679: ST_TO_ADDR
68680: LD_VAR 0 9
68684: PUSH
68685: FOR_TO
68686: IFFALSE 68787
// for _y = min_y to max_y do
68688: LD_ADDR_VAR 0 6
68692: PUSH
68693: DOUBLE
68694: LD_VAR 0 7
68698: DEC
68699: ST_TO_ADDR
68700: LD_VAR 0 10
68704: PUSH
68705: FOR_TO
68706: IFFALSE 68783
// begin if not ValidHex ( _x , _y ) then
68708: LD_VAR 0 5
68712: PPUSH
68713: LD_VAR 0 6
68717: PPUSH
68718: CALL_OW 488
68722: NOT
68723: IFFALSE 68727
// continue ;
68725: GO 68705
// if GetResourceTypeXY ( _x , _y ) then
68727: LD_VAR 0 5
68731: PPUSH
68732: LD_VAR 0 6
68736: PPUSH
68737: CALL_OW 283
68741: IFFALSE 68781
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68743: LD_ADDR_VAR 0 4
68747: PUSH
68748: LD_VAR 0 4
68752: PPUSH
68753: LD_VAR 0 4
68757: PUSH
68758: LD_INT 1
68760: PLUS
68761: PPUSH
68762: LD_VAR 0 5
68766: PUSH
68767: LD_VAR 0 6
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PPUSH
68776: CALL_OW 1
68780: ST_TO_ADDR
// end ;
68781: GO 68705
68783: POP
68784: POP
68785: GO 68685
68787: POP
68788: POP
// end ;
68789: LD_VAR 0 4
68793: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68794: LD_INT 0
68796: PPUSH
68797: PPUSH
68798: PPUSH
68799: PPUSH
68800: PPUSH
68801: PPUSH
68802: PPUSH
68803: PPUSH
// if not units then
68804: LD_VAR 0 1
68808: NOT
68809: IFFALSE 68813
// exit ;
68811: GO 69339
// result := UnitFilter ( units , [ f_ok ] ) ;
68813: LD_ADDR_VAR 0 3
68817: PUSH
68818: LD_VAR 0 1
68822: PPUSH
68823: LD_INT 50
68825: PUSH
68826: EMPTY
68827: LIST
68828: PPUSH
68829: CALL_OW 72
68833: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68834: LD_ADDR_VAR 0 8
68838: PUSH
68839: LD_VAR 0 1
68843: PUSH
68844: LD_INT 1
68846: ARRAY
68847: PPUSH
68848: CALL_OW 255
68852: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68853: LD_ADDR_VAR 0 10
68857: PUSH
68858: LD_INT 29
68860: PUSH
68861: LD_EXP 49
68865: PUSH
68866: LD_INT 49
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: LIST
68873: ST_TO_ADDR
// if not result then
68874: LD_VAR 0 3
68878: NOT
68879: IFFALSE 68883
// exit ;
68881: GO 69339
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68883: LD_ADDR_VAR 0 5
68887: PUSH
68888: LD_INT 81
68890: PUSH
68891: LD_VAR 0 8
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PPUSH
68900: CALL_OW 69
68904: ST_TO_ADDR
// for i in result do
68905: LD_ADDR_VAR 0 4
68909: PUSH
68910: LD_VAR 0 3
68914: PUSH
68915: FOR_IN
68916: IFFALSE 69337
// begin tag := GetTag ( i ) + 1 ;
68918: LD_ADDR_VAR 0 9
68922: PUSH
68923: LD_VAR 0 4
68927: PPUSH
68928: CALL_OW 110
68932: PUSH
68933: LD_INT 1
68935: PLUS
68936: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68937: LD_ADDR_VAR 0 7
68941: PUSH
68942: LD_VAR 0 4
68946: PPUSH
68947: CALL_OW 250
68951: PPUSH
68952: LD_VAR 0 4
68956: PPUSH
68957: CALL_OW 251
68961: PPUSH
68962: LD_INT 6
68964: PPUSH
68965: CALL 68536 0 3
68969: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68970: LD_VAR 0 4
68974: PPUSH
68975: CALL_OW 247
68979: PUSH
68980: LD_INT 2
68982: EQUAL
68983: PUSH
68984: LD_VAR 0 7
68988: AND
68989: PUSH
68990: LD_VAR 0 4
68994: PPUSH
68995: CALL_OW 264
68999: PUSH
69000: LD_VAR 0 10
69004: IN
69005: NOT
69006: AND
69007: IFFALSE 69046
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69009: LD_VAR 0 4
69013: PPUSH
69014: LD_VAR 0 7
69018: PUSH
69019: LD_INT 1
69021: ARRAY
69022: PUSH
69023: LD_INT 1
69025: ARRAY
69026: PPUSH
69027: LD_VAR 0 7
69031: PUSH
69032: LD_INT 1
69034: ARRAY
69035: PUSH
69036: LD_INT 2
69038: ARRAY
69039: PPUSH
69040: CALL_OW 116
69044: GO 69335
// if path > tag then
69046: LD_VAR 0 2
69050: PUSH
69051: LD_VAR 0 9
69055: GREATER
69056: IFFALSE 69264
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
69058: LD_ADDR_VAR 0 6
69062: PUSH
69063: LD_VAR 0 5
69067: PPUSH
69068: LD_INT 91
69070: PUSH
69071: LD_VAR 0 4
69075: PUSH
69076: LD_INT 12
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: LIST
69083: PPUSH
69084: CALL_OW 72
69088: ST_TO_ADDR
// if nearEnemy then
69089: LD_VAR 0 6
69093: IFFALSE 69162
// begin if GetWeapon ( i ) = ru_time_lapser then
69095: LD_VAR 0 4
69099: PPUSH
69100: CALL_OW 264
69104: PUSH
69105: LD_INT 49
69107: EQUAL
69108: IFFALSE 69136
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69110: LD_VAR 0 4
69114: PPUSH
69115: LD_VAR 0 6
69119: PPUSH
69120: LD_VAR 0 4
69124: PPUSH
69125: CALL_OW 74
69129: PPUSH
69130: CALL_OW 112
69134: GO 69160
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69136: LD_VAR 0 4
69140: PPUSH
69141: LD_VAR 0 6
69145: PPUSH
69146: LD_VAR 0 4
69150: PPUSH
69151: CALL_OW 74
69155: PPUSH
69156: CALL_OW 115
// end else
69160: GO 69262
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69162: LD_VAR 0 4
69166: PPUSH
69167: LD_VAR 0 2
69171: PUSH
69172: LD_VAR 0 9
69176: ARRAY
69177: PUSH
69178: LD_INT 1
69180: ARRAY
69181: PPUSH
69182: LD_VAR 0 2
69186: PUSH
69187: LD_VAR 0 9
69191: ARRAY
69192: PUSH
69193: LD_INT 2
69195: ARRAY
69196: PPUSH
69197: CALL_OW 297
69201: PUSH
69202: LD_INT 6
69204: GREATER
69205: IFFALSE 69248
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69207: LD_VAR 0 4
69211: PPUSH
69212: LD_VAR 0 2
69216: PUSH
69217: LD_VAR 0 9
69221: ARRAY
69222: PUSH
69223: LD_INT 1
69225: ARRAY
69226: PPUSH
69227: LD_VAR 0 2
69231: PUSH
69232: LD_VAR 0 9
69236: ARRAY
69237: PUSH
69238: LD_INT 2
69240: ARRAY
69241: PPUSH
69242: CALL_OW 114
69246: GO 69262
// SetTag ( i , tag ) ;
69248: LD_VAR 0 4
69252: PPUSH
69253: LD_VAR 0 9
69257: PPUSH
69258: CALL_OW 109
// end else
69262: GO 69335
// if enemy then
69264: LD_VAR 0 5
69268: IFFALSE 69335
// begin if GetWeapon ( i ) = ru_time_lapser then
69270: LD_VAR 0 4
69274: PPUSH
69275: CALL_OW 264
69279: PUSH
69280: LD_INT 49
69282: EQUAL
69283: IFFALSE 69311
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69285: LD_VAR 0 4
69289: PPUSH
69290: LD_VAR 0 5
69294: PPUSH
69295: LD_VAR 0 4
69299: PPUSH
69300: CALL_OW 74
69304: PPUSH
69305: CALL_OW 112
69309: GO 69335
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69311: LD_VAR 0 4
69315: PPUSH
69316: LD_VAR 0 5
69320: PPUSH
69321: LD_VAR 0 4
69325: PPUSH
69326: CALL_OW 74
69330: PPUSH
69331: CALL_OW 115
// end ; end ;
69335: GO 68915
69337: POP
69338: POP
// end ;
69339: LD_VAR 0 3
69343: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69344: LD_INT 0
69346: PPUSH
69347: PPUSH
69348: PPUSH
// if not unit or IsInUnit ( unit ) then
69349: LD_VAR 0 1
69353: NOT
69354: PUSH
69355: LD_VAR 0 1
69359: PPUSH
69360: CALL_OW 310
69364: OR
69365: IFFALSE 69369
// exit ;
69367: GO 69460
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69369: LD_ADDR_VAR 0 4
69373: PUSH
69374: LD_VAR 0 1
69378: PPUSH
69379: CALL_OW 250
69383: PPUSH
69384: LD_VAR 0 2
69388: PPUSH
69389: LD_INT 1
69391: PPUSH
69392: CALL_OW 272
69396: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69397: LD_ADDR_VAR 0 5
69401: PUSH
69402: LD_VAR 0 1
69406: PPUSH
69407: CALL_OW 251
69411: PPUSH
69412: LD_VAR 0 2
69416: PPUSH
69417: LD_INT 1
69419: PPUSH
69420: CALL_OW 273
69424: ST_TO_ADDR
// if ValidHex ( x , y ) then
69425: LD_VAR 0 4
69429: PPUSH
69430: LD_VAR 0 5
69434: PPUSH
69435: CALL_OW 488
69439: IFFALSE 69460
// ComTurnXY ( unit , x , y ) ;
69441: LD_VAR 0 1
69445: PPUSH
69446: LD_VAR 0 4
69450: PPUSH
69451: LD_VAR 0 5
69455: PPUSH
69456: CALL_OW 118
// end ;
69460: LD_VAR 0 3
69464: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69465: LD_INT 0
69467: PPUSH
69468: PPUSH
// result := false ;
69469: LD_ADDR_VAR 0 3
69473: PUSH
69474: LD_INT 0
69476: ST_TO_ADDR
// if not units then
69477: LD_VAR 0 2
69481: NOT
69482: IFFALSE 69486
// exit ;
69484: GO 69531
// for i in units do
69486: LD_ADDR_VAR 0 4
69490: PUSH
69491: LD_VAR 0 2
69495: PUSH
69496: FOR_IN
69497: IFFALSE 69529
// if See ( side , i ) then
69499: LD_VAR 0 1
69503: PPUSH
69504: LD_VAR 0 4
69508: PPUSH
69509: CALL_OW 292
69513: IFFALSE 69527
// begin result := true ;
69515: LD_ADDR_VAR 0 3
69519: PUSH
69520: LD_INT 1
69522: ST_TO_ADDR
// exit ;
69523: POP
69524: POP
69525: GO 69531
// end ;
69527: GO 69496
69529: POP
69530: POP
// end ;
69531: LD_VAR 0 3
69535: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69536: LD_INT 0
69538: PPUSH
69539: PPUSH
69540: PPUSH
69541: PPUSH
// if not unit or not points then
69542: LD_VAR 0 1
69546: NOT
69547: PUSH
69548: LD_VAR 0 2
69552: NOT
69553: OR
69554: IFFALSE 69558
// exit ;
69556: GO 69648
// dist := 99999 ;
69558: LD_ADDR_VAR 0 5
69562: PUSH
69563: LD_INT 99999
69565: ST_TO_ADDR
// for i in points do
69566: LD_ADDR_VAR 0 4
69570: PUSH
69571: LD_VAR 0 2
69575: PUSH
69576: FOR_IN
69577: IFFALSE 69646
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69579: LD_ADDR_VAR 0 6
69583: PUSH
69584: LD_VAR 0 1
69588: PPUSH
69589: LD_VAR 0 4
69593: PUSH
69594: LD_INT 1
69596: ARRAY
69597: PPUSH
69598: LD_VAR 0 4
69602: PUSH
69603: LD_INT 2
69605: ARRAY
69606: PPUSH
69607: CALL_OW 297
69611: ST_TO_ADDR
// if tmpDist < dist then
69612: LD_VAR 0 6
69616: PUSH
69617: LD_VAR 0 5
69621: LESS
69622: IFFALSE 69644
// begin result := i ;
69624: LD_ADDR_VAR 0 3
69628: PUSH
69629: LD_VAR 0 4
69633: ST_TO_ADDR
// dist := tmpDist ;
69634: LD_ADDR_VAR 0 5
69638: PUSH
69639: LD_VAR 0 6
69643: ST_TO_ADDR
// end ; end ;
69644: GO 69576
69646: POP
69647: POP
// end ;
69648: LD_VAR 0 3
69652: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69653: LD_INT 0
69655: PPUSH
// uc_side := side ;
69656: LD_ADDR_OWVAR 20
69660: PUSH
69661: LD_VAR 0 1
69665: ST_TO_ADDR
// uc_nation := 3 ;
69666: LD_ADDR_OWVAR 21
69670: PUSH
69671: LD_INT 3
69673: ST_TO_ADDR
// vc_chassis := 25 ;
69674: LD_ADDR_OWVAR 37
69678: PUSH
69679: LD_INT 25
69681: ST_TO_ADDR
// vc_engine := engine_siberite ;
69682: LD_ADDR_OWVAR 39
69686: PUSH
69687: LD_INT 3
69689: ST_TO_ADDR
// vc_control := control_computer ;
69690: LD_ADDR_OWVAR 38
69694: PUSH
69695: LD_INT 3
69697: ST_TO_ADDR
// vc_weapon := 59 ;
69698: LD_ADDR_OWVAR 40
69702: PUSH
69703: LD_INT 59
69705: ST_TO_ADDR
// result := CreateVehicle ;
69706: LD_ADDR_VAR 0 5
69710: PUSH
69711: CALL_OW 45
69715: ST_TO_ADDR
// SetDir ( result , d ) ;
69716: LD_VAR 0 5
69720: PPUSH
69721: LD_VAR 0 4
69725: PPUSH
69726: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69730: LD_VAR 0 5
69734: PPUSH
69735: LD_VAR 0 2
69739: PPUSH
69740: LD_VAR 0 3
69744: PPUSH
69745: LD_INT 0
69747: PPUSH
69748: CALL_OW 48
// end ;
69752: LD_VAR 0 5
69756: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69757: LD_INT 0
69759: PPUSH
69760: PPUSH
69761: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69762: LD_ADDR_VAR 0 2
69766: PUSH
69767: LD_INT 0
69769: PUSH
69770: LD_INT 0
69772: PUSH
69773: LD_INT 0
69775: PUSH
69776: LD_INT 0
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69785: LD_VAR 0 1
69789: NOT
69790: PUSH
69791: LD_VAR 0 1
69795: PPUSH
69796: CALL_OW 264
69800: PUSH
69801: LD_INT 12
69803: PUSH
69804: LD_INT 51
69806: PUSH
69807: LD_INT 32
69809: PUSH
69810: LD_EXP 46
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: IN
69821: NOT
69822: OR
69823: IFFALSE 69827
// exit ;
69825: GO 69925
// for i := 1 to 3 do
69827: LD_ADDR_VAR 0 3
69831: PUSH
69832: DOUBLE
69833: LD_INT 1
69835: DEC
69836: ST_TO_ADDR
69837: LD_INT 3
69839: PUSH
69840: FOR_TO
69841: IFFALSE 69923
// begin tmp := GetCargo ( cargo , i ) ;
69843: LD_ADDR_VAR 0 4
69847: PUSH
69848: LD_VAR 0 1
69852: PPUSH
69853: LD_VAR 0 3
69857: PPUSH
69858: CALL_OW 289
69862: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69863: LD_ADDR_VAR 0 2
69867: PUSH
69868: LD_VAR 0 2
69872: PPUSH
69873: LD_VAR 0 3
69877: PPUSH
69878: LD_VAR 0 4
69882: PPUSH
69883: CALL_OW 1
69887: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69888: LD_ADDR_VAR 0 2
69892: PUSH
69893: LD_VAR 0 2
69897: PPUSH
69898: LD_INT 4
69900: PPUSH
69901: LD_VAR 0 2
69905: PUSH
69906: LD_INT 4
69908: ARRAY
69909: PUSH
69910: LD_VAR 0 4
69914: PLUS
69915: PPUSH
69916: CALL_OW 1
69920: ST_TO_ADDR
// end ;
69921: GO 69840
69923: POP
69924: POP
// end ;
69925: LD_VAR 0 2
69929: RET
// export function Length ( array ) ; begin
69930: LD_INT 0
69932: PPUSH
// result := array + 0 ;
69933: LD_ADDR_VAR 0 2
69937: PUSH
69938: LD_VAR 0 1
69942: PUSH
69943: LD_INT 0
69945: PLUS
69946: ST_TO_ADDR
// end ; end_of_file
69947: LD_VAR 0 2
69951: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69952: LD_VAR 0 1
69956: PUSH
69957: LD_INT 200
69959: DOUBLE
69960: GREATEREQUAL
69961: IFFALSE 69969
69963: LD_INT 299
69965: DOUBLE
69966: LESSEQUAL
69967: IFTRUE 69971
69969: GO 70003
69971: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69972: LD_VAR 0 1
69976: PPUSH
69977: LD_VAR 0 2
69981: PPUSH
69982: LD_VAR 0 3
69986: PPUSH
69987: LD_VAR 0 4
69991: PPUSH
69992: LD_VAR 0 5
69996: PPUSH
69997: CALL 25255 0 5
70001: GO 70080
70003: LD_INT 300
70005: DOUBLE
70006: GREATEREQUAL
70007: IFFALSE 70015
70009: LD_INT 399
70011: DOUBLE
70012: LESSEQUAL
70013: IFTRUE 70017
70015: GO 70079
70017: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70018: LD_VAR 0 1
70022: PPUSH
70023: LD_VAR 0 2
70027: PPUSH
70028: LD_VAR 0 3
70032: PPUSH
70033: LD_VAR 0 4
70037: PPUSH
70038: LD_VAR 0 5
70042: PPUSH
70043: LD_VAR 0 6
70047: PPUSH
70048: LD_VAR 0 7
70052: PPUSH
70053: LD_VAR 0 8
70057: PPUSH
70058: LD_VAR 0 9
70062: PPUSH
70063: LD_VAR 0 10
70067: PPUSH
70068: LD_VAR 0 11
70072: PPUSH
70073: CALL 22897 0 11
70077: GO 70080
70079: POP
// end ;
70080: PPOPN 11
70082: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70083: LD_VAR 0 1
70087: PPUSH
70088: LD_VAR 0 2
70092: PPUSH
70093: LD_VAR 0 3
70097: PPUSH
70098: LD_VAR 0 4
70102: PPUSH
70103: LD_VAR 0 5
70107: PPUSH
70108: CALL 24991 0 5
// end ; end_of_file
70112: PPOPN 5
70114: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70115: LD_VAR 0 1
70119: PPUSH
70120: LD_VAR 0 2
70124: PPUSH
70125: LD_VAR 0 3
70129: PPUSH
70130: LD_VAR 0 4
70134: PPUSH
70135: LD_VAR 0 5
70139: PPUSH
70140: LD_VAR 0 6
70144: PPUSH
70145: CALL 10590 0 6
// end ;
70149: PPOPN 6
70151: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70152: LD_INT 0
70154: PPUSH
// begin if not units then
70155: LD_VAR 0 1
70159: NOT
70160: IFFALSE 70164
// exit ;
70162: GO 70252
// if p1 = 1 then
70164: LD_VAR 0 2
70168: PUSH
70169: LD_INT 1
70171: EQUAL
70172: IFFALSE 70252
// begin if p2 = 1 then
70174: LD_VAR 0 3
70178: PUSH
70179: LD_INT 1
70181: EQUAL
70182: IFFALSE 70213
// begin for i in units do
70184: LD_ADDR_VAR 0 7
70188: PUSH
70189: LD_VAR 0 1
70193: PUSH
70194: FOR_IN
70195: IFFALSE 70211
// begin SetUnitAttackType ( i , 3 ) ;
70197: LD_VAR 0 7
70201: PPUSH
70202: LD_INT 3
70204: PPUSH
70205: CALL_OW 603
// end ;
70209: GO 70194
70211: POP
70212: POP
// end ; if p2 = 2 then
70213: LD_VAR 0 3
70217: PUSH
70218: LD_INT 2
70220: EQUAL
70221: IFFALSE 70252
// begin for i in units do
70223: LD_ADDR_VAR 0 7
70227: PUSH
70228: LD_VAR 0 1
70232: PUSH
70233: FOR_IN
70234: IFFALSE 70250
// begin SetUnitAttackType ( i , 1 ) ;
70236: LD_VAR 0 7
70240: PPUSH
70241: LD_INT 1
70243: PPUSH
70244: CALL_OW 603
// end ;
70248: GO 70233
70250: POP
70251: POP
// end ; end ; end ;
70252: PPOPN 7
70254: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70255: CALL 10565 0 0
// end ;
70259: PPOPN 1
70261: END
