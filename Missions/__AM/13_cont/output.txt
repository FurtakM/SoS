// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1290 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1194 0 0
// PrepareDifficulty ;
 207: CALL 6051 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13c_ ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING JMM
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: LD_STRING 13c_
 598: PPUSH
 599: CALL 29976 0 3
 603: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , true , 13c_ ) ;
 604: LD_ADDR_EXP 2
 608: PUSH
 609: LD_STRING Stevens
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 29976 0 3
 622: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 13c_ ) ;
 623: LD_ADDR_EXP 3
 627: PUSH
 628: LD_STRING Lisa
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_STRING 13c_
 636: PPUSH
 637: CALL 29976 0 3
 641: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 13c_ ) ;
 642: LD_ADDR_EXP 4
 646: PUSH
 647: LD_STRING Donaldson
 649: PPUSH
 650: LD_INT 1
 652: PPUSH
 653: LD_STRING 13c_
 655: PPUSH
 656: CALL 29976 0 3
 660: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 13c_ ) ;
 661: LD_ADDR_EXP 5
 665: PUSH
 666: LD_STRING Bobby
 668: PPUSH
 669: LD_INT 1
 671: PPUSH
 672: LD_STRING 13c_
 674: PPUSH
 675: CALL 29976 0 3
 679: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 13c_ ) ;
 680: LD_ADDR_EXP 6
 684: PUSH
 685: LD_STRING Cyrus
 687: PPUSH
 688: LD_INT 1
 690: PPUSH
 691: LD_STRING 13c_
 693: PPUSH
 694: CALL 29976 0 3
 698: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 13c_ ) ;
 699: LD_ADDR_EXP 7
 703: PUSH
 704: LD_STRING Denis
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: LD_STRING 13c_
 712: PPUSH
 713: CALL 29976 0 3
 717: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 13c_ ) ;
 718: LD_ADDR_EXP 8
 722: PUSH
 723: LD_STRING Brown
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: LD_STRING 13c_
 731: PPUSH
 732: CALL 29976 0 3
 736: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 13c_ ) ;
 737: LD_ADDR_EXP 9
 741: PUSH
 742: LD_STRING Gladstone
 744: PPUSH
 745: LD_INT 1
 747: PPUSH
 748: LD_STRING 13c_
 750: PPUSH
 751: CALL 29976 0 3
 755: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 13c_ ) ;
 756: LD_ADDR_EXP 10
 760: PUSH
 761: LD_STRING Houten
 763: PPUSH
 764: LD_INT 1
 766: PPUSH
 767: LD_STRING 13c_
 769: PPUSH
 770: CALL 29976 0 3
 774: ST_TO_ADDR
// Cornel = PrepareUnit ( Cornel , true , 13c_ ) ;
 775: LD_ADDR_EXP 11
 779: PUSH
 780: LD_STRING Cornel
 782: PPUSH
 783: LD_INT 1
 785: PPUSH
 786: LD_STRING 13c_
 788: PPUSH
 789: CALL 29976 0 3
 793: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 13c_ ) ;
 794: LD_ADDR_EXP 12
 798: PUSH
 799: LD_STRING Gary
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: LD_STRING 13c_
 807: PPUSH
 808: CALL 29976 0 3
 812: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 13c_ ) ;
 813: LD_ADDR_EXP 13
 817: PUSH
 818: LD_STRING Frank
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: LD_STRING 13c_
 826: PPUSH
 827: CALL 29976 0 3
 831: ST_TO_ADDR
// Kikuchi = PrepareUnit ( Kikuchi , true , 13c_ ) ;
 832: LD_ADDR_EXP 14
 836: PUSH
 837: LD_STRING Kikuchi
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: LD_STRING 13c_
 845: PPUSH
 846: CALL 29976 0 3
 850: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 851: LD_ADDR_EXP 15
 855: PUSH
 856: LD_STRING Powell
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: LD_STRING 
 864: PPUSH
 865: CALL 29976 0 3
 869: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 870: LD_ADDR_VAR 0 2
 874: PUSH
 875: LD_EXP 1
 879: PUSH
 880: LD_EXP 2
 884: PUSH
 885: LD_EXP 3
 889: PUSH
 890: LD_EXP 4
 894: PUSH
 895: LD_EXP 5
 899: PUSH
 900: LD_EXP 6
 904: PUSH
 905: LD_EXP 7
 909: PUSH
 910: LD_EXP 8
 914: PUSH
 915: LD_EXP 9
 919: PUSH
 920: LD_EXP 10
 924: PUSH
 925: LD_EXP 11
 929: PUSH
 930: LD_EXP 12
 934: PUSH
 935: LD_EXP 13
 939: PUSH
 940: LD_EXP 14
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 961: LD_ADDR_VAR 0 3
 965: PUSH
 966: LD_INT 22
 968: PUSH
 969: LD_INT 1
 971: PUSH
 972: EMPTY
 973: LIST
 974: LIST
 975: PUSH
 976: LD_INT 33
 978: PUSH
 979: LD_INT 1
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PUSH
 986: LD_INT 21
 988: PUSH
 989: LD_INT 2
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: LIST
1000: PPUSH
1001: CALL_OW 69
1005: ST_TO_ADDR
// for i = tmp downto 1 do
1006: LD_ADDR_VAR 0 4
1010: PUSH
1011: DOUBLE
1012: LD_VAR 0 2
1016: INC
1017: ST_TO_ADDR
1018: LD_INT 1
1020: PUSH
1021: FOR_DOWNTO
1022: IFFALSE 1059
// if not tmp [ i ] then
1024: LD_VAR 0 2
1028: PUSH
1029: LD_VAR 0 4
1033: ARRAY
1034: NOT
1035: IFFALSE 1057
// tmp := Delete ( tmp , i ) ;
1037: LD_ADDR_VAR 0 2
1041: PUSH
1042: LD_VAR 0 2
1046: PPUSH
1047: LD_VAR 0 4
1051: PPUSH
1052: CALL_OW 3
1056: ST_TO_ADDR
1057: GO 1021
1059: POP
1060: POP
// for i = 1 to tmp do
1061: LD_ADDR_VAR 0 4
1065: PUSH
1066: DOUBLE
1067: LD_INT 1
1069: DEC
1070: ST_TO_ADDR
1071: LD_VAR 0 2
1075: PUSH
1076: FOR_TO
1077: IFFALSE 1107
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1079: LD_VAR 0 2
1083: PUSH
1084: LD_VAR 0 4
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 3
1094: PUSH
1095: LD_VAR 0 4
1099: ARRAY
1100: PPUSH
1101: CALL_OW 52
1105: GO 1076
1107: POP
1108: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1109: LD_INT 22
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 25
1121: PUSH
1122: LD_INT 2
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PPUSH
1133: CALL_OW 69
1137: PUSH
1138: LD_INT 0
1140: EQUAL
1141: PUSH
1142: LD_INT 22
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 34
1154: PUSH
1155: LD_INT 13
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: PPUSH
1166: CALL_OW 69
1170: PUSH
1171: LD_INT 0
1173: EQUAL
1174: AND
1175: IFFALSE 1189
// SetClass ( JMM , 2 ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_INT 2
1184: PPUSH
1185: CALL_OW 336
// end ;
1189: LD_VAR 0 1
1193: RET
// export function PrepareAmericansRandom ; var i ; begin
1194: LD_INT 0
1196: PPUSH
1197: PPUSH
// uc_side = 1 ;
1198: LD_ADDR_OWVAR 20
1202: PUSH
1203: LD_INT 1
1205: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1206: LD_ADDR_EXP 16
1210: PUSH
1211: LD_STRING 13c_others
1213: PPUSH
1214: CALL_OW 31
1218: ST_TO_ADDR
// for i in others13 do
1219: LD_ADDR_VAR 0 2
1223: PUSH
1224: LD_EXP 16
1228: PUSH
1229: FOR_IN
1230: IFFALSE 1283
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1232: LD_VAR 0 2
1236: PPUSH
1237: LD_INT 22
1239: PUSH
1240: LD_INT 1
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 21
1249: PUSH
1250: LD_INT 2
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: LD_INT 58
1259: PUSH
1260: EMPTY
1261: LIST
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 69
1272: PUSH
1273: LD_INT 1
1275: ARRAY
1276: PPUSH
1277: CALL_OW 52
1281: GO 1229
1283: POP
1284: POP
// end ;
1285: LD_VAR 0 1
1289: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1290: LD_INT 0
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1298: LD_ADDR_VAR 0 5
1302: PUSH
1303: LD_STRING 13_VehiclesIn13_1
1305: PPUSH
1306: EMPTY
1307: PPUSH
1308: CALL_OW 30
1312: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1313: LD_ADDR_EXP 24
1317: PUSH
1318: LD_STRING 13_ResourcesInCargo13_1
1320: PPUSH
1321: EMPTY
1322: PPUSH
1323: CALL_OW 30
1327: ST_TO_ADDR
// cargoList = [ ] ;
1328: LD_ADDR_VAR 0 6
1332: PUSH
1333: EMPTY
1334: ST_TO_ADDR
// uc_side = 1 ;
1335: LD_ADDR_OWVAR 20
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// if vehicles > 0 then
1343: LD_VAR 0 5
1347: PUSH
1348: LD_INT 0
1350: GREATER
1351: IFFALSE 1706
// begin for i := 1 to vehicles do
1353: LD_ADDR_VAR 0 2
1357: PUSH
1358: DOUBLE
1359: LD_INT 1
1361: DEC
1362: ST_TO_ADDR
1363: LD_VAR 0 5
1367: PUSH
1368: FOR_TO
1369: IFFALSE 1518
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1371: LD_ADDR_OWVAR 21
1375: PUSH
1376: LD_VAR 0 5
1380: PUSH
1381: LD_VAR 0 2
1385: ARRAY
1386: PUSH
1387: LD_INT 1
1389: ARRAY
1390: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1391: LD_ADDR_OWVAR 37
1395: PUSH
1396: LD_VAR 0 5
1400: PUSH
1401: LD_VAR 0 2
1405: ARRAY
1406: PUSH
1407: LD_INT 2
1409: ARRAY
1410: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1411: LD_ADDR_OWVAR 39
1415: PUSH
1416: LD_VAR 0 5
1420: PUSH
1421: LD_VAR 0 2
1425: ARRAY
1426: PUSH
1427: LD_INT 3
1429: ARRAY
1430: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1431: LD_ADDR_OWVAR 38
1435: PUSH
1436: LD_VAR 0 5
1440: PUSH
1441: LD_VAR 0 2
1445: ARRAY
1446: PUSH
1447: LD_INT 4
1449: ARRAY
1450: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1451: LD_ADDR_OWVAR 40
1455: PUSH
1456: LD_VAR 0 5
1460: PUSH
1461: LD_VAR 0 2
1465: ARRAY
1466: PUSH
1467: LD_INT 5
1469: ARRAY
1470: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1471: LD_ADDR_OWVAR 41
1475: PUSH
1476: LD_INT 40
1478: ST_TO_ADDR
// veh = CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 2
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
// end ;
1516: GO 1368
1518: POP
1519: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1520: LD_ADDR_VAR 0 6
1524: PUSH
1525: LD_INT 22
1527: PUSH
1528: LD_INT 1
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 21
1537: PUSH
1538: LD_INT 2
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 34
1547: PUSH
1548: LD_INT 12
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PPUSH
1560: CALL_OW 69
1564: ST_TO_ADDR
// if cargoList > 0 then
1565: LD_VAR 0 6
1569: PUSH
1570: LD_INT 0
1572: GREATER
1573: IFFALSE 1706
// for i = 1 to cargoList do
1575: LD_ADDR_VAR 0 2
1579: PUSH
1580: DOUBLE
1581: LD_INT 1
1583: DEC
1584: ST_TO_ADDR
1585: LD_VAR 0 6
1589: PUSH
1590: FOR_TO
1591: IFFALSE 1704
// begin if resources > 0 then
1593: LD_EXP 24
1597: PUSH
1598: LD_INT 0
1600: GREATER
1601: IFFALSE 1702
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1603: LD_VAR 0 6
1607: PUSH
1608: LD_VAR 0 2
1612: ARRAY
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: LD_EXP 24
1621: PUSH
1622: LD_VAR 0 2
1626: ARRAY
1627: PUSH
1628: LD_INT 1
1630: ARRAY
1631: PPUSH
1632: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1636: LD_VAR 0 6
1640: PUSH
1641: LD_VAR 0 2
1645: ARRAY
1646: PPUSH
1647: LD_INT 2
1649: PPUSH
1650: LD_EXP 24
1654: PUSH
1655: LD_VAR 0 2
1659: ARRAY
1660: PUSH
1661: LD_INT 2
1663: ARRAY
1664: PPUSH
1665: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1669: LD_VAR 0 6
1673: PUSH
1674: LD_VAR 0 2
1678: ARRAY
1679: PPUSH
1680: LD_INT 3
1682: PPUSH
1683: LD_EXP 24
1687: PUSH
1688: LD_VAR 0 2
1692: ARRAY
1693: PUSH
1694: LD_INT 3
1696: ARRAY
1697: PPUSH
1698: CALL_OW 291
// end ; end ;
1702: GO 1590
1704: POP
1705: POP
// end ; end ;
1706: LD_VAR 0 1
1710: RET
// export function PowellSupport ; var i , veh , un ; begin
1711: LD_INT 0
1713: PPUSH
1714: PPUSH
1715: PPUSH
1716: PPUSH
// for i = 1 to 3 do
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: DOUBLE
1723: LD_INT 1
1725: DEC
1726: ST_TO_ADDR
1727: LD_INT 3
1729: PUSH
1730: FOR_TO
1731: IFFALSE 1932
// begin uc_nation = 1 ;
1733: LD_ADDR_OWVAR 21
1737: PUSH
1738: LD_INT 1
1740: ST_TO_ADDR
// uc_side = 1 ;
1741: LD_ADDR_OWVAR 20
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// vc_engine = 3 ;
1749: LD_ADDR_OWVAR 39
1753: PUSH
1754: LD_INT 3
1756: ST_TO_ADDR
// vc_control = 1 ;
1757: LD_ADDR_OWVAR 38
1761: PUSH
1762: LD_INT 1
1764: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1765: LD_ADDR_OWVAR 40
1769: PUSH
1770: LD_INT 9
1772: PUSH
1773: LD_INT 5
1775: PUSH
1776: LD_INT 4
1778: PUSH
1779: LD_INT 7
1781: PUSH
1782: LD_INT 6
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: PUSH
1792: LD_INT 1
1794: PPUSH
1795: LD_INT 5
1797: PPUSH
1798: CALL_OW 12
1802: ARRAY
1803: ST_TO_ADDR
// if vc_weapon = 6 then
1804: LD_OWVAR 40
1808: PUSH
1809: LD_INT 6
1811: EQUAL
1812: IFFALSE 1824
// vc_chassis = 4 else
1814: LD_ADDR_OWVAR 37
1818: PUSH
1819: LD_INT 4
1821: ST_TO_ADDR
1822: GO 1832
// vc_chassis = 3 ;
1824: LD_ADDR_OWVAR 37
1828: PUSH
1829: LD_INT 3
1831: ST_TO_ADDR
// veh = CreateVehicle ;
1832: LD_ADDR_VAR 0 3
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 3
1846: PPUSH
1847: LD_INT 2
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// SetDir ( veh , 1 ) ;
1857: LD_VAR 0 3
1861: PPUSH
1862: LD_INT 1
1864: PPUSH
1865: CALL_OW 233
// hc_gallery =  ;
1869: LD_ADDR_OWVAR 33
1873: PUSH
1874: LD_STRING 
1876: ST_TO_ADDR
// hc_name =  ;
1877: LD_ADDR_OWVAR 26
1881: PUSH
1882: LD_STRING 
1884: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1885: LD_INT 0
1887: PPUSH
1888: LD_INT 3
1890: PPUSH
1891: LD_INT 7
1893: PPUSH
1894: LD_INT 10
1896: PPUSH
1897: CALL_OW 12
1901: PPUSH
1902: CALL_OW 380
// un = CreateHuman ;
1906: LD_ADDR_VAR 0 4
1910: PUSH
1911: CALL_OW 44
1915: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1916: LD_VAR 0 4
1920: PPUSH
1921: LD_VAR 0 3
1925: PPUSH
1926: CALL_OW 52
// end ;
1930: GO 1730
1932: POP
1933: POP
// end ; end_of_file
1934: LD_VAR 0 1
1938: RET
// export function PrepareBurlak ; begin
1939: LD_INT 0
1941: PPUSH
// uc_side = 7 ;
1942: LD_ADDR_OWVAR 20
1946: PUSH
1947: LD_INT 7
1949: ST_TO_ADDR
// uc_nation = 3 ;
1950: LD_ADDR_OWVAR 21
1954: PUSH
1955: LD_INT 3
1957: ST_TO_ADDR
// vc_engine = 3 ;
1958: LD_ADDR_OWVAR 39
1962: PUSH
1963: LD_INT 3
1965: ST_TO_ADDR
// vc_control = 1 ;
1966: LD_ADDR_OWVAR 38
1970: PUSH
1971: LD_INT 1
1973: ST_TO_ADDR
// vc_weapon = 46 ;
1974: LD_ADDR_OWVAR 40
1978: PUSH
1979: LD_INT 46
1981: ST_TO_ADDR
// vc_chassis = 24 ;
1982: LD_ADDR_OWVAR 37
1986: PUSH
1987: LD_INT 24
1989: ST_TO_ADDR
// Masha = CreateVehicle ;
1990: LD_ADDR_EXP 18
1994: PUSH
1995: CALL_OW 45
1999: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2000: LD_EXP 18
2004: PPUSH
2005: LD_INT 3
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2015: LD_EXP 18
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2027: LD_ADDR_EXP 17
2031: PUSH
2032: LD_STRING Burlak
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: LD_STRING 
2040: PPUSH
2041: CALL 29976 0 3
2045: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2046: LD_EXP 17
2050: PPUSH
2051: LD_EXP 18
2055: PPUSH
2056: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2060: LD_EXP 18
2064: PPUSH
2065: LD_INT 107
2067: PPUSH
2068: LD_INT 118
2070: PPUSH
2071: CALL_OW 114
// spawnBurlak = 1 ;
2075: LD_ADDR_EXP 27
2079: PUSH
2080: LD_INT 1
2082: ST_TO_ADDR
// end ;
2083: LD_VAR 0 1
2087: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2088: LD_INT 0
2090: PPUSH
2091: PPUSH
2092: PPUSH
2093: PPUSH
// uc_side = 7 ;
2094: LD_ADDR_OWVAR 20
2098: PUSH
2099: LD_INT 7
2101: ST_TO_ADDR
// uc_nation = 3 ;
2102: LD_ADDR_OWVAR 21
2106: PUSH
2107: LD_INT 3
2109: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ,  ) ;
2110: LD_ADDR_EXP 19
2114: PUSH
2115: LD_STRING Gnyevko
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: LD_STRING 
2123: PPUSH
2124: CALL 29976 0 3
2128: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ,  ) ;
2129: LD_ADDR_EXP 20
2133: PUSH
2134: LD_STRING Titov
2136: PPUSH
2137: LD_INT 0
2139: PPUSH
2140: LD_STRING 
2142: PPUSH
2143: CALL 29976 0 3
2147: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ,  ) ;
2148: LD_ADDR_EXP 21
2152: PUSH
2153: LD_STRING Xavier2
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: LD_STRING 
2161: PPUSH
2162: CALL 29976 0 3
2166: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ,  ) ;
2167: LD_ADDR_EXP 22
2171: PUSH
2172: LD_STRING Belkov
2174: PPUSH
2175: LD_INT 0
2177: PPUSH
2178: LD_STRING 
2180: PPUSH
2181: CALL 29976 0 3
2185: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ,  ) ;
2186: LD_ADDR_EXP 23
2190: PUSH
2191: LD_STRING Lipshchin
2193: PPUSH
2194: LD_INT 0
2196: PPUSH
2197: LD_STRING 
2199: PPUSH
2200: CALL 29976 0 3
2204: ST_TO_ADDR
// for i = 1 to 5 do
2205: LD_ADDR_VAR 0 2
2209: PUSH
2210: DOUBLE
2211: LD_INT 1
2213: DEC
2214: ST_TO_ADDR
2215: LD_INT 5
2217: PUSH
2218: FOR_TO
2219: IFFALSE 2307
// begin vc_engine = 3 ;
2221: LD_ADDR_OWVAR 39
2225: PUSH
2226: LD_INT 3
2228: ST_TO_ADDR
// vc_control = 1 ;
2229: LD_ADDR_OWVAR 38
2233: PUSH
2234: LD_INT 1
2236: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2237: LD_ADDR_OWVAR 40
2241: PUSH
2242: LD_INT 43
2244: PUSH
2245: LD_INT 44
2247: PUSH
2248: LD_INT 45
2250: PUSH
2251: LD_INT 49
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 1
2262: PPUSH
2263: LD_INT 4
2265: PPUSH
2266: CALL_OW 12
2270: ARRAY
2271: ST_TO_ADDR
// vc_chassis = 22 ;
2272: LD_ADDR_OWVAR 37
2276: PUSH
2277: LD_INT 22
2279: ST_TO_ADDR
// veh = CreateVehicle ;
2280: LD_ADDR_VAR 0 3
2284: PUSH
2285: CALL_OW 45
2289: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2290: LD_VAR 0 3
2294: PPUSH
2295: LD_INT 3
2297: PPUSH
2298: LD_INT 0
2300: PPUSH
2301: CALL_OW 49
// end ;
2305: GO 2218
2307: POP
2308: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2309: LD_ADDR_VAR 0 4
2313: PUSH
2314: LD_INT 22
2316: PUSH
2317: LD_INT 7
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 21
2326: PUSH
2327: LD_INT 2
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: PUSH
2334: LD_INT 58
2336: PUSH
2337: EMPTY
2338: LIST
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: LIST
2344: PPUSH
2345: CALL_OW 69
2349: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2350: LD_EXP 19
2354: PPUSH
2355: LD_VAR 0 4
2359: PUSH
2360: LD_INT 1
2362: ARRAY
2363: PPUSH
2364: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2368: LD_EXP 20
2372: PPUSH
2373: LD_VAR 0 4
2377: PUSH
2378: LD_INT 2
2380: ARRAY
2381: PPUSH
2382: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2386: LD_EXP 21
2390: PPUSH
2391: LD_VAR 0 4
2395: PUSH
2396: LD_INT 3
2398: ARRAY
2399: PPUSH
2400: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2404: LD_EXP 22
2408: PPUSH
2409: LD_VAR 0 4
2413: PUSH
2414: LD_INT 4
2416: ARRAY
2417: PPUSH
2418: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2422: LD_EXP 23
2426: PPUSH
2427: LD_VAR 0 4
2431: PUSH
2432: LD_INT 5
2434: ARRAY
2435: PPUSH
2436: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2440: LD_EXP 19
2444: PPUSH
2445: LD_INT 3
2447: PPUSH
2448: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2452: LD_EXP 20
2456: PUSH
2457: LD_EXP 23
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PPUSH
2466: LD_INT 9
2468: PPUSH
2469: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2473: LD_ADDR_VAR 0 4
2477: PUSH
2478: LD_INT 22
2480: PUSH
2481: LD_INT 7
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: PPUSH
2488: CALL_OW 69
2492: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2493: LD_VAR 0 4
2497: PPUSH
2498: LD_INT 107
2500: PPUSH
2501: LD_INT 118
2503: PPUSH
2504: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2508: LD_INT 35
2510: PPUSH
2511: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2515: LD_VAR 0 4
2519: PPUSH
2520: LD_INT 34
2522: PUSH
2523: LD_INT 49
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PPUSH
2530: CALL_OW 72
2534: PPUSH
2535: LD_EXP 18
2539: PPUSH
2540: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2544: LD_VAR 0 4
2548: PPUSH
2549: LD_INT 3
2551: PUSH
2552: LD_INT 34
2554: PUSH
2555: LD_INT 49
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PPUSH
2566: CALL_OW 72
2570: PPUSH
2571: LD_INT 107
2573: PPUSH
2574: LD_INT 118
2576: PPUSH
2577: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2581: LD_VAR 0 4
2585: PPUSH
2586: LD_INT 34
2588: PUSH
2589: LD_INT 49
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: PPUSH
2596: CALL_OW 72
2600: PUSH
2601: LD_INT 0
2603: EQUAL
2604: PUSH
2605: LD_EXP 18
2609: PPUSH
2610: CALL_OW 303
2614: OR
2615: IFFALSE 2508
// repeat wait ( 0 0$1 ) ;
2617: LD_INT 35
2619: PPUSH
2620: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2624: LD_ADDR_VAR 0 4
2628: PUSH
2629: LD_INT 22
2631: PUSH
2632: LD_INT 7
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: PUSH
2644: LD_EXP 17
2648: DIFF
2649: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2650: LD_VAR 0 4
2654: PPUSH
2655: LD_INT 107
2657: PPUSH
2658: LD_INT 118
2660: PPUSH
2661: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2665: LD_EXP 17
2669: PPUSH
2670: CALL_OW 302
2674: PUSH
2675: LD_EXP 17
2679: PPUSH
2680: CALL_OW 310
2684: NOT
2685: AND
2686: IFFALSE 2703
// ComMoveXY ( Burlak , 107 , 118 ) ;
2688: LD_EXP 17
2692: PPUSH
2693: LD_INT 107
2695: PPUSH
2696: LD_INT 118
2698: PPUSH
2699: CALL_OW 111
// until not tmp ;
2703: LD_VAR 0 4
2707: NOT
2708: IFFALSE 2617
// end ; end_of_file
2710: LD_VAR 0 1
2714: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2715: LD_EXP 31
2719: IFFALSE 2895
2721: GO 2723
2723: DISABLE
2724: LD_INT 0
2726: PPUSH
2727: PPUSH
// begin enable ;
2728: ENABLE
// rnd = 0 ;
2729: LD_ADDR_VAR 0 2
2733: PUSH
2734: LD_INT 0
2736: ST_TO_ADDR
// uc_side = 8 ;
2737: LD_ADDR_OWVAR 20
2741: PUSH
2742: LD_INT 8
2744: ST_TO_ADDR
// uc_nation = 2 ;
2745: LD_ADDR_OWVAR 21
2749: PUSH
2750: LD_INT 2
2752: ST_TO_ADDR
// hc_name =  ;
2753: LD_ADDR_OWVAR 26
2757: PUSH
2758: LD_STRING 
2760: ST_TO_ADDR
// hc_gallery =  ;
2761: LD_ADDR_OWVAR 33
2765: PUSH
2766: LD_STRING 
2768: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2769: LD_INT 0
2771: PPUSH
2772: LD_INT 4
2774: PPUSH
2775: LD_INT 10
2777: PPUSH
2778: CALL_OW 380
// un = CreateHuman ;
2782: LD_ADDR_VAR 0 1
2786: PUSH
2787: CALL_OW 44
2791: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2792: LD_VAR 0 1
2796: PPUSH
2797: LD_INT 8
2799: PUSH
2800: LD_INT 9
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 1
2809: PPUSH
2810: LD_INT 2
2812: PPUSH
2813: CALL_OW 12
2817: ARRAY
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 49
// SetTag ( un , 1 ) ;
2826: LD_VAR 0 1
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
2838: LD_ADDR_VAR 0 2
2842: PUSH
2843: LD_INT 1
2845: PPUSH
2846: LD_EXP 31
2850: PPUSH
2851: CALL_OW 12
2855: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
2856: LD_VAR 0 1
2860: PPUSH
2861: LD_EXP 31
2865: PUSH
2866: LD_VAR 0 2
2870: ARRAY
2871: PUSH
2872: LD_INT 1
2874: ARRAY
2875: PPUSH
2876: LD_EXP 31
2880: PUSH
2881: LD_VAR 0 2
2885: ARRAY
2886: PUSH
2887: LD_INT 2
2889: ARRAY
2890: PPUSH
2891: CALL_OW 158
// end ;
2895: PPOPN 2
2897: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
2898: LD_INT 22
2900: PUSH
2901: LD_INT 8
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: LD_INT 3
2910: PUSH
2911: LD_INT 61
2913: PUSH
2914: EMPTY
2915: LIST
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: LD_INT 33
2923: PUSH
2924: LD_INT 2
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 69
2940: IFFALSE 3013
2942: GO 2944
2944: DISABLE
2945: LD_INT 0
2947: PPUSH
// begin enable ;
2948: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
2949: LD_ADDR_VAR 0 1
2953: PUSH
2954: LD_INT 22
2956: PUSH
2957: LD_INT 8
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: PUSH
2964: LD_INT 3
2966: PUSH
2967: LD_INT 61
2969: PUSH
2970: EMPTY
2971: LIST
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PUSH
2977: LD_INT 33
2979: PUSH
2980: LD_INT 2
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: LIST
2991: PPUSH
2992: CALL_OW 69
2996: PUSH
2997: FOR_IN
2998: IFFALSE 3011
// Connect ( i ) ;
3000: LD_VAR 0 1
3004: PPUSH
3005: CALL 37855 0 1
3009: GO 2997
3011: POP
3012: POP
// end ; end_of_file
3013: PPOPN 1
3015: END
// every 1 do
3016: GO 3018
3018: DISABLE
// begin InGameOn ;
3019: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3023: LD_INT 22
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: LD_INT 21
3035: PUSH
3036: LD_INT 2
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: PUSH
3052: LD_INT 1
3054: ARRAY
3055: PPUSH
3056: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3060: LD_INT 22
3062: PUSH
3063: LD_INT 1
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: LD_INT 21
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 69
3088: PPUSH
3089: LD_INT 69
3091: PPUSH
3092: LD_INT 94
3094: PPUSH
3095: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3099: LD_EXP 1
3103: PPUSH
3104: LD_STRING D2-JMM-1
3106: PPUSH
3107: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3111: LD_INT 22
3113: PUSH
3114: LD_INT 1
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 21
3123: PUSH
3124: LD_INT 2
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: CALL_OW 69
3139: PUSH
3140: LD_INT 1
3142: ARRAY
3143: PPUSH
3144: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3148: LD_EXP 2
3152: PPUSH
3153: LD_STRING D2-Huck-1
3155: PPUSH
3156: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3160: LD_INT 22
3162: PUSH
3163: LD_INT 1
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 21
3172: PUSH
3173: LD_INT 2
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PPUSH
3184: CALL_OW 69
3188: PUSH
3189: LD_INT 1
3191: ARRAY
3192: PPUSH
3193: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3197: LD_EXP 1
3201: PPUSH
3202: LD_STRING D2-JMM-2
3204: PPUSH
3205: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3209: LD_INT 22
3211: PUSH
3212: LD_INT 1
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: LD_INT 21
3221: PUSH
3222: LD_INT 2
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PPUSH
3233: CALL_OW 69
3237: PUSH
3238: LD_INT 1
3240: ARRAY
3241: PPUSH
3242: CALL_OW 87
// InGameOff ;
3246: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3250: LD_STRING M1
3252: PPUSH
3253: CALL_OW 337
// SaveForQuickRestart ;
3257: CALL_OW 22
// end ;
3261: END
// every 10 10$0 do
3262: GO 3264
3264: DISABLE
// begin DialogueOn ;
3265: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3269: LD_EXP 15
3273: PPUSH
3274: LD_STRING D3-Pow-1
3276: PPUSH
3277: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3281: LD_EXP 1
3285: PPUSH
3286: LD_STRING D3-JMM-1
3288: PPUSH
3289: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3293: LD_EXP 15
3297: PPUSH
3298: LD_STRING D3-Pow-2
3300: PPUSH
3301: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3305: LD_EXP 1
3309: PPUSH
3310: LD_STRING D3-JMM-2
3312: PPUSH
3313: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3317: LD_EXP 15
3321: PPUSH
3322: LD_STRING D3-Pow-3
3324: PPUSH
3325: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3329: LD_EXP 1
3333: PPUSH
3334: LD_STRING D3-JMM-3
3336: PPUSH
3337: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3341: LD_EXP 15
3345: PPUSH
3346: LD_STRING D3-Pow-4
3348: PPUSH
3349: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3353: LD_EXP 1
3357: PPUSH
3358: LD_STRING D3-JMM-4
3360: PPUSH
3361: CALL_OW 88
// DialogueOff ;
3365: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3369: LD_STRING M2
3371: PPUSH
3372: CALL_OW 337
// wait ( 2 2$30 ) ;
3376: LD_INT 5250
3378: PPUSH
3379: CALL_OW 67
// PrepareBurlak ;
3383: CALL 1939 0 0
// BurlakArmy ;
3387: CALL 2088 0 0
// end ;
3391: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3392: LD_INT 1
3394: PPUSH
3395: LD_EXP 18
3399: PPUSH
3400: CALL_OW 292
3404: IFFALSE 3563
3406: GO 3408
3408: DISABLE
// begin DialogueOn ;
3409: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3413: LD_EXP 18
3417: PPUSH
3418: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3422: LD_INT 22
3424: PUSH
3425: LD_INT 1
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 26
3434: PUSH
3435: LD_INT 1
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: LD_INT 25
3447: PUSH
3448: LD_INT 1
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 25
3457: PUSH
3458: LD_INT 2
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: LD_INT 25
3467: PUSH
3468: LD_INT 3
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 25
3477: PUSH
3478: LD_INT 4
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PUSH
3485: LD_INT 25
3487: PUSH
3488: LD_INT 5
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: PPUSH
3508: CALL_OW 69
3512: PPUSH
3513: LD_STRING D5-Sol1-1
3515: PPUSH
3516: LD_STRING D5-FSol1-1
3518: PPUSH
3519: CALL 5850 0 3
// Say ( JMM , D5-JMM-1 ) ;
3523: LD_EXP 1
3527: PPUSH
3528: LD_STRING D5-JMM-1
3530: PPUSH
3531: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3535: LD_EXP 17
3539: PPUSH
3540: LD_STRING DAmer-Bur-1
3542: PPUSH
3543: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_STRING DAmer-JMM-1
3554: PPUSH
3555: CALL_OW 88
// DialogueOff ;
3559: CALL_OW 7
// end ;
3563: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3564: LD_INT 4
3566: PPUSH
3567: LD_INT 22
3569: PUSH
3570: LD_INT 7
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: PPUSH
3577: CALL_OW 70
3581: IFFALSE 3980
3583: GO 3585
3585: DISABLE
3586: LD_INT 0
3588: PPUSH
// begin enable ;
3589: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3590: LD_ADDR_VAR 0 1
3594: PUSH
3595: LD_INT 4
3597: PPUSH
3598: LD_INT 22
3600: PUSH
3601: LD_INT 7
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 70
3612: PUSH
3613: FOR_IN
3614: IFFALSE 3978
// begin if i = Burlak or i = Masha then
3616: LD_VAR 0 1
3620: PUSH
3621: LD_EXP 17
3625: EQUAL
3626: PUSH
3627: LD_VAR 0 1
3631: PUSH
3632: LD_EXP 18
3636: EQUAL
3637: OR
3638: IFFALSE 3785
// begin RemoveUnit ( i ) ;
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 64
// DialogueOn ;
3649: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3653: LD_EXP 1
3657: PPUSH
3658: LD_STRING D5a-JMM-1
3660: PPUSH
3661: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3665: LD_INT 22
3667: PUSH
3668: LD_INT 1
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 26
3677: PUSH
3678: LD_INT 1
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 2
3687: PUSH
3688: LD_INT 25
3690: PUSH
3691: LD_INT 1
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 25
3700: PUSH
3701: LD_INT 2
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 3
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 25
3720: PUSH
3721: LD_INT 4
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: PUSH
3728: LD_INT 25
3730: PUSH
3731: LD_INT 5
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: PPUSH
3751: CALL_OW 69
3755: PPUSH
3756: LD_STRING D5a-Sol1-1
3758: PPUSH
3759: LD_STRING D5-FSol1-1
3761: PPUSH
3762: CALL 5850 0 3
// DialogueOff ;
3766: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3770: LD_STRING M2b
3772: PPUSH
3773: CALL_OW 337
// spawnBurlak = 0 ;
3777: LD_ADDR_EXP 27
3781: PUSH
3782: LD_INT 0
3784: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
3785: LD_VAR 0 1
3789: PPUSH
3790: CALL_OW 247
3794: PUSH
3795: LD_INT 2
3797: EQUAL
3798: PUSH
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 263
3808: PUSH
3809: LD_INT 1
3811: EQUAL
3812: AND
3813: IFFALSE 3941
// begin case IsDrivenBy ( i ) of Gnyevko :
3815: LD_VAR 0 1
3819: PPUSH
3820: CALL_OW 311
3824: PUSH
3825: LD_EXP 19
3829: DOUBLE
3830: EQUAL
3831: IFTRUE 3835
3833: GO 3848
3835: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
3836: LD_INT 1
3838: PPUSH
3839: LD_STRING 13_Gnyevko_1
3841: PPUSH
3842: CALL_OW 39
3846: GO 3941
3848: LD_EXP 20
3852: DOUBLE
3853: EQUAL
3854: IFTRUE 3858
3856: GO 3871
3858: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
3859: LD_INT 1
3861: PPUSH
3862: LD_STRING 13_Titov_1
3864: PPUSH
3865: CALL_OW 39
3869: GO 3941
3871: LD_EXP 21
3875: DOUBLE
3876: EQUAL
3877: IFTRUE 3881
3879: GO 3894
3881: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
3882: LD_INT 1
3884: PPUSH
3885: LD_STRING 13_Xavier_1
3887: PPUSH
3888: CALL_OW 39
3892: GO 3941
3894: LD_EXP 22
3898: DOUBLE
3899: EQUAL
3900: IFTRUE 3904
3902: GO 3917
3904: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
3905: LD_INT 1
3907: PPUSH
3908: LD_STRING 13_Belkov_1
3910: PPUSH
3911: CALL_OW 39
3915: GO 3941
3917: LD_EXP 23
3921: DOUBLE
3922: EQUAL
3923: IFTRUE 3927
3925: GO 3940
3927: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
3928: LD_INT 1
3930: PPUSH
3931: LD_STRING 13_Lipshchin_1
3933: PPUSH
3934: CALL_OW 39
3938: GO 3941
3940: POP
// end ; if GetWeapon ( i ) = 49 then
3941: LD_VAR 0 1
3945: PPUSH
3946: CALL_OW 264
3950: PUSH
3951: LD_INT 49
3953: EQUAL
3954: IFFALSE 3967
// DestroyUnit ( i ) else
3956: LD_VAR 0 1
3960: PPUSH
3961: CALL_OW 65
3965: GO 3976
// RemoveUnit ( i ) ;
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 64
// end ;
3976: GO 3613
3978: POP
3979: POP
// end ;
3980: PPOPN 1
3982: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
3983: LD_EXP 17
3987: PPUSH
3988: CALL_OW 302
3992: PUSH
3993: LD_EXP 18
3997: PPUSH
3998: CALL_OW 256
4002: PUSH
4003: LD_INT 500
4005: LESS
4006: AND
4007: PUSH
4008: LD_EXP 18
4012: PPUSH
4013: CALL_OW 255
4017: PUSH
4018: LD_INT 7
4020: EQUAL
4021: AND
4022: IFFALSE 4042
4024: GO 4026
4026: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
4027: LD_EXP 17
4031: PPUSH
4032: LD_INT 107
4034: PPUSH
4035: LD_INT 118
4037: PPUSH
4038: CALL_OW 111
4042: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4043: LD_EXP 17
4047: PPUSH
4048: CALL_OW 301
4052: PUSH
4053: LD_EXP 27
4057: PUSH
4058: LD_INT 1
4060: EQUAL
4061: AND
4062: IFFALSE 4195
4064: GO 4066
4066: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4067: LD_EXP 1
4071: PPUSH
4072: LD_STRING D5b-JMM-1
4074: PPUSH
4075: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4079: LD_INT 22
4081: PUSH
4082: LD_INT 1
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: LD_INT 26
4091: PUSH
4092: LD_INT 1
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 2
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 1
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: LD_INT 25
4114: PUSH
4115: LD_INT 2
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 25
4124: PUSH
4125: LD_INT 3
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: PUSH
4132: LD_INT 25
4134: PUSH
4135: LD_INT 4
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 25
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PPUSH
4170: LD_STRING D5b-Sol1-1
4172: PPUSH
4173: LD_STRING 
4175: PPUSH
4176: CALL 5850 0 3
// ChangeMissionObjectives ( M2a ) ;
4180: LD_STRING M2a
4182: PPUSH
4183: CALL_OW 337
// burlakStatus = 1 ;
4187: LD_ADDR_EXP 28
4191: PUSH
4192: LD_INT 1
4194: ST_TO_ADDR
// end ;
4195: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4196: LD_EXP 2
4200: PPUSH
4201: CALL_OW 301
4205: IFFALSE 4342
4207: GO 4209
4209: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4210: LD_EXP 1
4214: PPUSH
4215: LD_STRING D6-JMM-1
4217: PPUSH
4218: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4222: LD_INT 22
4224: PUSH
4225: LD_INT 1
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: LD_INT 26
4234: PUSH
4235: LD_INT 1
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: PUSH
4242: LD_INT 2
4244: PUSH
4245: LD_INT 25
4247: PUSH
4248: LD_INT 1
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 2
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 25
4267: PUSH
4268: LD_INT 3
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: PUSH
4275: LD_INT 25
4277: PUSH
4278: LD_INT 4
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 5
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: PPUSH
4308: CALL_OW 69
4312: PPUSH
4313: LD_STRING D6-Sol1-1
4315: PPUSH
4316: LD_STRING 
4318: PPUSH
4319: CALL 5850 0 3
// Say ( JMM , D6-JMM-2 ) ;
4323: LD_EXP 1
4327: PPUSH
4328: LD_STRING D6-JMM-2
4330: PPUSH
4331: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4335: LD_STRING M1a
4337: PPUSH
4338: CALL_OW 337
// end ;
4342: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4343: LD_INT 25
4345: PPUSH
4346: LD_INT 1
4348: PPUSH
4349: CALL_OW 321
4353: PUSH
4354: LD_INT 2
4356: EQUAL
4357: IFFALSE 4374
4359: GO 4361
4361: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4362: LD_EXP 2
4366: PPUSH
4367: LD_STRING D6-Huck-2
4369: PPUSH
4370: CALL_OW 88
// end ;
4374: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4375: LD_INT 22
4377: PUSH
4378: LD_INT 1
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 2
4387: PUSH
4388: LD_INT 34
4390: PUSH
4391: LD_INT 8
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 35
4400: PUSH
4401: LD_INT 8
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PPUSH
4417: CALL_OW 69
4421: PUSH
4422: LD_INT 0
4424: GREATER
4425: IFFALSE 4617
4427: GO 4429
4429: DISABLE
4430: LD_INT 0
4432: PPUSH
4433: PPUSH
// begin enable ;
4434: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4435: LD_ADDR_VAR 0 1
4439: PUSH
4440: LD_INT 5
4442: PPUSH
4443: LD_INT 22
4445: PUSH
4446: LD_INT 1
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: PUSH
4453: LD_INT 21
4455: PUSH
4456: LD_INT 3
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 30
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 3
4475: PUSH
4476: LD_INT 57
4478: PUSH
4479: EMPTY
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PPUSH
4492: CALL_OW 70
4496: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: LD_INT 5
4504: PPUSH
4505: LD_INT 22
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 21
4517: PUSH
4518: LD_INT 3
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: LD_INT 30
4527: PUSH
4528: LD_INT 5
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 3
4537: PUSH
4538: LD_INT 57
4540: PUSH
4541: EMPTY
4542: LIST
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PPUSH
4554: CALL_OW 70
4558: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4559: LD_VAR 0 1
4563: PUSH
4564: LD_INT 0
4566: GREATER
4567: PUSH
4568: LD_VAR 0 2
4572: PUSH
4573: LD_INT 0
4575: GREATER
4576: AND
4577: IFFALSE 4617
// begin disable ;
4579: DISABLE
// DialogueOn ;
4580: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4584: LD_EXP 1
4588: PPUSH
4589: LD_STRING D7-JMM-1
4591: PPUSH
4592: CALL_OW 88
// DialogueOff ;
4596: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4600: LD_STRING M4
4602: PPUSH
4603: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4607: LD_INT 5
4609: PPUSH
4610: LD_INT 0
4612: PPUSH
4613: CALL_OW 424
// end ; end ;
4617: PPOPN 2
4619: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4620: LD_INT 6
4622: PPUSH
4623: LD_INT 22
4625: PUSH
4626: LD_INT 1
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 25
4635: PUSH
4636: LD_INT 4
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 70
4651: PUSH
4652: LD_INT 0
4654: GREATER
4655: PUSH
4656: LD_EXP 37
4660: PUSH
4661: LD_INT 1
4663: EQUAL
4664: AND
4665: PUSH
4666: LD_EXP 29
4670: PUSH
4671: LD_INT 0
4673: EQUAL
4674: AND
4675: IFFALSE 4740
4677: GO 4679
4679: DISABLE
// begin enable ;
4680: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4681: LD_ADDR_EXP 26
4685: PUSH
4686: LD_INT 6
4688: PPUSH
4689: LD_INT 22
4691: PUSH
4692: LD_INT 1
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: PUSH
4699: LD_INT 25
4701: PUSH
4702: LD_INT 4
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: PPUSH
4713: CALL_OW 70
4717: PUSH
4718: LD_INT 1
4720: ARRAY
4721: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4722: LD_INT 6
4724: PPUSH
4725: LD_INT 0
4727: PPUSH
4728: CALL_OW 424
// radationResearched = 1 ;
4732: LD_ADDR_EXP 29
4736: PUSH
4737: LD_INT 1
4739: ST_TO_ADDR
// end ;
4740: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4741: LD_EXP 26
4745: PPUSH
4746: CALL_OW 301
4750: PUSH
4751: LD_EXP 29
4755: PUSH
4756: LD_INT 1
4758: EQUAL
4759: AND
4760: IFFALSE 4796
4762: GO 4764
4764: DISABLE
// begin enable ;
4765: ENABLE
// radationResearched = 0 ;
4766: LD_ADDR_EXP 29
4770: PUSH
4771: LD_INT 0
4773: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4774: LD_INT 6
4776: PPUSH
4777: LD_INT 1
4779: PPUSH
4780: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4784: LD_EXP 1
4788: PPUSH
4789: LD_STRING D9a-JMM-1
4791: PPUSH
4792: CALL_OW 88
// end ; end_of_file
4796: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4797: LD_VAR 0 5
4801: PUSH
4802: LD_INT 8
4804: EQUAL
4805: PUSH
4806: LD_EXP 35
4810: PUSH
4811: LD_INT 0
4813: EQUAL
4814: AND
4815: IFFALSE 4868
// begin eventVar1 = 1 ;
4817: LD_ADDR_EXP 35
4821: PUSH
4822: LD_INT 1
4824: ST_TO_ADDR
// DialogueOn ;
4825: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4829: LD_EXP 1
4833: PPUSH
4834: LD_STRING D6a-JMM-1
4836: PPUSH
4837: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4841: LD_EXP 15
4845: PPUSH
4846: LD_STRING D6a-Pow-1
4848: PPUSH
4849: CALL_OW 94
// DialogueOff ;
4853: CALL_OW 7
// wait ( 3 3$0 ) ;
4857: LD_INT 6300
4859: PPUSH
4860: CALL_OW 67
// PowellSupport ;
4864: CALL 1711 0 0
// end ; end ;
4868: PPOPN 5
4870: END
// on UnitDestroyed ( un ) do begin if un = JMM then
4871: LD_VAR 0 1
4875: PUSH
4876: LD_EXP 1
4880: EQUAL
4881: IFFALSE 4890
// YouLost ( JMM ) ;
4883: LD_STRING JMM
4885: PPUSH
4886: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
4890: LD_VAR 0 1
4894: PPUSH
4895: CALL_OW 264
4899: PUSH
4900: LD_INT 31
4902: EQUAL
4903: IFFALSE 4919
// achivCounter := achivCounter + 1 ;
4905: LD_ADDR_EXP 41
4909: PUSH
4910: LD_EXP 41
4914: PUSH
4915: LD_INT 1
4917: PLUS
4918: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
4919: LD_VAR 0 1
4923: PPUSH
4924: CALL_OW 255
4928: PUSH
4929: LD_INT 1
4931: NONEQUAL
4932: PUSH
4933: LD_VAR 0 1
4937: PPUSH
4938: CALL_OW 247
4942: PUSH
4943: LD_INT 2
4945: EQUAL
4946: AND
4947: IFFALSE 4963
// destroyCounter := destroyCounter + 1 ;
4949: LD_ADDR_EXP 42
4953: PUSH
4954: LD_EXP 42
4958: PUSH
4959: LD_INT 1
4961: PLUS
4962: ST_TO_ADDR
// end ;
4963: PPOPN 1
4965: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_EXP 18
4975: EQUAL
4976: IFFALSE 4985
// SetAchievement ( ACH_MASHA ) ;
4978: LD_STRING ACH_MASHA
4980: PPUSH
4981: CALL_OW 543
// end ;
4985: PPOPN 4
4987: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4988: LD_VAR 0 1
4992: PPUSH
4993: CALL_OW 264
4997: PUSH
4998: LD_INT 8
5000: EQUAL
5001: PUSH
5002: LD_EXP 36
5006: PUSH
5007: LD_INT 0
5009: EQUAL
5010: AND
5011: IFFALSE 5080
// begin eventVar2 = 1 ;
5013: LD_ADDR_EXP 36
5017: PUSH
5018: LD_INT 1
5020: ST_TO_ADDR
// DialogueOn ;
5021: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5025: LD_EXP 1
5029: PPUSH
5030: LD_STRING D6b-JMM-1
5032: PPUSH
5033: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5037: LD_EXP 15
5041: PPUSH
5042: LD_STRING D6b-Pow-1
5044: PPUSH
5045: CALL_OW 94
// DialogueOff ;
5049: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5053: LD_INT 5
5055: PPUSH
5056: LD_INT 1
5058: PPUSH
5059: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5063: LD_INT 7
5065: PPUSH
5066: LD_INT 1
5068: PPUSH
5069: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5073: LD_STRING M3
5075: PPUSH
5076: CALL_OW 337
// end ; end ;
5080: PPOPN 2
5082: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5083: LD_VAR 0 2
5087: PPUSH
5088: LD_VAR 0 3
5092: PPUSH
5093: LD_INT 5
5095: PPUSH
5096: CALL_OW 309
5100: PUSH
5101: LD_EXP 37
5105: PUSH
5106: LD_INT 0
5108: EQUAL
5109: AND
5110: IFFALSE 5339
// begin eventVar3 = 1 ;
5112: LD_ADDR_EXP 37
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5120: LD_INT 175
5122: PPUSH
5123: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5127: LD_INT 7
5129: PPUSH
5130: LD_INT 22
5132: PUSH
5133: LD_INT 1
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 21
5142: PUSH
5143: LD_INT 2
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 34
5152: PUSH
5153: LD_INT 11
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: PPUSH
5165: CALL_OW 70
5169: PUSH
5170: LD_INT 0
5172: GREATER
5173: IFFALSE 5192
// begin radarOnSpot = 1 ;
5175: LD_ADDR_EXP 30
5179: PUSH
5180: LD_INT 1
5182: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5183: LD_STRING M3a
5185: PPUSH
5186: CALL_OW 337
// end else
5190: GO 5199
// begin ChangeMissionObjectives ( M3b ) ;
5192: LD_STRING M3b
5194: PPUSH
5195: CALL_OW 337
// end ; DialogueOn ;
5199: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5203: LD_EXP 2
5207: PPUSH
5208: LD_STRING D8-Huck-1
5210: PPUSH
5211: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5215: LD_EXP 1
5219: PPUSH
5220: LD_STRING D8-JMM-1
5222: PPUSH
5223: CALL_OW 88
// if IsOk ( Stevens ) then
5227: LD_EXP 2
5231: PPUSH
5232: CALL_OW 302
5236: IFFALSE 5298
// begin Say ( Stevens , D8-Huck-2 ) ;
5238: LD_EXP 2
5242: PPUSH
5243: LD_STRING D8-Huck-2
5245: PPUSH
5246: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5250: LD_EXP 1
5254: PPUSH
5255: LD_STRING D8-JMM-2
5257: PPUSH
5258: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5262: LD_EXP 2
5266: PPUSH
5267: LD_STRING D8-Huck-3
5269: PPUSH
5270: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5274: LD_EXP 1
5278: PPUSH
5279: LD_STRING D8-JMM-3
5281: PPUSH
5282: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5286: LD_EXP 2
5290: PPUSH
5291: LD_STRING D8-Huck-4
5293: PPUSH
5294: CALL_OW 88
// end ; DialogueOff ;
5298: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5302: LD_INT 5
5304: PPUSH
5305: LD_INT 0
5307: PPUSH
5308: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5312: LD_INT 7
5314: PPUSH
5315: LD_INT 0
5317: PPUSH
5318: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5322: LD_INT 6
5324: PPUSH
5325: LD_INT 1
5327: PPUSH
5328: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5332: LD_STRING M5
5334: PPUSH
5335: CALL_OW 337
// end ; end ;
5339: PPOPN 3
5341: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5342: LD_EXP 26
5346: PPUSH
5347: CALL_OW 302
5351: PUSH
5352: LD_VAR 0 2
5356: PUSH
5357: LD_EXP 26
5361: EQUAL
5362: AND
5363: PUSH
5364: LD_EXP 38
5368: PUSH
5369: LD_INT 0
5371: EQUAL
5372: AND
5373: PUSH
5374: LD_EXP 37
5378: PUSH
5379: LD_INT 1
5381: EQUAL
5382: AND
5383: IFFALSE 5429
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5385: LD_VAR 0 1
5389: PPUSH
5390: LD_INT 1
5392: PPUSH
5393: CALL_OW 268
5397: PUSH
5398: LD_INT 11
5400: EQUAL
5401: PUSH
5402: LD_VAR 0 1
5406: PPUSH
5407: LD_INT 2
5409: PPUSH
5410: CALL_OW 268
5414: PUSH
5415: LD_INT 11
5417: EQUAL
5418: OR
5419: IFFALSE 5429
// eventVar4 = 1 ;
5421: LD_ADDR_EXP 38
5425: PUSH
5426: LD_INT 1
5428: ST_TO_ADDR
// end ;
5429: PPOPN 2
5431: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5432: LD_INT 0
5434: PPUSH
5435: PPUSH
// begin if GetNation ( unit ) = 2 then
5436: LD_VAR 0 1
5440: PPUSH
5441: CALL_OW 248
5445: PUSH
5446: LD_INT 2
5448: EQUAL
5449: IFFALSE 5727
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5451: LD_ADDR_EXP 32
5455: PUSH
5456: LD_EXP 32
5460: PUSH
5461: LD_INT 1
5463: PLUS
5464: ST_TO_ADDR
// for i := 1 to sibDeposits do
5465: LD_ADDR_VAR 0 4
5469: PUSH
5470: DOUBLE
5471: LD_INT 1
5473: DEC
5474: ST_TO_ADDR
5475: LD_EXP 31
5479: PUSH
5480: FOR_TO
5481: IFFALSE 5583
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5483: LD_EXP 31
5487: PUSH
5488: LD_VAR 0 4
5492: ARRAY
5493: PUSH
5494: LD_INT 1
5496: ARRAY
5497: PUSH
5498: LD_VAR 0 2
5502: EQUAL
5503: PUSH
5504: LD_EXP 31
5508: PUSH
5509: LD_VAR 0 4
5513: ARRAY
5514: PUSH
5515: LD_INT 2
5517: ARRAY
5518: PUSH
5519: LD_VAR 0 3
5523: EQUAL
5524: AND
5525: IFFALSE 5581
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5527: LD_ADDR_EXP 31
5531: PUSH
5532: LD_EXP 31
5536: PPUSH
5537: LD_VAR 0 4
5541: PUSH
5542: EMPTY
5543: LIST
5544: PUSH
5545: LD_INT 1
5547: ARRAY
5548: PPUSH
5549: CALL_OW 3
5553: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5554: LD_ADDR_EXP 31
5558: PUSH
5559: LD_EXP 31
5563: PPUSH
5564: LD_VAR 0 4
5568: PUSH
5569: EMPTY
5570: LIST
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: CALL_OW 3
5580: ST_TO_ADDR
// end ;
5581: GO 5480
5583: POP
5584: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5585: LD_EXP 39
5589: PUSH
5590: LD_INT 0
5592: EQUAL
5593: PUSH
5594: LD_VAR 0 2
5598: PPUSH
5599: LD_VAR 0 3
5603: PPUSH
5604: CALL_OW 428
5608: PUSH
5609: LD_INT 22
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PPUSH
5619: CALL_OW 69
5623: IN
5624: AND
5625: IFFALSE 5727
// begin eventVar5 = 1 ;
5627: LD_ADDR_EXP 39
5631: PUSH
5632: LD_INT 1
5634: ST_TO_ADDR
// DialogueOn ;
5635: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5639: LD_EXP 2
5643: PPUSH
5644: LD_STRING D4-Sci1-1
5646: PPUSH
5647: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5651: LD_EXP 1
5655: PPUSH
5656: LD_STRING D4-JMM-1
5658: PPUSH
5659: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5663: LD_EXP 2
5667: PPUSH
5668: LD_STRING D4-Sci1-2
5670: PPUSH
5671: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5675: LD_EXP 1
5679: PPUSH
5680: LD_STRING D4-JMM-2
5682: PPUSH
5683: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5687: LD_EXP 2
5691: PPUSH
5692: LD_STRING D4-Sci1-3
5694: PPUSH
5695: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5699: LD_EXP 1
5703: PPUSH
5704: LD_STRING D4-JMM-3
5706: PPUSH
5707: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5711: LD_EXP 1
5715: PPUSH
5716: LD_STRING D4-JMM-3a
5718: PPUSH
5719: CALL_OW 88
// DialogueOff ;
5723: CALL_OW 7
// end ; end ; end ;
5727: PPOPN 5
5729: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5730: LD_VAR 0 1
5734: PPUSH
5735: CALL_OW 255
5739: PUSH
5740: LD_INT 1
5742: EQUAL
5743: PUSH
5744: LD_VAR 0 1
5748: PPUSH
5749: CALL_OW 266
5753: PUSH
5754: LD_INT 0
5756: EQUAL
5757: AND
5758: PUSH
5759: LD_INT 22
5761: PUSH
5762: LD_INT 1
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: LD_INT 21
5771: PUSH
5772: LD_INT 3
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 2
5781: PUSH
5782: LD_INT 30
5784: PUSH
5785: LD_INT 0
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 30
5794: PUSH
5795: LD_INT 1
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: PPUSH
5812: CALL_OW 69
5816: PUSH
5817: LD_INT 1
5819: EQUAL
5820: AND
5821: IFFALSE 5835
// SetBName ( building , omega ) ;
5823: LD_VAR 0 1
5827: PPUSH
5828: LD_STRING omega
5830: PPUSH
5831: CALL_OW 500
// end ;
5835: PPOPN 2
5837: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5838: LD_VAR 0 1
5842: PPUSH
5843: CALL 26093 0 1
// end ; end_of_file
5847: PPOPN 1
5849: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
5850: LD_INT 0
5852: PPUSH
5853: PPUSH
5854: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
5855: LD_ADDR_VAR 0 1
5859: PUSH
5860: LD_VAR 0 1
5864: PUSH
5865: LD_EXP 1
5869: PUSH
5870: LD_EXP 2
5874: PUSH
5875: LD_EXP 3
5879: PUSH
5880: LD_EXP 4
5884: PUSH
5885: LD_EXP 5
5889: PUSH
5890: LD_EXP 6
5894: PUSH
5895: LD_EXP 7
5899: PUSH
5900: LD_EXP 8
5904: PUSH
5905: LD_EXP 9
5909: PUSH
5910: LD_EXP 10
5914: PUSH
5915: LD_EXP 11
5919: PUSH
5920: LD_EXP 12
5924: PUSH
5925: LD_EXP 13
5929: PUSH
5930: LD_EXP 14
5934: PUSH
5935: LD_EXP 15
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: DIFF
5957: ST_TO_ADDR
// if not characters then
5958: LD_VAR 0 1
5962: NOT
5963: IFFALSE 5967
// exit ;
5965: GO 6046
// speaker := characters [ rand ( 1 , characters ) ] ;
5967: LD_ADDR_VAR 0 6
5971: PUSH
5972: LD_VAR 0 1
5976: PUSH
5977: LD_INT 1
5979: PPUSH
5980: LD_VAR 0 1
5984: PPUSH
5985: CALL_OW 12
5989: ARRAY
5990: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
5991: LD_VAR 0 6
5995: PPUSH
5996: CALL_OW 258
6000: PUSH
6001: LD_INT 1
6003: EQUAL
6004: IFFALSE 6022
// Say ( speaker , dialogMID ) else
6006: LD_VAR 0 6
6010: PPUSH
6011: LD_VAR 0 2
6015: PPUSH
6016: CALL_OW 88
6020: GO 6036
// Say ( speaker , dialogFID ) ;
6022: LD_VAR 0 6
6026: PPUSH
6027: LD_VAR 0 3
6031: PPUSH
6032: CALL_OW 88
// result := speaker ;
6036: LD_ADDR_VAR 0 4
6040: PUSH
6041: LD_VAR 0 6
6045: ST_TO_ADDR
// end ;
6046: LD_VAR 0 4
6050: RET
// export function PrepareDifficulty ; begin
6051: LD_INT 0
6053: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6054: LD_INT 5
6056: PPUSH
6057: LD_INT 8
6059: PPUSH
6060: LD_INT 2
6062: PPUSH
6063: CALL_OW 322
// if difficulty = 1 then
6067: LD_OWVAR 67
6071: PUSH
6072: LD_INT 1
6074: EQUAL
6075: IFFALSE 6194
// begin SetTech ( 66 , 8 , state_researched ) ;
6077: LD_INT 66
6079: PPUSH
6080: LD_INT 8
6082: PPUSH
6083: LD_INT 2
6085: PPUSH
6086: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6090: LD_INT 67
6092: PPUSH
6093: LD_INT 8
6095: PPUSH
6096: LD_INT 0
6098: PPUSH
6099: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6103: LD_INT 68
6105: PPUSH
6106: LD_INT 8
6108: PPUSH
6109: LD_INT 0
6111: PPUSH
6112: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6116: LD_INT 51
6118: PPUSH
6119: LD_INT 8
6121: PPUSH
6122: LD_INT 2
6124: PPUSH
6125: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6129: LD_INT 52
6131: PPUSH
6132: LD_INT 8
6134: PPUSH
6135: LD_INT 0
6137: PPUSH
6138: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6142: LD_INT 53
6144: PPUSH
6145: LD_INT 8
6147: PPUSH
6148: LD_INT 0
6150: PPUSH
6151: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6155: LD_INT 60
6157: PPUSH
6158: LD_INT 8
6160: PPUSH
6161: LD_INT 2
6163: PPUSH
6164: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6168: LD_INT 61
6170: PPUSH
6171: LD_INT 8
6173: PPUSH
6174: LD_INT 0
6176: PPUSH
6177: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6181: LD_INT 62
6183: PPUSH
6184: LD_INT 8
6186: PPUSH
6187: LD_INT 0
6189: PPUSH
6190: CALL_OW 322
// end ; if difficulty = 2 then
6194: LD_OWVAR 67
6198: PUSH
6199: LD_INT 2
6201: EQUAL
6202: IFFALSE 6321
// begin SetTech ( 66 , 8 , state_researched ) ;
6204: LD_INT 66
6206: PPUSH
6207: LD_INT 8
6209: PPUSH
6210: LD_INT 2
6212: PPUSH
6213: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6217: LD_INT 67
6219: PPUSH
6220: LD_INT 8
6222: PPUSH
6223: LD_INT 2
6225: PPUSH
6226: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6230: LD_INT 68
6232: PPUSH
6233: LD_INT 8
6235: PPUSH
6236: LD_INT 0
6238: PPUSH
6239: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6243: LD_INT 51
6245: PPUSH
6246: LD_INT 8
6248: PPUSH
6249: LD_INT 2
6251: PPUSH
6252: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6256: LD_INT 52
6258: PPUSH
6259: LD_INT 8
6261: PPUSH
6262: LD_INT 2
6264: PPUSH
6265: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6269: LD_INT 53
6271: PPUSH
6272: LD_INT 8
6274: PPUSH
6275: LD_INT 2
6277: PPUSH
6278: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6282: LD_INT 60
6284: PPUSH
6285: LD_INT 8
6287: PPUSH
6288: LD_INT 2
6290: PPUSH
6291: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6295: LD_INT 61
6297: PPUSH
6298: LD_INT 8
6300: PPUSH
6301: LD_INT 2
6303: PPUSH
6304: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6308: LD_INT 62
6310: PPUSH
6311: LD_INT 8
6313: PPUSH
6314: LD_INT 0
6316: PPUSH
6317: CALL_OW 322
// end ; if difficulty = 3 then
6321: LD_OWVAR 67
6325: PUSH
6326: LD_INT 3
6328: EQUAL
6329: IFFALSE 6448
// begin SetTech ( 66 , 8 , state_researched ) ;
6331: LD_INT 66
6333: PPUSH
6334: LD_INT 8
6336: PPUSH
6337: LD_INT 2
6339: PPUSH
6340: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6344: LD_INT 67
6346: PPUSH
6347: LD_INT 8
6349: PPUSH
6350: LD_INT 2
6352: PPUSH
6353: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6357: LD_INT 68
6359: PPUSH
6360: LD_INT 8
6362: PPUSH
6363: LD_INT 0
6365: PPUSH
6366: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6370: LD_INT 51
6372: PPUSH
6373: LD_INT 8
6375: PPUSH
6376: LD_INT 2
6378: PPUSH
6379: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6383: LD_INT 52
6385: PPUSH
6386: LD_INT 8
6388: PPUSH
6389: LD_INT 2
6391: PPUSH
6392: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6396: LD_INT 53
6398: PPUSH
6399: LD_INT 8
6401: PPUSH
6402: LD_INT 2
6404: PPUSH
6405: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6409: LD_INT 60
6411: PPUSH
6412: LD_INT 8
6414: PPUSH
6415: LD_INT 2
6417: PPUSH
6418: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6422: LD_INT 61
6424: PPUSH
6425: LD_INT 8
6427: PPUSH
6428: LD_INT 2
6430: PPUSH
6431: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6435: LD_INT 62
6437: PPUSH
6438: LD_INT 8
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 322
// end ; end ;
6448: LD_VAR 0 1
6452: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6453: LD_INT 0
6455: PPUSH
6456: PPUSH
6457: PPUSH
6458: PPUSH
6459: PPUSH
6460: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6461: LD_ADDR_VAR 0 7
6465: PUSH
6466: LD_INT 22
6468: PUSH
6469: LD_VAR 0 1
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: LD_INT 25
6480: PUSH
6481: LD_INT 9
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6497: LD_ADDR_VAR 0 8
6501: PUSH
6502: LD_INT 22
6504: PUSH
6505: LD_VAR 0 2
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 3
6516: PUSH
6517: LD_INT 21
6519: PUSH
6520: LD_INT 3
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6540: LD_ADDR_VAR 0 5
6544: PUSH
6545: LD_INT 1
6547: PPUSH
6548: LD_INT 3
6550: PPUSH
6551: CALL_OW 12
6555: ST_TO_ADDR
// for i = 1 to list do
6556: LD_ADDR_VAR 0 6
6560: PUSH
6561: DOUBLE
6562: LD_INT 1
6564: DEC
6565: ST_TO_ADDR
6566: LD_VAR 0 7
6570: PUSH
6571: FOR_TO
6572: IFFALSE 6754
// for ta in filter do
6574: LD_ADDR_VAR 0 4
6578: PUSH
6579: LD_VAR 0 8
6583: PUSH
6584: FOR_IN
6585: IFFALSE 6750
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6587: LD_VAR 0 7
6591: PUSH
6592: LD_VAR 0 6
6596: ARRAY
6597: PPUSH
6598: LD_VAR 0 4
6602: PPUSH
6603: CALL_OW 296
6607: PUSH
6608: LD_INT 13
6610: LESSEQUAL
6611: IFFALSE 6748
// begin case c of 1 :
6613: LD_VAR 0 5
6617: PUSH
6618: LD_INT 1
6620: DOUBLE
6621: EQUAL
6622: IFTRUE 6626
6624: GO 6664
6626: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6627: LD_VAR 0 7
6631: PUSH
6632: LD_VAR 0 6
6636: ARRAY
6637: PPUSH
6638: LD_VAR 0 4
6642: PPUSH
6643: CALL_OW 250
6647: PPUSH
6648: LD_VAR 0 4
6652: PPUSH
6653: CALL_OW 251
6657: PPUSH
6658: CALL_OW 154
6662: GO 6748
6664: LD_INT 2
6666: DOUBLE
6667: EQUAL
6668: IFTRUE 6672
6670: GO 6736
6672: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6673: LD_VAR 0 7
6677: PUSH
6678: LD_VAR 0 6
6682: ARRAY
6683: PPUSH
6684: LD_VAR 0 4
6688: PPUSH
6689: CALL_OW 250
6693: PUSH
6694: LD_INT 1
6696: NEG
6697: PPUSH
6698: LD_INT 1
6700: PPUSH
6701: CALL_OW 12
6705: PLUS
6706: PPUSH
6707: LD_VAR 0 4
6711: PPUSH
6712: CALL_OW 251
6716: PUSH
6717: LD_INT 1
6719: NEG
6720: PPUSH
6721: LD_INT 1
6723: PPUSH
6724: CALL_OW 12
6728: PLUS
6729: PPUSH
6730: CALL_OW 153
6734: GO 6748
6736: LD_INT 3
6738: DOUBLE
6739: EQUAL
6740: IFTRUE 6744
6742: GO 6747
6744: POP
// ; end ;
6745: GO 6748
6747: POP
// end ; end ;
6748: GO 6584
6750: POP
6751: POP
6752: GO 6571
6754: POP
6755: POP
// end ;
6756: LD_VAR 0 3
6760: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6761: LD_INT 0
6763: PPUSH
6764: PPUSH
// for i in charactersList do
6765: LD_ADDR_VAR 0 4
6769: PUSH
6770: LD_VAR 0 1
6774: PUSH
6775: FOR_IN
6776: IFFALSE 6794
// SaveCharacters ( i , ident ) ;
6778: LD_VAR 0 4
6782: PPUSH
6783: LD_VAR 0 2
6787: PPUSH
6788: CALL_OW 38
6792: GO 6775
6794: POP
6795: POP
// end ;
6796: LD_VAR 0 3
6800: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6801: LD_INT 0
6803: PPUSH
6804: PPUSH
6805: PPUSH
6806: PPUSH
6807: PPUSH
6808: PPUSH
6809: PPUSH
6810: PPUSH
6811: PPUSH
6812: PPUSH
6813: PPUSH
// for i = 1 to medicCount do
6814: LD_ADDR_VAR 0 13
6818: PUSH
6819: DOUBLE
6820: LD_INT 1
6822: DEC
6823: ST_TO_ADDR
6824: LD_VAR 0 7
6828: PUSH
6829: FOR_TO
6830: IFFALSE 6912
// begin uc_side = side ;
6832: LD_ADDR_OWVAR 20
6836: PUSH
6837: LD_VAR 0 1
6841: ST_TO_ADDR
// uc_nation = nation ;
6842: LD_ADDR_OWVAR 21
6846: PUSH
6847: LD_VAR 0 2
6851: ST_TO_ADDR
// hc_name =  ;
6852: LD_ADDR_OWVAR 26
6856: PUSH
6857: LD_STRING 
6859: ST_TO_ADDR
// hc_gallery =  ;
6860: LD_ADDR_OWVAR 33
6864: PUSH
6865: LD_STRING 
6867: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6868: LD_INT 0
6870: PPUSH
6871: LD_INT 4
6873: PPUSH
6874: LD_VAR 0 8
6878: PPUSH
6879: CALL_OW 380
// un = CreateHuman ;
6883: LD_ADDR_VAR 0 15
6887: PUSH
6888: CALL_OW 44
6892: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6893: LD_VAR 0 15
6897: PPUSH
6898: LD_VAR 0 9
6902: PPUSH
6903: LD_INT 0
6905: PPUSH
6906: CALL_OW 49
// end ;
6910: GO 6829
6912: POP
6913: POP
// for i = 1 to soldierCount do
6914: LD_ADDR_VAR 0 13
6918: PUSH
6919: DOUBLE
6920: LD_INT 1
6922: DEC
6923: ST_TO_ADDR
6924: LD_VAR 0 3
6928: PUSH
6929: FOR_TO
6930: IFFALSE 7012
// begin uc_side = side ;
6932: LD_ADDR_OWVAR 20
6936: PUSH
6937: LD_VAR 0 1
6941: ST_TO_ADDR
// uc_nation = nation ;
6942: LD_ADDR_OWVAR 21
6946: PUSH
6947: LD_VAR 0 2
6951: ST_TO_ADDR
// hc_name =  ;
6952: LD_ADDR_OWVAR 26
6956: PUSH
6957: LD_STRING 
6959: ST_TO_ADDR
// hc_gallery =  ;
6960: LD_ADDR_OWVAR 33
6964: PUSH
6965: LD_STRING 
6967: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6968: LD_INT 0
6970: PPUSH
6971: LD_INT 1
6973: PPUSH
6974: LD_VAR 0 8
6978: PPUSH
6979: CALL_OW 380
// un = CreateHuman ;
6983: LD_ADDR_VAR 0 15
6987: PUSH
6988: CALL_OW 44
6992: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6993: LD_VAR 0 15
6997: PPUSH
6998: LD_VAR 0 9
7002: PPUSH
7003: LD_INT 0
7005: PPUSH
7006: CALL_OW 49
// end ;
7010: GO 6929
7012: POP
7013: POP
// for i = 1 to sniperCount do
7014: LD_ADDR_VAR 0 13
7018: PUSH
7019: DOUBLE
7020: LD_INT 1
7022: DEC
7023: ST_TO_ADDR
7024: LD_VAR 0 4
7028: PUSH
7029: FOR_TO
7030: IFFALSE 7112
// begin uc_side = side ;
7032: LD_ADDR_OWVAR 20
7036: PUSH
7037: LD_VAR 0 1
7041: ST_TO_ADDR
// uc_nation = nation ;
7042: LD_ADDR_OWVAR 21
7046: PUSH
7047: LD_VAR 0 2
7051: ST_TO_ADDR
// hc_name =  ;
7052: LD_ADDR_OWVAR 26
7056: PUSH
7057: LD_STRING 
7059: ST_TO_ADDR
// hc_gallery =  ;
7060: LD_ADDR_OWVAR 33
7064: PUSH
7065: LD_STRING 
7067: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7068: LD_INT 0
7070: PPUSH
7071: LD_INT 5
7073: PPUSH
7074: LD_VAR 0 8
7078: PPUSH
7079: CALL_OW 380
// un = CreateHuman ;
7083: LD_ADDR_VAR 0 15
7087: PUSH
7088: CALL_OW 44
7092: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7093: LD_VAR 0 15
7097: PPUSH
7098: LD_VAR 0 9
7102: PPUSH
7103: LD_INT 0
7105: PPUSH
7106: CALL_OW 49
// end ;
7110: GO 7029
7112: POP
7113: POP
// for i = 1 to bazookCount do
7114: LD_ADDR_VAR 0 13
7118: PUSH
7119: DOUBLE
7120: LD_INT 1
7122: DEC
7123: ST_TO_ADDR
7124: LD_VAR 0 5
7128: PUSH
7129: FOR_TO
7130: IFFALSE 7212
// begin uc_side = side ;
7132: LD_ADDR_OWVAR 20
7136: PUSH
7137: LD_VAR 0 1
7141: ST_TO_ADDR
// uc_nation = nation ;
7142: LD_ADDR_OWVAR 21
7146: PUSH
7147: LD_VAR 0 2
7151: ST_TO_ADDR
// hc_name =  ;
7152: LD_ADDR_OWVAR 26
7156: PUSH
7157: LD_STRING 
7159: ST_TO_ADDR
// hc_gallery =  ;
7160: LD_ADDR_OWVAR 33
7164: PUSH
7165: LD_STRING 
7167: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7168: LD_INT 0
7170: PPUSH
7171: LD_INT 9
7173: PPUSH
7174: LD_VAR 0 8
7178: PPUSH
7179: CALL_OW 380
// un = CreateHuman ;
7183: LD_ADDR_VAR 0 15
7187: PUSH
7188: CALL_OW 44
7192: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7193: LD_VAR 0 15
7197: PPUSH
7198: LD_VAR 0 9
7202: PPUSH
7203: LD_INT 0
7205: PPUSH
7206: CALL_OW 49
// end ;
7210: GO 7129
7212: POP
7213: POP
// for i = 1 to mortalCount do
7214: LD_ADDR_VAR 0 13
7218: PUSH
7219: DOUBLE
7220: LD_INT 1
7222: DEC
7223: ST_TO_ADDR
7224: LD_VAR 0 6
7228: PUSH
7229: FOR_TO
7230: IFFALSE 7312
// begin uc_side = side ;
7232: LD_ADDR_OWVAR 20
7236: PUSH
7237: LD_VAR 0 1
7241: ST_TO_ADDR
// uc_nation = nation ;
7242: LD_ADDR_OWVAR 21
7246: PUSH
7247: LD_VAR 0 2
7251: ST_TO_ADDR
// hc_name =  ;
7252: LD_ADDR_OWVAR 26
7256: PUSH
7257: LD_STRING 
7259: ST_TO_ADDR
// hc_gallery =  ;
7260: LD_ADDR_OWVAR 33
7264: PUSH
7265: LD_STRING 
7267: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7268: LD_INT 0
7270: PPUSH
7271: LD_INT 8
7273: PPUSH
7274: LD_VAR 0 8
7278: PPUSH
7279: CALL_OW 380
// un = CreateHuman ;
7283: LD_ADDR_VAR 0 15
7287: PUSH
7288: CALL_OW 44
7292: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7293: LD_VAR 0 15
7297: PPUSH
7298: LD_VAR 0 9
7302: PPUSH
7303: LD_INT 0
7305: PPUSH
7306: CALL_OW 49
// end ;
7310: GO 7229
7312: POP
7313: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7314: LD_ADDR_VAR 0 17
7318: PUSH
7319: LD_INT 22
7321: PUSH
7322: LD_VAR 0 1
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 25
7333: PUSH
7334: LD_INT 4
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PPUSH
7345: CALL_OW 69
7349: ST_TO_ADDR
// for i in medic_list do
7350: LD_ADDR_VAR 0 13
7354: PUSH
7355: LD_VAR 0 17
7359: PUSH
7360: FOR_IN
7361: IFFALSE 7396
// if GetTag ( i ) = 1 then
7363: LD_VAR 0 13
7367: PPUSH
7368: CALL_OW 110
7372: PUSH
7373: LD_INT 1
7375: EQUAL
7376: IFFALSE 7394
// medic_list := medic_list diff i ;
7378: LD_ADDR_VAR 0 17
7382: PUSH
7383: LD_VAR 0 17
7387: PUSH
7388: LD_VAR 0 13
7392: DIFF
7393: ST_TO_ADDR
7394: GO 7360
7396: POP
7397: POP
// for i in medic_list do
7398: LD_ADDR_VAR 0 13
7402: PUSH
7403: LD_VAR 0 17
7407: PUSH
7408: FOR_IN
7409: IFFALSE 7427
// ComMoveToArea ( i , healArea ) ;
7411: LD_VAR 0 13
7415: PPUSH
7416: LD_VAR 0 10
7420: PPUSH
7421: CALL_OW 113
7425: GO 7408
7427: POP
7428: POP
// repeat wait ( 0 0$1 ) ;
7429: LD_INT 35
7431: PPUSH
7432: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7436: LD_ADDR_VAR 0 16
7440: PUSH
7441: LD_INT 22
7443: PUSH
7444: LD_VAR 0 1
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 1
7455: PUSH
7456: LD_INT 3
7458: PUSH
7459: LD_INT 24
7461: PUSH
7462: LD_INT 550
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 24
7475: PUSH
7476: LD_INT 250
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: LIST
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PPUSH
7492: CALL_OW 69
7496: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7497: LD_ADDR_VAR 0 18
7501: PUSH
7502: LD_INT 22
7504: PUSH
7505: LD_VAR 0 1
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 25
7519: PUSH
7520: LD_INT 1
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PUSH
7527: LD_INT 25
7529: PUSH
7530: LD_INT 5
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 25
7539: PUSH
7540: LD_INT 8
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 25
7549: PUSH
7550: LD_INT 9
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 24
7566: PUSH
7567: LD_INT 1000
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: PPUSH
7579: CALL_OW 69
7583: ST_TO_ADDR
// if medicCount > 0 then
7584: LD_VAR 0 7
7588: PUSH
7589: LD_INT 0
7591: GREATER
7592: IFFALSE 7666
// begin if damageUnit_list > 0 then
7594: LD_VAR 0 16
7598: PUSH
7599: LD_INT 0
7601: GREATER
7602: IFFALSE 7666
// begin for i in damageUnit_list do
7604: LD_ADDR_VAR 0 13
7608: PUSH
7609: LD_VAR 0 16
7613: PUSH
7614: FOR_IN
7615: IFFALSE 7664
// begin ComMoveToArea ( i , healArea ) ;
7617: LD_VAR 0 13
7621: PPUSH
7622: LD_VAR 0 10
7626: PPUSH
7627: CALL_OW 113
// for j in medic_list do
7631: LD_ADDR_VAR 0 14
7635: PUSH
7636: LD_VAR 0 17
7640: PUSH
7641: FOR_IN
7642: IFFALSE 7660
// AddComHeal ( j , i ) ;
7644: LD_VAR 0 14
7648: PPUSH
7649: LD_VAR 0 13
7653: PPUSH
7654: CALL_OW 188
7658: GO 7641
7660: POP
7661: POP
// end ;
7662: GO 7614
7664: POP
7665: POP
// end ; end ; for i in soldiersOK_list do
7666: LD_ADDR_VAR 0 13
7670: PUSH
7671: LD_VAR 0 18
7675: PUSH
7676: FOR_IN
7677: IFFALSE 7853
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7679: LD_ADDR_VAR 0 21
7683: PUSH
7684: LD_INT 22
7686: PUSH
7687: LD_VAR 0 11
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PPUSH
7696: CALL_OW 69
7700: PPUSH
7701: LD_VAR 0 13
7705: PPUSH
7706: CALL_OW 74
7710: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7711: LD_ADDR_VAR 0 22
7715: PUSH
7716: LD_INT 22
7718: PUSH
7719: LD_VAR 0 11
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 2
7730: PUSH
7731: LD_INT 59
7733: PUSH
7734: EMPTY
7735: LIST
7736: PUSH
7737: LD_INT 21
7739: PUSH
7740: LD_INT 1
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 21
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: PPUSH
7770: CALL_OW 69
7774: PPUSH
7775: LD_VAR 0 13
7779: PPUSH
7780: CALL_OW 74
7784: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7785: LD_VAR 0 13
7789: PPUSH
7790: LD_VAR 0 21
7794: PPUSH
7795: CALL_OW 296
7799: PUSH
7800: LD_INT 8
7802: PLUS
7803: PUSH
7804: LD_VAR 0 13
7808: PPUSH
7809: LD_VAR 0 22
7813: PPUSH
7814: CALL_OW 296
7818: LESS
7819: IFFALSE 7837
// begin ComAttackUnit ( i , target1 ) ;
7821: LD_VAR 0 13
7825: PPUSH
7826: LD_VAR 0 21
7830: PPUSH
7831: CALL_OW 115
// end else
7835: GO 7851
// begin ComAttackUnit ( i , target2 ) ;
7837: LD_VAR 0 13
7841: PPUSH
7842: LD_VAR 0 22
7846: PPUSH
7847: CALL_OW 115
// end ; end ;
7851: GO 7676
7853: POP
7854: POP
// until soldiersOK_list = [ ] ;
7855: LD_VAR 0 18
7859: PUSH
7860: EMPTY
7861: EQUAL
7862: IFFALSE 7429
// end ;
7864: LD_VAR 0 12
7868: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7869: LD_INT 0
7871: PPUSH
7872: PPUSH
7873: PPUSH
7874: PPUSH
7875: PPUSH
7876: PPUSH
7877: PPUSH
7878: PPUSH
7879: PPUSH
7880: PPUSH
7881: PPUSH
// amChassisTab = [ ] ;
7882: LD_ADDR_VAR 0 19
7886: PUSH
7887: EMPTY
7888: ST_TO_ADDR
// arChassisTab = [ ] ;
7889: LD_ADDR_VAR 0 18
7893: PUSH
7894: EMPTY
7895: ST_TO_ADDR
// ruChassisTab = [ ] ;
7896: LD_ADDR_VAR 0 17
7900: PUSH
7901: EMPTY
7902: ST_TO_ADDR
// for i = 1 to vehCount do
7903: LD_ADDR_VAR 0 13
7907: PUSH
7908: DOUBLE
7909: LD_INT 1
7911: DEC
7912: ST_TO_ADDR
7913: LD_VAR 0 3
7917: PUSH
7918: FOR_TO
7919: IFFALSE 9343
// begin wait ( 0 0$01 ) ;
7921: LD_INT 35
7923: PPUSH
7924: CALL_OW 67
// if nation = 1 then
7928: LD_VAR 0 5
7932: PUSH
7933: LD_INT 1
7935: EQUAL
7936: IFFALSE 8417
// begin uc_side = side ;
7938: LD_ADDR_OWVAR 20
7942: PUSH
7943: LD_VAR 0 2
7947: ST_TO_ADDR
// uc_nation = nation ;
7948: LD_ADDR_OWVAR 21
7952: PUSH
7953: LD_VAR 0 5
7957: ST_TO_ADDR
// vc_engine = vehengine ;
7958: LD_ADDR_OWVAR 39
7962: PUSH
7963: LD_VAR 0 6
7967: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7968: LD_ADDR_OWVAR 40
7972: PUSH
7973: LD_VAR 0 10
7977: PUSH
7978: LD_INT 1
7980: PPUSH
7981: LD_VAR 0 10
7985: PPUSH
7986: CALL_OW 12
7990: ARRAY
7991: ST_TO_ADDR
// for j = 1 to AMWeapon do
7992: LD_ADDR_VAR 0 14
7996: PUSH
7997: DOUBLE
7998: LD_INT 1
8000: DEC
8001: ST_TO_ADDR
8002: LD_VAR 0 10
8006: PUSH
8007: FOR_TO
8008: IFFALSE 8309
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8010: LD_VAR 0 10
8014: PUSH
8015: LD_VAR 0 14
8019: ARRAY
8020: PUSH
8021: LD_INT 2
8023: EQUAL
8024: PUSH
8025: LD_VAR 0 10
8029: PUSH
8030: LD_VAR 0 14
8034: ARRAY
8035: PUSH
8036: LD_INT 3
8038: EQUAL
8039: OR
8040: IFFALSE 8093
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8042: LD_ADDR_VAR 0 19
8046: PUSH
8047: LD_INT 1
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: LD_INT 3
8055: PUSH
8056: LD_INT 4
8058: PUSH
8059: LD_INT 5
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8069: LD_ADDR_OWVAR 37
8073: PUSH
8074: LD_VAR 0 19
8078: PUSH
8079: LD_INT 1
8081: PPUSH
8082: LD_VAR 0 19
8086: PPUSH
8087: CALL_OW 12
8091: ARRAY
8092: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8093: LD_VAR 0 10
8097: PUSH
8098: LD_VAR 0 14
8102: ARRAY
8103: PUSH
8104: LD_INT 4
8106: EQUAL
8107: PUSH
8108: LD_VAR 0 10
8112: PUSH
8113: LD_VAR 0 14
8117: ARRAY
8118: PUSH
8119: LD_INT 5
8121: EQUAL
8122: OR
8123: PUSH
8124: LD_VAR 0 10
8128: PUSH
8129: LD_VAR 0 14
8133: ARRAY
8134: PUSH
8135: LD_INT 9
8137: EQUAL
8138: OR
8139: PUSH
8140: LD_VAR 0 10
8144: PUSH
8145: LD_VAR 0 14
8149: ARRAY
8150: PUSH
8151: LD_INT 11
8153: EQUAL
8154: OR
8155: PUSH
8156: LD_VAR 0 10
8160: PUSH
8161: LD_VAR 0 14
8165: ARRAY
8166: PUSH
8167: LD_INT 7
8169: EQUAL
8170: OR
8171: IFFALSE 8220
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8173: LD_ADDR_VAR 0 19
8177: PUSH
8178: LD_INT 2
8180: PUSH
8181: LD_INT 3
8183: PUSH
8184: LD_INT 4
8186: PUSH
8187: LD_INT 5
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8196: LD_ADDR_OWVAR 37
8200: PUSH
8201: LD_VAR 0 19
8205: PUSH
8206: LD_INT 1
8208: PPUSH
8209: LD_VAR 0 19
8213: PPUSH
8214: CALL_OW 12
8218: ARRAY
8219: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8220: LD_VAR 0 10
8224: PUSH
8225: LD_VAR 0 14
8229: ARRAY
8230: PUSH
8231: LD_INT 8
8233: EQUAL
8234: PUSH
8235: LD_VAR 0 10
8239: PUSH
8240: LD_VAR 0 14
8244: ARRAY
8245: PUSH
8246: LD_INT 6
8248: EQUAL
8249: OR
8250: PUSH
8251: LD_VAR 0 10
8255: PUSH
8256: LD_VAR 0 14
8260: ARRAY
8261: PUSH
8262: LD_INT 10
8264: EQUAL
8265: OR
8266: IFFALSE 8307
// begin amChassisTab = [ 4 , 5 ] ;
8268: LD_ADDR_VAR 0 19
8272: PUSH
8273: LD_INT 4
8275: PUSH
8276: LD_INT 5
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8283: LD_ADDR_OWVAR 37
8287: PUSH
8288: LD_VAR 0 19
8292: PUSH
8293: LD_INT 1
8295: PPUSH
8296: LD_VAR 0 19
8300: PPUSH
8301: CALL_OW 12
8305: ARRAY
8306: ST_TO_ADDR
// end ; end ;
8307: GO 8007
8309: POP
8310: POP
// veh = CreateVehicle ;
8311: LD_ADDR_VAR 0 16
8315: PUSH
8316: CALL_OW 45
8320: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8321: LD_VAR 0 16
8325: PPUSH
8326: LD_VAR 0 1
8330: PPUSH
8331: LD_INT 0
8333: PPUSH
8334: CALL_OW 49
// if vc_control = 1 then
8338: LD_OWVAR 38
8342: PUSH
8343: LD_INT 1
8345: EQUAL
8346: IFFALSE 8403
// begin hc_gallery =  ;
8348: LD_ADDR_OWVAR 33
8352: PUSH
8353: LD_STRING 
8355: ST_TO_ADDR
// hc_name =  ;
8356: LD_ADDR_OWVAR 26
8360: PUSH
8361: LD_STRING 
8363: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8364: LD_INT 0
8366: PPUSH
8367: LD_INT 3
8369: PPUSH
8370: LD_VAR 0 4
8374: PPUSH
8375: CALL_OW 380
// un = CreateHuman ;
8379: LD_ADDR_VAR 0 15
8383: PUSH
8384: CALL_OW 44
8388: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8389: LD_VAR 0 15
8393: PPUSH
8394: LD_VAR 0 16
8398: PPUSH
8399: CALL_OW 52
// end ; i = i + 1 ;
8403: LD_ADDR_VAR 0 13
8407: PUSH
8408: LD_VAR 0 13
8412: PUSH
8413: LD_INT 1
8415: PLUS
8416: ST_TO_ADDR
// end ; if nation = 2 then
8417: LD_VAR 0 5
8421: PUSH
8422: LD_INT 2
8424: EQUAL
8425: IFFALSE 8927
// begin uc_side = side ;
8427: LD_ADDR_OWVAR 20
8431: PUSH
8432: LD_VAR 0 2
8436: ST_TO_ADDR
// uc_nation = nation ;
8437: LD_ADDR_OWVAR 21
8441: PUSH
8442: LD_VAR 0 5
8446: ST_TO_ADDR
// vc_engine = vehengine ;
8447: LD_ADDR_OWVAR 39
8451: PUSH
8452: LD_VAR 0 6
8456: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8457: LD_INT 22
8459: PUSH
8460: LD_VAR 0 2
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 21
8471: PUSH
8472: LD_INT 2
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 33
8481: PUSH
8482: LD_INT 2
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 50
8491: PUSH
8492: EMPTY
8493: LIST
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: PPUSH
8501: CALL_OW 69
8505: PUSH
8506: LD_INT 8
8508: LESSEQUAL
8509: IFFALSE 8537
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8511: LD_ADDR_OWVAR 38
8515: PUSH
8516: LD_VAR 0 7
8520: PUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_VAR 0 7
8528: PPUSH
8529: CALL_OW 12
8533: ARRAY
8534: ST_TO_ADDR
8535: GO 8545
// vc_control = control_apeman ;
8537: LD_ADDR_OWVAR 38
8541: PUSH
8542: LD_INT 5
8544: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8545: LD_ADDR_OWVAR 40
8549: PUSH
8550: LD_VAR 0 9
8554: PUSH
8555: LD_INT 1
8557: PPUSH
8558: LD_VAR 0 9
8562: PPUSH
8563: CALL_OW 12
8567: ARRAY
8568: ST_TO_ADDR
// for j = 1 to ARWeapons do
8569: LD_ADDR_VAR 0 14
8573: PUSH
8574: DOUBLE
8575: LD_INT 1
8577: DEC
8578: ST_TO_ADDR
8579: LD_VAR 0 9
8583: PUSH
8584: FOR_TO
8585: IFFALSE 8819
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8587: LD_VAR 0 9
8591: PUSH
8592: LD_VAR 0 14
8596: ARRAY
8597: PUSH
8598: LD_INT 24
8600: EQUAL
8601: PUSH
8602: LD_VAR 0 9
8606: PUSH
8607: LD_VAR 0 14
8611: ARRAY
8612: PUSH
8613: LD_INT 22
8615: EQUAL
8616: OR
8617: PUSH
8618: LD_VAR 0 9
8622: PUSH
8623: LD_VAR 0 14
8627: ARRAY
8628: PUSH
8629: LD_INT 23
8631: EQUAL
8632: OR
8633: PUSH
8634: LD_VAR 0 9
8638: PUSH
8639: LD_VAR 0 14
8643: ARRAY
8644: PUSH
8645: LD_INT 30
8647: EQUAL
8648: OR
8649: IFFALSE 8698
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8651: LD_ADDR_VAR 0 18
8655: PUSH
8656: LD_INT 11
8658: PUSH
8659: LD_INT 12
8661: PUSH
8662: LD_INT 13
8664: PUSH
8665: LD_INT 14
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8674: LD_ADDR_OWVAR 37
8678: PUSH
8679: LD_VAR 0 18
8683: PUSH
8684: LD_INT 1
8686: PPUSH
8687: LD_VAR 0 18
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8698: LD_VAR 0 9
8702: PUSH
8703: LD_VAR 0 14
8707: ARRAY
8708: PUSH
8709: LD_INT 29
8711: EQUAL
8712: PUSH
8713: LD_VAR 0 9
8717: PUSH
8718: LD_VAR 0 14
8722: ARRAY
8723: PUSH
8724: LD_INT 28
8726: EQUAL
8727: OR
8728: PUSH
8729: LD_VAR 0 9
8733: PUSH
8734: LD_VAR 0 14
8738: ARRAY
8739: PUSH
8740: LD_INT 27
8742: EQUAL
8743: OR
8744: PUSH
8745: LD_VAR 0 9
8749: PUSH
8750: LD_VAR 0 14
8754: ARRAY
8755: PUSH
8756: LD_INT 26
8758: EQUAL
8759: OR
8760: PUSH
8761: LD_VAR 0 9
8765: PUSH
8766: LD_VAR 0 14
8770: ARRAY
8771: PUSH
8772: LD_INT 25
8774: EQUAL
8775: OR
8776: IFFALSE 8817
// begin arChassisTab = [ 13 , 14 ] ;
8778: LD_ADDR_VAR 0 18
8782: PUSH
8783: LD_INT 13
8785: PUSH
8786: LD_INT 14
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8793: LD_ADDR_OWVAR 37
8797: PUSH
8798: LD_VAR 0 18
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_VAR 0 18
8810: PPUSH
8811: CALL_OW 12
8815: ARRAY
8816: ST_TO_ADDR
// end ; end ;
8817: GO 8584
8819: POP
8820: POP
// veh = CreateVehicle ;
8821: LD_ADDR_VAR 0 16
8825: PUSH
8826: CALL_OW 45
8830: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8831: LD_VAR 0 16
8835: PPUSH
8836: LD_VAR 0 1
8840: PPUSH
8841: LD_INT 0
8843: PPUSH
8844: CALL_OW 49
// if vc_control = 1 then
8848: LD_OWVAR 38
8852: PUSH
8853: LD_INT 1
8855: EQUAL
8856: IFFALSE 8913
// begin hc_gallery =  ;
8858: LD_ADDR_OWVAR 33
8862: PUSH
8863: LD_STRING 
8865: ST_TO_ADDR
// hc_name =  ;
8866: LD_ADDR_OWVAR 26
8870: PUSH
8871: LD_STRING 
8873: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8874: LD_INT 0
8876: PPUSH
8877: LD_INT 3
8879: PPUSH
8880: LD_VAR 0 4
8884: PPUSH
8885: CALL_OW 380
// un = CreateHuman ;
8889: LD_ADDR_VAR 0 15
8893: PUSH
8894: CALL_OW 44
8898: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8899: LD_VAR 0 15
8903: PPUSH
8904: LD_VAR 0 16
8908: PPUSH
8909: CALL_OW 52
// end ; i = i + 1 ;
8913: LD_ADDR_VAR 0 13
8917: PUSH
8918: LD_VAR 0 13
8922: PUSH
8923: LD_INT 1
8925: PLUS
8926: ST_TO_ADDR
// end ; if nation = 3 then
8927: LD_VAR 0 5
8931: PUSH
8932: LD_INT 3
8934: EQUAL
8935: IFFALSE 9341
// begin uc_side = side ;
8937: LD_ADDR_OWVAR 20
8941: PUSH
8942: LD_VAR 0 2
8946: ST_TO_ADDR
// uc_nation = nation ;
8947: LD_ADDR_OWVAR 21
8951: PUSH
8952: LD_VAR 0 5
8956: ST_TO_ADDR
// vc_engine = vehengine ;
8957: LD_ADDR_OWVAR 39
8961: PUSH
8962: LD_VAR 0 6
8966: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
8967: LD_ADDR_OWVAR 38
8971: PUSH
8972: LD_VAR 0 7
8976: PUSH
8977: LD_INT 1
8979: PPUSH
8980: LD_VAR 0 7
8984: PPUSH
8985: CALL_OW 12
8989: ARRAY
8990: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8991: LD_ADDR_OWVAR 40
8995: PUSH
8996: LD_VAR 0 8
9000: PUSH
9001: LD_INT 1
9003: PPUSH
9004: LD_VAR 0 8
9008: PPUSH
9009: CALL_OW 12
9013: ARRAY
9014: ST_TO_ADDR
// for j = 1 to RuWeapons do
9015: LD_ADDR_VAR 0 14
9019: PUSH
9020: DOUBLE
9021: LD_INT 1
9023: DEC
9024: ST_TO_ADDR
9025: LD_VAR 0 8
9029: PUSH
9030: FOR_TO
9031: IFFALSE 9217
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9033: LD_VAR 0 8
9037: PUSH
9038: LD_VAR 0 14
9042: ARRAY
9043: PUSH
9044: LD_INT 42
9046: EQUAL
9047: PUSH
9048: LD_VAR 0 8
9052: PUSH
9053: LD_VAR 0 14
9057: ARRAY
9058: PUSH
9059: LD_INT 43
9061: EQUAL
9062: OR
9063: PUSH
9064: LD_VAR 0 8
9068: PUSH
9069: LD_VAR 0 14
9073: ARRAY
9074: PUSH
9075: LD_INT 44
9077: EQUAL
9078: OR
9079: PUSH
9080: LD_VAR 0 8
9084: PUSH
9085: LD_VAR 0 14
9089: ARRAY
9090: PUSH
9091: LD_INT 45
9093: EQUAL
9094: OR
9095: PUSH
9096: LD_VAR 0 8
9100: PUSH
9101: LD_VAR 0 14
9105: ARRAY
9106: PUSH
9107: LD_INT 49
9109: EQUAL
9110: OR
9111: IFFALSE 9148
// begin ruChassisTab = [ 24 ] ;
9113: LD_ADDR_VAR 0 17
9117: PUSH
9118: LD_INT 24
9120: PUSH
9121: EMPTY
9122: LIST
9123: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9124: LD_ADDR_OWVAR 37
9128: PUSH
9129: LD_VAR 0 17
9133: PUSH
9134: LD_INT 1
9136: PPUSH
9137: LD_VAR 0 17
9141: PPUSH
9142: CALL_OW 12
9146: ARRAY
9147: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9148: LD_VAR 0 8
9152: PUSH
9153: LD_VAR 0 14
9157: ARRAY
9158: PUSH
9159: LD_INT 46
9161: EQUAL
9162: PUSH
9163: LD_VAR 0 8
9167: PUSH
9168: LD_VAR 0 14
9172: ARRAY
9173: PUSH
9174: LD_INT 47
9176: EQUAL
9177: OR
9178: IFFALSE 9215
// begin ruChassisTab = [ 24 ] ;
9180: LD_ADDR_VAR 0 17
9184: PUSH
9185: LD_INT 24
9187: PUSH
9188: EMPTY
9189: LIST
9190: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9191: LD_ADDR_OWVAR 37
9195: PUSH
9196: LD_VAR 0 17
9200: PUSH
9201: LD_INT 1
9203: PPUSH
9204: LD_VAR 0 17
9208: PPUSH
9209: CALL_OW 12
9213: ARRAY
9214: ST_TO_ADDR
// end ; end ;
9215: GO 9030
9217: POP
9218: POP
// veh = CreateVehicle ;
9219: LD_ADDR_VAR 0 16
9223: PUSH
9224: CALL_OW 45
9228: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9229: LD_VAR 0 16
9233: PPUSH
9234: LD_VAR 0 1
9238: PPUSH
9239: LD_INT 0
9241: PPUSH
9242: CALL_OW 49
// if vc_control = 1 then
9246: LD_OWVAR 38
9250: PUSH
9251: LD_INT 1
9253: EQUAL
9254: IFFALSE 9341
// begin if uc_side = 8 then
9256: LD_OWVAR 20
9260: PUSH
9261: LD_INT 8
9263: EQUAL
9264: IFFALSE 9276
// uc_nation = 2 else
9266: LD_ADDR_OWVAR 21
9270: PUSH
9271: LD_INT 2
9273: ST_TO_ADDR
9274: GO 9286
// uc_nation = nation ;
9276: LD_ADDR_OWVAR 21
9280: PUSH
9281: LD_VAR 0 5
9285: ST_TO_ADDR
// hc_gallery =  ;
9286: LD_ADDR_OWVAR 33
9290: PUSH
9291: LD_STRING 
9293: ST_TO_ADDR
// hc_name =  ;
9294: LD_ADDR_OWVAR 26
9298: PUSH
9299: LD_STRING 
9301: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9302: LD_INT 0
9304: PPUSH
9305: LD_INT 3
9307: PPUSH
9308: LD_VAR 0 4
9312: PPUSH
9313: CALL_OW 380
// un = CreateHuman ;
9317: LD_ADDR_VAR 0 15
9321: PUSH
9322: CALL_OW 44
9326: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9327: LD_VAR 0 15
9331: PPUSH
9332: LD_VAR 0 16
9336: PPUSH
9337: CALL_OW 52
// end ; end ; end ;
9341: GO 7918
9343: POP
9344: POP
// repeat wait ( 0 0$1 ) ;
9345: LD_INT 35
9347: PPUSH
9348: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9352: LD_ADDR_VAR 0 20
9356: PUSH
9357: LD_INT 22
9359: PUSH
9360: LD_VAR 0 2
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 21
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PUSH
9379: LD_INT 24
9381: PUSH
9382: LD_INT 250
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 2
9391: PUSH
9392: LD_INT 34
9394: PUSH
9395: LD_INT 25
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 34
9404: PUSH
9405: LD_INT 26
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 34
9414: PUSH
9415: LD_INT 27
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: LD_INT 34
9424: PUSH
9425: LD_INT 28
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 34
9434: PUSH
9435: LD_INT 29
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: LD_INT 34
9444: PUSH
9445: LD_INT 46
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 34
9454: PUSH
9455: LD_INT 44
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 34
9464: PUSH
9465: LD_INT 45
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 34
9474: PUSH
9475: LD_INT 47
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: PPUSH
9500: CALL_OW 69
9504: ST_TO_ADDR
// if vehicleOK_list > 0 then
9505: LD_VAR 0 20
9509: PUSH
9510: LD_INT 0
9512: GREATER
9513: IFFALSE 9732
// begin for i in vehicleOK_list do
9515: LD_ADDR_VAR 0 13
9519: PUSH
9520: LD_VAR 0 20
9524: PUSH
9525: FOR_IN
9526: IFFALSE 9730
// begin if GetSide ( i ) <> side then
9528: LD_VAR 0 13
9532: PPUSH
9533: CALL_OW 255
9537: PUSH
9538: LD_VAR 0 2
9542: NONEQUAL
9543: IFFALSE 9556
// begin ComStop ( i ) ;
9545: LD_VAR 0 13
9549: PPUSH
9550: CALL_OW 141
// continue ;
9554: GO 9525
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9556: LD_ADDR_VAR 0 21
9560: PUSH
9561: LD_INT 22
9563: PUSH
9564: LD_VAR 0 11
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: PPUSH
9578: LD_VAR 0 13
9582: PPUSH
9583: CALL_OW 74
9587: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9588: LD_ADDR_VAR 0 22
9592: PUSH
9593: LD_INT 22
9595: PUSH
9596: LD_VAR 0 11
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: LD_INT 59
9610: PUSH
9611: EMPTY
9612: LIST
9613: PUSH
9614: LD_INT 21
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 21
9626: PUSH
9627: LD_INT 2
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: EMPTY
9645: LIST
9646: PPUSH
9647: CALL_OW 69
9651: PPUSH
9652: LD_VAR 0 13
9656: PPUSH
9657: CALL_OW 74
9661: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9662: LD_VAR 0 13
9666: PPUSH
9667: LD_VAR 0 21
9671: PPUSH
9672: CALL_OW 296
9676: PUSH
9677: LD_INT 8
9679: PLUS
9680: PUSH
9681: LD_VAR 0 13
9685: PPUSH
9686: LD_VAR 0 22
9690: PPUSH
9691: CALL_OW 296
9695: LESS
9696: IFFALSE 9714
// begin ComAttackUnit ( i , target1 ) ;
9698: LD_VAR 0 13
9702: PPUSH
9703: LD_VAR 0 21
9707: PPUSH
9708: CALL_OW 115
// end else
9712: GO 9728
// begin ComAttackUnit ( i , target2 ) ;
9714: LD_VAR 0 13
9718: PPUSH
9719: LD_VAR 0 22
9723: PPUSH
9724: CALL_OW 115
// end ; end ;
9728: GO 9525
9730: POP
9731: POP
// end ; until vehicleOK_list = 0 ;
9732: LD_VAR 0 20
9736: PUSH
9737: LD_INT 0
9739: EQUAL
9740: IFFALSE 9345
// end ;
9742: LD_VAR 0 12
9746: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9747: LD_INT 0
9749: PPUSH
9750: PPUSH
9751: PPUSH
9752: PPUSH
9753: PPUSH
9754: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9755: LD_ADDR_VAR 0 6
9759: PUSH
9760: LD_INT 22
9762: PUSH
9763: LD_VAR 0 1
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 34
9774: PUSH
9775: LD_INT 29
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PPUSH
9786: CALL_OW 69
9790: ST_TO_ADDR
// if veh_list = 0 then
9791: LD_VAR 0 6
9795: PUSH
9796: LD_INT 0
9798: EQUAL
9799: IFFALSE 9803
// exit ;
9801: GO 10008
// if veh_list > 0 then
9803: LD_VAR 0 6
9807: PUSH
9808: LD_INT 0
9810: GREATER
9811: IFFALSE 10008
// begin for i in veh_List do
9813: LD_ADDR_VAR 0 4
9817: PUSH
9818: LD_VAR 0 6
9822: PUSH
9823: FOR_IN
9824: IFFALSE 10006
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9826: LD_ADDR_VAR 0 7
9830: PUSH
9831: LD_INT 22
9833: PUSH
9834: LD_VAR 0 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 24
9845: PUSH
9846: LD_INT 250
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PUSH
9853: LD_INT 2
9855: PUSH
9856: LD_INT 59
9858: PUSH
9859: EMPTY
9860: LIST
9861: PUSH
9862: LD_INT 21
9864: PUSH
9865: LD_INT 1
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 21
9874: PUSH
9875: LD_INT 2
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: PUSH
9893: EMPTY
9894: LIST
9895: PPUSH
9896: CALL_OW 69
9900: PPUSH
9901: LD_VAR 0 4
9905: PPUSH
9906: CALL_OW 74
9910: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
9911: LD_VAR 0 4
9915: PPUSH
9916: LD_VAR 0 7
9920: PPUSH
9921: CALL_OW 115
// if not HasTask ( i ) then
9925: LD_VAR 0 4
9929: PPUSH
9930: CALL_OW 314
9934: NOT
9935: IFFALSE 10004
// begin wait ( 0 0$0.1 ) ;
9937: LD_INT 4
9939: PPUSH
9940: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
9944: LD_ADDR_VAR 0 8
9948: PUSH
9949: LD_INT 22
9951: PUSH
9952: LD_VAR 0 2
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 24
9963: PUSH
9964: LD_INT 250
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PPUSH
9975: CALL_OW 69
9979: PPUSH
9980: LD_VAR 0 4
9984: PPUSH
9985: CALL_OW 74
9989: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
9990: LD_VAR 0 4
9994: PPUSH
9995: LD_VAR 0 8
9999: PPUSH
10000: CALL_OW 115
// end ; end ;
10004: GO 9823
10006: POP
10007: POP
// end ; end ; end_of_file
10008: LD_VAR 0 3
10012: RET
// every 0 0$1 do
10013: GO 10015
10015: DISABLE
// begin enable ;
10016: ENABLE
// IntBazooka ( 7 , 1 ) ;
10017: LD_INT 7
10019: PPUSH
10020: LD_INT 1
10022: PPUSH
10023: CALL 6453 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10027: LD_INT 8
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: CALL 9747 0 2
// end ;
10037: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10038: LD_INT 22
10040: PUSH
10041: LD_INT 3
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 21
10050: PUSH
10051: LD_INT 2
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 50
10060: PUSH
10061: EMPTY
10062: LIST
10063: PUSH
10064: LD_INT 2
10066: PUSH
10067: LD_INT 34
10069: PUSH
10070: LD_INT 46
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: LD_INT 34
10079: PUSH
10080: LD_INT 44
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 34
10089: PUSH
10090: LD_INT 45
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PUSH
10097: LD_INT 34
10099: PUSH
10100: LD_INT 47
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: PUSH
10125: LD_INT 0
10127: GREATER
10128: PUSH
10129: LD_INT 22
10131: PUSH
10132: LD_INT 3
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: LD_INT 21
10141: PUSH
10142: LD_INT 2
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 50
10151: PUSH
10152: EMPTY
10153: LIST
10154: PUSH
10155: LD_INT 34
10157: PUSH
10158: LD_INT 49
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: PUSH
10176: LD_INT 0
10178: GREATER
10179: AND
10180: IFFALSE 10352
10182: GO 10184
10184: DISABLE
10185: LD_INT 0
10187: PPUSH
10188: PPUSH
// begin enable ;
10189: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10190: LD_ADDR_VAR 0 1
10194: PUSH
10195: LD_INT 22
10197: PUSH
10198: LD_INT 3
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PUSH
10205: LD_INT 21
10207: PUSH
10208: LD_INT 2
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: LD_INT 50
10217: PUSH
10218: EMPTY
10219: LIST
10220: PUSH
10221: LD_INT 2
10223: PUSH
10224: LD_INT 34
10226: PUSH
10227: LD_INT 46
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: LD_INT 34
10236: PUSH
10237: LD_INT 44
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 34
10246: PUSH
10247: LD_INT 45
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 34
10256: PUSH
10257: LD_INT 47
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: PPUSH
10277: CALL_OW 69
10281: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10282: LD_ADDR_VAR 0 2
10286: PUSH
10287: LD_INT 22
10289: PUSH
10290: LD_INT 3
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 21
10299: PUSH
10300: LD_INT 2
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 50
10309: PUSH
10310: EMPTY
10311: LIST
10312: PUSH
10313: LD_INT 34
10315: PUSH
10316: LD_INT 49
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: PPUSH
10329: CALL_OW 69
10333: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10334: LD_VAR 0 2
10338: PPUSH
10339: LD_VAR 0 1
10343: PUSH
10344: LD_INT 1
10346: ARRAY
10347: PPUSH
10348: CALL_OW 112
// end ; end_of_file
10352: PPOPN 2
10354: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10355: LD_EXP 38
10359: PUSH
10360: LD_INT 1
10362: EQUAL
10363: IFFALSE 11265
10365: GO 10367
10367: DISABLE
10368: LD_INT 0
10370: PPUSH
10371: PPUSH
10372: PPUSH
// begin m1 := false ;
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 0
10380: ST_TO_ADDR
// m2 := false ;
10381: LD_ADDR_VAR 0 2
10385: PUSH
10386: LD_INT 0
10388: ST_TO_ADDR
// m3 := false ;
10389: LD_ADDR_VAR 0 3
10393: PUSH
10394: LD_INT 0
10396: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10397: LD_EXP 1
10401: PPUSH
10402: LD_STRING D9b-JMM-1
10404: PPUSH
10405: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10409: LD_EXP 15
10413: PPUSH
10414: LD_STRING D9b-Pow-1
10416: PPUSH
10417: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10421: LD_EXP 1
10425: PPUSH
10426: LD_STRING D9b-JMM-2
10428: PPUSH
10429: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10433: LD_EXP 15
10437: PPUSH
10438: LD_STRING D9b-Pow-2
10440: PPUSH
10441: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10445: LD_EXP 1
10449: PPUSH
10450: LD_STRING D9b-JMM-3
10452: PPUSH
10453: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10457: LD_EXP 15
10461: PPUSH
10462: LD_STRING D9b-Pow-3
10464: PPUSH
10465: CALL_OW 94
// if tick <= 60 60$00 then
10469: LD_OWVAR 1
10473: PUSH
10474: LD_INT 126000
10476: LESSEQUAL
10477: IFFALSE 10486
// SetAchievement ( ACH_ASPEED_13 ) ;
10479: LD_STRING ACH_ASPEED_13
10481: PPUSH
10482: CALL_OW 543
// if burlakStatus = 1 then
10486: LD_EXP 28
10490: PUSH
10491: LD_INT 1
10493: EQUAL
10494: IFFALSE 10516
// begin m1 := true ;
10496: LD_ADDR_VAR 0 1
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10504: LD_STRING Burlak
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: CALL_OW 101
// end else
10514: GO 10527
// begin AddMedal ( Burlak , - 1 ) ;
10516: LD_STRING Burlak
10518: PPUSH
10519: LD_INT 1
10521: NEG
10522: PPUSH
10523: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10527: LD_EXP 2
10531: PPUSH
10532: CALL_OW 302
10536: IFFALSE 10558
// begin m2 := true ;
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_INT 1
10545: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10546: LD_STRING Stevens
10548: PPUSH
10549: LD_INT 1
10551: PPUSH
10552: CALL_OW 101
// end else
10556: GO 10569
// begin AddMedal ( Stevens , - 1 ) ;
10558: LD_STRING Stevens
10560: PPUSH
10561: LD_INT 1
10563: NEG
10564: PPUSH
10565: CALL_OW 101
// end ; if radarOnSpot = 1 then
10569: LD_EXP 30
10573: PUSH
10574: LD_INT 1
10576: EQUAL
10577: IFFALSE 10599
// begin m3 := true ;
10579: LD_ADDR_VAR 0 3
10583: PUSH
10584: LD_INT 1
10586: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10587: LD_STRING Observation
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 101
// end else
10597: GO 10610
// begin AddMedal ( Observation , - 1 ) ;
10599: LD_STRING Observation
10601: PPUSH
10602: LD_INT 1
10604: NEG
10605: PPUSH
10606: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10610: LD_VAR 0 1
10614: PUSH
10615: LD_VAR 0 2
10619: AND
10620: PUSH
10621: LD_VAR 0 3
10625: AND
10626: PUSH
10627: LD_OWVAR 67
10631: PUSH
10632: LD_INT 3
10634: EQUAL
10635: AND
10636: IFFALSE 10648
// SetAchievementEX ( ACH_AMER , 13 ) ;
10638: LD_STRING ACH_AMER
10640: PPUSH
10641: LD_INT 13
10643: PPUSH
10644: CALL_OW 564
// GiveMedals ( MAIN ) ;
10648: LD_STRING MAIN
10650: PPUSH
10651: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10655: LD_EXP 28
10659: PPUSH
10660: LD_STRING 13_BurlakStatus_1
10662: PPUSH
10663: CALL_OW 39
// if IsLive ( Stevens ) then
10667: LD_EXP 2
10671: PPUSH
10672: CALL_OW 300
10676: IFFALSE 10690
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10678: LD_INT 1
10680: PPUSH
10681: LD_STRING 13_StevensStatus_1
10683: PPUSH
10684: CALL_OW 39
10688: GO 10700
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10690: LD_INT 0
10692: PPUSH
10693: LD_STRING 13_StevensStatus_1
10695: PPUSH
10696: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10700: LD_INT 22
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 21
10712: PUSH
10713: LD_INT 1
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 2
10722: PUSH
10723: LD_INT 25
10725: PUSH
10726: LD_INT 1
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 25
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: LD_INT 25
10745: PUSH
10746: LD_INT 3
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PUSH
10753: LD_INT 25
10755: PUSH
10756: LD_INT 4
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 25
10765: PUSH
10766: LD_INT 5
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 25
10775: PUSH
10776: LD_INT 8
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: LIST
10796: PPUSH
10797: CALL_OW 69
10801: PPUSH
10802: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10806: LD_EXP 1
10810: PPUSH
10811: LD_EXP 34
10815: PUSH
10816: LD_STRING JMM
10818: STR
10819: PPUSH
10820: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
10824: LD_EXP 8
10828: PPUSH
10829: LD_EXP 34
10833: PUSH
10834: LD_STRING Brown
10836: STR
10837: PPUSH
10838: CALL 6761 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10842: LD_EXP 4
10846: PPUSH
10847: LD_EXP 34
10851: PUSH
10852: LD_STRING Donaldson
10854: STR
10855: PPUSH
10856: CALL 6761 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
10860: LD_EXP 5
10864: PPUSH
10865: LD_EXP 34
10869: PUSH
10870: LD_STRING Bobby
10872: STR
10873: PPUSH
10874: CALL 6761 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
10878: LD_EXP 6
10882: PPUSH
10883: LD_EXP 34
10887: PUSH
10888: LD_STRING Cyrus
10890: STR
10891: PPUSH
10892: CALL 6761 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
10896: LD_EXP 3
10900: PPUSH
10901: LD_EXP 34
10905: PUSH
10906: LD_STRING Lisa
10908: STR
10909: PPUSH
10910: CALL 6761 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
10914: LD_EXP 13
10918: PPUSH
10919: LD_EXP 34
10923: PUSH
10924: LD_STRING Frank
10926: STR
10927: PPUSH
10928: CALL 6761 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
10932: LD_EXP 14
10936: PPUSH
10937: LD_EXP 34
10941: PUSH
10942: LD_STRING Kikuchi
10944: STR
10945: PPUSH
10946: CALL 6761 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
10950: LD_EXP 10
10954: PPUSH
10955: LD_EXP 34
10959: PUSH
10960: LD_STRING Houten
10962: STR
10963: PPUSH
10964: CALL 6761 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
10968: LD_EXP 12
10972: PPUSH
10973: LD_EXP 34
10977: PUSH
10978: LD_STRING Gary
10980: STR
10981: PPUSH
10982: CALL 6761 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
10986: LD_EXP 11
10990: PPUSH
10991: LD_EXP 34
10995: PUSH
10996: LD_STRING Cornell
10998: STR
10999: PPUSH
11000: CALL 6761 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11004: LD_EXP 7
11008: PPUSH
11009: LD_EXP 34
11013: PUSH
11014: LD_STRING Denis
11016: STR
11017: PPUSH
11018: CALL 6761 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11022: LD_EXP 9
11026: PPUSH
11027: LD_EXP 34
11031: PUSH
11032: LD_STRING Gladstone
11034: STR
11035: PPUSH
11036: CALL 6761 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11040: LD_EXP 2
11044: PPUSH
11045: LD_EXP 34
11049: PUSH
11050: LD_STRING Stevens
11052: STR
11053: PPUSH
11054: CALL 6761 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11058: LD_INT 50
11060: PUSH
11061: EMPTY
11062: LIST
11063: PUSH
11064: LD_INT 22
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 21
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 2
11086: PUSH
11087: LD_INT 25
11089: PUSH
11090: LD_INT 1
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 25
11099: PUSH
11100: LD_INT 2
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 25
11109: PUSH
11110: LD_INT 3
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: LD_INT 25
11119: PUSH
11120: LD_INT 4
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 25
11129: PUSH
11130: LD_INT 5
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 25
11139: PUSH
11140: LD_INT 8
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: PPUSH
11162: CALL_OW 69
11166: PUSH
11167: LD_EXP 1
11171: PUSH
11172: LD_EXP 8
11176: PUSH
11177: LD_EXP 4
11181: PUSH
11182: LD_EXP 5
11186: PUSH
11187: LD_EXP 6
11191: PUSH
11192: LD_EXP 3
11196: PUSH
11197: LD_EXP 13
11201: PUSH
11202: LD_EXP 9
11206: PUSH
11207: LD_EXP 14
11211: PUSH
11212: LD_EXP 7
11216: PUSH
11217: LD_EXP 10
11221: PUSH
11222: LD_EXP 12
11226: PUSH
11227: LD_EXP 11
11231: PUSH
11232: LD_EXP 2
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: DIFF
11253: PPUSH
11254: LD_STRING 13_other_survivors
11256: PPUSH
11257: CALL_OW 38
// YouWin ;
11261: CALL_OW 103
// end ; end_of_file
11265: PPOPN 3
11267: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do var i , tmp , yourSiberite ;
11268: LD_EXP 32
11272: PUSH
11273: LD_INT 2
11275: EQUAL
11276: PUSH
11277: LD_INT 34
11279: PUSH
11280: LD_INT 8
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PPUSH
11287: CALL_OW 69
11291: NOT
11292: AND
11293: IFFALSE 11429
11295: GO 11297
11297: DISABLE
11298: LD_INT 0
11300: PPUSH
11301: PPUSH
11302: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11303: LD_ADDR_VAR 0 2
11307: PUSH
11308: LD_INT 22
11310: PUSH
11311: LD_INT 1
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 21
11320: PUSH
11321: LD_INT 3
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 2
11330: PUSH
11331: LD_INT 30
11333: PUSH
11334: LD_INT 0
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 30
11343: PUSH
11344: LD_INT 1
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: PPUSH
11361: CALL_OW 69
11365: ST_TO_ADDR
// for i in tmp do
11366: LD_ADDR_VAR 0 1
11370: PUSH
11371: LD_VAR 0 2
11375: PUSH
11376: FOR_IN
11377: IFFALSE 11410
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11379: LD_ADDR_VAR 0 3
11383: PUSH
11384: LD_VAR 0 3
11388: PUSH
11389: LD_VAR 0 1
11393: PPUSH
11394: CALL_OW 274
11398: PPUSH
11399: LD_INT 3
11401: PPUSH
11402: CALL_OW 275
11406: PLUS
11407: ST_TO_ADDR
11408: GO 11376
11410: POP
11411: POP
// if yourSiberite < 79 then
11412: LD_VAR 0 3
11416: PUSH
11417: LD_INT 79
11419: LESS
11420: IFFALSE 11429
// YouLost ( siberite ) ;
11422: LD_STRING siberite
11424: PPUSH
11425: CALL_OW 104
// end ; end_of_file
11429: PPOPN 3
11431: END
// every 8 8$0 + 7 7$0 do
11432: GO 11434
11434: DISABLE
// begin enable ;
11435: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11436: LD_INT 8
11438: PPUSH
11439: LD_INT 2
11441: PPUSH
11442: LD_INT 1
11444: PPUSH
11445: LD_INT 3
11447: PPUSH
11448: CALL_OW 12
11452: PPUSH
11453: LD_INT 0
11455: PPUSH
11456: LD_INT 0
11458: PPUSH
11459: LD_INT 2
11461: PUSH
11462: LD_INT 3
11464: PUSH
11465: LD_INT 4
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: LIST
11472: PUSH
11473: LD_OWVAR 67
11477: ARRAY
11478: PPUSH
11479: LD_INT 0
11481: PPUSH
11482: LD_INT 10
11484: PPUSH
11485: LD_INT 8
11487: PUSH
11488: LD_INT 9
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 1
11497: PPUSH
11498: LD_INT 2
11500: PPUSH
11501: CALL_OW 12
11505: ARRAY
11506: PPUSH
11507: LD_INT 12
11509: PPUSH
11510: LD_INT 1
11512: PPUSH
11513: CALL 6801 0 11
// end ;
11517: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11518: GO 11520
11520: DISABLE
11521: LD_INT 0
11523: PPUSH
11524: PPUSH
11525: PPUSH
// begin enable ;
11526: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11527: LD_ADDR_EXP 33
11531: PUSH
11532: LD_EXP 33
11536: PUSH
11537: LD_INT 1
11539: PLUS
11540: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11541: LD_INT 22
11543: PUSH
11544: LD_INT 8
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 3
11553: PUSH
11554: LD_INT 58
11556: PUSH
11557: EMPTY
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 34
11566: PUSH
11567: LD_INT 31
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: PPUSH
11579: CALL_OW 69
11583: PUSH
11584: LD_INT 2
11586: LESS
11587: IFFALSE 11827
// begin uc_side := 8 ;
11589: LD_ADDR_OWVAR 20
11593: PUSH
11594: LD_INT 8
11596: ST_TO_ADDR
// uc_nation := 2 ;
11597: LD_ADDR_OWVAR 21
11601: PUSH
11602: LD_INT 2
11604: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11605: LD_INT 14
11607: PPUSH
11608: LD_INT 3
11610: PPUSH
11611: LD_INT 1
11613: PPUSH
11614: LD_INT 31
11616: PPUSH
11617: LD_INT 100
11619: PPUSH
11620: CALL 34800 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
11624: LD_ADDR_VAR 0 1
11628: PUSH
11629: DOUBLE
11630: LD_INT 22
11632: PUSH
11633: LD_INT 8
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 3
11642: PUSH
11643: LD_INT 58
11645: PUSH
11646: EMPTY
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 34
11655: PUSH
11656: LD_INT 31
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 69
11672: PUSH
11673: LD_INT 1
11675: PLUS
11676: DEC
11677: ST_TO_ADDR
11678: LD_INT 2
11680: PUSH
11681: FOR_TO
11682: IFFALSE 11825
// begin veh := CreateVehicle ;
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: CALL_OW 45
11693: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11694: LD_VAR 0 2
11698: PPUSH
11699: LD_INT 5
11701: PPUSH
11702: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
11706: LD_ADDR_VAR 0 3
11710: PUSH
11711: LD_INT 181
11713: PUSH
11714: LD_INT 105
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 137
11723: PUSH
11724: LD_INT 6
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: LD_VAR 0 1
11739: PUSH
11740: LD_INT 2
11742: MOD
11743: PUSH
11744: LD_INT 1
11746: PLUS
11747: ARRAY
11748: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
11749: LD_VAR 0 2
11753: PPUSH
11754: LD_VAR 0 3
11758: PUSH
11759: LD_INT 1
11761: ARRAY
11762: PPUSH
11763: LD_VAR 0 3
11767: PUSH
11768: LD_INT 2
11770: ARRAY
11771: PPUSH
11772: LD_INT 12
11774: PPUSH
11775: LD_INT 0
11777: PPUSH
11778: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 ] [ Difficulty ] ) ;
11782: LD_INT 0
11784: PPUSH
11785: LD_INT 7
11787: PUSH
11788: LD_INT 9
11790: PUSH
11791: LD_INT 10
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: LIST
11798: PUSH
11799: LD_OWVAR 67
11803: ARRAY
11804: PPUSH
11805: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
11809: CALL_OW 44
11813: PPUSH
11814: LD_VAR 0 2
11818: PPUSH
11819: CALL_OW 52
// end ;
11823: GO 11681
11825: POP
11826: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
11827: LD_INT 8
11829: PUSH
11830: LD_INT 9
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 1
11839: PPUSH
11840: LD_INT 2
11842: PPUSH
11843: CALL_OW 12
11847: ARRAY
11848: PPUSH
11849: LD_INT 8
11851: PPUSH
11852: LD_INT 4
11854: PPUSH
11855: LD_INT 6
11857: PPUSH
11858: CALL_OW 12
11862: PUSH
11863: LD_INT 6
11865: PPUSH
11866: LD_INT 9
11868: PPUSH
11869: CALL_OW 12
11873: PUSH
11874: LD_INT 7
11876: PPUSH
11877: LD_INT 10
11879: PPUSH
11880: CALL_OW 12
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: LIST
11889: PUSH
11890: LD_OWVAR 67
11894: ARRAY
11895: PPUSH
11896: LD_INT 10
11898: PPUSH
11899: LD_INT 2
11901: PPUSH
11902: LD_INT 3
11904: PPUSH
11905: LD_INT 5
11907: PUSH
11908: LD_INT 2
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PPUSH
11915: EMPTY
11916: PPUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 26
11922: PUSH
11923: LD_INT 27
11925: PUSH
11926: LD_INT 28
11928: PUSH
11929: LD_INT 29
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: PPUSH
11939: EMPTY
11940: PPUSH
11941: LD_INT 1
11943: PPUSH
11944: CALL 7869 0 11
// end ;
11948: PPOPN 3
11950: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
11951: LD_EXP 33
11955: PUSH
11956: LD_INT 4
11958: GREATEREQUAL
11959: IFFALSE 12299
11961: GO 11963
11963: DISABLE
11964: LD_INT 0
11966: PPUSH
11967: PPUSH
// begin enable ;
11968: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11969: LD_ADDR_EXP 33
11973: PUSH
11974: LD_EXP 33
11978: PUSH
11979: LD_INT 1
11981: PLUS
11982: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11983: LD_INT 22
11985: PUSH
11986: LD_INT 8
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 3
11995: PUSH
11996: LD_INT 58
11998: PUSH
11999: EMPTY
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 34
12008: PUSH
12009: LD_INT 31
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: PPUSH
12021: CALL_OW 69
12025: PUSH
12026: LD_INT 2
12028: LESS
12029: IFFALSE 12214
// begin uc_side := 8 ;
12031: LD_ADDR_OWVAR 20
12035: PUSH
12036: LD_INT 8
12038: ST_TO_ADDR
// uc_nation := 2 ;
12039: LD_ADDR_OWVAR 21
12043: PUSH
12044: LD_INT 2
12046: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12047: LD_INT 14
12049: PPUSH
12050: LD_INT 3
12052: PPUSH
12053: LD_INT 1
12055: PPUSH
12056: LD_INT 31
12058: PPUSH
12059: LD_INT 100
12061: PPUSH
12062: CALL 34800 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12066: LD_ADDR_VAR 0 1
12070: PUSH
12071: DOUBLE
12072: LD_INT 22
12074: PUSH
12075: LD_INT 8
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 3
12084: PUSH
12085: LD_INT 58
12087: PUSH
12088: EMPTY
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 34
12097: PUSH
12098: LD_INT 31
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: PPUSH
12110: CALL_OW 69
12114: PUSH
12115: LD_INT 1
12117: PLUS
12118: DEC
12119: ST_TO_ADDR
12120: LD_INT 2
12122: PUSH
12123: FOR_TO
12124: IFFALSE 12212
// begin veh := CreateVehicle ;
12126: LD_ADDR_VAR 0 2
12130: PUSH
12131: CALL_OW 45
12135: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12136: LD_VAR 0 2
12140: PPUSH
12141: LD_INT 5
12143: PPUSH
12144: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12148: LD_VAR 0 2
12152: PPUSH
12153: LD_INT 181
12155: PPUSH
12156: LD_INT 105
12158: PPUSH
12159: LD_INT 12
12161: PPUSH
12162: LD_INT 0
12164: PPUSH
12165: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12169: LD_INT 0
12171: PPUSH
12172: LD_INT 8
12174: PUSH
12175: LD_INT 9
12177: PUSH
12178: LD_INT 10
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: LIST
12185: PUSH
12186: LD_OWVAR 67
12190: ARRAY
12191: PPUSH
12192: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12196: CALL_OW 44
12200: PPUSH
12201: LD_VAR 0 2
12205: PPUSH
12206: CALL_OW 52
// end ;
12210: GO 12123
12212: POP
12213: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12214: LD_INT 8
12216: PUSH
12217: LD_INT 9
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 1
12226: PPUSH
12227: LD_INT 2
12229: PPUSH
12230: CALL_OW 12
12234: ARRAY
12235: PPUSH
12236: LD_INT 8
12238: PPUSH
12239: LD_INT 1
12241: PUSH
12242: LD_INT 2
12244: PUSH
12245: LD_INT 3
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: LIST
12252: PUSH
12253: LD_OWVAR 67
12257: ARRAY
12258: PPUSH
12259: LD_INT 10
12261: PPUSH
12262: LD_INT 3
12264: PPUSH
12265: LD_INT 3
12267: PPUSH
12268: LD_INT 1
12270: PUSH
12271: LD_INT 1
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PPUSH
12278: LD_INT 47
12280: PUSH
12281: LD_INT 47
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: EMPTY
12289: PPUSH
12290: EMPTY
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL 7869 0 11
// end ;
12299: PPOPN 2
12301: END
// every 1 1$0 trigger eventVar2 = 1 do var i , veh ;
12302: LD_EXP 36
12306: PUSH
12307: LD_INT 1
12309: EQUAL
12310: IFFALSE 12647
12312: GO 12314
12314: DISABLE
12315: LD_INT 0
12317: PPUSH
12318: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12319: LD_INT 22
12321: PUSH
12322: LD_INT 8
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: LD_INT 3
12331: PUSH
12332: LD_INT 58
12334: PUSH
12335: EMPTY
12336: LIST
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 34
12344: PUSH
12345: LD_INT 31
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: LIST
12356: PPUSH
12357: CALL_OW 69
12361: PUSH
12362: LD_INT 2
12364: LESS
12365: IFFALSE 12550
// begin uc_side := 8 ;
12367: LD_ADDR_OWVAR 20
12371: PUSH
12372: LD_INT 8
12374: ST_TO_ADDR
// uc_nation := 2 ;
12375: LD_ADDR_OWVAR 21
12379: PUSH
12380: LD_INT 2
12382: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12383: LD_INT 14
12385: PPUSH
12386: LD_INT 3
12388: PPUSH
12389: LD_INT 1
12391: PPUSH
12392: LD_INT 31
12394: PPUSH
12395: LD_INT 100
12397: PPUSH
12398: CALL 34800 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12402: LD_ADDR_VAR 0 1
12406: PUSH
12407: DOUBLE
12408: LD_INT 22
12410: PUSH
12411: LD_INT 8
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 3
12420: PUSH
12421: LD_INT 58
12423: PUSH
12424: EMPTY
12425: LIST
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 34
12433: PUSH
12434: LD_INT 31
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: PPUSH
12446: CALL_OW 69
12450: PUSH
12451: LD_INT 1
12453: PLUS
12454: DEC
12455: ST_TO_ADDR
12456: LD_INT 2
12458: PUSH
12459: FOR_TO
12460: IFFALSE 12548
// begin veh := CreateVehicle ;
12462: LD_ADDR_VAR 0 2
12466: PUSH
12467: CALL_OW 45
12471: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12472: LD_VAR 0 2
12476: PPUSH
12477: LD_INT 5
12479: PPUSH
12480: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12484: LD_VAR 0 2
12488: PPUSH
12489: LD_INT 181
12491: PPUSH
12492: LD_INT 105
12494: PPUSH
12495: LD_INT 12
12497: PPUSH
12498: LD_INT 0
12500: PPUSH
12501: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12505: LD_INT 0
12507: PPUSH
12508: LD_INT 8
12510: PUSH
12511: LD_INT 9
12513: PUSH
12514: LD_INT 10
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: LIST
12521: PUSH
12522: LD_OWVAR 67
12526: ARRAY
12527: PPUSH
12528: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12532: CALL_OW 44
12536: PPUSH
12537: LD_VAR 0 2
12541: PPUSH
12542: CALL_OW 52
// end ;
12546: GO 12459
12548: POP
12549: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12550: LD_INT 8
12552: PUSH
12553: LD_INT 9
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 1
12562: PPUSH
12563: LD_INT 2
12565: PPUSH
12566: CALL_OW 12
12570: ARRAY
12571: PPUSH
12572: LD_INT 3
12574: PPUSH
12575: LD_INT 5
12577: PUSH
12578: LD_INT 7
12580: PUSH
12581: LD_INT 8
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: LIST
12588: PUSH
12589: LD_OWVAR 67
12593: ARRAY
12594: PPUSH
12595: LD_INT 10
12597: PPUSH
12598: LD_INT 3
12600: PPUSH
12601: LD_INT 3
12603: PPUSH
12604: LD_INT 3
12606: PUSH
12607: LD_INT 3
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: PPUSH
12614: LD_INT 46
12616: PUSH
12617: LD_INT 44
12619: PUSH
12620: LD_INT 45
12622: PUSH
12623: LD_INT 47
12625: PUSH
12626: LD_INT 49
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: PPUSH
12636: EMPTY
12637: PPUSH
12638: EMPTY
12639: PPUSH
12640: LD_INT 1
12642: PPUSH
12643: CALL 7869 0 11
// end ; end_of_file
12647: PPOPN 2
12649: END
// every 1 1$0 do
12650: GO 12652
12652: DISABLE
// begin enable ;
12653: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12654: LD_INT 3
12656: PPUSH
12657: LD_INT 5
12659: PPUSH
12660: CALL_OW 12
12664: PPUSH
12665: LD_INT 13
12667: PPUSH
12668: LD_INT 1
12670: PPUSH
12671: CALL_OW 55
// end ; end_of_file
12675: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
12676: LD_INT 0
12678: PPUSH
// ar_miner := 81 ;
12679: LD_ADDR_EXP 50
12683: PUSH
12684: LD_INT 81
12686: ST_TO_ADDR
// ar_crane := 88 ;
12687: LD_ADDR_EXP 49
12691: PUSH
12692: LD_INT 88
12694: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12695: LD_ADDR_EXP 44
12699: PUSH
12700: LD_INT 89
12702: ST_TO_ADDR
// us_hack := 99 ;
12703: LD_ADDR_EXP 45
12707: PUSH
12708: LD_INT 99
12710: ST_TO_ADDR
// us_artillery := 97 ;
12711: LD_ADDR_EXP 46
12715: PUSH
12716: LD_INT 97
12718: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12719: LD_ADDR_EXP 47
12723: PUSH
12724: LD_INT 91
12726: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
12727: LD_ADDR_EXP 48
12731: PUSH
12732: LD_INT 92
12734: ST_TO_ADDR
// ru_radar := 98 ;
12735: LD_ADDR_EXP 43
12739: PUSH
12740: LD_INT 98
12742: ST_TO_ADDR
// tech_Artillery := 80 ;
12743: LD_ADDR_EXP 51
12747: PUSH
12748: LD_INT 80
12750: ST_TO_ADDR
// tech_RadMat := 81 ;
12751: LD_ADDR_EXP 52
12755: PUSH
12756: LD_INT 81
12758: ST_TO_ADDR
// tech_BasicTools := 82 ;
12759: LD_ADDR_EXP 53
12763: PUSH
12764: LD_INT 82
12766: ST_TO_ADDR
// tech_Cargo := 83 ;
12767: LD_ADDR_EXP 54
12771: PUSH
12772: LD_INT 83
12774: ST_TO_ADDR
// tech_Track := 84 ;
12775: LD_ADDR_EXP 55
12779: PUSH
12780: LD_INT 84
12782: ST_TO_ADDR
// tech_Crane := 85 ;
12783: LD_ADDR_EXP 56
12787: PUSH
12788: LD_INT 85
12790: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12791: LD_ADDR_EXP 57
12795: PUSH
12796: LD_INT 86
12798: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12799: LD_ADDR_EXP 58
12803: PUSH
12804: LD_INT 87
12806: ST_TO_ADDR
// end ;
12807: LD_VAR 0 1
12811: RET
// every 1 do
12812: GO 12814
12814: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12815: CALL 12676 0 0
12819: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12820: LD_VAR 0 2
12824: PUSH
12825: LD_INT 100
12827: EQUAL
12828: IFFALSE 13777
// begin if not StreamModeActive then
12830: LD_EXP 59
12834: NOT
12835: IFFALSE 12845
// StreamModeActive := true ;
12837: LD_ADDR_EXP 59
12841: PUSH
12842: LD_INT 1
12844: ST_TO_ADDR
// if p3 = 0 then
12845: LD_VAR 0 3
12849: PUSH
12850: LD_INT 0
12852: EQUAL
12853: IFFALSE 12859
// InitStreamMode ;
12855: CALL 13935 0 0
// if p3 = 1 then
12859: LD_VAR 0 3
12863: PUSH
12864: LD_INT 1
12866: EQUAL
12867: IFFALSE 12877
// sRocket := true ;
12869: LD_ADDR_EXP 64
12873: PUSH
12874: LD_INT 1
12876: ST_TO_ADDR
// if p3 = 2 then
12877: LD_VAR 0 3
12881: PUSH
12882: LD_INT 2
12884: EQUAL
12885: IFFALSE 12895
// sSpeed := true ;
12887: LD_ADDR_EXP 63
12891: PUSH
12892: LD_INT 1
12894: ST_TO_ADDR
// if p3 = 3 then
12895: LD_VAR 0 3
12899: PUSH
12900: LD_INT 3
12902: EQUAL
12903: IFFALSE 12913
// sEngine := true ;
12905: LD_ADDR_EXP 65
12909: PUSH
12910: LD_INT 1
12912: ST_TO_ADDR
// if p3 = 4 then
12913: LD_VAR 0 3
12917: PUSH
12918: LD_INT 4
12920: EQUAL
12921: IFFALSE 12931
// sSpec := true ;
12923: LD_ADDR_EXP 62
12927: PUSH
12928: LD_INT 1
12930: ST_TO_ADDR
// if p3 = 5 then
12931: LD_VAR 0 3
12935: PUSH
12936: LD_INT 5
12938: EQUAL
12939: IFFALSE 12949
// sLevel := true ;
12941: LD_ADDR_EXP 66
12945: PUSH
12946: LD_INT 1
12948: ST_TO_ADDR
// if p3 = 6 then
12949: LD_VAR 0 3
12953: PUSH
12954: LD_INT 6
12956: EQUAL
12957: IFFALSE 12967
// sArmoury := true ;
12959: LD_ADDR_EXP 67
12963: PUSH
12964: LD_INT 1
12966: ST_TO_ADDR
// if p3 = 7 then
12967: LD_VAR 0 3
12971: PUSH
12972: LD_INT 7
12974: EQUAL
12975: IFFALSE 12985
// sRadar := true ;
12977: LD_ADDR_EXP 68
12981: PUSH
12982: LD_INT 1
12984: ST_TO_ADDR
// if p3 = 8 then
12985: LD_VAR 0 3
12989: PUSH
12990: LD_INT 8
12992: EQUAL
12993: IFFALSE 13003
// sBunker := true ;
12995: LD_ADDR_EXP 69
12999: PUSH
13000: LD_INT 1
13002: ST_TO_ADDR
// if p3 = 9 then
13003: LD_VAR 0 3
13007: PUSH
13008: LD_INT 9
13010: EQUAL
13011: IFFALSE 13021
// sHack := true ;
13013: LD_ADDR_EXP 70
13017: PUSH
13018: LD_INT 1
13020: ST_TO_ADDR
// if p3 = 10 then
13021: LD_VAR 0 3
13025: PUSH
13026: LD_INT 10
13028: EQUAL
13029: IFFALSE 13039
// sFire := true ;
13031: LD_ADDR_EXP 71
13035: PUSH
13036: LD_INT 1
13038: ST_TO_ADDR
// if p3 = 11 then
13039: LD_VAR 0 3
13043: PUSH
13044: LD_INT 11
13046: EQUAL
13047: IFFALSE 13057
// sRefresh := true ;
13049: LD_ADDR_EXP 72
13053: PUSH
13054: LD_INT 1
13056: ST_TO_ADDR
// if p3 = 12 then
13057: LD_VAR 0 3
13061: PUSH
13062: LD_INT 12
13064: EQUAL
13065: IFFALSE 13075
// sExp := true ;
13067: LD_ADDR_EXP 73
13071: PUSH
13072: LD_INT 1
13074: ST_TO_ADDR
// if p3 = 13 then
13075: LD_VAR 0 3
13079: PUSH
13080: LD_INT 13
13082: EQUAL
13083: IFFALSE 13093
// sDepot := true ;
13085: LD_ADDR_EXP 74
13089: PUSH
13090: LD_INT 1
13092: ST_TO_ADDR
// if p3 = 14 then
13093: LD_VAR 0 3
13097: PUSH
13098: LD_INT 14
13100: EQUAL
13101: IFFALSE 13111
// sFlag := true ;
13103: LD_ADDR_EXP 75
13107: PUSH
13108: LD_INT 1
13110: ST_TO_ADDR
// if p3 = 15 then
13111: LD_VAR 0 3
13115: PUSH
13116: LD_INT 15
13118: EQUAL
13119: IFFALSE 13129
// sKamikadze := true ;
13121: LD_ADDR_EXP 83
13125: PUSH
13126: LD_INT 1
13128: ST_TO_ADDR
// if p3 = 16 then
13129: LD_VAR 0 3
13133: PUSH
13134: LD_INT 16
13136: EQUAL
13137: IFFALSE 13147
// sTroll := true ;
13139: LD_ADDR_EXP 84
13143: PUSH
13144: LD_INT 1
13146: ST_TO_ADDR
// if p3 = 17 then
13147: LD_VAR 0 3
13151: PUSH
13152: LD_INT 17
13154: EQUAL
13155: IFFALSE 13165
// sSlow := true ;
13157: LD_ADDR_EXP 85
13161: PUSH
13162: LD_INT 1
13164: ST_TO_ADDR
// if p3 = 18 then
13165: LD_VAR 0 3
13169: PUSH
13170: LD_INT 18
13172: EQUAL
13173: IFFALSE 13183
// sLack := true ;
13175: LD_ADDR_EXP 86
13179: PUSH
13180: LD_INT 1
13182: ST_TO_ADDR
// if p3 = 19 then
13183: LD_VAR 0 3
13187: PUSH
13188: LD_INT 19
13190: EQUAL
13191: IFFALSE 13201
// sTank := true ;
13193: LD_ADDR_EXP 88
13197: PUSH
13198: LD_INT 1
13200: ST_TO_ADDR
// if p3 = 20 then
13201: LD_VAR 0 3
13205: PUSH
13206: LD_INT 20
13208: EQUAL
13209: IFFALSE 13219
// sRemote := true ;
13211: LD_ADDR_EXP 89
13215: PUSH
13216: LD_INT 1
13218: ST_TO_ADDR
// if p3 = 21 then
13219: LD_VAR 0 3
13223: PUSH
13224: LD_INT 21
13226: EQUAL
13227: IFFALSE 13237
// sPowell := true ;
13229: LD_ADDR_EXP 90
13233: PUSH
13234: LD_INT 1
13236: ST_TO_ADDR
// if p3 = 22 then
13237: LD_VAR 0 3
13241: PUSH
13242: LD_INT 22
13244: EQUAL
13245: IFFALSE 13255
// sTeleport := true ;
13247: LD_ADDR_EXP 93
13251: PUSH
13252: LD_INT 1
13254: ST_TO_ADDR
// if p3 = 23 then
13255: LD_VAR 0 3
13259: PUSH
13260: LD_INT 23
13262: EQUAL
13263: IFFALSE 13273
// sOilTower := true ;
13265: LD_ADDR_EXP 95
13269: PUSH
13270: LD_INT 1
13272: ST_TO_ADDR
// if p3 = 24 then
13273: LD_VAR 0 3
13277: PUSH
13278: LD_INT 24
13280: EQUAL
13281: IFFALSE 13291
// sShovel := true ;
13283: LD_ADDR_EXP 96
13287: PUSH
13288: LD_INT 1
13290: ST_TO_ADDR
// if p3 = 25 then
13291: LD_VAR 0 3
13295: PUSH
13296: LD_INT 25
13298: EQUAL
13299: IFFALSE 13309
// sSheik := true ;
13301: LD_ADDR_EXP 97
13305: PUSH
13306: LD_INT 1
13308: ST_TO_ADDR
// if p3 = 26 then
13309: LD_VAR 0 3
13313: PUSH
13314: LD_INT 26
13316: EQUAL
13317: IFFALSE 13327
// sEarthquake := true ;
13319: LD_ADDR_EXP 99
13323: PUSH
13324: LD_INT 1
13326: ST_TO_ADDR
// if p3 = 27 then
13327: LD_VAR 0 3
13331: PUSH
13332: LD_INT 27
13334: EQUAL
13335: IFFALSE 13345
// sAI := true ;
13337: LD_ADDR_EXP 100
13341: PUSH
13342: LD_INT 1
13344: ST_TO_ADDR
// if p3 = 28 then
13345: LD_VAR 0 3
13349: PUSH
13350: LD_INT 28
13352: EQUAL
13353: IFFALSE 13363
// sCargo := true ;
13355: LD_ADDR_EXP 103
13359: PUSH
13360: LD_INT 1
13362: ST_TO_ADDR
// if p3 = 29 then
13363: LD_VAR 0 3
13367: PUSH
13368: LD_INT 29
13370: EQUAL
13371: IFFALSE 13381
// sDLaser := true ;
13373: LD_ADDR_EXP 104
13377: PUSH
13378: LD_INT 1
13380: ST_TO_ADDR
// if p3 = 30 then
13381: LD_VAR 0 3
13385: PUSH
13386: LD_INT 30
13388: EQUAL
13389: IFFALSE 13399
// sExchange := true ;
13391: LD_ADDR_EXP 105
13395: PUSH
13396: LD_INT 1
13398: ST_TO_ADDR
// if p3 = 31 then
13399: LD_VAR 0 3
13403: PUSH
13404: LD_INT 31
13406: EQUAL
13407: IFFALSE 13417
// sFac := true ;
13409: LD_ADDR_EXP 106
13413: PUSH
13414: LD_INT 1
13416: ST_TO_ADDR
// if p3 = 32 then
13417: LD_VAR 0 3
13421: PUSH
13422: LD_INT 32
13424: EQUAL
13425: IFFALSE 13435
// sPower := true ;
13427: LD_ADDR_EXP 107
13431: PUSH
13432: LD_INT 1
13434: ST_TO_ADDR
// if p3 = 33 then
13435: LD_VAR 0 3
13439: PUSH
13440: LD_INT 33
13442: EQUAL
13443: IFFALSE 13453
// sRandom := true ;
13445: LD_ADDR_EXP 108
13449: PUSH
13450: LD_INT 1
13452: ST_TO_ADDR
// if p3 = 34 then
13453: LD_VAR 0 3
13457: PUSH
13458: LD_INT 34
13460: EQUAL
13461: IFFALSE 13471
// sShield := true ;
13463: LD_ADDR_EXP 109
13467: PUSH
13468: LD_INT 1
13470: ST_TO_ADDR
// if p3 = 35 then
13471: LD_VAR 0 3
13475: PUSH
13476: LD_INT 35
13478: EQUAL
13479: IFFALSE 13489
// sTime := true ;
13481: LD_ADDR_EXP 110
13485: PUSH
13486: LD_INT 1
13488: ST_TO_ADDR
// if p3 = 36 then
13489: LD_VAR 0 3
13493: PUSH
13494: LD_INT 36
13496: EQUAL
13497: IFFALSE 13507
// sTools := true ;
13499: LD_ADDR_EXP 111
13503: PUSH
13504: LD_INT 1
13506: ST_TO_ADDR
// if p3 = 101 then
13507: LD_VAR 0 3
13511: PUSH
13512: LD_INT 101
13514: EQUAL
13515: IFFALSE 13525
// sSold := true ;
13517: LD_ADDR_EXP 76
13521: PUSH
13522: LD_INT 1
13524: ST_TO_ADDR
// if p3 = 102 then
13525: LD_VAR 0 3
13529: PUSH
13530: LD_INT 102
13532: EQUAL
13533: IFFALSE 13543
// sDiff := true ;
13535: LD_ADDR_EXP 77
13539: PUSH
13540: LD_INT 1
13542: ST_TO_ADDR
// if p3 = 103 then
13543: LD_VAR 0 3
13547: PUSH
13548: LD_INT 103
13550: EQUAL
13551: IFFALSE 13561
// sFog := true ;
13553: LD_ADDR_EXP 80
13557: PUSH
13558: LD_INT 1
13560: ST_TO_ADDR
// if p3 = 104 then
13561: LD_VAR 0 3
13565: PUSH
13566: LD_INT 104
13568: EQUAL
13569: IFFALSE 13579
// sReset := true ;
13571: LD_ADDR_EXP 81
13575: PUSH
13576: LD_INT 1
13578: ST_TO_ADDR
// if p3 = 105 then
13579: LD_VAR 0 3
13583: PUSH
13584: LD_INT 105
13586: EQUAL
13587: IFFALSE 13597
// sSun := true ;
13589: LD_ADDR_EXP 82
13593: PUSH
13594: LD_INT 1
13596: ST_TO_ADDR
// if p3 = 106 then
13597: LD_VAR 0 3
13601: PUSH
13602: LD_INT 106
13604: EQUAL
13605: IFFALSE 13615
// sTiger := true ;
13607: LD_ADDR_EXP 78
13611: PUSH
13612: LD_INT 1
13614: ST_TO_ADDR
// if p3 = 107 then
13615: LD_VAR 0 3
13619: PUSH
13620: LD_INT 107
13622: EQUAL
13623: IFFALSE 13633
// sBomb := true ;
13625: LD_ADDR_EXP 79
13629: PUSH
13630: LD_INT 1
13632: ST_TO_ADDR
// if p3 = 108 then
13633: LD_VAR 0 3
13637: PUSH
13638: LD_INT 108
13640: EQUAL
13641: IFFALSE 13651
// sWound := true ;
13643: LD_ADDR_EXP 87
13647: PUSH
13648: LD_INT 1
13650: ST_TO_ADDR
// if p3 = 109 then
13651: LD_VAR 0 3
13655: PUSH
13656: LD_INT 109
13658: EQUAL
13659: IFFALSE 13669
// sBetray := true ;
13661: LD_ADDR_EXP 91
13665: PUSH
13666: LD_INT 1
13668: ST_TO_ADDR
// if p3 = 110 then
13669: LD_VAR 0 3
13673: PUSH
13674: LD_INT 110
13676: EQUAL
13677: IFFALSE 13687
// sContamin := true ;
13679: LD_ADDR_EXP 92
13683: PUSH
13684: LD_INT 1
13686: ST_TO_ADDR
// if p3 = 111 then
13687: LD_VAR 0 3
13691: PUSH
13692: LD_INT 111
13694: EQUAL
13695: IFFALSE 13705
// sOil := true ;
13697: LD_ADDR_EXP 94
13701: PUSH
13702: LD_INT 1
13704: ST_TO_ADDR
// if p3 = 112 then
13705: LD_VAR 0 3
13709: PUSH
13710: LD_INT 112
13712: EQUAL
13713: IFFALSE 13723
// sStu := true ;
13715: LD_ADDR_EXP 98
13719: PUSH
13720: LD_INT 1
13722: ST_TO_ADDR
// if p3 = 113 then
13723: LD_VAR 0 3
13727: PUSH
13728: LD_INT 113
13730: EQUAL
13731: IFFALSE 13741
// sBazooka := true ;
13733: LD_ADDR_EXP 101
13737: PUSH
13738: LD_INT 1
13740: ST_TO_ADDR
// if p3 = 114 then
13741: LD_VAR 0 3
13745: PUSH
13746: LD_INT 114
13748: EQUAL
13749: IFFALSE 13759
// sMortar := true ;
13751: LD_ADDR_EXP 102
13755: PUSH
13756: LD_INT 1
13758: ST_TO_ADDR
// if p3 = 115 then
13759: LD_VAR 0 3
13763: PUSH
13764: LD_INT 115
13766: EQUAL
13767: IFFALSE 13777
// sRanger := true ;
13769: LD_ADDR_EXP 112
13773: PUSH
13774: LD_INT 1
13776: ST_TO_ADDR
// end ; if p2 = 101 then
13777: LD_VAR 0 2
13781: PUSH
13782: LD_INT 101
13784: EQUAL
13785: IFFALSE 13913
// begin case p3 of 1 :
13787: LD_VAR 0 3
13791: PUSH
13792: LD_INT 1
13794: DOUBLE
13795: EQUAL
13796: IFTRUE 13800
13798: GO 13807
13800: POP
// hHackUnlimitedResources ; 2 :
13801: CALL 24948 0 0
13805: GO 13913
13807: LD_INT 2
13809: DOUBLE
13810: EQUAL
13811: IFTRUE 13815
13813: GO 13822
13815: POP
// hHackSetLevel10 ; 3 :
13816: CALL 25081 0 0
13820: GO 13913
13822: LD_INT 3
13824: DOUBLE
13825: EQUAL
13826: IFTRUE 13830
13828: GO 13837
13830: POP
// hHackSetLevel10YourUnits ; 4 :
13831: CALL 25166 0 0
13835: GO 13913
13837: LD_INT 4
13839: DOUBLE
13840: EQUAL
13841: IFTRUE 13845
13843: GO 13852
13845: POP
// hHackInvincible ; 5 :
13846: CALL 25614 0 0
13850: GO 13913
13852: LD_INT 5
13854: DOUBLE
13855: EQUAL
13856: IFTRUE 13860
13858: GO 13867
13860: POP
// hHackInvisible ; 6 :
13861: CALL 25725 0 0
13865: GO 13913
13867: LD_INT 6
13869: DOUBLE
13870: EQUAL
13871: IFTRUE 13875
13873: GO 13882
13875: POP
// hHackChangeYourSide ; 7 :
13876: CALL 25782 0 0
13880: GO 13913
13882: LD_INT 7
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 13897
13890: POP
// hHackChangeUnitSide ; 8 :
13891: CALL 25824 0 0
13895: GO 13913
13897: LD_INT 8
13899: DOUBLE
13900: EQUAL
13901: IFTRUE 13905
13903: GO 13912
13905: POP
// hHackFog ; end ;
13906: CALL 25925 0 0
13910: GO 13913
13912: POP
// end ; end ;
13913: PPOPN 6
13915: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13916: GO 13918
13918: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13919: LD_STRING initStreamRollete();
13921: PPUSH
13922: CALL_OW 559
// InitStreamMode ;
13926: CALL 13935 0 0
// DefineStreamItems ( ) ;
13930: CALL 14375 0 0
// end ;
13934: END
// function InitStreamMode ; begin
13935: LD_INT 0
13937: PPUSH
// streamModeActive := false ;
13938: LD_ADDR_EXP 59
13942: PUSH
13943: LD_INT 0
13945: ST_TO_ADDR
// normalCounter := 36 ;
13946: LD_ADDR_EXP 60
13950: PUSH
13951: LD_INT 36
13953: ST_TO_ADDR
// hardcoreCounter := 16 ;
13954: LD_ADDR_EXP 61
13958: PUSH
13959: LD_INT 16
13961: ST_TO_ADDR
// sRocket := false ;
13962: LD_ADDR_EXP 64
13966: PUSH
13967: LD_INT 0
13969: ST_TO_ADDR
// sSpeed := false ;
13970: LD_ADDR_EXP 63
13974: PUSH
13975: LD_INT 0
13977: ST_TO_ADDR
// sEngine := false ;
13978: LD_ADDR_EXP 65
13982: PUSH
13983: LD_INT 0
13985: ST_TO_ADDR
// sSpec := false ;
13986: LD_ADDR_EXP 62
13990: PUSH
13991: LD_INT 0
13993: ST_TO_ADDR
// sLevel := false ;
13994: LD_ADDR_EXP 66
13998: PUSH
13999: LD_INT 0
14001: ST_TO_ADDR
// sArmoury := false ;
14002: LD_ADDR_EXP 67
14006: PUSH
14007: LD_INT 0
14009: ST_TO_ADDR
// sRadar := false ;
14010: LD_ADDR_EXP 68
14014: PUSH
14015: LD_INT 0
14017: ST_TO_ADDR
// sBunker := false ;
14018: LD_ADDR_EXP 69
14022: PUSH
14023: LD_INT 0
14025: ST_TO_ADDR
// sHack := false ;
14026: LD_ADDR_EXP 70
14030: PUSH
14031: LD_INT 0
14033: ST_TO_ADDR
// sFire := false ;
14034: LD_ADDR_EXP 71
14038: PUSH
14039: LD_INT 0
14041: ST_TO_ADDR
// sRefresh := false ;
14042: LD_ADDR_EXP 72
14046: PUSH
14047: LD_INT 0
14049: ST_TO_ADDR
// sExp := false ;
14050: LD_ADDR_EXP 73
14054: PUSH
14055: LD_INT 0
14057: ST_TO_ADDR
// sDepot := false ;
14058: LD_ADDR_EXP 74
14062: PUSH
14063: LD_INT 0
14065: ST_TO_ADDR
// sFlag := false ;
14066: LD_ADDR_EXP 75
14070: PUSH
14071: LD_INT 0
14073: ST_TO_ADDR
// sKamikadze := false ;
14074: LD_ADDR_EXP 83
14078: PUSH
14079: LD_INT 0
14081: ST_TO_ADDR
// sTroll := false ;
14082: LD_ADDR_EXP 84
14086: PUSH
14087: LD_INT 0
14089: ST_TO_ADDR
// sSlow := false ;
14090: LD_ADDR_EXP 85
14094: PUSH
14095: LD_INT 0
14097: ST_TO_ADDR
// sLack := false ;
14098: LD_ADDR_EXP 86
14102: PUSH
14103: LD_INT 0
14105: ST_TO_ADDR
// sTank := false ;
14106: LD_ADDR_EXP 88
14110: PUSH
14111: LD_INT 0
14113: ST_TO_ADDR
// sRemote := false ;
14114: LD_ADDR_EXP 89
14118: PUSH
14119: LD_INT 0
14121: ST_TO_ADDR
// sPowell := false ;
14122: LD_ADDR_EXP 90
14126: PUSH
14127: LD_INT 0
14129: ST_TO_ADDR
// sTeleport := false ;
14130: LD_ADDR_EXP 93
14134: PUSH
14135: LD_INT 0
14137: ST_TO_ADDR
// sOilTower := false ;
14138: LD_ADDR_EXP 95
14142: PUSH
14143: LD_INT 0
14145: ST_TO_ADDR
// sShovel := false ;
14146: LD_ADDR_EXP 96
14150: PUSH
14151: LD_INT 0
14153: ST_TO_ADDR
// sSheik := false ;
14154: LD_ADDR_EXP 97
14158: PUSH
14159: LD_INT 0
14161: ST_TO_ADDR
// sEarthquake := false ;
14162: LD_ADDR_EXP 99
14166: PUSH
14167: LD_INT 0
14169: ST_TO_ADDR
// sAI := false ;
14170: LD_ADDR_EXP 100
14174: PUSH
14175: LD_INT 0
14177: ST_TO_ADDR
// sCargo := false ;
14178: LD_ADDR_EXP 103
14182: PUSH
14183: LD_INT 0
14185: ST_TO_ADDR
// sDLaser := false ;
14186: LD_ADDR_EXP 104
14190: PUSH
14191: LD_INT 0
14193: ST_TO_ADDR
// sExchange := false ;
14194: LD_ADDR_EXP 105
14198: PUSH
14199: LD_INT 0
14201: ST_TO_ADDR
// sFac := false ;
14202: LD_ADDR_EXP 106
14206: PUSH
14207: LD_INT 0
14209: ST_TO_ADDR
// sPower := false ;
14210: LD_ADDR_EXP 107
14214: PUSH
14215: LD_INT 0
14217: ST_TO_ADDR
// sRandom := false ;
14218: LD_ADDR_EXP 108
14222: PUSH
14223: LD_INT 0
14225: ST_TO_ADDR
// sShield := false ;
14226: LD_ADDR_EXP 109
14230: PUSH
14231: LD_INT 0
14233: ST_TO_ADDR
// sTime := false ;
14234: LD_ADDR_EXP 110
14238: PUSH
14239: LD_INT 0
14241: ST_TO_ADDR
// sTools := false ;
14242: LD_ADDR_EXP 111
14246: PUSH
14247: LD_INT 0
14249: ST_TO_ADDR
// sSold := false ;
14250: LD_ADDR_EXP 76
14254: PUSH
14255: LD_INT 0
14257: ST_TO_ADDR
// sDiff := false ;
14258: LD_ADDR_EXP 77
14262: PUSH
14263: LD_INT 0
14265: ST_TO_ADDR
// sFog := false ;
14266: LD_ADDR_EXP 80
14270: PUSH
14271: LD_INT 0
14273: ST_TO_ADDR
// sReset := false ;
14274: LD_ADDR_EXP 81
14278: PUSH
14279: LD_INT 0
14281: ST_TO_ADDR
// sSun := false ;
14282: LD_ADDR_EXP 82
14286: PUSH
14287: LD_INT 0
14289: ST_TO_ADDR
// sTiger := false ;
14290: LD_ADDR_EXP 78
14294: PUSH
14295: LD_INT 0
14297: ST_TO_ADDR
// sBomb := false ;
14298: LD_ADDR_EXP 79
14302: PUSH
14303: LD_INT 0
14305: ST_TO_ADDR
// sWound := false ;
14306: LD_ADDR_EXP 87
14310: PUSH
14311: LD_INT 0
14313: ST_TO_ADDR
// sBetray := false ;
14314: LD_ADDR_EXP 91
14318: PUSH
14319: LD_INT 0
14321: ST_TO_ADDR
// sContamin := false ;
14322: LD_ADDR_EXP 92
14326: PUSH
14327: LD_INT 0
14329: ST_TO_ADDR
// sOil := false ;
14330: LD_ADDR_EXP 94
14334: PUSH
14335: LD_INT 0
14337: ST_TO_ADDR
// sStu := false ;
14338: LD_ADDR_EXP 98
14342: PUSH
14343: LD_INT 0
14345: ST_TO_ADDR
// sBazooka := false ;
14346: LD_ADDR_EXP 101
14350: PUSH
14351: LD_INT 0
14353: ST_TO_ADDR
// sMortar := false ;
14354: LD_ADDR_EXP 102
14358: PUSH
14359: LD_INT 0
14361: ST_TO_ADDR
// sRanger := false ;
14362: LD_ADDR_EXP 112
14366: PUSH
14367: LD_INT 0
14369: ST_TO_ADDR
// end ;
14370: LD_VAR 0 1
14374: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14375: LD_INT 0
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
14381: PPUSH
// result := [ ] ;
14382: LD_ADDR_VAR 0 1
14386: PUSH
14387: EMPTY
14388: ST_TO_ADDR
// if campaign_id = 1 then
14389: LD_OWVAR 69
14393: PUSH
14394: LD_INT 1
14396: EQUAL
14397: IFFALSE 17335
// begin case mission_number of 1 :
14399: LD_OWVAR 70
14403: PUSH
14404: LD_INT 1
14406: DOUBLE
14407: EQUAL
14408: IFTRUE 14412
14410: GO 14476
14412: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
14413: LD_ADDR_VAR 0 1
14417: PUSH
14418: LD_INT 2
14420: PUSH
14421: LD_INT 4
14423: PUSH
14424: LD_INT 11
14426: PUSH
14427: LD_INT 12
14429: PUSH
14430: LD_INT 15
14432: PUSH
14433: LD_INT 16
14435: PUSH
14436: LD_INT 22
14438: PUSH
14439: LD_INT 23
14441: PUSH
14442: LD_INT 26
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 101
14458: PUSH
14459: LD_INT 102
14461: PUSH
14462: LD_INT 106
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: ST_TO_ADDR
14474: GO 17333
14476: LD_INT 2
14478: DOUBLE
14479: EQUAL
14480: IFTRUE 14484
14482: GO 14556
14484: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14485: LD_ADDR_VAR 0 1
14489: PUSH
14490: LD_INT 2
14492: PUSH
14493: LD_INT 4
14495: PUSH
14496: LD_INT 11
14498: PUSH
14499: LD_INT 12
14501: PUSH
14502: LD_INT 15
14504: PUSH
14505: LD_INT 16
14507: PUSH
14508: LD_INT 22
14510: PUSH
14511: LD_INT 23
14513: PUSH
14514: LD_INT 26
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 101
14530: PUSH
14531: LD_INT 102
14533: PUSH
14534: LD_INT 105
14536: PUSH
14537: LD_INT 106
14539: PUSH
14540: LD_INT 108
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: ST_TO_ADDR
14554: GO 17333
14556: LD_INT 3
14558: DOUBLE
14559: EQUAL
14560: IFTRUE 14564
14562: GO 14640
14564: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14565: LD_ADDR_VAR 0 1
14569: PUSH
14570: LD_INT 2
14572: PUSH
14573: LD_INT 4
14575: PUSH
14576: LD_INT 5
14578: PUSH
14579: LD_INT 11
14581: PUSH
14582: LD_INT 12
14584: PUSH
14585: LD_INT 15
14587: PUSH
14588: LD_INT 16
14590: PUSH
14591: LD_INT 22
14593: PUSH
14594: LD_INT 26
14596: PUSH
14597: LD_INT 36
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 101
14614: PUSH
14615: LD_INT 102
14617: PUSH
14618: LD_INT 105
14620: PUSH
14621: LD_INT 106
14623: PUSH
14624: LD_INT 108
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: ST_TO_ADDR
14638: GO 17333
14640: LD_INT 4
14642: DOUBLE
14643: EQUAL
14644: IFTRUE 14648
14646: GO 14732
14648: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14649: LD_ADDR_VAR 0 1
14653: PUSH
14654: LD_INT 2
14656: PUSH
14657: LD_INT 4
14659: PUSH
14660: LD_INT 5
14662: PUSH
14663: LD_INT 8
14665: PUSH
14666: LD_INT 11
14668: PUSH
14669: LD_INT 12
14671: PUSH
14672: LD_INT 15
14674: PUSH
14675: LD_INT 16
14677: PUSH
14678: LD_INT 22
14680: PUSH
14681: LD_INT 23
14683: PUSH
14684: LD_INT 26
14686: PUSH
14687: LD_INT 36
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 101
14706: PUSH
14707: LD_INT 102
14709: PUSH
14710: LD_INT 105
14712: PUSH
14713: LD_INT 106
14715: PUSH
14716: LD_INT 108
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: ST_TO_ADDR
14730: GO 17333
14732: LD_INT 5
14734: DOUBLE
14735: EQUAL
14736: IFTRUE 14740
14738: GO 14840
14740: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14741: LD_ADDR_VAR 0 1
14745: PUSH
14746: LD_INT 2
14748: PUSH
14749: LD_INT 4
14751: PUSH
14752: LD_INT 5
14754: PUSH
14755: LD_INT 6
14757: PUSH
14758: LD_INT 8
14760: PUSH
14761: LD_INT 11
14763: PUSH
14764: LD_INT 12
14766: PUSH
14767: LD_INT 15
14769: PUSH
14770: LD_INT 16
14772: PUSH
14773: LD_INT 22
14775: PUSH
14776: LD_INT 23
14778: PUSH
14779: LD_INT 25
14781: PUSH
14782: LD_INT 26
14784: PUSH
14785: LD_INT 36
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 101
14806: PUSH
14807: LD_INT 102
14809: PUSH
14810: LD_INT 105
14812: PUSH
14813: LD_INT 106
14815: PUSH
14816: LD_INT 108
14818: PUSH
14819: LD_INT 109
14821: PUSH
14822: LD_INT 112
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: ST_TO_ADDR
14838: GO 17333
14840: LD_INT 6
14842: DOUBLE
14843: EQUAL
14844: IFTRUE 14848
14846: GO 14968
14848: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14849: LD_ADDR_VAR 0 1
14853: PUSH
14854: LD_INT 2
14856: PUSH
14857: LD_INT 4
14859: PUSH
14860: LD_INT 5
14862: PUSH
14863: LD_INT 6
14865: PUSH
14866: LD_INT 8
14868: PUSH
14869: LD_INT 11
14871: PUSH
14872: LD_INT 12
14874: PUSH
14875: LD_INT 15
14877: PUSH
14878: LD_INT 16
14880: PUSH
14881: LD_INT 20
14883: PUSH
14884: LD_INT 21
14886: PUSH
14887: LD_INT 22
14889: PUSH
14890: LD_INT 23
14892: PUSH
14893: LD_INT 25
14895: PUSH
14896: LD_INT 26
14898: PUSH
14899: LD_INT 30
14901: PUSH
14902: LD_INT 31
14904: PUSH
14905: LD_INT 32
14907: PUSH
14908: LD_INT 36
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 101
14934: PUSH
14935: LD_INT 102
14937: PUSH
14938: LD_INT 105
14940: PUSH
14941: LD_INT 106
14943: PUSH
14944: LD_INT 108
14946: PUSH
14947: LD_INT 109
14949: PUSH
14950: LD_INT 112
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: ST_TO_ADDR
14966: GO 17333
14968: LD_INT 7
14970: DOUBLE
14971: EQUAL
14972: IFTRUE 14976
14974: GO 15076
14976: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14977: LD_ADDR_VAR 0 1
14981: PUSH
14982: LD_INT 2
14984: PUSH
14985: LD_INT 4
14987: PUSH
14988: LD_INT 5
14990: PUSH
14991: LD_INT 7
14993: PUSH
14994: LD_INT 11
14996: PUSH
14997: LD_INT 12
14999: PUSH
15000: LD_INT 15
15002: PUSH
15003: LD_INT 16
15005: PUSH
15006: LD_INT 20
15008: PUSH
15009: LD_INT 21
15011: PUSH
15012: LD_INT 22
15014: PUSH
15015: LD_INT 23
15017: PUSH
15018: LD_INT 25
15020: PUSH
15021: LD_INT 26
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: PUSH
15040: LD_INT 101
15042: PUSH
15043: LD_INT 102
15045: PUSH
15046: LD_INT 103
15048: PUSH
15049: LD_INT 105
15051: PUSH
15052: LD_INT 106
15054: PUSH
15055: LD_INT 108
15057: PUSH
15058: LD_INT 112
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: ST_TO_ADDR
15074: GO 17333
15076: LD_INT 8
15078: DOUBLE
15079: EQUAL
15080: IFTRUE 15084
15082: GO 15212
15084: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
15085: LD_ADDR_VAR 0 1
15089: PUSH
15090: LD_INT 2
15092: PUSH
15093: LD_INT 4
15095: PUSH
15096: LD_INT 5
15098: PUSH
15099: LD_INT 6
15101: PUSH
15102: LD_INT 7
15104: PUSH
15105: LD_INT 8
15107: PUSH
15108: LD_INT 11
15110: PUSH
15111: LD_INT 12
15113: PUSH
15114: LD_INT 15
15116: PUSH
15117: LD_INT 16
15119: PUSH
15120: LD_INT 20
15122: PUSH
15123: LD_INT 21
15125: PUSH
15126: LD_INT 22
15128: PUSH
15129: LD_INT 23
15131: PUSH
15132: LD_INT 25
15134: PUSH
15135: LD_INT 26
15137: PUSH
15138: LD_INT 30
15140: PUSH
15141: LD_INT 31
15143: PUSH
15144: LD_INT 32
15146: PUSH
15147: LD_INT 36
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: PUSH
15172: LD_INT 101
15174: PUSH
15175: LD_INT 102
15177: PUSH
15178: LD_INT 103
15180: PUSH
15181: LD_INT 105
15183: PUSH
15184: LD_INT 106
15186: PUSH
15187: LD_INT 108
15189: PUSH
15190: LD_INT 109
15192: PUSH
15193: LD_INT 112
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: ST_TO_ADDR
15210: GO 17333
15212: LD_INT 9
15214: DOUBLE
15215: EQUAL
15216: IFTRUE 15220
15218: GO 15356
15220: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
15221: LD_ADDR_VAR 0 1
15225: PUSH
15226: LD_INT 2
15228: PUSH
15229: LD_INT 4
15231: PUSH
15232: LD_INT 5
15234: PUSH
15235: LD_INT 6
15237: PUSH
15238: LD_INT 7
15240: PUSH
15241: LD_INT 8
15243: PUSH
15244: LD_INT 11
15246: PUSH
15247: LD_INT 12
15249: PUSH
15250: LD_INT 15
15252: PUSH
15253: LD_INT 16
15255: PUSH
15256: LD_INT 20
15258: PUSH
15259: LD_INT 21
15261: PUSH
15262: LD_INT 22
15264: PUSH
15265: LD_INT 23
15267: PUSH
15268: LD_INT 25
15270: PUSH
15271: LD_INT 26
15273: PUSH
15274: LD_INT 28
15276: PUSH
15277: LD_INT 30
15279: PUSH
15280: LD_INT 31
15282: PUSH
15283: LD_INT 32
15285: PUSH
15286: LD_INT 36
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 101
15314: PUSH
15315: LD_INT 102
15317: PUSH
15318: LD_INT 103
15320: PUSH
15321: LD_INT 105
15323: PUSH
15324: LD_INT 106
15326: PUSH
15327: LD_INT 108
15329: PUSH
15330: LD_INT 109
15332: PUSH
15333: LD_INT 112
15335: PUSH
15336: LD_INT 114
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: ST_TO_ADDR
15354: GO 17333
15356: LD_INT 10
15358: DOUBLE
15359: EQUAL
15360: IFTRUE 15364
15362: GO 15548
15364: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
15365: LD_ADDR_VAR 0 1
15369: PUSH
15370: LD_INT 2
15372: PUSH
15373: LD_INT 4
15375: PUSH
15376: LD_INT 5
15378: PUSH
15379: LD_INT 6
15381: PUSH
15382: LD_INT 7
15384: PUSH
15385: LD_INT 8
15387: PUSH
15388: LD_INT 9
15390: PUSH
15391: LD_INT 10
15393: PUSH
15394: LD_INT 11
15396: PUSH
15397: LD_INT 12
15399: PUSH
15400: LD_INT 13
15402: PUSH
15403: LD_INT 14
15405: PUSH
15406: LD_INT 15
15408: PUSH
15409: LD_INT 16
15411: PUSH
15412: LD_INT 17
15414: PUSH
15415: LD_INT 18
15417: PUSH
15418: LD_INT 19
15420: PUSH
15421: LD_INT 20
15423: PUSH
15424: LD_INT 21
15426: PUSH
15427: LD_INT 22
15429: PUSH
15430: LD_INT 23
15432: PUSH
15433: LD_INT 24
15435: PUSH
15436: LD_INT 25
15438: PUSH
15439: LD_INT 26
15441: PUSH
15442: LD_INT 28
15444: PUSH
15445: LD_INT 30
15447: PUSH
15448: LD_INT 31
15450: PUSH
15451: LD_INT 32
15453: PUSH
15454: LD_INT 36
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 101
15490: PUSH
15491: LD_INT 102
15493: PUSH
15494: LD_INT 103
15496: PUSH
15497: LD_INT 104
15499: PUSH
15500: LD_INT 105
15502: PUSH
15503: LD_INT 106
15505: PUSH
15506: LD_INT 107
15508: PUSH
15509: LD_INT 108
15511: PUSH
15512: LD_INT 109
15514: PUSH
15515: LD_INT 110
15517: PUSH
15518: LD_INT 111
15520: PUSH
15521: LD_INT 112
15523: PUSH
15524: LD_INT 114
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: ST_TO_ADDR
15546: GO 17333
15548: LD_INT 11
15550: DOUBLE
15551: EQUAL
15552: IFTRUE 15556
15554: GO 15748
15556: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15557: LD_ADDR_VAR 0 1
15561: PUSH
15562: LD_INT 2
15564: PUSH
15565: LD_INT 3
15567: PUSH
15568: LD_INT 4
15570: PUSH
15571: LD_INT 5
15573: PUSH
15574: LD_INT 6
15576: PUSH
15577: LD_INT 7
15579: PUSH
15580: LD_INT 8
15582: PUSH
15583: LD_INT 9
15585: PUSH
15586: LD_INT 10
15588: PUSH
15589: LD_INT 11
15591: PUSH
15592: LD_INT 12
15594: PUSH
15595: LD_INT 13
15597: PUSH
15598: LD_INT 14
15600: PUSH
15601: LD_INT 15
15603: PUSH
15604: LD_INT 16
15606: PUSH
15607: LD_INT 17
15609: PUSH
15610: LD_INT 18
15612: PUSH
15613: LD_INT 19
15615: PUSH
15616: LD_INT 20
15618: PUSH
15619: LD_INT 21
15621: PUSH
15622: LD_INT 22
15624: PUSH
15625: LD_INT 23
15627: PUSH
15628: LD_INT 24
15630: PUSH
15631: LD_INT 25
15633: PUSH
15634: LD_INT 26
15636: PUSH
15637: LD_INT 28
15639: PUSH
15640: LD_INT 30
15642: PUSH
15643: LD_INT 31
15645: PUSH
15646: LD_INT 32
15648: PUSH
15649: LD_INT 34
15651: PUSH
15652: LD_INT 36
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 101
15690: PUSH
15691: LD_INT 102
15693: PUSH
15694: LD_INT 103
15696: PUSH
15697: LD_INT 104
15699: PUSH
15700: LD_INT 105
15702: PUSH
15703: LD_INT 106
15705: PUSH
15706: LD_INT 107
15708: PUSH
15709: LD_INT 108
15711: PUSH
15712: LD_INT 109
15714: PUSH
15715: LD_INT 110
15717: PUSH
15718: LD_INT 111
15720: PUSH
15721: LD_INT 112
15723: PUSH
15724: LD_INT 114
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: ST_TO_ADDR
15746: GO 17333
15748: LD_INT 12
15750: DOUBLE
15751: EQUAL
15752: IFTRUE 15756
15754: GO 15964
15756: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15757: LD_ADDR_VAR 0 1
15761: PUSH
15762: LD_INT 1
15764: PUSH
15765: LD_INT 2
15767: PUSH
15768: LD_INT 3
15770: PUSH
15771: LD_INT 4
15773: PUSH
15774: LD_INT 5
15776: PUSH
15777: LD_INT 6
15779: PUSH
15780: LD_INT 7
15782: PUSH
15783: LD_INT 8
15785: PUSH
15786: LD_INT 9
15788: PUSH
15789: LD_INT 10
15791: PUSH
15792: LD_INT 11
15794: PUSH
15795: LD_INT 12
15797: PUSH
15798: LD_INT 13
15800: PUSH
15801: LD_INT 14
15803: PUSH
15804: LD_INT 15
15806: PUSH
15807: LD_INT 16
15809: PUSH
15810: LD_INT 17
15812: PUSH
15813: LD_INT 18
15815: PUSH
15816: LD_INT 19
15818: PUSH
15819: LD_INT 20
15821: PUSH
15822: LD_INT 21
15824: PUSH
15825: LD_INT 22
15827: PUSH
15828: LD_INT 23
15830: PUSH
15831: LD_INT 24
15833: PUSH
15834: LD_INT 25
15836: PUSH
15837: LD_INT 26
15839: PUSH
15840: LD_INT 27
15842: PUSH
15843: LD_INT 28
15845: PUSH
15846: LD_INT 30
15848: PUSH
15849: LD_INT 31
15851: PUSH
15852: LD_INT 32
15854: PUSH
15855: LD_INT 33
15857: PUSH
15858: LD_INT 34
15860: PUSH
15861: LD_INT 36
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 101
15902: PUSH
15903: LD_INT 102
15905: PUSH
15906: LD_INT 103
15908: PUSH
15909: LD_INT 104
15911: PUSH
15912: LD_INT 105
15914: PUSH
15915: LD_INT 106
15917: PUSH
15918: LD_INT 107
15920: PUSH
15921: LD_INT 108
15923: PUSH
15924: LD_INT 109
15926: PUSH
15927: LD_INT 110
15929: PUSH
15930: LD_INT 111
15932: PUSH
15933: LD_INT 112
15935: PUSH
15936: LD_INT 113
15938: PUSH
15939: LD_INT 114
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: ST_TO_ADDR
15962: GO 17333
15964: LD_INT 13
15966: DOUBLE
15967: EQUAL
15968: IFTRUE 15972
15970: GO 16168
15972: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15973: LD_ADDR_VAR 0 1
15977: PUSH
15978: LD_INT 1
15980: PUSH
15981: LD_INT 2
15983: PUSH
15984: LD_INT 3
15986: PUSH
15987: LD_INT 4
15989: PUSH
15990: LD_INT 5
15992: PUSH
15993: LD_INT 8
15995: PUSH
15996: LD_INT 9
15998: PUSH
15999: LD_INT 10
16001: PUSH
16002: LD_INT 11
16004: PUSH
16005: LD_INT 12
16007: PUSH
16008: LD_INT 14
16010: PUSH
16011: LD_INT 15
16013: PUSH
16014: LD_INT 16
16016: PUSH
16017: LD_INT 17
16019: PUSH
16020: LD_INT 18
16022: PUSH
16023: LD_INT 19
16025: PUSH
16026: LD_INT 20
16028: PUSH
16029: LD_INT 21
16031: PUSH
16032: LD_INT 22
16034: PUSH
16035: LD_INT 23
16037: PUSH
16038: LD_INT 24
16040: PUSH
16041: LD_INT 25
16043: PUSH
16044: LD_INT 26
16046: PUSH
16047: LD_INT 27
16049: PUSH
16050: LD_INT 28
16052: PUSH
16053: LD_INT 30
16055: PUSH
16056: LD_INT 31
16058: PUSH
16059: LD_INT 32
16061: PUSH
16062: LD_INT 33
16064: PUSH
16065: LD_INT 34
16067: PUSH
16068: LD_INT 36
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 101
16106: PUSH
16107: LD_INT 102
16109: PUSH
16110: LD_INT 103
16112: PUSH
16113: LD_INT 104
16115: PUSH
16116: LD_INT 105
16118: PUSH
16119: LD_INT 106
16121: PUSH
16122: LD_INT 107
16124: PUSH
16125: LD_INT 108
16127: PUSH
16128: LD_INT 109
16130: PUSH
16131: LD_INT 110
16133: PUSH
16134: LD_INT 111
16136: PUSH
16137: LD_INT 112
16139: PUSH
16140: LD_INT 113
16142: PUSH
16143: LD_INT 114
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: ST_TO_ADDR
16166: GO 17333
16168: LD_INT 14
16170: DOUBLE
16171: EQUAL
16172: IFTRUE 16176
16174: GO 16388
16176: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
16177: LD_ADDR_VAR 0 1
16181: PUSH
16182: LD_INT 1
16184: PUSH
16185: LD_INT 2
16187: PUSH
16188: LD_INT 3
16190: PUSH
16191: LD_INT 4
16193: PUSH
16194: LD_INT 5
16196: PUSH
16197: LD_INT 6
16199: PUSH
16200: LD_INT 7
16202: PUSH
16203: LD_INT 8
16205: PUSH
16206: LD_INT 9
16208: PUSH
16209: LD_INT 10
16211: PUSH
16212: LD_INT 11
16214: PUSH
16215: LD_INT 12
16217: PUSH
16218: LD_INT 13
16220: PUSH
16221: LD_INT 14
16223: PUSH
16224: LD_INT 15
16226: PUSH
16227: LD_INT 16
16229: PUSH
16230: LD_INT 17
16232: PUSH
16233: LD_INT 18
16235: PUSH
16236: LD_INT 19
16238: PUSH
16239: LD_INT 20
16241: PUSH
16242: LD_INT 21
16244: PUSH
16245: LD_INT 22
16247: PUSH
16248: LD_INT 23
16250: PUSH
16251: LD_INT 24
16253: PUSH
16254: LD_INT 25
16256: PUSH
16257: LD_INT 26
16259: PUSH
16260: LD_INT 27
16262: PUSH
16263: LD_INT 28
16265: PUSH
16266: LD_INT 29
16268: PUSH
16269: LD_INT 30
16271: PUSH
16272: LD_INT 31
16274: PUSH
16275: LD_INT 32
16277: PUSH
16278: LD_INT 33
16280: PUSH
16281: LD_INT 34
16283: PUSH
16284: LD_INT 36
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 101
16326: PUSH
16327: LD_INT 102
16329: PUSH
16330: LD_INT 103
16332: PUSH
16333: LD_INT 104
16335: PUSH
16336: LD_INT 105
16338: PUSH
16339: LD_INT 106
16341: PUSH
16342: LD_INT 107
16344: PUSH
16345: LD_INT 108
16347: PUSH
16348: LD_INT 109
16350: PUSH
16351: LD_INT 110
16353: PUSH
16354: LD_INT 111
16356: PUSH
16357: LD_INT 112
16359: PUSH
16360: LD_INT 113
16362: PUSH
16363: LD_INT 114
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: ST_TO_ADDR
16386: GO 17333
16388: LD_INT 15
16390: DOUBLE
16391: EQUAL
16392: IFTRUE 16396
16394: GO 16608
16396: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
16397: LD_ADDR_VAR 0 1
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: LD_INT 2
16407: PUSH
16408: LD_INT 3
16410: PUSH
16411: LD_INT 4
16413: PUSH
16414: LD_INT 5
16416: PUSH
16417: LD_INT 6
16419: PUSH
16420: LD_INT 7
16422: PUSH
16423: LD_INT 8
16425: PUSH
16426: LD_INT 9
16428: PUSH
16429: LD_INT 10
16431: PUSH
16432: LD_INT 11
16434: PUSH
16435: LD_INT 12
16437: PUSH
16438: LD_INT 13
16440: PUSH
16441: LD_INT 14
16443: PUSH
16444: LD_INT 15
16446: PUSH
16447: LD_INT 16
16449: PUSH
16450: LD_INT 17
16452: PUSH
16453: LD_INT 18
16455: PUSH
16456: LD_INT 19
16458: PUSH
16459: LD_INT 20
16461: PUSH
16462: LD_INT 21
16464: PUSH
16465: LD_INT 22
16467: PUSH
16468: LD_INT 23
16470: PUSH
16471: LD_INT 24
16473: PUSH
16474: LD_INT 25
16476: PUSH
16477: LD_INT 26
16479: PUSH
16480: LD_INT 27
16482: PUSH
16483: LD_INT 28
16485: PUSH
16486: LD_INT 29
16488: PUSH
16489: LD_INT 30
16491: PUSH
16492: LD_INT 31
16494: PUSH
16495: LD_INT 32
16497: PUSH
16498: LD_INT 33
16500: PUSH
16501: LD_INT 34
16503: PUSH
16504: LD_INT 36
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 101
16546: PUSH
16547: LD_INT 102
16549: PUSH
16550: LD_INT 103
16552: PUSH
16553: LD_INT 104
16555: PUSH
16556: LD_INT 105
16558: PUSH
16559: LD_INT 106
16561: PUSH
16562: LD_INT 107
16564: PUSH
16565: LD_INT 108
16567: PUSH
16568: LD_INT 109
16570: PUSH
16571: LD_INT 110
16573: PUSH
16574: LD_INT 111
16576: PUSH
16577: LD_INT 112
16579: PUSH
16580: LD_INT 113
16582: PUSH
16583: LD_INT 114
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: ST_TO_ADDR
16606: GO 17333
16608: LD_INT 16
16610: DOUBLE
16611: EQUAL
16612: IFTRUE 16616
16614: GO 16740
16616: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16617: LD_ADDR_VAR 0 1
16621: PUSH
16622: LD_INT 2
16624: PUSH
16625: LD_INT 4
16627: PUSH
16628: LD_INT 5
16630: PUSH
16631: LD_INT 7
16633: PUSH
16634: LD_INT 11
16636: PUSH
16637: LD_INT 12
16639: PUSH
16640: LD_INT 15
16642: PUSH
16643: LD_INT 16
16645: PUSH
16646: LD_INT 20
16648: PUSH
16649: LD_INT 21
16651: PUSH
16652: LD_INT 22
16654: PUSH
16655: LD_INT 23
16657: PUSH
16658: LD_INT 25
16660: PUSH
16661: LD_INT 26
16663: PUSH
16664: LD_INT 30
16666: PUSH
16667: LD_INT 31
16669: PUSH
16670: LD_INT 32
16672: PUSH
16673: LD_INT 33
16675: PUSH
16676: LD_INT 34
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 101
16702: PUSH
16703: LD_INT 102
16705: PUSH
16706: LD_INT 103
16708: PUSH
16709: LD_INT 106
16711: PUSH
16712: LD_INT 108
16714: PUSH
16715: LD_INT 112
16717: PUSH
16718: LD_INT 113
16720: PUSH
16721: LD_INT 114
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: ST_TO_ADDR
16738: GO 17333
16740: LD_INT 17
16742: DOUBLE
16743: EQUAL
16744: IFTRUE 16748
16746: GO 16960
16748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16749: LD_ADDR_VAR 0 1
16753: PUSH
16754: LD_INT 1
16756: PUSH
16757: LD_INT 2
16759: PUSH
16760: LD_INT 3
16762: PUSH
16763: LD_INT 4
16765: PUSH
16766: LD_INT 5
16768: PUSH
16769: LD_INT 6
16771: PUSH
16772: LD_INT 7
16774: PUSH
16775: LD_INT 8
16777: PUSH
16778: LD_INT 9
16780: PUSH
16781: LD_INT 10
16783: PUSH
16784: LD_INT 11
16786: PUSH
16787: LD_INT 12
16789: PUSH
16790: LD_INT 13
16792: PUSH
16793: LD_INT 14
16795: PUSH
16796: LD_INT 15
16798: PUSH
16799: LD_INT 16
16801: PUSH
16802: LD_INT 17
16804: PUSH
16805: LD_INT 18
16807: PUSH
16808: LD_INT 19
16810: PUSH
16811: LD_INT 20
16813: PUSH
16814: LD_INT 21
16816: PUSH
16817: LD_INT 22
16819: PUSH
16820: LD_INT 23
16822: PUSH
16823: LD_INT 24
16825: PUSH
16826: LD_INT 25
16828: PUSH
16829: LD_INT 26
16831: PUSH
16832: LD_INT 27
16834: PUSH
16835: LD_INT 28
16837: PUSH
16838: LD_INT 29
16840: PUSH
16841: LD_INT 30
16843: PUSH
16844: LD_INT 31
16846: PUSH
16847: LD_INT 32
16849: PUSH
16850: LD_INT 33
16852: PUSH
16853: LD_INT 34
16855: PUSH
16856: LD_INT 36
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 101
16898: PUSH
16899: LD_INT 102
16901: PUSH
16902: LD_INT 103
16904: PUSH
16905: LD_INT 104
16907: PUSH
16908: LD_INT 105
16910: PUSH
16911: LD_INT 106
16913: PUSH
16914: LD_INT 107
16916: PUSH
16917: LD_INT 108
16919: PUSH
16920: LD_INT 109
16922: PUSH
16923: LD_INT 110
16925: PUSH
16926: LD_INT 111
16928: PUSH
16929: LD_INT 112
16931: PUSH
16932: LD_INT 113
16934: PUSH
16935: LD_INT 114
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: ST_TO_ADDR
16958: GO 17333
16960: LD_INT 18
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16968
16966: GO 17104
16968: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16969: LD_ADDR_VAR 0 1
16973: PUSH
16974: LD_INT 2
16976: PUSH
16977: LD_INT 4
16979: PUSH
16980: LD_INT 5
16982: PUSH
16983: LD_INT 7
16985: PUSH
16986: LD_INT 11
16988: PUSH
16989: LD_INT 12
16991: PUSH
16992: LD_INT 15
16994: PUSH
16995: LD_INT 16
16997: PUSH
16998: LD_INT 20
17000: PUSH
17001: LD_INT 21
17003: PUSH
17004: LD_INT 22
17006: PUSH
17007: LD_INT 23
17009: PUSH
17010: LD_INT 25
17012: PUSH
17013: LD_INT 26
17015: PUSH
17016: LD_INT 30
17018: PUSH
17019: LD_INT 31
17021: PUSH
17022: LD_INT 32
17024: PUSH
17025: LD_INT 33
17027: PUSH
17028: LD_INT 34
17030: PUSH
17031: LD_INT 35
17033: PUSH
17034: LD_INT 36
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 101
17062: PUSH
17063: LD_INT 102
17065: PUSH
17066: LD_INT 103
17068: PUSH
17069: LD_INT 106
17071: PUSH
17072: LD_INT 108
17074: PUSH
17075: LD_INT 112
17077: PUSH
17078: LD_INT 113
17080: PUSH
17081: LD_INT 114
17083: PUSH
17084: LD_INT 115
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: ST_TO_ADDR
17102: GO 17333
17104: LD_INT 19
17106: DOUBLE
17107: EQUAL
17108: IFTRUE 17112
17110: GO 17332
17112: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
17113: LD_ADDR_VAR 0 1
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: LD_INT 2
17123: PUSH
17124: LD_INT 3
17126: PUSH
17127: LD_INT 4
17129: PUSH
17130: LD_INT 5
17132: PUSH
17133: LD_INT 6
17135: PUSH
17136: LD_INT 7
17138: PUSH
17139: LD_INT 8
17141: PUSH
17142: LD_INT 9
17144: PUSH
17145: LD_INT 10
17147: PUSH
17148: LD_INT 11
17150: PUSH
17151: LD_INT 12
17153: PUSH
17154: LD_INT 13
17156: PUSH
17157: LD_INT 14
17159: PUSH
17160: LD_INT 15
17162: PUSH
17163: LD_INT 16
17165: PUSH
17166: LD_INT 17
17168: PUSH
17169: LD_INT 18
17171: PUSH
17172: LD_INT 19
17174: PUSH
17175: LD_INT 20
17177: PUSH
17178: LD_INT 21
17180: PUSH
17181: LD_INT 22
17183: PUSH
17184: LD_INT 23
17186: PUSH
17187: LD_INT 24
17189: PUSH
17190: LD_INT 25
17192: PUSH
17193: LD_INT 26
17195: PUSH
17196: LD_INT 27
17198: PUSH
17199: LD_INT 28
17201: PUSH
17202: LD_INT 29
17204: PUSH
17205: LD_INT 30
17207: PUSH
17208: LD_INT 31
17210: PUSH
17211: LD_INT 32
17213: PUSH
17214: LD_INT 33
17216: PUSH
17217: LD_INT 34
17219: PUSH
17220: LD_INT 35
17222: PUSH
17223: LD_INT 36
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 101
17266: PUSH
17267: LD_INT 102
17269: PUSH
17270: LD_INT 103
17272: PUSH
17273: LD_INT 104
17275: PUSH
17276: LD_INT 105
17278: PUSH
17279: LD_INT 106
17281: PUSH
17282: LD_INT 107
17284: PUSH
17285: LD_INT 108
17287: PUSH
17288: LD_INT 109
17290: PUSH
17291: LD_INT 110
17293: PUSH
17294: LD_INT 111
17296: PUSH
17297: LD_INT 112
17299: PUSH
17300: LD_INT 113
17302: PUSH
17303: LD_INT 114
17305: PUSH
17306: LD_INT 115
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: ST_TO_ADDR
17330: GO 17333
17332: POP
// end else
17333: GO 17552
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
17335: LD_ADDR_VAR 0 1
17339: PUSH
17340: LD_INT 1
17342: PUSH
17343: LD_INT 2
17345: PUSH
17346: LD_INT 3
17348: PUSH
17349: LD_INT 4
17351: PUSH
17352: LD_INT 5
17354: PUSH
17355: LD_INT 6
17357: PUSH
17358: LD_INT 7
17360: PUSH
17361: LD_INT 8
17363: PUSH
17364: LD_INT 9
17366: PUSH
17367: LD_INT 10
17369: PUSH
17370: LD_INT 11
17372: PUSH
17373: LD_INT 12
17375: PUSH
17376: LD_INT 13
17378: PUSH
17379: LD_INT 14
17381: PUSH
17382: LD_INT 15
17384: PUSH
17385: LD_INT 16
17387: PUSH
17388: LD_INT 17
17390: PUSH
17391: LD_INT 18
17393: PUSH
17394: LD_INT 19
17396: PUSH
17397: LD_INT 20
17399: PUSH
17400: LD_INT 21
17402: PUSH
17403: LD_INT 22
17405: PUSH
17406: LD_INT 23
17408: PUSH
17409: LD_INT 24
17411: PUSH
17412: LD_INT 25
17414: PUSH
17415: LD_INT 26
17417: PUSH
17418: LD_INT 27
17420: PUSH
17421: LD_INT 28
17423: PUSH
17424: LD_INT 29
17426: PUSH
17427: LD_INT 30
17429: PUSH
17430: LD_INT 31
17432: PUSH
17433: LD_INT 32
17435: PUSH
17436: LD_INT 33
17438: PUSH
17439: LD_INT 34
17441: PUSH
17442: LD_INT 35
17444: PUSH
17445: LD_INT 36
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 101
17488: PUSH
17489: LD_INT 102
17491: PUSH
17492: LD_INT 103
17494: PUSH
17495: LD_INT 104
17497: PUSH
17498: LD_INT 105
17500: PUSH
17501: LD_INT 106
17503: PUSH
17504: LD_INT 107
17506: PUSH
17507: LD_INT 108
17509: PUSH
17510: LD_INT 109
17512: PUSH
17513: LD_INT 110
17515: PUSH
17516: LD_INT 111
17518: PUSH
17519: LD_INT 112
17521: PUSH
17522: LD_INT 113
17524: PUSH
17525: LD_INT 114
17527: PUSH
17528: LD_INT 115
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: ST_TO_ADDR
// if result then
17552: LD_VAR 0 1
17556: IFFALSE 17845
// begin normal :=  ;
17558: LD_ADDR_VAR 0 3
17562: PUSH
17563: LD_STRING 
17565: ST_TO_ADDR
// hardcore :=  ;
17566: LD_ADDR_VAR 0 4
17570: PUSH
17571: LD_STRING 
17573: ST_TO_ADDR
// for i = 1 to normalCounter do
17574: LD_ADDR_VAR 0 5
17578: PUSH
17579: DOUBLE
17580: LD_INT 1
17582: DEC
17583: ST_TO_ADDR
17584: LD_EXP 60
17588: PUSH
17589: FOR_TO
17590: IFFALSE 17691
// begin tmp := 0 ;
17592: LD_ADDR_VAR 0 2
17596: PUSH
17597: LD_STRING 0
17599: ST_TO_ADDR
// if result [ 1 ] then
17600: LD_VAR 0 1
17604: PUSH
17605: LD_INT 1
17607: ARRAY
17608: IFFALSE 17673
// if result [ 1 ] [ 1 ] = i then
17610: LD_VAR 0 1
17614: PUSH
17615: LD_INT 1
17617: ARRAY
17618: PUSH
17619: LD_INT 1
17621: ARRAY
17622: PUSH
17623: LD_VAR 0 5
17627: EQUAL
17628: IFFALSE 17673
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17630: LD_ADDR_VAR 0 1
17634: PUSH
17635: LD_VAR 0 1
17639: PPUSH
17640: LD_INT 1
17642: PPUSH
17643: LD_VAR 0 1
17647: PUSH
17648: LD_INT 1
17650: ARRAY
17651: PPUSH
17652: LD_INT 1
17654: PPUSH
17655: CALL_OW 3
17659: PPUSH
17660: CALL_OW 1
17664: ST_TO_ADDR
// tmp := 1 ;
17665: LD_ADDR_VAR 0 2
17669: PUSH
17670: LD_STRING 1
17672: ST_TO_ADDR
// end ; normal := normal & tmp ;
17673: LD_ADDR_VAR 0 3
17677: PUSH
17678: LD_VAR 0 3
17682: PUSH
17683: LD_VAR 0 2
17687: STR
17688: ST_TO_ADDR
// end ;
17689: GO 17589
17691: POP
17692: POP
// for i = 1 to hardcoreCounter do
17693: LD_ADDR_VAR 0 5
17697: PUSH
17698: DOUBLE
17699: LD_INT 1
17701: DEC
17702: ST_TO_ADDR
17703: LD_EXP 61
17707: PUSH
17708: FOR_TO
17709: IFFALSE 17814
// begin tmp := 0 ;
17711: LD_ADDR_VAR 0 2
17715: PUSH
17716: LD_STRING 0
17718: ST_TO_ADDR
// if result [ 2 ] then
17719: LD_VAR 0 1
17723: PUSH
17724: LD_INT 2
17726: ARRAY
17727: IFFALSE 17796
// if result [ 2 ] [ 1 ] = 100 + i then
17729: LD_VAR 0 1
17733: PUSH
17734: LD_INT 2
17736: ARRAY
17737: PUSH
17738: LD_INT 1
17740: ARRAY
17741: PUSH
17742: LD_INT 100
17744: PUSH
17745: LD_VAR 0 5
17749: PLUS
17750: EQUAL
17751: IFFALSE 17796
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17753: LD_ADDR_VAR 0 1
17757: PUSH
17758: LD_VAR 0 1
17762: PPUSH
17763: LD_INT 2
17765: PPUSH
17766: LD_VAR 0 1
17770: PUSH
17771: LD_INT 2
17773: ARRAY
17774: PPUSH
17775: LD_INT 1
17777: PPUSH
17778: CALL_OW 3
17782: PPUSH
17783: CALL_OW 1
17787: ST_TO_ADDR
// tmp := 1 ;
17788: LD_ADDR_VAR 0 2
17792: PUSH
17793: LD_STRING 1
17795: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17796: LD_ADDR_VAR 0 4
17800: PUSH
17801: LD_VAR 0 4
17805: PUSH
17806: LD_VAR 0 2
17810: STR
17811: ST_TO_ADDR
// end ;
17812: GO 17708
17814: POP
17815: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17816: LD_STRING getStreamItemsFromMission("
17818: PUSH
17819: LD_VAR 0 3
17823: STR
17824: PUSH
17825: LD_STRING ","
17827: STR
17828: PUSH
17829: LD_VAR 0 4
17833: STR
17834: PUSH
17835: LD_STRING ")
17837: STR
17838: PPUSH
17839: CALL_OW 559
// end else
17843: GO 17852
// ToLua ( getStreamItemsFromMission("","") ) ;
17845: LD_STRING getStreamItemsFromMission("","")
17847: PPUSH
17848: CALL_OW 559
// end ;
17852: LD_VAR 0 1
17856: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17857: LD_EXP 59
17861: PUSH
17862: LD_EXP 64
17866: AND
17867: IFFALSE 17991
17869: GO 17871
17871: DISABLE
17872: LD_INT 0
17874: PPUSH
17875: PPUSH
// begin enable ;
17876: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17877: LD_ADDR_VAR 0 2
17881: PUSH
17882: LD_INT 22
17884: PUSH
17885: LD_OWVAR 2
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 2
17896: PUSH
17897: LD_INT 34
17899: PUSH
17900: LD_INT 7
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 34
17909: PUSH
17910: LD_INT 45
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 34
17919: PUSH
17920: LD_INT 28
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 34
17929: PUSH
17930: LD_INT 47
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PPUSH
17948: CALL_OW 69
17952: ST_TO_ADDR
// if not tmp then
17953: LD_VAR 0 2
17957: NOT
17958: IFFALSE 17962
// exit ;
17960: GO 17991
// for i in tmp do
17962: LD_ADDR_VAR 0 1
17966: PUSH
17967: LD_VAR 0 2
17971: PUSH
17972: FOR_IN
17973: IFFALSE 17989
// begin SetLives ( i , 0 ) ;
17975: LD_VAR 0 1
17979: PPUSH
17980: LD_INT 0
17982: PPUSH
17983: CALL_OW 234
// end ;
17987: GO 17972
17989: POP
17990: POP
// end ;
17991: PPOPN 2
17993: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17994: LD_EXP 59
17998: PUSH
17999: LD_EXP 65
18003: AND
18004: IFFALSE 18088
18006: GO 18008
18008: DISABLE
18009: LD_INT 0
18011: PPUSH
18012: PPUSH
// begin enable ;
18013: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18014: LD_ADDR_VAR 0 2
18018: PUSH
18019: LD_INT 22
18021: PUSH
18022: LD_OWVAR 2
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 32
18033: PUSH
18034: LD_INT 3
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PPUSH
18045: CALL_OW 69
18049: ST_TO_ADDR
// if not tmp then
18050: LD_VAR 0 2
18054: NOT
18055: IFFALSE 18059
// exit ;
18057: GO 18088
// for i in tmp do
18059: LD_ADDR_VAR 0 1
18063: PUSH
18064: LD_VAR 0 2
18068: PUSH
18069: FOR_IN
18070: IFFALSE 18086
// begin SetLives ( i , 0 ) ;
18072: LD_VAR 0 1
18076: PPUSH
18077: LD_INT 0
18079: PPUSH
18080: CALL_OW 234
// end ;
18084: GO 18069
18086: POP
18087: POP
// end ;
18088: PPOPN 2
18090: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18091: LD_EXP 59
18095: PUSH
18096: LD_EXP 62
18100: AND
18101: IFFALSE 18194
18103: GO 18105
18105: DISABLE
18106: LD_INT 0
18108: PPUSH
// begin enable ;
18109: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18110: LD_ADDR_VAR 0 1
18114: PUSH
18115: LD_INT 22
18117: PUSH
18118: LD_OWVAR 2
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 2
18129: PUSH
18130: LD_INT 25
18132: PUSH
18133: LD_INT 5
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 25
18142: PUSH
18143: LD_INT 9
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 25
18152: PUSH
18153: LD_INT 8
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PPUSH
18170: CALL_OW 69
18174: PUSH
18175: FOR_IN
18176: IFFALSE 18192
// begin SetClass ( i , 1 ) ;
18178: LD_VAR 0 1
18182: PPUSH
18183: LD_INT 1
18185: PPUSH
18186: CALL_OW 336
// end ;
18190: GO 18175
18192: POP
18193: POP
// end ;
18194: PPOPN 1
18196: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18197: LD_EXP 59
18201: PUSH
18202: LD_EXP 63
18206: AND
18207: PUSH
18208: LD_OWVAR 65
18212: PUSH
18213: LD_INT 7
18215: LESS
18216: AND
18217: IFFALSE 18231
18219: GO 18221
18221: DISABLE
// begin enable ;
18222: ENABLE
// game_speed := 7 ;
18223: LD_ADDR_OWVAR 65
18227: PUSH
18228: LD_INT 7
18230: ST_TO_ADDR
// end ;
18231: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18232: LD_EXP 59
18236: PUSH
18237: LD_EXP 66
18241: AND
18242: IFFALSE 18444
18244: GO 18246
18246: DISABLE
18247: LD_INT 0
18249: PPUSH
18250: PPUSH
18251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18252: LD_ADDR_VAR 0 3
18256: PUSH
18257: LD_INT 81
18259: PUSH
18260: LD_OWVAR 2
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 21
18271: PUSH
18272: LD_INT 1
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PPUSH
18283: CALL_OW 69
18287: ST_TO_ADDR
// if not tmp then
18288: LD_VAR 0 3
18292: NOT
18293: IFFALSE 18297
// exit ;
18295: GO 18444
// if tmp > 5 then
18297: LD_VAR 0 3
18301: PUSH
18302: LD_INT 5
18304: GREATER
18305: IFFALSE 18317
// k := 5 else
18307: LD_ADDR_VAR 0 2
18311: PUSH
18312: LD_INT 5
18314: ST_TO_ADDR
18315: GO 18327
// k := tmp ;
18317: LD_ADDR_VAR 0 2
18321: PUSH
18322: LD_VAR 0 3
18326: ST_TO_ADDR
// for i := 1 to k do
18327: LD_ADDR_VAR 0 1
18331: PUSH
18332: DOUBLE
18333: LD_INT 1
18335: DEC
18336: ST_TO_ADDR
18337: LD_VAR 0 2
18341: PUSH
18342: FOR_TO
18343: IFFALSE 18442
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18345: LD_VAR 0 3
18349: PUSH
18350: LD_VAR 0 1
18354: ARRAY
18355: PPUSH
18356: LD_VAR 0 1
18360: PUSH
18361: LD_INT 4
18363: MOD
18364: PUSH
18365: LD_INT 1
18367: PLUS
18368: PPUSH
18369: CALL_OW 259
18373: PUSH
18374: LD_INT 10
18376: LESS
18377: IFFALSE 18440
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18379: LD_VAR 0 3
18383: PUSH
18384: LD_VAR 0 1
18388: ARRAY
18389: PPUSH
18390: LD_VAR 0 1
18394: PUSH
18395: LD_INT 4
18397: MOD
18398: PUSH
18399: LD_INT 1
18401: PLUS
18402: PPUSH
18403: LD_VAR 0 3
18407: PUSH
18408: LD_VAR 0 1
18412: ARRAY
18413: PPUSH
18414: LD_VAR 0 1
18418: PUSH
18419: LD_INT 4
18421: MOD
18422: PUSH
18423: LD_INT 1
18425: PLUS
18426: PPUSH
18427: CALL_OW 259
18431: PUSH
18432: LD_INT 1
18434: PLUS
18435: PPUSH
18436: CALL_OW 237
18440: GO 18342
18442: POP
18443: POP
// end ;
18444: PPOPN 3
18446: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18447: LD_EXP 59
18451: PUSH
18452: LD_EXP 67
18456: AND
18457: IFFALSE 18477
18459: GO 18461
18461: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18462: LD_INT 4
18464: PPUSH
18465: LD_OWVAR 2
18469: PPUSH
18470: LD_INT 0
18472: PPUSH
18473: CALL_OW 324
18477: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18478: LD_EXP 59
18482: PUSH
18483: LD_EXP 96
18487: AND
18488: IFFALSE 18508
18490: GO 18492
18492: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18493: LD_INT 19
18495: PPUSH
18496: LD_OWVAR 2
18500: PPUSH
18501: LD_INT 0
18503: PPUSH
18504: CALL_OW 324
18508: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18509: LD_EXP 59
18513: PUSH
18514: LD_EXP 68
18518: AND
18519: IFFALSE 18621
18521: GO 18523
18523: DISABLE
18524: LD_INT 0
18526: PPUSH
18527: PPUSH
// begin enable ;
18528: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18529: LD_ADDR_VAR 0 2
18533: PUSH
18534: LD_INT 22
18536: PUSH
18537: LD_OWVAR 2
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 2
18548: PUSH
18549: LD_INT 34
18551: PUSH
18552: LD_INT 11
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 34
18561: PUSH
18562: LD_INT 30
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: LIST
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PPUSH
18578: CALL_OW 69
18582: ST_TO_ADDR
// if not tmp then
18583: LD_VAR 0 2
18587: NOT
18588: IFFALSE 18592
// exit ;
18590: GO 18621
// for i in tmp do
18592: LD_ADDR_VAR 0 1
18596: PUSH
18597: LD_VAR 0 2
18601: PUSH
18602: FOR_IN
18603: IFFALSE 18619
// begin SetLives ( i , 0 ) ;
18605: LD_VAR 0 1
18609: PPUSH
18610: LD_INT 0
18612: PPUSH
18613: CALL_OW 234
// end ;
18617: GO 18602
18619: POP
18620: POP
// end ;
18621: PPOPN 2
18623: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18624: LD_EXP 59
18628: PUSH
18629: LD_EXP 69
18633: AND
18634: IFFALSE 18654
18636: GO 18638
18638: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18639: LD_INT 32
18641: PPUSH
18642: LD_OWVAR 2
18646: PPUSH
18647: LD_INT 0
18649: PPUSH
18650: CALL_OW 324
18654: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18655: LD_EXP 59
18659: PUSH
18660: LD_EXP 70
18664: AND
18665: IFFALSE 18846
18667: GO 18669
18669: DISABLE
18670: LD_INT 0
18672: PPUSH
18673: PPUSH
18674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18675: LD_ADDR_VAR 0 2
18679: PUSH
18680: LD_INT 22
18682: PUSH
18683: LD_OWVAR 2
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 33
18694: PUSH
18695: LD_INT 3
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PPUSH
18706: CALL_OW 69
18710: ST_TO_ADDR
// if not tmp then
18711: LD_VAR 0 2
18715: NOT
18716: IFFALSE 18720
// exit ;
18718: GO 18846
// side := 0 ;
18720: LD_ADDR_VAR 0 3
18724: PUSH
18725: LD_INT 0
18727: ST_TO_ADDR
// for i := 1 to 8 do
18728: LD_ADDR_VAR 0 1
18732: PUSH
18733: DOUBLE
18734: LD_INT 1
18736: DEC
18737: ST_TO_ADDR
18738: LD_INT 8
18740: PUSH
18741: FOR_TO
18742: IFFALSE 18790
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18744: LD_OWVAR 2
18748: PUSH
18749: LD_VAR 0 1
18753: NONEQUAL
18754: PUSH
18755: LD_OWVAR 2
18759: PPUSH
18760: LD_VAR 0 1
18764: PPUSH
18765: CALL_OW 81
18769: PUSH
18770: LD_INT 2
18772: EQUAL
18773: AND
18774: IFFALSE 18788
// begin side := i ;
18776: LD_ADDR_VAR 0 3
18780: PUSH
18781: LD_VAR 0 1
18785: ST_TO_ADDR
// break ;
18786: GO 18790
// end ;
18788: GO 18741
18790: POP
18791: POP
// if not side then
18792: LD_VAR 0 3
18796: NOT
18797: IFFALSE 18801
// exit ;
18799: GO 18846
// for i := 1 to tmp do
18801: LD_ADDR_VAR 0 1
18805: PUSH
18806: DOUBLE
18807: LD_INT 1
18809: DEC
18810: ST_TO_ADDR
18811: LD_VAR 0 2
18815: PUSH
18816: FOR_TO
18817: IFFALSE 18844
// if Prob ( 60 ) then
18819: LD_INT 60
18821: PPUSH
18822: CALL_OW 13
18826: IFFALSE 18842
// SetSide ( i , side ) ;
18828: LD_VAR 0 1
18832: PPUSH
18833: LD_VAR 0 3
18837: PPUSH
18838: CALL_OW 235
18842: GO 18816
18844: POP
18845: POP
// end ;
18846: PPOPN 3
18848: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18849: LD_EXP 59
18853: PUSH
18854: LD_EXP 72
18858: AND
18859: IFFALSE 18978
18861: GO 18863
18863: DISABLE
18864: LD_INT 0
18866: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18867: LD_ADDR_VAR 0 1
18871: PUSH
18872: LD_INT 22
18874: PUSH
18875: LD_OWVAR 2
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 21
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 3
18896: PUSH
18897: LD_INT 23
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: PPUSH
18916: CALL_OW 69
18920: PUSH
18921: FOR_IN
18922: IFFALSE 18976
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18924: LD_VAR 0 1
18928: PPUSH
18929: CALL_OW 257
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: LD_INT 3
18942: PUSH
18943: LD_INT 4
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: IN
18952: IFFALSE 18974
// SetClass ( un , rand ( 1 , 4 ) ) ;
18954: LD_VAR 0 1
18958: PPUSH
18959: LD_INT 1
18961: PPUSH
18962: LD_INT 4
18964: PPUSH
18965: CALL_OW 12
18969: PPUSH
18970: CALL_OW 336
18974: GO 18921
18976: POP
18977: POP
// end ;
18978: PPOPN 1
18980: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18981: LD_EXP 59
18985: PUSH
18986: LD_EXP 71
18990: AND
18991: IFFALSE 19070
18993: GO 18995
18995: DISABLE
18996: LD_INT 0
18998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18999: LD_ADDR_VAR 0 1
19003: PUSH
19004: LD_INT 22
19006: PUSH
19007: LD_OWVAR 2
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 21
19018: PUSH
19019: LD_INT 3
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PPUSH
19030: CALL_OW 69
19034: ST_TO_ADDR
// if not tmp then
19035: LD_VAR 0 1
19039: NOT
19040: IFFALSE 19044
// exit ;
19042: GO 19070
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19044: LD_VAR 0 1
19048: PUSH
19049: LD_INT 1
19051: PPUSH
19052: LD_VAR 0 1
19056: PPUSH
19057: CALL_OW 12
19061: ARRAY
19062: PPUSH
19063: LD_INT 100
19065: PPUSH
19066: CALL_OW 234
// end ;
19070: PPOPN 1
19072: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19073: LD_EXP 59
19077: PUSH
19078: LD_EXP 73
19082: AND
19083: IFFALSE 19181
19085: GO 19087
19087: DISABLE
19088: LD_INT 0
19090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19091: LD_ADDR_VAR 0 1
19095: PUSH
19096: LD_INT 22
19098: PUSH
19099: LD_OWVAR 2
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 21
19110: PUSH
19111: LD_INT 1
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PPUSH
19122: CALL_OW 69
19126: ST_TO_ADDR
// if not tmp then
19127: LD_VAR 0 1
19131: NOT
19132: IFFALSE 19136
// exit ;
19134: GO 19181
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19136: LD_VAR 0 1
19140: PUSH
19141: LD_INT 1
19143: PPUSH
19144: LD_VAR 0 1
19148: PPUSH
19149: CALL_OW 12
19153: ARRAY
19154: PPUSH
19155: LD_INT 1
19157: PPUSH
19158: LD_INT 4
19160: PPUSH
19161: CALL_OW 12
19165: PPUSH
19166: LD_INT 3000
19168: PPUSH
19169: LD_INT 9000
19171: PPUSH
19172: CALL_OW 12
19176: PPUSH
19177: CALL_OW 492
// end ;
19181: PPOPN 1
19183: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19184: LD_EXP 59
19188: PUSH
19189: LD_EXP 74
19193: AND
19194: IFFALSE 19214
19196: GO 19198
19198: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19199: LD_INT 1
19201: PPUSH
19202: LD_OWVAR 2
19206: PPUSH
19207: LD_INT 0
19209: PPUSH
19210: CALL_OW 324
19214: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19215: LD_EXP 59
19219: PUSH
19220: LD_EXP 75
19224: AND
19225: IFFALSE 19308
19227: GO 19229
19229: DISABLE
19230: LD_INT 0
19232: PPUSH
19233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19234: LD_ADDR_VAR 0 2
19238: PUSH
19239: LD_INT 22
19241: PUSH
19242: LD_OWVAR 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 21
19253: PUSH
19254: LD_INT 3
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PPUSH
19265: CALL_OW 69
19269: ST_TO_ADDR
// if not tmp then
19270: LD_VAR 0 2
19274: NOT
19275: IFFALSE 19279
// exit ;
19277: GO 19308
// for i in tmp do
19279: LD_ADDR_VAR 0 1
19283: PUSH
19284: LD_VAR 0 2
19288: PUSH
19289: FOR_IN
19290: IFFALSE 19306
// SetBLevel ( i , 10 ) ;
19292: LD_VAR 0 1
19296: PPUSH
19297: LD_INT 10
19299: PPUSH
19300: CALL_OW 241
19304: GO 19289
19306: POP
19307: POP
// end ;
19308: PPOPN 2
19310: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19311: LD_EXP 59
19315: PUSH
19316: LD_EXP 76
19320: AND
19321: IFFALSE 19432
19323: GO 19325
19325: DISABLE
19326: LD_INT 0
19328: PPUSH
19329: PPUSH
19330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19331: LD_ADDR_VAR 0 3
19335: PUSH
19336: LD_INT 22
19338: PUSH
19339: LD_OWVAR 2
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 25
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PPUSH
19362: CALL_OW 69
19366: ST_TO_ADDR
// if not tmp then
19367: LD_VAR 0 3
19371: NOT
19372: IFFALSE 19376
// exit ;
19374: GO 19432
// un := tmp [ rand ( 1 , tmp ) ] ;
19376: LD_ADDR_VAR 0 2
19380: PUSH
19381: LD_VAR 0 3
19385: PUSH
19386: LD_INT 1
19388: PPUSH
19389: LD_VAR 0 3
19393: PPUSH
19394: CALL_OW 12
19398: ARRAY
19399: ST_TO_ADDR
// if Crawls ( un ) then
19400: LD_VAR 0 2
19404: PPUSH
19405: CALL_OW 318
19409: IFFALSE 19420
// ComWalk ( un ) ;
19411: LD_VAR 0 2
19415: PPUSH
19416: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19420: LD_VAR 0 2
19424: PPUSH
19425: LD_INT 5
19427: PPUSH
19428: CALL_OW 336
// end ;
19432: PPOPN 3
19434: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19435: LD_EXP 59
19439: PUSH
19440: LD_EXP 77
19444: AND
19445: PUSH
19446: LD_OWVAR 67
19450: PUSH
19451: LD_INT 3
19453: LESS
19454: AND
19455: IFFALSE 19474
19457: GO 19459
19459: DISABLE
// Difficulty := Difficulty + 1 ;
19460: LD_ADDR_OWVAR 67
19464: PUSH
19465: LD_OWVAR 67
19469: PUSH
19470: LD_INT 1
19472: PLUS
19473: ST_TO_ADDR
19474: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19475: LD_EXP 59
19479: PUSH
19480: LD_EXP 78
19484: AND
19485: IFFALSE 19588
19487: GO 19489
19489: DISABLE
19490: LD_INT 0
19492: PPUSH
// begin for i := 1 to 5 do
19493: LD_ADDR_VAR 0 1
19497: PUSH
19498: DOUBLE
19499: LD_INT 1
19501: DEC
19502: ST_TO_ADDR
19503: LD_INT 5
19505: PUSH
19506: FOR_TO
19507: IFFALSE 19586
// begin uc_nation := nation_nature ;
19509: LD_ADDR_OWVAR 21
19513: PUSH
19514: LD_INT 0
19516: ST_TO_ADDR
// uc_side := 0 ;
19517: LD_ADDR_OWVAR 20
19521: PUSH
19522: LD_INT 0
19524: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19525: LD_ADDR_OWVAR 29
19529: PUSH
19530: LD_INT 12
19532: PUSH
19533: LD_INT 12
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: ST_TO_ADDR
// hc_agressivity := 20 ;
19540: LD_ADDR_OWVAR 35
19544: PUSH
19545: LD_INT 20
19547: ST_TO_ADDR
// hc_class := class_tiger ;
19548: LD_ADDR_OWVAR 28
19552: PUSH
19553: LD_INT 14
19555: ST_TO_ADDR
// hc_gallery :=  ;
19556: LD_ADDR_OWVAR 33
19560: PUSH
19561: LD_STRING 
19563: ST_TO_ADDR
// hc_name :=  ;
19564: LD_ADDR_OWVAR 26
19568: PUSH
19569: LD_STRING 
19571: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19572: CALL_OW 44
19576: PPUSH
19577: LD_INT 0
19579: PPUSH
19580: CALL_OW 51
// end ;
19584: GO 19506
19586: POP
19587: POP
// end ;
19588: PPOPN 1
19590: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19591: LD_EXP 59
19595: PUSH
19596: LD_EXP 79
19600: AND
19601: IFFALSE 19610
19603: GO 19605
19605: DISABLE
// StreamSibBomb ;
19606: CALL 19611 0 0
19610: END
// export function StreamSibBomb ; var i , x , y ; begin
19611: LD_INT 0
19613: PPUSH
19614: PPUSH
19615: PPUSH
19616: PPUSH
// result := false ;
19617: LD_ADDR_VAR 0 1
19621: PUSH
19622: LD_INT 0
19624: ST_TO_ADDR
// for i := 1 to 16 do
19625: LD_ADDR_VAR 0 2
19629: PUSH
19630: DOUBLE
19631: LD_INT 1
19633: DEC
19634: ST_TO_ADDR
19635: LD_INT 16
19637: PUSH
19638: FOR_TO
19639: IFFALSE 19838
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19641: LD_ADDR_VAR 0 3
19645: PUSH
19646: LD_INT 10
19648: PUSH
19649: LD_INT 20
19651: PUSH
19652: LD_INT 30
19654: PUSH
19655: LD_INT 40
19657: PUSH
19658: LD_INT 50
19660: PUSH
19661: LD_INT 60
19663: PUSH
19664: LD_INT 70
19666: PUSH
19667: LD_INT 80
19669: PUSH
19670: LD_INT 90
19672: PUSH
19673: LD_INT 100
19675: PUSH
19676: LD_INT 110
19678: PUSH
19679: LD_INT 120
19681: PUSH
19682: LD_INT 130
19684: PUSH
19685: LD_INT 140
19687: PUSH
19688: LD_INT 150
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 1
19710: PPUSH
19711: LD_INT 15
19713: PPUSH
19714: CALL_OW 12
19718: ARRAY
19719: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19720: LD_ADDR_VAR 0 4
19724: PUSH
19725: LD_INT 10
19727: PUSH
19728: LD_INT 20
19730: PUSH
19731: LD_INT 30
19733: PUSH
19734: LD_INT 40
19736: PUSH
19737: LD_INT 50
19739: PUSH
19740: LD_INT 60
19742: PUSH
19743: LD_INT 70
19745: PUSH
19746: LD_INT 80
19748: PUSH
19749: LD_INT 90
19751: PUSH
19752: LD_INT 100
19754: PUSH
19755: LD_INT 110
19757: PUSH
19758: LD_INT 120
19760: PUSH
19761: LD_INT 130
19763: PUSH
19764: LD_INT 140
19766: PUSH
19767: LD_INT 150
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 1
19789: PPUSH
19790: LD_INT 15
19792: PPUSH
19793: CALL_OW 12
19797: ARRAY
19798: ST_TO_ADDR
// if ValidHex ( x , y ) then
19799: LD_VAR 0 3
19803: PPUSH
19804: LD_VAR 0 4
19808: PPUSH
19809: CALL_OW 488
19813: IFFALSE 19836
// begin result := [ x , y ] ;
19815: LD_ADDR_VAR 0 1
19819: PUSH
19820: LD_VAR 0 3
19824: PUSH
19825: LD_VAR 0 4
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: ST_TO_ADDR
// break ;
19834: GO 19838
// end ; end ;
19836: GO 19638
19838: POP
19839: POP
// if result then
19840: LD_VAR 0 1
19844: IFFALSE 19904
// begin ToLua ( playSibBomb() ) ;
19846: LD_STRING playSibBomb()
19848: PPUSH
19849: CALL_OW 559
// wait ( 0 0$14 ) ;
19853: LD_INT 490
19855: PPUSH
19856: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19860: LD_VAR 0 1
19864: PUSH
19865: LD_INT 1
19867: ARRAY
19868: PPUSH
19869: LD_VAR 0 1
19873: PUSH
19874: LD_INT 2
19876: ARRAY
19877: PPUSH
19878: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19882: LD_VAR 0 1
19886: PUSH
19887: LD_INT 1
19889: ARRAY
19890: PPUSH
19891: LD_VAR 0 1
19895: PUSH
19896: LD_INT 2
19898: ARRAY
19899: PPUSH
19900: CALL_OW 429
// end ; end ;
19904: LD_VAR 0 1
19908: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19909: LD_EXP 59
19913: PUSH
19914: LD_EXP 81
19918: AND
19919: IFFALSE 19931
19921: GO 19923
19923: DISABLE
// YouLost (  ) ;
19924: LD_STRING 
19926: PPUSH
19927: CALL_OW 104
19931: END
// every 0 0$1 trigger StreamModeActive and sFog do
19932: LD_EXP 59
19936: PUSH
19937: LD_EXP 80
19941: AND
19942: IFFALSE 19956
19944: GO 19946
19946: DISABLE
// FogOff ( your_side ) ;
19947: LD_OWVAR 2
19951: PPUSH
19952: CALL_OW 344
19956: END
// every 0 0$1 trigger StreamModeActive and sSun do
19957: LD_EXP 59
19961: PUSH
19962: LD_EXP 82
19966: AND
19967: IFFALSE 19995
19969: GO 19971
19971: DISABLE
// begin solar_recharge_percent := 0 ;
19972: LD_ADDR_OWVAR 79
19976: PUSH
19977: LD_INT 0
19979: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19980: LD_INT 10500
19982: PPUSH
19983: CALL_OW 67
// solar_recharge_percent := 100 ;
19987: LD_ADDR_OWVAR 79
19991: PUSH
19992: LD_INT 100
19994: ST_TO_ADDR
// end ;
19995: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19996: LD_EXP 59
20000: PUSH
20001: LD_EXP 83
20005: AND
20006: IFFALSE 20245
20008: GO 20010
20010: DISABLE
20011: LD_INT 0
20013: PPUSH
20014: PPUSH
20015: PPUSH
// begin tmp := [ ] ;
20016: LD_ADDR_VAR 0 3
20020: PUSH
20021: EMPTY
20022: ST_TO_ADDR
// for i := 1 to 6 do
20023: LD_ADDR_VAR 0 1
20027: PUSH
20028: DOUBLE
20029: LD_INT 1
20031: DEC
20032: ST_TO_ADDR
20033: LD_INT 6
20035: PUSH
20036: FOR_TO
20037: IFFALSE 20142
// begin uc_nation := nation_nature ;
20039: LD_ADDR_OWVAR 21
20043: PUSH
20044: LD_INT 0
20046: ST_TO_ADDR
// uc_side := 0 ;
20047: LD_ADDR_OWVAR 20
20051: PUSH
20052: LD_INT 0
20054: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20055: LD_ADDR_OWVAR 29
20059: PUSH
20060: LD_INT 12
20062: PUSH
20063: LD_INT 12
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: ST_TO_ADDR
// hc_agressivity := 20 ;
20070: LD_ADDR_OWVAR 35
20074: PUSH
20075: LD_INT 20
20077: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20078: LD_ADDR_OWVAR 28
20082: PUSH
20083: LD_INT 17
20085: ST_TO_ADDR
// hc_gallery :=  ;
20086: LD_ADDR_OWVAR 33
20090: PUSH
20091: LD_STRING 
20093: ST_TO_ADDR
// hc_name :=  ;
20094: LD_ADDR_OWVAR 26
20098: PUSH
20099: LD_STRING 
20101: ST_TO_ADDR
// un := CreateHuman ;
20102: LD_ADDR_VAR 0 2
20106: PUSH
20107: CALL_OW 44
20111: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20112: LD_VAR 0 2
20116: PPUSH
20117: LD_INT 1
20119: PPUSH
20120: CALL_OW 51
// tmp := tmp ^ un ;
20124: LD_ADDR_VAR 0 3
20128: PUSH
20129: LD_VAR 0 3
20133: PUSH
20134: LD_VAR 0 2
20138: ADD
20139: ST_TO_ADDR
// end ;
20140: GO 20036
20142: POP
20143: POP
// repeat wait ( 0 0$1 ) ;
20144: LD_INT 35
20146: PPUSH
20147: CALL_OW 67
// for un in tmp do
20151: LD_ADDR_VAR 0 2
20155: PUSH
20156: LD_VAR 0 3
20160: PUSH
20161: FOR_IN
20162: IFFALSE 20236
// begin if IsDead ( un ) then
20164: LD_VAR 0 2
20168: PPUSH
20169: CALL_OW 301
20173: IFFALSE 20193
// begin tmp := tmp diff un ;
20175: LD_ADDR_VAR 0 3
20179: PUSH
20180: LD_VAR 0 3
20184: PUSH
20185: LD_VAR 0 2
20189: DIFF
20190: ST_TO_ADDR
// continue ;
20191: GO 20161
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20193: LD_VAR 0 2
20197: PPUSH
20198: LD_INT 3
20200: PUSH
20201: LD_INT 22
20203: PUSH
20204: LD_INT 0
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PPUSH
20215: CALL_OW 69
20219: PPUSH
20220: LD_VAR 0 2
20224: PPUSH
20225: CALL_OW 74
20229: PPUSH
20230: CALL_OW 115
// end ;
20234: GO 20161
20236: POP
20237: POP
// until not tmp ;
20238: LD_VAR 0 3
20242: NOT
20243: IFFALSE 20144
// end ;
20245: PPOPN 3
20247: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20248: LD_EXP 59
20252: PUSH
20253: LD_EXP 84
20257: AND
20258: IFFALSE 20312
20260: GO 20262
20262: DISABLE
// begin ToLua ( displayTroll(); ) ;
20263: LD_STRING displayTroll();
20265: PPUSH
20266: CALL_OW 559
// wait ( 3 3$00 ) ;
20270: LD_INT 6300
20272: PPUSH
20273: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20277: LD_STRING hideTroll();
20279: PPUSH
20280: CALL_OW 559
// wait ( 1 1$00 ) ;
20284: LD_INT 2100
20286: PPUSH
20287: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20291: LD_STRING displayTroll();
20293: PPUSH
20294: CALL_OW 559
// wait ( 1 1$00 ) ;
20298: LD_INT 2100
20300: PPUSH
20301: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20305: LD_STRING hideTroll();
20307: PPUSH
20308: CALL_OW 559
// end ;
20312: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20313: LD_EXP 59
20317: PUSH
20318: LD_EXP 85
20322: AND
20323: IFFALSE 20386
20325: GO 20327
20327: DISABLE
20328: LD_INT 0
20330: PPUSH
// begin p := 0 ;
20331: LD_ADDR_VAR 0 1
20335: PUSH
20336: LD_INT 0
20338: ST_TO_ADDR
// repeat game_speed := 1 ;
20339: LD_ADDR_OWVAR 65
20343: PUSH
20344: LD_INT 1
20346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20347: LD_INT 35
20349: PPUSH
20350: CALL_OW 67
// p := p + 1 ;
20354: LD_ADDR_VAR 0 1
20358: PUSH
20359: LD_VAR 0 1
20363: PUSH
20364: LD_INT 1
20366: PLUS
20367: ST_TO_ADDR
// until p >= 60 ;
20368: LD_VAR 0 1
20372: PUSH
20373: LD_INT 60
20375: GREATEREQUAL
20376: IFFALSE 20339
// game_speed := 4 ;
20378: LD_ADDR_OWVAR 65
20382: PUSH
20383: LD_INT 4
20385: ST_TO_ADDR
// end ;
20386: PPOPN 1
20388: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20389: LD_EXP 59
20393: PUSH
20394: LD_EXP 86
20398: AND
20399: IFFALSE 20545
20401: GO 20403
20403: DISABLE
20404: LD_INT 0
20406: PPUSH
20407: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20408: LD_ADDR_VAR 0 1
20412: PUSH
20413: LD_INT 22
20415: PUSH
20416: LD_OWVAR 2
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 2
20427: PUSH
20428: LD_INT 30
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 30
20440: PUSH
20441: LD_INT 1
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PPUSH
20457: CALL_OW 69
20461: ST_TO_ADDR
// if not depot then
20462: LD_VAR 0 1
20466: NOT
20467: IFFALSE 20471
// exit ;
20469: GO 20545
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20471: LD_ADDR_VAR 0 2
20475: PUSH
20476: LD_VAR 0 1
20480: PUSH
20481: LD_INT 1
20483: PPUSH
20484: LD_VAR 0 1
20488: PPUSH
20489: CALL_OW 12
20493: ARRAY
20494: PPUSH
20495: CALL_OW 274
20499: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20500: LD_VAR 0 2
20504: PPUSH
20505: LD_INT 1
20507: PPUSH
20508: LD_INT 0
20510: PPUSH
20511: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20515: LD_VAR 0 2
20519: PPUSH
20520: LD_INT 2
20522: PPUSH
20523: LD_INT 0
20525: PPUSH
20526: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20530: LD_VAR 0 2
20534: PPUSH
20535: LD_INT 3
20537: PPUSH
20538: LD_INT 0
20540: PPUSH
20541: CALL_OW 277
// end ;
20545: PPOPN 2
20547: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20548: LD_EXP 59
20552: PUSH
20553: LD_EXP 87
20557: AND
20558: IFFALSE 20655
20560: GO 20562
20562: DISABLE
20563: LD_INT 0
20565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20566: LD_ADDR_VAR 0 1
20570: PUSH
20571: LD_INT 22
20573: PUSH
20574: LD_OWVAR 2
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 21
20585: PUSH
20586: LD_INT 1
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 3
20595: PUSH
20596: LD_INT 23
20598: PUSH
20599: LD_INT 0
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: LIST
20614: PPUSH
20615: CALL_OW 69
20619: ST_TO_ADDR
// if not tmp then
20620: LD_VAR 0 1
20624: NOT
20625: IFFALSE 20629
// exit ;
20627: GO 20655
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20629: LD_VAR 0 1
20633: PUSH
20634: LD_INT 1
20636: PPUSH
20637: LD_VAR 0 1
20641: PPUSH
20642: CALL_OW 12
20646: ARRAY
20647: PPUSH
20648: LD_INT 200
20650: PPUSH
20651: CALL_OW 234
// end ;
20655: PPOPN 1
20657: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20658: LD_EXP 59
20662: PUSH
20663: LD_EXP 88
20667: AND
20668: IFFALSE 20747
20670: GO 20672
20672: DISABLE
20673: LD_INT 0
20675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20676: LD_ADDR_VAR 0 1
20680: PUSH
20681: LD_INT 22
20683: PUSH
20684: LD_OWVAR 2
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 21
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PPUSH
20707: CALL_OW 69
20711: ST_TO_ADDR
// if not tmp then
20712: LD_VAR 0 1
20716: NOT
20717: IFFALSE 20721
// exit ;
20719: GO 20747
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20721: LD_VAR 0 1
20725: PUSH
20726: LD_INT 1
20728: PPUSH
20729: LD_VAR 0 1
20733: PPUSH
20734: CALL_OW 12
20738: ARRAY
20739: PPUSH
20740: LD_INT 60
20742: PPUSH
20743: CALL_OW 234
// end ;
20747: PPOPN 1
20749: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20750: LD_EXP 59
20754: PUSH
20755: LD_EXP 89
20759: AND
20760: IFFALSE 20859
20762: GO 20764
20764: DISABLE
20765: LD_INT 0
20767: PPUSH
20768: PPUSH
// begin enable ;
20769: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20770: LD_ADDR_VAR 0 1
20774: PUSH
20775: LD_INT 22
20777: PUSH
20778: LD_OWVAR 2
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 61
20789: PUSH
20790: EMPTY
20791: LIST
20792: PUSH
20793: LD_INT 33
20795: PUSH
20796: LD_INT 2
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: LIST
20807: PPUSH
20808: CALL_OW 69
20812: ST_TO_ADDR
// if not tmp then
20813: LD_VAR 0 1
20817: NOT
20818: IFFALSE 20822
// exit ;
20820: GO 20859
// for i in tmp do
20822: LD_ADDR_VAR 0 2
20826: PUSH
20827: LD_VAR 0 1
20831: PUSH
20832: FOR_IN
20833: IFFALSE 20857
// if IsControledBy ( i ) then
20835: LD_VAR 0 2
20839: PPUSH
20840: CALL_OW 312
20844: IFFALSE 20855
// ComUnlink ( i ) ;
20846: LD_VAR 0 2
20850: PPUSH
20851: CALL_OW 136
20855: GO 20832
20857: POP
20858: POP
// end ;
20859: PPOPN 2
20861: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20862: LD_EXP 59
20866: PUSH
20867: LD_EXP 90
20871: AND
20872: IFFALSE 21012
20874: GO 20876
20876: DISABLE
20877: LD_INT 0
20879: PPUSH
20880: PPUSH
// begin ToLua ( displayPowell(); ) ;
20881: LD_STRING displayPowell();
20883: PPUSH
20884: CALL_OW 559
// uc_side := 0 ;
20888: LD_ADDR_OWVAR 20
20892: PUSH
20893: LD_INT 0
20895: ST_TO_ADDR
// uc_nation := 2 ;
20896: LD_ADDR_OWVAR 21
20900: PUSH
20901: LD_INT 2
20903: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20904: LD_ADDR_OWVAR 37
20908: PUSH
20909: LD_INT 14
20911: ST_TO_ADDR
// vc_engine := engine_siberite ;
20912: LD_ADDR_OWVAR 39
20916: PUSH
20917: LD_INT 3
20919: ST_TO_ADDR
// vc_control := control_apeman ;
20920: LD_ADDR_OWVAR 38
20924: PUSH
20925: LD_INT 5
20927: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20928: LD_ADDR_OWVAR 40
20932: PUSH
20933: LD_INT 29
20935: ST_TO_ADDR
// un := CreateVehicle ;
20936: LD_ADDR_VAR 0 2
20940: PUSH
20941: CALL_OW 45
20945: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20946: LD_VAR 0 2
20950: PPUSH
20951: LD_INT 1
20953: PPUSH
20954: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20958: LD_INT 35
20960: PPUSH
20961: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20965: LD_VAR 0 2
20969: PPUSH
20970: LD_INT 22
20972: PUSH
20973: LD_OWVAR 2
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PPUSH
20982: CALL_OW 69
20986: PPUSH
20987: LD_VAR 0 2
20991: PPUSH
20992: CALL_OW 74
20996: PPUSH
20997: CALL_OW 115
// until IsDead ( un ) ;
21001: LD_VAR 0 2
21005: PPUSH
21006: CALL_OW 301
21010: IFFALSE 20958
// end ;
21012: PPOPN 2
21014: END
// every 0 0$1 trigger StreamModeActive and sStu do
21015: LD_EXP 59
21019: PUSH
21020: LD_EXP 98
21024: AND
21025: IFFALSE 21041
21027: GO 21029
21029: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21030: LD_STRING displayStucuk();
21032: PPUSH
21033: CALL_OW 559
// ResetFog ;
21037: CALL_OW 335
// end ;
21041: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21042: LD_EXP 59
21046: PUSH
21047: LD_EXP 91
21051: AND
21052: IFFALSE 21193
21054: GO 21056
21056: DISABLE
21057: LD_INT 0
21059: PPUSH
21060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21061: LD_ADDR_VAR 0 2
21065: PUSH
21066: LD_INT 22
21068: PUSH
21069: LD_OWVAR 2
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 21
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PPUSH
21092: CALL_OW 69
21096: ST_TO_ADDR
// if not tmp then
21097: LD_VAR 0 2
21101: NOT
21102: IFFALSE 21106
// exit ;
21104: GO 21193
// un := tmp [ rand ( 1 , tmp ) ] ;
21106: LD_ADDR_VAR 0 1
21110: PUSH
21111: LD_VAR 0 2
21115: PUSH
21116: LD_INT 1
21118: PPUSH
21119: LD_VAR 0 2
21123: PPUSH
21124: CALL_OW 12
21128: ARRAY
21129: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21130: LD_VAR 0 1
21134: PPUSH
21135: LD_INT 0
21137: PPUSH
21138: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21142: LD_VAR 0 1
21146: PPUSH
21147: LD_OWVAR 3
21151: PUSH
21152: LD_VAR 0 1
21156: DIFF
21157: PPUSH
21158: LD_VAR 0 1
21162: PPUSH
21163: CALL_OW 74
21167: PPUSH
21168: CALL_OW 115
// wait ( 0 0$20 ) ;
21172: LD_INT 700
21174: PPUSH
21175: CALL_OW 67
// SetSide ( un , your_side ) ;
21179: LD_VAR 0 1
21183: PPUSH
21184: LD_OWVAR 2
21188: PPUSH
21189: CALL_OW 235
// end ;
21193: PPOPN 2
21195: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21196: LD_EXP 59
21200: PUSH
21201: LD_EXP 92
21205: AND
21206: IFFALSE 21312
21208: GO 21210
21210: DISABLE
21211: LD_INT 0
21213: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21214: LD_ADDR_VAR 0 1
21218: PUSH
21219: LD_INT 22
21221: PUSH
21222: LD_OWVAR 2
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 2
21233: PUSH
21234: LD_INT 30
21236: PUSH
21237: LD_INT 0
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 30
21246: PUSH
21247: LD_INT 1
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: LIST
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PPUSH
21263: CALL_OW 69
21267: ST_TO_ADDR
// if not depot then
21268: LD_VAR 0 1
21272: NOT
21273: IFFALSE 21277
// exit ;
21275: GO 21312
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21277: LD_VAR 0 1
21281: PUSH
21282: LD_INT 1
21284: ARRAY
21285: PPUSH
21286: CALL_OW 250
21290: PPUSH
21291: LD_VAR 0 1
21295: PUSH
21296: LD_INT 1
21298: ARRAY
21299: PPUSH
21300: CALL_OW 251
21304: PPUSH
21305: LD_INT 70
21307: PPUSH
21308: CALL_OW 495
// end ;
21312: PPOPN 1
21314: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21315: LD_EXP 59
21319: PUSH
21320: LD_EXP 93
21324: AND
21325: IFFALSE 21536
21327: GO 21329
21329: DISABLE
21330: LD_INT 0
21332: PPUSH
21333: PPUSH
21334: PPUSH
21335: PPUSH
21336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21337: LD_ADDR_VAR 0 5
21341: PUSH
21342: LD_INT 22
21344: PUSH
21345: LD_OWVAR 2
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 21
21356: PUSH
21357: LD_INT 1
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PPUSH
21368: CALL_OW 69
21372: ST_TO_ADDR
// if not tmp then
21373: LD_VAR 0 5
21377: NOT
21378: IFFALSE 21382
// exit ;
21380: GO 21536
// for i in tmp do
21382: LD_ADDR_VAR 0 1
21386: PUSH
21387: LD_VAR 0 5
21391: PUSH
21392: FOR_IN
21393: IFFALSE 21534
// begin d := rand ( 0 , 5 ) ;
21395: LD_ADDR_VAR 0 4
21399: PUSH
21400: LD_INT 0
21402: PPUSH
21403: LD_INT 5
21405: PPUSH
21406: CALL_OW 12
21410: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21411: LD_ADDR_VAR 0 2
21415: PUSH
21416: LD_VAR 0 1
21420: PPUSH
21421: CALL_OW 250
21425: PPUSH
21426: LD_VAR 0 4
21430: PPUSH
21431: LD_INT 3
21433: PPUSH
21434: LD_INT 12
21436: PPUSH
21437: CALL_OW 12
21441: PPUSH
21442: CALL_OW 272
21446: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21447: LD_ADDR_VAR 0 3
21451: PUSH
21452: LD_VAR 0 1
21456: PPUSH
21457: CALL_OW 251
21461: PPUSH
21462: LD_VAR 0 4
21466: PPUSH
21467: LD_INT 3
21469: PPUSH
21470: LD_INT 12
21472: PPUSH
21473: CALL_OW 12
21477: PPUSH
21478: CALL_OW 273
21482: ST_TO_ADDR
// if ValidHex ( x , y ) then
21483: LD_VAR 0 2
21487: PPUSH
21488: LD_VAR 0 3
21492: PPUSH
21493: CALL_OW 488
21497: IFFALSE 21532
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21499: LD_VAR 0 1
21503: PPUSH
21504: LD_VAR 0 2
21508: PPUSH
21509: LD_VAR 0 3
21513: PPUSH
21514: LD_INT 3
21516: PPUSH
21517: LD_INT 6
21519: PPUSH
21520: CALL_OW 12
21524: PPUSH
21525: LD_INT 1
21527: PPUSH
21528: CALL_OW 483
// end ;
21532: GO 21392
21534: POP
21535: POP
// end ;
21536: PPOPN 5
21538: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21539: LD_EXP 59
21543: PUSH
21544: LD_EXP 94
21548: AND
21549: IFFALSE 21643
21551: GO 21553
21553: DISABLE
21554: LD_INT 0
21556: PPUSH
21557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21558: LD_ADDR_VAR 0 2
21562: PUSH
21563: LD_INT 22
21565: PUSH
21566: LD_OWVAR 2
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 32
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 21
21587: PUSH
21588: LD_INT 2
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: LIST
21599: PPUSH
21600: CALL_OW 69
21604: ST_TO_ADDR
// if not tmp then
21605: LD_VAR 0 2
21609: NOT
21610: IFFALSE 21614
// exit ;
21612: GO 21643
// for i in tmp do
21614: LD_ADDR_VAR 0 1
21618: PUSH
21619: LD_VAR 0 2
21623: PUSH
21624: FOR_IN
21625: IFFALSE 21641
// SetFuel ( i , 0 ) ;
21627: LD_VAR 0 1
21631: PPUSH
21632: LD_INT 0
21634: PPUSH
21635: CALL_OW 240
21639: GO 21624
21641: POP
21642: POP
// end ;
21643: PPOPN 2
21645: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21646: LD_EXP 59
21650: PUSH
21651: LD_EXP 95
21655: AND
21656: IFFALSE 21722
21658: GO 21660
21660: DISABLE
21661: LD_INT 0
21663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21664: LD_ADDR_VAR 0 1
21668: PUSH
21669: LD_INT 22
21671: PUSH
21672: LD_OWVAR 2
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 30
21683: PUSH
21684: LD_INT 29
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PPUSH
21695: CALL_OW 69
21699: ST_TO_ADDR
// if not tmp then
21700: LD_VAR 0 1
21704: NOT
21705: IFFALSE 21709
// exit ;
21707: GO 21722
// DestroyUnit ( tmp [ 1 ] ) ;
21709: LD_VAR 0 1
21713: PUSH
21714: LD_INT 1
21716: ARRAY
21717: PPUSH
21718: CALL_OW 65
// end ;
21722: PPOPN 1
21724: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21725: LD_EXP 59
21729: PUSH
21730: LD_EXP 97
21734: AND
21735: IFFALSE 21864
21737: GO 21739
21739: DISABLE
21740: LD_INT 0
21742: PPUSH
// begin uc_side := 0 ;
21743: LD_ADDR_OWVAR 20
21747: PUSH
21748: LD_INT 0
21750: ST_TO_ADDR
// uc_nation := nation_arabian ;
21751: LD_ADDR_OWVAR 21
21755: PUSH
21756: LD_INT 2
21758: ST_TO_ADDR
// hc_gallery :=  ;
21759: LD_ADDR_OWVAR 33
21763: PUSH
21764: LD_STRING 
21766: ST_TO_ADDR
// hc_name :=  ;
21767: LD_ADDR_OWVAR 26
21771: PUSH
21772: LD_STRING 
21774: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21775: LD_INT 1
21777: PPUSH
21778: LD_INT 11
21780: PPUSH
21781: LD_INT 10
21783: PPUSH
21784: CALL_OW 380
// un := CreateHuman ;
21788: LD_ADDR_VAR 0 1
21792: PUSH
21793: CALL_OW 44
21797: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21798: LD_VAR 0 1
21802: PPUSH
21803: LD_INT 1
21805: PPUSH
21806: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21810: LD_INT 35
21812: PPUSH
21813: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21817: LD_VAR 0 1
21821: PPUSH
21822: LD_INT 22
21824: PUSH
21825: LD_OWVAR 2
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PPUSH
21834: CALL_OW 69
21838: PPUSH
21839: LD_VAR 0 1
21843: PPUSH
21844: CALL_OW 74
21848: PPUSH
21849: CALL_OW 115
// until IsDead ( un ) ;
21853: LD_VAR 0 1
21857: PPUSH
21858: CALL_OW 301
21862: IFFALSE 21810
// end ;
21864: PPOPN 1
21866: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21867: LD_EXP 59
21871: PUSH
21872: LD_EXP 99
21876: AND
21877: IFFALSE 21889
21879: GO 21881
21881: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21882: LD_STRING earthquake(getX(game), 0, 32)
21884: PPUSH
21885: CALL_OW 559
21889: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21890: LD_EXP 59
21894: PUSH
21895: LD_EXP 100
21899: AND
21900: IFFALSE 21991
21902: GO 21904
21904: DISABLE
21905: LD_INT 0
21907: PPUSH
// begin enable ;
21908: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21909: LD_ADDR_VAR 0 1
21913: PUSH
21914: LD_INT 22
21916: PUSH
21917: LD_OWVAR 2
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 21
21928: PUSH
21929: LD_INT 2
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 33
21938: PUSH
21939: LD_INT 3
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: LIST
21950: PPUSH
21951: CALL_OW 69
21955: ST_TO_ADDR
// if not tmp then
21956: LD_VAR 0 1
21960: NOT
21961: IFFALSE 21965
// exit ;
21963: GO 21991
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21965: LD_VAR 0 1
21969: PUSH
21970: LD_INT 1
21972: PPUSH
21973: LD_VAR 0 1
21977: PPUSH
21978: CALL_OW 12
21982: ARRAY
21983: PPUSH
21984: LD_INT 1
21986: PPUSH
21987: CALL_OW 234
// end ;
21991: PPOPN 1
21993: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21994: LD_EXP 59
21998: PUSH
21999: LD_EXP 101
22003: AND
22004: IFFALSE 22145
22006: GO 22008
22008: DISABLE
22009: LD_INT 0
22011: PPUSH
22012: PPUSH
22013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22014: LD_ADDR_VAR 0 3
22018: PUSH
22019: LD_INT 22
22021: PUSH
22022: LD_OWVAR 2
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 25
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PPUSH
22045: CALL_OW 69
22049: ST_TO_ADDR
// if not tmp then
22050: LD_VAR 0 3
22054: NOT
22055: IFFALSE 22059
// exit ;
22057: GO 22145
// un := tmp [ rand ( 1 , tmp ) ] ;
22059: LD_ADDR_VAR 0 2
22063: PUSH
22064: LD_VAR 0 3
22068: PUSH
22069: LD_INT 1
22071: PPUSH
22072: LD_VAR 0 3
22076: PPUSH
22077: CALL_OW 12
22081: ARRAY
22082: ST_TO_ADDR
// if Crawls ( un ) then
22083: LD_VAR 0 2
22087: PPUSH
22088: CALL_OW 318
22092: IFFALSE 22103
// ComWalk ( un ) ;
22094: LD_VAR 0 2
22098: PPUSH
22099: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22103: LD_VAR 0 2
22107: PPUSH
22108: LD_INT 9
22110: PPUSH
22111: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22115: LD_INT 28
22117: PPUSH
22118: LD_OWVAR 2
22122: PPUSH
22123: LD_INT 2
22125: PPUSH
22126: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22130: LD_INT 29
22132: PPUSH
22133: LD_OWVAR 2
22137: PPUSH
22138: LD_INT 2
22140: PPUSH
22141: CALL_OW 322
// end ;
22145: PPOPN 3
22147: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22148: LD_EXP 59
22152: PUSH
22153: LD_EXP 102
22157: AND
22158: IFFALSE 22269
22160: GO 22162
22162: DISABLE
22163: LD_INT 0
22165: PPUSH
22166: PPUSH
22167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22168: LD_ADDR_VAR 0 3
22172: PUSH
22173: LD_INT 22
22175: PUSH
22176: LD_OWVAR 2
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 25
22187: PUSH
22188: LD_INT 1
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PPUSH
22199: CALL_OW 69
22203: ST_TO_ADDR
// if not tmp then
22204: LD_VAR 0 3
22208: NOT
22209: IFFALSE 22213
// exit ;
22211: GO 22269
// un := tmp [ rand ( 1 , tmp ) ] ;
22213: LD_ADDR_VAR 0 2
22217: PUSH
22218: LD_VAR 0 3
22222: PUSH
22223: LD_INT 1
22225: PPUSH
22226: LD_VAR 0 3
22230: PPUSH
22231: CALL_OW 12
22235: ARRAY
22236: ST_TO_ADDR
// if Crawls ( un ) then
22237: LD_VAR 0 2
22241: PPUSH
22242: CALL_OW 318
22246: IFFALSE 22257
// ComWalk ( un ) ;
22248: LD_VAR 0 2
22252: PPUSH
22253: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22257: LD_VAR 0 2
22261: PPUSH
22262: LD_INT 8
22264: PPUSH
22265: CALL_OW 336
// end ;
22269: PPOPN 3
22271: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22272: LD_EXP 59
22276: PUSH
22277: LD_EXP 103
22281: AND
22282: IFFALSE 22426
22284: GO 22286
22286: DISABLE
22287: LD_INT 0
22289: PPUSH
22290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22291: LD_ADDR_VAR 0 2
22295: PUSH
22296: LD_INT 22
22298: PUSH
22299: LD_OWVAR 2
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 21
22310: PUSH
22311: LD_INT 2
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 2
22320: PUSH
22321: LD_INT 34
22323: PUSH
22324: LD_INT 12
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 34
22333: PUSH
22334: LD_INT 51
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 34
22343: PUSH
22344: LD_INT 32
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: LIST
22361: PPUSH
22362: CALL_OW 69
22366: ST_TO_ADDR
// if not tmp then
22367: LD_VAR 0 2
22371: NOT
22372: IFFALSE 22376
// exit ;
22374: GO 22426
// for i in tmp do
22376: LD_ADDR_VAR 0 1
22380: PUSH
22381: LD_VAR 0 2
22385: PUSH
22386: FOR_IN
22387: IFFALSE 22424
// if GetCargo ( i , mat_artifact ) = 0 then
22389: LD_VAR 0 1
22393: PPUSH
22394: LD_INT 4
22396: PPUSH
22397: CALL_OW 289
22401: PUSH
22402: LD_INT 0
22404: EQUAL
22405: IFFALSE 22422
// SetCargo ( i , mat_siberit , 100 ) ;
22407: LD_VAR 0 1
22411: PPUSH
22412: LD_INT 3
22414: PPUSH
22415: LD_INT 100
22417: PPUSH
22418: CALL_OW 290
22422: GO 22386
22424: POP
22425: POP
// end ;
22426: PPOPN 2
22428: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22429: LD_EXP 59
22433: PUSH
22434: LD_EXP 104
22438: AND
22439: IFFALSE 22622
22441: GO 22443
22443: DISABLE
22444: LD_INT 0
22446: PPUSH
22447: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22448: LD_ADDR_VAR 0 2
22452: PUSH
22453: LD_INT 22
22455: PUSH
22456: LD_OWVAR 2
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PPUSH
22465: CALL_OW 69
22469: ST_TO_ADDR
// if not tmp then
22470: LD_VAR 0 2
22474: NOT
22475: IFFALSE 22479
// exit ;
22477: GO 22622
// for i := 1 to 2 do
22479: LD_ADDR_VAR 0 1
22483: PUSH
22484: DOUBLE
22485: LD_INT 1
22487: DEC
22488: ST_TO_ADDR
22489: LD_INT 2
22491: PUSH
22492: FOR_TO
22493: IFFALSE 22620
// begin uc_side := your_side ;
22495: LD_ADDR_OWVAR 20
22499: PUSH
22500: LD_OWVAR 2
22504: ST_TO_ADDR
// uc_nation := nation_american ;
22505: LD_ADDR_OWVAR 21
22509: PUSH
22510: LD_INT 1
22512: ST_TO_ADDR
// vc_chassis := us_morphling ;
22513: LD_ADDR_OWVAR 37
22517: PUSH
22518: LD_INT 5
22520: ST_TO_ADDR
// vc_engine := engine_siberite ;
22521: LD_ADDR_OWVAR 39
22525: PUSH
22526: LD_INT 3
22528: ST_TO_ADDR
// vc_control := control_computer ;
22529: LD_ADDR_OWVAR 38
22533: PUSH
22534: LD_INT 3
22536: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22537: LD_ADDR_OWVAR 40
22541: PUSH
22542: LD_INT 10
22544: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22545: LD_VAR 0 2
22549: PUSH
22550: LD_INT 1
22552: ARRAY
22553: PPUSH
22554: CALL_OW 310
22558: NOT
22559: IFFALSE 22606
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22561: CALL_OW 45
22565: PPUSH
22566: LD_VAR 0 2
22570: PUSH
22571: LD_INT 1
22573: ARRAY
22574: PPUSH
22575: CALL_OW 250
22579: PPUSH
22580: LD_VAR 0 2
22584: PUSH
22585: LD_INT 1
22587: ARRAY
22588: PPUSH
22589: CALL_OW 251
22593: PPUSH
22594: LD_INT 12
22596: PPUSH
22597: LD_INT 1
22599: PPUSH
22600: CALL_OW 50
22604: GO 22618
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22606: CALL_OW 45
22610: PPUSH
22611: LD_INT 1
22613: PPUSH
22614: CALL_OW 51
// end ;
22618: GO 22492
22620: POP
22621: POP
// end ;
22622: PPOPN 2
22624: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22625: LD_EXP 59
22629: PUSH
22630: LD_EXP 105
22634: AND
22635: IFFALSE 22857
22637: GO 22639
22639: DISABLE
22640: LD_INT 0
22642: PPUSH
22643: PPUSH
22644: PPUSH
22645: PPUSH
22646: PPUSH
22647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22648: LD_ADDR_VAR 0 6
22652: PUSH
22653: LD_INT 22
22655: PUSH
22656: LD_OWVAR 2
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 21
22667: PUSH
22668: LD_INT 1
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 3
22677: PUSH
22678: LD_INT 23
22680: PUSH
22681: LD_INT 0
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: LIST
22696: PPUSH
22697: CALL_OW 69
22701: ST_TO_ADDR
// if not tmp then
22702: LD_VAR 0 6
22706: NOT
22707: IFFALSE 22711
// exit ;
22709: GO 22857
// s1 := rand ( 1 , 4 ) ;
22711: LD_ADDR_VAR 0 2
22715: PUSH
22716: LD_INT 1
22718: PPUSH
22719: LD_INT 4
22721: PPUSH
22722: CALL_OW 12
22726: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22727: LD_ADDR_VAR 0 4
22731: PUSH
22732: LD_VAR 0 6
22736: PUSH
22737: LD_INT 1
22739: ARRAY
22740: PPUSH
22741: LD_VAR 0 2
22745: PPUSH
22746: CALL_OW 259
22750: ST_TO_ADDR
// if s1 = 1 then
22751: LD_VAR 0 2
22755: PUSH
22756: LD_INT 1
22758: EQUAL
22759: IFFALSE 22779
// s2 := rand ( 2 , 4 ) else
22761: LD_ADDR_VAR 0 3
22765: PUSH
22766: LD_INT 2
22768: PPUSH
22769: LD_INT 4
22771: PPUSH
22772: CALL_OW 12
22776: ST_TO_ADDR
22777: GO 22787
// s2 := 1 ;
22779: LD_ADDR_VAR 0 3
22783: PUSH
22784: LD_INT 1
22786: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22787: LD_ADDR_VAR 0 5
22791: PUSH
22792: LD_VAR 0 6
22796: PUSH
22797: LD_INT 1
22799: ARRAY
22800: PPUSH
22801: LD_VAR 0 3
22805: PPUSH
22806: CALL_OW 259
22810: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22811: LD_VAR 0 6
22815: PUSH
22816: LD_INT 1
22818: ARRAY
22819: PPUSH
22820: LD_VAR 0 2
22824: PPUSH
22825: LD_VAR 0 5
22829: PPUSH
22830: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22834: LD_VAR 0 6
22838: PUSH
22839: LD_INT 1
22841: ARRAY
22842: PPUSH
22843: LD_VAR 0 3
22847: PPUSH
22848: LD_VAR 0 4
22852: PPUSH
22853: CALL_OW 237
// end ;
22857: PPOPN 6
22859: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22860: LD_EXP 59
22864: PUSH
22865: LD_EXP 106
22869: AND
22870: IFFALSE 22949
22872: GO 22874
22874: DISABLE
22875: LD_INT 0
22877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22878: LD_ADDR_VAR 0 1
22882: PUSH
22883: LD_INT 22
22885: PUSH
22886: LD_OWVAR 2
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 30
22897: PUSH
22898: LD_INT 3
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PPUSH
22909: CALL_OW 69
22913: ST_TO_ADDR
// if not tmp then
22914: LD_VAR 0 1
22918: NOT
22919: IFFALSE 22923
// exit ;
22921: GO 22949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22923: LD_VAR 0 1
22927: PUSH
22928: LD_INT 1
22930: PPUSH
22931: LD_VAR 0 1
22935: PPUSH
22936: CALL_OW 12
22940: ARRAY
22941: PPUSH
22942: LD_INT 1
22944: PPUSH
22945: CALL_OW 234
// end ;
22949: PPOPN 1
22951: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22952: LD_EXP 59
22956: PUSH
22957: LD_EXP 107
22961: AND
22962: IFFALSE 23074
22964: GO 22966
22966: DISABLE
22967: LD_INT 0
22969: PPUSH
22970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22971: LD_ADDR_VAR 0 2
22975: PUSH
22976: LD_INT 22
22978: PUSH
22979: LD_OWVAR 2
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 2
22990: PUSH
22991: LD_INT 30
22993: PUSH
22994: LD_INT 27
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 30
23003: PUSH
23004: LD_INT 26
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 30
23013: PUSH
23014: LD_INT 28
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PPUSH
23031: CALL_OW 69
23035: ST_TO_ADDR
// if not tmp then
23036: LD_VAR 0 2
23040: NOT
23041: IFFALSE 23045
// exit ;
23043: GO 23074
// for i in tmp do
23045: LD_ADDR_VAR 0 1
23049: PUSH
23050: LD_VAR 0 2
23054: PUSH
23055: FOR_IN
23056: IFFALSE 23072
// SetLives ( i , 1 ) ;
23058: LD_VAR 0 1
23062: PPUSH
23063: LD_INT 1
23065: PPUSH
23066: CALL_OW 234
23070: GO 23055
23072: POP
23073: POP
// end ;
23074: PPOPN 2
23076: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23077: LD_EXP 59
23081: PUSH
23082: LD_EXP 108
23086: AND
23087: IFFALSE 23361
23089: GO 23091
23091: DISABLE
23092: LD_INT 0
23094: PPUSH
23095: PPUSH
23096: PPUSH
// begin i := rand ( 1 , 7 ) ;
23097: LD_ADDR_VAR 0 1
23101: PUSH
23102: LD_INT 1
23104: PPUSH
23105: LD_INT 7
23107: PPUSH
23108: CALL_OW 12
23112: ST_TO_ADDR
// case i of 1 :
23113: LD_VAR 0 1
23117: PUSH
23118: LD_INT 1
23120: DOUBLE
23121: EQUAL
23122: IFTRUE 23126
23124: GO 23136
23126: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23127: LD_STRING earthquake(getX(game), 0, 32)
23129: PPUSH
23130: CALL_OW 559
23134: GO 23361
23136: LD_INT 2
23138: DOUBLE
23139: EQUAL
23140: IFTRUE 23144
23142: GO 23158
23144: POP
// begin ToLua ( displayStucuk(); ) ;
23145: LD_STRING displayStucuk();
23147: PPUSH
23148: CALL_OW 559
// ResetFog ;
23152: CALL_OW 335
// end ; 3 :
23156: GO 23361
23158: LD_INT 3
23160: DOUBLE
23161: EQUAL
23162: IFTRUE 23166
23164: GO 23270
23166: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23167: LD_ADDR_VAR 0 2
23171: PUSH
23172: LD_INT 22
23174: PUSH
23175: LD_OWVAR 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 25
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PPUSH
23198: CALL_OW 69
23202: ST_TO_ADDR
// if not tmp then
23203: LD_VAR 0 2
23207: NOT
23208: IFFALSE 23212
// exit ;
23210: GO 23361
// un := tmp [ rand ( 1 , tmp ) ] ;
23212: LD_ADDR_VAR 0 3
23216: PUSH
23217: LD_VAR 0 2
23221: PUSH
23222: LD_INT 1
23224: PPUSH
23225: LD_VAR 0 2
23229: PPUSH
23230: CALL_OW 12
23234: ARRAY
23235: ST_TO_ADDR
// if Crawls ( un ) then
23236: LD_VAR 0 3
23240: PPUSH
23241: CALL_OW 318
23245: IFFALSE 23256
// ComWalk ( un ) ;
23247: LD_VAR 0 3
23251: PPUSH
23252: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23256: LD_VAR 0 3
23260: PPUSH
23261: LD_INT 8
23263: PPUSH
23264: CALL_OW 336
// end ; 4 :
23268: GO 23361
23270: LD_INT 4
23272: DOUBLE
23273: EQUAL
23274: IFTRUE 23278
23276: GO 23339
23278: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23279: LD_ADDR_VAR 0 2
23283: PUSH
23284: LD_INT 22
23286: PUSH
23287: LD_OWVAR 2
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 30
23298: PUSH
23299: LD_INT 29
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PPUSH
23310: CALL_OW 69
23314: ST_TO_ADDR
// if not tmp then
23315: LD_VAR 0 2
23319: NOT
23320: IFFALSE 23324
// exit ;
23322: GO 23361
// DestroyUnit ( tmp [ 1 ] ) ;
23324: LD_VAR 0 2
23328: PUSH
23329: LD_INT 1
23331: ARRAY
23332: PPUSH
23333: CALL_OW 65
// end ; 5 .. 7 :
23337: GO 23361
23339: LD_INT 5
23341: DOUBLE
23342: GREATEREQUAL
23343: IFFALSE 23351
23345: LD_INT 7
23347: DOUBLE
23348: LESSEQUAL
23349: IFTRUE 23353
23351: GO 23360
23353: POP
// StreamSibBomb ; end ;
23354: CALL 19611 0 0
23358: GO 23361
23360: POP
// end ;
23361: PPOPN 3
23363: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23364: LD_EXP 59
23368: PUSH
23369: LD_EXP 109
23373: AND
23374: IFFALSE 23530
23376: GO 23378
23378: DISABLE
23379: LD_INT 0
23381: PPUSH
23382: PPUSH
23383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23384: LD_ADDR_VAR 0 2
23388: PUSH
23389: LD_INT 81
23391: PUSH
23392: LD_OWVAR 2
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 2
23403: PUSH
23404: LD_INT 21
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 21
23416: PUSH
23417: LD_INT 2
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: LIST
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PPUSH
23433: CALL_OW 69
23437: ST_TO_ADDR
// if not tmp then
23438: LD_VAR 0 2
23442: NOT
23443: IFFALSE 23447
// exit ;
23445: GO 23530
// p := 0 ;
23447: LD_ADDR_VAR 0 3
23451: PUSH
23452: LD_INT 0
23454: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23455: LD_INT 35
23457: PPUSH
23458: CALL_OW 67
// p := p + 1 ;
23462: LD_ADDR_VAR 0 3
23466: PUSH
23467: LD_VAR 0 3
23471: PUSH
23472: LD_INT 1
23474: PLUS
23475: ST_TO_ADDR
// for i in tmp do
23476: LD_ADDR_VAR 0 1
23480: PUSH
23481: LD_VAR 0 2
23485: PUSH
23486: FOR_IN
23487: IFFALSE 23518
// if GetLives ( i ) < 1000 then
23489: LD_VAR 0 1
23493: PPUSH
23494: CALL_OW 256
23498: PUSH
23499: LD_INT 1000
23501: LESS
23502: IFFALSE 23516
// SetLives ( i , 1000 ) ;
23504: LD_VAR 0 1
23508: PPUSH
23509: LD_INT 1000
23511: PPUSH
23512: CALL_OW 234
23516: GO 23486
23518: POP
23519: POP
// until p > 20 ;
23520: LD_VAR 0 3
23524: PUSH
23525: LD_INT 20
23527: GREATER
23528: IFFALSE 23455
// end ;
23530: PPOPN 3
23532: END
// every 0 0$1 trigger StreamModeActive and sTime do
23533: LD_EXP 59
23537: PUSH
23538: LD_EXP 110
23542: AND
23543: IFFALSE 23578
23545: GO 23547
23547: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23548: LD_INT 28
23550: PPUSH
23551: LD_OWVAR 2
23555: PPUSH
23556: LD_INT 2
23558: PPUSH
23559: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23563: LD_INT 30
23565: PPUSH
23566: LD_OWVAR 2
23570: PPUSH
23571: LD_INT 2
23573: PPUSH
23574: CALL_OW 322
// end ;
23578: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23579: LD_EXP 59
23583: PUSH
23584: LD_EXP 111
23588: AND
23589: IFFALSE 23710
23591: GO 23593
23593: DISABLE
23594: LD_INT 0
23596: PPUSH
23597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23598: LD_ADDR_VAR 0 2
23602: PUSH
23603: LD_INT 22
23605: PUSH
23606: LD_OWVAR 2
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 21
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 3
23627: PUSH
23628: LD_INT 23
23630: PUSH
23631: LD_INT 0
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: LIST
23646: PPUSH
23647: CALL_OW 69
23651: ST_TO_ADDR
// if not tmp then
23652: LD_VAR 0 2
23656: NOT
23657: IFFALSE 23661
// exit ;
23659: GO 23710
// for i in tmp do
23661: LD_ADDR_VAR 0 1
23665: PUSH
23666: LD_VAR 0 2
23670: PUSH
23671: FOR_IN
23672: IFFALSE 23708
// begin if Crawls ( i ) then
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL_OW 318
23683: IFFALSE 23694
// ComWalk ( i ) ;
23685: LD_VAR 0 1
23689: PPUSH
23690: CALL_OW 138
// SetClass ( i , 2 ) ;
23694: LD_VAR 0 1
23698: PPUSH
23699: LD_INT 2
23701: PPUSH
23702: CALL_OW 336
// end ;
23706: GO 23671
23708: POP
23709: POP
// end ;
23710: PPOPN 2
23712: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23713: LD_EXP 59
23717: PUSH
23718: LD_EXP 112
23722: AND
23723: IFFALSE 24004
23725: GO 23727
23727: DISABLE
23728: LD_INT 0
23730: PPUSH
23731: PPUSH
23732: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23733: LD_OWVAR 2
23737: PPUSH
23738: LD_INT 9
23740: PPUSH
23741: LD_INT 1
23743: PPUSH
23744: LD_INT 1
23746: PPUSH
23747: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23751: LD_INT 9
23753: PPUSH
23754: LD_OWVAR 2
23758: PPUSH
23759: CALL_OW 343
// uc_side := 9 ;
23763: LD_ADDR_OWVAR 20
23767: PUSH
23768: LD_INT 9
23770: ST_TO_ADDR
// uc_nation := 2 ;
23771: LD_ADDR_OWVAR 21
23775: PUSH
23776: LD_INT 2
23778: ST_TO_ADDR
// hc_name := Dark Warrior ;
23779: LD_ADDR_OWVAR 26
23783: PUSH
23784: LD_STRING Dark Warrior
23786: ST_TO_ADDR
// hc_gallery :=  ;
23787: LD_ADDR_OWVAR 33
23791: PUSH
23792: LD_STRING 
23794: ST_TO_ADDR
// hc_noskilllimit := true ;
23795: LD_ADDR_OWVAR 76
23799: PUSH
23800: LD_INT 1
23802: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23803: LD_ADDR_OWVAR 31
23807: PUSH
23808: LD_INT 30
23810: PUSH
23811: LD_INT 30
23813: PUSH
23814: LD_INT 30
23816: PUSH
23817: LD_INT 30
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: ST_TO_ADDR
// un := CreateHuman ;
23826: LD_ADDR_VAR 0 3
23830: PUSH
23831: CALL_OW 44
23835: ST_TO_ADDR
// hc_noskilllimit := false ;
23836: LD_ADDR_OWVAR 76
23840: PUSH
23841: LD_INT 0
23843: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23844: LD_VAR 0 3
23848: PPUSH
23849: LD_INT 1
23851: PPUSH
23852: CALL_OW 51
// p := 0 ;
23856: LD_ADDR_VAR 0 2
23860: PUSH
23861: LD_INT 0
23863: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23864: LD_INT 35
23866: PPUSH
23867: CALL_OW 67
// p := p + 1 ;
23871: LD_ADDR_VAR 0 2
23875: PUSH
23876: LD_VAR 0 2
23880: PUSH
23881: LD_INT 1
23883: PLUS
23884: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23885: LD_VAR 0 3
23889: PPUSH
23890: CALL_OW 256
23894: PUSH
23895: LD_INT 1000
23897: LESS
23898: IFFALSE 23912
// SetLives ( un , 1000 ) ;
23900: LD_VAR 0 3
23904: PPUSH
23905: LD_INT 1000
23907: PPUSH
23908: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23912: LD_VAR 0 3
23916: PPUSH
23917: LD_INT 81
23919: PUSH
23920: LD_OWVAR 2
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 91
23931: PUSH
23932: LD_VAR 0 3
23936: PUSH
23937: LD_INT 30
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: LIST
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PPUSH
23949: CALL_OW 69
23953: PPUSH
23954: LD_VAR 0 3
23958: PPUSH
23959: CALL_OW 74
23963: PPUSH
23964: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23968: LD_VAR 0 2
23972: PUSH
23973: LD_INT 60
23975: GREATER
23976: PUSH
23977: LD_VAR 0 3
23981: PPUSH
23982: CALL_OW 301
23986: OR
23987: IFFALSE 23864
// if un then
23989: LD_VAR 0 3
23993: IFFALSE 24004
// RemoveUnit ( un ) ;
23995: LD_VAR 0 3
23999: PPUSH
24000: CALL_OW 64
// end ;
24004: PPOPN 3
24006: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24007: LD_INT 0
24009: PPUSH
// case cmd of 301 :
24010: LD_VAR 0 1
24014: PUSH
24015: LD_INT 301
24017: DOUBLE
24018: EQUAL
24019: IFTRUE 24023
24021: GO 24055
24023: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24024: LD_VAR 0 6
24028: PPUSH
24029: LD_VAR 0 7
24033: PPUSH
24034: LD_VAR 0 8
24038: PPUSH
24039: LD_VAR 0 4
24043: PPUSH
24044: LD_VAR 0 5
24048: PPUSH
24049: CALL 25256 0 5
24053: GO 24176
24055: LD_INT 302
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24063
24061: GO 24100
24063: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24064: LD_VAR 0 6
24068: PPUSH
24069: LD_VAR 0 7
24073: PPUSH
24074: LD_VAR 0 8
24078: PPUSH
24079: LD_VAR 0 9
24083: PPUSH
24084: LD_VAR 0 4
24088: PPUSH
24089: LD_VAR 0 5
24093: PPUSH
24094: CALL 25347 0 6
24098: GO 24176
24100: LD_INT 303
24102: DOUBLE
24103: EQUAL
24104: IFTRUE 24108
24106: GO 24145
24108: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24109: LD_VAR 0 6
24113: PPUSH
24114: LD_VAR 0 7
24118: PPUSH
24119: LD_VAR 0 8
24123: PPUSH
24124: LD_VAR 0 9
24128: PPUSH
24129: LD_VAR 0 4
24133: PPUSH
24134: LD_VAR 0 5
24138: PPUSH
24139: CALL 24181 0 6
24143: GO 24176
24145: LD_INT 304
24147: DOUBLE
24148: EQUAL
24149: IFTRUE 24153
24151: GO 24175
24153: POP
// hHackTeleport ( unit , x , y ) ; end ;
24154: LD_VAR 0 2
24158: PPUSH
24159: LD_VAR 0 4
24163: PPUSH
24164: LD_VAR 0 5
24168: PPUSH
24169: CALL 25940 0 3
24173: GO 24176
24175: POP
// end ;
24176: LD_VAR 0 12
24180: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24181: LD_INT 0
24183: PPUSH
24184: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24185: LD_VAR 0 1
24189: PUSH
24190: LD_INT 1
24192: LESS
24193: PUSH
24194: LD_VAR 0 1
24198: PUSH
24199: LD_INT 3
24201: GREATER
24202: OR
24203: PUSH
24204: LD_VAR 0 5
24208: PPUSH
24209: LD_VAR 0 6
24213: PPUSH
24214: CALL_OW 428
24218: OR
24219: IFFALSE 24223
// exit ;
24221: GO 24943
// uc_side := your_side ;
24223: LD_ADDR_OWVAR 20
24227: PUSH
24228: LD_OWVAR 2
24232: ST_TO_ADDR
// uc_nation := nation ;
24233: LD_ADDR_OWVAR 21
24237: PUSH
24238: LD_VAR 0 1
24242: ST_TO_ADDR
// bc_level = 1 ;
24243: LD_ADDR_OWVAR 43
24247: PUSH
24248: LD_INT 1
24250: ST_TO_ADDR
// case btype of 1 :
24251: LD_VAR 0 2
24255: PUSH
24256: LD_INT 1
24258: DOUBLE
24259: EQUAL
24260: IFTRUE 24264
24262: GO 24275
24264: POP
// bc_type := b_depot ; 2 :
24265: LD_ADDR_OWVAR 42
24269: PUSH
24270: LD_INT 0
24272: ST_TO_ADDR
24273: GO 24887
24275: LD_INT 2
24277: DOUBLE
24278: EQUAL
24279: IFTRUE 24283
24281: GO 24294
24283: POP
// bc_type := b_warehouse ; 3 :
24284: LD_ADDR_OWVAR 42
24288: PUSH
24289: LD_INT 1
24291: ST_TO_ADDR
24292: GO 24887
24294: LD_INT 3
24296: DOUBLE
24297: EQUAL
24298: IFTRUE 24302
24300: GO 24313
24302: POP
// bc_type := b_lab ; 4 .. 9 :
24303: LD_ADDR_OWVAR 42
24307: PUSH
24308: LD_INT 6
24310: ST_TO_ADDR
24311: GO 24887
24313: LD_INT 4
24315: DOUBLE
24316: GREATEREQUAL
24317: IFFALSE 24325
24319: LD_INT 9
24321: DOUBLE
24322: LESSEQUAL
24323: IFTRUE 24327
24325: GO 24379
24327: POP
// begin bc_type := b_lab_half ;
24328: LD_ADDR_OWVAR 42
24332: PUSH
24333: LD_INT 7
24335: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24336: LD_ADDR_OWVAR 44
24340: PUSH
24341: LD_INT 10
24343: PUSH
24344: LD_INT 11
24346: PUSH
24347: LD_INT 12
24349: PUSH
24350: LD_INT 15
24352: PUSH
24353: LD_INT 14
24355: PUSH
24356: LD_INT 13
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: PUSH
24367: LD_VAR 0 2
24371: PUSH
24372: LD_INT 3
24374: MINUS
24375: ARRAY
24376: ST_TO_ADDR
// end ; 10 .. 13 :
24377: GO 24887
24379: LD_INT 10
24381: DOUBLE
24382: GREATEREQUAL
24383: IFFALSE 24391
24385: LD_INT 13
24387: DOUBLE
24388: LESSEQUAL
24389: IFTRUE 24393
24391: GO 24470
24393: POP
// begin bc_type := b_lab_full ;
24394: LD_ADDR_OWVAR 42
24398: PUSH
24399: LD_INT 8
24401: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24402: LD_ADDR_OWVAR 44
24406: PUSH
24407: LD_INT 10
24409: PUSH
24410: LD_INT 12
24412: PUSH
24413: LD_INT 14
24415: PUSH
24416: LD_INT 13
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: PUSH
24425: LD_VAR 0 2
24429: PUSH
24430: LD_INT 9
24432: MINUS
24433: ARRAY
24434: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24435: LD_ADDR_OWVAR 45
24439: PUSH
24440: LD_INT 11
24442: PUSH
24443: LD_INT 15
24445: PUSH
24446: LD_INT 12
24448: PUSH
24449: LD_INT 15
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: PUSH
24458: LD_VAR 0 2
24462: PUSH
24463: LD_INT 9
24465: MINUS
24466: ARRAY
24467: ST_TO_ADDR
// end ; 14 :
24468: GO 24887
24470: LD_INT 14
24472: DOUBLE
24473: EQUAL
24474: IFTRUE 24478
24476: GO 24489
24478: POP
// bc_type := b_workshop ; 15 :
24479: LD_ADDR_OWVAR 42
24483: PUSH
24484: LD_INT 2
24486: ST_TO_ADDR
24487: GO 24887
24489: LD_INT 15
24491: DOUBLE
24492: EQUAL
24493: IFTRUE 24497
24495: GO 24508
24497: POP
// bc_type := b_factory ; 16 :
24498: LD_ADDR_OWVAR 42
24502: PUSH
24503: LD_INT 3
24505: ST_TO_ADDR
24506: GO 24887
24508: LD_INT 16
24510: DOUBLE
24511: EQUAL
24512: IFTRUE 24516
24514: GO 24527
24516: POP
// bc_type := b_ext_gun ; 17 :
24517: LD_ADDR_OWVAR 42
24521: PUSH
24522: LD_INT 17
24524: ST_TO_ADDR
24525: GO 24887
24527: LD_INT 17
24529: DOUBLE
24530: EQUAL
24531: IFTRUE 24535
24533: GO 24563
24535: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24536: LD_ADDR_OWVAR 42
24540: PUSH
24541: LD_INT 19
24543: PUSH
24544: LD_INT 23
24546: PUSH
24547: LD_INT 19
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: LIST
24554: PUSH
24555: LD_VAR 0 1
24559: ARRAY
24560: ST_TO_ADDR
24561: GO 24887
24563: LD_INT 18
24565: DOUBLE
24566: EQUAL
24567: IFTRUE 24571
24569: GO 24582
24571: POP
// bc_type := b_ext_radar ; 19 :
24572: LD_ADDR_OWVAR 42
24576: PUSH
24577: LD_INT 20
24579: ST_TO_ADDR
24580: GO 24887
24582: LD_INT 19
24584: DOUBLE
24585: EQUAL
24586: IFTRUE 24590
24588: GO 24601
24590: POP
// bc_type := b_ext_radio ; 20 :
24591: LD_ADDR_OWVAR 42
24595: PUSH
24596: LD_INT 22
24598: ST_TO_ADDR
24599: GO 24887
24601: LD_INT 20
24603: DOUBLE
24604: EQUAL
24605: IFTRUE 24609
24607: GO 24620
24609: POP
// bc_type := b_ext_siberium ; 21 :
24610: LD_ADDR_OWVAR 42
24614: PUSH
24615: LD_INT 21
24617: ST_TO_ADDR
24618: GO 24887
24620: LD_INT 21
24622: DOUBLE
24623: EQUAL
24624: IFTRUE 24628
24626: GO 24639
24628: POP
// bc_type := b_ext_computer ; 22 :
24629: LD_ADDR_OWVAR 42
24633: PUSH
24634: LD_INT 24
24636: ST_TO_ADDR
24637: GO 24887
24639: LD_INT 22
24641: DOUBLE
24642: EQUAL
24643: IFTRUE 24647
24645: GO 24658
24647: POP
// bc_type := b_ext_track ; 23 :
24648: LD_ADDR_OWVAR 42
24652: PUSH
24653: LD_INT 16
24655: ST_TO_ADDR
24656: GO 24887
24658: LD_INT 23
24660: DOUBLE
24661: EQUAL
24662: IFTRUE 24666
24664: GO 24677
24666: POP
// bc_type := b_ext_laser ; 24 :
24667: LD_ADDR_OWVAR 42
24671: PUSH
24672: LD_INT 25
24674: ST_TO_ADDR
24675: GO 24887
24677: LD_INT 24
24679: DOUBLE
24680: EQUAL
24681: IFTRUE 24685
24683: GO 24696
24685: POP
// bc_type := b_control_tower ; 25 :
24686: LD_ADDR_OWVAR 42
24690: PUSH
24691: LD_INT 36
24693: ST_TO_ADDR
24694: GO 24887
24696: LD_INT 25
24698: DOUBLE
24699: EQUAL
24700: IFTRUE 24704
24702: GO 24715
24704: POP
// bc_type := b_breastwork ; 26 :
24705: LD_ADDR_OWVAR 42
24709: PUSH
24710: LD_INT 31
24712: ST_TO_ADDR
24713: GO 24887
24715: LD_INT 26
24717: DOUBLE
24718: EQUAL
24719: IFTRUE 24723
24721: GO 24734
24723: POP
// bc_type := b_bunker ; 27 :
24724: LD_ADDR_OWVAR 42
24728: PUSH
24729: LD_INT 32
24731: ST_TO_ADDR
24732: GO 24887
24734: LD_INT 27
24736: DOUBLE
24737: EQUAL
24738: IFTRUE 24742
24740: GO 24753
24742: POP
// bc_type := b_turret ; 28 :
24743: LD_ADDR_OWVAR 42
24747: PUSH
24748: LD_INT 33
24750: ST_TO_ADDR
24751: GO 24887
24753: LD_INT 28
24755: DOUBLE
24756: EQUAL
24757: IFTRUE 24761
24759: GO 24772
24761: POP
// bc_type := b_armoury ; 29 :
24762: LD_ADDR_OWVAR 42
24766: PUSH
24767: LD_INT 4
24769: ST_TO_ADDR
24770: GO 24887
24772: LD_INT 29
24774: DOUBLE
24775: EQUAL
24776: IFTRUE 24780
24778: GO 24791
24780: POP
// bc_type := b_barracks ; 30 :
24781: LD_ADDR_OWVAR 42
24785: PUSH
24786: LD_INT 5
24788: ST_TO_ADDR
24789: GO 24887
24791: LD_INT 30
24793: DOUBLE
24794: EQUAL
24795: IFTRUE 24799
24797: GO 24810
24799: POP
// bc_type := b_solar_power ; 31 :
24800: LD_ADDR_OWVAR 42
24804: PUSH
24805: LD_INT 27
24807: ST_TO_ADDR
24808: GO 24887
24810: LD_INT 31
24812: DOUBLE
24813: EQUAL
24814: IFTRUE 24818
24816: GO 24829
24818: POP
// bc_type := b_oil_power ; 32 :
24819: LD_ADDR_OWVAR 42
24823: PUSH
24824: LD_INT 26
24826: ST_TO_ADDR
24827: GO 24887
24829: LD_INT 32
24831: DOUBLE
24832: EQUAL
24833: IFTRUE 24837
24835: GO 24848
24837: POP
// bc_type := b_siberite_power ; 33 :
24838: LD_ADDR_OWVAR 42
24842: PUSH
24843: LD_INT 28
24845: ST_TO_ADDR
24846: GO 24887
24848: LD_INT 33
24850: DOUBLE
24851: EQUAL
24852: IFTRUE 24856
24854: GO 24867
24856: POP
// bc_type := b_oil_mine ; 34 :
24857: LD_ADDR_OWVAR 42
24861: PUSH
24862: LD_INT 29
24864: ST_TO_ADDR
24865: GO 24887
24867: LD_INT 34
24869: DOUBLE
24870: EQUAL
24871: IFTRUE 24875
24873: GO 24886
24875: POP
// bc_type := b_siberite_mine ; end ;
24876: LD_ADDR_OWVAR 42
24880: PUSH
24881: LD_INT 30
24883: ST_TO_ADDR
24884: GO 24887
24886: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24887: LD_ADDR_VAR 0 8
24891: PUSH
24892: LD_VAR 0 5
24896: PPUSH
24897: LD_VAR 0 6
24901: PPUSH
24902: LD_VAR 0 3
24906: PPUSH
24907: CALL_OW 47
24911: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24912: LD_OWVAR 42
24916: PUSH
24917: LD_INT 32
24919: PUSH
24920: LD_INT 33
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: IN
24927: IFFALSE 24943
// PlaceWeaponTurret ( b , weapon ) ;
24929: LD_VAR 0 8
24933: PPUSH
24934: LD_VAR 0 4
24938: PPUSH
24939: CALL_OW 431
// end ;
24943: LD_VAR 0 7
24947: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24948: LD_INT 0
24950: PPUSH
24951: PPUSH
24952: PPUSH
24953: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24954: LD_ADDR_VAR 0 4
24958: PUSH
24959: LD_INT 22
24961: PUSH
24962: LD_OWVAR 2
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 2
24973: PUSH
24974: LD_INT 30
24976: PUSH
24977: LD_INT 0
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 30
24986: PUSH
24987: LD_INT 1
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: LIST
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PPUSH
25003: CALL_OW 69
25007: ST_TO_ADDR
// if not tmp then
25008: LD_VAR 0 4
25012: NOT
25013: IFFALSE 25017
// exit ;
25015: GO 25076
// for i in tmp do
25017: LD_ADDR_VAR 0 2
25021: PUSH
25022: LD_VAR 0 4
25026: PUSH
25027: FOR_IN
25028: IFFALSE 25074
// for j = 1 to 3 do
25030: LD_ADDR_VAR 0 3
25034: PUSH
25035: DOUBLE
25036: LD_INT 1
25038: DEC
25039: ST_TO_ADDR
25040: LD_INT 3
25042: PUSH
25043: FOR_TO
25044: IFFALSE 25070
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25046: LD_VAR 0 2
25050: PPUSH
25051: CALL_OW 274
25055: PPUSH
25056: LD_VAR 0 3
25060: PPUSH
25061: LD_INT 99999
25063: PPUSH
25064: CALL_OW 277
25068: GO 25043
25070: POP
25071: POP
25072: GO 25027
25074: POP
25075: POP
// end ;
25076: LD_VAR 0 1
25080: RET
// export function hHackSetLevel10 ; var i , j ; begin
25081: LD_INT 0
25083: PPUSH
25084: PPUSH
25085: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25086: LD_ADDR_VAR 0 2
25090: PUSH
25091: LD_INT 21
25093: PUSH
25094: LD_INT 1
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PPUSH
25101: CALL_OW 69
25105: PUSH
25106: FOR_IN
25107: IFFALSE 25159
// if IsSelected ( i ) then
25109: LD_VAR 0 2
25113: PPUSH
25114: CALL_OW 306
25118: IFFALSE 25157
// begin for j := 1 to 4 do
25120: LD_ADDR_VAR 0 3
25124: PUSH
25125: DOUBLE
25126: LD_INT 1
25128: DEC
25129: ST_TO_ADDR
25130: LD_INT 4
25132: PUSH
25133: FOR_TO
25134: IFFALSE 25155
// SetSkill ( i , j , 10 ) ;
25136: LD_VAR 0 2
25140: PPUSH
25141: LD_VAR 0 3
25145: PPUSH
25146: LD_INT 10
25148: PPUSH
25149: CALL_OW 237
25153: GO 25133
25155: POP
25156: POP
// end ;
25157: GO 25106
25159: POP
25160: POP
// end ;
25161: LD_VAR 0 1
25165: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25166: LD_INT 0
25168: PPUSH
25169: PPUSH
25170: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25171: LD_ADDR_VAR 0 2
25175: PUSH
25176: LD_INT 22
25178: PUSH
25179: LD_OWVAR 2
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 21
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 69
25206: PUSH
25207: FOR_IN
25208: IFFALSE 25249
// begin for j := 1 to 4 do
25210: LD_ADDR_VAR 0 3
25214: PUSH
25215: DOUBLE
25216: LD_INT 1
25218: DEC
25219: ST_TO_ADDR
25220: LD_INT 4
25222: PUSH
25223: FOR_TO
25224: IFFALSE 25245
// SetSkill ( i , j , 10 ) ;
25226: LD_VAR 0 2
25230: PPUSH
25231: LD_VAR 0 3
25235: PPUSH
25236: LD_INT 10
25238: PPUSH
25239: CALL_OW 237
25243: GO 25223
25245: POP
25246: POP
// end ;
25247: GO 25207
25249: POP
25250: POP
// end ;
25251: LD_VAR 0 1
25255: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25256: LD_INT 0
25258: PPUSH
// uc_side := your_side ;
25259: LD_ADDR_OWVAR 20
25263: PUSH
25264: LD_OWVAR 2
25268: ST_TO_ADDR
// uc_nation := nation ;
25269: LD_ADDR_OWVAR 21
25273: PUSH
25274: LD_VAR 0 1
25278: ST_TO_ADDR
// InitHc ;
25279: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25283: LD_INT 0
25285: PPUSH
25286: LD_VAR 0 2
25290: PPUSH
25291: LD_VAR 0 3
25295: PPUSH
25296: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25300: LD_VAR 0 4
25304: PPUSH
25305: LD_VAR 0 5
25309: PPUSH
25310: CALL_OW 428
25314: PUSH
25315: LD_INT 0
25317: EQUAL
25318: IFFALSE 25342
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25320: CALL_OW 44
25324: PPUSH
25325: LD_VAR 0 4
25329: PPUSH
25330: LD_VAR 0 5
25334: PPUSH
25335: LD_INT 1
25337: PPUSH
25338: CALL_OW 48
// end ;
25342: LD_VAR 0 6
25346: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25347: LD_INT 0
25349: PPUSH
25350: PPUSH
// uc_side := your_side ;
25351: LD_ADDR_OWVAR 20
25355: PUSH
25356: LD_OWVAR 2
25360: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25361: LD_VAR 0 1
25365: PUSH
25366: LD_INT 1
25368: PUSH
25369: LD_INT 2
25371: PUSH
25372: LD_INT 3
25374: PUSH
25375: LD_INT 4
25377: PUSH
25378: LD_INT 5
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: IN
25388: IFFALSE 25400
// uc_nation := nation_american else
25390: LD_ADDR_OWVAR 21
25394: PUSH
25395: LD_INT 1
25397: ST_TO_ADDR
25398: GO 25443
// if chassis in [ 11 , 12 , 13 , 14 ] then
25400: LD_VAR 0 1
25404: PUSH
25405: LD_INT 11
25407: PUSH
25408: LD_INT 12
25410: PUSH
25411: LD_INT 13
25413: PUSH
25414: LD_INT 14
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: IN
25423: IFFALSE 25435
// uc_nation := nation_arabian else
25425: LD_ADDR_OWVAR 21
25429: PUSH
25430: LD_INT 2
25432: ST_TO_ADDR
25433: GO 25443
// uc_nation := nation_russian ;
25435: LD_ADDR_OWVAR 21
25439: PUSH
25440: LD_INT 3
25442: ST_TO_ADDR
// vc_chassis := chassis ;
25443: LD_ADDR_OWVAR 37
25447: PUSH
25448: LD_VAR 0 1
25452: ST_TO_ADDR
// vc_engine := engine ;
25453: LD_ADDR_OWVAR 39
25457: PUSH
25458: LD_VAR 0 2
25462: ST_TO_ADDR
// vc_control := control ;
25463: LD_ADDR_OWVAR 38
25467: PUSH
25468: LD_VAR 0 3
25472: ST_TO_ADDR
// vc_weapon := weapon ;
25473: LD_ADDR_OWVAR 40
25477: PUSH
25478: LD_VAR 0 4
25482: ST_TO_ADDR
// un := CreateVehicle ;
25483: LD_ADDR_VAR 0 8
25487: PUSH
25488: CALL_OW 45
25492: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25493: LD_VAR 0 8
25497: PPUSH
25498: LD_INT 0
25500: PPUSH
25501: LD_INT 5
25503: PPUSH
25504: CALL_OW 12
25508: PPUSH
25509: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25513: LD_VAR 0 8
25517: PPUSH
25518: LD_VAR 0 5
25522: PPUSH
25523: LD_VAR 0 6
25527: PPUSH
25528: LD_INT 1
25530: PPUSH
25531: CALL_OW 48
// end ;
25535: LD_VAR 0 7
25539: RET
// export hInvincible ; every 1 do
25540: GO 25542
25542: DISABLE
// hInvincible := [ ] ;
25543: LD_ADDR_EXP 113
25547: PUSH
25548: EMPTY
25549: ST_TO_ADDR
25550: END
// every 10 do var i ;
25551: GO 25553
25553: DISABLE
25554: LD_INT 0
25556: PPUSH
// begin enable ;
25557: ENABLE
// if not hInvincible then
25558: LD_EXP 113
25562: NOT
25563: IFFALSE 25567
// exit ;
25565: GO 25611
// for i in hInvincible do
25567: LD_ADDR_VAR 0 1
25571: PUSH
25572: LD_EXP 113
25576: PUSH
25577: FOR_IN
25578: IFFALSE 25609
// if GetLives ( i ) < 1000 then
25580: LD_VAR 0 1
25584: PPUSH
25585: CALL_OW 256
25589: PUSH
25590: LD_INT 1000
25592: LESS
25593: IFFALSE 25607
// SetLives ( i , 1000 ) ;
25595: LD_VAR 0 1
25599: PPUSH
25600: LD_INT 1000
25602: PPUSH
25603: CALL_OW 234
25607: GO 25577
25609: POP
25610: POP
// end ;
25611: PPOPN 1
25613: END
// export function hHackInvincible ; var i ; begin
25614: LD_INT 0
25616: PPUSH
25617: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25618: LD_ADDR_VAR 0 2
25622: PUSH
25623: LD_INT 2
25625: PUSH
25626: LD_INT 21
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 21
25638: PUSH
25639: LD_INT 2
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: LIST
25650: PPUSH
25651: CALL_OW 69
25655: PUSH
25656: FOR_IN
25657: IFFALSE 25718
// if IsSelected ( i ) then
25659: LD_VAR 0 2
25663: PPUSH
25664: CALL_OW 306
25668: IFFALSE 25716
// begin if i in hInvincible then
25670: LD_VAR 0 2
25674: PUSH
25675: LD_EXP 113
25679: IN
25680: IFFALSE 25700
// hInvincible := hInvincible diff i else
25682: LD_ADDR_EXP 113
25686: PUSH
25687: LD_EXP 113
25691: PUSH
25692: LD_VAR 0 2
25696: DIFF
25697: ST_TO_ADDR
25698: GO 25716
// hInvincible := hInvincible union i ;
25700: LD_ADDR_EXP 113
25704: PUSH
25705: LD_EXP 113
25709: PUSH
25710: LD_VAR 0 2
25714: UNION
25715: ST_TO_ADDR
// end ;
25716: GO 25656
25718: POP
25719: POP
// end ;
25720: LD_VAR 0 1
25724: RET
// export function hHackInvisible ; var i , j ; begin
25725: LD_INT 0
25727: PPUSH
25728: PPUSH
25729: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25730: LD_ADDR_VAR 0 2
25734: PUSH
25735: LD_INT 21
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PPUSH
25745: CALL_OW 69
25749: PUSH
25750: FOR_IN
25751: IFFALSE 25775
// if IsSelected ( i ) then
25753: LD_VAR 0 2
25757: PPUSH
25758: CALL_OW 306
25762: IFFALSE 25773
// ComForceInvisible ( i ) ;
25764: LD_VAR 0 2
25768: PPUSH
25769: CALL_OW 496
25773: GO 25750
25775: POP
25776: POP
// end ;
25777: LD_VAR 0 1
25781: RET
// export function hHackChangeYourSide ; begin
25782: LD_INT 0
25784: PPUSH
// if your_side = 8 then
25785: LD_OWVAR 2
25789: PUSH
25790: LD_INT 8
25792: EQUAL
25793: IFFALSE 25805
// your_side := 0 else
25795: LD_ADDR_OWVAR 2
25799: PUSH
25800: LD_INT 0
25802: ST_TO_ADDR
25803: GO 25819
// your_side := your_side + 1 ;
25805: LD_ADDR_OWVAR 2
25809: PUSH
25810: LD_OWVAR 2
25814: PUSH
25815: LD_INT 1
25817: PLUS
25818: ST_TO_ADDR
// end ;
25819: LD_VAR 0 1
25823: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25824: LD_INT 0
25826: PPUSH
25827: PPUSH
25828: PPUSH
// for i in all_units do
25829: LD_ADDR_VAR 0 2
25833: PUSH
25834: LD_OWVAR 3
25838: PUSH
25839: FOR_IN
25840: IFFALSE 25918
// if IsSelected ( i ) then
25842: LD_VAR 0 2
25846: PPUSH
25847: CALL_OW 306
25851: IFFALSE 25916
// begin j := GetSide ( i ) ;
25853: LD_ADDR_VAR 0 3
25857: PUSH
25858: LD_VAR 0 2
25862: PPUSH
25863: CALL_OW 255
25867: ST_TO_ADDR
// if j = 8 then
25868: LD_VAR 0 3
25872: PUSH
25873: LD_INT 8
25875: EQUAL
25876: IFFALSE 25888
// j := 0 else
25878: LD_ADDR_VAR 0 3
25882: PUSH
25883: LD_INT 0
25885: ST_TO_ADDR
25886: GO 25902
// j := j + 1 ;
25888: LD_ADDR_VAR 0 3
25892: PUSH
25893: LD_VAR 0 3
25897: PUSH
25898: LD_INT 1
25900: PLUS
25901: ST_TO_ADDR
// SetSide ( i , j ) ;
25902: LD_VAR 0 2
25906: PPUSH
25907: LD_VAR 0 3
25911: PPUSH
25912: CALL_OW 235
// end ;
25916: GO 25839
25918: POP
25919: POP
// end ;
25920: LD_VAR 0 1
25924: RET
// export function hHackFog ; begin
25925: LD_INT 0
25927: PPUSH
// FogOff ( true ) ;
25928: LD_INT 1
25930: PPUSH
25931: CALL_OW 344
// end ;
25935: LD_VAR 0 1
25939: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25940: LD_INT 0
25942: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25943: LD_VAR 0 1
25947: PPUSH
25948: LD_VAR 0 2
25952: PPUSH
25953: LD_VAR 0 3
25957: PPUSH
25958: LD_INT 1
25960: PPUSH
25961: LD_INT 1
25963: PPUSH
25964: CALL_OW 483
// CenterOnXY ( x , y ) ;
25968: LD_VAR 0 2
25972: PPUSH
25973: LD_VAR 0 3
25977: PPUSH
25978: CALL_OW 84
// end ; end_of_file
25982: LD_VAR 0 4
25986: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25987: LD_INT 0
25989: PPUSH
25990: PPUSH
25991: PPUSH
25992: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25993: LD_VAR 0 1
25997: PPUSH
25998: CALL_OW 264
26002: PUSH
26003: LD_EXP 47
26007: EQUAL
26008: IFFALSE 26080
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26010: LD_INT 68
26012: PPUSH
26013: LD_VAR 0 1
26017: PPUSH
26018: CALL_OW 255
26022: PPUSH
26023: CALL_OW 321
26027: PUSH
26028: LD_INT 2
26030: EQUAL
26031: IFFALSE 26043
// eff := 70 else
26033: LD_ADDR_VAR 0 4
26037: PUSH
26038: LD_INT 70
26040: ST_TO_ADDR
26041: GO 26051
// eff := 30 ;
26043: LD_ADDR_VAR 0 4
26047: PUSH
26048: LD_INT 30
26050: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26051: LD_VAR 0 1
26055: PPUSH
26056: CALL_OW 250
26060: PPUSH
26061: LD_VAR 0 1
26065: PPUSH
26066: CALL_OW 251
26070: PPUSH
26071: LD_VAR 0 4
26075: PPUSH
26076: CALL_OW 495
// end ; end ;
26080: LD_VAR 0 2
26084: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26085: LD_INT 0
26087: PPUSH
// end ;
26088: LD_VAR 0 4
26092: RET
// export function SOS_Command ( cmd ) ; begin
26093: LD_INT 0
26095: PPUSH
// end ;
26096: LD_VAR 0 2
26100: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26101: LD_INT 0
26103: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26104: LD_VAR 0 1
26108: PUSH
26109: LD_INT 250
26111: EQUAL
26112: PUSH
26113: LD_VAR 0 2
26117: PPUSH
26118: CALL_OW 264
26122: PUSH
26123: LD_EXP 50
26127: EQUAL
26128: AND
26129: IFFALSE 26150
// MinerPlaceMine ( unit , x , y ) ;
26131: LD_VAR 0 2
26135: PPUSH
26136: LD_VAR 0 4
26140: PPUSH
26141: LD_VAR 0 5
26145: PPUSH
26146: CALL 28491 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26150: LD_VAR 0 1
26154: PUSH
26155: LD_INT 251
26157: EQUAL
26158: PUSH
26159: LD_VAR 0 2
26163: PPUSH
26164: CALL_OW 264
26168: PUSH
26169: LD_EXP 50
26173: EQUAL
26174: AND
26175: IFFALSE 26196
// MinerDetonateMine ( unit , x , y ) ;
26177: LD_VAR 0 2
26181: PPUSH
26182: LD_VAR 0 4
26186: PPUSH
26187: LD_VAR 0 5
26191: PPUSH
26192: CALL 28768 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26196: LD_VAR 0 1
26200: PUSH
26201: LD_INT 252
26203: EQUAL
26204: PUSH
26205: LD_VAR 0 2
26209: PPUSH
26210: CALL_OW 264
26214: PUSH
26215: LD_EXP 50
26219: EQUAL
26220: AND
26221: IFFALSE 26242
// MinerCreateMinefield ( unit , x , y ) ;
26223: LD_VAR 0 2
26227: PPUSH
26228: LD_VAR 0 4
26232: PPUSH
26233: LD_VAR 0 5
26237: PPUSH
26238: CALL 29185 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26242: LD_VAR 0 1
26246: PUSH
26247: LD_INT 253
26249: EQUAL
26250: PUSH
26251: LD_VAR 0 2
26255: PPUSH
26256: CALL_OW 257
26260: PUSH
26261: LD_INT 5
26263: EQUAL
26264: AND
26265: IFFALSE 26286
// ComBinocular ( unit , x , y ) ;
26267: LD_VAR 0 2
26271: PPUSH
26272: LD_VAR 0 4
26276: PPUSH
26277: LD_VAR 0 5
26281: PPUSH
26282: CALL 29556 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26286: LD_VAR 0 1
26290: PUSH
26291: LD_INT 254
26293: EQUAL
26294: PUSH
26295: LD_VAR 0 2
26299: PPUSH
26300: CALL_OW 264
26304: PUSH
26305: LD_EXP 45
26309: EQUAL
26310: AND
26311: PUSH
26312: LD_VAR 0 3
26316: PPUSH
26317: CALL_OW 263
26321: PUSH
26322: LD_INT 3
26324: EQUAL
26325: AND
26326: IFFALSE 26342
// HackDestroyVehicle ( unit , selectedUnit ) ;
26328: LD_VAR 0 2
26332: PPUSH
26333: LD_VAR 0 3
26337: PPUSH
26338: CALL 27851 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26342: LD_VAR 0 1
26346: PUSH
26347: LD_INT 255
26349: EQUAL
26350: PUSH
26351: LD_VAR 0 2
26355: PPUSH
26356: CALL_OW 264
26360: PUSH
26361: LD_INT 14
26363: PUSH
26364: LD_INT 53
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: IN
26371: AND
26372: PUSH
26373: LD_VAR 0 4
26377: PPUSH
26378: LD_VAR 0 5
26382: PPUSH
26383: CALL_OW 488
26387: AND
26388: IFFALSE 26412
// CutTreeXYR ( unit , x , y , 12 ) ;
26390: LD_VAR 0 2
26394: PPUSH
26395: LD_VAR 0 4
26399: PPUSH
26400: LD_VAR 0 5
26404: PPUSH
26405: LD_INT 12
26407: PPUSH
26408: CALL 26417 0 4
// end ;
26412: LD_VAR 0 6
26416: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26417: LD_INT 0
26419: PPUSH
26420: PPUSH
26421: PPUSH
26422: PPUSH
26423: PPUSH
26424: PPUSH
26425: PPUSH
26426: PPUSH
26427: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26428: LD_VAR 0 1
26432: NOT
26433: PUSH
26434: LD_VAR 0 2
26438: PPUSH
26439: LD_VAR 0 3
26443: PPUSH
26444: CALL_OW 488
26448: NOT
26449: OR
26450: PUSH
26451: LD_VAR 0 4
26455: NOT
26456: OR
26457: IFFALSE 26461
// exit ;
26459: GO 26801
// list := [ ] ;
26461: LD_ADDR_VAR 0 13
26465: PUSH
26466: EMPTY
26467: ST_TO_ADDR
// if x - r < 0 then
26468: LD_VAR 0 2
26472: PUSH
26473: LD_VAR 0 4
26477: MINUS
26478: PUSH
26479: LD_INT 0
26481: LESS
26482: IFFALSE 26494
// min_x := 0 else
26484: LD_ADDR_VAR 0 7
26488: PUSH
26489: LD_INT 0
26491: ST_TO_ADDR
26492: GO 26510
// min_x := x - r ;
26494: LD_ADDR_VAR 0 7
26498: PUSH
26499: LD_VAR 0 2
26503: PUSH
26504: LD_VAR 0 4
26508: MINUS
26509: ST_TO_ADDR
// if y - r < 0 then
26510: LD_VAR 0 3
26514: PUSH
26515: LD_VAR 0 4
26519: MINUS
26520: PUSH
26521: LD_INT 0
26523: LESS
26524: IFFALSE 26536
// min_y := 0 else
26526: LD_ADDR_VAR 0 8
26530: PUSH
26531: LD_INT 0
26533: ST_TO_ADDR
26534: GO 26552
// min_y := y - r ;
26536: LD_ADDR_VAR 0 8
26540: PUSH
26541: LD_VAR 0 3
26545: PUSH
26546: LD_VAR 0 4
26550: MINUS
26551: ST_TO_ADDR
// max_x := x + r ;
26552: LD_ADDR_VAR 0 9
26556: PUSH
26557: LD_VAR 0 2
26561: PUSH
26562: LD_VAR 0 4
26566: PLUS
26567: ST_TO_ADDR
// max_y := y + r ;
26568: LD_ADDR_VAR 0 10
26572: PUSH
26573: LD_VAR 0 3
26577: PUSH
26578: LD_VAR 0 4
26582: PLUS
26583: ST_TO_ADDR
// for _x = min_x to max_x do
26584: LD_ADDR_VAR 0 11
26588: PUSH
26589: DOUBLE
26590: LD_VAR 0 7
26594: DEC
26595: ST_TO_ADDR
26596: LD_VAR 0 9
26600: PUSH
26601: FOR_TO
26602: IFFALSE 26719
// for _y = min_y to max_y do
26604: LD_ADDR_VAR 0 12
26608: PUSH
26609: DOUBLE
26610: LD_VAR 0 8
26614: DEC
26615: ST_TO_ADDR
26616: LD_VAR 0 10
26620: PUSH
26621: FOR_TO
26622: IFFALSE 26715
// begin if not ValidHex ( _x , _y ) then
26624: LD_VAR 0 11
26628: PPUSH
26629: LD_VAR 0 12
26633: PPUSH
26634: CALL_OW 488
26638: NOT
26639: IFFALSE 26643
// continue ;
26641: GO 26621
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26643: LD_VAR 0 11
26647: PPUSH
26648: LD_VAR 0 12
26652: PPUSH
26653: CALL_OW 351
26657: PUSH
26658: LD_VAR 0 11
26662: PPUSH
26663: LD_VAR 0 12
26667: PPUSH
26668: CALL_OW 554
26672: AND
26673: IFFALSE 26713
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26675: LD_ADDR_VAR 0 13
26679: PUSH
26680: LD_VAR 0 13
26684: PPUSH
26685: LD_VAR 0 13
26689: PUSH
26690: LD_INT 1
26692: PLUS
26693: PPUSH
26694: LD_VAR 0 11
26698: PUSH
26699: LD_VAR 0 12
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PPUSH
26708: CALL_OW 2
26712: ST_TO_ADDR
// end ;
26713: GO 26621
26715: POP
26716: POP
26717: GO 26601
26719: POP
26720: POP
// if not list then
26721: LD_VAR 0 13
26725: NOT
26726: IFFALSE 26730
// exit ;
26728: GO 26801
// for i in list do
26730: LD_ADDR_VAR 0 6
26734: PUSH
26735: LD_VAR 0 13
26739: PUSH
26740: FOR_IN
26741: IFFALSE 26799
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26743: LD_VAR 0 1
26747: PPUSH
26748: LD_STRING M
26750: PUSH
26751: LD_VAR 0 6
26755: PUSH
26756: LD_INT 1
26758: ARRAY
26759: PUSH
26760: LD_VAR 0 6
26764: PUSH
26765: LD_INT 2
26767: ARRAY
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: LD_INT 0
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: PUSH
26790: EMPTY
26791: LIST
26792: PPUSH
26793: CALL_OW 447
26797: GO 26740
26799: POP
26800: POP
// end ;
26801: LD_VAR 0 5
26805: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26806: LD_EXP 114
26810: NOT
26811: IFFALSE 26861
26813: GO 26815
26815: DISABLE
// begin initHack := true ;
26816: LD_ADDR_EXP 114
26820: PUSH
26821: LD_INT 1
26823: ST_TO_ADDR
// hackTanks := [ ] ;
26824: LD_ADDR_EXP 115
26828: PUSH
26829: EMPTY
26830: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26831: LD_ADDR_EXP 116
26835: PUSH
26836: EMPTY
26837: ST_TO_ADDR
// hackLimit := 3 ;
26838: LD_ADDR_EXP 117
26842: PUSH
26843: LD_INT 3
26845: ST_TO_ADDR
// hackDist := 12 ;
26846: LD_ADDR_EXP 118
26850: PUSH
26851: LD_INT 12
26853: ST_TO_ADDR
// hackCounter := [ ] ;
26854: LD_ADDR_EXP 119
26858: PUSH
26859: EMPTY
26860: ST_TO_ADDR
// end ;
26861: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26862: LD_EXP 114
26866: PUSH
26867: LD_INT 34
26869: PUSH
26870: LD_EXP 45
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PPUSH
26879: CALL_OW 69
26883: AND
26884: IFFALSE 27139
26886: GO 26888
26888: DISABLE
26889: LD_INT 0
26891: PPUSH
26892: PPUSH
// begin enable ;
26893: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26894: LD_ADDR_VAR 0 1
26898: PUSH
26899: LD_INT 34
26901: PUSH
26902: LD_EXP 45
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PPUSH
26911: CALL_OW 69
26915: PUSH
26916: FOR_IN
26917: IFFALSE 27137
// begin if not i in hackTanks then
26919: LD_VAR 0 1
26923: PUSH
26924: LD_EXP 115
26928: IN
26929: NOT
26930: IFFALSE 27013
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26932: LD_ADDR_EXP 115
26936: PUSH
26937: LD_EXP 115
26941: PPUSH
26942: LD_EXP 115
26946: PUSH
26947: LD_INT 1
26949: PLUS
26950: PPUSH
26951: LD_VAR 0 1
26955: PPUSH
26956: CALL_OW 1
26960: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26961: LD_ADDR_EXP 116
26965: PUSH
26966: LD_EXP 116
26970: PPUSH
26971: LD_EXP 116
26975: PUSH
26976: LD_INT 1
26978: PLUS
26979: PPUSH
26980: EMPTY
26981: PPUSH
26982: CALL_OW 1
26986: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26987: LD_ADDR_EXP 119
26991: PUSH
26992: LD_EXP 119
26996: PPUSH
26997: LD_EXP 119
27001: PUSH
27002: LD_INT 1
27004: PLUS
27005: PPUSH
27006: EMPTY
27007: PPUSH
27008: CALL_OW 1
27012: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27013: LD_VAR 0 1
27017: PPUSH
27018: CALL_OW 302
27022: NOT
27023: IFFALSE 27036
// begin HackUnlinkAll ( i ) ;
27025: LD_VAR 0 1
27029: PPUSH
27030: CALL 27142 0 1
// continue ;
27034: GO 26916
// end ; HackCheckCapturedStatus ( i ) ;
27036: LD_VAR 0 1
27040: PPUSH
27041: CALL 27585 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27045: LD_ADDR_VAR 0 2
27049: PUSH
27050: LD_INT 81
27052: PUSH
27053: LD_VAR 0 1
27057: PPUSH
27058: CALL_OW 255
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 33
27069: PUSH
27070: LD_INT 3
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 91
27079: PUSH
27080: LD_VAR 0 1
27084: PUSH
27085: LD_EXP 118
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 50
27097: PUSH
27098: EMPTY
27099: LIST
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: PPUSH
27107: CALL_OW 69
27111: ST_TO_ADDR
// if not tmp then
27112: LD_VAR 0 2
27116: NOT
27117: IFFALSE 27121
// continue ;
27119: GO 26916
// HackLink ( i , tmp ) ;
27121: LD_VAR 0 1
27125: PPUSH
27126: LD_VAR 0 2
27130: PPUSH
27131: CALL 27278 0 2
// end ;
27135: GO 26916
27137: POP
27138: POP
// end ;
27139: PPOPN 2
27141: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27142: LD_INT 0
27144: PPUSH
27145: PPUSH
27146: PPUSH
// if not hack in hackTanks then
27147: LD_VAR 0 1
27151: PUSH
27152: LD_EXP 115
27156: IN
27157: NOT
27158: IFFALSE 27162
// exit ;
27160: GO 27273
// index := GetElementIndex ( hackTanks , hack ) ;
27162: LD_ADDR_VAR 0 4
27166: PUSH
27167: LD_EXP 115
27171: PPUSH
27172: LD_VAR 0 1
27176: PPUSH
27177: CALL 34707 0 2
27181: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27182: LD_EXP 116
27186: PUSH
27187: LD_VAR 0 4
27191: ARRAY
27192: IFFALSE 27273
// begin for i in hackTanksCaptured [ index ] do
27194: LD_ADDR_VAR 0 3
27198: PUSH
27199: LD_EXP 116
27203: PUSH
27204: LD_VAR 0 4
27208: ARRAY
27209: PUSH
27210: FOR_IN
27211: IFFALSE 27237
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27213: LD_VAR 0 3
27217: PUSH
27218: LD_INT 1
27220: ARRAY
27221: PPUSH
27222: LD_VAR 0 3
27226: PUSH
27227: LD_INT 2
27229: ARRAY
27230: PPUSH
27231: CALL_OW 235
27235: GO 27210
27237: POP
27238: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27239: LD_ADDR_EXP 116
27243: PUSH
27244: LD_EXP 116
27248: PPUSH
27249: LD_VAR 0 4
27253: PPUSH
27254: EMPTY
27255: PPUSH
27256: CALL_OW 1
27260: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27261: LD_VAR 0 1
27265: PPUSH
27266: LD_INT 0
27268: PPUSH
27269: CALL_OW 505
// end ; end ;
27273: LD_VAR 0 2
27277: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27278: LD_INT 0
27280: PPUSH
27281: PPUSH
27282: PPUSH
// if not hack in hackTanks or not vehicles then
27283: LD_VAR 0 1
27287: PUSH
27288: LD_EXP 115
27292: IN
27293: NOT
27294: PUSH
27295: LD_VAR 0 2
27299: NOT
27300: OR
27301: IFFALSE 27305
// exit ;
27303: GO 27580
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27305: LD_ADDR_VAR 0 2
27309: PUSH
27310: LD_VAR 0 1
27314: PPUSH
27315: LD_VAR 0 2
27319: PPUSH
27320: LD_INT 1
27322: PPUSH
27323: LD_INT 1
27325: PPUSH
27326: CALL 35357 0 4
27330: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27331: LD_ADDR_VAR 0 5
27335: PUSH
27336: LD_EXP 115
27340: PPUSH
27341: LD_VAR 0 1
27345: PPUSH
27346: CALL 34707 0 2
27350: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27351: LD_EXP 116
27355: PUSH
27356: LD_VAR 0 5
27360: ARRAY
27361: PUSH
27362: LD_EXP 117
27366: LESS
27367: IFFALSE 27556
// begin for i := 1 to vehicles do
27369: LD_ADDR_VAR 0 4
27373: PUSH
27374: DOUBLE
27375: LD_INT 1
27377: DEC
27378: ST_TO_ADDR
27379: LD_VAR 0 2
27383: PUSH
27384: FOR_TO
27385: IFFALSE 27554
// begin if hackTanksCaptured [ index ] = hackLimit then
27387: LD_EXP 116
27391: PUSH
27392: LD_VAR 0 5
27396: ARRAY
27397: PUSH
27398: LD_EXP 117
27402: EQUAL
27403: IFFALSE 27407
// break ;
27405: GO 27554
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27407: LD_ADDR_EXP 119
27411: PUSH
27412: LD_EXP 119
27416: PPUSH
27417: LD_VAR 0 5
27421: PPUSH
27422: LD_EXP 119
27426: PUSH
27427: LD_VAR 0 5
27431: ARRAY
27432: PUSH
27433: LD_INT 1
27435: PLUS
27436: PPUSH
27437: CALL_OW 1
27441: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27442: LD_ADDR_EXP 116
27446: PUSH
27447: LD_EXP 116
27451: PPUSH
27452: LD_VAR 0 5
27456: PUSH
27457: LD_EXP 116
27461: PUSH
27462: LD_VAR 0 5
27466: ARRAY
27467: PUSH
27468: LD_INT 1
27470: PLUS
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PPUSH
27476: LD_VAR 0 2
27480: PUSH
27481: LD_VAR 0 4
27485: ARRAY
27486: PUSH
27487: LD_VAR 0 2
27491: PUSH
27492: LD_VAR 0 4
27496: ARRAY
27497: PPUSH
27498: CALL_OW 255
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PPUSH
27507: CALL 34922 0 3
27511: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27512: LD_VAR 0 2
27516: PUSH
27517: LD_VAR 0 4
27521: ARRAY
27522: PPUSH
27523: LD_VAR 0 1
27527: PPUSH
27528: CALL_OW 255
27532: PPUSH
27533: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27537: LD_VAR 0 2
27541: PUSH
27542: LD_VAR 0 4
27546: ARRAY
27547: PPUSH
27548: CALL_OW 141
// end ;
27552: GO 27384
27554: POP
27555: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27556: LD_VAR 0 1
27560: PPUSH
27561: LD_EXP 116
27565: PUSH
27566: LD_VAR 0 5
27570: ARRAY
27571: PUSH
27572: LD_INT 0
27574: PLUS
27575: PPUSH
27576: CALL_OW 505
// end ;
27580: LD_VAR 0 3
27584: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27585: LD_INT 0
27587: PPUSH
27588: PPUSH
27589: PPUSH
27590: PPUSH
// if not hack in hackTanks then
27591: LD_VAR 0 1
27595: PUSH
27596: LD_EXP 115
27600: IN
27601: NOT
27602: IFFALSE 27606
// exit ;
27604: GO 27846
// index := GetElementIndex ( hackTanks , hack ) ;
27606: LD_ADDR_VAR 0 4
27610: PUSH
27611: LD_EXP 115
27615: PPUSH
27616: LD_VAR 0 1
27620: PPUSH
27621: CALL 34707 0 2
27625: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27626: LD_ADDR_VAR 0 3
27630: PUSH
27631: DOUBLE
27632: LD_EXP 116
27636: PUSH
27637: LD_VAR 0 4
27641: ARRAY
27642: INC
27643: ST_TO_ADDR
27644: LD_INT 1
27646: PUSH
27647: FOR_DOWNTO
27648: IFFALSE 27820
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27650: LD_ADDR_VAR 0 5
27654: PUSH
27655: LD_EXP 116
27659: PUSH
27660: LD_VAR 0 4
27664: ARRAY
27665: PUSH
27666: LD_VAR 0 3
27670: ARRAY
27671: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27672: LD_VAR 0 5
27676: PUSH
27677: LD_INT 1
27679: ARRAY
27680: PPUSH
27681: CALL_OW 302
27685: NOT
27686: PUSH
27687: LD_VAR 0 5
27691: PUSH
27692: LD_INT 1
27694: ARRAY
27695: PPUSH
27696: CALL_OW 255
27700: PUSH
27701: LD_VAR 0 1
27705: PPUSH
27706: CALL_OW 255
27710: NONEQUAL
27711: OR
27712: IFFALSE 27818
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27714: LD_VAR 0 5
27718: PUSH
27719: LD_INT 1
27721: ARRAY
27722: PPUSH
27723: CALL_OW 305
27727: PUSH
27728: LD_VAR 0 5
27732: PUSH
27733: LD_INT 1
27735: ARRAY
27736: PPUSH
27737: CALL_OW 255
27741: PUSH
27742: LD_VAR 0 1
27746: PPUSH
27747: CALL_OW 255
27751: EQUAL
27752: AND
27753: IFFALSE 27777
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27755: LD_VAR 0 5
27759: PUSH
27760: LD_INT 1
27762: ARRAY
27763: PPUSH
27764: LD_VAR 0 5
27768: PUSH
27769: LD_INT 2
27771: ARRAY
27772: PPUSH
27773: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27777: LD_ADDR_EXP 116
27781: PUSH
27782: LD_EXP 116
27786: PPUSH
27787: LD_VAR 0 4
27791: PPUSH
27792: LD_EXP 116
27796: PUSH
27797: LD_VAR 0 4
27801: ARRAY
27802: PPUSH
27803: LD_VAR 0 3
27807: PPUSH
27808: CALL_OW 3
27812: PPUSH
27813: CALL_OW 1
27817: ST_TO_ADDR
// end ; end ;
27818: GO 27647
27820: POP
27821: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27822: LD_VAR 0 1
27826: PPUSH
27827: LD_EXP 116
27831: PUSH
27832: LD_VAR 0 4
27836: ARRAY
27837: PUSH
27838: LD_INT 0
27840: PLUS
27841: PPUSH
27842: CALL_OW 505
// end ;
27846: LD_VAR 0 2
27850: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27851: LD_INT 0
27853: PPUSH
27854: PPUSH
27855: PPUSH
27856: PPUSH
// if not hack in hackTanks then
27857: LD_VAR 0 1
27861: PUSH
27862: LD_EXP 115
27866: IN
27867: NOT
27868: IFFALSE 27872
// exit ;
27870: GO 27957
// index := GetElementIndex ( hackTanks , hack ) ;
27872: LD_ADDR_VAR 0 5
27876: PUSH
27877: LD_EXP 115
27881: PPUSH
27882: LD_VAR 0 1
27886: PPUSH
27887: CALL 34707 0 2
27891: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27892: LD_ADDR_VAR 0 4
27896: PUSH
27897: DOUBLE
27898: LD_INT 1
27900: DEC
27901: ST_TO_ADDR
27902: LD_EXP 116
27906: PUSH
27907: LD_VAR 0 5
27911: ARRAY
27912: PUSH
27913: FOR_TO
27914: IFFALSE 27955
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27916: LD_EXP 116
27920: PUSH
27921: LD_VAR 0 5
27925: ARRAY
27926: PUSH
27927: LD_VAR 0 4
27931: ARRAY
27932: PUSH
27933: LD_INT 1
27935: ARRAY
27936: PUSH
27937: LD_VAR 0 2
27941: EQUAL
27942: IFFALSE 27953
// KillUnit ( vehicle ) ;
27944: LD_VAR 0 2
27948: PPUSH
27949: CALL_OW 66
27953: GO 27913
27955: POP
27956: POP
// end ;
27957: LD_VAR 0 3
27961: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27962: LD_EXP 120
27966: NOT
27967: IFFALSE 28002
27969: GO 27971
27971: DISABLE
// begin initMiner := true ;
27972: LD_ADDR_EXP 120
27976: PUSH
27977: LD_INT 1
27979: ST_TO_ADDR
// minersList := [ ] ;
27980: LD_ADDR_EXP 121
27984: PUSH
27985: EMPTY
27986: ST_TO_ADDR
// minerMinesList := [ ] ;
27987: LD_ADDR_EXP 122
27991: PUSH
27992: EMPTY
27993: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27994: LD_ADDR_EXP 123
27998: PUSH
27999: LD_INT 5
28001: ST_TO_ADDR
// end ;
28002: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28003: LD_EXP 120
28007: PUSH
28008: LD_INT 34
28010: PUSH
28011: LD_EXP 50
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PPUSH
28020: CALL_OW 69
28024: AND
28025: IFFALSE 28488
28027: GO 28029
28029: DISABLE
28030: LD_INT 0
28032: PPUSH
28033: PPUSH
28034: PPUSH
28035: PPUSH
// begin enable ;
28036: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28037: LD_ADDR_VAR 0 1
28041: PUSH
28042: LD_INT 34
28044: PUSH
28045: LD_EXP 50
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PPUSH
28054: CALL_OW 69
28058: PUSH
28059: FOR_IN
28060: IFFALSE 28132
// begin if not i in minersList then
28062: LD_VAR 0 1
28066: PUSH
28067: LD_EXP 121
28071: IN
28072: NOT
28073: IFFALSE 28130
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28075: LD_ADDR_EXP 121
28079: PUSH
28080: LD_EXP 121
28084: PPUSH
28085: LD_EXP 121
28089: PUSH
28090: LD_INT 1
28092: PLUS
28093: PPUSH
28094: LD_VAR 0 1
28098: PPUSH
28099: CALL_OW 1
28103: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28104: LD_ADDR_EXP 122
28108: PUSH
28109: LD_EXP 122
28113: PPUSH
28114: LD_EXP 122
28118: PUSH
28119: LD_INT 1
28121: PLUS
28122: PPUSH
28123: EMPTY
28124: PPUSH
28125: CALL_OW 1
28129: ST_TO_ADDR
// end end ;
28130: GO 28059
28132: POP
28133: POP
// for i := minerMinesList downto 1 do
28134: LD_ADDR_VAR 0 1
28138: PUSH
28139: DOUBLE
28140: LD_EXP 122
28144: INC
28145: ST_TO_ADDR
28146: LD_INT 1
28148: PUSH
28149: FOR_DOWNTO
28150: IFFALSE 28486
// begin if IsLive ( minersList [ i ] ) then
28152: LD_EXP 121
28156: PUSH
28157: LD_VAR 0 1
28161: ARRAY
28162: PPUSH
28163: CALL_OW 300
28167: IFFALSE 28195
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28169: LD_EXP 121
28173: PUSH
28174: LD_VAR 0 1
28178: ARRAY
28179: PPUSH
28180: LD_EXP 122
28184: PUSH
28185: LD_VAR 0 1
28189: ARRAY
28190: PPUSH
28191: CALL_OW 505
// if not minerMinesList [ i ] then
28195: LD_EXP 122
28199: PUSH
28200: LD_VAR 0 1
28204: ARRAY
28205: NOT
28206: IFFALSE 28210
// continue ;
28208: GO 28149
// for j := minerMinesList [ i ] downto 1 do
28210: LD_ADDR_VAR 0 2
28214: PUSH
28215: DOUBLE
28216: LD_EXP 122
28220: PUSH
28221: LD_VAR 0 1
28225: ARRAY
28226: INC
28227: ST_TO_ADDR
28228: LD_INT 1
28230: PUSH
28231: FOR_DOWNTO
28232: IFFALSE 28482
// begin side := GetSide ( minersList [ i ] ) ;
28234: LD_ADDR_VAR 0 3
28238: PUSH
28239: LD_EXP 121
28243: PUSH
28244: LD_VAR 0 1
28248: ARRAY
28249: PPUSH
28250: CALL_OW 255
28254: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28255: LD_ADDR_VAR 0 4
28259: PUSH
28260: LD_EXP 122
28264: PUSH
28265: LD_VAR 0 1
28269: ARRAY
28270: PUSH
28271: LD_VAR 0 2
28275: ARRAY
28276: PUSH
28277: LD_INT 1
28279: ARRAY
28280: PPUSH
28281: LD_EXP 122
28285: PUSH
28286: LD_VAR 0 1
28290: ARRAY
28291: PUSH
28292: LD_VAR 0 2
28296: ARRAY
28297: PUSH
28298: LD_INT 2
28300: ARRAY
28301: PPUSH
28302: CALL_OW 428
28306: ST_TO_ADDR
// if not tmp then
28307: LD_VAR 0 4
28311: NOT
28312: IFFALSE 28316
// continue ;
28314: GO 28231
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28316: LD_VAR 0 4
28320: PUSH
28321: LD_INT 81
28323: PUSH
28324: LD_VAR 0 3
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PPUSH
28333: CALL_OW 69
28337: IN
28338: PUSH
28339: LD_EXP 122
28343: PUSH
28344: LD_VAR 0 1
28348: ARRAY
28349: PUSH
28350: LD_VAR 0 2
28354: ARRAY
28355: PUSH
28356: LD_INT 1
28358: ARRAY
28359: PPUSH
28360: LD_EXP 122
28364: PUSH
28365: LD_VAR 0 1
28369: ARRAY
28370: PUSH
28371: LD_VAR 0 2
28375: ARRAY
28376: PUSH
28377: LD_INT 2
28379: ARRAY
28380: PPUSH
28381: CALL_OW 458
28385: AND
28386: IFFALSE 28480
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28388: LD_EXP 122
28392: PUSH
28393: LD_VAR 0 1
28397: ARRAY
28398: PUSH
28399: LD_VAR 0 2
28403: ARRAY
28404: PUSH
28405: LD_INT 1
28407: ARRAY
28408: PPUSH
28409: LD_EXP 122
28413: PUSH
28414: LD_VAR 0 1
28418: ARRAY
28419: PUSH
28420: LD_VAR 0 2
28424: ARRAY
28425: PUSH
28426: LD_INT 2
28428: ARRAY
28429: PPUSH
28430: LD_VAR 0 3
28434: PPUSH
28435: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28439: LD_ADDR_EXP 122
28443: PUSH
28444: LD_EXP 122
28448: PPUSH
28449: LD_VAR 0 1
28453: PPUSH
28454: LD_EXP 122
28458: PUSH
28459: LD_VAR 0 1
28463: ARRAY
28464: PPUSH
28465: LD_VAR 0 2
28469: PPUSH
28470: CALL_OW 3
28474: PPUSH
28475: CALL_OW 1
28479: ST_TO_ADDR
// end ; end ;
28480: GO 28231
28482: POP
28483: POP
// end ;
28484: GO 28149
28486: POP
28487: POP
// end ;
28488: PPOPN 4
28490: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28491: LD_INT 0
28493: PPUSH
28494: PPUSH
// result := false ;
28495: LD_ADDR_VAR 0 4
28499: PUSH
28500: LD_INT 0
28502: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28503: LD_VAR 0 1
28507: PPUSH
28508: CALL_OW 264
28512: PUSH
28513: LD_EXP 50
28517: EQUAL
28518: NOT
28519: IFFALSE 28523
// exit ;
28521: GO 28763
// index := GetElementIndex ( minersList , unit ) ;
28523: LD_ADDR_VAR 0 5
28527: PUSH
28528: LD_EXP 121
28532: PPUSH
28533: LD_VAR 0 1
28537: PPUSH
28538: CALL 34707 0 2
28542: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28543: LD_EXP 122
28547: PUSH
28548: LD_VAR 0 5
28552: ARRAY
28553: PUSH
28554: LD_EXP 123
28558: GREATEREQUAL
28559: IFFALSE 28563
// exit ;
28561: GO 28763
// ComMoveXY ( unit , x , y ) ;
28563: LD_VAR 0 1
28567: PPUSH
28568: LD_VAR 0 2
28572: PPUSH
28573: LD_VAR 0 3
28577: PPUSH
28578: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28582: LD_INT 35
28584: PPUSH
28585: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28589: LD_VAR 0 1
28593: PPUSH
28594: LD_VAR 0 2
28598: PPUSH
28599: LD_VAR 0 3
28603: PPUSH
28604: CALL 64771 0 3
28608: NOT
28609: PUSH
28610: LD_VAR 0 1
28614: PPUSH
28615: CALL_OW 314
28619: AND
28620: IFFALSE 28624
// exit ;
28622: GO 28763
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28624: LD_VAR 0 2
28628: PPUSH
28629: LD_VAR 0 3
28633: PPUSH
28634: CALL_OW 428
28638: PUSH
28639: LD_VAR 0 1
28643: EQUAL
28644: PUSH
28645: LD_VAR 0 1
28649: PPUSH
28650: CALL_OW 314
28654: NOT
28655: AND
28656: IFFALSE 28582
// PlaySoundXY ( x , y , PlantMine ) ;
28658: LD_VAR 0 2
28662: PPUSH
28663: LD_VAR 0 3
28667: PPUSH
28668: LD_STRING PlantMine
28670: PPUSH
28671: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28675: LD_VAR 0 2
28679: PPUSH
28680: LD_VAR 0 3
28684: PPUSH
28685: LD_VAR 0 1
28689: PPUSH
28690: CALL_OW 255
28694: PPUSH
28695: LD_INT 0
28697: PPUSH
28698: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28702: LD_ADDR_EXP 122
28706: PUSH
28707: LD_EXP 122
28711: PPUSH
28712: LD_VAR 0 5
28716: PUSH
28717: LD_EXP 122
28721: PUSH
28722: LD_VAR 0 5
28726: ARRAY
28727: PUSH
28728: LD_INT 1
28730: PLUS
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PPUSH
28736: LD_VAR 0 2
28740: PUSH
28741: LD_VAR 0 3
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PPUSH
28750: CALL 34922 0 3
28754: ST_TO_ADDR
// result := true ;
28755: LD_ADDR_VAR 0 4
28759: PUSH
28760: LD_INT 1
28762: ST_TO_ADDR
// end ;
28763: LD_VAR 0 4
28767: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28768: LD_INT 0
28770: PPUSH
28771: PPUSH
28772: PPUSH
// if not unit in minersList then
28773: LD_VAR 0 1
28777: PUSH
28778: LD_EXP 121
28782: IN
28783: NOT
28784: IFFALSE 28788
// exit ;
28786: GO 29180
// index := GetElementIndex ( minersList , unit ) ;
28788: LD_ADDR_VAR 0 6
28792: PUSH
28793: LD_EXP 121
28797: PPUSH
28798: LD_VAR 0 1
28802: PPUSH
28803: CALL 34707 0 2
28807: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28808: LD_ADDR_VAR 0 5
28812: PUSH
28813: DOUBLE
28814: LD_EXP 122
28818: PUSH
28819: LD_VAR 0 6
28823: ARRAY
28824: INC
28825: ST_TO_ADDR
28826: LD_INT 1
28828: PUSH
28829: FOR_DOWNTO
28830: IFFALSE 28991
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28832: LD_EXP 122
28836: PUSH
28837: LD_VAR 0 6
28841: ARRAY
28842: PUSH
28843: LD_VAR 0 5
28847: ARRAY
28848: PUSH
28849: LD_INT 1
28851: ARRAY
28852: PUSH
28853: LD_VAR 0 2
28857: EQUAL
28858: PUSH
28859: LD_EXP 122
28863: PUSH
28864: LD_VAR 0 6
28868: ARRAY
28869: PUSH
28870: LD_VAR 0 5
28874: ARRAY
28875: PUSH
28876: LD_INT 2
28878: ARRAY
28879: PUSH
28880: LD_VAR 0 3
28884: EQUAL
28885: AND
28886: IFFALSE 28989
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28888: LD_EXP 122
28892: PUSH
28893: LD_VAR 0 6
28897: ARRAY
28898: PUSH
28899: LD_VAR 0 5
28903: ARRAY
28904: PUSH
28905: LD_INT 1
28907: ARRAY
28908: PPUSH
28909: LD_EXP 122
28913: PUSH
28914: LD_VAR 0 6
28918: ARRAY
28919: PUSH
28920: LD_VAR 0 5
28924: ARRAY
28925: PUSH
28926: LD_INT 2
28928: ARRAY
28929: PPUSH
28930: LD_VAR 0 1
28934: PPUSH
28935: CALL_OW 255
28939: PPUSH
28940: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28944: LD_ADDR_EXP 122
28948: PUSH
28949: LD_EXP 122
28953: PPUSH
28954: LD_VAR 0 6
28958: PPUSH
28959: LD_EXP 122
28963: PUSH
28964: LD_VAR 0 6
28968: ARRAY
28969: PPUSH
28970: LD_VAR 0 5
28974: PPUSH
28975: CALL_OW 3
28979: PPUSH
28980: CALL_OW 1
28984: ST_TO_ADDR
// exit ;
28985: POP
28986: POP
28987: GO 29180
// end ; end ;
28989: GO 28829
28991: POP
28992: POP
// for i := minerMinesList [ index ] downto 1 do
28993: LD_ADDR_VAR 0 5
28997: PUSH
28998: DOUBLE
28999: LD_EXP 122
29003: PUSH
29004: LD_VAR 0 6
29008: ARRAY
29009: INC
29010: ST_TO_ADDR
29011: LD_INT 1
29013: PUSH
29014: FOR_DOWNTO
29015: IFFALSE 29178
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29017: LD_EXP 122
29021: PUSH
29022: LD_VAR 0 6
29026: ARRAY
29027: PUSH
29028: LD_VAR 0 5
29032: ARRAY
29033: PUSH
29034: LD_INT 1
29036: ARRAY
29037: PPUSH
29038: LD_EXP 122
29042: PUSH
29043: LD_VAR 0 6
29047: ARRAY
29048: PUSH
29049: LD_VAR 0 5
29053: ARRAY
29054: PUSH
29055: LD_INT 2
29057: ARRAY
29058: PPUSH
29059: LD_VAR 0 2
29063: PPUSH
29064: LD_VAR 0 3
29068: PPUSH
29069: CALL_OW 298
29073: PUSH
29074: LD_INT 6
29076: LESS
29077: IFFALSE 29176
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29079: LD_EXP 122
29083: PUSH
29084: LD_VAR 0 6
29088: ARRAY
29089: PUSH
29090: LD_VAR 0 5
29094: ARRAY
29095: PUSH
29096: LD_INT 1
29098: ARRAY
29099: PPUSH
29100: LD_EXP 122
29104: PUSH
29105: LD_VAR 0 6
29109: ARRAY
29110: PUSH
29111: LD_VAR 0 5
29115: ARRAY
29116: PUSH
29117: LD_INT 2
29119: ARRAY
29120: PPUSH
29121: LD_VAR 0 1
29125: PPUSH
29126: CALL_OW 255
29130: PPUSH
29131: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29135: LD_ADDR_EXP 122
29139: PUSH
29140: LD_EXP 122
29144: PPUSH
29145: LD_VAR 0 6
29149: PPUSH
29150: LD_EXP 122
29154: PUSH
29155: LD_VAR 0 6
29159: ARRAY
29160: PPUSH
29161: LD_VAR 0 5
29165: PPUSH
29166: CALL_OW 3
29170: PPUSH
29171: CALL_OW 1
29175: ST_TO_ADDR
// end ; end ;
29176: GO 29014
29178: POP
29179: POP
// end ;
29180: LD_VAR 0 4
29184: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29185: LD_INT 0
29187: PPUSH
29188: PPUSH
29189: PPUSH
29190: PPUSH
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
29195: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29196: LD_VAR 0 1
29200: PPUSH
29201: CALL_OW 264
29205: PUSH
29206: LD_EXP 50
29210: EQUAL
29211: NOT
29212: PUSH
29213: LD_VAR 0 1
29217: PUSH
29218: LD_EXP 121
29222: IN
29223: NOT
29224: OR
29225: IFFALSE 29229
// exit ;
29227: GO 29551
// index := GetElementIndex ( minersList , unit ) ;
29229: LD_ADDR_VAR 0 6
29233: PUSH
29234: LD_EXP 121
29238: PPUSH
29239: LD_VAR 0 1
29243: PPUSH
29244: CALL 34707 0 2
29248: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29249: LD_ADDR_VAR 0 8
29253: PUSH
29254: LD_EXP 123
29258: PUSH
29259: LD_EXP 122
29263: PUSH
29264: LD_VAR 0 6
29268: ARRAY
29269: MINUS
29270: ST_TO_ADDR
// if not minesFreeAmount then
29271: LD_VAR 0 8
29275: NOT
29276: IFFALSE 29280
// exit ;
29278: GO 29551
// tmp := [ ] ;
29280: LD_ADDR_VAR 0 7
29284: PUSH
29285: EMPTY
29286: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29287: LD_ADDR_VAR 0 5
29291: PUSH
29292: DOUBLE
29293: LD_INT 1
29295: DEC
29296: ST_TO_ADDR
29297: LD_VAR 0 8
29301: PUSH
29302: FOR_TO
29303: IFFALSE 29498
// begin _d := rand ( 0 , 5 ) ;
29305: LD_ADDR_VAR 0 11
29309: PUSH
29310: LD_INT 0
29312: PPUSH
29313: LD_INT 5
29315: PPUSH
29316: CALL_OW 12
29320: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29321: LD_ADDR_VAR 0 12
29325: PUSH
29326: LD_INT 2
29328: PPUSH
29329: LD_INT 6
29331: PPUSH
29332: CALL_OW 12
29336: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29337: LD_ADDR_VAR 0 9
29341: PUSH
29342: LD_VAR 0 2
29346: PPUSH
29347: LD_VAR 0 11
29351: PPUSH
29352: LD_VAR 0 12
29356: PPUSH
29357: CALL_OW 272
29361: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29362: LD_ADDR_VAR 0 10
29366: PUSH
29367: LD_VAR 0 3
29371: PPUSH
29372: LD_VAR 0 11
29376: PPUSH
29377: LD_VAR 0 12
29381: PPUSH
29382: CALL_OW 273
29386: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29387: LD_VAR 0 9
29391: PPUSH
29392: LD_VAR 0 10
29396: PPUSH
29397: CALL_OW 488
29401: PUSH
29402: LD_VAR 0 9
29406: PUSH
29407: LD_VAR 0 10
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_VAR 0 7
29420: IN
29421: NOT
29422: AND
29423: PUSH
29424: LD_VAR 0 9
29428: PPUSH
29429: LD_VAR 0 10
29433: PPUSH
29434: CALL_OW 458
29438: NOT
29439: AND
29440: IFFALSE 29482
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29442: LD_ADDR_VAR 0 7
29446: PUSH
29447: LD_VAR 0 7
29451: PPUSH
29452: LD_VAR 0 7
29456: PUSH
29457: LD_INT 1
29459: PLUS
29460: PPUSH
29461: LD_VAR 0 9
29465: PUSH
29466: LD_VAR 0 10
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PPUSH
29475: CALL_OW 1
29479: ST_TO_ADDR
29480: GO 29496
// i := i - 1 ;
29482: LD_ADDR_VAR 0 5
29486: PUSH
29487: LD_VAR 0 5
29491: PUSH
29492: LD_INT 1
29494: MINUS
29495: ST_TO_ADDR
// end ;
29496: GO 29302
29498: POP
29499: POP
// for i in tmp do
29500: LD_ADDR_VAR 0 5
29504: PUSH
29505: LD_VAR 0 7
29509: PUSH
29510: FOR_IN
29511: IFFALSE 29549
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29513: LD_VAR 0 1
29517: PPUSH
29518: LD_VAR 0 5
29522: PUSH
29523: LD_INT 1
29525: ARRAY
29526: PPUSH
29527: LD_VAR 0 5
29531: PUSH
29532: LD_INT 2
29534: ARRAY
29535: PPUSH
29536: CALL 28491 0 3
29540: NOT
29541: IFFALSE 29547
// exit ;
29543: POP
29544: POP
29545: GO 29551
29547: GO 29510
29549: POP
29550: POP
// end ;
29551: LD_VAR 0 4
29555: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29556: LD_INT 0
29558: PPUSH
29559: PPUSH
29560: PPUSH
29561: PPUSH
29562: PPUSH
29563: PPUSH
29564: PPUSH
// if not GetClass ( unit ) = class_sniper then
29565: LD_VAR 0 1
29569: PPUSH
29570: CALL_OW 257
29574: PUSH
29575: LD_INT 5
29577: EQUAL
29578: NOT
29579: IFFALSE 29583
// exit ;
29581: GO 29971
// dist := 8 ;
29583: LD_ADDR_VAR 0 5
29587: PUSH
29588: LD_INT 8
29590: ST_TO_ADDR
// viewRange := 12 ;
29591: LD_ADDR_VAR 0 7
29595: PUSH
29596: LD_INT 12
29598: ST_TO_ADDR
// side := GetSide ( unit ) ;
29599: LD_ADDR_VAR 0 6
29603: PUSH
29604: LD_VAR 0 1
29608: PPUSH
29609: CALL_OW 255
29613: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29614: LD_INT 61
29616: PPUSH
29617: LD_VAR 0 6
29621: PPUSH
29622: CALL_OW 321
29626: PUSH
29627: LD_INT 2
29629: EQUAL
29630: IFFALSE 29640
// viewRange := 16 ;
29632: LD_ADDR_VAR 0 7
29636: PUSH
29637: LD_INT 16
29639: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29640: LD_VAR 0 1
29644: PPUSH
29645: LD_VAR 0 2
29649: PPUSH
29650: LD_VAR 0 3
29654: PPUSH
29655: CALL_OW 297
29659: PUSH
29660: LD_VAR 0 5
29664: GREATER
29665: IFFALSE 29744
// begin ComMoveXY ( unit , x , y ) ;
29667: LD_VAR 0 1
29671: PPUSH
29672: LD_VAR 0 2
29676: PPUSH
29677: LD_VAR 0 3
29681: PPUSH
29682: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29686: LD_INT 35
29688: PPUSH
29689: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29693: LD_VAR 0 1
29697: PPUSH
29698: LD_VAR 0 2
29702: PPUSH
29703: LD_VAR 0 3
29707: PPUSH
29708: CALL 64771 0 3
29712: NOT
29713: IFFALSE 29717
// exit ;
29715: GO 29971
// until GetDistUnitXY ( unit , x , y ) < dist ;
29717: LD_VAR 0 1
29721: PPUSH
29722: LD_VAR 0 2
29726: PPUSH
29727: LD_VAR 0 3
29731: PPUSH
29732: CALL_OW 297
29736: PUSH
29737: LD_VAR 0 5
29741: LESS
29742: IFFALSE 29686
// end ; ComTurnXY ( unit , x , y ) ;
29744: LD_VAR 0 1
29748: PPUSH
29749: LD_VAR 0 2
29753: PPUSH
29754: LD_VAR 0 3
29758: PPUSH
29759: CALL_OW 118
// wait ( 5 ) ;
29763: LD_INT 5
29765: PPUSH
29766: CALL_OW 67
// _d := GetDir ( unit ) ;
29770: LD_ADDR_VAR 0 10
29774: PUSH
29775: LD_VAR 0 1
29779: PPUSH
29780: CALL_OW 254
29784: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29785: LD_ADDR_VAR 0 8
29789: PUSH
29790: LD_VAR 0 1
29794: PPUSH
29795: CALL_OW 250
29799: PPUSH
29800: LD_VAR 0 10
29804: PPUSH
29805: LD_VAR 0 5
29809: PPUSH
29810: CALL_OW 272
29814: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29815: LD_ADDR_VAR 0 9
29819: PUSH
29820: LD_VAR 0 1
29824: PPUSH
29825: CALL_OW 251
29829: PPUSH
29830: LD_VAR 0 10
29834: PPUSH
29835: LD_VAR 0 5
29839: PPUSH
29840: CALL_OW 273
29844: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29845: LD_VAR 0 8
29849: PPUSH
29850: LD_VAR 0 9
29854: PPUSH
29855: CALL_OW 488
29859: NOT
29860: IFFALSE 29864
// exit ;
29862: GO 29971
// ComAnimCustom ( unit , 1 ) ;
29864: LD_VAR 0 1
29868: PPUSH
29869: LD_INT 1
29871: PPUSH
29872: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29876: LD_VAR 0 8
29880: PPUSH
29881: LD_VAR 0 9
29885: PPUSH
29886: LD_VAR 0 6
29890: PPUSH
29891: LD_VAR 0 7
29895: PPUSH
29896: CALL_OW 330
// repeat wait ( 1 ) ;
29900: LD_INT 1
29902: PPUSH
29903: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29907: LD_VAR 0 1
29911: PPUSH
29912: CALL_OW 316
29916: PUSH
29917: LD_VAR 0 1
29921: PPUSH
29922: CALL_OW 314
29926: OR
29927: PUSH
29928: LD_VAR 0 1
29932: PPUSH
29933: CALL_OW 302
29937: NOT
29938: OR
29939: PUSH
29940: LD_VAR 0 1
29944: PPUSH
29945: CALL_OW 301
29949: OR
29950: IFFALSE 29900
// RemoveSeeing ( _x , _y , side ) ;
29952: LD_VAR 0 8
29956: PPUSH
29957: LD_VAR 0 9
29961: PPUSH
29962: LD_VAR 0 6
29966: PPUSH
29967: CALL_OW 331
// end ; end_of_file
29971: LD_VAR 0 4
29975: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29976: LD_INT 0
29978: PPUSH
29979: PPUSH
// if exist_mode then
29980: LD_VAR 0 2
29984: IFFALSE 30009
// unit := CreateCharacter ( prefix & ident ) else
29986: LD_ADDR_VAR 0 5
29990: PUSH
29991: LD_VAR 0 3
29995: PUSH
29996: LD_VAR 0 1
30000: STR
30001: PPUSH
30002: CALL_OW 34
30006: ST_TO_ADDR
30007: GO 30024
// unit := NewCharacter ( ident ) ;
30009: LD_ADDR_VAR 0 5
30013: PUSH
30014: LD_VAR 0 1
30018: PPUSH
30019: CALL_OW 25
30023: ST_TO_ADDR
// result := unit ;
30024: LD_ADDR_VAR 0 4
30028: PUSH
30029: LD_VAR 0 5
30033: ST_TO_ADDR
// end ;
30034: LD_VAR 0 4
30038: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30039: LD_INT 0
30041: PPUSH
30042: PPUSH
// if not side or not nation then
30043: LD_VAR 0 1
30047: NOT
30048: PUSH
30049: LD_VAR 0 2
30053: NOT
30054: OR
30055: IFFALSE 30059
// exit ;
30057: GO 30823
// case nation of nation_american :
30059: LD_VAR 0 2
30063: PUSH
30064: LD_INT 1
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30286
30072: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30073: LD_ADDR_VAR 0 4
30077: PUSH
30078: LD_INT 35
30080: PUSH
30081: LD_INT 45
30083: PUSH
30084: LD_INT 46
30086: PUSH
30087: LD_INT 47
30089: PUSH
30090: LD_INT 82
30092: PUSH
30093: LD_INT 83
30095: PUSH
30096: LD_INT 84
30098: PUSH
30099: LD_INT 85
30101: PUSH
30102: LD_INT 86
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: LD_INT 6
30113: PUSH
30114: LD_INT 15
30116: PUSH
30117: LD_INT 16
30119: PUSH
30120: LD_INT 7
30122: PUSH
30123: LD_INT 12
30125: PUSH
30126: LD_INT 13
30128: PUSH
30129: LD_INT 10
30131: PUSH
30132: LD_INT 14
30134: PUSH
30135: LD_INT 20
30137: PUSH
30138: LD_INT 21
30140: PUSH
30141: LD_INT 22
30143: PUSH
30144: LD_INT 25
30146: PUSH
30147: LD_INT 32
30149: PUSH
30150: LD_INT 27
30152: PUSH
30153: LD_INT 36
30155: PUSH
30156: LD_INT 69
30158: PUSH
30159: LD_INT 39
30161: PUSH
30162: LD_INT 34
30164: PUSH
30165: LD_INT 40
30167: PUSH
30168: LD_INT 48
30170: PUSH
30171: LD_INT 49
30173: PUSH
30174: LD_INT 50
30176: PUSH
30177: LD_INT 51
30179: PUSH
30180: LD_INT 52
30182: PUSH
30183: LD_INT 53
30185: PUSH
30186: LD_INT 54
30188: PUSH
30189: LD_INT 55
30191: PUSH
30192: LD_INT 56
30194: PUSH
30195: LD_INT 57
30197: PUSH
30198: LD_INT 58
30200: PUSH
30201: LD_INT 59
30203: PUSH
30204: LD_INT 60
30206: PUSH
30207: LD_INT 61
30209: PUSH
30210: LD_INT 62
30212: PUSH
30213: LD_INT 80
30215: PUSH
30216: LD_INT 82
30218: PUSH
30219: LD_INT 83
30221: PUSH
30222: LD_INT 84
30224: PUSH
30225: LD_INT 85
30227: PUSH
30228: LD_INT 86
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: ST_TO_ADDR
30284: GO 30747
30286: LD_INT 2
30288: DOUBLE
30289: EQUAL
30290: IFTRUE 30294
30292: GO 30516
30294: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
30295: LD_ADDR_VAR 0 4
30299: PUSH
30300: LD_INT 35
30302: PUSH
30303: LD_INT 45
30305: PUSH
30306: LD_INT 46
30308: PUSH
30309: LD_INT 47
30311: PUSH
30312: LD_INT 82
30314: PUSH
30315: LD_INT 83
30317: PUSH
30318: LD_INT 84
30320: PUSH
30321: LD_INT 85
30323: PUSH
30324: LD_INT 87
30326: PUSH
30327: LD_INT 70
30329: PUSH
30330: LD_INT 1
30332: PUSH
30333: LD_INT 11
30335: PUSH
30336: LD_INT 3
30338: PUSH
30339: LD_INT 4
30341: PUSH
30342: LD_INT 5
30344: PUSH
30345: LD_INT 6
30347: PUSH
30348: LD_INT 15
30350: PUSH
30351: LD_INT 18
30353: PUSH
30354: LD_INT 7
30356: PUSH
30357: LD_INT 17
30359: PUSH
30360: LD_INT 8
30362: PUSH
30363: LD_INT 20
30365: PUSH
30366: LD_INT 21
30368: PUSH
30369: LD_INT 22
30371: PUSH
30372: LD_INT 72
30374: PUSH
30375: LD_INT 26
30377: PUSH
30378: LD_INT 69
30380: PUSH
30381: LD_INT 39
30383: PUSH
30384: LD_INT 40
30386: PUSH
30387: LD_INT 41
30389: PUSH
30390: LD_INT 42
30392: PUSH
30393: LD_INT 43
30395: PUSH
30396: LD_INT 48
30398: PUSH
30399: LD_INT 49
30401: PUSH
30402: LD_INT 50
30404: PUSH
30405: LD_INT 51
30407: PUSH
30408: LD_INT 52
30410: PUSH
30411: LD_INT 53
30413: PUSH
30414: LD_INT 54
30416: PUSH
30417: LD_INT 55
30419: PUSH
30420: LD_INT 56
30422: PUSH
30423: LD_INT 60
30425: PUSH
30426: LD_INT 61
30428: PUSH
30429: LD_INT 62
30431: PUSH
30432: LD_INT 66
30434: PUSH
30435: LD_INT 67
30437: PUSH
30438: LD_INT 68
30440: PUSH
30441: LD_INT 81
30443: PUSH
30444: LD_INT 82
30446: PUSH
30447: LD_INT 83
30449: PUSH
30450: LD_INT 84
30452: PUSH
30453: LD_INT 85
30455: PUSH
30456: LD_INT 87
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: ST_TO_ADDR
30514: GO 30747
30516: LD_INT 3
30518: DOUBLE
30519: EQUAL
30520: IFTRUE 30524
30522: GO 30746
30524: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30525: LD_ADDR_VAR 0 4
30529: PUSH
30530: LD_INT 46
30532: PUSH
30533: LD_INT 47
30535: PUSH
30536: LD_INT 1
30538: PUSH
30539: LD_INT 2
30541: PUSH
30542: LD_INT 82
30544: PUSH
30545: LD_INT 83
30547: PUSH
30548: LD_INT 84
30550: PUSH
30551: LD_INT 85
30553: PUSH
30554: LD_INT 86
30556: PUSH
30557: LD_INT 11
30559: PUSH
30560: LD_INT 9
30562: PUSH
30563: LD_INT 20
30565: PUSH
30566: LD_INT 19
30568: PUSH
30569: LD_INT 21
30571: PUSH
30572: LD_INT 24
30574: PUSH
30575: LD_INT 22
30577: PUSH
30578: LD_INT 25
30580: PUSH
30581: LD_INT 28
30583: PUSH
30584: LD_INT 29
30586: PUSH
30587: LD_INT 30
30589: PUSH
30590: LD_INT 31
30592: PUSH
30593: LD_INT 37
30595: PUSH
30596: LD_INT 38
30598: PUSH
30599: LD_INT 32
30601: PUSH
30602: LD_INT 27
30604: PUSH
30605: LD_INT 33
30607: PUSH
30608: LD_INT 69
30610: PUSH
30611: LD_INT 39
30613: PUSH
30614: LD_INT 34
30616: PUSH
30617: LD_INT 40
30619: PUSH
30620: LD_INT 71
30622: PUSH
30623: LD_INT 23
30625: PUSH
30626: LD_INT 44
30628: PUSH
30629: LD_INT 48
30631: PUSH
30632: LD_INT 49
30634: PUSH
30635: LD_INT 50
30637: PUSH
30638: LD_INT 51
30640: PUSH
30641: LD_INT 52
30643: PUSH
30644: LD_INT 53
30646: PUSH
30647: LD_INT 54
30649: PUSH
30650: LD_INT 55
30652: PUSH
30653: LD_INT 56
30655: PUSH
30656: LD_INT 57
30658: PUSH
30659: LD_INT 58
30661: PUSH
30662: LD_INT 59
30664: PUSH
30665: LD_INT 63
30667: PUSH
30668: LD_INT 64
30670: PUSH
30671: LD_INT 65
30673: PUSH
30674: LD_INT 82
30676: PUSH
30677: LD_INT 83
30679: PUSH
30680: LD_INT 84
30682: PUSH
30683: LD_INT 85
30685: PUSH
30686: LD_INT 86
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: ST_TO_ADDR
30744: GO 30747
30746: POP
// if state > - 1 and state < 3 then
30747: LD_VAR 0 3
30751: PUSH
30752: LD_INT 1
30754: NEG
30755: GREATER
30756: PUSH
30757: LD_VAR 0 3
30761: PUSH
30762: LD_INT 3
30764: LESS
30765: AND
30766: IFFALSE 30823
// for i in result do
30768: LD_ADDR_VAR 0 5
30772: PUSH
30773: LD_VAR 0 4
30777: PUSH
30778: FOR_IN
30779: IFFALSE 30821
// if GetTech ( i , side ) <> state then
30781: LD_VAR 0 5
30785: PPUSH
30786: LD_VAR 0 1
30790: PPUSH
30791: CALL_OW 321
30795: PUSH
30796: LD_VAR 0 3
30800: NONEQUAL
30801: IFFALSE 30819
// result := result diff i ;
30803: LD_ADDR_VAR 0 4
30807: PUSH
30808: LD_VAR 0 4
30812: PUSH
30813: LD_VAR 0 5
30817: DIFF
30818: ST_TO_ADDR
30819: GO 30778
30821: POP
30822: POP
// end ;
30823: LD_VAR 0 4
30827: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30828: LD_INT 0
30830: PPUSH
30831: PPUSH
30832: PPUSH
// result := true ;
30833: LD_ADDR_VAR 0 3
30837: PUSH
30838: LD_INT 1
30840: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30841: LD_ADDR_VAR 0 5
30845: PUSH
30846: LD_VAR 0 2
30850: PPUSH
30851: CALL_OW 480
30855: ST_TO_ADDR
// if not tmp then
30856: LD_VAR 0 5
30860: NOT
30861: IFFALSE 30865
// exit ;
30863: GO 30914
// for i in tmp do
30865: LD_ADDR_VAR 0 4
30869: PUSH
30870: LD_VAR 0 5
30874: PUSH
30875: FOR_IN
30876: IFFALSE 30912
// if GetTech ( i , side ) <> state_researched then
30878: LD_VAR 0 4
30882: PPUSH
30883: LD_VAR 0 1
30887: PPUSH
30888: CALL_OW 321
30892: PUSH
30893: LD_INT 2
30895: NONEQUAL
30896: IFFALSE 30910
// begin result := false ;
30898: LD_ADDR_VAR 0 3
30902: PUSH
30903: LD_INT 0
30905: ST_TO_ADDR
// exit ;
30906: POP
30907: POP
30908: GO 30914
// end ;
30910: GO 30875
30912: POP
30913: POP
// end ;
30914: LD_VAR 0 3
30918: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30919: LD_INT 0
30921: PPUSH
30922: PPUSH
30923: PPUSH
30924: PPUSH
30925: PPUSH
30926: PPUSH
30927: PPUSH
30928: PPUSH
30929: PPUSH
30930: PPUSH
30931: PPUSH
30932: PPUSH
30933: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30934: LD_VAR 0 1
30938: NOT
30939: PUSH
30940: LD_VAR 0 1
30944: PPUSH
30945: CALL_OW 257
30949: PUSH
30950: LD_INT 9
30952: NONEQUAL
30953: OR
30954: IFFALSE 30958
// exit ;
30956: GO 31531
// side := GetSide ( unit ) ;
30958: LD_ADDR_VAR 0 9
30962: PUSH
30963: LD_VAR 0 1
30967: PPUSH
30968: CALL_OW 255
30972: ST_TO_ADDR
// tech_space := tech_spacanom ;
30973: LD_ADDR_VAR 0 12
30977: PUSH
30978: LD_INT 29
30980: ST_TO_ADDR
// tech_time := tech_taurad ;
30981: LD_ADDR_VAR 0 13
30985: PUSH
30986: LD_INT 28
30988: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30989: LD_ADDR_VAR 0 11
30993: PUSH
30994: LD_VAR 0 1
30998: PPUSH
30999: CALL_OW 310
31003: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31004: LD_VAR 0 11
31008: PPUSH
31009: CALL_OW 247
31013: PUSH
31014: LD_INT 2
31016: EQUAL
31017: IFFALSE 31021
// exit ;
31019: GO 31531
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31021: LD_ADDR_VAR 0 8
31025: PUSH
31026: LD_INT 81
31028: PUSH
31029: LD_VAR 0 9
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 3
31040: PUSH
31041: LD_INT 21
31043: PUSH
31044: LD_INT 3
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PPUSH
31059: CALL_OW 69
31063: ST_TO_ADDR
// if not tmp then
31064: LD_VAR 0 8
31068: NOT
31069: IFFALSE 31073
// exit ;
31071: GO 31531
// if in_unit then
31073: LD_VAR 0 11
31077: IFFALSE 31101
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31079: LD_ADDR_VAR 0 10
31083: PUSH
31084: LD_VAR 0 8
31088: PPUSH
31089: LD_VAR 0 11
31093: PPUSH
31094: CALL_OW 74
31098: ST_TO_ADDR
31099: GO 31121
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31101: LD_ADDR_VAR 0 10
31105: PUSH
31106: LD_VAR 0 8
31110: PPUSH
31111: LD_VAR 0 1
31115: PPUSH
31116: CALL_OW 74
31120: ST_TO_ADDR
// if not enemy then
31121: LD_VAR 0 10
31125: NOT
31126: IFFALSE 31130
// exit ;
31128: GO 31531
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31130: LD_VAR 0 11
31134: PUSH
31135: LD_VAR 0 11
31139: PPUSH
31140: LD_VAR 0 10
31144: PPUSH
31145: CALL_OW 296
31149: PUSH
31150: LD_INT 13
31152: GREATER
31153: AND
31154: PUSH
31155: LD_VAR 0 1
31159: PPUSH
31160: LD_VAR 0 10
31164: PPUSH
31165: CALL_OW 296
31169: PUSH
31170: LD_INT 12
31172: GREATER
31173: OR
31174: IFFALSE 31178
// exit ;
31176: GO 31531
// missile := [ 1 ] ;
31178: LD_ADDR_VAR 0 14
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: EMPTY
31187: LIST
31188: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31189: LD_VAR 0 9
31193: PPUSH
31194: LD_VAR 0 12
31198: PPUSH
31199: CALL_OW 325
31203: IFFALSE 31232
// missile := Insert ( missile , missile + 1 , 2 ) ;
31205: LD_ADDR_VAR 0 14
31209: PUSH
31210: LD_VAR 0 14
31214: PPUSH
31215: LD_VAR 0 14
31219: PUSH
31220: LD_INT 1
31222: PLUS
31223: PPUSH
31224: LD_INT 2
31226: PPUSH
31227: CALL_OW 2
31231: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31232: LD_VAR 0 9
31236: PPUSH
31237: LD_VAR 0 13
31241: PPUSH
31242: CALL_OW 325
31246: PUSH
31247: LD_VAR 0 10
31251: PPUSH
31252: CALL_OW 255
31256: PPUSH
31257: LD_VAR 0 13
31261: PPUSH
31262: CALL_OW 325
31266: NOT
31267: AND
31268: IFFALSE 31297
// missile := Insert ( missile , missile + 1 , 3 ) ;
31270: LD_ADDR_VAR 0 14
31274: PUSH
31275: LD_VAR 0 14
31279: PPUSH
31280: LD_VAR 0 14
31284: PUSH
31285: LD_INT 1
31287: PLUS
31288: PPUSH
31289: LD_INT 3
31291: PPUSH
31292: CALL_OW 2
31296: ST_TO_ADDR
// if missile < 2 then
31297: LD_VAR 0 14
31301: PUSH
31302: LD_INT 2
31304: LESS
31305: IFFALSE 31309
// exit ;
31307: GO 31531
// x := GetX ( enemy ) ;
31309: LD_ADDR_VAR 0 4
31313: PUSH
31314: LD_VAR 0 10
31318: PPUSH
31319: CALL_OW 250
31323: ST_TO_ADDR
// y := GetY ( enemy ) ;
31324: LD_ADDR_VAR 0 5
31328: PUSH
31329: LD_VAR 0 10
31333: PPUSH
31334: CALL_OW 251
31338: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31339: LD_ADDR_VAR 0 6
31343: PUSH
31344: LD_VAR 0 4
31348: PUSH
31349: LD_INT 1
31351: NEG
31352: PPUSH
31353: LD_INT 1
31355: PPUSH
31356: CALL_OW 12
31360: PLUS
31361: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31362: LD_ADDR_VAR 0 7
31366: PUSH
31367: LD_VAR 0 5
31371: PUSH
31372: LD_INT 1
31374: NEG
31375: PPUSH
31376: LD_INT 1
31378: PPUSH
31379: CALL_OW 12
31383: PLUS
31384: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31385: LD_VAR 0 6
31389: PPUSH
31390: LD_VAR 0 7
31394: PPUSH
31395: CALL_OW 488
31399: NOT
31400: IFFALSE 31422
// begin _x := x ;
31402: LD_ADDR_VAR 0 6
31406: PUSH
31407: LD_VAR 0 4
31411: ST_TO_ADDR
// _y := y ;
31412: LD_ADDR_VAR 0 7
31416: PUSH
31417: LD_VAR 0 5
31421: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31422: LD_ADDR_VAR 0 3
31426: PUSH
31427: LD_INT 1
31429: PPUSH
31430: LD_VAR 0 14
31434: PPUSH
31435: CALL_OW 12
31439: ST_TO_ADDR
// case i of 1 :
31440: LD_VAR 0 3
31444: PUSH
31445: LD_INT 1
31447: DOUBLE
31448: EQUAL
31449: IFTRUE 31453
31451: GO 31470
31453: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31454: LD_VAR 0 1
31458: PPUSH
31459: LD_VAR 0 10
31463: PPUSH
31464: CALL_OW 115
31468: GO 31531
31470: LD_INT 2
31472: DOUBLE
31473: EQUAL
31474: IFTRUE 31478
31476: GO 31500
31478: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31479: LD_VAR 0 1
31483: PPUSH
31484: LD_VAR 0 6
31488: PPUSH
31489: LD_VAR 0 7
31493: PPUSH
31494: CALL_OW 153
31498: GO 31531
31500: LD_INT 3
31502: DOUBLE
31503: EQUAL
31504: IFTRUE 31508
31506: GO 31530
31508: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31509: LD_VAR 0 1
31513: PPUSH
31514: LD_VAR 0 6
31518: PPUSH
31519: LD_VAR 0 7
31523: PPUSH
31524: CALL_OW 154
31528: GO 31531
31530: POP
// end ;
31531: LD_VAR 0 2
31535: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31536: LD_INT 0
31538: PPUSH
31539: PPUSH
31540: PPUSH
31541: PPUSH
31542: PPUSH
31543: PPUSH
// if not unit or not building then
31544: LD_VAR 0 1
31548: NOT
31549: PUSH
31550: LD_VAR 0 2
31554: NOT
31555: OR
31556: IFFALSE 31560
// exit ;
31558: GO 31718
// x := GetX ( building ) ;
31560: LD_ADDR_VAR 0 5
31564: PUSH
31565: LD_VAR 0 2
31569: PPUSH
31570: CALL_OW 250
31574: ST_TO_ADDR
// y := GetY ( building ) ;
31575: LD_ADDR_VAR 0 6
31579: PUSH
31580: LD_VAR 0 2
31584: PPUSH
31585: CALL_OW 251
31589: ST_TO_ADDR
// for i = 0 to 5 do
31590: LD_ADDR_VAR 0 4
31594: PUSH
31595: DOUBLE
31596: LD_INT 0
31598: DEC
31599: ST_TO_ADDR
31600: LD_INT 5
31602: PUSH
31603: FOR_TO
31604: IFFALSE 31716
// begin _x := ShiftX ( x , i , 3 ) ;
31606: LD_ADDR_VAR 0 7
31610: PUSH
31611: LD_VAR 0 5
31615: PPUSH
31616: LD_VAR 0 4
31620: PPUSH
31621: LD_INT 3
31623: PPUSH
31624: CALL_OW 272
31628: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31629: LD_ADDR_VAR 0 8
31633: PUSH
31634: LD_VAR 0 6
31638: PPUSH
31639: LD_VAR 0 4
31643: PPUSH
31644: LD_INT 3
31646: PPUSH
31647: CALL_OW 273
31651: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31652: LD_VAR 0 7
31656: PPUSH
31657: LD_VAR 0 8
31661: PPUSH
31662: CALL_OW 488
31666: NOT
31667: IFFALSE 31671
// continue ;
31669: GO 31603
// if HexInfo ( _x , _y ) = 0 then
31671: LD_VAR 0 7
31675: PPUSH
31676: LD_VAR 0 8
31680: PPUSH
31681: CALL_OW 428
31685: PUSH
31686: LD_INT 0
31688: EQUAL
31689: IFFALSE 31714
// begin ComMoveXY ( unit , _x , _y ) ;
31691: LD_VAR 0 1
31695: PPUSH
31696: LD_VAR 0 7
31700: PPUSH
31701: LD_VAR 0 8
31705: PPUSH
31706: CALL_OW 111
// exit ;
31710: POP
31711: POP
31712: GO 31718
// end ; end ;
31714: GO 31603
31716: POP
31717: POP
// end ;
31718: LD_VAR 0 3
31722: RET
// export function ScanBase ( side , base_area ) ; begin
31723: LD_INT 0
31725: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31726: LD_ADDR_VAR 0 3
31730: PUSH
31731: LD_VAR 0 2
31735: PPUSH
31736: LD_INT 81
31738: PUSH
31739: LD_VAR 0 1
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PPUSH
31748: CALL_OW 70
31752: ST_TO_ADDR
// end ;
31753: LD_VAR 0 3
31757: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31758: LD_INT 0
31760: PPUSH
31761: PPUSH
31762: PPUSH
31763: PPUSH
// result := false ;
31764: LD_ADDR_VAR 0 2
31768: PUSH
31769: LD_INT 0
31771: ST_TO_ADDR
// side := GetSide ( unit ) ;
31772: LD_ADDR_VAR 0 3
31776: PUSH
31777: LD_VAR 0 1
31781: PPUSH
31782: CALL_OW 255
31786: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31787: LD_ADDR_VAR 0 4
31791: PUSH
31792: LD_VAR 0 1
31796: PPUSH
31797: CALL_OW 248
31801: ST_TO_ADDR
// case nat of 1 :
31802: LD_VAR 0 4
31806: PUSH
31807: LD_INT 1
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 31826
31815: POP
// tech := tech_lassight ; 2 :
31816: LD_ADDR_VAR 0 5
31820: PUSH
31821: LD_INT 12
31823: ST_TO_ADDR
31824: GO 31865
31826: LD_INT 2
31828: DOUBLE
31829: EQUAL
31830: IFTRUE 31834
31832: GO 31845
31834: POP
// tech := tech_mortar ; 3 :
31835: LD_ADDR_VAR 0 5
31839: PUSH
31840: LD_INT 41
31842: ST_TO_ADDR
31843: GO 31865
31845: LD_INT 3
31847: DOUBLE
31848: EQUAL
31849: IFTRUE 31853
31851: GO 31864
31853: POP
// tech := tech_bazooka ; end ;
31854: LD_ADDR_VAR 0 5
31858: PUSH
31859: LD_INT 44
31861: ST_TO_ADDR
31862: GO 31865
31864: POP
// if Researched ( side , tech ) then
31865: LD_VAR 0 3
31869: PPUSH
31870: LD_VAR 0 5
31874: PPUSH
31875: CALL_OW 325
31879: IFFALSE 31906
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31881: LD_ADDR_VAR 0 2
31885: PUSH
31886: LD_INT 5
31888: PUSH
31889: LD_INT 8
31891: PUSH
31892: LD_INT 9
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: LIST
31899: PUSH
31900: LD_VAR 0 4
31904: ARRAY
31905: ST_TO_ADDR
// end ;
31906: LD_VAR 0 2
31910: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31911: LD_INT 0
31913: PPUSH
31914: PPUSH
31915: PPUSH
// if not mines then
31916: LD_VAR 0 2
31920: NOT
31921: IFFALSE 31925
// exit ;
31923: GO 32069
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31925: LD_ADDR_VAR 0 5
31929: PUSH
31930: LD_INT 81
31932: PUSH
31933: LD_VAR 0 1
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 3
31944: PUSH
31945: LD_INT 21
31947: PUSH
31948: LD_INT 3
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PPUSH
31963: CALL_OW 69
31967: ST_TO_ADDR
// for i in mines do
31968: LD_ADDR_VAR 0 4
31972: PUSH
31973: LD_VAR 0 2
31977: PUSH
31978: FOR_IN
31979: IFFALSE 32067
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31981: LD_VAR 0 4
31985: PUSH
31986: LD_INT 1
31988: ARRAY
31989: PPUSH
31990: LD_VAR 0 4
31994: PUSH
31995: LD_INT 2
31997: ARRAY
31998: PPUSH
31999: CALL_OW 458
32003: NOT
32004: IFFALSE 32008
// continue ;
32006: GO 31978
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32008: LD_VAR 0 4
32012: PUSH
32013: LD_INT 1
32015: ARRAY
32016: PPUSH
32017: LD_VAR 0 4
32021: PUSH
32022: LD_INT 2
32024: ARRAY
32025: PPUSH
32026: CALL_OW 428
32030: PUSH
32031: LD_VAR 0 5
32035: IN
32036: IFFALSE 32065
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32038: LD_VAR 0 4
32042: PUSH
32043: LD_INT 1
32045: ARRAY
32046: PPUSH
32047: LD_VAR 0 4
32051: PUSH
32052: LD_INT 2
32054: ARRAY
32055: PPUSH
32056: LD_VAR 0 1
32060: PPUSH
32061: CALL_OW 456
// end ;
32065: GO 31978
32067: POP
32068: POP
// end ;
32069: LD_VAR 0 3
32073: RET
// export function Count ( array ) ; var i ; begin
32074: LD_INT 0
32076: PPUSH
32077: PPUSH
// result := 0 ;
32078: LD_ADDR_VAR 0 2
32082: PUSH
32083: LD_INT 0
32085: ST_TO_ADDR
// for i in array do
32086: LD_ADDR_VAR 0 3
32090: PUSH
32091: LD_VAR 0 1
32095: PUSH
32096: FOR_IN
32097: IFFALSE 32121
// if i then
32099: LD_VAR 0 3
32103: IFFALSE 32119
// result := result + 1 ;
32105: LD_ADDR_VAR 0 2
32109: PUSH
32110: LD_VAR 0 2
32114: PUSH
32115: LD_INT 1
32117: PLUS
32118: ST_TO_ADDR
32119: GO 32096
32121: POP
32122: POP
// end ;
32123: LD_VAR 0 2
32127: RET
// export function IsEmpty ( building ) ; begin
32128: LD_INT 0
32130: PPUSH
// if not building then
32131: LD_VAR 0 1
32135: NOT
32136: IFFALSE 32140
// exit ;
32138: GO 32183
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32140: LD_ADDR_VAR 0 2
32144: PUSH
32145: LD_VAR 0 1
32149: PUSH
32150: LD_INT 22
32152: PUSH
32153: LD_VAR 0 1
32157: PPUSH
32158: CALL_OW 255
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 58
32169: PUSH
32170: EMPTY
32171: LIST
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PPUSH
32177: CALL_OW 69
32181: IN
32182: ST_TO_ADDR
// end ;
32183: LD_VAR 0 2
32187: RET
// export function IsNotFull ( building ) ; begin
32188: LD_INT 0
32190: PPUSH
// if not building then
32191: LD_VAR 0 1
32195: NOT
32196: IFFALSE 32200
// exit ;
32198: GO 32219
// result := UnitsInside ( building ) < 6 ;
32200: LD_ADDR_VAR 0 2
32204: PUSH
32205: LD_VAR 0 1
32209: PPUSH
32210: CALL_OW 313
32214: PUSH
32215: LD_INT 6
32217: LESS
32218: ST_TO_ADDR
// end ;
32219: LD_VAR 0 2
32223: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32224: LD_INT 0
32226: PPUSH
32227: PPUSH
32228: PPUSH
32229: PPUSH
// tmp := [ ] ;
32230: LD_ADDR_VAR 0 3
32234: PUSH
32235: EMPTY
32236: ST_TO_ADDR
// list := [ ] ;
32237: LD_ADDR_VAR 0 5
32241: PUSH
32242: EMPTY
32243: ST_TO_ADDR
// for i = 16 to 25 do
32244: LD_ADDR_VAR 0 4
32248: PUSH
32249: DOUBLE
32250: LD_INT 16
32252: DEC
32253: ST_TO_ADDR
32254: LD_INT 25
32256: PUSH
32257: FOR_TO
32258: IFFALSE 32331
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32260: LD_ADDR_VAR 0 3
32264: PUSH
32265: LD_VAR 0 3
32269: PUSH
32270: LD_INT 22
32272: PUSH
32273: LD_VAR 0 1
32277: PPUSH
32278: CALL_OW 255
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 91
32289: PUSH
32290: LD_VAR 0 1
32294: PUSH
32295: LD_INT 6
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 30
32305: PUSH
32306: LD_VAR 0 4
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: LIST
32319: PUSH
32320: EMPTY
32321: LIST
32322: PPUSH
32323: CALL_OW 69
32327: ADD
32328: ST_TO_ADDR
32329: GO 32257
32331: POP
32332: POP
// for i = 1 to tmp do
32333: LD_ADDR_VAR 0 4
32337: PUSH
32338: DOUBLE
32339: LD_INT 1
32341: DEC
32342: ST_TO_ADDR
32343: LD_VAR 0 3
32347: PUSH
32348: FOR_TO
32349: IFFALSE 32437
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32351: LD_ADDR_VAR 0 5
32355: PUSH
32356: LD_VAR 0 5
32360: PUSH
32361: LD_VAR 0 3
32365: PUSH
32366: LD_VAR 0 4
32370: ARRAY
32371: PPUSH
32372: CALL_OW 266
32376: PUSH
32377: LD_VAR 0 3
32381: PUSH
32382: LD_VAR 0 4
32386: ARRAY
32387: PPUSH
32388: CALL_OW 250
32392: PUSH
32393: LD_VAR 0 3
32397: PUSH
32398: LD_VAR 0 4
32402: ARRAY
32403: PPUSH
32404: CALL_OW 251
32408: PUSH
32409: LD_VAR 0 3
32413: PUSH
32414: LD_VAR 0 4
32418: ARRAY
32419: PPUSH
32420: CALL_OW 254
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: ADD
32434: ST_TO_ADDR
32435: GO 32348
32437: POP
32438: POP
// result := list ;
32439: LD_ADDR_VAR 0 2
32443: PUSH
32444: LD_VAR 0 5
32448: ST_TO_ADDR
// end ;
32449: LD_VAR 0 2
32453: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32454: LD_INT 0
32456: PPUSH
32457: PPUSH
32458: PPUSH
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
// if not factory then
32463: LD_VAR 0 1
32467: NOT
32468: IFFALSE 32472
// exit ;
32470: GO 33065
// if control = control_apeman then
32472: LD_VAR 0 4
32476: PUSH
32477: LD_INT 5
32479: EQUAL
32480: IFFALSE 32589
// begin tmp := UnitsInside ( factory ) ;
32482: LD_ADDR_VAR 0 8
32486: PUSH
32487: LD_VAR 0 1
32491: PPUSH
32492: CALL_OW 313
32496: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32497: LD_VAR 0 8
32501: PPUSH
32502: LD_INT 25
32504: PUSH
32505: LD_INT 12
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PPUSH
32512: CALL_OW 72
32516: NOT
32517: IFFALSE 32527
// control := control_manual ;
32519: LD_ADDR_VAR 0 4
32523: PUSH
32524: LD_INT 1
32526: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32527: LD_ADDR_VAR 0 8
32531: PUSH
32532: LD_VAR 0 1
32536: PPUSH
32537: CALL 32224 0 1
32541: ST_TO_ADDR
// if tmp then
32542: LD_VAR 0 8
32546: IFFALSE 32589
// begin for i in tmp do
32548: LD_ADDR_VAR 0 7
32552: PUSH
32553: LD_VAR 0 8
32557: PUSH
32558: FOR_IN
32559: IFFALSE 32587
// if i [ 1 ] = b_ext_radio then
32561: LD_VAR 0 7
32565: PUSH
32566: LD_INT 1
32568: ARRAY
32569: PUSH
32570: LD_INT 22
32572: EQUAL
32573: IFFALSE 32585
// begin control := control_remote ;
32575: LD_ADDR_VAR 0 4
32579: PUSH
32580: LD_INT 2
32582: ST_TO_ADDR
// break ;
32583: GO 32587
// end ;
32585: GO 32558
32587: POP
32588: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32589: LD_VAR 0 1
32593: PPUSH
32594: LD_VAR 0 2
32598: PPUSH
32599: LD_VAR 0 3
32603: PPUSH
32604: LD_VAR 0 4
32608: PPUSH
32609: LD_VAR 0 5
32613: PPUSH
32614: CALL_OW 448
32618: IFFALSE 32653
// begin result := [ chassis , engine , control , weapon ] ;
32620: LD_ADDR_VAR 0 6
32624: PUSH
32625: LD_VAR 0 2
32629: PUSH
32630: LD_VAR 0 3
32634: PUSH
32635: LD_VAR 0 4
32639: PUSH
32640: LD_VAR 0 5
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: ST_TO_ADDR
// exit ;
32651: GO 33065
// end ; _chassis := AvailableChassisList ( factory ) ;
32653: LD_ADDR_VAR 0 9
32657: PUSH
32658: LD_VAR 0 1
32662: PPUSH
32663: CALL_OW 475
32667: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32668: LD_ADDR_VAR 0 11
32672: PUSH
32673: LD_VAR 0 1
32677: PPUSH
32678: CALL_OW 476
32682: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32683: LD_ADDR_VAR 0 12
32687: PUSH
32688: LD_VAR 0 1
32692: PPUSH
32693: CALL_OW 477
32697: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32698: LD_ADDR_VAR 0 10
32702: PUSH
32703: LD_VAR 0 1
32707: PPUSH
32708: CALL_OW 478
32712: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32713: LD_VAR 0 9
32717: NOT
32718: PUSH
32719: LD_VAR 0 11
32723: NOT
32724: OR
32725: PUSH
32726: LD_VAR 0 12
32730: NOT
32731: OR
32732: PUSH
32733: LD_VAR 0 10
32737: NOT
32738: OR
32739: IFFALSE 32774
// begin result := [ chassis , engine , control , weapon ] ;
32741: LD_ADDR_VAR 0 6
32745: PUSH
32746: LD_VAR 0 2
32750: PUSH
32751: LD_VAR 0 3
32755: PUSH
32756: LD_VAR 0 4
32760: PUSH
32761: LD_VAR 0 5
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: ST_TO_ADDR
// exit ;
32772: GO 33065
// end ; if not chassis in _chassis then
32774: LD_VAR 0 2
32778: PUSH
32779: LD_VAR 0 9
32783: IN
32784: NOT
32785: IFFALSE 32811
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32787: LD_ADDR_VAR 0 2
32791: PUSH
32792: LD_VAR 0 9
32796: PUSH
32797: LD_INT 1
32799: PPUSH
32800: LD_VAR 0 9
32804: PPUSH
32805: CALL_OW 12
32809: ARRAY
32810: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32811: LD_VAR 0 2
32815: PPUSH
32816: LD_VAR 0 3
32820: PPUSH
32821: CALL 33070 0 2
32825: NOT
32826: IFFALSE 32885
// repeat engine := _engine [ 1 ] ;
32828: LD_ADDR_VAR 0 3
32832: PUSH
32833: LD_VAR 0 11
32837: PUSH
32838: LD_INT 1
32840: ARRAY
32841: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32842: LD_ADDR_VAR 0 11
32846: PUSH
32847: LD_VAR 0 11
32851: PPUSH
32852: LD_INT 1
32854: PPUSH
32855: CALL_OW 3
32859: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32860: LD_VAR 0 2
32864: PPUSH
32865: LD_VAR 0 3
32869: PPUSH
32870: CALL 33070 0 2
32874: PUSH
32875: LD_VAR 0 11
32879: PUSH
32880: EMPTY
32881: EQUAL
32882: OR
32883: IFFALSE 32828
// if not control in _control then
32885: LD_VAR 0 4
32889: PUSH
32890: LD_VAR 0 12
32894: IN
32895: NOT
32896: IFFALSE 32922
// control := _control [ rand ( 1 , _control ) ] ;
32898: LD_ADDR_VAR 0 4
32902: PUSH
32903: LD_VAR 0 12
32907: PUSH
32908: LD_INT 1
32910: PPUSH
32911: LD_VAR 0 12
32915: PPUSH
32916: CALL_OW 12
32920: ARRAY
32921: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32922: LD_VAR 0 2
32926: PPUSH
32927: LD_VAR 0 5
32931: PPUSH
32932: CALL 33290 0 2
32936: NOT
32937: IFFALSE 32996
// repeat weapon := _weapon [ 1 ] ;
32939: LD_ADDR_VAR 0 5
32943: PUSH
32944: LD_VAR 0 10
32948: PUSH
32949: LD_INT 1
32951: ARRAY
32952: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32953: LD_ADDR_VAR 0 10
32957: PUSH
32958: LD_VAR 0 10
32962: PPUSH
32963: LD_INT 1
32965: PPUSH
32966: CALL_OW 3
32970: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32971: LD_VAR 0 2
32975: PPUSH
32976: LD_VAR 0 5
32980: PPUSH
32981: CALL 33290 0 2
32985: PUSH
32986: LD_VAR 0 10
32990: PUSH
32991: EMPTY
32992: EQUAL
32993: OR
32994: IFFALSE 32939
// result := [ ] ;
32996: LD_ADDR_VAR 0 6
33000: PUSH
33001: EMPTY
33002: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33003: LD_VAR 0 1
33007: PPUSH
33008: LD_VAR 0 2
33012: PPUSH
33013: LD_VAR 0 3
33017: PPUSH
33018: LD_VAR 0 4
33022: PPUSH
33023: LD_VAR 0 5
33027: PPUSH
33028: CALL_OW 448
33032: IFFALSE 33065
// result := [ chassis , engine , control , weapon ] ;
33034: LD_ADDR_VAR 0 6
33038: PUSH
33039: LD_VAR 0 2
33043: PUSH
33044: LD_VAR 0 3
33048: PUSH
33049: LD_VAR 0 4
33053: PUSH
33054: LD_VAR 0 5
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: ST_TO_ADDR
// end ;
33065: LD_VAR 0 6
33069: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33070: LD_INT 0
33072: PPUSH
// if not chassis or not engine then
33073: LD_VAR 0 1
33077: NOT
33078: PUSH
33079: LD_VAR 0 2
33083: NOT
33084: OR
33085: IFFALSE 33089
// exit ;
33087: GO 33285
// case engine of engine_solar :
33089: LD_VAR 0 2
33093: PUSH
33094: LD_INT 2
33096: DOUBLE
33097: EQUAL
33098: IFTRUE 33102
33100: GO 33140
33102: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33103: LD_ADDR_VAR 0 3
33107: PUSH
33108: LD_INT 11
33110: PUSH
33111: LD_INT 12
33113: PUSH
33114: LD_INT 13
33116: PUSH
33117: LD_INT 14
33119: PUSH
33120: LD_INT 1
33122: PUSH
33123: LD_INT 2
33125: PUSH
33126: LD_INT 3
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: ST_TO_ADDR
33138: GO 33269
33140: LD_INT 1
33142: DOUBLE
33143: EQUAL
33144: IFTRUE 33148
33146: GO 33210
33148: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33149: LD_ADDR_VAR 0 3
33153: PUSH
33154: LD_INT 11
33156: PUSH
33157: LD_INT 12
33159: PUSH
33160: LD_INT 13
33162: PUSH
33163: LD_INT 14
33165: PUSH
33166: LD_INT 1
33168: PUSH
33169: LD_INT 2
33171: PUSH
33172: LD_INT 3
33174: PUSH
33175: LD_INT 4
33177: PUSH
33178: LD_INT 5
33180: PUSH
33181: LD_INT 21
33183: PUSH
33184: LD_INT 23
33186: PUSH
33187: LD_INT 22
33189: PUSH
33190: LD_INT 24
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: ST_TO_ADDR
33208: GO 33269
33210: LD_INT 3
33212: DOUBLE
33213: EQUAL
33214: IFTRUE 33218
33216: GO 33268
33218: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33219: LD_ADDR_VAR 0 3
33223: PUSH
33224: LD_INT 13
33226: PUSH
33227: LD_INT 14
33229: PUSH
33230: LD_INT 2
33232: PUSH
33233: LD_INT 3
33235: PUSH
33236: LD_INT 4
33238: PUSH
33239: LD_INT 5
33241: PUSH
33242: LD_INT 21
33244: PUSH
33245: LD_INT 22
33247: PUSH
33248: LD_INT 23
33250: PUSH
33251: LD_INT 24
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: ST_TO_ADDR
33266: GO 33269
33268: POP
// result := ( chassis in result ) ;
33269: LD_ADDR_VAR 0 3
33273: PUSH
33274: LD_VAR 0 1
33278: PUSH
33279: LD_VAR 0 3
33283: IN
33284: ST_TO_ADDR
// end ;
33285: LD_VAR 0 3
33289: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33290: LD_INT 0
33292: PPUSH
// if not chassis or not weapon then
33293: LD_VAR 0 1
33297: NOT
33298: PUSH
33299: LD_VAR 0 2
33303: NOT
33304: OR
33305: IFFALSE 33309
// exit ;
33307: GO 34335
// case weapon of us_machine_gun :
33309: LD_VAR 0 2
33313: PUSH
33314: LD_INT 2
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33352
33322: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33323: LD_ADDR_VAR 0 3
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: LD_INT 3
33336: PUSH
33337: LD_INT 4
33339: PUSH
33340: LD_INT 5
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: ST_TO_ADDR
33350: GO 34319
33352: LD_INT 3
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33390
33360: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33361: LD_ADDR_VAR 0 3
33365: PUSH
33366: LD_INT 1
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 3
33374: PUSH
33375: LD_INT 4
33377: PUSH
33378: LD_INT 5
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: ST_TO_ADDR
33388: GO 34319
33390: LD_INT 11
33392: DOUBLE
33393: EQUAL
33394: IFTRUE 33398
33396: GO 33428
33398: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33399: LD_ADDR_VAR 0 3
33403: PUSH
33404: LD_INT 1
33406: PUSH
33407: LD_INT 2
33409: PUSH
33410: LD_INT 3
33412: PUSH
33413: LD_INT 4
33415: PUSH
33416: LD_INT 5
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: ST_TO_ADDR
33426: GO 34319
33428: LD_INT 4
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33436
33434: GO 33462
33436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33437: LD_ADDR_VAR 0 3
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: LD_INT 3
33447: PUSH
33448: LD_INT 4
33450: PUSH
33451: LD_INT 5
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: ST_TO_ADDR
33460: GO 34319
33462: LD_INT 5
33464: DOUBLE
33465: EQUAL
33466: IFTRUE 33470
33468: GO 33496
33470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33471: LD_ADDR_VAR 0 3
33475: PUSH
33476: LD_INT 2
33478: PUSH
33479: LD_INT 3
33481: PUSH
33482: LD_INT 4
33484: PUSH
33485: LD_INT 5
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: ST_TO_ADDR
33494: GO 34319
33496: LD_INT 9
33498: DOUBLE
33499: EQUAL
33500: IFTRUE 33504
33502: GO 33530
33504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33505: LD_ADDR_VAR 0 3
33509: PUSH
33510: LD_INT 2
33512: PUSH
33513: LD_INT 3
33515: PUSH
33516: LD_INT 4
33518: PUSH
33519: LD_INT 5
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: ST_TO_ADDR
33528: GO 34319
33530: LD_INT 7
33532: DOUBLE
33533: EQUAL
33534: IFTRUE 33538
33536: GO 33564
33538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33539: LD_ADDR_VAR 0 3
33543: PUSH
33544: LD_INT 2
33546: PUSH
33547: LD_INT 3
33549: PUSH
33550: LD_INT 4
33552: PUSH
33553: LD_INT 5
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: ST_TO_ADDR
33562: GO 34319
33564: LD_INT 12
33566: DOUBLE
33567: EQUAL
33568: IFTRUE 33572
33570: GO 33598
33572: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33573: LD_ADDR_VAR 0 3
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: LD_INT 3
33583: PUSH
33584: LD_INT 4
33586: PUSH
33587: LD_INT 5
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: ST_TO_ADDR
33596: GO 34319
33598: LD_INT 13
33600: DOUBLE
33601: EQUAL
33602: IFTRUE 33606
33604: GO 33632
33606: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33607: LD_ADDR_VAR 0 3
33611: PUSH
33612: LD_INT 2
33614: PUSH
33615: LD_INT 3
33617: PUSH
33618: LD_INT 4
33620: PUSH
33621: LD_INT 5
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: ST_TO_ADDR
33630: GO 34319
33632: LD_INT 14
33634: DOUBLE
33635: EQUAL
33636: IFTRUE 33640
33638: GO 33658
33640: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33641: LD_ADDR_VAR 0 3
33645: PUSH
33646: LD_INT 4
33648: PUSH
33649: LD_INT 5
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: ST_TO_ADDR
33656: GO 34319
33658: LD_INT 6
33660: DOUBLE
33661: EQUAL
33662: IFTRUE 33666
33664: GO 33684
33666: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33667: LD_ADDR_VAR 0 3
33671: PUSH
33672: LD_INT 4
33674: PUSH
33675: LD_INT 5
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: ST_TO_ADDR
33682: GO 34319
33684: LD_INT 10
33686: DOUBLE
33687: EQUAL
33688: IFTRUE 33692
33690: GO 33710
33692: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33693: LD_ADDR_VAR 0 3
33697: PUSH
33698: LD_INT 4
33700: PUSH
33701: LD_INT 5
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: ST_TO_ADDR
33708: GO 34319
33710: LD_INT 22
33712: DOUBLE
33713: EQUAL
33714: IFTRUE 33718
33716: GO 33744
33718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: LD_INT 11
33726: PUSH
33727: LD_INT 12
33729: PUSH
33730: LD_INT 13
33732: PUSH
33733: LD_INT 14
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: ST_TO_ADDR
33742: GO 34319
33744: LD_INT 23
33746: DOUBLE
33747: EQUAL
33748: IFTRUE 33752
33750: GO 33778
33752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33753: LD_ADDR_VAR 0 3
33757: PUSH
33758: LD_INT 11
33760: PUSH
33761: LD_INT 12
33763: PUSH
33764: LD_INT 13
33766: PUSH
33767: LD_INT 14
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: ST_TO_ADDR
33776: GO 34319
33778: LD_INT 24
33780: DOUBLE
33781: EQUAL
33782: IFTRUE 33786
33784: GO 33812
33786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33787: LD_ADDR_VAR 0 3
33791: PUSH
33792: LD_INT 11
33794: PUSH
33795: LD_INT 12
33797: PUSH
33798: LD_INT 13
33800: PUSH
33801: LD_INT 14
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: ST_TO_ADDR
33810: GO 34319
33812: LD_INT 30
33814: DOUBLE
33815: EQUAL
33816: IFTRUE 33820
33818: GO 33846
33820: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33821: LD_ADDR_VAR 0 3
33825: PUSH
33826: LD_INT 11
33828: PUSH
33829: LD_INT 12
33831: PUSH
33832: LD_INT 13
33834: PUSH
33835: LD_INT 14
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: ST_TO_ADDR
33844: GO 34319
33846: LD_INT 25
33848: DOUBLE
33849: EQUAL
33850: IFTRUE 33854
33852: GO 33872
33854: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33855: LD_ADDR_VAR 0 3
33859: PUSH
33860: LD_INT 13
33862: PUSH
33863: LD_INT 14
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: ST_TO_ADDR
33870: GO 34319
33872: LD_INT 27
33874: DOUBLE
33875: EQUAL
33876: IFTRUE 33880
33878: GO 33898
33880: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33881: LD_ADDR_VAR 0 3
33885: PUSH
33886: LD_INT 13
33888: PUSH
33889: LD_INT 14
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: ST_TO_ADDR
33896: GO 34319
33898: LD_INT 28
33900: DOUBLE
33901: EQUAL
33902: IFTRUE 33906
33904: GO 33924
33906: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33907: LD_ADDR_VAR 0 3
33911: PUSH
33912: LD_INT 13
33914: PUSH
33915: LD_INT 14
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: ST_TO_ADDR
33922: GO 34319
33924: LD_INT 29
33926: DOUBLE
33927: EQUAL
33928: IFTRUE 33932
33930: GO 33950
33932: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33933: LD_ADDR_VAR 0 3
33937: PUSH
33938: LD_INT 13
33940: PUSH
33941: LD_INT 14
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: ST_TO_ADDR
33948: GO 34319
33950: LD_INT 31
33952: DOUBLE
33953: EQUAL
33954: IFTRUE 33958
33956: GO 33976
33958: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33959: LD_ADDR_VAR 0 3
33963: PUSH
33964: LD_INT 13
33966: PUSH
33967: LD_INT 14
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: ST_TO_ADDR
33974: GO 34319
33976: LD_INT 26
33978: DOUBLE
33979: EQUAL
33980: IFTRUE 33984
33982: GO 34002
33984: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33985: LD_ADDR_VAR 0 3
33989: PUSH
33990: LD_INT 13
33992: PUSH
33993: LD_INT 14
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: ST_TO_ADDR
34000: GO 34319
34002: LD_INT 42
34004: DOUBLE
34005: EQUAL
34006: IFTRUE 34010
34008: GO 34036
34010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34011: LD_ADDR_VAR 0 3
34015: PUSH
34016: LD_INT 21
34018: PUSH
34019: LD_INT 22
34021: PUSH
34022: LD_INT 23
34024: PUSH
34025: LD_INT 24
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: ST_TO_ADDR
34034: GO 34319
34036: LD_INT 43
34038: DOUBLE
34039: EQUAL
34040: IFTRUE 34044
34042: GO 34070
34044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34045: LD_ADDR_VAR 0 3
34049: PUSH
34050: LD_INT 21
34052: PUSH
34053: LD_INT 22
34055: PUSH
34056: LD_INT 23
34058: PUSH
34059: LD_INT 24
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: ST_TO_ADDR
34068: GO 34319
34070: LD_INT 44
34072: DOUBLE
34073: EQUAL
34074: IFTRUE 34078
34076: GO 34104
34078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34079: LD_ADDR_VAR 0 3
34083: PUSH
34084: LD_INT 21
34086: PUSH
34087: LD_INT 22
34089: PUSH
34090: LD_INT 23
34092: PUSH
34093: LD_INT 24
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: ST_TO_ADDR
34102: GO 34319
34104: LD_INT 45
34106: DOUBLE
34107: EQUAL
34108: IFTRUE 34112
34110: GO 34138
34112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34113: LD_ADDR_VAR 0 3
34117: PUSH
34118: LD_INT 21
34120: PUSH
34121: LD_INT 22
34123: PUSH
34124: LD_INT 23
34126: PUSH
34127: LD_INT 24
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: ST_TO_ADDR
34136: GO 34319
34138: LD_INT 49
34140: DOUBLE
34141: EQUAL
34142: IFTRUE 34146
34144: GO 34172
34146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34147: LD_ADDR_VAR 0 3
34151: PUSH
34152: LD_INT 21
34154: PUSH
34155: LD_INT 22
34157: PUSH
34158: LD_INT 23
34160: PUSH
34161: LD_INT 24
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: ST_TO_ADDR
34170: GO 34319
34172: LD_INT 51
34174: DOUBLE
34175: EQUAL
34176: IFTRUE 34180
34178: GO 34206
34180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34181: LD_ADDR_VAR 0 3
34185: PUSH
34186: LD_INT 21
34188: PUSH
34189: LD_INT 22
34191: PUSH
34192: LD_INT 23
34194: PUSH
34195: LD_INT 24
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: ST_TO_ADDR
34204: GO 34319
34206: LD_INT 52
34208: DOUBLE
34209: EQUAL
34210: IFTRUE 34214
34212: GO 34240
34214: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34215: LD_ADDR_VAR 0 3
34219: PUSH
34220: LD_INT 21
34222: PUSH
34223: LD_INT 22
34225: PUSH
34226: LD_INT 23
34228: PUSH
34229: LD_INT 24
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: ST_TO_ADDR
34238: GO 34319
34240: LD_INT 53
34242: DOUBLE
34243: EQUAL
34244: IFTRUE 34248
34246: GO 34266
34248: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34249: LD_ADDR_VAR 0 3
34253: PUSH
34254: LD_INT 23
34256: PUSH
34257: LD_INT 24
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: ST_TO_ADDR
34264: GO 34319
34266: LD_INT 46
34268: DOUBLE
34269: EQUAL
34270: IFTRUE 34274
34272: GO 34292
34274: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34275: LD_ADDR_VAR 0 3
34279: PUSH
34280: LD_INT 23
34282: PUSH
34283: LD_INT 24
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: ST_TO_ADDR
34290: GO 34319
34292: LD_INT 47
34294: DOUBLE
34295: EQUAL
34296: IFTRUE 34300
34298: GO 34318
34300: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34301: LD_ADDR_VAR 0 3
34305: PUSH
34306: LD_INT 23
34308: PUSH
34309: LD_INT 24
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: ST_TO_ADDR
34316: GO 34319
34318: POP
// result := ( chassis in result ) ;
34319: LD_ADDR_VAR 0 3
34323: PUSH
34324: LD_VAR 0 1
34328: PUSH
34329: LD_VAR 0 3
34333: IN
34334: ST_TO_ADDR
// end ;
34335: LD_VAR 0 3
34339: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34340: LD_INT 0
34342: PPUSH
34343: PPUSH
34344: PPUSH
34345: PPUSH
34346: PPUSH
34347: PPUSH
34348: PPUSH
// result := array ;
34349: LD_ADDR_VAR 0 5
34353: PUSH
34354: LD_VAR 0 1
34358: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34359: LD_VAR 0 1
34363: NOT
34364: PUSH
34365: LD_VAR 0 2
34369: NOT
34370: OR
34371: PUSH
34372: LD_VAR 0 3
34376: NOT
34377: OR
34378: PUSH
34379: LD_VAR 0 2
34383: PUSH
34384: LD_VAR 0 1
34388: GREATER
34389: OR
34390: PUSH
34391: LD_VAR 0 3
34395: PUSH
34396: LD_VAR 0 1
34400: GREATER
34401: OR
34402: IFFALSE 34406
// exit ;
34404: GO 34702
// if direction then
34406: LD_VAR 0 4
34410: IFFALSE 34474
// begin d := 1 ;
34412: LD_ADDR_VAR 0 9
34416: PUSH
34417: LD_INT 1
34419: ST_TO_ADDR
// if i_from > i_to then
34420: LD_VAR 0 2
34424: PUSH
34425: LD_VAR 0 3
34429: GREATER
34430: IFFALSE 34456
// length := ( array - i_from ) + i_to else
34432: LD_ADDR_VAR 0 11
34436: PUSH
34437: LD_VAR 0 1
34441: PUSH
34442: LD_VAR 0 2
34446: MINUS
34447: PUSH
34448: LD_VAR 0 3
34452: PLUS
34453: ST_TO_ADDR
34454: GO 34472
// length := i_to - i_from ;
34456: LD_ADDR_VAR 0 11
34460: PUSH
34461: LD_VAR 0 3
34465: PUSH
34466: LD_VAR 0 2
34470: MINUS
34471: ST_TO_ADDR
// end else
34472: GO 34535
// begin d := - 1 ;
34474: LD_ADDR_VAR 0 9
34478: PUSH
34479: LD_INT 1
34481: NEG
34482: ST_TO_ADDR
// if i_from > i_to then
34483: LD_VAR 0 2
34487: PUSH
34488: LD_VAR 0 3
34492: GREATER
34493: IFFALSE 34513
// length := i_from - i_to else
34495: LD_ADDR_VAR 0 11
34499: PUSH
34500: LD_VAR 0 2
34504: PUSH
34505: LD_VAR 0 3
34509: MINUS
34510: ST_TO_ADDR
34511: GO 34535
// length := ( array - i_to ) + i_from ;
34513: LD_ADDR_VAR 0 11
34517: PUSH
34518: LD_VAR 0 1
34522: PUSH
34523: LD_VAR 0 3
34527: MINUS
34528: PUSH
34529: LD_VAR 0 2
34533: PLUS
34534: ST_TO_ADDR
// end ; if not length then
34535: LD_VAR 0 11
34539: NOT
34540: IFFALSE 34544
// exit ;
34542: GO 34702
// tmp := array ;
34544: LD_ADDR_VAR 0 10
34548: PUSH
34549: LD_VAR 0 1
34553: ST_TO_ADDR
// for i = 1 to length do
34554: LD_ADDR_VAR 0 6
34558: PUSH
34559: DOUBLE
34560: LD_INT 1
34562: DEC
34563: ST_TO_ADDR
34564: LD_VAR 0 11
34568: PUSH
34569: FOR_TO
34570: IFFALSE 34690
// begin for j = 1 to array do
34572: LD_ADDR_VAR 0 7
34576: PUSH
34577: DOUBLE
34578: LD_INT 1
34580: DEC
34581: ST_TO_ADDR
34582: LD_VAR 0 1
34586: PUSH
34587: FOR_TO
34588: IFFALSE 34676
// begin k := j + d ;
34590: LD_ADDR_VAR 0 8
34594: PUSH
34595: LD_VAR 0 7
34599: PUSH
34600: LD_VAR 0 9
34604: PLUS
34605: ST_TO_ADDR
// if k > array then
34606: LD_VAR 0 8
34610: PUSH
34611: LD_VAR 0 1
34615: GREATER
34616: IFFALSE 34626
// k := 1 ;
34618: LD_ADDR_VAR 0 8
34622: PUSH
34623: LD_INT 1
34625: ST_TO_ADDR
// if not k then
34626: LD_VAR 0 8
34630: NOT
34631: IFFALSE 34643
// k := array ;
34633: LD_ADDR_VAR 0 8
34637: PUSH
34638: LD_VAR 0 1
34642: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34643: LD_ADDR_VAR 0 10
34647: PUSH
34648: LD_VAR 0 10
34652: PPUSH
34653: LD_VAR 0 8
34657: PPUSH
34658: LD_VAR 0 1
34662: PUSH
34663: LD_VAR 0 7
34667: ARRAY
34668: PPUSH
34669: CALL_OW 1
34673: ST_TO_ADDR
// end ;
34674: GO 34587
34676: POP
34677: POP
// array := tmp ;
34678: LD_ADDR_VAR 0 1
34682: PUSH
34683: LD_VAR 0 10
34687: ST_TO_ADDR
// end ;
34688: GO 34569
34690: POP
34691: POP
// result := array ;
34692: LD_ADDR_VAR 0 5
34696: PUSH
34697: LD_VAR 0 1
34701: ST_TO_ADDR
// end ;
34702: LD_VAR 0 5
34706: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34707: LD_INT 0
34709: PPUSH
34710: PPUSH
// result := 0 ;
34711: LD_ADDR_VAR 0 3
34715: PUSH
34716: LD_INT 0
34718: ST_TO_ADDR
// if not array or not value in array then
34719: LD_VAR 0 1
34723: NOT
34724: PUSH
34725: LD_VAR 0 2
34729: PUSH
34730: LD_VAR 0 1
34734: IN
34735: NOT
34736: OR
34737: IFFALSE 34741
// exit ;
34739: GO 34795
// for i = 1 to array do
34741: LD_ADDR_VAR 0 4
34745: PUSH
34746: DOUBLE
34747: LD_INT 1
34749: DEC
34750: ST_TO_ADDR
34751: LD_VAR 0 1
34755: PUSH
34756: FOR_TO
34757: IFFALSE 34793
// if value = array [ i ] then
34759: LD_VAR 0 2
34763: PUSH
34764: LD_VAR 0 1
34768: PUSH
34769: LD_VAR 0 4
34773: ARRAY
34774: EQUAL
34775: IFFALSE 34791
// begin result := i ;
34777: LD_ADDR_VAR 0 3
34781: PUSH
34782: LD_VAR 0 4
34786: ST_TO_ADDR
// exit ;
34787: POP
34788: POP
34789: GO 34795
// end ;
34791: GO 34756
34793: POP
34794: POP
// end ;
34795: LD_VAR 0 3
34799: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34800: LD_INT 0
34802: PPUSH
// vc_chassis := chassis ;
34803: LD_ADDR_OWVAR 37
34807: PUSH
34808: LD_VAR 0 1
34812: ST_TO_ADDR
// vc_engine := engine ;
34813: LD_ADDR_OWVAR 39
34817: PUSH
34818: LD_VAR 0 2
34822: ST_TO_ADDR
// vc_control := control ;
34823: LD_ADDR_OWVAR 38
34827: PUSH
34828: LD_VAR 0 3
34832: ST_TO_ADDR
// vc_weapon := weapon ;
34833: LD_ADDR_OWVAR 40
34837: PUSH
34838: LD_VAR 0 4
34842: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34843: LD_ADDR_OWVAR 41
34847: PUSH
34848: LD_VAR 0 5
34852: ST_TO_ADDR
// end ;
34853: LD_VAR 0 6
34857: RET
// export function WantPlant ( unit ) ; var task ; begin
34858: LD_INT 0
34860: PPUSH
34861: PPUSH
// result := false ;
34862: LD_ADDR_VAR 0 2
34866: PUSH
34867: LD_INT 0
34869: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34870: LD_ADDR_VAR 0 3
34874: PUSH
34875: LD_VAR 0 1
34879: PPUSH
34880: CALL_OW 437
34884: ST_TO_ADDR
// if task then
34885: LD_VAR 0 3
34889: IFFALSE 34917
// if task [ 1 ] [ 1 ] = p then
34891: LD_VAR 0 3
34895: PUSH
34896: LD_INT 1
34898: ARRAY
34899: PUSH
34900: LD_INT 1
34902: ARRAY
34903: PUSH
34904: LD_STRING p
34906: EQUAL
34907: IFFALSE 34917
// result := true ;
34909: LD_ADDR_VAR 0 2
34913: PUSH
34914: LD_INT 1
34916: ST_TO_ADDR
// end ;
34917: LD_VAR 0 2
34921: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34922: LD_INT 0
34924: PPUSH
34925: PPUSH
34926: PPUSH
34927: PPUSH
// if pos < 1 then
34928: LD_VAR 0 2
34932: PUSH
34933: LD_INT 1
34935: LESS
34936: IFFALSE 34940
// exit ;
34938: GO 35243
// if pos = 1 then
34940: LD_VAR 0 2
34944: PUSH
34945: LD_INT 1
34947: EQUAL
34948: IFFALSE 34981
// result := Replace ( arr , pos [ 1 ] , value ) else
34950: LD_ADDR_VAR 0 4
34954: PUSH
34955: LD_VAR 0 1
34959: PPUSH
34960: LD_VAR 0 2
34964: PUSH
34965: LD_INT 1
34967: ARRAY
34968: PPUSH
34969: LD_VAR 0 3
34973: PPUSH
34974: CALL_OW 1
34978: ST_TO_ADDR
34979: GO 35243
// begin tmp := arr ;
34981: LD_ADDR_VAR 0 6
34985: PUSH
34986: LD_VAR 0 1
34990: ST_TO_ADDR
// s_arr := [ tmp ] ;
34991: LD_ADDR_VAR 0 7
34995: PUSH
34996: LD_VAR 0 6
35000: PUSH
35001: EMPTY
35002: LIST
35003: ST_TO_ADDR
// for i = 1 to pos - 1 do
35004: LD_ADDR_VAR 0 5
35008: PUSH
35009: DOUBLE
35010: LD_INT 1
35012: DEC
35013: ST_TO_ADDR
35014: LD_VAR 0 2
35018: PUSH
35019: LD_INT 1
35021: MINUS
35022: PUSH
35023: FOR_TO
35024: IFFALSE 35069
// begin tmp := tmp [ pos [ i ] ] ;
35026: LD_ADDR_VAR 0 6
35030: PUSH
35031: LD_VAR 0 6
35035: PUSH
35036: LD_VAR 0 2
35040: PUSH
35041: LD_VAR 0 5
35045: ARRAY
35046: ARRAY
35047: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35048: LD_ADDR_VAR 0 7
35052: PUSH
35053: LD_VAR 0 7
35057: PUSH
35058: LD_VAR 0 6
35062: PUSH
35063: EMPTY
35064: LIST
35065: ADD
35066: ST_TO_ADDR
// end ;
35067: GO 35023
35069: POP
35070: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35071: LD_ADDR_VAR 0 6
35075: PUSH
35076: LD_VAR 0 6
35080: PPUSH
35081: LD_VAR 0 2
35085: PUSH
35086: LD_VAR 0 2
35090: ARRAY
35091: PPUSH
35092: LD_VAR 0 3
35096: PPUSH
35097: CALL_OW 1
35101: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35102: LD_ADDR_VAR 0 7
35106: PUSH
35107: LD_VAR 0 7
35111: PPUSH
35112: LD_VAR 0 7
35116: PPUSH
35117: LD_VAR 0 6
35121: PPUSH
35122: CALL_OW 1
35126: ST_TO_ADDR
// for i = s_arr downto 2 do
35127: LD_ADDR_VAR 0 5
35131: PUSH
35132: DOUBLE
35133: LD_VAR 0 7
35137: INC
35138: ST_TO_ADDR
35139: LD_INT 2
35141: PUSH
35142: FOR_DOWNTO
35143: IFFALSE 35227
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35145: LD_ADDR_VAR 0 6
35149: PUSH
35150: LD_VAR 0 7
35154: PUSH
35155: LD_VAR 0 5
35159: PUSH
35160: LD_INT 1
35162: MINUS
35163: ARRAY
35164: PPUSH
35165: LD_VAR 0 2
35169: PUSH
35170: LD_VAR 0 5
35174: PUSH
35175: LD_INT 1
35177: MINUS
35178: ARRAY
35179: PPUSH
35180: LD_VAR 0 7
35184: PUSH
35185: LD_VAR 0 5
35189: ARRAY
35190: PPUSH
35191: CALL_OW 1
35195: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35196: LD_ADDR_VAR 0 7
35200: PUSH
35201: LD_VAR 0 7
35205: PPUSH
35206: LD_VAR 0 5
35210: PUSH
35211: LD_INT 1
35213: MINUS
35214: PPUSH
35215: LD_VAR 0 6
35219: PPUSH
35220: CALL_OW 1
35224: ST_TO_ADDR
// end ;
35225: GO 35142
35227: POP
35228: POP
// result := s_arr [ 1 ] ;
35229: LD_ADDR_VAR 0 4
35233: PUSH
35234: LD_VAR 0 7
35238: PUSH
35239: LD_INT 1
35241: ARRAY
35242: ST_TO_ADDR
// end ; end ;
35243: LD_VAR 0 4
35247: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35248: LD_INT 0
35250: PPUSH
35251: PPUSH
// if not list then
35252: LD_VAR 0 1
35256: NOT
35257: IFFALSE 35261
// exit ;
35259: GO 35352
// i := list [ pos1 ] ;
35261: LD_ADDR_VAR 0 5
35265: PUSH
35266: LD_VAR 0 1
35270: PUSH
35271: LD_VAR 0 2
35275: ARRAY
35276: ST_TO_ADDR
// if not i then
35277: LD_VAR 0 5
35281: NOT
35282: IFFALSE 35286
// exit ;
35284: GO 35352
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35286: LD_ADDR_VAR 0 1
35290: PUSH
35291: LD_VAR 0 1
35295: PPUSH
35296: LD_VAR 0 2
35300: PPUSH
35301: LD_VAR 0 1
35305: PUSH
35306: LD_VAR 0 3
35310: ARRAY
35311: PPUSH
35312: CALL_OW 1
35316: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35317: LD_ADDR_VAR 0 1
35321: PUSH
35322: LD_VAR 0 1
35326: PPUSH
35327: LD_VAR 0 3
35331: PPUSH
35332: LD_VAR 0 5
35336: PPUSH
35337: CALL_OW 1
35341: ST_TO_ADDR
// result := list ;
35342: LD_ADDR_VAR 0 4
35346: PUSH
35347: LD_VAR 0 1
35351: ST_TO_ADDR
// end ;
35352: LD_VAR 0 4
35356: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35357: LD_INT 0
35359: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35360: LD_ADDR_VAR 0 5
35364: PUSH
35365: LD_VAR 0 1
35369: PPUSH
35370: CALL_OW 250
35374: PPUSH
35375: LD_VAR 0 1
35379: PPUSH
35380: CALL_OW 251
35384: PPUSH
35385: LD_VAR 0 2
35389: PPUSH
35390: LD_VAR 0 3
35394: PPUSH
35395: LD_VAR 0 4
35399: PPUSH
35400: CALL 35410 0 5
35404: ST_TO_ADDR
// end ;
35405: LD_VAR 0 5
35409: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35410: LD_INT 0
35412: PPUSH
35413: PPUSH
35414: PPUSH
35415: PPUSH
// if not list then
35416: LD_VAR 0 3
35420: NOT
35421: IFFALSE 35425
// exit ;
35423: GO 35813
// result := [ ] ;
35425: LD_ADDR_VAR 0 6
35429: PUSH
35430: EMPTY
35431: ST_TO_ADDR
// for i in list do
35432: LD_ADDR_VAR 0 7
35436: PUSH
35437: LD_VAR 0 3
35441: PUSH
35442: FOR_IN
35443: IFFALSE 35645
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35445: LD_ADDR_VAR 0 9
35449: PUSH
35450: LD_VAR 0 7
35454: PPUSH
35455: LD_VAR 0 1
35459: PPUSH
35460: LD_VAR 0 2
35464: PPUSH
35465: CALL_OW 297
35469: ST_TO_ADDR
// if not result then
35470: LD_VAR 0 6
35474: NOT
35475: IFFALSE 35501
// result := [ [ i , tmp ] ] else
35477: LD_ADDR_VAR 0 6
35481: PUSH
35482: LD_VAR 0 7
35486: PUSH
35487: LD_VAR 0 9
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: EMPTY
35497: LIST
35498: ST_TO_ADDR
35499: GO 35643
// begin if result [ result ] [ 2 ] < tmp then
35501: LD_VAR 0 6
35505: PUSH
35506: LD_VAR 0 6
35510: ARRAY
35511: PUSH
35512: LD_INT 2
35514: ARRAY
35515: PUSH
35516: LD_VAR 0 9
35520: LESS
35521: IFFALSE 35563
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35523: LD_ADDR_VAR 0 6
35527: PUSH
35528: LD_VAR 0 6
35532: PPUSH
35533: LD_VAR 0 6
35537: PUSH
35538: LD_INT 1
35540: PLUS
35541: PPUSH
35542: LD_VAR 0 7
35546: PUSH
35547: LD_VAR 0 9
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PPUSH
35556: CALL_OW 2
35560: ST_TO_ADDR
35561: GO 35643
// for j = 1 to result do
35563: LD_ADDR_VAR 0 8
35567: PUSH
35568: DOUBLE
35569: LD_INT 1
35571: DEC
35572: ST_TO_ADDR
35573: LD_VAR 0 6
35577: PUSH
35578: FOR_TO
35579: IFFALSE 35641
// begin if tmp < result [ j ] [ 2 ] then
35581: LD_VAR 0 9
35585: PUSH
35586: LD_VAR 0 6
35590: PUSH
35591: LD_VAR 0 8
35595: ARRAY
35596: PUSH
35597: LD_INT 2
35599: ARRAY
35600: LESS
35601: IFFALSE 35639
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35603: LD_ADDR_VAR 0 6
35607: PUSH
35608: LD_VAR 0 6
35612: PPUSH
35613: LD_VAR 0 8
35617: PPUSH
35618: LD_VAR 0 7
35622: PUSH
35623: LD_VAR 0 9
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PPUSH
35632: CALL_OW 2
35636: ST_TO_ADDR
// break ;
35637: GO 35641
// end ; end ;
35639: GO 35578
35641: POP
35642: POP
// end ; end ;
35643: GO 35442
35645: POP
35646: POP
// if result and not asc then
35647: LD_VAR 0 6
35651: PUSH
35652: LD_VAR 0 4
35656: NOT
35657: AND
35658: IFFALSE 35733
// begin tmp := result ;
35660: LD_ADDR_VAR 0 9
35664: PUSH
35665: LD_VAR 0 6
35669: ST_TO_ADDR
// for i = tmp downto 1 do
35670: LD_ADDR_VAR 0 7
35674: PUSH
35675: DOUBLE
35676: LD_VAR 0 9
35680: INC
35681: ST_TO_ADDR
35682: LD_INT 1
35684: PUSH
35685: FOR_DOWNTO
35686: IFFALSE 35731
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35688: LD_ADDR_VAR 0 6
35692: PUSH
35693: LD_VAR 0 6
35697: PPUSH
35698: LD_VAR 0 9
35702: PUSH
35703: LD_VAR 0 7
35707: MINUS
35708: PUSH
35709: LD_INT 1
35711: PLUS
35712: PPUSH
35713: LD_VAR 0 9
35717: PUSH
35718: LD_VAR 0 7
35722: ARRAY
35723: PPUSH
35724: CALL_OW 1
35728: ST_TO_ADDR
35729: GO 35685
35731: POP
35732: POP
// end ; tmp := [ ] ;
35733: LD_ADDR_VAR 0 9
35737: PUSH
35738: EMPTY
35739: ST_TO_ADDR
// if mode then
35740: LD_VAR 0 5
35744: IFFALSE 35813
// begin for i = 1 to result do
35746: LD_ADDR_VAR 0 7
35750: PUSH
35751: DOUBLE
35752: LD_INT 1
35754: DEC
35755: ST_TO_ADDR
35756: LD_VAR 0 6
35760: PUSH
35761: FOR_TO
35762: IFFALSE 35801
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35764: LD_ADDR_VAR 0 9
35768: PUSH
35769: LD_VAR 0 9
35773: PPUSH
35774: LD_VAR 0 7
35778: PPUSH
35779: LD_VAR 0 6
35783: PUSH
35784: LD_VAR 0 7
35788: ARRAY
35789: PUSH
35790: LD_INT 1
35792: ARRAY
35793: PPUSH
35794: CALL_OW 1
35798: ST_TO_ADDR
35799: GO 35761
35801: POP
35802: POP
// result := tmp ;
35803: LD_ADDR_VAR 0 6
35807: PUSH
35808: LD_VAR 0 9
35812: ST_TO_ADDR
// end ; end ;
35813: LD_VAR 0 6
35817: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35818: LD_INT 0
35820: PPUSH
35821: PPUSH
35822: PPUSH
35823: PPUSH
35824: PPUSH
35825: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35826: LD_ADDR_VAR 0 5
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: LD_INT 0
35839: PUSH
35840: EMPTY
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: ST_TO_ADDR
// if not x or not y then
35848: LD_VAR 0 2
35852: NOT
35853: PUSH
35854: LD_VAR 0 3
35858: NOT
35859: OR
35860: IFFALSE 35864
// exit ;
35862: GO 37510
// if not range then
35864: LD_VAR 0 4
35868: NOT
35869: IFFALSE 35879
// range := 10 ;
35871: LD_ADDR_VAR 0 4
35875: PUSH
35876: LD_INT 10
35878: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35879: LD_ADDR_VAR 0 8
35883: PUSH
35884: LD_INT 81
35886: PUSH
35887: LD_VAR 0 1
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 92
35898: PUSH
35899: LD_VAR 0 2
35903: PUSH
35904: LD_VAR 0 3
35908: PUSH
35909: LD_VAR 0 4
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 3
35922: PUSH
35923: LD_INT 21
35925: PUSH
35926: LD_INT 3
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: LIST
35941: PPUSH
35942: CALL_OW 69
35946: ST_TO_ADDR
// if not tmp then
35947: LD_VAR 0 8
35951: NOT
35952: IFFALSE 35956
// exit ;
35954: GO 37510
// for i in tmp do
35956: LD_ADDR_VAR 0 6
35960: PUSH
35961: LD_VAR 0 8
35965: PUSH
35966: FOR_IN
35967: IFFALSE 37485
// begin points := [ 0 , 0 , 0 ] ;
35969: LD_ADDR_VAR 0 9
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: LD_INT 0
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: LIST
35987: ST_TO_ADDR
// bpoints := 1 ;
35988: LD_ADDR_VAR 0 10
35992: PUSH
35993: LD_INT 1
35995: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35996: LD_VAR 0 6
36000: PPUSH
36001: CALL_OW 247
36005: PUSH
36006: LD_INT 1
36008: DOUBLE
36009: EQUAL
36010: IFTRUE 36014
36012: GO 36592
36014: POP
// begin if GetClass ( i ) = 1 then
36015: LD_VAR 0 6
36019: PPUSH
36020: CALL_OW 257
36024: PUSH
36025: LD_INT 1
36027: EQUAL
36028: IFFALSE 36049
// points := [ 10 , 5 , 3 ] ;
36030: LD_ADDR_VAR 0 9
36034: PUSH
36035: LD_INT 10
36037: PUSH
36038: LD_INT 5
36040: PUSH
36041: LD_INT 3
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36049: LD_VAR 0 6
36053: PPUSH
36054: CALL_OW 257
36058: PUSH
36059: LD_INT 2
36061: PUSH
36062: LD_INT 3
36064: PUSH
36065: LD_INT 4
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: LIST
36072: IN
36073: IFFALSE 36094
// points := [ 3 , 2 , 1 ] ;
36075: LD_ADDR_VAR 0 9
36079: PUSH
36080: LD_INT 3
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: LD_INT 1
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36094: LD_VAR 0 6
36098: PPUSH
36099: CALL_OW 257
36103: PUSH
36104: LD_INT 5
36106: EQUAL
36107: IFFALSE 36128
// points := [ 130 , 5 , 2 ] ;
36109: LD_ADDR_VAR 0 9
36113: PUSH
36114: LD_INT 130
36116: PUSH
36117: LD_INT 5
36119: PUSH
36120: LD_INT 2
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36128: LD_VAR 0 6
36132: PPUSH
36133: CALL_OW 257
36137: PUSH
36138: LD_INT 8
36140: EQUAL
36141: IFFALSE 36162
// points := [ 35 , 35 , 30 ] ;
36143: LD_ADDR_VAR 0 9
36147: PUSH
36148: LD_INT 35
36150: PUSH
36151: LD_INT 35
36153: PUSH
36154: LD_INT 30
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36162: LD_VAR 0 6
36166: PPUSH
36167: CALL_OW 257
36171: PUSH
36172: LD_INT 9
36174: EQUAL
36175: IFFALSE 36196
// points := [ 20 , 55 , 40 ] ;
36177: LD_ADDR_VAR 0 9
36181: PUSH
36182: LD_INT 20
36184: PUSH
36185: LD_INT 55
36187: PUSH
36188: LD_INT 40
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: LIST
36195: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36196: LD_VAR 0 6
36200: PPUSH
36201: CALL_OW 257
36205: PUSH
36206: LD_INT 12
36208: PUSH
36209: LD_INT 16
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: IN
36216: IFFALSE 36237
// points := [ 5 , 3 , 2 ] ;
36218: LD_ADDR_VAR 0 9
36222: PUSH
36223: LD_INT 5
36225: PUSH
36226: LD_INT 3
36228: PUSH
36229: LD_INT 2
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: LIST
36236: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36237: LD_VAR 0 6
36241: PPUSH
36242: CALL_OW 257
36246: PUSH
36247: LD_INT 17
36249: EQUAL
36250: IFFALSE 36271
// points := [ 100 , 50 , 75 ] ;
36252: LD_ADDR_VAR 0 9
36256: PUSH
36257: LD_INT 100
36259: PUSH
36260: LD_INT 50
36262: PUSH
36263: LD_INT 75
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: LIST
36270: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36271: LD_VAR 0 6
36275: PPUSH
36276: CALL_OW 257
36280: PUSH
36281: LD_INT 15
36283: EQUAL
36284: IFFALSE 36305
// points := [ 10 , 5 , 3 ] ;
36286: LD_ADDR_VAR 0 9
36290: PUSH
36291: LD_INT 10
36293: PUSH
36294: LD_INT 5
36296: PUSH
36297: LD_INT 3
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: LIST
36304: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36305: LD_VAR 0 6
36309: PPUSH
36310: CALL_OW 257
36314: PUSH
36315: LD_INT 14
36317: EQUAL
36318: IFFALSE 36339
// points := [ 10 , 0 , 0 ] ;
36320: LD_ADDR_VAR 0 9
36324: PUSH
36325: LD_INT 10
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: LIST
36338: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36339: LD_VAR 0 6
36343: PPUSH
36344: CALL_OW 257
36348: PUSH
36349: LD_INT 11
36351: EQUAL
36352: IFFALSE 36373
// points := [ 30 , 10 , 5 ] ;
36354: LD_ADDR_VAR 0 9
36358: PUSH
36359: LD_INT 30
36361: PUSH
36362: LD_INT 10
36364: PUSH
36365: LD_INT 5
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: LIST
36372: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36373: LD_VAR 0 1
36377: PPUSH
36378: LD_INT 5
36380: PPUSH
36381: CALL_OW 321
36385: PUSH
36386: LD_INT 2
36388: EQUAL
36389: IFFALSE 36406
// bpoints := bpoints * 1.8 ;
36391: LD_ADDR_VAR 0 10
36395: PUSH
36396: LD_VAR 0 10
36400: PUSH
36401: LD_REAL  1.80000000000000E+0000
36404: MUL
36405: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36406: LD_VAR 0 6
36410: PPUSH
36411: CALL_OW 257
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: LD_INT 3
36424: PUSH
36425: LD_INT 4
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: IN
36434: PUSH
36435: LD_VAR 0 1
36439: PPUSH
36440: LD_INT 51
36442: PPUSH
36443: CALL_OW 321
36447: PUSH
36448: LD_INT 2
36450: EQUAL
36451: AND
36452: IFFALSE 36469
// bpoints := bpoints * 1.2 ;
36454: LD_ADDR_VAR 0 10
36458: PUSH
36459: LD_VAR 0 10
36463: PUSH
36464: LD_REAL  1.20000000000000E+0000
36467: MUL
36468: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36469: LD_VAR 0 6
36473: PPUSH
36474: CALL_OW 257
36478: PUSH
36479: LD_INT 5
36481: PUSH
36482: LD_INT 7
36484: PUSH
36485: LD_INT 9
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: LIST
36492: IN
36493: PUSH
36494: LD_VAR 0 1
36498: PPUSH
36499: LD_INT 52
36501: PPUSH
36502: CALL_OW 321
36506: PUSH
36507: LD_INT 2
36509: EQUAL
36510: AND
36511: IFFALSE 36528
// bpoints := bpoints * 1.5 ;
36513: LD_ADDR_VAR 0 10
36517: PUSH
36518: LD_VAR 0 10
36522: PUSH
36523: LD_REAL  1.50000000000000E+0000
36526: MUL
36527: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36528: LD_VAR 0 1
36532: PPUSH
36533: LD_INT 66
36535: PPUSH
36536: CALL_OW 321
36540: PUSH
36541: LD_INT 2
36543: EQUAL
36544: IFFALSE 36561
// bpoints := bpoints * 1.1 ;
36546: LD_ADDR_VAR 0 10
36550: PUSH
36551: LD_VAR 0 10
36555: PUSH
36556: LD_REAL  1.10000000000000E+0000
36559: MUL
36560: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36561: LD_ADDR_VAR 0 10
36565: PUSH
36566: LD_VAR 0 10
36570: PUSH
36571: LD_VAR 0 6
36575: PPUSH
36576: LD_INT 1
36578: PPUSH
36579: CALL_OW 259
36583: PUSH
36584: LD_REAL  1.15000000000000E+0000
36587: MUL
36588: MUL
36589: ST_TO_ADDR
// end ; unit_vehicle :
36590: GO 37414
36592: LD_INT 2
36594: DOUBLE
36595: EQUAL
36596: IFTRUE 36600
36598: GO 37402
36600: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36601: LD_VAR 0 6
36605: PPUSH
36606: CALL_OW 264
36610: PUSH
36611: LD_INT 2
36613: PUSH
36614: LD_INT 42
36616: PUSH
36617: LD_INT 24
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: LIST
36624: IN
36625: IFFALSE 36646
// points := [ 25 , 5 , 3 ] ;
36627: LD_ADDR_VAR 0 9
36631: PUSH
36632: LD_INT 25
36634: PUSH
36635: LD_INT 5
36637: PUSH
36638: LD_INT 3
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: LIST
36645: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36646: LD_VAR 0 6
36650: PPUSH
36651: CALL_OW 264
36655: PUSH
36656: LD_INT 4
36658: PUSH
36659: LD_INT 43
36661: PUSH
36662: LD_INT 25
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: LIST
36669: IN
36670: IFFALSE 36691
// points := [ 40 , 15 , 5 ] ;
36672: LD_ADDR_VAR 0 9
36676: PUSH
36677: LD_INT 40
36679: PUSH
36680: LD_INT 15
36682: PUSH
36683: LD_INT 5
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: LIST
36690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36691: LD_VAR 0 6
36695: PPUSH
36696: CALL_OW 264
36700: PUSH
36701: LD_INT 3
36703: PUSH
36704: LD_INT 23
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: IN
36711: IFFALSE 36732
// points := [ 7 , 25 , 8 ] ;
36713: LD_ADDR_VAR 0 9
36717: PUSH
36718: LD_INT 7
36720: PUSH
36721: LD_INT 25
36723: PUSH
36724: LD_INT 8
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36732: LD_VAR 0 6
36736: PPUSH
36737: CALL_OW 264
36741: PUSH
36742: LD_INT 5
36744: PUSH
36745: LD_INT 27
36747: PUSH
36748: LD_INT 44
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: IN
36756: IFFALSE 36777
// points := [ 14 , 50 , 16 ] ;
36758: LD_ADDR_VAR 0 9
36762: PUSH
36763: LD_INT 14
36765: PUSH
36766: LD_INT 50
36768: PUSH
36769: LD_INT 16
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: LIST
36776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36777: LD_VAR 0 6
36781: PPUSH
36782: CALL_OW 264
36786: PUSH
36787: LD_INT 6
36789: PUSH
36790: LD_INT 46
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: IN
36797: IFFALSE 36818
// points := [ 32 , 120 , 70 ] ;
36799: LD_ADDR_VAR 0 9
36803: PUSH
36804: LD_INT 32
36806: PUSH
36807: LD_INT 120
36809: PUSH
36810: LD_INT 70
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
36818: LD_VAR 0 6
36822: PPUSH
36823: CALL_OW 264
36827: PUSH
36828: LD_INT 7
36830: PUSH
36831: LD_INT 28
36833: PUSH
36834: LD_INT 45
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: LIST
36841: IN
36842: IFFALSE 36863
// points := [ 35 , 20 , 45 ] ;
36844: LD_ADDR_VAR 0 9
36848: PUSH
36849: LD_INT 35
36851: PUSH
36852: LD_INT 20
36854: PUSH
36855: LD_INT 45
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36863: LD_VAR 0 6
36867: PPUSH
36868: CALL_OW 264
36872: PUSH
36873: LD_INT 47
36875: PUSH
36876: EMPTY
36877: LIST
36878: IN
36879: IFFALSE 36900
// points := [ 67 , 45 , 75 ] ;
36881: LD_ADDR_VAR 0 9
36885: PUSH
36886: LD_INT 67
36888: PUSH
36889: LD_INT 45
36891: PUSH
36892: LD_INT 75
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36900: LD_VAR 0 6
36904: PPUSH
36905: CALL_OW 264
36909: PUSH
36910: LD_INT 26
36912: PUSH
36913: EMPTY
36914: LIST
36915: IN
36916: IFFALSE 36937
// points := [ 120 , 30 , 80 ] ;
36918: LD_ADDR_VAR 0 9
36922: PUSH
36923: LD_INT 120
36925: PUSH
36926: LD_INT 30
36928: PUSH
36929: LD_INT 80
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: LIST
36936: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36937: LD_VAR 0 6
36941: PPUSH
36942: CALL_OW 264
36946: PUSH
36947: LD_INT 22
36949: PUSH
36950: EMPTY
36951: LIST
36952: IN
36953: IFFALSE 36974
// points := [ 40 , 1 , 1 ] ;
36955: LD_ADDR_VAR 0 9
36959: PUSH
36960: LD_INT 40
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: LIST
36973: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36974: LD_VAR 0 6
36978: PPUSH
36979: CALL_OW 264
36983: PUSH
36984: LD_INT 29
36986: PUSH
36987: EMPTY
36988: LIST
36989: IN
36990: IFFALSE 37011
// points := [ 70 , 200 , 400 ] ;
36992: LD_ADDR_VAR 0 9
36996: PUSH
36997: LD_INT 70
36999: PUSH
37000: LD_INT 200
37002: PUSH
37003: LD_INT 400
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: LIST
37010: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37011: LD_VAR 0 6
37015: PPUSH
37016: CALL_OW 264
37020: PUSH
37021: LD_INT 14
37023: PUSH
37024: LD_INT 53
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: IN
37031: IFFALSE 37052
// points := [ 40 , 10 , 20 ] ;
37033: LD_ADDR_VAR 0 9
37037: PUSH
37038: LD_INT 40
37040: PUSH
37041: LD_INT 10
37043: PUSH
37044: LD_INT 20
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: LIST
37051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37052: LD_VAR 0 6
37056: PPUSH
37057: CALL_OW 264
37061: PUSH
37062: LD_INT 9
37064: PUSH
37065: EMPTY
37066: LIST
37067: IN
37068: IFFALSE 37089
// points := [ 5 , 70 , 20 ] ;
37070: LD_ADDR_VAR 0 9
37074: PUSH
37075: LD_INT 5
37077: PUSH
37078: LD_INT 70
37080: PUSH
37081: LD_INT 20
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: LIST
37088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37089: LD_VAR 0 6
37093: PPUSH
37094: CALL_OW 264
37098: PUSH
37099: LD_INT 10
37101: PUSH
37102: EMPTY
37103: LIST
37104: IN
37105: IFFALSE 37126
// points := [ 35 , 110 , 70 ] ;
37107: LD_ADDR_VAR 0 9
37111: PUSH
37112: LD_INT 35
37114: PUSH
37115: LD_INT 110
37117: PUSH
37118: LD_INT 70
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: LIST
37125: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37126: LD_VAR 0 6
37130: PPUSH
37131: CALL_OW 265
37135: PUSH
37136: LD_INT 25
37138: EQUAL
37139: IFFALSE 37160
// points := [ 80 , 65 , 100 ] ;
37141: LD_ADDR_VAR 0 9
37145: PUSH
37146: LD_INT 80
37148: PUSH
37149: LD_INT 65
37151: PUSH
37152: LD_INT 100
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37160: LD_VAR 0 6
37164: PPUSH
37165: CALL_OW 263
37169: PUSH
37170: LD_INT 1
37172: EQUAL
37173: IFFALSE 37208
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37175: LD_ADDR_VAR 0 10
37179: PUSH
37180: LD_VAR 0 10
37184: PUSH
37185: LD_VAR 0 6
37189: PPUSH
37190: CALL_OW 311
37194: PPUSH
37195: LD_INT 3
37197: PPUSH
37198: CALL_OW 259
37202: PUSH
37203: LD_INT 4
37205: MUL
37206: MUL
37207: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37208: LD_VAR 0 6
37212: PPUSH
37213: CALL_OW 263
37217: PUSH
37218: LD_INT 2
37220: EQUAL
37221: IFFALSE 37272
// begin j := IsControledBy ( i ) ;
37223: LD_ADDR_VAR 0 7
37227: PUSH
37228: LD_VAR 0 6
37232: PPUSH
37233: CALL_OW 312
37237: ST_TO_ADDR
// if j then
37238: LD_VAR 0 7
37242: IFFALSE 37272
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37244: LD_ADDR_VAR 0 10
37248: PUSH
37249: LD_VAR 0 10
37253: PUSH
37254: LD_VAR 0 7
37258: PPUSH
37259: LD_INT 3
37261: PPUSH
37262: CALL_OW 259
37266: PUSH
37267: LD_INT 3
37269: MUL
37270: MUL
37271: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37272: LD_VAR 0 6
37276: PPUSH
37277: CALL_OW 264
37281: PUSH
37282: LD_INT 5
37284: PUSH
37285: LD_INT 6
37287: PUSH
37288: LD_INT 46
37290: PUSH
37291: LD_INT 44
37293: PUSH
37294: LD_INT 47
37296: PUSH
37297: LD_INT 45
37299: PUSH
37300: LD_INT 28
37302: PUSH
37303: LD_INT 7
37305: PUSH
37306: LD_INT 27
37308: PUSH
37309: LD_INT 29
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: IN
37324: PUSH
37325: LD_VAR 0 1
37329: PPUSH
37330: LD_INT 52
37332: PPUSH
37333: CALL_OW 321
37337: PUSH
37338: LD_INT 2
37340: EQUAL
37341: AND
37342: IFFALSE 37359
// bpoints := bpoints * 1.2 ;
37344: LD_ADDR_VAR 0 10
37348: PUSH
37349: LD_VAR 0 10
37353: PUSH
37354: LD_REAL  1.20000000000000E+0000
37357: MUL
37358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37359: LD_VAR 0 6
37363: PPUSH
37364: CALL_OW 264
37368: PUSH
37369: LD_INT 6
37371: PUSH
37372: LD_INT 46
37374: PUSH
37375: LD_INT 47
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: IN
37383: IFFALSE 37400
// bpoints := bpoints * 1.2 ;
37385: LD_ADDR_VAR 0 10
37389: PUSH
37390: LD_VAR 0 10
37394: PUSH
37395: LD_REAL  1.20000000000000E+0000
37398: MUL
37399: ST_TO_ADDR
// end ; unit_building :
37400: GO 37414
37402: LD_INT 3
37404: DOUBLE
37405: EQUAL
37406: IFTRUE 37410
37408: GO 37413
37410: POP
// ; end ;
37411: GO 37414
37413: POP
// for j = 1 to 3 do
37414: LD_ADDR_VAR 0 7
37418: PUSH
37419: DOUBLE
37420: LD_INT 1
37422: DEC
37423: ST_TO_ADDR
37424: LD_INT 3
37426: PUSH
37427: FOR_TO
37428: IFFALSE 37481
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37430: LD_ADDR_VAR 0 5
37434: PUSH
37435: LD_VAR 0 5
37439: PPUSH
37440: LD_VAR 0 7
37444: PPUSH
37445: LD_VAR 0 5
37449: PUSH
37450: LD_VAR 0 7
37454: ARRAY
37455: PUSH
37456: LD_VAR 0 9
37460: PUSH
37461: LD_VAR 0 7
37465: ARRAY
37466: PUSH
37467: LD_VAR 0 10
37471: MUL
37472: PLUS
37473: PPUSH
37474: CALL_OW 1
37478: ST_TO_ADDR
37479: GO 37427
37481: POP
37482: POP
// end ;
37483: GO 35966
37485: POP
37486: POP
// result := Replace ( result , 4 , tmp ) ;
37487: LD_ADDR_VAR 0 5
37491: PUSH
37492: LD_VAR 0 5
37496: PPUSH
37497: LD_INT 4
37499: PPUSH
37500: LD_VAR 0 8
37504: PPUSH
37505: CALL_OW 1
37509: ST_TO_ADDR
// end ;
37510: LD_VAR 0 5
37514: RET
// export function DangerAtRange ( unit , range ) ; begin
37515: LD_INT 0
37517: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37518: LD_ADDR_VAR 0 3
37522: PUSH
37523: LD_VAR 0 1
37527: PPUSH
37528: CALL_OW 255
37532: PPUSH
37533: LD_VAR 0 1
37537: PPUSH
37538: CALL_OW 250
37542: PPUSH
37543: LD_VAR 0 1
37547: PPUSH
37548: CALL_OW 251
37552: PPUSH
37553: LD_VAR 0 2
37557: PPUSH
37558: CALL 35818 0 4
37562: ST_TO_ADDR
// end ;
37563: LD_VAR 0 3
37567: RET
// export function DangerInArea ( side , area ) ; begin
37568: LD_INT 0
37570: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37571: LD_ADDR_VAR 0 3
37575: PUSH
37576: LD_VAR 0 2
37580: PPUSH
37581: LD_INT 81
37583: PUSH
37584: LD_VAR 0 1
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PPUSH
37593: CALL_OW 70
37597: ST_TO_ADDR
// end ;
37598: LD_VAR 0 3
37602: RET
// export function IsExtension ( b ) ; begin
37603: LD_INT 0
37605: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37606: LD_ADDR_VAR 0 2
37610: PUSH
37611: LD_VAR 0 1
37615: PUSH
37616: LD_INT 23
37618: PUSH
37619: LD_INT 20
37621: PUSH
37622: LD_INT 22
37624: PUSH
37625: LD_INT 17
37627: PUSH
37628: LD_INT 24
37630: PUSH
37631: LD_INT 21
37633: PUSH
37634: LD_INT 19
37636: PUSH
37637: LD_INT 16
37639: PUSH
37640: LD_INT 25
37642: PUSH
37643: LD_INT 18
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: IN
37658: ST_TO_ADDR
// end ;
37659: LD_VAR 0 2
37663: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
37664: LD_INT 0
37666: PPUSH
37667: PPUSH
37668: PPUSH
// result := [ ] ;
37669: LD_ADDR_VAR 0 3
37673: PUSH
37674: EMPTY
37675: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37676: LD_ADDR_VAR 0 4
37680: PUSH
37681: LD_VAR 0 2
37685: PPUSH
37686: LD_INT 21
37688: PUSH
37689: LD_INT 3
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PPUSH
37696: CALL_OW 70
37700: ST_TO_ADDR
// if not tmp then
37701: LD_VAR 0 4
37705: NOT
37706: IFFALSE 37710
// exit ;
37708: GO 37768
// for i in tmp do
37710: LD_ADDR_VAR 0 5
37714: PUSH
37715: LD_VAR 0 4
37719: PUSH
37720: FOR_IN
37721: IFFALSE 37756
// if GetBase ( i ) <> base then
37723: LD_VAR 0 5
37727: PPUSH
37728: CALL_OW 274
37732: PUSH
37733: LD_VAR 0 1
37737: NONEQUAL
37738: IFFALSE 37754
// ComLinkToBase ( base , i ) ;
37740: LD_VAR 0 1
37744: PPUSH
37745: LD_VAR 0 5
37749: PPUSH
37750: CALL_OW 169
37754: GO 37720
37756: POP
37757: POP
// result := tmp ;
37758: LD_ADDR_VAR 0 3
37762: PUSH
37763: LD_VAR 0 4
37767: ST_TO_ADDR
// end ;
37768: LD_VAR 0 3
37772: RET
// export function ComComplete ( unit , b ) ; var i ; begin
37773: LD_INT 0
37775: PPUSH
37776: PPUSH
// if BuildingStatus ( b ) = bs_build then
37777: LD_VAR 0 2
37781: PPUSH
37782: CALL_OW 461
37786: PUSH
37787: LD_INT 1
37789: EQUAL
37790: IFFALSE 37850
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37792: LD_VAR 0 1
37796: PPUSH
37797: LD_STRING h
37799: PUSH
37800: LD_VAR 0 2
37804: PPUSH
37805: CALL_OW 250
37809: PUSH
37810: LD_VAR 0 2
37814: PPUSH
37815: CALL_OW 251
37819: PUSH
37820: LD_VAR 0 2
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: PUSH
37843: EMPTY
37844: LIST
37845: PPUSH
37846: CALL_OW 446
// end ;
37850: LD_VAR 0 3
37854: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37855: LD_INT 0
37857: PPUSH
37858: PPUSH
37859: PPUSH
37860: PPUSH
37861: PPUSH
37862: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37863: LD_VAR 0 1
37867: NOT
37868: PUSH
37869: LD_VAR 0 1
37873: PPUSH
37874: CALL_OW 263
37878: PUSH
37879: LD_INT 2
37881: EQUAL
37882: NOT
37883: OR
37884: IFFALSE 37888
// exit ;
37886: GO 38204
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37888: LD_ADDR_VAR 0 6
37892: PUSH
37893: LD_INT 22
37895: PUSH
37896: LD_VAR 0 1
37900: PPUSH
37901: CALL_OW 255
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: LD_INT 30
37915: PUSH
37916: LD_INT 36
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 34
37925: PUSH
37926: LD_INT 31
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PPUSH
37942: CALL_OW 69
37946: ST_TO_ADDR
// if not tmp then
37947: LD_VAR 0 6
37951: NOT
37952: IFFALSE 37956
// exit ;
37954: GO 38204
// result := [ ] ;
37956: LD_ADDR_VAR 0 2
37960: PUSH
37961: EMPTY
37962: ST_TO_ADDR
// for i in tmp do
37963: LD_ADDR_VAR 0 3
37967: PUSH
37968: LD_VAR 0 6
37972: PUSH
37973: FOR_IN
37974: IFFALSE 38045
// begin t := UnitsInside ( i ) ;
37976: LD_ADDR_VAR 0 4
37980: PUSH
37981: LD_VAR 0 3
37985: PPUSH
37986: CALL_OW 313
37990: ST_TO_ADDR
// if t then
37991: LD_VAR 0 4
37995: IFFALSE 38043
// for j in t do
37997: LD_ADDR_VAR 0 7
38001: PUSH
38002: LD_VAR 0 4
38006: PUSH
38007: FOR_IN
38008: IFFALSE 38041
// result := Insert ( result , result + 1 , j ) ;
38010: LD_ADDR_VAR 0 2
38014: PUSH
38015: LD_VAR 0 2
38019: PPUSH
38020: LD_VAR 0 2
38024: PUSH
38025: LD_INT 1
38027: PLUS
38028: PPUSH
38029: LD_VAR 0 7
38033: PPUSH
38034: CALL_OW 2
38038: ST_TO_ADDR
38039: GO 38007
38041: POP
38042: POP
// end ;
38043: GO 37973
38045: POP
38046: POP
// if not result then
38047: LD_VAR 0 2
38051: NOT
38052: IFFALSE 38056
// exit ;
38054: GO 38204
// mech := result [ 1 ] ;
38056: LD_ADDR_VAR 0 5
38060: PUSH
38061: LD_VAR 0 2
38065: PUSH
38066: LD_INT 1
38068: ARRAY
38069: ST_TO_ADDR
// if result > 1 then
38070: LD_VAR 0 2
38074: PUSH
38075: LD_INT 1
38077: GREATER
38078: IFFALSE 38190
// for i = 2 to result do
38080: LD_ADDR_VAR 0 3
38084: PUSH
38085: DOUBLE
38086: LD_INT 2
38088: DEC
38089: ST_TO_ADDR
38090: LD_VAR 0 2
38094: PUSH
38095: FOR_TO
38096: IFFALSE 38188
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38098: LD_ADDR_VAR 0 4
38102: PUSH
38103: LD_VAR 0 2
38107: PUSH
38108: LD_VAR 0 3
38112: ARRAY
38113: PPUSH
38114: LD_INT 3
38116: PPUSH
38117: CALL_OW 259
38121: PUSH
38122: LD_VAR 0 2
38126: PUSH
38127: LD_VAR 0 3
38131: ARRAY
38132: PPUSH
38133: CALL_OW 432
38137: MINUS
38138: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38139: LD_VAR 0 4
38143: PUSH
38144: LD_VAR 0 5
38148: PPUSH
38149: LD_INT 3
38151: PPUSH
38152: CALL_OW 259
38156: PUSH
38157: LD_VAR 0 5
38161: PPUSH
38162: CALL_OW 432
38166: MINUS
38167: GREATEREQUAL
38168: IFFALSE 38186
// mech := result [ i ] ;
38170: LD_ADDR_VAR 0 5
38174: PUSH
38175: LD_VAR 0 2
38179: PUSH
38180: LD_VAR 0 3
38184: ARRAY
38185: ST_TO_ADDR
// end ;
38186: GO 38095
38188: POP
38189: POP
// ComLinkTo ( vehicle , mech ) ;
38190: LD_VAR 0 1
38194: PPUSH
38195: LD_VAR 0 5
38199: PPUSH
38200: CALL_OW 135
// end ;
38204: LD_VAR 0 2
38208: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38209: LD_INT 0
38211: PPUSH
38212: PPUSH
38213: PPUSH
38214: PPUSH
38215: PPUSH
38216: PPUSH
38217: PPUSH
38218: PPUSH
38219: PPUSH
38220: PPUSH
38221: PPUSH
38222: PPUSH
38223: PPUSH
// result := [ ] ;
38224: LD_ADDR_VAR 0 7
38228: PUSH
38229: EMPTY
38230: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38231: LD_VAR 0 1
38235: PPUSH
38236: CALL_OW 266
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: IN
38251: NOT
38252: IFFALSE 38256
// exit ;
38254: GO 39887
// if name then
38256: LD_VAR 0 3
38260: IFFALSE 38276
// SetBName ( base_dep , name ) ;
38262: LD_VAR 0 1
38266: PPUSH
38267: LD_VAR 0 3
38271: PPUSH
38272: CALL_OW 500
// base := GetBase ( base_dep ) ;
38276: LD_ADDR_VAR 0 15
38280: PUSH
38281: LD_VAR 0 1
38285: PPUSH
38286: CALL_OW 274
38290: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38291: LD_ADDR_VAR 0 16
38295: PUSH
38296: LD_VAR 0 1
38300: PPUSH
38301: CALL_OW 255
38305: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38306: LD_ADDR_VAR 0 17
38310: PUSH
38311: LD_VAR 0 1
38315: PPUSH
38316: CALL_OW 248
38320: ST_TO_ADDR
// if sources then
38321: LD_VAR 0 5
38325: IFFALSE 38372
// for i = 1 to 3 do
38327: LD_ADDR_VAR 0 8
38331: PUSH
38332: DOUBLE
38333: LD_INT 1
38335: DEC
38336: ST_TO_ADDR
38337: LD_INT 3
38339: PUSH
38340: FOR_TO
38341: IFFALSE 38370
// AddResourceType ( base , i , sources [ i ] ) ;
38343: LD_VAR 0 15
38347: PPUSH
38348: LD_VAR 0 8
38352: PPUSH
38353: LD_VAR 0 5
38357: PUSH
38358: LD_VAR 0 8
38362: ARRAY
38363: PPUSH
38364: CALL_OW 276
38368: GO 38340
38370: POP
38371: POP
// buildings := GetBaseBuildings ( base , area ) ;
38372: LD_ADDR_VAR 0 18
38376: PUSH
38377: LD_VAR 0 15
38381: PPUSH
38382: LD_VAR 0 2
38386: PPUSH
38387: CALL 37664 0 2
38391: ST_TO_ADDR
// InitHc ;
38392: CALL_OW 19
// InitUc ;
38396: CALL_OW 18
// uc_side := side ;
38400: LD_ADDR_OWVAR 20
38404: PUSH
38405: LD_VAR 0 16
38409: ST_TO_ADDR
// uc_nation := nation ;
38410: LD_ADDR_OWVAR 21
38414: PUSH
38415: LD_VAR 0 17
38419: ST_TO_ADDR
// if buildings then
38420: LD_VAR 0 18
38424: IFFALSE 39746
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38426: LD_ADDR_VAR 0 19
38430: PUSH
38431: LD_VAR 0 18
38435: PPUSH
38436: LD_INT 2
38438: PUSH
38439: LD_INT 30
38441: PUSH
38442: LD_INT 29
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 30
38451: PUSH
38452: LD_INT 30
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: PPUSH
38464: CALL_OW 72
38468: ST_TO_ADDR
// if tmp then
38469: LD_VAR 0 19
38473: IFFALSE 38521
// for i in tmp do
38475: LD_ADDR_VAR 0 8
38479: PUSH
38480: LD_VAR 0 19
38484: PUSH
38485: FOR_IN
38486: IFFALSE 38519
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38488: LD_VAR 0 8
38492: PPUSH
38493: CALL_OW 250
38497: PPUSH
38498: LD_VAR 0 8
38502: PPUSH
38503: CALL_OW 251
38507: PPUSH
38508: LD_VAR 0 16
38512: PPUSH
38513: CALL_OW 441
38517: GO 38485
38519: POP
38520: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38521: LD_VAR 0 18
38525: PPUSH
38526: LD_INT 2
38528: PUSH
38529: LD_INT 30
38531: PUSH
38532: LD_INT 32
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 30
38541: PUSH
38542: LD_INT 33
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: PPUSH
38554: CALL_OW 72
38558: IFFALSE 38646
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38560: LD_ADDR_VAR 0 8
38564: PUSH
38565: LD_VAR 0 18
38569: PPUSH
38570: LD_INT 2
38572: PUSH
38573: LD_INT 30
38575: PUSH
38576: LD_INT 32
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 30
38585: PUSH
38586: LD_INT 33
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: LIST
38597: PPUSH
38598: CALL_OW 72
38602: PUSH
38603: FOR_IN
38604: IFFALSE 38644
// begin if not GetBWeapon ( i ) then
38606: LD_VAR 0 8
38610: PPUSH
38611: CALL_OW 269
38615: NOT
38616: IFFALSE 38642
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38618: LD_VAR 0 8
38622: PPUSH
38623: LD_VAR 0 8
38627: PPUSH
38628: LD_VAR 0 2
38632: PPUSH
38633: CALL 39892 0 2
38637: PPUSH
38638: CALL_OW 431
// end ;
38642: GO 38603
38644: POP
38645: POP
// end ; for i = 1 to personel do
38646: LD_ADDR_VAR 0 8
38650: PUSH
38651: DOUBLE
38652: LD_INT 1
38654: DEC
38655: ST_TO_ADDR
38656: LD_VAR 0 6
38660: PUSH
38661: FOR_TO
38662: IFFALSE 39726
// begin if i > 4 then
38664: LD_VAR 0 8
38668: PUSH
38669: LD_INT 4
38671: GREATER
38672: IFFALSE 38676
// break ;
38674: GO 39726
// case i of 1 :
38676: LD_VAR 0 8
38680: PUSH
38681: LD_INT 1
38683: DOUBLE
38684: EQUAL
38685: IFTRUE 38689
38687: GO 38769
38689: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38690: LD_ADDR_VAR 0 12
38694: PUSH
38695: LD_VAR 0 18
38699: PPUSH
38700: LD_INT 22
38702: PUSH
38703: LD_VAR 0 16
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 58
38714: PUSH
38715: EMPTY
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: LD_INT 30
38723: PUSH
38724: LD_INT 32
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 30
38733: PUSH
38734: LD_INT 4
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 30
38743: PUSH
38744: LD_INT 5
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: LIST
38761: PPUSH
38762: CALL_OW 72
38766: ST_TO_ADDR
38767: GO 38991
38769: LD_INT 2
38771: DOUBLE
38772: EQUAL
38773: IFTRUE 38777
38775: GO 38839
38777: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38778: LD_ADDR_VAR 0 12
38782: PUSH
38783: LD_VAR 0 18
38787: PPUSH
38788: LD_INT 22
38790: PUSH
38791: LD_VAR 0 16
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: PUSH
38803: LD_INT 30
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 30
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PPUSH
38832: CALL_OW 72
38836: ST_TO_ADDR
38837: GO 38991
38839: LD_INT 3
38841: DOUBLE
38842: EQUAL
38843: IFTRUE 38847
38845: GO 38909
38847: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38848: LD_ADDR_VAR 0 12
38852: PUSH
38853: LD_VAR 0 18
38857: PPUSH
38858: LD_INT 22
38860: PUSH
38861: LD_VAR 0 16
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: LD_INT 30
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 30
38885: PUSH
38886: LD_INT 3
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: LIST
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PPUSH
38902: CALL_OW 72
38906: ST_TO_ADDR
38907: GO 38991
38909: LD_INT 4
38911: DOUBLE
38912: EQUAL
38913: IFTRUE 38917
38915: GO 38990
38917: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38918: LD_ADDR_VAR 0 12
38922: PUSH
38923: LD_VAR 0 18
38927: PPUSH
38928: LD_INT 22
38930: PUSH
38931: LD_VAR 0 16
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 2
38942: PUSH
38943: LD_INT 30
38945: PUSH
38946: LD_INT 6
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 30
38955: PUSH
38956: LD_INT 7
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 30
38965: PUSH
38966: LD_INT 8
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PPUSH
38983: CALL_OW 72
38987: ST_TO_ADDR
38988: GO 38991
38990: POP
// if i = 1 then
38991: LD_VAR 0 8
38995: PUSH
38996: LD_INT 1
38998: EQUAL
38999: IFFALSE 39110
// begin tmp := [ ] ;
39001: LD_ADDR_VAR 0 19
39005: PUSH
39006: EMPTY
39007: ST_TO_ADDR
// for j in f do
39008: LD_ADDR_VAR 0 9
39012: PUSH
39013: LD_VAR 0 12
39017: PUSH
39018: FOR_IN
39019: IFFALSE 39092
// if GetBType ( j ) = b_bunker then
39021: LD_VAR 0 9
39025: PPUSH
39026: CALL_OW 266
39030: PUSH
39031: LD_INT 32
39033: EQUAL
39034: IFFALSE 39061
// tmp := Insert ( tmp , 1 , j ) else
39036: LD_ADDR_VAR 0 19
39040: PUSH
39041: LD_VAR 0 19
39045: PPUSH
39046: LD_INT 1
39048: PPUSH
39049: LD_VAR 0 9
39053: PPUSH
39054: CALL_OW 2
39058: ST_TO_ADDR
39059: GO 39090
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39061: LD_ADDR_VAR 0 19
39065: PUSH
39066: LD_VAR 0 19
39070: PPUSH
39071: LD_VAR 0 19
39075: PUSH
39076: LD_INT 1
39078: PLUS
39079: PPUSH
39080: LD_VAR 0 9
39084: PPUSH
39085: CALL_OW 2
39089: ST_TO_ADDR
39090: GO 39018
39092: POP
39093: POP
// if tmp then
39094: LD_VAR 0 19
39098: IFFALSE 39110
// f := tmp ;
39100: LD_ADDR_VAR 0 12
39104: PUSH
39105: LD_VAR 0 19
39109: ST_TO_ADDR
// end ; x := personel [ i ] ;
39110: LD_ADDR_VAR 0 13
39114: PUSH
39115: LD_VAR 0 6
39119: PUSH
39120: LD_VAR 0 8
39124: ARRAY
39125: ST_TO_ADDR
// if x = - 1 then
39126: LD_VAR 0 13
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: EQUAL
39135: IFFALSE 39344
// begin for j in f do
39137: LD_ADDR_VAR 0 9
39141: PUSH
39142: LD_VAR 0 12
39146: PUSH
39147: FOR_IN
39148: IFFALSE 39340
// repeat InitHc ;
39150: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39154: LD_VAR 0 9
39158: PPUSH
39159: CALL_OW 266
39163: PUSH
39164: LD_INT 5
39166: EQUAL
39167: IFFALSE 39237
// begin if UnitsInside ( j ) < 3 then
39169: LD_VAR 0 9
39173: PPUSH
39174: CALL_OW 313
39178: PUSH
39179: LD_INT 3
39181: LESS
39182: IFFALSE 39218
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39184: LD_INT 0
39186: PPUSH
39187: LD_INT 5
39189: PUSH
39190: LD_INT 8
39192: PUSH
39193: LD_INT 9
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: PUSH
39201: LD_VAR 0 17
39205: ARRAY
39206: PPUSH
39207: LD_VAR 0 4
39211: PPUSH
39212: CALL_OW 380
39216: GO 39235
// PrepareHuman ( false , i , skill ) ;
39218: LD_INT 0
39220: PPUSH
39221: LD_VAR 0 8
39225: PPUSH
39226: LD_VAR 0 4
39230: PPUSH
39231: CALL_OW 380
// end else
39235: GO 39254
// PrepareHuman ( false , i , skill ) ;
39237: LD_INT 0
39239: PPUSH
39240: LD_VAR 0 8
39244: PPUSH
39245: LD_VAR 0 4
39249: PPUSH
39250: CALL_OW 380
// un := CreateHuman ;
39254: LD_ADDR_VAR 0 14
39258: PUSH
39259: CALL_OW 44
39263: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39264: LD_ADDR_VAR 0 7
39268: PUSH
39269: LD_VAR 0 7
39273: PPUSH
39274: LD_INT 1
39276: PPUSH
39277: LD_VAR 0 14
39281: PPUSH
39282: CALL_OW 2
39286: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39287: LD_VAR 0 14
39291: PPUSH
39292: LD_VAR 0 9
39296: PPUSH
39297: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39301: LD_VAR 0 9
39305: PPUSH
39306: CALL_OW 313
39310: PUSH
39311: LD_INT 6
39313: EQUAL
39314: PUSH
39315: LD_VAR 0 9
39319: PPUSH
39320: CALL_OW 266
39324: PUSH
39325: LD_INT 32
39327: PUSH
39328: LD_INT 31
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: IN
39335: OR
39336: IFFALSE 39150
39338: GO 39147
39340: POP
39341: POP
// end else
39342: GO 39724
// for j = 1 to x do
39344: LD_ADDR_VAR 0 9
39348: PUSH
39349: DOUBLE
39350: LD_INT 1
39352: DEC
39353: ST_TO_ADDR
39354: LD_VAR 0 13
39358: PUSH
39359: FOR_TO
39360: IFFALSE 39722
// begin InitHc ;
39362: CALL_OW 19
// if not f then
39366: LD_VAR 0 12
39370: NOT
39371: IFFALSE 39460
// begin PrepareHuman ( false , i , skill ) ;
39373: LD_INT 0
39375: PPUSH
39376: LD_VAR 0 8
39380: PPUSH
39381: LD_VAR 0 4
39385: PPUSH
39386: CALL_OW 380
// un := CreateHuman ;
39390: LD_ADDR_VAR 0 14
39394: PUSH
39395: CALL_OW 44
39399: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39400: LD_ADDR_VAR 0 7
39404: PUSH
39405: LD_VAR 0 7
39409: PPUSH
39410: LD_INT 1
39412: PPUSH
39413: LD_VAR 0 14
39417: PPUSH
39418: CALL_OW 2
39422: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39423: LD_VAR 0 14
39427: PPUSH
39428: LD_VAR 0 1
39432: PPUSH
39433: CALL_OW 250
39437: PPUSH
39438: LD_VAR 0 1
39442: PPUSH
39443: CALL_OW 251
39447: PPUSH
39448: LD_INT 10
39450: PPUSH
39451: LD_INT 0
39453: PPUSH
39454: CALL_OW 50
// continue ;
39458: GO 39359
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39460: LD_VAR 0 12
39464: PUSH
39465: LD_INT 1
39467: ARRAY
39468: PPUSH
39469: CALL_OW 313
39473: PUSH
39474: LD_VAR 0 12
39478: PUSH
39479: LD_INT 1
39481: ARRAY
39482: PPUSH
39483: CALL_OW 266
39487: PUSH
39488: LD_INT 32
39490: PUSH
39491: LD_INT 31
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: IN
39498: AND
39499: PUSH
39500: LD_VAR 0 12
39504: PUSH
39505: LD_INT 1
39507: ARRAY
39508: PPUSH
39509: CALL_OW 313
39513: PUSH
39514: LD_INT 6
39516: EQUAL
39517: OR
39518: IFFALSE 39538
// f := Delete ( f , 1 ) ;
39520: LD_ADDR_VAR 0 12
39524: PUSH
39525: LD_VAR 0 12
39529: PPUSH
39530: LD_INT 1
39532: PPUSH
39533: CALL_OW 3
39537: ST_TO_ADDR
// if not f then
39538: LD_VAR 0 12
39542: NOT
39543: IFFALSE 39561
// begin x := x + 2 ;
39545: LD_ADDR_VAR 0 13
39549: PUSH
39550: LD_VAR 0 13
39554: PUSH
39555: LD_INT 2
39557: PLUS
39558: ST_TO_ADDR
// continue ;
39559: GO 39359
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39561: LD_VAR 0 12
39565: PUSH
39566: LD_INT 1
39568: ARRAY
39569: PPUSH
39570: CALL_OW 266
39574: PUSH
39575: LD_INT 5
39577: EQUAL
39578: IFFALSE 39652
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39580: LD_VAR 0 12
39584: PUSH
39585: LD_INT 1
39587: ARRAY
39588: PPUSH
39589: CALL_OW 313
39593: PUSH
39594: LD_INT 3
39596: LESS
39597: IFFALSE 39633
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39599: LD_INT 0
39601: PPUSH
39602: LD_INT 5
39604: PUSH
39605: LD_INT 8
39607: PUSH
39608: LD_INT 9
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: LIST
39615: PUSH
39616: LD_VAR 0 17
39620: ARRAY
39621: PPUSH
39622: LD_VAR 0 4
39626: PPUSH
39627: CALL_OW 380
39631: GO 39650
// PrepareHuman ( false , i , skill ) ;
39633: LD_INT 0
39635: PPUSH
39636: LD_VAR 0 8
39640: PPUSH
39641: LD_VAR 0 4
39645: PPUSH
39646: CALL_OW 380
// end else
39650: GO 39669
// PrepareHuman ( false , i , skill ) ;
39652: LD_INT 0
39654: PPUSH
39655: LD_VAR 0 8
39659: PPUSH
39660: LD_VAR 0 4
39664: PPUSH
39665: CALL_OW 380
// un := CreateHuman ;
39669: LD_ADDR_VAR 0 14
39673: PUSH
39674: CALL_OW 44
39678: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39679: LD_ADDR_VAR 0 7
39683: PUSH
39684: LD_VAR 0 7
39688: PPUSH
39689: LD_INT 1
39691: PPUSH
39692: LD_VAR 0 14
39696: PPUSH
39697: CALL_OW 2
39701: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39702: LD_VAR 0 14
39706: PPUSH
39707: LD_VAR 0 12
39711: PUSH
39712: LD_INT 1
39714: ARRAY
39715: PPUSH
39716: CALL_OW 52
// end ;
39720: GO 39359
39722: POP
39723: POP
// end ;
39724: GO 38661
39726: POP
39727: POP
// result := result ^ buildings ;
39728: LD_ADDR_VAR 0 7
39732: PUSH
39733: LD_VAR 0 7
39737: PUSH
39738: LD_VAR 0 18
39742: ADD
39743: ST_TO_ADDR
// end else
39744: GO 39887
// begin for i = 1 to personel do
39746: LD_ADDR_VAR 0 8
39750: PUSH
39751: DOUBLE
39752: LD_INT 1
39754: DEC
39755: ST_TO_ADDR
39756: LD_VAR 0 6
39760: PUSH
39761: FOR_TO
39762: IFFALSE 39885
// begin if i > 4 then
39764: LD_VAR 0 8
39768: PUSH
39769: LD_INT 4
39771: GREATER
39772: IFFALSE 39776
// break ;
39774: GO 39885
// x := personel [ i ] ;
39776: LD_ADDR_VAR 0 13
39780: PUSH
39781: LD_VAR 0 6
39785: PUSH
39786: LD_VAR 0 8
39790: ARRAY
39791: ST_TO_ADDR
// if x = - 1 then
39792: LD_VAR 0 13
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: EQUAL
39801: IFFALSE 39805
// continue ;
39803: GO 39761
// PrepareHuman ( false , i , skill ) ;
39805: LD_INT 0
39807: PPUSH
39808: LD_VAR 0 8
39812: PPUSH
39813: LD_VAR 0 4
39817: PPUSH
39818: CALL_OW 380
// un := CreateHuman ;
39822: LD_ADDR_VAR 0 14
39826: PUSH
39827: CALL_OW 44
39831: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39832: LD_VAR 0 14
39836: PPUSH
39837: LD_VAR 0 1
39841: PPUSH
39842: CALL_OW 250
39846: PPUSH
39847: LD_VAR 0 1
39851: PPUSH
39852: CALL_OW 251
39856: PPUSH
39857: LD_INT 10
39859: PPUSH
39860: LD_INT 0
39862: PPUSH
39863: CALL_OW 50
// result := result ^ un ;
39867: LD_ADDR_VAR 0 7
39871: PUSH
39872: LD_VAR 0 7
39876: PUSH
39877: LD_VAR 0 14
39881: ADD
39882: ST_TO_ADDR
// end ;
39883: GO 39761
39885: POP
39886: POP
// end ; end ;
39887: LD_VAR 0 7
39891: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39892: LD_INT 0
39894: PPUSH
39895: PPUSH
39896: PPUSH
39897: PPUSH
39898: PPUSH
39899: PPUSH
39900: PPUSH
39901: PPUSH
39902: PPUSH
39903: PPUSH
39904: PPUSH
39905: PPUSH
39906: PPUSH
39907: PPUSH
39908: PPUSH
39909: PPUSH
// result := false ;
39910: LD_ADDR_VAR 0 3
39914: PUSH
39915: LD_INT 0
39917: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39918: LD_VAR 0 1
39922: NOT
39923: PUSH
39924: LD_VAR 0 1
39928: PPUSH
39929: CALL_OW 266
39933: PUSH
39934: LD_INT 32
39936: PUSH
39937: LD_INT 33
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: IN
39944: NOT
39945: OR
39946: IFFALSE 39950
// exit ;
39948: GO 41086
// nat := GetNation ( tower ) ;
39950: LD_ADDR_VAR 0 12
39954: PUSH
39955: LD_VAR 0 1
39959: PPUSH
39960: CALL_OW 248
39964: ST_TO_ADDR
// side := GetSide ( tower ) ;
39965: LD_ADDR_VAR 0 16
39969: PUSH
39970: LD_VAR 0 1
39974: PPUSH
39975: CALL_OW 255
39979: ST_TO_ADDR
// x := GetX ( tower ) ;
39980: LD_ADDR_VAR 0 10
39984: PUSH
39985: LD_VAR 0 1
39989: PPUSH
39990: CALL_OW 250
39994: ST_TO_ADDR
// y := GetY ( tower ) ;
39995: LD_ADDR_VAR 0 11
39999: PUSH
40000: LD_VAR 0 1
40004: PPUSH
40005: CALL_OW 251
40009: ST_TO_ADDR
// if not x or not y then
40010: LD_VAR 0 10
40014: NOT
40015: PUSH
40016: LD_VAR 0 11
40020: NOT
40021: OR
40022: IFFALSE 40026
// exit ;
40024: GO 41086
// weapon := 0 ;
40026: LD_ADDR_VAR 0 18
40030: PUSH
40031: LD_INT 0
40033: ST_TO_ADDR
// fac_list := [ ] ;
40034: LD_ADDR_VAR 0 17
40038: PUSH
40039: EMPTY
40040: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
40041: LD_ADDR_VAR 0 6
40045: PUSH
40046: LD_VAR 0 1
40050: PPUSH
40051: CALL_OW 274
40055: PPUSH
40056: LD_VAR 0 2
40060: PPUSH
40061: CALL 37664 0 2
40065: PPUSH
40066: LD_INT 30
40068: PUSH
40069: LD_INT 3
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PPUSH
40076: CALL_OW 72
40080: ST_TO_ADDR
// if not factories then
40081: LD_VAR 0 6
40085: NOT
40086: IFFALSE 40090
// exit ;
40088: GO 41086
// for i in factories do
40090: LD_ADDR_VAR 0 8
40094: PUSH
40095: LD_VAR 0 6
40099: PUSH
40100: FOR_IN
40101: IFFALSE 40126
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40103: LD_ADDR_VAR 0 17
40107: PUSH
40108: LD_VAR 0 17
40112: PUSH
40113: LD_VAR 0 8
40117: PPUSH
40118: CALL_OW 478
40122: UNION
40123: ST_TO_ADDR
40124: GO 40100
40126: POP
40127: POP
// if not fac_list then
40128: LD_VAR 0 17
40132: NOT
40133: IFFALSE 40137
// exit ;
40135: GO 41086
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40137: LD_ADDR_VAR 0 5
40141: PUSH
40142: LD_INT 4
40144: PUSH
40145: LD_INT 5
40147: PUSH
40148: LD_INT 9
40150: PUSH
40151: LD_INT 10
40153: PUSH
40154: LD_INT 6
40156: PUSH
40157: LD_INT 7
40159: PUSH
40160: LD_INT 11
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 27
40174: PUSH
40175: LD_INT 28
40177: PUSH
40178: LD_INT 26
40180: PUSH
40181: LD_INT 30
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 43
40192: PUSH
40193: LD_INT 44
40195: PUSH
40196: LD_INT 46
40198: PUSH
40199: LD_INT 45
40201: PUSH
40202: LD_INT 47
40204: PUSH
40205: LD_INT 49
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: LIST
40220: PUSH
40221: LD_VAR 0 12
40225: ARRAY
40226: ST_TO_ADDR
// for i in list do
40227: LD_ADDR_VAR 0 8
40231: PUSH
40232: LD_VAR 0 5
40236: PUSH
40237: FOR_IN
40238: IFFALSE 40271
// if not i in fac_list then
40240: LD_VAR 0 8
40244: PUSH
40245: LD_VAR 0 17
40249: IN
40250: NOT
40251: IFFALSE 40269
// list := list diff i ;
40253: LD_ADDR_VAR 0 5
40257: PUSH
40258: LD_VAR 0 5
40262: PUSH
40263: LD_VAR 0 8
40267: DIFF
40268: ST_TO_ADDR
40269: GO 40237
40271: POP
40272: POP
// if not list then
40273: LD_VAR 0 5
40277: NOT
40278: IFFALSE 40282
// exit ;
40280: GO 41086
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40282: LD_VAR 0 12
40286: PUSH
40287: LD_INT 3
40289: EQUAL
40290: PUSH
40291: LD_INT 49
40293: PUSH
40294: LD_VAR 0 5
40298: IN
40299: AND
40300: PUSH
40301: LD_INT 31
40303: PPUSH
40304: LD_VAR 0 16
40308: PPUSH
40309: CALL_OW 321
40313: PUSH
40314: LD_INT 2
40316: EQUAL
40317: AND
40318: IFFALSE 40378
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40320: LD_INT 22
40322: PUSH
40323: LD_VAR 0 16
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 35
40334: PUSH
40335: LD_INT 49
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 91
40344: PUSH
40345: LD_VAR 0 1
40349: PUSH
40350: LD_INT 10
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: LIST
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: LIST
40362: PPUSH
40363: CALL_OW 69
40367: NOT
40368: IFFALSE 40378
// weapon := ru_time_lapser ;
40370: LD_ADDR_VAR 0 18
40374: PUSH
40375: LD_INT 49
40377: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40378: LD_VAR 0 12
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: IN
40393: PUSH
40394: LD_INT 11
40396: PUSH
40397: LD_VAR 0 5
40401: IN
40402: PUSH
40403: LD_INT 30
40405: PUSH
40406: LD_VAR 0 5
40410: IN
40411: OR
40412: AND
40413: PUSH
40414: LD_INT 6
40416: PPUSH
40417: LD_VAR 0 16
40421: PPUSH
40422: CALL_OW 321
40426: PUSH
40427: LD_INT 2
40429: EQUAL
40430: AND
40431: IFFALSE 40596
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40433: LD_INT 22
40435: PUSH
40436: LD_VAR 0 16
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: LD_INT 35
40450: PUSH
40451: LD_INT 11
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 35
40460: PUSH
40461: LD_INT 30
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 91
40475: PUSH
40476: LD_VAR 0 1
40480: PUSH
40481: LD_INT 18
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: LIST
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: LIST
40493: PPUSH
40494: CALL_OW 69
40498: NOT
40499: PUSH
40500: LD_INT 22
40502: PUSH
40503: LD_VAR 0 16
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: LD_INT 30
40517: PUSH
40518: LD_INT 32
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 30
40527: PUSH
40528: LD_INT 33
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 91
40542: PUSH
40543: LD_VAR 0 1
40547: PUSH
40548: LD_INT 12
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: LIST
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: LIST
40560: PUSH
40561: EMPTY
40562: LIST
40563: PPUSH
40564: CALL_OW 69
40568: PUSH
40569: LD_INT 2
40571: GREATER
40572: AND
40573: IFFALSE 40596
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40575: LD_ADDR_VAR 0 18
40579: PUSH
40580: LD_INT 11
40582: PUSH
40583: LD_INT 30
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_VAR 0 12
40594: ARRAY
40595: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40596: LD_VAR 0 18
40600: NOT
40601: PUSH
40602: LD_INT 40
40604: PPUSH
40605: LD_VAR 0 16
40609: PPUSH
40610: CALL_OW 321
40614: PUSH
40615: LD_INT 2
40617: EQUAL
40618: AND
40619: PUSH
40620: LD_INT 7
40622: PUSH
40623: LD_VAR 0 5
40627: IN
40628: PUSH
40629: LD_INT 28
40631: PUSH
40632: LD_VAR 0 5
40636: IN
40637: OR
40638: PUSH
40639: LD_INT 45
40641: PUSH
40642: LD_VAR 0 5
40646: IN
40647: OR
40648: AND
40649: IFFALSE 40903
// begin hex := GetHexInfo ( x , y ) ;
40651: LD_ADDR_VAR 0 4
40655: PUSH
40656: LD_VAR 0 10
40660: PPUSH
40661: LD_VAR 0 11
40665: PPUSH
40666: CALL_OW 546
40670: ST_TO_ADDR
// if hex [ 1 ] then
40671: LD_VAR 0 4
40675: PUSH
40676: LD_INT 1
40678: ARRAY
40679: IFFALSE 40683
// exit ;
40681: GO 41086
// height := hex [ 2 ] ;
40683: LD_ADDR_VAR 0 15
40687: PUSH
40688: LD_VAR 0 4
40692: PUSH
40693: LD_INT 2
40695: ARRAY
40696: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40697: LD_ADDR_VAR 0 14
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: LD_INT 2
40707: PUSH
40708: LD_INT 3
40710: PUSH
40711: LD_INT 5
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: ST_TO_ADDR
// for i in tmp do
40720: LD_ADDR_VAR 0 8
40724: PUSH
40725: LD_VAR 0 14
40729: PUSH
40730: FOR_IN
40731: IFFALSE 40901
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40733: LD_ADDR_VAR 0 9
40737: PUSH
40738: LD_VAR 0 10
40742: PPUSH
40743: LD_VAR 0 8
40747: PPUSH
40748: LD_INT 5
40750: PPUSH
40751: CALL_OW 272
40755: PUSH
40756: LD_VAR 0 11
40760: PPUSH
40761: LD_VAR 0 8
40765: PPUSH
40766: LD_INT 5
40768: PPUSH
40769: CALL_OW 273
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40778: LD_VAR 0 9
40782: PUSH
40783: LD_INT 1
40785: ARRAY
40786: PPUSH
40787: LD_VAR 0 9
40791: PUSH
40792: LD_INT 2
40794: ARRAY
40795: PPUSH
40796: CALL_OW 488
40800: IFFALSE 40899
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40802: LD_ADDR_VAR 0 4
40806: PUSH
40807: LD_VAR 0 9
40811: PUSH
40812: LD_INT 1
40814: ARRAY
40815: PPUSH
40816: LD_VAR 0 9
40820: PUSH
40821: LD_INT 2
40823: ARRAY
40824: PPUSH
40825: CALL_OW 546
40829: ST_TO_ADDR
// if hex [ 1 ] then
40830: LD_VAR 0 4
40834: PUSH
40835: LD_INT 1
40837: ARRAY
40838: IFFALSE 40842
// continue ;
40840: GO 40730
// h := hex [ 2 ] ;
40842: LD_ADDR_VAR 0 13
40846: PUSH
40847: LD_VAR 0 4
40851: PUSH
40852: LD_INT 2
40854: ARRAY
40855: ST_TO_ADDR
// if h + 7 < height then
40856: LD_VAR 0 13
40860: PUSH
40861: LD_INT 7
40863: PLUS
40864: PUSH
40865: LD_VAR 0 15
40869: LESS
40870: IFFALSE 40899
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40872: LD_ADDR_VAR 0 18
40876: PUSH
40877: LD_INT 7
40879: PUSH
40880: LD_INT 28
40882: PUSH
40883: LD_INT 45
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: LIST
40890: PUSH
40891: LD_VAR 0 12
40895: ARRAY
40896: ST_TO_ADDR
// break ;
40897: GO 40901
// end ; end ; end ;
40899: GO 40730
40901: POP
40902: POP
// end ; if not weapon then
40903: LD_VAR 0 18
40907: NOT
40908: IFFALSE 40968
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40910: LD_ADDR_VAR 0 5
40914: PUSH
40915: LD_VAR 0 5
40919: PUSH
40920: LD_INT 11
40922: PUSH
40923: LD_INT 30
40925: PUSH
40926: LD_INT 49
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: LIST
40933: DIFF
40934: ST_TO_ADDR
// if not list then
40935: LD_VAR 0 5
40939: NOT
40940: IFFALSE 40944
// exit ;
40942: GO 41086
// weapon := list [ rand ( 1 , list ) ] ;
40944: LD_ADDR_VAR 0 18
40948: PUSH
40949: LD_VAR 0 5
40953: PUSH
40954: LD_INT 1
40956: PPUSH
40957: LD_VAR 0 5
40961: PPUSH
40962: CALL_OW 12
40966: ARRAY
40967: ST_TO_ADDR
// end ; if weapon then
40968: LD_VAR 0 18
40972: IFFALSE 41086
// begin tmp := CostOfWeapon ( weapon ) ;
40974: LD_ADDR_VAR 0 14
40978: PUSH
40979: LD_VAR 0 18
40983: PPUSH
40984: CALL_OW 451
40988: ST_TO_ADDR
// j := GetBase ( tower ) ;
40989: LD_ADDR_VAR 0 9
40993: PUSH
40994: LD_VAR 0 1
40998: PPUSH
40999: CALL_OW 274
41003: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41004: LD_VAR 0 9
41008: PPUSH
41009: LD_INT 1
41011: PPUSH
41012: CALL_OW 275
41016: PUSH
41017: LD_VAR 0 14
41021: PUSH
41022: LD_INT 1
41024: ARRAY
41025: GREATEREQUAL
41026: PUSH
41027: LD_VAR 0 9
41031: PPUSH
41032: LD_INT 2
41034: PPUSH
41035: CALL_OW 275
41039: PUSH
41040: LD_VAR 0 14
41044: PUSH
41045: LD_INT 2
41047: ARRAY
41048: GREATEREQUAL
41049: AND
41050: PUSH
41051: LD_VAR 0 9
41055: PPUSH
41056: LD_INT 3
41058: PPUSH
41059: CALL_OW 275
41063: PUSH
41064: LD_VAR 0 14
41068: PUSH
41069: LD_INT 3
41071: ARRAY
41072: GREATEREQUAL
41073: AND
41074: IFFALSE 41086
// result := weapon ;
41076: LD_ADDR_VAR 0 3
41080: PUSH
41081: LD_VAR 0 18
41085: ST_TO_ADDR
// end ; end ;
41086: LD_VAR 0 3
41090: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41091: LD_INT 0
41093: PPUSH
41094: PPUSH
// result := true ;
41095: LD_ADDR_VAR 0 3
41099: PUSH
41100: LD_INT 1
41102: ST_TO_ADDR
// if array1 = array2 then
41103: LD_VAR 0 1
41107: PUSH
41108: LD_VAR 0 2
41112: EQUAL
41113: IFFALSE 41173
// begin for i = 1 to array1 do
41115: LD_ADDR_VAR 0 4
41119: PUSH
41120: DOUBLE
41121: LD_INT 1
41123: DEC
41124: ST_TO_ADDR
41125: LD_VAR 0 1
41129: PUSH
41130: FOR_TO
41131: IFFALSE 41169
// if array1 [ i ] <> array2 [ i ] then
41133: LD_VAR 0 1
41137: PUSH
41138: LD_VAR 0 4
41142: ARRAY
41143: PUSH
41144: LD_VAR 0 2
41148: PUSH
41149: LD_VAR 0 4
41153: ARRAY
41154: NONEQUAL
41155: IFFALSE 41167
// begin result := false ;
41157: LD_ADDR_VAR 0 3
41161: PUSH
41162: LD_INT 0
41164: ST_TO_ADDR
// break ;
41165: GO 41169
// end ;
41167: GO 41130
41169: POP
41170: POP
// end else
41171: GO 41181
// result := false ;
41173: LD_ADDR_VAR 0 3
41177: PUSH
41178: LD_INT 0
41180: ST_TO_ADDR
// end ;
41181: LD_VAR 0 3
41185: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41186: LD_INT 0
41188: PPUSH
41189: PPUSH
41190: PPUSH
// pom := GetBase ( fac ) ;
41191: LD_ADDR_VAR 0 5
41195: PUSH
41196: LD_VAR 0 1
41200: PPUSH
41201: CALL_OW 274
41205: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41206: LD_ADDR_VAR 0 4
41210: PUSH
41211: LD_VAR 0 2
41215: PUSH
41216: LD_INT 1
41218: ARRAY
41219: PPUSH
41220: LD_VAR 0 2
41224: PUSH
41225: LD_INT 2
41227: ARRAY
41228: PPUSH
41229: LD_VAR 0 2
41233: PUSH
41234: LD_INT 3
41236: ARRAY
41237: PPUSH
41238: LD_VAR 0 2
41242: PUSH
41243: LD_INT 4
41245: ARRAY
41246: PPUSH
41247: CALL_OW 449
41251: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41252: LD_ADDR_VAR 0 3
41256: PUSH
41257: LD_VAR 0 5
41261: PPUSH
41262: LD_INT 1
41264: PPUSH
41265: CALL_OW 275
41269: PUSH
41270: LD_VAR 0 4
41274: PUSH
41275: LD_INT 1
41277: ARRAY
41278: GREATEREQUAL
41279: PUSH
41280: LD_VAR 0 5
41284: PPUSH
41285: LD_INT 2
41287: PPUSH
41288: CALL_OW 275
41292: PUSH
41293: LD_VAR 0 4
41297: PUSH
41298: LD_INT 2
41300: ARRAY
41301: GREATEREQUAL
41302: AND
41303: PUSH
41304: LD_VAR 0 5
41308: PPUSH
41309: LD_INT 3
41311: PPUSH
41312: CALL_OW 275
41316: PUSH
41317: LD_VAR 0 4
41321: PUSH
41322: LD_INT 3
41324: ARRAY
41325: GREATEREQUAL
41326: AND
41327: ST_TO_ADDR
// end ;
41328: LD_VAR 0 3
41332: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41333: LD_INT 0
41335: PPUSH
41336: PPUSH
41337: PPUSH
41338: PPUSH
// pom := GetBase ( building ) ;
41339: LD_ADDR_VAR 0 3
41343: PUSH
41344: LD_VAR 0 1
41348: PPUSH
41349: CALL_OW 274
41353: ST_TO_ADDR
// if not pom then
41354: LD_VAR 0 3
41358: NOT
41359: IFFALSE 41363
// exit ;
41361: GO 41533
// btype := GetBType ( building ) ;
41363: LD_ADDR_VAR 0 5
41367: PUSH
41368: LD_VAR 0 1
41372: PPUSH
41373: CALL_OW 266
41377: ST_TO_ADDR
// if btype = b_armoury then
41378: LD_VAR 0 5
41382: PUSH
41383: LD_INT 4
41385: EQUAL
41386: IFFALSE 41396
// btype := b_barracks ;
41388: LD_ADDR_VAR 0 5
41392: PUSH
41393: LD_INT 5
41395: ST_TO_ADDR
// if btype = b_depot then
41396: LD_VAR 0 5
41400: PUSH
41401: LD_INT 0
41403: EQUAL
41404: IFFALSE 41414
// btype := b_warehouse ;
41406: LD_ADDR_VAR 0 5
41410: PUSH
41411: LD_INT 1
41413: ST_TO_ADDR
// if btype = b_workshop then
41414: LD_VAR 0 5
41418: PUSH
41419: LD_INT 2
41421: EQUAL
41422: IFFALSE 41432
// btype := b_factory ;
41424: LD_ADDR_VAR 0 5
41428: PUSH
41429: LD_INT 3
41431: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41432: LD_ADDR_VAR 0 4
41436: PUSH
41437: LD_VAR 0 5
41441: PPUSH
41442: LD_VAR 0 1
41446: PPUSH
41447: CALL_OW 248
41451: PPUSH
41452: CALL_OW 450
41456: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41457: LD_ADDR_VAR 0 2
41461: PUSH
41462: LD_VAR 0 3
41466: PPUSH
41467: LD_INT 1
41469: PPUSH
41470: CALL_OW 275
41474: PUSH
41475: LD_VAR 0 4
41479: PUSH
41480: LD_INT 1
41482: ARRAY
41483: GREATEREQUAL
41484: PUSH
41485: LD_VAR 0 3
41489: PPUSH
41490: LD_INT 2
41492: PPUSH
41493: CALL_OW 275
41497: PUSH
41498: LD_VAR 0 4
41502: PUSH
41503: LD_INT 2
41505: ARRAY
41506: GREATEREQUAL
41507: AND
41508: PUSH
41509: LD_VAR 0 3
41513: PPUSH
41514: LD_INT 3
41516: PPUSH
41517: CALL_OW 275
41521: PUSH
41522: LD_VAR 0 4
41526: PUSH
41527: LD_INT 3
41529: ARRAY
41530: GREATEREQUAL
41531: AND
41532: ST_TO_ADDR
// end ;
41533: LD_VAR 0 2
41537: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41538: LD_INT 0
41540: PPUSH
41541: PPUSH
41542: PPUSH
// pom := GetBase ( building ) ;
41543: LD_ADDR_VAR 0 4
41547: PUSH
41548: LD_VAR 0 1
41552: PPUSH
41553: CALL_OW 274
41557: ST_TO_ADDR
// if not pom then
41558: LD_VAR 0 4
41562: NOT
41563: IFFALSE 41567
// exit ;
41565: GO 41668
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41567: LD_ADDR_VAR 0 5
41571: PUSH
41572: LD_VAR 0 2
41576: PPUSH
41577: LD_VAR 0 1
41581: PPUSH
41582: CALL_OW 248
41586: PPUSH
41587: CALL_OW 450
41591: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41592: LD_ADDR_VAR 0 3
41596: PUSH
41597: LD_VAR 0 4
41601: PPUSH
41602: LD_INT 1
41604: PPUSH
41605: CALL_OW 275
41609: PUSH
41610: LD_VAR 0 5
41614: PUSH
41615: LD_INT 1
41617: ARRAY
41618: GREATEREQUAL
41619: PUSH
41620: LD_VAR 0 4
41624: PPUSH
41625: LD_INT 2
41627: PPUSH
41628: CALL_OW 275
41632: PUSH
41633: LD_VAR 0 5
41637: PUSH
41638: LD_INT 2
41640: ARRAY
41641: GREATEREQUAL
41642: AND
41643: PUSH
41644: LD_VAR 0 4
41648: PPUSH
41649: LD_INT 3
41651: PPUSH
41652: CALL_OW 275
41656: PUSH
41657: LD_VAR 0 5
41661: PUSH
41662: LD_INT 3
41664: ARRAY
41665: GREATEREQUAL
41666: AND
41667: ST_TO_ADDR
// end ;
41668: LD_VAR 0 3
41672: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
41673: LD_INT 0
41675: PPUSH
41676: PPUSH
41677: PPUSH
41678: PPUSH
41679: PPUSH
41680: PPUSH
41681: PPUSH
41682: PPUSH
41683: PPUSH
41684: PPUSH
// result := false ;
41685: LD_ADDR_VAR 0 6
41689: PUSH
41690: LD_INT 0
41692: ST_TO_ADDR
// if not base or not btype or not x or not y then
41693: LD_VAR 0 1
41697: NOT
41698: PUSH
41699: LD_VAR 0 2
41703: NOT
41704: OR
41705: PUSH
41706: LD_VAR 0 3
41710: NOT
41711: OR
41712: PUSH
41713: LD_VAR 0 4
41717: NOT
41718: OR
41719: IFFALSE 41723
// exit ;
41721: GO 42332
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
41723: LD_ADDR_VAR 0 12
41727: PUSH
41728: LD_VAR 0 2
41732: PPUSH
41733: LD_VAR 0 3
41737: PPUSH
41738: LD_VAR 0 4
41742: PPUSH
41743: LD_VAR 0 5
41747: PPUSH
41748: LD_VAR 0 1
41752: PUSH
41753: LD_INT 1
41755: ARRAY
41756: PPUSH
41757: CALL_OW 248
41761: PPUSH
41762: LD_INT 0
41764: PPUSH
41765: CALL 43169 0 6
41769: ST_TO_ADDR
// if not hexes then
41770: LD_VAR 0 12
41774: NOT
41775: IFFALSE 41779
// exit ;
41777: GO 42332
// for i = 1 to hexes do
41779: LD_ADDR_VAR 0 7
41783: PUSH
41784: DOUBLE
41785: LD_INT 1
41787: DEC
41788: ST_TO_ADDR
41789: LD_VAR 0 12
41793: PUSH
41794: FOR_TO
41795: IFFALSE 42330
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41797: LD_ADDR_VAR 0 11
41801: PUSH
41802: LD_VAR 0 12
41806: PUSH
41807: LD_VAR 0 7
41811: ARRAY
41812: PUSH
41813: LD_INT 1
41815: ARRAY
41816: PPUSH
41817: LD_VAR 0 12
41821: PUSH
41822: LD_VAR 0 7
41826: ARRAY
41827: PUSH
41828: LD_INT 2
41830: ARRAY
41831: PPUSH
41832: CALL_OW 428
41836: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41837: LD_VAR 0 12
41841: PUSH
41842: LD_VAR 0 7
41846: ARRAY
41847: PUSH
41848: LD_INT 1
41850: ARRAY
41851: PPUSH
41852: LD_VAR 0 12
41856: PUSH
41857: LD_VAR 0 7
41861: ARRAY
41862: PUSH
41863: LD_INT 2
41865: ARRAY
41866: PPUSH
41867: CALL_OW 351
41871: PUSH
41872: LD_VAR 0 12
41876: PUSH
41877: LD_VAR 0 7
41881: ARRAY
41882: PUSH
41883: LD_INT 1
41885: ARRAY
41886: PPUSH
41887: LD_VAR 0 12
41891: PUSH
41892: LD_VAR 0 7
41896: ARRAY
41897: PUSH
41898: LD_INT 2
41900: ARRAY
41901: PPUSH
41902: CALL_OW 488
41906: NOT
41907: OR
41908: PUSH
41909: LD_VAR 0 11
41913: PPUSH
41914: CALL_OW 247
41918: PUSH
41919: LD_INT 3
41921: EQUAL
41922: OR
41923: IFFALSE 41929
// exit ;
41925: POP
41926: POP
41927: GO 42332
// if not tmp or not tmp in base then
41929: LD_VAR 0 11
41933: NOT
41934: PUSH
41935: LD_VAR 0 11
41939: PUSH
41940: LD_VAR 0 1
41944: IN
41945: NOT
41946: OR
41947: IFFALSE 41951
// continue ;
41949: GO 41794
// result := true ;
41951: LD_ADDR_VAR 0 6
41955: PUSH
41956: LD_INT 1
41958: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41959: LD_ADDR_VAR 0 15
41963: PUSH
41964: LD_VAR 0 1
41968: PPUSH
41969: LD_INT 22
41971: PUSH
41972: LD_VAR 0 11
41976: PPUSH
41977: CALL_OW 255
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: LD_INT 30
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 30
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: LIST
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PPUSH
42018: CALL_OW 72
42022: ST_TO_ADDR
// if dep then
42023: LD_VAR 0 15
42027: IFFALSE 42163
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42029: LD_ADDR_VAR 0 14
42033: PUSH
42034: LD_VAR 0 15
42038: PUSH
42039: LD_INT 1
42041: ARRAY
42042: PPUSH
42043: CALL_OW 250
42047: PPUSH
42048: LD_VAR 0 15
42052: PUSH
42053: LD_INT 1
42055: ARRAY
42056: PPUSH
42057: CALL_OW 254
42061: PPUSH
42062: LD_INT 5
42064: PPUSH
42065: CALL_OW 272
42069: PUSH
42070: LD_VAR 0 15
42074: PUSH
42075: LD_INT 1
42077: ARRAY
42078: PPUSH
42079: CALL_OW 251
42083: PPUSH
42084: LD_VAR 0 15
42088: PUSH
42089: LD_INT 1
42091: ARRAY
42092: PPUSH
42093: CALL_OW 254
42097: PPUSH
42098: LD_INT 5
42100: PPUSH
42101: CALL_OW 273
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42110: LD_VAR 0 14
42114: PUSH
42115: LD_INT 1
42117: ARRAY
42118: PPUSH
42119: LD_VAR 0 14
42123: PUSH
42124: LD_INT 2
42126: ARRAY
42127: PPUSH
42128: CALL_OW 488
42132: IFFALSE 42163
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42134: LD_VAR 0 11
42138: PPUSH
42139: LD_VAR 0 14
42143: PUSH
42144: LD_INT 1
42146: ARRAY
42147: PPUSH
42148: LD_VAR 0 14
42152: PUSH
42153: LD_INT 2
42155: ARRAY
42156: PPUSH
42157: CALL_OW 111
// continue ;
42161: GO 41794
// end ; end ; r := GetDir ( tmp ) ;
42163: LD_ADDR_VAR 0 13
42167: PUSH
42168: LD_VAR 0 11
42172: PPUSH
42173: CALL_OW 254
42177: ST_TO_ADDR
// if r = 5 then
42178: LD_VAR 0 13
42182: PUSH
42183: LD_INT 5
42185: EQUAL
42186: IFFALSE 42196
// r := 0 ;
42188: LD_ADDR_VAR 0 13
42192: PUSH
42193: LD_INT 0
42195: ST_TO_ADDR
// for j = r to 5 do
42196: LD_ADDR_VAR 0 8
42200: PUSH
42201: DOUBLE
42202: LD_VAR 0 13
42206: DEC
42207: ST_TO_ADDR
42208: LD_INT 5
42210: PUSH
42211: FOR_TO
42212: IFFALSE 42326
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42214: LD_ADDR_VAR 0 9
42218: PUSH
42219: LD_VAR 0 11
42223: PPUSH
42224: CALL_OW 250
42228: PPUSH
42229: LD_VAR 0 8
42233: PPUSH
42234: LD_INT 2
42236: PPUSH
42237: CALL_OW 272
42241: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42242: LD_ADDR_VAR 0 10
42246: PUSH
42247: LD_VAR 0 11
42251: PPUSH
42252: CALL_OW 251
42256: PPUSH
42257: LD_VAR 0 8
42261: PPUSH
42262: LD_INT 2
42264: PPUSH
42265: CALL_OW 273
42269: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42270: LD_VAR 0 9
42274: PPUSH
42275: LD_VAR 0 10
42279: PPUSH
42280: CALL_OW 488
42284: PUSH
42285: LD_VAR 0 9
42289: PPUSH
42290: LD_VAR 0 10
42294: PPUSH
42295: CALL_OW 428
42299: NOT
42300: AND
42301: IFFALSE 42324
// begin ComMoveXY ( tmp , _x , _y ) ;
42303: LD_VAR 0 11
42307: PPUSH
42308: LD_VAR 0 9
42312: PPUSH
42313: LD_VAR 0 10
42317: PPUSH
42318: CALL_OW 111
// break ;
42322: GO 42326
// end ; end ;
42324: GO 42211
42326: POP
42327: POP
// end ;
42328: GO 41794
42330: POP
42331: POP
// end ;
42332: LD_VAR 0 6
42336: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
42337: LD_INT 0
42339: PPUSH
42340: PPUSH
42341: PPUSH
42342: PPUSH
42343: PPUSH
42344: PPUSH
42345: PPUSH
42346: PPUSH
42347: PPUSH
42348: PPUSH
// result := false ;
42349: LD_ADDR_VAR 0 6
42353: PUSH
42354: LD_INT 0
42356: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42357: LD_VAR 0 1
42361: NOT
42362: PUSH
42363: LD_VAR 0 1
42367: PPUSH
42368: CALL_OW 266
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: IN
42383: NOT
42384: OR
42385: PUSH
42386: LD_VAR 0 2
42390: NOT
42391: OR
42392: PUSH
42393: LD_VAR 0 5
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: LD_INT 3
42409: PUSH
42410: LD_INT 4
42412: PUSH
42413: LD_INT 5
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: IN
42424: NOT
42425: OR
42426: PUSH
42427: LD_VAR 0 3
42431: PPUSH
42432: LD_VAR 0 4
42436: PPUSH
42437: CALL_OW 488
42441: NOT
42442: OR
42443: IFFALSE 42447
// exit ;
42445: GO 43164
// pom := GetBase ( depot ) ;
42447: LD_ADDR_VAR 0 10
42451: PUSH
42452: LD_VAR 0 1
42456: PPUSH
42457: CALL_OW 274
42461: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42462: LD_ADDR_VAR 0 11
42466: PUSH
42467: LD_VAR 0 2
42471: PPUSH
42472: LD_VAR 0 1
42476: PPUSH
42477: CALL_OW 248
42481: PPUSH
42482: CALL_OW 450
42486: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42487: LD_VAR 0 10
42491: PPUSH
42492: LD_INT 1
42494: PPUSH
42495: CALL_OW 275
42499: PUSH
42500: LD_VAR 0 11
42504: PUSH
42505: LD_INT 1
42507: ARRAY
42508: GREATEREQUAL
42509: PUSH
42510: LD_VAR 0 10
42514: PPUSH
42515: LD_INT 2
42517: PPUSH
42518: CALL_OW 275
42522: PUSH
42523: LD_VAR 0 11
42527: PUSH
42528: LD_INT 2
42530: ARRAY
42531: GREATEREQUAL
42532: AND
42533: PUSH
42534: LD_VAR 0 10
42538: PPUSH
42539: LD_INT 3
42541: PPUSH
42542: CALL_OW 275
42546: PUSH
42547: LD_VAR 0 11
42551: PUSH
42552: LD_INT 3
42554: ARRAY
42555: GREATEREQUAL
42556: AND
42557: NOT
42558: IFFALSE 42562
// exit ;
42560: GO 43164
// if GetBType ( depot ) = b_depot then
42562: LD_VAR 0 1
42566: PPUSH
42567: CALL_OW 266
42571: PUSH
42572: LD_INT 0
42574: EQUAL
42575: IFFALSE 42587
// dist := 28 else
42577: LD_ADDR_VAR 0 14
42581: PUSH
42582: LD_INT 28
42584: ST_TO_ADDR
42585: GO 42595
// dist := 36 ;
42587: LD_ADDR_VAR 0 14
42591: PUSH
42592: LD_INT 36
42594: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42595: LD_VAR 0 1
42599: PPUSH
42600: LD_VAR 0 3
42604: PPUSH
42605: LD_VAR 0 4
42609: PPUSH
42610: CALL_OW 297
42614: PUSH
42615: LD_VAR 0 14
42619: GREATER
42620: IFFALSE 42624
// exit ;
42622: GO 43164
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42624: LD_ADDR_VAR 0 12
42628: PUSH
42629: LD_VAR 0 2
42633: PPUSH
42634: LD_VAR 0 3
42638: PPUSH
42639: LD_VAR 0 4
42643: PPUSH
42644: LD_VAR 0 5
42648: PPUSH
42649: LD_VAR 0 1
42653: PPUSH
42654: CALL_OW 248
42658: PPUSH
42659: LD_INT 0
42661: PPUSH
42662: CALL 43169 0 6
42666: ST_TO_ADDR
// if not hexes then
42667: LD_VAR 0 12
42671: NOT
42672: IFFALSE 42676
// exit ;
42674: GO 43164
// hex := GetHexInfo ( x , y ) ;
42676: LD_ADDR_VAR 0 15
42680: PUSH
42681: LD_VAR 0 3
42685: PPUSH
42686: LD_VAR 0 4
42690: PPUSH
42691: CALL_OW 546
42695: ST_TO_ADDR
// if hex [ 1 ] then
42696: LD_VAR 0 15
42700: PUSH
42701: LD_INT 1
42703: ARRAY
42704: IFFALSE 42708
// exit ;
42706: GO 43164
// height := hex [ 2 ] ;
42708: LD_ADDR_VAR 0 13
42712: PUSH
42713: LD_VAR 0 15
42717: PUSH
42718: LD_INT 2
42720: ARRAY
42721: ST_TO_ADDR
// for i = 1 to hexes do
42722: LD_ADDR_VAR 0 7
42726: PUSH
42727: DOUBLE
42728: LD_INT 1
42730: DEC
42731: ST_TO_ADDR
42732: LD_VAR 0 12
42736: PUSH
42737: FOR_TO
42738: IFFALSE 43068
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42740: LD_VAR 0 12
42744: PUSH
42745: LD_VAR 0 7
42749: ARRAY
42750: PUSH
42751: LD_INT 1
42753: ARRAY
42754: PPUSH
42755: LD_VAR 0 12
42759: PUSH
42760: LD_VAR 0 7
42764: ARRAY
42765: PUSH
42766: LD_INT 2
42768: ARRAY
42769: PPUSH
42770: CALL_OW 488
42774: NOT
42775: PUSH
42776: LD_VAR 0 12
42780: PUSH
42781: LD_VAR 0 7
42785: ARRAY
42786: PUSH
42787: LD_INT 1
42789: ARRAY
42790: PPUSH
42791: LD_VAR 0 12
42795: PUSH
42796: LD_VAR 0 7
42800: ARRAY
42801: PUSH
42802: LD_INT 2
42804: ARRAY
42805: PPUSH
42806: CALL_OW 428
42810: PUSH
42811: LD_INT 0
42813: GREATER
42814: OR
42815: PUSH
42816: LD_VAR 0 12
42820: PUSH
42821: LD_VAR 0 7
42825: ARRAY
42826: PUSH
42827: LD_INT 1
42829: ARRAY
42830: PPUSH
42831: LD_VAR 0 12
42835: PUSH
42836: LD_VAR 0 7
42840: ARRAY
42841: PUSH
42842: LD_INT 2
42844: ARRAY
42845: PPUSH
42846: CALL_OW 351
42850: OR
42851: IFFALSE 42857
// exit ;
42853: POP
42854: POP
42855: GO 43164
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42857: LD_ADDR_VAR 0 8
42861: PUSH
42862: LD_VAR 0 12
42866: PUSH
42867: LD_VAR 0 7
42871: ARRAY
42872: PUSH
42873: LD_INT 1
42875: ARRAY
42876: PPUSH
42877: LD_VAR 0 12
42881: PUSH
42882: LD_VAR 0 7
42886: ARRAY
42887: PUSH
42888: LD_INT 2
42890: ARRAY
42891: PPUSH
42892: CALL_OW 546
42896: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42897: LD_VAR 0 8
42901: PUSH
42902: LD_INT 1
42904: ARRAY
42905: PUSH
42906: LD_VAR 0 8
42910: PUSH
42911: LD_INT 2
42913: ARRAY
42914: PUSH
42915: LD_VAR 0 13
42919: PUSH
42920: LD_INT 2
42922: PLUS
42923: GREATER
42924: OR
42925: PUSH
42926: LD_VAR 0 8
42930: PUSH
42931: LD_INT 2
42933: ARRAY
42934: PUSH
42935: LD_VAR 0 13
42939: PUSH
42940: LD_INT 2
42942: MINUS
42943: LESS
42944: OR
42945: PUSH
42946: LD_VAR 0 8
42950: PUSH
42951: LD_INT 3
42953: ARRAY
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 8
42960: PUSH
42961: LD_INT 9
42963: PUSH
42964: LD_INT 10
42966: PUSH
42967: LD_INT 11
42969: PUSH
42970: LD_INT 12
42972: PUSH
42973: LD_INT 13
42975: PUSH
42976: LD_INT 16
42978: PUSH
42979: LD_INT 17
42981: PUSH
42982: LD_INT 18
42984: PUSH
42985: LD_INT 19
42987: PUSH
42988: LD_INT 20
42990: PUSH
42991: LD_INT 21
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: IN
43009: NOT
43010: OR
43011: PUSH
43012: LD_VAR 0 8
43016: PUSH
43017: LD_INT 5
43019: ARRAY
43020: NOT
43021: OR
43022: PUSH
43023: LD_VAR 0 8
43027: PUSH
43028: LD_INT 6
43030: ARRAY
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: LD_INT 7
43040: PUSH
43041: LD_INT 9
43043: PUSH
43044: LD_INT 10
43046: PUSH
43047: LD_INT 11
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: IN
43058: NOT
43059: OR
43060: IFFALSE 43066
// exit ;
43062: POP
43063: POP
43064: GO 43164
// end ;
43066: GO 42737
43068: POP
43069: POP
// side := GetSide ( depot ) ;
43070: LD_ADDR_VAR 0 9
43074: PUSH
43075: LD_VAR 0 1
43079: PPUSH
43080: CALL_OW 255
43084: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43085: LD_VAR 0 9
43089: PPUSH
43090: LD_VAR 0 3
43094: PPUSH
43095: LD_VAR 0 4
43099: PPUSH
43100: LD_INT 20
43102: PPUSH
43103: CALL 35818 0 4
43107: PUSH
43108: LD_INT 4
43110: ARRAY
43111: IFFALSE 43115
// exit ;
43113: GO 43164
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43115: LD_VAR 0 2
43119: PUSH
43120: LD_INT 29
43122: PUSH
43123: LD_INT 30
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: IN
43130: PUSH
43131: LD_VAR 0 3
43135: PPUSH
43136: LD_VAR 0 4
43140: PPUSH
43141: LD_VAR 0 9
43145: PPUSH
43146: CALL_OW 440
43150: NOT
43151: AND
43152: IFFALSE 43156
// exit ;
43154: GO 43164
// result := true ;
43156: LD_ADDR_VAR 0 6
43160: PUSH
43161: LD_INT 1
43163: ST_TO_ADDR
// end ;
43164: LD_VAR 0 6
43168: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43169: LD_INT 0
43171: PPUSH
43172: PPUSH
43173: PPUSH
43174: PPUSH
43175: PPUSH
43176: PPUSH
43177: PPUSH
43178: PPUSH
43179: PPUSH
43180: PPUSH
43181: PPUSH
43182: PPUSH
43183: PPUSH
43184: PPUSH
43185: PPUSH
43186: PPUSH
43187: PPUSH
43188: PPUSH
43189: PPUSH
43190: PPUSH
43191: PPUSH
43192: PPUSH
43193: PPUSH
43194: PPUSH
43195: PPUSH
43196: PPUSH
43197: PPUSH
43198: PPUSH
43199: PPUSH
43200: PPUSH
43201: PPUSH
43202: PPUSH
43203: PPUSH
43204: PPUSH
43205: PPUSH
43206: PPUSH
43207: PPUSH
43208: PPUSH
43209: PPUSH
43210: PPUSH
43211: PPUSH
43212: PPUSH
43213: PPUSH
43214: PPUSH
43215: PPUSH
43216: PPUSH
43217: PPUSH
43218: PPUSH
43219: PPUSH
43220: PPUSH
43221: PPUSH
43222: PPUSH
43223: PPUSH
43224: PPUSH
43225: PPUSH
43226: PPUSH
43227: PPUSH
43228: PPUSH
// result = [ ] ;
43229: LD_ADDR_VAR 0 7
43233: PUSH
43234: EMPTY
43235: ST_TO_ADDR
// temp_list = [ ] ;
43236: LD_ADDR_VAR 0 9
43240: PUSH
43241: EMPTY
43242: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43243: LD_VAR 0 4
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: LD_INT 3
43259: PUSH
43260: LD_INT 4
43262: PUSH
43263: LD_INT 5
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: IN
43274: NOT
43275: PUSH
43276: LD_VAR 0 1
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: IN
43291: PUSH
43292: LD_VAR 0 5
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: LIST
43310: IN
43311: NOT
43312: AND
43313: OR
43314: IFFALSE 43318
// exit ;
43316: GO 61709
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43318: LD_VAR 0 1
43322: PUSH
43323: LD_INT 6
43325: PUSH
43326: LD_INT 7
43328: PUSH
43329: LD_INT 8
43331: PUSH
43332: LD_INT 13
43334: PUSH
43335: LD_INT 12
43337: PUSH
43338: LD_INT 15
43340: PUSH
43341: LD_INT 11
43343: PUSH
43344: LD_INT 14
43346: PUSH
43347: LD_INT 10
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: IN
43361: IFFALSE 43371
// btype = b_lab ;
43363: LD_ADDR_VAR 0 1
43367: PUSH
43368: LD_INT 6
43370: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43371: LD_VAR 0 6
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: LIST
43389: IN
43390: NOT
43391: PUSH
43392: LD_VAR 0 1
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: LD_INT 2
43405: PUSH
43406: LD_INT 3
43408: PUSH
43409: LD_INT 6
43411: PUSH
43412: LD_INT 36
43414: PUSH
43415: LD_INT 4
43417: PUSH
43418: LD_INT 5
43420: PUSH
43421: LD_INT 31
43423: PUSH
43424: LD_INT 32
43426: PUSH
43427: LD_INT 33
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: IN
43443: NOT
43444: PUSH
43445: LD_VAR 0 6
43449: PUSH
43450: LD_INT 1
43452: EQUAL
43453: AND
43454: OR
43455: PUSH
43456: LD_VAR 0 1
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: LD_INT 3
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: IN
43471: NOT
43472: PUSH
43473: LD_VAR 0 6
43477: PUSH
43478: LD_INT 2
43480: EQUAL
43481: AND
43482: OR
43483: IFFALSE 43493
// mode = 0 ;
43485: LD_ADDR_VAR 0 6
43489: PUSH
43490: LD_INT 0
43492: ST_TO_ADDR
// case mode of 0 :
43493: LD_VAR 0 6
43497: PUSH
43498: LD_INT 0
43500: DOUBLE
43501: EQUAL
43502: IFTRUE 43506
43504: GO 54959
43506: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43507: LD_ADDR_VAR 0 11
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: LD_INT 3
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: LD_INT 3
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: LD_INT 2
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43700: LD_ADDR_VAR 0 12
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 2
43846: NEG
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 3
43857: NEG
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 3
43868: NEG
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43896: LD_ADDR_VAR 0 13
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 2
44019: NEG
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: LD_INT 3
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 3
44055: NEG
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 3
44067: NEG
44068: PUSH
44069: LD_INT 3
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44095: LD_ADDR_VAR 0 14
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: LD_INT 3
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 3
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44291: LD_ADDR_VAR 0 15
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 3
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 3
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44484: LD_ADDR_VAR 0 16
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: LD_INT 2
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 2
44587: PUSH
44588: LD_INT 2
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 2
44619: NEG
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 3
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 3
44641: PUSH
44642: LD_INT 3
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: LD_INT 3
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44677: LD_ADDR_VAR 0 17
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: NEG
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: LD_INT 2
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44907: LD_ADDR_VAR 0 18
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 2
45083: NEG
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 2
45094: NEG
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 2
45106: NEG
45107: PUSH
45108: LD_INT 2
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45137: LD_ADDR_VAR 0 19
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 2
45313: NEG
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 2
45324: NEG
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: LD_INT 2
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45367: LD_ADDR_VAR 0 20
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 2
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: LD_INT 2
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 2
45554: NEG
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 2
45566: NEG
45567: PUSH
45568: LD_INT 2
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45597: LD_ADDR_VAR 0 21
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: LD_INT 2
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 2
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: PUSH
45733: LD_INT 2
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 2
45773: NEG
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 2
45784: NEG
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 2
45796: NEG
45797: PUSH
45798: LD_INT 2
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45827: LD_ADDR_VAR 0 22
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 2
45962: PUSH
45963: LD_INT 2
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 2
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: NEG
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 2
46026: NEG
46027: PUSH
46028: LD_INT 2
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46057: LD_ADDR_VAR 0 23
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 2
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 2
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: LD_INT 2
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 2
46233: NEG
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 2
46244: NEG
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: LD_INT 2
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: LD_INT 3
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 3
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 2
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46337: LD_ADDR_VAR 0 24
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: LD_INT 2
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 2
46536: NEG
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 3
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 3
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46613: LD_ADDR_VAR 0 25
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: LD_INT 2
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 2
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 2
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: LD_INT 2
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 2
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 2
46789: NEG
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 2
46800: NEG
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 3
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 3
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: LD_INT 3
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 3
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46887: LD_ADDR_VAR 0 26
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 1
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 2
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 2
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 2
47074: NEG
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: LD_INT 3
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 3
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 2
47129: NEG
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47163: LD_ADDR_VAR 0 27
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 2
47339: NEG
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 3
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: LD_INT 2
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47443: LD_ADDR_VAR 0 28
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: LD_INT 2
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 2
47578: PUSH
47579: LD_INT 2
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 2
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: NEG
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: LD_INT 3
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: LD_INT 3
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 3
47678: NEG
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 3
47690: NEG
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47725: LD_ADDR_VAR 0 29
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: LD_INT 2
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: NEG
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: LD_INT 2
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 3
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 3
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 3
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 3
47969: NEG
47970: PUSH
47971: LD_INT 2
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48004: LD_ADDR_VAR 0 30
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: LD_INT 2
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 2
48170: NEG
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 3
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 3
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: LD_INT 3
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 3
48247: NEG
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48282: LD_ADDR_VAR 0 31
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: LD_INT 3
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 3
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: LD_INT 3
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 3
48525: NEG
48526: PUSH
48527: LD_INT 2
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48560: LD_ADDR_VAR 0 32
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 2
48726: NEG
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 2
48737: NEG
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: LD_INT 3
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 3
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: LD_INT 3
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 3
48803: NEG
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48838: LD_ADDR_VAR 0 33
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: LD_INT 2
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: NEG
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: NEG
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 3
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 3
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 3
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 2
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 3
49082: NEG
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49117: LD_ADDR_VAR 0 34
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 2
49296: NEG
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: LD_INT 3
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 3
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: LD_INT 3
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 3
49362: NEG
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49397: LD_ADDR_VAR 0 35
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49509: LD_ADDR_VAR 0 36
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 2
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49621: LD_ADDR_VAR 0 37
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: LD_INT 1
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49733: LD_ADDR_VAR 0 38
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49845: LD_ADDR_VAR 0 39
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49957: LD_ADDR_VAR 0 40
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50069: LD_ADDR_VAR 0 41
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 3
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 3
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 3
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 3
50312: PUSH
50313: LD_INT 3
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 3
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 3
50343: NEG
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 3
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 3
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 3
50378: NEG
50379: PUSH
50380: LD_INT 3
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50419: LD_ADDR_VAR 0 42
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 2
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 2
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: LD_INT 3
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 3
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: LD_INT 3
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 3
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 3
50665: PUSH
50666: LD_INT 3
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: LD_INT 3
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: LD_INT 3
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 3
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: LD_INT 3
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50769: LD_ADDR_VAR 0 43
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: LD_INT 3
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 3
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 3
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 3
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: LD_INT 3
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 3
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: NEG
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 3
51076: NEG
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51117: LD_ADDR_VAR 0 44
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: NEG
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: LD_INT 2
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: LD_INT 3
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 3
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 3
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 3
51350: PUSH
51351: LD_INT 2
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: LD_INT 3
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: LD_INT 3
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 3
51391: NEG
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 3
51402: NEG
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 3
51414: NEG
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: LD_INT 3
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51467: LD_ADDR_VAR 0 45
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 2
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: NEG
51658: PUSH
51659: LD_INT 3
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: LD_INT 3
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 3
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 2
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 3
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 3
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: LD_INT 3
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 3
51764: NEG
51765: PUSH
51766: LD_INT 2
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 3
51776: NEG
51777: PUSH
51778: LD_INT 3
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51817: LD_ADDR_VAR 0 46
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: LD_INT 2
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 2
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: LD_INT 3
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 3
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 3
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 3
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: LD_INT 3
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 3
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 3
52113: NEG
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 3
52124: NEG
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52165: LD_ADDR_VAR 0 47
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52316: LD_ADDR_VAR 0 48
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 2
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52463: LD_ADDR_VAR 0 49
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52607: LD_ADDR_VAR 0 50
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52751: LD_ADDR_VAR 0 51
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: NEG
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52898: LD_ADDR_VAR 0 52
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 2
53013: NEG
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 2
53025: NEG
53026: PUSH
53027: LD_INT 2
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53049: LD_ADDR_VAR 0 53
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: LD_INT 2
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 2
53248: NEG
53249: PUSH
53250: LD_INT 2
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53279: LD_ADDR_VAR 0 54
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 2
53478: NEG
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53509: LD_ADDR_VAR 0 55
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 2
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: LD_INT 2
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 2
53708: NEG
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53739: LD_ADDR_VAR 0 56
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 2
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: LD_INT 2
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53969: LD_ADDR_VAR 0 57
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: LD_INT 2
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: LD_INT 2
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 2
54168: NEG
54169: PUSH
54170: LD_INT 2
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54199: LD_ADDR_VAR 0 58
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 2
54375: NEG
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54429: LD_ADDR_VAR 0 59
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54517: LD_ADDR_VAR 0 60
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54605: LD_ADDR_VAR 0 61
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54693: LD_ADDR_VAR 0 62
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54781: LD_ADDR_VAR 0 63
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: NEG
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54869: LD_ADDR_VAR 0 64
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: NEG
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: ST_TO_ADDR
// end ; 1 :
54957: GO 60854
54959: LD_INT 1
54961: DOUBLE
54962: EQUAL
54963: IFTRUE 54967
54965: GO 57590
54967: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54968: LD_ADDR_VAR 0 11
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 3
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 3
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: LIST
55011: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55012: LD_ADDR_VAR 0 12
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 3
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 3
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: LIST
55052: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55053: LD_ADDR_VAR 0 13
55057: PUSH
55058: LD_INT 3
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 3
55070: PUSH
55071: LD_INT 3
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: LD_INT 3
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: LIST
55092: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55093: LD_ADDR_VAR 0 14
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: LD_INT 3
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: LIST
55133: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55134: LD_ADDR_VAR 0 15
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 3
55152: NEG
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 3
55163: NEG
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: LIST
55177: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55178: LD_ADDR_VAR 0 16
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: LD_INT 3
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 3
55197: NEG
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 3
55209: NEG
55210: PUSH
55211: LD_INT 3
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55224: LD_ADDR_VAR 0 17
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 3
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 3
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: LIST
55267: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55268: LD_ADDR_VAR 0 18
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: LIST
55308: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55309: LD_ADDR_VAR 0 19
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 3
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: LD_INT 3
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: LIST
55348: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55349: LD_ADDR_VAR 0 20
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: LD_INT 3
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: LD_INT 3
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: LIST
55389: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55390: LD_ADDR_VAR 0 21
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 3
55408: NEG
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 3
55419: NEG
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: LIST
55433: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55434: LD_ADDR_VAR 0 22
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: LD_INT 3
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 3
55453: NEG
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 3
55465: NEG
55466: PUSH
55467: LD_INT 3
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55480: LD_ADDR_VAR 0 23
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: LD_INT 3
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: LD_INT 4
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 3
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: LIST
55523: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55524: LD_ADDR_VAR 0 24
55528: PUSH
55529: LD_INT 3
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 3
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 4
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: LIST
55564: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55565: LD_ADDR_VAR 0 25
55569: PUSH
55570: LD_INT 3
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 4
55582: PUSH
55583: LD_INT 3
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 3
55592: PUSH
55593: LD_INT 4
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: LIST
55604: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55605: LD_ADDR_VAR 0 26
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 3
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: LD_INT 4
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: LIST
55645: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55646: LD_ADDR_VAR 0 27
55650: PUSH
55651: LD_INT 3
55653: NEG
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 3
55664: NEG
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 4
55675: NEG
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: LIST
55689: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55690: LD_ADDR_VAR 0 28
55694: PUSH
55695: LD_INT 3
55697: NEG
55698: PUSH
55699: LD_INT 3
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 3
55709: NEG
55710: PUSH
55711: LD_INT 4
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 4
55721: NEG
55722: PUSH
55723: LD_INT 3
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: LIST
55735: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55736: LD_ADDR_VAR 0 29
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 3
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_INT 3
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: LD_INT 2
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 4
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 4
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: LD_INT 3
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 5
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 5
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: LD_INT 4
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 6
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 6
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: LD_INT 5
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55891: LD_ADDR_VAR 0 30
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 3
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 3
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 4
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 4
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 4
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 5
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 5
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 5
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 6
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 6
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56034: LD_ADDR_VAR 0 31
56038: PUSH
56039: LD_INT 3
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 3
56051: PUSH
56052: LD_INT 3
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 2
56061: PUSH
56062: LD_INT 3
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 4
56071: PUSH
56072: LD_INT 3
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 4
56081: PUSH
56082: LD_INT 4
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 3
56091: PUSH
56092: LD_INT 4
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 5
56101: PUSH
56102: LD_INT 4
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 5
56111: PUSH
56112: LD_INT 5
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 4
56121: PUSH
56122: LD_INT 5
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 6
56131: PUSH
56132: LD_INT 5
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 6
56141: PUSH
56142: LD_INT 6
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 5
56151: PUSH
56152: LD_INT 6
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56173: LD_ADDR_VAR 0 32
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: LD_INT 3
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: LD_INT 3
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: LD_INT 4
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 4
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: LD_INT 3
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: LD_INT 5
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: LD_INT 5
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: LD_INT 4
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: LD_INT 6
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: LD_INT 6
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: LD_INT 5
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56316: LD_ADDR_VAR 0 33
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 3
56334: NEG
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 3
56345: NEG
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 3
56357: NEG
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 4
56368: NEG
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 4
56379: NEG
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 4
56391: NEG
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 5
56402: NEG
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 5
56413: NEG
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 5
56425: NEG
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 6
56436: NEG
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 6
56447: NEG
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56471: LD_ADDR_VAR 0 34
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: LD_INT 3
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 3
56490: NEG
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 3
56502: NEG
56503: PUSH
56504: LD_INT 3
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 3
56514: NEG
56515: PUSH
56516: LD_INT 4
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 4
56526: NEG
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 4
56538: NEG
56539: PUSH
56540: LD_INT 4
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 4
56550: NEG
56551: PUSH
56552: LD_INT 5
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 5
56562: NEG
56563: PUSH
56564: LD_INT 4
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 5
56574: NEG
56575: PUSH
56576: LD_INT 5
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 5
56586: NEG
56587: PUSH
56588: LD_INT 6
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 6
56598: NEG
56599: PUSH
56600: LD_INT 5
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 6
56610: NEG
56611: PUSH
56612: LD_INT 6
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56634: LD_ADDR_VAR 0 41
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: LD_INT 3
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: LIST
56677: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56678: LD_ADDR_VAR 0 42
56682: PUSH
56683: LD_INT 2
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 3
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: LIST
56718: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56719: LD_ADDR_VAR 0 43
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 3
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: LD_INT 3
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56759: LD_ADDR_VAR 0 44
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 3
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: LIST
56799: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56800: LD_ADDR_VAR 0 45
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 3
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: LIST
56843: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56844: LD_ADDR_VAR 0 46
56848: PUSH
56849: LD_INT 2
56851: NEG
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: LD_INT 3
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 3
56875: NEG
56876: PUSH
56877: LD_INT 2
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: LIST
56889: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56890: LD_ADDR_VAR 0 47
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: LD_INT 3
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: LD_INT 3
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56923: LD_ADDR_VAR 0 48
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 2
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56954: LD_ADDR_VAR 0 49
56958: PUSH
56959: LD_INT 3
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 3
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56983: LD_ADDR_VAR 0 50
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: LD_INT 3
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 3
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57012: LD_ADDR_VAR 0 51
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57043: LD_ADDR_VAR 0 52
57047: PUSH
57048: LD_INT 3
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 3
57062: NEG
57063: PUSH
57064: LD_INT 2
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57076: LD_ADDR_VAR 0 53
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 3
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: LD_INT 2
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: LIST
57119: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57120: LD_ADDR_VAR 0 54
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 3
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 3
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57161: LD_ADDR_VAR 0 55
57165: PUSH
57166: LD_INT 3
57168: PUSH
57169: LD_INT 2
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 3
57178: PUSH
57179: LD_INT 3
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: LD_INT 3
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: LIST
57200: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57201: LD_ADDR_VAR 0 56
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: LD_INT 3
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: LD_INT 3
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57242: LD_ADDR_VAR 0 57
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 3
57260: NEG
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 3
57271: NEG
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: LIST
57285: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57286: LD_ADDR_VAR 0 58
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: LD_INT 3
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 3
57305: NEG
57306: PUSH
57307: LD_INT 2
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 3
57317: NEG
57318: PUSH
57319: LD_INT 3
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57332: LD_ADDR_VAR 0 59
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: LIST
57375: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57376: LD_ADDR_VAR 0 60
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: LIST
57416: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57417: LD_ADDR_VAR 0 61
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 2
57434: PUSH
57435: LD_INT 2
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: LD_INT 2
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: LIST
57456: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57457: LD_ADDR_VAR 0 62
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: LIST
57497: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57498: LD_ADDR_VAR 0 63
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: LIST
57541: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57542: LD_ADDR_VAR 0 64
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: LD_INT 2
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 2
57561: NEG
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: ST_TO_ADDR
// end ; 2 :
57588: GO 60854
57590: LD_INT 2
57592: DOUBLE
57593: EQUAL
57594: IFTRUE 57598
57596: GO 60853
57598: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57599: LD_ADDR_VAR 0 29
57603: PUSH
57604: LD_INT 4
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 4
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 5
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 5
57637: PUSH
57638: LD_INT 1
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 4
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 3
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 3
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 3
57678: PUSH
57679: LD_INT 2
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 5
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 3
57699: PUSH
57700: LD_INT 3
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 3
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 4
57719: PUSH
57720: LD_INT 3
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 4
57729: PUSH
57730: LD_INT 4
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: LD_INT 4
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 2
57749: PUSH
57750: LD_INT 3
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 2
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 4
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: LD_INT 4
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 4
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 3
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: LD_INT 4
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: LD_INT 5
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: LD_INT 5
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 4
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: PUSH
57862: LD_INT 5
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 2
57871: NEG
57872: PUSH
57873: LD_INT 3
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 3
57882: NEG
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 3
57893: NEG
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 2
57905: NEG
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 4
57938: NEG
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 4
57949: NEG
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 4
57961: NEG
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 2
57973: NEG
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 4
57984: NEG
57985: PUSH
57986: LD_INT 4
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 4
57996: NEG
57997: PUSH
57998: LD_INT 5
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 3
58008: NEG
58009: PUSH
58010: LD_INT 4
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 3
58020: NEG
58021: PUSH
58022: LD_INT 3
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 4
58032: NEG
58033: PUSH
58034: LD_INT 3
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 5
58044: NEG
58045: PUSH
58046: LD_INT 4
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 5
58056: NEG
58057: PUSH
58058: LD_INT 5
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 3
58068: NEG
58069: PUSH
58070: LD_INT 5
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 5
58080: NEG
58081: PUSH
58082: LD_INT 3
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58137: LD_ADDR_VAR 0 30
58141: PUSH
58142: LD_INT 4
58144: PUSH
58145: LD_INT 4
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 4
58154: PUSH
58155: LD_INT 3
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 5
58164: PUSH
58165: LD_INT 4
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 5
58174: PUSH
58175: LD_INT 5
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 4
58184: PUSH
58185: LD_INT 5
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 3
58194: PUSH
58195: LD_INT 4
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: LD_INT 3
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 5
58214: PUSH
58215: LD_INT 3
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 3
58224: PUSH
58225: LD_INT 5
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 3
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: LD_INT 3
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 4
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 4
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: LD_INT 4
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 4
58327: NEG
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 4
58338: NEG
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 3
58350: NEG
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 3
58361: NEG
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 4
58372: NEG
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 5
58383: NEG
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 5
58394: NEG
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 5
58406: NEG
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 3
58418: NEG
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 3
58429: NEG
58430: PUSH
58431: LD_INT 3
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 3
58441: NEG
58442: PUSH
58443: LD_INT 4
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 2
58465: NEG
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 4
58489: NEG
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 4
58501: NEG
58502: PUSH
58503: LD_INT 4
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: LD_INT 4
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 4
58525: NEG
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: LD_INT 4
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 5
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: LD_INT 4
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: LD_INT 3
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 3
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: LD_INT 4
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: LD_INT 5
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 2
58616: PUSH
58617: LD_INT 3
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: LD_INT 5
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58684: LD_ADDR_VAR 0 31
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 4
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: LD_INT 3
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: LD_INT 4
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: LD_INT 5
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 5
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: LD_INT 4
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: LD_INT 5
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: LD_INT 3
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 3
58784: NEG
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 3
58795: NEG
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 2
58807: NEG
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: NEG
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 3
58829: NEG
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 4
58840: NEG
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 4
58851: NEG
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 4
58863: NEG
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: NEG
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 4
58886: NEG
58887: PUSH
58888: LD_INT 4
58890: NEG
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 4
58898: NEG
58899: PUSH
58900: LD_INT 5
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 3
58910: NEG
58911: PUSH
58912: LD_INT 4
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 3
58922: NEG
58923: PUSH
58924: LD_INT 3
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 4
58934: NEG
58935: PUSH
58936: LD_INT 3
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 5
58946: NEG
58947: PUSH
58948: LD_INT 4
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 5
58958: NEG
58959: PUSH
58960: LD_INT 5
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: NEG
58971: PUSH
58972: LD_INT 5
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 5
58982: NEG
58983: PUSH
58984: LD_INT 3
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: LD_INT 3
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 4
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: LD_INT 3
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: LD_INT 2
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: LD_INT 2
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: LD_INT 3
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 4
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: LD_INT 4
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 4
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 4
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 5
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 5
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 4
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 5
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59234: LD_ADDR_VAR 0 32
59238: PUSH
59239: LD_INT 4
59241: NEG
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 4
59252: NEG
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 3
59264: NEG
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: NEG
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 4
59286: NEG
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 5
59297: NEG
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 5
59308: NEG
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 5
59320: NEG
59321: PUSH
59322: LD_INT 2
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: NEG
59333: PUSH
59334: LD_INT 2
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 3
59343: NEG
59344: PUSH
59345: LD_INT 3
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: LD_INT 4
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 2
59367: NEG
59368: PUSH
59369: LD_INT 3
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: LD_INT 2
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 4
59403: NEG
59404: PUSH
59405: LD_INT 3
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 4
59415: NEG
59416: PUSH
59417: LD_INT 4
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: LD_INT 4
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 4
59439: NEG
59440: PUSH
59441: LD_INT 2
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 4
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 5
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: LD_INT 4
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: LD_INT 3
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 3
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: LD_INT 4
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 5
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 2
59530: PUSH
59531: LD_INT 3
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 2
59541: NEG
59542: PUSH
59543: LD_INT 5
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 3
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 4
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 4
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 3
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 2
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 4
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 4
59646: PUSH
59647: LD_INT 4
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 4
59656: PUSH
59657: LD_INT 3
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 5
59666: PUSH
59667: LD_INT 4
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 5
59676: PUSH
59677: LD_INT 5
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 4
59686: PUSH
59687: LD_INT 5
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: LD_INT 4
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 3
59706: PUSH
59707: LD_INT 3
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 5
59716: PUSH
59717: LD_INT 3
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 3
59726: PUSH
59727: LD_INT 5
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59781: LD_ADDR_VAR 0 33
59785: PUSH
59786: LD_INT 4
59788: NEG
59789: PUSH
59790: LD_INT 4
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 4
59800: NEG
59801: PUSH
59802: LD_INT 5
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 3
59812: NEG
59813: PUSH
59814: LD_INT 4
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 3
59824: NEG
59825: PUSH
59826: LD_INT 3
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 4
59836: NEG
59837: PUSH
59838: LD_INT 3
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 5
59848: NEG
59849: PUSH
59850: LD_INT 4
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 5
59860: NEG
59861: PUSH
59862: LD_INT 5
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 3
59872: NEG
59873: PUSH
59874: LD_INT 5
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 5
59884: NEG
59885: PUSH
59886: LD_INT 3
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: LD_INT 3
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: LD_INT 4
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: LD_INT 3
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: LD_INT 2
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: LD_INT 3
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 4
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: LD_INT 4
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 4
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 4
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 5
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 5
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 4
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 3
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 3
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 3
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 5
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 3
60091: PUSH
60092: LD_INT 3
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 3
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 4
60111: PUSH
60112: LD_INT 3
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 4
60121: PUSH
60122: LD_INT 4
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 3
60131: PUSH
60132: LD_INT 4
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 2
60141: PUSH
60142: LD_INT 3
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 2
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 4
60161: PUSH
60162: LD_INT 2
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: LD_INT 4
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 4
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 3
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 1
60201: PUSH
60202: LD_INT 4
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: LD_INT 5
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 5
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: LD_INT 4
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: LD_INT 3
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: LD_INT 5
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: LD_INT 3
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60319: LD_ADDR_VAR 0 34
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 4
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: LD_INT 5
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: LD_INT 4
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: LD_INT 3
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: LD_INT 4
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: LD_INT 5
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: PUSH
60406: LD_INT 3
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 2
60416: NEG
60417: PUSH
60418: LD_INT 5
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 3
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 3
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 4
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 4
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 3
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 2
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 2
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 2
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 4
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: LD_INT 4
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 4
60531: PUSH
60532: LD_INT 3
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 5
60541: PUSH
60542: LD_INT 4
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 5
60551: PUSH
60552: LD_INT 5
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 4
60561: PUSH
60562: LD_INT 5
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 3
60571: PUSH
60572: LD_INT 4
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 3
60581: PUSH
60582: LD_INT 3
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 5
60591: PUSH
60592: LD_INT 3
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 3
60601: PUSH
60602: LD_INT 5
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 3
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: LD_INT 2
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: LD_INT 3
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: PUSH
60642: LD_INT 4
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 4
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: LD_INT 3
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: LD_INT 2
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 2
60683: PUSH
60684: LD_INT 4
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 2
60693: NEG
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 4
60704: NEG
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 4
60715: NEG
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 3
60727: NEG
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 3
60738: NEG
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 4
60749: NEG
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 5
60760: NEG
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 5
60771: NEG
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 5
60783: NEG
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 3
60795: NEG
60796: PUSH
60797: LD_INT 2
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: ST_TO_ADDR
// end ; end ;
60851: GO 60854
60853: POP
// case btype of b_depot , b_warehouse :
60854: LD_VAR 0 1
60858: PUSH
60859: LD_INT 0
60861: DOUBLE
60862: EQUAL
60863: IFTRUE 60873
60865: LD_INT 1
60867: DOUBLE
60868: EQUAL
60869: IFTRUE 60873
60871: GO 61074
60873: POP
// case nation of nation_american :
60874: LD_VAR 0 5
60878: PUSH
60879: LD_INT 1
60881: DOUBLE
60882: EQUAL
60883: IFTRUE 60887
60885: GO 60943
60887: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60888: LD_ADDR_VAR 0 9
60892: PUSH
60893: LD_VAR 0 11
60897: PUSH
60898: LD_VAR 0 12
60902: PUSH
60903: LD_VAR 0 13
60907: PUSH
60908: LD_VAR 0 14
60912: PUSH
60913: LD_VAR 0 15
60917: PUSH
60918: LD_VAR 0 16
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: PUSH
60931: LD_VAR 0 4
60935: PUSH
60936: LD_INT 1
60938: PLUS
60939: ARRAY
60940: ST_TO_ADDR
60941: GO 61072
60943: LD_INT 2
60945: DOUBLE
60946: EQUAL
60947: IFTRUE 60951
60949: GO 61007
60951: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60952: LD_ADDR_VAR 0 9
60956: PUSH
60957: LD_VAR 0 17
60961: PUSH
60962: LD_VAR 0 18
60966: PUSH
60967: LD_VAR 0 19
60971: PUSH
60972: LD_VAR 0 20
60976: PUSH
60977: LD_VAR 0 21
60981: PUSH
60982: LD_VAR 0 22
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: PUSH
60995: LD_VAR 0 4
60999: PUSH
61000: LD_INT 1
61002: PLUS
61003: ARRAY
61004: ST_TO_ADDR
61005: GO 61072
61007: LD_INT 3
61009: DOUBLE
61010: EQUAL
61011: IFTRUE 61015
61013: GO 61071
61015: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61016: LD_ADDR_VAR 0 9
61020: PUSH
61021: LD_VAR 0 23
61025: PUSH
61026: LD_VAR 0 24
61030: PUSH
61031: LD_VAR 0 25
61035: PUSH
61036: LD_VAR 0 26
61040: PUSH
61041: LD_VAR 0 27
61045: PUSH
61046: LD_VAR 0 28
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: PUSH
61059: LD_VAR 0 4
61063: PUSH
61064: LD_INT 1
61066: PLUS
61067: ARRAY
61068: ST_TO_ADDR
61069: GO 61072
61071: POP
61072: GO 61627
61074: LD_INT 2
61076: DOUBLE
61077: EQUAL
61078: IFTRUE 61088
61080: LD_INT 3
61082: DOUBLE
61083: EQUAL
61084: IFTRUE 61088
61086: GO 61144
61088: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61089: LD_ADDR_VAR 0 9
61093: PUSH
61094: LD_VAR 0 29
61098: PUSH
61099: LD_VAR 0 30
61103: PUSH
61104: LD_VAR 0 31
61108: PUSH
61109: LD_VAR 0 32
61113: PUSH
61114: LD_VAR 0 33
61118: PUSH
61119: LD_VAR 0 34
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: PUSH
61132: LD_VAR 0 4
61136: PUSH
61137: LD_INT 1
61139: PLUS
61140: ARRAY
61141: ST_TO_ADDR
61142: GO 61627
61144: LD_INT 16
61146: DOUBLE
61147: EQUAL
61148: IFTRUE 61206
61150: LD_INT 17
61152: DOUBLE
61153: EQUAL
61154: IFTRUE 61206
61156: LD_INT 18
61158: DOUBLE
61159: EQUAL
61160: IFTRUE 61206
61162: LD_INT 19
61164: DOUBLE
61165: EQUAL
61166: IFTRUE 61206
61168: LD_INT 22
61170: DOUBLE
61171: EQUAL
61172: IFTRUE 61206
61174: LD_INT 20
61176: DOUBLE
61177: EQUAL
61178: IFTRUE 61206
61180: LD_INT 21
61182: DOUBLE
61183: EQUAL
61184: IFTRUE 61206
61186: LD_INT 23
61188: DOUBLE
61189: EQUAL
61190: IFTRUE 61206
61192: LD_INT 24
61194: DOUBLE
61195: EQUAL
61196: IFTRUE 61206
61198: LD_INT 25
61200: DOUBLE
61201: EQUAL
61202: IFTRUE 61206
61204: GO 61262
61206: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61207: LD_ADDR_VAR 0 9
61211: PUSH
61212: LD_VAR 0 35
61216: PUSH
61217: LD_VAR 0 36
61221: PUSH
61222: LD_VAR 0 37
61226: PUSH
61227: LD_VAR 0 38
61231: PUSH
61232: LD_VAR 0 39
61236: PUSH
61237: LD_VAR 0 40
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: PUSH
61250: LD_VAR 0 4
61254: PUSH
61255: LD_INT 1
61257: PLUS
61258: ARRAY
61259: ST_TO_ADDR
61260: GO 61627
61262: LD_INT 6
61264: DOUBLE
61265: EQUAL
61266: IFTRUE 61318
61268: LD_INT 7
61270: DOUBLE
61271: EQUAL
61272: IFTRUE 61318
61274: LD_INT 8
61276: DOUBLE
61277: EQUAL
61278: IFTRUE 61318
61280: LD_INT 13
61282: DOUBLE
61283: EQUAL
61284: IFTRUE 61318
61286: LD_INT 12
61288: DOUBLE
61289: EQUAL
61290: IFTRUE 61318
61292: LD_INT 15
61294: DOUBLE
61295: EQUAL
61296: IFTRUE 61318
61298: LD_INT 11
61300: DOUBLE
61301: EQUAL
61302: IFTRUE 61318
61304: LD_INT 14
61306: DOUBLE
61307: EQUAL
61308: IFTRUE 61318
61310: LD_INT 10
61312: DOUBLE
61313: EQUAL
61314: IFTRUE 61318
61316: GO 61374
61318: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61319: LD_ADDR_VAR 0 9
61323: PUSH
61324: LD_VAR 0 41
61328: PUSH
61329: LD_VAR 0 42
61333: PUSH
61334: LD_VAR 0 43
61338: PUSH
61339: LD_VAR 0 44
61343: PUSH
61344: LD_VAR 0 45
61348: PUSH
61349: LD_VAR 0 46
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: PUSH
61362: LD_VAR 0 4
61366: PUSH
61367: LD_INT 1
61369: PLUS
61370: ARRAY
61371: ST_TO_ADDR
61372: GO 61627
61374: LD_INT 36
61376: DOUBLE
61377: EQUAL
61378: IFTRUE 61382
61380: GO 61438
61382: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61383: LD_ADDR_VAR 0 9
61387: PUSH
61388: LD_VAR 0 47
61392: PUSH
61393: LD_VAR 0 48
61397: PUSH
61398: LD_VAR 0 49
61402: PUSH
61403: LD_VAR 0 50
61407: PUSH
61408: LD_VAR 0 51
61412: PUSH
61413: LD_VAR 0 52
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: PUSH
61426: LD_VAR 0 4
61430: PUSH
61431: LD_INT 1
61433: PLUS
61434: ARRAY
61435: ST_TO_ADDR
61436: GO 61627
61438: LD_INT 4
61440: DOUBLE
61441: EQUAL
61442: IFTRUE 61464
61444: LD_INT 5
61446: DOUBLE
61447: EQUAL
61448: IFTRUE 61464
61450: LD_INT 34
61452: DOUBLE
61453: EQUAL
61454: IFTRUE 61464
61456: LD_INT 37
61458: DOUBLE
61459: EQUAL
61460: IFTRUE 61464
61462: GO 61520
61464: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61465: LD_ADDR_VAR 0 9
61469: PUSH
61470: LD_VAR 0 53
61474: PUSH
61475: LD_VAR 0 54
61479: PUSH
61480: LD_VAR 0 55
61484: PUSH
61485: LD_VAR 0 56
61489: PUSH
61490: LD_VAR 0 57
61494: PUSH
61495: LD_VAR 0 58
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: PUSH
61508: LD_VAR 0 4
61512: PUSH
61513: LD_INT 1
61515: PLUS
61516: ARRAY
61517: ST_TO_ADDR
61518: GO 61627
61520: LD_INT 31
61522: DOUBLE
61523: EQUAL
61524: IFTRUE 61570
61526: LD_INT 32
61528: DOUBLE
61529: EQUAL
61530: IFTRUE 61570
61532: LD_INT 33
61534: DOUBLE
61535: EQUAL
61536: IFTRUE 61570
61538: LD_INT 27
61540: DOUBLE
61541: EQUAL
61542: IFTRUE 61570
61544: LD_INT 26
61546: DOUBLE
61547: EQUAL
61548: IFTRUE 61570
61550: LD_INT 28
61552: DOUBLE
61553: EQUAL
61554: IFTRUE 61570
61556: LD_INT 29
61558: DOUBLE
61559: EQUAL
61560: IFTRUE 61570
61562: LD_INT 30
61564: DOUBLE
61565: EQUAL
61566: IFTRUE 61570
61568: GO 61626
61570: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61571: LD_ADDR_VAR 0 9
61575: PUSH
61576: LD_VAR 0 59
61580: PUSH
61581: LD_VAR 0 60
61585: PUSH
61586: LD_VAR 0 61
61590: PUSH
61591: LD_VAR 0 62
61595: PUSH
61596: LD_VAR 0 63
61600: PUSH
61601: LD_VAR 0 64
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: PUSH
61614: LD_VAR 0 4
61618: PUSH
61619: LD_INT 1
61621: PLUS
61622: ARRAY
61623: ST_TO_ADDR
61624: GO 61627
61626: POP
// temp_list2 = [ ] ;
61627: LD_ADDR_VAR 0 10
61631: PUSH
61632: EMPTY
61633: ST_TO_ADDR
// for i in temp_list do
61634: LD_ADDR_VAR 0 8
61638: PUSH
61639: LD_VAR 0 9
61643: PUSH
61644: FOR_IN
61645: IFFALSE 61697
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61647: LD_ADDR_VAR 0 10
61651: PUSH
61652: LD_VAR 0 10
61656: PUSH
61657: LD_VAR 0 8
61661: PUSH
61662: LD_INT 1
61664: ARRAY
61665: PUSH
61666: LD_VAR 0 2
61670: PLUS
61671: PUSH
61672: LD_VAR 0 8
61676: PUSH
61677: LD_INT 2
61679: ARRAY
61680: PUSH
61681: LD_VAR 0 3
61685: PLUS
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: EMPTY
61692: LIST
61693: ADD
61694: ST_TO_ADDR
61695: GO 61644
61697: POP
61698: POP
// result = temp_list2 ;
61699: LD_ADDR_VAR 0 7
61703: PUSH
61704: LD_VAR 0 10
61708: ST_TO_ADDR
// end ;
61709: LD_VAR 0 7
61713: RET
// export function EnemyInRange ( unit , dist ) ; begin
61714: LD_INT 0
61716: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61717: LD_ADDR_VAR 0 3
61721: PUSH
61722: LD_VAR 0 1
61726: PPUSH
61727: CALL_OW 255
61731: PPUSH
61732: LD_VAR 0 1
61736: PPUSH
61737: CALL_OW 250
61741: PPUSH
61742: LD_VAR 0 1
61746: PPUSH
61747: CALL_OW 251
61751: PPUSH
61752: LD_VAR 0 2
61756: PPUSH
61757: CALL 35818 0 4
61761: PUSH
61762: LD_INT 4
61764: ARRAY
61765: ST_TO_ADDR
// end ;
61766: LD_VAR 0 3
61770: RET
// export function PlayerSeeMe ( unit ) ; begin
61771: LD_INT 0
61773: PPUSH
// result := See ( your_side , unit ) ;
61774: LD_ADDR_VAR 0 2
61778: PUSH
61779: LD_OWVAR 2
61783: PPUSH
61784: LD_VAR 0 1
61788: PPUSH
61789: CALL_OW 292
61793: ST_TO_ADDR
// end ;
61794: LD_VAR 0 2
61798: RET
// export function ReverseDir ( unit ) ; begin
61799: LD_INT 0
61801: PPUSH
// if not unit then
61802: LD_VAR 0 1
61806: NOT
61807: IFFALSE 61811
// exit ;
61809: GO 61834
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61811: LD_ADDR_VAR 0 2
61815: PUSH
61816: LD_VAR 0 1
61820: PPUSH
61821: CALL_OW 254
61825: PUSH
61826: LD_INT 3
61828: PLUS
61829: PUSH
61830: LD_INT 6
61832: MOD
61833: ST_TO_ADDR
// end ;
61834: LD_VAR 0 2
61838: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61839: LD_INT 0
61841: PPUSH
61842: PPUSH
61843: PPUSH
61844: PPUSH
61845: PPUSH
// if not hexes then
61846: LD_VAR 0 2
61850: NOT
61851: IFFALSE 61855
// exit ;
61853: GO 62003
// dist := 9999 ;
61855: LD_ADDR_VAR 0 5
61859: PUSH
61860: LD_INT 9999
61862: ST_TO_ADDR
// for i = 1 to hexes do
61863: LD_ADDR_VAR 0 4
61867: PUSH
61868: DOUBLE
61869: LD_INT 1
61871: DEC
61872: ST_TO_ADDR
61873: LD_VAR 0 2
61877: PUSH
61878: FOR_TO
61879: IFFALSE 61991
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61881: LD_VAR 0 1
61885: PPUSH
61886: LD_VAR 0 2
61890: PUSH
61891: LD_VAR 0 4
61895: ARRAY
61896: PUSH
61897: LD_INT 1
61899: ARRAY
61900: PPUSH
61901: LD_VAR 0 2
61905: PUSH
61906: LD_VAR 0 4
61910: ARRAY
61911: PUSH
61912: LD_INT 2
61914: ARRAY
61915: PPUSH
61916: CALL_OW 297
61920: PUSH
61921: LD_VAR 0 5
61925: LESS
61926: IFFALSE 61989
// begin hex := hexes [ i ] ;
61928: LD_ADDR_VAR 0 7
61932: PUSH
61933: LD_VAR 0 2
61937: PUSH
61938: LD_VAR 0 4
61942: ARRAY
61943: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61944: LD_ADDR_VAR 0 5
61948: PUSH
61949: LD_VAR 0 1
61953: PPUSH
61954: LD_VAR 0 2
61958: PUSH
61959: LD_VAR 0 4
61963: ARRAY
61964: PUSH
61965: LD_INT 1
61967: ARRAY
61968: PPUSH
61969: LD_VAR 0 2
61973: PUSH
61974: LD_VAR 0 4
61978: ARRAY
61979: PUSH
61980: LD_INT 2
61982: ARRAY
61983: PPUSH
61984: CALL_OW 297
61988: ST_TO_ADDR
// end ; end ;
61989: GO 61878
61991: POP
61992: POP
// result := hex ;
61993: LD_ADDR_VAR 0 3
61997: PUSH
61998: LD_VAR 0 7
62002: ST_TO_ADDR
// end ;
62003: LD_VAR 0 3
62007: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62008: LD_INT 0
62010: PPUSH
62011: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62012: LD_VAR 0 1
62016: NOT
62017: PUSH
62018: LD_VAR 0 1
62022: PUSH
62023: LD_INT 21
62025: PUSH
62026: LD_INT 2
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 23
62035: PUSH
62036: LD_INT 2
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PPUSH
62047: CALL_OW 69
62051: IN
62052: NOT
62053: OR
62054: IFFALSE 62058
// exit ;
62056: GO 62105
// for i = 1 to 3 do
62058: LD_ADDR_VAR 0 3
62062: PUSH
62063: DOUBLE
62064: LD_INT 1
62066: DEC
62067: ST_TO_ADDR
62068: LD_INT 3
62070: PUSH
62071: FOR_TO
62072: IFFALSE 62103
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62074: LD_VAR 0 1
62078: PPUSH
62079: CALL_OW 250
62083: PPUSH
62084: LD_VAR 0 1
62088: PPUSH
62089: CALL_OW 251
62093: PPUSH
62094: LD_INT 1
62096: PPUSH
62097: CALL_OW 453
62101: GO 62071
62103: POP
62104: POP
// end ;
62105: LD_VAR 0 2
62109: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62110: LD_INT 0
62112: PPUSH
62113: PPUSH
62114: PPUSH
62115: PPUSH
62116: PPUSH
62117: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62118: LD_VAR 0 1
62122: NOT
62123: PUSH
62124: LD_VAR 0 2
62128: NOT
62129: OR
62130: PUSH
62131: LD_VAR 0 1
62135: PPUSH
62136: CALL_OW 314
62140: OR
62141: IFFALSE 62145
// exit ;
62143: GO 62586
// x := GetX ( enemy_unit ) ;
62145: LD_ADDR_VAR 0 7
62149: PUSH
62150: LD_VAR 0 2
62154: PPUSH
62155: CALL_OW 250
62159: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62160: LD_ADDR_VAR 0 8
62164: PUSH
62165: LD_VAR 0 2
62169: PPUSH
62170: CALL_OW 251
62174: ST_TO_ADDR
// if not x or not y then
62175: LD_VAR 0 7
62179: NOT
62180: PUSH
62181: LD_VAR 0 8
62185: NOT
62186: OR
62187: IFFALSE 62191
// exit ;
62189: GO 62586
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62191: LD_ADDR_VAR 0 6
62195: PUSH
62196: LD_VAR 0 7
62200: PPUSH
62201: LD_INT 0
62203: PPUSH
62204: LD_INT 4
62206: PPUSH
62207: CALL_OW 272
62211: PUSH
62212: LD_VAR 0 8
62216: PPUSH
62217: LD_INT 0
62219: PPUSH
62220: LD_INT 4
62222: PPUSH
62223: CALL_OW 273
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_VAR 0 7
62236: PPUSH
62237: LD_INT 1
62239: PPUSH
62240: LD_INT 4
62242: PPUSH
62243: CALL_OW 272
62247: PUSH
62248: LD_VAR 0 8
62252: PPUSH
62253: LD_INT 1
62255: PPUSH
62256: LD_INT 4
62258: PPUSH
62259: CALL_OW 273
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_VAR 0 7
62272: PPUSH
62273: LD_INT 2
62275: PPUSH
62276: LD_INT 4
62278: PPUSH
62279: CALL_OW 272
62283: PUSH
62284: LD_VAR 0 8
62288: PPUSH
62289: LD_INT 2
62291: PPUSH
62292: LD_INT 4
62294: PPUSH
62295: CALL_OW 273
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_VAR 0 7
62308: PPUSH
62309: LD_INT 3
62311: PPUSH
62312: LD_INT 4
62314: PPUSH
62315: CALL_OW 272
62319: PUSH
62320: LD_VAR 0 8
62324: PPUSH
62325: LD_INT 3
62327: PPUSH
62328: LD_INT 4
62330: PPUSH
62331: CALL_OW 273
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_VAR 0 7
62344: PPUSH
62345: LD_INT 4
62347: PPUSH
62348: LD_INT 4
62350: PPUSH
62351: CALL_OW 272
62355: PUSH
62356: LD_VAR 0 8
62360: PPUSH
62361: LD_INT 4
62363: PPUSH
62364: LD_INT 4
62366: PPUSH
62367: CALL_OW 273
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_VAR 0 7
62380: PPUSH
62381: LD_INT 5
62383: PPUSH
62384: LD_INT 4
62386: PPUSH
62387: CALL_OW 272
62391: PUSH
62392: LD_VAR 0 8
62396: PPUSH
62397: LD_INT 5
62399: PPUSH
62400: LD_INT 4
62402: PPUSH
62403: CALL_OW 273
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: ST_TO_ADDR
// for i = tmp downto 1 do
62420: LD_ADDR_VAR 0 4
62424: PUSH
62425: DOUBLE
62426: LD_VAR 0 6
62430: INC
62431: ST_TO_ADDR
62432: LD_INT 1
62434: PUSH
62435: FOR_DOWNTO
62436: IFFALSE 62537
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62438: LD_VAR 0 6
62442: PUSH
62443: LD_VAR 0 4
62447: ARRAY
62448: PUSH
62449: LD_INT 1
62451: ARRAY
62452: PPUSH
62453: LD_VAR 0 6
62457: PUSH
62458: LD_VAR 0 4
62462: ARRAY
62463: PUSH
62464: LD_INT 2
62466: ARRAY
62467: PPUSH
62468: CALL_OW 488
62472: NOT
62473: PUSH
62474: LD_VAR 0 6
62478: PUSH
62479: LD_VAR 0 4
62483: ARRAY
62484: PUSH
62485: LD_INT 1
62487: ARRAY
62488: PPUSH
62489: LD_VAR 0 6
62493: PUSH
62494: LD_VAR 0 4
62498: ARRAY
62499: PUSH
62500: LD_INT 2
62502: ARRAY
62503: PPUSH
62504: CALL_OW 428
62508: PUSH
62509: LD_INT 0
62511: NONEQUAL
62512: OR
62513: IFFALSE 62535
// tmp := Delete ( tmp , i ) ;
62515: LD_ADDR_VAR 0 6
62519: PUSH
62520: LD_VAR 0 6
62524: PPUSH
62525: LD_VAR 0 4
62529: PPUSH
62530: CALL_OW 3
62534: ST_TO_ADDR
62535: GO 62435
62537: POP
62538: POP
// j := GetClosestHex ( unit , tmp ) ;
62539: LD_ADDR_VAR 0 5
62543: PUSH
62544: LD_VAR 0 1
62548: PPUSH
62549: LD_VAR 0 6
62553: PPUSH
62554: CALL 61839 0 2
62558: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62559: LD_VAR 0 1
62563: PPUSH
62564: LD_VAR 0 5
62568: PUSH
62569: LD_INT 1
62571: ARRAY
62572: PPUSH
62573: LD_VAR 0 5
62577: PUSH
62578: LD_INT 2
62580: ARRAY
62581: PPUSH
62582: CALL_OW 111
// end ;
62586: LD_VAR 0 3
62590: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62591: LD_INT 0
62593: PPUSH
62594: PPUSH
62595: PPUSH
// uc_side = 0 ;
62596: LD_ADDR_OWVAR 20
62600: PUSH
62601: LD_INT 0
62603: ST_TO_ADDR
// uc_nation = 0 ;
62604: LD_ADDR_OWVAR 21
62608: PUSH
62609: LD_INT 0
62611: ST_TO_ADDR
// InitHc_All ( ) ;
62612: CALL_OW 584
// InitVc ;
62616: CALL_OW 20
// if mastodonts then
62620: LD_VAR 0 6
62624: IFFALSE 62691
// for i = 1 to mastodonts do
62626: LD_ADDR_VAR 0 11
62630: PUSH
62631: DOUBLE
62632: LD_INT 1
62634: DEC
62635: ST_TO_ADDR
62636: LD_VAR 0 6
62640: PUSH
62641: FOR_TO
62642: IFFALSE 62689
// begin vc_chassis := 31 ;
62644: LD_ADDR_OWVAR 37
62648: PUSH
62649: LD_INT 31
62651: ST_TO_ADDR
// vc_control := control_rider ;
62652: LD_ADDR_OWVAR 38
62656: PUSH
62657: LD_INT 4
62659: ST_TO_ADDR
// animal := CreateVehicle ;
62660: LD_ADDR_VAR 0 12
62664: PUSH
62665: CALL_OW 45
62669: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62670: LD_VAR 0 12
62674: PPUSH
62675: LD_VAR 0 8
62679: PPUSH
62680: LD_INT 0
62682: PPUSH
62683: CALL 64879 0 3
// end ;
62687: GO 62641
62689: POP
62690: POP
// if horses then
62691: LD_VAR 0 5
62695: IFFALSE 62762
// for i = 1 to horses do
62697: LD_ADDR_VAR 0 11
62701: PUSH
62702: DOUBLE
62703: LD_INT 1
62705: DEC
62706: ST_TO_ADDR
62707: LD_VAR 0 5
62711: PUSH
62712: FOR_TO
62713: IFFALSE 62760
// begin hc_class := 21 ;
62715: LD_ADDR_OWVAR 28
62719: PUSH
62720: LD_INT 21
62722: ST_TO_ADDR
// hc_gallery :=  ;
62723: LD_ADDR_OWVAR 33
62727: PUSH
62728: LD_STRING 
62730: ST_TO_ADDR
// animal := CreateHuman ;
62731: LD_ADDR_VAR 0 12
62735: PUSH
62736: CALL_OW 44
62740: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62741: LD_VAR 0 12
62745: PPUSH
62746: LD_VAR 0 8
62750: PPUSH
62751: LD_INT 0
62753: PPUSH
62754: CALL 64879 0 3
// end ;
62758: GO 62712
62760: POP
62761: POP
// if birds then
62762: LD_VAR 0 1
62766: IFFALSE 62833
// for i = 1 to birds do
62768: LD_ADDR_VAR 0 11
62772: PUSH
62773: DOUBLE
62774: LD_INT 1
62776: DEC
62777: ST_TO_ADDR
62778: LD_VAR 0 1
62782: PUSH
62783: FOR_TO
62784: IFFALSE 62831
// begin hc_class = 18 ;
62786: LD_ADDR_OWVAR 28
62790: PUSH
62791: LD_INT 18
62793: ST_TO_ADDR
// hc_gallery =  ;
62794: LD_ADDR_OWVAR 33
62798: PUSH
62799: LD_STRING 
62801: ST_TO_ADDR
// animal := CreateHuman ;
62802: LD_ADDR_VAR 0 12
62806: PUSH
62807: CALL_OW 44
62811: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62812: LD_VAR 0 12
62816: PPUSH
62817: LD_VAR 0 8
62821: PPUSH
62822: LD_INT 0
62824: PPUSH
62825: CALL 64879 0 3
// end ;
62829: GO 62783
62831: POP
62832: POP
// if tigers then
62833: LD_VAR 0 2
62837: IFFALSE 62921
// for i = 1 to tigers do
62839: LD_ADDR_VAR 0 11
62843: PUSH
62844: DOUBLE
62845: LD_INT 1
62847: DEC
62848: ST_TO_ADDR
62849: LD_VAR 0 2
62853: PUSH
62854: FOR_TO
62855: IFFALSE 62919
// begin hc_class = class_tiger ;
62857: LD_ADDR_OWVAR 28
62861: PUSH
62862: LD_INT 14
62864: ST_TO_ADDR
// hc_gallery =  ;
62865: LD_ADDR_OWVAR 33
62869: PUSH
62870: LD_STRING 
62872: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62873: LD_ADDR_OWVAR 35
62877: PUSH
62878: LD_INT 7
62880: NEG
62881: PPUSH
62882: LD_INT 7
62884: PPUSH
62885: CALL_OW 12
62889: ST_TO_ADDR
// animal := CreateHuman ;
62890: LD_ADDR_VAR 0 12
62894: PUSH
62895: CALL_OW 44
62899: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62900: LD_VAR 0 12
62904: PPUSH
62905: LD_VAR 0 8
62909: PPUSH
62910: LD_INT 0
62912: PPUSH
62913: CALL 64879 0 3
// end ;
62917: GO 62854
62919: POP
62920: POP
// if apemans then
62921: LD_VAR 0 3
62925: IFFALSE 63048
// for i = 1 to apemans do
62927: LD_ADDR_VAR 0 11
62931: PUSH
62932: DOUBLE
62933: LD_INT 1
62935: DEC
62936: ST_TO_ADDR
62937: LD_VAR 0 3
62941: PUSH
62942: FOR_TO
62943: IFFALSE 63046
// begin hc_class = class_apeman ;
62945: LD_ADDR_OWVAR 28
62949: PUSH
62950: LD_INT 12
62952: ST_TO_ADDR
// hc_gallery =  ;
62953: LD_ADDR_OWVAR 33
62957: PUSH
62958: LD_STRING 
62960: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62961: LD_ADDR_OWVAR 35
62965: PUSH
62966: LD_INT 5
62968: NEG
62969: PPUSH
62970: LD_INT 5
62972: PPUSH
62973: CALL_OW 12
62977: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62978: LD_ADDR_OWVAR 31
62982: PUSH
62983: LD_INT 1
62985: PPUSH
62986: LD_INT 3
62988: PPUSH
62989: CALL_OW 12
62993: PUSH
62994: LD_INT 1
62996: PPUSH
62997: LD_INT 3
62999: PPUSH
63000: CALL_OW 12
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: ST_TO_ADDR
// animal := CreateHuman ;
63017: LD_ADDR_VAR 0 12
63021: PUSH
63022: CALL_OW 44
63026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63027: LD_VAR 0 12
63031: PPUSH
63032: LD_VAR 0 8
63036: PPUSH
63037: LD_INT 0
63039: PPUSH
63040: CALL 64879 0 3
// end ;
63044: GO 62942
63046: POP
63047: POP
// if enchidnas then
63048: LD_VAR 0 4
63052: IFFALSE 63119
// for i = 1 to enchidnas do
63054: LD_ADDR_VAR 0 11
63058: PUSH
63059: DOUBLE
63060: LD_INT 1
63062: DEC
63063: ST_TO_ADDR
63064: LD_VAR 0 4
63068: PUSH
63069: FOR_TO
63070: IFFALSE 63117
// begin hc_class = 13 ;
63072: LD_ADDR_OWVAR 28
63076: PUSH
63077: LD_INT 13
63079: ST_TO_ADDR
// hc_gallery =  ;
63080: LD_ADDR_OWVAR 33
63084: PUSH
63085: LD_STRING 
63087: ST_TO_ADDR
// animal := CreateHuman ;
63088: LD_ADDR_VAR 0 12
63092: PUSH
63093: CALL_OW 44
63097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63098: LD_VAR 0 12
63102: PPUSH
63103: LD_VAR 0 8
63107: PPUSH
63108: LD_INT 0
63110: PPUSH
63111: CALL 64879 0 3
// end ;
63115: GO 63069
63117: POP
63118: POP
// if fishes then
63119: LD_VAR 0 7
63123: IFFALSE 63190
// for i = 1 to fishes do
63125: LD_ADDR_VAR 0 11
63129: PUSH
63130: DOUBLE
63131: LD_INT 1
63133: DEC
63134: ST_TO_ADDR
63135: LD_VAR 0 7
63139: PUSH
63140: FOR_TO
63141: IFFALSE 63188
// begin hc_class = 20 ;
63143: LD_ADDR_OWVAR 28
63147: PUSH
63148: LD_INT 20
63150: ST_TO_ADDR
// hc_gallery =  ;
63151: LD_ADDR_OWVAR 33
63155: PUSH
63156: LD_STRING 
63158: ST_TO_ADDR
// animal := CreateHuman ;
63159: LD_ADDR_VAR 0 12
63163: PUSH
63164: CALL_OW 44
63168: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63169: LD_VAR 0 12
63173: PPUSH
63174: LD_VAR 0 9
63178: PPUSH
63179: LD_INT 0
63181: PPUSH
63182: CALL 64879 0 3
// end ;
63186: GO 63140
63188: POP
63189: POP
// end ;
63190: LD_VAR 0 10
63194: RET
// export function WantHeal ( sci , unit ) ; begin
63195: LD_INT 0
63197: PPUSH
// if GetTaskList ( sci ) > 0 then
63198: LD_VAR 0 1
63202: PPUSH
63203: CALL_OW 437
63207: PUSH
63208: LD_INT 0
63210: GREATER
63211: IFFALSE 63281
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63213: LD_VAR 0 1
63217: PPUSH
63218: CALL_OW 437
63222: PUSH
63223: LD_INT 1
63225: ARRAY
63226: PUSH
63227: LD_INT 1
63229: ARRAY
63230: PUSH
63231: LD_STRING l
63233: EQUAL
63234: PUSH
63235: LD_VAR 0 1
63239: PPUSH
63240: CALL_OW 437
63244: PUSH
63245: LD_INT 1
63247: ARRAY
63248: PUSH
63249: LD_INT 4
63251: ARRAY
63252: PUSH
63253: LD_VAR 0 2
63257: EQUAL
63258: AND
63259: IFFALSE 63271
// result := true else
63261: LD_ADDR_VAR 0 3
63265: PUSH
63266: LD_INT 1
63268: ST_TO_ADDR
63269: GO 63279
// result := false ;
63271: LD_ADDR_VAR 0 3
63275: PUSH
63276: LD_INT 0
63278: ST_TO_ADDR
// end else
63279: GO 63289
// result := false ;
63281: LD_ADDR_VAR 0 3
63285: PUSH
63286: LD_INT 0
63288: ST_TO_ADDR
// end ;
63289: LD_VAR 0 3
63293: RET
// export function HealTarget ( sci ) ; begin
63294: LD_INT 0
63296: PPUSH
// if not sci then
63297: LD_VAR 0 1
63301: NOT
63302: IFFALSE 63306
// exit ;
63304: GO 63371
// result := 0 ;
63306: LD_ADDR_VAR 0 2
63310: PUSH
63311: LD_INT 0
63313: ST_TO_ADDR
// if GetTaskList ( sci ) then
63314: LD_VAR 0 1
63318: PPUSH
63319: CALL_OW 437
63323: IFFALSE 63371
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63325: LD_VAR 0 1
63329: PPUSH
63330: CALL_OW 437
63334: PUSH
63335: LD_INT 1
63337: ARRAY
63338: PUSH
63339: LD_INT 1
63341: ARRAY
63342: PUSH
63343: LD_STRING l
63345: EQUAL
63346: IFFALSE 63371
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63348: LD_ADDR_VAR 0 2
63352: PUSH
63353: LD_VAR 0 1
63357: PPUSH
63358: CALL_OW 437
63362: PUSH
63363: LD_INT 1
63365: ARRAY
63366: PUSH
63367: LD_INT 4
63369: ARRAY
63370: ST_TO_ADDR
// end ;
63371: LD_VAR 0 2
63375: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63376: LD_INT 0
63378: PPUSH
63379: PPUSH
63380: PPUSH
63381: PPUSH
// if not base_units then
63382: LD_VAR 0 1
63386: NOT
63387: IFFALSE 63391
// exit ;
63389: GO 63478
// result := false ;
63391: LD_ADDR_VAR 0 2
63395: PUSH
63396: LD_INT 0
63398: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63399: LD_ADDR_VAR 0 5
63403: PUSH
63404: LD_VAR 0 1
63408: PPUSH
63409: LD_INT 21
63411: PUSH
63412: LD_INT 3
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PPUSH
63419: CALL_OW 72
63423: ST_TO_ADDR
// if not tmp then
63424: LD_VAR 0 5
63428: NOT
63429: IFFALSE 63433
// exit ;
63431: GO 63478
// for i in tmp do
63433: LD_ADDR_VAR 0 3
63437: PUSH
63438: LD_VAR 0 5
63442: PUSH
63443: FOR_IN
63444: IFFALSE 63476
// begin result := EnemyInRange ( i , 22 ) ;
63446: LD_ADDR_VAR 0 2
63450: PUSH
63451: LD_VAR 0 3
63455: PPUSH
63456: LD_INT 22
63458: PPUSH
63459: CALL 61714 0 2
63463: ST_TO_ADDR
// if result then
63464: LD_VAR 0 2
63468: IFFALSE 63474
// exit ;
63470: POP
63471: POP
63472: GO 63478
// end ;
63474: GO 63443
63476: POP
63477: POP
// end ;
63478: LD_VAR 0 2
63482: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63483: LD_INT 0
63485: PPUSH
63486: PPUSH
// if not units then
63487: LD_VAR 0 1
63491: NOT
63492: IFFALSE 63496
// exit ;
63494: GO 63566
// result := [ ] ;
63496: LD_ADDR_VAR 0 3
63500: PUSH
63501: EMPTY
63502: ST_TO_ADDR
// for i in units do
63503: LD_ADDR_VAR 0 4
63507: PUSH
63508: LD_VAR 0 1
63512: PUSH
63513: FOR_IN
63514: IFFALSE 63564
// if GetTag ( i ) = tag then
63516: LD_VAR 0 4
63520: PPUSH
63521: CALL_OW 110
63525: PUSH
63526: LD_VAR 0 2
63530: EQUAL
63531: IFFALSE 63562
// result := Insert ( result , result + 1 , i ) ;
63533: LD_ADDR_VAR 0 3
63537: PUSH
63538: LD_VAR 0 3
63542: PPUSH
63543: LD_VAR 0 3
63547: PUSH
63548: LD_INT 1
63550: PLUS
63551: PPUSH
63552: LD_VAR 0 4
63556: PPUSH
63557: CALL_OW 2
63561: ST_TO_ADDR
63562: GO 63513
63564: POP
63565: POP
// end ;
63566: LD_VAR 0 3
63570: RET
// export function IsDriver ( un ) ; begin
63571: LD_INT 0
63573: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63574: LD_ADDR_VAR 0 2
63578: PUSH
63579: LD_VAR 0 1
63583: PUSH
63584: LD_INT 55
63586: PUSH
63587: EMPTY
63588: LIST
63589: PPUSH
63590: CALL_OW 69
63594: IN
63595: ST_TO_ADDR
// end ;
63596: LD_VAR 0 2
63600: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63601: LD_INT 0
63603: PPUSH
63604: PPUSH
// list := [ ] ;
63605: LD_ADDR_VAR 0 5
63609: PUSH
63610: EMPTY
63611: ST_TO_ADDR
// case d of 0 :
63612: LD_VAR 0 3
63616: PUSH
63617: LD_INT 0
63619: DOUBLE
63620: EQUAL
63621: IFTRUE 63625
63623: GO 63758
63625: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63626: LD_ADDR_VAR 0 5
63630: PUSH
63631: LD_VAR 0 1
63635: PUSH
63636: LD_INT 4
63638: MINUS
63639: PUSH
63640: LD_VAR 0 2
63644: PUSH
63645: LD_INT 4
63647: MINUS
63648: PUSH
63649: LD_INT 2
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: LIST
63656: PUSH
63657: LD_VAR 0 1
63661: PUSH
63662: LD_INT 3
63664: MINUS
63665: PUSH
63666: LD_VAR 0 2
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: PUSH
63679: LD_VAR 0 1
63683: PUSH
63684: LD_INT 4
63686: PLUS
63687: PUSH
63688: LD_VAR 0 2
63692: PUSH
63693: LD_INT 4
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: PUSH
63701: LD_VAR 0 1
63705: PUSH
63706: LD_INT 3
63708: PLUS
63709: PUSH
63710: LD_VAR 0 2
63714: PUSH
63715: LD_INT 3
63717: PLUS
63718: PUSH
63719: LD_INT 5
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: PUSH
63727: LD_VAR 0 1
63731: PUSH
63732: LD_VAR 0 2
63736: PUSH
63737: LD_INT 4
63739: PLUS
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: ST_TO_ADDR
// end ; 1 :
63756: GO 64456
63758: LD_INT 1
63760: DOUBLE
63761: EQUAL
63762: IFTRUE 63766
63764: GO 63899
63766: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63767: LD_ADDR_VAR 0 5
63771: PUSH
63772: LD_VAR 0 1
63776: PUSH
63777: LD_VAR 0 2
63781: PUSH
63782: LD_INT 4
63784: MINUS
63785: PUSH
63786: LD_INT 3
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: LIST
63793: PUSH
63794: LD_VAR 0 1
63798: PUSH
63799: LD_INT 3
63801: MINUS
63802: PUSH
63803: LD_VAR 0 2
63807: PUSH
63808: LD_INT 3
63810: MINUS
63811: PUSH
63812: LD_INT 2
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: LIST
63819: PUSH
63820: LD_VAR 0 1
63824: PUSH
63825: LD_INT 4
63827: MINUS
63828: PUSH
63829: LD_VAR 0 2
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: LIST
63841: PUSH
63842: LD_VAR 0 1
63846: PUSH
63847: LD_VAR 0 2
63851: PUSH
63852: LD_INT 3
63854: PLUS
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: LIST
63863: PUSH
63864: LD_VAR 0 1
63868: PUSH
63869: LD_INT 4
63871: PLUS
63872: PUSH
63873: LD_VAR 0 2
63877: PUSH
63878: LD_INT 4
63880: PLUS
63881: PUSH
63882: LD_INT 5
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: LIST
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: ST_TO_ADDR
// end ; 2 :
63897: GO 64456
63899: LD_INT 2
63901: DOUBLE
63902: EQUAL
63903: IFTRUE 63907
63905: GO 64036
63907: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63908: LD_ADDR_VAR 0 5
63912: PUSH
63913: LD_VAR 0 1
63917: PUSH
63918: LD_VAR 0 2
63922: PUSH
63923: LD_INT 3
63925: MINUS
63926: PUSH
63927: LD_INT 3
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: LIST
63934: PUSH
63935: LD_VAR 0 1
63939: PUSH
63940: LD_INT 4
63942: PLUS
63943: PUSH
63944: LD_VAR 0 2
63948: PUSH
63949: LD_INT 4
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: PUSH
63957: LD_VAR 0 1
63961: PUSH
63962: LD_VAR 0 2
63966: PUSH
63967: LD_INT 4
63969: PLUS
63970: PUSH
63971: LD_INT 0
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: LIST
63978: PUSH
63979: LD_VAR 0 1
63983: PUSH
63984: LD_INT 3
63986: MINUS
63987: PUSH
63988: LD_VAR 0 2
63992: PUSH
63993: LD_INT 1
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: LIST
64000: PUSH
64001: LD_VAR 0 1
64005: PUSH
64006: LD_INT 4
64008: MINUS
64009: PUSH
64010: LD_VAR 0 2
64014: PUSH
64015: LD_INT 4
64017: MINUS
64018: PUSH
64019: LD_INT 2
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: LIST
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: ST_TO_ADDR
// end ; 3 :
64034: GO 64456
64036: LD_INT 3
64038: DOUBLE
64039: EQUAL
64040: IFTRUE 64044
64042: GO 64177
64044: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64045: LD_ADDR_VAR 0 5
64049: PUSH
64050: LD_VAR 0 1
64054: PUSH
64055: LD_INT 3
64057: PLUS
64058: PUSH
64059: LD_VAR 0 2
64063: PUSH
64064: LD_INT 4
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: LIST
64071: PUSH
64072: LD_VAR 0 1
64076: PUSH
64077: LD_INT 4
64079: PLUS
64080: PUSH
64081: LD_VAR 0 2
64085: PUSH
64086: LD_INT 4
64088: PLUS
64089: PUSH
64090: LD_INT 5
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: LIST
64097: PUSH
64098: LD_VAR 0 1
64102: PUSH
64103: LD_INT 4
64105: MINUS
64106: PUSH
64107: LD_VAR 0 2
64111: PUSH
64112: LD_INT 1
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: LIST
64119: PUSH
64120: LD_VAR 0 1
64124: PUSH
64125: LD_VAR 0 2
64129: PUSH
64130: LD_INT 4
64132: MINUS
64133: PUSH
64134: LD_INT 3
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: LIST
64141: PUSH
64142: LD_VAR 0 1
64146: PUSH
64147: LD_INT 3
64149: MINUS
64150: PUSH
64151: LD_VAR 0 2
64155: PUSH
64156: LD_INT 3
64158: MINUS
64159: PUSH
64160: LD_INT 2
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: LIST
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: ST_TO_ADDR
// end ; 4 :
64175: GO 64456
64177: LD_INT 4
64179: DOUBLE
64180: EQUAL
64181: IFTRUE 64185
64183: GO 64318
64185: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64186: LD_ADDR_VAR 0 5
64190: PUSH
64191: LD_VAR 0 1
64195: PUSH
64196: LD_VAR 0 2
64200: PUSH
64201: LD_INT 4
64203: PLUS
64204: PUSH
64205: LD_INT 0
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: LIST
64212: PUSH
64213: LD_VAR 0 1
64217: PUSH
64218: LD_INT 3
64220: PLUS
64221: PUSH
64222: LD_VAR 0 2
64226: PUSH
64227: LD_INT 3
64229: PLUS
64230: PUSH
64231: LD_INT 5
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: LIST
64238: PUSH
64239: LD_VAR 0 1
64243: PUSH
64244: LD_INT 4
64246: PLUS
64247: PUSH
64248: LD_VAR 0 2
64252: PUSH
64253: LD_INT 4
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: LIST
64260: PUSH
64261: LD_VAR 0 1
64265: PUSH
64266: LD_VAR 0 2
64270: PUSH
64271: LD_INT 3
64273: MINUS
64274: PUSH
64275: LD_INT 3
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: LIST
64282: PUSH
64283: LD_VAR 0 1
64287: PUSH
64288: LD_INT 4
64290: MINUS
64291: PUSH
64292: LD_VAR 0 2
64296: PUSH
64297: LD_INT 4
64299: MINUS
64300: PUSH
64301: LD_INT 2
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: LIST
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: ST_TO_ADDR
// end ; 5 :
64316: GO 64456
64318: LD_INT 5
64320: DOUBLE
64321: EQUAL
64322: IFTRUE 64326
64324: GO 64455
64326: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64327: LD_ADDR_VAR 0 5
64331: PUSH
64332: LD_VAR 0 1
64336: PUSH
64337: LD_INT 4
64339: MINUS
64340: PUSH
64341: LD_VAR 0 2
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: LIST
64353: PUSH
64354: LD_VAR 0 1
64358: PUSH
64359: LD_VAR 0 2
64363: PUSH
64364: LD_INT 4
64366: MINUS
64367: PUSH
64368: LD_INT 3
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: LIST
64375: PUSH
64376: LD_VAR 0 1
64380: PUSH
64381: LD_INT 4
64383: PLUS
64384: PUSH
64385: LD_VAR 0 2
64389: PUSH
64390: LD_INT 4
64392: PLUS
64393: PUSH
64394: LD_INT 5
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: LIST
64401: PUSH
64402: LD_VAR 0 1
64406: PUSH
64407: LD_INT 3
64409: PLUS
64410: PUSH
64411: LD_VAR 0 2
64415: PUSH
64416: LD_INT 4
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: LIST
64423: PUSH
64424: LD_VAR 0 1
64428: PUSH
64429: LD_VAR 0 2
64433: PUSH
64434: LD_INT 3
64436: PLUS
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: LIST
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: ST_TO_ADDR
// end ; end ;
64453: GO 64456
64455: POP
// result := list ;
64456: LD_ADDR_VAR 0 4
64460: PUSH
64461: LD_VAR 0 5
64465: ST_TO_ADDR
// end ;
64466: LD_VAR 0 4
64470: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64471: LD_INT 0
64473: PPUSH
64474: PPUSH
64475: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64476: LD_VAR 0 1
64480: NOT
64481: PUSH
64482: LD_VAR 0 2
64486: PUSH
64487: LD_INT 1
64489: PUSH
64490: LD_INT 2
64492: PUSH
64493: LD_INT 3
64495: PUSH
64496: LD_INT 4
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: IN
64505: NOT
64506: OR
64507: IFFALSE 64511
// exit ;
64509: GO 64603
// tmp := [ ] ;
64511: LD_ADDR_VAR 0 5
64515: PUSH
64516: EMPTY
64517: ST_TO_ADDR
// for i in units do
64518: LD_ADDR_VAR 0 4
64522: PUSH
64523: LD_VAR 0 1
64527: PUSH
64528: FOR_IN
64529: IFFALSE 64572
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64531: LD_ADDR_VAR 0 5
64535: PUSH
64536: LD_VAR 0 5
64540: PPUSH
64541: LD_VAR 0 5
64545: PUSH
64546: LD_INT 1
64548: PLUS
64549: PPUSH
64550: LD_VAR 0 4
64554: PPUSH
64555: LD_VAR 0 2
64559: PPUSH
64560: CALL_OW 259
64564: PPUSH
64565: CALL_OW 2
64569: ST_TO_ADDR
64570: GO 64528
64572: POP
64573: POP
// if not tmp then
64574: LD_VAR 0 5
64578: NOT
64579: IFFALSE 64583
// exit ;
64581: GO 64603
// result := SortListByListDesc ( units , tmp ) ;
64583: LD_ADDR_VAR 0 3
64587: PUSH
64588: LD_VAR 0 1
64592: PPUSH
64593: LD_VAR 0 5
64597: PPUSH
64598: CALL_OW 77
64602: ST_TO_ADDR
// end ;
64603: LD_VAR 0 3
64607: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64608: LD_INT 0
64610: PPUSH
64611: PPUSH
64612: PPUSH
// result := false ;
64613: LD_ADDR_VAR 0 3
64617: PUSH
64618: LD_INT 0
64620: ST_TO_ADDR
// x := GetX ( building ) ;
64621: LD_ADDR_VAR 0 4
64625: PUSH
64626: LD_VAR 0 2
64630: PPUSH
64631: CALL_OW 250
64635: ST_TO_ADDR
// y := GetY ( building ) ;
64636: LD_ADDR_VAR 0 5
64640: PUSH
64641: LD_VAR 0 2
64645: PPUSH
64646: CALL_OW 251
64650: ST_TO_ADDR
// if not building or not x or not y then
64651: LD_VAR 0 2
64655: NOT
64656: PUSH
64657: LD_VAR 0 4
64661: NOT
64662: OR
64663: PUSH
64664: LD_VAR 0 5
64668: NOT
64669: OR
64670: IFFALSE 64674
// exit ;
64672: GO 64766
// if GetTaskList ( unit ) then
64674: LD_VAR 0 1
64678: PPUSH
64679: CALL_OW 437
64683: IFFALSE 64766
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64685: LD_STRING e
64687: PUSH
64688: LD_VAR 0 1
64692: PPUSH
64693: CALL_OW 437
64697: PUSH
64698: LD_INT 1
64700: ARRAY
64701: PUSH
64702: LD_INT 1
64704: ARRAY
64705: EQUAL
64706: PUSH
64707: LD_VAR 0 4
64711: PUSH
64712: LD_VAR 0 1
64716: PPUSH
64717: CALL_OW 437
64721: PUSH
64722: LD_INT 1
64724: ARRAY
64725: PUSH
64726: LD_INT 2
64728: ARRAY
64729: EQUAL
64730: AND
64731: PUSH
64732: LD_VAR 0 5
64736: PUSH
64737: LD_VAR 0 1
64741: PPUSH
64742: CALL_OW 437
64746: PUSH
64747: LD_INT 1
64749: ARRAY
64750: PUSH
64751: LD_INT 3
64753: ARRAY
64754: EQUAL
64755: AND
64756: IFFALSE 64766
// result := true end ;
64758: LD_ADDR_VAR 0 3
64762: PUSH
64763: LD_INT 1
64765: ST_TO_ADDR
// end ;
64766: LD_VAR 0 3
64770: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64771: LD_INT 0
64773: PPUSH
// result := false ;
64774: LD_ADDR_VAR 0 4
64778: PUSH
64779: LD_INT 0
64781: ST_TO_ADDR
// if GetTaskList ( unit ) then
64782: LD_VAR 0 1
64786: PPUSH
64787: CALL_OW 437
64791: IFFALSE 64874
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64793: LD_STRING M
64795: PUSH
64796: LD_VAR 0 1
64800: PPUSH
64801: CALL_OW 437
64805: PUSH
64806: LD_INT 1
64808: ARRAY
64809: PUSH
64810: LD_INT 1
64812: ARRAY
64813: EQUAL
64814: PUSH
64815: LD_VAR 0 2
64819: PUSH
64820: LD_VAR 0 1
64824: PPUSH
64825: CALL_OW 437
64829: PUSH
64830: LD_INT 1
64832: ARRAY
64833: PUSH
64834: LD_INT 2
64836: ARRAY
64837: EQUAL
64838: AND
64839: PUSH
64840: LD_VAR 0 3
64844: PUSH
64845: LD_VAR 0 1
64849: PPUSH
64850: CALL_OW 437
64854: PUSH
64855: LD_INT 1
64857: ARRAY
64858: PUSH
64859: LD_INT 3
64861: ARRAY
64862: EQUAL
64863: AND
64864: IFFALSE 64874
// result := true ;
64866: LD_ADDR_VAR 0 4
64870: PUSH
64871: LD_INT 1
64873: ST_TO_ADDR
// end ; end ;
64874: LD_VAR 0 4
64878: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64879: LD_INT 0
64881: PPUSH
64882: PPUSH
64883: PPUSH
64884: PPUSH
// if not unit or not area then
64885: LD_VAR 0 1
64889: NOT
64890: PUSH
64891: LD_VAR 0 2
64895: NOT
64896: OR
64897: IFFALSE 64901
// exit ;
64899: GO 65065
// tmp := AreaToList ( area , i ) ;
64901: LD_ADDR_VAR 0 6
64905: PUSH
64906: LD_VAR 0 2
64910: PPUSH
64911: LD_VAR 0 5
64915: PPUSH
64916: CALL_OW 517
64920: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64921: LD_ADDR_VAR 0 5
64925: PUSH
64926: DOUBLE
64927: LD_INT 1
64929: DEC
64930: ST_TO_ADDR
64931: LD_VAR 0 6
64935: PUSH
64936: LD_INT 1
64938: ARRAY
64939: PUSH
64940: FOR_TO
64941: IFFALSE 65063
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64943: LD_ADDR_VAR 0 7
64947: PUSH
64948: LD_VAR 0 6
64952: PUSH
64953: LD_INT 1
64955: ARRAY
64956: PUSH
64957: LD_VAR 0 5
64961: ARRAY
64962: PUSH
64963: LD_VAR 0 6
64967: PUSH
64968: LD_INT 2
64970: ARRAY
64971: PUSH
64972: LD_VAR 0 5
64976: ARRAY
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64982: LD_VAR 0 7
64986: PUSH
64987: LD_INT 1
64989: ARRAY
64990: PPUSH
64991: LD_VAR 0 7
64995: PUSH
64996: LD_INT 2
64998: ARRAY
64999: PPUSH
65000: CALL_OW 428
65004: PUSH
65005: LD_INT 0
65007: EQUAL
65008: IFFALSE 65061
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65010: LD_VAR 0 1
65014: PPUSH
65015: LD_VAR 0 7
65019: PUSH
65020: LD_INT 1
65022: ARRAY
65023: PPUSH
65024: LD_VAR 0 7
65028: PUSH
65029: LD_INT 2
65031: ARRAY
65032: PPUSH
65033: LD_VAR 0 3
65037: PPUSH
65038: CALL_OW 48
// result := IsPlaced ( unit ) ;
65042: LD_ADDR_VAR 0 4
65046: PUSH
65047: LD_VAR 0 1
65051: PPUSH
65052: CALL_OW 305
65056: ST_TO_ADDR
// exit ;
65057: POP
65058: POP
65059: GO 65065
// end ; end ;
65061: GO 64940
65063: POP
65064: POP
// end ;
65065: LD_VAR 0 4
65069: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65070: LD_INT 0
65072: PPUSH
65073: PPUSH
65074: PPUSH
// if not side or side > 8 then
65075: LD_VAR 0 1
65079: NOT
65080: PUSH
65081: LD_VAR 0 1
65085: PUSH
65086: LD_INT 8
65088: GREATER
65089: OR
65090: IFFALSE 65094
// exit ;
65092: GO 65281
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65094: LD_ADDR_VAR 0 4
65098: PUSH
65099: LD_INT 22
65101: PUSH
65102: LD_VAR 0 1
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 21
65113: PUSH
65114: LD_INT 3
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PPUSH
65125: CALL_OW 69
65129: ST_TO_ADDR
// if not tmp then
65130: LD_VAR 0 4
65134: NOT
65135: IFFALSE 65139
// exit ;
65137: GO 65281
// enable_addtolog := true ;
65139: LD_ADDR_OWVAR 81
65143: PUSH
65144: LD_INT 1
65146: ST_TO_ADDR
// AddToLog ( [ ) ;
65147: LD_STRING [
65149: PPUSH
65150: CALL_OW 561
// for i in tmp do
65154: LD_ADDR_VAR 0 3
65158: PUSH
65159: LD_VAR 0 4
65163: PUSH
65164: FOR_IN
65165: IFFALSE 65272
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65167: LD_STRING [
65169: PUSH
65170: LD_VAR 0 3
65174: PPUSH
65175: CALL_OW 266
65179: STR
65180: PUSH
65181: LD_STRING , 
65183: STR
65184: PUSH
65185: LD_VAR 0 3
65189: PPUSH
65190: CALL_OW 250
65194: STR
65195: PUSH
65196: LD_STRING , 
65198: STR
65199: PUSH
65200: LD_VAR 0 3
65204: PPUSH
65205: CALL_OW 251
65209: STR
65210: PUSH
65211: LD_STRING , 
65213: STR
65214: PUSH
65215: LD_VAR 0 3
65219: PPUSH
65220: CALL_OW 254
65224: STR
65225: PUSH
65226: LD_STRING , 
65228: STR
65229: PUSH
65230: LD_VAR 0 3
65234: PPUSH
65235: LD_INT 1
65237: PPUSH
65238: CALL_OW 268
65242: STR
65243: PUSH
65244: LD_STRING , 
65246: STR
65247: PUSH
65248: LD_VAR 0 3
65252: PPUSH
65253: LD_INT 2
65255: PPUSH
65256: CALL_OW 268
65260: STR
65261: PUSH
65262: LD_STRING ],
65264: STR
65265: PPUSH
65266: CALL_OW 561
// end ;
65270: GO 65164
65272: POP
65273: POP
// AddToLog ( ]; ) ;
65274: LD_STRING ];
65276: PPUSH
65277: CALL_OW 561
// end ;
65281: LD_VAR 0 2
65285: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65286: LD_INT 0
65288: PPUSH
65289: PPUSH
65290: PPUSH
65291: PPUSH
65292: PPUSH
// if not area or not rate or not max then
65293: LD_VAR 0 1
65297: NOT
65298: PUSH
65299: LD_VAR 0 2
65303: NOT
65304: OR
65305: PUSH
65306: LD_VAR 0 4
65310: NOT
65311: OR
65312: IFFALSE 65316
// exit ;
65314: GO 65508
// while 1 do
65316: LD_INT 1
65318: IFFALSE 65508
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65320: LD_ADDR_VAR 0 9
65324: PUSH
65325: LD_VAR 0 1
65329: PPUSH
65330: LD_INT 1
65332: PPUSH
65333: CALL_OW 287
65337: PUSH
65338: LD_INT 10
65340: MUL
65341: ST_TO_ADDR
// r := rate / 10 ;
65342: LD_ADDR_VAR 0 7
65346: PUSH
65347: LD_VAR 0 2
65351: PUSH
65352: LD_INT 10
65354: DIVREAL
65355: ST_TO_ADDR
// time := 1 1$00 ;
65356: LD_ADDR_VAR 0 8
65360: PUSH
65361: LD_INT 2100
65363: ST_TO_ADDR
// if amount < min then
65364: LD_VAR 0 9
65368: PUSH
65369: LD_VAR 0 3
65373: LESS
65374: IFFALSE 65392
// r := r * 2 else
65376: LD_ADDR_VAR 0 7
65380: PUSH
65381: LD_VAR 0 7
65385: PUSH
65386: LD_INT 2
65388: MUL
65389: ST_TO_ADDR
65390: GO 65418
// if amount > max then
65392: LD_VAR 0 9
65396: PUSH
65397: LD_VAR 0 4
65401: GREATER
65402: IFFALSE 65418
// r := r / 2 ;
65404: LD_ADDR_VAR 0 7
65408: PUSH
65409: LD_VAR 0 7
65413: PUSH
65414: LD_INT 2
65416: DIVREAL
65417: ST_TO_ADDR
// time := time / r ;
65418: LD_ADDR_VAR 0 8
65422: PUSH
65423: LD_VAR 0 8
65427: PUSH
65428: LD_VAR 0 7
65432: DIVREAL
65433: ST_TO_ADDR
// if time < 0 then
65434: LD_VAR 0 8
65438: PUSH
65439: LD_INT 0
65441: LESS
65442: IFFALSE 65459
// time := time * - 1 ;
65444: LD_ADDR_VAR 0 8
65448: PUSH
65449: LD_VAR 0 8
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: MUL
65458: ST_TO_ADDR
// wait ( time ) ;
65459: LD_VAR 0 8
65463: PPUSH
65464: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65468: LD_INT 35
65470: PPUSH
65471: LD_INT 875
65473: PPUSH
65474: CALL_OW 12
65478: PPUSH
65479: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65483: LD_INT 1
65485: PPUSH
65486: LD_INT 5
65488: PPUSH
65489: CALL_OW 12
65493: PPUSH
65494: LD_VAR 0 1
65498: PPUSH
65499: LD_INT 1
65501: PPUSH
65502: CALL_OW 55
// end ;
65506: GO 65316
// end ;
65508: LD_VAR 0 5
65512: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65513: LD_INT 0
65515: PPUSH
65516: PPUSH
65517: PPUSH
65518: PPUSH
65519: PPUSH
65520: PPUSH
65521: PPUSH
65522: PPUSH
// if not turrets or not factories then
65523: LD_VAR 0 1
65527: NOT
65528: PUSH
65529: LD_VAR 0 2
65533: NOT
65534: OR
65535: IFFALSE 65539
// exit ;
65537: GO 65846
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65539: LD_ADDR_VAR 0 10
65543: PUSH
65544: LD_INT 5
65546: PUSH
65547: LD_INT 6
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 2
65556: PUSH
65557: LD_INT 4
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 3
65566: PUSH
65567: LD_INT 5
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 24
65581: PUSH
65582: LD_INT 25
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 23
65591: PUSH
65592: LD_INT 27
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 42
65605: PUSH
65606: LD_INT 43
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 44
65615: PUSH
65616: LD_INT 46
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 45
65625: PUSH
65626: LD_INT 47
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: LIST
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: LIST
65642: ST_TO_ADDR
// result := [ ] ;
65643: LD_ADDR_VAR 0 3
65647: PUSH
65648: EMPTY
65649: ST_TO_ADDR
// for i in turrets do
65650: LD_ADDR_VAR 0 4
65654: PUSH
65655: LD_VAR 0 1
65659: PUSH
65660: FOR_IN
65661: IFFALSE 65844
// begin nat := GetNation ( i ) ;
65663: LD_ADDR_VAR 0 7
65667: PUSH
65668: LD_VAR 0 4
65672: PPUSH
65673: CALL_OW 248
65677: ST_TO_ADDR
// weapon := 0 ;
65678: LD_ADDR_VAR 0 8
65682: PUSH
65683: LD_INT 0
65685: ST_TO_ADDR
// if not nat then
65686: LD_VAR 0 7
65690: NOT
65691: IFFALSE 65695
// continue ;
65693: GO 65660
// for j in list [ nat ] do
65695: LD_ADDR_VAR 0 5
65699: PUSH
65700: LD_VAR 0 10
65704: PUSH
65705: LD_VAR 0 7
65709: ARRAY
65710: PUSH
65711: FOR_IN
65712: IFFALSE 65753
// if GetBWeapon ( i ) = j [ 1 ] then
65714: LD_VAR 0 4
65718: PPUSH
65719: CALL_OW 269
65723: PUSH
65724: LD_VAR 0 5
65728: PUSH
65729: LD_INT 1
65731: ARRAY
65732: EQUAL
65733: IFFALSE 65751
// begin weapon := j [ 2 ] ;
65735: LD_ADDR_VAR 0 8
65739: PUSH
65740: LD_VAR 0 5
65744: PUSH
65745: LD_INT 2
65747: ARRAY
65748: ST_TO_ADDR
// break ;
65749: GO 65753
// end ;
65751: GO 65711
65753: POP
65754: POP
// if not weapon then
65755: LD_VAR 0 8
65759: NOT
65760: IFFALSE 65764
// continue ;
65762: GO 65660
// for k in factories do
65764: LD_ADDR_VAR 0 6
65768: PUSH
65769: LD_VAR 0 2
65773: PUSH
65774: FOR_IN
65775: IFFALSE 65840
// begin weapons := AvailableWeaponList ( k ) ;
65777: LD_ADDR_VAR 0 9
65781: PUSH
65782: LD_VAR 0 6
65786: PPUSH
65787: CALL_OW 478
65791: ST_TO_ADDR
// if not weapons then
65792: LD_VAR 0 9
65796: NOT
65797: IFFALSE 65801
// continue ;
65799: GO 65774
// if weapon in weapons then
65801: LD_VAR 0 8
65805: PUSH
65806: LD_VAR 0 9
65810: IN
65811: IFFALSE 65838
// begin result := [ i , weapon ] ;
65813: LD_ADDR_VAR 0 3
65817: PUSH
65818: LD_VAR 0 4
65822: PUSH
65823: LD_VAR 0 8
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: ST_TO_ADDR
// exit ;
65832: POP
65833: POP
65834: POP
65835: POP
65836: GO 65846
// end ; end ;
65838: GO 65774
65840: POP
65841: POP
// end ;
65842: GO 65660
65844: POP
65845: POP
// end ;
65846: LD_VAR 0 3
65850: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65851: LD_INT 0
65853: PPUSH
// if not side or side > 8 then
65854: LD_VAR 0 3
65858: NOT
65859: PUSH
65860: LD_VAR 0 3
65864: PUSH
65865: LD_INT 8
65867: GREATER
65868: OR
65869: IFFALSE 65873
// exit ;
65871: GO 65932
// if not range then
65873: LD_VAR 0 4
65877: NOT
65878: IFFALSE 65889
// range := - 12 ;
65880: LD_ADDR_VAR 0 4
65884: PUSH
65885: LD_INT 12
65887: NEG
65888: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65889: LD_VAR 0 1
65893: PPUSH
65894: LD_VAR 0 2
65898: PPUSH
65899: LD_VAR 0 3
65903: PPUSH
65904: LD_VAR 0 4
65908: PPUSH
65909: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65913: LD_VAR 0 1
65917: PPUSH
65918: LD_VAR 0 2
65922: PPUSH
65923: LD_VAR 0 3
65927: PPUSH
65928: CALL_OW 331
// end ;
65932: LD_VAR 0 5
65936: RET
// export function Video ( mode ) ; begin
65937: LD_INT 0
65939: PPUSH
// ingame_video = mode ;
65940: LD_ADDR_OWVAR 52
65944: PUSH
65945: LD_VAR 0 1
65949: ST_TO_ADDR
// interface_hidden = mode ;
65950: LD_ADDR_OWVAR 54
65954: PUSH
65955: LD_VAR 0 1
65959: ST_TO_ADDR
// end ;
65960: LD_VAR 0 2
65964: RET
// export function Join ( array , element ) ; begin
65965: LD_INT 0
65967: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65968: LD_ADDR_VAR 0 3
65972: PUSH
65973: LD_VAR 0 1
65977: PPUSH
65978: LD_VAR 0 1
65982: PUSH
65983: LD_INT 1
65985: PLUS
65986: PPUSH
65987: LD_VAR 0 2
65991: PPUSH
65992: CALL_OW 1
65996: ST_TO_ADDR
// end ;
65997: LD_VAR 0 3
66001: RET
// export function JoinUnion ( array , element ) ; begin
66002: LD_INT 0
66004: PPUSH
// result := array union element ;
66005: LD_ADDR_VAR 0 3
66009: PUSH
66010: LD_VAR 0 1
66014: PUSH
66015: LD_VAR 0 2
66019: UNION
66020: ST_TO_ADDR
// end ;
66021: LD_VAR 0 3
66025: RET
// export function GetBehemoths ( side ) ; begin
66026: LD_INT 0
66028: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66029: LD_ADDR_VAR 0 2
66033: PUSH
66034: LD_INT 22
66036: PUSH
66037: LD_VAR 0 1
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 31
66048: PUSH
66049: LD_INT 25
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PPUSH
66060: CALL_OW 69
66064: ST_TO_ADDR
// end ;
66065: LD_VAR 0 2
66069: RET
// export function Shuffle ( array ) ; var i , index ; begin
66070: LD_INT 0
66072: PPUSH
66073: PPUSH
66074: PPUSH
// result := [ ] ;
66075: LD_ADDR_VAR 0 2
66079: PUSH
66080: EMPTY
66081: ST_TO_ADDR
// if not array then
66082: LD_VAR 0 1
66086: NOT
66087: IFFALSE 66091
// exit ;
66089: GO 66190
// Randomize ;
66091: CALL_OW 10
// for i = array downto 1 do
66095: LD_ADDR_VAR 0 3
66099: PUSH
66100: DOUBLE
66101: LD_VAR 0 1
66105: INC
66106: ST_TO_ADDR
66107: LD_INT 1
66109: PUSH
66110: FOR_DOWNTO
66111: IFFALSE 66188
// begin index := rand ( 1 , array ) ;
66113: LD_ADDR_VAR 0 4
66117: PUSH
66118: LD_INT 1
66120: PPUSH
66121: LD_VAR 0 1
66125: PPUSH
66126: CALL_OW 12
66130: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66131: LD_ADDR_VAR 0 2
66135: PUSH
66136: LD_VAR 0 2
66140: PPUSH
66141: LD_VAR 0 2
66145: PUSH
66146: LD_INT 1
66148: PLUS
66149: PPUSH
66150: LD_VAR 0 1
66154: PUSH
66155: LD_VAR 0 4
66159: ARRAY
66160: PPUSH
66161: CALL_OW 2
66165: ST_TO_ADDR
// array := Delete ( array , index ) ;
66166: LD_ADDR_VAR 0 1
66170: PUSH
66171: LD_VAR 0 1
66175: PPUSH
66176: LD_VAR 0 4
66180: PPUSH
66181: CALL_OW 3
66185: ST_TO_ADDR
// end ;
66186: GO 66110
66188: POP
66189: POP
// end ;
66190: LD_VAR 0 2
66194: RET
// export function GetBaseMaterials ( base ) ; begin
66195: LD_INT 0
66197: PPUSH
// result := [ 0 , 0 , 0 ] ;
66198: LD_ADDR_VAR 0 2
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: LIST
66216: ST_TO_ADDR
// if not base then
66217: LD_VAR 0 1
66221: NOT
66222: IFFALSE 66226
// exit ;
66224: GO 66275
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66226: LD_ADDR_VAR 0 2
66230: PUSH
66231: LD_VAR 0 1
66235: PPUSH
66236: LD_INT 1
66238: PPUSH
66239: CALL_OW 275
66243: PUSH
66244: LD_VAR 0 1
66248: PPUSH
66249: LD_INT 2
66251: PPUSH
66252: CALL_OW 275
66256: PUSH
66257: LD_VAR 0 1
66261: PPUSH
66262: LD_INT 3
66264: PPUSH
66265: CALL_OW 275
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: LIST
66274: ST_TO_ADDR
// end ;
66275: LD_VAR 0 2
66279: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66280: LD_INT 0
66282: PPUSH
66283: PPUSH
// result := array ;
66284: LD_ADDR_VAR 0 3
66288: PUSH
66289: LD_VAR 0 1
66293: ST_TO_ADDR
// if size > 0 then
66294: LD_VAR 0 2
66298: PUSH
66299: LD_INT 0
66301: GREATER
66302: IFFALSE 66348
// for i := array downto size do
66304: LD_ADDR_VAR 0 4
66308: PUSH
66309: DOUBLE
66310: LD_VAR 0 1
66314: INC
66315: ST_TO_ADDR
66316: LD_VAR 0 2
66320: PUSH
66321: FOR_DOWNTO
66322: IFFALSE 66346
// result := Delete ( result , result ) ;
66324: LD_ADDR_VAR 0 3
66328: PUSH
66329: LD_VAR 0 3
66333: PPUSH
66334: LD_VAR 0 3
66338: PPUSH
66339: CALL_OW 3
66343: ST_TO_ADDR
66344: GO 66321
66346: POP
66347: POP
// end ;
66348: LD_VAR 0 3
66352: RET
// export function ComExit ( unit ) ; var tmp ; begin
66353: LD_INT 0
66355: PPUSH
66356: PPUSH
// if not IsInUnit ( unit ) then
66357: LD_VAR 0 1
66361: PPUSH
66362: CALL_OW 310
66366: NOT
66367: IFFALSE 66371
// exit ;
66369: GO 66431
// tmp := IsInUnit ( unit ) ;
66371: LD_ADDR_VAR 0 3
66375: PUSH
66376: LD_VAR 0 1
66380: PPUSH
66381: CALL_OW 310
66385: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66386: LD_VAR 0 3
66390: PPUSH
66391: CALL_OW 247
66395: PUSH
66396: LD_INT 2
66398: EQUAL
66399: IFFALSE 66412
// ComExitVehicle ( unit ) else
66401: LD_VAR 0 1
66405: PPUSH
66406: CALL_OW 121
66410: GO 66421
// ComExitBuilding ( unit ) ;
66412: LD_VAR 0 1
66416: PPUSH
66417: CALL_OW 122
// result := tmp ;
66421: LD_ADDR_VAR 0 2
66425: PUSH
66426: LD_VAR 0 3
66430: ST_TO_ADDR
// end ;
66431: LD_VAR 0 2
66435: RET
// export function ResetHc ; begin
66436: LD_INT 0
66438: PPUSH
// InitHc ;
66439: CALL_OW 19
// hc_importance := 0 ;
66443: LD_ADDR_OWVAR 32
66447: PUSH
66448: LD_INT 0
66450: ST_TO_ADDR
// end ;
66451: LD_VAR 0 1
66455: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66456: LD_INT 0
66458: PPUSH
66459: PPUSH
66460: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66461: LD_ADDR_VAR 0 6
66465: PUSH
66466: LD_VAR 0 1
66470: PUSH
66471: LD_VAR 0 3
66475: PLUS
66476: PUSH
66477: LD_INT 2
66479: DIV
66480: ST_TO_ADDR
// if _x < 0 then
66481: LD_VAR 0 6
66485: PUSH
66486: LD_INT 0
66488: LESS
66489: IFFALSE 66506
// _x := _x * - 1 ;
66491: LD_ADDR_VAR 0 6
66495: PUSH
66496: LD_VAR 0 6
66500: PUSH
66501: LD_INT 1
66503: NEG
66504: MUL
66505: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66506: LD_ADDR_VAR 0 7
66510: PUSH
66511: LD_VAR 0 2
66515: PUSH
66516: LD_VAR 0 4
66520: PLUS
66521: PUSH
66522: LD_INT 2
66524: DIV
66525: ST_TO_ADDR
// if _y < 0 then
66526: LD_VAR 0 7
66530: PUSH
66531: LD_INT 0
66533: LESS
66534: IFFALSE 66551
// _y := _y * - 1 ;
66536: LD_ADDR_VAR 0 7
66540: PUSH
66541: LD_VAR 0 7
66545: PUSH
66546: LD_INT 1
66548: NEG
66549: MUL
66550: ST_TO_ADDR
// result := [ _x , _y ] ;
66551: LD_ADDR_VAR 0 5
66555: PUSH
66556: LD_VAR 0 6
66560: PUSH
66561: LD_VAR 0 7
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: ST_TO_ADDR
// end ;
66570: LD_VAR 0 5
66574: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66575: LD_INT 0
66577: PPUSH
66578: PPUSH
66579: PPUSH
66580: PPUSH
// task := GetTaskList ( unit ) ;
66581: LD_ADDR_VAR 0 7
66585: PUSH
66586: LD_VAR 0 1
66590: PPUSH
66591: CALL_OW 437
66595: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66596: LD_VAR 0 7
66600: NOT
66601: PUSH
66602: LD_VAR 0 1
66606: PPUSH
66607: LD_VAR 0 2
66611: PPUSH
66612: CALL_OW 308
66616: NOT
66617: AND
66618: IFFALSE 66622
// exit ;
66620: GO 66740
// if IsInArea ( unit , area ) then
66622: LD_VAR 0 1
66626: PPUSH
66627: LD_VAR 0 2
66631: PPUSH
66632: CALL_OW 308
66636: IFFALSE 66654
// begin ComMoveToArea ( unit , goAway ) ;
66638: LD_VAR 0 1
66642: PPUSH
66643: LD_VAR 0 3
66647: PPUSH
66648: CALL_OW 113
// exit ;
66652: GO 66740
// end ; if task [ 1 ] [ 1 ] <> M then
66654: LD_VAR 0 7
66658: PUSH
66659: LD_INT 1
66661: ARRAY
66662: PUSH
66663: LD_INT 1
66665: ARRAY
66666: PUSH
66667: LD_STRING M
66669: NONEQUAL
66670: IFFALSE 66674
// exit ;
66672: GO 66740
// x := task [ 1 ] [ 2 ] ;
66674: LD_ADDR_VAR 0 5
66678: PUSH
66679: LD_VAR 0 7
66683: PUSH
66684: LD_INT 1
66686: ARRAY
66687: PUSH
66688: LD_INT 2
66690: ARRAY
66691: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66692: LD_ADDR_VAR 0 6
66696: PUSH
66697: LD_VAR 0 7
66701: PUSH
66702: LD_INT 1
66704: ARRAY
66705: PUSH
66706: LD_INT 3
66708: ARRAY
66709: ST_TO_ADDR
// if InArea ( x , y , area ) then
66710: LD_VAR 0 5
66714: PPUSH
66715: LD_VAR 0 6
66719: PPUSH
66720: LD_VAR 0 2
66724: PPUSH
66725: CALL_OW 309
66729: IFFALSE 66740
// ComStop ( unit ) ;
66731: LD_VAR 0 1
66735: PPUSH
66736: CALL_OW 141
// end ;
66740: LD_VAR 0 4
66744: RET
// export function Abs ( value ) ; begin
66745: LD_INT 0
66747: PPUSH
// result := value ;
66748: LD_ADDR_VAR 0 2
66752: PUSH
66753: LD_VAR 0 1
66757: ST_TO_ADDR
// if value < 0 then
66758: LD_VAR 0 1
66762: PUSH
66763: LD_INT 0
66765: LESS
66766: IFFALSE 66783
// result := value * - 1 ;
66768: LD_ADDR_VAR 0 2
66772: PUSH
66773: LD_VAR 0 1
66777: PUSH
66778: LD_INT 1
66780: NEG
66781: MUL
66782: ST_TO_ADDR
// end ;
66783: LD_VAR 0 2
66787: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66788: LD_INT 0
66790: PPUSH
66791: PPUSH
66792: PPUSH
66793: PPUSH
66794: PPUSH
66795: PPUSH
66796: PPUSH
66797: PPUSH
// if not unit or not building then
66798: LD_VAR 0 1
66802: NOT
66803: PUSH
66804: LD_VAR 0 2
66808: NOT
66809: OR
66810: IFFALSE 66814
// exit ;
66812: GO 67040
// x := GetX ( building ) ;
66814: LD_ADDR_VAR 0 4
66818: PUSH
66819: LD_VAR 0 2
66823: PPUSH
66824: CALL_OW 250
66828: ST_TO_ADDR
// y := GetY ( building ) ;
66829: LD_ADDR_VAR 0 6
66833: PUSH
66834: LD_VAR 0 2
66838: PPUSH
66839: CALL_OW 251
66843: ST_TO_ADDR
// d := GetDir ( building ) ;
66844: LD_ADDR_VAR 0 8
66848: PUSH
66849: LD_VAR 0 2
66853: PPUSH
66854: CALL_OW 254
66858: ST_TO_ADDR
// r := 4 ;
66859: LD_ADDR_VAR 0 9
66863: PUSH
66864: LD_INT 4
66866: ST_TO_ADDR
// for i := 1 to 5 do
66867: LD_ADDR_VAR 0 10
66871: PUSH
66872: DOUBLE
66873: LD_INT 1
66875: DEC
66876: ST_TO_ADDR
66877: LD_INT 5
66879: PUSH
66880: FOR_TO
66881: IFFALSE 67038
// begin _x := ShiftX ( x , d , r + i ) ;
66883: LD_ADDR_VAR 0 5
66887: PUSH
66888: LD_VAR 0 4
66892: PPUSH
66893: LD_VAR 0 8
66897: PPUSH
66898: LD_VAR 0 9
66902: PUSH
66903: LD_VAR 0 10
66907: PLUS
66908: PPUSH
66909: CALL_OW 272
66913: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66914: LD_ADDR_VAR 0 7
66918: PUSH
66919: LD_VAR 0 6
66923: PPUSH
66924: LD_VAR 0 8
66928: PPUSH
66929: LD_VAR 0 9
66933: PUSH
66934: LD_VAR 0 10
66938: PLUS
66939: PPUSH
66940: CALL_OW 273
66944: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66945: LD_VAR 0 5
66949: PPUSH
66950: LD_VAR 0 7
66954: PPUSH
66955: CALL_OW 488
66959: PUSH
66960: LD_VAR 0 5
66964: PPUSH
66965: LD_VAR 0 7
66969: PPUSH
66970: CALL_OW 428
66974: PPUSH
66975: CALL_OW 247
66979: PUSH
66980: LD_INT 3
66982: PUSH
66983: LD_INT 2
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: IN
66990: NOT
66991: AND
66992: IFFALSE 67036
// begin ComMoveXY ( unit , _x , _y ) ;
66994: LD_VAR 0 1
66998: PPUSH
66999: LD_VAR 0 5
67003: PPUSH
67004: LD_VAR 0 7
67008: PPUSH
67009: CALL_OW 111
// result := [ _x , _y ] ;
67013: LD_ADDR_VAR 0 3
67017: PUSH
67018: LD_VAR 0 5
67022: PUSH
67023: LD_VAR 0 7
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: ST_TO_ADDR
// exit ;
67032: POP
67033: POP
67034: GO 67040
// end ; end ;
67036: GO 66880
67038: POP
67039: POP
// end ; end_of_file
67040: LD_VAR 0 3
67044: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67045: LD_VAR 0 1
67049: PUSH
67050: LD_INT 200
67052: DOUBLE
67053: GREATEREQUAL
67054: IFFALSE 67062
67056: LD_INT 299
67058: DOUBLE
67059: LESSEQUAL
67060: IFTRUE 67064
67062: GO 67096
67064: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67065: LD_VAR 0 1
67069: PPUSH
67070: LD_VAR 0 2
67074: PPUSH
67075: LD_VAR 0 3
67079: PPUSH
67080: LD_VAR 0 4
67084: PPUSH
67085: LD_VAR 0 5
67089: PPUSH
67090: CALL 26101 0 5
67094: GO 67173
67096: LD_INT 300
67098: DOUBLE
67099: GREATEREQUAL
67100: IFFALSE 67108
67102: LD_INT 399
67104: DOUBLE
67105: LESSEQUAL
67106: IFTRUE 67110
67108: GO 67172
67110: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67111: LD_VAR 0 1
67115: PPUSH
67116: LD_VAR 0 2
67120: PPUSH
67121: LD_VAR 0 3
67125: PPUSH
67126: LD_VAR 0 4
67130: PPUSH
67131: LD_VAR 0 5
67135: PPUSH
67136: LD_VAR 0 6
67140: PPUSH
67141: LD_VAR 0 7
67145: PPUSH
67146: LD_VAR 0 8
67150: PPUSH
67151: LD_VAR 0 9
67155: PPUSH
67156: LD_VAR 0 10
67160: PPUSH
67161: LD_VAR 0 11
67165: PPUSH
67166: CALL 24007 0 11
67170: GO 67173
67172: POP
// end ;
67173: PPOPN 11
67175: END
