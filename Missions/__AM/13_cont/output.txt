// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1245 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1149 0 0
// PrepareDifficulty ;
 207: CALL 6457 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING 13c_JMM
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: CALL 5787 0 2
 600: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 601: LD_ADDR_EXP 2
 605: PUSH
 606: LD_STRING 13c_Stevens
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 5787 0 2
 616: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 617: LD_ADDR_EXP 3
 621: PUSH
 622: LD_STRING 13c_Lisa
 624: PPUSH
 625: LD_INT 1
 627: PPUSH
 628: CALL 5787 0 2
 632: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 633: LD_ADDR_EXP 4
 637: PUSH
 638: LD_STRING 13c_Donaldson
 640: PPUSH
 641: LD_INT 1
 643: PPUSH
 644: CALL 5787 0 2
 648: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 649: LD_ADDR_EXP 5
 653: PUSH
 654: LD_STRING 13c_Bobby
 656: PPUSH
 657: LD_INT 1
 659: PPUSH
 660: CALL 5787 0 2
 664: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 665: LD_ADDR_EXP 6
 669: PUSH
 670: LD_STRING 13c_Cyrus
 672: PPUSH
 673: LD_INT 1
 675: PPUSH
 676: CALL 5787 0 2
 680: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 681: LD_ADDR_EXP 7
 685: PUSH
 686: LD_STRING 13c_Denis
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL 5787 0 2
 696: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 697: LD_ADDR_EXP 8
 701: PUSH
 702: LD_STRING 13c_Brown
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 5787 0 2
 712: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 713: LD_ADDR_EXP 9
 717: PUSH
 718: LD_STRING 13c_Gladstone
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: CALL 5787 0 2
 728: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 729: LD_ADDR_EXP 10
 733: PUSH
 734: LD_STRING 13c_Houten
 736: PPUSH
 737: LD_INT 1
 739: PPUSH
 740: CALL 5787 0 2
 744: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 745: LD_ADDR_EXP 11
 749: PUSH
 750: LD_STRING 13c_Cornel
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 5787 0 2
 760: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 761: LD_ADDR_EXP 12
 765: PUSH
 766: LD_STRING 13c_Gary
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: CALL 5787 0 2
 776: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 777: LD_ADDR_EXP 13
 781: PUSH
 782: LD_STRING 13c_Frank
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL 5787 0 2
 792: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 793: LD_ADDR_EXP 14
 797: PUSH
 798: LD_STRING 13c_Kikuchi
 800: PPUSH
 801: LD_INT 1
 803: PPUSH
 804: CALL 5787 0 2
 808: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 809: LD_ADDR_EXP 15
 813: PUSH
 814: LD_STRING Powell
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL 5787 0 2
 824: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 825: LD_ADDR_VAR 0 2
 829: PUSH
 830: LD_EXP 1
 834: PUSH
 835: LD_EXP 2
 839: PUSH
 840: LD_EXP 3
 844: PUSH
 845: LD_EXP 4
 849: PUSH
 850: LD_EXP 5
 854: PUSH
 855: LD_EXP 6
 859: PUSH
 860: LD_EXP 7
 864: PUSH
 865: LD_EXP 8
 869: PUSH
 870: LD_EXP 9
 874: PUSH
 875: LD_EXP 10
 879: PUSH
 880: LD_EXP 11
 884: PUSH
 885: LD_EXP 12
 889: PUSH
 890: LD_EXP 13
 894: PUSH
 895: LD_EXP 14
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 33
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 21
 943: PUSH
 944: LD_INT 2
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PPUSH
 956: CALL_OW 69
 960: ST_TO_ADDR
// for i = tmp downto 1 do
 961: LD_ADDR_VAR 0 4
 965: PUSH
 966: DOUBLE
 967: LD_VAR 0 2
 971: INC
 972: ST_TO_ADDR
 973: LD_INT 1
 975: PUSH
 976: FOR_DOWNTO
 977: IFFALSE 1014
// if not tmp [ i ] then
 979: LD_VAR 0 2
 983: PUSH
 984: LD_VAR 0 4
 988: ARRAY
 989: NOT
 990: IFFALSE 1012
// tmp := Delete ( tmp , i ) ;
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_VAR 0 4
1006: PPUSH
1007: CALL_OW 3
1011: ST_TO_ADDR
1012: GO 976
1014: POP
1015: POP
// for i = 1 to tmp do
1016: LD_ADDR_VAR 0 4
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_VAR 0 2
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1062
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1034: LD_VAR 0 2
1038: PUSH
1039: LD_VAR 0 4
1043: ARRAY
1044: PPUSH
1045: LD_VAR 0 3
1049: PUSH
1050: LD_VAR 0 4
1054: ARRAY
1055: PPUSH
1056: CALL_OW 52
1060: GO 1031
1062: POP
1063: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1064: LD_INT 22
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 25
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 69
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: PUSH
1097: LD_INT 22
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 34
1109: PUSH
1110: LD_INT 13
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PPUSH
1121: CALL_OW 69
1125: PUSH
1126: LD_INT 0
1128: EQUAL
1129: AND
1130: IFFALSE 1144
// SetClass ( JMM , 2 ) ;
1132: LD_EXP 1
1136: PPUSH
1137: LD_INT 2
1139: PPUSH
1140: CALL_OW 336
// end ;
1144: LD_VAR 0 1
1148: RET
// export function PrepareAmericansRandom ; var i ; begin
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
// uc_side = 1 ;
1153: LD_ADDR_OWVAR 20
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1161: LD_ADDR_EXP 16
1165: PUSH
1166: LD_STRING 13c_others
1168: PPUSH
1169: CALL_OW 31
1173: ST_TO_ADDR
// for i in others13 do
1174: LD_ADDR_VAR 0 2
1178: PUSH
1179: LD_EXP 16
1183: PUSH
1184: FOR_IN
1185: IFFALSE 1238
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1187: LD_VAR 0 2
1191: PPUSH
1192: LD_INT 22
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PUSH
1202: LD_INT 21
1204: PUSH
1205: LD_INT 2
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 58
1214: PUSH
1215: EMPTY
1216: LIST
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: PPUSH
1223: CALL_OW 69
1227: PUSH
1228: LD_INT 1
1230: ARRAY
1231: PPUSH
1232: CALL_OW 52
1236: GO 1184
1238: POP
1239: POP
// end ;
1240: LD_VAR 0 1
1244: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_STRING 13_VehiclesIn13_1
1260: PPUSH
1261: EMPTY
1262: PPUSH
1263: CALL_OW 30
1267: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1268: LD_ADDR_EXP 24
1272: PUSH
1273: LD_STRING 13_ResourcesInCargo13_1
1275: PPUSH
1276: EMPTY
1277: PPUSH
1278: CALL_OW 30
1282: ST_TO_ADDR
// cargoList = [ ] ;
1283: LD_ADDR_VAR 0 6
1287: PUSH
1288: EMPTY
1289: ST_TO_ADDR
// uc_side = 1 ;
1290: LD_ADDR_OWVAR 20
1294: PUSH
1295: LD_INT 1
1297: ST_TO_ADDR
// if vehicles > 0 then
1298: LD_VAR 0 5
1302: PUSH
1303: LD_INT 0
1305: GREATER
1306: IFFALSE 1661
// begin for i := 1 to vehicles do
1308: LD_ADDR_VAR 0 2
1312: PUSH
1313: DOUBLE
1314: LD_INT 1
1316: DEC
1317: ST_TO_ADDR
1318: LD_VAR 0 5
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1473
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1326: LD_ADDR_OWVAR 21
1330: PUSH
1331: LD_VAR 0 5
1335: PUSH
1336: LD_VAR 0 2
1340: ARRAY
1341: PUSH
1342: LD_INT 1
1344: ARRAY
1345: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1346: LD_ADDR_OWVAR 37
1350: PUSH
1351: LD_VAR 0 5
1355: PUSH
1356: LD_VAR 0 2
1360: ARRAY
1361: PUSH
1362: LD_INT 2
1364: ARRAY
1365: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1366: LD_ADDR_OWVAR 39
1370: PUSH
1371: LD_VAR 0 5
1375: PUSH
1376: LD_VAR 0 2
1380: ARRAY
1381: PUSH
1382: LD_INT 3
1384: ARRAY
1385: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1386: LD_ADDR_OWVAR 38
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_VAR 0 2
1400: ARRAY
1401: PUSH
1402: LD_INT 4
1404: ARRAY
1405: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1406: LD_ADDR_OWVAR 40
1410: PUSH
1411: LD_VAR 0 5
1415: PUSH
1416: LD_VAR 0 2
1420: ARRAY
1421: PUSH
1422: LD_INT 5
1424: ARRAY
1425: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1426: LD_ADDR_OWVAR 41
1430: PUSH
1431: LD_INT 40
1433: ST_TO_ADDR
// veh = CreateVehicle ;
1434: LD_ADDR_VAR 0 4
1438: PUSH
1439: CALL_OW 45
1443: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1444: LD_VAR 0 4
1448: PPUSH
1449: LD_INT 3
1451: PPUSH
1452: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1456: LD_VAR 0 4
1460: PPUSH
1461: LD_INT 2
1463: PPUSH
1464: LD_INT 0
1466: PPUSH
1467: CALL_OW 49
// end ;
1471: GO 1323
1473: POP
1474: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1475: LD_ADDR_VAR 0 6
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 1
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 21
1492: PUSH
1493: LD_INT 2
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 34
1502: PUSH
1503: LD_INT 12
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: ST_TO_ADDR
// if cargoList > 0 then
1520: LD_VAR 0 6
1524: PUSH
1525: LD_INT 0
1527: GREATER
1528: IFFALSE 1661
// for i = 1 to cargoList do
1530: LD_ADDR_VAR 0 2
1534: PUSH
1535: DOUBLE
1536: LD_INT 1
1538: DEC
1539: ST_TO_ADDR
1540: LD_VAR 0 6
1544: PUSH
1545: FOR_TO
1546: IFFALSE 1659
// begin if resources > 0 then
1548: LD_EXP 24
1552: PUSH
1553: LD_INT 0
1555: GREATER
1556: IFFALSE 1657
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1558: LD_VAR 0 6
1562: PUSH
1563: LD_VAR 0 2
1567: ARRAY
1568: PPUSH
1569: LD_INT 1
1571: PPUSH
1572: LD_EXP 24
1576: PUSH
1577: LD_VAR 0 2
1581: ARRAY
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1591: LD_VAR 0 6
1595: PUSH
1596: LD_VAR 0 2
1600: ARRAY
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_EXP 24
1609: PUSH
1610: LD_VAR 0 2
1614: ARRAY
1615: PUSH
1616: LD_INT 2
1618: ARRAY
1619: PPUSH
1620: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1624: LD_VAR 0 6
1628: PUSH
1629: LD_VAR 0 2
1633: ARRAY
1634: PPUSH
1635: LD_INT 3
1637: PPUSH
1638: LD_EXP 24
1642: PUSH
1643: LD_VAR 0 2
1647: ARRAY
1648: PUSH
1649: LD_INT 3
1651: ARRAY
1652: PPUSH
1653: CALL_OW 291
// end ; end ;
1657: GO 1545
1659: POP
1660: POP
// end ; end ;
1661: LD_VAR 0 1
1665: RET
// export function PowellSupport ; var i , veh , un ; begin
1666: LD_INT 0
1668: PPUSH
1669: PPUSH
1670: PPUSH
1671: PPUSH
// for i = 1 to 3 do
1672: LD_ADDR_VAR 0 2
1676: PUSH
1677: DOUBLE
1678: LD_INT 1
1680: DEC
1681: ST_TO_ADDR
1682: LD_INT 3
1684: PUSH
1685: FOR_TO
1686: IFFALSE 1887
// begin uc_nation = 1 ;
1688: LD_ADDR_OWVAR 21
1692: PUSH
1693: LD_INT 1
1695: ST_TO_ADDR
// uc_side = 1 ;
1696: LD_ADDR_OWVAR 20
1700: PUSH
1701: LD_INT 1
1703: ST_TO_ADDR
// vc_engine = 3 ;
1704: LD_ADDR_OWVAR 39
1708: PUSH
1709: LD_INT 3
1711: ST_TO_ADDR
// vc_control = 1 ;
1712: LD_ADDR_OWVAR 38
1716: PUSH
1717: LD_INT 1
1719: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1720: LD_ADDR_OWVAR 40
1724: PUSH
1725: LD_INT 9
1727: PUSH
1728: LD_INT 5
1730: PUSH
1731: LD_INT 4
1733: PUSH
1734: LD_INT 7
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 1
1749: PPUSH
1750: LD_INT 5
1752: PPUSH
1753: CALL_OW 12
1757: ARRAY
1758: ST_TO_ADDR
// if vc_weapon = 6 then
1759: LD_OWVAR 40
1763: PUSH
1764: LD_INT 6
1766: EQUAL
1767: IFFALSE 1779
// vc_chassis = 4 else
1769: LD_ADDR_OWVAR 37
1773: PUSH
1774: LD_INT 4
1776: ST_TO_ADDR
1777: GO 1787
// vc_chassis = 3 ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 3
1786: ST_TO_ADDR
// veh = CreateVehicle ;
1787: LD_ADDR_VAR 0 3
1791: PUSH
1792: CALL_OW 45
1796: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1797: LD_VAR 0 3
1801: PPUSH
1802: LD_INT 2
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// SetDir ( veh , 1 ) ;
1812: LD_VAR 0 3
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: CALL_OW 233
// hc_gallery =  ;
1824: LD_ADDR_OWVAR 33
1828: PUSH
1829: LD_STRING 
1831: ST_TO_ADDR
// hc_name =  ;
1832: LD_ADDR_OWVAR 26
1836: PUSH
1837: LD_STRING 
1839: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1840: LD_INT 0
1842: PPUSH
1843: LD_INT 3
1845: PPUSH
1846: LD_INT 7
1848: PPUSH
1849: LD_INT 10
1851: PPUSH
1852: CALL_OW 12
1856: PPUSH
1857: CALL_OW 380
// un = CreateHuman ;
1861: LD_ADDR_VAR 0 4
1865: PUSH
1866: CALL_OW 44
1870: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1871: LD_VAR 0 4
1875: PPUSH
1876: LD_VAR 0 3
1880: PPUSH
1881: CALL_OW 52
// end ;
1885: GO 1685
1887: POP
1888: POP
// end ; end_of_file
1889: LD_VAR 0 1
1893: RET
// export function PrepareBurlak ; begin
1894: LD_INT 0
1896: PPUSH
// uc_side = 7 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 7
1904: ST_TO_ADDR
// uc_nation = 3 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// vc_engine = 3 ;
1913: LD_ADDR_OWVAR 39
1917: PUSH
1918: LD_INT 3
1920: ST_TO_ADDR
// vc_control = 1 ;
1921: LD_ADDR_OWVAR 38
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// vc_weapon = 46 ;
1929: LD_ADDR_OWVAR 40
1933: PUSH
1934: LD_INT 46
1936: ST_TO_ADDR
// vc_chassis = 24 ;
1937: LD_ADDR_OWVAR 37
1941: PUSH
1942: LD_INT 24
1944: ST_TO_ADDR
// Masha = CreateVehicle ;
1945: LD_ADDR_EXP 18
1949: PUSH
1950: CALL_OW 45
1954: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
1955: LD_EXP 18
1959: PPUSH
1960: LD_INT 3
1962: PPUSH
1963: LD_INT 0
1965: PPUSH
1966: CALL_OW 49
// SetMark ( Masha , 1 ) ;
1970: LD_EXP 18
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
1982: LD_ADDR_EXP 17
1986: PUSH
1987: LD_STRING Burlak
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL 5787 0 2
1997: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
1998: LD_EXP 17
2002: PPUSH
2003: LD_EXP 18
2007: PPUSH
2008: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2012: LD_EXP 18
2016: PPUSH
2017: LD_INT 107
2019: PPUSH
2020: LD_INT 118
2022: PPUSH
2023: CALL_OW 114
// spawnBurlak = 1 ;
2027: LD_ADDR_EXP 27
2031: PUSH
2032: LD_INT 1
2034: ST_TO_ADDR
// end ;
2035: LD_VAR 0 1
2039: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2040: LD_INT 0
2042: PPUSH
2043: PPUSH
2044: PPUSH
2045: PPUSH
// uc_side = 7 ;
2046: LD_ADDR_OWVAR 20
2050: PUSH
2051: LD_INT 7
2053: ST_TO_ADDR
// uc_nation = 3 ;
2054: LD_ADDR_OWVAR 21
2058: PUSH
2059: LD_INT 3
2061: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
2062: LD_ADDR_EXP 19
2066: PUSH
2067: LD_STRING Gnyevko
2069: PPUSH
2070: LD_INT 0
2072: PPUSH
2073: CALL 5787 0 2
2077: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
2078: LD_ADDR_EXP 20
2082: PUSH
2083: LD_STRING Titov
2085: PPUSH
2086: LD_INT 0
2088: PPUSH
2089: CALL 5787 0 2
2093: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2094: LD_ADDR_EXP 21
2098: PUSH
2099: LD_STRING Xavier2
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: CALL 5787 0 2
2109: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2110: LD_ADDR_EXP 22
2114: PUSH
2115: LD_STRING Belkov
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL 5787 0 2
2125: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2126: LD_ADDR_EXP 23
2130: PUSH
2131: LD_STRING Lipshchin
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: CALL 5787 0 2
2141: ST_TO_ADDR
// for i = 1 to 5 do
2142: LD_ADDR_VAR 0 2
2146: PUSH
2147: DOUBLE
2148: LD_INT 1
2150: DEC
2151: ST_TO_ADDR
2152: LD_INT 5
2154: PUSH
2155: FOR_TO
2156: IFFALSE 2244
// begin vc_engine = 3 ;
2158: LD_ADDR_OWVAR 39
2162: PUSH
2163: LD_INT 3
2165: ST_TO_ADDR
// vc_control = 1 ;
2166: LD_ADDR_OWVAR 38
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2174: LD_ADDR_OWVAR 40
2178: PUSH
2179: LD_INT 43
2181: PUSH
2182: LD_INT 44
2184: PUSH
2185: LD_INT 45
2187: PUSH
2188: LD_INT 49
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 1
2199: PPUSH
2200: LD_INT 4
2202: PPUSH
2203: CALL_OW 12
2207: ARRAY
2208: ST_TO_ADDR
// vc_chassis = 22 ;
2209: LD_ADDR_OWVAR 37
2213: PUSH
2214: LD_INT 22
2216: ST_TO_ADDR
// veh = CreateVehicle ;
2217: LD_ADDR_VAR 0 3
2221: PUSH
2222: CALL_OW 45
2226: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 3
2234: PPUSH
2235: LD_INT 0
2237: PPUSH
2238: CALL_OW 49
// end ;
2242: GO 2155
2244: POP
2245: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2246: LD_ADDR_VAR 0 4
2250: PUSH
2251: LD_INT 22
2253: PUSH
2254: LD_INT 7
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 21
2263: PUSH
2264: LD_INT 2
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 58
2273: PUSH
2274: EMPTY
2275: LIST
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: PPUSH
2282: CALL_OW 69
2286: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2287: LD_EXP 19
2291: PPUSH
2292: LD_VAR 0 4
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2305: LD_EXP 20
2309: PPUSH
2310: LD_VAR 0 4
2314: PUSH
2315: LD_INT 2
2317: ARRAY
2318: PPUSH
2319: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2323: LD_EXP 21
2327: PPUSH
2328: LD_VAR 0 4
2332: PUSH
2333: LD_INT 3
2335: ARRAY
2336: PPUSH
2337: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2341: LD_EXP 22
2345: PPUSH
2346: LD_VAR 0 4
2350: PUSH
2351: LD_INT 4
2353: ARRAY
2354: PPUSH
2355: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2359: LD_EXP 23
2363: PPUSH
2364: LD_VAR 0 4
2368: PUSH
2369: LD_INT 5
2371: ARRAY
2372: PPUSH
2373: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2377: LD_EXP 19
2381: PPUSH
2382: LD_INT 3
2384: PPUSH
2385: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2389: LD_EXP 20
2393: PUSH
2394: LD_EXP 23
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: PPUSH
2403: LD_INT 9
2405: PPUSH
2406: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2410: LD_ADDR_VAR 0 4
2414: PUSH
2415: LD_INT 22
2417: PUSH
2418: LD_INT 7
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PPUSH
2425: CALL_OW 69
2429: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2430: LD_VAR 0 4
2434: PPUSH
2435: LD_INT 107
2437: PPUSH
2438: LD_INT 118
2440: PPUSH
2441: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2445: LD_INT 35
2447: PPUSH
2448: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2452: LD_VAR 0 4
2456: PPUSH
2457: LD_INT 34
2459: PUSH
2460: LD_INT 49
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 72
2471: PPUSH
2472: LD_EXP 18
2476: PPUSH
2477: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2481: LD_VAR 0 4
2485: PPUSH
2486: LD_INT 3
2488: PUSH
2489: LD_INT 34
2491: PUSH
2492: LD_INT 49
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 72
2507: PPUSH
2508: LD_INT 107
2510: PPUSH
2511: LD_INT 118
2513: PPUSH
2514: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2518: LD_VAR 0 4
2522: PPUSH
2523: LD_INT 34
2525: PUSH
2526: LD_INT 49
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 72
2537: PUSH
2538: LD_INT 0
2540: EQUAL
2541: PUSH
2542: LD_EXP 18
2546: PPUSH
2547: CALL_OW 303
2551: OR
2552: IFFALSE 2445
// repeat wait ( 0 0$1 ) ;
2554: LD_INT 35
2556: PPUSH
2557: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2561: LD_ADDR_VAR 0 4
2565: PUSH
2566: LD_INT 22
2568: PUSH
2569: LD_INT 7
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 69
2580: PUSH
2581: LD_EXP 17
2585: DIFF
2586: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2587: LD_VAR 0 4
2591: PPUSH
2592: LD_INT 107
2594: PPUSH
2595: LD_INT 118
2597: PPUSH
2598: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2602: LD_EXP 17
2606: PPUSH
2607: CALL_OW 302
2611: PUSH
2612: LD_EXP 17
2616: PPUSH
2617: CALL_OW 310
2621: NOT
2622: AND
2623: IFFALSE 2640
// ComMoveXY ( Burlak , 107 , 118 ) ;
2625: LD_EXP 17
2629: PPUSH
2630: LD_INT 107
2632: PPUSH
2633: LD_INT 118
2635: PPUSH
2636: CALL_OW 111
// until not tmp ;
2640: LD_VAR 0 4
2644: NOT
2645: IFFALSE 2554
// end ; end_of_file
2647: LD_VAR 0 1
2651: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2652: LD_EXP 31
2656: IFFALSE 2832
2658: GO 2660
2660: DISABLE
2661: LD_INT 0
2663: PPUSH
2664: PPUSH
// begin enable ;
2665: ENABLE
// rnd = 0 ;
2666: LD_ADDR_VAR 0 2
2670: PUSH
2671: LD_INT 0
2673: ST_TO_ADDR
// uc_side = 8 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 8
2681: ST_TO_ADDR
// uc_nation = 2 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 2
2689: ST_TO_ADDR
// hc_name =  ;
2690: LD_ADDR_OWVAR 26
2694: PUSH
2695: LD_STRING 
2697: ST_TO_ADDR
// hc_gallery =  ;
2698: LD_ADDR_OWVAR 33
2702: PUSH
2703: LD_STRING 
2705: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2706: LD_INT 0
2708: PPUSH
2709: LD_INT 4
2711: PPUSH
2712: LD_INT 10
2714: PPUSH
2715: CALL_OW 380
// un = CreateHuman ;
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2729: LD_VAR 0 1
2733: PPUSH
2734: LD_INT 8
2736: PUSH
2737: LD_INT 9
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_INT 2
2749: PPUSH
2750: CALL_OW 12
2754: ARRAY
2755: PPUSH
2756: LD_INT 0
2758: PPUSH
2759: CALL_OW 49
// SetTag ( un , 1 ) ;
2763: LD_VAR 0 1
2767: PPUSH
2768: LD_INT 1
2770: PPUSH
2771: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: LD_INT 1
2782: PPUSH
2783: LD_EXP 31
2787: PPUSH
2788: CALL_OW 12
2792: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
2793: LD_VAR 0 1
2797: PPUSH
2798: LD_EXP 31
2802: PUSH
2803: LD_VAR 0 2
2807: ARRAY
2808: PUSH
2809: LD_INT 1
2811: ARRAY
2812: PPUSH
2813: LD_EXP 31
2817: PUSH
2818: LD_VAR 0 2
2822: ARRAY
2823: PUSH
2824: LD_INT 2
2826: ARRAY
2827: PPUSH
2828: CALL_OW 158
// end ;
2832: PPOPN 2
2834: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
2835: LD_INT 22
2837: PUSH
2838: LD_INT 8
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PUSH
2845: LD_INT 3
2847: PUSH
2848: LD_INT 61
2850: PUSH
2851: EMPTY
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: LD_INT 33
2860: PUSH
2861: LD_INT 2
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: IFFALSE 2950
2879: GO 2881
2881: DISABLE
2882: LD_INT 0
2884: PPUSH
// begin enable ;
2885: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
2886: LD_ADDR_VAR 0 1
2890: PUSH
2891: LD_INT 22
2893: PUSH
2894: LD_INT 8
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: LD_INT 3
2903: PUSH
2904: LD_INT 61
2906: PUSH
2907: EMPTY
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: LD_INT 33
2916: PUSH
2917: LD_INT 2
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: PPUSH
2929: CALL_OW 69
2933: PUSH
2934: FOR_IN
2935: IFFALSE 2948
// Connect ( i ) ;
2937: LD_VAR 0 1
2941: PPUSH
2942: CALL 5902 0 1
2946: GO 2934
2948: POP
2949: POP
// end ; end_of_file
2950: PPOPN 1
2952: END
// every 1 do
2953: GO 2955
2955: DISABLE
// begin InGameOn ;
2956: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 21
2972: PUSH
2973: LD_INT 2
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: PUSH
2989: LD_INT 1
2991: ARRAY
2992: PPUSH
2993: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
2997: LD_INT 22
2999: PUSH
3000: LD_INT 1
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 21
3009: PUSH
3010: LD_INT 2
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 69
3025: PPUSH
3026: LD_INT 69
3028: PPUSH
3029: LD_INT 94
3031: PPUSH
3032: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3036: LD_EXP 1
3040: PPUSH
3041: LD_STRING D2-JMM-1
3043: PPUSH
3044: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3048: LD_INT 22
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 21
3060: PUSH
3061: LD_INT 2
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: PUSH
3077: LD_INT 1
3079: ARRAY
3080: PPUSH
3081: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3085: LD_EXP 2
3089: PPUSH
3090: LD_STRING D2-Huck-1
3092: PPUSH
3093: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 2
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PPUSH
3121: CALL_OW 69
3125: PUSH
3126: LD_INT 1
3128: ARRAY
3129: PPUSH
3130: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3134: LD_EXP 1
3138: PPUSH
3139: LD_STRING D2-JMM-2
3141: PPUSH
3142: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3146: LD_INT 22
3148: PUSH
3149: LD_INT 1
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: LD_INT 21
3158: PUSH
3159: LD_INT 2
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PPUSH
3170: CALL_OW 69
3174: PUSH
3175: LD_INT 1
3177: ARRAY
3178: PPUSH
3179: CALL_OW 87
// InGameOff ;
3183: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3187: LD_STRING M1
3189: PPUSH
3190: CALL_OW 337
// SaveForQuickRestart ;
3194: CALL_OW 22
// end ;
3198: END
// every 10 10$0 do
3199: GO 3201
3201: DISABLE
// begin DialogueOn ;
3202: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3206: LD_EXP 15
3210: PPUSH
3211: LD_STRING D3-Pow-1
3213: PPUSH
3214: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3218: LD_EXP 1
3222: PPUSH
3223: LD_STRING D3-JMM-1
3225: PPUSH
3226: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3230: LD_EXP 15
3234: PPUSH
3235: LD_STRING D3-Pow-2
3237: PPUSH
3238: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3242: LD_EXP 1
3246: PPUSH
3247: LD_STRING D3-JMM-2
3249: PPUSH
3250: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3254: LD_EXP 15
3258: PPUSH
3259: LD_STRING D3-Pow-3
3261: PPUSH
3262: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3266: LD_EXP 1
3270: PPUSH
3271: LD_STRING D3-JMM-3
3273: PPUSH
3274: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3278: LD_EXP 15
3282: PPUSH
3283: LD_STRING D3-Pow-4
3285: PPUSH
3286: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3290: LD_EXP 1
3294: PPUSH
3295: LD_STRING D3-JMM-4
3297: PPUSH
3298: CALL_OW 88
// DialogueOff ;
3302: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3306: LD_STRING M2
3308: PPUSH
3309: CALL_OW 337
// wait ( 2 2$30 ) ;
3313: LD_INT 5250
3315: PPUSH
3316: CALL_OW 67
// PrepareBurlak ;
3320: CALL 1894 0 0
// BurlakArmy ;
3324: CALL 2040 0 0
// end ;
3328: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3329: LD_INT 1
3331: PPUSH
3332: LD_EXP 18
3336: PPUSH
3337: CALL_OW 292
3341: IFFALSE 3500
3343: GO 3345
3345: DISABLE
// begin DialogueOn ;
3346: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3350: LD_EXP 18
3354: PPUSH
3355: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3359: LD_INT 22
3361: PUSH
3362: LD_INT 1
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 26
3371: PUSH
3372: LD_INT 1
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 2
3381: PUSH
3382: LD_INT 25
3384: PUSH
3385: LD_INT 1
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: PUSH
3392: LD_INT 25
3394: PUSH
3395: LD_INT 2
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 25
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 25
3414: PUSH
3415: LD_INT 4
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: LD_INT 25
3424: PUSH
3425: LD_INT 5
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: LIST
3444: PPUSH
3445: CALL_OW 69
3449: PPUSH
3450: LD_STRING D5-Sol1-1
3452: PPUSH
3453: LD_STRING D5-FSol1-1
3455: PPUSH
3456: CALL 6256 0 3
// Say ( JMM , D5-JMM-1 ) ;
3460: LD_EXP 1
3464: PPUSH
3465: LD_STRING D5-JMM-1
3467: PPUSH
3468: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3472: LD_EXP 17
3476: PPUSH
3477: LD_STRING DAmer-Bur-1
3479: PPUSH
3480: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3484: LD_EXP 1
3488: PPUSH
3489: LD_STRING DAmer-JMM-1
3491: PPUSH
3492: CALL_OW 88
// DialogueOff ;
3496: CALL_OW 7
// end ;
3500: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3501: LD_INT 4
3503: PPUSH
3504: LD_INT 22
3506: PUSH
3507: LD_INT 7
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PPUSH
3514: CALL_OW 70
3518: IFFALSE 3917
3520: GO 3522
3522: DISABLE
3523: LD_INT 0
3525: PPUSH
// begin enable ;
3526: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3527: LD_ADDR_VAR 0 1
3531: PUSH
3532: LD_INT 4
3534: PPUSH
3535: LD_INT 22
3537: PUSH
3538: LD_INT 7
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PPUSH
3545: CALL_OW 70
3549: PUSH
3550: FOR_IN
3551: IFFALSE 3915
// begin if i = Burlak or i = Masha then
3553: LD_VAR 0 1
3557: PUSH
3558: LD_EXP 17
3562: EQUAL
3563: PUSH
3564: LD_VAR 0 1
3568: PUSH
3569: LD_EXP 18
3573: EQUAL
3574: OR
3575: IFFALSE 3722
// begin RemoveUnit ( i ) ;
3577: LD_VAR 0 1
3581: PPUSH
3582: CALL_OW 64
// DialogueOn ;
3586: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3590: LD_EXP 1
3594: PPUSH
3595: LD_STRING D5a-JMM-1
3597: PPUSH
3598: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3602: LD_INT 22
3604: PUSH
3605: LD_INT 1
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PUSH
3612: LD_INT 26
3614: PUSH
3615: LD_INT 1
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 2
3624: PUSH
3625: LD_INT 25
3627: PUSH
3628: LD_INT 1
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 25
3637: PUSH
3638: LD_INT 2
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 25
3647: PUSH
3648: LD_INT 3
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: PUSH
3655: LD_INT 25
3657: PUSH
3658: LD_INT 4
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: PUSH
3665: LD_INT 25
3667: PUSH
3668: LD_INT 5
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: PPUSH
3688: CALL_OW 69
3692: PPUSH
3693: LD_STRING D5a-Sol1-1
3695: PPUSH
3696: LD_STRING D5-FSol1-1
3698: PPUSH
3699: CALL 6256 0 3
// DialogueOff ;
3703: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3707: LD_STRING M2b
3709: PPUSH
3710: CALL_OW 337
// spawnBurlak = 0 ;
3714: LD_ADDR_EXP 27
3718: PUSH
3719: LD_INT 0
3721: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
3722: LD_VAR 0 1
3726: PPUSH
3727: CALL_OW 247
3731: PUSH
3732: LD_INT 2
3734: EQUAL
3735: PUSH
3736: LD_VAR 0 1
3740: PPUSH
3741: CALL_OW 263
3745: PUSH
3746: LD_INT 1
3748: EQUAL
3749: AND
3750: IFFALSE 3878
// begin case IsDrivenBy ( i ) of Gnyevko :
3752: LD_VAR 0 1
3756: PPUSH
3757: CALL_OW 311
3761: PUSH
3762: LD_EXP 19
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3785
3772: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
3773: LD_INT 1
3775: PPUSH
3776: LD_STRING 13_Gnyevko_1
3778: PPUSH
3779: CALL_OW 39
3783: GO 3878
3785: LD_EXP 20
3789: DOUBLE
3790: EQUAL
3791: IFTRUE 3795
3793: GO 3808
3795: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
3796: LD_INT 1
3798: PPUSH
3799: LD_STRING 13_Titov_1
3801: PPUSH
3802: CALL_OW 39
3806: GO 3878
3808: LD_EXP 21
3812: DOUBLE
3813: EQUAL
3814: IFTRUE 3818
3816: GO 3831
3818: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
3819: LD_INT 1
3821: PPUSH
3822: LD_STRING 13_Xavier_1
3824: PPUSH
3825: CALL_OW 39
3829: GO 3878
3831: LD_EXP 22
3835: DOUBLE
3836: EQUAL
3837: IFTRUE 3841
3839: GO 3854
3841: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
3842: LD_INT 1
3844: PPUSH
3845: LD_STRING 13_Belkov_1
3847: PPUSH
3848: CALL_OW 39
3852: GO 3878
3854: LD_EXP 23
3858: DOUBLE
3859: EQUAL
3860: IFTRUE 3864
3862: GO 3877
3864: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
3865: LD_INT 1
3867: PPUSH
3868: LD_STRING 13_Lipshchin_1
3870: PPUSH
3871: CALL_OW 39
3875: GO 3878
3877: POP
// end ; if GetWeapon ( i ) = 49 then
3878: LD_VAR 0 1
3882: PPUSH
3883: CALL_OW 264
3887: PUSH
3888: LD_INT 49
3890: EQUAL
3891: IFFALSE 3904
// DestroyUnit ( i ) else
3893: LD_VAR 0 1
3897: PPUSH
3898: CALL_OW 65
3902: GO 3913
// RemoveUnit ( i ) ;
3904: LD_VAR 0 1
3908: PPUSH
3909: CALL_OW 64
// end ;
3913: GO 3550
3915: POP
3916: POP
// end ;
3917: PPOPN 1
3919: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
3920: LD_EXP 17
3924: PPUSH
3925: CALL_OW 302
3929: PUSH
3930: LD_EXP 18
3934: PPUSH
3935: CALL_OW 256
3939: PUSH
3940: LD_INT 500
3942: LESS
3943: AND
3944: PUSH
3945: LD_EXP 18
3949: PPUSH
3950: CALL_OW 255
3954: PUSH
3955: LD_INT 7
3957: EQUAL
3958: AND
3959: IFFALSE 3979
3961: GO 3963
3963: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
3964: LD_EXP 17
3968: PPUSH
3969: LD_INT 107
3971: PPUSH
3972: LD_INT 118
3974: PPUSH
3975: CALL_OW 111
3979: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
3980: LD_EXP 17
3984: PPUSH
3985: CALL_OW 301
3989: PUSH
3990: LD_EXP 27
3994: PUSH
3995: LD_INT 1
3997: EQUAL
3998: AND
3999: IFFALSE 4132
4001: GO 4003
4003: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4004: LD_EXP 1
4008: PPUSH
4009: LD_STRING D5b-JMM-1
4011: PPUSH
4012: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4016: LD_INT 22
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 26
4028: PUSH
4029: LD_INT 1
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 2
4038: PUSH
4039: LD_INT 25
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 25
4051: PUSH
4052: LD_INT 2
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 25
4061: PUSH
4062: LD_INT 3
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: LD_INT 25
4071: PUSH
4072: LD_INT 4
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 5
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PPUSH
4107: LD_STRING D5b-Sol1-1
4109: PPUSH
4110: LD_STRING 
4112: PPUSH
4113: CALL 6256 0 3
// ChangeMissionObjectives ( M2a ) ;
4117: LD_STRING M2a
4119: PPUSH
4120: CALL_OW 337
// burlakStatus = 1 ;
4124: LD_ADDR_EXP 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// end ;
4132: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4133: LD_EXP 2
4137: PPUSH
4138: CALL_OW 301
4142: IFFALSE 4279
4144: GO 4146
4146: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4147: LD_EXP 1
4151: PPUSH
4152: LD_STRING D6-JMM-1
4154: PPUSH
4155: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4159: LD_INT 22
4161: PUSH
4162: LD_INT 1
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PUSH
4169: LD_INT 26
4171: PUSH
4172: LD_INT 1
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 2
4181: PUSH
4182: LD_INT 25
4184: PUSH
4185: LD_INT 1
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 25
4194: PUSH
4195: LD_INT 2
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: LD_INT 25
4204: PUSH
4205: LD_INT 3
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 25
4214: PUSH
4215: LD_INT 4
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 5
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: LIST
4244: PPUSH
4245: CALL_OW 69
4249: PPUSH
4250: LD_STRING D6-Sol1-1
4252: PPUSH
4253: LD_STRING 
4255: PPUSH
4256: CALL 6256 0 3
// Say ( JMM , D6-JMM-2 ) ;
4260: LD_EXP 1
4264: PPUSH
4265: LD_STRING D6-JMM-2
4267: PPUSH
4268: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4272: LD_STRING M1a
4274: PPUSH
4275: CALL_OW 337
// end ;
4279: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4280: LD_INT 25
4282: PPUSH
4283: LD_INT 1
4285: PPUSH
4286: CALL_OW 321
4290: PUSH
4291: LD_INT 2
4293: EQUAL
4294: IFFALSE 4311
4296: GO 4298
4298: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4299: LD_EXP 2
4303: PPUSH
4304: LD_STRING D6-Huck-2
4306: PPUSH
4307: CALL_OW 88
// end ;
4311: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4312: LD_INT 22
4314: PUSH
4315: LD_INT 1
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 2
4324: PUSH
4325: LD_INT 34
4327: PUSH
4328: LD_INT 8
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: LD_INT 35
4337: PUSH
4338: LD_INT 8
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 69
4358: PUSH
4359: LD_INT 0
4361: GREATER
4362: IFFALSE 4554
4364: GO 4366
4366: DISABLE
4367: LD_INT 0
4369: PPUSH
4370: PPUSH
// begin enable ;
4371: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4372: LD_ADDR_VAR 0 1
4376: PUSH
4377: LD_INT 5
4379: PPUSH
4380: LD_INT 22
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 21
4392: PUSH
4393: LD_INT 3
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 30
4402: PUSH
4403: LD_INT 1
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 57
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 70
4433: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4434: LD_ADDR_VAR 0 2
4438: PUSH
4439: LD_INT 5
4441: PPUSH
4442: LD_INT 22
4444: PUSH
4445: LD_INT 1
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 21
4454: PUSH
4455: LD_INT 3
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 30
4464: PUSH
4465: LD_INT 5
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 3
4474: PUSH
4475: LD_INT 57
4477: PUSH
4478: EMPTY
4479: LIST
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: PPUSH
4491: CALL_OW 70
4495: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4496: LD_VAR 0 1
4500: PUSH
4501: LD_INT 0
4503: GREATER
4504: PUSH
4505: LD_VAR 0 2
4509: PUSH
4510: LD_INT 0
4512: GREATER
4513: AND
4514: IFFALSE 4554
// begin disable ;
4516: DISABLE
// DialogueOn ;
4517: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4521: LD_EXP 1
4525: PPUSH
4526: LD_STRING D7-JMM-1
4528: PPUSH
4529: CALL_OW 88
// DialogueOff ;
4533: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4537: LD_STRING M4
4539: PPUSH
4540: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4544: LD_INT 5
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 424
// end ; end ;
4554: PPOPN 2
4556: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4557: LD_INT 6
4559: PPUSH
4560: LD_INT 22
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 25
4572: PUSH
4573: LD_INT 4
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PPUSH
4584: CALL_OW 70
4588: PUSH
4589: LD_INT 0
4591: GREATER
4592: PUSH
4593: LD_EXP 37
4597: PUSH
4598: LD_INT 1
4600: EQUAL
4601: AND
4602: PUSH
4603: LD_EXP 29
4607: PUSH
4608: LD_INT 0
4610: EQUAL
4611: AND
4612: IFFALSE 4677
4614: GO 4616
4616: DISABLE
// begin enable ;
4617: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4618: LD_ADDR_EXP 26
4622: PUSH
4623: LD_INT 6
4625: PPUSH
4626: LD_INT 22
4628: PUSH
4629: LD_INT 1
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 25
4638: PUSH
4639: LD_INT 4
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PPUSH
4650: CALL_OW 70
4654: PUSH
4655: LD_INT 1
4657: ARRAY
4658: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4659: LD_INT 6
4661: PPUSH
4662: LD_INT 0
4664: PPUSH
4665: CALL_OW 424
// radationResearched = 1 ;
4669: LD_ADDR_EXP 29
4673: PUSH
4674: LD_INT 1
4676: ST_TO_ADDR
// end ;
4677: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4678: LD_EXP 26
4682: PPUSH
4683: CALL_OW 301
4687: PUSH
4688: LD_EXP 29
4692: PUSH
4693: LD_INT 1
4695: EQUAL
4696: AND
4697: IFFALSE 4733
4699: GO 4701
4701: DISABLE
// begin enable ;
4702: ENABLE
// radationResearched = 0 ;
4703: LD_ADDR_EXP 29
4707: PUSH
4708: LD_INT 0
4710: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4711: LD_INT 6
4713: PPUSH
4714: LD_INT 1
4716: PPUSH
4717: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4721: LD_EXP 1
4725: PPUSH
4726: LD_STRING D9a-JMM-1
4728: PPUSH
4729: CALL_OW 88
// end ; end_of_file
4733: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4734: LD_VAR 0 5
4738: PUSH
4739: LD_INT 8
4741: EQUAL
4742: PUSH
4743: LD_EXP 35
4747: PUSH
4748: LD_INT 0
4750: EQUAL
4751: AND
4752: IFFALSE 4805
// begin eventVar1 = 1 ;
4754: LD_ADDR_EXP 35
4758: PUSH
4759: LD_INT 1
4761: ST_TO_ADDR
// DialogueOn ;
4762: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4766: LD_EXP 1
4770: PPUSH
4771: LD_STRING D6a-JMM-1
4773: PPUSH
4774: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4778: LD_EXP 15
4782: PPUSH
4783: LD_STRING D6a-Pow-1
4785: PPUSH
4786: CALL_OW 94
// DialogueOff ;
4790: CALL_OW 7
// wait ( 3 3$0 ) ;
4794: LD_INT 6300
4796: PPUSH
4797: CALL_OW 67
// PowellSupport ;
4801: CALL 1666 0 0
// end ; end ;
4805: PPOPN 5
4807: END
// on UnitDestroyed ( un ) do begin if un = JMM then
4808: LD_VAR 0 1
4812: PUSH
4813: LD_EXP 1
4817: EQUAL
4818: IFFALSE 4827
// YouLost ( JMM ) ;
4820: LD_STRING JMM
4822: PPUSH
4823: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
4827: LD_VAR 0 1
4831: PPUSH
4832: CALL_OW 264
4836: PUSH
4837: LD_INT 31
4839: EQUAL
4840: IFFALSE 4856
// achivCounter := achivCounter + 1 ;
4842: LD_ADDR_EXP 41
4846: PUSH
4847: LD_EXP 41
4851: PUSH
4852: LD_INT 1
4854: PLUS
4855: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
4856: LD_VAR 0 1
4860: PPUSH
4861: CALL_OW 255
4865: PUSH
4866: LD_INT 1
4868: NONEQUAL
4869: PUSH
4870: LD_VAR 0 1
4874: PPUSH
4875: CALL_OW 247
4879: PUSH
4880: LD_INT 2
4882: EQUAL
4883: AND
4884: IFFALSE 4900
// destroyCounter := destroyCounter + 1 ;
4886: LD_ADDR_EXP 42
4890: PUSH
4891: LD_EXP 42
4895: PUSH
4896: LD_INT 1
4898: PLUS
4899: ST_TO_ADDR
// end ;
4900: PPOPN 1
4902: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
4903: LD_VAR 0 2
4907: PUSH
4908: LD_EXP 18
4912: EQUAL
4913: IFFALSE 4922
// SetAchievement ( ACH_MASHA ) ;
4915: LD_STRING ACH_MASHA
4917: PPUSH
4918: CALL_OW 543
// end ;
4922: PPOPN 4
4924: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4925: LD_VAR 0 1
4929: PPUSH
4930: CALL_OW 264
4934: PUSH
4935: LD_INT 8
4937: EQUAL
4938: PUSH
4939: LD_EXP 36
4943: PUSH
4944: LD_INT 0
4946: EQUAL
4947: AND
4948: IFFALSE 5017
// begin eventVar2 = 1 ;
4950: LD_ADDR_EXP 36
4954: PUSH
4955: LD_INT 1
4957: ST_TO_ADDR
// DialogueOn ;
4958: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
4962: LD_EXP 1
4966: PPUSH
4967: LD_STRING D6b-JMM-1
4969: PPUSH
4970: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
4974: LD_EXP 15
4978: PPUSH
4979: LD_STRING D6b-Pow-1
4981: PPUSH
4982: CALL_OW 94
// DialogueOff ;
4986: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
4990: LD_INT 5
4992: PPUSH
4993: LD_INT 1
4995: PPUSH
4996: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5000: LD_INT 7
5002: PPUSH
5003: LD_INT 1
5005: PPUSH
5006: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5010: LD_STRING M3
5012: PPUSH
5013: CALL_OW 337
// end ; end ;
5017: PPOPN 2
5019: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5020: LD_VAR 0 2
5024: PPUSH
5025: LD_VAR 0 3
5029: PPUSH
5030: LD_INT 5
5032: PPUSH
5033: CALL_OW 309
5037: PUSH
5038: LD_EXP 37
5042: PUSH
5043: LD_INT 0
5045: EQUAL
5046: AND
5047: IFFALSE 5276
// begin eventVar3 = 1 ;
5049: LD_ADDR_EXP 37
5053: PUSH
5054: LD_INT 1
5056: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5057: LD_INT 175
5059: PPUSH
5060: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5064: LD_INT 7
5066: PPUSH
5067: LD_INT 22
5069: PUSH
5070: LD_INT 1
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: LD_INT 21
5079: PUSH
5080: LD_INT 2
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: PUSH
5087: LD_INT 34
5089: PUSH
5090: LD_INT 11
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: PPUSH
5102: CALL_OW 70
5106: PUSH
5107: LD_INT 0
5109: GREATER
5110: IFFALSE 5129
// begin radarOnSpot = 1 ;
5112: LD_ADDR_EXP 30
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5120: LD_STRING M3a
5122: PPUSH
5123: CALL_OW 337
// end else
5127: GO 5136
// begin ChangeMissionObjectives ( M3b ) ;
5129: LD_STRING M3b
5131: PPUSH
5132: CALL_OW 337
// end ; DialogueOn ;
5136: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5140: LD_EXP 2
5144: PPUSH
5145: LD_STRING D8-Huck-1
5147: PPUSH
5148: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5152: LD_EXP 1
5156: PPUSH
5157: LD_STRING D8-JMM-1
5159: PPUSH
5160: CALL_OW 88
// if IsOk ( Stevens ) then
5164: LD_EXP 2
5168: PPUSH
5169: CALL_OW 302
5173: IFFALSE 5235
// begin Say ( Stevens , D8-Huck-2 ) ;
5175: LD_EXP 2
5179: PPUSH
5180: LD_STRING D8-Huck-2
5182: PPUSH
5183: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5187: LD_EXP 1
5191: PPUSH
5192: LD_STRING D8-JMM-2
5194: PPUSH
5195: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5199: LD_EXP 2
5203: PPUSH
5204: LD_STRING D8-Huck-3
5206: PPUSH
5207: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5211: LD_EXP 1
5215: PPUSH
5216: LD_STRING D8-JMM-3
5218: PPUSH
5219: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5223: LD_EXP 2
5227: PPUSH
5228: LD_STRING D8-Huck-4
5230: PPUSH
5231: CALL_OW 88
// end ; DialogueOff ;
5235: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5239: LD_INT 5
5241: PPUSH
5242: LD_INT 0
5244: PPUSH
5245: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5249: LD_INT 7
5251: PPUSH
5252: LD_INT 0
5254: PPUSH
5255: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5259: LD_INT 6
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5269: LD_STRING M5
5271: PPUSH
5272: CALL_OW 337
// end ; end ;
5276: PPOPN 3
5278: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5279: LD_EXP 26
5283: PPUSH
5284: CALL_OW 302
5288: PUSH
5289: LD_VAR 0 2
5293: PUSH
5294: LD_EXP 26
5298: EQUAL
5299: AND
5300: PUSH
5301: LD_EXP 38
5305: PUSH
5306: LD_INT 0
5308: EQUAL
5309: AND
5310: PUSH
5311: LD_EXP 37
5315: PUSH
5316: LD_INT 1
5318: EQUAL
5319: AND
5320: IFFALSE 5366
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5322: LD_VAR 0 1
5326: PPUSH
5327: LD_INT 1
5329: PPUSH
5330: CALL_OW 268
5334: PUSH
5335: LD_INT 11
5337: EQUAL
5338: PUSH
5339: LD_VAR 0 1
5343: PPUSH
5344: LD_INT 2
5346: PPUSH
5347: CALL_OW 268
5351: PUSH
5352: LD_INT 11
5354: EQUAL
5355: OR
5356: IFFALSE 5366
// eventVar4 = 1 ;
5358: LD_ADDR_EXP 38
5362: PUSH
5363: LD_INT 1
5365: ST_TO_ADDR
// end ;
5366: PPOPN 2
5368: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5369: LD_INT 0
5371: PPUSH
5372: PPUSH
// begin if GetNation ( unit ) = 2 then
5373: LD_VAR 0 1
5377: PPUSH
5378: CALL_OW 248
5382: PUSH
5383: LD_INT 2
5385: EQUAL
5386: IFFALSE 5664
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5388: LD_ADDR_EXP 32
5392: PUSH
5393: LD_EXP 32
5397: PUSH
5398: LD_INT 1
5400: PLUS
5401: ST_TO_ADDR
// for i := 1 to sibDeposits do
5402: LD_ADDR_VAR 0 4
5406: PUSH
5407: DOUBLE
5408: LD_INT 1
5410: DEC
5411: ST_TO_ADDR
5412: LD_EXP 31
5416: PUSH
5417: FOR_TO
5418: IFFALSE 5520
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5420: LD_EXP 31
5424: PUSH
5425: LD_VAR 0 4
5429: ARRAY
5430: PUSH
5431: LD_INT 1
5433: ARRAY
5434: PUSH
5435: LD_VAR 0 2
5439: EQUAL
5440: PUSH
5441: LD_EXP 31
5445: PUSH
5446: LD_VAR 0 4
5450: ARRAY
5451: PUSH
5452: LD_INT 2
5454: ARRAY
5455: PUSH
5456: LD_VAR 0 3
5460: EQUAL
5461: AND
5462: IFFALSE 5518
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5464: LD_ADDR_EXP 31
5468: PUSH
5469: LD_EXP 31
5473: PPUSH
5474: LD_VAR 0 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: PPUSH
5486: CALL_OW 3
5490: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5491: LD_ADDR_EXP 31
5495: PUSH
5496: LD_EXP 31
5500: PPUSH
5501: LD_VAR 0 4
5505: PUSH
5506: EMPTY
5507: LIST
5508: PUSH
5509: LD_INT 2
5511: ARRAY
5512: PPUSH
5513: CALL_OW 3
5517: ST_TO_ADDR
// end ;
5518: GO 5417
5520: POP
5521: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5522: LD_EXP 39
5526: PUSH
5527: LD_INT 0
5529: EQUAL
5530: PUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: LD_VAR 0 3
5540: PPUSH
5541: CALL_OW 428
5545: PUSH
5546: LD_INT 22
5548: PUSH
5549: LD_INT 1
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PPUSH
5556: CALL_OW 69
5560: IN
5561: AND
5562: IFFALSE 5664
// begin eventVar5 = 1 ;
5564: LD_ADDR_EXP 39
5568: PUSH
5569: LD_INT 1
5571: ST_TO_ADDR
// DialogueOn ;
5572: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5576: LD_EXP 2
5580: PPUSH
5581: LD_STRING D4-Sci1-1
5583: PPUSH
5584: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5588: LD_EXP 1
5592: PPUSH
5593: LD_STRING D4-JMM-1
5595: PPUSH
5596: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5600: LD_EXP 2
5604: PPUSH
5605: LD_STRING D4-Sci1-2
5607: PPUSH
5608: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5612: LD_EXP 1
5616: PPUSH
5617: LD_STRING D4-JMM-2
5619: PPUSH
5620: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5624: LD_EXP 2
5628: PPUSH
5629: LD_STRING D4-Sci1-3
5631: PPUSH
5632: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5636: LD_EXP 1
5640: PPUSH
5641: LD_STRING D4-JMM-3
5643: PPUSH
5644: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5648: LD_EXP 1
5652: PPUSH
5653: LD_STRING D4-JMM-3a
5655: PPUSH
5656: CALL_OW 88
// DialogueOff ;
5660: CALL_OW 7
// end ; end ; end ;
5664: PPOPN 5
5666: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5667: LD_VAR 0 1
5671: PPUSH
5672: CALL_OW 255
5676: PUSH
5677: LD_INT 1
5679: EQUAL
5680: PUSH
5681: LD_VAR 0 1
5685: PPUSH
5686: CALL_OW 266
5690: PUSH
5691: LD_INT 0
5693: EQUAL
5694: AND
5695: PUSH
5696: LD_INT 22
5698: PUSH
5699: LD_INT 1
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 21
5708: PUSH
5709: LD_INT 3
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 2
5718: PUSH
5719: LD_INT 30
5721: PUSH
5722: LD_INT 0
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 30
5731: PUSH
5732: LD_INT 1
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: LIST
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: PPUSH
5749: CALL_OW 69
5753: PUSH
5754: LD_INT 1
5756: EQUAL
5757: AND
5758: IFFALSE 5772
// SetBName ( building , omega ) ;
5760: LD_VAR 0 1
5764: PPUSH
5765: LD_STRING omega
5767: PPUSH
5768: CALL_OW 500
// end ;
5772: PPOPN 2
5774: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5775: LD_VAR 0 1
5779: PPUSH
5780: CALL 23931 0 1
// end ; end_of_file
5784: PPOPN 1
5786: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5787: LD_INT 0
5789: PPUSH
5790: PPUSH
// if exist_mode then
5791: LD_VAR 0 2
5795: IFFALSE 5814
// unit := CreateCharacter ( ident ) else
5797: LD_ADDR_VAR 0 4
5801: PUSH
5802: LD_VAR 0 1
5806: PPUSH
5807: CALL_OW 34
5811: ST_TO_ADDR
5812: GO 5829
// unit := NewCharacter ( ident ) ;
5814: LD_ADDR_VAR 0 4
5818: PUSH
5819: LD_VAR 0 1
5823: PPUSH
5824: CALL_OW 25
5828: ST_TO_ADDR
// result := unit ;
5829: LD_ADDR_VAR 0 3
5833: PUSH
5834: LD_VAR 0 4
5838: ST_TO_ADDR
// end ;
5839: LD_VAR 0 3
5843: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5844: LD_INT 0
5846: PPUSH
// vc_chassis := chassis ;
5847: LD_ADDR_OWVAR 37
5851: PUSH
5852: LD_VAR 0 1
5856: ST_TO_ADDR
// vc_engine := engine ;
5857: LD_ADDR_OWVAR 39
5861: PUSH
5862: LD_VAR 0 2
5866: ST_TO_ADDR
// vc_control := control ;
5867: LD_ADDR_OWVAR 38
5871: PUSH
5872: LD_VAR 0 3
5876: ST_TO_ADDR
// vc_weapon := weapon ;
5877: LD_ADDR_OWVAR 40
5881: PUSH
5882: LD_VAR 0 4
5886: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5887: LD_ADDR_OWVAR 41
5891: PUSH
5892: LD_VAR 0 5
5896: ST_TO_ADDR
// end ;
5897: LD_VAR 0 6
5901: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
5902: LD_INT 0
5904: PPUSH
5905: PPUSH
5906: PPUSH
5907: PPUSH
5908: PPUSH
5909: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5910: LD_VAR 0 1
5914: NOT
5915: PUSH
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 263
5925: PUSH
5926: LD_INT 2
5928: EQUAL
5929: NOT
5930: OR
5931: IFFALSE 5935
// exit ;
5933: GO 6251
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5935: LD_ADDR_VAR 0 6
5939: PUSH
5940: LD_INT 22
5942: PUSH
5943: LD_VAR 0 1
5947: PPUSH
5948: CALL_OW 255
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 2
5959: PUSH
5960: LD_INT 30
5962: PUSH
5963: LD_INT 36
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PUSH
5970: LD_INT 34
5972: PUSH
5973: LD_INT 31
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 69
5993: ST_TO_ADDR
// if not tmp then
5994: LD_VAR 0 6
5998: NOT
5999: IFFALSE 6003
// exit ;
6001: GO 6251
// result := [ ] ;
6003: LD_ADDR_VAR 0 2
6007: PUSH
6008: EMPTY
6009: ST_TO_ADDR
// for i in tmp do
6010: LD_ADDR_VAR 0 3
6014: PUSH
6015: LD_VAR 0 6
6019: PUSH
6020: FOR_IN
6021: IFFALSE 6092
// begin t := UnitsInside ( i ) ;
6023: LD_ADDR_VAR 0 4
6027: PUSH
6028: LD_VAR 0 3
6032: PPUSH
6033: CALL_OW 313
6037: ST_TO_ADDR
// if t then
6038: LD_VAR 0 4
6042: IFFALSE 6090
// for j in t do
6044: LD_ADDR_VAR 0 7
6048: PUSH
6049: LD_VAR 0 4
6053: PUSH
6054: FOR_IN
6055: IFFALSE 6088
// result := Insert ( result , result + 1 , j ) ;
6057: LD_ADDR_VAR 0 2
6061: PUSH
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_VAR 0 2
6071: PUSH
6072: LD_INT 1
6074: PLUS
6075: PPUSH
6076: LD_VAR 0 7
6080: PPUSH
6081: CALL_OW 2
6085: ST_TO_ADDR
6086: GO 6054
6088: POP
6089: POP
// end ;
6090: GO 6020
6092: POP
6093: POP
// if not result then
6094: LD_VAR 0 2
6098: NOT
6099: IFFALSE 6103
// exit ;
6101: GO 6251
// mech := result [ 1 ] ;
6103: LD_ADDR_VAR 0 5
6107: PUSH
6108: LD_VAR 0 2
6112: PUSH
6113: LD_INT 1
6115: ARRAY
6116: ST_TO_ADDR
// if result > 1 then
6117: LD_VAR 0 2
6121: PUSH
6122: LD_INT 1
6124: GREATER
6125: IFFALSE 6237
// for i = 2 to result do
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: DOUBLE
6133: LD_INT 2
6135: DEC
6136: ST_TO_ADDR
6137: LD_VAR 0 2
6141: PUSH
6142: FOR_TO
6143: IFFALSE 6235
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
6145: LD_ADDR_VAR 0 4
6149: PUSH
6150: LD_VAR 0 2
6154: PUSH
6155: LD_VAR 0 3
6159: ARRAY
6160: PPUSH
6161: LD_INT 3
6163: PPUSH
6164: CALL_OW 259
6168: PUSH
6169: LD_VAR 0 2
6173: PUSH
6174: LD_VAR 0 3
6178: ARRAY
6179: PPUSH
6180: CALL_OW 432
6184: MINUS
6185: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
6186: LD_VAR 0 4
6190: PUSH
6191: LD_VAR 0 5
6195: PPUSH
6196: LD_INT 3
6198: PPUSH
6199: CALL_OW 259
6203: PUSH
6204: LD_VAR 0 5
6208: PPUSH
6209: CALL_OW 432
6213: MINUS
6214: GREATEREQUAL
6215: IFFALSE 6233
// mech := result [ i ] ;
6217: LD_ADDR_VAR 0 5
6221: PUSH
6222: LD_VAR 0 2
6226: PUSH
6227: LD_VAR 0 3
6231: ARRAY
6232: ST_TO_ADDR
// end ;
6233: GO 6142
6235: POP
6236: POP
// ComLinkTo ( vehicle , mech ) ;
6237: LD_VAR 0 1
6241: PPUSH
6242: LD_VAR 0 5
6246: PPUSH
6247: CALL_OW 135
// end ;
6251: LD_VAR 0 2
6255: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6256: LD_INT 0
6258: PPUSH
6259: PPUSH
6260: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6261: LD_ADDR_VAR 0 1
6265: PUSH
6266: LD_VAR 0 1
6270: PUSH
6271: LD_EXP 1
6275: PUSH
6276: LD_EXP 2
6280: PUSH
6281: LD_EXP 3
6285: PUSH
6286: LD_EXP 4
6290: PUSH
6291: LD_EXP 5
6295: PUSH
6296: LD_EXP 6
6300: PUSH
6301: LD_EXP 7
6305: PUSH
6306: LD_EXP 8
6310: PUSH
6311: LD_EXP 9
6315: PUSH
6316: LD_EXP 10
6320: PUSH
6321: LD_EXP 11
6325: PUSH
6326: LD_EXP 12
6330: PUSH
6331: LD_EXP 13
6335: PUSH
6336: LD_EXP 14
6340: PUSH
6341: LD_EXP 15
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: DIFF
6363: ST_TO_ADDR
// if not characters then
6364: LD_VAR 0 1
6368: NOT
6369: IFFALSE 6373
// exit ;
6371: GO 6452
// speaker := characters [ rand ( 1 , characters ) ] ;
6373: LD_ADDR_VAR 0 6
6377: PUSH
6378: LD_VAR 0 1
6382: PUSH
6383: LD_INT 1
6385: PPUSH
6386: LD_VAR 0 1
6390: PPUSH
6391: CALL_OW 12
6395: ARRAY
6396: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6397: LD_VAR 0 6
6401: PPUSH
6402: CALL_OW 258
6406: PUSH
6407: LD_INT 1
6409: EQUAL
6410: IFFALSE 6428
// Say ( speaker , dialogMID ) else
6412: LD_VAR 0 6
6416: PPUSH
6417: LD_VAR 0 2
6421: PPUSH
6422: CALL_OW 88
6426: GO 6442
// Say ( speaker , dialogFID ) ;
6428: LD_VAR 0 6
6432: PPUSH
6433: LD_VAR 0 3
6437: PPUSH
6438: CALL_OW 88
// result := speaker ;
6442: LD_ADDR_VAR 0 4
6446: PUSH
6447: LD_VAR 0 6
6451: ST_TO_ADDR
// end ;
6452: LD_VAR 0 4
6456: RET
// export function PrepareDifficulty ; begin
6457: LD_INT 0
6459: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6460: LD_INT 5
6462: PPUSH
6463: LD_INT 8
6465: PPUSH
6466: LD_INT 2
6468: PPUSH
6469: CALL_OW 322
// if difficulty = 1 then
6473: LD_OWVAR 67
6477: PUSH
6478: LD_INT 1
6480: EQUAL
6481: IFFALSE 6600
// begin SetTech ( 66 , 8 , state_researched ) ;
6483: LD_INT 66
6485: PPUSH
6486: LD_INT 8
6488: PPUSH
6489: LD_INT 2
6491: PPUSH
6492: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6496: LD_INT 67
6498: PPUSH
6499: LD_INT 8
6501: PPUSH
6502: LD_INT 0
6504: PPUSH
6505: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6509: LD_INT 68
6511: PPUSH
6512: LD_INT 8
6514: PPUSH
6515: LD_INT 0
6517: PPUSH
6518: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6522: LD_INT 51
6524: PPUSH
6525: LD_INT 8
6527: PPUSH
6528: LD_INT 2
6530: PPUSH
6531: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6535: LD_INT 52
6537: PPUSH
6538: LD_INT 8
6540: PPUSH
6541: LD_INT 0
6543: PPUSH
6544: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6548: LD_INT 53
6550: PPUSH
6551: LD_INT 8
6553: PPUSH
6554: LD_INT 0
6556: PPUSH
6557: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6561: LD_INT 60
6563: PPUSH
6564: LD_INT 8
6566: PPUSH
6567: LD_INT 2
6569: PPUSH
6570: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6574: LD_INT 61
6576: PPUSH
6577: LD_INT 8
6579: PPUSH
6580: LD_INT 0
6582: PPUSH
6583: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6587: LD_INT 62
6589: PPUSH
6590: LD_INT 8
6592: PPUSH
6593: LD_INT 0
6595: PPUSH
6596: CALL_OW 322
// end ; if difficulty = 2 then
6600: LD_OWVAR 67
6604: PUSH
6605: LD_INT 2
6607: EQUAL
6608: IFFALSE 6727
// begin SetTech ( 66 , 8 , state_researched ) ;
6610: LD_INT 66
6612: PPUSH
6613: LD_INT 8
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6623: LD_INT 67
6625: PPUSH
6626: LD_INT 8
6628: PPUSH
6629: LD_INT 2
6631: PPUSH
6632: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6636: LD_INT 68
6638: PPUSH
6639: LD_INT 8
6641: PPUSH
6642: LD_INT 0
6644: PPUSH
6645: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6649: LD_INT 51
6651: PPUSH
6652: LD_INT 8
6654: PPUSH
6655: LD_INT 2
6657: PPUSH
6658: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6662: LD_INT 52
6664: PPUSH
6665: LD_INT 8
6667: PPUSH
6668: LD_INT 2
6670: PPUSH
6671: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6675: LD_INT 53
6677: PPUSH
6678: LD_INT 8
6680: PPUSH
6681: LD_INT 2
6683: PPUSH
6684: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6688: LD_INT 60
6690: PPUSH
6691: LD_INT 8
6693: PPUSH
6694: LD_INT 2
6696: PPUSH
6697: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6701: LD_INT 61
6703: PPUSH
6704: LD_INT 8
6706: PPUSH
6707: LD_INT 2
6709: PPUSH
6710: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6714: LD_INT 62
6716: PPUSH
6717: LD_INT 8
6719: PPUSH
6720: LD_INT 0
6722: PPUSH
6723: CALL_OW 322
// end ; if difficulty = 3 then
6727: LD_OWVAR 67
6731: PUSH
6732: LD_INT 3
6734: EQUAL
6735: IFFALSE 6854
// begin SetTech ( 66 , 8 , state_researched ) ;
6737: LD_INT 66
6739: PPUSH
6740: LD_INT 8
6742: PPUSH
6743: LD_INT 2
6745: PPUSH
6746: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6750: LD_INT 67
6752: PPUSH
6753: LD_INT 8
6755: PPUSH
6756: LD_INT 2
6758: PPUSH
6759: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6763: LD_INT 68
6765: PPUSH
6766: LD_INT 8
6768: PPUSH
6769: LD_INT 0
6771: PPUSH
6772: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6776: LD_INT 51
6778: PPUSH
6779: LD_INT 8
6781: PPUSH
6782: LD_INT 2
6784: PPUSH
6785: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6789: LD_INT 52
6791: PPUSH
6792: LD_INT 8
6794: PPUSH
6795: LD_INT 2
6797: PPUSH
6798: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6802: LD_INT 53
6804: PPUSH
6805: LD_INT 8
6807: PPUSH
6808: LD_INT 2
6810: PPUSH
6811: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6815: LD_INT 60
6817: PPUSH
6818: LD_INT 8
6820: PPUSH
6821: LD_INT 2
6823: PPUSH
6824: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6828: LD_INT 61
6830: PPUSH
6831: LD_INT 8
6833: PPUSH
6834: LD_INT 2
6836: PPUSH
6837: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6841: LD_INT 62
6843: PPUSH
6844: LD_INT 8
6846: PPUSH
6847: LD_INT 0
6849: PPUSH
6850: CALL_OW 322
// end ; end ;
6854: LD_VAR 0 1
6858: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6859: LD_INT 0
6861: PPUSH
6862: PPUSH
6863: PPUSH
6864: PPUSH
6865: PPUSH
6866: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6867: LD_ADDR_VAR 0 7
6871: PUSH
6872: LD_INT 22
6874: PUSH
6875: LD_VAR 0 1
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 25
6886: PUSH
6887: LD_INT 9
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PPUSH
6898: CALL_OW 69
6902: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6903: LD_ADDR_VAR 0 8
6907: PUSH
6908: LD_INT 22
6910: PUSH
6911: LD_VAR 0 2
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 3
6922: PUSH
6923: LD_INT 21
6925: PUSH
6926: LD_INT 3
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PPUSH
6941: CALL_OW 69
6945: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6946: LD_ADDR_VAR 0 5
6950: PUSH
6951: LD_INT 1
6953: PPUSH
6954: LD_INT 3
6956: PPUSH
6957: CALL_OW 12
6961: ST_TO_ADDR
// for i = 1 to list do
6962: LD_ADDR_VAR 0 6
6966: PUSH
6967: DOUBLE
6968: LD_INT 1
6970: DEC
6971: ST_TO_ADDR
6972: LD_VAR 0 7
6976: PUSH
6977: FOR_TO
6978: IFFALSE 7160
// for ta in filter do
6980: LD_ADDR_VAR 0 4
6984: PUSH
6985: LD_VAR 0 8
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7156
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6993: LD_VAR 0 7
6997: PUSH
6998: LD_VAR 0 6
7002: ARRAY
7003: PPUSH
7004: LD_VAR 0 4
7008: PPUSH
7009: CALL_OW 296
7013: PUSH
7014: LD_INT 13
7016: LESSEQUAL
7017: IFFALSE 7154
// begin case c of 1 :
7019: LD_VAR 0 5
7023: PUSH
7024: LD_INT 1
7026: DOUBLE
7027: EQUAL
7028: IFTRUE 7032
7030: GO 7070
7032: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
7033: LD_VAR 0 7
7037: PUSH
7038: LD_VAR 0 6
7042: ARRAY
7043: PPUSH
7044: LD_VAR 0 4
7048: PPUSH
7049: CALL_OW 250
7053: PPUSH
7054: LD_VAR 0 4
7058: PPUSH
7059: CALL_OW 251
7063: PPUSH
7064: CALL_OW 154
7068: GO 7154
7070: LD_INT 2
7072: DOUBLE
7073: EQUAL
7074: IFTRUE 7078
7076: GO 7142
7078: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
7079: LD_VAR 0 7
7083: PUSH
7084: LD_VAR 0 6
7088: ARRAY
7089: PPUSH
7090: LD_VAR 0 4
7094: PPUSH
7095: CALL_OW 250
7099: PUSH
7100: LD_INT 1
7102: NEG
7103: PPUSH
7104: LD_INT 1
7106: PPUSH
7107: CALL_OW 12
7111: PLUS
7112: PPUSH
7113: LD_VAR 0 4
7117: PPUSH
7118: CALL_OW 251
7122: PUSH
7123: LD_INT 1
7125: NEG
7126: PPUSH
7127: LD_INT 1
7129: PPUSH
7130: CALL_OW 12
7134: PLUS
7135: PPUSH
7136: CALL_OW 153
7140: GO 7154
7142: LD_INT 3
7144: DOUBLE
7145: EQUAL
7146: IFTRUE 7150
7148: GO 7153
7150: POP
// ; end ;
7151: GO 7154
7153: POP
// end ; end ;
7154: GO 6990
7156: POP
7157: POP
7158: GO 6977
7160: POP
7161: POP
// end ;
7162: LD_VAR 0 3
7166: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7167: LD_INT 0
7169: PPUSH
7170: PPUSH
// for i in charactersList do
7171: LD_ADDR_VAR 0 4
7175: PUSH
7176: LD_VAR 0 1
7180: PUSH
7181: FOR_IN
7182: IFFALSE 7200
// SaveCharacters ( i , ident ) ;
7184: LD_VAR 0 4
7188: PPUSH
7189: LD_VAR 0 2
7193: PPUSH
7194: CALL_OW 38
7198: GO 7181
7200: POP
7201: POP
// end ;
7202: LD_VAR 0 3
7206: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7207: LD_INT 0
7209: PPUSH
7210: PPUSH
7211: PPUSH
7212: PPUSH
7213: PPUSH
7214: PPUSH
7215: PPUSH
7216: PPUSH
7217: PPUSH
7218: PPUSH
7219: PPUSH
// for i = 1 to medicCount do
7220: LD_ADDR_VAR 0 13
7224: PUSH
7225: DOUBLE
7226: LD_INT 1
7228: DEC
7229: ST_TO_ADDR
7230: LD_VAR 0 7
7234: PUSH
7235: FOR_TO
7236: IFFALSE 7318
// begin uc_side = side ;
7238: LD_ADDR_OWVAR 20
7242: PUSH
7243: LD_VAR 0 1
7247: ST_TO_ADDR
// uc_nation = nation ;
7248: LD_ADDR_OWVAR 21
7252: PUSH
7253: LD_VAR 0 2
7257: ST_TO_ADDR
// hc_name =  ;
7258: LD_ADDR_OWVAR 26
7262: PUSH
7263: LD_STRING 
7265: ST_TO_ADDR
// hc_gallery =  ;
7266: LD_ADDR_OWVAR 33
7270: PUSH
7271: LD_STRING 
7273: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7274: LD_INT 0
7276: PPUSH
7277: LD_INT 4
7279: PPUSH
7280: LD_VAR 0 8
7284: PPUSH
7285: CALL_OW 380
// un = CreateHuman ;
7289: LD_ADDR_VAR 0 15
7293: PUSH
7294: CALL_OW 44
7298: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7299: LD_VAR 0 15
7303: PPUSH
7304: LD_VAR 0 9
7308: PPUSH
7309: LD_INT 0
7311: PPUSH
7312: CALL_OW 49
// end ;
7316: GO 7235
7318: POP
7319: POP
// for i = 1 to soldierCount do
7320: LD_ADDR_VAR 0 13
7324: PUSH
7325: DOUBLE
7326: LD_INT 1
7328: DEC
7329: ST_TO_ADDR
7330: LD_VAR 0 3
7334: PUSH
7335: FOR_TO
7336: IFFALSE 7418
// begin uc_side = side ;
7338: LD_ADDR_OWVAR 20
7342: PUSH
7343: LD_VAR 0 1
7347: ST_TO_ADDR
// uc_nation = nation ;
7348: LD_ADDR_OWVAR 21
7352: PUSH
7353: LD_VAR 0 2
7357: ST_TO_ADDR
// hc_name =  ;
7358: LD_ADDR_OWVAR 26
7362: PUSH
7363: LD_STRING 
7365: ST_TO_ADDR
// hc_gallery =  ;
7366: LD_ADDR_OWVAR 33
7370: PUSH
7371: LD_STRING 
7373: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7374: LD_INT 0
7376: PPUSH
7377: LD_INT 1
7379: PPUSH
7380: LD_VAR 0 8
7384: PPUSH
7385: CALL_OW 380
// un = CreateHuman ;
7389: LD_ADDR_VAR 0 15
7393: PUSH
7394: CALL_OW 44
7398: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7399: LD_VAR 0 15
7403: PPUSH
7404: LD_VAR 0 9
7408: PPUSH
7409: LD_INT 0
7411: PPUSH
7412: CALL_OW 49
// end ;
7416: GO 7335
7418: POP
7419: POP
// for i = 1 to sniperCount do
7420: LD_ADDR_VAR 0 13
7424: PUSH
7425: DOUBLE
7426: LD_INT 1
7428: DEC
7429: ST_TO_ADDR
7430: LD_VAR 0 4
7434: PUSH
7435: FOR_TO
7436: IFFALSE 7518
// begin uc_side = side ;
7438: LD_ADDR_OWVAR 20
7442: PUSH
7443: LD_VAR 0 1
7447: ST_TO_ADDR
// uc_nation = nation ;
7448: LD_ADDR_OWVAR 21
7452: PUSH
7453: LD_VAR 0 2
7457: ST_TO_ADDR
// hc_name =  ;
7458: LD_ADDR_OWVAR 26
7462: PUSH
7463: LD_STRING 
7465: ST_TO_ADDR
// hc_gallery =  ;
7466: LD_ADDR_OWVAR 33
7470: PUSH
7471: LD_STRING 
7473: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7474: LD_INT 0
7476: PPUSH
7477: LD_INT 5
7479: PPUSH
7480: LD_VAR 0 8
7484: PPUSH
7485: CALL_OW 380
// un = CreateHuman ;
7489: LD_ADDR_VAR 0 15
7493: PUSH
7494: CALL_OW 44
7498: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7499: LD_VAR 0 15
7503: PPUSH
7504: LD_VAR 0 9
7508: PPUSH
7509: LD_INT 0
7511: PPUSH
7512: CALL_OW 49
// end ;
7516: GO 7435
7518: POP
7519: POP
// for i = 1 to bazookCount do
7520: LD_ADDR_VAR 0 13
7524: PUSH
7525: DOUBLE
7526: LD_INT 1
7528: DEC
7529: ST_TO_ADDR
7530: LD_VAR 0 5
7534: PUSH
7535: FOR_TO
7536: IFFALSE 7618
// begin uc_side = side ;
7538: LD_ADDR_OWVAR 20
7542: PUSH
7543: LD_VAR 0 1
7547: ST_TO_ADDR
// uc_nation = nation ;
7548: LD_ADDR_OWVAR 21
7552: PUSH
7553: LD_VAR 0 2
7557: ST_TO_ADDR
// hc_name =  ;
7558: LD_ADDR_OWVAR 26
7562: PUSH
7563: LD_STRING 
7565: ST_TO_ADDR
// hc_gallery =  ;
7566: LD_ADDR_OWVAR 33
7570: PUSH
7571: LD_STRING 
7573: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7574: LD_INT 0
7576: PPUSH
7577: LD_INT 9
7579: PPUSH
7580: LD_VAR 0 8
7584: PPUSH
7585: CALL_OW 380
// un = CreateHuman ;
7589: LD_ADDR_VAR 0 15
7593: PUSH
7594: CALL_OW 44
7598: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7599: LD_VAR 0 15
7603: PPUSH
7604: LD_VAR 0 9
7608: PPUSH
7609: LD_INT 0
7611: PPUSH
7612: CALL_OW 49
// end ;
7616: GO 7535
7618: POP
7619: POP
// for i = 1 to mortalCount do
7620: LD_ADDR_VAR 0 13
7624: PUSH
7625: DOUBLE
7626: LD_INT 1
7628: DEC
7629: ST_TO_ADDR
7630: LD_VAR 0 6
7634: PUSH
7635: FOR_TO
7636: IFFALSE 7718
// begin uc_side = side ;
7638: LD_ADDR_OWVAR 20
7642: PUSH
7643: LD_VAR 0 1
7647: ST_TO_ADDR
// uc_nation = nation ;
7648: LD_ADDR_OWVAR 21
7652: PUSH
7653: LD_VAR 0 2
7657: ST_TO_ADDR
// hc_name =  ;
7658: LD_ADDR_OWVAR 26
7662: PUSH
7663: LD_STRING 
7665: ST_TO_ADDR
// hc_gallery =  ;
7666: LD_ADDR_OWVAR 33
7670: PUSH
7671: LD_STRING 
7673: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 8
7679: PPUSH
7680: LD_VAR 0 8
7684: PPUSH
7685: CALL_OW 380
// un = CreateHuman ;
7689: LD_ADDR_VAR 0 15
7693: PUSH
7694: CALL_OW 44
7698: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7699: LD_VAR 0 15
7703: PPUSH
7704: LD_VAR 0 9
7708: PPUSH
7709: LD_INT 0
7711: PPUSH
7712: CALL_OW 49
// end ;
7716: GO 7635
7718: POP
7719: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7720: LD_ADDR_VAR 0 17
7724: PUSH
7725: LD_INT 22
7727: PUSH
7728: LD_VAR 0 1
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 25
7739: PUSH
7740: LD_INT 4
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 69
7755: ST_TO_ADDR
// for i in medic_list do
7756: LD_ADDR_VAR 0 13
7760: PUSH
7761: LD_VAR 0 17
7765: PUSH
7766: FOR_IN
7767: IFFALSE 7802
// if GetTag ( i ) = 1 then
7769: LD_VAR 0 13
7773: PPUSH
7774: CALL_OW 110
7778: PUSH
7779: LD_INT 1
7781: EQUAL
7782: IFFALSE 7800
// medic_list := medic_list diff i ;
7784: LD_ADDR_VAR 0 17
7788: PUSH
7789: LD_VAR 0 17
7793: PUSH
7794: LD_VAR 0 13
7798: DIFF
7799: ST_TO_ADDR
7800: GO 7766
7802: POP
7803: POP
// for i in medic_list do
7804: LD_ADDR_VAR 0 13
7808: PUSH
7809: LD_VAR 0 17
7813: PUSH
7814: FOR_IN
7815: IFFALSE 7833
// ComMoveToArea ( i , healArea ) ;
7817: LD_VAR 0 13
7821: PPUSH
7822: LD_VAR 0 10
7826: PPUSH
7827: CALL_OW 113
7831: GO 7814
7833: POP
7834: POP
// repeat wait ( 0 0$1 ) ;
7835: LD_INT 35
7837: PPUSH
7838: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7842: LD_ADDR_VAR 0 16
7846: PUSH
7847: LD_INT 22
7849: PUSH
7850: LD_VAR 0 1
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 1
7861: PUSH
7862: LD_INT 3
7864: PUSH
7865: LD_INT 24
7867: PUSH
7868: LD_INT 550
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: PUSH
7879: LD_INT 24
7881: PUSH
7882: LD_INT 250
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: LIST
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PPUSH
7898: CALL_OW 69
7902: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7903: LD_ADDR_VAR 0 18
7907: PUSH
7908: LD_INT 22
7910: PUSH
7911: LD_VAR 0 1
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 2
7922: PUSH
7923: LD_INT 25
7925: PUSH
7926: LD_INT 1
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 25
7935: PUSH
7936: LD_INT 5
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 25
7945: PUSH
7946: LD_INT 8
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PUSH
7953: LD_INT 25
7955: PUSH
7956: LD_INT 9
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: PUSH
7970: LD_INT 24
7972: PUSH
7973: LD_INT 1000
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: PPUSH
7985: CALL_OW 69
7989: ST_TO_ADDR
// if medicCount > 0 then
7990: LD_VAR 0 7
7994: PUSH
7995: LD_INT 0
7997: GREATER
7998: IFFALSE 8072
// begin if damageUnit_list > 0 then
8000: LD_VAR 0 16
8004: PUSH
8005: LD_INT 0
8007: GREATER
8008: IFFALSE 8072
// begin for i in damageUnit_list do
8010: LD_ADDR_VAR 0 13
8014: PUSH
8015: LD_VAR 0 16
8019: PUSH
8020: FOR_IN
8021: IFFALSE 8070
// begin ComMoveToArea ( i , healArea ) ;
8023: LD_VAR 0 13
8027: PPUSH
8028: LD_VAR 0 10
8032: PPUSH
8033: CALL_OW 113
// for j in medic_list do
8037: LD_ADDR_VAR 0 14
8041: PUSH
8042: LD_VAR 0 17
8046: PUSH
8047: FOR_IN
8048: IFFALSE 8066
// AddComHeal ( j , i ) ;
8050: LD_VAR 0 14
8054: PPUSH
8055: LD_VAR 0 13
8059: PPUSH
8060: CALL_OW 188
8064: GO 8047
8066: POP
8067: POP
// end ;
8068: GO 8020
8070: POP
8071: POP
// end ; end ; for i in soldiersOK_list do
8072: LD_ADDR_VAR 0 13
8076: PUSH
8077: LD_VAR 0 18
8081: PUSH
8082: FOR_IN
8083: IFFALSE 8259
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8085: LD_ADDR_VAR 0 21
8089: PUSH
8090: LD_INT 22
8092: PUSH
8093: LD_VAR 0 11
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PPUSH
8102: CALL_OW 69
8106: PPUSH
8107: LD_VAR 0 13
8111: PPUSH
8112: CALL_OW 74
8116: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8117: LD_ADDR_VAR 0 22
8121: PUSH
8122: LD_INT 22
8124: PUSH
8125: LD_VAR 0 11
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: LD_INT 2
8136: PUSH
8137: LD_INT 59
8139: PUSH
8140: EMPTY
8141: LIST
8142: PUSH
8143: LD_INT 21
8145: PUSH
8146: LD_INT 1
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PUSH
8153: LD_INT 21
8155: PUSH
8156: LD_INT 2
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: PPUSH
8176: CALL_OW 69
8180: PPUSH
8181: LD_VAR 0 13
8185: PPUSH
8186: CALL_OW 74
8190: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8191: LD_VAR 0 13
8195: PPUSH
8196: LD_VAR 0 21
8200: PPUSH
8201: CALL_OW 296
8205: PUSH
8206: LD_INT 8
8208: PLUS
8209: PUSH
8210: LD_VAR 0 13
8214: PPUSH
8215: LD_VAR 0 22
8219: PPUSH
8220: CALL_OW 296
8224: LESS
8225: IFFALSE 8243
// begin ComAttackUnit ( i , target1 ) ;
8227: LD_VAR 0 13
8231: PPUSH
8232: LD_VAR 0 21
8236: PPUSH
8237: CALL_OW 115
// end else
8241: GO 8257
// begin ComAttackUnit ( i , target2 ) ;
8243: LD_VAR 0 13
8247: PPUSH
8248: LD_VAR 0 22
8252: PPUSH
8253: CALL_OW 115
// end ; end ;
8257: GO 8082
8259: POP
8260: POP
// until soldiersOK_list = [ ] ;
8261: LD_VAR 0 18
8265: PUSH
8266: EMPTY
8267: EQUAL
8268: IFFALSE 7835
// end ;
8270: LD_VAR 0 12
8274: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
8283: PPUSH
8284: PPUSH
8285: PPUSH
8286: PPUSH
8287: PPUSH
// amChassisTab = [ ] ;
8288: LD_ADDR_VAR 0 19
8292: PUSH
8293: EMPTY
8294: ST_TO_ADDR
// arChassisTab = [ ] ;
8295: LD_ADDR_VAR 0 18
8299: PUSH
8300: EMPTY
8301: ST_TO_ADDR
// ruChassisTab = [ ] ;
8302: LD_ADDR_VAR 0 17
8306: PUSH
8307: EMPTY
8308: ST_TO_ADDR
// for i = 1 to vehCount do
8309: LD_ADDR_VAR 0 13
8313: PUSH
8314: DOUBLE
8315: LD_INT 1
8317: DEC
8318: ST_TO_ADDR
8319: LD_VAR 0 3
8323: PUSH
8324: FOR_TO
8325: IFFALSE 9749
// begin wait ( 0 0$01 ) ;
8327: LD_INT 35
8329: PPUSH
8330: CALL_OW 67
// if nation = 1 then
8334: LD_VAR 0 5
8338: PUSH
8339: LD_INT 1
8341: EQUAL
8342: IFFALSE 8823
// begin uc_side = side ;
8344: LD_ADDR_OWVAR 20
8348: PUSH
8349: LD_VAR 0 2
8353: ST_TO_ADDR
// uc_nation = nation ;
8354: LD_ADDR_OWVAR 21
8358: PUSH
8359: LD_VAR 0 5
8363: ST_TO_ADDR
// vc_engine = vehengine ;
8364: LD_ADDR_OWVAR 39
8368: PUSH
8369: LD_VAR 0 6
8373: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8374: LD_ADDR_OWVAR 40
8378: PUSH
8379: LD_VAR 0 10
8383: PUSH
8384: LD_INT 1
8386: PPUSH
8387: LD_VAR 0 10
8391: PPUSH
8392: CALL_OW 12
8396: ARRAY
8397: ST_TO_ADDR
// for j = 1 to AMWeapon do
8398: LD_ADDR_VAR 0 14
8402: PUSH
8403: DOUBLE
8404: LD_INT 1
8406: DEC
8407: ST_TO_ADDR
8408: LD_VAR 0 10
8412: PUSH
8413: FOR_TO
8414: IFFALSE 8715
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8416: LD_VAR 0 10
8420: PUSH
8421: LD_VAR 0 14
8425: ARRAY
8426: PUSH
8427: LD_INT 2
8429: EQUAL
8430: PUSH
8431: LD_VAR 0 10
8435: PUSH
8436: LD_VAR 0 14
8440: ARRAY
8441: PUSH
8442: LD_INT 3
8444: EQUAL
8445: OR
8446: IFFALSE 8499
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8448: LD_ADDR_VAR 0 19
8452: PUSH
8453: LD_INT 1
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: LD_INT 3
8461: PUSH
8462: LD_INT 4
8464: PUSH
8465: LD_INT 5
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8475: LD_ADDR_OWVAR 37
8479: PUSH
8480: LD_VAR 0 19
8484: PUSH
8485: LD_INT 1
8487: PPUSH
8488: LD_VAR 0 19
8492: PPUSH
8493: CALL_OW 12
8497: ARRAY
8498: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8499: LD_VAR 0 10
8503: PUSH
8504: LD_VAR 0 14
8508: ARRAY
8509: PUSH
8510: LD_INT 4
8512: EQUAL
8513: PUSH
8514: LD_VAR 0 10
8518: PUSH
8519: LD_VAR 0 14
8523: ARRAY
8524: PUSH
8525: LD_INT 5
8527: EQUAL
8528: OR
8529: PUSH
8530: LD_VAR 0 10
8534: PUSH
8535: LD_VAR 0 14
8539: ARRAY
8540: PUSH
8541: LD_INT 9
8543: EQUAL
8544: OR
8545: PUSH
8546: LD_VAR 0 10
8550: PUSH
8551: LD_VAR 0 14
8555: ARRAY
8556: PUSH
8557: LD_INT 11
8559: EQUAL
8560: OR
8561: PUSH
8562: LD_VAR 0 10
8566: PUSH
8567: LD_VAR 0 14
8571: ARRAY
8572: PUSH
8573: LD_INT 7
8575: EQUAL
8576: OR
8577: IFFALSE 8626
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8579: LD_ADDR_VAR 0 19
8583: PUSH
8584: LD_INT 2
8586: PUSH
8587: LD_INT 3
8589: PUSH
8590: LD_INT 4
8592: PUSH
8593: LD_INT 5
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8602: LD_ADDR_OWVAR 37
8606: PUSH
8607: LD_VAR 0 19
8611: PUSH
8612: LD_INT 1
8614: PPUSH
8615: LD_VAR 0 19
8619: PPUSH
8620: CALL_OW 12
8624: ARRAY
8625: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8626: LD_VAR 0 10
8630: PUSH
8631: LD_VAR 0 14
8635: ARRAY
8636: PUSH
8637: LD_INT 8
8639: EQUAL
8640: PUSH
8641: LD_VAR 0 10
8645: PUSH
8646: LD_VAR 0 14
8650: ARRAY
8651: PUSH
8652: LD_INT 6
8654: EQUAL
8655: OR
8656: PUSH
8657: LD_VAR 0 10
8661: PUSH
8662: LD_VAR 0 14
8666: ARRAY
8667: PUSH
8668: LD_INT 10
8670: EQUAL
8671: OR
8672: IFFALSE 8713
// begin amChassisTab = [ 4 , 5 ] ;
8674: LD_ADDR_VAR 0 19
8678: PUSH
8679: LD_INT 4
8681: PUSH
8682: LD_INT 5
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8689: LD_ADDR_OWVAR 37
8693: PUSH
8694: LD_VAR 0 19
8698: PUSH
8699: LD_INT 1
8701: PPUSH
8702: LD_VAR 0 19
8706: PPUSH
8707: CALL_OW 12
8711: ARRAY
8712: ST_TO_ADDR
// end ; end ;
8713: GO 8413
8715: POP
8716: POP
// veh = CreateVehicle ;
8717: LD_ADDR_VAR 0 16
8721: PUSH
8722: CALL_OW 45
8726: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8727: LD_VAR 0 16
8731: PPUSH
8732: LD_VAR 0 1
8736: PPUSH
8737: LD_INT 0
8739: PPUSH
8740: CALL_OW 49
// if vc_control = 1 then
8744: LD_OWVAR 38
8748: PUSH
8749: LD_INT 1
8751: EQUAL
8752: IFFALSE 8809
// begin hc_gallery =  ;
8754: LD_ADDR_OWVAR 33
8758: PUSH
8759: LD_STRING 
8761: ST_TO_ADDR
// hc_name =  ;
8762: LD_ADDR_OWVAR 26
8766: PUSH
8767: LD_STRING 
8769: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8770: LD_INT 0
8772: PPUSH
8773: LD_INT 3
8775: PPUSH
8776: LD_VAR 0 4
8780: PPUSH
8781: CALL_OW 380
// un = CreateHuman ;
8785: LD_ADDR_VAR 0 15
8789: PUSH
8790: CALL_OW 44
8794: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8795: LD_VAR 0 15
8799: PPUSH
8800: LD_VAR 0 16
8804: PPUSH
8805: CALL_OW 52
// end ; i = i + 1 ;
8809: LD_ADDR_VAR 0 13
8813: PUSH
8814: LD_VAR 0 13
8818: PUSH
8819: LD_INT 1
8821: PLUS
8822: ST_TO_ADDR
// end ; if nation = 2 then
8823: LD_VAR 0 5
8827: PUSH
8828: LD_INT 2
8830: EQUAL
8831: IFFALSE 9333
// begin uc_side = side ;
8833: LD_ADDR_OWVAR 20
8837: PUSH
8838: LD_VAR 0 2
8842: ST_TO_ADDR
// uc_nation = nation ;
8843: LD_ADDR_OWVAR 21
8847: PUSH
8848: LD_VAR 0 5
8852: ST_TO_ADDR
// vc_engine = vehengine ;
8853: LD_ADDR_OWVAR 39
8857: PUSH
8858: LD_VAR 0 6
8862: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8863: LD_INT 22
8865: PUSH
8866: LD_VAR 0 2
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PUSH
8875: LD_INT 21
8877: PUSH
8878: LD_INT 2
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: PUSH
8885: LD_INT 33
8887: PUSH
8888: LD_INT 2
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PUSH
8895: LD_INT 50
8897: PUSH
8898: EMPTY
8899: LIST
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 69
8911: PUSH
8912: LD_INT 8
8914: LESSEQUAL
8915: IFFALSE 8943
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8917: LD_ADDR_OWVAR 38
8921: PUSH
8922: LD_VAR 0 7
8926: PUSH
8927: LD_INT 1
8929: PPUSH
8930: LD_VAR 0 7
8934: PPUSH
8935: CALL_OW 12
8939: ARRAY
8940: ST_TO_ADDR
8941: GO 8951
// vc_control = control_apeman ;
8943: LD_ADDR_OWVAR 38
8947: PUSH
8948: LD_INT 5
8950: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8951: LD_ADDR_OWVAR 40
8955: PUSH
8956: LD_VAR 0 9
8960: PUSH
8961: LD_INT 1
8963: PPUSH
8964: LD_VAR 0 9
8968: PPUSH
8969: CALL_OW 12
8973: ARRAY
8974: ST_TO_ADDR
// for j = 1 to ARWeapons do
8975: LD_ADDR_VAR 0 14
8979: PUSH
8980: DOUBLE
8981: LD_INT 1
8983: DEC
8984: ST_TO_ADDR
8985: LD_VAR 0 9
8989: PUSH
8990: FOR_TO
8991: IFFALSE 9225
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8993: LD_VAR 0 9
8997: PUSH
8998: LD_VAR 0 14
9002: ARRAY
9003: PUSH
9004: LD_INT 24
9006: EQUAL
9007: PUSH
9008: LD_VAR 0 9
9012: PUSH
9013: LD_VAR 0 14
9017: ARRAY
9018: PUSH
9019: LD_INT 22
9021: EQUAL
9022: OR
9023: PUSH
9024: LD_VAR 0 9
9028: PUSH
9029: LD_VAR 0 14
9033: ARRAY
9034: PUSH
9035: LD_INT 23
9037: EQUAL
9038: OR
9039: PUSH
9040: LD_VAR 0 9
9044: PUSH
9045: LD_VAR 0 14
9049: ARRAY
9050: PUSH
9051: LD_INT 30
9053: EQUAL
9054: OR
9055: IFFALSE 9104
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9057: LD_ADDR_VAR 0 18
9061: PUSH
9062: LD_INT 11
9064: PUSH
9065: LD_INT 12
9067: PUSH
9068: LD_INT 13
9070: PUSH
9071: LD_INT 14
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9080: LD_ADDR_OWVAR 37
9084: PUSH
9085: LD_VAR 0 18
9089: PUSH
9090: LD_INT 1
9092: PPUSH
9093: LD_VAR 0 18
9097: PPUSH
9098: CALL_OW 12
9102: ARRAY
9103: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9104: LD_VAR 0 9
9108: PUSH
9109: LD_VAR 0 14
9113: ARRAY
9114: PUSH
9115: LD_INT 29
9117: EQUAL
9118: PUSH
9119: LD_VAR 0 9
9123: PUSH
9124: LD_VAR 0 14
9128: ARRAY
9129: PUSH
9130: LD_INT 28
9132: EQUAL
9133: OR
9134: PUSH
9135: LD_VAR 0 9
9139: PUSH
9140: LD_VAR 0 14
9144: ARRAY
9145: PUSH
9146: LD_INT 27
9148: EQUAL
9149: OR
9150: PUSH
9151: LD_VAR 0 9
9155: PUSH
9156: LD_VAR 0 14
9160: ARRAY
9161: PUSH
9162: LD_INT 26
9164: EQUAL
9165: OR
9166: PUSH
9167: LD_VAR 0 9
9171: PUSH
9172: LD_VAR 0 14
9176: ARRAY
9177: PUSH
9178: LD_INT 25
9180: EQUAL
9181: OR
9182: IFFALSE 9223
// begin arChassisTab = [ 13 , 14 ] ;
9184: LD_ADDR_VAR 0 18
9188: PUSH
9189: LD_INT 13
9191: PUSH
9192: LD_INT 14
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9199: LD_ADDR_OWVAR 37
9203: PUSH
9204: LD_VAR 0 18
9208: PUSH
9209: LD_INT 1
9211: PPUSH
9212: LD_VAR 0 18
9216: PPUSH
9217: CALL_OW 12
9221: ARRAY
9222: ST_TO_ADDR
// end ; end ;
9223: GO 8990
9225: POP
9226: POP
// veh = CreateVehicle ;
9227: LD_ADDR_VAR 0 16
9231: PUSH
9232: CALL_OW 45
9236: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9237: LD_VAR 0 16
9241: PPUSH
9242: LD_VAR 0 1
9246: PPUSH
9247: LD_INT 0
9249: PPUSH
9250: CALL_OW 49
// if vc_control = 1 then
9254: LD_OWVAR 38
9258: PUSH
9259: LD_INT 1
9261: EQUAL
9262: IFFALSE 9319
// begin hc_gallery =  ;
9264: LD_ADDR_OWVAR 33
9268: PUSH
9269: LD_STRING 
9271: ST_TO_ADDR
// hc_name =  ;
9272: LD_ADDR_OWVAR 26
9276: PUSH
9277: LD_STRING 
9279: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9280: LD_INT 0
9282: PPUSH
9283: LD_INT 3
9285: PPUSH
9286: LD_VAR 0 4
9290: PPUSH
9291: CALL_OW 380
// un = CreateHuman ;
9295: LD_ADDR_VAR 0 15
9299: PUSH
9300: CALL_OW 44
9304: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9305: LD_VAR 0 15
9309: PPUSH
9310: LD_VAR 0 16
9314: PPUSH
9315: CALL_OW 52
// end ; i = i + 1 ;
9319: LD_ADDR_VAR 0 13
9323: PUSH
9324: LD_VAR 0 13
9328: PUSH
9329: LD_INT 1
9331: PLUS
9332: ST_TO_ADDR
// end ; if nation = 3 then
9333: LD_VAR 0 5
9337: PUSH
9338: LD_INT 3
9340: EQUAL
9341: IFFALSE 9747
// begin uc_side = side ;
9343: LD_ADDR_OWVAR 20
9347: PUSH
9348: LD_VAR 0 2
9352: ST_TO_ADDR
// uc_nation = nation ;
9353: LD_ADDR_OWVAR 21
9357: PUSH
9358: LD_VAR 0 5
9362: ST_TO_ADDR
// vc_engine = vehengine ;
9363: LD_ADDR_OWVAR 39
9367: PUSH
9368: LD_VAR 0 6
9372: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9373: LD_ADDR_OWVAR 38
9377: PUSH
9378: LD_VAR 0 7
9382: PUSH
9383: LD_INT 1
9385: PPUSH
9386: LD_VAR 0 7
9390: PPUSH
9391: CALL_OW 12
9395: ARRAY
9396: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9397: LD_ADDR_OWVAR 40
9401: PUSH
9402: LD_VAR 0 8
9406: PUSH
9407: LD_INT 1
9409: PPUSH
9410: LD_VAR 0 8
9414: PPUSH
9415: CALL_OW 12
9419: ARRAY
9420: ST_TO_ADDR
// for j = 1 to RuWeapons do
9421: LD_ADDR_VAR 0 14
9425: PUSH
9426: DOUBLE
9427: LD_INT 1
9429: DEC
9430: ST_TO_ADDR
9431: LD_VAR 0 8
9435: PUSH
9436: FOR_TO
9437: IFFALSE 9623
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9439: LD_VAR 0 8
9443: PUSH
9444: LD_VAR 0 14
9448: ARRAY
9449: PUSH
9450: LD_INT 42
9452: EQUAL
9453: PUSH
9454: LD_VAR 0 8
9458: PUSH
9459: LD_VAR 0 14
9463: ARRAY
9464: PUSH
9465: LD_INT 43
9467: EQUAL
9468: OR
9469: PUSH
9470: LD_VAR 0 8
9474: PUSH
9475: LD_VAR 0 14
9479: ARRAY
9480: PUSH
9481: LD_INT 44
9483: EQUAL
9484: OR
9485: PUSH
9486: LD_VAR 0 8
9490: PUSH
9491: LD_VAR 0 14
9495: ARRAY
9496: PUSH
9497: LD_INT 45
9499: EQUAL
9500: OR
9501: PUSH
9502: LD_VAR 0 8
9506: PUSH
9507: LD_VAR 0 14
9511: ARRAY
9512: PUSH
9513: LD_INT 49
9515: EQUAL
9516: OR
9517: IFFALSE 9554
// begin ruChassisTab = [ 24 ] ;
9519: LD_ADDR_VAR 0 17
9523: PUSH
9524: LD_INT 24
9526: PUSH
9527: EMPTY
9528: LIST
9529: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9530: LD_ADDR_OWVAR 37
9534: PUSH
9535: LD_VAR 0 17
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_VAR 0 17
9547: PPUSH
9548: CALL_OW 12
9552: ARRAY
9553: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9554: LD_VAR 0 8
9558: PUSH
9559: LD_VAR 0 14
9563: ARRAY
9564: PUSH
9565: LD_INT 46
9567: EQUAL
9568: PUSH
9569: LD_VAR 0 8
9573: PUSH
9574: LD_VAR 0 14
9578: ARRAY
9579: PUSH
9580: LD_INT 47
9582: EQUAL
9583: OR
9584: IFFALSE 9621
// begin ruChassisTab = [ 24 ] ;
9586: LD_ADDR_VAR 0 17
9590: PUSH
9591: LD_INT 24
9593: PUSH
9594: EMPTY
9595: LIST
9596: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9597: LD_ADDR_OWVAR 37
9601: PUSH
9602: LD_VAR 0 17
9606: PUSH
9607: LD_INT 1
9609: PPUSH
9610: LD_VAR 0 17
9614: PPUSH
9615: CALL_OW 12
9619: ARRAY
9620: ST_TO_ADDR
// end ; end ;
9621: GO 9436
9623: POP
9624: POP
// veh = CreateVehicle ;
9625: LD_ADDR_VAR 0 16
9629: PUSH
9630: CALL_OW 45
9634: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9635: LD_VAR 0 16
9639: PPUSH
9640: LD_VAR 0 1
9644: PPUSH
9645: LD_INT 0
9647: PPUSH
9648: CALL_OW 49
// if vc_control = 1 then
9652: LD_OWVAR 38
9656: PUSH
9657: LD_INT 1
9659: EQUAL
9660: IFFALSE 9747
// begin if uc_side = 8 then
9662: LD_OWVAR 20
9666: PUSH
9667: LD_INT 8
9669: EQUAL
9670: IFFALSE 9682
// uc_nation = 2 else
9672: LD_ADDR_OWVAR 21
9676: PUSH
9677: LD_INT 2
9679: ST_TO_ADDR
9680: GO 9692
// uc_nation = nation ;
9682: LD_ADDR_OWVAR 21
9686: PUSH
9687: LD_VAR 0 5
9691: ST_TO_ADDR
// hc_gallery =  ;
9692: LD_ADDR_OWVAR 33
9696: PUSH
9697: LD_STRING 
9699: ST_TO_ADDR
// hc_name =  ;
9700: LD_ADDR_OWVAR 26
9704: PUSH
9705: LD_STRING 
9707: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9708: LD_INT 0
9710: PPUSH
9711: LD_INT 3
9713: PPUSH
9714: LD_VAR 0 4
9718: PPUSH
9719: CALL_OW 380
// un = CreateHuman ;
9723: LD_ADDR_VAR 0 15
9727: PUSH
9728: CALL_OW 44
9732: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9733: LD_VAR 0 15
9737: PPUSH
9738: LD_VAR 0 16
9742: PPUSH
9743: CALL_OW 52
// end ; end ; end ;
9747: GO 8324
9749: POP
9750: POP
// repeat wait ( 0 0$1 ) ;
9751: LD_INT 35
9753: PPUSH
9754: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9758: LD_ADDR_VAR 0 20
9762: PUSH
9763: LD_INT 22
9765: PUSH
9766: LD_VAR 0 2
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: LD_INT 21
9777: PUSH
9778: LD_INT 2
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 24
9787: PUSH
9788: LD_INT 250
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 2
9797: PUSH
9798: LD_INT 34
9800: PUSH
9801: LD_INT 25
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 34
9810: PUSH
9811: LD_INT 26
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PUSH
9818: LD_INT 34
9820: PUSH
9821: LD_INT 27
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 34
9830: PUSH
9831: LD_INT 28
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 34
9840: PUSH
9841: LD_INT 29
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 34
9850: PUSH
9851: LD_INT 46
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 34
9860: PUSH
9861: LD_INT 44
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: LD_INT 34
9870: PUSH
9871: LD_INT 45
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PUSH
9878: LD_INT 34
9880: PUSH
9881: LD_INT 47
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PPUSH
9906: CALL_OW 69
9910: ST_TO_ADDR
// if vehicleOK_list > 0 then
9911: LD_VAR 0 20
9915: PUSH
9916: LD_INT 0
9918: GREATER
9919: IFFALSE 10138
// begin for i in vehicleOK_list do
9921: LD_ADDR_VAR 0 13
9925: PUSH
9926: LD_VAR 0 20
9930: PUSH
9931: FOR_IN
9932: IFFALSE 10136
// begin if GetSide ( i ) <> side then
9934: LD_VAR 0 13
9938: PPUSH
9939: CALL_OW 255
9943: PUSH
9944: LD_VAR 0 2
9948: NONEQUAL
9949: IFFALSE 9962
// begin ComStop ( i ) ;
9951: LD_VAR 0 13
9955: PPUSH
9956: CALL_OW 141
// continue ;
9960: GO 9931
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9962: LD_ADDR_VAR 0 21
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_VAR 0 11
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PPUSH
9979: CALL_OW 69
9983: PPUSH
9984: LD_VAR 0 13
9988: PPUSH
9989: CALL_OW 74
9993: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9994: LD_ADDR_VAR 0 22
9998: PUSH
9999: LD_INT 22
10001: PUSH
10002: LD_VAR 0 11
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: LD_INT 2
10013: PUSH
10014: LD_INT 59
10016: PUSH
10017: EMPTY
10018: LIST
10019: PUSH
10020: LD_INT 21
10022: PUSH
10023: LD_INT 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 21
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: EMPTY
10051: LIST
10052: PPUSH
10053: CALL_OW 69
10057: PPUSH
10058: LD_VAR 0 13
10062: PPUSH
10063: CALL_OW 74
10067: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10068: LD_VAR 0 13
10072: PPUSH
10073: LD_VAR 0 21
10077: PPUSH
10078: CALL_OW 296
10082: PUSH
10083: LD_INT 8
10085: PLUS
10086: PUSH
10087: LD_VAR 0 13
10091: PPUSH
10092: LD_VAR 0 22
10096: PPUSH
10097: CALL_OW 296
10101: LESS
10102: IFFALSE 10120
// begin ComAttackUnit ( i , target1 ) ;
10104: LD_VAR 0 13
10108: PPUSH
10109: LD_VAR 0 21
10113: PPUSH
10114: CALL_OW 115
// end else
10118: GO 10134
// begin ComAttackUnit ( i , target2 ) ;
10120: LD_VAR 0 13
10124: PPUSH
10125: LD_VAR 0 22
10129: PPUSH
10130: CALL_OW 115
// end ; end ;
10134: GO 9931
10136: POP
10137: POP
// end ; until vehicleOK_list = 0 ;
10138: LD_VAR 0 20
10142: PUSH
10143: LD_INT 0
10145: EQUAL
10146: IFFALSE 9751
// end ;
10148: LD_VAR 0 12
10152: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
10153: LD_INT 0
10155: PPUSH
10156: PPUSH
10157: PPUSH
10158: PPUSH
10159: PPUSH
10160: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
10161: LD_ADDR_VAR 0 6
10165: PUSH
10166: LD_INT 22
10168: PUSH
10169: LD_VAR 0 1
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 34
10180: PUSH
10181: LD_INT 29
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PPUSH
10192: CALL_OW 69
10196: ST_TO_ADDR
// if veh_list = 0 then
10197: LD_VAR 0 6
10201: PUSH
10202: LD_INT 0
10204: EQUAL
10205: IFFALSE 10209
// exit ;
10207: GO 10414
// if veh_list > 0 then
10209: LD_VAR 0 6
10213: PUSH
10214: LD_INT 0
10216: GREATER
10217: IFFALSE 10414
// begin for i in veh_List do
10219: LD_ADDR_VAR 0 4
10223: PUSH
10224: LD_VAR 0 6
10228: PUSH
10229: FOR_IN
10230: IFFALSE 10412
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10232: LD_ADDR_VAR 0 7
10236: PUSH
10237: LD_INT 22
10239: PUSH
10240: LD_VAR 0 2
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 24
10251: PUSH
10252: LD_INT 250
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 2
10261: PUSH
10262: LD_INT 59
10264: PUSH
10265: EMPTY
10266: LIST
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 1
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 2
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: EMPTY
10300: LIST
10301: PPUSH
10302: CALL_OW 69
10306: PPUSH
10307: LD_VAR 0 4
10311: PPUSH
10312: CALL_OW 74
10316: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10317: LD_VAR 0 4
10321: PPUSH
10322: LD_VAR 0 7
10326: PPUSH
10327: CALL_OW 115
// if not HasTask ( i ) then
10331: LD_VAR 0 4
10335: PPUSH
10336: CALL_OW 314
10340: NOT
10341: IFFALSE 10410
// begin wait ( 0 0$0.1 ) ;
10343: LD_INT 4
10345: PPUSH
10346: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10350: LD_ADDR_VAR 0 8
10354: PUSH
10355: LD_INT 22
10357: PUSH
10358: LD_VAR 0 2
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 24
10369: PUSH
10370: LD_INT 250
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 69
10385: PPUSH
10386: LD_VAR 0 4
10390: PPUSH
10391: CALL_OW 74
10395: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10396: LD_VAR 0 4
10400: PPUSH
10401: LD_VAR 0 8
10405: PPUSH
10406: CALL_OW 115
// end ; end ;
10410: GO 10229
10412: POP
10413: POP
// end ; end ; end_of_file
10414: LD_VAR 0 3
10418: RET
// every 0 0$1 do
10419: GO 10421
10421: DISABLE
// begin enable ;
10422: ENABLE
// IntBazooka ( 7 , 1 ) ;
10423: LD_INT 7
10425: PPUSH
10426: LD_INT 1
10428: PPUSH
10429: CALL 6859 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10433: LD_INT 8
10435: PPUSH
10436: LD_INT 1
10438: PPUSH
10439: CALL 10153 0 2
// end ;
10443: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10444: LD_INT 22
10446: PUSH
10447: LD_INT 3
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 21
10456: PUSH
10457: LD_INT 2
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 50
10466: PUSH
10467: EMPTY
10468: LIST
10469: PUSH
10470: LD_INT 2
10472: PUSH
10473: LD_INT 34
10475: PUSH
10476: LD_INT 46
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 34
10485: PUSH
10486: LD_INT 44
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 34
10495: PUSH
10496: LD_INT 45
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 34
10505: PUSH
10506: LD_INT 47
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: PPUSH
10526: CALL_OW 69
10530: PUSH
10531: LD_INT 0
10533: GREATER
10534: PUSH
10535: LD_INT 22
10537: PUSH
10538: LD_INT 3
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 21
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 50
10557: PUSH
10558: EMPTY
10559: LIST
10560: PUSH
10561: LD_INT 34
10563: PUSH
10564: LD_INT 49
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: PPUSH
10577: CALL_OW 69
10581: PUSH
10582: LD_INT 0
10584: GREATER
10585: AND
10586: IFFALSE 10758
10588: GO 10590
10590: DISABLE
10591: LD_INT 0
10593: PPUSH
10594: PPUSH
// begin enable ;
10595: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10596: LD_ADDR_VAR 0 1
10600: PUSH
10601: LD_INT 22
10603: PUSH
10604: LD_INT 3
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 21
10613: PUSH
10614: LD_INT 2
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 50
10623: PUSH
10624: EMPTY
10625: LIST
10626: PUSH
10627: LD_INT 2
10629: PUSH
10630: LD_INT 34
10632: PUSH
10633: LD_INT 46
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PUSH
10640: LD_INT 34
10642: PUSH
10643: LD_INT 44
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: LD_INT 34
10652: PUSH
10653: LD_INT 45
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 34
10662: PUSH
10663: LD_INT 47
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: PPUSH
10683: CALL_OW 69
10687: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10688: LD_ADDR_VAR 0 2
10692: PUSH
10693: LD_INT 22
10695: PUSH
10696: LD_INT 3
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 21
10705: PUSH
10706: LD_INT 2
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: LD_INT 50
10715: PUSH
10716: EMPTY
10717: LIST
10718: PUSH
10719: LD_INT 34
10721: PUSH
10722: LD_INT 49
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: PPUSH
10735: CALL_OW 69
10739: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10740: LD_VAR 0 2
10744: PPUSH
10745: LD_VAR 0 1
10749: PUSH
10750: LD_INT 1
10752: ARRAY
10753: PPUSH
10754: CALL_OW 112
// end ; end_of_file
10758: PPOPN 2
10760: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10761: LD_EXP 38
10765: PUSH
10766: LD_INT 1
10768: EQUAL
10769: IFFALSE 11671
10771: GO 10773
10773: DISABLE
10774: LD_INT 0
10776: PPUSH
10777: PPUSH
10778: PPUSH
// begin m1 := false ;
10779: LD_ADDR_VAR 0 1
10783: PUSH
10784: LD_INT 0
10786: ST_TO_ADDR
// m2 := false ;
10787: LD_ADDR_VAR 0 2
10791: PUSH
10792: LD_INT 0
10794: ST_TO_ADDR
// m3 := false ;
10795: LD_ADDR_VAR 0 3
10799: PUSH
10800: LD_INT 0
10802: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10803: LD_EXP 1
10807: PPUSH
10808: LD_STRING D9b-JMM-1
10810: PPUSH
10811: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10815: LD_EXP 15
10819: PPUSH
10820: LD_STRING D9b-Pow-1
10822: PPUSH
10823: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10827: LD_EXP 1
10831: PPUSH
10832: LD_STRING D9b-JMM-2
10834: PPUSH
10835: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10839: LD_EXP 15
10843: PPUSH
10844: LD_STRING D9b-Pow-2
10846: PPUSH
10847: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10851: LD_EXP 1
10855: PPUSH
10856: LD_STRING D9b-JMM-3
10858: PPUSH
10859: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10863: LD_EXP 15
10867: PPUSH
10868: LD_STRING D9b-Pow-3
10870: PPUSH
10871: CALL_OW 94
// if tick <= 60 60$00 then
10875: LD_OWVAR 1
10879: PUSH
10880: LD_INT 126000
10882: LESSEQUAL
10883: IFFALSE 10892
// SetAchievement ( ACH_ASPEED_13 ) ;
10885: LD_STRING ACH_ASPEED_13
10887: PPUSH
10888: CALL_OW 543
// if burlakStatus = 1 then
10892: LD_EXP 28
10896: PUSH
10897: LD_INT 1
10899: EQUAL
10900: IFFALSE 10922
// begin m1 := true ;
10902: LD_ADDR_VAR 0 1
10906: PUSH
10907: LD_INT 1
10909: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10910: LD_STRING Burlak
10912: PPUSH
10913: LD_INT 1
10915: PPUSH
10916: CALL_OW 101
// end else
10920: GO 10933
// begin AddMedal ( Burlak , - 1 ) ;
10922: LD_STRING Burlak
10924: PPUSH
10925: LD_INT 1
10927: NEG
10928: PPUSH
10929: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10933: LD_EXP 2
10937: PPUSH
10938: CALL_OW 302
10942: IFFALSE 10964
// begin m2 := true ;
10944: LD_ADDR_VAR 0 2
10948: PUSH
10949: LD_INT 1
10951: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10952: LD_STRING Stevens
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 101
// end else
10962: GO 10975
// begin AddMedal ( Stevens , - 1 ) ;
10964: LD_STRING Stevens
10966: PPUSH
10967: LD_INT 1
10969: NEG
10970: PPUSH
10971: CALL_OW 101
// end ; if radarOnSpot = 1 then
10975: LD_EXP 30
10979: PUSH
10980: LD_INT 1
10982: EQUAL
10983: IFFALSE 11005
// begin m3 := true ;
10985: LD_ADDR_VAR 0 3
10989: PUSH
10990: LD_INT 1
10992: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10993: LD_STRING Observation
10995: PPUSH
10996: LD_INT 1
10998: PPUSH
10999: CALL_OW 101
// end else
11003: GO 11016
// begin AddMedal ( Observation , - 1 ) ;
11005: LD_STRING Observation
11007: PPUSH
11008: LD_INT 1
11010: NEG
11011: PPUSH
11012: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
11016: LD_VAR 0 1
11020: PUSH
11021: LD_VAR 0 2
11025: AND
11026: PUSH
11027: LD_VAR 0 3
11031: AND
11032: PUSH
11033: LD_OWVAR 67
11037: PUSH
11038: LD_INT 3
11040: EQUAL
11041: AND
11042: IFFALSE 11054
// SetAchievementEX ( ACH_AMER , 13 ) ;
11044: LD_STRING ACH_AMER
11046: PPUSH
11047: LD_INT 13
11049: PPUSH
11050: CALL_OW 564
// GiveMedals ( MAIN ) ;
11054: LD_STRING MAIN
11056: PPUSH
11057: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
11061: LD_EXP 28
11065: PPUSH
11066: LD_STRING 13_BurlakStatus_1
11068: PPUSH
11069: CALL_OW 39
// if IsLive ( Stevens ) then
11073: LD_EXP 2
11077: PPUSH
11078: CALL_OW 300
11082: IFFALSE 11096
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
11084: LD_INT 1
11086: PPUSH
11087: LD_STRING 13_StevensStatus_1
11089: PPUSH
11090: CALL_OW 39
11094: GO 11106
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
11096: LD_INT 0
11098: PPUSH
11099: LD_STRING 13_StevensStatus_1
11101: PPUSH
11102: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
11106: LD_INT 22
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 21
11118: PUSH
11119: LD_INT 1
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 2
11128: PUSH
11129: LD_INT 25
11131: PUSH
11132: LD_INT 1
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 25
11141: PUSH
11142: LD_INT 2
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 25
11151: PUSH
11152: LD_INT 3
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 25
11161: PUSH
11162: LD_INT 4
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 25
11171: PUSH
11172: LD_INT 5
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 25
11181: PUSH
11182: LD_INT 8
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: PPUSH
11203: CALL_OW 69
11207: PPUSH
11208: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11212: LD_EXP 1
11216: PPUSH
11217: LD_EXP 34
11221: PUSH
11222: LD_STRING JMM
11224: STR
11225: PPUSH
11226: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11230: LD_EXP 8
11234: PPUSH
11235: LD_EXP 34
11239: PUSH
11240: LD_STRING Brown
11242: STR
11243: PPUSH
11244: CALL 7167 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11248: LD_EXP 4
11252: PPUSH
11253: LD_EXP 34
11257: PUSH
11258: LD_STRING Donaldson
11260: STR
11261: PPUSH
11262: CALL 7167 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11266: LD_EXP 5
11270: PPUSH
11271: LD_EXP 34
11275: PUSH
11276: LD_STRING Bobby
11278: STR
11279: PPUSH
11280: CALL 7167 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11284: LD_EXP 6
11288: PPUSH
11289: LD_EXP 34
11293: PUSH
11294: LD_STRING Cyrus
11296: STR
11297: PPUSH
11298: CALL 7167 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11302: LD_EXP 3
11306: PPUSH
11307: LD_EXP 34
11311: PUSH
11312: LD_STRING Lisa
11314: STR
11315: PPUSH
11316: CALL 7167 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11320: LD_EXP 13
11324: PPUSH
11325: LD_EXP 34
11329: PUSH
11330: LD_STRING Frank
11332: STR
11333: PPUSH
11334: CALL 7167 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11338: LD_EXP 14
11342: PPUSH
11343: LD_EXP 34
11347: PUSH
11348: LD_STRING Kikuchi
11350: STR
11351: PPUSH
11352: CALL 7167 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11356: LD_EXP 10
11360: PPUSH
11361: LD_EXP 34
11365: PUSH
11366: LD_STRING Houten
11368: STR
11369: PPUSH
11370: CALL 7167 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11374: LD_EXP 12
11378: PPUSH
11379: LD_EXP 34
11383: PUSH
11384: LD_STRING Gary
11386: STR
11387: PPUSH
11388: CALL 7167 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11392: LD_EXP 11
11396: PPUSH
11397: LD_EXP 34
11401: PUSH
11402: LD_STRING Cornell
11404: STR
11405: PPUSH
11406: CALL 7167 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11410: LD_EXP 7
11414: PPUSH
11415: LD_EXP 34
11419: PUSH
11420: LD_STRING Denis
11422: STR
11423: PPUSH
11424: CALL 7167 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11428: LD_EXP 9
11432: PPUSH
11433: LD_EXP 34
11437: PUSH
11438: LD_STRING Gladstone
11440: STR
11441: PPUSH
11442: CALL 7167 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11446: LD_EXP 2
11450: PPUSH
11451: LD_EXP 34
11455: PUSH
11456: LD_STRING Stevens
11458: STR
11459: PPUSH
11460: CALL 7167 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11464: LD_INT 50
11466: PUSH
11467: EMPTY
11468: LIST
11469: PUSH
11470: LD_INT 22
11472: PUSH
11473: LD_INT 1
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 21
11482: PUSH
11483: LD_INT 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 2
11492: PUSH
11493: LD_INT 25
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 25
11505: PUSH
11506: LD_INT 2
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 25
11515: PUSH
11516: LD_INT 3
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 25
11525: PUSH
11526: LD_INT 4
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 25
11535: PUSH
11536: LD_INT 5
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 25
11545: PUSH
11546: LD_INT 8
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: PPUSH
11568: CALL_OW 69
11572: PUSH
11573: LD_EXP 1
11577: PUSH
11578: LD_EXP 8
11582: PUSH
11583: LD_EXP 4
11587: PUSH
11588: LD_EXP 5
11592: PUSH
11593: LD_EXP 6
11597: PUSH
11598: LD_EXP 3
11602: PUSH
11603: LD_EXP 13
11607: PUSH
11608: LD_EXP 9
11612: PUSH
11613: LD_EXP 14
11617: PUSH
11618: LD_EXP 7
11622: PUSH
11623: LD_EXP 10
11627: PUSH
11628: LD_EXP 12
11632: PUSH
11633: LD_EXP 11
11637: PUSH
11638: LD_EXP 2
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: DIFF
11659: PPUSH
11660: LD_STRING 13_other_survivors
11662: PPUSH
11663: CALL_OW 38
// YouWin ;
11667: CALL_OW 103
// end ; end_of_file
11671: PPOPN 3
11673: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11674: LD_EXP 32
11678: PUSH
11679: LD_INT 2
11681: EQUAL
11682: IFFALSE 11818
11684: GO 11686
11686: DISABLE
11687: LD_INT 0
11689: PPUSH
11690: PPUSH
11691: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11692: LD_ADDR_VAR 0 2
11696: PUSH
11697: LD_INT 22
11699: PUSH
11700: LD_INT 1
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 21
11709: PUSH
11710: LD_INT 3
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 2
11719: PUSH
11720: LD_INT 30
11722: PUSH
11723: LD_INT 0
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 30
11732: PUSH
11733: LD_INT 1
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: PPUSH
11750: CALL_OW 69
11754: ST_TO_ADDR
// for i in tmp do
11755: LD_ADDR_VAR 0 1
11759: PUSH
11760: LD_VAR 0 2
11764: PUSH
11765: FOR_IN
11766: IFFALSE 11799
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11768: LD_ADDR_VAR 0 3
11772: PUSH
11773: LD_VAR 0 3
11777: PUSH
11778: LD_VAR 0 1
11782: PPUSH
11783: CALL_OW 274
11787: PPUSH
11788: LD_INT 3
11790: PPUSH
11791: CALL_OW 275
11795: PLUS
11796: ST_TO_ADDR
11797: GO 11765
11799: POP
11800: POP
// if yourSiberite < 79 then
11801: LD_VAR 0 3
11805: PUSH
11806: LD_INT 79
11808: LESS
11809: IFFALSE 11818
// YouLost ( siberite ) ;
11811: LD_STRING siberite
11813: PPUSH
11814: CALL_OW 104
// end ; end_of_file
11818: PPOPN 3
11820: END
// every 8 8$0 + 7 7$0 do
11821: GO 11823
11823: DISABLE
// begin enable ;
11824: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11825: LD_INT 8
11827: PPUSH
11828: LD_INT 2
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: LD_INT 3
11836: PPUSH
11837: CALL_OW 12
11841: PPUSH
11842: LD_INT 0
11844: PPUSH
11845: LD_INT 0
11847: PPUSH
11848: LD_INT 2
11850: PUSH
11851: LD_INT 3
11853: PUSH
11854: LD_INT 4
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: LIST
11861: PUSH
11862: LD_OWVAR 67
11866: ARRAY
11867: PPUSH
11868: LD_INT 0
11870: PPUSH
11871: LD_INT 10
11873: PPUSH
11874: LD_INT 8
11876: PUSH
11877: LD_INT 9
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: LD_INT 1
11886: PPUSH
11887: LD_INT 2
11889: PPUSH
11890: CALL_OW 12
11894: ARRAY
11895: PPUSH
11896: LD_INT 12
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: CALL 7207 0 11
// end ;
11906: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11907: GO 11909
11909: DISABLE
11910: LD_INT 0
11912: PPUSH
11913: PPUSH
11914: PPUSH
// begin enable ;
11915: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11916: LD_ADDR_EXP 33
11920: PUSH
11921: LD_EXP 33
11925: PUSH
11926: LD_INT 1
11928: PLUS
11929: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11930: LD_INT 22
11932: PUSH
11933: LD_INT 8
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 3
11942: PUSH
11943: LD_INT 58
11945: PUSH
11946: EMPTY
11947: LIST
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 34
11955: PUSH
11956: LD_INT 31
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: LIST
11967: PPUSH
11968: CALL_OW 69
11972: PUSH
11973: LD_INT 2
11975: LESS
11976: IFFALSE 12216
// begin uc_side := 8 ;
11978: LD_ADDR_OWVAR 20
11982: PUSH
11983: LD_INT 8
11985: ST_TO_ADDR
// uc_nation := 2 ;
11986: LD_ADDR_OWVAR 21
11990: PUSH
11991: LD_INT 2
11993: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11994: LD_INT 14
11996: PPUSH
11997: LD_INT 3
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: LD_INT 31
12005: PPUSH
12006: LD_INT 100
12008: PPUSH
12009: CALL 5844 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12013: LD_ADDR_VAR 0 1
12017: PUSH
12018: DOUBLE
12019: LD_INT 22
12021: PUSH
12022: LD_INT 8
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 3
12031: PUSH
12032: LD_INT 58
12034: PUSH
12035: EMPTY
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 34
12044: PUSH
12045: LD_INT 31
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: PPUSH
12057: CALL_OW 69
12061: PUSH
12062: LD_INT 1
12064: PLUS
12065: DEC
12066: ST_TO_ADDR
12067: LD_INT 2
12069: PUSH
12070: FOR_TO
12071: IFFALSE 12214
// begin veh := CreateVehicle ;
12073: LD_ADDR_VAR 0 2
12077: PUSH
12078: CALL_OW 45
12082: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12083: LD_VAR 0 2
12087: PPUSH
12088: LD_INT 5
12090: PPUSH
12091: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
12095: LD_ADDR_VAR 0 3
12099: PUSH
12100: LD_INT 181
12102: PUSH
12103: LD_INT 105
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 137
12112: PUSH
12113: LD_INT 6
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_VAR 0 1
12128: PUSH
12129: LD_INT 2
12131: MOD
12132: PUSH
12133: LD_INT 1
12135: PLUS
12136: ARRAY
12137: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
12138: LD_VAR 0 2
12142: PPUSH
12143: LD_VAR 0 3
12147: PUSH
12148: LD_INT 1
12150: ARRAY
12151: PPUSH
12152: LD_VAR 0 3
12156: PUSH
12157: LD_INT 2
12159: ARRAY
12160: PPUSH
12161: LD_INT 12
12163: PPUSH
12164: LD_INT 0
12166: PPUSH
12167: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 ] [ Difficulty ] ) ;
12171: LD_INT 0
12173: PPUSH
12174: LD_INT 7
12176: PUSH
12177: LD_INT 9
12179: PUSH
12180: LD_INT 10
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: PUSH
12188: LD_OWVAR 67
12192: ARRAY
12193: PPUSH
12194: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12198: CALL_OW 44
12202: PPUSH
12203: LD_VAR 0 2
12207: PPUSH
12208: CALL_OW 52
// end ;
12212: GO 12070
12214: POP
12215: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
12216: LD_INT 8
12218: PUSH
12219: LD_INT 9
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 1
12228: PPUSH
12229: LD_INT 2
12231: PPUSH
12232: CALL_OW 12
12236: ARRAY
12237: PPUSH
12238: LD_INT 8
12240: PPUSH
12241: LD_INT 4
12243: PPUSH
12244: LD_INT 6
12246: PPUSH
12247: CALL_OW 12
12251: PUSH
12252: LD_INT 6
12254: PPUSH
12255: LD_INT 9
12257: PPUSH
12258: CALL_OW 12
12262: PUSH
12263: LD_INT 7
12265: PPUSH
12266: LD_INT 10
12268: PPUSH
12269: CALL_OW 12
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_OWVAR 67
12283: ARRAY
12284: PPUSH
12285: LD_INT 10
12287: PPUSH
12288: LD_INT 2
12290: PPUSH
12291: LD_INT 3
12293: PPUSH
12294: LD_INT 5
12296: PUSH
12297: LD_INT 2
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PPUSH
12304: EMPTY
12305: PPUSH
12306: LD_INT 25
12308: PUSH
12309: LD_INT 26
12311: PUSH
12312: LD_INT 27
12314: PUSH
12315: LD_INT 28
12317: PUSH
12318: LD_INT 29
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PPUSH
12328: EMPTY
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: CALL 8275 0 11
// end ;
12337: PPOPN 3
12339: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
12340: LD_EXP 33
12344: PUSH
12345: LD_INT 4
12347: GREATEREQUAL
12348: IFFALSE 12688
12350: GO 12352
12352: DISABLE
12353: LD_INT 0
12355: PPUSH
12356: PPUSH
// begin enable ;
12357: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
12358: LD_ADDR_EXP 33
12362: PUSH
12363: LD_EXP 33
12367: PUSH
12368: LD_INT 1
12370: PLUS
12371: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12372: LD_INT 22
12374: PUSH
12375: LD_INT 8
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 3
12384: PUSH
12385: LD_INT 58
12387: PUSH
12388: EMPTY
12389: LIST
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 34
12397: PUSH
12398: LD_INT 31
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: PPUSH
12410: CALL_OW 69
12414: PUSH
12415: LD_INT 2
12417: LESS
12418: IFFALSE 12603
// begin uc_side := 8 ;
12420: LD_ADDR_OWVAR 20
12424: PUSH
12425: LD_INT 8
12427: ST_TO_ADDR
// uc_nation := 2 ;
12428: LD_ADDR_OWVAR 21
12432: PUSH
12433: LD_INT 2
12435: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12436: LD_INT 14
12438: PPUSH
12439: LD_INT 3
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: LD_INT 31
12447: PPUSH
12448: LD_INT 100
12450: PPUSH
12451: CALL 5844 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12455: LD_ADDR_VAR 0 1
12459: PUSH
12460: DOUBLE
12461: LD_INT 22
12463: PUSH
12464: LD_INT 8
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: LD_INT 58
12476: PUSH
12477: EMPTY
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 34
12486: PUSH
12487: LD_INT 31
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: PPUSH
12499: CALL_OW 69
12503: PUSH
12504: LD_INT 1
12506: PLUS
12507: DEC
12508: ST_TO_ADDR
12509: LD_INT 2
12511: PUSH
12512: FOR_TO
12513: IFFALSE 12601
// begin veh := CreateVehicle ;
12515: LD_ADDR_VAR 0 2
12519: PUSH
12520: CALL_OW 45
12524: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12525: LD_VAR 0 2
12529: PPUSH
12530: LD_INT 5
12532: PPUSH
12533: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12537: LD_VAR 0 2
12541: PPUSH
12542: LD_INT 181
12544: PPUSH
12545: LD_INT 105
12547: PPUSH
12548: LD_INT 12
12550: PPUSH
12551: LD_INT 0
12553: PPUSH
12554: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12558: LD_INT 0
12560: PPUSH
12561: LD_INT 8
12563: PUSH
12564: LD_INT 9
12566: PUSH
12567: LD_INT 10
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: LIST
12574: PUSH
12575: LD_OWVAR 67
12579: ARRAY
12580: PPUSH
12581: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12585: CALL_OW 44
12589: PPUSH
12590: LD_VAR 0 2
12594: PPUSH
12595: CALL_OW 52
// end ;
12599: GO 12512
12601: POP
12602: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12603: LD_INT 8
12605: PUSH
12606: LD_INT 9
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 1
12615: PPUSH
12616: LD_INT 2
12618: PPUSH
12619: CALL_OW 12
12623: ARRAY
12624: PPUSH
12625: LD_INT 8
12627: PPUSH
12628: LD_INT 1
12630: PUSH
12631: LD_INT 2
12633: PUSH
12634: LD_INT 3
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_OWVAR 67
12646: ARRAY
12647: PPUSH
12648: LD_INT 10
12650: PPUSH
12651: LD_INT 3
12653: PPUSH
12654: LD_INT 3
12656: PPUSH
12657: LD_INT 1
12659: PUSH
12660: LD_INT 1
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PPUSH
12667: LD_INT 47
12669: PUSH
12670: LD_INT 47
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PPUSH
12677: EMPTY
12678: PPUSH
12679: EMPTY
12680: PPUSH
12681: LD_INT 1
12683: PPUSH
12684: CALL 8275 0 11
// end ;
12688: PPOPN 2
12690: END
// every 1 1$0 trigger eventVar2 = 1 do var i , veh ;
12691: LD_EXP 36
12695: PUSH
12696: LD_INT 1
12698: EQUAL
12699: IFFALSE 13036
12701: GO 12703
12703: DISABLE
12704: LD_INT 0
12706: PPUSH
12707: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12708: LD_INT 22
12710: PUSH
12711: LD_INT 8
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 3
12720: PUSH
12721: LD_INT 58
12723: PUSH
12724: EMPTY
12725: LIST
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 34
12733: PUSH
12734: LD_INT 31
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: LIST
12745: PPUSH
12746: CALL_OW 69
12750: PUSH
12751: LD_INT 2
12753: LESS
12754: IFFALSE 12939
// begin uc_side := 8 ;
12756: LD_ADDR_OWVAR 20
12760: PUSH
12761: LD_INT 8
12763: ST_TO_ADDR
// uc_nation := 2 ;
12764: LD_ADDR_OWVAR 21
12768: PUSH
12769: LD_INT 2
12771: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12772: LD_INT 14
12774: PPUSH
12775: LD_INT 3
12777: PPUSH
12778: LD_INT 1
12780: PPUSH
12781: LD_INT 31
12783: PPUSH
12784: LD_INT 100
12786: PPUSH
12787: CALL 5844 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12791: LD_ADDR_VAR 0 1
12795: PUSH
12796: DOUBLE
12797: LD_INT 22
12799: PUSH
12800: LD_INT 8
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: LD_INT 3
12809: PUSH
12810: LD_INT 58
12812: PUSH
12813: EMPTY
12814: LIST
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 34
12822: PUSH
12823: LD_INT 31
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: LIST
12834: PPUSH
12835: CALL_OW 69
12839: PUSH
12840: LD_INT 1
12842: PLUS
12843: DEC
12844: ST_TO_ADDR
12845: LD_INT 2
12847: PUSH
12848: FOR_TO
12849: IFFALSE 12937
// begin veh := CreateVehicle ;
12851: LD_ADDR_VAR 0 2
12855: PUSH
12856: CALL_OW 45
12860: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12861: LD_VAR 0 2
12865: PPUSH
12866: LD_INT 5
12868: PPUSH
12869: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12873: LD_VAR 0 2
12877: PPUSH
12878: LD_INT 181
12880: PPUSH
12881: LD_INT 105
12883: PPUSH
12884: LD_INT 12
12886: PPUSH
12887: LD_INT 0
12889: PPUSH
12890: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12894: LD_INT 0
12896: PPUSH
12897: LD_INT 8
12899: PUSH
12900: LD_INT 9
12902: PUSH
12903: LD_INT 10
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: LIST
12910: PUSH
12911: LD_OWVAR 67
12915: ARRAY
12916: PPUSH
12917: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12921: CALL_OW 44
12925: PPUSH
12926: LD_VAR 0 2
12930: PPUSH
12931: CALL_OW 52
// end ;
12935: GO 12848
12937: POP
12938: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12939: LD_INT 8
12941: PUSH
12942: LD_INT 9
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 1
12951: PPUSH
12952: LD_INT 2
12954: PPUSH
12955: CALL_OW 12
12959: ARRAY
12960: PPUSH
12961: LD_INT 3
12963: PPUSH
12964: LD_INT 5
12966: PUSH
12967: LD_INT 7
12969: PUSH
12970: LD_INT 8
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: LIST
12977: PUSH
12978: LD_OWVAR 67
12982: ARRAY
12983: PPUSH
12984: LD_INT 10
12986: PPUSH
12987: LD_INT 3
12989: PPUSH
12990: LD_INT 3
12992: PPUSH
12993: LD_INT 3
12995: PUSH
12996: LD_INT 3
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PPUSH
13003: LD_INT 46
13005: PUSH
13006: LD_INT 44
13008: PUSH
13009: LD_INT 45
13011: PUSH
13012: LD_INT 47
13014: PUSH
13015: LD_INT 49
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: PPUSH
13025: EMPTY
13026: PPUSH
13027: EMPTY
13028: PPUSH
13029: LD_INT 1
13031: PPUSH
13032: CALL 8275 0 11
// end ; end_of_file
13036: PPOPN 2
13038: END
// every 1 1$0 do
13039: GO 13041
13041: DISABLE
// begin enable ;
13042: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
13043: LD_INT 3
13045: PPUSH
13046: LD_INT 5
13048: PPUSH
13049: CALL_OW 12
13053: PPUSH
13054: LD_INT 13
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 55
// end ; end_of_file
13064: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
13065: GO 13067
13067: DISABLE
// begin ru_radar := 98 ;
13068: LD_ADDR_EXP 43
13072: PUSH
13073: LD_INT 98
13075: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13076: LD_ADDR_EXP 44
13080: PUSH
13081: LD_INT 89
13083: ST_TO_ADDR
// us_hack := 99 ;
13084: LD_ADDR_EXP 45
13088: PUSH
13089: LD_INT 99
13091: ST_TO_ADDR
// us_artillery := 97 ;
13092: LD_ADDR_EXP 46
13096: PUSH
13097: LD_INT 97
13099: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13100: LD_ADDR_EXP 47
13104: PUSH
13105: LD_INT 91
13107: ST_TO_ADDR
// end ; end_of_file end_of_file
13108: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13109: GO 13111
13111: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13112: LD_STRING initStreamRollete();
13114: PPUSH
13115: CALL_OW 559
// InitStreamMode ;
13119: CALL 13128 0 0
// DefineStreamItems ( ) ;
13123: CALL 13568 0 0
// end ;
13127: END
// function InitStreamMode ; begin
13128: LD_INT 0
13130: PPUSH
// streamModeActive := false ;
13131: LD_ADDR_EXP 48
13135: PUSH
13136: LD_INT 0
13138: ST_TO_ADDR
// normalCounter := 26 ;
13139: LD_ADDR_EXP 49
13143: PUSH
13144: LD_INT 26
13146: ST_TO_ADDR
// hardcoreCounter := 12 ;
13147: LD_ADDR_EXP 50
13151: PUSH
13152: LD_INT 12
13154: ST_TO_ADDR
// sRocket := false ;
13155: LD_ADDR_EXP 53
13159: PUSH
13160: LD_INT 0
13162: ST_TO_ADDR
// sSpeed := false ;
13163: LD_ADDR_EXP 52
13167: PUSH
13168: LD_INT 0
13170: ST_TO_ADDR
// sEngine := false ;
13171: LD_ADDR_EXP 54
13175: PUSH
13176: LD_INT 0
13178: ST_TO_ADDR
// sSpec := false ;
13179: LD_ADDR_EXP 51
13183: PUSH
13184: LD_INT 0
13186: ST_TO_ADDR
// sLevel := false ;
13187: LD_ADDR_EXP 55
13191: PUSH
13192: LD_INT 0
13194: ST_TO_ADDR
// sArmoury := false ;
13195: LD_ADDR_EXP 56
13199: PUSH
13200: LD_INT 0
13202: ST_TO_ADDR
// sRadar := false ;
13203: LD_ADDR_EXP 57
13207: PUSH
13208: LD_INT 0
13210: ST_TO_ADDR
// sBunker := false ;
13211: LD_ADDR_EXP 58
13215: PUSH
13216: LD_INT 0
13218: ST_TO_ADDR
// sHack := false ;
13219: LD_ADDR_EXP 59
13223: PUSH
13224: LD_INT 0
13226: ST_TO_ADDR
// sFire := false ;
13227: LD_ADDR_EXP 60
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// sRefresh := false ;
13235: LD_ADDR_EXP 61
13239: PUSH
13240: LD_INT 0
13242: ST_TO_ADDR
// sExp := false ;
13243: LD_ADDR_EXP 62
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// sDepot := false ;
13251: LD_ADDR_EXP 63
13255: PUSH
13256: LD_INT 0
13258: ST_TO_ADDR
// sFlag := false ;
13259: LD_ADDR_EXP 64
13263: PUSH
13264: LD_INT 0
13266: ST_TO_ADDR
// sKamikadze := false ;
13267: LD_ADDR_EXP 72
13271: PUSH
13272: LD_INT 0
13274: ST_TO_ADDR
// sTroll := false ;
13275: LD_ADDR_EXP 73
13279: PUSH
13280: LD_INT 0
13282: ST_TO_ADDR
// sSlow := false ;
13283: LD_ADDR_EXP 74
13287: PUSH
13288: LD_INT 0
13290: ST_TO_ADDR
// sLack := false ;
13291: LD_ADDR_EXP 75
13295: PUSH
13296: LD_INT 0
13298: ST_TO_ADDR
// sTank := false ;
13299: LD_ADDR_EXP 77
13303: PUSH
13304: LD_INT 0
13306: ST_TO_ADDR
// sRemote := false ;
13307: LD_ADDR_EXP 78
13311: PUSH
13312: LD_INT 0
13314: ST_TO_ADDR
// sPowell := false ;
13315: LD_ADDR_EXP 79
13319: PUSH
13320: LD_INT 0
13322: ST_TO_ADDR
// sTeleport := false ;
13323: LD_ADDR_EXP 82
13327: PUSH
13328: LD_INT 0
13330: ST_TO_ADDR
// sOilTower := false ;
13331: LD_ADDR_EXP 84
13335: PUSH
13336: LD_INT 0
13338: ST_TO_ADDR
// sShovel := false ;
13339: LD_ADDR_EXP 85
13343: PUSH
13344: LD_INT 0
13346: ST_TO_ADDR
// sSheik := false ;
13347: LD_ADDR_EXP 86
13351: PUSH
13352: LD_INT 0
13354: ST_TO_ADDR
// sEarthquake := false ;
13355: LD_ADDR_EXP 88
13359: PUSH
13360: LD_INT 0
13362: ST_TO_ADDR
// sAI := false ;
13363: LD_ADDR_EXP 89
13367: PUSH
13368: LD_INT 0
13370: ST_TO_ADDR
// sCargo := false ;
13371: LD_ADDR_EXP 92
13375: PUSH
13376: LD_INT 0
13378: ST_TO_ADDR
// sDLaser := false ;
13379: LD_ADDR_EXP 93
13383: PUSH
13384: LD_INT 0
13386: ST_TO_ADDR
// sExchange := false ;
13387: LD_ADDR_EXP 94
13391: PUSH
13392: LD_INT 0
13394: ST_TO_ADDR
// sFac := false ;
13395: LD_ADDR_EXP 95
13399: PUSH
13400: LD_INT 0
13402: ST_TO_ADDR
// sPower := false ;
13403: LD_ADDR_EXP 96
13407: PUSH
13408: LD_INT 0
13410: ST_TO_ADDR
// sRandom := false ;
13411: LD_ADDR_EXP 97
13415: PUSH
13416: LD_INT 0
13418: ST_TO_ADDR
// sShield := false ;
13419: LD_ADDR_EXP 98
13423: PUSH
13424: LD_INT 0
13426: ST_TO_ADDR
// sTime := false ;
13427: LD_ADDR_EXP 99
13431: PUSH
13432: LD_INT 0
13434: ST_TO_ADDR
// sTools := false ;
13435: LD_ADDR_EXP 100
13439: PUSH
13440: LD_INT 0
13442: ST_TO_ADDR
// sSold := false ;
13443: LD_ADDR_EXP 65
13447: PUSH
13448: LD_INT 0
13450: ST_TO_ADDR
// sDiff := false ;
13451: LD_ADDR_EXP 66
13455: PUSH
13456: LD_INT 0
13458: ST_TO_ADDR
// sFog := false ;
13459: LD_ADDR_EXP 69
13463: PUSH
13464: LD_INT 0
13466: ST_TO_ADDR
// sReset := false ;
13467: LD_ADDR_EXP 70
13471: PUSH
13472: LD_INT 0
13474: ST_TO_ADDR
// sSun := false ;
13475: LD_ADDR_EXP 71
13479: PUSH
13480: LD_INT 0
13482: ST_TO_ADDR
// sTiger := false ;
13483: LD_ADDR_EXP 67
13487: PUSH
13488: LD_INT 0
13490: ST_TO_ADDR
// sBomb := false ;
13491: LD_ADDR_EXP 68
13495: PUSH
13496: LD_INT 0
13498: ST_TO_ADDR
// sWound := false ;
13499: LD_ADDR_EXP 76
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// sBetray := false ;
13507: LD_ADDR_EXP 80
13511: PUSH
13512: LD_INT 0
13514: ST_TO_ADDR
// sContamin := false ;
13515: LD_ADDR_EXP 81
13519: PUSH
13520: LD_INT 0
13522: ST_TO_ADDR
// sOil := false ;
13523: LD_ADDR_EXP 83
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// sStu := false ;
13531: LD_ADDR_EXP 87
13535: PUSH
13536: LD_INT 0
13538: ST_TO_ADDR
// sBazooka := false ;
13539: LD_ADDR_EXP 90
13543: PUSH
13544: LD_INT 0
13546: ST_TO_ADDR
// sMortar := false ;
13547: LD_ADDR_EXP 91
13551: PUSH
13552: LD_INT 0
13554: ST_TO_ADDR
// sRanger := false ;
13555: LD_ADDR_EXP 101
13559: PUSH
13560: LD_INT 0
13562: ST_TO_ADDR
// end ;
13563: LD_VAR 0 1
13567: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13568: LD_INT 0
13570: PPUSH
13571: PPUSH
13572: PPUSH
13573: PPUSH
13574: PPUSH
// result := [ ] ;
13575: LD_ADDR_VAR 0 1
13579: PUSH
13580: EMPTY
13581: ST_TO_ADDR
// if campaign_id = 1 then
13582: LD_OWVAR 69
13586: PUSH
13587: LD_INT 1
13589: EQUAL
13590: IFFALSE 16538
// begin case mission_number of 1 :
13592: LD_OWVAR 70
13596: PUSH
13597: LD_INT 1
13599: DOUBLE
13600: EQUAL
13601: IFTRUE 13605
13603: GO 13669
13605: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13606: LD_ADDR_VAR 0 1
13610: PUSH
13611: LD_INT 2
13613: PUSH
13614: LD_INT 4
13616: PUSH
13617: LD_INT 11
13619: PUSH
13620: LD_INT 12
13622: PUSH
13623: LD_INT 15
13625: PUSH
13626: LD_INT 16
13628: PUSH
13629: LD_INT 22
13631: PUSH
13632: LD_INT 23
13634: PUSH
13635: LD_INT 26
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 101
13651: PUSH
13652: LD_INT 102
13654: PUSH
13655: LD_INT 106
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: LIST
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: ST_TO_ADDR
13667: GO 16538
13669: LD_INT 2
13671: DOUBLE
13672: EQUAL
13673: IFTRUE 13677
13675: GO 13749
13677: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
13678: LD_ADDR_VAR 0 1
13682: PUSH
13683: LD_INT 2
13685: PUSH
13686: LD_INT 4
13688: PUSH
13689: LD_INT 11
13691: PUSH
13692: LD_INT 12
13694: PUSH
13695: LD_INT 15
13697: PUSH
13698: LD_INT 16
13700: PUSH
13701: LD_INT 22
13703: PUSH
13704: LD_INT 23
13706: PUSH
13707: LD_INT 26
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 101
13723: PUSH
13724: LD_INT 102
13726: PUSH
13727: LD_INT 105
13729: PUSH
13730: LD_INT 106
13732: PUSH
13733: LD_INT 108
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: ST_TO_ADDR
13747: GO 16538
13749: LD_INT 3
13751: DOUBLE
13752: EQUAL
13753: IFTRUE 13757
13755: GO 13833
13757: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13758: LD_ADDR_VAR 0 1
13762: PUSH
13763: LD_INT 2
13765: PUSH
13766: LD_INT 4
13768: PUSH
13769: LD_INT 5
13771: PUSH
13772: LD_INT 11
13774: PUSH
13775: LD_INT 12
13777: PUSH
13778: LD_INT 15
13780: PUSH
13781: LD_INT 16
13783: PUSH
13784: LD_INT 22
13786: PUSH
13787: LD_INT 26
13789: PUSH
13790: LD_INT 36
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: PUSH
13805: LD_INT 101
13807: PUSH
13808: LD_INT 102
13810: PUSH
13811: LD_INT 105
13813: PUSH
13814: LD_INT 106
13816: PUSH
13817: LD_INT 108
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: ST_TO_ADDR
13831: GO 16538
13833: LD_INT 4
13835: DOUBLE
13836: EQUAL
13837: IFTRUE 13841
13839: GO 13925
13841: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13842: LD_ADDR_VAR 0 1
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: LD_INT 4
13852: PUSH
13853: LD_INT 5
13855: PUSH
13856: LD_INT 8
13858: PUSH
13859: LD_INT 11
13861: PUSH
13862: LD_INT 12
13864: PUSH
13865: LD_INT 15
13867: PUSH
13868: LD_INT 16
13870: PUSH
13871: LD_INT 22
13873: PUSH
13874: LD_INT 23
13876: PUSH
13877: LD_INT 26
13879: PUSH
13880: LD_INT 36
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 101
13899: PUSH
13900: LD_INT 102
13902: PUSH
13903: LD_INT 105
13905: PUSH
13906: LD_INT 106
13908: PUSH
13909: LD_INT 108
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: ST_TO_ADDR
13923: GO 16538
13925: LD_INT 5
13927: DOUBLE
13928: EQUAL
13929: IFTRUE 13933
13931: GO 14033
13933: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13934: LD_ADDR_VAR 0 1
13938: PUSH
13939: LD_INT 2
13941: PUSH
13942: LD_INT 4
13944: PUSH
13945: LD_INT 5
13947: PUSH
13948: LD_INT 6
13950: PUSH
13951: LD_INT 8
13953: PUSH
13954: LD_INT 11
13956: PUSH
13957: LD_INT 12
13959: PUSH
13960: LD_INT 15
13962: PUSH
13963: LD_INT 16
13965: PUSH
13966: LD_INT 22
13968: PUSH
13969: LD_INT 23
13971: PUSH
13972: LD_INT 25
13974: PUSH
13975: LD_INT 26
13977: PUSH
13978: LD_INT 36
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 101
13999: PUSH
14000: LD_INT 102
14002: PUSH
14003: LD_INT 105
14005: PUSH
14006: LD_INT 106
14008: PUSH
14009: LD_INT 108
14011: PUSH
14012: LD_INT 109
14014: PUSH
14015: LD_INT 112
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: ST_TO_ADDR
14031: GO 16538
14033: LD_INT 6
14035: DOUBLE
14036: EQUAL
14037: IFTRUE 14041
14039: GO 14161
14041: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14042: LD_ADDR_VAR 0 1
14046: PUSH
14047: LD_INT 2
14049: PUSH
14050: LD_INT 4
14052: PUSH
14053: LD_INT 5
14055: PUSH
14056: LD_INT 6
14058: PUSH
14059: LD_INT 8
14061: PUSH
14062: LD_INT 11
14064: PUSH
14065: LD_INT 12
14067: PUSH
14068: LD_INT 15
14070: PUSH
14071: LD_INT 16
14073: PUSH
14074: LD_INT 20
14076: PUSH
14077: LD_INT 21
14079: PUSH
14080: LD_INT 22
14082: PUSH
14083: LD_INT 23
14085: PUSH
14086: LD_INT 25
14088: PUSH
14089: LD_INT 26
14091: PUSH
14092: LD_INT 30
14094: PUSH
14095: LD_INT 31
14097: PUSH
14098: LD_INT 32
14100: PUSH
14101: LD_INT 36
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 101
14127: PUSH
14128: LD_INT 102
14130: PUSH
14131: LD_INT 105
14133: PUSH
14134: LD_INT 106
14136: PUSH
14137: LD_INT 108
14139: PUSH
14140: LD_INT 109
14142: PUSH
14143: LD_INT 112
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: ST_TO_ADDR
14159: GO 16538
14161: LD_INT 7
14163: DOUBLE
14164: EQUAL
14165: IFTRUE 14169
14167: GO 14269
14169: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14170: LD_ADDR_VAR 0 1
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: LD_INT 4
14180: PUSH
14181: LD_INT 5
14183: PUSH
14184: LD_INT 7
14186: PUSH
14187: LD_INT 11
14189: PUSH
14190: LD_INT 12
14192: PUSH
14193: LD_INT 15
14195: PUSH
14196: LD_INT 16
14198: PUSH
14199: LD_INT 20
14201: PUSH
14202: LD_INT 21
14204: PUSH
14205: LD_INT 22
14207: PUSH
14208: LD_INT 23
14210: PUSH
14211: LD_INT 25
14213: PUSH
14214: LD_INT 26
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 101
14235: PUSH
14236: LD_INT 102
14238: PUSH
14239: LD_INT 103
14241: PUSH
14242: LD_INT 105
14244: PUSH
14245: LD_INT 106
14247: PUSH
14248: LD_INT 108
14250: PUSH
14251: LD_INT 112
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: ST_TO_ADDR
14267: GO 16538
14269: LD_INT 8
14271: DOUBLE
14272: EQUAL
14273: IFTRUE 14277
14275: GO 14405
14277: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14278: LD_ADDR_VAR 0 1
14282: PUSH
14283: LD_INT 2
14285: PUSH
14286: LD_INT 4
14288: PUSH
14289: LD_INT 5
14291: PUSH
14292: LD_INT 6
14294: PUSH
14295: LD_INT 7
14297: PUSH
14298: LD_INT 8
14300: PUSH
14301: LD_INT 11
14303: PUSH
14304: LD_INT 12
14306: PUSH
14307: LD_INT 15
14309: PUSH
14310: LD_INT 16
14312: PUSH
14313: LD_INT 20
14315: PUSH
14316: LD_INT 21
14318: PUSH
14319: LD_INT 22
14321: PUSH
14322: LD_INT 23
14324: PUSH
14325: LD_INT 25
14327: PUSH
14328: LD_INT 26
14330: PUSH
14331: LD_INT 30
14333: PUSH
14334: LD_INT 31
14336: PUSH
14337: LD_INT 32
14339: PUSH
14340: LD_INT 36
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 101
14367: PUSH
14368: LD_INT 102
14370: PUSH
14371: LD_INT 103
14373: PUSH
14374: LD_INT 105
14376: PUSH
14377: LD_INT 106
14379: PUSH
14380: LD_INT 108
14382: PUSH
14383: LD_INT 109
14385: PUSH
14386: LD_INT 112
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: ST_TO_ADDR
14403: GO 16538
14405: LD_INT 9
14407: DOUBLE
14408: EQUAL
14409: IFTRUE 14413
14411: GO 14549
14413: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14414: LD_ADDR_VAR 0 1
14418: PUSH
14419: LD_INT 2
14421: PUSH
14422: LD_INT 4
14424: PUSH
14425: LD_INT 5
14427: PUSH
14428: LD_INT 6
14430: PUSH
14431: LD_INT 7
14433: PUSH
14434: LD_INT 8
14436: PUSH
14437: LD_INT 11
14439: PUSH
14440: LD_INT 12
14442: PUSH
14443: LD_INT 15
14445: PUSH
14446: LD_INT 16
14448: PUSH
14449: LD_INT 20
14451: PUSH
14452: LD_INT 21
14454: PUSH
14455: LD_INT 22
14457: PUSH
14458: LD_INT 23
14460: PUSH
14461: LD_INT 25
14463: PUSH
14464: LD_INT 26
14466: PUSH
14467: LD_INT 28
14469: PUSH
14470: LD_INT 30
14472: PUSH
14473: LD_INT 31
14475: PUSH
14476: LD_INT 32
14478: PUSH
14479: LD_INT 36
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: PUSH
14505: LD_INT 101
14507: PUSH
14508: LD_INT 102
14510: PUSH
14511: LD_INT 103
14513: PUSH
14514: LD_INT 105
14516: PUSH
14517: LD_INT 106
14519: PUSH
14520: LD_INT 108
14522: PUSH
14523: LD_INT 109
14525: PUSH
14526: LD_INT 112
14528: PUSH
14529: LD_INT 114
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: ST_TO_ADDR
14547: GO 16538
14549: LD_INT 10
14551: DOUBLE
14552: EQUAL
14553: IFTRUE 14557
14555: GO 14741
14557: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14558: LD_ADDR_VAR 0 1
14562: PUSH
14563: LD_INT 2
14565: PUSH
14566: LD_INT 4
14568: PUSH
14569: LD_INT 5
14571: PUSH
14572: LD_INT 6
14574: PUSH
14575: LD_INT 7
14577: PUSH
14578: LD_INT 8
14580: PUSH
14581: LD_INT 9
14583: PUSH
14584: LD_INT 10
14586: PUSH
14587: LD_INT 11
14589: PUSH
14590: LD_INT 12
14592: PUSH
14593: LD_INT 13
14595: PUSH
14596: LD_INT 14
14598: PUSH
14599: LD_INT 15
14601: PUSH
14602: LD_INT 16
14604: PUSH
14605: LD_INT 17
14607: PUSH
14608: LD_INT 18
14610: PUSH
14611: LD_INT 19
14613: PUSH
14614: LD_INT 20
14616: PUSH
14617: LD_INT 21
14619: PUSH
14620: LD_INT 22
14622: PUSH
14623: LD_INT 23
14625: PUSH
14626: LD_INT 24
14628: PUSH
14629: LD_INT 25
14631: PUSH
14632: LD_INT 26
14634: PUSH
14635: LD_INT 28
14637: PUSH
14638: LD_INT 30
14640: PUSH
14641: LD_INT 31
14643: PUSH
14644: LD_INT 32
14646: PUSH
14647: LD_INT 36
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: PUSH
14681: LD_INT 101
14683: PUSH
14684: LD_INT 102
14686: PUSH
14687: LD_INT 103
14689: PUSH
14690: LD_INT 104
14692: PUSH
14693: LD_INT 105
14695: PUSH
14696: LD_INT 106
14698: PUSH
14699: LD_INT 107
14701: PUSH
14702: LD_INT 108
14704: PUSH
14705: LD_INT 109
14707: PUSH
14708: LD_INT 110
14710: PUSH
14711: LD_INT 111
14713: PUSH
14714: LD_INT 112
14716: PUSH
14717: LD_INT 114
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: ST_TO_ADDR
14739: GO 16538
14741: LD_INT 11
14743: DOUBLE
14744: EQUAL
14745: IFTRUE 14749
14747: GO 14941
14749: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14750: LD_ADDR_VAR 0 1
14754: PUSH
14755: LD_INT 2
14757: PUSH
14758: LD_INT 3
14760: PUSH
14761: LD_INT 4
14763: PUSH
14764: LD_INT 5
14766: PUSH
14767: LD_INT 6
14769: PUSH
14770: LD_INT 7
14772: PUSH
14773: LD_INT 8
14775: PUSH
14776: LD_INT 9
14778: PUSH
14779: LD_INT 10
14781: PUSH
14782: LD_INT 11
14784: PUSH
14785: LD_INT 12
14787: PUSH
14788: LD_INT 13
14790: PUSH
14791: LD_INT 14
14793: PUSH
14794: LD_INT 15
14796: PUSH
14797: LD_INT 16
14799: PUSH
14800: LD_INT 17
14802: PUSH
14803: LD_INT 18
14805: PUSH
14806: LD_INT 19
14808: PUSH
14809: LD_INT 20
14811: PUSH
14812: LD_INT 21
14814: PUSH
14815: LD_INT 22
14817: PUSH
14818: LD_INT 23
14820: PUSH
14821: LD_INT 24
14823: PUSH
14824: LD_INT 25
14826: PUSH
14827: LD_INT 26
14829: PUSH
14830: LD_INT 28
14832: PUSH
14833: LD_INT 30
14835: PUSH
14836: LD_INT 31
14838: PUSH
14839: LD_INT 32
14841: PUSH
14842: LD_INT 34
14844: PUSH
14845: LD_INT 36
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 101
14883: PUSH
14884: LD_INT 102
14886: PUSH
14887: LD_INT 103
14889: PUSH
14890: LD_INT 104
14892: PUSH
14893: LD_INT 105
14895: PUSH
14896: LD_INT 106
14898: PUSH
14899: LD_INT 107
14901: PUSH
14902: LD_INT 108
14904: PUSH
14905: LD_INT 109
14907: PUSH
14908: LD_INT 110
14910: PUSH
14911: LD_INT 111
14913: PUSH
14914: LD_INT 112
14916: PUSH
14917: LD_INT 114
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: ST_TO_ADDR
14939: GO 16538
14941: LD_INT 12
14943: DOUBLE
14944: EQUAL
14945: IFTRUE 14949
14947: GO 15157
14949: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
14950: LD_ADDR_VAR 0 1
14954: PUSH
14955: LD_INT 1
14957: PUSH
14958: LD_INT 2
14960: PUSH
14961: LD_INT 3
14963: PUSH
14964: LD_INT 4
14966: PUSH
14967: LD_INT 5
14969: PUSH
14970: LD_INT 6
14972: PUSH
14973: LD_INT 7
14975: PUSH
14976: LD_INT 8
14978: PUSH
14979: LD_INT 9
14981: PUSH
14982: LD_INT 10
14984: PUSH
14985: LD_INT 11
14987: PUSH
14988: LD_INT 12
14990: PUSH
14991: LD_INT 13
14993: PUSH
14994: LD_INT 14
14996: PUSH
14997: LD_INT 15
14999: PUSH
15000: LD_INT 16
15002: PUSH
15003: LD_INT 17
15005: PUSH
15006: LD_INT 18
15008: PUSH
15009: LD_INT 19
15011: PUSH
15012: LD_INT 20
15014: PUSH
15015: LD_INT 21
15017: PUSH
15018: LD_INT 22
15020: PUSH
15021: LD_INT 23
15023: PUSH
15024: LD_INT 24
15026: PUSH
15027: LD_INT 25
15029: PUSH
15030: LD_INT 26
15032: PUSH
15033: LD_INT 27
15035: PUSH
15036: LD_INT 28
15038: PUSH
15039: LD_INT 30
15041: PUSH
15042: LD_INT 31
15044: PUSH
15045: LD_INT 32
15047: PUSH
15048: LD_INT 33
15050: PUSH
15051: LD_INT 34
15053: PUSH
15054: LD_INT 36
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 101
15095: PUSH
15096: LD_INT 102
15098: PUSH
15099: LD_INT 103
15101: PUSH
15102: LD_INT 104
15104: PUSH
15105: LD_INT 105
15107: PUSH
15108: LD_INT 106
15110: PUSH
15111: LD_INT 107
15113: PUSH
15114: LD_INT 108
15116: PUSH
15117: LD_INT 109
15119: PUSH
15120: LD_INT 110
15122: PUSH
15123: LD_INT 111
15125: PUSH
15126: LD_INT 112
15128: PUSH
15129: LD_INT 113
15131: PUSH
15132: LD_INT 114
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: ST_TO_ADDR
15155: GO 16538
15157: LD_INT 13
15159: DOUBLE
15160: EQUAL
15161: IFTRUE 15165
15163: GO 15373
15165: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15166: LD_ADDR_VAR 0 1
15170: PUSH
15171: LD_INT 1
15173: PUSH
15174: LD_INT 2
15176: PUSH
15177: LD_INT 3
15179: PUSH
15180: LD_INT 4
15182: PUSH
15183: LD_INT 5
15185: PUSH
15186: LD_INT 6
15188: PUSH
15189: LD_INT 7
15191: PUSH
15192: LD_INT 8
15194: PUSH
15195: LD_INT 9
15197: PUSH
15198: LD_INT 10
15200: PUSH
15201: LD_INT 11
15203: PUSH
15204: LD_INT 12
15206: PUSH
15207: LD_INT 13
15209: PUSH
15210: LD_INT 14
15212: PUSH
15213: LD_INT 15
15215: PUSH
15216: LD_INT 16
15218: PUSH
15219: LD_INT 17
15221: PUSH
15222: LD_INT 18
15224: PUSH
15225: LD_INT 19
15227: PUSH
15228: LD_INT 20
15230: PUSH
15231: LD_INT 21
15233: PUSH
15234: LD_INT 22
15236: PUSH
15237: LD_INT 23
15239: PUSH
15240: LD_INT 24
15242: PUSH
15243: LD_INT 25
15245: PUSH
15246: LD_INT 26
15248: PUSH
15249: LD_INT 27
15251: PUSH
15252: LD_INT 28
15254: PUSH
15255: LD_INT 30
15257: PUSH
15258: LD_INT 31
15260: PUSH
15261: LD_INT 32
15263: PUSH
15264: LD_INT 33
15266: PUSH
15267: LD_INT 34
15269: PUSH
15270: LD_INT 36
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 101
15311: PUSH
15312: LD_INT 102
15314: PUSH
15315: LD_INT 103
15317: PUSH
15318: LD_INT 104
15320: PUSH
15321: LD_INT 105
15323: PUSH
15324: LD_INT 106
15326: PUSH
15327: LD_INT 107
15329: PUSH
15330: LD_INT 108
15332: PUSH
15333: LD_INT 109
15335: PUSH
15336: LD_INT 110
15338: PUSH
15339: LD_INT 111
15341: PUSH
15342: LD_INT 112
15344: PUSH
15345: LD_INT 113
15347: PUSH
15348: LD_INT 114
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: ST_TO_ADDR
15371: GO 16538
15373: LD_INT 14
15375: DOUBLE
15376: EQUAL
15377: IFTRUE 15381
15379: GO 15593
15381: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15382: LD_ADDR_VAR 0 1
15386: PUSH
15387: LD_INT 1
15389: PUSH
15390: LD_INT 2
15392: PUSH
15393: LD_INT 3
15395: PUSH
15396: LD_INT 4
15398: PUSH
15399: LD_INT 5
15401: PUSH
15402: LD_INT 6
15404: PUSH
15405: LD_INT 7
15407: PUSH
15408: LD_INT 8
15410: PUSH
15411: LD_INT 9
15413: PUSH
15414: LD_INT 10
15416: PUSH
15417: LD_INT 11
15419: PUSH
15420: LD_INT 12
15422: PUSH
15423: LD_INT 13
15425: PUSH
15426: LD_INT 14
15428: PUSH
15429: LD_INT 15
15431: PUSH
15432: LD_INT 16
15434: PUSH
15435: LD_INT 17
15437: PUSH
15438: LD_INT 18
15440: PUSH
15441: LD_INT 19
15443: PUSH
15444: LD_INT 20
15446: PUSH
15447: LD_INT 21
15449: PUSH
15450: LD_INT 22
15452: PUSH
15453: LD_INT 23
15455: PUSH
15456: LD_INT 24
15458: PUSH
15459: LD_INT 25
15461: PUSH
15462: LD_INT 26
15464: PUSH
15465: LD_INT 27
15467: PUSH
15468: LD_INT 28
15470: PUSH
15471: LD_INT 29
15473: PUSH
15474: LD_INT 30
15476: PUSH
15477: LD_INT 31
15479: PUSH
15480: LD_INT 32
15482: PUSH
15483: LD_INT 33
15485: PUSH
15486: LD_INT 34
15488: PUSH
15489: LD_INT 36
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 101
15531: PUSH
15532: LD_INT 102
15534: PUSH
15535: LD_INT 103
15537: PUSH
15538: LD_INT 104
15540: PUSH
15541: LD_INT 105
15543: PUSH
15544: LD_INT 106
15546: PUSH
15547: LD_INT 107
15549: PUSH
15550: LD_INT 108
15552: PUSH
15553: LD_INT 109
15555: PUSH
15556: LD_INT 110
15558: PUSH
15559: LD_INT 111
15561: PUSH
15562: LD_INT 112
15564: PUSH
15565: LD_INT 113
15567: PUSH
15568: LD_INT 114
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: ST_TO_ADDR
15591: GO 16538
15593: LD_INT 15
15595: DOUBLE
15596: EQUAL
15597: IFTRUE 15601
15599: GO 15813
15601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15602: LD_ADDR_VAR 0 1
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: LD_INT 2
15612: PUSH
15613: LD_INT 3
15615: PUSH
15616: LD_INT 4
15618: PUSH
15619: LD_INT 5
15621: PUSH
15622: LD_INT 6
15624: PUSH
15625: LD_INT 7
15627: PUSH
15628: LD_INT 8
15630: PUSH
15631: LD_INT 9
15633: PUSH
15634: LD_INT 10
15636: PUSH
15637: LD_INT 11
15639: PUSH
15640: LD_INT 12
15642: PUSH
15643: LD_INT 13
15645: PUSH
15646: LD_INT 14
15648: PUSH
15649: LD_INT 15
15651: PUSH
15652: LD_INT 16
15654: PUSH
15655: LD_INT 17
15657: PUSH
15658: LD_INT 18
15660: PUSH
15661: LD_INT 19
15663: PUSH
15664: LD_INT 20
15666: PUSH
15667: LD_INT 21
15669: PUSH
15670: LD_INT 22
15672: PUSH
15673: LD_INT 23
15675: PUSH
15676: LD_INT 24
15678: PUSH
15679: LD_INT 25
15681: PUSH
15682: LD_INT 26
15684: PUSH
15685: LD_INT 27
15687: PUSH
15688: LD_INT 28
15690: PUSH
15691: LD_INT 29
15693: PUSH
15694: LD_INT 30
15696: PUSH
15697: LD_INT 31
15699: PUSH
15700: LD_INT 32
15702: PUSH
15703: LD_INT 33
15705: PUSH
15706: LD_INT 34
15708: PUSH
15709: LD_INT 36
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 101
15751: PUSH
15752: LD_INT 102
15754: PUSH
15755: LD_INT 103
15757: PUSH
15758: LD_INT 104
15760: PUSH
15761: LD_INT 105
15763: PUSH
15764: LD_INT 106
15766: PUSH
15767: LD_INT 107
15769: PUSH
15770: LD_INT 108
15772: PUSH
15773: LD_INT 109
15775: PUSH
15776: LD_INT 110
15778: PUSH
15779: LD_INT 111
15781: PUSH
15782: LD_INT 112
15784: PUSH
15785: LD_INT 113
15787: PUSH
15788: LD_INT 114
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: ST_TO_ADDR
15811: GO 16538
15813: LD_INT 16
15815: DOUBLE
15816: EQUAL
15817: IFTRUE 15821
15819: GO 15945
15821: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15822: LD_ADDR_VAR 0 1
15826: PUSH
15827: LD_INT 2
15829: PUSH
15830: LD_INT 4
15832: PUSH
15833: LD_INT 5
15835: PUSH
15836: LD_INT 7
15838: PUSH
15839: LD_INT 11
15841: PUSH
15842: LD_INT 12
15844: PUSH
15845: LD_INT 15
15847: PUSH
15848: LD_INT 16
15850: PUSH
15851: LD_INT 20
15853: PUSH
15854: LD_INT 21
15856: PUSH
15857: LD_INT 22
15859: PUSH
15860: LD_INT 23
15862: PUSH
15863: LD_INT 25
15865: PUSH
15866: LD_INT 26
15868: PUSH
15869: LD_INT 30
15871: PUSH
15872: LD_INT 31
15874: PUSH
15875: LD_INT 32
15877: PUSH
15878: LD_INT 33
15880: PUSH
15881: LD_INT 34
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 101
15907: PUSH
15908: LD_INT 102
15910: PUSH
15911: LD_INT 103
15913: PUSH
15914: LD_INT 106
15916: PUSH
15917: LD_INT 108
15919: PUSH
15920: LD_INT 112
15922: PUSH
15923: LD_INT 113
15925: PUSH
15926: LD_INT 114
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: ST_TO_ADDR
15943: GO 16538
15945: LD_INT 17
15947: DOUBLE
15948: EQUAL
15949: IFTRUE 15953
15951: GO 16165
15953: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
15954: LD_ADDR_VAR 0 1
15958: PUSH
15959: LD_INT 1
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: LD_INT 3
15967: PUSH
15968: LD_INT 4
15970: PUSH
15971: LD_INT 5
15973: PUSH
15974: LD_INT 6
15976: PUSH
15977: LD_INT 7
15979: PUSH
15980: LD_INT 8
15982: PUSH
15983: LD_INT 9
15985: PUSH
15986: LD_INT 10
15988: PUSH
15989: LD_INT 11
15991: PUSH
15992: LD_INT 12
15994: PUSH
15995: LD_INT 13
15997: PUSH
15998: LD_INT 14
16000: PUSH
16001: LD_INT 15
16003: PUSH
16004: LD_INT 16
16006: PUSH
16007: LD_INT 17
16009: PUSH
16010: LD_INT 18
16012: PUSH
16013: LD_INT 19
16015: PUSH
16016: LD_INT 20
16018: PUSH
16019: LD_INT 21
16021: PUSH
16022: LD_INT 22
16024: PUSH
16025: LD_INT 23
16027: PUSH
16028: LD_INT 24
16030: PUSH
16031: LD_INT 25
16033: PUSH
16034: LD_INT 26
16036: PUSH
16037: LD_INT 27
16039: PUSH
16040: LD_INT 28
16042: PUSH
16043: LD_INT 29
16045: PUSH
16046: LD_INT 30
16048: PUSH
16049: LD_INT 31
16051: PUSH
16052: LD_INT 32
16054: PUSH
16055: LD_INT 33
16057: PUSH
16058: LD_INT 34
16060: PUSH
16061: LD_INT 36
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 101
16103: PUSH
16104: LD_INT 102
16106: PUSH
16107: LD_INT 103
16109: PUSH
16110: LD_INT 104
16112: PUSH
16113: LD_INT 105
16115: PUSH
16116: LD_INT 106
16118: PUSH
16119: LD_INT 107
16121: PUSH
16122: LD_INT 108
16124: PUSH
16125: LD_INT 109
16127: PUSH
16128: LD_INT 110
16130: PUSH
16131: LD_INT 111
16133: PUSH
16134: LD_INT 112
16136: PUSH
16137: LD_INT 113
16139: PUSH
16140: LD_INT 114
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: ST_TO_ADDR
16163: GO 16538
16165: LD_INT 18
16167: DOUBLE
16168: EQUAL
16169: IFTRUE 16173
16171: GO 16309
16173: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16174: LD_ADDR_VAR 0 1
16178: PUSH
16179: LD_INT 2
16181: PUSH
16182: LD_INT 4
16184: PUSH
16185: LD_INT 5
16187: PUSH
16188: LD_INT 7
16190: PUSH
16191: LD_INT 11
16193: PUSH
16194: LD_INT 12
16196: PUSH
16197: LD_INT 15
16199: PUSH
16200: LD_INT 16
16202: PUSH
16203: LD_INT 20
16205: PUSH
16206: LD_INT 21
16208: PUSH
16209: LD_INT 22
16211: PUSH
16212: LD_INT 23
16214: PUSH
16215: LD_INT 25
16217: PUSH
16218: LD_INT 26
16220: PUSH
16221: LD_INT 30
16223: PUSH
16224: LD_INT 31
16226: PUSH
16227: LD_INT 32
16229: PUSH
16230: LD_INT 33
16232: PUSH
16233: LD_INT 34
16235: PUSH
16236: LD_INT 35
16238: PUSH
16239: LD_INT 36
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 101
16267: PUSH
16268: LD_INT 102
16270: PUSH
16271: LD_INT 103
16273: PUSH
16274: LD_INT 106
16276: PUSH
16277: LD_INT 108
16279: PUSH
16280: LD_INT 112
16282: PUSH
16283: LD_INT 113
16285: PUSH
16286: LD_INT 114
16288: PUSH
16289: LD_INT 115
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: ST_TO_ADDR
16307: GO 16538
16309: LD_INT 19
16311: DOUBLE
16312: EQUAL
16313: IFTRUE 16317
16315: GO 16537
16317: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16318: LD_ADDR_VAR 0 1
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: LD_INT 2
16328: PUSH
16329: LD_INT 3
16331: PUSH
16332: LD_INT 4
16334: PUSH
16335: LD_INT 5
16337: PUSH
16338: LD_INT 6
16340: PUSH
16341: LD_INT 7
16343: PUSH
16344: LD_INT 8
16346: PUSH
16347: LD_INT 9
16349: PUSH
16350: LD_INT 10
16352: PUSH
16353: LD_INT 11
16355: PUSH
16356: LD_INT 12
16358: PUSH
16359: LD_INT 13
16361: PUSH
16362: LD_INT 14
16364: PUSH
16365: LD_INT 15
16367: PUSH
16368: LD_INT 16
16370: PUSH
16371: LD_INT 17
16373: PUSH
16374: LD_INT 18
16376: PUSH
16377: LD_INT 19
16379: PUSH
16380: LD_INT 20
16382: PUSH
16383: LD_INT 21
16385: PUSH
16386: LD_INT 22
16388: PUSH
16389: LD_INT 23
16391: PUSH
16392: LD_INT 24
16394: PUSH
16395: LD_INT 25
16397: PUSH
16398: LD_INT 26
16400: PUSH
16401: LD_INT 27
16403: PUSH
16404: LD_INT 28
16406: PUSH
16407: LD_INT 29
16409: PUSH
16410: LD_INT 30
16412: PUSH
16413: LD_INT 31
16415: PUSH
16416: LD_INT 32
16418: PUSH
16419: LD_INT 33
16421: PUSH
16422: LD_INT 34
16424: PUSH
16425: LD_INT 35
16427: PUSH
16428: LD_INT 36
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 101
16471: PUSH
16472: LD_INT 102
16474: PUSH
16475: LD_INT 103
16477: PUSH
16478: LD_INT 104
16480: PUSH
16481: LD_INT 105
16483: PUSH
16484: LD_INT 106
16486: PUSH
16487: LD_INT 107
16489: PUSH
16490: LD_INT 108
16492: PUSH
16493: LD_INT 109
16495: PUSH
16496: LD_INT 110
16498: PUSH
16499: LD_INT 111
16501: PUSH
16502: LD_INT 112
16504: PUSH
16505: LD_INT 113
16507: PUSH
16508: LD_INT 114
16510: PUSH
16511: LD_INT 115
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: ST_TO_ADDR
16535: GO 16538
16537: POP
// end ; if result then
16538: LD_VAR 0 1
16542: IFFALSE 16831
// begin normal :=  ;
16544: LD_ADDR_VAR 0 3
16548: PUSH
16549: LD_STRING 
16551: ST_TO_ADDR
// hardcore :=  ;
16552: LD_ADDR_VAR 0 4
16556: PUSH
16557: LD_STRING 
16559: ST_TO_ADDR
// for i = 1 to normalCounter do
16560: LD_ADDR_VAR 0 5
16564: PUSH
16565: DOUBLE
16566: LD_INT 1
16568: DEC
16569: ST_TO_ADDR
16570: LD_EXP 49
16574: PUSH
16575: FOR_TO
16576: IFFALSE 16677
// begin tmp := 0 ;
16578: LD_ADDR_VAR 0 2
16582: PUSH
16583: LD_STRING 0
16585: ST_TO_ADDR
// if result [ 1 ] then
16586: LD_VAR 0 1
16590: PUSH
16591: LD_INT 1
16593: ARRAY
16594: IFFALSE 16659
// if result [ 1 ] [ 1 ] = i then
16596: LD_VAR 0 1
16600: PUSH
16601: LD_INT 1
16603: ARRAY
16604: PUSH
16605: LD_INT 1
16607: ARRAY
16608: PUSH
16609: LD_VAR 0 5
16613: EQUAL
16614: IFFALSE 16659
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16616: LD_ADDR_VAR 0 1
16620: PUSH
16621: LD_VAR 0 1
16625: PPUSH
16626: LD_INT 1
16628: PPUSH
16629: LD_VAR 0 1
16633: PUSH
16634: LD_INT 1
16636: ARRAY
16637: PPUSH
16638: LD_INT 1
16640: PPUSH
16641: CALL_OW 3
16645: PPUSH
16646: CALL_OW 1
16650: ST_TO_ADDR
// tmp := 1 ;
16651: LD_ADDR_VAR 0 2
16655: PUSH
16656: LD_STRING 1
16658: ST_TO_ADDR
// end ; normal := normal & tmp ;
16659: LD_ADDR_VAR 0 3
16663: PUSH
16664: LD_VAR 0 3
16668: PUSH
16669: LD_VAR 0 2
16673: STR
16674: ST_TO_ADDR
// end ;
16675: GO 16575
16677: POP
16678: POP
// for i = 1 to hardcoreCounter do
16679: LD_ADDR_VAR 0 5
16683: PUSH
16684: DOUBLE
16685: LD_INT 1
16687: DEC
16688: ST_TO_ADDR
16689: LD_EXP 50
16693: PUSH
16694: FOR_TO
16695: IFFALSE 16800
// begin tmp := 0 ;
16697: LD_ADDR_VAR 0 2
16701: PUSH
16702: LD_STRING 0
16704: ST_TO_ADDR
// if result [ 2 ] then
16705: LD_VAR 0 1
16709: PUSH
16710: LD_INT 2
16712: ARRAY
16713: IFFALSE 16782
// if result [ 2 ] [ 1 ] = 100 + i then
16715: LD_VAR 0 1
16719: PUSH
16720: LD_INT 2
16722: ARRAY
16723: PUSH
16724: LD_INT 1
16726: ARRAY
16727: PUSH
16728: LD_INT 100
16730: PUSH
16731: LD_VAR 0 5
16735: PLUS
16736: EQUAL
16737: IFFALSE 16782
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16739: LD_ADDR_VAR 0 1
16743: PUSH
16744: LD_VAR 0 1
16748: PPUSH
16749: LD_INT 2
16751: PPUSH
16752: LD_VAR 0 1
16756: PUSH
16757: LD_INT 2
16759: ARRAY
16760: PPUSH
16761: LD_INT 1
16763: PPUSH
16764: CALL_OW 3
16768: PPUSH
16769: CALL_OW 1
16773: ST_TO_ADDR
// tmp := 1 ;
16774: LD_ADDR_VAR 0 2
16778: PUSH
16779: LD_STRING 1
16781: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16782: LD_ADDR_VAR 0 4
16786: PUSH
16787: LD_VAR 0 4
16791: PUSH
16792: LD_VAR 0 2
16796: STR
16797: ST_TO_ADDR
// end ;
16798: GO 16694
16800: POP
16801: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16802: LD_STRING getStreamItemsFromMission("
16804: PUSH
16805: LD_VAR 0 3
16809: STR
16810: PUSH
16811: LD_STRING ","
16813: STR
16814: PUSH
16815: LD_VAR 0 4
16819: STR
16820: PUSH
16821: LD_STRING ")
16823: STR
16824: PPUSH
16825: CALL_OW 559
// end else
16829: GO 16838
// ToLua ( getStreamItemsFromMission("","") ) ;
16831: LD_STRING getStreamItemsFromMission("","")
16833: PPUSH
16834: CALL_OW 559
// end ;
16838: LD_VAR 0 1
16842: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
16843: LD_VAR 0 2
16847: PUSH
16848: LD_INT 100
16850: EQUAL
16851: IFFALSE 17800
// begin if not StreamModeActive then
16853: LD_EXP 48
16857: NOT
16858: IFFALSE 16868
// StreamModeActive := true ;
16860: LD_ADDR_EXP 48
16864: PUSH
16865: LD_INT 1
16867: ST_TO_ADDR
// if p3 = 0 then
16868: LD_VAR 0 3
16872: PUSH
16873: LD_INT 0
16875: EQUAL
16876: IFFALSE 16882
// InitStreamMode ;
16878: CALL 13128 0 0
// if p3 = 1 then
16882: LD_VAR 0 3
16886: PUSH
16887: LD_INT 1
16889: EQUAL
16890: IFFALSE 16900
// sRocket := true ;
16892: LD_ADDR_EXP 53
16896: PUSH
16897: LD_INT 1
16899: ST_TO_ADDR
// if p3 = 2 then
16900: LD_VAR 0 3
16904: PUSH
16905: LD_INT 2
16907: EQUAL
16908: IFFALSE 16918
// sSpeed := true ;
16910: LD_ADDR_EXP 52
16914: PUSH
16915: LD_INT 1
16917: ST_TO_ADDR
// if p3 = 3 then
16918: LD_VAR 0 3
16922: PUSH
16923: LD_INT 3
16925: EQUAL
16926: IFFALSE 16936
// sEngine := true ;
16928: LD_ADDR_EXP 54
16932: PUSH
16933: LD_INT 1
16935: ST_TO_ADDR
// if p3 = 4 then
16936: LD_VAR 0 3
16940: PUSH
16941: LD_INT 4
16943: EQUAL
16944: IFFALSE 16954
// sSpec := true ;
16946: LD_ADDR_EXP 51
16950: PUSH
16951: LD_INT 1
16953: ST_TO_ADDR
// if p3 = 5 then
16954: LD_VAR 0 3
16958: PUSH
16959: LD_INT 5
16961: EQUAL
16962: IFFALSE 16972
// sLevel := true ;
16964: LD_ADDR_EXP 55
16968: PUSH
16969: LD_INT 1
16971: ST_TO_ADDR
// if p3 = 6 then
16972: LD_VAR 0 3
16976: PUSH
16977: LD_INT 6
16979: EQUAL
16980: IFFALSE 16990
// sArmoury := true ;
16982: LD_ADDR_EXP 56
16986: PUSH
16987: LD_INT 1
16989: ST_TO_ADDR
// if p3 = 7 then
16990: LD_VAR 0 3
16994: PUSH
16995: LD_INT 7
16997: EQUAL
16998: IFFALSE 17008
// sRadar := true ;
17000: LD_ADDR_EXP 57
17004: PUSH
17005: LD_INT 1
17007: ST_TO_ADDR
// if p3 = 8 then
17008: LD_VAR 0 3
17012: PUSH
17013: LD_INT 8
17015: EQUAL
17016: IFFALSE 17026
// sBunker := true ;
17018: LD_ADDR_EXP 58
17022: PUSH
17023: LD_INT 1
17025: ST_TO_ADDR
// if p3 = 9 then
17026: LD_VAR 0 3
17030: PUSH
17031: LD_INT 9
17033: EQUAL
17034: IFFALSE 17044
// sHack := true ;
17036: LD_ADDR_EXP 59
17040: PUSH
17041: LD_INT 1
17043: ST_TO_ADDR
// if p3 = 10 then
17044: LD_VAR 0 3
17048: PUSH
17049: LD_INT 10
17051: EQUAL
17052: IFFALSE 17062
// sFire := true ;
17054: LD_ADDR_EXP 60
17058: PUSH
17059: LD_INT 1
17061: ST_TO_ADDR
// if p3 = 11 then
17062: LD_VAR 0 3
17066: PUSH
17067: LD_INT 11
17069: EQUAL
17070: IFFALSE 17080
// sRefresh := true ;
17072: LD_ADDR_EXP 61
17076: PUSH
17077: LD_INT 1
17079: ST_TO_ADDR
// if p3 = 12 then
17080: LD_VAR 0 3
17084: PUSH
17085: LD_INT 12
17087: EQUAL
17088: IFFALSE 17098
// sExp := true ;
17090: LD_ADDR_EXP 62
17094: PUSH
17095: LD_INT 1
17097: ST_TO_ADDR
// if p3 = 13 then
17098: LD_VAR 0 3
17102: PUSH
17103: LD_INT 13
17105: EQUAL
17106: IFFALSE 17116
// sDepot := true ;
17108: LD_ADDR_EXP 63
17112: PUSH
17113: LD_INT 1
17115: ST_TO_ADDR
// if p3 = 14 then
17116: LD_VAR 0 3
17120: PUSH
17121: LD_INT 14
17123: EQUAL
17124: IFFALSE 17134
// sFlag := true ;
17126: LD_ADDR_EXP 64
17130: PUSH
17131: LD_INT 1
17133: ST_TO_ADDR
// if p3 = 15 then
17134: LD_VAR 0 3
17138: PUSH
17139: LD_INT 15
17141: EQUAL
17142: IFFALSE 17152
// sKamikadze := true ;
17144: LD_ADDR_EXP 72
17148: PUSH
17149: LD_INT 1
17151: ST_TO_ADDR
// if p3 = 16 then
17152: LD_VAR 0 3
17156: PUSH
17157: LD_INT 16
17159: EQUAL
17160: IFFALSE 17170
// sTroll := true ;
17162: LD_ADDR_EXP 73
17166: PUSH
17167: LD_INT 1
17169: ST_TO_ADDR
// if p3 = 17 then
17170: LD_VAR 0 3
17174: PUSH
17175: LD_INT 17
17177: EQUAL
17178: IFFALSE 17188
// sSlow := true ;
17180: LD_ADDR_EXP 74
17184: PUSH
17185: LD_INT 1
17187: ST_TO_ADDR
// if p3 = 18 then
17188: LD_VAR 0 3
17192: PUSH
17193: LD_INT 18
17195: EQUAL
17196: IFFALSE 17206
// sLack := true ;
17198: LD_ADDR_EXP 75
17202: PUSH
17203: LD_INT 1
17205: ST_TO_ADDR
// if p3 = 19 then
17206: LD_VAR 0 3
17210: PUSH
17211: LD_INT 19
17213: EQUAL
17214: IFFALSE 17224
// sTank := true ;
17216: LD_ADDR_EXP 77
17220: PUSH
17221: LD_INT 1
17223: ST_TO_ADDR
// if p3 = 20 then
17224: LD_VAR 0 3
17228: PUSH
17229: LD_INT 20
17231: EQUAL
17232: IFFALSE 17242
// sRemote := true ;
17234: LD_ADDR_EXP 78
17238: PUSH
17239: LD_INT 1
17241: ST_TO_ADDR
// if p3 = 21 then
17242: LD_VAR 0 3
17246: PUSH
17247: LD_INT 21
17249: EQUAL
17250: IFFALSE 17260
// sPowell := true ;
17252: LD_ADDR_EXP 79
17256: PUSH
17257: LD_INT 1
17259: ST_TO_ADDR
// if p3 = 22 then
17260: LD_VAR 0 3
17264: PUSH
17265: LD_INT 22
17267: EQUAL
17268: IFFALSE 17278
// sTeleport := true ;
17270: LD_ADDR_EXP 82
17274: PUSH
17275: LD_INT 1
17277: ST_TO_ADDR
// if p3 = 23 then
17278: LD_VAR 0 3
17282: PUSH
17283: LD_INT 23
17285: EQUAL
17286: IFFALSE 17296
// sOilTower := true ;
17288: LD_ADDR_EXP 84
17292: PUSH
17293: LD_INT 1
17295: ST_TO_ADDR
// if p3 = 24 then
17296: LD_VAR 0 3
17300: PUSH
17301: LD_INT 24
17303: EQUAL
17304: IFFALSE 17314
// sShovel := true ;
17306: LD_ADDR_EXP 85
17310: PUSH
17311: LD_INT 1
17313: ST_TO_ADDR
// if p3 = 25 then
17314: LD_VAR 0 3
17318: PUSH
17319: LD_INT 25
17321: EQUAL
17322: IFFALSE 17332
// sSheik := true ;
17324: LD_ADDR_EXP 86
17328: PUSH
17329: LD_INT 1
17331: ST_TO_ADDR
// if p3 = 26 then
17332: LD_VAR 0 3
17336: PUSH
17337: LD_INT 26
17339: EQUAL
17340: IFFALSE 17350
// sEarthquake := true ;
17342: LD_ADDR_EXP 88
17346: PUSH
17347: LD_INT 1
17349: ST_TO_ADDR
// if p3 = 27 then
17350: LD_VAR 0 3
17354: PUSH
17355: LD_INT 27
17357: EQUAL
17358: IFFALSE 17368
// sAI := true ;
17360: LD_ADDR_EXP 89
17364: PUSH
17365: LD_INT 1
17367: ST_TO_ADDR
// if p3 = 28 then
17368: LD_VAR 0 3
17372: PUSH
17373: LD_INT 28
17375: EQUAL
17376: IFFALSE 17386
// sCargo := true ;
17378: LD_ADDR_EXP 92
17382: PUSH
17383: LD_INT 1
17385: ST_TO_ADDR
// if p3 = 29 then
17386: LD_VAR 0 3
17390: PUSH
17391: LD_INT 29
17393: EQUAL
17394: IFFALSE 17404
// sDLaser := true ;
17396: LD_ADDR_EXP 93
17400: PUSH
17401: LD_INT 1
17403: ST_TO_ADDR
// if p3 = 30 then
17404: LD_VAR 0 3
17408: PUSH
17409: LD_INT 30
17411: EQUAL
17412: IFFALSE 17422
// sExchange := true ;
17414: LD_ADDR_EXP 94
17418: PUSH
17419: LD_INT 1
17421: ST_TO_ADDR
// if p3 = 31 then
17422: LD_VAR 0 3
17426: PUSH
17427: LD_INT 31
17429: EQUAL
17430: IFFALSE 17440
// sFac := true ;
17432: LD_ADDR_EXP 95
17436: PUSH
17437: LD_INT 1
17439: ST_TO_ADDR
// if p3 = 32 then
17440: LD_VAR 0 3
17444: PUSH
17445: LD_INT 32
17447: EQUAL
17448: IFFALSE 17458
// sPower := true ;
17450: LD_ADDR_EXP 96
17454: PUSH
17455: LD_INT 1
17457: ST_TO_ADDR
// if p3 = 33 then
17458: LD_VAR 0 3
17462: PUSH
17463: LD_INT 33
17465: EQUAL
17466: IFFALSE 17476
// sRandom := true ;
17468: LD_ADDR_EXP 97
17472: PUSH
17473: LD_INT 1
17475: ST_TO_ADDR
// if p3 = 34 then
17476: LD_VAR 0 3
17480: PUSH
17481: LD_INT 34
17483: EQUAL
17484: IFFALSE 17494
// sShield := true ;
17486: LD_ADDR_EXP 98
17490: PUSH
17491: LD_INT 1
17493: ST_TO_ADDR
// if p3 = 35 then
17494: LD_VAR 0 3
17498: PUSH
17499: LD_INT 35
17501: EQUAL
17502: IFFALSE 17512
// sTime := true ;
17504: LD_ADDR_EXP 99
17508: PUSH
17509: LD_INT 1
17511: ST_TO_ADDR
// if p3 = 36 then
17512: LD_VAR 0 3
17516: PUSH
17517: LD_INT 36
17519: EQUAL
17520: IFFALSE 17530
// sTools := true ;
17522: LD_ADDR_EXP 100
17526: PUSH
17527: LD_INT 1
17529: ST_TO_ADDR
// if p3 = 101 then
17530: LD_VAR 0 3
17534: PUSH
17535: LD_INT 101
17537: EQUAL
17538: IFFALSE 17548
// sSold := true ;
17540: LD_ADDR_EXP 65
17544: PUSH
17545: LD_INT 1
17547: ST_TO_ADDR
// if p3 = 102 then
17548: LD_VAR 0 3
17552: PUSH
17553: LD_INT 102
17555: EQUAL
17556: IFFALSE 17566
// sDiff := true ;
17558: LD_ADDR_EXP 66
17562: PUSH
17563: LD_INT 1
17565: ST_TO_ADDR
// if p3 = 103 then
17566: LD_VAR 0 3
17570: PUSH
17571: LD_INT 103
17573: EQUAL
17574: IFFALSE 17584
// sFog := true ;
17576: LD_ADDR_EXP 69
17580: PUSH
17581: LD_INT 1
17583: ST_TO_ADDR
// if p3 = 104 then
17584: LD_VAR 0 3
17588: PUSH
17589: LD_INT 104
17591: EQUAL
17592: IFFALSE 17602
// sReset := true ;
17594: LD_ADDR_EXP 70
17598: PUSH
17599: LD_INT 1
17601: ST_TO_ADDR
// if p3 = 105 then
17602: LD_VAR 0 3
17606: PUSH
17607: LD_INT 105
17609: EQUAL
17610: IFFALSE 17620
// sSun := true ;
17612: LD_ADDR_EXP 71
17616: PUSH
17617: LD_INT 1
17619: ST_TO_ADDR
// if p3 = 106 then
17620: LD_VAR 0 3
17624: PUSH
17625: LD_INT 106
17627: EQUAL
17628: IFFALSE 17638
// sTiger := true ;
17630: LD_ADDR_EXP 67
17634: PUSH
17635: LD_INT 1
17637: ST_TO_ADDR
// if p3 = 107 then
17638: LD_VAR 0 3
17642: PUSH
17643: LD_INT 107
17645: EQUAL
17646: IFFALSE 17656
// sBomb := true ;
17648: LD_ADDR_EXP 68
17652: PUSH
17653: LD_INT 1
17655: ST_TO_ADDR
// if p3 = 108 then
17656: LD_VAR 0 3
17660: PUSH
17661: LD_INT 108
17663: EQUAL
17664: IFFALSE 17674
// sWound := true ;
17666: LD_ADDR_EXP 76
17670: PUSH
17671: LD_INT 1
17673: ST_TO_ADDR
// if p3 = 109 then
17674: LD_VAR 0 3
17678: PUSH
17679: LD_INT 109
17681: EQUAL
17682: IFFALSE 17692
// sBetray := true ;
17684: LD_ADDR_EXP 80
17688: PUSH
17689: LD_INT 1
17691: ST_TO_ADDR
// if p3 = 110 then
17692: LD_VAR 0 3
17696: PUSH
17697: LD_INT 110
17699: EQUAL
17700: IFFALSE 17710
// sContamin := true ;
17702: LD_ADDR_EXP 81
17706: PUSH
17707: LD_INT 1
17709: ST_TO_ADDR
// if p3 = 111 then
17710: LD_VAR 0 3
17714: PUSH
17715: LD_INT 111
17717: EQUAL
17718: IFFALSE 17728
// sOil := true ;
17720: LD_ADDR_EXP 83
17724: PUSH
17725: LD_INT 1
17727: ST_TO_ADDR
// if p3 = 112 then
17728: LD_VAR 0 3
17732: PUSH
17733: LD_INT 112
17735: EQUAL
17736: IFFALSE 17746
// sStu := true ;
17738: LD_ADDR_EXP 87
17742: PUSH
17743: LD_INT 1
17745: ST_TO_ADDR
// if p3 = 113 then
17746: LD_VAR 0 3
17750: PUSH
17751: LD_INT 113
17753: EQUAL
17754: IFFALSE 17764
// sBazooka := true ;
17756: LD_ADDR_EXP 90
17760: PUSH
17761: LD_INT 1
17763: ST_TO_ADDR
// if p3 = 114 then
17764: LD_VAR 0 3
17768: PUSH
17769: LD_INT 114
17771: EQUAL
17772: IFFALSE 17782
// sMortar := true ;
17774: LD_ADDR_EXP 91
17778: PUSH
17779: LD_INT 1
17781: ST_TO_ADDR
// if p3 = 115 then
17782: LD_VAR 0 3
17786: PUSH
17787: LD_INT 115
17789: EQUAL
17790: IFFALSE 17800
// sRanger := true ;
17792: LD_ADDR_EXP 101
17796: PUSH
17797: LD_INT 1
17799: ST_TO_ADDR
// end ; end ;
17800: PPOPN 6
17802: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17803: LD_EXP 48
17807: PUSH
17808: LD_EXP 53
17812: AND
17813: IFFALSE 17937
17815: GO 17817
17817: DISABLE
17818: LD_INT 0
17820: PPUSH
17821: PPUSH
// begin enable ;
17822: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17823: LD_ADDR_VAR 0 2
17827: PUSH
17828: LD_INT 22
17830: PUSH
17831: LD_OWVAR 2
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 2
17842: PUSH
17843: LD_INT 34
17845: PUSH
17846: LD_INT 7
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 34
17855: PUSH
17856: LD_INT 45
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 34
17865: PUSH
17866: LD_INT 28
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 34
17875: PUSH
17876: LD_INT 47
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PPUSH
17894: CALL_OW 69
17898: ST_TO_ADDR
// if not tmp then
17899: LD_VAR 0 2
17903: NOT
17904: IFFALSE 17908
// exit ;
17906: GO 17937
// for i in tmp do
17908: LD_ADDR_VAR 0 1
17912: PUSH
17913: LD_VAR 0 2
17917: PUSH
17918: FOR_IN
17919: IFFALSE 17935
// begin SetLives ( i , 0 ) ;
17921: LD_VAR 0 1
17925: PPUSH
17926: LD_INT 0
17928: PPUSH
17929: CALL_OW 234
// end ;
17933: GO 17918
17935: POP
17936: POP
// end ;
17937: PPOPN 2
17939: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17940: LD_EXP 48
17944: PUSH
17945: LD_EXP 54
17949: AND
17950: IFFALSE 18034
17952: GO 17954
17954: DISABLE
17955: LD_INT 0
17957: PPUSH
17958: PPUSH
// begin enable ;
17959: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17960: LD_ADDR_VAR 0 2
17964: PUSH
17965: LD_INT 22
17967: PUSH
17968: LD_OWVAR 2
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 32
17979: PUSH
17980: LD_INT 3
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PPUSH
17991: CALL_OW 69
17995: ST_TO_ADDR
// if not tmp then
17996: LD_VAR 0 2
18000: NOT
18001: IFFALSE 18005
// exit ;
18003: GO 18034
// for i in tmp do
18005: LD_ADDR_VAR 0 1
18009: PUSH
18010: LD_VAR 0 2
18014: PUSH
18015: FOR_IN
18016: IFFALSE 18032
// begin SetLives ( i , 0 ) ;
18018: LD_VAR 0 1
18022: PPUSH
18023: LD_INT 0
18025: PPUSH
18026: CALL_OW 234
// end ;
18030: GO 18015
18032: POP
18033: POP
// end ;
18034: PPOPN 2
18036: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18037: LD_EXP 48
18041: PUSH
18042: LD_EXP 51
18046: AND
18047: IFFALSE 18140
18049: GO 18051
18051: DISABLE
18052: LD_INT 0
18054: PPUSH
// begin enable ;
18055: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18056: LD_ADDR_VAR 0 1
18060: PUSH
18061: LD_INT 22
18063: PUSH
18064: LD_OWVAR 2
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 2
18075: PUSH
18076: LD_INT 25
18078: PUSH
18079: LD_INT 5
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 25
18088: PUSH
18089: LD_INT 9
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 25
18098: PUSH
18099: LD_INT 8
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PPUSH
18116: CALL_OW 69
18120: PUSH
18121: FOR_IN
18122: IFFALSE 18138
// begin SetClass ( i , 1 ) ;
18124: LD_VAR 0 1
18128: PPUSH
18129: LD_INT 1
18131: PPUSH
18132: CALL_OW 336
// end ;
18136: GO 18121
18138: POP
18139: POP
// end ;
18140: PPOPN 1
18142: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18143: LD_EXP 48
18147: PUSH
18148: LD_EXP 52
18152: AND
18153: PUSH
18154: LD_OWVAR 65
18158: PUSH
18159: LD_INT 7
18161: LESS
18162: AND
18163: IFFALSE 18177
18165: GO 18167
18167: DISABLE
// begin enable ;
18168: ENABLE
// game_speed := 7 ;
18169: LD_ADDR_OWVAR 65
18173: PUSH
18174: LD_INT 7
18176: ST_TO_ADDR
// end ;
18177: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18178: LD_EXP 48
18182: PUSH
18183: LD_EXP 55
18187: AND
18188: IFFALSE 18390
18190: GO 18192
18192: DISABLE
18193: LD_INT 0
18195: PPUSH
18196: PPUSH
18197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18198: LD_ADDR_VAR 0 3
18202: PUSH
18203: LD_INT 81
18205: PUSH
18206: LD_OWVAR 2
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 21
18217: PUSH
18218: LD_INT 1
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PPUSH
18229: CALL_OW 69
18233: ST_TO_ADDR
// if not tmp then
18234: LD_VAR 0 3
18238: NOT
18239: IFFALSE 18243
// exit ;
18241: GO 18390
// if tmp > 5 then
18243: LD_VAR 0 3
18247: PUSH
18248: LD_INT 5
18250: GREATER
18251: IFFALSE 18263
// k := 5 else
18253: LD_ADDR_VAR 0 2
18257: PUSH
18258: LD_INT 5
18260: ST_TO_ADDR
18261: GO 18273
// k := tmp ;
18263: LD_ADDR_VAR 0 2
18267: PUSH
18268: LD_VAR 0 3
18272: ST_TO_ADDR
// for i := 1 to k do
18273: LD_ADDR_VAR 0 1
18277: PUSH
18278: DOUBLE
18279: LD_INT 1
18281: DEC
18282: ST_TO_ADDR
18283: LD_VAR 0 2
18287: PUSH
18288: FOR_TO
18289: IFFALSE 18388
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18291: LD_VAR 0 3
18295: PUSH
18296: LD_VAR 0 1
18300: ARRAY
18301: PPUSH
18302: LD_VAR 0 1
18306: PUSH
18307: LD_INT 4
18309: MOD
18310: PUSH
18311: LD_INT 1
18313: PLUS
18314: PPUSH
18315: CALL_OW 259
18319: PUSH
18320: LD_INT 10
18322: LESS
18323: IFFALSE 18386
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18325: LD_VAR 0 3
18329: PUSH
18330: LD_VAR 0 1
18334: ARRAY
18335: PPUSH
18336: LD_VAR 0 1
18340: PUSH
18341: LD_INT 4
18343: MOD
18344: PUSH
18345: LD_INT 1
18347: PLUS
18348: PPUSH
18349: LD_VAR 0 3
18353: PUSH
18354: LD_VAR 0 1
18358: ARRAY
18359: PPUSH
18360: LD_VAR 0 1
18364: PUSH
18365: LD_INT 4
18367: MOD
18368: PUSH
18369: LD_INT 1
18371: PLUS
18372: PPUSH
18373: CALL_OW 259
18377: PUSH
18378: LD_INT 1
18380: PLUS
18381: PPUSH
18382: CALL_OW 237
18386: GO 18288
18388: POP
18389: POP
// end ;
18390: PPOPN 3
18392: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18393: LD_EXP 48
18397: PUSH
18398: LD_EXP 56
18402: AND
18403: IFFALSE 18423
18405: GO 18407
18407: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18408: LD_INT 4
18410: PPUSH
18411: LD_OWVAR 2
18415: PPUSH
18416: LD_INT 0
18418: PPUSH
18419: CALL_OW 324
18423: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18424: LD_EXP 48
18428: PUSH
18429: LD_EXP 85
18433: AND
18434: IFFALSE 18454
18436: GO 18438
18438: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18439: LD_INT 19
18441: PPUSH
18442: LD_OWVAR 2
18446: PPUSH
18447: LD_INT 0
18449: PPUSH
18450: CALL_OW 324
18454: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18455: LD_EXP 48
18459: PUSH
18460: LD_EXP 57
18464: AND
18465: IFFALSE 18567
18467: GO 18469
18469: DISABLE
18470: LD_INT 0
18472: PPUSH
18473: PPUSH
// begin enable ;
18474: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18475: LD_ADDR_VAR 0 2
18479: PUSH
18480: LD_INT 22
18482: PUSH
18483: LD_OWVAR 2
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 2
18494: PUSH
18495: LD_INT 34
18497: PUSH
18498: LD_INT 11
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 34
18507: PUSH
18508: LD_INT 30
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PPUSH
18524: CALL_OW 69
18528: ST_TO_ADDR
// if not tmp then
18529: LD_VAR 0 2
18533: NOT
18534: IFFALSE 18538
// exit ;
18536: GO 18567
// for i in tmp do
18538: LD_ADDR_VAR 0 1
18542: PUSH
18543: LD_VAR 0 2
18547: PUSH
18548: FOR_IN
18549: IFFALSE 18565
// begin SetLives ( i , 0 ) ;
18551: LD_VAR 0 1
18555: PPUSH
18556: LD_INT 0
18558: PPUSH
18559: CALL_OW 234
// end ;
18563: GO 18548
18565: POP
18566: POP
// end ;
18567: PPOPN 2
18569: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18570: LD_EXP 48
18574: PUSH
18575: LD_EXP 58
18579: AND
18580: IFFALSE 18600
18582: GO 18584
18584: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18585: LD_INT 32
18587: PPUSH
18588: LD_OWVAR 2
18592: PPUSH
18593: LD_INT 0
18595: PPUSH
18596: CALL_OW 324
18600: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18601: LD_EXP 48
18605: PUSH
18606: LD_EXP 59
18610: AND
18611: IFFALSE 18792
18613: GO 18615
18615: DISABLE
18616: LD_INT 0
18618: PPUSH
18619: PPUSH
18620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18621: LD_ADDR_VAR 0 2
18625: PUSH
18626: LD_INT 22
18628: PUSH
18629: LD_OWVAR 2
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 33
18640: PUSH
18641: LD_INT 3
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PPUSH
18652: CALL_OW 69
18656: ST_TO_ADDR
// if not tmp then
18657: LD_VAR 0 2
18661: NOT
18662: IFFALSE 18666
// exit ;
18664: GO 18792
// side := 0 ;
18666: LD_ADDR_VAR 0 3
18670: PUSH
18671: LD_INT 0
18673: ST_TO_ADDR
// for i := 1 to 8 do
18674: LD_ADDR_VAR 0 1
18678: PUSH
18679: DOUBLE
18680: LD_INT 1
18682: DEC
18683: ST_TO_ADDR
18684: LD_INT 8
18686: PUSH
18687: FOR_TO
18688: IFFALSE 18736
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18690: LD_OWVAR 2
18694: PUSH
18695: LD_VAR 0 1
18699: NONEQUAL
18700: PUSH
18701: LD_OWVAR 2
18705: PPUSH
18706: LD_VAR 0 1
18710: PPUSH
18711: CALL_OW 81
18715: PUSH
18716: LD_INT 2
18718: EQUAL
18719: AND
18720: IFFALSE 18734
// begin side := i ;
18722: LD_ADDR_VAR 0 3
18726: PUSH
18727: LD_VAR 0 1
18731: ST_TO_ADDR
// break ;
18732: GO 18736
// end ;
18734: GO 18687
18736: POP
18737: POP
// if not side then
18738: LD_VAR 0 3
18742: NOT
18743: IFFALSE 18747
// exit ;
18745: GO 18792
// for i := 1 to tmp do
18747: LD_ADDR_VAR 0 1
18751: PUSH
18752: DOUBLE
18753: LD_INT 1
18755: DEC
18756: ST_TO_ADDR
18757: LD_VAR 0 2
18761: PUSH
18762: FOR_TO
18763: IFFALSE 18790
// if Prob ( 30 ) then
18765: LD_INT 30
18767: PPUSH
18768: CALL_OW 13
18772: IFFALSE 18788
// SetSide ( i , side ) ;
18774: LD_VAR 0 1
18778: PPUSH
18779: LD_VAR 0 3
18783: PPUSH
18784: CALL_OW 235
18788: GO 18762
18790: POP
18791: POP
// end ;
18792: PPOPN 3
18794: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18795: LD_EXP 48
18799: PUSH
18800: LD_EXP 61
18804: AND
18805: IFFALSE 18924
18807: GO 18809
18809: DISABLE
18810: LD_INT 0
18812: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18813: LD_ADDR_VAR 0 1
18817: PUSH
18818: LD_INT 22
18820: PUSH
18821: LD_OWVAR 2
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 21
18832: PUSH
18833: LD_INT 1
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 3
18842: PUSH
18843: LD_INT 23
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: PPUSH
18862: CALL_OW 69
18866: PUSH
18867: FOR_IN
18868: IFFALSE 18922
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18870: LD_VAR 0 1
18874: PPUSH
18875: CALL_OW 257
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: LD_INT 2
18885: PUSH
18886: LD_INT 3
18888: PUSH
18889: LD_INT 4
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: IN
18898: IFFALSE 18920
// SetClass ( un , rand ( 1 , 4 ) ) ;
18900: LD_VAR 0 1
18904: PPUSH
18905: LD_INT 1
18907: PPUSH
18908: LD_INT 4
18910: PPUSH
18911: CALL_OW 12
18915: PPUSH
18916: CALL_OW 336
18920: GO 18867
18922: POP
18923: POP
// end ;
18924: PPOPN 1
18926: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18927: LD_EXP 48
18931: PUSH
18932: LD_EXP 60
18936: AND
18937: IFFALSE 19016
18939: GO 18941
18941: DISABLE
18942: LD_INT 0
18944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18945: LD_ADDR_VAR 0 1
18949: PUSH
18950: LD_INT 22
18952: PUSH
18953: LD_OWVAR 2
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 21
18964: PUSH
18965: LD_INT 3
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PPUSH
18976: CALL_OW 69
18980: ST_TO_ADDR
// if not tmp then
18981: LD_VAR 0 1
18985: NOT
18986: IFFALSE 18990
// exit ;
18988: GO 19016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18990: LD_VAR 0 1
18994: PUSH
18995: LD_INT 1
18997: PPUSH
18998: LD_VAR 0 1
19002: PPUSH
19003: CALL_OW 12
19007: ARRAY
19008: PPUSH
19009: LD_INT 100
19011: PPUSH
19012: CALL_OW 234
// end ;
19016: PPOPN 1
19018: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19019: LD_EXP 48
19023: PUSH
19024: LD_EXP 62
19028: AND
19029: IFFALSE 19127
19031: GO 19033
19033: DISABLE
19034: LD_INT 0
19036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19037: LD_ADDR_VAR 0 1
19041: PUSH
19042: LD_INT 22
19044: PUSH
19045: LD_OWVAR 2
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 21
19056: PUSH
19057: LD_INT 1
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PPUSH
19068: CALL_OW 69
19072: ST_TO_ADDR
// if not tmp then
19073: LD_VAR 0 1
19077: NOT
19078: IFFALSE 19082
// exit ;
19080: GO 19127
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19082: LD_VAR 0 1
19086: PUSH
19087: LD_INT 1
19089: PPUSH
19090: LD_VAR 0 1
19094: PPUSH
19095: CALL_OW 12
19099: ARRAY
19100: PPUSH
19101: LD_INT 1
19103: PPUSH
19104: LD_INT 4
19106: PPUSH
19107: CALL_OW 12
19111: PPUSH
19112: LD_INT 3000
19114: PPUSH
19115: LD_INT 9000
19117: PPUSH
19118: CALL_OW 12
19122: PPUSH
19123: CALL_OW 492
// end ;
19127: PPOPN 1
19129: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19130: LD_EXP 48
19134: PUSH
19135: LD_EXP 63
19139: AND
19140: IFFALSE 19160
19142: GO 19144
19144: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19145: LD_INT 1
19147: PPUSH
19148: LD_OWVAR 2
19152: PPUSH
19153: LD_INT 0
19155: PPUSH
19156: CALL_OW 324
19160: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19161: LD_EXP 48
19165: PUSH
19166: LD_EXP 64
19170: AND
19171: IFFALSE 19254
19173: GO 19175
19175: DISABLE
19176: LD_INT 0
19178: PPUSH
19179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19180: LD_ADDR_VAR 0 2
19184: PUSH
19185: LD_INT 22
19187: PUSH
19188: LD_OWVAR 2
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 21
19199: PUSH
19200: LD_INT 3
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PPUSH
19211: CALL_OW 69
19215: ST_TO_ADDR
// if not tmp then
19216: LD_VAR 0 2
19220: NOT
19221: IFFALSE 19225
// exit ;
19223: GO 19254
// for i in tmp do
19225: LD_ADDR_VAR 0 1
19229: PUSH
19230: LD_VAR 0 2
19234: PUSH
19235: FOR_IN
19236: IFFALSE 19252
// SetBLevel ( i , 10 ) ;
19238: LD_VAR 0 1
19242: PPUSH
19243: LD_INT 10
19245: PPUSH
19246: CALL_OW 241
19250: GO 19235
19252: POP
19253: POP
// end ;
19254: PPOPN 2
19256: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19257: LD_EXP 48
19261: PUSH
19262: LD_EXP 65
19266: AND
19267: IFFALSE 19378
19269: GO 19271
19271: DISABLE
19272: LD_INT 0
19274: PPUSH
19275: PPUSH
19276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19277: LD_ADDR_VAR 0 3
19281: PUSH
19282: LD_INT 22
19284: PUSH
19285: LD_OWVAR 2
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 25
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PPUSH
19308: CALL_OW 69
19312: ST_TO_ADDR
// if not tmp then
19313: LD_VAR 0 3
19317: NOT
19318: IFFALSE 19322
// exit ;
19320: GO 19378
// un := tmp [ rand ( 1 , tmp ) ] ;
19322: LD_ADDR_VAR 0 2
19326: PUSH
19327: LD_VAR 0 3
19331: PUSH
19332: LD_INT 1
19334: PPUSH
19335: LD_VAR 0 3
19339: PPUSH
19340: CALL_OW 12
19344: ARRAY
19345: ST_TO_ADDR
// if Crawls ( un ) then
19346: LD_VAR 0 2
19350: PPUSH
19351: CALL_OW 318
19355: IFFALSE 19366
// ComWalk ( un ) ;
19357: LD_VAR 0 2
19361: PPUSH
19362: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19366: LD_VAR 0 2
19370: PPUSH
19371: LD_INT 5
19373: PPUSH
19374: CALL_OW 336
// end ;
19378: PPOPN 3
19380: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19381: LD_EXP 48
19385: PUSH
19386: LD_EXP 66
19390: AND
19391: PUSH
19392: LD_OWVAR 67
19396: PUSH
19397: LD_INT 3
19399: LESS
19400: AND
19401: IFFALSE 19420
19403: GO 19405
19405: DISABLE
// Difficulty := Difficulty + 1 ;
19406: LD_ADDR_OWVAR 67
19410: PUSH
19411: LD_OWVAR 67
19415: PUSH
19416: LD_INT 1
19418: PLUS
19419: ST_TO_ADDR
19420: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19421: LD_EXP 48
19425: PUSH
19426: LD_EXP 67
19430: AND
19431: IFFALSE 19534
19433: GO 19435
19435: DISABLE
19436: LD_INT 0
19438: PPUSH
// begin for i := 1 to 5 do
19439: LD_ADDR_VAR 0 1
19443: PUSH
19444: DOUBLE
19445: LD_INT 1
19447: DEC
19448: ST_TO_ADDR
19449: LD_INT 5
19451: PUSH
19452: FOR_TO
19453: IFFALSE 19532
// begin uc_nation := nation_nature ;
19455: LD_ADDR_OWVAR 21
19459: PUSH
19460: LD_INT 0
19462: ST_TO_ADDR
// uc_side := 0 ;
19463: LD_ADDR_OWVAR 20
19467: PUSH
19468: LD_INT 0
19470: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19471: LD_ADDR_OWVAR 29
19475: PUSH
19476: LD_INT 12
19478: PUSH
19479: LD_INT 12
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: ST_TO_ADDR
// hc_agressivity := 20 ;
19486: LD_ADDR_OWVAR 35
19490: PUSH
19491: LD_INT 20
19493: ST_TO_ADDR
// hc_class := class_tiger ;
19494: LD_ADDR_OWVAR 28
19498: PUSH
19499: LD_INT 14
19501: ST_TO_ADDR
// hc_gallery :=  ;
19502: LD_ADDR_OWVAR 33
19506: PUSH
19507: LD_STRING 
19509: ST_TO_ADDR
// hc_name :=  ;
19510: LD_ADDR_OWVAR 26
19514: PUSH
19515: LD_STRING 
19517: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19518: CALL_OW 44
19522: PPUSH
19523: LD_INT 0
19525: PPUSH
19526: CALL_OW 51
// end ;
19530: GO 19452
19532: POP
19533: POP
// end ;
19534: PPOPN 1
19536: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19537: LD_EXP 48
19541: PUSH
19542: LD_EXP 68
19546: AND
19547: IFFALSE 19556
19549: GO 19551
19551: DISABLE
// StreamSibBomb ;
19552: CALL 19557 0 0
19556: END
// export function StreamSibBomb ; var i , x , y ; begin
19557: LD_INT 0
19559: PPUSH
19560: PPUSH
19561: PPUSH
19562: PPUSH
// result := false ;
19563: LD_ADDR_VAR 0 1
19567: PUSH
19568: LD_INT 0
19570: ST_TO_ADDR
// for i := 1 to 16 do
19571: LD_ADDR_VAR 0 2
19575: PUSH
19576: DOUBLE
19577: LD_INT 1
19579: DEC
19580: ST_TO_ADDR
19581: LD_INT 16
19583: PUSH
19584: FOR_TO
19585: IFFALSE 19784
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19587: LD_ADDR_VAR 0 3
19591: PUSH
19592: LD_INT 10
19594: PUSH
19595: LD_INT 20
19597: PUSH
19598: LD_INT 30
19600: PUSH
19601: LD_INT 40
19603: PUSH
19604: LD_INT 50
19606: PUSH
19607: LD_INT 60
19609: PUSH
19610: LD_INT 70
19612: PUSH
19613: LD_INT 80
19615: PUSH
19616: LD_INT 90
19618: PUSH
19619: LD_INT 100
19621: PUSH
19622: LD_INT 110
19624: PUSH
19625: LD_INT 120
19627: PUSH
19628: LD_INT 130
19630: PUSH
19631: LD_INT 140
19633: PUSH
19634: LD_INT 150
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 1
19656: PPUSH
19657: LD_INT 15
19659: PPUSH
19660: CALL_OW 12
19664: ARRAY
19665: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19666: LD_ADDR_VAR 0 4
19670: PUSH
19671: LD_INT 10
19673: PUSH
19674: LD_INT 20
19676: PUSH
19677: LD_INT 30
19679: PUSH
19680: LD_INT 40
19682: PUSH
19683: LD_INT 50
19685: PUSH
19686: LD_INT 60
19688: PUSH
19689: LD_INT 70
19691: PUSH
19692: LD_INT 80
19694: PUSH
19695: LD_INT 90
19697: PUSH
19698: LD_INT 100
19700: PUSH
19701: LD_INT 110
19703: PUSH
19704: LD_INT 120
19706: PUSH
19707: LD_INT 130
19709: PUSH
19710: LD_INT 140
19712: PUSH
19713: LD_INT 150
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 1
19735: PPUSH
19736: LD_INT 15
19738: PPUSH
19739: CALL_OW 12
19743: ARRAY
19744: ST_TO_ADDR
// if ValidHex ( x , y ) then
19745: LD_VAR 0 3
19749: PPUSH
19750: LD_VAR 0 4
19754: PPUSH
19755: CALL_OW 488
19759: IFFALSE 19782
// begin result := [ x , y ] ;
19761: LD_ADDR_VAR 0 1
19765: PUSH
19766: LD_VAR 0 3
19770: PUSH
19771: LD_VAR 0 4
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: ST_TO_ADDR
// break ;
19780: GO 19784
// end ; end ;
19782: GO 19584
19784: POP
19785: POP
// if result then
19786: LD_VAR 0 1
19790: IFFALSE 19850
// begin ToLua ( playSibBomb() ) ;
19792: LD_STRING playSibBomb()
19794: PPUSH
19795: CALL_OW 559
// wait ( 0 0$14 ) ;
19799: LD_INT 490
19801: PPUSH
19802: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19806: LD_VAR 0 1
19810: PUSH
19811: LD_INT 1
19813: ARRAY
19814: PPUSH
19815: LD_VAR 0 1
19819: PUSH
19820: LD_INT 2
19822: ARRAY
19823: PPUSH
19824: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19828: LD_VAR 0 1
19832: PUSH
19833: LD_INT 1
19835: ARRAY
19836: PPUSH
19837: LD_VAR 0 1
19841: PUSH
19842: LD_INT 2
19844: ARRAY
19845: PPUSH
19846: CALL_OW 429
// end ; end ;
19850: LD_VAR 0 1
19854: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19855: LD_EXP 48
19859: PUSH
19860: LD_EXP 70
19864: AND
19865: IFFALSE 19877
19867: GO 19869
19869: DISABLE
// YouLost (  ) ;
19870: LD_STRING 
19872: PPUSH
19873: CALL_OW 104
19877: END
// every 0 0$1 trigger StreamModeActive and sFog do
19878: LD_EXP 48
19882: PUSH
19883: LD_EXP 69
19887: AND
19888: IFFALSE 19902
19890: GO 19892
19892: DISABLE
// FogOff ( your_side ) ;
19893: LD_OWVAR 2
19897: PPUSH
19898: CALL_OW 344
19902: END
// every 0 0$1 trigger StreamModeActive and sSun do
19903: LD_EXP 48
19907: PUSH
19908: LD_EXP 71
19912: AND
19913: IFFALSE 19941
19915: GO 19917
19917: DISABLE
// begin solar_recharge_percent := 0 ;
19918: LD_ADDR_OWVAR 79
19922: PUSH
19923: LD_INT 0
19925: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19926: LD_INT 10500
19928: PPUSH
19929: CALL_OW 67
// solar_recharge_percent := 100 ;
19933: LD_ADDR_OWVAR 79
19937: PUSH
19938: LD_INT 100
19940: ST_TO_ADDR
// end ;
19941: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19942: LD_EXP 48
19946: PUSH
19947: LD_EXP 72
19951: AND
19952: IFFALSE 20191
19954: GO 19956
19956: DISABLE
19957: LD_INT 0
19959: PPUSH
19960: PPUSH
19961: PPUSH
// begin tmp := [ ] ;
19962: LD_ADDR_VAR 0 3
19966: PUSH
19967: EMPTY
19968: ST_TO_ADDR
// for i := 1 to 6 do
19969: LD_ADDR_VAR 0 1
19973: PUSH
19974: DOUBLE
19975: LD_INT 1
19977: DEC
19978: ST_TO_ADDR
19979: LD_INT 6
19981: PUSH
19982: FOR_TO
19983: IFFALSE 20088
// begin uc_nation := nation_nature ;
19985: LD_ADDR_OWVAR 21
19989: PUSH
19990: LD_INT 0
19992: ST_TO_ADDR
// uc_side := 0 ;
19993: LD_ADDR_OWVAR 20
19997: PUSH
19998: LD_INT 0
20000: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20001: LD_ADDR_OWVAR 29
20005: PUSH
20006: LD_INT 12
20008: PUSH
20009: LD_INT 12
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: ST_TO_ADDR
// hc_agressivity := 20 ;
20016: LD_ADDR_OWVAR 35
20020: PUSH
20021: LD_INT 20
20023: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20024: LD_ADDR_OWVAR 28
20028: PUSH
20029: LD_INT 17
20031: ST_TO_ADDR
// hc_gallery :=  ;
20032: LD_ADDR_OWVAR 33
20036: PUSH
20037: LD_STRING 
20039: ST_TO_ADDR
// hc_name :=  ;
20040: LD_ADDR_OWVAR 26
20044: PUSH
20045: LD_STRING 
20047: ST_TO_ADDR
// un := CreateHuman ;
20048: LD_ADDR_VAR 0 2
20052: PUSH
20053: CALL_OW 44
20057: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20058: LD_VAR 0 2
20062: PPUSH
20063: LD_INT 1
20065: PPUSH
20066: CALL_OW 51
// tmp := tmp ^ un ;
20070: LD_ADDR_VAR 0 3
20074: PUSH
20075: LD_VAR 0 3
20079: PUSH
20080: LD_VAR 0 2
20084: ADD
20085: ST_TO_ADDR
// end ;
20086: GO 19982
20088: POP
20089: POP
// repeat wait ( 0 0$1 ) ;
20090: LD_INT 35
20092: PPUSH
20093: CALL_OW 67
// for un in tmp do
20097: LD_ADDR_VAR 0 2
20101: PUSH
20102: LD_VAR 0 3
20106: PUSH
20107: FOR_IN
20108: IFFALSE 20182
// begin if IsDead ( un ) then
20110: LD_VAR 0 2
20114: PPUSH
20115: CALL_OW 301
20119: IFFALSE 20139
// begin tmp := tmp diff un ;
20121: LD_ADDR_VAR 0 3
20125: PUSH
20126: LD_VAR 0 3
20130: PUSH
20131: LD_VAR 0 2
20135: DIFF
20136: ST_TO_ADDR
// continue ;
20137: GO 20107
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20139: LD_VAR 0 2
20143: PPUSH
20144: LD_INT 3
20146: PUSH
20147: LD_INT 22
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PPUSH
20161: CALL_OW 69
20165: PPUSH
20166: LD_VAR 0 2
20170: PPUSH
20171: CALL_OW 74
20175: PPUSH
20176: CALL_OW 115
// end ;
20180: GO 20107
20182: POP
20183: POP
// until not tmp ;
20184: LD_VAR 0 3
20188: NOT
20189: IFFALSE 20090
// end ;
20191: PPOPN 3
20193: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20194: LD_EXP 48
20198: PUSH
20199: LD_EXP 73
20203: AND
20204: IFFALSE 20258
20206: GO 20208
20208: DISABLE
// begin ToLua ( displayTroll(); ) ;
20209: LD_STRING displayTroll();
20211: PPUSH
20212: CALL_OW 559
// wait ( 3 3$00 ) ;
20216: LD_INT 6300
20218: PPUSH
20219: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20223: LD_STRING hideTroll();
20225: PPUSH
20226: CALL_OW 559
// wait ( 1 1$00 ) ;
20230: LD_INT 2100
20232: PPUSH
20233: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20237: LD_STRING displayTroll();
20239: PPUSH
20240: CALL_OW 559
// wait ( 1 1$00 ) ;
20244: LD_INT 2100
20246: PPUSH
20247: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20251: LD_STRING hideTroll();
20253: PPUSH
20254: CALL_OW 559
// end ;
20258: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20259: LD_EXP 48
20263: PUSH
20264: LD_EXP 74
20268: AND
20269: IFFALSE 20332
20271: GO 20273
20273: DISABLE
20274: LD_INT 0
20276: PPUSH
// begin p := 0 ;
20277: LD_ADDR_VAR 0 1
20281: PUSH
20282: LD_INT 0
20284: ST_TO_ADDR
// repeat game_speed := 1 ;
20285: LD_ADDR_OWVAR 65
20289: PUSH
20290: LD_INT 1
20292: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20293: LD_INT 35
20295: PPUSH
20296: CALL_OW 67
// p := p + 1 ;
20300: LD_ADDR_VAR 0 1
20304: PUSH
20305: LD_VAR 0 1
20309: PUSH
20310: LD_INT 1
20312: PLUS
20313: ST_TO_ADDR
// until p >= 60 ;
20314: LD_VAR 0 1
20318: PUSH
20319: LD_INT 60
20321: GREATEREQUAL
20322: IFFALSE 20285
// game_speed := 4 ;
20324: LD_ADDR_OWVAR 65
20328: PUSH
20329: LD_INT 4
20331: ST_TO_ADDR
// end ;
20332: PPOPN 1
20334: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20335: LD_EXP 48
20339: PUSH
20340: LD_EXP 75
20344: AND
20345: IFFALSE 20491
20347: GO 20349
20349: DISABLE
20350: LD_INT 0
20352: PPUSH
20353: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20354: LD_ADDR_VAR 0 1
20358: PUSH
20359: LD_INT 22
20361: PUSH
20362: LD_OWVAR 2
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 2
20373: PUSH
20374: LD_INT 30
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 30
20386: PUSH
20387: LD_INT 1
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: LIST
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PPUSH
20403: CALL_OW 69
20407: ST_TO_ADDR
// if not depot then
20408: LD_VAR 0 1
20412: NOT
20413: IFFALSE 20417
// exit ;
20415: GO 20491
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20417: LD_ADDR_VAR 0 2
20421: PUSH
20422: LD_VAR 0 1
20426: PUSH
20427: LD_INT 1
20429: PPUSH
20430: LD_VAR 0 1
20434: PPUSH
20435: CALL_OW 12
20439: ARRAY
20440: PPUSH
20441: CALL_OW 274
20445: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20446: LD_VAR 0 2
20450: PPUSH
20451: LD_INT 1
20453: PPUSH
20454: LD_INT 0
20456: PPUSH
20457: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20461: LD_VAR 0 2
20465: PPUSH
20466: LD_INT 2
20468: PPUSH
20469: LD_INT 0
20471: PPUSH
20472: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20476: LD_VAR 0 2
20480: PPUSH
20481: LD_INT 3
20483: PPUSH
20484: LD_INT 0
20486: PPUSH
20487: CALL_OW 277
// end ;
20491: PPOPN 2
20493: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20494: LD_EXP 48
20498: PUSH
20499: LD_EXP 76
20503: AND
20504: IFFALSE 20601
20506: GO 20508
20508: DISABLE
20509: LD_INT 0
20511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20512: LD_ADDR_VAR 0 1
20516: PUSH
20517: LD_INT 22
20519: PUSH
20520: LD_OWVAR 2
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 21
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 3
20541: PUSH
20542: LD_INT 23
20544: PUSH
20545: LD_INT 0
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: PPUSH
20561: CALL_OW 69
20565: ST_TO_ADDR
// if not tmp then
20566: LD_VAR 0 1
20570: NOT
20571: IFFALSE 20575
// exit ;
20573: GO 20601
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20575: LD_VAR 0 1
20579: PUSH
20580: LD_INT 1
20582: PPUSH
20583: LD_VAR 0 1
20587: PPUSH
20588: CALL_OW 12
20592: ARRAY
20593: PPUSH
20594: LD_INT 200
20596: PPUSH
20597: CALL_OW 234
// end ;
20601: PPOPN 1
20603: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20604: LD_EXP 48
20608: PUSH
20609: LD_EXP 77
20613: AND
20614: IFFALSE 20693
20616: GO 20618
20618: DISABLE
20619: LD_INT 0
20621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20622: LD_ADDR_VAR 0 1
20626: PUSH
20627: LD_INT 22
20629: PUSH
20630: LD_OWVAR 2
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 21
20641: PUSH
20642: LD_INT 2
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PPUSH
20653: CALL_OW 69
20657: ST_TO_ADDR
// if not tmp then
20658: LD_VAR 0 1
20662: NOT
20663: IFFALSE 20667
// exit ;
20665: GO 20693
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20667: LD_VAR 0 1
20671: PUSH
20672: LD_INT 1
20674: PPUSH
20675: LD_VAR 0 1
20679: PPUSH
20680: CALL_OW 12
20684: ARRAY
20685: PPUSH
20686: LD_INT 60
20688: PPUSH
20689: CALL_OW 234
// end ;
20693: PPOPN 1
20695: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20696: LD_EXP 48
20700: PUSH
20701: LD_EXP 78
20705: AND
20706: IFFALSE 20805
20708: GO 20710
20710: DISABLE
20711: LD_INT 0
20713: PPUSH
20714: PPUSH
// begin enable ;
20715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20716: LD_ADDR_VAR 0 1
20720: PUSH
20721: LD_INT 22
20723: PUSH
20724: LD_OWVAR 2
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 61
20735: PUSH
20736: EMPTY
20737: LIST
20738: PUSH
20739: LD_INT 33
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: PPUSH
20754: CALL_OW 69
20758: ST_TO_ADDR
// if not tmp then
20759: LD_VAR 0 1
20763: NOT
20764: IFFALSE 20768
// exit ;
20766: GO 20805
// for i in tmp do
20768: LD_ADDR_VAR 0 2
20772: PUSH
20773: LD_VAR 0 1
20777: PUSH
20778: FOR_IN
20779: IFFALSE 20803
// if IsControledBy ( i ) then
20781: LD_VAR 0 2
20785: PPUSH
20786: CALL_OW 312
20790: IFFALSE 20801
// ComUnlink ( i ) ;
20792: LD_VAR 0 2
20796: PPUSH
20797: CALL_OW 136
20801: GO 20778
20803: POP
20804: POP
// end ;
20805: PPOPN 2
20807: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20808: LD_EXP 48
20812: PUSH
20813: LD_EXP 79
20817: AND
20818: IFFALSE 20952
20820: GO 20822
20822: DISABLE
20823: LD_INT 0
20825: PPUSH
20826: PPUSH
// begin ToLua ( displayPowell(); ) ;
20827: LD_STRING displayPowell();
20829: PPUSH
20830: CALL_OW 559
// uc_side := 0 ;
20834: LD_ADDR_OWVAR 20
20838: PUSH
20839: LD_INT 0
20841: ST_TO_ADDR
// uc_nation := 2 ;
20842: LD_ADDR_OWVAR 21
20846: PUSH
20847: LD_INT 2
20849: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20850: LD_ADDR_OWVAR 37
20854: PUSH
20855: LD_INT 14
20857: ST_TO_ADDR
// vc_engine := engine_siberite ;
20858: LD_ADDR_OWVAR 39
20862: PUSH
20863: LD_INT 3
20865: ST_TO_ADDR
// vc_control := control_apeman ;
20866: LD_ADDR_OWVAR 38
20870: PUSH
20871: LD_INT 5
20873: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20874: LD_ADDR_OWVAR 40
20878: PUSH
20879: LD_INT 29
20881: ST_TO_ADDR
// un := CreateVehicle ;
20882: LD_ADDR_VAR 0 2
20886: PUSH
20887: CALL_OW 45
20891: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20892: LD_VAR 0 2
20896: PPUSH
20897: LD_INT 1
20899: PPUSH
20900: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20904: LD_INT 35
20906: PPUSH
20907: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20911: LD_VAR 0 2
20915: PPUSH
20916: LD_OWVAR 3
20920: PUSH
20921: LD_VAR 0 2
20925: DIFF
20926: PPUSH
20927: LD_VAR 0 2
20931: PPUSH
20932: CALL_OW 74
20936: PPUSH
20937: CALL_OW 115
// until IsOk ( un ) ;
20941: LD_VAR 0 2
20945: PPUSH
20946: CALL_OW 302
20950: IFFALSE 20904
// end ;
20952: PPOPN 2
20954: END
// every 0 0$1 trigger StreamModeActive and sStu do
20955: LD_EXP 48
20959: PUSH
20960: LD_EXP 87
20964: AND
20965: IFFALSE 20977
20967: GO 20969
20969: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20970: LD_STRING displayStucuk();
20972: PPUSH
20973: CALL_OW 559
// end ;
20977: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20978: LD_EXP 48
20982: PUSH
20983: LD_EXP 80
20987: AND
20988: IFFALSE 21129
20990: GO 20992
20992: DISABLE
20993: LD_INT 0
20995: PPUSH
20996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20997: LD_ADDR_VAR 0 2
21001: PUSH
21002: LD_INT 22
21004: PUSH
21005: LD_OWVAR 2
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 21
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PPUSH
21028: CALL_OW 69
21032: ST_TO_ADDR
// if not tmp then
21033: LD_VAR 0 2
21037: NOT
21038: IFFALSE 21042
// exit ;
21040: GO 21129
// un := tmp [ rand ( 1 , tmp ) ] ;
21042: LD_ADDR_VAR 0 1
21046: PUSH
21047: LD_VAR 0 2
21051: PUSH
21052: LD_INT 1
21054: PPUSH
21055: LD_VAR 0 2
21059: PPUSH
21060: CALL_OW 12
21064: ARRAY
21065: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21066: LD_VAR 0 1
21070: PPUSH
21071: LD_INT 0
21073: PPUSH
21074: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21078: LD_VAR 0 1
21082: PPUSH
21083: LD_OWVAR 3
21087: PUSH
21088: LD_VAR 0 1
21092: DIFF
21093: PPUSH
21094: LD_VAR 0 1
21098: PPUSH
21099: CALL_OW 74
21103: PPUSH
21104: CALL_OW 115
// wait ( 0 0$20 ) ;
21108: LD_INT 700
21110: PPUSH
21111: CALL_OW 67
// SetSide ( un , your_side ) ;
21115: LD_VAR 0 1
21119: PPUSH
21120: LD_OWVAR 2
21124: PPUSH
21125: CALL_OW 235
// end ;
21129: PPOPN 2
21131: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21132: LD_EXP 48
21136: PUSH
21137: LD_EXP 81
21141: AND
21142: IFFALSE 21248
21144: GO 21146
21146: DISABLE
21147: LD_INT 0
21149: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21150: LD_ADDR_VAR 0 1
21154: PUSH
21155: LD_INT 22
21157: PUSH
21158: LD_OWVAR 2
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 2
21169: PUSH
21170: LD_INT 30
21172: PUSH
21173: LD_INT 0
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 30
21182: PUSH
21183: LD_INT 1
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: LIST
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PPUSH
21199: CALL_OW 69
21203: ST_TO_ADDR
// if not depot then
21204: LD_VAR 0 1
21208: NOT
21209: IFFALSE 21213
// exit ;
21211: GO 21248
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21213: LD_VAR 0 1
21217: PUSH
21218: LD_INT 1
21220: ARRAY
21221: PPUSH
21222: CALL_OW 250
21226: PPUSH
21227: LD_VAR 0 1
21231: PUSH
21232: LD_INT 1
21234: ARRAY
21235: PPUSH
21236: CALL_OW 251
21240: PPUSH
21241: LD_INT 70
21243: PPUSH
21244: CALL_OW 495
// end ;
21248: PPOPN 1
21250: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21251: LD_EXP 48
21255: PUSH
21256: LD_EXP 82
21260: AND
21261: IFFALSE 21472
21263: GO 21265
21265: DISABLE
21266: LD_INT 0
21268: PPUSH
21269: PPUSH
21270: PPUSH
21271: PPUSH
21272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21273: LD_ADDR_VAR 0 5
21277: PUSH
21278: LD_INT 22
21280: PUSH
21281: LD_OWVAR 2
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 21
21292: PUSH
21293: LD_INT 1
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PPUSH
21304: CALL_OW 69
21308: ST_TO_ADDR
// if not tmp then
21309: LD_VAR 0 5
21313: NOT
21314: IFFALSE 21318
// exit ;
21316: GO 21472
// for i in tmp do
21318: LD_ADDR_VAR 0 1
21322: PUSH
21323: LD_VAR 0 5
21327: PUSH
21328: FOR_IN
21329: IFFALSE 21470
// begin d := rand ( 0 , 5 ) ;
21331: LD_ADDR_VAR 0 4
21335: PUSH
21336: LD_INT 0
21338: PPUSH
21339: LD_INT 5
21341: PPUSH
21342: CALL_OW 12
21346: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21347: LD_ADDR_VAR 0 2
21351: PUSH
21352: LD_VAR 0 1
21356: PPUSH
21357: CALL_OW 250
21361: PPUSH
21362: LD_VAR 0 4
21366: PPUSH
21367: LD_INT 3
21369: PPUSH
21370: LD_INT 12
21372: PPUSH
21373: CALL_OW 12
21377: PPUSH
21378: CALL_OW 272
21382: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21383: LD_ADDR_VAR 0 3
21387: PUSH
21388: LD_VAR 0 1
21392: PPUSH
21393: CALL_OW 251
21397: PPUSH
21398: LD_VAR 0 4
21402: PPUSH
21403: LD_INT 3
21405: PPUSH
21406: LD_INT 12
21408: PPUSH
21409: CALL_OW 12
21413: PPUSH
21414: CALL_OW 273
21418: ST_TO_ADDR
// if ValidHex ( x , y ) then
21419: LD_VAR 0 2
21423: PPUSH
21424: LD_VAR 0 3
21428: PPUSH
21429: CALL_OW 488
21433: IFFALSE 21468
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21435: LD_VAR 0 1
21439: PPUSH
21440: LD_VAR 0 2
21444: PPUSH
21445: LD_VAR 0 3
21449: PPUSH
21450: LD_INT 3
21452: PPUSH
21453: LD_INT 6
21455: PPUSH
21456: CALL_OW 12
21460: PPUSH
21461: LD_INT 1
21463: PPUSH
21464: CALL_OW 483
// end ;
21468: GO 21328
21470: POP
21471: POP
// end ;
21472: PPOPN 5
21474: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21475: LD_EXP 48
21479: PUSH
21480: LD_EXP 83
21484: AND
21485: IFFALSE 21579
21487: GO 21489
21489: DISABLE
21490: LD_INT 0
21492: PPUSH
21493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21494: LD_ADDR_VAR 0 2
21498: PUSH
21499: LD_INT 22
21501: PUSH
21502: LD_OWVAR 2
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 32
21513: PUSH
21514: LD_INT 1
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 21
21523: PUSH
21524: LD_INT 2
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: LIST
21535: PPUSH
21536: CALL_OW 69
21540: ST_TO_ADDR
// if not tmp then
21541: LD_VAR 0 2
21545: NOT
21546: IFFALSE 21550
// exit ;
21548: GO 21579
// for i in tmp do
21550: LD_ADDR_VAR 0 1
21554: PUSH
21555: LD_VAR 0 2
21559: PUSH
21560: FOR_IN
21561: IFFALSE 21577
// SetFuel ( i , 0 ) ;
21563: LD_VAR 0 1
21567: PPUSH
21568: LD_INT 0
21570: PPUSH
21571: CALL_OW 240
21575: GO 21560
21577: POP
21578: POP
// end ;
21579: PPOPN 2
21581: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21582: LD_EXP 48
21586: PUSH
21587: LD_EXP 84
21591: AND
21592: IFFALSE 21658
21594: GO 21596
21596: DISABLE
21597: LD_INT 0
21599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21600: LD_ADDR_VAR 0 1
21604: PUSH
21605: LD_INT 22
21607: PUSH
21608: LD_OWVAR 2
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 30
21619: PUSH
21620: LD_INT 29
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PPUSH
21631: CALL_OW 69
21635: ST_TO_ADDR
// if not tmp then
21636: LD_VAR 0 1
21640: NOT
21641: IFFALSE 21645
// exit ;
21643: GO 21658
// DestroyUnit ( tmp [ 1 ] ) ;
21645: LD_VAR 0 1
21649: PUSH
21650: LD_INT 1
21652: ARRAY
21653: PPUSH
21654: CALL_OW 65
// end ;
21658: PPOPN 1
21660: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21661: LD_EXP 48
21665: PUSH
21666: LD_EXP 86
21670: AND
21671: IFFALSE 21800
21673: GO 21675
21675: DISABLE
21676: LD_INT 0
21678: PPUSH
// begin uc_side := 0 ;
21679: LD_ADDR_OWVAR 20
21683: PUSH
21684: LD_INT 0
21686: ST_TO_ADDR
// uc_nation := nation_arabian ;
21687: LD_ADDR_OWVAR 21
21691: PUSH
21692: LD_INT 2
21694: ST_TO_ADDR
// hc_gallery :=  ;
21695: LD_ADDR_OWVAR 33
21699: PUSH
21700: LD_STRING 
21702: ST_TO_ADDR
// hc_name :=  ;
21703: LD_ADDR_OWVAR 26
21707: PUSH
21708: LD_STRING 
21710: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21711: LD_INT 1
21713: PPUSH
21714: LD_INT 11
21716: PPUSH
21717: LD_INT 10
21719: PPUSH
21720: CALL_OW 380
// un := CreateHuman ;
21724: LD_ADDR_VAR 0 1
21728: PUSH
21729: CALL_OW 44
21733: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21734: LD_VAR 0 1
21738: PPUSH
21739: LD_INT 1
21741: PPUSH
21742: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21746: LD_INT 35
21748: PPUSH
21749: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21753: LD_VAR 0 1
21757: PPUSH
21758: LD_INT 22
21760: PUSH
21761: LD_OWVAR 2
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PPUSH
21770: CALL_OW 69
21774: PPUSH
21775: LD_VAR 0 1
21779: PPUSH
21780: CALL_OW 74
21784: PPUSH
21785: CALL_OW 115
// until IsDead ( un ) ;
21789: LD_VAR 0 1
21793: PPUSH
21794: CALL_OW 301
21798: IFFALSE 21746
// end ;
21800: PPOPN 1
21802: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21803: LD_EXP 48
21807: PUSH
21808: LD_EXP 88
21812: AND
21813: IFFALSE 21825
21815: GO 21817
21817: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21818: LD_STRING earthquake(getX(game), 0, 32)
21820: PPUSH
21821: CALL_OW 559
21825: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21826: LD_EXP 48
21830: PUSH
21831: LD_EXP 89
21835: AND
21836: IFFALSE 21927
21838: GO 21840
21840: DISABLE
21841: LD_INT 0
21843: PPUSH
// begin enable ;
21844: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21845: LD_ADDR_VAR 0 1
21849: PUSH
21850: LD_INT 22
21852: PUSH
21853: LD_OWVAR 2
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 21
21864: PUSH
21865: LD_INT 2
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 33
21874: PUSH
21875: LD_INT 3
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: LIST
21886: PPUSH
21887: CALL_OW 69
21891: ST_TO_ADDR
// if not tmp then
21892: LD_VAR 0 1
21896: NOT
21897: IFFALSE 21901
// exit ;
21899: GO 21927
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21901: LD_VAR 0 1
21905: PUSH
21906: LD_INT 1
21908: PPUSH
21909: LD_VAR 0 1
21913: PPUSH
21914: CALL_OW 12
21918: ARRAY
21919: PPUSH
21920: LD_INT 1
21922: PPUSH
21923: CALL_OW 234
// end ;
21927: PPOPN 1
21929: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21930: LD_EXP 48
21934: PUSH
21935: LD_EXP 90
21939: AND
21940: IFFALSE 22081
21942: GO 21944
21944: DISABLE
21945: LD_INT 0
21947: PPUSH
21948: PPUSH
21949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21950: LD_ADDR_VAR 0 3
21954: PUSH
21955: LD_INT 22
21957: PUSH
21958: LD_OWVAR 2
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 25
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PPUSH
21981: CALL_OW 69
21985: ST_TO_ADDR
// if not tmp then
21986: LD_VAR 0 3
21990: NOT
21991: IFFALSE 21995
// exit ;
21993: GO 22081
// un := tmp [ rand ( 1 , tmp ) ] ;
21995: LD_ADDR_VAR 0 2
21999: PUSH
22000: LD_VAR 0 3
22004: PUSH
22005: LD_INT 1
22007: PPUSH
22008: LD_VAR 0 3
22012: PPUSH
22013: CALL_OW 12
22017: ARRAY
22018: ST_TO_ADDR
// if Crawls ( un ) then
22019: LD_VAR 0 2
22023: PPUSH
22024: CALL_OW 318
22028: IFFALSE 22039
// ComWalk ( un ) ;
22030: LD_VAR 0 2
22034: PPUSH
22035: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22039: LD_VAR 0 2
22043: PPUSH
22044: LD_INT 9
22046: PPUSH
22047: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22051: LD_INT 28
22053: PPUSH
22054: LD_OWVAR 2
22058: PPUSH
22059: LD_INT 2
22061: PPUSH
22062: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22066: LD_INT 29
22068: PPUSH
22069: LD_OWVAR 2
22073: PPUSH
22074: LD_INT 2
22076: PPUSH
22077: CALL_OW 322
// end ;
22081: PPOPN 3
22083: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22084: LD_EXP 48
22088: PUSH
22089: LD_EXP 91
22093: AND
22094: IFFALSE 22205
22096: GO 22098
22098: DISABLE
22099: LD_INT 0
22101: PPUSH
22102: PPUSH
22103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22104: LD_ADDR_VAR 0 3
22108: PUSH
22109: LD_INT 22
22111: PUSH
22112: LD_OWVAR 2
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 25
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PPUSH
22135: CALL_OW 69
22139: ST_TO_ADDR
// if not tmp then
22140: LD_VAR 0 3
22144: NOT
22145: IFFALSE 22149
// exit ;
22147: GO 22205
// un := tmp [ rand ( 1 , tmp ) ] ;
22149: LD_ADDR_VAR 0 2
22153: PUSH
22154: LD_VAR 0 3
22158: PUSH
22159: LD_INT 1
22161: PPUSH
22162: LD_VAR 0 3
22166: PPUSH
22167: CALL_OW 12
22171: ARRAY
22172: ST_TO_ADDR
// if Crawls ( un ) then
22173: LD_VAR 0 2
22177: PPUSH
22178: CALL_OW 318
22182: IFFALSE 22193
// ComWalk ( un ) ;
22184: LD_VAR 0 2
22188: PPUSH
22189: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22193: LD_VAR 0 2
22197: PPUSH
22198: LD_INT 8
22200: PPUSH
22201: CALL_OW 336
// end ;
22205: PPOPN 3
22207: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22208: LD_EXP 48
22212: PUSH
22213: LD_EXP 92
22217: AND
22218: IFFALSE 22362
22220: GO 22222
22222: DISABLE
22223: LD_INT 0
22225: PPUSH
22226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22227: LD_ADDR_VAR 0 2
22231: PUSH
22232: LD_INT 22
22234: PUSH
22235: LD_OWVAR 2
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 21
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 2
22256: PUSH
22257: LD_INT 34
22259: PUSH
22260: LD_INT 12
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 34
22269: PUSH
22270: LD_INT 51
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 34
22279: PUSH
22280: LD_INT 32
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: PPUSH
22298: CALL_OW 69
22302: ST_TO_ADDR
// if not tmp then
22303: LD_VAR 0 2
22307: NOT
22308: IFFALSE 22312
// exit ;
22310: GO 22362
// for i in tmp do
22312: LD_ADDR_VAR 0 1
22316: PUSH
22317: LD_VAR 0 2
22321: PUSH
22322: FOR_IN
22323: IFFALSE 22360
// if GetCargo ( i , mat_artifact ) = 0 then
22325: LD_VAR 0 1
22329: PPUSH
22330: LD_INT 4
22332: PPUSH
22333: CALL_OW 289
22337: PUSH
22338: LD_INT 0
22340: EQUAL
22341: IFFALSE 22358
// SetCargo ( i , mat_siberit , 100 ) ;
22343: LD_VAR 0 1
22347: PPUSH
22348: LD_INT 3
22350: PPUSH
22351: LD_INT 100
22353: PPUSH
22354: CALL_OW 290
22358: GO 22322
22360: POP
22361: POP
// end ;
22362: PPOPN 2
22364: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22365: LD_EXP 48
22369: PUSH
22370: LD_EXP 93
22374: AND
22375: IFFALSE 22528
22377: GO 22379
22379: DISABLE
22380: LD_INT 0
22382: PPUSH
22383: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22384: LD_ADDR_VAR 0 2
22388: PUSH
22389: LD_INT 22
22391: PUSH
22392: LD_OWVAR 2
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PPUSH
22401: CALL_OW 69
22405: ST_TO_ADDR
// if not tmp then
22406: LD_VAR 0 2
22410: NOT
22411: IFFALSE 22415
// exit ;
22413: GO 22528
// for i := 1 to 2 do
22415: LD_ADDR_VAR 0 1
22419: PUSH
22420: DOUBLE
22421: LD_INT 1
22423: DEC
22424: ST_TO_ADDR
22425: LD_INT 2
22427: PUSH
22428: FOR_TO
22429: IFFALSE 22526
// begin uc_side := your_side ;
22431: LD_ADDR_OWVAR 20
22435: PUSH
22436: LD_OWVAR 2
22440: ST_TO_ADDR
// uc_nation := nation_american ;
22441: LD_ADDR_OWVAR 21
22445: PUSH
22446: LD_INT 1
22448: ST_TO_ADDR
// vc_chassis := us_morphling ;
22449: LD_ADDR_OWVAR 37
22453: PUSH
22454: LD_INT 5
22456: ST_TO_ADDR
// vc_engine := engine_siberite ;
22457: LD_ADDR_OWVAR 39
22461: PUSH
22462: LD_INT 3
22464: ST_TO_ADDR
// vc_control := control_computer ;
22465: LD_ADDR_OWVAR 38
22469: PUSH
22470: LD_INT 3
22472: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22473: LD_ADDR_OWVAR 40
22477: PUSH
22478: LD_INT 10
22480: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
22481: CALL_OW 45
22485: PPUSH
22486: LD_VAR 0 2
22490: PUSH
22491: LD_INT 1
22493: ARRAY
22494: PPUSH
22495: CALL_OW 250
22499: PPUSH
22500: LD_VAR 0 2
22504: PUSH
22505: LD_INT 1
22507: ARRAY
22508: PPUSH
22509: CALL_OW 251
22513: PPUSH
22514: LD_INT 12
22516: PPUSH
22517: LD_INT 1
22519: PPUSH
22520: CALL_OW 50
// end ;
22524: GO 22428
22526: POP
22527: POP
// end ;
22528: PPOPN 2
22530: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22531: LD_EXP 48
22535: PUSH
22536: LD_EXP 94
22540: AND
22541: IFFALSE 22763
22543: GO 22545
22545: DISABLE
22546: LD_INT 0
22548: PPUSH
22549: PPUSH
22550: PPUSH
22551: PPUSH
22552: PPUSH
22553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22554: LD_ADDR_VAR 0 6
22558: PUSH
22559: LD_INT 22
22561: PUSH
22562: LD_OWVAR 2
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 21
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 3
22583: PUSH
22584: LD_INT 23
22586: PUSH
22587: LD_INT 0
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: PPUSH
22603: CALL_OW 69
22607: ST_TO_ADDR
// if not tmp then
22608: LD_VAR 0 6
22612: NOT
22613: IFFALSE 22617
// exit ;
22615: GO 22763
// s1 := rand ( 1 , 4 ) ;
22617: LD_ADDR_VAR 0 2
22621: PUSH
22622: LD_INT 1
22624: PPUSH
22625: LD_INT 4
22627: PPUSH
22628: CALL_OW 12
22632: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22633: LD_ADDR_VAR 0 4
22637: PUSH
22638: LD_VAR 0 6
22642: PUSH
22643: LD_INT 1
22645: ARRAY
22646: PPUSH
22647: LD_VAR 0 2
22651: PPUSH
22652: CALL_OW 259
22656: ST_TO_ADDR
// if s1 = 1 then
22657: LD_VAR 0 2
22661: PUSH
22662: LD_INT 1
22664: EQUAL
22665: IFFALSE 22685
// s2 := rand ( 2 , 4 ) else
22667: LD_ADDR_VAR 0 3
22671: PUSH
22672: LD_INT 2
22674: PPUSH
22675: LD_INT 4
22677: PPUSH
22678: CALL_OW 12
22682: ST_TO_ADDR
22683: GO 22693
// s2 := 1 ;
22685: LD_ADDR_VAR 0 3
22689: PUSH
22690: LD_INT 1
22692: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22693: LD_ADDR_VAR 0 5
22697: PUSH
22698: LD_VAR 0 6
22702: PUSH
22703: LD_INT 1
22705: ARRAY
22706: PPUSH
22707: LD_VAR 0 3
22711: PPUSH
22712: CALL_OW 259
22716: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22717: LD_VAR 0 6
22721: PUSH
22722: LD_INT 1
22724: ARRAY
22725: PPUSH
22726: LD_VAR 0 2
22730: PPUSH
22731: LD_VAR 0 5
22735: PPUSH
22736: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22740: LD_VAR 0 6
22744: PUSH
22745: LD_INT 1
22747: ARRAY
22748: PPUSH
22749: LD_VAR 0 3
22753: PPUSH
22754: LD_VAR 0 4
22758: PPUSH
22759: CALL_OW 237
// end ;
22763: PPOPN 6
22765: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22766: LD_EXP 48
22770: PUSH
22771: LD_EXP 95
22775: AND
22776: IFFALSE 22855
22778: GO 22780
22780: DISABLE
22781: LD_INT 0
22783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22784: LD_ADDR_VAR 0 1
22788: PUSH
22789: LD_INT 22
22791: PUSH
22792: LD_OWVAR 2
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 30
22803: PUSH
22804: LD_INT 3
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PPUSH
22815: CALL_OW 69
22819: ST_TO_ADDR
// if not tmp then
22820: LD_VAR 0 1
22824: NOT
22825: IFFALSE 22829
// exit ;
22827: GO 22855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22829: LD_VAR 0 1
22833: PUSH
22834: LD_INT 1
22836: PPUSH
22837: LD_VAR 0 1
22841: PPUSH
22842: CALL_OW 12
22846: ARRAY
22847: PPUSH
22848: LD_INT 1
22850: PPUSH
22851: CALL_OW 234
// end ;
22855: PPOPN 1
22857: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22858: LD_EXP 48
22862: PUSH
22863: LD_EXP 96
22867: AND
22868: IFFALSE 22980
22870: GO 22872
22872: DISABLE
22873: LD_INT 0
22875: PPUSH
22876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22877: LD_ADDR_VAR 0 2
22881: PUSH
22882: LD_INT 22
22884: PUSH
22885: LD_OWVAR 2
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 2
22896: PUSH
22897: LD_INT 30
22899: PUSH
22900: LD_INT 27
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 30
22909: PUSH
22910: LD_INT 26
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 30
22919: PUSH
22920: LD_INT 28
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PPUSH
22937: CALL_OW 69
22941: ST_TO_ADDR
// if not tmp then
22942: LD_VAR 0 2
22946: NOT
22947: IFFALSE 22951
// exit ;
22949: GO 22980
// for i in tmp do
22951: LD_ADDR_VAR 0 1
22955: PUSH
22956: LD_VAR 0 2
22960: PUSH
22961: FOR_IN
22962: IFFALSE 22978
// SetLives ( i , 1 ) ;
22964: LD_VAR 0 1
22968: PPUSH
22969: LD_INT 1
22971: PPUSH
22972: CALL_OW 234
22976: GO 22961
22978: POP
22979: POP
// end ;
22980: PPOPN 2
22982: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22983: LD_EXP 48
22987: PUSH
22988: LD_EXP 97
22992: AND
22993: IFFALSE 23263
22995: GO 22997
22997: DISABLE
22998: LD_INT 0
23000: PPUSH
23001: PPUSH
23002: PPUSH
// begin i := rand ( 1 , 7 ) ;
23003: LD_ADDR_VAR 0 1
23007: PUSH
23008: LD_INT 1
23010: PPUSH
23011: LD_INT 7
23013: PPUSH
23014: CALL_OW 12
23018: ST_TO_ADDR
// case i of 1 :
23019: LD_VAR 0 1
23023: PUSH
23024: LD_INT 1
23026: DOUBLE
23027: EQUAL
23028: IFTRUE 23032
23030: GO 23042
23032: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23033: LD_STRING earthquake(getX(game), 0, 32)
23035: PPUSH
23036: CALL_OW 559
23040: GO 23263
23042: LD_INT 2
23044: DOUBLE
23045: EQUAL
23046: IFTRUE 23050
23048: GO 23060
23050: POP
// ToLua ( displayStucuk(); ) ; 3 :
23051: LD_STRING displayStucuk();
23053: PPUSH
23054: CALL_OW 559
23058: GO 23263
23060: LD_INT 3
23062: DOUBLE
23063: EQUAL
23064: IFTRUE 23068
23066: GO 23172
23068: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23069: LD_ADDR_VAR 0 2
23073: PUSH
23074: LD_INT 22
23076: PUSH
23077: LD_OWVAR 2
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 25
23088: PUSH
23089: LD_INT 1
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PPUSH
23100: CALL_OW 69
23104: ST_TO_ADDR
// if not tmp then
23105: LD_VAR 0 2
23109: NOT
23110: IFFALSE 23114
// exit ;
23112: GO 23263
// un := tmp [ rand ( 1 , tmp ) ] ;
23114: LD_ADDR_VAR 0 3
23118: PUSH
23119: LD_VAR 0 2
23123: PUSH
23124: LD_INT 1
23126: PPUSH
23127: LD_VAR 0 2
23131: PPUSH
23132: CALL_OW 12
23136: ARRAY
23137: ST_TO_ADDR
// if Crawls ( un ) then
23138: LD_VAR 0 3
23142: PPUSH
23143: CALL_OW 318
23147: IFFALSE 23158
// ComWalk ( un ) ;
23149: LD_VAR 0 3
23153: PPUSH
23154: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23158: LD_VAR 0 3
23162: PPUSH
23163: LD_INT 8
23165: PPUSH
23166: CALL_OW 336
// end ; 4 :
23170: GO 23263
23172: LD_INT 4
23174: DOUBLE
23175: EQUAL
23176: IFTRUE 23180
23178: GO 23241
23180: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23181: LD_ADDR_VAR 0 2
23185: PUSH
23186: LD_INT 22
23188: PUSH
23189: LD_OWVAR 2
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 30
23200: PUSH
23201: LD_INT 29
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PPUSH
23212: CALL_OW 69
23216: ST_TO_ADDR
// if not tmp then
23217: LD_VAR 0 2
23221: NOT
23222: IFFALSE 23226
// exit ;
23224: GO 23263
// DestroyUnit ( tmp [ 1 ] ) ;
23226: LD_VAR 0 2
23230: PUSH
23231: LD_INT 1
23233: ARRAY
23234: PPUSH
23235: CALL_OW 65
// end ; 5 .. 7 :
23239: GO 23263
23241: LD_INT 5
23243: DOUBLE
23244: GREATEREQUAL
23245: IFFALSE 23253
23247: LD_INT 7
23249: DOUBLE
23250: LESSEQUAL
23251: IFTRUE 23255
23253: GO 23262
23255: POP
// StreamSibBomb ; end ;
23256: CALL 19557 0 0
23260: GO 23263
23262: POP
// end ;
23263: PPOPN 3
23265: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23266: LD_EXP 48
23270: PUSH
23271: LD_EXP 98
23275: AND
23276: IFFALSE 23432
23278: GO 23280
23280: DISABLE
23281: LD_INT 0
23283: PPUSH
23284: PPUSH
23285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23286: LD_ADDR_VAR 0 2
23290: PUSH
23291: LD_INT 81
23293: PUSH
23294: LD_OWVAR 2
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 2
23305: PUSH
23306: LD_INT 21
23308: PUSH
23309: LD_INT 1
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 21
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: LIST
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PPUSH
23335: CALL_OW 69
23339: ST_TO_ADDR
// if not tmp then
23340: LD_VAR 0 2
23344: NOT
23345: IFFALSE 23349
// exit ;
23347: GO 23432
// p := 0 ;
23349: LD_ADDR_VAR 0 3
23353: PUSH
23354: LD_INT 0
23356: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23357: LD_INT 35
23359: PPUSH
23360: CALL_OW 67
// p := p + 1 ;
23364: LD_ADDR_VAR 0 3
23368: PUSH
23369: LD_VAR 0 3
23373: PUSH
23374: LD_INT 1
23376: PLUS
23377: ST_TO_ADDR
// for i in tmp do
23378: LD_ADDR_VAR 0 1
23382: PUSH
23383: LD_VAR 0 2
23387: PUSH
23388: FOR_IN
23389: IFFALSE 23420
// if GetLives ( i ) < 1000 then
23391: LD_VAR 0 1
23395: PPUSH
23396: CALL_OW 256
23400: PUSH
23401: LD_INT 1000
23403: LESS
23404: IFFALSE 23418
// SetLives ( i , 1000 ) ;
23406: LD_VAR 0 1
23410: PPUSH
23411: LD_INT 1000
23413: PPUSH
23414: CALL_OW 234
23418: GO 23388
23420: POP
23421: POP
// until p > 20 ;
23422: LD_VAR 0 3
23426: PUSH
23427: LD_INT 20
23429: GREATER
23430: IFFALSE 23357
// end ;
23432: PPOPN 3
23434: END
// every 0 0$1 trigger StreamModeActive and sTime do
23435: LD_EXP 48
23439: PUSH
23440: LD_EXP 99
23444: AND
23445: IFFALSE 23480
23447: GO 23449
23449: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23450: LD_INT 28
23452: PPUSH
23453: LD_OWVAR 2
23457: PPUSH
23458: LD_INT 2
23460: PPUSH
23461: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23465: LD_INT 30
23467: PPUSH
23468: LD_OWVAR 2
23472: PPUSH
23473: LD_INT 2
23475: PPUSH
23476: CALL_OW 322
// end ;
23480: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23481: LD_EXP 48
23485: PUSH
23486: LD_EXP 100
23490: AND
23491: IFFALSE 23612
23493: GO 23495
23495: DISABLE
23496: LD_INT 0
23498: PPUSH
23499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23500: LD_ADDR_VAR 0 2
23504: PUSH
23505: LD_INT 22
23507: PUSH
23508: LD_OWVAR 2
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 21
23519: PUSH
23520: LD_INT 1
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 3
23529: PUSH
23530: LD_INT 23
23532: PUSH
23533: LD_INT 0
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: PPUSH
23549: CALL_OW 69
23553: ST_TO_ADDR
// if not tmp then
23554: LD_VAR 0 2
23558: NOT
23559: IFFALSE 23563
// exit ;
23561: GO 23612
// for i in tmp do
23563: LD_ADDR_VAR 0 1
23567: PUSH
23568: LD_VAR 0 2
23572: PUSH
23573: FOR_IN
23574: IFFALSE 23610
// begin if Crawls ( i ) then
23576: LD_VAR 0 1
23580: PPUSH
23581: CALL_OW 318
23585: IFFALSE 23596
// ComWalk ( i ) ;
23587: LD_VAR 0 1
23591: PPUSH
23592: CALL_OW 138
// SetClass ( i , 2 ) ;
23596: LD_VAR 0 1
23600: PPUSH
23601: LD_INT 2
23603: PPUSH
23604: CALL_OW 336
// end ;
23608: GO 23573
23610: POP
23611: POP
// end ;
23612: PPOPN 2
23614: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23615: LD_EXP 48
23619: PUSH
23620: LD_EXP 101
23624: AND
23625: IFFALSE 23830
23627: GO 23629
23629: DISABLE
23630: LD_INT 0
23632: PPUSH
23633: PPUSH
23634: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23635: LD_OWVAR 2
23639: PPUSH
23640: LD_INT 9
23642: PPUSH
23643: LD_INT 1
23645: PPUSH
23646: LD_INT 1
23648: PPUSH
23649: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23653: LD_INT 9
23655: PPUSH
23656: LD_OWVAR 2
23660: PPUSH
23661: CALL_OW 343
// hc_name := Dark Warrior ;
23665: LD_ADDR_OWVAR 26
23669: PUSH
23670: LD_STRING Dark Warrior
23672: ST_TO_ADDR
// hc_gallery :=  ;
23673: LD_ADDR_OWVAR 33
23677: PUSH
23678: LD_STRING 
23680: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
23681: LD_INT 1
23683: PPUSH
23684: LD_INT 1
23686: PPUSH
23687: LD_INT 10
23689: PPUSH
23690: CALL_OW 380
// un := CreateHuman ;
23694: LD_ADDR_VAR 0 3
23698: PUSH
23699: CALL_OW 44
23703: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23704: LD_VAR 0 3
23708: PPUSH
23709: LD_INT 1
23711: PPUSH
23712: CALL_OW 51
// p := 0 ;
23716: LD_ADDR_VAR 0 2
23720: PUSH
23721: LD_INT 0
23723: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23724: LD_INT 35
23726: PPUSH
23727: CALL_OW 67
// if GetLives ( un ) < 1000 then
23731: LD_VAR 0 3
23735: PPUSH
23736: CALL_OW 256
23740: PUSH
23741: LD_INT 1000
23743: LESS
23744: IFFALSE 23758
// SetLives ( un , 1000 ) ;
23746: LD_VAR 0 3
23750: PPUSH
23751: LD_INT 1000
23753: PPUSH
23754: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
23758: LD_VAR 0 3
23762: PPUSH
23763: LD_INT 81
23765: PUSH
23766: LD_OWVAR 2
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PPUSH
23775: CALL_OW 69
23779: PPUSH
23780: LD_VAR 0 3
23784: PPUSH
23785: CALL_OW 74
23789: PPUSH
23790: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23794: LD_VAR 0 2
23798: PUSH
23799: LD_INT 60
23801: GREATER
23802: PUSH
23803: LD_VAR 0 3
23807: PPUSH
23808: CALL_OW 301
23812: OR
23813: IFFALSE 23724
// if un then
23815: LD_VAR 0 3
23819: IFFALSE 23830
// RemoveUnit ( un ) ;
23821: LD_VAR 0 3
23825: PPUSH
23826: CALL_OW 64
// end ; end_of_file
23830: PPOPN 3
23832: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
23833: LD_INT 0
23835: PPUSH
23836: PPUSH
23837: PPUSH
23838: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23839: LD_VAR 0 1
23843: PPUSH
23844: CALL_OW 264
23848: PUSH
23849: LD_EXP 47
23853: EQUAL
23854: IFFALSE 23926
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23856: LD_INT 68
23858: PPUSH
23859: LD_VAR 0 1
23863: PPUSH
23864: CALL_OW 255
23868: PPUSH
23869: CALL_OW 321
23873: PUSH
23874: LD_INT 2
23876: EQUAL
23877: IFFALSE 23889
// eff := 70 else
23879: LD_ADDR_VAR 0 6
23883: PUSH
23884: LD_INT 70
23886: ST_TO_ADDR
23887: GO 23897
// eff := 30 ;
23889: LD_ADDR_VAR 0 6
23893: PUSH
23894: LD_INT 30
23896: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23897: LD_VAR 0 1
23901: PPUSH
23902: CALL_OW 250
23906: PPUSH
23907: LD_VAR 0 1
23911: PPUSH
23912: CALL_OW 251
23916: PPUSH
23917: LD_VAR 0 6
23921: PPUSH
23922: CALL_OW 495
// end ; end ;
23926: LD_VAR 0 4
23930: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
23931: LD_INT 0
23933: PPUSH
23934: PPUSH
23935: PPUSH
23936: PPUSH
23937: PPUSH
23938: PPUSH
// if cmd = 124 then
23939: LD_VAR 0 1
23943: PUSH
23944: LD_INT 124
23946: EQUAL
23947: IFFALSE 24153
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
23949: LD_ADDR_VAR 0 5
23953: PUSH
23954: LD_INT 2
23956: PUSH
23957: LD_INT 34
23959: PUSH
23960: LD_INT 53
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 34
23969: PUSH
23970: LD_INT 14
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: PPUSH
23982: CALL_OW 69
23986: ST_TO_ADDR
// if not tmp then
23987: LD_VAR 0 5
23991: NOT
23992: IFFALSE 23996
// exit ;
23994: GO 24153
// for i in tmp do
23996: LD_ADDR_VAR 0 3
24000: PUSH
24001: LD_VAR 0 5
24005: PUSH
24006: FOR_IN
24007: IFFALSE 24151
// begin taskList := GetTaskList ( i ) ;
24009: LD_ADDR_VAR 0 6
24013: PUSH
24014: LD_VAR 0 3
24018: PPUSH
24019: CALL_OW 437
24023: ST_TO_ADDR
// if not taskList then
24024: LD_VAR 0 6
24028: NOT
24029: IFFALSE 24033
// continue ;
24031: GO 24006
// for j = 1 to taskList do
24033: LD_ADDR_VAR 0 4
24037: PUSH
24038: DOUBLE
24039: LD_INT 1
24041: DEC
24042: ST_TO_ADDR
24043: LD_VAR 0 6
24047: PUSH
24048: FOR_TO
24049: IFFALSE 24147
// if taskList [ j ] [ 1 ] = | then
24051: LD_VAR 0 6
24055: PUSH
24056: LD_VAR 0 4
24060: ARRAY
24061: PUSH
24062: LD_INT 1
24064: ARRAY
24065: PUSH
24066: LD_STRING |
24068: EQUAL
24069: IFFALSE 24145
// begin _taskList := Delete ( taskList , 1 ) ;
24071: LD_ADDR_VAR 0 7
24075: PUSH
24076: LD_VAR 0 6
24080: PPUSH
24081: LD_INT 1
24083: PPUSH
24084: CALL_OW 3
24088: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
24089: LD_VAR 0 3
24093: PPUSH
24094: LD_VAR 0 7
24098: PPUSH
24099: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
24103: LD_VAR 0 3
24107: PPUSH
24108: LD_VAR 0 6
24112: PUSH
24113: LD_VAR 0 4
24117: ARRAY
24118: PUSH
24119: LD_INT 2
24121: ARRAY
24122: PPUSH
24123: LD_VAR 0 6
24127: PUSH
24128: LD_VAR 0 4
24132: ARRAY
24133: PUSH
24134: LD_INT 3
24136: ARRAY
24137: PPUSH
24138: LD_INT 8
24140: PPUSH
24141: CALL 24158 0 4
// end ;
24145: GO 24048
24147: POP
24148: POP
// end ;
24149: GO 24006
24151: POP
24152: POP
// end ; end ;
24153: LD_VAR 0 2
24157: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24158: LD_INT 0
24160: PPUSH
24161: PPUSH
24162: PPUSH
24163: PPUSH
24164: PPUSH
24165: PPUSH
24166: PPUSH
24167: PPUSH
24168: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24169: LD_VAR 0 1
24173: NOT
24174: PUSH
24175: LD_VAR 0 2
24179: PPUSH
24180: LD_VAR 0 3
24184: PPUSH
24185: CALL_OW 488
24189: NOT
24190: OR
24191: PUSH
24192: LD_VAR 0 4
24196: NOT
24197: OR
24198: IFFALSE 24202
// exit ;
24200: GO 24542
// list := [ ] ;
24202: LD_ADDR_VAR 0 13
24206: PUSH
24207: EMPTY
24208: ST_TO_ADDR
// if x - r < 0 then
24209: LD_VAR 0 2
24213: PUSH
24214: LD_VAR 0 4
24218: MINUS
24219: PUSH
24220: LD_INT 0
24222: LESS
24223: IFFALSE 24235
// min_x := 0 else
24225: LD_ADDR_VAR 0 7
24229: PUSH
24230: LD_INT 0
24232: ST_TO_ADDR
24233: GO 24251
// min_x := x - r ;
24235: LD_ADDR_VAR 0 7
24239: PUSH
24240: LD_VAR 0 2
24244: PUSH
24245: LD_VAR 0 4
24249: MINUS
24250: ST_TO_ADDR
// if y - r < 0 then
24251: LD_VAR 0 3
24255: PUSH
24256: LD_VAR 0 4
24260: MINUS
24261: PUSH
24262: LD_INT 0
24264: LESS
24265: IFFALSE 24277
// min_y := 0 else
24267: LD_ADDR_VAR 0 8
24271: PUSH
24272: LD_INT 0
24274: ST_TO_ADDR
24275: GO 24293
// min_y := y - r ;
24277: LD_ADDR_VAR 0 8
24281: PUSH
24282: LD_VAR 0 3
24286: PUSH
24287: LD_VAR 0 4
24291: MINUS
24292: ST_TO_ADDR
// max_x := x + r ;
24293: LD_ADDR_VAR 0 9
24297: PUSH
24298: LD_VAR 0 2
24302: PUSH
24303: LD_VAR 0 4
24307: PLUS
24308: ST_TO_ADDR
// max_y := y + r ;
24309: LD_ADDR_VAR 0 10
24313: PUSH
24314: LD_VAR 0 3
24318: PUSH
24319: LD_VAR 0 4
24323: PLUS
24324: ST_TO_ADDR
// for _x = min_x to max_x do
24325: LD_ADDR_VAR 0 11
24329: PUSH
24330: DOUBLE
24331: LD_VAR 0 7
24335: DEC
24336: ST_TO_ADDR
24337: LD_VAR 0 9
24341: PUSH
24342: FOR_TO
24343: IFFALSE 24460
// for _y = min_y to max_y do
24345: LD_ADDR_VAR 0 12
24349: PUSH
24350: DOUBLE
24351: LD_VAR 0 8
24355: DEC
24356: ST_TO_ADDR
24357: LD_VAR 0 10
24361: PUSH
24362: FOR_TO
24363: IFFALSE 24456
// begin if not ValidHex ( _x , _y ) then
24365: LD_VAR 0 11
24369: PPUSH
24370: LD_VAR 0 12
24374: PPUSH
24375: CALL_OW 488
24379: NOT
24380: IFFALSE 24384
// continue ;
24382: GO 24362
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24384: LD_VAR 0 11
24388: PPUSH
24389: LD_VAR 0 12
24393: PPUSH
24394: CALL_OW 351
24398: PUSH
24399: LD_VAR 0 11
24403: PPUSH
24404: LD_VAR 0 12
24408: PPUSH
24409: CALL_OW 554
24413: AND
24414: IFFALSE 24454
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24416: LD_ADDR_VAR 0 13
24420: PUSH
24421: LD_VAR 0 13
24425: PPUSH
24426: LD_VAR 0 13
24430: PUSH
24431: LD_INT 1
24433: PLUS
24434: PPUSH
24435: LD_VAR 0 11
24439: PUSH
24440: LD_VAR 0 12
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PPUSH
24449: CALL_OW 2
24453: ST_TO_ADDR
// end ;
24454: GO 24362
24456: POP
24457: POP
24458: GO 24342
24460: POP
24461: POP
// if not list then
24462: LD_VAR 0 13
24466: NOT
24467: IFFALSE 24471
// exit ;
24469: GO 24542
// for i in list do
24471: LD_ADDR_VAR 0 6
24475: PUSH
24476: LD_VAR 0 13
24480: PUSH
24481: FOR_IN
24482: IFFALSE 24540
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24484: LD_VAR 0 1
24488: PPUSH
24489: LD_STRING M
24491: PUSH
24492: LD_VAR 0 6
24496: PUSH
24497: LD_INT 1
24499: ARRAY
24500: PUSH
24501: LD_VAR 0 6
24505: PUSH
24506: LD_INT 2
24508: ARRAY
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: PUSH
24531: EMPTY
24532: LIST
24533: PPUSH
24534: CALL_OW 447
24538: GO 24481
24540: POP
24541: POP
// end ;
24542: LD_VAR 0 5
24546: RET
