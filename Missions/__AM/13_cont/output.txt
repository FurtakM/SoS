// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1245 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1149 0 0
// PrepareDifficulty ;
 207: CALL 6457 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING 13c_JMM
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: CALL 5787 0 2
 600: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 601: LD_ADDR_EXP 2
 605: PUSH
 606: LD_STRING 13c_Stevens
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 5787 0 2
 616: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 617: LD_ADDR_EXP 3
 621: PUSH
 622: LD_STRING 13c_Lisa
 624: PPUSH
 625: LD_INT 1
 627: PPUSH
 628: CALL 5787 0 2
 632: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 633: LD_ADDR_EXP 4
 637: PUSH
 638: LD_STRING 13c_Donaldson
 640: PPUSH
 641: LD_INT 1
 643: PPUSH
 644: CALL 5787 0 2
 648: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 649: LD_ADDR_EXP 5
 653: PUSH
 654: LD_STRING 13c_Bobby
 656: PPUSH
 657: LD_INT 1
 659: PPUSH
 660: CALL 5787 0 2
 664: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 665: LD_ADDR_EXP 6
 669: PUSH
 670: LD_STRING 13c_Cyrus
 672: PPUSH
 673: LD_INT 1
 675: PPUSH
 676: CALL 5787 0 2
 680: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 681: LD_ADDR_EXP 7
 685: PUSH
 686: LD_STRING 13c_Denis
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL 5787 0 2
 696: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 697: LD_ADDR_EXP 8
 701: PUSH
 702: LD_STRING 13c_Brown
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 5787 0 2
 712: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 713: LD_ADDR_EXP 9
 717: PUSH
 718: LD_STRING 13c_Gladstone
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: CALL 5787 0 2
 728: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 729: LD_ADDR_EXP 10
 733: PUSH
 734: LD_STRING 13c_Houten
 736: PPUSH
 737: LD_INT 1
 739: PPUSH
 740: CALL 5787 0 2
 744: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 745: LD_ADDR_EXP 11
 749: PUSH
 750: LD_STRING 13c_Cornel
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: CALL 5787 0 2
 760: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 761: LD_ADDR_EXP 12
 765: PUSH
 766: LD_STRING 13c_Gary
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: CALL 5787 0 2
 776: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 777: LD_ADDR_EXP 13
 781: PUSH
 782: LD_STRING 13c_Frank
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: CALL 5787 0 2
 792: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 793: LD_ADDR_EXP 14
 797: PUSH
 798: LD_STRING 13c_Kikuchi
 800: PPUSH
 801: LD_INT 1
 803: PPUSH
 804: CALL 5787 0 2
 808: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 809: LD_ADDR_EXP 15
 813: PUSH
 814: LD_STRING Powell
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL 5787 0 2
 824: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 825: LD_ADDR_VAR 0 2
 829: PUSH
 830: LD_EXP 1
 834: PUSH
 835: LD_EXP 2
 839: PUSH
 840: LD_EXP 3
 844: PUSH
 845: LD_EXP 4
 849: PUSH
 850: LD_EXP 5
 854: PUSH
 855: LD_EXP 6
 859: PUSH
 860: LD_EXP 7
 864: PUSH
 865: LD_EXP 8
 869: PUSH
 870: LD_EXP 9
 874: PUSH
 875: LD_EXP 10
 879: PUSH
 880: LD_EXP 11
 884: PUSH
 885: LD_EXP 12
 889: PUSH
 890: LD_EXP 13
 894: PUSH
 895: LD_EXP 14
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 33
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 21
 943: PUSH
 944: LD_INT 2
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PPUSH
 956: CALL_OW 69
 960: ST_TO_ADDR
// for i = tmp downto 1 do
 961: LD_ADDR_VAR 0 4
 965: PUSH
 966: DOUBLE
 967: LD_VAR 0 2
 971: INC
 972: ST_TO_ADDR
 973: LD_INT 1
 975: PUSH
 976: FOR_DOWNTO
 977: IFFALSE 1014
// if not tmp [ i ] then
 979: LD_VAR 0 2
 983: PUSH
 984: LD_VAR 0 4
 988: ARRAY
 989: NOT
 990: IFFALSE 1012
// tmp := Delete ( tmp , i ) ;
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_VAR 0 4
1006: PPUSH
1007: CALL_OW 3
1011: ST_TO_ADDR
1012: GO 976
1014: POP
1015: POP
// for i = 1 to tmp do
1016: LD_ADDR_VAR 0 4
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_VAR 0 2
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1062
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1034: LD_VAR 0 2
1038: PUSH
1039: LD_VAR 0 4
1043: ARRAY
1044: PPUSH
1045: LD_VAR 0 3
1049: PUSH
1050: LD_VAR 0 4
1054: ARRAY
1055: PPUSH
1056: CALL_OW 52
1060: GO 1031
1062: POP
1063: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1064: LD_INT 22
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 25
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 69
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: PUSH
1097: LD_INT 22
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 34
1109: PUSH
1110: LD_INT 13
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PPUSH
1121: CALL_OW 69
1125: PUSH
1126: LD_INT 0
1128: EQUAL
1129: AND
1130: IFFALSE 1144
// SetClass ( JMM , 2 ) ;
1132: LD_EXP 1
1136: PPUSH
1137: LD_INT 2
1139: PPUSH
1140: CALL_OW 336
// end ;
1144: LD_VAR 0 1
1148: RET
// export function PrepareAmericansRandom ; var i ; begin
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
// uc_side = 1 ;
1153: LD_ADDR_OWVAR 20
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1161: LD_ADDR_EXP 16
1165: PUSH
1166: LD_STRING 13c_others
1168: PPUSH
1169: CALL_OW 31
1173: ST_TO_ADDR
// for i in others13 do
1174: LD_ADDR_VAR 0 2
1178: PUSH
1179: LD_EXP 16
1183: PUSH
1184: FOR_IN
1185: IFFALSE 1238
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1187: LD_VAR 0 2
1191: PPUSH
1192: LD_INT 22
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PUSH
1202: LD_INT 21
1204: PUSH
1205: LD_INT 2
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 58
1214: PUSH
1215: EMPTY
1216: LIST
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: PPUSH
1223: CALL_OW 69
1227: PUSH
1228: LD_INT 1
1230: ARRAY
1231: PPUSH
1232: CALL_OW 52
1236: GO 1184
1238: POP
1239: POP
// end ;
1240: LD_VAR 0 1
1244: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_STRING 13_VehiclesIn13_1
1260: PPUSH
1261: EMPTY
1262: PPUSH
1263: CALL_OW 30
1267: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1268: LD_ADDR_EXP 24
1272: PUSH
1273: LD_STRING 13_ResourcesInCargo13_1
1275: PPUSH
1276: EMPTY
1277: PPUSH
1278: CALL_OW 30
1282: ST_TO_ADDR
// cargoList = [ ] ;
1283: LD_ADDR_VAR 0 6
1287: PUSH
1288: EMPTY
1289: ST_TO_ADDR
// uc_side = 1 ;
1290: LD_ADDR_OWVAR 20
1294: PUSH
1295: LD_INT 1
1297: ST_TO_ADDR
// if vehicles > 0 then
1298: LD_VAR 0 5
1302: PUSH
1303: LD_INT 0
1305: GREATER
1306: IFFALSE 1661
// begin for i := 1 to vehicles do
1308: LD_ADDR_VAR 0 2
1312: PUSH
1313: DOUBLE
1314: LD_INT 1
1316: DEC
1317: ST_TO_ADDR
1318: LD_VAR 0 5
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1473
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1326: LD_ADDR_OWVAR 21
1330: PUSH
1331: LD_VAR 0 5
1335: PUSH
1336: LD_VAR 0 2
1340: ARRAY
1341: PUSH
1342: LD_INT 1
1344: ARRAY
1345: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1346: LD_ADDR_OWVAR 37
1350: PUSH
1351: LD_VAR 0 5
1355: PUSH
1356: LD_VAR 0 2
1360: ARRAY
1361: PUSH
1362: LD_INT 2
1364: ARRAY
1365: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1366: LD_ADDR_OWVAR 39
1370: PUSH
1371: LD_VAR 0 5
1375: PUSH
1376: LD_VAR 0 2
1380: ARRAY
1381: PUSH
1382: LD_INT 3
1384: ARRAY
1385: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1386: LD_ADDR_OWVAR 38
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_VAR 0 2
1400: ARRAY
1401: PUSH
1402: LD_INT 4
1404: ARRAY
1405: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1406: LD_ADDR_OWVAR 40
1410: PUSH
1411: LD_VAR 0 5
1415: PUSH
1416: LD_VAR 0 2
1420: ARRAY
1421: PUSH
1422: LD_INT 5
1424: ARRAY
1425: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1426: LD_ADDR_OWVAR 41
1430: PUSH
1431: LD_INT 40
1433: ST_TO_ADDR
// veh = CreateVehicle ;
1434: LD_ADDR_VAR 0 4
1438: PUSH
1439: CALL_OW 45
1443: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1444: LD_VAR 0 4
1448: PPUSH
1449: LD_INT 3
1451: PPUSH
1452: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1456: LD_VAR 0 4
1460: PPUSH
1461: LD_INT 2
1463: PPUSH
1464: LD_INT 0
1466: PPUSH
1467: CALL_OW 49
// end ;
1471: GO 1323
1473: POP
1474: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1475: LD_ADDR_VAR 0 6
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 1
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 21
1492: PUSH
1493: LD_INT 2
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 34
1502: PUSH
1503: LD_INT 12
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: PPUSH
1515: CALL_OW 69
1519: ST_TO_ADDR
// if cargoList > 0 then
1520: LD_VAR 0 6
1524: PUSH
1525: LD_INT 0
1527: GREATER
1528: IFFALSE 1661
// for i = 1 to cargoList do
1530: LD_ADDR_VAR 0 2
1534: PUSH
1535: DOUBLE
1536: LD_INT 1
1538: DEC
1539: ST_TO_ADDR
1540: LD_VAR 0 6
1544: PUSH
1545: FOR_TO
1546: IFFALSE 1659
// begin if resources > 0 then
1548: LD_EXP 24
1552: PUSH
1553: LD_INT 0
1555: GREATER
1556: IFFALSE 1657
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1558: LD_VAR 0 6
1562: PUSH
1563: LD_VAR 0 2
1567: ARRAY
1568: PPUSH
1569: LD_INT 1
1571: PPUSH
1572: LD_EXP 24
1576: PUSH
1577: LD_VAR 0 2
1581: ARRAY
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1591: LD_VAR 0 6
1595: PUSH
1596: LD_VAR 0 2
1600: ARRAY
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_EXP 24
1609: PUSH
1610: LD_VAR 0 2
1614: ARRAY
1615: PUSH
1616: LD_INT 2
1618: ARRAY
1619: PPUSH
1620: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1624: LD_VAR 0 6
1628: PUSH
1629: LD_VAR 0 2
1633: ARRAY
1634: PPUSH
1635: LD_INT 3
1637: PPUSH
1638: LD_EXP 24
1642: PUSH
1643: LD_VAR 0 2
1647: ARRAY
1648: PUSH
1649: LD_INT 3
1651: ARRAY
1652: PPUSH
1653: CALL_OW 291
// end ; end ;
1657: GO 1545
1659: POP
1660: POP
// end ; end ;
1661: LD_VAR 0 1
1665: RET
// export function PowellSupport ; var i , veh , un ; begin
1666: LD_INT 0
1668: PPUSH
1669: PPUSH
1670: PPUSH
1671: PPUSH
// for i = 1 to 3 do
1672: LD_ADDR_VAR 0 2
1676: PUSH
1677: DOUBLE
1678: LD_INT 1
1680: DEC
1681: ST_TO_ADDR
1682: LD_INT 3
1684: PUSH
1685: FOR_TO
1686: IFFALSE 1887
// begin uc_nation = 1 ;
1688: LD_ADDR_OWVAR 21
1692: PUSH
1693: LD_INT 1
1695: ST_TO_ADDR
// uc_side = 1 ;
1696: LD_ADDR_OWVAR 20
1700: PUSH
1701: LD_INT 1
1703: ST_TO_ADDR
// vc_engine = 3 ;
1704: LD_ADDR_OWVAR 39
1708: PUSH
1709: LD_INT 3
1711: ST_TO_ADDR
// vc_control = 1 ;
1712: LD_ADDR_OWVAR 38
1716: PUSH
1717: LD_INT 1
1719: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1720: LD_ADDR_OWVAR 40
1724: PUSH
1725: LD_INT 9
1727: PUSH
1728: LD_INT 5
1730: PUSH
1731: LD_INT 4
1733: PUSH
1734: LD_INT 7
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 1
1749: PPUSH
1750: LD_INT 5
1752: PPUSH
1753: CALL_OW 12
1757: ARRAY
1758: ST_TO_ADDR
// if vc_weapon = 6 then
1759: LD_OWVAR 40
1763: PUSH
1764: LD_INT 6
1766: EQUAL
1767: IFFALSE 1779
// vc_chassis = 4 else
1769: LD_ADDR_OWVAR 37
1773: PUSH
1774: LD_INT 4
1776: ST_TO_ADDR
1777: GO 1787
// vc_chassis = 3 ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 3
1786: ST_TO_ADDR
// veh = CreateVehicle ;
1787: LD_ADDR_VAR 0 3
1791: PUSH
1792: CALL_OW 45
1796: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1797: LD_VAR 0 3
1801: PPUSH
1802: LD_INT 2
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// SetDir ( veh , 1 ) ;
1812: LD_VAR 0 3
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: CALL_OW 233
// hc_gallery =  ;
1824: LD_ADDR_OWVAR 33
1828: PUSH
1829: LD_STRING 
1831: ST_TO_ADDR
// hc_name =  ;
1832: LD_ADDR_OWVAR 26
1836: PUSH
1837: LD_STRING 
1839: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1840: LD_INT 0
1842: PPUSH
1843: LD_INT 3
1845: PPUSH
1846: LD_INT 7
1848: PPUSH
1849: LD_INT 10
1851: PPUSH
1852: CALL_OW 12
1856: PPUSH
1857: CALL_OW 380
// un = CreateHuman ;
1861: LD_ADDR_VAR 0 4
1865: PUSH
1866: CALL_OW 44
1870: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1871: LD_VAR 0 4
1875: PPUSH
1876: LD_VAR 0 3
1880: PPUSH
1881: CALL_OW 52
// end ;
1885: GO 1685
1887: POP
1888: POP
// end ; end_of_file
1889: LD_VAR 0 1
1893: RET
// export function PrepareBurlak ; begin
1894: LD_INT 0
1896: PPUSH
// uc_side = 7 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 7
1904: ST_TO_ADDR
// uc_nation = 3 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// vc_engine = 3 ;
1913: LD_ADDR_OWVAR 39
1917: PUSH
1918: LD_INT 3
1920: ST_TO_ADDR
// vc_control = 1 ;
1921: LD_ADDR_OWVAR 38
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// vc_weapon = 46 ;
1929: LD_ADDR_OWVAR 40
1933: PUSH
1934: LD_INT 46
1936: ST_TO_ADDR
// vc_chassis = 24 ;
1937: LD_ADDR_OWVAR 37
1941: PUSH
1942: LD_INT 24
1944: ST_TO_ADDR
// Masha = CreateVehicle ;
1945: LD_ADDR_EXP 18
1949: PUSH
1950: CALL_OW 45
1954: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
1955: LD_EXP 18
1959: PPUSH
1960: LD_INT 3
1962: PPUSH
1963: LD_INT 0
1965: PPUSH
1966: CALL_OW 49
// SetMark ( Masha , 1 ) ;
1970: LD_EXP 18
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
1982: LD_ADDR_EXP 17
1986: PUSH
1987: LD_STRING Burlak
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL 5787 0 2
1997: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
1998: LD_EXP 17
2002: PPUSH
2003: LD_EXP 18
2007: PPUSH
2008: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2012: LD_EXP 18
2016: PPUSH
2017: LD_INT 107
2019: PPUSH
2020: LD_INT 118
2022: PPUSH
2023: CALL_OW 114
// spawnBurlak = 1 ;
2027: LD_ADDR_EXP 27
2031: PUSH
2032: LD_INT 1
2034: ST_TO_ADDR
// end ;
2035: LD_VAR 0 1
2039: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2040: LD_INT 0
2042: PPUSH
2043: PPUSH
2044: PPUSH
2045: PPUSH
// uc_side = 7 ;
2046: LD_ADDR_OWVAR 20
2050: PUSH
2051: LD_INT 7
2053: ST_TO_ADDR
// uc_nation = 3 ;
2054: LD_ADDR_OWVAR 21
2058: PUSH
2059: LD_INT 3
2061: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
2062: LD_ADDR_EXP 19
2066: PUSH
2067: LD_STRING Gnyevko
2069: PPUSH
2070: LD_INT 0
2072: PPUSH
2073: CALL 5787 0 2
2077: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
2078: LD_ADDR_EXP 20
2082: PUSH
2083: LD_STRING Titov
2085: PPUSH
2086: LD_INT 0
2088: PPUSH
2089: CALL 5787 0 2
2093: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2094: LD_ADDR_EXP 21
2098: PUSH
2099: LD_STRING Xavier2
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: CALL 5787 0 2
2109: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2110: LD_ADDR_EXP 22
2114: PUSH
2115: LD_STRING Belkov
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL 5787 0 2
2125: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2126: LD_ADDR_EXP 23
2130: PUSH
2131: LD_STRING Lipshchin
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: CALL 5787 0 2
2141: ST_TO_ADDR
// for i = 1 to 5 do
2142: LD_ADDR_VAR 0 2
2146: PUSH
2147: DOUBLE
2148: LD_INT 1
2150: DEC
2151: ST_TO_ADDR
2152: LD_INT 5
2154: PUSH
2155: FOR_TO
2156: IFFALSE 2244
// begin vc_engine = 3 ;
2158: LD_ADDR_OWVAR 39
2162: PUSH
2163: LD_INT 3
2165: ST_TO_ADDR
// vc_control = 1 ;
2166: LD_ADDR_OWVAR 38
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2174: LD_ADDR_OWVAR 40
2178: PUSH
2179: LD_INT 43
2181: PUSH
2182: LD_INT 44
2184: PUSH
2185: LD_INT 45
2187: PUSH
2188: LD_INT 49
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 1
2199: PPUSH
2200: LD_INT 4
2202: PPUSH
2203: CALL_OW 12
2207: ARRAY
2208: ST_TO_ADDR
// vc_chassis = 22 ;
2209: LD_ADDR_OWVAR 37
2213: PUSH
2214: LD_INT 22
2216: ST_TO_ADDR
// veh = CreateVehicle ;
2217: LD_ADDR_VAR 0 3
2221: PUSH
2222: CALL_OW 45
2226: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 3
2234: PPUSH
2235: LD_INT 0
2237: PPUSH
2238: CALL_OW 49
// end ;
2242: GO 2155
2244: POP
2245: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2246: LD_ADDR_VAR 0 4
2250: PUSH
2251: LD_INT 22
2253: PUSH
2254: LD_INT 7
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 21
2263: PUSH
2264: LD_INT 2
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 58
2273: PUSH
2274: EMPTY
2275: LIST
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: PPUSH
2282: CALL_OW 69
2286: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2287: LD_EXP 19
2291: PPUSH
2292: LD_VAR 0 4
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2305: LD_EXP 20
2309: PPUSH
2310: LD_VAR 0 4
2314: PUSH
2315: LD_INT 2
2317: ARRAY
2318: PPUSH
2319: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2323: LD_EXP 21
2327: PPUSH
2328: LD_VAR 0 4
2332: PUSH
2333: LD_INT 3
2335: ARRAY
2336: PPUSH
2337: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2341: LD_EXP 22
2345: PPUSH
2346: LD_VAR 0 4
2350: PUSH
2351: LD_INT 4
2353: ARRAY
2354: PPUSH
2355: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2359: LD_EXP 23
2363: PPUSH
2364: LD_VAR 0 4
2368: PUSH
2369: LD_INT 5
2371: ARRAY
2372: PPUSH
2373: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2377: LD_EXP 19
2381: PPUSH
2382: LD_INT 3
2384: PPUSH
2385: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2389: LD_EXP 20
2393: PUSH
2394: LD_EXP 23
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: PPUSH
2403: LD_INT 9
2405: PPUSH
2406: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2410: LD_ADDR_VAR 0 4
2414: PUSH
2415: LD_INT 22
2417: PUSH
2418: LD_INT 7
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PPUSH
2425: CALL_OW 69
2429: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2430: LD_VAR 0 4
2434: PPUSH
2435: LD_INT 107
2437: PPUSH
2438: LD_INT 118
2440: PPUSH
2441: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2445: LD_INT 35
2447: PPUSH
2448: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2452: LD_VAR 0 4
2456: PPUSH
2457: LD_INT 34
2459: PUSH
2460: LD_INT 49
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 72
2471: PPUSH
2472: LD_EXP 18
2476: PPUSH
2477: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2481: LD_VAR 0 4
2485: PPUSH
2486: LD_INT 3
2488: PUSH
2489: LD_INT 34
2491: PUSH
2492: LD_INT 49
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 72
2507: PPUSH
2508: LD_INT 107
2510: PPUSH
2511: LD_INT 118
2513: PPUSH
2514: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2518: LD_VAR 0 4
2522: PPUSH
2523: LD_INT 34
2525: PUSH
2526: LD_INT 49
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 72
2537: PUSH
2538: LD_INT 0
2540: EQUAL
2541: PUSH
2542: LD_EXP 18
2546: PPUSH
2547: CALL_OW 303
2551: OR
2552: IFFALSE 2445
// repeat wait ( 0 0$1 ) ;
2554: LD_INT 35
2556: PPUSH
2557: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2561: LD_ADDR_VAR 0 4
2565: PUSH
2566: LD_INT 22
2568: PUSH
2569: LD_INT 7
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 69
2580: PUSH
2581: LD_EXP 17
2585: DIFF
2586: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2587: LD_VAR 0 4
2591: PPUSH
2592: LD_INT 107
2594: PPUSH
2595: LD_INT 118
2597: PPUSH
2598: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2602: LD_EXP 17
2606: PPUSH
2607: CALL_OW 302
2611: PUSH
2612: LD_EXP 17
2616: PPUSH
2617: CALL_OW 310
2621: NOT
2622: AND
2623: IFFALSE 2640
// ComMoveXY ( Burlak , 107 , 118 ) ;
2625: LD_EXP 17
2629: PPUSH
2630: LD_INT 107
2632: PPUSH
2633: LD_INT 118
2635: PPUSH
2636: CALL_OW 111
// until not tmp ;
2640: LD_VAR 0 4
2644: NOT
2645: IFFALSE 2554
// end ; end_of_file
2647: LD_VAR 0 1
2651: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2652: LD_EXP 31
2656: IFFALSE 2832
2658: GO 2660
2660: DISABLE
2661: LD_INT 0
2663: PPUSH
2664: PPUSH
// begin enable ;
2665: ENABLE
// rnd = 0 ;
2666: LD_ADDR_VAR 0 2
2670: PUSH
2671: LD_INT 0
2673: ST_TO_ADDR
// uc_side = 8 ;
2674: LD_ADDR_OWVAR 20
2678: PUSH
2679: LD_INT 8
2681: ST_TO_ADDR
// uc_nation = 2 ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 2
2689: ST_TO_ADDR
// hc_name =  ;
2690: LD_ADDR_OWVAR 26
2694: PUSH
2695: LD_STRING 
2697: ST_TO_ADDR
// hc_gallery =  ;
2698: LD_ADDR_OWVAR 33
2702: PUSH
2703: LD_STRING 
2705: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2706: LD_INT 0
2708: PPUSH
2709: LD_INT 4
2711: PPUSH
2712: LD_INT 10
2714: PPUSH
2715: CALL_OW 380
// un = CreateHuman ;
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2729: LD_VAR 0 1
2733: PPUSH
2734: LD_INT 8
2736: PUSH
2737: LD_INT 9
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_INT 2
2749: PPUSH
2750: CALL_OW 12
2754: ARRAY
2755: PPUSH
2756: LD_INT 0
2758: PPUSH
2759: CALL_OW 49
// SetTag ( un , 1 ) ;
2763: LD_VAR 0 1
2767: PPUSH
2768: LD_INT 1
2770: PPUSH
2771: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: LD_INT 1
2782: PPUSH
2783: LD_EXP 31
2787: PPUSH
2788: CALL_OW 12
2792: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
2793: LD_VAR 0 1
2797: PPUSH
2798: LD_EXP 31
2802: PUSH
2803: LD_VAR 0 2
2807: ARRAY
2808: PUSH
2809: LD_INT 1
2811: ARRAY
2812: PPUSH
2813: LD_EXP 31
2817: PUSH
2818: LD_VAR 0 2
2822: ARRAY
2823: PUSH
2824: LD_INT 2
2826: ARRAY
2827: PPUSH
2828: CALL_OW 158
// end ;
2832: PPOPN 2
2834: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
2835: LD_INT 22
2837: PUSH
2838: LD_INT 8
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PUSH
2845: LD_INT 3
2847: PUSH
2848: LD_INT 61
2850: PUSH
2851: EMPTY
2852: LIST
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: LD_INT 33
2860: PUSH
2861: LD_INT 2
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: IFFALSE 2950
2879: GO 2881
2881: DISABLE
2882: LD_INT 0
2884: PPUSH
// begin enable ;
2885: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
2886: LD_ADDR_VAR 0 1
2890: PUSH
2891: LD_INT 22
2893: PUSH
2894: LD_INT 8
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: LD_INT 3
2903: PUSH
2904: LD_INT 61
2906: PUSH
2907: EMPTY
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: LD_INT 33
2916: PUSH
2917: LD_INT 2
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: PPUSH
2929: CALL_OW 69
2933: PUSH
2934: FOR_IN
2935: IFFALSE 2948
// Connect ( i ) ;
2937: LD_VAR 0 1
2941: PPUSH
2942: CALL 5902 0 1
2946: GO 2934
2948: POP
2949: POP
// end ; end_of_file
2950: PPOPN 1
2952: END
// every 1 do
2953: GO 2955
2955: DISABLE
// begin InGameOn ;
2956: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 21
2972: PUSH
2973: LD_INT 2
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: PUSH
2989: LD_INT 1
2991: ARRAY
2992: PPUSH
2993: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
2997: LD_INT 22
2999: PUSH
3000: LD_INT 1
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 21
3009: PUSH
3010: LD_INT 2
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PPUSH
3021: CALL_OW 69
3025: PPUSH
3026: LD_INT 69
3028: PPUSH
3029: LD_INT 94
3031: PPUSH
3032: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3036: LD_EXP 1
3040: PPUSH
3041: LD_STRING D2-JMM-1
3043: PPUSH
3044: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3048: LD_INT 22
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 21
3060: PUSH
3061: LD_INT 2
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: PUSH
3077: LD_INT 1
3079: ARRAY
3080: PPUSH
3081: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3085: LD_EXP 2
3089: PPUSH
3090: LD_STRING D2-Huck-1
3092: PPUSH
3093: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 2
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PPUSH
3121: CALL_OW 69
3125: PUSH
3126: LD_INT 1
3128: ARRAY
3129: PPUSH
3130: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3134: LD_EXP 1
3138: PPUSH
3139: LD_STRING D2-JMM-2
3141: PPUSH
3142: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3146: LD_INT 22
3148: PUSH
3149: LD_INT 1
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: LD_INT 21
3158: PUSH
3159: LD_INT 2
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PPUSH
3170: CALL_OW 69
3174: PUSH
3175: LD_INT 1
3177: ARRAY
3178: PPUSH
3179: CALL_OW 87
// InGameOff ;
3183: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3187: LD_STRING M1
3189: PPUSH
3190: CALL_OW 337
// SaveForQuickRestart ;
3194: CALL_OW 22
// end ;
3198: END
// every 10 10$0 do
3199: GO 3201
3201: DISABLE
// begin DialogueOn ;
3202: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3206: LD_EXP 15
3210: PPUSH
3211: LD_STRING D3-Pow-1
3213: PPUSH
3214: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3218: LD_EXP 1
3222: PPUSH
3223: LD_STRING D3-JMM-1
3225: PPUSH
3226: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3230: LD_EXP 15
3234: PPUSH
3235: LD_STRING D3-Pow-2
3237: PPUSH
3238: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3242: LD_EXP 1
3246: PPUSH
3247: LD_STRING D3-JMM-2
3249: PPUSH
3250: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3254: LD_EXP 15
3258: PPUSH
3259: LD_STRING D3-Pow-3
3261: PPUSH
3262: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3266: LD_EXP 1
3270: PPUSH
3271: LD_STRING D3-JMM-3
3273: PPUSH
3274: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3278: LD_EXP 15
3282: PPUSH
3283: LD_STRING D3-Pow-4
3285: PPUSH
3286: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3290: LD_EXP 1
3294: PPUSH
3295: LD_STRING D3-JMM-4
3297: PPUSH
3298: CALL_OW 88
// DialogueOff ;
3302: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3306: LD_STRING M2
3308: PPUSH
3309: CALL_OW 337
// wait ( 2 2$30 ) ;
3313: LD_INT 5250
3315: PPUSH
3316: CALL_OW 67
// PrepareBurlak ;
3320: CALL 1894 0 0
// BurlakArmy ;
3324: CALL 2040 0 0
// end ;
3328: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3329: LD_INT 1
3331: PPUSH
3332: LD_EXP 18
3336: PPUSH
3337: CALL_OW 292
3341: IFFALSE 3500
3343: GO 3345
3345: DISABLE
// begin DialogueOn ;
3346: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3350: LD_EXP 18
3354: PPUSH
3355: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3359: LD_INT 22
3361: PUSH
3362: LD_INT 1
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 26
3371: PUSH
3372: LD_INT 1
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 2
3381: PUSH
3382: LD_INT 25
3384: PUSH
3385: LD_INT 1
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: PUSH
3392: LD_INT 25
3394: PUSH
3395: LD_INT 2
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 25
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 25
3414: PUSH
3415: LD_INT 4
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: LD_INT 25
3424: PUSH
3425: LD_INT 5
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: LIST
3444: PPUSH
3445: CALL_OW 69
3449: PPUSH
3450: LD_STRING D5-Sol1-1
3452: PPUSH
3453: LD_STRING D5-FSol1-1
3455: PPUSH
3456: CALL 6256 0 3
// Say ( JMM , D5-JMM-1 ) ;
3460: LD_EXP 1
3464: PPUSH
3465: LD_STRING D5-JMM-1
3467: PPUSH
3468: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3472: LD_EXP 17
3476: PPUSH
3477: LD_STRING DAmer-Bur-1
3479: PPUSH
3480: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3484: LD_EXP 1
3488: PPUSH
3489: LD_STRING DAmer-JMM-1
3491: PPUSH
3492: CALL_OW 88
// DialogueOff ;
3496: CALL_OW 7
// end ;
3500: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3501: LD_INT 4
3503: PPUSH
3504: LD_INT 22
3506: PUSH
3507: LD_INT 7
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PPUSH
3514: CALL_OW 70
3518: IFFALSE 3917
3520: GO 3522
3522: DISABLE
3523: LD_INT 0
3525: PPUSH
// begin enable ;
3526: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3527: LD_ADDR_VAR 0 1
3531: PUSH
3532: LD_INT 4
3534: PPUSH
3535: LD_INT 22
3537: PUSH
3538: LD_INT 7
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PPUSH
3545: CALL_OW 70
3549: PUSH
3550: FOR_IN
3551: IFFALSE 3915
// begin if i = Burlak or i = Masha then
3553: LD_VAR 0 1
3557: PUSH
3558: LD_EXP 17
3562: EQUAL
3563: PUSH
3564: LD_VAR 0 1
3568: PUSH
3569: LD_EXP 18
3573: EQUAL
3574: OR
3575: IFFALSE 3722
// begin RemoveUnit ( i ) ;
3577: LD_VAR 0 1
3581: PPUSH
3582: CALL_OW 64
// DialogueOn ;
3586: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3590: LD_EXP 1
3594: PPUSH
3595: LD_STRING D5a-JMM-1
3597: PPUSH
3598: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3602: LD_INT 22
3604: PUSH
3605: LD_INT 1
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PUSH
3612: LD_INT 26
3614: PUSH
3615: LD_INT 1
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 2
3624: PUSH
3625: LD_INT 25
3627: PUSH
3628: LD_INT 1
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 25
3637: PUSH
3638: LD_INT 2
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 25
3647: PUSH
3648: LD_INT 3
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: PUSH
3655: LD_INT 25
3657: PUSH
3658: LD_INT 4
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: PUSH
3665: LD_INT 25
3667: PUSH
3668: LD_INT 5
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: PPUSH
3688: CALL_OW 69
3692: PPUSH
3693: LD_STRING D5a-Sol1-1
3695: PPUSH
3696: LD_STRING D5-FSol1-1
3698: PPUSH
3699: CALL 6256 0 3
// DialogueOff ;
3703: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3707: LD_STRING M2b
3709: PPUSH
3710: CALL_OW 337
// spawnBurlak = 0 ;
3714: LD_ADDR_EXP 27
3718: PUSH
3719: LD_INT 0
3721: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
3722: LD_VAR 0 1
3726: PPUSH
3727: CALL_OW 247
3731: PUSH
3732: LD_INT 2
3734: EQUAL
3735: PUSH
3736: LD_VAR 0 1
3740: PPUSH
3741: CALL_OW 263
3745: PUSH
3746: LD_INT 1
3748: EQUAL
3749: AND
3750: IFFALSE 3878
// begin case IsDrivenBy ( i ) of Gnyevko :
3752: LD_VAR 0 1
3756: PPUSH
3757: CALL_OW 311
3761: PUSH
3762: LD_EXP 19
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3785
3772: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
3773: LD_INT 1
3775: PPUSH
3776: LD_STRING 13_Gnyevko_1
3778: PPUSH
3779: CALL_OW 39
3783: GO 3878
3785: LD_EXP 20
3789: DOUBLE
3790: EQUAL
3791: IFTRUE 3795
3793: GO 3808
3795: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
3796: LD_INT 1
3798: PPUSH
3799: LD_STRING 13_Titov_1
3801: PPUSH
3802: CALL_OW 39
3806: GO 3878
3808: LD_EXP 21
3812: DOUBLE
3813: EQUAL
3814: IFTRUE 3818
3816: GO 3831
3818: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
3819: LD_INT 1
3821: PPUSH
3822: LD_STRING 13_Xavier_1
3824: PPUSH
3825: CALL_OW 39
3829: GO 3878
3831: LD_EXP 22
3835: DOUBLE
3836: EQUAL
3837: IFTRUE 3841
3839: GO 3854
3841: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
3842: LD_INT 1
3844: PPUSH
3845: LD_STRING 13_Belkov_1
3847: PPUSH
3848: CALL_OW 39
3852: GO 3878
3854: LD_EXP 23
3858: DOUBLE
3859: EQUAL
3860: IFTRUE 3864
3862: GO 3877
3864: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
3865: LD_INT 1
3867: PPUSH
3868: LD_STRING 13_Lipshchin_1
3870: PPUSH
3871: CALL_OW 39
3875: GO 3878
3877: POP
// end ; if GetWeapon ( i ) = 49 then
3878: LD_VAR 0 1
3882: PPUSH
3883: CALL_OW 264
3887: PUSH
3888: LD_INT 49
3890: EQUAL
3891: IFFALSE 3904
// DestroyUnit ( i ) else
3893: LD_VAR 0 1
3897: PPUSH
3898: CALL_OW 65
3902: GO 3913
// RemoveUnit ( i ) ;
3904: LD_VAR 0 1
3908: PPUSH
3909: CALL_OW 64
// end ;
3913: GO 3550
3915: POP
3916: POP
// end ;
3917: PPOPN 1
3919: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
3920: LD_EXP 17
3924: PPUSH
3925: CALL_OW 302
3929: PUSH
3930: LD_EXP 18
3934: PPUSH
3935: CALL_OW 256
3939: PUSH
3940: LD_INT 500
3942: LESS
3943: AND
3944: PUSH
3945: LD_EXP 18
3949: PPUSH
3950: CALL_OW 255
3954: PUSH
3955: LD_INT 7
3957: EQUAL
3958: AND
3959: IFFALSE 3979
3961: GO 3963
3963: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
3964: LD_EXP 17
3968: PPUSH
3969: LD_INT 107
3971: PPUSH
3972: LD_INT 118
3974: PPUSH
3975: CALL_OW 111
3979: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
3980: LD_EXP 17
3984: PPUSH
3985: CALL_OW 301
3989: PUSH
3990: LD_EXP 27
3994: PUSH
3995: LD_INT 1
3997: EQUAL
3998: AND
3999: IFFALSE 4132
4001: GO 4003
4003: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4004: LD_EXP 1
4008: PPUSH
4009: LD_STRING D5b-JMM-1
4011: PPUSH
4012: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4016: LD_INT 22
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 26
4028: PUSH
4029: LD_INT 1
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 2
4038: PUSH
4039: LD_INT 25
4041: PUSH
4042: LD_INT 1
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 25
4051: PUSH
4052: LD_INT 2
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 25
4061: PUSH
4062: LD_INT 3
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: LD_INT 25
4071: PUSH
4072: LD_INT 4
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 5
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PPUSH
4107: LD_STRING D5b-Sol1-1
4109: PPUSH
4110: LD_STRING 
4112: PPUSH
4113: CALL 6256 0 3
// ChangeMissionObjectives ( M2a ) ;
4117: LD_STRING M2a
4119: PPUSH
4120: CALL_OW 337
// burlakStatus = 1 ;
4124: LD_ADDR_EXP 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// end ;
4132: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4133: LD_EXP 2
4137: PPUSH
4138: CALL_OW 301
4142: IFFALSE 4279
4144: GO 4146
4146: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4147: LD_EXP 1
4151: PPUSH
4152: LD_STRING D6-JMM-1
4154: PPUSH
4155: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4159: LD_INT 22
4161: PUSH
4162: LD_INT 1
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PUSH
4169: LD_INT 26
4171: PUSH
4172: LD_INT 1
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 2
4181: PUSH
4182: LD_INT 25
4184: PUSH
4185: LD_INT 1
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 25
4194: PUSH
4195: LD_INT 2
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: LD_INT 25
4204: PUSH
4205: LD_INT 3
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 25
4214: PUSH
4215: LD_INT 4
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 5
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: LIST
4244: PPUSH
4245: CALL_OW 69
4249: PPUSH
4250: LD_STRING D6-Sol1-1
4252: PPUSH
4253: LD_STRING 
4255: PPUSH
4256: CALL 6256 0 3
// Say ( JMM , D6-JMM-2 ) ;
4260: LD_EXP 1
4264: PPUSH
4265: LD_STRING D6-JMM-2
4267: PPUSH
4268: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4272: LD_STRING M1a
4274: PPUSH
4275: CALL_OW 337
// end ;
4279: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4280: LD_INT 25
4282: PPUSH
4283: LD_INT 1
4285: PPUSH
4286: CALL_OW 321
4290: PUSH
4291: LD_INT 2
4293: EQUAL
4294: IFFALSE 4311
4296: GO 4298
4298: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4299: LD_EXP 2
4303: PPUSH
4304: LD_STRING D6-Huck-2
4306: PPUSH
4307: CALL_OW 88
// end ;
4311: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4312: LD_INT 22
4314: PUSH
4315: LD_INT 1
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 2
4324: PUSH
4325: LD_INT 34
4327: PUSH
4328: LD_INT 8
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: LD_INT 35
4337: PUSH
4338: LD_INT 8
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 69
4358: PUSH
4359: LD_INT 0
4361: GREATER
4362: IFFALSE 4554
4364: GO 4366
4366: DISABLE
4367: LD_INT 0
4369: PPUSH
4370: PPUSH
// begin enable ;
4371: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4372: LD_ADDR_VAR 0 1
4376: PUSH
4377: LD_INT 5
4379: PPUSH
4380: LD_INT 22
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 21
4392: PUSH
4393: LD_INT 3
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 30
4402: PUSH
4403: LD_INT 1
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 57
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 70
4433: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4434: LD_ADDR_VAR 0 2
4438: PUSH
4439: LD_INT 5
4441: PPUSH
4442: LD_INT 22
4444: PUSH
4445: LD_INT 1
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 21
4454: PUSH
4455: LD_INT 3
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 30
4464: PUSH
4465: LD_INT 5
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 3
4474: PUSH
4475: LD_INT 57
4477: PUSH
4478: EMPTY
4479: LIST
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: PPUSH
4491: CALL_OW 70
4495: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4496: LD_VAR 0 1
4500: PUSH
4501: LD_INT 0
4503: GREATER
4504: PUSH
4505: LD_VAR 0 2
4509: PUSH
4510: LD_INT 0
4512: GREATER
4513: AND
4514: IFFALSE 4554
// begin disable ;
4516: DISABLE
// DialogueOn ;
4517: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4521: LD_EXP 1
4525: PPUSH
4526: LD_STRING D7-JMM-1
4528: PPUSH
4529: CALL_OW 88
// DialogueOff ;
4533: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4537: LD_STRING M4
4539: PPUSH
4540: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4544: LD_INT 5
4546: PPUSH
4547: LD_INT 0
4549: PPUSH
4550: CALL_OW 424
// end ; end ;
4554: PPOPN 2
4556: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4557: LD_INT 6
4559: PPUSH
4560: LD_INT 22
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 25
4572: PUSH
4573: LD_INT 4
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PPUSH
4584: CALL_OW 70
4588: PUSH
4589: LD_INT 0
4591: GREATER
4592: PUSH
4593: LD_EXP 37
4597: PUSH
4598: LD_INT 1
4600: EQUAL
4601: AND
4602: PUSH
4603: LD_EXP 29
4607: PUSH
4608: LD_INT 0
4610: EQUAL
4611: AND
4612: IFFALSE 4677
4614: GO 4616
4616: DISABLE
// begin enable ;
4617: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4618: LD_ADDR_EXP 26
4622: PUSH
4623: LD_INT 6
4625: PPUSH
4626: LD_INT 22
4628: PUSH
4629: LD_INT 1
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 25
4638: PUSH
4639: LD_INT 4
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PPUSH
4650: CALL_OW 70
4654: PUSH
4655: LD_INT 1
4657: ARRAY
4658: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4659: LD_INT 6
4661: PPUSH
4662: LD_INT 0
4664: PPUSH
4665: CALL_OW 424
// radationResearched = 1 ;
4669: LD_ADDR_EXP 29
4673: PUSH
4674: LD_INT 1
4676: ST_TO_ADDR
// end ;
4677: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4678: LD_EXP 26
4682: PPUSH
4683: CALL_OW 301
4687: PUSH
4688: LD_EXP 29
4692: PUSH
4693: LD_INT 1
4695: EQUAL
4696: AND
4697: IFFALSE 4733
4699: GO 4701
4701: DISABLE
// begin enable ;
4702: ENABLE
// radationResearched = 0 ;
4703: LD_ADDR_EXP 29
4707: PUSH
4708: LD_INT 0
4710: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4711: LD_INT 6
4713: PPUSH
4714: LD_INT 1
4716: PPUSH
4717: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4721: LD_EXP 1
4725: PPUSH
4726: LD_STRING D9a-JMM-1
4728: PPUSH
4729: CALL_OW 88
// end ; end_of_file
4733: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4734: LD_VAR 0 5
4738: PUSH
4739: LD_INT 8
4741: EQUAL
4742: PUSH
4743: LD_EXP 35
4747: PUSH
4748: LD_INT 0
4750: EQUAL
4751: AND
4752: IFFALSE 4805
// begin eventVar1 = 1 ;
4754: LD_ADDR_EXP 35
4758: PUSH
4759: LD_INT 1
4761: ST_TO_ADDR
// DialogueOn ;
4762: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4766: LD_EXP 1
4770: PPUSH
4771: LD_STRING D6a-JMM-1
4773: PPUSH
4774: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4778: LD_EXP 15
4782: PPUSH
4783: LD_STRING D6a-Pow-1
4785: PPUSH
4786: CALL_OW 94
// DialogueOff ;
4790: CALL_OW 7
// wait ( 3 3$0 ) ;
4794: LD_INT 6300
4796: PPUSH
4797: CALL_OW 67
// PowellSupport ;
4801: CALL 1666 0 0
// end ; end ;
4805: PPOPN 5
4807: END
// on UnitDestroyed ( un ) do begin if un = JMM then
4808: LD_VAR 0 1
4812: PUSH
4813: LD_EXP 1
4817: EQUAL
4818: IFFALSE 4827
// YouLost ( JMM ) ;
4820: LD_STRING JMM
4822: PPUSH
4823: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
4827: LD_VAR 0 1
4831: PPUSH
4832: CALL_OW 264
4836: PUSH
4837: LD_INT 31
4839: EQUAL
4840: IFFALSE 4856
// achivCounter := achivCounter + 1 ;
4842: LD_ADDR_EXP 41
4846: PUSH
4847: LD_EXP 41
4851: PUSH
4852: LD_INT 1
4854: PLUS
4855: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
4856: LD_VAR 0 1
4860: PPUSH
4861: CALL_OW 255
4865: PUSH
4866: LD_INT 1
4868: NONEQUAL
4869: PUSH
4870: LD_VAR 0 1
4874: PPUSH
4875: CALL_OW 247
4879: PUSH
4880: LD_INT 2
4882: EQUAL
4883: AND
4884: IFFALSE 4900
// destroyCounter := destroyCounter + 1 ;
4886: LD_ADDR_EXP 42
4890: PUSH
4891: LD_EXP 42
4895: PUSH
4896: LD_INT 1
4898: PLUS
4899: ST_TO_ADDR
// end ;
4900: PPOPN 1
4902: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
4903: LD_VAR 0 2
4907: PUSH
4908: LD_EXP 18
4912: EQUAL
4913: IFFALSE 4922
// SetAchievement ( ACH_MASHA ) ;
4915: LD_STRING ACH_MASHA
4917: PPUSH
4918: CALL_OW 543
// end ;
4922: PPOPN 4
4924: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4925: LD_VAR 0 1
4929: PPUSH
4930: CALL_OW 264
4934: PUSH
4935: LD_INT 8
4937: EQUAL
4938: PUSH
4939: LD_EXP 36
4943: PUSH
4944: LD_INT 0
4946: EQUAL
4947: AND
4948: IFFALSE 5017
// begin eventVar2 = 1 ;
4950: LD_ADDR_EXP 36
4954: PUSH
4955: LD_INT 1
4957: ST_TO_ADDR
// DialogueOn ;
4958: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
4962: LD_EXP 1
4966: PPUSH
4967: LD_STRING D6b-JMM-1
4969: PPUSH
4970: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
4974: LD_EXP 15
4978: PPUSH
4979: LD_STRING D6b-Pow-1
4981: PPUSH
4982: CALL_OW 94
// DialogueOff ;
4986: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
4990: LD_INT 5
4992: PPUSH
4993: LD_INT 1
4995: PPUSH
4996: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5000: LD_INT 7
5002: PPUSH
5003: LD_INT 1
5005: PPUSH
5006: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5010: LD_STRING M3
5012: PPUSH
5013: CALL_OW 337
// end ; end ;
5017: PPOPN 2
5019: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5020: LD_VAR 0 2
5024: PPUSH
5025: LD_VAR 0 3
5029: PPUSH
5030: LD_INT 5
5032: PPUSH
5033: CALL_OW 309
5037: PUSH
5038: LD_EXP 37
5042: PUSH
5043: LD_INT 0
5045: EQUAL
5046: AND
5047: IFFALSE 5276
// begin eventVar3 = 1 ;
5049: LD_ADDR_EXP 37
5053: PUSH
5054: LD_INT 1
5056: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5057: LD_INT 175
5059: PPUSH
5060: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5064: LD_INT 7
5066: PPUSH
5067: LD_INT 22
5069: PUSH
5070: LD_INT 1
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: LD_INT 21
5079: PUSH
5080: LD_INT 2
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: PUSH
5087: LD_INT 34
5089: PUSH
5090: LD_INT 11
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: PPUSH
5102: CALL_OW 70
5106: PUSH
5107: LD_INT 0
5109: GREATER
5110: IFFALSE 5129
// begin radarOnSpot = 1 ;
5112: LD_ADDR_EXP 30
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5120: LD_STRING M3a
5122: PPUSH
5123: CALL_OW 337
// end else
5127: GO 5136
// begin ChangeMissionObjectives ( M3b ) ;
5129: LD_STRING M3b
5131: PPUSH
5132: CALL_OW 337
// end ; DialogueOn ;
5136: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5140: LD_EXP 2
5144: PPUSH
5145: LD_STRING D8-Huck-1
5147: PPUSH
5148: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5152: LD_EXP 1
5156: PPUSH
5157: LD_STRING D8-JMM-1
5159: PPUSH
5160: CALL_OW 88
// if IsOk ( Stevens ) then
5164: LD_EXP 2
5168: PPUSH
5169: CALL_OW 302
5173: IFFALSE 5235
// begin Say ( Stevens , D8-Huck-2 ) ;
5175: LD_EXP 2
5179: PPUSH
5180: LD_STRING D8-Huck-2
5182: PPUSH
5183: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5187: LD_EXP 1
5191: PPUSH
5192: LD_STRING D8-JMM-2
5194: PPUSH
5195: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5199: LD_EXP 2
5203: PPUSH
5204: LD_STRING D8-Huck-3
5206: PPUSH
5207: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5211: LD_EXP 1
5215: PPUSH
5216: LD_STRING D8-JMM-3
5218: PPUSH
5219: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5223: LD_EXP 2
5227: PPUSH
5228: LD_STRING D8-Huck-4
5230: PPUSH
5231: CALL_OW 88
// end ; DialogueOff ;
5235: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5239: LD_INT 5
5241: PPUSH
5242: LD_INT 0
5244: PPUSH
5245: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5249: LD_INT 7
5251: PPUSH
5252: LD_INT 0
5254: PPUSH
5255: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5259: LD_INT 6
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5269: LD_STRING M5
5271: PPUSH
5272: CALL_OW 337
// end ; end ;
5276: PPOPN 3
5278: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5279: LD_EXP 26
5283: PPUSH
5284: CALL_OW 302
5288: PUSH
5289: LD_VAR 0 2
5293: PUSH
5294: LD_EXP 26
5298: EQUAL
5299: AND
5300: PUSH
5301: LD_EXP 38
5305: PUSH
5306: LD_INT 0
5308: EQUAL
5309: AND
5310: PUSH
5311: LD_EXP 37
5315: PUSH
5316: LD_INT 1
5318: EQUAL
5319: AND
5320: IFFALSE 5366
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5322: LD_VAR 0 1
5326: PPUSH
5327: LD_INT 1
5329: PPUSH
5330: CALL_OW 268
5334: PUSH
5335: LD_INT 11
5337: EQUAL
5338: PUSH
5339: LD_VAR 0 1
5343: PPUSH
5344: LD_INT 2
5346: PPUSH
5347: CALL_OW 268
5351: PUSH
5352: LD_INT 11
5354: EQUAL
5355: OR
5356: IFFALSE 5366
// eventVar4 = 1 ;
5358: LD_ADDR_EXP 38
5362: PUSH
5363: LD_INT 1
5365: ST_TO_ADDR
// end ;
5366: PPOPN 2
5368: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5369: LD_INT 0
5371: PPUSH
5372: PPUSH
// begin if GetNation ( unit ) = 2 then
5373: LD_VAR 0 1
5377: PPUSH
5378: CALL_OW 248
5382: PUSH
5383: LD_INT 2
5385: EQUAL
5386: IFFALSE 5664
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5388: LD_ADDR_EXP 32
5392: PUSH
5393: LD_EXP 32
5397: PUSH
5398: LD_INT 1
5400: PLUS
5401: ST_TO_ADDR
// for i := 1 to sibDeposits do
5402: LD_ADDR_VAR 0 4
5406: PUSH
5407: DOUBLE
5408: LD_INT 1
5410: DEC
5411: ST_TO_ADDR
5412: LD_EXP 31
5416: PUSH
5417: FOR_TO
5418: IFFALSE 5520
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5420: LD_EXP 31
5424: PUSH
5425: LD_VAR 0 4
5429: ARRAY
5430: PUSH
5431: LD_INT 1
5433: ARRAY
5434: PUSH
5435: LD_VAR 0 2
5439: EQUAL
5440: PUSH
5441: LD_EXP 31
5445: PUSH
5446: LD_VAR 0 4
5450: ARRAY
5451: PUSH
5452: LD_INT 2
5454: ARRAY
5455: PUSH
5456: LD_VAR 0 3
5460: EQUAL
5461: AND
5462: IFFALSE 5518
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5464: LD_ADDR_EXP 31
5468: PUSH
5469: LD_EXP 31
5473: PPUSH
5474: LD_VAR 0 4
5478: PUSH
5479: EMPTY
5480: LIST
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: PPUSH
5486: CALL_OW 3
5490: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5491: LD_ADDR_EXP 31
5495: PUSH
5496: LD_EXP 31
5500: PPUSH
5501: LD_VAR 0 4
5505: PUSH
5506: EMPTY
5507: LIST
5508: PUSH
5509: LD_INT 2
5511: ARRAY
5512: PPUSH
5513: CALL_OW 3
5517: ST_TO_ADDR
// end ;
5518: GO 5417
5520: POP
5521: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5522: LD_EXP 39
5526: PUSH
5527: LD_INT 0
5529: EQUAL
5530: PUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: LD_VAR 0 3
5540: PPUSH
5541: CALL_OW 428
5545: PUSH
5546: LD_INT 22
5548: PUSH
5549: LD_INT 1
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PPUSH
5556: CALL_OW 69
5560: IN
5561: AND
5562: IFFALSE 5664
// begin eventVar5 = 1 ;
5564: LD_ADDR_EXP 39
5568: PUSH
5569: LD_INT 1
5571: ST_TO_ADDR
// DialogueOn ;
5572: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5576: LD_EXP 2
5580: PPUSH
5581: LD_STRING D4-Sci1-1
5583: PPUSH
5584: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5588: LD_EXP 1
5592: PPUSH
5593: LD_STRING D4-JMM-1
5595: PPUSH
5596: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5600: LD_EXP 2
5604: PPUSH
5605: LD_STRING D4-Sci1-2
5607: PPUSH
5608: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5612: LD_EXP 1
5616: PPUSH
5617: LD_STRING D4-JMM-2
5619: PPUSH
5620: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5624: LD_EXP 2
5628: PPUSH
5629: LD_STRING D4-Sci1-3
5631: PPUSH
5632: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5636: LD_EXP 1
5640: PPUSH
5641: LD_STRING D4-JMM-3
5643: PPUSH
5644: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5648: LD_EXP 1
5652: PPUSH
5653: LD_STRING D4-JMM-3a
5655: PPUSH
5656: CALL_OW 88
// DialogueOff ;
5660: CALL_OW 7
// end ; end ; end ;
5664: PPOPN 5
5666: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5667: LD_VAR 0 1
5671: PPUSH
5672: CALL_OW 255
5676: PUSH
5677: LD_INT 1
5679: EQUAL
5680: PUSH
5681: LD_VAR 0 1
5685: PPUSH
5686: CALL_OW 266
5690: PUSH
5691: LD_INT 0
5693: EQUAL
5694: AND
5695: PUSH
5696: LD_INT 22
5698: PUSH
5699: LD_INT 1
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 21
5708: PUSH
5709: LD_INT 3
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 2
5718: PUSH
5719: LD_INT 30
5721: PUSH
5722: LD_INT 0
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 30
5731: PUSH
5732: LD_INT 1
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: LIST
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: PPUSH
5749: CALL_OW 69
5753: PUSH
5754: LD_INT 1
5756: EQUAL
5757: AND
5758: IFFALSE 5772
// SetBName ( building , omega ) ;
5760: LD_VAR 0 1
5764: PPUSH
5765: LD_STRING omega
5767: PPUSH
5768: CALL_OW 500
// end ;
5772: PPOPN 2
5774: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5775: LD_VAR 0 1
5779: PPUSH
5780: CALL 24300 0 1
// end ; end_of_file
5784: PPOPN 1
5786: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5787: LD_INT 0
5789: PPUSH
5790: PPUSH
// if exist_mode then
5791: LD_VAR 0 2
5795: IFFALSE 5814
// unit := CreateCharacter ( ident ) else
5797: LD_ADDR_VAR 0 4
5801: PUSH
5802: LD_VAR 0 1
5806: PPUSH
5807: CALL_OW 34
5811: ST_TO_ADDR
5812: GO 5829
// unit := NewCharacter ( ident ) ;
5814: LD_ADDR_VAR 0 4
5818: PUSH
5819: LD_VAR 0 1
5823: PPUSH
5824: CALL_OW 25
5828: ST_TO_ADDR
// result := unit ;
5829: LD_ADDR_VAR 0 3
5833: PUSH
5834: LD_VAR 0 4
5838: ST_TO_ADDR
// end ;
5839: LD_VAR 0 3
5843: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5844: LD_INT 0
5846: PPUSH
// vc_chassis := chassis ;
5847: LD_ADDR_OWVAR 37
5851: PUSH
5852: LD_VAR 0 1
5856: ST_TO_ADDR
// vc_engine := engine ;
5857: LD_ADDR_OWVAR 39
5861: PUSH
5862: LD_VAR 0 2
5866: ST_TO_ADDR
// vc_control := control ;
5867: LD_ADDR_OWVAR 38
5871: PUSH
5872: LD_VAR 0 3
5876: ST_TO_ADDR
// vc_weapon := weapon ;
5877: LD_ADDR_OWVAR 40
5881: PUSH
5882: LD_VAR 0 4
5886: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5887: LD_ADDR_OWVAR 41
5891: PUSH
5892: LD_VAR 0 5
5896: ST_TO_ADDR
// end ;
5897: LD_VAR 0 6
5901: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
5902: LD_INT 0
5904: PPUSH
5905: PPUSH
5906: PPUSH
5907: PPUSH
5908: PPUSH
5909: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5910: LD_VAR 0 1
5914: NOT
5915: PUSH
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 263
5925: PUSH
5926: LD_INT 2
5928: EQUAL
5929: NOT
5930: OR
5931: IFFALSE 5935
// exit ;
5933: GO 6251
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5935: LD_ADDR_VAR 0 6
5939: PUSH
5940: LD_INT 22
5942: PUSH
5943: LD_VAR 0 1
5947: PPUSH
5948: CALL_OW 255
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 2
5959: PUSH
5960: LD_INT 30
5962: PUSH
5963: LD_INT 36
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PUSH
5970: LD_INT 34
5972: PUSH
5973: LD_INT 31
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 69
5993: ST_TO_ADDR
// if not tmp then
5994: LD_VAR 0 6
5998: NOT
5999: IFFALSE 6003
// exit ;
6001: GO 6251
// result := [ ] ;
6003: LD_ADDR_VAR 0 2
6007: PUSH
6008: EMPTY
6009: ST_TO_ADDR
// for i in tmp do
6010: LD_ADDR_VAR 0 3
6014: PUSH
6015: LD_VAR 0 6
6019: PUSH
6020: FOR_IN
6021: IFFALSE 6092
// begin t := UnitsInside ( i ) ;
6023: LD_ADDR_VAR 0 4
6027: PUSH
6028: LD_VAR 0 3
6032: PPUSH
6033: CALL_OW 313
6037: ST_TO_ADDR
// if t then
6038: LD_VAR 0 4
6042: IFFALSE 6090
// for j in t do
6044: LD_ADDR_VAR 0 7
6048: PUSH
6049: LD_VAR 0 4
6053: PUSH
6054: FOR_IN
6055: IFFALSE 6088
// result := Insert ( result , result + 1 , j ) ;
6057: LD_ADDR_VAR 0 2
6061: PUSH
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_VAR 0 2
6071: PUSH
6072: LD_INT 1
6074: PLUS
6075: PPUSH
6076: LD_VAR 0 7
6080: PPUSH
6081: CALL_OW 2
6085: ST_TO_ADDR
6086: GO 6054
6088: POP
6089: POP
// end ;
6090: GO 6020
6092: POP
6093: POP
// if not result then
6094: LD_VAR 0 2
6098: NOT
6099: IFFALSE 6103
// exit ;
6101: GO 6251
// mech := result [ 1 ] ;
6103: LD_ADDR_VAR 0 5
6107: PUSH
6108: LD_VAR 0 2
6112: PUSH
6113: LD_INT 1
6115: ARRAY
6116: ST_TO_ADDR
// if result > 1 then
6117: LD_VAR 0 2
6121: PUSH
6122: LD_INT 1
6124: GREATER
6125: IFFALSE 6237
// for i = 2 to result do
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: DOUBLE
6133: LD_INT 2
6135: DEC
6136: ST_TO_ADDR
6137: LD_VAR 0 2
6141: PUSH
6142: FOR_TO
6143: IFFALSE 6235
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
6145: LD_ADDR_VAR 0 4
6149: PUSH
6150: LD_VAR 0 2
6154: PUSH
6155: LD_VAR 0 3
6159: ARRAY
6160: PPUSH
6161: LD_INT 3
6163: PPUSH
6164: CALL_OW 259
6168: PUSH
6169: LD_VAR 0 2
6173: PUSH
6174: LD_VAR 0 3
6178: ARRAY
6179: PPUSH
6180: CALL_OW 432
6184: MINUS
6185: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
6186: LD_VAR 0 4
6190: PUSH
6191: LD_VAR 0 5
6195: PPUSH
6196: LD_INT 3
6198: PPUSH
6199: CALL_OW 259
6203: PUSH
6204: LD_VAR 0 5
6208: PPUSH
6209: CALL_OW 432
6213: MINUS
6214: GREATEREQUAL
6215: IFFALSE 6233
// mech := result [ i ] ;
6217: LD_ADDR_VAR 0 5
6221: PUSH
6222: LD_VAR 0 2
6226: PUSH
6227: LD_VAR 0 3
6231: ARRAY
6232: ST_TO_ADDR
// end ;
6233: GO 6142
6235: POP
6236: POP
// ComLinkTo ( vehicle , mech ) ;
6237: LD_VAR 0 1
6241: PPUSH
6242: LD_VAR 0 5
6246: PPUSH
6247: CALL_OW 135
// end ;
6251: LD_VAR 0 2
6255: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6256: LD_INT 0
6258: PPUSH
6259: PPUSH
6260: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6261: LD_ADDR_VAR 0 1
6265: PUSH
6266: LD_VAR 0 1
6270: PUSH
6271: LD_EXP 1
6275: PUSH
6276: LD_EXP 2
6280: PUSH
6281: LD_EXP 3
6285: PUSH
6286: LD_EXP 4
6290: PUSH
6291: LD_EXP 5
6295: PUSH
6296: LD_EXP 6
6300: PUSH
6301: LD_EXP 7
6305: PUSH
6306: LD_EXP 8
6310: PUSH
6311: LD_EXP 9
6315: PUSH
6316: LD_EXP 10
6320: PUSH
6321: LD_EXP 11
6325: PUSH
6326: LD_EXP 12
6330: PUSH
6331: LD_EXP 13
6335: PUSH
6336: LD_EXP 14
6340: PUSH
6341: LD_EXP 15
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: DIFF
6363: ST_TO_ADDR
// if not characters then
6364: LD_VAR 0 1
6368: NOT
6369: IFFALSE 6373
// exit ;
6371: GO 6452
// speaker := characters [ rand ( 1 , characters ) ] ;
6373: LD_ADDR_VAR 0 6
6377: PUSH
6378: LD_VAR 0 1
6382: PUSH
6383: LD_INT 1
6385: PPUSH
6386: LD_VAR 0 1
6390: PPUSH
6391: CALL_OW 12
6395: ARRAY
6396: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6397: LD_VAR 0 6
6401: PPUSH
6402: CALL_OW 258
6406: PUSH
6407: LD_INT 1
6409: EQUAL
6410: IFFALSE 6428
// Say ( speaker , dialogMID ) else
6412: LD_VAR 0 6
6416: PPUSH
6417: LD_VAR 0 2
6421: PPUSH
6422: CALL_OW 88
6426: GO 6442
// Say ( speaker , dialogFID ) ;
6428: LD_VAR 0 6
6432: PPUSH
6433: LD_VAR 0 3
6437: PPUSH
6438: CALL_OW 88
// result := speaker ;
6442: LD_ADDR_VAR 0 4
6446: PUSH
6447: LD_VAR 0 6
6451: ST_TO_ADDR
// end ;
6452: LD_VAR 0 4
6456: RET
// export function PrepareDifficulty ; begin
6457: LD_INT 0
6459: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6460: LD_INT 5
6462: PPUSH
6463: LD_INT 8
6465: PPUSH
6466: LD_INT 2
6468: PPUSH
6469: CALL_OW 322
// if difficulty = 1 then
6473: LD_OWVAR 67
6477: PUSH
6478: LD_INT 1
6480: EQUAL
6481: IFFALSE 6600
// begin SetTech ( 66 , 8 , state_researched ) ;
6483: LD_INT 66
6485: PPUSH
6486: LD_INT 8
6488: PPUSH
6489: LD_INT 2
6491: PPUSH
6492: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6496: LD_INT 67
6498: PPUSH
6499: LD_INT 8
6501: PPUSH
6502: LD_INT 0
6504: PPUSH
6505: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6509: LD_INT 68
6511: PPUSH
6512: LD_INT 8
6514: PPUSH
6515: LD_INT 0
6517: PPUSH
6518: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6522: LD_INT 51
6524: PPUSH
6525: LD_INT 8
6527: PPUSH
6528: LD_INT 2
6530: PPUSH
6531: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6535: LD_INT 52
6537: PPUSH
6538: LD_INT 8
6540: PPUSH
6541: LD_INT 0
6543: PPUSH
6544: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6548: LD_INT 53
6550: PPUSH
6551: LD_INT 8
6553: PPUSH
6554: LD_INT 0
6556: PPUSH
6557: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6561: LD_INT 60
6563: PPUSH
6564: LD_INT 8
6566: PPUSH
6567: LD_INT 2
6569: PPUSH
6570: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6574: LD_INT 61
6576: PPUSH
6577: LD_INT 8
6579: PPUSH
6580: LD_INT 0
6582: PPUSH
6583: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6587: LD_INT 62
6589: PPUSH
6590: LD_INT 8
6592: PPUSH
6593: LD_INT 0
6595: PPUSH
6596: CALL_OW 322
// end ; if difficulty = 2 then
6600: LD_OWVAR 67
6604: PUSH
6605: LD_INT 2
6607: EQUAL
6608: IFFALSE 6727
// begin SetTech ( 66 , 8 , state_researched ) ;
6610: LD_INT 66
6612: PPUSH
6613: LD_INT 8
6615: PPUSH
6616: LD_INT 2
6618: PPUSH
6619: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6623: LD_INT 67
6625: PPUSH
6626: LD_INT 8
6628: PPUSH
6629: LD_INT 2
6631: PPUSH
6632: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6636: LD_INT 68
6638: PPUSH
6639: LD_INT 8
6641: PPUSH
6642: LD_INT 0
6644: PPUSH
6645: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6649: LD_INT 51
6651: PPUSH
6652: LD_INT 8
6654: PPUSH
6655: LD_INT 2
6657: PPUSH
6658: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6662: LD_INT 52
6664: PPUSH
6665: LD_INT 8
6667: PPUSH
6668: LD_INT 2
6670: PPUSH
6671: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6675: LD_INT 53
6677: PPUSH
6678: LD_INT 8
6680: PPUSH
6681: LD_INT 2
6683: PPUSH
6684: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6688: LD_INT 60
6690: PPUSH
6691: LD_INT 8
6693: PPUSH
6694: LD_INT 2
6696: PPUSH
6697: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6701: LD_INT 61
6703: PPUSH
6704: LD_INT 8
6706: PPUSH
6707: LD_INT 2
6709: PPUSH
6710: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6714: LD_INT 62
6716: PPUSH
6717: LD_INT 8
6719: PPUSH
6720: LD_INT 0
6722: PPUSH
6723: CALL_OW 322
// end ; if difficulty = 3 then
6727: LD_OWVAR 67
6731: PUSH
6732: LD_INT 3
6734: EQUAL
6735: IFFALSE 6854
// begin SetTech ( 66 , 8 , state_researched ) ;
6737: LD_INT 66
6739: PPUSH
6740: LD_INT 8
6742: PPUSH
6743: LD_INT 2
6745: PPUSH
6746: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6750: LD_INT 67
6752: PPUSH
6753: LD_INT 8
6755: PPUSH
6756: LD_INT 2
6758: PPUSH
6759: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6763: LD_INT 68
6765: PPUSH
6766: LD_INT 8
6768: PPUSH
6769: LD_INT 0
6771: PPUSH
6772: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6776: LD_INT 51
6778: PPUSH
6779: LD_INT 8
6781: PPUSH
6782: LD_INT 2
6784: PPUSH
6785: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6789: LD_INT 52
6791: PPUSH
6792: LD_INT 8
6794: PPUSH
6795: LD_INT 2
6797: PPUSH
6798: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6802: LD_INT 53
6804: PPUSH
6805: LD_INT 8
6807: PPUSH
6808: LD_INT 2
6810: PPUSH
6811: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6815: LD_INT 60
6817: PPUSH
6818: LD_INT 8
6820: PPUSH
6821: LD_INT 2
6823: PPUSH
6824: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6828: LD_INT 61
6830: PPUSH
6831: LD_INT 8
6833: PPUSH
6834: LD_INT 2
6836: PPUSH
6837: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6841: LD_INT 62
6843: PPUSH
6844: LD_INT 8
6846: PPUSH
6847: LD_INT 0
6849: PPUSH
6850: CALL_OW 322
// end ; end ;
6854: LD_VAR 0 1
6858: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6859: LD_INT 0
6861: PPUSH
6862: PPUSH
6863: PPUSH
6864: PPUSH
6865: PPUSH
6866: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6867: LD_ADDR_VAR 0 7
6871: PUSH
6872: LD_INT 22
6874: PUSH
6875: LD_VAR 0 1
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 25
6886: PUSH
6887: LD_INT 9
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PPUSH
6898: CALL_OW 69
6902: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6903: LD_ADDR_VAR 0 8
6907: PUSH
6908: LD_INT 22
6910: PUSH
6911: LD_VAR 0 2
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 3
6922: PUSH
6923: LD_INT 21
6925: PUSH
6926: LD_INT 3
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PPUSH
6941: CALL_OW 69
6945: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6946: LD_ADDR_VAR 0 5
6950: PUSH
6951: LD_INT 1
6953: PPUSH
6954: LD_INT 3
6956: PPUSH
6957: CALL_OW 12
6961: ST_TO_ADDR
// for i = 1 to list do
6962: LD_ADDR_VAR 0 6
6966: PUSH
6967: DOUBLE
6968: LD_INT 1
6970: DEC
6971: ST_TO_ADDR
6972: LD_VAR 0 7
6976: PUSH
6977: FOR_TO
6978: IFFALSE 7160
// for ta in filter do
6980: LD_ADDR_VAR 0 4
6984: PUSH
6985: LD_VAR 0 8
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7156
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6993: LD_VAR 0 7
6997: PUSH
6998: LD_VAR 0 6
7002: ARRAY
7003: PPUSH
7004: LD_VAR 0 4
7008: PPUSH
7009: CALL_OW 296
7013: PUSH
7014: LD_INT 13
7016: LESSEQUAL
7017: IFFALSE 7154
// begin case c of 1 :
7019: LD_VAR 0 5
7023: PUSH
7024: LD_INT 1
7026: DOUBLE
7027: EQUAL
7028: IFTRUE 7032
7030: GO 7070
7032: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
7033: LD_VAR 0 7
7037: PUSH
7038: LD_VAR 0 6
7042: ARRAY
7043: PPUSH
7044: LD_VAR 0 4
7048: PPUSH
7049: CALL_OW 250
7053: PPUSH
7054: LD_VAR 0 4
7058: PPUSH
7059: CALL_OW 251
7063: PPUSH
7064: CALL_OW 154
7068: GO 7154
7070: LD_INT 2
7072: DOUBLE
7073: EQUAL
7074: IFTRUE 7078
7076: GO 7142
7078: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
7079: LD_VAR 0 7
7083: PUSH
7084: LD_VAR 0 6
7088: ARRAY
7089: PPUSH
7090: LD_VAR 0 4
7094: PPUSH
7095: CALL_OW 250
7099: PUSH
7100: LD_INT 1
7102: NEG
7103: PPUSH
7104: LD_INT 1
7106: PPUSH
7107: CALL_OW 12
7111: PLUS
7112: PPUSH
7113: LD_VAR 0 4
7117: PPUSH
7118: CALL_OW 251
7122: PUSH
7123: LD_INT 1
7125: NEG
7126: PPUSH
7127: LD_INT 1
7129: PPUSH
7130: CALL_OW 12
7134: PLUS
7135: PPUSH
7136: CALL_OW 153
7140: GO 7154
7142: LD_INT 3
7144: DOUBLE
7145: EQUAL
7146: IFTRUE 7150
7148: GO 7153
7150: POP
// ; end ;
7151: GO 7154
7153: POP
// end ; end ;
7154: GO 6990
7156: POP
7157: POP
7158: GO 6977
7160: POP
7161: POP
// end ;
7162: LD_VAR 0 3
7166: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7167: LD_INT 0
7169: PPUSH
7170: PPUSH
// for i in charactersList do
7171: LD_ADDR_VAR 0 4
7175: PUSH
7176: LD_VAR 0 1
7180: PUSH
7181: FOR_IN
7182: IFFALSE 7200
// SaveCharacters ( i , ident ) ;
7184: LD_VAR 0 4
7188: PPUSH
7189: LD_VAR 0 2
7193: PPUSH
7194: CALL_OW 38
7198: GO 7181
7200: POP
7201: POP
// end ;
7202: LD_VAR 0 3
7206: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7207: LD_INT 0
7209: PPUSH
7210: PPUSH
7211: PPUSH
7212: PPUSH
7213: PPUSH
7214: PPUSH
7215: PPUSH
7216: PPUSH
7217: PPUSH
7218: PPUSH
7219: PPUSH
// for i = 1 to medicCount do
7220: LD_ADDR_VAR 0 13
7224: PUSH
7225: DOUBLE
7226: LD_INT 1
7228: DEC
7229: ST_TO_ADDR
7230: LD_VAR 0 7
7234: PUSH
7235: FOR_TO
7236: IFFALSE 7318
// begin uc_side = side ;
7238: LD_ADDR_OWVAR 20
7242: PUSH
7243: LD_VAR 0 1
7247: ST_TO_ADDR
// uc_nation = nation ;
7248: LD_ADDR_OWVAR 21
7252: PUSH
7253: LD_VAR 0 2
7257: ST_TO_ADDR
// hc_name =  ;
7258: LD_ADDR_OWVAR 26
7262: PUSH
7263: LD_STRING 
7265: ST_TO_ADDR
// hc_gallery =  ;
7266: LD_ADDR_OWVAR 33
7270: PUSH
7271: LD_STRING 
7273: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7274: LD_INT 0
7276: PPUSH
7277: LD_INT 4
7279: PPUSH
7280: LD_VAR 0 8
7284: PPUSH
7285: CALL_OW 380
// un = CreateHuman ;
7289: LD_ADDR_VAR 0 15
7293: PUSH
7294: CALL_OW 44
7298: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7299: LD_VAR 0 15
7303: PPUSH
7304: LD_VAR 0 9
7308: PPUSH
7309: LD_INT 0
7311: PPUSH
7312: CALL_OW 49
// end ;
7316: GO 7235
7318: POP
7319: POP
// for i = 1 to soldierCount do
7320: LD_ADDR_VAR 0 13
7324: PUSH
7325: DOUBLE
7326: LD_INT 1
7328: DEC
7329: ST_TO_ADDR
7330: LD_VAR 0 3
7334: PUSH
7335: FOR_TO
7336: IFFALSE 7418
// begin uc_side = side ;
7338: LD_ADDR_OWVAR 20
7342: PUSH
7343: LD_VAR 0 1
7347: ST_TO_ADDR
// uc_nation = nation ;
7348: LD_ADDR_OWVAR 21
7352: PUSH
7353: LD_VAR 0 2
7357: ST_TO_ADDR
// hc_name =  ;
7358: LD_ADDR_OWVAR 26
7362: PUSH
7363: LD_STRING 
7365: ST_TO_ADDR
// hc_gallery =  ;
7366: LD_ADDR_OWVAR 33
7370: PUSH
7371: LD_STRING 
7373: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7374: LD_INT 0
7376: PPUSH
7377: LD_INT 1
7379: PPUSH
7380: LD_VAR 0 8
7384: PPUSH
7385: CALL_OW 380
// un = CreateHuman ;
7389: LD_ADDR_VAR 0 15
7393: PUSH
7394: CALL_OW 44
7398: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7399: LD_VAR 0 15
7403: PPUSH
7404: LD_VAR 0 9
7408: PPUSH
7409: LD_INT 0
7411: PPUSH
7412: CALL_OW 49
// end ;
7416: GO 7335
7418: POP
7419: POP
// for i = 1 to sniperCount do
7420: LD_ADDR_VAR 0 13
7424: PUSH
7425: DOUBLE
7426: LD_INT 1
7428: DEC
7429: ST_TO_ADDR
7430: LD_VAR 0 4
7434: PUSH
7435: FOR_TO
7436: IFFALSE 7518
// begin uc_side = side ;
7438: LD_ADDR_OWVAR 20
7442: PUSH
7443: LD_VAR 0 1
7447: ST_TO_ADDR
// uc_nation = nation ;
7448: LD_ADDR_OWVAR 21
7452: PUSH
7453: LD_VAR 0 2
7457: ST_TO_ADDR
// hc_name =  ;
7458: LD_ADDR_OWVAR 26
7462: PUSH
7463: LD_STRING 
7465: ST_TO_ADDR
// hc_gallery =  ;
7466: LD_ADDR_OWVAR 33
7470: PUSH
7471: LD_STRING 
7473: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7474: LD_INT 0
7476: PPUSH
7477: LD_INT 5
7479: PPUSH
7480: LD_VAR 0 8
7484: PPUSH
7485: CALL_OW 380
// un = CreateHuman ;
7489: LD_ADDR_VAR 0 15
7493: PUSH
7494: CALL_OW 44
7498: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7499: LD_VAR 0 15
7503: PPUSH
7504: LD_VAR 0 9
7508: PPUSH
7509: LD_INT 0
7511: PPUSH
7512: CALL_OW 49
// end ;
7516: GO 7435
7518: POP
7519: POP
// for i = 1 to bazookCount do
7520: LD_ADDR_VAR 0 13
7524: PUSH
7525: DOUBLE
7526: LD_INT 1
7528: DEC
7529: ST_TO_ADDR
7530: LD_VAR 0 5
7534: PUSH
7535: FOR_TO
7536: IFFALSE 7618
// begin uc_side = side ;
7538: LD_ADDR_OWVAR 20
7542: PUSH
7543: LD_VAR 0 1
7547: ST_TO_ADDR
// uc_nation = nation ;
7548: LD_ADDR_OWVAR 21
7552: PUSH
7553: LD_VAR 0 2
7557: ST_TO_ADDR
// hc_name =  ;
7558: LD_ADDR_OWVAR 26
7562: PUSH
7563: LD_STRING 
7565: ST_TO_ADDR
// hc_gallery =  ;
7566: LD_ADDR_OWVAR 33
7570: PUSH
7571: LD_STRING 
7573: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7574: LD_INT 0
7576: PPUSH
7577: LD_INT 9
7579: PPUSH
7580: LD_VAR 0 8
7584: PPUSH
7585: CALL_OW 380
// un = CreateHuman ;
7589: LD_ADDR_VAR 0 15
7593: PUSH
7594: CALL_OW 44
7598: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7599: LD_VAR 0 15
7603: PPUSH
7604: LD_VAR 0 9
7608: PPUSH
7609: LD_INT 0
7611: PPUSH
7612: CALL_OW 49
// end ;
7616: GO 7535
7618: POP
7619: POP
// for i = 1 to mortalCount do
7620: LD_ADDR_VAR 0 13
7624: PUSH
7625: DOUBLE
7626: LD_INT 1
7628: DEC
7629: ST_TO_ADDR
7630: LD_VAR 0 6
7634: PUSH
7635: FOR_TO
7636: IFFALSE 7718
// begin uc_side = side ;
7638: LD_ADDR_OWVAR 20
7642: PUSH
7643: LD_VAR 0 1
7647: ST_TO_ADDR
// uc_nation = nation ;
7648: LD_ADDR_OWVAR 21
7652: PUSH
7653: LD_VAR 0 2
7657: ST_TO_ADDR
// hc_name =  ;
7658: LD_ADDR_OWVAR 26
7662: PUSH
7663: LD_STRING 
7665: ST_TO_ADDR
// hc_gallery =  ;
7666: LD_ADDR_OWVAR 33
7670: PUSH
7671: LD_STRING 
7673: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 8
7679: PPUSH
7680: LD_VAR 0 8
7684: PPUSH
7685: CALL_OW 380
// un = CreateHuman ;
7689: LD_ADDR_VAR 0 15
7693: PUSH
7694: CALL_OW 44
7698: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7699: LD_VAR 0 15
7703: PPUSH
7704: LD_VAR 0 9
7708: PPUSH
7709: LD_INT 0
7711: PPUSH
7712: CALL_OW 49
// end ;
7716: GO 7635
7718: POP
7719: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7720: LD_ADDR_VAR 0 17
7724: PUSH
7725: LD_INT 22
7727: PUSH
7728: LD_VAR 0 1
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 25
7739: PUSH
7740: LD_INT 4
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 69
7755: ST_TO_ADDR
// for i in medic_list do
7756: LD_ADDR_VAR 0 13
7760: PUSH
7761: LD_VAR 0 17
7765: PUSH
7766: FOR_IN
7767: IFFALSE 7802
// if GetTag ( i ) = 1 then
7769: LD_VAR 0 13
7773: PPUSH
7774: CALL_OW 110
7778: PUSH
7779: LD_INT 1
7781: EQUAL
7782: IFFALSE 7800
// medic_list := medic_list diff i ;
7784: LD_ADDR_VAR 0 17
7788: PUSH
7789: LD_VAR 0 17
7793: PUSH
7794: LD_VAR 0 13
7798: DIFF
7799: ST_TO_ADDR
7800: GO 7766
7802: POP
7803: POP
// for i in medic_list do
7804: LD_ADDR_VAR 0 13
7808: PUSH
7809: LD_VAR 0 17
7813: PUSH
7814: FOR_IN
7815: IFFALSE 7833
// ComMoveToArea ( i , healArea ) ;
7817: LD_VAR 0 13
7821: PPUSH
7822: LD_VAR 0 10
7826: PPUSH
7827: CALL_OW 113
7831: GO 7814
7833: POP
7834: POP
// repeat wait ( 0 0$1 ) ;
7835: LD_INT 35
7837: PPUSH
7838: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7842: LD_ADDR_VAR 0 16
7846: PUSH
7847: LD_INT 22
7849: PUSH
7850: LD_VAR 0 1
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 1
7861: PUSH
7862: LD_INT 3
7864: PUSH
7865: LD_INT 24
7867: PUSH
7868: LD_INT 550
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: PUSH
7879: LD_INT 24
7881: PUSH
7882: LD_INT 250
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: LIST
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PPUSH
7898: CALL_OW 69
7902: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7903: LD_ADDR_VAR 0 18
7907: PUSH
7908: LD_INT 22
7910: PUSH
7911: LD_VAR 0 1
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 2
7922: PUSH
7923: LD_INT 25
7925: PUSH
7926: LD_INT 1
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 25
7935: PUSH
7936: LD_INT 5
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 25
7945: PUSH
7946: LD_INT 8
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PUSH
7953: LD_INT 25
7955: PUSH
7956: LD_INT 9
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: PUSH
7970: LD_INT 24
7972: PUSH
7973: LD_INT 1000
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: PPUSH
7985: CALL_OW 69
7989: ST_TO_ADDR
// if medicCount > 0 then
7990: LD_VAR 0 7
7994: PUSH
7995: LD_INT 0
7997: GREATER
7998: IFFALSE 8072
// begin if damageUnit_list > 0 then
8000: LD_VAR 0 16
8004: PUSH
8005: LD_INT 0
8007: GREATER
8008: IFFALSE 8072
// begin for i in damageUnit_list do
8010: LD_ADDR_VAR 0 13
8014: PUSH
8015: LD_VAR 0 16
8019: PUSH
8020: FOR_IN
8021: IFFALSE 8070
// begin ComMoveToArea ( i , healArea ) ;
8023: LD_VAR 0 13
8027: PPUSH
8028: LD_VAR 0 10
8032: PPUSH
8033: CALL_OW 113
// for j in medic_list do
8037: LD_ADDR_VAR 0 14
8041: PUSH
8042: LD_VAR 0 17
8046: PUSH
8047: FOR_IN
8048: IFFALSE 8066
// AddComHeal ( j , i ) ;
8050: LD_VAR 0 14
8054: PPUSH
8055: LD_VAR 0 13
8059: PPUSH
8060: CALL_OW 188
8064: GO 8047
8066: POP
8067: POP
// end ;
8068: GO 8020
8070: POP
8071: POP
// end ; end ; for i in soldiersOK_list do
8072: LD_ADDR_VAR 0 13
8076: PUSH
8077: LD_VAR 0 18
8081: PUSH
8082: FOR_IN
8083: IFFALSE 8259
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8085: LD_ADDR_VAR 0 21
8089: PUSH
8090: LD_INT 22
8092: PUSH
8093: LD_VAR 0 11
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PPUSH
8102: CALL_OW 69
8106: PPUSH
8107: LD_VAR 0 13
8111: PPUSH
8112: CALL_OW 74
8116: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8117: LD_ADDR_VAR 0 22
8121: PUSH
8122: LD_INT 22
8124: PUSH
8125: LD_VAR 0 11
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: LD_INT 2
8136: PUSH
8137: LD_INT 59
8139: PUSH
8140: EMPTY
8141: LIST
8142: PUSH
8143: LD_INT 21
8145: PUSH
8146: LD_INT 1
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PUSH
8153: LD_INT 21
8155: PUSH
8156: LD_INT 2
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: PPUSH
8176: CALL_OW 69
8180: PPUSH
8181: LD_VAR 0 13
8185: PPUSH
8186: CALL_OW 74
8190: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8191: LD_VAR 0 13
8195: PPUSH
8196: LD_VAR 0 21
8200: PPUSH
8201: CALL_OW 296
8205: PUSH
8206: LD_INT 8
8208: PLUS
8209: PUSH
8210: LD_VAR 0 13
8214: PPUSH
8215: LD_VAR 0 22
8219: PPUSH
8220: CALL_OW 296
8224: LESS
8225: IFFALSE 8243
// begin ComAttackUnit ( i , target1 ) ;
8227: LD_VAR 0 13
8231: PPUSH
8232: LD_VAR 0 21
8236: PPUSH
8237: CALL_OW 115
// end else
8241: GO 8257
// begin ComAttackUnit ( i , target2 ) ;
8243: LD_VAR 0 13
8247: PPUSH
8248: LD_VAR 0 22
8252: PPUSH
8253: CALL_OW 115
// end ; end ;
8257: GO 8082
8259: POP
8260: POP
// until soldiersOK_list = [ ] ;
8261: LD_VAR 0 18
8265: PUSH
8266: EMPTY
8267: EQUAL
8268: IFFALSE 7835
// end ;
8270: LD_VAR 0 12
8274: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
8283: PPUSH
8284: PPUSH
8285: PPUSH
8286: PPUSH
8287: PPUSH
// amChassisTab = [ ] ;
8288: LD_ADDR_VAR 0 19
8292: PUSH
8293: EMPTY
8294: ST_TO_ADDR
// arChassisTab = [ ] ;
8295: LD_ADDR_VAR 0 18
8299: PUSH
8300: EMPTY
8301: ST_TO_ADDR
// ruChassisTab = [ ] ;
8302: LD_ADDR_VAR 0 17
8306: PUSH
8307: EMPTY
8308: ST_TO_ADDR
// for i = 1 to vehCount do
8309: LD_ADDR_VAR 0 13
8313: PUSH
8314: DOUBLE
8315: LD_INT 1
8317: DEC
8318: ST_TO_ADDR
8319: LD_VAR 0 3
8323: PUSH
8324: FOR_TO
8325: IFFALSE 9749
// begin wait ( 0 0$01 ) ;
8327: LD_INT 35
8329: PPUSH
8330: CALL_OW 67
// if nation = 1 then
8334: LD_VAR 0 5
8338: PUSH
8339: LD_INT 1
8341: EQUAL
8342: IFFALSE 8823
// begin uc_side = side ;
8344: LD_ADDR_OWVAR 20
8348: PUSH
8349: LD_VAR 0 2
8353: ST_TO_ADDR
// uc_nation = nation ;
8354: LD_ADDR_OWVAR 21
8358: PUSH
8359: LD_VAR 0 5
8363: ST_TO_ADDR
// vc_engine = vehengine ;
8364: LD_ADDR_OWVAR 39
8368: PUSH
8369: LD_VAR 0 6
8373: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8374: LD_ADDR_OWVAR 40
8378: PUSH
8379: LD_VAR 0 10
8383: PUSH
8384: LD_INT 1
8386: PPUSH
8387: LD_VAR 0 10
8391: PPUSH
8392: CALL_OW 12
8396: ARRAY
8397: ST_TO_ADDR
// for j = 1 to AMWeapon do
8398: LD_ADDR_VAR 0 14
8402: PUSH
8403: DOUBLE
8404: LD_INT 1
8406: DEC
8407: ST_TO_ADDR
8408: LD_VAR 0 10
8412: PUSH
8413: FOR_TO
8414: IFFALSE 8715
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8416: LD_VAR 0 10
8420: PUSH
8421: LD_VAR 0 14
8425: ARRAY
8426: PUSH
8427: LD_INT 2
8429: EQUAL
8430: PUSH
8431: LD_VAR 0 10
8435: PUSH
8436: LD_VAR 0 14
8440: ARRAY
8441: PUSH
8442: LD_INT 3
8444: EQUAL
8445: OR
8446: IFFALSE 8499
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8448: LD_ADDR_VAR 0 19
8452: PUSH
8453: LD_INT 1
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: LD_INT 3
8461: PUSH
8462: LD_INT 4
8464: PUSH
8465: LD_INT 5
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8475: LD_ADDR_OWVAR 37
8479: PUSH
8480: LD_VAR 0 19
8484: PUSH
8485: LD_INT 1
8487: PPUSH
8488: LD_VAR 0 19
8492: PPUSH
8493: CALL_OW 12
8497: ARRAY
8498: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8499: LD_VAR 0 10
8503: PUSH
8504: LD_VAR 0 14
8508: ARRAY
8509: PUSH
8510: LD_INT 4
8512: EQUAL
8513: PUSH
8514: LD_VAR 0 10
8518: PUSH
8519: LD_VAR 0 14
8523: ARRAY
8524: PUSH
8525: LD_INT 5
8527: EQUAL
8528: OR
8529: PUSH
8530: LD_VAR 0 10
8534: PUSH
8535: LD_VAR 0 14
8539: ARRAY
8540: PUSH
8541: LD_INT 9
8543: EQUAL
8544: OR
8545: PUSH
8546: LD_VAR 0 10
8550: PUSH
8551: LD_VAR 0 14
8555: ARRAY
8556: PUSH
8557: LD_INT 11
8559: EQUAL
8560: OR
8561: PUSH
8562: LD_VAR 0 10
8566: PUSH
8567: LD_VAR 0 14
8571: ARRAY
8572: PUSH
8573: LD_INT 7
8575: EQUAL
8576: OR
8577: IFFALSE 8626
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8579: LD_ADDR_VAR 0 19
8583: PUSH
8584: LD_INT 2
8586: PUSH
8587: LD_INT 3
8589: PUSH
8590: LD_INT 4
8592: PUSH
8593: LD_INT 5
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8602: LD_ADDR_OWVAR 37
8606: PUSH
8607: LD_VAR 0 19
8611: PUSH
8612: LD_INT 1
8614: PPUSH
8615: LD_VAR 0 19
8619: PPUSH
8620: CALL_OW 12
8624: ARRAY
8625: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8626: LD_VAR 0 10
8630: PUSH
8631: LD_VAR 0 14
8635: ARRAY
8636: PUSH
8637: LD_INT 8
8639: EQUAL
8640: PUSH
8641: LD_VAR 0 10
8645: PUSH
8646: LD_VAR 0 14
8650: ARRAY
8651: PUSH
8652: LD_INT 6
8654: EQUAL
8655: OR
8656: PUSH
8657: LD_VAR 0 10
8661: PUSH
8662: LD_VAR 0 14
8666: ARRAY
8667: PUSH
8668: LD_INT 10
8670: EQUAL
8671: OR
8672: IFFALSE 8713
// begin amChassisTab = [ 4 , 5 ] ;
8674: LD_ADDR_VAR 0 19
8678: PUSH
8679: LD_INT 4
8681: PUSH
8682: LD_INT 5
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8689: LD_ADDR_OWVAR 37
8693: PUSH
8694: LD_VAR 0 19
8698: PUSH
8699: LD_INT 1
8701: PPUSH
8702: LD_VAR 0 19
8706: PPUSH
8707: CALL_OW 12
8711: ARRAY
8712: ST_TO_ADDR
// end ; end ;
8713: GO 8413
8715: POP
8716: POP
// veh = CreateVehicle ;
8717: LD_ADDR_VAR 0 16
8721: PUSH
8722: CALL_OW 45
8726: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8727: LD_VAR 0 16
8731: PPUSH
8732: LD_VAR 0 1
8736: PPUSH
8737: LD_INT 0
8739: PPUSH
8740: CALL_OW 49
// if vc_control = 1 then
8744: LD_OWVAR 38
8748: PUSH
8749: LD_INT 1
8751: EQUAL
8752: IFFALSE 8809
// begin hc_gallery =  ;
8754: LD_ADDR_OWVAR 33
8758: PUSH
8759: LD_STRING 
8761: ST_TO_ADDR
// hc_name =  ;
8762: LD_ADDR_OWVAR 26
8766: PUSH
8767: LD_STRING 
8769: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8770: LD_INT 0
8772: PPUSH
8773: LD_INT 3
8775: PPUSH
8776: LD_VAR 0 4
8780: PPUSH
8781: CALL_OW 380
// un = CreateHuman ;
8785: LD_ADDR_VAR 0 15
8789: PUSH
8790: CALL_OW 44
8794: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8795: LD_VAR 0 15
8799: PPUSH
8800: LD_VAR 0 16
8804: PPUSH
8805: CALL_OW 52
// end ; i = i + 1 ;
8809: LD_ADDR_VAR 0 13
8813: PUSH
8814: LD_VAR 0 13
8818: PUSH
8819: LD_INT 1
8821: PLUS
8822: ST_TO_ADDR
// end ; if nation = 2 then
8823: LD_VAR 0 5
8827: PUSH
8828: LD_INT 2
8830: EQUAL
8831: IFFALSE 9333
// begin uc_side = side ;
8833: LD_ADDR_OWVAR 20
8837: PUSH
8838: LD_VAR 0 2
8842: ST_TO_ADDR
// uc_nation = nation ;
8843: LD_ADDR_OWVAR 21
8847: PUSH
8848: LD_VAR 0 5
8852: ST_TO_ADDR
// vc_engine = vehengine ;
8853: LD_ADDR_OWVAR 39
8857: PUSH
8858: LD_VAR 0 6
8862: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8863: LD_INT 22
8865: PUSH
8866: LD_VAR 0 2
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PUSH
8875: LD_INT 21
8877: PUSH
8878: LD_INT 2
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: PUSH
8885: LD_INT 33
8887: PUSH
8888: LD_INT 2
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PUSH
8895: LD_INT 50
8897: PUSH
8898: EMPTY
8899: LIST
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 69
8911: PUSH
8912: LD_INT 8
8914: LESSEQUAL
8915: IFFALSE 8943
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8917: LD_ADDR_OWVAR 38
8921: PUSH
8922: LD_VAR 0 7
8926: PUSH
8927: LD_INT 1
8929: PPUSH
8930: LD_VAR 0 7
8934: PPUSH
8935: CALL_OW 12
8939: ARRAY
8940: ST_TO_ADDR
8941: GO 8951
// vc_control = control_apeman ;
8943: LD_ADDR_OWVAR 38
8947: PUSH
8948: LD_INT 5
8950: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8951: LD_ADDR_OWVAR 40
8955: PUSH
8956: LD_VAR 0 9
8960: PUSH
8961: LD_INT 1
8963: PPUSH
8964: LD_VAR 0 9
8968: PPUSH
8969: CALL_OW 12
8973: ARRAY
8974: ST_TO_ADDR
// for j = 1 to ARWeapons do
8975: LD_ADDR_VAR 0 14
8979: PUSH
8980: DOUBLE
8981: LD_INT 1
8983: DEC
8984: ST_TO_ADDR
8985: LD_VAR 0 9
8989: PUSH
8990: FOR_TO
8991: IFFALSE 9225
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8993: LD_VAR 0 9
8997: PUSH
8998: LD_VAR 0 14
9002: ARRAY
9003: PUSH
9004: LD_INT 24
9006: EQUAL
9007: PUSH
9008: LD_VAR 0 9
9012: PUSH
9013: LD_VAR 0 14
9017: ARRAY
9018: PUSH
9019: LD_INT 22
9021: EQUAL
9022: OR
9023: PUSH
9024: LD_VAR 0 9
9028: PUSH
9029: LD_VAR 0 14
9033: ARRAY
9034: PUSH
9035: LD_INT 23
9037: EQUAL
9038: OR
9039: PUSH
9040: LD_VAR 0 9
9044: PUSH
9045: LD_VAR 0 14
9049: ARRAY
9050: PUSH
9051: LD_INT 30
9053: EQUAL
9054: OR
9055: IFFALSE 9104
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9057: LD_ADDR_VAR 0 18
9061: PUSH
9062: LD_INT 11
9064: PUSH
9065: LD_INT 12
9067: PUSH
9068: LD_INT 13
9070: PUSH
9071: LD_INT 14
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9080: LD_ADDR_OWVAR 37
9084: PUSH
9085: LD_VAR 0 18
9089: PUSH
9090: LD_INT 1
9092: PPUSH
9093: LD_VAR 0 18
9097: PPUSH
9098: CALL_OW 12
9102: ARRAY
9103: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9104: LD_VAR 0 9
9108: PUSH
9109: LD_VAR 0 14
9113: ARRAY
9114: PUSH
9115: LD_INT 29
9117: EQUAL
9118: PUSH
9119: LD_VAR 0 9
9123: PUSH
9124: LD_VAR 0 14
9128: ARRAY
9129: PUSH
9130: LD_INT 28
9132: EQUAL
9133: OR
9134: PUSH
9135: LD_VAR 0 9
9139: PUSH
9140: LD_VAR 0 14
9144: ARRAY
9145: PUSH
9146: LD_INT 27
9148: EQUAL
9149: OR
9150: PUSH
9151: LD_VAR 0 9
9155: PUSH
9156: LD_VAR 0 14
9160: ARRAY
9161: PUSH
9162: LD_INT 26
9164: EQUAL
9165: OR
9166: PUSH
9167: LD_VAR 0 9
9171: PUSH
9172: LD_VAR 0 14
9176: ARRAY
9177: PUSH
9178: LD_INT 25
9180: EQUAL
9181: OR
9182: IFFALSE 9223
// begin arChassisTab = [ 13 , 14 ] ;
9184: LD_ADDR_VAR 0 18
9188: PUSH
9189: LD_INT 13
9191: PUSH
9192: LD_INT 14
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9199: LD_ADDR_OWVAR 37
9203: PUSH
9204: LD_VAR 0 18
9208: PUSH
9209: LD_INT 1
9211: PPUSH
9212: LD_VAR 0 18
9216: PPUSH
9217: CALL_OW 12
9221: ARRAY
9222: ST_TO_ADDR
// end ; end ;
9223: GO 8990
9225: POP
9226: POP
// veh = CreateVehicle ;
9227: LD_ADDR_VAR 0 16
9231: PUSH
9232: CALL_OW 45
9236: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9237: LD_VAR 0 16
9241: PPUSH
9242: LD_VAR 0 1
9246: PPUSH
9247: LD_INT 0
9249: PPUSH
9250: CALL_OW 49
// if vc_control = 1 then
9254: LD_OWVAR 38
9258: PUSH
9259: LD_INT 1
9261: EQUAL
9262: IFFALSE 9319
// begin hc_gallery =  ;
9264: LD_ADDR_OWVAR 33
9268: PUSH
9269: LD_STRING 
9271: ST_TO_ADDR
// hc_name =  ;
9272: LD_ADDR_OWVAR 26
9276: PUSH
9277: LD_STRING 
9279: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9280: LD_INT 0
9282: PPUSH
9283: LD_INT 3
9285: PPUSH
9286: LD_VAR 0 4
9290: PPUSH
9291: CALL_OW 380
// un = CreateHuman ;
9295: LD_ADDR_VAR 0 15
9299: PUSH
9300: CALL_OW 44
9304: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9305: LD_VAR 0 15
9309: PPUSH
9310: LD_VAR 0 16
9314: PPUSH
9315: CALL_OW 52
// end ; i = i + 1 ;
9319: LD_ADDR_VAR 0 13
9323: PUSH
9324: LD_VAR 0 13
9328: PUSH
9329: LD_INT 1
9331: PLUS
9332: ST_TO_ADDR
// end ; if nation = 3 then
9333: LD_VAR 0 5
9337: PUSH
9338: LD_INT 3
9340: EQUAL
9341: IFFALSE 9747
// begin uc_side = side ;
9343: LD_ADDR_OWVAR 20
9347: PUSH
9348: LD_VAR 0 2
9352: ST_TO_ADDR
// uc_nation = nation ;
9353: LD_ADDR_OWVAR 21
9357: PUSH
9358: LD_VAR 0 5
9362: ST_TO_ADDR
// vc_engine = vehengine ;
9363: LD_ADDR_OWVAR 39
9367: PUSH
9368: LD_VAR 0 6
9372: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9373: LD_ADDR_OWVAR 38
9377: PUSH
9378: LD_VAR 0 7
9382: PUSH
9383: LD_INT 1
9385: PPUSH
9386: LD_VAR 0 7
9390: PPUSH
9391: CALL_OW 12
9395: ARRAY
9396: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9397: LD_ADDR_OWVAR 40
9401: PUSH
9402: LD_VAR 0 8
9406: PUSH
9407: LD_INT 1
9409: PPUSH
9410: LD_VAR 0 8
9414: PPUSH
9415: CALL_OW 12
9419: ARRAY
9420: ST_TO_ADDR
// for j = 1 to RuWeapons do
9421: LD_ADDR_VAR 0 14
9425: PUSH
9426: DOUBLE
9427: LD_INT 1
9429: DEC
9430: ST_TO_ADDR
9431: LD_VAR 0 8
9435: PUSH
9436: FOR_TO
9437: IFFALSE 9623
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9439: LD_VAR 0 8
9443: PUSH
9444: LD_VAR 0 14
9448: ARRAY
9449: PUSH
9450: LD_INT 42
9452: EQUAL
9453: PUSH
9454: LD_VAR 0 8
9458: PUSH
9459: LD_VAR 0 14
9463: ARRAY
9464: PUSH
9465: LD_INT 43
9467: EQUAL
9468: OR
9469: PUSH
9470: LD_VAR 0 8
9474: PUSH
9475: LD_VAR 0 14
9479: ARRAY
9480: PUSH
9481: LD_INT 44
9483: EQUAL
9484: OR
9485: PUSH
9486: LD_VAR 0 8
9490: PUSH
9491: LD_VAR 0 14
9495: ARRAY
9496: PUSH
9497: LD_INT 45
9499: EQUAL
9500: OR
9501: PUSH
9502: LD_VAR 0 8
9506: PUSH
9507: LD_VAR 0 14
9511: ARRAY
9512: PUSH
9513: LD_INT 49
9515: EQUAL
9516: OR
9517: IFFALSE 9554
// begin ruChassisTab = [ 24 ] ;
9519: LD_ADDR_VAR 0 17
9523: PUSH
9524: LD_INT 24
9526: PUSH
9527: EMPTY
9528: LIST
9529: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9530: LD_ADDR_OWVAR 37
9534: PUSH
9535: LD_VAR 0 17
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_VAR 0 17
9547: PPUSH
9548: CALL_OW 12
9552: ARRAY
9553: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9554: LD_VAR 0 8
9558: PUSH
9559: LD_VAR 0 14
9563: ARRAY
9564: PUSH
9565: LD_INT 46
9567: EQUAL
9568: PUSH
9569: LD_VAR 0 8
9573: PUSH
9574: LD_VAR 0 14
9578: ARRAY
9579: PUSH
9580: LD_INT 47
9582: EQUAL
9583: OR
9584: IFFALSE 9621
// begin ruChassisTab = [ 24 ] ;
9586: LD_ADDR_VAR 0 17
9590: PUSH
9591: LD_INT 24
9593: PUSH
9594: EMPTY
9595: LIST
9596: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9597: LD_ADDR_OWVAR 37
9601: PUSH
9602: LD_VAR 0 17
9606: PUSH
9607: LD_INT 1
9609: PPUSH
9610: LD_VAR 0 17
9614: PPUSH
9615: CALL_OW 12
9619: ARRAY
9620: ST_TO_ADDR
// end ; end ;
9621: GO 9436
9623: POP
9624: POP
// veh = CreateVehicle ;
9625: LD_ADDR_VAR 0 16
9629: PUSH
9630: CALL_OW 45
9634: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9635: LD_VAR 0 16
9639: PPUSH
9640: LD_VAR 0 1
9644: PPUSH
9645: LD_INT 0
9647: PPUSH
9648: CALL_OW 49
// if vc_control = 1 then
9652: LD_OWVAR 38
9656: PUSH
9657: LD_INT 1
9659: EQUAL
9660: IFFALSE 9747
// begin if uc_side = 8 then
9662: LD_OWVAR 20
9666: PUSH
9667: LD_INT 8
9669: EQUAL
9670: IFFALSE 9682
// uc_nation = 2 else
9672: LD_ADDR_OWVAR 21
9676: PUSH
9677: LD_INT 2
9679: ST_TO_ADDR
9680: GO 9692
// uc_nation = nation ;
9682: LD_ADDR_OWVAR 21
9686: PUSH
9687: LD_VAR 0 5
9691: ST_TO_ADDR
// hc_gallery =  ;
9692: LD_ADDR_OWVAR 33
9696: PUSH
9697: LD_STRING 
9699: ST_TO_ADDR
// hc_name =  ;
9700: LD_ADDR_OWVAR 26
9704: PUSH
9705: LD_STRING 
9707: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9708: LD_INT 0
9710: PPUSH
9711: LD_INT 3
9713: PPUSH
9714: LD_VAR 0 4
9718: PPUSH
9719: CALL_OW 380
// un = CreateHuman ;
9723: LD_ADDR_VAR 0 15
9727: PUSH
9728: CALL_OW 44
9732: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9733: LD_VAR 0 15
9737: PPUSH
9738: LD_VAR 0 16
9742: PPUSH
9743: CALL_OW 52
// end ; end ; end ;
9747: GO 8324
9749: POP
9750: POP
// repeat wait ( 0 0$1 ) ;
9751: LD_INT 35
9753: PPUSH
9754: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9758: LD_ADDR_VAR 0 20
9762: PUSH
9763: LD_INT 22
9765: PUSH
9766: LD_VAR 0 2
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: LD_INT 21
9777: PUSH
9778: LD_INT 2
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 24
9787: PUSH
9788: LD_INT 250
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 2
9797: PUSH
9798: LD_INT 34
9800: PUSH
9801: LD_INT 25
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 34
9810: PUSH
9811: LD_INT 26
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PUSH
9818: LD_INT 34
9820: PUSH
9821: LD_INT 27
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 34
9830: PUSH
9831: LD_INT 28
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 34
9840: PUSH
9841: LD_INT 29
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 34
9850: PUSH
9851: LD_INT 46
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 34
9860: PUSH
9861: LD_INT 44
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: LD_INT 34
9870: PUSH
9871: LD_INT 45
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PUSH
9878: LD_INT 34
9880: PUSH
9881: LD_INT 47
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PPUSH
9906: CALL_OW 69
9910: ST_TO_ADDR
// if vehicleOK_list > 0 then
9911: LD_VAR 0 20
9915: PUSH
9916: LD_INT 0
9918: GREATER
9919: IFFALSE 10138
// begin for i in vehicleOK_list do
9921: LD_ADDR_VAR 0 13
9925: PUSH
9926: LD_VAR 0 20
9930: PUSH
9931: FOR_IN
9932: IFFALSE 10136
// begin if GetSide ( i ) <> side then
9934: LD_VAR 0 13
9938: PPUSH
9939: CALL_OW 255
9943: PUSH
9944: LD_VAR 0 2
9948: NONEQUAL
9949: IFFALSE 9962
// begin ComStop ( i ) ;
9951: LD_VAR 0 13
9955: PPUSH
9956: CALL_OW 141
// continue ;
9960: GO 9931
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9962: LD_ADDR_VAR 0 21
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_VAR 0 11
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PPUSH
9979: CALL_OW 69
9983: PPUSH
9984: LD_VAR 0 13
9988: PPUSH
9989: CALL_OW 74
9993: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9994: LD_ADDR_VAR 0 22
9998: PUSH
9999: LD_INT 22
10001: PUSH
10002: LD_VAR 0 11
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: LD_INT 2
10013: PUSH
10014: LD_INT 59
10016: PUSH
10017: EMPTY
10018: LIST
10019: PUSH
10020: LD_INT 21
10022: PUSH
10023: LD_INT 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 21
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: EMPTY
10051: LIST
10052: PPUSH
10053: CALL_OW 69
10057: PPUSH
10058: LD_VAR 0 13
10062: PPUSH
10063: CALL_OW 74
10067: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10068: LD_VAR 0 13
10072: PPUSH
10073: LD_VAR 0 21
10077: PPUSH
10078: CALL_OW 296
10082: PUSH
10083: LD_INT 8
10085: PLUS
10086: PUSH
10087: LD_VAR 0 13
10091: PPUSH
10092: LD_VAR 0 22
10096: PPUSH
10097: CALL_OW 296
10101: LESS
10102: IFFALSE 10120
// begin ComAttackUnit ( i , target1 ) ;
10104: LD_VAR 0 13
10108: PPUSH
10109: LD_VAR 0 21
10113: PPUSH
10114: CALL_OW 115
// end else
10118: GO 10134
// begin ComAttackUnit ( i , target2 ) ;
10120: LD_VAR 0 13
10124: PPUSH
10125: LD_VAR 0 22
10129: PPUSH
10130: CALL_OW 115
// end ; end ;
10134: GO 9931
10136: POP
10137: POP
// end ; until vehicleOK_list = 0 ;
10138: LD_VAR 0 20
10142: PUSH
10143: LD_INT 0
10145: EQUAL
10146: IFFALSE 9751
// end ;
10148: LD_VAR 0 12
10152: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
10153: LD_INT 0
10155: PPUSH
10156: PPUSH
10157: PPUSH
10158: PPUSH
10159: PPUSH
10160: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
10161: LD_ADDR_VAR 0 6
10165: PUSH
10166: LD_INT 22
10168: PUSH
10169: LD_VAR 0 1
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 34
10180: PUSH
10181: LD_INT 29
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PPUSH
10192: CALL_OW 69
10196: ST_TO_ADDR
// if veh_list = 0 then
10197: LD_VAR 0 6
10201: PUSH
10202: LD_INT 0
10204: EQUAL
10205: IFFALSE 10209
// exit ;
10207: GO 10414
// if veh_list > 0 then
10209: LD_VAR 0 6
10213: PUSH
10214: LD_INT 0
10216: GREATER
10217: IFFALSE 10414
// begin for i in veh_List do
10219: LD_ADDR_VAR 0 4
10223: PUSH
10224: LD_VAR 0 6
10228: PUSH
10229: FOR_IN
10230: IFFALSE 10412
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10232: LD_ADDR_VAR 0 7
10236: PUSH
10237: LD_INT 22
10239: PUSH
10240: LD_VAR 0 2
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 24
10251: PUSH
10252: LD_INT 250
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 2
10261: PUSH
10262: LD_INT 59
10264: PUSH
10265: EMPTY
10266: LIST
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 1
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 2
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: EMPTY
10300: LIST
10301: PPUSH
10302: CALL_OW 69
10306: PPUSH
10307: LD_VAR 0 4
10311: PPUSH
10312: CALL_OW 74
10316: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10317: LD_VAR 0 4
10321: PPUSH
10322: LD_VAR 0 7
10326: PPUSH
10327: CALL_OW 115
// if not HasTask ( i ) then
10331: LD_VAR 0 4
10335: PPUSH
10336: CALL_OW 314
10340: NOT
10341: IFFALSE 10410
// begin wait ( 0 0$0.1 ) ;
10343: LD_INT 4
10345: PPUSH
10346: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10350: LD_ADDR_VAR 0 8
10354: PUSH
10355: LD_INT 22
10357: PUSH
10358: LD_VAR 0 2
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 24
10369: PUSH
10370: LD_INT 250
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 69
10385: PPUSH
10386: LD_VAR 0 4
10390: PPUSH
10391: CALL_OW 74
10395: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10396: LD_VAR 0 4
10400: PPUSH
10401: LD_VAR 0 8
10405: PPUSH
10406: CALL_OW 115
// end ; end ;
10410: GO 10229
10412: POP
10413: POP
// end ; end ; end_of_file
10414: LD_VAR 0 3
10418: RET
// every 0 0$1 do
10419: GO 10421
10421: DISABLE
// begin enable ;
10422: ENABLE
// IntBazooka ( 7 , 1 ) ;
10423: LD_INT 7
10425: PPUSH
10426: LD_INT 1
10428: PPUSH
10429: CALL 6859 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10433: LD_INT 8
10435: PPUSH
10436: LD_INT 1
10438: PPUSH
10439: CALL 10153 0 2
// end ;
10443: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10444: LD_INT 22
10446: PUSH
10447: LD_INT 3
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 21
10456: PUSH
10457: LD_INT 2
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 50
10466: PUSH
10467: EMPTY
10468: LIST
10469: PUSH
10470: LD_INT 2
10472: PUSH
10473: LD_INT 34
10475: PUSH
10476: LD_INT 46
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 34
10485: PUSH
10486: LD_INT 44
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 34
10495: PUSH
10496: LD_INT 45
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 34
10505: PUSH
10506: LD_INT 47
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: PPUSH
10526: CALL_OW 69
10530: PUSH
10531: LD_INT 0
10533: GREATER
10534: PUSH
10535: LD_INT 22
10537: PUSH
10538: LD_INT 3
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 21
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 50
10557: PUSH
10558: EMPTY
10559: LIST
10560: PUSH
10561: LD_INT 34
10563: PUSH
10564: LD_INT 49
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: PPUSH
10577: CALL_OW 69
10581: PUSH
10582: LD_INT 0
10584: GREATER
10585: AND
10586: IFFALSE 10758
10588: GO 10590
10590: DISABLE
10591: LD_INT 0
10593: PPUSH
10594: PPUSH
// begin enable ;
10595: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10596: LD_ADDR_VAR 0 1
10600: PUSH
10601: LD_INT 22
10603: PUSH
10604: LD_INT 3
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 21
10613: PUSH
10614: LD_INT 2
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 50
10623: PUSH
10624: EMPTY
10625: LIST
10626: PUSH
10627: LD_INT 2
10629: PUSH
10630: LD_INT 34
10632: PUSH
10633: LD_INT 46
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PUSH
10640: LD_INT 34
10642: PUSH
10643: LD_INT 44
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: LD_INT 34
10652: PUSH
10653: LD_INT 45
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 34
10662: PUSH
10663: LD_INT 47
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: PPUSH
10683: CALL_OW 69
10687: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10688: LD_ADDR_VAR 0 2
10692: PUSH
10693: LD_INT 22
10695: PUSH
10696: LD_INT 3
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 21
10705: PUSH
10706: LD_INT 2
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: LD_INT 50
10715: PUSH
10716: EMPTY
10717: LIST
10718: PUSH
10719: LD_INT 34
10721: PUSH
10722: LD_INT 49
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: PPUSH
10735: CALL_OW 69
10739: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10740: LD_VAR 0 2
10744: PPUSH
10745: LD_VAR 0 1
10749: PUSH
10750: LD_INT 1
10752: ARRAY
10753: PPUSH
10754: CALL_OW 112
// end ; end_of_file
10758: PPOPN 2
10760: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10761: LD_EXP 38
10765: PUSH
10766: LD_INT 1
10768: EQUAL
10769: IFFALSE 11671
10771: GO 10773
10773: DISABLE
10774: LD_INT 0
10776: PPUSH
10777: PPUSH
10778: PPUSH
// begin m1 := false ;
10779: LD_ADDR_VAR 0 1
10783: PUSH
10784: LD_INT 0
10786: ST_TO_ADDR
// m2 := false ;
10787: LD_ADDR_VAR 0 2
10791: PUSH
10792: LD_INT 0
10794: ST_TO_ADDR
// m3 := false ;
10795: LD_ADDR_VAR 0 3
10799: PUSH
10800: LD_INT 0
10802: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10803: LD_EXP 1
10807: PPUSH
10808: LD_STRING D9b-JMM-1
10810: PPUSH
10811: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10815: LD_EXP 15
10819: PPUSH
10820: LD_STRING D9b-Pow-1
10822: PPUSH
10823: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10827: LD_EXP 1
10831: PPUSH
10832: LD_STRING D9b-JMM-2
10834: PPUSH
10835: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10839: LD_EXP 15
10843: PPUSH
10844: LD_STRING D9b-Pow-2
10846: PPUSH
10847: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10851: LD_EXP 1
10855: PPUSH
10856: LD_STRING D9b-JMM-3
10858: PPUSH
10859: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10863: LD_EXP 15
10867: PPUSH
10868: LD_STRING D9b-Pow-3
10870: PPUSH
10871: CALL_OW 94
// if tick <= 60 60$00 then
10875: LD_OWVAR 1
10879: PUSH
10880: LD_INT 126000
10882: LESSEQUAL
10883: IFFALSE 10892
// SetAchievement ( ACH_ASPEED_13 ) ;
10885: LD_STRING ACH_ASPEED_13
10887: PPUSH
10888: CALL_OW 543
// if burlakStatus = 1 then
10892: LD_EXP 28
10896: PUSH
10897: LD_INT 1
10899: EQUAL
10900: IFFALSE 10922
// begin m1 := true ;
10902: LD_ADDR_VAR 0 1
10906: PUSH
10907: LD_INT 1
10909: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10910: LD_STRING Burlak
10912: PPUSH
10913: LD_INT 1
10915: PPUSH
10916: CALL_OW 101
// end else
10920: GO 10933
// begin AddMedal ( Burlak , - 1 ) ;
10922: LD_STRING Burlak
10924: PPUSH
10925: LD_INT 1
10927: NEG
10928: PPUSH
10929: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10933: LD_EXP 2
10937: PPUSH
10938: CALL_OW 302
10942: IFFALSE 10964
// begin m2 := true ;
10944: LD_ADDR_VAR 0 2
10948: PUSH
10949: LD_INT 1
10951: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10952: LD_STRING Stevens
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 101
// end else
10962: GO 10975
// begin AddMedal ( Stevens , - 1 ) ;
10964: LD_STRING Stevens
10966: PPUSH
10967: LD_INT 1
10969: NEG
10970: PPUSH
10971: CALL_OW 101
// end ; if radarOnSpot = 1 then
10975: LD_EXP 30
10979: PUSH
10980: LD_INT 1
10982: EQUAL
10983: IFFALSE 11005
// begin m3 := true ;
10985: LD_ADDR_VAR 0 3
10989: PUSH
10990: LD_INT 1
10992: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10993: LD_STRING Observation
10995: PPUSH
10996: LD_INT 1
10998: PPUSH
10999: CALL_OW 101
// end else
11003: GO 11016
// begin AddMedal ( Observation , - 1 ) ;
11005: LD_STRING Observation
11007: PPUSH
11008: LD_INT 1
11010: NEG
11011: PPUSH
11012: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
11016: LD_VAR 0 1
11020: PUSH
11021: LD_VAR 0 2
11025: AND
11026: PUSH
11027: LD_VAR 0 3
11031: AND
11032: PUSH
11033: LD_OWVAR 67
11037: PUSH
11038: LD_INT 3
11040: EQUAL
11041: AND
11042: IFFALSE 11054
// SetAchievementEX ( ACH_AMER , 13 ) ;
11044: LD_STRING ACH_AMER
11046: PPUSH
11047: LD_INT 13
11049: PPUSH
11050: CALL_OW 564
// GiveMedals ( MAIN ) ;
11054: LD_STRING MAIN
11056: PPUSH
11057: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
11061: LD_EXP 28
11065: PPUSH
11066: LD_STRING 13_BurlakStatus_1
11068: PPUSH
11069: CALL_OW 39
// if IsLive ( Stevens ) then
11073: LD_EXP 2
11077: PPUSH
11078: CALL_OW 300
11082: IFFALSE 11096
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
11084: LD_INT 1
11086: PPUSH
11087: LD_STRING 13_StevensStatus_1
11089: PPUSH
11090: CALL_OW 39
11094: GO 11106
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
11096: LD_INT 0
11098: PPUSH
11099: LD_STRING 13_StevensStatus_1
11101: PPUSH
11102: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
11106: LD_INT 22
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 21
11118: PUSH
11119: LD_INT 1
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 2
11128: PUSH
11129: LD_INT 25
11131: PUSH
11132: LD_INT 1
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 25
11141: PUSH
11142: LD_INT 2
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 25
11151: PUSH
11152: LD_INT 3
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 25
11161: PUSH
11162: LD_INT 4
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 25
11171: PUSH
11172: LD_INT 5
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 25
11181: PUSH
11182: LD_INT 8
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: PPUSH
11203: CALL_OW 69
11207: PPUSH
11208: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11212: LD_EXP 1
11216: PPUSH
11217: LD_EXP 34
11221: PUSH
11222: LD_STRING JMM
11224: STR
11225: PPUSH
11226: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11230: LD_EXP 8
11234: PPUSH
11235: LD_EXP 34
11239: PUSH
11240: LD_STRING Brown
11242: STR
11243: PPUSH
11244: CALL 7167 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11248: LD_EXP 4
11252: PPUSH
11253: LD_EXP 34
11257: PUSH
11258: LD_STRING Donaldson
11260: STR
11261: PPUSH
11262: CALL 7167 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11266: LD_EXP 5
11270: PPUSH
11271: LD_EXP 34
11275: PUSH
11276: LD_STRING Bobby
11278: STR
11279: PPUSH
11280: CALL 7167 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11284: LD_EXP 6
11288: PPUSH
11289: LD_EXP 34
11293: PUSH
11294: LD_STRING Cyrus
11296: STR
11297: PPUSH
11298: CALL 7167 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11302: LD_EXP 3
11306: PPUSH
11307: LD_EXP 34
11311: PUSH
11312: LD_STRING Lisa
11314: STR
11315: PPUSH
11316: CALL 7167 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11320: LD_EXP 13
11324: PPUSH
11325: LD_EXP 34
11329: PUSH
11330: LD_STRING Frank
11332: STR
11333: PPUSH
11334: CALL 7167 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11338: LD_EXP 14
11342: PPUSH
11343: LD_EXP 34
11347: PUSH
11348: LD_STRING Kikuchi
11350: STR
11351: PPUSH
11352: CALL 7167 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11356: LD_EXP 10
11360: PPUSH
11361: LD_EXP 34
11365: PUSH
11366: LD_STRING Houten
11368: STR
11369: PPUSH
11370: CALL 7167 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11374: LD_EXP 12
11378: PPUSH
11379: LD_EXP 34
11383: PUSH
11384: LD_STRING Gary
11386: STR
11387: PPUSH
11388: CALL 7167 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11392: LD_EXP 11
11396: PPUSH
11397: LD_EXP 34
11401: PUSH
11402: LD_STRING Cornell
11404: STR
11405: PPUSH
11406: CALL 7167 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11410: LD_EXP 7
11414: PPUSH
11415: LD_EXP 34
11419: PUSH
11420: LD_STRING Denis
11422: STR
11423: PPUSH
11424: CALL 7167 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11428: LD_EXP 9
11432: PPUSH
11433: LD_EXP 34
11437: PUSH
11438: LD_STRING Gladstone
11440: STR
11441: PPUSH
11442: CALL 7167 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11446: LD_EXP 2
11450: PPUSH
11451: LD_EXP 34
11455: PUSH
11456: LD_STRING Stevens
11458: STR
11459: PPUSH
11460: CALL 7167 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11464: LD_INT 50
11466: PUSH
11467: EMPTY
11468: LIST
11469: PUSH
11470: LD_INT 22
11472: PUSH
11473: LD_INT 1
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 21
11482: PUSH
11483: LD_INT 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 2
11492: PUSH
11493: LD_INT 25
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 25
11505: PUSH
11506: LD_INT 2
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 25
11515: PUSH
11516: LD_INT 3
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 25
11525: PUSH
11526: LD_INT 4
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 25
11535: PUSH
11536: LD_INT 5
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 25
11545: PUSH
11546: LD_INT 8
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: PPUSH
11568: CALL_OW 69
11572: PUSH
11573: LD_EXP 1
11577: PUSH
11578: LD_EXP 8
11582: PUSH
11583: LD_EXP 4
11587: PUSH
11588: LD_EXP 5
11592: PUSH
11593: LD_EXP 6
11597: PUSH
11598: LD_EXP 3
11602: PUSH
11603: LD_EXP 13
11607: PUSH
11608: LD_EXP 9
11612: PUSH
11613: LD_EXP 14
11617: PUSH
11618: LD_EXP 7
11622: PUSH
11623: LD_EXP 10
11627: PUSH
11628: LD_EXP 12
11632: PUSH
11633: LD_EXP 11
11637: PUSH
11638: LD_EXP 2
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: DIFF
11659: PPUSH
11660: LD_STRING 13_other_survivors
11662: PPUSH
11663: CALL_OW 38
// YouWin ;
11667: CALL_OW 103
// end ; end_of_file
11671: PPOPN 3
11673: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11674: LD_EXP 32
11678: PUSH
11679: LD_INT 2
11681: EQUAL
11682: IFFALSE 11818
11684: GO 11686
11686: DISABLE
11687: LD_INT 0
11689: PPUSH
11690: PPUSH
11691: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11692: LD_ADDR_VAR 0 2
11696: PUSH
11697: LD_INT 22
11699: PUSH
11700: LD_INT 1
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 21
11709: PUSH
11710: LD_INT 3
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 2
11719: PUSH
11720: LD_INT 30
11722: PUSH
11723: LD_INT 0
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 30
11732: PUSH
11733: LD_INT 1
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: PPUSH
11750: CALL_OW 69
11754: ST_TO_ADDR
// for i in tmp do
11755: LD_ADDR_VAR 0 1
11759: PUSH
11760: LD_VAR 0 2
11764: PUSH
11765: FOR_IN
11766: IFFALSE 11799
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11768: LD_ADDR_VAR 0 3
11772: PUSH
11773: LD_VAR 0 3
11777: PUSH
11778: LD_VAR 0 1
11782: PPUSH
11783: CALL_OW 274
11787: PPUSH
11788: LD_INT 3
11790: PPUSH
11791: CALL_OW 275
11795: PLUS
11796: ST_TO_ADDR
11797: GO 11765
11799: POP
11800: POP
// if yourSiberite < 79 then
11801: LD_VAR 0 3
11805: PUSH
11806: LD_INT 79
11808: LESS
11809: IFFALSE 11818
// YouLost ( siberite ) ;
11811: LD_STRING siberite
11813: PPUSH
11814: CALL_OW 104
// end ; end_of_file
11818: PPOPN 3
11820: END
// every 8 8$0 + 7 7$0 do
11821: GO 11823
11823: DISABLE
// begin enable ;
11824: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11825: LD_INT 8
11827: PPUSH
11828: LD_INT 2
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: LD_INT 3
11836: PPUSH
11837: CALL_OW 12
11841: PPUSH
11842: LD_INT 0
11844: PPUSH
11845: LD_INT 0
11847: PPUSH
11848: LD_INT 2
11850: PUSH
11851: LD_INT 3
11853: PUSH
11854: LD_INT 4
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: LIST
11861: PUSH
11862: LD_OWVAR 67
11866: ARRAY
11867: PPUSH
11868: LD_INT 0
11870: PPUSH
11871: LD_INT 10
11873: PPUSH
11874: LD_INT 8
11876: PUSH
11877: LD_INT 9
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: LD_INT 1
11886: PPUSH
11887: LD_INT 2
11889: PPUSH
11890: CALL_OW 12
11894: ARRAY
11895: PPUSH
11896: LD_INT 12
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: CALL 7207 0 11
// end ;
11906: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11907: GO 11909
11909: DISABLE
11910: LD_INT 0
11912: PPUSH
11913: PPUSH
11914: PPUSH
// begin enable ;
11915: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11916: LD_ADDR_EXP 33
11920: PUSH
11921: LD_EXP 33
11925: PUSH
11926: LD_INT 1
11928: PLUS
11929: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11930: LD_INT 22
11932: PUSH
11933: LD_INT 8
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 3
11942: PUSH
11943: LD_INT 58
11945: PUSH
11946: EMPTY
11947: LIST
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 34
11955: PUSH
11956: LD_INT 31
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: LIST
11967: PPUSH
11968: CALL_OW 69
11972: PUSH
11973: LD_INT 2
11975: LESS
11976: IFFALSE 12216
// begin uc_side := 8 ;
11978: LD_ADDR_OWVAR 20
11982: PUSH
11983: LD_INT 8
11985: ST_TO_ADDR
// uc_nation := 2 ;
11986: LD_ADDR_OWVAR 21
11990: PUSH
11991: LD_INT 2
11993: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11994: LD_INT 14
11996: PPUSH
11997: LD_INT 3
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: LD_INT 31
12005: PPUSH
12006: LD_INT 100
12008: PPUSH
12009: CALL 5844 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12013: LD_ADDR_VAR 0 1
12017: PUSH
12018: DOUBLE
12019: LD_INT 22
12021: PUSH
12022: LD_INT 8
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 3
12031: PUSH
12032: LD_INT 58
12034: PUSH
12035: EMPTY
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 34
12044: PUSH
12045: LD_INT 31
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: PPUSH
12057: CALL_OW 69
12061: PUSH
12062: LD_INT 1
12064: PLUS
12065: DEC
12066: ST_TO_ADDR
12067: LD_INT 2
12069: PUSH
12070: FOR_TO
12071: IFFALSE 12214
// begin veh := CreateVehicle ;
12073: LD_ADDR_VAR 0 2
12077: PUSH
12078: CALL_OW 45
12082: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12083: LD_VAR 0 2
12087: PPUSH
12088: LD_INT 5
12090: PPUSH
12091: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
12095: LD_ADDR_VAR 0 3
12099: PUSH
12100: LD_INT 181
12102: PUSH
12103: LD_INT 105
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 137
12112: PUSH
12113: LD_INT 6
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_VAR 0 1
12128: PUSH
12129: LD_INT 2
12131: MOD
12132: PUSH
12133: LD_INT 1
12135: PLUS
12136: ARRAY
12137: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
12138: LD_VAR 0 2
12142: PPUSH
12143: LD_VAR 0 3
12147: PUSH
12148: LD_INT 1
12150: ARRAY
12151: PPUSH
12152: LD_VAR 0 3
12156: PUSH
12157: LD_INT 2
12159: ARRAY
12160: PPUSH
12161: LD_INT 12
12163: PPUSH
12164: LD_INT 0
12166: PPUSH
12167: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 ] [ Difficulty ] ) ;
12171: LD_INT 0
12173: PPUSH
12174: LD_INT 7
12176: PUSH
12177: LD_INT 9
12179: PUSH
12180: LD_INT 10
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: PUSH
12188: LD_OWVAR 67
12192: ARRAY
12193: PPUSH
12194: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12198: CALL_OW 44
12202: PPUSH
12203: LD_VAR 0 2
12207: PPUSH
12208: CALL_OW 52
// end ;
12212: GO 12070
12214: POP
12215: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
12216: LD_INT 8
12218: PUSH
12219: LD_INT 9
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 1
12228: PPUSH
12229: LD_INT 2
12231: PPUSH
12232: CALL_OW 12
12236: ARRAY
12237: PPUSH
12238: LD_INT 8
12240: PPUSH
12241: LD_INT 4
12243: PPUSH
12244: LD_INT 6
12246: PPUSH
12247: CALL_OW 12
12251: PUSH
12252: LD_INT 6
12254: PPUSH
12255: LD_INT 9
12257: PPUSH
12258: CALL_OW 12
12262: PUSH
12263: LD_INT 7
12265: PPUSH
12266: LD_INT 10
12268: PPUSH
12269: CALL_OW 12
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_OWVAR 67
12283: ARRAY
12284: PPUSH
12285: LD_INT 10
12287: PPUSH
12288: LD_INT 2
12290: PPUSH
12291: LD_INT 3
12293: PPUSH
12294: LD_INT 5
12296: PUSH
12297: LD_INT 2
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PPUSH
12304: EMPTY
12305: PPUSH
12306: LD_INT 25
12308: PUSH
12309: LD_INT 26
12311: PUSH
12312: LD_INT 27
12314: PUSH
12315: LD_INT 28
12317: PUSH
12318: LD_INT 29
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PPUSH
12328: EMPTY
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: CALL 8275 0 11
// end ;
12337: PPOPN 3
12339: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
12340: LD_EXP 33
12344: PUSH
12345: LD_INT 4
12347: GREATEREQUAL
12348: IFFALSE 12688
12350: GO 12352
12352: DISABLE
12353: LD_INT 0
12355: PPUSH
12356: PPUSH
// begin enable ;
12357: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
12358: LD_ADDR_EXP 33
12362: PUSH
12363: LD_EXP 33
12367: PUSH
12368: LD_INT 1
12370: PLUS
12371: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12372: LD_INT 22
12374: PUSH
12375: LD_INT 8
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 3
12384: PUSH
12385: LD_INT 58
12387: PUSH
12388: EMPTY
12389: LIST
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 34
12397: PUSH
12398: LD_INT 31
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: PPUSH
12410: CALL_OW 69
12414: PUSH
12415: LD_INT 2
12417: LESS
12418: IFFALSE 12603
// begin uc_side := 8 ;
12420: LD_ADDR_OWVAR 20
12424: PUSH
12425: LD_INT 8
12427: ST_TO_ADDR
// uc_nation := 2 ;
12428: LD_ADDR_OWVAR 21
12432: PUSH
12433: LD_INT 2
12435: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12436: LD_INT 14
12438: PPUSH
12439: LD_INT 3
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: LD_INT 31
12447: PPUSH
12448: LD_INT 100
12450: PPUSH
12451: CALL 5844 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12455: LD_ADDR_VAR 0 1
12459: PUSH
12460: DOUBLE
12461: LD_INT 22
12463: PUSH
12464: LD_INT 8
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: LD_INT 58
12476: PUSH
12477: EMPTY
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 34
12486: PUSH
12487: LD_INT 31
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: PPUSH
12499: CALL_OW 69
12503: PUSH
12504: LD_INT 1
12506: PLUS
12507: DEC
12508: ST_TO_ADDR
12509: LD_INT 2
12511: PUSH
12512: FOR_TO
12513: IFFALSE 12601
// begin veh := CreateVehicle ;
12515: LD_ADDR_VAR 0 2
12519: PUSH
12520: CALL_OW 45
12524: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12525: LD_VAR 0 2
12529: PPUSH
12530: LD_INT 5
12532: PPUSH
12533: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12537: LD_VAR 0 2
12541: PPUSH
12542: LD_INT 181
12544: PPUSH
12545: LD_INT 105
12547: PPUSH
12548: LD_INT 12
12550: PPUSH
12551: LD_INT 0
12553: PPUSH
12554: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12558: LD_INT 0
12560: PPUSH
12561: LD_INT 8
12563: PUSH
12564: LD_INT 9
12566: PUSH
12567: LD_INT 10
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: LIST
12574: PUSH
12575: LD_OWVAR 67
12579: ARRAY
12580: PPUSH
12581: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12585: CALL_OW 44
12589: PPUSH
12590: LD_VAR 0 2
12594: PPUSH
12595: CALL_OW 52
// end ;
12599: GO 12512
12601: POP
12602: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12603: LD_INT 8
12605: PUSH
12606: LD_INT 9
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 1
12615: PPUSH
12616: LD_INT 2
12618: PPUSH
12619: CALL_OW 12
12623: ARRAY
12624: PPUSH
12625: LD_INT 8
12627: PPUSH
12628: LD_INT 1
12630: PUSH
12631: LD_INT 2
12633: PUSH
12634: LD_INT 3
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_OWVAR 67
12646: ARRAY
12647: PPUSH
12648: LD_INT 10
12650: PPUSH
12651: LD_INT 3
12653: PPUSH
12654: LD_INT 3
12656: PPUSH
12657: LD_INT 1
12659: PUSH
12660: LD_INT 1
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PPUSH
12667: LD_INT 47
12669: PUSH
12670: LD_INT 47
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PPUSH
12677: EMPTY
12678: PPUSH
12679: EMPTY
12680: PPUSH
12681: LD_INT 1
12683: PPUSH
12684: CALL 8275 0 11
// end ;
12688: PPOPN 2
12690: END
// every 1 1$0 trigger eventVar2 = 1 do var i , veh ;
12691: LD_EXP 36
12695: PUSH
12696: LD_INT 1
12698: EQUAL
12699: IFFALSE 13036
12701: GO 12703
12703: DISABLE
12704: LD_INT 0
12706: PPUSH
12707: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12708: LD_INT 22
12710: PUSH
12711: LD_INT 8
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 3
12720: PUSH
12721: LD_INT 58
12723: PUSH
12724: EMPTY
12725: LIST
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 34
12733: PUSH
12734: LD_INT 31
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: LIST
12745: PPUSH
12746: CALL_OW 69
12750: PUSH
12751: LD_INT 2
12753: LESS
12754: IFFALSE 12939
// begin uc_side := 8 ;
12756: LD_ADDR_OWVAR 20
12760: PUSH
12761: LD_INT 8
12763: ST_TO_ADDR
// uc_nation := 2 ;
12764: LD_ADDR_OWVAR 21
12768: PUSH
12769: LD_INT 2
12771: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12772: LD_INT 14
12774: PPUSH
12775: LD_INT 3
12777: PPUSH
12778: LD_INT 1
12780: PPUSH
12781: LD_INT 31
12783: PPUSH
12784: LD_INT 100
12786: PPUSH
12787: CALL 5844 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12791: LD_ADDR_VAR 0 1
12795: PUSH
12796: DOUBLE
12797: LD_INT 22
12799: PUSH
12800: LD_INT 8
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: LD_INT 3
12809: PUSH
12810: LD_INT 58
12812: PUSH
12813: EMPTY
12814: LIST
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 34
12822: PUSH
12823: LD_INT 31
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: LIST
12834: PPUSH
12835: CALL_OW 69
12839: PUSH
12840: LD_INT 1
12842: PLUS
12843: DEC
12844: ST_TO_ADDR
12845: LD_INT 2
12847: PUSH
12848: FOR_TO
12849: IFFALSE 12937
// begin veh := CreateVehicle ;
12851: LD_ADDR_VAR 0 2
12855: PUSH
12856: CALL_OW 45
12860: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12861: LD_VAR 0 2
12865: PPUSH
12866: LD_INT 5
12868: PPUSH
12869: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12873: LD_VAR 0 2
12877: PPUSH
12878: LD_INT 181
12880: PPUSH
12881: LD_INT 105
12883: PPUSH
12884: LD_INT 12
12886: PPUSH
12887: LD_INT 0
12889: PPUSH
12890: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12894: LD_INT 0
12896: PPUSH
12897: LD_INT 8
12899: PUSH
12900: LD_INT 9
12902: PUSH
12903: LD_INT 10
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: LIST
12910: PUSH
12911: LD_OWVAR 67
12915: ARRAY
12916: PPUSH
12917: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12921: CALL_OW 44
12925: PPUSH
12926: LD_VAR 0 2
12930: PPUSH
12931: CALL_OW 52
// end ;
12935: GO 12848
12937: POP
12938: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12939: LD_INT 8
12941: PUSH
12942: LD_INT 9
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 1
12951: PPUSH
12952: LD_INT 2
12954: PPUSH
12955: CALL_OW 12
12959: ARRAY
12960: PPUSH
12961: LD_INT 3
12963: PPUSH
12964: LD_INT 5
12966: PUSH
12967: LD_INT 7
12969: PUSH
12970: LD_INT 8
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: LIST
12977: PUSH
12978: LD_OWVAR 67
12982: ARRAY
12983: PPUSH
12984: LD_INT 10
12986: PPUSH
12987: LD_INT 3
12989: PPUSH
12990: LD_INT 3
12992: PPUSH
12993: LD_INT 3
12995: PUSH
12996: LD_INT 3
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PPUSH
13003: LD_INT 46
13005: PUSH
13006: LD_INT 44
13008: PUSH
13009: LD_INT 45
13011: PUSH
13012: LD_INT 47
13014: PUSH
13015: LD_INT 49
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: PPUSH
13025: EMPTY
13026: PPUSH
13027: EMPTY
13028: PPUSH
13029: LD_INT 1
13031: PPUSH
13032: CALL 8275 0 11
// end ; end_of_file
13036: PPOPN 2
13038: END
// every 1 1$0 do
13039: GO 13041
13041: DISABLE
// begin enable ;
13042: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
13043: LD_INT 3
13045: PPUSH
13046: LD_INT 5
13048: PPUSH
13049: CALL_OW 12
13053: PPUSH
13054: LD_INT 13
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 55
// end ; end_of_file
13064: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
13065: GO 13067
13067: DISABLE
// begin ru_radar := 98 ;
13068: LD_ADDR_EXP 43
13072: PUSH
13073: LD_INT 98
13075: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13076: LD_ADDR_EXP 44
13080: PUSH
13081: LD_INT 89
13083: ST_TO_ADDR
// us_hack := 99 ;
13084: LD_ADDR_EXP 45
13088: PUSH
13089: LD_INT 99
13091: ST_TO_ADDR
// us_artillery := 97 ;
13092: LD_ADDR_EXP 46
13096: PUSH
13097: LD_INT 97
13099: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13100: LD_ADDR_EXP 47
13104: PUSH
13105: LD_INT 91
13107: ST_TO_ADDR
// tech_Artillery := 80 ;
13108: LD_ADDR_EXP 48
13112: PUSH
13113: LD_INT 80
13115: ST_TO_ADDR
// tech_RadMat := 81 ;
13116: LD_ADDR_EXP 49
13120: PUSH
13121: LD_INT 81
13123: ST_TO_ADDR
// tech_BasicTools := 82 ;
13124: LD_ADDR_EXP 50
13128: PUSH
13129: LD_INT 82
13131: ST_TO_ADDR
// tech_Cargo := 83 ;
13132: LD_ADDR_EXP 51
13136: PUSH
13137: LD_INT 83
13139: ST_TO_ADDR
// tech_Track := 84 ;
13140: LD_ADDR_EXP 52
13144: PUSH
13145: LD_INT 84
13147: ST_TO_ADDR
// tech_Crane := 85 ;
13148: LD_ADDR_EXP 53
13152: PUSH
13153: LD_INT 85
13155: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13156: LD_ADDR_EXP 54
13160: PUSH
13161: LD_INT 86
13163: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13164: LD_ADDR_EXP 55
13168: PUSH
13169: LD_INT 87
13171: ST_TO_ADDR
// end ; end_of_file end_of_file
13172: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13173: GO 13175
13175: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13176: LD_STRING initStreamRollete();
13178: PPUSH
13179: CALL_OW 559
// InitStreamMode ;
13183: CALL 13192 0 0
// DefineStreamItems ( ) ;
13187: CALL 13632 0 0
// end ;
13191: END
// function InitStreamMode ; begin
13192: LD_INT 0
13194: PPUSH
// streamModeActive := false ;
13195: LD_ADDR_EXP 56
13199: PUSH
13200: LD_INT 0
13202: ST_TO_ADDR
// normalCounter := 36 ;
13203: LD_ADDR_EXP 57
13207: PUSH
13208: LD_INT 36
13210: ST_TO_ADDR
// hardcoreCounter := 16 ;
13211: LD_ADDR_EXP 58
13215: PUSH
13216: LD_INT 16
13218: ST_TO_ADDR
// sRocket := false ;
13219: LD_ADDR_EXP 61
13223: PUSH
13224: LD_INT 0
13226: ST_TO_ADDR
// sSpeed := false ;
13227: LD_ADDR_EXP 60
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// sEngine := false ;
13235: LD_ADDR_EXP 62
13239: PUSH
13240: LD_INT 0
13242: ST_TO_ADDR
// sSpec := false ;
13243: LD_ADDR_EXP 59
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// sLevel := false ;
13251: LD_ADDR_EXP 63
13255: PUSH
13256: LD_INT 0
13258: ST_TO_ADDR
// sArmoury := false ;
13259: LD_ADDR_EXP 64
13263: PUSH
13264: LD_INT 0
13266: ST_TO_ADDR
// sRadar := false ;
13267: LD_ADDR_EXP 65
13271: PUSH
13272: LD_INT 0
13274: ST_TO_ADDR
// sBunker := false ;
13275: LD_ADDR_EXP 66
13279: PUSH
13280: LD_INT 0
13282: ST_TO_ADDR
// sHack := false ;
13283: LD_ADDR_EXP 67
13287: PUSH
13288: LD_INT 0
13290: ST_TO_ADDR
// sFire := false ;
13291: LD_ADDR_EXP 68
13295: PUSH
13296: LD_INT 0
13298: ST_TO_ADDR
// sRefresh := false ;
13299: LD_ADDR_EXP 69
13303: PUSH
13304: LD_INT 0
13306: ST_TO_ADDR
// sExp := false ;
13307: LD_ADDR_EXP 70
13311: PUSH
13312: LD_INT 0
13314: ST_TO_ADDR
// sDepot := false ;
13315: LD_ADDR_EXP 71
13319: PUSH
13320: LD_INT 0
13322: ST_TO_ADDR
// sFlag := false ;
13323: LD_ADDR_EXP 72
13327: PUSH
13328: LD_INT 0
13330: ST_TO_ADDR
// sKamikadze := false ;
13331: LD_ADDR_EXP 80
13335: PUSH
13336: LD_INT 0
13338: ST_TO_ADDR
// sTroll := false ;
13339: LD_ADDR_EXP 81
13343: PUSH
13344: LD_INT 0
13346: ST_TO_ADDR
// sSlow := false ;
13347: LD_ADDR_EXP 82
13351: PUSH
13352: LD_INT 0
13354: ST_TO_ADDR
// sLack := false ;
13355: LD_ADDR_EXP 83
13359: PUSH
13360: LD_INT 0
13362: ST_TO_ADDR
// sTank := false ;
13363: LD_ADDR_EXP 85
13367: PUSH
13368: LD_INT 0
13370: ST_TO_ADDR
// sRemote := false ;
13371: LD_ADDR_EXP 86
13375: PUSH
13376: LD_INT 0
13378: ST_TO_ADDR
// sPowell := false ;
13379: LD_ADDR_EXP 87
13383: PUSH
13384: LD_INT 0
13386: ST_TO_ADDR
// sTeleport := false ;
13387: LD_ADDR_EXP 90
13391: PUSH
13392: LD_INT 0
13394: ST_TO_ADDR
// sOilTower := false ;
13395: LD_ADDR_EXP 92
13399: PUSH
13400: LD_INT 0
13402: ST_TO_ADDR
// sShovel := false ;
13403: LD_ADDR_EXP 93
13407: PUSH
13408: LD_INT 0
13410: ST_TO_ADDR
// sSheik := false ;
13411: LD_ADDR_EXP 94
13415: PUSH
13416: LD_INT 0
13418: ST_TO_ADDR
// sEarthquake := false ;
13419: LD_ADDR_EXP 96
13423: PUSH
13424: LD_INT 0
13426: ST_TO_ADDR
// sAI := false ;
13427: LD_ADDR_EXP 97
13431: PUSH
13432: LD_INT 0
13434: ST_TO_ADDR
// sCargo := false ;
13435: LD_ADDR_EXP 100
13439: PUSH
13440: LD_INT 0
13442: ST_TO_ADDR
// sDLaser := false ;
13443: LD_ADDR_EXP 101
13447: PUSH
13448: LD_INT 0
13450: ST_TO_ADDR
// sExchange := false ;
13451: LD_ADDR_EXP 102
13455: PUSH
13456: LD_INT 0
13458: ST_TO_ADDR
// sFac := false ;
13459: LD_ADDR_EXP 103
13463: PUSH
13464: LD_INT 0
13466: ST_TO_ADDR
// sPower := false ;
13467: LD_ADDR_EXP 104
13471: PUSH
13472: LD_INT 0
13474: ST_TO_ADDR
// sRandom := false ;
13475: LD_ADDR_EXP 105
13479: PUSH
13480: LD_INT 0
13482: ST_TO_ADDR
// sShield := false ;
13483: LD_ADDR_EXP 106
13487: PUSH
13488: LD_INT 0
13490: ST_TO_ADDR
// sTime := false ;
13491: LD_ADDR_EXP 107
13495: PUSH
13496: LD_INT 0
13498: ST_TO_ADDR
// sTools := false ;
13499: LD_ADDR_EXP 108
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// sSold := false ;
13507: LD_ADDR_EXP 73
13511: PUSH
13512: LD_INT 0
13514: ST_TO_ADDR
// sDiff := false ;
13515: LD_ADDR_EXP 74
13519: PUSH
13520: LD_INT 0
13522: ST_TO_ADDR
// sFog := false ;
13523: LD_ADDR_EXP 77
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// sReset := false ;
13531: LD_ADDR_EXP 78
13535: PUSH
13536: LD_INT 0
13538: ST_TO_ADDR
// sSun := false ;
13539: LD_ADDR_EXP 79
13543: PUSH
13544: LD_INT 0
13546: ST_TO_ADDR
// sTiger := false ;
13547: LD_ADDR_EXP 75
13551: PUSH
13552: LD_INT 0
13554: ST_TO_ADDR
// sBomb := false ;
13555: LD_ADDR_EXP 76
13559: PUSH
13560: LD_INT 0
13562: ST_TO_ADDR
// sWound := false ;
13563: LD_ADDR_EXP 84
13567: PUSH
13568: LD_INT 0
13570: ST_TO_ADDR
// sBetray := false ;
13571: LD_ADDR_EXP 88
13575: PUSH
13576: LD_INT 0
13578: ST_TO_ADDR
// sContamin := false ;
13579: LD_ADDR_EXP 89
13583: PUSH
13584: LD_INT 0
13586: ST_TO_ADDR
// sOil := false ;
13587: LD_ADDR_EXP 91
13591: PUSH
13592: LD_INT 0
13594: ST_TO_ADDR
// sStu := false ;
13595: LD_ADDR_EXP 95
13599: PUSH
13600: LD_INT 0
13602: ST_TO_ADDR
// sBazooka := false ;
13603: LD_ADDR_EXP 98
13607: PUSH
13608: LD_INT 0
13610: ST_TO_ADDR
// sMortar := false ;
13611: LD_ADDR_EXP 99
13615: PUSH
13616: LD_INT 0
13618: ST_TO_ADDR
// sRanger := false ;
13619: LD_ADDR_EXP 109
13623: PUSH
13624: LD_INT 0
13626: ST_TO_ADDR
// end ;
13627: LD_VAR 0 1
13631: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13632: LD_INT 0
13634: PPUSH
13635: PPUSH
13636: PPUSH
13637: PPUSH
13638: PPUSH
// result := [ ] ;
13639: LD_ADDR_VAR 0 1
13643: PUSH
13644: EMPTY
13645: ST_TO_ADDR
// if campaign_id = 1 then
13646: LD_OWVAR 69
13650: PUSH
13651: LD_INT 1
13653: EQUAL
13654: IFFALSE 16592
// begin case mission_number of 1 :
13656: LD_OWVAR 70
13660: PUSH
13661: LD_INT 1
13663: DOUBLE
13664: EQUAL
13665: IFTRUE 13669
13667: GO 13733
13669: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13670: LD_ADDR_VAR 0 1
13674: PUSH
13675: LD_INT 2
13677: PUSH
13678: LD_INT 4
13680: PUSH
13681: LD_INT 11
13683: PUSH
13684: LD_INT 12
13686: PUSH
13687: LD_INT 15
13689: PUSH
13690: LD_INT 16
13692: PUSH
13693: LD_INT 22
13695: PUSH
13696: LD_INT 23
13698: PUSH
13699: LD_INT 26
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: PUSH
13713: LD_INT 101
13715: PUSH
13716: LD_INT 102
13718: PUSH
13719: LD_INT 106
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: ST_TO_ADDR
13731: GO 16590
13733: LD_INT 2
13735: DOUBLE
13736: EQUAL
13737: IFTRUE 13741
13739: GO 13813
13741: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
13742: LD_ADDR_VAR 0 1
13746: PUSH
13747: LD_INT 2
13749: PUSH
13750: LD_INT 4
13752: PUSH
13753: LD_INT 11
13755: PUSH
13756: LD_INT 12
13758: PUSH
13759: LD_INT 15
13761: PUSH
13762: LD_INT 16
13764: PUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 23
13770: PUSH
13771: LD_INT 26
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 101
13787: PUSH
13788: LD_INT 102
13790: PUSH
13791: LD_INT 105
13793: PUSH
13794: LD_INT 106
13796: PUSH
13797: LD_INT 108
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: ST_TO_ADDR
13811: GO 16590
13813: LD_INT 3
13815: DOUBLE
13816: EQUAL
13817: IFTRUE 13821
13819: GO 13897
13821: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13822: LD_ADDR_VAR 0 1
13826: PUSH
13827: LD_INT 2
13829: PUSH
13830: LD_INT 4
13832: PUSH
13833: LD_INT 5
13835: PUSH
13836: LD_INT 11
13838: PUSH
13839: LD_INT 12
13841: PUSH
13842: LD_INT 15
13844: PUSH
13845: LD_INT 16
13847: PUSH
13848: LD_INT 22
13850: PUSH
13851: LD_INT 26
13853: PUSH
13854: LD_INT 36
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: PUSH
13869: LD_INT 101
13871: PUSH
13872: LD_INT 102
13874: PUSH
13875: LD_INT 105
13877: PUSH
13878: LD_INT 106
13880: PUSH
13881: LD_INT 108
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: ST_TO_ADDR
13895: GO 16590
13897: LD_INT 4
13899: DOUBLE
13900: EQUAL
13901: IFTRUE 13905
13903: GO 13989
13905: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13906: LD_ADDR_VAR 0 1
13910: PUSH
13911: LD_INT 2
13913: PUSH
13914: LD_INT 4
13916: PUSH
13917: LD_INT 5
13919: PUSH
13920: LD_INT 8
13922: PUSH
13923: LD_INT 11
13925: PUSH
13926: LD_INT 12
13928: PUSH
13929: LD_INT 15
13931: PUSH
13932: LD_INT 16
13934: PUSH
13935: LD_INT 22
13937: PUSH
13938: LD_INT 23
13940: PUSH
13941: LD_INT 26
13943: PUSH
13944: LD_INT 36
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: PUSH
13961: LD_INT 101
13963: PUSH
13964: LD_INT 102
13966: PUSH
13967: LD_INT 105
13969: PUSH
13970: LD_INT 106
13972: PUSH
13973: LD_INT 108
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: ST_TO_ADDR
13987: GO 16590
13989: LD_INT 5
13991: DOUBLE
13992: EQUAL
13993: IFTRUE 13997
13995: GO 14097
13997: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13998: LD_ADDR_VAR 0 1
14002: PUSH
14003: LD_INT 2
14005: PUSH
14006: LD_INT 4
14008: PUSH
14009: LD_INT 5
14011: PUSH
14012: LD_INT 6
14014: PUSH
14015: LD_INT 8
14017: PUSH
14018: LD_INT 11
14020: PUSH
14021: LD_INT 12
14023: PUSH
14024: LD_INT 15
14026: PUSH
14027: LD_INT 16
14029: PUSH
14030: LD_INT 22
14032: PUSH
14033: LD_INT 23
14035: PUSH
14036: LD_INT 25
14038: PUSH
14039: LD_INT 26
14041: PUSH
14042: LD_INT 36
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 101
14063: PUSH
14064: LD_INT 102
14066: PUSH
14067: LD_INT 105
14069: PUSH
14070: LD_INT 106
14072: PUSH
14073: LD_INT 108
14075: PUSH
14076: LD_INT 109
14078: PUSH
14079: LD_INT 112
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: ST_TO_ADDR
14095: GO 16590
14097: LD_INT 6
14099: DOUBLE
14100: EQUAL
14101: IFTRUE 14105
14103: GO 14225
14105: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14106: LD_ADDR_VAR 0 1
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: LD_INT 4
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: LD_INT 6
14122: PUSH
14123: LD_INT 8
14125: PUSH
14126: LD_INT 11
14128: PUSH
14129: LD_INT 12
14131: PUSH
14132: LD_INT 15
14134: PUSH
14135: LD_INT 16
14137: PUSH
14138: LD_INT 20
14140: PUSH
14141: LD_INT 21
14143: PUSH
14144: LD_INT 22
14146: PUSH
14147: LD_INT 23
14149: PUSH
14150: LD_INT 25
14152: PUSH
14153: LD_INT 26
14155: PUSH
14156: LD_INT 30
14158: PUSH
14159: LD_INT 31
14161: PUSH
14162: LD_INT 32
14164: PUSH
14165: LD_INT 36
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 101
14191: PUSH
14192: LD_INT 102
14194: PUSH
14195: LD_INT 105
14197: PUSH
14198: LD_INT 106
14200: PUSH
14201: LD_INT 108
14203: PUSH
14204: LD_INT 109
14206: PUSH
14207: LD_INT 112
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: ST_TO_ADDR
14223: GO 16590
14225: LD_INT 7
14227: DOUBLE
14228: EQUAL
14229: IFTRUE 14233
14231: GO 14333
14233: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14234: LD_ADDR_VAR 0 1
14238: PUSH
14239: LD_INT 2
14241: PUSH
14242: LD_INT 4
14244: PUSH
14245: LD_INT 5
14247: PUSH
14248: LD_INT 7
14250: PUSH
14251: LD_INT 11
14253: PUSH
14254: LD_INT 12
14256: PUSH
14257: LD_INT 15
14259: PUSH
14260: LD_INT 16
14262: PUSH
14263: LD_INT 20
14265: PUSH
14266: LD_INT 21
14268: PUSH
14269: LD_INT 22
14271: PUSH
14272: LD_INT 23
14274: PUSH
14275: LD_INT 25
14277: PUSH
14278: LD_INT 26
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: PUSH
14297: LD_INT 101
14299: PUSH
14300: LD_INT 102
14302: PUSH
14303: LD_INT 103
14305: PUSH
14306: LD_INT 105
14308: PUSH
14309: LD_INT 106
14311: PUSH
14312: LD_INT 108
14314: PUSH
14315: LD_INT 112
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: ST_TO_ADDR
14331: GO 16590
14333: LD_INT 8
14335: DOUBLE
14336: EQUAL
14337: IFTRUE 14341
14339: GO 14469
14341: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14342: LD_ADDR_VAR 0 1
14346: PUSH
14347: LD_INT 2
14349: PUSH
14350: LD_INT 4
14352: PUSH
14353: LD_INT 5
14355: PUSH
14356: LD_INT 6
14358: PUSH
14359: LD_INT 7
14361: PUSH
14362: LD_INT 8
14364: PUSH
14365: LD_INT 11
14367: PUSH
14368: LD_INT 12
14370: PUSH
14371: LD_INT 15
14373: PUSH
14374: LD_INT 16
14376: PUSH
14377: LD_INT 20
14379: PUSH
14380: LD_INT 21
14382: PUSH
14383: LD_INT 22
14385: PUSH
14386: LD_INT 23
14388: PUSH
14389: LD_INT 25
14391: PUSH
14392: LD_INT 26
14394: PUSH
14395: LD_INT 30
14397: PUSH
14398: LD_INT 31
14400: PUSH
14401: LD_INT 32
14403: PUSH
14404: LD_INT 36
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 101
14431: PUSH
14432: LD_INT 102
14434: PUSH
14435: LD_INT 103
14437: PUSH
14438: LD_INT 105
14440: PUSH
14441: LD_INT 106
14443: PUSH
14444: LD_INT 108
14446: PUSH
14447: LD_INT 109
14449: PUSH
14450: LD_INT 112
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: ST_TO_ADDR
14467: GO 16590
14469: LD_INT 9
14471: DOUBLE
14472: EQUAL
14473: IFTRUE 14477
14475: GO 14613
14477: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14478: LD_ADDR_VAR 0 1
14482: PUSH
14483: LD_INT 2
14485: PUSH
14486: LD_INT 4
14488: PUSH
14489: LD_INT 5
14491: PUSH
14492: LD_INT 6
14494: PUSH
14495: LD_INT 7
14497: PUSH
14498: LD_INT 8
14500: PUSH
14501: LD_INT 11
14503: PUSH
14504: LD_INT 12
14506: PUSH
14507: LD_INT 15
14509: PUSH
14510: LD_INT 16
14512: PUSH
14513: LD_INT 20
14515: PUSH
14516: LD_INT 21
14518: PUSH
14519: LD_INT 22
14521: PUSH
14522: LD_INT 23
14524: PUSH
14525: LD_INT 25
14527: PUSH
14528: LD_INT 26
14530: PUSH
14531: LD_INT 28
14533: PUSH
14534: LD_INT 30
14536: PUSH
14537: LD_INT 31
14539: PUSH
14540: LD_INT 32
14542: PUSH
14543: LD_INT 36
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 101
14571: PUSH
14572: LD_INT 102
14574: PUSH
14575: LD_INT 103
14577: PUSH
14578: LD_INT 105
14580: PUSH
14581: LD_INT 106
14583: PUSH
14584: LD_INT 108
14586: PUSH
14587: LD_INT 109
14589: PUSH
14590: LD_INT 112
14592: PUSH
14593: LD_INT 114
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: ST_TO_ADDR
14611: GO 16590
14613: LD_INT 10
14615: DOUBLE
14616: EQUAL
14617: IFTRUE 14621
14619: GO 14805
14621: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14622: LD_ADDR_VAR 0 1
14626: PUSH
14627: LD_INT 2
14629: PUSH
14630: LD_INT 4
14632: PUSH
14633: LD_INT 5
14635: PUSH
14636: LD_INT 6
14638: PUSH
14639: LD_INT 7
14641: PUSH
14642: LD_INT 8
14644: PUSH
14645: LD_INT 9
14647: PUSH
14648: LD_INT 10
14650: PUSH
14651: LD_INT 11
14653: PUSH
14654: LD_INT 12
14656: PUSH
14657: LD_INT 13
14659: PUSH
14660: LD_INT 14
14662: PUSH
14663: LD_INT 15
14665: PUSH
14666: LD_INT 16
14668: PUSH
14669: LD_INT 17
14671: PUSH
14672: LD_INT 18
14674: PUSH
14675: LD_INT 19
14677: PUSH
14678: LD_INT 20
14680: PUSH
14681: LD_INT 21
14683: PUSH
14684: LD_INT 22
14686: PUSH
14687: LD_INT 23
14689: PUSH
14690: LD_INT 24
14692: PUSH
14693: LD_INT 25
14695: PUSH
14696: LD_INT 26
14698: PUSH
14699: LD_INT 28
14701: PUSH
14702: LD_INT 30
14704: PUSH
14705: LD_INT 31
14707: PUSH
14708: LD_INT 32
14710: PUSH
14711: LD_INT 36
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 101
14747: PUSH
14748: LD_INT 102
14750: PUSH
14751: LD_INT 103
14753: PUSH
14754: LD_INT 104
14756: PUSH
14757: LD_INT 105
14759: PUSH
14760: LD_INT 106
14762: PUSH
14763: LD_INT 107
14765: PUSH
14766: LD_INT 108
14768: PUSH
14769: LD_INT 109
14771: PUSH
14772: LD_INT 110
14774: PUSH
14775: LD_INT 111
14777: PUSH
14778: LD_INT 112
14780: PUSH
14781: LD_INT 114
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: ST_TO_ADDR
14803: GO 16590
14805: LD_INT 11
14807: DOUBLE
14808: EQUAL
14809: IFTRUE 14813
14811: GO 15005
14813: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14814: LD_ADDR_VAR 0 1
14818: PUSH
14819: LD_INT 2
14821: PUSH
14822: LD_INT 3
14824: PUSH
14825: LD_INT 4
14827: PUSH
14828: LD_INT 5
14830: PUSH
14831: LD_INT 6
14833: PUSH
14834: LD_INT 7
14836: PUSH
14837: LD_INT 8
14839: PUSH
14840: LD_INT 9
14842: PUSH
14843: LD_INT 10
14845: PUSH
14846: LD_INT 11
14848: PUSH
14849: LD_INT 12
14851: PUSH
14852: LD_INT 13
14854: PUSH
14855: LD_INT 14
14857: PUSH
14858: LD_INT 15
14860: PUSH
14861: LD_INT 16
14863: PUSH
14864: LD_INT 17
14866: PUSH
14867: LD_INT 18
14869: PUSH
14870: LD_INT 19
14872: PUSH
14873: LD_INT 20
14875: PUSH
14876: LD_INT 21
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_INT 23
14884: PUSH
14885: LD_INT 24
14887: PUSH
14888: LD_INT 25
14890: PUSH
14891: LD_INT 26
14893: PUSH
14894: LD_INT 28
14896: PUSH
14897: LD_INT 30
14899: PUSH
14900: LD_INT 31
14902: PUSH
14903: LD_INT 32
14905: PUSH
14906: LD_INT 34
14908: PUSH
14909: LD_INT 36
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 101
14947: PUSH
14948: LD_INT 102
14950: PUSH
14951: LD_INT 103
14953: PUSH
14954: LD_INT 104
14956: PUSH
14957: LD_INT 105
14959: PUSH
14960: LD_INT 106
14962: PUSH
14963: LD_INT 107
14965: PUSH
14966: LD_INT 108
14968: PUSH
14969: LD_INT 109
14971: PUSH
14972: LD_INT 110
14974: PUSH
14975: LD_INT 111
14977: PUSH
14978: LD_INT 112
14980: PUSH
14981: LD_INT 114
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: ST_TO_ADDR
15003: GO 16590
15005: LD_INT 12
15007: DOUBLE
15008: EQUAL
15009: IFTRUE 15013
15011: GO 15221
15013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15014: LD_ADDR_VAR 0 1
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: LD_INT 2
15024: PUSH
15025: LD_INT 3
15027: PUSH
15028: LD_INT 4
15030: PUSH
15031: LD_INT 5
15033: PUSH
15034: LD_INT 6
15036: PUSH
15037: LD_INT 7
15039: PUSH
15040: LD_INT 8
15042: PUSH
15043: LD_INT 9
15045: PUSH
15046: LD_INT 10
15048: PUSH
15049: LD_INT 11
15051: PUSH
15052: LD_INT 12
15054: PUSH
15055: LD_INT 13
15057: PUSH
15058: LD_INT 14
15060: PUSH
15061: LD_INT 15
15063: PUSH
15064: LD_INT 16
15066: PUSH
15067: LD_INT 17
15069: PUSH
15070: LD_INT 18
15072: PUSH
15073: LD_INT 19
15075: PUSH
15076: LD_INT 20
15078: PUSH
15079: LD_INT 21
15081: PUSH
15082: LD_INT 22
15084: PUSH
15085: LD_INT 23
15087: PUSH
15088: LD_INT 24
15090: PUSH
15091: LD_INT 25
15093: PUSH
15094: LD_INT 26
15096: PUSH
15097: LD_INT 27
15099: PUSH
15100: LD_INT 28
15102: PUSH
15103: LD_INT 30
15105: PUSH
15106: LD_INT 31
15108: PUSH
15109: LD_INT 32
15111: PUSH
15112: LD_INT 33
15114: PUSH
15115: LD_INT 34
15117: PUSH
15118: LD_INT 36
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: PUSH
15157: LD_INT 101
15159: PUSH
15160: LD_INT 102
15162: PUSH
15163: LD_INT 103
15165: PUSH
15166: LD_INT 104
15168: PUSH
15169: LD_INT 105
15171: PUSH
15172: LD_INT 106
15174: PUSH
15175: LD_INT 107
15177: PUSH
15178: LD_INT 108
15180: PUSH
15181: LD_INT 109
15183: PUSH
15184: LD_INT 110
15186: PUSH
15187: LD_INT 111
15189: PUSH
15190: LD_INT 112
15192: PUSH
15193: LD_INT 113
15195: PUSH
15196: LD_INT 114
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: ST_TO_ADDR
15219: GO 16590
15221: LD_INT 13
15223: DOUBLE
15224: EQUAL
15225: IFTRUE 15229
15227: GO 15425
15229: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15230: LD_ADDR_VAR 0 1
15234: PUSH
15235: LD_INT 1
15237: PUSH
15238: LD_INT 2
15240: PUSH
15241: LD_INT 3
15243: PUSH
15244: LD_INT 4
15246: PUSH
15247: LD_INT 5
15249: PUSH
15250: LD_INT 8
15252: PUSH
15253: LD_INT 9
15255: PUSH
15256: LD_INT 10
15258: PUSH
15259: LD_INT 11
15261: PUSH
15262: LD_INT 12
15264: PUSH
15265: LD_INT 14
15267: PUSH
15268: LD_INT 15
15270: PUSH
15271: LD_INT 16
15273: PUSH
15274: LD_INT 17
15276: PUSH
15277: LD_INT 18
15279: PUSH
15280: LD_INT 19
15282: PUSH
15283: LD_INT 20
15285: PUSH
15286: LD_INT 21
15288: PUSH
15289: LD_INT 22
15291: PUSH
15292: LD_INT 23
15294: PUSH
15295: LD_INT 24
15297: PUSH
15298: LD_INT 25
15300: PUSH
15301: LD_INT 26
15303: PUSH
15304: LD_INT 27
15306: PUSH
15307: LD_INT 28
15309: PUSH
15310: LD_INT 30
15312: PUSH
15313: LD_INT 31
15315: PUSH
15316: LD_INT 32
15318: PUSH
15319: LD_INT 33
15321: PUSH
15322: LD_INT 34
15324: PUSH
15325: LD_INT 36
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 101
15363: PUSH
15364: LD_INT 102
15366: PUSH
15367: LD_INT 103
15369: PUSH
15370: LD_INT 104
15372: PUSH
15373: LD_INT 105
15375: PUSH
15376: LD_INT 106
15378: PUSH
15379: LD_INT 107
15381: PUSH
15382: LD_INT 108
15384: PUSH
15385: LD_INT 109
15387: PUSH
15388: LD_INT 110
15390: PUSH
15391: LD_INT 111
15393: PUSH
15394: LD_INT 112
15396: PUSH
15397: LD_INT 113
15399: PUSH
15400: LD_INT 114
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: ST_TO_ADDR
15423: GO 16590
15425: LD_INT 14
15427: DOUBLE
15428: EQUAL
15429: IFTRUE 15433
15431: GO 15645
15433: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15434: LD_ADDR_VAR 0 1
15438: PUSH
15439: LD_INT 1
15441: PUSH
15442: LD_INT 2
15444: PUSH
15445: LD_INT 3
15447: PUSH
15448: LD_INT 4
15450: PUSH
15451: LD_INT 5
15453: PUSH
15454: LD_INT 6
15456: PUSH
15457: LD_INT 7
15459: PUSH
15460: LD_INT 8
15462: PUSH
15463: LD_INT 9
15465: PUSH
15466: LD_INT 10
15468: PUSH
15469: LD_INT 11
15471: PUSH
15472: LD_INT 12
15474: PUSH
15475: LD_INT 13
15477: PUSH
15478: LD_INT 14
15480: PUSH
15481: LD_INT 15
15483: PUSH
15484: LD_INT 16
15486: PUSH
15487: LD_INT 17
15489: PUSH
15490: LD_INT 18
15492: PUSH
15493: LD_INT 19
15495: PUSH
15496: LD_INT 20
15498: PUSH
15499: LD_INT 21
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_INT 23
15507: PUSH
15508: LD_INT 24
15510: PUSH
15511: LD_INT 25
15513: PUSH
15514: LD_INT 26
15516: PUSH
15517: LD_INT 27
15519: PUSH
15520: LD_INT 28
15522: PUSH
15523: LD_INT 29
15525: PUSH
15526: LD_INT 30
15528: PUSH
15529: LD_INT 31
15531: PUSH
15532: LD_INT 32
15534: PUSH
15535: LD_INT 33
15537: PUSH
15538: LD_INT 34
15540: PUSH
15541: LD_INT 36
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 101
15583: PUSH
15584: LD_INT 102
15586: PUSH
15587: LD_INT 103
15589: PUSH
15590: LD_INT 104
15592: PUSH
15593: LD_INT 105
15595: PUSH
15596: LD_INT 106
15598: PUSH
15599: LD_INT 107
15601: PUSH
15602: LD_INT 108
15604: PUSH
15605: LD_INT 109
15607: PUSH
15608: LD_INT 110
15610: PUSH
15611: LD_INT 111
15613: PUSH
15614: LD_INT 112
15616: PUSH
15617: LD_INT 113
15619: PUSH
15620: LD_INT 114
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: ST_TO_ADDR
15643: GO 16590
15645: LD_INT 15
15647: DOUBLE
15648: EQUAL
15649: IFTRUE 15653
15651: GO 15865
15653: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15654: LD_ADDR_VAR 0 1
15658: PUSH
15659: LD_INT 1
15661: PUSH
15662: LD_INT 2
15664: PUSH
15665: LD_INT 3
15667: PUSH
15668: LD_INT 4
15670: PUSH
15671: LD_INT 5
15673: PUSH
15674: LD_INT 6
15676: PUSH
15677: LD_INT 7
15679: PUSH
15680: LD_INT 8
15682: PUSH
15683: LD_INT 9
15685: PUSH
15686: LD_INT 10
15688: PUSH
15689: LD_INT 11
15691: PUSH
15692: LD_INT 12
15694: PUSH
15695: LD_INT 13
15697: PUSH
15698: LD_INT 14
15700: PUSH
15701: LD_INT 15
15703: PUSH
15704: LD_INT 16
15706: PUSH
15707: LD_INT 17
15709: PUSH
15710: LD_INT 18
15712: PUSH
15713: LD_INT 19
15715: PUSH
15716: LD_INT 20
15718: PUSH
15719: LD_INT 21
15721: PUSH
15722: LD_INT 22
15724: PUSH
15725: LD_INT 23
15727: PUSH
15728: LD_INT 24
15730: PUSH
15731: LD_INT 25
15733: PUSH
15734: LD_INT 26
15736: PUSH
15737: LD_INT 27
15739: PUSH
15740: LD_INT 28
15742: PUSH
15743: LD_INT 29
15745: PUSH
15746: LD_INT 30
15748: PUSH
15749: LD_INT 31
15751: PUSH
15752: LD_INT 32
15754: PUSH
15755: LD_INT 33
15757: PUSH
15758: LD_INT 34
15760: PUSH
15761: LD_INT 36
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 101
15803: PUSH
15804: LD_INT 102
15806: PUSH
15807: LD_INT 103
15809: PUSH
15810: LD_INT 104
15812: PUSH
15813: LD_INT 105
15815: PUSH
15816: LD_INT 106
15818: PUSH
15819: LD_INT 107
15821: PUSH
15822: LD_INT 108
15824: PUSH
15825: LD_INT 109
15827: PUSH
15828: LD_INT 110
15830: PUSH
15831: LD_INT 111
15833: PUSH
15834: LD_INT 112
15836: PUSH
15837: LD_INT 113
15839: PUSH
15840: LD_INT 114
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: ST_TO_ADDR
15863: GO 16590
15865: LD_INT 16
15867: DOUBLE
15868: EQUAL
15869: IFTRUE 15873
15871: GO 15997
15873: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15874: LD_ADDR_VAR 0 1
15878: PUSH
15879: LD_INT 2
15881: PUSH
15882: LD_INT 4
15884: PUSH
15885: LD_INT 5
15887: PUSH
15888: LD_INT 7
15890: PUSH
15891: LD_INT 11
15893: PUSH
15894: LD_INT 12
15896: PUSH
15897: LD_INT 15
15899: PUSH
15900: LD_INT 16
15902: PUSH
15903: LD_INT 20
15905: PUSH
15906: LD_INT 21
15908: PUSH
15909: LD_INT 22
15911: PUSH
15912: LD_INT 23
15914: PUSH
15915: LD_INT 25
15917: PUSH
15918: LD_INT 26
15920: PUSH
15921: LD_INT 30
15923: PUSH
15924: LD_INT 31
15926: PUSH
15927: LD_INT 32
15929: PUSH
15930: LD_INT 33
15932: PUSH
15933: LD_INT 34
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 101
15959: PUSH
15960: LD_INT 102
15962: PUSH
15963: LD_INT 103
15965: PUSH
15966: LD_INT 106
15968: PUSH
15969: LD_INT 108
15971: PUSH
15972: LD_INT 112
15974: PUSH
15975: LD_INT 113
15977: PUSH
15978: LD_INT 114
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: ST_TO_ADDR
15995: GO 16590
15997: LD_INT 17
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16217
16005: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16006: LD_ADDR_VAR 0 1
16010: PUSH
16011: LD_INT 1
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: LD_INT 3
16019: PUSH
16020: LD_INT 4
16022: PUSH
16023: LD_INT 5
16025: PUSH
16026: LD_INT 6
16028: PUSH
16029: LD_INT 7
16031: PUSH
16032: LD_INT 8
16034: PUSH
16035: LD_INT 9
16037: PUSH
16038: LD_INT 10
16040: PUSH
16041: LD_INT 11
16043: PUSH
16044: LD_INT 12
16046: PUSH
16047: LD_INT 13
16049: PUSH
16050: LD_INT 14
16052: PUSH
16053: LD_INT 15
16055: PUSH
16056: LD_INT 16
16058: PUSH
16059: LD_INT 17
16061: PUSH
16062: LD_INT 18
16064: PUSH
16065: LD_INT 19
16067: PUSH
16068: LD_INT 20
16070: PUSH
16071: LD_INT 21
16073: PUSH
16074: LD_INT 22
16076: PUSH
16077: LD_INT 23
16079: PUSH
16080: LD_INT 24
16082: PUSH
16083: LD_INT 25
16085: PUSH
16086: LD_INT 26
16088: PUSH
16089: LD_INT 27
16091: PUSH
16092: LD_INT 28
16094: PUSH
16095: LD_INT 29
16097: PUSH
16098: LD_INT 30
16100: PUSH
16101: LD_INT 31
16103: PUSH
16104: LD_INT 32
16106: PUSH
16107: LD_INT 33
16109: PUSH
16110: LD_INT 34
16112: PUSH
16113: LD_INT 36
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 101
16155: PUSH
16156: LD_INT 102
16158: PUSH
16159: LD_INT 103
16161: PUSH
16162: LD_INT 104
16164: PUSH
16165: LD_INT 105
16167: PUSH
16168: LD_INT 106
16170: PUSH
16171: LD_INT 107
16173: PUSH
16174: LD_INT 108
16176: PUSH
16177: LD_INT 109
16179: PUSH
16180: LD_INT 110
16182: PUSH
16183: LD_INT 111
16185: PUSH
16186: LD_INT 112
16188: PUSH
16189: LD_INT 113
16191: PUSH
16192: LD_INT 114
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: ST_TO_ADDR
16215: GO 16590
16217: LD_INT 18
16219: DOUBLE
16220: EQUAL
16221: IFTRUE 16225
16223: GO 16361
16225: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16226: LD_ADDR_VAR 0 1
16230: PUSH
16231: LD_INT 2
16233: PUSH
16234: LD_INT 4
16236: PUSH
16237: LD_INT 5
16239: PUSH
16240: LD_INT 7
16242: PUSH
16243: LD_INT 11
16245: PUSH
16246: LD_INT 12
16248: PUSH
16249: LD_INT 15
16251: PUSH
16252: LD_INT 16
16254: PUSH
16255: LD_INT 20
16257: PUSH
16258: LD_INT 21
16260: PUSH
16261: LD_INT 22
16263: PUSH
16264: LD_INT 23
16266: PUSH
16267: LD_INT 25
16269: PUSH
16270: LD_INT 26
16272: PUSH
16273: LD_INT 30
16275: PUSH
16276: LD_INT 31
16278: PUSH
16279: LD_INT 32
16281: PUSH
16282: LD_INT 33
16284: PUSH
16285: LD_INT 34
16287: PUSH
16288: LD_INT 35
16290: PUSH
16291: LD_INT 36
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 101
16319: PUSH
16320: LD_INT 102
16322: PUSH
16323: LD_INT 103
16325: PUSH
16326: LD_INT 106
16328: PUSH
16329: LD_INT 108
16331: PUSH
16332: LD_INT 112
16334: PUSH
16335: LD_INT 113
16337: PUSH
16338: LD_INT 114
16340: PUSH
16341: LD_INT 115
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: ST_TO_ADDR
16359: GO 16590
16361: LD_INT 19
16363: DOUBLE
16364: EQUAL
16365: IFTRUE 16369
16367: GO 16589
16369: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16370: LD_ADDR_VAR 0 1
16374: PUSH
16375: LD_INT 1
16377: PUSH
16378: LD_INT 2
16380: PUSH
16381: LD_INT 3
16383: PUSH
16384: LD_INT 4
16386: PUSH
16387: LD_INT 5
16389: PUSH
16390: LD_INT 6
16392: PUSH
16393: LD_INT 7
16395: PUSH
16396: LD_INT 8
16398: PUSH
16399: LD_INT 9
16401: PUSH
16402: LD_INT 10
16404: PUSH
16405: LD_INT 11
16407: PUSH
16408: LD_INT 12
16410: PUSH
16411: LD_INT 13
16413: PUSH
16414: LD_INT 14
16416: PUSH
16417: LD_INT 15
16419: PUSH
16420: LD_INT 16
16422: PUSH
16423: LD_INT 17
16425: PUSH
16426: LD_INT 18
16428: PUSH
16429: LD_INT 19
16431: PUSH
16432: LD_INT 20
16434: PUSH
16435: LD_INT 21
16437: PUSH
16438: LD_INT 22
16440: PUSH
16441: LD_INT 23
16443: PUSH
16444: LD_INT 24
16446: PUSH
16447: LD_INT 25
16449: PUSH
16450: LD_INT 26
16452: PUSH
16453: LD_INT 27
16455: PUSH
16456: LD_INT 28
16458: PUSH
16459: LD_INT 29
16461: PUSH
16462: LD_INT 30
16464: PUSH
16465: LD_INT 31
16467: PUSH
16468: LD_INT 32
16470: PUSH
16471: LD_INT 33
16473: PUSH
16474: LD_INT 34
16476: PUSH
16477: LD_INT 35
16479: PUSH
16480: LD_INT 36
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 101
16523: PUSH
16524: LD_INT 102
16526: PUSH
16527: LD_INT 103
16529: PUSH
16530: LD_INT 104
16532: PUSH
16533: LD_INT 105
16535: PUSH
16536: LD_INT 106
16538: PUSH
16539: LD_INT 107
16541: PUSH
16542: LD_INT 108
16544: PUSH
16545: LD_INT 109
16547: PUSH
16548: LD_INT 110
16550: PUSH
16551: LD_INT 111
16553: PUSH
16554: LD_INT 112
16556: PUSH
16557: LD_INT 113
16559: PUSH
16560: LD_INT 114
16562: PUSH
16563: LD_INT 115
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: ST_TO_ADDR
16587: GO 16590
16589: POP
// end else
16590: GO 16809
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16592: LD_ADDR_VAR 0 1
16596: PUSH
16597: LD_INT 1
16599: PUSH
16600: LD_INT 2
16602: PUSH
16603: LD_INT 3
16605: PUSH
16606: LD_INT 4
16608: PUSH
16609: LD_INT 5
16611: PUSH
16612: LD_INT 6
16614: PUSH
16615: LD_INT 7
16617: PUSH
16618: LD_INT 8
16620: PUSH
16621: LD_INT 9
16623: PUSH
16624: LD_INT 10
16626: PUSH
16627: LD_INT 11
16629: PUSH
16630: LD_INT 12
16632: PUSH
16633: LD_INT 13
16635: PUSH
16636: LD_INT 14
16638: PUSH
16639: LD_INT 15
16641: PUSH
16642: LD_INT 16
16644: PUSH
16645: LD_INT 17
16647: PUSH
16648: LD_INT 18
16650: PUSH
16651: LD_INT 19
16653: PUSH
16654: LD_INT 20
16656: PUSH
16657: LD_INT 21
16659: PUSH
16660: LD_INT 22
16662: PUSH
16663: LD_INT 23
16665: PUSH
16666: LD_INT 24
16668: PUSH
16669: LD_INT 25
16671: PUSH
16672: LD_INT 26
16674: PUSH
16675: LD_INT 27
16677: PUSH
16678: LD_INT 28
16680: PUSH
16681: LD_INT 29
16683: PUSH
16684: LD_INT 30
16686: PUSH
16687: LD_INT 31
16689: PUSH
16690: LD_INT 32
16692: PUSH
16693: LD_INT 33
16695: PUSH
16696: LD_INT 34
16698: PUSH
16699: LD_INT 35
16701: PUSH
16702: LD_INT 36
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 101
16745: PUSH
16746: LD_INT 102
16748: PUSH
16749: LD_INT 103
16751: PUSH
16752: LD_INT 104
16754: PUSH
16755: LD_INT 105
16757: PUSH
16758: LD_INT 106
16760: PUSH
16761: LD_INT 107
16763: PUSH
16764: LD_INT 108
16766: PUSH
16767: LD_INT 109
16769: PUSH
16770: LD_INT 110
16772: PUSH
16773: LD_INT 111
16775: PUSH
16776: LD_INT 112
16778: PUSH
16779: LD_INT 113
16781: PUSH
16782: LD_INT 114
16784: PUSH
16785: LD_INT 115
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: ST_TO_ADDR
// if result then
16809: LD_VAR 0 1
16813: IFFALSE 17102
// begin normal :=  ;
16815: LD_ADDR_VAR 0 3
16819: PUSH
16820: LD_STRING 
16822: ST_TO_ADDR
// hardcore :=  ;
16823: LD_ADDR_VAR 0 4
16827: PUSH
16828: LD_STRING 
16830: ST_TO_ADDR
// for i = 1 to normalCounter do
16831: LD_ADDR_VAR 0 5
16835: PUSH
16836: DOUBLE
16837: LD_INT 1
16839: DEC
16840: ST_TO_ADDR
16841: LD_EXP 57
16845: PUSH
16846: FOR_TO
16847: IFFALSE 16948
// begin tmp := 0 ;
16849: LD_ADDR_VAR 0 2
16853: PUSH
16854: LD_STRING 0
16856: ST_TO_ADDR
// if result [ 1 ] then
16857: LD_VAR 0 1
16861: PUSH
16862: LD_INT 1
16864: ARRAY
16865: IFFALSE 16930
// if result [ 1 ] [ 1 ] = i then
16867: LD_VAR 0 1
16871: PUSH
16872: LD_INT 1
16874: ARRAY
16875: PUSH
16876: LD_INT 1
16878: ARRAY
16879: PUSH
16880: LD_VAR 0 5
16884: EQUAL
16885: IFFALSE 16930
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16887: LD_ADDR_VAR 0 1
16891: PUSH
16892: LD_VAR 0 1
16896: PPUSH
16897: LD_INT 1
16899: PPUSH
16900: LD_VAR 0 1
16904: PUSH
16905: LD_INT 1
16907: ARRAY
16908: PPUSH
16909: LD_INT 1
16911: PPUSH
16912: CALL_OW 3
16916: PPUSH
16917: CALL_OW 1
16921: ST_TO_ADDR
// tmp := 1 ;
16922: LD_ADDR_VAR 0 2
16926: PUSH
16927: LD_STRING 1
16929: ST_TO_ADDR
// end ; normal := normal & tmp ;
16930: LD_ADDR_VAR 0 3
16934: PUSH
16935: LD_VAR 0 3
16939: PUSH
16940: LD_VAR 0 2
16944: STR
16945: ST_TO_ADDR
// end ;
16946: GO 16846
16948: POP
16949: POP
// for i = 1 to hardcoreCounter do
16950: LD_ADDR_VAR 0 5
16954: PUSH
16955: DOUBLE
16956: LD_INT 1
16958: DEC
16959: ST_TO_ADDR
16960: LD_EXP 58
16964: PUSH
16965: FOR_TO
16966: IFFALSE 17071
// begin tmp := 0 ;
16968: LD_ADDR_VAR 0 2
16972: PUSH
16973: LD_STRING 0
16975: ST_TO_ADDR
// if result [ 2 ] then
16976: LD_VAR 0 1
16980: PUSH
16981: LD_INT 2
16983: ARRAY
16984: IFFALSE 17053
// if result [ 2 ] [ 1 ] = 100 + i then
16986: LD_VAR 0 1
16990: PUSH
16991: LD_INT 2
16993: ARRAY
16994: PUSH
16995: LD_INT 1
16997: ARRAY
16998: PUSH
16999: LD_INT 100
17001: PUSH
17002: LD_VAR 0 5
17006: PLUS
17007: EQUAL
17008: IFFALSE 17053
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17010: LD_ADDR_VAR 0 1
17014: PUSH
17015: LD_VAR 0 1
17019: PPUSH
17020: LD_INT 2
17022: PPUSH
17023: LD_VAR 0 1
17027: PUSH
17028: LD_INT 2
17030: ARRAY
17031: PPUSH
17032: LD_INT 1
17034: PPUSH
17035: CALL_OW 3
17039: PPUSH
17040: CALL_OW 1
17044: ST_TO_ADDR
// tmp := 1 ;
17045: LD_ADDR_VAR 0 2
17049: PUSH
17050: LD_STRING 1
17052: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17053: LD_ADDR_VAR 0 4
17057: PUSH
17058: LD_VAR 0 4
17062: PUSH
17063: LD_VAR 0 2
17067: STR
17068: ST_TO_ADDR
// end ;
17069: GO 16965
17071: POP
17072: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17073: LD_STRING getStreamItemsFromMission("
17075: PUSH
17076: LD_VAR 0 3
17080: STR
17081: PUSH
17082: LD_STRING ","
17084: STR
17085: PUSH
17086: LD_VAR 0 4
17090: STR
17091: PUSH
17092: LD_STRING ")
17094: STR
17095: PPUSH
17096: CALL_OW 559
// end else
17100: GO 17109
// ToLua ( getStreamItemsFromMission("","") ) ;
17102: LD_STRING getStreamItemsFromMission("","")
17104: PPUSH
17105: CALL_OW 559
// end ;
17109: LD_VAR 0 1
17113: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
17114: LD_VAR 0 2
17118: PUSH
17119: LD_INT 100
17121: EQUAL
17122: IFFALSE 18071
// begin if not StreamModeActive then
17124: LD_EXP 56
17128: NOT
17129: IFFALSE 17139
// StreamModeActive := true ;
17131: LD_ADDR_EXP 56
17135: PUSH
17136: LD_INT 1
17138: ST_TO_ADDR
// if p3 = 0 then
17139: LD_VAR 0 3
17143: PUSH
17144: LD_INT 0
17146: EQUAL
17147: IFFALSE 17153
// InitStreamMode ;
17149: CALL 13192 0 0
// if p3 = 1 then
17153: LD_VAR 0 3
17157: PUSH
17158: LD_INT 1
17160: EQUAL
17161: IFFALSE 17171
// sRocket := true ;
17163: LD_ADDR_EXP 61
17167: PUSH
17168: LD_INT 1
17170: ST_TO_ADDR
// if p3 = 2 then
17171: LD_VAR 0 3
17175: PUSH
17176: LD_INT 2
17178: EQUAL
17179: IFFALSE 17189
// sSpeed := true ;
17181: LD_ADDR_EXP 60
17185: PUSH
17186: LD_INT 1
17188: ST_TO_ADDR
// if p3 = 3 then
17189: LD_VAR 0 3
17193: PUSH
17194: LD_INT 3
17196: EQUAL
17197: IFFALSE 17207
// sEngine := true ;
17199: LD_ADDR_EXP 62
17203: PUSH
17204: LD_INT 1
17206: ST_TO_ADDR
// if p3 = 4 then
17207: LD_VAR 0 3
17211: PUSH
17212: LD_INT 4
17214: EQUAL
17215: IFFALSE 17225
// sSpec := true ;
17217: LD_ADDR_EXP 59
17221: PUSH
17222: LD_INT 1
17224: ST_TO_ADDR
// if p3 = 5 then
17225: LD_VAR 0 3
17229: PUSH
17230: LD_INT 5
17232: EQUAL
17233: IFFALSE 17243
// sLevel := true ;
17235: LD_ADDR_EXP 63
17239: PUSH
17240: LD_INT 1
17242: ST_TO_ADDR
// if p3 = 6 then
17243: LD_VAR 0 3
17247: PUSH
17248: LD_INT 6
17250: EQUAL
17251: IFFALSE 17261
// sArmoury := true ;
17253: LD_ADDR_EXP 64
17257: PUSH
17258: LD_INT 1
17260: ST_TO_ADDR
// if p3 = 7 then
17261: LD_VAR 0 3
17265: PUSH
17266: LD_INT 7
17268: EQUAL
17269: IFFALSE 17279
// sRadar := true ;
17271: LD_ADDR_EXP 65
17275: PUSH
17276: LD_INT 1
17278: ST_TO_ADDR
// if p3 = 8 then
17279: LD_VAR 0 3
17283: PUSH
17284: LD_INT 8
17286: EQUAL
17287: IFFALSE 17297
// sBunker := true ;
17289: LD_ADDR_EXP 66
17293: PUSH
17294: LD_INT 1
17296: ST_TO_ADDR
// if p3 = 9 then
17297: LD_VAR 0 3
17301: PUSH
17302: LD_INT 9
17304: EQUAL
17305: IFFALSE 17315
// sHack := true ;
17307: LD_ADDR_EXP 67
17311: PUSH
17312: LD_INT 1
17314: ST_TO_ADDR
// if p3 = 10 then
17315: LD_VAR 0 3
17319: PUSH
17320: LD_INT 10
17322: EQUAL
17323: IFFALSE 17333
// sFire := true ;
17325: LD_ADDR_EXP 68
17329: PUSH
17330: LD_INT 1
17332: ST_TO_ADDR
// if p3 = 11 then
17333: LD_VAR 0 3
17337: PUSH
17338: LD_INT 11
17340: EQUAL
17341: IFFALSE 17351
// sRefresh := true ;
17343: LD_ADDR_EXP 69
17347: PUSH
17348: LD_INT 1
17350: ST_TO_ADDR
// if p3 = 12 then
17351: LD_VAR 0 3
17355: PUSH
17356: LD_INT 12
17358: EQUAL
17359: IFFALSE 17369
// sExp := true ;
17361: LD_ADDR_EXP 70
17365: PUSH
17366: LD_INT 1
17368: ST_TO_ADDR
// if p3 = 13 then
17369: LD_VAR 0 3
17373: PUSH
17374: LD_INT 13
17376: EQUAL
17377: IFFALSE 17387
// sDepot := true ;
17379: LD_ADDR_EXP 71
17383: PUSH
17384: LD_INT 1
17386: ST_TO_ADDR
// if p3 = 14 then
17387: LD_VAR 0 3
17391: PUSH
17392: LD_INT 14
17394: EQUAL
17395: IFFALSE 17405
// sFlag := true ;
17397: LD_ADDR_EXP 72
17401: PUSH
17402: LD_INT 1
17404: ST_TO_ADDR
// if p3 = 15 then
17405: LD_VAR 0 3
17409: PUSH
17410: LD_INT 15
17412: EQUAL
17413: IFFALSE 17423
// sKamikadze := true ;
17415: LD_ADDR_EXP 80
17419: PUSH
17420: LD_INT 1
17422: ST_TO_ADDR
// if p3 = 16 then
17423: LD_VAR 0 3
17427: PUSH
17428: LD_INT 16
17430: EQUAL
17431: IFFALSE 17441
// sTroll := true ;
17433: LD_ADDR_EXP 81
17437: PUSH
17438: LD_INT 1
17440: ST_TO_ADDR
// if p3 = 17 then
17441: LD_VAR 0 3
17445: PUSH
17446: LD_INT 17
17448: EQUAL
17449: IFFALSE 17459
// sSlow := true ;
17451: LD_ADDR_EXP 82
17455: PUSH
17456: LD_INT 1
17458: ST_TO_ADDR
// if p3 = 18 then
17459: LD_VAR 0 3
17463: PUSH
17464: LD_INT 18
17466: EQUAL
17467: IFFALSE 17477
// sLack := true ;
17469: LD_ADDR_EXP 83
17473: PUSH
17474: LD_INT 1
17476: ST_TO_ADDR
// if p3 = 19 then
17477: LD_VAR 0 3
17481: PUSH
17482: LD_INT 19
17484: EQUAL
17485: IFFALSE 17495
// sTank := true ;
17487: LD_ADDR_EXP 85
17491: PUSH
17492: LD_INT 1
17494: ST_TO_ADDR
// if p3 = 20 then
17495: LD_VAR 0 3
17499: PUSH
17500: LD_INT 20
17502: EQUAL
17503: IFFALSE 17513
// sRemote := true ;
17505: LD_ADDR_EXP 86
17509: PUSH
17510: LD_INT 1
17512: ST_TO_ADDR
// if p3 = 21 then
17513: LD_VAR 0 3
17517: PUSH
17518: LD_INT 21
17520: EQUAL
17521: IFFALSE 17531
// sPowell := true ;
17523: LD_ADDR_EXP 87
17527: PUSH
17528: LD_INT 1
17530: ST_TO_ADDR
// if p3 = 22 then
17531: LD_VAR 0 3
17535: PUSH
17536: LD_INT 22
17538: EQUAL
17539: IFFALSE 17549
// sTeleport := true ;
17541: LD_ADDR_EXP 90
17545: PUSH
17546: LD_INT 1
17548: ST_TO_ADDR
// if p3 = 23 then
17549: LD_VAR 0 3
17553: PUSH
17554: LD_INT 23
17556: EQUAL
17557: IFFALSE 17567
// sOilTower := true ;
17559: LD_ADDR_EXP 92
17563: PUSH
17564: LD_INT 1
17566: ST_TO_ADDR
// if p3 = 24 then
17567: LD_VAR 0 3
17571: PUSH
17572: LD_INT 24
17574: EQUAL
17575: IFFALSE 17585
// sShovel := true ;
17577: LD_ADDR_EXP 93
17581: PUSH
17582: LD_INT 1
17584: ST_TO_ADDR
// if p3 = 25 then
17585: LD_VAR 0 3
17589: PUSH
17590: LD_INT 25
17592: EQUAL
17593: IFFALSE 17603
// sSheik := true ;
17595: LD_ADDR_EXP 94
17599: PUSH
17600: LD_INT 1
17602: ST_TO_ADDR
// if p3 = 26 then
17603: LD_VAR 0 3
17607: PUSH
17608: LD_INT 26
17610: EQUAL
17611: IFFALSE 17621
// sEarthquake := true ;
17613: LD_ADDR_EXP 96
17617: PUSH
17618: LD_INT 1
17620: ST_TO_ADDR
// if p3 = 27 then
17621: LD_VAR 0 3
17625: PUSH
17626: LD_INT 27
17628: EQUAL
17629: IFFALSE 17639
// sAI := true ;
17631: LD_ADDR_EXP 97
17635: PUSH
17636: LD_INT 1
17638: ST_TO_ADDR
// if p3 = 28 then
17639: LD_VAR 0 3
17643: PUSH
17644: LD_INT 28
17646: EQUAL
17647: IFFALSE 17657
// sCargo := true ;
17649: LD_ADDR_EXP 100
17653: PUSH
17654: LD_INT 1
17656: ST_TO_ADDR
// if p3 = 29 then
17657: LD_VAR 0 3
17661: PUSH
17662: LD_INT 29
17664: EQUAL
17665: IFFALSE 17675
// sDLaser := true ;
17667: LD_ADDR_EXP 101
17671: PUSH
17672: LD_INT 1
17674: ST_TO_ADDR
// if p3 = 30 then
17675: LD_VAR 0 3
17679: PUSH
17680: LD_INT 30
17682: EQUAL
17683: IFFALSE 17693
// sExchange := true ;
17685: LD_ADDR_EXP 102
17689: PUSH
17690: LD_INT 1
17692: ST_TO_ADDR
// if p3 = 31 then
17693: LD_VAR 0 3
17697: PUSH
17698: LD_INT 31
17700: EQUAL
17701: IFFALSE 17711
// sFac := true ;
17703: LD_ADDR_EXP 103
17707: PUSH
17708: LD_INT 1
17710: ST_TO_ADDR
// if p3 = 32 then
17711: LD_VAR 0 3
17715: PUSH
17716: LD_INT 32
17718: EQUAL
17719: IFFALSE 17729
// sPower := true ;
17721: LD_ADDR_EXP 104
17725: PUSH
17726: LD_INT 1
17728: ST_TO_ADDR
// if p3 = 33 then
17729: LD_VAR 0 3
17733: PUSH
17734: LD_INT 33
17736: EQUAL
17737: IFFALSE 17747
// sRandom := true ;
17739: LD_ADDR_EXP 105
17743: PUSH
17744: LD_INT 1
17746: ST_TO_ADDR
// if p3 = 34 then
17747: LD_VAR 0 3
17751: PUSH
17752: LD_INT 34
17754: EQUAL
17755: IFFALSE 17765
// sShield := true ;
17757: LD_ADDR_EXP 106
17761: PUSH
17762: LD_INT 1
17764: ST_TO_ADDR
// if p3 = 35 then
17765: LD_VAR 0 3
17769: PUSH
17770: LD_INT 35
17772: EQUAL
17773: IFFALSE 17783
// sTime := true ;
17775: LD_ADDR_EXP 107
17779: PUSH
17780: LD_INT 1
17782: ST_TO_ADDR
// if p3 = 36 then
17783: LD_VAR 0 3
17787: PUSH
17788: LD_INT 36
17790: EQUAL
17791: IFFALSE 17801
// sTools := true ;
17793: LD_ADDR_EXP 108
17797: PUSH
17798: LD_INT 1
17800: ST_TO_ADDR
// if p3 = 101 then
17801: LD_VAR 0 3
17805: PUSH
17806: LD_INT 101
17808: EQUAL
17809: IFFALSE 17819
// sSold := true ;
17811: LD_ADDR_EXP 73
17815: PUSH
17816: LD_INT 1
17818: ST_TO_ADDR
// if p3 = 102 then
17819: LD_VAR 0 3
17823: PUSH
17824: LD_INT 102
17826: EQUAL
17827: IFFALSE 17837
// sDiff := true ;
17829: LD_ADDR_EXP 74
17833: PUSH
17834: LD_INT 1
17836: ST_TO_ADDR
// if p3 = 103 then
17837: LD_VAR 0 3
17841: PUSH
17842: LD_INT 103
17844: EQUAL
17845: IFFALSE 17855
// sFog := true ;
17847: LD_ADDR_EXP 77
17851: PUSH
17852: LD_INT 1
17854: ST_TO_ADDR
// if p3 = 104 then
17855: LD_VAR 0 3
17859: PUSH
17860: LD_INT 104
17862: EQUAL
17863: IFFALSE 17873
// sReset := true ;
17865: LD_ADDR_EXP 78
17869: PUSH
17870: LD_INT 1
17872: ST_TO_ADDR
// if p3 = 105 then
17873: LD_VAR 0 3
17877: PUSH
17878: LD_INT 105
17880: EQUAL
17881: IFFALSE 17891
// sSun := true ;
17883: LD_ADDR_EXP 79
17887: PUSH
17888: LD_INT 1
17890: ST_TO_ADDR
// if p3 = 106 then
17891: LD_VAR 0 3
17895: PUSH
17896: LD_INT 106
17898: EQUAL
17899: IFFALSE 17909
// sTiger := true ;
17901: LD_ADDR_EXP 75
17905: PUSH
17906: LD_INT 1
17908: ST_TO_ADDR
// if p3 = 107 then
17909: LD_VAR 0 3
17913: PUSH
17914: LD_INT 107
17916: EQUAL
17917: IFFALSE 17927
// sBomb := true ;
17919: LD_ADDR_EXP 76
17923: PUSH
17924: LD_INT 1
17926: ST_TO_ADDR
// if p3 = 108 then
17927: LD_VAR 0 3
17931: PUSH
17932: LD_INT 108
17934: EQUAL
17935: IFFALSE 17945
// sWound := true ;
17937: LD_ADDR_EXP 84
17941: PUSH
17942: LD_INT 1
17944: ST_TO_ADDR
// if p3 = 109 then
17945: LD_VAR 0 3
17949: PUSH
17950: LD_INT 109
17952: EQUAL
17953: IFFALSE 17963
// sBetray := true ;
17955: LD_ADDR_EXP 88
17959: PUSH
17960: LD_INT 1
17962: ST_TO_ADDR
// if p3 = 110 then
17963: LD_VAR 0 3
17967: PUSH
17968: LD_INT 110
17970: EQUAL
17971: IFFALSE 17981
// sContamin := true ;
17973: LD_ADDR_EXP 89
17977: PUSH
17978: LD_INT 1
17980: ST_TO_ADDR
// if p3 = 111 then
17981: LD_VAR 0 3
17985: PUSH
17986: LD_INT 111
17988: EQUAL
17989: IFFALSE 17999
// sOil := true ;
17991: LD_ADDR_EXP 91
17995: PUSH
17996: LD_INT 1
17998: ST_TO_ADDR
// if p3 = 112 then
17999: LD_VAR 0 3
18003: PUSH
18004: LD_INT 112
18006: EQUAL
18007: IFFALSE 18017
// sStu := true ;
18009: LD_ADDR_EXP 95
18013: PUSH
18014: LD_INT 1
18016: ST_TO_ADDR
// if p3 = 113 then
18017: LD_VAR 0 3
18021: PUSH
18022: LD_INT 113
18024: EQUAL
18025: IFFALSE 18035
// sBazooka := true ;
18027: LD_ADDR_EXP 98
18031: PUSH
18032: LD_INT 1
18034: ST_TO_ADDR
// if p3 = 114 then
18035: LD_VAR 0 3
18039: PUSH
18040: LD_INT 114
18042: EQUAL
18043: IFFALSE 18053
// sMortar := true ;
18045: LD_ADDR_EXP 99
18049: PUSH
18050: LD_INT 1
18052: ST_TO_ADDR
// if p3 = 115 then
18053: LD_VAR 0 3
18057: PUSH
18058: LD_INT 115
18060: EQUAL
18061: IFFALSE 18071
// sRanger := true ;
18063: LD_ADDR_EXP 109
18067: PUSH
18068: LD_INT 1
18070: ST_TO_ADDR
// end ; end ;
18071: PPOPN 6
18073: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18074: LD_EXP 56
18078: PUSH
18079: LD_EXP 61
18083: AND
18084: IFFALSE 18208
18086: GO 18088
18088: DISABLE
18089: LD_INT 0
18091: PPUSH
18092: PPUSH
// begin enable ;
18093: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18094: LD_ADDR_VAR 0 2
18098: PUSH
18099: LD_INT 22
18101: PUSH
18102: LD_OWVAR 2
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 2
18113: PUSH
18114: LD_INT 34
18116: PUSH
18117: LD_INT 7
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 34
18126: PUSH
18127: LD_INT 45
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 34
18136: PUSH
18137: LD_INT 28
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 34
18146: PUSH
18147: LD_INT 47
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PPUSH
18165: CALL_OW 69
18169: ST_TO_ADDR
// if not tmp then
18170: LD_VAR 0 2
18174: NOT
18175: IFFALSE 18179
// exit ;
18177: GO 18208
// for i in tmp do
18179: LD_ADDR_VAR 0 1
18183: PUSH
18184: LD_VAR 0 2
18188: PUSH
18189: FOR_IN
18190: IFFALSE 18206
// begin SetLives ( i , 0 ) ;
18192: LD_VAR 0 1
18196: PPUSH
18197: LD_INT 0
18199: PPUSH
18200: CALL_OW 234
// end ;
18204: GO 18189
18206: POP
18207: POP
// end ;
18208: PPOPN 2
18210: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18211: LD_EXP 56
18215: PUSH
18216: LD_EXP 62
18220: AND
18221: IFFALSE 18305
18223: GO 18225
18225: DISABLE
18226: LD_INT 0
18228: PPUSH
18229: PPUSH
// begin enable ;
18230: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18231: LD_ADDR_VAR 0 2
18235: PUSH
18236: LD_INT 22
18238: PUSH
18239: LD_OWVAR 2
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 32
18250: PUSH
18251: LD_INT 3
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PPUSH
18262: CALL_OW 69
18266: ST_TO_ADDR
// if not tmp then
18267: LD_VAR 0 2
18271: NOT
18272: IFFALSE 18276
// exit ;
18274: GO 18305
// for i in tmp do
18276: LD_ADDR_VAR 0 1
18280: PUSH
18281: LD_VAR 0 2
18285: PUSH
18286: FOR_IN
18287: IFFALSE 18303
// begin SetLives ( i , 0 ) ;
18289: LD_VAR 0 1
18293: PPUSH
18294: LD_INT 0
18296: PPUSH
18297: CALL_OW 234
// end ;
18301: GO 18286
18303: POP
18304: POP
// end ;
18305: PPOPN 2
18307: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18308: LD_EXP 56
18312: PUSH
18313: LD_EXP 59
18317: AND
18318: IFFALSE 18411
18320: GO 18322
18322: DISABLE
18323: LD_INT 0
18325: PPUSH
// begin enable ;
18326: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18327: LD_ADDR_VAR 0 1
18331: PUSH
18332: LD_INT 22
18334: PUSH
18335: LD_OWVAR 2
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 2
18346: PUSH
18347: LD_INT 25
18349: PUSH
18350: LD_INT 5
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 25
18359: PUSH
18360: LD_INT 9
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 25
18369: PUSH
18370: LD_INT 8
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PPUSH
18387: CALL_OW 69
18391: PUSH
18392: FOR_IN
18393: IFFALSE 18409
// begin SetClass ( i , 1 ) ;
18395: LD_VAR 0 1
18399: PPUSH
18400: LD_INT 1
18402: PPUSH
18403: CALL_OW 336
// end ;
18407: GO 18392
18409: POP
18410: POP
// end ;
18411: PPOPN 1
18413: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18414: LD_EXP 56
18418: PUSH
18419: LD_EXP 60
18423: AND
18424: PUSH
18425: LD_OWVAR 65
18429: PUSH
18430: LD_INT 7
18432: LESS
18433: AND
18434: IFFALSE 18448
18436: GO 18438
18438: DISABLE
// begin enable ;
18439: ENABLE
// game_speed := 7 ;
18440: LD_ADDR_OWVAR 65
18444: PUSH
18445: LD_INT 7
18447: ST_TO_ADDR
// end ;
18448: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18449: LD_EXP 56
18453: PUSH
18454: LD_EXP 63
18458: AND
18459: IFFALSE 18661
18461: GO 18463
18463: DISABLE
18464: LD_INT 0
18466: PPUSH
18467: PPUSH
18468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18469: LD_ADDR_VAR 0 3
18473: PUSH
18474: LD_INT 81
18476: PUSH
18477: LD_OWVAR 2
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 21
18488: PUSH
18489: LD_INT 1
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PPUSH
18500: CALL_OW 69
18504: ST_TO_ADDR
// if not tmp then
18505: LD_VAR 0 3
18509: NOT
18510: IFFALSE 18514
// exit ;
18512: GO 18661
// if tmp > 5 then
18514: LD_VAR 0 3
18518: PUSH
18519: LD_INT 5
18521: GREATER
18522: IFFALSE 18534
// k := 5 else
18524: LD_ADDR_VAR 0 2
18528: PUSH
18529: LD_INT 5
18531: ST_TO_ADDR
18532: GO 18544
// k := tmp ;
18534: LD_ADDR_VAR 0 2
18538: PUSH
18539: LD_VAR 0 3
18543: ST_TO_ADDR
// for i := 1 to k do
18544: LD_ADDR_VAR 0 1
18548: PUSH
18549: DOUBLE
18550: LD_INT 1
18552: DEC
18553: ST_TO_ADDR
18554: LD_VAR 0 2
18558: PUSH
18559: FOR_TO
18560: IFFALSE 18659
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18562: LD_VAR 0 3
18566: PUSH
18567: LD_VAR 0 1
18571: ARRAY
18572: PPUSH
18573: LD_VAR 0 1
18577: PUSH
18578: LD_INT 4
18580: MOD
18581: PUSH
18582: LD_INT 1
18584: PLUS
18585: PPUSH
18586: CALL_OW 259
18590: PUSH
18591: LD_INT 10
18593: LESS
18594: IFFALSE 18657
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18596: LD_VAR 0 3
18600: PUSH
18601: LD_VAR 0 1
18605: ARRAY
18606: PPUSH
18607: LD_VAR 0 1
18611: PUSH
18612: LD_INT 4
18614: MOD
18615: PUSH
18616: LD_INT 1
18618: PLUS
18619: PPUSH
18620: LD_VAR 0 3
18624: PUSH
18625: LD_VAR 0 1
18629: ARRAY
18630: PPUSH
18631: LD_VAR 0 1
18635: PUSH
18636: LD_INT 4
18638: MOD
18639: PUSH
18640: LD_INT 1
18642: PLUS
18643: PPUSH
18644: CALL_OW 259
18648: PUSH
18649: LD_INT 1
18651: PLUS
18652: PPUSH
18653: CALL_OW 237
18657: GO 18559
18659: POP
18660: POP
// end ;
18661: PPOPN 3
18663: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18664: LD_EXP 56
18668: PUSH
18669: LD_EXP 64
18673: AND
18674: IFFALSE 18694
18676: GO 18678
18678: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18679: LD_INT 4
18681: PPUSH
18682: LD_OWVAR 2
18686: PPUSH
18687: LD_INT 0
18689: PPUSH
18690: CALL_OW 324
18694: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18695: LD_EXP 56
18699: PUSH
18700: LD_EXP 93
18704: AND
18705: IFFALSE 18725
18707: GO 18709
18709: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18710: LD_INT 19
18712: PPUSH
18713: LD_OWVAR 2
18717: PPUSH
18718: LD_INT 0
18720: PPUSH
18721: CALL_OW 324
18725: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18726: LD_EXP 56
18730: PUSH
18731: LD_EXP 65
18735: AND
18736: IFFALSE 18838
18738: GO 18740
18740: DISABLE
18741: LD_INT 0
18743: PPUSH
18744: PPUSH
// begin enable ;
18745: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18746: LD_ADDR_VAR 0 2
18750: PUSH
18751: LD_INT 22
18753: PUSH
18754: LD_OWVAR 2
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 2
18765: PUSH
18766: LD_INT 34
18768: PUSH
18769: LD_INT 11
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 34
18778: PUSH
18779: LD_INT 30
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PPUSH
18795: CALL_OW 69
18799: ST_TO_ADDR
// if not tmp then
18800: LD_VAR 0 2
18804: NOT
18805: IFFALSE 18809
// exit ;
18807: GO 18838
// for i in tmp do
18809: LD_ADDR_VAR 0 1
18813: PUSH
18814: LD_VAR 0 2
18818: PUSH
18819: FOR_IN
18820: IFFALSE 18836
// begin SetLives ( i , 0 ) ;
18822: LD_VAR 0 1
18826: PPUSH
18827: LD_INT 0
18829: PPUSH
18830: CALL_OW 234
// end ;
18834: GO 18819
18836: POP
18837: POP
// end ;
18838: PPOPN 2
18840: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18841: LD_EXP 56
18845: PUSH
18846: LD_EXP 66
18850: AND
18851: IFFALSE 18871
18853: GO 18855
18855: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18856: LD_INT 32
18858: PPUSH
18859: LD_OWVAR 2
18863: PPUSH
18864: LD_INT 0
18866: PPUSH
18867: CALL_OW 324
18871: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18872: LD_EXP 56
18876: PUSH
18877: LD_EXP 67
18881: AND
18882: IFFALSE 19063
18884: GO 18886
18886: DISABLE
18887: LD_INT 0
18889: PPUSH
18890: PPUSH
18891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18892: LD_ADDR_VAR 0 2
18896: PUSH
18897: LD_INT 22
18899: PUSH
18900: LD_OWVAR 2
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 33
18911: PUSH
18912: LD_INT 3
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PPUSH
18923: CALL_OW 69
18927: ST_TO_ADDR
// if not tmp then
18928: LD_VAR 0 2
18932: NOT
18933: IFFALSE 18937
// exit ;
18935: GO 19063
// side := 0 ;
18937: LD_ADDR_VAR 0 3
18941: PUSH
18942: LD_INT 0
18944: ST_TO_ADDR
// for i := 1 to 8 do
18945: LD_ADDR_VAR 0 1
18949: PUSH
18950: DOUBLE
18951: LD_INT 1
18953: DEC
18954: ST_TO_ADDR
18955: LD_INT 8
18957: PUSH
18958: FOR_TO
18959: IFFALSE 19007
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18961: LD_OWVAR 2
18965: PUSH
18966: LD_VAR 0 1
18970: NONEQUAL
18971: PUSH
18972: LD_OWVAR 2
18976: PPUSH
18977: LD_VAR 0 1
18981: PPUSH
18982: CALL_OW 81
18986: PUSH
18987: LD_INT 2
18989: EQUAL
18990: AND
18991: IFFALSE 19005
// begin side := i ;
18993: LD_ADDR_VAR 0 3
18997: PUSH
18998: LD_VAR 0 1
19002: ST_TO_ADDR
// break ;
19003: GO 19007
// end ;
19005: GO 18958
19007: POP
19008: POP
// if not side then
19009: LD_VAR 0 3
19013: NOT
19014: IFFALSE 19018
// exit ;
19016: GO 19063
// for i := 1 to tmp do
19018: LD_ADDR_VAR 0 1
19022: PUSH
19023: DOUBLE
19024: LD_INT 1
19026: DEC
19027: ST_TO_ADDR
19028: LD_VAR 0 2
19032: PUSH
19033: FOR_TO
19034: IFFALSE 19061
// if Prob ( 60 ) then
19036: LD_INT 60
19038: PPUSH
19039: CALL_OW 13
19043: IFFALSE 19059
// SetSide ( i , side ) ;
19045: LD_VAR 0 1
19049: PPUSH
19050: LD_VAR 0 3
19054: PPUSH
19055: CALL_OW 235
19059: GO 19033
19061: POP
19062: POP
// end ;
19063: PPOPN 3
19065: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19066: LD_EXP 56
19070: PUSH
19071: LD_EXP 69
19075: AND
19076: IFFALSE 19195
19078: GO 19080
19080: DISABLE
19081: LD_INT 0
19083: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19084: LD_ADDR_VAR 0 1
19088: PUSH
19089: LD_INT 22
19091: PUSH
19092: LD_OWVAR 2
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 21
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 3
19113: PUSH
19114: LD_INT 23
19116: PUSH
19117: LD_INT 0
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: PPUSH
19133: CALL_OW 69
19137: PUSH
19138: FOR_IN
19139: IFFALSE 19193
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19141: LD_VAR 0 1
19145: PPUSH
19146: CALL_OW 257
19150: PUSH
19151: LD_INT 1
19153: PUSH
19154: LD_INT 2
19156: PUSH
19157: LD_INT 3
19159: PUSH
19160: LD_INT 4
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: IN
19169: IFFALSE 19191
// SetClass ( un , rand ( 1 , 4 ) ) ;
19171: LD_VAR 0 1
19175: PPUSH
19176: LD_INT 1
19178: PPUSH
19179: LD_INT 4
19181: PPUSH
19182: CALL_OW 12
19186: PPUSH
19187: CALL_OW 336
19191: GO 19138
19193: POP
19194: POP
// end ;
19195: PPOPN 1
19197: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19198: LD_EXP 56
19202: PUSH
19203: LD_EXP 68
19207: AND
19208: IFFALSE 19287
19210: GO 19212
19212: DISABLE
19213: LD_INT 0
19215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19216: LD_ADDR_VAR 0 1
19220: PUSH
19221: LD_INT 22
19223: PUSH
19224: LD_OWVAR 2
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 21
19235: PUSH
19236: LD_INT 3
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PPUSH
19247: CALL_OW 69
19251: ST_TO_ADDR
// if not tmp then
19252: LD_VAR 0 1
19256: NOT
19257: IFFALSE 19261
// exit ;
19259: GO 19287
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19261: LD_VAR 0 1
19265: PUSH
19266: LD_INT 1
19268: PPUSH
19269: LD_VAR 0 1
19273: PPUSH
19274: CALL_OW 12
19278: ARRAY
19279: PPUSH
19280: LD_INT 100
19282: PPUSH
19283: CALL_OW 234
// end ;
19287: PPOPN 1
19289: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19290: LD_EXP 56
19294: PUSH
19295: LD_EXP 70
19299: AND
19300: IFFALSE 19398
19302: GO 19304
19304: DISABLE
19305: LD_INT 0
19307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19308: LD_ADDR_VAR 0 1
19312: PUSH
19313: LD_INT 22
19315: PUSH
19316: LD_OWVAR 2
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 21
19327: PUSH
19328: LD_INT 1
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PPUSH
19339: CALL_OW 69
19343: ST_TO_ADDR
// if not tmp then
19344: LD_VAR 0 1
19348: NOT
19349: IFFALSE 19353
// exit ;
19351: GO 19398
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19353: LD_VAR 0 1
19357: PUSH
19358: LD_INT 1
19360: PPUSH
19361: LD_VAR 0 1
19365: PPUSH
19366: CALL_OW 12
19370: ARRAY
19371: PPUSH
19372: LD_INT 1
19374: PPUSH
19375: LD_INT 4
19377: PPUSH
19378: CALL_OW 12
19382: PPUSH
19383: LD_INT 3000
19385: PPUSH
19386: LD_INT 9000
19388: PPUSH
19389: CALL_OW 12
19393: PPUSH
19394: CALL_OW 492
// end ;
19398: PPOPN 1
19400: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19401: LD_EXP 56
19405: PUSH
19406: LD_EXP 71
19410: AND
19411: IFFALSE 19431
19413: GO 19415
19415: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19416: LD_INT 1
19418: PPUSH
19419: LD_OWVAR 2
19423: PPUSH
19424: LD_INT 0
19426: PPUSH
19427: CALL_OW 324
19431: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19432: LD_EXP 56
19436: PUSH
19437: LD_EXP 72
19441: AND
19442: IFFALSE 19525
19444: GO 19446
19446: DISABLE
19447: LD_INT 0
19449: PPUSH
19450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19451: LD_ADDR_VAR 0 2
19455: PUSH
19456: LD_INT 22
19458: PUSH
19459: LD_OWVAR 2
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 21
19470: PUSH
19471: LD_INT 3
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PPUSH
19482: CALL_OW 69
19486: ST_TO_ADDR
// if not tmp then
19487: LD_VAR 0 2
19491: NOT
19492: IFFALSE 19496
// exit ;
19494: GO 19525
// for i in tmp do
19496: LD_ADDR_VAR 0 1
19500: PUSH
19501: LD_VAR 0 2
19505: PUSH
19506: FOR_IN
19507: IFFALSE 19523
// SetBLevel ( i , 10 ) ;
19509: LD_VAR 0 1
19513: PPUSH
19514: LD_INT 10
19516: PPUSH
19517: CALL_OW 241
19521: GO 19506
19523: POP
19524: POP
// end ;
19525: PPOPN 2
19527: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19528: LD_EXP 56
19532: PUSH
19533: LD_EXP 73
19537: AND
19538: IFFALSE 19649
19540: GO 19542
19542: DISABLE
19543: LD_INT 0
19545: PPUSH
19546: PPUSH
19547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19548: LD_ADDR_VAR 0 3
19552: PUSH
19553: LD_INT 22
19555: PUSH
19556: LD_OWVAR 2
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 25
19567: PUSH
19568: LD_INT 1
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PPUSH
19579: CALL_OW 69
19583: ST_TO_ADDR
// if not tmp then
19584: LD_VAR 0 3
19588: NOT
19589: IFFALSE 19593
// exit ;
19591: GO 19649
// un := tmp [ rand ( 1 , tmp ) ] ;
19593: LD_ADDR_VAR 0 2
19597: PUSH
19598: LD_VAR 0 3
19602: PUSH
19603: LD_INT 1
19605: PPUSH
19606: LD_VAR 0 3
19610: PPUSH
19611: CALL_OW 12
19615: ARRAY
19616: ST_TO_ADDR
// if Crawls ( un ) then
19617: LD_VAR 0 2
19621: PPUSH
19622: CALL_OW 318
19626: IFFALSE 19637
// ComWalk ( un ) ;
19628: LD_VAR 0 2
19632: PPUSH
19633: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19637: LD_VAR 0 2
19641: PPUSH
19642: LD_INT 5
19644: PPUSH
19645: CALL_OW 336
// end ;
19649: PPOPN 3
19651: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19652: LD_EXP 56
19656: PUSH
19657: LD_EXP 74
19661: AND
19662: PUSH
19663: LD_OWVAR 67
19667: PUSH
19668: LD_INT 3
19670: LESS
19671: AND
19672: IFFALSE 19691
19674: GO 19676
19676: DISABLE
// Difficulty := Difficulty + 1 ;
19677: LD_ADDR_OWVAR 67
19681: PUSH
19682: LD_OWVAR 67
19686: PUSH
19687: LD_INT 1
19689: PLUS
19690: ST_TO_ADDR
19691: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19692: LD_EXP 56
19696: PUSH
19697: LD_EXP 75
19701: AND
19702: IFFALSE 19805
19704: GO 19706
19706: DISABLE
19707: LD_INT 0
19709: PPUSH
// begin for i := 1 to 5 do
19710: LD_ADDR_VAR 0 1
19714: PUSH
19715: DOUBLE
19716: LD_INT 1
19718: DEC
19719: ST_TO_ADDR
19720: LD_INT 5
19722: PUSH
19723: FOR_TO
19724: IFFALSE 19803
// begin uc_nation := nation_nature ;
19726: LD_ADDR_OWVAR 21
19730: PUSH
19731: LD_INT 0
19733: ST_TO_ADDR
// uc_side := 0 ;
19734: LD_ADDR_OWVAR 20
19738: PUSH
19739: LD_INT 0
19741: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19742: LD_ADDR_OWVAR 29
19746: PUSH
19747: LD_INT 12
19749: PUSH
19750: LD_INT 12
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: ST_TO_ADDR
// hc_agressivity := 20 ;
19757: LD_ADDR_OWVAR 35
19761: PUSH
19762: LD_INT 20
19764: ST_TO_ADDR
// hc_class := class_tiger ;
19765: LD_ADDR_OWVAR 28
19769: PUSH
19770: LD_INT 14
19772: ST_TO_ADDR
// hc_gallery :=  ;
19773: LD_ADDR_OWVAR 33
19777: PUSH
19778: LD_STRING 
19780: ST_TO_ADDR
// hc_name :=  ;
19781: LD_ADDR_OWVAR 26
19785: PUSH
19786: LD_STRING 
19788: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19789: CALL_OW 44
19793: PPUSH
19794: LD_INT 0
19796: PPUSH
19797: CALL_OW 51
// end ;
19801: GO 19723
19803: POP
19804: POP
// end ;
19805: PPOPN 1
19807: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19808: LD_EXP 56
19812: PUSH
19813: LD_EXP 76
19817: AND
19818: IFFALSE 19827
19820: GO 19822
19822: DISABLE
// StreamSibBomb ;
19823: CALL 19828 0 0
19827: END
// export function StreamSibBomb ; var i , x , y ; begin
19828: LD_INT 0
19830: PPUSH
19831: PPUSH
19832: PPUSH
19833: PPUSH
// result := false ;
19834: LD_ADDR_VAR 0 1
19838: PUSH
19839: LD_INT 0
19841: ST_TO_ADDR
// for i := 1 to 16 do
19842: LD_ADDR_VAR 0 2
19846: PUSH
19847: DOUBLE
19848: LD_INT 1
19850: DEC
19851: ST_TO_ADDR
19852: LD_INT 16
19854: PUSH
19855: FOR_TO
19856: IFFALSE 20055
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19858: LD_ADDR_VAR 0 3
19862: PUSH
19863: LD_INT 10
19865: PUSH
19866: LD_INT 20
19868: PUSH
19869: LD_INT 30
19871: PUSH
19872: LD_INT 40
19874: PUSH
19875: LD_INT 50
19877: PUSH
19878: LD_INT 60
19880: PUSH
19881: LD_INT 70
19883: PUSH
19884: LD_INT 80
19886: PUSH
19887: LD_INT 90
19889: PUSH
19890: LD_INT 100
19892: PUSH
19893: LD_INT 110
19895: PUSH
19896: LD_INT 120
19898: PUSH
19899: LD_INT 130
19901: PUSH
19902: LD_INT 140
19904: PUSH
19905: LD_INT 150
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 1
19927: PPUSH
19928: LD_INT 15
19930: PPUSH
19931: CALL_OW 12
19935: ARRAY
19936: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19937: LD_ADDR_VAR 0 4
19941: PUSH
19942: LD_INT 10
19944: PUSH
19945: LD_INT 20
19947: PUSH
19948: LD_INT 30
19950: PUSH
19951: LD_INT 40
19953: PUSH
19954: LD_INT 50
19956: PUSH
19957: LD_INT 60
19959: PUSH
19960: LD_INT 70
19962: PUSH
19963: LD_INT 80
19965: PUSH
19966: LD_INT 90
19968: PUSH
19969: LD_INT 100
19971: PUSH
19972: LD_INT 110
19974: PUSH
19975: LD_INT 120
19977: PUSH
19978: LD_INT 130
19980: PUSH
19981: LD_INT 140
19983: PUSH
19984: LD_INT 150
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 1
20006: PPUSH
20007: LD_INT 15
20009: PPUSH
20010: CALL_OW 12
20014: ARRAY
20015: ST_TO_ADDR
// if ValidHex ( x , y ) then
20016: LD_VAR 0 3
20020: PPUSH
20021: LD_VAR 0 4
20025: PPUSH
20026: CALL_OW 488
20030: IFFALSE 20053
// begin result := [ x , y ] ;
20032: LD_ADDR_VAR 0 1
20036: PUSH
20037: LD_VAR 0 3
20041: PUSH
20042: LD_VAR 0 4
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: ST_TO_ADDR
// break ;
20051: GO 20055
// end ; end ;
20053: GO 19855
20055: POP
20056: POP
// if result then
20057: LD_VAR 0 1
20061: IFFALSE 20121
// begin ToLua ( playSibBomb() ) ;
20063: LD_STRING playSibBomb()
20065: PPUSH
20066: CALL_OW 559
// wait ( 0 0$14 ) ;
20070: LD_INT 490
20072: PPUSH
20073: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20077: LD_VAR 0 1
20081: PUSH
20082: LD_INT 1
20084: ARRAY
20085: PPUSH
20086: LD_VAR 0 1
20090: PUSH
20091: LD_INT 2
20093: ARRAY
20094: PPUSH
20095: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20099: LD_VAR 0 1
20103: PUSH
20104: LD_INT 1
20106: ARRAY
20107: PPUSH
20108: LD_VAR 0 1
20112: PUSH
20113: LD_INT 2
20115: ARRAY
20116: PPUSH
20117: CALL_OW 429
// end ; end ;
20121: LD_VAR 0 1
20125: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20126: LD_EXP 56
20130: PUSH
20131: LD_EXP 78
20135: AND
20136: IFFALSE 20148
20138: GO 20140
20140: DISABLE
// YouLost (  ) ;
20141: LD_STRING 
20143: PPUSH
20144: CALL_OW 104
20148: END
// every 0 0$1 trigger StreamModeActive and sFog do
20149: LD_EXP 56
20153: PUSH
20154: LD_EXP 77
20158: AND
20159: IFFALSE 20173
20161: GO 20163
20163: DISABLE
// FogOff ( your_side ) ;
20164: LD_OWVAR 2
20168: PPUSH
20169: CALL_OW 344
20173: END
// every 0 0$1 trigger StreamModeActive and sSun do
20174: LD_EXP 56
20178: PUSH
20179: LD_EXP 79
20183: AND
20184: IFFALSE 20212
20186: GO 20188
20188: DISABLE
// begin solar_recharge_percent := 0 ;
20189: LD_ADDR_OWVAR 79
20193: PUSH
20194: LD_INT 0
20196: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20197: LD_INT 10500
20199: PPUSH
20200: CALL_OW 67
// solar_recharge_percent := 100 ;
20204: LD_ADDR_OWVAR 79
20208: PUSH
20209: LD_INT 100
20211: ST_TO_ADDR
// end ;
20212: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20213: LD_EXP 56
20217: PUSH
20218: LD_EXP 80
20222: AND
20223: IFFALSE 20462
20225: GO 20227
20227: DISABLE
20228: LD_INT 0
20230: PPUSH
20231: PPUSH
20232: PPUSH
// begin tmp := [ ] ;
20233: LD_ADDR_VAR 0 3
20237: PUSH
20238: EMPTY
20239: ST_TO_ADDR
// for i := 1 to 6 do
20240: LD_ADDR_VAR 0 1
20244: PUSH
20245: DOUBLE
20246: LD_INT 1
20248: DEC
20249: ST_TO_ADDR
20250: LD_INT 6
20252: PUSH
20253: FOR_TO
20254: IFFALSE 20359
// begin uc_nation := nation_nature ;
20256: LD_ADDR_OWVAR 21
20260: PUSH
20261: LD_INT 0
20263: ST_TO_ADDR
// uc_side := 0 ;
20264: LD_ADDR_OWVAR 20
20268: PUSH
20269: LD_INT 0
20271: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20272: LD_ADDR_OWVAR 29
20276: PUSH
20277: LD_INT 12
20279: PUSH
20280: LD_INT 12
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: ST_TO_ADDR
// hc_agressivity := 20 ;
20287: LD_ADDR_OWVAR 35
20291: PUSH
20292: LD_INT 20
20294: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20295: LD_ADDR_OWVAR 28
20299: PUSH
20300: LD_INT 17
20302: ST_TO_ADDR
// hc_gallery :=  ;
20303: LD_ADDR_OWVAR 33
20307: PUSH
20308: LD_STRING 
20310: ST_TO_ADDR
// hc_name :=  ;
20311: LD_ADDR_OWVAR 26
20315: PUSH
20316: LD_STRING 
20318: ST_TO_ADDR
// un := CreateHuman ;
20319: LD_ADDR_VAR 0 2
20323: PUSH
20324: CALL_OW 44
20328: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20329: LD_VAR 0 2
20333: PPUSH
20334: LD_INT 1
20336: PPUSH
20337: CALL_OW 51
// tmp := tmp ^ un ;
20341: LD_ADDR_VAR 0 3
20345: PUSH
20346: LD_VAR 0 3
20350: PUSH
20351: LD_VAR 0 2
20355: ADD
20356: ST_TO_ADDR
// end ;
20357: GO 20253
20359: POP
20360: POP
// repeat wait ( 0 0$1 ) ;
20361: LD_INT 35
20363: PPUSH
20364: CALL_OW 67
// for un in tmp do
20368: LD_ADDR_VAR 0 2
20372: PUSH
20373: LD_VAR 0 3
20377: PUSH
20378: FOR_IN
20379: IFFALSE 20453
// begin if IsDead ( un ) then
20381: LD_VAR 0 2
20385: PPUSH
20386: CALL_OW 301
20390: IFFALSE 20410
// begin tmp := tmp diff un ;
20392: LD_ADDR_VAR 0 3
20396: PUSH
20397: LD_VAR 0 3
20401: PUSH
20402: LD_VAR 0 2
20406: DIFF
20407: ST_TO_ADDR
// continue ;
20408: GO 20378
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20410: LD_VAR 0 2
20414: PPUSH
20415: LD_INT 3
20417: PUSH
20418: LD_INT 22
20420: PUSH
20421: LD_INT 0
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PPUSH
20432: CALL_OW 69
20436: PPUSH
20437: LD_VAR 0 2
20441: PPUSH
20442: CALL_OW 74
20446: PPUSH
20447: CALL_OW 115
// end ;
20451: GO 20378
20453: POP
20454: POP
// until not tmp ;
20455: LD_VAR 0 3
20459: NOT
20460: IFFALSE 20361
// end ;
20462: PPOPN 3
20464: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20465: LD_EXP 56
20469: PUSH
20470: LD_EXP 81
20474: AND
20475: IFFALSE 20529
20477: GO 20479
20479: DISABLE
// begin ToLua ( displayTroll(); ) ;
20480: LD_STRING displayTroll();
20482: PPUSH
20483: CALL_OW 559
// wait ( 3 3$00 ) ;
20487: LD_INT 6300
20489: PPUSH
20490: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20494: LD_STRING hideTroll();
20496: PPUSH
20497: CALL_OW 559
// wait ( 1 1$00 ) ;
20501: LD_INT 2100
20503: PPUSH
20504: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20508: LD_STRING displayTroll();
20510: PPUSH
20511: CALL_OW 559
// wait ( 1 1$00 ) ;
20515: LD_INT 2100
20517: PPUSH
20518: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20522: LD_STRING hideTroll();
20524: PPUSH
20525: CALL_OW 559
// end ;
20529: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20530: LD_EXP 56
20534: PUSH
20535: LD_EXP 82
20539: AND
20540: IFFALSE 20603
20542: GO 20544
20544: DISABLE
20545: LD_INT 0
20547: PPUSH
// begin p := 0 ;
20548: LD_ADDR_VAR 0 1
20552: PUSH
20553: LD_INT 0
20555: ST_TO_ADDR
// repeat game_speed := 1 ;
20556: LD_ADDR_OWVAR 65
20560: PUSH
20561: LD_INT 1
20563: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20564: LD_INT 35
20566: PPUSH
20567: CALL_OW 67
// p := p + 1 ;
20571: LD_ADDR_VAR 0 1
20575: PUSH
20576: LD_VAR 0 1
20580: PUSH
20581: LD_INT 1
20583: PLUS
20584: ST_TO_ADDR
// until p >= 60 ;
20585: LD_VAR 0 1
20589: PUSH
20590: LD_INT 60
20592: GREATEREQUAL
20593: IFFALSE 20556
// game_speed := 4 ;
20595: LD_ADDR_OWVAR 65
20599: PUSH
20600: LD_INT 4
20602: ST_TO_ADDR
// end ;
20603: PPOPN 1
20605: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20606: LD_EXP 56
20610: PUSH
20611: LD_EXP 83
20615: AND
20616: IFFALSE 20762
20618: GO 20620
20620: DISABLE
20621: LD_INT 0
20623: PPUSH
20624: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20625: LD_ADDR_VAR 0 1
20629: PUSH
20630: LD_INT 22
20632: PUSH
20633: LD_OWVAR 2
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 2
20644: PUSH
20645: LD_INT 30
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 30
20657: PUSH
20658: LD_INT 1
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: LIST
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PPUSH
20674: CALL_OW 69
20678: ST_TO_ADDR
// if not depot then
20679: LD_VAR 0 1
20683: NOT
20684: IFFALSE 20688
// exit ;
20686: GO 20762
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20688: LD_ADDR_VAR 0 2
20692: PUSH
20693: LD_VAR 0 1
20697: PUSH
20698: LD_INT 1
20700: PPUSH
20701: LD_VAR 0 1
20705: PPUSH
20706: CALL_OW 12
20710: ARRAY
20711: PPUSH
20712: CALL_OW 274
20716: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20717: LD_VAR 0 2
20721: PPUSH
20722: LD_INT 1
20724: PPUSH
20725: LD_INT 0
20727: PPUSH
20728: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20732: LD_VAR 0 2
20736: PPUSH
20737: LD_INT 2
20739: PPUSH
20740: LD_INT 0
20742: PPUSH
20743: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20747: LD_VAR 0 2
20751: PPUSH
20752: LD_INT 3
20754: PPUSH
20755: LD_INT 0
20757: PPUSH
20758: CALL_OW 277
// end ;
20762: PPOPN 2
20764: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20765: LD_EXP 56
20769: PUSH
20770: LD_EXP 84
20774: AND
20775: IFFALSE 20872
20777: GO 20779
20779: DISABLE
20780: LD_INT 0
20782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20783: LD_ADDR_VAR 0 1
20787: PUSH
20788: LD_INT 22
20790: PUSH
20791: LD_OWVAR 2
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 21
20802: PUSH
20803: LD_INT 1
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 3
20812: PUSH
20813: LD_INT 23
20815: PUSH
20816: LD_INT 0
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: PPUSH
20832: CALL_OW 69
20836: ST_TO_ADDR
// if not tmp then
20837: LD_VAR 0 1
20841: NOT
20842: IFFALSE 20846
// exit ;
20844: GO 20872
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20846: LD_VAR 0 1
20850: PUSH
20851: LD_INT 1
20853: PPUSH
20854: LD_VAR 0 1
20858: PPUSH
20859: CALL_OW 12
20863: ARRAY
20864: PPUSH
20865: LD_INT 200
20867: PPUSH
20868: CALL_OW 234
// end ;
20872: PPOPN 1
20874: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20875: LD_EXP 56
20879: PUSH
20880: LD_EXP 85
20884: AND
20885: IFFALSE 20964
20887: GO 20889
20889: DISABLE
20890: LD_INT 0
20892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20893: LD_ADDR_VAR 0 1
20897: PUSH
20898: LD_INT 22
20900: PUSH
20901: LD_OWVAR 2
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 21
20912: PUSH
20913: LD_INT 2
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PPUSH
20924: CALL_OW 69
20928: ST_TO_ADDR
// if not tmp then
20929: LD_VAR 0 1
20933: NOT
20934: IFFALSE 20938
// exit ;
20936: GO 20964
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20938: LD_VAR 0 1
20942: PUSH
20943: LD_INT 1
20945: PPUSH
20946: LD_VAR 0 1
20950: PPUSH
20951: CALL_OW 12
20955: ARRAY
20956: PPUSH
20957: LD_INT 60
20959: PPUSH
20960: CALL_OW 234
// end ;
20964: PPOPN 1
20966: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20967: LD_EXP 56
20971: PUSH
20972: LD_EXP 86
20976: AND
20977: IFFALSE 21076
20979: GO 20981
20981: DISABLE
20982: LD_INT 0
20984: PPUSH
20985: PPUSH
// begin enable ;
20986: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20987: LD_ADDR_VAR 0 1
20991: PUSH
20992: LD_INT 22
20994: PUSH
20995: LD_OWVAR 2
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 61
21006: PUSH
21007: EMPTY
21008: LIST
21009: PUSH
21010: LD_INT 33
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: LIST
21024: PPUSH
21025: CALL_OW 69
21029: ST_TO_ADDR
// if not tmp then
21030: LD_VAR 0 1
21034: NOT
21035: IFFALSE 21039
// exit ;
21037: GO 21076
// for i in tmp do
21039: LD_ADDR_VAR 0 2
21043: PUSH
21044: LD_VAR 0 1
21048: PUSH
21049: FOR_IN
21050: IFFALSE 21074
// if IsControledBy ( i ) then
21052: LD_VAR 0 2
21056: PPUSH
21057: CALL_OW 312
21061: IFFALSE 21072
// ComUnlink ( i ) ;
21063: LD_VAR 0 2
21067: PPUSH
21068: CALL_OW 136
21072: GO 21049
21074: POP
21075: POP
// end ;
21076: PPOPN 2
21078: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21079: LD_EXP 56
21083: PUSH
21084: LD_EXP 87
21088: AND
21089: IFFALSE 21229
21091: GO 21093
21093: DISABLE
21094: LD_INT 0
21096: PPUSH
21097: PPUSH
// begin ToLua ( displayPowell(); ) ;
21098: LD_STRING displayPowell();
21100: PPUSH
21101: CALL_OW 559
// uc_side := 0 ;
21105: LD_ADDR_OWVAR 20
21109: PUSH
21110: LD_INT 0
21112: ST_TO_ADDR
// uc_nation := 2 ;
21113: LD_ADDR_OWVAR 21
21117: PUSH
21118: LD_INT 2
21120: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21121: LD_ADDR_OWVAR 37
21125: PUSH
21126: LD_INT 14
21128: ST_TO_ADDR
// vc_engine := engine_siberite ;
21129: LD_ADDR_OWVAR 39
21133: PUSH
21134: LD_INT 3
21136: ST_TO_ADDR
// vc_control := control_apeman ;
21137: LD_ADDR_OWVAR 38
21141: PUSH
21142: LD_INT 5
21144: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21145: LD_ADDR_OWVAR 40
21149: PUSH
21150: LD_INT 29
21152: ST_TO_ADDR
// un := CreateVehicle ;
21153: LD_ADDR_VAR 0 2
21157: PUSH
21158: CALL_OW 45
21162: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21163: LD_VAR 0 2
21167: PPUSH
21168: LD_INT 1
21170: PPUSH
21171: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21175: LD_INT 35
21177: PPUSH
21178: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21182: LD_VAR 0 2
21186: PPUSH
21187: LD_INT 22
21189: PUSH
21190: LD_OWVAR 2
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PPUSH
21199: CALL_OW 69
21203: PPUSH
21204: LD_VAR 0 2
21208: PPUSH
21209: CALL_OW 74
21213: PPUSH
21214: CALL_OW 115
// until IsDead ( un ) ;
21218: LD_VAR 0 2
21222: PPUSH
21223: CALL_OW 301
21227: IFFALSE 21175
// end ;
21229: PPOPN 2
21231: END
// every 0 0$1 trigger StreamModeActive and sStu do
21232: LD_EXP 56
21236: PUSH
21237: LD_EXP 95
21241: AND
21242: IFFALSE 21258
21244: GO 21246
21246: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21247: LD_STRING displayStucuk();
21249: PPUSH
21250: CALL_OW 559
// ResetFog ;
21254: CALL_OW 335
// end ;
21258: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21259: LD_EXP 56
21263: PUSH
21264: LD_EXP 88
21268: AND
21269: IFFALSE 21410
21271: GO 21273
21273: DISABLE
21274: LD_INT 0
21276: PPUSH
21277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21278: LD_ADDR_VAR 0 2
21282: PUSH
21283: LD_INT 22
21285: PUSH
21286: LD_OWVAR 2
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 21
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PPUSH
21309: CALL_OW 69
21313: ST_TO_ADDR
// if not tmp then
21314: LD_VAR 0 2
21318: NOT
21319: IFFALSE 21323
// exit ;
21321: GO 21410
// un := tmp [ rand ( 1 , tmp ) ] ;
21323: LD_ADDR_VAR 0 1
21327: PUSH
21328: LD_VAR 0 2
21332: PUSH
21333: LD_INT 1
21335: PPUSH
21336: LD_VAR 0 2
21340: PPUSH
21341: CALL_OW 12
21345: ARRAY
21346: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21347: LD_VAR 0 1
21351: PPUSH
21352: LD_INT 0
21354: PPUSH
21355: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21359: LD_VAR 0 1
21363: PPUSH
21364: LD_OWVAR 3
21368: PUSH
21369: LD_VAR 0 1
21373: DIFF
21374: PPUSH
21375: LD_VAR 0 1
21379: PPUSH
21380: CALL_OW 74
21384: PPUSH
21385: CALL_OW 115
// wait ( 0 0$20 ) ;
21389: LD_INT 700
21391: PPUSH
21392: CALL_OW 67
// SetSide ( un , your_side ) ;
21396: LD_VAR 0 1
21400: PPUSH
21401: LD_OWVAR 2
21405: PPUSH
21406: CALL_OW 235
// end ;
21410: PPOPN 2
21412: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21413: LD_EXP 56
21417: PUSH
21418: LD_EXP 89
21422: AND
21423: IFFALSE 21529
21425: GO 21427
21427: DISABLE
21428: LD_INT 0
21430: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21431: LD_ADDR_VAR 0 1
21435: PUSH
21436: LD_INT 22
21438: PUSH
21439: LD_OWVAR 2
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 2
21450: PUSH
21451: LD_INT 30
21453: PUSH
21454: LD_INT 0
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 30
21463: PUSH
21464: LD_INT 1
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PPUSH
21480: CALL_OW 69
21484: ST_TO_ADDR
// if not depot then
21485: LD_VAR 0 1
21489: NOT
21490: IFFALSE 21494
// exit ;
21492: GO 21529
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21494: LD_VAR 0 1
21498: PUSH
21499: LD_INT 1
21501: ARRAY
21502: PPUSH
21503: CALL_OW 250
21507: PPUSH
21508: LD_VAR 0 1
21512: PUSH
21513: LD_INT 1
21515: ARRAY
21516: PPUSH
21517: CALL_OW 251
21521: PPUSH
21522: LD_INT 70
21524: PPUSH
21525: CALL_OW 495
// end ;
21529: PPOPN 1
21531: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21532: LD_EXP 56
21536: PUSH
21537: LD_EXP 90
21541: AND
21542: IFFALSE 21753
21544: GO 21546
21546: DISABLE
21547: LD_INT 0
21549: PPUSH
21550: PPUSH
21551: PPUSH
21552: PPUSH
21553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21554: LD_ADDR_VAR 0 5
21558: PUSH
21559: LD_INT 22
21561: PUSH
21562: LD_OWVAR 2
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 21
21573: PUSH
21574: LD_INT 1
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PPUSH
21585: CALL_OW 69
21589: ST_TO_ADDR
// if not tmp then
21590: LD_VAR 0 5
21594: NOT
21595: IFFALSE 21599
// exit ;
21597: GO 21753
// for i in tmp do
21599: LD_ADDR_VAR 0 1
21603: PUSH
21604: LD_VAR 0 5
21608: PUSH
21609: FOR_IN
21610: IFFALSE 21751
// begin d := rand ( 0 , 5 ) ;
21612: LD_ADDR_VAR 0 4
21616: PUSH
21617: LD_INT 0
21619: PPUSH
21620: LD_INT 5
21622: PPUSH
21623: CALL_OW 12
21627: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21628: LD_ADDR_VAR 0 2
21632: PUSH
21633: LD_VAR 0 1
21637: PPUSH
21638: CALL_OW 250
21642: PPUSH
21643: LD_VAR 0 4
21647: PPUSH
21648: LD_INT 3
21650: PPUSH
21651: LD_INT 12
21653: PPUSH
21654: CALL_OW 12
21658: PPUSH
21659: CALL_OW 272
21663: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21664: LD_ADDR_VAR 0 3
21668: PUSH
21669: LD_VAR 0 1
21673: PPUSH
21674: CALL_OW 251
21678: PPUSH
21679: LD_VAR 0 4
21683: PPUSH
21684: LD_INT 3
21686: PPUSH
21687: LD_INT 12
21689: PPUSH
21690: CALL_OW 12
21694: PPUSH
21695: CALL_OW 273
21699: ST_TO_ADDR
// if ValidHex ( x , y ) then
21700: LD_VAR 0 2
21704: PPUSH
21705: LD_VAR 0 3
21709: PPUSH
21710: CALL_OW 488
21714: IFFALSE 21749
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21716: LD_VAR 0 1
21720: PPUSH
21721: LD_VAR 0 2
21725: PPUSH
21726: LD_VAR 0 3
21730: PPUSH
21731: LD_INT 3
21733: PPUSH
21734: LD_INT 6
21736: PPUSH
21737: CALL_OW 12
21741: PPUSH
21742: LD_INT 1
21744: PPUSH
21745: CALL_OW 483
// end ;
21749: GO 21609
21751: POP
21752: POP
// end ;
21753: PPOPN 5
21755: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21756: LD_EXP 56
21760: PUSH
21761: LD_EXP 91
21765: AND
21766: IFFALSE 21860
21768: GO 21770
21770: DISABLE
21771: LD_INT 0
21773: PPUSH
21774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21775: LD_ADDR_VAR 0 2
21779: PUSH
21780: LD_INT 22
21782: PUSH
21783: LD_OWVAR 2
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 32
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 21
21804: PUSH
21805: LD_INT 2
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: LIST
21816: PPUSH
21817: CALL_OW 69
21821: ST_TO_ADDR
// if not tmp then
21822: LD_VAR 0 2
21826: NOT
21827: IFFALSE 21831
// exit ;
21829: GO 21860
// for i in tmp do
21831: LD_ADDR_VAR 0 1
21835: PUSH
21836: LD_VAR 0 2
21840: PUSH
21841: FOR_IN
21842: IFFALSE 21858
// SetFuel ( i , 0 ) ;
21844: LD_VAR 0 1
21848: PPUSH
21849: LD_INT 0
21851: PPUSH
21852: CALL_OW 240
21856: GO 21841
21858: POP
21859: POP
// end ;
21860: PPOPN 2
21862: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21863: LD_EXP 56
21867: PUSH
21868: LD_EXP 92
21872: AND
21873: IFFALSE 21939
21875: GO 21877
21877: DISABLE
21878: LD_INT 0
21880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21881: LD_ADDR_VAR 0 1
21885: PUSH
21886: LD_INT 22
21888: PUSH
21889: LD_OWVAR 2
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 30
21900: PUSH
21901: LD_INT 29
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PPUSH
21912: CALL_OW 69
21916: ST_TO_ADDR
// if not tmp then
21917: LD_VAR 0 1
21921: NOT
21922: IFFALSE 21926
// exit ;
21924: GO 21939
// DestroyUnit ( tmp [ 1 ] ) ;
21926: LD_VAR 0 1
21930: PUSH
21931: LD_INT 1
21933: ARRAY
21934: PPUSH
21935: CALL_OW 65
// end ;
21939: PPOPN 1
21941: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21942: LD_EXP 56
21946: PUSH
21947: LD_EXP 94
21951: AND
21952: IFFALSE 22081
21954: GO 21956
21956: DISABLE
21957: LD_INT 0
21959: PPUSH
// begin uc_side := 0 ;
21960: LD_ADDR_OWVAR 20
21964: PUSH
21965: LD_INT 0
21967: ST_TO_ADDR
// uc_nation := nation_arabian ;
21968: LD_ADDR_OWVAR 21
21972: PUSH
21973: LD_INT 2
21975: ST_TO_ADDR
// hc_gallery :=  ;
21976: LD_ADDR_OWVAR 33
21980: PUSH
21981: LD_STRING 
21983: ST_TO_ADDR
// hc_name :=  ;
21984: LD_ADDR_OWVAR 26
21988: PUSH
21989: LD_STRING 
21991: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21992: LD_INT 1
21994: PPUSH
21995: LD_INT 11
21997: PPUSH
21998: LD_INT 10
22000: PPUSH
22001: CALL_OW 380
// un := CreateHuman ;
22005: LD_ADDR_VAR 0 1
22009: PUSH
22010: CALL_OW 44
22014: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22015: LD_VAR 0 1
22019: PPUSH
22020: LD_INT 1
22022: PPUSH
22023: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22027: LD_INT 35
22029: PPUSH
22030: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22034: LD_VAR 0 1
22038: PPUSH
22039: LD_INT 22
22041: PUSH
22042: LD_OWVAR 2
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PPUSH
22051: CALL_OW 69
22055: PPUSH
22056: LD_VAR 0 1
22060: PPUSH
22061: CALL_OW 74
22065: PPUSH
22066: CALL_OW 115
// until IsDead ( un ) ;
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL_OW 301
22079: IFFALSE 22027
// end ;
22081: PPOPN 1
22083: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22084: LD_EXP 56
22088: PUSH
22089: LD_EXP 96
22093: AND
22094: IFFALSE 22106
22096: GO 22098
22098: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22099: LD_STRING earthquake(getX(game), 0, 32)
22101: PPUSH
22102: CALL_OW 559
22106: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22107: LD_EXP 56
22111: PUSH
22112: LD_EXP 97
22116: AND
22117: IFFALSE 22208
22119: GO 22121
22121: DISABLE
22122: LD_INT 0
22124: PPUSH
// begin enable ;
22125: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22126: LD_ADDR_VAR 0 1
22130: PUSH
22131: LD_INT 22
22133: PUSH
22134: LD_OWVAR 2
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 21
22145: PUSH
22146: LD_INT 2
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 33
22155: PUSH
22156: LD_INT 3
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: LIST
22167: PPUSH
22168: CALL_OW 69
22172: ST_TO_ADDR
// if not tmp then
22173: LD_VAR 0 1
22177: NOT
22178: IFFALSE 22182
// exit ;
22180: GO 22208
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22182: LD_VAR 0 1
22186: PUSH
22187: LD_INT 1
22189: PPUSH
22190: LD_VAR 0 1
22194: PPUSH
22195: CALL_OW 12
22199: ARRAY
22200: PPUSH
22201: LD_INT 1
22203: PPUSH
22204: CALL_OW 234
// end ;
22208: PPOPN 1
22210: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22211: LD_EXP 56
22215: PUSH
22216: LD_EXP 98
22220: AND
22221: IFFALSE 22362
22223: GO 22225
22225: DISABLE
22226: LD_INT 0
22228: PPUSH
22229: PPUSH
22230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22231: LD_ADDR_VAR 0 3
22235: PUSH
22236: LD_INT 22
22238: PUSH
22239: LD_OWVAR 2
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 25
22250: PUSH
22251: LD_INT 1
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PPUSH
22262: CALL_OW 69
22266: ST_TO_ADDR
// if not tmp then
22267: LD_VAR 0 3
22271: NOT
22272: IFFALSE 22276
// exit ;
22274: GO 22362
// un := tmp [ rand ( 1 , tmp ) ] ;
22276: LD_ADDR_VAR 0 2
22280: PUSH
22281: LD_VAR 0 3
22285: PUSH
22286: LD_INT 1
22288: PPUSH
22289: LD_VAR 0 3
22293: PPUSH
22294: CALL_OW 12
22298: ARRAY
22299: ST_TO_ADDR
// if Crawls ( un ) then
22300: LD_VAR 0 2
22304: PPUSH
22305: CALL_OW 318
22309: IFFALSE 22320
// ComWalk ( un ) ;
22311: LD_VAR 0 2
22315: PPUSH
22316: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22320: LD_VAR 0 2
22324: PPUSH
22325: LD_INT 9
22327: PPUSH
22328: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22332: LD_INT 28
22334: PPUSH
22335: LD_OWVAR 2
22339: PPUSH
22340: LD_INT 2
22342: PPUSH
22343: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22347: LD_INT 29
22349: PPUSH
22350: LD_OWVAR 2
22354: PPUSH
22355: LD_INT 2
22357: PPUSH
22358: CALL_OW 322
// end ;
22362: PPOPN 3
22364: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22365: LD_EXP 56
22369: PUSH
22370: LD_EXP 99
22374: AND
22375: IFFALSE 22486
22377: GO 22379
22379: DISABLE
22380: LD_INT 0
22382: PPUSH
22383: PPUSH
22384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22385: LD_ADDR_VAR 0 3
22389: PUSH
22390: LD_INT 22
22392: PUSH
22393: LD_OWVAR 2
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 25
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PPUSH
22416: CALL_OW 69
22420: ST_TO_ADDR
// if not tmp then
22421: LD_VAR 0 3
22425: NOT
22426: IFFALSE 22430
// exit ;
22428: GO 22486
// un := tmp [ rand ( 1 , tmp ) ] ;
22430: LD_ADDR_VAR 0 2
22434: PUSH
22435: LD_VAR 0 3
22439: PUSH
22440: LD_INT 1
22442: PPUSH
22443: LD_VAR 0 3
22447: PPUSH
22448: CALL_OW 12
22452: ARRAY
22453: ST_TO_ADDR
// if Crawls ( un ) then
22454: LD_VAR 0 2
22458: PPUSH
22459: CALL_OW 318
22463: IFFALSE 22474
// ComWalk ( un ) ;
22465: LD_VAR 0 2
22469: PPUSH
22470: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22474: LD_VAR 0 2
22478: PPUSH
22479: LD_INT 8
22481: PPUSH
22482: CALL_OW 336
// end ;
22486: PPOPN 3
22488: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22489: LD_EXP 56
22493: PUSH
22494: LD_EXP 100
22498: AND
22499: IFFALSE 22643
22501: GO 22503
22503: DISABLE
22504: LD_INT 0
22506: PPUSH
22507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22508: LD_ADDR_VAR 0 2
22512: PUSH
22513: LD_INT 22
22515: PUSH
22516: LD_OWVAR 2
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 21
22527: PUSH
22528: LD_INT 2
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 2
22537: PUSH
22538: LD_INT 34
22540: PUSH
22541: LD_INT 12
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 34
22550: PUSH
22551: LD_INT 51
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 34
22560: PUSH
22561: LD_INT 32
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: PPUSH
22579: CALL_OW 69
22583: ST_TO_ADDR
// if not tmp then
22584: LD_VAR 0 2
22588: NOT
22589: IFFALSE 22593
// exit ;
22591: GO 22643
// for i in tmp do
22593: LD_ADDR_VAR 0 1
22597: PUSH
22598: LD_VAR 0 2
22602: PUSH
22603: FOR_IN
22604: IFFALSE 22641
// if GetCargo ( i , mat_artifact ) = 0 then
22606: LD_VAR 0 1
22610: PPUSH
22611: LD_INT 4
22613: PPUSH
22614: CALL_OW 289
22618: PUSH
22619: LD_INT 0
22621: EQUAL
22622: IFFALSE 22639
// SetCargo ( i , mat_siberit , 100 ) ;
22624: LD_VAR 0 1
22628: PPUSH
22629: LD_INT 3
22631: PPUSH
22632: LD_INT 100
22634: PPUSH
22635: CALL_OW 290
22639: GO 22603
22641: POP
22642: POP
// end ;
22643: PPOPN 2
22645: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22646: LD_EXP 56
22650: PUSH
22651: LD_EXP 101
22655: AND
22656: IFFALSE 22809
22658: GO 22660
22660: DISABLE
22661: LD_INT 0
22663: PPUSH
22664: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22665: LD_ADDR_VAR 0 2
22669: PUSH
22670: LD_INT 22
22672: PUSH
22673: LD_OWVAR 2
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PPUSH
22682: CALL_OW 69
22686: ST_TO_ADDR
// if not tmp then
22687: LD_VAR 0 2
22691: NOT
22692: IFFALSE 22696
// exit ;
22694: GO 22809
// for i := 1 to 2 do
22696: LD_ADDR_VAR 0 1
22700: PUSH
22701: DOUBLE
22702: LD_INT 1
22704: DEC
22705: ST_TO_ADDR
22706: LD_INT 2
22708: PUSH
22709: FOR_TO
22710: IFFALSE 22807
// begin uc_side := your_side ;
22712: LD_ADDR_OWVAR 20
22716: PUSH
22717: LD_OWVAR 2
22721: ST_TO_ADDR
// uc_nation := nation_american ;
22722: LD_ADDR_OWVAR 21
22726: PUSH
22727: LD_INT 1
22729: ST_TO_ADDR
// vc_chassis := us_morphling ;
22730: LD_ADDR_OWVAR 37
22734: PUSH
22735: LD_INT 5
22737: ST_TO_ADDR
// vc_engine := engine_siberite ;
22738: LD_ADDR_OWVAR 39
22742: PUSH
22743: LD_INT 3
22745: ST_TO_ADDR
// vc_control := control_computer ;
22746: LD_ADDR_OWVAR 38
22750: PUSH
22751: LD_INT 3
22753: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22754: LD_ADDR_OWVAR 40
22758: PUSH
22759: LD_INT 10
22761: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
22762: CALL_OW 45
22766: PPUSH
22767: LD_VAR 0 2
22771: PUSH
22772: LD_INT 1
22774: ARRAY
22775: PPUSH
22776: CALL_OW 250
22780: PPUSH
22781: LD_VAR 0 2
22785: PUSH
22786: LD_INT 1
22788: ARRAY
22789: PPUSH
22790: CALL_OW 251
22794: PPUSH
22795: LD_INT 12
22797: PPUSH
22798: LD_INT 1
22800: PPUSH
22801: CALL_OW 50
// end ;
22805: GO 22709
22807: POP
22808: POP
// end ;
22809: PPOPN 2
22811: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22812: LD_EXP 56
22816: PUSH
22817: LD_EXP 102
22821: AND
22822: IFFALSE 23044
22824: GO 22826
22826: DISABLE
22827: LD_INT 0
22829: PPUSH
22830: PPUSH
22831: PPUSH
22832: PPUSH
22833: PPUSH
22834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22835: LD_ADDR_VAR 0 6
22839: PUSH
22840: LD_INT 22
22842: PUSH
22843: LD_OWVAR 2
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 21
22854: PUSH
22855: LD_INT 1
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 3
22864: PUSH
22865: LD_INT 23
22867: PUSH
22868: LD_INT 0
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: LIST
22883: PPUSH
22884: CALL_OW 69
22888: ST_TO_ADDR
// if not tmp then
22889: LD_VAR 0 6
22893: NOT
22894: IFFALSE 22898
// exit ;
22896: GO 23044
// s1 := rand ( 1 , 4 ) ;
22898: LD_ADDR_VAR 0 2
22902: PUSH
22903: LD_INT 1
22905: PPUSH
22906: LD_INT 4
22908: PPUSH
22909: CALL_OW 12
22913: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22914: LD_ADDR_VAR 0 4
22918: PUSH
22919: LD_VAR 0 6
22923: PUSH
22924: LD_INT 1
22926: ARRAY
22927: PPUSH
22928: LD_VAR 0 2
22932: PPUSH
22933: CALL_OW 259
22937: ST_TO_ADDR
// if s1 = 1 then
22938: LD_VAR 0 2
22942: PUSH
22943: LD_INT 1
22945: EQUAL
22946: IFFALSE 22966
// s2 := rand ( 2 , 4 ) else
22948: LD_ADDR_VAR 0 3
22952: PUSH
22953: LD_INT 2
22955: PPUSH
22956: LD_INT 4
22958: PPUSH
22959: CALL_OW 12
22963: ST_TO_ADDR
22964: GO 22974
// s2 := 1 ;
22966: LD_ADDR_VAR 0 3
22970: PUSH
22971: LD_INT 1
22973: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22974: LD_ADDR_VAR 0 5
22978: PUSH
22979: LD_VAR 0 6
22983: PUSH
22984: LD_INT 1
22986: ARRAY
22987: PPUSH
22988: LD_VAR 0 3
22992: PPUSH
22993: CALL_OW 259
22997: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22998: LD_VAR 0 6
23002: PUSH
23003: LD_INT 1
23005: ARRAY
23006: PPUSH
23007: LD_VAR 0 2
23011: PPUSH
23012: LD_VAR 0 5
23016: PPUSH
23017: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23021: LD_VAR 0 6
23025: PUSH
23026: LD_INT 1
23028: ARRAY
23029: PPUSH
23030: LD_VAR 0 3
23034: PPUSH
23035: LD_VAR 0 4
23039: PPUSH
23040: CALL_OW 237
// end ;
23044: PPOPN 6
23046: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23047: LD_EXP 56
23051: PUSH
23052: LD_EXP 103
23056: AND
23057: IFFALSE 23136
23059: GO 23061
23061: DISABLE
23062: LD_INT 0
23064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23065: LD_ADDR_VAR 0 1
23069: PUSH
23070: LD_INT 22
23072: PUSH
23073: LD_OWVAR 2
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 30
23084: PUSH
23085: LD_INT 3
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PPUSH
23096: CALL_OW 69
23100: ST_TO_ADDR
// if not tmp then
23101: LD_VAR 0 1
23105: NOT
23106: IFFALSE 23110
// exit ;
23108: GO 23136
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23110: LD_VAR 0 1
23114: PUSH
23115: LD_INT 1
23117: PPUSH
23118: LD_VAR 0 1
23122: PPUSH
23123: CALL_OW 12
23127: ARRAY
23128: PPUSH
23129: LD_INT 1
23131: PPUSH
23132: CALL_OW 234
// end ;
23136: PPOPN 1
23138: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23139: LD_EXP 56
23143: PUSH
23144: LD_EXP 104
23148: AND
23149: IFFALSE 23261
23151: GO 23153
23153: DISABLE
23154: LD_INT 0
23156: PPUSH
23157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23158: LD_ADDR_VAR 0 2
23162: PUSH
23163: LD_INT 22
23165: PUSH
23166: LD_OWVAR 2
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 2
23177: PUSH
23178: LD_INT 30
23180: PUSH
23181: LD_INT 27
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 30
23190: PUSH
23191: LD_INT 26
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 30
23200: PUSH
23201: LD_INT 28
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PPUSH
23218: CALL_OW 69
23222: ST_TO_ADDR
// if not tmp then
23223: LD_VAR 0 2
23227: NOT
23228: IFFALSE 23232
// exit ;
23230: GO 23261
// for i in tmp do
23232: LD_ADDR_VAR 0 1
23236: PUSH
23237: LD_VAR 0 2
23241: PUSH
23242: FOR_IN
23243: IFFALSE 23259
// SetLives ( i , 1 ) ;
23245: LD_VAR 0 1
23249: PPUSH
23250: LD_INT 1
23252: PPUSH
23253: CALL_OW 234
23257: GO 23242
23259: POP
23260: POP
// end ;
23261: PPOPN 2
23263: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23264: LD_EXP 56
23268: PUSH
23269: LD_EXP 105
23273: AND
23274: IFFALSE 23548
23276: GO 23278
23278: DISABLE
23279: LD_INT 0
23281: PPUSH
23282: PPUSH
23283: PPUSH
// begin i := rand ( 1 , 7 ) ;
23284: LD_ADDR_VAR 0 1
23288: PUSH
23289: LD_INT 1
23291: PPUSH
23292: LD_INT 7
23294: PPUSH
23295: CALL_OW 12
23299: ST_TO_ADDR
// case i of 1 :
23300: LD_VAR 0 1
23304: PUSH
23305: LD_INT 1
23307: DOUBLE
23308: EQUAL
23309: IFTRUE 23313
23311: GO 23323
23313: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23314: LD_STRING earthquake(getX(game), 0, 32)
23316: PPUSH
23317: CALL_OW 559
23321: GO 23548
23323: LD_INT 2
23325: DOUBLE
23326: EQUAL
23327: IFTRUE 23331
23329: GO 23345
23331: POP
// begin ToLua ( displayStucuk(); ) ;
23332: LD_STRING displayStucuk();
23334: PPUSH
23335: CALL_OW 559
// ResetFog ;
23339: CALL_OW 335
// end ; 3 :
23343: GO 23548
23345: LD_INT 3
23347: DOUBLE
23348: EQUAL
23349: IFTRUE 23353
23351: GO 23457
23353: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: LD_INT 22
23361: PUSH
23362: LD_OWVAR 2
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 25
23373: PUSH
23374: LD_INT 1
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PPUSH
23385: CALL_OW 69
23389: ST_TO_ADDR
// if not tmp then
23390: LD_VAR 0 2
23394: NOT
23395: IFFALSE 23399
// exit ;
23397: GO 23548
// un := tmp [ rand ( 1 , tmp ) ] ;
23399: LD_ADDR_VAR 0 3
23403: PUSH
23404: LD_VAR 0 2
23408: PUSH
23409: LD_INT 1
23411: PPUSH
23412: LD_VAR 0 2
23416: PPUSH
23417: CALL_OW 12
23421: ARRAY
23422: ST_TO_ADDR
// if Crawls ( un ) then
23423: LD_VAR 0 3
23427: PPUSH
23428: CALL_OW 318
23432: IFFALSE 23443
// ComWalk ( un ) ;
23434: LD_VAR 0 3
23438: PPUSH
23439: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23443: LD_VAR 0 3
23447: PPUSH
23448: LD_INT 8
23450: PPUSH
23451: CALL_OW 336
// end ; 4 :
23455: GO 23548
23457: LD_INT 4
23459: DOUBLE
23460: EQUAL
23461: IFTRUE 23465
23463: GO 23526
23465: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23466: LD_ADDR_VAR 0 2
23470: PUSH
23471: LD_INT 22
23473: PUSH
23474: LD_OWVAR 2
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 30
23485: PUSH
23486: LD_INT 29
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PPUSH
23497: CALL_OW 69
23501: ST_TO_ADDR
// if not tmp then
23502: LD_VAR 0 2
23506: NOT
23507: IFFALSE 23511
// exit ;
23509: GO 23548
// DestroyUnit ( tmp [ 1 ] ) ;
23511: LD_VAR 0 2
23515: PUSH
23516: LD_INT 1
23518: ARRAY
23519: PPUSH
23520: CALL_OW 65
// end ; 5 .. 7 :
23524: GO 23548
23526: LD_INT 5
23528: DOUBLE
23529: GREATEREQUAL
23530: IFFALSE 23538
23532: LD_INT 7
23534: DOUBLE
23535: LESSEQUAL
23536: IFTRUE 23540
23538: GO 23547
23540: POP
// StreamSibBomb ; end ;
23541: CALL 19828 0 0
23545: GO 23548
23547: POP
// end ;
23548: PPOPN 3
23550: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23551: LD_EXP 56
23555: PUSH
23556: LD_EXP 106
23560: AND
23561: IFFALSE 23717
23563: GO 23565
23565: DISABLE
23566: LD_INT 0
23568: PPUSH
23569: PPUSH
23570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23571: LD_ADDR_VAR 0 2
23575: PUSH
23576: LD_INT 81
23578: PUSH
23579: LD_OWVAR 2
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 2
23590: PUSH
23591: LD_INT 21
23593: PUSH
23594: LD_INT 1
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 21
23603: PUSH
23604: LD_INT 2
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PPUSH
23620: CALL_OW 69
23624: ST_TO_ADDR
// if not tmp then
23625: LD_VAR 0 2
23629: NOT
23630: IFFALSE 23634
// exit ;
23632: GO 23717
// p := 0 ;
23634: LD_ADDR_VAR 0 3
23638: PUSH
23639: LD_INT 0
23641: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23642: LD_INT 35
23644: PPUSH
23645: CALL_OW 67
// p := p + 1 ;
23649: LD_ADDR_VAR 0 3
23653: PUSH
23654: LD_VAR 0 3
23658: PUSH
23659: LD_INT 1
23661: PLUS
23662: ST_TO_ADDR
// for i in tmp do
23663: LD_ADDR_VAR 0 1
23667: PUSH
23668: LD_VAR 0 2
23672: PUSH
23673: FOR_IN
23674: IFFALSE 23705
// if GetLives ( i ) < 1000 then
23676: LD_VAR 0 1
23680: PPUSH
23681: CALL_OW 256
23685: PUSH
23686: LD_INT 1000
23688: LESS
23689: IFFALSE 23703
// SetLives ( i , 1000 ) ;
23691: LD_VAR 0 1
23695: PPUSH
23696: LD_INT 1000
23698: PPUSH
23699: CALL_OW 234
23703: GO 23673
23705: POP
23706: POP
// until p > 20 ;
23707: LD_VAR 0 3
23711: PUSH
23712: LD_INT 20
23714: GREATER
23715: IFFALSE 23642
// end ;
23717: PPOPN 3
23719: END
// every 0 0$1 trigger StreamModeActive and sTime do
23720: LD_EXP 56
23724: PUSH
23725: LD_EXP 107
23729: AND
23730: IFFALSE 23765
23732: GO 23734
23734: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23735: LD_INT 28
23737: PPUSH
23738: LD_OWVAR 2
23742: PPUSH
23743: LD_INT 2
23745: PPUSH
23746: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23750: LD_INT 30
23752: PPUSH
23753: LD_OWVAR 2
23757: PPUSH
23758: LD_INT 2
23760: PPUSH
23761: CALL_OW 322
// end ;
23765: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23766: LD_EXP 56
23770: PUSH
23771: LD_EXP 108
23775: AND
23776: IFFALSE 23897
23778: GO 23780
23780: DISABLE
23781: LD_INT 0
23783: PPUSH
23784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23785: LD_ADDR_VAR 0 2
23789: PUSH
23790: LD_INT 22
23792: PUSH
23793: LD_OWVAR 2
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 21
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 3
23814: PUSH
23815: LD_INT 23
23817: PUSH
23818: LD_INT 0
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: LIST
23833: PPUSH
23834: CALL_OW 69
23838: ST_TO_ADDR
// if not tmp then
23839: LD_VAR 0 2
23843: NOT
23844: IFFALSE 23848
// exit ;
23846: GO 23897
// for i in tmp do
23848: LD_ADDR_VAR 0 1
23852: PUSH
23853: LD_VAR 0 2
23857: PUSH
23858: FOR_IN
23859: IFFALSE 23895
// begin if Crawls ( i ) then
23861: LD_VAR 0 1
23865: PPUSH
23866: CALL_OW 318
23870: IFFALSE 23881
// ComWalk ( i ) ;
23872: LD_VAR 0 1
23876: PPUSH
23877: CALL_OW 138
// SetClass ( i , 2 ) ;
23881: LD_VAR 0 1
23885: PPUSH
23886: LD_INT 2
23888: PPUSH
23889: CALL_OW 336
// end ;
23893: GO 23858
23895: POP
23896: POP
// end ;
23897: PPOPN 2
23899: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23900: LD_EXP 56
23904: PUSH
23905: LD_EXP 109
23909: AND
23910: IFFALSE 24191
23912: GO 23914
23914: DISABLE
23915: LD_INT 0
23917: PPUSH
23918: PPUSH
23919: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23920: LD_OWVAR 2
23924: PPUSH
23925: LD_INT 9
23927: PPUSH
23928: LD_INT 1
23930: PPUSH
23931: LD_INT 1
23933: PPUSH
23934: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23938: LD_INT 9
23940: PPUSH
23941: LD_OWVAR 2
23945: PPUSH
23946: CALL_OW 343
// uc_side := 9 ;
23950: LD_ADDR_OWVAR 20
23954: PUSH
23955: LD_INT 9
23957: ST_TO_ADDR
// uc_nation := 2 ;
23958: LD_ADDR_OWVAR 21
23962: PUSH
23963: LD_INT 2
23965: ST_TO_ADDR
// hc_name := Dark Warrior ;
23966: LD_ADDR_OWVAR 26
23970: PUSH
23971: LD_STRING Dark Warrior
23973: ST_TO_ADDR
// hc_gallery :=  ;
23974: LD_ADDR_OWVAR 33
23978: PUSH
23979: LD_STRING 
23981: ST_TO_ADDR
// hc_noskilllimit := true ;
23982: LD_ADDR_OWVAR 76
23986: PUSH
23987: LD_INT 1
23989: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23990: LD_ADDR_OWVAR 31
23994: PUSH
23995: LD_INT 30
23997: PUSH
23998: LD_INT 30
24000: PUSH
24001: LD_INT 30
24003: PUSH
24004: LD_INT 30
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: ST_TO_ADDR
// un := CreateHuman ;
24013: LD_ADDR_VAR 0 3
24017: PUSH
24018: CALL_OW 44
24022: ST_TO_ADDR
// hc_noskilllimit := false ;
24023: LD_ADDR_OWVAR 76
24027: PUSH
24028: LD_INT 0
24030: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24031: LD_VAR 0 3
24035: PPUSH
24036: LD_INT 1
24038: PPUSH
24039: CALL_OW 51
// p := 0 ;
24043: LD_ADDR_VAR 0 2
24047: PUSH
24048: LD_INT 0
24050: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24051: LD_INT 35
24053: PPUSH
24054: CALL_OW 67
// p := p + 1 ;
24058: LD_ADDR_VAR 0 2
24062: PUSH
24063: LD_VAR 0 2
24067: PUSH
24068: LD_INT 1
24070: PLUS
24071: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24072: LD_VAR 0 3
24076: PPUSH
24077: CALL_OW 256
24081: PUSH
24082: LD_INT 1000
24084: LESS
24085: IFFALSE 24099
// SetLives ( un , 1000 ) ;
24087: LD_VAR 0 3
24091: PPUSH
24092: LD_INT 1000
24094: PPUSH
24095: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24099: LD_VAR 0 3
24103: PPUSH
24104: LD_INT 81
24106: PUSH
24107: LD_OWVAR 2
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 91
24118: PUSH
24119: LD_VAR 0 3
24123: PUSH
24124: LD_INT 30
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: LIST
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PPUSH
24136: CALL_OW 69
24140: PPUSH
24141: LD_VAR 0 3
24145: PPUSH
24146: CALL_OW 74
24150: PPUSH
24151: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
24155: LD_VAR 0 2
24159: PUSH
24160: LD_INT 60
24162: GREATER
24163: PUSH
24164: LD_VAR 0 3
24168: PPUSH
24169: CALL_OW 301
24173: OR
24174: IFFALSE 24051
// if un then
24176: LD_VAR 0 3
24180: IFFALSE 24191
// RemoveUnit ( un ) ;
24182: LD_VAR 0 3
24186: PPUSH
24187: CALL_OW 64
// end ; end_of_file
24191: PPOPN 3
24193: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24194: LD_INT 0
24196: PPUSH
24197: PPUSH
24198: PPUSH
24199: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24200: LD_VAR 0 1
24204: PPUSH
24205: CALL_OW 264
24209: PUSH
24210: LD_EXP 47
24214: EQUAL
24215: IFFALSE 24287
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24217: LD_INT 68
24219: PPUSH
24220: LD_VAR 0 1
24224: PPUSH
24225: CALL_OW 255
24229: PPUSH
24230: CALL_OW 321
24234: PUSH
24235: LD_INT 2
24237: EQUAL
24238: IFFALSE 24250
// eff := 70 else
24240: LD_ADDR_VAR 0 4
24244: PUSH
24245: LD_INT 70
24247: ST_TO_ADDR
24248: GO 24258
// eff := 30 ;
24250: LD_ADDR_VAR 0 4
24254: PUSH
24255: LD_INT 30
24257: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24258: LD_VAR 0 1
24262: PPUSH
24263: CALL_OW 250
24267: PPUSH
24268: LD_VAR 0 1
24272: PPUSH
24273: CALL_OW 251
24277: PPUSH
24278: LD_VAR 0 4
24282: PPUSH
24283: CALL_OW 495
// end ; end ;
24287: LD_VAR 0 2
24291: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24292: LD_INT 0
24294: PPUSH
// end ;
24295: LD_VAR 0 4
24299: RET
// export function SOS_Command ( cmd ) ; begin
24300: LD_INT 0
24302: PPUSH
// end ;
24303: LD_VAR 0 2
24307: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24308: LD_VAR 0 1
24312: PUSH
24313: LD_INT 255
24315: EQUAL
24316: PUSH
24317: LD_VAR 0 2
24321: PPUSH
24322: CALL_OW 264
24326: PUSH
24327: LD_INT 14
24329: PUSH
24330: LD_INT 53
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: IN
24337: AND
24338: PUSH
24339: LD_VAR 0 4
24343: PPUSH
24344: LD_VAR 0 5
24348: PPUSH
24349: CALL_OW 488
24353: AND
24354: IFFALSE 24378
// CutTreeXYR ( unit , x , y , 12 ) ;
24356: LD_VAR 0 2
24360: PPUSH
24361: LD_VAR 0 4
24365: PPUSH
24366: LD_VAR 0 5
24370: PPUSH
24371: LD_INT 12
24373: PPUSH
24374: CALL 24381 0 4
// end ;
24378: PPOPN 5
24380: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24381: LD_INT 0
24383: PPUSH
24384: PPUSH
24385: PPUSH
24386: PPUSH
24387: PPUSH
24388: PPUSH
24389: PPUSH
24390: PPUSH
24391: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24392: LD_VAR 0 1
24396: NOT
24397: PUSH
24398: LD_VAR 0 2
24402: PPUSH
24403: LD_VAR 0 3
24407: PPUSH
24408: CALL_OW 488
24412: NOT
24413: OR
24414: PUSH
24415: LD_VAR 0 4
24419: NOT
24420: OR
24421: IFFALSE 24425
// exit ;
24423: GO 24765
// list := [ ] ;
24425: LD_ADDR_VAR 0 13
24429: PUSH
24430: EMPTY
24431: ST_TO_ADDR
// if x - r < 0 then
24432: LD_VAR 0 2
24436: PUSH
24437: LD_VAR 0 4
24441: MINUS
24442: PUSH
24443: LD_INT 0
24445: LESS
24446: IFFALSE 24458
// min_x := 0 else
24448: LD_ADDR_VAR 0 7
24452: PUSH
24453: LD_INT 0
24455: ST_TO_ADDR
24456: GO 24474
// min_x := x - r ;
24458: LD_ADDR_VAR 0 7
24462: PUSH
24463: LD_VAR 0 2
24467: PUSH
24468: LD_VAR 0 4
24472: MINUS
24473: ST_TO_ADDR
// if y - r < 0 then
24474: LD_VAR 0 3
24478: PUSH
24479: LD_VAR 0 4
24483: MINUS
24484: PUSH
24485: LD_INT 0
24487: LESS
24488: IFFALSE 24500
// min_y := 0 else
24490: LD_ADDR_VAR 0 8
24494: PUSH
24495: LD_INT 0
24497: ST_TO_ADDR
24498: GO 24516
// min_y := y - r ;
24500: LD_ADDR_VAR 0 8
24504: PUSH
24505: LD_VAR 0 3
24509: PUSH
24510: LD_VAR 0 4
24514: MINUS
24515: ST_TO_ADDR
// max_x := x + r ;
24516: LD_ADDR_VAR 0 9
24520: PUSH
24521: LD_VAR 0 2
24525: PUSH
24526: LD_VAR 0 4
24530: PLUS
24531: ST_TO_ADDR
// max_y := y + r ;
24532: LD_ADDR_VAR 0 10
24536: PUSH
24537: LD_VAR 0 3
24541: PUSH
24542: LD_VAR 0 4
24546: PLUS
24547: ST_TO_ADDR
// for _x = min_x to max_x do
24548: LD_ADDR_VAR 0 11
24552: PUSH
24553: DOUBLE
24554: LD_VAR 0 7
24558: DEC
24559: ST_TO_ADDR
24560: LD_VAR 0 9
24564: PUSH
24565: FOR_TO
24566: IFFALSE 24683
// for _y = min_y to max_y do
24568: LD_ADDR_VAR 0 12
24572: PUSH
24573: DOUBLE
24574: LD_VAR 0 8
24578: DEC
24579: ST_TO_ADDR
24580: LD_VAR 0 10
24584: PUSH
24585: FOR_TO
24586: IFFALSE 24679
// begin if not ValidHex ( _x , _y ) then
24588: LD_VAR 0 11
24592: PPUSH
24593: LD_VAR 0 12
24597: PPUSH
24598: CALL_OW 488
24602: NOT
24603: IFFALSE 24607
// continue ;
24605: GO 24585
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24607: LD_VAR 0 11
24611: PPUSH
24612: LD_VAR 0 12
24616: PPUSH
24617: CALL_OW 351
24621: PUSH
24622: LD_VAR 0 11
24626: PPUSH
24627: LD_VAR 0 12
24631: PPUSH
24632: CALL_OW 554
24636: AND
24637: IFFALSE 24677
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24639: LD_ADDR_VAR 0 13
24643: PUSH
24644: LD_VAR 0 13
24648: PPUSH
24649: LD_VAR 0 13
24653: PUSH
24654: LD_INT 1
24656: PLUS
24657: PPUSH
24658: LD_VAR 0 11
24662: PUSH
24663: LD_VAR 0 12
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PPUSH
24672: CALL_OW 2
24676: ST_TO_ADDR
// end ;
24677: GO 24585
24679: POP
24680: POP
24681: GO 24565
24683: POP
24684: POP
// if not list then
24685: LD_VAR 0 13
24689: NOT
24690: IFFALSE 24694
// exit ;
24692: GO 24765
// for i in list do
24694: LD_ADDR_VAR 0 6
24698: PUSH
24699: LD_VAR 0 13
24703: PUSH
24704: FOR_IN
24705: IFFALSE 24763
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24707: LD_VAR 0 1
24711: PPUSH
24712: LD_STRING M
24714: PUSH
24715: LD_VAR 0 6
24719: PUSH
24720: LD_INT 1
24722: ARRAY
24723: PUSH
24724: LD_VAR 0 6
24728: PUSH
24729: LD_INT 2
24731: ARRAY
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: LD_INT 0
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: PUSH
24754: EMPTY
24755: LIST
24756: PPUSH
24757: CALL_OW 447
24761: GO 24704
24763: POP
24764: POP
// end ;
24765: LD_VAR 0 5
24769: RET
