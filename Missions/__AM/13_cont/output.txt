// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// mission_prefix := 13f_ ;
 170: LD_ADDR_EXP 34
 174: PUSH
 175: LD_STRING 13f_
 177: ST_TO_ADDR
// debugMode := 0 ;
 178: LD_ADDR_EXP 40
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// achivCounter := 0 ;
 186: LD_ADDR_EXP 41
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// if Difficulty = 1 then
 194: LD_OWVAR 67
 198: PUSH
 199: LD_INT 1
 201: EQUAL
 202: IFFALSE 211
// RemoveEnvironmentArea ( oilBlockArea ) ;
 204: LD_INT 15
 206: PPUSH
 207: CALL_OW 355
// PrepareVehicles ;
 211: CALL 1195 0 0
// PrepareHeroes ;
 215: CALL 452 0 0
// PrepareAmericansRandom ;
 219: CALL 1099 0 0
// PrepareDifficulty ;
 223: CALL 8163 0 0
// Action ;
 227: CALL 5028 0 0
// end ;
 231: END
// every 0 0$1 trigger debugMode do var i , j ;
 232: LD_EXP 40
 236: IFFALSE 407
 238: GO 240
 240: DISABLE
 241: LD_INT 0
 243: PPUSH
 244: PPUSH
// begin enable ;
 245: ENABLE
// FogOff ( true ) ;
 246: LD_INT 1
 248: PPUSH
 249: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 253: LD_ADDR_VAR 0 1
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 1
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 21
 270: PUSH
 271: LD_INT 1
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PPUSH
 282: CALL_OW 69
 286: PUSH
 287: FOR_IN
 288: IFFALSE 304
// SetLives ( i , 1000 ) ;
 290: LD_VAR 0 1
 294: PPUSH
 295: LD_INT 1000
 297: PPUSH
 298: CALL_OW 234
 302: GO 287
 304: POP
 305: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 306: LD_ADDR_VAR 0 1
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 2
 323: PUSH
 324: LD_INT 30
 326: PUSH
 327: LD_INT 0
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: PUSH
 334: LD_INT 30
 336: PUSH
 337: LD_INT 1
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: LIST
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PPUSH
 353: CALL_OW 69
 357: PUSH
 358: FOR_IN
 359: IFFALSE 405
// for j := 1 to 3 do
 361: LD_ADDR_VAR 0 2
 365: PUSH
 366: DOUBLE
 367: LD_INT 1
 369: DEC
 370: ST_TO_ADDR
 371: LD_INT 3
 373: PUSH
 374: FOR_TO
 375: IFFALSE 401
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 377: LD_VAR 0 1
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_VAR 0 2
 391: PPUSH
 392: LD_INT 9999
 394: PPUSH
 395: CALL_OW 277
 399: GO 374
 401: POP
 402: POP
 403: GO 358
 405: POP
 406: POP
// end ;
 407: PPOPN 2
 409: END
// every 0 0$1 trigger achivCounter >= 2 do
 410: LD_EXP 41
 414: PUSH
 415: LD_INT 2
 417: GREATEREQUAL
 418: IFFALSE 430
 420: GO 422
 422: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 423: LD_STRING ACH_REMOTE
 425: PPUSH
 426: CALL_OW 543
 430: END
// every 0 0$1 trigger destroyCounter >= 30 do
 431: LD_EXP 42
 435: PUSH
 436: LD_INT 30
 438: GREATEREQUAL
 439: IFFALSE 451
 441: GO 443
 443: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 444: LD_STRING ACH_DEFMASTER
 446: PPUSH
 447: CALL_OW 543
 451: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
 456: PPUSH
 457: PPUSH
// uc_side = 1 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 466: LD_ADDR_EXP 1
 470: PUSH
 471: LD_STRING JMM
 473: PPUSH
 474: LD_EXP 40
 478: NOT
 479: PPUSH
 480: LD_STRING 13c_
 482: PPUSH
 483: CALL 29434 0 3
 487: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 488: LD_ADDR_EXP 2
 492: PUSH
 493: LD_STRING Stevens
 495: PPUSH
 496: LD_EXP 40
 500: NOT
 501: PPUSH
 502: LD_STRING 13c_
 504: PPUSH
 505: CALL 29434 0 3
 509: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 510: LD_ADDR_EXP 3
 514: PUSH
 515: LD_STRING Lisa
 517: PPUSH
 518: LD_EXP 40
 522: NOT
 523: PPUSH
 524: LD_STRING 13c_
 526: PPUSH
 527: CALL 29434 0 3
 531: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 532: LD_ADDR_EXP 4
 536: PUSH
 537: LD_STRING Donaldson
 539: PPUSH
 540: LD_EXP 40
 544: NOT
 545: PPUSH
 546: LD_STRING 13c_
 548: PPUSH
 549: CALL 29434 0 3
 553: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 554: LD_ADDR_EXP 5
 558: PUSH
 559: LD_STRING Bobby
 561: PPUSH
 562: LD_EXP 40
 566: NOT
 567: PPUSH
 568: LD_STRING 13c_
 570: PPUSH
 571: CALL 29434 0 3
 575: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 576: LD_ADDR_EXP 6
 580: PUSH
 581: LD_STRING Cyrus
 583: PPUSH
 584: LD_EXP 40
 588: NOT
 589: PPUSH
 590: LD_STRING 13c_
 592: PPUSH
 593: CALL 29434 0 3
 597: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 598: LD_ADDR_EXP 7
 602: PUSH
 603: LD_STRING Denis
 605: PPUSH
 606: LD_EXP 40
 610: NOT
 611: PPUSH
 612: LD_STRING 13c_
 614: PPUSH
 615: CALL 29434 0 3
 619: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 620: LD_ADDR_EXP 8
 624: PUSH
 625: LD_STRING Brown
 627: PPUSH
 628: LD_EXP 40
 632: NOT
 633: PPUSH
 634: LD_STRING 13c_
 636: PPUSH
 637: CALL 29434 0 3
 641: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 642: LD_ADDR_EXP 9
 646: PUSH
 647: LD_STRING Gladstone
 649: PPUSH
 650: LD_INT 1
 652: PPUSH
 653: LD_STRING 13c_
 655: PPUSH
 656: CALL 29434 0 3
 660: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 661: LD_ADDR_EXP 10
 665: PUSH
 666: LD_STRING Houten
 668: PPUSH
 669: LD_INT 1
 671: PPUSH
 672: LD_STRING 13c_
 674: PPUSH
 675: CALL 29434 0 3
 679: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 680: LD_ADDR_EXP 11
 684: PUSH
 685: LD_STRING Cornel
 687: PPUSH
 688: LD_INT 1
 690: PPUSH
 691: LD_STRING 13c_
 693: PPUSH
 694: CALL 29434 0 3
 698: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 699: LD_ADDR_EXP 12
 703: PUSH
 704: LD_STRING Gary
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: LD_STRING 13c_
 712: PPUSH
 713: CALL 29434 0 3
 717: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 718: LD_ADDR_EXP 13
 722: PUSH
 723: LD_STRING Frank
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: LD_STRING 13c_
 731: PPUSH
 732: CALL 29434 0 3
 736: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 737: LD_ADDR_EXP 14
 741: PUSH
 742: LD_STRING Kikuchi
 744: PPUSH
 745: LD_INT 1
 747: PPUSH
 748: LD_STRING 13c_
 750: PPUSH
 751: CALL 29434 0 3
 755: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 756: LD_ADDR_EXP 15
 760: PUSH
 761: LD_STRING Powell
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: LD_STRING 
 769: PPUSH
 770: CALL 29434 0 3
 774: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 775: LD_ADDR_VAR 0 2
 779: PUSH
 780: LD_EXP 1
 784: PUSH
 785: LD_EXP 2
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: LD_EXP 4
 799: PUSH
 800: LD_EXP 5
 804: PUSH
 805: LD_EXP 6
 809: PUSH
 810: LD_EXP 7
 814: PUSH
 815: LD_EXP 8
 819: PUSH
 820: LD_EXP 9
 824: PUSH
 825: LD_EXP 10
 829: PUSH
 830: LD_EXP 11
 834: PUSH
 835: LD_EXP 12
 839: PUSH
 840: LD_EXP 13
 844: PUSH
 845: LD_EXP 14
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 866: LD_ADDR_VAR 0 3
 870: PUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 33
 883: PUSH
 884: LD_INT 1
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: LD_INT 21
 893: PUSH
 894: LD_INT 2
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: LIST
 905: PPUSH
 906: CALL_OW 69
 910: ST_TO_ADDR
// for i = tmp downto 1 do
 911: LD_ADDR_VAR 0 4
 915: PUSH
 916: DOUBLE
 917: LD_VAR 0 2
 921: INC
 922: ST_TO_ADDR
 923: LD_INT 1
 925: PUSH
 926: FOR_DOWNTO
 927: IFFALSE 964
// if not tmp [ i ] then
 929: LD_VAR 0 2
 933: PUSH
 934: LD_VAR 0 4
 938: ARRAY
 939: NOT
 940: IFFALSE 962
// tmp := Delete ( tmp , i ) ;
 942: LD_ADDR_VAR 0 2
 946: PUSH
 947: LD_VAR 0 2
 951: PPUSH
 952: LD_VAR 0 4
 956: PPUSH
 957: CALL_OW 3
 961: ST_TO_ADDR
 962: GO 926
 964: POP
 965: POP
// for i = 1 to tmp do
 966: LD_ADDR_VAR 0 4
 970: PUSH
 971: DOUBLE
 972: LD_INT 1
 974: DEC
 975: ST_TO_ADDR
 976: LD_VAR 0 2
 980: PUSH
 981: FOR_TO
 982: IFFALSE 1012
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
 984: LD_VAR 0 2
 988: PUSH
 989: LD_VAR 0 4
 993: ARRAY
 994: PPUSH
 995: LD_VAR 0 3
 999: PUSH
1000: LD_VAR 0 4
1004: ARRAY
1005: PPUSH
1006: CALL_OW 52
1010: GO 981
1012: POP
1013: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1014: LD_INT 22
1016: PUSH
1017: LD_INT 1
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 25
1026: PUSH
1027: LD_INT 2
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: PPUSH
1038: CALL_OW 69
1042: PUSH
1043: LD_INT 0
1045: EQUAL
1046: PUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PUSH
1057: LD_INT 34
1059: PUSH
1060: LD_INT 13
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PPUSH
1071: CALL_OW 69
1075: PUSH
1076: LD_INT 0
1078: EQUAL
1079: AND
1080: IFFALSE 1094
// SetClass ( JMM , 2 ) ;
1082: LD_EXP 1
1086: PPUSH
1087: LD_INT 2
1089: PPUSH
1090: CALL_OW 336
// end ;
1094: LD_VAR 0 1
1098: RET
// export function PrepareAmericansRandom ; var i ; begin
1099: LD_INT 0
1101: PPUSH
1102: PPUSH
// uc_side = 1 ;
1103: LD_ADDR_OWVAR 20
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1111: LD_ADDR_EXP 16
1115: PUSH
1116: LD_STRING 13c_others
1118: PPUSH
1119: CALL_OW 31
1123: ST_TO_ADDR
// for i in others13 do
1124: LD_ADDR_VAR 0 2
1128: PUSH
1129: LD_EXP 16
1133: PUSH
1134: FOR_IN
1135: IFFALSE 1188
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1137: LD_VAR 0 2
1141: PPUSH
1142: LD_INT 22
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 21
1154: PUSH
1155: LD_INT 2
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: PUSH
1162: LD_INT 58
1164: PUSH
1165: EMPTY
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: PPUSH
1173: CALL_OW 69
1177: PUSH
1178: LD_INT 1
1180: ARRAY
1181: PPUSH
1182: CALL_OW 52
1186: GO 1134
1188: POP
1189: POP
// end ;
1190: LD_VAR 0 1
1194: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1195: LD_INT 0
1197: PPUSH
1198: PPUSH
1199: PPUSH
1200: PPUSH
1201: PPUSH
1202: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1203: LD_ADDR_VAR 0 5
1207: PUSH
1208: LD_STRING 13_VehiclesIn13_1
1210: PPUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 5
1216: PUSH
1217: LD_INT 3
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 6
1225: PUSH
1226: LD_INT 100
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 3
1245: PUSH
1246: LD_INT 1
1248: PUSH
1249: LD_INT 6
1251: PUSH
1252: LD_INT 100
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: PUSH
1263: LD_INT 1
1265: PUSH
1266: LD_INT 5
1268: PUSH
1269: LD_INT 3
1271: PUSH
1272: LD_INT 1
1274: PUSH
1275: LD_INT 6
1277: PUSH
1278: LD_INT 100
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: LD_INT 5
1294: PUSH
1295: LD_INT 3
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: LD_INT 6
1303: PUSH
1304: LD_INT 100
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: PUSH
1315: LD_INT 1
1317: PUSH
1318: LD_INT 5
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: LD_INT 6
1329: PUSH
1330: LD_INT 100
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_INT 1
1343: PUSH
1344: LD_INT 5
1346: PUSH
1347: LD_INT 3
1349: PUSH
1350: LD_INT 1
1352: PUSH
1353: LD_INT 6
1355: PUSH
1356: LD_INT 100
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 1
1369: PUSH
1370: LD_INT 5
1372: PUSH
1373: LD_INT 3
1375: PUSH
1376: LD_INT 1
1378: PUSH
1379: LD_INT 6
1381: PUSH
1382: LD_INT 100
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: LD_INT 5
1398: PUSH
1399: LD_INT 3
1401: PUSH
1402: LD_INT 1
1404: PUSH
1405: LD_INT 6
1407: PUSH
1408: LD_INT 100
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 30
1433: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1434: LD_ADDR_EXP 24
1438: PUSH
1439: LD_STRING 13_ResourcesInCargo13_1
1441: PPUSH
1442: EMPTY
1443: PPUSH
1444: CALL_OW 30
1448: ST_TO_ADDR
// cargoList = [ ] ;
1449: LD_ADDR_VAR 0 6
1453: PUSH
1454: EMPTY
1455: ST_TO_ADDR
// uc_side = 1 ;
1456: LD_ADDR_OWVAR 20
1460: PUSH
1461: LD_INT 1
1463: ST_TO_ADDR
// if vehicles then
1464: LD_VAR 0 5
1468: IFFALSE 1815
// begin for i := 1 to vehicles do
1470: LD_ADDR_VAR 0 2
1474: PUSH
1475: DOUBLE
1476: LD_INT 1
1478: DEC
1479: ST_TO_ADDR
1480: LD_VAR 0 5
1484: PUSH
1485: FOR_TO
1486: IFFALSE 1635
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1488: LD_ADDR_OWVAR 21
1492: PUSH
1493: LD_VAR 0 5
1497: PUSH
1498: LD_VAR 0 2
1502: ARRAY
1503: PUSH
1504: LD_INT 1
1506: ARRAY
1507: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1508: LD_ADDR_OWVAR 37
1512: PUSH
1513: LD_VAR 0 5
1517: PUSH
1518: LD_VAR 0 2
1522: ARRAY
1523: PUSH
1524: LD_INT 2
1526: ARRAY
1527: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1528: LD_ADDR_OWVAR 39
1532: PUSH
1533: LD_VAR 0 5
1537: PUSH
1538: LD_VAR 0 2
1542: ARRAY
1543: PUSH
1544: LD_INT 3
1546: ARRAY
1547: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1548: LD_ADDR_OWVAR 38
1552: PUSH
1553: LD_VAR 0 5
1557: PUSH
1558: LD_VAR 0 2
1562: ARRAY
1563: PUSH
1564: LD_INT 4
1566: ARRAY
1567: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1568: LD_ADDR_OWVAR 40
1572: PUSH
1573: LD_VAR 0 5
1577: PUSH
1578: LD_VAR 0 2
1582: ARRAY
1583: PUSH
1584: LD_INT 5
1586: ARRAY
1587: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1588: LD_ADDR_OWVAR 41
1592: PUSH
1593: LD_INT 40
1595: ST_TO_ADDR
// veh = CreateVehicle ;
1596: LD_ADDR_VAR 0 4
1600: PUSH
1601: CALL_OW 45
1605: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1606: LD_VAR 0 4
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1618: LD_VAR 0 4
1622: PPUSH
1623: LD_INT 2
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 49
// end ;
1633: GO 1485
1635: POP
1636: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1637: LD_ADDR_VAR 0 6
1641: PUSH
1642: LD_INT 22
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: LD_INT 21
1654: PUSH
1655: LD_INT 2
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 34
1664: PUSH
1665: LD_INT 12
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: PPUSH
1677: CALL_OW 69
1681: ST_TO_ADDR
// if cargoList then
1682: LD_VAR 0 6
1686: IFFALSE 1815
// for i = 1 to cargoList do
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: DOUBLE
1694: LD_INT 1
1696: DEC
1697: ST_TO_ADDR
1698: LD_VAR 0 6
1702: PUSH
1703: FOR_TO
1704: IFFALSE 1813
// begin if resources then
1706: LD_EXP 24
1710: IFFALSE 1811
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1712: LD_VAR 0 6
1716: PUSH
1717: LD_VAR 0 2
1721: ARRAY
1722: PPUSH
1723: LD_INT 1
1725: PPUSH
1726: LD_EXP 24
1730: PUSH
1731: LD_VAR 0 2
1735: ARRAY
1736: PUSH
1737: LD_INT 1
1739: ARRAY
1740: PPUSH
1741: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1745: LD_VAR 0 6
1749: PUSH
1750: LD_VAR 0 2
1754: ARRAY
1755: PPUSH
1756: LD_INT 2
1758: PPUSH
1759: LD_EXP 24
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 2
1772: ARRAY
1773: PPUSH
1774: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1778: LD_VAR 0 6
1782: PUSH
1783: LD_VAR 0 2
1787: ARRAY
1788: PPUSH
1789: LD_INT 3
1791: PPUSH
1792: LD_EXP 24
1796: PUSH
1797: LD_VAR 0 2
1801: ARRAY
1802: PUSH
1803: LD_INT 3
1805: ARRAY
1806: PPUSH
1807: CALL_OW 291
// end ; end ;
1811: GO 1703
1813: POP
1814: POP
// end ; end ;
1815: LD_VAR 0 1
1819: RET
// export function PowellSupport ; var i , veh , un ; begin
1820: LD_INT 0
1822: PPUSH
1823: PPUSH
1824: PPUSH
1825: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1826: LD_ADDR_VAR 0 2
1830: PUSH
1831: DOUBLE
1832: LD_INT 1
1834: DEC
1835: ST_TO_ADDR
1836: LD_INT 4
1838: PUSH
1839: LD_INT 3
1841: PUSH
1842: LD_INT 2
1844: PUSH
1845: LD_INT 2
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: PUSH
1854: LD_OWVAR 67
1858: ARRAY
1859: PUSH
1860: FOR_TO
1861: IFFALSE 2125
// begin uc_nation := 1 ;
1863: LD_ADDR_OWVAR 21
1867: PUSH
1868: LD_INT 1
1870: ST_TO_ADDR
// uc_side := 1 ;
1871: LD_ADDR_OWVAR 20
1875: PUSH
1876: LD_INT 1
1878: ST_TO_ADDR
// vc_engine := engine_siberite ;
1879: LD_ADDR_OWVAR 39
1883: PUSH
1884: LD_INT 3
1886: ST_TO_ADDR
// vc_control := control_manual ;
1887: LD_ADDR_OWVAR 38
1891: PUSH
1892: LD_INT 1
1894: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1895: LD_ADDR_OWVAR 40
1899: PUSH
1900: LD_INT 9
1902: PUSH
1903: LD_INT 6
1905: PUSH
1906: LD_INT 9
1908: PUSH
1909: LD_INT 5
1911: PUSH
1912: LD_INT 5
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: PUSH
1922: LD_OWVAR 67
1926: PUSH
1927: LD_INT 0
1929: PPUSH
1930: LD_INT 1
1932: PPUSH
1933: CALL_OW 12
1937: PLUS
1938: ARRAY
1939: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1940: LD_OWVAR 40
1944: PUSH
1945: LD_INT 6
1947: EQUAL
1948: IFFALSE 1977
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1950: LD_ADDR_OWVAR 37
1954: PUSH
1955: LD_INT 5
1957: PUSH
1958: LD_INT 4
1960: PUSH
1961: LD_INT 4
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: LIST
1968: PUSH
1969: LD_OWVAR 67
1973: ARRAY
1974: ST_TO_ADDR
1975: GO 2012
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
1977: LD_ADDR_OWVAR 37
1981: PUSH
1982: LD_INT 5
1984: PUSH
1985: LD_INT 4
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: LD_INT 3
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 4
2005: PPUSH
2006: CALL_OW 12
2010: ARRAY
2011: ST_TO_ADDR
// veh = CreateVehicle ;
2012: LD_ADDR_VAR 0 3
2016: PUSH
2017: CALL_OW 45
2021: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2022: LD_VAR 0 3
2026: PPUSH
2027: LD_INT 2
2029: PPUSH
2030: LD_INT 0
2032: PPUSH
2033: CALL_OW 49
// SetDir ( veh , 1 ) ;
2037: LD_VAR 0 3
2041: PPUSH
2042: LD_INT 1
2044: PPUSH
2045: CALL_OW 233
// hc_gallery :=  ;
2049: LD_ADDR_OWVAR 33
2053: PUSH
2054: LD_STRING 
2056: ST_TO_ADDR
// hc_name :=  ;
2057: LD_ADDR_OWVAR 26
2061: PUSH
2062: LD_STRING 
2064: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2065: LD_INT 0
2067: PPUSH
2068: LD_INT 3
2070: PPUSH
2071: LD_INT 9
2073: PUSH
2074: LD_INT 8
2076: PUSH
2077: LD_INT 8
2079: PUSH
2080: LD_INT 7
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: LD_OWVAR 67
2093: ARRAY
2094: PPUSH
2095: CALL_OW 380
// un := CreateHuman ;
2099: LD_ADDR_VAR 0 4
2103: PUSH
2104: CALL_OW 44
2108: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2109: LD_VAR 0 4
2113: PPUSH
2114: LD_VAR 0 3
2118: PPUSH
2119: CALL_OW 52
// end ;
2123: GO 1860
2125: POP
2126: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2127: LD_ADDR_VAR 0 2
2131: PUSH
2132: DOUBLE
2133: LD_INT 1
2135: DEC
2136: ST_TO_ADDR
2137: LD_INT 2
2139: PUSH
2140: LD_INT 2
2142: PUSH
2143: LD_INT 2
2145: PUSH
2146: LD_INT 1
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PUSH
2155: LD_OWVAR 67
2159: ARRAY
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2237
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2164: LD_INT 0
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_INT 9
2172: PUSH
2173: LD_INT 8
2175: PUSH
2176: LD_INT 8
2178: PUSH
2179: LD_INT 7
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_OWVAR 67
2192: ARRAY
2193: PPUSH
2194: CALL_OW 380
// un := CreateHuman ;
2198: LD_ADDR_VAR 0 4
2202: PUSH
2203: CALL_OW 44
2207: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2208: LD_VAR 0 4
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2220: LD_VAR 0 4
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL_OW 49
// end ;
2235: GO 2161
2237: POP
2238: POP
// end ; end_of_file
2239: LD_VAR 0 1
2243: RET
// export function PrepareBurlak ; begin
2244: LD_INT 0
2246: PPUSH
// uc_side := 7 ;
2247: LD_ADDR_OWVAR 20
2251: PUSH
2252: LD_INT 7
2254: ST_TO_ADDR
// uc_nation := 3 ;
2255: LD_ADDR_OWVAR 21
2259: PUSH
2260: LD_INT 3
2262: ST_TO_ADDR
// vc_engine := engine_siberite ;
2263: LD_ADDR_OWVAR 39
2267: PUSH
2268: LD_INT 3
2270: ST_TO_ADDR
// vc_control := control_manual ;
2271: LD_ADDR_OWVAR 38
2275: PUSH
2276: LD_INT 1
2278: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2279: LD_ADDR_OWVAR 40
2283: PUSH
2284: LD_INT 44
2286: PUSH
2287: LD_INT 45
2289: PUSH
2290: LD_INT 46
2292: PUSH
2293: LD_INT 46
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: PUSH
2302: LD_OWVAR 67
2306: ARRAY
2307: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2308: LD_ADDR_OWVAR 37
2312: PUSH
2313: LD_INT 24
2315: ST_TO_ADDR
// Masha := CreateVehicle ;
2316: LD_ADDR_EXP 18
2320: PUSH
2321: CALL_OW 45
2325: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2326: LD_EXP 18
2330: PPUSH
2331: LD_INT 2
2333: PPUSH
2334: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2338: LD_EXP 18
2342: PPUSH
2343: LD_INT 3
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2353: LD_EXP 18
2357: PPUSH
2358: LD_INT 1
2360: PPUSH
2361: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2365: LD_ADDR_EXP 17
2369: PUSH
2370: LD_STRING Burlak
2372: PPUSH
2373: LD_INT 0
2375: PPUSH
2376: LD_STRING 
2378: PPUSH
2379: CALL 29434 0 3
2383: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2384: LD_EXP 17
2388: PPUSH
2389: LD_EXP 18
2393: PPUSH
2394: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2398: LD_EXP 18
2402: PPUSH
2403: LD_INT 107
2405: PPUSH
2406: LD_INT 118
2408: PPUSH
2409: CALL_OW 114
// spawnBurlak := 1 ;
2413: LD_ADDR_EXP 27
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// end ;
2421: LD_VAR 0 1
2425: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2426: LD_INT 0
2428: PPUSH
2429: PPUSH
2430: PPUSH
2431: PPUSH
2432: PPUSH
// uc_side := 7 ;
2433: LD_ADDR_OWVAR 20
2437: PUSH
2438: LD_INT 7
2440: ST_TO_ADDR
// uc_nation := 3 ;
2441: LD_ADDR_OWVAR 21
2445: PUSH
2446: LD_INT 3
2448: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2449: LD_ADDR_EXP 19
2453: PUSH
2454: LD_STRING Gnyevko
2456: PPUSH
2457: LD_INT 0
2459: PPUSH
2460: LD_STRING 
2462: PPUSH
2463: CALL 29434 0 3
2467: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2468: LD_ADDR_EXP 20
2472: PUSH
2473: LD_STRING Titov
2475: PPUSH
2476: LD_INT 0
2478: PPUSH
2479: LD_STRING 
2481: PPUSH
2482: CALL 29434 0 3
2486: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2487: LD_ADDR_EXP 21
2491: PUSH
2492: LD_STRING Xavier2
2494: PPUSH
2495: LD_INT 0
2497: PPUSH
2498: LD_STRING 
2500: PPUSH
2501: CALL 29434 0 3
2505: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2506: LD_ADDR_EXP 22
2510: PUSH
2511: LD_STRING Belkov
2513: PPUSH
2514: LD_INT 0
2516: PPUSH
2517: LD_STRING 
2519: PPUSH
2520: CALL 29434 0 3
2524: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2525: LD_ADDR_EXP 23
2529: PUSH
2530: LD_STRING Lipshchin
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: LD_STRING 
2538: PPUSH
2539: CALL 29434 0 3
2543: ST_TO_ADDR
// for i = 1 to 5 do
2544: LD_ADDR_VAR 0 2
2548: PUSH
2549: DOUBLE
2550: LD_INT 1
2552: DEC
2553: ST_TO_ADDR
2554: LD_INT 5
2556: PUSH
2557: FOR_TO
2558: IFFALSE 2683
// begin vc_engine := engine_siberite ;
2560: LD_ADDR_OWVAR 39
2564: PUSH
2565: LD_INT 3
2567: ST_TO_ADDR
// vc_control := control_manual ;
2568: LD_ADDR_OWVAR 38
2572: PUSH
2573: LD_INT 1
2575: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2576: LD_ADDR_OWVAR 40
2580: PUSH
2581: LD_INT 43
2583: PUSH
2584: LD_INT 45
2586: PUSH
2587: LD_INT 45
2589: PUSH
2590: LD_INT 44
2592: PUSH
2593: LD_INT 49
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: PUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_INT 5
2608: PPUSH
2609: CALL_OW 12
2613: ARRAY
2614: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2615: LD_ADDR_OWVAR 37
2619: PUSH
2620: LD_INT 22
2622: PUSH
2623: LD_INT 22
2625: PUSH
2626: LD_INT 24
2628: PUSH
2629: LD_INT 24
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: PUSH
2638: LD_OWVAR 67
2642: ARRAY
2643: ST_TO_ADDR
// veh = CreateVehicle ;
2644: LD_ADDR_VAR 0 3
2648: PUSH
2649: CALL_OW 45
2653: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2654: LD_VAR 0 3
2658: PPUSH
2659: LD_INT 2
2661: PPUSH
2662: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2666: LD_VAR 0 3
2670: PPUSH
2671: LD_INT 3
2673: PPUSH
2674: LD_INT 0
2676: PPUSH
2677: CALL_OW 49
// end ;
2681: GO 2557
2683: POP
2684: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2685: LD_ADDR_VAR 0 4
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 7
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 21
2702: PUSH
2703: LD_INT 2
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 58
2712: PUSH
2713: EMPTY
2714: LIST
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2726: LD_EXP 19
2730: PPUSH
2731: LD_VAR 0 4
2735: PUSH
2736: LD_INT 1
2738: ARRAY
2739: PPUSH
2740: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2744: LD_EXP 20
2748: PPUSH
2749: LD_VAR 0 4
2753: PUSH
2754: LD_INT 2
2756: ARRAY
2757: PPUSH
2758: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2762: LD_EXP 21
2766: PPUSH
2767: LD_VAR 0 4
2771: PUSH
2772: LD_INT 3
2774: ARRAY
2775: PPUSH
2776: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2780: LD_EXP 22
2784: PPUSH
2785: LD_VAR 0 4
2789: PUSH
2790: LD_INT 4
2792: ARRAY
2793: PPUSH
2794: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2798: LD_EXP 23
2802: PPUSH
2803: LD_VAR 0 4
2807: PUSH
2808: LD_INT 5
2810: ARRAY
2811: PPUSH
2812: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2816: LD_EXP 19
2820: PPUSH
2821: LD_INT 3
2823: PPUSH
2824: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2828: LD_EXP 20
2832: PUSH
2833: LD_EXP 23
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PPUSH
2842: LD_INT 9
2844: PPUSH
2845: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2849: LD_ADDR_VAR 0 4
2853: PUSH
2854: LD_INT 22
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PPUSH
2864: CALL_OW 69
2868: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2869: LD_VAR 0 4
2873: PPUSH
2874: LD_INT 107
2876: PPUSH
2877: LD_INT 118
2879: PPUSH
2880: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2884: LD_INT 35
2886: PPUSH
2887: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2891: LD_VAR 0 4
2895: PPUSH
2896: LD_INT 34
2898: PUSH
2899: LD_INT 49
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 72
2910: PPUSH
2911: LD_EXP 18
2915: PPUSH
2916: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2920: LD_VAR 0 4
2924: PPUSH
2925: LD_INT 3
2927: PUSH
2928: LD_INT 34
2930: PUSH
2931: LD_INT 49
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PPUSH
2942: CALL_OW 72
2946: PPUSH
2947: LD_INT 107
2949: PPUSH
2950: LD_INT 118
2952: PPUSH
2953: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2957: LD_ADDR_VAR 0 5
2961: PUSH
2962: LD_EXP 20
2966: PUSH
2967: LD_EXP 23
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PPUSH
2976: LD_INT 50
2978: PUSH
2979: EMPTY
2980: LIST
2981: PUSH
2982: LD_INT 3
2984: PUSH
2985: LD_INT 54
2987: PUSH
2988: EMPTY
2989: LIST
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PPUSH
2999: CALL_OW 72
3003: ST_TO_ADDR
// if bazooka then
3004: LD_VAR 0 5
3008: IFFALSE 3050
// begin for i in bazooka do
3010: LD_ADDR_VAR 0 2
3014: PUSH
3015: LD_VAR 0 5
3019: PUSH
3020: FOR_IN
3021: IFFALSE 3048
// if See ( 1 , i ) then
3023: LD_INT 1
3025: PPUSH
3026: LD_VAR 0 2
3030: PPUSH
3031: CALL_OW 292
3035: IFFALSE 3046
// ComSpaceTimeShoot ( i ) ;
3037: LD_VAR 0 2
3041: PPUSH
3042: CALL 30381 0 1
3046: GO 3020
3048: POP
3049: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3050: LD_VAR 0 4
3054: PPUSH
3055: LD_INT 34
3057: PUSH
3058: LD_INT 49
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PPUSH
3065: CALL_OW 72
3069: PUSH
3070: LD_INT 0
3072: EQUAL
3073: PUSH
3074: LD_EXP 18
3078: PPUSH
3079: CALL_OW 303
3083: OR
3084: IFFALSE 2884
// repeat wait ( 0 0$1 ) ;
3086: LD_INT 35
3088: PPUSH
3089: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3093: LD_ADDR_VAR 0 4
3097: PUSH
3098: LD_INT 22
3100: PUSH
3101: LD_INT 7
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PPUSH
3108: CALL_OW 69
3112: PUSH
3113: LD_EXP 17
3117: DIFF
3118: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3119: LD_VAR 0 4
3123: PPUSH
3124: LD_INT 107
3126: PPUSH
3127: LD_INT 118
3129: PPUSH
3130: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3134: LD_ADDR_VAR 0 5
3138: PUSH
3139: LD_EXP 20
3143: PUSH
3144: LD_EXP 23
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: PPUSH
3153: LD_INT 50
3155: PUSH
3156: EMPTY
3157: LIST
3158: PUSH
3159: LD_INT 3
3161: PUSH
3162: LD_INT 54
3164: PUSH
3165: EMPTY
3166: LIST
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 72
3180: ST_TO_ADDR
// if bazooka then
3181: LD_VAR 0 5
3185: IFFALSE 3227
// begin for i in bazooka do
3187: LD_ADDR_VAR 0 2
3191: PUSH
3192: LD_VAR 0 5
3196: PUSH
3197: FOR_IN
3198: IFFALSE 3225
// if See ( 1 , i ) then
3200: LD_INT 1
3202: PPUSH
3203: LD_VAR 0 2
3207: PPUSH
3208: CALL_OW 292
3212: IFFALSE 3223
// ComSpaceTimeShoot ( i ) ;
3214: LD_VAR 0 2
3218: PPUSH
3219: CALL 30381 0 1
3223: GO 3197
3225: POP
3226: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3227: LD_EXP 17
3231: PPUSH
3232: CALL_OW 302
3236: PUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 310
3246: NOT
3247: AND
3248: IFFALSE 3265
// ComMoveXY ( Burlak , 107 , 118 ) ;
3250: LD_EXP 17
3254: PPUSH
3255: LD_INT 107
3257: PPUSH
3258: LD_INT 118
3260: PPUSH
3261: CALL_OW 111
// until not tmp ;
3265: LD_VAR 0 4
3269: NOT
3270: IFFALSE 3086
// end ;
3272: LD_VAR 0 1
3276: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3277: LD_INT 0
3279: PPUSH
3280: PPUSH
3281: PPUSH
3282: PPUSH
3283: PPUSH
3284: PPUSH
// result := [ ] ;
3285: LD_ADDR_VAR 0 1
3289: PUSH
3290: EMPTY
3291: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3292: LD_ADDR_VAR 0 6
3296: PUSH
3297: LD_INT 1
3299: PPUSH
3300: LD_INT 2
3302: PPUSH
3303: CALL_OW 12
3307: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3308: LD_ADDR_VAR 0 5
3312: PUSH
3313: LD_INT 8
3315: PUSH
3316: LD_INT 9
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PUSH
3323: LD_VAR 0 6
3327: ARRAY
3328: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3329: LD_ADDR_VAR 0 2
3333: PUSH
3334: DOUBLE
3335: LD_INT 1
3337: DEC
3338: ST_TO_ADDR
3339: LD_INT 6
3341: PUSH
3342: LD_INT 8
3344: PUSH
3345: LD_INT 10
3347: PUSH
3348: LD_INT 11
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: PUSH
3357: LD_OWVAR 67
3361: ARRAY
3362: PUSH
3363: FOR_TO
3364: IFFALSE 3580
// begin uc_side := 3 ;
3366: LD_ADDR_OWVAR 20
3370: PUSH
3371: LD_INT 3
3373: ST_TO_ADDR
// uc_nation := 3 ;
3374: LD_ADDR_OWVAR 21
3378: PUSH
3379: LD_INT 3
3381: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3382: LD_INT 24
3384: PPUSH
3385: LD_INT 3
3387: PPUSH
3388: LD_INT 1
3390: PUSH
3391: LD_INT 3
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 1
3400: PPUSH
3401: LD_INT 2
3403: PPUSH
3404: CALL_OW 12
3408: ARRAY
3409: PPUSH
3410: LD_INT 46
3412: PUSH
3413: LD_INT 46
3415: PUSH
3416: LD_INT 45
3418: PUSH
3419: LD_INT 47
3421: PUSH
3422: LD_INT 49
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 1
3434: PPUSH
3435: LD_INT 5
3437: PPUSH
3438: CALL_OW 12
3442: ARRAY
3443: PPUSH
3444: LD_INT 100
3446: PPUSH
3447: CALL 34298 0 5
// veh := CreateVehicle ;
3451: LD_ADDR_VAR 0 4
3455: PUSH
3456: CALL_OW 45
3460: ST_TO_ADDR
// result := Join ( result , veh ) ;
3461: LD_ADDR_VAR 0 1
3465: PUSH
3466: LD_VAR 0 1
3470: PPUSH
3471: LD_VAR 0 4
3475: PPUSH
3476: CALL 66115 0 2
3480: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3481: LD_VAR 0 4
3485: PPUSH
3486: LD_INT 3
3488: PUSH
3489: LD_INT 5
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: LD_VAR 0 6
3500: ARRAY
3501: PPUSH
3502: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3506: LD_VAR 0 4
3510: PPUSH
3511: LD_VAR 0 5
3515: PPUSH
3516: LD_INT 0
3518: PPUSH
3519: CALL_OW 49
// if vc_control = control_manual then
3523: LD_OWVAR 38
3527: PUSH
3528: LD_INT 1
3530: EQUAL
3531: IFFALSE 3578
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3533: LD_INT 0
3535: PPUSH
3536: LD_INT 7
3538: PUSH
3539: LD_INT 8
3541: PUSH
3542: LD_INT 9
3544: PUSH
3545: LD_INT 10
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: PUSH
3554: LD_OWVAR 67
3558: ARRAY
3559: PPUSH
3560: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3564: CALL_OW 44
3568: PPUSH
3569: LD_VAR 0 4
3573: PPUSH
3574: CALL_OW 52
// end ; end ;
3578: GO 3363
3580: POP
3581: POP
// for i in result do
3582: LD_ADDR_VAR 0 2
3586: PUSH
3587: LD_VAR 0 1
3591: PUSH
3592: FOR_IN
3593: IFFALSE 3609
// SetTag ( i , 10 ) ;
3595: LD_VAR 0 2
3599: PPUSH
3600: LD_INT 10
3602: PPUSH
3603: CALL_OW 109
3607: GO 3592
3609: POP
3610: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3611: LD_EXP 44
3615: PPUSH
3616: CALL_OW 427
// end ; end_of_file
3620: LD_VAR 0 1
3624: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3625: LD_INT 0
3627: PPUSH
3628: PPUSH
3629: PPUSH
// rnd := 0 ;
3630: LD_ADDR_VAR 0 3
3634: PUSH
3635: LD_INT 0
3637: ST_TO_ADDR
// uc_side := 8 ;
3638: LD_ADDR_OWVAR 20
3642: PUSH
3643: LD_INT 8
3645: ST_TO_ADDR
// uc_nation := 2 ;
3646: LD_ADDR_OWVAR 21
3650: PUSH
3651: LD_INT 2
3653: ST_TO_ADDR
// hc_name :=  ;
3654: LD_ADDR_OWVAR 26
3658: PUSH
3659: LD_STRING 
3661: ST_TO_ADDR
// hc_gallery :=  ;
3662: LD_ADDR_OWVAR 33
3666: PUSH
3667: LD_STRING 
3669: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3670: LD_ADDR_OWVAR 29
3674: PUSH
3675: LD_INT 10
3677: PUSH
3678: LD_INT 11
3680: PUSH
3681: LD_INT 12
3683: PUSH
3684: LD_INT 12
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: PUSH
3693: LD_OWVAR 67
3697: ARRAY
3698: PUSH
3699: LD_INT 10
3701: PUSH
3702: LD_INT 11
3704: PUSH
3705: LD_INT 12
3707: PUSH
3708: LD_INT 12
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: LD_OWVAR 67
3721: ARRAY
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3727: LD_INT 0
3729: PPUSH
3730: LD_INT 4
3732: PPUSH
3733: LD_INT 7
3735: PUSH
3736: LD_INT 8
3738: PUSH
3739: LD_INT 9
3741: PUSH
3742: LD_INT 10
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: PUSH
3751: LD_OWVAR 67
3755: ARRAY
3756: PPUSH
3757: CALL_OW 380
// un := CreateHuman ;
3761: LD_ADDR_VAR 0 2
3765: PUSH
3766: CALL_OW 44
3770: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3771: LD_VAR 0 2
3775: PPUSH
3776: LD_INT 8
3778: PUSH
3779: LD_INT 9
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PUSH
3786: LD_INT 1
3788: PPUSH
3789: LD_INT 2
3791: PPUSH
3792: CALL_OW 12
3796: ARRAY
3797: PPUSH
3798: LD_INT 0
3800: PPUSH
3801: CALL_OW 49
// SetTag ( un , 1 ) ;
3805: LD_VAR 0 2
3809: PPUSH
3810: LD_INT 1
3812: PPUSH
3813: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3817: LD_ADDR_VAR 0 3
3821: PUSH
3822: LD_INT 1
3824: PPUSH
3825: LD_EXP 31
3829: PPUSH
3830: CALL_OW 12
3834: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3835: LD_VAR 0 2
3839: PPUSH
3840: LD_EXP 31
3844: PUSH
3845: LD_VAR 0 3
3849: ARRAY
3850: PUSH
3851: LD_INT 1
3853: ARRAY
3854: PPUSH
3855: LD_EXP 31
3859: PUSH
3860: LD_VAR 0 3
3864: ARRAY
3865: PUSH
3866: LD_INT 2
3868: ARRAY
3869: PPUSH
3870: CALL_OW 158
// end ;
3874: LD_VAR 0 1
3878: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3879: LD_INT 22
3881: PUSH
3882: LD_INT 8
3884: PUSH
3885: EMPTY
3886: LIST
3887: LIST
3888: PUSH
3889: LD_INT 3
3891: PUSH
3892: LD_INT 61
3894: PUSH
3895: EMPTY
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 50
3904: PUSH
3905: EMPTY
3906: LIST
3907: PUSH
3908: LD_INT 33
3910: PUSH
3911: LD_INT 2
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: PPUSH
3924: CALL_OW 69
3928: IFFALSE 4015
3930: GO 3932
3932: DISABLE
3933: LD_INT 0
3935: PPUSH
// begin enable ;
3936: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3937: LD_ADDR_VAR 0 1
3941: PUSH
3942: LD_INT 22
3944: PUSH
3945: LD_INT 8
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 3
3954: PUSH
3955: LD_INT 61
3957: PUSH
3958: EMPTY
3959: LIST
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PUSH
3965: LD_INT 50
3967: PUSH
3968: EMPTY
3969: LIST
3970: PUSH
3971: LD_INT 33
3973: PUSH
3974: LD_INT 2
3976: PUSH
3977: EMPTY
3978: LIST
3979: LIST
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: PPUSH
3987: CALL_OW 69
3991: PUSH
3992: FOR_IN
3993: IFFALSE 4013
// begin wait ( 0 0$0.3 ) ;
3995: LD_INT 10
3997: PPUSH
3998: CALL_OW 67
// Connect ( i ) ;
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL 37391 0 1
// end ;
4011: GO 3992
4013: POP
4014: POP
// end ;
4015: PPOPN 1
4017: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4018: LD_INT 0
4020: PPUSH
4021: PPUSH
4022: PPUSH
4023: PPUSH
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// result := [ ] ;
4029: LD_ADDR_VAR 0 1
4033: PUSH
4034: EMPTY
4035: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4036: LD_ADDR_EXP 33
4040: PUSH
4041: LD_EXP 33
4045: PUSH
4046: LD_INT 1
4048: PLUS
4049: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4050: LD_INT 22
4052: PUSH
4053: LD_INT 8
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PUSH
4060: LD_INT 3
4062: PUSH
4063: LD_INT 58
4065: PUSH
4066: EMPTY
4067: LIST
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PUSH
4073: LD_INT 34
4075: PUSH
4076: LD_INT 31
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 69
4092: PUSH
4093: LD_INT 2
4095: LESS
4096: IFFALSE 4340
// begin uc_side := 8 ;
4098: LD_ADDR_OWVAR 20
4102: PUSH
4103: LD_INT 8
4105: ST_TO_ADDR
// uc_nation := 2 ;
4106: LD_ADDR_OWVAR 21
4110: PUSH
4111: LD_INT 2
4113: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4114: LD_INT 14
4116: PPUSH
4117: LD_INT 3
4119: PPUSH
4120: LD_INT 1
4122: PPUSH
4123: LD_INT 31
4125: PPUSH
4126: LD_INT 100
4128: PPUSH
4129: CALL 34298 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4133: LD_ADDR_VAR 0 2
4137: PUSH
4138: DOUBLE
4139: LD_INT 22
4141: PUSH
4142: LD_INT 8
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: PUSH
4149: LD_INT 3
4151: PUSH
4152: LD_INT 58
4154: PUSH
4155: EMPTY
4156: LIST
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 34
4164: PUSH
4165: LD_INT 31
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 69
4181: PUSH
4182: LD_INT 1
4184: PLUS
4185: DEC
4186: ST_TO_ADDR
4187: LD_INT 2
4189: PUSH
4190: FOR_TO
4191: IFFALSE 4338
// begin veh := CreateVehicle ;
4193: LD_ADDR_VAR 0 3
4197: PUSH
4198: CALL_OW 45
4202: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4203: LD_VAR 0 3
4207: PPUSH
4208: LD_INT 5
4210: PPUSH
4211: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4215: LD_ADDR_VAR 0 4
4219: PUSH
4220: LD_INT 181
4222: PUSH
4223: LD_INT 105
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: LD_INT 137
4232: PUSH
4233: LD_INT 6
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: LD_VAR 0 2
4248: PUSH
4249: LD_INT 2
4251: MOD
4252: PUSH
4253: LD_INT 1
4255: PLUS
4256: ARRAY
4257: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4258: LD_VAR 0 3
4262: PPUSH
4263: LD_VAR 0 4
4267: PUSH
4268: LD_INT 1
4270: ARRAY
4271: PPUSH
4272: LD_VAR 0 4
4276: PUSH
4277: LD_INT 2
4279: ARRAY
4280: PPUSH
4281: LD_INT 12
4283: PPUSH
4284: LD_INT 0
4286: PPUSH
4287: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4291: LD_INT 0
4293: PPUSH
4294: LD_INT 7
4296: PUSH
4297: LD_INT 9
4299: PUSH
4300: LD_INT 10
4302: PUSH
4303: LD_INT 10
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: LD_OWVAR 67
4316: ARRAY
4317: PPUSH
4318: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4322: CALL_OW 44
4326: PPUSH
4327: LD_VAR 0 3
4331: PPUSH
4332: CALL_OW 52
// end ;
4336: GO 4190
4338: POP
4339: POP
// end ; dir := rand ( 1 , 2 ) ;
4340: LD_ADDR_VAR 0 9
4344: PUSH
4345: LD_INT 1
4347: PPUSH
4348: LD_INT 2
4350: PPUSH
4351: CALL_OW 12
4355: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4356: LD_ADDR_VAR 0 6
4360: PUSH
4361: LD_INT 8
4363: PUSH
4364: LD_INT 9
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_VAR 0 9
4375: ARRAY
4376: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4377: LD_ADDR_VAR 0 7
4381: PUSH
4382: LD_INT 6
4384: PUSH
4385: LD_INT 8
4387: PUSH
4388: LD_INT 10
4390: PUSH
4391: LD_INT 11
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: LD_OWVAR 67
4404: ARRAY
4405: PUSH
4406: LD_EXP 33
4410: PLUS
4411: ST_TO_ADDR
// if counter > 20 then
4412: LD_VAR 0 7
4416: PUSH
4417: LD_INT 20
4419: GREATER
4420: IFFALSE 4430
// counter := 20 ;
4422: LD_ADDR_VAR 0 7
4426: PUSH
4427: LD_INT 20
4429: ST_TO_ADDR
// for i := 1 to counter do
4430: LD_ADDR_VAR 0 2
4434: PUSH
4435: DOUBLE
4436: LD_INT 1
4438: DEC
4439: ST_TO_ADDR
4440: LD_VAR 0 7
4444: PUSH
4445: FOR_TO
4446: IFFALSE 4781
// begin uc_side := 8 ;
4448: LD_ADDR_OWVAR 20
4452: PUSH
4453: LD_INT 8
4455: ST_TO_ADDR
// uc_nation := 2 ;
4456: LD_ADDR_OWVAR 21
4460: PUSH
4461: LD_INT 2
4463: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4464: LD_INT 13
4466: PUSH
4467: LD_INT 14
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 1
4476: PPUSH
4477: LD_INT 2
4479: PPUSH
4480: CALL_OW 12
4484: ARRAY
4485: PPUSH
4486: LD_INT 3
4488: PPUSH
4489: LD_INT 1
4491: PUSH
4492: LD_INT 2
4494: PUSH
4495: LD_INT 5
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 1
4505: PPUSH
4506: LD_INT 3
4508: PPUSH
4509: CALL_OW 12
4513: ARRAY
4514: PPUSH
4515: LD_INT 27
4517: PUSH
4518: LD_INT 28
4520: PUSH
4521: LD_INT 27
4523: PUSH
4524: LD_EXP 50
4528: PUSH
4529: LD_INT 29
4531: PUSH
4532: LD_INT 25
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 1
4545: PPUSH
4546: LD_INT 6
4548: PPUSH
4549: CALL_OW 12
4553: ARRAY
4554: PPUSH
4555: LD_INT 100
4557: PPUSH
4558: CALL 34298 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4562: LD_OWVAR 40
4566: PUSH
4567: LD_INT 29
4569: EQUAL
4570: IFFALSE 4580
// vc_control := control_remote ;
4572: LD_ADDR_OWVAR 38
4576: PUSH
4577: LD_INT 2
4579: ST_TO_ADDR
// veh := CreateVehicle ;
4580: LD_ADDR_VAR 0 3
4584: PUSH
4585: CALL_OW 45
4589: ST_TO_ADDR
// result := Join ( result , veh ) ;
4590: LD_ADDR_VAR 0 1
4594: PUSH
4595: LD_VAR 0 1
4599: PPUSH
4600: LD_VAR 0 3
4604: PPUSH
4605: CALL 66115 0 2
4609: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4610: LD_VAR 0 3
4614: PPUSH
4615: LD_INT 3
4617: PUSH
4618: LD_INT 5
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PUSH
4625: LD_VAR 0 9
4629: ARRAY
4630: PPUSH
4631: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4635: LD_VAR 0 3
4639: PPUSH
4640: LD_VAR 0 6
4644: PPUSH
4645: LD_INT 0
4647: PPUSH
4648: CALL_OW 49
// if vc_control = control_manual then
4652: LD_OWVAR 38
4656: PUSH
4657: LD_INT 1
4659: EQUAL
4660: IFFALSE 4707
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4662: LD_INT 0
4664: PPUSH
4665: LD_INT 7
4667: PUSH
4668: LD_INT 8
4670: PUSH
4671: LD_INT 9
4673: PUSH
4674: LD_INT 10
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: PUSH
4683: LD_OWVAR 67
4687: ARRAY
4688: PPUSH
4689: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4693: CALL_OW 44
4697: PPUSH
4698: LD_VAR 0 3
4702: PPUSH
4703: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4707: LD_INT 10
4709: PPUSH
4710: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4714: LD_VAR 0 3
4718: PPUSH
4719: CALL_OW 263
4723: PUSH
4724: LD_INT 2
4726: EQUAL
4727: PUSH
4728: LD_VAR 0 3
4732: PPUSH
4733: CALL_OW 312
4737: NOT
4738: AND
4739: IFFALSE 4757
// begin Connect ( veh ) ;
4741: LD_VAR 0 3
4745: PPUSH
4746: CALL 37391 0 1
// wait ( 0 0$0.3 ) ;
4750: LD_INT 10
4752: PPUSH
4753: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4757: LD_VAR 0 3
4761: PPUSH
4762: LD_INT 100
4764: PPUSH
4765: LD_INT 55
4767: PPUSH
4768: CALL_OW 114
// wait ( 0 0$0.3 ) ;
4772: LD_INT 10
4774: PPUSH
4775: CALL_OW 67
// end ;
4779: GO 4445
4781: POP
4782: POP
// if sibDeposits and arabianAttacksCounter mod [ 6 , 5 , 4 , 4 ] [ Difficulty ] = 0 then
4783: LD_EXP 31
4787: PUSH
4788: LD_EXP 33
4792: PUSH
4793: LD_INT 6
4795: PUSH
4796: LD_INT 5
4798: PUSH
4799: LD_INT 4
4801: PUSH
4802: LD_INT 4
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: LD_OWVAR 67
4815: ARRAY
4816: MOD
4817: PUSH
4818: LD_INT 0
4820: EQUAL
4821: AND
4822: IFFALSE 4985
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4824: LD_ADDR_VAR 0 2
4828: PUSH
4829: DOUBLE
4830: LD_INT 1
4832: DEC
4833: ST_TO_ADDR
4834: LD_INT 3
4836: PUSH
4837: LD_INT 4
4839: PUSH
4840: LD_INT 4
4842: PUSH
4843: LD_INT 5
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_OWVAR 67
4856: ARRAY
4857: PUSH
4858: FOR_TO
4859: IFFALSE 4979
// begin uc_side := 8 ;
4861: LD_ADDR_OWVAR 20
4865: PUSH
4866: LD_INT 8
4868: ST_TO_ADDR
// uc_nation := 2 ;
4869: LD_ADDR_OWVAR 21
4873: PUSH
4874: LD_INT 2
4876: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4877: LD_INT 0
4879: PPUSH
4880: LD_INT 1
4882: PPUSH
4883: LD_INT 7
4885: PUSH
4886: LD_INT 8
4888: PUSH
4889: LD_INT 9
4891: PUSH
4892: LD_INT 10
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: PUSH
4901: LD_OWVAR 67
4905: ARRAY
4906: PPUSH
4907: CALL_OW 380
// un := CreateHuman ;
4911: LD_ADDR_VAR 0 5
4915: PUSH
4916: CALL_OW 44
4920: ST_TO_ADDR
// result := Join ( result , un ) ;
4921: LD_ADDR_VAR 0 1
4925: PUSH
4926: LD_VAR 0 1
4930: PPUSH
4931: LD_VAR 0 5
4935: PPUSH
4936: CALL 66115 0 2
4940: ST_TO_ADDR
// if Prob ( 60 ) then
4941: LD_INT 60
4943: PPUSH
4944: CALL_OW 13
4948: IFFALSE 4962
// SetClass ( un , class_mortar ) ;
4950: LD_VAR 0 5
4954: PPUSH
4955: LD_INT 8
4957: PPUSH
4958: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
4962: LD_VAR 0 5
4966: PPUSH
4967: LD_INT 16
4969: PPUSH
4970: LD_INT 0
4972: PPUSH
4973: CALL_OW 49
// end ;
4977: GO 4858
4979: POP
4980: POP
// DestroySibDeposit ;
4981: CALL 3625 0 0
// end ; for i in result do
4985: LD_ADDR_VAR 0 2
4989: PUSH
4990: LD_VAR 0 1
4994: PUSH
4995: FOR_IN
4996: IFFALSE 5012
// SetTag ( i , 10 ) ;
4998: LD_VAR 0 2
5002: PPUSH
5003: LD_INT 10
5005: PPUSH
5006: CALL_OW 109
5010: GO 4995
5012: POP
5013: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5014: LD_EXP 43
5018: PPUSH
5019: CALL_OW 427
// end ; end_of_file
5023: LD_VAR 0 1
5027: RET
// export function Action ; begin
5028: LD_INT 0
5030: PPUSH
// InGameOn ;
5031: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
5035: LD_INT 22
5037: PUSH
5038: LD_INT 1
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: PUSH
5045: LD_INT 21
5047: PUSH
5048: LD_INT 2
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PPUSH
5059: CALL_OW 69
5063: PUSH
5064: LD_INT 1
5066: ARRAY
5067: PPUSH
5068: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5072: LD_INT 22
5074: PUSH
5075: LD_INT 1
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: LD_INT 21
5084: PUSH
5085: LD_INT 2
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PPUSH
5096: CALL_OW 69
5100: PPUSH
5101: LD_INT 69
5103: PPUSH
5104: LD_INT 94
5106: PPUSH
5107: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5111: LD_EXP 1
5115: PPUSH
5116: LD_STRING D2-JMM-1
5118: PPUSH
5119: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
5123: LD_INT 22
5125: PUSH
5126: LD_INT 1
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PUSH
5133: LD_INT 21
5135: PUSH
5136: LD_INT 2
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PPUSH
5147: CALL_OW 69
5151: PUSH
5152: LD_INT 1
5154: ARRAY
5155: PPUSH
5156: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5160: LD_EXP 2
5164: PPUSH
5165: LD_STRING D2-Huck-1
5167: PPUSH
5168: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
5172: LD_INT 22
5174: PUSH
5175: LD_INT 1
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 21
5184: PUSH
5185: LD_INT 2
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PPUSH
5196: CALL_OW 69
5200: PUSH
5201: LD_INT 1
5203: ARRAY
5204: PPUSH
5205: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5209: LD_EXP 1
5213: PPUSH
5214: LD_STRING D2-JMM-2
5216: PPUSH
5217: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
5221: LD_INT 22
5223: PUSH
5224: LD_INT 1
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PUSH
5231: LD_INT 21
5233: PUSH
5234: LD_INT 2
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PPUSH
5245: CALL_OW 69
5249: PUSH
5250: LD_INT 1
5252: ARRAY
5253: PPUSH
5254: CALL_OW 87
// InGameOff ;
5258: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5262: LD_STRING M1
5264: PPUSH
5265: CALL_OW 337
// SaveForQuickRestart ;
5269: CALL_OW 22
// end ;
5273: LD_VAR 0 1
5277: RET
// every 10 10$0 do
5278: GO 5280
5280: DISABLE
// begin DialogueOn ;
5281: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5285: LD_EXP 15
5289: PPUSH
5290: LD_STRING D3-Pow-1
5292: PPUSH
5293: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5297: LD_EXP 1
5301: PPUSH
5302: LD_STRING D3-JMM-1
5304: PPUSH
5305: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5309: LD_EXP 15
5313: PPUSH
5314: LD_STRING D3-Pow-2
5316: PPUSH
5317: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5321: LD_EXP 1
5325: PPUSH
5326: LD_STRING D3-JMM-2
5328: PPUSH
5329: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5333: LD_EXP 15
5337: PPUSH
5338: LD_STRING D3-Pow-3
5340: PPUSH
5341: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5345: LD_EXP 1
5349: PPUSH
5350: LD_STRING D3-JMM-3
5352: PPUSH
5353: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5357: LD_EXP 15
5361: PPUSH
5362: LD_STRING D3-Pow-4
5364: PPUSH
5365: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5369: LD_EXP 1
5373: PPUSH
5374: LD_STRING D3-JMM-4
5376: PPUSH
5377: CALL_OW 88
// DialogueOff ;
5381: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5385: LD_STRING M2
5387: PPUSH
5388: CALL_OW 337
// wait ( 2 2$30 ) ;
5392: LD_INT 5250
5394: PPUSH
5395: CALL_OW 67
// PrepareBurlak ;
5399: CALL 2244 0 0
// BurlakArmy ;
5403: CALL 2426 0 0
// end ;
5407: END
// every 0 0$1 trigger See ( 1 , Masha ) do
5408: LD_INT 1
5410: PPUSH
5411: LD_EXP 18
5415: PPUSH
5416: CALL_OW 292
5420: IFFALSE 5579
5422: GO 5424
5424: DISABLE
// begin DialogueOn ;
5425: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5429: LD_EXP 18
5433: PPUSH
5434: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5438: LD_INT 22
5440: PUSH
5441: LD_INT 1
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 26
5450: PUSH
5451: LD_INT 1
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: LD_INT 2
5460: PUSH
5461: LD_INT 25
5463: PUSH
5464: LD_INT 1
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: PUSH
5471: LD_INT 25
5473: PUSH
5474: LD_INT 2
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 25
5483: PUSH
5484: LD_INT 3
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 25
5493: PUSH
5494: LD_INT 4
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 25
5503: PUSH
5504: LD_INT 5
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: PPUSH
5524: CALL_OW 69
5528: PPUSH
5529: LD_STRING D5-Sol1-1
5531: PPUSH
5532: LD_STRING D5-FSol1-1
5534: PPUSH
5535: CALL 7962 0 3
// Say ( JMM , D5-JMM-1 ) ;
5539: LD_EXP 1
5543: PPUSH
5544: LD_STRING D5-JMM-1
5546: PPUSH
5547: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5551: LD_EXP 17
5555: PPUSH
5556: LD_STRING DAmer-Bur-1
5558: PPUSH
5559: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5563: LD_EXP 1
5567: PPUSH
5568: LD_STRING DAmer-JMM-1
5570: PPUSH
5571: CALL_OW 88
// DialogueOff ;
5575: CALL_OW 7
// end ;
5579: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5580: LD_INT 4
5582: PPUSH
5583: LD_INT 22
5585: PUSH
5586: LD_INT 7
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PPUSH
5593: CALL_OW 70
5597: IFFALSE 5996
5599: GO 5601
5601: DISABLE
5602: LD_INT 0
5604: PPUSH
// begin enable ;
5605: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5606: LD_ADDR_VAR 0 1
5610: PUSH
5611: LD_INT 4
5613: PPUSH
5614: LD_INT 22
5616: PUSH
5617: LD_INT 7
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: PPUSH
5624: CALL_OW 70
5628: PUSH
5629: FOR_IN
5630: IFFALSE 5994
// begin if i = Burlak or i = Masha then
5632: LD_VAR 0 1
5636: PUSH
5637: LD_EXP 17
5641: EQUAL
5642: PUSH
5643: LD_VAR 0 1
5647: PUSH
5648: LD_EXP 18
5652: EQUAL
5653: OR
5654: IFFALSE 5801
// begin RemoveUnit ( i ) ;
5656: LD_VAR 0 1
5660: PPUSH
5661: CALL_OW 64
// DialogueOn ;
5665: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5669: LD_EXP 1
5673: PPUSH
5674: LD_STRING D5a-JMM-1
5676: PPUSH
5677: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5681: LD_INT 22
5683: PUSH
5684: LD_INT 1
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: LD_INT 26
5693: PUSH
5694: LD_INT 1
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PUSH
5701: LD_INT 2
5703: PUSH
5704: LD_INT 25
5706: PUSH
5707: LD_INT 1
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: PUSH
5714: LD_INT 25
5716: PUSH
5717: LD_INT 2
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: PUSH
5724: LD_INT 25
5726: PUSH
5727: LD_INT 3
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 25
5736: PUSH
5737: LD_INT 4
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PUSH
5744: LD_INT 25
5746: PUSH
5747: LD_INT 5
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PPUSH
5772: LD_STRING D5a-Sol1-1
5774: PPUSH
5775: LD_STRING D5-FSol1-1
5777: PPUSH
5778: CALL 7962 0 3
// DialogueOff ;
5782: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5786: LD_STRING M2b
5788: PPUSH
5789: CALL_OW 337
// spawnBurlak = 0 ;
5793: LD_ADDR_EXP 27
5797: PUSH
5798: LD_INT 0
5800: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 247
5810: PUSH
5811: LD_INT 2
5813: EQUAL
5814: PUSH
5815: LD_VAR 0 1
5819: PPUSH
5820: CALL_OW 263
5824: PUSH
5825: LD_INT 1
5827: EQUAL
5828: AND
5829: IFFALSE 5957
// begin case IsDrivenBy ( i ) of Gnyevko :
5831: LD_VAR 0 1
5835: PPUSH
5836: CALL_OW 311
5840: PUSH
5841: LD_EXP 19
5845: DOUBLE
5846: EQUAL
5847: IFTRUE 5851
5849: GO 5864
5851: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
5852: LD_INT 1
5854: PPUSH
5855: LD_STRING 13_Gnyevko_1
5857: PPUSH
5858: CALL_OW 39
5862: GO 5957
5864: LD_EXP 20
5868: DOUBLE
5869: EQUAL
5870: IFTRUE 5874
5872: GO 5887
5874: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
5875: LD_INT 1
5877: PPUSH
5878: LD_STRING 13_Titov_1
5880: PPUSH
5881: CALL_OW 39
5885: GO 5957
5887: LD_EXP 21
5891: DOUBLE
5892: EQUAL
5893: IFTRUE 5897
5895: GO 5910
5897: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
5898: LD_INT 1
5900: PPUSH
5901: LD_STRING 13_Xavier_1
5903: PPUSH
5904: CALL_OW 39
5908: GO 5957
5910: LD_EXP 22
5914: DOUBLE
5915: EQUAL
5916: IFTRUE 5920
5918: GO 5933
5920: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
5921: LD_INT 1
5923: PPUSH
5924: LD_STRING 13_Belkov_1
5926: PPUSH
5927: CALL_OW 39
5931: GO 5957
5933: LD_EXP 23
5937: DOUBLE
5938: EQUAL
5939: IFTRUE 5943
5941: GO 5956
5943: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
5944: LD_INT 1
5946: PPUSH
5947: LD_STRING 13_Lipshchin_1
5949: PPUSH
5950: CALL_OW 39
5954: GO 5957
5956: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
5957: LD_VAR 0 1
5961: PPUSH
5962: CALL_OW 264
5966: PUSH
5967: LD_INT 49
5969: EQUAL
5970: IFFALSE 5983
// DestroyUnit ( i ) else
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 65
5981: GO 5992
// RemoveUnit ( i ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: CALL_OW 64
// end ;
5992: GO 5629
5994: POP
5995: POP
// end ;
5996: PPOPN 1
5998: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
5999: LD_EXP 17
6003: PPUSH
6004: CALL_OW 302
6008: PUSH
6009: LD_EXP 18
6013: PPUSH
6014: CALL_OW 256
6018: PUSH
6019: LD_INT 500
6021: LESS
6022: AND
6023: PUSH
6024: LD_EXP 18
6028: PPUSH
6029: CALL_OW 255
6033: PUSH
6034: LD_INT 7
6036: EQUAL
6037: AND
6038: IFFALSE 6058
6040: GO 6042
6042: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6043: LD_EXP 17
6047: PPUSH
6048: LD_INT 107
6050: PPUSH
6051: LD_INT 118
6053: PPUSH
6054: CALL_OW 111
6058: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6059: LD_EXP 17
6063: PPUSH
6064: CALL_OW 301
6068: PUSH
6069: LD_EXP 27
6073: PUSH
6074: LD_INT 1
6076: EQUAL
6077: AND
6078: IFFALSE 6211
6080: GO 6082
6082: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6083: LD_EXP 1
6087: PPUSH
6088: LD_STRING D5b-JMM-1
6090: PPUSH
6091: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6095: LD_INT 22
6097: PUSH
6098: LD_INT 1
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 26
6107: PUSH
6108: LD_INT 1
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: LD_INT 2
6117: PUSH
6118: LD_INT 25
6120: PUSH
6121: LD_INT 1
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 25
6130: PUSH
6131: LD_INT 2
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 25
6140: PUSH
6141: LD_INT 3
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 25
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 25
6160: PUSH
6161: LD_INT 5
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 69
6185: PPUSH
6186: LD_STRING D5b-Sol1-1
6188: PPUSH
6189: LD_STRING 
6191: PPUSH
6192: CALL 7962 0 3
// ChangeMissionObjectives ( M2a ) ;
6196: LD_STRING M2a
6198: PPUSH
6199: CALL_OW 337
// burlakStatus := 1 ;
6203: LD_ADDR_EXP 28
6207: PUSH
6208: LD_INT 1
6210: ST_TO_ADDR
// end ;
6211: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6212: LD_EXP 2
6216: PPUSH
6217: CALL_OW 301
6221: IFFALSE 6358
6223: GO 6225
6225: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6226: LD_EXP 1
6230: PPUSH
6231: LD_STRING D6-JMM-1
6233: PPUSH
6234: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6238: LD_INT 22
6240: PUSH
6241: LD_INT 1
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 26
6250: PUSH
6251: LD_INT 1
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 2
6260: PUSH
6261: LD_INT 25
6263: PUSH
6264: LD_INT 1
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 25
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 3
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 25
6293: PUSH
6294: LD_INT 4
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 25
6303: PUSH
6304: LD_INT 5
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: LIST
6323: PPUSH
6324: CALL_OW 69
6328: PPUSH
6329: LD_STRING D6-Sol1-1
6331: PPUSH
6332: LD_STRING 
6334: PPUSH
6335: CALL 7962 0 3
// Say ( JMM , D6-JMM-2 ) ;
6339: LD_EXP 1
6343: PPUSH
6344: LD_STRING D6-JMM-2
6346: PPUSH
6347: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6351: LD_STRING M1a
6353: PPUSH
6354: CALL_OW 337
// end ;
6358: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6359: LD_INT 25
6361: PPUSH
6362: LD_INT 1
6364: PPUSH
6365: CALL_OW 321
6369: PUSH
6370: LD_INT 2
6372: EQUAL
6373: IFFALSE 6390
6375: GO 6377
6377: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6378: LD_EXP 2
6382: PPUSH
6383: LD_STRING D6-Huck-2
6385: PPUSH
6386: CALL_OW 88
6390: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6391: LD_INT 22
6393: PUSH
6394: LD_INT 1
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 2
6403: PUSH
6404: LD_INT 34
6406: PUSH
6407: LD_INT 8
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PUSH
6414: LD_INT 35
6416: PUSH
6417: LD_INT 8
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: LIST
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PPUSH
6433: CALL_OW 69
6437: PUSH
6438: LD_INT 5
6440: PPUSH
6441: LD_INT 22
6443: PUSH
6444: LD_INT 1
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 21
6453: PUSH
6454: LD_INT 3
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 30
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 3
6473: PUSH
6474: LD_INT 57
6476: PUSH
6477: EMPTY
6478: LIST
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: PPUSH
6490: CALL_OW 70
6494: AND
6495: PUSH
6496: LD_INT 5
6498: PPUSH
6499: LD_INT 22
6501: PUSH
6502: LD_INT 1
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 21
6511: PUSH
6512: LD_INT 3
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: PUSH
6519: LD_INT 30
6521: PUSH
6522: LD_INT 5
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 3
6531: PUSH
6532: LD_INT 57
6534: PUSH
6535: EMPTY
6536: LIST
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: PPUSH
6548: CALL_OW 70
6552: AND
6553: IFFALSE 6595
6555: GO 6557
6557: DISABLE
// begin DialogueOn ;
6558: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6562: LD_EXP 1
6566: PPUSH
6567: LD_STRING D7-JMM-1
6569: PPUSH
6570: CALL_OW 88
// DialogueOff ;
6574: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6578: LD_STRING M4
6580: PPUSH
6581: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6585: LD_INT 5
6587: PPUSH
6588: LD_INT 0
6590: PPUSH
6591: CALL_OW 424
// end ;
6595: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6596: LD_INT 6
6598: PPUSH
6599: LD_INT 22
6601: PUSH
6602: LD_INT 1
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 25
6611: PUSH
6612: LD_INT 4
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PPUSH
6623: CALL_OW 70
6627: PUSH
6628: LD_EXP 37
6632: PUSH
6633: LD_INT 1
6635: EQUAL
6636: AND
6637: PUSH
6638: LD_EXP 29
6642: PUSH
6643: LD_INT 0
6645: EQUAL
6646: AND
6647: IFFALSE 6712
6649: GO 6651
6651: DISABLE
// begin enable ;
6652: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6653: LD_ADDR_EXP 26
6657: PUSH
6658: LD_INT 6
6660: PPUSH
6661: LD_INT 22
6663: PUSH
6664: LD_INT 1
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 25
6673: PUSH
6674: LD_INT 4
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 70
6689: PUSH
6690: LD_INT 1
6692: ARRAY
6693: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6694: LD_INT 6
6696: PPUSH
6697: LD_INT 0
6699: PPUSH
6700: CALL_OW 424
// radationResearched := 1 ;
6704: LD_ADDR_EXP 29
6708: PUSH
6709: LD_INT 1
6711: ST_TO_ADDR
// end ;
6712: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6713: LD_EXP 26
6717: PPUSH
6718: CALL_OW 301
6722: PUSH
6723: LD_EXP 29
6727: PUSH
6728: LD_INT 1
6730: EQUAL
6731: AND
6732: IFFALSE 6768
6734: GO 6736
6736: DISABLE
// begin enable ;
6737: ENABLE
// radationResearched = 0 ;
6738: LD_ADDR_EXP 29
6742: PUSH
6743: LD_INT 0
6745: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6746: LD_INT 6
6748: PPUSH
6749: LD_INT 1
6751: PPUSH
6752: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6756: LD_EXP 1
6760: PPUSH
6761: LD_STRING D9a-JMM-1
6763: PPUSH
6764: CALL_OW 88
// end ; end_of_file
6768: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6769: LD_VAR 0 5
6773: PUSH
6774: LD_INT 8
6776: EQUAL
6777: PUSH
6778: LD_EXP 35
6782: PUSH
6783: LD_INT 0
6785: EQUAL
6786: AND
6787: IFFALSE 6840
// begin eventVar1 := 1 ;
6789: LD_ADDR_EXP 35
6793: PUSH
6794: LD_INT 1
6796: ST_TO_ADDR
// DialogueOn ;
6797: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6801: LD_EXP 1
6805: PPUSH
6806: LD_STRING D6a-JMM-1
6808: PPUSH
6809: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
6813: LD_EXP 15
6817: PPUSH
6818: LD_STRING D6a-Pow-1
6820: PPUSH
6821: CALL_OW 94
// DialogueOff ;
6825: CALL_OW 7
// wait ( 3 3$0 ) ;
6829: LD_INT 6300
6831: PPUSH
6832: CALL_OW 67
// PowellSupport ;
6836: CALL 1820 0 0
// end ; end ;
6840: PPOPN 5
6842: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6843: LD_VAR 0 1
6847: PPUSH
6848: CALL 24794 0 1
// if un = JMM then
6852: LD_VAR 0 1
6856: PUSH
6857: LD_EXP 1
6861: EQUAL
6862: IFFALSE 6871
// YouLost ( JMM ) ;
6864: LD_STRING JMM
6866: PPUSH
6867: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
6871: LD_VAR 0 1
6875: PPUSH
6876: CALL_OW 264
6880: PUSH
6881: LD_INT 31
6883: EQUAL
6884: IFFALSE 6900
// achivCounter := achivCounter + 1 ;
6886: LD_ADDR_EXP 41
6890: PUSH
6891: LD_EXP 41
6895: PUSH
6896: LD_INT 1
6898: PLUS
6899: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
6900: LD_VAR 0 1
6904: PPUSH
6905: CALL_OW 255
6909: PUSH
6910: LD_INT 1
6912: NONEQUAL
6913: PUSH
6914: LD_VAR 0 1
6918: PPUSH
6919: CALL_OW 247
6923: PUSH
6924: LD_INT 2
6926: EQUAL
6927: AND
6928: IFFALSE 6944
// destroyCounter := destroyCounter + 1 ;
6930: LD_ADDR_EXP 42
6934: PUSH
6935: LD_EXP 42
6939: PUSH
6940: LD_INT 1
6942: PLUS
6943: ST_TO_ADDR
// end ;
6944: PPOPN 1
6946: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
6947: LD_VAR 0 2
6951: PUSH
6952: LD_EXP 18
6956: EQUAL
6957: IFFALSE 6966
// SetAchievement ( ACH_MASHA ) ;
6959: LD_STRING ACH_MASHA
6961: PPUSH
6962: CALL_OW 543
// end ;
6966: PPOPN 4
6968: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
6969: LD_VAR 0 1
6973: PPUSH
6974: LD_VAR 0 2
6978: PPUSH
6979: CALL 24916 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
6983: LD_VAR 0 1
6987: PPUSH
6988: CALL_OW 264
6992: PUSH
6993: LD_INT 8
6995: EQUAL
6996: PUSH
6997: LD_EXP 36
7001: PUSH
7002: LD_INT 0
7004: EQUAL
7005: AND
7006: IFFALSE 7075
// begin eventVar2 := 1 ;
7008: LD_ADDR_EXP 36
7012: PUSH
7013: LD_INT 1
7015: ST_TO_ADDR
// DialogueOn ;
7016: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7020: LD_EXP 1
7024: PPUSH
7025: LD_STRING D6b-JMM-1
7027: PPUSH
7028: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7032: LD_EXP 15
7036: PPUSH
7037: LD_STRING D6b-Pow-1
7039: PPUSH
7040: CALL_OW 94
// DialogueOff ;
7044: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7048: LD_INT 5
7050: PPUSH
7051: LD_INT 1
7053: PPUSH
7054: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7058: LD_INT 7
7060: PPUSH
7061: LD_INT 1
7063: PPUSH
7064: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7068: LD_STRING M3
7070: PPUSH
7071: CALL_OW 337
// end ; end ;
7075: PPOPN 2
7077: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7078: LD_VAR 0 2
7082: PPUSH
7083: LD_VAR 0 3
7087: PPUSH
7088: LD_INT 5
7090: PPUSH
7091: CALL_OW 309
7095: PUSH
7096: LD_EXP 37
7100: PUSH
7101: LD_INT 0
7103: EQUAL
7104: AND
7105: IFFALSE 7330
// begin eventVar3 := 1 ;
7107: LD_ADDR_EXP 37
7111: PUSH
7112: LD_INT 1
7114: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7115: LD_INT 175
7117: PPUSH
7118: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7122: LD_INT 7
7124: PPUSH
7125: LD_INT 22
7127: PUSH
7128: LD_INT 1
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: LD_INT 21
7137: PUSH
7138: LD_INT 2
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 34
7147: PUSH
7148: LD_INT 11
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: LIST
7159: PPUSH
7160: CALL_OW 70
7164: IFFALSE 7183
// begin radarOnSpot = 1 ;
7166: LD_ADDR_EXP 30
7170: PUSH
7171: LD_INT 1
7173: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7174: LD_STRING M3a
7176: PPUSH
7177: CALL_OW 337
// end else
7181: GO 7190
// ChangeMissionObjectives ( M3b ) ;
7183: LD_STRING M3b
7185: PPUSH
7186: CALL_OW 337
// DialogueOn ;
7190: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7194: LD_EXP 2
7198: PPUSH
7199: LD_STRING D8-Huck-1
7201: PPUSH
7202: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7206: LD_EXP 1
7210: PPUSH
7211: LD_STRING D8-JMM-1
7213: PPUSH
7214: CALL_OW 88
// if IsOk ( Stevens ) then
7218: LD_EXP 2
7222: PPUSH
7223: CALL_OW 302
7227: IFFALSE 7289
// begin Say ( Stevens , D8-Huck-2 ) ;
7229: LD_EXP 2
7233: PPUSH
7234: LD_STRING D8-Huck-2
7236: PPUSH
7237: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7241: LD_EXP 1
7245: PPUSH
7246: LD_STRING D8-JMM-2
7248: PPUSH
7249: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7253: LD_EXP 2
7257: PPUSH
7258: LD_STRING D8-Huck-3
7260: PPUSH
7261: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7265: LD_EXP 1
7269: PPUSH
7270: LD_STRING D8-JMM-3
7272: PPUSH
7273: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7277: LD_EXP 2
7281: PPUSH
7282: LD_STRING D8-Huck-4
7284: PPUSH
7285: CALL_OW 88
// end ; DialogueOff ;
7289: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7293: LD_INT 5
7295: PPUSH
7296: LD_INT 0
7298: PPUSH
7299: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7303: LD_INT 7
7305: PPUSH
7306: LD_INT 0
7308: PPUSH
7309: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7313: LD_INT 6
7315: PPUSH
7316: LD_INT 1
7318: PPUSH
7319: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7323: LD_STRING M5
7325: PPUSH
7326: CALL_OW 337
// end ; end ;
7330: PPOPN 3
7332: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7333: LD_EXP 26
7337: PPUSH
7338: CALL_OW 302
7342: PUSH
7343: LD_VAR 0 2
7347: PUSH
7348: LD_EXP 26
7352: EQUAL
7353: AND
7354: PUSH
7355: LD_EXP 38
7359: PUSH
7360: LD_INT 0
7362: EQUAL
7363: AND
7364: PUSH
7365: LD_EXP 37
7369: PUSH
7370: LD_INT 1
7372: EQUAL
7373: AND
7374: PUSH
7375: LD_VAR 0 1
7379: PPUSH
7380: LD_INT 1
7382: PPUSH
7383: CALL_OW 268
7387: PUSH
7388: LD_INT 11
7390: EQUAL
7391: PUSH
7392: LD_VAR 0 1
7396: PPUSH
7397: LD_INT 2
7399: PPUSH
7400: CALL_OW 268
7404: PUSH
7405: LD_INT 11
7407: EQUAL
7408: OR
7409: AND
7410: IFFALSE 7420
// eventVar4 := 1 ;
7412: LD_ADDR_EXP 38
7416: PUSH
7417: LD_INT 1
7419: ST_TO_ADDR
// end ;
7420: PPOPN 2
7422: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7423: LD_INT 0
7425: PPUSH
7426: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7427: LD_VAR 0 1
7431: PPUSH
7432: CALL_OW 248
7436: PUSH
7437: LD_INT 2
7439: EQUAL
7440: IFFALSE 7718
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
7442: LD_ADDR_EXP 32
7446: PUSH
7447: LD_EXP 32
7451: PUSH
7452: LD_INT 1
7454: PLUS
7455: ST_TO_ADDR
// for i := 1 to sibDeposits do
7456: LD_ADDR_VAR 0 4
7460: PUSH
7461: DOUBLE
7462: LD_INT 1
7464: DEC
7465: ST_TO_ADDR
7466: LD_EXP 31
7470: PUSH
7471: FOR_TO
7472: IFFALSE 7574
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7474: LD_EXP 31
7478: PUSH
7479: LD_VAR 0 4
7483: ARRAY
7484: PUSH
7485: LD_INT 1
7487: ARRAY
7488: PUSH
7489: LD_VAR 0 2
7493: EQUAL
7494: PUSH
7495: LD_EXP 31
7499: PUSH
7500: LD_VAR 0 4
7504: ARRAY
7505: PUSH
7506: LD_INT 2
7508: ARRAY
7509: PUSH
7510: LD_VAR 0 3
7514: EQUAL
7515: AND
7516: IFFALSE 7572
// begin sibDeposits := Delete ( sibDeposits , [ i ] [ 1 ] ) ;
7518: LD_ADDR_EXP 31
7522: PUSH
7523: LD_EXP 31
7527: PPUSH
7528: LD_VAR 0 4
7532: PUSH
7533: EMPTY
7534: LIST
7535: PUSH
7536: LD_INT 1
7538: ARRAY
7539: PPUSH
7540: CALL_OW 3
7544: ST_TO_ADDR
// sibDeposits := Delete ( sibDeposits , [ i ] [ 2 ] ) ;
7545: LD_ADDR_EXP 31
7549: PUSH
7550: LD_EXP 31
7554: PPUSH
7555: LD_VAR 0 4
7559: PUSH
7560: EMPTY
7561: LIST
7562: PUSH
7563: LD_INT 2
7565: ARRAY
7566: PPUSH
7567: CALL_OW 3
7571: ST_TO_ADDR
// end ;
7572: GO 7471
7574: POP
7575: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7576: LD_EXP 39
7580: PUSH
7581: LD_INT 0
7583: EQUAL
7584: PUSH
7585: LD_VAR 0 2
7589: PPUSH
7590: LD_VAR 0 3
7594: PPUSH
7595: CALL_OW 428
7599: PUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 1
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PPUSH
7610: CALL_OW 69
7614: IN
7615: AND
7616: IFFALSE 7718
// begin eventVar5 := 1 ;
7618: LD_ADDR_EXP 39
7622: PUSH
7623: LD_INT 1
7625: ST_TO_ADDR
// DialogueOn ;
7626: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7630: LD_EXP 2
7634: PPUSH
7635: LD_STRING D4-Sci1-1
7637: PPUSH
7638: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7642: LD_EXP 1
7646: PPUSH
7647: LD_STRING D4-JMM-1
7649: PPUSH
7650: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7654: LD_EXP 2
7658: PPUSH
7659: LD_STRING D4-Sci1-2
7661: PPUSH
7662: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7666: LD_EXP 1
7670: PPUSH
7671: LD_STRING D4-JMM-2
7673: PPUSH
7674: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7678: LD_EXP 2
7682: PPUSH
7683: LD_STRING D4-Sci1-3
7685: PPUSH
7686: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7690: LD_EXP 1
7694: PPUSH
7695: LD_STRING D4-JMM-3
7697: PPUSH
7698: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7702: LD_EXP 1
7706: PPUSH
7707: LD_STRING D4-JMM-3a
7709: PPUSH
7710: CALL_OW 88
// DialogueOff ;
7714: CALL_OW 7
// end ; end ; end ;
7718: PPOPN 5
7720: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7721: LD_VAR 0 1
7725: PPUSH
7726: CALL_OW 255
7730: PUSH
7731: LD_INT 1
7733: EQUAL
7734: PUSH
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 266
7744: PUSH
7745: LD_INT 0
7747: EQUAL
7748: AND
7749: PUSH
7750: LD_INT 22
7752: PUSH
7753: LD_INT 1
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 21
7762: PUSH
7763: LD_INT 3
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PUSH
7770: LD_INT 2
7772: PUSH
7773: LD_INT 30
7775: PUSH
7776: LD_INT 0
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 30
7785: PUSH
7786: LD_INT 1
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: PPUSH
7803: CALL_OW 69
7807: PUSH
7808: LD_INT 1
7810: EQUAL
7811: AND
7812: IFFALSE 7826
// SetBName ( building , omega ) ;
7814: LD_VAR 0 1
7818: PPUSH
7819: LD_STRING omega
7821: PPUSH
7822: CALL_OW 500
// end ;
7826: PPOPN 2
7828: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7829: LD_VAR 0 1
7833: PPUSH
7834: CALL 24900 0 1
// end ;
7838: PPOPN 1
7840: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7841: LD_VAR 0 1
7845: PUSH
7846: LD_EXP 43
7850: EQUAL
7851: IFFALSE 7857
// ArabianAttack ;
7853: CALL 9795 0 0
// if event = eventRussianAttack then
7857: LD_VAR 0 1
7861: PUSH
7862: LD_EXP 44
7866: EQUAL
7867: IFFALSE 7873
// RussianAttack ;
7869: CALL 10058 0 0
// end ;
7873: PPOPN 1
7875: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
7876: LD_VAR 0 1
7880: PPUSH
7881: CALL_OW 255
7885: PUSH
7886: LD_INT 3
7888: PUSH
7889: LD_INT 8
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: IN
7896: IFFALSE 7959
// begin ComMoveXY ( driver , 41 , 2 ) ;
7898: LD_VAR 0 1
7902: PPUSH
7903: LD_INT 41
7905: PPUSH
7906: LD_INT 2
7908: PPUSH
7909: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7913: LD_INT 35
7915: PPUSH
7916: CALL_OW 67
// if IsDead ( driver ) then
7920: LD_VAR 0 1
7924: PPUSH
7925: CALL_OW 301
7929: IFFALSE 7933
// exit ;
7931: GO 7959
// until IsAt ( driver , 41 , 2 ) ;
7933: LD_VAR 0 1
7937: PPUSH
7938: LD_INT 41
7940: PPUSH
7941: LD_INT 2
7943: PPUSH
7944: CALL_OW 307
7948: IFFALSE 7913
// RemoveUnit ( driver ) ;
7950: LD_VAR 0 1
7954: PPUSH
7955: CALL_OW 64
// end ; end ; end_of_file
7959: PPOPN 4
7961: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
7967: LD_ADDR_VAR 0 1
7971: PUSH
7972: LD_VAR 0 1
7976: PUSH
7977: LD_EXP 1
7981: PUSH
7982: LD_EXP 2
7986: PUSH
7987: LD_EXP 3
7991: PUSH
7992: LD_EXP 4
7996: PUSH
7997: LD_EXP 5
8001: PUSH
8002: LD_EXP 6
8006: PUSH
8007: LD_EXP 7
8011: PUSH
8012: LD_EXP 8
8016: PUSH
8017: LD_EXP 9
8021: PUSH
8022: LD_EXP 10
8026: PUSH
8027: LD_EXP 11
8031: PUSH
8032: LD_EXP 12
8036: PUSH
8037: LD_EXP 13
8041: PUSH
8042: LD_EXP 14
8046: PUSH
8047: LD_EXP 15
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: DIFF
8069: ST_TO_ADDR
// if not characters then
8070: LD_VAR 0 1
8074: NOT
8075: IFFALSE 8079
// exit ;
8077: GO 8158
// speaker := characters [ rand ( 1 , characters ) ] ;
8079: LD_ADDR_VAR 0 6
8083: PUSH
8084: LD_VAR 0 1
8088: PUSH
8089: LD_INT 1
8091: PPUSH
8092: LD_VAR 0 1
8096: PPUSH
8097: CALL_OW 12
8101: ARRAY
8102: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8103: LD_VAR 0 6
8107: PPUSH
8108: CALL_OW 258
8112: PUSH
8113: LD_INT 1
8115: EQUAL
8116: IFFALSE 8134
// Say ( speaker , dialogMID ) else
8118: LD_VAR 0 6
8122: PPUSH
8123: LD_VAR 0 2
8127: PPUSH
8128: CALL_OW 88
8132: GO 8148
// Say ( speaker , dialogFID ) ;
8134: LD_VAR 0 6
8138: PPUSH
8139: LD_VAR 0 3
8143: PPUSH
8144: CALL_OW 88
// result := speaker ;
8148: LD_ADDR_VAR 0 4
8152: PUSH
8153: LD_VAR 0 6
8157: ST_TO_ADDR
// end ;
8158: LD_VAR 0 4
8162: RET
// export function PrepareDifficulty ; begin
8163: LD_INT 0
8165: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8166: LD_INT 5
8168: PPUSH
8169: LD_INT 8
8171: PPUSH
8172: LD_INT 2
8174: PPUSH
8175: CALL_OW 322
// if Difficulty = 1 then
8179: LD_OWVAR 67
8183: PUSH
8184: LD_INT 1
8186: EQUAL
8187: IFFALSE 8306
// begin SetTech ( 66 , 8 , state_researched ) ;
8189: LD_INT 66
8191: PPUSH
8192: LD_INT 8
8194: PPUSH
8195: LD_INT 2
8197: PPUSH
8198: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8202: LD_INT 67
8204: PPUSH
8205: LD_INT 8
8207: PPUSH
8208: LD_INT 0
8210: PPUSH
8211: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8215: LD_INT 68
8217: PPUSH
8218: LD_INT 8
8220: PPUSH
8221: LD_INT 0
8223: PPUSH
8224: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8228: LD_INT 51
8230: PPUSH
8231: LD_INT 8
8233: PPUSH
8234: LD_INT 2
8236: PPUSH
8237: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8241: LD_INT 52
8243: PPUSH
8244: LD_INT 8
8246: PPUSH
8247: LD_INT 0
8249: PPUSH
8250: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8254: LD_INT 53
8256: PPUSH
8257: LD_INT 8
8259: PPUSH
8260: LD_INT 0
8262: PPUSH
8263: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8267: LD_INT 60
8269: PPUSH
8270: LD_INT 8
8272: PPUSH
8273: LD_INT 2
8275: PPUSH
8276: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8280: LD_INT 61
8282: PPUSH
8283: LD_INT 8
8285: PPUSH
8286: LD_INT 0
8288: PPUSH
8289: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8293: LD_INT 62
8295: PPUSH
8296: LD_INT 8
8298: PPUSH
8299: LD_INT 0
8301: PPUSH
8302: CALL_OW 322
// end ; if Difficulty = 2 then
8306: LD_OWVAR 67
8310: PUSH
8311: LD_INT 2
8313: EQUAL
8314: IFFALSE 8433
// begin SetTech ( 66 , 8 , state_researched ) ;
8316: LD_INT 66
8318: PPUSH
8319: LD_INT 8
8321: PPUSH
8322: LD_INT 2
8324: PPUSH
8325: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8329: LD_INT 67
8331: PPUSH
8332: LD_INT 8
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8342: LD_INT 68
8344: PPUSH
8345: LD_INT 8
8347: PPUSH
8348: LD_INT 0
8350: PPUSH
8351: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8355: LD_INT 51
8357: PPUSH
8358: LD_INT 8
8360: PPUSH
8361: LD_INT 2
8363: PPUSH
8364: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8368: LD_INT 52
8370: PPUSH
8371: LD_INT 8
8373: PPUSH
8374: LD_INT 2
8376: PPUSH
8377: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8381: LD_INT 53
8383: PPUSH
8384: LD_INT 8
8386: PPUSH
8387: LD_INT 2
8389: PPUSH
8390: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8394: LD_INT 60
8396: PPUSH
8397: LD_INT 8
8399: PPUSH
8400: LD_INT 2
8402: PPUSH
8403: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8407: LD_INT 61
8409: PPUSH
8410: LD_INT 8
8412: PPUSH
8413: LD_INT 2
8415: PPUSH
8416: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8420: LD_INT 62
8422: PPUSH
8423: LD_INT 8
8425: PPUSH
8426: LD_INT 0
8428: PPUSH
8429: CALL_OW 322
// end ; if Difficulty >= 3 then
8433: LD_OWVAR 67
8437: PUSH
8438: LD_INT 3
8440: GREATEREQUAL
8441: IFFALSE 8560
// begin SetTech ( 66 , 8 , state_researched ) ;
8443: LD_INT 66
8445: PPUSH
8446: LD_INT 8
8448: PPUSH
8449: LD_INT 2
8451: PPUSH
8452: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8456: LD_INT 67
8458: PPUSH
8459: LD_INT 8
8461: PPUSH
8462: LD_INT 2
8464: PPUSH
8465: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8469: LD_INT 68
8471: PPUSH
8472: LD_INT 8
8474: PPUSH
8475: LD_INT 0
8477: PPUSH
8478: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8482: LD_INT 51
8484: PPUSH
8485: LD_INT 8
8487: PPUSH
8488: LD_INT 2
8490: PPUSH
8491: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8495: LD_INT 52
8497: PPUSH
8498: LD_INT 8
8500: PPUSH
8501: LD_INT 2
8503: PPUSH
8504: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8508: LD_INT 53
8510: PPUSH
8511: LD_INT 8
8513: PPUSH
8514: LD_INT 2
8516: PPUSH
8517: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8521: LD_INT 60
8523: PPUSH
8524: LD_INT 8
8526: PPUSH
8527: LD_INT 2
8529: PPUSH
8530: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8534: LD_INT 61
8536: PPUSH
8537: LD_INT 8
8539: PPUSH
8540: LD_INT 2
8542: PPUSH
8543: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8547: LD_INT 62
8549: PPUSH
8550: LD_INT 8
8552: PPUSH
8553: LD_INT 0
8555: PPUSH
8556: CALL_OW 322
// end ; end ;
8560: LD_VAR 0 1
8564: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8565: LD_INT 0
8567: PPUSH
8568: PPUSH
// for i in charactersList do
8569: LD_ADDR_VAR 0 4
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: FOR_IN
8580: IFFALSE 8598
// SaveCharacters ( i , ident ) ;
8582: LD_VAR 0 4
8586: PPUSH
8587: LD_VAR 0 2
8591: PPUSH
8592: CALL_OW 38
8596: GO 8579
8598: POP
8599: POP
// end ; end_of_file
8600: LD_VAR 0 3
8604: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8605: LD_EXP 38
8609: PUSH
8610: LD_INT 1
8612: EQUAL
8613: IFFALSE 9515
8615: GO 8617
8617: DISABLE
8618: LD_INT 0
8620: PPUSH
8621: PPUSH
8622: PPUSH
// begin m1 := false ;
8623: LD_ADDR_VAR 0 1
8627: PUSH
8628: LD_INT 0
8630: ST_TO_ADDR
// m2 := false ;
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_INT 0
8638: ST_TO_ADDR
// m3 := false ;
8639: LD_ADDR_VAR 0 3
8643: PUSH
8644: LD_INT 0
8646: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
8647: LD_EXP 1
8651: PPUSH
8652: LD_STRING D9b-JMM-1
8654: PPUSH
8655: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8659: LD_EXP 15
8663: PPUSH
8664: LD_STRING D9b-Pow-1
8666: PPUSH
8667: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
8671: LD_EXP 1
8675: PPUSH
8676: LD_STRING D9b-JMM-2
8678: PPUSH
8679: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
8683: LD_EXP 15
8687: PPUSH
8688: LD_STRING D9b-Pow-2
8690: PPUSH
8691: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
8695: LD_EXP 1
8699: PPUSH
8700: LD_STRING D9b-JMM-3
8702: PPUSH
8703: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
8707: LD_EXP 15
8711: PPUSH
8712: LD_STRING D9b-Pow-3
8714: PPUSH
8715: CALL_OW 94
// if tick <= 60 60$00 then
8719: LD_OWVAR 1
8723: PUSH
8724: LD_INT 126000
8726: LESSEQUAL
8727: IFFALSE 8736
// SetAchievement ( ACH_ASPEED_13 ) ;
8729: LD_STRING ACH_ASPEED_13
8731: PPUSH
8732: CALL_OW 543
// if burlakStatus = 1 then
8736: LD_EXP 28
8740: PUSH
8741: LD_INT 1
8743: EQUAL
8744: IFFALSE 8766
// begin m1 := true ;
8746: LD_ADDR_VAR 0 1
8750: PUSH
8751: LD_INT 1
8753: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
8754: LD_STRING Burlak
8756: PPUSH
8757: LD_INT 1
8759: PPUSH
8760: CALL_OW 101
// end else
8764: GO 8777
// begin AddMedal ( Burlak , - 1 ) ;
8766: LD_STRING Burlak
8768: PPUSH
8769: LD_INT 1
8771: NEG
8772: PPUSH
8773: CALL_OW 101
// end ; if IsOk ( Stevens ) then
8777: LD_EXP 2
8781: PPUSH
8782: CALL_OW 302
8786: IFFALSE 8808
// begin m2 := true ;
8788: LD_ADDR_VAR 0 2
8792: PUSH
8793: LD_INT 1
8795: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
8796: LD_STRING Stevens
8798: PPUSH
8799: LD_INT 1
8801: PPUSH
8802: CALL_OW 101
// end else
8806: GO 8819
// begin AddMedal ( Stevens , - 1 ) ;
8808: LD_STRING Stevens
8810: PPUSH
8811: LD_INT 1
8813: NEG
8814: PPUSH
8815: CALL_OW 101
// end ; if radarOnSpot = 1 then
8819: LD_EXP 30
8823: PUSH
8824: LD_INT 1
8826: EQUAL
8827: IFFALSE 8849
// begin m3 := true ;
8829: LD_ADDR_VAR 0 3
8833: PUSH
8834: LD_INT 1
8836: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
8837: LD_STRING Observation
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: CALL_OW 101
// end else
8847: GO 8860
// begin AddMedal ( Observation , - 1 ) ;
8849: LD_STRING Observation
8851: PPUSH
8852: LD_INT 1
8854: NEG
8855: PPUSH
8856: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
8860: LD_VAR 0 1
8864: PUSH
8865: LD_VAR 0 2
8869: AND
8870: PUSH
8871: LD_VAR 0 3
8875: AND
8876: PUSH
8877: LD_OWVAR 67
8881: PUSH
8882: LD_INT 3
8884: GREATEREQUAL
8885: AND
8886: IFFALSE 8898
// SetAchievementEX ( ACH_AMER , 13 ) ;
8888: LD_STRING ACH_AMER
8890: PPUSH
8891: LD_INT 13
8893: PPUSH
8894: CALL_OW 564
// GiveMedals ( MAIN ) ;
8898: LD_STRING MAIN
8900: PPUSH
8901: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
8905: LD_EXP 28
8909: PPUSH
8910: LD_STRING 13_BurlakStatus_1
8912: PPUSH
8913: CALL_OW 39
// if IsLive ( Stevens ) then
8917: LD_EXP 2
8921: PPUSH
8922: CALL_OW 300
8926: IFFALSE 8940
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
8928: LD_INT 1
8930: PPUSH
8931: LD_STRING 13_StevensStatus_1
8933: PPUSH
8934: CALL_OW 39
8938: GO 8950
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
8940: LD_INT 0
8942: PPUSH
8943: LD_STRING 13_StevensStatus_1
8945: PPUSH
8946: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
8950: LD_INT 22
8952: PUSH
8953: LD_INT 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 21
8962: PUSH
8963: LD_INT 1
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 2
8972: PUSH
8973: LD_INT 25
8975: PUSH
8976: LD_INT 1
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 25
8985: PUSH
8986: LD_INT 2
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: LD_INT 25
8995: PUSH
8996: LD_INT 3
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PUSH
9003: LD_INT 25
9005: PUSH
9006: LD_INT 4
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: LD_INT 25
9015: PUSH
9016: LD_INT 5
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 25
9025: PUSH
9026: LD_INT 8
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: LIST
9046: PPUSH
9047: CALL_OW 69
9051: PPUSH
9052: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9056: LD_EXP 1
9060: PPUSH
9061: LD_EXP 34
9065: PUSH
9066: LD_STRING JMM
9068: STR
9069: PPUSH
9070: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9074: LD_EXP 8
9078: PPUSH
9079: LD_EXP 34
9083: PUSH
9084: LD_STRING Brown
9086: STR
9087: PPUSH
9088: CALL 8565 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9092: LD_EXP 4
9096: PPUSH
9097: LD_EXP 34
9101: PUSH
9102: LD_STRING Donaldson
9104: STR
9105: PPUSH
9106: CALL 8565 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9110: LD_EXP 5
9114: PPUSH
9115: LD_EXP 34
9119: PUSH
9120: LD_STRING Bobby
9122: STR
9123: PPUSH
9124: CALL 8565 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9128: LD_EXP 6
9132: PPUSH
9133: LD_EXP 34
9137: PUSH
9138: LD_STRING Cyrus
9140: STR
9141: PPUSH
9142: CALL 8565 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9146: LD_EXP 3
9150: PPUSH
9151: LD_EXP 34
9155: PUSH
9156: LD_STRING Lisa
9158: STR
9159: PPUSH
9160: CALL 8565 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9164: LD_EXP 13
9168: PPUSH
9169: LD_EXP 34
9173: PUSH
9174: LD_STRING Frank
9176: STR
9177: PPUSH
9178: CALL 8565 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9182: LD_EXP 14
9186: PPUSH
9187: LD_EXP 34
9191: PUSH
9192: LD_STRING Kikuchi
9194: STR
9195: PPUSH
9196: CALL 8565 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9200: LD_EXP 10
9204: PPUSH
9205: LD_EXP 34
9209: PUSH
9210: LD_STRING Houten
9212: STR
9213: PPUSH
9214: CALL 8565 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9218: LD_EXP 12
9222: PPUSH
9223: LD_EXP 34
9227: PUSH
9228: LD_STRING Gary
9230: STR
9231: PPUSH
9232: CALL 8565 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9236: LD_EXP 11
9240: PPUSH
9241: LD_EXP 34
9245: PUSH
9246: LD_STRING Cornell
9248: STR
9249: PPUSH
9250: CALL 8565 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9254: LD_EXP 7
9258: PPUSH
9259: LD_EXP 34
9263: PUSH
9264: LD_STRING Denis
9266: STR
9267: PPUSH
9268: CALL 8565 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9272: LD_EXP 9
9276: PPUSH
9277: LD_EXP 34
9281: PUSH
9282: LD_STRING Gladstone
9284: STR
9285: PPUSH
9286: CALL 8565 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9290: LD_EXP 2
9294: PPUSH
9295: LD_EXP 34
9299: PUSH
9300: LD_STRING Stevens
9302: STR
9303: PPUSH
9304: CALL 8565 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9308: LD_INT 50
9310: PUSH
9311: EMPTY
9312: LIST
9313: PUSH
9314: LD_INT 22
9316: PUSH
9317: LD_INT 1
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 21
9326: PUSH
9327: LD_INT 1
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 2
9336: PUSH
9337: LD_INT 25
9339: PUSH
9340: LD_INT 1
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: LD_INT 25
9349: PUSH
9350: LD_INT 2
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PUSH
9357: LD_INT 25
9359: PUSH
9360: LD_INT 3
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PUSH
9367: LD_INT 25
9369: PUSH
9370: LD_INT 4
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: LD_INT 25
9379: PUSH
9380: LD_INT 5
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 25
9389: PUSH
9390: LD_INT 8
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: PPUSH
9412: CALL_OW 69
9416: PUSH
9417: LD_EXP 1
9421: PUSH
9422: LD_EXP 8
9426: PUSH
9427: LD_EXP 4
9431: PUSH
9432: LD_EXP 5
9436: PUSH
9437: LD_EXP 6
9441: PUSH
9442: LD_EXP 3
9446: PUSH
9447: LD_EXP 13
9451: PUSH
9452: LD_EXP 9
9456: PUSH
9457: LD_EXP 14
9461: PUSH
9462: LD_EXP 7
9466: PUSH
9467: LD_EXP 10
9471: PUSH
9472: LD_EXP 12
9476: PUSH
9477: LD_EXP 11
9481: PUSH
9482: LD_EXP 2
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: DIFF
9503: PPUSH
9504: LD_STRING 13_other_survivors
9506: PPUSH
9507: CALL_OW 38
// YouWin ;
9511: CALL_OW 103
// end ; end_of_file
9515: PPOPN 3
9517: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do var i , tmp , yourSiberite ;
9518: LD_EXP 32
9522: PUSH
9523: LD_INT 2
9525: EQUAL
9526: PUSH
9527: LD_INT 34
9529: PUSH
9530: LD_INT 8
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PPUSH
9537: CALL_OW 69
9541: NOT
9542: AND
9543: IFFALSE 9679
9545: GO 9547
9547: DISABLE
9548: LD_INT 0
9550: PPUSH
9551: PPUSH
9552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9553: LD_ADDR_VAR 0 2
9557: PUSH
9558: LD_INT 22
9560: PUSH
9561: LD_INT 1
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PUSH
9568: LD_INT 21
9570: PUSH
9571: LD_INT 3
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PUSH
9578: LD_INT 2
9580: PUSH
9581: LD_INT 30
9583: PUSH
9584: LD_INT 0
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: LD_INT 30
9593: PUSH
9594: LD_INT 1
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: PPUSH
9611: CALL_OW 69
9615: ST_TO_ADDR
// for i in tmp do
9616: LD_ADDR_VAR 0 1
9620: PUSH
9621: LD_VAR 0 2
9625: PUSH
9626: FOR_IN
9627: IFFALSE 9660
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9629: LD_ADDR_VAR 0 3
9633: PUSH
9634: LD_VAR 0 3
9638: PUSH
9639: LD_VAR 0 1
9643: PPUSH
9644: CALL_OW 274
9648: PPUSH
9649: LD_INT 3
9651: PPUSH
9652: CALL_OW 275
9656: PLUS
9657: ST_TO_ADDR
9658: GO 9626
9660: POP
9661: POP
// if yourSiberite < 79 then
9662: LD_VAR 0 3
9666: PUSH
9667: LD_INT 79
9669: LESS
9670: IFFALSE 9679
// YouLost ( siberite ) ;
9672: LD_STRING siberite
9674: PPUSH
9675: CALL_OW 104
// end ; end_of_file
9679: PPOPN 3
9681: END
// every 9 9$00 + 7 7$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 4 do
9682: LD_INT 22
9684: PUSH
9685: LD_INT 8
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PUSH
9692: LD_INT 21
9694: PUSH
9695: LD_INT 1
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PPUSH
9706: CALL_OW 69
9710: PUSH
9711: LD_INT 4
9713: LESS
9714: IFFALSE 9724
9716: GO 9718
9718: DISABLE
// begin enable ;
9719: ENABLE
// PrepareArabianAttack ;
9720: CALL 4018 0 0
// end ;
9724: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 4 do
9725: LD_EXP 35
9729: PUSH
9730: LD_INT 1
9732: EQUAL
9733: PUSH
9734: LD_INT 22
9736: PUSH
9737: LD_INT 8
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 21
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PPUSH
9758: CALL_OW 69
9762: PUSH
9763: LD_INT 4
9765: LESS
9766: AND
9767: IFFALSE 9794
9769: GO 9771
9771: DISABLE
// begin wait ( 3 3$30 ) ;
9772: LD_INT 7350
9774: PPUSH
9775: CALL_OW 67
// PrepareRussianAttack ;
9779: CALL 3277 0 0
// wait ( 20 20$00 ) ;
9783: LD_INT 42000
9785: PPUSH
9786: CALL_OW 67
// PrepareRussianAttack ;
9790: CALL 3277 0 0
// end ;
9794: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units ; begin
9795: LD_INT 0
9797: PPUSH
9798: PPUSH
9799: PPUSH
9800: PPUSH
9801: PPUSH
9802: PPUSH
9803: PPUSH
9804: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
9805: LD_ADDR_VAR 0 8
9809: PUSH
9810: LD_INT 22
9812: PUSH
9813: LD_INT 8
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: PUSH
9820: LD_INT 120
9822: PUSH
9823: LD_INT 10
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PPUSH
9834: CALL_OW 69
9838: ST_TO_ADDR
// if not units then
9839: LD_VAR 0 8
9843: NOT
9844: IFFALSE 9848
// exit ;
9846: GO 10053
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
9848: LD_ADDR_VAR 0 4
9852: PUSH
9853: LD_INT 80
9855: PUSH
9856: LD_INT 60
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 54
9865: PUSH
9866: LD_INT 57
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 55
9875: PUSH
9876: LD_INT 74
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 61
9885: PUSH
9886: LD_INT 85
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
9899: LD_ADDR_VAR 0 5
9903: PUSH
9904: LD_INT 93
9906: PUSH
9907: LD_INT 99
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: LD_INT 85
9916: PUSH
9917: LD_INT 99
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9928: LD_INT 35
9930: PPUSH
9931: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
9935: LD_ADDR_VAR 0 6
9939: PUSH
9940: LD_VAR 0 8
9944: PPUSH
9945: LD_INT 21
9947: PUSH
9948: LD_INT 2
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PPUSH
9955: CALL_OW 72
9959: ST_TO_ADDR
// if vehicles then
9960: LD_VAR 0 6
9964: IFFALSE 9980
// AgressiveMove ( vehicles , path ) ;
9966: LD_VAR 0 6
9970: PPUSH
9971: LD_VAR 0 4
9975: PPUSH
9976: CALL 68711 0 2
// infantry := UnitFilter ( units , [ f_type , unit_human ] ) ;
9980: LD_ADDR_VAR 0 7
9984: PUSH
9985: LD_VAR 0 8
9989: PPUSH
9990: LD_INT 21
9992: PUSH
9993: LD_INT 1
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PPUSH
10000: CALL_OW 72
10004: ST_TO_ADDR
// if infantry then
10005: LD_VAR 0 7
10009: IFFALSE 10025
// AgressiveMove ( infantry , path2 ) ;
10011: LD_VAR 0 7
10015: PPUSH
10016: LD_VAR 0 5
10020: PPUSH
10021: CALL 68711 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10025: LD_ADDR_VAR 0 8
10029: PUSH
10030: LD_VAR 0 8
10034: PPUSH
10035: LD_INT 50
10037: PUSH
10038: EMPTY
10039: LIST
10040: PPUSH
10041: CALL_OW 72
10045: ST_TO_ADDR
// until not units ;
10046: LD_VAR 0 8
10050: NOT
10051: IFFALSE 9928
// end ;
10053: LD_VAR 0 1
10057: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10058: LD_INT 0
10060: PPUSH
10061: PPUSH
10062: PPUSH
10063: PPUSH
10064: PPUSH
10065: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10066: LD_ADDR_VAR 0 6
10070: PUSH
10071: LD_INT 22
10073: PUSH
10074: LD_INT 3
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PUSH
10081: LD_INT 120
10083: PUSH
10084: LD_INT 10
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PPUSH
10095: CALL_OW 69
10099: ST_TO_ADDR
// if not units then
10100: LD_VAR 0 6
10104: NOT
10105: IFFALSE 10109
// exit ;
10107: GO 10240
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10109: LD_ADDR_VAR 0 4
10113: PUSH
10114: LD_INT 80
10116: PUSH
10117: LD_INT 60
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 54
10126: PUSH
10127: LD_INT 57
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 55
10136: PUSH
10137: LD_INT 74
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: LD_INT 61
10146: PUSH
10147: LD_INT 85
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10160: LD_INT 35
10162: PPUSH
10163: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10167: LD_ADDR_VAR 0 5
10171: PUSH
10172: LD_VAR 0 6
10176: PPUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 2
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PPUSH
10187: CALL_OW 72
10191: ST_TO_ADDR
// if vehicles then
10192: LD_VAR 0 5
10196: IFFALSE 10212
// AgressiveMove ( vehicles , path ) ;
10198: LD_VAR 0 5
10202: PPUSH
10203: LD_VAR 0 4
10207: PPUSH
10208: CALL 68711 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10212: LD_ADDR_VAR 0 6
10216: PUSH
10217: LD_VAR 0 6
10221: PPUSH
10222: LD_INT 50
10224: PUSH
10225: EMPTY
10226: LIST
10227: PPUSH
10228: CALL_OW 72
10232: ST_TO_ADDR
// until not units ;
10233: LD_VAR 0 6
10237: NOT
10238: IFFALSE 10160
// end ; end_of_file
10240: LD_VAR 0 1
10244: RET
// every 1 1$0 trigger GetListOfCratesInArea ( CratesArea ) < 40 do
10245: LD_INT 13
10247: PPUSH
10248: CALL_OW 435
10252: PUSH
10253: LD_INT 40
10255: LESS
10256: IFFALSE 10283
10258: GO 10260
10260: DISABLE
// begin enable ;
10261: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10262: LD_INT 3
10264: PPUSH
10265: LD_INT 5
10267: PPUSH
10268: CALL_OW 12
10272: PPUSH
10273: LD_INT 13
10275: PPUSH
10276: LD_INT 1
10278: PPUSH
10279: CALL_OW 55
// end ; end_of_file
10283: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10284: LD_INT 0
10286: PPUSH
// ar_miner := 81 ;
10287: LD_ADDR_EXP 52
10291: PUSH
10292: LD_INT 81
10294: ST_TO_ADDR
// ar_crane := 88 ;
10295: LD_ADDR_EXP 51
10299: PUSH
10300: LD_INT 88
10302: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10303: LD_ADDR_EXP 46
10307: PUSH
10308: LD_INT 89
10310: ST_TO_ADDR
// us_hack := 99 ;
10311: LD_ADDR_EXP 47
10315: PUSH
10316: LD_INT 99
10318: ST_TO_ADDR
// us_artillery := 97 ;
10319: LD_ADDR_EXP 48
10323: PUSH
10324: LD_INT 97
10326: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10327: LD_ADDR_EXP 49
10331: PUSH
10332: LD_INT 91
10334: ST_TO_ADDR
// ar_mortar := 92 ;
10335: LD_ADDR_EXP 50
10339: PUSH
10340: LD_INT 92
10342: ST_TO_ADDR
// ru_flamethrower := 93 ;
10343: LD_ADDR_EXP 53
10347: PUSH
10348: LD_INT 93
10350: ST_TO_ADDR
// ru_radar := 98 ;
10351: LD_ADDR_EXP 45
10355: PUSH
10356: LD_INT 98
10358: ST_TO_ADDR
// tech_Artillery := 80 ;
10359: LD_ADDR_EXP 54
10363: PUSH
10364: LD_INT 80
10366: ST_TO_ADDR
// tech_RadMat := 81 ;
10367: LD_ADDR_EXP 55
10371: PUSH
10372: LD_INT 81
10374: ST_TO_ADDR
// tech_BasicTools := 82 ;
10375: LD_ADDR_EXP 56
10379: PUSH
10380: LD_INT 82
10382: ST_TO_ADDR
// tech_Cargo := 83 ;
10383: LD_ADDR_EXP 57
10387: PUSH
10388: LD_INT 83
10390: ST_TO_ADDR
// tech_Track := 84 ;
10391: LD_ADDR_EXP 58
10395: PUSH
10396: LD_INT 84
10398: ST_TO_ADDR
// tech_Crane := 85 ;
10399: LD_ADDR_EXP 59
10403: PUSH
10404: LD_INT 85
10406: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10407: LD_ADDR_EXP 60
10411: PUSH
10412: LD_INT 86
10414: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10415: LD_ADDR_EXP 61
10419: PUSH
10420: LD_INT 87
10422: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10423: LD_ADDR_EXP 62
10427: PUSH
10428: LD_INT 88
10430: ST_TO_ADDR
// class_mastodont := 31 ;
10431: LD_ADDR_EXP 63
10435: PUSH
10436: LD_INT 31
10438: ST_TO_ADDR
// class_horse := 21 ;
10439: LD_ADDR_EXP 64
10443: PUSH
10444: LD_INT 21
10446: ST_TO_ADDR
// end ;
10447: LD_VAR 0 1
10451: RET
// every 1 do
10452: GO 10454
10454: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10455: CALL 10284 0 0
10459: END
// every 0 0$1 do
10460: GO 10462
10462: DISABLE
// begin enable ;
10463: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10464: LD_STRING updateTimer(
10466: PUSH
10467: LD_OWVAR 1
10471: STR
10472: PUSH
10473: LD_STRING );
10475: STR
10476: PPUSH
10477: CALL_OW 559
// end ;
10481: END
// export function SOS_MapStart ( ) ; begin
10482: LD_INT 0
10484: PPUSH
// if streamModeActive then
10485: LD_EXP 65
10489: IFFALSE 10498
// DefineStreamItems ( true ) ;
10491: LD_INT 1
10493: PPUSH
10494: CALL 12148 0 1
// UpdateFactoryWaypoints ( ) ;
10498: CALL 25732 0 0
// end ;
10502: LD_VAR 0 1
10506: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10507: LD_INT 0
10509: PPUSH
// if p2 = 100 then
10510: LD_VAR 0 2
10514: PUSH
10515: LD_INT 100
10517: EQUAL
10518: IFFALSE 11521
// begin if not StreamModeActive then
10520: LD_EXP 65
10524: NOT
10525: IFFALSE 10535
// StreamModeActive := true ;
10527: LD_ADDR_EXP 65
10531: PUSH
10532: LD_INT 1
10534: ST_TO_ADDR
// if p3 = 0 then
10535: LD_VAR 0 3
10539: PUSH
10540: LD_INT 0
10542: EQUAL
10543: IFFALSE 10549
// InitStreamMode ;
10545: CALL 11684 0 0
// if p3 = 1 then
10549: LD_VAR 0 3
10553: PUSH
10554: LD_INT 1
10556: EQUAL
10557: IFFALSE 10567
// sRocket := true ;
10559: LD_ADDR_EXP 70
10563: PUSH
10564: LD_INT 1
10566: ST_TO_ADDR
// if p3 = 2 then
10567: LD_VAR 0 3
10571: PUSH
10572: LD_INT 2
10574: EQUAL
10575: IFFALSE 10585
// sSpeed := true ;
10577: LD_ADDR_EXP 69
10581: PUSH
10582: LD_INT 1
10584: ST_TO_ADDR
// if p3 = 3 then
10585: LD_VAR 0 3
10589: PUSH
10590: LD_INT 3
10592: EQUAL
10593: IFFALSE 10603
// sEngine := true ;
10595: LD_ADDR_EXP 71
10599: PUSH
10600: LD_INT 1
10602: ST_TO_ADDR
// if p3 = 4 then
10603: LD_VAR 0 3
10607: PUSH
10608: LD_INT 4
10610: EQUAL
10611: IFFALSE 10621
// sSpec := true ;
10613: LD_ADDR_EXP 68
10617: PUSH
10618: LD_INT 1
10620: ST_TO_ADDR
// if p3 = 5 then
10621: LD_VAR 0 3
10625: PUSH
10626: LD_INT 5
10628: EQUAL
10629: IFFALSE 10639
// sLevel := true ;
10631: LD_ADDR_EXP 72
10635: PUSH
10636: LD_INT 1
10638: ST_TO_ADDR
// if p3 = 6 then
10639: LD_VAR 0 3
10643: PUSH
10644: LD_INT 6
10646: EQUAL
10647: IFFALSE 10657
// sArmoury := true ;
10649: LD_ADDR_EXP 73
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
// if p3 = 7 then
10657: LD_VAR 0 3
10661: PUSH
10662: LD_INT 7
10664: EQUAL
10665: IFFALSE 10675
// sRadar := true ;
10667: LD_ADDR_EXP 74
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// if p3 = 8 then
10675: LD_VAR 0 3
10679: PUSH
10680: LD_INT 8
10682: EQUAL
10683: IFFALSE 10693
// sBunker := true ;
10685: LD_ADDR_EXP 75
10689: PUSH
10690: LD_INT 1
10692: ST_TO_ADDR
// if p3 = 9 then
10693: LD_VAR 0 3
10697: PUSH
10698: LD_INT 9
10700: EQUAL
10701: IFFALSE 10711
// sHack := true ;
10703: LD_ADDR_EXP 76
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// if p3 = 10 then
10711: LD_VAR 0 3
10715: PUSH
10716: LD_INT 10
10718: EQUAL
10719: IFFALSE 10729
// sFire := true ;
10721: LD_ADDR_EXP 77
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// if p3 = 11 then
10729: LD_VAR 0 3
10733: PUSH
10734: LD_INT 11
10736: EQUAL
10737: IFFALSE 10747
// sRefresh := true ;
10739: LD_ADDR_EXP 78
10743: PUSH
10744: LD_INT 1
10746: ST_TO_ADDR
// if p3 = 12 then
10747: LD_VAR 0 3
10751: PUSH
10752: LD_INT 12
10754: EQUAL
10755: IFFALSE 10765
// sExp := true ;
10757: LD_ADDR_EXP 79
10761: PUSH
10762: LD_INT 1
10764: ST_TO_ADDR
// if p3 = 13 then
10765: LD_VAR 0 3
10769: PUSH
10770: LD_INT 13
10772: EQUAL
10773: IFFALSE 10783
// sDepot := true ;
10775: LD_ADDR_EXP 80
10779: PUSH
10780: LD_INT 1
10782: ST_TO_ADDR
// if p3 = 14 then
10783: LD_VAR 0 3
10787: PUSH
10788: LD_INT 14
10790: EQUAL
10791: IFFALSE 10801
// sFlag := true ;
10793: LD_ADDR_EXP 81
10797: PUSH
10798: LD_INT 1
10800: ST_TO_ADDR
// if p3 = 15 then
10801: LD_VAR 0 3
10805: PUSH
10806: LD_INT 15
10808: EQUAL
10809: IFFALSE 10819
// sKamikadze := true ;
10811: LD_ADDR_EXP 89
10815: PUSH
10816: LD_INT 1
10818: ST_TO_ADDR
// if p3 = 16 then
10819: LD_VAR 0 3
10823: PUSH
10824: LD_INT 16
10826: EQUAL
10827: IFFALSE 10837
// sTroll := true ;
10829: LD_ADDR_EXP 90
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// if p3 = 17 then
10837: LD_VAR 0 3
10841: PUSH
10842: LD_INT 17
10844: EQUAL
10845: IFFALSE 10855
// sSlow := true ;
10847: LD_ADDR_EXP 91
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// if p3 = 18 then
10855: LD_VAR 0 3
10859: PUSH
10860: LD_INT 18
10862: EQUAL
10863: IFFALSE 10873
// sLack := true ;
10865: LD_ADDR_EXP 92
10869: PUSH
10870: LD_INT 1
10872: ST_TO_ADDR
// if p3 = 19 then
10873: LD_VAR 0 3
10877: PUSH
10878: LD_INT 19
10880: EQUAL
10881: IFFALSE 10891
// sTank := true ;
10883: LD_ADDR_EXP 94
10887: PUSH
10888: LD_INT 1
10890: ST_TO_ADDR
// if p3 = 20 then
10891: LD_VAR 0 3
10895: PUSH
10896: LD_INT 20
10898: EQUAL
10899: IFFALSE 10909
// sRemote := true ;
10901: LD_ADDR_EXP 95
10905: PUSH
10906: LD_INT 1
10908: ST_TO_ADDR
// if p3 = 21 then
10909: LD_VAR 0 3
10913: PUSH
10914: LD_INT 21
10916: EQUAL
10917: IFFALSE 10927
// sPowell := true ;
10919: LD_ADDR_EXP 96
10923: PUSH
10924: LD_INT 1
10926: ST_TO_ADDR
// if p3 = 22 then
10927: LD_VAR 0 3
10931: PUSH
10932: LD_INT 22
10934: EQUAL
10935: IFFALSE 10945
// sTeleport := true ;
10937: LD_ADDR_EXP 99
10941: PUSH
10942: LD_INT 1
10944: ST_TO_ADDR
// if p3 = 23 then
10945: LD_VAR 0 3
10949: PUSH
10950: LD_INT 23
10952: EQUAL
10953: IFFALSE 10963
// sOilTower := true ;
10955: LD_ADDR_EXP 101
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
// if p3 = 24 then
10963: LD_VAR 0 3
10967: PUSH
10968: LD_INT 24
10970: EQUAL
10971: IFFALSE 10981
// sShovel := true ;
10973: LD_ADDR_EXP 102
10977: PUSH
10978: LD_INT 1
10980: ST_TO_ADDR
// if p3 = 25 then
10981: LD_VAR 0 3
10985: PUSH
10986: LD_INT 25
10988: EQUAL
10989: IFFALSE 10999
// sSheik := true ;
10991: LD_ADDR_EXP 103
10995: PUSH
10996: LD_INT 1
10998: ST_TO_ADDR
// if p3 = 26 then
10999: LD_VAR 0 3
11003: PUSH
11004: LD_INT 26
11006: EQUAL
11007: IFFALSE 11017
// sEarthquake := true ;
11009: LD_ADDR_EXP 105
11013: PUSH
11014: LD_INT 1
11016: ST_TO_ADDR
// if p3 = 27 then
11017: LD_VAR 0 3
11021: PUSH
11022: LD_INT 27
11024: EQUAL
11025: IFFALSE 11035
// sAI := true ;
11027: LD_ADDR_EXP 106
11031: PUSH
11032: LD_INT 1
11034: ST_TO_ADDR
// if p3 = 28 then
11035: LD_VAR 0 3
11039: PUSH
11040: LD_INT 28
11042: EQUAL
11043: IFFALSE 11053
// sCargo := true ;
11045: LD_ADDR_EXP 109
11049: PUSH
11050: LD_INT 1
11052: ST_TO_ADDR
// if p3 = 29 then
11053: LD_VAR 0 3
11057: PUSH
11058: LD_INT 29
11060: EQUAL
11061: IFFALSE 11071
// sDLaser := true ;
11063: LD_ADDR_EXP 110
11067: PUSH
11068: LD_INT 1
11070: ST_TO_ADDR
// if p3 = 30 then
11071: LD_VAR 0 3
11075: PUSH
11076: LD_INT 30
11078: EQUAL
11079: IFFALSE 11089
// sExchange := true ;
11081: LD_ADDR_EXP 111
11085: PUSH
11086: LD_INT 1
11088: ST_TO_ADDR
// if p3 = 31 then
11089: LD_VAR 0 3
11093: PUSH
11094: LD_INT 31
11096: EQUAL
11097: IFFALSE 11107
// sFac := true ;
11099: LD_ADDR_EXP 112
11103: PUSH
11104: LD_INT 1
11106: ST_TO_ADDR
// if p3 = 32 then
11107: LD_VAR 0 3
11111: PUSH
11112: LD_INT 32
11114: EQUAL
11115: IFFALSE 11125
// sPower := true ;
11117: LD_ADDR_EXP 113
11121: PUSH
11122: LD_INT 1
11124: ST_TO_ADDR
// if p3 = 33 then
11125: LD_VAR 0 3
11129: PUSH
11130: LD_INT 33
11132: EQUAL
11133: IFFALSE 11143
// sRandom := true ;
11135: LD_ADDR_EXP 114
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// if p3 = 34 then
11143: LD_VAR 0 3
11147: PUSH
11148: LD_INT 34
11150: EQUAL
11151: IFFALSE 11161
// sShield := true ;
11153: LD_ADDR_EXP 115
11157: PUSH
11158: LD_INT 1
11160: ST_TO_ADDR
// if p3 = 35 then
11161: LD_VAR 0 3
11165: PUSH
11166: LD_INT 35
11168: EQUAL
11169: IFFALSE 11179
// sTime := true ;
11171: LD_ADDR_EXP 116
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
// if p3 = 36 then
11179: LD_VAR 0 3
11183: PUSH
11184: LD_INT 36
11186: EQUAL
11187: IFFALSE 11197
// sTools := true ;
11189: LD_ADDR_EXP 117
11193: PUSH
11194: LD_INT 1
11196: ST_TO_ADDR
// if p3 = 101 then
11197: LD_VAR 0 3
11201: PUSH
11202: LD_INT 101
11204: EQUAL
11205: IFFALSE 11215
// sSold := true ;
11207: LD_ADDR_EXP 82
11211: PUSH
11212: LD_INT 1
11214: ST_TO_ADDR
// if p3 = 102 then
11215: LD_VAR 0 3
11219: PUSH
11220: LD_INT 102
11222: EQUAL
11223: IFFALSE 11233
// sDiff := true ;
11225: LD_ADDR_EXP 83
11229: PUSH
11230: LD_INT 1
11232: ST_TO_ADDR
// if p3 = 103 then
11233: LD_VAR 0 3
11237: PUSH
11238: LD_INT 103
11240: EQUAL
11241: IFFALSE 11251
// sFog := true ;
11243: LD_ADDR_EXP 86
11247: PUSH
11248: LD_INT 1
11250: ST_TO_ADDR
// if p3 = 104 then
11251: LD_VAR 0 3
11255: PUSH
11256: LD_INT 104
11258: EQUAL
11259: IFFALSE 11269
// sReset := true ;
11261: LD_ADDR_EXP 87
11265: PUSH
11266: LD_INT 1
11268: ST_TO_ADDR
// if p3 = 105 then
11269: LD_VAR 0 3
11273: PUSH
11274: LD_INT 105
11276: EQUAL
11277: IFFALSE 11287
// sSun := true ;
11279: LD_ADDR_EXP 88
11283: PUSH
11284: LD_INT 1
11286: ST_TO_ADDR
// if p3 = 106 then
11287: LD_VAR 0 3
11291: PUSH
11292: LD_INT 106
11294: EQUAL
11295: IFFALSE 11305
// sTiger := true ;
11297: LD_ADDR_EXP 84
11301: PUSH
11302: LD_INT 1
11304: ST_TO_ADDR
// if p3 = 107 then
11305: LD_VAR 0 3
11309: PUSH
11310: LD_INT 107
11312: EQUAL
11313: IFFALSE 11323
// sBomb := true ;
11315: LD_ADDR_EXP 85
11319: PUSH
11320: LD_INT 1
11322: ST_TO_ADDR
// if p3 = 108 then
11323: LD_VAR 0 3
11327: PUSH
11328: LD_INT 108
11330: EQUAL
11331: IFFALSE 11341
// sWound := true ;
11333: LD_ADDR_EXP 93
11337: PUSH
11338: LD_INT 1
11340: ST_TO_ADDR
// if p3 = 109 then
11341: LD_VAR 0 3
11345: PUSH
11346: LD_INT 109
11348: EQUAL
11349: IFFALSE 11359
// sBetray := true ;
11351: LD_ADDR_EXP 97
11355: PUSH
11356: LD_INT 1
11358: ST_TO_ADDR
// if p3 = 110 then
11359: LD_VAR 0 3
11363: PUSH
11364: LD_INT 110
11366: EQUAL
11367: IFFALSE 11377
// sContamin := true ;
11369: LD_ADDR_EXP 98
11373: PUSH
11374: LD_INT 1
11376: ST_TO_ADDR
// if p3 = 111 then
11377: LD_VAR 0 3
11381: PUSH
11382: LD_INT 111
11384: EQUAL
11385: IFFALSE 11395
// sOil := true ;
11387: LD_ADDR_EXP 100
11391: PUSH
11392: LD_INT 1
11394: ST_TO_ADDR
// if p3 = 112 then
11395: LD_VAR 0 3
11399: PUSH
11400: LD_INT 112
11402: EQUAL
11403: IFFALSE 11413
// sStu := true ;
11405: LD_ADDR_EXP 104
11409: PUSH
11410: LD_INT 1
11412: ST_TO_ADDR
// if p3 = 113 then
11413: LD_VAR 0 3
11417: PUSH
11418: LD_INT 113
11420: EQUAL
11421: IFFALSE 11431
// sBazooka := true ;
11423: LD_ADDR_EXP 107
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// if p3 = 114 then
11431: LD_VAR 0 3
11435: PUSH
11436: LD_INT 114
11438: EQUAL
11439: IFFALSE 11449
// sMortar := true ;
11441: LD_ADDR_EXP 108
11445: PUSH
11446: LD_INT 1
11448: ST_TO_ADDR
// if p3 = 115 then
11449: LD_VAR 0 3
11453: PUSH
11454: LD_INT 115
11456: EQUAL
11457: IFFALSE 11467
// sRanger := true ;
11459: LD_ADDR_EXP 118
11463: PUSH
11464: LD_INT 1
11466: ST_TO_ADDR
// if p3 = 116 then
11467: LD_VAR 0 3
11471: PUSH
11472: LD_INT 116
11474: EQUAL
11475: IFFALSE 11485
// sComputer := true ;
11477: LD_ADDR_EXP 119
11481: PUSH
11482: LD_INT 1
11484: ST_TO_ADDR
// if p3 = 117 then
11485: LD_VAR 0 3
11489: PUSH
11490: LD_INT 117
11492: EQUAL
11493: IFFALSE 11503
// s30 := true ;
11495: LD_ADDR_EXP 120
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// if p3 = 118 then
11503: LD_VAR 0 3
11507: PUSH
11508: LD_INT 118
11510: EQUAL
11511: IFFALSE 11521
// s60 := true ;
11513: LD_ADDR_EXP 121
11517: PUSH
11518: LD_INT 1
11520: ST_TO_ADDR
// end ; if p2 = 101 then
11521: LD_VAR 0 2
11525: PUSH
11526: LD_INT 101
11528: EQUAL
11529: IFFALSE 11657
// begin case p3 of 1 :
11531: LD_VAR 0 3
11535: PUSH
11536: LD_INT 1
11538: DOUBLE
11539: EQUAL
11540: IFTRUE 11544
11542: GO 11551
11544: POP
// hHackUnlimitedResources ; 2 :
11545: CALL 23755 0 0
11549: GO 11657
11551: LD_INT 2
11553: DOUBLE
11554: EQUAL
11555: IFTRUE 11559
11557: GO 11566
11559: POP
// hHackSetLevel10 ; 3 :
11560: CALL 23888 0 0
11564: GO 11657
11566: LD_INT 3
11568: DOUBLE
11569: EQUAL
11570: IFTRUE 11574
11572: GO 11581
11574: POP
// hHackSetLevel10YourUnits ; 4 :
11575: CALL 23973 0 0
11579: GO 11657
11581: LD_INT 4
11583: DOUBLE
11584: EQUAL
11585: IFTRUE 11589
11587: GO 11596
11589: POP
// hHackInvincible ; 5 :
11590: CALL 24421 0 0
11594: GO 11657
11596: LD_INT 5
11598: DOUBLE
11599: EQUAL
11600: IFTRUE 11604
11602: GO 11611
11604: POP
// hHackInvisible ; 6 :
11605: CALL 24532 0 0
11609: GO 11657
11611: LD_INT 6
11613: DOUBLE
11614: EQUAL
11615: IFTRUE 11619
11617: GO 11626
11619: POP
// hHackChangeYourSide ; 7 :
11620: CALL 24589 0 0
11624: GO 11657
11626: LD_INT 7
11628: DOUBLE
11629: EQUAL
11630: IFTRUE 11634
11632: GO 11641
11634: POP
// hHackChangeUnitSide ; 8 :
11635: CALL 24631 0 0
11639: GO 11657
11641: LD_INT 8
11643: DOUBLE
11644: EQUAL
11645: IFTRUE 11649
11647: GO 11656
11649: POP
// hHackFog ; end ;
11650: CALL 24732 0 0
11654: GO 11657
11656: POP
// end ; end ;
11657: LD_VAR 0 7
11661: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11662: GO 11664
11664: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11665: LD_STRING initStreamRollete();
11667: PPUSH
11668: CALL_OW 559
// InitStreamMode ;
11672: CALL 11684 0 0
// DefineStreamItems ( false ) ;
11676: LD_INT 0
11678: PPUSH
11679: CALL 12148 0 1
// end ;
11683: END
// function InitStreamMode ; begin
11684: LD_INT 0
11686: PPUSH
// streamModeActive := false ;
11687: LD_ADDR_EXP 65
11691: PUSH
11692: LD_INT 0
11694: ST_TO_ADDR
// normalCounter := 36 ;
11695: LD_ADDR_EXP 66
11699: PUSH
11700: LD_INT 36
11702: ST_TO_ADDR
// hardcoreCounter := 18 ;
11703: LD_ADDR_EXP 67
11707: PUSH
11708: LD_INT 18
11710: ST_TO_ADDR
// sRocket := false ;
11711: LD_ADDR_EXP 70
11715: PUSH
11716: LD_INT 0
11718: ST_TO_ADDR
// sSpeed := false ;
11719: LD_ADDR_EXP 69
11723: PUSH
11724: LD_INT 0
11726: ST_TO_ADDR
// sEngine := false ;
11727: LD_ADDR_EXP 71
11731: PUSH
11732: LD_INT 0
11734: ST_TO_ADDR
// sSpec := false ;
11735: LD_ADDR_EXP 68
11739: PUSH
11740: LD_INT 0
11742: ST_TO_ADDR
// sLevel := false ;
11743: LD_ADDR_EXP 72
11747: PUSH
11748: LD_INT 0
11750: ST_TO_ADDR
// sArmoury := false ;
11751: LD_ADDR_EXP 73
11755: PUSH
11756: LD_INT 0
11758: ST_TO_ADDR
// sRadar := false ;
11759: LD_ADDR_EXP 74
11763: PUSH
11764: LD_INT 0
11766: ST_TO_ADDR
// sBunker := false ;
11767: LD_ADDR_EXP 75
11771: PUSH
11772: LD_INT 0
11774: ST_TO_ADDR
// sHack := false ;
11775: LD_ADDR_EXP 76
11779: PUSH
11780: LD_INT 0
11782: ST_TO_ADDR
// sFire := false ;
11783: LD_ADDR_EXP 77
11787: PUSH
11788: LD_INT 0
11790: ST_TO_ADDR
// sRefresh := false ;
11791: LD_ADDR_EXP 78
11795: PUSH
11796: LD_INT 0
11798: ST_TO_ADDR
// sExp := false ;
11799: LD_ADDR_EXP 79
11803: PUSH
11804: LD_INT 0
11806: ST_TO_ADDR
// sDepot := false ;
11807: LD_ADDR_EXP 80
11811: PUSH
11812: LD_INT 0
11814: ST_TO_ADDR
// sFlag := false ;
11815: LD_ADDR_EXP 81
11819: PUSH
11820: LD_INT 0
11822: ST_TO_ADDR
// sKamikadze := false ;
11823: LD_ADDR_EXP 89
11827: PUSH
11828: LD_INT 0
11830: ST_TO_ADDR
// sTroll := false ;
11831: LD_ADDR_EXP 90
11835: PUSH
11836: LD_INT 0
11838: ST_TO_ADDR
// sSlow := false ;
11839: LD_ADDR_EXP 91
11843: PUSH
11844: LD_INT 0
11846: ST_TO_ADDR
// sLack := false ;
11847: LD_ADDR_EXP 92
11851: PUSH
11852: LD_INT 0
11854: ST_TO_ADDR
// sTank := false ;
11855: LD_ADDR_EXP 94
11859: PUSH
11860: LD_INT 0
11862: ST_TO_ADDR
// sRemote := false ;
11863: LD_ADDR_EXP 95
11867: PUSH
11868: LD_INT 0
11870: ST_TO_ADDR
// sPowell := false ;
11871: LD_ADDR_EXP 96
11875: PUSH
11876: LD_INT 0
11878: ST_TO_ADDR
// sTeleport := false ;
11879: LD_ADDR_EXP 99
11883: PUSH
11884: LD_INT 0
11886: ST_TO_ADDR
// sOilTower := false ;
11887: LD_ADDR_EXP 101
11891: PUSH
11892: LD_INT 0
11894: ST_TO_ADDR
// sShovel := false ;
11895: LD_ADDR_EXP 102
11899: PUSH
11900: LD_INT 0
11902: ST_TO_ADDR
// sSheik := false ;
11903: LD_ADDR_EXP 103
11907: PUSH
11908: LD_INT 0
11910: ST_TO_ADDR
// sEarthquake := false ;
11911: LD_ADDR_EXP 105
11915: PUSH
11916: LD_INT 0
11918: ST_TO_ADDR
// sAI := false ;
11919: LD_ADDR_EXP 106
11923: PUSH
11924: LD_INT 0
11926: ST_TO_ADDR
// sCargo := false ;
11927: LD_ADDR_EXP 109
11931: PUSH
11932: LD_INT 0
11934: ST_TO_ADDR
// sDLaser := false ;
11935: LD_ADDR_EXP 110
11939: PUSH
11940: LD_INT 0
11942: ST_TO_ADDR
// sExchange := false ;
11943: LD_ADDR_EXP 111
11947: PUSH
11948: LD_INT 0
11950: ST_TO_ADDR
// sFac := false ;
11951: LD_ADDR_EXP 112
11955: PUSH
11956: LD_INT 0
11958: ST_TO_ADDR
// sPower := false ;
11959: LD_ADDR_EXP 113
11963: PUSH
11964: LD_INT 0
11966: ST_TO_ADDR
// sRandom := false ;
11967: LD_ADDR_EXP 114
11971: PUSH
11972: LD_INT 0
11974: ST_TO_ADDR
// sShield := false ;
11975: LD_ADDR_EXP 115
11979: PUSH
11980: LD_INT 0
11982: ST_TO_ADDR
// sTime := false ;
11983: LD_ADDR_EXP 116
11987: PUSH
11988: LD_INT 0
11990: ST_TO_ADDR
// sTools := false ;
11991: LD_ADDR_EXP 117
11995: PUSH
11996: LD_INT 0
11998: ST_TO_ADDR
// sSold := false ;
11999: LD_ADDR_EXP 82
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// sDiff := false ;
12007: LD_ADDR_EXP 83
12011: PUSH
12012: LD_INT 0
12014: ST_TO_ADDR
// sFog := false ;
12015: LD_ADDR_EXP 86
12019: PUSH
12020: LD_INT 0
12022: ST_TO_ADDR
// sReset := false ;
12023: LD_ADDR_EXP 87
12027: PUSH
12028: LD_INT 0
12030: ST_TO_ADDR
// sSun := false ;
12031: LD_ADDR_EXP 88
12035: PUSH
12036: LD_INT 0
12038: ST_TO_ADDR
// sTiger := false ;
12039: LD_ADDR_EXP 84
12043: PUSH
12044: LD_INT 0
12046: ST_TO_ADDR
// sBomb := false ;
12047: LD_ADDR_EXP 85
12051: PUSH
12052: LD_INT 0
12054: ST_TO_ADDR
// sWound := false ;
12055: LD_ADDR_EXP 93
12059: PUSH
12060: LD_INT 0
12062: ST_TO_ADDR
// sBetray := false ;
12063: LD_ADDR_EXP 97
12067: PUSH
12068: LD_INT 0
12070: ST_TO_ADDR
// sContamin := false ;
12071: LD_ADDR_EXP 98
12075: PUSH
12076: LD_INT 0
12078: ST_TO_ADDR
// sOil := false ;
12079: LD_ADDR_EXP 100
12083: PUSH
12084: LD_INT 0
12086: ST_TO_ADDR
// sStu := false ;
12087: LD_ADDR_EXP 104
12091: PUSH
12092: LD_INT 0
12094: ST_TO_ADDR
// sBazooka := false ;
12095: LD_ADDR_EXP 107
12099: PUSH
12100: LD_INT 0
12102: ST_TO_ADDR
// sMortar := false ;
12103: LD_ADDR_EXP 108
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// sRanger := false ;
12111: LD_ADDR_EXP 118
12115: PUSH
12116: LD_INT 0
12118: ST_TO_ADDR
// sComputer := false ;
12119: LD_ADDR_EXP 119
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// s30 := false ;
12127: LD_ADDR_EXP 120
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// s60 := false ;
12135: LD_ADDR_EXP 121
12139: PUSH
12140: LD_INT 0
12142: ST_TO_ADDR
// end ;
12143: LD_VAR 0 1
12147: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12148: LD_INT 0
12150: PPUSH
12151: PPUSH
12152: PPUSH
12153: PPUSH
12154: PPUSH
12155: PPUSH
12156: PPUSH
// result := [ ] ;
12157: LD_ADDR_VAR 0 2
12161: PUSH
12162: EMPTY
12163: ST_TO_ADDR
// if campaign_id = 1 then
12164: LD_OWVAR 69
12168: PUSH
12169: LD_INT 1
12171: EQUAL
12172: IFFALSE 15338
// begin case mission_number of 1 :
12174: LD_OWVAR 70
12178: PUSH
12179: LD_INT 1
12181: DOUBLE
12182: EQUAL
12183: IFTRUE 12187
12185: GO 12263
12187: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12188: LD_ADDR_VAR 0 2
12192: PUSH
12193: LD_INT 2
12195: PUSH
12196: LD_INT 4
12198: PUSH
12199: LD_INT 11
12201: PUSH
12202: LD_INT 12
12204: PUSH
12205: LD_INT 15
12207: PUSH
12208: LD_INT 16
12210: PUSH
12211: LD_INT 22
12213: PUSH
12214: LD_INT 23
12216: PUSH
12217: LD_INT 26
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: PUSH
12231: LD_INT 101
12233: PUSH
12234: LD_INT 102
12236: PUSH
12237: LD_INT 106
12239: PUSH
12240: LD_INT 116
12242: PUSH
12243: LD_INT 117
12245: PUSH
12246: LD_INT 118
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: ST_TO_ADDR
12261: GO 15336
12263: LD_INT 2
12265: DOUBLE
12266: EQUAL
12267: IFTRUE 12271
12269: GO 12355
12271: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12272: LD_ADDR_VAR 0 2
12276: PUSH
12277: LD_INT 2
12279: PUSH
12280: LD_INT 4
12282: PUSH
12283: LD_INT 11
12285: PUSH
12286: LD_INT 12
12288: PUSH
12289: LD_INT 15
12291: PUSH
12292: LD_INT 16
12294: PUSH
12295: LD_INT 22
12297: PUSH
12298: LD_INT 23
12300: PUSH
12301: LD_INT 26
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: PUSH
12315: LD_INT 101
12317: PUSH
12318: LD_INT 102
12320: PUSH
12321: LD_INT 105
12323: PUSH
12324: LD_INT 106
12326: PUSH
12327: LD_INT 108
12329: PUSH
12330: LD_INT 116
12332: PUSH
12333: LD_INT 117
12335: PUSH
12336: LD_INT 118
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: ST_TO_ADDR
12353: GO 15336
12355: LD_INT 3
12357: DOUBLE
12358: EQUAL
12359: IFTRUE 12363
12361: GO 12451
12363: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12364: LD_ADDR_VAR 0 2
12368: PUSH
12369: LD_INT 2
12371: PUSH
12372: LD_INT 4
12374: PUSH
12375: LD_INT 5
12377: PUSH
12378: LD_INT 11
12380: PUSH
12381: LD_INT 12
12383: PUSH
12384: LD_INT 15
12386: PUSH
12387: LD_INT 16
12389: PUSH
12390: LD_INT 22
12392: PUSH
12393: LD_INT 26
12395: PUSH
12396: LD_INT 36
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 101
12413: PUSH
12414: LD_INT 102
12416: PUSH
12417: LD_INT 105
12419: PUSH
12420: LD_INT 106
12422: PUSH
12423: LD_INT 108
12425: PUSH
12426: LD_INT 116
12428: PUSH
12429: LD_INT 117
12431: PUSH
12432: LD_INT 118
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: ST_TO_ADDR
12449: GO 15336
12451: LD_INT 4
12453: DOUBLE
12454: EQUAL
12455: IFTRUE 12459
12457: GO 12555
12459: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12460: LD_ADDR_VAR 0 2
12464: PUSH
12465: LD_INT 2
12467: PUSH
12468: LD_INT 4
12470: PUSH
12471: LD_INT 5
12473: PUSH
12474: LD_INT 8
12476: PUSH
12477: LD_INT 11
12479: PUSH
12480: LD_INT 12
12482: PUSH
12483: LD_INT 15
12485: PUSH
12486: LD_INT 16
12488: PUSH
12489: LD_INT 22
12491: PUSH
12492: LD_INT 23
12494: PUSH
12495: LD_INT 26
12497: PUSH
12498: LD_INT 36
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: PUSH
12515: LD_INT 101
12517: PUSH
12518: LD_INT 102
12520: PUSH
12521: LD_INT 105
12523: PUSH
12524: LD_INT 106
12526: PUSH
12527: LD_INT 108
12529: PUSH
12530: LD_INT 116
12532: PUSH
12533: LD_INT 117
12535: PUSH
12536: LD_INT 118
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: ST_TO_ADDR
12553: GO 15336
12555: LD_INT 5
12557: DOUBLE
12558: EQUAL
12559: IFTRUE 12563
12561: GO 12675
12563: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12564: LD_ADDR_VAR 0 2
12568: PUSH
12569: LD_INT 2
12571: PUSH
12572: LD_INT 4
12574: PUSH
12575: LD_INT 5
12577: PUSH
12578: LD_INT 6
12580: PUSH
12581: LD_INT 8
12583: PUSH
12584: LD_INT 11
12586: PUSH
12587: LD_INT 12
12589: PUSH
12590: LD_INT 15
12592: PUSH
12593: LD_INT 16
12595: PUSH
12596: LD_INT 22
12598: PUSH
12599: LD_INT 23
12601: PUSH
12602: LD_INT 25
12604: PUSH
12605: LD_INT 26
12607: PUSH
12608: LD_INT 36
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: PUSH
12627: LD_INT 101
12629: PUSH
12630: LD_INT 102
12632: PUSH
12633: LD_INT 105
12635: PUSH
12636: LD_INT 106
12638: PUSH
12639: LD_INT 108
12641: PUSH
12642: LD_INT 109
12644: PUSH
12645: LD_INT 112
12647: PUSH
12648: LD_INT 116
12650: PUSH
12651: LD_INT 117
12653: PUSH
12654: LD_INT 118
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: ST_TO_ADDR
12673: GO 15336
12675: LD_INT 6
12677: DOUBLE
12678: EQUAL
12679: IFTRUE 12683
12681: GO 12815
12683: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12684: LD_ADDR_VAR 0 2
12688: PUSH
12689: LD_INT 2
12691: PUSH
12692: LD_INT 4
12694: PUSH
12695: LD_INT 5
12697: PUSH
12698: LD_INT 6
12700: PUSH
12701: LD_INT 8
12703: PUSH
12704: LD_INT 11
12706: PUSH
12707: LD_INT 12
12709: PUSH
12710: LD_INT 15
12712: PUSH
12713: LD_INT 16
12715: PUSH
12716: LD_INT 20
12718: PUSH
12719: LD_INT 21
12721: PUSH
12722: LD_INT 22
12724: PUSH
12725: LD_INT 23
12727: PUSH
12728: LD_INT 25
12730: PUSH
12731: LD_INT 26
12733: PUSH
12734: LD_INT 30
12736: PUSH
12737: LD_INT 31
12739: PUSH
12740: LD_INT 32
12742: PUSH
12743: LD_INT 36
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: PUSH
12767: LD_INT 101
12769: PUSH
12770: LD_INT 102
12772: PUSH
12773: LD_INT 105
12775: PUSH
12776: LD_INT 106
12778: PUSH
12779: LD_INT 108
12781: PUSH
12782: LD_INT 109
12784: PUSH
12785: LD_INT 112
12787: PUSH
12788: LD_INT 116
12790: PUSH
12791: LD_INT 117
12793: PUSH
12794: LD_INT 118
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: ST_TO_ADDR
12813: GO 15336
12815: LD_INT 7
12817: DOUBLE
12818: EQUAL
12819: IFTRUE 12823
12821: GO 12935
12823: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12824: LD_ADDR_VAR 0 2
12828: PUSH
12829: LD_INT 2
12831: PUSH
12832: LD_INT 4
12834: PUSH
12835: LD_INT 5
12837: PUSH
12838: LD_INT 7
12840: PUSH
12841: LD_INT 11
12843: PUSH
12844: LD_INT 12
12846: PUSH
12847: LD_INT 15
12849: PUSH
12850: LD_INT 16
12852: PUSH
12853: LD_INT 20
12855: PUSH
12856: LD_INT 21
12858: PUSH
12859: LD_INT 22
12861: PUSH
12862: LD_INT 23
12864: PUSH
12865: LD_INT 25
12867: PUSH
12868: LD_INT 26
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: PUSH
12887: LD_INT 101
12889: PUSH
12890: LD_INT 102
12892: PUSH
12893: LD_INT 103
12895: PUSH
12896: LD_INT 105
12898: PUSH
12899: LD_INT 106
12901: PUSH
12902: LD_INT 108
12904: PUSH
12905: LD_INT 112
12907: PUSH
12908: LD_INT 116
12910: PUSH
12911: LD_INT 117
12913: PUSH
12914: LD_INT 118
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: ST_TO_ADDR
12933: GO 15336
12935: LD_INT 8
12937: DOUBLE
12938: EQUAL
12939: IFTRUE 12943
12941: GO 13083
12943: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12944: LD_ADDR_VAR 0 2
12948: PUSH
12949: LD_INT 2
12951: PUSH
12952: LD_INT 4
12954: PUSH
12955: LD_INT 5
12957: PUSH
12958: LD_INT 6
12960: PUSH
12961: LD_INT 7
12963: PUSH
12964: LD_INT 8
12966: PUSH
12967: LD_INT 11
12969: PUSH
12970: LD_INT 12
12972: PUSH
12973: LD_INT 15
12975: PUSH
12976: LD_INT 16
12978: PUSH
12979: LD_INT 20
12981: PUSH
12982: LD_INT 21
12984: PUSH
12985: LD_INT 22
12987: PUSH
12988: LD_INT 23
12990: PUSH
12991: LD_INT 25
12993: PUSH
12994: LD_INT 26
12996: PUSH
12997: LD_INT 30
12999: PUSH
13000: LD_INT 31
13002: PUSH
13003: LD_INT 32
13005: PUSH
13006: LD_INT 36
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 101
13033: PUSH
13034: LD_INT 102
13036: PUSH
13037: LD_INT 103
13039: PUSH
13040: LD_INT 105
13042: PUSH
13043: LD_INT 106
13045: PUSH
13046: LD_INT 108
13048: PUSH
13049: LD_INT 109
13051: PUSH
13052: LD_INT 112
13054: PUSH
13055: LD_INT 116
13057: PUSH
13058: LD_INT 117
13060: PUSH
13061: LD_INT 118
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: ST_TO_ADDR
13081: GO 15336
13083: LD_INT 9
13085: DOUBLE
13086: EQUAL
13087: IFTRUE 13091
13089: GO 13239
13091: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13092: LD_ADDR_VAR 0 2
13096: PUSH
13097: LD_INT 2
13099: PUSH
13100: LD_INT 4
13102: PUSH
13103: LD_INT 5
13105: PUSH
13106: LD_INT 6
13108: PUSH
13109: LD_INT 7
13111: PUSH
13112: LD_INT 8
13114: PUSH
13115: LD_INT 11
13117: PUSH
13118: LD_INT 12
13120: PUSH
13121: LD_INT 15
13123: PUSH
13124: LD_INT 16
13126: PUSH
13127: LD_INT 20
13129: PUSH
13130: LD_INT 21
13132: PUSH
13133: LD_INT 22
13135: PUSH
13136: LD_INT 23
13138: PUSH
13139: LD_INT 25
13141: PUSH
13142: LD_INT 26
13144: PUSH
13145: LD_INT 28
13147: PUSH
13148: LD_INT 30
13150: PUSH
13151: LD_INT 31
13153: PUSH
13154: LD_INT 32
13156: PUSH
13157: LD_INT 36
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 101
13185: PUSH
13186: LD_INT 102
13188: PUSH
13189: LD_INT 103
13191: PUSH
13192: LD_INT 105
13194: PUSH
13195: LD_INT 106
13197: PUSH
13198: LD_INT 108
13200: PUSH
13201: LD_INT 109
13203: PUSH
13204: LD_INT 112
13206: PUSH
13207: LD_INT 114
13209: PUSH
13210: LD_INT 116
13212: PUSH
13213: LD_INT 117
13215: PUSH
13216: LD_INT 118
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: ST_TO_ADDR
13237: GO 15336
13239: LD_INT 10
13241: DOUBLE
13242: EQUAL
13243: IFTRUE 13247
13245: GO 13443
13247: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13248: LD_ADDR_VAR 0 2
13252: PUSH
13253: LD_INT 2
13255: PUSH
13256: LD_INT 4
13258: PUSH
13259: LD_INT 5
13261: PUSH
13262: LD_INT 6
13264: PUSH
13265: LD_INT 7
13267: PUSH
13268: LD_INT 8
13270: PUSH
13271: LD_INT 9
13273: PUSH
13274: LD_INT 10
13276: PUSH
13277: LD_INT 11
13279: PUSH
13280: LD_INT 12
13282: PUSH
13283: LD_INT 13
13285: PUSH
13286: LD_INT 14
13288: PUSH
13289: LD_INT 15
13291: PUSH
13292: LD_INT 16
13294: PUSH
13295: LD_INT 17
13297: PUSH
13298: LD_INT 18
13300: PUSH
13301: LD_INT 19
13303: PUSH
13304: LD_INT 20
13306: PUSH
13307: LD_INT 21
13309: PUSH
13310: LD_INT 22
13312: PUSH
13313: LD_INT 23
13315: PUSH
13316: LD_INT 24
13318: PUSH
13319: LD_INT 25
13321: PUSH
13322: LD_INT 26
13324: PUSH
13325: LD_INT 28
13327: PUSH
13328: LD_INT 30
13330: PUSH
13331: LD_INT 31
13333: PUSH
13334: LD_INT 32
13336: PUSH
13337: LD_INT 36
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 101
13373: PUSH
13374: LD_INT 102
13376: PUSH
13377: LD_INT 103
13379: PUSH
13380: LD_INT 104
13382: PUSH
13383: LD_INT 105
13385: PUSH
13386: LD_INT 106
13388: PUSH
13389: LD_INT 107
13391: PUSH
13392: LD_INT 108
13394: PUSH
13395: LD_INT 109
13397: PUSH
13398: LD_INT 110
13400: PUSH
13401: LD_INT 111
13403: PUSH
13404: LD_INT 112
13406: PUSH
13407: LD_INT 114
13409: PUSH
13410: LD_INT 116
13412: PUSH
13413: LD_INT 117
13415: PUSH
13416: LD_INT 118
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: ST_TO_ADDR
13441: GO 15336
13443: LD_INT 11
13445: DOUBLE
13446: EQUAL
13447: IFTRUE 13451
13449: GO 13655
13451: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13452: LD_ADDR_VAR 0 2
13456: PUSH
13457: LD_INT 2
13459: PUSH
13460: LD_INT 3
13462: PUSH
13463: LD_INT 4
13465: PUSH
13466: LD_INT 5
13468: PUSH
13469: LD_INT 6
13471: PUSH
13472: LD_INT 7
13474: PUSH
13475: LD_INT 8
13477: PUSH
13478: LD_INT 9
13480: PUSH
13481: LD_INT 10
13483: PUSH
13484: LD_INT 11
13486: PUSH
13487: LD_INT 12
13489: PUSH
13490: LD_INT 13
13492: PUSH
13493: LD_INT 14
13495: PUSH
13496: LD_INT 15
13498: PUSH
13499: LD_INT 16
13501: PUSH
13502: LD_INT 17
13504: PUSH
13505: LD_INT 18
13507: PUSH
13508: LD_INT 19
13510: PUSH
13511: LD_INT 20
13513: PUSH
13514: LD_INT 21
13516: PUSH
13517: LD_INT 22
13519: PUSH
13520: LD_INT 23
13522: PUSH
13523: LD_INT 24
13525: PUSH
13526: LD_INT 25
13528: PUSH
13529: LD_INT 26
13531: PUSH
13532: LD_INT 28
13534: PUSH
13535: LD_INT 30
13537: PUSH
13538: LD_INT 31
13540: PUSH
13541: LD_INT 32
13543: PUSH
13544: LD_INT 34
13546: PUSH
13547: LD_INT 36
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 101
13585: PUSH
13586: LD_INT 102
13588: PUSH
13589: LD_INT 103
13591: PUSH
13592: LD_INT 104
13594: PUSH
13595: LD_INT 105
13597: PUSH
13598: LD_INT 106
13600: PUSH
13601: LD_INT 107
13603: PUSH
13604: LD_INT 108
13606: PUSH
13607: LD_INT 109
13609: PUSH
13610: LD_INT 110
13612: PUSH
13613: LD_INT 111
13615: PUSH
13616: LD_INT 112
13618: PUSH
13619: LD_INT 114
13621: PUSH
13622: LD_INT 116
13624: PUSH
13625: LD_INT 117
13627: PUSH
13628: LD_INT 118
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: ST_TO_ADDR
13653: GO 15336
13655: LD_INT 12
13657: DOUBLE
13658: EQUAL
13659: IFTRUE 13663
13661: GO 13883
13663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13664: LD_ADDR_VAR 0 2
13668: PUSH
13669: LD_INT 1
13671: PUSH
13672: LD_INT 2
13674: PUSH
13675: LD_INT 3
13677: PUSH
13678: LD_INT 4
13680: PUSH
13681: LD_INT 5
13683: PUSH
13684: LD_INT 6
13686: PUSH
13687: LD_INT 7
13689: PUSH
13690: LD_INT 8
13692: PUSH
13693: LD_INT 9
13695: PUSH
13696: LD_INT 10
13698: PUSH
13699: LD_INT 11
13701: PUSH
13702: LD_INT 12
13704: PUSH
13705: LD_INT 13
13707: PUSH
13708: LD_INT 14
13710: PUSH
13711: LD_INT 15
13713: PUSH
13714: LD_INT 16
13716: PUSH
13717: LD_INT 17
13719: PUSH
13720: LD_INT 18
13722: PUSH
13723: LD_INT 19
13725: PUSH
13726: LD_INT 20
13728: PUSH
13729: LD_INT 21
13731: PUSH
13732: LD_INT 22
13734: PUSH
13735: LD_INT 23
13737: PUSH
13738: LD_INT 24
13740: PUSH
13741: LD_INT 25
13743: PUSH
13744: LD_INT 26
13746: PUSH
13747: LD_INT 27
13749: PUSH
13750: LD_INT 28
13752: PUSH
13753: LD_INT 30
13755: PUSH
13756: LD_INT 31
13758: PUSH
13759: LD_INT 32
13761: PUSH
13762: LD_INT 33
13764: PUSH
13765: LD_INT 34
13767: PUSH
13768: LD_INT 36
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 101
13809: PUSH
13810: LD_INT 102
13812: PUSH
13813: LD_INT 103
13815: PUSH
13816: LD_INT 104
13818: PUSH
13819: LD_INT 105
13821: PUSH
13822: LD_INT 106
13824: PUSH
13825: LD_INT 107
13827: PUSH
13828: LD_INT 108
13830: PUSH
13831: LD_INT 109
13833: PUSH
13834: LD_INT 110
13836: PUSH
13837: LD_INT 111
13839: PUSH
13840: LD_INT 112
13842: PUSH
13843: LD_INT 113
13845: PUSH
13846: LD_INT 114
13848: PUSH
13849: LD_INT 116
13851: PUSH
13852: LD_INT 117
13854: PUSH
13855: LD_INT 118
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: ST_TO_ADDR
13881: GO 15336
13883: LD_INT 13
13885: DOUBLE
13886: EQUAL
13887: IFTRUE 13891
13889: GO 14099
13891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13892: LD_ADDR_VAR 0 2
13896: PUSH
13897: LD_INT 1
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: LD_INT 3
13905: PUSH
13906: LD_INT 4
13908: PUSH
13909: LD_INT 5
13911: PUSH
13912: LD_INT 8
13914: PUSH
13915: LD_INT 9
13917: PUSH
13918: LD_INT 10
13920: PUSH
13921: LD_INT 11
13923: PUSH
13924: LD_INT 12
13926: PUSH
13927: LD_INT 14
13929: PUSH
13930: LD_INT 15
13932: PUSH
13933: LD_INT 16
13935: PUSH
13936: LD_INT 17
13938: PUSH
13939: LD_INT 18
13941: PUSH
13942: LD_INT 19
13944: PUSH
13945: LD_INT 20
13947: PUSH
13948: LD_INT 21
13950: PUSH
13951: LD_INT 22
13953: PUSH
13954: LD_INT 23
13956: PUSH
13957: LD_INT 24
13959: PUSH
13960: LD_INT 25
13962: PUSH
13963: LD_INT 26
13965: PUSH
13966: LD_INT 27
13968: PUSH
13969: LD_INT 28
13971: PUSH
13972: LD_INT 30
13974: PUSH
13975: LD_INT 31
13977: PUSH
13978: LD_INT 32
13980: PUSH
13981: LD_INT 33
13983: PUSH
13984: LD_INT 34
13986: PUSH
13987: LD_INT 36
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 101
14025: PUSH
14026: LD_INT 102
14028: PUSH
14029: LD_INT 103
14031: PUSH
14032: LD_INT 104
14034: PUSH
14035: LD_INT 105
14037: PUSH
14038: LD_INT 106
14040: PUSH
14041: LD_INT 107
14043: PUSH
14044: LD_INT 108
14046: PUSH
14047: LD_INT 109
14049: PUSH
14050: LD_INT 110
14052: PUSH
14053: LD_INT 111
14055: PUSH
14056: LD_INT 112
14058: PUSH
14059: LD_INT 113
14061: PUSH
14062: LD_INT 114
14064: PUSH
14065: LD_INT 116
14067: PUSH
14068: LD_INT 117
14070: PUSH
14071: LD_INT 118
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: ST_TO_ADDR
14097: GO 15336
14099: LD_INT 14
14101: DOUBLE
14102: EQUAL
14103: IFTRUE 14107
14105: GO 14331
14107: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14108: LD_ADDR_VAR 0 2
14112: PUSH
14113: LD_INT 1
14115: PUSH
14116: LD_INT 2
14118: PUSH
14119: LD_INT 3
14121: PUSH
14122: LD_INT 4
14124: PUSH
14125: LD_INT 5
14127: PUSH
14128: LD_INT 6
14130: PUSH
14131: LD_INT 7
14133: PUSH
14134: LD_INT 8
14136: PUSH
14137: LD_INT 9
14139: PUSH
14140: LD_INT 10
14142: PUSH
14143: LD_INT 11
14145: PUSH
14146: LD_INT 12
14148: PUSH
14149: LD_INT 13
14151: PUSH
14152: LD_INT 14
14154: PUSH
14155: LD_INT 15
14157: PUSH
14158: LD_INT 16
14160: PUSH
14161: LD_INT 17
14163: PUSH
14164: LD_INT 18
14166: PUSH
14167: LD_INT 19
14169: PUSH
14170: LD_INT 20
14172: PUSH
14173: LD_INT 21
14175: PUSH
14176: LD_INT 22
14178: PUSH
14179: LD_INT 23
14181: PUSH
14182: LD_INT 24
14184: PUSH
14185: LD_INT 25
14187: PUSH
14188: LD_INT 26
14190: PUSH
14191: LD_INT 27
14193: PUSH
14194: LD_INT 28
14196: PUSH
14197: LD_INT 29
14199: PUSH
14200: LD_INT 30
14202: PUSH
14203: LD_INT 31
14205: PUSH
14206: LD_INT 32
14208: PUSH
14209: LD_INT 33
14211: PUSH
14212: LD_INT 34
14214: PUSH
14215: LD_INT 36
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 101
14257: PUSH
14258: LD_INT 102
14260: PUSH
14261: LD_INT 103
14263: PUSH
14264: LD_INT 104
14266: PUSH
14267: LD_INT 105
14269: PUSH
14270: LD_INT 106
14272: PUSH
14273: LD_INT 107
14275: PUSH
14276: LD_INT 108
14278: PUSH
14279: LD_INT 109
14281: PUSH
14282: LD_INT 110
14284: PUSH
14285: LD_INT 111
14287: PUSH
14288: LD_INT 112
14290: PUSH
14291: LD_INT 113
14293: PUSH
14294: LD_INT 114
14296: PUSH
14297: LD_INT 116
14299: PUSH
14300: LD_INT 117
14302: PUSH
14303: LD_INT 118
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: ST_TO_ADDR
14329: GO 15336
14331: LD_INT 15
14333: DOUBLE
14334: EQUAL
14335: IFTRUE 14339
14337: GO 14563
14339: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14340: LD_ADDR_VAR 0 2
14344: PUSH
14345: LD_INT 1
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: LD_INT 3
14353: PUSH
14354: LD_INT 4
14356: PUSH
14357: LD_INT 5
14359: PUSH
14360: LD_INT 6
14362: PUSH
14363: LD_INT 7
14365: PUSH
14366: LD_INT 8
14368: PUSH
14369: LD_INT 9
14371: PUSH
14372: LD_INT 10
14374: PUSH
14375: LD_INT 11
14377: PUSH
14378: LD_INT 12
14380: PUSH
14381: LD_INT 13
14383: PUSH
14384: LD_INT 14
14386: PUSH
14387: LD_INT 15
14389: PUSH
14390: LD_INT 16
14392: PUSH
14393: LD_INT 17
14395: PUSH
14396: LD_INT 18
14398: PUSH
14399: LD_INT 19
14401: PUSH
14402: LD_INT 20
14404: PUSH
14405: LD_INT 21
14407: PUSH
14408: LD_INT 22
14410: PUSH
14411: LD_INT 23
14413: PUSH
14414: LD_INT 24
14416: PUSH
14417: LD_INT 25
14419: PUSH
14420: LD_INT 26
14422: PUSH
14423: LD_INT 27
14425: PUSH
14426: LD_INT 28
14428: PUSH
14429: LD_INT 29
14431: PUSH
14432: LD_INT 30
14434: PUSH
14435: LD_INT 31
14437: PUSH
14438: LD_INT 32
14440: PUSH
14441: LD_INT 33
14443: PUSH
14444: LD_INT 34
14446: PUSH
14447: LD_INT 36
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 101
14489: PUSH
14490: LD_INT 102
14492: PUSH
14493: LD_INT 103
14495: PUSH
14496: LD_INT 104
14498: PUSH
14499: LD_INT 105
14501: PUSH
14502: LD_INT 106
14504: PUSH
14505: LD_INT 107
14507: PUSH
14508: LD_INT 108
14510: PUSH
14511: LD_INT 109
14513: PUSH
14514: LD_INT 110
14516: PUSH
14517: LD_INT 111
14519: PUSH
14520: LD_INT 112
14522: PUSH
14523: LD_INT 113
14525: PUSH
14526: LD_INT 114
14528: PUSH
14529: LD_INT 116
14531: PUSH
14532: LD_INT 117
14534: PUSH
14535: LD_INT 118
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: ST_TO_ADDR
14561: GO 15336
14563: LD_INT 16
14565: DOUBLE
14566: EQUAL
14567: IFTRUE 14571
14569: GO 14707
14571: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14572: LD_ADDR_VAR 0 2
14576: PUSH
14577: LD_INT 2
14579: PUSH
14580: LD_INT 4
14582: PUSH
14583: LD_INT 5
14585: PUSH
14586: LD_INT 7
14588: PUSH
14589: LD_INT 11
14591: PUSH
14592: LD_INT 12
14594: PUSH
14595: LD_INT 15
14597: PUSH
14598: LD_INT 16
14600: PUSH
14601: LD_INT 20
14603: PUSH
14604: LD_INT 21
14606: PUSH
14607: LD_INT 22
14609: PUSH
14610: LD_INT 23
14612: PUSH
14613: LD_INT 25
14615: PUSH
14616: LD_INT 26
14618: PUSH
14619: LD_INT 30
14621: PUSH
14622: LD_INT 31
14624: PUSH
14625: LD_INT 32
14627: PUSH
14628: LD_INT 33
14630: PUSH
14631: LD_INT 34
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 101
14657: PUSH
14658: LD_INT 102
14660: PUSH
14661: LD_INT 103
14663: PUSH
14664: LD_INT 106
14666: PUSH
14667: LD_INT 108
14669: PUSH
14670: LD_INT 112
14672: PUSH
14673: LD_INT 113
14675: PUSH
14676: LD_INT 114
14678: PUSH
14679: LD_INT 116
14681: PUSH
14682: LD_INT 117
14684: PUSH
14685: LD_INT 118
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: ST_TO_ADDR
14705: GO 15336
14707: LD_INT 17
14709: DOUBLE
14710: EQUAL
14711: IFTRUE 14715
14713: GO 14939
14715: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14716: LD_ADDR_VAR 0 2
14720: PUSH
14721: LD_INT 1
14723: PUSH
14724: LD_INT 2
14726: PUSH
14727: LD_INT 3
14729: PUSH
14730: LD_INT 4
14732: PUSH
14733: LD_INT 5
14735: PUSH
14736: LD_INT 6
14738: PUSH
14739: LD_INT 7
14741: PUSH
14742: LD_INT 8
14744: PUSH
14745: LD_INT 9
14747: PUSH
14748: LD_INT 10
14750: PUSH
14751: LD_INT 11
14753: PUSH
14754: LD_INT 12
14756: PUSH
14757: LD_INT 13
14759: PUSH
14760: LD_INT 14
14762: PUSH
14763: LD_INT 15
14765: PUSH
14766: LD_INT 16
14768: PUSH
14769: LD_INT 17
14771: PUSH
14772: LD_INT 18
14774: PUSH
14775: LD_INT 19
14777: PUSH
14778: LD_INT 20
14780: PUSH
14781: LD_INT 21
14783: PUSH
14784: LD_INT 22
14786: PUSH
14787: LD_INT 23
14789: PUSH
14790: LD_INT 24
14792: PUSH
14793: LD_INT 25
14795: PUSH
14796: LD_INT 26
14798: PUSH
14799: LD_INT 27
14801: PUSH
14802: LD_INT 28
14804: PUSH
14805: LD_INT 29
14807: PUSH
14808: LD_INT 30
14810: PUSH
14811: LD_INT 31
14813: PUSH
14814: LD_INT 32
14816: PUSH
14817: LD_INT 33
14819: PUSH
14820: LD_INT 34
14822: PUSH
14823: LD_INT 36
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 101
14865: PUSH
14866: LD_INT 102
14868: PUSH
14869: LD_INT 103
14871: PUSH
14872: LD_INT 104
14874: PUSH
14875: LD_INT 105
14877: PUSH
14878: LD_INT 106
14880: PUSH
14881: LD_INT 107
14883: PUSH
14884: LD_INT 108
14886: PUSH
14887: LD_INT 109
14889: PUSH
14890: LD_INT 110
14892: PUSH
14893: LD_INT 111
14895: PUSH
14896: LD_INT 112
14898: PUSH
14899: LD_INT 113
14901: PUSH
14902: LD_INT 114
14904: PUSH
14905: LD_INT 116
14907: PUSH
14908: LD_INT 117
14910: PUSH
14911: LD_INT 118
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: ST_TO_ADDR
14937: GO 15336
14939: LD_INT 18
14941: DOUBLE
14942: EQUAL
14943: IFTRUE 14947
14945: GO 15095
14947: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14948: LD_ADDR_VAR 0 2
14952: PUSH
14953: LD_INT 2
14955: PUSH
14956: LD_INT 4
14958: PUSH
14959: LD_INT 5
14961: PUSH
14962: LD_INT 7
14964: PUSH
14965: LD_INT 11
14967: PUSH
14968: LD_INT 12
14970: PUSH
14971: LD_INT 15
14973: PUSH
14974: LD_INT 16
14976: PUSH
14977: LD_INT 20
14979: PUSH
14980: LD_INT 21
14982: PUSH
14983: LD_INT 22
14985: PUSH
14986: LD_INT 23
14988: PUSH
14989: LD_INT 25
14991: PUSH
14992: LD_INT 26
14994: PUSH
14995: LD_INT 30
14997: PUSH
14998: LD_INT 31
15000: PUSH
15001: LD_INT 32
15003: PUSH
15004: LD_INT 33
15006: PUSH
15007: LD_INT 34
15009: PUSH
15010: LD_INT 35
15012: PUSH
15013: LD_INT 36
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: PUSH
15039: LD_INT 101
15041: PUSH
15042: LD_INT 102
15044: PUSH
15045: LD_INT 103
15047: PUSH
15048: LD_INT 106
15050: PUSH
15051: LD_INT 108
15053: PUSH
15054: LD_INT 112
15056: PUSH
15057: LD_INT 113
15059: PUSH
15060: LD_INT 114
15062: PUSH
15063: LD_INT 115
15065: PUSH
15066: LD_INT 116
15068: PUSH
15069: LD_INT 117
15071: PUSH
15072: LD_INT 118
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: ST_TO_ADDR
15093: GO 15336
15095: LD_INT 19
15097: DOUBLE
15098: EQUAL
15099: IFTRUE 15103
15101: GO 15335
15103: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15104: LD_ADDR_VAR 0 2
15108: PUSH
15109: LD_INT 1
15111: PUSH
15112: LD_INT 2
15114: PUSH
15115: LD_INT 3
15117: PUSH
15118: LD_INT 4
15120: PUSH
15121: LD_INT 5
15123: PUSH
15124: LD_INT 6
15126: PUSH
15127: LD_INT 7
15129: PUSH
15130: LD_INT 8
15132: PUSH
15133: LD_INT 9
15135: PUSH
15136: LD_INT 10
15138: PUSH
15139: LD_INT 11
15141: PUSH
15142: LD_INT 12
15144: PUSH
15145: LD_INT 13
15147: PUSH
15148: LD_INT 14
15150: PUSH
15151: LD_INT 15
15153: PUSH
15154: LD_INT 16
15156: PUSH
15157: LD_INT 17
15159: PUSH
15160: LD_INT 18
15162: PUSH
15163: LD_INT 19
15165: PUSH
15166: LD_INT 20
15168: PUSH
15169: LD_INT 21
15171: PUSH
15172: LD_INT 22
15174: PUSH
15175: LD_INT 23
15177: PUSH
15178: LD_INT 24
15180: PUSH
15181: LD_INT 25
15183: PUSH
15184: LD_INT 26
15186: PUSH
15187: LD_INT 27
15189: PUSH
15190: LD_INT 28
15192: PUSH
15193: LD_INT 29
15195: PUSH
15196: LD_INT 30
15198: PUSH
15199: LD_INT 31
15201: PUSH
15202: LD_INT 32
15204: PUSH
15205: LD_INT 33
15207: PUSH
15208: LD_INT 34
15210: PUSH
15211: LD_INT 35
15213: PUSH
15214: LD_INT 36
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 101
15257: PUSH
15258: LD_INT 102
15260: PUSH
15261: LD_INT 103
15263: PUSH
15264: LD_INT 104
15266: PUSH
15267: LD_INT 105
15269: PUSH
15270: LD_INT 106
15272: PUSH
15273: LD_INT 107
15275: PUSH
15276: LD_INT 108
15278: PUSH
15279: LD_INT 109
15281: PUSH
15282: LD_INT 110
15284: PUSH
15285: LD_INT 111
15287: PUSH
15288: LD_INT 112
15290: PUSH
15291: LD_INT 113
15293: PUSH
15294: LD_INT 114
15296: PUSH
15297: LD_INT 115
15299: PUSH
15300: LD_INT 116
15302: PUSH
15303: LD_INT 117
15305: PUSH
15306: LD_INT 118
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: ST_TO_ADDR
15333: GO 15336
15335: POP
// end else
15336: GO 15567
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15338: LD_ADDR_VAR 0 2
15342: PUSH
15343: LD_INT 1
15345: PUSH
15346: LD_INT 2
15348: PUSH
15349: LD_INT 3
15351: PUSH
15352: LD_INT 4
15354: PUSH
15355: LD_INT 5
15357: PUSH
15358: LD_INT 6
15360: PUSH
15361: LD_INT 7
15363: PUSH
15364: LD_INT 8
15366: PUSH
15367: LD_INT 9
15369: PUSH
15370: LD_INT 10
15372: PUSH
15373: LD_INT 11
15375: PUSH
15376: LD_INT 12
15378: PUSH
15379: LD_INT 13
15381: PUSH
15382: LD_INT 14
15384: PUSH
15385: LD_INT 15
15387: PUSH
15388: LD_INT 16
15390: PUSH
15391: LD_INT 17
15393: PUSH
15394: LD_INT 18
15396: PUSH
15397: LD_INT 19
15399: PUSH
15400: LD_INT 20
15402: PUSH
15403: LD_INT 21
15405: PUSH
15406: LD_INT 22
15408: PUSH
15409: LD_INT 23
15411: PUSH
15412: LD_INT 24
15414: PUSH
15415: LD_INT 25
15417: PUSH
15418: LD_INT 26
15420: PUSH
15421: LD_INT 27
15423: PUSH
15424: LD_INT 28
15426: PUSH
15427: LD_INT 29
15429: PUSH
15430: LD_INT 30
15432: PUSH
15433: LD_INT 31
15435: PUSH
15436: LD_INT 32
15438: PUSH
15439: LD_INT 33
15441: PUSH
15442: LD_INT 34
15444: PUSH
15445: LD_INT 35
15447: PUSH
15448: LD_INT 36
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 101
15491: PUSH
15492: LD_INT 102
15494: PUSH
15495: LD_INT 103
15497: PUSH
15498: LD_INT 104
15500: PUSH
15501: LD_INT 105
15503: PUSH
15504: LD_INT 106
15506: PUSH
15507: LD_INT 107
15509: PUSH
15510: LD_INT 108
15512: PUSH
15513: LD_INT 109
15515: PUSH
15516: LD_INT 110
15518: PUSH
15519: LD_INT 111
15521: PUSH
15522: LD_INT 112
15524: PUSH
15525: LD_INT 113
15527: PUSH
15528: LD_INT 114
15530: PUSH
15531: LD_INT 115
15533: PUSH
15534: LD_INT 116
15536: PUSH
15537: LD_INT 117
15539: PUSH
15540: LD_INT 118
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: ST_TO_ADDR
// if result then
15567: LD_VAR 0 2
15571: IFFALSE 16357
// begin normal :=  ;
15573: LD_ADDR_VAR 0 5
15577: PUSH
15578: LD_STRING 
15580: ST_TO_ADDR
// hardcore :=  ;
15581: LD_ADDR_VAR 0 6
15585: PUSH
15586: LD_STRING 
15588: ST_TO_ADDR
// active :=  ;
15589: LD_ADDR_VAR 0 7
15593: PUSH
15594: LD_STRING 
15596: ST_TO_ADDR
// for i = 1 to normalCounter do
15597: LD_ADDR_VAR 0 8
15601: PUSH
15602: DOUBLE
15603: LD_INT 1
15605: DEC
15606: ST_TO_ADDR
15607: LD_EXP 66
15611: PUSH
15612: FOR_TO
15613: IFFALSE 15714
// begin tmp := 0 ;
15615: LD_ADDR_VAR 0 3
15619: PUSH
15620: LD_STRING 0
15622: ST_TO_ADDR
// if result [ 1 ] then
15623: LD_VAR 0 2
15627: PUSH
15628: LD_INT 1
15630: ARRAY
15631: IFFALSE 15696
// if result [ 1 ] [ 1 ] = i then
15633: LD_VAR 0 2
15637: PUSH
15638: LD_INT 1
15640: ARRAY
15641: PUSH
15642: LD_INT 1
15644: ARRAY
15645: PUSH
15646: LD_VAR 0 8
15650: EQUAL
15651: IFFALSE 15696
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15653: LD_ADDR_VAR 0 2
15657: PUSH
15658: LD_VAR 0 2
15662: PPUSH
15663: LD_INT 1
15665: PPUSH
15666: LD_VAR 0 2
15670: PUSH
15671: LD_INT 1
15673: ARRAY
15674: PPUSH
15675: LD_INT 1
15677: PPUSH
15678: CALL_OW 3
15682: PPUSH
15683: CALL_OW 1
15687: ST_TO_ADDR
// tmp := 1 ;
15688: LD_ADDR_VAR 0 3
15692: PUSH
15693: LD_STRING 1
15695: ST_TO_ADDR
// end ; normal := normal & tmp ;
15696: LD_ADDR_VAR 0 5
15700: PUSH
15701: LD_VAR 0 5
15705: PUSH
15706: LD_VAR 0 3
15710: STR
15711: ST_TO_ADDR
// end ;
15712: GO 15612
15714: POP
15715: POP
// for i = 1 to hardcoreCounter do
15716: LD_ADDR_VAR 0 8
15720: PUSH
15721: DOUBLE
15722: LD_INT 1
15724: DEC
15725: ST_TO_ADDR
15726: LD_EXP 67
15730: PUSH
15731: FOR_TO
15732: IFFALSE 15837
// begin tmp := 0 ;
15734: LD_ADDR_VAR 0 3
15738: PUSH
15739: LD_STRING 0
15741: ST_TO_ADDR
// if result [ 2 ] then
15742: LD_VAR 0 2
15746: PUSH
15747: LD_INT 2
15749: ARRAY
15750: IFFALSE 15819
// if result [ 2 ] [ 1 ] = 100 + i then
15752: LD_VAR 0 2
15756: PUSH
15757: LD_INT 2
15759: ARRAY
15760: PUSH
15761: LD_INT 1
15763: ARRAY
15764: PUSH
15765: LD_INT 100
15767: PUSH
15768: LD_VAR 0 8
15772: PLUS
15773: EQUAL
15774: IFFALSE 15819
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15776: LD_ADDR_VAR 0 2
15780: PUSH
15781: LD_VAR 0 2
15785: PPUSH
15786: LD_INT 2
15788: PPUSH
15789: LD_VAR 0 2
15793: PUSH
15794: LD_INT 2
15796: ARRAY
15797: PPUSH
15798: LD_INT 1
15800: PPUSH
15801: CALL_OW 3
15805: PPUSH
15806: CALL_OW 1
15810: ST_TO_ADDR
// tmp := 1 ;
15811: LD_ADDR_VAR 0 3
15815: PUSH
15816: LD_STRING 1
15818: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15819: LD_ADDR_VAR 0 6
15823: PUSH
15824: LD_VAR 0 6
15828: PUSH
15829: LD_VAR 0 3
15833: STR
15834: ST_TO_ADDR
// end ;
15835: GO 15731
15837: POP
15838: POP
// if isGameLoad then
15839: LD_VAR 0 1
15843: IFFALSE 16318
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15845: LD_ADDR_VAR 0 4
15849: PUSH
15850: LD_EXP 70
15854: PUSH
15855: LD_EXP 69
15859: PUSH
15860: LD_EXP 71
15864: PUSH
15865: LD_EXP 68
15869: PUSH
15870: LD_EXP 72
15874: PUSH
15875: LD_EXP 73
15879: PUSH
15880: LD_EXP 74
15884: PUSH
15885: LD_EXP 75
15889: PUSH
15890: LD_EXP 76
15894: PUSH
15895: LD_EXP 77
15899: PUSH
15900: LD_EXP 78
15904: PUSH
15905: LD_EXP 79
15909: PUSH
15910: LD_EXP 80
15914: PUSH
15915: LD_EXP 81
15919: PUSH
15920: LD_EXP 89
15924: PUSH
15925: LD_EXP 90
15929: PUSH
15930: LD_EXP 91
15934: PUSH
15935: LD_EXP 92
15939: PUSH
15940: LD_EXP 94
15944: PUSH
15945: LD_EXP 95
15949: PUSH
15950: LD_EXP 96
15954: PUSH
15955: LD_EXP 99
15959: PUSH
15960: LD_EXP 101
15964: PUSH
15965: LD_EXP 102
15969: PUSH
15970: LD_EXP 103
15974: PUSH
15975: LD_EXP 105
15979: PUSH
15980: LD_EXP 106
15984: PUSH
15985: LD_EXP 109
15989: PUSH
15990: LD_EXP 110
15994: PUSH
15995: LD_EXP 111
15999: PUSH
16000: LD_EXP 112
16004: PUSH
16005: LD_EXP 113
16009: PUSH
16010: LD_EXP 114
16014: PUSH
16015: LD_EXP 115
16019: PUSH
16020: LD_EXP 116
16024: PUSH
16025: LD_EXP 117
16029: PUSH
16030: LD_EXP 82
16034: PUSH
16035: LD_EXP 83
16039: PUSH
16040: LD_EXP 86
16044: PUSH
16045: LD_EXP 87
16049: PUSH
16050: LD_EXP 88
16054: PUSH
16055: LD_EXP 84
16059: PUSH
16060: LD_EXP 85
16064: PUSH
16065: LD_EXP 93
16069: PUSH
16070: LD_EXP 97
16074: PUSH
16075: LD_EXP 98
16079: PUSH
16080: LD_EXP 100
16084: PUSH
16085: LD_EXP 104
16089: PUSH
16090: LD_EXP 107
16094: PUSH
16095: LD_EXP 108
16099: PUSH
16100: LD_EXP 118
16104: PUSH
16105: LD_EXP 119
16109: PUSH
16110: LD_EXP 120
16114: PUSH
16115: LD_EXP 121
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: ST_TO_ADDR
// tmp :=  ;
16176: LD_ADDR_VAR 0 3
16180: PUSH
16181: LD_STRING 
16183: ST_TO_ADDR
// for i = 1 to normalCounter do
16184: LD_ADDR_VAR 0 8
16188: PUSH
16189: DOUBLE
16190: LD_INT 1
16192: DEC
16193: ST_TO_ADDR
16194: LD_EXP 66
16198: PUSH
16199: FOR_TO
16200: IFFALSE 16236
// begin if flags [ i ] then
16202: LD_VAR 0 4
16206: PUSH
16207: LD_VAR 0 8
16211: ARRAY
16212: IFFALSE 16234
// tmp := tmp & i & ; ;
16214: LD_ADDR_VAR 0 3
16218: PUSH
16219: LD_VAR 0 3
16223: PUSH
16224: LD_VAR 0 8
16228: STR
16229: PUSH
16230: LD_STRING ;
16232: STR
16233: ST_TO_ADDR
// end ;
16234: GO 16199
16236: POP
16237: POP
// for i = 1 to hardcoreCounter do
16238: LD_ADDR_VAR 0 8
16242: PUSH
16243: DOUBLE
16244: LD_INT 1
16246: DEC
16247: ST_TO_ADDR
16248: LD_EXP 67
16252: PUSH
16253: FOR_TO
16254: IFFALSE 16300
// begin if flags [ normalCounter + i ] then
16256: LD_VAR 0 4
16260: PUSH
16261: LD_EXP 66
16265: PUSH
16266: LD_VAR 0 8
16270: PLUS
16271: ARRAY
16272: IFFALSE 16298
// tmp := tmp & ( 100 + i ) & ; ;
16274: LD_ADDR_VAR 0 3
16278: PUSH
16279: LD_VAR 0 3
16283: PUSH
16284: LD_INT 100
16286: PUSH
16287: LD_VAR 0 8
16291: PLUS
16292: STR
16293: PUSH
16294: LD_STRING ;
16296: STR
16297: ST_TO_ADDR
// end ;
16298: GO 16253
16300: POP
16301: POP
// if tmp then
16302: LD_VAR 0 3
16306: IFFALSE 16318
// active := tmp ;
16308: LD_ADDR_VAR 0 7
16312: PUSH
16313: LD_VAR 0 3
16317: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16318: LD_STRING getStreamItemsFromMission("
16320: PUSH
16321: LD_VAR 0 5
16325: STR
16326: PUSH
16327: LD_STRING ","
16329: STR
16330: PUSH
16331: LD_VAR 0 6
16335: STR
16336: PUSH
16337: LD_STRING ","
16339: STR
16340: PUSH
16341: LD_VAR 0 7
16345: STR
16346: PUSH
16347: LD_STRING ")
16349: STR
16350: PPUSH
16351: CALL_OW 559
// end else
16355: GO 16364
// ToLua ( getStreamItemsFromMission("","","") ) ;
16357: LD_STRING getStreamItemsFromMission("","","")
16359: PPUSH
16360: CALL_OW 559
// end ;
16364: LD_VAR 0 2
16368: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16369: LD_EXP 65
16373: PUSH
16374: LD_EXP 70
16378: AND
16379: IFFALSE 16503
16381: GO 16383
16383: DISABLE
16384: LD_INT 0
16386: PPUSH
16387: PPUSH
// begin enable ;
16388: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16389: LD_ADDR_VAR 0 2
16393: PUSH
16394: LD_INT 22
16396: PUSH
16397: LD_OWVAR 2
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 2
16408: PUSH
16409: LD_INT 34
16411: PUSH
16412: LD_INT 7
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 34
16421: PUSH
16422: LD_INT 45
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 34
16431: PUSH
16432: LD_INT 28
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 34
16441: PUSH
16442: LD_INT 47
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PPUSH
16460: CALL_OW 69
16464: ST_TO_ADDR
// if not tmp then
16465: LD_VAR 0 2
16469: NOT
16470: IFFALSE 16474
// exit ;
16472: GO 16503
// for i in tmp do
16474: LD_ADDR_VAR 0 1
16478: PUSH
16479: LD_VAR 0 2
16483: PUSH
16484: FOR_IN
16485: IFFALSE 16501
// begin SetLives ( i , 0 ) ;
16487: LD_VAR 0 1
16491: PPUSH
16492: LD_INT 0
16494: PPUSH
16495: CALL_OW 234
// end ;
16499: GO 16484
16501: POP
16502: POP
// end ;
16503: PPOPN 2
16505: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16506: LD_EXP 65
16510: PUSH
16511: LD_EXP 71
16515: AND
16516: IFFALSE 16600
16518: GO 16520
16520: DISABLE
16521: LD_INT 0
16523: PPUSH
16524: PPUSH
// begin enable ;
16525: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16526: LD_ADDR_VAR 0 2
16530: PUSH
16531: LD_INT 22
16533: PUSH
16534: LD_OWVAR 2
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 32
16545: PUSH
16546: LD_INT 3
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PPUSH
16557: CALL_OW 69
16561: ST_TO_ADDR
// if not tmp then
16562: LD_VAR 0 2
16566: NOT
16567: IFFALSE 16571
// exit ;
16569: GO 16600
// for i in tmp do
16571: LD_ADDR_VAR 0 1
16575: PUSH
16576: LD_VAR 0 2
16580: PUSH
16581: FOR_IN
16582: IFFALSE 16598
// begin SetLives ( i , 0 ) ;
16584: LD_VAR 0 1
16588: PPUSH
16589: LD_INT 0
16591: PPUSH
16592: CALL_OW 234
// end ;
16596: GO 16581
16598: POP
16599: POP
// end ;
16600: PPOPN 2
16602: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16603: LD_EXP 65
16607: PUSH
16608: LD_EXP 68
16612: AND
16613: IFFALSE 16706
16615: GO 16617
16617: DISABLE
16618: LD_INT 0
16620: PPUSH
// begin enable ;
16621: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16622: LD_ADDR_VAR 0 1
16626: PUSH
16627: LD_INT 22
16629: PUSH
16630: LD_OWVAR 2
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 2
16641: PUSH
16642: LD_INT 25
16644: PUSH
16645: LD_INT 5
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 25
16654: PUSH
16655: LD_INT 9
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 25
16664: PUSH
16665: LD_INT 8
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PPUSH
16682: CALL_OW 69
16686: PUSH
16687: FOR_IN
16688: IFFALSE 16704
// begin SetClass ( i , 1 ) ;
16690: LD_VAR 0 1
16694: PPUSH
16695: LD_INT 1
16697: PPUSH
16698: CALL_OW 336
// end ;
16702: GO 16687
16704: POP
16705: POP
// end ;
16706: PPOPN 1
16708: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16709: LD_EXP 65
16713: PUSH
16714: LD_EXP 69
16718: AND
16719: PUSH
16720: LD_OWVAR 65
16724: PUSH
16725: LD_INT 7
16727: LESS
16728: AND
16729: IFFALSE 16743
16731: GO 16733
16733: DISABLE
// begin enable ;
16734: ENABLE
// game_speed := 7 ;
16735: LD_ADDR_OWVAR 65
16739: PUSH
16740: LD_INT 7
16742: ST_TO_ADDR
// end ;
16743: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16744: LD_EXP 65
16748: PUSH
16749: LD_EXP 72
16753: AND
16754: IFFALSE 16956
16756: GO 16758
16758: DISABLE
16759: LD_INT 0
16761: PPUSH
16762: PPUSH
16763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16764: LD_ADDR_VAR 0 3
16768: PUSH
16769: LD_INT 81
16771: PUSH
16772: LD_OWVAR 2
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 21
16783: PUSH
16784: LD_INT 1
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PPUSH
16795: CALL_OW 69
16799: ST_TO_ADDR
// if not tmp then
16800: LD_VAR 0 3
16804: NOT
16805: IFFALSE 16809
// exit ;
16807: GO 16956
// if tmp > 5 then
16809: LD_VAR 0 3
16813: PUSH
16814: LD_INT 5
16816: GREATER
16817: IFFALSE 16829
// k := 5 else
16819: LD_ADDR_VAR 0 2
16823: PUSH
16824: LD_INT 5
16826: ST_TO_ADDR
16827: GO 16839
// k := tmp ;
16829: LD_ADDR_VAR 0 2
16833: PUSH
16834: LD_VAR 0 3
16838: ST_TO_ADDR
// for i := 1 to k do
16839: LD_ADDR_VAR 0 1
16843: PUSH
16844: DOUBLE
16845: LD_INT 1
16847: DEC
16848: ST_TO_ADDR
16849: LD_VAR 0 2
16853: PUSH
16854: FOR_TO
16855: IFFALSE 16954
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16857: LD_VAR 0 3
16861: PUSH
16862: LD_VAR 0 1
16866: ARRAY
16867: PPUSH
16868: LD_VAR 0 1
16872: PUSH
16873: LD_INT 4
16875: MOD
16876: PUSH
16877: LD_INT 1
16879: PLUS
16880: PPUSH
16881: CALL_OW 259
16885: PUSH
16886: LD_INT 10
16888: LESS
16889: IFFALSE 16952
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16891: LD_VAR 0 3
16895: PUSH
16896: LD_VAR 0 1
16900: ARRAY
16901: PPUSH
16902: LD_VAR 0 1
16906: PUSH
16907: LD_INT 4
16909: MOD
16910: PUSH
16911: LD_INT 1
16913: PLUS
16914: PPUSH
16915: LD_VAR 0 3
16919: PUSH
16920: LD_VAR 0 1
16924: ARRAY
16925: PPUSH
16926: LD_VAR 0 1
16930: PUSH
16931: LD_INT 4
16933: MOD
16934: PUSH
16935: LD_INT 1
16937: PLUS
16938: PPUSH
16939: CALL_OW 259
16943: PUSH
16944: LD_INT 1
16946: PLUS
16947: PPUSH
16948: CALL_OW 237
16952: GO 16854
16954: POP
16955: POP
// end ;
16956: PPOPN 3
16958: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16959: LD_EXP 65
16963: PUSH
16964: LD_EXP 73
16968: AND
16969: IFFALSE 16989
16971: GO 16973
16973: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16974: LD_INT 4
16976: PPUSH
16977: LD_OWVAR 2
16981: PPUSH
16982: LD_INT 0
16984: PPUSH
16985: CALL_OW 324
16989: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16990: LD_EXP 65
16994: PUSH
16995: LD_EXP 102
16999: AND
17000: IFFALSE 17020
17002: GO 17004
17004: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17005: LD_INT 19
17007: PPUSH
17008: LD_OWVAR 2
17012: PPUSH
17013: LD_INT 0
17015: PPUSH
17016: CALL_OW 324
17020: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17021: LD_EXP 65
17025: PUSH
17026: LD_EXP 74
17030: AND
17031: IFFALSE 17133
17033: GO 17035
17035: DISABLE
17036: LD_INT 0
17038: PPUSH
17039: PPUSH
// begin enable ;
17040: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17041: LD_ADDR_VAR 0 2
17045: PUSH
17046: LD_INT 22
17048: PUSH
17049: LD_OWVAR 2
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 2
17060: PUSH
17061: LD_INT 34
17063: PUSH
17064: LD_INT 11
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 34
17073: PUSH
17074: LD_INT 30
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: LIST
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PPUSH
17090: CALL_OW 69
17094: ST_TO_ADDR
// if not tmp then
17095: LD_VAR 0 2
17099: NOT
17100: IFFALSE 17104
// exit ;
17102: GO 17133
// for i in tmp do
17104: LD_ADDR_VAR 0 1
17108: PUSH
17109: LD_VAR 0 2
17113: PUSH
17114: FOR_IN
17115: IFFALSE 17131
// begin SetLives ( i , 0 ) ;
17117: LD_VAR 0 1
17121: PPUSH
17122: LD_INT 0
17124: PPUSH
17125: CALL_OW 234
// end ;
17129: GO 17114
17131: POP
17132: POP
// end ;
17133: PPOPN 2
17135: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17136: LD_EXP 65
17140: PUSH
17141: LD_EXP 75
17145: AND
17146: IFFALSE 17166
17148: GO 17150
17150: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17151: LD_INT 32
17153: PPUSH
17154: LD_OWVAR 2
17158: PPUSH
17159: LD_INT 0
17161: PPUSH
17162: CALL_OW 324
17166: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17167: LD_EXP 65
17171: PUSH
17172: LD_EXP 76
17176: AND
17177: IFFALSE 17358
17179: GO 17181
17181: DISABLE
17182: LD_INT 0
17184: PPUSH
17185: PPUSH
17186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17187: LD_ADDR_VAR 0 2
17191: PUSH
17192: LD_INT 22
17194: PUSH
17195: LD_OWVAR 2
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 33
17206: PUSH
17207: LD_INT 3
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PPUSH
17218: CALL_OW 69
17222: ST_TO_ADDR
// if not tmp then
17223: LD_VAR 0 2
17227: NOT
17228: IFFALSE 17232
// exit ;
17230: GO 17358
// side := 0 ;
17232: LD_ADDR_VAR 0 3
17236: PUSH
17237: LD_INT 0
17239: ST_TO_ADDR
// for i := 1 to 8 do
17240: LD_ADDR_VAR 0 1
17244: PUSH
17245: DOUBLE
17246: LD_INT 1
17248: DEC
17249: ST_TO_ADDR
17250: LD_INT 8
17252: PUSH
17253: FOR_TO
17254: IFFALSE 17302
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17256: LD_OWVAR 2
17260: PUSH
17261: LD_VAR 0 1
17265: NONEQUAL
17266: PUSH
17267: LD_OWVAR 2
17271: PPUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 81
17281: PUSH
17282: LD_INT 2
17284: EQUAL
17285: AND
17286: IFFALSE 17300
// begin side := i ;
17288: LD_ADDR_VAR 0 3
17292: PUSH
17293: LD_VAR 0 1
17297: ST_TO_ADDR
// break ;
17298: GO 17302
// end ;
17300: GO 17253
17302: POP
17303: POP
// if not side then
17304: LD_VAR 0 3
17308: NOT
17309: IFFALSE 17313
// exit ;
17311: GO 17358
// for i := 1 to tmp do
17313: LD_ADDR_VAR 0 1
17317: PUSH
17318: DOUBLE
17319: LD_INT 1
17321: DEC
17322: ST_TO_ADDR
17323: LD_VAR 0 2
17327: PUSH
17328: FOR_TO
17329: IFFALSE 17356
// if Prob ( 60 ) then
17331: LD_INT 60
17333: PPUSH
17334: CALL_OW 13
17338: IFFALSE 17354
// SetSide ( i , side ) ;
17340: LD_VAR 0 1
17344: PPUSH
17345: LD_VAR 0 3
17349: PPUSH
17350: CALL_OW 235
17354: GO 17328
17356: POP
17357: POP
// end ;
17358: PPOPN 3
17360: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17361: LD_EXP 65
17365: PUSH
17366: LD_EXP 78
17370: AND
17371: IFFALSE 17490
17373: GO 17375
17375: DISABLE
17376: LD_INT 0
17378: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17379: LD_ADDR_VAR 0 1
17383: PUSH
17384: LD_INT 22
17386: PUSH
17387: LD_OWVAR 2
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 21
17398: PUSH
17399: LD_INT 1
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: LD_INT 23
17411: PUSH
17412: LD_INT 0
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: LIST
17427: PPUSH
17428: CALL_OW 69
17432: PUSH
17433: FOR_IN
17434: IFFALSE 17488
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17436: LD_VAR 0 1
17440: PPUSH
17441: CALL_OW 257
17445: PUSH
17446: LD_INT 1
17448: PUSH
17449: LD_INT 2
17451: PUSH
17452: LD_INT 3
17454: PUSH
17455: LD_INT 4
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: IN
17464: IFFALSE 17486
// SetClass ( un , rand ( 1 , 4 ) ) ;
17466: LD_VAR 0 1
17470: PPUSH
17471: LD_INT 1
17473: PPUSH
17474: LD_INT 4
17476: PPUSH
17477: CALL_OW 12
17481: PPUSH
17482: CALL_OW 336
17486: GO 17433
17488: POP
17489: POP
// end ;
17490: PPOPN 1
17492: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17493: LD_EXP 65
17497: PUSH
17498: LD_EXP 77
17502: AND
17503: IFFALSE 17582
17505: GO 17507
17507: DISABLE
17508: LD_INT 0
17510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17511: LD_ADDR_VAR 0 1
17515: PUSH
17516: LD_INT 22
17518: PUSH
17519: LD_OWVAR 2
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 21
17530: PUSH
17531: LD_INT 3
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PPUSH
17542: CALL_OW 69
17546: ST_TO_ADDR
// if not tmp then
17547: LD_VAR 0 1
17551: NOT
17552: IFFALSE 17556
// exit ;
17554: GO 17582
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17556: LD_VAR 0 1
17560: PUSH
17561: LD_INT 1
17563: PPUSH
17564: LD_VAR 0 1
17568: PPUSH
17569: CALL_OW 12
17573: ARRAY
17574: PPUSH
17575: LD_INT 100
17577: PPUSH
17578: CALL_OW 234
// end ;
17582: PPOPN 1
17584: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17585: LD_EXP 65
17589: PUSH
17590: LD_EXP 79
17594: AND
17595: IFFALSE 17693
17597: GO 17599
17599: DISABLE
17600: LD_INT 0
17602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17603: LD_ADDR_VAR 0 1
17607: PUSH
17608: LD_INT 22
17610: PUSH
17611: LD_OWVAR 2
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 21
17622: PUSH
17623: LD_INT 1
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PPUSH
17634: CALL_OW 69
17638: ST_TO_ADDR
// if not tmp then
17639: LD_VAR 0 1
17643: NOT
17644: IFFALSE 17648
// exit ;
17646: GO 17693
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17648: LD_VAR 0 1
17652: PUSH
17653: LD_INT 1
17655: PPUSH
17656: LD_VAR 0 1
17660: PPUSH
17661: CALL_OW 12
17665: ARRAY
17666: PPUSH
17667: LD_INT 1
17669: PPUSH
17670: LD_INT 4
17672: PPUSH
17673: CALL_OW 12
17677: PPUSH
17678: LD_INT 3000
17680: PPUSH
17681: LD_INT 9000
17683: PPUSH
17684: CALL_OW 12
17688: PPUSH
17689: CALL_OW 492
// end ;
17693: PPOPN 1
17695: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17696: LD_EXP 65
17700: PUSH
17701: LD_EXP 80
17705: AND
17706: IFFALSE 17726
17708: GO 17710
17710: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17711: LD_INT 1
17713: PPUSH
17714: LD_OWVAR 2
17718: PPUSH
17719: LD_INT 0
17721: PPUSH
17722: CALL_OW 324
17726: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17727: LD_EXP 65
17731: PUSH
17732: LD_EXP 81
17736: AND
17737: IFFALSE 17820
17739: GO 17741
17741: DISABLE
17742: LD_INT 0
17744: PPUSH
17745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17746: LD_ADDR_VAR 0 2
17750: PUSH
17751: LD_INT 22
17753: PUSH
17754: LD_OWVAR 2
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: LD_INT 21
17765: PUSH
17766: LD_INT 3
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PPUSH
17777: CALL_OW 69
17781: ST_TO_ADDR
// if not tmp then
17782: LD_VAR 0 2
17786: NOT
17787: IFFALSE 17791
// exit ;
17789: GO 17820
// for i in tmp do
17791: LD_ADDR_VAR 0 1
17795: PUSH
17796: LD_VAR 0 2
17800: PUSH
17801: FOR_IN
17802: IFFALSE 17818
// SetBLevel ( i , 10 ) ;
17804: LD_VAR 0 1
17808: PPUSH
17809: LD_INT 10
17811: PPUSH
17812: CALL_OW 241
17816: GO 17801
17818: POP
17819: POP
// end ;
17820: PPOPN 2
17822: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17823: LD_EXP 65
17827: PUSH
17828: LD_EXP 82
17832: AND
17833: IFFALSE 17944
17835: GO 17837
17837: DISABLE
17838: LD_INT 0
17840: PPUSH
17841: PPUSH
17842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17843: LD_ADDR_VAR 0 3
17847: PUSH
17848: LD_INT 22
17850: PUSH
17851: LD_OWVAR 2
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 25
17862: PUSH
17863: LD_INT 1
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PPUSH
17874: CALL_OW 69
17878: ST_TO_ADDR
// if not tmp then
17879: LD_VAR 0 3
17883: NOT
17884: IFFALSE 17888
// exit ;
17886: GO 17944
// un := tmp [ rand ( 1 , tmp ) ] ;
17888: LD_ADDR_VAR 0 2
17892: PUSH
17893: LD_VAR 0 3
17897: PUSH
17898: LD_INT 1
17900: PPUSH
17901: LD_VAR 0 3
17905: PPUSH
17906: CALL_OW 12
17910: ARRAY
17911: ST_TO_ADDR
// if Crawls ( un ) then
17912: LD_VAR 0 2
17916: PPUSH
17917: CALL_OW 318
17921: IFFALSE 17932
// ComWalk ( un ) ;
17923: LD_VAR 0 2
17927: PPUSH
17928: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17932: LD_VAR 0 2
17936: PPUSH
17937: LD_INT 5
17939: PPUSH
17940: CALL_OW 336
// end ;
17944: PPOPN 3
17946: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17947: LD_EXP 65
17951: PUSH
17952: LD_EXP 83
17956: AND
17957: PUSH
17958: LD_OWVAR 67
17962: PUSH
17963: LD_INT 4
17965: LESS
17966: AND
17967: IFFALSE 17986
17969: GO 17971
17971: DISABLE
// begin Difficulty := Difficulty + 1 ;
17972: LD_ADDR_OWVAR 67
17976: PUSH
17977: LD_OWVAR 67
17981: PUSH
17982: LD_INT 1
17984: PLUS
17985: ST_TO_ADDR
// end ;
17986: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17987: LD_EXP 65
17991: PUSH
17992: LD_EXP 84
17996: AND
17997: IFFALSE 18100
17999: GO 18001
18001: DISABLE
18002: LD_INT 0
18004: PPUSH
// begin for i := 1 to 5 do
18005: LD_ADDR_VAR 0 1
18009: PUSH
18010: DOUBLE
18011: LD_INT 1
18013: DEC
18014: ST_TO_ADDR
18015: LD_INT 5
18017: PUSH
18018: FOR_TO
18019: IFFALSE 18098
// begin uc_nation := nation_nature ;
18021: LD_ADDR_OWVAR 21
18025: PUSH
18026: LD_INT 0
18028: ST_TO_ADDR
// uc_side := 0 ;
18029: LD_ADDR_OWVAR 20
18033: PUSH
18034: LD_INT 0
18036: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18037: LD_ADDR_OWVAR 29
18041: PUSH
18042: LD_INT 12
18044: PUSH
18045: LD_INT 12
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: ST_TO_ADDR
// hc_agressivity := 20 ;
18052: LD_ADDR_OWVAR 35
18056: PUSH
18057: LD_INT 20
18059: ST_TO_ADDR
// hc_class := class_tiger ;
18060: LD_ADDR_OWVAR 28
18064: PUSH
18065: LD_INT 14
18067: ST_TO_ADDR
// hc_gallery :=  ;
18068: LD_ADDR_OWVAR 33
18072: PUSH
18073: LD_STRING 
18075: ST_TO_ADDR
// hc_name :=  ;
18076: LD_ADDR_OWVAR 26
18080: PUSH
18081: LD_STRING 
18083: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18084: CALL_OW 44
18088: PPUSH
18089: LD_INT 0
18091: PPUSH
18092: CALL_OW 51
// end ;
18096: GO 18018
18098: POP
18099: POP
// end ;
18100: PPOPN 1
18102: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18103: LD_EXP 65
18107: PUSH
18108: LD_EXP 85
18112: AND
18113: IFFALSE 18122
18115: GO 18117
18117: DISABLE
// StreamSibBomb ;
18118: CALL 18123 0 0
18122: END
// export function StreamSibBomb ; var i , x , y ; begin
18123: LD_INT 0
18125: PPUSH
18126: PPUSH
18127: PPUSH
18128: PPUSH
// result := false ;
18129: LD_ADDR_VAR 0 1
18133: PUSH
18134: LD_INT 0
18136: ST_TO_ADDR
// for i := 1 to 16 do
18137: LD_ADDR_VAR 0 2
18141: PUSH
18142: DOUBLE
18143: LD_INT 1
18145: DEC
18146: ST_TO_ADDR
18147: LD_INT 16
18149: PUSH
18150: FOR_TO
18151: IFFALSE 18350
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18153: LD_ADDR_VAR 0 3
18157: PUSH
18158: LD_INT 10
18160: PUSH
18161: LD_INT 20
18163: PUSH
18164: LD_INT 30
18166: PUSH
18167: LD_INT 40
18169: PUSH
18170: LD_INT 50
18172: PUSH
18173: LD_INT 60
18175: PUSH
18176: LD_INT 70
18178: PUSH
18179: LD_INT 80
18181: PUSH
18182: LD_INT 90
18184: PUSH
18185: LD_INT 100
18187: PUSH
18188: LD_INT 110
18190: PUSH
18191: LD_INT 120
18193: PUSH
18194: LD_INT 130
18196: PUSH
18197: LD_INT 140
18199: PUSH
18200: LD_INT 150
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 1
18222: PPUSH
18223: LD_INT 15
18225: PPUSH
18226: CALL_OW 12
18230: ARRAY
18231: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18232: LD_ADDR_VAR 0 4
18236: PUSH
18237: LD_INT 10
18239: PUSH
18240: LD_INT 20
18242: PUSH
18243: LD_INT 30
18245: PUSH
18246: LD_INT 40
18248: PUSH
18249: LD_INT 50
18251: PUSH
18252: LD_INT 60
18254: PUSH
18255: LD_INT 70
18257: PUSH
18258: LD_INT 80
18260: PUSH
18261: LD_INT 90
18263: PUSH
18264: LD_INT 100
18266: PUSH
18267: LD_INT 110
18269: PUSH
18270: LD_INT 120
18272: PUSH
18273: LD_INT 130
18275: PUSH
18276: LD_INT 140
18278: PUSH
18279: LD_INT 150
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 1
18301: PPUSH
18302: LD_INT 15
18304: PPUSH
18305: CALL_OW 12
18309: ARRAY
18310: ST_TO_ADDR
// if ValidHex ( x , y ) then
18311: LD_VAR 0 3
18315: PPUSH
18316: LD_VAR 0 4
18320: PPUSH
18321: CALL_OW 488
18325: IFFALSE 18348
// begin result := [ x , y ] ;
18327: LD_ADDR_VAR 0 1
18331: PUSH
18332: LD_VAR 0 3
18336: PUSH
18337: LD_VAR 0 4
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: ST_TO_ADDR
// break ;
18346: GO 18350
// end ; end ;
18348: GO 18150
18350: POP
18351: POP
// if result then
18352: LD_VAR 0 1
18356: IFFALSE 18416
// begin ToLua ( playSibBomb() ) ;
18358: LD_STRING playSibBomb()
18360: PPUSH
18361: CALL_OW 559
// wait ( 0 0$14 ) ;
18365: LD_INT 490
18367: PPUSH
18368: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18372: LD_VAR 0 1
18376: PUSH
18377: LD_INT 1
18379: ARRAY
18380: PPUSH
18381: LD_VAR 0 1
18385: PUSH
18386: LD_INT 2
18388: ARRAY
18389: PPUSH
18390: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18394: LD_VAR 0 1
18398: PUSH
18399: LD_INT 1
18401: ARRAY
18402: PPUSH
18403: LD_VAR 0 1
18407: PUSH
18408: LD_INT 2
18410: ARRAY
18411: PPUSH
18412: CALL_OW 429
// end ; end ;
18416: LD_VAR 0 1
18420: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18421: LD_EXP 65
18425: PUSH
18426: LD_EXP 87
18430: AND
18431: IFFALSE 18443
18433: GO 18435
18435: DISABLE
// YouLost (  ) ;
18436: LD_STRING 
18438: PPUSH
18439: CALL_OW 104
18443: END
// every 0 0$1 trigger StreamModeActive and sFog do
18444: LD_EXP 65
18448: PUSH
18449: LD_EXP 86
18453: AND
18454: IFFALSE 18468
18456: GO 18458
18458: DISABLE
// FogOff ( your_side ) ;
18459: LD_OWVAR 2
18463: PPUSH
18464: CALL_OW 344
18468: END
// every 0 0$1 trigger StreamModeActive and sSun do
18469: LD_EXP 65
18473: PUSH
18474: LD_EXP 88
18478: AND
18479: IFFALSE 18507
18481: GO 18483
18483: DISABLE
// begin solar_recharge_percent := 0 ;
18484: LD_ADDR_OWVAR 79
18488: PUSH
18489: LD_INT 0
18491: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18492: LD_INT 10500
18494: PPUSH
18495: CALL_OW 67
// solar_recharge_percent := 100 ;
18499: LD_ADDR_OWVAR 79
18503: PUSH
18504: LD_INT 100
18506: ST_TO_ADDR
// end ;
18507: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18508: LD_EXP 65
18512: PUSH
18513: LD_EXP 89
18517: AND
18518: IFFALSE 18757
18520: GO 18522
18522: DISABLE
18523: LD_INT 0
18525: PPUSH
18526: PPUSH
18527: PPUSH
// begin tmp := [ ] ;
18528: LD_ADDR_VAR 0 3
18532: PUSH
18533: EMPTY
18534: ST_TO_ADDR
// for i := 1 to 6 do
18535: LD_ADDR_VAR 0 1
18539: PUSH
18540: DOUBLE
18541: LD_INT 1
18543: DEC
18544: ST_TO_ADDR
18545: LD_INT 6
18547: PUSH
18548: FOR_TO
18549: IFFALSE 18654
// begin uc_nation := nation_nature ;
18551: LD_ADDR_OWVAR 21
18555: PUSH
18556: LD_INT 0
18558: ST_TO_ADDR
// uc_side := 0 ;
18559: LD_ADDR_OWVAR 20
18563: PUSH
18564: LD_INT 0
18566: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18567: LD_ADDR_OWVAR 29
18571: PUSH
18572: LD_INT 12
18574: PUSH
18575: LD_INT 12
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: ST_TO_ADDR
// hc_agressivity := 20 ;
18582: LD_ADDR_OWVAR 35
18586: PUSH
18587: LD_INT 20
18589: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18590: LD_ADDR_OWVAR 28
18594: PUSH
18595: LD_INT 17
18597: ST_TO_ADDR
// hc_gallery :=  ;
18598: LD_ADDR_OWVAR 33
18602: PUSH
18603: LD_STRING 
18605: ST_TO_ADDR
// hc_name :=  ;
18606: LD_ADDR_OWVAR 26
18610: PUSH
18611: LD_STRING 
18613: ST_TO_ADDR
// un := CreateHuman ;
18614: LD_ADDR_VAR 0 2
18618: PUSH
18619: CALL_OW 44
18623: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18624: LD_VAR 0 2
18628: PPUSH
18629: LD_INT 1
18631: PPUSH
18632: CALL_OW 51
// tmp := tmp ^ un ;
18636: LD_ADDR_VAR 0 3
18640: PUSH
18641: LD_VAR 0 3
18645: PUSH
18646: LD_VAR 0 2
18650: ADD
18651: ST_TO_ADDR
// end ;
18652: GO 18548
18654: POP
18655: POP
// repeat wait ( 0 0$1 ) ;
18656: LD_INT 35
18658: PPUSH
18659: CALL_OW 67
// for un in tmp do
18663: LD_ADDR_VAR 0 2
18667: PUSH
18668: LD_VAR 0 3
18672: PUSH
18673: FOR_IN
18674: IFFALSE 18748
// begin if IsDead ( un ) then
18676: LD_VAR 0 2
18680: PPUSH
18681: CALL_OW 301
18685: IFFALSE 18705
// begin tmp := tmp diff un ;
18687: LD_ADDR_VAR 0 3
18691: PUSH
18692: LD_VAR 0 3
18696: PUSH
18697: LD_VAR 0 2
18701: DIFF
18702: ST_TO_ADDR
// continue ;
18703: GO 18673
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18705: LD_VAR 0 2
18709: PPUSH
18710: LD_INT 3
18712: PUSH
18713: LD_INT 22
18715: PUSH
18716: LD_INT 0
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PPUSH
18727: CALL_OW 69
18731: PPUSH
18732: LD_VAR 0 2
18736: PPUSH
18737: CALL_OW 74
18741: PPUSH
18742: CALL_OW 115
// end ;
18746: GO 18673
18748: POP
18749: POP
// until not tmp ;
18750: LD_VAR 0 3
18754: NOT
18755: IFFALSE 18656
// end ;
18757: PPOPN 3
18759: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18760: LD_EXP 65
18764: PUSH
18765: LD_EXP 90
18769: AND
18770: IFFALSE 18824
18772: GO 18774
18774: DISABLE
// begin ToLua ( displayTroll(); ) ;
18775: LD_STRING displayTroll();
18777: PPUSH
18778: CALL_OW 559
// wait ( 3 3$00 ) ;
18782: LD_INT 6300
18784: PPUSH
18785: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18789: LD_STRING hideTroll();
18791: PPUSH
18792: CALL_OW 559
// wait ( 1 1$00 ) ;
18796: LD_INT 2100
18798: PPUSH
18799: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18803: LD_STRING displayTroll();
18805: PPUSH
18806: CALL_OW 559
// wait ( 1 1$00 ) ;
18810: LD_INT 2100
18812: PPUSH
18813: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18817: LD_STRING hideTroll();
18819: PPUSH
18820: CALL_OW 559
// end ;
18824: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18825: LD_EXP 65
18829: PUSH
18830: LD_EXP 91
18834: AND
18835: IFFALSE 18898
18837: GO 18839
18839: DISABLE
18840: LD_INT 0
18842: PPUSH
// begin p := 0 ;
18843: LD_ADDR_VAR 0 1
18847: PUSH
18848: LD_INT 0
18850: ST_TO_ADDR
// repeat game_speed := 1 ;
18851: LD_ADDR_OWVAR 65
18855: PUSH
18856: LD_INT 1
18858: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18859: LD_INT 35
18861: PPUSH
18862: CALL_OW 67
// p := p + 1 ;
18866: LD_ADDR_VAR 0 1
18870: PUSH
18871: LD_VAR 0 1
18875: PUSH
18876: LD_INT 1
18878: PLUS
18879: ST_TO_ADDR
// until p >= 60 ;
18880: LD_VAR 0 1
18884: PUSH
18885: LD_INT 60
18887: GREATEREQUAL
18888: IFFALSE 18851
// game_speed := 4 ;
18890: LD_ADDR_OWVAR 65
18894: PUSH
18895: LD_INT 4
18897: ST_TO_ADDR
// end ;
18898: PPOPN 1
18900: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18901: LD_EXP 65
18905: PUSH
18906: LD_EXP 92
18910: AND
18911: IFFALSE 19057
18913: GO 18915
18915: DISABLE
18916: LD_INT 0
18918: PPUSH
18919: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18920: LD_ADDR_VAR 0 1
18924: PUSH
18925: LD_INT 22
18927: PUSH
18928: LD_OWVAR 2
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: LD_INT 30
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 30
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: LIST
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PPUSH
18969: CALL_OW 69
18973: ST_TO_ADDR
// if not depot then
18974: LD_VAR 0 1
18978: NOT
18979: IFFALSE 18983
// exit ;
18981: GO 19057
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18983: LD_ADDR_VAR 0 2
18987: PUSH
18988: LD_VAR 0 1
18992: PUSH
18993: LD_INT 1
18995: PPUSH
18996: LD_VAR 0 1
19000: PPUSH
19001: CALL_OW 12
19005: ARRAY
19006: PPUSH
19007: CALL_OW 274
19011: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19012: LD_VAR 0 2
19016: PPUSH
19017: LD_INT 1
19019: PPUSH
19020: LD_INT 0
19022: PPUSH
19023: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19027: LD_VAR 0 2
19031: PPUSH
19032: LD_INT 2
19034: PPUSH
19035: LD_INT 0
19037: PPUSH
19038: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19042: LD_VAR 0 2
19046: PPUSH
19047: LD_INT 3
19049: PPUSH
19050: LD_INT 0
19052: PPUSH
19053: CALL_OW 277
// end ;
19057: PPOPN 2
19059: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19060: LD_EXP 65
19064: PUSH
19065: LD_EXP 93
19069: AND
19070: IFFALSE 19167
19072: GO 19074
19074: DISABLE
19075: LD_INT 0
19077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19078: LD_ADDR_VAR 0 1
19082: PUSH
19083: LD_INT 22
19085: PUSH
19086: LD_OWVAR 2
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 21
19097: PUSH
19098: LD_INT 1
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 3
19107: PUSH
19108: LD_INT 23
19110: PUSH
19111: LD_INT 0
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: LIST
19126: PPUSH
19127: CALL_OW 69
19131: ST_TO_ADDR
// if not tmp then
19132: LD_VAR 0 1
19136: NOT
19137: IFFALSE 19141
// exit ;
19139: GO 19167
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19141: LD_VAR 0 1
19145: PUSH
19146: LD_INT 1
19148: PPUSH
19149: LD_VAR 0 1
19153: PPUSH
19154: CALL_OW 12
19158: ARRAY
19159: PPUSH
19160: LD_INT 200
19162: PPUSH
19163: CALL_OW 234
// end ;
19167: PPOPN 1
19169: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19170: LD_EXP 65
19174: PUSH
19175: LD_EXP 94
19179: AND
19180: IFFALSE 19259
19182: GO 19184
19184: DISABLE
19185: LD_INT 0
19187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19188: LD_ADDR_VAR 0 1
19192: PUSH
19193: LD_INT 22
19195: PUSH
19196: LD_OWVAR 2
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 21
19207: PUSH
19208: LD_INT 2
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PPUSH
19219: CALL_OW 69
19223: ST_TO_ADDR
// if not tmp then
19224: LD_VAR 0 1
19228: NOT
19229: IFFALSE 19233
// exit ;
19231: GO 19259
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19233: LD_VAR 0 1
19237: PUSH
19238: LD_INT 1
19240: PPUSH
19241: LD_VAR 0 1
19245: PPUSH
19246: CALL_OW 12
19250: ARRAY
19251: PPUSH
19252: LD_INT 60
19254: PPUSH
19255: CALL_OW 234
// end ;
19259: PPOPN 1
19261: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19262: LD_EXP 65
19266: PUSH
19267: LD_EXP 95
19271: AND
19272: IFFALSE 19371
19274: GO 19276
19276: DISABLE
19277: LD_INT 0
19279: PPUSH
19280: PPUSH
// begin enable ;
19281: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19282: LD_ADDR_VAR 0 1
19286: PUSH
19287: LD_INT 22
19289: PUSH
19290: LD_OWVAR 2
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 61
19301: PUSH
19302: EMPTY
19303: LIST
19304: PUSH
19305: LD_INT 33
19307: PUSH
19308: LD_INT 2
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: LIST
19319: PPUSH
19320: CALL_OW 69
19324: ST_TO_ADDR
// if not tmp then
19325: LD_VAR 0 1
19329: NOT
19330: IFFALSE 19334
// exit ;
19332: GO 19371
// for i in tmp do
19334: LD_ADDR_VAR 0 2
19338: PUSH
19339: LD_VAR 0 1
19343: PUSH
19344: FOR_IN
19345: IFFALSE 19369
// if IsControledBy ( i ) then
19347: LD_VAR 0 2
19351: PPUSH
19352: CALL_OW 312
19356: IFFALSE 19367
// ComUnlink ( i ) ;
19358: LD_VAR 0 2
19362: PPUSH
19363: CALL_OW 136
19367: GO 19344
19369: POP
19370: POP
// end ;
19371: PPOPN 2
19373: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19374: LD_EXP 65
19378: PUSH
19379: LD_EXP 96
19383: AND
19384: IFFALSE 19524
19386: GO 19388
19388: DISABLE
19389: LD_INT 0
19391: PPUSH
19392: PPUSH
// begin ToLua ( displayPowell(); ) ;
19393: LD_STRING displayPowell();
19395: PPUSH
19396: CALL_OW 559
// uc_side := 0 ;
19400: LD_ADDR_OWVAR 20
19404: PUSH
19405: LD_INT 0
19407: ST_TO_ADDR
// uc_nation := 2 ;
19408: LD_ADDR_OWVAR 21
19412: PUSH
19413: LD_INT 2
19415: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19416: LD_ADDR_OWVAR 37
19420: PUSH
19421: LD_INT 14
19423: ST_TO_ADDR
// vc_engine := engine_siberite ;
19424: LD_ADDR_OWVAR 39
19428: PUSH
19429: LD_INT 3
19431: ST_TO_ADDR
// vc_control := control_apeman ;
19432: LD_ADDR_OWVAR 38
19436: PUSH
19437: LD_INT 5
19439: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19440: LD_ADDR_OWVAR 40
19444: PUSH
19445: LD_INT 29
19447: ST_TO_ADDR
// un := CreateVehicle ;
19448: LD_ADDR_VAR 0 2
19452: PUSH
19453: CALL_OW 45
19457: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19458: LD_VAR 0 2
19462: PPUSH
19463: LD_INT 1
19465: PPUSH
19466: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19470: LD_INT 35
19472: PPUSH
19473: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19477: LD_VAR 0 2
19481: PPUSH
19482: LD_INT 22
19484: PUSH
19485: LD_OWVAR 2
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PPUSH
19494: CALL_OW 69
19498: PPUSH
19499: LD_VAR 0 2
19503: PPUSH
19504: CALL_OW 74
19508: PPUSH
19509: CALL_OW 115
// until IsDead ( un ) ;
19513: LD_VAR 0 2
19517: PPUSH
19518: CALL_OW 301
19522: IFFALSE 19470
// end ;
19524: PPOPN 2
19526: END
// every 0 0$1 trigger StreamModeActive and sStu do
19527: LD_EXP 65
19531: PUSH
19532: LD_EXP 104
19536: AND
19537: IFFALSE 19553
19539: GO 19541
19541: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19542: LD_STRING displayStucuk();
19544: PPUSH
19545: CALL_OW 559
// ResetFog ;
19549: CALL_OW 335
// end ;
19553: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19554: LD_EXP 65
19558: PUSH
19559: LD_EXP 97
19563: AND
19564: IFFALSE 19705
19566: GO 19568
19568: DISABLE
19569: LD_INT 0
19571: PPUSH
19572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19573: LD_ADDR_VAR 0 2
19577: PUSH
19578: LD_INT 22
19580: PUSH
19581: LD_OWVAR 2
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 21
19592: PUSH
19593: LD_INT 1
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PPUSH
19604: CALL_OW 69
19608: ST_TO_ADDR
// if not tmp then
19609: LD_VAR 0 2
19613: NOT
19614: IFFALSE 19618
// exit ;
19616: GO 19705
// un := tmp [ rand ( 1 , tmp ) ] ;
19618: LD_ADDR_VAR 0 1
19622: PUSH
19623: LD_VAR 0 2
19627: PUSH
19628: LD_INT 1
19630: PPUSH
19631: LD_VAR 0 2
19635: PPUSH
19636: CALL_OW 12
19640: ARRAY
19641: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19642: LD_VAR 0 1
19646: PPUSH
19647: LD_INT 0
19649: PPUSH
19650: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19654: LD_VAR 0 1
19658: PPUSH
19659: LD_OWVAR 3
19663: PUSH
19664: LD_VAR 0 1
19668: DIFF
19669: PPUSH
19670: LD_VAR 0 1
19674: PPUSH
19675: CALL_OW 74
19679: PPUSH
19680: CALL_OW 115
// wait ( 0 0$20 ) ;
19684: LD_INT 700
19686: PPUSH
19687: CALL_OW 67
// SetSide ( un , your_side ) ;
19691: LD_VAR 0 1
19695: PPUSH
19696: LD_OWVAR 2
19700: PPUSH
19701: CALL_OW 235
// end ;
19705: PPOPN 2
19707: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19708: LD_EXP 65
19712: PUSH
19713: LD_EXP 98
19717: AND
19718: IFFALSE 19824
19720: GO 19722
19722: DISABLE
19723: LD_INT 0
19725: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19726: LD_ADDR_VAR 0 1
19730: PUSH
19731: LD_INT 22
19733: PUSH
19734: LD_OWVAR 2
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 2
19745: PUSH
19746: LD_INT 30
19748: PUSH
19749: LD_INT 0
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 30
19758: PUSH
19759: LD_INT 1
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PPUSH
19775: CALL_OW 69
19779: ST_TO_ADDR
// if not depot then
19780: LD_VAR 0 1
19784: NOT
19785: IFFALSE 19789
// exit ;
19787: GO 19824
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19789: LD_VAR 0 1
19793: PUSH
19794: LD_INT 1
19796: ARRAY
19797: PPUSH
19798: CALL_OW 250
19802: PPUSH
19803: LD_VAR 0 1
19807: PUSH
19808: LD_INT 1
19810: ARRAY
19811: PPUSH
19812: CALL_OW 251
19816: PPUSH
19817: LD_INT 70
19819: PPUSH
19820: CALL_OW 495
// end ;
19824: PPOPN 1
19826: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19827: LD_EXP 65
19831: PUSH
19832: LD_EXP 99
19836: AND
19837: IFFALSE 20048
19839: GO 19841
19841: DISABLE
19842: LD_INT 0
19844: PPUSH
19845: PPUSH
19846: PPUSH
19847: PPUSH
19848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19849: LD_ADDR_VAR 0 5
19853: PUSH
19854: LD_INT 22
19856: PUSH
19857: LD_OWVAR 2
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 21
19868: PUSH
19869: LD_INT 1
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PPUSH
19880: CALL_OW 69
19884: ST_TO_ADDR
// if not tmp then
19885: LD_VAR 0 5
19889: NOT
19890: IFFALSE 19894
// exit ;
19892: GO 20048
// for i in tmp do
19894: LD_ADDR_VAR 0 1
19898: PUSH
19899: LD_VAR 0 5
19903: PUSH
19904: FOR_IN
19905: IFFALSE 20046
// begin d := rand ( 0 , 5 ) ;
19907: LD_ADDR_VAR 0 4
19911: PUSH
19912: LD_INT 0
19914: PPUSH
19915: LD_INT 5
19917: PPUSH
19918: CALL_OW 12
19922: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19923: LD_ADDR_VAR 0 2
19927: PUSH
19928: LD_VAR 0 1
19932: PPUSH
19933: CALL_OW 250
19937: PPUSH
19938: LD_VAR 0 4
19942: PPUSH
19943: LD_INT 3
19945: PPUSH
19946: LD_INT 12
19948: PPUSH
19949: CALL_OW 12
19953: PPUSH
19954: CALL_OW 272
19958: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19959: LD_ADDR_VAR 0 3
19963: PUSH
19964: LD_VAR 0 1
19968: PPUSH
19969: CALL_OW 251
19973: PPUSH
19974: LD_VAR 0 4
19978: PPUSH
19979: LD_INT 3
19981: PPUSH
19982: LD_INT 12
19984: PPUSH
19985: CALL_OW 12
19989: PPUSH
19990: CALL_OW 273
19994: ST_TO_ADDR
// if ValidHex ( x , y ) then
19995: LD_VAR 0 2
19999: PPUSH
20000: LD_VAR 0 3
20004: PPUSH
20005: CALL_OW 488
20009: IFFALSE 20044
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20011: LD_VAR 0 1
20015: PPUSH
20016: LD_VAR 0 2
20020: PPUSH
20021: LD_VAR 0 3
20025: PPUSH
20026: LD_INT 3
20028: PPUSH
20029: LD_INT 6
20031: PPUSH
20032: CALL_OW 12
20036: PPUSH
20037: LD_INT 1
20039: PPUSH
20040: CALL_OW 483
// end ;
20044: GO 19904
20046: POP
20047: POP
// end ;
20048: PPOPN 5
20050: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20051: LD_EXP 65
20055: PUSH
20056: LD_EXP 100
20060: AND
20061: IFFALSE 20155
20063: GO 20065
20065: DISABLE
20066: LD_INT 0
20068: PPUSH
20069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20070: LD_ADDR_VAR 0 2
20074: PUSH
20075: LD_INT 22
20077: PUSH
20078: LD_OWVAR 2
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 32
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 21
20099: PUSH
20100: LD_INT 2
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: LIST
20111: PPUSH
20112: CALL_OW 69
20116: ST_TO_ADDR
// if not tmp then
20117: LD_VAR 0 2
20121: NOT
20122: IFFALSE 20126
// exit ;
20124: GO 20155
// for i in tmp do
20126: LD_ADDR_VAR 0 1
20130: PUSH
20131: LD_VAR 0 2
20135: PUSH
20136: FOR_IN
20137: IFFALSE 20153
// SetFuel ( i , 0 ) ;
20139: LD_VAR 0 1
20143: PPUSH
20144: LD_INT 0
20146: PPUSH
20147: CALL_OW 240
20151: GO 20136
20153: POP
20154: POP
// end ;
20155: PPOPN 2
20157: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20158: LD_EXP 65
20162: PUSH
20163: LD_EXP 101
20167: AND
20168: IFFALSE 20234
20170: GO 20172
20172: DISABLE
20173: LD_INT 0
20175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20176: LD_ADDR_VAR 0 1
20180: PUSH
20181: LD_INT 22
20183: PUSH
20184: LD_OWVAR 2
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 30
20195: PUSH
20196: LD_INT 29
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PPUSH
20207: CALL_OW 69
20211: ST_TO_ADDR
// if not tmp then
20212: LD_VAR 0 1
20216: NOT
20217: IFFALSE 20221
// exit ;
20219: GO 20234
// DestroyUnit ( tmp [ 1 ] ) ;
20221: LD_VAR 0 1
20225: PUSH
20226: LD_INT 1
20228: ARRAY
20229: PPUSH
20230: CALL_OW 65
// end ;
20234: PPOPN 1
20236: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20237: LD_EXP 65
20241: PUSH
20242: LD_EXP 103
20246: AND
20247: IFFALSE 20376
20249: GO 20251
20251: DISABLE
20252: LD_INT 0
20254: PPUSH
// begin uc_side := 0 ;
20255: LD_ADDR_OWVAR 20
20259: PUSH
20260: LD_INT 0
20262: ST_TO_ADDR
// uc_nation := nation_arabian ;
20263: LD_ADDR_OWVAR 21
20267: PUSH
20268: LD_INT 2
20270: ST_TO_ADDR
// hc_gallery :=  ;
20271: LD_ADDR_OWVAR 33
20275: PUSH
20276: LD_STRING 
20278: ST_TO_ADDR
// hc_name :=  ;
20279: LD_ADDR_OWVAR 26
20283: PUSH
20284: LD_STRING 
20286: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20287: LD_INT 1
20289: PPUSH
20290: LD_INT 11
20292: PPUSH
20293: LD_INT 10
20295: PPUSH
20296: CALL_OW 380
// un := CreateHuman ;
20300: LD_ADDR_VAR 0 1
20304: PUSH
20305: CALL_OW 44
20309: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20310: LD_VAR 0 1
20314: PPUSH
20315: LD_INT 1
20317: PPUSH
20318: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20322: LD_INT 35
20324: PPUSH
20325: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20329: LD_VAR 0 1
20333: PPUSH
20334: LD_INT 22
20336: PUSH
20337: LD_OWVAR 2
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PPUSH
20346: CALL_OW 69
20350: PPUSH
20351: LD_VAR 0 1
20355: PPUSH
20356: CALL_OW 74
20360: PPUSH
20361: CALL_OW 115
// until IsDead ( un ) ;
20365: LD_VAR 0 1
20369: PPUSH
20370: CALL_OW 301
20374: IFFALSE 20322
// end ;
20376: PPOPN 1
20378: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20379: LD_EXP 65
20383: PUSH
20384: LD_EXP 105
20388: AND
20389: IFFALSE 20401
20391: GO 20393
20393: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20394: LD_STRING earthquake(getX(game), 0, 32)
20396: PPUSH
20397: CALL_OW 559
20401: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20402: LD_EXP 65
20406: PUSH
20407: LD_EXP 106
20411: AND
20412: IFFALSE 20503
20414: GO 20416
20416: DISABLE
20417: LD_INT 0
20419: PPUSH
// begin enable ;
20420: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20421: LD_ADDR_VAR 0 1
20425: PUSH
20426: LD_INT 22
20428: PUSH
20429: LD_OWVAR 2
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 21
20440: PUSH
20441: LD_INT 2
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 33
20450: PUSH
20451: LD_INT 3
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: LIST
20462: PPUSH
20463: CALL_OW 69
20467: ST_TO_ADDR
// if not tmp then
20468: LD_VAR 0 1
20472: NOT
20473: IFFALSE 20477
// exit ;
20475: GO 20503
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20477: LD_VAR 0 1
20481: PUSH
20482: LD_INT 1
20484: PPUSH
20485: LD_VAR 0 1
20489: PPUSH
20490: CALL_OW 12
20494: ARRAY
20495: PPUSH
20496: LD_INT 1
20498: PPUSH
20499: CALL_OW 234
// end ;
20503: PPOPN 1
20505: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20506: LD_EXP 65
20510: PUSH
20511: LD_EXP 107
20515: AND
20516: IFFALSE 20657
20518: GO 20520
20520: DISABLE
20521: LD_INT 0
20523: PPUSH
20524: PPUSH
20525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20526: LD_ADDR_VAR 0 3
20530: PUSH
20531: LD_INT 22
20533: PUSH
20534: LD_OWVAR 2
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 25
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PPUSH
20557: CALL_OW 69
20561: ST_TO_ADDR
// if not tmp then
20562: LD_VAR 0 3
20566: NOT
20567: IFFALSE 20571
// exit ;
20569: GO 20657
// un := tmp [ rand ( 1 , tmp ) ] ;
20571: LD_ADDR_VAR 0 2
20575: PUSH
20576: LD_VAR 0 3
20580: PUSH
20581: LD_INT 1
20583: PPUSH
20584: LD_VAR 0 3
20588: PPUSH
20589: CALL_OW 12
20593: ARRAY
20594: ST_TO_ADDR
// if Crawls ( un ) then
20595: LD_VAR 0 2
20599: PPUSH
20600: CALL_OW 318
20604: IFFALSE 20615
// ComWalk ( un ) ;
20606: LD_VAR 0 2
20610: PPUSH
20611: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20615: LD_VAR 0 2
20619: PPUSH
20620: LD_INT 9
20622: PPUSH
20623: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20627: LD_INT 28
20629: PPUSH
20630: LD_OWVAR 2
20634: PPUSH
20635: LD_INT 2
20637: PPUSH
20638: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20642: LD_INT 29
20644: PPUSH
20645: LD_OWVAR 2
20649: PPUSH
20650: LD_INT 2
20652: PPUSH
20653: CALL_OW 322
// end ;
20657: PPOPN 3
20659: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20660: LD_EXP 65
20664: PUSH
20665: LD_EXP 108
20669: AND
20670: IFFALSE 20781
20672: GO 20674
20674: DISABLE
20675: LD_INT 0
20677: PPUSH
20678: PPUSH
20679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20680: LD_ADDR_VAR 0 3
20684: PUSH
20685: LD_INT 22
20687: PUSH
20688: LD_OWVAR 2
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 25
20699: PUSH
20700: LD_INT 1
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PPUSH
20711: CALL_OW 69
20715: ST_TO_ADDR
// if not tmp then
20716: LD_VAR 0 3
20720: NOT
20721: IFFALSE 20725
// exit ;
20723: GO 20781
// un := tmp [ rand ( 1 , tmp ) ] ;
20725: LD_ADDR_VAR 0 2
20729: PUSH
20730: LD_VAR 0 3
20734: PUSH
20735: LD_INT 1
20737: PPUSH
20738: LD_VAR 0 3
20742: PPUSH
20743: CALL_OW 12
20747: ARRAY
20748: ST_TO_ADDR
// if Crawls ( un ) then
20749: LD_VAR 0 2
20753: PPUSH
20754: CALL_OW 318
20758: IFFALSE 20769
// ComWalk ( un ) ;
20760: LD_VAR 0 2
20764: PPUSH
20765: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20769: LD_VAR 0 2
20773: PPUSH
20774: LD_INT 8
20776: PPUSH
20777: CALL_OW 336
// end ;
20781: PPOPN 3
20783: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20784: LD_EXP 65
20788: PUSH
20789: LD_EXP 109
20793: AND
20794: IFFALSE 20938
20796: GO 20798
20798: DISABLE
20799: LD_INT 0
20801: PPUSH
20802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20803: LD_ADDR_VAR 0 2
20807: PUSH
20808: LD_INT 22
20810: PUSH
20811: LD_OWVAR 2
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 21
20822: PUSH
20823: LD_INT 2
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: LD_INT 34
20835: PUSH
20836: LD_INT 12
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 34
20845: PUSH
20846: LD_INT 51
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 34
20855: PUSH
20856: LD_INT 32
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: PPUSH
20874: CALL_OW 69
20878: ST_TO_ADDR
// if not tmp then
20879: LD_VAR 0 2
20883: NOT
20884: IFFALSE 20888
// exit ;
20886: GO 20938
// for i in tmp do
20888: LD_ADDR_VAR 0 1
20892: PUSH
20893: LD_VAR 0 2
20897: PUSH
20898: FOR_IN
20899: IFFALSE 20936
// if GetCargo ( i , mat_artifact ) = 0 then
20901: LD_VAR 0 1
20905: PPUSH
20906: LD_INT 4
20908: PPUSH
20909: CALL_OW 289
20913: PUSH
20914: LD_INT 0
20916: EQUAL
20917: IFFALSE 20934
// SetCargo ( i , mat_siberit , 100 ) ;
20919: LD_VAR 0 1
20923: PPUSH
20924: LD_INT 3
20926: PPUSH
20927: LD_INT 100
20929: PPUSH
20930: CALL_OW 290
20934: GO 20898
20936: POP
20937: POP
// end ;
20938: PPOPN 2
20940: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20941: LD_EXP 65
20945: PUSH
20946: LD_EXP 110
20950: AND
20951: IFFALSE 21134
20953: GO 20955
20955: DISABLE
20956: LD_INT 0
20958: PPUSH
20959: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20960: LD_ADDR_VAR 0 2
20964: PUSH
20965: LD_INT 22
20967: PUSH
20968: LD_OWVAR 2
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PPUSH
20977: CALL_OW 69
20981: ST_TO_ADDR
// if not tmp then
20982: LD_VAR 0 2
20986: NOT
20987: IFFALSE 20991
// exit ;
20989: GO 21134
// for i := 1 to 2 do
20991: LD_ADDR_VAR 0 1
20995: PUSH
20996: DOUBLE
20997: LD_INT 1
20999: DEC
21000: ST_TO_ADDR
21001: LD_INT 2
21003: PUSH
21004: FOR_TO
21005: IFFALSE 21132
// begin uc_side := your_side ;
21007: LD_ADDR_OWVAR 20
21011: PUSH
21012: LD_OWVAR 2
21016: ST_TO_ADDR
// uc_nation := nation_american ;
21017: LD_ADDR_OWVAR 21
21021: PUSH
21022: LD_INT 1
21024: ST_TO_ADDR
// vc_chassis := us_morphling ;
21025: LD_ADDR_OWVAR 37
21029: PUSH
21030: LD_INT 5
21032: ST_TO_ADDR
// vc_engine := engine_siberite ;
21033: LD_ADDR_OWVAR 39
21037: PUSH
21038: LD_INT 3
21040: ST_TO_ADDR
// vc_control := control_computer ;
21041: LD_ADDR_OWVAR 38
21045: PUSH
21046: LD_INT 3
21048: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21049: LD_ADDR_OWVAR 40
21053: PUSH
21054: LD_INT 10
21056: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21057: LD_VAR 0 2
21061: PUSH
21062: LD_INT 1
21064: ARRAY
21065: PPUSH
21066: CALL_OW 310
21070: NOT
21071: IFFALSE 21118
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21073: CALL_OW 45
21077: PPUSH
21078: LD_VAR 0 2
21082: PUSH
21083: LD_INT 1
21085: ARRAY
21086: PPUSH
21087: CALL_OW 250
21091: PPUSH
21092: LD_VAR 0 2
21096: PUSH
21097: LD_INT 1
21099: ARRAY
21100: PPUSH
21101: CALL_OW 251
21105: PPUSH
21106: LD_INT 12
21108: PPUSH
21109: LD_INT 1
21111: PPUSH
21112: CALL_OW 50
21116: GO 21130
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21118: CALL_OW 45
21122: PPUSH
21123: LD_INT 1
21125: PPUSH
21126: CALL_OW 51
// end ;
21130: GO 21004
21132: POP
21133: POP
// end ;
21134: PPOPN 2
21136: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21137: LD_EXP 65
21141: PUSH
21142: LD_EXP 111
21146: AND
21147: IFFALSE 21369
21149: GO 21151
21151: DISABLE
21152: LD_INT 0
21154: PPUSH
21155: PPUSH
21156: PPUSH
21157: PPUSH
21158: PPUSH
21159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21160: LD_ADDR_VAR 0 6
21164: PUSH
21165: LD_INT 22
21167: PUSH
21168: LD_OWVAR 2
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 21
21179: PUSH
21180: LD_INT 1
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 3
21189: PUSH
21190: LD_INT 23
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: LIST
21208: PPUSH
21209: CALL_OW 69
21213: ST_TO_ADDR
// if not tmp then
21214: LD_VAR 0 6
21218: NOT
21219: IFFALSE 21223
// exit ;
21221: GO 21369
// s1 := rand ( 1 , 4 ) ;
21223: LD_ADDR_VAR 0 2
21227: PUSH
21228: LD_INT 1
21230: PPUSH
21231: LD_INT 4
21233: PPUSH
21234: CALL_OW 12
21238: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21239: LD_ADDR_VAR 0 4
21243: PUSH
21244: LD_VAR 0 6
21248: PUSH
21249: LD_INT 1
21251: ARRAY
21252: PPUSH
21253: LD_VAR 0 2
21257: PPUSH
21258: CALL_OW 259
21262: ST_TO_ADDR
// if s1 = 1 then
21263: LD_VAR 0 2
21267: PUSH
21268: LD_INT 1
21270: EQUAL
21271: IFFALSE 21291
// s2 := rand ( 2 , 4 ) else
21273: LD_ADDR_VAR 0 3
21277: PUSH
21278: LD_INT 2
21280: PPUSH
21281: LD_INT 4
21283: PPUSH
21284: CALL_OW 12
21288: ST_TO_ADDR
21289: GO 21299
// s2 := 1 ;
21291: LD_ADDR_VAR 0 3
21295: PUSH
21296: LD_INT 1
21298: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21299: LD_ADDR_VAR 0 5
21303: PUSH
21304: LD_VAR 0 6
21308: PUSH
21309: LD_INT 1
21311: ARRAY
21312: PPUSH
21313: LD_VAR 0 3
21317: PPUSH
21318: CALL_OW 259
21322: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21323: LD_VAR 0 6
21327: PUSH
21328: LD_INT 1
21330: ARRAY
21331: PPUSH
21332: LD_VAR 0 2
21336: PPUSH
21337: LD_VAR 0 5
21341: PPUSH
21342: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21346: LD_VAR 0 6
21350: PUSH
21351: LD_INT 1
21353: ARRAY
21354: PPUSH
21355: LD_VAR 0 3
21359: PPUSH
21360: LD_VAR 0 4
21364: PPUSH
21365: CALL_OW 237
// end ;
21369: PPOPN 6
21371: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21372: LD_EXP 65
21376: PUSH
21377: LD_EXP 112
21381: AND
21382: IFFALSE 21461
21384: GO 21386
21386: DISABLE
21387: LD_INT 0
21389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21390: LD_ADDR_VAR 0 1
21394: PUSH
21395: LD_INT 22
21397: PUSH
21398: LD_OWVAR 2
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 30
21409: PUSH
21410: LD_INT 3
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PPUSH
21421: CALL_OW 69
21425: ST_TO_ADDR
// if not tmp then
21426: LD_VAR 0 1
21430: NOT
21431: IFFALSE 21435
// exit ;
21433: GO 21461
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21435: LD_VAR 0 1
21439: PUSH
21440: LD_INT 1
21442: PPUSH
21443: LD_VAR 0 1
21447: PPUSH
21448: CALL_OW 12
21452: ARRAY
21453: PPUSH
21454: LD_INT 1
21456: PPUSH
21457: CALL_OW 234
// end ;
21461: PPOPN 1
21463: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21464: LD_EXP 65
21468: PUSH
21469: LD_EXP 113
21473: AND
21474: IFFALSE 21586
21476: GO 21478
21478: DISABLE
21479: LD_INT 0
21481: PPUSH
21482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21483: LD_ADDR_VAR 0 2
21487: PUSH
21488: LD_INT 22
21490: PUSH
21491: LD_OWVAR 2
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 2
21502: PUSH
21503: LD_INT 30
21505: PUSH
21506: LD_INT 27
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 30
21515: PUSH
21516: LD_INT 26
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 30
21525: PUSH
21526: LD_INT 28
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PPUSH
21543: CALL_OW 69
21547: ST_TO_ADDR
// if not tmp then
21548: LD_VAR 0 2
21552: NOT
21553: IFFALSE 21557
// exit ;
21555: GO 21586
// for i in tmp do
21557: LD_ADDR_VAR 0 1
21561: PUSH
21562: LD_VAR 0 2
21566: PUSH
21567: FOR_IN
21568: IFFALSE 21584
// SetLives ( i , 1 ) ;
21570: LD_VAR 0 1
21574: PPUSH
21575: LD_INT 1
21577: PPUSH
21578: CALL_OW 234
21582: GO 21567
21584: POP
21585: POP
// end ;
21586: PPOPN 2
21588: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21589: LD_EXP 65
21593: PUSH
21594: LD_EXP 114
21598: AND
21599: IFFALSE 21886
21601: GO 21603
21603: DISABLE
21604: LD_INT 0
21606: PPUSH
21607: PPUSH
21608: PPUSH
// begin i := rand ( 1 , 7 ) ;
21609: LD_ADDR_VAR 0 1
21613: PUSH
21614: LD_INT 1
21616: PPUSH
21617: LD_INT 7
21619: PPUSH
21620: CALL_OW 12
21624: ST_TO_ADDR
// case i of 1 :
21625: LD_VAR 0 1
21629: PUSH
21630: LD_INT 1
21632: DOUBLE
21633: EQUAL
21634: IFTRUE 21638
21636: GO 21648
21638: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21639: LD_STRING earthquake(getX(game), 0, 32)
21641: PPUSH
21642: CALL_OW 559
21646: GO 21886
21648: LD_INT 2
21650: DOUBLE
21651: EQUAL
21652: IFTRUE 21656
21654: GO 21670
21656: POP
// begin ToLua ( displayStucuk(); ) ;
21657: LD_STRING displayStucuk();
21659: PPUSH
21660: CALL_OW 559
// ResetFog ;
21664: CALL_OW 335
// end ; 3 :
21668: GO 21886
21670: LD_INT 3
21672: DOUBLE
21673: EQUAL
21674: IFTRUE 21678
21676: GO 21782
21678: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21679: LD_ADDR_VAR 0 2
21683: PUSH
21684: LD_INT 22
21686: PUSH
21687: LD_OWVAR 2
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 25
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PPUSH
21710: CALL_OW 69
21714: ST_TO_ADDR
// if not tmp then
21715: LD_VAR 0 2
21719: NOT
21720: IFFALSE 21724
// exit ;
21722: GO 21886
// un := tmp [ rand ( 1 , tmp ) ] ;
21724: LD_ADDR_VAR 0 3
21728: PUSH
21729: LD_VAR 0 2
21733: PUSH
21734: LD_INT 1
21736: PPUSH
21737: LD_VAR 0 2
21741: PPUSH
21742: CALL_OW 12
21746: ARRAY
21747: ST_TO_ADDR
// if Crawls ( un ) then
21748: LD_VAR 0 3
21752: PPUSH
21753: CALL_OW 318
21757: IFFALSE 21768
// ComWalk ( un ) ;
21759: LD_VAR 0 3
21763: PPUSH
21764: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21768: LD_VAR 0 3
21772: PPUSH
21773: LD_INT 8
21775: PPUSH
21776: CALL_OW 336
// end ; 4 :
21780: GO 21886
21782: LD_INT 4
21784: DOUBLE
21785: EQUAL
21786: IFTRUE 21790
21788: GO 21864
21790: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21791: LD_ADDR_VAR 0 2
21795: PUSH
21796: LD_INT 22
21798: PUSH
21799: LD_OWVAR 2
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 30
21810: PUSH
21811: LD_INT 29
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PPUSH
21822: CALL_OW 69
21826: ST_TO_ADDR
// if not tmp then
21827: LD_VAR 0 2
21831: NOT
21832: IFFALSE 21836
// exit ;
21834: GO 21886
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21836: LD_VAR 0 2
21840: PUSH
21841: LD_INT 1
21843: ARRAY
21844: PPUSH
21845: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21849: LD_VAR 0 2
21853: PUSH
21854: LD_INT 1
21856: ARRAY
21857: PPUSH
21858: CALL_OW 65
// end ; 5 .. 7 :
21862: GO 21886
21864: LD_INT 5
21866: DOUBLE
21867: GREATEREQUAL
21868: IFFALSE 21876
21870: LD_INT 7
21872: DOUBLE
21873: LESSEQUAL
21874: IFTRUE 21878
21876: GO 21885
21878: POP
// StreamSibBomb ; end ;
21879: CALL 18123 0 0
21883: GO 21886
21885: POP
// end ;
21886: PPOPN 3
21888: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21889: LD_EXP 65
21893: PUSH
21894: LD_EXP 115
21898: AND
21899: IFFALSE 22055
21901: GO 21903
21903: DISABLE
21904: LD_INT 0
21906: PPUSH
21907: PPUSH
21908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21909: LD_ADDR_VAR 0 2
21913: PUSH
21914: LD_INT 81
21916: PUSH
21917: LD_OWVAR 2
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 2
21928: PUSH
21929: LD_INT 21
21931: PUSH
21932: LD_INT 1
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 21
21941: PUSH
21942: LD_INT 2
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: LIST
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PPUSH
21958: CALL_OW 69
21962: ST_TO_ADDR
// if not tmp then
21963: LD_VAR 0 2
21967: NOT
21968: IFFALSE 21972
// exit ;
21970: GO 22055
// p := 0 ;
21972: LD_ADDR_VAR 0 3
21976: PUSH
21977: LD_INT 0
21979: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21980: LD_INT 35
21982: PPUSH
21983: CALL_OW 67
// p := p + 1 ;
21987: LD_ADDR_VAR 0 3
21991: PUSH
21992: LD_VAR 0 3
21996: PUSH
21997: LD_INT 1
21999: PLUS
22000: ST_TO_ADDR
// for i in tmp do
22001: LD_ADDR_VAR 0 1
22005: PUSH
22006: LD_VAR 0 2
22010: PUSH
22011: FOR_IN
22012: IFFALSE 22043
// if GetLives ( i ) < 1000 then
22014: LD_VAR 0 1
22018: PPUSH
22019: CALL_OW 256
22023: PUSH
22024: LD_INT 1000
22026: LESS
22027: IFFALSE 22041
// SetLives ( i , 1000 ) ;
22029: LD_VAR 0 1
22033: PPUSH
22034: LD_INT 1000
22036: PPUSH
22037: CALL_OW 234
22041: GO 22011
22043: POP
22044: POP
// until p > 20 ;
22045: LD_VAR 0 3
22049: PUSH
22050: LD_INT 20
22052: GREATER
22053: IFFALSE 21980
// end ;
22055: PPOPN 3
22057: END
// every 0 0$1 trigger StreamModeActive and sTime do
22058: LD_EXP 65
22062: PUSH
22063: LD_EXP 116
22067: AND
22068: IFFALSE 22103
22070: GO 22072
22072: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22073: LD_INT 28
22075: PPUSH
22076: LD_OWVAR 2
22080: PPUSH
22081: LD_INT 2
22083: PPUSH
22084: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22088: LD_INT 30
22090: PPUSH
22091: LD_OWVAR 2
22095: PPUSH
22096: LD_INT 2
22098: PPUSH
22099: CALL_OW 322
// end ;
22103: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22104: LD_EXP 65
22108: PUSH
22109: LD_EXP 117
22113: AND
22114: IFFALSE 22235
22116: GO 22118
22118: DISABLE
22119: LD_INT 0
22121: PPUSH
22122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22123: LD_ADDR_VAR 0 2
22127: PUSH
22128: LD_INT 22
22130: PUSH
22131: LD_OWVAR 2
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 21
22142: PUSH
22143: LD_INT 1
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 3
22152: PUSH
22153: LD_INT 23
22155: PUSH
22156: LD_INT 0
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: PPUSH
22172: CALL_OW 69
22176: ST_TO_ADDR
// if not tmp then
22177: LD_VAR 0 2
22181: NOT
22182: IFFALSE 22186
// exit ;
22184: GO 22235
// for i in tmp do
22186: LD_ADDR_VAR 0 1
22190: PUSH
22191: LD_VAR 0 2
22195: PUSH
22196: FOR_IN
22197: IFFALSE 22233
// begin if Crawls ( i ) then
22199: LD_VAR 0 1
22203: PPUSH
22204: CALL_OW 318
22208: IFFALSE 22219
// ComWalk ( i ) ;
22210: LD_VAR 0 1
22214: PPUSH
22215: CALL_OW 138
// SetClass ( i , 2 ) ;
22219: LD_VAR 0 1
22223: PPUSH
22224: LD_INT 2
22226: PPUSH
22227: CALL_OW 336
// end ;
22231: GO 22196
22233: POP
22234: POP
// end ;
22235: PPOPN 2
22237: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22238: LD_EXP 65
22242: PUSH
22243: LD_EXP 118
22247: AND
22248: IFFALSE 22536
22250: GO 22252
22252: DISABLE
22253: LD_INT 0
22255: PPUSH
22256: PPUSH
22257: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22258: LD_OWVAR 2
22262: PPUSH
22263: LD_INT 9
22265: PPUSH
22266: LD_INT 1
22268: PPUSH
22269: LD_INT 1
22271: PPUSH
22272: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22276: LD_INT 9
22278: PPUSH
22279: LD_OWVAR 2
22283: PPUSH
22284: CALL_OW 343
// uc_side := 9 ;
22288: LD_ADDR_OWVAR 20
22292: PUSH
22293: LD_INT 9
22295: ST_TO_ADDR
// uc_nation := 2 ;
22296: LD_ADDR_OWVAR 21
22300: PUSH
22301: LD_INT 2
22303: ST_TO_ADDR
// hc_name := Dark Warrior ;
22304: LD_ADDR_OWVAR 26
22308: PUSH
22309: LD_STRING Dark Warrior
22311: ST_TO_ADDR
// hc_gallery :=  ;
22312: LD_ADDR_OWVAR 33
22316: PUSH
22317: LD_STRING 
22319: ST_TO_ADDR
// hc_noskilllimit := true ;
22320: LD_ADDR_OWVAR 76
22324: PUSH
22325: LD_INT 1
22327: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22328: LD_ADDR_OWVAR 31
22332: PUSH
22333: LD_INT 30
22335: PUSH
22336: LD_INT 30
22338: PUSH
22339: LD_INT 30
22341: PUSH
22342: LD_INT 30
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: ST_TO_ADDR
// un := CreateHuman ;
22351: LD_ADDR_VAR 0 3
22355: PUSH
22356: CALL_OW 44
22360: ST_TO_ADDR
// hc_noskilllimit := false ;
22361: LD_ADDR_OWVAR 76
22365: PUSH
22366: LD_INT 0
22368: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22369: LD_VAR 0 3
22373: PPUSH
22374: LD_INT 1
22376: PPUSH
22377: CALL_OW 51
// ToLua ( playRanger() ) ;
22381: LD_STRING playRanger()
22383: PPUSH
22384: CALL_OW 559
// p := 0 ;
22388: LD_ADDR_VAR 0 2
22392: PUSH
22393: LD_INT 0
22395: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22396: LD_INT 35
22398: PPUSH
22399: CALL_OW 67
// p := p + 1 ;
22403: LD_ADDR_VAR 0 2
22407: PUSH
22408: LD_VAR 0 2
22412: PUSH
22413: LD_INT 1
22415: PLUS
22416: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22417: LD_VAR 0 3
22421: PPUSH
22422: CALL_OW 256
22426: PUSH
22427: LD_INT 1000
22429: LESS
22430: IFFALSE 22444
// SetLives ( un , 1000 ) ;
22432: LD_VAR 0 3
22436: PPUSH
22437: LD_INT 1000
22439: PPUSH
22440: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22444: LD_VAR 0 3
22448: PPUSH
22449: LD_INT 81
22451: PUSH
22452: LD_OWVAR 2
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 91
22463: PUSH
22464: LD_VAR 0 3
22468: PUSH
22469: LD_INT 30
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PPUSH
22481: CALL_OW 69
22485: PPUSH
22486: LD_VAR 0 3
22490: PPUSH
22491: CALL_OW 74
22495: PPUSH
22496: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22500: LD_VAR 0 2
22504: PUSH
22505: LD_INT 80
22507: GREATER
22508: PUSH
22509: LD_VAR 0 3
22513: PPUSH
22514: CALL_OW 301
22518: OR
22519: IFFALSE 22396
// if un then
22521: LD_VAR 0 3
22525: IFFALSE 22536
// RemoveUnit ( un ) ;
22527: LD_VAR 0 3
22531: PPUSH
22532: CALL_OW 64
// end ;
22536: PPOPN 3
22538: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22539: LD_EXP 119
22543: IFFALSE 22659
22545: GO 22547
22547: DISABLE
22548: LD_INT 0
22550: PPUSH
22551: PPUSH
22552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22553: LD_ADDR_VAR 0 2
22557: PUSH
22558: LD_INT 81
22560: PUSH
22561: LD_OWVAR 2
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 21
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PPUSH
22584: CALL_OW 69
22588: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22589: LD_STRING playComputer()
22591: PPUSH
22592: CALL_OW 559
// if not tmp then
22596: LD_VAR 0 2
22600: NOT
22601: IFFALSE 22605
// exit ;
22603: GO 22659
// for i in tmp do
22605: LD_ADDR_VAR 0 1
22609: PUSH
22610: LD_VAR 0 2
22614: PUSH
22615: FOR_IN
22616: IFFALSE 22657
// for j := 1 to 4 do
22618: LD_ADDR_VAR 0 3
22622: PUSH
22623: DOUBLE
22624: LD_INT 1
22626: DEC
22627: ST_TO_ADDR
22628: LD_INT 4
22630: PUSH
22631: FOR_TO
22632: IFFALSE 22653
// SetSkill ( i , j , 10 ) ;
22634: LD_VAR 0 1
22638: PPUSH
22639: LD_VAR 0 3
22643: PPUSH
22644: LD_INT 10
22646: PPUSH
22647: CALL_OW 237
22651: GO 22631
22653: POP
22654: POP
22655: GO 22615
22657: POP
22658: POP
// end ;
22659: PPOPN 3
22661: END
// every 0 0$1 trigger s30 do var i , tmp ;
22662: LD_EXP 120
22666: IFFALSE 22735
22668: GO 22670
22670: DISABLE
22671: LD_INT 0
22673: PPUSH
22674: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22675: LD_ADDR_VAR 0 2
22679: PUSH
22680: LD_INT 22
22682: PUSH
22683: LD_OWVAR 2
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PPUSH
22692: CALL_OW 69
22696: ST_TO_ADDR
// if not tmp then
22697: LD_VAR 0 2
22701: NOT
22702: IFFALSE 22706
// exit ;
22704: GO 22735
// for i in tmp do
22706: LD_ADDR_VAR 0 1
22710: PUSH
22711: LD_VAR 0 2
22715: PUSH
22716: FOR_IN
22717: IFFALSE 22733
// SetLives ( i , 300 ) ;
22719: LD_VAR 0 1
22723: PPUSH
22724: LD_INT 300
22726: PPUSH
22727: CALL_OW 234
22731: GO 22716
22733: POP
22734: POP
// end ;
22735: PPOPN 2
22737: END
// every 0 0$1 trigger s60 do var i , tmp ;
22738: LD_EXP 121
22742: IFFALSE 22811
22744: GO 22746
22746: DISABLE
22747: LD_INT 0
22749: PPUSH
22750: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22751: LD_ADDR_VAR 0 2
22755: PUSH
22756: LD_INT 22
22758: PUSH
22759: LD_OWVAR 2
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PPUSH
22768: CALL_OW 69
22772: ST_TO_ADDR
// if not tmp then
22773: LD_VAR 0 2
22777: NOT
22778: IFFALSE 22782
// exit ;
22780: GO 22811
// for i in tmp do
22782: LD_ADDR_VAR 0 1
22786: PUSH
22787: LD_VAR 0 2
22791: PUSH
22792: FOR_IN
22793: IFFALSE 22809
// SetLives ( i , 600 ) ;
22795: LD_VAR 0 1
22799: PPUSH
22800: LD_INT 600
22802: PPUSH
22803: CALL_OW 234
22807: GO 22792
22809: POP
22810: POP
// end ;
22811: PPOPN 2
22813: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22814: LD_INT 0
22816: PPUSH
// case cmd of 301 :
22817: LD_VAR 0 1
22821: PUSH
22822: LD_INT 301
22824: DOUBLE
22825: EQUAL
22826: IFTRUE 22830
22828: GO 22862
22830: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22831: LD_VAR 0 6
22835: PPUSH
22836: LD_VAR 0 7
22840: PPUSH
22841: LD_VAR 0 8
22845: PPUSH
22846: LD_VAR 0 4
22850: PPUSH
22851: LD_VAR 0 5
22855: PPUSH
22856: CALL 24063 0 5
22860: GO 22983
22862: LD_INT 302
22864: DOUBLE
22865: EQUAL
22866: IFTRUE 22870
22868: GO 22907
22870: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22871: LD_VAR 0 6
22875: PPUSH
22876: LD_VAR 0 7
22880: PPUSH
22881: LD_VAR 0 8
22885: PPUSH
22886: LD_VAR 0 9
22890: PPUSH
22891: LD_VAR 0 4
22895: PPUSH
22896: LD_VAR 0 5
22900: PPUSH
22901: CALL 24154 0 6
22905: GO 22983
22907: LD_INT 303
22909: DOUBLE
22910: EQUAL
22911: IFTRUE 22915
22913: GO 22952
22915: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22916: LD_VAR 0 6
22920: PPUSH
22921: LD_VAR 0 7
22925: PPUSH
22926: LD_VAR 0 8
22930: PPUSH
22931: LD_VAR 0 9
22935: PPUSH
22936: LD_VAR 0 4
22940: PPUSH
22941: LD_VAR 0 5
22945: PPUSH
22946: CALL 22988 0 6
22950: GO 22983
22952: LD_INT 304
22954: DOUBLE
22955: EQUAL
22956: IFTRUE 22960
22958: GO 22982
22960: POP
// hHackTeleport ( unit , x , y ) ; end ;
22961: LD_VAR 0 2
22965: PPUSH
22966: LD_VAR 0 4
22970: PPUSH
22971: LD_VAR 0 5
22975: PPUSH
22976: CALL 24747 0 3
22980: GO 22983
22982: POP
// end ;
22983: LD_VAR 0 12
22987: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22988: LD_INT 0
22990: PPUSH
22991: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22992: LD_VAR 0 1
22996: PUSH
22997: LD_INT 1
22999: LESS
23000: PUSH
23001: LD_VAR 0 1
23005: PUSH
23006: LD_INT 3
23008: GREATER
23009: OR
23010: PUSH
23011: LD_VAR 0 5
23015: PPUSH
23016: LD_VAR 0 6
23020: PPUSH
23021: CALL_OW 428
23025: OR
23026: IFFALSE 23030
// exit ;
23028: GO 23750
// uc_side := your_side ;
23030: LD_ADDR_OWVAR 20
23034: PUSH
23035: LD_OWVAR 2
23039: ST_TO_ADDR
// uc_nation := nation ;
23040: LD_ADDR_OWVAR 21
23044: PUSH
23045: LD_VAR 0 1
23049: ST_TO_ADDR
// bc_level = 1 ;
23050: LD_ADDR_OWVAR 43
23054: PUSH
23055: LD_INT 1
23057: ST_TO_ADDR
// case btype of 1 :
23058: LD_VAR 0 2
23062: PUSH
23063: LD_INT 1
23065: DOUBLE
23066: EQUAL
23067: IFTRUE 23071
23069: GO 23082
23071: POP
// bc_type := b_depot ; 2 :
23072: LD_ADDR_OWVAR 42
23076: PUSH
23077: LD_INT 0
23079: ST_TO_ADDR
23080: GO 23694
23082: LD_INT 2
23084: DOUBLE
23085: EQUAL
23086: IFTRUE 23090
23088: GO 23101
23090: POP
// bc_type := b_warehouse ; 3 :
23091: LD_ADDR_OWVAR 42
23095: PUSH
23096: LD_INT 1
23098: ST_TO_ADDR
23099: GO 23694
23101: LD_INT 3
23103: DOUBLE
23104: EQUAL
23105: IFTRUE 23109
23107: GO 23120
23109: POP
// bc_type := b_lab ; 4 .. 9 :
23110: LD_ADDR_OWVAR 42
23114: PUSH
23115: LD_INT 6
23117: ST_TO_ADDR
23118: GO 23694
23120: LD_INT 4
23122: DOUBLE
23123: GREATEREQUAL
23124: IFFALSE 23132
23126: LD_INT 9
23128: DOUBLE
23129: LESSEQUAL
23130: IFTRUE 23134
23132: GO 23186
23134: POP
// begin bc_type := b_lab_half ;
23135: LD_ADDR_OWVAR 42
23139: PUSH
23140: LD_INT 7
23142: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23143: LD_ADDR_OWVAR 44
23147: PUSH
23148: LD_INT 10
23150: PUSH
23151: LD_INT 11
23153: PUSH
23154: LD_INT 12
23156: PUSH
23157: LD_INT 15
23159: PUSH
23160: LD_INT 14
23162: PUSH
23163: LD_INT 13
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: PUSH
23174: LD_VAR 0 2
23178: PUSH
23179: LD_INT 3
23181: MINUS
23182: ARRAY
23183: ST_TO_ADDR
// end ; 10 .. 13 :
23184: GO 23694
23186: LD_INT 10
23188: DOUBLE
23189: GREATEREQUAL
23190: IFFALSE 23198
23192: LD_INT 13
23194: DOUBLE
23195: LESSEQUAL
23196: IFTRUE 23200
23198: GO 23277
23200: POP
// begin bc_type := b_lab_full ;
23201: LD_ADDR_OWVAR 42
23205: PUSH
23206: LD_INT 8
23208: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23209: LD_ADDR_OWVAR 44
23213: PUSH
23214: LD_INT 10
23216: PUSH
23217: LD_INT 12
23219: PUSH
23220: LD_INT 14
23222: PUSH
23223: LD_INT 13
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: PUSH
23232: LD_VAR 0 2
23236: PUSH
23237: LD_INT 9
23239: MINUS
23240: ARRAY
23241: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23242: LD_ADDR_OWVAR 45
23246: PUSH
23247: LD_INT 11
23249: PUSH
23250: LD_INT 15
23252: PUSH
23253: LD_INT 12
23255: PUSH
23256: LD_INT 15
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: PUSH
23265: LD_VAR 0 2
23269: PUSH
23270: LD_INT 9
23272: MINUS
23273: ARRAY
23274: ST_TO_ADDR
// end ; 14 :
23275: GO 23694
23277: LD_INT 14
23279: DOUBLE
23280: EQUAL
23281: IFTRUE 23285
23283: GO 23296
23285: POP
// bc_type := b_workshop ; 15 :
23286: LD_ADDR_OWVAR 42
23290: PUSH
23291: LD_INT 2
23293: ST_TO_ADDR
23294: GO 23694
23296: LD_INT 15
23298: DOUBLE
23299: EQUAL
23300: IFTRUE 23304
23302: GO 23315
23304: POP
// bc_type := b_factory ; 16 :
23305: LD_ADDR_OWVAR 42
23309: PUSH
23310: LD_INT 3
23312: ST_TO_ADDR
23313: GO 23694
23315: LD_INT 16
23317: DOUBLE
23318: EQUAL
23319: IFTRUE 23323
23321: GO 23334
23323: POP
// bc_type := b_ext_gun ; 17 :
23324: LD_ADDR_OWVAR 42
23328: PUSH
23329: LD_INT 17
23331: ST_TO_ADDR
23332: GO 23694
23334: LD_INT 17
23336: DOUBLE
23337: EQUAL
23338: IFTRUE 23342
23340: GO 23370
23342: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23343: LD_ADDR_OWVAR 42
23347: PUSH
23348: LD_INT 19
23350: PUSH
23351: LD_INT 23
23353: PUSH
23354: LD_INT 19
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: PUSH
23362: LD_VAR 0 1
23366: ARRAY
23367: ST_TO_ADDR
23368: GO 23694
23370: LD_INT 18
23372: DOUBLE
23373: EQUAL
23374: IFTRUE 23378
23376: GO 23389
23378: POP
// bc_type := b_ext_radar ; 19 :
23379: LD_ADDR_OWVAR 42
23383: PUSH
23384: LD_INT 20
23386: ST_TO_ADDR
23387: GO 23694
23389: LD_INT 19
23391: DOUBLE
23392: EQUAL
23393: IFTRUE 23397
23395: GO 23408
23397: POP
// bc_type := b_ext_radio ; 20 :
23398: LD_ADDR_OWVAR 42
23402: PUSH
23403: LD_INT 22
23405: ST_TO_ADDR
23406: GO 23694
23408: LD_INT 20
23410: DOUBLE
23411: EQUAL
23412: IFTRUE 23416
23414: GO 23427
23416: POP
// bc_type := b_ext_siberium ; 21 :
23417: LD_ADDR_OWVAR 42
23421: PUSH
23422: LD_INT 21
23424: ST_TO_ADDR
23425: GO 23694
23427: LD_INT 21
23429: DOUBLE
23430: EQUAL
23431: IFTRUE 23435
23433: GO 23446
23435: POP
// bc_type := b_ext_computer ; 22 :
23436: LD_ADDR_OWVAR 42
23440: PUSH
23441: LD_INT 24
23443: ST_TO_ADDR
23444: GO 23694
23446: LD_INT 22
23448: DOUBLE
23449: EQUAL
23450: IFTRUE 23454
23452: GO 23465
23454: POP
// bc_type := b_ext_track ; 23 :
23455: LD_ADDR_OWVAR 42
23459: PUSH
23460: LD_INT 16
23462: ST_TO_ADDR
23463: GO 23694
23465: LD_INT 23
23467: DOUBLE
23468: EQUAL
23469: IFTRUE 23473
23471: GO 23484
23473: POP
// bc_type := b_ext_laser ; 24 :
23474: LD_ADDR_OWVAR 42
23478: PUSH
23479: LD_INT 25
23481: ST_TO_ADDR
23482: GO 23694
23484: LD_INT 24
23486: DOUBLE
23487: EQUAL
23488: IFTRUE 23492
23490: GO 23503
23492: POP
// bc_type := b_control_tower ; 25 :
23493: LD_ADDR_OWVAR 42
23497: PUSH
23498: LD_INT 36
23500: ST_TO_ADDR
23501: GO 23694
23503: LD_INT 25
23505: DOUBLE
23506: EQUAL
23507: IFTRUE 23511
23509: GO 23522
23511: POP
// bc_type := b_breastwork ; 26 :
23512: LD_ADDR_OWVAR 42
23516: PUSH
23517: LD_INT 31
23519: ST_TO_ADDR
23520: GO 23694
23522: LD_INT 26
23524: DOUBLE
23525: EQUAL
23526: IFTRUE 23530
23528: GO 23541
23530: POP
// bc_type := b_bunker ; 27 :
23531: LD_ADDR_OWVAR 42
23535: PUSH
23536: LD_INT 32
23538: ST_TO_ADDR
23539: GO 23694
23541: LD_INT 27
23543: DOUBLE
23544: EQUAL
23545: IFTRUE 23549
23547: GO 23560
23549: POP
// bc_type := b_turret ; 28 :
23550: LD_ADDR_OWVAR 42
23554: PUSH
23555: LD_INT 33
23557: ST_TO_ADDR
23558: GO 23694
23560: LD_INT 28
23562: DOUBLE
23563: EQUAL
23564: IFTRUE 23568
23566: GO 23579
23568: POP
// bc_type := b_armoury ; 29 :
23569: LD_ADDR_OWVAR 42
23573: PUSH
23574: LD_INT 4
23576: ST_TO_ADDR
23577: GO 23694
23579: LD_INT 29
23581: DOUBLE
23582: EQUAL
23583: IFTRUE 23587
23585: GO 23598
23587: POP
// bc_type := b_barracks ; 30 :
23588: LD_ADDR_OWVAR 42
23592: PUSH
23593: LD_INT 5
23595: ST_TO_ADDR
23596: GO 23694
23598: LD_INT 30
23600: DOUBLE
23601: EQUAL
23602: IFTRUE 23606
23604: GO 23617
23606: POP
// bc_type := b_solar_power ; 31 :
23607: LD_ADDR_OWVAR 42
23611: PUSH
23612: LD_INT 27
23614: ST_TO_ADDR
23615: GO 23694
23617: LD_INT 31
23619: DOUBLE
23620: EQUAL
23621: IFTRUE 23625
23623: GO 23636
23625: POP
// bc_type := b_oil_power ; 32 :
23626: LD_ADDR_OWVAR 42
23630: PUSH
23631: LD_INT 26
23633: ST_TO_ADDR
23634: GO 23694
23636: LD_INT 32
23638: DOUBLE
23639: EQUAL
23640: IFTRUE 23644
23642: GO 23655
23644: POP
// bc_type := b_siberite_power ; 33 :
23645: LD_ADDR_OWVAR 42
23649: PUSH
23650: LD_INT 28
23652: ST_TO_ADDR
23653: GO 23694
23655: LD_INT 33
23657: DOUBLE
23658: EQUAL
23659: IFTRUE 23663
23661: GO 23674
23663: POP
// bc_type := b_oil_mine ; 34 :
23664: LD_ADDR_OWVAR 42
23668: PUSH
23669: LD_INT 29
23671: ST_TO_ADDR
23672: GO 23694
23674: LD_INT 34
23676: DOUBLE
23677: EQUAL
23678: IFTRUE 23682
23680: GO 23693
23682: POP
// bc_type := b_siberite_mine ; end ;
23683: LD_ADDR_OWVAR 42
23687: PUSH
23688: LD_INT 30
23690: ST_TO_ADDR
23691: GO 23694
23693: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23694: LD_ADDR_VAR 0 8
23698: PUSH
23699: LD_VAR 0 5
23703: PPUSH
23704: LD_VAR 0 6
23708: PPUSH
23709: LD_VAR 0 3
23713: PPUSH
23714: CALL_OW 47
23718: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23719: LD_OWVAR 42
23723: PUSH
23724: LD_INT 32
23726: PUSH
23727: LD_INT 33
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: IN
23734: IFFALSE 23750
// PlaceWeaponTurret ( b , weapon ) ;
23736: LD_VAR 0 8
23740: PPUSH
23741: LD_VAR 0 4
23745: PPUSH
23746: CALL_OW 431
// end ;
23750: LD_VAR 0 7
23754: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23755: LD_INT 0
23757: PPUSH
23758: PPUSH
23759: PPUSH
23760: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23761: LD_ADDR_VAR 0 4
23765: PUSH
23766: LD_INT 22
23768: PUSH
23769: LD_OWVAR 2
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: LD_INT 30
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 30
23793: PUSH
23794: LD_INT 1
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: LIST
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PPUSH
23810: CALL_OW 69
23814: ST_TO_ADDR
// if not tmp then
23815: LD_VAR 0 4
23819: NOT
23820: IFFALSE 23824
// exit ;
23822: GO 23883
// for i in tmp do
23824: LD_ADDR_VAR 0 2
23828: PUSH
23829: LD_VAR 0 4
23833: PUSH
23834: FOR_IN
23835: IFFALSE 23881
// for j = 1 to 3 do
23837: LD_ADDR_VAR 0 3
23841: PUSH
23842: DOUBLE
23843: LD_INT 1
23845: DEC
23846: ST_TO_ADDR
23847: LD_INT 3
23849: PUSH
23850: FOR_TO
23851: IFFALSE 23877
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23853: LD_VAR 0 2
23857: PPUSH
23858: CALL_OW 274
23862: PPUSH
23863: LD_VAR 0 3
23867: PPUSH
23868: LD_INT 99999
23870: PPUSH
23871: CALL_OW 277
23875: GO 23850
23877: POP
23878: POP
23879: GO 23834
23881: POP
23882: POP
// end ;
23883: LD_VAR 0 1
23887: RET
// export function hHackSetLevel10 ; var i , j ; begin
23888: LD_INT 0
23890: PPUSH
23891: PPUSH
23892: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23893: LD_ADDR_VAR 0 2
23897: PUSH
23898: LD_INT 21
23900: PUSH
23901: LD_INT 1
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PPUSH
23908: CALL_OW 69
23912: PUSH
23913: FOR_IN
23914: IFFALSE 23966
// if IsSelected ( i ) then
23916: LD_VAR 0 2
23920: PPUSH
23921: CALL_OW 306
23925: IFFALSE 23964
// begin for j := 1 to 4 do
23927: LD_ADDR_VAR 0 3
23931: PUSH
23932: DOUBLE
23933: LD_INT 1
23935: DEC
23936: ST_TO_ADDR
23937: LD_INT 4
23939: PUSH
23940: FOR_TO
23941: IFFALSE 23962
// SetSkill ( i , j , 10 ) ;
23943: LD_VAR 0 2
23947: PPUSH
23948: LD_VAR 0 3
23952: PPUSH
23953: LD_INT 10
23955: PPUSH
23956: CALL_OW 237
23960: GO 23940
23962: POP
23963: POP
// end ;
23964: GO 23913
23966: POP
23967: POP
// end ;
23968: LD_VAR 0 1
23972: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23973: LD_INT 0
23975: PPUSH
23976: PPUSH
23977: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23978: LD_ADDR_VAR 0 2
23982: PUSH
23983: LD_INT 22
23985: PUSH
23986: LD_OWVAR 2
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 21
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PPUSH
24009: CALL_OW 69
24013: PUSH
24014: FOR_IN
24015: IFFALSE 24056
// begin for j := 1 to 4 do
24017: LD_ADDR_VAR 0 3
24021: PUSH
24022: DOUBLE
24023: LD_INT 1
24025: DEC
24026: ST_TO_ADDR
24027: LD_INT 4
24029: PUSH
24030: FOR_TO
24031: IFFALSE 24052
// SetSkill ( i , j , 10 ) ;
24033: LD_VAR 0 2
24037: PPUSH
24038: LD_VAR 0 3
24042: PPUSH
24043: LD_INT 10
24045: PPUSH
24046: CALL_OW 237
24050: GO 24030
24052: POP
24053: POP
// end ;
24054: GO 24014
24056: POP
24057: POP
// end ;
24058: LD_VAR 0 1
24062: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24063: LD_INT 0
24065: PPUSH
// uc_side := your_side ;
24066: LD_ADDR_OWVAR 20
24070: PUSH
24071: LD_OWVAR 2
24075: ST_TO_ADDR
// uc_nation := nation ;
24076: LD_ADDR_OWVAR 21
24080: PUSH
24081: LD_VAR 0 1
24085: ST_TO_ADDR
// InitHc ;
24086: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24090: LD_INT 0
24092: PPUSH
24093: LD_VAR 0 2
24097: PPUSH
24098: LD_VAR 0 3
24102: PPUSH
24103: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24107: LD_VAR 0 4
24111: PPUSH
24112: LD_VAR 0 5
24116: PPUSH
24117: CALL_OW 428
24121: PUSH
24122: LD_INT 0
24124: EQUAL
24125: IFFALSE 24149
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24127: CALL_OW 44
24131: PPUSH
24132: LD_VAR 0 4
24136: PPUSH
24137: LD_VAR 0 5
24141: PPUSH
24142: LD_INT 1
24144: PPUSH
24145: CALL_OW 48
// end ;
24149: LD_VAR 0 6
24153: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24154: LD_INT 0
24156: PPUSH
24157: PPUSH
// uc_side := your_side ;
24158: LD_ADDR_OWVAR 20
24162: PUSH
24163: LD_OWVAR 2
24167: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24168: LD_VAR 0 1
24172: PUSH
24173: LD_INT 1
24175: PUSH
24176: LD_INT 2
24178: PUSH
24179: LD_INT 3
24181: PUSH
24182: LD_INT 4
24184: PUSH
24185: LD_INT 5
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: IN
24195: IFFALSE 24207
// uc_nation := nation_american else
24197: LD_ADDR_OWVAR 21
24201: PUSH
24202: LD_INT 1
24204: ST_TO_ADDR
24205: GO 24250
// if chassis in [ 11 , 12 , 13 , 14 ] then
24207: LD_VAR 0 1
24211: PUSH
24212: LD_INT 11
24214: PUSH
24215: LD_INT 12
24217: PUSH
24218: LD_INT 13
24220: PUSH
24221: LD_INT 14
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: IN
24230: IFFALSE 24242
// uc_nation := nation_arabian else
24232: LD_ADDR_OWVAR 21
24236: PUSH
24237: LD_INT 2
24239: ST_TO_ADDR
24240: GO 24250
// uc_nation := nation_russian ;
24242: LD_ADDR_OWVAR 21
24246: PUSH
24247: LD_INT 3
24249: ST_TO_ADDR
// vc_chassis := chassis ;
24250: LD_ADDR_OWVAR 37
24254: PUSH
24255: LD_VAR 0 1
24259: ST_TO_ADDR
// vc_engine := engine ;
24260: LD_ADDR_OWVAR 39
24264: PUSH
24265: LD_VAR 0 2
24269: ST_TO_ADDR
// vc_control := control ;
24270: LD_ADDR_OWVAR 38
24274: PUSH
24275: LD_VAR 0 3
24279: ST_TO_ADDR
// vc_weapon := weapon ;
24280: LD_ADDR_OWVAR 40
24284: PUSH
24285: LD_VAR 0 4
24289: ST_TO_ADDR
// un := CreateVehicle ;
24290: LD_ADDR_VAR 0 8
24294: PUSH
24295: CALL_OW 45
24299: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24300: LD_VAR 0 8
24304: PPUSH
24305: LD_INT 0
24307: PPUSH
24308: LD_INT 5
24310: PPUSH
24311: CALL_OW 12
24315: PPUSH
24316: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24320: LD_VAR 0 8
24324: PPUSH
24325: LD_VAR 0 5
24329: PPUSH
24330: LD_VAR 0 6
24334: PPUSH
24335: LD_INT 1
24337: PPUSH
24338: CALL_OW 48
// end ;
24342: LD_VAR 0 7
24346: RET
// export hInvincible ; every 1 do
24347: GO 24349
24349: DISABLE
// hInvincible := [ ] ;
24350: LD_ADDR_EXP 122
24354: PUSH
24355: EMPTY
24356: ST_TO_ADDR
24357: END
// every 10 do var i ;
24358: GO 24360
24360: DISABLE
24361: LD_INT 0
24363: PPUSH
// begin enable ;
24364: ENABLE
// if not hInvincible then
24365: LD_EXP 122
24369: NOT
24370: IFFALSE 24374
// exit ;
24372: GO 24418
// for i in hInvincible do
24374: LD_ADDR_VAR 0 1
24378: PUSH
24379: LD_EXP 122
24383: PUSH
24384: FOR_IN
24385: IFFALSE 24416
// if GetLives ( i ) < 1000 then
24387: LD_VAR 0 1
24391: PPUSH
24392: CALL_OW 256
24396: PUSH
24397: LD_INT 1000
24399: LESS
24400: IFFALSE 24414
// SetLives ( i , 1000 ) ;
24402: LD_VAR 0 1
24406: PPUSH
24407: LD_INT 1000
24409: PPUSH
24410: CALL_OW 234
24414: GO 24384
24416: POP
24417: POP
// end ;
24418: PPOPN 1
24420: END
// export function hHackInvincible ; var i ; begin
24421: LD_INT 0
24423: PPUSH
24424: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24425: LD_ADDR_VAR 0 2
24429: PUSH
24430: LD_INT 2
24432: PUSH
24433: LD_INT 21
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 21
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: LIST
24457: PPUSH
24458: CALL_OW 69
24462: PUSH
24463: FOR_IN
24464: IFFALSE 24525
// if IsSelected ( i ) then
24466: LD_VAR 0 2
24470: PPUSH
24471: CALL_OW 306
24475: IFFALSE 24523
// begin if i in hInvincible then
24477: LD_VAR 0 2
24481: PUSH
24482: LD_EXP 122
24486: IN
24487: IFFALSE 24507
// hInvincible := hInvincible diff i else
24489: LD_ADDR_EXP 122
24493: PUSH
24494: LD_EXP 122
24498: PUSH
24499: LD_VAR 0 2
24503: DIFF
24504: ST_TO_ADDR
24505: GO 24523
// hInvincible := hInvincible union i ;
24507: LD_ADDR_EXP 122
24511: PUSH
24512: LD_EXP 122
24516: PUSH
24517: LD_VAR 0 2
24521: UNION
24522: ST_TO_ADDR
// end ;
24523: GO 24463
24525: POP
24526: POP
// end ;
24527: LD_VAR 0 1
24531: RET
// export function hHackInvisible ; var i , j ; begin
24532: LD_INT 0
24534: PPUSH
24535: PPUSH
24536: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24537: LD_ADDR_VAR 0 2
24541: PUSH
24542: LD_INT 21
24544: PUSH
24545: LD_INT 1
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PPUSH
24552: CALL_OW 69
24556: PUSH
24557: FOR_IN
24558: IFFALSE 24582
// if IsSelected ( i ) then
24560: LD_VAR 0 2
24564: PPUSH
24565: CALL_OW 306
24569: IFFALSE 24580
// ComForceInvisible ( i ) ;
24571: LD_VAR 0 2
24575: PPUSH
24576: CALL_OW 496
24580: GO 24557
24582: POP
24583: POP
// end ;
24584: LD_VAR 0 1
24588: RET
// export function hHackChangeYourSide ; begin
24589: LD_INT 0
24591: PPUSH
// if your_side = 8 then
24592: LD_OWVAR 2
24596: PUSH
24597: LD_INT 8
24599: EQUAL
24600: IFFALSE 24612
// your_side := 0 else
24602: LD_ADDR_OWVAR 2
24606: PUSH
24607: LD_INT 0
24609: ST_TO_ADDR
24610: GO 24626
// your_side := your_side + 1 ;
24612: LD_ADDR_OWVAR 2
24616: PUSH
24617: LD_OWVAR 2
24621: PUSH
24622: LD_INT 1
24624: PLUS
24625: ST_TO_ADDR
// end ;
24626: LD_VAR 0 1
24630: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24631: LD_INT 0
24633: PPUSH
24634: PPUSH
24635: PPUSH
// for i in all_units do
24636: LD_ADDR_VAR 0 2
24640: PUSH
24641: LD_OWVAR 3
24645: PUSH
24646: FOR_IN
24647: IFFALSE 24725
// if IsSelected ( i ) then
24649: LD_VAR 0 2
24653: PPUSH
24654: CALL_OW 306
24658: IFFALSE 24723
// begin j := GetSide ( i ) ;
24660: LD_ADDR_VAR 0 3
24664: PUSH
24665: LD_VAR 0 2
24669: PPUSH
24670: CALL_OW 255
24674: ST_TO_ADDR
// if j = 8 then
24675: LD_VAR 0 3
24679: PUSH
24680: LD_INT 8
24682: EQUAL
24683: IFFALSE 24695
// j := 0 else
24685: LD_ADDR_VAR 0 3
24689: PUSH
24690: LD_INT 0
24692: ST_TO_ADDR
24693: GO 24709
// j := j + 1 ;
24695: LD_ADDR_VAR 0 3
24699: PUSH
24700: LD_VAR 0 3
24704: PUSH
24705: LD_INT 1
24707: PLUS
24708: ST_TO_ADDR
// SetSide ( i , j ) ;
24709: LD_VAR 0 2
24713: PPUSH
24714: LD_VAR 0 3
24718: PPUSH
24719: CALL_OW 235
// end ;
24723: GO 24646
24725: POP
24726: POP
// end ;
24727: LD_VAR 0 1
24731: RET
// export function hHackFog ; begin
24732: LD_INT 0
24734: PPUSH
// FogOff ( true ) ;
24735: LD_INT 1
24737: PPUSH
24738: CALL_OW 344
// end ;
24742: LD_VAR 0 1
24746: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24747: LD_INT 0
24749: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24750: LD_VAR 0 1
24754: PPUSH
24755: LD_VAR 0 2
24759: PPUSH
24760: LD_VAR 0 3
24764: PPUSH
24765: LD_INT 1
24767: PPUSH
24768: LD_INT 1
24770: PPUSH
24771: CALL_OW 483
// CenterOnXY ( x , y ) ;
24775: LD_VAR 0 2
24779: PPUSH
24780: LD_VAR 0 3
24784: PPUSH
24785: CALL_OW 84
// end ; end_of_file
24789: LD_VAR 0 4
24793: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24794: LD_INT 0
24796: PPUSH
24797: PPUSH
24798: PPUSH
24799: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24800: LD_VAR 0 1
24804: PPUSH
24805: CALL_OW 264
24809: PUSH
24810: LD_EXP 49
24814: EQUAL
24815: IFFALSE 24887
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24817: LD_INT 68
24819: PPUSH
24820: LD_VAR 0 1
24824: PPUSH
24825: CALL_OW 255
24829: PPUSH
24830: CALL_OW 321
24834: PUSH
24835: LD_INT 2
24837: EQUAL
24838: IFFALSE 24850
// eff := 70 else
24840: LD_ADDR_VAR 0 4
24844: PUSH
24845: LD_INT 70
24847: ST_TO_ADDR
24848: GO 24858
// eff := 30 ;
24850: LD_ADDR_VAR 0 4
24854: PUSH
24855: LD_INT 30
24857: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24858: LD_VAR 0 1
24862: PPUSH
24863: CALL_OW 250
24867: PPUSH
24868: LD_VAR 0 1
24872: PPUSH
24873: CALL_OW 251
24877: PPUSH
24878: LD_VAR 0 4
24882: PPUSH
24883: CALL_OW 495
// end ; end ;
24887: LD_VAR 0 2
24891: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24892: LD_INT 0
24894: PPUSH
// end ;
24895: LD_VAR 0 4
24899: RET
// export function SOS_Command ( cmd ) ; begin
24900: LD_INT 0
24902: PPUSH
// end ;
24903: LD_VAR 0 2
24907: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24908: LD_INT 0
24910: PPUSH
// end ;
24911: LD_VAR 0 6
24915: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24916: LD_INT 0
24918: PPUSH
24919: PPUSH
// if not vehicle or not factory then
24920: LD_VAR 0 1
24924: NOT
24925: PUSH
24926: LD_VAR 0 2
24930: NOT
24931: OR
24932: IFFALSE 24936
// exit ;
24934: GO 25167
// if factoryWaypoints >= factory then
24936: LD_EXP 123
24940: PUSH
24941: LD_VAR 0 2
24945: GREATEREQUAL
24946: IFFALSE 25167
// if factoryWaypoints [ factory ] then
24948: LD_EXP 123
24952: PUSH
24953: LD_VAR 0 2
24957: ARRAY
24958: IFFALSE 25167
// begin if GetControl ( vehicle ) = control_manual then
24960: LD_VAR 0 1
24964: PPUSH
24965: CALL_OW 263
24969: PUSH
24970: LD_INT 1
24972: EQUAL
24973: IFFALSE 25054
// begin driver := IsDrivenBy ( vehicle ) ;
24975: LD_ADDR_VAR 0 4
24979: PUSH
24980: LD_VAR 0 1
24984: PPUSH
24985: CALL_OW 311
24989: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24990: LD_VAR 0 4
24994: PPUSH
24995: LD_EXP 123
24999: PUSH
25000: LD_VAR 0 2
25004: ARRAY
25005: PUSH
25006: LD_INT 3
25008: ARRAY
25009: PPUSH
25010: LD_EXP 123
25014: PUSH
25015: LD_VAR 0 2
25019: ARRAY
25020: PUSH
25021: LD_INT 4
25023: ARRAY
25024: PPUSH
25025: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25029: LD_VAR 0 4
25033: PPUSH
25034: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25038: LD_VAR 0 4
25042: PPUSH
25043: LD_VAR 0 2
25047: PPUSH
25048: CALL_OW 180
// end else
25052: GO 25167
// if GetControl ( vehicle ) = control_remote then
25054: LD_VAR 0 1
25058: PPUSH
25059: CALL_OW 263
25063: PUSH
25064: LD_INT 2
25066: EQUAL
25067: IFFALSE 25128
// begin wait ( 0 0$2 ) ;
25069: LD_INT 70
25071: PPUSH
25072: CALL_OW 67
// if Connect ( vehicle ) then
25076: LD_VAR 0 1
25080: PPUSH
25081: CALL 37391 0 1
25085: IFFALSE 25126
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25087: LD_VAR 0 1
25091: PPUSH
25092: LD_EXP 123
25096: PUSH
25097: LD_VAR 0 2
25101: ARRAY
25102: PUSH
25103: LD_INT 3
25105: ARRAY
25106: PPUSH
25107: LD_EXP 123
25111: PUSH
25112: LD_VAR 0 2
25116: ARRAY
25117: PUSH
25118: LD_INT 4
25120: ARRAY
25121: PPUSH
25122: CALL_OW 171
// end else
25126: GO 25167
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25128: LD_VAR 0 1
25132: PPUSH
25133: LD_EXP 123
25137: PUSH
25138: LD_VAR 0 2
25142: ARRAY
25143: PUSH
25144: LD_INT 3
25146: ARRAY
25147: PPUSH
25148: LD_EXP 123
25152: PUSH
25153: LD_VAR 0 2
25157: ARRAY
25158: PUSH
25159: LD_INT 4
25161: ARRAY
25162: PPUSH
25163: CALL_OW 171
// end ; end ;
25167: LD_VAR 0 3
25171: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25172: LD_INT 0
25174: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25175: LD_VAR 0 1
25179: PUSH
25180: LD_INT 250
25182: EQUAL
25183: PUSH
25184: LD_VAR 0 2
25188: PPUSH
25189: CALL_OW 264
25193: PUSH
25194: LD_EXP 52
25198: EQUAL
25199: AND
25200: IFFALSE 25221
// MinerPlaceMine ( unit , x , y ) ;
25202: LD_VAR 0 2
25206: PPUSH
25207: LD_VAR 0 4
25211: PPUSH
25212: LD_VAR 0 5
25216: PPUSH
25217: CALL 27949 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25221: LD_VAR 0 1
25225: PUSH
25226: LD_INT 251
25228: EQUAL
25229: PUSH
25230: LD_VAR 0 2
25234: PPUSH
25235: CALL_OW 264
25239: PUSH
25240: LD_EXP 52
25244: EQUAL
25245: AND
25246: IFFALSE 25267
// MinerDetonateMine ( unit , x , y ) ;
25248: LD_VAR 0 2
25252: PPUSH
25253: LD_VAR 0 4
25257: PPUSH
25258: LD_VAR 0 5
25262: PPUSH
25263: CALL 28226 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25267: LD_VAR 0 1
25271: PUSH
25272: LD_INT 252
25274: EQUAL
25275: PUSH
25276: LD_VAR 0 2
25280: PPUSH
25281: CALL_OW 264
25285: PUSH
25286: LD_EXP 52
25290: EQUAL
25291: AND
25292: IFFALSE 25313
// MinerCreateMinefield ( unit , x , y ) ;
25294: LD_VAR 0 2
25298: PPUSH
25299: LD_VAR 0 4
25303: PPUSH
25304: LD_VAR 0 5
25308: PPUSH
25309: CALL 28643 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25313: LD_VAR 0 1
25317: PUSH
25318: LD_INT 253
25320: EQUAL
25321: PUSH
25322: LD_VAR 0 2
25326: PPUSH
25327: CALL_OW 257
25331: PUSH
25332: LD_INT 5
25334: EQUAL
25335: AND
25336: IFFALSE 25357
// ComBinocular ( unit , x , y ) ;
25338: LD_VAR 0 2
25342: PPUSH
25343: LD_VAR 0 4
25347: PPUSH
25348: LD_VAR 0 5
25352: PPUSH
25353: CALL 29014 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25357: LD_VAR 0 1
25361: PUSH
25362: LD_INT 254
25364: EQUAL
25365: PUSH
25366: LD_VAR 0 2
25370: PPUSH
25371: CALL_OW 264
25375: PUSH
25376: LD_EXP 47
25380: EQUAL
25381: AND
25382: PUSH
25383: LD_VAR 0 3
25387: PPUSH
25388: CALL_OW 263
25392: PUSH
25393: LD_INT 3
25395: EQUAL
25396: AND
25397: IFFALSE 25413
// HackDestroyVehicle ( unit , selectedUnit ) ;
25399: LD_VAR 0 2
25403: PPUSH
25404: LD_VAR 0 3
25408: PPUSH
25409: CALL 27309 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25413: LD_VAR 0 1
25417: PUSH
25418: LD_INT 255
25420: EQUAL
25421: PUSH
25422: LD_VAR 0 2
25426: PPUSH
25427: CALL_OW 264
25431: PUSH
25432: LD_INT 14
25434: PUSH
25435: LD_INT 53
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: IN
25442: AND
25443: PUSH
25444: LD_VAR 0 4
25448: PPUSH
25449: LD_VAR 0 5
25453: PPUSH
25454: CALL_OW 488
25458: AND
25459: IFFALSE 25483
// CutTreeXYR ( unit , x , y , 12 ) ;
25461: LD_VAR 0 2
25465: PPUSH
25466: LD_VAR 0 4
25470: PPUSH
25471: LD_VAR 0 5
25475: PPUSH
25476: LD_INT 12
25478: PPUSH
25479: CALL 25875 0 4
// if cmd = 256 then
25483: LD_VAR 0 1
25487: PUSH
25488: LD_INT 256
25490: EQUAL
25491: IFFALSE 25512
// SetFactoryWaypoint ( unit , x , y ) ;
25493: LD_VAR 0 2
25497: PPUSH
25498: LD_VAR 0 4
25502: PPUSH
25503: LD_VAR 0 5
25507: PPUSH
25508: CALL 25517 0 3
// end ;
25512: LD_VAR 0 6
25516: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25517: LD_INT 0
25519: PPUSH
25520: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25521: LD_VAR 0 1
25525: NOT
25526: PUSH
25527: LD_VAR 0 2
25531: PPUSH
25532: LD_VAR 0 3
25536: PPUSH
25537: CALL_OW 488
25541: NOT
25542: OR
25543: PUSH
25544: LD_VAR 0 1
25548: PPUSH
25549: CALL_OW 266
25553: PUSH
25554: LD_INT 3
25556: NONEQUAL
25557: PUSH
25558: LD_VAR 0 1
25562: PPUSH
25563: CALL_OW 247
25567: PUSH
25568: LD_INT 1
25570: EQUAL
25571: NOT
25572: AND
25573: OR
25574: IFFALSE 25578
// exit ;
25576: GO 25727
// if GetType ( factory ) = unit_human then
25578: LD_VAR 0 1
25582: PPUSH
25583: CALL_OW 247
25587: PUSH
25588: LD_INT 1
25590: EQUAL
25591: IFFALSE 25608
// factory := IsInUnit ( factory ) ;
25593: LD_ADDR_VAR 0 1
25597: PUSH
25598: LD_VAR 0 1
25602: PPUSH
25603: CALL_OW 310
25607: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL_OW 266
25617: PUSH
25618: LD_INT 3
25620: NONEQUAL
25621: IFFALSE 25625
// exit ;
25623: GO 25727
// if HexInfo ( x , y ) = factory then
25625: LD_VAR 0 2
25629: PPUSH
25630: LD_VAR 0 3
25634: PPUSH
25635: CALL_OW 428
25639: PUSH
25640: LD_VAR 0 1
25644: EQUAL
25645: IFFALSE 25672
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25647: LD_ADDR_EXP 123
25651: PUSH
25652: LD_EXP 123
25656: PPUSH
25657: LD_VAR 0 1
25661: PPUSH
25662: LD_INT 0
25664: PPUSH
25665: CALL_OW 1
25669: ST_TO_ADDR
25670: GO 25723
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25672: LD_ADDR_EXP 123
25676: PUSH
25677: LD_EXP 123
25681: PPUSH
25682: LD_VAR 0 1
25686: PPUSH
25687: LD_VAR 0 1
25691: PPUSH
25692: CALL_OW 255
25696: PUSH
25697: LD_VAR 0 1
25701: PUSH
25702: LD_VAR 0 2
25706: PUSH
25707: LD_VAR 0 3
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: PPUSH
25718: CALL_OW 1
25722: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25723: CALL 25732 0 0
// end ;
25727: LD_VAR 0 4
25731: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
25732: LD_INT 0
25734: PPUSH
25735: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25736: LD_STRING resetFactoryWaypoint();
25738: PPUSH
25739: CALL_OW 559
// if factoryWaypoints then
25743: LD_EXP 123
25747: IFFALSE 25870
// begin for i := 1 to factoryWaypoints do
25749: LD_ADDR_VAR 0 2
25753: PUSH
25754: DOUBLE
25755: LD_INT 1
25757: DEC
25758: ST_TO_ADDR
25759: LD_EXP 123
25763: PUSH
25764: FOR_TO
25765: IFFALSE 25868
// if factoryWaypoints [ i ] then
25767: LD_EXP 123
25771: PUSH
25772: LD_VAR 0 2
25776: ARRAY
25777: IFFALSE 25866
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
25779: LD_STRING setFactoryWaypointXY(
25781: PUSH
25782: LD_EXP 123
25786: PUSH
25787: LD_VAR 0 2
25791: ARRAY
25792: PUSH
25793: LD_INT 1
25795: ARRAY
25796: STR
25797: PUSH
25798: LD_STRING ,
25800: STR
25801: PUSH
25802: LD_EXP 123
25806: PUSH
25807: LD_VAR 0 2
25811: ARRAY
25812: PUSH
25813: LD_INT 2
25815: ARRAY
25816: STR
25817: PUSH
25818: LD_STRING ,
25820: STR
25821: PUSH
25822: LD_EXP 123
25826: PUSH
25827: LD_VAR 0 2
25831: ARRAY
25832: PUSH
25833: LD_INT 3
25835: ARRAY
25836: STR
25837: PUSH
25838: LD_STRING ,
25840: STR
25841: PUSH
25842: LD_EXP 123
25846: PUSH
25847: LD_VAR 0 2
25851: ARRAY
25852: PUSH
25853: LD_INT 4
25855: ARRAY
25856: STR
25857: PUSH
25858: LD_STRING )
25860: STR
25861: PPUSH
25862: CALL_OW 559
25866: GO 25764
25868: POP
25869: POP
// end ; end ;
25870: LD_VAR 0 1
25874: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25875: LD_INT 0
25877: PPUSH
25878: PPUSH
25879: PPUSH
25880: PPUSH
25881: PPUSH
25882: PPUSH
25883: PPUSH
25884: PPUSH
25885: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25886: LD_VAR 0 1
25890: NOT
25891: PUSH
25892: LD_VAR 0 2
25896: PPUSH
25897: LD_VAR 0 3
25901: PPUSH
25902: CALL_OW 488
25906: NOT
25907: OR
25908: PUSH
25909: LD_VAR 0 4
25913: NOT
25914: OR
25915: IFFALSE 25919
// exit ;
25917: GO 26259
// list := [ ] ;
25919: LD_ADDR_VAR 0 13
25923: PUSH
25924: EMPTY
25925: ST_TO_ADDR
// if x - r < 0 then
25926: LD_VAR 0 2
25930: PUSH
25931: LD_VAR 0 4
25935: MINUS
25936: PUSH
25937: LD_INT 0
25939: LESS
25940: IFFALSE 25952
// min_x := 0 else
25942: LD_ADDR_VAR 0 7
25946: PUSH
25947: LD_INT 0
25949: ST_TO_ADDR
25950: GO 25968
// min_x := x - r ;
25952: LD_ADDR_VAR 0 7
25956: PUSH
25957: LD_VAR 0 2
25961: PUSH
25962: LD_VAR 0 4
25966: MINUS
25967: ST_TO_ADDR
// if y - r < 0 then
25968: LD_VAR 0 3
25972: PUSH
25973: LD_VAR 0 4
25977: MINUS
25978: PUSH
25979: LD_INT 0
25981: LESS
25982: IFFALSE 25994
// min_y := 0 else
25984: LD_ADDR_VAR 0 8
25988: PUSH
25989: LD_INT 0
25991: ST_TO_ADDR
25992: GO 26010
// min_y := y - r ;
25994: LD_ADDR_VAR 0 8
25998: PUSH
25999: LD_VAR 0 3
26003: PUSH
26004: LD_VAR 0 4
26008: MINUS
26009: ST_TO_ADDR
// max_x := x + r ;
26010: LD_ADDR_VAR 0 9
26014: PUSH
26015: LD_VAR 0 2
26019: PUSH
26020: LD_VAR 0 4
26024: PLUS
26025: ST_TO_ADDR
// max_y := y + r ;
26026: LD_ADDR_VAR 0 10
26030: PUSH
26031: LD_VAR 0 3
26035: PUSH
26036: LD_VAR 0 4
26040: PLUS
26041: ST_TO_ADDR
// for _x = min_x to max_x do
26042: LD_ADDR_VAR 0 11
26046: PUSH
26047: DOUBLE
26048: LD_VAR 0 7
26052: DEC
26053: ST_TO_ADDR
26054: LD_VAR 0 9
26058: PUSH
26059: FOR_TO
26060: IFFALSE 26177
// for _y = min_y to max_y do
26062: LD_ADDR_VAR 0 12
26066: PUSH
26067: DOUBLE
26068: LD_VAR 0 8
26072: DEC
26073: ST_TO_ADDR
26074: LD_VAR 0 10
26078: PUSH
26079: FOR_TO
26080: IFFALSE 26173
// begin if not ValidHex ( _x , _y ) then
26082: LD_VAR 0 11
26086: PPUSH
26087: LD_VAR 0 12
26091: PPUSH
26092: CALL_OW 488
26096: NOT
26097: IFFALSE 26101
// continue ;
26099: GO 26079
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26101: LD_VAR 0 11
26105: PPUSH
26106: LD_VAR 0 12
26110: PPUSH
26111: CALL_OW 351
26115: PUSH
26116: LD_VAR 0 11
26120: PPUSH
26121: LD_VAR 0 12
26125: PPUSH
26126: CALL_OW 554
26130: AND
26131: IFFALSE 26171
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26133: LD_ADDR_VAR 0 13
26137: PUSH
26138: LD_VAR 0 13
26142: PPUSH
26143: LD_VAR 0 13
26147: PUSH
26148: LD_INT 1
26150: PLUS
26151: PPUSH
26152: LD_VAR 0 11
26156: PUSH
26157: LD_VAR 0 12
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PPUSH
26166: CALL_OW 2
26170: ST_TO_ADDR
// end ;
26171: GO 26079
26173: POP
26174: POP
26175: GO 26059
26177: POP
26178: POP
// if not list then
26179: LD_VAR 0 13
26183: NOT
26184: IFFALSE 26188
// exit ;
26186: GO 26259
// for i in list do
26188: LD_ADDR_VAR 0 6
26192: PUSH
26193: LD_VAR 0 13
26197: PUSH
26198: FOR_IN
26199: IFFALSE 26257
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26201: LD_VAR 0 1
26205: PPUSH
26206: LD_STRING M
26208: PUSH
26209: LD_VAR 0 6
26213: PUSH
26214: LD_INT 1
26216: ARRAY
26217: PUSH
26218: LD_VAR 0 6
26222: PUSH
26223: LD_INT 2
26225: ARRAY
26226: PUSH
26227: LD_INT 0
26229: PUSH
26230: LD_INT 0
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: PUSH
26248: EMPTY
26249: LIST
26250: PPUSH
26251: CALL_OW 447
26255: GO 26198
26257: POP
26258: POP
// end ;
26259: LD_VAR 0 5
26263: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26264: LD_EXP 124
26268: NOT
26269: IFFALSE 26319
26271: GO 26273
26273: DISABLE
// begin initHack := true ;
26274: LD_ADDR_EXP 124
26278: PUSH
26279: LD_INT 1
26281: ST_TO_ADDR
// hackTanks := [ ] ;
26282: LD_ADDR_EXP 125
26286: PUSH
26287: EMPTY
26288: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26289: LD_ADDR_EXP 126
26293: PUSH
26294: EMPTY
26295: ST_TO_ADDR
// hackLimit := 3 ;
26296: LD_ADDR_EXP 127
26300: PUSH
26301: LD_INT 3
26303: ST_TO_ADDR
// hackDist := 12 ;
26304: LD_ADDR_EXP 128
26308: PUSH
26309: LD_INT 12
26311: ST_TO_ADDR
// hackCounter := [ ] ;
26312: LD_ADDR_EXP 129
26316: PUSH
26317: EMPTY
26318: ST_TO_ADDR
// end ;
26319: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26320: LD_EXP 124
26324: PUSH
26325: LD_INT 34
26327: PUSH
26328: LD_EXP 47
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PPUSH
26337: CALL_OW 69
26341: AND
26342: IFFALSE 26597
26344: GO 26346
26346: DISABLE
26347: LD_INT 0
26349: PPUSH
26350: PPUSH
// begin enable ;
26351: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26352: LD_ADDR_VAR 0 1
26356: PUSH
26357: LD_INT 34
26359: PUSH
26360: LD_EXP 47
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PPUSH
26369: CALL_OW 69
26373: PUSH
26374: FOR_IN
26375: IFFALSE 26595
// begin if not i in hackTanks then
26377: LD_VAR 0 1
26381: PUSH
26382: LD_EXP 125
26386: IN
26387: NOT
26388: IFFALSE 26471
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26390: LD_ADDR_EXP 125
26394: PUSH
26395: LD_EXP 125
26399: PPUSH
26400: LD_EXP 125
26404: PUSH
26405: LD_INT 1
26407: PLUS
26408: PPUSH
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 1
26418: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26419: LD_ADDR_EXP 126
26423: PUSH
26424: LD_EXP 126
26428: PPUSH
26429: LD_EXP 126
26433: PUSH
26434: LD_INT 1
26436: PLUS
26437: PPUSH
26438: EMPTY
26439: PPUSH
26440: CALL_OW 1
26444: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26445: LD_ADDR_EXP 129
26449: PUSH
26450: LD_EXP 129
26454: PPUSH
26455: LD_EXP 129
26459: PUSH
26460: LD_INT 1
26462: PLUS
26463: PPUSH
26464: EMPTY
26465: PPUSH
26466: CALL_OW 1
26470: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26471: LD_VAR 0 1
26475: PPUSH
26476: CALL_OW 302
26480: NOT
26481: IFFALSE 26494
// begin HackUnlinkAll ( i ) ;
26483: LD_VAR 0 1
26487: PPUSH
26488: CALL 26600 0 1
// continue ;
26492: GO 26374
// end ; HackCheckCapturedStatus ( i ) ;
26494: LD_VAR 0 1
26498: PPUSH
26499: CALL 27043 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26503: LD_ADDR_VAR 0 2
26507: PUSH
26508: LD_INT 81
26510: PUSH
26511: LD_VAR 0 1
26515: PPUSH
26516: CALL_OW 255
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 33
26527: PUSH
26528: LD_INT 3
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 91
26537: PUSH
26538: LD_VAR 0 1
26542: PUSH
26543: LD_EXP 128
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 50
26555: PUSH
26556: EMPTY
26557: LIST
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: PPUSH
26565: CALL_OW 69
26569: ST_TO_ADDR
// if not tmp then
26570: LD_VAR 0 2
26574: NOT
26575: IFFALSE 26579
// continue ;
26577: GO 26374
// HackLink ( i , tmp ) ;
26579: LD_VAR 0 1
26583: PPUSH
26584: LD_VAR 0 2
26588: PPUSH
26589: CALL 26736 0 2
// end ;
26593: GO 26374
26595: POP
26596: POP
// end ;
26597: PPOPN 2
26599: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26600: LD_INT 0
26602: PPUSH
26603: PPUSH
26604: PPUSH
// if not hack in hackTanks then
26605: LD_VAR 0 1
26609: PUSH
26610: LD_EXP 125
26614: IN
26615: NOT
26616: IFFALSE 26620
// exit ;
26618: GO 26731
// index := GetElementIndex ( hackTanks , hack ) ;
26620: LD_ADDR_VAR 0 4
26624: PUSH
26625: LD_EXP 125
26629: PPUSH
26630: LD_VAR 0 1
26634: PPUSH
26635: CALL 34205 0 2
26639: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26640: LD_EXP 126
26644: PUSH
26645: LD_VAR 0 4
26649: ARRAY
26650: IFFALSE 26731
// begin for i in hackTanksCaptured [ index ] do
26652: LD_ADDR_VAR 0 3
26656: PUSH
26657: LD_EXP 126
26661: PUSH
26662: LD_VAR 0 4
26666: ARRAY
26667: PUSH
26668: FOR_IN
26669: IFFALSE 26695
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26671: LD_VAR 0 3
26675: PUSH
26676: LD_INT 1
26678: ARRAY
26679: PPUSH
26680: LD_VAR 0 3
26684: PUSH
26685: LD_INT 2
26687: ARRAY
26688: PPUSH
26689: CALL_OW 235
26693: GO 26668
26695: POP
26696: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26697: LD_ADDR_EXP 126
26701: PUSH
26702: LD_EXP 126
26706: PPUSH
26707: LD_VAR 0 4
26711: PPUSH
26712: EMPTY
26713: PPUSH
26714: CALL_OW 1
26718: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26719: LD_VAR 0 1
26723: PPUSH
26724: LD_INT 0
26726: PPUSH
26727: CALL_OW 505
// end ; end ;
26731: LD_VAR 0 2
26735: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26736: LD_INT 0
26738: PPUSH
26739: PPUSH
26740: PPUSH
// if not hack in hackTanks or not vehicles then
26741: LD_VAR 0 1
26745: PUSH
26746: LD_EXP 125
26750: IN
26751: NOT
26752: PUSH
26753: LD_VAR 0 2
26757: NOT
26758: OR
26759: IFFALSE 26763
// exit ;
26761: GO 27038
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26763: LD_ADDR_VAR 0 2
26767: PUSH
26768: LD_VAR 0 1
26772: PPUSH
26773: LD_VAR 0 2
26777: PPUSH
26778: LD_INT 1
26780: PPUSH
26781: LD_INT 1
26783: PPUSH
26784: CALL 34855 0 4
26788: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26789: LD_ADDR_VAR 0 5
26793: PUSH
26794: LD_EXP 125
26798: PPUSH
26799: LD_VAR 0 1
26803: PPUSH
26804: CALL 34205 0 2
26808: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26809: LD_EXP 126
26813: PUSH
26814: LD_VAR 0 5
26818: ARRAY
26819: PUSH
26820: LD_EXP 127
26824: LESS
26825: IFFALSE 27014
// begin for i := 1 to vehicles do
26827: LD_ADDR_VAR 0 4
26831: PUSH
26832: DOUBLE
26833: LD_INT 1
26835: DEC
26836: ST_TO_ADDR
26837: LD_VAR 0 2
26841: PUSH
26842: FOR_TO
26843: IFFALSE 27012
// begin if hackTanksCaptured [ index ] = hackLimit then
26845: LD_EXP 126
26849: PUSH
26850: LD_VAR 0 5
26854: ARRAY
26855: PUSH
26856: LD_EXP 127
26860: EQUAL
26861: IFFALSE 26865
// break ;
26863: GO 27012
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26865: LD_ADDR_EXP 129
26869: PUSH
26870: LD_EXP 129
26874: PPUSH
26875: LD_VAR 0 5
26879: PPUSH
26880: LD_EXP 129
26884: PUSH
26885: LD_VAR 0 5
26889: ARRAY
26890: PUSH
26891: LD_INT 1
26893: PLUS
26894: PPUSH
26895: CALL_OW 1
26899: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26900: LD_ADDR_EXP 126
26904: PUSH
26905: LD_EXP 126
26909: PPUSH
26910: LD_VAR 0 5
26914: PUSH
26915: LD_EXP 126
26919: PUSH
26920: LD_VAR 0 5
26924: ARRAY
26925: PUSH
26926: LD_INT 1
26928: PLUS
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PPUSH
26934: LD_VAR 0 2
26938: PUSH
26939: LD_VAR 0 4
26943: ARRAY
26944: PUSH
26945: LD_VAR 0 2
26949: PUSH
26950: LD_VAR 0 4
26954: ARRAY
26955: PPUSH
26956: CALL_OW 255
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PPUSH
26965: CALL 34420 0 3
26969: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26970: LD_VAR 0 2
26974: PUSH
26975: LD_VAR 0 4
26979: ARRAY
26980: PPUSH
26981: LD_VAR 0 1
26985: PPUSH
26986: CALL_OW 255
26990: PPUSH
26991: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26995: LD_VAR 0 2
26999: PUSH
27000: LD_VAR 0 4
27004: ARRAY
27005: PPUSH
27006: CALL_OW 141
// end ;
27010: GO 26842
27012: POP
27013: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27014: LD_VAR 0 1
27018: PPUSH
27019: LD_EXP 126
27023: PUSH
27024: LD_VAR 0 5
27028: ARRAY
27029: PUSH
27030: LD_INT 0
27032: PLUS
27033: PPUSH
27034: CALL_OW 505
// end ;
27038: LD_VAR 0 3
27042: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27043: LD_INT 0
27045: PPUSH
27046: PPUSH
27047: PPUSH
27048: PPUSH
// if not hack in hackTanks then
27049: LD_VAR 0 1
27053: PUSH
27054: LD_EXP 125
27058: IN
27059: NOT
27060: IFFALSE 27064
// exit ;
27062: GO 27304
// index := GetElementIndex ( hackTanks , hack ) ;
27064: LD_ADDR_VAR 0 4
27068: PUSH
27069: LD_EXP 125
27073: PPUSH
27074: LD_VAR 0 1
27078: PPUSH
27079: CALL 34205 0 2
27083: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27084: LD_ADDR_VAR 0 3
27088: PUSH
27089: DOUBLE
27090: LD_EXP 126
27094: PUSH
27095: LD_VAR 0 4
27099: ARRAY
27100: INC
27101: ST_TO_ADDR
27102: LD_INT 1
27104: PUSH
27105: FOR_DOWNTO
27106: IFFALSE 27278
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27108: LD_ADDR_VAR 0 5
27112: PUSH
27113: LD_EXP 126
27117: PUSH
27118: LD_VAR 0 4
27122: ARRAY
27123: PUSH
27124: LD_VAR 0 3
27128: ARRAY
27129: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27130: LD_VAR 0 5
27134: PUSH
27135: LD_INT 1
27137: ARRAY
27138: PPUSH
27139: CALL_OW 302
27143: NOT
27144: PUSH
27145: LD_VAR 0 5
27149: PUSH
27150: LD_INT 1
27152: ARRAY
27153: PPUSH
27154: CALL_OW 255
27158: PUSH
27159: LD_VAR 0 1
27163: PPUSH
27164: CALL_OW 255
27168: NONEQUAL
27169: OR
27170: IFFALSE 27276
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27172: LD_VAR 0 5
27176: PUSH
27177: LD_INT 1
27179: ARRAY
27180: PPUSH
27181: CALL_OW 305
27185: PUSH
27186: LD_VAR 0 5
27190: PUSH
27191: LD_INT 1
27193: ARRAY
27194: PPUSH
27195: CALL_OW 255
27199: PUSH
27200: LD_VAR 0 1
27204: PPUSH
27205: CALL_OW 255
27209: EQUAL
27210: AND
27211: IFFALSE 27235
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27213: LD_VAR 0 5
27217: PUSH
27218: LD_INT 1
27220: ARRAY
27221: PPUSH
27222: LD_VAR 0 5
27226: PUSH
27227: LD_INT 2
27229: ARRAY
27230: PPUSH
27231: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27235: LD_ADDR_EXP 126
27239: PUSH
27240: LD_EXP 126
27244: PPUSH
27245: LD_VAR 0 4
27249: PPUSH
27250: LD_EXP 126
27254: PUSH
27255: LD_VAR 0 4
27259: ARRAY
27260: PPUSH
27261: LD_VAR 0 3
27265: PPUSH
27266: CALL_OW 3
27270: PPUSH
27271: CALL_OW 1
27275: ST_TO_ADDR
// end ; end ;
27276: GO 27105
27278: POP
27279: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27280: LD_VAR 0 1
27284: PPUSH
27285: LD_EXP 126
27289: PUSH
27290: LD_VAR 0 4
27294: ARRAY
27295: PUSH
27296: LD_INT 0
27298: PLUS
27299: PPUSH
27300: CALL_OW 505
// end ;
27304: LD_VAR 0 2
27308: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27309: LD_INT 0
27311: PPUSH
27312: PPUSH
27313: PPUSH
27314: PPUSH
// if not hack in hackTanks then
27315: LD_VAR 0 1
27319: PUSH
27320: LD_EXP 125
27324: IN
27325: NOT
27326: IFFALSE 27330
// exit ;
27328: GO 27415
// index := GetElementIndex ( hackTanks , hack ) ;
27330: LD_ADDR_VAR 0 5
27334: PUSH
27335: LD_EXP 125
27339: PPUSH
27340: LD_VAR 0 1
27344: PPUSH
27345: CALL 34205 0 2
27349: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27350: LD_ADDR_VAR 0 4
27354: PUSH
27355: DOUBLE
27356: LD_INT 1
27358: DEC
27359: ST_TO_ADDR
27360: LD_EXP 126
27364: PUSH
27365: LD_VAR 0 5
27369: ARRAY
27370: PUSH
27371: FOR_TO
27372: IFFALSE 27413
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27374: LD_EXP 126
27378: PUSH
27379: LD_VAR 0 5
27383: ARRAY
27384: PUSH
27385: LD_VAR 0 4
27389: ARRAY
27390: PUSH
27391: LD_INT 1
27393: ARRAY
27394: PUSH
27395: LD_VAR 0 2
27399: EQUAL
27400: IFFALSE 27411
// KillUnit ( vehicle ) ;
27402: LD_VAR 0 2
27406: PPUSH
27407: CALL_OW 66
27411: GO 27371
27413: POP
27414: POP
// end ;
27415: LD_VAR 0 3
27419: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27420: LD_EXP 130
27424: NOT
27425: IFFALSE 27460
27427: GO 27429
27429: DISABLE
// begin initMiner := true ;
27430: LD_ADDR_EXP 130
27434: PUSH
27435: LD_INT 1
27437: ST_TO_ADDR
// minersList := [ ] ;
27438: LD_ADDR_EXP 131
27442: PUSH
27443: EMPTY
27444: ST_TO_ADDR
// minerMinesList := [ ] ;
27445: LD_ADDR_EXP 132
27449: PUSH
27450: EMPTY
27451: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27452: LD_ADDR_EXP 133
27456: PUSH
27457: LD_INT 5
27459: ST_TO_ADDR
// end ;
27460: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27461: LD_EXP 130
27465: PUSH
27466: LD_INT 34
27468: PUSH
27469: LD_EXP 52
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PPUSH
27478: CALL_OW 69
27482: AND
27483: IFFALSE 27946
27485: GO 27487
27487: DISABLE
27488: LD_INT 0
27490: PPUSH
27491: PPUSH
27492: PPUSH
27493: PPUSH
// begin enable ;
27494: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27495: LD_ADDR_VAR 0 1
27499: PUSH
27500: LD_INT 34
27502: PUSH
27503: LD_EXP 52
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PPUSH
27512: CALL_OW 69
27516: PUSH
27517: FOR_IN
27518: IFFALSE 27590
// begin if not i in minersList then
27520: LD_VAR 0 1
27524: PUSH
27525: LD_EXP 131
27529: IN
27530: NOT
27531: IFFALSE 27588
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27533: LD_ADDR_EXP 131
27537: PUSH
27538: LD_EXP 131
27542: PPUSH
27543: LD_EXP 131
27547: PUSH
27548: LD_INT 1
27550: PLUS
27551: PPUSH
27552: LD_VAR 0 1
27556: PPUSH
27557: CALL_OW 1
27561: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27562: LD_ADDR_EXP 132
27566: PUSH
27567: LD_EXP 132
27571: PPUSH
27572: LD_EXP 132
27576: PUSH
27577: LD_INT 1
27579: PLUS
27580: PPUSH
27581: EMPTY
27582: PPUSH
27583: CALL_OW 1
27587: ST_TO_ADDR
// end end ;
27588: GO 27517
27590: POP
27591: POP
// for i := minerMinesList downto 1 do
27592: LD_ADDR_VAR 0 1
27596: PUSH
27597: DOUBLE
27598: LD_EXP 132
27602: INC
27603: ST_TO_ADDR
27604: LD_INT 1
27606: PUSH
27607: FOR_DOWNTO
27608: IFFALSE 27944
// begin if IsLive ( minersList [ i ] ) then
27610: LD_EXP 131
27614: PUSH
27615: LD_VAR 0 1
27619: ARRAY
27620: PPUSH
27621: CALL_OW 300
27625: IFFALSE 27653
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27627: LD_EXP 131
27631: PUSH
27632: LD_VAR 0 1
27636: ARRAY
27637: PPUSH
27638: LD_EXP 132
27642: PUSH
27643: LD_VAR 0 1
27647: ARRAY
27648: PPUSH
27649: CALL_OW 505
// if not minerMinesList [ i ] then
27653: LD_EXP 132
27657: PUSH
27658: LD_VAR 0 1
27662: ARRAY
27663: NOT
27664: IFFALSE 27668
// continue ;
27666: GO 27607
// for j := minerMinesList [ i ] downto 1 do
27668: LD_ADDR_VAR 0 2
27672: PUSH
27673: DOUBLE
27674: LD_EXP 132
27678: PUSH
27679: LD_VAR 0 1
27683: ARRAY
27684: INC
27685: ST_TO_ADDR
27686: LD_INT 1
27688: PUSH
27689: FOR_DOWNTO
27690: IFFALSE 27940
// begin side := GetSide ( minersList [ i ] ) ;
27692: LD_ADDR_VAR 0 3
27696: PUSH
27697: LD_EXP 131
27701: PUSH
27702: LD_VAR 0 1
27706: ARRAY
27707: PPUSH
27708: CALL_OW 255
27712: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27713: LD_ADDR_VAR 0 4
27717: PUSH
27718: LD_EXP 132
27722: PUSH
27723: LD_VAR 0 1
27727: ARRAY
27728: PUSH
27729: LD_VAR 0 2
27733: ARRAY
27734: PUSH
27735: LD_INT 1
27737: ARRAY
27738: PPUSH
27739: LD_EXP 132
27743: PUSH
27744: LD_VAR 0 1
27748: ARRAY
27749: PUSH
27750: LD_VAR 0 2
27754: ARRAY
27755: PUSH
27756: LD_INT 2
27758: ARRAY
27759: PPUSH
27760: CALL_OW 428
27764: ST_TO_ADDR
// if not tmp then
27765: LD_VAR 0 4
27769: NOT
27770: IFFALSE 27774
// continue ;
27772: GO 27689
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27774: LD_VAR 0 4
27778: PUSH
27779: LD_INT 81
27781: PUSH
27782: LD_VAR 0 3
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PPUSH
27791: CALL_OW 69
27795: IN
27796: PUSH
27797: LD_EXP 132
27801: PUSH
27802: LD_VAR 0 1
27806: ARRAY
27807: PUSH
27808: LD_VAR 0 2
27812: ARRAY
27813: PUSH
27814: LD_INT 1
27816: ARRAY
27817: PPUSH
27818: LD_EXP 132
27822: PUSH
27823: LD_VAR 0 1
27827: ARRAY
27828: PUSH
27829: LD_VAR 0 2
27833: ARRAY
27834: PUSH
27835: LD_INT 2
27837: ARRAY
27838: PPUSH
27839: CALL_OW 458
27843: AND
27844: IFFALSE 27938
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27846: LD_EXP 132
27850: PUSH
27851: LD_VAR 0 1
27855: ARRAY
27856: PUSH
27857: LD_VAR 0 2
27861: ARRAY
27862: PUSH
27863: LD_INT 1
27865: ARRAY
27866: PPUSH
27867: LD_EXP 132
27871: PUSH
27872: LD_VAR 0 1
27876: ARRAY
27877: PUSH
27878: LD_VAR 0 2
27882: ARRAY
27883: PUSH
27884: LD_INT 2
27886: ARRAY
27887: PPUSH
27888: LD_VAR 0 3
27892: PPUSH
27893: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27897: LD_ADDR_EXP 132
27901: PUSH
27902: LD_EXP 132
27906: PPUSH
27907: LD_VAR 0 1
27911: PPUSH
27912: LD_EXP 132
27916: PUSH
27917: LD_VAR 0 1
27921: ARRAY
27922: PPUSH
27923: LD_VAR 0 2
27927: PPUSH
27928: CALL_OW 3
27932: PPUSH
27933: CALL_OW 1
27937: ST_TO_ADDR
// end ; end ;
27938: GO 27689
27940: POP
27941: POP
// end ;
27942: GO 27607
27944: POP
27945: POP
// end ;
27946: PPOPN 4
27948: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27949: LD_INT 0
27951: PPUSH
27952: PPUSH
// result := false ;
27953: LD_ADDR_VAR 0 4
27957: PUSH
27958: LD_INT 0
27960: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27961: LD_VAR 0 1
27965: PPUSH
27966: CALL_OW 264
27970: PUSH
27971: LD_EXP 52
27975: EQUAL
27976: NOT
27977: IFFALSE 27981
// exit ;
27979: GO 28221
// index := GetElementIndex ( minersList , unit ) ;
27981: LD_ADDR_VAR 0 5
27985: PUSH
27986: LD_EXP 131
27990: PPUSH
27991: LD_VAR 0 1
27995: PPUSH
27996: CALL 34205 0 2
28000: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28001: LD_EXP 132
28005: PUSH
28006: LD_VAR 0 5
28010: ARRAY
28011: PUSH
28012: LD_EXP 133
28016: GREATEREQUAL
28017: IFFALSE 28021
// exit ;
28019: GO 28221
// ComMoveXY ( unit , x , y ) ;
28021: LD_VAR 0 1
28025: PPUSH
28026: LD_VAR 0 2
28030: PPUSH
28031: LD_VAR 0 3
28035: PPUSH
28036: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28040: LD_INT 35
28042: PPUSH
28043: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28047: LD_VAR 0 1
28051: PPUSH
28052: LD_VAR 0 2
28056: PPUSH
28057: LD_VAR 0 3
28061: PPUSH
28062: CALL 64924 0 3
28066: NOT
28067: PUSH
28068: LD_VAR 0 1
28072: PPUSH
28073: CALL_OW 314
28077: AND
28078: IFFALSE 28082
// exit ;
28080: GO 28221
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28082: LD_VAR 0 2
28086: PPUSH
28087: LD_VAR 0 3
28091: PPUSH
28092: CALL_OW 428
28096: PUSH
28097: LD_VAR 0 1
28101: EQUAL
28102: PUSH
28103: LD_VAR 0 1
28107: PPUSH
28108: CALL_OW 314
28112: NOT
28113: AND
28114: IFFALSE 28040
// PlaySoundXY ( x , y , PlantMine ) ;
28116: LD_VAR 0 2
28120: PPUSH
28121: LD_VAR 0 3
28125: PPUSH
28126: LD_STRING PlantMine
28128: PPUSH
28129: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28133: LD_VAR 0 2
28137: PPUSH
28138: LD_VAR 0 3
28142: PPUSH
28143: LD_VAR 0 1
28147: PPUSH
28148: CALL_OW 255
28152: PPUSH
28153: LD_INT 0
28155: PPUSH
28156: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28160: LD_ADDR_EXP 132
28164: PUSH
28165: LD_EXP 132
28169: PPUSH
28170: LD_VAR 0 5
28174: PUSH
28175: LD_EXP 132
28179: PUSH
28180: LD_VAR 0 5
28184: ARRAY
28185: PUSH
28186: LD_INT 1
28188: PLUS
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PPUSH
28194: LD_VAR 0 2
28198: PUSH
28199: LD_VAR 0 3
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PPUSH
28208: CALL 34420 0 3
28212: ST_TO_ADDR
// result := true ;
28213: LD_ADDR_VAR 0 4
28217: PUSH
28218: LD_INT 1
28220: ST_TO_ADDR
// end ;
28221: LD_VAR 0 4
28225: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28226: LD_INT 0
28228: PPUSH
28229: PPUSH
28230: PPUSH
// if not unit in minersList then
28231: LD_VAR 0 1
28235: PUSH
28236: LD_EXP 131
28240: IN
28241: NOT
28242: IFFALSE 28246
// exit ;
28244: GO 28638
// index := GetElementIndex ( minersList , unit ) ;
28246: LD_ADDR_VAR 0 6
28250: PUSH
28251: LD_EXP 131
28255: PPUSH
28256: LD_VAR 0 1
28260: PPUSH
28261: CALL 34205 0 2
28265: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28266: LD_ADDR_VAR 0 5
28270: PUSH
28271: DOUBLE
28272: LD_EXP 132
28276: PUSH
28277: LD_VAR 0 6
28281: ARRAY
28282: INC
28283: ST_TO_ADDR
28284: LD_INT 1
28286: PUSH
28287: FOR_DOWNTO
28288: IFFALSE 28449
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28290: LD_EXP 132
28294: PUSH
28295: LD_VAR 0 6
28299: ARRAY
28300: PUSH
28301: LD_VAR 0 5
28305: ARRAY
28306: PUSH
28307: LD_INT 1
28309: ARRAY
28310: PUSH
28311: LD_VAR 0 2
28315: EQUAL
28316: PUSH
28317: LD_EXP 132
28321: PUSH
28322: LD_VAR 0 6
28326: ARRAY
28327: PUSH
28328: LD_VAR 0 5
28332: ARRAY
28333: PUSH
28334: LD_INT 2
28336: ARRAY
28337: PUSH
28338: LD_VAR 0 3
28342: EQUAL
28343: AND
28344: IFFALSE 28447
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28346: LD_EXP 132
28350: PUSH
28351: LD_VAR 0 6
28355: ARRAY
28356: PUSH
28357: LD_VAR 0 5
28361: ARRAY
28362: PUSH
28363: LD_INT 1
28365: ARRAY
28366: PPUSH
28367: LD_EXP 132
28371: PUSH
28372: LD_VAR 0 6
28376: ARRAY
28377: PUSH
28378: LD_VAR 0 5
28382: ARRAY
28383: PUSH
28384: LD_INT 2
28386: ARRAY
28387: PPUSH
28388: LD_VAR 0 1
28392: PPUSH
28393: CALL_OW 255
28397: PPUSH
28398: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28402: LD_ADDR_EXP 132
28406: PUSH
28407: LD_EXP 132
28411: PPUSH
28412: LD_VAR 0 6
28416: PPUSH
28417: LD_EXP 132
28421: PUSH
28422: LD_VAR 0 6
28426: ARRAY
28427: PPUSH
28428: LD_VAR 0 5
28432: PPUSH
28433: CALL_OW 3
28437: PPUSH
28438: CALL_OW 1
28442: ST_TO_ADDR
// exit ;
28443: POP
28444: POP
28445: GO 28638
// end ; end ;
28447: GO 28287
28449: POP
28450: POP
// for i := minerMinesList [ index ] downto 1 do
28451: LD_ADDR_VAR 0 5
28455: PUSH
28456: DOUBLE
28457: LD_EXP 132
28461: PUSH
28462: LD_VAR 0 6
28466: ARRAY
28467: INC
28468: ST_TO_ADDR
28469: LD_INT 1
28471: PUSH
28472: FOR_DOWNTO
28473: IFFALSE 28636
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28475: LD_EXP 132
28479: PUSH
28480: LD_VAR 0 6
28484: ARRAY
28485: PUSH
28486: LD_VAR 0 5
28490: ARRAY
28491: PUSH
28492: LD_INT 1
28494: ARRAY
28495: PPUSH
28496: LD_EXP 132
28500: PUSH
28501: LD_VAR 0 6
28505: ARRAY
28506: PUSH
28507: LD_VAR 0 5
28511: ARRAY
28512: PUSH
28513: LD_INT 2
28515: ARRAY
28516: PPUSH
28517: LD_VAR 0 2
28521: PPUSH
28522: LD_VAR 0 3
28526: PPUSH
28527: CALL_OW 298
28531: PUSH
28532: LD_INT 6
28534: LESS
28535: IFFALSE 28634
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28537: LD_EXP 132
28541: PUSH
28542: LD_VAR 0 6
28546: ARRAY
28547: PUSH
28548: LD_VAR 0 5
28552: ARRAY
28553: PUSH
28554: LD_INT 1
28556: ARRAY
28557: PPUSH
28558: LD_EXP 132
28562: PUSH
28563: LD_VAR 0 6
28567: ARRAY
28568: PUSH
28569: LD_VAR 0 5
28573: ARRAY
28574: PUSH
28575: LD_INT 2
28577: ARRAY
28578: PPUSH
28579: LD_VAR 0 1
28583: PPUSH
28584: CALL_OW 255
28588: PPUSH
28589: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28593: LD_ADDR_EXP 132
28597: PUSH
28598: LD_EXP 132
28602: PPUSH
28603: LD_VAR 0 6
28607: PPUSH
28608: LD_EXP 132
28612: PUSH
28613: LD_VAR 0 6
28617: ARRAY
28618: PPUSH
28619: LD_VAR 0 5
28623: PPUSH
28624: CALL_OW 3
28628: PPUSH
28629: CALL_OW 1
28633: ST_TO_ADDR
// end ; end ;
28634: GO 28472
28636: POP
28637: POP
// end ;
28638: LD_VAR 0 4
28642: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28643: LD_INT 0
28645: PPUSH
28646: PPUSH
28647: PPUSH
28648: PPUSH
28649: PPUSH
28650: PPUSH
28651: PPUSH
28652: PPUSH
28653: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28654: LD_VAR 0 1
28658: PPUSH
28659: CALL_OW 264
28663: PUSH
28664: LD_EXP 52
28668: EQUAL
28669: NOT
28670: PUSH
28671: LD_VAR 0 1
28675: PUSH
28676: LD_EXP 131
28680: IN
28681: NOT
28682: OR
28683: IFFALSE 28687
// exit ;
28685: GO 29009
// index := GetElementIndex ( minersList , unit ) ;
28687: LD_ADDR_VAR 0 6
28691: PUSH
28692: LD_EXP 131
28696: PPUSH
28697: LD_VAR 0 1
28701: PPUSH
28702: CALL 34205 0 2
28706: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28707: LD_ADDR_VAR 0 8
28711: PUSH
28712: LD_EXP 133
28716: PUSH
28717: LD_EXP 132
28721: PUSH
28722: LD_VAR 0 6
28726: ARRAY
28727: MINUS
28728: ST_TO_ADDR
// if not minesFreeAmount then
28729: LD_VAR 0 8
28733: NOT
28734: IFFALSE 28738
// exit ;
28736: GO 29009
// tmp := [ ] ;
28738: LD_ADDR_VAR 0 7
28742: PUSH
28743: EMPTY
28744: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28745: LD_ADDR_VAR 0 5
28749: PUSH
28750: DOUBLE
28751: LD_INT 1
28753: DEC
28754: ST_TO_ADDR
28755: LD_VAR 0 8
28759: PUSH
28760: FOR_TO
28761: IFFALSE 28956
// begin _d := rand ( 0 , 5 ) ;
28763: LD_ADDR_VAR 0 11
28767: PUSH
28768: LD_INT 0
28770: PPUSH
28771: LD_INT 5
28773: PPUSH
28774: CALL_OW 12
28778: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28779: LD_ADDR_VAR 0 12
28783: PUSH
28784: LD_INT 2
28786: PPUSH
28787: LD_INT 6
28789: PPUSH
28790: CALL_OW 12
28794: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28795: LD_ADDR_VAR 0 9
28799: PUSH
28800: LD_VAR 0 2
28804: PPUSH
28805: LD_VAR 0 11
28809: PPUSH
28810: LD_VAR 0 12
28814: PPUSH
28815: CALL_OW 272
28819: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28820: LD_ADDR_VAR 0 10
28824: PUSH
28825: LD_VAR 0 3
28829: PPUSH
28830: LD_VAR 0 11
28834: PPUSH
28835: LD_VAR 0 12
28839: PPUSH
28840: CALL_OW 273
28844: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28845: LD_VAR 0 9
28849: PPUSH
28850: LD_VAR 0 10
28854: PPUSH
28855: CALL_OW 488
28859: PUSH
28860: LD_VAR 0 9
28864: PUSH
28865: LD_VAR 0 10
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_VAR 0 7
28878: IN
28879: NOT
28880: AND
28881: PUSH
28882: LD_VAR 0 9
28886: PPUSH
28887: LD_VAR 0 10
28891: PPUSH
28892: CALL_OW 458
28896: NOT
28897: AND
28898: IFFALSE 28940
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28900: LD_ADDR_VAR 0 7
28904: PUSH
28905: LD_VAR 0 7
28909: PPUSH
28910: LD_VAR 0 7
28914: PUSH
28915: LD_INT 1
28917: PLUS
28918: PPUSH
28919: LD_VAR 0 9
28923: PUSH
28924: LD_VAR 0 10
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PPUSH
28933: CALL_OW 1
28937: ST_TO_ADDR
28938: GO 28954
// i := i - 1 ;
28940: LD_ADDR_VAR 0 5
28944: PUSH
28945: LD_VAR 0 5
28949: PUSH
28950: LD_INT 1
28952: MINUS
28953: ST_TO_ADDR
// end ;
28954: GO 28760
28956: POP
28957: POP
// for i in tmp do
28958: LD_ADDR_VAR 0 5
28962: PUSH
28963: LD_VAR 0 7
28967: PUSH
28968: FOR_IN
28969: IFFALSE 29007
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28971: LD_VAR 0 1
28975: PPUSH
28976: LD_VAR 0 5
28980: PUSH
28981: LD_INT 1
28983: ARRAY
28984: PPUSH
28985: LD_VAR 0 5
28989: PUSH
28990: LD_INT 2
28992: ARRAY
28993: PPUSH
28994: CALL 27949 0 3
28998: NOT
28999: IFFALSE 29005
// exit ;
29001: POP
29002: POP
29003: GO 29009
29005: GO 28968
29007: POP
29008: POP
// end ;
29009: LD_VAR 0 4
29013: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29014: LD_INT 0
29016: PPUSH
29017: PPUSH
29018: PPUSH
29019: PPUSH
29020: PPUSH
29021: PPUSH
29022: PPUSH
// if not GetClass ( unit ) = class_sniper then
29023: LD_VAR 0 1
29027: PPUSH
29028: CALL_OW 257
29032: PUSH
29033: LD_INT 5
29035: EQUAL
29036: NOT
29037: IFFALSE 29041
// exit ;
29039: GO 29429
// dist := 8 ;
29041: LD_ADDR_VAR 0 5
29045: PUSH
29046: LD_INT 8
29048: ST_TO_ADDR
// viewRange := 12 ;
29049: LD_ADDR_VAR 0 7
29053: PUSH
29054: LD_INT 12
29056: ST_TO_ADDR
// side := GetSide ( unit ) ;
29057: LD_ADDR_VAR 0 6
29061: PUSH
29062: LD_VAR 0 1
29066: PPUSH
29067: CALL_OW 255
29071: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29072: LD_INT 61
29074: PPUSH
29075: LD_VAR 0 6
29079: PPUSH
29080: CALL_OW 321
29084: PUSH
29085: LD_INT 2
29087: EQUAL
29088: IFFALSE 29098
// viewRange := 16 ;
29090: LD_ADDR_VAR 0 7
29094: PUSH
29095: LD_INT 16
29097: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29098: LD_VAR 0 1
29102: PPUSH
29103: LD_VAR 0 2
29107: PPUSH
29108: LD_VAR 0 3
29112: PPUSH
29113: CALL_OW 297
29117: PUSH
29118: LD_VAR 0 5
29122: GREATER
29123: IFFALSE 29202
// begin ComMoveXY ( unit , x , y ) ;
29125: LD_VAR 0 1
29129: PPUSH
29130: LD_VAR 0 2
29134: PPUSH
29135: LD_VAR 0 3
29139: PPUSH
29140: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29144: LD_INT 35
29146: PPUSH
29147: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29151: LD_VAR 0 1
29155: PPUSH
29156: LD_VAR 0 2
29160: PPUSH
29161: LD_VAR 0 3
29165: PPUSH
29166: CALL 64924 0 3
29170: NOT
29171: IFFALSE 29175
// exit ;
29173: GO 29429
// until GetDistUnitXY ( unit , x , y ) < dist ;
29175: LD_VAR 0 1
29179: PPUSH
29180: LD_VAR 0 2
29184: PPUSH
29185: LD_VAR 0 3
29189: PPUSH
29190: CALL_OW 297
29194: PUSH
29195: LD_VAR 0 5
29199: LESS
29200: IFFALSE 29144
// end ; ComTurnXY ( unit , x , y ) ;
29202: LD_VAR 0 1
29206: PPUSH
29207: LD_VAR 0 2
29211: PPUSH
29212: LD_VAR 0 3
29216: PPUSH
29217: CALL_OW 118
// wait ( 5 ) ;
29221: LD_INT 5
29223: PPUSH
29224: CALL_OW 67
// _d := GetDir ( unit ) ;
29228: LD_ADDR_VAR 0 10
29232: PUSH
29233: LD_VAR 0 1
29237: PPUSH
29238: CALL_OW 254
29242: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29243: LD_ADDR_VAR 0 8
29247: PUSH
29248: LD_VAR 0 1
29252: PPUSH
29253: CALL_OW 250
29257: PPUSH
29258: LD_VAR 0 10
29262: PPUSH
29263: LD_VAR 0 5
29267: PPUSH
29268: CALL_OW 272
29272: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29273: LD_ADDR_VAR 0 9
29277: PUSH
29278: LD_VAR 0 1
29282: PPUSH
29283: CALL_OW 251
29287: PPUSH
29288: LD_VAR 0 10
29292: PPUSH
29293: LD_VAR 0 5
29297: PPUSH
29298: CALL_OW 273
29302: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29303: LD_VAR 0 8
29307: PPUSH
29308: LD_VAR 0 9
29312: PPUSH
29313: CALL_OW 488
29317: NOT
29318: IFFALSE 29322
// exit ;
29320: GO 29429
// ComAnimCustom ( unit , 1 ) ;
29322: LD_VAR 0 1
29326: PPUSH
29327: LD_INT 1
29329: PPUSH
29330: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29334: LD_VAR 0 8
29338: PPUSH
29339: LD_VAR 0 9
29343: PPUSH
29344: LD_VAR 0 6
29348: PPUSH
29349: LD_VAR 0 7
29353: PPUSH
29354: CALL_OW 330
// repeat wait ( 1 ) ;
29358: LD_INT 1
29360: PPUSH
29361: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29365: LD_VAR 0 1
29369: PPUSH
29370: CALL_OW 316
29374: PUSH
29375: LD_VAR 0 1
29379: PPUSH
29380: CALL_OW 314
29384: OR
29385: PUSH
29386: LD_VAR 0 1
29390: PPUSH
29391: CALL_OW 302
29395: NOT
29396: OR
29397: PUSH
29398: LD_VAR 0 1
29402: PPUSH
29403: CALL_OW 301
29407: OR
29408: IFFALSE 29358
// RemoveSeeing ( _x , _y , side ) ;
29410: LD_VAR 0 8
29414: PPUSH
29415: LD_VAR 0 9
29419: PPUSH
29420: LD_VAR 0 6
29424: PPUSH
29425: CALL_OW 331
// end ; end_of_file
29429: LD_VAR 0 4
29433: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29434: LD_INT 0
29436: PPUSH
29437: PPUSH
// if exist_mode then
29438: LD_VAR 0 2
29442: IFFALSE 29467
// unit := CreateCharacter ( prefix & ident ) else
29444: LD_ADDR_VAR 0 5
29448: PUSH
29449: LD_VAR 0 3
29453: PUSH
29454: LD_VAR 0 1
29458: STR
29459: PPUSH
29460: CALL_OW 34
29464: ST_TO_ADDR
29465: GO 29482
// unit := NewCharacter ( ident ) ;
29467: LD_ADDR_VAR 0 5
29471: PUSH
29472: LD_VAR 0 1
29476: PPUSH
29477: CALL_OW 25
29481: ST_TO_ADDR
// result := unit ;
29482: LD_ADDR_VAR 0 4
29486: PUSH
29487: LD_VAR 0 5
29491: ST_TO_ADDR
// end ;
29492: LD_VAR 0 4
29496: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29497: LD_INT 0
29499: PPUSH
29500: PPUSH
// if not side or not nation then
29501: LD_VAR 0 1
29505: NOT
29506: PUSH
29507: LD_VAR 0 2
29511: NOT
29512: OR
29513: IFFALSE 29517
// exit ;
29515: GO 30285
// case nation of nation_american :
29517: LD_VAR 0 2
29521: PUSH
29522: LD_INT 1
29524: DOUBLE
29525: EQUAL
29526: IFTRUE 29530
29528: GO 29744
29530: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29531: LD_ADDR_VAR 0 4
29535: PUSH
29536: LD_INT 35
29538: PUSH
29539: LD_INT 45
29541: PUSH
29542: LD_INT 46
29544: PUSH
29545: LD_INT 47
29547: PUSH
29548: LD_INT 82
29550: PUSH
29551: LD_INT 83
29553: PUSH
29554: LD_INT 84
29556: PUSH
29557: LD_INT 85
29559: PUSH
29560: LD_INT 86
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: LD_INT 2
29568: PUSH
29569: LD_INT 6
29571: PUSH
29572: LD_INT 15
29574: PUSH
29575: LD_INT 16
29577: PUSH
29578: LD_INT 7
29580: PUSH
29581: LD_INT 12
29583: PUSH
29584: LD_INT 13
29586: PUSH
29587: LD_INT 10
29589: PUSH
29590: LD_INT 14
29592: PUSH
29593: LD_INT 20
29595: PUSH
29596: LD_INT 21
29598: PUSH
29599: LD_INT 22
29601: PUSH
29602: LD_INT 25
29604: PUSH
29605: LD_INT 32
29607: PUSH
29608: LD_INT 27
29610: PUSH
29611: LD_INT 36
29613: PUSH
29614: LD_INT 69
29616: PUSH
29617: LD_INT 39
29619: PUSH
29620: LD_INT 34
29622: PUSH
29623: LD_INT 40
29625: PUSH
29626: LD_INT 48
29628: PUSH
29629: LD_INT 49
29631: PUSH
29632: LD_INT 50
29634: PUSH
29635: LD_INT 51
29637: PUSH
29638: LD_INT 52
29640: PUSH
29641: LD_INT 53
29643: PUSH
29644: LD_INT 54
29646: PUSH
29647: LD_INT 55
29649: PUSH
29650: LD_INT 56
29652: PUSH
29653: LD_INT 57
29655: PUSH
29656: LD_INT 58
29658: PUSH
29659: LD_INT 59
29661: PUSH
29662: LD_INT 60
29664: PUSH
29665: LD_INT 61
29667: PUSH
29668: LD_INT 62
29670: PUSH
29671: LD_INT 80
29673: PUSH
29674: LD_INT 82
29676: PUSH
29677: LD_INT 83
29679: PUSH
29680: LD_INT 84
29682: PUSH
29683: LD_INT 85
29685: PUSH
29686: LD_INT 86
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: ST_TO_ADDR
29742: GO 30209
29744: LD_INT 2
29746: DOUBLE
29747: EQUAL
29748: IFTRUE 29752
29750: GO 29978
29752: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29753: LD_ADDR_VAR 0 4
29757: PUSH
29758: LD_INT 35
29760: PUSH
29761: LD_INT 45
29763: PUSH
29764: LD_INT 46
29766: PUSH
29767: LD_INT 47
29769: PUSH
29770: LD_INT 82
29772: PUSH
29773: LD_INT 83
29775: PUSH
29776: LD_INT 84
29778: PUSH
29779: LD_INT 85
29781: PUSH
29782: LD_INT 87
29784: PUSH
29785: LD_INT 70
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: LD_INT 11
29793: PUSH
29794: LD_INT 3
29796: PUSH
29797: LD_INT 4
29799: PUSH
29800: LD_INT 5
29802: PUSH
29803: LD_INT 6
29805: PUSH
29806: LD_INT 15
29808: PUSH
29809: LD_INT 18
29811: PUSH
29812: LD_INT 7
29814: PUSH
29815: LD_INT 17
29817: PUSH
29818: LD_INT 8
29820: PUSH
29821: LD_INT 20
29823: PUSH
29824: LD_INT 21
29826: PUSH
29827: LD_INT 22
29829: PUSH
29830: LD_INT 72
29832: PUSH
29833: LD_INT 26
29835: PUSH
29836: LD_INT 69
29838: PUSH
29839: LD_INT 39
29841: PUSH
29842: LD_INT 40
29844: PUSH
29845: LD_INT 41
29847: PUSH
29848: LD_INT 42
29850: PUSH
29851: LD_INT 43
29853: PUSH
29854: LD_INT 48
29856: PUSH
29857: LD_INT 49
29859: PUSH
29860: LD_INT 50
29862: PUSH
29863: LD_INT 51
29865: PUSH
29866: LD_INT 52
29868: PUSH
29869: LD_INT 53
29871: PUSH
29872: LD_INT 54
29874: PUSH
29875: LD_INT 55
29877: PUSH
29878: LD_INT 56
29880: PUSH
29881: LD_INT 60
29883: PUSH
29884: LD_INT 61
29886: PUSH
29887: LD_INT 62
29889: PUSH
29890: LD_INT 66
29892: PUSH
29893: LD_INT 67
29895: PUSH
29896: LD_INT 68
29898: PUSH
29899: LD_INT 81
29901: PUSH
29902: LD_INT 82
29904: PUSH
29905: LD_INT 83
29907: PUSH
29908: LD_INT 84
29910: PUSH
29911: LD_INT 85
29913: PUSH
29914: LD_INT 87
29916: PUSH
29917: LD_INT 88
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: ST_TO_ADDR
29976: GO 30209
29978: LD_INT 3
29980: DOUBLE
29981: EQUAL
29982: IFTRUE 29986
29984: GO 30208
29986: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29987: LD_ADDR_VAR 0 4
29991: PUSH
29992: LD_INT 46
29994: PUSH
29995: LD_INT 47
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: LD_INT 2
30003: PUSH
30004: LD_INT 82
30006: PUSH
30007: LD_INT 83
30009: PUSH
30010: LD_INT 84
30012: PUSH
30013: LD_INT 85
30015: PUSH
30016: LD_INT 86
30018: PUSH
30019: LD_INT 11
30021: PUSH
30022: LD_INT 9
30024: PUSH
30025: LD_INT 20
30027: PUSH
30028: LD_INT 19
30030: PUSH
30031: LD_INT 21
30033: PUSH
30034: LD_INT 24
30036: PUSH
30037: LD_INT 22
30039: PUSH
30040: LD_INT 25
30042: PUSH
30043: LD_INT 28
30045: PUSH
30046: LD_INT 29
30048: PUSH
30049: LD_INT 30
30051: PUSH
30052: LD_INT 31
30054: PUSH
30055: LD_INT 37
30057: PUSH
30058: LD_INT 38
30060: PUSH
30061: LD_INT 32
30063: PUSH
30064: LD_INT 27
30066: PUSH
30067: LD_INT 33
30069: PUSH
30070: LD_INT 69
30072: PUSH
30073: LD_INT 39
30075: PUSH
30076: LD_INT 34
30078: PUSH
30079: LD_INT 40
30081: PUSH
30082: LD_INT 71
30084: PUSH
30085: LD_INT 23
30087: PUSH
30088: LD_INT 44
30090: PUSH
30091: LD_INT 48
30093: PUSH
30094: LD_INT 49
30096: PUSH
30097: LD_INT 50
30099: PUSH
30100: LD_INT 51
30102: PUSH
30103: LD_INT 52
30105: PUSH
30106: LD_INT 53
30108: PUSH
30109: LD_INT 54
30111: PUSH
30112: LD_INT 55
30114: PUSH
30115: LD_INT 56
30117: PUSH
30118: LD_INT 57
30120: PUSH
30121: LD_INT 58
30123: PUSH
30124: LD_INT 59
30126: PUSH
30127: LD_INT 63
30129: PUSH
30130: LD_INT 64
30132: PUSH
30133: LD_INT 65
30135: PUSH
30136: LD_INT 82
30138: PUSH
30139: LD_INT 83
30141: PUSH
30142: LD_INT 84
30144: PUSH
30145: LD_INT 85
30147: PUSH
30148: LD_INT 86
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: ST_TO_ADDR
30206: GO 30209
30208: POP
// if state > - 1 and state < 3 then
30209: LD_VAR 0 3
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: GREATER
30218: PUSH
30219: LD_VAR 0 3
30223: PUSH
30224: LD_INT 3
30226: LESS
30227: AND
30228: IFFALSE 30285
// for i in result do
30230: LD_ADDR_VAR 0 5
30234: PUSH
30235: LD_VAR 0 4
30239: PUSH
30240: FOR_IN
30241: IFFALSE 30283
// if GetTech ( i , side ) <> state then
30243: LD_VAR 0 5
30247: PPUSH
30248: LD_VAR 0 1
30252: PPUSH
30253: CALL_OW 321
30257: PUSH
30258: LD_VAR 0 3
30262: NONEQUAL
30263: IFFALSE 30281
// result := result diff i ;
30265: LD_ADDR_VAR 0 4
30269: PUSH
30270: LD_VAR 0 4
30274: PUSH
30275: LD_VAR 0 5
30279: DIFF
30280: ST_TO_ADDR
30281: GO 30240
30283: POP
30284: POP
// end ;
30285: LD_VAR 0 4
30289: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30290: LD_INT 0
30292: PPUSH
30293: PPUSH
30294: PPUSH
// result := true ;
30295: LD_ADDR_VAR 0 3
30299: PUSH
30300: LD_INT 1
30302: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30303: LD_ADDR_VAR 0 5
30307: PUSH
30308: LD_VAR 0 2
30312: PPUSH
30313: CALL_OW 480
30317: ST_TO_ADDR
// if not tmp then
30318: LD_VAR 0 5
30322: NOT
30323: IFFALSE 30327
// exit ;
30325: GO 30376
// for i in tmp do
30327: LD_ADDR_VAR 0 4
30331: PUSH
30332: LD_VAR 0 5
30336: PUSH
30337: FOR_IN
30338: IFFALSE 30374
// if GetTech ( i , side ) <> state_researched then
30340: LD_VAR 0 4
30344: PPUSH
30345: LD_VAR 0 1
30349: PPUSH
30350: CALL_OW 321
30354: PUSH
30355: LD_INT 2
30357: NONEQUAL
30358: IFFALSE 30372
// begin result := false ;
30360: LD_ADDR_VAR 0 3
30364: PUSH
30365: LD_INT 0
30367: ST_TO_ADDR
// exit ;
30368: POP
30369: POP
30370: GO 30376
// end ;
30372: GO 30337
30374: POP
30375: POP
// end ;
30376: LD_VAR 0 3
30380: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30381: LD_INT 0
30383: PPUSH
30384: PPUSH
30385: PPUSH
30386: PPUSH
30387: PPUSH
30388: PPUSH
30389: PPUSH
30390: PPUSH
30391: PPUSH
30392: PPUSH
30393: PPUSH
30394: PPUSH
30395: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30396: LD_VAR 0 1
30400: NOT
30401: PUSH
30402: LD_VAR 0 1
30406: PPUSH
30407: CALL_OW 257
30411: PUSH
30412: LD_INT 9
30414: NONEQUAL
30415: OR
30416: IFFALSE 30420
// exit ;
30418: GO 30993
// side := GetSide ( unit ) ;
30420: LD_ADDR_VAR 0 9
30424: PUSH
30425: LD_VAR 0 1
30429: PPUSH
30430: CALL_OW 255
30434: ST_TO_ADDR
// tech_space := tech_spacanom ;
30435: LD_ADDR_VAR 0 12
30439: PUSH
30440: LD_INT 29
30442: ST_TO_ADDR
// tech_time := tech_taurad ;
30443: LD_ADDR_VAR 0 13
30447: PUSH
30448: LD_INT 28
30450: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30451: LD_ADDR_VAR 0 11
30455: PUSH
30456: LD_VAR 0 1
30460: PPUSH
30461: CALL_OW 310
30465: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30466: LD_VAR 0 11
30470: PPUSH
30471: CALL_OW 247
30475: PUSH
30476: LD_INT 2
30478: EQUAL
30479: IFFALSE 30483
// exit ;
30481: GO 30993
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30483: LD_ADDR_VAR 0 8
30487: PUSH
30488: LD_INT 81
30490: PUSH
30491: LD_VAR 0 9
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 3
30502: PUSH
30503: LD_INT 21
30505: PUSH
30506: LD_INT 3
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PPUSH
30521: CALL_OW 69
30525: ST_TO_ADDR
// if not tmp then
30526: LD_VAR 0 8
30530: NOT
30531: IFFALSE 30535
// exit ;
30533: GO 30993
// if in_unit then
30535: LD_VAR 0 11
30539: IFFALSE 30563
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30541: LD_ADDR_VAR 0 10
30545: PUSH
30546: LD_VAR 0 8
30550: PPUSH
30551: LD_VAR 0 11
30555: PPUSH
30556: CALL_OW 74
30560: ST_TO_ADDR
30561: GO 30583
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30563: LD_ADDR_VAR 0 10
30567: PUSH
30568: LD_VAR 0 8
30572: PPUSH
30573: LD_VAR 0 1
30577: PPUSH
30578: CALL_OW 74
30582: ST_TO_ADDR
// if not enemy then
30583: LD_VAR 0 10
30587: NOT
30588: IFFALSE 30592
// exit ;
30590: GO 30993
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30592: LD_VAR 0 11
30596: PUSH
30597: LD_VAR 0 11
30601: PPUSH
30602: LD_VAR 0 10
30606: PPUSH
30607: CALL_OW 296
30611: PUSH
30612: LD_INT 13
30614: GREATER
30615: AND
30616: PUSH
30617: LD_VAR 0 1
30621: PPUSH
30622: LD_VAR 0 10
30626: PPUSH
30627: CALL_OW 296
30631: PUSH
30632: LD_INT 12
30634: GREATER
30635: OR
30636: IFFALSE 30640
// exit ;
30638: GO 30993
// missile := [ 1 ] ;
30640: LD_ADDR_VAR 0 14
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: EMPTY
30649: LIST
30650: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30651: LD_VAR 0 9
30655: PPUSH
30656: LD_VAR 0 12
30660: PPUSH
30661: CALL_OW 325
30665: IFFALSE 30694
// missile := Replace ( missile , missile + 1 , 2 ) ;
30667: LD_ADDR_VAR 0 14
30671: PUSH
30672: LD_VAR 0 14
30676: PPUSH
30677: LD_VAR 0 14
30681: PUSH
30682: LD_INT 1
30684: PLUS
30685: PPUSH
30686: LD_INT 2
30688: PPUSH
30689: CALL_OW 1
30693: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30694: LD_VAR 0 9
30698: PPUSH
30699: LD_VAR 0 13
30703: PPUSH
30704: CALL_OW 325
30708: PUSH
30709: LD_VAR 0 10
30713: PPUSH
30714: CALL_OW 255
30718: PPUSH
30719: LD_VAR 0 13
30723: PPUSH
30724: CALL_OW 325
30728: NOT
30729: AND
30730: IFFALSE 30759
// missile := Replace ( missile , missile + 1 , 3 ) ;
30732: LD_ADDR_VAR 0 14
30736: PUSH
30737: LD_VAR 0 14
30741: PPUSH
30742: LD_VAR 0 14
30746: PUSH
30747: LD_INT 1
30749: PLUS
30750: PPUSH
30751: LD_INT 3
30753: PPUSH
30754: CALL_OW 1
30758: ST_TO_ADDR
// if missile < 2 then
30759: LD_VAR 0 14
30763: PUSH
30764: LD_INT 2
30766: LESS
30767: IFFALSE 30771
// exit ;
30769: GO 30993
// x := GetX ( enemy ) ;
30771: LD_ADDR_VAR 0 4
30775: PUSH
30776: LD_VAR 0 10
30780: PPUSH
30781: CALL_OW 250
30785: ST_TO_ADDR
// y := GetY ( enemy ) ;
30786: LD_ADDR_VAR 0 5
30790: PUSH
30791: LD_VAR 0 10
30795: PPUSH
30796: CALL_OW 251
30800: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30801: LD_ADDR_VAR 0 6
30805: PUSH
30806: LD_VAR 0 4
30810: PUSH
30811: LD_INT 1
30813: NEG
30814: PPUSH
30815: LD_INT 1
30817: PPUSH
30818: CALL_OW 12
30822: PLUS
30823: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30824: LD_ADDR_VAR 0 7
30828: PUSH
30829: LD_VAR 0 5
30833: PUSH
30834: LD_INT 1
30836: NEG
30837: PPUSH
30838: LD_INT 1
30840: PPUSH
30841: CALL_OW 12
30845: PLUS
30846: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30847: LD_VAR 0 6
30851: PPUSH
30852: LD_VAR 0 7
30856: PPUSH
30857: CALL_OW 488
30861: NOT
30862: IFFALSE 30884
// begin _x := x ;
30864: LD_ADDR_VAR 0 6
30868: PUSH
30869: LD_VAR 0 4
30873: ST_TO_ADDR
// _y := y ;
30874: LD_ADDR_VAR 0 7
30878: PUSH
30879: LD_VAR 0 5
30883: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30884: LD_ADDR_VAR 0 3
30888: PUSH
30889: LD_INT 1
30891: PPUSH
30892: LD_VAR 0 14
30896: PPUSH
30897: CALL_OW 12
30901: ST_TO_ADDR
// case i of 1 :
30902: LD_VAR 0 3
30906: PUSH
30907: LD_INT 1
30909: DOUBLE
30910: EQUAL
30911: IFTRUE 30915
30913: GO 30932
30915: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30916: LD_VAR 0 1
30920: PPUSH
30921: LD_VAR 0 10
30925: PPUSH
30926: CALL_OW 115
30930: GO 30993
30932: LD_INT 2
30934: DOUBLE
30935: EQUAL
30936: IFTRUE 30940
30938: GO 30962
30940: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30941: LD_VAR 0 1
30945: PPUSH
30946: LD_VAR 0 6
30950: PPUSH
30951: LD_VAR 0 7
30955: PPUSH
30956: CALL_OW 153
30960: GO 30993
30962: LD_INT 3
30964: DOUBLE
30965: EQUAL
30966: IFTRUE 30970
30968: GO 30992
30970: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30971: LD_VAR 0 1
30975: PPUSH
30976: LD_VAR 0 6
30980: PPUSH
30981: LD_VAR 0 7
30985: PPUSH
30986: CALL_OW 154
30990: GO 30993
30992: POP
// end ;
30993: LD_VAR 0 2
30997: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30998: LD_INT 0
31000: PPUSH
31001: PPUSH
31002: PPUSH
31003: PPUSH
31004: PPUSH
31005: PPUSH
// if not unit or not building then
31006: LD_VAR 0 1
31010: NOT
31011: PUSH
31012: LD_VAR 0 2
31016: NOT
31017: OR
31018: IFFALSE 31022
// exit ;
31020: GO 31180
// x := GetX ( building ) ;
31022: LD_ADDR_VAR 0 5
31026: PUSH
31027: LD_VAR 0 2
31031: PPUSH
31032: CALL_OW 250
31036: ST_TO_ADDR
// y := GetY ( building ) ;
31037: LD_ADDR_VAR 0 6
31041: PUSH
31042: LD_VAR 0 2
31046: PPUSH
31047: CALL_OW 251
31051: ST_TO_ADDR
// for i = 0 to 5 do
31052: LD_ADDR_VAR 0 4
31056: PUSH
31057: DOUBLE
31058: LD_INT 0
31060: DEC
31061: ST_TO_ADDR
31062: LD_INT 5
31064: PUSH
31065: FOR_TO
31066: IFFALSE 31178
// begin _x := ShiftX ( x , i , 3 ) ;
31068: LD_ADDR_VAR 0 7
31072: PUSH
31073: LD_VAR 0 5
31077: PPUSH
31078: LD_VAR 0 4
31082: PPUSH
31083: LD_INT 3
31085: PPUSH
31086: CALL_OW 272
31090: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31091: LD_ADDR_VAR 0 8
31095: PUSH
31096: LD_VAR 0 6
31100: PPUSH
31101: LD_VAR 0 4
31105: PPUSH
31106: LD_INT 3
31108: PPUSH
31109: CALL_OW 273
31113: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31114: LD_VAR 0 7
31118: PPUSH
31119: LD_VAR 0 8
31123: PPUSH
31124: CALL_OW 488
31128: NOT
31129: IFFALSE 31133
// continue ;
31131: GO 31065
// if HexInfo ( _x , _y ) = 0 then
31133: LD_VAR 0 7
31137: PPUSH
31138: LD_VAR 0 8
31142: PPUSH
31143: CALL_OW 428
31147: PUSH
31148: LD_INT 0
31150: EQUAL
31151: IFFALSE 31176
// begin ComMoveXY ( unit , _x , _y ) ;
31153: LD_VAR 0 1
31157: PPUSH
31158: LD_VAR 0 7
31162: PPUSH
31163: LD_VAR 0 8
31167: PPUSH
31168: CALL_OW 111
// exit ;
31172: POP
31173: POP
31174: GO 31180
// end ; end ;
31176: GO 31065
31178: POP
31179: POP
// end ;
31180: LD_VAR 0 3
31184: RET
// export function ScanBase ( side , base_area ) ; begin
31185: LD_INT 0
31187: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31188: LD_ADDR_VAR 0 3
31192: PUSH
31193: LD_VAR 0 2
31197: PPUSH
31198: LD_INT 81
31200: PUSH
31201: LD_VAR 0 1
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PPUSH
31210: CALL_OW 70
31214: ST_TO_ADDR
// end ;
31215: LD_VAR 0 3
31219: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31220: LD_INT 0
31222: PPUSH
31223: PPUSH
31224: PPUSH
31225: PPUSH
// result := false ;
31226: LD_ADDR_VAR 0 2
31230: PUSH
31231: LD_INT 0
31233: ST_TO_ADDR
// side := GetSide ( unit ) ;
31234: LD_ADDR_VAR 0 3
31238: PUSH
31239: LD_VAR 0 1
31243: PPUSH
31244: CALL_OW 255
31248: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31249: LD_ADDR_VAR 0 4
31253: PUSH
31254: LD_VAR 0 1
31258: PPUSH
31259: CALL_OW 248
31263: ST_TO_ADDR
// case nat of 1 :
31264: LD_VAR 0 4
31268: PUSH
31269: LD_INT 1
31271: DOUBLE
31272: EQUAL
31273: IFTRUE 31277
31275: GO 31288
31277: POP
// tech := tech_lassight ; 2 :
31278: LD_ADDR_VAR 0 5
31282: PUSH
31283: LD_INT 12
31285: ST_TO_ADDR
31286: GO 31327
31288: LD_INT 2
31290: DOUBLE
31291: EQUAL
31292: IFTRUE 31296
31294: GO 31307
31296: POP
// tech := tech_mortar ; 3 :
31297: LD_ADDR_VAR 0 5
31301: PUSH
31302: LD_INT 41
31304: ST_TO_ADDR
31305: GO 31327
31307: LD_INT 3
31309: DOUBLE
31310: EQUAL
31311: IFTRUE 31315
31313: GO 31326
31315: POP
// tech := tech_bazooka ; end ;
31316: LD_ADDR_VAR 0 5
31320: PUSH
31321: LD_INT 44
31323: ST_TO_ADDR
31324: GO 31327
31326: POP
// if Researched ( side , tech ) then
31327: LD_VAR 0 3
31331: PPUSH
31332: LD_VAR 0 5
31336: PPUSH
31337: CALL_OW 325
31341: IFFALSE 31368
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31343: LD_ADDR_VAR 0 2
31347: PUSH
31348: LD_INT 5
31350: PUSH
31351: LD_INT 8
31353: PUSH
31354: LD_INT 9
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: LIST
31361: PUSH
31362: LD_VAR 0 4
31366: ARRAY
31367: ST_TO_ADDR
// end ;
31368: LD_VAR 0 2
31372: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31373: LD_INT 0
31375: PPUSH
31376: PPUSH
31377: PPUSH
// if not mines then
31378: LD_VAR 0 2
31382: NOT
31383: IFFALSE 31387
// exit ;
31385: GO 31531
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31387: LD_ADDR_VAR 0 5
31391: PUSH
31392: LD_INT 81
31394: PUSH
31395: LD_VAR 0 1
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 3
31406: PUSH
31407: LD_INT 21
31409: PUSH
31410: LD_INT 3
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PPUSH
31425: CALL_OW 69
31429: ST_TO_ADDR
// for i in mines do
31430: LD_ADDR_VAR 0 4
31434: PUSH
31435: LD_VAR 0 2
31439: PUSH
31440: FOR_IN
31441: IFFALSE 31529
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31443: LD_VAR 0 4
31447: PUSH
31448: LD_INT 1
31450: ARRAY
31451: PPUSH
31452: LD_VAR 0 4
31456: PUSH
31457: LD_INT 2
31459: ARRAY
31460: PPUSH
31461: CALL_OW 458
31465: NOT
31466: IFFALSE 31470
// continue ;
31468: GO 31440
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31470: LD_VAR 0 4
31474: PUSH
31475: LD_INT 1
31477: ARRAY
31478: PPUSH
31479: LD_VAR 0 4
31483: PUSH
31484: LD_INT 2
31486: ARRAY
31487: PPUSH
31488: CALL_OW 428
31492: PUSH
31493: LD_VAR 0 5
31497: IN
31498: IFFALSE 31527
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31500: LD_VAR 0 4
31504: PUSH
31505: LD_INT 1
31507: ARRAY
31508: PPUSH
31509: LD_VAR 0 4
31513: PUSH
31514: LD_INT 2
31516: ARRAY
31517: PPUSH
31518: LD_VAR 0 1
31522: PPUSH
31523: CALL_OW 456
// end ;
31527: GO 31440
31529: POP
31530: POP
// end ;
31531: LD_VAR 0 3
31535: RET
// export function Count ( array ) ; var i ; begin
31536: LD_INT 0
31538: PPUSH
31539: PPUSH
// result := 0 ;
31540: LD_ADDR_VAR 0 2
31544: PUSH
31545: LD_INT 0
31547: ST_TO_ADDR
// for i in array do
31548: LD_ADDR_VAR 0 3
31552: PUSH
31553: LD_VAR 0 1
31557: PUSH
31558: FOR_IN
31559: IFFALSE 31583
// if i then
31561: LD_VAR 0 3
31565: IFFALSE 31581
// result := result + 1 ;
31567: LD_ADDR_VAR 0 2
31571: PUSH
31572: LD_VAR 0 2
31576: PUSH
31577: LD_INT 1
31579: PLUS
31580: ST_TO_ADDR
31581: GO 31558
31583: POP
31584: POP
// end ;
31585: LD_VAR 0 2
31589: RET
// export function IsEmpty ( building ) ; begin
31590: LD_INT 0
31592: PPUSH
// if not building then
31593: LD_VAR 0 1
31597: NOT
31598: IFFALSE 31602
// exit ;
31600: GO 31645
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31602: LD_ADDR_VAR 0 2
31606: PUSH
31607: LD_VAR 0 1
31611: PUSH
31612: LD_INT 22
31614: PUSH
31615: LD_VAR 0 1
31619: PPUSH
31620: CALL_OW 255
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 58
31631: PUSH
31632: EMPTY
31633: LIST
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PPUSH
31639: CALL_OW 69
31643: IN
31644: ST_TO_ADDR
// end ;
31645: LD_VAR 0 2
31649: RET
// export function IsNotFull ( building ) ; begin
31650: LD_INT 0
31652: PPUSH
// if not building then
31653: LD_VAR 0 1
31657: NOT
31658: IFFALSE 31662
// exit ;
31660: GO 31681
// result := UnitsInside ( building ) < 6 ;
31662: LD_ADDR_VAR 0 2
31666: PUSH
31667: LD_VAR 0 1
31671: PPUSH
31672: CALL_OW 313
31676: PUSH
31677: LD_INT 6
31679: LESS
31680: ST_TO_ADDR
// end ;
31681: LD_VAR 0 2
31685: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31686: LD_INT 0
31688: PPUSH
31689: PPUSH
31690: PPUSH
31691: PPUSH
// tmp := [ ] ;
31692: LD_ADDR_VAR 0 3
31696: PUSH
31697: EMPTY
31698: ST_TO_ADDR
// list := [ ] ;
31699: LD_ADDR_VAR 0 5
31703: PUSH
31704: EMPTY
31705: ST_TO_ADDR
// for i = 16 to 25 do
31706: LD_ADDR_VAR 0 4
31710: PUSH
31711: DOUBLE
31712: LD_INT 16
31714: DEC
31715: ST_TO_ADDR
31716: LD_INT 25
31718: PUSH
31719: FOR_TO
31720: IFFALSE 31793
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31722: LD_ADDR_VAR 0 3
31726: PUSH
31727: LD_VAR 0 3
31731: PUSH
31732: LD_INT 22
31734: PUSH
31735: LD_VAR 0 1
31739: PPUSH
31740: CALL_OW 255
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 91
31751: PUSH
31752: LD_VAR 0 1
31756: PUSH
31757: LD_INT 6
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 30
31767: PUSH
31768: LD_VAR 0 4
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: PUSH
31782: EMPTY
31783: LIST
31784: PPUSH
31785: CALL_OW 69
31789: ADD
31790: ST_TO_ADDR
31791: GO 31719
31793: POP
31794: POP
// for i = 1 to tmp do
31795: LD_ADDR_VAR 0 4
31799: PUSH
31800: DOUBLE
31801: LD_INT 1
31803: DEC
31804: ST_TO_ADDR
31805: LD_VAR 0 3
31809: PUSH
31810: FOR_TO
31811: IFFALSE 31899
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31813: LD_ADDR_VAR 0 5
31817: PUSH
31818: LD_VAR 0 5
31822: PUSH
31823: LD_VAR 0 3
31827: PUSH
31828: LD_VAR 0 4
31832: ARRAY
31833: PPUSH
31834: CALL_OW 266
31838: PUSH
31839: LD_VAR 0 3
31843: PUSH
31844: LD_VAR 0 4
31848: ARRAY
31849: PPUSH
31850: CALL_OW 250
31854: PUSH
31855: LD_VAR 0 3
31859: PUSH
31860: LD_VAR 0 4
31864: ARRAY
31865: PPUSH
31866: CALL_OW 251
31870: PUSH
31871: LD_VAR 0 3
31875: PUSH
31876: LD_VAR 0 4
31880: ARRAY
31881: PPUSH
31882: CALL_OW 254
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: PUSH
31893: EMPTY
31894: LIST
31895: ADD
31896: ST_TO_ADDR
31897: GO 31810
31899: POP
31900: POP
// result := list ;
31901: LD_ADDR_VAR 0 2
31905: PUSH
31906: LD_VAR 0 5
31910: ST_TO_ADDR
// end ;
31911: LD_VAR 0 2
31915: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31916: LD_INT 0
31918: PPUSH
31919: PPUSH
31920: PPUSH
31921: PPUSH
31922: PPUSH
31923: PPUSH
31924: PPUSH
// if not factory then
31925: LD_VAR 0 1
31929: NOT
31930: IFFALSE 31934
// exit ;
31932: GO 32527
// if control = control_apeman then
31934: LD_VAR 0 4
31938: PUSH
31939: LD_INT 5
31941: EQUAL
31942: IFFALSE 32051
// begin tmp := UnitsInside ( factory ) ;
31944: LD_ADDR_VAR 0 8
31948: PUSH
31949: LD_VAR 0 1
31953: PPUSH
31954: CALL_OW 313
31958: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31959: LD_VAR 0 8
31963: PPUSH
31964: LD_INT 25
31966: PUSH
31967: LD_INT 12
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PPUSH
31974: CALL_OW 72
31978: NOT
31979: IFFALSE 31989
// control := control_manual ;
31981: LD_ADDR_VAR 0 4
31985: PUSH
31986: LD_INT 1
31988: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31989: LD_ADDR_VAR 0 8
31993: PUSH
31994: LD_VAR 0 1
31998: PPUSH
31999: CALL 31686 0 1
32003: ST_TO_ADDR
// if tmp then
32004: LD_VAR 0 8
32008: IFFALSE 32051
// begin for i in tmp do
32010: LD_ADDR_VAR 0 7
32014: PUSH
32015: LD_VAR 0 8
32019: PUSH
32020: FOR_IN
32021: IFFALSE 32049
// if i [ 1 ] = b_ext_radio then
32023: LD_VAR 0 7
32027: PUSH
32028: LD_INT 1
32030: ARRAY
32031: PUSH
32032: LD_INT 22
32034: EQUAL
32035: IFFALSE 32047
// begin control := control_remote ;
32037: LD_ADDR_VAR 0 4
32041: PUSH
32042: LD_INT 2
32044: ST_TO_ADDR
// break ;
32045: GO 32049
// end ;
32047: GO 32020
32049: POP
32050: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32051: LD_VAR 0 1
32055: PPUSH
32056: LD_VAR 0 2
32060: PPUSH
32061: LD_VAR 0 3
32065: PPUSH
32066: LD_VAR 0 4
32070: PPUSH
32071: LD_VAR 0 5
32075: PPUSH
32076: CALL_OW 448
32080: IFFALSE 32115
// begin result := [ chassis , engine , control , weapon ] ;
32082: LD_ADDR_VAR 0 6
32086: PUSH
32087: LD_VAR 0 2
32091: PUSH
32092: LD_VAR 0 3
32096: PUSH
32097: LD_VAR 0 4
32101: PUSH
32102: LD_VAR 0 5
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: ST_TO_ADDR
// exit ;
32113: GO 32527
// end ; _chassis := AvailableChassisList ( factory ) ;
32115: LD_ADDR_VAR 0 9
32119: PUSH
32120: LD_VAR 0 1
32124: PPUSH
32125: CALL_OW 475
32129: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32130: LD_ADDR_VAR 0 11
32134: PUSH
32135: LD_VAR 0 1
32139: PPUSH
32140: CALL_OW 476
32144: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32145: LD_ADDR_VAR 0 12
32149: PUSH
32150: LD_VAR 0 1
32154: PPUSH
32155: CALL_OW 477
32159: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32160: LD_ADDR_VAR 0 10
32164: PUSH
32165: LD_VAR 0 1
32169: PPUSH
32170: CALL_OW 478
32174: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32175: LD_VAR 0 9
32179: NOT
32180: PUSH
32181: LD_VAR 0 11
32185: NOT
32186: OR
32187: PUSH
32188: LD_VAR 0 12
32192: NOT
32193: OR
32194: PUSH
32195: LD_VAR 0 10
32199: NOT
32200: OR
32201: IFFALSE 32236
// begin result := [ chassis , engine , control , weapon ] ;
32203: LD_ADDR_VAR 0 6
32207: PUSH
32208: LD_VAR 0 2
32212: PUSH
32213: LD_VAR 0 3
32217: PUSH
32218: LD_VAR 0 4
32222: PUSH
32223: LD_VAR 0 5
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: ST_TO_ADDR
// exit ;
32234: GO 32527
// end ; if not chassis in _chassis then
32236: LD_VAR 0 2
32240: PUSH
32241: LD_VAR 0 9
32245: IN
32246: NOT
32247: IFFALSE 32273
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32249: LD_ADDR_VAR 0 2
32253: PUSH
32254: LD_VAR 0 9
32258: PUSH
32259: LD_INT 1
32261: PPUSH
32262: LD_VAR 0 9
32266: PPUSH
32267: CALL_OW 12
32271: ARRAY
32272: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32273: LD_VAR 0 2
32277: PPUSH
32278: LD_VAR 0 3
32282: PPUSH
32283: CALL 32532 0 2
32287: NOT
32288: IFFALSE 32347
// repeat engine := _engine [ 1 ] ;
32290: LD_ADDR_VAR 0 3
32294: PUSH
32295: LD_VAR 0 11
32299: PUSH
32300: LD_INT 1
32302: ARRAY
32303: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32304: LD_ADDR_VAR 0 11
32308: PUSH
32309: LD_VAR 0 11
32313: PPUSH
32314: LD_INT 1
32316: PPUSH
32317: CALL_OW 3
32321: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32322: LD_VAR 0 2
32326: PPUSH
32327: LD_VAR 0 3
32331: PPUSH
32332: CALL 32532 0 2
32336: PUSH
32337: LD_VAR 0 11
32341: PUSH
32342: EMPTY
32343: EQUAL
32344: OR
32345: IFFALSE 32290
// if not control in _control then
32347: LD_VAR 0 4
32351: PUSH
32352: LD_VAR 0 12
32356: IN
32357: NOT
32358: IFFALSE 32384
// control := _control [ rand ( 1 , _control ) ] ;
32360: LD_ADDR_VAR 0 4
32364: PUSH
32365: LD_VAR 0 12
32369: PUSH
32370: LD_INT 1
32372: PPUSH
32373: LD_VAR 0 12
32377: PPUSH
32378: CALL_OW 12
32382: ARRAY
32383: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32384: LD_VAR 0 2
32388: PPUSH
32389: LD_VAR 0 5
32393: PPUSH
32394: CALL 32752 0 2
32398: NOT
32399: IFFALSE 32458
// repeat weapon := _weapon [ 1 ] ;
32401: LD_ADDR_VAR 0 5
32405: PUSH
32406: LD_VAR 0 10
32410: PUSH
32411: LD_INT 1
32413: ARRAY
32414: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32415: LD_ADDR_VAR 0 10
32419: PUSH
32420: LD_VAR 0 10
32424: PPUSH
32425: LD_INT 1
32427: PPUSH
32428: CALL_OW 3
32432: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32433: LD_VAR 0 2
32437: PPUSH
32438: LD_VAR 0 5
32442: PPUSH
32443: CALL 32752 0 2
32447: PUSH
32448: LD_VAR 0 10
32452: PUSH
32453: EMPTY
32454: EQUAL
32455: OR
32456: IFFALSE 32401
// result := [ ] ;
32458: LD_ADDR_VAR 0 6
32462: PUSH
32463: EMPTY
32464: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32465: LD_VAR 0 1
32469: PPUSH
32470: LD_VAR 0 2
32474: PPUSH
32475: LD_VAR 0 3
32479: PPUSH
32480: LD_VAR 0 4
32484: PPUSH
32485: LD_VAR 0 5
32489: PPUSH
32490: CALL_OW 448
32494: IFFALSE 32527
// result := [ chassis , engine , control , weapon ] ;
32496: LD_ADDR_VAR 0 6
32500: PUSH
32501: LD_VAR 0 2
32505: PUSH
32506: LD_VAR 0 3
32510: PUSH
32511: LD_VAR 0 4
32515: PUSH
32516: LD_VAR 0 5
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: ST_TO_ADDR
// end ;
32527: LD_VAR 0 6
32531: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32532: LD_INT 0
32534: PPUSH
// if not chassis or not engine then
32535: LD_VAR 0 1
32539: NOT
32540: PUSH
32541: LD_VAR 0 2
32545: NOT
32546: OR
32547: IFFALSE 32551
// exit ;
32549: GO 32747
// case engine of engine_solar :
32551: LD_VAR 0 2
32555: PUSH
32556: LD_INT 2
32558: DOUBLE
32559: EQUAL
32560: IFTRUE 32564
32562: GO 32602
32564: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32565: LD_ADDR_VAR 0 3
32569: PUSH
32570: LD_INT 11
32572: PUSH
32573: LD_INT 12
32575: PUSH
32576: LD_INT 13
32578: PUSH
32579: LD_INT 14
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: LD_INT 3
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: ST_TO_ADDR
32600: GO 32731
32602: LD_INT 1
32604: DOUBLE
32605: EQUAL
32606: IFTRUE 32610
32608: GO 32672
32610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32611: LD_ADDR_VAR 0 3
32615: PUSH
32616: LD_INT 11
32618: PUSH
32619: LD_INT 12
32621: PUSH
32622: LD_INT 13
32624: PUSH
32625: LD_INT 14
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: LD_INT 2
32633: PUSH
32634: LD_INT 3
32636: PUSH
32637: LD_INT 4
32639: PUSH
32640: LD_INT 5
32642: PUSH
32643: LD_INT 21
32645: PUSH
32646: LD_INT 23
32648: PUSH
32649: LD_INT 22
32651: PUSH
32652: LD_INT 24
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: ST_TO_ADDR
32670: GO 32731
32672: LD_INT 3
32674: DOUBLE
32675: EQUAL
32676: IFTRUE 32680
32678: GO 32730
32680: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32681: LD_ADDR_VAR 0 3
32685: PUSH
32686: LD_INT 13
32688: PUSH
32689: LD_INT 14
32691: PUSH
32692: LD_INT 2
32694: PUSH
32695: LD_INT 3
32697: PUSH
32698: LD_INT 4
32700: PUSH
32701: LD_INT 5
32703: PUSH
32704: LD_INT 21
32706: PUSH
32707: LD_INT 22
32709: PUSH
32710: LD_INT 23
32712: PUSH
32713: LD_INT 24
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: ST_TO_ADDR
32728: GO 32731
32730: POP
// result := ( chassis in result ) ;
32731: LD_ADDR_VAR 0 3
32735: PUSH
32736: LD_VAR 0 1
32740: PUSH
32741: LD_VAR 0 3
32745: IN
32746: ST_TO_ADDR
// end ;
32747: LD_VAR 0 3
32751: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32752: LD_INT 0
32754: PPUSH
// if not chassis or not weapon then
32755: LD_VAR 0 1
32759: NOT
32760: PUSH
32761: LD_VAR 0 2
32765: NOT
32766: OR
32767: IFFALSE 32771
// exit ;
32769: GO 33833
// case weapon of us_machine_gun :
32771: LD_VAR 0 2
32775: PUSH
32776: LD_INT 2
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32814
32784: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32785: LD_ADDR_VAR 0 3
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: LD_INT 2
32795: PUSH
32796: LD_INT 3
32798: PUSH
32799: LD_INT 4
32801: PUSH
32802: LD_INT 5
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: ST_TO_ADDR
32812: GO 33817
32814: LD_INT 3
32816: DOUBLE
32817: EQUAL
32818: IFTRUE 32822
32820: GO 32852
32822: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32823: LD_ADDR_VAR 0 3
32827: PUSH
32828: LD_INT 1
32830: PUSH
32831: LD_INT 2
32833: PUSH
32834: LD_INT 3
32836: PUSH
32837: LD_INT 4
32839: PUSH
32840: LD_INT 5
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: ST_TO_ADDR
32850: GO 33817
32852: LD_INT 11
32854: DOUBLE
32855: EQUAL
32856: IFTRUE 32860
32858: GO 32890
32860: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32861: LD_ADDR_VAR 0 3
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: LD_INT 2
32871: PUSH
32872: LD_INT 3
32874: PUSH
32875: LD_INT 4
32877: PUSH
32878: LD_INT 5
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: ST_TO_ADDR
32888: GO 33817
32890: LD_INT 4
32892: DOUBLE
32893: EQUAL
32894: IFTRUE 32898
32896: GO 32924
32898: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32899: LD_ADDR_VAR 0 3
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: LD_INT 3
32909: PUSH
32910: LD_INT 4
32912: PUSH
32913: LD_INT 5
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: ST_TO_ADDR
32922: GO 33817
32924: LD_INT 5
32926: DOUBLE
32927: EQUAL
32928: IFTRUE 32932
32930: GO 32958
32932: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32933: LD_ADDR_VAR 0 3
32937: PUSH
32938: LD_INT 2
32940: PUSH
32941: LD_INT 3
32943: PUSH
32944: LD_INT 4
32946: PUSH
32947: LD_INT 5
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: ST_TO_ADDR
32956: GO 33817
32958: LD_INT 9
32960: DOUBLE
32961: EQUAL
32962: IFTRUE 32966
32964: GO 32992
32966: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32967: LD_ADDR_VAR 0 3
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: LD_INT 3
32977: PUSH
32978: LD_INT 4
32980: PUSH
32981: LD_INT 5
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: ST_TO_ADDR
32990: GO 33817
32992: LD_INT 7
32994: DOUBLE
32995: EQUAL
32996: IFTRUE 33000
32998: GO 33026
33000: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33001: LD_ADDR_VAR 0 3
33005: PUSH
33006: LD_INT 2
33008: PUSH
33009: LD_INT 3
33011: PUSH
33012: LD_INT 4
33014: PUSH
33015: LD_INT 5
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: ST_TO_ADDR
33024: GO 33817
33026: LD_INT 12
33028: DOUBLE
33029: EQUAL
33030: IFTRUE 33034
33032: GO 33060
33034: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33035: LD_ADDR_VAR 0 3
33039: PUSH
33040: LD_INT 2
33042: PUSH
33043: LD_INT 3
33045: PUSH
33046: LD_INT 4
33048: PUSH
33049: LD_INT 5
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: ST_TO_ADDR
33058: GO 33817
33060: LD_INT 13
33062: DOUBLE
33063: EQUAL
33064: IFTRUE 33068
33066: GO 33094
33068: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33069: LD_ADDR_VAR 0 3
33073: PUSH
33074: LD_INT 2
33076: PUSH
33077: LD_INT 3
33079: PUSH
33080: LD_INT 4
33082: PUSH
33083: LD_INT 5
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: ST_TO_ADDR
33092: GO 33817
33094: LD_INT 14
33096: DOUBLE
33097: EQUAL
33098: IFTRUE 33102
33100: GO 33120
33102: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33103: LD_ADDR_VAR 0 3
33107: PUSH
33108: LD_INT 4
33110: PUSH
33111: LD_INT 5
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: ST_TO_ADDR
33118: GO 33817
33120: LD_INT 6
33122: DOUBLE
33123: EQUAL
33124: IFTRUE 33128
33126: GO 33146
33128: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33129: LD_ADDR_VAR 0 3
33133: PUSH
33134: LD_INT 4
33136: PUSH
33137: LD_INT 5
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: ST_TO_ADDR
33144: GO 33817
33146: LD_INT 10
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33154
33152: GO 33172
33154: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33155: LD_ADDR_VAR 0 3
33159: PUSH
33160: LD_INT 4
33162: PUSH
33163: LD_INT 5
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: ST_TO_ADDR
33170: GO 33817
33172: LD_INT 22
33174: DOUBLE
33175: EQUAL
33176: IFTRUE 33180
33178: GO 33206
33180: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33181: LD_ADDR_VAR 0 3
33185: PUSH
33186: LD_INT 11
33188: PUSH
33189: LD_INT 12
33191: PUSH
33192: LD_INT 13
33194: PUSH
33195: LD_INT 14
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: ST_TO_ADDR
33204: GO 33817
33206: LD_INT 23
33208: DOUBLE
33209: EQUAL
33210: IFTRUE 33214
33212: GO 33240
33214: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33215: LD_ADDR_VAR 0 3
33219: PUSH
33220: LD_INT 11
33222: PUSH
33223: LD_INT 12
33225: PUSH
33226: LD_INT 13
33228: PUSH
33229: LD_INT 14
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: ST_TO_ADDR
33238: GO 33817
33240: LD_INT 24
33242: DOUBLE
33243: EQUAL
33244: IFTRUE 33248
33246: GO 33274
33248: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33249: LD_ADDR_VAR 0 3
33253: PUSH
33254: LD_INT 11
33256: PUSH
33257: LD_INT 12
33259: PUSH
33260: LD_INT 13
33262: PUSH
33263: LD_INT 14
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: ST_TO_ADDR
33272: GO 33817
33274: LD_INT 30
33276: DOUBLE
33277: EQUAL
33278: IFTRUE 33282
33280: GO 33308
33282: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33283: LD_ADDR_VAR 0 3
33287: PUSH
33288: LD_INT 11
33290: PUSH
33291: LD_INT 12
33293: PUSH
33294: LD_INT 13
33296: PUSH
33297: LD_INT 14
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: ST_TO_ADDR
33306: GO 33817
33308: LD_INT 25
33310: DOUBLE
33311: EQUAL
33312: IFTRUE 33316
33314: GO 33334
33316: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33317: LD_ADDR_VAR 0 3
33321: PUSH
33322: LD_INT 13
33324: PUSH
33325: LD_INT 14
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: ST_TO_ADDR
33332: GO 33817
33334: LD_INT 27
33336: DOUBLE
33337: EQUAL
33338: IFTRUE 33342
33340: GO 33360
33342: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33343: LD_ADDR_VAR 0 3
33347: PUSH
33348: LD_INT 13
33350: PUSH
33351: LD_INT 14
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: ST_TO_ADDR
33358: GO 33817
33360: LD_EXP 50
33364: DOUBLE
33365: EQUAL
33366: IFTRUE 33370
33368: GO 33396
33370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33371: LD_ADDR_VAR 0 3
33375: PUSH
33376: LD_INT 11
33378: PUSH
33379: LD_INT 12
33381: PUSH
33382: LD_INT 13
33384: PUSH
33385: LD_INT 14
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: ST_TO_ADDR
33394: GO 33817
33396: LD_INT 28
33398: DOUBLE
33399: EQUAL
33400: IFTRUE 33404
33402: GO 33422
33404: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33405: LD_ADDR_VAR 0 3
33409: PUSH
33410: LD_INT 13
33412: PUSH
33413: LD_INT 14
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: ST_TO_ADDR
33420: GO 33817
33422: LD_INT 29
33424: DOUBLE
33425: EQUAL
33426: IFTRUE 33430
33428: GO 33448
33430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33431: LD_ADDR_VAR 0 3
33435: PUSH
33436: LD_INT 13
33438: PUSH
33439: LD_INT 14
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: ST_TO_ADDR
33446: GO 33817
33448: LD_INT 31
33450: DOUBLE
33451: EQUAL
33452: IFTRUE 33456
33454: GO 33474
33456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33457: LD_ADDR_VAR 0 3
33461: PUSH
33462: LD_INT 13
33464: PUSH
33465: LD_INT 14
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: ST_TO_ADDR
33472: GO 33817
33474: LD_INT 26
33476: DOUBLE
33477: EQUAL
33478: IFTRUE 33482
33480: GO 33500
33482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33483: LD_ADDR_VAR 0 3
33487: PUSH
33488: LD_INT 13
33490: PUSH
33491: LD_INT 14
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: ST_TO_ADDR
33498: GO 33817
33500: LD_INT 42
33502: DOUBLE
33503: EQUAL
33504: IFTRUE 33508
33506: GO 33534
33508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33509: LD_ADDR_VAR 0 3
33513: PUSH
33514: LD_INT 21
33516: PUSH
33517: LD_INT 22
33519: PUSH
33520: LD_INT 23
33522: PUSH
33523: LD_INT 24
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: ST_TO_ADDR
33532: GO 33817
33534: LD_INT 43
33536: DOUBLE
33537: EQUAL
33538: IFTRUE 33542
33540: GO 33568
33542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33543: LD_ADDR_VAR 0 3
33547: PUSH
33548: LD_INT 21
33550: PUSH
33551: LD_INT 22
33553: PUSH
33554: LD_INT 23
33556: PUSH
33557: LD_INT 24
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: ST_TO_ADDR
33566: GO 33817
33568: LD_INT 44
33570: DOUBLE
33571: EQUAL
33572: IFTRUE 33576
33574: GO 33602
33576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33577: LD_ADDR_VAR 0 3
33581: PUSH
33582: LD_INT 21
33584: PUSH
33585: LD_INT 22
33587: PUSH
33588: LD_INT 23
33590: PUSH
33591: LD_INT 24
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: ST_TO_ADDR
33600: GO 33817
33602: LD_INT 45
33604: DOUBLE
33605: EQUAL
33606: IFTRUE 33610
33608: GO 33636
33610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33611: LD_ADDR_VAR 0 3
33615: PUSH
33616: LD_INT 21
33618: PUSH
33619: LD_INT 22
33621: PUSH
33622: LD_INT 23
33624: PUSH
33625: LD_INT 24
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: ST_TO_ADDR
33634: GO 33817
33636: LD_INT 49
33638: DOUBLE
33639: EQUAL
33640: IFTRUE 33644
33642: GO 33670
33644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: LD_INT 21
33652: PUSH
33653: LD_INT 22
33655: PUSH
33656: LD_INT 23
33658: PUSH
33659: LD_INT 24
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: ST_TO_ADDR
33668: GO 33817
33670: LD_INT 51
33672: DOUBLE
33673: EQUAL
33674: IFTRUE 33678
33676: GO 33704
33678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33679: LD_ADDR_VAR 0 3
33683: PUSH
33684: LD_INT 21
33686: PUSH
33687: LD_INT 22
33689: PUSH
33690: LD_INT 23
33692: PUSH
33693: LD_INT 24
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: ST_TO_ADDR
33702: GO 33817
33704: LD_INT 52
33706: DOUBLE
33707: EQUAL
33708: IFTRUE 33712
33710: GO 33738
33712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33713: LD_ADDR_VAR 0 3
33717: PUSH
33718: LD_INT 21
33720: PUSH
33721: LD_INT 22
33723: PUSH
33724: LD_INT 23
33726: PUSH
33727: LD_INT 24
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: ST_TO_ADDR
33736: GO 33817
33738: LD_INT 53
33740: DOUBLE
33741: EQUAL
33742: IFTRUE 33746
33744: GO 33764
33746: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33747: LD_ADDR_VAR 0 3
33751: PUSH
33752: LD_INT 23
33754: PUSH
33755: LD_INT 24
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: ST_TO_ADDR
33762: GO 33817
33764: LD_INT 46
33766: DOUBLE
33767: EQUAL
33768: IFTRUE 33772
33770: GO 33790
33772: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33773: LD_ADDR_VAR 0 3
33777: PUSH
33778: LD_INT 23
33780: PUSH
33781: LD_INT 24
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: ST_TO_ADDR
33788: GO 33817
33790: LD_INT 47
33792: DOUBLE
33793: EQUAL
33794: IFTRUE 33798
33796: GO 33816
33798: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33799: LD_ADDR_VAR 0 3
33803: PUSH
33804: LD_INT 23
33806: PUSH
33807: LD_INT 24
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: ST_TO_ADDR
33814: GO 33817
33816: POP
// result := ( chassis in result ) ;
33817: LD_ADDR_VAR 0 3
33821: PUSH
33822: LD_VAR 0 1
33826: PUSH
33827: LD_VAR 0 3
33831: IN
33832: ST_TO_ADDR
// end ;
33833: LD_VAR 0 3
33837: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33838: LD_INT 0
33840: PPUSH
33841: PPUSH
33842: PPUSH
33843: PPUSH
33844: PPUSH
33845: PPUSH
33846: PPUSH
// result := array ;
33847: LD_ADDR_VAR 0 5
33851: PUSH
33852: LD_VAR 0 1
33856: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33857: LD_VAR 0 1
33861: NOT
33862: PUSH
33863: LD_VAR 0 2
33867: NOT
33868: OR
33869: PUSH
33870: LD_VAR 0 3
33874: NOT
33875: OR
33876: PUSH
33877: LD_VAR 0 2
33881: PUSH
33882: LD_VAR 0 1
33886: GREATER
33887: OR
33888: PUSH
33889: LD_VAR 0 3
33893: PUSH
33894: LD_VAR 0 1
33898: GREATER
33899: OR
33900: IFFALSE 33904
// exit ;
33902: GO 34200
// if direction then
33904: LD_VAR 0 4
33908: IFFALSE 33972
// begin d := 1 ;
33910: LD_ADDR_VAR 0 9
33914: PUSH
33915: LD_INT 1
33917: ST_TO_ADDR
// if i_from > i_to then
33918: LD_VAR 0 2
33922: PUSH
33923: LD_VAR 0 3
33927: GREATER
33928: IFFALSE 33954
// length := ( array - i_from ) + i_to else
33930: LD_ADDR_VAR 0 11
33934: PUSH
33935: LD_VAR 0 1
33939: PUSH
33940: LD_VAR 0 2
33944: MINUS
33945: PUSH
33946: LD_VAR 0 3
33950: PLUS
33951: ST_TO_ADDR
33952: GO 33970
// length := i_to - i_from ;
33954: LD_ADDR_VAR 0 11
33958: PUSH
33959: LD_VAR 0 3
33963: PUSH
33964: LD_VAR 0 2
33968: MINUS
33969: ST_TO_ADDR
// end else
33970: GO 34033
// begin d := - 1 ;
33972: LD_ADDR_VAR 0 9
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: ST_TO_ADDR
// if i_from > i_to then
33981: LD_VAR 0 2
33985: PUSH
33986: LD_VAR 0 3
33990: GREATER
33991: IFFALSE 34011
// length := i_from - i_to else
33993: LD_ADDR_VAR 0 11
33997: PUSH
33998: LD_VAR 0 2
34002: PUSH
34003: LD_VAR 0 3
34007: MINUS
34008: ST_TO_ADDR
34009: GO 34033
// length := ( array - i_to ) + i_from ;
34011: LD_ADDR_VAR 0 11
34015: PUSH
34016: LD_VAR 0 1
34020: PUSH
34021: LD_VAR 0 3
34025: MINUS
34026: PUSH
34027: LD_VAR 0 2
34031: PLUS
34032: ST_TO_ADDR
// end ; if not length then
34033: LD_VAR 0 11
34037: NOT
34038: IFFALSE 34042
// exit ;
34040: GO 34200
// tmp := array ;
34042: LD_ADDR_VAR 0 10
34046: PUSH
34047: LD_VAR 0 1
34051: ST_TO_ADDR
// for i = 1 to length do
34052: LD_ADDR_VAR 0 6
34056: PUSH
34057: DOUBLE
34058: LD_INT 1
34060: DEC
34061: ST_TO_ADDR
34062: LD_VAR 0 11
34066: PUSH
34067: FOR_TO
34068: IFFALSE 34188
// begin for j = 1 to array do
34070: LD_ADDR_VAR 0 7
34074: PUSH
34075: DOUBLE
34076: LD_INT 1
34078: DEC
34079: ST_TO_ADDR
34080: LD_VAR 0 1
34084: PUSH
34085: FOR_TO
34086: IFFALSE 34174
// begin k := j + d ;
34088: LD_ADDR_VAR 0 8
34092: PUSH
34093: LD_VAR 0 7
34097: PUSH
34098: LD_VAR 0 9
34102: PLUS
34103: ST_TO_ADDR
// if k > array then
34104: LD_VAR 0 8
34108: PUSH
34109: LD_VAR 0 1
34113: GREATER
34114: IFFALSE 34124
// k := 1 ;
34116: LD_ADDR_VAR 0 8
34120: PUSH
34121: LD_INT 1
34123: ST_TO_ADDR
// if not k then
34124: LD_VAR 0 8
34128: NOT
34129: IFFALSE 34141
// k := array ;
34131: LD_ADDR_VAR 0 8
34135: PUSH
34136: LD_VAR 0 1
34140: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34141: LD_ADDR_VAR 0 10
34145: PUSH
34146: LD_VAR 0 10
34150: PPUSH
34151: LD_VAR 0 8
34155: PPUSH
34156: LD_VAR 0 1
34160: PUSH
34161: LD_VAR 0 7
34165: ARRAY
34166: PPUSH
34167: CALL_OW 1
34171: ST_TO_ADDR
// end ;
34172: GO 34085
34174: POP
34175: POP
// array := tmp ;
34176: LD_ADDR_VAR 0 1
34180: PUSH
34181: LD_VAR 0 10
34185: ST_TO_ADDR
// end ;
34186: GO 34067
34188: POP
34189: POP
// result := array ;
34190: LD_ADDR_VAR 0 5
34194: PUSH
34195: LD_VAR 0 1
34199: ST_TO_ADDR
// end ;
34200: LD_VAR 0 5
34204: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34205: LD_INT 0
34207: PPUSH
34208: PPUSH
// result := 0 ;
34209: LD_ADDR_VAR 0 3
34213: PUSH
34214: LD_INT 0
34216: ST_TO_ADDR
// if not array or not value in array then
34217: LD_VAR 0 1
34221: NOT
34222: PUSH
34223: LD_VAR 0 2
34227: PUSH
34228: LD_VAR 0 1
34232: IN
34233: NOT
34234: OR
34235: IFFALSE 34239
// exit ;
34237: GO 34293
// for i = 1 to array do
34239: LD_ADDR_VAR 0 4
34243: PUSH
34244: DOUBLE
34245: LD_INT 1
34247: DEC
34248: ST_TO_ADDR
34249: LD_VAR 0 1
34253: PUSH
34254: FOR_TO
34255: IFFALSE 34291
// if value = array [ i ] then
34257: LD_VAR 0 2
34261: PUSH
34262: LD_VAR 0 1
34266: PUSH
34267: LD_VAR 0 4
34271: ARRAY
34272: EQUAL
34273: IFFALSE 34289
// begin result := i ;
34275: LD_ADDR_VAR 0 3
34279: PUSH
34280: LD_VAR 0 4
34284: ST_TO_ADDR
// exit ;
34285: POP
34286: POP
34287: GO 34293
// end ;
34289: GO 34254
34291: POP
34292: POP
// end ;
34293: LD_VAR 0 3
34297: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34298: LD_INT 0
34300: PPUSH
// vc_chassis := chassis ;
34301: LD_ADDR_OWVAR 37
34305: PUSH
34306: LD_VAR 0 1
34310: ST_TO_ADDR
// vc_engine := engine ;
34311: LD_ADDR_OWVAR 39
34315: PUSH
34316: LD_VAR 0 2
34320: ST_TO_ADDR
// vc_control := control ;
34321: LD_ADDR_OWVAR 38
34325: PUSH
34326: LD_VAR 0 3
34330: ST_TO_ADDR
// vc_weapon := weapon ;
34331: LD_ADDR_OWVAR 40
34335: PUSH
34336: LD_VAR 0 4
34340: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34341: LD_ADDR_OWVAR 41
34345: PUSH
34346: LD_VAR 0 5
34350: ST_TO_ADDR
// end ;
34351: LD_VAR 0 6
34355: RET
// export function WantPlant ( unit ) ; var task ; begin
34356: LD_INT 0
34358: PPUSH
34359: PPUSH
// result := false ;
34360: LD_ADDR_VAR 0 2
34364: PUSH
34365: LD_INT 0
34367: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34368: LD_ADDR_VAR 0 3
34372: PUSH
34373: LD_VAR 0 1
34377: PPUSH
34378: CALL_OW 437
34382: ST_TO_ADDR
// if task then
34383: LD_VAR 0 3
34387: IFFALSE 34415
// if task [ 1 ] [ 1 ] = p then
34389: LD_VAR 0 3
34393: PUSH
34394: LD_INT 1
34396: ARRAY
34397: PUSH
34398: LD_INT 1
34400: ARRAY
34401: PUSH
34402: LD_STRING p
34404: EQUAL
34405: IFFALSE 34415
// result := true ;
34407: LD_ADDR_VAR 0 2
34411: PUSH
34412: LD_INT 1
34414: ST_TO_ADDR
// end ;
34415: LD_VAR 0 2
34419: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34420: LD_INT 0
34422: PPUSH
34423: PPUSH
34424: PPUSH
34425: PPUSH
// if pos < 1 then
34426: LD_VAR 0 2
34430: PUSH
34431: LD_INT 1
34433: LESS
34434: IFFALSE 34438
// exit ;
34436: GO 34741
// if pos = 1 then
34438: LD_VAR 0 2
34442: PUSH
34443: LD_INT 1
34445: EQUAL
34446: IFFALSE 34479
// result := Replace ( arr , pos [ 1 ] , value ) else
34448: LD_ADDR_VAR 0 4
34452: PUSH
34453: LD_VAR 0 1
34457: PPUSH
34458: LD_VAR 0 2
34462: PUSH
34463: LD_INT 1
34465: ARRAY
34466: PPUSH
34467: LD_VAR 0 3
34471: PPUSH
34472: CALL_OW 1
34476: ST_TO_ADDR
34477: GO 34741
// begin tmp := arr ;
34479: LD_ADDR_VAR 0 6
34483: PUSH
34484: LD_VAR 0 1
34488: ST_TO_ADDR
// s_arr := [ tmp ] ;
34489: LD_ADDR_VAR 0 7
34493: PUSH
34494: LD_VAR 0 6
34498: PUSH
34499: EMPTY
34500: LIST
34501: ST_TO_ADDR
// for i = 1 to pos - 1 do
34502: LD_ADDR_VAR 0 5
34506: PUSH
34507: DOUBLE
34508: LD_INT 1
34510: DEC
34511: ST_TO_ADDR
34512: LD_VAR 0 2
34516: PUSH
34517: LD_INT 1
34519: MINUS
34520: PUSH
34521: FOR_TO
34522: IFFALSE 34567
// begin tmp := tmp [ pos [ i ] ] ;
34524: LD_ADDR_VAR 0 6
34528: PUSH
34529: LD_VAR 0 6
34533: PUSH
34534: LD_VAR 0 2
34538: PUSH
34539: LD_VAR 0 5
34543: ARRAY
34544: ARRAY
34545: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34546: LD_ADDR_VAR 0 7
34550: PUSH
34551: LD_VAR 0 7
34555: PUSH
34556: LD_VAR 0 6
34560: PUSH
34561: EMPTY
34562: LIST
34563: ADD
34564: ST_TO_ADDR
// end ;
34565: GO 34521
34567: POP
34568: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34569: LD_ADDR_VAR 0 6
34573: PUSH
34574: LD_VAR 0 6
34578: PPUSH
34579: LD_VAR 0 2
34583: PUSH
34584: LD_VAR 0 2
34588: ARRAY
34589: PPUSH
34590: LD_VAR 0 3
34594: PPUSH
34595: CALL_OW 1
34599: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34600: LD_ADDR_VAR 0 7
34604: PUSH
34605: LD_VAR 0 7
34609: PPUSH
34610: LD_VAR 0 7
34614: PPUSH
34615: LD_VAR 0 6
34619: PPUSH
34620: CALL_OW 1
34624: ST_TO_ADDR
// for i = s_arr downto 2 do
34625: LD_ADDR_VAR 0 5
34629: PUSH
34630: DOUBLE
34631: LD_VAR 0 7
34635: INC
34636: ST_TO_ADDR
34637: LD_INT 2
34639: PUSH
34640: FOR_DOWNTO
34641: IFFALSE 34725
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34643: LD_ADDR_VAR 0 6
34647: PUSH
34648: LD_VAR 0 7
34652: PUSH
34653: LD_VAR 0 5
34657: PUSH
34658: LD_INT 1
34660: MINUS
34661: ARRAY
34662: PPUSH
34663: LD_VAR 0 2
34667: PUSH
34668: LD_VAR 0 5
34672: PUSH
34673: LD_INT 1
34675: MINUS
34676: ARRAY
34677: PPUSH
34678: LD_VAR 0 7
34682: PUSH
34683: LD_VAR 0 5
34687: ARRAY
34688: PPUSH
34689: CALL_OW 1
34693: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34694: LD_ADDR_VAR 0 7
34698: PUSH
34699: LD_VAR 0 7
34703: PPUSH
34704: LD_VAR 0 5
34708: PUSH
34709: LD_INT 1
34711: MINUS
34712: PPUSH
34713: LD_VAR 0 6
34717: PPUSH
34718: CALL_OW 1
34722: ST_TO_ADDR
// end ;
34723: GO 34640
34725: POP
34726: POP
// result := s_arr [ 1 ] ;
34727: LD_ADDR_VAR 0 4
34731: PUSH
34732: LD_VAR 0 7
34736: PUSH
34737: LD_INT 1
34739: ARRAY
34740: ST_TO_ADDR
// end ; end ;
34741: LD_VAR 0 4
34745: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34746: LD_INT 0
34748: PPUSH
34749: PPUSH
// if not list then
34750: LD_VAR 0 1
34754: NOT
34755: IFFALSE 34759
// exit ;
34757: GO 34850
// i := list [ pos1 ] ;
34759: LD_ADDR_VAR 0 5
34763: PUSH
34764: LD_VAR 0 1
34768: PUSH
34769: LD_VAR 0 2
34773: ARRAY
34774: ST_TO_ADDR
// if not i then
34775: LD_VAR 0 5
34779: NOT
34780: IFFALSE 34784
// exit ;
34782: GO 34850
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34784: LD_ADDR_VAR 0 1
34788: PUSH
34789: LD_VAR 0 1
34793: PPUSH
34794: LD_VAR 0 2
34798: PPUSH
34799: LD_VAR 0 1
34803: PUSH
34804: LD_VAR 0 3
34808: ARRAY
34809: PPUSH
34810: CALL_OW 1
34814: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34815: LD_ADDR_VAR 0 1
34819: PUSH
34820: LD_VAR 0 1
34824: PPUSH
34825: LD_VAR 0 3
34829: PPUSH
34830: LD_VAR 0 5
34834: PPUSH
34835: CALL_OW 1
34839: ST_TO_ADDR
// result := list ;
34840: LD_ADDR_VAR 0 4
34844: PUSH
34845: LD_VAR 0 1
34849: ST_TO_ADDR
// end ;
34850: LD_VAR 0 4
34854: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34855: LD_INT 0
34857: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34858: LD_ADDR_VAR 0 5
34862: PUSH
34863: LD_VAR 0 1
34867: PPUSH
34868: CALL_OW 250
34872: PPUSH
34873: LD_VAR 0 1
34877: PPUSH
34878: CALL_OW 251
34882: PPUSH
34883: LD_VAR 0 2
34887: PPUSH
34888: LD_VAR 0 3
34892: PPUSH
34893: LD_VAR 0 4
34897: PPUSH
34898: CALL 34908 0 5
34902: ST_TO_ADDR
// end ;
34903: LD_VAR 0 5
34907: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34908: LD_INT 0
34910: PPUSH
34911: PPUSH
34912: PPUSH
34913: PPUSH
// if not list then
34914: LD_VAR 0 3
34918: NOT
34919: IFFALSE 34923
// exit ;
34921: GO 35311
// result := [ ] ;
34923: LD_ADDR_VAR 0 6
34927: PUSH
34928: EMPTY
34929: ST_TO_ADDR
// for i in list do
34930: LD_ADDR_VAR 0 7
34934: PUSH
34935: LD_VAR 0 3
34939: PUSH
34940: FOR_IN
34941: IFFALSE 35143
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34943: LD_ADDR_VAR 0 9
34947: PUSH
34948: LD_VAR 0 7
34952: PPUSH
34953: LD_VAR 0 1
34957: PPUSH
34958: LD_VAR 0 2
34962: PPUSH
34963: CALL_OW 297
34967: ST_TO_ADDR
// if not result then
34968: LD_VAR 0 6
34972: NOT
34973: IFFALSE 34999
// result := [ [ i , tmp ] ] else
34975: LD_ADDR_VAR 0 6
34979: PUSH
34980: LD_VAR 0 7
34984: PUSH
34985: LD_VAR 0 9
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: EMPTY
34995: LIST
34996: ST_TO_ADDR
34997: GO 35141
// begin if result [ result ] [ 2 ] < tmp then
34999: LD_VAR 0 6
35003: PUSH
35004: LD_VAR 0 6
35008: ARRAY
35009: PUSH
35010: LD_INT 2
35012: ARRAY
35013: PUSH
35014: LD_VAR 0 9
35018: LESS
35019: IFFALSE 35061
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35021: LD_ADDR_VAR 0 6
35025: PUSH
35026: LD_VAR 0 6
35030: PPUSH
35031: LD_VAR 0 6
35035: PUSH
35036: LD_INT 1
35038: PLUS
35039: PPUSH
35040: LD_VAR 0 7
35044: PUSH
35045: LD_VAR 0 9
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PPUSH
35054: CALL_OW 2
35058: ST_TO_ADDR
35059: GO 35141
// for j = 1 to result do
35061: LD_ADDR_VAR 0 8
35065: PUSH
35066: DOUBLE
35067: LD_INT 1
35069: DEC
35070: ST_TO_ADDR
35071: LD_VAR 0 6
35075: PUSH
35076: FOR_TO
35077: IFFALSE 35139
// begin if tmp < result [ j ] [ 2 ] then
35079: LD_VAR 0 9
35083: PUSH
35084: LD_VAR 0 6
35088: PUSH
35089: LD_VAR 0 8
35093: ARRAY
35094: PUSH
35095: LD_INT 2
35097: ARRAY
35098: LESS
35099: IFFALSE 35137
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35101: LD_ADDR_VAR 0 6
35105: PUSH
35106: LD_VAR 0 6
35110: PPUSH
35111: LD_VAR 0 8
35115: PPUSH
35116: LD_VAR 0 7
35120: PUSH
35121: LD_VAR 0 9
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PPUSH
35130: CALL_OW 2
35134: ST_TO_ADDR
// break ;
35135: GO 35139
// end ; end ;
35137: GO 35076
35139: POP
35140: POP
// end ; end ;
35141: GO 34940
35143: POP
35144: POP
// if result and not asc then
35145: LD_VAR 0 6
35149: PUSH
35150: LD_VAR 0 4
35154: NOT
35155: AND
35156: IFFALSE 35231
// begin tmp := result ;
35158: LD_ADDR_VAR 0 9
35162: PUSH
35163: LD_VAR 0 6
35167: ST_TO_ADDR
// for i = tmp downto 1 do
35168: LD_ADDR_VAR 0 7
35172: PUSH
35173: DOUBLE
35174: LD_VAR 0 9
35178: INC
35179: ST_TO_ADDR
35180: LD_INT 1
35182: PUSH
35183: FOR_DOWNTO
35184: IFFALSE 35229
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35186: LD_ADDR_VAR 0 6
35190: PUSH
35191: LD_VAR 0 6
35195: PPUSH
35196: LD_VAR 0 9
35200: PUSH
35201: LD_VAR 0 7
35205: MINUS
35206: PUSH
35207: LD_INT 1
35209: PLUS
35210: PPUSH
35211: LD_VAR 0 9
35215: PUSH
35216: LD_VAR 0 7
35220: ARRAY
35221: PPUSH
35222: CALL_OW 1
35226: ST_TO_ADDR
35227: GO 35183
35229: POP
35230: POP
// end ; tmp := [ ] ;
35231: LD_ADDR_VAR 0 9
35235: PUSH
35236: EMPTY
35237: ST_TO_ADDR
// if mode then
35238: LD_VAR 0 5
35242: IFFALSE 35311
// begin for i = 1 to result do
35244: LD_ADDR_VAR 0 7
35248: PUSH
35249: DOUBLE
35250: LD_INT 1
35252: DEC
35253: ST_TO_ADDR
35254: LD_VAR 0 6
35258: PUSH
35259: FOR_TO
35260: IFFALSE 35299
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35262: LD_ADDR_VAR 0 9
35266: PUSH
35267: LD_VAR 0 9
35271: PPUSH
35272: LD_VAR 0 7
35276: PPUSH
35277: LD_VAR 0 6
35281: PUSH
35282: LD_VAR 0 7
35286: ARRAY
35287: PUSH
35288: LD_INT 1
35290: ARRAY
35291: PPUSH
35292: CALL_OW 1
35296: ST_TO_ADDR
35297: GO 35259
35299: POP
35300: POP
// result := tmp ;
35301: LD_ADDR_VAR 0 6
35305: PUSH
35306: LD_VAR 0 9
35310: ST_TO_ADDR
// end ; end ;
35311: LD_VAR 0 6
35315: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35316: LD_INT 0
35318: PPUSH
35319: PPUSH
35320: PPUSH
35321: PPUSH
35322: PPUSH
35323: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35324: LD_ADDR_VAR 0 5
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: LD_INT 0
35337: PUSH
35338: EMPTY
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: ST_TO_ADDR
// if not x or not y then
35346: LD_VAR 0 2
35350: NOT
35351: PUSH
35352: LD_VAR 0 3
35356: NOT
35357: OR
35358: IFFALSE 35362
// exit ;
35360: GO 37014
// if not range then
35362: LD_VAR 0 4
35366: NOT
35367: IFFALSE 35377
// range := 10 ;
35369: LD_ADDR_VAR 0 4
35373: PUSH
35374: LD_INT 10
35376: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35377: LD_ADDR_VAR 0 8
35381: PUSH
35382: LD_INT 81
35384: PUSH
35385: LD_VAR 0 1
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 92
35396: PUSH
35397: LD_VAR 0 2
35401: PUSH
35402: LD_VAR 0 3
35406: PUSH
35407: LD_VAR 0 4
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 3
35420: PUSH
35421: LD_INT 21
35423: PUSH
35424: LD_INT 3
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: LIST
35439: PPUSH
35440: CALL_OW 69
35444: ST_TO_ADDR
// if not tmp then
35445: LD_VAR 0 8
35449: NOT
35450: IFFALSE 35454
// exit ;
35452: GO 37014
// for i in tmp do
35454: LD_ADDR_VAR 0 6
35458: PUSH
35459: LD_VAR 0 8
35463: PUSH
35464: FOR_IN
35465: IFFALSE 36989
// begin points := [ 0 , 0 , 0 ] ;
35467: LD_ADDR_VAR 0 9
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: LD_INT 0
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: ST_TO_ADDR
// bpoints := 1 ;
35486: LD_ADDR_VAR 0 10
35490: PUSH
35491: LD_INT 1
35493: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35494: LD_VAR 0 6
35498: PPUSH
35499: CALL_OW 247
35503: PUSH
35504: LD_INT 1
35506: DOUBLE
35507: EQUAL
35508: IFTRUE 35512
35510: GO 36090
35512: POP
// begin if GetClass ( i ) = 1 then
35513: LD_VAR 0 6
35517: PPUSH
35518: CALL_OW 257
35522: PUSH
35523: LD_INT 1
35525: EQUAL
35526: IFFALSE 35547
// points := [ 10 , 5 , 3 ] ;
35528: LD_ADDR_VAR 0 9
35532: PUSH
35533: LD_INT 10
35535: PUSH
35536: LD_INT 5
35538: PUSH
35539: LD_INT 3
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: LIST
35546: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35547: LD_VAR 0 6
35551: PPUSH
35552: CALL_OW 257
35556: PUSH
35557: LD_INT 2
35559: PUSH
35560: LD_INT 3
35562: PUSH
35563: LD_INT 4
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: LIST
35570: IN
35571: IFFALSE 35592
// points := [ 3 , 2 , 1 ] ;
35573: LD_ADDR_VAR 0 9
35577: PUSH
35578: LD_INT 3
35580: PUSH
35581: LD_INT 2
35583: PUSH
35584: LD_INT 1
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: LIST
35591: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35592: LD_VAR 0 6
35596: PPUSH
35597: CALL_OW 257
35601: PUSH
35602: LD_INT 5
35604: EQUAL
35605: IFFALSE 35626
// points := [ 130 , 5 , 2 ] ;
35607: LD_ADDR_VAR 0 9
35611: PUSH
35612: LD_INT 130
35614: PUSH
35615: LD_INT 5
35617: PUSH
35618: LD_INT 2
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35626: LD_VAR 0 6
35630: PPUSH
35631: CALL_OW 257
35635: PUSH
35636: LD_INT 8
35638: EQUAL
35639: IFFALSE 35660
// points := [ 35 , 35 , 30 ] ;
35641: LD_ADDR_VAR 0 9
35645: PUSH
35646: LD_INT 35
35648: PUSH
35649: LD_INT 35
35651: PUSH
35652: LD_INT 30
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: LIST
35659: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35660: LD_VAR 0 6
35664: PPUSH
35665: CALL_OW 257
35669: PUSH
35670: LD_INT 9
35672: EQUAL
35673: IFFALSE 35694
// points := [ 20 , 55 , 40 ] ;
35675: LD_ADDR_VAR 0 9
35679: PUSH
35680: LD_INT 20
35682: PUSH
35683: LD_INT 55
35685: PUSH
35686: LD_INT 40
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: LIST
35693: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35694: LD_VAR 0 6
35698: PPUSH
35699: CALL_OW 257
35703: PUSH
35704: LD_INT 12
35706: PUSH
35707: LD_INT 16
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: IN
35714: IFFALSE 35735
// points := [ 5 , 3 , 2 ] ;
35716: LD_ADDR_VAR 0 9
35720: PUSH
35721: LD_INT 5
35723: PUSH
35724: LD_INT 3
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: LIST
35734: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35735: LD_VAR 0 6
35739: PPUSH
35740: CALL_OW 257
35744: PUSH
35745: LD_INT 17
35747: EQUAL
35748: IFFALSE 35769
// points := [ 100 , 50 , 75 ] ;
35750: LD_ADDR_VAR 0 9
35754: PUSH
35755: LD_INT 100
35757: PUSH
35758: LD_INT 50
35760: PUSH
35761: LD_INT 75
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35769: LD_VAR 0 6
35773: PPUSH
35774: CALL_OW 257
35778: PUSH
35779: LD_INT 15
35781: EQUAL
35782: IFFALSE 35803
// points := [ 10 , 5 , 3 ] ;
35784: LD_ADDR_VAR 0 9
35788: PUSH
35789: LD_INT 10
35791: PUSH
35792: LD_INT 5
35794: PUSH
35795: LD_INT 3
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: LIST
35802: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35803: LD_VAR 0 6
35807: PPUSH
35808: CALL_OW 257
35812: PUSH
35813: LD_INT 14
35815: EQUAL
35816: IFFALSE 35837
// points := [ 10 , 0 , 0 ] ;
35818: LD_ADDR_VAR 0 9
35822: PUSH
35823: LD_INT 10
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: LIST
35836: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35837: LD_VAR 0 6
35841: PPUSH
35842: CALL_OW 257
35846: PUSH
35847: LD_INT 11
35849: EQUAL
35850: IFFALSE 35871
// points := [ 30 , 10 , 5 ] ;
35852: LD_ADDR_VAR 0 9
35856: PUSH
35857: LD_INT 30
35859: PUSH
35860: LD_INT 10
35862: PUSH
35863: LD_INT 5
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: LIST
35870: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35871: LD_VAR 0 1
35875: PPUSH
35876: LD_INT 5
35878: PPUSH
35879: CALL_OW 321
35883: PUSH
35884: LD_INT 2
35886: EQUAL
35887: IFFALSE 35904
// bpoints := bpoints * 1.8 ;
35889: LD_ADDR_VAR 0 10
35893: PUSH
35894: LD_VAR 0 10
35898: PUSH
35899: LD_REAL  1.80000000000000E+0000
35902: MUL
35903: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35904: LD_VAR 0 6
35908: PPUSH
35909: CALL_OW 257
35913: PUSH
35914: LD_INT 1
35916: PUSH
35917: LD_INT 2
35919: PUSH
35920: LD_INT 3
35922: PUSH
35923: LD_INT 4
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: IN
35932: PUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: LD_INT 51
35940: PPUSH
35941: CALL_OW 321
35945: PUSH
35946: LD_INT 2
35948: EQUAL
35949: AND
35950: IFFALSE 35967
// bpoints := bpoints * 1.2 ;
35952: LD_ADDR_VAR 0 10
35956: PUSH
35957: LD_VAR 0 10
35961: PUSH
35962: LD_REAL  1.20000000000000E+0000
35965: MUL
35966: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35967: LD_VAR 0 6
35971: PPUSH
35972: CALL_OW 257
35976: PUSH
35977: LD_INT 5
35979: PUSH
35980: LD_INT 7
35982: PUSH
35983: LD_INT 9
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: LIST
35990: IN
35991: PUSH
35992: LD_VAR 0 1
35996: PPUSH
35997: LD_INT 52
35999: PPUSH
36000: CALL_OW 321
36004: PUSH
36005: LD_INT 2
36007: EQUAL
36008: AND
36009: IFFALSE 36026
// bpoints := bpoints * 1.5 ;
36011: LD_ADDR_VAR 0 10
36015: PUSH
36016: LD_VAR 0 10
36020: PUSH
36021: LD_REAL  1.50000000000000E+0000
36024: MUL
36025: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36026: LD_VAR 0 1
36030: PPUSH
36031: LD_INT 66
36033: PPUSH
36034: CALL_OW 321
36038: PUSH
36039: LD_INT 2
36041: EQUAL
36042: IFFALSE 36059
// bpoints := bpoints * 1.1 ;
36044: LD_ADDR_VAR 0 10
36048: PUSH
36049: LD_VAR 0 10
36053: PUSH
36054: LD_REAL  1.10000000000000E+0000
36057: MUL
36058: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36059: LD_ADDR_VAR 0 10
36063: PUSH
36064: LD_VAR 0 10
36068: PUSH
36069: LD_VAR 0 6
36073: PPUSH
36074: LD_INT 1
36076: PPUSH
36077: CALL_OW 259
36081: PUSH
36082: LD_REAL  1.15000000000000E+0000
36085: MUL
36086: MUL
36087: ST_TO_ADDR
// end ; unit_vehicle :
36088: GO 36918
36090: LD_INT 2
36092: DOUBLE
36093: EQUAL
36094: IFTRUE 36098
36096: GO 36906
36098: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36099: LD_VAR 0 6
36103: PPUSH
36104: CALL_OW 264
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: LD_INT 42
36114: PUSH
36115: LD_INT 24
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: LIST
36122: IN
36123: IFFALSE 36144
// points := [ 25 , 5 , 3 ] ;
36125: LD_ADDR_VAR 0 9
36129: PUSH
36130: LD_INT 25
36132: PUSH
36133: LD_INT 5
36135: PUSH
36136: LD_INT 3
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: LIST
36143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36144: LD_VAR 0 6
36148: PPUSH
36149: CALL_OW 264
36153: PUSH
36154: LD_INT 4
36156: PUSH
36157: LD_INT 43
36159: PUSH
36160: LD_INT 25
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: LIST
36167: IN
36168: IFFALSE 36189
// points := [ 40 , 15 , 5 ] ;
36170: LD_ADDR_VAR 0 9
36174: PUSH
36175: LD_INT 40
36177: PUSH
36178: LD_INT 15
36180: PUSH
36181: LD_INT 5
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: LIST
36188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36189: LD_VAR 0 6
36193: PPUSH
36194: CALL_OW 264
36198: PUSH
36199: LD_INT 3
36201: PUSH
36202: LD_INT 23
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: IN
36209: IFFALSE 36230
// points := [ 7 , 25 , 8 ] ;
36211: LD_ADDR_VAR 0 9
36215: PUSH
36216: LD_INT 7
36218: PUSH
36219: LD_INT 25
36221: PUSH
36222: LD_INT 8
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: LIST
36229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36230: LD_VAR 0 6
36234: PPUSH
36235: CALL_OW 264
36239: PUSH
36240: LD_INT 5
36242: PUSH
36243: LD_INT 27
36245: PUSH
36246: LD_INT 44
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: IN
36254: IFFALSE 36275
// points := [ 14 , 50 , 16 ] ;
36256: LD_ADDR_VAR 0 9
36260: PUSH
36261: LD_INT 14
36263: PUSH
36264: LD_INT 50
36266: PUSH
36267: LD_INT 16
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: LIST
36274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36275: LD_VAR 0 6
36279: PPUSH
36280: CALL_OW 264
36284: PUSH
36285: LD_INT 6
36287: PUSH
36288: LD_INT 46
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: IN
36295: IFFALSE 36316
// points := [ 32 , 120 , 70 ] ;
36297: LD_ADDR_VAR 0 9
36301: PUSH
36302: LD_INT 32
36304: PUSH
36305: LD_INT 120
36307: PUSH
36308: LD_INT 70
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: LIST
36315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36316: LD_VAR 0 6
36320: PPUSH
36321: CALL_OW 264
36325: PUSH
36326: LD_INT 7
36328: PUSH
36329: LD_INT 28
36331: PUSH
36332: LD_INT 45
36334: PUSH
36335: LD_EXP 50
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: IN
36346: IFFALSE 36367
// points := [ 35 , 20 , 45 ] ;
36348: LD_ADDR_VAR 0 9
36352: PUSH
36353: LD_INT 35
36355: PUSH
36356: LD_INT 20
36358: PUSH
36359: LD_INT 45
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: LIST
36366: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36367: LD_VAR 0 6
36371: PPUSH
36372: CALL_OW 264
36376: PUSH
36377: LD_INT 47
36379: PUSH
36380: EMPTY
36381: LIST
36382: IN
36383: IFFALSE 36404
// points := [ 67 , 45 , 75 ] ;
36385: LD_ADDR_VAR 0 9
36389: PUSH
36390: LD_INT 67
36392: PUSH
36393: LD_INT 45
36395: PUSH
36396: LD_INT 75
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: LIST
36403: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36404: LD_VAR 0 6
36408: PPUSH
36409: CALL_OW 264
36413: PUSH
36414: LD_INT 26
36416: PUSH
36417: EMPTY
36418: LIST
36419: IN
36420: IFFALSE 36441
// points := [ 120 , 30 , 80 ] ;
36422: LD_ADDR_VAR 0 9
36426: PUSH
36427: LD_INT 120
36429: PUSH
36430: LD_INT 30
36432: PUSH
36433: LD_INT 80
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: LIST
36440: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36441: LD_VAR 0 6
36445: PPUSH
36446: CALL_OW 264
36450: PUSH
36451: LD_INT 22
36453: PUSH
36454: EMPTY
36455: LIST
36456: IN
36457: IFFALSE 36478
// points := [ 40 , 1 , 1 ] ;
36459: LD_ADDR_VAR 0 9
36463: PUSH
36464: LD_INT 40
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: LIST
36477: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36478: LD_VAR 0 6
36482: PPUSH
36483: CALL_OW 264
36487: PUSH
36488: LD_INT 29
36490: PUSH
36491: EMPTY
36492: LIST
36493: IN
36494: IFFALSE 36515
// points := [ 70 , 200 , 400 ] ;
36496: LD_ADDR_VAR 0 9
36500: PUSH
36501: LD_INT 70
36503: PUSH
36504: LD_INT 200
36506: PUSH
36507: LD_INT 400
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36515: LD_VAR 0 6
36519: PPUSH
36520: CALL_OW 264
36524: PUSH
36525: LD_INT 14
36527: PUSH
36528: LD_INT 53
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: IN
36535: IFFALSE 36556
// points := [ 40 , 10 , 20 ] ;
36537: LD_ADDR_VAR 0 9
36541: PUSH
36542: LD_INT 40
36544: PUSH
36545: LD_INT 10
36547: PUSH
36548: LD_INT 20
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: LIST
36555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36556: LD_VAR 0 6
36560: PPUSH
36561: CALL_OW 264
36565: PUSH
36566: LD_INT 9
36568: PUSH
36569: EMPTY
36570: LIST
36571: IN
36572: IFFALSE 36593
// points := [ 5 , 70 , 20 ] ;
36574: LD_ADDR_VAR 0 9
36578: PUSH
36579: LD_INT 5
36581: PUSH
36582: LD_INT 70
36584: PUSH
36585: LD_INT 20
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: LIST
36592: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36593: LD_VAR 0 6
36597: PPUSH
36598: CALL_OW 264
36602: PUSH
36603: LD_INT 10
36605: PUSH
36606: EMPTY
36607: LIST
36608: IN
36609: IFFALSE 36630
// points := [ 35 , 110 , 70 ] ;
36611: LD_ADDR_VAR 0 9
36615: PUSH
36616: LD_INT 35
36618: PUSH
36619: LD_INT 110
36621: PUSH
36622: LD_INT 70
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: LIST
36629: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36630: LD_VAR 0 6
36634: PPUSH
36635: CALL_OW 265
36639: PUSH
36640: LD_INT 25
36642: EQUAL
36643: IFFALSE 36664
// points := [ 80 , 65 , 100 ] ;
36645: LD_ADDR_VAR 0 9
36649: PUSH
36650: LD_INT 80
36652: PUSH
36653: LD_INT 65
36655: PUSH
36656: LD_INT 100
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36664: LD_VAR 0 6
36668: PPUSH
36669: CALL_OW 263
36673: PUSH
36674: LD_INT 1
36676: EQUAL
36677: IFFALSE 36712
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36679: LD_ADDR_VAR 0 10
36683: PUSH
36684: LD_VAR 0 10
36688: PUSH
36689: LD_VAR 0 6
36693: PPUSH
36694: CALL_OW 311
36698: PPUSH
36699: LD_INT 3
36701: PPUSH
36702: CALL_OW 259
36706: PUSH
36707: LD_INT 4
36709: MUL
36710: MUL
36711: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36712: LD_VAR 0 6
36716: PPUSH
36717: CALL_OW 263
36721: PUSH
36722: LD_INT 2
36724: EQUAL
36725: IFFALSE 36776
// begin j := IsControledBy ( i ) ;
36727: LD_ADDR_VAR 0 7
36731: PUSH
36732: LD_VAR 0 6
36736: PPUSH
36737: CALL_OW 312
36741: ST_TO_ADDR
// if j then
36742: LD_VAR 0 7
36746: IFFALSE 36776
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36748: LD_ADDR_VAR 0 10
36752: PUSH
36753: LD_VAR 0 10
36757: PUSH
36758: LD_VAR 0 7
36762: PPUSH
36763: LD_INT 3
36765: PPUSH
36766: CALL_OW 259
36770: PUSH
36771: LD_INT 3
36773: MUL
36774: MUL
36775: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36776: LD_VAR 0 6
36780: PPUSH
36781: CALL_OW 264
36785: PUSH
36786: LD_INT 5
36788: PUSH
36789: LD_INT 6
36791: PUSH
36792: LD_INT 46
36794: PUSH
36795: LD_INT 44
36797: PUSH
36798: LD_INT 47
36800: PUSH
36801: LD_INT 45
36803: PUSH
36804: LD_INT 28
36806: PUSH
36807: LD_INT 7
36809: PUSH
36810: LD_INT 27
36812: PUSH
36813: LD_INT 29
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: IN
36828: PUSH
36829: LD_VAR 0 1
36833: PPUSH
36834: LD_INT 52
36836: PPUSH
36837: CALL_OW 321
36841: PUSH
36842: LD_INT 2
36844: EQUAL
36845: AND
36846: IFFALSE 36863
// bpoints := bpoints * 1.2 ;
36848: LD_ADDR_VAR 0 10
36852: PUSH
36853: LD_VAR 0 10
36857: PUSH
36858: LD_REAL  1.20000000000000E+0000
36861: MUL
36862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36863: LD_VAR 0 6
36867: PPUSH
36868: CALL_OW 264
36872: PUSH
36873: LD_INT 6
36875: PUSH
36876: LD_INT 46
36878: PUSH
36879: LD_INT 47
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: LIST
36886: IN
36887: IFFALSE 36904
// bpoints := bpoints * 1.2 ;
36889: LD_ADDR_VAR 0 10
36893: PUSH
36894: LD_VAR 0 10
36898: PUSH
36899: LD_REAL  1.20000000000000E+0000
36902: MUL
36903: ST_TO_ADDR
// end ; unit_building :
36904: GO 36918
36906: LD_INT 3
36908: DOUBLE
36909: EQUAL
36910: IFTRUE 36914
36912: GO 36917
36914: POP
// ; end ;
36915: GO 36918
36917: POP
// for j = 1 to 3 do
36918: LD_ADDR_VAR 0 7
36922: PUSH
36923: DOUBLE
36924: LD_INT 1
36926: DEC
36927: ST_TO_ADDR
36928: LD_INT 3
36930: PUSH
36931: FOR_TO
36932: IFFALSE 36985
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36934: LD_ADDR_VAR 0 5
36938: PUSH
36939: LD_VAR 0 5
36943: PPUSH
36944: LD_VAR 0 7
36948: PPUSH
36949: LD_VAR 0 5
36953: PUSH
36954: LD_VAR 0 7
36958: ARRAY
36959: PUSH
36960: LD_VAR 0 9
36964: PUSH
36965: LD_VAR 0 7
36969: ARRAY
36970: PUSH
36971: LD_VAR 0 10
36975: MUL
36976: PLUS
36977: PPUSH
36978: CALL_OW 1
36982: ST_TO_ADDR
36983: GO 36931
36985: POP
36986: POP
// end ;
36987: GO 35464
36989: POP
36990: POP
// result := Replace ( result , 4 , tmp ) ;
36991: LD_ADDR_VAR 0 5
36995: PUSH
36996: LD_VAR 0 5
37000: PPUSH
37001: LD_INT 4
37003: PPUSH
37004: LD_VAR 0 8
37008: PPUSH
37009: CALL_OW 1
37013: ST_TO_ADDR
// end ;
37014: LD_VAR 0 5
37018: RET
// export function DangerAtRange ( unit , range ) ; begin
37019: LD_INT 0
37021: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37022: LD_ADDR_VAR 0 3
37026: PUSH
37027: LD_VAR 0 1
37031: PPUSH
37032: CALL_OW 255
37036: PPUSH
37037: LD_VAR 0 1
37041: PPUSH
37042: CALL_OW 250
37046: PPUSH
37047: LD_VAR 0 1
37051: PPUSH
37052: CALL_OW 251
37056: PPUSH
37057: LD_VAR 0 2
37061: PPUSH
37062: CALL 35316 0 4
37066: ST_TO_ADDR
// end ;
37067: LD_VAR 0 3
37071: RET
// export function DangerInArea ( side , area ) ; begin
37072: LD_INT 0
37074: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37075: LD_ADDR_VAR 0 3
37079: PUSH
37080: LD_VAR 0 2
37084: PPUSH
37085: LD_INT 81
37087: PUSH
37088: LD_VAR 0 1
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PPUSH
37097: CALL_OW 70
37101: ST_TO_ADDR
// end ;
37102: LD_VAR 0 3
37106: RET
// export function IsExtension ( b ) ; begin
37107: LD_INT 0
37109: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37110: LD_ADDR_VAR 0 2
37114: PUSH
37115: LD_VAR 0 1
37119: PUSH
37120: LD_INT 23
37122: PUSH
37123: LD_INT 20
37125: PUSH
37126: LD_INT 22
37128: PUSH
37129: LD_INT 17
37131: PUSH
37132: LD_INT 24
37134: PUSH
37135: LD_INT 21
37137: PUSH
37138: LD_INT 19
37140: PUSH
37141: LD_INT 16
37143: PUSH
37144: LD_INT 25
37146: PUSH
37147: LD_INT 18
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: IN
37162: ST_TO_ADDR
// end ;
37163: LD_VAR 0 2
37167: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37168: LD_INT 0
37170: PPUSH
37171: PPUSH
37172: PPUSH
// result := [ ] ;
37173: LD_ADDR_VAR 0 4
37177: PUSH
37178: EMPTY
37179: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37180: LD_ADDR_VAR 0 5
37184: PUSH
37185: LD_VAR 0 2
37189: PPUSH
37190: LD_INT 21
37192: PUSH
37193: LD_INT 3
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PPUSH
37200: CALL_OW 70
37204: ST_TO_ADDR
// if not tmp then
37205: LD_VAR 0 5
37209: NOT
37210: IFFALSE 37214
// exit ;
37212: GO 37278
// if checkLink then
37214: LD_VAR 0 3
37218: IFFALSE 37268
// begin for i in tmp do
37220: LD_ADDR_VAR 0 6
37224: PUSH
37225: LD_VAR 0 5
37229: PUSH
37230: FOR_IN
37231: IFFALSE 37266
// if GetBase ( i ) <> base then
37233: LD_VAR 0 6
37237: PPUSH
37238: CALL_OW 274
37242: PUSH
37243: LD_VAR 0 1
37247: NONEQUAL
37248: IFFALSE 37264
// ComLinkToBase ( base , i ) ;
37250: LD_VAR 0 1
37254: PPUSH
37255: LD_VAR 0 6
37259: PPUSH
37260: CALL_OW 169
37264: GO 37230
37266: POP
37267: POP
// end ; result := tmp ;
37268: LD_ADDR_VAR 0 4
37272: PUSH
37273: LD_VAR 0 5
37277: ST_TO_ADDR
// end ;
37278: LD_VAR 0 4
37282: RET
// export function ComComplete ( units , b ) ; var i ; begin
37283: LD_INT 0
37285: PPUSH
37286: PPUSH
// if not units then
37287: LD_VAR 0 1
37291: NOT
37292: IFFALSE 37296
// exit ;
37294: GO 37386
// for i in units do
37296: LD_ADDR_VAR 0 4
37300: PUSH
37301: LD_VAR 0 1
37305: PUSH
37306: FOR_IN
37307: IFFALSE 37384
// if BuildingStatus ( b ) = bs_build then
37309: LD_VAR 0 2
37313: PPUSH
37314: CALL_OW 461
37318: PUSH
37319: LD_INT 1
37321: EQUAL
37322: IFFALSE 37382
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37324: LD_VAR 0 4
37328: PPUSH
37329: LD_STRING h
37331: PUSH
37332: LD_VAR 0 2
37336: PPUSH
37337: CALL_OW 250
37341: PUSH
37342: LD_VAR 0 2
37346: PPUSH
37347: CALL_OW 251
37351: PUSH
37352: LD_VAR 0 2
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: LD_INT 0
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: PUSH
37375: EMPTY
37376: LIST
37377: PPUSH
37378: CALL_OW 446
37382: GO 37306
37384: POP
37385: POP
// end ;
37386: LD_VAR 0 3
37390: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37391: LD_INT 0
37393: PPUSH
37394: PPUSH
37395: PPUSH
37396: PPUSH
37397: PPUSH
37398: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37399: LD_VAR 0 1
37403: NOT
37404: PUSH
37405: LD_VAR 0 1
37409: PPUSH
37410: CALL_OW 263
37414: PUSH
37415: LD_INT 2
37417: NONEQUAL
37418: OR
37419: IFFALSE 37423
// exit ;
37421: GO 37739
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37423: LD_ADDR_VAR 0 6
37427: PUSH
37428: LD_INT 22
37430: PUSH
37431: LD_VAR 0 1
37435: PPUSH
37436: CALL_OW 255
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: LD_INT 30
37450: PUSH
37451: LD_INT 36
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 34
37460: PUSH
37461: LD_INT 31
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: LIST
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PPUSH
37477: CALL_OW 69
37481: ST_TO_ADDR
// if not tmp then
37482: LD_VAR 0 6
37486: NOT
37487: IFFALSE 37491
// exit ;
37489: GO 37739
// result := [ ] ;
37491: LD_ADDR_VAR 0 2
37495: PUSH
37496: EMPTY
37497: ST_TO_ADDR
// for i in tmp do
37498: LD_ADDR_VAR 0 3
37502: PUSH
37503: LD_VAR 0 6
37507: PUSH
37508: FOR_IN
37509: IFFALSE 37580
// begin t := UnitsInside ( i ) ;
37511: LD_ADDR_VAR 0 4
37515: PUSH
37516: LD_VAR 0 3
37520: PPUSH
37521: CALL_OW 313
37525: ST_TO_ADDR
// if t then
37526: LD_VAR 0 4
37530: IFFALSE 37578
// for j in t do
37532: LD_ADDR_VAR 0 7
37536: PUSH
37537: LD_VAR 0 4
37541: PUSH
37542: FOR_IN
37543: IFFALSE 37576
// result := Replace ( result , result + 1 , j ) ;
37545: LD_ADDR_VAR 0 2
37549: PUSH
37550: LD_VAR 0 2
37554: PPUSH
37555: LD_VAR 0 2
37559: PUSH
37560: LD_INT 1
37562: PLUS
37563: PPUSH
37564: LD_VAR 0 7
37568: PPUSH
37569: CALL_OW 1
37573: ST_TO_ADDR
37574: GO 37542
37576: POP
37577: POP
// end ;
37578: GO 37508
37580: POP
37581: POP
// if not result then
37582: LD_VAR 0 2
37586: NOT
37587: IFFALSE 37591
// exit ;
37589: GO 37739
// mech := result [ 1 ] ;
37591: LD_ADDR_VAR 0 5
37595: PUSH
37596: LD_VAR 0 2
37600: PUSH
37601: LD_INT 1
37603: ARRAY
37604: ST_TO_ADDR
// if result > 1 then
37605: LD_VAR 0 2
37609: PUSH
37610: LD_INT 1
37612: GREATER
37613: IFFALSE 37725
// begin for i = 2 to result do
37615: LD_ADDR_VAR 0 3
37619: PUSH
37620: DOUBLE
37621: LD_INT 2
37623: DEC
37624: ST_TO_ADDR
37625: LD_VAR 0 2
37629: PUSH
37630: FOR_TO
37631: IFFALSE 37723
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37633: LD_ADDR_VAR 0 4
37637: PUSH
37638: LD_VAR 0 2
37642: PUSH
37643: LD_VAR 0 3
37647: ARRAY
37648: PPUSH
37649: LD_INT 3
37651: PPUSH
37652: CALL_OW 259
37656: PUSH
37657: LD_VAR 0 2
37661: PUSH
37662: LD_VAR 0 3
37666: ARRAY
37667: PPUSH
37668: CALL_OW 432
37672: MINUS
37673: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37674: LD_VAR 0 4
37678: PUSH
37679: LD_VAR 0 5
37683: PPUSH
37684: LD_INT 3
37686: PPUSH
37687: CALL_OW 259
37691: PUSH
37692: LD_VAR 0 5
37696: PPUSH
37697: CALL_OW 432
37701: MINUS
37702: GREATEREQUAL
37703: IFFALSE 37721
// mech := result [ i ] ;
37705: LD_ADDR_VAR 0 5
37709: PUSH
37710: LD_VAR 0 2
37714: PUSH
37715: LD_VAR 0 3
37719: ARRAY
37720: ST_TO_ADDR
// end ;
37721: GO 37630
37723: POP
37724: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37725: LD_VAR 0 1
37729: PPUSH
37730: LD_VAR 0 5
37734: PPUSH
37735: CALL_OW 135
// end ;
37739: LD_VAR 0 2
37743: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37744: LD_INT 0
37746: PPUSH
37747: PPUSH
37748: PPUSH
37749: PPUSH
37750: PPUSH
37751: PPUSH
37752: PPUSH
37753: PPUSH
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
37758: PPUSH
// result := [ ] ;
37759: LD_ADDR_VAR 0 7
37763: PUSH
37764: EMPTY
37765: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37766: LD_VAR 0 1
37770: PPUSH
37771: CALL_OW 266
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: IN
37786: NOT
37787: IFFALSE 37791
// exit ;
37789: GO 39425
// if name then
37791: LD_VAR 0 3
37795: IFFALSE 37811
// SetBName ( base_dep , name ) ;
37797: LD_VAR 0 1
37801: PPUSH
37802: LD_VAR 0 3
37806: PPUSH
37807: CALL_OW 500
// base := GetBase ( base_dep ) ;
37811: LD_ADDR_VAR 0 15
37815: PUSH
37816: LD_VAR 0 1
37820: PPUSH
37821: CALL_OW 274
37825: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37826: LD_ADDR_VAR 0 16
37830: PUSH
37831: LD_VAR 0 1
37835: PPUSH
37836: CALL_OW 255
37840: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37841: LD_ADDR_VAR 0 17
37845: PUSH
37846: LD_VAR 0 1
37850: PPUSH
37851: CALL_OW 248
37855: ST_TO_ADDR
// if sources then
37856: LD_VAR 0 5
37860: IFFALSE 37907
// for i = 1 to 3 do
37862: LD_ADDR_VAR 0 8
37866: PUSH
37867: DOUBLE
37868: LD_INT 1
37870: DEC
37871: ST_TO_ADDR
37872: LD_INT 3
37874: PUSH
37875: FOR_TO
37876: IFFALSE 37905
// AddResourceType ( base , i , sources [ i ] ) ;
37878: LD_VAR 0 15
37882: PPUSH
37883: LD_VAR 0 8
37887: PPUSH
37888: LD_VAR 0 5
37892: PUSH
37893: LD_VAR 0 8
37897: ARRAY
37898: PPUSH
37899: CALL_OW 276
37903: GO 37875
37905: POP
37906: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37907: LD_ADDR_VAR 0 18
37911: PUSH
37912: LD_VAR 0 15
37916: PPUSH
37917: LD_VAR 0 2
37921: PPUSH
37922: LD_INT 1
37924: PPUSH
37925: CALL 37168 0 3
37929: ST_TO_ADDR
// InitHc ;
37930: CALL_OW 19
// InitUc ;
37934: CALL_OW 18
// uc_side := side ;
37938: LD_ADDR_OWVAR 20
37942: PUSH
37943: LD_VAR 0 16
37947: ST_TO_ADDR
// uc_nation := nation ;
37948: LD_ADDR_OWVAR 21
37952: PUSH
37953: LD_VAR 0 17
37957: ST_TO_ADDR
// if buildings then
37958: LD_VAR 0 18
37962: IFFALSE 39284
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37964: LD_ADDR_VAR 0 19
37968: PUSH
37969: LD_VAR 0 18
37973: PPUSH
37974: LD_INT 2
37976: PUSH
37977: LD_INT 30
37979: PUSH
37980: LD_INT 29
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 30
37989: PUSH
37990: LD_INT 30
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: LIST
38001: PPUSH
38002: CALL_OW 72
38006: ST_TO_ADDR
// if tmp then
38007: LD_VAR 0 19
38011: IFFALSE 38059
// for i in tmp do
38013: LD_ADDR_VAR 0 8
38017: PUSH
38018: LD_VAR 0 19
38022: PUSH
38023: FOR_IN
38024: IFFALSE 38057
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38026: LD_VAR 0 8
38030: PPUSH
38031: CALL_OW 250
38035: PPUSH
38036: LD_VAR 0 8
38040: PPUSH
38041: CALL_OW 251
38045: PPUSH
38046: LD_VAR 0 16
38050: PPUSH
38051: CALL_OW 441
38055: GO 38023
38057: POP
38058: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38059: LD_VAR 0 18
38063: PPUSH
38064: LD_INT 2
38066: PUSH
38067: LD_INT 30
38069: PUSH
38070: LD_INT 32
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 30
38079: PUSH
38080: LD_INT 33
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: LIST
38091: PPUSH
38092: CALL_OW 72
38096: IFFALSE 38184
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38098: LD_ADDR_VAR 0 8
38102: PUSH
38103: LD_VAR 0 18
38107: PPUSH
38108: LD_INT 2
38110: PUSH
38111: LD_INT 30
38113: PUSH
38114: LD_INT 32
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 30
38123: PUSH
38124: LD_INT 33
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: LIST
38135: PPUSH
38136: CALL_OW 72
38140: PUSH
38141: FOR_IN
38142: IFFALSE 38182
// begin if not GetBWeapon ( i ) then
38144: LD_VAR 0 8
38148: PPUSH
38149: CALL_OW 269
38153: NOT
38154: IFFALSE 38180
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38156: LD_VAR 0 8
38160: PPUSH
38161: LD_VAR 0 8
38165: PPUSH
38166: LD_VAR 0 2
38170: PPUSH
38171: CALL 39430 0 2
38175: PPUSH
38176: CALL_OW 431
// end ;
38180: GO 38141
38182: POP
38183: POP
// end ; for i = 1 to personel do
38184: LD_ADDR_VAR 0 8
38188: PUSH
38189: DOUBLE
38190: LD_INT 1
38192: DEC
38193: ST_TO_ADDR
38194: LD_VAR 0 6
38198: PUSH
38199: FOR_TO
38200: IFFALSE 39264
// begin if i > 4 then
38202: LD_VAR 0 8
38206: PUSH
38207: LD_INT 4
38209: GREATER
38210: IFFALSE 38214
// break ;
38212: GO 39264
// case i of 1 :
38214: LD_VAR 0 8
38218: PUSH
38219: LD_INT 1
38221: DOUBLE
38222: EQUAL
38223: IFTRUE 38227
38225: GO 38307
38227: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38228: LD_ADDR_VAR 0 12
38232: PUSH
38233: LD_VAR 0 18
38237: PPUSH
38238: LD_INT 22
38240: PUSH
38241: LD_VAR 0 16
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 58
38252: PUSH
38253: EMPTY
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: LD_INT 30
38261: PUSH
38262: LD_INT 32
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 30
38271: PUSH
38272: LD_INT 4
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 30
38281: PUSH
38282: LD_INT 5
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: LIST
38299: PPUSH
38300: CALL_OW 72
38304: ST_TO_ADDR
38305: GO 38529
38307: LD_INT 2
38309: DOUBLE
38310: EQUAL
38311: IFTRUE 38315
38313: GO 38377
38315: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38316: LD_ADDR_VAR 0 12
38320: PUSH
38321: LD_VAR 0 18
38325: PPUSH
38326: LD_INT 22
38328: PUSH
38329: LD_VAR 0 16
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 2
38340: PUSH
38341: LD_INT 30
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 30
38353: PUSH
38354: LD_INT 1
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: LIST
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PPUSH
38370: CALL_OW 72
38374: ST_TO_ADDR
38375: GO 38529
38377: LD_INT 3
38379: DOUBLE
38380: EQUAL
38381: IFTRUE 38385
38383: GO 38447
38385: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38386: LD_ADDR_VAR 0 12
38390: PUSH
38391: LD_VAR 0 18
38395: PPUSH
38396: LD_INT 22
38398: PUSH
38399: LD_VAR 0 16
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 2
38410: PUSH
38411: LD_INT 30
38413: PUSH
38414: LD_INT 2
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 30
38423: PUSH
38424: LD_INT 3
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: LIST
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PPUSH
38440: CALL_OW 72
38444: ST_TO_ADDR
38445: GO 38529
38447: LD_INT 4
38449: DOUBLE
38450: EQUAL
38451: IFTRUE 38455
38453: GO 38528
38455: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38456: LD_ADDR_VAR 0 12
38460: PUSH
38461: LD_VAR 0 18
38465: PPUSH
38466: LD_INT 22
38468: PUSH
38469: LD_VAR 0 16
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 2
38480: PUSH
38481: LD_INT 30
38483: PUSH
38484: LD_INT 6
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 30
38493: PUSH
38494: LD_INT 7
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 30
38503: PUSH
38504: LD_INT 8
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PPUSH
38521: CALL_OW 72
38525: ST_TO_ADDR
38526: GO 38529
38528: POP
// if i = 1 then
38529: LD_VAR 0 8
38533: PUSH
38534: LD_INT 1
38536: EQUAL
38537: IFFALSE 38648
// begin tmp := [ ] ;
38539: LD_ADDR_VAR 0 19
38543: PUSH
38544: EMPTY
38545: ST_TO_ADDR
// for j in f do
38546: LD_ADDR_VAR 0 9
38550: PUSH
38551: LD_VAR 0 12
38555: PUSH
38556: FOR_IN
38557: IFFALSE 38630
// if GetBType ( j ) = b_bunker then
38559: LD_VAR 0 9
38563: PPUSH
38564: CALL_OW 266
38568: PUSH
38569: LD_INT 32
38571: EQUAL
38572: IFFALSE 38599
// tmp := Insert ( tmp , 1 , j ) else
38574: LD_ADDR_VAR 0 19
38578: PUSH
38579: LD_VAR 0 19
38583: PPUSH
38584: LD_INT 1
38586: PPUSH
38587: LD_VAR 0 9
38591: PPUSH
38592: CALL_OW 2
38596: ST_TO_ADDR
38597: GO 38628
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38599: LD_ADDR_VAR 0 19
38603: PUSH
38604: LD_VAR 0 19
38608: PPUSH
38609: LD_VAR 0 19
38613: PUSH
38614: LD_INT 1
38616: PLUS
38617: PPUSH
38618: LD_VAR 0 9
38622: PPUSH
38623: CALL_OW 2
38627: ST_TO_ADDR
38628: GO 38556
38630: POP
38631: POP
// if tmp then
38632: LD_VAR 0 19
38636: IFFALSE 38648
// f := tmp ;
38638: LD_ADDR_VAR 0 12
38642: PUSH
38643: LD_VAR 0 19
38647: ST_TO_ADDR
// end ; x := personel [ i ] ;
38648: LD_ADDR_VAR 0 13
38652: PUSH
38653: LD_VAR 0 6
38657: PUSH
38658: LD_VAR 0 8
38662: ARRAY
38663: ST_TO_ADDR
// if x = - 1 then
38664: LD_VAR 0 13
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: EQUAL
38673: IFFALSE 38882
// begin for j in f do
38675: LD_ADDR_VAR 0 9
38679: PUSH
38680: LD_VAR 0 12
38684: PUSH
38685: FOR_IN
38686: IFFALSE 38878
// repeat InitHc ;
38688: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38692: LD_VAR 0 9
38696: PPUSH
38697: CALL_OW 266
38701: PUSH
38702: LD_INT 5
38704: EQUAL
38705: IFFALSE 38775
// begin if UnitsInside ( j ) < 3 then
38707: LD_VAR 0 9
38711: PPUSH
38712: CALL_OW 313
38716: PUSH
38717: LD_INT 3
38719: LESS
38720: IFFALSE 38756
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38722: LD_INT 0
38724: PPUSH
38725: LD_INT 5
38727: PUSH
38728: LD_INT 8
38730: PUSH
38731: LD_INT 9
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: LIST
38738: PUSH
38739: LD_VAR 0 17
38743: ARRAY
38744: PPUSH
38745: LD_VAR 0 4
38749: PPUSH
38750: CALL_OW 380
38754: GO 38773
// PrepareHuman ( false , i , skill ) ;
38756: LD_INT 0
38758: PPUSH
38759: LD_VAR 0 8
38763: PPUSH
38764: LD_VAR 0 4
38768: PPUSH
38769: CALL_OW 380
// end else
38773: GO 38792
// PrepareHuman ( false , i , skill ) ;
38775: LD_INT 0
38777: PPUSH
38778: LD_VAR 0 8
38782: PPUSH
38783: LD_VAR 0 4
38787: PPUSH
38788: CALL_OW 380
// un := CreateHuman ;
38792: LD_ADDR_VAR 0 14
38796: PUSH
38797: CALL_OW 44
38801: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38802: LD_ADDR_VAR 0 7
38806: PUSH
38807: LD_VAR 0 7
38811: PPUSH
38812: LD_INT 1
38814: PPUSH
38815: LD_VAR 0 14
38819: PPUSH
38820: CALL_OW 2
38824: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38825: LD_VAR 0 14
38829: PPUSH
38830: LD_VAR 0 9
38834: PPUSH
38835: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38839: LD_VAR 0 9
38843: PPUSH
38844: CALL_OW 313
38848: PUSH
38849: LD_INT 6
38851: EQUAL
38852: PUSH
38853: LD_VAR 0 9
38857: PPUSH
38858: CALL_OW 266
38862: PUSH
38863: LD_INT 32
38865: PUSH
38866: LD_INT 31
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: IN
38873: OR
38874: IFFALSE 38688
38876: GO 38685
38878: POP
38879: POP
// end else
38880: GO 39262
// for j = 1 to x do
38882: LD_ADDR_VAR 0 9
38886: PUSH
38887: DOUBLE
38888: LD_INT 1
38890: DEC
38891: ST_TO_ADDR
38892: LD_VAR 0 13
38896: PUSH
38897: FOR_TO
38898: IFFALSE 39260
// begin InitHc ;
38900: CALL_OW 19
// if not f then
38904: LD_VAR 0 12
38908: NOT
38909: IFFALSE 38998
// begin PrepareHuman ( false , i , skill ) ;
38911: LD_INT 0
38913: PPUSH
38914: LD_VAR 0 8
38918: PPUSH
38919: LD_VAR 0 4
38923: PPUSH
38924: CALL_OW 380
// un := CreateHuman ;
38928: LD_ADDR_VAR 0 14
38932: PUSH
38933: CALL_OW 44
38937: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38938: LD_ADDR_VAR 0 7
38942: PUSH
38943: LD_VAR 0 7
38947: PPUSH
38948: LD_INT 1
38950: PPUSH
38951: LD_VAR 0 14
38955: PPUSH
38956: CALL_OW 2
38960: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38961: LD_VAR 0 14
38965: PPUSH
38966: LD_VAR 0 1
38970: PPUSH
38971: CALL_OW 250
38975: PPUSH
38976: LD_VAR 0 1
38980: PPUSH
38981: CALL_OW 251
38985: PPUSH
38986: LD_INT 10
38988: PPUSH
38989: LD_INT 0
38991: PPUSH
38992: CALL_OW 50
// continue ;
38996: GO 38897
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38998: LD_VAR 0 12
39002: PUSH
39003: LD_INT 1
39005: ARRAY
39006: PPUSH
39007: CALL_OW 313
39011: PUSH
39012: LD_VAR 0 12
39016: PUSH
39017: LD_INT 1
39019: ARRAY
39020: PPUSH
39021: CALL_OW 266
39025: PUSH
39026: LD_INT 32
39028: PUSH
39029: LD_INT 31
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: IN
39036: AND
39037: PUSH
39038: LD_VAR 0 12
39042: PUSH
39043: LD_INT 1
39045: ARRAY
39046: PPUSH
39047: CALL_OW 313
39051: PUSH
39052: LD_INT 6
39054: EQUAL
39055: OR
39056: IFFALSE 39076
// f := Delete ( f , 1 ) ;
39058: LD_ADDR_VAR 0 12
39062: PUSH
39063: LD_VAR 0 12
39067: PPUSH
39068: LD_INT 1
39070: PPUSH
39071: CALL_OW 3
39075: ST_TO_ADDR
// if not f then
39076: LD_VAR 0 12
39080: NOT
39081: IFFALSE 39099
// begin x := x + 2 ;
39083: LD_ADDR_VAR 0 13
39087: PUSH
39088: LD_VAR 0 13
39092: PUSH
39093: LD_INT 2
39095: PLUS
39096: ST_TO_ADDR
// continue ;
39097: GO 38897
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39099: LD_VAR 0 12
39103: PUSH
39104: LD_INT 1
39106: ARRAY
39107: PPUSH
39108: CALL_OW 266
39112: PUSH
39113: LD_INT 5
39115: EQUAL
39116: IFFALSE 39190
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39118: LD_VAR 0 12
39122: PUSH
39123: LD_INT 1
39125: ARRAY
39126: PPUSH
39127: CALL_OW 313
39131: PUSH
39132: LD_INT 3
39134: LESS
39135: IFFALSE 39171
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39137: LD_INT 0
39139: PPUSH
39140: LD_INT 5
39142: PUSH
39143: LD_INT 8
39145: PUSH
39146: LD_INT 9
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: LIST
39153: PUSH
39154: LD_VAR 0 17
39158: ARRAY
39159: PPUSH
39160: LD_VAR 0 4
39164: PPUSH
39165: CALL_OW 380
39169: GO 39188
// PrepareHuman ( false , i , skill ) ;
39171: LD_INT 0
39173: PPUSH
39174: LD_VAR 0 8
39178: PPUSH
39179: LD_VAR 0 4
39183: PPUSH
39184: CALL_OW 380
// end else
39188: GO 39207
// PrepareHuman ( false , i , skill ) ;
39190: LD_INT 0
39192: PPUSH
39193: LD_VAR 0 8
39197: PPUSH
39198: LD_VAR 0 4
39202: PPUSH
39203: CALL_OW 380
// un := CreateHuman ;
39207: LD_ADDR_VAR 0 14
39211: PUSH
39212: CALL_OW 44
39216: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39217: LD_ADDR_VAR 0 7
39221: PUSH
39222: LD_VAR 0 7
39226: PPUSH
39227: LD_INT 1
39229: PPUSH
39230: LD_VAR 0 14
39234: PPUSH
39235: CALL_OW 2
39239: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39240: LD_VAR 0 14
39244: PPUSH
39245: LD_VAR 0 12
39249: PUSH
39250: LD_INT 1
39252: ARRAY
39253: PPUSH
39254: CALL_OW 52
// end ;
39258: GO 38897
39260: POP
39261: POP
// end ;
39262: GO 38199
39264: POP
39265: POP
// result := result ^ buildings ;
39266: LD_ADDR_VAR 0 7
39270: PUSH
39271: LD_VAR 0 7
39275: PUSH
39276: LD_VAR 0 18
39280: ADD
39281: ST_TO_ADDR
// end else
39282: GO 39425
// begin for i = 1 to personel do
39284: LD_ADDR_VAR 0 8
39288: PUSH
39289: DOUBLE
39290: LD_INT 1
39292: DEC
39293: ST_TO_ADDR
39294: LD_VAR 0 6
39298: PUSH
39299: FOR_TO
39300: IFFALSE 39423
// begin if i > 4 then
39302: LD_VAR 0 8
39306: PUSH
39307: LD_INT 4
39309: GREATER
39310: IFFALSE 39314
// break ;
39312: GO 39423
// x := personel [ i ] ;
39314: LD_ADDR_VAR 0 13
39318: PUSH
39319: LD_VAR 0 6
39323: PUSH
39324: LD_VAR 0 8
39328: ARRAY
39329: ST_TO_ADDR
// if x = - 1 then
39330: LD_VAR 0 13
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: EQUAL
39339: IFFALSE 39343
// continue ;
39341: GO 39299
// PrepareHuman ( false , i , skill ) ;
39343: LD_INT 0
39345: PPUSH
39346: LD_VAR 0 8
39350: PPUSH
39351: LD_VAR 0 4
39355: PPUSH
39356: CALL_OW 380
// un := CreateHuman ;
39360: LD_ADDR_VAR 0 14
39364: PUSH
39365: CALL_OW 44
39369: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39370: LD_VAR 0 14
39374: PPUSH
39375: LD_VAR 0 1
39379: PPUSH
39380: CALL_OW 250
39384: PPUSH
39385: LD_VAR 0 1
39389: PPUSH
39390: CALL_OW 251
39394: PPUSH
39395: LD_INT 10
39397: PPUSH
39398: LD_INT 0
39400: PPUSH
39401: CALL_OW 50
// result := result ^ un ;
39405: LD_ADDR_VAR 0 7
39409: PUSH
39410: LD_VAR 0 7
39414: PUSH
39415: LD_VAR 0 14
39419: ADD
39420: ST_TO_ADDR
// end ;
39421: GO 39299
39423: POP
39424: POP
// end ; end ;
39425: LD_VAR 0 7
39429: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39430: LD_INT 0
39432: PPUSH
39433: PPUSH
39434: PPUSH
39435: PPUSH
39436: PPUSH
39437: PPUSH
39438: PPUSH
39439: PPUSH
39440: PPUSH
39441: PPUSH
39442: PPUSH
39443: PPUSH
39444: PPUSH
39445: PPUSH
39446: PPUSH
39447: PPUSH
// result := false ;
39448: LD_ADDR_VAR 0 3
39452: PUSH
39453: LD_INT 0
39455: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39456: LD_VAR 0 1
39460: NOT
39461: PUSH
39462: LD_VAR 0 1
39466: PPUSH
39467: CALL_OW 266
39471: PUSH
39472: LD_INT 32
39474: PUSH
39475: LD_INT 33
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: IN
39482: NOT
39483: OR
39484: IFFALSE 39488
// exit ;
39486: GO 40597
// nat := GetNation ( tower ) ;
39488: LD_ADDR_VAR 0 12
39492: PUSH
39493: LD_VAR 0 1
39497: PPUSH
39498: CALL_OW 248
39502: ST_TO_ADDR
// side := GetSide ( tower ) ;
39503: LD_ADDR_VAR 0 16
39507: PUSH
39508: LD_VAR 0 1
39512: PPUSH
39513: CALL_OW 255
39517: ST_TO_ADDR
// x := GetX ( tower ) ;
39518: LD_ADDR_VAR 0 10
39522: PUSH
39523: LD_VAR 0 1
39527: PPUSH
39528: CALL_OW 250
39532: ST_TO_ADDR
// y := GetY ( tower ) ;
39533: LD_ADDR_VAR 0 11
39537: PUSH
39538: LD_VAR 0 1
39542: PPUSH
39543: CALL_OW 251
39547: ST_TO_ADDR
// if not x or not y then
39548: LD_VAR 0 10
39552: NOT
39553: PUSH
39554: LD_VAR 0 11
39558: NOT
39559: OR
39560: IFFALSE 39564
// exit ;
39562: GO 40597
// weapon := 0 ;
39564: LD_ADDR_VAR 0 18
39568: PUSH
39569: LD_INT 0
39571: ST_TO_ADDR
// fac_list := [ ] ;
39572: LD_ADDR_VAR 0 17
39576: PUSH
39577: EMPTY
39578: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39579: LD_ADDR_VAR 0 6
39583: PUSH
39584: LD_VAR 0 1
39588: PPUSH
39589: CALL_OW 274
39593: PPUSH
39594: LD_VAR 0 2
39598: PPUSH
39599: LD_INT 0
39601: PPUSH
39602: CALL 37168 0 3
39606: PPUSH
39607: LD_INT 30
39609: PUSH
39610: LD_INT 3
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PPUSH
39617: CALL_OW 72
39621: ST_TO_ADDR
// if not factories then
39622: LD_VAR 0 6
39626: NOT
39627: IFFALSE 39631
// exit ;
39629: GO 40597
// for i in factories do
39631: LD_ADDR_VAR 0 8
39635: PUSH
39636: LD_VAR 0 6
39640: PUSH
39641: FOR_IN
39642: IFFALSE 39667
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39644: LD_ADDR_VAR 0 17
39648: PUSH
39649: LD_VAR 0 17
39653: PUSH
39654: LD_VAR 0 8
39658: PPUSH
39659: CALL_OW 478
39663: UNION
39664: ST_TO_ADDR
39665: GO 39641
39667: POP
39668: POP
// if not fac_list then
39669: LD_VAR 0 17
39673: NOT
39674: IFFALSE 39678
// exit ;
39676: GO 40597
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39678: LD_ADDR_VAR 0 5
39682: PUSH
39683: LD_INT 4
39685: PUSH
39686: LD_INT 5
39688: PUSH
39689: LD_INT 9
39691: PUSH
39692: LD_INT 10
39694: PUSH
39695: LD_INT 6
39697: PUSH
39698: LD_INT 7
39700: PUSH
39701: LD_INT 11
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 27
39715: PUSH
39716: LD_INT 28
39718: PUSH
39719: LD_INT 26
39721: PUSH
39722: LD_INT 30
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 43
39733: PUSH
39734: LD_INT 44
39736: PUSH
39737: LD_INT 46
39739: PUSH
39740: LD_INT 45
39742: PUSH
39743: LD_INT 47
39745: PUSH
39746: LD_INT 49
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: LIST
39761: PUSH
39762: LD_VAR 0 12
39766: ARRAY
39767: ST_TO_ADDR
// list := list isect fac_list ;
39768: LD_ADDR_VAR 0 5
39772: PUSH
39773: LD_VAR 0 5
39777: PUSH
39778: LD_VAR 0 17
39782: ISECT
39783: ST_TO_ADDR
// if not list then
39784: LD_VAR 0 5
39788: NOT
39789: IFFALSE 39793
// exit ;
39791: GO 40597
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39793: LD_VAR 0 12
39797: PUSH
39798: LD_INT 3
39800: EQUAL
39801: PUSH
39802: LD_INT 49
39804: PUSH
39805: LD_VAR 0 5
39809: IN
39810: AND
39811: PUSH
39812: LD_INT 31
39814: PPUSH
39815: LD_VAR 0 16
39819: PPUSH
39820: CALL_OW 321
39824: PUSH
39825: LD_INT 2
39827: EQUAL
39828: AND
39829: IFFALSE 39889
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39831: LD_INT 22
39833: PUSH
39834: LD_VAR 0 16
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 35
39845: PUSH
39846: LD_INT 49
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 91
39855: PUSH
39856: LD_VAR 0 1
39860: PUSH
39861: LD_INT 10
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: LIST
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: LIST
39873: PPUSH
39874: CALL_OW 69
39878: NOT
39879: IFFALSE 39889
// weapon := ru_time_lapser ;
39881: LD_ADDR_VAR 0 18
39885: PUSH
39886: LD_INT 49
39888: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39889: LD_VAR 0 12
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: IN
39904: PUSH
39905: LD_INT 11
39907: PUSH
39908: LD_VAR 0 5
39912: IN
39913: PUSH
39914: LD_INT 30
39916: PUSH
39917: LD_VAR 0 5
39921: IN
39922: OR
39923: AND
39924: PUSH
39925: LD_INT 6
39927: PPUSH
39928: LD_VAR 0 16
39932: PPUSH
39933: CALL_OW 321
39937: PUSH
39938: LD_INT 2
39940: EQUAL
39941: AND
39942: IFFALSE 40107
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39944: LD_INT 22
39946: PUSH
39947: LD_VAR 0 16
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 2
39958: PUSH
39959: LD_INT 35
39961: PUSH
39962: LD_INT 11
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 35
39971: PUSH
39972: LD_INT 30
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 91
39986: PUSH
39987: LD_VAR 0 1
39991: PUSH
39992: LD_INT 18
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: LIST
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: PPUSH
40005: CALL_OW 69
40009: NOT
40010: PUSH
40011: LD_INT 22
40013: PUSH
40014: LD_VAR 0 16
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: LD_INT 30
40028: PUSH
40029: LD_INT 32
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 30
40038: PUSH
40039: LD_INT 33
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 91
40053: PUSH
40054: LD_VAR 0 1
40058: PUSH
40059: LD_INT 12
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: LIST
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: LIST
40071: PUSH
40072: EMPTY
40073: LIST
40074: PPUSH
40075: CALL_OW 69
40079: PUSH
40080: LD_INT 2
40082: GREATER
40083: AND
40084: IFFALSE 40107
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40086: LD_ADDR_VAR 0 18
40090: PUSH
40091: LD_INT 11
40093: PUSH
40094: LD_INT 30
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_VAR 0 12
40105: ARRAY
40106: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40107: LD_VAR 0 18
40111: NOT
40112: PUSH
40113: LD_INT 40
40115: PPUSH
40116: LD_VAR 0 16
40120: PPUSH
40121: CALL_OW 321
40125: PUSH
40126: LD_INT 2
40128: EQUAL
40129: AND
40130: PUSH
40131: LD_INT 7
40133: PUSH
40134: LD_VAR 0 5
40138: IN
40139: PUSH
40140: LD_INT 28
40142: PUSH
40143: LD_VAR 0 5
40147: IN
40148: OR
40149: PUSH
40150: LD_INT 45
40152: PUSH
40153: LD_VAR 0 5
40157: IN
40158: OR
40159: AND
40160: IFFALSE 40414
// begin hex := GetHexInfo ( x , y ) ;
40162: LD_ADDR_VAR 0 4
40166: PUSH
40167: LD_VAR 0 10
40171: PPUSH
40172: LD_VAR 0 11
40176: PPUSH
40177: CALL_OW 546
40181: ST_TO_ADDR
// if hex [ 1 ] then
40182: LD_VAR 0 4
40186: PUSH
40187: LD_INT 1
40189: ARRAY
40190: IFFALSE 40194
// exit ;
40192: GO 40597
// height := hex [ 2 ] ;
40194: LD_ADDR_VAR 0 15
40198: PUSH
40199: LD_VAR 0 4
40203: PUSH
40204: LD_INT 2
40206: ARRAY
40207: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40208: LD_ADDR_VAR 0 14
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: LD_INT 2
40218: PUSH
40219: LD_INT 3
40221: PUSH
40222: LD_INT 5
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: ST_TO_ADDR
// for i in tmp do
40231: LD_ADDR_VAR 0 8
40235: PUSH
40236: LD_VAR 0 14
40240: PUSH
40241: FOR_IN
40242: IFFALSE 40412
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40244: LD_ADDR_VAR 0 9
40248: PUSH
40249: LD_VAR 0 10
40253: PPUSH
40254: LD_VAR 0 8
40258: PPUSH
40259: LD_INT 5
40261: PPUSH
40262: CALL_OW 272
40266: PUSH
40267: LD_VAR 0 11
40271: PPUSH
40272: LD_VAR 0 8
40276: PPUSH
40277: LD_INT 5
40279: PPUSH
40280: CALL_OW 273
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40289: LD_VAR 0 9
40293: PUSH
40294: LD_INT 1
40296: ARRAY
40297: PPUSH
40298: LD_VAR 0 9
40302: PUSH
40303: LD_INT 2
40305: ARRAY
40306: PPUSH
40307: CALL_OW 488
40311: IFFALSE 40410
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40313: LD_ADDR_VAR 0 4
40317: PUSH
40318: LD_VAR 0 9
40322: PUSH
40323: LD_INT 1
40325: ARRAY
40326: PPUSH
40327: LD_VAR 0 9
40331: PUSH
40332: LD_INT 2
40334: ARRAY
40335: PPUSH
40336: CALL_OW 546
40340: ST_TO_ADDR
// if hex [ 1 ] then
40341: LD_VAR 0 4
40345: PUSH
40346: LD_INT 1
40348: ARRAY
40349: IFFALSE 40353
// continue ;
40351: GO 40241
// h := hex [ 2 ] ;
40353: LD_ADDR_VAR 0 13
40357: PUSH
40358: LD_VAR 0 4
40362: PUSH
40363: LD_INT 2
40365: ARRAY
40366: ST_TO_ADDR
// if h + 7 < height then
40367: LD_VAR 0 13
40371: PUSH
40372: LD_INT 7
40374: PLUS
40375: PUSH
40376: LD_VAR 0 15
40380: LESS
40381: IFFALSE 40410
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40383: LD_ADDR_VAR 0 18
40387: PUSH
40388: LD_INT 7
40390: PUSH
40391: LD_INT 28
40393: PUSH
40394: LD_INT 45
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: LIST
40401: PUSH
40402: LD_VAR 0 12
40406: ARRAY
40407: ST_TO_ADDR
// break ;
40408: GO 40412
// end ; end ; end ;
40410: GO 40241
40412: POP
40413: POP
// end ; if not weapon then
40414: LD_VAR 0 18
40418: NOT
40419: IFFALSE 40479
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40421: LD_ADDR_VAR 0 5
40425: PUSH
40426: LD_VAR 0 5
40430: PUSH
40431: LD_INT 11
40433: PUSH
40434: LD_INT 30
40436: PUSH
40437: LD_INT 49
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: LIST
40444: DIFF
40445: ST_TO_ADDR
// if not list then
40446: LD_VAR 0 5
40450: NOT
40451: IFFALSE 40455
// exit ;
40453: GO 40597
// weapon := list [ rand ( 1 , list ) ] ;
40455: LD_ADDR_VAR 0 18
40459: PUSH
40460: LD_VAR 0 5
40464: PUSH
40465: LD_INT 1
40467: PPUSH
40468: LD_VAR 0 5
40472: PPUSH
40473: CALL_OW 12
40477: ARRAY
40478: ST_TO_ADDR
// end ; if weapon then
40479: LD_VAR 0 18
40483: IFFALSE 40597
// begin tmp := CostOfWeapon ( weapon ) ;
40485: LD_ADDR_VAR 0 14
40489: PUSH
40490: LD_VAR 0 18
40494: PPUSH
40495: CALL_OW 451
40499: ST_TO_ADDR
// j := GetBase ( tower ) ;
40500: LD_ADDR_VAR 0 9
40504: PUSH
40505: LD_VAR 0 1
40509: PPUSH
40510: CALL_OW 274
40514: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40515: LD_VAR 0 9
40519: PPUSH
40520: LD_INT 1
40522: PPUSH
40523: CALL_OW 275
40527: PUSH
40528: LD_VAR 0 14
40532: PUSH
40533: LD_INT 1
40535: ARRAY
40536: GREATEREQUAL
40537: PUSH
40538: LD_VAR 0 9
40542: PPUSH
40543: LD_INT 2
40545: PPUSH
40546: CALL_OW 275
40550: PUSH
40551: LD_VAR 0 14
40555: PUSH
40556: LD_INT 2
40558: ARRAY
40559: GREATEREQUAL
40560: AND
40561: PUSH
40562: LD_VAR 0 9
40566: PPUSH
40567: LD_INT 3
40569: PPUSH
40570: CALL_OW 275
40574: PUSH
40575: LD_VAR 0 14
40579: PUSH
40580: LD_INT 3
40582: ARRAY
40583: GREATEREQUAL
40584: AND
40585: IFFALSE 40597
// result := weapon ;
40587: LD_ADDR_VAR 0 3
40591: PUSH
40592: LD_VAR 0 18
40596: ST_TO_ADDR
// end ; end ;
40597: LD_VAR 0 3
40601: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40602: LD_INT 0
40604: PPUSH
40605: PPUSH
// result := true ;
40606: LD_ADDR_VAR 0 3
40610: PUSH
40611: LD_INT 1
40613: ST_TO_ADDR
// if array1 = array2 then
40614: LD_VAR 0 1
40618: PUSH
40619: LD_VAR 0 2
40623: EQUAL
40624: IFFALSE 40684
// begin for i = 1 to array1 do
40626: LD_ADDR_VAR 0 4
40630: PUSH
40631: DOUBLE
40632: LD_INT 1
40634: DEC
40635: ST_TO_ADDR
40636: LD_VAR 0 1
40640: PUSH
40641: FOR_TO
40642: IFFALSE 40680
// if array1 [ i ] <> array2 [ i ] then
40644: LD_VAR 0 1
40648: PUSH
40649: LD_VAR 0 4
40653: ARRAY
40654: PUSH
40655: LD_VAR 0 2
40659: PUSH
40660: LD_VAR 0 4
40664: ARRAY
40665: NONEQUAL
40666: IFFALSE 40678
// begin result := false ;
40668: LD_ADDR_VAR 0 3
40672: PUSH
40673: LD_INT 0
40675: ST_TO_ADDR
// break ;
40676: GO 40680
// end ;
40678: GO 40641
40680: POP
40681: POP
// end else
40682: GO 40692
// result := false ;
40684: LD_ADDR_VAR 0 3
40688: PUSH
40689: LD_INT 0
40691: ST_TO_ADDR
// end ;
40692: LD_VAR 0 3
40696: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40697: LD_INT 0
40699: PPUSH
40700: PPUSH
// if not array1 or not array2 then
40701: LD_VAR 0 1
40705: NOT
40706: PUSH
40707: LD_VAR 0 2
40711: NOT
40712: OR
40713: IFFALSE 40717
// exit ;
40715: GO 40781
// result := true ;
40717: LD_ADDR_VAR 0 3
40721: PUSH
40722: LD_INT 1
40724: ST_TO_ADDR
// for i = 1 to array1 do
40725: LD_ADDR_VAR 0 4
40729: PUSH
40730: DOUBLE
40731: LD_INT 1
40733: DEC
40734: ST_TO_ADDR
40735: LD_VAR 0 1
40739: PUSH
40740: FOR_TO
40741: IFFALSE 40779
// if array1 [ i ] <> array2 [ i ] then
40743: LD_VAR 0 1
40747: PUSH
40748: LD_VAR 0 4
40752: ARRAY
40753: PUSH
40754: LD_VAR 0 2
40758: PUSH
40759: LD_VAR 0 4
40763: ARRAY
40764: NONEQUAL
40765: IFFALSE 40777
// begin result := false ;
40767: LD_ADDR_VAR 0 3
40771: PUSH
40772: LD_INT 0
40774: ST_TO_ADDR
// break ;
40775: GO 40779
// end ;
40777: GO 40740
40779: POP
40780: POP
// end ;
40781: LD_VAR 0 3
40785: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40786: LD_INT 0
40788: PPUSH
40789: PPUSH
40790: PPUSH
// pom := GetBase ( fac ) ;
40791: LD_ADDR_VAR 0 5
40795: PUSH
40796: LD_VAR 0 1
40800: PPUSH
40801: CALL_OW 274
40805: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40806: LD_ADDR_VAR 0 4
40810: PUSH
40811: LD_VAR 0 2
40815: PUSH
40816: LD_INT 1
40818: ARRAY
40819: PPUSH
40820: LD_VAR 0 2
40824: PUSH
40825: LD_INT 2
40827: ARRAY
40828: PPUSH
40829: LD_VAR 0 2
40833: PUSH
40834: LD_INT 3
40836: ARRAY
40837: PPUSH
40838: LD_VAR 0 2
40842: PUSH
40843: LD_INT 4
40845: ARRAY
40846: PPUSH
40847: CALL_OW 449
40851: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40852: LD_ADDR_VAR 0 3
40856: PUSH
40857: LD_VAR 0 5
40861: PPUSH
40862: LD_INT 1
40864: PPUSH
40865: CALL_OW 275
40869: PUSH
40870: LD_VAR 0 4
40874: PUSH
40875: LD_INT 1
40877: ARRAY
40878: GREATEREQUAL
40879: PUSH
40880: LD_VAR 0 5
40884: PPUSH
40885: LD_INT 2
40887: PPUSH
40888: CALL_OW 275
40892: PUSH
40893: LD_VAR 0 4
40897: PUSH
40898: LD_INT 2
40900: ARRAY
40901: GREATEREQUAL
40902: AND
40903: PUSH
40904: LD_VAR 0 5
40908: PPUSH
40909: LD_INT 3
40911: PPUSH
40912: CALL_OW 275
40916: PUSH
40917: LD_VAR 0 4
40921: PUSH
40922: LD_INT 3
40924: ARRAY
40925: GREATEREQUAL
40926: AND
40927: ST_TO_ADDR
// end ;
40928: LD_VAR 0 3
40932: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40933: LD_INT 0
40935: PPUSH
40936: PPUSH
40937: PPUSH
40938: PPUSH
// pom := GetBase ( building ) ;
40939: LD_ADDR_VAR 0 3
40943: PUSH
40944: LD_VAR 0 1
40948: PPUSH
40949: CALL_OW 274
40953: ST_TO_ADDR
// if not pom then
40954: LD_VAR 0 3
40958: NOT
40959: IFFALSE 40963
// exit ;
40961: GO 41133
// btype := GetBType ( building ) ;
40963: LD_ADDR_VAR 0 5
40967: PUSH
40968: LD_VAR 0 1
40972: PPUSH
40973: CALL_OW 266
40977: ST_TO_ADDR
// if btype = b_armoury then
40978: LD_VAR 0 5
40982: PUSH
40983: LD_INT 4
40985: EQUAL
40986: IFFALSE 40996
// btype := b_barracks ;
40988: LD_ADDR_VAR 0 5
40992: PUSH
40993: LD_INT 5
40995: ST_TO_ADDR
// if btype = b_depot then
40996: LD_VAR 0 5
41000: PUSH
41001: LD_INT 0
41003: EQUAL
41004: IFFALSE 41014
// btype := b_warehouse ;
41006: LD_ADDR_VAR 0 5
41010: PUSH
41011: LD_INT 1
41013: ST_TO_ADDR
// if btype = b_workshop then
41014: LD_VAR 0 5
41018: PUSH
41019: LD_INT 2
41021: EQUAL
41022: IFFALSE 41032
// btype := b_factory ;
41024: LD_ADDR_VAR 0 5
41028: PUSH
41029: LD_INT 3
41031: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41032: LD_ADDR_VAR 0 4
41036: PUSH
41037: LD_VAR 0 5
41041: PPUSH
41042: LD_VAR 0 1
41046: PPUSH
41047: CALL_OW 248
41051: PPUSH
41052: CALL_OW 450
41056: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41057: LD_ADDR_VAR 0 2
41061: PUSH
41062: LD_VAR 0 3
41066: PPUSH
41067: LD_INT 1
41069: PPUSH
41070: CALL_OW 275
41074: PUSH
41075: LD_VAR 0 4
41079: PUSH
41080: LD_INT 1
41082: ARRAY
41083: GREATEREQUAL
41084: PUSH
41085: LD_VAR 0 3
41089: PPUSH
41090: LD_INT 2
41092: PPUSH
41093: CALL_OW 275
41097: PUSH
41098: LD_VAR 0 4
41102: PUSH
41103: LD_INT 2
41105: ARRAY
41106: GREATEREQUAL
41107: AND
41108: PUSH
41109: LD_VAR 0 3
41113: PPUSH
41114: LD_INT 3
41116: PPUSH
41117: CALL_OW 275
41121: PUSH
41122: LD_VAR 0 4
41126: PUSH
41127: LD_INT 3
41129: ARRAY
41130: GREATEREQUAL
41131: AND
41132: ST_TO_ADDR
// end ;
41133: LD_VAR 0 2
41137: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41138: LD_INT 0
41140: PPUSH
41141: PPUSH
41142: PPUSH
// pom := GetBase ( building ) ;
41143: LD_ADDR_VAR 0 4
41147: PUSH
41148: LD_VAR 0 1
41152: PPUSH
41153: CALL_OW 274
41157: ST_TO_ADDR
// if not pom then
41158: LD_VAR 0 4
41162: NOT
41163: IFFALSE 41167
// exit ;
41165: GO 41268
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41167: LD_ADDR_VAR 0 5
41171: PUSH
41172: LD_VAR 0 2
41176: PPUSH
41177: LD_VAR 0 1
41181: PPUSH
41182: CALL_OW 248
41186: PPUSH
41187: CALL_OW 450
41191: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41192: LD_ADDR_VAR 0 3
41196: PUSH
41197: LD_VAR 0 4
41201: PPUSH
41202: LD_INT 1
41204: PPUSH
41205: CALL_OW 275
41209: PUSH
41210: LD_VAR 0 5
41214: PUSH
41215: LD_INT 1
41217: ARRAY
41218: GREATEREQUAL
41219: PUSH
41220: LD_VAR 0 4
41224: PPUSH
41225: LD_INT 2
41227: PPUSH
41228: CALL_OW 275
41232: PUSH
41233: LD_VAR 0 5
41237: PUSH
41238: LD_INT 2
41240: ARRAY
41241: GREATEREQUAL
41242: AND
41243: PUSH
41244: LD_VAR 0 4
41248: PPUSH
41249: LD_INT 3
41251: PPUSH
41252: CALL_OW 275
41256: PUSH
41257: LD_VAR 0 5
41261: PUSH
41262: LD_INT 3
41264: ARRAY
41265: GREATEREQUAL
41266: AND
41267: ST_TO_ADDR
// end ;
41268: LD_VAR 0 3
41272: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41273: LD_INT 0
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
41279: PPUSH
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
// result := false ;
41286: LD_ADDR_VAR 0 8
41290: PUSH
41291: LD_INT 0
41293: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41294: LD_VAR 0 5
41298: NOT
41299: PUSH
41300: LD_VAR 0 1
41304: NOT
41305: OR
41306: PUSH
41307: LD_VAR 0 2
41311: NOT
41312: OR
41313: PUSH
41314: LD_VAR 0 3
41318: NOT
41319: OR
41320: IFFALSE 41324
// exit ;
41322: GO 42138
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41324: LD_ADDR_VAR 0 14
41328: PUSH
41329: LD_VAR 0 1
41333: PPUSH
41334: LD_VAR 0 2
41338: PPUSH
41339: LD_VAR 0 3
41343: PPUSH
41344: LD_VAR 0 4
41348: PPUSH
41349: LD_VAR 0 5
41353: PUSH
41354: LD_INT 1
41356: ARRAY
41357: PPUSH
41358: CALL_OW 248
41362: PPUSH
41363: LD_INT 0
41365: PPUSH
41366: CALL 43375 0 6
41370: ST_TO_ADDR
// if not hexes then
41371: LD_VAR 0 14
41375: NOT
41376: IFFALSE 41380
// exit ;
41378: GO 42138
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41380: LD_ADDR_VAR 0 17
41384: PUSH
41385: LD_VAR 0 5
41389: PPUSH
41390: LD_INT 22
41392: PUSH
41393: LD_VAR 0 13
41397: PPUSH
41398: CALL_OW 255
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: LD_INT 30
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 30
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: LIST
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PPUSH
41439: CALL_OW 72
41443: ST_TO_ADDR
// for i = 1 to hexes do
41444: LD_ADDR_VAR 0 9
41448: PUSH
41449: DOUBLE
41450: LD_INT 1
41452: DEC
41453: ST_TO_ADDR
41454: LD_VAR 0 14
41458: PUSH
41459: FOR_TO
41460: IFFALSE 42136
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41462: LD_ADDR_VAR 0 13
41466: PUSH
41467: LD_VAR 0 14
41471: PUSH
41472: LD_VAR 0 9
41476: ARRAY
41477: PUSH
41478: LD_INT 1
41480: ARRAY
41481: PPUSH
41482: LD_VAR 0 14
41486: PUSH
41487: LD_VAR 0 9
41491: ARRAY
41492: PUSH
41493: LD_INT 2
41495: ARRAY
41496: PPUSH
41497: CALL_OW 428
41501: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41502: LD_VAR 0 14
41506: PUSH
41507: LD_VAR 0 9
41511: ARRAY
41512: PUSH
41513: LD_INT 1
41515: ARRAY
41516: PPUSH
41517: LD_VAR 0 14
41521: PUSH
41522: LD_VAR 0 9
41526: ARRAY
41527: PUSH
41528: LD_INT 2
41530: ARRAY
41531: PPUSH
41532: CALL_OW 351
41536: PUSH
41537: LD_VAR 0 14
41541: PUSH
41542: LD_VAR 0 9
41546: ARRAY
41547: PUSH
41548: LD_INT 1
41550: ARRAY
41551: PPUSH
41552: LD_VAR 0 14
41556: PUSH
41557: LD_VAR 0 9
41561: ARRAY
41562: PUSH
41563: LD_INT 2
41565: ARRAY
41566: PPUSH
41567: CALL_OW 488
41571: NOT
41572: OR
41573: PUSH
41574: LD_VAR 0 13
41578: PPUSH
41579: CALL_OW 247
41583: PUSH
41584: LD_INT 3
41586: EQUAL
41587: OR
41588: IFFALSE 41594
// exit ;
41590: POP
41591: POP
41592: GO 42138
// if not tmp then
41594: LD_VAR 0 13
41598: NOT
41599: IFFALSE 41603
// continue ;
41601: GO 41459
// result := true ;
41603: LD_ADDR_VAR 0 8
41607: PUSH
41608: LD_INT 1
41610: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41611: LD_VAR 0 6
41615: PUSH
41616: LD_VAR 0 13
41620: PPUSH
41621: CALL_OW 247
41625: PUSH
41626: LD_INT 2
41628: EQUAL
41629: AND
41630: PUSH
41631: LD_VAR 0 13
41635: PPUSH
41636: CALL_OW 263
41640: PUSH
41641: LD_INT 1
41643: EQUAL
41644: AND
41645: IFFALSE 41809
// begin if IsDrivenBy ( tmp ) then
41647: LD_VAR 0 13
41651: PPUSH
41652: CALL_OW 311
41656: IFFALSE 41660
// continue ;
41658: GO 41459
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41660: LD_VAR 0 6
41664: PPUSH
41665: LD_INT 3
41667: PUSH
41668: LD_INT 60
41670: PUSH
41671: EMPTY
41672: LIST
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 3
41680: PUSH
41681: LD_INT 55
41683: PUSH
41684: EMPTY
41685: LIST
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PPUSH
41695: CALL_OW 72
41699: IFFALSE 41807
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41701: LD_ADDR_VAR 0 18
41705: PUSH
41706: LD_VAR 0 6
41710: PPUSH
41711: LD_INT 3
41713: PUSH
41714: LD_INT 60
41716: PUSH
41717: EMPTY
41718: LIST
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 3
41726: PUSH
41727: LD_INT 55
41729: PUSH
41730: EMPTY
41731: LIST
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PPUSH
41741: CALL_OW 72
41745: PUSH
41746: LD_INT 1
41748: ARRAY
41749: ST_TO_ADDR
// if IsInUnit ( driver ) then
41750: LD_VAR 0 18
41754: PPUSH
41755: CALL_OW 310
41759: IFFALSE 41770
// ComExit ( driver ) ;
41761: LD_VAR 0 18
41765: PPUSH
41766: CALL 66503 0 1
// AddComEnterUnit ( driver , tmp ) ;
41770: LD_VAR 0 18
41774: PPUSH
41775: LD_VAR 0 13
41779: PPUSH
41780: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41784: LD_VAR 0 18
41788: PPUSH
41789: LD_VAR 0 7
41793: PPUSH
41794: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41798: LD_VAR 0 18
41802: PPUSH
41803: CALL_OW 181
// end ; continue ;
41807: GO 41459
// end ; if not cleaners or not tmp in cleaners then
41809: LD_VAR 0 6
41813: NOT
41814: PUSH
41815: LD_VAR 0 13
41819: PUSH
41820: LD_VAR 0 6
41824: IN
41825: NOT
41826: OR
41827: IFFALSE 42134
// begin if dep then
41829: LD_VAR 0 17
41833: IFFALSE 41969
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41835: LD_ADDR_VAR 0 16
41839: PUSH
41840: LD_VAR 0 17
41844: PUSH
41845: LD_INT 1
41847: ARRAY
41848: PPUSH
41849: CALL_OW 250
41853: PPUSH
41854: LD_VAR 0 17
41858: PUSH
41859: LD_INT 1
41861: ARRAY
41862: PPUSH
41863: CALL_OW 254
41867: PPUSH
41868: LD_INT 5
41870: PPUSH
41871: CALL_OW 272
41875: PUSH
41876: LD_VAR 0 17
41880: PUSH
41881: LD_INT 1
41883: ARRAY
41884: PPUSH
41885: CALL_OW 251
41889: PPUSH
41890: LD_VAR 0 17
41894: PUSH
41895: LD_INT 1
41897: ARRAY
41898: PPUSH
41899: CALL_OW 254
41903: PPUSH
41904: LD_INT 5
41906: PPUSH
41907: CALL_OW 273
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41916: LD_VAR 0 16
41920: PUSH
41921: LD_INT 1
41923: ARRAY
41924: PPUSH
41925: LD_VAR 0 16
41929: PUSH
41930: LD_INT 2
41932: ARRAY
41933: PPUSH
41934: CALL_OW 488
41938: IFFALSE 41969
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41940: LD_VAR 0 13
41944: PPUSH
41945: LD_VAR 0 16
41949: PUSH
41950: LD_INT 1
41952: ARRAY
41953: PPUSH
41954: LD_VAR 0 16
41958: PUSH
41959: LD_INT 2
41961: ARRAY
41962: PPUSH
41963: CALL_OW 111
// continue ;
41967: GO 41459
// end ; end ; r := GetDir ( tmp ) ;
41969: LD_ADDR_VAR 0 15
41973: PUSH
41974: LD_VAR 0 13
41978: PPUSH
41979: CALL_OW 254
41983: ST_TO_ADDR
// if r = 5 then
41984: LD_VAR 0 15
41988: PUSH
41989: LD_INT 5
41991: EQUAL
41992: IFFALSE 42002
// r := 0 ;
41994: LD_ADDR_VAR 0 15
41998: PUSH
41999: LD_INT 0
42001: ST_TO_ADDR
// for j = r to 5 do
42002: LD_ADDR_VAR 0 10
42006: PUSH
42007: DOUBLE
42008: LD_VAR 0 15
42012: DEC
42013: ST_TO_ADDR
42014: LD_INT 5
42016: PUSH
42017: FOR_TO
42018: IFFALSE 42132
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42020: LD_ADDR_VAR 0 11
42024: PUSH
42025: LD_VAR 0 13
42029: PPUSH
42030: CALL_OW 250
42034: PPUSH
42035: LD_VAR 0 10
42039: PPUSH
42040: LD_INT 2
42042: PPUSH
42043: CALL_OW 272
42047: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42048: LD_ADDR_VAR 0 12
42052: PUSH
42053: LD_VAR 0 13
42057: PPUSH
42058: CALL_OW 251
42062: PPUSH
42063: LD_VAR 0 10
42067: PPUSH
42068: LD_INT 2
42070: PPUSH
42071: CALL_OW 273
42075: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42076: LD_VAR 0 11
42080: PPUSH
42081: LD_VAR 0 12
42085: PPUSH
42086: CALL_OW 488
42090: PUSH
42091: LD_VAR 0 11
42095: PPUSH
42096: LD_VAR 0 12
42100: PPUSH
42101: CALL_OW 428
42105: NOT
42106: AND
42107: IFFALSE 42130
// begin ComMoveXY ( tmp , _x , _y ) ;
42109: LD_VAR 0 13
42113: PPUSH
42114: LD_VAR 0 11
42118: PPUSH
42119: LD_VAR 0 12
42123: PPUSH
42124: CALL_OW 111
// break ;
42128: GO 42132
// end ; end ;
42130: GO 42017
42132: POP
42133: POP
// end ; end ;
42134: GO 41459
42136: POP
42137: POP
// end ;
42138: LD_VAR 0 8
42142: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42143: LD_INT 0
42145: PPUSH
// result := true ;
42146: LD_ADDR_VAR 0 3
42150: PUSH
42151: LD_INT 1
42153: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42154: LD_VAR 0 2
42158: PUSH
42159: LD_INT 24
42161: DOUBLE
42162: EQUAL
42163: IFTRUE 42173
42165: LD_INT 33
42167: DOUBLE
42168: EQUAL
42169: IFTRUE 42173
42171: GO 42198
42173: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42174: LD_ADDR_VAR 0 3
42178: PUSH
42179: LD_INT 32
42181: PPUSH
42182: LD_VAR 0 1
42186: PPUSH
42187: CALL_OW 321
42191: PUSH
42192: LD_INT 2
42194: EQUAL
42195: ST_TO_ADDR
42196: GO 42518
42198: LD_INT 20
42200: DOUBLE
42201: EQUAL
42202: IFTRUE 42206
42204: GO 42231
42206: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42207: LD_ADDR_VAR 0 3
42211: PUSH
42212: LD_INT 6
42214: PPUSH
42215: LD_VAR 0 1
42219: PPUSH
42220: CALL_OW 321
42224: PUSH
42225: LD_INT 2
42227: EQUAL
42228: ST_TO_ADDR
42229: GO 42518
42231: LD_INT 22
42233: DOUBLE
42234: EQUAL
42235: IFTRUE 42245
42237: LD_INT 36
42239: DOUBLE
42240: EQUAL
42241: IFTRUE 42245
42243: GO 42270
42245: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42246: LD_ADDR_VAR 0 3
42250: PUSH
42251: LD_INT 15
42253: PPUSH
42254: LD_VAR 0 1
42258: PPUSH
42259: CALL_OW 321
42263: PUSH
42264: LD_INT 2
42266: EQUAL
42267: ST_TO_ADDR
42268: GO 42518
42270: LD_INT 30
42272: DOUBLE
42273: EQUAL
42274: IFTRUE 42278
42276: GO 42303
42278: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42279: LD_ADDR_VAR 0 3
42283: PUSH
42284: LD_INT 20
42286: PPUSH
42287: LD_VAR 0 1
42291: PPUSH
42292: CALL_OW 321
42296: PUSH
42297: LD_INT 2
42299: EQUAL
42300: ST_TO_ADDR
42301: GO 42518
42303: LD_INT 28
42305: DOUBLE
42306: EQUAL
42307: IFTRUE 42317
42309: LD_INT 21
42311: DOUBLE
42312: EQUAL
42313: IFTRUE 42317
42315: GO 42342
42317: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42318: LD_ADDR_VAR 0 3
42322: PUSH
42323: LD_INT 21
42325: PPUSH
42326: LD_VAR 0 1
42330: PPUSH
42331: CALL_OW 321
42335: PUSH
42336: LD_INT 2
42338: EQUAL
42339: ST_TO_ADDR
42340: GO 42518
42342: LD_INT 16
42344: DOUBLE
42345: EQUAL
42346: IFTRUE 42350
42348: GO 42377
42350: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42351: LD_ADDR_VAR 0 3
42355: PUSH
42356: LD_EXP 58
42360: PPUSH
42361: LD_VAR 0 1
42365: PPUSH
42366: CALL_OW 321
42370: PUSH
42371: LD_INT 2
42373: EQUAL
42374: ST_TO_ADDR
42375: GO 42518
42377: LD_INT 19
42379: DOUBLE
42380: EQUAL
42381: IFTRUE 42391
42383: LD_INT 23
42385: DOUBLE
42386: EQUAL
42387: IFTRUE 42391
42389: GO 42418
42391: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42392: LD_ADDR_VAR 0 3
42396: PUSH
42397: LD_EXP 57
42401: PPUSH
42402: LD_VAR 0 1
42406: PPUSH
42407: CALL_OW 321
42411: PUSH
42412: LD_INT 2
42414: EQUAL
42415: ST_TO_ADDR
42416: GO 42518
42418: LD_INT 17
42420: DOUBLE
42421: EQUAL
42422: IFTRUE 42426
42424: GO 42451
42426: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42427: LD_ADDR_VAR 0 3
42431: PUSH
42432: LD_INT 39
42434: PPUSH
42435: LD_VAR 0 1
42439: PPUSH
42440: CALL_OW 321
42444: PUSH
42445: LD_INT 2
42447: EQUAL
42448: ST_TO_ADDR
42449: GO 42518
42451: LD_INT 18
42453: DOUBLE
42454: EQUAL
42455: IFTRUE 42459
42457: GO 42484
42459: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42460: LD_ADDR_VAR 0 3
42464: PUSH
42465: LD_INT 40
42467: PPUSH
42468: LD_VAR 0 1
42472: PPUSH
42473: CALL_OW 321
42477: PUSH
42478: LD_INT 2
42480: EQUAL
42481: ST_TO_ADDR
42482: GO 42518
42484: LD_INT 27
42486: DOUBLE
42487: EQUAL
42488: IFTRUE 42492
42490: GO 42517
42492: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42493: LD_ADDR_VAR 0 3
42497: PUSH
42498: LD_INT 35
42500: PPUSH
42501: LD_VAR 0 1
42505: PPUSH
42506: CALL_OW 321
42510: PUSH
42511: LD_INT 2
42513: EQUAL
42514: ST_TO_ADDR
42515: GO 42518
42517: POP
// end ;
42518: LD_VAR 0 3
42522: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42523: LD_INT 0
42525: PPUSH
42526: PPUSH
42527: PPUSH
42528: PPUSH
42529: PPUSH
42530: PPUSH
42531: PPUSH
42532: PPUSH
42533: PPUSH
42534: PPUSH
42535: PPUSH
// result := false ;
42536: LD_ADDR_VAR 0 6
42540: PUSH
42541: LD_INT 0
42543: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42544: LD_VAR 0 1
42548: NOT
42549: PUSH
42550: LD_VAR 0 1
42554: PPUSH
42555: CALL_OW 266
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: IN
42570: NOT
42571: OR
42572: PUSH
42573: LD_VAR 0 2
42577: NOT
42578: OR
42579: PUSH
42580: LD_VAR 0 5
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: LD_INT 4
42599: PUSH
42600: LD_INT 5
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: IN
42611: NOT
42612: OR
42613: PUSH
42614: LD_VAR 0 3
42618: PPUSH
42619: LD_VAR 0 4
42623: PPUSH
42624: CALL_OW 488
42628: NOT
42629: OR
42630: IFFALSE 42634
// exit ;
42632: GO 43370
// side := GetSide ( depot ) ;
42634: LD_ADDR_VAR 0 9
42638: PUSH
42639: LD_VAR 0 1
42643: PPUSH
42644: CALL_OW 255
42648: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42649: LD_VAR 0 9
42653: PPUSH
42654: LD_VAR 0 2
42658: PPUSH
42659: CALL 42143 0 2
42663: NOT
42664: IFFALSE 42668
// exit ;
42666: GO 43370
// pom := GetBase ( depot ) ;
42668: LD_ADDR_VAR 0 10
42672: PUSH
42673: LD_VAR 0 1
42677: PPUSH
42678: CALL_OW 274
42682: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42683: LD_ADDR_VAR 0 11
42687: PUSH
42688: LD_VAR 0 2
42692: PPUSH
42693: LD_VAR 0 1
42697: PPUSH
42698: CALL_OW 248
42702: PPUSH
42703: CALL_OW 450
42707: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42708: LD_VAR 0 10
42712: PPUSH
42713: LD_INT 1
42715: PPUSH
42716: CALL_OW 275
42720: PUSH
42721: LD_VAR 0 11
42725: PUSH
42726: LD_INT 1
42728: ARRAY
42729: GREATEREQUAL
42730: PUSH
42731: LD_VAR 0 10
42735: PPUSH
42736: LD_INT 2
42738: PPUSH
42739: CALL_OW 275
42743: PUSH
42744: LD_VAR 0 11
42748: PUSH
42749: LD_INT 2
42751: ARRAY
42752: GREATEREQUAL
42753: AND
42754: PUSH
42755: LD_VAR 0 10
42759: PPUSH
42760: LD_INT 3
42762: PPUSH
42763: CALL_OW 275
42767: PUSH
42768: LD_VAR 0 11
42772: PUSH
42773: LD_INT 3
42775: ARRAY
42776: GREATEREQUAL
42777: AND
42778: NOT
42779: IFFALSE 42783
// exit ;
42781: GO 43370
// if GetBType ( depot ) = b_depot then
42783: LD_VAR 0 1
42787: PPUSH
42788: CALL_OW 266
42792: PUSH
42793: LD_INT 0
42795: EQUAL
42796: IFFALSE 42808
// dist := 28 else
42798: LD_ADDR_VAR 0 14
42802: PUSH
42803: LD_INT 28
42805: ST_TO_ADDR
42806: GO 42816
// dist := 36 ;
42808: LD_ADDR_VAR 0 14
42812: PUSH
42813: LD_INT 36
42815: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42816: LD_VAR 0 1
42820: PPUSH
42821: LD_VAR 0 3
42825: PPUSH
42826: LD_VAR 0 4
42830: PPUSH
42831: CALL_OW 297
42835: PUSH
42836: LD_VAR 0 14
42840: GREATER
42841: IFFALSE 42845
// exit ;
42843: GO 43370
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42845: LD_ADDR_VAR 0 12
42849: PUSH
42850: LD_VAR 0 2
42854: PPUSH
42855: LD_VAR 0 3
42859: PPUSH
42860: LD_VAR 0 4
42864: PPUSH
42865: LD_VAR 0 5
42869: PPUSH
42870: LD_VAR 0 1
42874: PPUSH
42875: CALL_OW 248
42879: PPUSH
42880: LD_INT 0
42882: PPUSH
42883: CALL 43375 0 6
42887: ST_TO_ADDR
// if not hexes then
42888: LD_VAR 0 12
42892: NOT
42893: IFFALSE 42897
// exit ;
42895: GO 43370
// hex := GetHexInfo ( x , y ) ;
42897: LD_ADDR_VAR 0 15
42901: PUSH
42902: LD_VAR 0 3
42906: PPUSH
42907: LD_VAR 0 4
42911: PPUSH
42912: CALL_OW 546
42916: ST_TO_ADDR
// if hex [ 1 ] then
42917: LD_VAR 0 15
42921: PUSH
42922: LD_INT 1
42924: ARRAY
42925: IFFALSE 42929
// exit ;
42927: GO 43370
// height := hex [ 2 ] ;
42929: LD_ADDR_VAR 0 13
42933: PUSH
42934: LD_VAR 0 15
42938: PUSH
42939: LD_INT 2
42941: ARRAY
42942: ST_TO_ADDR
// for i = 1 to hexes do
42943: LD_ADDR_VAR 0 7
42947: PUSH
42948: DOUBLE
42949: LD_INT 1
42951: DEC
42952: ST_TO_ADDR
42953: LD_VAR 0 12
42957: PUSH
42958: FOR_TO
42959: IFFALSE 43289
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42961: LD_VAR 0 12
42965: PUSH
42966: LD_VAR 0 7
42970: ARRAY
42971: PUSH
42972: LD_INT 1
42974: ARRAY
42975: PPUSH
42976: LD_VAR 0 12
42980: PUSH
42981: LD_VAR 0 7
42985: ARRAY
42986: PUSH
42987: LD_INT 2
42989: ARRAY
42990: PPUSH
42991: CALL_OW 488
42995: NOT
42996: PUSH
42997: LD_VAR 0 12
43001: PUSH
43002: LD_VAR 0 7
43006: ARRAY
43007: PUSH
43008: LD_INT 1
43010: ARRAY
43011: PPUSH
43012: LD_VAR 0 12
43016: PUSH
43017: LD_VAR 0 7
43021: ARRAY
43022: PUSH
43023: LD_INT 2
43025: ARRAY
43026: PPUSH
43027: CALL_OW 428
43031: PUSH
43032: LD_INT 0
43034: GREATER
43035: OR
43036: PUSH
43037: LD_VAR 0 12
43041: PUSH
43042: LD_VAR 0 7
43046: ARRAY
43047: PUSH
43048: LD_INT 1
43050: ARRAY
43051: PPUSH
43052: LD_VAR 0 12
43056: PUSH
43057: LD_VAR 0 7
43061: ARRAY
43062: PUSH
43063: LD_INT 2
43065: ARRAY
43066: PPUSH
43067: CALL_OW 351
43071: OR
43072: IFFALSE 43078
// exit ;
43074: POP
43075: POP
43076: GO 43370
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43078: LD_ADDR_VAR 0 8
43082: PUSH
43083: LD_VAR 0 12
43087: PUSH
43088: LD_VAR 0 7
43092: ARRAY
43093: PUSH
43094: LD_INT 1
43096: ARRAY
43097: PPUSH
43098: LD_VAR 0 12
43102: PUSH
43103: LD_VAR 0 7
43107: ARRAY
43108: PUSH
43109: LD_INT 2
43111: ARRAY
43112: PPUSH
43113: CALL_OW 546
43117: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43118: LD_VAR 0 8
43122: PUSH
43123: LD_INT 1
43125: ARRAY
43126: PUSH
43127: LD_VAR 0 8
43131: PUSH
43132: LD_INT 2
43134: ARRAY
43135: PUSH
43136: LD_VAR 0 13
43140: PUSH
43141: LD_INT 2
43143: PLUS
43144: GREATER
43145: OR
43146: PUSH
43147: LD_VAR 0 8
43151: PUSH
43152: LD_INT 2
43154: ARRAY
43155: PUSH
43156: LD_VAR 0 13
43160: PUSH
43161: LD_INT 2
43163: MINUS
43164: LESS
43165: OR
43166: PUSH
43167: LD_VAR 0 8
43171: PUSH
43172: LD_INT 3
43174: ARRAY
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 8
43181: PUSH
43182: LD_INT 9
43184: PUSH
43185: LD_INT 10
43187: PUSH
43188: LD_INT 11
43190: PUSH
43191: LD_INT 12
43193: PUSH
43194: LD_INT 13
43196: PUSH
43197: LD_INT 16
43199: PUSH
43200: LD_INT 17
43202: PUSH
43203: LD_INT 18
43205: PUSH
43206: LD_INT 19
43208: PUSH
43209: LD_INT 20
43211: PUSH
43212: LD_INT 21
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: IN
43230: NOT
43231: OR
43232: PUSH
43233: LD_VAR 0 8
43237: PUSH
43238: LD_INT 5
43240: ARRAY
43241: NOT
43242: OR
43243: PUSH
43244: LD_VAR 0 8
43248: PUSH
43249: LD_INT 6
43251: ARRAY
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 2
43258: PUSH
43259: LD_INT 7
43261: PUSH
43262: LD_INT 9
43264: PUSH
43265: LD_INT 10
43267: PUSH
43268: LD_INT 11
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: IN
43279: NOT
43280: OR
43281: IFFALSE 43287
// exit ;
43283: POP
43284: POP
43285: GO 43370
// end ;
43287: GO 42958
43289: POP
43290: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43291: LD_VAR 0 9
43295: PPUSH
43296: LD_VAR 0 3
43300: PPUSH
43301: LD_VAR 0 4
43305: PPUSH
43306: LD_INT 20
43308: PPUSH
43309: CALL 35316 0 4
43313: PUSH
43314: LD_INT 4
43316: ARRAY
43317: IFFALSE 43321
// exit ;
43319: GO 43370
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43321: LD_VAR 0 2
43325: PUSH
43326: LD_INT 29
43328: PUSH
43329: LD_INT 30
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: IN
43336: PUSH
43337: LD_VAR 0 3
43341: PPUSH
43342: LD_VAR 0 4
43346: PPUSH
43347: LD_VAR 0 9
43351: PPUSH
43352: CALL_OW 440
43356: NOT
43357: AND
43358: IFFALSE 43362
// exit ;
43360: GO 43370
// result := true ;
43362: LD_ADDR_VAR 0 6
43366: PUSH
43367: LD_INT 1
43369: ST_TO_ADDR
// end ;
43370: LD_VAR 0 6
43374: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43375: LD_INT 0
43377: PPUSH
43378: PPUSH
43379: PPUSH
43380: PPUSH
43381: PPUSH
43382: PPUSH
43383: PPUSH
43384: PPUSH
43385: PPUSH
43386: PPUSH
43387: PPUSH
43388: PPUSH
43389: PPUSH
43390: PPUSH
43391: PPUSH
43392: PPUSH
43393: PPUSH
43394: PPUSH
43395: PPUSH
43396: PPUSH
43397: PPUSH
43398: PPUSH
43399: PPUSH
43400: PPUSH
43401: PPUSH
43402: PPUSH
43403: PPUSH
43404: PPUSH
43405: PPUSH
43406: PPUSH
43407: PPUSH
43408: PPUSH
43409: PPUSH
43410: PPUSH
43411: PPUSH
43412: PPUSH
43413: PPUSH
43414: PPUSH
43415: PPUSH
43416: PPUSH
43417: PPUSH
43418: PPUSH
43419: PPUSH
43420: PPUSH
43421: PPUSH
43422: PPUSH
43423: PPUSH
43424: PPUSH
43425: PPUSH
43426: PPUSH
43427: PPUSH
43428: PPUSH
43429: PPUSH
43430: PPUSH
43431: PPUSH
43432: PPUSH
43433: PPUSH
43434: PPUSH
// result = [ ] ;
43435: LD_ADDR_VAR 0 7
43439: PUSH
43440: EMPTY
43441: ST_TO_ADDR
// temp_list = [ ] ;
43442: LD_ADDR_VAR 0 9
43446: PUSH
43447: EMPTY
43448: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43449: LD_VAR 0 4
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: LD_INT 3
43465: PUSH
43466: LD_INT 4
43468: PUSH
43469: LD_INT 5
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: IN
43480: NOT
43481: PUSH
43482: LD_VAR 0 1
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: IN
43497: PUSH
43498: LD_VAR 0 5
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: LD_INT 2
43508: PUSH
43509: LD_INT 3
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: LIST
43516: IN
43517: NOT
43518: AND
43519: OR
43520: IFFALSE 43524
// exit ;
43522: GO 61915
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43524: LD_VAR 0 1
43528: PUSH
43529: LD_INT 6
43531: PUSH
43532: LD_INT 7
43534: PUSH
43535: LD_INT 8
43537: PUSH
43538: LD_INT 13
43540: PUSH
43541: LD_INT 12
43543: PUSH
43544: LD_INT 15
43546: PUSH
43547: LD_INT 11
43549: PUSH
43550: LD_INT 14
43552: PUSH
43553: LD_INT 10
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: IN
43567: IFFALSE 43577
// btype = b_lab ;
43569: LD_ADDR_VAR 0 1
43573: PUSH
43574: LD_INT 6
43576: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43577: LD_VAR 0 6
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 1
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: LIST
43595: IN
43596: NOT
43597: PUSH
43598: LD_VAR 0 1
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 3
43614: PUSH
43615: LD_INT 6
43617: PUSH
43618: LD_INT 36
43620: PUSH
43621: LD_INT 4
43623: PUSH
43624: LD_INT 5
43626: PUSH
43627: LD_INT 31
43629: PUSH
43630: LD_INT 32
43632: PUSH
43633: LD_INT 33
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: IN
43649: NOT
43650: PUSH
43651: LD_VAR 0 6
43655: PUSH
43656: LD_INT 1
43658: EQUAL
43659: AND
43660: OR
43661: PUSH
43662: LD_VAR 0 1
43666: PUSH
43667: LD_INT 2
43669: PUSH
43670: LD_INT 3
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: IN
43677: NOT
43678: PUSH
43679: LD_VAR 0 6
43683: PUSH
43684: LD_INT 2
43686: EQUAL
43687: AND
43688: OR
43689: IFFALSE 43699
// mode = 0 ;
43691: LD_ADDR_VAR 0 6
43695: PUSH
43696: LD_INT 0
43698: ST_TO_ADDR
// case mode of 0 :
43699: LD_VAR 0 6
43703: PUSH
43704: LD_INT 0
43706: DOUBLE
43707: EQUAL
43708: IFTRUE 43712
43710: GO 55165
43712: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43713: LD_ADDR_VAR 0 11
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: LD_INT 1
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: NEG
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 2
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: LD_INT 3
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: LD_INT 3
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: LD_INT 2
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43906: LD_ADDR_VAR 0 12
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 2
44029: NEG
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 3
44063: NEG
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 3
44074: NEG
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44102: LD_ADDR_VAR 0 13
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: NEG
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: LD_INT 2
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: LD_INT 3
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 3
44261: NEG
44262: PUSH
44263: LD_INT 2
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 3
44273: NEG
44274: PUSH
44275: LD_INT 3
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44301: LD_ADDR_VAR 0 14
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: LD_INT 2
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: LD_INT 2
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 2
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: LD_INT 3
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 3
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44497: LD_ADDR_VAR 0 15
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 3
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 3
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44690: LD_ADDR_VAR 0 16
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: NEG
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 3
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 3
44847: PUSH
44848: LD_INT 3
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: LD_INT 3
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44883: LD_ADDR_VAR 0 17
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 2
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45113: LD_ADDR_VAR 0 18
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: LD_INT 2
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: LD_INT 2
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 2
45300: NEG
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 2
45312: NEG
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45343: LD_ADDR_VAR 0 19
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45573: LD_ADDR_VAR 0 20
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: LD_INT 2
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: NEG
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45803: LD_ADDR_VAR 0 21
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 2
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 2
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46033: LD_ADDR_VAR 0 22
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 1
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: LD_INT 2
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 2
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 2
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46263: LD_ADDR_VAR 0 23
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: NEG
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: NEG
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: LD_INT 3
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: LD_INT 3
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46543: LD_ADDR_VAR 0 24
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 3
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 3
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46819: LD_ADDR_VAR 0 25
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 3
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 3
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: LD_INT 3
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 3
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47093: LD_ADDR_VAR 0 26
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 0
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: LD_INT 2
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 2
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: LD_INT 3
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 3
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: NEG
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47369: LD_ADDR_VAR 0 27
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 3
47602: NEG
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 3
47614: NEG
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47649: LD_ADDR_VAR 0 28
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 2
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: LD_INT 3
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 3
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 3
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 3
47896: NEG
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47931: LD_ADDR_VAR 0 29
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: NEG
48122: PUSH
48123: LD_INT 3
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 3
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 3
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 3
48175: NEG
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48210: LD_ADDR_VAR 0 30
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: LD_INT 3
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: LD_INT 2
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 3
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: LD_INT 3
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: NEG
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48488: LD_ADDR_VAR 0 31
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: LD_INT 2
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: LD_INT 2
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: NEG
48678: PUSH
48679: LD_INT 3
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 2
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 3
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: LD_INT 3
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 3
48731: NEG
48732: PUSH
48733: LD_INT 2
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48766: LD_ADDR_VAR 0 32
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 2
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 3
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 3
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 3
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 3
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49044: LD_ADDR_VAR 0 33
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 2
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: LD_INT 3
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 3
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: LD_INT 3
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 3
49288: NEG
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49323: LD_ADDR_VAR 0 34
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 2
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 2
49479: NEG
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: NEG
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: LD_INT 3
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 3
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: LD_INT 3
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 3
49568: NEG
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49603: LD_ADDR_VAR 0 35
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: NEG
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49715: LD_ADDR_VAR 0 36
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 2
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49827: LD_ADDR_VAR 0 37
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49939: LD_ADDR_VAR 0 38
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 2
50030: NEG
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50051: LD_ADDR_VAR 0 39
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50163: LD_ADDR_VAR 0 40
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50275: LD_ADDR_VAR 0 41
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 2
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 2
50430: NEG
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: LD_INT 2
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: LD_INT 3
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 3
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 3
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 3
50508: PUSH
50509: LD_INT 2
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 3
50518: PUSH
50519: LD_INT 3
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: LD_INT 3
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 3
50549: NEG
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 3
50560: NEG
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 3
50572: NEG
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 3
50584: NEG
50585: PUSH
50586: LD_INT 3
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50625: LD_ADDR_VAR 0 42
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: LD_INT 2
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: LD_INT 3
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 3
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 3
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 3
50861: PUSH
50862: LD_INT 2
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 3
50871: PUSH
50872: LD_INT 3
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: LD_INT 3
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 3
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: LD_INT 3
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 3
50922: NEG
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 3
50934: NEG
50935: PUSH
50936: LD_INT 3
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50975: LD_ADDR_VAR 0 43
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: LD_INT 2
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 2
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 2
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 3
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 3
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 3
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 3
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 3
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 3
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: NEG
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51323: LD_ADDR_VAR 0 44
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: LD_INT 3
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 3
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 3
51556: PUSH
51557: LD_INT 2
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 3
51566: PUSH
51567: LD_INT 3
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: LD_INT 3
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 3
51597: NEG
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 3
51608: NEG
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 3
51620: NEG
51621: PUSH
51622: LD_INT 2
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 3
51632: NEG
51633: PUSH
51634: LD_INT 3
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51673: LD_ADDR_VAR 0 45
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 2
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 2
51851: NEG
51852: PUSH
51853: LD_INT 2
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: LD_INT 3
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: LD_INT 3
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 3
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 3
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 3
51919: PUSH
51920: LD_INT 3
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 3
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 3
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 3
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 3
51970: NEG
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 3
51982: NEG
51983: PUSH
51984: LD_INT 3
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52023: LD_ADDR_VAR 0 46
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: LD_INT 3
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 3
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 3
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 3
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 3
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 3
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: LD_INT 2
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 2
52308: NEG
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 3
52319: NEG
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 3
52330: NEG
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52371: LD_ADDR_VAR 0 47
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: NEG
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52522: LD_ADDR_VAR 0 48
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52669: LD_ADDR_VAR 0 49
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52813: LD_ADDR_VAR 0 50
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 2
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52957: LD_ADDR_VAR 0 51
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 2
53069: NEG
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53104: LD_ADDR_VAR 0 52
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 2
53208: NEG
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: NEG
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: LD_INT 2
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53255: LD_ADDR_VAR 0 53
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: NEG
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53485: LD_ADDR_VAR 0 54
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 2
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 2
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53715: LD_ADDR_VAR 0 55
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: LD_INT 2
53800: NEG
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 2
53891: NEG
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53945: LD_ADDR_VAR 0 56
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: LD_INT 2
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 2
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 2
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 2
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 2
54121: NEG
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 2
54132: NEG
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: LD_INT 2
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54175: LD_ADDR_VAR 0 57
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 2
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54405: LD_ADDR_VAR 0 58
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: NEG
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54635: LD_ADDR_VAR 0 59
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54723: LD_ADDR_VAR 0 60
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54811: LD_ADDR_VAR 0 61
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54899: LD_ADDR_VAR 0 62
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54987: LD_ADDR_VAR 0 63
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55075: LD_ADDR_VAR 0 64
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: ST_TO_ADDR
// end ; 1 :
55163: GO 61060
55165: LD_INT 1
55167: DOUBLE
55168: EQUAL
55169: IFTRUE 55173
55171: GO 57796
55173: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55174: LD_ADDR_VAR 0 11
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: LD_INT 3
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: LD_INT 3
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55218: LD_ADDR_VAR 0 12
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 3
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: LIST
55258: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55259: LD_ADDR_VAR 0 13
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: LIST
55298: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55299: LD_ADDR_VAR 0 14
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: LD_INT 3
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: LIST
55339: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55340: LD_ADDR_VAR 0 15
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 3
55358: NEG
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 3
55369: NEG
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55384: LD_ADDR_VAR 0 16
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: LD_INT 3
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 3
55403: NEG
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 3
55415: NEG
55416: PUSH
55417: LD_INT 3
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55430: LD_ADDR_VAR 0 17
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 3
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 2
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55474: LD_ADDR_VAR 0 18
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 3
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: LIST
55514: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55515: LD_ADDR_VAR 0 19
55519: PUSH
55520: LD_INT 3
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: LIST
55554: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55555: LD_ADDR_VAR 0 20
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 3
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: LIST
55595: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55596: LD_ADDR_VAR 0 21
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 3
55614: NEG
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 3
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55640: LD_ADDR_VAR 0 22
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: LD_INT 3
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 3
55659: NEG
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 3
55671: NEG
55672: PUSH
55673: LD_INT 3
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: LIST
55685: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55686: LD_ADDR_VAR 0 23
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: LD_INT 3
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 4
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: LD_INT 3
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: LIST
55729: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55730: LD_ADDR_VAR 0 24
55734: PUSH
55735: LD_INT 3
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 3
55747: PUSH
55748: LD_INT 1
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 4
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: LIST
55770: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55771: LD_ADDR_VAR 0 25
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: LD_INT 3
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 4
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 3
55798: PUSH
55799: LD_INT 4
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55811: LD_ADDR_VAR 0 26
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 3
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: LD_INT 4
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: LIST
55851: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55852: LD_ADDR_VAR 0 27
55856: PUSH
55857: LD_INT 3
55859: NEG
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 3
55870: NEG
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 4
55881: NEG
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: LIST
55895: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55896: LD_ADDR_VAR 0 28
55900: PUSH
55901: LD_INT 3
55903: NEG
55904: PUSH
55905: LD_INT 3
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 3
55915: NEG
55916: PUSH
55917: LD_INT 4
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 4
55927: NEG
55928: PUSH
55929: LD_INT 3
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: LIST
55941: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55942: LD_ADDR_VAR 0 29
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 3
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: LD_INT 2
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 4
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 4
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: LD_INT 3
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: LD_INT 5
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 5
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 4
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 6
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 6
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: LD_INT 5
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56097: LD_ADDR_VAR 0 30
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 3
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 3
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 3
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 4
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 4
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 4
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 5
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 5
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 5
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 6
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 6
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56240: LD_ADDR_VAR 0 31
56244: PUSH
56245: LD_INT 3
56247: PUSH
56248: LD_INT 2
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: LD_INT 3
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: LD_INT 3
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 4
56277: PUSH
56278: LD_INT 3
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 4
56287: PUSH
56288: LD_INT 4
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 3
56297: PUSH
56298: LD_INT 4
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 5
56307: PUSH
56308: LD_INT 4
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 5
56317: PUSH
56318: LD_INT 5
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 4
56327: PUSH
56328: LD_INT 5
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 6
56337: PUSH
56338: LD_INT 5
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 6
56347: PUSH
56348: LD_INT 6
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 5
56357: PUSH
56358: LD_INT 6
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56379: LD_ADDR_VAR 0 32
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 3
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: LD_INT 4
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: LD_INT 4
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: LD_INT 3
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: LD_INT 5
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 5
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: LD_INT 4
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 6
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 6
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: LD_INT 5
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56522: LD_ADDR_VAR 0 33
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 3
56540: NEG
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 3
56551: NEG
56552: PUSH
56553: LD_INT 1
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 3
56563: NEG
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 4
56574: NEG
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 4
56585: NEG
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 4
56597: NEG
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 5
56608: NEG
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 5
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 5
56631: NEG
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 6
56642: NEG
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 6
56653: NEG
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56677: LD_ADDR_VAR 0 34
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 3
56696: NEG
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 3
56708: NEG
56709: PUSH
56710: LD_INT 3
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 3
56720: NEG
56721: PUSH
56722: LD_INT 4
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 4
56732: NEG
56733: PUSH
56734: LD_INT 3
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 4
56744: NEG
56745: PUSH
56746: LD_INT 4
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 4
56756: NEG
56757: PUSH
56758: LD_INT 5
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 5
56768: NEG
56769: PUSH
56770: LD_INT 4
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 5
56780: NEG
56781: PUSH
56782: LD_INT 5
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 5
56792: NEG
56793: PUSH
56794: LD_INT 6
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 6
56804: NEG
56805: PUSH
56806: LD_INT 5
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 6
56816: NEG
56817: PUSH
56818: LD_INT 6
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56840: LD_ADDR_VAR 0 41
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: LD_INT 2
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: LIST
56883: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56884: LD_ADDR_VAR 0 42
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 3
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: LIST
56924: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56925: LD_ADDR_VAR 0 43
56929: PUSH
56930: LD_INT 2
56932: PUSH
56933: LD_INT 2
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: LIST
56964: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56965: LD_ADDR_VAR 0 44
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 3
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: LIST
57005: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57006: LD_ADDR_VAR 0 45
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 3
57035: NEG
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: LIST
57049: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57050: LD_ADDR_VAR 0 46
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 2
57069: NEG
57070: PUSH
57071: LD_INT 3
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 3
57081: NEG
57082: PUSH
57083: LD_INT 2
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: LIST
57095: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57096: LD_ADDR_VAR 0 47
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: LD_INT 3
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: LD_INT 3
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57129: LD_ADDR_VAR 0 48
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57160: LD_ADDR_VAR 0 49
57164: PUSH
57165: LD_INT 3
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: LD_INT 2
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57189: LD_ADDR_VAR 0 50
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: LD_INT 3
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 3
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57218: LD_ADDR_VAR 0 51
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: LD_INT 2
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57249: LD_ADDR_VAR 0 52
57253: PUSH
57254: LD_INT 3
57256: NEG
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 3
57268: NEG
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57282: LD_ADDR_VAR 0 53
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 3
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: LD_INT 3
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57326: LD_ADDR_VAR 0 54
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 3
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: LIST
57366: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57367: LD_ADDR_VAR 0 55
57371: PUSH
57372: LD_INT 3
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 3
57384: PUSH
57385: LD_INT 3
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: LD_INT 3
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: LIST
57406: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57407: LD_ADDR_VAR 0 56
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: LD_INT 3
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: LIST
57447: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57448: LD_ADDR_VAR 0 57
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 3
57466: NEG
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 3
57477: NEG
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: LIST
57491: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57492: LD_ADDR_VAR 0 58
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: LD_INT 3
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 3
57511: NEG
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 3
57523: NEG
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: LIST
57537: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57538: LD_ADDR_VAR 0 59
57542: PUSH
57543: LD_INT 1
57545: NEG
57546: PUSH
57547: LD_INT 2
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: LD_INT 2
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: LIST
57581: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57582: LD_ADDR_VAR 0 60
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: LIST
57622: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57623: LD_ADDR_VAR 0 61
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: LIST
57662: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57663: LD_ADDR_VAR 0 62
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: LD_INT 2
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: LIST
57703: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57704: LD_ADDR_VAR 0 63
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: LIST
57747: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57748: LD_ADDR_VAR 0 64
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: LD_INT 2
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: LD_INT 2
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: ST_TO_ADDR
// end ; 2 :
57794: GO 61060
57796: LD_INT 2
57798: DOUBLE
57799: EQUAL
57800: IFTRUE 57804
57802: GO 61059
57804: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57805: LD_ADDR_VAR 0 29
57809: PUSH
57810: LD_INT 4
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 4
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 5
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 5
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 4
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 3
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 3
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: LD_INT 2
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 5
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 3
57905: PUSH
57906: LD_INT 3
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 3
57915: PUSH
57916: LD_INT 2
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 4
57925: PUSH
57926: LD_INT 3
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 4
57935: PUSH
57936: LD_INT 4
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 3
57945: PUSH
57946: LD_INT 4
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: LD_INT 3
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: LD_INT 2
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 4
57975: PUSH
57976: LD_INT 2
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: LD_INT 4
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 4
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 3
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: LD_INT 4
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: LD_INT 5
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 5
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 4
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 3
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: LD_INT 5
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 2
58077: NEG
58078: PUSH
58079: LD_INT 3
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 3
58099: NEG
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 3
58133: NEG
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 4
58144: NEG
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 4
58155: NEG
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 4
58167: NEG
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 2
58179: NEG
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 4
58190: NEG
58191: PUSH
58192: LD_INT 4
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 4
58202: NEG
58203: PUSH
58204: LD_INT 5
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 3
58214: NEG
58215: PUSH
58216: LD_INT 4
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 3
58226: NEG
58227: PUSH
58228: LD_INT 3
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 4
58238: NEG
58239: PUSH
58240: LD_INT 3
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 5
58250: NEG
58251: PUSH
58252: LD_INT 4
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 5
58262: NEG
58263: PUSH
58264: LD_INT 5
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 3
58274: NEG
58275: PUSH
58276: LD_INT 5
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 5
58286: NEG
58287: PUSH
58288: LD_INT 3
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58343: LD_ADDR_VAR 0 30
58347: PUSH
58348: LD_INT 4
58350: PUSH
58351: LD_INT 4
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 4
58360: PUSH
58361: LD_INT 3
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 5
58370: PUSH
58371: LD_INT 4
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 5
58380: PUSH
58381: LD_INT 5
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 4
58390: PUSH
58391: LD_INT 5
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: PUSH
58401: LD_INT 4
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 3
58410: PUSH
58411: LD_INT 3
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 5
58420: PUSH
58421: LD_INT 3
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 3
58430: PUSH
58431: LD_INT 5
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: LD_INT 3
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 3
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: LD_INT 4
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: LD_INT 4
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: LD_INT 3
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 2
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 2
58512: PUSH
58513: LD_INT 4
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 4
58533: NEG
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 4
58544: NEG
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 3
58556: NEG
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 3
58567: NEG
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 4
58578: NEG
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 5
58589: NEG
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 5
58600: NEG
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 5
58612: NEG
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 3
58624: NEG
58625: PUSH
58626: LD_INT 2
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 3
58635: NEG
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 3
58647: NEG
58648: PUSH
58649: LD_INT 4
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 2
58659: NEG
58660: PUSH
58661: LD_INT 3
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 2
58671: NEG
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 3
58683: NEG
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 4
58695: NEG
58696: PUSH
58697: LD_INT 3
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 4
58707: NEG
58708: PUSH
58709: LD_INT 4
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: LD_INT 4
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 4
58731: NEG
58732: PUSH
58733: LD_INT 2
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: LD_INT 4
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_INT 5
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 4
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: LD_INT 3
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: PUSH
58800: LD_INT 4
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 5
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 2
58822: PUSH
58823: LD_INT 3
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: LD_INT 5
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58890: LD_ADDR_VAR 0 31
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: LD_INT 4
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 3
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: LD_INT 4
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: LD_INT 5
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: LD_INT 5
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: NEG
58948: PUSH
58949: LD_INT 4
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: LD_INT 3
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: LD_INT 5
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 2
58979: NEG
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 3
58990: NEG
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 3
59001: NEG
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 3
59035: NEG
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 4
59046: NEG
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 4
59057: NEG
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 4
59069: NEG
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 2
59081: NEG
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 4
59092: NEG
59093: PUSH
59094: LD_INT 4
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 4
59104: NEG
59105: PUSH
59106: LD_INT 5
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 3
59116: NEG
59117: PUSH
59118: LD_INT 4
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 3
59128: NEG
59129: PUSH
59130: LD_INT 3
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 4
59140: NEG
59141: PUSH
59142: LD_INT 3
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 5
59152: NEG
59153: PUSH
59154: LD_INT 4
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 5
59164: NEG
59165: PUSH
59166: LD_INT 5
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 3
59176: NEG
59177: PUSH
59178: LD_INT 5
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 5
59188: NEG
59189: PUSH
59190: LD_INT 3
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: LD_INT 4
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 3
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: LD_INT 2
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: LD_INT 3
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: LD_INT 4
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: LD_INT 2
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: NEG
59291: PUSH
59292: LD_INT 4
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 4
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 4
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 5
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 5
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 4
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 3
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 3
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 3
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 5
59385: PUSH
59386: LD_INT 2
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59440: LD_ADDR_VAR 0 32
59444: PUSH
59445: LD_INT 4
59447: NEG
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 4
59458: NEG
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 3
59470: NEG
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 3
59481: NEG
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 4
59492: NEG
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 5
59503: NEG
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 5
59514: NEG
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 5
59526: NEG
59527: PUSH
59528: LD_INT 2
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 3
59538: NEG
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 3
59549: NEG
59550: PUSH
59551: LD_INT 3
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 3
59561: NEG
59562: PUSH
59563: LD_INT 4
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: LD_INT 3
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: NEG
59586: PUSH
59587: LD_INT 2
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 3
59597: NEG
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 4
59609: NEG
59610: PUSH
59611: LD_INT 3
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 4
59621: NEG
59622: PUSH
59623: LD_INT 4
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: LD_INT 4
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 4
59645: NEG
59646: PUSH
59647: LD_INT 2
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 4
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: LD_INT 5
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 4
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: LD_INT 3
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: LD_INT 3
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: LD_INT 4
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: LD_INT 5
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: PUSH
59737: LD_INT 3
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: LD_INT 5
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 3
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 3
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 4
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 4
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: LD_INT 2
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 4
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 4
59852: PUSH
59853: LD_INT 4
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 4
59862: PUSH
59863: LD_INT 3
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 5
59872: PUSH
59873: LD_INT 4
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 5
59882: PUSH
59883: LD_INT 5
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 4
59892: PUSH
59893: LD_INT 5
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 3
59902: PUSH
59903: LD_INT 4
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 3
59912: PUSH
59913: LD_INT 3
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 5
59922: PUSH
59923: LD_INT 3
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 3
59932: PUSH
59933: LD_INT 5
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59987: LD_ADDR_VAR 0 33
59991: PUSH
59992: LD_INT 4
59994: NEG
59995: PUSH
59996: LD_INT 4
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 4
60006: NEG
60007: PUSH
60008: LD_INT 5
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 3
60018: NEG
60019: PUSH
60020: LD_INT 4
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 3
60030: NEG
60031: PUSH
60032: LD_INT 3
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 4
60042: NEG
60043: PUSH
60044: LD_INT 3
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 5
60054: NEG
60055: PUSH
60056: LD_INT 4
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 5
60066: NEG
60067: PUSH
60068: LD_INT 5
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 3
60078: NEG
60079: PUSH
60080: LD_INT 5
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 5
60090: NEG
60091: PUSH
60092: LD_INT 3
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 3
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 4
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: LD_INT 3
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 2
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: LD_INT 3
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: LD_INT 4
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 2
60181: PUSH
60182: LD_INT 2
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 2
60192: NEG
60193: PUSH
60194: LD_INT 4
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 4
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 4
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 5
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 5
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 4
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 3
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: LD_INT 1
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 3
60276: PUSH
60277: LD_INT 2
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 5
60287: PUSH
60288: LD_INT 2
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 3
60297: PUSH
60298: LD_INT 3
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: PUSH
60308: LD_INT 2
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 4
60317: PUSH
60318: LD_INT 3
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 4
60327: PUSH
60328: LD_INT 4
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 3
60337: PUSH
60338: LD_INT 4
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: LD_INT 3
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: LD_INT 2
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 4
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 2
60377: PUSH
60378: LD_INT 4
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: LD_INT 4
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: LD_INT 3
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: PUSH
60408: LD_INT 4
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: LD_INT 5
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: LD_INT 5
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 4
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 1
60448: NEG
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 2
60459: PUSH
60460: LD_INT 5
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 2
60469: NEG
60470: PUSH
60471: LD_INT 3
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60525: LD_ADDR_VAR 0 34
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: LD_INT 4
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: LD_INT 5
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: LD_INT 4
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: LD_INT 3
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: LD_INT 4
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 5
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 2
60611: PUSH
60612: LD_INT 3
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 2
60622: NEG
60623: PUSH
60624: LD_INT 5
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 3
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 3
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 4
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 4
60665: PUSH
60666: LD_INT 1
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 3
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: LD_INT 2
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 4
60717: PUSH
60718: LD_INT 2
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 4
60727: PUSH
60728: LD_INT 4
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 4
60737: PUSH
60738: LD_INT 3
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 5
60747: PUSH
60748: LD_INT 4
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 5
60757: PUSH
60758: LD_INT 5
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 4
60767: PUSH
60768: LD_INT 5
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 3
60777: PUSH
60778: LD_INT 4
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: PUSH
60788: LD_INT 3
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 5
60797: PUSH
60798: LD_INT 3
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 3
60807: PUSH
60808: LD_INT 5
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: LD_INT 3
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: LD_INT 2
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: LD_INT 3
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: LD_INT 4
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: LD_INT 4
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: LD_INT 4
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: NEG
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 4
60910: NEG
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 4
60921: NEG
60922: PUSH
60923: LD_INT 1
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 3
60933: NEG
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 3
60944: NEG
60945: PUSH
60946: LD_INT 1
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 4
60955: NEG
60956: PUSH
60957: LD_INT 1
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 5
60966: NEG
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 5
60977: NEG
60978: PUSH
60979: LD_INT 1
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 5
60989: NEG
60990: PUSH
60991: LD_INT 2
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 3
61001: NEG
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: ST_TO_ADDR
// end ; end ;
61057: GO 61060
61059: POP
// case btype of b_depot , b_warehouse :
61060: LD_VAR 0 1
61064: PUSH
61065: LD_INT 0
61067: DOUBLE
61068: EQUAL
61069: IFTRUE 61079
61071: LD_INT 1
61073: DOUBLE
61074: EQUAL
61075: IFTRUE 61079
61077: GO 61280
61079: POP
// case nation of nation_american :
61080: LD_VAR 0 5
61084: PUSH
61085: LD_INT 1
61087: DOUBLE
61088: EQUAL
61089: IFTRUE 61093
61091: GO 61149
61093: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61094: LD_ADDR_VAR 0 9
61098: PUSH
61099: LD_VAR 0 11
61103: PUSH
61104: LD_VAR 0 12
61108: PUSH
61109: LD_VAR 0 13
61113: PUSH
61114: LD_VAR 0 14
61118: PUSH
61119: LD_VAR 0 15
61123: PUSH
61124: LD_VAR 0 16
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: PUSH
61137: LD_VAR 0 4
61141: PUSH
61142: LD_INT 1
61144: PLUS
61145: ARRAY
61146: ST_TO_ADDR
61147: GO 61278
61149: LD_INT 2
61151: DOUBLE
61152: EQUAL
61153: IFTRUE 61157
61155: GO 61213
61157: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61158: LD_ADDR_VAR 0 9
61162: PUSH
61163: LD_VAR 0 17
61167: PUSH
61168: LD_VAR 0 18
61172: PUSH
61173: LD_VAR 0 19
61177: PUSH
61178: LD_VAR 0 20
61182: PUSH
61183: LD_VAR 0 21
61187: PUSH
61188: LD_VAR 0 22
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: PUSH
61201: LD_VAR 0 4
61205: PUSH
61206: LD_INT 1
61208: PLUS
61209: ARRAY
61210: ST_TO_ADDR
61211: GO 61278
61213: LD_INT 3
61215: DOUBLE
61216: EQUAL
61217: IFTRUE 61221
61219: GO 61277
61221: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61222: LD_ADDR_VAR 0 9
61226: PUSH
61227: LD_VAR 0 23
61231: PUSH
61232: LD_VAR 0 24
61236: PUSH
61237: LD_VAR 0 25
61241: PUSH
61242: LD_VAR 0 26
61246: PUSH
61247: LD_VAR 0 27
61251: PUSH
61252: LD_VAR 0 28
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: PUSH
61265: LD_VAR 0 4
61269: PUSH
61270: LD_INT 1
61272: PLUS
61273: ARRAY
61274: ST_TO_ADDR
61275: GO 61278
61277: POP
61278: GO 61833
61280: LD_INT 2
61282: DOUBLE
61283: EQUAL
61284: IFTRUE 61294
61286: LD_INT 3
61288: DOUBLE
61289: EQUAL
61290: IFTRUE 61294
61292: GO 61350
61294: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61295: LD_ADDR_VAR 0 9
61299: PUSH
61300: LD_VAR 0 29
61304: PUSH
61305: LD_VAR 0 30
61309: PUSH
61310: LD_VAR 0 31
61314: PUSH
61315: LD_VAR 0 32
61319: PUSH
61320: LD_VAR 0 33
61324: PUSH
61325: LD_VAR 0 34
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: PUSH
61338: LD_VAR 0 4
61342: PUSH
61343: LD_INT 1
61345: PLUS
61346: ARRAY
61347: ST_TO_ADDR
61348: GO 61833
61350: LD_INT 16
61352: DOUBLE
61353: EQUAL
61354: IFTRUE 61412
61356: LD_INT 17
61358: DOUBLE
61359: EQUAL
61360: IFTRUE 61412
61362: LD_INT 18
61364: DOUBLE
61365: EQUAL
61366: IFTRUE 61412
61368: LD_INT 19
61370: DOUBLE
61371: EQUAL
61372: IFTRUE 61412
61374: LD_INT 22
61376: DOUBLE
61377: EQUAL
61378: IFTRUE 61412
61380: LD_INT 20
61382: DOUBLE
61383: EQUAL
61384: IFTRUE 61412
61386: LD_INT 21
61388: DOUBLE
61389: EQUAL
61390: IFTRUE 61412
61392: LD_INT 23
61394: DOUBLE
61395: EQUAL
61396: IFTRUE 61412
61398: LD_INT 24
61400: DOUBLE
61401: EQUAL
61402: IFTRUE 61412
61404: LD_INT 25
61406: DOUBLE
61407: EQUAL
61408: IFTRUE 61412
61410: GO 61468
61412: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61413: LD_ADDR_VAR 0 9
61417: PUSH
61418: LD_VAR 0 35
61422: PUSH
61423: LD_VAR 0 36
61427: PUSH
61428: LD_VAR 0 37
61432: PUSH
61433: LD_VAR 0 38
61437: PUSH
61438: LD_VAR 0 39
61442: PUSH
61443: LD_VAR 0 40
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: PUSH
61456: LD_VAR 0 4
61460: PUSH
61461: LD_INT 1
61463: PLUS
61464: ARRAY
61465: ST_TO_ADDR
61466: GO 61833
61468: LD_INT 6
61470: DOUBLE
61471: EQUAL
61472: IFTRUE 61524
61474: LD_INT 7
61476: DOUBLE
61477: EQUAL
61478: IFTRUE 61524
61480: LD_INT 8
61482: DOUBLE
61483: EQUAL
61484: IFTRUE 61524
61486: LD_INT 13
61488: DOUBLE
61489: EQUAL
61490: IFTRUE 61524
61492: LD_INT 12
61494: DOUBLE
61495: EQUAL
61496: IFTRUE 61524
61498: LD_INT 15
61500: DOUBLE
61501: EQUAL
61502: IFTRUE 61524
61504: LD_INT 11
61506: DOUBLE
61507: EQUAL
61508: IFTRUE 61524
61510: LD_INT 14
61512: DOUBLE
61513: EQUAL
61514: IFTRUE 61524
61516: LD_INT 10
61518: DOUBLE
61519: EQUAL
61520: IFTRUE 61524
61522: GO 61580
61524: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61525: LD_ADDR_VAR 0 9
61529: PUSH
61530: LD_VAR 0 41
61534: PUSH
61535: LD_VAR 0 42
61539: PUSH
61540: LD_VAR 0 43
61544: PUSH
61545: LD_VAR 0 44
61549: PUSH
61550: LD_VAR 0 45
61554: PUSH
61555: LD_VAR 0 46
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: PUSH
61568: LD_VAR 0 4
61572: PUSH
61573: LD_INT 1
61575: PLUS
61576: ARRAY
61577: ST_TO_ADDR
61578: GO 61833
61580: LD_INT 36
61582: DOUBLE
61583: EQUAL
61584: IFTRUE 61588
61586: GO 61644
61588: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61589: LD_ADDR_VAR 0 9
61593: PUSH
61594: LD_VAR 0 47
61598: PUSH
61599: LD_VAR 0 48
61603: PUSH
61604: LD_VAR 0 49
61608: PUSH
61609: LD_VAR 0 50
61613: PUSH
61614: LD_VAR 0 51
61618: PUSH
61619: LD_VAR 0 52
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: PUSH
61632: LD_VAR 0 4
61636: PUSH
61637: LD_INT 1
61639: PLUS
61640: ARRAY
61641: ST_TO_ADDR
61642: GO 61833
61644: LD_INT 4
61646: DOUBLE
61647: EQUAL
61648: IFTRUE 61670
61650: LD_INT 5
61652: DOUBLE
61653: EQUAL
61654: IFTRUE 61670
61656: LD_INT 34
61658: DOUBLE
61659: EQUAL
61660: IFTRUE 61670
61662: LD_INT 37
61664: DOUBLE
61665: EQUAL
61666: IFTRUE 61670
61668: GO 61726
61670: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61671: LD_ADDR_VAR 0 9
61675: PUSH
61676: LD_VAR 0 53
61680: PUSH
61681: LD_VAR 0 54
61685: PUSH
61686: LD_VAR 0 55
61690: PUSH
61691: LD_VAR 0 56
61695: PUSH
61696: LD_VAR 0 57
61700: PUSH
61701: LD_VAR 0 58
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: PUSH
61714: LD_VAR 0 4
61718: PUSH
61719: LD_INT 1
61721: PLUS
61722: ARRAY
61723: ST_TO_ADDR
61724: GO 61833
61726: LD_INT 31
61728: DOUBLE
61729: EQUAL
61730: IFTRUE 61776
61732: LD_INT 32
61734: DOUBLE
61735: EQUAL
61736: IFTRUE 61776
61738: LD_INT 33
61740: DOUBLE
61741: EQUAL
61742: IFTRUE 61776
61744: LD_INT 27
61746: DOUBLE
61747: EQUAL
61748: IFTRUE 61776
61750: LD_INT 26
61752: DOUBLE
61753: EQUAL
61754: IFTRUE 61776
61756: LD_INT 28
61758: DOUBLE
61759: EQUAL
61760: IFTRUE 61776
61762: LD_INT 29
61764: DOUBLE
61765: EQUAL
61766: IFTRUE 61776
61768: LD_INT 30
61770: DOUBLE
61771: EQUAL
61772: IFTRUE 61776
61774: GO 61832
61776: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61777: LD_ADDR_VAR 0 9
61781: PUSH
61782: LD_VAR 0 59
61786: PUSH
61787: LD_VAR 0 60
61791: PUSH
61792: LD_VAR 0 61
61796: PUSH
61797: LD_VAR 0 62
61801: PUSH
61802: LD_VAR 0 63
61806: PUSH
61807: LD_VAR 0 64
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: PUSH
61820: LD_VAR 0 4
61824: PUSH
61825: LD_INT 1
61827: PLUS
61828: ARRAY
61829: ST_TO_ADDR
61830: GO 61833
61832: POP
// temp_list2 = [ ] ;
61833: LD_ADDR_VAR 0 10
61837: PUSH
61838: EMPTY
61839: ST_TO_ADDR
// for i in temp_list do
61840: LD_ADDR_VAR 0 8
61844: PUSH
61845: LD_VAR 0 9
61849: PUSH
61850: FOR_IN
61851: IFFALSE 61903
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61853: LD_ADDR_VAR 0 10
61857: PUSH
61858: LD_VAR 0 10
61862: PUSH
61863: LD_VAR 0 8
61867: PUSH
61868: LD_INT 1
61870: ARRAY
61871: PUSH
61872: LD_VAR 0 2
61876: PLUS
61877: PUSH
61878: LD_VAR 0 8
61882: PUSH
61883: LD_INT 2
61885: ARRAY
61886: PUSH
61887: LD_VAR 0 3
61891: PLUS
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: EMPTY
61898: LIST
61899: ADD
61900: ST_TO_ADDR
61901: GO 61850
61903: POP
61904: POP
// result = temp_list2 ;
61905: LD_ADDR_VAR 0 7
61909: PUSH
61910: LD_VAR 0 10
61914: ST_TO_ADDR
// end ;
61915: LD_VAR 0 7
61919: RET
// export function EnemyInRange ( unit , dist ) ; begin
61920: LD_INT 0
61922: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61923: LD_ADDR_VAR 0 3
61927: PUSH
61928: LD_VAR 0 1
61932: PPUSH
61933: CALL_OW 255
61937: PPUSH
61938: LD_VAR 0 1
61942: PPUSH
61943: CALL_OW 250
61947: PPUSH
61948: LD_VAR 0 1
61952: PPUSH
61953: CALL_OW 251
61957: PPUSH
61958: LD_VAR 0 2
61962: PPUSH
61963: CALL 35316 0 4
61967: PUSH
61968: LD_INT 4
61970: ARRAY
61971: ST_TO_ADDR
// end ;
61972: LD_VAR 0 3
61976: RET
// export function PlayerSeeMe ( unit ) ; begin
61977: LD_INT 0
61979: PPUSH
// result := See ( your_side , unit ) ;
61980: LD_ADDR_VAR 0 2
61984: PUSH
61985: LD_OWVAR 2
61989: PPUSH
61990: LD_VAR 0 1
61994: PPUSH
61995: CALL_OW 292
61999: ST_TO_ADDR
// end ;
62000: LD_VAR 0 2
62004: RET
// export function ReverseDir ( unit ) ; begin
62005: LD_INT 0
62007: PPUSH
// if not unit then
62008: LD_VAR 0 1
62012: NOT
62013: IFFALSE 62017
// exit ;
62015: GO 62040
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62017: LD_ADDR_VAR 0 2
62021: PUSH
62022: LD_VAR 0 1
62026: PPUSH
62027: CALL_OW 254
62031: PUSH
62032: LD_INT 3
62034: PLUS
62035: PUSH
62036: LD_INT 6
62038: MOD
62039: ST_TO_ADDR
// end ;
62040: LD_VAR 0 2
62044: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62045: LD_INT 0
62047: PPUSH
62048: PPUSH
62049: PPUSH
62050: PPUSH
62051: PPUSH
// if not hexes then
62052: LD_VAR 0 2
62056: NOT
62057: IFFALSE 62061
// exit ;
62059: GO 62209
// dist := 9999 ;
62061: LD_ADDR_VAR 0 5
62065: PUSH
62066: LD_INT 9999
62068: ST_TO_ADDR
// for i = 1 to hexes do
62069: LD_ADDR_VAR 0 4
62073: PUSH
62074: DOUBLE
62075: LD_INT 1
62077: DEC
62078: ST_TO_ADDR
62079: LD_VAR 0 2
62083: PUSH
62084: FOR_TO
62085: IFFALSE 62197
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62087: LD_VAR 0 1
62091: PPUSH
62092: LD_VAR 0 2
62096: PUSH
62097: LD_VAR 0 4
62101: ARRAY
62102: PUSH
62103: LD_INT 1
62105: ARRAY
62106: PPUSH
62107: LD_VAR 0 2
62111: PUSH
62112: LD_VAR 0 4
62116: ARRAY
62117: PUSH
62118: LD_INT 2
62120: ARRAY
62121: PPUSH
62122: CALL_OW 297
62126: PUSH
62127: LD_VAR 0 5
62131: LESS
62132: IFFALSE 62195
// begin hex := hexes [ i ] ;
62134: LD_ADDR_VAR 0 7
62138: PUSH
62139: LD_VAR 0 2
62143: PUSH
62144: LD_VAR 0 4
62148: ARRAY
62149: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62150: LD_ADDR_VAR 0 5
62154: PUSH
62155: LD_VAR 0 1
62159: PPUSH
62160: LD_VAR 0 2
62164: PUSH
62165: LD_VAR 0 4
62169: ARRAY
62170: PUSH
62171: LD_INT 1
62173: ARRAY
62174: PPUSH
62175: LD_VAR 0 2
62179: PUSH
62180: LD_VAR 0 4
62184: ARRAY
62185: PUSH
62186: LD_INT 2
62188: ARRAY
62189: PPUSH
62190: CALL_OW 297
62194: ST_TO_ADDR
// end ; end ;
62195: GO 62084
62197: POP
62198: POP
// result := hex ;
62199: LD_ADDR_VAR 0 3
62203: PUSH
62204: LD_VAR 0 7
62208: ST_TO_ADDR
// end ;
62209: LD_VAR 0 3
62213: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62214: LD_INT 0
62216: PPUSH
62217: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62218: LD_VAR 0 1
62222: NOT
62223: PUSH
62224: LD_VAR 0 1
62228: PUSH
62229: LD_INT 21
62231: PUSH
62232: LD_INT 2
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 23
62241: PUSH
62242: LD_INT 2
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PPUSH
62253: CALL_OW 69
62257: IN
62258: NOT
62259: OR
62260: IFFALSE 62264
// exit ;
62262: GO 62311
// for i = 1 to 3 do
62264: LD_ADDR_VAR 0 3
62268: PUSH
62269: DOUBLE
62270: LD_INT 1
62272: DEC
62273: ST_TO_ADDR
62274: LD_INT 3
62276: PUSH
62277: FOR_TO
62278: IFFALSE 62309
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62280: LD_VAR 0 1
62284: PPUSH
62285: CALL_OW 250
62289: PPUSH
62290: LD_VAR 0 1
62294: PPUSH
62295: CALL_OW 251
62299: PPUSH
62300: LD_INT 1
62302: PPUSH
62303: CALL_OW 453
62307: GO 62277
62309: POP
62310: POP
// end ;
62311: LD_VAR 0 2
62315: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62316: LD_INT 0
62318: PPUSH
62319: PPUSH
62320: PPUSH
62321: PPUSH
62322: PPUSH
62323: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62324: LD_VAR 0 1
62328: NOT
62329: PUSH
62330: LD_VAR 0 2
62334: NOT
62335: OR
62336: PUSH
62337: LD_VAR 0 1
62341: PPUSH
62342: CALL_OW 314
62346: OR
62347: IFFALSE 62351
// exit ;
62349: GO 62792
// x := GetX ( enemy_unit ) ;
62351: LD_ADDR_VAR 0 7
62355: PUSH
62356: LD_VAR 0 2
62360: PPUSH
62361: CALL_OW 250
62365: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62366: LD_ADDR_VAR 0 8
62370: PUSH
62371: LD_VAR 0 2
62375: PPUSH
62376: CALL_OW 251
62380: ST_TO_ADDR
// if not x or not y then
62381: LD_VAR 0 7
62385: NOT
62386: PUSH
62387: LD_VAR 0 8
62391: NOT
62392: OR
62393: IFFALSE 62397
// exit ;
62395: GO 62792
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62397: LD_ADDR_VAR 0 6
62401: PUSH
62402: LD_VAR 0 7
62406: PPUSH
62407: LD_INT 0
62409: PPUSH
62410: LD_INT 4
62412: PPUSH
62413: CALL_OW 272
62417: PUSH
62418: LD_VAR 0 8
62422: PPUSH
62423: LD_INT 0
62425: PPUSH
62426: LD_INT 4
62428: PPUSH
62429: CALL_OW 273
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_VAR 0 7
62442: PPUSH
62443: LD_INT 1
62445: PPUSH
62446: LD_INT 4
62448: PPUSH
62449: CALL_OW 272
62453: PUSH
62454: LD_VAR 0 8
62458: PPUSH
62459: LD_INT 1
62461: PPUSH
62462: LD_INT 4
62464: PPUSH
62465: CALL_OW 273
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_VAR 0 7
62478: PPUSH
62479: LD_INT 2
62481: PPUSH
62482: LD_INT 4
62484: PPUSH
62485: CALL_OW 272
62489: PUSH
62490: LD_VAR 0 8
62494: PPUSH
62495: LD_INT 2
62497: PPUSH
62498: LD_INT 4
62500: PPUSH
62501: CALL_OW 273
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_VAR 0 7
62514: PPUSH
62515: LD_INT 3
62517: PPUSH
62518: LD_INT 4
62520: PPUSH
62521: CALL_OW 272
62525: PUSH
62526: LD_VAR 0 8
62530: PPUSH
62531: LD_INT 3
62533: PPUSH
62534: LD_INT 4
62536: PPUSH
62537: CALL_OW 273
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_VAR 0 7
62550: PPUSH
62551: LD_INT 4
62553: PPUSH
62554: LD_INT 4
62556: PPUSH
62557: CALL_OW 272
62561: PUSH
62562: LD_VAR 0 8
62566: PPUSH
62567: LD_INT 4
62569: PPUSH
62570: LD_INT 4
62572: PPUSH
62573: CALL_OW 273
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_VAR 0 7
62586: PPUSH
62587: LD_INT 5
62589: PPUSH
62590: LD_INT 4
62592: PPUSH
62593: CALL_OW 272
62597: PUSH
62598: LD_VAR 0 8
62602: PPUSH
62603: LD_INT 5
62605: PPUSH
62606: LD_INT 4
62608: PPUSH
62609: CALL_OW 273
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: ST_TO_ADDR
// for i = tmp downto 1 do
62626: LD_ADDR_VAR 0 4
62630: PUSH
62631: DOUBLE
62632: LD_VAR 0 6
62636: INC
62637: ST_TO_ADDR
62638: LD_INT 1
62640: PUSH
62641: FOR_DOWNTO
62642: IFFALSE 62743
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62644: LD_VAR 0 6
62648: PUSH
62649: LD_VAR 0 4
62653: ARRAY
62654: PUSH
62655: LD_INT 1
62657: ARRAY
62658: PPUSH
62659: LD_VAR 0 6
62663: PUSH
62664: LD_VAR 0 4
62668: ARRAY
62669: PUSH
62670: LD_INT 2
62672: ARRAY
62673: PPUSH
62674: CALL_OW 488
62678: NOT
62679: PUSH
62680: LD_VAR 0 6
62684: PUSH
62685: LD_VAR 0 4
62689: ARRAY
62690: PUSH
62691: LD_INT 1
62693: ARRAY
62694: PPUSH
62695: LD_VAR 0 6
62699: PUSH
62700: LD_VAR 0 4
62704: ARRAY
62705: PUSH
62706: LD_INT 2
62708: ARRAY
62709: PPUSH
62710: CALL_OW 428
62714: PUSH
62715: LD_INT 0
62717: NONEQUAL
62718: OR
62719: IFFALSE 62741
// tmp := Delete ( tmp , i ) ;
62721: LD_ADDR_VAR 0 6
62725: PUSH
62726: LD_VAR 0 6
62730: PPUSH
62731: LD_VAR 0 4
62735: PPUSH
62736: CALL_OW 3
62740: ST_TO_ADDR
62741: GO 62641
62743: POP
62744: POP
// j := GetClosestHex ( unit , tmp ) ;
62745: LD_ADDR_VAR 0 5
62749: PUSH
62750: LD_VAR 0 1
62754: PPUSH
62755: LD_VAR 0 6
62759: PPUSH
62760: CALL 62045 0 2
62764: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62765: LD_VAR 0 1
62769: PPUSH
62770: LD_VAR 0 5
62774: PUSH
62775: LD_INT 1
62777: ARRAY
62778: PPUSH
62779: LD_VAR 0 5
62783: PUSH
62784: LD_INT 2
62786: ARRAY
62787: PPUSH
62788: CALL_OW 111
// end ;
62792: LD_VAR 0 3
62796: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62797: LD_INT 0
62799: PPUSH
62800: PPUSH
62801: PPUSH
// uc_side = 0 ;
62802: LD_ADDR_OWVAR 20
62806: PUSH
62807: LD_INT 0
62809: ST_TO_ADDR
// uc_nation = 0 ;
62810: LD_ADDR_OWVAR 21
62814: PUSH
62815: LD_INT 0
62817: ST_TO_ADDR
// InitHc_All ( ) ;
62818: CALL_OW 584
// InitVc ;
62822: CALL_OW 20
// if mastodonts then
62826: LD_VAR 0 6
62830: IFFALSE 62897
// for i = 1 to mastodonts do
62832: LD_ADDR_VAR 0 11
62836: PUSH
62837: DOUBLE
62838: LD_INT 1
62840: DEC
62841: ST_TO_ADDR
62842: LD_VAR 0 6
62846: PUSH
62847: FOR_TO
62848: IFFALSE 62895
// begin vc_chassis := 31 ;
62850: LD_ADDR_OWVAR 37
62854: PUSH
62855: LD_INT 31
62857: ST_TO_ADDR
// vc_control := control_rider ;
62858: LD_ADDR_OWVAR 38
62862: PUSH
62863: LD_INT 4
62865: ST_TO_ADDR
// animal := CreateVehicle ;
62866: LD_ADDR_VAR 0 12
62870: PUSH
62871: CALL_OW 45
62875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62876: LD_VAR 0 12
62880: PPUSH
62881: LD_VAR 0 8
62885: PPUSH
62886: LD_INT 0
62888: PPUSH
62889: CALL 65032 0 3
// end ;
62893: GO 62847
62895: POP
62896: POP
// if horses then
62897: LD_VAR 0 5
62901: IFFALSE 62968
// for i = 1 to horses do
62903: LD_ADDR_VAR 0 11
62907: PUSH
62908: DOUBLE
62909: LD_INT 1
62911: DEC
62912: ST_TO_ADDR
62913: LD_VAR 0 5
62917: PUSH
62918: FOR_TO
62919: IFFALSE 62966
// begin hc_class := 21 ;
62921: LD_ADDR_OWVAR 28
62925: PUSH
62926: LD_INT 21
62928: ST_TO_ADDR
// hc_gallery :=  ;
62929: LD_ADDR_OWVAR 33
62933: PUSH
62934: LD_STRING 
62936: ST_TO_ADDR
// animal := CreateHuman ;
62937: LD_ADDR_VAR 0 12
62941: PUSH
62942: CALL_OW 44
62946: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62947: LD_VAR 0 12
62951: PPUSH
62952: LD_VAR 0 8
62956: PPUSH
62957: LD_INT 0
62959: PPUSH
62960: CALL 65032 0 3
// end ;
62964: GO 62918
62966: POP
62967: POP
// if birds then
62968: LD_VAR 0 1
62972: IFFALSE 63039
// for i = 1 to birds do
62974: LD_ADDR_VAR 0 11
62978: PUSH
62979: DOUBLE
62980: LD_INT 1
62982: DEC
62983: ST_TO_ADDR
62984: LD_VAR 0 1
62988: PUSH
62989: FOR_TO
62990: IFFALSE 63037
// begin hc_class = 18 ;
62992: LD_ADDR_OWVAR 28
62996: PUSH
62997: LD_INT 18
62999: ST_TO_ADDR
// hc_gallery =  ;
63000: LD_ADDR_OWVAR 33
63004: PUSH
63005: LD_STRING 
63007: ST_TO_ADDR
// animal := CreateHuman ;
63008: LD_ADDR_VAR 0 12
63012: PUSH
63013: CALL_OW 44
63017: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63018: LD_VAR 0 12
63022: PPUSH
63023: LD_VAR 0 8
63027: PPUSH
63028: LD_INT 0
63030: PPUSH
63031: CALL 65032 0 3
// end ;
63035: GO 62989
63037: POP
63038: POP
// if tigers then
63039: LD_VAR 0 2
63043: IFFALSE 63127
// for i = 1 to tigers do
63045: LD_ADDR_VAR 0 11
63049: PUSH
63050: DOUBLE
63051: LD_INT 1
63053: DEC
63054: ST_TO_ADDR
63055: LD_VAR 0 2
63059: PUSH
63060: FOR_TO
63061: IFFALSE 63125
// begin hc_class = class_tiger ;
63063: LD_ADDR_OWVAR 28
63067: PUSH
63068: LD_INT 14
63070: ST_TO_ADDR
// hc_gallery =  ;
63071: LD_ADDR_OWVAR 33
63075: PUSH
63076: LD_STRING 
63078: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63079: LD_ADDR_OWVAR 35
63083: PUSH
63084: LD_INT 7
63086: NEG
63087: PPUSH
63088: LD_INT 7
63090: PPUSH
63091: CALL_OW 12
63095: ST_TO_ADDR
// animal := CreateHuman ;
63096: LD_ADDR_VAR 0 12
63100: PUSH
63101: CALL_OW 44
63105: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63106: LD_VAR 0 12
63110: PPUSH
63111: LD_VAR 0 8
63115: PPUSH
63116: LD_INT 0
63118: PPUSH
63119: CALL 65032 0 3
// end ;
63123: GO 63060
63125: POP
63126: POP
// if apemans then
63127: LD_VAR 0 3
63131: IFFALSE 63254
// for i = 1 to apemans do
63133: LD_ADDR_VAR 0 11
63137: PUSH
63138: DOUBLE
63139: LD_INT 1
63141: DEC
63142: ST_TO_ADDR
63143: LD_VAR 0 3
63147: PUSH
63148: FOR_TO
63149: IFFALSE 63252
// begin hc_class = class_apeman ;
63151: LD_ADDR_OWVAR 28
63155: PUSH
63156: LD_INT 12
63158: ST_TO_ADDR
// hc_gallery =  ;
63159: LD_ADDR_OWVAR 33
63163: PUSH
63164: LD_STRING 
63166: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63167: LD_ADDR_OWVAR 35
63171: PUSH
63172: LD_INT 2
63174: NEG
63175: PPUSH
63176: LD_INT 2
63178: PPUSH
63179: CALL_OW 12
63183: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63184: LD_ADDR_OWVAR 31
63188: PUSH
63189: LD_INT 1
63191: PPUSH
63192: LD_INT 3
63194: PPUSH
63195: CALL_OW 12
63199: PUSH
63200: LD_INT 1
63202: PPUSH
63203: LD_INT 3
63205: PPUSH
63206: CALL_OW 12
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: ST_TO_ADDR
// animal := CreateHuman ;
63223: LD_ADDR_VAR 0 12
63227: PUSH
63228: CALL_OW 44
63232: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63233: LD_VAR 0 12
63237: PPUSH
63238: LD_VAR 0 8
63242: PPUSH
63243: LD_INT 0
63245: PPUSH
63246: CALL 65032 0 3
// end ;
63250: GO 63148
63252: POP
63253: POP
// if enchidnas then
63254: LD_VAR 0 4
63258: IFFALSE 63325
// for i = 1 to enchidnas do
63260: LD_ADDR_VAR 0 11
63264: PUSH
63265: DOUBLE
63266: LD_INT 1
63268: DEC
63269: ST_TO_ADDR
63270: LD_VAR 0 4
63274: PUSH
63275: FOR_TO
63276: IFFALSE 63323
// begin hc_class = 13 ;
63278: LD_ADDR_OWVAR 28
63282: PUSH
63283: LD_INT 13
63285: ST_TO_ADDR
// hc_gallery =  ;
63286: LD_ADDR_OWVAR 33
63290: PUSH
63291: LD_STRING 
63293: ST_TO_ADDR
// animal := CreateHuman ;
63294: LD_ADDR_VAR 0 12
63298: PUSH
63299: CALL_OW 44
63303: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63304: LD_VAR 0 12
63308: PPUSH
63309: LD_VAR 0 8
63313: PPUSH
63314: LD_INT 0
63316: PPUSH
63317: CALL 65032 0 3
// end ;
63321: GO 63275
63323: POP
63324: POP
// if fishes then
63325: LD_VAR 0 7
63329: IFFALSE 63396
// for i = 1 to fishes do
63331: LD_ADDR_VAR 0 11
63335: PUSH
63336: DOUBLE
63337: LD_INT 1
63339: DEC
63340: ST_TO_ADDR
63341: LD_VAR 0 7
63345: PUSH
63346: FOR_TO
63347: IFFALSE 63394
// begin hc_class = 20 ;
63349: LD_ADDR_OWVAR 28
63353: PUSH
63354: LD_INT 20
63356: ST_TO_ADDR
// hc_gallery =  ;
63357: LD_ADDR_OWVAR 33
63361: PUSH
63362: LD_STRING 
63364: ST_TO_ADDR
// animal := CreateHuman ;
63365: LD_ADDR_VAR 0 12
63369: PUSH
63370: CALL_OW 44
63374: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63375: LD_VAR 0 12
63379: PPUSH
63380: LD_VAR 0 9
63384: PPUSH
63385: LD_INT 0
63387: PPUSH
63388: CALL 65032 0 3
// end ;
63392: GO 63346
63394: POP
63395: POP
// end ;
63396: LD_VAR 0 10
63400: RET
// export function WantHeal ( sci , unit ) ; begin
63401: LD_INT 0
63403: PPUSH
// if GetTaskList ( sci ) > 0 then
63404: LD_VAR 0 1
63408: PPUSH
63409: CALL_OW 437
63413: PUSH
63414: LD_INT 0
63416: GREATER
63417: IFFALSE 63487
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63419: LD_VAR 0 1
63423: PPUSH
63424: CALL_OW 437
63428: PUSH
63429: LD_INT 1
63431: ARRAY
63432: PUSH
63433: LD_INT 1
63435: ARRAY
63436: PUSH
63437: LD_STRING l
63439: EQUAL
63440: PUSH
63441: LD_VAR 0 1
63445: PPUSH
63446: CALL_OW 437
63450: PUSH
63451: LD_INT 1
63453: ARRAY
63454: PUSH
63455: LD_INT 4
63457: ARRAY
63458: PUSH
63459: LD_VAR 0 2
63463: EQUAL
63464: AND
63465: IFFALSE 63477
// result := true else
63467: LD_ADDR_VAR 0 3
63471: PUSH
63472: LD_INT 1
63474: ST_TO_ADDR
63475: GO 63485
// result := false ;
63477: LD_ADDR_VAR 0 3
63481: PUSH
63482: LD_INT 0
63484: ST_TO_ADDR
// end else
63485: GO 63495
// result := false ;
63487: LD_ADDR_VAR 0 3
63491: PUSH
63492: LD_INT 0
63494: ST_TO_ADDR
// end ;
63495: LD_VAR 0 3
63499: RET
// export function HealTarget ( sci ) ; begin
63500: LD_INT 0
63502: PPUSH
// if not sci then
63503: LD_VAR 0 1
63507: NOT
63508: IFFALSE 63512
// exit ;
63510: GO 63577
// result := 0 ;
63512: LD_ADDR_VAR 0 2
63516: PUSH
63517: LD_INT 0
63519: ST_TO_ADDR
// if GetTaskList ( sci ) then
63520: LD_VAR 0 1
63524: PPUSH
63525: CALL_OW 437
63529: IFFALSE 63577
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63531: LD_VAR 0 1
63535: PPUSH
63536: CALL_OW 437
63540: PUSH
63541: LD_INT 1
63543: ARRAY
63544: PUSH
63545: LD_INT 1
63547: ARRAY
63548: PUSH
63549: LD_STRING l
63551: EQUAL
63552: IFFALSE 63577
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63554: LD_ADDR_VAR 0 2
63558: PUSH
63559: LD_VAR 0 1
63563: PPUSH
63564: CALL_OW 437
63568: PUSH
63569: LD_INT 1
63571: ARRAY
63572: PUSH
63573: LD_INT 4
63575: ARRAY
63576: ST_TO_ADDR
// end ;
63577: LD_VAR 0 2
63581: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63582: LD_INT 0
63584: PPUSH
63585: PPUSH
63586: PPUSH
63587: PPUSH
// if not base_units then
63588: LD_VAR 0 1
63592: NOT
63593: IFFALSE 63597
// exit ;
63595: GO 63684
// result := false ;
63597: LD_ADDR_VAR 0 2
63601: PUSH
63602: LD_INT 0
63604: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63605: LD_ADDR_VAR 0 5
63609: PUSH
63610: LD_VAR 0 1
63614: PPUSH
63615: LD_INT 21
63617: PUSH
63618: LD_INT 3
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PPUSH
63625: CALL_OW 72
63629: ST_TO_ADDR
// if not tmp then
63630: LD_VAR 0 5
63634: NOT
63635: IFFALSE 63639
// exit ;
63637: GO 63684
// for i in tmp do
63639: LD_ADDR_VAR 0 3
63643: PUSH
63644: LD_VAR 0 5
63648: PUSH
63649: FOR_IN
63650: IFFALSE 63682
// begin result := EnemyInRange ( i , 22 ) ;
63652: LD_ADDR_VAR 0 2
63656: PUSH
63657: LD_VAR 0 3
63661: PPUSH
63662: LD_INT 22
63664: PPUSH
63665: CALL 61920 0 2
63669: ST_TO_ADDR
// if result then
63670: LD_VAR 0 2
63674: IFFALSE 63680
// exit ;
63676: POP
63677: POP
63678: GO 63684
// end ;
63680: GO 63649
63682: POP
63683: POP
// end ;
63684: LD_VAR 0 2
63688: RET
// export function FilterByTag ( units , tag ) ; begin
63689: LD_INT 0
63691: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63692: LD_ADDR_VAR 0 3
63696: PUSH
63697: LD_VAR 0 1
63701: PPUSH
63702: LD_INT 120
63704: PUSH
63705: LD_VAR 0 2
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PPUSH
63714: CALL_OW 72
63718: ST_TO_ADDR
// end ;
63719: LD_VAR 0 3
63723: RET
// export function IsDriver ( un ) ; begin
63724: LD_INT 0
63726: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63727: LD_ADDR_VAR 0 2
63731: PUSH
63732: LD_VAR 0 1
63736: PUSH
63737: LD_INT 55
63739: PUSH
63740: EMPTY
63741: LIST
63742: PPUSH
63743: CALL_OW 69
63747: IN
63748: ST_TO_ADDR
// end ;
63749: LD_VAR 0 2
63753: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63754: LD_INT 0
63756: PPUSH
63757: PPUSH
// list := [ ] ;
63758: LD_ADDR_VAR 0 5
63762: PUSH
63763: EMPTY
63764: ST_TO_ADDR
// case d of 0 :
63765: LD_VAR 0 3
63769: PUSH
63770: LD_INT 0
63772: DOUBLE
63773: EQUAL
63774: IFTRUE 63778
63776: GO 63911
63778: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63779: LD_ADDR_VAR 0 5
63783: PUSH
63784: LD_VAR 0 1
63788: PUSH
63789: LD_INT 4
63791: MINUS
63792: PUSH
63793: LD_VAR 0 2
63797: PUSH
63798: LD_INT 4
63800: MINUS
63801: PUSH
63802: LD_INT 2
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: LIST
63809: PUSH
63810: LD_VAR 0 1
63814: PUSH
63815: LD_INT 3
63817: MINUS
63818: PUSH
63819: LD_VAR 0 2
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: LIST
63831: PUSH
63832: LD_VAR 0 1
63836: PUSH
63837: LD_INT 4
63839: PLUS
63840: PUSH
63841: LD_VAR 0 2
63845: PUSH
63846: LD_INT 4
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: LIST
63853: PUSH
63854: LD_VAR 0 1
63858: PUSH
63859: LD_INT 3
63861: PLUS
63862: PUSH
63863: LD_VAR 0 2
63867: PUSH
63868: LD_INT 3
63870: PLUS
63871: PUSH
63872: LD_INT 5
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: LIST
63879: PUSH
63880: LD_VAR 0 1
63884: PUSH
63885: LD_VAR 0 2
63889: PUSH
63890: LD_INT 4
63892: PLUS
63893: PUSH
63894: LD_INT 0
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: LIST
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: ST_TO_ADDR
// end ; 1 :
63909: GO 64609
63911: LD_INT 1
63913: DOUBLE
63914: EQUAL
63915: IFTRUE 63919
63917: GO 64052
63919: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63920: LD_ADDR_VAR 0 5
63924: PUSH
63925: LD_VAR 0 1
63929: PUSH
63930: LD_VAR 0 2
63934: PUSH
63935: LD_INT 4
63937: MINUS
63938: PUSH
63939: LD_INT 3
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: LIST
63946: PUSH
63947: LD_VAR 0 1
63951: PUSH
63952: LD_INT 3
63954: MINUS
63955: PUSH
63956: LD_VAR 0 2
63960: PUSH
63961: LD_INT 3
63963: MINUS
63964: PUSH
63965: LD_INT 2
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: LIST
63972: PUSH
63973: LD_VAR 0 1
63977: PUSH
63978: LD_INT 4
63980: MINUS
63981: PUSH
63982: LD_VAR 0 2
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: LIST
63994: PUSH
63995: LD_VAR 0 1
63999: PUSH
64000: LD_VAR 0 2
64004: PUSH
64005: LD_INT 3
64007: PLUS
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: LIST
64016: PUSH
64017: LD_VAR 0 1
64021: PUSH
64022: LD_INT 4
64024: PLUS
64025: PUSH
64026: LD_VAR 0 2
64030: PUSH
64031: LD_INT 4
64033: PLUS
64034: PUSH
64035: LD_INT 5
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: LIST
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: ST_TO_ADDR
// end ; 2 :
64050: GO 64609
64052: LD_INT 2
64054: DOUBLE
64055: EQUAL
64056: IFTRUE 64060
64058: GO 64189
64060: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64061: LD_ADDR_VAR 0 5
64065: PUSH
64066: LD_VAR 0 1
64070: PUSH
64071: LD_VAR 0 2
64075: PUSH
64076: LD_INT 3
64078: MINUS
64079: PUSH
64080: LD_INT 3
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: LIST
64087: PUSH
64088: LD_VAR 0 1
64092: PUSH
64093: LD_INT 4
64095: PLUS
64096: PUSH
64097: LD_VAR 0 2
64101: PUSH
64102: LD_INT 4
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: LIST
64109: PUSH
64110: LD_VAR 0 1
64114: PUSH
64115: LD_VAR 0 2
64119: PUSH
64120: LD_INT 4
64122: PLUS
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: LIST
64131: PUSH
64132: LD_VAR 0 1
64136: PUSH
64137: LD_INT 3
64139: MINUS
64140: PUSH
64141: LD_VAR 0 2
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: LIST
64153: PUSH
64154: LD_VAR 0 1
64158: PUSH
64159: LD_INT 4
64161: MINUS
64162: PUSH
64163: LD_VAR 0 2
64167: PUSH
64168: LD_INT 4
64170: MINUS
64171: PUSH
64172: LD_INT 2
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: LIST
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: ST_TO_ADDR
// end ; 3 :
64187: GO 64609
64189: LD_INT 3
64191: DOUBLE
64192: EQUAL
64193: IFTRUE 64197
64195: GO 64330
64197: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64198: LD_ADDR_VAR 0 5
64202: PUSH
64203: LD_VAR 0 1
64207: PUSH
64208: LD_INT 3
64210: PLUS
64211: PUSH
64212: LD_VAR 0 2
64216: PUSH
64217: LD_INT 4
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: LIST
64224: PUSH
64225: LD_VAR 0 1
64229: PUSH
64230: LD_INT 4
64232: PLUS
64233: PUSH
64234: LD_VAR 0 2
64238: PUSH
64239: LD_INT 4
64241: PLUS
64242: PUSH
64243: LD_INT 5
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: LIST
64250: PUSH
64251: LD_VAR 0 1
64255: PUSH
64256: LD_INT 4
64258: MINUS
64259: PUSH
64260: LD_VAR 0 2
64264: PUSH
64265: LD_INT 1
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: LIST
64272: PUSH
64273: LD_VAR 0 1
64277: PUSH
64278: LD_VAR 0 2
64282: PUSH
64283: LD_INT 4
64285: MINUS
64286: PUSH
64287: LD_INT 3
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: LIST
64294: PUSH
64295: LD_VAR 0 1
64299: PUSH
64300: LD_INT 3
64302: MINUS
64303: PUSH
64304: LD_VAR 0 2
64308: PUSH
64309: LD_INT 3
64311: MINUS
64312: PUSH
64313: LD_INT 2
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: LIST
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: ST_TO_ADDR
// end ; 4 :
64328: GO 64609
64330: LD_INT 4
64332: DOUBLE
64333: EQUAL
64334: IFTRUE 64338
64336: GO 64471
64338: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64339: LD_ADDR_VAR 0 5
64343: PUSH
64344: LD_VAR 0 1
64348: PUSH
64349: LD_VAR 0 2
64353: PUSH
64354: LD_INT 4
64356: PLUS
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: LIST
64365: PUSH
64366: LD_VAR 0 1
64370: PUSH
64371: LD_INT 3
64373: PLUS
64374: PUSH
64375: LD_VAR 0 2
64379: PUSH
64380: LD_INT 3
64382: PLUS
64383: PUSH
64384: LD_INT 5
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: LIST
64391: PUSH
64392: LD_VAR 0 1
64396: PUSH
64397: LD_INT 4
64399: PLUS
64400: PUSH
64401: LD_VAR 0 2
64405: PUSH
64406: LD_INT 4
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: LIST
64413: PUSH
64414: LD_VAR 0 1
64418: PUSH
64419: LD_VAR 0 2
64423: PUSH
64424: LD_INT 3
64426: MINUS
64427: PUSH
64428: LD_INT 3
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: LIST
64435: PUSH
64436: LD_VAR 0 1
64440: PUSH
64441: LD_INT 4
64443: MINUS
64444: PUSH
64445: LD_VAR 0 2
64449: PUSH
64450: LD_INT 4
64452: MINUS
64453: PUSH
64454: LD_INT 2
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: LIST
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: ST_TO_ADDR
// end ; 5 :
64469: GO 64609
64471: LD_INT 5
64473: DOUBLE
64474: EQUAL
64475: IFTRUE 64479
64477: GO 64608
64479: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64480: LD_ADDR_VAR 0 5
64484: PUSH
64485: LD_VAR 0 1
64489: PUSH
64490: LD_INT 4
64492: MINUS
64493: PUSH
64494: LD_VAR 0 2
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: LIST
64506: PUSH
64507: LD_VAR 0 1
64511: PUSH
64512: LD_VAR 0 2
64516: PUSH
64517: LD_INT 4
64519: MINUS
64520: PUSH
64521: LD_INT 3
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: LIST
64528: PUSH
64529: LD_VAR 0 1
64533: PUSH
64534: LD_INT 4
64536: PLUS
64537: PUSH
64538: LD_VAR 0 2
64542: PUSH
64543: LD_INT 4
64545: PLUS
64546: PUSH
64547: LD_INT 5
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: LIST
64554: PUSH
64555: LD_VAR 0 1
64559: PUSH
64560: LD_INT 3
64562: PLUS
64563: PUSH
64564: LD_VAR 0 2
64568: PUSH
64569: LD_INT 4
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: LIST
64576: PUSH
64577: LD_VAR 0 1
64581: PUSH
64582: LD_VAR 0 2
64586: PUSH
64587: LD_INT 3
64589: PLUS
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: LIST
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: ST_TO_ADDR
// end ; end ;
64606: GO 64609
64608: POP
// result := list ;
64609: LD_ADDR_VAR 0 4
64613: PUSH
64614: LD_VAR 0 5
64618: ST_TO_ADDR
// end ;
64619: LD_VAR 0 4
64623: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64624: LD_INT 0
64626: PPUSH
64627: PPUSH
64628: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64629: LD_VAR 0 1
64633: NOT
64634: PUSH
64635: LD_VAR 0 2
64639: PUSH
64640: LD_INT 1
64642: PUSH
64643: LD_INT 2
64645: PUSH
64646: LD_INT 3
64648: PUSH
64649: LD_INT 4
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: IN
64658: NOT
64659: OR
64660: IFFALSE 64664
// exit ;
64662: GO 64756
// tmp := [ ] ;
64664: LD_ADDR_VAR 0 5
64668: PUSH
64669: EMPTY
64670: ST_TO_ADDR
// for i in units do
64671: LD_ADDR_VAR 0 4
64675: PUSH
64676: LD_VAR 0 1
64680: PUSH
64681: FOR_IN
64682: IFFALSE 64725
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64684: LD_ADDR_VAR 0 5
64688: PUSH
64689: LD_VAR 0 5
64693: PPUSH
64694: LD_VAR 0 5
64698: PUSH
64699: LD_INT 1
64701: PLUS
64702: PPUSH
64703: LD_VAR 0 4
64707: PPUSH
64708: LD_VAR 0 2
64712: PPUSH
64713: CALL_OW 259
64717: PPUSH
64718: CALL_OW 2
64722: ST_TO_ADDR
64723: GO 64681
64725: POP
64726: POP
// if not tmp then
64727: LD_VAR 0 5
64731: NOT
64732: IFFALSE 64736
// exit ;
64734: GO 64756
// result := SortListByListDesc ( units , tmp ) ;
64736: LD_ADDR_VAR 0 3
64740: PUSH
64741: LD_VAR 0 1
64745: PPUSH
64746: LD_VAR 0 5
64750: PPUSH
64751: CALL_OW 77
64755: ST_TO_ADDR
// end ;
64756: LD_VAR 0 3
64760: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64761: LD_INT 0
64763: PPUSH
64764: PPUSH
64765: PPUSH
// result := false ;
64766: LD_ADDR_VAR 0 3
64770: PUSH
64771: LD_INT 0
64773: ST_TO_ADDR
// x := GetX ( building ) ;
64774: LD_ADDR_VAR 0 4
64778: PUSH
64779: LD_VAR 0 2
64783: PPUSH
64784: CALL_OW 250
64788: ST_TO_ADDR
// y := GetY ( building ) ;
64789: LD_ADDR_VAR 0 5
64793: PUSH
64794: LD_VAR 0 2
64798: PPUSH
64799: CALL_OW 251
64803: ST_TO_ADDR
// if not building or not x or not y then
64804: LD_VAR 0 2
64808: NOT
64809: PUSH
64810: LD_VAR 0 4
64814: NOT
64815: OR
64816: PUSH
64817: LD_VAR 0 5
64821: NOT
64822: OR
64823: IFFALSE 64827
// exit ;
64825: GO 64919
// if GetTaskList ( unit ) then
64827: LD_VAR 0 1
64831: PPUSH
64832: CALL_OW 437
64836: IFFALSE 64919
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64838: LD_STRING e
64840: PUSH
64841: LD_VAR 0 1
64845: PPUSH
64846: CALL_OW 437
64850: PUSH
64851: LD_INT 1
64853: ARRAY
64854: PUSH
64855: LD_INT 1
64857: ARRAY
64858: EQUAL
64859: PUSH
64860: LD_VAR 0 4
64864: PUSH
64865: LD_VAR 0 1
64869: PPUSH
64870: CALL_OW 437
64874: PUSH
64875: LD_INT 1
64877: ARRAY
64878: PUSH
64879: LD_INT 2
64881: ARRAY
64882: EQUAL
64883: AND
64884: PUSH
64885: LD_VAR 0 5
64889: PUSH
64890: LD_VAR 0 1
64894: PPUSH
64895: CALL_OW 437
64899: PUSH
64900: LD_INT 1
64902: ARRAY
64903: PUSH
64904: LD_INT 3
64906: ARRAY
64907: EQUAL
64908: AND
64909: IFFALSE 64919
// result := true end ;
64911: LD_ADDR_VAR 0 3
64915: PUSH
64916: LD_INT 1
64918: ST_TO_ADDR
// end ;
64919: LD_VAR 0 3
64923: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64924: LD_INT 0
64926: PPUSH
// result := false ;
64927: LD_ADDR_VAR 0 4
64931: PUSH
64932: LD_INT 0
64934: ST_TO_ADDR
// if GetTaskList ( unit ) then
64935: LD_VAR 0 1
64939: PPUSH
64940: CALL_OW 437
64944: IFFALSE 65027
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64946: LD_STRING M
64948: PUSH
64949: LD_VAR 0 1
64953: PPUSH
64954: CALL_OW 437
64958: PUSH
64959: LD_INT 1
64961: ARRAY
64962: PUSH
64963: LD_INT 1
64965: ARRAY
64966: EQUAL
64967: PUSH
64968: LD_VAR 0 2
64972: PUSH
64973: LD_VAR 0 1
64977: PPUSH
64978: CALL_OW 437
64982: PUSH
64983: LD_INT 1
64985: ARRAY
64986: PUSH
64987: LD_INT 2
64989: ARRAY
64990: EQUAL
64991: AND
64992: PUSH
64993: LD_VAR 0 3
64997: PUSH
64998: LD_VAR 0 1
65002: PPUSH
65003: CALL_OW 437
65007: PUSH
65008: LD_INT 1
65010: ARRAY
65011: PUSH
65012: LD_INT 3
65014: ARRAY
65015: EQUAL
65016: AND
65017: IFFALSE 65027
// result := true ;
65019: LD_ADDR_VAR 0 4
65023: PUSH
65024: LD_INT 1
65026: ST_TO_ADDR
// end ; end ;
65027: LD_VAR 0 4
65031: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65032: LD_INT 0
65034: PPUSH
65035: PPUSH
65036: PPUSH
65037: PPUSH
// if not unit or not area then
65038: LD_VAR 0 1
65042: NOT
65043: PUSH
65044: LD_VAR 0 2
65048: NOT
65049: OR
65050: IFFALSE 65054
// exit ;
65052: GO 65218
// tmp := AreaToList ( area , i ) ;
65054: LD_ADDR_VAR 0 6
65058: PUSH
65059: LD_VAR 0 2
65063: PPUSH
65064: LD_VAR 0 5
65068: PPUSH
65069: CALL_OW 517
65073: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65074: LD_ADDR_VAR 0 5
65078: PUSH
65079: DOUBLE
65080: LD_INT 1
65082: DEC
65083: ST_TO_ADDR
65084: LD_VAR 0 6
65088: PUSH
65089: LD_INT 1
65091: ARRAY
65092: PUSH
65093: FOR_TO
65094: IFFALSE 65216
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65096: LD_ADDR_VAR 0 7
65100: PUSH
65101: LD_VAR 0 6
65105: PUSH
65106: LD_INT 1
65108: ARRAY
65109: PUSH
65110: LD_VAR 0 5
65114: ARRAY
65115: PUSH
65116: LD_VAR 0 6
65120: PUSH
65121: LD_INT 2
65123: ARRAY
65124: PUSH
65125: LD_VAR 0 5
65129: ARRAY
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65135: LD_VAR 0 7
65139: PUSH
65140: LD_INT 1
65142: ARRAY
65143: PPUSH
65144: LD_VAR 0 7
65148: PUSH
65149: LD_INT 2
65151: ARRAY
65152: PPUSH
65153: CALL_OW 428
65157: PUSH
65158: LD_INT 0
65160: EQUAL
65161: IFFALSE 65214
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65163: LD_VAR 0 1
65167: PPUSH
65168: LD_VAR 0 7
65172: PUSH
65173: LD_INT 1
65175: ARRAY
65176: PPUSH
65177: LD_VAR 0 7
65181: PUSH
65182: LD_INT 2
65184: ARRAY
65185: PPUSH
65186: LD_VAR 0 3
65190: PPUSH
65191: CALL_OW 48
// result := IsPlaced ( unit ) ;
65195: LD_ADDR_VAR 0 4
65199: PUSH
65200: LD_VAR 0 1
65204: PPUSH
65205: CALL_OW 305
65209: ST_TO_ADDR
// exit ;
65210: POP
65211: POP
65212: GO 65218
// end ; end ;
65214: GO 65093
65216: POP
65217: POP
// end ;
65218: LD_VAR 0 4
65222: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65223: LD_INT 0
65225: PPUSH
65226: PPUSH
65227: PPUSH
// if not side or side > 8 then
65228: LD_VAR 0 1
65232: NOT
65233: PUSH
65234: LD_VAR 0 1
65238: PUSH
65239: LD_INT 8
65241: GREATER
65242: OR
65243: IFFALSE 65247
// exit ;
65245: GO 65434
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65247: LD_ADDR_VAR 0 4
65251: PUSH
65252: LD_INT 22
65254: PUSH
65255: LD_VAR 0 1
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 21
65266: PUSH
65267: LD_INT 3
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PPUSH
65278: CALL_OW 69
65282: ST_TO_ADDR
// if not tmp then
65283: LD_VAR 0 4
65287: NOT
65288: IFFALSE 65292
// exit ;
65290: GO 65434
// enable_addtolog := true ;
65292: LD_ADDR_OWVAR 81
65296: PUSH
65297: LD_INT 1
65299: ST_TO_ADDR
// AddToLog ( [ ) ;
65300: LD_STRING [
65302: PPUSH
65303: CALL_OW 561
// for i in tmp do
65307: LD_ADDR_VAR 0 3
65311: PUSH
65312: LD_VAR 0 4
65316: PUSH
65317: FOR_IN
65318: IFFALSE 65425
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65320: LD_STRING [
65322: PUSH
65323: LD_VAR 0 3
65327: PPUSH
65328: CALL_OW 266
65332: STR
65333: PUSH
65334: LD_STRING , 
65336: STR
65337: PUSH
65338: LD_VAR 0 3
65342: PPUSH
65343: CALL_OW 250
65347: STR
65348: PUSH
65349: LD_STRING , 
65351: STR
65352: PUSH
65353: LD_VAR 0 3
65357: PPUSH
65358: CALL_OW 251
65362: STR
65363: PUSH
65364: LD_STRING , 
65366: STR
65367: PUSH
65368: LD_VAR 0 3
65372: PPUSH
65373: CALL_OW 254
65377: STR
65378: PUSH
65379: LD_STRING , 
65381: STR
65382: PUSH
65383: LD_VAR 0 3
65387: PPUSH
65388: LD_INT 1
65390: PPUSH
65391: CALL_OW 268
65395: STR
65396: PUSH
65397: LD_STRING , 
65399: STR
65400: PUSH
65401: LD_VAR 0 3
65405: PPUSH
65406: LD_INT 2
65408: PPUSH
65409: CALL_OW 268
65413: STR
65414: PUSH
65415: LD_STRING ],
65417: STR
65418: PPUSH
65419: CALL_OW 561
// end ;
65423: GO 65317
65425: POP
65426: POP
// AddToLog ( ]; ) ;
65427: LD_STRING ];
65429: PPUSH
65430: CALL_OW 561
// end ;
65434: LD_VAR 0 2
65438: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65439: LD_INT 0
65441: PPUSH
65442: PPUSH
65443: PPUSH
65444: PPUSH
65445: PPUSH
// if not area or not rate or not max then
65446: LD_VAR 0 1
65450: NOT
65451: PUSH
65452: LD_VAR 0 2
65456: NOT
65457: OR
65458: PUSH
65459: LD_VAR 0 4
65463: NOT
65464: OR
65465: IFFALSE 65469
// exit ;
65467: GO 65658
// while 1 do
65469: LD_INT 1
65471: IFFALSE 65658
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65473: LD_ADDR_VAR 0 9
65477: PUSH
65478: LD_VAR 0 1
65482: PPUSH
65483: LD_INT 1
65485: PPUSH
65486: CALL_OW 287
65490: PUSH
65491: LD_INT 10
65493: MUL
65494: ST_TO_ADDR
// r := rate / 10 ;
65495: LD_ADDR_VAR 0 7
65499: PUSH
65500: LD_VAR 0 2
65504: PUSH
65505: LD_INT 10
65507: DIVREAL
65508: ST_TO_ADDR
// time := 1 1$00 ;
65509: LD_ADDR_VAR 0 8
65513: PUSH
65514: LD_INT 2100
65516: ST_TO_ADDR
// if amount < min then
65517: LD_VAR 0 9
65521: PUSH
65522: LD_VAR 0 3
65526: LESS
65527: IFFALSE 65545
// r := r * 2 else
65529: LD_ADDR_VAR 0 7
65533: PUSH
65534: LD_VAR 0 7
65538: PUSH
65539: LD_INT 2
65541: MUL
65542: ST_TO_ADDR
65543: GO 65571
// if amount > max then
65545: LD_VAR 0 9
65549: PUSH
65550: LD_VAR 0 4
65554: GREATER
65555: IFFALSE 65571
// r := r / 2 ;
65557: LD_ADDR_VAR 0 7
65561: PUSH
65562: LD_VAR 0 7
65566: PUSH
65567: LD_INT 2
65569: DIVREAL
65570: ST_TO_ADDR
// time := time / r ;
65571: LD_ADDR_VAR 0 8
65575: PUSH
65576: LD_VAR 0 8
65580: PUSH
65581: LD_VAR 0 7
65585: DIVREAL
65586: ST_TO_ADDR
// if time < 0 then
65587: LD_VAR 0 8
65591: PUSH
65592: LD_INT 0
65594: LESS
65595: IFFALSE 65612
// time := time * - 1 ;
65597: LD_ADDR_VAR 0 8
65601: PUSH
65602: LD_VAR 0 8
65606: PUSH
65607: LD_INT 1
65609: NEG
65610: MUL
65611: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65612: LD_VAR 0 8
65616: PUSH
65617: LD_INT 35
65619: PPUSH
65620: LD_INT 875
65622: PPUSH
65623: CALL_OW 12
65627: PLUS
65628: PPUSH
65629: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65633: LD_INT 1
65635: PPUSH
65636: LD_INT 5
65638: PPUSH
65639: CALL_OW 12
65643: PPUSH
65644: LD_VAR 0 1
65648: PPUSH
65649: LD_INT 1
65651: PPUSH
65652: CALL_OW 55
// end ;
65656: GO 65469
// end ;
65658: LD_VAR 0 5
65662: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65663: LD_INT 0
65665: PPUSH
65666: PPUSH
65667: PPUSH
65668: PPUSH
65669: PPUSH
65670: PPUSH
65671: PPUSH
65672: PPUSH
// if not turrets or not factories then
65673: LD_VAR 0 1
65677: NOT
65678: PUSH
65679: LD_VAR 0 2
65683: NOT
65684: OR
65685: IFFALSE 65689
// exit ;
65687: GO 65996
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65689: LD_ADDR_VAR 0 10
65693: PUSH
65694: LD_INT 5
65696: PUSH
65697: LD_INT 6
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 2
65706: PUSH
65707: LD_INT 4
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: LD_INT 5
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 24
65731: PUSH
65732: LD_INT 25
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 23
65741: PUSH
65742: LD_INT 27
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 42
65755: PUSH
65756: LD_INT 43
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 44
65765: PUSH
65766: LD_INT 46
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 45
65775: PUSH
65776: LD_INT 47
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: LIST
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: LIST
65792: ST_TO_ADDR
// result := [ ] ;
65793: LD_ADDR_VAR 0 3
65797: PUSH
65798: EMPTY
65799: ST_TO_ADDR
// for i in turrets do
65800: LD_ADDR_VAR 0 4
65804: PUSH
65805: LD_VAR 0 1
65809: PUSH
65810: FOR_IN
65811: IFFALSE 65994
// begin nat := GetNation ( i ) ;
65813: LD_ADDR_VAR 0 7
65817: PUSH
65818: LD_VAR 0 4
65822: PPUSH
65823: CALL_OW 248
65827: ST_TO_ADDR
// weapon := 0 ;
65828: LD_ADDR_VAR 0 8
65832: PUSH
65833: LD_INT 0
65835: ST_TO_ADDR
// if not nat then
65836: LD_VAR 0 7
65840: NOT
65841: IFFALSE 65845
// continue ;
65843: GO 65810
// for j in list [ nat ] do
65845: LD_ADDR_VAR 0 5
65849: PUSH
65850: LD_VAR 0 10
65854: PUSH
65855: LD_VAR 0 7
65859: ARRAY
65860: PUSH
65861: FOR_IN
65862: IFFALSE 65903
// if GetBWeapon ( i ) = j [ 1 ] then
65864: LD_VAR 0 4
65868: PPUSH
65869: CALL_OW 269
65873: PUSH
65874: LD_VAR 0 5
65878: PUSH
65879: LD_INT 1
65881: ARRAY
65882: EQUAL
65883: IFFALSE 65901
// begin weapon := j [ 2 ] ;
65885: LD_ADDR_VAR 0 8
65889: PUSH
65890: LD_VAR 0 5
65894: PUSH
65895: LD_INT 2
65897: ARRAY
65898: ST_TO_ADDR
// break ;
65899: GO 65903
// end ;
65901: GO 65861
65903: POP
65904: POP
// if not weapon then
65905: LD_VAR 0 8
65909: NOT
65910: IFFALSE 65914
// continue ;
65912: GO 65810
// for k in factories do
65914: LD_ADDR_VAR 0 6
65918: PUSH
65919: LD_VAR 0 2
65923: PUSH
65924: FOR_IN
65925: IFFALSE 65990
// begin weapons := AvailableWeaponList ( k ) ;
65927: LD_ADDR_VAR 0 9
65931: PUSH
65932: LD_VAR 0 6
65936: PPUSH
65937: CALL_OW 478
65941: ST_TO_ADDR
// if not weapons then
65942: LD_VAR 0 9
65946: NOT
65947: IFFALSE 65951
// continue ;
65949: GO 65924
// if weapon in weapons then
65951: LD_VAR 0 8
65955: PUSH
65956: LD_VAR 0 9
65960: IN
65961: IFFALSE 65988
// begin result := [ i , weapon ] ;
65963: LD_ADDR_VAR 0 3
65967: PUSH
65968: LD_VAR 0 4
65972: PUSH
65973: LD_VAR 0 8
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: ST_TO_ADDR
// exit ;
65982: POP
65983: POP
65984: POP
65985: POP
65986: GO 65996
// end ; end ;
65988: GO 65924
65990: POP
65991: POP
// end ;
65992: GO 65810
65994: POP
65995: POP
// end ;
65996: LD_VAR 0 3
66000: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66001: LD_INT 0
66003: PPUSH
// if not side or side > 8 then
66004: LD_VAR 0 3
66008: NOT
66009: PUSH
66010: LD_VAR 0 3
66014: PUSH
66015: LD_INT 8
66017: GREATER
66018: OR
66019: IFFALSE 66023
// exit ;
66021: GO 66082
// if not range then
66023: LD_VAR 0 4
66027: NOT
66028: IFFALSE 66039
// range := - 12 ;
66030: LD_ADDR_VAR 0 4
66034: PUSH
66035: LD_INT 12
66037: NEG
66038: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66039: LD_VAR 0 1
66043: PPUSH
66044: LD_VAR 0 2
66048: PPUSH
66049: LD_VAR 0 3
66053: PPUSH
66054: LD_VAR 0 4
66058: PPUSH
66059: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66063: LD_VAR 0 1
66067: PPUSH
66068: LD_VAR 0 2
66072: PPUSH
66073: LD_VAR 0 3
66077: PPUSH
66078: CALL_OW 331
// end ;
66082: LD_VAR 0 5
66086: RET
// export function Video ( mode ) ; begin
66087: LD_INT 0
66089: PPUSH
// ingame_video = mode ;
66090: LD_ADDR_OWVAR 52
66094: PUSH
66095: LD_VAR 0 1
66099: ST_TO_ADDR
// interface_hidden = mode ;
66100: LD_ADDR_OWVAR 54
66104: PUSH
66105: LD_VAR 0 1
66109: ST_TO_ADDR
// end ;
66110: LD_VAR 0 2
66114: RET
// export function Join ( array , element ) ; begin
66115: LD_INT 0
66117: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66118: LD_ADDR_VAR 0 3
66122: PUSH
66123: LD_VAR 0 1
66127: PPUSH
66128: LD_VAR 0 1
66132: PUSH
66133: LD_INT 1
66135: PLUS
66136: PPUSH
66137: LD_VAR 0 2
66141: PPUSH
66142: CALL_OW 1
66146: ST_TO_ADDR
// end ;
66147: LD_VAR 0 3
66151: RET
// export function JoinUnion ( array , element ) ; begin
66152: LD_INT 0
66154: PPUSH
// result := array union element ;
66155: LD_ADDR_VAR 0 3
66159: PUSH
66160: LD_VAR 0 1
66164: PUSH
66165: LD_VAR 0 2
66169: UNION
66170: ST_TO_ADDR
// end ;
66171: LD_VAR 0 3
66175: RET
// export function GetBehemoths ( side ) ; begin
66176: LD_INT 0
66178: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66179: LD_ADDR_VAR 0 2
66183: PUSH
66184: LD_INT 22
66186: PUSH
66187: LD_VAR 0 1
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 31
66198: PUSH
66199: LD_INT 25
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PPUSH
66210: CALL_OW 69
66214: ST_TO_ADDR
// end ;
66215: LD_VAR 0 2
66219: RET
// export function Shuffle ( array ) ; var i , index ; begin
66220: LD_INT 0
66222: PPUSH
66223: PPUSH
66224: PPUSH
// result := [ ] ;
66225: LD_ADDR_VAR 0 2
66229: PUSH
66230: EMPTY
66231: ST_TO_ADDR
// if not array then
66232: LD_VAR 0 1
66236: NOT
66237: IFFALSE 66241
// exit ;
66239: GO 66340
// Randomize ;
66241: CALL_OW 10
// for i = array downto 1 do
66245: LD_ADDR_VAR 0 3
66249: PUSH
66250: DOUBLE
66251: LD_VAR 0 1
66255: INC
66256: ST_TO_ADDR
66257: LD_INT 1
66259: PUSH
66260: FOR_DOWNTO
66261: IFFALSE 66338
// begin index := rand ( 1 , array ) ;
66263: LD_ADDR_VAR 0 4
66267: PUSH
66268: LD_INT 1
66270: PPUSH
66271: LD_VAR 0 1
66275: PPUSH
66276: CALL_OW 12
66280: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66281: LD_ADDR_VAR 0 2
66285: PUSH
66286: LD_VAR 0 2
66290: PPUSH
66291: LD_VAR 0 2
66295: PUSH
66296: LD_INT 1
66298: PLUS
66299: PPUSH
66300: LD_VAR 0 1
66304: PUSH
66305: LD_VAR 0 4
66309: ARRAY
66310: PPUSH
66311: CALL_OW 2
66315: ST_TO_ADDR
// array := Delete ( array , index ) ;
66316: LD_ADDR_VAR 0 1
66320: PUSH
66321: LD_VAR 0 1
66325: PPUSH
66326: LD_VAR 0 4
66330: PPUSH
66331: CALL_OW 3
66335: ST_TO_ADDR
// end ;
66336: GO 66260
66338: POP
66339: POP
// end ;
66340: LD_VAR 0 2
66344: RET
// export function GetBaseMaterials ( base ) ; begin
66345: LD_INT 0
66347: PPUSH
// result := [ 0 , 0 , 0 ] ;
66348: LD_ADDR_VAR 0 2
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: LD_INT 0
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: ST_TO_ADDR
// if not base then
66367: LD_VAR 0 1
66371: NOT
66372: IFFALSE 66376
// exit ;
66374: GO 66425
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66376: LD_ADDR_VAR 0 2
66380: PUSH
66381: LD_VAR 0 1
66385: PPUSH
66386: LD_INT 1
66388: PPUSH
66389: CALL_OW 275
66393: PUSH
66394: LD_VAR 0 1
66398: PPUSH
66399: LD_INT 2
66401: PPUSH
66402: CALL_OW 275
66406: PUSH
66407: LD_VAR 0 1
66411: PPUSH
66412: LD_INT 3
66414: PPUSH
66415: CALL_OW 275
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: LIST
66424: ST_TO_ADDR
// end ;
66425: LD_VAR 0 2
66429: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66430: LD_INT 0
66432: PPUSH
66433: PPUSH
// result := array ;
66434: LD_ADDR_VAR 0 3
66438: PUSH
66439: LD_VAR 0 1
66443: ST_TO_ADDR
// if size > 0 then
66444: LD_VAR 0 2
66448: PUSH
66449: LD_INT 0
66451: GREATER
66452: IFFALSE 66498
// for i := array downto size do
66454: LD_ADDR_VAR 0 4
66458: PUSH
66459: DOUBLE
66460: LD_VAR 0 1
66464: INC
66465: ST_TO_ADDR
66466: LD_VAR 0 2
66470: PUSH
66471: FOR_DOWNTO
66472: IFFALSE 66496
// result := Delete ( result , result ) ;
66474: LD_ADDR_VAR 0 3
66478: PUSH
66479: LD_VAR 0 3
66483: PPUSH
66484: LD_VAR 0 3
66488: PPUSH
66489: CALL_OW 3
66493: ST_TO_ADDR
66494: GO 66471
66496: POP
66497: POP
// end ;
66498: LD_VAR 0 3
66502: RET
// export function ComExit ( unit ) ; var tmp ; begin
66503: LD_INT 0
66505: PPUSH
66506: PPUSH
// if not IsInUnit ( unit ) then
66507: LD_VAR 0 1
66511: PPUSH
66512: CALL_OW 310
66516: NOT
66517: IFFALSE 66521
// exit ;
66519: GO 66581
// tmp := IsInUnit ( unit ) ;
66521: LD_ADDR_VAR 0 3
66525: PUSH
66526: LD_VAR 0 1
66530: PPUSH
66531: CALL_OW 310
66535: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66536: LD_VAR 0 3
66540: PPUSH
66541: CALL_OW 247
66545: PUSH
66546: LD_INT 2
66548: EQUAL
66549: IFFALSE 66562
// ComExitVehicle ( unit ) else
66551: LD_VAR 0 1
66555: PPUSH
66556: CALL_OW 121
66560: GO 66571
// ComExitBuilding ( unit ) ;
66562: LD_VAR 0 1
66566: PPUSH
66567: CALL_OW 122
// result := tmp ;
66571: LD_ADDR_VAR 0 2
66575: PUSH
66576: LD_VAR 0 3
66580: ST_TO_ADDR
// end ;
66581: LD_VAR 0 2
66585: RET
// export function ComExitAll ( units ) ; var i ; begin
66586: LD_INT 0
66588: PPUSH
66589: PPUSH
// if not units then
66590: LD_VAR 0 1
66594: NOT
66595: IFFALSE 66599
// exit ;
66597: GO 66625
// for i in units do
66599: LD_ADDR_VAR 0 3
66603: PUSH
66604: LD_VAR 0 1
66608: PUSH
66609: FOR_IN
66610: IFFALSE 66623
// ComExit ( i ) ;
66612: LD_VAR 0 3
66616: PPUSH
66617: CALL 66503 0 1
66621: GO 66609
66623: POP
66624: POP
// end ;
66625: LD_VAR 0 2
66629: RET
// export function ResetHc ; begin
66630: LD_INT 0
66632: PPUSH
// InitHc ;
66633: CALL_OW 19
// hc_importance := 0 ;
66637: LD_ADDR_OWVAR 32
66641: PUSH
66642: LD_INT 0
66644: ST_TO_ADDR
// end ;
66645: LD_VAR 0 1
66649: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66650: LD_INT 0
66652: PPUSH
66653: PPUSH
66654: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66655: LD_ADDR_VAR 0 6
66659: PUSH
66660: LD_VAR 0 1
66664: PUSH
66665: LD_VAR 0 3
66669: PLUS
66670: PUSH
66671: LD_INT 2
66673: DIV
66674: ST_TO_ADDR
// if _x < 0 then
66675: LD_VAR 0 6
66679: PUSH
66680: LD_INT 0
66682: LESS
66683: IFFALSE 66700
// _x := _x * - 1 ;
66685: LD_ADDR_VAR 0 6
66689: PUSH
66690: LD_VAR 0 6
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: MUL
66699: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66700: LD_ADDR_VAR 0 7
66704: PUSH
66705: LD_VAR 0 2
66709: PUSH
66710: LD_VAR 0 4
66714: PLUS
66715: PUSH
66716: LD_INT 2
66718: DIV
66719: ST_TO_ADDR
// if _y < 0 then
66720: LD_VAR 0 7
66724: PUSH
66725: LD_INT 0
66727: LESS
66728: IFFALSE 66745
// _y := _y * - 1 ;
66730: LD_ADDR_VAR 0 7
66734: PUSH
66735: LD_VAR 0 7
66739: PUSH
66740: LD_INT 1
66742: NEG
66743: MUL
66744: ST_TO_ADDR
// result := [ _x , _y ] ;
66745: LD_ADDR_VAR 0 5
66749: PUSH
66750: LD_VAR 0 6
66754: PUSH
66755: LD_VAR 0 7
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: ST_TO_ADDR
// end ;
66764: LD_VAR 0 5
66768: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66769: LD_INT 0
66771: PPUSH
66772: PPUSH
66773: PPUSH
66774: PPUSH
// task := GetTaskList ( unit ) ;
66775: LD_ADDR_VAR 0 7
66779: PUSH
66780: LD_VAR 0 1
66784: PPUSH
66785: CALL_OW 437
66789: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66790: LD_VAR 0 7
66794: NOT
66795: PUSH
66796: LD_VAR 0 1
66800: PPUSH
66801: LD_VAR 0 2
66805: PPUSH
66806: CALL_OW 308
66810: NOT
66811: AND
66812: IFFALSE 66816
// exit ;
66814: GO 66934
// if IsInArea ( unit , area ) then
66816: LD_VAR 0 1
66820: PPUSH
66821: LD_VAR 0 2
66825: PPUSH
66826: CALL_OW 308
66830: IFFALSE 66848
// begin ComMoveToArea ( unit , goAway ) ;
66832: LD_VAR 0 1
66836: PPUSH
66837: LD_VAR 0 3
66841: PPUSH
66842: CALL_OW 113
// exit ;
66846: GO 66934
// end ; if task [ 1 ] [ 1 ] <> M then
66848: LD_VAR 0 7
66852: PUSH
66853: LD_INT 1
66855: ARRAY
66856: PUSH
66857: LD_INT 1
66859: ARRAY
66860: PUSH
66861: LD_STRING M
66863: NONEQUAL
66864: IFFALSE 66868
// exit ;
66866: GO 66934
// x := task [ 1 ] [ 2 ] ;
66868: LD_ADDR_VAR 0 5
66872: PUSH
66873: LD_VAR 0 7
66877: PUSH
66878: LD_INT 1
66880: ARRAY
66881: PUSH
66882: LD_INT 2
66884: ARRAY
66885: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66886: LD_ADDR_VAR 0 6
66890: PUSH
66891: LD_VAR 0 7
66895: PUSH
66896: LD_INT 1
66898: ARRAY
66899: PUSH
66900: LD_INT 3
66902: ARRAY
66903: ST_TO_ADDR
// if InArea ( x , y , area ) then
66904: LD_VAR 0 5
66908: PPUSH
66909: LD_VAR 0 6
66913: PPUSH
66914: LD_VAR 0 2
66918: PPUSH
66919: CALL_OW 309
66923: IFFALSE 66934
// ComStop ( unit ) ;
66925: LD_VAR 0 1
66929: PPUSH
66930: CALL_OW 141
// end ;
66934: LD_VAR 0 4
66938: RET
// export function Abs ( value ) ; begin
66939: LD_INT 0
66941: PPUSH
// result := value ;
66942: LD_ADDR_VAR 0 2
66946: PUSH
66947: LD_VAR 0 1
66951: ST_TO_ADDR
// if value < 0 then
66952: LD_VAR 0 1
66956: PUSH
66957: LD_INT 0
66959: LESS
66960: IFFALSE 66977
// result := value * - 1 ;
66962: LD_ADDR_VAR 0 2
66966: PUSH
66967: LD_VAR 0 1
66971: PUSH
66972: LD_INT 1
66974: NEG
66975: MUL
66976: ST_TO_ADDR
// end ;
66977: LD_VAR 0 2
66981: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66982: LD_INT 0
66984: PPUSH
66985: PPUSH
66986: PPUSH
66987: PPUSH
66988: PPUSH
66989: PPUSH
66990: PPUSH
66991: PPUSH
// if not unit or not building then
66992: LD_VAR 0 1
66996: NOT
66997: PUSH
66998: LD_VAR 0 2
67002: NOT
67003: OR
67004: IFFALSE 67008
// exit ;
67006: GO 67234
// x := GetX ( building ) ;
67008: LD_ADDR_VAR 0 4
67012: PUSH
67013: LD_VAR 0 2
67017: PPUSH
67018: CALL_OW 250
67022: ST_TO_ADDR
// y := GetY ( building ) ;
67023: LD_ADDR_VAR 0 6
67027: PUSH
67028: LD_VAR 0 2
67032: PPUSH
67033: CALL_OW 251
67037: ST_TO_ADDR
// d := GetDir ( building ) ;
67038: LD_ADDR_VAR 0 8
67042: PUSH
67043: LD_VAR 0 2
67047: PPUSH
67048: CALL_OW 254
67052: ST_TO_ADDR
// r := 4 ;
67053: LD_ADDR_VAR 0 9
67057: PUSH
67058: LD_INT 4
67060: ST_TO_ADDR
// for i := 1 to 5 do
67061: LD_ADDR_VAR 0 10
67065: PUSH
67066: DOUBLE
67067: LD_INT 1
67069: DEC
67070: ST_TO_ADDR
67071: LD_INT 5
67073: PUSH
67074: FOR_TO
67075: IFFALSE 67232
// begin _x := ShiftX ( x , d , r + i ) ;
67077: LD_ADDR_VAR 0 5
67081: PUSH
67082: LD_VAR 0 4
67086: PPUSH
67087: LD_VAR 0 8
67091: PPUSH
67092: LD_VAR 0 9
67096: PUSH
67097: LD_VAR 0 10
67101: PLUS
67102: PPUSH
67103: CALL_OW 272
67107: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67108: LD_ADDR_VAR 0 7
67112: PUSH
67113: LD_VAR 0 6
67117: PPUSH
67118: LD_VAR 0 8
67122: PPUSH
67123: LD_VAR 0 9
67127: PUSH
67128: LD_VAR 0 10
67132: PLUS
67133: PPUSH
67134: CALL_OW 273
67138: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67139: LD_VAR 0 5
67143: PPUSH
67144: LD_VAR 0 7
67148: PPUSH
67149: CALL_OW 488
67153: PUSH
67154: LD_VAR 0 5
67158: PPUSH
67159: LD_VAR 0 7
67163: PPUSH
67164: CALL_OW 428
67168: PPUSH
67169: CALL_OW 247
67173: PUSH
67174: LD_INT 3
67176: PUSH
67177: LD_INT 2
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: IN
67184: NOT
67185: AND
67186: IFFALSE 67230
// begin ComMoveXY ( unit , _x , _y ) ;
67188: LD_VAR 0 1
67192: PPUSH
67193: LD_VAR 0 5
67197: PPUSH
67198: LD_VAR 0 7
67202: PPUSH
67203: CALL_OW 111
// result := [ _x , _y ] ;
67207: LD_ADDR_VAR 0 3
67211: PUSH
67212: LD_VAR 0 5
67216: PUSH
67217: LD_VAR 0 7
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: ST_TO_ADDR
// exit ;
67226: POP
67227: POP
67228: GO 67234
// end ; end ;
67230: GO 67074
67232: POP
67233: POP
// end ;
67234: LD_VAR 0 3
67238: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67239: LD_INT 0
67241: PPUSH
67242: PPUSH
67243: PPUSH
// result := 0 ;
67244: LD_ADDR_VAR 0 3
67248: PUSH
67249: LD_INT 0
67251: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67252: LD_VAR 0 1
67256: PUSH
67257: LD_INT 0
67259: LESS
67260: PUSH
67261: LD_VAR 0 1
67265: PUSH
67266: LD_INT 8
67268: GREATER
67269: OR
67270: PUSH
67271: LD_VAR 0 2
67275: PUSH
67276: LD_INT 0
67278: LESS
67279: OR
67280: PUSH
67281: LD_VAR 0 2
67285: PUSH
67286: LD_INT 8
67288: GREATER
67289: OR
67290: IFFALSE 67294
// exit ;
67292: GO 67369
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67294: LD_ADDR_VAR 0 4
67298: PUSH
67299: LD_INT 22
67301: PUSH
67302: LD_VAR 0 2
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PPUSH
67311: CALL_OW 69
67315: PUSH
67316: FOR_IN
67317: IFFALSE 67367
// begin un := UnitShoot ( i ) ;
67319: LD_ADDR_VAR 0 5
67323: PUSH
67324: LD_VAR 0 4
67328: PPUSH
67329: CALL_OW 504
67333: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67334: LD_VAR 0 5
67338: PPUSH
67339: CALL_OW 255
67343: PUSH
67344: LD_VAR 0 1
67348: EQUAL
67349: IFFALSE 67365
// begin result := un ;
67351: LD_ADDR_VAR 0 3
67355: PUSH
67356: LD_VAR 0 5
67360: ST_TO_ADDR
// exit ;
67361: POP
67362: POP
67363: GO 67369
// end ; end ;
67365: GO 67316
67367: POP
67368: POP
// end ;
67369: LD_VAR 0 3
67373: RET
// export function GetCargoBay ( units ) ; begin
67374: LD_INT 0
67376: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67377: LD_ADDR_VAR 0 2
67381: PUSH
67382: LD_VAR 0 1
67386: PPUSH
67387: LD_INT 2
67389: PUSH
67390: LD_INT 34
67392: PUSH
67393: LD_INT 12
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 34
67402: PUSH
67403: LD_INT 51
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 34
67412: PUSH
67413: LD_INT 32
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 34
67422: PUSH
67423: LD_EXP 46
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: PPUSH
67439: CALL_OW 72
67443: ST_TO_ADDR
// end ;
67444: LD_VAR 0 2
67448: RET
// export function Negate ( value ) ; begin
67449: LD_INT 0
67451: PPUSH
// result := not value ;
67452: LD_ADDR_VAR 0 2
67456: PUSH
67457: LD_VAR 0 1
67461: NOT
67462: ST_TO_ADDR
// end ;
67463: LD_VAR 0 2
67467: RET
// export function Inc ( value ) ; begin
67468: LD_INT 0
67470: PPUSH
// result := value + 1 ;
67471: LD_ADDR_VAR 0 2
67475: PUSH
67476: LD_VAR 0 1
67480: PUSH
67481: LD_INT 1
67483: PLUS
67484: ST_TO_ADDR
// end ;
67485: LD_VAR 0 2
67489: RET
// export function Dec ( value ) ; begin
67490: LD_INT 0
67492: PPUSH
// result := value - 1 ;
67493: LD_ADDR_VAR 0 2
67497: PUSH
67498: LD_VAR 0 1
67502: PUSH
67503: LD_INT 1
67505: MINUS
67506: ST_TO_ADDR
// end ;
67507: LD_VAR 0 2
67511: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67512: LD_INT 0
67514: PPUSH
67515: PPUSH
67516: PPUSH
67517: PPUSH
67518: PPUSH
67519: PPUSH
67520: PPUSH
67521: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67522: LD_VAR 0 1
67526: PPUSH
67527: LD_VAR 0 2
67531: PPUSH
67532: CALL_OW 488
67536: NOT
67537: PUSH
67538: LD_VAR 0 3
67542: PPUSH
67543: LD_VAR 0 4
67547: PPUSH
67548: CALL_OW 488
67552: NOT
67553: OR
67554: IFFALSE 67567
// begin result := - 1 ;
67556: LD_ADDR_VAR 0 5
67560: PUSH
67561: LD_INT 1
67563: NEG
67564: ST_TO_ADDR
// exit ;
67565: GO 67802
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67567: LD_ADDR_VAR 0 12
67571: PUSH
67572: LD_VAR 0 1
67576: PPUSH
67577: LD_VAR 0 2
67581: PPUSH
67582: LD_VAR 0 3
67586: PPUSH
67587: LD_VAR 0 4
67591: PPUSH
67592: CALL 66650 0 4
67596: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67597: LD_ADDR_VAR 0 11
67601: PUSH
67602: LD_VAR 0 1
67606: PPUSH
67607: LD_VAR 0 2
67611: PPUSH
67612: LD_VAR 0 12
67616: PUSH
67617: LD_INT 1
67619: ARRAY
67620: PPUSH
67621: LD_VAR 0 12
67625: PUSH
67626: LD_INT 2
67628: ARRAY
67629: PPUSH
67630: CALL_OW 298
67634: ST_TO_ADDR
// distance := 9999 ;
67635: LD_ADDR_VAR 0 10
67639: PUSH
67640: LD_INT 9999
67642: ST_TO_ADDR
// for i := 0 to 5 do
67643: LD_ADDR_VAR 0 6
67647: PUSH
67648: DOUBLE
67649: LD_INT 0
67651: DEC
67652: ST_TO_ADDR
67653: LD_INT 5
67655: PUSH
67656: FOR_TO
67657: IFFALSE 67800
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67659: LD_ADDR_VAR 0 7
67663: PUSH
67664: LD_VAR 0 1
67668: PPUSH
67669: LD_VAR 0 6
67673: PPUSH
67674: LD_VAR 0 11
67678: PPUSH
67679: CALL_OW 272
67683: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67684: LD_ADDR_VAR 0 8
67688: PUSH
67689: LD_VAR 0 2
67693: PPUSH
67694: LD_VAR 0 6
67698: PPUSH
67699: LD_VAR 0 11
67703: PPUSH
67704: CALL_OW 273
67708: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67709: LD_VAR 0 7
67713: PPUSH
67714: LD_VAR 0 8
67718: PPUSH
67719: CALL_OW 488
67723: NOT
67724: IFFALSE 67728
// continue ;
67726: GO 67656
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67728: LD_ADDR_VAR 0 9
67732: PUSH
67733: LD_VAR 0 12
67737: PUSH
67738: LD_INT 1
67740: ARRAY
67741: PPUSH
67742: LD_VAR 0 12
67746: PUSH
67747: LD_INT 2
67749: ARRAY
67750: PPUSH
67751: LD_VAR 0 7
67755: PPUSH
67756: LD_VAR 0 8
67760: PPUSH
67761: CALL_OW 298
67765: ST_TO_ADDR
// if tmp < distance then
67766: LD_VAR 0 9
67770: PUSH
67771: LD_VAR 0 10
67775: LESS
67776: IFFALSE 67798
// begin result := i ;
67778: LD_ADDR_VAR 0 5
67782: PUSH
67783: LD_VAR 0 6
67787: ST_TO_ADDR
// distance := tmp ;
67788: LD_ADDR_VAR 0 10
67792: PUSH
67793: LD_VAR 0 9
67797: ST_TO_ADDR
// end ; end ;
67798: GO 67656
67800: POP
67801: POP
// end ;
67802: LD_VAR 0 5
67806: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67807: LD_INT 0
67809: PPUSH
67810: PPUSH
// if not driver or not IsInUnit ( driver ) then
67811: LD_VAR 0 1
67815: NOT
67816: PUSH
67817: LD_VAR 0 1
67821: PPUSH
67822: CALL_OW 310
67826: NOT
67827: OR
67828: IFFALSE 67832
// exit ;
67830: GO 67922
// vehicle := IsInUnit ( driver ) ;
67832: LD_ADDR_VAR 0 3
67836: PUSH
67837: LD_VAR 0 1
67841: PPUSH
67842: CALL_OW 310
67846: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67847: LD_VAR 0 1
67851: PPUSH
67852: LD_STRING \
67854: PUSH
67855: LD_INT 0
67857: PUSH
67858: LD_INT 0
67860: PUSH
67861: LD_INT 0
67863: PUSH
67864: LD_INT 0
67866: PUSH
67867: LD_INT 0
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: PUSH
67882: LD_STRING E
67884: PUSH
67885: LD_INT 0
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: LD_VAR 0 3
67895: PUSH
67896: LD_INT 0
67898: PUSH
67899: LD_INT 0
67901: PUSH
67902: LD_INT 0
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PPUSH
67918: CALL_OW 446
// end ;
67922: LD_VAR 0 2
67926: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67927: LD_INT 0
67929: PPUSH
67930: PPUSH
// if not driver or not IsInUnit ( driver ) then
67931: LD_VAR 0 1
67935: NOT
67936: PUSH
67937: LD_VAR 0 1
67941: PPUSH
67942: CALL_OW 310
67946: NOT
67947: OR
67948: IFFALSE 67952
// exit ;
67950: GO 68042
// vehicle := IsInUnit ( driver ) ;
67952: LD_ADDR_VAR 0 3
67956: PUSH
67957: LD_VAR 0 1
67961: PPUSH
67962: CALL_OW 310
67966: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67967: LD_VAR 0 1
67971: PPUSH
67972: LD_STRING \
67974: PUSH
67975: LD_INT 0
67977: PUSH
67978: LD_INT 0
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: LD_INT 0
67986: PUSH
67987: LD_INT 0
67989: PUSH
67990: LD_INT 0
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: PUSH
68002: LD_STRING E
68004: PUSH
68005: LD_INT 0
68007: PUSH
68008: LD_INT 0
68010: PUSH
68011: LD_VAR 0 3
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: LD_INT 0
68021: PUSH
68022: LD_INT 0
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PPUSH
68038: CALL_OW 447
// end ;
68042: LD_VAR 0 2
68046: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68047: LD_INT 0
68049: PPUSH
68050: PPUSH
68051: PPUSH
// tmp := [ ] ;
68052: LD_ADDR_VAR 0 5
68056: PUSH
68057: EMPTY
68058: ST_TO_ADDR
// for i in units do
68059: LD_ADDR_VAR 0 4
68063: PUSH
68064: LD_VAR 0 1
68068: PUSH
68069: FOR_IN
68070: IFFALSE 68108
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68072: LD_ADDR_VAR 0 5
68076: PUSH
68077: LD_VAR 0 5
68081: PPUSH
68082: LD_VAR 0 5
68086: PUSH
68087: LD_INT 1
68089: PLUS
68090: PPUSH
68091: LD_VAR 0 4
68095: PPUSH
68096: CALL_OW 256
68100: PPUSH
68101: CALL_OW 2
68105: ST_TO_ADDR
68106: GO 68069
68108: POP
68109: POP
// if not tmp then
68110: LD_VAR 0 5
68114: NOT
68115: IFFALSE 68119
// exit ;
68117: GO 68167
// if asc then
68119: LD_VAR 0 2
68123: IFFALSE 68147
// result := SortListByListAsc ( units , tmp ) else
68125: LD_ADDR_VAR 0 3
68129: PUSH
68130: LD_VAR 0 1
68134: PPUSH
68135: LD_VAR 0 5
68139: PPUSH
68140: CALL_OW 76
68144: ST_TO_ADDR
68145: GO 68167
// result := SortListByListDesc ( units , tmp ) ;
68147: LD_ADDR_VAR 0 3
68151: PUSH
68152: LD_VAR 0 1
68156: PPUSH
68157: LD_VAR 0 5
68161: PPUSH
68162: CALL_OW 77
68166: ST_TO_ADDR
// end ;
68167: LD_VAR 0 3
68171: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68172: LD_INT 0
68174: PPUSH
68175: PPUSH
// task := GetTaskList ( mech ) ;
68176: LD_ADDR_VAR 0 4
68180: PUSH
68181: LD_VAR 0 1
68185: PPUSH
68186: CALL_OW 437
68190: ST_TO_ADDR
// if not task then
68191: LD_VAR 0 4
68195: NOT
68196: IFFALSE 68200
// exit ;
68198: GO 68242
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68200: LD_ADDR_VAR 0 3
68204: PUSH
68205: LD_VAR 0 4
68209: PUSH
68210: LD_INT 1
68212: ARRAY
68213: PUSH
68214: LD_INT 1
68216: ARRAY
68217: PUSH
68218: LD_STRING r
68220: EQUAL
68221: PUSH
68222: LD_VAR 0 4
68226: PUSH
68227: LD_INT 1
68229: ARRAY
68230: PUSH
68231: LD_INT 4
68233: ARRAY
68234: PUSH
68235: LD_VAR 0 2
68239: EQUAL
68240: AND
68241: ST_TO_ADDR
// end ;
68242: LD_VAR 0 3
68246: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68247: LD_INT 0
68249: PPUSH
// SetDir ( unit , d ) ;
68250: LD_VAR 0 1
68254: PPUSH
68255: LD_VAR 0 4
68259: PPUSH
68260: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68264: LD_VAR 0 1
68268: PPUSH
68269: LD_VAR 0 2
68273: PPUSH
68274: LD_VAR 0 3
68278: PPUSH
68279: LD_VAR 0 5
68283: PPUSH
68284: CALL_OW 48
// end ;
68288: LD_VAR 0 6
68292: RET
// export function ToNaturalNumber ( number ) ; begin
68293: LD_INT 0
68295: PPUSH
// result := number div 1 ;
68296: LD_ADDR_VAR 0 2
68300: PUSH
68301: LD_VAR 0 1
68305: PUSH
68306: LD_INT 1
68308: DIV
68309: ST_TO_ADDR
// if number < 0 then
68310: LD_VAR 0 1
68314: PUSH
68315: LD_INT 0
68317: LESS
68318: IFFALSE 68328
// result := 0 ;
68320: LD_ADDR_VAR 0 2
68324: PUSH
68325: LD_INT 0
68327: ST_TO_ADDR
// end ;
68328: LD_VAR 0 2
68332: RET
// export function SortByClass ( units , class ) ; var un ; begin
68333: LD_INT 0
68335: PPUSH
68336: PPUSH
// if not units or not class then
68337: LD_VAR 0 1
68341: NOT
68342: PUSH
68343: LD_VAR 0 2
68347: NOT
68348: OR
68349: IFFALSE 68353
// exit ;
68351: GO 68448
// result := [ ] ;
68353: LD_ADDR_VAR 0 3
68357: PUSH
68358: EMPTY
68359: ST_TO_ADDR
// for un in units do
68360: LD_ADDR_VAR 0 4
68364: PUSH
68365: LD_VAR 0 1
68369: PUSH
68370: FOR_IN
68371: IFFALSE 68446
// if GetClass ( un ) = class then
68373: LD_VAR 0 4
68377: PPUSH
68378: CALL_OW 257
68382: PUSH
68383: LD_VAR 0 2
68387: EQUAL
68388: IFFALSE 68415
// result := Insert ( result , 1 , un ) else
68390: LD_ADDR_VAR 0 3
68394: PUSH
68395: LD_VAR 0 3
68399: PPUSH
68400: LD_INT 1
68402: PPUSH
68403: LD_VAR 0 4
68407: PPUSH
68408: CALL_OW 2
68412: ST_TO_ADDR
68413: GO 68444
// result := Replace ( result , result + 1 , un ) ;
68415: LD_ADDR_VAR 0 3
68419: PUSH
68420: LD_VAR 0 3
68424: PPUSH
68425: LD_VAR 0 3
68429: PUSH
68430: LD_INT 1
68432: PLUS
68433: PPUSH
68434: LD_VAR 0 4
68438: PPUSH
68439: CALL_OW 1
68443: ST_TO_ADDR
68444: GO 68370
68446: POP
68447: POP
// end ;
68448: LD_VAR 0 3
68452: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68453: LD_INT 0
68455: PPUSH
68456: PPUSH
68457: PPUSH
68458: PPUSH
68459: PPUSH
68460: PPUSH
68461: PPUSH
// result := [ ] ;
68462: LD_ADDR_VAR 0 4
68466: PUSH
68467: EMPTY
68468: ST_TO_ADDR
// if x - r < 0 then
68469: LD_VAR 0 1
68473: PUSH
68474: LD_VAR 0 3
68478: MINUS
68479: PUSH
68480: LD_INT 0
68482: LESS
68483: IFFALSE 68495
// min_x := 0 else
68485: LD_ADDR_VAR 0 8
68489: PUSH
68490: LD_INT 0
68492: ST_TO_ADDR
68493: GO 68511
// min_x := x - r ;
68495: LD_ADDR_VAR 0 8
68499: PUSH
68500: LD_VAR 0 1
68504: PUSH
68505: LD_VAR 0 3
68509: MINUS
68510: ST_TO_ADDR
// if y - r < 0 then
68511: LD_VAR 0 2
68515: PUSH
68516: LD_VAR 0 3
68520: MINUS
68521: PUSH
68522: LD_INT 0
68524: LESS
68525: IFFALSE 68537
// min_y := 0 else
68527: LD_ADDR_VAR 0 7
68531: PUSH
68532: LD_INT 0
68534: ST_TO_ADDR
68535: GO 68553
// min_y := y - r ;
68537: LD_ADDR_VAR 0 7
68541: PUSH
68542: LD_VAR 0 2
68546: PUSH
68547: LD_VAR 0 3
68551: MINUS
68552: ST_TO_ADDR
// max_x := x + r ;
68553: LD_ADDR_VAR 0 9
68557: PUSH
68558: LD_VAR 0 1
68562: PUSH
68563: LD_VAR 0 3
68567: PLUS
68568: ST_TO_ADDR
// max_y := y + r ;
68569: LD_ADDR_VAR 0 10
68573: PUSH
68574: LD_VAR 0 2
68578: PUSH
68579: LD_VAR 0 3
68583: PLUS
68584: ST_TO_ADDR
// for _x = min_x to max_x do
68585: LD_ADDR_VAR 0 5
68589: PUSH
68590: DOUBLE
68591: LD_VAR 0 8
68595: DEC
68596: ST_TO_ADDR
68597: LD_VAR 0 9
68601: PUSH
68602: FOR_TO
68603: IFFALSE 68704
// for _y = min_y to max_y do
68605: LD_ADDR_VAR 0 6
68609: PUSH
68610: DOUBLE
68611: LD_VAR 0 7
68615: DEC
68616: ST_TO_ADDR
68617: LD_VAR 0 10
68621: PUSH
68622: FOR_TO
68623: IFFALSE 68700
// begin if not ValidHex ( _x , _y ) then
68625: LD_VAR 0 5
68629: PPUSH
68630: LD_VAR 0 6
68634: PPUSH
68635: CALL_OW 488
68639: NOT
68640: IFFALSE 68644
// continue ;
68642: GO 68622
// if GetResourceTypeXY ( _x , _y ) then
68644: LD_VAR 0 5
68648: PPUSH
68649: LD_VAR 0 6
68653: PPUSH
68654: CALL_OW 283
68658: IFFALSE 68698
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68660: LD_ADDR_VAR 0 4
68664: PUSH
68665: LD_VAR 0 4
68669: PPUSH
68670: LD_VAR 0 4
68674: PUSH
68675: LD_INT 1
68677: PLUS
68678: PPUSH
68679: LD_VAR 0 5
68683: PUSH
68684: LD_VAR 0 6
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PPUSH
68693: CALL_OW 1
68697: ST_TO_ADDR
// end ;
68698: GO 68622
68700: POP
68701: POP
68702: GO 68602
68704: POP
68705: POP
// end ;
68706: LD_VAR 0 4
68710: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68711: LD_INT 0
68713: PPUSH
68714: PPUSH
68715: PPUSH
68716: PPUSH
68717: PPUSH
68718: PPUSH
68719: PPUSH
68720: PPUSH
// if not units then
68721: LD_VAR 0 1
68725: NOT
68726: IFFALSE 68730
// exit ;
68728: GO 69241
// result := UnitFilter ( units , [ f_ok ] ) ;
68730: LD_ADDR_VAR 0 3
68734: PUSH
68735: LD_VAR 0 1
68739: PPUSH
68740: LD_INT 50
68742: PUSH
68743: EMPTY
68744: LIST
68745: PPUSH
68746: CALL_OW 72
68750: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68751: LD_ADDR_VAR 0 8
68755: PUSH
68756: LD_VAR 0 1
68760: PUSH
68761: LD_INT 1
68763: ARRAY
68764: PPUSH
68765: CALL_OW 255
68769: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68770: LD_ADDR_VAR 0 10
68774: PUSH
68775: LD_INT 29
68777: PUSH
68778: LD_EXP 49
68782: PUSH
68783: LD_INT 49
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: LIST
68790: ST_TO_ADDR
// if not result then
68791: LD_VAR 0 3
68795: NOT
68796: IFFALSE 68800
// exit ;
68798: GO 69241
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68800: LD_ADDR_VAR 0 5
68804: PUSH
68805: LD_INT 81
68807: PUSH
68808: LD_VAR 0 8
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PPUSH
68817: CALL_OW 69
68821: ST_TO_ADDR
// for i in result do
68822: LD_ADDR_VAR 0 4
68826: PUSH
68827: LD_VAR 0 3
68831: PUSH
68832: FOR_IN
68833: IFFALSE 69239
// begin tag := GetTag ( i ) + 1 ;
68835: LD_ADDR_VAR 0 9
68839: PUSH
68840: LD_VAR 0 4
68844: PPUSH
68845: CALL_OW 110
68849: PUSH
68850: LD_INT 1
68852: PLUS
68853: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68854: LD_ADDR_VAR 0 7
68858: PUSH
68859: LD_VAR 0 4
68863: PPUSH
68864: CALL_OW 250
68868: PPUSH
68869: LD_VAR 0 4
68873: PPUSH
68874: CALL_OW 251
68878: PPUSH
68879: LD_INT 6
68881: PPUSH
68882: CALL 68453 0 3
68886: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68887: LD_VAR 0 7
68891: PUSH
68892: LD_VAR 0 4
68896: PPUSH
68897: CALL_OW 264
68901: PUSH
68902: LD_VAR 0 10
68906: IN
68907: NOT
68908: AND
68909: IFFALSE 68948
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68911: LD_VAR 0 4
68915: PPUSH
68916: LD_VAR 0 7
68920: PUSH
68921: LD_INT 1
68923: ARRAY
68924: PUSH
68925: LD_INT 1
68927: ARRAY
68928: PPUSH
68929: LD_VAR 0 7
68933: PUSH
68934: LD_INT 1
68936: ARRAY
68937: PUSH
68938: LD_INT 2
68940: ARRAY
68941: PPUSH
68942: CALL_OW 116
68946: GO 69237
// if path > tag then
68948: LD_VAR 0 2
68952: PUSH
68953: LD_VAR 0 9
68957: GREATER
68958: IFFALSE 69166
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68960: LD_ADDR_VAR 0 6
68964: PUSH
68965: LD_VAR 0 5
68969: PPUSH
68970: LD_INT 91
68972: PUSH
68973: LD_VAR 0 4
68977: PUSH
68978: LD_INT 12
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: LIST
68985: PPUSH
68986: CALL_OW 72
68990: ST_TO_ADDR
// if nearEnemy then
68991: LD_VAR 0 6
68995: IFFALSE 69064
// begin if GetWeapon ( i ) = ru_time_lapser then
68997: LD_VAR 0 4
69001: PPUSH
69002: CALL_OW 264
69006: PUSH
69007: LD_INT 49
69009: EQUAL
69010: IFFALSE 69038
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69012: LD_VAR 0 4
69016: PPUSH
69017: LD_VAR 0 6
69021: PPUSH
69022: LD_VAR 0 4
69026: PPUSH
69027: CALL_OW 74
69031: PPUSH
69032: CALL_OW 112
69036: GO 69062
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69038: LD_VAR 0 4
69042: PPUSH
69043: LD_VAR 0 6
69047: PPUSH
69048: LD_VAR 0 4
69052: PPUSH
69053: CALL_OW 74
69057: PPUSH
69058: CALL_OW 115
// end else
69062: GO 69164
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69064: LD_VAR 0 4
69068: PPUSH
69069: LD_VAR 0 2
69073: PUSH
69074: LD_VAR 0 9
69078: ARRAY
69079: PUSH
69080: LD_INT 1
69082: ARRAY
69083: PPUSH
69084: LD_VAR 0 2
69088: PUSH
69089: LD_VAR 0 9
69093: ARRAY
69094: PUSH
69095: LD_INT 2
69097: ARRAY
69098: PPUSH
69099: CALL_OW 297
69103: PUSH
69104: LD_INT 6
69106: GREATER
69107: IFFALSE 69150
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69109: LD_VAR 0 4
69113: PPUSH
69114: LD_VAR 0 2
69118: PUSH
69119: LD_VAR 0 9
69123: ARRAY
69124: PUSH
69125: LD_INT 1
69127: ARRAY
69128: PPUSH
69129: LD_VAR 0 2
69133: PUSH
69134: LD_VAR 0 9
69138: ARRAY
69139: PUSH
69140: LD_INT 2
69142: ARRAY
69143: PPUSH
69144: CALL_OW 114
69148: GO 69164
// SetTag ( i , tag ) ;
69150: LD_VAR 0 4
69154: PPUSH
69155: LD_VAR 0 9
69159: PPUSH
69160: CALL_OW 109
// end else
69164: GO 69237
// if enemy then
69166: LD_VAR 0 5
69170: IFFALSE 69237
// begin if GetWeapon ( i ) = ru_time_lapser then
69172: LD_VAR 0 4
69176: PPUSH
69177: CALL_OW 264
69181: PUSH
69182: LD_INT 49
69184: EQUAL
69185: IFFALSE 69213
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69187: LD_VAR 0 4
69191: PPUSH
69192: LD_VAR 0 5
69196: PPUSH
69197: LD_VAR 0 4
69201: PPUSH
69202: CALL_OW 74
69206: PPUSH
69207: CALL_OW 112
69211: GO 69237
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69213: LD_VAR 0 4
69217: PPUSH
69218: LD_VAR 0 5
69222: PPUSH
69223: LD_VAR 0 4
69227: PPUSH
69228: CALL_OW 74
69232: PPUSH
69233: CALL_OW 115
// end ; end ;
69237: GO 68832
69239: POP
69240: POP
// end ;
69241: LD_VAR 0 3
69245: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69246: LD_INT 0
69248: PPUSH
69249: PPUSH
69250: PPUSH
// if not unit or IsInUnit ( unit ) then
69251: LD_VAR 0 1
69255: NOT
69256: PUSH
69257: LD_VAR 0 1
69261: PPUSH
69262: CALL_OW 310
69266: OR
69267: IFFALSE 69271
// exit ;
69269: GO 69362
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69271: LD_ADDR_VAR 0 4
69275: PUSH
69276: LD_VAR 0 1
69280: PPUSH
69281: CALL_OW 250
69285: PPUSH
69286: LD_VAR 0 2
69290: PPUSH
69291: LD_INT 1
69293: PPUSH
69294: CALL_OW 272
69298: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69299: LD_ADDR_VAR 0 5
69303: PUSH
69304: LD_VAR 0 1
69308: PPUSH
69309: CALL_OW 251
69313: PPUSH
69314: LD_VAR 0 2
69318: PPUSH
69319: LD_INT 1
69321: PPUSH
69322: CALL_OW 273
69326: ST_TO_ADDR
// if ValidHex ( x , y ) then
69327: LD_VAR 0 4
69331: PPUSH
69332: LD_VAR 0 5
69336: PPUSH
69337: CALL_OW 488
69341: IFFALSE 69362
// ComTurnXY ( unit , x , y ) ;
69343: LD_VAR 0 1
69347: PPUSH
69348: LD_VAR 0 4
69352: PPUSH
69353: LD_VAR 0 5
69357: PPUSH
69358: CALL_OW 118
// end ;
69362: LD_VAR 0 3
69366: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69367: LD_INT 0
69369: PPUSH
69370: PPUSH
// result := false ;
69371: LD_ADDR_VAR 0 3
69375: PUSH
69376: LD_INT 0
69378: ST_TO_ADDR
// if not units then
69379: LD_VAR 0 2
69383: NOT
69384: IFFALSE 69388
// exit ;
69386: GO 69433
// for i in units do
69388: LD_ADDR_VAR 0 4
69392: PUSH
69393: LD_VAR 0 2
69397: PUSH
69398: FOR_IN
69399: IFFALSE 69431
// if See ( side , i ) then
69401: LD_VAR 0 1
69405: PPUSH
69406: LD_VAR 0 4
69410: PPUSH
69411: CALL_OW 292
69415: IFFALSE 69429
// begin result := true ;
69417: LD_ADDR_VAR 0 3
69421: PUSH
69422: LD_INT 1
69424: ST_TO_ADDR
// exit ;
69425: POP
69426: POP
69427: GO 69433
// end ;
69429: GO 69398
69431: POP
69432: POP
// end ;
69433: LD_VAR 0 3
69437: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69438: LD_INT 0
69440: PPUSH
69441: PPUSH
69442: PPUSH
69443: PPUSH
// if not unit or not points then
69444: LD_VAR 0 1
69448: NOT
69449: PUSH
69450: LD_VAR 0 2
69454: NOT
69455: OR
69456: IFFALSE 69460
// exit ;
69458: GO 69550
// dist := 99999 ;
69460: LD_ADDR_VAR 0 5
69464: PUSH
69465: LD_INT 99999
69467: ST_TO_ADDR
// for i in points do
69468: LD_ADDR_VAR 0 4
69472: PUSH
69473: LD_VAR 0 2
69477: PUSH
69478: FOR_IN
69479: IFFALSE 69548
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69481: LD_ADDR_VAR 0 6
69485: PUSH
69486: LD_VAR 0 1
69490: PPUSH
69491: LD_VAR 0 4
69495: PUSH
69496: LD_INT 1
69498: ARRAY
69499: PPUSH
69500: LD_VAR 0 4
69504: PUSH
69505: LD_INT 2
69507: ARRAY
69508: PPUSH
69509: CALL_OW 297
69513: ST_TO_ADDR
// if tmpDist < dist then
69514: LD_VAR 0 6
69518: PUSH
69519: LD_VAR 0 5
69523: LESS
69524: IFFALSE 69546
// begin result := i ;
69526: LD_ADDR_VAR 0 3
69530: PUSH
69531: LD_VAR 0 4
69535: ST_TO_ADDR
// dist := tmpDist ;
69536: LD_ADDR_VAR 0 5
69540: PUSH
69541: LD_VAR 0 6
69545: ST_TO_ADDR
// end ; end ;
69546: GO 69478
69548: POP
69549: POP
// end ;
69550: LD_VAR 0 3
69554: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69555: LD_INT 0
69557: PPUSH
// uc_side := side ;
69558: LD_ADDR_OWVAR 20
69562: PUSH
69563: LD_VAR 0 1
69567: ST_TO_ADDR
// uc_nation := 3 ;
69568: LD_ADDR_OWVAR 21
69572: PUSH
69573: LD_INT 3
69575: ST_TO_ADDR
// vc_chassis := 25 ;
69576: LD_ADDR_OWVAR 37
69580: PUSH
69581: LD_INT 25
69583: ST_TO_ADDR
// vc_engine := engine_siberite ;
69584: LD_ADDR_OWVAR 39
69588: PUSH
69589: LD_INT 3
69591: ST_TO_ADDR
// vc_control := control_computer ;
69592: LD_ADDR_OWVAR 38
69596: PUSH
69597: LD_INT 3
69599: ST_TO_ADDR
// vc_weapon := 59 ;
69600: LD_ADDR_OWVAR 40
69604: PUSH
69605: LD_INT 59
69607: ST_TO_ADDR
// result := CreateVehicle ;
69608: LD_ADDR_VAR 0 5
69612: PUSH
69613: CALL_OW 45
69617: ST_TO_ADDR
// SetDir ( result , d ) ;
69618: LD_VAR 0 5
69622: PPUSH
69623: LD_VAR 0 4
69627: PPUSH
69628: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69632: LD_VAR 0 5
69636: PPUSH
69637: LD_VAR 0 2
69641: PPUSH
69642: LD_VAR 0 3
69646: PPUSH
69647: LD_INT 0
69649: PPUSH
69650: CALL_OW 48
// end ;
69654: LD_VAR 0 5
69658: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69659: LD_INT 0
69661: PPUSH
69662: PPUSH
69663: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69664: LD_ADDR_VAR 0 2
69668: PUSH
69669: LD_INT 0
69671: PUSH
69672: LD_INT 0
69674: PUSH
69675: LD_INT 0
69677: PUSH
69678: LD_INT 0
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69687: LD_VAR 0 1
69691: NOT
69692: PUSH
69693: LD_VAR 0 1
69697: PPUSH
69698: CALL_OW 264
69702: PUSH
69703: LD_INT 12
69705: PUSH
69706: LD_INT 51
69708: PUSH
69709: LD_INT 32
69711: PUSH
69712: LD_EXP 46
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: IN
69723: NOT
69724: OR
69725: IFFALSE 69729
// exit ;
69727: GO 69827
// for i := 1 to 3 do
69729: LD_ADDR_VAR 0 3
69733: PUSH
69734: DOUBLE
69735: LD_INT 1
69737: DEC
69738: ST_TO_ADDR
69739: LD_INT 3
69741: PUSH
69742: FOR_TO
69743: IFFALSE 69825
// begin tmp := GetCargo ( cargo , i ) ;
69745: LD_ADDR_VAR 0 4
69749: PUSH
69750: LD_VAR 0 1
69754: PPUSH
69755: LD_VAR 0 3
69759: PPUSH
69760: CALL_OW 289
69764: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69765: LD_ADDR_VAR 0 2
69769: PUSH
69770: LD_VAR 0 2
69774: PPUSH
69775: LD_VAR 0 3
69779: PPUSH
69780: LD_VAR 0 4
69784: PPUSH
69785: CALL_OW 1
69789: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69790: LD_ADDR_VAR 0 2
69794: PUSH
69795: LD_VAR 0 2
69799: PPUSH
69800: LD_INT 4
69802: PPUSH
69803: LD_VAR 0 2
69807: PUSH
69808: LD_INT 4
69810: ARRAY
69811: PUSH
69812: LD_VAR 0 4
69816: PLUS
69817: PPUSH
69818: CALL_OW 1
69822: ST_TO_ADDR
// end ;
69823: GO 69742
69825: POP
69826: POP
// end ; end_of_file
69827: LD_VAR 0 2
69831: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69832: LD_VAR 0 1
69836: PUSH
69837: LD_INT 200
69839: DOUBLE
69840: GREATEREQUAL
69841: IFFALSE 69849
69843: LD_INT 299
69845: DOUBLE
69846: LESSEQUAL
69847: IFTRUE 69851
69849: GO 69883
69851: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69852: LD_VAR 0 1
69856: PPUSH
69857: LD_VAR 0 2
69861: PPUSH
69862: LD_VAR 0 3
69866: PPUSH
69867: LD_VAR 0 4
69871: PPUSH
69872: LD_VAR 0 5
69876: PPUSH
69877: CALL 25172 0 5
69881: GO 69960
69883: LD_INT 300
69885: DOUBLE
69886: GREATEREQUAL
69887: IFFALSE 69895
69889: LD_INT 399
69891: DOUBLE
69892: LESSEQUAL
69893: IFTRUE 69897
69895: GO 69959
69897: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69898: LD_VAR 0 1
69902: PPUSH
69903: LD_VAR 0 2
69907: PPUSH
69908: LD_VAR 0 3
69912: PPUSH
69913: LD_VAR 0 4
69917: PPUSH
69918: LD_VAR 0 5
69922: PPUSH
69923: LD_VAR 0 6
69927: PPUSH
69928: LD_VAR 0 7
69932: PPUSH
69933: LD_VAR 0 8
69937: PPUSH
69938: LD_VAR 0 9
69942: PPUSH
69943: LD_VAR 0 10
69947: PPUSH
69948: LD_VAR 0 11
69952: PPUSH
69953: CALL 22814 0 11
69957: GO 69960
69959: POP
// end ;
69960: PPOPN 11
69962: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69963: LD_VAR 0 1
69967: PPUSH
69968: LD_VAR 0 2
69972: PPUSH
69973: LD_VAR 0 3
69977: PPUSH
69978: LD_VAR 0 4
69982: PPUSH
69983: LD_VAR 0 5
69987: PPUSH
69988: CALL 24908 0 5
// end ; end_of_file
69992: PPOPN 5
69994: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69995: LD_VAR 0 1
69999: PPUSH
70000: LD_VAR 0 2
70004: PPUSH
70005: LD_VAR 0 3
70009: PPUSH
70010: LD_VAR 0 4
70014: PPUSH
70015: LD_VAR 0 5
70019: PPUSH
70020: LD_VAR 0 6
70024: PPUSH
70025: CALL 10507 0 6
// end ;
70029: PPOPN 6
70031: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70032: CALL 10482 0 0
// end ;
70036: PPOPN 1
70038: END
