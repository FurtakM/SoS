// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1314 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1218 0 0
// PrepareDifficulty ;
 207: CALL 6309 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING JMM
 592: PPUSH
 593: LD_EXP 40
 597: NOT
 598: PPUSH
 599: LD_STRING 13c_
 601: PPUSH
 602: CALL 32112 0 3
 606: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 607: LD_ADDR_EXP 2
 611: PUSH
 612: LD_STRING Stevens
 614: PPUSH
 615: LD_EXP 40
 619: NOT
 620: PPUSH
 621: LD_STRING 13c_
 623: PPUSH
 624: CALL 32112 0 3
 628: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 629: LD_ADDR_EXP 3
 633: PUSH
 634: LD_STRING Lisa
 636: PPUSH
 637: LD_EXP 40
 641: NOT
 642: PPUSH
 643: LD_STRING 13c_
 645: PPUSH
 646: CALL 32112 0 3
 650: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 651: LD_ADDR_EXP 4
 655: PUSH
 656: LD_STRING Donaldson
 658: PPUSH
 659: LD_EXP 40
 663: NOT
 664: PPUSH
 665: LD_STRING 13c_
 667: PPUSH
 668: CALL 32112 0 3
 672: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 673: LD_ADDR_EXP 5
 677: PUSH
 678: LD_STRING Bobby
 680: PPUSH
 681: LD_EXP 40
 685: NOT
 686: PPUSH
 687: LD_STRING 13c_
 689: PPUSH
 690: CALL 32112 0 3
 694: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 695: LD_ADDR_EXP 6
 699: PUSH
 700: LD_STRING Cyrus
 702: PPUSH
 703: LD_EXP 40
 707: NOT
 708: PPUSH
 709: LD_STRING 13c_
 711: PPUSH
 712: CALL 32112 0 3
 716: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 717: LD_ADDR_EXP 7
 721: PUSH
 722: LD_STRING Denis
 724: PPUSH
 725: LD_EXP 40
 729: NOT
 730: PPUSH
 731: LD_STRING 13c_
 733: PPUSH
 734: CALL 32112 0 3
 738: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 739: LD_ADDR_EXP 8
 743: PUSH
 744: LD_STRING Brown
 746: PPUSH
 747: LD_EXP 40
 751: NOT
 752: PPUSH
 753: LD_STRING 13c_
 755: PPUSH
 756: CALL 32112 0 3
 760: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 13c_ ) ;
 761: LD_ADDR_EXP 9
 765: PUSH
 766: LD_STRING Gladstone
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: LD_STRING 13c_
 774: PPUSH
 775: CALL 32112 0 3
 779: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 13c_ ) ;
 780: LD_ADDR_EXP 10
 784: PUSH
 785: LD_STRING Houten
 787: PPUSH
 788: LD_INT 1
 790: PPUSH
 791: LD_STRING 13c_
 793: PPUSH
 794: CALL 32112 0 3
 798: ST_TO_ADDR
// Cornel = PrepareUnit ( Cornel , true , 13c_ ) ;
 799: LD_ADDR_EXP 11
 803: PUSH
 804: LD_STRING Cornel
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_STRING 13c_
 812: PPUSH
 813: CALL 32112 0 3
 817: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 13c_ ) ;
 818: LD_ADDR_EXP 12
 822: PUSH
 823: LD_STRING Gary
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_STRING 13c_
 831: PPUSH
 832: CALL 32112 0 3
 836: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 13c_ ) ;
 837: LD_ADDR_EXP 13
 841: PUSH
 842: LD_STRING Frank
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: LD_STRING 13c_
 850: PPUSH
 851: CALL 32112 0 3
 855: ST_TO_ADDR
// Kikuchi = PrepareUnit ( Kikuchi , true , 13c_ ) ;
 856: LD_ADDR_EXP 14
 860: PUSH
 861: LD_STRING Kikuchi
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_STRING 13c_
 869: PPUSH
 870: CALL 32112 0 3
 874: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 875: LD_ADDR_EXP 15
 879: PUSH
 880: LD_STRING Powell
 882: PPUSH
 883: LD_INT 0
 885: PPUSH
 886: LD_STRING 
 888: PPUSH
 889: CALL 32112 0 3
 893: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 894: LD_ADDR_VAR 0 2
 898: PUSH
 899: LD_EXP 1
 903: PUSH
 904: LD_EXP 2
 908: PUSH
 909: LD_EXP 3
 913: PUSH
 914: LD_EXP 4
 918: PUSH
 919: LD_EXP 5
 923: PUSH
 924: LD_EXP 6
 928: PUSH
 929: LD_EXP 7
 933: PUSH
 934: LD_EXP 8
 938: PUSH
 939: LD_EXP 9
 943: PUSH
 944: LD_EXP 10
 948: PUSH
 949: LD_EXP 11
 953: PUSH
 954: LD_EXP 12
 958: PUSH
 959: LD_EXP 13
 963: PUSH
 964: LD_EXP 14
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 985: LD_ADDR_VAR 0 3
 989: PUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 1
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 33
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 21
1012: PUSH
1013: LD_INT 2
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: PPUSH
1025: CALL_OW 69
1029: ST_TO_ADDR
// for i = tmp downto 1 do
1030: LD_ADDR_VAR 0 4
1034: PUSH
1035: DOUBLE
1036: LD_VAR 0 2
1040: INC
1041: ST_TO_ADDR
1042: LD_INT 1
1044: PUSH
1045: FOR_DOWNTO
1046: IFFALSE 1083
// if not tmp [ i ] then
1048: LD_VAR 0 2
1052: PUSH
1053: LD_VAR 0 4
1057: ARRAY
1058: NOT
1059: IFFALSE 1081
// tmp := Delete ( tmp , i ) ;
1061: LD_ADDR_VAR 0 2
1065: PUSH
1066: LD_VAR 0 2
1070: PPUSH
1071: LD_VAR 0 4
1075: PPUSH
1076: CALL_OW 3
1080: ST_TO_ADDR
1081: GO 1045
1083: POP
1084: POP
// for i = 1 to tmp do
1085: LD_ADDR_VAR 0 4
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 2
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1131
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1103: LD_VAR 0 2
1107: PUSH
1108: LD_VAR 0 4
1112: ARRAY
1113: PPUSH
1114: LD_VAR 0 3
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PPUSH
1125: CALL_OW 52
1129: GO 1100
1131: POP
1132: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 25
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: PUSH
1162: LD_INT 0
1164: EQUAL
1165: PUSH
1166: LD_INT 22
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 34
1178: PUSH
1179: LD_INT 13
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PPUSH
1190: CALL_OW 69
1194: PUSH
1195: LD_INT 0
1197: EQUAL
1198: AND
1199: IFFALSE 1213
// SetClass ( JMM , 2 ) ;
1201: LD_EXP 1
1205: PPUSH
1206: LD_INT 2
1208: PPUSH
1209: CALL_OW 336
// end ;
1213: LD_VAR 0 1
1217: RET
// export function PrepareAmericansRandom ; var i ; begin
1218: LD_INT 0
1220: PPUSH
1221: PPUSH
// uc_side = 1 ;
1222: LD_ADDR_OWVAR 20
1226: PUSH
1227: LD_INT 1
1229: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1230: LD_ADDR_EXP 16
1234: PUSH
1235: LD_STRING 13c_others
1237: PPUSH
1238: CALL_OW 31
1242: ST_TO_ADDR
// for i in others13 do
1243: LD_ADDR_VAR 0 2
1247: PUSH
1248: LD_EXP 16
1252: PUSH
1253: FOR_IN
1254: IFFALSE 1307
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1256: LD_VAR 0 2
1260: PPUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 21
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 58
1283: PUSH
1284: EMPTY
1285: LIST
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: PUSH
1297: LD_INT 1
1299: ARRAY
1300: PPUSH
1301: CALL_OW 52
1305: GO 1253
1307: POP
1308: POP
// end ;
1309: LD_VAR 0 1
1313: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1314: LD_INT 0
1316: PPUSH
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1322: LD_ADDR_VAR 0 5
1326: PUSH
1327: LD_STRING 13_VehiclesIn13_1
1329: PPUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 5
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: LD_INT 1
1341: PUSH
1342: LD_INT 6
1344: PUSH
1345: LD_INT 100
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: LD_INT 5
1361: PUSH
1362: LD_INT 3
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 6
1370: PUSH
1371: LD_INT 100
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 1
1384: PUSH
1385: LD_INT 5
1387: PUSH
1388: LD_INT 3
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: LD_INT 6
1396: PUSH
1397: LD_INT 100
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 1
1410: PUSH
1411: LD_INT 5
1413: PUSH
1414: LD_INT 3
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: LD_INT 6
1422: PUSH
1423: LD_INT 100
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 5
1439: PUSH
1440: LD_INT 3
1442: PUSH
1443: LD_INT 1
1445: PUSH
1446: LD_INT 6
1448: PUSH
1449: LD_INT 100
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: LD_INT 5
1465: PUSH
1466: LD_INT 3
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: LD_INT 6
1474: PUSH
1475: LD_INT 100
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 1
1488: PUSH
1489: LD_INT 5
1491: PUSH
1492: LD_INT 3
1494: PUSH
1495: LD_INT 1
1497: PUSH
1498: LD_INT 6
1500: PUSH
1501: LD_INT 100
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 1
1514: PUSH
1515: LD_INT 5
1517: PUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 6
1526: PUSH
1527: LD_INT 100
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: PPUSH
1548: CALL_OW 30
1552: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_STRING 13_ResourcesInCargo13_1
1560: PPUSH
1561: EMPTY
1562: PPUSH
1563: CALL_OW 30
1567: ST_TO_ADDR
// cargoList = [ ] ;
1568: LD_ADDR_VAR 0 6
1572: PUSH
1573: EMPTY
1574: ST_TO_ADDR
// uc_side = 1 ;
1575: LD_ADDR_OWVAR 20
1579: PUSH
1580: LD_INT 1
1582: ST_TO_ADDR
// if vehicles then
1583: LD_VAR 0 5
1587: IFFALSE 1934
// begin for i := 1 to vehicles do
1589: LD_ADDR_VAR 0 2
1593: PUSH
1594: DOUBLE
1595: LD_INT 1
1597: DEC
1598: ST_TO_ADDR
1599: LD_VAR 0 5
1603: PUSH
1604: FOR_TO
1605: IFFALSE 1754
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1607: LD_ADDR_OWVAR 21
1611: PUSH
1612: LD_VAR 0 5
1616: PUSH
1617: LD_VAR 0 2
1621: ARRAY
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_VAR 0 2
1641: ARRAY
1642: PUSH
1643: LD_INT 2
1645: ARRAY
1646: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1647: LD_ADDR_OWVAR 39
1651: PUSH
1652: LD_VAR 0 5
1656: PUSH
1657: LD_VAR 0 2
1661: ARRAY
1662: PUSH
1663: LD_INT 3
1665: ARRAY
1666: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1667: LD_ADDR_OWVAR 38
1671: PUSH
1672: LD_VAR 0 5
1676: PUSH
1677: LD_VAR 0 2
1681: ARRAY
1682: PUSH
1683: LD_INT 4
1685: ARRAY
1686: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1687: LD_ADDR_OWVAR 40
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_VAR 0 2
1701: ARRAY
1702: PUSH
1703: LD_INT 5
1705: ARRAY
1706: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1707: LD_ADDR_OWVAR 41
1711: PUSH
1712: LD_INT 40
1714: ST_TO_ADDR
// veh = CreateVehicle ;
1715: LD_ADDR_VAR 0 4
1719: PUSH
1720: CALL_OW 45
1724: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1725: LD_VAR 0 4
1729: PPUSH
1730: LD_INT 3
1732: PPUSH
1733: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1737: LD_VAR 0 4
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 0
1747: PPUSH
1748: CALL_OW 49
// end ;
1752: GO 1604
1754: POP
1755: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1756: LD_ADDR_VAR 0 6
1760: PUSH
1761: LD_INT 22
1763: PUSH
1764: LD_INT 1
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 21
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 34
1783: PUSH
1784: LD_INT 12
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PPUSH
1796: CALL_OW 69
1800: ST_TO_ADDR
// if cargoList then
1801: LD_VAR 0 6
1805: IFFALSE 1934
// for i = 1 to cargoList do
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_VAR 0 6
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1932
// begin if resources then
1825: LD_EXP 24
1829: IFFALSE 1930
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1831: LD_VAR 0 6
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: LD_EXP 24
1849: PUSH
1850: LD_VAR 0 2
1854: ARRAY
1855: PUSH
1856: LD_INT 1
1858: ARRAY
1859: PPUSH
1860: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1864: LD_VAR 0 6
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PPUSH
1875: LD_INT 2
1877: PPUSH
1878: LD_EXP 24
1882: PUSH
1883: LD_VAR 0 2
1887: ARRAY
1888: PUSH
1889: LD_INT 2
1891: ARRAY
1892: PPUSH
1893: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1897: LD_VAR 0 6
1901: PUSH
1902: LD_VAR 0 2
1906: ARRAY
1907: PPUSH
1908: LD_INT 3
1910: PPUSH
1911: LD_EXP 24
1915: PUSH
1916: LD_VAR 0 2
1920: ARRAY
1921: PUSH
1922: LD_INT 3
1924: ARRAY
1925: PPUSH
1926: CALL_OW 291
// end ; end ;
1930: GO 1822
1932: POP
1933: POP
// end ; end ;
1934: LD_VAR 0 1
1938: RET
// export function PowellSupport ; var i , veh , un ; begin
1939: LD_INT 0
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
// for i = 1 to 3 do
1945: LD_ADDR_VAR 0 2
1949: PUSH
1950: DOUBLE
1951: LD_INT 1
1953: DEC
1954: ST_TO_ADDR
1955: LD_INT 3
1957: PUSH
1958: FOR_TO
1959: IFFALSE 2160
// begin uc_nation = 1 ;
1961: LD_ADDR_OWVAR 21
1965: PUSH
1966: LD_INT 1
1968: ST_TO_ADDR
// uc_side = 1 ;
1969: LD_ADDR_OWVAR 20
1973: PUSH
1974: LD_INT 1
1976: ST_TO_ADDR
// vc_engine = 3 ;
1977: LD_ADDR_OWVAR 39
1981: PUSH
1982: LD_INT 3
1984: ST_TO_ADDR
// vc_control = 1 ;
1985: LD_ADDR_OWVAR 38
1989: PUSH
1990: LD_INT 1
1992: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1993: LD_ADDR_OWVAR 40
1997: PUSH
1998: LD_INT 9
2000: PUSH
2001: LD_INT 5
2003: PUSH
2004: LD_INT 4
2006: PUSH
2007: LD_INT 7
2009: PUSH
2010: LD_INT 6
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 1
2022: PPUSH
2023: LD_INT 5
2025: PPUSH
2026: CALL_OW 12
2030: ARRAY
2031: ST_TO_ADDR
// if vc_weapon = 6 then
2032: LD_OWVAR 40
2036: PUSH
2037: LD_INT 6
2039: EQUAL
2040: IFFALSE 2052
// vc_chassis = 4 else
2042: LD_ADDR_OWVAR 37
2046: PUSH
2047: LD_INT 4
2049: ST_TO_ADDR
2050: GO 2060
// vc_chassis = 3 ;
2052: LD_ADDR_OWVAR 37
2056: PUSH
2057: LD_INT 3
2059: ST_TO_ADDR
// veh = CreateVehicle ;
2060: LD_ADDR_VAR 0 3
2064: PUSH
2065: CALL_OW 45
2069: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2070: LD_VAR 0 3
2074: PPUSH
2075: LD_INT 2
2077: PPUSH
2078: LD_INT 0
2080: PPUSH
2081: CALL_OW 49
// SetDir ( veh , 1 ) ;
2085: LD_VAR 0 3
2089: PPUSH
2090: LD_INT 1
2092: PPUSH
2093: CALL_OW 233
// hc_gallery =  ;
2097: LD_ADDR_OWVAR 33
2101: PUSH
2102: LD_STRING 
2104: ST_TO_ADDR
// hc_name =  ;
2105: LD_ADDR_OWVAR 26
2109: PUSH
2110: LD_STRING 
2112: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
2113: LD_INT 0
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: LD_INT 7
2121: PPUSH
2122: LD_INT 10
2124: PPUSH
2125: CALL_OW 12
2129: PPUSH
2130: CALL_OW 380
// un = CreateHuman ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: CALL_OW 44
2143: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2144: LD_VAR 0 4
2148: PPUSH
2149: LD_VAR 0 3
2153: PPUSH
2154: CALL_OW 52
// end ;
2158: GO 1958
2160: POP
2161: POP
// end ; end_of_file
2162: LD_VAR 0 1
2166: RET
// export function PrepareBurlak ; begin
2167: LD_INT 0
2169: PPUSH
// uc_side = 7 ;
2170: LD_ADDR_OWVAR 20
2174: PUSH
2175: LD_INT 7
2177: ST_TO_ADDR
// uc_nation = 3 ;
2178: LD_ADDR_OWVAR 21
2182: PUSH
2183: LD_INT 3
2185: ST_TO_ADDR
// vc_engine = 3 ;
2186: LD_ADDR_OWVAR 39
2190: PUSH
2191: LD_INT 3
2193: ST_TO_ADDR
// vc_control = 1 ;
2194: LD_ADDR_OWVAR 38
2198: PUSH
2199: LD_INT 1
2201: ST_TO_ADDR
// vc_weapon = 46 ;
2202: LD_ADDR_OWVAR 40
2206: PUSH
2207: LD_INT 46
2209: ST_TO_ADDR
// vc_chassis = 24 ;
2210: LD_ADDR_OWVAR 37
2214: PUSH
2215: LD_INT 24
2217: ST_TO_ADDR
// Masha = CreateVehicle ;
2218: LD_ADDR_EXP 18
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2228: LD_EXP 18
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2243: LD_EXP 18
2247: PPUSH
2248: LD_INT 1
2250: PPUSH
2251: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2255: LD_ADDR_EXP 17
2259: PUSH
2260: LD_STRING Burlak
2262: PPUSH
2263: LD_INT 0
2265: PPUSH
2266: LD_STRING 
2268: PPUSH
2269: CALL 32112 0 3
2273: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2274: LD_EXP 17
2278: PPUSH
2279: LD_EXP 18
2283: PPUSH
2284: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2288: LD_EXP 18
2292: PPUSH
2293: LD_INT 107
2295: PPUSH
2296: LD_INT 118
2298: PPUSH
2299: CALL_OW 114
// spawnBurlak = 1 ;
2303: LD_ADDR_EXP 27
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ;
2311: LD_VAR 0 1
2315: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2316: LD_INT 0
2318: PPUSH
2319: PPUSH
2320: PPUSH
2321: PPUSH
// uc_side = 7 ;
2322: LD_ADDR_OWVAR 20
2326: PUSH
2327: LD_INT 7
2329: ST_TO_ADDR
// uc_nation = 3 ;
2330: LD_ADDR_OWVAR 21
2334: PUSH
2335: LD_INT 3
2337: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ,  ) ;
2338: LD_ADDR_EXP 19
2342: PUSH
2343: LD_STRING Gnyevko
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: LD_STRING 
2351: PPUSH
2352: CALL 32112 0 3
2356: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ,  ) ;
2357: LD_ADDR_EXP 20
2361: PUSH
2362: LD_STRING Titov
2364: PPUSH
2365: LD_INT 0
2367: PPUSH
2368: LD_STRING 
2370: PPUSH
2371: CALL 32112 0 3
2375: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ,  ) ;
2376: LD_ADDR_EXP 21
2380: PUSH
2381: LD_STRING Xavier2
2383: PPUSH
2384: LD_INT 0
2386: PPUSH
2387: LD_STRING 
2389: PPUSH
2390: CALL 32112 0 3
2394: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ,  ) ;
2395: LD_ADDR_EXP 22
2399: PUSH
2400: LD_STRING Belkov
2402: PPUSH
2403: LD_INT 0
2405: PPUSH
2406: LD_STRING 
2408: PPUSH
2409: CALL 32112 0 3
2413: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ,  ) ;
2414: LD_ADDR_EXP 23
2418: PUSH
2419: LD_STRING Lipshchin
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: LD_STRING 
2427: PPUSH
2428: CALL 32112 0 3
2432: ST_TO_ADDR
// for i = 1 to 5 do
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: DOUBLE
2439: LD_INT 1
2441: DEC
2442: ST_TO_ADDR
2443: LD_INT 5
2445: PUSH
2446: FOR_TO
2447: IFFALSE 2535
// begin vc_engine = 3 ;
2449: LD_ADDR_OWVAR 39
2453: PUSH
2454: LD_INT 3
2456: ST_TO_ADDR
// vc_control = 1 ;
2457: LD_ADDR_OWVAR 38
2461: PUSH
2462: LD_INT 1
2464: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2465: LD_ADDR_OWVAR 40
2469: PUSH
2470: LD_INT 43
2472: PUSH
2473: LD_INT 44
2475: PUSH
2476: LD_INT 45
2478: PUSH
2479: LD_INT 49
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: PUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 4
2493: PPUSH
2494: CALL_OW 12
2498: ARRAY
2499: ST_TO_ADDR
// vc_chassis = 22 ;
2500: LD_ADDR_OWVAR 37
2504: PUSH
2505: LD_INT 22
2507: ST_TO_ADDR
// veh = CreateVehicle ;
2508: LD_ADDR_VAR 0 3
2512: PUSH
2513: CALL_OW 45
2517: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2518: LD_VAR 0 3
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: CALL_OW 49
// end ;
2533: GO 2446
2535: POP
2536: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2537: LD_ADDR_VAR 0 4
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 7
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 21
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 58
2564: PUSH
2565: EMPTY
2566: LIST
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: LIST
2572: PPUSH
2573: CALL_OW 69
2577: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2578: LD_EXP 19
2582: PPUSH
2583: LD_VAR 0 4
2587: PUSH
2588: LD_INT 1
2590: ARRAY
2591: PPUSH
2592: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2596: LD_EXP 20
2600: PPUSH
2601: LD_VAR 0 4
2605: PUSH
2606: LD_INT 2
2608: ARRAY
2609: PPUSH
2610: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2614: LD_EXP 21
2618: PPUSH
2619: LD_VAR 0 4
2623: PUSH
2624: LD_INT 3
2626: ARRAY
2627: PPUSH
2628: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2632: LD_EXP 22
2636: PPUSH
2637: LD_VAR 0 4
2641: PUSH
2642: LD_INT 4
2644: ARRAY
2645: PPUSH
2646: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2650: LD_EXP 23
2654: PPUSH
2655: LD_VAR 0 4
2659: PUSH
2660: LD_INT 5
2662: ARRAY
2663: PPUSH
2664: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2668: LD_EXP 19
2672: PPUSH
2673: LD_INT 3
2675: PPUSH
2676: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2680: LD_EXP 20
2684: PUSH
2685: LD_EXP 23
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PPUSH
2694: LD_INT 9
2696: PPUSH
2697: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2701: LD_ADDR_VAR 0 4
2705: PUSH
2706: LD_INT 22
2708: PUSH
2709: LD_INT 7
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2721: LD_VAR 0 4
2725: PPUSH
2726: LD_INT 107
2728: PPUSH
2729: LD_INT 118
2731: PPUSH
2732: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2736: LD_INT 35
2738: PPUSH
2739: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2743: LD_VAR 0 4
2747: PPUSH
2748: LD_INT 34
2750: PUSH
2751: LD_INT 49
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PPUSH
2758: CALL_OW 72
2762: PPUSH
2763: LD_EXP 18
2767: PPUSH
2768: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2772: LD_VAR 0 4
2776: PPUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 34
2782: PUSH
2783: LD_INT 49
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PPUSH
2794: CALL_OW 72
2798: PPUSH
2799: LD_INT 107
2801: PPUSH
2802: LD_INT 118
2804: PPUSH
2805: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2809: LD_VAR 0 4
2813: PPUSH
2814: LD_INT 34
2816: PUSH
2817: LD_INT 49
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PPUSH
2824: CALL_OW 72
2828: PUSH
2829: LD_INT 0
2831: EQUAL
2832: PUSH
2833: LD_EXP 18
2837: PPUSH
2838: CALL_OW 303
2842: OR
2843: IFFALSE 2736
// repeat wait ( 0 0$1 ) ;
2845: LD_INT 35
2847: PPUSH
2848: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 7
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: CALL_OW 69
2871: PUSH
2872: LD_EXP 17
2876: DIFF
2877: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2878: LD_VAR 0 4
2882: PPUSH
2883: LD_INT 107
2885: PPUSH
2886: LD_INT 118
2888: PPUSH
2889: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2893: LD_EXP 17
2897: PPUSH
2898: CALL_OW 302
2902: PUSH
2903: LD_EXP 17
2907: PPUSH
2908: CALL_OW 310
2912: NOT
2913: AND
2914: IFFALSE 2931
// ComMoveXY ( Burlak , 107 , 118 ) ;
2916: LD_EXP 17
2920: PPUSH
2921: LD_INT 107
2923: PPUSH
2924: LD_INT 118
2926: PPUSH
2927: CALL_OW 111
// until not tmp ;
2931: LD_VAR 0 4
2935: NOT
2936: IFFALSE 2845
// end ; end_of_file
2938: LD_VAR 0 1
2942: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2943: LD_EXP 31
2947: IFFALSE 3123
2949: GO 2951
2951: DISABLE
2952: LD_INT 0
2954: PPUSH
2955: PPUSH
// begin enable ;
2956: ENABLE
// rnd = 0 ;
2957: LD_ADDR_VAR 0 2
2961: PUSH
2962: LD_INT 0
2964: ST_TO_ADDR
// uc_side = 8 ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_INT 8
2972: ST_TO_ADDR
// uc_nation = 2 ;
2973: LD_ADDR_OWVAR 21
2977: PUSH
2978: LD_INT 2
2980: ST_TO_ADDR
// hc_name =  ;
2981: LD_ADDR_OWVAR 26
2985: PUSH
2986: LD_STRING 
2988: ST_TO_ADDR
// hc_gallery =  ;
2989: LD_ADDR_OWVAR 33
2993: PUSH
2994: LD_STRING 
2996: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2997: LD_INT 0
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: LD_INT 10
3005: PPUSH
3006: CALL_OW 380
// un = CreateHuman ;
3010: LD_ADDR_VAR 0 1
3014: PUSH
3015: CALL_OW 44
3019: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3020: LD_VAR 0 1
3024: PPUSH
3025: LD_INT 8
3027: PUSH
3028: LD_INT 9
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 2
3040: PPUSH
3041: CALL_OW 12
3045: ARRAY
3046: PPUSH
3047: LD_INT 0
3049: PPUSH
3050: CALL_OW 49
// SetTag ( un , 1 ) ;
3054: LD_VAR 0 1
3058: PPUSH
3059: LD_INT 1
3061: PPUSH
3062: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
3066: LD_ADDR_VAR 0 2
3070: PUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_EXP 31
3078: PPUSH
3079: CALL_OW 12
3083: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3084: LD_VAR 0 1
3088: PPUSH
3089: LD_EXP 31
3093: PUSH
3094: LD_VAR 0 2
3098: ARRAY
3099: PUSH
3100: LD_INT 1
3102: ARRAY
3103: PPUSH
3104: LD_EXP 31
3108: PUSH
3109: LD_VAR 0 2
3113: ARRAY
3114: PUSH
3115: LD_INT 2
3117: ARRAY
3118: PPUSH
3119: CALL_OW 158
// end ;
3123: PPOPN 2
3125: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
3126: LD_INT 22
3128: PUSH
3129: LD_INT 8
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 3
3138: PUSH
3139: LD_INT 61
3141: PUSH
3142: EMPTY
3143: LIST
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PUSH
3149: LD_INT 33
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: LIST
3163: PPUSH
3164: CALL_OW 69
3168: IFFALSE 3248
3170: GO 3172
3172: DISABLE
3173: LD_INT 0
3175: PPUSH
// begin enable ;
3176: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
3177: LD_ADDR_VAR 0 1
3181: PUSH
3182: LD_INT 22
3184: PUSH
3185: LD_INT 8
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 61
3197: PUSH
3198: EMPTY
3199: LIST
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 33
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: PPUSH
3220: CALL_OW 69
3224: PUSH
3225: FOR_IN
3226: IFFALSE 3246
// begin wait ( 0 0$0.3 ) ;
3228: LD_INT 10
3230: PPUSH
3231: CALL_OW 67
// Connect ( i ) ;
3235: LD_VAR 0 1
3239: PPUSH
3240: CALL 40069 0 1
// end ;
3244: GO 3225
3246: POP
3247: POP
// end ; end_of_file
3248: PPOPN 1
3250: END
// every 1 do
3251: GO 3253
3253: DISABLE
// begin InGameOn ;
3254: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3258: LD_INT 22
3260: PUSH
3261: LD_INT 1
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PUSH
3268: LD_INT 21
3270: PUSH
3271: LD_INT 2
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PPUSH
3282: CALL_OW 69
3286: PUSH
3287: LD_INT 1
3289: ARRAY
3290: PPUSH
3291: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3295: LD_INT 22
3297: PUSH
3298: LD_INT 1
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PUSH
3305: LD_INT 21
3307: PUSH
3308: LD_INT 2
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: PUSH
3315: EMPTY
3316: LIST
3317: LIST
3318: PPUSH
3319: CALL_OW 69
3323: PPUSH
3324: LD_INT 69
3326: PPUSH
3327: LD_INT 94
3329: PPUSH
3330: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3334: LD_EXP 1
3338: PPUSH
3339: LD_STRING D2-JMM-1
3341: PPUSH
3342: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3346: LD_INT 22
3348: PUSH
3349: LD_INT 1
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_INT 21
3358: PUSH
3359: LD_INT 2
3361: PUSH
3362: EMPTY
3363: LIST
3364: LIST
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PPUSH
3370: CALL_OW 69
3374: PUSH
3375: LD_INT 1
3377: ARRAY
3378: PPUSH
3379: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3383: LD_EXP 2
3387: PPUSH
3388: LD_STRING D2-Huck-1
3390: PPUSH
3391: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3395: LD_INT 22
3397: PUSH
3398: LD_INT 1
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 21
3407: PUSH
3408: LD_INT 2
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: PPUSH
3419: CALL_OW 69
3423: PUSH
3424: LD_INT 1
3426: ARRAY
3427: PPUSH
3428: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3432: LD_EXP 1
3436: PPUSH
3437: LD_STRING D2-JMM-2
3439: PPUSH
3440: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3444: LD_INT 22
3446: PUSH
3447: LD_INT 1
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: PUSH
3454: LD_INT 21
3456: PUSH
3457: LD_INT 2
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: PPUSH
3468: CALL_OW 69
3472: PUSH
3473: LD_INT 1
3475: ARRAY
3476: PPUSH
3477: CALL_OW 87
// InGameOff ;
3481: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3485: LD_STRING M1
3487: PPUSH
3488: CALL_OW 337
// SaveForQuickRestart ;
3492: CALL_OW 22
// end ;
3496: END
// every 10 10$0 do
3497: GO 3499
3499: DISABLE
// begin DialogueOn ;
3500: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3504: LD_EXP 15
3508: PPUSH
3509: LD_STRING D3-Pow-1
3511: PPUSH
3512: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3516: LD_EXP 1
3520: PPUSH
3521: LD_STRING D3-JMM-1
3523: PPUSH
3524: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3528: LD_EXP 15
3532: PPUSH
3533: LD_STRING D3-Pow-2
3535: PPUSH
3536: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3540: LD_EXP 1
3544: PPUSH
3545: LD_STRING D3-JMM-2
3547: PPUSH
3548: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3552: LD_EXP 15
3556: PPUSH
3557: LD_STRING D3-Pow-3
3559: PPUSH
3560: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3564: LD_EXP 1
3568: PPUSH
3569: LD_STRING D3-JMM-3
3571: PPUSH
3572: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3576: LD_EXP 15
3580: PPUSH
3581: LD_STRING D3-Pow-4
3583: PPUSH
3584: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3588: LD_EXP 1
3592: PPUSH
3593: LD_STRING D3-JMM-4
3595: PPUSH
3596: CALL_OW 88
// DialogueOff ;
3600: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3604: LD_STRING M2
3606: PPUSH
3607: CALL_OW 337
// wait ( 2 2$30 ) ;
3611: LD_INT 5250
3613: PPUSH
3614: CALL_OW 67
// PrepareBurlak ;
3618: CALL 2167 0 0
// BurlakArmy ;
3622: CALL 2316 0 0
// end ;
3626: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3627: LD_INT 1
3629: PPUSH
3630: LD_EXP 18
3634: PPUSH
3635: CALL_OW 292
3639: IFFALSE 3798
3641: GO 3643
3643: DISABLE
// begin DialogueOn ;
3644: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3648: LD_EXP 18
3652: PPUSH
3653: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3657: LD_INT 22
3659: PUSH
3660: LD_INT 1
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 26
3669: PUSH
3670: LD_INT 1
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 2
3679: PUSH
3680: LD_INT 25
3682: PUSH
3683: LD_INT 1
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: PUSH
3690: LD_INT 25
3692: PUSH
3693: LD_INT 2
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PUSH
3700: LD_INT 25
3702: PUSH
3703: LD_INT 3
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PUSH
3710: LD_INT 25
3712: PUSH
3713: LD_INT 4
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PUSH
3720: LD_INT 25
3722: PUSH
3723: LD_INT 5
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 69
3747: PPUSH
3748: LD_STRING D5-Sol1-1
3750: PPUSH
3751: LD_STRING D5-FSol1-1
3753: PPUSH
3754: CALL 6108 0 3
// Say ( JMM , D5-JMM-1 ) ;
3758: LD_EXP 1
3762: PPUSH
3763: LD_STRING D5-JMM-1
3765: PPUSH
3766: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3770: LD_EXP 17
3774: PPUSH
3775: LD_STRING DAmer-Bur-1
3777: PPUSH
3778: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3782: LD_EXP 1
3786: PPUSH
3787: LD_STRING DAmer-JMM-1
3789: PPUSH
3790: CALL_OW 88
// DialogueOff ;
3794: CALL_OW 7
// end ;
3798: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3799: LD_INT 4
3801: PPUSH
3802: LD_INT 22
3804: PUSH
3805: LD_INT 7
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PPUSH
3812: CALL_OW 70
3816: IFFALSE 4215
3818: GO 3820
3820: DISABLE
3821: LD_INT 0
3823: PPUSH
// begin enable ;
3824: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3825: LD_ADDR_VAR 0 1
3829: PUSH
3830: LD_INT 4
3832: PPUSH
3833: LD_INT 22
3835: PUSH
3836: LD_INT 7
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PPUSH
3843: CALL_OW 70
3847: PUSH
3848: FOR_IN
3849: IFFALSE 4213
// begin if i = Burlak or i = Masha then
3851: LD_VAR 0 1
3855: PUSH
3856: LD_EXP 17
3860: EQUAL
3861: PUSH
3862: LD_VAR 0 1
3866: PUSH
3867: LD_EXP 18
3871: EQUAL
3872: OR
3873: IFFALSE 4020
// begin RemoveUnit ( i ) ;
3875: LD_VAR 0 1
3879: PPUSH
3880: CALL_OW 64
// DialogueOn ;
3884: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3888: LD_EXP 1
3892: PPUSH
3893: LD_STRING D5a-JMM-1
3895: PPUSH
3896: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3900: LD_INT 22
3902: PUSH
3903: LD_INT 1
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 26
3912: PUSH
3913: LD_INT 1
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: LD_INT 2
3922: PUSH
3923: LD_INT 25
3925: PUSH
3926: LD_INT 1
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PUSH
3933: LD_INT 25
3935: PUSH
3936: LD_INT 2
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PUSH
3943: LD_INT 25
3945: PUSH
3946: LD_INT 3
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PUSH
3953: LD_INT 25
3955: PUSH
3956: LD_INT 4
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PUSH
3963: LD_INT 25
3965: PUSH
3966: LD_INT 5
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: LIST
3985: PPUSH
3986: CALL_OW 69
3990: PPUSH
3991: LD_STRING D5a-Sol1-1
3993: PPUSH
3994: LD_STRING D5-FSol1-1
3996: PPUSH
3997: CALL 6108 0 3
// DialogueOff ;
4001: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
4005: LD_STRING M2b
4007: PPUSH
4008: CALL_OW 337
// spawnBurlak = 0 ;
4012: LD_ADDR_EXP 27
4016: PUSH
4017: LD_INT 0
4019: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
4020: LD_VAR 0 1
4024: PPUSH
4025: CALL_OW 247
4029: PUSH
4030: LD_INT 2
4032: EQUAL
4033: PUSH
4034: LD_VAR 0 1
4038: PPUSH
4039: CALL_OW 263
4043: PUSH
4044: LD_INT 1
4046: EQUAL
4047: AND
4048: IFFALSE 4176
// begin case IsDrivenBy ( i ) of Gnyevko :
4050: LD_VAR 0 1
4054: PPUSH
4055: CALL_OW 311
4059: PUSH
4060: LD_EXP 19
4064: DOUBLE
4065: EQUAL
4066: IFTRUE 4070
4068: GO 4083
4070: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
4071: LD_INT 1
4073: PPUSH
4074: LD_STRING 13_Gnyevko_1
4076: PPUSH
4077: CALL_OW 39
4081: GO 4176
4083: LD_EXP 20
4087: DOUBLE
4088: EQUAL
4089: IFTRUE 4093
4091: GO 4106
4093: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
4094: LD_INT 1
4096: PPUSH
4097: LD_STRING 13_Titov_1
4099: PPUSH
4100: CALL_OW 39
4104: GO 4176
4106: LD_EXP 21
4110: DOUBLE
4111: EQUAL
4112: IFTRUE 4116
4114: GO 4129
4116: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
4117: LD_INT 1
4119: PPUSH
4120: LD_STRING 13_Xavier_1
4122: PPUSH
4123: CALL_OW 39
4127: GO 4176
4129: LD_EXP 22
4133: DOUBLE
4134: EQUAL
4135: IFTRUE 4139
4137: GO 4152
4139: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
4140: LD_INT 1
4142: PPUSH
4143: LD_STRING 13_Belkov_1
4145: PPUSH
4146: CALL_OW 39
4150: GO 4176
4152: LD_EXP 23
4156: DOUBLE
4157: EQUAL
4158: IFTRUE 4162
4160: GO 4175
4162: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
4163: LD_INT 1
4165: PPUSH
4166: LD_STRING 13_Lipshchin_1
4168: PPUSH
4169: CALL_OW 39
4173: GO 4176
4175: POP
// end ; if GetWeapon ( i ) = 49 then
4176: LD_VAR 0 1
4180: PPUSH
4181: CALL_OW 264
4185: PUSH
4186: LD_INT 49
4188: EQUAL
4189: IFFALSE 4202
// DestroyUnit ( i ) else
4191: LD_VAR 0 1
4195: PPUSH
4196: CALL_OW 65
4200: GO 4211
// RemoveUnit ( i ) ;
4202: LD_VAR 0 1
4206: PPUSH
4207: CALL_OW 64
// end ;
4211: GO 3848
4213: POP
4214: POP
// end ;
4215: PPOPN 1
4217: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4218: LD_EXP 17
4222: PPUSH
4223: CALL_OW 302
4227: PUSH
4228: LD_EXP 18
4232: PPUSH
4233: CALL_OW 256
4237: PUSH
4238: LD_INT 500
4240: LESS
4241: AND
4242: PUSH
4243: LD_EXP 18
4247: PPUSH
4248: CALL_OW 255
4252: PUSH
4253: LD_INT 7
4255: EQUAL
4256: AND
4257: IFFALSE 4277
4259: GO 4261
4261: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
4262: LD_EXP 17
4266: PPUSH
4267: LD_INT 107
4269: PPUSH
4270: LD_INT 118
4272: PPUSH
4273: CALL_OW 111
4277: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4278: LD_EXP 17
4282: PPUSH
4283: CALL_OW 301
4287: PUSH
4288: LD_EXP 27
4292: PUSH
4293: LD_INT 1
4295: EQUAL
4296: AND
4297: IFFALSE 4430
4299: GO 4301
4301: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4302: LD_EXP 1
4306: PPUSH
4307: LD_STRING D5b-JMM-1
4309: PPUSH
4310: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4314: LD_INT 22
4316: PUSH
4317: LD_INT 1
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PUSH
4324: LD_INT 26
4326: PUSH
4327: LD_INT 1
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: PUSH
4334: LD_INT 2
4336: PUSH
4337: LD_INT 25
4339: PUSH
4340: LD_INT 1
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 25
4349: PUSH
4350: LD_INT 2
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 25
4359: PUSH
4360: LD_INT 3
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 25
4369: PUSH
4370: LD_INT 4
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: LD_INT 25
4379: PUSH
4380: LD_INT 5
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: PPUSH
4400: CALL_OW 69
4404: PPUSH
4405: LD_STRING D5b-Sol1-1
4407: PPUSH
4408: LD_STRING 
4410: PPUSH
4411: CALL 6108 0 3
// ChangeMissionObjectives ( M2a ) ;
4415: LD_STRING M2a
4417: PPUSH
4418: CALL_OW 337
// burlakStatus = 1 ;
4422: LD_ADDR_EXP 28
4426: PUSH
4427: LD_INT 1
4429: ST_TO_ADDR
// end ;
4430: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4431: LD_EXP 2
4435: PPUSH
4436: CALL_OW 301
4440: IFFALSE 4577
4442: GO 4444
4444: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4445: LD_EXP 1
4449: PPUSH
4450: LD_STRING D6-JMM-1
4452: PPUSH
4453: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4457: LD_INT 22
4459: PUSH
4460: LD_INT 1
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: PUSH
4467: LD_INT 26
4469: PUSH
4470: LD_INT 1
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: PUSH
4477: LD_INT 2
4479: PUSH
4480: LD_INT 25
4482: PUSH
4483: LD_INT 1
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: LD_INT 25
4492: PUSH
4493: LD_INT 2
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 25
4502: PUSH
4503: LD_INT 3
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PUSH
4510: LD_INT 25
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: PUSH
4520: LD_INT 25
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: PPUSH
4548: LD_STRING D6-Sol1-1
4550: PPUSH
4551: LD_STRING 
4553: PPUSH
4554: CALL 6108 0 3
// Say ( JMM , D6-JMM-2 ) ;
4558: LD_EXP 1
4562: PPUSH
4563: LD_STRING D6-JMM-2
4565: PPUSH
4566: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4570: LD_STRING M1a
4572: PPUSH
4573: CALL_OW 337
// end ;
4577: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4578: LD_INT 25
4580: PPUSH
4581: LD_INT 1
4583: PPUSH
4584: CALL_OW 321
4588: PUSH
4589: LD_INT 2
4591: EQUAL
4592: IFFALSE 4609
4594: GO 4596
4596: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4597: LD_EXP 2
4601: PPUSH
4602: LD_STRING D6-Huck-2
4604: PPUSH
4605: CALL_OW 88
// end ;
4609: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4610: LD_INT 22
4612: PUSH
4613: LD_INT 1
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PUSH
4620: LD_INT 2
4622: PUSH
4623: LD_INT 34
4625: PUSH
4626: LD_INT 8
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 35
4635: PUSH
4636: LD_INT 8
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PPUSH
4652: CALL_OW 69
4656: PUSH
4657: LD_INT 0
4659: GREATER
4660: IFFALSE 4852
4662: GO 4664
4664: DISABLE
4665: LD_INT 0
4667: PPUSH
4668: PPUSH
// begin enable ;
4669: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4670: LD_ADDR_VAR 0 1
4674: PUSH
4675: LD_INT 5
4677: PPUSH
4678: LD_INT 22
4680: PUSH
4681: LD_INT 1
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: PUSH
4688: LD_INT 21
4690: PUSH
4691: LD_INT 3
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: LD_INT 30
4700: PUSH
4701: LD_INT 1
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: LD_INT 3
4710: PUSH
4711: LD_INT 57
4713: PUSH
4714: EMPTY
4715: LIST
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: PPUSH
4727: CALL_OW 70
4731: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4732: LD_ADDR_VAR 0 2
4736: PUSH
4737: LD_INT 5
4739: PPUSH
4740: LD_INT 22
4742: PUSH
4743: LD_INT 1
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PUSH
4750: LD_INT 21
4752: PUSH
4753: LD_INT 3
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 30
4762: PUSH
4763: LD_INT 5
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: LD_INT 3
4772: PUSH
4773: LD_INT 57
4775: PUSH
4776: EMPTY
4777: LIST
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: PPUSH
4789: CALL_OW 70
4793: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4794: LD_VAR 0 1
4798: PUSH
4799: LD_INT 0
4801: GREATER
4802: PUSH
4803: LD_VAR 0 2
4807: PUSH
4808: LD_INT 0
4810: GREATER
4811: AND
4812: IFFALSE 4852
// begin disable ;
4814: DISABLE
// DialogueOn ;
4815: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4819: LD_EXP 1
4823: PPUSH
4824: LD_STRING D7-JMM-1
4826: PPUSH
4827: CALL_OW 88
// DialogueOff ;
4831: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4835: LD_STRING M4
4837: PPUSH
4838: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4842: LD_INT 5
4844: PPUSH
4845: LD_INT 0
4847: PPUSH
4848: CALL_OW 424
// end ; end ;
4852: PPOPN 2
4854: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4855: LD_INT 6
4857: PPUSH
4858: LD_INT 22
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 25
4870: PUSH
4871: LD_INT 4
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PPUSH
4882: CALL_OW 70
4886: PUSH
4887: LD_INT 0
4889: GREATER
4890: PUSH
4891: LD_EXP 37
4895: PUSH
4896: LD_INT 1
4898: EQUAL
4899: AND
4900: PUSH
4901: LD_EXP 29
4905: PUSH
4906: LD_INT 0
4908: EQUAL
4909: AND
4910: IFFALSE 4975
4912: GO 4914
4914: DISABLE
// begin enable ;
4915: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4916: LD_ADDR_EXP 26
4920: PUSH
4921: LD_INT 6
4923: PPUSH
4924: LD_INT 22
4926: PUSH
4927: LD_INT 1
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 25
4936: PUSH
4937: LD_INT 4
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PPUSH
4948: CALL_OW 70
4952: PUSH
4953: LD_INT 1
4955: ARRAY
4956: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4957: LD_INT 6
4959: PPUSH
4960: LD_INT 0
4962: PPUSH
4963: CALL_OW 424
// radationResearched = 1 ;
4967: LD_ADDR_EXP 29
4971: PUSH
4972: LD_INT 1
4974: ST_TO_ADDR
// end ;
4975: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4976: LD_EXP 26
4980: PPUSH
4981: CALL_OW 301
4985: PUSH
4986: LD_EXP 29
4990: PUSH
4991: LD_INT 1
4993: EQUAL
4994: AND
4995: IFFALSE 5031
4997: GO 4999
4999: DISABLE
// begin enable ;
5000: ENABLE
// radationResearched = 0 ;
5001: LD_ADDR_EXP 29
5005: PUSH
5006: LD_INT 0
5008: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5009: LD_INT 6
5011: PPUSH
5012: LD_INT 1
5014: PPUSH
5015: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
5019: LD_EXP 1
5023: PPUSH
5024: LD_STRING D9a-JMM-1
5026: PPUSH
5027: CALL_OW 88
// end ; end_of_file
5031: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
5032: LD_VAR 0 5
5036: PUSH
5037: LD_INT 8
5039: EQUAL
5040: PUSH
5041: LD_EXP 35
5045: PUSH
5046: LD_INT 0
5048: EQUAL
5049: AND
5050: IFFALSE 5103
// begin eventVar1 = 1 ;
5052: LD_ADDR_EXP 35
5056: PUSH
5057: LD_INT 1
5059: ST_TO_ADDR
// DialogueOn ;
5060: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
5064: LD_EXP 1
5068: PPUSH
5069: LD_STRING D6a-JMM-1
5071: PPUSH
5072: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
5076: LD_EXP 15
5080: PPUSH
5081: LD_STRING D6a-Pow-1
5083: PPUSH
5084: CALL_OW 94
// DialogueOff ;
5088: CALL_OW 7
// wait ( 3 3$0 ) ;
5092: LD_INT 6300
5094: PPUSH
5095: CALL_OW 67
// PowellSupport ;
5099: CALL 1939 0 0
// end ; end ;
5103: PPOPN 5
5105: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5106: LD_VAR 0 1
5110: PPUSH
5111: CALL 27472 0 1
// if un = JMM then
5115: LD_VAR 0 1
5119: PUSH
5120: LD_EXP 1
5124: EQUAL
5125: IFFALSE 5134
// YouLost ( JMM ) ;
5127: LD_STRING JMM
5129: PPUSH
5130: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
5134: LD_VAR 0 1
5138: PPUSH
5139: CALL_OW 264
5143: PUSH
5144: LD_INT 31
5146: EQUAL
5147: IFFALSE 5163
// achivCounter := achivCounter + 1 ;
5149: LD_ADDR_EXP 41
5153: PUSH
5154: LD_EXP 41
5158: PUSH
5159: LD_INT 1
5161: PLUS
5162: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL_OW 255
5172: PUSH
5173: LD_INT 1
5175: NONEQUAL
5176: PUSH
5177: LD_VAR 0 1
5181: PPUSH
5182: CALL_OW 247
5186: PUSH
5187: LD_INT 2
5189: EQUAL
5190: AND
5191: IFFALSE 5207
// destroyCounter := destroyCounter + 1 ;
5193: LD_ADDR_EXP 42
5197: PUSH
5198: LD_EXP 42
5202: PUSH
5203: LD_INT 1
5205: PLUS
5206: ST_TO_ADDR
// end ;
5207: PPOPN 1
5209: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
5210: LD_VAR 0 2
5214: PUSH
5215: LD_EXP 18
5219: EQUAL
5220: IFFALSE 5229
// SetAchievement ( ACH_MASHA ) ;
5222: LD_STRING ACH_MASHA
5224: PPUSH
5225: CALL_OW 543
// end ;
5229: PPOPN 4
5231: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
5232: LD_VAR 0 1
5236: PPUSH
5237: LD_VAR 0 2
5241: PPUSH
5242: CALL 27594 0 2
// if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
5246: LD_VAR 0 1
5250: PPUSH
5251: CALL_OW 264
5255: PUSH
5256: LD_INT 8
5258: EQUAL
5259: PUSH
5260: LD_EXP 36
5264: PUSH
5265: LD_INT 0
5267: EQUAL
5268: AND
5269: IFFALSE 5338
// begin eventVar2 = 1 ;
5271: LD_ADDR_EXP 36
5275: PUSH
5276: LD_INT 1
5278: ST_TO_ADDR
// DialogueOn ;
5279: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5283: LD_EXP 1
5287: PPUSH
5288: LD_STRING D6b-JMM-1
5290: PPUSH
5291: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5295: LD_EXP 15
5299: PPUSH
5300: LD_STRING D6b-Pow-1
5302: PPUSH
5303: CALL_OW 94
// DialogueOff ;
5307: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5311: LD_INT 5
5313: PPUSH
5314: LD_INT 1
5316: PPUSH
5317: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5321: LD_INT 7
5323: PPUSH
5324: LD_INT 1
5326: PPUSH
5327: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5331: LD_STRING M3
5333: PPUSH
5334: CALL_OW 337
// end ; end ;
5338: PPOPN 2
5340: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5341: LD_VAR 0 2
5345: PPUSH
5346: LD_VAR 0 3
5350: PPUSH
5351: LD_INT 5
5353: PPUSH
5354: CALL_OW 309
5358: PUSH
5359: LD_EXP 37
5363: PUSH
5364: LD_INT 0
5366: EQUAL
5367: AND
5368: IFFALSE 5597
// begin eventVar3 = 1 ;
5370: LD_ADDR_EXP 37
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5378: LD_INT 175
5380: PPUSH
5381: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5385: LD_INT 7
5387: PPUSH
5388: LD_INT 22
5390: PUSH
5391: LD_INT 1
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: PUSH
5398: LD_INT 21
5400: PUSH
5401: LD_INT 2
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: PUSH
5408: LD_INT 34
5410: PUSH
5411: LD_INT 11
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: PPUSH
5423: CALL_OW 70
5427: PUSH
5428: LD_INT 0
5430: GREATER
5431: IFFALSE 5450
// begin radarOnSpot = 1 ;
5433: LD_ADDR_EXP 30
5437: PUSH
5438: LD_INT 1
5440: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5441: LD_STRING M3a
5443: PPUSH
5444: CALL_OW 337
// end else
5448: GO 5457
// begin ChangeMissionObjectives ( M3b ) ;
5450: LD_STRING M3b
5452: PPUSH
5453: CALL_OW 337
// end ; DialogueOn ;
5457: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5461: LD_EXP 2
5465: PPUSH
5466: LD_STRING D8-Huck-1
5468: PPUSH
5469: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5473: LD_EXP 1
5477: PPUSH
5478: LD_STRING D8-JMM-1
5480: PPUSH
5481: CALL_OW 88
// if IsOk ( Stevens ) then
5485: LD_EXP 2
5489: PPUSH
5490: CALL_OW 302
5494: IFFALSE 5556
// begin Say ( Stevens , D8-Huck-2 ) ;
5496: LD_EXP 2
5500: PPUSH
5501: LD_STRING D8-Huck-2
5503: PPUSH
5504: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5508: LD_EXP 1
5512: PPUSH
5513: LD_STRING D8-JMM-2
5515: PPUSH
5516: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5520: LD_EXP 2
5524: PPUSH
5525: LD_STRING D8-Huck-3
5527: PPUSH
5528: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5532: LD_EXP 1
5536: PPUSH
5537: LD_STRING D8-JMM-3
5539: PPUSH
5540: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5544: LD_EXP 2
5548: PPUSH
5549: LD_STRING D8-Huck-4
5551: PPUSH
5552: CALL_OW 88
// end ; DialogueOff ;
5556: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5560: LD_INT 5
5562: PPUSH
5563: LD_INT 0
5565: PPUSH
5566: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5570: LD_INT 7
5572: PPUSH
5573: LD_INT 0
5575: PPUSH
5576: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5580: LD_INT 6
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5590: LD_STRING M5
5592: PPUSH
5593: CALL_OW 337
// end ; end ;
5597: PPOPN 3
5599: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5600: LD_EXP 26
5604: PPUSH
5605: CALL_OW 302
5609: PUSH
5610: LD_VAR 0 2
5614: PUSH
5615: LD_EXP 26
5619: EQUAL
5620: AND
5621: PUSH
5622: LD_EXP 38
5626: PUSH
5627: LD_INT 0
5629: EQUAL
5630: AND
5631: PUSH
5632: LD_EXP 37
5636: PUSH
5637: LD_INT 1
5639: EQUAL
5640: AND
5641: IFFALSE 5687
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5643: LD_VAR 0 1
5647: PPUSH
5648: LD_INT 1
5650: PPUSH
5651: CALL_OW 268
5655: PUSH
5656: LD_INT 11
5658: EQUAL
5659: PUSH
5660: LD_VAR 0 1
5664: PPUSH
5665: LD_INT 2
5667: PPUSH
5668: CALL_OW 268
5672: PUSH
5673: LD_INT 11
5675: EQUAL
5676: OR
5677: IFFALSE 5687
// eventVar4 = 1 ;
5679: LD_ADDR_EXP 38
5683: PUSH
5684: LD_INT 1
5686: ST_TO_ADDR
// end ;
5687: PPOPN 2
5689: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5690: LD_INT 0
5692: PPUSH
5693: PPUSH
// begin if GetNation ( unit ) = 2 then
5694: LD_VAR 0 1
5698: PPUSH
5699: CALL_OW 248
5703: PUSH
5704: LD_INT 2
5706: EQUAL
5707: IFFALSE 5985
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5709: LD_ADDR_EXP 32
5713: PUSH
5714: LD_EXP 32
5718: PUSH
5719: LD_INT 1
5721: PLUS
5722: ST_TO_ADDR
// for i := 1 to sibDeposits do
5723: LD_ADDR_VAR 0 4
5727: PUSH
5728: DOUBLE
5729: LD_INT 1
5731: DEC
5732: ST_TO_ADDR
5733: LD_EXP 31
5737: PUSH
5738: FOR_TO
5739: IFFALSE 5841
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5741: LD_EXP 31
5745: PUSH
5746: LD_VAR 0 4
5750: ARRAY
5751: PUSH
5752: LD_INT 1
5754: ARRAY
5755: PUSH
5756: LD_VAR 0 2
5760: EQUAL
5761: PUSH
5762: LD_EXP 31
5766: PUSH
5767: LD_VAR 0 4
5771: ARRAY
5772: PUSH
5773: LD_INT 2
5775: ARRAY
5776: PUSH
5777: LD_VAR 0 3
5781: EQUAL
5782: AND
5783: IFFALSE 5839
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5785: LD_ADDR_EXP 31
5789: PUSH
5790: LD_EXP 31
5794: PPUSH
5795: LD_VAR 0 4
5799: PUSH
5800: EMPTY
5801: LIST
5802: PUSH
5803: LD_INT 1
5805: ARRAY
5806: PPUSH
5807: CALL_OW 3
5811: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5812: LD_ADDR_EXP 31
5816: PUSH
5817: LD_EXP 31
5821: PPUSH
5822: LD_VAR 0 4
5826: PUSH
5827: EMPTY
5828: LIST
5829: PUSH
5830: LD_INT 2
5832: ARRAY
5833: PPUSH
5834: CALL_OW 3
5838: ST_TO_ADDR
// end ;
5839: GO 5738
5841: POP
5842: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5843: LD_EXP 39
5847: PUSH
5848: LD_INT 0
5850: EQUAL
5851: PUSH
5852: LD_VAR 0 2
5856: PPUSH
5857: LD_VAR 0 3
5861: PPUSH
5862: CALL_OW 428
5866: PUSH
5867: LD_INT 22
5869: PUSH
5870: LD_INT 1
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: PPUSH
5877: CALL_OW 69
5881: IN
5882: AND
5883: IFFALSE 5985
// begin eventVar5 = 1 ;
5885: LD_ADDR_EXP 39
5889: PUSH
5890: LD_INT 1
5892: ST_TO_ADDR
// DialogueOn ;
5893: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5897: LD_EXP 2
5901: PPUSH
5902: LD_STRING D4-Sci1-1
5904: PPUSH
5905: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5909: LD_EXP 1
5913: PPUSH
5914: LD_STRING D4-JMM-1
5916: PPUSH
5917: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5921: LD_EXP 2
5925: PPUSH
5926: LD_STRING D4-Sci1-2
5928: PPUSH
5929: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5933: LD_EXP 1
5937: PPUSH
5938: LD_STRING D4-JMM-2
5940: PPUSH
5941: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5945: LD_EXP 2
5949: PPUSH
5950: LD_STRING D4-Sci1-3
5952: PPUSH
5953: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5957: LD_EXP 1
5961: PPUSH
5962: LD_STRING D4-JMM-3
5964: PPUSH
5965: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5969: LD_EXP 1
5973: PPUSH
5974: LD_STRING D4-JMM-3a
5976: PPUSH
5977: CALL_OW 88
// DialogueOff ;
5981: CALL_OW 7
// end ; end ; end ;
5985: PPOPN 5
5987: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5988: LD_VAR 0 1
5992: PPUSH
5993: CALL_OW 255
5997: PUSH
5998: LD_INT 1
6000: EQUAL
6001: PUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 266
6011: PUSH
6012: LD_INT 0
6014: EQUAL
6015: AND
6016: PUSH
6017: LD_INT 22
6019: PUSH
6020: LD_INT 1
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 21
6029: PUSH
6030: LD_INT 3
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 2
6039: PUSH
6040: LD_INT 30
6042: PUSH
6043: LD_INT 0
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: PUSH
6050: LD_INT 30
6052: PUSH
6053: LD_INT 1
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: LIST
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: LIST
6069: PPUSH
6070: CALL_OW 69
6074: PUSH
6075: LD_INT 1
6077: EQUAL
6078: AND
6079: IFFALSE 6093
// SetBName ( building , omega ) ;
6081: LD_VAR 0 1
6085: PPUSH
6086: LD_STRING omega
6088: PPUSH
6089: CALL_OW 500
// end ;
6093: PPOPN 2
6095: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL 27578 0 1
// end ; end_of_file
6105: PPOPN 1
6107: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6108: LD_INT 0
6110: PPUSH
6111: PPUSH
6112: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6113: LD_ADDR_VAR 0 1
6117: PUSH
6118: LD_VAR 0 1
6122: PUSH
6123: LD_EXP 1
6127: PUSH
6128: LD_EXP 2
6132: PUSH
6133: LD_EXP 3
6137: PUSH
6138: LD_EXP 4
6142: PUSH
6143: LD_EXP 5
6147: PUSH
6148: LD_EXP 6
6152: PUSH
6153: LD_EXP 7
6157: PUSH
6158: LD_EXP 8
6162: PUSH
6163: LD_EXP 9
6167: PUSH
6168: LD_EXP 10
6172: PUSH
6173: LD_EXP 11
6177: PUSH
6178: LD_EXP 12
6182: PUSH
6183: LD_EXP 13
6187: PUSH
6188: LD_EXP 14
6192: PUSH
6193: LD_EXP 15
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: DIFF
6215: ST_TO_ADDR
// if not characters then
6216: LD_VAR 0 1
6220: NOT
6221: IFFALSE 6225
// exit ;
6223: GO 6304
// speaker := characters [ rand ( 1 , characters ) ] ;
6225: LD_ADDR_VAR 0 6
6229: PUSH
6230: LD_VAR 0 1
6234: PUSH
6235: LD_INT 1
6237: PPUSH
6238: LD_VAR 0 1
6242: PPUSH
6243: CALL_OW 12
6247: ARRAY
6248: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6249: LD_VAR 0 6
6253: PPUSH
6254: CALL_OW 258
6258: PUSH
6259: LD_INT 1
6261: EQUAL
6262: IFFALSE 6280
// Say ( speaker , dialogMID ) else
6264: LD_VAR 0 6
6268: PPUSH
6269: LD_VAR 0 2
6273: PPUSH
6274: CALL_OW 88
6278: GO 6294
// Say ( speaker , dialogFID ) ;
6280: LD_VAR 0 6
6284: PPUSH
6285: LD_VAR 0 3
6289: PPUSH
6290: CALL_OW 88
// result := speaker ;
6294: LD_ADDR_VAR 0 4
6298: PUSH
6299: LD_VAR 0 6
6303: ST_TO_ADDR
// end ;
6304: LD_VAR 0 4
6308: RET
// export function PrepareDifficulty ; begin
6309: LD_INT 0
6311: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6312: LD_INT 5
6314: PPUSH
6315: LD_INT 8
6317: PPUSH
6318: LD_INT 2
6320: PPUSH
6321: CALL_OW 322
// if difficulty = 1 then
6325: LD_OWVAR 67
6329: PUSH
6330: LD_INT 1
6332: EQUAL
6333: IFFALSE 6452
// begin SetTech ( 66 , 8 , state_researched ) ;
6335: LD_INT 66
6337: PPUSH
6338: LD_INT 8
6340: PPUSH
6341: LD_INT 2
6343: PPUSH
6344: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6348: LD_INT 67
6350: PPUSH
6351: LD_INT 8
6353: PPUSH
6354: LD_INT 0
6356: PPUSH
6357: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6361: LD_INT 68
6363: PPUSH
6364: LD_INT 8
6366: PPUSH
6367: LD_INT 0
6369: PPUSH
6370: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6374: LD_INT 51
6376: PPUSH
6377: LD_INT 8
6379: PPUSH
6380: LD_INT 2
6382: PPUSH
6383: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6387: LD_INT 52
6389: PPUSH
6390: LD_INT 8
6392: PPUSH
6393: LD_INT 0
6395: PPUSH
6396: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6400: LD_INT 53
6402: PPUSH
6403: LD_INT 8
6405: PPUSH
6406: LD_INT 0
6408: PPUSH
6409: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6413: LD_INT 60
6415: PPUSH
6416: LD_INT 8
6418: PPUSH
6419: LD_INT 2
6421: PPUSH
6422: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6426: LD_INT 61
6428: PPUSH
6429: LD_INT 8
6431: PPUSH
6432: LD_INT 0
6434: PPUSH
6435: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6439: LD_INT 62
6441: PPUSH
6442: LD_INT 8
6444: PPUSH
6445: LD_INT 0
6447: PPUSH
6448: CALL_OW 322
// end ; if difficulty = 2 then
6452: LD_OWVAR 67
6456: PUSH
6457: LD_INT 2
6459: EQUAL
6460: IFFALSE 6579
// begin SetTech ( 66 , 8 , state_researched ) ;
6462: LD_INT 66
6464: PPUSH
6465: LD_INT 8
6467: PPUSH
6468: LD_INT 2
6470: PPUSH
6471: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6475: LD_INT 67
6477: PPUSH
6478: LD_INT 8
6480: PPUSH
6481: LD_INT 2
6483: PPUSH
6484: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6488: LD_INT 68
6490: PPUSH
6491: LD_INT 8
6493: PPUSH
6494: LD_INT 0
6496: PPUSH
6497: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6501: LD_INT 51
6503: PPUSH
6504: LD_INT 8
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6514: LD_INT 52
6516: PPUSH
6517: LD_INT 8
6519: PPUSH
6520: LD_INT 2
6522: PPUSH
6523: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6527: LD_INT 53
6529: PPUSH
6530: LD_INT 8
6532: PPUSH
6533: LD_INT 2
6535: PPUSH
6536: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6540: LD_INT 60
6542: PPUSH
6543: LD_INT 8
6545: PPUSH
6546: LD_INT 2
6548: PPUSH
6549: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6553: LD_INT 61
6555: PPUSH
6556: LD_INT 8
6558: PPUSH
6559: LD_INT 2
6561: PPUSH
6562: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6566: LD_INT 62
6568: PPUSH
6569: LD_INT 8
6571: PPUSH
6572: LD_INT 0
6574: PPUSH
6575: CALL_OW 322
// end ; if difficulty >= 3 then
6579: LD_OWVAR 67
6583: PUSH
6584: LD_INT 3
6586: GREATEREQUAL
6587: IFFALSE 6706
// begin SetTech ( 66 , 8 , state_researched ) ;
6589: LD_INT 66
6591: PPUSH
6592: LD_INT 8
6594: PPUSH
6595: LD_INT 2
6597: PPUSH
6598: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6602: LD_INT 67
6604: PPUSH
6605: LD_INT 8
6607: PPUSH
6608: LD_INT 2
6610: PPUSH
6611: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6615: LD_INT 68
6617: PPUSH
6618: LD_INT 8
6620: PPUSH
6621: LD_INT 0
6623: PPUSH
6624: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6628: LD_INT 51
6630: PPUSH
6631: LD_INT 8
6633: PPUSH
6634: LD_INT 2
6636: PPUSH
6637: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6641: LD_INT 52
6643: PPUSH
6644: LD_INT 8
6646: PPUSH
6647: LD_INT 2
6649: PPUSH
6650: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6654: LD_INT 53
6656: PPUSH
6657: LD_INT 8
6659: PPUSH
6660: LD_INT 2
6662: PPUSH
6663: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6667: LD_INT 60
6669: PPUSH
6670: LD_INT 8
6672: PPUSH
6673: LD_INT 2
6675: PPUSH
6676: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6680: LD_INT 61
6682: PPUSH
6683: LD_INT 8
6685: PPUSH
6686: LD_INT 2
6688: PPUSH
6689: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6693: LD_INT 62
6695: PPUSH
6696: LD_INT 8
6698: PPUSH
6699: LD_INT 0
6701: PPUSH
6702: CALL_OW 322
// end ; end ;
6706: LD_VAR 0 1
6710: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6711: LD_INT 0
6713: PPUSH
6714: PPUSH
6715: PPUSH
6716: PPUSH
6717: PPUSH
6718: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6719: LD_ADDR_VAR 0 7
6723: PUSH
6724: LD_INT 22
6726: PUSH
6727: LD_VAR 0 1
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 25
6738: PUSH
6739: LD_INT 9
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PPUSH
6750: CALL_OW 69
6754: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6755: LD_ADDR_VAR 0 8
6759: PUSH
6760: LD_INT 22
6762: PUSH
6763: LD_VAR 0 2
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PUSH
6772: LD_INT 3
6774: PUSH
6775: LD_INT 21
6777: PUSH
6778: LD_INT 3
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PPUSH
6793: CALL_OW 69
6797: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6798: LD_ADDR_VAR 0 5
6802: PUSH
6803: LD_INT 1
6805: PPUSH
6806: LD_INT 3
6808: PPUSH
6809: CALL_OW 12
6813: ST_TO_ADDR
// for i = 1 to list do
6814: LD_ADDR_VAR 0 6
6818: PUSH
6819: DOUBLE
6820: LD_INT 1
6822: DEC
6823: ST_TO_ADDR
6824: LD_VAR 0 7
6828: PUSH
6829: FOR_TO
6830: IFFALSE 7012
// for ta in filter do
6832: LD_ADDR_VAR 0 4
6836: PUSH
6837: LD_VAR 0 8
6841: PUSH
6842: FOR_IN
6843: IFFALSE 7008
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6845: LD_VAR 0 7
6849: PUSH
6850: LD_VAR 0 6
6854: ARRAY
6855: PPUSH
6856: LD_VAR 0 4
6860: PPUSH
6861: CALL_OW 296
6865: PUSH
6866: LD_INT 13
6868: LESSEQUAL
6869: IFFALSE 7006
// begin case c of 1 :
6871: LD_VAR 0 5
6875: PUSH
6876: LD_INT 1
6878: DOUBLE
6879: EQUAL
6880: IFTRUE 6884
6882: GO 6922
6884: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6885: LD_VAR 0 7
6889: PUSH
6890: LD_VAR 0 6
6894: ARRAY
6895: PPUSH
6896: LD_VAR 0 4
6900: PPUSH
6901: CALL_OW 250
6905: PPUSH
6906: LD_VAR 0 4
6910: PPUSH
6911: CALL_OW 251
6915: PPUSH
6916: CALL_OW 154
6920: GO 7006
6922: LD_INT 2
6924: DOUBLE
6925: EQUAL
6926: IFTRUE 6930
6928: GO 6994
6930: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6931: LD_VAR 0 7
6935: PUSH
6936: LD_VAR 0 6
6940: ARRAY
6941: PPUSH
6942: LD_VAR 0 4
6946: PPUSH
6947: CALL_OW 250
6951: PUSH
6952: LD_INT 1
6954: NEG
6955: PPUSH
6956: LD_INT 1
6958: PPUSH
6959: CALL_OW 12
6963: PLUS
6964: PPUSH
6965: LD_VAR 0 4
6969: PPUSH
6970: CALL_OW 251
6974: PUSH
6975: LD_INT 1
6977: NEG
6978: PPUSH
6979: LD_INT 1
6981: PPUSH
6982: CALL_OW 12
6986: PLUS
6987: PPUSH
6988: CALL_OW 153
6992: GO 7006
6994: LD_INT 3
6996: DOUBLE
6997: EQUAL
6998: IFTRUE 7002
7000: GO 7005
7002: POP
// ; end ;
7003: GO 7006
7005: POP
// end ; end ;
7006: GO 6842
7008: POP
7009: POP
7010: GO 6829
7012: POP
7013: POP
// end ;
7014: LD_VAR 0 3
7018: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7019: LD_INT 0
7021: PPUSH
7022: PPUSH
// for i in charactersList do
7023: LD_ADDR_VAR 0 4
7027: PUSH
7028: LD_VAR 0 1
7032: PUSH
7033: FOR_IN
7034: IFFALSE 7052
// SaveCharacters ( i , ident ) ;
7036: LD_VAR 0 4
7040: PPUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 38
7050: GO 7033
7052: POP
7053: POP
// end ;
7054: LD_VAR 0 3
7058: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7059: LD_INT 0
7061: PPUSH
7062: PPUSH
7063: PPUSH
7064: PPUSH
7065: PPUSH
7066: PPUSH
7067: PPUSH
7068: PPUSH
7069: PPUSH
7070: PPUSH
7071: PPUSH
// for i = 1 to medicCount do
7072: LD_ADDR_VAR 0 13
7076: PUSH
7077: DOUBLE
7078: LD_INT 1
7080: DEC
7081: ST_TO_ADDR
7082: LD_VAR 0 7
7086: PUSH
7087: FOR_TO
7088: IFFALSE 7170
// begin uc_side = side ;
7090: LD_ADDR_OWVAR 20
7094: PUSH
7095: LD_VAR 0 1
7099: ST_TO_ADDR
// uc_nation = nation ;
7100: LD_ADDR_OWVAR 21
7104: PUSH
7105: LD_VAR 0 2
7109: ST_TO_ADDR
// hc_name =  ;
7110: LD_ADDR_OWVAR 26
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// hc_gallery =  ;
7118: LD_ADDR_OWVAR 33
7122: PUSH
7123: LD_STRING 
7125: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7126: LD_INT 0
7128: PPUSH
7129: LD_INT 4
7131: PPUSH
7132: LD_VAR 0 8
7136: PPUSH
7137: CALL_OW 380
// un = CreateHuman ;
7141: LD_ADDR_VAR 0 15
7145: PUSH
7146: CALL_OW 44
7150: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7151: LD_VAR 0 15
7155: PPUSH
7156: LD_VAR 0 9
7160: PPUSH
7161: LD_INT 0
7163: PPUSH
7164: CALL_OW 49
// end ;
7168: GO 7087
7170: POP
7171: POP
// for i = 1 to soldierCount do
7172: LD_ADDR_VAR 0 13
7176: PUSH
7177: DOUBLE
7178: LD_INT 1
7180: DEC
7181: ST_TO_ADDR
7182: LD_VAR 0 3
7186: PUSH
7187: FOR_TO
7188: IFFALSE 7270
// begin uc_side = side ;
7190: LD_ADDR_OWVAR 20
7194: PUSH
7195: LD_VAR 0 1
7199: ST_TO_ADDR
// uc_nation = nation ;
7200: LD_ADDR_OWVAR 21
7204: PUSH
7205: LD_VAR 0 2
7209: ST_TO_ADDR
// hc_name =  ;
7210: LD_ADDR_OWVAR 26
7214: PUSH
7215: LD_STRING 
7217: ST_TO_ADDR
// hc_gallery =  ;
7218: LD_ADDR_OWVAR 33
7222: PUSH
7223: LD_STRING 
7225: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7226: LD_INT 0
7228: PPUSH
7229: LD_INT 1
7231: PPUSH
7232: LD_VAR 0 8
7236: PPUSH
7237: CALL_OW 380
// un = CreateHuman ;
7241: LD_ADDR_VAR 0 15
7245: PUSH
7246: CALL_OW 44
7250: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7251: LD_VAR 0 15
7255: PPUSH
7256: LD_VAR 0 9
7260: PPUSH
7261: LD_INT 0
7263: PPUSH
7264: CALL_OW 49
// end ;
7268: GO 7187
7270: POP
7271: POP
// for i = 1 to sniperCount do
7272: LD_ADDR_VAR 0 13
7276: PUSH
7277: DOUBLE
7278: LD_INT 1
7280: DEC
7281: ST_TO_ADDR
7282: LD_VAR 0 4
7286: PUSH
7287: FOR_TO
7288: IFFALSE 7370
// begin uc_side = side ;
7290: LD_ADDR_OWVAR 20
7294: PUSH
7295: LD_VAR 0 1
7299: ST_TO_ADDR
// uc_nation = nation ;
7300: LD_ADDR_OWVAR 21
7304: PUSH
7305: LD_VAR 0 2
7309: ST_TO_ADDR
// hc_name =  ;
7310: LD_ADDR_OWVAR 26
7314: PUSH
7315: LD_STRING 
7317: ST_TO_ADDR
// hc_gallery =  ;
7318: LD_ADDR_OWVAR 33
7322: PUSH
7323: LD_STRING 
7325: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7326: LD_INT 0
7328: PPUSH
7329: LD_INT 5
7331: PPUSH
7332: LD_VAR 0 8
7336: PPUSH
7337: CALL_OW 380
// un = CreateHuman ;
7341: LD_ADDR_VAR 0 15
7345: PUSH
7346: CALL_OW 44
7350: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7351: LD_VAR 0 15
7355: PPUSH
7356: LD_VAR 0 9
7360: PPUSH
7361: LD_INT 0
7363: PPUSH
7364: CALL_OW 49
// end ;
7368: GO 7287
7370: POP
7371: POP
// for i = 1 to bazookCount do
7372: LD_ADDR_VAR 0 13
7376: PUSH
7377: DOUBLE
7378: LD_INT 1
7380: DEC
7381: ST_TO_ADDR
7382: LD_VAR 0 5
7386: PUSH
7387: FOR_TO
7388: IFFALSE 7470
// begin uc_side = side ;
7390: LD_ADDR_OWVAR 20
7394: PUSH
7395: LD_VAR 0 1
7399: ST_TO_ADDR
// uc_nation = nation ;
7400: LD_ADDR_OWVAR 21
7404: PUSH
7405: LD_VAR 0 2
7409: ST_TO_ADDR
// hc_name =  ;
7410: LD_ADDR_OWVAR 26
7414: PUSH
7415: LD_STRING 
7417: ST_TO_ADDR
// hc_gallery =  ;
7418: LD_ADDR_OWVAR 33
7422: PUSH
7423: LD_STRING 
7425: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7426: LD_INT 0
7428: PPUSH
7429: LD_INT 9
7431: PPUSH
7432: LD_VAR 0 8
7436: PPUSH
7437: CALL_OW 380
// un = CreateHuman ;
7441: LD_ADDR_VAR 0 15
7445: PUSH
7446: CALL_OW 44
7450: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7451: LD_VAR 0 15
7455: PPUSH
7456: LD_VAR 0 9
7460: PPUSH
7461: LD_INT 0
7463: PPUSH
7464: CALL_OW 49
// end ;
7468: GO 7387
7470: POP
7471: POP
// for i = 1 to mortalCount do
7472: LD_ADDR_VAR 0 13
7476: PUSH
7477: DOUBLE
7478: LD_INT 1
7480: DEC
7481: ST_TO_ADDR
7482: LD_VAR 0 6
7486: PUSH
7487: FOR_TO
7488: IFFALSE 7570
// begin uc_side = side ;
7490: LD_ADDR_OWVAR 20
7494: PUSH
7495: LD_VAR 0 1
7499: ST_TO_ADDR
// uc_nation = nation ;
7500: LD_ADDR_OWVAR 21
7504: PUSH
7505: LD_VAR 0 2
7509: ST_TO_ADDR
// hc_name =  ;
7510: LD_ADDR_OWVAR 26
7514: PUSH
7515: LD_STRING 
7517: ST_TO_ADDR
// hc_gallery =  ;
7518: LD_ADDR_OWVAR 33
7522: PUSH
7523: LD_STRING 
7525: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7526: LD_INT 0
7528: PPUSH
7529: LD_INT 8
7531: PPUSH
7532: LD_VAR 0 8
7536: PPUSH
7537: CALL_OW 380
// un = CreateHuman ;
7541: LD_ADDR_VAR 0 15
7545: PUSH
7546: CALL_OW 44
7550: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7551: LD_VAR 0 15
7555: PPUSH
7556: LD_VAR 0 9
7560: PPUSH
7561: LD_INT 0
7563: PPUSH
7564: CALL_OW 49
// end ;
7568: GO 7487
7570: POP
7571: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7572: LD_ADDR_VAR 0 17
7576: PUSH
7577: LD_INT 22
7579: PUSH
7580: LD_VAR 0 1
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: LD_INT 25
7591: PUSH
7592: LD_INT 4
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PPUSH
7603: CALL_OW 69
7607: ST_TO_ADDR
// for i in medic_list do
7608: LD_ADDR_VAR 0 13
7612: PUSH
7613: LD_VAR 0 17
7617: PUSH
7618: FOR_IN
7619: IFFALSE 7654
// if GetTag ( i ) = 1 then
7621: LD_VAR 0 13
7625: PPUSH
7626: CALL_OW 110
7630: PUSH
7631: LD_INT 1
7633: EQUAL
7634: IFFALSE 7652
// medic_list := medic_list diff i ;
7636: LD_ADDR_VAR 0 17
7640: PUSH
7641: LD_VAR 0 17
7645: PUSH
7646: LD_VAR 0 13
7650: DIFF
7651: ST_TO_ADDR
7652: GO 7618
7654: POP
7655: POP
// for i in medic_list do
7656: LD_ADDR_VAR 0 13
7660: PUSH
7661: LD_VAR 0 17
7665: PUSH
7666: FOR_IN
7667: IFFALSE 7685
// ComMoveToArea ( i , healArea ) ;
7669: LD_VAR 0 13
7673: PPUSH
7674: LD_VAR 0 10
7678: PPUSH
7679: CALL_OW 113
7683: GO 7666
7685: POP
7686: POP
// repeat wait ( 0 0$1 ) ;
7687: LD_INT 35
7689: PPUSH
7690: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7694: LD_ADDR_VAR 0 16
7698: PUSH
7699: LD_INT 22
7701: PUSH
7702: LD_VAR 0 1
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: LD_INT 1
7713: PUSH
7714: LD_INT 3
7716: PUSH
7717: LD_INT 24
7719: PUSH
7720: LD_INT 550
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: LD_INT 24
7733: PUSH
7734: LD_INT 250
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PPUSH
7750: CALL_OW 69
7754: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7755: LD_ADDR_VAR 0 18
7759: PUSH
7760: LD_INT 22
7762: PUSH
7763: LD_VAR 0 1
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 2
7774: PUSH
7775: LD_INT 25
7777: PUSH
7778: LD_INT 1
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 25
7787: PUSH
7788: LD_INT 5
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: LD_INT 25
7797: PUSH
7798: LD_INT 8
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 25
7807: PUSH
7808: LD_INT 9
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: PUSH
7822: LD_INT 24
7824: PUSH
7825: LD_INT 1000
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: LIST
7836: PPUSH
7837: CALL_OW 69
7841: ST_TO_ADDR
// if medicCount > 0 then
7842: LD_VAR 0 7
7846: PUSH
7847: LD_INT 0
7849: GREATER
7850: IFFALSE 7924
// begin if damageUnit_list > 0 then
7852: LD_VAR 0 16
7856: PUSH
7857: LD_INT 0
7859: GREATER
7860: IFFALSE 7924
// begin for i in damageUnit_list do
7862: LD_ADDR_VAR 0 13
7866: PUSH
7867: LD_VAR 0 16
7871: PUSH
7872: FOR_IN
7873: IFFALSE 7922
// begin ComMoveToArea ( i , healArea ) ;
7875: LD_VAR 0 13
7879: PPUSH
7880: LD_VAR 0 10
7884: PPUSH
7885: CALL_OW 113
// for j in medic_list do
7889: LD_ADDR_VAR 0 14
7893: PUSH
7894: LD_VAR 0 17
7898: PUSH
7899: FOR_IN
7900: IFFALSE 7918
// AddComHeal ( j , i ) ;
7902: LD_VAR 0 14
7906: PPUSH
7907: LD_VAR 0 13
7911: PPUSH
7912: CALL_OW 188
7916: GO 7899
7918: POP
7919: POP
// end ;
7920: GO 7872
7922: POP
7923: POP
// end ; end ; for i in soldiersOK_list do
7924: LD_ADDR_VAR 0 13
7928: PUSH
7929: LD_VAR 0 18
7933: PUSH
7934: FOR_IN
7935: IFFALSE 8111
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7937: LD_ADDR_VAR 0 21
7941: PUSH
7942: LD_INT 22
7944: PUSH
7945: LD_VAR 0 11
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PPUSH
7954: CALL_OW 69
7958: PPUSH
7959: LD_VAR 0 13
7963: PPUSH
7964: CALL_OW 74
7968: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7969: LD_ADDR_VAR 0 22
7973: PUSH
7974: LD_INT 22
7976: PUSH
7977: LD_VAR 0 11
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: LD_INT 2
7988: PUSH
7989: LD_INT 59
7991: PUSH
7992: EMPTY
7993: LIST
7994: PUSH
7995: LD_INT 21
7997: PUSH
7998: LD_INT 1
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 21
8007: PUSH
8008: LD_INT 2
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PUSH
8025: EMPTY
8026: LIST
8027: PPUSH
8028: CALL_OW 69
8032: PPUSH
8033: LD_VAR 0 13
8037: PPUSH
8038: CALL_OW 74
8042: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8043: LD_VAR 0 13
8047: PPUSH
8048: LD_VAR 0 21
8052: PPUSH
8053: CALL_OW 296
8057: PUSH
8058: LD_INT 8
8060: PLUS
8061: PUSH
8062: LD_VAR 0 13
8066: PPUSH
8067: LD_VAR 0 22
8071: PPUSH
8072: CALL_OW 296
8076: LESS
8077: IFFALSE 8095
// begin ComAttackUnit ( i , target1 ) ;
8079: LD_VAR 0 13
8083: PPUSH
8084: LD_VAR 0 21
8088: PPUSH
8089: CALL_OW 115
// end else
8093: GO 8109
// begin ComAttackUnit ( i , target2 ) ;
8095: LD_VAR 0 13
8099: PPUSH
8100: LD_VAR 0 22
8104: PPUSH
8105: CALL_OW 115
// end ; end ;
8109: GO 7934
8111: POP
8112: POP
// until soldiersOK_list = [ ] ;
8113: LD_VAR 0 18
8117: PUSH
8118: EMPTY
8119: EQUAL
8120: IFFALSE 7687
// end ;
8122: LD_VAR 0 12
8126: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8127: LD_INT 0
8129: PPUSH
8130: PPUSH
8131: PPUSH
8132: PPUSH
8133: PPUSH
8134: PPUSH
8135: PPUSH
8136: PPUSH
8137: PPUSH
8138: PPUSH
8139: PPUSH
// amChassisTab = [ ] ;
8140: LD_ADDR_VAR 0 19
8144: PUSH
8145: EMPTY
8146: ST_TO_ADDR
// arChassisTab = [ ] ;
8147: LD_ADDR_VAR 0 18
8151: PUSH
8152: EMPTY
8153: ST_TO_ADDR
// ruChassisTab = [ ] ;
8154: LD_ADDR_VAR 0 17
8158: PUSH
8159: EMPTY
8160: ST_TO_ADDR
// for i = 1 to vehCount do
8161: LD_ADDR_VAR 0 13
8165: PUSH
8166: DOUBLE
8167: LD_INT 1
8169: DEC
8170: ST_TO_ADDR
8171: LD_VAR 0 3
8175: PUSH
8176: FOR_TO
8177: IFFALSE 9601
// begin wait ( 0 0$01 ) ;
8179: LD_INT 35
8181: PPUSH
8182: CALL_OW 67
// if nation = 1 then
8186: LD_VAR 0 5
8190: PUSH
8191: LD_INT 1
8193: EQUAL
8194: IFFALSE 8675
// begin uc_side = side ;
8196: LD_ADDR_OWVAR 20
8200: PUSH
8201: LD_VAR 0 2
8205: ST_TO_ADDR
// uc_nation = nation ;
8206: LD_ADDR_OWVAR 21
8210: PUSH
8211: LD_VAR 0 5
8215: ST_TO_ADDR
// vc_engine = vehengine ;
8216: LD_ADDR_OWVAR 39
8220: PUSH
8221: LD_VAR 0 6
8225: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8226: LD_ADDR_OWVAR 40
8230: PUSH
8231: LD_VAR 0 10
8235: PUSH
8236: LD_INT 1
8238: PPUSH
8239: LD_VAR 0 10
8243: PPUSH
8244: CALL_OW 12
8248: ARRAY
8249: ST_TO_ADDR
// for j = 1 to AMWeapon do
8250: LD_ADDR_VAR 0 14
8254: PUSH
8255: DOUBLE
8256: LD_INT 1
8258: DEC
8259: ST_TO_ADDR
8260: LD_VAR 0 10
8264: PUSH
8265: FOR_TO
8266: IFFALSE 8567
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8268: LD_VAR 0 10
8272: PUSH
8273: LD_VAR 0 14
8277: ARRAY
8278: PUSH
8279: LD_INT 2
8281: EQUAL
8282: PUSH
8283: LD_VAR 0 10
8287: PUSH
8288: LD_VAR 0 14
8292: ARRAY
8293: PUSH
8294: LD_INT 3
8296: EQUAL
8297: OR
8298: IFFALSE 8351
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8300: LD_ADDR_VAR 0 19
8304: PUSH
8305: LD_INT 1
8307: PUSH
8308: LD_INT 2
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: LD_INT 4
8316: PUSH
8317: LD_INT 5
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8327: LD_ADDR_OWVAR 37
8331: PUSH
8332: LD_VAR 0 19
8336: PUSH
8337: LD_INT 1
8339: PPUSH
8340: LD_VAR 0 19
8344: PPUSH
8345: CALL_OW 12
8349: ARRAY
8350: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8351: LD_VAR 0 10
8355: PUSH
8356: LD_VAR 0 14
8360: ARRAY
8361: PUSH
8362: LD_INT 4
8364: EQUAL
8365: PUSH
8366: LD_VAR 0 10
8370: PUSH
8371: LD_VAR 0 14
8375: ARRAY
8376: PUSH
8377: LD_INT 5
8379: EQUAL
8380: OR
8381: PUSH
8382: LD_VAR 0 10
8386: PUSH
8387: LD_VAR 0 14
8391: ARRAY
8392: PUSH
8393: LD_INT 9
8395: EQUAL
8396: OR
8397: PUSH
8398: LD_VAR 0 10
8402: PUSH
8403: LD_VAR 0 14
8407: ARRAY
8408: PUSH
8409: LD_INT 11
8411: EQUAL
8412: OR
8413: PUSH
8414: LD_VAR 0 10
8418: PUSH
8419: LD_VAR 0 14
8423: ARRAY
8424: PUSH
8425: LD_INT 7
8427: EQUAL
8428: OR
8429: IFFALSE 8478
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8431: LD_ADDR_VAR 0 19
8435: PUSH
8436: LD_INT 2
8438: PUSH
8439: LD_INT 3
8441: PUSH
8442: LD_INT 4
8444: PUSH
8445: LD_INT 5
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8454: LD_ADDR_OWVAR 37
8458: PUSH
8459: LD_VAR 0 19
8463: PUSH
8464: LD_INT 1
8466: PPUSH
8467: LD_VAR 0 19
8471: PPUSH
8472: CALL_OW 12
8476: ARRAY
8477: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8478: LD_VAR 0 10
8482: PUSH
8483: LD_VAR 0 14
8487: ARRAY
8488: PUSH
8489: LD_INT 8
8491: EQUAL
8492: PUSH
8493: LD_VAR 0 10
8497: PUSH
8498: LD_VAR 0 14
8502: ARRAY
8503: PUSH
8504: LD_INT 6
8506: EQUAL
8507: OR
8508: PUSH
8509: LD_VAR 0 10
8513: PUSH
8514: LD_VAR 0 14
8518: ARRAY
8519: PUSH
8520: LD_INT 10
8522: EQUAL
8523: OR
8524: IFFALSE 8565
// begin amChassisTab = [ 4 , 5 ] ;
8526: LD_ADDR_VAR 0 19
8530: PUSH
8531: LD_INT 4
8533: PUSH
8534: LD_INT 5
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8541: LD_ADDR_OWVAR 37
8545: PUSH
8546: LD_VAR 0 19
8550: PUSH
8551: LD_INT 1
8553: PPUSH
8554: LD_VAR 0 19
8558: PPUSH
8559: CALL_OW 12
8563: ARRAY
8564: ST_TO_ADDR
// end ; end ;
8565: GO 8265
8567: POP
8568: POP
// veh = CreateVehicle ;
8569: LD_ADDR_VAR 0 16
8573: PUSH
8574: CALL_OW 45
8578: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8579: LD_VAR 0 16
8583: PPUSH
8584: LD_VAR 0 1
8588: PPUSH
8589: LD_INT 0
8591: PPUSH
8592: CALL_OW 49
// if vc_control = 1 then
8596: LD_OWVAR 38
8600: PUSH
8601: LD_INT 1
8603: EQUAL
8604: IFFALSE 8661
// begin hc_gallery =  ;
8606: LD_ADDR_OWVAR 33
8610: PUSH
8611: LD_STRING 
8613: ST_TO_ADDR
// hc_name =  ;
8614: LD_ADDR_OWVAR 26
8618: PUSH
8619: LD_STRING 
8621: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8622: LD_INT 0
8624: PPUSH
8625: LD_INT 3
8627: PPUSH
8628: LD_VAR 0 4
8632: PPUSH
8633: CALL_OW 380
// un = CreateHuman ;
8637: LD_ADDR_VAR 0 15
8641: PUSH
8642: CALL_OW 44
8646: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8647: LD_VAR 0 15
8651: PPUSH
8652: LD_VAR 0 16
8656: PPUSH
8657: CALL_OW 52
// end ; i = i + 1 ;
8661: LD_ADDR_VAR 0 13
8665: PUSH
8666: LD_VAR 0 13
8670: PUSH
8671: LD_INT 1
8673: PLUS
8674: ST_TO_ADDR
// end ; if nation = 2 then
8675: LD_VAR 0 5
8679: PUSH
8680: LD_INT 2
8682: EQUAL
8683: IFFALSE 9185
// begin uc_side = side ;
8685: LD_ADDR_OWVAR 20
8689: PUSH
8690: LD_VAR 0 2
8694: ST_TO_ADDR
// uc_nation = nation ;
8695: LD_ADDR_OWVAR 21
8699: PUSH
8700: LD_VAR 0 5
8704: ST_TO_ADDR
// vc_engine = vehengine ;
8705: LD_ADDR_OWVAR 39
8709: PUSH
8710: LD_VAR 0 6
8714: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8715: LD_INT 22
8717: PUSH
8718: LD_VAR 0 2
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 21
8729: PUSH
8730: LD_INT 2
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: LD_INT 33
8739: PUSH
8740: LD_INT 2
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: LD_INT 50
8749: PUSH
8750: EMPTY
8751: LIST
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: PPUSH
8759: CALL_OW 69
8763: PUSH
8764: LD_INT 8
8766: LESSEQUAL
8767: IFFALSE 8795
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8769: LD_ADDR_OWVAR 38
8773: PUSH
8774: LD_VAR 0 7
8778: PUSH
8779: LD_INT 1
8781: PPUSH
8782: LD_VAR 0 7
8786: PPUSH
8787: CALL_OW 12
8791: ARRAY
8792: ST_TO_ADDR
8793: GO 8803
// vc_control = control_apeman ;
8795: LD_ADDR_OWVAR 38
8799: PUSH
8800: LD_INT 5
8802: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8803: LD_ADDR_OWVAR 40
8807: PUSH
8808: LD_VAR 0 9
8812: PUSH
8813: LD_INT 1
8815: PPUSH
8816: LD_VAR 0 9
8820: PPUSH
8821: CALL_OW 12
8825: ARRAY
8826: ST_TO_ADDR
// for j = 1 to ARWeapons do
8827: LD_ADDR_VAR 0 14
8831: PUSH
8832: DOUBLE
8833: LD_INT 1
8835: DEC
8836: ST_TO_ADDR
8837: LD_VAR 0 9
8841: PUSH
8842: FOR_TO
8843: IFFALSE 9077
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8845: LD_VAR 0 9
8849: PUSH
8850: LD_VAR 0 14
8854: ARRAY
8855: PUSH
8856: LD_INT 24
8858: EQUAL
8859: PUSH
8860: LD_VAR 0 9
8864: PUSH
8865: LD_VAR 0 14
8869: ARRAY
8870: PUSH
8871: LD_INT 22
8873: EQUAL
8874: OR
8875: PUSH
8876: LD_VAR 0 9
8880: PUSH
8881: LD_VAR 0 14
8885: ARRAY
8886: PUSH
8887: LD_INT 23
8889: EQUAL
8890: OR
8891: PUSH
8892: LD_VAR 0 9
8896: PUSH
8897: LD_VAR 0 14
8901: ARRAY
8902: PUSH
8903: LD_INT 30
8905: EQUAL
8906: OR
8907: IFFALSE 8956
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8909: LD_ADDR_VAR 0 18
8913: PUSH
8914: LD_INT 11
8916: PUSH
8917: LD_INT 12
8919: PUSH
8920: LD_INT 13
8922: PUSH
8923: LD_INT 14
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8932: LD_ADDR_OWVAR 37
8936: PUSH
8937: LD_VAR 0 18
8941: PUSH
8942: LD_INT 1
8944: PPUSH
8945: LD_VAR 0 18
8949: PPUSH
8950: CALL_OW 12
8954: ARRAY
8955: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8956: LD_VAR 0 9
8960: PUSH
8961: LD_VAR 0 14
8965: ARRAY
8966: PUSH
8967: LD_INT 29
8969: EQUAL
8970: PUSH
8971: LD_VAR 0 9
8975: PUSH
8976: LD_VAR 0 14
8980: ARRAY
8981: PUSH
8982: LD_INT 28
8984: EQUAL
8985: OR
8986: PUSH
8987: LD_VAR 0 9
8991: PUSH
8992: LD_VAR 0 14
8996: ARRAY
8997: PUSH
8998: LD_INT 27
9000: EQUAL
9001: OR
9002: PUSH
9003: LD_VAR 0 9
9007: PUSH
9008: LD_VAR 0 14
9012: ARRAY
9013: PUSH
9014: LD_INT 26
9016: EQUAL
9017: OR
9018: PUSH
9019: LD_VAR 0 9
9023: PUSH
9024: LD_VAR 0 14
9028: ARRAY
9029: PUSH
9030: LD_INT 25
9032: EQUAL
9033: OR
9034: IFFALSE 9075
// begin arChassisTab = [ 13 , 14 ] ;
9036: LD_ADDR_VAR 0 18
9040: PUSH
9041: LD_INT 13
9043: PUSH
9044: LD_INT 14
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9051: LD_ADDR_OWVAR 37
9055: PUSH
9056: LD_VAR 0 18
9060: PUSH
9061: LD_INT 1
9063: PPUSH
9064: LD_VAR 0 18
9068: PPUSH
9069: CALL_OW 12
9073: ARRAY
9074: ST_TO_ADDR
// end ; end ;
9075: GO 8842
9077: POP
9078: POP
// veh = CreateVehicle ;
9079: LD_ADDR_VAR 0 16
9083: PUSH
9084: CALL_OW 45
9088: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9089: LD_VAR 0 16
9093: PPUSH
9094: LD_VAR 0 1
9098: PPUSH
9099: LD_INT 0
9101: PPUSH
9102: CALL_OW 49
// if vc_control = 1 then
9106: LD_OWVAR 38
9110: PUSH
9111: LD_INT 1
9113: EQUAL
9114: IFFALSE 9171
// begin hc_gallery =  ;
9116: LD_ADDR_OWVAR 33
9120: PUSH
9121: LD_STRING 
9123: ST_TO_ADDR
// hc_name =  ;
9124: LD_ADDR_OWVAR 26
9128: PUSH
9129: LD_STRING 
9131: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9132: LD_INT 0
9134: PPUSH
9135: LD_INT 3
9137: PPUSH
9138: LD_VAR 0 4
9142: PPUSH
9143: CALL_OW 380
// un = CreateHuman ;
9147: LD_ADDR_VAR 0 15
9151: PUSH
9152: CALL_OW 44
9156: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9157: LD_VAR 0 15
9161: PPUSH
9162: LD_VAR 0 16
9166: PPUSH
9167: CALL_OW 52
// end ; i = i + 1 ;
9171: LD_ADDR_VAR 0 13
9175: PUSH
9176: LD_VAR 0 13
9180: PUSH
9181: LD_INT 1
9183: PLUS
9184: ST_TO_ADDR
// end ; if nation = 3 then
9185: LD_VAR 0 5
9189: PUSH
9190: LD_INT 3
9192: EQUAL
9193: IFFALSE 9599
// begin uc_side = side ;
9195: LD_ADDR_OWVAR 20
9199: PUSH
9200: LD_VAR 0 2
9204: ST_TO_ADDR
// uc_nation = nation ;
9205: LD_ADDR_OWVAR 21
9209: PUSH
9210: LD_VAR 0 5
9214: ST_TO_ADDR
// vc_engine = vehengine ;
9215: LD_ADDR_OWVAR 39
9219: PUSH
9220: LD_VAR 0 6
9224: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9225: LD_ADDR_OWVAR 38
9229: PUSH
9230: LD_VAR 0 7
9234: PUSH
9235: LD_INT 1
9237: PPUSH
9238: LD_VAR 0 7
9242: PPUSH
9243: CALL_OW 12
9247: ARRAY
9248: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9249: LD_ADDR_OWVAR 40
9253: PUSH
9254: LD_VAR 0 8
9258: PUSH
9259: LD_INT 1
9261: PPUSH
9262: LD_VAR 0 8
9266: PPUSH
9267: CALL_OW 12
9271: ARRAY
9272: ST_TO_ADDR
// for j = 1 to RuWeapons do
9273: LD_ADDR_VAR 0 14
9277: PUSH
9278: DOUBLE
9279: LD_INT 1
9281: DEC
9282: ST_TO_ADDR
9283: LD_VAR 0 8
9287: PUSH
9288: FOR_TO
9289: IFFALSE 9475
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9291: LD_VAR 0 8
9295: PUSH
9296: LD_VAR 0 14
9300: ARRAY
9301: PUSH
9302: LD_INT 42
9304: EQUAL
9305: PUSH
9306: LD_VAR 0 8
9310: PUSH
9311: LD_VAR 0 14
9315: ARRAY
9316: PUSH
9317: LD_INT 43
9319: EQUAL
9320: OR
9321: PUSH
9322: LD_VAR 0 8
9326: PUSH
9327: LD_VAR 0 14
9331: ARRAY
9332: PUSH
9333: LD_INT 44
9335: EQUAL
9336: OR
9337: PUSH
9338: LD_VAR 0 8
9342: PUSH
9343: LD_VAR 0 14
9347: ARRAY
9348: PUSH
9349: LD_INT 45
9351: EQUAL
9352: OR
9353: PUSH
9354: LD_VAR 0 8
9358: PUSH
9359: LD_VAR 0 14
9363: ARRAY
9364: PUSH
9365: LD_INT 49
9367: EQUAL
9368: OR
9369: IFFALSE 9406
// begin ruChassisTab = [ 24 ] ;
9371: LD_ADDR_VAR 0 17
9375: PUSH
9376: LD_INT 24
9378: PUSH
9379: EMPTY
9380: LIST
9381: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9382: LD_ADDR_OWVAR 37
9386: PUSH
9387: LD_VAR 0 17
9391: PUSH
9392: LD_INT 1
9394: PPUSH
9395: LD_VAR 0 17
9399: PPUSH
9400: CALL_OW 12
9404: ARRAY
9405: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9406: LD_VAR 0 8
9410: PUSH
9411: LD_VAR 0 14
9415: ARRAY
9416: PUSH
9417: LD_INT 46
9419: EQUAL
9420: PUSH
9421: LD_VAR 0 8
9425: PUSH
9426: LD_VAR 0 14
9430: ARRAY
9431: PUSH
9432: LD_INT 47
9434: EQUAL
9435: OR
9436: IFFALSE 9473
// begin ruChassisTab = [ 24 ] ;
9438: LD_ADDR_VAR 0 17
9442: PUSH
9443: LD_INT 24
9445: PUSH
9446: EMPTY
9447: LIST
9448: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9449: LD_ADDR_OWVAR 37
9453: PUSH
9454: LD_VAR 0 17
9458: PUSH
9459: LD_INT 1
9461: PPUSH
9462: LD_VAR 0 17
9466: PPUSH
9467: CALL_OW 12
9471: ARRAY
9472: ST_TO_ADDR
// end ; end ;
9473: GO 9288
9475: POP
9476: POP
// veh = CreateVehicle ;
9477: LD_ADDR_VAR 0 16
9481: PUSH
9482: CALL_OW 45
9486: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9487: LD_VAR 0 16
9491: PPUSH
9492: LD_VAR 0 1
9496: PPUSH
9497: LD_INT 0
9499: PPUSH
9500: CALL_OW 49
// if vc_control = 1 then
9504: LD_OWVAR 38
9508: PUSH
9509: LD_INT 1
9511: EQUAL
9512: IFFALSE 9599
// begin if uc_side = 8 then
9514: LD_OWVAR 20
9518: PUSH
9519: LD_INT 8
9521: EQUAL
9522: IFFALSE 9534
// uc_nation = 2 else
9524: LD_ADDR_OWVAR 21
9528: PUSH
9529: LD_INT 2
9531: ST_TO_ADDR
9532: GO 9544
// uc_nation = nation ;
9534: LD_ADDR_OWVAR 21
9538: PUSH
9539: LD_VAR 0 5
9543: ST_TO_ADDR
// hc_gallery =  ;
9544: LD_ADDR_OWVAR 33
9548: PUSH
9549: LD_STRING 
9551: ST_TO_ADDR
// hc_name =  ;
9552: LD_ADDR_OWVAR 26
9556: PUSH
9557: LD_STRING 
9559: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9560: LD_INT 0
9562: PPUSH
9563: LD_INT 3
9565: PPUSH
9566: LD_VAR 0 4
9570: PPUSH
9571: CALL_OW 380
// un = CreateHuman ;
9575: LD_ADDR_VAR 0 15
9579: PUSH
9580: CALL_OW 44
9584: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9585: LD_VAR 0 15
9589: PPUSH
9590: LD_VAR 0 16
9594: PPUSH
9595: CALL_OW 52
// end ; end ; end ;
9599: GO 8176
9601: POP
9602: POP
// repeat wait ( 0 0$1 ) ;
9603: LD_INT 35
9605: PPUSH
9606: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9610: LD_ADDR_VAR 0 20
9614: PUSH
9615: LD_INT 22
9617: PUSH
9618: LD_VAR 0 2
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 21
9629: PUSH
9630: LD_INT 2
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 24
9639: PUSH
9640: LD_INT 250
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: LD_INT 2
9649: PUSH
9650: LD_INT 34
9652: PUSH
9653: LD_INT 25
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 34
9662: PUSH
9663: LD_INT 26
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 34
9672: PUSH
9673: LD_INT 27
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 34
9682: PUSH
9683: LD_INT 28
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 34
9692: PUSH
9693: LD_INT 29
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 34
9702: PUSH
9703: LD_INT 46
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 34
9712: PUSH
9713: LD_INT 44
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: LD_INT 34
9722: PUSH
9723: LD_INT 45
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PUSH
9730: LD_INT 34
9732: PUSH
9733: LD_INT 47
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: PPUSH
9758: CALL_OW 69
9762: ST_TO_ADDR
// if vehicleOK_list > 0 then
9763: LD_VAR 0 20
9767: PUSH
9768: LD_INT 0
9770: GREATER
9771: IFFALSE 9990
// begin for i in vehicleOK_list do
9773: LD_ADDR_VAR 0 13
9777: PUSH
9778: LD_VAR 0 20
9782: PUSH
9783: FOR_IN
9784: IFFALSE 9988
// begin if GetSide ( i ) <> side then
9786: LD_VAR 0 13
9790: PPUSH
9791: CALL_OW 255
9795: PUSH
9796: LD_VAR 0 2
9800: NONEQUAL
9801: IFFALSE 9814
// begin ComStop ( i ) ;
9803: LD_VAR 0 13
9807: PPUSH
9808: CALL_OW 141
// continue ;
9812: GO 9783
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9814: LD_ADDR_VAR 0 21
9818: PUSH
9819: LD_INT 22
9821: PUSH
9822: LD_VAR 0 11
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PPUSH
9831: CALL_OW 69
9835: PPUSH
9836: LD_VAR 0 13
9840: PPUSH
9841: CALL_OW 74
9845: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9846: LD_ADDR_VAR 0 22
9850: PUSH
9851: LD_INT 22
9853: PUSH
9854: LD_VAR 0 11
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 2
9865: PUSH
9866: LD_INT 59
9868: PUSH
9869: EMPTY
9870: LIST
9871: PUSH
9872: LD_INT 21
9874: PUSH
9875: LD_INT 1
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 21
9884: PUSH
9885: LD_INT 2
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: PPUSH
9905: CALL_OW 69
9909: PPUSH
9910: LD_VAR 0 13
9914: PPUSH
9915: CALL_OW 74
9919: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9920: LD_VAR 0 13
9924: PPUSH
9925: LD_VAR 0 21
9929: PPUSH
9930: CALL_OW 296
9934: PUSH
9935: LD_INT 8
9937: PLUS
9938: PUSH
9939: LD_VAR 0 13
9943: PPUSH
9944: LD_VAR 0 22
9948: PPUSH
9949: CALL_OW 296
9953: LESS
9954: IFFALSE 9972
// begin ComAttackUnit ( i , target1 ) ;
9956: LD_VAR 0 13
9960: PPUSH
9961: LD_VAR 0 21
9965: PPUSH
9966: CALL_OW 115
// end else
9970: GO 9986
// begin ComAttackUnit ( i , target2 ) ;
9972: LD_VAR 0 13
9976: PPUSH
9977: LD_VAR 0 22
9981: PPUSH
9982: CALL_OW 115
// end ; end ;
9986: GO 9783
9988: POP
9989: POP
// end ; until vehicleOK_list = 0 ;
9990: LD_VAR 0 20
9994: PUSH
9995: LD_INT 0
9997: EQUAL
9998: IFFALSE 9603
// end ;
10000: LD_VAR 0 12
10004: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
10005: LD_INT 0
10007: PPUSH
10008: PPUSH
10009: PPUSH
10010: PPUSH
10011: PPUSH
10012: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
10013: LD_ADDR_VAR 0 6
10017: PUSH
10018: LD_INT 22
10020: PUSH
10021: LD_VAR 0 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 34
10032: PUSH
10033: LD_INT 29
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PPUSH
10044: CALL_OW 69
10048: ST_TO_ADDR
// if veh_list = 0 then
10049: LD_VAR 0 6
10053: PUSH
10054: LD_INT 0
10056: EQUAL
10057: IFFALSE 10061
// exit ;
10059: GO 10266
// if veh_list > 0 then
10061: LD_VAR 0 6
10065: PUSH
10066: LD_INT 0
10068: GREATER
10069: IFFALSE 10266
// begin for i in veh_List do
10071: LD_ADDR_VAR 0 4
10075: PUSH
10076: LD_VAR 0 6
10080: PUSH
10081: FOR_IN
10082: IFFALSE 10264
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10084: LD_ADDR_VAR 0 7
10088: PUSH
10089: LD_INT 22
10091: PUSH
10092: LD_VAR 0 2
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PUSH
10101: LD_INT 24
10103: PUSH
10104: LD_INT 250
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PUSH
10111: LD_INT 2
10113: PUSH
10114: LD_INT 59
10116: PUSH
10117: EMPTY
10118: LIST
10119: PUSH
10120: LD_INT 21
10122: PUSH
10123: LD_INT 1
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 21
10132: PUSH
10133: LD_INT 2
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: PUSH
10151: EMPTY
10152: LIST
10153: PPUSH
10154: CALL_OW 69
10158: PPUSH
10159: LD_VAR 0 4
10163: PPUSH
10164: CALL_OW 74
10168: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10169: LD_VAR 0 4
10173: PPUSH
10174: LD_VAR 0 7
10178: PPUSH
10179: CALL_OW 115
// if not HasTask ( i ) then
10183: LD_VAR 0 4
10187: PPUSH
10188: CALL_OW 314
10192: NOT
10193: IFFALSE 10262
// begin wait ( 0 0$0.1 ) ;
10195: LD_INT 4
10197: PPUSH
10198: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10202: LD_ADDR_VAR 0 8
10206: PUSH
10207: LD_INT 22
10209: PUSH
10210: LD_VAR 0 2
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 24
10221: PUSH
10222: LD_INT 250
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PPUSH
10233: CALL_OW 69
10237: PPUSH
10238: LD_VAR 0 4
10242: PPUSH
10243: CALL_OW 74
10247: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10248: LD_VAR 0 4
10252: PPUSH
10253: LD_VAR 0 8
10257: PPUSH
10258: CALL_OW 115
// end ; end ;
10262: GO 10081
10264: POP
10265: POP
// end ; end ; end_of_file
10266: LD_VAR 0 3
10270: RET
// every 0 0$1 do
10271: GO 10273
10273: DISABLE
// begin enable ;
10274: ENABLE
// IntBazooka ( 7 , 1 ) ;
10275: LD_INT 7
10277: PPUSH
10278: LD_INT 1
10280: PPUSH
10281: CALL 6711 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10285: LD_INT 8
10287: PPUSH
10288: LD_INT 1
10290: PPUSH
10291: CALL 10005 0 2
// end ;
10295: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10296: LD_INT 22
10298: PUSH
10299: LD_INT 3
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 21
10308: PUSH
10309: LD_INT 2
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PUSH
10316: LD_INT 50
10318: PUSH
10319: EMPTY
10320: LIST
10321: PUSH
10322: LD_INT 2
10324: PUSH
10325: LD_INT 34
10327: PUSH
10328: LD_INT 46
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 34
10337: PUSH
10338: LD_INT 44
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 34
10347: PUSH
10348: LD_INT 45
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 34
10357: PUSH
10358: LD_INT 47
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: PPUSH
10378: CALL_OW 69
10382: PUSH
10383: LD_INT 0
10385: GREATER
10386: PUSH
10387: LD_INT 22
10389: PUSH
10390: LD_INT 3
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 21
10399: PUSH
10400: LD_INT 2
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 50
10409: PUSH
10410: EMPTY
10411: LIST
10412: PUSH
10413: LD_INT 34
10415: PUSH
10416: LD_INT 49
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: PPUSH
10429: CALL_OW 69
10433: PUSH
10434: LD_INT 0
10436: GREATER
10437: AND
10438: IFFALSE 10610
10440: GO 10442
10442: DISABLE
10443: LD_INT 0
10445: PPUSH
10446: PPUSH
// begin enable ;
10447: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10448: LD_ADDR_VAR 0 1
10452: PUSH
10453: LD_INT 22
10455: PUSH
10456: LD_INT 3
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: LD_INT 21
10465: PUSH
10466: LD_INT 2
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: LD_INT 50
10475: PUSH
10476: EMPTY
10477: LIST
10478: PUSH
10479: LD_INT 2
10481: PUSH
10482: LD_INT 34
10484: PUSH
10485: LD_INT 46
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 34
10494: PUSH
10495: LD_INT 44
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 34
10504: PUSH
10505: LD_INT 45
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: LD_INT 34
10514: PUSH
10515: LD_INT 47
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PPUSH
10535: CALL_OW 69
10539: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10540: LD_ADDR_VAR 0 2
10544: PUSH
10545: LD_INT 22
10547: PUSH
10548: LD_INT 3
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 21
10557: PUSH
10558: LD_INT 2
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 50
10567: PUSH
10568: EMPTY
10569: LIST
10570: PUSH
10571: LD_INT 34
10573: PUSH
10574: LD_INT 49
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: PPUSH
10587: CALL_OW 69
10591: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10592: LD_VAR 0 2
10596: PPUSH
10597: LD_VAR 0 1
10601: PUSH
10602: LD_INT 1
10604: ARRAY
10605: PPUSH
10606: CALL_OW 112
// end ; end_of_file
10610: PPOPN 2
10612: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10613: LD_EXP 38
10617: PUSH
10618: LD_INT 1
10620: EQUAL
10621: IFFALSE 11523
10623: GO 10625
10625: DISABLE
10626: LD_INT 0
10628: PPUSH
10629: PPUSH
10630: PPUSH
// begin m1 := false ;
10631: LD_ADDR_VAR 0 1
10635: PUSH
10636: LD_INT 0
10638: ST_TO_ADDR
// m2 := false ;
10639: LD_ADDR_VAR 0 2
10643: PUSH
10644: LD_INT 0
10646: ST_TO_ADDR
// m3 := false ;
10647: LD_ADDR_VAR 0 3
10651: PUSH
10652: LD_INT 0
10654: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10655: LD_EXP 1
10659: PPUSH
10660: LD_STRING D9b-JMM-1
10662: PPUSH
10663: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10667: LD_EXP 15
10671: PPUSH
10672: LD_STRING D9b-Pow-1
10674: PPUSH
10675: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10679: LD_EXP 1
10683: PPUSH
10684: LD_STRING D9b-JMM-2
10686: PPUSH
10687: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10691: LD_EXP 15
10695: PPUSH
10696: LD_STRING D9b-Pow-2
10698: PPUSH
10699: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10703: LD_EXP 1
10707: PPUSH
10708: LD_STRING D9b-JMM-3
10710: PPUSH
10711: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10715: LD_EXP 15
10719: PPUSH
10720: LD_STRING D9b-Pow-3
10722: PPUSH
10723: CALL_OW 94
// if tick <= 60 60$00 then
10727: LD_OWVAR 1
10731: PUSH
10732: LD_INT 126000
10734: LESSEQUAL
10735: IFFALSE 10744
// SetAchievement ( ACH_ASPEED_13 ) ;
10737: LD_STRING ACH_ASPEED_13
10739: PPUSH
10740: CALL_OW 543
// if burlakStatus = 1 then
10744: LD_EXP 28
10748: PUSH
10749: LD_INT 1
10751: EQUAL
10752: IFFALSE 10774
// begin m1 := true ;
10754: LD_ADDR_VAR 0 1
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10762: LD_STRING Burlak
10764: PPUSH
10765: LD_INT 1
10767: PPUSH
10768: CALL_OW 101
// end else
10772: GO 10785
// begin AddMedal ( Burlak , - 1 ) ;
10774: LD_STRING Burlak
10776: PPUSH
10777: LD_INT 1
10779: NEG
10780: PPUSH
10781: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10785: LD_EXP 2
10789: PPUSH
10790: CALL_OW 302
10794: IFFALSE 10816
// begin m2 := true ;
10796: LD_ADDR_VAR 0 2
10800: PUSH
10801: LD_INT 1
10803: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10804: LD_STRING Stevens
10806: PPUSH
10807: LD_INT 1
10809: PPUSH
10810: CALL_OW 101
// end else
10814: GO 10827
// begin AddMedal ( Stevens , - 1 ) ;
10816: LD_STRING Stevens
10818: PPUSH
10819: LD_INT 1
10821: NEG
10822: PPUSH
10823: CALL_OW 101
// end ; if radarOnSpot = 1 then
10827: LD_EXP 30
10831: PUSH
10832: LD_INT 1
10834: EQUAL
10835: IFFALSE 10857
// begin m3 := true ;
10837: LD_ADDR_VAR 0 3
10841: PUSH
10842: LD_INT 1
10844: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10845: LD_STRING Observation
10847: PPUSH
10848: LD_INT 1
10850: PPUSH
10851: CALL_OW 101
// end else
10855: GO 10868
// begin AddMedal ( Observation , - 1 ) ;
10857: LD_STRING Observation
10859: PPUSH
10860: LD_INT 1
10862: NEG
10863: PPUSH
10864: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10868: LD_VAR 0 1
10872: PUSH
10873: LD_VAR 0 2
10877: AND
10878: PUSH
10879: LD_VAR 0 3
10883: AND
10884: PUSH
10885: LD_OWVAR 67
10889: PUSH
10890: LD_INT 3
10892: GREATEREQUAL
10893: AND
10894: IFFALSE 10906
// SetAchievementEX ( ACH_AMER , 13 ) ;
10896: LD_STRING ACH_AMER
10898: PPUSH
10899: LD_INT 13
10901: PPUSH
10902: CALL_OW 564
// GiveMedals ( MAIN ) ;
10906: LD_STRING MAIN
10908: PPUSH
10909: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10913: LD_EXP 28
10917: PPUSH
10918: LD_STRING 13_BurlakStatus_1
10920: PPUSH
10921: CALL_OW 39
// if IsLive ( Stevens ) then
10925: LD_EXP 2
10929: PPUSH
10930: CALL_OW 300
10934: IFFALSE 10948
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10936: LD_INT 1
10938: PPUSH
10939: LD_STRING 13_StevensStatus_1
10941: PPUSH
10942: CALL_OW 39
10946: GO 10958
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10948: LD_INT 0
10950: PPUSH
10951: LD_STRING 13_StevensStatus_1
10953: PPUSH
10954: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10958: LD_INT 22
10960: PUSH
10961: LD_INT 1
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PUSH
10968: LD_INT 21
10970: PUSH
10971: LD_INT 1
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PUSH
10978: LD_INT 2
10980: PUSH
10981: LD_INT 25
10983: PUSH
10984: LD_INT 1
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 25
10993: PUSH
10994: LD_INT 2
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: LD_INT 25
11003: PUSH
11004: LD_INT 3
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: LD_INT 25
11013: PUSH
11014: LD_INT 4
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 25
11023: PUSH
11024: LD_INT 5
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 25
11033: PUSH
11034: LD_INT 8
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: PPUSH
11055: CALL_OW 69
11059: PPUSH
11060: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11064: LD_EXP 1
11068: PPUSH
11069: LD_EXP 34
11073: PUSH
11074: LD_STRING JMM
11076: STR
11077: PPUSH
11078: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11082: LD_EXP 8
11086: PPUSH
11087: LD_EXP 34
11091: PUSH
11092: LD_STRING Brown
11094: STR
11095: PPUSH
11096: CALL 7019 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11100: LD_EXP 4
11104: PPUSH
11105: LD_EXP 34
11109: PUSH
11110: LD_STRING Donaldson
11112: STR
11113: PPUSH
11114: CALL 7019 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11118: LD_EXP 5
11122: PPUSH
11123: LD_EXP 34
11127: PUSH
11128: LD_STRING Bobby
11130: STR
11131: PPUSH
11132: CALL 7019 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11136: LD_EXP 6
11140: PPUSH
11141: LD_EXP 34
11145: PUSH
11146: LD_STRING Cyrus
11148: STR
11149: PPUSH
11150: CALL 7019 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11154: LD_EXP 3
11158: PPUSH
11159: LD_EXP 34
11163: PUSH
11164: LD_STRING Lisa
11166: STR
11167: PPUSH
11168: CALL 7019 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11172: LD_EXP 13
11176: PPUSH
11177: LD_EXP 34
11181: PUSH
11182: LD_STRING Frank
11184: STR
11185: PPUSH
11186: CALL 7019 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11190: LD_EXP 14
11194: PPUSH
11195: LD_EXP 34
11199: PUSH
11200: LD_STRING Kikuchi
11202: STR
11203: PPUSH
11204: CALL 7019 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11208: LD_EXP 10
11212: PPUSH
11213: LD_EXP 34
11217: PUSH
11218: LD_STRING Houten
11220: STR
11221: PPUSH
11222: CALL 7019 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11226: LD_EXP 12
11230: PPUSH
11231: LD_EXP 34
11235: PUSH
11236: LD_STRING Gary
11238: STR
11239: PPUSH
11240: CALL 7019 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11244: LD_EXP 11
11248: PPUSH
11249: LD_EXP 34
11253: PUSH
11254: LD_STRING Cornell
11256: STR
11257: PPUSH
11258: CALL 7019 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11262: LD_EXP 7
11266: PPUSH
11267: LD_EXP 34
11271: PUSH
11272: LD_STRING Denis
11274: STR
11275: PPUSH
11276: CALL 7019 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11280: LD_EXP 9
11284: PPUSH
11285: LD_EXP 34
11289: PUSH
11290: LD_STRING Gladstone
11292: STR
11293: PPUSH
11294: CALL 7019 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11298: LD_EXP 2
11302: PPUSH
11303: LD_EXP 34
11307: PUSH
11308: LD_STRING Stevens
11310: STR
11311: PPUSH
11312: CALL 7019 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11316: LD_INT 50
11318: PUSH
11319: EMPTY
11320: LIST
11321: PUSH
11322: LD_INT 22
11324: PUSH
11325: LD_INT 1
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 21
11334: PUSH
11335: LD_INT 1
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 2
11344: PUSH
11345: LD_INT 25
11347: PUSH
11348: LD_INT 1
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: LD_INT 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 25
11367: PUSH
11368: LD_INT 3
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 25
11377: PUSH
11378: LD_INT 4
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 25
11387: PUSH
11388: LD_INT 5
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 25
11397: PUSH
11398: LD_INT 8
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: PPUSH
11420: CALL_OW 69
11424: PUSH
11425: LD_EXP 1
11429: PUSH
11430: LD_EXP 8
11434: PUSH
11435: LD_EXP 4
11439: PUSH
11440: LD_EXP 5
11444: PUSH
11445: LD_EXP 6
11449: PUSH
11450: LD_EXP 3
11454: PUSH
11455: LD_EXP 13
11459: PUSH
11460: LD_EXP 9
11464: PUSH
11465: LD_EXP 14
11469: PUSH
11470: LD_EXP 7
11474: PUSH
11475: LD_EXP 10
11479: PUSH
11480: LD_EXP 12
11484: PUSH
11485: LD_EXP 11
11489: PUSH
11490: LD_EXP 2
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: DIFF
11511: PPUSH
11512: LD_STRING 13_other_survivors
11514: PPUSH
11515: CALL_OW 38
// YouWin ;
11519: CALL_OW 103
// end ; end_of_file
11523: PPOPN 3
11525: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do var i , tmp , yourSiberite ;
11526: LD_EXP 32
11530: PUSH
11531: LD_INT 2
11533: EQUAL
11534: PUSH
11535: LD_INT 34
11537: PUSH
11538: LD_INT 8
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PPUSH
11545: CALL_OW 69
11549: NOT
11550: AND
11551: IFFALSE 11687
11553: GO 11555
11555: DISABLE
11556: LD_INT 0
11558: PPUSH
11559: PPUSH
11560: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11561: LD_ADDR_VAR 0 2
11565: PUSH
11566: LD_INT 22
11568: PUSH
11569: LD_INT 1
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 21
11578: PUSH
11579: LD_INT 3
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 2
11588: PUSH
11589: LD_INT 30
11591: PUSH
11592: LD_INT 0
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 30
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: LIST
11618: PPUSH
11619: CALL_OW 69
11623: ST_TO_ADDR
// for i in tmp do
11624: LD_ADDR_VAR 0 1
11628: PUSH
11629: LD_VAR 0 2
11633: PUSH
11634: FOR_IN
11635: IFFALSE 11668
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11637: LD_ADDR_VAR 0 3
11641: PUSH
11642: LD_VAR 0 3
11646: PUSH
11647: LD_VAR 0 1
11651: PPUSH
11652: CALL_OW 274
11656: PPUSH
11657: LD_INT 3
11659: PPUSH
11660: CALL_OW 275
11664: PLUS
11665: ST_TO_ADDR
11666: GO 11634
11668: POP
11669: POP
// if yourSiberite < 79 then
11670: LD_VAR 0 3
11674: PUSH
11675: LD_INT 79
11677: LESS
11678: IFFALSE 11687
// YouLost ( siberite ) ;
11680: LD_STRING siberite
11682: PPUSH
11683: CALL_OW 104
// end ; end_of_file
11687: PPOPN 3
11689: END
// every 8 8$0 + 7 7$0 do
11690: GO 11692
11692: DISABLE
// begin enable ;
11693: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11694: LD_INT 8
11696: PPUSH
11697: LD_INT 2
11699: PPUSH
11700: LD_INT 1
11702: PPUSH
11703: LD_INT 3
11705: PPUSH
11706: CALL_OW 12
11710: PPUSH
11711: LD_INT 0
11713: PPUSH
11714: LD_INT 0
11716: PPUSH
11717: LD_INT 2
11719: PUSH
11720: LD_INT 3
11722: PUSH
11723: LD_INT 4
11725: PUSH
11726: LD_INT 5
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: PUSH
11735: LD_OWVAR 67
11739: ARRAY
11740: PPUSH
11741: LD_INT 0
11743: PPUSH
11744: LD_INT 10
11746: PPUSH
11747: LD_INT 8
11749: PUSH
11750: LD_INT 9
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 1
11759: PPUSH
11760: LD_INT 2
11762: PPUSH
11763: CALL_OW 12
11767: ARRAY
11768: PPUSH
11769: LD_INT 12
11771: PPUSH
11772: LD_INT 1
11774: PPUSH
11775: CALL 7059 0 11
// end ;
11779: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11780: GO 11782
11782: DISABLE
11783: LD_INT 0
11785: PPUSH
11786: PPUSH
11787: PPUSH
// begin enable ;
11788: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11789: LD_ADDR_EXP 33
11793: PUSH
11794: LD_EXP 33
11798: PUSH
11799: LD_INT 1
11801: PLUS
11802: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11803: LD_INT 22
11805: PUSH
11806: LD_INT 8
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: PUSH
11813: LD_INT 3
11815: PUSH
11816: LD_INT 58
11818: PUSH
11819: EMPTY
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 34
11828: PUSH
11829: LD_INT 31
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: LIST
11840: PPUSH
11841: CALL_OW 69
11845: PUSH
11846: LD_INT 2
11848: LESS
11849: IFFALSE 12093
// begin uc_side := 8 ;
11851: LD_ADDR_OWVAR 20
11855: PUSH
11856: LD_INT 8
11858: ST_TO_ADDR
// uc_nation := 2 ;
11859: LD_ADDR_OWVAR 21
11863: PUSH
11864: LD_INT 2
11866: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11867: LD_INT 14
11869: PPUSH
11870: LD_INT 3
11872: PPUSH
11873: LD_INT 1
11875: PPUSH
11876: LD_INT 31
11878: PPUSH
11879: LD_INT 100
11881: PPUSH
11882: CALL 36976 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
11886: LD_ADDR_VAR 0 1
11890: PUSH
11891: DOUBLE
11892: LD_INT 22
11894: PUSH
11895: LD_INT 8
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: LD_INT 3
11904: PUSH
11905: LD_INT 58
11907: PUSH
11908: EMPTY
11909: LIST
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 34
11917: PUSH
11918: LD_INT 31
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: PUSH
11935: LD_INT 1
11937: PLUS
11938: DEC
11939: ST_TO_ADDR
11940: LD_INT 2
11942: PUSH
11943: FOR_TO
11944: IFFALSE 12091
// begin veh := CreateVehicle ;
11946: LD_ADDR_VAR 0 2
11950: PUSH
11951: CALL_OW 45
11955: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11956: LD_VAR 0 2
11960: PPUSH
11961: LD_INT 5
11963: PPUSH
11964: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
11968: LD_ADDR_VAR 0 3
11972: PUSH
11973: LD_INT 181
11975: PUSH
11976: LD_INT 105
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 137
11985: PUSH
11986: LD_INT 6
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: LD_VAR 0 1
12001: PUSH
12002: LD_INT 2
12004: MOD
12005: PUSH
12006: LD_INT 1
12008: PLUS
12009: ARRAY
12010: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
12011: LD_VAR 0 2
12015: PPUSH
12016: LD_VAR 0 3
12020: PUSH
12021: LD_INT 1
12023: ARRAY
12024: PPUSH
12025: LD_VAR 0 3
12029: PUSH
12030: LD_INT 2
12032: ARRAY
12033: PPUSH
12034: LD_INT 12
12036: PPUSH
12037: LD_INT 0
12039: PPUSH
12040: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12044: LD_INT 0
12046: PPUSH
12047: LD_INT 7
12049: PUSH
12050: LD_INT 9
12052: PUSH
12053: LD_INT 10
12055: PUSH
12056: LD_INT 10
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: PUSH
12065: LD_OWVAR 67
12069: ARRAY
12070: PPUSH
12071: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12075: CALL_OW 44
12079: PPUSH
12080: LD_VAR 0 2
12084: PPUSH
12085: CALL_OW 52
// end ;
12089: GO 11943
12091: POP
12092: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) , 10 ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
12093: LD_INT 8
12095: PUSH
12096: LD_INT 9
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 1
12105: PPUSH
12106: LD_INT 2
12108: PPUSH
12109: CALL_OW 12
12113: ARRAY
12114: PPUSH
12115: LD_INT 8
12117: PPUSH
12118: LD_INT 4
12120: PPUSH
12121: LD_INT 6
12123: PPUSH
12124: CALL_OW 12
12128: PUSH
12129: LD_INT 6
12131: PPUSH
12132: LD_INT 9
12134: PPUSH
12135: CALL_OW 12
12139: PUSH
12140: LD_INT 7
12142: PPUSH
12143: LD_INT 10
12145: PPUSH
12146: CALL_OW 12
12150: PUSH
12151: LD_INT 10
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: PUSH
12160: LD_OWVAR 67
12164: ARRAY
12165: PPUSH
12166: LD_INT 10
12168: PPUSH
12169: LD_INT 2
12171: PPUSH
12172: LD_INT 3
12174: PPUSH
12175: LD_INT 5
12177: PUSH
12178: LD_INT 2
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PPUSH
12185: EMPTY
12186: PPUSH
12187: LD_INT 25
12189: PUSH
12190: LD_INT 26
12192: PUSH
12193: LD_INT 27
12195: PUSH
12196: LD_INT 28
12198: PUSH
12199: LD_INT 29
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: PPUSH
12209: EMPTY
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL 8127 0 11
// end ;
12218: PPOPN 3
12220: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
12221: LD_EXP 33
12225: PUSH
12226: LD_INT 4
12228: GREATEREQUAL
12229: IFFALSE 12577
12231: GO 12233
12233: DISABLE
12234: LD_INT 0
12236: PPUSH
12237: PPUSH
// begin enable ;
12238: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
12239: LD_ADDR_EXP 33
12243: PUSH
12244: LD_EXP 33
12248: PUSH
12249: LD_INT 1
12251: PLUS
12252: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12253: LD_INT 22
12255: PUSH
12256: LD_INT 8
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 3
12265: PUSH
12266: LD_INT 58
12268: PUSH
12269: EMPTY
12270: LIST
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 34
12278: PUSH
12279: LD_INT 31
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: PPUSH
12291: CALL_OW 69
12295: PUSH
12296: LD_INT 2
12298: LESS
12299: IFFALSE 12488
// begin uc_side := 8 ;
12301: LD_ADDR_OWVAR 20
12305: PUSH
12306: LD_INT 8
12308: ST_TO_ADDR
// uc_nation := 2 ;
12309: LD_ADDR_OWVAR 21
12313: PUSH
12314: LD_INT 2
12316: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12317: LD_INT 14
12319: PPUSH
12320: LD_INT 3
12322: PPUSH
12323: LD_INT 1
12325: PPUSH
12326: LD_INT 31
12328: PPUSH
12329: LD_INT 100
12331: PPUSH
12332: CALL 36976 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12336: LD_ADDR_VAR 0 1
12340: PUSH
12341: DOUBLE
12342: LD_INT 22
12344: PUSH
12345: LD_INT 8
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 3
12354: PUSH
12355: LD_INT 58
12357: PUSH
12358: EMPTY
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 34
12367: PUSH
12368: LD_INT 31
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: PPUSH
12380: CALL_OW 69
12384: PUSH
12385: LD_INT 1
12387: PLUS
12388: DEC
12389: ST_TO_ADDR
12390: LD_INT 2
12392: PUSH
12393: FOR_TO
12394: IFFALSE 12486
// begin veh := CreateVehicle ;
12396: LD_ADDR_VAR 0 2
12400: PUSH
12401: CALL_OW 45
12405: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12406: LD_VAR 0 2
12410: PPUSH
12411: LD_INT 5
12413: PPUSH
12414: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12418: LD_VAR 0 2
12422: PPUSH
12423: LD_INT 181
12425: PPUSH
12426: LD_INT 105
12428: PPUSH
12429: LD_INT 12
12431: PPUSH
12432: LD_INT 0
12434: PPUSH
12435: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12439: LD_INT 0
12441: PPUSH
12442: LD_INT 8
12444: PUSH
12445: LD_INT 9
12447: PUSH
12448: LD_INT 10
12450: PUSH
12451: LD_INT 10
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: PUSH
12460: LD_OWVAR 67
12464: ARRAY
12465: PPUSH
12466: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12470: CALL_OW 44
12474: PPUSH
12475: LD_VAR 0 2
12479: PPUSH
12480: CALL_OW 52
// end ;
12484: GO 12393
12486: POP
12487: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 , 4 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12488: LD_INT 8
12490: PUSH
12491: LD_INT 9
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 1
12500: PPUSH
12501: LD_INT 2
12503: PPUSH
12504: CALL_OW 12
12508: ARRAY
12509: PPUSH
12510: LD_INT 8
12512: PPUSH
12513: LD_INT 1
12515: PUSH
12516: LD_INT 2
12518: PUSH
12519: LD_INT 3
12521: PUSH
12522: LD_INT 4
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: PUSH
12531: LD_OWVAR 67
12535: ARRAY
12536: PPUSH
12537: LD_INT 10
12539: PPUSH
12540: LD_INT 3
12542: PPUSH
12543: LD_INT 3
12545: PPUSH
12546: LD_INT 1
12548: PUSH
12549: LD_INT 1
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PPUSH
12556: LD_INT 47
12558: PUSH
12559: LD_INT 47
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PPUSH
12566: EMPTY
12567: PPUSH
12568: EMPTY
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: CALL 8127 0 11
// end ;
12577: PPOPN 2
12579: END
// every 1 1$0 trigger eventVar2 = 1 do var i , veh ;
12580: LD_EXP 36
12584: PUSH
12585: LD_INT 1
12587: EQUAL
12588: IFFALSE 12933
12590: GO 12592
12592: DISABLE
12593: LD_INT 0
12595: PPUSH
12596: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12597: LD_INT 22
12599: PUSH
12600: LD_INT 8
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 3
12609: PUSH
12610: LD_INT 58
12612: PUSH
12613: EMPTY
12614: LIST
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 34
12622: PUSH
12623: LD_INT 31
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: LIST
12634: PPUSH
12635: CALL_OW 69
12639: PUSH
12640: LD_INT 2
12642: LESS
12643: IFFALSE 12832
// begin uc_side := 8 ;
12645: LD_ADDR_OWVAR 20
12649: PUSH
12650: LD_INT 8
12652: ST_TO_ADDR
// uc_nation := 2 ;
12653: LD_ADDR_OWVAR 21
12657: PUSH
12658: LD_INT 2
12660: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12661: LD_INT 14
12663: PPUSH
12664: LD_INT 3
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: LD_INT 31
12672: PPUSH
12673: LD_INT 100
12675: PPUSH
12676: CALL 36976 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12680: LD_ADDR_VAR 0 1
12684: PUSH
12685: DOUBLE
12686: LD_INT 22
12688: PUSH
12689: LD_INT 8
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 3
12698: PUSH
12699: LD_INT 58
12701: PUSH
12702: EMPTY
12703: LIST
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 34
12711: PUSH
12712: LD_INT 31
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: LIST
12723: PPUSH
12724: CALL_OW 69
12728: PUSH
12729: LD_INT 1
12731: PLUS
12732: DEC
12733: ST_TO_ADDR
12734: LD_INT 2
12736: PUSH
12737: FOR_TO
12738: IFFALSE 12830
// begin veh := CreateVehicle ;
12740: LD_ADDR_VAR 0 2
12744: PUSH
12745: CALL_OW 45
12749: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12750: LD_VAR 0 2
12754: PPUSH
12755: LD_INT 5
12757: PPUSH
12758: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12762: LD_VAR 0 2
12766: PPUSH
12767: LD_INT 181
12769: PPUSH
12770: LD_INT 105
12772: PPUSH
12773: LD_INT 12
12775: PPUSH
12776: LD_INT 0
12778: PPUSH
12779: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
12783: LD_INT 0
12785: PPUSH
12786: LD_INT 8
12788: PUSH
12789: LD_INT 9
12791: PUSH
12792: LD_INT 10
12794: PUSH
12795: LD_INT 10
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: PUSH
12804: LD_OWVAR 67
12808: ARRAY
12809: PPUSH
12810: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12814: CALL_OW 44
12818: PPUSH
12819: LD_VAR 0 2
12823: PPUSH
12824: CALL_OW 52
// end ;
12828: GO 12737
12830: POP
12831: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 , 9 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12832: LD_INT 8
12834: PUSH
12835: LD_INT 9
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 1
12844: PPUSH
12845: LD_INT 2
12847: PPUSH
12848: CALL_OW 12
12852: ARRAY
12853: PPUSH
12854: LD_INT 3
12856: PPUSH
12857: LD_INT 5
12859: PUSH
12860: LD_INT 7
12862: PUSH
12863: LD_INT 8
12865: PUSH
12866: LD_INT 9
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: PUSH
12875: LD_OWVAR 67
12879: ARRAY
12880: PPUSH
12881: LD_INT 10
12883: PPUSH
12884: LD_INT 3
12886: PPUSH
12887: LD_INT 3
12889: PPUSH
12890: LD_INT 3
12892: PUSH
12893: LD_INT 3
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PPUSH
12900: LD_INT 46
12902: PUSH
12903: LD_INT 44
12905: PUSH
12906: LD_INT 45
12908: PUSH
12909: LD_INT 47
12911: PUSH
12912: LD_INT 49
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: PPUSH
12922: EMPTY
12923: PPUSH
12924: EMPTY
12925: PPUSH
12926: LD_INT 1
12928: PPUSH
12929: CALL 8127 0 11
// end ; end_of_file
12933: PPOPN 2
12935: END
// every 1 1$0 do
12936: GO 12938
12938: DISABLE
// begin enable ;
12939: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12940: LD_INT 3
12942: PPUSH
12943: LD_INT 5
12945: PPUSH
12946: CALL_OW 12
12950: PPUSH
12951: LD_INT 13
12953: PPUSH
12954: LD_INT 1
12956: PPUSH
12957: CALL_OW 55
// end ; end_of_file
12961: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12962: LD_INT 0
12964: PPUSH
// ar_miner := 81 ;
12965: LD_ADDR_EXP 50
12969: PUSH
12970: LD_INT 81
12972: ST_TO_ADDR
// ar_crane := 88 ;
12973: LD_ADDR_EXP 49
12977: PUSH
12978: LD_INT 88
12980: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12981: LD_ADDR_EXP 44
12985: PUSH
12986: LD_INT 89
12988: ST_TO_ADDR
// us_hack := 99 ;
12989: LD_ADDR_EXP 45
12993: PUSH
12994: LD_INT 99
12996: ST_TO_ADDR
// us_artillery := 97 ;
12997: LD_ADDR_EXP 46
13001: PUSH
13002: LD_INT 97
13004: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13005: LD_ADDR_EXP 47
13009: PUSH
13010: LD_INT 91
13012: ST_TO_ADDR
// ar_mortar := 92 ;
13013: LD_ADDR_EXP 48
13017: PUSH
13018: LD_INT 92
13020: ST_TO_ADDR
// ru_flamethrower := 93 ;
13021: LD_ADDR_EXP 51
13025: PUSH
13026: LD_INT 93
13028: ST_TO_ADDR
// ru_radar := 98 ;
13029: LD_ADDR_EXP 43
13033: PUSH
13034: LD_INT 98
13036: ST_TO_ADDR
// tech_Artillery := 80 ;
13037: LD_ADDR_EXP 52
13041: PUSH
13042: LD_INT 80
13044: ST_TO_ADDR
// tech_RadMat := 81 ;
13045: LD_ADDR_EXP 53
13049: PUSH
13050: LD_INT 81
13052: ST_TO_ADDR
// tech_BasicTools := 82 ;
13053: LD_ADDR_EXP 54
13057: PUSH
13058: LD_INT 82
13060: ST_TO_ADDR
// tech_Cargo := 83 ;
13061: LD_ADDR_EXP 55
13065: PUSH
13066: LD_INT 83
13068: ST_TO_ADDR
// tech_Track := 84 ;
13069: LD_ADDR_EXP 56
13073: PUSH
13074: LD_INT 84
13076: ST_TO_ADDR
// tech_Crane := 85 ;
13077: LD_ADDR_EXP 57
13081: PUSH
13082: LD_INT 85
13084: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13085: LD_ADDR_EXP 58
13089: PUSH
13090: LD_INT 86
13092: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13093: LD_ADDR_EXP 59
13097: PUSH
13098: LD_INT 87
13100: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
13101: LD_ADDR_EXP 60
13105: PUSH
13106: LD_INT 88
13108: ST_TO_ADDR
// class_mastodont := 31 ;
13109: LD_ADDR_EXP 61
13113: PUSH
13114: LD_INT 31
13116: ST_TO_ADDR
// class_horse := 21 ;
13117: LD_ADDR_EXP 62
13121: PUSH
13122: LD_INT 21
13124: ST_TO_ADDR
// end ;
13125: LD_VAR 0 1
13129: RET
// every 1 do
13130: GO 13132
13132: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
13133: CALL 12962 0 0
13137: END
// every 0 0$1 do
13138: GO 13140
13140: DISABLE
// begin enable ;
13141: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
13142: LD_STRING updateTimer(
13144: PUSH
13145: LD_OWVAR 1
13149: STR
13150: PUSH
13151: LD_STRING );
13153: STR
13154: PPUSH
13155: CALL_OW 559
// end ;
13159: END
// export function SOS_MapStart ( ) ; begin
13160: LD_INT 0
13162: PPUSH
// if streamModeActive then
13163: LD_EXP 63
13167: IFFALSE 13176
// DefineStreamItems ( true ) ;
13169: LD_INT 1
13171: PPUSH
13172: CALL 14826 0 1
// UpdateFactoryWaypoints ( ) ;
13176: CALL 28410 0 0
// end ;
13180: LD_VAR 0 1
13184: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13185: LD_INT 0
13187: PPUSH
// if p2 = 100 then
13188: LD_VAR 0 2
13192: PUSH
13193: LD_INT 100
13195: EQUAL
13196: IFFALSE 14199
// begin if not StreamModeActive then
13198: LD_EXP 63
13202: NOT
13203: IFFALSE 13213
// StreamModeActive := true ;
13205: LD_ADDR_EXP 63
13209: PUSH
13210: LD_INT 1
13212: ST_TO_ADDR
// if p3 = 0 then
13213: LD_VAR 0 3
13217: PUSH
13218: LD_INT 0
13220: EQUAL
13221: IFFALSE 13227
// InitStreamMode ;
13223: CALL 14362 0 0
// if p3 = 1 then
13227: LD_VAR 0 3
13231: PUSH
13232: LD_INT 1
13234: EQUAL
13235: IFFALSE 13245
// sRocket := true ;
13237: LD_ADDR_EXP 68
13241: PUSH
13242: LD_INT 1
13244: ST_TO_ADDR
// if p3 = 2 then
13245: LD_VAR 0 3
13249: PUSH
13250: LD_INT 2
13252: EQUAL
13253: IFFALSE 13263
// sSpeed := true ;
13255: LD_ADDR_EXP 67
13259: PUSH
13260: LD_INT 1
13262: ST_TO_ADDR
// if p3 = 3 then
13263: LD_VAR 0 3
13267: PUSH
13268: LD_INT 3
13270: EQUAL
13271: IFFALSE 13281
// sEngine := true ;
13273: LD_ADDR_EXP 69
13277: PUSH
13278: LD_INT 1
13280: ST_TO_ADDR
// if p3 = 4 then
13281: LD_VAR 0 3
13285: PUSH
13286: LD_INT 4
13288: EQUAL
13289: IFFALSE 13299
// sSpec := true ;
13291: LD_ADDR_EXP 66
13295: PUSH
13296: LD_INT 1
13298: ST_TO_ADDR
// if p3 = 5 then
13299: LD_VAR 0 3
13303: PUSH
13304: LD_INT 5
13306: EQUAL
13307: IFFALSE 13317
// sLevel := true ;
13309: LD_ADDR_EXP 70
13313: PUSH
13314: LD_INT 1
13316: ST_TO_ADDR
// if p3 = 6 then
13317: LD_VAR 0 3
13321: PUSH
13322: LD_INT 6
13324: EQUAL
13325: IFFALSE 13335
// sArmoury := true ;
13327: LD_ADDR_EXP 71
13331: PUSH
13332: LD_INT 1
13334: ST_TO_ADDR
// if p3 = 7 then
13335: LD_VAR 0 3
13339: PUSH
13340: LD_INT 7
13342: EQUAL
13343: IFFALSE 13353
// sRadar := true ;
13345: LD_ADDR_EXP 72
13349: PUSH
13350: LD_INT 1
13352: ST_TO_ADDR
// if p3 = 8 then
13353: LD_VAR 0 3
13357: PUSH
13358: LD_INT 8
13360: EQUAL
13361: IFFALSE 13371
// sBunker := true ;
13363: LD_ADDR_EXP 73
13367: PUSH
13368: LD_INT 1
13370: ST_TO_ADDR
// if p3 = 9 then
13371: LD_VAR 0 3
13375: PUSH
13376: LD_INT 9
13378: EQUAL
13379: IFFALSE 13389
// sHack := true ;
13381: LD_ADDR_EXP 74
13385: PUSH
13386: LD_INT 1
13388: ST_TO_ADDR
// if p3 = 10 then
13389: LD_VAR 0 3
13393: PUSH
13394: LD_INT 10
13396: EQUAL
13397: IFFALSE 13407
// sFire := true ;
13399: LD_ADDR_EXP 75
13403: PUSH
13404: LD_INT 1
13406: ST_TO_ADDR
// if p3 = 11 then
13407: LD_VAR 0 3
13411: PUSH
13412: LD_INT 11
13414: EQUAL
13415: IFFALSE 13425
// sRefresh := true ;
13417: LD_ADDR_EXP 76
13421: PUSH
13422: LD_INT 1
13424: ST_TO_ADDR
// if p3 = 12 then
13425: LD_VAR 0 3
13429: PUSH
13430: LD_INT 12
13432: EQUAL
13433: IFFALSE 13443
// sExp := true ;
13435: LD_ADDR_EXP 77
13439: PUSH
13440: LD_INT 1
13442: ST_TO_ADDR
// if p3 = 13 then
13443: LD_VAR 0 3
13447: PUSH
13448: LD_INT 13
13450: EQUAL
13451: IFFALSE 13461
// sDepot := true ;
13453: LD_ADDR_EXP 78
13457: PUSH
13458: LD_INT 1
13460: ST_TO_ADDR
// if p3 = 14 then
13461: LD_VAR 0 3
13465: PUSH
13466: LD_INT 14
13468: EQUAL
13469: IFFALSE 13479
// sFlag := true ;
13471: LD_ADDR_EXP 79
13475: PUSH
13476: LD_INT 1
13478: ST_TO_ADDR
// if p3 = 15 then
13479: LD_VAR 0 3
13483: PUSH
13484: LD_INT 15
13486: EQUAL
13487: IFFALSE 13497
// sKamikadze := true ;
13489: LD_ADDR_EXP 87
13493: PUSH
13494: LD_INT 1
13496: ST_TO_ADDR
// if p3 = 16 then
13497: LD_VAR 0 3
13501: PUSH
13502: LD_INT 16
13504: EQUAL
13505: IFFALSE 13515
// sTroll := true ;
13507: LD_ADDR_EXP 88
13511: PUSH
13512: LD_INT 1
13514: ST_TO_ADDR
// if p3 = 17 then
13515: LD_VAR 0 3
13519: PUSH
13520: LD_INT 17
13522: EQUAL
13523: IFFALSE 13533
// sSlow := true ;
13525: LD_ADDR_EXP 89
13529: PUSH
13530: LD_INT 1
13532: ST_TO_ADDR
// if p3 = 18 then
13533: LD_VAR 0 3
13537: PUSH
13538: LD_INT 18
13540: EQUAL
13541: IFFALSE 13551
// sLack := true ;
13543: LD_ADDR_EXP 90
13547: PUSH
13548: LD_INT 1
13550: ST_TO_ADDR
// if p3 = 19 then
13551: LD_VAR 0 3
13555: PUSH
13556: LD_INT 19
13558: EQUAL
13559: IFFALSE 13569
// sTank := true ;
13561: LD_ADDR_EXP 92
13565: PUSH
13566: LD_INT 1
13568: ST_TO_ADDR
// if p3 = 20 then
13569: LD_VAR 0 3
13573: PUSH
13574: LD_INT 20
13576: EQUAL
13577: IFFALSE 13587
// sRemote := true ;
13579: LD_ADDR_EXP 93
13583: PUSH
13584: LD_INT 1
13586: ST_TO_ADDR
// if p3 = 21 then
13587: LD_VAR 0 3
13591: PUSH
13592: LD_INT 21
13594: EQUAL
13595: IFFALSE 13605
// sPowell := true ;
13597: LD_ADDR_EXP 94
13601: PUSH
13602: LD_INT 1
13604: ST_TO_ADDR
// if p3 = 22 then
13605: LD_VAR 0 3
13609: PUSH
13610: LD_INT 22
13612: EQUAL
13613: IFFALSE 13623
// sTeleport := true ;
13615: LD_ADDR_EXP 97
13619: PUSH
13620: LD_INT 1
13622: ST_TO_ADDR
// if p3 = 23 then
13623: LD_VAR 0 3
13627: PUSH
13628: LD_INT 23
13630: EQUAL
13631: IFFALSE 13641
// sOilTower := true ;
13633: LD_ADDR_EXP 99
13637: PUSH
13638: LD_INT 1
13640: ST_TO_ADDR
// if p3 = 24 then
13641: LD_VAR 0 3
13645: PUSH
13646: LD_INT 24
13648: EQUAL
13649: IFFALSE 13659
// sShovel := true ;
13651: LD_ADDR_EXP 100
13655: PUSH
13656: LD_INT 1
13658: ST_TO_ADDR
// if p3 = 25 then
13659: LD_VAR 0 3
13663: PUSH
13664: LD_INT 25
13666: EQUAL
13667: IFFALSE 13677
// sSheik := true ;
13669: LD_ADDR_EXP 101
13673: PUSH
13674: LD_INT 1
13676: ST_TO_ADDR
// if p3 = 26 then
13677: LD_VAR 0 3
13681: PUSH
13682: LD_INT 26
13684: EQUAL
13685: IFFALSE 13695
// sEarthquake := true ;
13687: LD_ADDR_EXP 103
13691: PUSH
13692: LD_INT 1
13694: ST_TO_ADDR
// if p3 = 27 then
13695: LD_VAR 0 3
13699: PUSH
13700: LD_INT 27
13702: EQUAL
13703: IFFALSE 13713
// sAI := true ;
13705: LD_ADDR_EXP 104
13709: PUSH
13710: LD_INT 1
13712: ST_TO_ADDR
// if p3 = 28 then
13713: LD_VAR 0 3
13717: PUSH
13718: LD_INT 28
13720: EQUAL
13721: IFFALSE 13731
// sCargo := true ;
13723: LD_ADDR_EXP 107
13727: PUSH
13728: LD_INT 1
13730: ST_TO_ADDR
// if p3 = 29 then
13731: LD_VAR 0 3
13735: PUSH
13736: LD_INT 29
13738: EQUAL
13739: IFFALSE 13749
// sDLaser := true ;
13741: LD_ADDR_EXP 108
13745: PUSH
13746: LD_INT 1
13748: ST_TO_ADDR
// if p3 = 30 then
13749: LD_VAR 0 3
13753: PUSH
13754: LD_INT 30
13756: EQUAL
13757: IFFALSE 13767
// sExchange := true ;
13759: LD_ADDR_EXP 109
13763: PUSH
13764: LD_INT 1
13766: ST_TO_ADDR
// if p3 = 31 then
13767: LD_VAR 0 3
13771: PUSH
13772: LD_INT 31
13774: EQUAL
13775: IFFALSE 13785
// sFac := true ;
13777: LD_ADDR_EXP 110
13781: PUSH
13782: LD_INT 1
13784: ST_TO_ADDR
// if p3 = 32 then
13785: LD_VAR 0 3
13789: PUSH
13790: LD_INT 32
13792: EQUAL
13793: IFFALSE 13803
// sPower := true ;
13795: LD_ADDR_EXP 111
13799: PUSH
13800: LD_INT 1
13802: ST_TO_ADDR
// if p3 = 33 then
13803: LD_VAR 0 3
13807: PUSH
13808: LD_INT 33
13810: EQUAL
13811: IFFALSE 13821
// sRandom := true ;
13813: LD_ADDR_EXP 112
13817: PUSH
13818: LD_INT 1
13820: ST_TO_ADDR
// if p3 = 34 then
13821: LD_VAR 0 3
13825: PUSH
13826: LD_INT 34
13828: EQUAL
13829: IFFALSE 13839
// sShield := true ;
13831: LD_ADDR_EXP 113
13835: PUSH
13836: LD_INT 1
13838: ST_TO_ADDR
// if p3 = 35 then
13839: LD_VAR 0 3
13843: PUSH
13844: LD_INT 35
13846: EQUAL
13847: IFFALSE 13857
// sTime := true ;
13849: LD_ADDR_EXP 114
13853: PUSH
13854: LD_INT 1
13856: ST_TO_ADDR
// if p3 = 36 then
13857: LD_VAR 0 3
13861: PUSH
13862: LD_INT 36
13864: EQUAL
13865: IFFALSE 13875
// sTools := true ;
13867: LD_ADDR_EXP 115
13871: PUSH
13872: LD_INT 1
13874: ST_TO_ADDR
// if p3 = 101 then
13875: LD_VAR 0 3
13879: PUSH
13880: LD_INT 101
13882: EQUAL
13883: IFFALSE 13893
// sSold := true ;
13885: LD_ADDR_EXP 80
13889: PUSH
13890: LD_INT 1
13892: ST_TO_ADDR
// if p3 = 102 then
13893: LD_VAR 0 3
13897: PUSH
13898: LD_INT 102
13900: EQUAL
13901: IFFALSE 13911
// sDiff := true ;
13903: LD_ADDR_EXP 81
13907: PUSH
13908: LD_INT 1
13910: ST_TO_ADDR
// if p3 = 103 then
13911: LD_VAR 0 3
13915: PUSH
13916: LD_INT 103
13918: EQUAL
13919: IFFALSE 13929
// sFog := true ;
13921: LD_ADDR_EXP 84
13925: PUSH
13926: LD_INT 1
13928: ST_TO_ADDR
// if p3 = 104 then
13929: LD_VAR 0 3
13933: PUSH
13934: LD_INT 104
13936: EQUAL
13937: IFFALSE 13947
// sReset := true ;
13939: LD_ADDR_EXP 85
13943: PUSH
13944: LD_INT 1
13946: ST_TO_ADDR
// if p3 = 105 then
13947: LD_VAR 0 3
13951: PUSH
13952: LD_INT 105
13954: EQUAL
13955: IFFALSE 13965
// sSun := true ;
13957: LD_ADDR_EXP 86
13961: PUSH
13962: LD_INT 1
13964: ST_TO_ADDR
// if p3 = 106 then
13965: LD_VAR 0 3
13969: PUSH
13970: LD_INT 106
13972: EQUAL
13973: IFFALSE 13983
// sTiger := true ;
13975: LD_ADDR_EXP 82
13979: PUSH
13980: LD_INT 1
13982: ST_TO_ADDR
// if p3 = 107 then
13983: LD_VAR 0 3
13987: PUSH
13988: LD_INT 107
13990: EQUAL
13991: IFFALSE 14001
// sBomb := true ;
13993: LD_ADDR_EXP 83
13997: PUSH
13998: LD_INT 1
14000: ST_TO_ADDR
// if p3 = 108 then
14001: LD_VAR 0 3
14005: PUSH
14006: LD_INT 108
14008: EQUAL
14009: IFFALSE 14019
// sWound := true ;
14011: LD_ADDR_EXP 91
14015: PUSH
14016: LD_INT 1
14018: ST_TO_ADDR
// if p3 = 109 then
14019: LD_VAR 0 3
14023: PUSH
14024: LD_INT 109
14026: EQUAL
14027: IFFALSE 14037
// sBetray := true ;
14029: LD_ADDR_EXP 95
14033: PUSH
14034: LD_INT 1
14036: ST_TO_ADDR
// if p3 = 110 then
14037: LD_VAR 0 3
14041: PUSH
14042: LD_INT 110
14044: EQUAL
14045: IFFALSE 14055
// sContamin := true ;
14047: LD_ADDR_EXP 96
14051: PUSH
14052: LD_INT 1
14054: ST_TO_ADDR
// if p3 = 111 then
14055: LD_VAR 0 3
14059: PUSH
14060: LD_INT 111
14062: EQUAL
14063: IFFALSE 14073
// sOil := true ;
14065: LD_ADDR_EXP 98
14069: PUSH
14070: LD_INT 1
14072: ST_TO_ADDR
// if p3 = 112 then
14073: LD_VAR 0 3
14077: PUSH
14078: LD_INT 112
14080: EQUAL
14081: IFFALSE 14091
// sStu := true ;
14083: LD_ADDR_EXP 102
14087: PUSH
14088: LD_INT 1
14090: ST_TO_ADDR
// if p3 = 113 then
14091: LD_VAR 0 3
14095: PUSH
14096: LD_INT 113
14098: EQUAL
14099: IFFALSE 14109
// sBazooka := true ;
14101: LD_ADDR_EXP 105
14105: PUSH
14106: LD_INT 1
14108: ST_TO_ADDR
// if p3 = 114 then
14109: LD_VAR 0 3
14113: PUSH
14114: LD_INT 114
14116: EQUAL
14117: IFFALSE 14127
// sMortar := true ;
14119: LD_ADDR_EXP 106
14123: PUSH
14124: LD_INT 1
14126: ST_TO_ADDR
// if p3 = 115 then
14127: LD_VAR 0 3
14131: PUSH
14132: LD_INT 115
14134: EQUAL
14135: IFFALSE 14145
// sRanger := true ;
14137: LD_ADDR_EXP 116
14141: PUSH
14142: LD_INT 1
14144: ST_TO_ADDR
// if p3 = 116 then
14145: LD_VAR 0 3
14149: PUSH
14150: LD_INT 116
14152: EQUAL
14153: IFFALSE 14163
// sComputer := true ;
14155: LD_ADDR_EXP 117
14159: PUSH
14160: LD_INT 1
14162: ST_TO_ADDR
// if p3 = 117 then
14163: LD_VAR 0 3
14167: PUSH
14168: LD_INT 117
14170: EQUAL
14171: IFFALSE 14181
// s30 := true ;
14173: LD_ADDR_EXP 118
14177: PUSH
14178: LD_INT 1
14180: ST_TO_ADDR
// if p3 = 118 then
14181: LD_VAR 0 3
14185: PUSH
14186: LD_INT 118
14188: EQUAL
14189: IFFALSE 14199
// s60 := true ;
14191: LD_ADDR_EXP 119
14195: PUSH
14196: LD_INT 1
14198: ST_TO_ADDR
// end ; if p2 = 101 then
14199: LD_VAR 0 2
14203: PUSH
14204: LD_INT 101
14206: EQUAL
14207: IFFALSE 14335
// begin case p3 of 1 :
14209: LD_VAR 0 3
14213: PUSH
14214: LD_INT 1
14216: DOUBLE
14217: EQUAL
14218: IFTRUE 14222
14220: GO 14229
14222: POP
// hHackUnlimitedResources ; 2 :
14223: CALL 26433 0 0
14227: GO 14335
14229: LD_INT 2
14231: DOUBLE
14232: EQUAL
14233: IFTRUE 14237
14235: GO 14244
14237: POP
// hHackSetLevel10 ; 3 :
14238: CALL 26566 0 0
14242: GO 14335
14244: LD_INT 3
14246: DOUBLE
14247: EQUAL
14248: IFTRUE 14252
14250: GO 14259
14252: POP
// hHackSetLevel10YourUnits ; 4 :
14253: CALL 26651 0 0
14257: GO 14335
14259: LD_INT 4
14261: DOUBLE
14262: EQUAL
14263: IFTRUE 14267
14265: GO 14274
14267: POP
// hHackInvincible ; 5 :
14268: CALL 27099 0 0
14272: GO 14335
14274: LD_INT 5
14276: DOUBLE
14277: EQUAL
14278: IFTRUE 14282
14280: GO 14289
14282: POP
// hHackInvisible ; 6 :
14283: CALL 27210 0 0
14287: GO 14335
14289: LD_INT 6
14291: DOUBLE
14292: EQUAL
14293: IFTRUE 14297
14295: GO 14304
14297: POP
// hHackChangeYourSide ; 7 :
14298: CALL 27267 0 0
14302: GO 14335
14304: LD_INT 7
14306: DOUBLE
14307: EQUAL
14308: IFTRUE 14312
14310: GO 14319
14312: POP
// hHackChangeUnitSide ; 8 :
14313: CALL 27309 0 0
14317: GO 14335
14319: LD_INT 8
14321: DOUBLE
14322: EQUAL
14323: IFTRUE 14327
14325: GO 14334
14327: POP
// hHackFog ; end ;
14328: CALL 27410 0 0
14332: GO 14335
14334: POP
// end ; end ;
14335: LD_VAR 0 7
14339: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
14340: GO 14342
14342: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
14343: LD_STRING initStreamRollete();
14345: PPUSH
14346: CALL_OW 559
// InitStreamMode ;
14350: CALL 14362 0 0
// DefineStreamItems ( false ) ;
14354: LD_INT 0
14356: PPUSH
14357: CALL 14826 0 1
// end ;
14361: END
// function InitStreamMode ; begin
14362: LD_INT 0
14364: PPUSH
// streamModeActive := false ;
14365: LD_ADDR_EXP 63
14369: PUSH
14370: LD_INT 0
14372: ST_TO_ADDR
// normalCounter := 36 ;
14373: LD_ADDR_EXP 64
14377: PUSH
14378: LD_INT 36
14380: ST_TO_ADDR
// hardcoreCounter := 18 ;
14381: LD_ADDR_EXP 65
14385: PUSH
14386: LD_INT 18
14388: ST_TO_ADDR
// sRocket := false ;
14389: LD_ADDR_EXP 68
14393: PUSH
14394: LD_INT 0
14396: ST_TO_ADDR
// sSpeed := false ;
14397: LD_ADDR_EXP 67
14401: PUSH
14402: LD_INT 0
14404: ST_TO_ADDR
// sEngine := false ;
14405: LD_ADDR_EXP 69
14409: PUSH
14410: LD_INT 0
14412: ST_TO_ADDR
// sSpec := false ;
14413: LD_ADDR_EXP 66
14417: PUSH
14418: LD_INT 0
14420: ST_TO_ADDR
// sLevel := false ;
14421: LD_ADDR_EXP 70
14425: PUSH
14426: LD_INT 0
14428: ST_TO_ADDR
// sArmoury := false ;
14429: LD_ADDR_EXP 71
14433: PUSH
14434: LD_INT 0
14436: ST_TO_ADDR
// sRadar := false ;
14437: LD_ADDR_EXP 72
14441: PUSH
14442: LD_INT 0
14444: ST_TO_ADDR
// sBunker := false ;
14445: LD_ADDR_EXP 73
14449: PUSH
14450: LD_INT 0
14452: ST_TO_ADDR
// sHack := false ;
14453: LD_ADDR_EXP 74
14457: PUSH
14458: LD_INT 0
14460: ST_TO_ADDR
// sFire := false ;
14461: LD_ADDR_EXP 75
14465: PUSH
14466: LD_INT 0
14468: ST_TO_ADDR
// sRefresh := false ;
14469: LD_ADDR_EXP 76
14473: PUSH
14474: LD_INT 0
14476: ST_TO_ADDR
// sExp := false ;
14477: LD_ADDR_EXP 77
14481: PUSH
14482: LD_INT 0
14484: ST_TO_ADDR
// sDepot := false ;
14485: LD_ADDR_EXP 78
14489: PUSH
14490: LD_INT 0
14492: ST_TO_ADDR
// sFlag := false ;
14493: LD_ADDR_EXP 79
14497: PUSH
14498: LD_INT 0
14500: ST_TO_ADDR
// sKamikadze := false ;
14501: LD_ADDR_EXP 87
14505: PUSH
14506: LD_INT 0
14508: ST_TO_ADDR
// sTroll := false ;
14509: LD_ADDR_EXP 88
14513: PUSH
14514: LD_INT 0
14516: ST_TO_ADDR
// sSlow := false ;
14517: LD_ADDR_EXP 89
14521: PUSH
14522: LD_INT 0
14524: ST_TO_ADDR
// sLack := false ;
14525: LD_ADDR_EXP 90
14529: PUSH
14530: LD_INT 0
14532: ST_TO_ADDR
// sTank := false ;
14533: LD_ADDR_EXP 92
14537: PUSH
14538: LD_INT 0
14540: ST_TO_ADDR
// sRemote := false ;
14541: LD_ADDR_EXP 93
14545: PUSH
14546: LD_INT 0
14548: ST_TO_ADDR
// sPowell := false ;
14549: LD_ADDR_EXP 94
14553: PUSH
14554: LD_INT 0
14556: ST_TO_ADDR
// sTeleport := false ;
14557: LD_ADDR_EXP 97
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// sOilTower := false ;
14565: LD_ADDR_EXP 99
14569: PUSH
14570: LD_INT 0
14572: ST_TO_ADDR
// sShovel := false ;
14573: LD_ADDR_EXP 100
14577: PUSH
14578: LD_INT 0
14580: ST_TO_ADDR
// sSheik := false ;
14581: LD_ADDR_EXP 101
14585: PUSH
14586: LD_INT 0
14588: ST_TO_ADDR
// sEarthquake := false ;
14589: LD_ADDR_EXP 103
14593: PUSH
14594: LD_INT 0
14596: ST_TO_ADDR
// sAI := false ;
14597: LD_ADDR_EXP 104
14601: PUSH
14602: LD_INT 0
14604: ST_TO_ADDR
// sCargo := false ;
14605: LD_ADDR_EXP 107
14609: PUSH
14610: LD_INT 0
14612: ST_TO_ADDR
// sDLaser := false ;
14613: LD_ADDR_EXP 108
14617: PUSH
14618: LD_INT 0
14620: ST_TO_ADDR
// sExchange := false ;
14621: LD_ADDR_EXP 109
14625: PUSH
14626: LD_INT 0
14628: ST_TO_ADDR
// sFac := false ;
14629: LD_ADDR_EXP 110
14633: PUSH
14634: LD_INT 0
14636: ST_TO_ADDR
// sPower := false ;
14637: LD_ADDR_EXP 111
14641: PUSH
14642: LD_INT 0
14644: ST_TO_ADDR
// sRandom := false ;
14645: LD_ADDR_EXP 112
14649: PUSH
14650: LD_INT 0
14652: ST_TO_ADDR
// sShield := false ;
14653: LD_ADDR_EXP 113
14657: PUSH
14658: LD_INT 0
14660: ST_TO_ADDR
// sTime := false ;
14661: LD_ADDR_EXP 114
14665: PUSH
14666: LD_INT 0
14668: ST_TO_ADDR
// sTools := false ;
14669: LD_ADDR_EXP 115
14673: PUSH
14674: LD_INT 0
14676: ST_TO_ADDR
// sSold := false ;
14677: LD_ADDR_EXP 80
14681: PUSH
14682: LD_INT 0
14684: ST_TO_ADDR
// sDiff := false ;
14685: LD_ADDR_EXP 81
14689: PUSH
14690: LD_INT 0
14692: ST_TO_ADDR
// sFog := false ;
14693: LD_ADDR_EXP 84
14697: PUSH
14698: LD_INT 0
14700: ST_TO_ADDR
// sReset := false ;
14701: LD_ADDR_EXP 85
14705: PUSH
14706: LD_INT 0
14708: ST_TO_ADDR
// sSun := false ;
14709: LD_ADDR_EXP 86
14713: PUSH
14714: LD_INT 0
14716: ST_TO_ADDR
// sTiger := false ;
14717: LD_ADDR_EXP 82
14721: PUSH
14722: LD_INT 0
14724: ST_TO_ADDR
// sBomb := false ;
14725: LD_ADDR_EXP 83
14729: PUSH
14730: LD_INT 0
14732: ST_TO_ADDR
// sWound := false ;
14733: LD_ADDR_EXP 91
14737: PUSH
14738: LD_INT 0
14740: ST_TO_ADDR
// sBetray := false ;
14741: LD_ADDR_EXP 95
14745: PUSH
14746: LD_INT 0
14748: ST_TO_ADDR
// sContamin := false ;
14749: LD_ADDR_EXP 96
14753: PUSH
14754: LD_INT 0
14756: ST_TO_ADDR
// sOil := false ;
14757: LD_ADDR_EXP 98
14761: PUSH
14762: LD_INT 0
14764: ST_TO_ADDR
// sStu := false ;
14765: LD_ADDR_EXP 102
14769: PUSH
14770: LD_INT 0
14772: ST_TO_ADDR
// sBazooka := false ;
14773: LD_ADDR_EXP 105
14777: PUSH
14778: LD_INT 0
14780: ST_TO_ADDR
// sMortar := false ;
14781: LD_ADDR_EXP 106
14785: PUSH
14786: LD_INT 0
14788: ST_TO_ADDR
// sRanger := false ;
14789: LD_ADDR_EXP 116
14793: PUSH
14794: LD_INT 0
14796: ST_TO_ADDR
// sComputer := false ;
14797: LD_ADDR_EXP 117
14801: PUSH
14802: LD_INT 0
14804: ST_TO_ADDR
// s30 := false ;
14805: LD_ADDR_EXP 118
14809: PUSH
14810: LD_INT 0
14812: ST_TO_ADDR
// s60 := false ;
14813: LD_ADDR_EXP 119
14817: PUSH
14818: LD_INT 0
14820: ST_TO_ADDR
// end ;
14821: LD_VAR 0 1
14825: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14826: LD_INT 0
14828: PPUSH
14829: PPUSH
14830: PPUSH
14831: PPUSH
14832: PPUSH
14833: PPUSH
14834: PPUSH
// result := [ ] ;
14835: LD_ADDR_VAR 0 2
14839: PUSH
14840: EMPTY
14841: ST_TO_ADDR
// if campaign_id = 1 then
14842: LD_OWVAR 69
14846: PUSH
14847: LD_INT 1
14849: EQUAL
14850: IFFALSE 18016
// begin case mission_number of 1 :
14852: LD_OWVAR 70
14856: PUSH
14857: LD_INT 1
14859: DOUBLE
14860: EQUAL
14861: IFTRUE 14865
14863: GO 14941
14865: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14866: LD_ADDR_VAR 0 2
14870: PUSH
14871: LD_INT 2
14873: PUSH
14874: LD_INT 4
14876: PUSH
14877: LD_INT 11
14879: PUSH
14880: LD_INT 12
14882: PUSH
14883: LD_INT 15
14885: PUSH
14886: LD_INT 16
14888: PUSH
14889: LD_INT 22
14891: PUSH
14892: LD_INT 23
14894: PUSH
14895: LD_INT 26
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 101
14911: PUSH
14912: LD_INT 102
14914: PUSH
14915: LD_INT 106
14917: PUSH
14918: LD_INT 116
14920: PUSH
14921: LD_INT 117
14923: PUSH
14924: LD_INT 118
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: ST_TO_ADDR
14939: GO 18014
14941: LD_INT 2
14943: DOUBLE
14944: EQUAL
14945: IFTRUE 14949
14947: GO 15033
14949: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14950: LD_ADDR_VAR 0 2
14954: PUSH
14955: LD_INT 2
14957: PUSH
14958: LD_INT 4
14960: PUSH
14961: LD_INT 11
14963: PUSH
14964: LD_INT 12
14966: PUSH
14967: LD_INT 15
14969: PUSH
14970: LD_INT 16
14972: PUSH
14973: LD_INT 22
14975: PUSH
14976: LD_INT 23
14978: PUSH
14979: LD_INT 26
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 101
14995: PUSH
14996: LD_INT 102
14998: PUSH
14999: LD_INT 105
15001: PUSH
15002: LD_INT 106
15004: PUSH
15005: LD_INT 108
15007: PUSH
15008: LD_INT 116
15010: PUSH
15011: LD_INT 117
15013: PUSH
15014: LD_INT 118
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: ST_TO_ADDR
15031: GO 18014
15033: LD_INT 3
15035: DOUBLE
15036: EQUAL
15037: IFTRUE 15041
15039: GO 15129
15041: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
15042: LD_ADDR_VAR 0 2
15046: PUSH
15047: LD_INT 2
15049: PUSH
15050: LD_INT 4
15052: PUSH
15053: LD_INT 5
15055: PUSH
15056: LD_INT 11
15058: PUSH
15059: LD_INT 12
15061: PUSH
15062: LD_INT 15
15064: PUSH
15065: LD_INT 16
15067: PUSH
15068: LD_INT 22
15070: PUSH
15071: LD_INT 26
15073: PUSH
15074: LD_INT 36
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 101
15091: PUSH
15092: LD_INT 102
15094: PUSH
15095: LD_INT 105
15097: PUSH
15098: LD_INT 106
15100: PUSH
15101: LD_INT 108
15103: PUSH
15104: LD_INT 116
15106: PUSH
15107: LD_INT 117
15109: PUSH
15110: LD_INT 118
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: ST_TO_ADDR
15127: GO 18014
15129: LD_INT 4
15131: DOUBLE
15132: EQUAL
15133: IFTRUE 15137
15135: GO 15233
15137: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
15138: LD_ADDR_VAR 0 2
15142: PUSH
15143: LD_INT 2
15145: PUSH
15146: LD_INT 4
15148: PUSH
15149: LD_INT 5
15151: PUSH
15152: LD_INT 8
15154: PUSH
15155: LD_INT 11
15157: PUSH
15158: LD_INT 12
15160: PUSH
15161: LD_INT 15
15163: PUSH
15164: LD_INT 16
15166: PUSH
15167: LD_INT 22
15169: PUSH
15170: LD_INT 23
15172: PUSH
15173: LD_INT 26
15175: PUSH
15176: LD_INT 36
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: PUSH
15193: LD_INT 101
15195: PUSH
15196: LD_INT 102
15198: PUSH
15199: LD_INT 105
15201: PUSH
15202: LD_INT 106
15204: PUSH
15205: LD_INT 108
15207: PUSH
15208: LD_INT 116
15210: PUSH
15211: LD_INT 117
15213: PUSH
15214: LD_INT 118
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: ST_TO_ADDR
15231: GO 18014
15233: LD_INT 5
15235: DOUBLE
15236: EQUAL
15237: IFTRUE 15241
15239: GO 15353
15241: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15242: LD_ADDR_VAR 0 2
15246: PUSH
15247: LD_INT 2
15249: PUSH
15250: LD_INT 4
15252: PUSH
15253: LD_INT 5
15255: PUSH
15256: LD_INT 6
15258: PUSH
15259: LD_INT 8
15261: PUSH
15262: LD_INT 11
15264: PUSH
15265: LD_INT 12
15267: PUSH
15268: LD_INT 15
15270: PUSH
15271: LD_INT 16
15273: PUSH
15274: LD_INT 22
15276: PUSH
15277: LD_INT 23
15279: PUSH
15280: LD_INT 25
15282: PUSH
15283: LD_INT 26
15285: PUSH
15286: LD_INT 36
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 101
15307: PUSH
15308: LD_INT 102
15310: PUSH
15311: LD_INT 105
15313: PUSH
15314: LD_INT 106
15316: PUSH
15317: LD_INT 108
15319: PUSH
15320: LD_INT 109
15322: PUSH
15323: LD_INT 112
15325: PUSH
15326: LD_INT 116
15328: PUSH
15329: LD_INT 117
15331: PUSH
15332: LD_INT 118
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: ST_TO_ADDR
15351: GO 18014
15353: LD_INT 6
15355: DOUBLE
15356: EQUAL
15357: IFTRUE 15361
15359: GO 15493
15361: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15362: LD_ADDR_VAR 0 2
15366: PUSH
15367: LD_INT 2
15369: PUSH
15370: LD_INT 4
15372: PUSH
15373: LD_INT 5
15375: PUSH
15376: LD_INT 6
15378: PUSH
15379: LD_INT 8
15381: PUSH
15382: LD_INT 11
15384: PUSH
15385: LD_INT 12
15387: PUSH
15388: LD_INT 15
15390: PUSH
15391: LD_INT 16
15393: PUSH
15394: LD_INT 20
15396: PUSH
15397: LD_INT 21
15399: PUSH
15400: LD_INT 22
15402: PUSH
15403: LD_INT 23
15405: PUSH
15406: LD_INT 25
15408: PUSH
15409: LD_INT 26
15411: PUSH
15412: LD_INT 30
15414: PUSH
15415: LD_INT 31
15417: PUSH
15418: LD_INT 32
15420: PUSH
15421: LD_INT 36
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: PUSH
15445: LD_INT 101
15447: PUSH
15448: LD_INT 102
15450: PUSH
15451: LD_INT 105
15453: PUSH
15454: LD_INT 106
15456: PUSH
15457: LD_INT 108
15459: PUSH
15460: LD_INT 109
15462: PUSH
15463: LD_INT 112
15465: PUSH
15466: LD_INT 116
15468: PUSH
15469: LD_INT 117
15471: PUSH
15472: LD_INT 118
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: ST_TO_ADDR
15491: GO 18014
15493: LD_INT 7
15495: DOUBLE
15496: EQUAL
15497: IFTRUE 15501
15499: GO 15613
15501: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15502: LD_ADDR_VAR 0 2
15506: PUSH
15507: LD_INT 2
15509: PUSH
15510: LD_INT 4
15512: PUSH
15513: LD_INT 5
15515: PUSH
15516: LD_INT 7
15518: PUSH
15519: LD_INT 11
15521: PUSH
15522: LD_INT 12
15524: PUSH
15525: LD_INT 15
15527: PUSH
15528: LD_INT 16
15530: PUSH
15531: LD_INT 20
15533: PUSH
15534: LD_INT 21
15536: PUSH
15537: LD_INT 22
15539: PUSH
15540: LD_INT 23
15542: PUSH
15543: LD_INT 25
15545: PUSH
15546: LD_INT 26
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 101
15567: PUSH
15568: LD_INT 102
15570: PUSH
15571: LD_INT 103
15573: PUSH
15574: LD_INT 105
15576: PUSH
15577: LD_INT 106
15579: PUSH
15580: LD_INT 108
15582: PUSH
15583: LD_INT 112
15585: PUSH
15586: LD_INT 116
15588: PUSH
15589: LD_INT 117
15591: PUSH
15592: LD_INT 118
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: ST_TO_ADDR
15611: GO 18014
15613: LD_INT 8
15615: DOUBLE
15616: EQUAL
15617: IFTRUE 15621
15619: GO 15761
15621: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15622: LD_ADDR_VAR 0 2
15626: PUSH
15627: LD_INT 2
15629: PUSH
15630: LD_INT 4
15632: PUSH
15633: LD_INT 5
15635: PUSH
15636: LD_INT 6
15638: PUSH
15639: LD_INT 7
15641: PUSH
15642: LD_INT 8
15644: PUSH
15645: LD_INT 11
15647: PUSH
15648: LD_INT 12
15650: PUSH
15651: LD_INT 15
15653: PUSH
15654: LD_INT 16
15656: PUSH
15657: LD_INT 20
15659: PUSH
15660: LD_INT 21
15662: PUSH
15663: LD_INT 22
15665: PUSH
15666: LD_INT 23
15668: PUSH
15669: LD_INT 25
15671: PUSH
15672: LD_INT 26
15674: PUSH
15675: LD_INT 30
15677: PUSH
15678: LD_INT 31
15680: PUSH
15681: LD_INT 32
15683: PUSH
15684: LD_INT 36
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 101
15711: PUSH
15712: LD_INT 102
15714: PUSH
15715: LD_INT 103
15717: PUSH
15718: LD_INT 105
15720: PUSH
15721: LD_INT 106
15723: PUSH
15724: LD_INT 108
15726: PUSH
15727: LD_INT 109
15729: PUSH
15730: LD_INT 112
15732: PUSH
15733: LD_INT 116
15735: PUSH
15736: LD_INT 117
15738: PUSH
15739: LD_INT 118
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: ST_TO_ADDR
15759: GO 18014
15761: LD_INT 9
15763: DOUBLE
15764: EQUAL
15765: IFTRUE 15769
15767: GO 15917
15769: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15770: LD_ADDR_VAR 0 2
15774: PUSH
15775: LD_INT 2
15777: PUSH
15778: LD_INT 4
15780: PUSH
15781: LD_INT 5
15783: PUSH
15784: LD_INT 6
15786: PUSH
15787: LD_INT 7
15789: PUSH
15790: LD_INT 8
15792: PUSH
15793: LD_INT 11
15795: PUSH
15796: LD_INT 12
15798: PUSH
15799: LD_INT 15
15801: PUSH
15802: LD_INT 16
15804: PUSH
15805: LD_INT 20
15807: PUSH
15808: LD_INT 21
15810: PUSH
15811: LD_INT 22
15813: PUSH
15814: LD_INT 23
15816: PUSH
15817: LD_INT 25
15819: PUSH
15820: LD_INT 26
15822: PUSH
15823: LD_INT 28
15825: PUSH
15826: LD_INT 30
15828: PUSH
15829: LD_INT 31
15831: PUSH
15832: LD_INT 32
15834: PUSH
15835: LD_INT 36
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 101
15863: PUSH
15864: LD_INT 102
15866: PUSH
15867: LD_INT 103
15869: PUSH
15870: LD_INT 105
15872: PUSH
15873: LD_INT 106
15875: PUSH
15876: LD_INT 108
15878: PUSH
15879: LD_INT 109
15881: PUSH
15882: LD_INT 112
15884: PUSH
15885: LD_INT 114
15887: PUSH
15888: LD_INT 116
15890: PUSH
15891: LD_INT 117
15893: PUSH
15894: LD_INT 118
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: ST_TO_ADDR
15915: GO 18014
15917: LD_INT 10
15919: DOUBLE
15920: EQUAL
15921: IFTRUE 15925
15923: GO 16121
15925: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15926: LD_ADDR_VAR 0 2
15930: PUSH
15931: LD_INT 2
15933: PUSH
15934: LD_INT 4
15936: PUSH
15937: LD_INT 5
15939: PUSH
15940: LD_INT 6
15942: PUSH
15943: LD_INT 7
15945: PUSH
15946: LD_INT 8
15948: PUSH
15949: LD_INT 9
15951: PUSH
15952: LD_INT 10
15954: PUSH
15955: LD_INT 11
15957: PUSH
15958: LD_INT 12
15960: PUSH
15961: LD_INT 13
15963: PUSH
15964: LD_INT 14
15966: PUSH
15967: LD_INT 15
15969: PUSH
15970: LD_INT 16
15972: PUSH
15973: LD_INT 17
15975: PUSH
15976: LD_INT 18
15978: PUSH
15979: LD_INT 19
15981: PUSH
15982: LD_INT 20
15984: PUSH
15985: LD_INT 21
15987: PUSH
15988: LD_INT 22
15990: PUSH
15991: LD_INT 23
15993: PUSH
15994: LD_INT 24
15996: PUSH
15997: LD_INT 25
15999: PUSH
16000: LD_INT 26
16002: PUSH
16003: LD_INT 28
16005: PUSH
16006: LD_INT 30
16008: PUSH
16009: LD_INT 31
16011: PUSH
16012: LD_INT 32
16014: PUSH
16015: LD_INT 36
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: PUSH
16049: LD_INT 101
16051: PUSH
16052: LD_INT 102
16054: PUSH
16055: LD_INT 103
16057: PUSH
16058: LD_INT 104
16060: PUSH
16061: LD_INT 105
16063: PUSH
16064: LD_INT 106
16066: PUSH
16067: LD_INT 107
16069: PUSH
16070: LD_INT 108
16072: PUSH
16073: LD_INT 109
16075: PUSH
16076: LD_INT 110
16078: PUSH
16079: LD_INT 111
16081: PUSH
16082: LD_INT 112
16084: PUSH
16085: LD_INT 114
16087: PUSH
16088: LD_INT 116
16090: PUSH
16091: LD_INT 117
16093: PUSH
16094: LD_INT 118
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: ST_TO_ADDR
16119: GO 18014
16121: LD_INT 11
16123: DOUBLE
16124: EQUAL
16125: IFTRUE 16129
16127: GO 16333
16129: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
16130: LD_ADDR_VAR 0 2
16134: PUSH
16135: LD_INT 2
16137: PUSH
16138: LD_INT 3
16140: PUSH
16141: LD_INT 4
16143: PUSH
16144: LD_INT 5
16146: PUSH
16147: LD_INT 6
16149: PUSH
16150: LD_INT 7
16152: PUSH
16153: LD_INT 8
16155: PUSH
16156: LD_INT 9
16158: PUSH
16159: LD_INT 10
16161: PUSH
16162: LD_INT 11
16164: PUSH
16165: LD_INT 12
16167: PUSH
16168: LD_INT 13
16170: PUSH
16171: LD_INT 14
16173: PUSH
16174: LD_INT 15
16176: PUSH
16177: LD_INT 16
16179: PUSH
16180: LD_INT 17
16182: PUSH
16183: LD_INT 18
16185: PUSH
16186: LD_INT 19
16188: PUSH
16189: LD_INT 20
16191: PUSH
16192: LD_INT 21
16194: PUSH
16195: LD_INT 22
16197: PUSH
16198: LD_INT 23
16200: PUSH
16201: LD_INT 24
16203: PUSH
16204: LD_INT 25
16206: PUSH
16207: LD_INT 26
16209: PUSH
16210: LD_INT 28
16212: PUSH
16213: LD_INT 30
16215: PUSH
16216: LD_INT 31
16218: PUSH
16219: LD_INT 32
16221: PUSH
16222: LD_INT 34
16224: PUSH
16225: LD_INT 36
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: PUSH
16261: LD_INT 101
16263: PUSH
16264: LD_INT 102
16266: PUSH
16267: LD_INT 103
16269: PUSH
16270: LD_INT 104
16272: PUSH
16273: LD_INT 105
16275: PUSH
16276: LD_INT 106
16278: PUSH
16279: LD_INT 107
16281: PUSH
16282: LD_INT 108
16284: PUSH
16285: LD_INT 109
16287: PUSH
16288: LD_INT 110
16290: PUSH
16291: LD_INT 111
16293: PUSH
16294: LD_INT 112
16296: PUSH
16297: LD_INT 114
16299: PUSH
16300: LD_INT 116
16302: PUSH
16303: LD_INT 117
16305: PUSH
16306: LD_INT 118
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: ST_TO_ADDR
16331: GO 18014
16333: LD_INT 12
16335: DOUBLE
16336: EQUAL
16337: IFTRUE 16341
16339: GO 16561
16341: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16342: LD_ADDR_VAR 0 2
16346: PUSH
16347: LD_INT 1
16349: PUSH
16350: LD_INT 2
16352: PUSH
16353: LD_INT 3
16355: PUSH
16356: LD_INT 4
16358: PUSH
16359: LD_INT 5
16361: PUSH
16362: LD_INT 6
16364: PUSH
16365: LD_INT 7
16367: PUSH
16368: LD_INT 8
16370: PUSH
16371: LD_INT 9
16373: PUSH
16374: LD_INT 10
16376: PUSH
16377: LD_INT 11
16379: PUSH
16380: LD_INT 12
16382: PUSH
16383: LD_INT 13
16385: PUSH
16386: LD_INT 14
16388: PUSH
16389: LD_INT 15
16391: PUSH
16392: LD_INT 16
16394: PUSH
16395: LD_INT 17
16397: PUSH
16398: LD_INT 18
16400: PUSH
16401: LD_INT 19
16403: PUSH
16404: LD_INT 20
16406: PUSH
16407: LD_INT 21
16409: PUSH
16410: LD_INT 22
16412: PUSH
16413: LD_INT 23
16415: PUSH
16416: LD_INT 24
16418: PUSH
16419: LD_INT 25
16421: PUSH
16422: LD_INT 26
16424: PUSH
16425: LD_INT 27
16427: PUSH
16428: LD_INT 28
16430: PUSH
16431: LD_INT 30
16433: PUSH
16434: LD_INT 31
16436: PUSH
16437: LD_INT 32
16439: PUSH
16440: LD_INT 33
16442: PUSH
16443: LD_INT 34
16445: PUSH
16446: LD_INT 36
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 101
16487: PUSH
16488: LD_INT 102
16490: PUSH
16491: LD_INT 103
16493: PUSH
16494: LD_INT 104
16496: PUSH
16497: LD_INT 105
16499: PUSH
16500: LD_INT 106
16502: PUSH
16503: LD_INT 107
16505: PUSH
16506: LD_INT 108
16508: PUSH
16509: LD_INT 109
16511: PUSH
16512: LD_INT 110
16514: PUSH
16515: LD_INT 111
16517: PUSH
16518: LD_INT 112
16520: PUSH
16521: LD_INT 113
16523: PUSH
16524: LD_INT 114
16526: PUSH
16527: LD_INT 116
16529: PUSH
16530: LD_INT 117
16532: PUSH
16533: LD_INT 118
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: ST_TO_ADDR
16559: GO 18014
16561: LD_INT 13
16563: DOUBLE
16564: EQUAL
16565: IFTRUE 16569
16567: GO 16777
16569: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16570: LD_ADDR_VAR 0 2
16574: PUSH
16575: LD_INT 1
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 3
16583: PUSH
16584: LD_INT 4
16586: PUSH
16587: LD_INT 5
16589: PUSH
16590: LD_INT 8
16592: PUSH
16593: LD_INT 9
16595: PUSH
16596: LD_INT 10
16598: PUSH
16599: LD_INT 11
16601: PUSH
16602: LD_INT 12
16604: PUSH
16605: LD_INT 14
16607: PUSH
16608: LD_INT 15
16610: PUSH
16611: LD_INT 16
16613: PUSH
16614: LD_INT 17
16616: PUSH
16617: LD_INT 18
16619: PUSH
16620: LD_INT 19
16622: PUSH
16623: LD_INT 20
16625: PUSH
16626: LD_INT 21
16628: PUSH
16629: LD_INT 22
16631: PUSH
16632: LD_INT 23
16634: PUSH
16635: LD_INT 24
16637: PUSH
16638: LD_INT 25
16640: PUSH
16641: LD_INT 26
16643: PUSH
16644: LD_INT 27
16646: PUSH
16647: LD_INT 28
16649: PUSH
16650: LD_INT 30
16652: PUSH
16653: LD_INT 31
16655: PUSH
16656: LD_INT 32
16658: PUSH
16659: LD_INT 33
16661: PUSH
16662: LD_INT 34
16664: PUSH
16665: LD_INT 36
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 101
16703: PUSH
16704: LD_INT 102
16706: PUSH
16707: LD_INT 103
16709: PUSH
16710: LD_INT 104
16712: PUSH
16713: LD_INT 105
16715: PUSH
16716: LD_INT 106
16718: PUSH
16719: LD_INT 107
16721: PUSH
16722: LD_INT 108
16724: PUSH
16725: LD_INT 109
16727: PUSH
16728: LD_INT 110
16730: PUSH
16731: LD_INT 111
16733: PUSH
16734: LD_INT 112
16736: PUSH
16737: LD_INT 113
16739: PUSH
16740: LD_INT 114
16742: PUSH
16743: LD_INT 116
16745: PUSH
16746: LD_INT 117
16748: PUSH
16749: LD_INT 118
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: ST_TO_ADDR
16775: GO 18014
16777: LD_INT 14
16779: DOUBLE
16780: EQUAL
16781: IFTRUE 16785
16783: GO 17009
16785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16786: LD_ADDR_VAR 0 2
16790: PUSH
16791: LD_INT 1
16793: PUSH
16794: LD_INT 2
16796: PUSH
16797: LD_INT 3
16799: PUSH
16800: LD_INT 4
16802: PUSH
16803: LD_INT 5
16805: PUSH
16806: LD_INT 6
16808: PUSH
16809: LD_INT 7
16811: PUSH
16812: LD_INT 8
16814: PUSH
16815: LD_INT 9
16817: PUSH
16818: LD_INT 10
16820: PUSH
16821: LD_INT 11
16823: PUSH
16824: LD_INT 12
16826: PUSH
16827: LD_INT 13
16829: PUSH
16830: LD_INT 14
16832: PUSH
16833: LD_INT 15
16835: PUSH
16836: LD_INT 16
16838: PUSH
16839: LD_INT 17
16841: PUSH
16842: LD_INT 18
16844: PUSH
16845: LD_INT 19
16847: PUSH
16848: LD_INT 20
16850: PUSH
16851: LD_INT 21
16853: PUSH
16854: LD_INT 22
16856: PUSH
16857: LD_INT 23
16859: PUSH
16860: LD_INT 24
16862: PUSH
16863: LD_INT 25
16865: PUSH
16866: LD_INT 26
16868: PUSH
16869: LD_INT 27
16871: PUSH
16872: LD_INT 28
16874: PUSH
16875: LD_INT 29
16877: PUSH
16878: LD_INT 30
16880: PUSH
16881: LD_INT 31
16883: PUSH
16884: LD_INT 32
16886: PUSH
16887: LD_INT 33
16889: PUSH
16890: LD_INT 34
16892: PUSH
16893: LD_INT 36
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 101
16935: PUSH
16936: LD_INT 102
16938: PUSH
16939: LD_INT 103
16941: PUSH
16942: LD_INT 104
16944: PUSH
16945: LD_INT 105
16947: PUSH
16948: LD_INT 106
16950: PUSH
16951: LD_INT 107
16953: PUSH
16954: LD_INT 108
16956: PUSH
16957: LD_INT 109
16959: PUSH
16960: LD_INT 110
16962: PUSH
16963: LD_INT 111
16965: PUSH
16966: LD_INT 112
16968: PUSH
16969: LD_INT 113
16971: PUSH
16972: LD_INT 114
16974: PUSH
16975: LD_INT 116
16977: PUSH
16978: LD_INT 117
16980: PUSH
16981: LD_INT 118
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: ST_TO_ADDR
17007: GO 18014
17009: LD_INT 15
17011: DOUBLE
17012: EQUAL
17013: IFTRUE 17017
17015: GO 17241
17017: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
17018: LD_ADDR_VAR 0 2
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: LD_INT 2
17028: PUSH
17029: LD_INT 3
17031: PUSH
17032: LD_INT 4
17034: PUSH
17035: LD_INT 5
17037: PUSH
17038: LD_INT 6
17040: PUSH
17041: LD_INT 7
17043: PUSH
17044: LD_INT 8
17046: PUSH
17047: LD_INT 9
17049: PUSH
17050: LD_INT 10
17052: PUSH
17053: LD_INT 11
17055: PUSH
17056: LD_INT 12
17058: PUSH
17059: LD_INT 13
17061: PUSH
17062: LD_INT 14
17064: PUSH
17065: LD_INT 15
17067: PUSH
17068: LD_INT 16
17070: PUSH
17071: LD_INT 17
17073: PUSH
17074: LD_INT 18
17076: PUSH
17077: LD_INT 19
17079: PUSH
17080: LD_INT 20
17082: PUSH
17083: LD_INT 21
17085: PUSH
17086: LD_INT 22
17088: PUSH
17089: LD_INT 23
17091: PUSH
17092: LD_INT 24
17094: PUSH
17095: LD_INT 25
17097: PUSH
17098: LD_INT 26
17100: PUSH
17101: LD_INT 27
17103: PUSH
17104: LD_INT 28
17106: PUSH
17107: LD_INT 29
17109: PUSH
17110: LD_INT 30
17112: PUSH
17113: LD_INT 31
17115: PUSH
17116: LD_INT 32
17118: PUSH
17119: LD_INT 33
17121: PUSH
17122: LD_INT 34
17124: PUSH
17125: LD_INT 36
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 101
17167: PUSH
17168: LD_INT 102
17170: PUSH
17171: LD_INT 103
17173: PUSH
17174: LD_INT 104
17176: PUSH
17177: LD_INT 105
17179: PUSH
17180: LD_INT 106
17182: PUSH
17183: LD_INT 107
17185: PUSH
17186: LD_INT 108
17188: PUSH
17189: LD_INT 109
17191: PUSH
17192: LD_INT 110
17194: PUSH
17195: LD_INT 111
17197: PUSH
17198: LD_INT 112
17200: PUSH
17201: LD_INT 113
17203: PUSH
17204: LD_INT 114
17206: PUSH
17207: LD_INT 116
17209: PUSH
17210: LD_INT 117
17212: PUSH
17213: LD_INT 118
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: ST_TO_ADDR
17239: GO 18014
17241: LD_INT 16
17243: DOUBLE
17244: EQUAL
17245: IFTRUE 17249
17247: GO 17385
17249: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_INT 2
17257: PUSH
17258: LD_INT 4
17260: PUSH
17261: LD_INT 5
17263: PUSH
17264: LD_INT 7
17266: PUSH
17267: LD_INT 11
17269: PUSH
17270: LD_INT 12
17272: PUSH
17273: LD_INT 15
17275: PUSH
17276: LD_INT 16
17278: PUSH
17279: LD_INT 20
17281: PUSH
17282: LD_INT 21
17284: PUSH
17285: LD_INT 22
17287: PUSH
17288: LD_INT 23
17290: PUSH
17291: LD_INT 25
17293: PUSH
17294: LD_INT 26
17296: PUSH
17297: LD_INT 30
17299: PUSH
17300: LD_INT 31
17302: PUSH
17303: LD_INT 32
17305: PUSH
17306: LD_INT 33
17308: PUSH
17309: LD_INT 34
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 101
17335: PUSH
17336: LD_INT 102
17338: PUSH
17339: LD_INT 103
17341: PUSH
17342: LD_INT 106
17344: PUSH
17345: LD_INT 108
17347: PUSH
17348: LD_INT 112
17350: PUSH
17351: LD_INT 113
17353: PUSH
17354: LD_INT 114
17356: PUSH
17357: LD_INT 116
17359: PUSH
17360: LD_INT 117
17362: PUSH
17363: LD_INT 118
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: ST_TO_ADDR
17383: GO 18014
17385: LD_INT 17
17387: DOUBLE
17388: EQUAL
17389: IFTRUE 17393
17391: GO 17617
17393: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17394: LD_ADDR_VAR 0 2
17398: PUSH
17399: LD_INT 1
17401: PUSH
17402: LD_INT 2
17404: PUSH
17405: LD_INT 3
17407: PUSH
17408: LD_INT 4
17410: PUSH
17411: LD_INT 5
17413: PUSH
17414: LD_INT 6
17416: PUSH
17417: LD_INT 7
17419: PUSH
17420: LD_INT 8
17422: PUSH
17423: LD_INT 9
17425: PUSH
17426: LD_INT 10
17428: PUSH
17429: LD_INT 11
17431: PUSH
17432: LD_INT 12
17434: PUSH
17435: LD_INT 13
17437: PUSH
17438: LD_INT 14
17440: PUSH
17441: LD_INT 15
17443: PUSH
17444: LD_INT 16
17446: PUSH
17447: LD_INT 17
17449: PUSH
17450: LD_INT 18
17452: PUSH
17453: LD_INT 19
17455: PUSH
17456: LD_INT 20
17458: PUSH
17459: LD_INT 21
17461: PUSH
17462: LD_INT 22
17464: PUSH
17465: LD_INT 23
17467: PUSH
17468: LD_INT 24
17470: PUSH
17471: LD_INT 25
17473: PUSH
17474: LD_INT 26
17476: PUSH
17477: LD_INT 27
17479: PUSH
17480: LD_INT 28
17482: PUSH
17483: LD_INT 29
17485: PUSH
17486: LD_INT 30
17488: PUSH
17489: LD_INT 31
17491: PUSH
17492: LD_INT 32
17494: PUSH
17495: LD_INT 33
17497: PUSH
17498: LD_INT 34
17500: PUSH
17501: LD_INT 36
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 101
17543: PUSH
17544: LD_INT 102
17546: PUSH
17547: LD_INT 103
17549: PUSH
17550: LD_INT 104
17552: PUSH
17553: LD_INT 105
17555: PUSH
17556: LD_INT 106
17558: PUSH
17559: LD_INT 107
17561: PUSH
17562: LD_INT 108
17564: PUSH
17565: LD_INT 109
17567: PUSH
17568: LD_INT 110
17570: PUSH
17571: LD_INT 111
17573: PUSH
17574: LD_INT 112
17576: PUSH
17577: LD_INT 113
17579: PUSH
17580: LD_INT 114
17582: PUSH
17583: LD_INT 116
17585: PUSH
17586: LD_INT 117
17588: PUSH
17589: LD_INT 118
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: ST_TO_ADDR
17615: GO 18014
17617: LD_INT 18
17619: DOUBLE
17620: EQUAL
17621: IFTRUE 17625
17623: GO 17773
17625: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17626: LD_ADDR_VAR 0 2
17630: PUSH
17631: LD_INT 2
17633: PUSH
17634: LD_INT 4
17636: PUSH
17637: LD_INT 5
17639: PUSH
17640: LD_INT 7
17642: PUSH
17643: LD_INT 11
17645: PUSH
17646: LD_INT 12
17648: PUSH
17649: LD_INT 15
17651: PUSH
17652: LD_INT 16
17654: PUSH
17655: LD_INT 20
17657: PUSH
17658: LD_INT 21
17660: PUSH
17661: LD_INT 22
17663: PUSH
17664: LD_INT 23
17666: PUSH
17667: LD_INT 25
17669: PUSH
17670: LD_INT 26
17672: PUSH
17673: LD_INT 30
17675: PUSH
17676: LD_INT 31
17678: PUSH
17679: LD_INT 32
17681: PUSH
17682: LD_INT 33
17684: PUSH
17685: LD_INT 34
17687: PUSH
17688: LD_INT 35
17690: PUSH
17691: LD_INT 36
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 101
17719: PUSH
17720: LD_INT 102
17722: PUSH
17723: LD_INT 103
17725: PUSH
17726: LD_INT 106
17728: PUSH
17729: LD_INT 108
17731: PUSH
17732: LD_INT 112
17734: PUSH
17735: LD_INT 113
17737: PUSH
17738: LD_INT 114
17740: PUSH
17741: LD_INT 115
17743: PUSH
17744: LD_INT 116
17746: PUSH
17747: LD_INT 117
17749: PUSH
17750: LD_INT 118
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: ST_TO_ADDR
17771: GO 18014
17773: LD_INT 19
17775: DOUBLE
17776: EQUAL
17777: IFTRUE 17781
17779: GO 18013
17781: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17782: LD_ADDR_VAR 0 2
17786: PUSH
17787: LD_INT 1
17789: PUSH
17790: LD_INT 2
17792: PUSH
17793: LD_INT 3
17795: PUSH
17796: LD_INT 4
17798: PUSH
17799: LD_INT 5
17801: PUSH
17802: LD_INT 6
17804: PUSH
17805: LD_INT 7
17807: PUSH
17808: LD_INT 8
17810: PUSH
17811: LD_INT 9
17813: PUSH
17814: LD_INT 10
17816: PUSH
17817: LD_INT 11
17819: PUSH
17820: LD_INT 12
17822: PUSH
17823: LD_INT 13
17825: PUSH
17826: LD_INT 14
17828: PUSH
17829: LD_INT 15
17831: PUSH
17832: LD_INT 16
17834: PUSH
17835: LD_INT 17
17837: PUSH
17838: LD_INT 18
17840: PUSH
17841: LD_INT 19
17843: PUSH
17844: LD_INT 20
17846: PUSH
17847: LD_INT 21
17849: PUSH
17850: LD_INT 22
17852: PUSH
17853: LD_INT 23
17855: PUSH
17856: LD_INT 24
17858: PUSH
17859: LD_INT 25
17861: PUSH
17862: LD_INT 26
17864: PUSH
17865: LD_INT 27
17867: PUSH
17868: LD_INT 28
17870: PUSH
17871: LD_INT 29
17873: PUSH
17874: LD_INT 30
17876: PUSH
17877: LD_INT 31
17879: PUSH
17880: LD_INT 32
17882: PUSH
17883: LD_INT 33
17885: PUSH
17886: LD_INT 34
17888: PUSH
17889: LD_INT 35
17891: PUSH
17892: LD_INT 36
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: PUSH
17933: LD_INT 101
17935: PUSH
17936: LD_INT 102
17938: PUSH
17939: LD_INT 103
17941: PUSH
17942: LD_INT 104
17944: PUSH
17945: LD_INT 105
17947: PUSH
17948: LD_INT 106
17950: PUSH
17951: LD_INT 107
17953: PUSH
17954: LD_INT 108
17956: PUSH
17957: LD_INT 109
17959: PUSH
17960: LD_INT 110
17962: PUSH
17963: LD_INT 111
17965: PUSH
17966: LD_INT 112
17968: PUSH
17969: LD_INT 113
17971: PUSH
17972: LD_INT 114
17974: PUSH
17975: LD_INT 115
17977: PUSH
17978: LD_INT 116
17980: PUSH
17981: LD_INT 117
17983: PUSH
17984: LD_INT 118
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: ST_TO_ADDR
18011: GO 18014
18013: POP
// end else
18014: GO 18245
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
18016: LD_ADDR_VAR 0 2
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: LD_INT 3
18029: PUSH
18030: LD_INT 4
18032: PUSH
18033: LD_INT 5
18035: PUSH
18036: LD_INT 6
18038: PUSH
18039: LD_INT 7
18041: PUSH
18042: LD_INT 8
18044: PUSH
18045: LD_INT 9
18047: PUSH
18048: LD_INT 10
18050: PUSH
18051: LD_INT 11
18053: PUSH
18054: LD_INT 12
18056: PUSH
18057: LD_INT 13
18059: PUSH
18060: LD_INT 14
18062: PUSH
18063: LD_INT 15
18065: PUSH
18066: LD_INT 16
18068: PUSH
18069: LD_INT 17
18071: PUSH
18072: LD_INT 18
18074: PUSH
18075: LD_INT 19
18077: PUSH
18078: LD_INT 20
18080: PUSH
18081: LD_INT 21
18083: PUSH
18084: LD_INT 22
18086: PUSH
18087: LD_INT 23
18089: PUSH
18090: LD_INT 24
18092: PUSH
18093: LD_INT 25
18095: PUSH
18096: LD_INT 26
18098: PUSH
18099: LD_INT 27
18101: PUSH
18102: LD_INT 28
18104: PUSH
18105: LD_INT 29
18107: PUSH
18108: LD_INT 30
18110: PUSH
18111: LD_INT 31
18113: PUSH
18114: LD_INT 32
18116: PUSH
18117: LD_INT 33
18119: PUSH
18120: LD_INT 34
18122: PUSH
18123: LD_INT 35
18125: PUSH
18126: LD_INT 36
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 101
18169: PUSH
18170: LD_INT 102
18172: PUSH
18173: LD_INT 103
18175: PUSH
18176: LD_INT 104
18178: PUSH
18179: LD_INT 105
18181: PUSH
18182: LD_INT 106
18184: PUSH
18185: LD_INT 107
18187: PUSH
18188: LD_INT 108
18190: PUSH
18191: LD_INT 109
18193: PUSH
18194: LD_INT 110
18196: PUSH
18197: LD_INT 111
18199: PUSH
18200: LD_INT 112
18202: PUSH
18203: LD_INT 113
18205: PUSH
18206: LD_INT 114
18208: PUSH
18209: LD_INT 115
18211: PUSH
18212: LD_INT 116
18214: PUSH
18215: LD_INT 117
18217: PUSH
18218: LD_INT 118
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: ST_TO_ADDR
// if result then
18245: LD_VAR 0 2
18249: IFFALSE 19035
// begin normal :=  ;
18251: LD_ADDR_VAR 0 5
18255: PUSH
18256: LD_STRING 
18258: ST_TO_ADDR
// hardcore :=  ;
18259: LD_ADDR_VAR 0 6
18263: PUSH
18264: LD_STRING 
18266: ST_TO_ADDR
// active :=  ;
18267: LD_ADDR_VAR 0 7
18271: PUSH
18272: LD_STRING 
18274: ST_TO_ADDR
// for i = 1 to normalCounter do
18275: LD_ADDR_VAR 0 8
18279: PUSH
18280: DOUBLE
18281: LD_INT 1
18283: DEC
18284: ST_TO_ADDR
18285: LD_EXP 64
18289: PUSH
18290: FOR_TO
18291: IFFALSE 18392
// begin tmp := 0 ;
18293: LD_ADDR_VAR 0 3
18297: PUSH
18298: LD_STRING 0
18300: ST_TO_ADDR
// if result [ 1 ] then
18301: LD_VAR 0 2
18305: PUSH
18306: LD_INT 1
18308: ARRAY
18309: IFFALSE 18374
// if result [ 1 ] [ 1 ] = i then
18311: LD_VAR 0 2
18315: PUSH
18316: LD_INT 1
18318: ARRAY
18319: PUSH
18320: LD_INT 1
18322: ARRAY
18323: PUSH
18324: LD_VAR 0 8
18328: EQUAL
18329: IFFALSE 18374
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18331: LD_ADDR_VAR 0 2
18335: PUSH
18336: LD_VAR 0 2
18340: PPUSH
18341: LD_INT 1
18343: PPUSH
18344: LD_VAR 0 2
18348: PUSH
18349: LD_INT 1
18351: ARRAY
18352: PPUSH
18353: LD_INT 1
18355: PPUSH
18356: CALL_OW 3
18360: PPUSH
18361: CALL_OW 1
18365: ST_TO_ADDR
// tmp := 1 ;
18366: LD_ADDR_VAR 0 3
18370: PUSH
18371: LD_STRING 1
18373: ST_TO_ADDR
// end ; normal := normal & tmp ;
18374: LD_ADDR_VAR 0 5
18378: PUSH
18379: LD_VAR 0 5
18383: PUSH
18384: LD_VAR 0 3
18388: STR
18389: ST_TO_ADDR
// end ;
18390: GO 18290
18392: POP
18393: POP
// for i = 1 to hardcoreCounter do
18394: LD_ADDR_VAR 0 8
18398: PUSH
18399: DOUBLE
18400: LD_INT 1
18402: DEC
18403: ST_TO_ADDR
18404: LD_EXP 65
18408: PUSH
18409: FOR_TO
18410: IFFALSE 18515
// begin tmp := 0 ;
18412: LD_ADDR_VAR 0 3
18416: PUSH
18417: LD_STRING 0
18419: ST_TO_ADDR
// if result [ 2 ] then
18420: LD_VAR 0 2
18424: PUSH
18425: LD_INT 2
18427: ARRAY
18428: IFFALSE 18497
// if result [ 2 ] [ 1 ] = 100 + i then
18430: LD_VAR 0 2
18434: PUSH
18435: LD_INT 2
18437: ARRAY
18438: PUSH
18439: LD_INT 1
18441: ARRAY
18442: PUSH
18443: LD_INT 100
18445: PUSH
18446: LD_VAR 0 8
18450: PLUS
18451: EQUAL
18452: IFFALSE 18497
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18454: LD_ADDR_VAR 0 2
18458: PUSH
18459: LD_VAR 0 2
18463: PPUSH
18464: LD_INT 2
18466: PPUSH
18467: LD_VAR 0 2
18471: PUSH
18472: LD_INT 2
18474: ARRAY
18475: PPUSH
18476: LD_INT 1
18478: PPUSH
18479: CALL_OW 3
18483: PPUSH
18484: CALL_OW 1
18488: ST_TO_ADDR
// tmp := 1 ;
18489: LD_ADDR_VAR 0 3
18493: PUSH
18494: LD_STRING 1
18496: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18497: LD_ADDR_VAR 0 6
18501: PUSH
18502: LD_VAR 0 6
18506: PUSH
18507: LD_VAR 0 3
18511: STR
18512: ST_TO_ADDR
// end ;
18513: GO 18409
18515: POP
18516: POP
// if isGameLoad then
18517: LD_VAR 0 1
18521: IFFALSE 18996
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18523: LD_ADDR_VAR 0 4
18527: PUSH
18528: LD_EXP 68
18532: PUSH
18533: LD_EXP 67
18537: PUSH
18538: LD_EXP 69
18542: PUSH
18543: LD_EXP 66
18547: PUSH
18548: LD_EXP 70
18552: PUSH
18553: LD_EXP 71
18557: PUSH
18558: LD_EXP 72
18562: PUSH
18563: LD_EXP 73
18567: PUSH
18568: LD_EXP 74
18572: PUSH
18573: LD_EXP 75
18577: PUSH
18578: LD_EXP 76
18582: PUSH
18583: LD_EXP 77
18587: PUSH
18588: LD_EXP 78
18592: PUSH
18593: LD_EXP 79
18597: PUSH
18598: LD_EXP 87
18602: PUSH
18603: LD_EXP 88
18607: PUSH
18608: LD_EXP 89
18612: PUSH
18613: LD_EXP 90
18617: PUSH
18618: LD_EXP 92
18622: PUSH
18623: LD_EXP 93
18627: PUSH
18628: LD_EXP 94
18632: PUSH
18633: LD_EXP 97
18637: PUSH
18638: LD_EXP 99
18642: PUSH
18643: LD_EXP 100
18647: PUSH
18648: LD_EXP 101
18652: PUSH
18653: LD_EXP 103
18657: PUSH
18658: LD_EXP 104
18662: PUSH
18663: LD_EXP 107
18667: PUSH
18668: LD_EXP 108
18672: PUSH
18673: LD_EXP 109
18677: PUSH
18678: LD_EXP 110
18682: PUSH
18683: LD_EXP 111
18687: PUSH
18688: LD_EXP 112
18692: PUSH
18693: LD_EXP 113
18697: PUSH
18698: LD_EXP 114
18702: PUSH
18703: LD_EXP 115
18707: PUSH
18708: LD_EXP 80
18712: PUSH
18713: LD_EXP 81
18717: PUSH
18718: LD_EXP 84
18722: PUSH
18723: LD_EXP 85
18727: PUSH
18728: LD_EXP 86
18732: PUSH
18733: LD_EXP 82
18737: PUSH
18738: LD_EXP 83
18742: PUSH
18743: LD_EXP 91
18747: PUSH
18748: LD_EXP 95
18752: PUSH
18753: LD_EXP 96
18757: PUSH
18758: LD_EXP 98
18762: PUSH
18763: LD_EXP 102
18767: PUSH
18768: LD_EXP 105
18772: PUSH
18773: LD_EXP 106
18777: PUSH
18778: LD_EXP 116
18782: PUSH
18783: LD_EXP 117
18787: PUSH
18788: LD_EXP 118
18792: PUSH
18793: LD_EXP 119
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: ST_TO_ADDR
// tmp :=  ;
18854: LD_ADDR_VAR 0 3
18858: PUSH
18859: LD_STRING 
18861: ST_TO_ADDR
// for i = 1 to normalCounter do
18862: LD_ADDR_VAR 0 8
18866: PUSH
18867: DOUBLE
18868: LD_INT 1
18870: DEC
18871: ST_TO_ADDR
18872: LD_EXP 64
18876: PUSH
18877: FOR_TO
18878: IFFALSE 18914
// begin if flags [ i ] then
18880: LD_VAR 0 4
18884: PUSH
18885: LD_VAR 0 8
18889: ARRAY
18890: IFFALSE 18912
// tmp := tmp & i & ; ;
18892: LD_ADDR_VAR 0 3
18896: PUSH
18897: LD_VAR 0 3
18901: PUSH
18902: LD_VAR 0 8
18906: STR
18907: PUSH
18908: LD_STRING ;
18910: STR
18911: ST_TO_ADDR
// end ;
18912: GO 18877
18914: POP
18915: POP
// for i = 1 to hardcoreCounter do
18916: LD_ADDR_VAR 0 8
18920: PUSH
18921: DOUBLE
18922: LD_INT 1
18924: DEC
18925: ST_TO_ADDR
18926: LD_EXP 65
18930: PUSH
18931: FOR_TO
18932: IFFALSE 18978
// begin if flags [ normalCounter + i ] then
18934: LD_VAR 0 4
18938: PUSH
18939: LD_EXP 64
18943: PUSH
18944: LD_VAR 0 8
18948: PLUS
18949: ARRAY
18950: IFFALSE 18976
// tmp := tmp & ( 100 + i ) & ; ;
18952: LD_ADDR_VAR 0 3
18956: PUSH
18957: LD_VAR 0 3
18961: PUSH
18962: LD_INT 100
18964: PUSH
18965: LD_VAR 0 8
18969: PLUS
18970: STR
18971: PUSH
18972: LD_STRING ;
18974: STR
18975: ST_TO_ADDR
// end ;
18976: GO 18931
18978: POP
18979: POP
// if tmp then
18980: LD_VAR 0 3
18984: IFFALSE 18996
// active := tmp ;
18986: LD_ADDR_VAR 0 7
18990: PUSH
18991: LD_VAR 0 3
18995: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18996: LD_STRING getStreamItemsFromMission("
18998: PUSH
18999: LD_VAR 0 5
19003: STR
19004: PUSH
19005: LD_STRING ","
19007: STR
19008: PUSH
19009: LD_VAR 0 6
19013: STR
19014: PUSH
19015: LD_STRING ","
19017: STR
19018: PUSH
19019: LD_VAR 0 7
19023: STR
19024: PUSH
19025: LD_STRING ")
19027: STR
19028: PPUSH
19029: CALL_OW 559
// end else
19033: GO 19042
// ToLua ( getStreamItemsFromMission("","","") ) ;
19035: LD_STRING getStreamItemsFromMission("","","")
19037: PPUSH
19038: CALL_OW 559
// end ;
19042: LD_VAR 0 2
19046: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19047: LD_EXP 63
19051: PUSH
19052: LD_EXP 68
19056: AND
19057: IFFALSE 19181
19059: GO 19061
19061: DISABLE
19062: LD_INT 0
19064: PPUSH
19065: PPUSH
// begin enable ;
19066: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19067: LD_ADDR_VAR 0 2
19071: PUSH
19072: LD_INT 22
19074: PUSH
19075: LD_OWVAR 2
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 2
19086: PUSH
19087: LD_INT 34
19089: PUSH
19090: LD_INT 7
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 34
19099: PUSH
19100: LD_INT 45
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 34
19109: PUSH
19110: LD_INT 28
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 34
19119: PUSH
19120: LD_INT 47
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PPUSH
19138: CALL_OW 69
19142: ST_TO_ADDR
// if not tmp then
19143: LD_VAR 0 2
19147: NOT
19148: IFFALSE 19152
// exit ;
19150: GO 19181
// for i in tmp do
19152: LD_ADDR_VAR 0 1
19156: PUSH
19157: LD_VAR 0 2
19161: PUSH
19162: FOR_IN
19163: IFFALSE 19179
// begin SetLives ( i , 0 ) ;
19165: LD_VAR 0 1
19169: PPUSH
19170: LD_INT 0
19172: PPUSH
19173: CALL_OW 234
// end ;
19177: GO 19162
19179: POP
19180: POP
// end ;
19181: PPOPN 2
19183: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19184: LD_EXP 63
19188: PUSH
19189: LD_EXP 69
19193: AND
19194: IFFALSE 19278
19196: GO 19198
19198: DISABLE
19199: LD_INT 0
19201: PPUSH
19202: PPUSH
// begin enable ;
19203: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19204: LD_ADDR_VAR 0 2
19208: PUSH
19209: LD_INT 22
19211: PUSH
19212: LD_OWVAR 2
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 32
19223: PUSH
19224: LD_INT 3
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PPUSH
19235: CALL_OW 69
19239: ST_TO_ADDR
// if not tmp then
19240: LD_VAR 0 2
19244: NOT
19245: IFFALSE 19249
// exit ;
19247: GO 19278
// for i in tmp do
19249: LD_ADDR_VAR 0 1
19253: PUSH
19254: LD_VAR 0 2
19258: PUSH
19259: FOR_IN
19260: IFFALSE 19276
// begin SetLives ( i , 0 ) ;
19262: LD_VAR 0 1
19266: PPUSH
19267: LD_INT 0
19269: PPUSH
19270: CALL_OW 234
// end ;
19274: GO 19259
19276: POP
19277: POP
// end ;
19278: PPOPN 2
19280: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19281: LD_EXP 63
19285: PUSH
19286: LD_EXP 66
19290: AND
19291: IFFALSE 19384
19293: GO 19295
19295: DISABLE
19296: LD_INT 0
19298: PPUSH
// begin enable ;
19299: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19300: LD_ADDR_VAR 0 1
19304: PUSH
19305: LD_INT 22
19307: PUSH
19308: LD_OWVAR 2
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: LD_INT 25
19322: PUSH
19323: LD_INT 5
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 25
19332: PUSH
19333: LD_INT 9
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 25
19342: PUSH
19343: LD_INT 8
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PPUSH
19360: CALL_OW 69
19364: PUSH
19365: FOR_IN
19366: IFFALSE 19382
// begin SetClass ( i , 1 ) ;
19368: LD_VAR 0 1
19372: PPUSH
19373: LD_INT 1
19375: PPUSH
19376: CALL_OW 336
// end ;
19380: GO 19365
19382: POP
19383: POP
// end ;
19384: PPOPN 1
19386: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19387: LD_EXP 63
19391: PUSH
19392: LD_EXP 67
19396: AND
19397: PUSH
19398: LD_OWVAR 65
19402: PUSH
19403: LD_INT 7
19405: LESS
19406: AND
19407: IFFALSE 19421
19409: GO 19411
19411: DISABLE
// begin enable ;
19412: ENABLE
// game_speed := 7 ;
19413: LD_ADDR_OWVAR 65
19417: PUSH
19418: LD_INT 7
19420: ST_TO_ADDR
// end ;
19421: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19422: LD_EXP 63
19426: PUSH
19427: LD_EXP 70
19431: AND
19432: IFFALSE 19634
19434: GO 19436
19436: DISABLE
19437: LD_INT 0
19439: PPUSH
19440: PPUSH
19441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19442: LD_ADDR_VAR 0 3
19446: PUSH
19447: LD_INT 81
19449: PUSH
19450: LD_OWVAR 2
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 21
19461: PUSH
19462: LD_INT 1
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PPUSH
19473: CALL_OW 69
19477: ST_TO_ADDR
// if not tmp then
19478: LD_VAR 0 3
19482: NOT
19483: IFFALSE 19487
// exit ;
19485: GO 19634
// if tmp > 5 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 5
19494: GREATER
19495: IFFALSE 19507
// k := 5 else
19497: LD_ADDR_VAR 0 2
19501: PUSH
19502: LD_INT 5
19504: ST_TO_ADDR
19505: GO 19517
// k := tmp ;
19507: LD_ADDR_VAR 0 2
19511: PUSH
19512: LD_VAR 0 3
19516: ST_TO_ADDR
// for i := 1 to k do
19517: LD_ADDR_VAR 0 1
19521: PUSH
19522: DOUBLE
19523: LD_INT 1
19525: DEC
19526: ST_TO_ADDR
19527: LD_VAR 0 2
19531: PUSH
19532: FOR_TO
19533: IFFALSE 19632
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19535: LD_VAR 0 3
19539: PUSH
19540: LD_VAR 0 1
19544: ARRAY
19545: PPUSH
19546: LD_VAR 0 1
19550: PUSH
19551: LD_INT 4
19553: MOD
19554: PUSH
19555: LD_INT 1
19557: PLUS
19558: PPUSH
19559: CALL_OW 259
19563: PUSH
19564: LD_INT 10
19566: LESS
19567: IFFALSE 19630
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19569: LD_VAR 0 3
19573: PUSH
19574: LD_VAR 0 1
19578: ARRAY
19579: PPUSH
19580: LD_VAR 0 1
19584: PUSH
19585: LD_INT 4
19587: MOD
19588: PUSH
19589: LD_INT 1
19591: PLUS
19592: PPUSH
19593: LD_VAR 0 3
19597: PUSH
19598: LD_VAR 0 1
19602: ARRAY
19603: PPUSH
19604: LD_VAR 0 1
19608: PUSH
19609: LD_INT 4
19611: MOD
19612: PUSH
19613: LD_INT 1
19615: PLUS
19616: PPUSH
19617: CALL_OW 259
19621: PUSH
19622: LD_INT 1
19624: PLUS
19625: PPUSH
19626: CALL_OW 237
19630: GO 19532
19632: POP
19633: POP
// end ;
19634: PPOPN 3
19636: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19637: LD_EXP 63
19641: PUSH
19642: LD_EXP 71
19646: AND
19647: IFFALSE 19667
19649: GO 19651
19651: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19652: LD_INT 4
19654: PPUSH
19655: LD_OWVAR 2
19659: PPUSH
19660: LD_INT 0
19662: PPUSH
19663: CALL_OW 324
19667: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19668: LD_EXP 63
19672: PUSH
19673: LD_EXP 100
19677: AND
19678: IFFALSE 19698
19680: GO 19682
19682: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19683: LD_INT 19
19685: PPUSH
19686: LD_OWVAR 2
19690: PPUSH
19691: LD_INT 0
19693: PPUSH
19694: CALL_OW 324
19698: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19699: LD_EXP 63
19703: PUSH
19704: LD_EXP 72
19708: AND
19709: IFFALSE 19811
19711: GO 19713
19713: DISABLE
19714: LD_INT 0
19716: PPUSH
19717: PPUSH
// begin enable ;
19718: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19719: LD_ADDR_VAR 0 2
19723: PUSH
19724: LD_INT 22
19726: PUSH
19727: LD_OWVAR 2
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 2
19738: PUSH
19739: LD_INT 34
19741: PUSH
19742: LD_INT 11
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 34
19751: PUSH
19752: LD_INT 30
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: LIST
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PPUSH
19768: CALL_OW 69
19772: ST_TO_ADDR
// if not tmp then
19773: LD_VAR 0 2
19777: NOT
19778: IFFALSE 19782
// exit ;
19780: GO 19811
// for i in tmp do
19782: LD_ADDR_VAR 0 1
19786: PUSH
19787: LD_VAR 0 2
19791: PUSH
19792: FOR_IN
19793: IFFALSE 19809
// begin SetLives ( i , 0 ) ;
19795: LD_VAR 0 1
19799: PPUSH
19800: LD_INT 0
19802: PPUSH
19803: CALL_OW 234
// end ;
19807: GO 19792
19809: POP
19810: POP
// end ;
19811: PPOPN 2
19813: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19814: LD_EXP 63
19818: PUSH
19819: LD_EXP 73
19823: AND
19824: IFFALSE 19844
19826: GO 19828
19828: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19829: LD_INT 32
19831: PPUSH
19832: LD_OWVAR 2
19836: PPUSH
19837: LD_INT 0
19839: PPUSH
19840: CALL_OW 324
19844: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19845: LD_EXP 63
19849: PUSH
19850: LD_EXP 74
19854: AND
19855: IFFALSE 20036
19857: GO 19859
19859: DISABLE
19860: LD_INT 0
19862: PPUSH
19863: PPUSH
19864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19865: LD_ADDR_VAR 0 2
19869: PUSH
19870: LD_INT 22
19872: PUSH
19873: LD_OWVAR 2
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 33
19884: PUSH
19885: LD_INT 3
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PPUSH
19896: CALL_OW 69
19900: ST_TO_ADDR
// if not tmp then
19901: LD_VAR 0 2
19905: NOT
19906: IFFALSE 19910
// exit ;
19908: GO 20036
// side := 0 ;
19910: LD_ADDR_VAR 0 3
19914: PUSH
19915: LD_INT 0
19917: ST_TO_ADDR
// for i := 1 to 8 do
19918: LD_ADDR_VAR 0 1
19922: PUSH
19923: DOUBLE
19924: LD_INT 1
19926: DEC
19927: ST_TO_ADDR
19928: LD_INT 8
19930: PUSH
19931: FOR_TO
19932: IFFALSE 19980
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19934: LD_OWVAR 2
19938: PUSH
19939: LD_VAR 0 1
19943: NONEQUAL
19944: PUSH
19945: LD_OWVAR 2
19949: PPUSH
19950: LD_VAR 0 1
19954: PPUSH
19955: CALL_OW 81
19959: PUSH
19960: LD_INT 2
19962: EQUAL
19963: AND
19964: IFFALSE 19978
// begin side := i ;
19966: LD_ADDR_VAR 0 3
19970: PUSH
19971: LD_VAR 0 1
19975: ST_TO_ADDR
// break ;
19976: GO 19980
// end ;
19978: GO 19931
19980: POP
19981: POP
// if not side then
19982: LD_VAR 0 3
19986: NOT
19987: IFFALSE 19991
// exit ;
19989: GO 20036
// for i := 1 to tmp do
19991: LD_ADDR_VAR 0 1
19995: PUSH
19996: DOUBLE
19997: LD_INT 1
19999: DEC
20000: ST_TO_ADDR
20001: LD_VAR 0 2
20005: PUSH
20006: FOR_TO
20007: IFFALSE 20034
// if Prob ( 60 ) then
20009: LD_INT 60
20011: PPUSH
20012: CALL_OW 13
20016: IFFALSE 20032
// SetSide ( i , side ) ;
20018: LD_VAR 0 1
20022: PPUSH
20023: LD_VAR 0 3
20027: PPUSH
20028: CALL_OW 235
20032: GO 20006
20034: POP
20035: POP
// end ;
20036: PPOPN 3
20038: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20039: LD_EXP 63
20043: PUSH
20044: LD_EXP 76
20048: AND
20049: IFFALSE 20168
20051: GO 20053
20053: DISABLE
20054: LD_INT 0
20056: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20057: LD_ADDR_VAR 0 1
20061: PUSH
20062: LD_INT 22
20064: PUSH
20065: LD_OWVAR 2
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 21
20076: PUSH
20077: LD_INT 1
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 3
20086: PUSH
20087: LD_INT 23
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: PPUSH
20106: CALL_OW 69
20110: PUSH
20111: FOR_IN
20112: IFFALSE 20166
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20114: LD_VAR 0 1
20118: PPUSH
20119: CALL_OW 257
20123: PUSH
20124: LD_INT 1
20126: PUSH
20127: LD_INT 2
20129: PUSH
20130: LD_INT 3
20132: PUSH
20133: LD_INT 4
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: IN
20142: IFFALSE 20164
// SetClass ( un , rand ( 1 , 4 ) ) ;
20144: LD_VAR 0 1
20148: PPUSH
20149: LD_INT 1
20151: PPUSH
20152: LD_INT 4
20154: PPUSH
20155: CALL_OW 12
20159: PPUSH
20160: CALL_OW 336
20164: GO 20111
20166: POP
20167: POP
// end ;
20168: PPOPN 1
20170: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20171: LD_EXP 63
20175: PUSH
20176: LD_EXP 75
20180: AND
20181: IFFALSE 20260
20183: GO 20185
20185: DISABLE
20186: LD_INT 0
20188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20189: LD_ADDR_VAR 0 1
20193: PUSH
20194: LD_INT 22
20196: PUSH
20197: LD_OWVAR 2
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 21
20208: PUSH
20209: LD_INT 3
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PPUSH
20220: CALL_OW 69
20224: ST_TO_ADDR
// if not tmp then
20225: LD_VAR 0 1
20229: NOT
20230: IFFALSE 20234
// exit ;
20232: GO 20260
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20234: LD_VAR 0 1
20238: PUSH
20239: LD_INT 1
20241: PPUSH
20242: LD_VAR 0 1
20246: PPUSH
20247: CALL_OW 12
20251: ARRAY
20252: PPUSH
20253: LD_INT 100
20255: PPUSH
20256: CALL_OW 234
// end ;
20260: PPOPN 1
20262: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20263: LD_EXP 63
20267: PUSH
20268: LD_EXP 77
20272: AND
20273: IFFALSE 20371
20275: GO 20277
20277: DISABLE
20278: LD_INT 0
20280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20281: LD_ADDR_VAR 0 1
20285: PUSH
20286: LD_INT 22
20288: PUSH
20289: LD_OWVAR 2
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 21
20300: PUSH
20301: LD_INT 1
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PPUSH
20312: CALL_OW 69
20316: ST_TO_ADDR
// if not tmp then
20317: LD_VAR 0 1
20321: NOT
20322: IFFALSE 20326
// exit ;
20324: GO 20371
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20326: LD_VAR 0 1
20330: PUSH
20331: LD_INT 1
20333: PPUSH
20334: LD_VAR 0 1
20338: PPUSH
20339: CALL_OW 12
20343: ARRAY
20344: PPUSH
20345: LD_INT 1
20347: PPUSH
20348: LD_INT 4
20350: PPUSH
20351: CALL_OW 12
20355: PPUSH
20356: LD_INT 3000
20358: PPUSH
20359: LD_INT 9000
20361: PPUSH
20362: CALL_OW 12
20366: PPUSH
20367: CALL_OW 492
// end ;
20371: PPOPN 1
20373: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20374: LD_EXP 63
20378: PUSH
20379: LD_EXP 78
20383: AND
20384: IFFALSE 20404
20386: GO 20388
20388: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20389: LD_INT 1
20391: PPUSH
20392: LD_OWVAR 2
20396: PPUSH
20397: LD_INT 0
20399: PPUSH
20400: CALL_OW 324
20404: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20405: LD_EXP 63
20409: PUSH
20410: LD_EXP 79
20414: AND
20415: IFFALSE 20498
20417: GO 20419
20419: DISABLE
20420: LD_INT 0
20422: PPUSH
20423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20424: LD_ADDR_VAR 0 2
20428: PUSH
20429: LD_INT 22
20431: PUSH
20432: LD_OWVAR 2
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 21
20443: PUSH
20444: LD_INT 3
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL_OW 69
20459: ST_TO_ADDR
// if not tmp then
20460: LD_VAR 0 2
20464: NOT
20465: IFFALSE 20469
// exit ;
20467: GO 20498
// for i in tmp do
20469: LD_ADDR_VAR 0 1
20473: PUSH
20474: LD_VAR 0 2
20478: PUSH
20479: FOR_IN
20480: IFFALSE 20496
// SetBLevel ( i , 10 ) ;
20482: LD_VAR 0 1
20486: PPUSH
20487: LD_INT 10
20489: PPUSH
20490: CALL_OW 241
20494: GO 20479
20496: POP
20497: POP
// end ;
20498: PPOPN 2
20500: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20501: LD_EXP 63
20505: PUSH
20506: LD_EXP 80
20510: AND
20511: IFFALSE 20622
20513: GO 20515
20515: DISABLE
20516: LD_INT 0
20518: PPUSH
20519: PPUSH
20520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20521: LD_ADDR_VAR 0 3
20525: PUSH
20526: LD_INT 22
20528: PUSH
20529: LD_OWVAR 2
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 25
20540: PUSH
20541: LD_INT 1
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PPUSH
20552: CALL_OW 69
20556: ST_TO_ADDR
// if not tmp then
20557: LD_VAR 0 3
20561: NOT
20562: IFFALSE 20566
// exit ;
20564: GO 20622
// un := tmp [ rand ( 1 , tmp ) ] ;
20566: LD_ADDR_VAR 0 2
20570: PUSH
20571: LD_VAR 0 3
20575: PUSH
20576: LD_INT 1
20578: PPUSH
20579: LD_VAR 0 3
20583: PPUSH
20584: CALL_OW 12
20588: ARRAY
20589: ST_TO_ADDR
// if Crawls ( un ) then
20590: LD_VAR 0 2
20594: PPUSH
20595: CALL_OW 318
20599: IFFALSE 20610
// ComWalk ( un ) ;
20601: LD_VAR 0 2
20605: PPUSH
20606: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20610: LD_VAR 0 2
20614: PPUSH
20615: LD_INT 5
20617: PPUSH
20618: CALL_OW 336
// end ;
20622: PPOPN 3
20624: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20625: LD_EXP 63
20629: PUSH
20630: LD_EXP 81
20634: AND
20635: PUSH
20636: LD_OWVAR 67
20640: PUSH
20641: LD_INT 4
20643: LESS
20644: AND
20645: IFFALSE 20664
20647: GO 20649
20649: DISABLE
// begin Difficulty := Difficulty + 1 ;
20650: LD_ADDR_OWVAR 67
20654: PUSH
20655: LD_OWVAR 67
20659: PUSH
20660: LD_INT 1
20662: PLUS
20663: ST_TO_ADDR
// end ;
20664: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20665: LD_EXP 63
20669: PUSH
20670: LD_EXP 82
20674: AND
20675: IFFALSE 20778
20677: GO 20679
20679: DISABLE
20680: LD_INT 0
20682: PPUSH
// begin for i := 1 to 5 do
20683: LD_ADDR_VAR 0 1
20687: PUSH
20688: DOUBLE
20689: LD_INT 1
20691: DEC
20692: ST_TO_ADDR
20693: LD_INT 5
20695: PUSH
20696: FOR_TO
20697: IFFALSE 20776
// begin uc_nation := nation_nature ;
20699: LD_ADDR_OWVAR 21
20703: PUSH
20704: LD_INT 0
20706: ST_TO_ADDR
// uc_side := 0 ;
20707: LD_ADDR_OWVAR 20
20711: PUSH
20712: LD_INT 0
20714: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20715: LD_ADDR_OWVAR 29
20719: PUSH
20720: LD_INT 12
20722: PUSH
20723: LD_INT 12
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: ST_TO_ADDR
// hc_agressivity := 20 ;
20730: LD_ADDR_OWVAR 35
20734: PUSH
20735: LD_INT 20
20737: ST_TO_ADDR
// hc_class := class_tiger ;
20738: LD_ADDR_OWVAR 28
20742: PUSH
20743: LD_INT 14
20745: ST_TO_ADDR
// hc_gallery :=  ;
20746: LD_ADDR_OWVAR 33
20750: PUSH
20751: LD_STRING 
20753: ST_TO_ADDR
// hc_name :=  ;
20754: LD_ADDR_OWVAR 26
20758: PUSH
20759: LD_STRING 
20761: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20762: CALL_OW 44
20766: PPUSH
20767: LD_INT 0
20769: PPUSH
20770: CALL_OW 51
// end ;
20774: GO 20696
20776: POP
20777: POP
// end ;
20778: PPOPN 1
20780: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20781: LD_EXP 63
20785: PUSH
20786: LD_EXP 83
20790: AND
20791: IFFALSE 20800
20793: GO 20795
20795: DISABLE
// StreamSibBomb ;
20796: CALL 20801 0 0
20800: END
// export function StreamSibBomb ; var i , x , y ; begin
20801: LD_INT 0
20803: PPUSH
20804: PPUSH
20805: PPUSH
20806: PPUSH
// result := false ;
20807: LD_ADDR_VAR 0 1
20811: PUSH
20812: LD_INT 0
20814: ST_TO_ADDR
// for i := 1 to 16 do
20815: LD_ADDR_VAR 0 2
20819: PUSH
20820: DOUBLE
20821: LD_INT 1
20823: DEC
20824: ST_TO_ADDR
20825: LD_INT 16
20827: PUSH
20828: FOR_TO
20829: IFFALSE 21028
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20831: LD_ADDR_VAR 0 3
20835: PUSH
20836: LD_INT 10
20838: PUSH
20839: LD_INT 20
20841: PUSH
20842: LD_INT 30
20844: PUSH
20845: LD_INT 40
20847: PUSH
20848: LD_INT 50
20850: PUSH
20851: LD_INT 60
20853: PUSH
20854: LD_INT 70
20856: PUSH
20857: LD_INT 80
20859: PUSH
20860: LD_INT 90
20862: PUSH
20863: LD_INT 100
20865: PUSH
20866: LD_INT 110
20868: PUSH
20869: LD_INT 120
20871: PUSH
20872: LD_INT 130
20874: PUSH
20875: LD_INT 140
20877: PUSH
20878: LD_INT 150
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PPUSH
20901: LD_INT 15
20903: PPUSH
20904: CALL_OW 12
20908: ARRAY
20909: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20910: LD_ADDR_VAR 0 4
20914: PUSH
20915: LD_INT 10
20917: PUSH
20918: LD_INT 20
20920: PUSH
20921: LD_INT 30
20923: PUSH
20924: LD_INT 40
20926: PUSH
20927: LD_INT 50
20929: PUSH
20930: LD_INT 60
20932: PUSH
20933: LD_INT 70
20935: PUSH
20936: LD_INT 80
20938: PUSH
20939: LD_INT 90
20941: PUSH
20942: LD_INT 100
20944: PUSH
20945: LD_INT 110
20947: PUSH
20948: LD_INT 120
20950: PUSH
20951: LD_INT 130
20953: PUSH
20954: LD_INT 140
20956: PUSH
20957: LD_INT 150
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: PPUSH
20980: LD_INT 15
20982: PPUSH
20983: CALL_OW 12
20987: ARRAY
20988: ST_TO_ADDR
// if ValidHex ( x , y ) then
20989: LD_VAR 0 3
20993: PPUSH
20994: LD_VAR 0 4
20998: PPUSH
20999: CALL_OW 488
21003: IFFALSE 21026
// begin result := [ x , y ] ;
21005: LD_ADDR_VAR 0 1
21009: PUSH
21010: LD_VAR 0 3
21014: PUSH
21015: LD_VAR 0 4
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: ST_TO_ADDR
// break ;
21024: GO 21028
// end ; end ;
21026: GO 20828
21028: POP
21029: POP
// if result then
21030: LD_VAR 0 1
21034: IFFALSE 21094
// begin ToLua ( playSibBomb() ) ;
21036: LD_STRING playSibBomb()
21038: PPUSH
21039: CALL_OW 559
// wait ( 0 0$14 ) ;
21043: LD_INT 490
21045: PPUSH
21046: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21050: LD_VAR 0 1
21054: PUSH
21055: LD_INT 1
21057: ARRAY
21058: PPUSH
21059: LD_VAR 0 1
21063: PUSH
21064: LD_INT 2
21066: ARRAY
21067: PPUSH
21068: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21072: LD_VAR 0 1
21076: PUSH
21077: LD_INT 1
21079: ARRAY
21080: PPUSH
21081: LD_VAR 0 1
21085: PUSH
21086: LD_INT 2
21088: ARRAY
21089: PPUSH
21090: CALL_OW 429
// end ; end ;
21094: LD_VAR 0 1
21098: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21099: LD_EXP 63
21103: PUSH
21104: LD_EXP 85
21108: AND
21109: IFFALSE 21121
21111: GO 21113
21113: DISABLE
// YouLost (  ) ;
21114: LD_STRING 
21116: PPUSH
21117: CALL_OW 104
21121: END
// every 0 0$1 trigger StreamModeActive and sFog do
21122: LD_EXP 63
21126: PUSH
21127: LD_EXP 84
21131: AND
21132: IFFALSE 21146
21134: GO 21136
21136: DISABLE
// FogOff ( your_side ) ;
21137: LD_OWVAR 2
21141: PPUSH
21142: CALL_OW 344
21146: END
// every 0 0$1 trigger StreamModeActive and sSun do
21147: LD_EXP 63
21151: PUSH
21152: LD_EXP 86
21156: AND
21157: IFFALSE 21185
21159: GO 21161
21161: DISABLE
// begin solar_recharge_percent := 0 ;
21162: LD_ADDR_OWVAR 79
21166: PUSH
21167: LD_INT 0
21169: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21170: LD_INT 10500
21172: PPUSH
21173: CALL_OW 67
// solar_recharge_percent := 100 ;
21177: LD_ADDR_OWVAR 79
21181: PUSH
21182: LD_INT 100
21184: ST_TO_ADDR
// end ;
21185: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21186: LD_EXP 63
21190: PUSH
21191: LD_EXP 87
21195: AND
21196: IFFALSE 21435
21198: GO 21200
21200: DISABLE
21201: LD_INT 0
21203: PPUSH
21204: PPUSH
21205: PPUSH
// begin tmp := [ ] ;
21206: LD_ADDR_VAR 0 3
21210: PUSH
21211: EMPTY
21212: ST_TO_ADDR
// for i := 1 to 6 do
21213: LD_ADDR_VAR 0 1
21217: PUSH
21218: DOUBLE
21219: LD_INT 1
21221: DEC
21222: ST_TO_ADDR
21223: LD_INT 6
21225: PUSH
21226: FOR_TO
21227: IFFALSE 21332
// begin uc_nation := nation_nature ;
21229: LD_ADDR_OWVAR 21
21233: PUSH
21234: LD_INT 0
21236: ST_TO_ADDR
// uc_side := 0 ;
21237: LD_ADDR_OWVAR 20
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21245: LD_ADDR_OWVAR 29
21249: PUSH
21250: LD_INT 12
21252: PUSH
21253: LD_INT 12
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: ST_TO_ADDR
// hc_agressivity := 20 ;
21260: LD_ADDR_OWVAR 35
21264: PUSH
21265: LD_INT 20
21267: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21268: LD_ADDR_OWVAR 28
21272: PUSH
21273: LD_INT 17
21275: ST_TO_ADDR
// hc_gallery :=  ;
21276: LD_ADDR_OWVAR 33
21280: PUSH
21281: LD_STRING 
21283: ST_TO_ADDR
// hc_name :=  ;
21284: LD_ADDR_OWVAR 26
21288: PUSH
21289: LD_STRING 
21291: ST_TO_ADDR
// un := CreateHuman ;
21292: LD_ADDR_VAR 0 2
21296: PUSH
21297: CALL_OW 44
21301: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21302: LD_VAR 0 2
21306: PPUSH
21307: LD_INT 1
21309: PPUSH
21310: CALL_OW 51
// tmp := tmp ^ un ;
21314: LD_ADDR_VAR 0 3
21318: PUSH
21319: LD_VAR 0 3
21323: PUSH
21324: LD_VAR 0 2
21328: ADD
21329: ST_TO_ADDR
// end ;
21330: GO 21226
21332: POP
21333: POP
// repeat wait ( 0 0$1 ) ;
21334: LD_INT 35
21336: PPUSH
21337: CALL_OW 67
// for un in tmp do
21341: LD_ADDR_VAR 0 2
21345: PUSH
21346: LD_VAR 0 3
21350: PUSH
21351: FOR_IN
21352: IFFALSE 21426
// begin if IsDead ( un ) then
21354: LD_VAR 0 2
21358: PPUSH
21359: CALL_OW 301
21363: IFFALSE 21383
// begin tmp := tmp diff un ;
21365: LD_ADDR_VAR 0 3
21369: PUSH
21370: LD_VAR 0 3
21374: PUSH
21375: LD_VAR 0 2
21379: DIFF
21380: ST_TO_ADDR
// continue ;
21381: GO 21351
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21383: LD_VAR 0 2
21387: PPUSH
21388: LD_INT 3
21390: PUSH
21391: LD_INT 22
21393: PUSH
21394: LD_INT 0
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PPUSH
21405: CALL_OW 69
21409: PPUSH
21410: LD_VAR 0 2
21414: PPUSH
21415: CALL_OW 74
21419: PPUSH
21420: CALL_OW 115
// end ;
21424: GO 21351
21426: POP
21427: POP
// until not tmp ;
21428: LD_VAR 0 3
21432: NOT
21433: IFFALSE 21334
// end ;
21435: PPOPN 3
21437: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21438: LD_EXP 63
21442: PUSH
21443: LD_EXP 88
21447: AND
21448: IFFALSE 21502
21450: GO 21452
21452: DISABLE
// begin ToLua ( displayTroll(); ) ;
21453: LD_STRING displayTroll();
21455: PPUSH
21456: CALL_OW 559
// wait ( 3 3$00 ) ;
21460: LD_INT 6300
21462: PPUSH
21463: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21467: LD_STRING hideTroll();
21469: PPUSH
21470: CALL_OW 559
// wait ( 1 1$00 ) ;
21474: LD_INT 2100
21476: PPUSH
21477: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21481: LD_STRING displayTroll();
21483: PPUSH
21484: CALL_OW 559
// wait ( 1 1$00 ) ;
21488: LD_INT 2100
21490: PPUSH
21491: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21495: LD_STRING hideTroll();
21497: PPUSH
21498: CALL_OW 559
// end ;
21502: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21503: LD_EXP 63
21507: PUSH
21508: LD_EXP 89
21512: AND
21513: IFFALSE 21576
21515: GO 21517
21517: DISABLE
21518: LD_INT 0
21520: PPUSH
// begin p := 0 ;
21521: LD_ADDR_VAR 0 1
21525: PUSH
21526: LD_INT 0
21528: ST_TO_ADDR
// repeat game_speed := 1 ;
21529: LD_ADDR_OWVAR 65
21533: PUSH
21534: LD_INT 1
21536: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21537: LD_INT 35
21539: PPUSH
21540: CALL_OW 67
// p := p + 1 ;
21544: LD_ADDR_VAR 0 1
21548: PUSH
21549: LD_VAR 0 1
21553: PUSH
21554: LD_INT 1
21556: PLUS
21557: ST_TO_ADDR
// until p >= 60 ;
21558: LD_VAR 0 1
21562: PUSH
21563: LD_INT 60
21565: GREATEREQUAL
21566: IFFALSE 21529
// game_speed := 4 ;
21568: LD_ADDR_OWVAR 65
21572: PUSH
21573: LD_INT 4
21575: ST_TO_ADDR
// end ;
21576: PPOPN 1
21578: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21579: LD_EXP 63
21583: PUSH
21584: LD_EXP 90
21588: AND
21589: IFFALSE 21735
21591: GO 21593
21593: DISABLE
21594: LD_INT 0
21596: PPUSH
21597: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21598: LD_ADDR_VAR 0 1
21602: PUSH
21603: LD_INT 22
21605: PUSH
21606: LD_OWVAR 2
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 2
21617: PUSH
21618: LD_INT 30
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 30
21630: PUSH
21631: LD_INT 1
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: LIST
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PPUSH
21647: CALL_OW 69
21651: ST_TO_ADDR
// if not depot then
21652: LD_VAR 0 1
21656: NOT
21657: IFFALSE 21661
// exit ;
21659: GO 21735
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21661: LD_ADDR_VAR 0 2
21665: PUSH
21666: LD_VAR 0 1
21670: PUSH
21671: LD_INT 1
21673: PPUSH
21674: LD_VAR 0 1
21678: PPUSH
21679: CALL_OW 12
21683: ARRAY
21684: PPUSH
21685: CALL_OW 274
21689: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21690: LD_VAR 0 2
21694: PPUSH
21695: LD_INT 1
21697: PPUSH
21698: LD_INT 0
21700: PPUSH
21701: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21705: LD_VAR 0 2
21709: PPUSH
21710: LD_INT 2
21712: PPUSH
21713: LD_INT 0
21715: PPUSH
21716: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21720: LD_VAR 0 2
21724: PPUSH
21725: LD_INT 3
21727: PPUSH
21728: LD_INT 0
21730: PPUSH
21731: CALL_OW 277
// end ;
21735: PPOPN 2
21737: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21738: LD_EXP 63
21742: PUSH
21743: LD_EXP 91
21747: AND
21748: IFFALSE 21845
21750: GO 21752
21752: DISABLE
21753: LD_INT 0
21755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21756: LD_ADDR_VAR 0 1
21760: PUSH
21761: LD_INT 22
21763: PUSH
21764: LD_OWVAR 2
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 21
21775: PUSH
21776: LD_INT 1
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 3
21785: PUSH
21786: LD_INT 23
21788: PUSH
21789: LD_INT 0
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: PPUSH
21805: CALL_OW 69
21809: ST_TO_ADDR
// if not tmp then
21810: LD_VAR 0 1
21814: NOT
21815: IFFALSE 21819
// exit ;
21817: GO 21845
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21819: LD_VAR 0 1
21823: PUSH
21824: LD_INT 1
21826: PPUSH
21827: LD_VAR 0 1
21831: PPUSH
21832: CALL_OW 12
21836: ARRAY
21837: PPUSH
21838: LD_INT 200
21840: PPUSH
21841: CALL_OW 234
// end ;
21845: PPOPN 1
21847: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21848: LD_EXP 63
21852: PUSH
21853: LD_EXP 92
21857: AND
21858: IFFALSE 21937
21860: GO 21862
21862: DISABLE
21863: LD_INT 0
21865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21866: LD_ADDR_VAR 0 1
21870: PUSH
21871: LD_INT 22
21873: PUSH
21874: LD_OWVAR 2
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 21
21885: PUSH
21886: LD_INT 2
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PPUSH
21897: CALL_OW 69
21901: ST_TO_ADDR
// if not tmp then
21902: LD_VAR 0 1
21906: NOT
21907: IFFALSE 21911
// exit ;
21909: GO 21937
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21911: LD_VAR 0 1
21915: PUSH
21916: LD_INT 1
21918: PPUSH
21919: LD_VAR 0 1
21923: PPUSH
21924: CALL_OW 12
21928: ARRAY
21929: PPUSH
21930: LD_INT 60
21932: PPUSH
21933: CALL_OW 234
// end ;
21937: PPOPN 1
21939: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21940: LD_EXP 63
21944: PUSH
21945: LD_EXP 93
21949: AND
21950: IFFALSE 22049
21952: GO 21954
21954: DISABLE
21955: LD_INT 0
21957: PPUSH
21958: PPUSH
// begin enable ;
21959: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21960: LD_ADDR_VAR 0 1
21964: PUSH
21965: LD_INT 22
21967: PUSH
21968: LD_OWVAR 2
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 61
21979: PUSH
21980: EMPTY
21981: LIST
21982: PUSH
21983: LD_INT 33
21985: PUSH
21986: LD_INT 2
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: LIST
21997: PPUSH
21998: CALL_OW 69
22002: ST_TO_ADDR
// if not tmp then
22003: LD_VAR 0 1
22007: NOT
22008: IFFALSE 22012
// exit ;
22010: GO 22049
// for i in tmp do
22012: LD_ADDR_VAR 0 2
22016: PUSH
22017: LD_VAR 0 1
22021: PUSH
22022: FOR_IN
22023: IFFALSE 22047
// if IsControledBy ( i ) then
22025: LD_VAR 0 2
22029: PPUSH
22030: CALL_OW 312
22034: IFFALSE 22045
// ComUnlink ( i ) ;
22036: LD_VAR 0 2
22040: PPUSH
22041: CALL_OW 136
22045: GO 22022
22047: POP
22048: POP
// end ;
22049: PPOPN 2
22051: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22052: LD_EXP 63
22056: PUSH
22057: LD_EXP 94
22061: AND
22062: IFFALSE 22202
22064: GO 22066
22066: DISABLE
22067: LD_INT 0
22069: PPUSH
22070: PPUSH
// begin ToLua ( displayPowell(); ) ;
22071: LD_STRING displayPowell();
22073: PPUSH
22074: CALL_OW 559
// uc_side := 0 ;
22078: LD_ADDR_OWVAR 20
22082: PUSH
22083: LD_INT 0
22085: ST_TO_ADDR
// uc_nation := 2 ;
22086: LD_ADDR_OWVAR 21
22090: PUSH
22091: LD_INT 2
22093: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22094: LD_ADDR_OWVAR 37
22098: PUSH
22099: LD_INT 14
22101: ST_TO_ADDR
// vc_engine := engine_siberite ;
22102: LD_ADDR_OWVAR 39
22106: PUSH
22107: LD_INT 3
22109: ST_TO_ADDR
// vc_control := control_apeman ;
22110: LD_ADDR_OWVAR 38
22114: PUSH
22115: LD_INT 5
22117: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22118: LD_ADDR_OWVAR 40
22122: PUSH
22123: LD_INT 29
22125: ST_TO_ADDR
// un := CreateVehicle ;
22126: LD_ADDR_VAR 0 2
22130: PUSH
22131: CALL_OW 45
22135: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22136: LD_VAR 0 2
22140: PPUSH
22141: LD_INT 1
22143: PPUSH
22144: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22148: LD_INT 35
22150: PPUSH
22151: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22155: LD_VAR 0 2
22159: PPUSH
22160: LD_INT 22
22162: PUSH
22163: LD_OWVAR 2
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PPUSH
22172: CALL_OW 69
22176: PPUSH
22177: LD_VAR 0 2
22181: PPUSH
22182: CALL_OW 74
22186: PPUSH
22187: CALL_OW 115
// until IsDead ( un ) ;
22191: LD_VAR 0 2
22195: PPUSH
22196: CALL_OW 301
22200: IFFALSE 22148
// end ;
22202: PPOPN 2
22204: END
// every 0 0$1 trigger StreamModeActive and sStu do
22205: LD_EXP 63
22209: PUSH
22210: LD_EXP 102
22214: AND
22215: IFFALSE 22231
22217: GO 22219
22219: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22220: LD_STRING displayStucuk();
22222: PPUSH
22223: CALL_OW 559
// ResetFog ;
22227: CALL_OW 335
// end ;
22231: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22232: LD_EXP 63
22236: PUSH
22237: LD_EXP 95
22241: AND
22242: IFFALSE 22383
22244: GO 22246
22246: DISABLE
22247: LD_INT 0
22249: PPUSH
22250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22251: LD_ADDR_VAR 0 2
22255: PUSH
22256: LD_INT 22
22258: PUSH
22259: LD_OWVAR 2
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 21
22270: PUSH
22271: LD_INT 1
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PPUSH
22282: CALL_OW 69
22286: ST_TO_ADDR
// if not tmp then
22287: LD_VAR 0 2
22291: NOT
22292: IFFALSE 22296
// exit ;
22294: GO 22383
// un := tmp [ rand ( 1 , tmp ) ] ;
22296: LD_ADDR_VAR 0 1
22300: PUSH
22301: LD_VAR 0 2
22305: PUSH
22306: LD_INT 1
22308: PPUSH
22309: LD_VAR 0 2
22313: PPUSH
22314: CALL_OW 12
22318: ARRAY
22319: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22320: LD_VAR 0 1
22324: PPUSH
22325: LD_INT 0
22327: PPUSH
22328: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22332: LD_VAR 0 1
22336: PPUSH
22337: LD_OWVAR 3
22341: PUSH
22342: LD_VAR 0 1
22346: DIFF
22347: PPUSH
22348: LD_VAR 0 1
22352: PPUSH
22353: CALL_OW 74
22357: PPUSH
22358: CALL_OW 115
// wait ( 0 0$20 ) ;
22362: LD_INT 700
22364: PPUSH
22365: CALL_OW 67
// SetSide ( un , your_side ) ;
22369: LD_VAR 0 1
22373: PPUSH
22374: LD_OWVAR 2
22378: PPUSH
22379: CALL_OW 235
// end ;
22383: PPOPN 2
22385: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22386: LD_EXP 63
22390: PUSH
22391: LD_EXP 96
22395: AND
22396: IFFALSE 22502
22398: GO 22400
22400: DISABLE
22401: LD_INT 0
22403: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22404: LD_ADDR_VAR 0 1
22408: PUSH
22409: LD_INT 22
22411: PUSH
22412: LD_OWVAR 2
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 2
22423: PUSH
22424: LD_INT 30
22426: PUSH
22427: LD_INT 0
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 30
22436: PUSH
22437: LD_INT 1
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: LIST
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PPUSH
22453: CALL_OW 69
22457: ST_TO_ADDR
// if not depot then
22458: LD_VAR 0 1
22462: NOT
22463: IFFALSE 22467
// exit ;
22465: GO 22502
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22467: LD_VAR 0 1
22471: PUSH
22472: LD_INT 1
22474: ARRAY
22475: PPUSH
22476: CALL_OW 250
22480: PPUSH
22481: LD_VAR 0 1
22485: PUSH
22486: LD_INT 1
22488: ARRAY
22489: PPUSH
22490: CALL_OW 251
22494: PPUSH
22495: LD_INT 70
22497: PPUSH
22498: CALL_OW 495
// end ;
22502: PPOPN 1
22504: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22505: LD_EXP 63
22509: PUSH
22510: LD_EXP 97
22514: AND
22515: IFFALSE 22726
22517: GO 22519
22519: DISABLE
22520: LD_INT 0
22522: PPUSH
22523: PPUSH
22524: PPUSH
22525: PPUSH
22526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22527: LD_ADDR_VAR 0 5
22531: PUSH
22532: LD_INT 22
22534: PUSH
22535: LD_OWVAR 2
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 21
22546: PUSH
22547: LD_INT 1
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PPUSH
22558: CALL_OW 69
22562: ST_TO_ADDR
// if not tmp then
22563: LD_VAR 0 5
22567: NOT
22568: IFFALSE 22572
// exit ;
22570: GO 22726
// for i in tmp do
22572: LD_ADDR_VAR 0 1
22576: PUSH
22577: LD_VAR 0 5
22581: PUSH
22582: FOR_IN
22583: IFFALSE 22724
// begin d := rand ( 0 , 5 ) ;
22585: LD_ADDR_VAR 0 4
22589: PUSH
22590: LD_INT 0
22592: PPUSH
22593: LD_INT 5
22595: PPUSH
22596: CALL_OW 12
22600: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22601: LD_ADDR_VAR 0 2
22605: PUSH
22606: LD_VAR 0 1
22610: PPUSH
22611: CALL_OW 250
22615: PPUSH
22616: LD_VAR 0 4
22620: PPUSH
22621: LD_INT 3
22623: PPUSH
22624: LD_INT 12
22626: PPUSH
22627: CALL_OW 12
22631: PPUSH
22632: CALL_OW 272
22636: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22637: LD_ADDR_VAR 0 3
22641: PUSH
22642: LD_VAR 0 1
22646: PPUSH
22647: CALL_OW 251
22651: PPUSH
22652: LD_VAR 0 4
22656: PPUSH
22657: LD_INT 3
22659: PPUSH
22660: LD_INT 12
22662: PPUSH
22663: CALL_OW 12
22667: PPUSH
22668: CALL_OW 273
22672: ST_TO_ADDR
// if ValidHex ( x , y ) then
22673: LD_VAR 0 2
22677: PPUSH
22678: LD_VAR 0 3
22682: PPUSH
22683: CALL_OW 488
22687: IFFALSE 22722
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22689: LD_VAR 0 1
22693: PPUSH
22694: LD_VAR 0 2
22698: PPUSH
22699: LD_VAR 0 3
22703: PPUSH
22704: LD_INT 3
22706: PPUSH
22707: LD_INT 6
22709: PPUSH
22710: CALL_OW 12
22714: PPUSH
22715: LD_INT 1
22717: PPUSH
22718: CALL_OW 483
// end ;
22722: GO 22582
22724: POP
22725: POP
// end ;
22726: PPOPN 5
22728: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22729: LD_EXP 63
22733: PUSH
22734: LD_EXP 98
22738: AND
22739: IFFALSE 22833
22741: GO 22743
22743: DISABLE
22744: LD_INT 0
22746: PPUSH
22747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22748: LD_ADDR_VAR 0 2
22752: PUSH
22753: LD_INT 22
22755: PUSH
22756: LD_OWVAR 2
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 32
22767: PUSH
22768: LD_INT 1
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 21
22777: PUSH
22778: LD_INT 2
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: LIST
22789: PPUSH
22790: CALL_OW 69
22794: ST_TO_ADDR
// if not tmp then
22795: LD_VAR 0 2
22799: NOT
22800: IFFALSE 22804
// exit ;
22802: GO 22833
// for i in tmp do
22804: LD_ADDR_VAR 0 1
22808: PUSH
22809: LD_VAR 0 2
22813: PUSH
22814: FOR_IN
22815: IFFALSE 22831
// SetFuel ( i , 0 ) ;
22817: LD_VAR 0 1
22821: PPUSH
22822: LD_INT 0
22824: PPUSH
22825: CALL_OW 240
22829: GO 22814
22831: POP
22832: POP
// end ;
22833: PPOPN 2
22835: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22836: LD_EXP 63
22840: PUSH
22841: LD_EXP 99
22845: AND
22846: IFFALSE 22912
22848: GO 22850
22850: DISABLE
22851: LD_INT 0
22853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22854: LD_ADDR_VAR 0 1
22858: PUSH
22859: LD_INT 22
22861: PUSH
22862: LD_OWVAR 2
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 30
22873: PUSH
22874: LD_INT 29
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PPUSH
22885: CALL_OW 69
22889: ST_TO_ADDR
// if not tmp then
22890: LD_VAR 0 1
22894: NOT
22895: IFFALSE 22899
// exit ;
22897: GO 22912
// DestroyUnit ( tmp [ 1 ] ) ;
22899: LD_VAR 0 1
22903: PUSH
22904: LD_INT 1
22906: ARRAY
22907: PPUSH
22908: CALL_OW 65
// end ;
22912: PPOPN 1
22914: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22915: LD_EXP 63
22919: PUSH
22920: LD_EXP 101
22924: AND
22925: IFFALSE 23054
22927: GO 22929
22929: DISABLE
22930: LD_INT 0
22932: PPUSH
// begin uc_side := 0 ;
22933: LD_ADDR_OWVAR 20
22937: PUSH
22938: LD_INT 0
22940: ST_TO_ADDR
// uc_nation := nation_arabian ;
22941: LD_ADDR_OWVAR 21
22945: PUSH
22946: LD_INT 2
22948: ST_TO_ADDR
// hc_gallery :=  ;
22949: LD_ADDR_OWVAR 33
22953: PUSH
22954: LD_STRING 
22956: ST_TO_ADDR
// hc_name :=  ;
22957: LD_ADDR_OWVAR 26
22961: PUSH
22962: LD_STRING 
22964: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22965: LD_INT 1
22967: PPUSH
22968: LD_INT 11
22970: PPUSH
22971: LD_INT 10
22973: PPUSH
22974: CALL_OW 380
// un := CreateHuman ;
22978: LD_ADDR_VAR 0 1
22982: PUSH
22983: CALL_OW 44
22987: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22988: LD_VAR 0 1
22992: PPUSH
22993: LD_INT 1
22995: PPUSH
22996: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23000: LD_INT 35
23002: PPUSH
23003: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23007: LD_VAR 0 1
23011: PPUSH
23012: LD_INT 22
23014: PUSH
23015: LD_OWVAR 2
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PPUSH
23024: CALL_OW 69
23028: PPUSH
23029: LD_VAR 0 1
23033: PPUSH
23034: CALL_OW 74
23038: PPUSH
23039: CALL_OW 115
// until IsDead ( un ) ;
23043: LD_VAR 0 1
23047: PPUSH
23048: CALL_OW 301
23052: IFFALSE 23000
// end ;
23054: PPOPN 1
23056: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23057: LD_EXP 63
23061: PUSH
23062: LD_EXP 103
23066: AND
23067: IFFALSE 23079
23069: GO 23071
23071: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23072: LD_STRING earthquake(getX(game), 0, 32)
23074: PPUSH
23075: CALL_OW 559
23079: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23080: LD_EXP 63
23084: PUSH
23085: LD_EXP 104
23089: AND
23090: IFFALSE 23181
23092: GO 23094
23094: DISABLE
23095: LD_INT 0
23097: PPUSH
// begin enable ;
23098: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23099: LD_ADDR_VAR 0 1
23103: PUSH
23104: LD_INT 22
23106: PUSH
23107: LD_OWVAR 2
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 21
23118: PUSH
23119: LD_INT 2
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 33
23128: PUSH
23129: LD_INT 3
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: LIST
23140: PPUSH
23141: CALL_OW 69
23145: ST_TO_ADDR
// if not tmp then
23146: LD_VAR 0 1
23150: NOT
23151: IFFALSE 23155
// exit ;
23153: GO 23181
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23155: LD_VAR 0 1
23159: PUSH
23160: LD_INT 1
23162: PPUSH
23163: LD_VAR 0 1
23167: PPUSH
23168: CALL_OW 12
23172: ARRAY
23173: PPUSH
23174: LD_INT 1
23176: PPUSH
23177: CALL_OW 234
// end ;
23181: PPOPN 1
23183: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23184: LD_EXP 63
23188: PUSH
23189: LD_EXP 105
23193: AND
23194: IFFALSE 23335
23196: GO 23198
23198: DISABLE
23199: LD_INT 0
23201: PPUSH
23202: PPUSH
23203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23204: LD_ADDR_VAR 0 3
23208: PUSH
23209: LD_INT 22
23211: PUSH
23212: LD_OWVAR 2
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 25
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PPUSH
23235: CALL_OW 69
23239: ST_TO_ADDR
// if not tmp then
23240: LD_VAR 0 3
23244: NOT
23245: IFFALSE 23249
// exit ;
23247: GO 23335
// un := tmp [ rand ( 1 , tmp ) ] ;
23249: LD_ADDR_VAR 0 2
23253: PUSH
23254: LD_VAR 0 3
23258: PUSH
23259: LD_INT 1
23261: PPUSH
23262: LD_VAR 0 3
23266: PPUSH
23267: CALL_OW 12
23271: ARRAY
23272: ST_TO_ADDR
// if Crawls ( un ) then
23273: LD_VAR 0 2
23277: PPUSH
23278: CALL_OW 318
23282: IFFALSE 23293
// ComWalk ( un ) ;
23284: LD_VAR 0 2
23288: PPUSH
23289: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23293: LD_VAR 0 2
23297: PPUSH
23298: LD_INT 9
23300: PPUSH
23301: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23305: LD_INT 28
23307: PPUSH
23308: LD_OWVAR 2
23312: PPUSH
23313: LD_INT 2
23315: PPUSH
23316: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23320: LD_INT 29
23322: PPUSH
23323: LD_OWVAR 2
23327: PPUSH
23328: LD_INT 2
23330: PPUSH
23331: CALL_OW 322
// end ;
23335: PPOPN 3
23337: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23338: LD_EXP 63
23342: PUSH
23343: LD_EXP 106
23347: AND
23348: IFFALSE 23459
23350: GO 23352
23352: DISABLE
23353: LD_INT 0
23355: PPUSH
23356: PPUSH
23357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23358: LD_ADDR_VAR 0 3
23362: PUSH
23363: LD_INT 22
23365: PUSH
23366: LD_OWVAR 2
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 25
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PPUSH
23389: CALL_OW 69
23393: ST_TO_ADDR
// if not tmp then
23394: LD_VAR 0 3
23398: NOT
23399: IFFALSE 23403
// exit ;
23401: GO 23459
// un := tmp [ rand ( 1 , tmp ) ] ;
23403: LD_ADDR_VAR 0 2
23407: PUSH
23408: LD_VAR 0 3
23412: PUSH
23413: LD_INT 1
23415: PPUSH
23416: LD_VAR 0 3
23420: PPUSH
23421: CALL_OW 12
23425: ARRAY
23426: ST_TO_ADDR
// if Crawls ( un ) then
23427: LD_VAR 0 2
23431: PPUSH
23432: CALL_OW 318
23436: IFFALSE 23447
// ComWalk ( un ) ;
23438: LD_VAR 0 2
23442: PPUSH
23443: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23447: LD_VAR 0 2
23451: PPUSH
23452: LD_INT 8
23454: PPUSH
23455: CALL_OW 336
// end ;
23459: PPOPN 3
23461: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23462: LD_EXP 63
23466: PUSH
23467: LD_EXP 107
23471: AND
23472: IFFALSE 23616
23474: GO 23476
23476: DISABLE
23477: LD_INT 0
23479: PPUSH
23480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23481: LD_ADDR_VAR 0 2
23485: PUSH
23486: LD_INT 22
23488: PUSH
23489: LD_OWVAR 2
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 21
23500: PUSH
23501: LD_INT 2
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 2
23510: PUSH
23511: LD_INT 34
23513: PUSH
23514: LD_INT 12
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 34
23523: PUSH
23524: LD_INT 51
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 34
23533: PUSH
23534: LD_INT 32
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: PPUSH
23552: CALL_OW 69
23556: ST_TO_ADDR
// if not tmp then
23557: LD_VAR 0 2
23561: NOT
23562: IFFALSE 23566
// exit ;
23564: GO 23616
// for i in tmp do
23566: LD_ADDR_VAR 0 1
23570: PUSH
23571: LD_VAR 0 2
23575: PUSH
23576: FOR_IN
23577: IFFALSE 23614
// if GetCargo ( i , mat_artifact ) = 0 then
23579: LD_VAR 0 1
23583: PPUSH
23584: LD_INT 4
23586: PPUSH
23587: CALL_OW 289
23591: PUSH
23592: LD_INT 0
23594: EQUAL
23595: IFFALSE 23612
// SetCargo ( i , mat_siberit , 100 ) ;
23597: LD_VAR 0 1
23601: PPUSH
23602: LD_INT 3
23604: PPUSH
23605: LD_INT 100
23607: PPUSH
23608: CALL_OW 290
23612: GO 23576
23614: POP
23615: POP
// end ;
23616: PPOPN 2
23618: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23619: LD_EXP 63
23623: PUSH
23624: LD_EXP 108
23628: AND
23629: IFFALSE 23812
23631: GO 23633
23633: DISABLE
23634: LD_INT 0
23636: PPUSH
23637: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23638: LD_ADDR_VAR 0 2
23642: PUSH
23643: LD_INT 22
23645: PUSH
23646: LD_OWVAR 2
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PPUSH
23655: CALL_OW 69
23659: ST_TO_ADDR
// if not tmp then
23660: LD_VAR 0 2
23664: NOT
23665: IFFALSE 23669
// exit ;
23667: GO 23812
// for i := 1 to 2 do
23669: LD_ADDR_VAR 0 1
23673: PUSH
23674: DOUBLE
23675: LD_INT 1
23677: DEC
23678: ST_TO_ADDR
23679: LD_INT 2
23681: PUSH
23682: FOR_TO
23683: IFFALSE 23810
// begin uc_side := your_side ;
23685: LD_ADDR_OWVAR 20
23689: PUSH
23690: LD_OWVAR 2
23694: ST_TO_ADDR
// uc_nation := nation_american ;
23695: LD_ADDR_OWVAR 21
23699: PUSH
23700: LD_INT 1
23702: ST_TO_ADDR
// vc_chassis := us_morphling ;
23703: LD_ADDR_OWVAR 37
23707: PUSH
23708: LD_INT 5
23710: ST_TO_ADDR
// vc_engine := engine_siberite ;
23711: LD_ADDR_OWVAR 39
23715: PUSH
23716: LD_INT 3
23718: ST_TO_ADDR
// vc_control := control_computer ;
23719: LD_ADDR_OWVAR 38
23723: PUSH
23724: LD_INT 3
23726: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23727: LD_ADDR_OWVAR 40
23731: PUSH
23732: LD_INT 10
23734: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23735: LD_VAR 0 2
23739: PUSH
23740: LD_INT 1
23742: ARRAY
23743: PPUSH
23744: CALL_OW 310
23748: NOT
23749: IFFALSE 23796
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23751: CALL_OW 45
23755: PPUSH
23756: LD_VAR 0 2
23760: PUSH
23761: LD_INT 1
23763: ARRAY
23764: PPUSH
23765: CALL_OW 250
23769: PPUSH
23770: LD_VAR 0 2
23774: PUSH
23775: LD_INT 1
23777: ARRAY
23778: PPUSH
23779: CALL_OW 251
23783: PPUSH
23784: LD_INT 12
23786: PPUSH
23787: LD_INT 1
23789: PPUSH
23790: CALL_OW 50
23794: GO 23808
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23796: CALL_OW 45
23800: PPUSH
23801: LD_INT 1
23803: PPUSH
23804: CALL_OW 51
// end ;
23808: GO 23682
23810: POP
23811: POP
// end ;
23812: PPOPN 2
23814: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23815: LD_EXP 63
23819: PUSH
23820: LD_EXP 109
23824: AND
23825: IFFALSE 24047
23827: GO 23829
23829: DISABLE
23830: LD_INT 0
23832: PPUSH
23833: PPUSH
23834: PPUSH
23835: PPUSH
23836: PPUSH
23837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23838: LD_ADDR_VAR 0 6
23842: PUSH
23843: LD_INT 22
23845: PUSH
23846: LD_OWVAR 2
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 21
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 3
23867: PUSH
23868: LD_INT 23
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: LIST
23886: PPUSH
23887: CALL_OW 69
23891: ST_TO_ADDR
// if not tmp then
23892: LD_VAR 0 6
23896: NOT
23897: IFFALSE 23901
// exit ;
23899: GO 24047
// s1 := rand ( 1 , 4 ) ;
23901: LD_ADDR_VAR 0 2
23905: PUSH
23906: LD_INT 1
23908: PPUSH
23909: LD_INT 4
23911: PPUSH
23912: CALL_OW 12
23916: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23917: LD_ADDR_VAR 0 4
23921: PUSH
23922: LD_VAR 0 6
23926: PUSH
23927: LD_INT 1
23929: ARRAY
23930: PPUSH
23931: LD_VAR 0 2
23935: PPUSH
23936: CALL_OW 259
23940: ST_TO_ADDR
// if s1 = 1 then
23941: LD_VAR 0 2
23945: PUSH
23946: LD_INT 1
23948: EQUAL
23949: IFFALSE 23969
// s2 := rand ( 2 , 4 ) else
23951: LD_ADDR_VAR 0 3
23955: PUSH
23956: LD_INT 2
23958: PPUSH
23959: LD_INT 4
23961: PPUSH
23962: CALL_OW 12
23966: ST_TO_ADDR
23967: GO 23977
// s2 := 1 ;
23969: LD_ADDR_VAR 0 3
23973: PUSH
23974: LD_INT 1
23976: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23977: LD_ADDR_VAR 0 5
23981: PUSH
23982: LD_VAR 0 6
23986: PUSH
23987: LD_INT 1
23989: ARRAY
23990: PPUSH
23991: LD_VAR 0 3
23995: PPUSH
23996: CALL_OW 259
24000: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24001: LD_VAR 0 6
24005: PUSH
24006: LD_INT 1
24008: ARRAY
24009: PPUSH
24010: LD_VAR 0 2
24014: PPUSH
24015: LD_VAR 0 5
24019: PPUSH
24020: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24024: LD_VAR 0 6
24028: PUSH
24029: LD_INT 1
24031: ARRAY
24032: PPUSH
24033: LD_VAR 0 3
24037: PPUSH
24038: LD_VAR 0 4
24042: PPUSH
24043: CALL_OW 237
// end ;
24047: PPOPN 6
24049: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24050: LD_EXP 63
24054: PUSH
24055: LD_EXP 110
24059: AND
24060: IFFALSE 24139
24062: GO 24064
24064: DISABLE
24065: LD_INT 0
24067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24068: LD_ADDR_VAR 0 1
24072: PUSH
24073: LD_INT 22
24075: PUSH
24076: LD_OWVAR 2
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 30
24087: PUSH
24088: LD_INT 3
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PPUSH
24099: CALL_OW 69
24103: ST_TO_ADDR
// if not tmp then
24104: LD_VAR 0 1
24108: NOT
24109: IFFALSE 24113
// exit ;
24111: GO 24139
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24113: LD_VAR 0 1
24117: PUSH
24118: LD_INT 1
24120: PPUSH
24121: LD_VAR 0 1
24125: PPUSH
24126: CALL_OW 12
24130: ARRAY
24131: PPUSH
24132: LD_INT 1
24134: PPUSH
24135: CALL_OW 234
// end ;
24139: PPOPN 1
24141: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24142: LD_EXP 63
24146: PUSH
24147: LD_EXP 111
24151: AND
24152: IFFALSE 24264
24154: GO 24156
24156: DISABLE
24157: LD_INT 0
24159: PPUSH
24160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24161: LD_ADDR_VAR 0 2
24165: PUSH
24166: LD_INT 22
24168: PUSH
24169: LD_OWVAR 2
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 2
24180: PUSH
24181: LD_INT 30
24183: PUSH
24184: LD_INT 27
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 30
24193: PUSH
24194: LD_INT 26
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 30
24203: PUSH
24204: LD_INT 28
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PPUSH
24221: CALL_OW 69
24225: ST_TO_ADDR
// if not tmp then
24226: LD_VAR 0 2
24230: NOT
24231: IFFALSE 24235
// exit ;
24233: GO 24264
// for i in tmp do
24235: LD_ADDR_VAR 0 1
24239: PUSH
24240: LD_VAR 0 2
24244: PUSH
24245: FOR_IN
24246: IFFALSE 24262
// SetLives ( i , 1 ) ;
24248: LD_VAR 0 1
24252: PPUSH
24253: LD_INT 1
24255: PPUSH
24256: CALL_OW 234
24260: GO 24245
24262: POP
24263: POP
// end ;
24264: PPOPN 2
24266: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24267: LD_EXP 63
24271: PUSH
24272: LD_EXP 112
24276: AND
24277: IFFALSE 24564
24279: GO 24281
24281: DISABLE
24282: LD_INT 0
24284: PPUSH
24285: PPUSH
24286: PPUSH
// begin i := rand ( 1 , 7 ) ;
24287: LD_ADDR_VAR 0 1
24291: PUSH
24292: LD_INT 1
24294: PPUSH
24295: LD_INT 7
24297: PPUSH
24298: CALL_OW 12
24302: ST_TO_ADDR
// case i of 1 :
24303: LD_VAR 0 1
24307: PUSH
24308: LD_INT 1
24310: DOUBLE
24311: EQUAL
24312: IFTRUE 24316
24314: GO 24326
24316: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24317: LD_STRING earthquake(getX(game), 0, 32)
24319: PPUSH
24320: CALL_OW 559
24324: GO 24564
24326: LD_INT 2
24328: DOUBLE
24329: EQUAL
24330: IFTRUE 24334
24332: GO 24348
24334: POP
// begin ToLua ( displayStucuk(); ) ;
24335: LD_STRING displayStucuk();
24337: PPUSH
24338: CALL_OW 559
// ResetFog ;
24342: CALL_OW 335
// end ; 3 :
24346: GO 24564
24348: LD_INT 3
24350: DOUBLE
24351: EQUAL
24352: IFTRUE 24356
24354: GO 24460
24356: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24357: LD_ADDR_VAR 0 2
24361: PUSH
24362: LD_INT 22
24364: PUSH
24365: LD_OWVAR 2
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 25
24376: PUSH
24377: LD_INT 1
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PPUSH
24388: CALL_OW 69
24392: ST_TO_ADDR
// if not tmp then
24393: LD_VAR 0 2
24397: NOT
24398: IFFALSE 24402
// exit ;
24400: GO 24564
// un := tmp [ rand ( 1 , tmp ) ] ;
24402: LD_ADDR_VAR 0 3
24406: PUSH
24407: LD_VAR 0 2
24411: PUSH
24412: LD_INT 1
24414: PPUSH
24415: LD_VAR 0 2
24419: PPUSH
24420: CALL_OW 12
24424: ARRAY
24425: ST_TO_ADDR
// if Crawls ( un ) then
24426: LD_VAR 0 3
24430: PPUSH
24431: CALL_OW 318
24435: IFFALSE 24446
// ComWalk ( un ) ;
24437: LD_VAR 0 3
24441: PPUSH
24442: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24446: LD_VAR 0 3
24450: PPUSH
24451: LD_INT 8
24453: PPUSH
24454: CALL_OW 336
// end ; 4 :
24458: GO 24564
24460: LD_INT 4
24462: DOUBLE
24463: EQUAL
24464: IFTRUE 24468
24466: GO 24542
24468: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24469: LD_ADDR_VAR 0 2
24473: PUSH
24474: LD_INT 22
24476: PUSH
24477: LD_OWVAR 2
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 30
24488: PUSH
24489: LD_INT 29
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PPUSH
24500: CALL_OW 69
24504: ST_TO_ADDR
// if not tmp then
24505: LD_VAR 0 2
24509: NOT
24510: IFFALSE 24514
// exit ;
24512: GO 24564
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24514: LD_VAR 0 2
24518: PUSH
24519: LD_INT 1
24521: ARRAY
24522: PPUSH
24523: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24527: LD_VAR 0 2
24531: PUSH
24532: LD_INT 1
24534: ARRAY
24535: PPUSH
24536: CALL_OW 65
// end ; 5 .. 7 :
24540: GO 24564
24542: LD_INT 5
24544: DOUBLE
24545: GREATEREQUAL
24546: IFFALSE 24554
24548: LD_INT 7
24550: DOUBLE
24551: LESSEQUAL
24552: IFTRUE 24556
24554: GO 24563
24556: POP
// StreamSibBomb ; end ;
24557: CALL 20801 0 0
24561: GO 24564
24563: POP
// end ;
24564: PPOPN 3
24566: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24567: LD_EXP 63
24571: PUSH
24572: LD_EXP 113
24576: AND
24577: IFFALSE 24733
24579: GO 24581
24581: DISABLE
24582: LD_INT 0
24584: PPUSH
24585: PPUSH
24586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24587: LD_ADDR_VAR 0 2
24591: PUSH
24592: LD_INT 81
24594: PUSH
24595: LD_OWVAR 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 2
24606: PUSH
24607: LD_INT 21
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 21
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: LIST
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PPUSH
24636: CALL_OW 69
24640: ST_TO_ADDR
// if not tmp then
24641: LD_VAR 0 2
24645: NOT
24646: IFFALSE 24650
// exit ;
24648: GO 24733
// p := 0 ;
24650: LD_ADDR_VAR 0 3
24654: PUSH
24655: LD_INT 0
24657: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24658: LD_INT 35
24660: PPUSH
24661: CALL_OW 67
// p := p + 1 ;
24665: LD_ADDR_VAR 0 3
24669: PUSH
24670: LD_VAR 0 3
24674: PUSH
24675: LD_INT 1
24677: PLUS
24678: ST_TO_ADDR
// for i in tmp do
24679: LD_ADDR_VAR 0 1
24683: PUSH
24684: LD_VAR 0 2
24688: PUSH
24689: FOR_IN
24690: IFFALSE 24721
// if GetLives ( i ) < 1000 then
24692: LD_VAR 0 1
24696: PPUSH
24697: CALL_OW 256
24701: PUSH
24702: LD_INT 1000
24704: LESS
24705: IFFALSE 24719
// SetLives ( i , 1000 ) ;
24707: LD_VAR 0 1
24711: PPUSH
24712: LD_INT 1000
24714: PPUSH
24715: CALL_OW 234
24719: GO 24689
24721: POP
24722: POP
// until p > 20 ;
24723: LD_VAR 0 3
24727: PUSH
24728: LD_INT 20
24730: GREATER
24731: IFFALSE 24658
// end ;
24733: PPOPN 3
24735: END
// every 0 0$1 trigger StreamModeActive and sTime do
24736: LD_EXP 63
24740: PUSH
24741: LD_EXP 114
24745: AND
24746: IFFALSE 24781
24748: GO 24750
24750: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24751: LD_INT 28
24753: PPUSH
24754: LD_OWVAR 2
24758: PPUSH
24759: LD_INT 2
24761: PPUSH
24762: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24766: LD_INT 30
24768: PPUSH
24769: LD_OWVAR 2
24773: PPUSH
24774: LD_INT 2
24776: PPUSH
24777: CALL_OW 322
// end ;
24781: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24782: LD_EXP 63
24786: PUSH
24787: LD_EXP 115
24791: AND
24792: IFFALSE 24913
24794: GO 24796
24796: DISABLE
24797: LD_INT 0
24799: PPUSH
24800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24801: LD_ADDR_VAR 0 2
24805: PUSH
24806: LD_INT 22
24808: PUSH
24809: LD_OWVAR 2
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 21
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 3
24830: PUSH
24831: LD_INT 23
24833: PUSH
24834: LD_INT 0
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: LIST
24849: PPUSH
24850: CALL_OW 69
24854: ST_TO_ADDR
// if not tmp then
24855: LD_VAR 0 2
24859: NOT
24860: IFFALSE 24864
// exit ;
24862: GO 24913
// for i in tmp do
24864: LD_ADDR_VAR 0 1
24868: PUSH
24869: LD_VAR 0 2
24873: PUSH
24874: FOR_IN
24875: IFFALSE 24911
// begin if Crawls ( i ) then
24877: LD_VAR 0 1
24881: PPUSH
24882: CALL_OW 318
24886: IFFALSE 24897
// ComWalk ( i ) ;
24888: LD_VAR 0 1
24892: PPUSH
24893: CALL_OW 138
// SetClass ( i , 2 ) ;
24897: LD_VAR 0 1
24901: PPUSH
24902: LD_INT 2
24904: PPUSH
24905: CALL_OW 336
// end ;
24909: GO 24874
24911: POP
24912: POP
// end ;
24913: PPOPN 2
24915: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24916: LD_EXP 63
24920: PUSH
24921: LD_EXP 116
24925: AND
24926: IFFALSE 25214
24928: GO 24930
24930: DISABLE
24931: LD_INT 0
24933: PPUSH
24934: PPUSH
24935: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24936: LD_OWVAR 2
24940: PPUSH
24941: LD_INT 9
24943: PPUSH
24944: LD_INT 1
24946: PPUSH
24947: LD_INT 1
24949: PPUSH
24950: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24954: LD_INT 9
24956: PPUSH
24957: LD_OWVAR 2
24961: PPUSH
24962: CALL_OW 343
// uc_side := 9 ;
24966: LD_ADDR_OWVAR 20
24970: PUSH
24971: LD_INT 9
24973: ST_TO_ADDR
// uc_nation := 2 ;
24974: LD_ADDR_OWVAR 21
24978: PUSH
24979: LD_INT 2
24981: ST_TO_ADDR
// hc_name := Dark Warrior ;
24982: LD_ADDR_OWVAR 26
24986: PUSH
24987: LD_STRING Dark Warrior
24989: ST_TO_ADDR
// hc_gallery :=  ;
24990: LD_ADDR_OWVAR 33
24994: PUSH
24995: LD_STRING 
24997: ST_TO_ADDR
// hc_noskilllimit := true ;
24998: LD_ADDR_OWVAR 76
25002: PUSH
25003: LD_INT 1
25005: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25006: LD_ADDR_OWVAR 31
25010: PUSH
25011: LD_INT 30
25013: PUSH
25014: LD_INT 30
25016: PUSH
25017: LD_INT 30
25019: PUSH
25020: LD_INT 30
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: ST_TO_ADDR
// un := CreateHuman ;
25029: LD_ADDR_VAR 0 3
25033: PUSH
25034: CALL_OW 44
25038: ST_TO_ADDR
// hc_noskilllimit := false ;
25039: LD_ADDR_OWVAR 76
25043: PUSH
25044: LD_INT 0
25046: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25047: LD_VAR 0 3
25051: PPUSH
25052: LD_INT 1
25054: PPUSH
25055: CALL_OW 51
// ToLua ( playRanger() ) ;
25059: LD_STRING playRanger()
25061: PPUSH
25062: CALL_OW 559
// p := 0 ;
25066: LD_ADDR_VAR 0 2
25070: PUSH
25071: LD_INT 0
25073: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25074: LD_INT 35
25076: PPUSH
25077: CALL_OW 67
// p := p + 1 ;
25081: LD_ADDR_VAR 0 2
25085: PUSH
25086: LD_VAR 0 2
25090: PUSH
25091: LD_INT 1
25093: PLUS
25094: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25095: LD_VAR 0 3
25099: PPUSH
25100: CALL_OW 256
25104: PUSH
25105: LD_INT 1000
25107: LESS
25108: IFFALSE 25122
// SetLives ( un , 1000 ) ;
25110: LD_VAR 0 3
25114: PPUSH
25115: LD_INT 1000
25117: PPUSH
25118: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25122: LD_VAR 0 3
25126: PPUSH
25127: LD_INT 81
25129: PUSH
25130: LD_OWVAR 2
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 91
25141: PUSH
25142: LD_VAR 0 3
25146: PUSH
25147: LD_INT 30
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: LIST
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PPUSH
25159: CALL_OW 69
25163: PPUSH
25164: LD_VAR 0 3
25168: PPUSH
25169: CALL_OW 74
25173: PPUSH
25174: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25178: LD_VAR 0 2
25182: PUSH
25183: LD_INT 80
25185: GREATER
25186: PUSH
25187: LD_VAR 0 3
25191: PPUSH
25192: CALL_OW 301
25196: OR
25197: IFFALSE 25074
// if un then
25199: LD_VAR 0 3
25203: IFFALSE 25214
// RemoveUnit ( un ) ;
25205: LD_VAR 0 3
25209: PPUSH
25210: CALL_OW 64
// end ;
25214: PPOPN 3
25216: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25217: LD_EXP 117
25221: IFFALSE 25337
25223: GO 25225
25225: DISABLE
25226: LD_INT 0
25228: PPUSH
25229: PPUSH
25230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25231: LD_ADDR_VAR 0 2
25235: PUSH
25236: LD_INT 81
25238: PUSH
25239: LD_OWVAR 2
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 21
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PPUSH
25262: CALL_OW 69
25266: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25267: LD_STRING playComputer()
25269: PPUSH
25270: CALL_OW 559
// if not tmp then
25274: LD_VAR 0 2
25278: NOT
25279: IFFALSE 25283
// exit ;
25281: GO 25337
// for i in tmp do
25283: LD_ADDR_VAR 0 1
25287: PUSH
25288: LD_VAR 0 2
25292: PUSH
25293: FOR_IN
25294: IFFALSE 25335
// for j := 1 to 4 do
25296: LD_ADDR_VAR 0 3
25300: PUSH
25301: DOUBLE
25302: LD_INT 1
25304: DEC
25305: ST_TO_ADDR
25306: LD_INT 4
25308: PUSH
25309: FOR_TO
25310: IFFALSE 25331
// SetSkill ( i , j , 10 ) ;
25312: LD_VAR 0 1
25316: PPUSH
25317: LD_VAR 0 3
25321: PPUSH
25322: LD_INT 10
25324: PPUSH
25325: CALL_OW 237
25329: GO 25309
25331: POP
25332: POP
25333: GO 25293
25335: POP
25336: POP
// end ;
25337: PPOPN 3
25339: END
// every 0 0$1 trigger s30 do var i , tmp ;
25340: LD_EXP 118
25344: IFFALSE 25413
25346: GO 25348
25348: DISABLE
25349: LD_INT 0
25351: PPUSH
25352: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25353: LD_ADDR_VAR 0 2
25357: PUSH
25358: LD_INT 22
25360: PUSH
25361: LD_OWVAR 2
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PPUSH
25370: CALL_OW 69
25374: ST_TO_ADDR
// if not tmp then
25375: LD_VAR 0 2
25379: NOT
25380: IFFALSE 25384
// exit ;
25382: GO 25413
// for i in tmp do
25384: LD_ADDR_VAR 0 1
25388: PUSH
25389: LD_VAR 0 2
25393: PUSH
25394: FOR_IN
25395: IFFALSE 25411
// SetLives ( i , 300 ) ;
25397: LD_VAR 0 1
25401: PPUSH
25402: LD_INT 300
25404: PPUSH
25405: CALL_OW 234
25409: GO 25394
25411: POP
25412: POP
// end ;
25413: PPOPN 2
25415: END
// every 0 0$1 trigger s60 do var i , tmp ;
25416: LD_EXP 119
25420: IFFALSE 25489
25422: GO 25424
25424: DISABLE
25425: LD_INT 0
25427: PPUSH
25428: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25429: LD_ADDR_VAR 0 2
25433: PUSH
25434: LD_INT 22
25436: PUSH
25437: LD_OWVAR 2
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PPUSH
25446: CALL_OW 69
25450: ST_TO_ADDR
// if not tmp then
25451: LD_VAR 0 2
25455: NOT
25456: IFFALSE 25460
// exit ;
25458: GO 25489
// for i in tmp do
25460: LD_ADDR_VAR 0 1
25464: PUSH
25465: LD_VAR 0 2
25469: PUSH
25470: FOR_IN
25471: IFFALSE 25487
// SetLives ( i , 600 ) ;
25473: LD_VAR 0 1
25477: PPUSH
25478: LD_INT 600
25480: PPUSH
25481: CALL_OW 234
25485: GO 25470
25487: POP
25488: POP
// end ;
25489: PPOPN 2
25491: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25492: LD_INT 0
25494: PPUSH
// case cmd of 301 :
25495: LD_VAR 0 1
25499: PUSH
25500: LD_INT 301
25502: DOUBLE
25503: EQUAL
25504: IFTRUE 25508
25506: GO 25540
25508: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25509: LD_VAR 0 6
25513: PPUSH
25514: LD_VAR 0 7
25518: PPUSH
25519: LD_VAR 0 8
25523: PPUSH
25524: LD_VAR 0 4
25528: PPUSH
25529: LD_VAR 0 5
25533: PPUSH
25534: CALL 26741 0 5
25538: GO 25661
25540: LD_INT 302
25542: DOUBLE
25543: EQUAL
25544: IFTRUE 25548
25546: GO 25585
25548: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25549: LD_VAR 0 6
25553: PPUSH
25554: LD_VAR 0 7
25558: PPUSH
25559: LD_VAR 0 8
25563: PPUSH
25564: LD_VAR 0 9
25568: PPUSH
25569: LD_VAR 0 4
25573: PPUSH
25574: LD_VAR 0 5
25578: PPUSH
25579: CALL 26832 0 6
25583: GO 25661
25585: LD_INT 303
25587: DOUBLE
25588: EQUAL
25589: IFTRUE 25593
25591: GO 25630
25593: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25594: LD_VAR 0 6
25598: PPUSH
25599: LD_VAR 0 7
25603: PPUSH
25604: LD_VAR 0 8
25608: PPUSH
25609: LD_VAR 0 9
25613: PPUSH
25614: LD_VAR 0 4
25618: PPUSH
25619: LD_VAR 0 5
25623: PPUSH
25624: CALL 25666 0 6
25628: GO 25661
25630: LD_INT 304
25632: DOUBLE
25633: EQUAL
25634: IFTRUE 25638
25636: GO 25660
25638: POP
// hHackTeleport ( unit , x , y ) ; end ;
25639: LD_VAR 0 2
25643: PPUSH
25644: LD_VAR 0 4
25648: PPUSH
25649: LD_VAR 0 5
25653: PPUSH
25654: CALL 27425 0 3
25658: GO 25661
25660: POP
// end ;
25661: LD_VAR 0 12
25665: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25666: LD_INT 0
25668: PPUSH
25669: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25670: LD_VAR 0 1
25674: PUSH
25675: LD_INT 1
25677: LESS
25678: PUSH
25679: LD_VAR 0 1
25683: PUSH
25684: LD_INT 3
25686: GREATER
25687: OR
25688: PUSH
25689: LD_VAR 0 5
25693: PPUSH
25694: LD_VAR 0 6
25698: PPUSH
25699: CALL_OW 428
25703: OR
25704: IFFALSE 25708
// exit ;
25706: GO 26428
// uc_side := your_side ;
25708: LD_ADDR_OWVAR 20
25712: PUSH
25713: LD_OWVAR 2
25717: ST_TO_ADDR
// uc_nation := nation ;
25718: LD_ADDR_OWVAR 21
25722: PUSH
25723: LD_VAR 0 1
25727: ST_TO_ADDR
// bc_level = 1 ;
25728: LD_ADDR_OWVAR 43
25732: PUSH
25733: LD_INT 1
25735: ST_TO_ADDR
// case btype of 1 :
25736: LD_VAR 0 2
25740: PUSH
25741: LD_INT 1
25743: DOUBLE
25744: EQUAL
25745: IFTRUE 25749
25747: GO 25760
25749: POP
// bc_type := b_depot ; 2 :
25750: LD_ADDR_OWVAR 42
25754: PUSH
25755: LD_INT 0
25757: ST_TO_ADDR
25758: GO 26372
25760: LD_INT 2
25762: DOUBLE
25763: EQUAL
25764: IFTRUE 25768
25766: GO 25779
25768: POP
// bc_type := b_warehouse ; 3 :
25769: LD_ADDR_OWVAR 42
25773: PUSH
25774: LD_INT 1
25776: ST_TO_ADDR
25777: GO 26372
25779: LD_INT 3
25781: DOUBLE
25782: EQUAL
25783: IFTRUE 25787
25785: GO 25798
25787: POP
// bc_type := b_lab ; 4 .. 9 :
25788: LD_ADDR_OWVAR 42
25792: PUSH
25793: LD_INT 6
25795: ST_TO_ADDR
25796: GO 26372
25798: LD_INT 4
25800: DOUBLE
25801: GREATEREQUAL
25802: IFFALSE 25810
25804: LD_INT 9
25806: DOUBLE
25807: LESSEQUAL
25808: IFTRUE 25812
25810: GO 25864
25812: POP
// begin bc_type := b_lab_half ;
25813: LD_ADDR_OWVAR 42
25817: PUSH
25818: LD_INT 7
25820: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25821: LD_ADDR_OWVAR 44
25825: PUSH
25826: LD_INT 10
25828: PUSH
25829: LD_INT 11
25831: PUSH
25832: LD_INT 12
25834: PUSH
25835: LD_INT 15
25837: PUSH
25838: LD_INT 14
25840: PUSH
25841: LD_INT 13
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: PUSH
25852: LD_VAR 0 2
25856: PUSH
25857: LD_INT 3
25859: MINUS
25860: ARRAY
25861: ST_TO_ADDR
// end ; 10 .. 13 :
25862: GO 26372
25864: LD_INT 10
25866: DOUBLE
25867: GREATEREQUAL
25868: IFFALSE 25876
25870: LD_INT 13
25872: DOUBLE
25873: LESSEQUAL
25874: IFTRUE 25878
25876: GO 25955
25878: POP
// begin bc_type := b_lab_full ;
25879: LD_ADDR_OWVAR 42
25883: PUSH
25884: LD_INT 8
25886: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25887: LD_ADDR_OWVAR 44
25891: PUSH
25892: LD_INT 10
25894: PUSH
25895: LD_INT 12
25897: PUSH
25898: LD_INT 14
25900: PUSH
25901: LD_INT 13
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: PUSH
25910: LD_VAR 0 2
25914: PUSH
25915: LD_INT 9
25917: MINUS
25918: ARRAY
25919: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25920: LD_ADDR_OWVAR 45
25924: PUSH
25925: LD_INT 11
25927: PUSH
25928: LD_INT 15
25930: PUSH
25931: LD_INT 12
25933: PUSH
25934: LD_INT 15
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: PUSH
25943: LD_VAR 0 2
25947: PUSH
25948: LD_INT 9
25950: MINUS
25951: ARRAY
25952: ST_TO_ADDR
// end ; 14 :
25953: GO 26372
25955: LD_INT 14
25957: DOUBLE
25958: EQUAL
25959: IFTRUE 25963
25961: GO 25974
25963: POP
// bc_type := b_workshop ; 15 :
25964: LD_ADDR_OWVAR 42
25968: PUSH
25969: LD_INT 2
25971: ST_TO_ADDR
25972: GO 26372
25974: LD_INT 15
25976: DOUBLE
25977: EQUAL
25978: IFTRUE 25982
25980: GO 25993
25982: POP
// bc_type := b_factory ; 16 :
25983: LD_ADDR_OWVAR 42
25987: PUSH
25988: LD_INT 3
25990: ST_TO_ADDR
25991: GO 26372
25993: LD_INT 16
25995: DOUBLE
25996: EQUAL
25997: IFTRUE 26001
25999: GO 26012
26001: POP
// bc_type := b_ext_gun ; 17 :
26002: LD_ADDR_OWVAR 42
26006: PUSH
26007: LD_INT 17
26009: ST_TO_ADDR
26010: GO 26372
26012: LD_INT 17
26014: DOUBLE
26015: EQUAL
26016: IFTRUE 26020
26018: GO 26048
26020: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26021: LD_ADDR_OWVAR 42
26025: PUSH
26026: LD_INT 19
26028: PUSH
26029: LD_INT 23
26031: PUSH
26032: LD_INT 19
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: LIST
26039: PUSH
26040: LD_VAR 0 1
26044: ARRAY
26045: ST_TO_ADDR
26046: GO 26372
26048: LD_INT 18
26050: DOUBLE
26051: EQUAL
26052: IFTRUE 26056
26054: GO 26067
26056: POP
// bc_type := b_ext_radar ; 19 :
26057: LD_ADDR_OWVAR 42
26061: PUSH
26062: LD_INT 20
26064: ST_TO_ADDR
26065: GO 26372
26067: LD_INT 19
26069: DOUBLE
26070: EQUAL
26071: IFTRUE 26075
26073: GO 26086
26075: POP
// bc_type := b_ext_radio ; 20 :
26076: LD_ADDR_OWVAR 42
26080: PUSH
26081: LD_INT 22
26083: ST_TO_ADDR
26084: GO 26372
26086: LD_INT 20
26088: DOUBLE
26089: EQUAL
26090: IFTRUE 26094
26092: GO 26105
26094: POP
// bc_type := b_ext_siberium ; 21 :
26095: LD_ADDR_OWVAR 42
26099: PUSH
26100: LD_INT 21
26102: ST_TO_ADDR
26103: GO 26372
26105: LD_INT 21
26107: DOUBLE
26108: EQUAL
26109: IFTRUE 26113
26111: GO 26124
26113: POP
// bc_type := b_ext_computer ; 22 :
26114: LD_ADDR_OWVAR 42
26118: PUSH
26119: LD_INT 24
26121: ST_TO_ADDR
26122: GO 26372
26124: LD_INT 22
26126: DOUBLE
26127: EQUAL
26128: IFTRUE 26132
26130: GO 26143
26132: POP
// bc_type := b_ext_track ; 23 :
26133: LD_ADDR_OWVAR 42
26137: PUSH
26138: LD_INT 16
26140: ST_TO_ADDR
26141: GO 26372
26143: LD_INT 23
26145: DOUBLE
26146: EQUAL
26147: IFTRUE 26151
26149: GO 26162
26151: POP
// bc_type := b_ext_laser ; 24 :
26152: LD_ADDR_OWVAR 42
26156: PUSH
26157: LD_INT 25
26159: ST_TO_ADDR
26160: GO 26372
26162: LD_INT 24
26164: DOUBLE
26165: EQUAL
26166: IFTRUE 26170
26168: GO 26181
26170: POP
// bc_type := b_control_tower ; 25 :
26171: LD_ADDR_OWVAR 42
26175: PUSH
26176: LD_INT 36
26178: ST_TO_ADDR
26179: GO 26372
26181: LD_INT 25
26183: DOUBLE
26184: EQUAL
26185: IFTRUE 26189
26187: GO 26200
26189: POP
// bc_type := b_breastwork ; 26 :
26190: LD_ADDR_OWVAR 42
26194: PUSH
26195: LD_INT 31
26197: ST_TO_ADDR
26198: GO 26372
26200: LD_INT 26
26202: DOUBLE
26203: EQUAL
26204: IFTRUE 26208
26206: GO 26219
26208: POP
// bc_type := b_bunker ; 27 :
26209: LD_ADDR_OWVAR 42
26213: PUSH
26214: LD_INT 32
26216: ST_TO_ADDR
26217: GO 26372
26219: LD_INT 27
26221: DOUBLE
26222: EQUAL
26223: IFTRUE 26227
26225: GO 26238
26227: POP
// bc_type := b_turret ; 28 :
26228: LD_ADDR_OWVAR 42
26232: PUSH
26233: LD_INT 33
26235: ST_TO_ADDR
26236: GO 26372
26238: LD_INT 28
26240: DOUBLE
26241: EQUAL
26242: IFTRUE 26246
26244: GO 26257
26246: POP
// bc_type := b_armoury ; 29 :
26247: LD_ADDR_OWVAR 42
26251: PUSH
26252: LD_INT 4
26254: ST_TO_ADDR
26255: GO 26372
26257: LD_INT 29
26259: DOUBLE
26260: EQUAL
26261: IFTRUE 26265
26263: GO 26276
26265: POP
// bc_type := b_barracks ; 30 :
26266: LD_ADDR_OWVAR 42
26270: PUSH
26271: LD_INT 5
26273: ST_TO_ADDR
26274: GO 26372
26276: LD_INT 30
26278: DOUBLE
26279: EQUAL
26280: IFTRUE 26284
26282: GO 26295
26284: POP
// bc_type := b_solar_power ; 31 :
26285: LD_ADDR_OWVAR 42
26289: PUSH
26290: LD_INT 27
26292: ST_TO_ADDR
26293: GO 26372
26295: LD_INT 31
26297: DOUBLE
26298: EQUAL
26299: IFTRUE 26303
26301: GO 26314
26303: POP
// bc_type := b_oil_power ; 32 :
26304: LD_ADDR_OWVAR 42
26308: PUSH
26309: LD_INT 26
26311: ST_TO_ADDR
26312: GO 26372
26314: LD_INT 32
26316: DOUBLE
26317: EQUAL
26318: IFTRUE 26322
26320: GO 26333
26322: POP
// bc_type := b_siberite_power ; 33 :
26323: LD_ADDR_OWVAR 42
26327: PUSH
26328: LD_INT 28
26330: ST_TO_ADDR
26331: GO 26372
26333: LD_INT 33
26335: DOUBLE
26336: EQUAL
26337: IFTRUE 26341
26339: GO 26352
26341: POP
// bc_type := b_oil_mine ; 34 :
26342: LD_ADDR_OWVAR 42
26346: PUSH
26347: LD_INT 29
26349: ST_TO_ADDR
26350: GO 26372
26352: LD_INT 34
26354: DOUBLE
26355: EQUAL
26356: IFTRUE 26360
26358: GO 26371
26360: POP
// bc_type := b_siberite_mine ; end ;
26361: LD_ADDR_OWVAR 42
26365: PUSH
26366: LD_INT 30
26368: ST_TO_ADDR
26369: GO 26372
26371: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26372: LD_ADDR_VAR 0 8
26376: PUSH
26377: LD_VAR 0 5
26381: PPUSH
26382: LD_VAR 0 6
26386: PPUSH
26387: LD_VAR 0 3
26391: PPUSH
26392: CALL_OW 47
26396: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26397: LD_OWVAR 42
26401: PUSH
26402: LD_INT 32
26404: PUSH
26405: LD_INT 33
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: IN
26412: IFFALSE 26428
// PlaceWeaponTurret ( b , weapon ) ;
26414: LD_VAR 0 8
26418: PPUSH
26419: LD_VAR 0 4
26423: PPUSH
26424: CALL_OW 431
// end ;
26428: LD_VAR 0 7
26432: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26433: LD_INT 0
26435: PPUSH
26436: PPUSH
26437: PPUSH
26438: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26439: LD_ADDR_VAR 0 4
26443: PUSH
26444: LD_INT 22
26446: PUSH
26447: LD_OWVAR 2
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 2
26458: PUSH
26459: LD_INT 30
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 30
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: LIST
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PPUSH
26488: CALL_OW 69
26492: ST_TO_ADDR
// if not tmp then
26493: LD_VAR 0 4
26497: NOT
26498: IFFALSE 26502
// exit ;
26500: GO 26561
// for i in tmp do
26502: LD_ADDR_VAR 0 2
26506: PUSH
26507: LD_VAR 0 4
26511: PUSH
26512: FOR_IN
26513: IFFALSE 26559
// for j = 1 to 3 do
26515: LD_ADDR_VAR 0 3
26519: PUSH
26520: DOUBLE
26521: LD_INT 1
26523: DEC
26524: ST_TO_ADDR
26525: LD_INT 3
26527: PUSH
26528: FOR_TO
26529: IFFALSE 26555
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26531: LD_VAR 0 2
26535: PPUSH
26536: CALL_OW 274
26540: PPUSH
26541: LD_VAR 0 3
26545: PPUSH
26546: LD_INT 99999
26548: PPUSH
26549: CALL_OW 277
26553: GO 26528
26555: POP
26556: POP
26557: GO 26512
26559: POP
26560: POP
// end ;
26561: LD_VAR 0 1
26565: RET
// export function hHackSetLevel10 ; var i , j ; begin
26566: LD_INT 0
26568: PPUSH
26569: PPUSH
26570: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26571: LD_ADDR_VAR 0 2
26575: PUSH
26576: LD_INT 21
26578: PUSH
26579: LD_INT 1
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PPUSH
26586: CALL_OW 69
26590: PUSH
26591: FOR_IN
26592: IFFALSE 26644
// if IsSelected ( i ) then
26594: LD_VAR 0 2
26598: PPUSH
26599: CALL_OW 306
26603: IFFALSE 26642
// begin for j := 1 to 4 do
26605: LD_ADDR_VAR 0 3
26609: PUSH
26610: DOUBLE
26611: LD_INT 1
26613: DEC
26614: ST_TO_ADDR
26615: LD_INT 4
26617: PUSH
26618: FOR_TO
26619: IFFALSE 26640
// SetSkill ( i , j , 10 ) ;
26621: LD_VAR 0 2
26625: PPUSH
26626: LD_VAR 0 3
26630: PPUSH
26631: LD_INT 10
26633: PPUSH
26634: CALL_OW 237
26638: GO 26618
26640: POP
26641: POP
// end ;
26642: GO 26591
26644: POP
26645: POP
// end ;
26646: LD_VAR 0 1
26650: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26651: LD_INT 0
26653: PPUSH
26654: PPUSH
26655: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26656: LD_ADDR_VAR 0 2
26660: PUSH
26661: LD_INT 22
26663: PUSH
26664: LD_OWVAR 2
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 21
26675: PUSH
26676: LD_INT 1
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PPUSH
26687: CALL_OW 69
26691: PUSH
26692: FOR_IN
26693: IFFALSE 26734
// begin for j := 1 to 4 do
26695: LD_ADDR_VAR 0 3
26699: PUSH
26700: DOUBLE
26701: LD_INT 1
26703: DEC
26704: ST_TO_ADDR
26705: LD_INT 4
26707: PUSH
26708: FOR_TO
26709: IFFALSE 26730
// SetSkill ( i , j , 10 ) ;
26711: LD_VAR 0 2
26715: PPUSH
26716: LD_VAR 0 3
26720: PPUSH
26721: LD_INT 10
26723: PPUSH
26724: CALL_OW 237
26728: GO 26708
26730: POP
26731: POP
// end ;
26732: GO 26692
26734: POP
26735: POP
// end ;
26736: LD_VAR 0 1
26740: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26741: LD_INT 0
26743: PPUSH
// uc_side := your_side ;
26744: LD_ADDR_OWVAR 20
26748: PUSH
26749: LD_OWVAR 2
26753: ST_TO_ADDR
// uc_nation := nation ;
26754: LD_ADDR_OWVAR 21
26758: PUSH
26759: LD_VAR 0 1
26763: ST_TO_ADDR
// InitHc ;
26764: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26768: LD_INT 0
26770: PPUSH
26771: LD_VAR 0 2
26775: PPUSH
26776: LD_VAR 0 3
26780: PPUSH
26781: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26785: LD_VAR 0 4
26789: PPUSH
26790: LD_VAR 0 5
26794: PPUSH
26795: CALL_OW 428
26799: PUSH
26800: LD_INT 0
26802: EQUAL
26803: IFFALSE 26827
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26805: CALL_OW 44
26809: PPUSH
26810: LD_VAR 0 4
26814: PPUSH
26815: LD_VAR 0 5
26819: PPUSH
26820: LD_INT 1
26822: PPUSH
26823: CALL_OW 48
// end ;
26827: LD_VAR 0 6
26831: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26832: LD_INT 0
26834: PPUSH
26835: PPUSH
// uc_side := your_side ;
26836: LD_ADDR_OWVAR 20
26840: PUSH
26841: LD_OWVAR 2
26845: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26846: LD_VAR 0 1
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: LD_INT 2
26856: PUSH
26857: LD_INT 3
26859: PUSH
26860: LD_INT 4
26862: PUSH
26863: LD_INT 5
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: IN
26873: IFFALSE 26885
// uc_nation := nation_american else
26875: LD_ADDR_OWVAR 21
26879: PUSH
26880: LD_INT 1
26882: ST_TO_ADDR
26883: GO 26928
// if chassis in [ 11 , 12 , 13 , 14 ] then
26885: LD_VAR 0 1
26889: PUSH
26890: LD_INT 11
26892: PUSH
26893: LD_INT 12
26895: PUSH
26896: LD_INT 13
26898: PUSH
26899: LD_INT 14
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: IN
26908: IFFALSE 26920
// uc_nation := nation_arabian else
26910: LD_ADDR_OWVAR 21
26914: PUSH
26915: LD_INT 2
26917: ST_TO_ADDR
26918: GO 26928
// uc_nation := nation_russian ;
26920: LD_ADDR_OWVAR 21
26924: PUSH
26925: LD_INT 3
26927: ST_TO_ADDR
// vc_chassis := chassis ;
26928: LD_ADDR_OWVAR 37
26932: PUSH
26933: LD_VAR 0 1
26937: ST_TO_ADDR
// vc_engine := engine ;
26938: LD_ADDR_OWVAR 39
26942: PUSH
26943: LD_VAR 0 2
26947: ST_TO_ADDR
// vc_control := control ;
26948: LD_ADDR_OWVAR 38
26952: PUSH
26953: LD_VAR 0 3
26957: ST_TO_ADDR
// vc_weapon := weapon ;
26958: LD_ADDR_OWVAR 40
26962: PUSH
26963: LD_VAR 0 4
26967: ST_TO_ADDR
// un := CreateVehicle ;
26968: LD_ADDR_VAR 0 8
26972: PUSH
26973: CALL_OW 45
26977: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26978: LD_VAR 0 8
26982: PPUSH
26983: LD_INT 0
26985: PPUSH
26986: LD_INT 5
26988: PPUSH
26989: CALL_OW 12
26993: PPUSH
26994: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26998: LD_VAR 0 8
27002: PPUSH
27003: LD_VAR 0 5
27007: PPUSH
27008: LD_VAR 0 6
27012: PPUSH
27013: LD_INT 1
27015: PPUSH
27016: CALL_OW 48
// end ;
27020: LD_VAR 0 7
27024: RET
// export hInvincible ; every 1 do
27025: GO 27027
27027: DISABLE
// hInvincible := [ ] ;
27028: LD_ADDR_EXP 120
27032: PUSH
27033: EMPTY
27034: ST_TO_ADDR
27035: END
// every 10 do var i ;
27036: GO 27038
27038: DISABLE
27039: LD_INT 0
27041: PPUSH
// begin enable ;
27042: ENABLE
// if not hInvincible then
27043: LD_EXP 120
27047: NOT
27048: IFFALSE 27052
// exit ;
27050: GO 27096
// for i in hInvincible do
27052: LD_ADDR_VAR 0 1
27056: PUSH
27057: LD_EXP 120
27061: PUSH
27062: FOR_IN
27063: IFFALSE 27094
// if GetLives ( i ) < 1000 then
27065: LD_VAR 0 1
27069: PPUSH
27070: CALL_OW 256
27074: PUSH
27075: LD_INT 1000
27077: LESS
27078: IFFALSE 27092
// SetLives ( i , 1000 ) ;
27080: LD_VAR 0 1
27084: PPUSH
27085: LD_INT 1000
27087: PPUSH
27088: CALL_OW 234
27092: GO 27062
27094: POP
27095: POP
// end ;
27096: PPOPN 1
27098: END
// export function hHackInvincible ; var i ; begin
27099: LD_INT 0
27101: PPUSH
27102: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27103: LD_ADDR_VAR 0 2
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: LD_INT 21
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 21
27123: PUSH
27124: LD_INT 2
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: LIST
27135: PPUSH
27136: CALL_OW 69
27140: PUSH
27141: FOR_IN
27142: IFFALSE 27203
// if IsSelected ( i ) then
27144: LD_VAR 0 2
27148: PPUSH
27149: CALL_OW 306
27153: IFFALSE 27201
// begin if i in hInvincible then
27155: LD_VAR 0 2
27159: PUSH
27160: LD_EXP 120
27164: IN
27165: IFFALSE 27185
// hInvincible := hInvincible diff i else
27167: LD_ADDR_EXP 120
27171: PUSH
27172: LD_EXP 120
27176: PUSH
27177: LD_VAR 0 2
27181: DIFF
27182: ST_TO_ADDR
27183: GO 27201
// hInvincible := hInvincible union i ;
27185: LD_ADDR_EXP 120
27189: PUSH
27190: LD_EXP 120
27194: PUSH
27195: LD_VAR 0 2
27199: UNION
27200: ST_TO_ADDR
// end ;
27201: GO 27141
27203: POP
27204: POP
// end ;
27205: LD_VAR 0 1
27209: RET
// export function hHackInvisible ; var i , j ; begin
27210: LD_INT 0
27212: PPUSH
27213: PPUSH
27214: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27215: LD_ADDR_VAR 0 2
27219: PUSH
27220: LD_INT 21
27222: PUSH
27223: LD_INT 1
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PPUSH
27230: CALL_OW 69
27234: PUSH
27235: FOR_IN
27236: IFFALSE 27260
// if IsSelected ( i ) then
27238: LD_VAR 0 2
27242: PPUSH
27243: CALL_OW 306
27247: IFFALSE 27258
// ComForceInvisible ( i ) ;
27249: LD_VAR 0 2
27253: PPUSH
27254: CALL_OW 496
27258: GO 27235
27260: POP
27261: POP
// end ;
27262: LD_VAR 0 1
27266: RET
// export function hHackChangeYourSide ; begin
27267: LD_INT 0
27269: PPUSH
// if your_side = 8 then
27270: LD_OWVAR 2
27274: PUSH
27275: LD_INT 8
27277: EQUAL
27278: IFFALSE 27290
// your_side := 0 else
27280: LD_ADDR_OWVAR 2
27284: PUSH
27285: LD_INT 0
27287: ST_TO_ADDR
27288: GO 27304
// your_side := your_side + 1 ;
27290: LD_ADDR_OWVAR 2
27294: PUSH
27295: LD_OWVAR 2
27299: PUSH
27300: LD_INT 1
27302: PLUS
27303: ST_TO_ADDR
// end ;
27304: LD_VAR 0 1
27308: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27309: LD_INT 0
27311: PPUSH
27312: PPUSH
27313: PPUSH
// for i in all_units do
27314: LD_ADDR_VAR 0 2
27318: PUSH
27319: LD_OWVAR 3
27323: PUSH
27324: FOR_IN
27325: IFFALSE 27403
// if IsSelected ( i ) then
27327: LD_VAR 0 2
27331: PPUSH
27332: CALL_OW 306
27336: IFFALSE 27401
// begin j := GetSide ( i ) ;
27338: LD_ADDR_VAR 0 3
27342: PUSH
27343: LD_VAR 0 2
27347: PPUSH
27348: CALL_OW 255
27352: ST_TO_ADDR
// if j = 8 then
27353: LD_VAR 0 3
27357: PUSH
27358: LD_INT 8
27360: EQUAL
27361: IFFALSE 27373
// j := 0 else
27363: LD_ADDR_VAR 0 3
27367: PUSH
27368: LD_INT 0
27370: ST_TO_ADDR
27371: GO 27387
// j := j + 1 ;
27373: LD_ADDR_VAR 0 3
27377: PUSH
27378: LD_VAR 0 3
27382: PUSH
27383: LD_INT 1
27385: PLUS
27386: ST_TO_ADDR
// SetSide ( i , j ) ;
27387: LD_VAR 0 2
27391: PPUSH
27392: LD_VAR 0 3
27396: PPUSH
27397: CALL_OW 235
// end ;
27401: GO 27324
27403: POP
27404: POP
// end ;
27405: LD_VAR 0 1
27409: RET
// export function hHackFog ; begin
27410: LD_INT 0
27412: PPUSH
// FogOff ( true ) ;
27413: LD_INT 1
27415: PPUSH
27416: CALL_OW 344
// end ;
27420: LD_VAR 0 1
27424: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27425: LD_INT 0
27427: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27428: LD_VAR 0 1
27432: PPUSH
27433: LD_VAR 0 2
27437: PPUSH
27438: LD_VAR 0 3
27442: PPUSH
27443: LD_INT 1
27445: PPUSH
27446: LD_INT 1
27448: PPUSH
27449: CALL_OW 483
// CenterOnXY ( x , y ) ;
27453: LD_VAR 0 2
27457: PPUSH
27458: LD_VAR 0 3
27462: PPUSH
27463: CALL_OW 84
// end ; end_of_file
27467: LD_VAR 0 4
27471: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27472: LD_INT 0
27474: PPUSH
27475: PPUSH
27476: PPUSH
27477: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27478: LD_VAR 0 1
27482: PPUSH
27483: CALL_OW 264
27487: PUSH
27488: LD_EXP 47
27492: EQUAL
27493: IFFALSE 27565
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27495: LD_INT 68
27497: PPUSH
27498: LD_VAR 0 1
27502: PPUSH
27503: CALL_OW 255
27507: PPUSH
27508: CALL_OW 321
27512: PUSH
27513: LD_INT 2
27515: EQUAL
27516: IFFALSE 27528
// eff := 70 else
27518: LD_ADDR_VAR 0 4
27522: PUSH
27523: LD_INT 70
27525: ST_TO_ADDR
27526: GO 27536
// eff := 30 ;
27528: LD_ADDR_VAR 0 4
27532: PUSH
27533: LD_INT 30
27535: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27536: LD_VAR 0 1
27540: PPUSH
27541: CALL_OW 250
27545: PPUSH
27546: LD_VAR 0 1
27550: PPUSH
27551: CALL_OW 251
27555: PPUSH
27556: LD_VAR 0 4
27560: PPUSH
27561: CALL_OW 495
// end ; end ;
27565: LD_VAR 0 2
27569: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27570: LD_INT 0
27572: PPUSH
// end ;
27573: LD_VAR 0 4
27577: RET
// export function SOS_Command ( cmd ) ; begin
27578: LD_INT 0
27580: PPUSH
// end ;
27581: LD_VAR 0 2
27585: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27586: LD_INT 0
27588: PPUSH
// end ;
27589: LD_VAR 0 6
27593: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27594: LD_INT 0
27596: PPUSH
27597: PPUSH
// if not vehicle or not factory then
27598: LD_VAR 0 1
27602: NOT
27603: PUSH
27604: LD_VAR 0 2
27608: NOT
27609: OR
27610: IFFALSE 27614
// exit ;
27612: GO 27845
// if factoryWaypoints >= factory then
27614: LD_EXP 121
27618: PUSH
27619: LD_VAR 0 2
27623: GREATEREQUAL
27624: IFFALSE 27845
// if factoryWaypoints [ factory ] then
27626: LD_EXP 121
27630: PUSH
27631: LD_VAR 0 2
27635: ARRAY
27636: IFFALSE 27845
// begin if GetControl ( vehicle ) = control_manual then
27638: LD_VAR 0 1
27642: PPUSH
27643: CALL_OW 263
27647: PUSH
27648: LD_INT 1
27650: EQUAL
27651: IFFALSE 27732
// begin driver := IsDrivenBy ( vehicle ) ;
27653: LD_ADDR_VAR 0 4
27657: PUSH
27658: LD_VAR 0 1
27662: PPUSH
27663: CALL_OW 311
27667: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27668: LD_VAR 0 4
27672: PPUSH
27673: LD_EXP 121
27677: PUSH
27678: LD_VAR 0 2
27682: ARRAY
27683: PUSH
27684: LD_INT 3
27686: ARRAY
27687: PPUSH
27688: LD_EXP 121
27692: PUSH
27693: LD_VAR 0 2
27697: ARRAY
27698: PUSH
27699: LD_INT 4
27701: ARRAY
27702: PPUSH
27703: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27707: LD_VAR 0 4
27711: PPUSH
27712: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27716: LD_VAR 0 4
27720: PPUSH
27721: LD_VAR 0 2
27725: PPUSH
27726: CALL_OW 180
// end else
27730: GO 27845
// if GetControl ( vehicle ) = control_remote then
27732: LD_VAR 0 1
27736: PPUSH
27737: CALL_OW 263
27741: PUSH
27742: LD_INT 2
27744: EQUAL
27745: IFFALSE 27806
// begin wait ( 0 0$2 ) ;
27747: LD_INT 70
27749: PPUSH
27750: CALL_OW 67
// if Connect ( vehicle ) then
27754: LD_VAR 0 1
27758: PPUSH
27759: CALL 40069 0 1
27763: IFFALSE 27804
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27765: LD_VAR 0 1
27769: PPUSH
27770: LD_EXP 121
27774: PUSH
27775: LD_VAR 0 2
27779: ARRAY
27780: PUSH
27781: LD_INT 3
27783: ARRAY
27784: PPUSH
27785: LD_EXP 121
27789: PUSH
27790: LD_VAR 0 2
27794: ARRAY
27795: PUSH
27796: LD_INT 4
27798: ARRAY
27799: PPUSH
27800: CALL_OW 171
// end else
27804: GO 27845
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27806: LD_VAR 0 1
27810: PPUSH
27811: LD_EXP 121
27815: PUSH
27816: LD_VAR 0 2
27820: ARRAY
27821: PUSH
27822: LD_INT 3
27824: ARRAY
27825: PPUSH
27826: LD_EXP 121
27830: PUSH
27831: LD_VAR 0 2
27835: ARRAY
27836: PUSH
27837: LD_INT 4
27839: ARRAY
27840: PPUSH
27841: CALL_OW 171
// end ; end ;
27845: LD_VAR 0 3
27849: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27850: LD_INT 0
27852: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27853: LD_VAR 0 1
27857: PUSH
27858: LD_INT 250
27860: EQUAL
27861: PUSH
27862: LD_VAR 0 2
27866: PPUSH
27867: CALL_OW 264
27871: PUSH
27872: LD_EXP 50
27876: EQUAL
27877: AND
27878: IFFALSE 27899
// MinerPlaceMine ( unit , x , y ) ;
27880: LD_VAR 0 2
27884: PPUSH
27885: LD_VAR 0 4
27889: PPUSH
27890: LD_VAR 0 5
27894: PPUSH
27895: CALL 30627 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27899: LD_VAR 0 1
27903: PUSH
27904: LD_INT 251
27906: EQUAL
27907: PUSH
27908: LD_VAR 0 2
27912: PPUSH
27913: CALL_OW 264
27917: PUSH
27918: LD_EXP 50
27922: EQUAL
27923: AND
27924: IFFALSE 27945
// MinerDetonateMine ( unit , x , y ) ;
27926: LD_VAR 0 2
27930: PPUSH
27931: LD_VAR 0 4
27935: PPUSH
27936: LD_VAR 0 5
27940: PPUSH
27941: CALL 30904 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27945: LD_VAR 0 1
27949: PUSH
27950: LD_INT 252
27952: EQUAL
27953: PUSH
27954: LD_VAR 0 2
27958: PPUSH
27959: CALL_OW 264
27963: PUSH
27964: LD_EXP 50
27968: EQUAL
27969: AND
27970: IFFALSE 27991
// MinerCreateMinefield ( unit , x , y ) ;
27972: LD_VAR 0 2
27976: PPUSH
27977: LD_VAR 0 4
27981: PPUSH
27982: LD_VAR 0 5
27986: PPUSH
27987: CALL 31321 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27991: LD_VAR 0 1
27995: PUSH
27996: LD_INT 253
27998: EQUAL
27999: PUSH
28000: LD_VAR 0 2
28004: PPUSH
28005: CALL_OW 257
28009: PUSH
28010: LD_INT 5
28012: EQUAL
28013: AND
28014: IFFALSE 28035
// ComBinocular ( unit , x , y ) ;
28016: LD_VAR 0 2
28020: PPUSH
28021: LD_VAR 0 4
28025: PPUSH
28026: LD_VAR 0 5
28030: PPUSH
28031: CALL 31692 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28035: LD_VAR 0 1
28039: PUSH
28040: LD_INT 254
28042: EQUAL
28043: PUSH
28044: LD_VAR 0 2
28048: PPUSH
28049: CALL_OW 264
28053: PUSH
28054: LD_EXP 45
28058: EQUAL
28059: AND
28060: PUSH
28061: LD_VAR 0 3
28065: PPUSH
28066: CALL_OW 263
28070: PUSH
28071: LD_INT 3
28073: EQUAL
28074: AND
28075: IFFALSE 28091
// HackDestroyVehicle ( unit , selectedUnit ) ;
28077: LD_VAR 0 2
28081: PPUSH
28082: LD_VAR 0 3
28086: PPUSH
28087: CALL 29987 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28091: LD_VAR 0 1
28095: PUSH
28096: LD_INT 255
28098: EQUAL
28099: PUSH
28100: LD_VAR 0 2
28104: PPUSH
28105: CALL_OW 264
28109: PUSH
28110: LD_INT 14
28112: PUSH
28113: LD_INT 53
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: IN
28120: AND
28121: PUSH
28122: LD_VAR 0 4
28126: PPUSH
28127: LD_VAR 0 5
28131: PPUSH
28132: CALL_OW 488
28136: AND
28137: IFFALSE 28161
// CutTreeXYR ( unit , x , y , 12 ) ;
28139: LD_VAR 0 2
28143: PPUSH
28144: LD_VAR 0 4
28148: PPUSH
28149: LD_VAR 0 5
28153: PPUSH
28154: LD_INT 12
28156: PPUSH
28157: CALL 28553 0 4
// if cmd = 256 then
28161: LD_VAR 0 1
28165: PUSH
28166: LD_INT 256
28168: EQUAL
28169: IFFALSE 28190
// SetFactoryWaypoint ( unit , x , y ) ;
28171: LD_VAR 0 2
28175: PPUSH
28176: LD_VAR 0 4
28180: PPUSH
28181: LD_VAR 0 5
28185: PPUSH
28186: CALL 28195 0 3
// end ;
28190: LD_VAR 0 6
28194: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
28195: LD_INT 0
28197: PPUSH
28198: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
28199: LD_VAR 0 1
28203: NOT
28204: PUSH
28205: LD_VAR 0 2
28209: PPUSH
28210: LD_VAR 0 3
28214: PPUSH
28215: CALL_OW 488
28219: NOT
28220: OR
28221: PUSH
28222: LD_VAR 0 1
28226: PPUSH
28227: CALL_OW 266
28231: PUSH
28232: LD_INT 3
28234: NONEQUAL
28235: PUSH
28236: LD_VAR 0 1
28240: PPUSH
28241: CALL_OW 247
28245: PUSH
28246: LD_INT 1
28248: EQUAL
28249: NOT
28250: AND
28251: OR
28252: IFFALSE 28256
// exit ;
28254: GO 28405
// if GetType ( factory ) = unit_human then
28256: LD_VAR 0 1
28260: PPUSH
28261: CALL_OW 247
28265: PUSH
28266: LD_INT 1
28268: EQUAL
28269: IFFALSE 28286
// factory := IsInUnit ( factory ) ;
28271: LD_ADDR_VAR 0 1
28275: PUSH
28276: LD_VAR 0 1
28280: PPUSH
28281: CALL_OW 310
28285: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
28286: LD_VAR 0 1
28290: PPUSH
28291: CALL_OW 266
28295: PUSH
28296: LD_INT 3
28298: NONEQUAL
28299: IFFALSE 28303
// exit ;
28301: GO 28405
// if HexInfo ( x , y ) = factory then
28303: LD_VAR 0 2
28307: PPUSH
28308: LD_VAR 0 3
28312: PPUSH
28313: CALL_OW 428
28317: PUSH
28318: LD_VAR 0 1
28322: EQUAL
28323: IFFALSE 28350
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
28325: LD_ADDR_EXP 121
28329: PUSH
28330: LD_EXP 121
28334: PPUSH
28335: LD_VAR 0 1
28339: PPUSH
28340: LD_INT 0
28342: PPUSH
28343: CALL_OW 1
28347: ST_TO_ADDR
28348: GO 28401
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
28350: LD_ADDR_EXP 121
28354: PUSH
28355: LD_EXP 121
28359: PPUSH
28360: LD_VAR 0 1
28364: PPUSH
28365: LD_VAR 0 1
28369: PPUSH
28370: CALL_OW 255
28374: PUSH
28375: LD_VAR 0 1
28379: PUSH
28380: LD_VAR 0 2
28384: PUSH
28385: LD_VAR 0 3
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: PPUSH
28396: CALL_OW 1
28400: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28401: CALL 28410 0 0
// end ;
28405: LD_VAR 0 4
28409: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
28410: LD_INT 0
28412: PPUSH
28413: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
28414: LD_STRING resetFactoryWaypoint();
28416: PPUSH
28417: CALL_OW 559
// if factoryWaypoints then
28421: LD_EXP 121
28425: IFFALSE 28548
// begin for i := 1 to factoryWaypoints do
28427: LD_ADDR_VAR 0 2
28431: PUSH
28432: DOUBLE
28433: LD_INT 1
28435: DEC
28436: ST_TO_ADDR
28437: LD_EXP 121
28441: PUSH
28442: FOR_TO
28443: IFFALSE 28546
// if factoryWaypoints [ i ] then
28445: LD_EXP 121
28449: PUSH
28450: LD_VAR 0 2
28454: ARRAY
28455: IFFALSE 28544
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
28457: LD_STRING setFactoryWaypointXY(
28459: PUSH
28460: LD_EXP 121
28464: PUSH
28465: LD_VAR 0 2
28469: ARRAY
28470: PUSH
28471: LD_INT 1
28473: ARRAY
28474: STR
28475: PUSH
28476: LD_STRING ,
28478: STR
28479: PUSH
28480: LD_EXP 121
28484: PUSH
28485: LD_VAR 0 2
28489: ARRAY
28490: PUSH
28491: LD_INT 2
28493: ARRAY
28494: STR
28495: PUSH
28496: LD_STRING ,
28498: STR
28499: PUSH
28500: LD_EXP 121
28504: PUSH
28505: LD_VAR 0 2
28509: ARRAY
28510: PUSH
28511: LD_INT 3
28513: ARRAY
28514: STR
28515: PUSH
28516: LD_STRING ,
28518: STR
28519: PUSH
28520: LD_EXP 121
28524: PUSH
28525: LD_VAR 0 2
28529: ARRAY
28530: PUSH
28531: LD_INT 4
28533: ARRAY
28534: STR
28535: PUSH
28536: LD_STRING )
28538: STR
28539: PPUSH
28540: CALL_OW 559
28544: GO 28442
28546: POP
28547: POP
// end ; end ;
28548: LD_VAR 0 1
28552: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28553: LD_INT 0
28555: PPUSH
28556: PPUSH
28557: PPUSH
28558: PPUSH
28559: PPUSH
28560: PPUSH
28561: PPUSH
28562: PPUSH
28563: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28564: LD_VAR 0 1
28568: NOT
28569: PUSH
28570: LD_VAR 0 2
28574: PPUSH
28575: LD_VAR 0 3
28579: PPUSH
28580: CALL_OW 488
28584: NOT
28585: OR
28586: PUSH
28587: LD_VAR 0 4
28591: NOT
28592: OR
28593: IFFALSE 28597
// exit ;
28595: GO 28937
// list := [ ] ;
28597: LD_ADDR_VAR 0 13
28601: PUSH
28602: EMPTY
28603: ST_TO_ADDR
// if x - r < 0 then
28604: LD_VAR 0 2
28608: PUSH
28609: LD_VAR 0 4
28613: MINUS
28614: PUSH
28615: LD_INT 0
28617: LESS
28618: IFFALSE 28630
// min_x := 0 else
28620: LD_ADDR_VAR 0 7
28624: PUSH
28625: LD_INT 0
28627: ST_TO_ADDR
28628: GO 28646
// min_x := x - r ;
28630: LD_ADDR_VAR 0 7
28634: PUSH
28635: LD_VAR 0 2
28639: PUSH
28640: LD_VAR 0 4
28644: MINUS
28645: ST_TO_ADDR
// if y - r < 0 then
28646: LD_VAR 0 3
28650: PUSH
28651: LD_VAR 0 4
28655: MINUS
28656: PUSH
28657: LD_INT 0
28659: LESS
28660: IFFALSE 28672
// min_y := 0 else
28662: LD_ADDR_VAR 0 8
28666: PUSH
28667: LD_INT 0
28669: ST_TO_ADDR
28670: GO 28688
// min_y := y - r ;
28672: LD_ADDR_VAR 0 8
28676: PUSH
28677: LD_VAR 0 3
28681: PUSH
28682: LD_VAR 0 4
28686: MINUS
28687: ST_TO_ADDR
// max_x := x + r ;
28688: LD_ADDR_VAR 0 9
28692: PUSH
28693: LD_VAR 0 2
28697: PUSH
28698: LD_VAR 0 4
28702: PLUS
28703: ST_TO_ADDR
// max_y := y + r ;
28704: LD_ADDR_VAR 0 10
28708: PUSH
28709: LD_VAR 0 3
28713: PUSH
28714: LD_VAR 0 4
28718: PLUS
28719: ST_TO_ADDR
// for _x = min_x to max_x do
28720: LD_ADDR_VAR 0 11
28724: PUSH
28725: DOUBLE
28726: LD_VAR 0 7
28730: DEC
28731: ST_TO_ADDR
28732: LD_VAR 0 9
28736: PUSH
28737: FOR_TO
28738: IFFALSE 28855
// for _y = min_y to max_y do
28740: LD_ADDR_VAR 0 12
28744: PUSH
28745: DOUBLE
28746: LD_VAR 0 8
28750: DEC
28751: ST_TO_ADDR
28752: LD_VAR 0 10
28756: PUSH
28757: FOR_TO
28758: IFFALSE 28851
// begin if not ValidHex ( _x , _y ) then
28760: LD_VAR 0 11
28764: PPUSH
28765: LD_VAR 0 12
28769: PPUSH
28770: CALL_OW 488
28774: NOT
28775: IFFALSE 28779
// continue ;
28777: GO 28757
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28779: LD_VAR 0 11
28783: PPUSH
28784: LD_VAR 0 12
28788: PPUSH
28789: CALL_OW 351
28793: PUSH
28794: LD_VAR 0 11
28798: PPUSH
28799: LD_VAR 0 12
28803: PPUSH
28804: CALL_OW 554
28808: AND
28809: IFFALSE 28849
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28811: LD_ADDR_VAR 0 13
28815: PUSH
28816: LD_VAR 0 13
28820: PPUSH
28821: LD_VAR 0 13
28825: PUSH
28826: LD_INT 1
28828: PLUS
28829: PPUSH
28830: LD_VAR 0 11
28834: PUSH
28835: LD_VAR 0 12
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PPUSH
28844: CALL_OW 2
28848: ST_TO_ADDR
// end ;
28849: GO 28757
28851: POP
28852: POP
28853: GO 28737
28855: POP
28856: POP
// if not list then
28857: LD_VAR 0 13
28861: NOT
28862: IFFALSE 28866
// exit ;
28864: GO 28937
// for i in list do
28866: LD_ADDR_VAR 0 6
28870: PUSH
28871: LD_VAR 0 13
28875: PUSH
28876: FOR_IN
28877: IFFALSE 28935
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28879: LD_VAR 0 1
28883: PPUSH
28884: LD_STRING M
28886: PUSH
28887: LD_VAR 0 6
28891: PUSH
28892: LD_INT 1
28894: ARRAY
28895: PUSH
28896: LD_VAR 0 6
28900: PUSH
28901: LD_INT 2
28903: ARRAY
28904: PUSH
28905: LD_INT 0
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: PUSH
28926: EMPTY
28927: LIST
28928: PPUSH
28929: CALL_OW 447
28933: GO 28876
28935: POP
28936: POP
// end ;
28937: LD_VAR 0 5
28941: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28942: LD_EXP 122
28946: NOT
28947: IFFALSE 28997
28949: GO 28951
28951: DISABLE
// begin initHack := true ;
28952: LD_ADDR_EXP 122
28956: PUSH
28957: LD_INT 1
28959: ST_TO_ADDR
// hackTanks := [ ] ;
28960: LD_ADDR_EXP 123
28964: PUSH
28965: EMPTY
28966: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28967: LD_ADDR_EXP 124
28971: PUSH
28972: EMPTY
28973: ST_TO_ADDR
// hackLimit := 3 ;
28974: LD_ADDR_EXP 125
28978: PUSH
28979: LD_INT 3
28981: ST_TO_ADDR
// hackDist := 12 ;
28982: LD_ADDR_EXP 126
28986: PUSH
28987: LD_INT 12
28989: ST_TO_ADDR
// hackCounter := [ ] ;
28990: LD_ADDR_EXP 127
28994: PUSH
28995: EMPTY
28996: ST_TO_ADDR
// end ;
28997: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28998: LD_EXP 122
29002: PUSH
29003: LD_INT 34
29005: PUSH
29006: LD_EXP 45
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PPUSH
29015: CALL_OW 69
29019: AND
29020: IFFALSE 29275
29022: GO 29024
29024: DISABLE
29025: LD_INT 0
29027: PPUSH
29028: PPUSH
// begin enable ;
29029: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29030: LD_ADDR_VAR 0 1
29034: PUSH
29035: LD_INT 34
29037: PUSH
29038: LD_EXP 45
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PPUSH
29047: CALL_OW 69
29051: PUSH
29052: FOR_IN
29053: IFFALSE 29273
// begin if not i in hackTanks then
29055: LD_VAR 0 1
29059: PUSH
29060: LD_EXP 123
29064: IN
29065: NOT
29066: IFFALSE 29149
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29068: LD_ADDR_EXP 123
29072: PUSH
29073: LD_EXP 123
29077: PPUSH
29078: LD_EXP 123
29082: PUSH
29083: LD_INT 1
29085: PLUS
29086: PPUSH
29087: LD_VAR 0 1
29091: PPUSH
29092: CALL_OW 1
29096: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29097: LD_ADDR_EXP 124
29101: PUSH
29102: LD_EXP 124
29106: PPUSH
29107: LD_EXP 124
29111: PUSH
29112: LD_INT 1
29114: PLUS
29115: PPUSH
29116: EMPTY
29117: PPUSH
29118: CALL_OW 1
29122: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29123: LD_ADDR_EXP 127
29127: PUSH
29128: LD_EXP 127
29132: PPUSH
29133: LD_EXP 127
29137: PUSH
29138: LD_INT 1
29140: PLUS
29141: PPUSH
29142: EMPTY
29143: PPUSH
29144: CALL_OW 1
29148: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29149: LD_VAR 0 1
29153: PPUSH
29154: CALL_OW 302
29158: NOT
29159: IFFALSE 29172
// begin HackUnlinkAll ( i ) ;
29161: LD_VAR 0 1
29165: PPUSH
29166: CALL 29278 0 1
// continue ;
29170: GO 29052
// end ; HackCheckCapturedStatus ( i ) ;
29172: LD_VAR 0 1
29176: PPUSH
29177: CALL 29721 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29181: LD_ADDR_VAR 0 2
29185: PUSH
29186: LD_INT 81
29188: PUSH
29189: LD_VAR 0 1
29193: PPUSH
29194: CALL_OW 255
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 33
29205: PUSH
29206: LD_INT 3
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 91
29215: PUSH
29216: LD_VAR 0 1
29220: PUSH
29221: LD_EXP 126
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 50
29233: PUSH
29234: EMPTY
29235: LIST
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: PPUSH
29243: CALL_OW 69
29247: ST_TO_ADDR
// if not tmp then
29248: LD_VAR 0 2
29252: NOT
29253: IFFALSE 29257
// continue ;
29255: GO 29052
// HackLink ( i , tmp ) ;
29257: LD_VAR 0 1
29261: PPUSH
29262: LD_VAR 0 2
29266: PPUSH
29267: CALL 29414 0 2
// end ;
29271: GO 29052
29273: POP
29274: POP
// end ;
29275: PPOPN 2
29277: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29278: LD_INT 0
29280: PPUSH
29281: PPUSH
29282: PPUSH
// if not hack in hackTanks then
29283: LD_VAR 0 1
29287: PUSH
29288: LD_EXP 123
29292: IN
29293: NOT
29294: IFFALSE 29298
// exit ;
29296: GO 29409
// index := GetElementIndex ( hackTanks , hack ) ;
29298: LD_ADDR_VAR 0 4
29302: PUSH
29303: LD_EXP 123
29307: PPUSH
29308: LD_VAR 0 1
29312: PPUSH
29313: CALL 36883 0 2
29317: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29318: LD_EXP 124
29322: PUSH
29323: LD_VAR 0 4
29327: ARRAY
29328: IFFALSE 29409
// begin for i in hackTanksCaptured [ index ] do
29330: LD_ADDR_VAR 0 3
29334: PUSH
29335: LD_EXP 124
29339: PUSH
29340: LD_VAR 0 4
29344: ARRAY
29345: PUSH
29346: FOR_IN
29347: IFFALSE 29373
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29349: LD_VAR 0 3
29353: PUSH
29354: LD_INT 1
29356: ARRAY
29357: PPUSH
29358: LD_VAR 0 3
29362: PUSH
29363: LD_INT 2
29365: ARRAY
29366: PPUSH
29367: CALL_OW 235
29371: GO 29346
29373: POP
29374: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29375: LD_ADDR_EXP 124
29379: PUSH
29380: LD_EXP 124
29384: PPUSH
29385: LD_VAR 0 4
29389: PPUSH
29390: EMPTY
29391: PPUSH
29392: CALL_OW 1
29396: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29397: LD_VAR 0 1
29401: PPUSH
29402: LD_INT 0
29404: PPUSH
29405: CALL_OW 505
// end ; end ;
29409: LD_VAR 0 2
29413: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29414: LD_INT 0
29416: PPUSH
29417: PPUSH
29418: PPUSH
// if not hack in hackTanks or not vehicles then
29419: LD_VAR 0 1
29423: PUSH
29424: LD_EXP 123
29428: IN
29429: NOT
29430: PUSH
29431: LD_VAR 0 2
29435: NOT
29436: OR
29437: IFFALSE 29441
// exit ;
29439: GO 29716
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29441: LD_ADDR_VAR 0 2
29445: PUSH
29446: LD_VAR 0 1
29450: PPUSH
29451: LD_VAR 0 2
29455: PPUSH
29456: LD_INT 1
29458: PPUSH
29459: LD_INT 1
29461: PPUSH
29462: CALL 37533 0 4
29466: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29467: LD_ADDR_VAR 0 5
29471: PUSH
29472: LD_EXP 123
29476: PPUSH
29477: LD_VAR 0 1
29481: PPUSH
29482: CALL 36883 0 2
29486: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29487: LD_EXP 124
29491: PUSH
29492: LD_VAR 0 5
29496: ARRAY
29497: PUSH
29498: LD_EXP 125
29502: LESS
29503: IFFALSE 29692
// begin for i := 1 to vehicles do
29505: LD_ADDR_VAR 0 4
29509: PUSH
29510: DOUBLE
29511: LD_INT 1
29513: DEC
29514: ST_TO_ADDR
29515: LD_VAR 0 2
29519: PUSH
29520: FOR_TO
29521: IFFALSE 29690
// begin if hackTanksCaptured [ index ] = hackLimit then
29523: LD_EXP 124
29527: PUSH
29528: LD_VAR 0 5
29532: ARRAY
29533: PUSH
29534: LD_EXP 125
29538: EQUAL
29539: IFFALSE 29543
// break ;
29541: GO 29690
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29543: LD_ADDR_EXP 127
29547: PUSH
29548: LD_EXP 127
29552: PPUSH
29553: LD_VAR 0 5
29557: PPUSH
29558: LD_EXP 127
29562: PUSH
29563: LD_VAR 0 5
29567: ARRAY
29568: PUSH
29569: LD_INT 1
29571: PLUS
29572: PPUSH
29573: CALL_OW 1
29577: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29578: LD_ADDR_EXP 124
29582: PUSH
29583: LD_EXP 124
29587: PPUSH
29588: LD_VAR 0 5
29592: PUSH
29593: LD_EXP 124
29597: PUSH
29598: LD_VAR 0 5
29602: ARRAY
29603: PUSH
29604: LD_INT 1
29606: PLUS
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PPUSH
29612: LD_VAR 0 2
29616: PUSH
29617: LD_VAR 0 4
29621: ARRAY
29622: PUSH
29623: LD_VAR 0 2
29627: PUSH
29628: LD_VAR 0 4
29632: ARRAY
29633: PPUSH
29634: CALL_OW 255
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PPUSH
29643: CALL 37098 0 3
29647: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29648: LD_VAR 0 2
29652: PUSH
29653: LD_VAR 0 4
29657: ARRAY
29658: PPUSH
29659: LD_VAR 0 1
29663: PPUSH
29664: CALL_OW 255
29668: PPUSH
29669: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29673: LD_VAR 0 2
29677: PUSH
29678: LD_VAR 0 4
29682: ARRAY
29683: PPUSH
29684: CALL_OW 141
// end ;
29688: GO 29520
29690: POP
29691: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29692: LD_VAR 0 1
29696: PPUSH
29697: LD_EXP 124
29701: PUSH
29702: LD_VAR 0 5
29706: ARRAY
29707: PUSH
29708: LD_INT 0
29710: PLUS
29711: PPUSH
29712: CALL_OW 505
// end ;
29716: LD_VAR 0 3
29720: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29721: LD_INT 0
29723: PPUSH
29724: PPUSH
29725: PPUSH
29726: PPUSH
// if not hack in hackTanks then
29727: LD_VAR 0 1
29731: PUSH
29732: LD_EXP 123
29736: IN
29737: NOT
29738: IFFALSE 29742
// exit ;
29740: GO 29982
// index := GetElementIndex ( hackTanks , hack ) ;
29742: LD_ADDR_VAR 0 4
29746: PUSH
29747: LD_EXP 123
29751: PPUSH
29752: LD_VAR 0 1
29756: PPUSH
29757: CALL 36883 0 2
29761: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29762: LD_ADDR_VAR 0 3
29766: PUSH
29767: DOUBLE
29768: LD_EXP 124
29772: PUSH
29773: LD_VAR 0 4
29777: ARRAY
29778: INC
29779: ST_TO_ADDR
29780: LD_INT 1
29782: PUSH
29783: FOR_DOWNTO
29784: IFFALSE 29956
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29786: LD_ADDR_VAR 0 5
29790: PUSH
29791: LD_EXP 124
29795: PUSH
29796: LD_VAR 0 4
29800: ARRAY
29801: PUSH
29802: LD_VAR 0 3
29806: ARRAY
29807: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29808: LD_VAR 0 5
29812: PUSH
29813: LD_INT 1
29815: ARRAY
29816: PPUSH
29817: CALL_OW 302
29821: NOT
29822: PUSH
29823: LD_VAR 0 5
29827: PUSH
29828: LD_INT 1
29830: ARRAY
29831: PPUSH
29832: CALL_OW 255
29836: PUSH
29837: LD_VAR 0 1
29841: PPUSH
29842: CALL_OW 255
29846: NONEQUAL
29847: OR
29848: IFFALSE 29954
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29850: LD_VAR 0 5
29854: PUSH
29855: LD_INT 1
29857: ARRAY
29858: PPUSH
29859: CALL_OW 305
29863: PUSH
29864: LD_VAR 0 5
29868: PUSH
29869: LD_INT 1
29871: ARRAY
29872: PPUSH
29873: CALL_OW 255
29877: PUSH
29878: LD_VAR 0 1
29882: PPUSH
29883: CALL_OW 255
29887: EQUAL
29888: AND
29889: IFFALSE 29913
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29891: LD_VAR 0 5
29895: PUSH
29896: LD_INT 1
29898: ARRAY
29899: PPUSH
29900: LD_VAR 0 5
29904: PUSH
29905: LD_INT 2
29907: ARRAY
29908: PPUSH
29909: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29913: LD_ADDR_EXP 124
29917: PUSH
29918: LD_EXP 124
29922: PPUSH
29923: LD_VAR 0 4
29927: PPUSH
29928: LD_EXP 124
29932: PUSH
29933: LD_VAR 0 4
29937: ARRAY
29938: PPUSH
29939: LD_VAR 0 3
29943: PPUSH
29944: CALL_OW 3
29948: PPUSH
29949: CALL_OW 1
29953: ST_TO_ADDR
// end ; end ;
29954: GO 29783
29956: POP
29957: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29958: LD_VAR 0 1
29962: PPUSH
29963: LD_EXP 124
29967: PUSH
29968: LD_VAR 0 4
29972: ARRAY
29973: PUSH
29974: LD_INT 0
29976: PLUS
29977: PPUSH
29978: CALL_OW 505
// end ;
29982: LD_VAR 0 2
29986: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29987: LD_INT 0
29989: PPUSH
29990: PPUSH
29991: PPUSH
29992: PPUSH
// if not hack in hackTanks then
29993: LD_VAR 0 1
29997: PUSH
29998: LD_EXP 123
30002: IN
30003: NOT
30004: IFFALSE 30008
// exit ;
30006: GO 30093
// index := GetElementIndex ( hackTanks , hack ) ;
30008: LD_ADDR_VAR 0 5
30012: PUSH
30013: LD_EXP 123
30017: PPUSH
30018: LD_VAR 0 1
30022: PPUSH
30023: CALL 36883 0 2
30027: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30028: LD_ADDR_VAR 0 4
30032: PUSH
30033: DOUBLE
30034: LD_INT 1
30036: DEC
30037: ST_TO_ADDR
30038: LD_EXP 124
30042: PUSH
30043: LD_VAR 0 5
30047: ARRAY
30048: PUSH
30049: FOR_TO
30050: IFFALSE 30091
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30052: LD_EXP 124
30056: PUSH
30057: LD_VAR 0 5
30061: ARRAY
30062: PUSH
30063: LD_VAR 0 4
30067: ARRAY
30068: PUSH
30069: LD_INT 1
30071: ARRAY
30072: PUSH
30073: LD_VAR 0 2
30077: EQUAL
30078: IFFALSE 30089
// KillUnit ( vehicle ) ;
30080: LD_VAR 0 2
30084: PPUSH
30085: CALL_OW 66
30089: GO 30049
30091: POP
30092: POP
// end ;
30093: LD_VAR 0 3
30097: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30098: LD_EXP 128
30102: NOT
30103: IFFALSE 30138
30105: GO 30107
30107: DISABLE
// begin initMiner := true ;
30108: LD_ADDR_EXP 128
30112: PUSH
30113: LD_INT 1
30115: ST_TO_ADDR
// minersList := [ ] ;
30116: LD_ADDR_EXP 129
30120: PUSH
30121: EMPTY
30122: ST_TO_ADDR
// minerMinesList := [ ] ;
30123: LD_ADDR_EXP 130
30127: PUSH
30128: EMPTY
30129: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30130: LD_ADDR_EXP 131
30134: PUSH
30135: LD_INT 5
30137: ST_TO_ADDR
// end ;
30138: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30139: LD_EXP 128
30143: PUSH
30144: LD_INT 34
30146: PUSH
30147: LD_EXP 50
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PPUSH
30156: CALL_OW 69
30160: AND
30161: IFFALSE 30624
30163: GO 30165
30165: DISABLE
30166: LD_INT 0
30168: PPUSH
30169: PPUSH
30170: PPUSH
30171: PPUSH
// begin enable ;
30172: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30173: LD_ADDR_VAR 0 1
30177: PUSH
30178: LD_INT 34
30180: PUSH
30181: LD_EXP 50
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PPUSH
30190: CALL_OW 69
30194: PUSH
30195: FOR_IN
30196: IFFALSE 30268
// begin if not i in minersList then
30198: LD_VAR 0 1
30202: PUSH
30203: LD_EXP 129
30207: IN
30208: NOT
30209: IFFALSE 30266
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30211: LD_ADDR_EXP 129
30215: PUSH
30216: LD_EXP 129
30220: PPUSH
30221: LD_EXP 129
30225: PUSH
30226: LD_INT 1
30228: PLUS
30229: PPUSH
30230: LD_VAR 0 1
30234: PPUSH
30235: CALL_OW 1
30239: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30240: LD_ADDR_EXP 130
30244: PUSH
30245: LD_EXP 130
30249: PPUSH
30250: LD_EXP 130
30254: PUSH
30255: LD_INT 1
30257: PLUS
30258: PPUSH
30259: EMPTY
30260: PPUSH
30261: CALL_OW 1
30265: ST_TO_ADDR
// end end ;
30266: GO 30195
30268: POP
30269: POP
// for i := minerMinesList downto 1 do
30270: LD_ADDR_VAR 0 1
30274: PUSH
30275: DOUBLE
30276: LD_EXP 130
30280: INC
30281: ST_TO_ADDR
30282: LD_INT 1
30284: PUSH
30285: FOR_DOWNTO
30286: IFFALSE 30622
// begin if IsLive ( minersList [ i ] ) then
30288: LD_EXP 129
30292: PUSH
30293: LD_VAR 0 1
30297: ARRAY
30298: PPUSH
30299: CALL_OW 300
30303: IFFALSE 30331
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30305: LD_EXP 129
30309: PUSH
30310: LD_VAR 0 1
30314: ARRAY
30315: PPUSH
30316: LD_EXP 130
30320: PUSH
30321: LD_VAR 0 1
30325: ARRAY
30326: PPUSH
30327: CALL_OW 505
// if not minerMinesList [ i ] then
30331: LD_EXP 130
30335: PUSH
30336: LD_VAR 0 1
30340: ARRAY
30341: NOT
30342: IFFALSE 30346
// continue ;
30344: GO 30285
// for j := minerMinesList [ i ] downto 1 do
30346: LD_ADDR_VAR 0 2
30350: PUSH
30351: DOUBLE
30352: LD_EXP 130
30356: PUSH
30357: LD_VAR 0 1
30361: ARRAY
30362: INC
30363: ST_TO_ADDR
30364: LD_INT 1
30366: PUSH
30367: FOR_DOWNTO
30368: IFFALSE 30618
// begin side := GetSide ( minersList [ i ] ) ;
30370: LD_ADDR_VAR 0 3
30374: PUSH
30375: LD_EXP 129
30379: PUSH
30380: LD_VAR 0 1
30384: ARRAY
30385: PPUSH
30386: CALL_OW 255
30390: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30391: LD_ADDR_VAR 0 4
30395: PUSH
30396: LD_EXP 130
30400: PUSH
30401: LD_VAR 0 1
30405: ARRAY
30406: PUSH
30407: LD_VAR 0 2
30411: ARRAY
30412: PUSH
30413: LD_INT 1
30415: ARRAY
30416: PPUSH
30417: LD_EXP 130
30421: PUSH
30422: LD_VAR 0 1
30426: ARRAY
30427: PUSH
30428: LD_VAR 0 2
30432: ARRAY
30433: PUSH
30434: LD_INT 2
30436: ARRAY
30437: PPUSH
30438: CALL_OW 428
30442: ST_TO_ADDR
// if not tmp then
30443: LD_VAR 0 4
30447: NOT
30448: IFFALSE 30452
// continue ;
30450: GO 30367
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30452: LD_VAR 0 4
30456: PUSH
30457: LD_INT 81
30459: PUSH
30460: LD_VAR 0 3
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PPUSH
30469: CALL_OW 69
30473: IN
30474: PUSH
30475: LD_EXP 130
30479: PUSH
30480: LD_VAR 0 1
30484: ARRAY
30485: PUSH
30486: LD_VAR 0 2
30490: ARRAY
30491: PUSH
30492: LD_INT 1
30494: ARRAY
30495: PPUSH
30496: LD_EXP 130
30500: PUSH
30501: LD_VAR 0 1
30505: ARRAY
30506: PUSH
30507: LD_VAR 0 2
30511: ARRAY
30512: PUSH
30513: LD_INT 2
30515: ARRAY
30516: PPUSH
30517: CALL_OW 458
30521: AND
30522: IFFALSE 30616
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30524: LD_EXP 130
30528: PUSH
30529: LD_VAR 0 1
30533: ARRAY
30534: PUSH
30535: LD_VAR 0 2
30539: ARRAY
30540: PUSH
30541: LD_INT 1
30543: ARRAY
30544: PPUSH
30545: LD_EXP 130
30549: PUSH
30550: LD_VAR 0 1
30554: ARRAY
30555: PUSH
30556: LD_VAR 0 2
30560: ARRAY
30561: PUSH
30562: LD_INT 2
30564: ARRAY
30565: PPUSH
30566: LD_VAR 0 3
30570: PPUSH
30571: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30575: LD_ADDR_EXP 130
30579: PUSH
30580: LD_EXP 130
30584: PPUSH
30585: LD_VAR 0 1
30589: PPUSH
30590: LD_EXP 130
30594: PUSH
30595: LD_VAR 0 1
30599: ARRAY
30600: PPUSH
30601: LD_VAR 0 2
30605: PPUSH
30606: CALL_OW 3
30610: PPUSH
30611: CALL_OW 1
30615: ST_TO_ADDR
// end ; end ;
30616: GO 30367
30618: POP
30619: POP
// end ;
30620: GO 30285
30622: POP
30623: POP
// end ;
30624: PPOPN 4
30626: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30627: LD_INT 0
30629: PPUSH
30630: PPUSH
// result := false ;
30631: LD_ADDR_VAR 0 4
30635: PUSH
30636: LD_INT 0
30638: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30639: LD_VAR 0 1
30643: PPUSH
30644: CALL_OW 264
30648: PUSH
30649: LD_EXP 50
30653: EQUAL
30654: NOT
30655: IFFALSE 30659
// exit ;
30657: GO 30899
// index := GetElementIndex ( minersList , unit ) ;
30659: LD_ADDR_VAR 0 5
30663: PUSH
30664: LD_EXP 129
30668: PPUSH
30669: LD_VAR 0 1
30673: PPUSH
30674: CALL 36883 0 2
30678: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30679: LD_EXP 130
30683: PUSH
30684: LD_VAR 0 5
30688: ARRAY
30689: PUSH
30690: LD_EXP 131
30694: GREATEREQUAL
30695: IFFALSE 30699
// exit ;
30697: GO 30899
// ComMoveXY ( unit , x , y ) ;
30699: LD_VAR 0 1
30703: PPUSH
30704: LD_VAR 0 2
30708: PPUSH
30709: LD_VAR 0 3
30713: PPUSH
30714: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30718: LD_INT 35
30720: PPUSH
30721: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30725: LD_VAR 0 1
30729: PPUSH
30730: LD_VAR 0 2
30734: PPUSH
30735: LD_VAR 0 3
30739: PPUSH
30740: CALL 67602 0 3
30744: NOT
30745: PUSH
30746: LD_VAR 0 1
30750: PPUSH
30751: CALL_OW 314
30755: AND
30756: IFFALSE 30760
// exit ;
30758: GO 30899
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30760: LD_VAR 0 2
30764: PPUSH
30765: LD_VAR 0 3
30769: PPUSH
30770: CALL_OW 428
30774: PUSH
30775: LD_VAR 0 1
30779: EQUAL
30780: PUSH
30781: LD_VAR 0 1
30785: PPUSH
30786: CALL_OW 314
30790: NOT
30791: AND
30792: IFFALSE 30718
// PlaySoundXY ( x , y , PlantMine ) ;
30794: LD_VAR 0 2
30798: PPUSH
30799: LD_VAR 0 3
30803: PPUSH
30804: LD_STRING PlantMine
30806: PPUSH
30807: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30811: LD_VAR 0 2
30815: PPUSH
30816: LD_VAR 0 3
30820: PPUSH
30821: LD_VAR 0 1
30825: PPUSH
30826: CALL_OW 255
30830: PPUSH
30831: LD_INT 0
30833: PPUSH
30834: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30838: LD_ADDR_EXP 130
30842: PUSH
30843: LD_EXP 130
30847: PPUSH
30848: LD_VAR 0 5
30852: PUSH
30853: LD_EXP 130
30857: PUSH
30858: LD_VAR 0 5
30862: ARRAY
30863: PUSH
30864: LD_INT 1
30866: PLUS
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PPUSH
30872: LD_VAR 0 2
30876: PUSH
30877: LD_VAR 0 3
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PPUSH
30886: CALL 37098 0 3
30890: ST_TO_ADDR
// result := true ;
30891: LD_ADDR_VAR 0 4
30895: PUSH
30896: LD_INT 1
30898: ST_TO_ADDR
// end ;
30899: LD_VAR 0 4
30903: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30904: LD_INT 0
30906: PPUSH
30907: PPUSH
30908: PPUSH
// if not unit in minersList then
30909: LD_VAR 0 1
30913: PUSH
30914: LD_EXP 129
30918: IN
30919: NOT
30920: IFFALSE 30924
// exit ;
30922: GO 31316
// index := GetElementIndex ( minersList , unit ) ;
30924: LD_ADDR_VAR 0 6
30928: PUSH
30929: LD_EXP 129
30933: PPUSH
30934: LD_VAR 0 1
30938: PPUSH
30939: CALL 36883 0 2
30943: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30944: LD_ADDR_VAR 0 5
30948: PUSH
30949: DOUBLE
30950: LD_EXP 130
30954: PUSH
30955: LD_VAR 0 6
30959: ARRAY
30960: INC
30961: ST_TO_ADDR
30962: LD_INT 1
30964: PUSH
30965: FOR_DOWNTO
30966: IFFALSE 31127
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30968: LD_EXP 130
30972: PUSH
30973: LD_VAR 0 6
30977: ARRAY
30978: PUSH
30979: LD_VAR 0 5
30983: ARRAY
30984: PUSH
30985: LD_INT 1
30987: ARRAY
30988: PUSH
30989: LD_VAR 0 2
30993: EQUAL
30994: PUSH
30995: LD_EXP 130
30999: PUSH
31000: LD_VAR 0 6
31004: ARRAY
31005: PUSH
31006: LD_VAR 0 5
31010: ARRAY
31011: PUSH
31012: LD_INT 2
31014: ARRAY
31015: PUSH
31016: LD_VAR 0 3
31020: EQUAL
31021: AND
31022: IFFALSE 31125
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31024: LD_EXP 130
31028: PUSH
31029: LD_VAR 0 6
31033: ARRAY
31034: PUSH
31035: LD_VAR 0 5
31039: ARRAY
31040: PUSH
31041: LD_INT 1
31043: ARRAY
31044: PPUSH
31045: LD_EXP 130
31049: PUSH
31050: LD_VAR 0 6
31054: ARRAY
31055: PUSH
31056: LD_VAR 0 5
31060: ARRAY
31061: PUSH
31062: LD_INT 2
31064: ARRAY
31065: PPUSH
31066: LD_VAR 0 1
31070: PPUSH
31071: CALL_OW 255
31075: PPUSH
31076: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31080: LD_ADDR_EXP 130
31084: PUSH
31085: LD_EXP 130
31089: PPUSH
31090: LD_VAR 0 6
31094: PPUSH
31095: LD_EXP 130
31099: PUSH
31100: LD_VAR 0 6
31104: ARRAY
31105: PPUSH
31106: LD_VAR 0 5
31110: PPUSH
31111: CALL_OW 3
31115: PPUSH
31116: CALL_OW 1
31120: ST_TO_ADDR
// exit ;
31121: POP
31122: POP
31123: GO 31316
// end ; end ;
31125: GO 30965
31127: POP
31128: POP
// for i := minerMinesList [ index ] downto 1 do
31129: LD_ADDR_VAR 0 5
31133: PUSH
31134: DOUBLE
31135: LD_EXP 130
31139: PUSH
31140: LD_VAR 0 6
31144: ARRAY
31145: INC
31146: ST_TO_ADDR
31147: LD_INT 1
31149: PUSH
31150: FOR_DOWNTO
31151: IFFALSE 31314
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31153: LD_EXP 130
31157: PUSH
31158: LD_VAR 0 6
31162: ARRAY
31163: PUSH
31164: LD_VAR 0 5
31168: ARRAY
31169: PUSH
31170: LD_INT 1
31172: ARRAY
31173: PPUSH
31174: LD_EXP 130
31178: PUSH
31179: LD_VAR 0 6
31183: ARRAY
31184: PUSH
31185: LD_VAR 0 5
31189: ARRAY
31190: PUSH
31191: LD_INT 2
31193: ARRAY
31194: PPUSH
31195: LD_VAR 0 2
31199: PPUSH
31200: LD_VAR 0 3
31204: PPUSH
31205: CALL_OW 298
31209: PUSH
31210: LD_INT 6
31212: LESS
31213: IFFALSE 31312
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31215: LD_EXP 130
31219: PUSH
31220: LD_VAR 0 6
31224: ARRAY
31225: PUSH
31226: LD_VAR 0 5
31230: ARRAY
31231: PUSH
31232: LD_INT 1
31234: ARRAY
31235: PPUSH
31236: LD_EXP 130
31240: PUSH
31241: LD_VAR 0 6
31245: ARRAY
31246: PUSH
31247: LD_VAR 0 5
31251: ARRAY
31252: PUSH
31253: LD_INT 2
31255: ARRAY
31256: PPUSH
31257: LD_VAR 0 1
31261: PPUSH
31262: CALL_OW 255
31266: PPUSH
31267: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31271: LD_ADDR_EXP 130
31275: PUSH
31276: LD_EXP 130
31280: PPUSH
31281: LD_VAR 0 6
31285: PPUSH
31286: LD_EXP 130
31290: PUSH
31291: LD_VAR 0 6
31295: ARRAY
31296: PPUSH
31297: LD_VAR 0 5
31301: PPUSH
31302: CALL_OW 3
31306: PPUSH
31307: CALL_OW 1
31311: ST_TO_ADDR
// end ; end ;
31312: GO 31150
31314: POP
31315: POP
// end ;
31316: LD_VAR 0 4
31320: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31321: LD_INT 0
31323: PPUSH
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
31329: PPUSH
31330: PPUSH
31331: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31332: LD_VAR 0 1
31336: PPUSH
31337: CALL_OW 264
31341: PUSH
31342: LD_EXP 50
31346: EQUAL
31347: NOT
31348: PUSH
31349: LD_VAR 0 1
31353: PUSH
31354: LD_EXP 129
31358: IN
31359: NOT
31360: OR
31361: IFFALSE 31365
// exit ;
31363: GO 31687
// index := GetElementIndex ( minersList , unit ) ;
31365: LD_ADDR_VAR 0 6
31369: PUSH
31370: LD_EXP 129
31374: PPUSH
31375: LD_VAR 0 1
31379: PPUSH
31380: CALL 36883 0 2
31384: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31385: LD_ADDR_VAR 0 8
31389: PUSH
31390: LD_EXP 131
31394: PUSH
31395: LD_EXP 130
31399: PUSH
31400: LD_VAR 0 6
31404: ARRAY
31405: MINUS
31406: ST_TO_ADDR
// if not minesFreeAmount then
31407: LD_VAR 0 8
31411: NOT
31412: IFFALSE 31416
// exit ;
31414: GO 31687
// tmp := [ ] ;
31416: LD_ADDR_VAR 0 7
31420: PUSH
31421: EMPTY
31422: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31423: LD_ADDR_VAR 0 5
31427: PUSH
31428: DOUBLE
31429: LD_INT 1
31431: DEC
31432: ST_TO_ADDR
31433: LD_VAR 0 8
31437: PUSH
31438: FOR_TO
31439: IFFALSE 31634
// begin _d := rand ( 0 , 5 ) ;
31441: LD_ADDR_VAR 0 11
31445: PUSH
31446: LD_INT 0
31448: PPUSH
31449: LD_INT 5
31451: PPUSH
31452: CALL_OW 12
31456: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31457: LD_ADDR_VAR 0 12
31461: PUSH
31462: LD_INT 2
31464: PPUSH
31465: LD_INT 6
31467: PPUSH
31468: CALL_OW 12
31472: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31473: LD_ADDR_VAR 0 9
31477: PUSH
31478: LD_VAR 0 2
31482: PPUSH
31483: LD_VAR 0 11
31487: PPUSH
31488: LD_VAR 0 12
31492: PPUSH
31493: CALL_OW 272
31497: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31498: LD_ADDR_VAR 0 10
31502: PUSH
31503: LD_VAR 0 3
31507: PPUSH
31508: LD_VAR 0 11
31512: PPUSH
31513: LD_VAR 0 12
31517: PPUSH
31518: CALL_OW 273
31522: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31523: LD_VAR 0 9
31527: PPUSH
31528: LD_VAR 0 10
31532: PPUSH
31533: CALL_OW 488
31537: PUSH
31538: LD_VAR 0 9
31542: PUSH
31543: LD_VAR 0 10
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_VAR 0 7
31556: IN
31557: NOT
31558: AND
31559: PUSH
31560: LD_VAR 0 9
31564: PPUSH
31565: LD_VAR 0 10
31569: PPUSH
31570: CALL_OW 458
31574: NOT
31575: AND
31576: IFFALSE 31618
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31578: LD_ADDR_VAR 0 7
31582: PUSH
31583: LD_VAR 0 7
31587: PPUSH
31588: LD_VAR 0 7
31592: PUSH
31593: LD_INT 1
31595: PLUS
31596: PPUSH
31597: LD_VAR 0 9
31601: PUSH
31602: LD_VAR 0 10
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PPUSH
31611: CALL_OW 1
31615: ST_TO_ADDR
31616: GO 31632
// i := i - 1 ;
31618: LD_ADDR_VAR 0 5
31622: PUSH
31623: LD_VAR 0 5
31627: PUSH
31628: LD_INT 1
31630: MINUS
31631: ST_TO_ADDR
// end ;
31632: GO 31438
31634: POP
31635: POP
// for i in tmp do
31636: LD_ADDR_VAR 0 5
31640: PUSH
31641: LD_VAR 0 7
31645: PUSH
31646: FOR_IN
31647: IFFALSE 31685
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31649: LD_VAR 0 1
31653: PPUSH
31654: LD_VAR 0 5
31658: PUSH
31659: LD_INT 1
31661: ARRAY
31662: PPUSH
31663: LD_VAR 0 5
31667: PUSH
31668: LD_INT 2
31670: ARRAY
31671: PPUSH
31672: CALL 30627 0 3
31676: NOT
31677: IFFALSE 31683
// exit ;
31679: POP
31680: POP
31681: GO 31687
31683: GO 31646
31685: POP
31686: POP
// end ;
31687: LD_VAR 0 4
31691: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31692: LD_INT 0
31694: PPUSH
31695: PPUSH
31696: PPUSH
31697: PPUSH
31698: PPUSH
31699: PPUSH
31700: PPUSH
// if not GetClass ( unit ) = class_sniper then
31701: LD_VAR 0 1
31705: PPUSH
31706: CALL_OW 257
31710: PUSH
31711: LD_INT 5
31713: EQUAL
31714: NOT
31715: IFFALSE 31719
// exit ;
31717: GO 32107
// dist := 8 ;
31719: LD_ADDR_VAR 0 5
31723: PUSH
31724: LD_INT 8
31726: ST_TO_ADDR
// viewRange := 12 ;
31727: LD_ADDR_VAR 0 7
31731: PUSH
31732: LD_INT 12
31734: ST_TO_ADDR
// side := GetSide ( unit ) ;
31735: LD_ADDR_VAR 0 6
31739: PUSH
31740: LD_VAR 0 1
31744: PPUSH
31745: CALL_OW 255
31749: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31750: LD_INT 61
31752: PPUSH
31753: LD_VAR 0 6
31757: PPUSH
31758: CALL_OW 321
31762: PUSH
31763: LD_INT 2
31765: EQUAL
31766: IFFALSE 31776
// viewRange := 16 ;
31768: LD_ADDR_VAR 0 7
31772: PUSH
31773: LD_INT 16
31775: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31776: LD_VAR 0 1
31780: PPUSH
31781: LD_VAR 0 2
31785: PPUSH
31786: LD_VAR 0 3
31790: PPUSH
31791: CALL_OW 297
31795: PUSH
31796: LD_VAR 0 5
31800: GREATER
31801: IFFALSE 31880
// begin ComMoveXY ( unit , x , y ) ;
31803: LD_VAR 0 1
31807: PPUSH
31808: LD_VAR 0 2
31812: PPUSH
31813: LD_VAR 0 3
31817: PPUSH
31818: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31822: LD_INT 35
31824: PPUSH
31825: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31829: LD_VAR 0 1
31833: PPUSH
31834: LD_VAR 0 2
31838: PPUSH
31839: LD_VAR 0 3
31843: PPUSH
31844: CALL 67602 0 3
31848: NOT
31849: IFFALSE 31853
// exit ;
31851: GO 32107
// until GetDistUnitXY ( unit , x , y ) < dist ;
31853: LD_VAR 0 1
31857: PPUSH
31858: LD_VAR 0 2
31862: PPUSH
31863: LD_VAR 0 3
31867: PPUSH
31868: CALL_OW 297
31872: PUSH
31873: LD_VAR 0 5
31877: LESS
31878: IFFALSE 31822
// end ; ComTurnXY ( unit , x , y ) ;
31880: LD_VAR 0 1
31884: PPUSH
31885: LD_VAR 0 2
31889: PPUSH
31890: LD_VAR 0 3
31894: PPUSH
31895: CALL_OW 118
// wait ( 5 ) ;
31899: LD_INT 5
31901: PPUSH
31902: CALL_OW 67
// _d := GetDir ( unit ) ;
31906: LD_ADDR_VAR 0 10
31910: PUSH
31911: LD_VAR 0 1
31915: PPUSH
31916: CALL_OW 254
31920: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31921: LD_ADDR_VAR 0 8
31925: PUSH
31926: LD_VAR 0 1
31930: PPUSH
31931: CALL_OW 250
31935: PPUSH
31936: LD_VAR 0 10
31940: PPUSH
31941: LD_VAR 0 5
31945: PPUSH
31946: CALL_OW 272
31950: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31951: LD_ADDR_VAR 0 9
31955: PUSH
31956: LD_VAR 0 1
31960: PPUSH
31961: CALL_OW 251
31965: PPUSH
31966: LD_VAR 0 10
31970: PPUSH
31971: LD_VAR 0 5
31975: PPUSH
31976: CALL_OW 273
31980: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31981: LD_VAR 0 8
31985: PPUSH
31986: LD_VAR 0 9
31990: PPUSH
31991: CALL_OW 488
31995: NOT
31996: IFFALSE 32000
// exit ;
31998: GO 32107
// ComAnimCustom ( unit , 1 ) ;
32000: LD_VAR 0 1
32004: PPUSH
32005: LD_INT 1
32007: PPUSH
32008: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32012: LD_VAR 0 8
32016: PPUSH
32017: LD_VAR 0 9
32021: PPUSH
32022: LD_VAR 0 6
32026: PPUSH
32027: LD_VAR 0 7
32031: PPUSH
32032: CALL_OW 330
// repeat wait ( 1 ) ;
32036: LD_INT 1
32038: PPUSH
32039: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32043: LD_VAR 0 1
32047: PPUSH
32048: CALL_OW 316
32052: PUSH
32053: LD_VAR 0 1
32057: PPUSH
32058: CALL_OW 314
32062: OR
32063: PUSH
32064: LD_VAR 0 1
32068: PPUSH
32069: CALL_OW 302
32073: NOT
32074: OR
32075: PUSH
32076: LD_VAR 0 1
32080: PPUSH
32081: CALL_OW 301
32085: OR
32086: IFFALSE 32036
// RemoveSeeing ( _x , _y , side ) ;
32088: LD_VAR 0 8
32092: PPUSH
32093: LD_VAR 0 9
32097: PPUSH
32098: LD_VAR 0 6
32102: PPUSH
32103: CALL_OW 331
// end ; end_of_file
32107: LD_VAR 0 4
32111: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32112: LD_INT 0
32114: PPUSH
32115: PPUSH
// if exist_mode then
32116: LD_VAR 0 2
32120: IFFALSE 32145
// unit := CreateCharacter ( prefix & ident ) else
32122: LD_ADDR_VAR 0 5
32126: PUSH
32127: LD_VAR 0 3
32131: PUSH
32132: LD_VAR 0 1
32136: STR
32137: PPUSH
32138: CALL_OW 34
32142: ST_TO_ADDR
32143: GO 32160
// unit := NewCharacter ( ident ) ;
32145: LD_ADDR_VAR 0 5
32149: PUSH
32150: LD_VAR 0 1
32154: PPUSH
32155: CALL_OW 25
32159: ST_TO_ADDR
// result := unit ;
32160: LD_ADDR_VAR 0 4
32164: PUSH
32165: LD_VAR 0 5
32169: ST_TO_ADDR
// end ;
32170: LD_VAR 0 4
32174: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32175: LD_INT 0
32177: PPUSH
32178: PPUSH
// if not side or not nation then
32179: LD_VAR 0 1
32183: NOT
32184: PUSH
32185: LD_VAR 0 2
32189: NOT
32190: OR
32191: IFFALSE 32195
// exit ;
32193: GO 32963
// case nation of nation_american :
32195: LD_VAR 0 2
32199: PUSH
32200: LD_INT 1
32202: DOUBLE
32203: EQUAL
32204: IFTRUE 32208
32206: GO 32422
32208: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32209: LD_ADDR_VAR 0 4
32213: PUSH
32214: LD_INT 35
32216: PUSH
32217: LD_INT 45
32219: PUSH
32220: LD_INT 46
32222: PUSH
32223: LD_INT 47
32225: PUSH
32226: LD_INT 82
32228: PUSH
32229: LD_INT 83
32231: PUSH
32232: LD_INT 84
32234: PUSH
32235: LD_INT 85
32237: PUSH
32238: LD_INT 86
32240: PUSH
32241: LD_INT 1
32243: PUSH
32244: LD_INT 2
32246: PUSH
32247: LD_INT 6
32249: PUSH
32250: LD_INT 15
32252: PUSH
32253: LD_INT 16
32255: PUSH
32256: LD_INT 7
32258: PUSH
32259: LD_INT 12
32261: PUSH
32262: LD_INT 13
32264: PUSH
32265: LD_INT 10
32267: PUSH
32268: LD_INT 14
32270: PUSH
32271: LD_INT 20
32273: PUSH
32274: LD_INT 21
32276: PUSH
32277: LD_INT 22
32279: PUSH
32280: LD_INT 25
32282: PUSH
32283: LD_INT 32
32285: PUSH
32286: LD_INT 27
32288: PUSH
32289: LD_INT 36
32291: PUSH
32292: LD_INT 69
32294: PUSH
32295: LD_INT 39
32297: PUSH
32298: LD_INT 34
32300: PUSH
32301: LD_INT 40
32303: PUSH
32304: LD_INT 48
32306: PUSH
32307: LD_INT 49
32309: PUSH
32310: LD_INT 50
32312: PUSH
32313: LD_INT 51
32315: PUSH
32316: LD_INT 52
32318: PUSH
32319: LD_INT 53
32321: PUSH
32322: LD_INT 54
32324: PUSH
32325: LD_INT 55
32327: PUSH
32328: LD_INT 56
32330: PUSH
32331: LD_INT 57
32333: PUSH
32334: LD_INT 58
32336: PUSH
32337: LD_INT 59
32339: PUSH
32340: LD_INT 60
32342: PUSH
32343: LD_INT 61
32345: PUSH
32346: LD_INT 62
32348: PUSH
32349: LD_INT 80
32351: PUSH
32352: LD_INT 82
32354: PUSH
32355: LD_INT 83
32357: PUSH
32358: LD_INT 84
32360: PUSH
32361: LD_INT 85
32363: PUSH
32364: LD_INT 86
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: ST_TO_ADDR
32420: GO 32887
32422: LD_INT 2
32424: DOUBLE
32425: EQUAL
32426: IFTRUE 32430
32428: GO 32656
32430: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32431: LD_ADDR_VAR 0 4
32435: PUSH
32436: LD_INT 35
32438: PUSH
32439: LD_INT 45
32441: PUSH
32442: LD_INT 46
32444: PUSH
32445: LD_INT 47
32447: PUSH
32448: LD_INT 82
32450: PUSH
32451: LD_INT 83
32453: PUSH
32454: LD_INT 84
32456: PUSH
32457: LD_INT 85
32459: PUSH
32460: LD_INT 87
32462: PUSH
32463: LD_INT 70
32465: PUSH
32466: LD_INT 1
32468: PUSH
32469: LD_INT 11
32471: PUSH
32472: LD_INT 3
32474: PUSH
32475: LD_INT 4
32477: PUSH
32478: LD_INT 5
32480: PUSH
32481: LD_INT 6
32483: PUSH
32484: LD_INT 15
32486: PUSH
32487: LD_INT 18
32489: PUSH
32490: LD_INT 7
32492: PUSH
32493: LD_INT 17
32495: PUSH
32496: LD_INT 8
32498: PUSH
32499: LD_INT 20
32501: PUSH
32502: LD_INT 21
32504: PUSH
32505: LD_INT 22
32507: PUSH
32508: LD_INT 72
32510: PUSH
32511: LD_INT 26
32513: PUSH
32514: LD_INT 69
32516: PUSH
32517: LD_INT 39
32519: PUSH
32520: LD_INT 40
32522: PUSH
32523: LD_INT 41
32525: PUSH
32526: LD_INT 42
32528: PUSH
32529: LD_INT 43
32531: PUSH
32532: LD_INT 48
32534: PUSH
32535: LD_INT 49
32537: PUSH
32538: LD_INT 50
32540: PUSH
32541: LD_INT 51
32543: PUSH
32544: LD_INT 52
32546: PUSH
32547: LD_INT 53
32549: PUSH
32550: LD_INT 54
32552: PUSH
32553: LD_INT 55
32555: PUSH
32556: LD_INT 56
32558: PUSH
32559: LD_INT 60
32561: PUSH
32562: LD_INT 61
32564: PUSH
32565: LD_INT 62
32567: PUSH
32568: LD_INT 66
32570: PUSH
32571: LD_INT 67
32573: PUSH
32574: LD_INT 68
32576: PUSH
32577: LD_INT 81
32579: PUSH
32580: LD_INT 82
32582: PUSH
32583: LD_INT 83
32585: PUSH
32586: LD_INT 84
32588: PUSH
32589: LD_INT 85
32591: PUSH
32592: LD_INT 87
32594: PUSH
32595: LD_INT 88
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: ST_TO_ADDR
32654: GO 32887
32656: LD_INT 3
32658: DOUBLE
32659: EQUAL
32660: IFTRUE 32664
32662: GO 32886
32664: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32665: LD_ADDR_VAR 0 4
32669: PUSH
32670: LD_INT 46
32672: PUSH
32673: LD_INT 47
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: LD_INT 82
32684: PUSH
32685: LD_INT 83
32687: PUSH
32688: LD_INT 84
32690: PUSH
32691: LD_INT 85
32693: PUSH
32694: LD_INT 86
32696: PUSH
32697: LD_INT 11
32699: PUSH
32700: LD_INT 9
32702: PUSH
32703: LD_INT 20
32705: PUSH
32706: LD_INT 19
32708: PUSH
32709: LD_INT 21
32711: PUSH
32712: LD_INT 24
32714: PUSH
32715: LD_INT 22
32717: PUSH
32718: LD_INT 25
32720: PUSH
32721: LD_INT 28
32723: PUSH
32724: LD_INT 29
32726: PUSH
32727: LD_INT 30
32729: PUSH
32730: LD_INT 31
32732: PUSH
32733: LD_INT 37
32735: PUSH
32736: LD_INT 38
32738: PUSH
32739: LD_INT 32
32741: PUSH
32742: LD_INT 27
32744: PUSH
32745: LD_INT 33
32747: PUSH
32748: LD_INT 69
32750: PUSH
32751: LD_INT 39
32753: PUSH
32754: LD_INT 34
32756: PUSH
32757: LD_INT 40
32759: PUSH
32760: LD_INT 71
32762: PUSH
32763: LD_INT 23
32765: PUSH
32766: LD_INT 44
32768: PUSH
32769: LD_INT 48
32771: PUSH
32772: LD_INT 49
32774: PUSH
32775: LD_INT 50
32777: PUSH
32778: LD_INT 51
32780: PUSH
32781: LD_INT 52
32783: PUSH
32784: LD_INT 53
32786: PUSH
32787: LD_INT 54
32789: PUSH
32790: LD_INT 55
32792: PUSH
32793: LD_INT 56
32795: PUSH
32796: LD_INT 57
32798: PUSH
32799: LD_INT 58
32801: PUSH
32802: LD_INT 59
32804: PUSH
32805: LD_INT 63
32807: PUSH
32808: LD_INT 64
32810: PUSH
32811: LD_INT 65
32813: PUSH
32814: LD_INT 82
32816: PUSH
32817: LD_INT 83
32819: PUSH
32820: LD_INT 84
32822: PUSH
32823: LD_INT 85
32825: PUSH
32826: LD_INT 86
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: ST_TO_ADDR
32884: GO 32887
32886: POP
// if state > - 1 and state < 3 then
32887: LD_VAR 0 3
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: GREATER
32896: PUSH
32897: LD_VAR 0 3
32901: PUSH
32902: LD_INT 3
32904: LESS
32905: AND
32906: IFFALSE 32963
// for i in result do
32908: LD_ADDR_VAR 0 5
32912: PUSH
32913: LD_VAR 0 4
32917: PUSH
32918: FOR_IN
32919: IFFALSE 32961
// if GetTech ( i , side ) <> state then
32921: LD_VAR 0 5
32925: PPUSH
32926: LD_VAR 0 1
32930: PPUSH
32931: CALL_OW 321
32935: PUSH
32936: LD_VAR 0 3
32940: NONEQUAL
32941: IFFALSE 32959
// result := result diff i ;
32943: LD_ADDR_VAR 0 4
32947: PUSH
32948: LD_VAR 0 4
32952: PUSH
32953: LD_VAR 0 5
32957: DIFF
32958: ST_TO_ADDR
32959: GO 32918
32961: POP
32962: POP
// end ;
32963: LD_VAR 0 4
32967: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32968: LD_INT 0
32970: PPUSH
32971: PPUSH
32972: PPUSH
// result := true ;
32973: LD_ADDR_VAR 0 3
32977: PUSH
32978: LD_INT 1
32980: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32981: LD_ADDR_VAR 0 5
32985: PUSH
32986: LD_VAR 0 2
32990: PPUSH
32991: CALL_OW 480
32995: ST_TO_ADDR
// if not tmp then
32996: LD_VAR 0 5
33000: NOT
33001: IFFALSE 33005
// exit ;
33003: GO 33054
// for i in tmp do
33005: LD_ADDR_VAR 0 4
33009: PUSH
33010: LD_VAR 0 5
33014: PUSH
33015: FOR_IN
33016: IFFALSE 33052
// if GetTech ( i , side ) <> state_researched then
33018: LD_VAR 0 4
33022: PPUSH
33023: LD_VAR 0 1
33027: PPUSH
33028: CALL_OW 321
33032: PUSH
33033: LD_INT 2
33035: NONEQUAL
33036: IFFALSE 33050
// begin result := false ;
33038: LD_ADDR_VAR 0 3
33042: PUSH
33043: LD_INT 0
33045: ST_TO_ADDR
// exit ;
33046: POP
33047: POP
33048: GO 33054
// end ;
33050: GO 33015
33052: POP
33053: POP
// end ;
33054: LD_VAR 0 3
33058: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33059: LD_INT 0
33061: PPUSH
33062: PPUSH
33063: PPUSH
33064: PPUSH
33065: PPUSH
33066: PPUSH
33067: PPUSH
33068: PPUSH
33069: PPUSH
33070: PPUSH
33071: PPUSH
33072: PPUSH
33073: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33074: LD_VAR 0 1
33078: NOT
33079: PUSH
33080: LD_VAR 0 1
33084: PPUSH
33085: CALL_OW 257
33089: PUSH
33090: LD_INT 9
33092: NONEQUAL
33093: OR
33094: IFFALSE 33098
// exit ;
33096: GO 33671
// side := GetSide ( unit ) ;
33098: LD_ADDR_VAR 0 9
33102: PUSH
33103: LD_VAR 0 1
33107: PPUSH
33108: CALL_OW 255
33112: ST_TO_ADDR
// tech_space := tech_spacanom ;
33113: LD_ADDR_VAR 0 12
33117: PUSH
33118: LD_INT 29
33120: ST_TO_ADDR
// tech_time := tech_taurad ;
33121: LD_ADDR_VAR 0 13
33125: PUSH
33126: LD_INT 28
33128: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33129: LD_ADDR_VAR 0 11
33133: PUSH
33134: LD_VAR 0 1
33138: PPUSH
33139: CALL_OW 310
33143: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33144: LD_VAR 0 11
33148: PPUSH
33149: CALL_OW 247
33153: PUSH
33154: LD_INT 2
33156: EQUAL
33157: IFFALSE 33161
// exit ;
33159: GO 33671
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33161: LD_ADDR_VAR 0 8
33165: PUSH
33166: LD_INT 81
33168: PUSH
33169: LD_VAR 0 9
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 3
33180: PUSH
33181: LD_INT 21
33183: PUSH
33184: LD_INT 3
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PPUSH
33199: CALL_OW 69
33203: ST_TO_ADDR
// if not tmp then
33204: LD_VAR 0 8
33208: NOT
33209: IFFALSE 33213
// exit ;
33211: GO 33671
// if in_unit then
33213: LD_VAR 0 11
33217: IFFALSE 33241
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33219: LD_ADDR_VAR 0 10
33223: PUSH
33224: LD_VAR 0 8
33228: PPUSH
33229: LD_VAR 0 11
33233: PPUSH
33234: CALL_OW 74
33238: ST_TO_ADDR
33239: GO 33261
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33241: LD_ADDR_VAR 0 10
33245: PUSH
33246: LD_VAR 0 8
33250: PPUSH
33251: LD_VAR 0 1
33255: PPUSH
33256: CALL_OW 74
33260: ST_TO_ADDR
// if not enemy then
33261: LD_VAR 0 10
33265: NOT
33266: IFFALSE 33270
// exit ;
33268: GO 33671
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33270: LD_VAR 0 11
33274: PUSH
33275: LD_VAR 0 11
33279: PPUSH
33280: LD_VAR 0 10
33284: PPUSH
33285: CALL_OW 296
33289: PUSH
33290: LD_INT 13
33292: GREATER
33293: AND
33294: PUSH
33295: LD_VAR 0 1
33299: PPUSH
33300: LD_VAR 0 10
33304: PPUSH
33305: CALL_OW 296
33309: PUSH
33310: LD_INT 12
33312: GREATER
33313: OR
33314: IFFALSE 33318
// exit ;
33316: GO 33671
// missile := [ 1 ] ;
33318: LD_ADDR_VAR 0 14
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: EMPTY
33327: LIST
33328: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33329: LD_VAR 0 9
33333: PPUSH
33334: LD_VAR 0 12
33338: PPUSH
33339: CALL_OW 325
33343: IFFALSE 33372
// missile := Replace ( missile , missile + 1 , 2 ) ;
33345: LD_ADDR_VAR 0 14
33349: PUSH
33350: LD_VAR 0 14
33354: PPUSH
33355: LD_VAR 0 14
33359: PUSH
33360: LD_INT 1
33362: PLUS
33363: PPUSH
33364: LD_INT 2
33366: PPUSH
33367: CALL_OW 1
33371: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33372: LD_VAR 0 9
33376: PPUSH
33377: LD_VAR 0 13
33381: PPUSH
33382: CALL_OW 325
33386: PUSH
33387: LD_VAR 0 10
33391: PPUSH
33392: CALL_OW 255
33396: PPUSH
33397: LD_VAR 0 13
33401: PPUSH
33402: CALL_OW 325
33406: NOT
33407: AND
33408: IFFALSE 33437
// missile := Replace ( missile , missile + 1 , 3 ) ;
33410: LD_ADDR_VAR 0 14
33414: PUSH
33415: LD_VAR 0 14
33419: PPUSH
33420: LD_VAR 0 14
33424: PUSH
33425: LD_INT 1
33427: PLUS
33428: PPUSH
33429: LD_INT 3
33431: PPUSH
33432: CALL_OW 1
33436: ST_TO_ADDR
// if missile < 2 then
33437: LD_VAR 0 14
33441: PUSH
33442: LD_INT 2
33444: LESS
33445: IFFALSE 33449
// exit ;
33447: GO 33671
// x := GetX ( enemy ) ;
33449: LD_ADDR_VAR 0 4
33453: PUSH
33454: LD_VAR 0 10
33458: PPUSH
33459: CALL_OW 250
33463: ST_TO_ADDR
// y := GetY ( enemy ) ;
33464: LD_ADDR_VAR 0 5
33468: PUSH
33469: LD_VAR 0 10
33473: PPUSH
33474: CALL_OW 251
33478: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33479: LD_ADDR_VAR 0 6
33483: PUSH
33484: LD_VAR 0 4
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PPUSH
33493: LD_INT 1
33495: PPUSH
33496: CALL_OW 12
33500: PLUS
33501: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33502: LD_ADDR_VAR 0 7
33506: PUSH
33507: LD_VAR 0 5
33511: PUSH
33512: LD_INT 1
33514: NEG
33515: PPUSH
33516: LD_INT 1
33518: PPUSH
33519: CALL_OW 12
33523: PLUS
33524: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33525: LD_VAR 0 6
33529: PPUSH
33530: LD_VAR 0 7
33534: PPUSH
33535: CALL_OW 488
33539: NOT
33540: IFFALSE 33562
// begin _x := x ;
33542: LD_ADDR_VAR 0 6
33546: PUSH
33547: LD_VAR 0 4
33551: ST_TO_ADDR
// _y := y ;
33552: LD_ADDR_VAR 0 7
33556: PUSH
33557: LD_VAR 0 5
33561: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33562: LD_ADDR_VAR 0 3
33566: PUSH
33567: LD_INT 1
33569: PPUSH
33570: LD_VAR 0 14
33574: PPUSH
33575: CALL_OW 12
33579: ST_TO_ADDR
// case i of 1 :
33580: LD_VAR 0 3
33584: PUSH
33585: LD_INT 1
33587: DOUBLE
33588: EQUAL
33589: IFTRUE 33593
33591: GO 33610
33593: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33594: LD_VAR 0 1
33598: PPUSH
33599: LD_VAR 0 10
33603: PPUSH
33604: CALL_OW 115
33608: GO 33671
33610: LD_INT 2
33612: DOUBLE
33613: EQUAL
33614: IFTRUE 33618
33616: GO 33640
33618: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33619: LD_VAR 0 1
33623: PPUSH
33624: LD_VAR 0 6
33628: PPUSH
33629: LD_VAR 0 7
33633: PPUSH
33634: CALL_OW 153
33638: GO 33671
33640: LD_INT 3
33642: DOUBLE
33643: EQUAL
33644: IFTRUE 33648
33646: GO 33670
33648: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33649: LD_VAR 0 1
33653: PPUSH
33654: LD_VAR 0 6
33658: PPUSH
33659: LD_VAR 0 7
33663: PPUSH
33664: CALL_OW 154
33668: GO 33671
33670: POP
// end ;
33671: LD_VAR 0 2
33675: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33676: LD_INT 0
33678: PPUSH
33679: PPUSH
33680: PPUSH
33681: PPUSH
33682: PPUSH
33683: PPUSH
// if not unit or not building then
33684: LD_VAR 0 1
33688: NOT
33689: PUSH
33690: LD_VAR 0 2
33694: NOT
33695: OR
33696: IFFALSE 33700
// exit ;
33698: GO 33858
// x := GetX ( building ) ;
33700: LD_ADDR_VAR 0 5
33704: PUSH
33705: LD_VAR 0 2
33709: PPUSH
33710: CALL_OW 250
33714: ST_TO_ADDR
// y := GetY ( building ) ;
33715: LD_ADDR_VAR 0 6
33719: PUSH
33720: LD_VAR 0 2
33724: PPUSH
33725: CALL_OW 251
33729: ST_TO_ADDR
// for i = 0 to 5 do
33730: LD_ADDR_VAR 0 4
33734: PUSH
33735: DOUBLE
33736: LD_INT 0
33738: DEC
33739: ST_TO_ADDR
33740: LD_INT 5
33742: PUSH
33743: FOR_TO
33744: IFFALSE 33856
// begin _x := ShiftX ( x , i , 3 ) ;
33746: LD_ADDR_VAR 0 7
33750: PUSH
33751: LD_VAR 0 5
33755: PPUSH
33756: LD_VAR 0 4
33760: PPUSH
33761: LD_INT 3
33763: PPUSH
33764: CALL_OW 272
33768: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33769: LD_ADDR_VAR 0 8
33773: PUSH
33774: LD_VAR 0 6
33778: PPUSH
33779: LD_VAR 0 4
33783: PPUSH
33784: LD_INT 3
33786: PPUSH
33787: CALL_OW 273
33791: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33792: LD_VAR 0 7
33796: PPUSH
33797: LD_VAR 0 8
33801: PPUSH
33802: CALL_OW 488
33806: NOT
33807: IFFALSE 33811
// continue ;
33809: GO 33743
// if HexInfo ( _x , _y ) = 0 then
33811: LD_VAR 0 7
33815: PPUSH
33816: LD_VAR 0 8
33820: PPUSH
33821: CALL_OW 428
33825: PUSH
33826: LD_INT 0
33828: EQUAL
33829: IFFALSE 33854
// begin ComMoveXY ( unit , _x , _y ) ;
33831: LD_VAR 0 1
33835: PPUSH
33836: LD_VAR 0 7
33840: PPUSH
33841: LD_VAR 0 8
33845: PPUSH
33846: CALL_OW 111
// exit ;
33850: POP
33851: POP
33852: GO 33858
// end ; end ;
33854: GO 33743
33856: POP
33857: POP
// end ;
33858: LD_VAR 0 3
33862: RET
// export function ScanBase ( side , base_area ) ; begin
33863: LD_INT 0
33865: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33866: LD_ADDR_VAR 0 3
33870: PUSH
33871: LD_VAR 0 2
33875: PPUSH
33876: LD_INT 81
33878: PUSH
33879: LD_VAR 0 1
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PPUSH
33888: CALL_OW 70
33892: ST_TO_ADDR
// end ;
33893: LD_VAR 0 3
33897: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33898: LD_INT 0
33900: PPUSH
33901: PPUSH
33902: PPUSH
33903: PPUSH
// result := false ;
33904: LD_ADDR_VAR 0 2
33908: PUSH
33909: LD_INT 0
33911: ST_TO_ADDR
// side := GetSide ( unit ) ;
33912: LD_ADDR_VAR 0 3
33916: PUSH
33917: LD_VAR 0 1
33921: PPUSH
33922: CALL_OW 255
33926: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33927: LD_ADDR_VAR 0 4
33931: PUSH
33932: LD_VAR 0 1
33936: PPUSH
33937: CALL_OW 248
33941: ST_TO_ADDR
// case nat of 1 :
33942: LD_VAR 0 4
33946: PUSH
33947: LD_INT 1
33949: DOUBLE
33950: EQUAL
33951: IFTRUE 33955
33953: GO 33966
33955: POP
// tech := tech_lassight ; 2 :
33956: LD_ADDR_VAR 0 5
33960: PUSH
33961: LD_INT 12
33963: ST_TO_ADDR
33964: GO 34005
33966: LD_INT 2
33968: DOUBLE
33969: EQUAL
33970: IFTRUE 33974
33972: GO 33985
33974: POP
// tech := tech_mortar ; 3 :
33975: LD_ADDR_VAR 0 5
33979: PUSH
33980: LD_INT 41
33982: ST_TO_ADDR
33983: GO 34005
33985: LD_INT 3
33987: DOUBLE
33988: EQUAL
33989: IFTRUE 33993
33991: GO 34004
33993: POP
// tech := tech_bazooka ; end ;
33994: LD_ADDR_VAR 0 5
33998: PUSH
33999: LD_INT 44
34001: ST_TO_ADDR
34002: GO 34005
34004: POP
// if Researched ( side , tech ) then
34005: LD_VAR 0 3
34009: PPUSH
34010: LD_VAR 0 5
34014: PPUSH
34015: CALL_OW 325
34019: IFFALSE 34046
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34021: LD_ADDR_VAR 0 2
34025: PUSH
34026: LD_INT 5
34028: PUSH
34029: LD_INT 8
34031: PUSH
34032: LD_INT 9
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: LIST
34039: PUSH
34040: LD_VAR 0 4
34044: ARRAY
34045: ST_TO_ADDR
// end ;
34046: LD_VAR 0 2
34050: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34051: LD_INT 0
34053: PPUSH
34054: PPUSH
34055: PPUSH
// if not mines then
34056: LD_VAR 0 2
34060: NOT
34061: IFFALSE 34065
// exit ;
34063: GO 34209
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34065: LD_ADDR_VAR 0 5
34069: PUSH
34070: LD_INT 81
34072: PUSH
34073: LD_VAR 0 1
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 3
34084: PUSH
34085: LD_INT 21
34087: PUSH
34088: LD_INT 3
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PPUSH
34103: CALL_OW 69
34107: ST_TO_ADDR
// for i in mines do
34108: LD_ADDR_VAR 0 4
34112: PUSH
34113: LD_VAR 0 2
34117: PUSH
34118: FOR_IN
34119: IFFALSE 34207
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34121: LD_VAR 0 4
34125: PUSH
34126: LD_INT 1
34128: ARRAY
34129: PPUSH
34130: LD_VAR 0 4
34134: PUSH
34135: LD_INT 2
34137: ARRAY
34138: PPUSH
34139: CALL_OW 458
34143: NOT
34144: IFFALSE 34148
// continue ;
34146: GO 34118
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34148: LD_VAR 0 4
34152: PUSH
34153: LD_INT 1
34155: ARRAY
34156: PPUSH
34157: LD_VAR 0 4
34161: PUSH
34162: LD_INT 2
34164: ARRAY
34165: PPUSH
34166: CALL_OW 428
34170: PUSH
34171: LD_VAR 0 5
34175: IN
34176: IFFALSE 34205
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34178: LD_VAR 0 4
34182: PUSH
34183: LD_INT 1
34185: ARRAY
34186: PPUSH
34187: LD_VAR 0 4
34191: PUSH
34192: LD_INT 2
34194: ARRAY
34195: PPUSH
34196: LD_VAR 0 1
34200: PPUSH
34201: CALL_OW 456
// end ;
34205: GO 34118
34207: POP
34208: POP
// end ;
34209: LD_VAR 0 3
34213: RET
// export function Count ( array ) ; var i ; begin
34214: LD_INT 0
34216: PPUSH
34217: PPUSH
// result := 0 ;
34218: LD_ADDR_VAR 0 2
34222: PUSH
34223: LD_INT 0
34225: ST_TO_ADDR
// for i in array do
34226: LD_ADDR_VAR 0 3
34230: PUSH
34231: LD_VAR 0 1
34235: PUSH
34236: FOR_IN
34237: IFFALSE 34261
// if i then
34239: LD_VAR 0 3
34243: IFFALSE 34259
// result := result + 1 ;
34245: LD_ADDR_VAR 0 2
34249: PUSH
34250: LD_VAR 0 2
34254: PUSH
34255: LD_INT 1
34257: PLUS
34258: ST_TO_ADDR
34259: GO 34236
34261: POP
34262: POP
// end ;
34263: LD_VAR 0 2
34267: RET
// export function IsEmpty ( building ) ; begin
34268: LD_INT 0
34270: PPUSH
// if not building then
34271: LD_VAR 0 1
34275: NOT
34276: IFFALSE 34280
// exit ;
34278: GO 34323
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34280: LD_ADDR_VAR 0 2
34284: PUSH
34285: LD_VAR 0 1
34289: PUSH
34290: LD_INT 22
34292: PUSH
34293: LD_VAR 0 1
34297: PPUSH
34298: CALL_OW 255
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 58
34309: PUSH
34310: EMPTY
34311: LIST
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PPUSH
34317: CALL_OW 69
34321: IN
34322: ST_TO_ADDR
// end ;
34323: LD_VAR 0 2
34327: RET
// export function IsNotFull ( building ) ; begin
34328: LD_INT 0
34330: PPUSH
// if not building then
34331: LD_VAR 0 1
34335: NOT
34336: IFFALSE 34340
// exit ;
34338: GO 34359
// result := UnitsInside ( building ) < 6 ;
34340: LD_ADDR_VAR 0 2
34344: PUSH
34345: LD_VAR 0 1
34349: PPUSH
34350: CALL_OW 313
34354: PUSH
34355: LD_INT 6
34357: LESS
34358: ST_TO_ADDR
// end ;
34359: LD_VAR 0 2
34363: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34364: LD_INT 0
34366: PPUSH
34367: PPUSH
34368: PPUSH
34369: PPUSH
// tmp := [ ] ;
34370: LD_ADDR_VAR 0 3
34374: PUSH
34375: EMPTY
34376: ST_TO_ADDR
// list := [ ] ;
34377: LD_ADDR_VAR 0 5
34381: PUSH
34382: EMPTY
34383: ST_TO_ADDR
// for i = 16 to 25 do
34384: LD_ADDR_VAR 0 4
34388: PUSH
34389: DOUBLE
34390: LD_INT 16
34392: DEC
34393: ST_TO_ADDR
34394: LD_INT 25
34396: PUSH
34397: FOR_TO
34398: IFFALSE 34471
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34400: LD_ADDR_VAR 0 3
34404: PUSH
34405: LD_VAR 0 3
34409: PUSH
34410: LD_INT 22
34412: PUSH
34413: LD_VAR 0 1
34417: PPUSH
34418: CALL_OW 255
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 91
34429: PUSH
34430: LD_VAR 0 1
34434: PUSH
34435: LD_INT 6
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 30
34445: PUSH
34446: LD_VAR 0 4
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: LIST
34459: PUSH
34460: EMPTY
34461: LIST
34462: PPUSH
34463: CALL_OW 69
34467: ADD
34468: ST_TO_ADDR
34469: GO 34397
34471: POP
34472: POP
// for i = 1 to tmp do
34473: LD_ADDR_VAR 0 4
34477: PUSH
34478: DOUBLE
34479: LD_INT 1
34481: DEC
34482: ST_TO_ADDR
34483: LD_VAR 0 3
34487: PUSH
34488: FOR_TO
34489: IFFALSE 34577
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34491: LD_ADDR_VAR 0 5
34495: PUSH
34496: LD_VAR 0 5
34500: PUSH
34501: LD_VAR 0 3
34505: PUSH
34506: LD_VAR 0 4
34510: ARRAY
34511: PPUSH
34512: CALL_OW 266
34516: PUSH
34517: LD_VAR 0 3
34521: PUSH
34522: LD_VAR 0 4
34526: ARRAY
34527: PPUSH
34528: CALL_OW 250
34532: PUSH
34533: LD_VAR 0 3
34537: PUSH
34538: LD_VAR 0 4
34542: ARRAY
34543: PPUSH
34544: CALL_OW 251
34548: PUSH
34549: LD_VAR 0 3
34553: PUSH
34554: LD_VAR 0 4
34558: ARRAY
34559: PPUSH
34560: CALL_OW 254
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: PUSH
34571: EMPTY
34572: LIST
34573: ADD
34574: ST_TO_ADDR
34575: GO 34488
34577: POP
34578: POP
// result := list ;
34579: LD_ADDR_VAR 0 2
34583: PUSH
34584: LD_VAR 0 5
34588: ST_TO_ADDR
// end ;
34589: LD_VAR 0 2
34593: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34594: LD_INT 0
34596: PPUSH
34597: PPUSH
34598: PPUSH
34599: PPUSH
34600: PPUSH
34601: PPUSH
34602: PPUSH
// if not factory then
34603: LD_VAR 0 1
34607: NOT
34608: IFFALSE 34612
// exit ;
34610: GO 35205
// if control = control_apeman then
34612: LD_VAR 0 4
34616: PUSH
34617: LD_INT 5
34619: EQUAL
34620: IFFALSE 34729
// begin tmp := UnitsInside ( factory ) ;
34622: LD_ADDR_VAR 0 8
34626: PUSH
34627: LD_VAR 0 1
34631: PPUSH
34632: CALL_OW 313
34636: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34637: LD_VAR 0 8
34641: PPUSH
34642: LD_INT 25
34644: PUSH
34645: LD_INT 12
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PPUSH
34652: CALL_OW 72
34656: NOT
34657: IFFALSE 34667
// control := control_manual ;
34659: LD_ADDR_VAR 0 4
34663: PUSH
34664: LD_INT 1
34666: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34667: LD_ADDR_VAR 0 8
34671: PUSH
34672: LD_VAR 0 1
34676: PPUSH
34677: CALL 34364 0 1
34681: ST_TO_ADDR
// if tmp then
34682: LD_VAR 0 8
34686: IFFALSE 34729
// begin for i in tmp do
34688: LD_ADDR_VAR 0 7
34692: PUSH
34693: LD_VAR 0 8
34697: PUSH
34698: FOR_IN
34699: IFFALSE 34727
// if i [ 1 ] = b_ext_radio then
34701: LD_VAR 0 7
34705: PUSH
34706: LD_INT 1
34708: ARRAY
34709: PUSH
34710: LD_INT 22
34712: EQUAL
34713: IFFALSE 34725
// begin control := control_remote ;
34715: LD_ADDR_VAR 0 4
34719: PUSH
34720: LD_INT 2
34722: ST_TO_ADDR
// break ;
34723: GO 34727
// end ;
34725: GO 34698
34727: POP
34728: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34729: LD_VAR 0 1
34733: PPUSH
34734: LD_VAR 0 2
34738: PPUSH
34739: LD_VAR 0 3
34743: PPUSH
34744: LD_VAR 0 4
34748: PPUSH
34749: LD_VAR 0 5
34753: PPUSH
34754: CALL_OW 448
34758: IFFALSE 34793
// begin result := [ chassis , engine , control , weapon ] ;
34760: LD_ADDR_VAR 0 6
34764: PUSH
34765: LD_VAR 0 2
34769: PUSH
34770: LD_VAR 0 3
34774: PUSH
34775: LD_VAR 0 4
34779: PUSH
34780: LD_VAR 0 5
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: ST_TO_ADDR
// exit ;
34791: GO 35205
// end ; _chassis := AvailableChassisList ( factory ) ;
34793: LD_ADDR_VAR 0 9
34797: PUSH
34798: LD_VAR 0 1
34802: PPUSH
34803: CALL_OW 475
34807: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34808: LD_ADDR_VAR 0 11
34812: PUSH
34813: LD_VAR 0 1
34817: PPUSH
34818: CALL_OW 476
34822: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34823: LD_ADDR_VAR 0 12
34827: PUSH
34828: LD_VAR 0 1
34832: PPUSH
34833: CALL_OW 477
34837: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34838: LD_ADDR_VAR 0 10
34842: PUSH
34843: LD_VAR 0 1
34847: PPUSH
34848: CALL_OW 478
34852: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34853: LD_VAR 0 9
34857: NOT
34858: PUSH
34859: LD_VAR 0 11
34863: NOT
34864: OR
34865: PUSH
34866: LD_VAR 0 12
34870: NOT
34871: OR
34872: PUSH
34873: LD_VAR 0 10
34877: NOT
34878: OR
34879: IFFALSE 34914
// begin result := [ chassis , engine , control , weapon ] ;
34881: LD_ADDR_VAR 0 6
34885: PUSH
34886: LD_VAR 0 2
34890: PUSH
34891: LD_VAR 0 3
34895: PUSH
34896: LD_VAR 0 4
34900: PUSH
34901: LD_VAR 0 5
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: ST_TO_ADDR
// exit ;
34912: GO 35205
// end ; if not chassis in _chassis then
34914: LD_VAR 0 2
34918: PUSH
34919: LD_VAR 0 9
34923: IN
34924: NOT
34925: IFFALSE 34951
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34927: LD_ADDR_VAR 0 2
34931: PUSH
34932: LD_VAR 0 9
34936: PUSH
34937: LD_INT 1
34939: PPUSH
34940: LD_VAR 0 9
34944: PPUSH
34945: CALL_OW 12
34949: ARRAY
34950: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34951: LD_VAR 0 2
34955: PPUSH
34956: LD_VAR 0 3
34960: PPUSH
34961: CALL 35210 0 2
34965: NOT
34966: IFFALSE 35025
// repeat engine := _engine [ 1 ] ;
34968: LD_ADDR_VAR 0 3
34972: PUSH
34973: LD_VAR 0 11
34977: PUSH
34978: LD_INT 1
34980: ARRAY
34981: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34982: LD_ADDR_VAR 0 11
34986: PUSH
34987: LD_VAR 0 11
34991: PPUSH
34992: LD_INT 1
34994: PPUSH
34995: CALL_OW 3
34999: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35000: LD_VAR 0 2
35004: PPUSH
35005: LD_VAR 0 3
35009: PPUSH
35010: CALL 35210 0 2
35014: PUSH
35015: LD_VAR 0 11
35019: PUSH
35020: EMPTY
35021: EQUAL
35022: OR
35023: IFFALSE 34968
// if not control in _control then
35025: LD_VAR 0 4
35029: PUSH
35030: LD_VAR 0 12
35034: IN
35035: NOT
35036: IFFALSE 35062
// control := _control [ rand ( 1 , _control ) ] ;
35038: LD_ADDR_VAR 0 4
35042: PUSH
35043: LD_VAR 0 12
35047: PUSH
35048: LD_INT 1
35050: PPUSH
35051: LD_VAR 0 12
35055: PPUSH
35056: CALL_OW 12
35060: ARRAY
35061: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35062: LD_VAR 0 2
35066: PPUSH
35067: LD_VAR 0 5
35071: PPUSH
35072: CALL 35430 0 2
35076: NOT
35077: IFFALSE 35136
// repeat weapon := _weapon [ 1 ] ;
35079: LD_ADDR_VAR 0 5
35083: PUSH
35084: LD_VAR 0 10
35088: PUSH
35089: LD_INT 1
35091: ARRAY
35092: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35093: LD_ADDR_VAR 0 10
35097: PUSH
35098: LD_VAR 0 10
35102: PPUSH
35103: LD_INT 1
35105: PPUSH
35106: CALL_OW 3
35110: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35111: LD_VAR 0 2
35115: PPUSH
35116: LD_VAR 0 5
35120: PPUSH
35121: CALL 35430 0 2
35125: PUSH
35126: LD_VAR 0 10
35130: PUSH
35131: EMPTY
35132: EQUAL
35133: OR
35134: IFFALSE 35079
// result := [ ] ;
35136: LD_ADDR_VAR 0 6
35140: PUSH
35141: EMPTY
35142: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35143: LD_VAR 0 1
35147: PPUSH
35148: LD_VAR 0 2
35152: PPUSH
35153: LD_VAR 0 3
35157: PPUSH
35158: LD_VAR 0 4
35162: PPUSH
35163: LD_VAR 0 5
35167: PPUSH
35168: CALL_OW 448
35172: IFFALSE 35205
// result := [ chassis , engine , control , weapon ] ;
35174: LD_ADDR_VAR 0 6
35178: PUSH
35179: LD_VAR 0 2
35183: PUSH
35184: LD_VAR 0 3
35188: PUSH
35189: LD_VAR 0 4
35193: PUSH
35194: LD_VAR 0 5
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: ST_TO_ADDR
// end ;
35205: LD_VAR 0 6
35209: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35210: LD_INT 0
35212: PPUSH
// if not chassis or not engine then
35213: LD_VAR 0 1
35217: NOT
35218: PUSH
35219: LD_VAR 0 2
35223: NOT
35224: OR
35225: IFFALSE 35229
// exit ;
35227: GO 35425
// case engine of engine_solar :
35229: LD_VAR 0 2
35233: PUSH
35234: LD_INT 2
35236: DOUBLE
35237: EQUAL
35238: IFTRUE 35242
35240: GO 35280
35242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35243: LD_ADDR_VAR 0 3
35247: PUSH
35248: LD_INT 11
35250: PUSH
35251: LD_INT 12
35253: PUSH
35254: LD_INT 13
35256: PUSH
35257: LD_INT 14
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 2
35265: PUSH
35266: LD_INT 3
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: ST_TO_ADDR
35278: GO 35409
35280: LD_INT 1
35282: DOUBLE
35283: EQUAL
35284: IFTRUE 35288
35286: GO 35350
35288: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35289: LD_ADDR_VAR 0 3
35293: PUSH
35294: LD_INT 11
35296: PUSH
35297: LD_INT 12
35299: PUSH
35300: LD_INT 13
35302: PUSH
35303: LD_INT 14
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: LD_INT 2
35311: PUSH
35312: LD_INT 3
35314: PUSH
35315: LD_INT 4
35317: PUSH
35318: LD_INT 5
35320: PUSH
35321: LD_INT 21
35323: PUSH
35324: LD_INT 23
35326: PUSH
35327: LD_INT 22
35329: PUSH
35330: LD_INT 24
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: ST_TO_ADDR
35348: GO 35409
35350: LD_INT 3
35352: DOUBLE
35353: EQUAL
35354: IFTRUE 35358
35356: GO 35408
35358: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35359: LD_ADDR_VAR 0 3
35363: PUSH
35364: LD_INT 13
35366: PUSH
35367: LD_INT 14
35369: PUSH
35370: LD_INT 2
35372: PUSH
35373: LD_INT 3
35375: PUSH
35376: LD_INT 4
35378: PUSH
35379: LD_INT 5
35381: PUSH
35382: LD_INT 21
35384: PUSH
35385: LD_INT 22
35387: PUSH
35388: LD_INT 23
35390: PUSH
35391: LD_INT 24
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: ST_TO_ADDR
35406: GO 35409
35408: POP
// result := ( chassis in result ) ;
35409: LD_ADDR_VAR 0 3
35413: PUSH
35414: LD_VAR 0 1
35418: PUSH
35419: LD_VAR 0 3
35423: IN
35424: ST_TO_ADDR
// end ;
35425: LD_VAR 0 3
35429: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35430: LD_INT 0
35432: PPUSH
// if not chassis or not weapon then
35433: LD_VAR 0 1
35437: NOT
35438: PUSH
35439: LD_VAR 0 2
35443: NOT
35444: OR
35445: IFFALSE 35449
// exit ;
35447: GO 36511
// case weapon of us_machine_gun :
35449: LD_VAR 0 2
35453: PUSH
35454: LD_INT 2
35456: DOUBLE
35457: EQUAL
35458: IFTRUE 35462
35460: GO 35492
35462: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35463: LD_ADDR_VAR 0 3
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: LD_INT 2
35473: PUSH
35474: LD_INT 3
35476: PUSH
35477: LD_INT 4
35479: PUSH
35480: LD_INT 5
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: ST_TO_ADDR
35490: GO 36495
35492: LD_INT 3
35494: DOUBLE
35495: EQUAL
35496: IFTRUE 35500
35498: GO 35530
35500: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35501: LD_ADDR_VAR 0 3
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: LD_INT 3
35514: PUSH
35515: LD_INT 4
35517: PUSH
35518: LD_INT 5
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: ST_TO_ADDR
35528: GO 36495
35530: LD_INT 11
35532: DOUBLE
35533: EQUAL
35534: IFTRUE 35538
35536: GO 35568
35538: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35539: LD_ADDR_VAR 0 3
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: LD_INT 2
35549: PUSH
35550: LD_INT 3
35552: PUSH
35553: LD_INT 4
35555: PUSH
35556: LD_INT 5
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: ST_TO_ADDR
35566: GO 36495
35568: LD_INT 4
35570: DOUBLE
35571: EQUAL
35572: IFTRUE 35576
35574: GO 35602
35576: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35577: LD_ADDR_VAR 0 3
35581: PUSH
35582: LD_INT 2
35584: PUSH
35585: LD_INT 3
35587: PUSH
35588: LD_INT 4
35590: PUSH
35591: LD_INT 5
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: ST_TO_ADDR
35600: GO 36495
35602: LD_INT 5
35604: DOUBLE
35605: EQUAL
35606: IFTRUE 35610
35608: GO 35636
35610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35611: LD_ADDR_VAR 0 3
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: LD_INT 3
35621: PUSH
35622: LD_INT 4
35624: PUSH
35625: LD_INT 5
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: ST_TO_ADDR
35634: GO 36495
35636: LD_INT 9
35638: DOUBLE
35639: EQUAL
35640: IFTRUE 35644
35642: GO 35670
35644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35645: LD_ADDR_VAR 0 3
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: LD_INT 3
35655: PUSH
35656: LD_INT 4
35658: PUSH
35659: LD_INT 5
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: ST_TO_ADDR
35668: GO 36495
35670: LD_INT 7
35672: DOUBLE
35673: EQUAL
35674: IFTRUE 35678
35676: GO 35704
35678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35679: LD_ADDR_VAR 0 3
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: LD_INT 3
35689: PUSH
35690: LD_INT 4
35692: PUSH
35693: LD_INT 5
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: ST_TO_ADDR
35702: GO 36495
35704: LD_INT 12
35706: DOUBLE
35707: EQUAL
35708: IFTRUE 35712
35710: GO 35738
35712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35713: LD_ADDR_VAR 0 3
35717: PUSH
35718: LD_INT 2
35720: PUSH
35721: LD_INT 3
35723: PUSH
35724: LD_INT 4
35726: PUSH
35727: LD_INT 5
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: ST_TO_ADDR
35736: GO 36495
35738: LD_INT 13
35740: DOUBLE
35741: EQUAL
35742: IFTRUE 35746
35744: GO 35772
35746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35747: LD_ADDR_VAR 0 3
35751: PUSH
35752: LD_INT 2
35754: PUSH
35755: LD_INT 3
35757: PUSH
35758: LD_INT 4
35760: PUSH
35761: LD_INT 5
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: ST_TO_ADDR
35770: GO 36495
35772: LD_INT 14
35774: DOUBLE
35775: EQUAL
35776: IFTRUE 35780
35778: GO 35798
35780: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35781: LD_ADDR_VAR 0 3
35785: PUSH
35786: LD_INT 4
35788: PUSH
35789: LD_INT 5
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: ST_TO_ADDR
35796: GO 36495
35798: LD_INT 6
35800: DOUBLE
35801: EQUAL
35802: IFTRUE 35806
35804: GO 35824
35806: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35807: LD_ADDR_VAR 0 3
35811: PUSH
35812: LD_INT 4
35814: PUSH
35815: LD_INT 5
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: ST_TO_ADDR
35822: GO 36495
35824: LD_INT 10
35826: DOUBLE
35827: EQUAL
35828: IFTRUE 35832
35830: GO 35850
35832: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35833: LD_ADDR_VAR 0 3
35837: PUSH
35838: LD_INT 4
35840: PUSH
35841: LD_INT 5
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: ST_TO_ADDR
35848: GO 36495
35850: LD_INT 22
35852: DOUBLE
35853: EQUAL
35854: IFTRUE 35858
35856: GO 35884
35858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35859: LD_ADDR_VAR 0 3
35863: PUSH
35864: LD_INT 11
35866: PUSH
35867: LD_INT 12
35869: PUSH
35870: LD_INT 13
35872: PUSH
35873: LD_INT 14
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: ST_TO_ADDR
35882: GO 36495
35884: LD_INT 23
35886: DOUBLE
35887: EQUAL
35888: IFTRUE 35892
35890: GO 35918
35892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35893: LD_ADDR_VAR 0 3
35897: PUSH
35898: LD_INT 11
35900: PUSH
35901: LD_INT 12
35903: PUSH
35904: LD_INT 13
35906: PUSH
35907: LD_INT 14
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: ST_TO_ADDR
35916: GO 36495
35918: LD_INT 24
35920: DOUBLE
35921: EQUAL
35922: IFTRUE 35926
35924: GO 35952
35926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35927: LD_ADDR_VAR 0 3
35931: PUSH
35932: LD_INT 11
35934: PUSH
35935: LD_INT 12
35937: PUSH
35938: LD_INT 13
35940: PUSH
35941: LD_INT 14
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: ST_TO_ADDR
35950: GO 36495
35952: LD_INT 30
35954: DOUBLE
35955: EQUAL
35956: IFTRUE 35960
35958: GO 35986
35960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35961: LD_ADDR_VAR 0 3
35965: PUSH
35966: LD_INT 11
35968: PUSH
35969: LD_INT 12
35971: PUSH
35972: LD_INT 13
35974: PUSH
35975: LD_INT 14
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: ST_TO_ADDR
35984: GO 36495
35986: LD_INT 25
35988: DOUBLE
35989: EQUAL
35990: IFTRUE 35994
35992: GO 36012
35994: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35995: LD_ADDR_VAR 0 3
35999: PUSH
36000: LD_INT 13
36002: PUSH
36003: LD_INT 14
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: ST_TO_ADDR
36010: GO 36495
36012: LD_INT 27
36014: DOUBLE
36015: EQUAL
36016: IFTRUE 36020
36018: GO 36038
36020: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36021: LD_ADDR_VAR 0 3
36025: PUSH
36026: LD_INT 13
36028: PUSH
36029: LD_INT 14
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: ST_TO_ADDR
36036: GO 36495
36038: LD_EXP 48
36042: DOUBLE
36043: EQUAL
36044: IFTRUE 36048
36046: GO 36074
36048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36049: LD_ADDR_VAR 0 3
36053: PUSH
36054: LD_INT 11
36056: PUSH
36057: LD_INT 12
36059: PUSH
36060: LD_INT 13
36062: PUSH
36063: LD_INT 14
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: ST_TO_ADDR
36072: GO 36495
36074: LD_INT 28
36076: DOUBLE
36077: EQUAL
36078: IFTRUE 36082
36080: GO 36100
36082: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36083: LD_ADDR_VAR 0 3
36087: PUSH
36088: LD_INT 13
36090: PUSH
36091: LD_INT 14
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: ST_TO_ADDR
36098: GO 36495
36100: LD_INT 29
36102: DOUBLE
36103: EQUAL
36104: IFTRUE 36108
36106: GO 36126
36108: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36109: LD_ADDR_VAR 0 3
36113: PUSH
36114: LD_INT 13
36116: PUSH
36117: LD_INT 14
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: ST_TO_ADDR
36124: GO 36495
36126: LD_INT 31
36128: DOUBLE
36129: EQUAL
36130: IFTRUE 36134
36132: GO 36152
36134: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36135: LD_ADDR_VAR 0 3
36139: PUSH
36140: LD_INT 13
36142: PUSH
36143: LD_INT 14
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: ST_TO_ADDR
36150: GO 36495
36152: LD_INT 26
36154: DOUBLE
36155: EQUAL
36156: IFTRUE 36160
36158: GO 36178
36160: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36161: LD_ADDR_VAR 0 3
36165: PUSH
36166: LD_INT 13
36168: PUSH
36169: LD_INT 14
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: ST_TO_ADDR
36176: GO 36495
36178: LD_INT 42
36180: DOUBLE
36181: EQUAL
36182: IFTRUE 36186
36184: GO 36212
36186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36187: LD_ADDR_VAR 0 3
36191: PUSH
36192: LD_INT 21
36194: PUSH
36195: LD_INT 22
36197: PUSH
36198: LD_INT 23
36200: PUSH
36201: LD_INT 24
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: ST_TO_ADDR
36210: GO 36495
36212: LD_INT 43
36214: DOUBLE
36215: EQUAL
36216: IFTRUE 36220
36218: GO 36246
36220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36221: LD_ADDR_VAR 0 3
36225: PUSH
36226: LD_INT 21
36228: PUSH
36229: LD_INT 22
36231: PUSH
36232: LD_INT 23
36234: PUSH
36235: LD_INT 24
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: ST_TO_ADDR
36244: GO 36495
36246: LD_INT 44
36248: DOUBLE
36249: EQUAL
36250: IFTRUE 36254
36252: GO 36280
36254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36255: LD_ADDR_VAR 0 3
36259: PUSH
36260: LD_INT 21
36262: PUSH
36263: LD_INT 22
36265: PUSH
36266: LD_INT 23
36268: PUSH
36269: LD_INT 24
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: ST_TO_ADDR
36278: GO 36495
36280: LD_INT 45
36282: DOUBLE
36283: EQUAL
36284: IFTRUE 36288
36286: GO 36314
36288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36289: LD_ADDR_VAR 0 3
36293: PUSH
36294: LD_INT 21
36296: PUSH
36297: LD_INT 22
36299: PUSH
36300: LD_INT 23
36302: PUSH
36303: LD_INT 24
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: ST_TO_ADDR
36312: GO 36495
36314: LD_INT 49
36316: DOUBLE
36317: EQUAL
36318: IFTRUE 36322
36320: GO 36348
36322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36323: LD_ADDR_VAR 0 3
36327: PUSH
36328: LD_INT 21
36330: PUSH
36331: LD_INT 22
36333: PUSH
36334: LD_INT 23
36336: PUSH
36337: LD_INT 24
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: ST_TO_ADDR
36346: GO 36495
36348: LD_INT 51
36350: DOUBLE
36351: EQUAL
36352: IFTRUE 36356
36354: GO 36382
36356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36357: LD_ADDR_VAR 0 3
36361: PUSH
36362: LD_INT 21
36364: PUSH
36365: LD_INT 22
36367: PUSH
36368: LD_INT 23
36370: PUSH
36371: LD_INT 24
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: ST_TO_ADDR
36380: GO 36495
36382: LD_INT 52
36384: DOUBLE
36385: EQUAL
36386: IFTRUE 36390
36388: GO 36416
36390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36391: LD_ADDR_VAR 0 3
36395: PUSH
36396: LD_INT 21
36398: PUSH
36399: LD_INT 22
36401: PUSH
36402: LD_INT 23
36404: PUSH
36405: LD_INT 24
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: ST_TO_ADDR
36414: GO 36495
36416: LD_INT 53
36418: DOUBLE
36419: EQUAL
36420: IFTRUE 36424
36422: GO 36442
36424: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36425: LD_ADDR_VAR 0 3
36429: PUSH
36430: LD_INT 23
36432: PUSH
36433: LD_INT 24
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: ST_TO_ADDR
36440: GO 36495
36442: LD_INT 46
36444: DOUBLE
36445: EQUAL
36446: IFTRUE 36450
36448: GO 36468
36450: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36451: LD_ADDR_VAR 0 3
36455: PUSH
36456: LD_INT 23
36458: PUSH
36459: LD_INT 24
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: ST_TO_ADDR
36466: GO 36495
36468: LD_INT 47
36470: DOUBLE
36471: EQUAL
36472: IFTRUE 36476
36474: GO 36494
36476: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36477: LD_ADDR_VAR 0 3
36481: PUSH
36482: LD_INT 23
36484: PUSH
36485: LD_INT 24
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: ST_TO_ADDR
36492: GO 36495
36494: POP
// result := ( chassis in result ) ;
36495: LD_ADDR_VAR 0 3
36499: PUSH
36500: LD_VAR 0 1
36504: PUSH
36505: LD_VAR 0 3
36509: IN
36510: ST_TO_ADDR
// end ;
36511: LD_VAR 0 3
36515: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36516: LD_INT 0
36518: PPUSH
36519: PPUSH
36520: PPUSH
36521: PPUSH
36522: PPUSH
36523: PPUSH
36524: PPUSH
// result := array ;
36525: LD_ADDR_VAR 0 5
36529: PUSH
36530: LD_VAR 0 1
36534: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36535: LD_VAR 0 1
36539: NOT
36540: PUSH
36541: LD_VAR 0 2
36545: NOT
36546: OR
36547: PUSH
36548: LD_VAR 0 3
36552: NOT
36553: OR
36554: PUSH
36555: LD_VAR 0 2
36559: PUSH
36560: LD_VAR 0 1
36564: GREATER
36565: OR
36566: PUSH
36567: LD_VAR 0 3
36571: PUSH
36572: LD_VAR 0 1
36576: GREATER
36577: OR
36578: IFFALSE 36582
// exit ;
36580: GO 36878
// if direction then
36582: LD_VAR 0 4
36586: IFFALSE 36650
// begin d := 1 ;
36588: LD_ADDR_VAR 0 9
36592: PUSH
36593: LD_INT 1
36595: ST_TO_ADDR
// if i_from > i_to then
36596: LD_VAR 0 2
36600: PUSH
36601: LD_VAR 0 3
36605: GREATER
36606: IFFALSE 36632
// length := ( array - i_from ) + i_to else
36608: LD_ADDR_VAR 0 11
36612: PUSH
36613: LD_VAR 0 1
36617: PUSH
36618: LD_VAR 0 2
36622: MINUS
36623: PUSH
36624: LD_VAR 0 3
36628: PLUS
36629: ST_TO_ADDR
36630: GO 36648
// length := i_to - i_from ;
36632: LD_ADDR_VAR 0 11
36636: PUSH
36637: LD_VAR 0 3
36641: PUSH
36642: LD_VAR 0 2
36646: MINUS
36647: ST_TO_ADDR
// end else
36648: GO 36711
// begin d := - 1 ;
36650: LD_ADDR_VAR 0 9
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: ST_TO_ADDR
// if i_from > i_to then
36659: LD_VAR 0 2
36663: PUSH
36664: LD_VAR 0 3
36668: GREATER
36669: IFFALSE 36689
// length := i_from - i_to else
36671: LD_ADDR_VAR 0 11
36675: PUSH
36676: LD_VAR 0 2
36680: PUSH
36681: LD_VAR 0 3
36685: MINUS
36686: ST_TO_ADDR
36687: GO 36711
// length := ( array - i_to ) + i_from ;
36689: LD_ADDR_VAR 0 11
36693: PUSH
36694: LD_VAR 0 1
36698: PUSH
36699: LD_VAR 0 3
36703: MINUS
36704: PUSH
36705: LD_VAR 0 2
36709: PLUS
36710: ST_TO_ADDR
// end ; if not length then
36711: LD_VAR 0 11
36715: NOT
36716: IFFALSE 36720
// exit ;
36718: GO 36878
// tmp := array ;
36720: LD_ADDR_VAR 0 10
36724: PUSH
36725: LD_VAR 0 1
36729: ST_TO_ADDR
// for i = 1 to length do
36730: LD_ADDR_VAR 0 6
36734: PUSH
36735: DOUBLE
36736: LD_INT 1
36738: DEC
36739: ST_TO_ADDR
36740: LD_VAR 0 11
36744: PUSH
36745: FOR_TO
36746: IFFALSE 36866
// begin for j = 1 to array do
36748: LD_ADDR_VAR 0 7
36752: PUSH
36753: DOUBLE
36754: LD_INT 1
36756: DEC
36757: ST_TO_ADDR
36758: LD_VAR 0 1
36762: PUSH
36763: FOR_TO
36764: IFFALSE 36852
// begin k := j + d ;
36766: LD_ADDR_VAR 0 8
36770: PUSH
36771: LD_VAR 0 7
36775: PUSH
36776: LD_VAR 0 9
36780: PLUS
36781: ST_TO_ADDR
// if k > array then
36782: LD_VAR 0 8
36786: PUSH
36787: LD_VAR 0 1
36791: GREATER
36792: IFFALSE 36802
// k := 1 ;
36794: LD_ADDR_VAR 0 8
36798: PUSH
36799: LD_INT 1
36801: ST_TO_ADDR
// if not k then
36802: LD_VAR 0 8
36806: NOT
36807: IFFALSE 36819
// k := array ;
36809: LD_ADDR_VAR 0 8
36813: PUSH
36814: LD_VAR 0 1
36818: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36819: LD_ADDR_VAR 0 10
36823: PUSH
36824: LD_VAR 0 10
36828: PPUSH
36829: LD_VAR 0 8
36833: PPUSH
36834: LD_VAR 0 1
36838: PUSH
36839: LD_VAR 0 7
36843: ARRAY
36844: PPUSH
36845: CALL_OW 1
36849: ST_TO_ADDR
// end ;
36850: GO 36763
36852: POP
36853: POP
// array := tmp ;
36854: LD_ADDR_VAR 0 1
36858: PUSH
36859: LD_VAR 0 10
36863: ST_TO_ADDR
// end ;
36864: GO 36745
36866: POP
36867: POP
// result := array ;
36868: LD_ADDR_VAR 0 5
36872: PUSH
36873: LD_VAR 0 1
36877: ST_TO_ADDR
// end ;
36878: LD_VAR 0 5
36882: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36883: LD_INT 0
36885: PPUSH
36886: PPUSH
// result := 0 ;
36887: LD_ADDR_VAR 0 3
36891: PUSH
36892: LD_INT 0
36894: ST_TO_ADDR
// if not array or not value in array then
36895: LD_VAR 0 1
36899: NOT
36900: PUSH
36901: LD_VAR 0 2
36905: PUSH
36906: LD_VAR 0 1
36910: IN
36911: NOT
36912: OR
36913: IFFALSE 36917
// exit ;
36915: GO 36971
// for i = 1 to array do
36917: LD_ADDR_VAR 0 4
36921: PUSH
36922: DOUBLE
36923: LD_INT 1
36925: DEC
36926: ST_TO_ADDR
36927: LD_VAR 0 1
36931: PUSH
36932: FOR_TO
36933: IFFALSE 36969
// if value = array [ i ] then
36935: LD_VAR 0 2
36939: PUSH
36940: LD_VAR 0 1
36944: PUSH
36945: LD_VAR 0 4
36949: ARRAY
36950: EQUAL
36951: IFFALSE 36967
// begin result := i ;
36953: LD_ADDR_VAR 0 3
36957: PUSH
36958: LD_VAR 0 4
36962: ST_TO_ADDR
// exit ;
36963: POP
36964: POP
36965: GO 36971
// end ;
36967: GO 36932
36969: POP
36970: POP
// end ;
36971: LD_VAR 0 3
36975: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36976: LD_INT 0
36978: PPUSH
// vc_chassis := chassis ;
36979: LD_ADDR_OWVAR 37
36983: PUSH
36984: LD_VAR 0 1
36988: ST_TO_ADDR
// vc_engine := engine ;
36989: LD_ADDR_OWVAR 39
36993: PUSH
36994: LD_VAR 0 2
36998: ST_TO_ADDR
// vc_control := control ;
36999: LD_ADDR_OWVAR 38
37003: PUSH
37004: LD_VAR 0 3
37008: ST_TO_ADDR
// vc_weapon := weapon ;
37009: LD_ADDR_OWVAR 40
37013: PUSH
37014: LD_VAR 0 4
37018: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37019: LD_ADDR_OWVAR 41
37023: PUSH
37024: LD_VAR 0 5
37028: ST_TO_ADDR
// end ;
37029: LD_VAR 0 6
37033: RET
// export function WantPlant ( unit ) ; var task ; begin
37034: LD_INT 0
37036: PPUSH
37037: PPUSH
// result := false ;
37038: LD_ADDR_VAR 0 2
37042: PUSH
37043: LD_INT 0
37045: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37046: LD_ADDR_VAR 0 3
37050: PUSH
37051: LD_VAR 0 1
37055: PPUSH
37056: CALL_OW 437
37060: ST_TO_ADDR
// if task then
37061: LD_VAR 0 3
37065: IFFALSE 37093
// if task [ 1 ] [ 1 ] = p then
37067: LD_VAR 0 3
37071: PUSH
37072: LD_INT 1
37074: ARRAY
37075: PUSH
37076: LD_INT 1
37078: ARRAY
37079: PUSH
37080: LD_STRING p
37082: EQUAL
37083: IFFALSE 37093
// result := true ;
37085: LD_ADDR_VAR 0 2
37089: PUSH
37090: LD_INT 1
37092: ST_TO_ADDR
// end ;
37093: LD_VAR 0 2
37097: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37098: LD_INT 0
37100: PPUSH
37101: PPUSH
37102: PPUSH
37103: PPUSH
// if pos < 1 then
37104: LD_VAR 0 2
37108: PUSH
37109: LD_INT 1
37111: LESS
37112: IFFALSE 37116
// exit ;
37114: GO 37419
// if pos = 1 then
37116: LD_VAR 0 2
37120: PUSH
37121: LD_INT 1
37123: EQUAL
37124: IFFALSE 37157
// result := Replace ( arr , pos [ 1 ] , value ) else
37126: LD_ADDR_VAR 0 4
37130: PUSH
37131: LD_VAR 0 1
37135: PPUSH
37136: LD_VAR 0 2
37140: PUSH
37141: LD_INT 1
37143: ARRAY
37144: PPUSH
37145: LD_VAR 0 3
37149: PPUSH
37150: CALL_OW 1
37154: ST_TO_ADDR
37155: GO 37419
// begin tmp := arr ;
37157: LD_ADDR_VAR 0 6
37161: PUSH
37162: LD_VAR 0 1
37166: ST_TO_ADDR
// s_arr := [ tmp ] ;
37167: LD_ADDR_VAR 0 7
37171: PUSH
37172: LD_VAR 0 6
37176: PUSH
37177: EMPTY
37178: LIST
37179: ST_TO_ADDR
// for i = 1 to pos - 1 do
37180: LD_ADDR_VAR 0 5
37184: PUSH
37185: DOUBLE
37186: LD_INT 1
37188: DEC
37189: ST_TO_ADDR
37190: LD_VAR 0 2
37194: PUSH
37195: LD_INT 1
37197: MINUS
37198: PUSH
37199: FOR_TO
37200: IFFALSE 37245
// begin tmp := tmp [ pos [ i ] ] ;
37202: LD_ADDR_VAR 0 6
37206: PUSH
37207: LD_VAR 0 6
37211: PUSH
37212: LD_VAR 0 2
37216: PUSH
37217: LD_VAR 0 5
37221: ARRAY
37222: ARRAY
37223: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37224: LD_ADDR_VAR 0 7
37228: PUSH
37229: LD_VAR 0 7
37233: PUSH
37234: LD_VAR 0 6
37238: PUSH
37239: EMPTY
37240: LIST
37241: ADD
37242: ST_TO_ADDR
// end ;
37243: GO 37199
37245: POP
37246: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37247: LD_ADDR_VAR 0 6
37251: PUSH
37252: LD_VAR 0 6
37256: PPUSH
37257: LD_VAR 0 2
37261: PUSH
37262: LD_VAR 0 2
37266: ARRAY
37267: PPUSH
37268: LD_VAR 0 3
37272: PPUSH
37273: CALL_OW 1
37277: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37278: LD_ADDR_VAR 0 7
37282: PUSH
37283: LD_VAR 0 7
37287: PPUSH
37288: LD_VAR 0 7
37292: PPUSH
37293: LD_VAR 0 6
37297: PPUSH
37298: CALL_OW 1
37302: ST_TO_ADDR
// for i = s_arr downto 2 do
37303: LD_ADDR_VAR 0 5
37307: PUSH
37308: DOUBLE
37309: LD_VAR 0 7
37313: INC
37314: ST_TO_ADDR
37315: LD_INT 2
37317: PUSH
37318: FOR_DOWNTO
37319: IFFALSE 37403
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37321: LD_ADDR_VAR 0 6
37325: PUSH
37326: LD_VAR 0 7
37330: PUSH
37331: LD_VAR 0 5
37335: PUSH
37336: LD_INT 1
37338: MINUS
37339: ARRAY
37340: PPUSH
37341: LD_VAR 0 2
37345: PUSH
37346: LD_VAR 0 5
37350: PUSH
37351: LD_INT 1
37353: MINUS
37354: ARRAY
37355: PPUSH
37356: LD_VAR 0 7
37360: PUSH
37361: LD_VAR 0 5
37365: ARRAY
37366: PPUSH
37367: CALL_OW 1
37371: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37372: LD_ADDR_VAR 0 7
37376: PUSH
37377: LD_VAR 0 7
37381: PPUSH
37382: LD_VAR 0 5
37386: PUSH
37387: LD_INT 1
37389: MINUS
37390: PPUSH
37391: LD_VAR 0 6
37395: PPUSH
37396: CALL_OW 1
37400: ST_TO_ADDR
// end ;
37401: GO 37318
37403: POP
37404: POP
// result := s_arr [ 1 ] ;
37405: LD_ADDR_VAR 0 4
37409: PUSH
37410: LD_VAR 0 7
37414: PUSH
37415: LD_INT 1
37417: ARRAY
37418: ST_TO_ADDR
// end ; end ;
37419: LD_VAR 0 4
37423: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37424: LD_INT 0
37426: PPUSH
37427: PPUSH
// if not list then
37428: LD_VAR 0 1
37432: NOT
37433: IFFALSE 37437
// exit ;
37435: GO 37528
// i := list [ pos1 ] ;
37437: LD_ADDR_VAR 0 5
37441: PUSH
37442: LD_VAR 0 1
37446: PUSH
37447: LD_VAR 0 2
37451: ARRAY
37452: ST_TO_ADDR
// if not i then
37453: LD_VAR 0 5
37457: NOT
37458: IFFALSE 37462
// exit ;
37460: GO 37528
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37462: LD_ADDR_VAR 0 1
37466: PUSH
37467: LD_VAR 0 1
37471: PPUSH
37472: LD_VAR 0 2
37476: PPUSH
37477: LD_VAR 0 1
37481: PUSH
37482: LD_VAR 0 3
37486: ARRAY
37487: PPUSH
37488: CALL_OW 1
37492: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37493: LD_ADDR_VAR 0 1
37497: PUSH
37498: LD_VAR 0 1
37502: PPUSH
37503: LD_VAR 0 3
37507: PPUSH
37508: LD_VAR 0 5
37512: PPUSH
37513: CALL_OW 1
37517: ST_TO_ADDR
// result := list ;
37518: LD_ADDR_VAR 0 4
37522: PUSH
37523: LD_VAR 0 1
37527: ST_TO_ADDR
// end ;
37528: LD_VAR 0 4
37532: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37533: LD_INT 0
37535: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37536: LD_ADDR_VAR 0 5
37540: PUSH
37541: LD_VAR 0 1
37545: PPUSH
37546: CALL_OW 250
37550: PPUSH
37551: LD_VAR 0 1
37555: PPUSH
37556: CALL_OW 251
37560: PPUSH
37561: LD_VAR 0 2
37565: PPUSH
37566: LD_VAR 0 3
37570: PPUSH
37571: LD_VAR 0 4
37575: PPUSH
37576: CALL 37586 0 5
37580: ST_TO_ADDR
// end ;
37581: LD_VAR 0 5
37585: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37586: LD_INT 0
37588: PPUSH
37589: PPUSH
37590: PPUSH
37591: PPUSH
// if not list then
37592: LD_VAR 0 3
37596: NOT
37597: IFFALSE 37601
// exit ;
37599: GO 37989
// result := [ ] ;
37601: LD_ADDR_VAR 0 6
37605: PUSH
37606: EMPTY
37607: ST_TO_ADDR
// for i in list do
37608: LD_ADDR_VAR 0 7
37612: PUSH
37613: LD_VAR 0 3
37617: PUSH
37618: FOR_IN
37619: IFFALSE 37821
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37621: LD_ADDR_VAR 0 9
37625: PUSH
37626: LD_VAR 0 7
37630: PPUSH
37631: LD_VAR 0 1
37635: PPUSH
37636: LD_VAR 0 2
37640: PPUSH
37641: CALL_OW 297
37645: ST_TO_ADDR
// if not result then
37646: LD_VAR 0 6
37650: NOT
37651: IFFALSE 37677
// result := [ [ i , tmp ] ] else
37653: LD_ADDR_VAR 0 6
37657: PUSH
37658: LD_VAR 0 7
37662: PUSH
37663: LD_VAR 0 9
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: EMPTY
37673: LIST
37674: ST_TO_ADDR
37675: GO 37819
// begin if result [ result ] [ 2 ] < tmp then
37677: LD_VAR 0 6
37681: PUSH
37682: LD_VAR 0 6
37686: ARRAY
37687: PUSH
37688: LD_INT 2
37690: ARRAY
37691: PUSH
37692: LD_VAR 0 9
37696: LESS
37697: IFFALSE 37739
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37699: LD_ADDR_VAR 0 6
37703: PUSH
37704: LD_VAR 0 6
37708: PPUSH
37709: LD_VAR 0 6
37713: PUSH
37714: LD_INT 1
37716: PLUS
37717: PPUSH
37718: LD_VAR 0 7
37722: PUSH
37723: LD_VAR 0 9
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PPUSH
37732: CALL_OW 2
37736: ST_TO_ADDR
37737: GO 37819
// for j = 1 to result do
37739: LD_ADDR_VAR 0 8
37743: PUSH
37744: DOUBLE
37745: LD_INT 1
37747: DEC
37748: ST_TO_ADDR
37749: LD_VAR 0 6
37753: PUSH
37754: FOR_TO
37755: IFFALSE 37817
// begin if tmp < result [ j ] [ 2 ] then
37757: LD_VAR 0 9
37761: PUSH
37762: LD_VAR 0 6
37766: PUSH
37767: LD_VAR 0 8
37771: ARRAY
37772: PUSH
37773: LD_INT 2
37775: ARRAY
37776: LESS
37777: IFFALSE 37815
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37779: LD_ADDR_VAR 0 6
37783: PUSH
37784: LD_VAR 0 6
37788: PPUSH
37789: LD_VAR 0 8
37793: PPUSH
37794: LD_VAR 0 7
37798: PUSH
37799: LD_VAR 0 9
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PPUSH
37808: CALL_OW 2
37812: ST_TO_ADDR
// break ;
37813: GO 37817
// end ; end ;
37815: GO 37754
37817: POP
37818: POP
// end ; end ;
37819: GO 37618
37821: POP
37822: POP
// if result and not asc then
37823: LD_VAR 0 6
37827: PUSH
37828: LD_VAR 0 4
37832: NOT
37833: AND
37834: IFFALSE 37909
// begin tmp := result ;
37836: LD_ADDR_VAR 0 9
37840: PUSH
37841: LD_VAR 0 6
37845: ST_TO_ADDR
// for i = tmp downto 1 do
37846: LD_ADDR_VAR 0 7
37850: PUSH
37851: DOUBLE
37852: LD_VAR 0 9
37856: INC
37857: ST_TO_ADDR
37858: LD_INT 1
37860: PUSH
37861: FOR_DOWNTO
37862: IFFALSE 37907
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37864: LD_ADDR_VAR 0 6
37868: PUSH
37869: LD_VAR 0 6
37873: PPUSH
37874: LD_VAR 0 9
37878: PUSH
37879: LD_VAR 0 7
37883: MINUS
37884: PUSH
37885: LD_INT 1
37887: PLUS
37888: PPUSH
37889: LD_VAR 0 9
37893: PUSH
37894: LD_VAR 0 7
37898: ARRAY
37899: PPUSH
37900: CALL_OW 1
37904: ST_TO_ADDR
37905: GO 37861
37907: POP
37908: POP
// end ; tmp := [ ] ;
37909: LD_ADDR_VAR 0 9
37913: PUSH
37914: EMPTY
37915: ST_TO_ADDR
// if mode then
37916: LD_VAR 0 5
37920: IFFALSE 37989
// begin for i = 1 to result do
37922: LD_ADDR_VAR 0 7
37926: PUSH
37927: DOUBLE
37928: LD_INT 1
37930: DEC
37931: ST_TO_ADDR
37932: LD_VAR 0 6
37936: PUSH
37937: FOR_TO
37938: IFFALSE 37977
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37940: LD_ADDR_VAR 0 9
37944: PUSH
37945: LD_VAR 0 9
37949: PPUSH
37950: LD_VAR 0 7
37954: PPUSH
37955: LD_VAR 0 6
37959: PUSH
37960: LD_VAR 0 7
37964: ARRAY
37965: PUSH
37966: LD_INT 1
37968: ARRAY
37969: PPUSH
37970: CALL_OW 1
37974: ST_TO_ADDR
37975: GO 37937
37977: POP
37978: POP
// result := tmp ;
37979: LD_ADDR_VAR 0 6
37983: PUSH
37984: LD_VAR 0 9
37988: ST_TO_ADDR
// end ; end ;
37989: LD_VAR 0 6
37993: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37994: LD_INT 0
37996: PPUSH
37997: PPUSH
37998: PPUSH
37999: PPUSH
38000: PPUSH
38001: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38002: LD_ADDR_VAR 0 5
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: LD_INT 0
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: EMPTY
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: ST_TO_ADDR
// if not x or not y then
38024: LD_VAR 0 2
38028: NOT
38029: PUSH
38030: LD_VAR 0 3
38034: NOT
38035: OR
38036: IFFALSE 38040
// exit ;
38038: GO 39692
// if not range then
38040: LD_VAR 0 4
38044: NOT
38045: IFFALSE 38055
// range := 10 ;
38047: LD_ADDR_VAR 0 4
38051: PUSH
38052: LD_INT 10
38054: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38055: LD_ADDR_VAR 0 8
38059: PUSH
38060: LD_INT 81
38062: PUSH
38063: LD_VAR 0 1
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 92
38074: PUSH
38075: LD_VAR 0 2
38079: PUSH
38080: LD_VAR 0 3
38084: PUSH
38085: LD_VAR 0 4
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 3
38098: PUSH
38099: LD_INT 21
38101: PUSH
38102: LD_INT 3
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: LIST
38117: PPUSH
38118: CALL_OW 69
38122: ST_TO_ADDR
// if not tmp then
38123: LD_VAR 0 8
38127: NOT
38128: IFFALSE 38132
// exit ;
38130: GO 39692
// for i in tmp do
38132: LD_ADDR_VAR 0 6
38136: PUSH
38137: LD_VAR 0 8
38141: PUSH
38142: FOR_IN
38143: IFFALSE 39667
// begin points := [ 0 , 0 , 0 ] ;
38145: LD_ADDR_VAR 0 9
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: LIST
38163: ST_TO_ADDR
// bpoints := 1 ;
38164: LD_ADDR_VAR 0 10
38168: PUSH
38169: LD_INT 1
38171: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38172: LD_VAR 0 6
38176: PPUSH
38177: CALL_OW 247
38181: PUSH
38182: LD_INT 1
38184: DOUBLE
38185: EQUAL
38186: IFTRUE 38190
38188: GO 38768
38190: POP
// begin if GetClass ( i ) = 1 then
38191: LD_VAR 0 6
38195: PPUSH
38196: CALL_OW 257
38200: PUSH
38201: LD_INT 1
38203: EQUAL
38204: IFFALSE 38225
// points := [ 10 , 5 , 3 ] ;
38206: LD_ADDR_VAR 0 9
38210: PUSH
38211: LD_INT 10
38213: PUSH
38214: LD_INT 5
38216: PUSH
38217: LD_INT 3
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: LIST
38224: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38225: LD_VAR 0 6
38229: PPUSH
38230: CALL_OW 257
38234: PUSH
38235: LD_INT 2
38237: PUSH
38238: LD_INT 3
38240: PUSH
38241: LD_INT 4
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: LIST
38248: IN
38249: IFFALSE 38270
// points := [ 3 , 2 , 1 ] ;
38251: LD_ADDR_VAR 0 9
38255: PUSH
38256: LD_INT 3
38258: PUSH
38259: LD_INT 2
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: LIST
38269: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38270: LD_VAR 0 6
38274: PPUSH
38275: CALL_OW 257
38279: PUSH
38280: LD_INT 5
38282: EQUAL
38283: IFFALSE 38304
// points := [ 130 , 5 , 2 ] ;
38285: LD_ADDR_VAR 0 9
38289: PUSH
38290: LD_INT 130
38292: PUSH
38293: LD_INT 5
38295: PUSH
38296: LD_INT 2
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38304: LD_VAR 0 6
38308: PPUSH
38309: CALL_OW 257
38313: PUSH
38314: LD_INT 8
38316: EQUAL
38317: IFFALSE 38338
// points := [ 35 , 35 , 30 ] ;
38319: LD_ADDR_VAR 0 9
38323: PUSH
38324: LD_INT 35
38326: PUSH
38327: LD_INT 35
38329: PUSH
38330: LD_INT 30
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: LIST
38337: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38338: LD_VAR 0 6
38342: PPUSH
38343: CALL_OW 257
38347: PUSH
38348: LD_INT 9
38350: EQUAL
38351: IFFALSE 38372
// points := [ 20 , 55 , 40 ] ;
38353: LD_ADDR_VAR 0 9
38357: PUSH
38358: LD_INT 20
38360: PUSH
38361: LD_INT 55
38363: PUSH
38364: LD_INT 40
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: LIST
38371: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38372: LD_VAR 0 6
38376: PPUSH
38377: CALL_OW 257
38381: PUSH
38382: LD_INT 12
38384: PUSH
38385: LD_INT 16
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: IN
38392: IFFALSE 38413
// points := [ 5 , 3 , 2 ] ;
38394: LD_ADDR_VAR 0 9
38398: PUSH
38399: LD_INT 5
38401: PUSH
38402: LD_INT 3
38404: PUSH
38405: LD_INT 2
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: LIST
38412: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38413: LD_VAR 0 6
38417: PPUSH
38418: CALL_OW 257
38422: PUSH
38423: LD_INT 17
38425: EQUAL
38426: IFFALSE 38447
// points := [ 100 , 50 , 75 ] ;
38428: LD_ADDR_VAR 0 9
38432: PUSH
38433: LD_INT 100
38435: PUSH
38436: LD_INT 50
38438: PUSH
38439: LD_INT 75
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38447: LD_VAR 0 6
38451: PPUSH
38452: CALL_OW 257
38456: PUSH
38457: LD_INT 15
38459: EQUAL
38460: IFFALSE 38481
// points := [ 10 , 5 , 3 ] ;
38462: LD_ADDR_VAR 0 9
38466: PUSH
38467: LD_INT 10
38469: PUSH
38470: LD_INT 5
38472: PUSH
38473: LD_INT 3
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38481: LD_VAR 0 6
38485: PPUSH
38486: CALL_OW 257
38490: PUSH
38491: LD_INT 14
38493: EQUAL
38494: IFFALSE 38515
// points := [ 10 , 0 , 0 ] ;
38496: LD_ADDR_VAR 0 9
38500: PUSH
38501: LD_INT 10
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38515: LD_VAR 0 6
38519: PPUSH
38520: CALL_OW 257
38524: PUSH
38525: LD_INT 11
38527: EQUAL
38528: IFFALSE 38549
// points := [ 30 , 10 , 5 ] ;
38530: LD_ADDR_VAR 0 9
38534: PUSH
38535: LD_INT 30
38537: PUSH
38538: LD_INT 10
38540: PUSH
38541: LD_INT 5
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: LIST
38548: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38549: LD_VAR 0 1
38553: PPUSH
38554: LD_INT 5
38556: PPUSH
38557: CALL_OW 321
38561: PUSH
38562: LD_INT 2
38564: EQUAL
38565: IFFALSE 38582
// bpoints := bpoints * 1.8 ;
38567: LD_ADDR_VAR 0 10
38571: PUSH
38572: LD_VAR 0 10
38576: PUSH
38577: LD_REAL  1.80000000000000E+0000
38580: MUL
38581: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38582: LD_VAR 0 6
38586: PPUSH
38587: CALL_OW 257
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: LD_INT 2
38597: PUSH
38598: LD_INT 3
38600: PUSH
38601: LD_INT 4
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: IN
38610: PUSH
38611: LD_VAR 0 1
38615: PPUSH
38616: LD_INT 51
38618: PPUSH
38619: CALL_OW 321
38623: PUSH
38624: LD_INT 2
38626: EQUAL
38627: AND
38628: IFFALSE 38645
// bpoints := bpoints * 1.2 ;
38630: LD_ADDR_VAR 0 10
38634: PUSH
38635: LD_VAR 0 10
38639: PUSH
38640: LD_REAL  1.20000000000000E+0000
38643: MUL
38644: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38645: LD_VAR 0 6
38649: PPUSH
38650: CALL_OW 257
38654: PUSH
38655: LD_INT 5
38657: PUSH
38658: LD_INT 7
38660: PUSH
38661: LD_INT 9
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: IN
38669: PUSH
38670: LD_VAR 0 1
38674: PPUSH
38675: LD_INT 52
38677: PPUSH
38678: CALL_OW 321
38682: PUSH
38683: LD_INT 2
38685: EQUAL
38686: AND
38687: IFFALSE 38704
// bpoints := bpoints * 1.5 ;
38689: LD_ADDR_VAR 0 10
38693: PUSH
38694: LD_VAR 0 10
38698: PUSH
38699: LD_REAL  1.50000000000000E+0000
38702: MUL
38703: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38704: LD_VAR 0 1
38708: PPUSH
38709: LD_INT 66
38711: PPUSH
38712: CALL_OW 321
38716: PUSH
38717: LD_INT 2
38719: EQUAL
38720: IFFALSE 38737
// bpoints := bpoints * 1.1 ;
38722: LD_ADDR_VAR 0 10
38726: PUSH
38727: LD_VAR 0 10
38731: PUSH
38732: LD_REAL  1.10000000000000E+0000
38735: MUL
38736: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38737: LD_ADDR_VAR 0 10
38741: PUSH
38742: LD_VAR 0 10
38746: PUSH
38747: LD_VAR 0 6
38751: PPUSH
38752: LD_INT 1
38754: PPUSH
38755: CALL_OW 259
38759: PUSH
38760: LD_REAL  1.15000000000000E+0000
38763: MUL
38764: MUL
38765: ST_TO_ADDR
// end ; unit_vehicle :
38766: GO 39596
38768: LD_INT 2
38770: DOUBLE
38771: EQUAL
38772: IFTRUE 38776
38774: GO 39584
38776: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38777: LD_VAR 0 6
38781: PPUSH
38782: CALL_OW 264
38786: PUSH
38787: LD_INT 2
38789: PUSH
38790: LD_INT 42
38792: PUSH
38793: LD_INT 24
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: LIST
38800: IN
38801: IFFALSE 38822
// points := [ 25 , 5 , 3 ] ;
38803: LD_ADDR_VAR 0 9
38807: PUSH
38808: LD_INT 25
38810: PUSH
38811: LD_INT 5
38813: PUSH
38814: LD_INT 3
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: LIST
38821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38822: LD_VAR 0 6
38826: PPUSH
38827: CALL_OW 264
38831: PUSH
38832: LD_INT 4
38834: PUSH
38835: LD_INT 43
38837: PUSH
38838: LD_INT 25
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: LIST
38845: IN
38846: IFFALSE 38867
// points := [ 40 , 15 , 5 ] ;
38848: LD_ADDR_VAR 0 9
38852: PUSH
38853: LD_INT 40
38855: PUSH
38856: LD_INT 15
38858: PUSH
38859: LD_INT 5
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38867: LD_VAR 0 6
38871: PPUSH
38872: CALL_OW 264
38876: PUSH
38877: LD_INT 3
38879: PUSH
38880: LD_INT 23
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: IN
38887: IFFALSE 38908
// points := [ 7 , 25 , 8 ] ;
38889: LD_ADDR_VAR 0 9
38893: PUSH
38894: LD_INT 7
38896: PUSH
38897: LD_INT 25
38899: PUSH
38900: LD_INT 8
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38908: LD_VAR 0 6
38912: PPUSH
38913: CALL_OW 264
38917: PUSH
38918: LD_INT 5
38920: PUSH
38921: LD_INT 27
38923: PUSH
38924: LD_INT 44
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: LIST
38931: IN
38932: IFFALSE 38953
// points := [ 14 , 50 , 16 ] ;
38934: LD_ADDR_VAR 0 9
38938: PUSH
38939: LD_INT 14
38941: PUSH
38942: LD_INT 50
38944: PUSH
38945: LD_INT 16
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38953: LD_VAR 0 6
38957: PPUSH
38958: CALL_OW 264
38962: PUSH
38963: LD_INT 6
38965: PUSH
38966: LD_INT 46
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: IN
38973: IFFALSE 38994
// points := [ 32 , 120 , 70 ] ;
38975: LD_ADDR_VAR 0 9
38979: PUSH
38980: LD_INT 32
38982: PUSH
38983: LD_INT 120
38985: PUSH
38986: LD_INT 70
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: LIST
38993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38994: LD_VAR 0 6
38998: PPUSH
38999: CALL_OW 264
39003: PUSH
39004: LD_INT 7
39006: PUSH
39007: LD_INT 28
39009: PUSH
39010: LD_INT 45
39012: PUSH
39013: LD_EXP 48
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: IN
39024: IFFALSE 39045
// points := [ 35 , 20 , 45 ] ;
39026: LD_ADDR_VAR 0 9
39030: PUSH
39031: LD_INT 35
39033: PUSH
39034: LD_INT 20
39036: PUSH
39037: LD_INT 45
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39045: LD_VAR 0 6
39049: PPUSH
39050: CALL_OW 264
39054: PUSH
39055: LD_INT 47
39057: PUSH
39058: EMPTY
39059: LIST
39060: IN
39061: IFFALSE 39082
// points := [ 67 , 45 , 75 ] ;
39063: LD_ADDR_VAR 0 9
39067: PUSH
39068: LD_INT 67
39070: PUSH
39071: LD_INT 45
39073: PUSH
39074: LD_INT 75
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39082: LD_VAR 0 6
39086: PPUSH
39087: CALL_OW 264
39091: PUSH
39092: LD_INT 26
39094: PUSH
39095: EMPTY
39096: LIST
39097: IN
39098: IFFALSE 39119
// points := [ 120 , 30 , 80 ] ;
39100: LD_ADDR_VAR 0 9
39104: PUSH
39105: LD_INT 120
39107: PUSH
39108: LD_INT 30
39110: PUSH
39111: LD_INT 80
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: LIST
39118: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39119: LD_VAR 0 6
39123: PPUSH
39124: CALL_OW 264
39128: PUSH
39129: LD_INT 22
39131: PUSH
39132: EMPTY
39133: LIST
39134: IN
39135: IFFALSE 39156
// points := [ 40 , 1 , 1 ] ;
39137: LD_ADDR_VAR 0 9
39141: PUSH
39142: LD_INT 40
39144: PUSH
39145: LD_INT 1
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39156: LD_VAR 0 6
39160: PPUSH
39161: CALL_OW 264
39165: PUSH
39166: LD_INT 29
39168: PUSH
39169: EMPTY
39170: LIST
39171: IN
39172: IFFALSE 39193
// points := [ 70 , 200 , 400 ] ;
39174: LD_ADDR_VAR 0 9
39178: PUSH
39179: LD_INT 70
39181: PUSH
39182: LD_INT 200
39184: PUSH
39185: LD_INT 400
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: LIST
39192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39193: LD_VAR 0 6
39197: PPUSH
39198: CALL_OW 264
39202: PUSH
39203: LD_INT 14
39205: PUSH
39206: LD_INT 53
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: IN
39213: IFFALSE 39234
// points := [ 40 , 10 , 20 ] ;
39215: LD_ADDR_VAR 0 9
39219: PUSH
39220: LD_INT 40
39222: PUSH
39223: LD_INT 10
39225: PUSH
39226: LD_INT 20
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: LIST
39233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39234: LD_VAR 0 6
39238: PPUSH
39239: CALL_OW 264
39243: PUSH
39244: LD_INT 9
39246: PUSH
39247: EMPTY
39248: LIST
39249: IN
39250: IFFALSE 39271
// points := [ 5 , 70 , 20 ] ;
39252: LD_ADDR_VAR 0 9
39256: PUSH
39257: LD_INT 5
39259: PUSH
39260: LD_INT 70
39262: PUSH
39263: LD_INT 20
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: LIST
39270: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39271: LD_VAR 0 6
39275: PPUSH
39276: CALL_OW 264
39280: PUSH
39281: LD_INT 10
39283: PUSH
39284: EMPTY
39285: LIST
39286: IN
39287: IFFALSE 39308
// points := [ 35 , 110 , 70 ] ;
39289: LD_ADDR_VAR 0 9
39293: PUSH
39294: LD_INT 35
39296: PUSH
39297: LD_INT 110
39299: PUSH
39300: LD_INT 70
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39308: LD_VAR 0 6
39312: PPUSH
39313: CALL_OW 265
39317: PUSH
39318: LD_INT 25
39320: EQUAL
39321: IFFALSE 39342
// points := [ 80 , 65 , 100 ] ;
39323: LD_ADDR_VAR 0 9
39327: PUSH
39328: LD_INT 80
39330: PUSH
39331: LD_INT 65
39333: PUSH
39334: LD_INT 100
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39342: LD_VAR 0 6
39346: PPUSH
39347: CALL_OW 263
39351: PUSH
39352: LD_INT 1
39354: EQUAL
39355: IFFALSE 39390
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39357: LD_ADDR_VAR 0 10
39361: PUSH
39362: LD_VAR 0 10
39366: PUSH
39367: LD_VAR 0 6
39371: PPUSH
39372: CALL_OW 311
39376: PPUSH
39377: LD_INT 3
39379: PPUSH
39380: CALL_OW 259
39384: PUSH
39385: LD_INT 4
39387: MUL
39388: MUL
39389: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39390: LD_VAR 0 6
39394: PPUSH
39395: CALL_OW 263
39399: PUSH
39400: LD_INT 2
39402: EQUAL
39403: IFFALSE 39454
// begin j := IsControledBy ( i ) ;
39405: LD_ADDR_VAR 0 7
39409: PUSH
39410: LD_VAR 0 6
39414: PPUSH
39415: CALL_OW 312
39419: ST_TO_ADDR
// if j then
39420: LD_VAR 0 7
39424: IFFALSE 39454
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39426: LD_ADDR_VAR 0 10
39430: PUSH
39431: LD_VAR 0 10
39435: PUSH
39436: LD_VAR 0 7
39440: PPUSH
39441: LD_INT 3
39443: PPUSH
39444: CALL_OW 259
39448: PUSH
39449: LD_INT 3
39451: MUL
39452: MUL
39453: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39454: LD_VAR 0 6
39458: PPUSH
39459: CALL_OW 264
39463: PUSH
39464: LD_INT 5
39466: PUSH
39467: LD_INT 6
39469: PUSH
39470: LD_INT 46
39472: PUSH
39473: LD_INT 44
39475: PUSH
39476: LD_INT 47
39478: PUSH
39479: LD_INT 45
39481: PUSH
39482: LD_INT 28
39484: PUSH
39485: LD_INT 7
39487: PUSH
39488: LD_INT 27
39490: PUSH
39491: LD_INT 29
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: IN
39506: PUSH
39507: LD_VAR 0 1
39511: PPUSH
39512: LD_INT 52
39514: PPUSH
39515: CALL_OW 321
39519: PUSH
39520: LD_INT 2
39522: EQUAL
39523: AND
39524: IFFALSE 39541
// bpoints := bpoints * 1.2 ;
39526: LD_ADDR_VAR 0 10
39530: PUSH
39531: LD_VAR 0 10
39535: PUSH
39536: LD_REAL  1.20000000000000E+0000
39539: MUL
39540: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39541: LD_VAR 0 6
39545: PPUSH
39546: CALL_OW 264
39550: PUSH
39551: LD_INT 6
39553: PUSH
39554: LD_INT 46
39556: PUSH
39557: LD_INT 47
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: LIST
39564: IN
39565: IFFALSE 39582
// bpoints := bpoints * 1.2 ;
39567: LD_ADDR_VAR 0 10
39571: PUSH
39572: LD_VAR 0 10
39576: PUSH
39577: LD_REAL  1.20000000000000E+0000
39580: MUL
39581: ST_TO_ADDR
// end ; unit_building :
39582: GO 39596
39584: LD_INT 3
39586: DOUBLE
39587: EQUAL
39588: IFTRUE 39592
39590: GO 39595
39592: POP
// ; end ;
39593: GO 39596
39595: POP
// for j = 1 to 3 do
39596: LD_ADDR_VAR 0 7
39600: PUSH
39601: DOUBLE
39602: LD_INT 1
39604: DEC
39605: ST_TO_ADDR
39606: LD_INT 3
39608: PUSH
39609: FOR_TO
39610: IFFALSE 39663
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39612: LD_ADDR_VAR 0 5
39616: PUSH
39617: LD_VAR 0 5
39621: PPUSH
39622: LD_VAR 0 7
39626: PPUSH
39627: LD_VAR 0 5
39631: PUSH
39632: LD_VAR 0 7
39636: ARRAY
39637: PUSH
39638: LD_VAR 0 9
39642: PUSH
39643: LD_VAR 0 7
39647: ARRAY
39648: PUSH
39649: LD_VAR 0 10
39653: MUL
39654: PLUS
39655: PPUSH
39656: CALL_OW 1
39660: ST_TO_ADDR
39661: GO 39609
39663: POP
39664: POP
// end ;
39665: GO 38142
39667: POP
39668: POP
// result := Replace ( result , 4 , tmp ) ;
39669: LD_ADDR_VAR 0 5
39673: PUSH
39674: LD_VAR 0 5
39678: PPUSH
39679: LD_INT 4
39681: PPUSH
39682: LD_VAR 0 8
39686: PPUSH
39687: CALL_OW 1
39691: ST_TO_ADDR
// end ;
39692: LD_VAR 0 5
39696: RET
// export function DangerAtRange ( unit , range ) ; begin
39697: LD_INT 0
39699: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39700: LD_ADDR_VAR 0 3
39704: PUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 255
39714: PPUSH
39715: LD_VAR 0 1
39719: PPUSH
39720: CALL_OW 250
39724: PPUSH
39725: LD_VAR 0 1
39729: PPUSH
39730: CALL_OW 251
39734: PPUSH
39735: LD_VAR 0 2
39739: PPUSH
39740: CALL 37994 0 4
39744: ST_TO_ADDR
// end ;
39745: LD_VAR 0 3
39749: RET
// export function DangerInArea ( side , area ) ; begin
39750: LD_INT 0
39752: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39753: LD_ADDR_VAR 0 3
39757: PUSH
39758: LD_VAR 0 2
39762: PPUSH
39763: LD_INT 81
39765: PUSH
39766: LD_VAR 0 1
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PPUSH
39775: CALL_OW 70
39779: ST_TO_ADDR
// end ;
39780: LD_VAR 0 3
39784: RET
// export function IsExtension ( b ) ; begin
39785: LD_INT 0
39787: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39788: LD_ADDR_VAR 0 2
39792: PUSH
39793: LD_VAR 0 1
39797: PUSH
39798: LD_INT 23
39800: PUSH
39801: LD_INT 20
39803: PUSH
39804: LD_INT 22
39806: PUSH
39807: LD_INT 17
39809: PUSH
39810: LD_INT 24
39812: PUSH
39813: LD_INT 21
39815: PUSH
39816: LD_INT 19
39818: PUSH
39819: LD_INT 16
39821: PUSH
39822: LD_INT 25
39824: PUSH
39825: LD_INT 18
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: IN
39840: ST_TO_ADDR
// end ;
39841: LD_VAR 0 2
39845: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39846: LD_INT 0
39848: PPUSH
39849: PPUSH
39850: PPUSH
// result := [ ] ;
39851: LD_ADDR_VAR 0 4
39855: PUSH
39856: EMPTY
39857: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39858: LD_ADDR_VAR 0 5
39862: PUSH
39863: LD_VAR 0 2
39867: PPUSH
39868: LD_INT 21
39870: PUSH
39871: LD_INT 3
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PPUSH
39878: CALL_OW 70
39882: ST_TO_ADDR
// if not tmp then
39883: LD_VAR 0 5
39887: NOT
39888: IFFALSE 39892
// exit ;
39890: GO 39956
// if checkLink then
39892: LD_VAR 0 3
39896: IFFALSE 39946
// begin for i in tmp do
39898: LD_ADDR_VAR 0 6
39902: PUSH
39903: LD_VAR 0 5
39907: PUSH
39908: FOR_IN
39909: IFFALSE 39944
// if GetBase ( i ) <> base then
39911: LD_VAR 0 6
39915: PPUSH
39916: CALL_OW 274
39920: PUSH
39921: LD_VAR 0 1
39925: NONEQUAL
39926: IFFALSE 39942
// ComLinkToBase ( base , i ) ;
39928: LD_VAR 0 1
39932: PPUSH
39933: LD_VAR 0 6
39937: PPUSH
39938: CALL_OW 169
39942: GO 39908
39944: POP
39945: POP
// end ; result := tmp ;
39946: LD_ADDR_VAR 0 4
39950: PUSH
39951: LD_VAR 0 5
39955: ST_TO_ADDR
// end ;
39956: LD_VAR 0 4
39960: RET
// export function ComComplete ( units , b ) ; var i ; begin
39961: LD_INT 0
39963: PPUSH
39964: PPUSH
// if not units then
39965: LD_VAR 0 1
39969: NOT
39970: IFFALSE 39974
// exit ;
39972: GO 40064
// for i in units do
39974: LD_ADDR_VAR 0 4
39978: PUSH
39979: LD_VAR 0 1
39983: PUSH
39984: FOR_IN
39985: IFFALSE 40062
// if BuildingStatus ( b ) = bs_build then
39987: LD_VAR 0 2
39991: PPUSH
39992: CALL_OW 461
39996: PUSH
39997: LD_INT 1
39999: EQUAL
40000: IFFALSE 40060
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40002: LD_VAR 0 4
40006: PPUSH
40007: LD_STRING h
40009: PUSH
40010: LD_VAR 0 2
40014: PPUSH
40015: CALL_OW 250
40019: PUSH
40020: LD_VAR 0 2
40024: PPUSH
40025: CALL_OW 251
40029: PUSH
40030: LD_VAR 0 2
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: PUSH
40053: EMPTY
40054: LIST
40055: PPUSH
40056: CALL_OW 446
40060: GO 39984
40062: POP
40063: POP
// end ;
40064: LD_VAR 0 3
40068: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40069: LD_INT 0
40071: PPUSH
40072: PPUSH
40073: PPUSH
40074: PPUSH
40075: PPUSH
40076: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40077: LD_VAR 0 1
40081: NOT
40082: PUSH
40083: LD_VAR 0 1
40087: PPUSH
40088: CALL_OW 263
40092: PUSH
40093: LD_INT 2
40095: NONEQUAL
40096: OR
40097: IFFALSE 40101
// exit ;
40099: GO 40417
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40101: LD_ADDR_VAR 0 6
40105: PUSH
40106: LD_INT 22
40108: PUSH
40109: LD_VAR 0 1
40113: PPUSH
40114: CALL_OW 255
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: LD_INT 30
40128: PUSH
40129: LD_INT 36
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 34
40138: PUSH
40139: LD_INT 31
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: LIST
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PPUSH
40155: CALL_OW 69
40159: ST_TO_ADDR
// if not tmp then
40160: LD_VAR 0 6
40164: NOT
40165: IFFALSE 40169
// exit ;
40167: GO 40417
// result := [ ] ;
40169: LD_ADDR_VAR 0 2
40173: PUSH
40174: EMPTY
40175: ST_TO_ADDR
// for i in tmp do
40176: LD_ADDR_VAR 0 3
40180: PUSH
40181: LD_VAR 0 6
40185: PUSH
40186: FOR_IN
40187: IFFALSE 40258
// begin t := UnitsInside ( i ) ;
40189: LD_ADDR_VAR 0 4
40193: PUSH
40194: LD_VAR 0 3
40198: PPUSH
40199: CALL_OW 313
40203: ST_TO_ADDR
// if t then
40204: LD_VAR 0 4
40208: IFFALSE 40256
// for j in t do
40210: LD_ADDR_VAR 0 7
40214: PUSH
40215: LD_VAR 0 4
40219: PUSH
40220: FOR_IN
40221: IFFALSE 40254
// result := Replace ( result , result + 1 , j ) ;
40223: LD_ADDR_VAR 0 2
40227: PUSH
40228: LD_VAR 0 2
40232: PPUSH
40233: LD_VAR 0 2
40237: PUSH
40238: LD_INT 1
40240: PLUS
40241: PPUSH
40242: LD_VAR 0 7
40246: PPUSH
40247: CALL_OW 1
40251: ST_TO_ADDR
40252: GO 40220
40254: POP
40255: POP
// end ;
40256: GO 40186
40258: POP
40259: POP
// if not result then
40260: LD_VAR 0 2
40264: NOT
40265: IFFALSE 40269
// exit ;
40267: GO 40417
// mech := result [ 1 ] ;
40269: LD_ADDR_VAR 0 5
40273: PUSH
40274: LD_VAR 0 2
40278: PUSH
40279: LD_INT 1
40281: ARRAY
40282: ST_TO_ADDR
// if result > 1 then
40283: LD_VAR 0 2
40287: PUSH
40288: LD_INT 1
40290: GREATER
40291: IFFALSE 40403
// begin for i = 2 to result do
40293: LD_ADDR_VAR 0 3
40297: PUSH
40298: DOUBLE
40299: LD_INT 2
40301: DEC
40302: ST_TO_ADDR
40303: LD_VAR 0 2
40307: PUSH
40308: FOR_TO
40309: IFFALSE 40401
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40311: LD_ADDR_VAR 0 4
40315: PUSH
40316: LD_VAR 0 2
40320: PUSH
40321: LD_VAR 0 3
40325: ARRAY
40326: PPUSH
40327: LD_INT 3
40329: PPUSH
40330: CALL_OW 259
40334: PUSH
40335: LD_VAR 0 2
40339: PUSH
40340: LD_VAR 0 3
40344: ARRAY
40345: PPUSH
40346: CALL_OW 432
40350: MINUS
40351: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40352: LD_VAR 0 4
40356: PUSH
40357: LD_VAR 0 5
40361: PPUSH
40362: LD_INT 3
40364: PPUSH
40365: CALL_OW 259
40369: PUSH
40370: LD_VAR 0 5
40374: PPUSH
40375: CALL_OW 432
40379: MINUS
40380: GREATEREQUAL
40381: IFFALSE 40399
// mech := result [ i ] ;
40383: LD_ADDR_VAR 0 5
40387: PUSH
40388: LD_VAR 0 2
40392: PUSH
40393: LD_VAR 0 3
40397: ARRAY
40398: ST_TO_ADDR
// end ;
40399: GO 40308
40401: POP
40402: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40403: LD_VAR 0 1
40407: PPUSH
40408: LD_VAR 0 5
40412: PPUSH
40413: CALL_OW 135
// end ;
40417: LD_VAR 0 2
40421: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40422: LD_INT 0
40424: PPUSH
40425: PPUSH
40426: PPUSH
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
40431: PPUSH
40432: PPUSH
40433: PPUSH
40434: PPUSH
40435: PPUSH
40436: PPUSH
// result := [ ] ;
40437: LD_ADDR_VAR 0 7
40441: PUSH
40442: EMPTY
40443: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40444: LD_VAR 0 1
40448: PPUSH
40449: CALL_OW 266
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: IN
40464: NOT
40465: IFFALSE 40469
// exit ;
40467: GO 42103
// if name then
40469: LD_VAR 0 3
40473: IFFALSE 40489
// SetBName ( base_dep , name ) ;
40475: LD_VAR 0 1
40479: PPUSH
40480: LD_VAR 0 3
40484: PPUSH
40485: CALL_OW 500
// base := GetBase ( base_dep ) ;
40489: LD_ADDR_VAR 0 15
40493: PUSH
40494: LD_VAR 0 1
40498: PPUSH
40499: CALL_OW 274
40503: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40504: LD_ADDR_VAR 0 16
40508: PUSH
40509: LD_VAR 0 1
40513: PPUSH
40514: CALL_OW 255
40518: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40519: LD_ADDR_VAR 0 17
40523: PUSH
40524: LD_VAR 0 1
40528: PPUSH
40529: CALL_OW 248
40533: ST_TO_ADDR
// if sources then
40534: LD_VAR 0 5
40538: IFFALSE 40585
// for i = 1 to 3 do
40540: LD_ADDR_VAR 0 8
40544: PUSH
40545: DOUBLE
40546: LD_INT 1
40548: DEC
40549: ST_TO_ADDR
40550: LD_INT 3
40552: PUSH
40553: FOR_TO
40554: IFFALSE 40583
// AddResourceType ( base , i , sources [ i ] ) ;
40556: LD_VAR 0 15
40560: PPUSH
40561: LD_VAR 0 8
40565: PPUSH
40566: LD_VAR 0 5
40570: PUSH
40571: LD_VAR 0 8
40575: ARRAY
40576: PPUSH
40577: CALL_OW 276
40581: GO 40553
40583: POP
40584: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40585: LD_ADDR_VAR 0 18
40589: PUSH
40590: LD_VAR 0 15
40594: PPUSH
40595: LD_VAR 0 2
40599: PPUSH
40600: LD_INT 1
40602: PPUSH
40603: CALL 39846 0 3
40607: ST_TO_ADDR
// InitHc ;
40608: CALL_OW 19
// InitUc ;
40612: CALL_OW 18
// uc_side := side ;
40616: LD_ADDR_OWVAR 20
40620: PUSH
40621: LD_VAR 0 16
40625: ST_TO_ADDR
// uc_nation := nation ;
40626: LD_ADDR_OWVAR 21
40630: PUSH
40631: LD_VAR 0 17
40635: ST_TO_ADDR
// if buildings then
40636: LD_VAR 0 18
40640: IFFALSE 41962
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40642: LD_ADDR_VAR 0 19
40646: PUSH
40647: LD_VAR 0 18
40651: PPUSH
40652: LD_INT 2
40654: PUSH
40655: LD_INT 30
40657: PUSH
40658: LD_INT 29
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 30
40667: PUSH
40668: LD_INT 30
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: LIST
40679: PPUSH
40680: CALL_OW 72
40684: ST_TO_ADDR
// if tmp then
40685: LD_VAR 0 19
40689: IFFALSE 40737
// for i in tmp do
40691: LD_ADDR_VAR 0 8
40695: PUSH
40696: LD_VAR 0 19
40700: PUSH
40701: FOR_IN
40702: IFFALSE 40735
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40704: LD_VAR 0 8
40708: PPUSH
40709: CALL_OW 250
40713: PPUSH
40714: LD_VAR 0 8
40718: PPUSH
40719: CALL_OW 251
40723: PPUSH
40724: LD_VAR 0 16
40728: PPUSH
40729: CALL_OW 441
40733: GO 40701
40735: POP
40736: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40737: LD_VAR 0 18
40741: PPUSH
40742: LD_INT 2
40744: PUSH
40745: LD_INT 30
40747: PUSH
40748: LD_INT 32
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 30
40757: PUSH
40758: LD_INT 33
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: PPUSH
40770: CALL_OW 72
40774: IFFALSE 40862
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40776: LD_ADDR_VAR 0 8
40780: PUSH
40781: LD_VAR 0 18
40785: PPUSH
40786: LD_INT 2
40788: PUSH
40789: LD_INT 30
40791: PUSH
40792: LD_INT 32
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 30
40801: PUSH
40802: LD_INT 33
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: LIST
40813: PPUSH
40814: CALL_OW 72
40818: PUSH
40819: FOR_IN
40820: IFFALSE 40860
// begin if not GetBWeapon ( i ) then
40822: LD_VAR 0 8
40826: PPUSH
40827: CALL_OW 269
40831: NOT
40832: IFFALSE 40858
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40834: LD_VAR 0 8
40838: PPUSH
40839: LD_VAR 0 8
40843: PPUSH
40844: LD_VAR 0 2
40848: PPUSH
40849: CALL 42108 0 2
40853: PPUSH
40854: CALL_OW 431
// end ;
40858: GO 40819
40860: POP
40861: POP
// end ; for i = 1 to personel do
40862: LD_ADDR_VAR 0 8
40866: PUSH
40867: DOUBLE
40868: LD_INT 1
40870: DEC
40871: ST_TO_ADDR
40872: LD_VAR 0 6
40876: PUSH
40877: FOR_TO
40878: IFFALSE 41942
// begin if i > 4 then
40880: LD_VAR 0 8
40884: PUSH
40885: LD_INT 4
40887: GREATER
40888: IFFALSE 40892
// break ;
40890: GO 41942
// case i of 1 :
40892: LD_VAR 0 8
40896: PUSH
40897: LD_INT 1
40899: DOUBLE
40900: EQUAL
40901: IFTRUE 40905
40903: GO 40985
40905: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40906: LD_ADDR_VAR 0 12
40910: PUSH
40911: LD_VAR 0 18
40915: PPUSH
40916: LD_INT 22
40918: PUSH
40919: LD_VAR 0 16
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 58
40930: PUSH
40931: EMPTY
40932: LIST
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: LD_INT 30
40939: PUSH
40940: LD_INT 32
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 30
40949: PUSH
40950: LD_INT 4
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 30
40959: PUSH
40960: LD_INT 5
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: LIST
40977: PPUSH
40978: CALL_OW 72
40982: ST_TO_ADDR
40983: GO 41207
40985: LD_INT 2
40987: DOUBLE
40988: EQUAL
40989: IFTRUE 40993
40991: GO 41055
40993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40994: LD_ADDR_VAR 0 12
40998: PUSH
40999: LD_VAR 0 18
41003: PPUSH
41004: LD_INT 22
41006: PUSH
41007: LD_VAR 0 16
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: LD_INT 30
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 30
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: LIST
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PPUSH
41048: CALL_OW 72
41052: ST_TO_ADDR
41053: GO 41207
41055: LD_INT 3
41057: DOUBLE
41058: EQUAL
41059: IFTRUE 41063
41061: GO 41125
41063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41064: LD_ADDR_VAR 0 12
41068: PUSH
41069: LD_VAR 0 18
41073: PPUSH
41074: LD_INT 22
41076: PUSH
41077: LD_VAR 0 16
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: LD_INT 30
41091: PUSH
41092: LD_INT 2
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 30
41101: PUSH
41102: LD_INT 3
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: LIST
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PPUSH
41118: CALL_OW 72
41122: ST_TO_ADDR
41123: GO 41207
41125: LD_INT 4
41127: DOUBLE
41128: EQUAL
41129: IFTRUE 41133
41131: GO 41206
41133: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41134: LD_ADDR_VAR 0 12
41138: PUSH
41139: LD_VAR 0 18
41143: PPUSH
41144: LD_INT 22
41146: PUSH
41147: LD_VAR 0 16
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: LD_INT 30
41161: PUSH
41162: LD_INT 6
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 30
41171: PUSH
41172: LD_INT 7
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 30
41181: PUSH
41182: LD_INT 8
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PPUSH
41199: CALL_OW 72
41203: ST_TO_ADDR
41204: GO 41207
41206: POP
// if i = 1 then
41207: LD_VAR 0 8
41211: PUSH
41212: LD_INT 1
41214: EQUAL
41215: IFFALSE 41326
// begin tmp := [ ] ;
41217: LD_ADDR_VAR 0 19
41221: PUSH
41222: EMPTY
41223: ST_TO_ADDR
// for j in f do
41224: LD_ADDR_VAR 0 9
41228: PUSH
41229: LD_VAR 0 12
41233: PUSH
41234: FOR_IN
41235: IFFALSE 41308
// if GetBType ( j ) = b_bunker then
41237: LD_VAR 0 9
41241: PPUSH
41242: CALL_OW 266
41246: PUSH
41247: LD_INT 32
41249: EQUAL
41250: IFFALSE 41277
// tmp := Insert ( tmp , 1 , j ) else
41252: LD_ADDR_VAR 0 19
41256: PUSH
41257: LD_VAR 0 19
41261: PPUSH
41262: LD_INT 1
41264: PPUSH
41265: LD_VAR 0 9
41269: PPUSH
41270: CALL_OW 2
41274: ST_TO_ADDR
41275: GO 41306
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41277: LD_ADDR_VAR 0 19
41281: PUSH
41282: LD_VAR 0 19
41286: PPUSH
41287: LD_VAR 0 19
41291: PUSH
41292: LD_INT 1
41294: PLUS
41295: PPUSH
41296: LD_VAR 0 9
41300: PPUSH
41301: CALL_OW 2
41305: ST_TO_ADDR
41306: GO 41234
41308: POP
41309: POP
// if tmp then
41310: LD_VAR 0 19
41314: IFFALSE 41326
// f := tmp ;
41316: LD_ADDR_VAR 0 12
41320: PUSH
41321: LD_VAR 0 19
41325: ST_TO_ADDR
// end ; x := personel [ i ] ;
41326: LD_ADDR_VAR 0 13
41330: PUSH
41331: LD_VAR 0 6
41335: PUSH
41336: LD_VAR 0 8
41340: ARRAY
41341: ST_TO_ADDR
// if x = - 1 then
41342: LD_VAR 0 13
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: EQUAL
41351: IFFALSE 41560
// begin for j in f do
41353: LD_ADDR_VAR 0 9
41357: PUSH
41358: LD_VAR 0 12
41362: PUSH
41363: FOR_IN
41364: IFFALSE 41556
// repeat InitHc ;
41366: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41370: LD_VAR 0 9
41374: PPUSH
41375: CALL_OW 266
41379: PUSH
41380: LD_INT 5
41382: EQUAL
41383: IFFALSE 41453
// begin if UnitsInside ( j ) < 3 then
41385: LD_VAR 0 9
41389: PPUSH
41390: CALL_OW 313
41394: PUSH
41395: LD_INT 3
41397: LESS
41398: IFFALSE 41434
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41400: LD_INT 0
41402: PPUSH
41403: LD_INT 5
41405: PUSH
41406: LD_INT 8
41408: PUSH
41409: LD_INT 9
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: LIST
41416: PUSH
41417: LD_VAR 0 17
41421: ARRAY
41422: PPUSH
41423: LD_VAR 0 4
41427: PPUSH
41428: CALL_OW 380
41432: GO 41451
// PrepareHuman ( false , i , skill ) ;
41434: LD_INT 0
41436: PPUSH
41437: LD_VAR 0 8
41441: PPUSH
41442: LD_VAR 0 4
41446: PPUSH
41447: CALL_OW 380
// end else
41451: GO 41470
// PrepareHuman ( false , i , skill ) ;
41453: LD_INT 0
41455: PPUSH
41456: LD_VAR 0 8
41460: PPUSH
41461: LD_VAR 0 4
41465: PPUSH
41466: CALL_OW 380
// un := CreateHuman ;
41470: LD_ADDR_VAR 0 14
41474: PUSH
41475: CALL_OW 44
41479: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41480: LD_ADDR_VAR 0 7
41484: PUSH
41485: LD_VAR 0 7
41489: PPUSH
41490: LD_INT 1
41492: PPUSH
41493: LD_VAR 0 14
41497: PPUSH
41498: CALL_OW 2
41502: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41503: LD_VAR 0 14
41507: PPUSH
41508: LD_VAR 0 9
41512: PPUSH
41513: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41517: LD_VAR 0 9
41521: PPUSH
41522: CALL_OW 313
41526: PUSH
41527: LD_INT 6
41529: EQUAL
41530: PUSH
41531: LD_VAR 0 9
41535: PPUSH
41536: CALL_OW 266
41540: PUSH
41541: LD_INT 32
41543: PUSH
41544: LD_INT 31
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: IN
41551: OR
41552: IFFALSE 41366
41554: GO 41363
41556: POP
41557: POP
// end else
41558: GO 41940
// for j = 1 to x do
41560: LD_ADDR_VAR 0 9
41564: PUSH
41565: DOUBLE
41566: LD_INT 1
41568: DEC
41569: ST_TO_ADDR
41570: LD_VAR 0 13
41574: PUSH
41575: FOR_TO
41576: IFFALSE 41938
// begin InitHc ;
41578: CALL_OW 19
// if not f then
41582: LD_VAR 0 12
41586: NOT
41587: IFFALSE 41676
// begin PrepareHuman ( false , i , skill ) ;
41589: LD_INT 0
41591: PPUSH
41592: LD_VAR 0 8
41596: PPUSH
41597: LD_VAR 0 4
41601: PPUSH
41602: CALL_OW 380
// un := CreateHuman ;
41606: LD_ADDR_VAR 0 14
41610: PUSH
41611: CALL_OW 44
41615: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41616: LD_ADDR_VAR 0 7
41620: PUSH
41621: LD_VAR 0 7
41625: PPUSH
41626: LD_INT 1
41628: PPUSH
41629: LD_VAR 0 14
41633: PPUSH
41634: CALL_OW 2
41638: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41639: LD_VAR 0 14
41643: PPUSH
41644: LD_VAR 0 1
41648: PPUSH
41649: CALL_OW 250
41653: PPUSH
41654: LD_VAR 0 1
41658: PPUSH
41659: CALL_OW 251
41663: PPUSH
41664: LD_INT 10
41666: PPUSH
41667: LD_INT 0
41669: PPUSH
41670: CALL_OW 50
// continue ;
41674: GO 41575
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41676: LD_VAR 0 12
41680: PUSH
41681: LD_INT 1
41683: ARRAY
41684: PPUSH
41685: CALL_OW 313
41689: PUSH
41690: LD_VAR 0 12
41694: PUSH
41695: LD_INT 1
41697: ARRAY
41698: PPUSH
41699: CALL_OW 266
41703: PUSH
41704: LD_INT 32
41706: PUSH
41707: LD_INT 31
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: IN
41714: AND
41715: PUSH
41716: LD_VAR 0 12
41720: PUSH
41721: LD_INT 1
41723: ARRAY
41724: PPUSH
41725: CALL_OW 313
41729: PUSH
41730: LD_INT 6
41732: EQUAL
41733: OR
41734: IFFALSE 41754
// f := Delete ( f , 1 ) ;
41736: LD_ADDR_VAR 0 12
41740: PUSH
41741: LD_VAR 0 12
41745: PPUSH
41746: LD_INT 1
41748: PPUSH
41749: CALL_OW 3
41753: ST_TO_ADDR
// if not f then
41754: LD_VAR 0 12
41758: NOT
41759: IFFALSE 41777
// begin x := x + 2 ;
41761: LD_ADDR_VAR 0 13
41765: PUSH
41766: LD_VAR 0 13
41770: PUSH
41771: LD_INT 2
41773: PLUS
41774: ST_TO_ADDR
// continue ;
41775: GO 41575
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41777: LD_VAR 0 12
41781: PUSH
41782: LD_INT 1
41784: ARRAY
41785: PPUSH
41786: CALL_OW 266
41790: PUSH
41791: LD_INT 5
41793: EQUAL
41794: IFFALSE 41868
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41796: LD_VAR 0 12
41800: PUSH
41801: LD_INT 1
41803: ARRAY
41804: PPUSH
41805: CALL_OW 313
41809: PUSH
41810: LD_INT 3
41812: LESS
41813: IFFALSE 41849
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41815: LD_INT 0
41817: PPUSH
41818: LD_INT 5
41820: PUSH
41821: LD_INT 8
41823: PUSH
41824: LD_INT 9
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: LIST
41831: PUSH
41832: LD_VAR 0 17
41836: ARRAY
41837: PPUSH
41838: LD_VAR 0 4
41842: PPUSH
41843: CALL_OW 380
41847: GO 41866
// PrepareHuman ( false , i , skill ) ;
41849: LD_INT 0
41851: PPUSH
41852: LD_VAR 0 8
41856: PPUSH
41857: LD_VAR 0 4
41861: PPUSH
41862: CALL_OW 380
// end else
41866: GO 41885
// PrepareHuman ( false , i , skill ) ;
41868: LD_INT 0
41870: PPUSH
41871: LD_VAR 0 8
41875: PPUSH
41876: LD_VAR 0 4
41880: PPUSH
41881: CALL_OW 380
// un := CreateHuman ;
41885: LD_ADDR_VAR 0 14
41889: PUSH
41890: CALL_OW 44
41894: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41895: LD_ADDR_VAR 0 7
41899: PUSH
41900: LD_VAR 0 7
41904: PPUSH
41905: LD_INT 1
41907: PPUSH
41908: LD_VAR 0 14
41912: PPUSH
41913: CALL_OW 2
41917: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41918: LD_VAR 0 14
41922: PPUSH
41923: LD_VAR 0 12
41927: PUSH
41928: LD_INT 1
41930: ARRAY
41931: PPUSH
41932: CALL_OW 52
// end ;
41936: GO 41575
41938: POP
41939: POP
// end ;
41940: GO 40877
41942: POP
41943: POP
// result := result ^ buildings ;
41944: LD_ADDR_VAR 0 7
41948: PUSH
41949: LD_VAR 0 7
41953: PUSH
41954: LD_VAR 0 18
41958: ADD
41959: ST_TO_ADDR
// end else
41960: GO 42103
// begin for i = 1 to personel do
41962: LD_ADDR_VAR 0 8
41966: PUSH
41967: DOUBLE
41968: LD_INT 1
41970: DEC
41971: ST_TO_ADDR
41972: LD_VAR 0 6
41976: PUSH
41977: FOR_TO
41978: IFFALSE 42101
// begin if i > 4 then
41980: LD_VAR 0 8
41984: PUSH
41985: LD_INT 4
41987: GREATER
41988: IFFALSE 41992
// break ;
41990: GO 42101
// x := personel [ i ] ;
41992: LD_ADDR_VAR 0 13
41996: PUSH
41997: LD_VAR 0 6
42001: PUSH
42002: LD_VAR 0 8
42006: ARRAY
42007: ST_TO_ADDR
// if x = - 1 then
42008: LD_VAR 0 13
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: EQUAL
42017: IFFALSE 42021
// continue ;
42019: GO 41977
// PrepareHuman ( false , i , skill ) ;
42021: LD_INT 0
42023: PPUSH
42024: LD_VAR 0 8
42028: PPUSH
42029: LD_VAR 0 4
42033: PPUSH
42034: CALL_OW 380
// un := CreateHuman ;
42038: LD_ADDR_VAR 0 14
42042: PUSH
42043: CALL_OW 44
42047: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42048: LD_VAR 0 14
42052: PPUSH
42053: LD_VAR 0 1
42057: PPUSH
42058: CALL_OW 250
42062: PPUSH
42063: LD_VAR 0 1
42067: PPUSH
42068: CALL_OW 251
42072: PPUSH
42073: LD_INT 10
42075: PPUSH
42076: LD_INT 0
42078: PPUSH
42079: CALL_OW 50
// result := result ^ un ;
42083: LD_ADDR_VAR 0 7
42087: PUSH
42088: LD_VAR 0 7
42092: PUSH
42093: LD_VAR 0 14
42097: ADD
42098: ST_TO_ADDR
// end ;
42099: GO 41977
42101: POP
42102: POP
// end ; end ;
42103: LD_VAR 0 7
42107: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42108: LD_INT 0
42110: PPUSH
42111: PPUSH
42112: PPUSH
42113: PPUSH
42114: PPUSH
42115: PPUSH
42116: PPUSH
42117: PPUSH
42118: PPUSH
42119: PPUSH
42120: PPUSH
42121: PPUSH
42122: PPUSH
42123: PPUSH
42124: PPUSH
42125: PPUSH
// result := false ;
42126: LD_ADDR_VAR 0 3
42130: PUSH
42131: LD_INT 0
42133: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42134: LD_VAR 0 1
42138: NOT
42139: PUSH
42140: LD_VAR 0 1
42144: PPUSH
42145: CALL_OW 266
42149: PUSH
42150: LD_INT 32
42152: PUSH
42153: LD_INT 33
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: IN
42160: NOT
42161: OR
42162: IFFALSE 42166
// exit ;
42164: GO 43275
// nat := GetNation ( tower ) ;
42166: LD_ADDR_VAR 0 12
42170: PUSH
42171: LD_VAR 0 1
42175: PPUSH
42176: CALL_OW 248
42180: ST_TO_ADDR
// side := GetSide ( tower ) ;
42181: LD_ADDR_VAR 0 16
42185: PUSH
42186: LD_VAR 0 1
42190: PPUSH
42191: CALL_OW 255
42195: ST_TO_ADDR
// x := GetX ( tower ) ;
42196: LD_ADDR_VAR 0 10
42200: PUSH
42201: LD_VAR 0 1
42205: PPUSH
42206: CALL_OW 250
42210: ST_TO_ADDR
// y := GetY ( tower ) ;
42211: LD_ADDR_VAR 0 11
42215: PUSH
42216: LD_VAR 0 1
42220: PPUSH
42221: CALL_OW 251
42225: ST_TO_ADDR
// if not x or not y then
42226: LD_VAR 0 10
42230: NOT
42231: PUSH
42232: LD_VAR 0 11
42236: NOT
42237: OR
42238: IFFALSE 42242
// exit ;
42240: GO 43275
// weapon := 0 ;
42242: LD_ADDR_VAR 0 18
42246: PUSH
42247: LD_INT 0
42249: ST_TO_ADDR
// fac_list := [ ] ;
42250: LD_ADDR_VAR 0 17
42254: PUSH
42255: EMPTY
42256: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42257: LD_ADDR_VAR 0 6
42261: PUSH
42262: LD_VAR 0 1
42266: PPUSH
42267: CALL_OW 274
42271: PPUSH
42272: LD_VAR 0 2
42276: PPUSH
42277: LD_INT 0
42279: PPUSH
42280: CALL 39846 0 3
42284: PPUSH
42285: LD_INT 30
42287: PUSH
42288: LD_INT 3
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PPUSH
42295: CALL_OW 72
42299: ST_TO_ADDR
// if not factories then
42300: LD_VAR 0 6
42304: NOT
42305: IFFALSE 42309
// exit ;
42307: GO 43275
// for i in factories do
42309: LD_ADDR_VAR 0 8
42313: PUSH
42314: LD_VAR 0 6
42318: PUSH
42319: FOR_IN
42320: IFFALSE 42345
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42322: LD_ADDR_VAR 0 17
42326: PUSH
42327: LD_VAR 0 17
42331: PUSH
42332: LD_VAR 0 8
42336: PPUSH
42337: CALL_OW 478
42341: UNION
42342: ST_TO_ADDR
42343: GO 42319
42345: POP
42346: POP
// if not fac_list then
42347: LD_VAR 0 17
42351: NOT
42352: IFFALSE 42356
// exit ;
42354: GO 43275
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42356: LD_ADDR_VAR 0 5
42360: PUSH
42361: LD_INT 4
42363: PUSH
42364: LD_INT 5
42366: PUSH
42367: LD_INT 9
42369: PUSH
42370: LD_INT 10
42372: PUSH
42373: LD_INT 6
42375: PUSH
42376: LD_INT 7
42378: PUSH
42379: LD_INT 11
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 27
42393: PUSH
42394: LD_INT 28
42396: PUSH
42397: LD_INT 26
42399: PUSH
42400: LD_INT 30
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 43
42411: PUSH
42412: LD_INT 44
42414: PUSH
42415: LD_INT 46
42417: PUSH
42418: LD_INT 45
42420: PUSH
42421: LD_INT 47
42423: PUSH
42424: LD_INT 49
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: PUSH
42440: LD_VAR 0 12
42444: ARRAY
42445: ST_TO_ADDR
// list := list isect fac_list ;
42446: LD_ADDR_VAR 0 5
42450: PUSH
42451: LD_VAR 0 5
42455: PUSH
42456: LD_VAR 0 17
42460: ISECT
42461: ST_TO_ADDR
// if not list then
42462: LD_VAR 0 5
42466: NOT
42467: IFFALSE 42471
// exit ;
42469: GO 43275
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42471: LD_VAR 0 12
42475: PUSH
42476: LD_INT 3
42478: EQUAL
42479: PUSH
42480: LD_INT 49
42482: PUSH
42483: LD_VAR 0 5
42487: IN
42488: AND
42489: PUSH
42490: LD_INT 31
42492: PPUSH
42493: LD_VAR 0 16
42497: PPUSH
42498: CALL_OW 321
42502: PUSH
42503: LD_INT 2
42505: EQUAL
42506: AND
42507: IFFALSE 42567
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42509: LD_INT 22
42511: PUSH
42512: LD_VAR 0 16
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 35
42523: PUSH
42524: LD_INT 49
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 91
42533: PUSH
42534: LD_VAR 0 1
42538: PUSH
42539: LD_INT 10
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: LIST
42551: PPUSH
42552: CALL_OW 69
42556: NOT
42557: IFFALSE 42567
// weapon := ru_time_lapser ;
42559: LD_ADDR_VAR 0 18
42563: PUSH
42564: LD_INT 49
42566: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42567: LD_VAR 0 12
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: IN
42582: PUSH
42583: LD_INT 11
42585: PUSH
42586: LD_VAR 0 5
42590: IN
42591: PUSH
42592: LD_INT 30
42594: PUSH
42595: LD_VAR 0 5
42599: IN
42600: OR
42601: AND
42602: PUSH
42603: LD_INT 6
42605: PPUSH
42606: LD_VAR 0 16
42610: PPUSH
42611: CALL_OW 321
42615: PUSH
42616: LD_INT 2
42618: EQUAL
42619: AND
42620: IFFALSE 42785
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42622: LD_INT 22
42624: PUSH
42625: LD_VAR 0 16
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: LD_INT 35
42639: PUSH
42640: LD_INT 11
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 35
42649: PUSH
42650: LD_INT 30
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 91
42664: PUSH
42665: LD_VAR 0 1
42669: PUSH
42670: LD_INT 18
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: LIST
42682: PPUSH
42683: CALL_OW 69
42687: NOT
42688: PUSH
42689: LD_INT 22
42691: PUSH
42692: LD_VAR 0 16
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: PUSH
42704: LD_INT 30
42706: PUSH
42707: LD_INT 32
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 30
42716: PUSH
42717: LD_INT 33
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 91
42731: PUSH
42732: LD_VAR 0 1
42736: PUSH
42737: LD_INT 12
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: LIST
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: PUSH
42750: EMPTY
42751: LIST
42752: PPUSH
42753: CALL_OW 69
42757: PUSH
42758: LD_INT 2
42760: GREATER
42761: AND
42762: IFFALSE 42785
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42764: LD_ADDR_VAR 0 18
42768: PUSH
42769: LD_INT 11
42771: PUSH
42772: LD_INT 30
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_VAR 0 12
42783: ARRAY
42784: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42785: LD_VAR 0 18
42789: NOT
42790: PUSH
42791: LD_INT 40
42793: PPUSH
42794: LD_VAR 0 16
42798: PPUSH
42799: CALL_OW 321
42803: PUSH
42804: LD_INT 2
42806: EQUAL
42807: AND
42808: PUSH
42809: LD_INT 7
42811: PUSH
42812: LD_VAR 0 5
42816: IN
42817: PUSH
42818: LD_INT 28
42820: PUSH
42821: LD_VAR 0 5
42825: IN
42826: OR
42827: PUSH
42828: LD_INT 45
42830: PUSH
42831: LD_VAR 0 5
42835: IN
42836: OR
42837: AND
42838: IFFALSE 43092
// begin hex := GetHexInfo ( x , y ) ;
42840: LD_ADDR_VAR 0 4
42844: PUSH
42845: LD_VAR 0 10
42849: PPUSH
42850: LD_VAR 0 11
42854: PPUSH
42855: CALL_OW 546
42859: ST_TO_ADDR
// if hex [ 1 ] then
42860: LD_VAR 0 4
42864: PUSH
42865: LD_INT 1
42867: ARRAY
42868: IFFALSE 42872
// exit ;
42870: GO 43275
// height := hex [ 2 ] ;
42872: LD_ADDR_VAR 0 15
42876: PUSH
42877: LD_VAR 0 4
42881: PUSH
42882: LD_INT 2
42884: ARRAY
42885: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42886: LD_ADDR_VAR 0 14
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 3
42899: PUSH
42900: LD_INT 5
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: ST_TO_ADDR
// for i in tmp do
42909: LD_ADDR_VAR 0 8
42913: PUSH
42914: LD_VAR 0 14
42918: PUSH
42919: FOR_IN
42920: IFFALSE 43090
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42922: LD_ADDR_VAR 0 9
42926: PUSH
42927: LD_VAR 0 10
42931: PPUSH
42932: LD_VAR 0 8
42936: PPUSH
42937: LD_INT 5
42939: PPUSH
42940: CALL_OW 272
42944: PUSH
42945: LD_VAR 0 11
42949: PPUSH
42950: LD_VAR 0 8
42954: PPUSH
42955: LD_INT 5
42957: PPUSH
42958: CALL_OW 273
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42967: LD_VAR 0 9
42971: PUSH
42972: LD_INT 1
42974: ARRAY
42975: PPUSH
42976: LD_VAR 0 9
42980: PUSH
42981: LD_INT 2
42983: ARRAY
42984: PPUSH
42985: CALL_OW 488
42989: IFFALSE 43088
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42991: LD_ADDR_VAR 0 4
42995: PUSH
42996: LD_VAR 0 9
43000: PUSH
43001: LD_INT 1
43003: ARRAY
43004: PPUSH
43005: LD_VAR 0 9
43009: PUSH
43010: LD_INT 2
43012: ARRAY
43013: PPUSH
43014: CALL_OW 546
43018: ST_TO_ADDR
// if hex [ 1 ] then
43019: LD_VAR 0 4
43023: PUSH
43024: LD_INT 1
43026: ARRAY
43027: IFFALSE 43031
// continue ;
43029: GO 42919
// h := hex [ 2 ] ;
43031: LD_ADDR_VAR 0 13
43035: PUSH
43036: LD_VAR 0 4
43040: PUSH
43041: LD_INT 2
43043: ARRAY
43044: ST_TO_ADDR
// if h + 7 < height then
43045: LD_VAR 0 13
43049: PUSH
43050: LD_INT 7
43052: PLUS
43053: PUSH
43054: LD_VAR 0 15
43058: LESS
43059: IFFALSE 43088
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43061: LD_ADDR_VAR 0 18
43065: PUSH
43066: LD_INT 7
43068: PUSH
43069: LD_INT 28
43071: PUSH
43072: LD_INT 45
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: PUSH
43080: LD_VAR 0 12
43084: ARRAY
43085: ST_TO_ADDR
// break ;
43086: GO 43090
// end ; end ; end ;
43088: GO 42919
43090: POP
43091: POP
// end ; if not weapon then
43092: LD_VAR 0 18
43096: NOT
43097: IFFALSE 43157
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43099: LD_ADDR_VAR 0 5
43103: PUSH
43104: LD_VAR 0 5
43108: PUSH
43109: LD_INT 11
43111: PUSH
43112: LD_INT 30
43114: PUSH
43115: LD_INT 49
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: DIFF
43123: ST_TO_ADDR
// if not list then
43124: LD_VAR 0 5
43128: NOT
43129: IFFALSE 43133
// exit ;
43131: GO 43275
// weapon := list [ rand ( 1 , list ) ] ;
43133: LD_ADDR_VAR 0 18
43137: PUSH
43138: LD_VAR 0 5
43142: PUSH
43143: LD_INT 1
43145: PPUSH
43146: LD_VAR 0 5
43150: PPUSH
43151: CALL_OW 12
43155: ARRAY
43156: ST_TO_ADDR
// end ; if weapon then
43157: LD_VAR 0 18
43161: IFFALSE 43275
// begin tmp := CostOfWeapon ( weapon ) ;
43163: LD_ADDR_VAR 0 14
43167: PUSH
43168: LD_VAR 0 18
43172: PPUSH
43173: CALL_OW 451
43177: ST_TO_ADDR
// j := GetBase ( tower ) ;
43178: LD_ADDR_VAR 0 9
43182: PUSH
43183: LD_VAR 0 1
43187: PPUSH
43188: CALL_OW 274
43192: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43193: LD_VAR 0 9
43197: PPUSH
43198: LD_INT 1
43200: PPUSH
43201: CALL_OW 275
43205: PUSH
43206: LD_VAR 0 14
43210: PUSH
43211: LD_INT 1
43213: ARRAY
43214: GREATEREQUAL
43215: PUSH
43216: LD_VAR 0 9
43220: PPUSH
43221: LD_INT 2
43223: PPUSH
43224: CALL_OW 275
43228: PUSH
43229: LD_VAR 0 14
43233: PUSH
43234: LD_INT 2
43236: ARRAY
43237: GREATEREQUAL
43238: AND
43239: PUSH
43240: LD_VAR 0 9
43244: PPUSH
43245: LD_INT 3
43247: PPUSH
43248: CALL_OW 275
43252: PUSH
43253: LD_VAR 0 14
43257: PUSH
43258: LD_INT 3
43260: ARRAY
43261: GREATEREQUAL
43262: AND
43263: IFFALSE 43275
// result := weapon ;
43265: LD_ADDR_VAR 0 3
43269: PUSH
43270: LD_VAR 0 18
43274: ST_TO_ADDR
// end ; end ;
43275: LD_VAR 0 3
43279: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43280: LD_INT 0
43282: PPUSH
43283: PPUSH
// result := true ;
43284: LD_ADDR_VAR 0 3
43288: PUSH
43289: LD_INT 1
43291: ST_TO_ADDR
// if array1 = array2 then
43292: LD_VAR 0 1
43296: PUSH
43297: LD_VAR 0 2
43301: EQUAL
43302: IFFALSE 43362
// begin for i = 1 to array1 do
43304: LD_ADDR_VAR 0 4
43308: PUSH
43309: DOUBLE
43310: LD_INT 1
43312: DEC
43313: ST_TO_ADDR
43314: LD_VAR 0 1
43318: PUSH
43319: FOR_TO
43320: IFFALSE 43358
// if array1 [ i ] <> array2 [ i ] then
43322: LD_VAR 0 1
43326: PUSH
43327: LD_VAR 0 4
43331: ARRAY
43332: PUSH
43333: LD_VAR 0 2
43337: PUSH
43338: LD_VAR 0 4
43342: ARRAY
43343: NONEQUAL
43344: IFFALSE 43356
// begin result := false ;
43346: LD_ADDR_VAR 0 3
43350: PUSH
43351: LD_INT 0
43353: ST_TO_ADDR
// break ;
43354: GO 43358
// end ;
43356: GO 43319
43358: POP
43359: POP
// end else
43360: GO 43370
// result := false ;
43362: LD_ADDR_VAR 0 3
43366: PUSH
43367: LD_INT 0
43369: ST_TO_ADDR
// end ;
43370: LD_VAR 0 3
43374: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43375: LD_INT 0
43377: PPUSH
43378: PPUSH
// if not array1 or not array2 then
43379: LD_VAR 0 1
43383: NOT
43384: PUSH
43385: LD_VAR 0 2
43389: NOT
43390: OR
43391: IFFALSE 43395
// exit ;
43393: GO 43459
// result := true ;
43395: LD_ADDR_VAR 0 3
43399: PUSH
43400: LD_INT 1
43402: ST_TO_ADDR
// for i = 1 to array1 do
43403: LD_ADDR_VAR 0 4
43407: PUSH
43408: DOUBLE
43409: LD_INT 1
43411: DEC
43412: ST_TO_ADDR
43413: LD_VAR 0 1
43417: PUSH
43418: FOR_TO
43419: IFFALSE 43457
// if array1 [ i ] <> array2 [ i ] then
43421: LD_VAR 0 1
43425: PUSH
43426: LD_VAR 0 4
43430: ARRAY
43431: PUSH
43432: LD_VAR 0 2
43436: PUSH
43437: LD_VAR 0 4
43441: ARRAY
43442: NONEQUAL
43443: IFFALSE 43455
// begin result := false ;
43445: LD_ADDR_VAR 0 3
43449: PUSH
43450: LD_INT 0
43452: ST_TO_ADDR
// break ;
43453: GO 43457
// end ;
43455: GO 43418
43457: POP
43458: POP
// end ;
43459: LD_VAR 0 3
43463: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43464: LD_INT 0
43466: PPUSH
43467: PPUSH
43468: PPUSH
// pom := GetBase ( fac ) ;
43469: LD_ADDR_VAR 0 5
43473: PUSH
43474: LD_VAR 0 1
43478: PPUSH
43479: CALL_OW 274
43483: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43484: LD_ADDR_VAR 0 4
43488: PUSH
43489: LD_VAR 0 2
43493: PUSH
43494: LD_INT 1
43496: ARRAY
43497: PPUSH
43498: LD_VAR 0 2
43502: PUSH
43503: LD_INT 2
43505: ARRAY
43506: PPUSH
43507: LD_VAR 0 2
43511: PUSH
43512: LD_INT 3
43514: ARRAY
43515: PPUSH
43516: LD_VAR 0 2
43520: PUSH
43521: LD_INT 4
43523: ARRAY
43524: PPUSH
43525: CALL_OW 449
43529: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43530: LD_ADDR_VAR 0 3
43534: PUSH
43535: LD_VAR 0 5
43539: PPUSH
43540: LD_INT 1
43542: PPUSH
43543: CALL_OW 275
43547: PUSH
43548: LD_VAR 0 4
43552: PUSH
43553: LD_INT 1
43555: ARRAY
43556: GREATEREQUAL
43557: PUSH
43558: LD_VAR 0 5
43562: PPUSH
43563: LD_INT 2
43565: PPUSH
43566: CALL_OW 275
43570: PUSH
43571: LD_VAR 0 4
43575: PUSH
43576: LD_INT 2
43578: ARRAY
43579: GREATEREQUAL
43580: AND
43581: PUSH
43582: LD_VAR 0 5
43586: PPUSH
43587: LD_INT 3
43589: PPUSH
43590: CALL_OW 275
43594: PUSH
43595: LD_VAR 0 4
43599: PUSH
43600: LD_INT 3
43602: ARRAY
43603: GREATEREQUAL
43604: AND
43605: ST_TO_ADDR
// end ;
43606: LD_VAR 0 3
43610: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43611: LD_INT 0
43613: PPUSH
43614: PPUSH
43615: PPUSH
43616: PPUSH
// pom := GetBase ( building ) ;
43617: LD_ADDR_VAR 0 3
43621: PUSH
43622: LD_VAR 0 1
43626: PPUSH
43627: CALL_OW 274
43631: ST_TO_ADDR
// if not pom then
43632: LD_VAR 0 3
43636: NOT
43637: IFFALSE 43641
// exit ;
43639: GO 43811
// btype := GetBType ( building ) ;
43641: LD_ADDR_VAR 0 5
43645: PUSH
43646: LD_VAR 0 1
43650: PPUSH
43651: CALL_OW 266
43655: ST_TO_ADDR
// if btype = b_armoury then
43656: LD_VAR 0 5
43660: PUSH
43661: LD_INT 4
43663: EQUAL
43664: IFFALSE 43674
// btype := b_barracks ;
43666: LD_ADDR_VAR 0 5
43670: PUSH
43671: LD_INT 5
43673: ST_TO_ADDR
// if btype = b_depot then
43674: LD_VAR 0 5
43678: PUSH
43679: LD_INT 0
43681: EQUAL
43682: IFFALSE 43692
// btype := b_warehouse ;
43684: LD_ADDR_VAR 0 5
43688: PUSH
43689: LD_INT 1
43691: ST_TO_ADDR
// if btype = b_workshop then
43692: LD_VAR 0 5
43696: PUSH
43697: LD_INT 2
43699: EQUAL
43700: IFFALSE 43710
// btype := b_factory ;
43702: LD_ADDR_VAR 0 5
43706: PUSH
43707: LD_INT 3
43709: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43710: LD_ADDR_VAR 0 4
43714: PUSH
43715: LD_VAR 0 5
43719: PPUSH
43720: LD_VAR 0 1
43724: PPUSH
43725: CALL_OW 248
43729: PPUSH
43730: CALL_OW 450
43734: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43735: LD_ADDR_VAR 0 2
43739: PUSH
43740: LD_VAR 0 3
43744: PPUSH
43745: LD_INT 1
43747: PPUSH
43748: CALL_OW 275
43752: PUSH
43753: LD_VAR 0 4
43757: PUSH
43758: LD_INT 1
43760: ARRAY
43761: GREATEREQUAL
43762: PUSH
43763: LD_VAR 0 3
43767: PPUSH
43768: LD_INT 2
43770: PPUSH
43771: CALL_OW 275
43775: PUSH
43776: LD_VAR 0 4
43780: PUSH
43781: LD_INT 2
43783: ARRAY
43784: GREATEREQUAL
43785: AND
43786: PUSH
43787: LD_VAR 0 3
43791: PPUSH
43792: LD_INT 3
43794: PPUSH
43795: CALL_OW 275
43799: PUSH
43800: LD_VAR 0 4
43804: PUSH
43805: LD_INT 3
43807: ARRAY
43808: GREATEREQUAL
43809: AND
43810: ST_TO_ADDR
// end ;
43811: LD_VAR 0 2
43815: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43816: LD_INT 0
43818: PPUSH
43819: PPUSH
43820: PPUSH
// pom := GetBase ( building ) ;
43821: LD_ADDR_VAR 0 4
43825: PUSH
43826: LD_VAR 0 1
43830: PPUSH
43831: CALL_OW 274
43835: ST_TO_ADDR
// if not pom then
43836: LD_VAR 0 4
43840: NOT
43841: IFFALSE 43845
// exit ;
43843: GO 43946
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43845: LD_ADDR_VAR 0 5
43849: PUSH
43850: LD_VAR 0 2
43854: PPUSH
43855: LD_VAR 0 1
43859: PPUSH
43860: CALL_OW 248
43864: PPUSH
43865: CALL_OW 450
43869: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43870: LD_ADDR_VAR 0 3
43874: PUSH
43875: LD_VAR 0 4
43879: PPUSH
43880: LD_INT 1
43882: PPUSH
43883: CALL_OW 275
43887: PUSH
43888: LD_VAR 0 5
43892: PUSH
43893: LD_INT 1
43895: ARRAY
43896: GREATEREQUAL
43897: PUSH
43898: LD_VAR 0 4
43902: PPUSH
43903: LD_INT 2
43905: PPUSH
43906: CALL_OW 275
43910: PUSH
43911: LD_VAR 0 5
43915: PUSH
43916: LD_INT 2
43918: ARRAY
43919: GREATEREQUAL
43920: AND
43921: PUSH
43922: LD_VAR 0 4
43926: PPUSH
43927: LD_INT 3
43929: PPUSH
43930: CALL_OW 275
43934: PUSH
43935: LD_VAR 0 5
43939: PUSH
43940: LD_INT 3
43942: ARRAY
43943: GREATEREQUAL
43944: AND
43945: ST_TO_ADDR
// end ;
43946: LD_VAR 0 3
43950: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43951: LD_INT 0
43953: PPUSH
43954: PPUSH
43955: PPUSH
43956: PPUSH
43957: PPUSH
43958: PPUSH
43959: PPUSH
43960: PPUSH
43961: PPUSH
43962: PPUSH
43963: PPUSH
// result := false ;
43964: LD_ADDR_VAR 0 8
43968: PUSH
43969: LD_INT 0
43971: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43972: LD_VAR 0 5
43976: NOT
43977: PUSH
43978: LD_VAR 0 1
43982: NOT
43983: OR
43984: PUSH
43985: LD_VAR 0 2
43989: NOT
43990: OR
43991: PUSH
43992: LD_VAR 0 3
43996: NOT
43997: OR
43998: IFFALSE 44002
// exit ;
44000: GO 44816
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44002: LD_ADDR_VAR 0 14
44006: PUSH
44007: LD_VAR 0 1
44011: PPUSH
44012: LD_VAR 0 2
44016: PPUSH
44017: LD_VAR 0 3
44021: PPUSH
44022: LD_VAR 0 4
44026: PPUSH
44027: LD_VAR 0 5
44031: PUSH
44032: LD_INT 1
44034: ARRAY
44035: PPUSH
44036: CALL_OW 248
44040: PPUSH
44041: LD_INT 0
44043: PPUSH
44044: CALL 46053 0 6
44048: ST_TO_ADDR
// if not hexes then
44049: LD_VAR 0 14
44053: NOT
44054: IFFALSE 44058
// exit ;
44056: GO 44816
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44058: LD_ADDR_VAR 0 17
44062: PUSH
44063: LD_VAR 0 5
44067: PPUSH
44068: LD_INT 22
44070: PUSH
44071: LD_VAR 0 13
44075: PPUSH
44076: CALL_OW 255
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: LD_INT 30
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 30
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PPUSH
44117: CALL_OW 72
44121: ST_TO_ADDR
// for i = 1 to hexes do
44122: LD_ADDR_VAR 0 9
44126: PUSH
44127: DOUBLE
44128: LD_INT 1
44130: DEC
44131: ST_TO_ADDR
44132: LD_VAR 0 14
44136: PUSH
44137: FOR_TO
44138: IFFALSE 44814
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44140: LD_ADDR_VAR 0 13
44144: PUSH
44145: LD_VAR 0 14
44149: PUSH
44150: LD_VAR 0 9
44154: ARRAY
44155: PUSH
44156: LD_INT 1
44158: ARRAY
44159: PPUSH
44160: LD_VAR 0 14
44164: PUSH
44165: LD_VAR 0 9
44169: ARRAY
44170: PUSH
44171: LD_INT 2
44173: ARRAY
44174: PPUSH
44175: CALL_OW 428
44179: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44180: LD_VAR 0 14
44184: PUSH
44185: LD_VAR 0 9
44189: ARRAY
44190: PUSH
44191: LD_INT 1
44193: ARRAY
44194: PPUSH
44195: LD_VAR 0 14
44199: PUSH
44200: LD_VAR 0 9
44204: ARRAY
44205: PUSH
44206: LD_INT 2
44208: ARRAY
44209: PPUSH
44210: CALL_OW 351
44214: PUSH
44215: LD_VAR 0 14
44219: PUSH
44220: LD_VAR 0 9
44224: ARRAY
44225: PUSH
44226: LD_INT 1
44228: ARRAY
44229: PPUSH
44230: LD_VAR 0 14
44234: PUSH
44235: LD_VAR 0 9
44239: ARRAY
44240: PUSH
44241: LD_INT 2
44243: ARRAY
44244: PPUSH
44245: CALL_OW 488
44249: NOT
44250: OR
44251: PUSH
44252: LD_VAR 0 13
44256: PPUSH
44257: CALL_OW 247
44261: PUSH
44262: LD_INT 3
44264: EQUAL
44265: OR
44266: IFFALSE 44272
// exit ;
44268: POP
44269: POP
44270: GO 44816
// if not tmp then
44272: LD_VAR 0 13
44276: NOT
44277: IFFALSE 44281
// continue ;
44279: GO 44137
// result := true ;
44281: LD_ADDR_VAR 0 8
44285: PUSH
44286: LD_INT 1
44288: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44289: LD_VAR 0 6
44293: PUSH
44294: LD_VAR 0 13
44298: PPUSH
44299: CALL_OW 247
44303: PUSH
44304: LD_INT 2
44306: EQUAL
44307: AND
44308: PUSH
44309: LD_VAR 0 13
44313: PPUSH
44314: CALL_OW 263
44318: PUSH
44319: LD_INT 1
44321: EQUAL
44322: AND
44323: IFFALSE 44487
// begin if IsDrivenBy ( tmp ) then
44325: LD_VAR 0 13
44329: PPUSH
44330: CALL_OW 311
44334: IFFALSE 44338
// continue ;
44336: GO 44137
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44338: LD_VAR 0 6
44342: PPUSH
44343: LD_INT 3
44345: PUSH
44346: LD_INT 60
44348: PUSH
44349: EMPTY
44350: LIST
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: LD_INT 55
44361: PUSH
44362: EMPTY
44363: LIST
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PPUSH
44373: CALL_OW 72
44377: IFFALSE 44485
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44379: LD_ADDR_VAR 0 18
44383: PUSH
44384: LD_VAR 0 6
44388: PPUSH
44389: LD_INT 3
44391: PUSH
44392: LD_INT 60
44394: PUSH
44395: EMPTY
44396: LIST
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 3
44404: PUSH
44405: LD_INT 55
44407: PUSH
44408: EMPTY
44409: LIST
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PPUSH
44419: CALL_OW 72
44423: PUSH
44424: LD_INT 1
44426: ARRAY
44427: ST_TO_ADDR
// if IsInUnit ( driver ) then
44428: LD_VAR 0 18
44432: PPUSH
44433: CALL_OW 310
44437: IFFALSE 44448
// ComExit ( driver ) ;
44439: LD_VAR 0 18
44443: PPUSH
44444: CALL 69181 0 1
// AddComEnterUnit ( driver , tmp ) ;
44448: LD_VAR 0 18
44452: PPUSH
44453: LD_VAR 0 13
44457: PPUSH
44458: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44462: LD_VAR 0 18
44466: PPUSH
44467: LD_VAR 0 7
44471: PPUSH
44472: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44476: LD_VAR 0 18
44480: PPUSH
44481: CALL_OW 181
// end ; continue ;
44485: GO 44137
// end ; if not cleaners or not tmp in cleaners then
44487: LD_VAR 0 6
44491: NOT
44492: PUSH
44493: LD_VAR 0 13
44497: PUSH
44498: LD_VAR 0 6
44502: IN
44503: NOT
44504: OR
44505: IFFALSE 44812
// begin if dep then
44507: LD_VAR 0 17
44511: IFFALSE 44647
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44513: LD_ADDR_VAR 0 16
44517: PUSH
44518: LD_VAR 0 17
44522: PUSH
44523: LD_INT 1
44525: ARRAY
44526: PPUSH
44527: CALL_OW 250
44531: PPUSH
44532: LD_VAR 0 17
44536: PUSH
44537: LD_INT 1
44539: ARRAY
44540: PPUSH
44541: CALL_OW 254
44545: PPUSH
44546: LD_INT 5
44548: PPUSH
44549: CALL_OW 272
44553: PUSH
44554: LD_VAR 0 17
44558: PUSH
44559: LD_INT 1
44561: ARRAY
44562: PPUSH
44563: CALL_OW 251
44567: PPUSH
44568: LD_VAR 0 17
44572: PUSH
44573: LD_INT 1
44575: ARRAY
44576: PPUSH
44577: CALL_OW 254
44581: PPUSH
44582: LD_INT 5
44584: PPUSH
44585: CALL_OW 273
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44594: LD_VAR 0 16
44598: PUSH
44599: LD_INT 1
44601: ARRAY
44602: PPUSH
44603: LD_VAR 0 16
44607: PUSH
44608: LD_INT 2
44610: ARRAY
44611: PPUSH
44612: CALL_OW 488
44616: IFFALSE 44647
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44618: LD_VAR 0 13
44622: PPUSH
44623: LD_VAR 0 16
44627: PUSH
44628: LD_INT 1
44630: ARRAY
44631: PPUSH
44632: LD_VAR 0 16
44636: PUSH
44637: LD_INT 2
44639: ARRAY
44640: PPUSH
44641: CALL_OW 111
// continue ;
44645: GO 44137
// end ; end ; r := GetDir ( tmp ) ;
44647: LD_ADDR_VAR 0 15
44651: PUSH
44652: LD_VAR 0 13
44656: PPUSH
44657: CALL_OW 254
44661: ST_TO_ADDR
// if r = 5 then
44662: LD_VAR 0 15
44666: PUSH
44667: LD_INT 5
44669: EQUAL
44670: IFFALSE 44680
// r := 0 ;
44672: LD_ADDR_VAR 0 15
44676: PUSH
44677: LD_INT 0
44679: ST_TO_ADDR
// for j = r to 5 do
44680: LD_ADDR_VAR 0 10
44684: PUSH
44685: DOUBLE
44686: LD_VAR 0 15
44690: DEC
44691: ST_TO_ADDR
44692: LD_INT 5
44694: PUSH
44695: FOR_TO
44696: IFFALSE 44810
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44698: LD_ADDR_VAR 0 11
44702: PUSH
44703: LD_VAR 0 13
44707: PPUSH
44708: CALL_OW 250
44712: PPUSH
44713: LD_VAR 0 10
44717: PPUSH
44718: LD_INT 2
44720: PPUSH
44721: CALL_OW 272
44725: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44726: LD_ADDR_VAR 0 12
44730: PUSH
44731: LD_VAR 0 13
44735: PPUSH
44736: CALL_OW 251
44740: PPUSH
44741: LD_VAR 0 10
44745: PPUSH
44746: LD_INT 2
44748: PPUSH
44749: CALL_OW 273
44753: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44754: LD_VAR 0 11
44758: PPUSH
44759: LD_VAR 0 12
44763: PPUSH
44764: CALL_OW 488
44768: PUSH
44769: LD_VAR 0 11
44773: PPUSH
44774: LD_VAR 0 12
44778: PPUSH
44779: CALL_OW 428
44783: NOT
44784: AND
44785: IFFALSE 44808
// begin ComMoveXY ( tmp , _x , _y ) ;
44787: LD_VAR 0 13
44791: PPUSH
44792: LD_VAR 0 11
44796: PPUSH
44797: LD_VAR 0 12
44801: PPUSH
44802: CALL_OW 111
// break ;
44806: GO 44810
// end ; end ;
44808: GO 44695
44810: POP
44811: POP
// end ; end ;
44812: GO 44137
44814: POP
44815: POP
// end ;
44816: LD_VAR 0 8
44820: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44821: LD_INT 0
44823: PPUSH
// result := true ;
44824: LD_ADDR_VAR 0 3
44828: PUSH
44829: LD_INT 1
44831: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44832: LD_VAR 0 2
44836: PUSH
44837: LD_INT 24
44839: DOUBLE
44840: EQUAL
44841: IFTRUE 44851
44843: LD_INT 33
44845: DOUBLE
44846: EQUAL
44847: IFTRUE 44851
44849: GO 44876
44851: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44852: LD_ADDR_VAR 0 3
44856: PUSH
44857: LD_INT 32
44859: PPUSH
44860: LD_VAR 0 1
44864: PPUSH
44865: CALL_OW 321
44869: PUSH
44870: LD_INT 2
44872: EQUAL
44873: ST_TO_ADDR
44874: GO 45196
44876: LD_INT 20
44878: DOUBLE
44879: EQUAL
44880: IFTRUE 44884
44882: GO 44909
44884: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44885: LD_ADDR_VAR 0 3
44889: PUSH
44890: LD_INT 6
44892: PPUSH
44893: LD_VAR 0 1
44897: PPUSH
44898: CALL_OW 321
44902: PUSH
44903: LD_INT 2
44905: EQUAL
44906: ST_TO_ADDR
44907: GO 45196
44909: LD_INT 22
44911: DOUBLE
44912: EQUAL
44913: IFTRUE 44923
44915: LD_INT 36
44917: DOUBLE
44918: EQUAL
44919: IFTRUE 44923
44921: GO 44948
44923: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44924: LD_ADDR_VAR 0 3
44928: PUSH
44929: LD_INT 15
44931: PPUSH
44932: LD_VAR 0 1
44936: PPUSH
44937: CALL_OW 321
44941: PUSH
44942: LD_INT 2
44944: EQUAL
44945: ST_TO_ADDR
44946: GO 45196
44948: LD_INT 30
44950: DOUBLE
44951: EQUAL
44952: IFTRUE 44956
44954: GO 44981
44956: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44957: LD_ADDR_VAR 0 3
44961: PUSH
44962: LD_INT 20
44964: PPUSH
44965: LD_VAR 0 1
44969: PPUSH
44970: CALL_OW 321
44974: PUSH
44975: LD_INT 2
44977: EQUAL
44978: ST_TO_ADDR
44979: GO 45196
44981: LD_INT 28
44983: DOUBLE
44984: EQUAL
44985: IFTRUE 44995
44987: LD_INT 21
44989: DOUBLE
44990: EQUAL
44991: IFTRUE 44995
44993: GO 45020
44995: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44996: LD_ADDR_VAR 0 3
45000: PUSH
45001: LD_INT 21
45003: PPUSH
45004: LD_VAR 0 1
45008: PPUSH
45009: CALL_OW 321
45013: PUSH
45014: LD_INT 2
45016: EQUAL
45017: ST_TO_ADDR
45018: GO 45196
45020: LD_INT 16
45022: DOUBLE
45023: EQUAL
45024: IFTRUE 45028
45026: GO 45055
45028: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45029: LD_ADDR_VAR 0 3
45033: PUSH
45034: LD_EXP 56
45038: PPUSH
45039: LD_VAR 0 1
45043: PPUSH
45044: CALL_OW 321
45048: PUSH
45049: LD_INT 2
45051: EQUAL
45052: ST_TO_ADDR
45053: GO 45196
45055: LD_INT 19
45057: DOUBLE
45058: EQUAL
45059: IFTRUE 45069
45061: LD_INT 23
45063: DOUBLE
45064: EQUAL
45065: IFTRUE 45069
45067: GO 45096
45069: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45070: LD_ADDR_VAR 0 3
45074: PUSH
45075: LD_EXP 55
45079: PPUSH
45080: LD_VAR 0 1
45084: PPUSH
45085: CALL_OW 321
45089: PUSH
45090: LD_INT 2
45092: EQUAL
45093: ST_TO_ADDR
45094: GO 45196
45096: LD_INT 17
45098: DOUBLE
45099: EQUAL
45100: IFTRUE 45104
45102: GO 45129
45104: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45105: LD_ADDR_VAR 0 3
45109: PUSH
45110: LD_INT 39
45112: PPUSH
45113: LD_VAR 0 1
45117: PPUSH
45118: CALL_OW 321
45122: PUSH
45123: LD_INT 2
45125: EQUAL
45126: ST_TO_ADDR
45127: GO 45196
45129: LD_INT 18
45131: DOUBLE
45132: EQUAL
45133: IFTRUE 45137
45135: GO 45162
45137: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45138: LD_ADDR_VAR 0 3
45142: PUSH
45143: LD_INT 40
45145: PPUSH
45146: LD_VAR 0 1
45150: PPUSH
45151: CALL_OW 321
45155: PUSH
45156: LD_INT 2
45158: EQUAL
45159: ST_TO_ADDR
45160: GO 45196
45162: LD_INT 27
45164: DOUBLE
45165: EQUAL
45166: IFTRUE 45170
45168: GO 45195
45170: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45171: LD_ADDR_VAR 0 3
45175: PUSH
45176: LD_INT 35
45178: PPUSH
45179: LD_VAR 0 1
45183: PPUSH
45184: CALL_OW 321
45188: PUSH
45189: LD_INT 2
45191: EQUAL
45192: ST_TO_ADDR
45193: GO 45196
45195: POP
// end ;
45196: LD_VAR 0 3
45200: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45201: LD_INT 0
45203: PPUSH
45204: PPUSH
45205: PPUSH
45206: PPUSH
45207: PPUSH
45208: PPUSH
45209: PPUSH
45210: PPUSH
45211: PPUSH
45212: PPUSH
45213: PPUSH
// result := false ;
45214: LD_ADDR_VAR 0 6
45218: PUSH
45219: LD_INT 0
45221: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45222: LD_VAR 0 1
45226: NOT
45227: PUSH
45228: LD_VAR 0 1
45232: PPUSH
45233: CALL_OW 266
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: IN
45248: NOT
45249: OR
45250: PUSH
45251: LD_VAR 0 2
45255: NOT
45256: OR
45257: PUSH
45258: LD_VAR 0 5
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: LD_INT 3
45274: PUSH
45275: LD_INT 4
45277: PUSH
45278: LD_INT 5
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: IN
45289: NOT
45290: OR
45291: PUSH
45292: LD_VAR 0 3
45296: PPUSH
45297: LD_VAR 0 4
45301: PPUSH
45302: CALL_OW 488
45306: NOT
45307: OR
45308: IFFALSE 45312
// exit ;
45310: GO 46048
// side := GetSide ( depot ) ;
45312: LD_ADDR_VAR 0 9
45316: PUSH
45317: LD_VAR 0 1
45321: PPUSH
45322: CALL_OW 255
45326: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45327: LD_VAR 0 9
45331: PPUSH
45332: LD_VAR 0 2
45336: PPUSH
45337: CALL 44821 0 2
45341: NOT
45342: IFFALSE 45346
// exit ;
45344: GO 46048
// pom := GetBase ( depot ) ;
45346: LD_ADDR_VAR 0 10
45350: PUSH
45351: LD_VAR 0 1
45355: PPUSH
45356: CALL_OW 274
45360: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45361: LD_ADDR_VAR 0 11
45365: PUSH
45366: LD_VAR 0 2
45370: PPUSH
45371: LD_VAR 0 1
45375: PPUSH
45376: CALL_OW 248
45380: PPUSH
45381: CALL_OW 450
45385: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45386: LD_VAR 0 10
45390: PPUSH
45391: LD_INT 1
45393: PPUSH
45394: CALL_OW 275
45398: PUSH
45399: LD_VAR 0 11
45403: PUSH
45404: LD_INT 1
45406: ARRAY
45407: GREATEREQUAL
45408: PUSH
45409: LD_VAR 0 10
45413: PPUSH
45414: LD_INT 2
45416: PPUSH
45417: CALL_OW 275
45421: PUSH
45422: LD_VAR 0 11
45426: PUSH
45427: LD_INT 2
45429: ARRAY
45430: GREATEREQUAL
45431: AND
45432: PUSH
45433: LD_VAR 0 10
45437: PPUSH
45438: LD_INT 3
45440: PPUSH
45441: CALL_OW 275
45445: PUSH
45446: LD_VAR 0 11
45450: PUSH
45451: LD_INT 3
45453: ARRAY
45454: GREATEREQUAL
45455: AND
45456: NOT
45457: IFFALSE 45461
// exit ;
45459: GO 46048
// if GetBType ( depot ) = b_depot then
45461: LD_VAR 0 1
45465: PPUSH
45466: CALL_OW 266
45470: PUSH
45471: LD_INT 0
45473: EQUAL
45474: IFFALSE 45486
// dist := 28 else
45476: LD_ADDR_VAR 0 14
45480: PUSH
45481: LD_INT 28
45483: ST_TO_ADDR
45484: GO 45494
// dist := 36 ;
45486: LD_ADDR_VAR 0 14
45490: PUSH
45491: LD_INT 36
45493: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45494: LD_VAR 0 1
45498: PPUSH
45499: LD_VAR 0 3
45503: PPUSH
45504: LD_VAR 0 4
45508: PPUSH
45509: CALL_OW 297
45513: PUSH
45514: LD_VAR 0 14
45518: GREATER
45519: IFFALSE 45523
// exit ;
45521: GO 46048
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45523: LD_ADDR_VAR 0 12
45527: PUSH
45528: LD_VAR 0 2
45532: PPUSH
45533: LD_VAR 0 3
45537: PPUSH
45538: LD_VAR 0 4
45542: PPUSH
45543: LD_VAR 0 5
45547: PPUSH
45548: LD_VAR 0 1
45552: PPUSH
45553: CALL_OW 248
45557: PPUSH
45558: LD_INT 0
45560: PPUSH
45561: CALL 46053 0 6
45565: ST_TO_ADDR
// if not hexes then
45566: LD_VAR 0 12
45570: NOT
45571: IFFALSE 45575
// exit ;
45573: GO 46048
// hex := GetHexInfo ( x , y ) ;
45575: LD_ADDR_VAR 0 15
45579: PUSH
45580: LD_VAR 0 3
45584: PPUSH
45585: LD_VAR 0 4
45589: PPUSH
45590: CALL_OW 546
45594: ST_TO_ADDR
// if hex [ 1 ] then
45595: LD_VAR 0 15
45599: PUSH
45600: LD_INT 1
45602: ARRAY
45603: IFFALSE 45607
// exit ;
45605: GO 46048
// height := hex [ 2 ] ;
45607: LD_ADDR_VAR 0 13
45611: PUSH
45612: LD_VAR 0 15
45616: PUSH
45617: LD_INT 2
45619: ARRAY
45620: ST_TO_ADDR
// for i = 1 to hexes do
45621: LD_ADDR_VAR 0 7
45625: PUSH
45626: DOUBLE
45627: LD_INT 1
45629: DEC
45630: ST_TO_ADDR
45631: LD_VAR 0 12
45635: PUSH
45636: FOR_TO
45637: IFFALSE 45967
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45639: LD_VAR 0 12
45643: PUSH
45644: LD_VAR 0 7
45648: ARRAY
45649: PUSH
45650: LD_INT 1
45652: ARRAY
45653: PPUSH
45654: LD_VAR 0 12
45658: PUSH
45659: LD_VAR 0 7
45663: ARRAY
45664: PUSH
45665: LD_INT 2
45667: ARRAY
45668: PPUSH
45669: CALL_OW 488
45673: NOT
45674: PUSH
45675: LD_VAR 0 12
45679: PUSH
45680: LD_VAR 0 7
45684: ARRAY
45685: PUSH
45686: LD_INT 1
45688: ARRAY
45689: PPUSH
45690: LD_VAR 0 12
45694: PUSH
45695: LD_VAR 0 7
45699: ARRAY
45700: PUSH
45701: LD_INT 2
45703: ARRAY
45704: PPUSH
45705: CALL_OW 428
45709: PUSH
45710: LD_INT 0
45712: GREATER
45713: OR
45714: PUSH
45715: LD_VAR 0 12
45719: PUSH
45720: LD_VAR 0 7
45724: ARRAY
45725: PUSH
45726: LD_INT 1
45728: ARRAY
45729: PPUSH
45730: LD_VAR 0 12
45734: PUSH
45735: LD_VAR 0 7
45739: ARRAY
45740: PUSH
45741: LD_INT 2
45743: ARRAY
45744: PPUSH
45745: CALL_OW 351
45749: OR
45750: IFFALSE 45756
// exit ;
45752: POP
45753: POP
45754: GO 46048
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45756: LD_ADDR_VAR 0 8
45760: PUSH
45761: LD_VAR 0 12
45765: PUSH
45766: LD_VAR 0 7
45770: ARRAY
45771: PUSH
45772: LD_INT 1
45774: ARRAY
45775: PPUSH
45776: LD_VAR 0 12
45780: PUSH
45781: LD_VAR 0 7
45785: ARRAY
45786: PUSH
45787: LD_INT 2
45789: ARRAY
45790: PPUSH
45791: CALL_OW 546
45795: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45796: LD_VAR 0 8
45800: PUSH
45801: LD_INT 1
45803: ARRAY
45804: PUSH
45805: LD_VAR 0 8
45809: PUSH
45810: LD_INT 2
45812: ARRAY
45813: PUSH
45814: LD_VAR 0 13
45818: PUSH
45819: LD_INT 2
45821: PLUS
45822: GREATER
45823: OR
45824: PUSH
45825: LD_VAR 0 8
45829: PUSH
45830: LD_INT 2
45832: ARRAY
45833: PUSH
45834: LD_VAR 0 13
45838: PUSH
45839: LD_INT 2
45841: MINUS
45842: LESS
45843: OR
45844: PUSH
45845: LD_VAR 0 8
45849: PUSH
45850: LD_INT 3
45852: ARRAY
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 8
45859: PUSH
45860: LD_INT 9
45862: PUSH
45863: LD_INT 10
45865: PUSH
45866: LD_INT 11
45868: PUSH
45869: LD_INT 12
45871: PUSH
45872: LD_INT 13
45874: PUSH
45875: LD_INT 16
45877: PUSH
45878: LD_INT 17
45880: PUSH
45881: LD_INT 18
45883: PUSH
45884: LD_INT 19
45886: PUSH
45887: LD_INT 20
45889: PUSH
45890: LD_INT 21
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: IN
45908: NOT
45909: OR
45910: PUSH
45911: LD_VAR 0 8
45915: PUSH
45916: LD_INT 5
45918: ARRAY
45919: NOT
45920: OR
45921: PUSH
45922: LD_VAR 0 8
45926: PUSH
45927: LD_INT 6
45929: ARRAY
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 2
45936: PUSH
45937: LD_INT 7
45939: PUSH
45940: LD_INT 9
45942: PUSH
45943: LD_INT 10
45945: PUSH
45946: LD_INT 11
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: IN
45957: NOT
45958: OR
45959: IFFALSE 45965
// exit ;
45961: POP
45962: POP
45963: GO 46048
// end ;
45965: GO 45636
45967: POP
45968: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45969: LD_VAR 0 9
45973: PPUSH
45974: LD_VAR 0 3
45978: PPUSH
45979: LD_VAR 0 4
45983: PPUSH
45984: LD_INT 20
45986: PPUSH
45987: CALL 37994 0 4
45991: PUSH
45992: LD_INT 4
45994: ARRAY
45995: IFFALSE 45999
// exit ;
45997: GO 46048
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45999: LD_VAR 0 2
46003: PUSH
46004: LD_INT 29
46006: PUSH
46007: LD_INT 30
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: IN
46014: PUSH
46015: LD_VAR 0 3
46019: PPUSH
46020: LD_VAR 0 4
46024: PPUSH
46025: LD_VAR 0 9
46029: PPUSH
46030: CALL_OW 440
46034: NOT
46035: AND
46036: IFFALSE 46040
// exit ;
46038: GO 46048
// result := true ;
46040: LD_ADDR_VAR 0 6
46044: PUSH
46045: LD_INT 1
46047: ST_TO_ADDR
// end ;
46048: LD_VAR 0 6
46052: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46053: LD_INT 0
46055: PPUSH
46056: PPUSH
46057: PPUSH
46058: PPUSH
46059: PPUSH
46060: PPUSH
46061: PPUSH
46062: PPUSH
46063: PPUSH
46064: PPUSH
46065: PPUSH
46066: PPUSH
46067: PPUSH
46068: PPUSH
46069: PPUSH
46070: PPUSH
46071: PPUSH
46072: PPUSH
46073: PPUSH
46074: PPUSH
46075: PPUSH
46076: PPUSH
46077: PPUSH
46078: PPUSH
46079: PPUSH
46080: PPUSH
46081: PPUSH
46082: PPUSH
46083: PPUSH
46084: PPUSH
46085: PPUSH
46086: PPUSH
46087: PPUSH
46088: PPUSH
46089: PPUSH
46090: PPUSH
46091: PPUSH
46092: PPUSH
46093: PPUSH
46094: PPUSH
46095: PPUSH
46096: PPUSH
46097: PPUSH
46098: PPUSH
46099: PPUSH
46100: PPUSH
46101: PPUSH
46102: PPUSH
46103: PPUSH
46104: PPUSH
46105: PPUSH
46106: PPUSH
46107: PPUSH
46108: PPUSH
46109: PPUSH
46110: PPUSH
46111: PPUSH
46112: PPUSH
// result = [ ] ;
46113: LD_ADDR_VAR 0 7
46117: PUSH
46118: EMPTY
46119: ST_TO_ADDR
// temp_list = [ ] ;
46120: LD_ADDR_VAR 0 9
46124: PUSH
46125: EMPTY
46126: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46127: LD_VAR 0 4
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: LD_INT 3
46143: PUSH
46144: LD_INT 4
46146: PUSH
46147: LD_INT 5
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: IN
46158: NOT
46159: PUSH
46160: LD_VAR 0 1
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: IN
46175: PUSH
46176: LD_VAR 0 5
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: LD_INT 3
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: LIST
46194: IN
46195: NOT
46196: AND
46197: OR
46198: IFFALSE 46202
// exit ;
46200: GO 64593
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46202: LD_VAR 0 1
46206: PUSH
46207: LD_INT 6
46209: PUSH
46210: LD_INT 7
46212: PUSH
46213: LD_INT 8
46215: PUSH
46216: LD_INT 13
46218: PUSH
46219: LD_INT 12
46221: PUSH
46222: LD_INT 15
46224: PUSH
46225: LD_INT 11
46227: PUSH
46228: LD_INT 14
46230: PUSH
46231: LD_INT 10
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: IN
46245: IFFALSE 46255
// btype = b_lab ;
46247: LD_ADDR_VAR 0 1
46251: PUSH
46252: LD_INT 6
46254: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46255: LD_VAR 0 6
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 2
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: LIST
46273: IN
46274: NOT
46275: PUSH
46276: LD_VAR 0 1
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: LD_INT 6
46295: PUSH
46296: LD_INT 36
46298: PUSH
46299: LD_INT 4
46301: PUSH
46302: LD_INT 5
46304: PUSH
46305: LD_INT 31
46307: PUSH
46308: LD_INT 32
46310: PUSH
46311: LD_INT 33
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: IN
46327: NOT
46328: PUSH
46329: LD_VAR 0 6
46333: PUSH
46334: LD_INT 1
46336: EQUAL
46337: AND
46338: OR
46339: PUSH
46340: LD_VAR 0 1
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: IN
46355: NOT
46356: PUSH
46357: LD_VAR 0 6
46361: PUSH
46362: LD_INT 2
46364: EQUAL
46365: AND
46366: OR
46367: IFFALSE 46377
// mode = 0 ;
46369: LD_ADDR_VAR 0 6
46373: PUSH
46374: LD_INT 0
46376: ST_TO_ADDR
// case mode of 0 :
46377: LD_VAR 0 6
46381: PUSH
46382: LD_INT 0
46384: DOUBLE
46385: EQUAL
46386: IFTRUE 46390
46388: GO 57843
46390: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46391: LD_ADDR_VAR 0 11
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: LD_INT 2
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 2
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 3
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 3
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46584: LD_ADDR_VAR 0 12
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: NEG
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 3
46741: NEG
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 3
46752: NEG
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46780: LD_ADDR_VAR 0 13
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 2
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: LD_INT 1
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: NEG
46928: PUSH
46929: LD_INT 3
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 3
46939: NEG
46940: PUSH
46941: LD_INT 2
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 3
46951: NEG
46952: PUSH
46953: LD_INT 3
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46979: LD_ADDR_VAR 0 14
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 2
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 2
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 2
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: NEG
47126: PUSH
47127: LD_INT 3
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 3
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47175: LD_ADDR_VAR 0 15
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 3
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 3
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47368: LD_ADDR_VAR 0 16
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: LD_INT 2
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: LD_INT 2
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 2
47491: NEG
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 3
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: LD_INT 3
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47561: LD_ADDR_VAR 0 17
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47791: LD_ADDR_VAR 0 18
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: NEG
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 2
47990: NEG
47991: PUSH
47992: LD_INT 2
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48021: LD_ADDR_VAR 0 19
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: NEG
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48251: LD_ADDR_VAR 0 20
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 2
48438: NEG
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 2
48450: NEG
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48481: LD_ADDR_VAR 0 21
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 2
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48711: LD_ADDR_VAR 0 22
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: LD_INT 2
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 2
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 2
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 2
48887: NEG
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48941: LD_ADDR_VAR 0 23
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 2
49140: NEG
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: LD_INT 3
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: LD_INT 3
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: LD_INT 2
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49221: LD_ADDR_VAR 0 24
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 2
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 2
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 2
49397: NEG
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: LD_INT 2
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: LD_INT 2
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 3
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49497: LD_ADDR_VAR 0 25
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: LD_INT 2
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 3
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 3
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: LD_INT 3
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49771: LD_ADDR_VAR 0 26
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: NEG
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 2
49970: NEG
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: LD_INT 3
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 3
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50047: LD_ADDR_VAR 0 27
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 2
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 2
50223: NEG
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: NEG
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: NEG
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 3
50292: NEG
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50327: LD_ADDR_VAR 0 28
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: LD_INT 3
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 3
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 3
50562: NEG
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: NEG
50575: PUSH
50576: LD_INT 2
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50609: LD_ADDR_VAR 0 29
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: LD_INT 3
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 3
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 3
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 3
50853: NEG
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50888: LD_ADDR_VAR 0 30
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 2
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: LD_INT 3
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 3
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: PUSH
51111: LD_INT 3
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 3
51131: NEG
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51166: LD_ADDR_VAR 0 31
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 2
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: LD_INT 3
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 3
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: LD_INT 3
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 3
51409: NEG
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51444: LD_ADDR_VAR 0 32
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 3
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 3
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: LD_INT 3
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 3
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51722: LD_ADDR_VAR 0 33
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 2
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: LD_INT 2
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 2
51900: NEG
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 2
51912: NEG
51913: PUSH
51914: LD_INT 3
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 3
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 3
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 3
51966: NEG
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52001: LD_ADDR_VAR 0 34
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 2
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: NEG
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: LD_INT 2
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: LD_INT 3
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 3
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 2
52235: NEG
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 3
52246: NEG
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52281: LD_ADDR_VAR 0 35
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52393: LD_ADDR_VAR 0 36
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: LD_INT 2
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52505: LD_ADDR_VAR 0 37
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52617: LD_ADDR_VAR 0 38
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52729: LD_ADDR_VAR 0 39
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52841: LD_ADDR_VAR 0 40
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52953: LD_ADDR_VAR 0 41
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: LD_INT 1
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 2
53131: NEG
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 2
53143: NEG
53144: PUSH
53145: LD_INT 3
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 3
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 3
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: LD_INT 3
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 3
53238: NEG
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 3
53250: NEG
53251: PUSH
53252: LD_INT 2
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 3
53262: NEG
53263: PUSH
53264: LD_INT 3
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53303: LD_ADDR_VAR 0 42
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 3
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 3
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 3
53549: PUSH
53550: LD_INT 3
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: PUSH
53560: LD_INT 3
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 3
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 3
53612: NEG
53613: PUSH
53614: LD_INT 3
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53653: LD_ADDR_VAR 0 43
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: LD_INT 2
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 2
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: LD_INT 3
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 3
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 3
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 3
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 3
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 3
53949: NEG
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 3
53960: NEG
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54001: LD_ADDR_VAR 0 44
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 2
54179: NEG
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 2
54191: NEG
54192: PUSH
54193: LD_INT 3
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 3
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 3
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 3
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 3
54244: PUSH
54245: LD_INT 3
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: LD_INT 3
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: NEG
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 3
54275: NEG
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 3
54286: NEG
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 3
54298: NEG
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 3
54310: NEG
54311: PUSH
54312: LD_INT 3
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54351: LD_ADDR_VAR 0 45
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: LD_INT 3
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: LD_INT 3
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 3
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 3
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 3
54597: PUSH
54598: LD_INT 3
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: LD_INT 3
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 3
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 3
54648: NEG
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 3
54660: NEG
54661: PUSH
54662: LD_INT 3
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54701: LD_ADDR_VAR 0 46
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 2
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: LD_INT 3
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 3
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 3
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 3
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 3
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 3
54997: NEG
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: NEG
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55049: LD_ADDR_VAR 0 47
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: LD_INT 2
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: LD_INT 2
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55200: LD_ADDR_VAR 0 48
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55347: LD_ADDR_VAR 0 49
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55491: LD_ADDR_VAR 0 50
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55635: LD_ADDR_VAR 0 51
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: NEG
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55782: LD_ADDR_VAR 0 52
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55933: LD_ADDR_VAR 0 53
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 2
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56163: LD_ADDR_VAR 0 54
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 2
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 2
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 2
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 2
56339: NEG
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: NEG
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56393: LD_ADDR_VAR 0 55
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 2
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56623: LD_ADDR_VAR 0 56
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: LD_INT 2
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 2
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: LD_INT 2
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56853: LD_ADDR_VAR 0 57
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 2
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 2
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: NEG
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 2
57052: NEG
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57083: LD_ADDR_VAR 0 58
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 1
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 2
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 2
57259: NEG
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57313: LD_ADDR_VAR 0 59
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57401: LD_ADDR_VAR 0 60
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57489: LD_ADDR_VAR 0 61
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 1
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57577: LD_ADDR_VAR 0 62
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57665: LD_ADDR_VAR 0 63
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: NEG
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57753: LD_ADDR_VAR 0 64
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: ST_TO_ADDR
// end ; 1 :
57841: GO 63738
57843: LD_INT 1
57845: DOUBLE
57846: EQUAL
57847: IFTRUE 57851
57849: GO 60474
57851: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57852: LD_ADDR_VAR 0 11
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: LD_INT 3
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 3
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: LIST
57895: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57896: LD_ADDR_VAR 0 12
57900: PUSH
57901: LD_INT 2
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 3
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 3
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: LIST
57936: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57937: LD_ADDR_VAR 0 13
57941: PUSH
57942: LD_INT 3
57944: PUSH
57945: LD_INT 2
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 3
57954: PUSH
57955: LD_INT 3
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: PUSH
57965: LD_INT 3
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: LIST
57976: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57977: LD_ADDR_VAR 0 14
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: LD_INT 3
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: LIST
58017: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58018: LD_ADDR_VAR 0 15
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 3
58036: NEG
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 3
58047: NEG
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: LIST
58061: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58062: LD_ADDR_VAR 0 16
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: LD_INT 3
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 3
58081: NEG
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 3
58093: NEG
58094: PUSH
58095: LD_INT 3
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: LIST
58107: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58108: LD_ADDR_VAR 0 17
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: LD_INT 3
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: LD_INT 3
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: LD_INT 2
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: LIST
58151: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58152: LD_ADDR_VAR 0 18
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 3
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 3
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: LIST
58192: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58193: LD_ADDR_VAR 0 19
58197: PUSH
58198: LD_INT 3
58200: PUSH
58201: LD_INT 2
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 2
58220: PUSH
58221: LD_INT 3
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: LIST
58232: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58233: LD_ADDR_VAR 0 20
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 3
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: LIST
58273: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58274: LD_ADDR_VAR 0 21
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 3
58292: NEG
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 3
58303: NEG
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: LIST
58317: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58318: LD_ADDR_VAR 0 22
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: LD_INT 3
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 3
58337: NEG
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 3
58349: NEG
58350: PUSH
58351: LD_INT 3
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: LIST
58363: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58364: LD_ADDR_VAR 0 23
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: LD_INT 4
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: LD_INT 3
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: LIST
58407: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58408: LD_ADDR_VAR 0 24
58412: PUSH
58413: LD_INT 3
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 4
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: LIST
58448: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58449: LD_ADDR_VAR 0 25
58453: PUSH
58454: LD_INT 3
58456: PUSH
58457: LD_INT 3
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 4
58466: PUSH
58467: LD_INT 3
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 3
58476: PUSH
58477: LD_INT 4
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: LIST
58488: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58489: LD_ADDR_VAR 0 26
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: LD_INT 3
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 4
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: LD_INT 3
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: LIST
58529: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58530: LD_ADDR_VAR 0 27
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: NEG
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 4
58559: NEG
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: LIST
58573: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58574: LD_ADDR_VAR 0 28
58578: PUSH
58579: LD_INT 3
58581: NEG
58582: PUSH
58583: LD_INT 3
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 3
58593: NEG
58594: PUSH
58595: LD_INT 4
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 4
58605: NEG
58606: PUSH
58607: LD_INT 3
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: LIST
58619: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58620: LD_ADDR_VAR 0 29
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: LD_INT 3
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: LD_INT 3
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: LD_INT 4
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 4
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: LD_INT 3
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: LD_INT 5
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: LD_INT 5
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: LD_INT 4
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: LD_INT 6
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 6
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: LD_INT 5
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58775: LD_ADDR_VAR 0 30
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 3
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 3
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 4
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 4
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 4
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 5
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 5
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 5
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 6
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 6
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58918: LD_ADDR_VAR 0 31
58922: PUSH
58923: LD_INT 3
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 3
58935: PUSH
58936: LD_INT 3
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: LD_INT 3
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 4
58955: PUSH
58956: LD_INT 3
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 4
58965: PUSH
58966: LD_INT 4
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 3
58975: PUSH
58976: LD_INT 4
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 5
58985: PUSH
58986: LD_INT 4
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 5
58995: PUSH
58996: LD_INT 5
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 4
59005: PUSH
59006: LD_INT 5
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 6
59015: PUSH
59016: LD_INT 5
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 6
59025: PUSH
59026: LD_INT 6
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 5
59035: PUSH
59036: LD_INT 6
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59057: LD_ADDR_VAR 0 32
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 3
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: LD_INT 3
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 2
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: LD_INT 4
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 4
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: LD_INT 3
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: LD_INT 5
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: LD_INT 5
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: LD_INT 4
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 6
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: LD_INT 6
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: LD_INT 5
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59200: LD_ADDR_VAR 0 33
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 3
59218: NEG
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 3
59229: NEG
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 3
59241: NEG
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 4
59252: NEG
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 4
59263: NEG
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 4
59275: NEG
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 5
59286: NEG
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 5
59297: NEG
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 5
59309: NEG
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 6
59320: NEG
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 6
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59355: LD_ADDR_VAR 0 34
59359: PUSH
59360: LD_INT 2
59362: NEG
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 3
59374: NEG
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 3
59386: NEG
59387: PUSH
59388: LD_INT 3
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 3
59398: NEG
59399: PUSH
59400: LD_INT 4
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 4
59410: NEG
59411: PUSH
59412: LD_INT 3
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 4
59422: NEG
59423: PUSH
59424: LD_INT 4
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 4
59434: NEG
59435: PUSH
59436: LD_INT 5
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 5
59446: NEG
59447: PUSH
59448: LD_INT 4
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 5
59458: NEG
59459: PUSH
59460: LD_INT 5
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 5
59470: NEG
59471: PUSH
59472: LD_INT 6
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 6
59482: NEG
59483: PUSH
59484: LD_INT 5
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 6
59494: NEG
59495: PUSH
59496: LD_INT 6
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59518: LD_ADDR_VAR 0 41
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: LD_INT 3
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: LIST
59561: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59562: LD_ADDR_VAR 0 42
59566: PUSH
59567: LD_INT 2
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 2
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 3
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: LIST
59602: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59603: LD_ADDR_VAR 0 43
59607: PUSH
59608: LD_INT 2
59610: PUSH
59611: LD_INT 2
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 3
59620: PUSH
59621: LD_INT 2
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 2
59630: PUSH
59631: LD_INT 3
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: LIST
59642: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59643: LD_ADDR_VAR 0 44
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: LD_INT 2
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: LD_INT 3
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: LD_INT 2
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59684: LD_ADDR_VAR 0 45
59688: PUSH
59689: LD_INT 2
59691: NEG
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 2
59702: NEG
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 3
59713: NEG
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: LIST
59727: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59728: LD_ADDR_VAR 0 46
59732: PUSH
59733: LD_INT 2
59735: NEG
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: LD_INT 3
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 3
59759: NEG
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: LIST
59773: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59774: LD_ADDR_VAR 0 47
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: LD_INT 3
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: LD_INT 3
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59807: LD_ADDR_VAR 0 48
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 2
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59838: LD_ADDR_VAR 0 49
59842: PUSH
59843: LD_INT 3
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59867: LD_ADDR_VAR 0 50
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: LD_INT 3
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: LD_INT 3
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59896: LD_ADDR_VAR 0 51
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59927: LD_ADDR_VAR 0 52
59931: PUSH
59932: LD_INT 3
59934: NEG
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 3
59946: NEG
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59960: LD_ADDR_VAR 0 53
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: LD_INT 3
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: LD_INT 3
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: LIST
60003: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60004: LD_ADDR_VAR 0 54
60008: PUSH
60009: LD_INT 2
60011: PUSH
60012: LD_INT 1
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 3
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 3
60032: PUSH
60033: LD_INT 1
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: LIST
60044: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60045: LD_ADDR_VAR 0 55
60049: PUSH
60050: LD_INT 3
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 3
60062: PUSH
60063: LD_INT 3
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: LD_INT 3
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: LIST
60084: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60085: LD_ADDR_VAR 0 56
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: LD_INT 3
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 3
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: NEG
60113: PUSH
60114: LD_INT 2
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: LIST
60125: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60126: LD_ADDR_VAR 0 57
60130: PUSH
60131: LD_INT 2
60133: NEG
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 3
60144: NEG
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60170: LD_ADDR_VAR 0 58
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: LD_INT 3
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 3
60189: NEG
60190: PUSH
60191: LD_INT 2
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 3
60201: NEG
60202: PUSH
60203: LD_INT 3
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: LIST
60215: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60216: LD_ADDR_VAR 0 59
60220: PUSH
60221: LD_INT 1
60223: NEG
60224: PUSH
60225: LD_INT 2
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: LD_INT 2
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: LIST
60259: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60260: LD_ADDR_VAR 0 60
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 2
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 2
60288: PUSH
60289: LD_INT 1
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: LIST
60300: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60301: LD_ADDR_VAR 0 61
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: LIST
60340: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60341: LD_ADDR_VAR 0 62
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 1
60368: NEG
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60382: LD_ADDR_VAR 0 63
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 1
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 2
60400: NEG
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: LIST
60425: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60426: LD_ADDR_VAR 0 64
60430: PUSH
60431: LD_INT 1
60433: NEG
60434: PUSH
60435: LD_INT 2
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 2
60445: NEG
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 2
60457: NEG
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: LIST
60471: ST_TO_ADDR
// end ; 2 :
60472: GO 63738
60474: LD_INT 2
60476: DOUBLE
60477: EQUAL
60478: IFTRUE 60482
60480: GO 63737
60482: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60483: LD_ADDR_VAR 0 29
60487: PUSH
60488: LD_INT 4
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 4
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 5
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 5
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 4
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 3
60562: PUSH
60563: LD_INT 2
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 5
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 3
60583: PUSH
60584: LD_INT 3
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 3
60593: PUSH
60594: LD_INT 2
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 4
60603: PUSH
60604: LD_INT 3
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 4
60613: PUSH
60614: LD_INT 4
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 3
60623: PUSH
60624: LD_INT 4
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: LD_INT 3
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: LD_INT 2
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 4
60653: PUSH
60654: LD_INT 2
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: LD_INT 4
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: LD_INT 4
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 3
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: LD_INT 4
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: LD_INT 5
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: LD_INT 5
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: LD_INT 4
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: LD_INT 3
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 2
60745: PUSH
60746: LD_INT 5
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 2
60755: NEG
60756: PUSH
60757: LD_INT 3
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 3
60766: NEG
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 3
60777: NEG
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 2
60789: NEG
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 3
60811: NEG
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 4
60822: NEG
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 4
60833: NEG
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 4
60845: NEG
60846: PUSH
60847: LD_INT 2
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 2
60857: NEG
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 4
60868: NEG
60869: PUSH
60870: LD_INT 4
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 4
60880: NEG
60881: PUSH
60882: LD_INT 5
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 3
60892: NEG
60893: PUSH
60894: LD_INT 4
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 3
60904: NEG
60905: PUSH
60906: LD_INT 3
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 4
60916: NEG
60917: PUSH
60918: LD_INT 3
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 5
60928: NEG
60929: PUSH
60930: LD_INT 4
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 5
60940: NEG
60941: PUSH
60942: LD_INT 5
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 3
60952: NEG
60953: PUSH
60954: LD_INT 5
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 5
60964: NEG
60965: PUSH
60966: LD_INT 3
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61021: LD_ADDR_VAR 0 30
61025: PUSH
61026: LD_INT 4
61028: PUSH
61029: LD_INT 4
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 4
61038: PUSH
61039: LD_INT 3
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 5
61048: PUSH
61049: LD_INT 4
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 5
61058: PUSH
61059: LD_INT 5
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 4
61068: PUSH
61069: LD_INT 5
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 3
61078: PUSH
61079: LD_INT 4
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 3
61088: PUSH
61089: LD_INT 3
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 5
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 3
61108: PUSH
61109: LD_INT 5
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 0
61118: PUSH
61119: LD_INT 3
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 2
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: LD_INT 3
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: LD_INT 4
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: LD_INT 4
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: LD_INT 3
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: LD_INT 4
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 2
61200: NEG
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 4
61211: NEG
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 4
61222: NEG
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 3
61234: NEG
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 3
61245: NEG
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 4
61256: NEG
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 5
61267: NEG
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 5
61278: NEG
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 5
61290: NEG
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 3
61302: NEG
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: LD_INT 3
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: LD_INT 4
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: LD_INT 3
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 2
61349: NEG
61350: PUSH
61351: LD_INT 2
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 3
61361: NEG
61362: PUSH
61363: LD_INT 2
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 4
61373: NEG
61374: PUSH
61375: LD_INT 3
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 4
61385: NEG
61386: PUSH
61387: LD_INT 4
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 2
61397: NEG
61398: PUSH
61399: LD_INT 4
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 4
61409: NEG
61410: PUSH
61411: LD_INT 2
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: LD_INT 4
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: LD_INT 5
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: LD_INT 4
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: LD_INT 3
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 3
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 4
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: LD_INT 5
61492: NEG
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 2
61500: PUSH
61501: LD_INT 3
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 2
61511: NEG
61512: PUSH
61513: LD_INT 5
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61568: LD_ADDR_VAR 0 31
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: LD_INT 4
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: LD_INT 3
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: LD_INT 4
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: LD_INT 5
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: LD_INT 5
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: PUSH
61627: LD_INT 4
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 3
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: LD_INT 5
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 2
61657: NEG
61658: PUSH
61659: LD_INT 3
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 3
61668: NEG
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 3
61679: NEG
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 2
61691: NEG
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 3
61713: NEG
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 4
61724: NEG
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 4
61735: NEG
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 4
61747: NEG
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 2
61759: NEG
61760: PUSH
61761: LD_INT 2
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 4
61770: NEG
61771: PUSH
61772: LD_INT 4
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 4
61782: NEG
61783: PUSH
61784: LD_INT 5
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 3
61794: NEG
61795: PUSH
61796: LD_INT 4
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 3
61806: NEG
61807: PUSH
61808: LD_INT 3
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 4
61818: NEG
61819: PUSH
61820: LD_INT 3
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 5
61830: NEG
61831: PUSH
61832: LD_INT 4
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 5
61842: NEG
61843: PUSH
61844: LD_INT 5
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 3
61854: NEG
61855: PUSH
61856: LD_INT 5
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 5
61866: NEG
61867: PUSH
61868: LD_INT 3
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: LD_INT 3
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: LD_INT 4
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: LD_INT 3
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: LD_INT 2
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: LD_INT 3
61937: NEG
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: LD_INT 4
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: LD_INT 2
61960: NEG
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 2
61968: NEG
61969: PUSH
61970: LD_INT 4
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 4
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 4
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 5
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 5
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 4
62021: PUSH
62022: LD_INT 1
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 3
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 3
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 3
62052: PUSH
62053: LD_INT 2
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 5
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62118: LD_ADDR_VAR 0 32
62122: PUSH
62123: LD_INT 4
62125: NEG
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 4
62136: NEG
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 3
62148: NEG
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 3
62159: NEG
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 4
62170: NEG
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 5
62181: NEG
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 5
62192: NEG
62193: PUSH
62194: LD_INT 1
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 5
62204: NEG
62205: PUSH
62206: LD_INT 2
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 3
62216: NEG
62217: PUSH
62218: LD_INT 2
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 3
62227: NEG
62228: PUSH
62229: LD_INT 3
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 3
62239: NEG
62240: PUSH
62241: LD_INT 4
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 2
62251: NEG
62252: PUSH
62253: LD_INT 3
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 2
62263: NEG
62264: PUSH
62265: LD_INT 2
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 3
62275: NEG
62276: PUSH
62277: LD_INT 2
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 4
62287: NEG
62288: PUSH
62289: LD_INT 3
62291: NEG
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 4
62299: NEG
62300: PUSH
62301: LD_INT 4
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 2
62311: NEG
62312: PUSH
62313: LD_INT 4
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 4
62323: NEG
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: LD_INT 4
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: LD_INT 5
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: LD_INT 4
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: LD_INT 3
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: LD_INT 3
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: LD_INT 4
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 1
62402: NEG
62403: PUSH
62404: LD_INT 5
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 2
62414: PUSH
62415: LD_INT 3
62417: NEG
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 2
62425: NEG
62426: PUSH
62427: LD_INT 5
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 3
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 3
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 4
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 4
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 3
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 2
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 2
62498: PUSH
62499: LD_INT 1
62501: NEG
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: LD_INT 2
62512: NEG
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 4
62520: PUSH
62521: LD_INT 2
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 4
62530: PUSH
62531: LD_INT 4
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 4
62540: PUSH
62541: LD_INT 3
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 5
62550: PUSH
62551: LD_INT 4
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 5
62560: PUSH
62561: LD_INT 5
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 4
62570: PUSH
62571: LD_INT 5
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 3
62580: PUSH
62581: LD_INT 4
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 3
62590: PUSH
62591: LD_INT 3
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 5
62600: PUSH
62601: LD_INT 3
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 3
62610: PUSH
62611: LD_INT 5
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62665: LD_ADDR_VAR 0 33
62669: PUSH
62670: LD_INT 4
62672: NEG
62673: PUSH
62674: LD_INT 4
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 4
62684: NEG
62685: PUSH
62686: LD_INT 5
62688: NEG
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 3
62696: NEG
62697: PUSH
62698: LD_INT 4
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 3
62708: NEG
62709: PUSH
62710: LD_INT 3
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 4
62720: NEG
62721: PUSH
62722: LD_INT 3
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 5
62732: NEG
62733: PUSH
62734: LD_INT 4
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 5
62744: NEG
62745: PUSH
62746: LD_INT 5
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 3
62756: NEG
62757: PUSH
62758: LD_INT 5
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 5
62768: NEG
62769: PUSH
62770: LD_INT 3
62772: NEG
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: LD_INT 3
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: LD_INT 4
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: LD_INT 3
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: LD_INT 2
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: LD_INT 2
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: LD_INT 3
62839: NEG
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: LD_INT 4
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: LD_INT 2
62862: NEG
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 2
62870: NEG
62871: PUSH
62872: LD_INT 4
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 4
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 4
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 5
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 5
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 4
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 3
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 3
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 3
62954: PUSH
62955: LD_INT 2
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 5
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 3
62975: PUSH
62976: LD_INT 3
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 3
62985: PUSH
62986: LD_INT 2
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 4
62995: PUSH
62996: LD_INT 3
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 4
63005: PUSH
63006: LD_INT 4
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 3
63015: PUSH
63016: LD_INT 4
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 2
63025: PUSH
63026: LD_INT 3
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 2
63035: PUSH
63036: LD_INT 2
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 4
63045: PUSH
63046: LD_INT 2
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: LD_INT 4
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: LD_INT 4
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: LD_INT 3
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 1
63085: PUSH
63086: LD_INT 4
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 5
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 5
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: LD_INT 4
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: LD_INT 3
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 2
63137: PUSH
63138: LD_INT 5
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 2
63147: NEG
63148: PUSH
63149: LD_INT 3
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63203: LD_ADDR_VAR 0 34
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: LD_INT 4
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: LD_INT 5
63224: NEG
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 1
63232: PUSH
63233: LD_INT 4
63235: NEG
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 1
63243: PUSH
63244: LD_INT 3
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: LD_INT 3
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: LD_INT 4
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 1
63277: NEG
63278: PUSH
63279: LD_INT 5
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 2
63289: PUSH
63290: LD_INT 3
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 2
63300: NEG
63301: PUSH
63302: LD_INT 5
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 3
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 3
63322: PUSH
63323: LD_INT 1
63325: NEG
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 4
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 4
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 3
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 2
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 2
63384: PUSH
63385: LD_INT 2
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 4
63395: PUSH
63396: LD_INT 2
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 4
63405: PUSH
63406: LD_INT 4
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 4
63415: PUSH
63416: LD_INT 3
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 5
63425: PUSH
63426: LD_INT 4
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 5
63435: PUSH
63436: LD_INT 5
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 4
63445: PUSH
63446: LD_INT 5
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 3
63455: PUSH
63456: LD_INT 4
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 3
63465: PUSH
63466: LD_INT 3
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 5
63475: PUSH
63476: LD_INT 3
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 3
63485: PUSH
63486: LD_INT 5
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: LD_INT 3
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: LD_INT 2
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 1
63515: PUSH
63516: LD_INT 3
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 1
63525: PUSH
63526: LD_INT 4
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: LD_INT 4
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 1
63545: NEG
63546: PUSH
63547: LD_INT 3
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: NEG
63557: PUSH
63558: LD_INT 2
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 2
63567: PUSH
63568: LD_INT 4
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 2
63577: NEG
63578: PUSH
63579: LD_INT 2
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 4
63588: NEG
63589: PUSH
63590: LD_INT 0
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 4
63599: NEG
63600: PUSH
63601: LD_INT 1
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 3
63611: NEG
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 3
63622: NEG
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 4
63633: NEG
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 5
63644: NEG
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 5
63655: NEG
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 5
63667: NEG
63668: PUSH
63669: LD_INT 2
63671: NEG
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 3
63679: NEG
63680: PUSH
63681: LD_INT 2
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: ST_TO_ADDR
// end ; end ;
63735: GO 63738
63737: POP
// case btype of b_depot , b_warehouse :
63738: LD_VAR 0 1
63742: PUSH
63743: LD_INT 0
63745: DOUBLE
63746: EQUAL
63747: IFTRUE 63757
63749: LD_INT 1
63751: DOUBLE
63752: EQUAL
63753: IFTRUE 63757
63755: GO 63958
63757: POP
// case nation of nation_american :
63758: LD_VAR 0 5
63762: PUSH
63763: LD_INT 1
63765: DOUBLE
63766: EQUAL
63767: IFTRUE 63771
63769: GO 63827
63771: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63772: LD_ADDR_VAR 0 9
63776: PUSH
63777: LD_VAR 0 11
63781: PUSH
63782: LD_VAR 0 12
63786: PUSH
63787: LD_VAR 0 13
63791: PUSH
63792: LD_VAR 0 14
63796: PUSH
63797: LD_VAR 0 15
63801: PUSH
63802: LD_VAR 0 16
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: PUSH
63815: LD_VAR 0 4
63819: PUSH
63820: LD_INT 1
63822: PLUS
63823: ARRAY
63824: ST_TO_ADDR
63825: GO 63956
63827: LD_INT 2
63829: DOUBLE
63830: EQUAL
63831: IFTRUE 63835
63833: GO 63891
63835: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63836: LD_ADDR_VAR 0 9
63840: PUSH
63841: LD_VAR 0 17
63845: PUSH
63846: LD_VAR 0 18
63850: PUSH
63851: LD_VAR 0 19
63855: PUSH
63856: LD_VAR 0 20
63860: PUSH
63861: LD_VAR 0 21
63865: PUSH
63866: LD_VAR 0 22
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: PUSH
63879: LD_VAR 0 4
63883: PUSH
63884: LD_INT 1
63886: PLUS
63887: ARRAY
63888: ST_TO_ADDR
63889: GO 63956
63891: LD_INT 3
63893: DOUBLE
63894: EQUAL
63895: IFTRUE 63899
63897: GO 63955
63899: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63900: LD_ADDR_VAR 0 9
63904: PUSH
63905: LD_VAR 0 23
63909: PUSH
63910: LD_VAR 0 24
63914: PUSH
63915: LD_VAR 0 25
63919: PUSH
63920: LD_VAR 0 26
63924: PUSH
63925: LD_VAR 0 27
63929: PUSH
63930: LD_VAR 0 28
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: PUSH
63943: LD_VAR 0 4
63947: PUSH
63948: LD_INT 1
63950: PLUS
63951: ARRAY
63952: ST_TO_ADDR
63953: GO 63956
63955: POP
63956: GO 64511
63958: LD_INT 2
63960: DOUBLE
63961: EQUAL
63962: IFTRUE 63972
63964: LD_INT 3
63966: DOUBLE
63967: EQUAL
63968: IFTRUE 63972
63970: GO 64028
63972: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63973: LD_ADDR_VAR 0 9
63977: PUSH
63978: LD_VAR 0 29
63982: PUSH
63983: LD_VAR 0 30
63987: PUSH
63988: LD_VAR 0 31
63992: PUSH
63993: LD_VAR 0 32
63997: PUSH
63998: LD_VAR 0 33
64002: PUSH
64003: LD_VAR 0 34
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: PUSH
64016: LD_VAR 0 4
64020: PUSH
64021: LD_INT 1
64023: PLUS
64024: ARRAY
64025: ST_TO_ADDR
64026: GO 64511
64028: LD_INT 16
64030: DOUBLE
64031: EQUAL
64032: IFTRUE 64090
64034: LD_INT 17
64036: DOUBLE
64037: EQUAL
64038: IFTRUE 64090
64040: LD_INT 18
64042: DOUBLE
64043: EQUAL
64044: IFTRUE 64090
64046: LD_INT 19
64048: DOUBLE
64049: EQUAL
64050: IFTRUE 64090
64052: LD_INT 22
64054: DOUBLE
64055: EQUAL
64056: IFTRUE 64090
64058: LD_INT 20
64060: DOUBLE
64061: EQUAL
64062: IFTRUE 64090
64064: LD_INT 21
64066: DOUBLE
64067: EQUAL
64068: IFTRUE 64090
64070: LD_INT 23
64072: DOUBLE
64073: EQUAL
64074: IFTRUE 64090
64076: LD_INT 24
64078: DOUBLE
64079: EQUAL
64080: IFTRUE 64090
64082: LD_INT 25
64084: DOUBLE
64085: EQUAL
64086: IFTRUE 64090
64088: GO 64146
64090: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64091: LD_ADDR_VAR 0 9
64095: PUSH
64096: LD_VAR 0 35
64100: PUSH
64101: LD_VAR 0 36
64105: PUSH
64106: LD_VAR 0 37
64110: PUSH
64111: LD_VAR 0 38
64115: PUSH
64116: LD_VAR 0 39
64120: PUSH
64121: LD_VAR 0 40
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: PUSH
64134: LD_VAR 0 4
64138: PUSH
64139: LD_INT 1
64141: PLUS
64142: ARRAY
64143: ST_TO_ADDR
64144: GO 64511
64146: LD_INT 6
64148: DOUBLE
64149: EQUAL
64150: IFTRUE 64202
64152: LD_INT 7
64154: DOUBLE
64155: EQUAL
64156: IFTRUE 64202
64158: LD_INT 8
64160: DOUBLE
64161: EQUAL
64162: IFTRUE 64202
64164: LD_INT 13
64166: DOUBLE
64167: EQUAL
64168: IFTRUE 64202
64170: LD_INT 12
64172: DOUBLE
64173: EQUAL
64174: IFTRUE 64202
64176: LD_INT 15
64178: DOUBLE
64179: EQUAL
64180: IFTRUE 64202
64182: LD_INT 11
64184: DOUBLE
64185: EQUAL
64186: IFTRUE 64202
64188: LD_INT 14
64190: DOUBLE
64191: EQUAL
64192: IFTRUE 64202
64194: LD_INT 10
64196: DOUBLE
64197: EQUAL
64198: IFTRUE 64202
64200: GO 64258
64202: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64203: LD_ADDR_VAR 0 9
64207: PUSH
64208: LD_VAR 0 41
64212: PUSH
64213: LD_VAR 0 42
64217: PUSH
64218: LD_VAR 0 43
64222: PUSH
64223: LD_VAR 0 44
64227: PUSH
64228: LD_VAR 0 45
64232: PUSH
64233: LD_VAR 0 46
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: PUSH
64246: LD_VAR 0 4
64250: PUSH
64251: LD_INT 1
64253: PLUS
64254: ARRAY
64255: ST_TO_ADDR
64256: GO 64511
64258: LD_INT 36
64260: DOUBLE
64261: EQUAL
64262: IFTRUE 64266
64264: GO 64322
64266: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64267: LD_ADDR_VAR 0 9
64271: PUSH
64272: LD_VAR 0 47
64276: PUSH
64277: LD_VAR 0 48
64281: PUSH
64282: LD_VAR 0 49
64286: PUSH
64287: LD_VAR 0 50
64291: PUSH
64292: LD_VAR 0 51
64296: PUSH
64297: LD_VAR 0 52
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: PUSH
64310: LD_VAR 0 4
64314: PUSH
64315: LD_INT 1
64317: PLUS
64318: ARRAY
64319: ST_TO_ADDR
64320: GO 64511
64322: LD_INT 4
64324: DOUBLE
64325: EQUAL
64326: IFTRUE 64348
64328: LD_INT 5
64330: DOUBLE
64331: EQUAL
64332: IFTRUE 64348
64334: LD_INT 34
64336: DOUBLE
64337: EQUAL
64338: IFTRUE 64348
64340: LD_INT 37
64342: DOUBLE
64343: EQUAL
64344: IFTRUE 64348
64346: GO 64404
64348: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64349: LD_ADDR_VAR 0 9
64353: PUSH
64354: LD_VAR 0 53
64358: PUSH
64359: LD_VAR 0 54
64363: PUSH
64364: LD_VAR 0 55
64368: PUSH
64369: LD_VAR 0 56
64373: PUSH
64374: LD_VAR 0 57
64378: PUSH
64379: LD_VAR 0 58
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: PUSH
64392: LD_VAR 0 4
64396: PUSH
64397: LD_INT 1
64399: PLUS
64400: ARRAY
64401: ST_TO_ADDR
64402: GO 64511
64404: LD_INT 31
64406: DOUBLE
64407: EQUAL
64408: IFTRUE 64454
64410: LD_INT 32
64412: DOUBLE
64413: EQUAL
64414: IFTRUE 64454
64416: LD_INT 33
64418: DOUBLE
64419: EQUAL
64420: IFTRUE 64454
64422: LD_INT 27
64424: DOUBLE
64425: EQUAL
64426: IFTRUE 64454
64428: LD_INT 26
64430: DOUBLE
64431: EQUAL
64432: IFTRUE 64454
64434: LD_INT 28
64436: DOUBLE
64437: EQUAL
64438: IFTRUE 64454
64440: LD_INT 29
64442: DOUBLE
64443: EQUAL
64444: IFTRUE 64454
64446: LD_INT 30
64448: DOUBLE
64449: EQUAL
64450: IFTRUE 64454
64452: GO 64510
64454: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64455: LD_ADDR_VAR 0 9
64459: PUSH
64460: LD_VAR 0 59
64464: PUSH
64465: LD_VAR 0 60
64469: PUSH
64470: LD_VAR 0 61
64474: PUSH
64475: LD_VAR 0 62
64479: PUSH
64480: LD_VAR 0 63
64484: PUSH
64485: LD_VAR 0 64
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: PUSH
64498: LD_VAR 0 4
64502: PUSH
64503: LD_INT 1
64505: PLUS
64506: ARRAY
64507: ST_TO_ADDR
64508: GO 64511
64510: POP
// temp_list2 = [ ] ;
64511: LD_ADDR_VAR 0 10
64515: PUSH
64516: EMPTY
64517: ST_TO_ADDR
// for i in temp_list do
64518: LD_ADDR_VAR 0 8
64522: PUSH
64523: LD_VAR 0 9
64527: PUSH
64528: FOR_IN
64529: IFFALSE 64581
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64531: LD_ADDR_VAR 0 10
64535: PUSH
64536: LD_VAR 0 10
64540: PUSH
64541: LD_VAR 0 8
64545: PUSH
64546: LD_INT 1
64548: ARRAY
64549: PUSH
64550: LD_VAR 0 2
64554: PLUS
64555: PUSH
64556: LD_VAR 0 8
64560: PUSH
64561: LD_INT 2
64563: ARRAY
64564: PUSH
64565: LD_VAR 0 3
64569: PLUS
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: EMPTY
64576: LIST
64577: ADD
64578: ST_TO_ADDR
64579: GO 64528
64581: POP
64582: POP
// result = temp_list2 ;
64583: LD_ADDR_VAR 0 7
64587: PUSH
64588: LD_VAR 0 10
64592: ST_TO_ADDR
// end ;
64593: LD_VAR 0 7
64597: RET
// export function EnemyInRange ( unit , dist ) ; begin
64598: LD_INT 0
64600: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64601: LD_ADDR_VAR 0 3
64605: PUSH
64606: LD_VAR 0 1
64610: PPUSH
64611: CALL_OW 255
64615: PPUSH
64616: LD_VAR 0 1
64620: PPUSH
64621: CALL_OW 250
64625: PPUSH
64626: LD_VAR 0 1
64630: PPUSH
64631: CALL_OW 251
64635: PPUSH
64636: LD_VAR 0 2
64640: PPUSH
64641: CALL 37994 0 4
64645: PUSH
64646: LD_INT 4
64648: ARRAY
64649: ST_TO_ADDR
// end ;
64650: LD_VAR 0 3
64654: RET
// export function PlayerSeeMe ( unit ) ; begin
64655: LD_INT 0
64657: PPUSH
// result := See ( your_side , unit ) ;
64658: LD_ADDR_VAR 0 2
64662: PUSH
64663: LD_OWVAR 2
64667: PPUSH
64668: LD_VAR 0 1
64672: PPUSH
64673: CALL_OW 292
64677: ST_TO_ADDR
// end ;
64678: LD_VAR 0 2
64682: RET
// export function ReverseDir ( unit ) ; begin
64683: LD_INT 0
64685: PPUSH
// if not unit then
64686: LD_VAR 0 1
64690: NOT
64691: IFFALSE 64695
// exit ;
64693: GO 64718
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64695: LD_ADDR_VAR 0 2
64699: PUSH
64700: LD_VAR 0 1
64704: PPUSH
64705: CALL_OW 254
64709: PUSH
64710: LD_INT 3
64712: PLUS
64713: PUSH
64714: LD_INT 6
64716: MOD
64717: ST_TO_ADDR
// end ;
64718: LD_VAR 0 2
64722: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64723: LD_INT 0
64725: PPUSH
64726: PPUSH
64727: PPUSH
64728: PPUSH
64729: PPUSH
// if not hexes then
64730: LD_VAR 0 2
64734: NOT
64735: IFFALSE 64739
// exit ;
64737: GO 64887
// dist := 9999 ;
64739: LD_ADDR_VAR 0 5
64743: PUSH
64744: LD_INT 9999
64746: ST_TO_ADDR
// for i = 1 to hexes do
64747: LD_ADDR_VAR 0 4
64751: PUSH
64752: DOUBLE
64753: LD_INT 1
64755: DEC
64756: ST_TO_ADDR
64757: LD_VAR 0 2
64761: PUSH
64762: FOR_TO
64763: IFFALSE 64875
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64765: LD_VAR 0 1
64769: PPUSH
64770: LD_VAR 0 2
64774: PUSH
64775: LD_VAR 0 4
64779: ARRAY
64780: PUSH
64781: LD_INT 1
64783: ARRAY
64784: PPUSH
64785: LD_VAR 0 2
64789: PUSH
64790: LD_VAR 0 4
64794: ARRAY
64795: PUSH
64796: LD_INT 2
64798: ARRAY
64799: PPUSH
64800: CALL_OW 297
64804: PUSH
64805: LD_VAR 0 5
64809: LESS
64810: IFFALSE 64873
// begin hex := hexes [ i ] ;
64812: LD_ADDR_VAR 0 7
64816: PUSH
64817: LD_VAR 0 2
64821: PUSH
64822: LD_VAR 0 4
64826: ARRAY
64827: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64828: LD_ADDR_VAR 0 5
64832: PUSH
64833: LD_VAR 0 1
64837: PPUSH
64838: LD_VAR 0 2
64842: PUSH
64843: LD_VAR 0 4
64847: ARRAY
64848: PUSH
64849: LD_INT 1
64851: ARRAY
64852: PPUSH
64853: LD_VAR 0 2
64857: PUSH
64858: LD_VAR 0 4
64862: ARRAY
64863: PUSH
64864: LD_INT 2
64866: ARRAY
64867: PPUSH
64868: CALL_OW 297
64872: ST_TO_ADDR
// end ; end ;
64873: GO 64762
64875: POP
64876: POP
// result := hex ;
64877: LD_ADDR_VAR 0 3
64881: PUSH
64882: LD_VAR 0 7
64886: ST_TO_ADDR
// end ;
64887: LD_VAR 0 3
64891: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64892: LD_INT 0
64894: PPUSH
64895: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64896: LD_VAR 0 1
64900: NOT
64901: PUSH
64902: LD_VAR 0 1
64906: PUSH
64907: LD_INT 21
64909: PUSH
64910: LD_INT 2
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 23
64919: PUSH
64920: LD_INT 2
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PPUSH
64931: CALL_OW 69
64935: IN
64936: NOT
64937: OR
64938: IFFALSE 64942
// exit ;
64940: GO 64989
// for i = 1 to 3 do
64942: LD_ADDR_VAR 0 3
64946: PUSH
64947: DOUBLE
64948: LD_INT 1
64950: DEC
64951: ST_TO_ADDR
64952: LD_INT 3
64954: PUSH
64955: FOR_TO
64956: IFFALSE 64987
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64958: LD_VAR 0 1
64962: PPUSH
64963: CALL_OW 250
64967: PPUSH
64968: LD_VAR 0 1
64972: PPUSH
64973: CALL_OW 251
64977: PPUSH
64978: LD_INT 1
64980: PPUSH
64981: CALL_OW 453
64985: GO 64955
64987: POP
64988: POP
// end ;
64989: LD_VAR 0 2
64993: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64994: LD_INT 0
64996: PPUSH
64997: PPUSH
64998: PPUSH
64999: PPUSH
65000: PPUSH
65001: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65002: LD_VAR 0 1
65006: NOT
65007: PUSH
65008: LD_VAR 0 2
65012: NOT
65013: OR
65014: PUSH
65015: LD_VAR 0 1
65019: PPUSH
65020: CALL_OW 314
65024: OR
65025: IFFALSE 65029
// exit ;
65027: GO 65470
// x := GetX ( enemy_unit ) ;
65029: LD_ADDR_VAR 0 7
65033: PUSH
65034: LD_VAR 0 2
65038: PPUSH
65039: CALL_OW 250
65043: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65044: LD_ADDR_VAR 0 8
65048: PUSH
65049: LD_VAR 0 2
65053: PPUSH
65054: CALL_OW 251
65058: ST_TO_ADDR
// if not x or not y then
65059: LD_VAR 0 7
65063: NOT
65064: PUSH
65065: LD_VAR 0 8
65069: NOT
65070: OR
65071: IFFALSE 65075
// exit ;
65073: GO 65470
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65075: LD_ADDR_VAR 0 6
65079: PUSH
65080: LD_VAR 0 7
65084: PPUSH
65085: LD_INT 0
65087: PPUSH
65088: LD_INT 4
65090: PPUSH
65091: CALL_OW 272
65095: PUSH
65096: LD_VAR 0 8
65100: PPUSH
65101: LD_INT 0
65103: PPUSH
65104: LD_INT 4
65106: PPUSH
65107: CALL_OW 273
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_VAR 0 7
65120: PPUSH
65121: LD_INT 1
65123: PPUSH
65124: LD_INT 4
65126: PPUSH
65127: CALL_OW 272
65131: PUSH
65132: LD_VAR 0 8
65136: PPUSH
65137: LD_INT 1
65139: PPUSH
65140: LD_INT 4
65142: PPUSH
65143: CALL_OW 273
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_VAR 0 7
65156: PPUSH
65157: LD_INT 2
65159: PPUSH
65160: LD_INT 4
65162: PPUSH
65163: CALL_OW 272
65167: PUSH
65168: LD_VAR 0 8
65172: PPUSH
65173: LD_INT 2
65175: PPUSH
65176: LD_INT 4
65178: PPUSH
65179: CALL_OW 273
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_VAR 0 7
65192: PPUSH
65193: LD_INT 3
65195: PPUSH
65196: LD_INT 4
65198: PPUSH
65199: CALL_OW 272
65203: PUSH
65204: LD_VAR 0 8
65208: PPUSH
65209: LD_INT 3
65211: PPUSH
65212: LD_INT 4
65214: PPUSH
65215: CALL_OW 273
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_VAR 0 7
65228: PPUSH
65229: LD_INT 4
65231: PPUSH
65232: LD_INT 4
65234: PPUSH
65235: CALL_OW 272
65239: PUSH
65240: LD_VAR 0 8
65244: PPUSH
65245: LD_INT 4
65247: PPUSH
65248: LD_INT 4
65250: PPUSH
65251: CALL_OW 273
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_VAR 0 7
65264: PPUSH
65265: LD_INT 5
65267: PPUSH
65268: LD_INT 4
65270: PPUSH
65271: CALL_OW 272
65275: PUSH
65276: LD_VAR 0 8
65280: PPUSH
65281: LD_INT 5
65283: PPUSH
65284: LD_INT 4
65286: PPUSH
65287: CALL_OW 273
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: ST_TO_ADDR
// for i = tmp downto 1 do
65304: LD_ADDR_VAR 0 4
65308: PUSH
65309: DOUBLE
65310: LD_VAR 0 6
65314: INC
65315: ST_TO_ADDR
65316: LD_INT 1
65318: PUSH
65319: FOR_DOWNTO
65320: IFFALSE 65421
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65322: LD_VAR 0 6
65326: PUSH
65327: LD_VAR 0 4
65331: ARRAY
65332: PUSH
65333: LD_INT 1
65335: ARRAY
65336: PPUSH
65337: LD_VAR 0 6
65341: PUSH
65342: LD_VAR 0 4
65346: ARRAY
65347: PUSH
65348: LD_INT 2
65350: ARRAY
65351: PPUSH
65352: CALL_OW 488
65356: NOT
65357: PUSH
65358: LD_VAR 0 6
65362: PUSH
65363: LD_VAR 0 4
65367: ARRAY
65368: PUSH
65369: LD_INT 1
65371: ARRAY
65372: PPUSH
65373: LD_VAR 0 6
65377: PUSH
65378: LD_VAR 0 4
65382: ARRAY
65383: PUSH
65384: LD_INT 2
65386: ARRAY
65387: PPUSH
65388: CALL_OW 428
65392: PUSH
65393: LD_INT 0
65395: NONEQUAL
65396: OR
65397: IFFALSE 65419
// tmp := Delete ( tmp , i ) ;
65399: LD_ADDR_VAR 0 6
65403: PUSH
65404: LD_VAR 0 6
65408: PPUSH
65409: LD_VAR 0 4
65413: PPUSH
65414: CALL_OW 3
65418: ST_TO_ADDR
65419: GO 65319
65421: POP
65422: POP
// j := GetClosestHex ( unit , tmp ) ;
65423: LD_ADDR_VAR 0 5
65427: PUSH
65428: LD_VAR 0 1
65432: PPUSH
65433: LD_VAR 0 6
65437: PPUSH
65438: CALL 64723 0 2
65442: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65443: LD_VAR 0 1
65447: PPUSH
65448: LD_VAR 0 5
65452: PUSH
65453: LD_INT 1
65455: ARRAY
65456: PPUSH
65457: LD_VAR 0 5
65461: PUSH
65462: LD_INT 2
65464: ARRAY
65465: PPUSH
65466: CALL_OW 111
// end ;
65470: LD_VAR 0 3
65474: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65475: LD_INT 0
65477: PPUSH
65478: PPUSH
65479: PPUSH
// uc_side = 0 ;
65480: LD_ADDR_OWVAR 20
65484: PUSH
65485: LD_INT 0
65487: ST_TO_ADDR
// uc_nation = 0 ;
65488: LD_ADDR_OWVAR 21
65492: PUSH
65493: LD_INT 0
65495: ST_TO_ADDR
// InitHc_All ( ) ;
65496: CALL_OW 584
// InitVc ;
65500: CALL_OW 20
// if mastodonts then
65504: LD_VAR 0 6
65508: IFFALSE 65575
// for i = 1 to mastodonts do
65510: LD_ADDR_VAR 0 11
65514: PUSH
65515: DOUBLE
65516: LD_INT 1
65518: DEC
65519: ST_TO_ADDR
65520: LD_VAR 0 6
65524: PUSH
65525: FOR_TO
65526: IFFALSE 65573
// begin vc_chassis := 31 ;
65528: LD_ADDR_OWVAR 37
65532: PUSH
65533: LD_INT 31
65535: ST_TO_ADDR
// vc_control := control_rider ;
65536: LD_ADDR_OWVAR 38
65540: PUSH
65541: LD_INT 4
65543: ST_TO_ADDR
// animal := CreateVehicle ;
65544: LD_ADDR_VAR 0 12
65548: PUSH
65549: CALL_OW 45
65553: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65554: LD_VAR 0 12
65558: PPUSH
65559: LD_VAR 0 8
65563: PPUSH
65564: LD_INT 0
65566: PPUSH
65567: CALL 67710 0 3
// end ;
65571: GO 65525
65573: POP
65574: POP
// if horses then
65575: LD_VAR 0 5
65579: IFFALSE 65646
// for i = 1 to horses do
65581: LD_ADDR_VAR 0 11
65585: PUSH
65586: DOUBLE
65587: LD_INT 1
65589: DEC
65590: ST_TO_ADDR
65591: LD_VAR 0 5
65595: PUSH
65596: FOR_TO
65597: IFFALSE 65644
// begin hc_class := 21 ;
65599: LD_ADDR_OWVAR 28
65603: PUSH
65604: LD_INT 21
65606: ST_TO_ADDR
// hc_gallery :=  ;
65607: LD_ADDR_OWVAR 33
65611: PUSH
65612: LD_STRING 
65614: ST_TO_ADDR
// animal := CreateHuman ;
65615: LD_ADDR_VAR 0 12
65619: PUSH
65620: CALL_OW 44
65624: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65625: LD_VAR 0 12
65629: PPUSH
65630: LD_VAR 0 8
65634: PPUSH
65635: LD_INT 0
65637: PPUSH
65638: CALL 67710 0 3
// end ;
65642: GO 65596
65644: POP
65645: POP
// if birds then
65646: LD_VAR 0 1
65650: IFFALSE 65717
// for i = 1 to birds do
65652: LD_ADDR_VAR 0 11
65656: PUSH
65657: DOUBLE
65658: LD_INT 1
65660: DEC
65661: ST_TO_ADDR
65662: LD_VAR 0 1
65666: PUSH
65667: FOR_TO
65668: IFFALSE 65715
// begin hc_class = 18 ;
65670: LD_ADDR_OWVAR 28
65674: PUSH
65675: LD_INT 18
65677: ST_TO_ADDR
// hc_gallery =  ;
65678: LD_ADDR_OWVAR 33
65682: PUSH
65683: LD_STRING 
65685: ST_TO_ADDR
// animal := CreateHuman ;
65686: LD_ADDR_VAR 0 12
65690: PUSH
65691: CALL_OW 44
65695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65696: LD_VAR 0 12
65700: PPUSH
65701: LD_VAR 0 8
65705: PPUSH
65706: LD_INT 0
65708: PPUSH
65709: CALL 67710 0 3
// end ;
65713: GO 65667
65715: POP
65716: POP
// if tigers then
65717: LD_VAR 0 2
65721: IFFALSE 65805
// for i = 1 to tigers do
65723: LD_ADDR_VAR 0 11
65727: PUSH
65728: DOUBLE
65729: LD_INT 1
65731: DEC
65732: ST_TO_ADDR
65733: LD_VAR 0 2
65737: PUSH
65738: FOR_TO
65739: IFFALSE 65803
// begin hc_class = class_tiger ;
65741: LD_ADDR_OWVAR 28
65745: PUSH
65746: LD_INT 14
65748: ST_TO_ADDR
// hc_gallery =  ;
65749: LD_ADDR_OWVAR 33
65753: PUSH
65754: LD_STRING 
65756: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65757: LD_ADDR_OWVAR 35
65761: PUSH
65762: LD_INT 7
65764: NEG
65765: PPUSH
65766: LD_INT 7
65768: PPUSH
65769: CALL_OW 12
65773: ST_TO_ADDR
// animal := CreateHuman ;
65774: LD_ADDR_VAR 0 12
65778: PUSH
65779: CALL_OW 44
65783: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65784: LD_VAR 0 12
65788: PPUSH
65789: LD_VAR 0 8
65793: PPUSH
65794: LD_INT 0
65796: PPUSH
65797: CALL 67710 0 3
// end ;
65801: GO 65738
65803: POP
65804: POP
// if apemans then
65805: LD_VAR 0 3
65809: IFFALSE 65932
// for i = 1 to apemans do
65811: LD_ADDR_VAR 0 11
65815: PUSH
65816: DOUBLE
65817: LD_INT 1
65819: DEC
65820: ST_TO_ADDR
65821: LD_VAR 0 3
65825: PUSH
65826: FOR_TO
65827: IFFALSE 65930
// begin hc_class = class_apeman ;
65829: LD_ADDR_OWVAR 28
65833: PUSH
65834: LD_INT 12
65836: ST_TO_ADDR
// hc_gallery =  ;
65837: LD_ADDR_OWVAR 33
65841: PUSH
65842: LD_STRING 
65844: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65845: LD_ADDR_OWVAR 35
65849: PUSH
65850: LD_INT 2
65852: NEG
65853: PPUSH
65854: LD_INT 2
65856: PPUSH
65857: CALL_OW 12
65861: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65862: LD_ADDR_OWVAR 31
65866: PUSH
65867: LD_INT 1
65869: PPUSH
65870: LD_INT 3
65872: PPUSH
65873: CALL_OW 12
65877: PUSH
65878: LD_INT 1
65880: PPUSH
65881: LD_INT 3
65883: PPUSH
65884: CALL_OW 12
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: ST_TO_ADDR
// animal := CreateHuman ;
65901: LD_ADDR_VAR 0 12
65905: PUSH
65906: CALL_OW 44
65910: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65911: LD_VAR 0 12
65915: PPUSH
65916: LD_VAR 0 8
65920: PPUSH
65921: LD_INT 0
65923: PPUSH
65924: CALL 67710 0 3
// end ;
65928: GO 65826
65930: POP
65931: POP
// if enchidnas then
65932: LD_VAR 0 4
65936: IFFALSE 66003
// for i = 1 to enchidnas do
65938: LD_ADDR_VAR 0 11
65942: PUSH
65943: DOUBLE
65944: LD_INT 1
65946: DEC
65947: ST_TO_ADDR
65948: LD_VAR 0 4
65952: PUSH
65953: FOR_TO
65954: IFFALSE 66001
// begin hc_class = 13 ;
65956: LD_ADDR_OWVAR 28
65960: PUSH
65961: LD_INT 13
65963: ST_TO_ADDR
// hc_gallery =  ;
65964: LD_ADDR_OWVAR 33
65968: PUSH
65969: LD_STRING 
65971: ST_TO_ADDR
// animal := CreateHuman ;
65972: LD_ADDR_VAR 0 12
65976: PUSH
65977: CALL_OW 44
65981: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65982: LD_VAR 0 12
65986: PPUSH
65987: LD_VAR 0 8
65991: PPUSH
65992: LD_INT 0
65994: PPUSH
65995: CALL 67710 0 3
// end ;
65999: GO 65953
66001: POP
66002: POP
// if fishes then
66003: LD_VAR 0 7
66007: IFFALSE 66074
// for i = 1 to fishes do
66009: LD_ADDR_VAR 0 11
66013: PUSH
66014: DOUBLE
66015: LD_INT 1
66017: DEC
66018: ST_TO_ADDR
66019: LD_VAR 0 7
66023: PUSH
66024: FOR_TO
66025: IFFALSE 66072
// begin hc_class = 20 ;
66027: LD_ADDR_OWVAR 28
66031: PUSH
66032: LD_INT 20
66034: ST_TO_ADDR
// hc_gallery =  ;
66035: LD_ADDR_OWVAR 33
66039: PUSH
66040: LD_STRING 
66042: ST_TO_ADDR
// animal := CreateHuman ;
66043: LD_ADDR_VAR 0 12
66047: PUSH
66048: CALL_OW 44
66052: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66053: LD_VAR 0 12
66057: PPUSH
66058: LD_VAR 0 9
66062: PPUSH
66063: LD_INT 0
66065: PPUSH
66066: CALL 67710 0 3
// end ;
66070: GO 66024
66072: POP
66073: POP
// end ;
66074: LD_VAR 0 10
66078: RET
// export function WantHeal ( sci , unit ) ; begin
66079: LD_INT 0
66081: PPUSH
// if GetTaskList ( sci ) > 0 then
66082: LD_VAR 0 1
66086: PPUSH
66087: CALL_OW 437
66091: PUSH
66092: LD_INT 0
66094: GREATER
66095: IFFALSE 66165
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66097: LD_VAR 0 1
66101: PPUSH
66102: CALL_OW 437
66106: PUSH
66107: LD_INT 1
66109: ARRAY
66110: PUSH
66111: LD_INT 1
66113: ARRAY
66114: PUSH
66115: LD_STRING l
66117: EQUAL
66118: PUSH
66119: LD_VAR 0 1
66123: PPUSH
66124: CALL_OW 437
66128: PUSH
66129: LD_INT 1
66131: ARRAY
66132: PUSH
66133: LD_INT 4
66135: ARRAY
66136: PUSH
66137: LD_VAR 0 2
66141: EQUAL
66142: AND
66143: IFFALSE 66155
// result := true else
66145: LD_ADDR_VAR 0 3
66149: PUSH
66150: LD_INT 1
66152: ST_TO_ADDR
66153: GO 66163
// result := false ;
66155: LD_ADDR_VAR 0 3
66159: PUSH
66160: LD_INT 0
66162: ST_TO_ADDR
// end else
66163: GO 66173
// result := false ;
66165: LD_ADDR_VAR 0 3
66169: PUSH
66170: LD_INT 0
66172: ST_TO_ADDR
// end ;
66173: LD_VAR 0 3
66177: RET
// export function HealTarget ( sci ) ; begin
66178: LD_INT 0
66180: PPUSH
// if not sci then
66181: LD_VAR 0 1
66185: NOT
66186: IFFALSE 66190
// exit ;
66188: GO 66255
// result := 0 ;
66190: LD_ADDR_VAR 0 2
66194: PUSH
66195: LD_INT 0
66197: ST_TO_ADDR
// if GetTaskList ( sci ) then
66198: LD_VAR 0 1
66202: PPUSH
66203: CALL_OW 437
66207: IFFALSE 66255
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66209: LD_VAR 0 1
66213: PPUSH
66214: CALL_OW 437
66218: PUSH
66219: LD_INT 1
66221: ARRAY
66222: PUSH
66223: LD_INT 1
66225: ARRAY
66226: PUSH
66227: LD_STRING l
66229: EQUAL
66230: IFFALSE 66255
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66232: LD_ADDR_VAR 0 2
66236: PUSH
66237: LD_VAR 0 1
66241: PPUSH
66242: CALL_OW 437
66246: PUSH
66247: LD_INT 1
66249: ARRAY
66250: PUSH
66251: LD_INT 4
66253: ARRAY
66254: ST_TO_ADDR
// end ;
66255: LD_VAR 0 2
66259: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66260: LD_INT 0
66262: PPUSH
66263: PPUSH
66264: PPUSH
66265: PPUSH
// if not base_units then
66266: LD_VAR 0 1
66270: NOT
66271: IFFALSE 66275
// exit ;
66273: GO 66362
// result := false ;
66275: LD_ADDR_VAR 0 2
66279: PUSH
66280: LD_INT 0
66282: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66283: LD_ADDR_VAR 0 5
66287: PUSH
66288: LD_VAR 0 1
66292: PPUSH
66293: LD_INT 21
66295: PUSH
66296: LD_INT 3
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PPUSH
66303: CALL_OW 72
66307: ST_TO_ADDR
// if not tmp then
66308: LD_VAR 0 5
66312: NOT
66313: IFFALSE 66317
// exit ;
66315: GO 66362
// for i in tmp do
66317: LD_ADDR_VAR 0 3
66321: PUSH
66322: LD_VAR 0 5
66326: PUSH
66327: FOR_IN
66328: IFFALSE 66360
// begin result := EnemyInRange ( i , 22 ) ;
66330: LD_ADDR_VAR 0 2
66334: PUSH
66335: LD_VAR 0 3
66339: PPUSH
66340: LD_INT 22
66342: PPUSH
66343: CALL 64598 0 2
66347: ST_TO_ADDR
// if result then
66348: LD_VAR 0 2
66352: IFFALSE 66358
// exit ;
66354: POP
66355: POP
66356: GO 66362
// end ;
66358: GO 66327
66360: POP
66361: POP
// end ;
66362: LD_VAR 0 2
66366: RET
// export function FilterByTag ( units , tag ) ; begin
66367: LD_INT 0
66369: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66370: LD_ADDR_VAR 0 3
66374: PUSH
66375: LD_VAR 0 1
66379: PPUSH
66380: LD_INT 120
66382: PUSH
66383: LD_VAR 0 2
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PPUSH
66392: CALL_OW 72
66396: ST_TO_ADDR
// end ;
66397: LD_VAR 0 3
66401: RET
// export function IsDriver ( un ) ; begin
66402: LD_INT 0
66404: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66405: LD_ADDR_VAR 0 2
66409: PUSH
66410: LD_VAR 0 1
66414: PUSH
66415: LD_INT 55
66417: PUSH
66418: EMPTY
66419: LIST
66420: PPUSH
66421: CALL_OW 69
66425: IN
66426: ST_TO_ADDR
// end ;
66427: LD_VAR 0 2
66431: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66432: LD_INT 0
66434: PPUSH
66435: PPUSH
// list := [ ] ;
66436: LD_ADDR_VAR 0 5
66440: PUSH
66441: EMPTY
66442: ST_TO_ADDR
// case d of 0 :
66443: LD_VAR 0 3
66447: PUSH
66448: LD_INT 0
66450: DOUBLE
66451: EQUAL
66452: IFTRUE 66456
66454: GO 66589
66456: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66457: LD_ADDR_VAR 0 5
66461: PUSH
66462: LD_VAR 0 1
66466: PUSH
66467: LD_INT 4
66469: MINUS
66470: PUSH
66471: LD_VAR 0 2
66475: PUSH
66476: LD_INT 4
66478: MINUS
66479: PUSH
66480: LD_INT 2
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: LIST
66487: PUSH
66488: LD_VAR 0 1
66492: PUSH
66493: LD_INT 3
66495: MINUS
66496: PUSH
66497: LD_VAR 0 2
66501: PUSH
66502: LD_INT 1
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: LIST
66509: PUSH
66510: LD_VAR 0 1
66514: PUSH
66515: LD_INT 4
66517: PLUS
66518: PUSH
66519: LD_VAR 0 2
66523: PUSH
66524: LD_INT 4
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: PUSH
66532: LD_VAR 0 1
66536: PUSH
66537: LD_INT 3
66539: PLUS
66540: PUSH
66541: LD_VAR 0 2
66545: PUSH
66546: LD_INT 3
66548: PLUS
66549: PUSH
66550: LD_INT 5
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: LIST
66557: PUSH
66558: LD_VAR 0 1
66562: PUSH
66563: LD_VAR 0 2
66567: PUSH
66568: LD_INT 4
66570: PLUS
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: LIST
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: ST_TO_ADDR
// end ; 1 :
66587: GO 67287
66589: LD_INT 1
66591: DOUBLE
66592: EQUAL
66593: IFTRUE 66597
66595: GO 66730
66597: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66598: LD_ADDR_VAR 0 5
66602: PUSH
66603: LD_VAR 0 1
66607: PUSH
66608: LD_VAR 0 2
66612: PUSH
66613: LD_INT 4
66615: MINUS
66616: PUSH
66617: LD_INT 3
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: LIST
66624: PUSH
66625: LD_VAR 0 1
66629: PUSH
66630: LD_INT 3
66632: MINUS
66633: PUSH
66634: LD_VAR 0 2
66638: PUSH
66639: LD_INT 3
66641: MINUS
66642: PUSH
66643: LD_INT 2
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: LIST
66650: PUSH
66651: LD_VAR 0 1
66655: PUSH
66656: LD_INT 4
66658: MINUS
66659: PUSH
66660: LD_VAR 0 2
66664: PUSH
66665: LD_INT 1
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: LIST
66672: PUSH
66673: LD_VAR 0 1
66677: PUSH
66678: LD_VAR 0 2
66682: PUSH
66683: LD_INT 3
66685: PLUS
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: LIST
66694: PUSH
66695: LD_VAR 0 1
66699: PUSH
66700: LD_INT 4
66702: PLUS
66703: PUSH
66704: LD_VAR 0 2
66708: PUSH
66709: LD_INT 4
66711: PLUS
66712: PUSH
66713: LD_INT 5
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: LIST
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// end ; 2 :
66728: GO 67287
66730: LD_INT 2
66732: DOUBLE
66733: EQUAL
66734: IFTRUE 66738
66736: GO 66867
66738: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66739: LD_ADDR_VAR 0 5
66743: PUSH
66744: LD_VAR 0 1
66748: PUSH
66749: LD_VAR 0 2
66753: PUSH
66754: LD_INT 3
66756: MINUS
66757: PUSH
66758: LD_INT 3
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: LIST
66765: PUSH
66766: LD_VAR 0 1
66770: PUSH
66771: LD_INT 4
66773: PLUS
66774: PUSH
66775: LD_VAR 0 2
66779: PUSH
66780: LD_INT 4
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: LIST
66787: PUSH
66788: LD_VAR 0 1
66792: PUSH
66793: LD_VAR 0 2
66797: PUSH
66798: LD_INT 4
66800: PLUS
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: LIST
66809: PUSH
66810: LD_VAR 0 1
66814: PUSH
66815: LD_INT 3
66817: MINUS
66818: PUSH
66819: LD_VAR 0 2
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: LIST
66831: PUSH
66832: LD_VAR 0 1
66836: PUSH
66837: LD_INT 4
66839: MINUS
66840: PUSH
66841: LD_VAR 0 2
66845: PUSH
66846: LD_INT 4
66848: MINUS
66849: PUSH
66850: LD_INT 2
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: LIST
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: ST_TO_ADDR
// end ; 3 :
66865: GO 67287
66867: LD_INT 3
66869: DOUBLE
66870: EQUAL
66871: IFTRUE 66875
66873: GO 67008
66875: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66876: LD_ADDR_VAR 0 5
66880: PUSH
66881: LD_VAR 0 1
66885: PUSH
66886: LD_INT 3
66888: PLUS
66889: PUSH
66890: LD_VAR 0 2
66894: PUSH
66895: LD_INT 4
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: LIST
66902: PUSH
66903: LD_VAR 0 1
66907: PUSH
66908: LD_INT 4
66910: PLUS
66911: PUSH
66912: LD_VAR 0 2
66916: PUSH
66917: LD_INT 4
66919: PLUS
66920: PUSH
66921: LD_INT 5
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: LIST
66928: PUSH
66929: LD_VAR 0 1
66933: PUSH
66934: LD_INT 4
66936: MINUS
66937: PUSH
66938: LD_VAR 0 2
66942: PUSH
66943: LD_INT 1
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: LIST
66950: PUSH
66951: LD_VAR 0 1
66955: PUSH
66956: LD_VAR 0 2
66960: PUSH
66961: LD_INT 4
66963: MINUS
66964: PUSH
66965: LD_INT 3
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: LIST
66972: PUSH
66973: LD_VAR 0 1
66977: PUSH
66978: LD_INT 3
66980: MINUS
66981: PUSH
66982: LD_VAR 0 2
66986: PUSH
66987: LD_INT 3
66989: MINUS
66990: PUSH
66991: LD_INT 2
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: LIST
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: ST_TO_ADDR
// end ; 4 :
67006: GO 67287
67008: LD_INT 4
67010: DOUBLE
67011: EQUAL
67012: IFTRUE 67016
67014: GO 67149
67016: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67017: LD_ADDR_VAR 0 5
67021: PUSH
67022: LD_VAR 0 1
67026: PUSH
67027: LD_VAR 0 2
67031: PUSH
67032: LD_INT 4
67034: PLUS
67035: PUSH
67036: LD_INT 0
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: LIST
67043: PUSH
67044: LD_VAR 0 1
67048: PUSH
67049: LD_INT 3
67051: PLUS
67052: PUSH
67053: LD_VAR 0 2
67057: PUSH
67058: LD_INT 3
67060: PLUS
67061: PUSH
67062: LD_INT 5
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: LIST
67069: PUSH
67070: LD_VAR 0 1
67074: PUSH
67075: LD_INT 4
67077: PLUS
67078: PUSH
67079: LD_VAR 0 2
67083: PUSH
67084: LD_INT 4
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: LIST
67091: PUSH
67092: LD_VAR 0 1
67096: PUSH
67097: LD_VAR 0 2
67101: PUSH
67102: LD_INT 3
67104: MINUS
67105: PUSH
67106: LD_INT 3
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: LIST
67113: PUSH
67114: LD_VAR 0 1
67118: PUSH
67119: LD_INT 4
67121: MINUS
67122: PUSH
67123: LD_VAR 0 2
67127: PUSH
67128: LD_INT 4
67130: MINUS
67131: PUSH
67132: LD_INT 2
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: LIST
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: ST_TO_ADDR
// end ; 5 :
67147: GO 67287
67149: LD_INT 5
67151: DOUBLE
67152: EQUAL
67153: IFTRUE 67157
67155: GO 67286
67157: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67158: LD_ADDR_VAR 0 5
67162: PUSH
67163: LD_VAR 0 1
67167: PUSH
67168: LD_INT 4
67170: MINUS
67171: PUSH
67172: LD_VAR 0 2
67176: PUSH
67177: LD_INT 1
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: LIST
67184: PUSH
67185: LD_VAR 0 1
67189: PUSH
67190: LD_VAR 0 2
67194: PUSH
67195: LD_INT 4
67197: MINUS
67198: PUSH
67199: LD_INT 3
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: LIST
67206: PUSH
67207: LD_VAR 0 1
67211: PUSH
67212: LD_INT 4
67214: PLUS
67215: PUSH
67216: LD_VAR 0 2
67220: PUSH
67221: LD_INT 4
67223: PLUS
67224: PUSH
67225: LD_INT 5
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: LIST
67232: PUSH
67233: LD_VAR 0 1
67237: PUSH
67238: LD_INT 3
67240: PLUS
67241: PUSH
67242: LD_VAR 0 2
67246: PUSH
67247: LD_INT 4
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: LIST
67254: PUSH
67255: LD_VAR 0 1
67259: PUSH
67260: LD_VAR 0 2
67264: PUSH
67265: LD_INT 3
67267: PLUS
67268: PUSH
67269: LD_INT 0
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: LIST
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: ST_TO_ADDR
// end ; end ;
67284: GO 67287
67286: POP
// result := list ;
67287: LD_ADDR_VAR 0 4
67291: PUSH
67292: LD_VAR 0 5
67296: ST_TO_ADDR
// end ;
67297: LD_VAR 0 4
67301: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67302: LD_INT 0
67304: PPUSH
67305: PPUSH
67306: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67307: LD_VAR 0 1
67311: NOT
67312: PUSH
67313: LD_VAR 0 2
67317: PUSH
67318: LD_INT 1
67320: PUSH
67321: LD_INT 2
67323: PUSH
67324: LD_INT 3
67326: PUSH
67327: LD_INT 4
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: IN
67336: NOT
67337: OR
67338: IFFALSE 67342
// exit ;
67340: GO 67434
// tmp := [ ] ;
67342: LD_ADDR_VAR 0 5
67346: PUSH
67347: EMPTY
67348: ST_TO_ADDR
// for i in units do
67349: LD_ADDR_VAR 0 4
67353: PUSH
67354: LD_VAR 0 1
67358: PUSH
67359: FOR_IN
67360: IFFALSE 67403
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67362: LD_ADDR_VAR 0 5
67366: PUSH
67367: LD_VAR 0 5
67371: PPUSH
67372: LD_VAR 0 5
67376: PUSH
67377: LD_INT 1
67379: PLUS
67380: PPUSH
67381: LD_VAR 0 4
67385: PPUSH
67386: LD_VAR 0 2
67390: PPUSH
67391: CALL_OW 259
67395: PPUSH
67396: CALL_OW 2
67400: ST_TO_ADDR
67401: GO 67359
67403: POP
67404: POP
// if not tmp then
67405: LD_VAR 0 5
67409: NOT
67410: IFFALSE 67414
// exit ;
67412: GO 67434
// result := SortListByListDesc ( units , tmp ) ;
67414: LD_ADDR_VAR 0 3
67418: PUSH
67419: LD_VAR 0 1
67423: PPUSH
67424: LD_VAR 0 5
67428: PPUSH
67429: CALL_OW 77
67433: ST_TO_ADDR
// end ;
67434: LD_VAR 0 3
67438: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67439: LD_INT 0
67441: PPUSH
67442: PPUSH
67443: PPUSH
// result := false ;
67444: LD_ADDR_VAR 0 3
67448: PUSH
67449: LD_INT 0
67451: ST_TO_ADDR
// x := GetX ( building ) ;
67452: LD_ADDR_VAR 0 4
67456: PUSH
67457: LD_VAR 0 2
67461: PPUSH
67462: CALL_OW 250
67466: ST_TO_ADDR
// y := GetY ( building ) ;
67467: LD_ADDR_VAR 0 5
67471: PUSH
67472: LD_VAR 0 2
67476: PPUSH
67477: CALL_OW 251
67481: ST_TO_ADDR
// if not building or not x or not y then
67482: LD_VAR 0 2
67486: NOT
67487: PUSH
67488: LD_VAR 0 4
67492: NOT
67493: OR
67494: PUSH
67495: LD_VAR 0 5
67499: NOT
67500: OR
67501: IFFALSE 67505
// exit ;
67503: GO 67597
// if GetTaskList ( unit ) then
67505: LD_VAR 0 1
67509: PPUSH
67510: CALL_OW 437
67514: IFFALSE 67597
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67516: LD_STRING e
67518: PUSH
67519: LD_VAR 0 1
67523: PPUSH
67524: CALL_OW 437
67528: PUSH
67529: LD_INT 1
67531: ARRAY
67532: PUSH
67533: LD_INT 1
67535: ARRAY
67536: EQUAL
67537: PUSH
67538: LD_VAR 0 4
67542: PUSH
67543: LD_VAR 0 1
67547: PPUSH
67548: CALL_OW 437
67552: PUSH
67553: LD_INT 1
67555: ARRAY
67556: PUSH
67557: LD_INT 2
67559: ARRAY
67560: EQUAL
67561: AND
67562: PUSH
67563: LD_VAR 0 5
67567: PUSH
67568: LD_VAR 0 1
67572: PPUSH
67573: CALL_OW 437
67577: PUSH
67578: LD_INT 1
67580: ARRAY
67581: PUSH
67582: LD_INT 3
67584: ARRAY
67585: EQUAL
67586: AND
67587: IFFALSE 67597
// result := true end ;
67589: LD_ADDR_VAR 0 3
67593: PUSH
67594: LD_INT 1
67596: ST_TO_ADDR
// end ;
67597: LD_VAR 0 3
67601: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67602: LD_INT 0
67604: PPUSH
// result := false ;
67605: LD_ADDR_VAR 0 4
67609: PUSH
67610: LD_INT 0
67612: ST_TO_ADDR
// if GetTaskList ( unit ) then
67613: LD_VAR 0 1
67617: PPUSH
67618: CALL_OW 437
67622: IFFALSE 67705
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67624: LD_STRING M
67626: PUSH
67627: LD_VAR 0 1
67631: PPUSH
67632: CALL_OW 437
67636: PUSH
67637: LD_INT 1
67639: ARRAY
67640: PUSH
67641: LD_INT 1
67643: ARRAY
67644: EQUAL
67645: PUSH
67646: LD_VAR 0 2
67650: PUSH
67651: LD_VAR 0 1
67655: PPUSH
67656: CALL_OW 437
67660: PUSH
67661: LD_INT 1
67663: ARRAY
67664: PUSH
67665: LD_INT 2
67667: ARRAY
67668: EQUAL
67669: AND
67670: PUSH
67671: LD_VAR 0 3
67675: PUSH
67676: LD_VAR 0 1
67680: PPUSH
67681: CALL_OW 437
67685: PUSH
67686: LD_INT 1
67688: ARRAY
67689: PUSH
67690: LD_INT 3
67692: ARRAY
67693: EQUAL
67694: AND
67695: IFFALSE 67705
// result := true ;
67697: LD_ADDR_VAR 0 4
67701: PUSH
67702: LD_INT 1
67704: ST_TO_ADDR
// end ; end ;
67705: LD_VAR 0 4
67709: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67710: LD_INT 0
67712: PPUSH
67713: PPUSH
67714: PPUSH
67715: PPUSH
// if not unit or not area then
67716: LD_VAR 0 1
67720: NOT
67721: PUSH
67722: LD_VAR 0 2
67726: NOT
67727: OR
67728: IFFALSE 67732
// exit ;
67730: GO 67896
// tmp := AreaToList ( area , i ) ;
67732: LD_ADDR_VAR 0 6
67736: PUSH
67737: LD_VAR 0 2
67741: PPUSH
67742: LD_VAR 0 5
67746: PPUSH
67747: CALL_OW 517
67751: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67752: LD_ADDR_VAR 0 5
67756: PUSH
67757: DOUBLE
67758: LD_INT 1
67760: DEC
67761: ST_TO_ADDR
67762: LD_VAR 0 6
67766: PUSH
67767: LD_INT 1
67769: ARRAY
67770: PUSH
67771: FOR_TO
67772: IFFALSE 67894
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67774: LD_ADDR_VAR 0 7
67778: PUSH
67779: LD_VAR 0 6
67783: PUSH
67784: LD_INT 1
67786: ARRAY
67787: PUSH
67788: LD_VAR 0 5
67792: ARRAY
67793: PUSH
67794: LD_VAR 0 6
67798: PUSH
67799: LD_INT 2
67801: ARRAY
67802: PUSH
67803: LD_VAR 0 5
67807: ARRAY
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67813: LD_VAR 0 7
67817: PUSH
67818: LD_INT 1
67820: ARRAY
67821: PPUSH
67822: LD_VAR 0 7
67826: PUSH
67827: LD_INT 2
67829: ARRAY
67830: PPUSH
67831: CALL_OW 428
67835: PUSH
67836: LD_INT 0
67838: EQUAL
67839: IFFALSE 67892
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67841: LD_VAR 0 1
67845: PPUSH
67846: LD_VAR 0 7
67850: PUSH
67851: LD_INT 1
67853: ARRAY
67854: PPUSH
67855: LD_VAR 0 7
67859: PUSH
67860: LD_INT 2
67862: ARRAY
67863: PPUSH
67864: LD_VAR 0 3
67868: PPUSH
67869: CALL_OW 48
// result := IsPlaced ( unit ) ;
67873: LD_ADDR_VAR 0 4
67877: PUSH
67878: LD_VAR 0 1
67882: PPUSH
67883: CALL_OW 305
67887: ST_TO_ADDR
// exit ;
67888: POP
67889: POP
67890: GO 67896
// end ; end ;
67892: GO 67771
67894: POP
67895: POP
// end ;
67896: LD_VAR 0 4
67900: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67901: LD_INT 0
67903: PPUSH
67904: PPUSH
67905: PPUSH
// if not side or side > 8 then
67906: LD_VAR 0 1
67910: NOT
67911: PUSH
67912: LD_VAR 0 1
67916: PUSH
67917: LD_INT 8
67919: GREATER
67920: OR
67921: IFFALSE 67925
// exit ;
67923: GO 68112
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67925: LD_ADDR_VAR 0 4
67929: PUSH
67930: LD_INT 22
67932: PUSH
67933: LD_VAR 0 1
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 21
67944: PUSH
67945: LD_INT 3
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PPUSH
67956: CALL_OW 69
67960: ST_TO_ADDR
// if not tmp then
67961: LD_VAR 0 4
67965: NOT
67966: IFFALSE 67970
// exit ;
67968: GO 68112
// enable_addtolog := true ;
67970: LD_ADDR_OWVAR 81
67974: PUSH
67975: LD_INT 1
67977: ST_TO_ADDR
// AddToLog ( [ ) ;
67978: LD_STRING [
67980: PPUSH
67981: CALL_OW 561
// for i in tmp do
67985: LD_ADDR_VAR 0 3
67989: PUSH
67990: LD_VAR 0 4
67994: PUSH
67995: FOR_IN
67996: IFFALSE 68103
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67998: LD_STRING [
68000: PUSH
68001: LD_VAR 0 3
68005: PPUSH
68006: CALL_OW 266
68010: STR
68011: PUSH
68012: LD_STRING , 
68014: STR
68015: PUSH
68016: LD_VAR 0 3
68020: PPUSH
68021: CALL_OW 250
68025: STR
68026: PUSH
68027: LD_STRING , 
68029: STR
68030: PUSH
68031: LD_VAR 0 3
68035: PPUSH
68036: CALL_OW 251
68040: STR
68041: PUSH
68042: LD_STRING , 
68044: STR
68045: PUSH
68046: LD_VAR 0 3
68050: PPUSH
68051: CALL_OW 254
68055: STR
68056: PUSH
68057: LD_STRING , 
68059: STR
68060: PUSH
68061: LD_VAR 0 3
68065: PPUSH
68066: LD_INT 1
68068: PPUSH
68069: CALL_OW 268
68073: STR
68074: PUSH
68075: LD_STRING , 
68077: STR
68078: PUSH
68079: LD_VAR 0 3
68083: PPUSH
68084: LD_INT 2
68086: PPUSH
68087: CALL_OW 268
68091: STR
68092: PUSH
68093: LD_STRING ],
68095: STR
68096: PPUSH
68097: CALL_OW 561
// end ;
68101: GO 67995
68103: POP
68104: POP
// AddToLog ( ]; ) ;
68105: LD_STRING ];
68107: PPUSH
68108: CALL_OW 561
// end ;
68112: LD_VAR 0 2
68116: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68117: LD_INT 0
68119: PPUSH
68120: PPUSH
68121: PPUSH
68122: PPUSH
68123: PPUSH
// if not area or not rate or not max then
68124: LD_VAR 0 1
68128: NOT
68129: PUSH
68130: LD_VAR 0 2
68134: NOT
68135: OR
68136: PUSH
68137: LD_VAR 0 4
68141: NOT
68142: OR
68143: IFFALSE 68147
// exit ;
68145: GO 68336
// while 1 do
68147: LD_INT 1
68149: IFFALSE 68336
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68151: LD_ADDR_VAR 0 9
68155: PUSH
68156: LD_VAR 0 1
68160: PPUSH
68161: LD_INT 1
68163: PPUSH
68164: CALL_OW 287
68168: PUSH
68169: LD_INT 10
68171: MUL
68172: ST_TO_ADDR
// r := rate / 10 ;
68173: LD_ADDR_VAR 0 7
68177: PUSH
68178: LD_VAR 0 2
68182: PUSH
68183: LD_INT 10
68185: DIVREAL
68186: ST_TO_ADDR
// time := 1 1$00 ;
68187: LD_ADDR_VAR 0 8
68191: PUSH
68192: LD_INT 2100
68194: ST_TO_ADDR
// if amount < min then
68195: LD_VAR 0 9
68199: PUSH
68200: LD_VAR 0 3
68204: LESS
68205: IFFALSE 68223
// r := r * 2 else
68207: LD_ADDR_VAR 0 7
68211: PUSH
68212: LD_VAR 0 7
68216: PUSH
68217: LD_INT 2
68219: MUL
68220: ST_TO_ADDR
68221: GO 68249
// if amount > max then
68223: LD_VAR 0 9
68227: PUSH
68228: LD_VAR 0 4
68232: GREATER
68233: IFFALSE 68249
// r := r / 2 ;
68235: LD_ADDR_VAR 0 7
68239: PUSH
68240: LD_VAR 0 7
68244: PUSH
68245: LD_INT 2
68247: DIVREAL
68248: ST_TO_ADDR
// time := time / r ;
68249: LD_ADDR_VAR 0 8
68253: PUSH
68254: LD_VAR 0 8
68258: PUSH
68259: LD_VAR 0 7
68263: DIVREAL
68264: ST_TO_ADDR
// if time < 0 then
68265: LD_VAR 0 8
68269: PUSH
68270: LD_INT 0
68272: LESS
68273: IFFALSE 68290
// time := time * - 1 ;
68275: LD_ADDR_VAR 0 8
68279: PUSH
68280: LD_VAR 0 8
68284: PUSH
68285: LD_INT 1
68287: NEG
68288: MUL
68289: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68290: LD_VAR 0 8
68294: PUSH
68295: LD_INT 35
68297: PPUSH
68298: LD_INT 875
68300: PPUSH
68301: CALL_OW 12
68305: PLUS
68306: PPUSH
68307: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68311: LD_INT 1
68313: PPUSH
68314: LD_INT 5
68316: PPUSH
68317: CALL_OW 12
68321: PPUSH
68322: LD_VAR 0 1
68326: PPUSH
68327: LD_INT 1
68329: PPUSH
68330: CALL_OW 55
// end ;
68334: GO 68147
// end ;
68336: LD_VAR 0 5
68340: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68341: LD_INT 0
68343: PPUSH
68344: PPUSH
68345: PPUSH
68346: PPUSH
68347: PPUSH
68348: PPUSH
68349: PPUSH
68350: PPUSH
// if not turrets or not factories then
68351: LD_VAR 0 1
68355: NOT
68356: PUSH
68357: LD_VAR 0 2
68361: NOT
68362: OR
68363: IFFALSE 68367
// exit ;
68365: GO 68674
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68367: LD_ADDR_VAR 0 10
68371: PUSH
68372: LD_INT 5
68374: PUSH
68375: LD_INT 6
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 2
68384: PUSH
68385: LD_INT 4
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 3
68394: PUSH
68395: LD_INT 5
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 24
68409: PUSH
68410: LD_INT 25
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 23
68419: PUSH
68420: LD_INT 27
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 42
68433: PUSH
68434: LD_INT 43
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 44
68443: PUSH
68444: LD_INT 46
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 45
68453: PUSH
68454: LD_INT 47
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: LIST
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: LIST
68470: ST_TO_ADDR
// result := [ ] ;
68471: LD_ADDR_VAR 0 3
68475: PUSH
68476: EMPTY
68477: ST_TO_ADDR
// for i in turrets do
68478: LD_ADDR_VAR 0 4
68482: PUSH
68483: LD_VAR 0 1
68487: PUSH
68488: FOR_IN
68489: IFFALSE 68672
// begin nat := GetNation ( i ) ;
68491: LD_ADDR_VAR 0 7
68495: PUSH
68496: LD_VAR 0 4
68500: PPUSH
68501: CALL_OW 248
68505: ST_TO_ADDR
// weapon := 0 ;
68506: LD_ADDR_VAR 0 8
68510: PUSH
68511: LD_INT 0
68513: ST_TO_ADDR
// if not nat then
68514: LD_VAR 0 7
68518: NOT
68519: IFFALSE 68523
// continue ;
68521: GO 68488
// for j in list [ nat ] do
68523: LD_ADDR_VAR 0 5
68527: PUSH
68528: LD_VAR 0 10
68532: PUSH
68533: LD_VAR 0 7
68537: ARRAY
68538: PUSH
68539: FOR_IN
68540: IFFALSE 68581
// if GetBWeapon ( i ) = j [ 1 ] then
68542: LD_VAR 0 4
68546: PPUSH
68547: CALL_OW 269
68551: PUSH
68552: LD_VAR 0 5
68556: PUSH
68557: LD_INT 1
68559: ARRAY
68560: EQUAL
68561: IFFALSE 68579
// begin weapon := j [ 2 ] ;
68563: LD_ADDR_VAR 0 8
68567: PUSH
68568: LD_VAR 0 5
68572: PUSH
68573: LD_INT 2
68575: ARRAY
68576: ST_TO_ADDR
// break ;
68577: GO 68581
// end ;
68579: GO 68539
68581: POP
68582: POP
// if not weapon then
68583: LD_VAR 0 8
68587: NOT
68588: IFFALSE 68592
// continue ;
68590: GO 68488
// for k in factories do
68592: LD_ADDR_VAR 0 6
68596: PUSH
68597: LD_VAR 0 2
68601: PUSH
68602: FOR_IN
68603: IFFALSE 68668
// begin weapons := AvailableWeaponList ( k ) ;
68605: LD_ADDR_VAR 0 9
68609: PUSH
68610: LD_VAR 0 6
68614: PPUSH
68615: CALL_OW 478
68619: ST_TO_ADDR
// if not weapons then
68620: LD_VAR 0 9
68624: NOT
68625: IFFALSE 68629
// continue ;
68627: GO 68602
// if weapon in weapons then
68629: LD_VAR 0 8
68633: PUSH
68634: LD_VAR 0 9
68638: IN
68639: IFFALSE 68666
// begin result := [ i , weapon ] ;
68641: LD_ADDR_VAR 0 3
68645: PUSH
68646: LD_VAR 0 4
68650: PUSH
68651: LD_VAR 0 8
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: ST_TO_ADDR
// exit ;
68660: POP
68661: POP
68662: POP
68663: POP
68664: GO 68674
// end ; end ;
68666: GO 68602
68668: POP
68669: POP
// end ;
68670: GO 68488
68672: POP
68673: POP
// end ;
68674: LD_VAR 0 3
68678: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68679: LD_INT 0
68681: PPUSH
// if not side or side > 8 then
68682: LD_VAR 0 3
68686: NOT
68687: PUSH
68688: LD_VAR 0 3
68692: PUSH
68693: LD_INT 8
68695: GREATER
68696: OR
68697: IFFALSE 68701
// exit ;
68699: GO 68760
// if not range then
68701: LD_VAR 0 4
68705: NOT
68706: IFFALSE 68717
// range := - 12 ;
68708: LD_ADDR_VAR 0 4
68712: PUSH
68713: LD_INT 12
68715: NEG
68716: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68717: LD_VAR 0 1
68721: PPUSH
68722: LD_VAR 0 2
68726: PPUSH
68727: LD_VAR 0 3
68731: PPUSH
68732: LD_VAR 0 4
68736: PPUSH
68737: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68741: LD_VAR 0 1
68745: PPUSH
68746: LD_VAR 0 2
68750: PPUSH
68751: LD_VAR 0 3
68755: PPUSH
68756: CALL_OW 331
// end ;
68760: LD_VAR 0 5
68764: RET
// export function Video ( mode ) ; begin
68765: LD_INT 0
68767: PPUSH
// ingame_video = mode ;
68768: LD_ADDR_OWVAR 52
68772: PUSH
68773: LD_VAR 0 1
68777: ST_TO_ADDR
// interface_hidden = mode ;
68778: LD_ADDR_OWVAR 54
68782: PUSH
68783: LD_VAR 0 1
68787: ST_TO_ADDR
// end ;
68788: LD_VAR 0 2
68792: RET
// export function Join ( array , element ) ; begin
68793: LD_INT 0
68795: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68796: LD_ADDR_VAR 0 3
68800: PUSH
68801: LD_VAR 0 1
68805: PPUSH
68806: LD_VAR 0 1
68810: PUSH
68811: LD_INT 1
68813: PLUS
68814: PPUSH
68815: LD_VAR 0 2
68819: PPUSH
68820: CALL_OW 1
68824: ST_TO_ADDR
// end ;
68825: LD_VAR 0 3
68829: RET
// export function JoinUnion ( array , element ) ; begin
68830: LD_INT 0
68832: PPUSH
// result := array union element ;
68833: LD_ADDR_VAR 0 3
68837: PUSH
68838: LD_VAR 0 1
68842: PUSH
68843: LD_VAR 0 2
68847: UNION
68848: ST_TO_ADDR
// end ;
68849: LD_VAR 0 3
68853: RET
// export function GetBehemoths ( side ) ; begin
68854: LD_INT 0
68856: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68857: LD_ADDR_VAR 0 2
68861: PUSH
68862: LD_INT 22
68864: PUSH
68865: LD_VAR 0 1
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 31
68876: PUSH
68877: LD_INT 25
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PPUSH
68888: CALL_OW 69
68892: ST_TO_ADDR
// end ;
68893: LD_VAR 0 2
68897: RET
// export function Shuffle ( array ) ; var i , index ; begin
68898: LD_INT 0
68900: PPUSH
68901: PPUSH
68902: PPUSH
// result := [ ] ;
68903: LD_ADDR_VAR 0 2
68907: PUSH
68908: EMPTY
68909: ST_TO_ADDR
// if not array then
68910: LD_VAR 0 1
68914: NOT
68915: IFFALSE 68919
// exit ;
68917: GO 69018
// Randomize ;
68919: CALL_OW 10
// for i = array downto 1 do
68923: LD_ADDR_VAR 0 3
68927: PUSH
68928: DOUBLE
68929: LD_VAR 0 1
68933: INC
68934: ST_TO_ADDR
68935: LD_INT 1
68937: PUSH
68938: FOR_DOWNTO
68939: IFFALSE 69016
// begin index := rand ( 1 , array ) ;
68941: LD_ADDR_VAR 0 4
68945: PUSH
68946: LD_INT 1
68948: PPUSH
68949: LD_VAR 0 1
68953: PPUSH
68954: CALL_OW 12
68958: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68959: LD_ADDR_VAR 0 2
68963: PUSH
68964: LD_VAR 0 2
68968: PPUSH
68969: LD_VAR 0 2
68973: PUSH
68974: LD_INT 1
68976: PLUS
68977: PPUSH
68978: LD_VAR 0 1
68982: PUSH
68983: LD_VAR 0 4
68987: ARRAY
68988: PPUSH
68989: CALL_OW 2
68993: ST_TO_ADDR
// array := Delete ( array , index ) ;
68994: LD_ADDR_VAR 0 1
68998: PUSH
68999: LD_VAR 0 1
69003: PPUSH
69004: LD_VAR 0 4
69008: PPUSH
69009: CALL_OW 3
69013: ST_TO_ADDR
// end ;
69014: GO 68938
69016: POP
69017: POP
// end ;
69018: LD_VAR 0 2
69022: RET
// export function GetBaseMaterials ( base ) ; begin
69023: LD_INT 0
69025: PPUSH
// result := [ 0 , 0 , 0 ] ;
69026: LD_ADDR_VAR 0 2
69030: PUSH
69031: LD_INT 0
69033: PUSH
69034: LD_INT 0
69036: PUSH
69037: LD_INT 0
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: LIST
69044: ST_TO_ADDR
// if not base then
69045: LD_VAR 0 1
69049: NOT
69050: IFFALSE 69054
// exit ;
69052: GO 69103
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69054: LD_ADDR_VAR 0 2
69058: PUSH
69059: LD_VAR 0 1
69063: PPUSH
69064: LD_INT 1
69066: PPUSH
69067: CALL_OW 275
69071: PUSH
69072: LD_VAR 0 1
69076: PPUSH
69077: LD_INT 2
69079: PPUSH
69080: CALL_OW 275
69084: PUSH
69085: LD_VAR 0 1
69089: PPUSH
69090: LD_INT 3
69092: PPUSH
69093: CALL_OW 275
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: LIST
69102: ST_TO_ADDR
// end ;
69103: LD_VAR 0 2
69107: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69108: LD_INT 0
69110: PPUSH
69111: PPUSH
// result := array ;
69112: LD_ADDR_VAR 0 3
69116: PUSH
69117: LD_VAR 0 1
69121: ST_TO_ADDR
// if size > 0 then
69122: LD_VAR 0 2
69126: PUSH
69127: LD_INT 0
69129: GREATER
69130: IFFALSE 69176
// for i := array downto size do
69132: LD_ADDR_VAR 0 4
69136: PUSH
69137: DOUBLE
69138: LD_VAR 0 1
69142: INC
69143: ST_TO_ADDR
69144: LD_VAR 0 2
69148: PUSH
69149: FOR_DOWNTO
69150: IFFALSE 69174
// result := Delete ( result , result ) ;
69152: LD_ADDR_VAR 0 3
69156: PUSH
69157: LD_VAR 0 3
69161: PPUSH
69162: LD_VAR 0 3
69166: PPUSH
69167: CALL_OW 3
69171: ST_TO_ADDR
69172: GO 69149
69174: POP
69175: POP
// end ;
69176: LD_VAR 0 3
69180: RET
// export function ComExit ( unit ) ; var tmp ; begin
69181: LD_INT 0
69183: PPUSH
69184: PPUSH
// if not IsInUnit ( unit ) then
69185: LD_VAR 0 1
69189: PPUSH
69190: CALL_OW 310
69194: NOT
69195: IFFALSE 69199
// exit ;
69197: GO 69259
// tmp := IsInUnit ( unit ) ;
69199: LD_ADDR_VAR 0 3
69203: PUSH
69204: LD_VAR 0 1
69208: PPUSH
69209: CALL_OW 310
69213: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69214: LD_VAR 0 3
69218: PPUSH
69219: CALL_OW 247
69223: PUSH
69224: LD_INT 2
69226: EQUAL
69227: IFFALSE 69240
// ComExitVehicle ( unit ) else
69229: LD_VAR 0 1
69233: PPUSH
69234: CALL_OW 121
69238: GO 69249
// ComExitBuilding ( unit ) ;
69240: LD_VAR 0 1
69244: PPUSH
69245: CALL_OW 122
// result := tmp ;
69249: LD_ADDR_VAR 0 2
69253: PUSH
69254: LD_VAR 0 3
69258: ST_TO_ADDR
// end ;
69259: LD_VAR 0 2
69263: RET
// export function ComExitAll ( units ) ; var i ; begin
69264: LD_INT 0
69266: PPUSH
69267: PPUSH
// if not units then
69268: LD_VAR 0 1
69272: NOT
69273: IFFALSE 69277
// exit ;
69275: GO 69303
// for i in units do
69277: LD_ADDR_VAR 0 3
69281: PUSH
69282: LD_VAR 0 1
69286: PUSH
69287: FOR_IN
69288: IFFALSE 69301
// ComExit ( i ) ;
69290: LD_VAR 0 3
69294: PPUSH
69295: CALL 69181 0 1
69299: GO 69287
69301: POP
69302: POP
// end ;
69303: LD_VAR 0 2
69307: RET
// export function ResetHc ; begin
69308: LD_INT 0
69310: PPUSH
// InitHc ;
69311: CALL_OW 19
// hc_importance := 0 ;
69315: LD_ADDR_OWVAR 32
69319: PUSH
69320: LD_INT 0
69322: ST_TO_ADDR
// end ;
69323: LD_VAR 0 1
69327: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69328: LD_INT 0
69330: PPUSH
69331: PPUSH
69332: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69333: LD_ADDR_VAR 0 6
69337: PUSH
69338: LD_VAR 0 1
69342: PUSH
69343: LD_VAR 0 3
69347: PLUS
69348: PUSH
69349: LD_INT 2
69351: DIV
69352: ST_TO_ADDR
// if _x < 0 then
69353: LD_VAR 0 6
69357: PUSH
69358: LD_INT 0
69360: LESS
69361: IFFALSE 69378
// _x := _x * - 1 ;
69363: LD_ADDR_VAR 0 6
69367: PUSH
69368: LD_VAR 0 6
69372: PUSH
69373: LD_INT 1
69375: NEG
69376: MUL
69377: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69378: LD_ADDR_VAR 0 7
69382: PUSH
69383: LD_VAR 0 2
69387: PUSH
69388: LD_VAR 0 4
69392: PLUS
69393: PUSH
69394: LD_INT 2
69396: DIV
69397: ST_TO_ADDR
// if _y < 0 then
69398: LD_VAR 0 7
69402: PUSH
69403: LD_INT 0
69405: LESS
69406: IFFALSE 69423
// _y := _y * - 1 ;
69408: LD_ADDR_VAR 0 7
69412: PUSH
69413: LD_VAR 0 7
69417: PUSH
69418: LD_INT 1
69420: NEG
69421: MUL
69422: ST_TO_ADDR
// result := [ _x , _y ] ;
69423: LD_ADDR_VAR 0 5
69427: PUSH
69428: LD_VAR 0 6
69432: PUSH
69433: LD_VAR 0 7
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: ST_TO_ADDR
// end ;
69442: LD_VAR 0 5
69446: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69447: LD_INT 0
69449: PPUSH
69450: PPUSH
69451: PPUSH
69452: PPUSH
// task := GetTaskList ( unit ) ;
69453: LD_ADDR_VAR 0 7
69457: PUSH
69458: LD_VAR 0 1
69462: PPUSH
69463: CALL_OW 437
69467: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69468: LD_VAR 0 7
69472: NOT
69473: PUSH
69474: LD_VAR 0 1
69478: PPUSH
69479: LD_VAR 0 2
69483: PPUSH
69484: CALL_OW 308
69488: NOT
69489: AND
69490: IFFALSE 69494
// exit ;
69492: GO 69612
// if IsInArea ( unit , area ) then
69494: LD_VAR 0 1
69498: PPUSH
69499: LD_VAR 0 2
69503: PPUSH
69504: CALL_OW 308
69508: IFFALSE 69526
// begin ComMoveToArea ( unit , goAway ) ;
69510: LD_VAR 0 1
69514: PPUSH
69515: LD_VAR 0 3
69519: PPUSH
69520: CALL_OW 113
// exit ;
69524: GO 69612
// end ; if task [ 1 ] [ 1 ] <> M then
69526: LD_VAR 0 7
69530: PUSH
69531: LD_INT 1
69533: ARRAY
69534: PUSH
69535: LD_INT 1
69537: ARRAY
69538: PUSH
69539: LD_STRING M
69541: NONEQUAL
69542: IFFALSE 69546
// exit ;
69544: GO 69612
// x := task [ 1 ] [ 2 ] ;
69546: LD_ADDR_VAR 0 5
69550: PUSH
69551: LD_VAR 0 7
69555: PUSH
69556: LD_INT 1
69558: ARRAY
69559: PUSH
69560: LD_INT 2
69562: ARRAY
69563: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69564: LD_ADDR_VAR 0 6
69568: PUSH
69569: LD_VAR 0 7
69573: PUSH
69574: LD_INT 1
69576: ARRAY
69577: PUSH
69578: LD_INT 3
69580: ARRAY
69581: ST_TO_ADDR
// if InArea ( x , y , area ) then
69582: LD_VAR 0 5
69586: PPUSH
69587: LD_VAR 0 6
69591: PPUSH
69592: LD_VAR 0 2
69596: PPUSH
69597: CALL_OW 309
69601: IFFALSE 69612
// ComStop ( unit ) ;
69603: LD_VAR 0 1
69607: PPUSH
69608: CALL_OW 141
// end ;
69612: LD_VAR 0 4
69616: RET
// export function Abs ( value ) ; begin
69617: LD_INT 0
69619: PPUSH
// result := value ;
69620: LD_ADDR_VAR 0 2
69624: PUSH
69625: LD_VAR 0 1
69629: ST_TO_ADDR
// if value < 0 then
69630: LD_VAR 0 1
69634: PUSH
69635: LD_INT 0
69637: LESS
69638: IFFALSE 69655
// result := value * - 1 ;
69640: LD_ADDR_VAR 0 2
69644: PUSH
69645: LD_VAR 0 1
69649: PUSH
69650: LD_INT 1
69652: NEG
69653: MUL
69654: ST_TO_ADDR
// end ;
69655: LD_VAR 0 2
69659: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69660: LD_INT 0
69662: PPUSH
69663: PPUSH
69664: PPUSH
69665: PPUSH
69666: PPUSH
69667: PPUSH
69668: PPUSH
69669: PPUSH
// if not unit or not building then
69670: LD_VAR 0 1
69674: NOT
69675: PUSH
69676: LD_VAR 0 2
69680: NOT
69681: OR
69682: IFFALSE 69686
// exit ;
69684: GO 69912
// x := GetX ( building ) ;
69686: LD_ADDR_VAR 0 4
69690: PUSH
69691: LD_VAR 0 2
69695: PPUSH
69696: CALL_OW 250
69700: ST_TO_ADDR
// y := GetY ( building ) ;
69701: LD_ADDR_VAR 0 6
69705: PUSH
69706: LD_VAR 0 2
69710: PPUSH
69711: CALL_OW 251
69715: ST_TO_ADDR
// d := GetDir ( building ) ;
69716: LD_ADDR_VAR 0 8
69720: PUSH
69721: LD_VAR 0 2
69725: PPUSH
69726: CALL_OW 254
69730: ST_TO_ADDR
// r := 4 ;
69731: LD_ADDR_VAR 0 9
69735: PUSH
69736: LD_INT 4
69738: ST_TO_ADDR
// for i := 1 to 5 do
69739: LD_ADDR_VAR 0 10
69743: PUSH
69744: DOUBLE
69745: LD_INT 1
69747: DEC
69748: ST_TO_ADDR
69749: LD_INT 5
69751: PUSH
69752: FOR_TO
69753: IFFALSE 69910
// begin _x := ShiftX ( x , d , r + i ) ;
69755: LD_ADDR_VAR 0 5
69759: PUSH
69760: LD_VAR 0 4
69764: PPUSH
69765: LD_VAR 0 8
69769: PPUSH
69770: LD_VAR 0 9
69774: PUSH
69775: LD_VAR 0 10
69779: PLUS
69780: PPUSH
69781: CALL_OW 272
69785: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69786: LD_ADDR_VAR 0 7
69790: PUSH
69791: LD_VAR 0 6
69795: PPUSH
69796: LD_VAR 0 8
69800: PPUSH
69801: LD_VAR 0 9
69805: PUSH
69806: LD_VAR 0 10
69810: PLUS
69811: PPUSH
69812: CALL_OW 273
69816: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69817: LD_VAR 0 5
69821: PPUSH
69822: LD_VAR 0 7
69826: PPUSH
69827: CALL_OW 488
69831: PUSH
69832: LD_VAR 0 5
69836: PPUSH
69837: LD_VAR 0 7
69841: PPUSH
69842: CALL_OW 428
69846: PPUSH
69847: CALL_OW 247
69851: PUSH
69852: LD_INT 3
69854: PUSH
69855: LD_INT 2
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: IN
69862: NOT
69863: AND
69864: IFFALSE 69908
// begin ComMoveXY ( unit , _x , _y ) ;
69866: LD_VAR 0 1
69870: PPUSH
69871: LD_VAR 0 5
69875: PPUSH
69876: LD_VAR 0 7
69880: PPUSH
69881: CALL_OW 111
// result := [ _x , _y ] ;
69885: LD_ADDR_VAR 0 3
69889: PUSH
69890: LD_VAR 0 5
69894: PUSH
69895: LD_VAR 0 7
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: ST_TO_ADDR
// exit ;
69904: POP
69905: POP
69906: GO 69912
// end ; end ;
69908: GO 69752
69910: POP
69911: POP
// end ;
69912: LD_VAR 0 3
69916: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69917: LD_INT 0
69919: PPUSH
69920: PPUSH
69921: PPUSH
// result := 0 ;
69922: LD_ADDR_VAR 0 3
69926: PUSH
69927: LD_INT 0
69929: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69930: LD_VAR 0 1
69934: PUSH
69935: LD_INT 0
69937: LESS
69938: PUSH
69939: LD_VAR 0 1
69943: PUSH
69944: LD_INT 8
69946: GREATER
69947: OR
69948: PUSH
69949: LD_VAR 0 2
69953: PUSH
69954: LD_INT 0
69956: LESS
69957: OR
69958: PUSH
69959: LD_VAR 0 2
69963: PUSH
69964: LD_INT 8
69966: GREATER
69967: OR
69968: IFFALSE 69972
// exit ;
69970: GO 70047
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69972: LD_ADDR_VAR 0 4
69976: PUSH
69977: LD_INT 22
69979: PUSH
69980: LD_VAR 0 2
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PPUSH
69989: CALL_OW 69
69993: PUSH
69994: FOR_IN
69995: IFFALSE 70045
// begin un := UnitShoot ( i ) ;
69997: LD_ADDR_VAR 0 5
70001: PUSH
70002: LD_VAR 0 4
70006: PPUSH
70007: CALL_OW 504
70011: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70012: LD_VAR 0 5
70016: PPUSH
70017: CALL_OW 255
70021: PUSH
70022: LD_VAR 0 1
70026: EQUAL
70027: IFFALSE 70043
// begin result := un ;
70029: LD_ADDR_VAR 0 3
70033: PUSH
70034: LD_VAR 0 5
70038: ST_TO_ADDR
// exit ;
70039: POP
70040: POP
70041: GO 70047
// end ; end ;
70043: GO 69994
70045: POP
70046: POP
// end ;
70047: LD_VAR 0 3
70051: RET
// export function GetCargoBay ( units ) ; begin
70052: LD_INT 0
70054: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70055: LD_ADDR_VAR 0 2
70059: PUSH
70060: LD_VAR 0 1
70064: PPUSH
70065: LD_INT 2
70067: PUSH
70068: LD_INT 34
70070: PUSH
70071: LD_INT 12
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 34
70080: PUSH
70081: LD_INT 51
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 34
70090: PUSH
70091: LD_INT 32
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 34
70100: PUSH
70101: LD_EXP 44
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: PPUSH
70117: CALL_OW 72
70121: ST_TO_ADDR
// end ;
70122: LD_VAR 0 2
70126: RET
// export function Negate ( value ) ; begin
70127: LD_INT 0
70129: PPUSH
// result := not value ;
70130: LD_ADDR_VAR 0 2
70134: PUSH
70135: LD_VAR 0 1
70139: NOT
70140: ST_TO_ADDR
// end ;
70141: LD_VAR 0 2
70145: RET
// export function Inc ( value ) ; begin
70146: LD_INT 0
70148: PPUSH
// result := value + 1 ;
70149: LD_ADDR_VAR 0 2
70153: PUSH
70154: LD_VAR 0 1
70158: PUSH
70159: LD_INT 1
70161: PLUS
70162: ST_TO_ADDR
// end ;
70163: LD_VAR 0 2
70167: RET
// export function Dec ( value ) ; begin
70168: LD_INT 0
70170: PPUSH
// result := value - 1 ;
70171: LD_ADDR_VAR 0 2
70175: PUSH
70176: LD_VAR 0 1
70180: PUSH
70181: LD_INT 1
70183: MINUS
70184: ST_TO_ADDR
// end ;
70185: LD_VAR 0 2
70189: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70190: LD_INT 0
70192: PPUSH
70193: PPUSH
70194: PPUSH
70195: PPUSH
70196: PPUSH
70197: PPUSH
70198: PPUSH
70199: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70200: LD_VAR 0 1
70204: PPUSH
70205: LD_VAR 0 2
70209: PPUSH
70210: CALL_OW 488
70214: NOT
70215: PUSH
70216: LD_VAR 0 3
70220: PPUSH
70221: LD_VAR 0 4
70225: PPUSH
70226: CALL_OW 488
70230: NOT
70231: OR
70232: IFFALSE 70245
// begin result := - 1 ;
70234: LD_ADDR_VAR 0 5
70238: PUSH
70239: LD_INT 1
70241: NEG
70242: ST_TO_ADDR
// exit ;
70243: GO 70480
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70245: LD_ADDR_VAR 0 12
70249: PUSH
70250: LD_VAR 0 1
70254: PPUSH
70255: LD_VAR 0 2
70259: PPUSH
70260: LD_VAR 0 3
70264: PPUSH
70265: LD_VAR 0 4
70269: PPUSH
70270: CALL 69328 0 4
70274: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70275: LD_ADDR_VAR 0 11
70279: PUSH
70280: LD_VAR 0 1
70284: PPUSH
70285: LD_VAR 0 2
70289: PPUSH
70290: LD_VAR 0 12
70294: PUSH
70295: LD_INT 1
70297: ARRAY
70298: PPUSH
70299: LD_VAR 0 12
70303: PUSH
70304: LD_INT 2
70306: ARRAY
70307: PPUSH
70308: CALL_OW 298
70312: ST_TO_ADDR
// distance := 9999 ;
70313: LD_ADDR_VAR 0 10
70317: PUSH
70318: LD_INT 9999
70320: ST_TO_ADDR
// for i := 0 to 5 do
70321: LD_ADDR_VAR 0 6
70325: PUSH
70326: DOUBLE
70327: LD_INT 0
70329: DEC
70330: ST_TO_ADDR
70331: LD_INT 5
70333: PUSH
70334: FOR_TO
70335: IFFALSE 70478
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70337: LD_ADDR_VAR 0 7
70341: PUSH
70342: LD_VAR 0 1
70346: PPUSH
70347: LD_VAR 0 6
70351: PPUSH
70352: LD_VAR 0 11
70356: PPUSH
70357: CALL_OW 272
70361: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70362: LD_ADDR_VAR 0 8
70366: PUSH
70367: LD_VAR 0 2
70371: PPUSH
70372: LD_VAR 0 6
70376: PPUSH
70377: LD_VAR 0 11
70381: PPUSH
70382: CALL_OW 273
70386: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70387: LD_VAR 0 7
70391: PPUSH
70392: LD_VAR 0 8
70396: PPUSH
70397: CALL_OW 488
70401: NOT
70402: IFFALSE 70406
// continue ;
70404: GO 70334
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70406: LD_ADDR_VAR 0 9
70410: PUSH
70411: LD_VAR 0 12
70415: PUSH
70416: LD_INT 1
70418: ARRAY
70419: PPUSH
70420: LD_VAR 0 12
70424: PUSH
70425: LD_INT 2
70427: ARRAY
70428: PPUSH
70429: LD_VAR 0 7
70433: PPUSH
70434: LD_VAR 0 8
70438: PPUSH
70439: CALL_OW 298
70443: ST_TO_ADDR
// if tmp < distance then
70444: LD_VAR 0 9
70448: PUSH
70449: LD_VAR 0 10
70453: LESS
70454: IFFALSE 70476
// begin result := i ;
70456: LD_ADDR_VAR 0 5
70460: PUSH
70461: LD_VAR 0 6
70465: ST_TO_ADDR
// distance := tmp ;
70466: LD_ADDR_VAR 0 10
70470: PUSH
70471: LD_VAR 0 9
70475: ST_TO_ADDR
// end ; end ;
70476: GO 70334
70478: POP
70479: POP
// end ;
70480: LD_VAR 0 5
70484: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70485: LD_INT 0
70487: PPUSH
70488: PPUSH
// if not driver or not IsInUnit ( driver ) then
70489: LD_VAR 0 1
70493: NOT
70494: PUSH
70495: LD_VAR 0 1
70499: PPUSH
70500: CALL_OW 310
70504: NOT
70505: OR
70506: IFFALSE 70510
// exit ;
70508: GO 70600
// vehicle := IsInUnit ( driver ) ;
70510: LD_ADDR_VAR 0 3
70514: PUSH
70515: LD_VAR 0 1
70519: PPUSH
70520: CALL_OW 310
70524: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70525: LD_VAR 0 1
70529: PPUSH
70530: LD_STRING \
70532: PUSH
70533: LD_INT 0
70535: PUSH
70536: LD_INT 0
70538: PUSH
70539: LD_INT 0
70541: PUSH
70542: LD_INT 0
70544: PUSH
70545: LD_INT 0
70547: PUSH
70548: LD_INT 0
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: PUSH
70560: LD_STRING E
70562: PUSH
70563: LD_INT 0
70565: PUSH
70566: LD_INT 0
70568: PUSH
70569: LD_VAR 0 3
70573: PUSH
70574: LD_INT 0
70576: PUSH
70577: LD_INT 0
70579: PUSH
70580: LD_INT 0
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PPUSH
70596: CALL_OW 446
// end ;
70600: LD_VAR 0 2
70604: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70605: LD_INT 0
70607: PPUSH
70608: PPUSH
// if not driver or not IsInUnit ( driver ) then
70609: LD_VAR 0 1
70613: NOT
70614: PUSH
70615: LD_VAR 0 1
70619: PPUSH
70620: CALL_OW 310
70624: NOT
70625: OR
70626: IFFALSE 70630
// exit ;
70628: GO 70720
// vehicle := IsInUnit ( driver ) ;
70630: LD_ADDR_VAR 0 3
70634: PUSH
70635: LD_VAR 0 1
70639: PPUSH
70640: CALL_OW 310
70644: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70645: LD_VAR 0 1
70649: PPUSH
70650: LD_STRING \
70652: PUSH
70653: LD_INT 0
70655: PUSH
70656: LD_INT 0
70658: PUSH
70659: LD_INT 0
70661: PUSH
70662: LD_INT 0
70664: PUSH
70665: LD_INT 0
70667: PUSH
70668: LD_INT 0
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: PUSH
70680: LD_STRING E
70682: PUSH
70683: LD_INT 0
70685: PUSH
70686: LD_INT 0
70688: PUSH
70689: LD_VAR 0 3
70693: PUSH
70694: LD_INT 0
70696: PUSH
70697: LD_INT 0
70699: PUSH
70700: LD_INT 0
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PPUSH
70716: CALL_OW 447
// end ;
70720: LD_VAR 0 2
70724: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70725: LD_INT 0
70727: PPUSH
70728: PPUSH
70729: PPUSH
// tmp := [ ] ;
70730: LD_ADDR_VAR 0 5
70734: PUSH
70735: EMPTY
70736: ST_TO_ADDR
// for i in units do
70737: LD_ADDR_VAR 0 4
70741: PUSH
70742: LD_VAR 0 1
70746: PUSH
70747: FOR_IN
70748: IFFALSE 70786
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70750: LD_ADDR_VAR 0 5
70754: PUSH
70755: LD_VAR 0 5
70759: PPUSH
70760: LD_VAR 0 5
70764: PUSH
70765: LD_INT 1
70767: PLUS
70768: PPUSH
70769: LD_VAR 0 4
70773: PPUSH
70774: CALL_OW 256
70778: PPUSH
70779: CALL_OW 2
70783: ST_TO_ADDR
70784: GO 70747
70786: POP
70787: POP
// if not tmp then
70788: LD_VAR 0 5
70792: NOT
70793: IFFALSE 70797
// exit ;
70795: GO 70845
// if asc then
70797: LD_VAR 0 2
70801: IFFALSE 70825
// result := SortListByListAsc ( units , tmp ) else
70803: LD_ADDR_VAR 0 3
70807: PUSH
70808: LD_VAR 0 1
70812: PPUSH
70813: LD_VAR 0 5
70817: PPUSH
70818: CALL_OW 76
70822: ST_TO_ADDR
70823: GO 70845
// result := SortListByListDesc ( units , tmp ) ;
70825: LD_ADDR_VAR 0 3
70829: PUSH
70830: LD_VAR 0 1
70834: PPUSH
70835: LD_VAR 0 5
70839: PPUSH
70840: CALL_OW 77
70844: ST_TO_ADDR
// end ;
70845: LD_VAR 0 3
70849: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70850: LD_INT 0
70852: PPUSH
70853: PPUSH
// task := GetTaskList ( mech ) ;
70854: LD_ADDR_VAR 0 4
70858: PUSH
70859: LD_VAR 0 1
70863: PPUSH
70864: CALL_OW 437
70868: ST_TO_ADDR
// if not task then
70869: LD_VAR 0 4
70873: NOT
70874: IFFALSE 70878
// exit ;
70876: GO 70920
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70878: LD_ADDR_VAR 0 3
70882: PUSH
70883: LD_VAR 0 4
70887: PUSH
70888: LD_INT 1
70890: ARRAY
70891: PUSH
70892: LD_INT 1
70894: ARRAY
70895: PUSH
70896: LD_STRING r
70898: EQUAL
70899: PUSH
70900: LD_VAR 0 4
70904: PUSH
70905: LD_INT 1
70907: ARRAY
70908: PUSH
70909: LD_INT 4
70911: ARRAY
70912: PUSH
70913: LD_VAR 0 2
70917: EQUAL
70918: AND
70919: ST_TO_ADDR
// end ;
70920: LD_VAR 0 3
70924: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70925: LD_INT 0
70927: PPUSH
// SetDir ( unit , d ) ;
70928: LD_VAR 0 1
70932: PPUSH
70933: LD_VAR 0 4
70937: PPUSH
70938: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70942: LD_VAR 0 1
70946: PPUSH
70947: LD_VAR 0 2
70951: PPUSH
70952: LD_VAR 0 3
70956: PPUSH
70957: LD_VAR 0 5
70961: PPUSH
70962: CALL_OW 48
// end ;
70966: LD_VAR 0 6
70970: RET
// export function ToNaturalNumber ( number ) ; begin
70971: LD_INT 0
70973: PPUSH
// result := number div 1 ;
70974: LD_ADDR_VAR 0 2
70978: PUSH
70979: LD_VAR 0 1
70983: PUSH
70984: LD_INT 1
70986: DIV
70987: ST_TO_ADDR
// if number < 0 then
70988: LD_VAR 0 1
70992: PUSH
70993: LD_INT 0
70995: LESS
70996: IFFALSE 71006
// result := 0 ;
70998: LD_ADDR_VAR 0 2
71002: PUSH
71003: LD_INT 0
71005: ST_TO_ADDR
// end ;
71006: LD_VAR 0 2
71010: RET
// export function SortByClass ( units , class ) ; var un ; begin
71011: LD_INT 0
71013: PPUSH
71014: PPUSH
// if not units or not class then
71015: LD_VAR 0 1
71019: NOT
71020: PUSH
71021: LD_VAR 0 2
71025: NOT
71026: OR
71027: IFFALSE 71031
// exit ;
71029: GO 71126
// result := [ ] ;
71031: LD_ADDR_VAR 0 3
71035: PUSH
71036: EMPTY
71037: ST_TO_ADDR
// for un in units do
71038: LD_ADDR_VAR 0 4
71042: PUSH
71043: LD_VAR 0 1
71047: PUSH
71048: FOR_IN
71049: IFFALSE 71124
// if GetClass ( un ) = class then
71051: LD_VAR 0 4
71055: PPUSH
71056: CALL_OW 257
71060: PUSH
71061: LD_VAR 0 2
71065: EQUAL
71066: IFFALSE 71093
// result := Insert ( result , 1 , un ) else
71068: LD_ADDR_VAR 0 3
71072: PUSH
71073: LD_VAR 0 3
71077: PPUSH
71078: LD_INT 1
71080: PPUSH
71081: LD_VAR 0 4
71085: PPUSH
71086: CALL_OW 2
71090: ST_TO_ADDR
71091: GO 71122
// result := Replace ( result , result + 1 , un ) ;
71093: LD_ADDR_VAR 0 3
71097: PUSH
71098: LD_VAR 0 3
71102: PPUSH
71103: LD_VAR 0 3
71107: PUSH
71108: LD_INT 1
71110: PLUS
71111: PPUSH
71112: LD_VAR 0 4
71116: PPUSH
71117: CALL_OW 1
71121: ST_TO_ADDR
71122: GO 71048
71124: POP
71125: POP
// end ;
71126: LD_VAR 0 3
71130: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71131: LD_INT 0
71133: PPUSH
71134: PPUSH
71135: PPUSH
71136: PPUSH
71137: PPUSH
71138: PPUSH
71139: PPUSH
// result := [ ] ;
71140: LD_ADDR_VAR 0 4
71144: PUSH
71145: EMPTY
71146: ST_TO_ADDR
// if x - r < 0 then
71147: LD_VAR 0 1
71151: PUSH
71152: LD_VAR 0 3
71156: MINUS
71157: PUSH
71158: LD_INT 0
71160: LESS
71161: IFFALSE 71173
// min_x := 0 else
71163: LD_ADDR_VAR 0 8
71167: PUSH
71168: LD_INT 0
71170: ST_TO_ADDR
71171: GO 71189
// min_x := x - r ;
71173: LD_ADDR_VAR 0 8
71177: PUSH
71178: LD_VAR 0 1
71182: PUSH
71183: LD_VAR 0 3
71187: MINUS
71188: ST_TO_ADDR
// if y - r < 0 then
71189: LD_VAR 0 2
71193: PUSH
71194: LD_VAR 0 3
71198: MINUS
71199: PUSH
71200: LD_INT 0
71202: LESS
71203: IFFALSE 71215
// min_y := 0 else
71205: LD_ADDR_VAR 0 7
71209: PUSH
71210: LD_INT 0
71212: ST_TO_ADDR
71213: GO 71231
// min_y := y - r ;
71215: LD_ADDR_VAR 0 7
71219: PUSH
71220: LD_VAR 0 2
71224: PUSH
71225: LD_VAR 0 3
71229: MINUS
71230: ST_TO_ADDR
// max_x := x + r ;
71231: LD_ADDR_VAR 0 9
71235: PUSH
71236: LD_VAR 0 1
71240: PUSH
71241: LD_VAR 0 3
71245: PLUS
71246: ST_TO_ADDR
// max_y := y + r ;
71247: LD_ADDR_VAR 0 10
71251: PUSH
71252: LD_VAR 0 2
71256: PUSH
71257: LD_VAR 0 3
71261: PLUS
71262: ST_TO_ADDR
// for _x = min_x to max_x do
71263: LD_ADDR_VAR 0 5
71267: PUSH
71268: DOUBLE
71269: LD_VAR 0 8
71273: DEC
71274: ST_TO_ADDR
71275: LD_VAR 0 9
71279: PUSH
71280: FOR_TO
71281: IFFALSE 71382
// for _y = min_y to max_y do
71283: LD_ADDR_VAR 0 6
71287: PUSH
71288: DOUBLE
71289: LD_VAR 0 7
71293: DEC
71294: ST_TO_ADDR
71295: LD_VAR 0 10
71299: PUSH
71300: FOR_TO
71301: IFFALSE 71378
// begin if not ValidHex ( _x , _y ) then
71303: LD_VAR 0 5
71307: PPUSH
71308: LD_VAR 0 6
71312: PPUSH
71313: CALL_OW 488
71317: NOT
71318: IFFALSE 71322
// continue ;
71320: GO 71300
// if GetResourceTypeXY ( _x , _y ) then
71322: LD_VAR 0 5
71326: PPUSH
71327: LD_VAR 0 6
71331: PPUSH
71332: CALL_OW 283
71336: IFFALSE 71376
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71338: LD_ADDR_VAR 0 4
71342: PUSH
71343: LD_VAR 0 4
71347: PPUSH
71348: LD_VAR 0 4
71352: PUSH
71353: LD_INT 1
71355: PLUS
71356: PPUSH
71357: LD_VAR 0 5
71361: PUSH
71362: LD_VAR 0 6
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PPUSH
71371: CALL_OW 1
71375: ST_TO_ADDR
// end ;
71376: GO 71300
71378: POP
71379: POP
71380: GO 71280
71382: POP
71383: POP
// end ;
71384: LD_VAR 0 4
71388: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71389: LD_INT 0
71391: PPUSH
71392: PPUSH
71393: PPUSH
71394: PPUSH
71395: PPUSH
71396: PPUSH
71397: PPUSH
71398: PPUSH
// if not units then
71399: LD_VAR 0 1
71403: NOT
71404: IFFALSE 71408
// exit ;
71406: GO 71833
// result := UnitFilter ( units , [ f_ok ] ) ;
71408: LD_ADDR_VAR 0 3
71412: PUSH
71413: LD_VAR 0 1
71417: PPUSH
71418: LD_INT 50
71420: PUSH
71421: EMPTY
71422: LIST
71423: PPUSH
71424: CALL_OW 72
71428: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71429: LD_ADDR_VAR 0 8
71433: PUSH
71434: LD_VAR 0 1
71438: PUSH
71439: LD_INT 1
71441: ARRAY
71442: PPUSH
71443: CALL_OW 255
71447: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
71448: LD_ADDR_VAR 0 10
71452: PUSH
71453: LD_INT 29
71455: PUSH
71456: LD_EXP 47
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: ST_TO_ADDR
// if not result then
71465: LD_VAR 0 3
71469: NOT
71470: IFFALSE 71474
// exit ;
71472: GO 71833
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71474: LD_ADDR_VAR 0 5
71478: PUSH
71479: LD_INT 81
71481: PUSH
71482: LD_VAR 0 8
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PPUSH
71491: CALL_OW 69
71495: ST_TO_ADDR
// for i in result do
71496: LD_ADDR_VAR 0 4
71500: PUSH
71501: LD_VAR 0 3
71505: PUSH
71506: FOR_IN
71507: IFFALSE 71831
// begin tag := GetTag ( i ) + 1 ;
71509: LD_ADDR_VAR 0 9
71513: PUSH
71514: LD_VAR 0 4
71518: PPUSH
71519: CALL_OW 110
71523: PUSH
71524: LD_INT 1
71526: PLUS
71527: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71528: LD_ADDR_VAR 0 7
71532: PUSH
71533: LD_VAR 0 4
71537: PPUSH
71538: CALL_OW 250
71542: PPUSH
71543: LD_VAR 0 4
71547: PPUSH
71548: CALL_OW 251
71552: PPUSH
71553: LD_INT 6
71555: PPUSH
71556: CALL 71131 0 3
71560: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71561: LD_VAR 0 7
71565: PUSH
71566: LD_VAR 0 4
71570: PPUSH
71571: CALL_OW 264
71575: PUSH
71576: LD_VAR 0 10
71580: IN
71581: NOT
71582: AND
71583: IFFALSE 71622
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71585: LD_VAR 0 4
71589: PPUSH
71590: LD_VAR 0 7
71594: PUSH
71595: LD_INT 1
71597: ARRAY
71598: PUSH
71599: LD_INT 1
71601: ARRAY
71602: PPUSH
71603: LD_VAR 0 7
71607: PUSH
71608: LD_INT 1
71610: ARRAY
71611: PUSH
71612: LD_INT 2
71614: ARRAY
71615: PPUSH
71616: CALL_OW 116
71620: GO 71829
// if path > tag then
71622: LD_VAR 0 2
71626: PUSH
71627: LD_VAR 0 9
71631: GREATER
71632: IFFALSE 71799
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
71634: LD_ADDR_VAR 0 6
71638: PUSH
71639: LD_VAR 0 5
71643: PPUSH
71644: LD_INT 91
71646: PUSH
71647: LD_VAR 0 4
71651: PUSH
71652: LD_INT 12
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: LIST
71659: PPUSH
71660: CALL_OW 72
71664: ST_TO_ADDR
// if nearEnemy then
71665: LD_VAR 0 6
71669: IFFALSE 71697
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71671: LD_VAR 0 4
71675: PPUSH
71676: LD_VAR 0 6
71680: PPUSH
71681: LD_VAR 0 4
71685: PPUSH
71686: CALL_OW 74
71690: PPUSH
71691: CALL_OW 115
71695: GO 71797
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71697: LD_VAR 0 4
71701: PPUSH
71702: LD_VAR 0 2
71706: PUSH
71707: LD_VAR 0 9
71711: ARRAY
71712: PUSH
71713: LD_INT 1
71715: ARRAY
71716: PPUSH
71717: LD_VAR 0 2
71721: PUSH
71722: LD_VAR 0 9
71726: ARRAY
71727: PUSH
71728: LD_INT 2
71730: ARRAY
71731: PPUSH
71732: CALL_OW 297
71736: PUSH
71737: LD_INT 6
71739: GREATER
71740: IFFALSE 71783
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71742: LD_VAR 0 4
71746: PPUSH
71747: LD_VAR 0 2
71751: PUSH
71752: LD_VAR 0 9
71756: ARRAY
71757: PUSH
71758: LD_INT 1
71760: ARRAY
71761: PPUSH
71762: LD_VAR 0 2
71766: PUSH
71767: LD_VAR 0 9
71771: ARRAY
71772: PUSH
71773: LD_INT 2
71775: ARRAY
71776: PPUSH
71777: CALL_OW 114
71781: GO 71797
// SetTag ( i , tag ) ;
71783: LD_VAR 0 4
71787: PPUSH
71788: LD_VAR 0 9
71792: PPUSH
71793: CALL_OW 109
// end else
71797: GO 71829
// if enemy then
71799: LD_VAR 0 5
71803: IFFALSE 71829
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71805: LD_VAR 0 4
71809: PPUSH
71810: LD_VAR 0 5
71814: PPUSH
71815: LD_VAR 0 4
71819: PPUSH
71820: CALL_OW 74
71824: PPUSH
71825: CALL_OW 115
// end ;
71829: GO 71506
71831: POP
71832: POP
// end ;
71833: LD_VAR 0 3
71837: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71838: LD_INT 0
71840: PPUSH
71841: PPUSH
71842: PPUSH
// if not unit or IsInUnit ( unit ) then
71843: LD_VAR 0 1
71847: NOT
71848: PUSH
71849: LD_VAR 0 1
71853: PPUSH
71854: CALL_OW 310
71858: OR
71859: IFFALSE 71863
// exit ;
71861: GO 71954
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71863: LD_ADDR_VAR 0 4
71867: PUSH
71868: LD_VAR 0 1
71872: PPUSH
71873: CALL_OW 250
71877: PPUSH
71878: LD_VAR 0 2
71882: PPUSH
71883: LD_INT 1
71885: PPUSH
71886: CALL_OW 272
71890: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71891: LD_ADDR_VAR 0 5
71895: PUSH
71896: LD_VAR 0 1
71900: PPUSH
71901: CALL_OW 251
71905: PPUSH
71906: LD_VAR 0 2
71910: PPUSH
71911: LD_INT 1
71913: PPUSH
71914: CALL_OW 273
71918: ST_TO_ADDR
// if ValidHex ( x , y ) then
71919: LD_VAR 0 4
71923: PPUSH
71924: LD_VAR 0 5
71928: PPUSH
71929: CALL_OW 488
71933: IFFALSE 71954
// ComTurnXY ( unit , x , y ) ;
71935: LD_VAR 0 1
71939: PPUSH
71940: LD_VAR 0 4
71944: PPUSH
71945: LD_VAR 0 5
71949: PPUSH
71950: CALL_OW 118
// end ;
71954: LD_VAR 0 3
71958: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71959: LD_INT 0
71961: PPUSH
71962: PPUSH
// result := false ;
71963: LD_ADDR_VAR 0 3
71967: PUSH
71968: LD_INT 0
71970: ST_TO_ADDR
// if not units then
71971: LD_VAR 0 2
71975: NOT
71976: IFFALSE 71980
// exit ;
71978: GO 72025
// for i in units do
71980: LD_ADDR_VAR 0 4
71984: PUSH
71985: LD_VAR 0 2
71989: PUSH
71990: FOR_IN
71991: IFFALSE 72023
// if See ( side , i ) then
71993: LD_VAR 0 1
71997: PPUSH
71998: LD_VAR 0 4
72002: PPUSH
72003: CALL_OW 292
72007: IFFALSE 72021
// begin result := true ;
72009: LD_ADDR_VAR 0 3
72013: PUSH
72014: LD_INT 1
72016: ST_TO_ADDR
// exit ;
72017: POP
72018: POP
72019: GO 72025
// end ;
72021: GO 71990
72023: POP
72024: POP
// end ;
72025: LD_VAR 0 3
72029: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72030: LD_INT 0
72032: PPUSH
72033: PPUSH
72034: PPUSH
72035: PPUSH
// if not unit or not points then
72036: LD_VAR 0 1
72040: NOT
72041: PUSH
72042: LD_VAR 0 2
72046: NOT
72047: OR
72048: IFFALSE 72052
// exit ;
72050: GO 72142
// dist := 99999 ;
72052: LD_ADDR_VAR 0 5
72056: PUSH
72057: LD_INT 99999
72059: ST_TO_ADDR
// for i in points do
72060: LD_ADDR_VAR 0 4
72064: PUSH
72065: LD_VAR 0 2
72069: PUSH
72070: FOR_IN
72071: IFFALSE 72140
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72073: LD_ADDR_VAR 0 6
72077: PUSH
72078: LD_VAR 0 1
72082: PPUSH
72083: LD_VAR 0 4
72087: PUSH
72088: LD_INT 1
72090: ARRAY
72091: PPUSH
72092: LD_VAR 0 4
72096: PUSH
72097: LD_INT 2
72099: ARRAY
72100: PPUSH
72101: CALL_OW 297
72105: ST_TO_ADDR
// if tmpDist < dist then
72106: LD_VAR 0 6
72110: PUSH
72111: LD_VAR 0 5
72115: LESS
72116: IFFALSE 72138
// begin result := i ;
72118: LD_ADDR_VAR 0 3
72122: PUSH
72123: LD_VAR 0 4
72127: ST_TO_ADDR
// dist := tmpDist ;
72128: LD_ADDR_VAR 0 5
72132: PUSH
72133: LD_VAR 0 6
72137: ST_TO_ADDR
// end ; end ;
72138: GO 72070
72140: POP
72141: POP
// end ;
72142: LD_VAR 0 3
72146: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72147: LD_INT 0
72149: PPUSH
// uc_side := side ;
72150: LD_ADDR_OWVAR 20
72154: PUSH
72155: LD_VAR 0 1
72159: ST_TO_ADDR
// uc_nation := 3 ;
72160: LD_ADDR_OWVAR 21
72164: PUSH
72165: LD_INT 3
72167: ST_TO_ADDR
// vc_chassis := 25 ;
72168: LD_ADDR_OWVAR 37
72172: PUSH
72173: LD_INT 25
72175: ST_TO_ADDR
// vc_engine := engine_siberite ;
72176: LD_ADDR_OWVAR 39
72180: PUSH
72181: LD_INT 3
72183: ST_TO_ADDR
// vc_control := control_computer ;
72184: LD_ADDR_OWVAR 38
72188: PUSH
72189: LD_INT 3
72191: ST_TO_ADDR
// vc_weapon := 59 ;
72192: LD_ADDR_OWVAR 40
72196: PUSH
72197: LD_INT 59
72199: ST_TO_ADDR
// result := CreateVehicle ;
72200: LD_ADDR_VAR 0 5
72204: PUSH
72205: CALL_OW 45
72209: ST_TO_ADDR
// SetDir ( result , d ) ;
72210: LD_VAR 0 5
72214: PPUSH
72215: LD_VAR 0 4
72219: PPUSH
72220: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72224: LD_VAR 0 5
72228: PPUSH
72229: LD_VAR 0 2
72233: PPUSH
72234: LD_VAR 0 3
72238: PPUSH
72239: LD_INT 0
72241: PPUSH
72242: CALL_OW 48
// end ;
72246: LD_VAR 0 5
72250: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72251: LD_INT 0
72253: PPUSH
72254: PPUSH
72255: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72256: LD_ADDR_VAR 0 2
72260: PUSH
72261: LD_INT 0
72263: PUSH
72264: LD_INT 0
72266: PUSH
72267: LD_INT 0
72269: PUSH
72270: LD_INT 0
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72279: LD_VAR 0 1
72283: NOT
72284: PUSH
72285: LD_VAR 0 1
72289: PPUSH
72290: CALL_OW 264
72294: PUSH
72295: LD_INT 12
72297: PUSH
72298: LD_INT 51
72300: PUSH
72301: LD_INT 32
72303: PUSH
72304: LD_EXP 44
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: IN
72315: NOT
72316: OR
72317: IFFALSE 72321
// exit ;
72319: GO 72419
// for i := 1 to 3 do
72321: LD_ADDR_VAR 0 3
72325: PUSH
72326: DOUBLE
72327: LD_INT 1
72329: DEC
72330: ST_TO_ADDR
72331: LD_INT 3
72333: PUSH
72334: FOR_TO
72335: IFFALSE 72417
// begin tmp := GetCargo ( cargo , i ) ;
72337: LD_ADDR_VAR 0 4
72341: PUSH
72342: LD_VAR 0 1
72346: PPUSH
72347: LD_VAR 0 3
72351: PPUSH
72352: CALL_OW 289
72356: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72357: LD_ADDR_VAR 0 2
72361: PUSH
72362: LD_VAR 0 2
72366: PPUSH
72367: LD_VAR 0 3
72371: PPUSH
72372: LD_VAR 0 4
72376: PPUSH
72377: CALL_OW 1
72381: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72382: LD_ADDR_VAR 0 2
72386: PUSH
72387: LD_VAR 0 2
72391: PPUSH
72392: LD_INT 4
72394: PPUSH
72395: LD_VAR 0 2
72399: PUSH
72400: LD_INT 4
72402: ARRAY
72403: PUSH
72404: LD_VAR 0 4
72408: PLUS
72409: PPUSH
72410: CALL_OW 1
72414: ST_TO_ADDR
// end ;
72415: GO 72334
72417: POP
72418: POP
// end ; end_of_file
72419: LD_VAR 0 2
72423: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72424: LD_VAR 0 1
72428: PUSH
72429: LD_INT 200
72431: DOUBLE
72432: GREATEREQUAL
72433: IFFALSE 72441
72435: LD_INT 299
72437: DOUBLE
72438: LESSEQUAL
72439: IFTRUE 72443
72441: GO 72475
72443: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72444: LD_VAR 0 1
72448: PPUSH
72449: LD_VAR 0 2
72453: PPUSH
72454: LD_VAR 0 3
72458: PPUSH
72459: LD_VAR 0 4
72463: PPUSH
72464: LD_VAR 0 5
72468: PPUSH
72469: CALL 27850 0 5
72473: GO 72552
72475: LD_INT 300
72477: DOUBLE
72478: GREATEREQUAL
72479: IFFALSE 72487
72481: LD_INT 399
72483: DOUBLE
72484: LESSEQUAL
72485: IFTRUE 72489
72487: GO 72551
72489: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72490: LD_VAR 0 1
72494: PPUSH
72495: LD_VAR 0 2
72499: PPUSH
72500: LD_VAR 0 3
72504: PPUSH
72505: LD_VAR 0 4
72509: PPUSH
72510: LD_VAR 0 5
72514: PPUSH
72515: LD_VAR 0 6
72519: PPUSH
72520: LD_VAR 0 7
72524: PPUSH
72525: LD_VAR 0 8
72529: PPUSH
72530: LD_VAR 0 9
72534: PPUSH
72535: LD_VAR 0 10
72539: PPUSH
72540: LD_VAR 0 11
72544: PPUSH
72545: CALL 25492 0 11
72549: GO 72552
72551: POP
// end ;
72552: PPOPN 11
72554: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72555: LD_VAR 0 1
72559: PPUSH
72560: LD_VAR 0 2
72564: PPUSH
72565: LD_VAR 0 3
72569: PPUSH
72570: LD_VAR 0 4
72574: PPUSH
72575: LD_VAR 0 5
72579: PPUSH
72580: CALL 27586 0 5
// end ; end_of_file
72584: PPOPN 5
72586: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72587: LD_VAR 0 1
72591: PPUSH
72592: LD_VAR 0 2
72596: PPUSH
72597: LD_VAR 0 3
72601: PPUSH
72602: LD_VAR 0 4
72606: PPUSH
72607: LD_VAR 0 5
72611: PPUSH
72612: LD_VAR 0 6
72616: PPUSH
72617: CALL 13185 0 6
// end ;
72621: PPOPN 6
72623: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72624: CALL 13160 0 0
// end ;
72628: PPOPN 1
72630: END
