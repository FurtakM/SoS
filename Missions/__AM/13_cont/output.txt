// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 29
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 31
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 30
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 33
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 32
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 34
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 43
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 25
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 26
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 36
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 37
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 38
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 39
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 40
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 44
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 45
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 46
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 35
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 41
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 42
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// if Difficulty < 4 then
 219: LD_OWVAR 67
 223: PUSH
 224: LD_INT 4
 226: LESS
 227: IFFALSE 236
// RemoveEnvironmentArea ( sibBlockArea ) ;
 229: LD_INT 18
 231: PPUSH
 232: CALL_OW 355
// PrepareVehicles ;
 236: CALL 1245 0 0
// PrepareHeroes ;
 240: CALL 477 0 0
// PrepareAmericansRandom ;
 244: CALL 1149 0 0
// PrepareDifficulty ;
 248: CALL 8451 0 0
// Action ;
 252: CALL 5315 0 0
// end ;
 256: END
// every 0 0$1 trigger debugMode do var i , j ;
 257: LD_EXP 41
 261: IFFALSE 432
 263: GO 265
 265: DISABLE
 266: LD_INT 0
 268: PPUSH
 269: PPUSH
// begin enable ;
 270: ENABLE
// FogOff ( true ) ;
 271: LD_INT 1
 273: PPUSH
 274: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 278: LD_ADDR_VAR 0 1
 282: PUSH
 283: LD_INT 22
 285: PUSH
 286: LD_INT 1
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: LD_INT 21
 295: PUSH
 296: LD_INT 1
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 329
// SetLives ( i , 1000 ) ;
 315: LD_VAR 0 1
 319: PPUSH
 320: LD_INT 1000
 322: PPUSH
 323: CALL_OW 234
 327: GO 312
 329: POP
 330: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 331: LD_ADDR_VAR 0 1
 335: PUSH
 336: LD_INT 22
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: LD_INT 30
 351: PUSH
 352: LD_INT 0
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 30
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PPUSH
 378: CALL_OW 69
 382: PUSH
 383: FOR_IN
 384: IFFALSE 430
// for j := 1 to 3 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 3
 398: PUSH
 399: FOR_TO
 400: IFFALSE 426
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 274
 411: PPUSH
 412: LD_VAR 0 2
 416: PPUSH
 417: LD_INT 9999
 419: PPUSH
 420: CALL_OW 277
 424: GO 399
 426: POP
 427: POP
 428: GO 383
 430: POP
 431: POP
// end ;
 432: PPOPN 2
 434: END
// every 0 0$1 trigger achivCounter >= 2 do
 435: LD_EXP 42
 439: PUSH
 440: LD_INT 2
 442: GREATEREQUAL
 443: IFFALSE 455
 445: GO 447
 447: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 448: LD_STRING ACH_REMOTE
 450: PPUSH
 451: CALL_OW 543
 455: END
// every 0 0$1 trigger destroyCounter >= 30 do
 456: LD_EXP 43
 460: PUSH
 461: LD_INT 30
 463: GREATEREQUAL
 464: IFFALSE 476
 466: GO 468
 468: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 469: LD_STRING ACH_DEFMASTER
 471: PPUSH
 472: CALL_OW 543
 476: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 477: LD_INT 0
 479: PPUSH
 480: PPUSH
 481: PPUSH
 482: PPUSH
// uc_side = 1 ;
 483: LD_ADDR_OWVAR 20
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 491: LD_ADDR_EXP 1
 495: PUSH
 496: LD_STRING JMM
 498: PPUSH
 499: LD_EXP 41
 503: NOT
 504: PPUSH
 505: LD_STRING 13c_
 507: PPUSH
 508: CALL 31803 0 3
 512: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 513: LD_ADDR_EXP 2
 517: PUSH
 518: LD_STRING Stevens
 520: PPUSH
 521: LD_EXP 41
 525: NOT
 526: PPUSH
 527: LD_STRING 13c_
 529: PPUSH
 530: CALL 31803 0 3
 534: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING Lisa
 542: PPUSH
 543: LD_EXP 41
 547: NOT
 548: PPUSH
 549: LD_STRING 13c_
 551: PPUSH
 552: CALL 31803 0 3
 556: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 557: LD_ADDR_EXP 4
 561: PUSH
 562: LD_STRING Donaldson
 564: PPUSH
 565: LD_EXP 41
 569: NOT
 570: PPUSH
 571: LD_STRING 13c_
 573: PPUSH
 574: CALL 31803 0 3
 578: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 579: LD_ADDR_EXP 5
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_EXP 41
 591: NOT
 592: PPUSH
 593: LD_STRING 13c_
 595: PPUSH
 596: CALL 31803 0 3
 600: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 601: LD_ADDR_EXP 6
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_EXP 41
 613: NOT
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 31803 0 3
 622: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 623: LD_ADDR_EXP 7
 627: PUSH
 628: LD_STRING Denis
 630: PPUSH
 631: LD_EXP 41
 635: NOT
 636: PPUSH
 637: LD_STRING 13c_
 639: PPUSH
 640: CALL 31803 0 3
 644: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_STRING Brown
 652: PPUSH
 653: LD_EXP 41
 657: NOT
 658: PPUSH
 659: LD_STRING 13c_
 661: PPUSH
 662: CALL 31803 0 3
 666: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 667: LD_ADDR_EXP 9
 671: PUSH
 672: LD_STRING Gladstone
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: LD_STRING 13c_
 680: PPUSH
 681: CALL 31803 0 3
 685: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 686: LD_ADDR_EXP 10
 690: PUSH
 691: LD_STRING Houten
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: LD_STRING 13c_
 699: PPUSH
 700: CALL 31803 0 3
 704: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 705: LD_ADDR_EXP 11
 709: PUSH
 710: LD_STRING Cornel
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_STRING 13c_
 718: PPUSH
 719: CALL 31803 0 3
 723: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 724: LD_ADDR_EXP 12
 728: PUSH
 729: LD_STRING Gary
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_STRING 13c_
 737: PPUSH
 738: CALL 31803 0 3
 742: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 743: LD_ADDR_EXP 13
 747: PUSH
 748: LD_STRING Frank
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_STRING 13c_
 756: PPUSH
 757: CALL 31803 0 3
 761: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 762: LD_ADDR_EXP 14
 766: PUSH
 767: LD_STRING Kikuchi
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_STRING 13c_
 775: PPUSH
 776: CALL 31803 0 3
 780: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , true , 13c_ ) ;
 781: LD_ADDR_EXP 15
 785: PUSH
 786: LD_STRING DeltaDoctor
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: LD_STRING 13c_
 794: PPUSH
 795: CALL 31803 0 3
 799: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 800: LD_ADDR_EXP 16
 804: PUSH
 805: LD_STRING Powell
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_STRING 
 813: PPUSH
 814: CALL 31803 0 3
 818: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ] ;
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: LD_EXP 1
 828: PUSH
 829: LD_EXP 2
 833: PUSH
 834: LD_EXP 3
 838: PUSH
 839: LD_EXP 4
 843: PUSH
 844: LD_EXP 5
 848: PUSH
 849: LD_EXP 6
 853: PUSH
 854: LD_EXP 7
 858: PUSH
 859: LD_EXP 8
 863: PUSH
 864: LD_EXP 9
 868: PUSH
 869: LD_EXP 10
 873: PUSH
 874: LD_EXP 11
 878: PUSH
 879: LD_EXP 12
 883: PUSH
 884: LD_EXP 13
 888: PUSH
 889: LD_EXP 14
 893: PUSH
 894: LD_EXP 15
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 33
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 21
 943: PUSH
 944: LD_INT 2
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PPUSH
 956: CALL_OW 69
 960: ST_TO_ADDR
// for i = tmp downto 1 do
 961: LD_ADDR_VAR 0 4
 965: PUSH
 966: DOUBLE
 967: LD_VAR 0 2
 971: INC
 972: ST_TO_ADDR
 973: LD_INT 1
 975: PUSH
 976: FOR_DOWNTO
 977: IFFALSE 1014
// if not tmp [ i ] then
 979: LD_VAR 0 2
 983: PUSH
 984: LD_VAR 0 4
 988: ARRAY
 989: NOT
 990: IFFALSE 1012
// tmp := Delete ( tmp , i ) ;
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_VAR 0 4
1006: PPUSH
1007: CALL_OW 3
1011: ST_TO_ADDR
1012: GO 976
1014: POP
1015: POP
// for i = 1 to tmp do
1016: LD_ADDR_VAR 0 4
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_VAR 0 2
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1062
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1034: LD_VAR 0 2
1038: PUSH
1039: LD_VAR 0 4
1043: ARRAY
1044: PPUSH
1045: LD_VAR 0 3
1049: PUSH
1050: LD_VAR 0 4
1054: ARRAY
1055: PPUSH
1056: CALL_OW 52
1060: GO 1031
1062: POP
1063: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1064: LD_INT 22
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 25
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 69
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: PUSH
1097: LD_INT 22
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 34
1109: PUSH
1110: LD_INT 13
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PPUSH
1121: CALL_OW 69
1125: PUSH
1126: LD_INT 0
1128: EQUAL
1129: AND
1130: IFFALSE 1144
// SetClass ( JMM , 2 ) ;
1132: LD_EXP 1
1136: PPUSH
1137: LD_INT 2
1139: PPUSH
1140: CALL_OW 336
// end ;
1144: LD_VAR 0 1
1148: RET
// export function PrepareAmericansRandom ; var i ; begin
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
// uc_side = 1 ;
1153: LD_ADDR_OWVAR 20
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1161: LD_ADDR_EXP 17
1165: PUSH
1166: LD_STRING 13c_others
1168: PPUSH
1169: CALL_OW 31
1173: ST_TO_ADDR
// for i in others13 do
1174: LD_ADDR_VAR 0 2
1178: PUSH
1179: LD_EXP 17
1183: PUSH
1184: FOR_IN
1185: IFFALSE 1238
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1187: LD_VAR 0 2
1191: PPUSH
1192: LD_INT 22
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PUSH
1202: LD_INT 21
1204: PUSH
1205: LD_INT 2
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 58
1214: PUSH
1215: EMPTY
1216: LIST
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: PPUSH
1223: CALL_OW 69
1227: PUSH
1228: LD_INT 1
1230: ARRAY
1231: PPUSH
1232: CALL_OW 52
1236: GO 1184
1238: POP
1239: POP
// end ;
1240: LD_VAR 0 1
1244: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_STRING 13_VehiclesIn13_1
1260: PPUSH
1261: LD_INT 1
1263: PUSH
1264: LD_INT 5
1266: PUSH
1267: LD_INT 3
1269: PUSH
1270: LD_INT 1
1272: PUSH
1273: LD_INT 6
1275: PUSH
1276: LD_INT 100
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: PUSH
1287: LD_INT 1
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: LD_INT 3
1295: PUSH
1296: LD_INT 1
1298: PUSH
1299: LD_INT 6
1301: PUSH
1302: LD_INT 100
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 1
1315: PUSH
1316: LD_INT 5
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 1
1324: PUSH
1325: LD_INT 6
1327: PUSH
1328: LD_INT 100
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 1
1341: PUSH
1342: LD_INT 5
1344: PUSH
1345: LD_INT 3
1347: PUSH
1348: LD_INT 1
1350: PUSH
1351: LD_INT 6
1353: PUSH
1354: LD_INT 100
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 5
1370: PUSH
1371: LD_INT 3
1373: PUSH
1374: LD_INT 1
1376: PUSH
1377: LD_INT 6
1379: PUSH
1380: LD_INT 100
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: LD_INT 5
1396: PUSH
1397: LD_INT 3
1399: PUSH
1400: LD_INT 1
1402: PUSH
1403: LD_INT 6
1405: PUSH
1406: LD_INT 100
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: LD_INT 5
1422: PUSH
1423: LD_INT 3
1425: PUSH
1426: LD_INT 1
1428: PUSH
1429: LD_INT 6
1431: PUSH
1432: LD_INT 100
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_INT 1
1445: PUSH
1446: LD_INT 5
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 1
1454: PUSH
1455: LD_INT 6
1457: PUSH
1458: LD_INT 100
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: PPUSH
1479: CALL_OW 30
1483: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1484: LD_ADDR_EXP 25
1488: PUSH
1489: LD_STRING 13_ResourcesInCargo13_1
1491: PPUSH
1492: EMPTY
1493: PPUSH
1494: CALL_OW 30
1498: ST_TO_ADDR
// cargoList = [ ] ;
1499: LD_ADDR_VAR 0 6
1503: PUSH
1504: EMPTY
1505: ST_TO_ADDR
// uc_side = 1 ;
1506: LD_ADDR_OWVAR 20
1510: PUSH
1511: LD_INT 1
1513: ST_TO_ADDR
// if vehicles then
1514: LD_VAR 0 5
1518: IFFALSE 1865
// begin for i := 1 to vehicles do
1520: LD_ADDR_VAR 0 2
1524: PUSH
1525: DOUBLE
1526: LD_INT 1
1528: DEC
1529: ST_TO_ADDR
1530: LD_VAR 0 5
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1685
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1538: LD_ADDR_OWVAR 21
1542: PUSH
1543: LD_VAR 0 5
1547: PUSH
1548: LD_VAR 0 2
1552: ARRAY
1553: PUSH
1554: LD_INT 1
1556: ARRAY
1557: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1558: LD_ADDR_OWVAR 37
1562: PUSH
1563: LD_VAR 0 5
1567: PUSH
1568: LD_VAR 0 2
1572: ARRAY
1573: PUSH
1574: LD_INT 2
1576: ARRAY
1577: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1578: LD_ADDR_OWVAR 39
1582: PUSH
1583: LD_VAR 0 5
1587: PUSH
1588: LD_VAR 0 2
1592: ARRAY
1593: PUSH
1594: LD_INT 3
1596: ARRAY
1597: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1598: LD_ADDR_OWVAR 38
1602: PUSH
1603: LD_VAR 0 5
1607: PUSH
1608: LD_VAR 0 2
1612: ARRAY
1613: PUSH
1614: LD_INT 4
1616: ARRAY
1617: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1618: LD_ADDR_OWVAR 40
1622: PUSH
1623: LD_VAR 0 5
1627: PUSH
1628: LD_VAR 0 2
1632: ARRAY
1633: PUSH
1634: LD_INT 5
1636: ARRAY
1637: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1638: LD_ADDR_OWVAR 41
1642: PUSH
1643: LD_INT 40
1645: ST_TO_ADDR
// veh = CreateVehicle ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: CALL_OW 45
1655: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1656: LD_VAR 0 4
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1668: LD_VAR 0 4
1672: PPUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 0
1678: PPUSH
1679: CALL_OW 49
// end ;
1683: GO 1535
1685: POP
1686: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1687: LD_ADDR_VAR 0 6
1691: PUSH
1692: LD_INT 22
1694: PUSH
1695: LD_INT 1
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 21
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 34
1714: PUSH
1715: LD_INT 12
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: PPUSH
1727: CALL_OW 69
1731: ST_TO_ADDR
// if cargoList then
1732: LD_VAR 0 6
1736: IFFALSE 1865
// for i = 1 to cargoList do
1738: LD_ADDR_VAR 0 2
1742: PUSH
1743: DOUBLE
1744: LD_INT 1
1746: DEC
1747: ST_TO_ADDR
1748: LD_VAR 0 6
1752: PUSH
1753: FOR_TO
1754: IFFALSE 1863
// begin if resources then
1756: LD_EXP 25
1760: IFFALSE 1861
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1762: LD_VAR 0 6
1766: PUSH
1767: LD_VAR 0 2
1771: ARRAY
1772: PPUSH
1773: LD_INT 1
1775: PPUSH
1776: LD_EXP 25
1780: PUSH
1781: LD_VAR 0 2
1785: ARRAY
1786: PUSH
1787: LD_INT 1
1789: ARRAY
1790: PPUSH
1791: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1795: LD_VAR 0 6
1799: PUSH
1800: LD_VAR 0 2
1804: ARRAY
1805: PPUSH
1806: LD_INT 2
1808: PPUSH
1809: LD_EXP 25
1813: PUSH
1814: LD_VAR 0 2
1818: ARRAY
1819: PUSH
1820: LD_INT 2
1822: ARRAY
1823: PPUSH
1824: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1828: LD_VAR 0 6
1832: PUSH
1833: LD_VAR 0 2
1837: ARRAY
1838: PPUSH
1839: LD_INT 3
1841: PPUSH
1842: LD_EXP 25
1846: PUSH
1847: LD_VAR 0 2
1851: ARRAY
1852: PUSH
1853: LD_INT 3
1855: ARRAY
1856: PPUSH
1857: CALL_OW 291
// end ; end ;
1861: GO 1753
1863: POP
1864: POP
// end ; end ;
1865: LD_VAR 0 1
1869: RET
// export function PowellSupport ; var i , veh , un ; begin
1870: LD_INT 0
1872: PPUSH
1873: PPUSH
1874: PPUSH
1875: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1876: LD_ADDR_VAR 0 2
1880: PUSH
1881: DOUBLE
1882: LD_INT 1
1884: DEC
1885: ST_TO_ADDR
1886: LD_INT 4
1888: PUSH
1889: LD_INT 3
1891: PUSH
1892: LD_INT 2
1894: PUSH
1895: LD_INT 2
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_OWVAR 67
1908: ARRAY
1909: PUSH
1910: FOR_TO
1911: IFFALSE 2175
// begin uc_nation := 1 ;
1913: LD_ADDR_OWVAR 21
1917: PUSH
1918: LD_INT 1
1920: ST_TO_ADDR
// uc_side := 1 ;
1921: LD_ADDR_OWVAR 20
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// vc_engine := engine_siberite ;
1929: LD_ADDR_OWVAR 39
1933: PUSH
1934: LD_INT 3
1936: ST_TO_ADDR
// vc_control := control_manual ;
1937: LD_ADDR_OWVAR 38
1941: PUSH
1942: LD_INT 1
1944: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1945: LD_ADDR_OWVAR 40
1949: PUSH
1950: LD_INT 9
1952: PUSH
1953: LD_INT 6
1955: PUSH
1956: LD_INT 9
1958: PUSH
1959: LD_INT 5
1961: PUSH
1962: LD_INT 5
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: PUSH
1972: LD_OWVAR 67
1976: PUSH
1977: LD_INT 0
1979: PPUSH
1980: LD_INT 1
1982: PPUSH
1983: CALL_OW 12
1987: PLUS
1988: ARRAY
1989: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1990: LD_OWVAR 40
1994: PUSH
1995: LD_INT 6
1997: EQUAL
1998: IFFALSE 2027
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
2000: LD_ADDR_OWVAR 37
2004: PUSH
2005: LD_INT 5
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: LD_INT 4
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: PUSH
2019: LD_OWVAR 67
2023: ARRAY
2024: ST_TO_ADDR
2025: GO 2062
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
2027: LD_ADDR_OWVAR 37
2031: PUSH
2032: LD_INT 5
2034: PUSH
2035: LD_INT 4
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 12
2060: ARRAY
2061: ST_TO_ADDR
// veh = CreateVehicle ;
2062: LD_ADDR_VAR 0 3
2066: PUSH
2067: CALL_OW 45
2071: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2072: LD_VAR 0 3
2076: PPUSH
2077: LD_INT 2
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// SetDir ( veh , 1 ) ;
2087: LD_VAR 0 3
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: CALL_OW 233
// hc_gallery :=  ;
2099: LD_ADDR_OWVAR 33
2103: PUSH
2104: LD_STRING 
2106: ST_TO_ADDR
// hc_name :=  ;
2107: LD_ADDR_OWVAR 26
2111: PUSH
2112: LD_STRING 
2114: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2115: LD_INT 0
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 9
2123: PUSH
2124: LD_INT 8
2126: PUSH
2127: LD_INT 8
2129: PUSH
2130: LD_INT 7
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: PUSH
2139: LD_OWVAR 67
2143: ARRAY
2144: PPUSH
2145: CALL_OW 380
// un := CreateHuman ;
2149: LD_ADDR_VAR 0 4
2153: PUSH
2154: CALL_OW 44
2158: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2159: LD_VAR 0 4
2163: PPUSH
2164: LD_VAR 0 3
2168: PPUSH
2169: CALL_OW 52
// end ;
2173: GO 1910
2175: POP
2176: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: DOUBLE
2183: LD_INT 1
2185: DEC
2186: ST_TO_ADDR
2187: LD_INT 2
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 2
2195: PUSH
2196: LD_INT 1
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_OWVAR 67
2209: ARRAY
2210: PUSH
2211: FOR_TO
2212: IFFALSE 2287
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2214: LD_INT 0
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 9
2222: PUSH
2223: LD_INT 8
2225: PUSH
2226: LD_INT 8
2228: PUSH
2229: LD_INT 7
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_OWVAR 67
2242: ARRAY
2243: PPUSH
2244: CALL_OW 380
// un := CreateHuman ;
2248: LD_ADDR_VAR 0 4
2252: PUSH
2253: CALL_OW 44
2257: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2258: LD_VAR 0 4
2262: PPUSH
2263: LD_INT 1
2265: PPUSH
2266: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2270: LD_VAR 0 4
2274: PPUSH
2275: LD_INT 2
2277: PPUSH
2278: LD_INT 0
2280: PPUSH
2281: CALL_OW 49
// end ;
2285: GO 2211
2287: POP
2288: POP
// end ; end_of_file
2289: LD_VAR 0 1
2293: RET
// export function PrepareBurlak ; begin
2294: LD_INT 0
2296: PPUSH
// uc_side := 7 ;
2297: LD_ADDR_OWVAR 20
2301: PUSH
2302: LD_INT 7
2304: ST_TO_ADDR
// uc_nation := 3 ;
2305: LD_ADDR_OWVAR 21
2309: PUSH
2310: LD_INT 3
2312: ST_TO_ADDR
// vc_engine := engine_siberite ;
2313: LD_ADDR_OWVAR 39
2317: PUSH
2318: LD_INT 3
2320: ST_TO_ADDR
// vc_control := control_manual ;
2321: LD_ADDR_OWVAR 38
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2329: LD_ADDR_OWVAR 40
2333: PUSH
2334: LD_INT 44
2336: PUSH
2337: LD_INT 45
2339: PUSH
2340: LD_INT 46
2342: PUSH
2343: LD_INT 46
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: PUSH
2352: LD_OWVAR 67
2356: ARRAY
2357: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2358: LD_ADDR_OWVAR 37
2362: PUSH
2363: LD_INT 24
2365: ST_TO_ADDR
// Masha := CreateVehicle ;
2366: LD_ADDR_EXP 19
2370: PUSH
2371: CALL_OW 45
2375: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2376: LD_EXP 19
2380: PPUSH
2381: LD_INT 2
2383: PPUSH
2384: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2388: LD_EXP 19
2392: PPUSH
2393: LD_INT 3
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2403: LD_EXP 19
2407: PPUSH
2408: LD_INT 1
2410: PPUSH
2411: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2415: LD_ADDR_EXP 18
2419: PUSH
2420: LD_STRING Burlak
2422: PPUSH
2423: LD_INT 0
2425: PPUSH
2426: LD_STRING 
2428: PPUSH
2429: CALL 31803 0 3
2433: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2434: LD_EXP 18
2438: PPUSH
2439: LD_EXP 19
2443: PPUSH
2444: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2448: LD_EXP 19
2452: PPUSH
2453: LD_INT 107
2455: PPUSH
2456: LD_INT 118
2458: PPUSH
2459: CALL_OW 114
// spawnBurlak := 1 ;
2463: LD_ADDR_EXP 28
2467: PUSH
2468: LD_INT 1
2470: ST_TO_ADDR
// end ;
2471: LD_VAR 0 1
2475: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2476: LD_INT 0
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
// uc_side := 7 ;
2483: LD_ADDR_OWVAR 20
2487: PUSH
2488: LD_INT 7
2490: ST_TO_ADDR
// uc_nation := 3 ;
2491: LD_ADDR_OWVAR 21
2495: PUSH
2496: LD_INT 3
2498: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2499: LD_ADDR_EXP 20
2503: PUSH
2504: LD_STRING Gnyevko
2506: PPUSH
2507: LD_INT 0
2509: PPUSH
2510: LD_STRING 
2512: PPUSH
2513: CALL 31803 0 3
2517: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2518: LD_ADDR_EXP 21
2522: PUSH
2523: LD_STRING Titov
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: LD_STRING 
2531: PPUSH
2532: CALL 31803 0 3
2536: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2537: LD_ADDR_EXP 22
2541: PUSH
2542: LD_STRING Xavier2
2544: PPUSH
2545: LD_INT 0
2547: PPUSH
2548: LD_STRING 
2550: PPUSH
2551: CALL 31803 0 3
2555: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2556: LD_ADDR_EXP 23
2560: PUSH
2561: LD_STRING Belkov
2563: PPUSH
2564: LD_INT 0
2566: PPUSH
2567: LD_STRING 
2569: PPUSH
2570: CALL 31803 0 3
2574: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2575: LD_ADDR_EXP 24
2579: PUSH
2580: LD_STRING Lipshchin
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: LD_STRING 
2588: PPUSH
2589: CALL 31803 0 3
2593: ST_TO_ADDR
// for i = 1 to 5 do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: FOR_TO
2608: IFFALSE 2733
// begin vc_engine := engine_siberite ;
2610: LD_ADDR_OWVAR 39
2614: PUSH
2615: LD_INT 3
2617: ST_TO_ADDR
// vc_control := control_manual ;
2618: LD_ADDR_OWVAR 38
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2626: LD_ADDR_OWVAR 40
2630: PUSH
2631: LD_INT 43
2633: PUSH
2634: LD_INT 45
2636: PUSH
2637: LD_INT 45
2639: PUSH
2640: LD_INT 44
2642: PUSH
2643: LD_INT 49
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 5
2658: PPUSH
2659: CALL_OW 12
2663: ARRAY
2664: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2665: LD_ADDR_OWVAR 37
2669: PUSH
2670: LD_INT 22
2672: PUSH
2673: LD_INT 22
2675: PUSH
2676: LD_INT 24
2678: PUSH
2679: LD_INT 24
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: LIST
2686: LIST
2687: PUSH
2688: LD_OWVAR 67
2692: ARRAY
2693: ST_TO_ADDR
// veh = CreateVehicle ;
2694: LD_ADDR_VAR 0 3
2698: PUSH
2699: CALL_OW 45
2703: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2704: LD_VAR 0 3
2708: PPUSH
2709: LD_INT 2
2711: PPUSH
2712: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2716: LD_VAR 0 3
2720: PPUSH
2721: LD_INT 3
2723: PPUSH
2724: LD_INT 0
2726: PPUSH
2727: CALL_OW 49
// end ;
2731: GO 2607
2733: POP
2734: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2735: LD_ADDR_VAR 0 4
2739: PUSH
2740: LD_INT 22
2742: PUSH
2743: LD_INT 7
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 21
2752: PUSH
2753: LD_INT 2
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PUSH
2760: LD_INT 58
2762: PUSH
2763: EMPTY
2764: LIST
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: LIST
2770: PPUSH
2771: CALL_OW 69
2775: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2776: LD_EXP 20
2780: PPUSH
2781: LD_VAR 0 4
2785: PUSH
2786: LD_INT 1
2788: ARRAY
2789: PPUSH
2790: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2794: LD_EXP 21
2798: PPUSH
2799: LD_VAR 0 4
2803: PUSH
2804: LD_INT 2
2806: ARRAY
2807: PPUSH
2808: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2812: LD_EXP 22
2816: PPUSH
2817: LD_VAR 0 4
2821: PUSH
2822: LD_INT 3
2824: ARRAY
2825: PPUSH
2826: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2830: LD_EXP 23
2834: PPUSH
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 4
2842: ARRAY
2843: PPUSH
2844: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2848: LD_EXP 24
2852: PPUSH
2853: LD_VAR 0 4
2857: PUSH
2858: LD_INT 5
2860: ARRAY
2861: PPUSH
2862: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2866: LD_EXP 20
2870: PPUSH
2871: LD_INT 3
2873: PPUSH
2874: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2878: LD_EXP 21
2882: PUSH
2883: LD_EXP 24
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PPUSH
2892: LD_INT 9
2894: PPUSH
2895: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2899: LD_ADDR_VAR 0 4
2903: PUSH
2904: LD_INT 22
2906: PUSH
2907: LD_INT 7
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PPUSH
2914: CALL_OW 69
2918: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2919: LD_VAR 0 4
2923: PPUSH
2924: LD_INT 107
2926: PPUSH
2927: LD_INT 118
2929: PPUSH
2930: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2934: LD_INT 35
2936: PPUSH
2937: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2941: LD_VAR 0 4
2945: PPUSH
2946: LD_INT 34
2948: PUSH
2949: LD_INT 49
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PPUSH
2956: CALL_OW 72
2960: PPUSH
2961: LD_EXP 19
2965: PPUSH
2966: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2970: LD_VAR 0 4
2974: PPUSH
2975: LD_INT 3
2977: PUSH
2978: LD_INT 34
2980: PUSH
2981: LD_INT 49
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: PPUSH
2992: CALL_OW 72
2996: PPUSH
2997: LD_INT 107
2999: PPUSH
3000: LD_INT 118
3002: PPUSH
3003: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3007: LD_ADDR_VAR 0 5
3011: PUSH
3012: LD_EXP 21
3016: PUSH
3017: LD_EXP 24
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: PPUSH
3026: LD_INT 50
3028: PUSH
3029: EMPTY
3030: LIST
3031: PUSH
3032: LD_INT 3
3034: PUSH
3035: LD_INT 54
3037: PUSH
3038: EMPTY
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 72
3053: ST_TO_ADDR
// if bazooka then
3054: LD_VAR 0 5
3058: IFFALSE 3100
// begin for i in bazooka do
3060: LD_ADDR_VAR 0 2
3064: PUSH
3065: LD_VAR 0 5
3069: PUSH
3070: FOR_IN
3071: IFFALSE 3098
// if See ( 1 , i ) then
3073: LD_INT 1
3075: PPUSH
3076: LD_VAR 0 2
3080: PPUSH
3081: CALL_OW 292
3085: IFFALSE 3096
// ComSpaceTimeShoot ( i ) ;
3087: LD_VAR 0 2
3091: PPUSH
3092: CALL 32750 0 1
3096: GO 3070
3098: POP
3099: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3100: LD_VAR 0 4
3104: PPUSH
3105: LD_INT 34
3107: PUSH
3108: LD_INT 49
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PPUSH
3115: CALL_OW 72
3119: PUSH
3120: LD_INT 0
3122: EQUAL
3123: PUSH
3124: LD_EXP 19
3128: PPUSH
3129: CALL_OW 303
3133: OR
3134: IFFALSE 2934
// repeat wait ( 0 0$1 ) ;
3136: LD_INT 35
3138: PPUSH
3139: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3143: LD_ADDR_VAR 0 4
3147: PUSH
3148: LD_INT 22
3150: PUSH
3151: LD_INT 7
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 69
3162: PUSH
3163: LD_EXP 18
3167: DIFF
3168: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3169: LD_VAR 0 4
3173: PPUSH
3174: LD_INT 107
3176: PPUSH
3177: LD_INT 118
3179: PPUSH
3180: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3184: LD_ADDR_VAR 0 5
3188: PUSH
3189: LD_EXP 21
3193: PUSH
3194: LD_EXP 24
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PPUSH
3203: LD_INT 50
3205: PUSH
3206: EMPTY
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 54
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PPUSH
3226: CALL_OW 72
3230: ST_TO_ADDR
// if bazooka then
3231: LD_VAR 0 5
3235: IFFALSE 3277
// begin for i in bazooka do
3237: LD_ADDR_VAR 0 2
3241: PUSH
3242: LD_VAR 0 5
3246: PUSH
3247: FOR_IN
3248: IFFALSE 3275
// if See ( 1 , i ) then
3250: LD_INT 1
3252: PPUSH
3253: LD_VAR 0 2
3257: PPUSH
3258: CALL_OW 292
3262: IFFALSE 3273
// ComSpaceTimeShoot ( i ) ;
3264: LD_VAR 0 2
3268: PPUSH
3269: CALL 32750 0 1
3273: GO 3247
3275: POP
3276: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3277: LD_EXP 18
3281: PPUSH
3282: CALL_OW 302
3286: PUSH
3287: LD_EXP 18
3291: PPUSH
3292: CALL_OW 310
3296: NOT
3297: AND
3298: IFFALSE 3315
// ComMoveXY ( Burlak , 107 , 118 ) ;
3300: LD_EXP 18
3304: PPUSH
3305: LD_INT 107
3307: PPUSH
3308: LD_INT 118
3310: PPUSH
3311: CALL_OW 111
// until not tmp ;
3315: LD_VAR 0 4
3319: NOT
3320: IFFALSE 3136
// end ;
3322: LD_VAR 0 1
3326: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3327: LD_INT 0
3329: PPUSH
3330: PPUSH
3331: PPUSH
3332: PPUSH
3333: PPUSH
3334: PPUSH
// result := [ ] ;
3335: LD_ADDR_VAR 0 1
3339: PUSH
3340: EMPTY
3341: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3342: LD_ADDR_VAR 0 6
3346: PUSH
3347: LD_INT 1
3349: PPUSH
3350: LD_INT 2
3352: PPUSH
3353: CALL_OW 12
3357: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3358: LD_ADDR_VAR 0 5
3362: PUSH
3363: LD_INT 8
3365: PUSH
3366: LD_INT 9
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PUSH
3373: LD_VAR 0 6
3377: ARRAY
3378: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3379: LD_ADDR_VAR 0 2
3383: PUSH
3384: DOUBLE
3385: LD_INT 1
3387: DEC
3388: ST_TO_ADDR
3389: LD_INT 6
3391: PUSH
3392: LD_INT 8
3394: PUSH
3395: LD_INT 10
3397: PUSH
3398: LD_INT 11
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: PUSH
3407: LD_OWVAR 67
3411: ARRAY
3412: PUSH
3413: FOR_TO
3414: IFFALSE 3652
// begin uc_side := 3 ;
3416: LD_ADDR_OWVAR 20
3420: PUSH
3421: LD_INT 3
3423: ST_TO_ADDR
// uc_nation := 3 ;
3424: LD_ADDR_OWVAR 21
3428: PUSH
3429: LD_INT 3
3431: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3432: LD_INT 24
3434: PPUSH
3435: LD_INT 3
3437: PPUSH
3438: LD_INT 1
3440: PUSH
3441: LD_INT 3
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 1
3450: PPUSH
3451: LD_INT 2
3453: PPUSH
3454: CALL_OW 12
3458: ARRAY
3459: PPUSH
3460: LD_INT 46
3462: PUSH
3463: LD_INT 46
3465: PUSH
3466: LD_INT 45
3468: PUSH
3469: LD_INT 47
3471: PUSH
3472: LD_INT 49
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 1
3484: PPUSH
3485: LD_INT 5
3487: PPUSH
3488: CALL_OW 12
3492: ARRAY
3493: PPUSH
3494: LD_INT 100
3496: PPUSH
3497: CALL 36643 0 5
// veh := CreateVehicle ;
3501: LD_ADDR_VAR 0 4
3505: PUSH
3506: CALL_OW 45
3510: ST_TO_ADDR
// result := Join ( result , veh ) ;
3511: LD_ADDR_VAR 0 1
3515: PUSH
3516: LD_VAR 0 1
3520: PPUSH
3521: LD_VAR 0 4
3525: PPUSH
3526: CALL 69494 0 2
3530: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_INT 3
3538: PUSH
3539: LD_INT 5
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: PUSH
3546: LD_VAR 0 6
3550: ARRAY
3551: PPUSH
3552: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3556: LD_VAR 0 4
3560: PPUSH
3561: LD_VAR 0 5
3565: PPUSH
3566: LD_INT 0
3568: PPUSH
3569: CALL_OW 49
// if vc_control = control_manual then
3573: LD_OWVAR 38
3577: PUSH
3578: LD_INT 1
3580: EQUAL
3581: IFFALSE 3628
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3583: LD_INT 0
3585: PPUSH
3586: LD_INT 7
3588: PUSH
3589: LD_INT 8
3591: PUSH
3592: LD_INT 9
3594: PUSH
3595: LD_INT 10
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: PUSH
3604: LD_OWVAR 67
3608: ARRAY
3609: PPUSH
3610: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3614: CALL_OW 44
3618: PPUSH
3619: LD_VAR 0 4
3623: PPUSH
3624: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3628: LD_INT 18
3630: PPUSH
3631: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3635: LD_VAR 0 4
3639: PPUSH
3640: LD_INT 100
3642: PPUSH
3643: LD_INT 55
3645: PPUSH
3646: CALL_OW 114
// end ;
3650: GO 3413
3652: POP
3653: POP
// for i in result do
3654: LD_ADDR_VAR 0 2
3658: PUSH
3659: LD_VAR 0 1
3663: PUSH
3664: FOR_IN
3665: IFFALSE 3681
// SetTag ( i , 10 ) ;
3667: LD_VAR 0 2
3671: PPUSH
3672: LD_INT 10
3674: PPUSH
3675: CALL_OW 109
3679: GO 3664
3681: POP
3682: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3683: LD_EXP 45
3687: PPUSH
3688: CALL_OW 427
// end ; end_of_file
3692: LD_VAR 0 1
3696: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3697: LD_INT 0
3699: PPUSH
3700: PPUSH
3701: PPUSH
// rnd := 0 ;
3702: LD_ADDR_VAR 0 3
3706: PUSH
3707: LD_INT 0
3709: ST_TO_ADDR
// uc_side := 8 ;
3710: LD_ADDR_OWVAR 20
3714: PUSH
3715: LD_INT 8
3717: ST_TO_ADDR
// uc_nation := 2 ;
3718: LD_ADDR_OWVAR 21
3722: PUSH
3723: LD_INT 2
3725: ST_TO_ADDR
// hc_name :=  ;
3726: LD_ADDR_OWVAR 26
3730: PUSH
3731: LD_STRING 
3733: ST_TO_ADDR
// hc_gallery :=  ;
3734: LD_ADDR_OWVAR 33
3738: PUSH
3739: LD_STRING 
3741: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3742: LD_ADDR_OWVAR 29
3746: PUSH
3747: LD_INT 10
3749: PUSH
3750: LD_INT 11
3752: PUSH
3753: LD_INT 12
3755: PUSH
3756: LD_INT 12
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: PUSH
3765: LD_OWVAR 67
3769: ARRAY
3770: PUSH
3771: LD_INT 10
3773: PUSH
3774: LD_INT 11
3776: PUSH
3777: LD_INT 12
3779: PUSH
3780: LD_INT 12
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3799: LD_INT 0
3801: PPUSH
3802: LD_INT 4
3804: PPUSH
3805: LD_INT 7
3807: PUSH
3808: LD_INT 8
3810: PUSH
3811: LD_INT 9
3813: PUSH
3814: LD_INT 10
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_OWVAR 67
3827: ARRAY
3828: PPUSH
3829: CALL_OW 380
// un := CreateHuman ;
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3843: LD_VAR 0 2
3847: PPUSH
3848: LD_INT 8
3850: PUSH
3851: LD_INT 9
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PUSH
3858: LD_INT 1
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: CALL_OW 12
3868: ARRAY
3869: PPUSH
3870: LD_INT 0
3872: PPUSH
3873: CALL_OW 49
// SetTag ( un , 1 ) ;
3877: LD_VAR 0 2
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3889: LD_ADDR_VAR 0 3
3893: PUSH
3894: LD_INT 1
3896: PPUSH
3897: LD_EXP 32
3901: PPUSH
3902: CALL_OW 12
3906: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3907: LD_EXP 46
3911: PPUSH
3912: LD_VAR 0 2
3916: PPUSH
3917: LD_EXP 32
3921: PUSH
3922: LD_VAR 0 3
3926: ARRAY
3927: PUSH
3928: LD_INT 1
3930: ARRAY
3931: PPUSH
3932: LD_EXP 32
3936: PUSH
3937: LD_VAR 0 3
3941: ARRAY
3942: PUSH
3943: LD_INT 2
3945: ARRAY
3946: PPUSH
3947: LD_INT 0
3949: PPUSH
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 0
3955: PPUSH
3956: CALL_OW 595
// end ;
3960: LD_VAR 0 1
3964: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3965: LD_INT 22
3967: PUSH
3968: LD_INT 8
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: LD_INT 61
3980: PUSH
3981: EMPTY
3982: LIST
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: PUSH
3988: LD_INT 50
3990: PUSH
3991: EMPTY
3992: LIST
3993: PUSH
3994: LD_INT 33
3996: PUSH
3997: LD_INT 2
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PPUSH
4010: CALL_OW 69
4014: IFFALSE 4101
4016: GO 4018
4018: DISABLE
4019: LD_INT 0
4021: PPUSH
// begin enable ;
4022: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
4023: LD_ADDR_VAR 0 1
4027: PUSH
4028: LD_INT 22
4030: PUSH
4031: LD_INT 8
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: LD_INT 61
4043: PUSH
4044: EMPTY
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 50
4053: PUSH
4054: EMPTY
4055: LIST
4056: PUSH
4057: LD_INT 33
4059: PUSH
4060: LD_INT 2
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 69
4077: PUSH
4078: FOR_IN
4079: IFFALSE 4099
// begin wait ( 0 0$0.3 ) ;
4081: LD_INT 10
4083: PPUSH
4084: CALL_OW 67
// Connect ( i ) ;
4088: LD_VAR 0 1
4092: PPUSH
4093: CALL 40111 0 1
// end ;
4097: GO 4078
4099: POP
4100: POP
// end ;
4101: PPOPN 1
4103: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4104: LD_INT 0
4106: PPUSH
4107: PPUSH
4108: PPUSH
4109: PPUSH
4110: PPUSH
4111: PPUSH
4112: PPUSH
4113: PPUSH
4114: PPUSH
// result := [ ] ;
4115: LD_ADDR_VAR 0 1
4119: PUSH
4120: EMPTY
4121: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4122: LD_ADDR_EXP 34
4126: PUSH
4127: LD_EXP 34
4131: PUSH
4132: LD_INT 1
4134: PLUS
4135: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4136: LD_INT 22
4138: PUSH
4139: LD_INT 8
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: PUSH
4146: LD_INT 3
4148: PUSH
4149: LD_INT 58
4151: PUSH
4152: EMPTY
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PUSH
4159: LD_INT 34
4161: PUSH
4162: LD_INT 31
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: LIST
4173: PPUSH
4174: CALL_OW 69
4178: PUSH
4179: LD_INT 2
4181: LESS
4182: IFFALSE 4426
// begin uc_side := 8 ;
4184: LD_ADDR_OWVAR 20
4188: PUSH
4189: LD_INT 8
4191: ST_TO_ADDR
// uc_nation := 2 ;
4192: LD_ADDR_OWVAR 21
4196: PUSH
4197: LD_INT 2
4199: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4200: LD_INT 14
4202: PPUSH
4203: LD_INT 3
4205: PPUSH
4206: LD_INT 1
4208: PPUSH
4209: LD_INT 31
4211: PPUSH
4212: LD_INT 100
4214: PPUSH
4215: CALL 36643 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4219: LD_ADDR_VAR 0 2
4223: PUSH
4224: DOUBLE
4225: LD_INT 22
4227: PUSH
4228: LD_INT 8
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: PUSH
4235: LD_INT 3
4237: PUSH
4238: LD_INT 58
4240: PUSH
4241: EMPTY
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: LD_INT 34
4250: PUSH
4251: LD_INT 31
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: LIST
4262: PPUSH
4263: CALL_OW 69
4267: PUSH
4268: LD_INT 1
4270: PLUS
4271: DEC
4272: ST_TO_ADDR
4273: LD_INT 2
4275: PUSH
4276: FOR_TO
4277: IFFALSE 4424
// begin veh := CreateVehicle ;
4279: LD_ADDR_VAR 0 3
4283: PUSH
4284: CALL_OW 45
4288: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4289: LD_VAR 0 3
4293: PPUSH
4294: LD_INT 5
4296: PPUSH
4297: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4301: LD_ADDR_VAR 0 4
4305: PUSH
4306: LD_INT 181
4308: PUSH
4309: LD_INT 105
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 137
4318: PUSH
4319: LD_INT 6
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PUSH
4330: LD_VAR 0 2
4334: PUSH
4335: LD_INT 2
4337: MOD
4338: PUSH
4339: LD_INT 1
4341: PLUS
4342: ARRAY
4343: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4344: LD_VAR 0 3
4348: PPUSH
4349: LD_VAR 0 4
4353: PUSH
4354: LD_INT 1
4356: ARRAY
4357: PPUSH
4358: LD_VAR 0 4
4362: PUSH
4363: LD_INT 2
4365: ARRAY
4366: PPUSH
4367: LD_INT 12
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4377: LD_INT 0
4379: PPUSH
4380: LD_INT 7
4382: PUSH
4383: LD_INT 9
4385: PUSH
4386: LD_INT 10
4388: PUSH
4389: LD_INT 10
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: PUSH
4398: LD_OWVAR 67
4402: ARRAY
4403: PPUSH
4404: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4408: CALL_OW 44
4412: PPUSH
4413: LD_VAR 0 3
4417: PPUSH
4418: CALL_OW 52
// end ;
4422: GO 4276
4424: POP
4425: POP
// end ; dir := rand ( 1 , 2 ) ;
4426: LD_ADDR_VAR 0 9
4430: PUSH
4431: LD_INT 1
4433: PPUSH
4434: LD_INT 2
4436: PPUSH
4437: CALL_OW 12
4441: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4442: LD_ADDR_VAR 0 6
4446: PUSH
4447: LD_INT 8
4449: PUSH
4450: LD_INT 9
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_VAR 0 9
4461: ARRAY
4462: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4463: LD_ADDR_VAR 0 7
4467: PUSH
4468: LD_INT 6
4470: PUSH
4471: LD_INT 8
4473: PUSH
4474: LD_INT 10
4476: PUSH
4477: LD_INT 11
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: PUSH
4486: LD_OWVAR 67
4490: ARRAY
4491: PUSH
4492: LD_EXP 34
4496: PLUS
4497: ST_TO_ADDR
// if counter > 20 then
4498: LD_VAR 0 7
4502: PUSH
4503: LD_INT 20
4505: GREATER
4506: IFFALSE 4516
// counter := 20 ;
4508: LD_ADDR_VAR 0 7
4512: PUSH
4513: LD_INT 20
4515: ST_TO_ADDR
// for i := 1 to counter do
4516: LD_ADDR_VAR 0 2
4520: PUSH
4521: DOUBLE
4522: LD_INT 1
4524: DEC
4525: ST_TO_ADDR
4526: LD_VAR 0 7
4530: PUSH
4531: FOR_TO
4532: IFFALSE 4865
// begin uc_side := 8 ;
4534: LD_ADDR_OWVAR 20
4538: PUSH
4539: LD_INT 8
4541: ST_TO_ADDR
// uc_nation := 2 ;
4542: LD_ADDR_OWVAR 21
4546: PUSH
4547: LD_INT 2
4549: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4550: LD_INT 13
4552: PUSH
4553: LD_INT 14
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 1
4562: PPUSH
4563: LD_INT 2
4565: PPUSH
4566: CALL_OW 12
4570: ARRAY
4571: PPUSH
4572: LD_INT 3
4574: PPUSH
4575: LD_INT 1
4577: PUSH
4578: LD_INT 2
4580: PUSH
4581: LD_INT 5
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: PUSH
4589: LD_INT 1
4591: PPUSH
4592: LD_INT 3
4594: PPUSH
4595: CALL_OW 12
4599: ARRAY
4600: PPUSH
4601: LD_INT 27
4603: PUSH
4604: LD_INT 28
4606: PUSH
4607: LD_INT 27
4609: PUSH
4610: LD_INT 92
4612: PUSH
4613: LD_INT 29
4615: PUSH
4616: LD_INT 25
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PUSH
4627: LD_INT 1
4629: PPUSH
4630: LD_INT 6
4632: PPUSH
4633: CALL_OW 12
4637: ARRAY
4638: PPUSH
4639: LD_INT 100
4641: PPUSH
4642: CALL 36643 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4646: LD_OWVAR 40
4650: PUSH
4651: LD_INT 29
4653: EQUAL
4654: IFFALSE 4664
// vc_control := control_remote ;
4656: LD_ADDR_OWVAR 38
4660: PUSH
4661: LD_INT 2
4663: ST_TO_ADDR
// veh := CreateVehicle ;
4664: LD_ADDR_VAR 0 3
4668: PUSH
4669: CALL_OW 45
4673: ST_TO_ADDR
// result := Join ( result , veh ) ;
4674: LD_ADDR_VAR 0 1
4678: PUSH
4679: LD_VAR 0 1
4683: PPUSH
4684: LD_VAR 0 3
4688: PPUSH
4689: CALL 69494 0 2
4693: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_INT 3
4701: PUSH
4702: LD_INT 5
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: LD_VAR 0 9
4713: ARRAY
4714: PPUSH
4715: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4719: LD_VAR 0 3
4723: PPUSH
4724: LD_VAR 0 6
4728: PPUSH
4729: LD_INT 0
4731: PPUSH
4732: CALL_OW 49
// if vc_control = control_manual then
4736: LD_OWVAR 38
4740: PUSH
4741: LD_INT 1
4743: EQUAL
4744: IFFALSE 4791
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4746: LD_INT 0
4748: PPUSH
4749: LD_INT 7
4751: PUSH
4752: LD_INT 8
4754: PUSH
4755: LD_INT 9
4757: PUSH
4758: LD_INT 10
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: PUSH
4767: LD_OWVAR 67
4771: ARRAY
4772: PPUSH
4773: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4777: CALL_OW 44
4781: PPUSH
4782: LD_VAR 0 3
4786: PPUSH
4787: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4791: LD_INT 10
4793: PPUSH
4794: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4798: LD_VAR 0 3
4802: PPUSH
4803: CALL_OW 263
4807: PUSH
4808: LD_INT 2
4810: EQUAL
4811: PUSH
4812: LD_VAR 0 3
4816: PPUSH
4817: CALL_OW 312
4821: NOT
4822: AND
4823: IFFALSE 4841
// begin Connect ( veh ) ;
4825: LD_VAR 0 3
4829: PPUSH
4830: CALL 40111 0 1
// wait ( 0 0$0.3 ) ;
4834: LD_INT 10
4836: PPUSH
4837: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4841: LD_VAR 0 3
4845: PPUSH
4846: LD_INT 100
4848: PPUSH
4849: LD_INT 55
4851: PPUSH
4852: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4856: LD_INT 18
4858: PPUSH
4859: CALL_OW 67
// end ;
4863: GO 4531
4865: POP
4866: POP
// if arabianAttacksCounter = 1 then
4867: LD_EXP 34
4871: PUSH
4872: LD_INT 1
4874: EQUAL
4875: IFFALSE 4881
// DestroySibDeposit ;
4877: CALL 3697 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4881: LD_EXP 34
4885: PUSH
4886: LD_INT 4
4888: PUSH
4889: LD_INT 3
4891: PUSH
4892: LD_INT 3
4894: PUSH
4895: LD_INT 2
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: PUSH
4904: LD_OWVAR 67
4908: ARRAY
4909: MOD
4910: PUSH
4911: LD_INT 0
4913: EQUAL
4914: IFFALSE 5272
// begin tmp := rand ( 0 , 2 ) ;
4916: LD_ADDR_VAR 0 8
4920: PUSH
4921: LD_INT 0
4923: PPUSH
4924: LD_INT 2
4926: PPUSH
4927: CALL_OW 12
4931: ST_TO_ADDR
// if not tmp then
4932: LD_VAR 0 8
4936: NOT
4937: IFFALSE 5098
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4939: LD_ADDR_VAR 0 2
4943: PUSH
4944: DOUBLE
4945: LD_INT 1
4947: DEC
4948: ST_TO_ADDR
4949: LD_INT 3
4951: PUSH
4952: LD_INT 4
4954: PUSH
4955: LD_INT 4
4957: PUSH
4958: LD_INT 5
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: PUSH
4967: LD_OWVAR 67
4971: ARRAY
4972: PUSH
4973: FOR_TO
4974: IFFALSE 5094
// begin uc_side := 8 ;
4976: LD_ADDR_OWVAR 20
4980: PUSH
4981: LD_INT 8
4983: ST_TO_ADDR
// uc_nation := 2 ;
4984: LD_ADDR_OWVAR 21
4988: PUSH
4989: LD_INT 2
4991: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4992: LD_INT 0
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: LD_INT 7
5000: PUSH
5001: LD_INT 8
5003: PUSH
5004: LD_INT 9
5006: PUSH
5007: LD_INT 10
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: PUSH
5016: LD_OWVAR 67
5020: ARRAY
5021: PPUSH
5022: CALL_OW 380
// un := CreateHuman ;
5026: LD_ADDR_VAR 0 5
5030: PUSH
5031: CALL_OW 44
5035: ST_TO_ADDR
// result := Join ( result , un ) ;
5036: LD_ADDR_VAR 0 1
5040: PUSH
5041: LD_VAR 0 1
5045: PPUSH
5046: LD_VAR 0 5
5050: PPUSH
5051: CALL 69494 0 2
5055: ST_TO_ADDR
// if Prob ( 60 ) then
5056: LD_INT 60
5058: PPUSH
5059: CALL_OW 13
5063: IFFALSE 5077
// SetClass ( un , class_mortar ) ;
5065: LD_VAR 0 5
5069: PPUSH
5070: LD_INT 8
5072: PPUSH
5073: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5077: LD_VAR 0 5
5081: PPUSH
5082: LD_INT 16
5084: PPUSH
5085: LD_INT 0
5087: PPUSH
5088: CALL_OW 49
// end ;
5092: GO 4973
5094: POP
5095: POP
// end else
5096: GO 5262
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5098: LD_ADDR_VAR 0 2
5102: PUSH
5103: DOUBLE
5104: LD_INT 1
5106: DEC
5107: ST_TO_ADDR
5108: LD_INT 2
5110: PUSH
5111: LD_INT 3
5113: PUSH
5114: LD_INT 3
5116: PUSH
5117: LD_INT 4
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: PUSH
5126: LD_OWVAR 67
5130: ARRAY
5131: PUSH
5132: FOR_TO
5133: IFFALSE 5260
// begin uc_side := 8 ;
5135: LD_ADDR_OWVAR 20
5139: PUSH
5140: LD_INT 8
5142: ST_TO_ADDR
// uc_nation := 0 ;
5143: LD_ADDR_OWVAR 21
5147: PUSH
5148: LD_INT 0
5150: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5151: LD_ADDR_OWVAR 28
5155: PUSH
5156: LD_INT 17
5158: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5159: LD_ADDR_OWVAR 31
5163: PUSH
5164: LD_INT 3
5166: PUSH
5167: LD_INT 0
5169: PUSH
5170: LD_INT 0
5172: PUSH
5173: LD_INT 0
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5182: LD_ADDR_OWVAR 29
5186: PUSH
5187: LD_INT 10
5189: PUSH
5190: LD_INT 10
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: ST_TO_ADDR
// hc_gallery :=  ;
5197: LD_ADDR_OWVAR 33
5201: PUSH
5202: LD_STRING 
5204: ST_TO_ADDR
// hc_name :=  ;
5205: LD_ADDR_OWVAR 26
5209: PUSH
5210: LD_STRING 
5212: ST_TO_ADDR
// un := CreateHuman ;
5213: LD_ADDR_VAR 0 5
5217: PUSH
5218: CALL_OW 44
5222: ST_TO_ADDR
// result := Join ( result , un ) ;
5223: LD_ADDR_VAR 0 1
5227: PUSH
5228: LD_VAR 0 1
5232: PPUSH
5233: LD_VAR 0 5
5237: PPUSH
5238: CALL 69494 0 2
5242: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5243: LD_VAR 0 5
5247: PPUSH
5248: LD_INT 16
5250: PPUSH
5251: LD_INT 0
5253: PPUSH
5254: CALL_OW 49
// end ;
5258: GO 5132
5260: POP
5261: POP
// end ; if sibDeposits then
5262: LD_EXP 32
5266: IFFALSE 5272
// DestroySibDeposit ;
5268: CALL 3697 0 0
// end ; for i in result do
5272: LD_ADDR_VAR 0 2
5276: PUSH
5277: LD_VAR 0 1
5281: PUSH
5282: FOR_IN
5283: IFFALSE 5299
// SetTag ( i , 10 ) ;
5285: LD_VAR 0 2
5289: PPUSH
5290: LD_INT 10
5292: PPUSH
5293: CALL_OW 109
5297: GO 5282
5299: POP
5300: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5301: LD_EXP 44
5305: PPUSH
5306: CALL_OW 427
// end ; end_of_file
5310: LD_VAR 0 1
5314: RET
// export function Action ; var tmp ; begin
5315: LD_INT 0
5317: PPUSH
5318: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5319: LD_ADDR_VAR 0 2
5323: PUSH
5324: LD_INT 22
5326: PUSH
5327: LD_INT 1
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PUSH
5334: LD_INT 21
5336: PUSH
5337: LD_INT 2
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PPUSH
5348: CALL_OW 69
5352: ST_TO_ADDR
// InGameOn ;
5353: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5357: LD_VAR 0 2
5361: PPUSH
5362: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5366: LD_INT 22
5368: PUSH
5369: LD_INT 1
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PUSH
5376: LD_INT 21
5378: PUSH
5379: LD_INT 2
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: PPUSH
5390: CALL_OW 69
5394: PPUSH
5395: LD_INT 69
5397: PPUSH
5398: LD_INT 94
5400: PPUSH
5401: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5405: LD_EXP 1
5409: PPUSH
5410: LD_STRING D2-JMM-1
5412: PPUSH
5413: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5417: LD_VAR 0 2
5421: PPUSH
5422: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5426: LD_EXP 2
5430: PPUSH
5431: LD_STRING D2-Huck-1
5433: PPUSH
5434: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5438: LD_VAR 0 2
5442: PPUSH
5443: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5447: LD_EXP 1
5451: PPUSH
5452: LD_STRING D2-JMM-2
5454: PPUSH
5455: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5459: LD_VAR 0 2
5463: PPUSH
5464: CALL_OW 87
// InGameOff ;
5468: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5472: LD_STRING M1
5474: PPUSH
5475: CALL_OW 337
// SaveForQuickRestart ;
5479: CALL_OW 22
// wait ( 10 10$00 ) ;
5483: LD_INT 21000
5485: PPUSH
5486: CALL_OW 67
// DialogueOn ;
5490: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5494: LD_EXP 16
5498: PPUSH
5499: LD_STRING D3-Pow-1
5501: PPUSH
5502: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5506: LD_EXP 1
5510: PPUSH
5511: LD_STRING D3-JMM-1
5513: PPUSH
5514: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5518: LD_EXP 16
5522: PPUSH
5523: LD_STRING D3-Pow-2
5525: PPUSH
5526: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5530: LD_EXP 1
5534: PPUSH
5535: LD_STRING D3-JMM-2
5537: PPUSH
5538: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5542: LD_EXP 16
5546: PPUSH
5547: LD_STRING D3-Pow-3
5549: PPUSH
5550: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5554: LD_EXP 1
5558: PPUSH
5559: LD_STRING D3-JMM-3
5561: PPUSH
5562: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5566: LD_EXP 16
5570: PPUSH
5571: LD_STRING D3-Pow-4
5573: PPUSH
5574: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5578: LD_EXP 1
5582: PPUSH
5583: LD_STRING D3-JMM-4
5585: PPUSH
5586: CALL_OW 88
// DialogueOff ;
5590: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5594: LD_STRING M2
5596: PPUSH
5597: CALL_OW 337
// wait ( 2 2$30 ) ;
5601: LD_INT 5250
5603: PPUSH
5604: CALL_OW 67
// PrepareBurlak ;
5608: CALL 2294 0 0
// BurlakArmy ;
5612: CALL 2476 0 0
// end ;
5616: LD_VAR 0 1
5620: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5621: LD_INT 1
5623: PPUSH
5624: LD_EXP 19
5628: PPUSH
5629: CALL_OW 292
5633: IFFALSE 5792
5635: GO 5637
5637: DISABLE
// begin DialogueOn ;
5638: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5642: LD_EXP 19
5646: PPUSH
5647: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5651: LD_INT 22
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 26
5663: PUSH
5664: LD_INT 1
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 2
5673: PUSH
5674: LD_INT 25
5676: PUSH
5677: LD_INT 1
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: PUSH
5684: LD_INT 25
5686: PUSH
5687: LD_INT 2
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PUSH
5694: LD_INT 25
5696: PUSH
5697: LD_INT 3
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PUSH
5704: LD_INT 25
5706: PUSH
5707: LD_INT 4
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: PUSH
5714: LD_INT 25
5716: PUSH
5717: LD_INT 5
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: LIST
5736: PPUSH
5737: CALL_OW 69
5741: PPUSH
5742: LD_STRING D5-Sol1-1
5744: PPUSH
5745: LD_STRING D5-FSol1-1
5747: PPUSH
5748: CALL 8250 0 3
// Say ( JMM , D5-JMM-1 ) ;
5752: LD_EXP 1
5756: PPUSH
5757: LD_STRING D5-JMM-1
5759: PPUSH
5760: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5764: LD_EXP 18
5768: PPUSH
5769: LD_STRING DAmer-Bur-1
5771: PPUSH
5772: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5776: LD_EXP 1
5780: PPUSH
5781: LD_STRING DAmer-JMM-1
5783: PPUSH
5784: CALL_OW 88
// DialogueOff ;
5788: CALL_OW 7
// end ;
5792: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5793: LD_INT 4
5795: PPUSH
5796: LD_INT 22
5798: PUSH
5799: LD_INT 7
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 70
5810: IFFALSE 6209
5812: GO 5814
5814: DISABLE
5815: LD_INT 0
5817: PPUSH
// begin enable ;
5818: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5819: LD_ADDR_VAR 0 1
5823: PUSH
5824: LD_INT 4
5826: PPUSH
5827: LD_INT 22
5829: PUSH
5830: LD_INT 7
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PPUSH
5837: CALL_OW 70
5841: PUSH
5842: FOR_IN
5843: IFFALSE 6207
// begin if i = Burlak or i = Masha then
5845: LD_VAR 0 1
5849: PUSH
5850: LD_EXP 18
5854: EQUAL
5855: PUSH
5856: LD_VAR 0 1
5860: PUSH
5861: LD_EXP 19
5865: EQUAL
5866: OR
5867: IFFALSE 6014
// begin RemoveUnit ( i ) ;
5869: LD_VAR 0 1
5873: PPUSH
5874: CALL_OW 64
// DialogueOn ;
5878: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5882: LD_EXP 1
5886: PPUSH
5887: LD_STRING D5a-JMM-1
5889: PPUSH
5890: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5894: LD_INT 22
5896: PUSH
5897: LD_INT 1
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: LD_INT 26
5906: PUSH
5907: LD_INT 1
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: LD_INT 2
5916: PUSH
5917: LD_INT 25
5919: PUSH
5920: LD_INT 1
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 25
5929: PUSH
5930: LD_INT 2
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 25
5939: PUSH
5940: LD_INT 3
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: LD_INT 25
5949: PUSH
5950: LD_INT 4
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 25
5959: PUSH
5960: LD_INT 5
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: LIST
5979: PPUSH
5980: CALL_OW 69
5984: PPUSH
5985: LD_STRING D5a-Sol1-1
5987: PPUSH
5988: LD_STRING D5-FSol1-1
5990: PPUSH
5991: CALL 8250 0 3
// DialogueOff ;
5995: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5999: LD_STRING M2b
6001: PPUSH
6002: CALL_OW 337
// spawnBurlak = 0 ;
6006: LD_ADDR_EXP 28
6010: PUSH
6011: LD_INT 0
6013: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
6014: LD_VAR 0 1
6018: PPUSH
6019: CALL_OW 247
6023: PUSH
6024: LD_INT 2
6026: EQUAL
6027: PUSH
6028: LD_VAR 0 1
6032: PPUSH
6033: CALL_OW 263
6037: PUSH
6038: LD_INT 1
6040: EQUAL
6041: AND
6042: IFFALSE 6170
// begin case IsDrivenBy ( i ) of Gnyevko :
6044: LD_VAR 0 1
6048: PPUSH
6049: CALL_OW 311
6053: PUSH
6054: LD_EXP 20
6058: DOUBLE
6059: EQUAL
6060: IFTRUE 6064
6062: GO 6077
6064: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6065: LD_INT 1
6067: PPUSH
6068: LD_STRING 13_Gnyevko_1
6070: PPUSH
6071: CALL_OW 39
6075: GO 6170
6077: LD_EXP 21
6081: DOUBLE
6082: EQUAL
6083: IFTRUE 6087
6085: GO 6100
6087: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6088: LD_INT 1
6090: PPUSH
6091: LD_STRING 13_Titov_1
6093: PPUSH
6094: CALL_OW 39
6098: GO 6170
6100: LD_EXP 22
6104: DOUBLE
6105: EQUAL
6106: IFTRUE 6110
6108: GO 6123
6110: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6111: LD_INT 1
6113: PPUSH
6114: LD_STRING 13_Xavier_1
6116: PPUSH
6117: CALL_OW 39
6121: GO 6170
6123: LD_EXP 23
6127: DOUBLE
6128: EQUAL
6129: IFTRUE 6133
6131: GO 6146
6133: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6134: LD_INT 1
6136: PPUSH
6137: LD_STRING 13_Belkov_1
6139: PPUSH
6140: CALL_OW 39
6144: GO 6170
6146: LD_EXP 24
6150: DOUBLE
6151: EQUAL
6152: IFTRUE 6156
6154: GO 6169
6156: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6157: LD_INT 1
6159: PPUSH
6160: LD_STRING 13_Lipshchin_1
6162: PPUSH
6163: CALL_OW 39
6167: GO 6170
6169: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6170: LD_VAR 0 1
6174: PPUSH
6175: CALL_OW 264
6179: PUSH
6180: LD_INT 49
6182: EQUAL
6183: IFFALSE 6196
// DestroyUnit ( i ) else
6185: LD_VAR 0 1
6189: PPUSH
6190: CALL_OW 65
6194: GO 6205
// RemoveUnit ( i ) ;
6196: LD_VAR 0 1
6200: PPUSH
6201: CALL_OW 64
// end ;
6205: GO 5842
6207: POP
6208: POP
// end ;
6209: PPOPN 1
6211: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6212: LD_EXP 18
6216: PPUSH
6217: CALL_OW 302
6221: PUSH
6222: LD_EXP 19
6226: PPUSH
6227: CALL_OW 256
6231: PUSH
6232: LD_INT 500
6234: LESS
6235: AND
6236: PUSH
6237: LD_EXP 19
6241: PPUSH
6242: CALL_OW 255
6246: PUSH
6247: LD_INT 7
6249: EQUAL
6250: AND
6251: IFFALSE 6271
6253: GO 6255
6255: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6256: LD_EXP 18
6260: PPUSH
6261: LD_INT 107
6263: PPUSH
6264: LD_INT 118
6266: PPUSH
6267: CALL_OW 111
6271: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6272: LD_EXP 18
6276: PPUSH
6277: CALL_OW 301
6281: PUSH
6282: LD_EXP 28
6286: PUSH
6287: LD_INT 1
6289: EQUAL
6290: AND
6291: IFFALSE 6424
6293: GO 6295
6295: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6296: LD_EXP 1
6300: PPUSH
6301: LD_STRING D5b-JMM-1
6303: PPUSH
6304: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6308: LD_INT 22
6310: PUSH
6311: LD_INT 1
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 26
6320: PUSH
6321: LD_INT 1
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PUSH
6328: LD_INT 2
6330: PUSH
6331: LD_INT 25
6333: PUSH
6334: LD_INT 1
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 25
6343: PUSH
6344: LD_INT 2
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 25
6353: PUSH
6354: LD_INT 3
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: LD_INT 25
6363: PUSH
6364: LD_INT 4
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 25
6373: PUSH
6374: LD_INT 5
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL_OW 69
6398: PPUSH
6399: LD_STRING D5b-Sol1-1
6401: PPUSH
6402: LD_STRING 
6404: PPUSH
6405: CALL 8250 0 3
// ChangeMissionObjectives ( M2a ) ;
6409: LD_STRING M2a
6411: PPUSH
6412: CALL_OW 337
// burlakStatus := 1 ;
6416: LD_ADDR_EXP 29
6420: PUSH
6421: LD_INT 1
6423: ST_TO_ADDR
// end ;
6424: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6425: LD_EXP 2
6429: PPUSH
6430: CALL_OW 301
6434: IFFALSE 6571
6436: GO 6438
6438: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6439: LD_EXP 1
6443: PPUSH
6444: LD_STRING D6-JMM-1
6446: PPUSH
6447: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6451: LD_INT 22
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 26
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 2
6473: PUSH
6474: LD_INT 25
6476: PUSH
6477: LD_INT 1
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: PUSH
6484: LD_INT 25
6486: PUSH
6487: LD_INT 2
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: LD_INT 25
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: LD_INT 25
6506: PUSH
6507: LD_INT 4
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 25
6516: PUSH
6517: LD_INT 5
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: PPUSH
6537: CALL_OW 69
6541: PPUSH
6542: LD_STRING D6-Sol1-1
6544: PPUSH
6545: LD_STRING 
6547: PPUSH
6548: CALL 8250 0 3
// Say ( JMM , D6-JMM-2 ) ;
6552: LD_EXP 1
6556: PPUSH
6557: LD_STRING D6-JMM-2
6559: PPUSH
6560: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6564: LD_STRING M1a
6566: PPUSH
6567: CALL_OW 337
// end ;
6571: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6572: LD_INT 25
6574: PPUSH
6575: LD_INT 1
6577: PPUSH
6578: CALL_OW 321
6582: PUSH
6583: LD_INT 2
6585: EQUAL
6586: IFFALSE 6603
6588: GO 6590
6590: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6591: LD_EXP 2
6595: PPUSH
6596: LD_STRING D6-Huck-2
6598: PPUSH
6599: CALL_OW 88
6603: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6604: LD_INT 22
6606: PUSH
6607: LD_INT 1
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 2
6616: PUSH
6617: LD_INT 34
6619: PUSH
6620: LD_INT 8
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: PUSH
6627: LD_INT 35
6629: PUSH
6630: LD_INT 8
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PPUSH
6646: CALL_OW 69
6650: PUSH
6651: LD_INT 5
6653: PPUSH
6654: LD_INT 22
6656: PUSH
6657: LD_INT 1
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 21
6666: PUSH
6667: LD_INT 3
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 30
6676: PUSH
6677: LD_INT 1
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: LD_INT 3
6686: PUSH
6687: LD_INT 57
6689: PUSH
6690: EMPTY
6691: LIST
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: PPUSH
6703: CALL_OW 70
6707: AND
6708: PUSH
6709: LD_INT 5
6711: PPUSH
6712: LD_INT 22
6714: PUSH
6715: LD_INT 1
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: LD_INT 21
6724: PUSH
6725: LD_INT 3
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: LD_INT 30
6734: PUSH
6735: LD_INT 5
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PUSH
6742: LD_INT 3
6744: PUSH
6745: LD_INT 57
6747: PUSH
6748: EMPTY
6749: LIST
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: PPUSH
6761: CALL_OW 70
6765: AND
6766: IFFALSE 6808
6768: GO 6770
6770: DISABLE
// begin DialogueOn ;
6771: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6775: LD_EXP 1
6779: PPUSH
6780: LD_STRING D7-JMM-1
6782: PPUSH
6783: CALL_OW 88
// DialogueOff ;
6787: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6791: LD_STRING M4
6793: PPUSH
6794: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6798: LD_INT 5
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 424
// end ;
6808: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6809: LD_INT 6
6811: PPUSH
6812: LD_INT 22
6814: PUSH
6815: LD_INT 1
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 25
6824: PUSH
6825: LD_INT 4
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PPUSH
6836: CALL_OW 70
6840: PUSH
6841: LD_EXP 38
6845: PUSH
6846: LD_INT 1
6848: EQUAL
6849: AND
6850: PUSH
6851: LD_EXP 30
6855: PUSH
6856: LD_INT 0
6858: EQUAL
6859: AND
6860: IFFALSE 6925
6862: GO 6864
6864: DISABLE
// begin enable ;
6865: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6866: LD_ADDR_EXP 27
6870: PUSH
6871: LD_INT 6
6873: PPUSH
6874: LD_INT 22
6876: PUSH
6877: LD_INT 1
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 25
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PPUSH
6898: CALL_OW 70
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6907: LD_INT 6
6909: PPUSH
6910: LD_INT 0
6912: PPUSH
6913: CALL_OW 424
// radationResearched := 1 ;
6917: LD_ADDR_EXP 30
6921: PUSH
6922: LD_INT 1
6924: ST_TO_ADDR
// end ;
6925: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6926: LD_EXP 27
6930: PPUSH
6931: CALL_OW 301
6935: PUSH
6936: LD_EXP 30
6940: PUSH
6941: LD_INT 1
6943: EQUAL
6944: AND
6945: IFFALSE 6981
6947: GO 6949
6949: DISABLE
// begin enable ;
6950: ENABLE
// radationResearched = 0 ;
6951: LD_ADDR_EXP 30
6955: PUSH
6956: LD_INT 0
6958: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6959: LD_INT 6
6961: PPUSH
6962: LD_INT 1
6964: PPUSH
6965: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6969: LD_EXP 1
6973: PPUSH
6974: LD_STRING D9a-JMM-1
6976: PPUSH
6977: CALL_OW 88
// end ; end_of_file
6981: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6982: LD_VAR 0 5
6986: PUSH
6987: LD_INT 8
6989: EQUAL
6990: PUSH
6991: LD_EXP 36
6995: PUSH
6996: LD_INT 0
6998: EQUAL
6999: AND
7000: IFFALSE 7053
// begin eventVar1 := 1 ;
7002: LD_ADDR_EXP 36
7006: PUSH
7007: LD_INT 1
7009: ST_TO_ADDR
// DialogueOn ;
7010: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
7014: LD_EXP 1
7018: PPUSH
7019: LD_STRING D6a-JMM-1
7021: PPUSH
7022: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
7026: LD_EXP 16
7030: PPUSH
7031: LD_STRING D6a-Pow-1
7033: PPUSH
7034: CALL_OW 94
// DialogueOff ;
7038: CALL_OW 7
// wait ( 3 3$0 ) ;
7042: LD_INT 6300
7044: PPUSH
7045: CALL_OW 67
// PowellSupport ;
7049: CALL 1870 0 0
// end ; end ;
7053: PPOPN 5
7055: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7056: LD_VAR 0 1
7060: PPUSH
7061: CALL 26909 0 1
// if un = JMM then
7065: LD_VAR 0 1
7069: PUSH
7070: LD_EXP 1
7074: EQUAL
7075: IFFALSE 7084
// YouLost ( JMM ) ;
7077: LD_STRING JMM
7079: PPUSH
7080: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7084: LD_VAR 0 1
7088: PPUSH
7089: CALL_OW 264
7093: PUSH
7094: LD_INT 31
7096: EQUAL
7097: IFFALSE 7113
// achivCounter := achivCounter + 1 ;
7099: LD_ADDR_EXP 42
7103: PUSH
7104: LD_EXP 42
7108: PUSH
7109: LD_INT 1
7111: PLUS
7112: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7113: LD_VAR 0 1
7117: PPUSH
7118: CALL_OW 255
7122: PUSH
7123: LD_INT 1
7125: NONEQUAL
7126: PUSH
7127: LD_VAR 0 1
7131: PPUSH
7132: CALL_OW 247
7136: PUSH
7137: LD_INT 2
7139: EQUAL
7140: AND
7141: IFFALSE 7157
// destroyCounter := destroyCounter + 1 ;
7143: LD_ADDR_EXP 43
7147: PUSH
7148: LD_EXP 43
7152: PUSH
7153: LD_INT 1
7155: PLUS
7156: ST_TO_ADDR
// end ;
7157: PPOPN 1
7159: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7160: LD_VAR 0 2
7164: PUSH
7165: LD_EXP 19
7169: EQUAL
7170: IFFALSE 7179
// SetAchievement ( ACH_MASHA ) ;
7172: LD_STRING ACH_MASHA
7174: PPUSH
7175: CALL_OW 543
// end ;
7179: PPOPN 4
7181: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7182: LD_VAR 0 1
7186: PPUSH
7187: LD_VAR 0 2
7191: PPUSH
7192: CALL 27029 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7196: LD_VAR 0 1
7200: PPUSH
7201: CALL_OW 264
7205: PUSH
7206: LD_INT 8
7208: EQUAL
7209: PUSH
7210: LD_EXP 37
7214: PUSH
7215: LD_INT 0
7217: EQUAL
7218: AND
7219: IFFALSE 7288
// begin eventVar2 := 1 ;
7221: LD_ADDR_EXP 37
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
// DialogueOn ;
7229: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7233: LD_EXP 1
7237: PPUSH
7238: LD_STRING D6b-JMM-1
7240: PPUSH
7241: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7245: LD_EXP 16
7249: PPUSH
7250: LD_STRING D6b-Pow-1
7252: PPUSH
7253: CALL_OW 94
// DialogueOff ;
7257: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7261: LD_INT 5
7263: PPUSH
7264: LD_INT 1
7266: PPUSH
7267: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7271: LD_INT 7
7273: PPUSH
7274: LD_INT 1
7276: PPUSH
7277: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7281: LD_STRING M3
7283: PPUSH
7284: CALL_OW 337
// end ; end ;
7288: PPOPN 2
7290: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7291: LD_VAR 0 2
7295: PPUSH
7296: LD_VAR 0 3
7300: PPUSH
7301: LD_INT 5
7303: PPUSH
7304: CALL_OW 309
7308: PUSH
7309: LD_EXP 38
7313: PUSH
7314: LD_INT 0
7316: EQUAL
7317: AND
7318: IFFALSE 7543
// begin eventVar3 := 1 ;
7320: LD_ADDR_EXP 38
7324: PUSH
7325: LD_INT 1
7327: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7328: LD_INT 175
7330: PPUSH
7331: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7335: LD_INT 7
7337: PPUSH
7338: LD_INT 22
7340: PUSH
7341: LD_INT 1
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 21
7350: PUSH
7351: LD_INT 2
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 34
7360: PUSH
7361: LD_INT 11
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: PPUSH
7373: CALL_OW 70
7377: IFFALSE 7396
// begin radarOnSpot := 1 ;
7379: LD_ADDR_EXP 31
7383: PUSH
7384: LD_INT 1
7386: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7387: LD_STRING M3a
7389: PPUSH
7390: CALL_OW 337
// end else
7394: GO 7403
// ChangeMissionObjectives ( M3b ) ;
7396: LD_STRING M3b
7398: PPUSH
7399: CALL_OW 337
// DialogueOn ;
7403: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7407: LD_EXP 2
7411: PPUSH
7412: LD_STRING D8-Huck-1
7414: PPUSH
7415: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7419: LD_EXP 1
7423: PPUSH
7424: LD_STRING D8-JMM-1
7426: PPUSH
7427: CALL_OW 88
// if IsOk ( Stevens ) then
7431: LD_EXP 2
7435: PPUSH
7436: CALL_OW 302
7440: IFFALSE 7502
// begin Say ( Stevens , D8-Huck-2 ) ;
7442: LD_EXP 2
7446: PPUSH
7447: LD_STRING D8-Huck-2
7449: PPUSH
7450: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7454: LD_EXP 1
7458: PPUSH
7459: LD_STRING D8-JMM-2
7461: PPUSH
7462: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7466: LD_EXP 2
7470: PPUSH
7471: LD_STRING D8-Huck-3
7473: PPUSH
7474: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7478: LD_EXP 1
7482: PPUSH
7483: LD_STRING D8-JMM-3
7485: PPUSH
7486: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7490: LD_EXP 2
7494: PPUSH
7495: LD_STRING D8-Huck-4
7497: PPUSH
7498: CALL_OW 88
// end ; DialogueOff ;
7502: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7506: LD_INT 5
7508: PPUSH
7509: LD_INT 0
7511: PPUSH
7512: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7516: LD_INT 7
7518: PPUSH
7519: LD_INT 0
7521: PPUSH
7522: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7526: LD_INT 6
7528: PPUSH
7529: LD_INT 1
7531: PPUSH
7532: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7536: LD_STRING M5
7538: PPUSH
7539: CALL_OW 337
// end ; end ;
7543: PPOPN 3
7545: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7546: LD_EXP 27
7550: PPUSH
7551: CALL_OW 302
7555: PUSH
7556: LD_VAR 0 2
7560: PUSH
7561: LD_EXP 27
7565: EQUAL
7566: AND
7567: PUSH
7568: LD_EXP 39
7572: PUSH
7573: LD_INT 0
7575: EQUAL
7576: AND
7577: PUSH
7578: LD_EXP 38
7582: PUSH
7583: LD_INT 1
7585: EQUAL
7586: AND
7587: PUSH
7588: LD_VAR 0 1
7592: PPUSH
7593: LD_INT 1
7595: PPUSH
7596: CALL_OW 268
7600: PUSH
7601: LD_INT 11
7603: EQUAL
7604: PUSH
7605: LD_VAR 0 1
7609: PPUSH
7610: LD_INT 2
7612: PPUSH
7613: CALL_OW 268
7617: PUSH
7618: LD_INT 11
7620: EQUAL
7621: OR
7622: AND
7623: IFFALSE 7633
// eventVar4 := 1 ;
7625: LD_ADDR_EXP 39
7629: PUSH
7630: LD_INT 1
7632: ST_TO_ADDR
// end ;
7633: PPOPN 2
7635: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7636: LD_INT 0
7638: PPUSH
7639: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7640: LD_VAR 0 1
7644: PPUSH
7645: CALL_OW 248
7649: PUSH
7650: LD_INT 2
7652: EQUAL
7653: IFFALSE 7899
// begin sibDestroyedCounter := sibDestroyedCounter + 1 ;
7655: LD_ADDR_EXP 33
7659: PUSH
7660: LD_EXP 33
7664: PUSH
7665: LD_INT 1
7667: PLUS
7668: ST_TO_ADDR
// for i := sibDeposits downto 1 do
7669: LD_ADDR_VAR 0 4
7673: PUSH
7674: DOUBLE
7675: LD_EXP 32
7679: INC
7680: ST_TO_ADDR
7681: LD_INT 1
7683: PUSH
7684: FOR_DOWNTO
7685: IFFALSE 7755
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7687: LD_EXP 32
7691: PUSH
7692: LD_VAR 0 4
7696: ARRAY
7697: PUSH
7698: LD_INT 1
7700: ARRAY
7701: PUSH
7702: LD_VAR 0 2
7706: EQUAL
7707: PUSH
7708: LD_EXP 32
7712: PUSH
7713: LD_VAR 0 4
7717: ARRAY
7718: PUSH
7719: LD_INT 2
7721: ARRAY
7722: PUSH
7723: LD_VAR 0 3
7727: EQUAL
7728: AND
7729: IFFALSE 7753
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7731: LD_ADDR_EXP 32
7735: PUSH
7736: LD_EXP 32
7740: PPUSH
7741: LD_VAR 0 4
7745: PPUSH
7746: CALL_OW 3
7750: ST_TO_ADDR
// break ;
7751: GO 7755
// end ;
7753: GO 7684
7755: POP
7756: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7757: LD_EXP 40
7761: PUSH
7762: LD_INT 0
7764: EQUAL
7765: PUSH
7766: LD_VAR 0 2
7770: PPUSH
7771: LD_VAR 0 3
7775: PPUSH
7776: CALL_OW 428
7780: PUSH
7781: LD_INT 22
7783: PUSH
7784: LD_INT 1
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PPUSH
7791: CALL_OW 69
7795: IN
7796: AND
7797: IFFALSE 7899
// begin eventVar5 := 1 ;
7799: LD_ADDR_EXP 40
7803: PUSH
7804: LD_INT 1
7806: ST_TO_ADDR
// DialogueOn ;
7807: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7811: LD_EXP 2
7815: PPUSH
7816: LD_STRING D4-Sci1-1
7818: PPUSH
7819: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7823: LD_EXP 1
7827: PPUSH
7828: LD_STRING D4-JMM-1
7830: PPUSH
7831: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7835: LD_EXP 2
7839: PPUSH
7840: LD_STRING D4-Sci1-2
7842: PPUSH
7843: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7847: LD_EXP 1
7851: PPUSH
7852: LD_STRING D4-JMM-2
7854: PPUSH
7855: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7859: LD_EXP 2
7863: PPUSH
7864: LD_STRING D4-Sci1-3
7866: PPUSH
7867: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7871: LD_EXP 1
7875: PPUSH
7876: LD_STRING D4-JMM-3
7878: PPUSH
7879: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7883: LD_EXP 1
7887: PPUSH
7888: LD_STRING D4-JMM-3a
7890: PPUSH
7891: CALL_OW 88
// DialogueOff ;
7895: CALL_OW 7
// end ; end ; end ;
7899: PPOPN 5
7901: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7902: LD_VAR 0 1
7906: PPUSH
7907: CALL_OW 255
7911: PUSH
7912: LD_INT 1
7914: EQUAL
7915: PUSH
7916: LD_VAR 0 1
7920: PPUSH
7921: CALL_OW 266
7925: PUSH
7926: LD_INT 0
7928: EQUAL
7929: AND
7930: PUSH
7931: LD_INT 22
7933: PUSH
7934: LD_INT 1
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: LD_INT 21
7943: PUSH
7944: LD_INT 3
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: PUSH
7951: LD_INT 2
7953: PUSH
7954: LD_INT 30
7956: PUSH
7957: LD_INT 0
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 30
7966: PUSH
7967: LD_INT 1
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: LIST
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PUSH
7989: LD_INT 1
7991: EQUAL
7992: AND
7993: IFFALSE 8007
// SetBName ( building , omega ) ;
7995: LD_VAR 0 1
7999: PPUSH
8000: LD_STRING omega
8002: PPUSH
8003: CALL_OW 500
// end ;
8007: PPOPN 2
8009: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8010: LD_VAR 0 1
8014: PPUSH
8015: CALL 27013 0 1
// end ;
8019: PPOPN 1
8021: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
8022: LD_VAR 0 1
8026: PUSH
8027: LD_EXP 44
8031: EQUAL
8032: IFFALSE 8038
// ArabianAttack ;
8034: CALL 10167 0 0
// if event = eventRussianAttack then
8038: LD_VAR 0 1
8042: PUSH
8043: LD_EXP 45
8047: EQUAL
8048: IFFALSE 8054
// RussianAttack ;
8050: CALL 10532 0 0
// end ;
8054: PPOPN 1
8056: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8057: LD_VAR 0 1
8061: PUSH
8062: LD_EXP 46
8066: EQUAL
8067: IFFALSE 8161
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8069: LD_VAR 0 2
8073: PPUSH
8074: CALL_OW 302
8078: PUSH
8079: LD_VAR 0 3
8083: PPUSH
8084: LD_VAR 0 4
8088: PPUSH
8089: CALL_OW 488
8093: AND
8094: IFFALSE 8161
// begin repeat wait ( 0 0$1 ) ;
8096: LD_INT 35
8098: PPUSH
8099: CALL_OW 67
// if not HasTask ( p1 ) then
8103: LD_VAR 0 2
8107: PPUSH
8108: CALL_OW 314
8112: NOT
8113: IFFALSE 8149
// begin ComContaminate ( p1 , p2 , p3 ) ;
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_VAR 0 3
8124: PPUSH
8125: LD_VAR 0 4
8129: PPUSH
8130: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8134: LD_VAR 0 2
8138: PPUSH
8139: LD_INT 42
8141: PPUSH
8142: LD_INT 3
8144: PPUSH
8145: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8149: LD_VAR 0 2
8153: PPUSH
8154: CALL_OW 302
8158: NOT
8159: IFFALSE 8096
// end ; end ; end ;
8161: PPOPN 7
8163: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8164: LD_VAR 0 1
8168: PPUSH
8169: CALL_OW 255
8173: PUSH
8174: LD_INT 3
8176: PUSH
8177: LD_INT 8
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: IN
8184: IFFALSE 8247
// begin ComMoveXY ( driver , 41 , 2 ) ;
8186: LD_VAR 0 1
8190: PPUSH
8191: LD_INT 41
8193: PPUSH
8194: LD_INT 2
8196: PPUSH
8197: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8201: LD_INT 35
8203: PPUSH
8204: CALL_OW 67
// if IsDead ( driver ) then
8208: LD_VAR 0 1
8212: PPUSH
8213: CALL_OW 301
8217: IFFALSE 8221
// exit ;
8219: GO 8247
// until IsAt ( driver , 41 , 2 ) ;
8221: LD_VAR 0 1
8225: PPUSH
8226: LD_INT 41
8228: PPUSH
8229: LD_INT 2
8231: PPUSH
8232: CALL_OW 307
8236: IFFALSE 8201
// RemoveUnit ( driver ) ;
8238: LD_VAR 0 1
8242: PPUSH
8243: CALL_OW 64
// end ; end ; end_of_file
8247: PPOPN 4
8249: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8250: LD_INT 0
8252: PPUSH
8253: PPUSH
8254: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8255: LD_ADDR_VAR 0 1
8259: PUSH
8260: LD_VAR 0 1
8264: PUSH
8265: LD_EXP 1
8269: PUSH
8270: LD_EXP 2
8274: PUSH
8275: LD_EXP 3
8279: PUSH
8280: LD_EXP 4
8284: PUSH
8285: LD_EXP 5
8289: PUSH
8290: LD_EXP 6
8294: PUSH
8295: LD_EXP 7
8299: PUSH
8300: LD_EXP 8
8304: PUSH
8305: LD_EXP 9
8309: PUSH
8310: LD_EXP 10
8314: PUSH
8315: LD_EXP 11
8319: PUSH
8320: LD_EXP 12
8324: PUSH
8325: LD_EXP 13
8329: PUSH
8330: LD_EXP 14
8334: PUSH
8335: LD_EXP 16
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: DIFF
8357: ST_TO_ADDR
// if not characters then
8358: LD_VAR 0 1
8362: NOT
8363: IFFALSE 8367
// exit ;
8365: GO 8446
// speaker := characters [ rand ( 1 , characters ) ] ;
8367: LD_ADDR_VAR 0 6
8371: PUSH
8372: LD_VAR 0 1
8376: PUSH
8377: LD_INT 1
8379: PPUSH
8380: LD_VAR 0 1
8384: PPUSH
8385: CALL_OW 12
8389: ARRAY
8390: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8391: LD_VAR 0 6
8395: PPUSH
8396: CALL_OW 258
8400: PUSH
8401: LD_INT 1
8403: EQUAL
8404: IFFALSE 8422
// Say ( speaker , dialogMID ) else
8406: LD_VAR 0 6
8410: PPUSH
8411: LD_VAR 0 2
8415: PPUSH
8416: CALL_OW 88
8420: GO 8436
// Say ( speaker , dialogFID ) ;
8422: LD_VAR 0 6
8426: PPUSH
8427: LD_VAR 0 3
8431: PPUSH
8432: CALL_OW 88
// result := speaker ;
8436: LD_ADDR_VAR 0 4
8440: PUSH
8441: LD_VAR 0 6
8445: ST_TO_ADDR
// end ;
8446: LD_VAR 0 4
8450: RET
// export function PrepareDifficulty ; begin
8451: LD_INT 0
8453: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8454: LD_INT 5
8456: PPUSH
8457: LD_INT 8
8459: PPUSH
8460: LD_INT 2
8462: PPUSH
8463: CALL_OW 322
// if Difficulty = 1 then
8467: LD_OWVAR 67
8471: PUSH
8472: LD_INT 1
8474: EQUAL
8475: IFFALSE 8594
// begin SetTech ( 66 , 8 , state_researched ) ;
8477: LD_INT 66
8479: PPUSH
8480: LD_INT 8
8482: PPUSH
8483: LD_INT 2
8485: PPUSH
8486: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8490: LD_INT 67
8492: PPUSH
8493: LD_INT 8
8495: PPUSH
8496: LD_INT 0
8498: PPUSH
8499: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8503: LD_INT 68
8505: PPUSH
8506: LD_INT 8
8508: PPUSH
8509: LD_INT 0
8511: PPUSH
8512: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8516: LD_INT 51
8518: PPUSH
8519: LD_INT 8
8521: PPUSH
8522: LD_INT 2
8524: PPUSH
8525: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8529: LD_INT 52
8531: PPUSH
8532: LD_INT 8
8534: PPUSH
8535: LD_INT 0
8537: PPUSH
8538: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8542: LD_INT 53
8544: PPUSH
8545: LD_INT 8
8547: PPUSH
8548: LD_INT 0
8550: PPUSH
8551: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8555: LD_INT 60
8557: PPUSH
8558: LD_INT 8
8560: PPUSH
8561: LD_INT 2
8563: PPUSH
8564: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8568: LD_INT 61
8570: PPUSH
8571: LD_INT 8
8573: PPUSH
8574: LD_INT 0
8576: PPUSH
8577: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8581: LD_INT 62
8583: PPUSH
8584: LD_INT 8
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 322
// end ; if Difficulty = 2 then
8594: LD_OWVAR 67
8598: PUSH
8599: LD_INT 2
8601: EQUAL
8602: IFFALSE 8721
// begin SetTech ( 66 , 8 , state_researched ) ;
8604: LD_INT 66
8606: PPUSH
8607: LD_INT 8
8609: PPUSH
8610: LD_INT 2
8612: PPUSH
8613: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8617: LD_INT 67
8619: PPUSH
8620: LD_INT 8
8622: PPUSH
8623: LD_INT 2
8625: PPUSH
8626: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8630: LD_INT 68
8632: PPUSH
8633: LD_INT 8
8635: PPUSH
8636: LD_INT 0
8638: PPUSH
8639: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8643: LD_INT 51
8645: PPUSH
8646: LD_INT 8
8648: PPUSH
8649: LD_INT 2
8651: PPUSH
8652: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8656: LD_INT 52
8658: PPUSH
8659: LD_INT 8
8661: PPUSH
8662: LD_INT 2
8664: PPUSH
8665: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8669: LD_INT 53
8671: PPUSH
8672: LD_INT 8
8674: PPUSH
8675: LD_INT 2
8677: PPUSH
8678: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8682: LD_INT 60
8684: PPUSH
8685: LD_INT 8
8687: PPUSH
8688: LD_INT 2
8690: PPUSH
8691: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8695: LD_INT 61
8697: PPUSH
8698: LD_INT 8
8700: PPUSH
8701: LD_INT 2
8703: PPUSH
8704: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8708: LD_INT 62
8710: PPUSH
8711: LD_INT 8
8713: PPUSH
8714: LD_INT 0
8716: PPUSH
8717: CALL_OW 322
// end ; if Difficulty >= 3 then
8721: LD_OWVAR 67
8725: PUSH
8726: LD_INT 3
8728: GREATEREQUAL
8729: IFFALSE 8848
// begin SetTech ( 66 , 8 , state_researched ) ;
8731: LD_INT 66
8733: PPUSH
8734: LD_INT 8
8736: PPUSH
8737: LD_INT 2
8739: PPUSH
8740: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8744: LD_INT 67
8746: PPUSH
8747: LD_INT 8
8749: PPUSH
8750: LD_INT 2
8752: PPUSH
8753: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8757: LD_INT 68
8759: PPUSH
8760: LD_INT 8
8762: PPUSH
8763: LD_INT 0
8765: PPUSH
8766: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8770: LD_INT 51
8772: PPUSH
8773: LD_INT 8
8775: PPUSH
8776: LD_INT 2
8778: PPUSH
8779: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8783: LD_INT 52
8785: PPUSH
8786: LD_INT 8
8788: PPUSH
8789: LD_INT 2
8791: PPUSH
8792: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8796: LD_INT 53
8798: PPUSH
8799: LD_INT 8
8801: PPUSH
8802: LD_INT 2
8804: PPUSH
8805: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8809: LD_INT 60
8811: PPUSH
8812: LD_INT 8
8814: PPUSH
8815: LD_INT 2
8817: PPUSH
8818: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8822: LD_INT 61
8824: PPUSH
8825: LD_INT 8
8827: PPUSH
8828: LD_INT 2
8830: PPUSH
8831: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8835: LD_INT 62
8837: PPUSH
8838: LD_INT 8
8840: PPUSH
8841: LD_INT 0
8843: PPUSH
8844: CALL_OW 322
// end ; end ;
8848: LD_VAR 0 1
8852: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8853: LD_INT 0
8855: PPUSH
8856: PPUSH
// for i in charactersList do
8857: LD_ADDR_VAR 0 4
8861: PUSH
8862: LD_VAR 0 1
8866: PUSH
8867: FOR_IN
8868: IFFALSE 8886
// SaveCharacters ( i , ident ) ;
8870: LD_VAR 0 4
8874: PPUSH
8875: LD_VAR 0 2
8879: PPUSH
8880: CALL_OW 38
8884: GO 8867
8886: POP
8887: POP
// end ; end_of_file
8888: LD_VAR 0 3
8892: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8893: LD_EXP 39
8897: PUSH
8898: LD_INT 1
8900: EQUAL
8901: IFFALSE 9871
8903: GO 8905
8905: DISABLE
8906: LD_INT 0
8908: PPUSH
8909: PPUSH
8910: PPUSH
// begin m1 := false ;
8911: LD_ADDR_VAR 0 1
8915: PUSH
8916: LD_INT 0
8918: ST_TO_ADDR
// m2 := false ;
8919: LD_ADDR_VAR 0 2
8923: PUSH
8924: LD_INT 0
8926: ST_TO_ADDR
// m3 := false ;
8927: LD_ADDR_VAR 0 3
8931: PUSH
8932: LD_INT 0
8934: ST_TO_ADDR
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
8935: LD_INT 22
8937: PUSH
8938: LD_INT 1
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 21
8947: PUSH
8948: LD_INT 1
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: LD_INT 23
8957: PUSH
8958: LD_INT 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 50
8967: PUSH
8968: EMPTY
8969: LIST
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: PPUSH
8977: CALL_OW 69
8981: PPUSH
8982: CALL 33905 0 1
8986: PUSH
8987: LD_INT 5
8989: LESS
8990: IFFALSE 8999
// YouLost ( Troops ) ;
8992: LD_STRING Troops
8994: PPUSH
8995: CALL_OW 104
// DialogueOn ;
8999: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
9003: LD_EXP 1
9007: PPUSH
9008: LD_STRING D9b-JMM-1
9010: PPUSH
9011: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
9015: LD_EXP 16
9019: PPUSH
9020: LD_STRING D9b-Pow-1
9022: PPUSH
9023: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
9027: LD_EXP 1
9031: PPUSH
9032: LD_STRING D9b-JMM-2
9034: PPUSH
9035: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
9039: LD_EXP 16
9043: PPUSH
9044: LD_STRING D9b-Pow-2
9046: PPUSH
9047: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
9051: LD_EXP 1
9055: PPUSH
9056: LD_STRING D9b-JMM-3
9058: PPUSH
9059: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
9063: LD_EXP 16
9067: PPUSH
9068: LD_STRING D9b-Pow-3
9070: PPUSH
9071: CALL_OW 94
// if tick <= 60 60$00 then
9075: LD_OWVAR 1
9079: PUSH
9080: LD_INT 126000
9082: LESSEQUAL
9083: IFFALSE 9092
// SetAchievement ( ACH_ASPEED_13 ) ;
9085: LD_STRING ACH_ASPEED_13
9087: PPUSH
9088: CALL_OW 543
// if burlakStatus = 1 then
9092: LD_EXP 29
9096: PUSH
9097: LD_INT 1
9099: EQUAL
9100: IFFALSE 9122
// begin m1 := true ;
9102: LD_ADDR_VAR 0 1
9106: PUSH
9107: LD_INT 1
9109: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9110: LD_STRING Burlak
9112: PPUSH
9113: LD_INT 1
9115: PPUSH
9116: CALL_OW 101
// end else
9120: GO 9133
// begin AddMedal ( Burlak , - 1 ) ;
9122: LD_STRING Burlak
9124: PPUSH
9125: LD_INT 1
9127: NEG
9128: PPUSH
9129: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9133: LD_EXP 2
9137: PPUSH
9138: CALL_OW 302
9142: IFFALSE 9164
// begin m2 := true ;
9144: LD_ADDR_VAR 0 2
9148: PUSH
9149: LD_INT 1
9151: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9152: LD_STRING Stevens
9154: PPUSH
9155: LD_INT 1
9157: PPUSH
9158: CALL_OW 101
// end else
9162: GO 9175
// begin AddMedal ( Stevens , - 1 ) ;
9164: LD_STRING Stevens
9166: PPUSH
9167: LD_INT 1
9169: NEG
9170: PPUSH
9171: CALL_OW 101
// end ; if radarOnSpot = 1 then
9175: LD_EXP 31
9179: PUSH
9180: LD_INT 1
9182: EQUAL
9183: IFFALSE 9205
// begin m3 := true ;
9185: LD_ADDR_VAR 0 3
9189: PUSH
9190: LD_INT 1
9192: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9193: LD_STRING Observation
9195: PPUSH
9196: LD_INT 1
9198: PPUSH
9199: CALL_OW 101
// end else
9203: GO 9216
// begin AddMedal ( Observation , - 1 ) ;
9205: LD_STRING Observation
9207: PPUSH
9208: LD_INT 1
9210: NEG
9211: PPUSH
9212: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9216: LD_VAR 0 1
9220: PUSH
9221: LD_VAR 0 2
9225: AND
9226: PUSH
9227: LD_VAR 0 3
9231: AND
9232: PUSH
9233: LD_OWVAR 67
9237: PUSH
9238: LD_INT 3
9240: GREATEREQUAL
9241: AND
9242: IFFALSE 9254
// SetAchievementEX ( ACH_AMER , 13 ) ;
9244: LD_STRING ACH_AMER
9246: PPUSH
9247: LD_INT 13
9249: PPUSH
9250: CALL_OW 564
// GiveMedals ( MAIN ) ;
9254: LD_STRING MAIN
9256: PPUSH
9257: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9261: LD_EXP 29
9265: PPUSH
9266: LD_STRING 13_BurlakStatus_1
9268: PPUSH
9269: CALL_OW 39
// if IsLive ( Stevens ) then
9273: LD_EXP 2
9277: PPUSH
9278: CALL_OW 300
9282: IFFALSE 9296
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9284: LD_INT 1
9286: PPUSH
9287: LD_STRING 13_StevensStatus_1
9289: PPUSH
9290: CALL_OW 39
9294: GO 9306
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9296: LD_INT 0
9298: PPUSH
9299: LD_STRING 13_StevensStatus_1
9301: PPUSH
9302: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9306: LD_INT 22
9308: PUSH
9309: LD_INT 1
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PUSH
9316: LD_INT 21
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: LD_INT 2
9328: PUSH
9329: LD_INT 25
9331: PUSH
9332: LD_INT 1
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 25
9341: PUSH
9342: LD_INT 2
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: LD_INT 25
9351: PUSH
9352: LD_INT 3
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 25
9361: PUSH
9362: LD_INT 4
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 25
9371: PUSH
9372: LD_INT 5
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PUSH
9379: LD_INT 25
9381: PUSH
9382: LD_INT 8
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: LIST
9402: PPUSH
9403: CALL_OW 69
9407: PPUSH
9408: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9412: LD_EXP 1
9416: PPUSH
9417: LD_EXP 35
9421: PUSH
9422: LD_STRING JMM
9424: STR
9425: PPUSH
9426: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9430: LD_EXP 8
9434: PPUSH
9435: LD_EXP 35
9439: PUSH
9440: LD_STRING Brown
9442: STR
9443: PPUSH
9444: CALL 8853 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9448: LD_EXP 4
9452: PPUSH
9453: LD_EXP 35
9457: PUSH
9458: LD_STRING Donaldson
9460: STR
9461: PPUSH
9462: CALL 8853 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9466: LD_EXP 5
9470: PPUSH
9471: LD_EXP 35
9475: PUSH
9476: LD_STRING Bobby
9478: STR
9479: PPUSH
9480: CALL 8853 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9484: LD_EXP 6
9488: PPUSH
9489: LD_EXP 35
9493: PUSH
9494: LD_STRING Cyrus
9496: STR
9497: PPUSH
9498: CALL 8853 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9502: LD_EXP 3
9506: PPUSH
9507: LD_EXP 35
9511: PUSH
9512: LD_STRING Lisa
9514: STR
9515: PPUSH
9516: CALL 8853 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9520: LD_EXP 13
9524: PPUSH
9525: LD_EXP 35
9529: PUSH
9530: LD_STRING Frank
9532: STR
9533: PPUSH
9534: CALL 8853 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9538: LD_EXP 14
9542: PPUSH
9543: LD_EXP 35
9547: PUSH
9548: LD_STRING Kikuchi
9550: STR
9551: PPUSH
9552: CALL 8853 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9556: LD_EXP 10
9560: PPUSH
9561: LD_EXP 35
9565: PUSH
9566: LD_STRING Houten
9568: STR
9569: PPUSH
9570: CALL 8853 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9574: LD_EXP 12
9578: PPUSH
9579: LD_EXP 35
9583: PUSH
9584: LD_STRING Gary
9586: STR
9587: PPUSH
9588: CALL 8853 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9592: LD_EXP 11
9596: PPUSH
9597: LD_EXP 35
9601: PUSH
9602: LD_STRING Cornell
9604: STR
9605: PPUSH
9606: CALL 8853 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9610: LD_EXP 7
9614: PPUSH
9615: LD_EXP 35
9619: PUSH
9620: LD_STRING Denis
9622: STR
9623: PPUSH
9624: CALL 8853 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9628: LD_EXP 9
9632: PPUSH
9633: LD_EXP 35
9637: PUSH
9638: LD_STRING Gladstone
9640: STR
9641: PPUSH
9642: CALL 8853 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9646: LD_EXP 2
9650: PPUSH
9651: LD_EXP 35
9655: PUSH
9656: LD_STRING Stevens
9658: STR
9659: PPUSH
9660: CALL 8853 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9664: LD_INT 50
9666: PUSH
9667: EMPTY
9668: LIST
9669: PUSH
9670: LD_INT 22
9672: PUSH
9673: LD_INT 1
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 21
9682: PUSH
9683: LD_INT 1
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 2
9692: PUSH
9693: LD_INT 25
9695: PUSH
9696: LD_INT 1
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: LD_INT 25
9705: PUSH
9706: LD_INT 2
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 25
9715: PUSH
9716: LD_INT 3
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 25
9725: PUSH
9726: LD_INT 4
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 25
9735: PUSH
9736: LD_INT 5
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: LD_INT 25
9745: PUSH
9746: LD_INT 8
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: PPUSH
9768: CALL_OW 69
9772: PUSH
9773: LD_EXP 1
9777: PUSH
9778: LD_EXP 8
9782: PUSH
9783: LD_EXP 4
9787: PUSH
9788: LD_EXP 5
9792: PUSH
9793: LD_EXP 6
9797: PUSH
9798: LD_EXP 3
9802: PUSH
9803: LD_EXP 13
9807: PUSH
9808: LD_EXP 9
9812: PUSH
9813: LD_EXP 14
9817: PUSH
9818: LD_EXP 7
9822: PUSH
9823: LD_EXP 10
9827: PUSH
9828: LD_EXP 12
9832: PUSH
9833: LD_EXP 11
9837: PUSH
9838: LD_EXP 2
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: DIFF
9859: PPUSH
9860: LD_STRING 13_other_survivors
9862: PPUSH
9863: CALL_OW 38
// YouWin ;
9867: CALL_OW 103
// end ; end_of_file
9871: PPOPN 3
9873: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
9874: LD_EXP 33
9878: PUSH
9879: LD_INT 2
9881: EQUAL
9882: PUSH
9883: LD_INT 34
9885: PUSH
9886: LD_INT 8
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PPUSH
9893: CALL_OW 69
9897: NOT
9898: AND
9899: PUSH
9900: LD_INT 25
9902: PPUSH
9903: LD_INT 1
9905: PPUSH
9906: CALL_OW 321
9910: PUSH
9911: LD_INT 1
9913: EQUAL
9914: AND
9915: IFFALSE 10051
9917: GO 9919
9919: DISABLE
9920: LD_INT 0
9922: PPUSH
9923: PPUSH
9924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9925: LD_ADDR_VAR 0 2
9929: PUSH
9930: LD_INT 22
9932: PUSH
9933: LD_INT 1
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: LD_INT 21
9942: PUSH
9943: LD_INT 3
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 2
9952: PUSH
9953: LD_INT 30
9955: PUSH
9956: LD_INT 0
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: LD_INT 30
9965: PUSH
9966: LD_INT 1
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: LIST
9982: PPUSH
9983: CALL_OW 69
9987: ST_TO_ADDR
// for i in tmp do
9988: LD_ADDR_VAR 0 1
9992: PUSH
9993: LD_VAR 0 2
9997: PUSH
9998: FOR_IN
9999: IFFALSE 10032
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
10001: LD_ADDR_VAR 0 3
10005: PUSH
10006: LD_VAR 0 3
10010: PUSH
10011: LD_VAR 0 1
10015: PPUSH
10016: CALL_OW 274
10020: PPUSH
10021: LD_INT 3
10023: PPUSH
10024: CALL_OW 275
10028: PLUS
10029: ST_TO_ADDR
10030: GO 9998
10032: POP
10033: POP
// if yourSiberite < 60 then
10034: LD_VAR 0 3
10038: PUSH
10039: LD_INT 60
10041: LESS
10042: IFFALSE 10051
// YouLost ( siberite ) ;
10044: LD_STRING siberite
10046: PPUSH
10047: CALL_OW 104
// end ; end_of_file
10051: PPOPN 3
10053: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10054: LD_INT 22
10056: PUSH
10057: LD_INT 8
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: LD_INT 21
10066: PUSH
10067: LD_INT 1
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PPUSH
10078: CALL_OW 69
10082: PUSH
10083: LD_INT 6
10085: LESS
10086: IFFALSE 10096
10088: GO 10090
10090: DISABLE
// begin enable ;
10091: ENABLE
// PrepareArabianAttack ;
10092: CALL 4104 0 0
// end ;
10096: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10097: LD_EXP 36
10101: PUSH
10102: LD_INT 1
10104: EQUAL
10105: PUSH
10106: LD_INT 22
10108: PUSH
10109: LD_INT 8
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: LD_INT 21
10118: PUSH
10119: LD_INT 1
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PPUSH
10130: CALL_OW 69
10134: PUSH
10135: LD_INT 6
10137: LESS
10138: AND
10139: IFFALSE 10166
10141: GO 10143
10143: DISABLE
// begin wait ( 4 4$00 ) ;
10144: LD_INT 8400
10146: PPUSH
10147: CALL_OW 67
// PrepareRussianAttack ;
10151: CALL 3327 0 0
// wait ( 12 12$00 ) ;
10155: LD_INT 25200
10157: PPUSH
10158: CALL_OW 67
// PrepareRussianAttack ;
10162: CALL 3327 0 0
// end ;
10166: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10167: LD_INT 0
10169: PPUSH
10170: PPUSH
10171: PPUSH
10172: PPUSH
10173: PPUSH
10174: PPUSH
10175: PPUSH
10176: PPUSH
10177: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10178: LD_ADDR_VAR 0 8
10182: PUSH
10183: LD_INT 22
10185: PUSH
10186: LD_INT 8
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: LD_INT 120
10195: PUSH
10196: LD_INT 10
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PPUSH
10207: CALL_OW 69
10211: ST_TO_ADDR
// if not units then
10212: LD_VAR 0 8
10216: NOT
10217: IFFALSE 10221
// exit ;
10219: GO 10527
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10221: LD_ADDR_VAR 0 4
10225: PUSH
10226: LD_INT 80
10228: PUSH
10229: LD_INT 60
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 54
10238: PUSH
10239: LD_INT 57
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 55
10248: PUSH
10249: LD_INT 74
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 61
10258: PUSH
10259: LD_INT 85
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10272: LD_ADDR_VAR 0 5
10276: PUSH
10277: LD_INT 93
10279: PUSH
10280: LD_INT 99
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 85
10289: PUSH
10290: LD_INT 99
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10301: LD_INT 35
10303: PPUSH
10304: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10308: LD_ADDR_VAR 0 6
10312: PUSH
10313: LD_VAR 0 8
10317: PPUSH
10318: LD_INT 21
10320: PUSH
10321: LD_INT 2
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PPUSH
10328: CALL_OW 72
10332: ST_TO_ADDR
// if vehicles then
10333: LD_VAR 0 6
10337: IFFALSE 10353
// AgressiveMove ( vehicles , path ) ;
10339: LD_VAR 0 6
10343: PPUSH
10344: LD_VAR 0 4
10348: PPUSH
10349: CALL 72098 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10353: LD_ADDR_VAR 0 7
10357: PUSH
10358: LD_VAR 0 8
10362: PPUSH
10363: LD_INT 23
10365: PUSH
10366: LD_INT 2
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 21
10375: PUSH
10376: LD_INT 1
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 72
10391: ST_TO_ADDR
// if infantry then
10392: LD_VAR 0 7
10396: IFFALSE 10412
// AgressiveMove ( infantry , path2 ) ;
10398: LD_VAR 0 7
10402: PPUSH
10403: LD_VAR 0 5
10407: PPUSH
10408: CALL 72098 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10412: LD_ADDR_VAR 0 9
10416: PUSH
10417: LD_VAR 0 8
10421: PPUSH
10422: LD_INT 23
10424: PUSH
10425: LD_INT 0
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 21
10434: PUSH
10435: LD_INT 1
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PPUSH
10446: CALL_OW 72
10450: ST_TO_ADDR
// if apes then
10451: LD_VAR 0 9
10455: IFFALSE 10499
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10457: LD_VAR 0 9
10461: PUSH
10462: LD_INT 1
10464: ARRAY
10465: PPUSH
10466: LD_INT 22
10468: PUSH
10469: LD_INT 1
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PPUSH
10476: CALL_OW 69
10480: PPUSH
10481: LD_VAR 0 9
10485: PUSH
10486: LD_INT 1
10488: ARRAY
10489: PPUSH
10490: CALL_OW 74
10494: PPUSH
10495: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10499: LD_ADDR_VAR 0 8
10503: PUSH
10504: LD_VAR 0 8
10508: PPUSH
10509: LD_INT 50
10511: PUSH
10512: EMPTY
10513: LIST
10514: PPUSH
10515: CALL_OW 72
10519: ST_TO_ADDR
// until not units ;
10520: LD_VAR 0 8
10524: NOT
10525: IFFALSE 10301
// end ;
10527: LD_VAR 0 1
10531: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10532: LD_INT 0
10534: PPUSH
10535: PPUSH
10536: PPUSH
10537: PPUSH
10538: PPUSH
10539: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10540: LD_ADDR_VAR 0 6
10544: PUSH
10545: LD_INT 22
10547: PUSH
10548: LD_INT 3
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 120
10557: PUSH
10558: LD_INT 10
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PPUSH
10569: CALL_OW 69
10573: ST_TO_ADDR
// if not units then
10574: LD_VAR 0 6
10578: NOT
10579: IFFALSE 10583
// exit ;
10581: GO 10714
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10583: LD_ADDR_VAR 0 4
10587: PUSH
10588: LD_INT 80
10590: PUSH
10591: LD_INT 60
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 54
10600: PUSH
10601: LD_INT 57
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: LD_INT 55
10610: PUSH
10611: LD_INT 74
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 61
10620: PUSH
10621: LD_INT 85
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10634: LD_INT 35
10636: PPUSH
10637: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10641: LD_ADDR_VAR 0 5
10645: PUSH
10646: LD_VAR 0 6
10650: PPUSH
10651: LD_INT 21
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PPUSH
10661: CALL_OW 72
10665: ST_TO_ADDR
// if vehicles then
10666: LD_VAR 0 5
10670: IFFALSE 10686
// AgressiveMove ( vehicles , path ) ;
10672: LD_VAR 0 5
10676: PPUSH
10677: LD_VAR 0 4
10681: PPUSH
10682: CALL 72098 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10686: LD_ADDR_VAR 0 6
10690: PUSH
10691: LD_VAR 0 6
10695: PPUSH
10696: LD_INT 50
10698: PUSH
10699: EMPTY
10700: LIST
10701: PPUSH
10702: CALL_OW 72
10706: ST_TO_ADDR
// until not units ;
10707: LD_VAR 0 6
10711: NOT
10712: IFFALSE 10634
// end ; end_of_file
10714: LD_VAR 0 1
10718: RET
// every 0 0$01 do var i , cratesSpawned ;
10719: GO 10721
10721: DISABLE
10722: LD_INT 0
10724: PPUSH
10725: PPUSH
// begin cratesSpawned := 0 ;
10726: LD_ADDR_VAR 0 2
10730: PUSH
10731: LD_INT 0
10733: ST_TO_ADDR
// for i := 1 to 6 do
10734: LD_ADDR_VAR 0 1
10738: PUSH
10739: DOUBLE
10740: LD_INT 1
10742: DEC
10743: ST_TO_ADDR
10744: LD_INT 6
10746: PUSH
10747: FOR_TO
10748: IFFALSE 10773
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10750: LD_INT 2
10752: PPUSH
10753: LD_INT 5
10755: PPUSH
10756: CALL_OW 12
10760: PPUSH
10761: LD_INT 17
10763: PPUSH
10764: LD_INT 0
10766: PPUSH
10767: CALL_OW 55
10771: GO 10747
10773: POP
10774: POP
// wait ( 0 0$20 ) ;
10775: LD_INT 700
10777: PPUSH
10778: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10782: LD_INT 280
10784: PPUSH
10785: CALL_OW 67
// if cratesSpawned < 12 then
10789: LD_VAR 0 2
10793: PUSH
10794: LD_INT 12
10796: LESS
10797: IFFALSE 10849
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10799: LD_INT 105
10801: PPUSH
10802: LD_INT 350
10804: PPUSH
10805: CALL_OW 12
10809: PPUSH
10810: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10814: LD_INT 3
10816: PPUSH
10817: LD_INT 5
10819: PPUSH
10820: CALL_OW 12
10824: PPUSH
10825: LD_INT 13
10827: PPUSH
10828: LD_INT 1
10830: PPUSH
10831: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10835: LD_ADDR_VAR 0 2
10839: PUSH
10840: LD_VAR 0 2
10844: PUSH
10845: LD_INT 1
10847: PLUS
10848: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10849: LD_VAR 0 2
10853: PUSH
10854: LD_INT 12
10856: GREATEREQUAL
10857: PUSH
10858: LD_VAR 0 2
10862: PUSH
10863: LD_INT 32
10865: LESS
10866: AND
10867: IFFALSE 10919
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10869: LD_INT 420
10871: PPUSH
10872: LD_INT 700
10874: PPUSH
10875: CALL_OW 12
10879: PPUSH
10880: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10884: LD_INT 3
10886: PPUSH
10887: LD_INT 5
10889: PPUSH
10890: CALL_OW 12
10894: PPUSH
10895: LD_INT 13
10897: PPUSH
10898: LD_INT 1
10900: PPUSH
10901: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10905: LD_ADDR_VAR 0 2
10909: PUSH
10910: LD_VAR 0 2
10914: PUSH
10915: LD_INT 1
10917: PLUS
10918: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
10919: LD_VAR 0 2
10923: PUSH
10924: LD_INT 32
10926: GREATEREQUAL
10927: IFFALSE 11001
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10929: LD_INT 13
10931: PPUSH
10932: CALL_OW 435
10936: PUSH
10937: LD_INT 14
10939: LESS
10940: IFFALSE 10951
// wait ( 0 0$20 ) else
10942: LD_INT 700
10944: PPUSH
10945: CALL_OW 67
10949: GO 10966
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
10951: LD_INT 1750
10953: PPUSH
10954: LD_INT 3150
10956: PPUSH
10957: CALL_OW 12
10961: PPUSH
10962: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
10966: LD_INT 2
10968: PPUSH
10969: LD_INT 5
10971: PPUSH
10972: CALL_OW 12
10976: PPUSH
10977: LD_INT 13
10979: PPUSH
10980: LD_INT 1
10982: PPUSH
10983: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10987: LD_ADDR_VAR 0 2
10991: PUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_INT 1
10999: PLUS
11000: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
11001: LD_VAR 0 2
11005: PUSH
11006: LD_INT 120
11008: GREATEREQUAL
11009: IFFALSE 11083
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
11011: LD_INT 13
11013: PPUSH
11014: CALL_OW 435
11018: PUSH
11019: LD_INT 14
11021: LESS
11022: IFFALSE 11033
// wait ( 0 0$40 ) else
11024: LD_INT 1400
11026: PPUSH
11027: CALL_OW 67
11031: GO 11048
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
11033: LD_INT 2450
11035: PPUSH
11036: LD_INT 3850
11038: PPUSH
11039: CALL_OW 12
11043: PPUSH
11044: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11048: LD_INT 1
11050: PPUSH
11051: LD_INT 5
11053: PPUSH
11054: CALL_OW 12
11058: PPUSH
11059: LD_INT 13
11061: PPUSH
11062: LD_INT 1
11064: PPUSH
11065: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11069: LD_ADDR_VAR 0 2
11073: PUSH
11074: LD_VAR 0 2
11078: PUSH
11079: LD_INT 1
11081: PLUS
11082: ST_TO_ADDR
// end ; until false ;
11083: LD_INT 0
11085: IFFALSE 10782
// end ; end_of_file end_of_file
11087: PPOPN 2
11089: END
// export globalGameSaveCounter ; every 0 0$1 do
11090: GO 11092
11092: DISABLE
// begin enable ;
11093: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11094: LD_STRING updateTimer(
11096: PUSH
11097: LD_OWVAR 1
11101: STR
11102: PUSH
11103: LD_STRING );
11105: STR
11106: PPUSH
11107: CALL_OW 559
// end ;
11111: END
// every 0 0$1 do
11112: GO 11114
11114: DISABLE
// begin globalGameSaveCounter := 0 ;
11115: LD_ADDR_EXP 47
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11123: LD_STRING setGameSaveCounter(0)
11125: PPUSH
11126: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11130: LD_STRING initStreamRollete();
11132: PPUSH
11133: CALL_OW 559
// InitStreamMode ;
11137: CALL 12480 0 0
// DefineStreamItems ( false ) ;
11141: LD_INT 0
11143: PPUSH
11144: CALL 12944 0 1
// end ;
11148: END
// export function SOS_MapStart ( ) ; begin
11149: LD_INT 0
11151: PPUSH
// if streamModeActive then
11152: LD_EXP 48
11156: IFFALSE 11165
// DefineStreamItems ( true ) ;
11158: LD_INT 1
11160: PPUSH
11161: CALL 12944 0 1
// UpdateLuaVariables ( ) ;
11165: CALL 11182 0 0
// UpdateFactoryWaypoints ( ) ;
11169: CALL 25813 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11173: CALL 26070 0 0
// end ;
11177: LD_VAR 0 1
11181: RET
// function UpdateLuaVariables ( ) ; begin
11182: LD_INT 0
11184: PPUSH
// if globalGameSaveCounter then
11185: LD_EXP 47
11189: IFFALSE 11223
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11191: LD_ADDR_EXP 47
11195: PUSH
11196: LD_EXP 47
11200: PPUSH
11201: CALL 70855 0 1
11205: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11206: LD_STRING setGameSaveCounter(
11208: PUSH
11209: LD_EXP 47
11213: STR
11214: PUSH
11215: LD_STRING )
11217: STR
11218: PPUSH
11219: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11223: LD_STRING setGameDifficulty(
11225: PUSH
11226: LD_OWVAR 67
11230: STR
11231: PUSH
11232: LD_STRING )
11234: STR
11235: PPUSH
11236: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11240: LD_STRING displayDifficulty(
11242: PUSH
11243: LD_OWVAR 67
11247: STR
11248: PUSH
11249: LD_STRING )
11251: STR
11252: PPUSH
11253: CALL_OW 559
// end ;
11257: LD_VAR 0 1
11261: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11262: LD_INT 0
11264: PPUSH
// if p2 = stream_mode then
11265: LD_VAR 0 2
11269: PUSH
11270: LD_INT 100
11272: EQUAL
11273: IFFALSE 12276
// begin if not StreamModeActive then
11275: LD_EXP 48
11279: NOT
11280: IFFALSE 11290
// StreamModeActive := true ;
11282: LD_ADDR_EXP 48
11286: PUSH
11287: LD_INT 1
11289: ST_TO_ADDR
// if p3 = 0 then
11290: LD_VAR 0 3
11294: PUSH
11295: LD_INT 0
11297: EQUAL
11298: IFFALSE 11304
// InitStreamMode ;
11300: CALL 12480 0 0
// if p3 = 1 then
11304: LD_VAR 0 3
11308: PUSH
11309: LD_INT 1
11311: EQUAL
11312: IFFALSE 11322
// sRocket := true ;
11314: LD_ADDR_EXP 53
11318: PUSH
11319: LD_INT 1
11321: ST_TO_ADDR
// if p3 = 2 then
11322: LD_VAR 0 3
11326: PUSH
11327: LD_INT 2
11329: EQUAL
11330: IFFALSE 11340
// sSpeed := true ;
11332: LD_ADDR_EXP 52
11336: PUSH
11337: LD_INT 1
11339: ST_TO_ADDR
// if p3 = 3 then
11340: LD_VAR 0 3
11344: PUSH
11345: LD_INT 3
11347: EQUAL
11348: IFFALSE 11358
// sEngine := true ;
11350: LD_ADDR_EXP 54
11354: PUSH
11355: LD_INT 1
11357: ST_TO_ADDR
// if p3 = 4 then
11358: LD_VAR 0 3
11362: PUSH
11363: LD_INT 4
11365: EQUAL
11366: IFFALSE 11376
// sSpec := true ;
11368: LD_ADDR_EXP 51
11372: PUSH
11373: LD_INT 1
11375: ST_TO_ADDR
// if p3 = 5 then
11376: LD_VAR 0 3
11380: PUSH
11381: LD_INT 5
11383: EQUAL
11384: IFFALSE 11394
// sLevel := true ;
11386: LD_ADDR_EXP 55
11390: PUSH
11391: LD_INT 1
11393: ST_TO_ADDR
// if p3 = 6 then
11394: LD_VAR 0 3
11398: PUSH
11399: LD_INT 6
11401: EQUAL
11402: IFFALSE 11412
// sArmoury := true ;
11404: LD_ADDR_EXP 56
11408: PUSH
11409: LD_INT 1
11411: ST_TO_ADDR
// if p3 = 7 then
11412: LD_VAR 0 3
11416: PUSH
11417: LD_INT 7
11419: EQUAL
11420: IFFALSE 11430
// sRadar := true ;
11422: LD_ADDR_EXP 57
11426: PUSH
11427: LD_INT 1
11429: ST_TO_ADDR
// if p3 = 8 then
11430: LD_VAR 0 3
11434: PUSH
11435: LD_INT 8
11437: EQUAL
11438: IFFALSE 11448
// sBunker := true ;
11440: LD_ADDR_EXP 58
11444: PUSH
11445: LD_INT 1
11447: ST_TO_ADDR
// if p3 = 9 then
11448: LD_VAR 0 3
11452: PUSH
11453: LD_INT 9
11455: EQUAL
11456: IFFALSE 11466
// sHack := true ;
11458: LD_ADDR_EXP 59
11462: PUSH
11463: LD_INT 1
11465: ST_TO_ADDR
// if p3 = 10 then
11466: LD_VAR 0 3
11470: PUSH
11471: LD_INT 10
11473: EQUAL
11474: IFFALSE 11484
// sFire := true ;
11476: LD_ADDR_EXP 60
11480: PUSH
11481: LD_INT 1
11483: ST_TO_ADDR
// if p3 = 11 then
11484: LD_VAR 0 3
11488: PUSH
11489: LD_INT 11
11491: EQUAL
11492: IFFALSE 11502
// sRefresh := true ;
11494: LD_ADDR_EXP 61
11498: PUSH
11499: LD_INT 1
11501: ST_TO_ADDR
// if p3 = 12 then
11502: LD_VAR 0 3
11506: PUSH
11507: LD_INT 12
11509: EQUAL
11510: IFFALSE 11520
// sExp := true ;
11512: LD_ADDR_EXP 62
11516: PUSH
11517: LD_INT 1
11519: ST_TO_ADDR
// if p3 = 13 then
11520: LD_VAR 0 3
11524: PUSH
11525: LD_INT 13
11527: EQUAL
11528: IFFALSE 11538
// sDepot := true ;
11530: LD_ADDR_EXP 63
11534: PUSH
11535: LD_INT 1
11537: ST_TO_ADDR
// if p3 = 14 then
11538: LD_VAR 0 3
11542: PUSH
11543: LD_INT 14
11545: EQUAL
11546: IFFALSE 11556
// sFlag := true ;
11548: LD_ADDR_EXP 64
11552: PUSH
11553: LD_INT 1
11555: ST_TO_ADDR
// if p3 = 15 then
11556: LD_VAR 0 3
11560: PUSH
11561: LD_INT 15
11563: EQUAL
11564: IFFALSE 11574
// sKamikadze := true ;
11566: LD_ADDR_EXP 72
11570: PUSH
11571: LD_INT 1
11573: ST_TO_ADDR
// if p3 = 16 then
11574: LD_VAR 0 3
11578: PUSH
11579: LD_INT 16
11581: EQUAL
11582: IFFALSE 11592
// sTroll := true ;
11584: LD_ADDR_EXP 73
11588: PUSH
11589: LD_INT 1
11591: ST_TO_ADDR
// if p3 = 17 then
11592: LD_VAR 0 3
11596: PUSH
11597: LD_INT 17
11599: EQUAL
11600: IFFALSE 11610
// sSlow := true ;
11602: LD_ADDR_EXP 74
11606: PUSH
11607: LD_INT 1
11609: ST_TO_ADDR
// if p3 = 18 then
11610: LD_VAR 0 3
11614: PUSH
11615: LD_INT 18
11617: EQUAL
11618: IFFALSE 11628
// sLack := true ;
11620: LD_ADDR_EXP 75
11624: PUSH
11625: LD_INT 1
11627: ST_TO_ADDR
// if p3 = 19 then
11628: LD_VAR 0 3
11632: PUSH
11633: LD_INT 19
11635: EQUAL
11636: IFFALSE 11646
// sTank := true ;
11638: LD_ADDR_EXP 77
11642: PUSH
11643: LD_INT 1
11645: ST_TO_ADDR
// if p3 = 20 then
11646: LD_VAR 0 3
11650: PUSH
11651: LD_INT 20
11653: EQUAL
11654: IFFALSE 11664
// sRemote := true ;
11656: LD_ADDR_EXP 78
11660: PUSH
11661: LD_INT 1
11663: ST_TO_ADDR
// if p3 = 21 then
11664: LD_VAR 0 3
11668: PUSH
11669: LD_INT 21
11671: EQUAL
11672: IFFALSE 11682
// sPowell := true ;
11674: LD_ADDR_EXP 79
11678: PUSH
11679: LD_INT 1
11681: ST_TO_ADDR
// if p3 = 22 then
11682: LD_VAR 0 3
11686: PUSH
11687: LD_INT 22
11689: EQUAL
11690: IFFALSE 11700
// sTeleport := true ;
11692: LD_ADDR_EXP 82
11696: PUSH
11697: LD_INT 1
11699: ST_TO_ADDR
// if p3 = 23 then
11700: LD_VAR 0 3
11704: PUSH
11705: LD_INT 23
11707: EQUAL
11708: IFFALSE 11718
// sOilTower := true ;
11710: LD_ADDR_EXP 84
11714: PUSH
11715: LD_INT 1
11717: ST_TO_ADDR
// if p3 = 24 then
11718: LD_VAR 0 3
11722: PUSH
11723: LD_INT 24
11725: EQUAL
11726: IFFALSE 11736
// sShovel := true ;
11728: LD_ADDR_EXP 85
11732: PUSH
11733: LD_INT 1
11735: ST_TO_ADDR
// if p3 = 25 then
11736: LD_VAR 0 3
11740: PUSH
11741: LD_INT 25
11743: EQUAL
11744: IFFALSE 11754
// sSheik := true ;
11746: LD_ADDR_EXP 86
11750: PUSH
11751: LD_INT 1
11753: ST_TO_ADDR
// if p3 = 26 then
11754: LD_VAR 0 3
11758: PUSH
11759: LD_INT 26
11761: EQUAL
11762: IFFALSE 11772
// sEarthquake := true ;
11764: LD_ADDR_EXP 88
11768: PUSH
11769: LD_INT 1
11771: ST_TO_ADDR
// if p3 = 27 then
11772: LD_VAR 0 3
11776: PUSH
11777: LD_INT 27
11779: EQUAL
11780: IFFALSE 11790
// sAI := true ;
11782: LD_ADDR_EXP 89
11786: PUSH
11787: LD_INT 1
11789: ST_TO_ADDR
// if p3 = 28 then
11790: LD_VAR 0 3
11794: PUSH
11795: LD_INT 28
11797: EQUAL
11798: IFFALSE 11808
// sCargo := true ;
11800: LD_ADDR_EXP 92
11804: PUSH
11805: LD_INT 1
11807: ST_TO_ADDR
// if p3 = 29 then
11808: LD_VAR 0 3
11812: PUSH
11813: LD_INT 29
11815: EQUAL
11816: IFFALSE 11826
// sDLaser := true ;
11818: LD_ADDR_EXP 93
11822: PUSH
11823: LD_INT 1
11825: ST_TO_ADDR
// if p3 = 30 then
11826: LD_VAR 0 3
11830: PUSH
11831: LD_INT 30
11833: EQUAL
11834: IFFALSE 11844
// sExchange := true ;
11836: LD_ADDR_EXP 94
11840: PUSH
11841: LD_INT 1
11843: ST_TO_ADDR
// if p3 = 31 then
11844: LD_VAR 0 3
11848: PUSH
11849: LD_INT 31
11851: EQUAL
11852: IFFALSE 11862
// sFac := true ;
11854: LD_ADDR_EXP 95
11858: PUSH
11859: LD_INT 1
11861: ST_TO_ADDR
// if p3 = 32 then
11862: LD_VAR 0 3
11866: PUSH
11867: LD_INT 32
11869: EQUAL
11870: IFFALSE 11880
// sPower := true ;
11872: LD_ADDR_EXP 96
11876: PUSH
11877: LD_INT 1
11879: ST_TO_ADDR
// if p3 = 33 then
11880: LD_VAR 0 3
11884: PUSH
11885: LD_INT 33
11887: EQUAL
11888: IFFALSE 11898
// sRandom := true ;
11890: LD_ADDR_EXP 97
11894: PUSH
11895: LD_INT 1
11897: ST_TO_ADDR
// if p3 = 34 then
11898: LD_VAR 0 3
11902: PUSH
11903: LD_INT 34
11905: EQUAL
11906: IFFALSE 11916
// sShield := true ;
11908: LD_ADDR_EXP 98
11912: PUSH
11913: LD_INT 1
11915: ST_TO_ADDR
// if p3 = 35 then
11916: LD_VAR 0 3
11920: PUSH
11921: LD_INT 35
11923: EQUAL
11924: IFFALSE 11934
// sTime := true ;
11926: LD_ADDR_EXP 99
11930: PUSH
11931: LD_INT 1
11933: ST_TO_ADDR
// if p3 = 36 then
11934: LD_VAR 0 3
11938: PUSH
11939: LD_INT 36
11941: EQUAL
11942: IFFALSE 11952
// sTools := true ;
11944: LD_ADDR_EXP 100
11948: PUSH
11949: LD_INT 1
11951: ST_TO_ADDR
// if p3 = 101 then
11952: LD_VAR 0 3
11956: PUSH
11957: LD_INT 101
11959: EQUAL
11960: IFFALSE 11970
// sSold := true ;
11962: LD_ADDR_EXP 65
11966: PUSH
11967: LD_INT 1
11969: ST_TO_ADDR
// if p3 = 102 then
11970: LD_VAR 0 3
11974: PUSH
11975: LD_INT 102
11977: EQUAL
11978: IFFALSE 11988
// sDiff := true ;
11980: LD_ADDR_EXP 66
11984: PUSH
11985: LD_INT 1
11987: ST_TO_ADDR
// if p3 = 103 then
11988: LD_VAR 0 3
11992: PUSH
11993: LD_INT 103
11995: EQUAL
11996: IFFALSE 12006
// sFog := true ;
11998: LD_ADDR_EXP 69
12002: PUSH
12003: LD_INT 1
12005: ST_TO_ADDR
// if p3 = 104 then
12006: LD_VAR 0 3
12010: PUSH
12011: LD_INT 104
12013: EQUAL
12014: IFFALSE 12024
// sReset := true ;
12016: LD_ADDR_EXP 70
12020: PUSH
12021: LD_INT 1
12023: ST_TO_ADDR
// if p3 = 105 then
12024: LD_VAR 0 3
12028: PUSH
12029: LD_INT 105
12031: EQUAL
12032: IFFALSE 12042
// sSun := true ;
12034: LD_ADDR_EXP 71
12038: PUSH
12039: LD_INT 1
12041: ST_TO_ADDR
// if p3 = 106 then
12042: LD_VAR 0 3
12046: PUSH
12047: LD_INT 106
12049: EQUAL
12050: IFFALSE 12060
// sTiger := true ;
12052: LD_ADDR_EXP 67
12056: PUSH
12057: LD_INT 1
12059: ST_TO_ADDR
// if p3 = 107 then
12060: LD_VAR 0 3
12064: PUSH
12065: LD_INT 107
12067: EQUAL
12068: IFFALSE 12078
// sBomb := true ;
12070: LD_ADDR_EXP 68
12074: PUSH
12075: LD_INT 1
12077: ST_TO_ADDR
// if p3 = 108 then
12078: LD_VAR 0 3
12082: PUSH
12083: LD_INT 108
12085: EQUAL
12086: IFFALSE 12096
// sWound := true ;
12088: LD_ADDR_EXP 76
12092: PUSH
12093: LD_INT 1
12095: ST_TO_ADDR
// if p3 = 109 then
12096: LD_VAR 0 3
12100: PUSH
12101: LD_INT 109
12103: EQUAL
12104: IFFALSE 12114
// sBetray := true ;
12106: LD_ADDR_EXP 80
12110: PUSH
12111: LD_INT 1
12113: ST_TO_ADDR
// if p3 = 110 then
12114: LD_VAR 0 3
12118: PUSH
12119: LD_INT 110
12121: EQUAL
12122: IFFALSE 12132
// sContamin := true ;
12124: LD_ADDR_EXP 81
12128: PUSH
12129: LD_INT 1
12131: ST_TO_ADDR
// if p3 = 111 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 111
12139: EQUAL
12140: IFFALSE 12150
// sOil := true ;
12142: LD_ADDR_EXP 83
12146: PUSH
12147: LD_INT 1
12149: ST_TO_ADDR
// if p3 = 112 then
12150: LD_VAR 0 3
12154: PUSH
12155: LD_INT 112
12157: EQUAL
12158: IFFALSE 12168
// sStu := true ;
12160: LD_ADDR_EXP 87
12164: PUSH
12165: LD_INT 1
12167: ST_TO_ADDR
// if p3 = 113 then
12168: LD_VAR 0 3
12172: PUSH
12173: LD_INT 113
12175: EQUAL
12176: IFFALSE 12186
// sBazooka := true ;
12178: LD_ADDR_EXP 90
12182: PUSH
12183: LD_INT 1
12185: ST_TO_ADDR
// if p3 = 114 then
12186: LD_VAR 0 3
12190: PUSH
12191: LD_INT 114
12193: EQUAL
12194: IFFALSE 12204
// sMortar := true ;
12196: LD_ADDR_EXP 91
12200: PUSH
12201: LD_INT 1
12203: ST_TO_ADDR
// if p3 = 115 then
12204: LD_VAR 0 3
12208: PUSH
12209: LD_INT 115
12211: EQUAL
12212: IFFALSE 12222
// sRanger := true ;
12214: LD_ADDR_EXP 101
12218: PUSH
12219: LD_INT 1
12221: ST_TO_ADDR
// if p3 = 116 then
12222: LD_VAR 0 3
12226: PUSH
12227: LD_INT 116
12229: EQUAL
12230: IFFALSE 12240
// sComputer := true ;
12232: LD_ADDR_EXP 102
12236: PUSH
12237: LD_INT 1
12239: ST_TO_ADDR
// if p3 = 117 then
12240: LD_VAR 0 3
12244: PUSH
12245: LD_INT 117
12247: EQUAL
12248: IFFALSE 12258
// s30 := true ;
12250: LD_ADDR_EXP 103
12254: PUSH
12255: LD_INT 1
12257: ST_TO_ADDR
// if p3 = 118 then
12258: LD_VAR 0 3
12262: PUSH
12263: LD_INT 118
12265: EQUAL
12266: IFFALSE 12276
// s60 := true ;
12268: LD_ADDR_EXP 104
12272: PUSH
12273: LD_INT 1
12275: ST_TO_ADDR
// end ; if p2 = hack_mode then
12276: LD_VAR 0 2
12280: PUSH
12281: LD_INT 101
12283: EQUAL
12284: IFFALSE 12412
// begin case p3 of 1 :
12286: LD_VAR 0 3
12290: PUSH
12291: LD_INT 1
12293: DOUBLE
12294: EQUAL
12295: IFTRUE 12299
12297: GO 12306
12299: POP
// hHackUnlimitedResources ; 2 :
12300: CALL 24559 0 0
12304: GO 12412
12306: LD_INT 2
12308: DOUBLE
12309: EQUAL
12310: IFTRUE 12314
12312: GO 12321
12314: POP
// hHackSetLevel10 ; 3 :
12315: CALL 24692 0 0
12319: GO 12412
12321: LD_INT 3
12323: DOUBLE
12324: EQUAL
12325: IFTRUE 12329
12327: GO 12336
12329: POP
// hHackSetLevel10YourUnits ; 4 :
12330: CALL 24777 0 0
12334: GO 12412
12336: LD_INT 4
12338: DOUBLE
12339: EQUAL
12340: IFTRUE 12344
12342: GO 12351
12344: POP
// hHackInvincible ; 5 :
12345: CALL 25225 0 0
12349: GO 12412
12351: LD_INT 5
12353: DOUBLE
12354: EQUAL
12355: IFTRUE 12359
12357: GO 12366
12359: POP
// hHackInvisible ; 6 :
12360: CALL 25336 0 0
12364: GO 12412
12366: LD_INT 6
12368: DOUBLE
12369: EQUAL
12370: IFTRUE 12374
12372: GO 12381
12374: POP
// hHackChangeYourSide ; 7 :
12375: CALL 25393 0 0
12379: GO 12412
12381: LD_INT 7
12383: DOUBLE
12384: EQUAL
12385: IFTRUE 12389
12387: GO 12396
12389: POP
// hHackChangeUnitSide ; 8 :
12390: CALL 25435 0 0
12394: GO 12412
12396: LD_INT 8
12398: DOUBLE
12399: EQUAL
12400: IFTRUE 12404
12402: GO 12411
12404: POP
// hHackFog ; end ;
12405: CALL 25536 0 0
12409: GO 12412
12411: POP
// end ; if p2 = game_save_mode then
12412: LD_VAR 0 2
12416: PUSH
12417: LD_INT 102
12419: EQUAL
12420: IFFALSE 12475
// begin if p3 = 1 then
12422: LD_VAR 0 3
12426: PUSH
12427: LD_INT 1
12429: EQUAL
12430: IFFALSE 12442
// globalGameSaveCounter := p4 ;
12432: LD_ADDR_EXP 47
12436: PUSH
12437: LD_VAR 0 4
12441: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12442: LD_VAR 0 3
12446: PUSH
12447: LD_INT 2
12449: EQUAL
12450: PUSH
12451: LD_EXP 47
12455: AND
12456: IFFALSE 12475
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12458: LD_STRING setGameSaveCounter(
12460: PUSH
12461: LD_EXP 47
12465: STR
12466: PUSH
12467: LD_STRING )
12469: STR
12470: PPUSH
12471: CALL_OW 559
// end ; end ;
12475: LD_VAR 0 7
12479: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12480: LD_INT 0
12482: PPUSH
// streamModeActive := false ;
12483: LD_ADDR_EXP 48
12487: PUSH
12488: LD_INT 0
12490: ST_TO_ADDR
// normalCounter := 36 ;
12491: LD_ADDR_EXP 49
12495: PUSH
12496: LD_INT 36
12498: ST_TO_ADDR
// hardcoreCounter := 18 ;
12499: LD_ADDR_EXP 50
12503: PUSH
12504: LD_INT 18
12506: ST_TO_ADDR
// sRocket := false ;
12507: LD_ADDR_EXP 53
12511: PUSH
12512: LD_INT 0
12514: ST_TO_ADDR
// sSpeed := false ;
12515: LD_ADDR_EXP 52
12519: PUSH
12520: LD_INT 0
12522: ST_TO_ADDR
// sEngine := false ;
12523: LD_ADDR_EXP 54
12527: PUSH
12528: LD_INT 0
12530: ST_TO_ADDR
// sSpec := false ;
12531: LD_ADDR_EXP 51
12535: PUSH
12536: LD_INT 0
12538: ST_TO_ADDR
// sLevel := false ;
12539: LD_ADDR_EXP 55
12543: PUSH
12544: LD_INT 0
12546: ST_TO_ADDR
// sArmoury := false ;
12547: LD_ADDR_EXP 56
12551: PUSH
12552: LD_INT 0
12554: ST_TO_ADDR
// sRadar := false ;
12555: LD_ADDR_EXP 57
12559: PUSH
12560: LD_INT 0
12562: ST_TO_ADDR
// sBunker := false ;
12563: LD_ADDR_EXP 58
12567: PUSH
12568: LD_INT 0
12570: ST_TO_ADDR
// sHack := false ;
12571: LD_ADDR_EXP 59
12575: PUSH
12576: LD_INT 0
12578: ST_TO_ADDR
// sFire := false ;
12579: LD_ADDR_EXP 60
12583: PUSH
12584: LD_INT 0
12586: ST_TO_ADDR
// sRefresh := false ;
12587: LD_ADDR_EXP 61
12591: PUSH
12592: LD_INT 0
12594: ST_TO_ADDR
// sExp := false ;
12595: LD_ADDR_EXP 62
12599: PUSH
12600: LD_INT 0
12602: ST_TO_ADDR
// sDepot := false ;
12603: LD_ADDR_EXP 63
12607: PUSH
12608: LD_INT 0
12610: ST_TO_ADDR
// sFlag := false ;
12611: LD_ADDR_EXP 64
12615: PUSH
12616: LD_INT 0
12618: ST_TO_ADDR
// sKamikadze := false ;
12619: LD_ADDR_EXP 72
12623: PUSH
12624: LD_INT 0
12626: ST_TO_ADDR
// sTroll := false ;
12627: LD_ADDR_EXP 73
12631: PUSH
12632: LD_INT 0
12634: ST_TO_ADDR
// sSlow := false ;
12635: LD_ADDR_EXP 74
12639: PUSH
12640: LD_INT 0
12642: ST_TO_ADDR
// sLack := false ;
12643: LD_ADDR_EXP 75
12647: PUSH
12648: LD_INT 0
12650: ST_TO_ADDR
// sTank := false ;
12651: LD_ADDR_EXP 77
12655: PUSH
12656: LD_INT 0
12658: ST_TO_ADDR
// sRemote := false ;
12659: LD_ADDR_EXP 78
12663: PUSH
12664: LD_INT 0
12666: ST_TO_ADDR
// sPowell := false ;
12667: LD_ADDR_EXP 79
12671: PUSH
12672: LD_INT 0
12674: ST_TO_ADDR
// sTeleport := false ;
12675: LD_ADDR_EXP 82
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// sOilTower := false ;
12683: LD_ADDR_EXP 84
12687: PUSH
12688: LD_INT 0
12690: ST_TO_ADDR
// sShovel := false ;
12691: LD_ADDR_EXP 85
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// sSheik := false ;
12699: LD_ADDR_EXP 86
12703: PUSH
12704: LD_INT 0
12706: ST_TO_ADDR
// sEarthquake := false ;
12707: LD_ADDR_EXP 88
12711: PUSH
12712: LD_INT 0
12714: ST_TO_ADDR
// sAI := false ;
12715: LD_ADDR_EXP 89
12719: PUSH
12720: LD_INT 0
12722: ST_TO_ADDR
// sCargo := false ;
12723: LD_ADDR_EXP 92
12727: PUSH
12728: LD_INT 0
12730: ST_TO_ADDR
// sDLaser := false ;
12731: LD_ADDR_EXP 93
12735: PUSH
12736: LD_INT 0
12738: ST_TO_ADDR
// sExchange := false ;
12739: LD_ADDR_EXP 94
12743: PUSH
12744: LD_INT 0
12746: ST_TO_ADDR
// sFac := false ;
12747: LD_ADDR_EXP 95
12751: PUSH
12752: LD_INT 0
12754: ST_TO_ADDR
// sPower := false ;
12755: LD_ADDR_EXP 96
12759: PUSH
12760: LD_INT 0
12762: ST_TO_ADDR
// sRandom := false ;
12763: LD_ADDR_EXP 97
12767: PUSH
12768: LD_INT 0
12770: ST_TO_ADDR
// sShield := false ;
12771: LD_ADDR_EXP 98
12775: PUSH
12776: LD_INT 0
12778: ST_TO_ADDR
// sTime := false ;
12779: LD_ADDR_EXP 99
12783: PUSH
12784: LD_INT 0
12786: ST_TO_ADDR
// sTools := false ;
12787: LD_ADDR_EXP 100
12791: PUSH
12792: LD_INT 0
12794: ST_TO_ADDR
// sSold := false ;
12795: LD_ADDR_EXP 65
12799: PUSH
12800: LD_INT 0
12802: ST_TO_ADDR
// sDiff := false ;
12803: LD_ADDR_EXP 66
12807: PUSH
12808: LD_INT 0
12810: ST_TO_ADDR
// sFog := false ;
12811: LD_ADDR_EXP 69
12815: PUSH
12816: LD_INT 0
12818: ST_TO_ADDR
// sReset := false ;
12819: LD_ADDR_EXP 70
12823: PUSH
12824: LD_INT 0
12826: ST_TO_ADDR
// sSun := false ;
12827: LD_ADDR_EXP 71
12831: PUSH
12832: LD_INT 0
12834: ST_TO_ADDR
// sTiger := false ;
12835: LD_ADDR_EXP 67
12839: PUSH
12840: LD_INT 0
12842: ST_TO_ADDR
// sBomb := false ;
12843: LD_ADDR_EXP 68
12847: PUSH
12848: LD_INT 0
12850: ST_TO_ADDR
// sWound := false ;
12851: LD_ADDR_EXP 76
12855: PUSH
12856: LD_INT 0
12858: ST_TO_ADDR
// sBetray := false ;
12859: LD_ADDR_EXP 80
12863: PUSH
12864: LD_INT 0
12866: ST_TO_ADDR
// sContamin := false ;
12867: LD_ADDR_EXP 81
12871: PUSH
12872: LD_INT 0
12874: ST_TO_ADDR
// sOil := false ;
12875: LD_ADDR_EXP 83
12879: PUSH
12880: LD_INT 0
12882: ST_TO_ADDR
// sStu := false ;
12883: LD_ADDR_EXP 87
12887: PUSH
12888: LD_INT 0
12890: ST_TO_ADDR
// sBazooka := false ;
12891: LD_ADDR_EXP 90
12895: PUSH
12896: LD_INT 0
12898: ST_TO_ADDR
// sMortar := false ;
12899: LD_ADDR_EXP 91
12903: PUSH
12904: LD_INT 0
12906: ST_TO_ADDR
// sRanger := false ;
12907: LD_ADDR_EXP 101
12911: PUSH
12912: LD_INT 0
12914: ST_TO_ADDR
// sComputer := false ;
12915: LD_ADDR_EXP 102
12919: PUSH
12920: LD_INT 0
12922: ST_TO_ADDR
// s30 := false ;
12923: LD_ADDR_EXP 103
12927: PUSH
12928: LD_INT 0
12930: ST_TO_ADDR
// s60 := false ;
12931: LD_ADDR_EXP 104
12935: PUSH
12936: LD_INT 0
12938: ST_TO_ADDR
// end ;
12939: LD_VAR 0 1
12943: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12944: LD_INT 0
12946: PPUSH
12947: PPUSH
12948: PPUSH
12949: PPUSH
12950: PPUSH
12951: PPUSH
12952: PPUSH
// result := [ ] ;
12953: LD_ADDR_VAR 0 2
12957: PUSH
12958: EMPTY
12959: ST_TO_ADDR
// if campaign_id = 1 then
12960: LD_OWVAR 69
12964: PUSH
12965: LD_INT 1
12967: EQUAL
12968: IFFALSE 16134
// begin case mission_number of 1 :
12970: LD_OWVAR 70
12974: PUSH
12975: LD_INT 1
12977: DOUBLE
12978: EQUAL
12979: IFTRUE 12983
12981: GO 13059
12983: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12984: LD_ADDR_VAR 0 2
12988: PUSH
12989: LD_INT 2
12991: PUSH
12992: LD_INT 4
12994: PUSH
12995: LD_INT 11
12997: PUSH
12998: LD_INT 12
13000: PUSH
13001: LD_INT 15
13003: PUSH
13004: LD_INT 16
13006: PUSH
13007: LD_INT 22
13009: PUSH
13010: LD_INT 23
13012: PUSH
13013: LD_INT 26
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 101
13029: PUSH
13030: LD_INT 102
13032: PUSH
13033: LD_INT 106
13035: PUSH
13036: LD_INT 116
13038: PUSH
13039: LD_INT 117
13041: PUSH
13042: LD_INT 118
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: ST_TO_ADDR
13057: GO 16132
13059: LD_INT 2
13061: DOUBLE
13062: EQUAL
13063: IFTRUE 13067
13065: GO 13151
13067: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13068: LD_ADDR_VAR 0 2
13072: PUSH
13073: LD_INT 2
13075: PUSH
13076: LD_INT 4
13078: PUSH
13079: LD_INT 11
13081: PUSH
13082: LD_INT 12
13084: PUSH
13085: LD_INT 15
13087: PUSH
13088: LD_INT 16
13090: PUSH
13091: LD_INT 22
13093: PUSH
13094: LD_INT 23
13096: PUSH
13097: LD_INT 26
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: PUSH
13111: LD_INT 101
13113: PUSH
13114: LD_INT 102
13116: PUSH
13117: LD_INT 105
13119: PUSH
13120: LD_INT 106
13122: PUSH
13123: LD_INT 108
13125: PUSH
13126: LD_INT 116
13128: PUSH
13129: LD_INT 117
13131: PUSH
13132: LD_INT 118
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: ST_TO_ADDR
13149: GO 16132
13151: LD_INT 3
13153: DOUBLE
13154: EQUAL
13155: IFTRUE 13159
13157: GO 13247
13159: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13160: LD_ADDR_VAR 0 2
13164: PUSH
13165: LD_INT 2
13167: PUSH
13168: LD_INT 4
13170: PUSH
13171: LD_INT 5
13173: PUSH
13174: LD_INT 11
13176: PUSH
13177: LD_INT 12
13179: PUSH
13180: LD_INT 15
13182: PUSH
13183: LD_INT 16
13185: PUSH
13186: LD_INT 22
13188: PUSH
13189: LD_INT 26
13191: PUSH
13192: LD_INT 36
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: PUSH
13207: LD_INT 101
13209: PUSH
13210: LD_INT 102
13212: PUSH
13213: LD_INT 105
13215: PUSH
13216: LD_INT 106
13218: PUSH
13219: LD_INT 108
13221: PUSH
13222: LD_INT 116
13224: PUSH
13225: LD_INT 117
13227: PUSH
13228: LD_INT 118
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: ST_TO_ADDR
13245: GO 16132
13247: LD_INT 4
13249: DOUBLE
13250: EQUAL
13251: IFTRUE 13255
13253: GO 13351
13255: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13256: LD_ADDR_VAR 0 2
13260: PUSH
13261: LD_INT 2
13263: PUSH
13264: LD_INT 4
13266: PUSH
13267: LD_INT 5
13269: PUSH
13270: LD_INT 8
13272: PUSH
13273: LD_INT 11
13275: PUSH
13276: LD_INT 12
13278: PUSH
13279: LD_INT 15
13281: PUSH
13282: LD_INT 16
13284: PUSH
13285: LD_INT 22
13287: PUSH
13288: LD_INT 23
13290: PUSH
13291: LD_INT 26
13293: PUSH
13294: LD_INT 36
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 101
13313: PUSH
13314: LD_INT 102
13316: PUSH
13317: LD_INT 105
13319: PUSH
13320: LD_INT 106
13322: PUSH
13323: LD_INT 108
13325: PUSH
13326: LD_INT 116
13328: PUSH
13329: LD_INT 117
13331: PUSH
13332: LD_INT 118
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: ST_TO_ADDR
13349: GO 16132
13351: LD_INT 5
13353: DOUBLE
13354: EQUAL
13355: IFTRUE 13359
13357: GO 13471
13359: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13360: LD_ADDR_VAR 0 2
13364: PUSH
13365: LD_INT 2
13367: PUSH
13368: LD_INT 4
13370: PUSH
13371: LD_INT 5
13373: PUSH
13374: LD_INT 6
13376: PUSH
13377: LD_INT 8
13379: PUSH
13380: LD_INT 11
13382: PUSH
13383: LD_INT 12
13385: PUSH
13386: LD_INT 15
13388: PUSH
13389: LD_INT 16
13391: PUSH
13392: LD_INT 22
13394: PUSH
13395: LD_INT 23
13397: PUSH
13398: LD_INT 25
13400: PUSH
13401: LD_INT 26
13403: PUSH
13404: LD_INT 36
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 101
13425: PUSH
13426: LD_INT 102
13428: PUSH
13429: LD_INT 105
13431: PUSH
13432: LD_INT 106
13434: PUSH
13435: LD_INT 108
13437: PUSH
13438: LD_INT 109
13440: PUSH
13441: LD_INT 112
13443: PUSH
13444: LD_INT 116
13446: PUSH
13447: LD_INT 117
13449: PUSH
13450: LD_INT 118
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: ST_TO_ADDR
13469: GO 16132
13471: LD_INT 6
13473: DOUBLE
13474: EQUAL
13475: IFTRUE 13479
13477: GO 13611
13479: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13480: LD_ADDR_VAR 0 2
13484: PUSH
13485: LD_INT 2
13487: PUSH
13488: LD_INT 4
13490: PUSH
13491: LD_INT 5
13493: PUSH
13494: LD_INT 6
13496: PUSH
13497: LD_INT 8
13499: PUSH
13500: LD_INT 11
13502: PUSH
13503: LD_INT 12
13505: PUSH
13506: LD_INT 15
13508: PUSH
13509: LD_INT 16
13511: PUSH
13512: LD_INT 20
13514: PUSH
13515: LD_INT 21
13517: PUSH
13518: LD_INT 22
13520: PUSH
13521: LD_INT 23
13523: PUSH
13524: LD_INT 25
13526: PUSH
13527: LD_INT 26
13529: PUSH
13530: LD_INT 30
13532: PUSH
13533: LD_INT 31
13535: PUSH
13536: LD_INT 32
13538: PUSH
13539: LD_INT 36
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: LD_INT 101
13565: PUSH
13566: LD_INT 102
13568: PUSH
13569: LD_INT 105
13571: PUSH
13572: LD_INT 106
13574: PUSH
13575: LD_INT 108
13577: PUSH
13578: LD_INT 109
13580: PUSH
13581: LD_INT 112
13583: PUSH
13584: LD_INT 116
13586: PUSH
13587: LD_INT 117
13589: PUSH
13590: LD_INT 118
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: ST_TO_ADDR
13609: GO 16132
13611: LD_INT 7
13613: DOUBLE
13614: EQUAL
13615: IFTRUE 13619
13617: GO 13731
13619: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13620: LD_ADDR_VAR 0 2
13624: PUSH
13625: LD_INT 2
13627: PUSH
13628: LD_INT 4
13630: PUSH
13631: LD_INT 5
13633: PUSH
13634: LD_INT 7
13636: PUSH
13637: LD_INT 11
13639: PUSH
13640: LD_INT 12
13642: PUSH
13643: LD_INT 15
13645: PUSH
13646: LD_INT 16
13648: PUSH
13649: LD_INT 20
13651: PUSH
13652: LD_INT 21
13654: PUSH
13655: LD_INT 22
13657: PUSH
13658: LD_INT 23
13660: PUSH
13661: LD_INT 25
13663: PUSH
13664: LD_INT 26
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 101
13685: PUSH
13686: LD_INT 102
13688: PUSH
13689: LD_INT 103
13691: PUSH
13692: LD_INT 105
13694: PUSH
13695: LD_INT 106
13697: PUSH
13698: LD_INT 108
13700: PUSH
13701: LD_INT 112
13703: PUSH
13704: LD_INT 116
13706: PUSH
13707: LD_INT 117
13709: PUSH
13710: LD_INT 118
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: ST_TO_ADDR
13729: GO 16132
13731: LD_INT 8
13733: DOUBLE
13734: EQUAL
13735: IFTRUE 13739
13737: GO 13879
13739: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13740: LD_ADDR_VAR 0 2
13744: PUSH
13745: LD_INT 2
13747: PUSH
13748: LD_INT 4
13750: PUSH
13751: LD_INT 5
13753: PUSH
13754: LD_INT 6
13756: PUSH
13757: LD_INT 7
13759: PUSH
13760: LD_INT 8
13762: PUSH
13763: LD_INT 11
13765: PUSH
13766: LD_INT 12
13768: PUSH
13769: LD_INT 15
13771: PUSH
13772: LD_INT 16
13774: PUSH
13775: LD_INT 20
13777: PUSH
13778: LD_INT 21
13780: PUSH
13781: LD_INT 22
13783: PUSH
13784: LD_INT 23
13786: PUSH
13787: LD_INT 25
13789: PUSH
13790: LD_INT 26
13792: PUSH
13793: LD_INT 30
13795: PUSH
13796: LD_INT 31
13798: PUSH
13799: LD_INT 32
13801: PUSH
13802: LD_INT 36
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: PUSH
13827: LD_INT 101
13829: PUSH
13830: LD_INT 102
13832: PUSH
13833: LD_INT 103
13835: PUSH
13836: LD_INT 105
13838: PUSH
13839: LD_INT 106
13841: PUSH
13842: LD_INT 108
13844: PUSH
13845: LD_INT 109
13847: PUSH
13848: LD_INT 112
13850: PUSH
13851: LD_INT 116
13853: PUSH
13854: LD_INT 117
13856: PUSH
13857: LD_INT 118
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: ST_TO_ADDR
13877: GO 16132
13879: LD_INT 9
13881: DOUBLE
13882: EQUAL
13883: IFTRUE 13887
13885: GO 14035
13887: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13888: LD_ADDR_VAR 0 2
13892: PUSH
13893: LD_INT 2
13895: PUSH
13896: LD_INT 4
13898: PUSH
13899: LD_INT 5
13901: PUSH
13902: LD_INT 6
13904: PUSH
13905: LD_INT 7
13907: PUSH
13908: LD_INT 8
13910: PUSH
13911: LD_INT 11
13913: PUSH
13914: LD_INT 12
13916: PUSH
13917: LD_INT 15
13919: PUSH
13920: LD_INT 16
13922: PUSH
13923: LD_INT 20
13925: PUSH
13926: LD_INT 21
13928: PUSH
13929: LD_INT 22
13931: PUSH
13932: LD_INT 23
13934: PUSH
13935: LD_INT 25
13937: PUSH
13938: LD_INT 26
13940: PUSH
13941: LD_INT 28
13943: PUSH
13944: LD_INT 30
13946: PUSH
13947: LD_INT 31
13949: PUSH
13950: LD_INT 32
13952: PUSH
13953: LD_INT 36
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 101
13981: PUSH
13982: LD_INT 102
13984: PUSH
13985: LD_INT 103
13987: PUSH
13988: LD_INT 105
13990: PUSH
13991: LD_INT 106
13993: PUSH
13994: LD_INT 108
13996: PUSH
13997: LD_INT 109
13999: PUSH
14000: LD_INT 112
14002: PUSH
14003: LD_INT 114
14005: PUSH
14006: LD_INT 116
14008: PUSH
14009: LD_INT 117
14011: PUSH
14012: LD_INT 118
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: ST_TO_ADDR
14033: GO 16132
14035: LD_INT 10
14037: DOUBLE
14038: EQUAL
14039: IFTRUE 14043
14041: GO 14239
14043: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14044: LD_ADDR_VAR 0 2
14048: PUSH
14049: LD_INT 2
14051: PUSH
14052: LD_INT 4
14054: PUSH
14055: LD_INT 5
14057: PUSH
14058: LD_INT 6
14060: PUSH
14061: LD_INT 7
14063: PUSH
14064: LD_INT 8
14066: PUSH
14067: LD_INT 9
14069: PUSH
14070: LD_INT 10
14072: PUSH
14073: LD_INT 11
14075: PUSH
14076: LD_INT 12
14078: PUSH
14079: LD_INT 13
14081: PUSH
14082: LD_INT 14
14084: PUSH
14085: LD_INT 15
14087: PUSH
14088: LD_INT 16
14090: PUSH
14091: LD_INT 17
14093: PUSH
14094: LD_INT 18
14096: PUSH
14097: LD_INT 19
14099: PUSH
14100: LD_INT 20
14102: PUSH
14103: LD_INT 21
14105: PUSH
14106: LD_INT 22
14108: PUSH
14109: LD_INT 23
14111: PUSH
14112: LD_INT 24
14114: PUSH
14115: LD_INT 25
14117: PUSH
14118: LD_INT 26
14120: PUSH
14121: LD_INT 28
14123: PUSH
14124: LD_INT 30
14126: PUSH
14127: LD_INT 31
14129: PUSH
14130: LD_INT 32
14132: PUSH
14133: LD_INT 36
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 101
14169: PUSH
14170: LD_INT 102
14172: PUSH
14173: LD_INT 103
14175: PUSH
14176: LD_INT 104
14178: PUSH
14179: LD_INT 105
14181: PUSH
14182: LD_INT 106
14184: PUSH
14185: LD_INT 107
14187: PUSH
14188: LD_INT 108
14190: PUSH
14191: LD_INT 109
14193: PUSH
14194: LD_INT 110
14196: PUSH
14197: LD_INT 111
14199: PUSH
14200: LD_INT 112
14202: PUSH
14203: LD_INT 114
14205: PUSH
14206: LD_INT 116
14208: PUSH
14209: LD_INT 117
14211: PUSH
14212: LD_INT 118
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: ST_TO_ADDR
14237: GO 16132
14239: LD_INT 11
14241: DOUBLE
14242: EQUAL
14243: IFTRUE 14247
14245: GO 14451
14247: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14248: LD_ADDR_VAR 0 2
14252: PUSH
14253: LD_INT 2
14255: PUSH
14256: LD_INT 3
14258: PUSH
14259: LD_INT 4
14261: PUSH
14262: LD_INT 5
14264: PUSH
14265: LD_INT 6
14267: PUSH
14268: LD_INT 7
14270: PUSH
14271: LD_INT 8
14273: PUSH
14274: LD_INT 9
14276: PUSH
14277: LD_INT 10
14279: PUSH
14280: LD_INT 11
14282: PUSH
14283: LD_INT 12
14285: PUSH
14286: LD_INT 13
14288: PUSH
14289: LD_INT 14
14291: PUSH
14292: LD_INT 15
14294: PUSH
14295: LD_INT 16
14297: PUSH
14298: LD_INT 17
14300: PUSH
14301: LD_INT 18
14303: PUSH
14304: LD_INT 19
14306: PUSH
14307: LD_INT 20
14309: PUSH
14310: LD_INT 21
14312: PUSH
14313: LD_INT 22
14315: PUSH
14316: LD_INT 23
14318: PUSH
14319: LD_INT 24
14321: PUSH
14322: LD_INT 25
14324: PUSH
14325: LD_INT 26
14327: PUSH
14328: LD_INT 28
14330: PUSH
14331: LD_INT 30
14333: PUSH
14334: LD_INT 31
14336: PUSH
14337: LD_INT 32
14339: PUSH
14340: LD_INT 34
14342: PUSH
14343: LD_INT 36
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 101
14381: PUSH
14382: LD_INT 102
14384: PUSH
14385: LD_INT 103
14387: PUSH
14388: LD_INT 104
14390: PUSH
14391: LD_INT 105
14393: PUSH
14394: LD_INT 106
14396: PUSH
14397: LD_INT 107
14399: PUSH
14400: LD_INT 108
14402: PUSH
14403: LD_INT 109
14405: PUSH
14406: LD_INT 110
14408: PUSH
14409: LD_INT 111
14411: PUSH
14412: LD_INT 112
14414: PUSH
14415: LD_INT 114
14417: PUSH
14418: LD_INT 116
14420: PUSH
14421: LD_INT 117
14423: PUSH
14424: LD_INT 118
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: ST_TO_ADDR
14449: GO 16132
14451: LD_INT 12
14453: DOUBLE
14454: EQUAL
14455: IFTRUE 14459
14457: GO 14679
14459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14460: LD_ADDR_VAR 0 2
14464: PUSH
14465: LD_INT 1
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: LD_INT 3
14473: PUSH
14474: LD_INT 4
14476: PUSH
14477: LD_INT 5
14479: PUSH
14480: LD_INT 6
14482: PUSH
14483: LD_INT 7
14485: PUSH
14486: LD_INT 8
14488: PUSH
14489: LD_INT 9
14491: PUSH
14492: LD_INT 10
14494: PUSH
14495: LD_INT 11
14497: PUSH
14498: LD_INT 12
14500: PUSH
14501: LD_INT 13
14503: PUSH
14504: LD_INT 14
14506: PUSH
14507: LD_INT 15
14509: PUSH
14510: LD_INT 16
14512: PUSH
14513: LD_INT 17
14515: PUSH
14516: LD_INT 18
14518: PUSH
14519: LD_INT 19
14521: PUSH
14522: LD_INT 20
14524: PUSH
14525: LD_INT 21
14527: PUSH
14528: LD_INT 22
14530: PUSH
14531: LD_INT 23
14533: PUSH
14534: LD_INT 24
14536: PUSH
14537: LD_INT 25
14539: PUSH
14540: LD_INT 26
14542: PUSH
14543: LD_INT 27
14545: PUSH
14546: LD_INT 28
14548: PUSH
14549: LD_INT 30
14551: PUSH
14552: LD_INT 31
14554: PUSH
14555: LD_INT 32
14557: PUSH
14558: LD_INT 33
14560: PUSH
14561: LD_INT 34
14563: PUSH
14564: LD_INT 36
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: PUSH
14603: LD_INT 101
14605: PUSH
14606: LD_INT 102
14608: PUSH
14609: LD_INT 103
14611: PUSH
14612: LD_INT 104
14614: PUSH
14615: LD_INT 105
14617: PUSH
14618: LD_INT 106
14620: PUSH
14621: LD_INT 107
14623: PUSH
14624: LD_INT 108
14626: PUSH
14627: LD_INT 109
14629: PUSH
14630: LD_INT 110
14632: PUSH
14633: LD_INT 111
14635: PUSH
14636: LD_INT 112
14638: PUSH
14639: LD_INT 113
14641: PUSH
14642: LD_INT 114
14644: PUSH
14645: LD_INT 116
14647: PUSH
14648: LD_INT 117
14650: PUSH
14651: LD_INT 118
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: ST_TO_ADDR
14677: GO 16132
14679: LD_INT 13
14681: DOUBLE
14682: EQUAL
14683: IFTRUE 14687
14685: GO 14895
14687: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14688: LD_ADDR_VAR 0 2
14692: PUSH
14693: LD_INT 1
14695: PUSH
14696: LD_INT 2
14698: PUSH
14699: LD_INT 3
14701: PUSH
14702: LD_INT 4
14704: PUSH
14705: LD_INT 5
14707: PUSH
14708: LD_INT 8
14710: PUSH
14711: LD_INT 9
14713: PUSH
14714: LD_INT 10
14716: PUSH
14717: LD_INT 11
14719: PUSH
14720: LD_INT 12
14722: PUSH
14723: LD_INT 14
14725: PUSH
14726: LD_INT 15
14728: PUSH
14729: LD_INT 16
14731: PUSH
14732: LD_INT 17
14734: PUSH
14735: LD_INT 18
14737: PUSH
14738: LD_INT 19
14740: PUSH
14741: LD_INT 20
14743: PUSH
14744: LD_INT 21
14746: PUSH
14747: LD_INT 22
14749: PUSH
14750: LD_INT 23
14752: PUSH
14753: LD_INT 24
14755: PUSH
14756: LD_INT 25
14758: PUSH
14759: LD_INT 26
14761: PUSH
14762: LD_INT 27
14764: PUSH
14765: LD_INT 28
14767: PUSH
14768: LD_INT 30
14770: PUSH
14771: LD_INT 31
14773: PUSH
14774: LD_INT 32
14776: PUSH
14777: LD_INT 33
14779: PUSH
14780: LD_INT 34
14782: PUSH
14783: LD_INT 36
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 101
14821: PUSH
14822: LD_INT 102
14824: PUSH
14825: LD_INT 103
14827: PUSH
14828: LD_INT 104
14830: PUSH
14831: LD_INT 105
14833: PUSH
14834: LD_INT 106
14836: PUSH
14837: LD_INT 107
14839: PUSH
14840: LD_INT 108
14842: PUSH
14843: LD_INT 109
14845: PUSH
14846: LD_INT 110
14848: PUSH
14849: LD_INT 111
14851: PUSH
14852: LD_INT 112
14854: PUSH
14855: LD_INT 113
14857: PUSH
14858: LD_INT 114
14860: PUSH
14861: LD_INT 116
14863: PUSH
14864: LD_INT 117
14866: PUSH
14867: LD_INT 118
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: ST_TO_ADDR
14893: GO 16132
14895: LD_INT 14
14897: DOUBLE
14898: EQUAL
14899: IFTRUE 14903
14901: GO 15127
14903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14904: LD_ADDR_VAR 0 2
14908: PUSH
14909: LD_INT 1
14911: PUSH
14912: LD_INT 2
14914: PUSH
14915: LD_INT 3
14917: PUSH
14918: LD_INT 4
14920: PUSH
14921: LD_INT 5
14923: PUSH
14924: LD_INT 6
14926: PUSH
14927: LD_INT 7
14929: PUSH
14930: LD_INT 8
14932: PUSH
14933: LD_INT 9
14935: PUSH
14936: LD_INT 10
14938: PUSH
14939: LD_INT 11
14941: PUSH
14942: LD_INT 12
14944: PUSH
14945: LD_INT 13
14947: PUSH
14948: LD_INT 14
14950: PUSH
14951: LD_INT 15
14953: PUSH
14954: LD_INT 16
14956: PUSH
14957: LD_INT 17
14959: PUSH
14960: LD_INT 18
14962: PUSH
14963: LD_INT 19
14965: PUSH
14966: LD_INT 20
14968: PUSH
14969: LD_INT 21
14971: PUSH
14972: LD_INT 22
14974: PUSH
14975: LD_INT 23
14977: PUSH
14978: LD_INT 24
14980: PUSH
14981: LD_INT 25
14983: PUSH
14984: LD_INT 26
14986: PUSH
14987: LD_INT 27
14989: PUSH
14990: LD_INT 28
14992: PUSH
14993: LD_INT 29
14995: PUSH
14996: LD_INT 30
14998: PUSH
14999: LD_INT 31
15001: PUSH
15002: LD_INT 32
15004: PUSH
15005: LD_INT 33
15007: PUSH
15008: LD_INT 34
15010: PUSH
15011: LD_INT 36
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 101
15053: PUSH
15054: LD_INT 102
15056: PUSH
15057: LD_INT 103
15059: PUSH
15060: LD_INT 104
15062: PUSH
15063: LD_INT 105
15065: PUSH
15066: LD_INT 106
15068: PUSH
15069: LD_INT 107
15071: PUSH
15072: LD_INT 108
15074: PUSH
15075: LD_INT 109
15077: PUSH
15078: LD_INT 110
15080: PUSH
15081: LD_INT 111
15083: PUSH
15084: LD_INT 112
15086: PUSH
15087: LD_INT 113
15089: PUSH
15090: LD_INT 114
15092: PUSH
15093: LD_INT 116
15095: PUSH
15096: LD_INT 117
15098: PUSH
15099: LD_INT 118
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: ST_TO_ADDR
15125: GO 16132
15127: LD_INT 15
15129: DOUBLE
15130: EQUAL
15131: IFTRUE 15135
15133: GO 15359
15135: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15136: LD_ADDR_VAR 0 2
15140: PUSH
15141: LD_INT 1
15143: PUSH
15144: LD_INT 2
15146: PUSH
15147: LD_INT 3
15149: PUSH
15150: LD_INT 4
15152: PUSH
15153: LD_INT 5
15155: PUSH
15156: LD_INT 6
15158: PUSH
15159: LD_INT 7
15161: PUSH
15162: LD_INT 8
15164: PUSH
15165: LD_INT 9
15167: PUSH
15168: LD_INT 10
15170: PUSH
15171: LD_INT 11
15173: PUSH
15174: LD_INT 12
15176: PUSH
15177: LD_INT 13
15179: PUSH
15180: LD_INT 14
15182: PUSH
15183: LD_INT 15
15185: PUSH
15186: LD_INT 16
15188: PUSH
15189: LD_INT 17
15191: PUSH
15192: LD_INT 18
15194: PUSH
15195: LD_INT 19
15197: PUSH
15198: LD_INT 20
15200: PUSH
15201: LD_INT 21
15203: PUSH
15204: LD_INT 22
15206: PUSH
15207: LD_INT 23
15209: PUSH
15210: LD_INT 24
15212: PUSH
15213: LD_INT 25
15215: PUSH
15216: LD_INT 26
15218: PUSH
15219: LD_INT 27
15221: PUSH
15222: LD_INT 28
15224: PUSH
15225: LD_INT 29
15227: PUSH
15228: LD_INT 30
15230: PUSH
15231: LD_INT 31
15233: PUSH
15234: LD_INT 32
15236: PUSH
15237: LD_INT 33
15239: PUSH
15240: LD_INT 34
15242: PUSH
15243: LD_INT 36
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 101
15285: PUSH
15286: LD_INT 102
15288: PUSH
15289: LD_INT 103
15291: PUSH
15292: LD_INT 104
15294: PUSH
15295: LD_INT 105
15297: PUSH
15298: LD_INT 106
15300: PUSH
15301: LD_INT 107
15303: PUSH
15304: LD_INT 108
15306: PUSH
15307: LD_INT 109
15309: PUSH
15310: LD_INT 110
15312: PUSH
15313: LD_INT 111
15315: PUSH
15316: LD_INT 112
15318: PUSH
15319: LD_INT 113
15321: PUSH
15322: LD_INT 114
15324: PUSH
15325: LD_INT 116
15327: PUSH
15328: LD_INT 117
15330: PUSH
15331: LD_INT 118
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: ST_TO_ADDR
15357: GO 16132
15359: LD_INT 16
15361: DOUBLE
15362: EQUAL
15363: IFTRUE 15367
15365: GO 15503
15367: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15368: LD_ADDR_VAR 0 2
15372: PUSH
15373: LD_INT 2
15375: PUSH
15376: LD_INT 4
15378: PUSH
15379: LD_INT 5
15381: PUSH
15382: LD_INT 7
15384: PUSH
15385: LD_INT 11
15387: PUSH
15388: LD_INT 12
15390: PUSH
15391: LD_INT 15
15393: PUSH
15394: LD_INT 16
15396: PUSH
15397: LD_INT 20
15399: PUSH
15400: LD_INT 21
15402: PUSH
15403: LD_INT 22
15405: PUSH
15406: LD_INT 23
15408: PUSH
15409: LD_INT 25
15411: PUSH
15412: LD_INT 26
15414: PUSH
15415: LD_INT 30
15417: PUSH
15418: LD_INT 31
15420: PUSH
15421: LD_INT 32
15423: PUSH
15424: LD_INT 33
15426: PUSH
15427: LD_INT 34
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 101
15453: PUSH
15454: LD_INT 102
15456: PUSH
15457: LD_INT 103
15459: PUSH
15460: LD_INT 106
15462: PUSH
15463: LD_INT 108
15465: PUSH
15466: LD_INT 112
15468: PUSH
15469: LD_INT 113
15471: PUSH
15472: LD_INT 114
15474: PUSH
15475: LD_INT 116
15477: PUSH
15478: LD_INT 117
15480: PUSH
15481: LD_INT 118
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: ST_TO_ADDR
15501: GO 16132
15503: LD_INT 17
15505: DOUBLE
15506: EQUAL
15507: IFTRUE 15511
15509: GO 15735
15511: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15512: LD_ADDR_VAR 0 2
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: LD_INT 2
15522: PUSH
15523: LD_INT 3
15525: PUSH
15526: LD_INT 4
15528: PUSH
15529: LD_INT 5
15531: PUSH
15532: LD_INT 6
15534: PUSH
15535: LD_INT 7
15537: PUSH
15538: LD_INT 8
15540: PUSH
15541: LD_INT 9
15543: PUSH
15544: LD_INT 10
15546: PUSH
15547: LD_INT 11
15549: PUSH
15550: LD_INT 12
15552: PUSH
15553: LD_INT 13
15555: PUSH
15556: LD_INT 14
15558: PUSH
15559: LD_INT 15
15561: PUSH
15562: LD_INT 16
15564: PUSH
15565: LD_INT 17
15567: PUSH
15568: LD_INT 18
15570: PUSH
15571: LD_INT 19
15573: PUSH
15574: LD_INT 20
15576: PUSH
15577: LD_INT 21
15579: PUSH
15580: LD_INT 22
15582: PUSH
15583: LD_INT 23
15585: PUSH
15586: LD_INT 24
15588: PUSH
15589: LD_INT 25
15591: PUSH
15592: LD_INT 26
15594: PUSH
15595: LD_INT 27
15597: PUSH
15598: LD_INT 28
15600: PUSH
15601: LD_INT 29
15603: PUSH
15604: LD_INT 30
15606: PUSH
15607: LD_INT 31
15609: PUSH
15610: LD_INT 32
15612: PUSH
15613: LD_INT 33
15615: PUSH
15616: LD_INT 34
15618: PUSH
15619: LD_INT 36
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 101
15661: PUSH
15662: LD_INT 102
15664: PUSH
15665: LD_INT 103
15667: PUSH
15668: LD_INT 104
15670: PUSH
15671: LD_INT 105
15673: PUSH
15674: LD_INT 106
15676: PUSH
15677: LD_INT 107
15679: PUSH
15680: LD_INT 108
15682: PUSH
15683: LD_INT 109
15685: PUSH
15686: LD_INT 110
15688: PUSH
15689: LD_INT 111
15691: PUSH
15692: LD_INT 112
15694: PUSH
15695: LD_INT 113
15697: PUSH
15698: LD_INT 114
15700: PUSH
15701: LD_INT 116
15703: PUSH
15704: LD_INT 117
15706: PUSH
15707: LD_INT 118
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: ST_TO_ADDR
15733: GO 16132
15735: LD_INT 18
15737: DOUBLE
15738: EQUAL
15739: IFTRUE 15743
15741: GO 15891
15743: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15744: LD_ADDR_VAR 0 2
15748: PUSH
15749: LD_INT 2
15751: PUSH
15752: LD_INT 4
15754: PUSH
15755: LD_INT 5
15757: PUSH
15758: LD_INT 7
15760: PUSH
15761: LD_INT 11
15763: PUSH
15764: LD_INT 12
15766: PUSH
15767: LD_INT 15
15769: PUSH
15770: LD_INT 16
15772: PUSH
15773: LD_INT 20
15775: PUSH
15776: LD_INT 21
15778: PUSH
15779: LD_INT 22
15781: PUSH
15782: LD_INT 23
15784: PUSH
15785: LD_INT 25
15787: PUSH
15788: LD_INT 26
15790: PUSH
15791: LD_INT 30
15793: PUSH
15794: LD_INT 31
15796: PUSH
15797: LD_INT 32
15799: PUSH
15800: LD_INT 33
15802: PUSH
15803: LD_INT 34
15805: PUSH
15806: LD_INT 35
15808: PUSH
15809: LD_INT 36
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 101
15837: PUSH
15838: LD_INT 102
15840: PUSH
15841: LD_INT 103
15843: PUSH
15844: LD_INT 106
15846: PUSH
15847: LD_INT 108
15849: PUSH
15850: LD_INT 112
15852: PUSH
15853: LD_INT 113
15855: PUSH
15856: LD_INT 114
15858: PUSH
15859: LD_INT 115
15861: PUSH
15862: LD_INT 116
15864: PUSH
15865: LD_INT 117
15867: PUSH
15868: LD_INT 118
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: ST_TO_ADDR
15889: GO 16132
15891: LD_INT 19
15893: DOUBLE
15894: EQUAL
15895: IFTRUE 15899
15897: GO 16131
15899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15900: LD_ADDR_VAR 0 2
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: LD_INT 2
15910: PUSH
15911: LD_INT 3
15913: PUSH
15914: LD_INT 4
15916: PUSH
15917: LD_INT 5
15919: PUSH
15920: LD_INT 6
15922: PUSH
15923: LD_INT 7
15925: PUSH
15926: LD_INT 8
15928: PUSH
15929: LD_INT 9
15931: PUSH
15932: LD_INT 10
15934: PUSH
15935: LD_INT 11
15937: PUSH
15938: LD_INT 12
15940: PUSH
15941: LD_INT 13
15943: PUSH
15944: LD_INT 14
15946: PUSH
15947: LD_INT 15
15949: PUSH
15950: LD_INT 16
15952: PUSH
15953: LD_INT 17
15955: PUSH
15956: LD_INT 18
15958: PUSH
15959: LD_INT 19
15961: PUSH
15962: LD_INT 20
15964: PUSH
15965: LD_INT 21
15967: PUSH
15968: LD_INT 22
15970: PUSH
15971: LD_INT 23
15973: PUSH
15974: LD_INT 24
15976: PUSH
15977: LD_INT 25
15979: PUSH
15980: LD_INT 26
15982: PUSH
15983: LD_INT 27
15985: PUSH
15986: LD_INT 28
15988: PUSH
15989: LD_INT 29
15991: PUSH
15992: LD_INT 30
15994: PUSH
15995: LD_INT 31
15997: PUSH
15998: LD_INT 32
16000: PUSH
16001: LD_INT 33
16003: PUSH
16004: LD_INT 34
16006: PUSH
16007: LD_INT 35
16009: PUSH
16010: LD_INT 36
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: PUSH
16051: LD_INT 101
16053: PUSH
16054: LD_INT 102
16056: PUSH
16057: LD_INT 103
16059: PUSH
16060: LD_INT 104
16062: PUSH
16063: LD_INT 105
16065: PUSH
16066: LD_INT 106
16068: PUSH
16069: LD_INT 107
16071: PUSH
16072: LD_INT 108
16074: PUSH
16075: LD_INT 109
16077: PUSH
16078: LD_INT 110
16080: PUSH
16081: LD_INT 111
16083: PUSH
16084: LD_INT 112
16086: PUSH
16087: LD_INT 113
16089: PUSH
16090: LD_INT 114
16092: PUSH
16093: LD_INT 115
16095: PUSH
16096: LD_INT 116
16098: PUSH
16099: LD_INT 117
16101: PUSH
16102: LD_INT 118
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: ST_TO_ADDR
16129: GO 16132
16131: POP
// end else
16132: GO 16363
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: LD_INT 1
16141: PUSH
16142: LD_INT 2
16144: PUSH
16145: LD_INT 3
16147: PUSH
16148: LD_INT 4
16150: PUSH
16151: LD_INT 5
16153: PUSH
16154: LD_INT 6
16156: PUSH
16157: LD_INT 7
16159: PUSH
16160: LD_INT 8
16162: PUSH
16163: LD_INT 9
16165: PUSH
16166: LD_INT 10
16168: PUSH
16169: LD_INT 11
16171: PUSH
16172: LD_INT 12
16174: PUSH
16175: LD_INT 13
16177: PUSH
16178: LD_INT 14
16180: PUSH
16181: LD_INT 15
16183: PUSH
16184: LD_INT 16
16186: PUSH
16187: LD_INT 17
16189: PUSH
16190: LD_INT 18
16192: PUSH
16193: LD_INT 19
16195: PUSH
16196: LD_INT 20
16198: PUSH
16199: LD_INT 21
16201: PUSH
16202: LD_INT 22
16204: PUSH
16205: LD_INT 23
16207: PUSH
16208: LD_INT 24
16210: PUSH
16211: LD_INT 25
16213: PUSH
16214: LD_INT 26
16216: PUSH
16217: LD_INT 27
16219: PUSH
16220: LD_INT 28
16222: PUSH
16223: LD_INT 29
16225: PUSH
16226: LD_INT 30
16228: PUSH
16229: LD_INT 31
16231: PUSH
16232: LD_INT 32
16234: PUSH
16235: LD_INT 33
16237: PUSH
16238: LD_INT 34
16240: PUSH
16241: LD_INT 35
16243: PUSH
16244: LD_INT 36
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 101
16287: PUSH
16288: LD_INT 102
16290: PUSH
16291: LD_INT 103
16293: PUSH
16294: LD_INT 104
16296: PUSH
16297: LD_INT 105
16299: PUSH
16300: LD_INT 106
16302: PUSH
16303: LD_INT 107
16305: PUSH
16306: LD_INT 108
16308: PUSH
16309: LD_INT 109
16311: PUSH
16312: LD_INT 110
16314: PUSH
16315: LD_INT 111
16317: PUSH
16318: LD_INT 112
16320: PUSH
16321: LD_INT 113
16323: PUSH
16324: LD_INT 114
16326: PUSH
16327: LD_INT 115
16329: PUSH
16330: LD_INT 116
16332: PUSH
16333: LD_INT 117
16335: PUSH
16336: LD_INT 118
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: ST_TO_ADDR
// if result then
16363: LD_VAR 0 2
16367: IFFALSE 17153
// begin normal :=  ;
16369: LD_ADDR_VAR 0 5
16373: PUSH
16374: LD_STRING 
16376: ST_TO_ADDR
// hardcore :=  ;
16377: LD_ADDR_VAR 0 6
16381: PUSH
16382: LD_STRING 
16384: ST_TO_ADDR
// active :=  ;
16385: LD_ADDR_VAR 0 7
16389: PUSH
16390: LD_STRING 
16392: ST_TO_ADDR
// for i = 1 to normalCounter do
16393: LD_ADDR_VAR 0 8
16397: PUSH
16398: DOUBLE
16399: LD_INT 1
16401: DEC
16402: ST_TO_ADDR
16403: LD_EXP 49
16407: PUSH
16408: FOR_TO
16409: IFFALSE 16510
// begin tmp := 0 ;
16411: LD_ADDR_VAR 0 3
16415: PUSH
16416: LD_STRING 0
16418: ST_TO_ADDR
// if result [ 1 ] then
16419: LD_VAR 0 2
16423: PUSH
16424: LD_INT 1
16426: ARRAY
16427: IFFALSE 16492
// if result [ 1 ] [ 1 ] = i then
16429: LD_VAR 0 2
16433: PUSH
16434: LD_INT 1
16436: ARRAY
16437: PUSH
16438: LD_INT 1
16440: ARRAY
16441: PUSH
16442: LD_VAR 0 8
16446: EQUAL
16447: IFFALSE 16492
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16449: LD_ADDR_VAR 0 2
16453: PUSH
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 1
16461: PPUSH
16462: LD_VAR 0 2
16466: PUSH
16467: LD_INT 1
16469: ARRAY
16470: PPUSH
16471: LD_INT 1
16473: PPUSH
16474: CALL_OW 3
16478: PPUSH
16479: CALL_OW 1
16483: ST_TO_ADDR
// tmp := 1 ;
16484: LD_ADDR_VAR 0 3
16488: PUSH
16489: LD_STRING 1
16491: ST_TO_ADDR
// end ; normal := normal & tmp ;
16492: LD_ADDR_VAR 0 5
16496: PUSH
16497: LD_VAR 0 5
16501: PUSH
16502: LD_VAR 0 3
16506: STR
16507: ST_TO_ADDR
// end ;
16508: GO 16408
16510: POP
16511: POP
// for i = 1 to hardcoreCounter do
16512: LD_ADDR_VAR 0 8
16516: PUSH
16517: DOUBLE
16518: LD_INT 1
16520: DEC
16521: ST_TO_ADDR
16522: LD_EXP 50
16526: PUSH
16527: FOR_TO
16528: IFFALSE 16633
// begin tmp := 0 ;
16530: LD_ADDR_VAR 0 3
16534: PUSH
16535: LD_STRING 0
16537: ST_TO_ADDR
// if result [ 2 ] then
16538: LD_VAR 0 2
16542: PUSH
16543: LD_INT 2
16545: ARRAY
16546: IFFALSE 16615
// if result [ 2 ] [ 1 ] = 100 + i then
16548: LD_VAR 0 2
16552: PUSH
16553: LD_INT 2
16555: ARRAY
16556: PUSH
16557: LD_INT 1
16559: ARRAY
16560: PUSH
16561: LD_INT 100
16563: PUSH
16564: LD_VAR 0 8
16568: PLUS
16569: EQUAL
16570: IFFALSE 16615
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16572: LD_ADDR_VAR 0 2
16576: PUSH
16577: LD_VAR 0 2
16581: PPUSH
16582: LD_INT 2
16584: PPUSH
16585: LD_VAR 0 2
16589: PUSH
16590: LD_INT 2
16592: ARRAY
16593: PPUSH
16594: LD_INT 1
16596: PPUSH
16597: CALL_OW 3
16601: PPUSH
16602: CALL_OW 1
16606: ST_TO_ADDR
// tmp := 1 ;
16607: LD_ADDR_VAR 0 3
16611: PUSH
16612: LD_STRING 1
16614: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16615: LD_ADDR_VAR 0 6
16619: PUSH
16620: LD_VAR 0 6
16624: PUSH
16625: LD_VAR 0 3
16629: STR
16630: ST_TO_ADDR
// end ;
16631: GO 16527
16633: POP
16634: POP
// if isGameLoad then
16635: LD_VAR 0 1
16639: IFFALSE 17114
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16641: LD_ADDR_VAR 0 4
16645: PUSH
16646: LD_EXP 53
16650: PUSH
16651: LD_EXP 52
16655: PUSH
16656: LD_EXP 54
16660: PUSH
16661: LD_EXP 51
16665: PUSH
16666: LD_EXP 55
16670: PUSH
16671: LD_EXP 56
16675: PUSH
16676: LD_EXP 57
16680: PUSH
16681: LD_EXP 58
16685: PUSH
16686: LD_EXP 59
16690: PUSH
16691: LD_EXP 60
16695: PUSH
16696: LD_EXP 61
16700: PUSH
16701: LD_EXP 62
16705: PUSH
16706: LD_EXP 63
16710: PUSH
16711: LD_EXP 64
16715: PUSH
16716: LD_EXP 72
16720: PUSH
16721: LD_EXP 73
16725: PUSH
16726: LD_EXP 74
16730: PUSH
16731: LD_EXP 75
16735: PUSH
16736: LD_EXP 77
16740: PUSH
16741: LD_EXP 78
16745: PUSH
16746: LD_EXP 79
16750: PUSH
16751: LD_EXP 82
16755: PUSH
16756: LD_EXP 84
16760: PUSH
16761: LD_EXP 85
16765: PUSH
16766: LD_EXP 86
16770: PUSH
16771: LD_EXP 88
16775: PUSH
16776: LD_EXP 89
16780: PUSH
16781: LD_EXP 92
16785: PUSH
16786: LD_EXP 93
16790: PUSH
16791: LD_EXP 94
16795: PUSH
16796: LD_EXP 95
16800: PUSH
16801: LD_EXP 96
16805: PUSH
16806: LD_EXP 97
16810: PUSH
16811: LD_EXP 98
16815: PUSH
16816: LD_EXP 99
16820: PUSH
16821: LD_EXP 100
16825: PUSH
16826: LD_EXP 65
16830: PUSH
16831: LD_EXP 66
16835: PUSH
16836: LD_EXP 69
16840: PUSH
16841: LD_EXP 70
16845: PUSH
16846: LD_EXP 71
16850: PUSH
16851: LD_EXP 67
16855: PUSH
16856: LD_EXP 68
16860: PUSH
16861: LD_EXP 76
16865: PUSH
16866: LD_EXP 80
16870: PUSH
16871: LD_EXP 81
16875: PUSH
16876: LD_EXP 83
16880: PUSH
16881: LD_EXP 87
16885: PUSH
16886: LD_EXP 90
16890: PUSH
16891: LD_EXP 91
16895: PUSH
16896: LD_EXP 101
16900: PUSH
16901: LD_EXP 102
16905: PUSH
16906: LD_EXP 103
16910: PUSH
16911: LD_EXP 104
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: ST_TO_ADDR
// tmp :=  ;
16972: LD_ADDR_VAR 0 3
16976: PUSH
16977: LD_STRING 
16979: ST_TO_ADDR
// for i = 1 to normalCounter do
16980: LD_ADDR_VAR 0 8
16984: PUSH
16985: DOUBLE
16986: LD_INT 1
16988: DEC
16989: ST_TO_ADDR
16990: LD_EXP 49
16994: PUSH
16995: FOR_TO
16996: IFFALSE 17032
// begin if flags [ i ] then
16998: LD_VAR 0 4
17002: PUSH
17003: LD_VAR 0 8
17007: ARRAY
17008: IFFALSE 17030
// tmp := tmp & i & ; ;
17010: LD_ADDR_VAR 0 3
17014: PUSH
17015: LD_VAR 0 3
17019: PUSH
17020: LD_VAR 0 8
17024: STR
17025: PUSH
17026: LD_STRING ;
17028: STR
17029: ST_TO_ADDR
// end ;
17030: GO 16995
17032: POP
17033: POP
// for i = 1 to hardcoreCounter do
17034: LD_ADDR_VAR 0 8
17038: PUSH
17039: DOUBLE
17040: LD_INT 1
17042: DEC
17043: ST_TO_ADDR
17044: LD_EXP 50
17048: PUSH
17049: FOR_TO
17050: IFFALSE 17096
// begin if flags [ normalCounter + i ] then
17052: LD_VAR 0 4
17056: PUSH
17057: LD_EXP 49
17061: PUSH
17062: LD_VAR 0 8
17066: PLUS
17067: ARRAY
17068: IFFALSE 17094
// tmp := tmp & ( 100 + i ) & ; ;
17070: LD_ADDR_VAR 0 3
17074: PUSH
17075: LD_VAR 0 3
17079: PUSH
17080: LD_INT 100
17082: PUSH
17083: LD_VAR 0 8
17087: PLUS
17088: STR
17089: PUSH
17090: LD_STRING ;
17092: STR
17093: ST_TO_ADDR
// end ;
17094: GO 17049
17096: POP
17097: POP
// if tmp then
17098: LD_VAR 0 3
17102: IFFALSE 17114
// active := tmp ;
17104: LD_ADDR_VAR 0 7
17108: PUSH
17109: LD_VAR 0 3
17113: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17114: LD_STRING getStreamItemsFromMission("
17116: PUSH
17117: LD_VAR 0 5
17121: STR
17122: PUSH
17123: LD_STRING ","
17125: STR
17126: PUSH
17127: LD_VAR 0 6
17131: STR
17132: PUSH
17133: LD_STRING ","
17135: STR
17136: PUSH
17137: LD_VAR 0 7
17141: STR
17142: PUSH
17143: LD_STRING ")
17145: STR
17146: PPUSH
17147: CALL_OW 559
// end else
17151: GO 17160
// ToLua ( getStreamItemsFromMission("","","") ) ;
17153: LD_STRING getStreamItemsFromMission("","","")
17155: PPUSH
17156: CALL_OW 559
// end ;
17160: LD_VAR 0 2
17164: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17165: LD_EXP 48
17169: PUSH
17170: LD_EXP 53
17174: AND
17175: IFFALSE 17299
17177: GO 17179
17179: DISABLE
17180: LD_INT 0
17182: PPUSH
17183: PPUSH
// begin enable ;
17184: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17185: LD_ADDR_VAR 0 2
17189: PUSH
17190: LD_INT 22
17192: PUSH
17193: LD_OWVAR 2
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 2
17204: PUSH
17205: LD_INT 34
17207: PUSH
17208: LD_INT 7
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 34
17217: PUSH
17218: LD_INT 45
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 34
17227: PUSH
17228: LD_INT 28
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 34
17237: PUSH
17238: LD_INT 47
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 69
17260: ST_TO_ADDR
// if not tmp then
17261: LD_VAR 0 2
17265: NOT
17266: IFFALSE 17270
// exit ;
17268: GO 17299
// for i in tmp do
17270: LD_ADDR_VAR 0 1
17274: PUSH
17275: LD_VAR 0 2
17279: PUSH
17280: FOR_IN
17281: IFFALSE 17297
// begin SetLives ( i , 0 ) ;
17283: LD_VAR 0 1
17287: PPUSH
17288: LD_INT 0
17290: PPUSH
17291: CALL_OW 234
// end ;
17295: GO 17280
17297: POP
17298: POP
// end ;
17299: PPOPN 2
17301: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17302: LD_EXP 48
17306: PUSH
17307: LD_EXP 54
17311: AND
17312: IFFALSE 17396
17314: GO 17316
17316: DISABLE
17317: LD_INT 0
17319: PPUSH
17320: PPUSH
// begin enable ;
17321: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17322: LD_ADDR_VAR 0 2
17326: PUSH
17327: LD_INT 22
17329: PUSH
17330: LD_OWVAR 2
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: LD_INT 32
17341: PUSH
17342: LD_INT 3
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PPUSH
17353: CALL_OW 69
17357: ST_TO_ADDR
// if not tmp then
17358: LD_VAR 0 2
17362: NOT
17363: IFFALSE 17367
// exit ;
17365: GO 17396
// for i in tmp do
17367: LD_ADDR_VAR 0 1
17371: PUSH
17372: LD_VAR 0 2
17376: PUSH
17377: FOR_IN
17378: IFFALSE 17394
// begin SetLives ( i , 0 ) ;
17380: LD_VAR 0 1
17384: PPUSH
17385: LD_INT 0
17387: PPUSH
17388: CALL_OW 234
// end ;
17392: GO 17377
17394: POP
17395: POP
// end ;
17396: PPOPN 2
17398: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17399: LD_EXP 48
17403: PUSH
17404: LD_EXP 51
17408: AND
17409: IFFALSE 17502
17411: GO 17413
17413: DISABLE
17414: LD_INT 0
17416: PPUSH
// begin enable ;
17417: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17418: LD_ADDR_VAR 0 1
17422: PUSH
17423: LD_INT 22
17425: PUSH
17426: LD_OWVAR 2
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 2
17437: PUSH
17438: LD_INT 25
17440: PUSH
17441: LD_INT 5
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 25
17450: PUSH
17451: LD_INT 9
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 25
17460: PUSH
17461: LD_INT 8
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PPUSH
17478: CALL_OW 69
17482: PUSH
17483: FOR_IN
17484: IFFALSE 17500
// begin SetClass ( i , 1 ) ;
17486: LD_VAR 0 1
17490: PPUSH
17491: LD_INT 1
17493: PPUSH
17494: CALL_OW 336
// end ;
17498: GO 17483
17500: POP
17501: POP
// end ;
17502: PPOPN 1
17504: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17505: LD_EXP 48
17509: PUSH
17510: LD_EXP 52
17514: AND
17515: PUSH
17516: LD_OWVAR 65
17520: PUSH
17521: LD_INT 7
17523: LESS
17524: AND
17525: IFFALSE 17539
17527: GO 17529
17529: DISABLE
// begin enable ;
17530: ENABLE
// game_speed := 7 ;
17531: LD_ADDR_OWVAR 65
17535: PUSH
17536: LD_INT 7
17538: ST_TO_ADDR
// end ;
17539: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17540: LD_EXP 48
17544: PUSH
17545: LD_EXP 55
17549: AND
17550: IFFALSE 17752
17552: GO 17554
17554: DISABLE
17555: LD_INT 0
17557: PPUSH
17558: PPUSH
17559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: LD_INT 81
17567: PUSH
17568: LD_OWVAR 2
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 21
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PPUSH
17591: CALL_OW 69
17595: ST_TO_ADDR
// if not tmp then
17596: LD_VAR 0 3
17600: NOT
17601: IFFALSE 17605
// exit ;
17603: GO 17752
// if tmp > 5 then
17605: LD_VAR 0 3
17609: PUSH
17610: LD_INT 5
17612: GREATER
17613: IFFALSE 17625
// k := 5 else
17615: LD_ADDR_VAR 0 2
17619: PUSH
17620: LD_INT 5
17622: ST_TO_ADDR
17623: GO 17635
// k := tmp ;
17625: LD_ADDR_VAR 0 2
17629: PUSH
17630: LD_VAR 0 3
17634: ST_TO_ADDR
// for i := 1 to k do
17635: LD_ADDR_VAR 0 1
17639: PUSH
17640: DOUBLE
17641: LD_INT 1
17643: DEC
17644: ST_TO_ADDR
17645: LD_VAR 0 2
17649: PUSH
17650: FOR_TO
17651: IFFALSE 17750
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17653: LD_VAR 0 3
17657: PUSH
17658: LD_VAR 0 1
17662: ARRAY
17663: PPUSH
17664: LD_VAR 0 1
17668: PUSH
17669: LD_INT 4
17671: MOD
17672: PUSH
17673: LD_INT 1
17675: PLUS
17676: PPUSH
17677: CALL_OW 259
17681: PUSH
17682: LD_INT 10
17684: LESS
17685: IFFALSE 17748
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17687: LD_VAR 0 3
17691: PUSH
17692: LD_VAR 0 1
17696: ARRAY
17697: PPUSH
17698: LD_VAR 0 1
17702: PUSH
17703: LD_INT 4
17705: MOD
17706: PUSH
17707: LD_INT 1
17709: PLUS
17710: PPUSH
17711: LD_VAR 0 3
17715: PUSH
17716: LD_VAR 0 1
17720: ARRAY
17721: PPUSH
17722: LD_VAR 0 1
17726: PUSH
17727: LD_INT 4
17729: MOD
17730: PUSH
17731: LD_INT 1
17733: PLUS
17734: PPUSH
17735: CALL_OW 259
17739: PUSH
17740: LD_INT 1
17742: PLUS
17743: PPUSH
17744: CALL_OW 237
17748: GO 17650
17750: POP
17751: POP
// end ;
17752: PPOPN 3
17754: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17755: LD_EXP 48
17759: PUSH
17760: LD_EXP 56
17764: AND
17765: IFFALSE 17785
17767: GO 17769
17769: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17770: LD_INT 4
17772: PPUSH
17773: LD_OWVAR 2
17777: PPUSH
17778: LD_INT 0
17780: PPUSH
17781: CALL_OW 324
17785: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17786: LD_EXP 48
17790: PUSH
17791: LD_EXP 85
17795: AND
17796: IFFALSE 17816
17798: GO 17800
17800: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17801: LD_INT 19
17803: PPUSH
17804: LD_OWVAR 2
17808: PPUSH
17809: LD_INT 0
17811: PPUSH
17812: CALL_OW 324
17816: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17817: LD_EXP 48
17821: PUSH
17822: LD_EXP 57
17826: AND
17827: IFFALSE 17929
17829: GO 17831
17831: DISABLE
17832: LD_INT 0
17834: PPUSH
17835: PPUSH
// begin enable ;
17836: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17837: LD_ADDR_VAR 0 2
17841: PUSH
17842: LD_INT 22
17844: PUSH
17845: LD_OWVAR 2
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 2
17856: PUSH
17857: LD_INT 34
17859: PUSH
17860: LD_INT 11
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 34
17869: PUSH
17870: LD_INT 30
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: LIST
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PPUSH
17886: CALL_OW 69
17890: ST_TO_ADDR
// if not tmp then
17891: LD_VAR 0 2
17895: NOT
17896: IFFALSE 17900
// exit ;
17898: GO 17929
// for i in tmp do
17900: LD_ADDR_VAR 0 1
17904: PUSH
17905: LD_VAR 0 2
17909: PUSH
17910: FOR_IN
17911: IFFALSE 17927
// begin SetLives ( i , 0 ) ;
17913: LD_VAR 0 1
17917: PPUSH
17918: LD_INT 0
17920: PPUSH
17921: CALL_OW 234
// end ;
17925: GO 17910
17927: POP
17928: POP
// end ;
17929: PPOPN 2
17931: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17932: LD_EXP 48
17936: PUSH
17937: LD_EXP 58
17941: AND
17942: IFFALSE 17962
17944: GO 17946
17946: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17947: LD_INT 32
17949: PPUSH
17950: LD_OWVAR 2
17954: PPUSH
17955: LD_INT 0
17957: PPUSH
17958: CALL_OW 324
17962: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17963: LD_EXP 48
17967: PUSH
17968: LD_EXP 59
17972: AND
17973: IFFALSE 18154
17975: GO 17977
17977: DISABLE
17978: LD_INT 0
17980: PPUSH
17981: PPUSH
17982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17983: LD_ADDR_VAR 0 2
17987: PUSH
17988: LD_INT 22
17990: PUSH
17991: LD_OWVAR 2
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 33
18002: PUSH
18003: LD_INT 3
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PPUSH
18014: CALL_OW 69
18018: ST_TO_ADDR
// if not tmp then
18019: LD_VAR 0 2
18023: NOT
18024: IFFALSE 18028
// exit ;
18026: GO 18154
// side := 0 ;
18028: LD_ADDR_VAR 0 3
18032: PUSH
18033: LD_INT 0
18035: ST_TO_ADDR
// for i := 1 to 8 do
18036: LD_ADDR_VAR 0 1
18040: PUSH
18041: DOUBLE
18042: LD_INT 1
18044: DEC
18045: ST_TO_ADDR
18046: LD_INT 8
18048: PUSH
18049: FOR_TO
18050: IFFALSE 18098
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18052: LD_OWVAR 2
18056: PUSH
18057: LD_VAR 0 1
18061: NONEQUAL
18062: PUSH
18063: LD_OWVAR 2
18067: PPUSH
18068: LD_VAR 0 1
18072: PPUSH
18073: CALL_OW 81
18077: PUSH
18078: LD_INT 2
18080: EQUAL
18081: AND
18082: IFFALSE 18096
// begin side := i ;
18084: LD_ADDR_VAR 0 3
18088: PUSH
18089: LD_VAR 0 1
18093: ST_TO_ADDR
// break ;
18094: GO 18098
// end ;
18096: GO 18049
18098: POP
18099: POP
// if not side then
18100: LD_VAR 0 3
18104: NOT
18105: IFFALSE 18109
// exit ;
18107: GO 18154
// for i := 1 to tmp do
18109: LD_ADDR_VAR 0 1
18113: PUSH
18114: DOUBLE
18115: LD_INT 1
18117: DEC
18118: ST_TO_ADDR
18119: LD_VAR 0 2
18123: PUSH
18124: FOR_TO
18125: IFFALSE 18152
// if Prob ( 60 ) then
18127: LD_INT 60
18129: PPUSH
18130: CALL_OW 13
18134: IFFALSE 18150
// SetSide ( i , side ) ;
18136: LD_VAR 0 1
18140: PPUSH
18141: LD_VAR 0 3
18145: PPUSH
18146: CALL_OW 235
18150: GO 18124
18152: POP
18153: POP
// end ;
18154: PPOPN 3
18156: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18157: LD_EXP 48
18161: PUSH
18162: LD_EXP 61
18166: AND
18167: IFFALSE 18286
18169: GO 18171
18171: DISABLE
18172: LD_INT 0
18174: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18175: LD_ADDR_VAR 0 1
18179: PUSH
18180: LD_INT 22
18182: PUSH
18183: LD_OWVAR 2
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 21
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 3
18204: PUSH
18205: LD_INT 23
18207: PUSH
18208: LD_INT 0
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: LIST
18223: PPUSH
18224: CALL_OW 69
18228: PUSH
18229: FOR_IN
18230: IFFALSE 18284
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18232: LD_VAR 0 1
18236: PPUSH
18237: CALL_OW 257
18241: PUSH
18242: LD_INT 1
18244: PUSH
18245: LD_INT 2
18247: PUSH
18248: LD_INT 3
18250: PUSH
18251: LD_INT 4
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: IN
18260: IFFALSE 18282
// SetClass ( un , rand ( 1 , 4 ) ) ;
18262: LD_VAR 0 1
18266: PPUSH
18267: LD_INT 1
18269: PPUSH
18270: LD_INT 4
18272: PPUSH
18273: CALL_OW 12
18277: PPUSH
18278: CALL_OW 336
18282: GO 18229
18284: POP
18285: POP
// end ;
18286: PPOPN 1
18288: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18289: LD_EXP 48
18293: PUSH
18294: LD_EXP 60
18298: AND
18299: IFFALSE 18378
18301: GO 18303
18303: DISABLE
18304: LD_INT 0
18306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18307: LD_ADDR_VAR 0 1
18311: PUSH
18312: LD_INT 22
18314: PUSH
18315: LD_OWVAR 2
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 21
18326: PUSH
18327: LD_INT 3
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PPUSH
18338: CALL_OW 69
18342: ST_TO_ADDR
// if not tmp then
18343: LD_VAR 0 1
18347: NOT
18348: IFFALSE 18352
// exit ;
18350: GO 18378
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18352: LD_VAR 0 1
18356: PUSH
18357: LD_INT 1
18359: PPUSH
18360: LD_VAR 0 1
18364: PPUSH
18365: CALL_OW 12
18369: ARRAY
18370: PPUSH
18371: LD_INT 100
18373: PPUSH
18374: CALL_OW 234
// end ;
18378: PPOPN 1
18380: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18381: LD_EXP 48
18385: PUSH
18386: LD_EXP 62
18390: AND
18391: IFFALSE 18489
18393: GO 18395
18395: DISABLE
18396: LD_INT 0
18398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18399: LD_ADDR_VAR 0 1
18403: PUSH
18404: LD_INT 22
18406: PUSH
18407: LD_OWVAR 2
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 21
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PPUSH
18430: CALL_OW 69
18434: ST_TO_ADDR
// if not tmp then
18435: LD_VAR 0 1
18439: NOT
18440: IFFALSE 18444
// exit ;
18442: GO 18489
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18444: LD_VAR 0 1
18448: PUSH
18449: LD_INT 1
18451: PPUSH
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 12
18461: ARRAY
18462: PPUSH
18463: LD_INT 1
18465: PPUSH
18466: LD_INT 4
18468: PPUSH
18469: CALL_OW 12
18473: PPUSH
18474: LD_INT 3000
18476: PPUSH
18477: LD_INT 9000
18479: PPUSH
18480: CALL_OW 12
18484: PPUSH
18485: CALL_OW 492
// end ;
18489: PPOPN 1
18491: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18492: LD_EXP 48
18496: PUSH
18497: LD_EXP 63
18501: AND
18502: IFFALSE 18522
18504: GO 18506
18506: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18507: LD_INT 1
18509: PPUSH
18510: LD_OWVAR 2
18514: PPUSH
18515: LD_INT 0
18517: PPUSH
18518: CALL_OW 324
18522: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18523: LD_EXP 48
18527: PUSH
18528: LD_EXP 64
18532: AND
18533: IFFALSE 18616
18535: GO 18537
18537: DISABLE
18538: LD_INT 0
18540: PPUSH
18541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18542: LD_ADDR_VAR 0 2
18546: PUSH
18547: LD_INT 22
18549: PUSH
18550: LD_OWVAR 2
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 21
18561: PUSH
18562: LD_INT 3
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PPUSH
18573: CALL_OW 69
18577: ST_TO_ADDR
// if not tmp then
18578: LD_VAR 0 2
18582: NOT
18583: IFFALSE 18587
// exit ;
18585: GO 18616
// for i in tmp do
18587: LD_ADDR_VAR 0 1
18591: PUSH
18592: LD_VAR 0 2
18596: PUSH
18597: FOR_IN
18598: IFFALSE 18614
// SetBLevel ( i , 10 ) ;
18600: LD_VAR 0 1
18604: PPUSH
18605: LD_INT 10
18607: PPUSH
18608: CALL_OW 241
18612: GO 18597
18614: POP
18615: POP
// end ;
18616: PPOPN 2
18618: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18619: LD_EXP 48
18623: PUSH
18624: LD_EXP 65
18628: AND
18629: IFFALSE 18740
18631: GO 18633
18633: DISABLE
18634: LD_INT 0
18636: PPUSH
18637: PPUSH
18638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18639: LD_ADDR_VAR 0 3
18643: PUSH
18644: LD_INT 22
18646: PUSH
18647: LD_OWVAR 2
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 25
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PPUSH
18670: CALL_OW 69
18674: ST_TO_ADDR
// if not tmp then
18675: LD_VAR 0 3
18679: NOT
18680: IFFALSE 18684
// exit ;
18682: GO 18740
// un := tmp [ rand ( 1 , tmp ) ] ;
18684: LD_ADDR_VAR 0 2
18688: PUSH
18689: LD_VAR 0 3
18693: PUSH
18694: LD_INT 1
18696: PPUSH
18697: LD_VAR 0 3
18701: PPUSH
18702: CALL_OW 12
18706: ARRAY
18707: ST_TO_ADDR
// if Crawls ( un ) then
18708: LD_VAR 0 2
18712: PPUSH
18713: CALL_OW 318
18717: IFFALSE 18728
// ComWalk ( un ) ;
18719: LD_VAR 0 2
18723: PPUSH
18724: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18728: LD_VAR 0 2
18732: PPUSH
18733: LD_INT 5
18735: PPUSH
18736: CALL_OW 336
// end ;
18740: PPOPN 3
18742: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18743: LD_EXP 48
18747: PUSH
18748: LD_EXP 66
18752: AND
18753: PUSH
18754: LD_OWVAR 67
18758: PUSH
18759: LD_INT 4
18761: LESS
18762: AND
18763: IFFALSE 18782
18765: GO 18767
18767: DISABLE
// begin Difficulty := Difficulty + 1 ;
18768: LD_ADDR_OWVAR 67
18772: PUSH
18773: LD_OWVAR 67
18777: PUSH
18778: LD_INT 1
18780: PLUS
18781: ST_TO_ADDR
// end ;
18782: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18783: LD_EXP 48
18787: PUSH
18788: LD_EXP 67
18792: AND
18793: IFFALSE 18896
18795: GO 18797
18797: DISABLE
18798: LD_INT 0
18800: PPUSH
// begin for i := 1 to 5 do
18801: LD_ADDR_VAR 0 1
18805: PUSH
18806: DOUBLE
18807: LD_INT 1
18809: DEC
18810: ST_TO_ADDR
18811: LD_INT 5
18813: PUSH
18814: FOR_TO
18815: IFFALSE 18894
// begin uc_nation := nation_nature ;
18817: LD_ADDR_OWVAR 21
18821: PUSH
18822: LD_INT 0
18824: ST_TO_ADDR
// uc_side := 0 ;
18825: LD_ADDR_OWVAR 20
18829: PUSH
18830: LD_INT 0
18832: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18833: LD_ADDR_OWVAR 29
18837: PUSH
18838: LD_INT 12
18840: PUSH
18841: LD_INT 12
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: ST_TO_ADDR
// hc_agressivity := 20 ;
18848: LD_ADDR_OWVAR 35
18852: PUSH
18853: LD_INT 20
18855: ST_TO_ADDR
// hc_class := class_tiger ;
18856: LD_ADDR_OWVAR 28
18860: PUSH
18861: LD_INT 14
18863: ST_TO_ADDR
// hc_gallery :=  ;
18864: LD_ADDR_OWVAR 33
18868: PUSH
18869: LD_STRING 
18871: ST_TO_ADDR
// hc_name :=  ;
18872: LD_ADDR_OWVAR 26
18876: PUSH
18877: LD_STRING 
18879: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18880: CALL_OW 44
18884: PPUSH
18885: LD_INT 0
18887: PPUSH
18888: CALL_OW 51
// end ;
18892: GO 18814
18894: POP
18895: POP
// end ;
18896: PPOPN 1
18898: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18899: LD_EXP 48
18903: PUSH
18904: LD_EXP 68
18908: AND
18909: IFFALSE 18918
18911: GO 18913
18913: DISABLE
// StreamSibBomb ;
18914: CALL 18919 0 0
18918: END
// export function StreamSibBomb ; var i , x , y ; begin
18919: LD_INT 0
18921: PPUSH
18922: PPUSH
18923: PPUSH
18924: PPUSH
// result := false ;
18925: LD_ADDR_VAR 0 1
18929: PUSH
18930: LD_INT 0
18932: ST_TO_ADDR
// for i := 1 to 16 do
18933: LD_ADDR_VAR 0 2
18937: PUSH
18938: DOUBLE
18939: LD_INT 1
18941: DEC
18942: ST_TO_ADDR
18943: LD_INT 16
18945: PUSH
18946: FOR_TO
18947: IFFALSE 19146
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18949: LD_ADDR_VAR 0 3
18953: PUSH
18954: LD_INT 10
18956: PUSH
18957: LD_INT 20
18959: PUSH
18960: LD_INT 30
18962: PUSH
18963: LD_INT 40
18965: PUSH
18966: LD_INT 50
18968: PUSH
18969: LD_INT 60
18971: PUSH
18972: LD_INT 70
18974: PUSH
18975: LD_INT 80
18977: PUSH
18978: LD_INT 90
18980: PUSH
18981: LD_INT 100
18983: PUSH
18984: LD_INT 110
18986: PUSH
18987: LD_INT 120
18989: PUSH
18990: LD_INT 130
18992: PUSH
18993: LD_INT 140
18995: PUSH
18996: LD_INT 150
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 1
19018: PPUSH
19019: LD_INT 15
19021: PPUSH
19022: CALL_OW 12
19026: ARRAY
19027: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19028: LD_ADDR_VAR 0 4
19032: PUSH
19033: LD_INT 10
19035: PUSH
19036: LD_INT 20
19038: PUSH
19039: LD_INT 30
19041: PUSH
19042: LD_INT 40
19044: PUSH
19045: LD_INT 50
19047: PUSH
19048: LD_INT 60
19050: PUSH
19051: LD_INT 70
19053: PUSH
19054: LD_INT 80
19056: PUSH
19057: LD_INT 90
19059: PUSH
19060: LD_INT 100
19062: PUSH
19063: LD_INT 110
19065: PUSH
19066: LD_INT 120
19068: PUSH
19069: LD_INT 130
19071: PUSH
19072: LD_INT 140
19074: PUSH
19075: LD_INT 150
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 1
19097: PPUSH
19098: LD_INT 15
19100: PPUSH
19101: CALL_OW 12
19105: ARRAY
19106: ST_TO_ADDR
// if ValidHex ( x , y ) then
19107: LD_VAR 0 3
19111: PPUSH
19112: LD_VAR 0 4
19116: PPUSH
19117: CALL_OW 488
19121: IFFALSE 19144
// begin result := [ x , y ] ;
19123: LD_ADDR_VAR 0 1
19127: PUSH
19128: LD_VAR 0 3
19132: PUSH
19133: LD_VAR 0 4
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: ST_TO_ADDR
// break ;
19142: GO 19146
// end ; end ;
19144: GO 18946
19146: POP
19147: POP
// if result then
19148: LD_VAR 0 1
19152: IFFALSE 19212
// begin ToLua ( playSibBomb() ) ;
19154: LD_STRING playSibBomb()
19156: PPUSH
19157: CALL_OW 559
// wait ( 0 0$14 ) ;
19161: LD_INT 490
19163: PPUSH
19164: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19168: LD_VAR 0 1
19172: PUSH
19173: LD_INT 1
19175: ARRAY
19176: PPUSH
19177: LD_VAR 0 1
19181: PUSH
19182: LD_INT 2
19184: ARRAY
19185: PPUSH
19186: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19190: LD_VAR 0 1
19194: PUSH
19195: LD_INT 1
19197: ARRAY
19198: PPUSH
19199: LD_VAR 0 1
19203: PUSH
19204: LD_INT 2
19206: ARRAY
19207: PPUSH
19208: CALL_OW 429
// end ; end ;
19212: LD_VAR 0 1
19216: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19217: LD_EXP 48
19221: PUSH
19222: LD_EXP 70
19226: AND
19227: IFFALSE 19239
19229: GO 19231
19231: DISABLE
// YouLost (  ) ;
19232: LD_STRING 
19234: PPUSH
19235: CALL_OW 104
19239: END
// every 0 0$1 trigger StreamModeActive and sFog do
19240: LD_EXP 48
19244: PUSH
19245: LD_EXP 69
19249: AND
19250: IFFALSE 19264
19252: GO 19254
19254: DISABLE
// FogOff ( your_side ) ;
19255: LD_OWVAR 2
19259: PPUSH
19260: CALL_OW 344
19264: END
// every 0 0$1 trigger StreamModeActive and sSun do
19265: LD_EXP 48
19269: PUSH
19270: LD_EXP 71
19274: AND
19275: IFFALSE 19303
19277: GO 19279
19279: DISABLE
// begin solar_recharge_percent := 0 ;
19280: LD_ADDR_OWVAR 79
19284: PUSH
19285: LD_INT 0
19287: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19288: LD_INT 10500
19290: PPUSH
19291: CALL_OW 67
// solar_recharge_percent := 100 ;
19295: LD_ADDR_OWVAR 79
19299: PUSH
19300: LD_INT 100
19302: ST_TO_ADDR
// end ;
19303: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19304: LD_EXP 48
19308: PUSH
19309: LD_EXP 72
19313: AND
19314: IFFALSE 19553
19316: GO 19318
19318: DISABLE
19319: LD_INT 0
19321: PPUSH
19322: PPUSH
19323: PPUSH
// begin tmp := [ ] ;
19324: LD_ADDR_VAR 0 3
19328: PUSH
19329: EMPTY
19330: ST_TO_ADDR
// for i := 1 to 6 do
19331: LD_ADDR_VAR 0 1
19335: PUSH
19336: DOUBLE
19337: LD_INT 1
19339: DEC
19340: ST_TO_ADDR
19341: LD_INT 6
19343: PUSH
19344: FOR_TO
19345: IFFALSE 19450
// begin uc_nation := nation_nature ;
19347: LD_ADDR_OWVAR 21
19351: PUSH
19352: LD_INT 0
19354: ST_TO_ADDR
// uc_side := 0 ;
19355: LD_ADDR_OWVAR 20
19359: PUSH
19360: LD_INT 0
19362: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19363: LD_ADDR_OWVAR 29
19367: PUSH
19368: LD_INT 12
19370: PUSH
19371: LD_INT 12
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: ST_TO_ADDR
// hc_agressivity := 20 ;
19378: LD_ADDR_OWVAR 35
19382: PUSH
19383: LD_INT 20
19385: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19386: LD_ADDR_OWVAR 28
19390: PUSH
19391: LD_INT 17
19393: ST_TO_ADDR
// hc_gallery :=  ;
19394: LD_ADDR_OWVAR 33
19398: PUSH
19399: LD_STRING 
19401: ST_TO_ADDR
// hc_name :=  ;
19402: LD_ADDR_OWVAR 26
19406: PUSH
19407: LD_STRING 
19409: ST_TO_ADDR
// un := CreateHuman ;
19410: LD_ADDR_VAR 0 2
19414: PUSH
19415: CALL_OW 44
19419: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19420: LD_VAR 0 2
19424: PPUSH
19425: LD_INT 1
19427: PPUSH
19428: CALL_OW 51
// tmp := tmp ^ un ;
19432: LD_ADDR_VAR 0 3
19436: PUSH
19437: LD_VAR 0 3
19441: PUSH
19442: LD_VAR 0 2
19446: ADD
19447: ST_TO_ADDR
// end ;
19448: GO 19344
19450: POP
19451: POP
// repeat wait ( 0 0$1 ) ;
19452: LD_INT 35
19454: PPUSH
19455: CALL_OW 67
// for un in tmp do
19459: LD_ADDR_VAR 0 2
19463: PUSH
19464: LD_VAR 0 3
19468: PUSH
19469: FOR_IN
19470: IFFALSE 19544
// begin if IsDead ( un ) then
19472: LD_VAR 0 2
19476: PPUSH
19477: CALL_OW 301
19481: IFFALSE 19501
// begin tmp := tmp diff un ;
19483: LD_ADDR_VAR 0 3
19487: PUSH
19488: LD_VAR 0 3
19492: PUSH
19493: LD_VAR 0 2
19497: DIFF
19498: ST_TO_ADDR
// continue ;
19499: GO 19469
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19501: LD_VAR 0 2
19505: PPUSH
19506: LD_INT 3
19508: PUSH
19509: LD_INT 22
19511: PUSH
19512: LD_INT 0
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PPUSH
19523: CALL_OW 69
19527: PPUSH
19528: LD_VAR 0 2
19532: PPUSH
19533: CALL_OW 74
19537: PPUSH
19538: CALL_OW 115
// end ;
19542: GO 19469
19544: POP
19545: POP
// until not tmp ;
19546: LD_VAR 0 3
19550: NOT
19551: IFFALSE 19452
// end ;
19553: PPOPN 3
19555: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19556: LD_EXP 48
19560: PUSH
19561: LD_EXP 73
19565: AND
19566: IFFALSE 19620
19568: GO 19570
19570: DISABLE
// begin ToLua ( displayTroll(); ) ;
19571: LD_STRING displayTroll();
19573: PPUSH
19574: CALL_OW 559
// wait ( 3 3$00 ) ;
19578: LD_INT 6300
19580: PPUSH
19581: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19585: LD_STRING hideTroll();
19587: PPUSH
19588: CALL_OW 559
// wait ( 1 1$00 ) ;
19592: LD_INT 2100
19594: PPUSH
19595: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19599: LD_STRING displayTroll();
19601: PPUSH
19602: CALL_OW 559
// wait ( 1 1$00 ) ;
19606: LD_INT 2100
19608: PPUSH
19609: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19613: LD_STRING hideTroll();
19615: PPUSH
19616: CALL_OW 559
// end ;
19620: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19621: LD_EXP 48
19625: PUSH
19626: LD_EXP 74
19630: AND
19631: IFFALSE 19694
19633: GO 19635
19635: DISABLE
19636: LD_INT 0
19638: PPUSH
// begin p := 0 ;
19639: LD_ADDR_VAR 0 1
19643: PUSH
19644: LD_INT 0
19646: ST_TO_ADDR
// repeat game_speed := 1 ;
19647: LD_ADDR_OWVAR 65
19651: PUSH
19652: LD_INT 1
19654: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19655: LD_INT 35
19657: PPUSH
19658: CALL_OW 67
// p := p + 1 ;
19662: LD_ADDR_VAR 0 1
19666: PUSH
19667: LD_VAR 0 1
19671: PUSH
19672: LD_INT 1
19674: PLUS
19675: ST_TO_ADDR
// until p >= 60 ;
19676: LD_VAR 0 1
19680: PUSH
19681: LD_INT 60
19683: GREATEREQUAL
19684: IFFALSE 19647
// game_speed := 4 ;
19686: LD_ADDR_OWVAR 65
19690: PUSH
19691: LD_INT 4
19693: ST_TO_ADDR
// end ;
19694: PPOPN 1
19696: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19697: LD_EXP 48
19701: PUSH
19702: LD_EXP 75
19706: AND
19707: IFFALSE 19853
19709: GO 19711
19711: DISABLE
19712: LD_INT 0
19714: PPUSH
19715: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19716: LD_ADDR_VAR 0 1
19720: PUSH
19721: LD_INT 22
19723: PUSH
19724: LD_OWVAR 2
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 2
19735: PUSH
19736: LD_INT 30
19738: PUSH
19739: LD_INT 0
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 30
19748: PUSH
19749: LD_INT 1
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PPUSH
19765: CALL_OW 69
19769: ST_TO_ADDR
// if not depot then
19770: LD_VAR 0 1
19774: NOT
19775: IFFALSE 19779
// exit ;
19777: GO 19853
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19779: LD_ADDR_VAR 0 2
19783: PUSH
19784: LD_VAR 0 1
19788: PUSH
19789: LD_INT 1
19791: PPUSH
19792: LD_VAR 0 1
19796: PPUSH
19797: CALL_OW 12
19801: ARRAY
19802: PPUSH
19803: CALL_OW 274
19807: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19808: LD_VAR 0 2
19812: PPUSH
19813: LD_INT 1
19815: PPUSH
19816: LD_INT 0
19818: PPUSH
19819: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19823: LD_VAR 0 2
19827: PPUSH
19828: LD_INT 2
19830: PPUSH
19831: LD_INT 0
19833: PPUSH
19834: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19838: LD_VAR 0 2
19842: PPUSH
19843: LD_INT 3
19845: PPUSH
19846: LD_INT 0
19848: PPUSH
19849: CALL_OW 277
// end ;
19853: PPOPN 2
19855: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19856: LD_EXP 48
19860: PUSH
19861: LD_EXP 76
19865: AND
19866: IFFALSE 19963
19868: GO 19870
19870: DISABLE
19871: LD_INT 0
19873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19874: LD_ADDR_VAR 0 1
19878: PUSH
19879: LD_INT 22
19881: PUSH
19882: LD_OWVAR 2
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 21
19893: PUSH
19894: LD_INT 1
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 3
19903: PUSH
19904: LD_INT 23
19906: PUSH
19907: LD_INT 0
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: LIST
19922: PPUSH
19923: CALL_OW 69
19927: ST_TO_ADDR
// if not tmp then
19928: LD_VAR 0 1
19932: NOT
19933: IFFALSE 19937
// exit ;
19935: GO 19963
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19937: LD_VAR 0 1
19941: PUSH
19942: LD_INT 1
19944: PPUSH
19945: LD_VAR 0 1
19949: PPUSH
19950: CALL_OW 12
19954: ARRAY
19955: PPUSH
19956: LD_INT 200
19958: PPUSH
19959: CALL_OW 234
// end ;
19963: PPOPN 1
19965: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19966: LD_EXP 48
19970: PUSH
19971: LD_EXP 77
19975: AND
19976: IFFALSE 20055
19978: GO 19980
19980: DISABLE
19981: LD_INT 0
19983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19984: LD_ADDR_VAR 0 1
19988: PUSH
19989: LD_INT 22
19991: PUSH
19992: LD_OWVAR 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 21
20003: PUSH
20004: LD_INT 2
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PPUSH
20015: CALL_OW 69
20019: ST_TO_ADDR
// if not tmp then
20020: LD_VAR 0 1
20024: NOT
20025: IFFALSE 20029
// exit ;
20027: GO 20055
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20029: LD_VAR 0 1
20033: PUSH
20034: LD_INT 1
20036: PPUSH
20037: LD_VAR 0 1
20041: PPUSH
20042: CALL_OW 12
20046: ARRAY
20047: PPUSH
20048: LD_INT 60
20050: PPUSH
20051: CALL_OW 234
// end ;
20055: PPOPN 1
20057: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20058: LD_EXP 48
20062: PUSH
20063: LD_EXP 78
20067: AND
20068: IFFALSE 20167
20070: GO 20072
20072: DISABLE
20073: LD_INT 0
20075: PPUSH
20076: PPUSH
// begin enable ;
20077: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20078: LD_ADDR_VAR 0 1
20082: PUSH
20083: LD_INT 22
20085: PUSH
20086: LD_OWVAR 2
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 61
20097: PUSH
20098: EMPTY
20099: LIST
20100: PUSH
20101: LD_INT 33
20103: PUSH
20104: LD_INT 2
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: LIST
20115: PPUSH
20116: CALL_OW 69
20120: ST_TO_ADDR
// if not tmp then
20121: LD_VAR 0 1
20125: NOT
20126: IFFALSE 20130
// exit ;
20128: GO 20167
// for i in tmp do
20130: LD_ADDR_VAR 0 2
20134: PUSH
20135: LD_VAR 0 1
20139: PUSH
20140: FOR_IN
20141: IFFALSE 20165
// if IsControledBy ( i ) then
20143: LD_VAR 0 2
20147: PPUSH
20148: CALL_OW 312
20152: IFFALSE 20163
// ComUnlink ( i ) ;
20154: LD_VAR 0 2
20158: PPUSH
20159: CALL_OW 136
20163: GO 20140
20165: POP
20166: POP
// end ;
20167: PPOPN 2
20169: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20170: LD_EXP 48
20174: PUSH
20175: LD_EXP 79
20179: AND
20180: IFFALSE 20320
20182: GO 20184
20184: DISABLE
20185: LD_INT 0
20187: PPUSH
20188: PPUSH
// begin ToLua ( displayPowell(); ) ;
20189: LD_STRING displayPowell();
20191: PPUSH
20192: CALL_OW 559
// uc_side := 0 ;
20196: LD_ADDR_OWVAR 20
20200: PUSH
20201: LD_INT 0
20203: ST_TO_ADDR
// uc_nation := 2 ;
20204: LD_ADDR_OWVAR 21
20208: PUSH
20209: LD_INT 2
20211: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20212: LD_ADDR_OWVAR 37
20216: PUSH
20217: LD_INT 14
20219: ST_TO_ADDR
// vc_engine := engine_siberite ;
20220: LD_ADDR_OWVAR 39
20224: PUSH
20225: LD_INT 3
20227: ST_TO_ADDR
// vc_control := control_apeman ;
20228: LD_ADDR_OWVAR 38
20232: PUSH
20233: LD_INT 5
20235: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20236: LD_ADDR_OWVAR 40
20240: PUSH
20241: LD_INT 29
20243: ST_TO_ADDR
// un := CreateVehicle ;
20244: LD_ADDR_VAR 0 2
20248: PUSH
20249: CALL_OW 45
20253: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20254: LD_VAR 0 2
20258: PPUSH
20259: LD_INT 1
20261: PPUSH
20262: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20266: LD_INT 35
20268: PPUSH
20269: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20273: LD_VAR 0 2
20277: PPUSH
20278: LD_INT 22
20280: PUSH
20281: LD_OWVAR 2
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PPUSH
20290: CALL_OW 69
20294: PPUSH
20295: LD_VAR 0 2
20299: PPUSH
20300: CALL_OW 74
20304: PPUSH
20305: CALL_OW 115
// until IsDead ( un ) ;
20309: LD_VAR 0 2
20313: PPUSH
20314: CALL_OW 301
20318: IFFALSE 20266
// end ;
20320: PPOPN 2
20322: END
// every 0 0$1 trigger StreamModeActive and sStu do
20323: LD_EXP 48
20327: PUSH
20328: LD_EXP 87
20332: AND
20333: IFFALSE 20349
20335: GO 20337
20337: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20338: LD_STRING displayStucuk();
20340: PPUSH
20341: CALL_OW 559
// ResetFog ;
20345: CALL_OW 335
// end ;
20349: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20350: LD_EXP 48
20354: PUSH
20355: LD_EXP 80
20359: AND
20360: IFFALSE 20501
20362: GO 20364
20364: DISABLE
20365: LD_INT 0
20367: PPUSH
20368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20369: LD_ADDR_VAR 0 2
20373: PUSH
20374: LD_INT 22
20376: PUSH
20377: LD_OWVAR 2
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 21
20388: PUSH
20389: LD_INT 1
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PPUSH
20400: CALL_OW 69
20404: ST_TO_ADDR
// if not tmp then
20405: LD_VAR 0 2
20409: NOT
20410: IFFALSE 20414
// exit ;
20412: GO 20501
// un := tmp [ rand ( 1 , tmp ) ] ;
20414: LD_ADDR_VAR 0 1
20418: PUSH
20419: LD_VAR 0 2
20423: PUSH
20424: LD_INT 1
20426: PPUSH
20427: LD_VAR 0 2
20431: PPUSH
20432: CALL_OW 12
20436: ARRAY
20437: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20438: LD_VAR 0 1
20442: PPUSH
20443: LD_INT 0
20445: PPUSH
20446: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20450: LD_VAR 0 1
20454: PPUSH
20455: LD_OWVAR 3
20459: PUSH
20460: LD_VAR 0 1
20464: DIFF
20465: PPUSH
20466: LD_VAR 0 1
20470: PPUSH
20471: CALL_OW 74
20475: PPUSH
20476: CALL_OW 115
// wait ( 0 0$20 ) ;
20480: LD_INT 700
20482: PPUSH
20483: CALL_OW 67
// SetSide ( un , your_side ) ;
20487: LD_VAR 0 1
20491: PPUSH
20492: LD_OWVAR 2
20496: PPUSH
20497: CALL_OW 235
// end ;
20501: PPOPN 2
20503: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20504: LD_EXP 48
20508: PUSH
20509: LD_EXP 81
20513: AND
20514: IFFALSE 20620
20516: GO 20518
20518: DISABLE
20519: LD_INT 0
20521: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20522: LD_ADDR_VAR 0 1
20526: PUSH
20527: LD_INT 22
20529: PUSH
20530: LD_OWVAR 2
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 2
20541: PUSH
20542: LD_INT 30
20544: PUSH
20545: LD_INT 0
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 30
20554: PUSH
20555: LD_INT 1
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: LIST
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PPUSH
20571: CALL_OW 69
20575: ST_TO_ADDR
// if not depot then
20576: LD_VAR 0 1
20580: NOT
20581: IFFALSE 20585
// exit ;
20583: GO 20620
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20585: LD_VAR 0 1
20589: PUSH
20590: LD_INT 1
20592: ARRAY
20593: PPUSH
20594: CALL_OW 250
20598: PPUSH
20599: LD_VAR 0 1
20603: PUSH
20604: LD_INT 1
20606: ARRAY
20607: PPUSH
20608: CALL_OW 251
20612: PPUSH
20613: LD_INT 70
20615: PPUSH
20616: CALL_OW 495
// end ;
20620: PPOPN 1
20622: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20623: LD_EXP 48
20627: PUSH
20628: LD_EXP 82
20632: AND
20633: IFFALSE 20844
20635: GO 20637
20637: DISABLE
20638: LD_INT 0
20640: PPUSH
20641: PPUSH
20642: PPUSH
20643: PPUSH
20644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20645: LD_ADDR_VAR 0 5
20649: PUSH
20650: LD_INT 22
20652: PUSH
20653: LD_OWVAR 2
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 21
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PPUSH
20676: CALL_OW 69
20680: ST_TO_ADDR
// if not tmp then
20681: LD_VAR 0 5
20685: NOT
20686: IFFALSE 20690
// exit ;
20688: GO 20844
// for i in tmp do
20690: LD_ADDR_VAR 0 1
20694: PUSH
20695: LD_VAR 0 5
20699: PUSH
20700: FOR_IN
20701: IFFALSE 20842
// begin d := rand ( 0 , 5 ) ;
20703: LD_ADDR_VAR 0 4
20707: PUSH
20708: LD_INT 0
20710: PPUSH
20711: LD_INT 5
20713: PPUSH
20714: CALL_OW 12
20718: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20719: LD_ADDR_VAR 0 2
20723: PUSH
20724: LD_VAR 0 1
20728: PPUSH
20729: CALL_OW 250
20733: PPUSH
20734: LD_VAR 0 4
20738: PPUSH
20739: LD_INT 3
20741: PPUSH
20742: LD_INT 12
20744: PPUSH
20745: CALL_OW 12
20749: PPUSH
20750: CALL_OW 272
20754: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20755: LD_ADDR_VAR 0 3
20759: PUSH
20760: LD_VAR 0 1
20764: PPUSH
20765: CALL_OW 251
20769: PPUSH
20770: LD_VAR 0 4
20774: PPUSH
20775: LD_INT 3
20777: PPUSH
20778: LD_INT 12
20780: PPUSH
20781: CALL_OW 12
20785: PPUSH
20786: CALL_OW 273
20790: ST_TO_ADDR
// if ValidHex ( x , y ) then
20791: LD_VAR 0 2
20795: PPUSH
20796: LD_VAR 0 3
20800: PPUSH
20801: CALL_OW 488
20805: IFFALSE 20840
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20807: LD_VAR 0 1
20811: PPUSH
20812: LD_VAR 0 2
20816: PPUSH
20817: LD_VAR 0 3
20821: PPUSH
20822: LD_INT 3
20824: PPUSH
20825: LD_INT 6
20827: PPUSH
20828: CALL_OW 12
20832: PPUSH
20833: LD_INT 1
20835: PPUSH
20836: CALL_OW 483
// end ;
20840: GO 20700
20842: POP
20843: POP
// end ;
20844: PPOPN 5
20846: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20847: LD_EXP 48
20851: PUSH
20852: LD_EXP 83
20856: AND
20857: IFFALSE 20951
20859: GO 20861
20861: DISABLE
20862: LD_INT 0
20864: PPUSH
20865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20866: LD_ADDR_VAR 0 2
20870: PUSH
20871: LD_INT 22
20873: PUSH
20874: LD_OWVAR 2
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 32
20885: PUSH
20886: LD_INT 1
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 21
20895: PUSH
20896: LD_INT 2
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: PPUSH
20908: CALL_OW 69
20912: ST_TO_ADDR
// if not tmp then
20913: LD_VAR 0 2
20917: NOT
20918: IFFALSE 20922
// exit ;
20920: GO 20951
// for i in tmp do
20922: LD_ADDR_VAR 0 1
20926: PUSH
20927: LD_VAR 0 2
20931: PUSH
20932: FOR_IN
20933: IFFALSE 20949
// SetFuel ( i , 0 ) ;
20935: LD_VAR 0 1
20939: PPUSH
20940: LD_INT 0
20942: PPUSH
20943: CALL_OW 240
20947: GO 20932
20949: POP
20950: POP
// end ;
20951: PPOPN 2
20953: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20954: LD_EXP 48
20958: PUSH
20959: LD_EXP 84
20963: AND
20964: IFFALSE 21030
20966: GO 20968
20968: DISABLE
20969: LD_INT 0
20971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20972: LD_ADDR_VAR 0 1
20976: PUSH
20977: LD_INT 22
20979: PUSH
20980: LD_OWVAR 2
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 30
20991: PUSH
20992: LD_INT 29
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PPUSH
21003: CALL_OW 69
21007: ST_TO_ADDR
// if not tmp then
21008: LD_VAR 0 1
21012: NOT
21013: IFFALSE 21017
// exit ;
21015: GO 21030
// DestroyUnit ( tmp [ 1 ] ) ;
21017: LD_VAR 0 1
21021: PUSH
21022: LD_INT 1
21024: ARRAY
21025: PPUSH
21026: CALL_OW 65
// end ;
21030: PPOPN 1
21032: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21033: LD_EXP 48
21037: PUSH
21038: LD_EXP 86
21042: AND
21043: IFFALSE 21172
21045: GO 21047
21047: DISABLE
21048: LD_INT 0
21050: PPUSH
// begin uc_side := 0 ;
21051: LD_ADDR_OWVAR 20
21055: PUSH
21056: LD_INT 0
21058: ST_TO_ADDR
// uc_nation := nation_arabian ;
21059: LD_ADDR_OWVAR 21
21063: PUSH
21064: LD_INT 2
21066: ST_TO_ADDR
// hc_gallery :=  ;
21067: LD_ADDR_OWVAR 33
21071: PUSH
21072: LD_STRING 
21074: ST_TO_ADDR
// hc_name :=  ;
21075: LD_ADDR_OWVAR 26
21079: PUSH
21080: LD_STRING 
21082: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21083: LD_INT 1
21085: PPUSH
21086: LD_INT 11
21088: PPUSH
21089: LD_INT 10
21091: PPUSH
21092: CALL_OW 380
// un := CreateHuman ;
21096: LD_ADDR_VAR 0 1
21100: PUSH
21101: CALL_OW 44
21105: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21106: LD_VAR 0 1
21110: PPUSH
21111: LD_INT 1
21113: PPUSH
21114: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21118: LD_INT 35
21120: PPUSH
21121: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21125: LD_VAR 0 1
21129: PPUSH
21130: LD_INT 22
21132: PUSH
21133: LD_OWVAR 2
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PPUSH
21142: CALL_OW 69
21146: PPUSH
21147: LD_VAR 0 1
21151: PPUSH
21152: CALL_OW 74
21156: PPUSH
21157: CALL_OW 115
// until IsDead ( un ) ;
21161: LD_VAR 0 1
21165: PPUSH
21166: CALL_OW 301
21170: IFFALSE 21118
// end ;
21172: PPOPN 1
21174: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21175: LD_EXP 48
21179: PUSH
21180: LD_EXP 88
21184: AND
21185: IFFALSE 21197
21187: GO 21189
21189: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21190: LD_STRING earthquake(getX(game), 0, 32)
21192: PPUSH
21193: CALL_OW 559
21197: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21198: LD_EXP 48
21202: PUSH
21203: LD_EXP 89
21207: AND
21208: IFFALSE 21299
21210: GO 21212
21212: DISABLE
21213: LD_INT 0
21215: PPUSH
// begin enable ;
21216: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21217: LD_ADDR_VAR 0 1
21221: PUSH
21222: LD_INT 22
21224: PUSH
21225: LD_OWVAR 2
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 21
21236: PUSH
21237: LD_INT 2
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 33
21246: PUSH
21247: LD_INT 3
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: LIST
21258: PPUSH
21259: CALL_OW 69
21263: ST_TO_ADDR
// if not tmp then
21264: LD_VAR 0 1
21268: NOT
21269: IFFALSE 21273
// exit ;
21271: GO 21299
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21273: LD_VAR 0 1
21277: PUSH
21278: LD_INT 1
21280: PPUSH
21281: LD_VAR 0 1
21285: PPUSH
21286: CALL_OW 12
21290: ARRAY
21291: PPUSH
21292: LD_INT 1
21294: PPUSH
21295: CALL_OW 234
// end ;
21299: PPOPN 1
21301: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21302: LD_EXP 48
21306: PUSH
21307: LD_EXP 90
21311: AND
21312: IFFALSE 21453
21314: GO 21316
21316: DISABLE
21317: LD_INT 0
21319: PPUSH
21320: PPUSH
21321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 22
21329: PUSH
21330: LD_OWVAR 2
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 25
21341: PUSH
21342: LD_INT 1
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PPUSH
21353: CALL_OW 69
21357: ST_TO_ADDR
// if not tmp then
21358: LD_VAR 0 3
21362: NOT
21363: IFFALSE 21367
// exit ;
21365: GO 21453
// un := tmp [ rand ( 1 , tmp ) ] ;
21367: LD_ADDR_VAR 0 2
21371: PUSH
21372: LD_VAR 0 3
21376: PUSH
21377: LD_INT 1
21379: PPUSH
21380: LD_VAR 0 3
21384: PPUSH
21385: CALL_OW 12
21389: ARRAY
21390: ST_TO_ADDR
// if Crawls ( un ) then
21391: LD_VAR 0 2
21395: PPUSH
21396: CALL_OW 318
21400: IFFALSE 21411
// ComWalk ( un ) ;
21402: LD_VAR 0 2
21406: PPUSH
21407: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21411: LD_VAR 0 2
21415: PPUSH
21416: LD_INT 9
21418: PPUSH
21419: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21423: LD_INT 28
21425: PPUSH
21426: LD_OWVAR 2
21430: PPUSH
21431: LD_INT 2
21433: PPUSH
21434: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21438: LD_INT 29
21440: PPUSH
21441: LD_OWVAR 2
21445: PPUSH
21446: LD_INT 2
21448: PPUSH
21449: CALL_OW 322
// end ;
21453: PPOPN 3
21455: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21456: LD_EXP 48
21460: PUSH
21461: LD_EXP 91
21465: AND
21466: IFFALSE 21577
21468: GO 21470
21470: DISABLE
21471: LD_INT 0
21473: PPUSH
21474: PPUSH
21475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21476: LD_ADDR_VAR 0 3
21480: PUSH
21481: LD_INT 22
21483: PUSH
21484: LD_OWVAR 2
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 25
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PPUSH
21507: CALL_OW 69
21511: ST_TO_ADDR
// if not tmp then
21512: LD_VAR 0 3
21516: NOT
21517: IFFALSE 21521
// exit ;
21519: GO 21577
// un := tmp [ rand ( 1 , tmp ) ] ;
21521: LD_ADDR_VAR 0 2
21525: PUSH
21526: LD_VAR 0 3
21530: PUSH
21531: LD_INT 1
21533: PPUSH
21534: LD_VAR 0 3
21538: PPUSH
21539: CALL_OW 12
21543: ARRAY
21544: ST_TO_ADDR
// if Crawls ( un ) then
21545: LD_VAR 0 2
21549: PPUSH
21550: CALL_OW 318
21554: IFFALSE 21565
// ComWalk ( un ) ;
21556: LD_VAR 0 2
21560: PPUSH
21561: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21565: LD_VAR 0 2
21569: PPUSH
21570: LD_INT 8
21572: PPUSH
21573: CALL_OW 336
// end ;
21577: PPOPN 3
21579: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21580: LD_EXP 48
21584: PUSH
21585: LD_EXP 92
21589: AND
21590: IFFALSE 21734
21592: GO 21594
21594: DISABLE
21595: LD_INT 0
21597: PPUSH
21598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21599: LD_ADDR_VAR 0 2
21603: PUSH
21604: LD_INT 22
21606: PUSH
21607: LD_OWVAR 2
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 21
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 2
21628: PUSH
21629: LD_INT 34
21631: PUSH
21632: LD_INT 12
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 34
21641: PUSH
21642: LD_INT 51
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 34
21651: PUSH
21652: LD_INT 32
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: LIST
21669: PPUSH
21670: CALL_OW 69
21674: ST_TO_ADDR
// if not tmp then
21675: LD_VAR 0 2
21679: NOT
21680: IFFALSE 21684
// exit ;
21682: GO 21734
// for i in tmp do
21684: LD_ADDR_VAR 0 1
21688: PUSH
21689: LD_VAR 0 2
21693: PUSH
21694: FOR_IN
21695: IFFALSE 21732
// if GetCargo ( i , mat_artifact ) = 0 then
21697: LD_VAR 0 1
21701: PPUSH
21702: LD_INT 4
21704: PPUSH
21705: CALL_OW 289
21709: PUSH
21710: LD_INT 0
21712: EQUAL
21713: IFFALSE 21730
// SetCargo ( i , mat_siberit , 100 ) ;
21715: LD_VAR 0 1
21719: PPUSH
21720: LD_INT 3
21722: PPUSH
21723: LD_INT 100
21725: PPUSH
21726: CALL_OW 290
21730: GO 21694
21732: POP
21733: POP
// end ;
21734: PPOPN 2
21736: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21737: LD_EXP 48
21741: PUSH
21742: LD_EXP 93
21746: AND
21747: IFFALSE 21930
21749: GO 21751
21751: DISABLE
21752: LD_INT 0
21754: PPUSH
21755: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21756: LD_ADDR_VAR 0 2
21760: PUSH
21761: LD_INT 22
21763: PUSH
21764: LD_OWVAR 2
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PPUSH
21773: CALL_OW 69
21777: ST_TO_ADDR
// if not tmp then
21778: LD_VAR 0 2
21782: NOT
21783: IFFALSE 21787
// exit ;
21785: GO 21930
// for i := 1 to 2 do
21787: LD_ADDR_VAR 0 1
21791: PUSH
21792: DOUBLE
21793: LD_INT 1
21795: DEC
21796: ST_TO_ADDR
21797: LD_INT 2
21799: PUSH
21800: FOR_TO
21801: IFFALSE 21928
// begin uc_side := your_side ;
21803: LD_ADDR_OWVAR 20
21807: PUSH
21808: LD_OWVAR 2
21812: ST_TO_ADDR
// uc_nation := nation_american ;
21813: LD_ADDR_OWVAR 21
21817: PUSH
21818: LD_INT 1
21820: ST_TO_ADDR
// vc_chassis := us_morphling ;
21821: LD_ADDR_OWVAR 37
21825: PUSH
21826: LD_INT 5
21828: ST_TO_ADDR
// vc_engine := engine_siberite ;
21829: LD_ADDR_OWVAR 39
21833: PUSH
21834: LD_INT 3
21836: ST_TO_ADDR
// vc_control := control_computer ;
21837: LD_ADDR_OWVAR 38
21841: PUSH
21842: LD_INT 3
21844: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21845: LD_ADDR_OWVAR 40
21849: PUSH
21850: LD_INT 10
21852: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21853: LD_VAR 0 2
21857: PUSH
21858: LD_INT 1
21860: ARRAY
21861: PPUSH
21862: CALL_OW 310
21866: NOT
21867: IFFALSE 21914
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21869: CALL_OW 45
21873: PPUSH
21874: LD_VAR 0 2
21878: PUSH
21879: LD_INT 1
21881: ARRAY
21882: PPUSH
21883: CALL_OW 250
21887: PPUSH
21888: LD_VAR 0 2
21892: PUSH
21893: LD_INT 1
21895: ARRAY
21896: PPUSH
21897: CALL_OW 251
21901: PPUSH
21902: LD_INT 12
21904: PPUSH
21905: LD_INT 1
21907: PPUSH
21908: CALL_OW 50
21912: GO 21926
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21914: CALL_OW 45
21918: PPUSH
21919: LD_INT 1
21921: PPUSH
21922: CALL_OW 51
// end ;
21926: GO 21800
21928: POP
21929: POP
// end ;
21930: PPOPN 2
21932: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21933: LD_EXP 48
21937: PUSH
21938: LD_EXP 94
21942: AND
21943: IFFALSE 22165
21945: GO 21947
21947: DISABLE
21948: LD_INT 0
21950: PPUSH
21951: PPUSH
21952: PPUSH
21953: PPUSH
21954: PPUSH
21955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21956: LD_ADDR_VAR 0 6
21960: PUSH
21961: LD_INT 22
21963: PUSH
21964: LD_OWVAR 2
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 21
21975: PUSH
21976: LD_INT 1
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 3
21985: PUSH
21986: LD_INT 23
21988: PUSH
21989: LD_INT 0
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: LIST
22004: PPUSH
22005: CALL_OW 69
22009: ST_TO_ADDR
// if not tmp then
22010: LD_VAR 0 6
22014: NOT
22015: IFFALSE 22019
// exit ;
22017: GO 22165
// s1 := rand ( 1 , 4 ) ;
22019: LD_ADDR_VAR 0 2
22023: PUSH
22024: LD_INT 1
22026: PPUSH
22027: LD_INT 4
22029: PPUSH
22030: CALL_OW 12
22034: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22035: LD_ADDR_VAR 0 4
22039: PUSH
22040: LD_VAR 0 6
22044: PUSH
22045: LD_INT 1
22047: ARRAY
22048: PPUSH
22049: LD_VAR 0 2
22053: PPUSH
22054: CALL_OW 259
22058: ST_TO_ADDR
// if s1 = 1 then
22059: LD_VAR 0 2
22063: PUSH
22064: LD_INT 1
22066: EQUAL
22067: IFFALSE 22087
// s2 := rand ( 2 , 4 ) else
22069: LD_ADDR_VAR 0 3
22073: PUSH
22074: LD_INT 2
22076: PPUSH
22077: LD_INT 4
22079: PPUSH
22080: CALL_OW 12
22084: ST_TO_ADDR
22085: GO 22095
// s2 := 1 ;
22087: LD_ADDR_VAR 0 3
22091: PUSH
22092: LD_INT 1
22094: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22095: LD_ADDR_VAR 0 5
22099: PUSH
22100: LD_VAR 0 6
22104: PUSH
22105: LD_INT 1
22107: ARRAY
22108: PPUSH
22109: LD_VAR 0 3
22113: PPUSH
22114: CALL_OW 259
22118: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22119: LD_VAR 0 6
22123: PUSH
22124: LD_INT 1
22126: ARRAY
22127: PPUSH
22128: LD_VAR 0 2
22132: PPUSH
22133: LD_VAR 0 5
22137: PPUSH
22138: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22142: LD_VAR 0 6
22146: PUSH
22147: LD_INT 1
22149: ARRAY
22150: PPUSH
22151: LD_VAR 0 3
22155: PPUSH
22156: LD_VAR 0 4
22160: PPUSH
22161: CALL_OW 237
// end ;
22165: PPOPN 6
22167: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22168: LD_EXP 48
22172: PUSH
22173: LD_EXP 95
22177: AND
22178: IFFALSE 22257
22180: GO 22182
22182: DISABLE
22183: LD_INT 0
22185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22186: LD_ADDR_VAR 0 1
22190: PUSH
22191: LD_INT 22
22193: PUSH
22194: LD_OWVAR 2
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 30
22205: PUSH
22206: LD_INT 3
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PPUSH
22217: CALL_OW 69
22221: ST_TO_ADDR
// if not tmp then
22222: LD_VAR 0 1
22226: NOT
22227: IFFALSE 22231
// exit ;
22229: GO 22257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22231: LD_VAR 0 1
22235: PUSH
22236: LD_INT 1
22238: PPUSH
22239: LD_VAR 0 1
22243: PPUSH
22244: CALL_OW 12
22248: ARRAY
22249: PPUSH
22250: LD_INT 1
22252: PPUSH
22253: CALL_OW 234
// end ;
22257: PPOPN 1
22259: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22260: LD_EXP 48
22264: PUSH
22265: LD_EXP 96
22269: AND
22270: IFFALSE 22382
22272: GO 22274
22274: DISABLE
22275: LD_INT 0
22277: PPUSH
22278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22279: LD_ADDR_VAR 0 2
22283: PUSH
22284: LD_INT 22
22286: PUSH
22287: LD_OWVAR 2
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 2
22298: PUSH
22299: LD_INT 30
22301: PUSH
22302: LD_INT 27
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 30
22311: PUSH
22312: LD_INT 26
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 30
22321: PUSH
22322: LD_INT 28
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PPUSH
22339: CALL_OW 69
22343: ST_TO_ADDR
// if not tmp then
22344: LD_VAR 0 2
22348: NOT
22349: IFFALSE 22353
// exit ;
22351: GO 22382
// for i in tmp do
22353: LD_ADDR_VAR 0 1
22357: PUSH
22358: LD_VAR 0 2
22362: PUSH
22363: FOR_IN
22364: IFFALSE 22380
// SetLives ( i , 1 ) ;
22366: LD_VAR 0 1
22370: PPUSH
22371: LD_INT 1
22373: PPUSH
22374: CALL_OW 234
22378: GO 22363
22380: POP
22381: POP
// end ;
22382: PPOPN 2
22384: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22385: LD_EXP 48
22389: PUSH
22390: LD_EXP 97
22394: AND
22395: IFFALSE 22682
22397: GO 22399
22399: DISABLE
22400: LD_INT 0
22402: PPUSH
22403: PPUSH
22404: PPUSH
// begin i := rand ( 1 , 7 ) ;
22405: LD_ADDR_VAR 0 1
22409: PUSH
22410: LD_INT 1
22412: PPUSH
22413: LD_INT 7
22415: PPUSH
22416: CALL_OW 12
22420: ST_TO_ADDR
// case i of 1 :
22421: LD_VAR 0 1
22425: PUSH
22426: LD_INT 1
22428: DOUBLE
22429: EQUAL
22430: IFTRUE 22434
22432: GO 22444
22434: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22435: LD_STRING earthquake(getX(game), 0, 32)
22437: PPUSH
22438: CALL_OW 559
22442: GO 22682
22444: LD_INT 2
22446: DOUBLE
22447: EQUAL
22448: IFTRUE 22452
22450: GO 22466
22452: POP
// begin ToLua ( displayStucuk(); ) ;
22453: LD_STRING displayStucuk();
22455: PPUSH
22456: CALL_OW 559
// ResetFog ;
22460: CALL_OW 335
// end ; 3 :
22464: GO 22682
22466: LD_INT 3
22468: DOUBLE
22469: EQUAL
22470: IFTRUE 22474
22472: GO 22578
22474: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22475: LD_ADDR_VAR 0 2
22479: PUSH
22480: LD_INT 22
22482: PUSH
22483: LD_OWVAR 2
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 25
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PPUSH
22506: CALL_OW 69
22510: ST_TO_ADDR
// if not tmp then
22511: LD_VAR 0 2
22515: NOT
22516: IFFALSE 22520
// exit ;
22518: GO 22682
// un := tmp [ rand ( 1 , tmp ) ] ;
22520: LD_ADDR_VAR 0 3
22524: PUSH
22525: LD_VAR 0 2
22529: PUSH
22530: LD_INT 1
22532: PPUSH
22533: LD_VAR 0 2
22537: PPUSH
22538: CALL_OW 12
22542: ARRAY
22543: ST_TO_ADDR
// if Crawls ( un ) then
22544: LD_VAR 0 3
22548: PPUSH
22549: CALL_OW 318
22553: IFFALSE 22564
// ComWalk ( un ) ;
22555: LD_VAR 0 3
22559: PPUSH
22560: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22564: LD_VAR 0 3
22568: PPUSH
22569: LD_INT 8
22571: PPUSH
22572: CALL_OW 336
// end ; 4 :
22576: GO 22682
22578: LD_INT 4
22580: DOUBLE
22581: EQUAL
22582: IFTRUE 22586
22584: GO 22660
22586: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22587: LD_ADDR_VAR 0 2
22591: PUSH
22592: LD_INT 22
22594: PUSH
22595: LD_OWVAR 2
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 30
22606: PUSH
22607: LD_INT 29
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PPUSH
22618: CALL_OW 69
22622: ST_TO_ADDR
// if not tmp then
22623: LD_VAR 0 2
22627: NOT
22628: IFFALSE 22632
// exit ;
22630: GO 22682
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22632: LD_VAR 0 2
22636: PUSH
22637: LD_INT 1
22639: ARRAY
22640: PPUSH
22641: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22645: LD_VAR 0 2
22649: PUSH
22650: LD_INT 1
22652: ARRAY
22653: PPUSH
22654: CALL_OW 65
// end ; 5 .. 7 :
22658: GO 22682
22660: LD_INT 5
22662: DOUBLE
22663: GREATEREQUAL
22664: IFFALSE 22672
22666: LD_INT 7
22668: DOUBLE
22669: LESSEQUAL
22670: IFTRUE 22674
22672: GO 22681
22674: POP
// StreamSibBomb ; end ;
22675: CALL 18919 0 0
22679: GO 22682
22681: POP
// end ;
22682: PPOPN 3
22684: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22685: LD_EXP 48
22689: PUSH
22690: LD_EXP 98
22694: AND
22695: IFFALSE 22851
22697: GO 22699
22699: DISABLE
22700: LD_INT 0
22702: PPUSH
22703: PPUSH
22704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22705: LD_ADDR_VAR 0 2
22709: PUSH
22710: LD_INT 81
22712: PUSH
22713: LD_OWVAR 2
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 2
22724: PUSH
22725: LD_INT 21
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 21
22737: PUSH
22738: LD_INT 2
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: LIST
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PPUSH
22754: CALL_OW 69
22758: ST_TO_ADDR
// if not tmp then
22759: LD_VAR 0 2
22763: NOT
22764: IFFALSE 22768
// exit ;
22766: GO 22851
// p := 0 ;
22768: LD_ADDR_VAR 0 3
22772: PUSH
22773: LD_INT 0
22775: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22776: LD_INT 35
22778: PPUSH
22779: CALL_OW 67
// p := p + 1 ;
22783: LD_ADDR_VAR 0 3
22787: PUSH
22788: LD_VAR 0 3
22792: PUSH
22793: LD_INT 1
22795: PLUS
22796: ST_TO_ADDR
// for i in tmp do
22797: LD_ADDR_VAR 0 1
22801: PUSH
22802: LD_VAR 0 2
22806: PUSH
22807: FOR_IN
22808: IFFALSE 22839
// if GetLives ( i ) < 1000 then
22810: LD_VAR 0 1
22814: PPUSH
22815: CALL_OW 256
22819: PUSH
22820: LD_INT 1000
22822: LESS
22823: IFFALSE 22837
// SetLives ( i , 1000 ) ;
22825: LD_VAR 0 1
22829: PPUSH
22830: LD_INT 1000
22832: PPUSH
22833: CALL_OW 234
22837: GO 22807
22839: POP
22840: POP
// until p > 20 ;
22841: LD_VAR 0 3
22845: PUSH
22846: LD_INT 20
22848: GREATER
22849: IFFALSE 22776
// end ;
22851: PPOPN 3
22853: END
// every 0 0$1 trigger StreamModeActive and sTime do
22854: LD_EXP 48
22858: PUSH
22859: LD_EXP 99
22863: AND
22864: IFFALSE 22899
22866: GO 22868
22868: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22869: LD_INT 28
22871: PPUSH
22872: LD_OWVAR 2
22876: PPUSH
22877: LD_INT 2
22879: PPUSH
22880: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22884: LD_INT 30
22886: PPUSH
22887: LD_OWVAR 2
22891: PPUSH
22892: LD_INT 2
22894: PPUSH
22895: CALL_OW 322
// end ;
22899: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22900: LD_EXP 48
22904: PUSH
22905: LD_EXP 100
22909: AND
22910: IFFALSE 23031
22912: GO 22914
22914: DISABLE
22915: LD_INT 0
22917: PPUSH
22918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22919: LD_ADDR_VAR 0 2
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_OWVAR 2
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 21
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 3
22948: PUSH
22949: LD_INT 23
22951: PUSH
22952: LD_INT 0
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: PPUSH
22968: CALL_OW 69
22972: ST_TO_ADDR
// if not tmp then
22973: LD_VAR 0 2
22977: NOT
22978: IFFALSE 22982
// exit ;
22980: GO 23031
// for i in tmp do
22982: LD_ADDR_VAR 0 1
22986: PUSH
22987: LD_VAR 0 2
22991: PUSH
22992: FOR_IN
22993: IFFALSE 23029
// begin if Crawls ( i ) then
22995: LD_VAR 0 1
22999: PPUSH
23000: CALL_OW 318
23004: IFFALSE 23015
// ComWalk ( i ) ;
23006: LD_VAR 0 1
23010: PPUSH
23011: CALL_OW 138
// SetClass ( i , 2 ) ;
23015: LD_VAR 0 1
23019: PPUSH
23020: LD_INT 2
23022: PPUSH
23023: CALL_OW 336
// end ;
23027: GO 22992
23029: POP
23030: POP
// end ;
23031: PPOPN 2
23033: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23034: LD_EXP 48
23038: PUSH
23039: LD_EXP 101
23043: AND
23044: IFFALSE 23332
23046: GO 23048
23048: DISABLE
23049: LD_INT 0
23051: PPUSH
23052: PPUSH
23053: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23054: LD_OWVAR 2
23058: PPUSH
23059: LD_INT 9
23061: PPUSH
23062: LD_INT 1
23064: PPUSH
23065: LD_INT 1
23067: PPUSH
23068: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23072: LD_INT 9
23074: PPUSH
23075: LD_OWVAR 2
23079: PPUSH
23080: CALL_OW 343
// uc_side := 9 ;
23084: LD_ADDR_OWVAR 20
23088: PUSH
23089: LD_INT 9
23091: ST_TO_ADDR
// uc_nation := 2 ;
23092: LD_ADDR_OWVAR 21
23096: PUSH
23097: LD_INT 2
23099: ST_TO_ADDR
// hc_name := Dark Warrior ;
23100: LD_ADDR_OWVAR 26
23104: PUSH
23105: LD_STRING Dark Warrior
23107: ST_TO_ADDR
// hc_gallery :=  ;
23108: LD_ADDR_OWVAR 33
23112: PUSH
23113: LD_STRING 
23115: ST_TO_ADDR
// hc_noskilllimit := true ;
23116: LD_ADDR_OWVAR 76
23120: PUSH
23121: LD_INT 1
23123: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23124: LD_ADDR_OWVAR 31
23128: PUSH
23129: LD_INT 30
23131: PUSH
23132: LD_INT 30
23134: PUSH
23135: LD_INT 30
23137: PUSH
23138: LD_INT 30
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: ST_TO_ADDR
// un := CreateHuman ;
23147: LD_ADDR_VAR 0 3
23151: PUSH
23152: CALL_OW 44
23156: ST_TO_ADDR
// hc_noskilllimit := false ;
23157: LD_ADDR_OWVAR 76
23161: PUSH
23162: LD_INT 0
23164: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23165: LD_VAR 0 3
23169: PPUSH
23170: LD_INT 1
23172: PPUSH
23173: CALL_OW 51
// ToLua ( playRanger() ) ;
23177: LD_STRING playRanger()
23179: PPUSH
23180: CALL_OW 559
// p := 0 ;
23184: LD_ADDR_VAR 0 2
23188: PUSH
23189: LD_INT 0
23191: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23192: LD_INT 35
23194: PPUSH
23195: CALL_OW 67
// p := p + 1 ;
23199: LD_ADDR_VAR 0 2
23203: PUSH
23204: LD_VAR 0 2
23208: PUSH
23209: LD_INT 1
23211: PLUS
23212: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23213: LD_VAR 0 3
23217: PPUSH
23218: CALL_OW 256
23222: PUSH
23223: LD_INT 1000
23225: LESS
23226: IFFALSE 23240
// SetLives ( un , 1000 ) ;
23228: LD_VAR 0 3
23232: PPUSH
23233: LD_INT 1000
23235: PPUSH
23236: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23240: LD_VAR 0 3
23244: PPUSH
23245: LD_INT 81
23247: PUSH
23248: LD_OWVAR 2
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 91
23259: PUSH
23260: LD_VAR 0 3
23264: PUSH
23265: LD_INT 30
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: LIST
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PPUSH
23277: CALL_OW 69
23281: PPUSH
23282: LD_VAR 0 3
23286: PPUSH
23287: CALL_OW 74
23291: PPUSH
23292: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23296: LD_VAR 0 2
23300: PUSH
23301: LD_INT 80
23303: GREATER
23304: PUSH
23305: LD_VAR 0 3
23309: PPUSH
23310: CALL_OW 301
23314: OR
23315: IFFALSE 23192
// if un then
23317: LD_VAR 0 3
23321: IFFALSE 23332
// RemoveUnit ( un ) ;
23323: LD_VAR 0 3
23327: PPUSH
23328: CALL_OW 64
// end ;
23332: PPOPN 3
23334: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23335: LD_EXP 102
23339: IFFALSE 23455
23341: GO 23343
23343: DISABLE
23344: LD_INT 0
23346: PPUSH
23347: PPUSH
23348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23349: LD_ADDR_VAR 0 2
23353: PUSH
23354: LD_INT 81
23356: PUSH
23357: LD_OWVAR 2
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 21
23368: PUSH
23369: LD_INT 1
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PPUSH
23380: CALL_OW 69
23384: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23385: LD_STRING playComputer()
23387: PPUSH
23388: CALL_OW 559
// if not tmp then
23392: LD_VAR 0 2
23396: NOT
23397: IFFALSE 23401
// exit ;
23399: GO 23455
// for i in tmp do
23401: LD_ADDR_VAR 0 1
23405: PUSH
23406: LD_VAR 0 2
23410: PUSH
23411: FOR_IN
23412: IFFALSE 23453
// for j := 1 to 4 do
23414: LD_ADDR_VAR 0 3
23418: PUSH
23419: DOUBLE
23420: LD_INT 1
23422: DEC
23423: ST_TO_ADDR
23424: LD_INT 4
23426: PUSH
23427: FOR_TO
23428: IFFALSE 23449
// SetSkill ( i , j , 10 ) ;
23430: LD_VAR 0 1
23434: PPUSH
23435: LD_VAR 0 3
23439: PPUSH
23440: LD_INT 10
23442: PPUSH
23443: CALL_OW 237
23447: GO 23427
23449: POP
23450: POP
23451: GO 23411
23453: POP
23454: POP
// end ;
23455: PPOPN 3
23457: END
// every 0 0$1 trigger s30 do var i , tmp ;
23458: LD_EXP 103
23462: IFFALSE 23531
23464: GO 23466
23466: DISABLE
23467: LD_INT 0
23469: PPUSH
23470: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23471: LD_ADDR_VAR 0 2
23475: PUSH
23476: LD_INT 22
23478: PUSH
23479: LD_OWVAR 2
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PPUSH
23488: CALL_OW 69
23492: ST_TO_ADDR
// if not tmp then
23493: LD_VAR 0 2
23497: NOT
23498: IFFALSE 23502
// exit ;
23500: GO 23531
// for i in tmp do
23502: LD_ADDR_VAR 0 1
23506: PUSH
23507: LD_VAR 0 2
23511: PUSH
23512: FOR_IN
23513: IFFALSE 23529
// SetLives ( i , 300 ) ;
23515: LD_VAR 0 1
23519: PPUSH
23520: LD_INT 300
23522: PPUSH
23523: CALL_OW 234
23527: GO 23512
23529: POP
23530: POP
// end ;
23531: PPOPN 2
23533: END
// every 0 0$1 trigger s60 do var i , tmp ;
23534: LD_EXP 104
23538: IFFALSE 23607
23540: GO 23542
23542: DISABLE
23543: LD_INT 0
23545: PPUSH
23546: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23547: LD_ADDR_VAR 0 2
23551: PUSH
23552: LD_INT 22
23554: PUSH
23555: LD_OWVAR 2
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PPUSH
23564: CALL_OW 69
23568: ST_TO_ADDR
// if not tmp then
23569: LD_VAR 0 2
23573: NOT
23574: IFFALSE 23578
// exit ;
23576: GO 23607
// for i in tmp do
23578: LD_ADDR_VAR 0 1
23582: PUSH
23583: LD_VAR 0 2
23587: PUSH
23588: FOR_IN
23589: IFFALSE 23605
// SetLives ( i , 600 ) ;
23591: LD_VAR 0 1
23595: PPUSH
23596: LD_INT 600
23598: PPUSH
23599: CALL_OW 234
23603: GO 23588
23605: POP
23606: POP
// end ;
23607: PPOPN 2
23609: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23610: LD_INT 0
23612: PPUSH
// case cmd of 301 :
23613: LD_VAR 0 1
23617: PUSH
23618: LD_INT 301
23620: DOUBLE
23621: EQUAL
23622: IFTRUE 23626
23624: GO 23658
23626: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23627: LD_VAR 0 6
23631: PPUSH
23632: LD_VAR 0 7
23636: PPUSH
23637: LD_VAR 0 8
23641: PPUSH
23642: LD_VAR 0 4
23646: PPUSH
23647: LD_VAR 0 5
23651: PPUSH
23652: CALL 24867 0 5
23656: GO 23779
23658: LD_INT 302
23660: DOUBLE
23661: EQUAL
23662: IFTRUE 23666
23664: GO 23703
23666: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23667: LD_VAR 0 6
23671: PPUSH
23672: LD_VAR 0 7
23676: PPUSH
23677: LD_VAR 0 8
23681: PPUSH
23682: LD_VAR 0 9
23686: PPUSH
23687: LD_VAR 0 4
23691: PPUSH
23692: LD_VAR 0 5
23696: PPUSH
23697: CALL 24958 0 6
23701: GO 23779
23703: LD_INT 303
23705: DOUBLE
23706: EQUAL
23707: IFTRUE 23711
23709: GO 23748
23711: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23712: LD_VAR 0 6
23716: PPUSH
23717: LD_VAR 0 7
23721: PPUSH
23722: LD_VAR 0 8
23726: PPUSH
23727: LD_VAR 0 9
23731: PPUSH
23732: LD_VAR 0 4
23736: PPUSH
23737: LD_VAR 0 5
23741: PPUSH
23742: CALL 23784 0 6
23746: GO 23779
23748: LD_INT 304
23750: DOUBLE
23751: EQUAL
23752: IFTRUE 23756
23754: GO 23778
23756: POP
// hHackTeleport ( unit , x , y ) ; end ;
23757: LD_VAR 0 2
23761: PPUSH
23762: LD_VAR 0 4
23766: PPUSH
23767: LD_VAR 0 5
23771: PPUSH
23772: CALL 25551 0 3
23776: GO 23779
23778: POP
// end ;
23779: LD_VAR 0 12
23783: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23784: LD_INT 0
23786: PPUSH
23787: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23788: LD_VAR 0 1
23792: PUSH
23793: LD_INT 1
23795: LESS
23796: PUSH
23797: LD_VAR 0 1
23801: PUSH
23802: LD_INT 3
23804: GREATER
23805: OR
23806: PUSH
23807: LD_VAR 0 5
23811: PPUSH
23812: LD_VAR 0 6
23816: PPUSH
23817: CALL_OW 428
23821: OR
23822: IFFALSE 23826
// exit ;
23824: GO 24554
// uc_side := your_side ;
23826: LD_ADDR_OWVAR 20
23830: PUSH
23831: LD_OWVAR 2
23835: ST_TO_ADDR
// uc_nation := nation ;
23836: LD_ADDR_OWVAR 21
23840: PUSH
23841: LD_VAR 0 1
23845: ST_TO_ADDR
// bc_level = 1 ;
23846: LD_ADDR_OWVAR 43
23850: PUSH
23851: LD_INT 1
23853: ST_TO_ADDR
// case btype of 1 :
23854: LD_VAR 0 2
23858: PUSH
23859: LD_INT 1
23861: DOUBLE
23862: EQUAL
23863: IFTRUE 23867
23865: GO 23878
23867: POP
// bc_type := b_depot ; 2 :
23868: LD_ADDR_OWVAR 42
23872: PUSH
23873: LD_INT 0
23875: ST_TO_ADDR
23876: GO 24498
23878: LD_INT 2
23880: DOUBLE
23881: EQUAL
23882: IFTRUE 23886
23884: GO 23897
23886: POP
// bc_type := b_warehouse ; 3 :
23887: LD_ADDR_OWVAR 42
23891: PUSH
23892: LD_INT 1
23894: ST_TO_ADDR
23895: GO 24498
23897: LD_INT 3
23899: DOUBLE
23900: EQUAL
23901: IFTRUE 23905
23903: GO 23916
23905: POP
// bc_type := b_lab ; 4 .. 9 :
23906: LD_ADDR_OWVAR 42
23910: PUSH
23911: LD_INT 6
23913: ST_TO_ADDR
23914: GO 24498
23916: LD_INT 4
23918: DOUBLE
23919: GREATEREQUAL
23920: IFFALSE 23928
23922: LD_INT 9
23924: DOUBLE
23925: LESSEQUAL
23926: IFTRUE 23930
23928: GO 23990
23930: POP
// begin bc_type := b_lab_half ;
23931: LD_ADDR_OWVAR 42
23935: PUSH
23936: LD_INT 7
23938: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23939: LD_ADDR_OWVAR 44
23943: PUSH
23944: LD_INT 10
23946: PUSH
23947: LD_INT 11
23949: PUSH
23950: LD_INT 12
23952: PUSH
23953: LD_INT 15
23955: PUSH
23956: LD_INT 14
23958: PUSH
23959: LD_INT 13
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: PUSH
23970: LD_VAR 0 2
23974: PUSH
23975: LD_INT 3
23977: MINUS
23978: ARRAY
23979: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23980: LD_ADDR_OWVAR 45
23984: PUSH
23985: LD_INT 9
23987: ST_TO_ADDR
// end ; 10 .. 13 :
23988: GO 24498
23990: LD_INT 10
23992: DOUBLE
23993: GREATEREQUAL
23994: IFFALSE 24002
23996: LD_INT 13
23998: DOUBLE
23999: LESSEQUAL
24000: IFTRUE 24004
24002: GO 24081
24004: POP
// begin bc_type := b_lab_full ;
24005: LD_ADDR_OWVAR 42
24009: PUSH
24010: LD_INT 8
24012: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24013: LD_ADDR_OWVAR 44
24017: PUSH
24018: LD_INT 10
24020: PUSH
24021: LD_INT 12
24023: PUSH
24024: LD_INT 14
24026: PUSH
24027: LD_INT 13
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: PUSH
24036: LD_VAR 0 2
24040: PUSH
24041: LD_INT 9
24043: MINUS
24044: ARRAY
24045: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24046: LD_ADDR_OWVAR 45
24050: PUSH
24051: LD_INT 11
24053: PUSH
24054: LD_INT 15
24056: PUSH
24057: LD_INT 12
24059: PUSH
24060: LD_INT 15
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: PUSH
24069: LD_VAR 0 2
24073: PUSH
24074: LD_INT 9
24076: MINUS
24077: ARRAY
24078: ST_TO_ADDR
// end ; 14 :
24079: GO 24498
24081: LD_INT 14
24083: DOUBLE
24084: EQUAL
24085: IFTRUE 24089
24087: GO 24100
24089: POP
// bc_type := b_workshop ; 15 :
24090: LD_ADDR_OWVAR 42
24094: PUSH
24095: LD_INT 2
24097: ST_TO_ADDR
24098: GO 24498
24100: LD_INT 15
24102: DOUBLE
24103: EQUAL
24104: IFTRUE 24108
24106: GO 24119
24108: POP
// bc_type := b_factory ; 16 :
24109: LD_ADDR_OWVAR 42
24113: PUSH
24114: LD_INT 3
24116: ST_TO_ADDR
24117: GO 24498
24119: LD_INT 16
24121: DOUBLE
24122: EQUAL
24123: IFTRUE 24127
24125: GO 24138
24127: POP
// bc_type := b_ext_gun ; 17 :
24128: LD_ADDR_OWVAR 42
24132: PUSH
24133: LD_INT 17
24135: ST_TO_ADDR
24136: GO 24498
24138: LD_INT 17
24140: DOUBLE
24141: EQUAL
24142: IFTRUE 24146
24144: GO 24174
24146: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24147: LD_ADDR_OWVAR 42
24151: PUSH
24152: LD_INT 19
24154: PUSH
24155: LD_INT 23
24157: PUSH
24158: LD_INT 19
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: LIST
24165: PUSH
24166: LD_VAR 0 1
24170: ARRAY
24171: ST_TO_ADDR
24172: GO 24498
24174: LD_INT 18
24176: DOUBLE
24177: EQUAL
24178: IFTRUE 24182
24180: GO 24193
24182: POP
// bc_type := b_ext_radar ; 19 :
24183: LD_ADDR_OWVAR 42
24187: PUSH
24188: LD_INT 20
24190: ST_TO_ADDR
24191: GO 24498
24193: LD_INT 19
24195: DOUBLE
24196: EQUAL
24197: IFTRUE 24201
24199: GO 24212
24201: POP
// bc_type := b_ext_radio ; 20 :
24202: LD_ADDR_OWVAR 42
24206: PUSH
24207: LD_INT 22
24209: ST_TO_ADDR
24210: GO 24498
24212: LD_INT 20
24214: DOUBLE
24215: EQUAL
24216: IFTRUE 24220
24218: GO 24231
24220: POP
// bc_type := b_ext_siberium ; 21 :
24221: LD_ADDR_OWVAR 42
24225: PUSH
24226: LD_INT 21
24228: ST_TO_ADDR
24229: GO 24498
24231: LD_INT 21
24233: DOUBLE
24234: EQUAL
24235: IFTRUE 24239
24237: GO 24250
24239: POP
// bc_type := b_ext_computer ; 22 :
24240: LD_ADDR_OWVAR 42
24244: PUSH
24245: LD_INT 24
24247: ST_TO_ADDR
24248: GO 24498
24250: LD_INT 22
24252: DOUBLE
24253: EQUAL
24254: IFTRUE 24258
24256: GO 24269
24258: POP
// bc_type := b_ext_track ; 23 :
24259: LD_ADDR_OWVAR 42
24263: PUSH
24264: LD_INT 16
24266: ST_TO_ADDR
24267: GO 24498
24269: LD_INT 23
24271: DOUBLE
24272: EQUAL
24273: IFTRUE 24277
24275: GO 24288
24277: POP
// bc_type := b_ext_laser ; 24 :
24278: LD_ADDR_OWVAR 42
24282: PUSH
24283: LD_INT 25
24285: ST_TO_ADDR
24286: GO 24498
24288: LD_INT 24
24290: DOUBLE
24291: EQUAL
24292: IFTRUE 24296
24294: GO 24307
24296: POP
// bc_type := b_control_tower ; 25 :
24297: LD_ADDR_OWVAR 42
24301: PUSH
24302: LD_INT 36
24304: ST_TO_ADDR
24305: GO 24498
24307: LD_INT 25
24309: DOUBLE
24310: EQUAL
24311: IFTRUE 24315
24313: GO 24326
24315: POP
// bc_type := b_breastwork ; 26 :
24316: LD_ADDR_OWVAR 42
24320: PUSH
24321: LD_INT 31
24323: ST_TO_ADDR
24324: GO 24498
24326: LD_INT 26
24328: DOUBLE
24329: EQUAL
24330: IFTRUE 24334
24332: GO 24345
24334: POP
// bc_type := b_bunker ; 27 :
24335: LD_ADDR_OWVAR 42
24339: PUSH
24340: LD_INT 32
24342: ST_TO_ADDR
24343: GO 24498
24345: LD_INT 27
24347: DOUBLE
24348: EQUAL
24349: IFTRUE 24353
24351: GO 24364
24353: POP
// bc_type := b_turret ; 28 :
24354: LD_ADDR_OWVAR 42
24358: PUSH
24359: LD_INT 33
24361: ST_TO_ADDR
24362: GO 24498
24364: LD_INT 28
24366: DOUBLE
24367: EQUAL
24368: IFTRUE 24372
24370: GO 24383
24372: POP
// bc_type := b_armoury ; 29 :
24373: LD_ADDR_OWVAR 42
24377: PUSH
24378: LD_INT 4
24380: ST_TO_ADDR
24381: GO 24498
24383: LD_INT 29
24385: DOUBLE
24386: EQUAL
24387: IFTRUE 24391
24389: GO 24402
24391: POP
// bc_type := b_barracks ; 30 :
24392: LD_ADDR_OWVAR 42
24396: PUSH
24397: LD_INT 5
24399: ST_TO_ADDR
24400: GO 24498
24402: LD_INT 30
24404: DOUBLE
24405: EQUAL
24406: IFTRUE 24410
24408: GO 24421
24410: POP
// bc_type := b_solar_power ; 31 :
24411: LD_ADDR_OWVAR 42
24415: PUSH
24416: LD_INT 27
24418: ST_TO_ADDR
24419: GO 24498
24421: LD_INT 31
24423: DOUBLE
24424: EQUAL
24425: IFTRUE 24429
24427: GO 24440
24429: POP
// bc_type := b_oil_power ; 32 :
24430: LD_ADDR_OWVAR 42
24434: PUSH
24435: LD_INT 26
24437: ST_TO_ADDR
24438: GO 24498
24440: LD_INT 32
24442: DOUBLE
24443: EQUAL
24444: IFTRUE 24448
24446: GO 24459
24448: POP
// bc_type := b_siberite_power ; 33 :
24449: LD_ADDR_OWVAR 42
24453: PUSH
24454: LD_INT 28
24456: ST_TO_ADDR
24457: GO 24498
24459: LD_INT 33
24461: DOUBLE
24462: EQUAL
24463: IFTRUE 24467
24465: GO 24478
24467: POP
// bc_type := b_oil_mine ; 34 :
24468: LD_ADDR_OWVAR 42
24472: PUSH
24473: LD_INT 29
24475: ST_TO_ADDR
24476: GO 24498
24478: LD_INT 34
24480: DOUBLE
24481: EQUAL
24482: IFTRUE 24486
24484: GO 24497
24486: POP
// bc_type := b_siberite_mine ; end ;
24487: LD_ADDR_OWVAR 42
24491: PUSH
24492: LD_INT 30
24494: ST_TO_ADDR
24495: GO 24498
24497: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24498: LD_ADDR_VAR 0 8
24502: PUSH
24503: LD_VAR 0 5
24507: PPUSH
24508: LD_VAR 0 6
24512: PPUSH
24513: LD_VAR 0 3
24517: PPUSH
24518: CALL_OW 47
24522: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24523: LD_OWVAR 42
24527: PUSH
24528: LD_INT 32
24530: PUSH
24531: LD_INT 33
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: IN
24538: IFFALSE 24554
// PlaceWeaponTurret ( b , weapon ) ;
24540: LD_VAR 0 8
24544: PPUSH
24545: LD_VAR 0 4
24549: PPUSH
24550: CALL_OW 431
// end ;
24554: LD_VAR 0 7
24558: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24559: LD_INT 0
24561: PPUSH
24562: PPUSH
24563: PPUSH
24564: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24565: LD_ADDR_VAR 0 4
24569: PUSH
24570: LD_INT 22
24572: PUSH
24573: LD_OWVAR 2
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 2
24584: PUSH
24585: LD_INT 30
24587: PUSH
24588: LD_INT 0
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 30
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: LIST
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PPUSH
24614: CALL_OW 69
24618: ST_TO_ADDR
// if not tmp then
24619: LD_VAR 0 4
24623: NOT
24624: IFFALSE 24628
// exit ;
24626: GO 24687
// for i in tmp do
24628: LD_ADDR_VAR 0 2
24632: PUSH
24633: LD_VAR 0 4
24637: PUSH
24638: FOR_IN
24639: IFFALSE 24685
// for j = 1 to 3 do
24641: LD_ADDR_VAR 0 3
24645: PUSH
24646: DOUBLE
24647: LD_INT 1
24649: DEC
24650: ST_TO_ADDR
24651: LD_INT 3
24653: PUSH
24654: FOR_TO
24655: IFFALSE 24681
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24657: LD_VAR 0 2
24661: PPUSH
24662: CALL_OW 274
24666: PPUSH
24667: LD_VAR 0 3
24671: PPUSH
24672: LD_INT 99999
24674: PPUSH
24675: CALL_OW 277
24679: GO 24654
24681: POP
24682: POP
24683: GO 24638
24685: POP
24686: POP
// end ;
24687: LD_VAR 0 1
24691: RET
// export function hHackSetLevel10 ; var i , j ; begin
24692: LD_INT 0
24694: PPUSH
24695: PPUSH
24696: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24697: LD_ADDR_VAR 0 2
24701: PUSH
24702: LD_INT 21
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PPUSH
24712: CALL_OW 69
24716: PUSH
24717: FOR_IN
24718: IFFALSE 24770
// if IsSelected ( i ) then
24720: LD_VAR 0 2
24724: PPUSH
24725: CALL_OW 306
24729: IFFALSE 24768
// begin for j := 1 to 4 do
24731: LD_ADDR_VAR 0 3
24735: PUSH
24736: DOUBLE
24737: LD_INT 1
24739: DEC
24740: ST_TO_ADDR
24741: LD_INT 4
24743: PUSH
24744: FOR_TO
24745: IFFALSE 24766
// SetSkill ( i , j , 10 ) ;
24747: LD_VAR 0 2
24751: PPUSH
24752: LD_VAR 0 3
24756: PPUSH
24757: LD_INT 10
24759: PPUSH
24760: CALL_OW 237
24764: GO 24744
24766: POP
24767: POP
// end ;
24768: GO 24717
24770: POP
24771: POP
// end ;
24772: LD_VAR 0 1
24776: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24777: LD_INT 0
24779: PPUSH
24780: PPUSH
24781: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24782: LD_ADDR_VAR 0 2
24786: PUSH
24787: LD_INT 22
24789: PUSH
24790: LD_OWVAR 2
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 21
24801: PUSH
24802: LD_INT 1
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PPUSH
24813: CALL_OW 69
24817: PUSH
24818: FOR_IN
24819: IFFALSE 24860
// begin for j := 1 to 4 do
24821: LD_ADDR_VAR 0 3
24825: PUSH
24826: DOUBLE
24827: LD_INT 1
24829: DEC
24830: ST_TO_ADDR
24831: LD_INT 4
24833: PUSH
24834: FOR_TO
24835: IFFALSE 24856
// SetSkill ( i , j , 10 ) ;
24837: LD_VAR 0 2
24841: PPUSH
24842: LD_VAR 0 3
24846: PPUSH
24847: LD_INT 10
24849: PPUSH
24850: CALL_OW 237
24854: GO 24834
24856: POP
24857: POP
// end ;
24858: GO 24818
24860: POP
24861: POP
// end ;
24862: LD_VAR 0 1
24866: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24867: LD_INT 0
24869: PPUSH
// uc_side := your_side ;
24870: LD_ADDR_OWVAR 20
24874: PUSH
24875: LD_OWVAR 2
24879: ST_TO_ADDR
// uc_nation := nation ;
24880: LD_ADDR_OWVAR 21
24884: PUSH
24885: LD_VAR 0 1
24889: ST_TO_ADDR
// InitHc ;
24890: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24894: LD_INT 0
24896: PPUSH
24897: LD_VAR 0 2
24901: PPUSH
24902: LD_VAR 0 3
24906: PPUSH
24907: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24911: LD_VAR 0 4
24915: PPUSH
24916: LD_VAR 0 5
24920: PPUSH
24921: CALL_OW 428
24925: PUSH
24926: LD_INT 0
24928: EQUAL
24929: IFFALSE 24953
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24931: CALL_OW 44
24935: PPUSH
24936: LD_VAR 0 4
24940: PPUSH
24941: LD_VAR 0 5
24945: PPUSH
24946: LD_INT 1
24948: PPUSH
24949: CALL_OW 48
// end ;
24953: LD_VAR 0 6
24957: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24958: LD_INT 0
24960: PPUSH
24961: PPUSH
// uc_side := your_side ;
24962: LD_ADDR_OWVAR 20
24966: PUSH
24967: LD_OWVAR 2
24971: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24972: LD_VAR 0 1
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: LD_INT 2
24982: PUSH
24983: LD_INT 3
24985: PUSH
24986: LD_INT 4
24988: PUSH
24989: LD_INT 5
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: IN
24999: IFFALSE 25011
// uc_nation := nation_american else
25001: LD_ADDR_OWVAR 21
25005: PUSH
25006: LD_INT 1
25008: ST_TO_ADDR
25009: GO 25054
// if chassis in [ 11 , 12 , 13 , 14 ] then
25011: LD_VAR 0 1
25015: PUSH
25016: LD_INT 11
25018: PUSH
25019: LD_INT 12
25021: PUSH
25022: LD_INT 13
25024: PUSH
25025: LD_INT 14
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: IN
25034: IFFALSE 25046
// uc_nation := nation_arabian else
25036: LD_ADDR_OWVAR 21
25040: PUSH
25041: LD_INT 2
25043: ST_TO_ADDR
25044: GO 25054
// uc_nation := nation_russian ;
25046: LD_ADDR_OWVAR 21
25050: PUSH
25051: LD_INT 3
25053: ST_TO_ADDR
// vc_chassis := chassis ;
25054: LD_ADDR_OWVAR 37
25058: PUSH
25059: LD_VAR 0 1
25063: ST_TO_ADDR
// vc_engine := engine ;
25064: LD_ADDR_OWVAR 39
25068: PUSH
25069: LD_VAR 0 2
25073: ST_TO_ADDR
// vc_control := control ;
25074: LD_ADDR_OWVAR 38
25078: PUSH
25079: LD_VAR 0 3
25083: ST_TO_ADDR
// vc_weapon := weapon ;
25084: LD_ADDR_OWVAR 40
25088: PUSH
25089: LD_VAR 0 4
25093: ST_TO_ADDR
// un := CreateVehicle ;
25094: LD_ADDR_VAR 0 8
25098: PUSH
25099: CALL_OW 45
25103: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25104: LD_VAR 0 8
25108: PPUSH
25109: LD_INT 0
25111: PPUSH
25112: LD_INT 5
25114: PPUSH
25115: CALL_OW 12
25119: PPUSH
25120: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25124: LD_VAR 0 8
25128: PPUSH
25129: LD_VAR 0 5
25133: PPUSH
25134: LD_VAR 0 6
25138: PPUSH
25139: LD_INT 1
25141: PPUSH
25142: CALL_OW 48
// end ;
25146: LD_VAR 0 7
25150: RET
// export hInvincible ; every 1 do
25151: GO 25153
25153: DISABLE
// hInvincible := [ ] ;
25154: LD_ADDR_EXP 105
25158: PUSH
25159: EMPTY
25160: ST_TO_ADDR
25161: END
// every 10 do var i ;
25162: GO 25164
25164: DISABLE
25165: LD_INT 0
25167: PPUSH
// begin enable ;
25168: ENABLE
// if not hInvincible then
25169: LD_EXP 105
25173: NOT
25174: IFFALSE 25178
// exit ;
25176: GO 25222
// for i in hInvincible do
25178: LD_ADDR_VAR 0 1
25182: PUSH
25183: LD_EXP 105
25187: PUSH
25188: FOR_IN
25189: IFFALSE 25220
// if GetLives ( i ) < 1000 then
25191: LD_VAR 0 1
25195: PPUSH
25196: CALL_OW 256
25200: PUSH
25201: LD_INT 1000
25203: LESS
25204: IFFALSE 25218
// SetLives ( i , 1000 ) ;
25206: LD_VAR 0 1
25210: PPUSH
25211: LD_INT 1000
25213: PPUSH
25214: CALL_OW 234
25218: GO 25188
25220: POP
25221: POP
// end ;
25222: PPOPN 1
25224: END
// export function hHackInvincible ; var i ; begin
25225: LD_INT 0
25227: PPUSH
25228: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25229: LD_ADDR_VAR 0 2
25233: PUSH
25234: LD_INT 2
25236: PUSH
25237: LD_INT 21
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 21
25249: PUSH
25250: LD_INT 2
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: LIST
25261: PPUSH
25262: CALL_OW 69
25266: PUSH
25267: FOR_IN
25268: IFFALSE 25329
// if IsSelected ( i ) then
25270: LD_VAR 0 2
25274: PPUSH
25275: CALL_OW 306
25279: IFFALSE 25327
// begin if i in hInvincible then
25281: LD_VAR 0 2
25285: PUSH
25286: LD_EXP 105
25290: IN
25291: IFFALSE 25311
// hInvincible := hInvincible diff i else
25293: LD_ADDR_EXP 105
25297: PUSH
25298: LD_EXP 105
25302: PUSH
25303: LD_VAR 0 2
25307: DIFF
25308: ST_TO_ADDR
25309: GO 25327
// hInvincible := hInvincible union i ;
25311: LD_ADDR_EXP 105
25315: PUSH
25316: LD_EXP 105
25320: PUSH
25321: LD_VAR 0 2
25325: UNION
25326: ST_TO_ADDR
// end ;
25327: GO 25267
25329: POP
25330: POP
// end ;
25331: LD_VAR 0 1
25335: RET
// export function hHackInvisible ; var i , j ; begin
25336: LD_INT 0
25338: PPUSH
25339: PPUSH
25340: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25341: LD_ADDR_VAR 0 2
25345: PUSH
25346: LD_INT 21
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PPUSH
25356: CALL_OW 69
25360: PUSH
25361: FOR_IN
25362: IFFALSE 25386
// if IsSelected ( i ) then
25364: LD_VAR 0 2
25368: PPUSH
25369: CALL_OW 306
25373: IFFALSE 25384
// ComForceInvisible ( i ) ;
25375: LD_VAR 0 2
25379: PPUSH
25380: CALL_OW 496
25384: GO 25361
25386: POP
25387: POP
// end ;
25388: LD_VAR 0 1
25392: RET
// export function hHackChangeYourSide ; begin
25393: LD_INT 0
25395: PPUSH
// if your_side = 8 then
25396: LD_OWVAR 2
25400: PUSH
25401: LD_INT 8
25403: EQUAL
25404: IFFALSE 25416
// your_side := 0 else
25406: LD_ADDR_OWVAR 2
25410: PUSH
25411: LD_INT 0
25413: ST_TO_ADDR
25414: GO 25430
// your_side := your_side + 1 ;
25416: LD_ADDR_OWVAR 2
25420: PUSH
25421: LD_OWVAR 2
25425: PUSH
25426: LD_INT 1
25428: PLUS
25429: ST_TO_ADDR
// end ;
25430: LD_VAR 0 1
25434: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25435: LD_INT 0
25437: PPUSH
25438: PPUSH
25439: PPUSH
// for i in all_units do
25440: LD_ADDR_VAR 0 2
25444: PUSH
25445: LD_OWVAR 3
25449: PUSH
25450: FOR_IN
25451: IFFALSE 25529
// if IsSelected ( i ) then
25453: LD_VAR 0 2
25457: PPUSH
25458: CALL_OW 306
25462: IFFALSE 25527
// begin j := GetSide ( i ) ;
25464: LD_ADDR_VAR 0 3
25468: PUSH
25469: LD_VAR 0 2
25473: PPUSH
25474: CALL_OW 255
25478: ST_TO_ADDR
// if j = 8 then
25479: LD_VAR 0 3
25483: PUSH
25484: LD_INT 8
25486: EQUAL
25487: IFFALSE 25499
// j := 0 else
25489: LD_ADDR_VAR 0 3
25493: PUSH
25494: LD_INT 0
25496: ST_TO_ADDR
25497: GO 25513
// j := j + 1 ;
25499: LD_ADDR_VAR 0 3
25503: PUSH
25504: LD_VAR 0 3
25508: PUSH
25509: LD_INT 1
25511: PLUS
25512: ST_TO_ADDR
// SetSide ( i , j ) ;
25513: LD_VAR 0 2
25517: PPUSH
25518: LD_VAR 0 3
25522: PPUSH
25523: CALL_OW 235
// end ;
25527: GO 25450
25529: POP
25530: POP
// end ;
25531: LD_VAR 0 1
25535: RET
// export function hHackFog ; begin
25536: LD_INT 0
25538: PPUSH
// FogOff ( true ) ;
25539: LD_INT 1
25541: PPUSH
25542: CALL_OW 344
// end ;
25546: LD_VAR 0 1
25550: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25551: LD_INT 0
25553: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25554: LD_VAR 0 1
25558: PPUSH
25559: LD_VAR 0 2
25563: PPUSH
25564: LD_VAR 0 3
25568: PPUSH
25569: LD_INT 1
25571: PPUSH
25572: LD_INT 1
25574: PPUSH
25575: CALL_OW 483
// CenterOnXY ( x , y ) ;
25579: LD_VAR 0 2
25583: PPUSH
25584: LD_VAR 0 3
25588: PPUSH
25589: CALL_OW 84
// end ;
25593: LD_VAR 0 4
25597: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25598: LD_INT 0
25600: PPUSH
25601: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25602: LD_VAR 0 1
25606: NOT
25607: PUSH
25608: LD_VAR 0 2
25612: PPUSH
25613: LD_VAR 0 3
25617: PPUSH
25618: CALL_OW 488
25622: NOT
25623: OR
25624: PUSH
25625: LD_VAR 0 1
25629: PPUSH
25630: CALL_OW 266
25634: PUSH
25635: LD_INT 3
25637: NONEQUAL
25638: PUSH
25639: LD_VAR 0 1
25643: PPUSH
25644: CALL_OW 247
25648: PUSH
25649: LD_INT 1
25651: EQUAL
25652: NOT
25653: AND
25654: OR
25655: IFFALSE 25659
// exit ;
25657: GO 25808
// if GetType ( factory ) = unit_human then
25659: LD_VAR 0 1
25663: PPUSH
25664: CALL_OW 247
25668: PUSH
25669: LD_INT 1
25671: EQUAL
25672: IFFALSE 25689
// factory := IsInUnit ( factory ) ;
25674: LD_ADDR_VAR 0 1
25678: PUSH
25679: LD_VAR 0 1
25683: PPUSH
25684: CALL_OW 310
25688: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25689: LD_VAR 0 1
25693: PPUSH
25694: CALL_OW 266
25698: PUSH
25699: LD_INT 3
25701: NONEQUAL
25702: IFFALSE 25706
// exit ;
25704: GO 25808
// if HexInfo ( x , y ) = factory then
25706: LD_VAR 0 2
25710: PPUSH
25711: LD_VAR 0 3
25715: PPUSH
25716: CALL_OW 428
25720: PUSH
25721: LD_VAR 0 1
25725: EQUAL
25726: IFFALSE 25753
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25728: LD_ADDR_EXP 106
25732: PUSH
25733: LD_EXP 106
25737: PPUSH
25738: LD_VAR 0 1
25742: PPUSH
25743: LD_INT 0
25745: PPUSH
25746: CALL_OW 1
25750: ST_TO_ADDR
25751: GO 25804
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25753: LD_ADDR_EXP 106
25757: PUSH
25758: LD_EXP 106
25762: PPUSH
25763: LD_VAR 0 1
25767: PPUSH
25768: LD_VAR 0 1
25772: PPUSH
25773: CALL_OW 255
25777: PUSH
25778: LD_VAR 0 1
25782: PUSH
25783: LD_VAR 0 2
25787: PUSH
25788: LD_VAR 0 3
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: PPUSH
25799: CALL_OW 1
25803: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25804: CALL 25813 0 0
// end ;
25808: LD_VAR 0 4
25812: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25813: LD_INT 0
25815: PPUSH
25816: PPUSH
25817: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25818: LD_STRING resetFactoryWaypoint();
25820: PPUSH
25821: CALL_OW 559
// if factoryWaypoints then
25825: LD_EXP 106
25829: IFFALSE 25955
// begin list := PrepareArray ( factoryWaypoints ) ;
25831: LD_ADDR_VAR 0 3
25835: PUSH
25836: LD_EXP 106
25840: PPUSH
25841: CALL 73252 0 1
25845: ST_TO_ADDR
// for i := 1 to list do
25846: LD_ADDR_VAR 0 2
25850: PUSH
25851: DOUBLE
25852: LD_INT 1
25854: DEC
25855: ST_TO_ADDR
25856: LD_VAR 0 3
25860: PUSH
25861: FOR_TO
25862: IFFALSE 25953
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25864: LD_STRING setFactoryWaypointXY(
25866: PUSH
25867: LD_VAR 0 3
25871: PUSH
25872: LD_VAR 0 2
25876: ARRAY
25877: PUSH
25878: LD_INT 1
25880: ARRAY
25881: STR
25882: PUSH
25883: LD_STRING ,
25885: STR
25886: PUSH
25887: LD_VAR 0 3
25891: PUSH
25892: LD_VAR 0 2
25896: ARRAY
25897: PUSH
25898: LD_INT 2
25900: ARRAY
25901: STR
25902: PUSH
25903: LD_STRING ,
25905: STR
25906: PUSH
25907: LD_VAR 0 3
25911: PUSH
25912: LD_VAR 0 2
25916: ARRAY
25917: PUSH
25918: LD_INT 3
25920: ARRAY
25921: STR
25922: PUSH
25923: LD_STRING ,
25925: STR
25926: PUSH
25927: LD_VAR 0 3
25931: PUSH
25932: LD_VAR 0 2
25936: ARRAY
25937: PUSH
25938: LD_INT 4
25940: ARRAY
25941: STR
25942: PUSH
25943: LD_STRING )
25945: STR
25946: PPUSH
25947: CALL_OW 559
25951: GO 25861
25953: POP
25954: POP
// end ; end ;
25955: LD_VAR 0 1
25959: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25960: LD_INT 0
25962: PPUSH
// if HexInfo ( x , y ) = warehouse then
25963: LD_VAR 0 2
25967: PPUSH
25968: LD_VAR 0 3
25972: PPUSH
25973: CALL_OW 428
25977: PUSH
25978: LD_VAR 0 1
25982: EQUAL
25983: IFFALSE 26010
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25985: LD_ADDR_EXP 107
25989: PUSH
25990: LD_EXP 107
25994: PPUSH
25995: LD_VAR 0 1
25999: PPUSH
26000: LD_INT 0
26002: PPUSH
26003: CALL_OW 1
26007: ST_TO_ADDR
26008: GO 26061
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26010: LD_ADDR_EXP 107
26014: PUSH
26015: LD_EXP 107
26019: PPUSH
26020: LD_VAR 0 1
26024: PPUSH
26025: LD_VAR 0 1
26029: PPUSH
26030: CALL_OW 255
26034: PUSH
26035: LD_VAR 0 1
26039: PUSH
26040: LD_VAR 0 2
26044: PUSH
26045: LD_VAR 0 3
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: PPUSH
26056: CALL_OW 1
26060: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26061: CALL 26070 0 0
// end ;
26065: LD_VAR 0 4
26069: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26070: LD_INT 0
26072: PPUSH
26073: PPUSH
26074: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26075: LD_STRING resetWarehouseGatheringPoints();
26077: PPUSH
26078: CALL_OW 559
// if warehouseGatheringPoints then
26082: LD_EXP 107
26086: IFFALSE 26212
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26088: LD_ADDR_VAR 0 3
26092: PUSH
26093: LD_EXP 107
26097: PPUSH
26098: CALL 73252 0 1
26102: ST_TO_ADDR
// for i := 1 to list do
26103: LD_ADDR_VAR 0 2
26107: PUSH
26108: DOUBLE
26109: LD_INT 1
26111: DEC
26112: ST_TO_ADDR
26113: LD_VAR 0 3
26117: PUSH
26118: FOR_TO
26119: IFFALSE 26210
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26121: LD_STRING setWarehouseGatheringPointXY(
26123: PUSH
26124: LD_VAR 0 3
26128: PUSH
26129: LD_VAR 0 2
26133: ARRAY
26134: PUSH
26135: LD_INT 1
26137: ARRAY
26138: STR
26139: PUSH
26140: LD_STRING ,
26142: STR
26143: PUSH
26144: LD_VAR 0 3
26148: PUSH
26149: LD_VAR 0 2
26153: ARRAY
26154: PUSH
26155: LD_INT 2
26157: ARRAY
26158: STR
26159: PUSH
26160: LD_STRING ,
26162: STR
26163: PUSH
26164: LD_VAR 0 3
26168: PUSH
26169: LD_VAR 0 2
26173: ARRAY
26174: PUSH
26175: LD_INT 3
26177: ARRAY
26178: STR
26179: PUSH
26180: LD_STRING ,
26182: STR
26183: PUSH
26184: LD_VAR 0 3
26188: PUSH
26189: LD_VAR 0 2
26193: ARRAY
26194: PUSH
26195: LD_INT 4
26197: ARRAY
26198: STR
26199: PUSH
26200: LD_STRING )
26202: STR
26203: PPUSH
26204: CALL_OW 559
26208: GO 26118
26210: POP
26211: POP
// end ; end ;
26212: LD_VAR 0 1
26216: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26217: LD_EXP 107
26221: IFFALSE 26906
26223: GO 26225
26225: DISABLE
26226: LD_INT 0
26228: PPUSH
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
26233: PPUSH
26234: PPUSH
26235: PPUSH
26236: PPUSH
// begin enable ;
26237: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26238: LD_ADDR_VAR 0 3
26242: PUSH
26243: LD_EXP 107
26247: PPUSH
26248: CALL 73252 0 1
26252: ST_TO_ADDR
// if not list then
26253: LD_VAR 0 3
26257: NOT
26258: IFFALSE 26262
// exit ;
26260: GO 26906
// for i := 1 to list do
26262: LD_ADDR_VAR 0 1
26266: PUSH
26267: DOUBLE
26268: LD_INT 1
26270: DEC
26271: ST_TO_ADDR
26272: LD_VAR 0 3
26276: PUSH
26277: FOR_TO
26278: IFFALSE 26904
// begin depot := list [ i ] [ 2 ] ;
26280: LD_ADDR_VAR 0 8
26284: PUSH
26285: LD_VAR 0 3
26289: PUSH
26290: LD_VAR 0 1
26294: ARRAY
26295: PUSH
26296: LD_INT 2
26298: ARRAY
26299: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26300: LD_ADDR_VAR 0 5
26304: PUSH
26305: LD_VAR 0 3
26309: PUSH
26310: LD_VAR 0 1
26314: ARRAY
26315: PUSH
26316: LD_INT 1
26318: ARRAY
26319: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26320: LD_VAR 0 8
26324: PPUSH
26325: CALL_OW 301
26329: PUSH
26330: LD_VAR 0 5
26334: PUSH
26335: LD_VAR 0 8
26339: PPUSH
26340: CALL_OW 255
26344: NONEQUAL
26345: OR
26346: IFFALSE 26375
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26348: LD_ADDR_EXP 107
26352: PUSH
26353: LD_EXP 107
26357: PPUSH
26358: LD_VAR 0 8
26362: PPUSH
26363: LD_INT 0
26365: PPUSH
26366: CALL_OW 1
26370: ST_TO_ADDR
// exit ;
26371: POP
26372: POP
26373: GO 26906
// end ; x := list [ i ] [ 3 ] ;
26375: LD_ADDR_VAR 0 6
26379: PUSH
26380: LD_VAR 0 3
26384: PUSH
26385: LD_VAR 0 1
26389: ARRAY
26390: PUSH
26391: LD_INT 3
26393: ARRAY
26394: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26395: LD_ADDR_VAR 0 7
26399: PUSH
26400: LD_VAR 0 3
26404: PUSH
26405: LD_VAR 0 1
26409: ARRAY
26410: PUSH
26411: LD_INT 4
26413: ARRAY
26414: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26415: LD_ADDR_VAR 0 9
26419: PUSH
26420: LD_VAR 0 6
26424: PPUSH
26425: LD_VAR 0 7
26429: PPUSH
26430: LD_INT 16
26432: PPUSH
26433: CALL 71840 0 3
26437: ST_TO_ADDR
// if not cratesNearbyPoint then
26438: LD_VAR 0 9
26442: NOT
26443: IFFALSE 26449
// exit ;
26445: POP
26446: POP
26447: GO 26906
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26449: LD_ADDR_VAR 0 4
26453: PUSH
26454: LD_INT 22
26456: PUSH
26457: LD_VAR 0 5
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 3
26468: PUSH
26469: LD_INT 60
26471: PUSH
26472: EMPTY
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 91
26481: PUSH
26482: LD_VAR 0 8
26486: PUSH
26487: LD_INT 6
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: LD_INT 25
26500: PUSH
26501: LD_INT 2
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 25
26510: PUSH
26511: LD_INT 16
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: LIST
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: PPUSH
26529: CALL_OW 69
26533: PUSH
26534: LD_VAR 0 8
26538: PPUSH
26539: CALL_OW 313
26543: PPUSH
26544: LD_INT 3
26546: PUSH
26547: LD_INT 60
26549: PUSH
26550: EMPTY
26551: LIST
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 2
26559: PUSH
26560: LD_INT 25
26562: PUSH
26563: LD_INT 2
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 25
26572: PUSH
26573: LD_INT 16
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: LIST
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PPUSH
26589: CALL_OW 72
26593: UNION
26594: ST_TO_ADDR
// if tmp then
26595: LD_VAR 0 4
26599: IFFALSE 26679
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26601: LD_ADDR_VAR 0 4
26605: PUSH
26606: LD_VAR 0 4
26610: PPUSH
26611: LD_INT 3
26613: PPUSH
26614: CALL 69809 0 2
26618: ST_TO_ADDR
// for j in tmp do
26619: LD_ADDR_VAR 0 2
26623: PUSH
26624: LD_VAR 0 4
26628: PUSH
26629: FOR_IN
26630: IFFALSE 26673
// begin if IsInUnit ( j ) then
26632: LD_VAR 0 2
26636: PPUSH
26637: CALL_OW 310
26641: IFFALSE 26652
// ComExit ( j ) ;
26643: LD_VAR 0 2
26647: PPUSH
26648: CALL 69892 0 1
// AddComCollect ( j , x , y ) ;
26652: LD_VAR 0 2
26656: PPUSH
26657: LD_VAR 0 6
26661: PPUSH
26662: LD_VAR 0 7
26666: PPUSH
26667: CALL_OW 177
// end ;
26671: GO 26629
26673: POP
26674: POP
// exit ;
26675: POP
26676: POP
26677: GO 26906
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26679: LD_ADDR_VAR 0 4
26683: PUSH
26684: LD_INT 22
26686: PUSH
26687: LD_VAR 0 5
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 91
26698: PUSH
26699: LD_VAR 0 8
26703: PUSH
26704: LD_INT 8
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 2
26714: PUSH
26715: LD_INT 34
26717: PUSH
26718: LD_INT 12
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 34
26727: PUSH
26728: LD_INT 51
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 34
26737: PUSH
26738: LD_INT 32
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 34
26747: PUSH
26748: LD_INT 89
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: LIST
26766: PPUSH
26767: CALL_OW 69
26771: ST_TO_ADDR
// if tmp then
26772: LD_VAR 0 4
26776: IFFALSE 26902
// begin for j in tmp do
26778: LD_ADDR_VAR 0 2
26782: PUSH
26783: LD_VAR 0 4
26787: PUSH
26788: FOR_IN
26789: IFFALSE 26900
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26791: LD_VAR 0 2
26795: PPUSH
26796: CALL_OW 262
26800: PUSH
26801: LD_INT 3
26803: EQUAL
26804: PUSH
26805: LD_VAR 0 2
26809: PPUSH
26810: CALL_OW 261
26814: PUSH
26815: LD_INT 20
26817: GREATER
26818: OR
26819: PUSH
26820: LD_VAR 0 2
26824: PPUSH
26825: CALL_OW 314
26829: NOT
26830: AND
26831: PUSH
26832: LD_VAR 0 2
26836: PPUSH
26837: CALL_OW 263
26841: PUSH
26842: LD_INT 1
26844: NONEQUAL
26845: PUSH
26846: LD_VAR 0 2
26850: PPUSH
26851: CALL_OW 311
26855: OR
26856: AND
26857: IFFALSE 26898
// begin ComCollect ( j , x , y ) ;
26859: LD_VAR 0 2
26863: PPUSH
26864: LD_VAR 0 6
26868: PPUSH
26869: LD_VAR 0 7
26873: PPUSH
26874: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26878: LD_VAR 0 2
26882: PPUSH
26883: LD_VAR 0 8
26887: PPUSH
26888: CALL_OW 172
// exit ;
26892: POP
26893: POP
26894: POP
26895: POP
26896: GO 26906
// end ;
26898: GO 26788
26900: POP
26901: POP
// end ; end ;
26902: GO 26277
26904: POP
26905: POP
// end ; end_of_file
26906: PPOPN 9
26908: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26909: LD_INT 0
26911: PPUSH
26912: PPUSH
26913: PPUSH
26914: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 264
26924: PUSH
26925: LD_INT 91
26927: EQUAL
26928: IFFALSE 27000
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26930: LD_INT 68
26932: PPUSH
26933: LD_VAR 0 1
26937: PPUSH
26938: CALL_OW 255
26942: PPUSH
26943: CALL_OW 321
26947: PUSH
26948: LD_INT 2
26950: EQUAL
26951: IFFALSE 26963
// eff := 70 else
26953: LD_ADDR_VAR 0 4
26957: PUSH
26958: LD_INT 70
26960: ST_TO_ADDR
26961: GO 26971
// eff := 30 ;
26963: LD_ADDR_VAR 0 4
26967: PUSH
26968: LD_INT 30
26970: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26971: LD_VAR 0 1
26975: PPUSH
26976: CALL_OW 250
26980: PPUSH
26981: LD_VAR 0 1
26985: PPUSH
26986: CALL_OW 251
26990: PPUSH
26991: LD_VAR 0 4
26995: PPUSH
26996: CALL_OW 495
// end ; end ;
27000: LD_VAR 0 2
27004: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27005: LD_INT 0
27007: PPUSH
// end ;
27008: LD_VAR 0 4
27012: RET
// export function SOS_Command ( cmd ) ; begin
27013: LD_INT 0
27015: PPUSH
// end ;
27016: LD_VAR 0 2
27020: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27021: LD_INT 0
27023: PPUSH
// end ;
27024: LD_VAR 0 6
27028: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27029: LD_INT 0
27031: PPUSH
27032: PPUSH
// if not vehicle or not factory then
27033: LD_VAR 0 1
27037: NOT
27038: PUSH
27039: LD_VAR 0 2
27043: NOT
27044: OR
27045: IFFALSE 27049
// exit ;
27047: GO 27280
// if factoryWaypoints >= factory then
27049: LD_EXP 106
27053: PUSH
27054: LD_VAR 0 2
27058: GREATEREQUAL
27059: IFFALSE 27280
// if factoryWaypoints [ factory ] then
27061: LD_EXP 106
27065: PUSH
27066: LD_VAR 0 2
27070: ARRAY
27071: IFFALSE 27280
// begin if GetControl ( vehicle ) = control_manual then
27073: LD_VAR 0 1
27077: PPUSH
27078: CALL_OW 263
27082: PUSH
27083: LD_INT 1
27085: EQUAL
27086: IFFALSE 27167
// begin driver := IsDrivenBy ( vehicle ) ;
27088: LD_ADDR_VAR 0 4
27092: PUSH
27093: LD_VAR 0 1
27097: PPUSH
27098: CALL_OW 311
27102: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27103: LD_VAR 0 4
27107: PPUSH
27108: LD_EXP 106
27112: PUSH
27113: LD_VAR 0 2
27117: ARRAY
27118: PUSH
27119: LD_INT 3
27121: ARRAY
27122: PPUSH
27123: LD_EXP 106
27127: PUSH
27128: LD_VAR 0 2
27132: ARRAY
27133: PUSH
27134: LD_INT 4
27136: ARRAY
27137: PPUSH
27138: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27142: LD_VAR 0 4
27146: PPUSH
27147: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27151: LD_VAR 0 4
27155: PPUSH
27156: LD_VAR 0 2
27160: PPUSH
27161: CALL_OW 180
// end else
27165: GO 27280
// if GetControl ( vehicle ) = control_remote then
27167: LD_VAR 0 1
27171: PPUSH
27172: CALL_OW 263
27176: PUSH
27177: LD_INT 2
27179: EQUAL
27180: IFFALSE 27241
// begin wait ( 0 0$2 ) ;
27182: LD_INT 70
27184: PPUSH
27185: CALL_OW 67
// if Connect ( vehicle ) then
27189: LD_VAR 0 1
27193: PPUSH
27194: CALL 40111 0 1
27198: IFFALSE 27239
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27200: LD_VAR 0 1
27204: PPUSH
27205: LD_EXP 106
27209: PUSH
27210: LD_VAR 0 2
27214: ARRAY
27215: PUSH
27216: LD_INT 3
27218: ARRAY
27219: PPUSH
27220: LD_EXP 106
27224: PUSH
27225: LD_VAR 0 2
27229: ARRAY
27230: PUSH
27231: LD_INT 4
27233: ARRAY
27234: PPUSH
27235: CALL_OW 171
// end else
27239: GO 27280
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27241: LD_VAR 0 1
27245: PPUSH
27246: LD_EXP 106
27250: PUSH
27251: LD_VAR 0 2
27255: ARRAY
27256: PUSH
27257: LD_INT 3
27259: ARRAY
27260: PPUSH
27261: LD_EXP 106
27265: PUSH
27266: LD_VAR 0 2
27270: ARRAY
27271: PUSH
27272: LD_INT 4
27274: ARRAY
27275: PPUSH
27276: CALL_OW 171
// end ; end ;
27280: LD_VAR 0 3
27284: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27285: LD_INT 0
27287: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27288: LD_VAR 0 1
27292: PUSH
27293: LD_INT 250
27295: EQUAL
27296: PUSH
27297: LD_VAR 0 2
27301: PPUSH
27302: CALL_OW 264
27306: PUSH
27307: LD_INT 81
27309: EQUAL
27310: AND
27311: IFFALSE 27332
// MinerPlaceMine ( unit , x , y ) ;
27313: LD_VAR 0 2
27317: PPUSH
27318: LD_VAR 0 4
27322: PPUSH
27323: LD_VAR 0 5
27327: PPUSH
27328: CALL 30322 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27332: LD_VAR 0 1
27336: PUSH
27337: LD_INT 251
27339: EQUAL
27340: PUSH
27341: LD_VAR 0 2
27345: PPUSH
27346: CALL_OW 264
27350: PUSH
27351: LD_INT 81
27353: EQUAL
27354: AND
27355: IFFALSE 27376
// MinerDetonateMine ( unit , x , y ) ;
27357: LD_VAR 0 2
27361: PPUSH
27362: LD_VAR 0 4
27366: PPUSH
27367: LD_VAR 0 5
27371: PPUSH
27372: CALL 30597 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27376: LD_VAR 0 1
27380: PUSH
27381: LD_INT 252
27383: EQUAL
27384: PUSH
27385: LD_VAR 0 2
27389: PPUSH
27390: CALL_OW 264
27394: PUSH
27395: LD_INT 81
27397: EQUAL
27398: AND
27399: IFFALSE 27420
// MinerCreateMinefield ( unit , x , y ) ;
27401: LD_VAR 0 2
27405: PPUSH
27406: LD_VAR 0 4
27410: PPUSH
27411: LD_VAR 0 5
27415: PPUSH
27416: CALL 31014 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27420: LD_VAR 0 1
27424: PUSH
27425: LD_INT 253
27427: EQUAL
27428: PUSH
27429: LD_VAR 0 2
27433: PPUSH
27434: CALL_OW 257
27438: PUSH
27439: LD_INT 5
27441: EQUAL
27442: AND
27443: IFFALSE 27464
// ComBinocular ( unit , x , y ) ;
27445: LD_VAR 0 2
27449: PPUSH
27450: LD_VAR 0 4
27454: PPUSH
27455: LD_VAR 0 5
27459: PPUSH
27460: CALL 31383 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27464: LD_VAR 0 1
27468: PUSH
27469: LD_INT 254
27471: EQUAL
27472: PUSH
27473: LD_VAR 0 2
27477: PPUSH
27478: CALL_OW 264
27482: PUSH
27483: LD_INT 99
27485: EQUAL
27486: AND
27487: PUSH
27488: LD_VAR 0 3
27492: PPUSH
27493: CALL_OW 263
27497: PUSH
27498: LD_INT 3
27500: EQUAL
27501: AND
27502: IFFALSE 27518
// HackDestroyVehicle ( unit , selectedUnit ) ;
27504: LD_VAR 0 2
27508: PPUSH
27509: LD_VAR 0 3
27513: PPUSH
27514: CALL 29686 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27518: LD_VAR 0 1
27522: PUSH
27523: LD_INT 255
27525: EQUAL
27526: PUSH
27527: LD_VAR 0 2
27531: PPUSH
27532: CALL_OW 264
27536: PUSH
27537: LD_INT 14
27539: PUSH
27540: LD_INT 53
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: IN
27547: AND
27548: PUSH
27549: LD_VAR 0 4
27553: PPUSH
27554: LD_VAR 0 5
27558: PPUSH
27559: CALL_OW 488
27563: AND
27564: IFFALSE 27588
// CutTreeXYR ( unit , x , y , 12 ) ;
27566: LD_VAR 0 2
27570: PPUSH
27571: LD_VAR 0 4
27575: PPUSH
27576: LD_VAR 0 5
27580: PPUSH
27581: LD_INT 12
27583: PPUSH
27584: CALL 27683 0 4
// if cmd = 256 then
27588: LD_VAR 0 1
27592: PUSH
27593: LD_INT 256
27595: EQUAL
27596: IFFALSE 27617
// SetFactoryWaypoint ( unit , x , y ) ;
27598: LD_VAR 0 2
27602: PPUSH
27603: LD_VAR 0 4
27607: PPUSH
27608: LD_VAR 0 5
27612: PPUSH
27613: CALL 25598 0 3
// if cmd = 257 then
27617: LD_VAR 0 1
27621: PUSH
27622: LD_INT 257
27624: EQUAL
27625: IFFALSE 27646
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27627: LD_VAR 0 2
27631: PPUSH
27632: LD_VAR 0 4
27636: PPUSH
27637: LD_VAR 0 5
27641: PPUSH
27642: CALL 25960 0 3
// if cmd = 258 then
27646: LD_VAR 0 1
27650: PUSH
27651: LD_INT 258
27653: EQUAL
27654: IFFALSE 27678
// BurnTreeXYR ( unit , x , y , 8 ) ;
27656: LD_VAR 0 2
27660: PPUSH
27661: LD_VAR 0 4
27665: PPUSH
27666: LD_VAR 0 5
27670: PPUSH
27671: LD_INT 8
27673: PPUSH
27674: CALL 28077 0 4
// end ;
27678: LD_VAR 0 6
27682: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27683: LD_INT 0
27685: PPUSH
27686: PPUSH
27687: PPUSH
27688: PPUSH
27689: PPUSH
27690: PPUSH
27691: PPUSH
27692: PPUSH
27693: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27694: LD_VAR 0 1
27698: PPUSH
27699: CALL_OW 302
27703: NOT
27704: PUSH
27705: LD_VAR 0 2
27709: PPUSH
27710: LD_VAR 0 3
27714: PPUSH
27715: CALL_OW 488
27719: NOT
27720: OR
27721: PUSH
27722: LD_VAR 0 4
27726: NOT
27727: OR
27728: IFFALSE 27732
// exit ;
27730: GO 28072
// list := [ ] ;
27732: LD_ADDR_VAR 0 13
27736: PUSH
27737: EMPTY
27738: ST_TO_ADDR
// if x - r < 0 then
27739: LD_VAR 0 2
27743: PUSH
27744: LD_VAR 0 4
27748: MINUS
27749: PUSH
27750: LD_INT 0
27752: LESS
27753: IFFALSE 27765
// min_x := 0 else
27755: LD_ADDR_VAR 0 7
27759: PUSH
27760: LD_INT 0
27762: ST_TO_ADDR
27763: GO 27781
// min_x := x - r ;
27765: LD_ADDR_VAR 0 7
27769: PUSH
27770: LD_VAR 0 2
27774: PUSH
27775: LD_VAR 0 4
27779: MINUS
27780: ST_TO_ADDR
// if y - r < 0 then
27781: LD_VAR 0 3
27785: PUSH
27786: LD_VAR 0 4
27790: MINUS
27791: PUSH
27792: LD_INT 0
27794: LESS
27795: IFFALSE 27807
// min_y := 0 else
27797: LD_ADDR_VAR 0 8
27801: PUSH
27802: LD_INT 0
27804: ST_TO_ADDR
27805: GO 27823
// min_y := y - r ;
27807: LD_ADDR_VAR 0 8
27811: PUSH
27812: LD_VAR 0 3
27816: PUSH
27817: LD_VAR 0 4
27821: MINUS
27822: ST_TO_ADDR
// max_x := x + r ;
27823: LD_ADDR_VAR 0 9
27827: PUSH
27828: LD_VAR 0 2
27832: PUSH
27833: LD_VAR 0 4
27837: PLUS
27838: ST_TO_ADDR
// max_y := y + r ;
27839: LD_ADDR_VAR 0 10
27843: PUSH
27844: LD_VAR 0 3
27848: PUSH
27849: LD_VAR 0 4
27853: PLUS
27854: ST_TO_ADDR
// for _x = min_x to max_x do
27855: LD_ADDR_VAR 0 11
27859: PUSH
27860: DOUBLE
27861: LD_VAR 0 7
27865: DEC
27866: ST_TO_ADDR
27867: LD_VAR 0 9
27871: PUSH
27872: FOR_TO
27873: IFFALSE 27990
// for _y = min_y to max_y do
27875: LD_ADDR_VAR 0 12
27879: PUSH
27880: DOUBLE
27881: LD_VAR 0 8
27885: DEC
27886: ST_TO_ADDR
27887: LD_VAR 0 10
27891: PUSH
27892: FOR_TO
27893: IFFALSE 27986
// begin if not ValidHex ( _x , _y ) then
27895: LD_VAR 0 11
27899: PPUSH
27900: LD_VAR 0 12
27904: PPUSH
27905: CALL_OW 488
27909: NOT
27910: IFFALSE 27914
// continue ;
27912: GO 27892
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27914: LD_VAR 0 11
27918: PPUSH
27919: LD_VAR 0 12
27923: PPUSH
27924: CALL_OW 351
27928: PUSH
27929: LD_VAR 0 11
27933: PPUSH
27934: LD_VAR 0 12
27938: PPUSH
27939: CALL_OW 554
27943: AND
27944: IFFALSE 27984
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27946: LD_ADDR_VAR 0 13
27950: PUSH
27951: LD_VAR 0 13
27955: PPUSH
27956: LD_VAR 0 13
27960: PUSH
27961: LD_INT 1
27963: PLUS
27964: PPUSH
27965: LD_VAR 0 11
27969: PUSH
27970: LD_VAR 0 12
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PPUSH
27979: CALL_OW 2
27983: ST_TO_ADDR
// end ;
27984: GO 27892
27986: POP
27987: POP
27988: GO 27872
27990: POP
27991: POP
// if not list then
27992: LD_VAR 0 13
27996: NOT
27997: IFFALSE 28001
// exit ;
27999: GO 28072
// for i in list do
28001: LD_ADDR_VAR 0 6
28005: PUSH
28006: LD_VAR 0 13
28010: PUSH
28011: FOR_IN
28012: IFFALSE 28070
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28014: LD_VAR 0 1
28018: PPUSH
28019: LD_STRING M
28021: PUSH
28022: LD_VAR 0 6
28026: PUSH
28027: LD_INT 1
28029: ARRAY
28030: PUSH
28031: LD_VAR 0 6
28035: PUSH
28036: LD_INT 2
28038: ARRAY
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: LD_INT 0
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: PUSH
28061: EMPTY
28062: LIST
28063: PPUSH
28064: CALL_OW 447
28068: GO 28011
28070: POP
28071: POP
// end ;
28072: LD_VAR 0 5
28076: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28077: LD_INT 0
28079: PPUSH
28080: PPUSH
28081: PPUSH
28082: PPUSH
28083: PPUSH
28084: PPUSH
28085: PPUSH
28086: PPUSH
28087: PPUSH
28088: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28089: LD_VAR 0 1
28093: PPUSH
28094: CALL_OW 302
28098: NOT
28099: PUSH
28100: LD_VAR 0 2
28104: PPUSH
28105: LD_VAR 0 3
28109: PPUSH
28110: CALL_OW 488
28114: NOT
28115: OR
28116: PUSH
28117: LD_VAR 0 4
28121: NOT
28122: OR
28123: IFFALSE 28127
// exit ;
28125: GO 28640
// list := [ ] ;
28127: LD_ADDR_VAR 0 13
28131: PUSH
28132: EMPTY
28133: ST_TO_ADDR
// if x - r < 0 then
28134: LD_VAR 0 2
28138: PUSH
28139: LD_VAR 0 4
28143: MINUS
28144: PUSH
28145: LD_INT 0
28147: LESS
28148: IFFALSE 28160
// min_x := 0 else
28150: LD_ADDR_VAR 0 7
28154: PUSH
28155: LD_INT 0
28157: ST_TO_ADDR
28158: GO 28176
// min_x := x - r ;
28160: LD_ADDR_VAR 0 7
28164: PUSH
28165: LD_VAR 0 2
28169: PUSH
28170: LD_VAR 0 4
28174: MINUS
28175: ST_TO_ADDR
// if y - r < 0 then
28176: LD_VAR 0 3
28180: PUSH
28181: LD_VAR 0 4
28185: MINUS
28186: PUSH
28187: LD_INT 0
28189: LESS
28190: IFFALSE 28202
// min_y := 0 else
28192: LD_ADDR_VAR 0 8
28196: PUSH
28197: LD_INT 0
28199: ST_TO_ADDR
28200: GO 28218
// min_y := y - r ;
28202: LD_ADDR_VAR 0 8
28206: PUSH
28207: LD_VAR 0 3
28211: PUSH
28212: LD_VAR 0 4
28216: MINUS
28217: ST_TO_ADDR
// max_x := x + r ;
28218: LD_ADDR_VAR 0 9
28222: PUSH
28223: LD_VAR 0 2
28227: PUSH
28228: LD_VAR 0 4
28232: PLUS
28233: ST_TO_ADDR
// max_y := y + r ;
28234: LD_ADDR_VAR 0 10
28238: PUSH
28239: LD_VAR 0 3
28243: PUSH
28244: LD_VAR 0 4
28248: PLUS
28249: ST_TO_ADDR
// for _x = min_x to max_x do
28250: LD_ADDR_VAR 0 11
28254: PUSH
28255: DOUBLE
28256: LD_VAR 0 7
28260: DEC
28261: ST_TO_ADDR
28262: LD_VAR 0 9
28266: PUSH
28267: FOR_TO
28268: IFFALSE 28385
// for _y = min_y to max_y do
28270: LD_ADDR_VAR 0 12
28274: PUSH
28275: DOUBLE
28276: LD_VAR 0 8
28280: DEC
28281: ST_TO_ADDR
28282: LD_VAR 0 10
28286: PUSH
28287: FOR_TO
28288: IFFALSE 28381
// begin if not ValidHex ( _x , _y ) then
28290: LD_VAR 0 11
28294: PPUSH
28295: LD_VAR 0 12
28299: PPUSH
28300: CALL_OW 488
28304: NOT
28305: IFFALSE 28309
// continue ;
28307: GO 28287
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28309: LD_VAR 0 11
28313: PPUSH
28314: LD_VAR 0 12
28318: PPUSH
28319: CALL_OW 351
28323: PUSH
28324: LD_VAR 0 11
28328: PPUSH
28329: LD_VAR 0 12
28333: PPUSH
28334: CALL_OW 554
28338: AND
28339: IFFALSE 28379
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28341: LD_ADDR_VAR 0 13
28345: PUSH
28346: LD_VAR 0 13
28350: PPUSH
28351: LD_VAR 0 13
28355: PUSH
28356: LD_INT 1
28358: PLUS
28359: PPUSH
28360: LD_VAR 0 11
28364: PUSH
28365: LD_VAR 0 12
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PPUSH
28374: CALL_OW 2
28378: ST_TO_ADDR
// end ;
28379: GO 28287
28381: POP
28382: POP
28383: GO 28267
28385: POP
28386: POP
// if not list then
28387: LD_VAR 0 13
28391: NOT
28392: IFFALSE 28396
// exit ;
28394: GO 28640
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28396: LD_ADDR_VAR 0 13
28400: PUSH
28401: LD_VAR 0 1
28405: PPUSH
28406: LD_VAR 0 13
28410: PPUSH
28411: LD_INT 1
28413: PPUSH
28414: LD_INT 1
28416: PPUSH
28417: CALL 37253 0 4
28421: ST_TO_ADDR
// ComStop ( flame ) ;
28422: LD_VAR 0 1
28426: PPUSH
28427: CALL_OW 141
// for i in list do
28431: LD_ADDR_VAR 0 6
28435: PUSH
28436: LD_VAR 0 13
28440: PUSH
28441: FOR_IN
28442: IFFALSE 28473
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28444: LD_VAR 0 1
28448: PPUSH
28449: LD_VAR 0 6
28453: PUSH
28454: LD_INT 1
28456: ARRAY
28457: PPUSH
28458: LD_VAR 0 6
28462: PUSH
28463: LD_INT 2
28465: ARRAY
28466: PPUSH
28467: CALL_OW 176
28471: GO 28441
28473: POP
28474: POP
// repeat wait ( 0 0$1 ) ;
28475: LD_INT 35
28477: PPUSH
28478: CALL_OW 67
// task := GetTaskList ( flame ) ;
28482: LD_ADDR_VAR 0 14
28486: PUSH
28487: LD_VAR 0 1
28491: PPUSH
28492: CALL_OW 437
28496: ST_TO_ADDR
// if not task then
28497: LD_VAR 0 14
28501: NOT
28502: IFFALSE 28506
// exit ;
28504: GO 28640
// if task [ 1 ] [ 1 ] <> | then
28506: LD_VAR 0 14
28510: PUSH
28511: LD_INT 1
28513: ARRAY
28514: PUSH
28515: LD_INT 1
28517: ARRAY
28518: PUSH
28519: LD_STRING |
28521: NONEQUAL
28522: IFFALSE 28526
// exit ;
28524: GO 28640
// _x := task [ 1 ] [ 2 ] ;
28526: LD_ADDR_VAR 0 11
28530: PUSH
28531: LD_VAR 0 14
28535: PUSH
28536: LD_INT 1
28538: ARRAY
28539: PUSH
28540: LD_INT 2
28542: ARRAY
28543: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28544: LD_ADDR_VAR 0 12
28548: PUSH
28549: LD_VAR 0 14
28553: PUSH
28554: LD_INT 1
28556: ARRAY
28557: PUSH
28558: LD_INT 3
28560: ARRAY
28561: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28562: LD_VAR 0 11
28566: PPUSH
28567: LD_VAR 0 12
28571: PPUSH
28572: CALL_OW 351
28576: NOT
28577: PUSH
28578: LD_VAR 0 11
28582: PPUSH
28583: LD_VAR 0 12
28587: PPUSH
28588: CALL_OW 554
28592: NOT
28593: OR
28594: IFFALSE 28628
// begin task := Delete ( task , 1 ) ;
28596: LD_ADDR_VAR 0 14
28600: PUSH
28601: LD_VAR 0 14
28605: PPUSH
28606: LD_INT 1
28608: PPUSH
28609: CALL_OW 3
28613: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28614: LD_VAR 0 1
28618: PPUSH
28619: LD_VAR 0 14
28623: PPUSH
28624: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28628: LD_VAR 0 1
28632: PPUSH
28633: CALL_OW 314
28637: NOT
28638: IFFALSE 28475
// end ;
28640: LD_VAR 0 5
28644: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28645: LD_EXP 109
28649: NOT
28650: IFFALSE 28700
28652: GO 28654
28654: DISABLE
// begin initHack := true ;
28655: LD_ADDR_EXP 109
28659: PUSH
28660: LD_INT 1
28662: ST_TO_ADDR
// hackTanks := [ ] ;
28663: LD_ADDR_EXP 110
28667: PUSH
28668: EMPTY
28669: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28670: LD_ADDR_EXP 111
28674: PUSH
28675: EMPTY
28676: ST_TO_ADDR
// hackLimit := 3 ;
28677: LD_ADDR_EXP 112
28681: PUSH
28682: LD_INT 3
28684: ST_TO_ADDR
// hackDist := 12 ;
28685: LD_ADDR_EXP 113
28689: PUSH
28690: LD_INT 12
28692: ST_TO_ADDR
// hackCounter := [ ] ;
28693: LD_ADDR_EXP 114
28697: PUSH
28698: EMPTY
28699: ST_TO_ADDR
// end ;
28700: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28701: LD_EXP 109
28705: PUSH
28706: LD_INT 34
28708: PUSH
28709: LD_INT 99
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PPUSH
28716: CALL_OW 69
28720: AND
28721: IFFALSE 28974
28723: GO 28725
28725: DISABLE
28726: LD_INT 0
28728: PPUSH
28729: PPUSH
// begin enable ;
28730: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28731: LD_ADDR_VAR 0 1
28735: PUSH
28736: LD_INT 34
28738: PUSH
28739: LD_INT 99
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PPUSH
28746: CALL_OW 69
28750: PUSH
28751: FOR_IN
28752: IFFALSE 28972
// begin if not i in hackTanks then
28754: LD_VAR 0 1
28758: PUSH
28759: LD_EXP 110
28763: IN
28764: NOT
28765: IFFALSE 28848
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28767: LD_ADDR_EXP 110
28771: PUSH
28772: LD_EXP 110
28776: PPUSH
28777: LD_EXP 110
28781: PUSH
28782: LD_INT 1
28784: PLUS
28785: PPUSH
28786: LD_VAR 0 1
28790: PPUSH
28791: CALL_OW 1
28795: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28796: LD_ADDR_EXP 111
28800: PUSH
28801: LD_EXP 111
28805: PPUSH
28806: LD_EXP 111
28810: PUSH
28811: LD_INT 1
28813: PLUS
28814: PPUSH
28815: EMPTY
28816: PPUSH
28817: CALL_OW 1
28821: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28822: LD_ADDR_EXP 114
28826: PUSH
28827: LD_EXP 114
28831: PPUSH
28832: LD_EXP 114
28836: PUSH
28837: LD_INT 1
28839: PLUS
28840: PPUSH
28841: EMPTY
28842: PPUSH
28843: CALL_OW 1
28847: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28848: LD_VAR 0 1
28852: PPUSH
28853: CALL_OW 302
28857: NOT
28858: IFFALSE 28871
// begin HackUnlinkAll ( i ) ;
28860: LD_VAR 0 1
28864: PPUSH
28865: CALL 28977 0 1
// continue ;
28869: GO 28751
// end ; HackCheckCapturedStatus ( i ) ;
28871: LD_VAR 0 1
28875: PPUSH
28876: CALL 29420 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28880: LD_ADDR_VAR 0 2
28884: PUSH
28885: LD_INT 81
28887: PUSH
28888: LD_VAR 0 1
28892: PPUSH
28893: CALL_OW 255
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 33
28904: PUSH
28905: LD_INT 3
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 91
28914: PUSH
28915: LD_VAR 0 1
28919: PUSH
28920: LD_EXP 113
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 50
28932: PUSH
28933: EMPTY
28934: LIST
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: PPUSH
28942: CALL_OW 69
28946: ST_TO_ADDR
// if not tmp then
28947: LD_VAR 0 2
28951: NOT
28952: IFFALSE 28956
// continue ;
28954: GO 28751
// HackLink ( i , tmp ) ;
28956: LD_VAR 0 1
28960: PPUSH
28961: LD_VAR 0 2
28965: PPUSH
28966: CALL 29113 0 2
// end ;
28970: GO 28751
28972: POP
28973: POP
// end ;
28974: PPOPN 2
28976: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28977: LD_INT 0
28979: PPUSH
28980: PPUSH
28981: PPUSH
// if not hack in hackTanks then
28982: LD_VAR 0 1
28986: PUSH
28987: LD_EXP 110
28991: IN
28992: NOT
28993: IFFALSE 28997
// exit ;
28995: GO 29108
// index := GetElementIndex ( hackTanks , hack ) ;
28997: LD_ADDR_VAR 0 4
29001: PUSH
29002: LD_EXP 110
29006: PPUSH
29007: LD_VAR 0 1
29011: PPUSH
29012: CALL 36550 0 2
29016: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29017: LD_EXP 111
29021: PUSH
29022: LD_VAR 0 4
29026: ARRAY
29027: IFFALSE 29108
// begin for i in hackTanksCaptured [ index ] do
29029: LD_ADDR_VAR 0 3
29033: PUSH
29034: LD_EXP 111
29038: PUSH
29039: LD_VAR 0 4
29043: ARRAY
29044: PUSH
29045: FOR_IN
29046: IFFALSE 29072
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29048: LD_VAR 0 3
29052: PUSH
29053: LD_INT 1
29055: ARRAY
29056: PPUSH
29057: LD_VAR 0 3
29061: PUSH
29062: LD_INT 2
29064: ARRAY
29065: PPUSH
29066: CALL_OW 235
29070: GO 29045
29072: POP
29073: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29074: LD_ADDR_EXP 111
29078: PUSH
29079: LD_EXP 111
29083: PPUSH
29084: LD_VAR 0 4
29088: PPUSH
29089: EMPTY
29090: PPUSH
29091: CALL_OW 1
29095: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29096: LD_VAR 0 1
29100: PPUSH
29101: LD_INT 0
29103: PPUSH
29104: CALL_OW 505
// end ; end ;
29108: LD_VAR 0 2
29112: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29113: LD_INT 0
29115: PPUSH
29116: PPUSH
29117: PPUSH
// if not hack in hackTanks or not vehicles then
29118: LD_VAR 0 1
29122: PUSH
29123: LD_EXP 110
29127: IN
29128: NOT
29129: PUSH
29130: LD_VAR 0 2
29134: NOT
29135: OR
29136: IFFALSE 29140
// exit ;
29138: GO 29415
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29140: LD_ADDR_VAR 0 2
29144: PUSH
29145: LD_VAR 0 1
29149: PPUSH
29150: LD_VAR 0 2
29154: PPUSH
29155: LD_INT 1
29157: PPUSH
29158: LD_INT 1
29160: PPUSH
29161: CALL 37200 0 4
29165: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29166: LD_ADDR_VAR 0 5
29170: PUSH
29171: LD_EXP 110
29175: PPUSH
29176: LD_VAR 0 1
29180: PPUSH
29181: CALL 36550 0 2
29185: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29186: LD_EXP 111
29190: PUSH
29191: LD_VAR 0 5
29195: ARRAY
29196: PUSH
29197: LD_EXP 112
29201: LESS
29202: IFFALSE 29391
// begin for i := 1 to vehicles do
29204: LD_ADDR_VAR 0 4
29208: PUSH
29209: DOUBLE
29210: LD_INT 1
29212: DEC
29213: ST_TO_ADDR
29214: LD_VAR 0 2
29218: PUSH
29219: FOR_TO
29220: IFFALSE 29389
// begin if hackTanksCaptured [ index ] = hackLimit then
29222: LD_EXP 111
29226: PUSH
29227: LD_VAR 0 5
29231: ARRAY
29232: PUSH
29233: LD_EXP 112
29237: EQUAL
29238: IFFALSE 29242
// break ;
29240: GO 29389
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29242: LD_ADDR_EXP 114
29246: PUSH
29247: LD_EXP 114
29251: PPUSH
29252: LD_VAR 0 5
29256: PPUSH
29257: LD_EXP 114
29261: PUSH
29262: LD_VAR 0 5
29266: ARRAY
29267: PUSH
29268: LD_INT 1
29270: PLUS
29271: PPUSH
29272: CALL_OW 1
29276: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29277: LD_ADDR_EXP 111
29281: PUSH
29282: LD_EXP 111
29286: PPUSH
29287: LD_VAR 0 5
29291: PUSH
29292: LD_EXP 111
29296: PUSH
29297: LD_VAR 0 5
29301: ARRAY
29302: PUSH
29303: LD_INT 1
29305: PLUS
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PPUSH
29311: LD_VAR 0 2
29315: PUSH
29316: LD_VAR 0 4
29320: ARRAY
29321: PUSH
29322: LD_VAR 0 2
29326: PUSH
29327: LD_VAR 0 4
29331: ARRAY
29332: PPUSH
29333: CALL_OW 255
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PPUSH
29342: CALL 36765 0 3
29346: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29347: LD_VAR 0 2
29351: PUSH
29352: LD_VAR 0 4
29356: ARRAY
29357: PPUSH
29358: LD_VAR 0 1
29362: PPUSH
29363: CALL_OW 255
29367: PPUSH
29368: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29372: LD_VAR 0 2
29376: PUSH
29377: LD_VAR 0 4
29381: ARRAY
29382: PPUSH
29383: CALL_OW 141
// end ;
29387: GO 29219
29389: POP
29390: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29391: LD_VAR 0 1
29395: PPUSH
29396: LD_EXP 111
29400: PUSH
29401: LD_VAR 0 5
29405: ARRAY
29406: PUSH
29407: LD_INT 0
29409: PLUS
29410: PPUSH
29411: CALL_OW 505
// end ;
29415: LD_VAR 0 3
29419: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29420: LD_INT 0
29422: PPUSH
29423: PPUSH
29424: PPUSH
29425: PPUSH
// if not hack in hackTanks then
29426: LD_VAR 0 1
29430: PUSH
29431: LD_EXP 110
29435: IN
29436: NOT
29437: IFFALSE 29441
// exit ;
29439: GO 29681
// index := GetElementIndex ( hackTanks , hack ) ;
29441: LD_ADDR_VAR 0 4
29445: PUSH
29446: LD_EXP 110
29450: PPUSH
29451: LD_VAR 0 1
29455: PPUSH
29456: CALL 36550 0 2
29460: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29461: LD_ADDR_VAR 0 3
29465: PUSH
29466: DOUBLE
29467: LD_EXP 111
29471: PUSH
29472: LD_VAR 0 4
29476: ARRAY
29477: INC
29478: ST_TO_ADDR
29479: LD_INT 1
29481: PUSH
29482: FOR_DOWNTO
29483: IFFALSE 29655
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29485: LD_ADDR_VAR 0 5
29489: PUSH
29490: LD_EXP 111
29494: PUSH
29495: LD_VAR 0 4
29499: ARRAY
29500: PUSH
29501: LD_VAR 0 3
29505: ARRAY
29506: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29507: LD_VAR 0 5
29511: PUSH
29512: LD_INT 1
29514: ARRAY
29515: PPUSH
29516: CALL_OW 302
29520: NOT
29521: PUSH
29522: LD_VAR 0 5
29526: PUSH
29527: LD_INT 1
29529: ARRAY
29530: PPUSH
29531: CALL_OW 255
29535: PUSH
29536: LD_VAR 0 1
29540: PPUSH
29541: CALL_OW 255
29545: NONEQUAL
29546: OR
29547: IFFALSE 29653
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29549: LD_VAR 0 5
29553: PUSH
29554: LD_INT 1
29556: ARRAY
29557: PPUSH
29558: CALL_OW 305
29562: PUSH
29563: LD_VAR 0 5
29567: PUSH
29568: LD_INT 1
29570: ARRAY
29571: PPUSH
29572: CALL_OW 255
29576: PUSH
29577: LD_VAR 0 1
29581: PPUSH
29582: CALL_OW 255
29586: EQUAL
29587: AND
29588: IFFALSE 29612
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29590: LD_VAR 0 5
29594: PUSH
29595: LD_INT 1
29597: ARRAY
29598: PPUSH
29599: LD_VAR 0 5
29603: PUSH
29604: LD_INT 2
29606: ARRAY
29607: PPUSH
29608: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29612: LD_ADDR_EXP 111
29616: PUSH
29617: LD_EXP 111
29621: PPUSH
29622: LD_VAR 0 4
29626: PPUSH
29627: LD_EXP 111
29631: PUSH
29632: LD_VAR 0 4
29636: ARRAY
29637: PPUSH
29638: LD_VAR 0 3
29642: PPUSH
29643: CALL_OW 3
29647: PPUSH
29648: CALL_OW 1
29652: ST_TO_ADDR
// end ; end ;
29653: GO 29482
29655: POP
29656: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29657: LD_VAR 0 1
29661: PPUSH
29662: LD_EXP 111
29666: PUSH
29667: LD_VAR 0 4
29671: ARRAY
29672: PUSH
29673: LD_INT 0
29675: PLUS
29676: PPUSH
29677: CALL_OW 505
// end ;
29681: LD_VAR 0 2
29685: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29686: LD_INT 0
29688: PPUSH
29689: PPUSH
29690: PPUSH
29691: PPUSH
// if not hack in hackTanks then
29692: LD_VAR 0 1
29696: PUSH
29697: LD_EXP 110
29701: IN
29702: NOT
29703: IFFALSE 29707
// exit ;
29705: GO 29792
// index := GetElementIndex ( hackTanks , hack ) ;
29707: LD_ADDR_VAR 0 5
29711: PUSH
29712: LD_EXP 110
29716: PPUSH
29717: LD_VAR 0 1
29721: PPUSH
29722: CALL 36550 0 2
29726: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29727: LD_ADDR_VAR 0 4
29731: PUSH
29732: DOUBLE
29733: LD_INT 1
29735: DEC
29736: ST_TO_ADDR
29737: LD_EXP 111
29741: PUSH
29742: LD_VAR 0 5
29746: ARRAY
29747: PUSH
29748: FOR_TO
29749: IFFALSE 29790
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29751: LD_EXP 111
29755: PUSH
29756: LD_VAR 0 5
29760: ARRAY
29761: PUSH
29762: LD_VAR 0 4
29766: ARRAY
29767: PUSH
29768: LD_INT 1
29770: ARRAY
29771: PUSH
29772: LD_VAR 0 2
29776: EQUAL
29777: IFFALSE 29788
// KillUnit ( vehicle ) ;
29779: LD_VAR 0 2
29783: PPUSH
29784: CALL_OW 66
29788: GO 29748
29790: POP
29791: POP
// end ;
29792: LD_VAR 0 3
29796: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29797: LD_EXP 115
29801: NOT
29802: IFFALSE 29837
29804: GO 29806
29806: DISABLE
// begin initMiner := true ;
29807: LD_ADDR_EXP 115
29811: PUSH
29812: LD_INT 1
29814: ST_TO_ADDR
// minersList := [ ] ;
29815: LD_ADDR_EXP 116
29819: PUSH
29820: EMPTY
29821: ST_TO_ADDR
// minerMinesList := [ ] ;
29822: LD_ADDR_EXP 117
29826: PUSH
29827: EMPTY
29828: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29829: LD_ADDR_EXP 118
29833: PUSH
29834: LD_INT 5
29836: ST_TO_ADDR
// end ;
29837: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29838: LD_EXP 115
29842: PUSH
29843: LD_INT 34
29845: PUSH
29846: LD_INT 81
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PPUSH
29853: CALL_OW 69
29857: AND
29858: IFFALSE 30319
29860: GO 29862
29862: DISABLE
29863: LD_INT 0
29865: PPUSH
29866: PPUSH
29867: PPUSH
29868: PPUSH
// begin enable ;
29869: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29870: LD_ADDR_VAR 0 1
29874: PUSH
29875: LD_INT 34
29877: PUSH
29878: LD_INT 81
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PPUSH
29885: CALL_OW 69
29889: PUSH
29890: FOR_IN
29891: IFFALSE 29963
// begin if not i in minersList then
29893: LD_VAR 0 1
29897: PUSH
29898: LD_EXP 116
29902: IN
29903: NOT
29904: IFFALSE 29961
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29906: LD_ADDR_EXP 116
29910: PUSH
29911: LD_EXP 116
29915: PPUSH
29916: LD_EXP 116
29920: PUSH
29921: LD_INT 1
29923: PLUS
29924: PPUSH
29925: LD_VAR 0 1
29929: PPUSH
29930: CALL_OW 1
29934: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29935: LD_ADDR_EXP 117
29939: PUSH
29940: LD_EXP 117
29944: PPUSH
29945: LD_EXP 117
29949: PUSH
29950: LD_INT 1
29952: PLUS
29953: PPUSH
29954: EMPTY
29955: PPUSH
29956: CALL_OW 1
29960: ST_TO_ADDR
// end end ;
29961: GO 29890
29963: POP
29964: POP
// for i := minerMinesList downto 1 do
29965: LD_ADDR_VAR 0 1
29969: PUSH
29970: DOUBLE
29971: LD_EXP 117
29975: INC
29976: ST_TO_ADDR
29977: LD_INT 1
29979: PUSH
29980: FOR_DOWNTO
29981: IFFALSE 30317
// begin if IsLive ( minersList [ i ] ) then
29983: LD_EXP 116
29987: PUSH
29988: LD_VAR 0 1
29992: ARRAY
29993: PPUSH
29994: CALL_OW 300
29998: IFFALSE 30026
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30000: LD_EXP 116
30004: PUSH
30005: LD_VAR 0 1
30009: ARRAY
30010: PPUSH
30011: LD_EXP 117
30015: PUSH
30016: LD_VAR 0 1
30020: ARRAY
30021: PPUSH
30022: CALL_OW 505
// if not minerMinesList [ i ] then
30026: LD_EXP 117
30030: PUSH
30031: LD_VAR 0 1
30035: ARRAY
30036: NOT
30037: IFFALSE 30041
// continue ;
30039: GO 29980
// for j := minerMinesList [ i ] downto 1 do
30041: LD_ADDR_VAR 0 2
30045: PUSH
30046: DOUBLE
30047: LD_EXP 117
30051: PUSH
30052: LD_VAR 0 1
30056: ARRAY
30057: INC
30058: ST_TO_ADDR
30059: LD_INT 1
30061: PUSH
30062: FOR_DOWNTO
30063: IFFALSE 30313
// begin side := GetSide ( minersList [ i ] ) ;
30065: LD_ADDR_VAR 0 3
30069: PUSH
30070: LD_EXP 116
30074: PUSH
30075: LD_VAR 0 1
30079: ARRAY
30080: PPUSH
30081: CALL_OW 255
30085: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30086: LD_ADDR_VAR 0 4
30090: PUSH
30091: LD_EXP 117
30095: PUSH
30096: LD_VAR 0 1
30100: ARRAY
30101: PUSH
30102: LD_VAR 0 2
30106: ARRAY
30107: PUSH
30108: LD_INT 1
30110: ARRAY
30111: PPUSH
30112: LD_EXP 117
30116: PUSH
30117: LD_VAR 0 1
30121: ARRAY
30122: PUSH
30123: LD_VAR 0 2
30127: ARRAY
30128: PUSH
30129: LD_INT 2
30131: ARRAY
30132: PPUSH
30133: CALL_OW 428
30137: ST_TO_ADDR
// if not tmp then
30138: LD_VAR 0 4
30142: NOT
30143: IFFALSE 30147
// continue ;
30145: GO 30062
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30147: LD_VAR 0 4
30151: PUSH
30152: LD_INT 81
30154: PUSH
30155: LD_VAR 0 3
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PPUSH
30164: CALL_OW 69
30168: IN
30169: PUSH
30170: LD_EXP 117
30174: PUSH
30175: LD_VAR 0 1
30179: ARRAY
30180: PUSH
30181: LD_VAR 0 2
30185: ARRAY
30186: PUSH
30187: LD_INT 1
30189: ARRAY
30190: PPUSH
30191: LD_EXP 117
30195: PUSH
30196: LD_VAR 0 1
30200: ARRAY
30201: PUSH
30202: LD_VAR 0 2
30206: ARRAY
30207: PUSH
30208: LD_INT 2
30210: ARRAY
30211: PPUSH
30212: CALL_OW 458
30216: AND
30217: IFFALSE 30311
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30219: LD_EXP 117
30223: PUSH
30224: LD_VAR 0 1
30228: ARRAY
30229: PUSH
30230: LD_VAR 0 2
30234: ARRAY
30235: PUSH
30236: LD_INT 1
30238: ARRAY
30239: PPUSH
30240: LD_EXP 117
30244: PUSH
30245: LD_VAR 0 1
30249: ARRAY
30250: PUSH
30251: LD_VAR 0 2
30255: ARRAY
30256: PUSH
30257: LD_INT 2
30259: ARRAY
30260: PPUSH
30261: LD_VAR 0 3
30265: PPUSH
30266: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30270: LD_ADDR_EXP 117
30274: PUSH
30275: LD_EXP 117
30279: PPUSH
30280: LD_VAR 0 1
30284: PPUSH
30285: LD_EXP 117
30289: PUSH
30290: LD_VAR 0 1
30294: ARRAY
30295: PPUSH
30296: LD_VAR 0 2
30300: PPUSH
30301: CALL_OW 3
30305: PPUSH
30306: CALL_OW 1
30310: ST_TO_ADDR
// end ; end ;
30311: GO 30062
30313: POP
30314: POP
// end ;
30315: GO 29980
30317: POP
30318: POP
// end ;
30319: PPOPN 4
30321: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30322: LD_INT 0
30324: PPUSH
30325: PPUSH
// result := false ;
30326: LD_ADDR_VAR 0 4
30330: PUSH
30331: LD_INT 0
30333: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30334: LD_VAR 0 1
30338: PPUSH
30339: CALL_OW 264
30343: PUSH
30344: LD_INT 81
30346: EQUAL
30347: NOT
30348: IFFALSE 30352
// exit ;
30350: GO 30592
// index := GetElementIndex ( minersList , unit ) ;
30352: LD_ADDR_VAR 0 5
30356: PUSH
30357: LD_EXP 116
30361: PPUSH
30362: LD_VAR 0 1
30366: PPUSH
30367: CALL 36550 0 2
30371: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30372: LD_EXP 117
30376: PUSH
30377: LD_VAR 0 5
30381: ARRAY
30382: PUSH
30383: LD_EXP 118
30387: GREATEREQUAL
30388: IFFALSE 30392
// exit ;
30390: GO 30592
// ComMoveXY ( unit , x , y ) ;
30392: LD_VAR 0 1
30396: PPUSH
30397: LD_VAR 0 2
30401: PPUSH
30402: LD_VAR 0 3
30406: PPUSH
30407: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30411: LD_INT 35
30413: PPUSH
30414: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30418: LD_VAR 0 1
30422: PPUSH
30423: LD_VAR 0 2
30427: PPUSH
30428: LD_VAR 0 3
30432: PPUSH
30433: CALL 68291 0 3
30437: NOT
30438: PUSH
30439: LD_VAR 0 1
30443: PPUSH
30444: CALL_OW 314
30448: AND
30449: IFFALSE 30453
// exit ;
30451: GO 30592
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30453: LD_VAR 0 2
30457: PPUSH
30458: LD_VAR 0 3
30462: PPUSH
30463: CALL_OW 428
30467: PUSH
30468: LD_VAR 0 1
30472: EQUAL
30473: PUSH
30474: LD_VAR 0 1
30478: PPUSH
30479: CALL_OW 314
30483: NOT
30484: AND
30485: IFFALSE 30411
// PlaySoundXY ( x , y , PlantMine ) ;
30487: LD_VAR 0 2
30491: PPUSH
30492: LD_VAR 0 3
30496: PPUSH
30497: LD_STRING PlantMine
30499: PPUSH
30500: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30504: LD_VAR 0 2
30508: PPUSH
30509: LD_VAR 0 3
30513: PPUSH
30514: LD_VAR 0 1
30518: PPUSH
30519: CALL_OW 255
30523: PPUSH
30524: LD_INT 0
30526: PPUSH
30527: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30531: LD_ADDR_EXP 117
30535: PUSH
30536: LD_EXP 117
30540: PPUSH
30541: LD_VAR 0 5
30545: PUSH
30546: LD_EXP 117
30550: PUSH
30551: LD_VAR 0 5
30555: ARRAY
30556: PUSH
30557: LD_INT 1
30559: PLUS
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PPUSH
30565: LD_VAR 0 2
30569: PUSH
30570: LD_VAR 0 3
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PPUSH
30579: CALL 36765 0 3
30583: ST_TO_ADDR
// result := true ;
30584: LD_ADDR_VAR 0 4
30588: PUSH
30589: LD_INT 1
30591: ST_TO_ADDR
// end ;
30592: LD_VAR 0 4
30596: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30597: LD_INT 0
30599: PPUSH
30600: PPUSH
30601: PPUSH
// if not unit in minersList then
30602: LD_VAR 0 1
30606: PUSH
30607: LD_EXP 116
30611: IN
30612: NOT
30613: IFFALSE 30617
// exit ;
30615: GO 31009
// index := GetElementIndex ( minersList , unit ) ;
30617: LD_ADDR_VAR 0 6
30621: PUSH
30622: LD_EXP 116
30626: PPUSH
30627: LD_VAR 0 1
30631: PPUSH
30632: CALL 36550 0 2
30636: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30637: LD_ADDR_VAR 0 5
30641: PUSH
30642: DOUBLE
30643: LD_EXP 117
30647: PUSH
30648: LD_VAR 0 6
30652: ARRAY
30653: INC
30654: ST_TO_ADDR
30655: LD_INT 1
30657: PUSH
30658: FOR_DOWNTO
30659: IFFALSE 30820
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30661: LD_EXP 117
30665: PUSH
30666: LD_VAR 0 6
30670: ARRAY
30671: PUSH
30672: LD_VAR 0 5
30676: ARRAY
30677: PUSH
30678: LD_INT 1
30680: ARRAY
30681: PUSH
30682: LD_VAR 0 2
30686: EQUAL
30687: PUSH
30688: LD_EXP 117
30692: PUSH
30693: LD_VAR 0 6
30697: ARRAY
30698: PUSH
30699: LD_VAR 0 5
30703: ARRAY
30704: PUSH
30705: LD_INT 2
30707: ARRAY
30708: PUSH
30709: LD_VAR 0 3
30713: EQUAL
30714: AND
30715: IFFALSE 30818
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30717: LD_EXP 117
30721: PUSH
30722: LD_VAR 0 6
30726: ARRAY
30727: PUSH
30728: LD_VAR 0 5
30732: ARRAY
30733: PUSH
30734: LD_INT 1
30736: ARRAY
30737: PPUSH
30738: LD_EXP 117
30742: PUSH
30743: LD_VAR 0 6
30747: ARRAY
30748: PUSH
30749: LD_VAR 0 5
30753: ARRAY
30754: PUSH
30755: LD_INT 2
30757: ARRAY
30758: PPUSH
30759: LD_VAR 0 1
30763: PPUSH
30764: CALL_OW 255
30768: PPUSH
30769: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30773: LD_ADDR_EXP 117
30777: PUSH
30778: LD_EXP 117
30782: PPUSH
30783: LD_VAR 0 6
30787: PPUSH
30788: LD_EXP 117
30792: PUSH
30793: LD_VAR 0 6
30797: ARRAY
30798: PPUSH
30799: LD_VAR 0 5
30803: PPUSH
30804: CALL_OW 3
30808: PPUSH
30809: CALL_OW 1
30813: ST_TO_ADDR
// exit ;
30814: POP
30815: POP
30816: GO 31009
// end ; end ;
30818: GO 30658
30820: POP
30821: POP
// for i := minerMinesList [ index ] downto 1 do
30822: LD_ADDR_VAR 0 5
30826: PUSH
30827: DOUBLE
30828: LD_EXP 117
30832: PUSH
30833: LD_VAR 0 6
30837: ARRAY
30838: INC
30839: ST_TO_ADDR
30840: LD_INT 1
30842: PUSH
30843: FOR_DOWNTO
30844: IFFALSE 31007
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30846: LD_EXP 117
30850: PUSH
30851: LD_VAR 0 6
30855: ARRAY
30856: PUSH
30857: LD_VAR 0 5
30861: ARRAY
30862: PUSH
30863: LD_INT 1
30865: ARRAY
30866: PPUSH
30867: LD_EXP 117
30871: PUSH
30872: LD_VAR 0 6
30876: ARRAY
30877: PUSH
30878: LD_VAR 0 5
30882: ARRAY
30883: PUSH
30884: LD_INT 2
30886: ARRAY
30887: PPUSH
30888: LD_VAR 0 2
30892: PPUSH
30893: LD_VAR 0 3
30897: PPUSH
30898: CALL_OW 298
30902: PUSH
30903: LD_INT 6
30905: LESS
30906: IFFALSE 31005
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30908: LD_EXP 117
30912: PUSH
30913: LD_VAR 0 6
30917: ARRAY
30918: PUSH
30919: LD_VAR 0 5
30923: ARRAY
30924: PUSH
30925: LD_INT 1
30927: ARRAY
30928: PPUSH
30929: LD_EXP 117
30933: PUSH
30934: LD_VAR 0 6
30938: ARRAY
30939: PUSH
30940: LD_VAR 0 5
30944: ARRAY
30945: PUSH
30946: LD_INT 2
30948: ARRAY
30949: PPUSH
30950: LD_VAR 0 1
30954: PPUSH
30955: CALL_OW 255
30959: PPUSH
30960: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30964: LD_ADDR_EXP 117
30968: PUSH
30969: LD_EXP 117
30973: PPUSH
30974: LD_VAR 0 6
30978: PPUSH
30979: LD_EXP 117
30983: PUSH
30984: LD_VAR 0 6
30988: ARRAY
30989: PPUSH
30990: LD_VAR 0 5
30994: PPUSH
30995: CALL_OW 3
30999: PPUSH
31000: CALL_OW 1
31004: ST_TO_ADDR
// end ; end ;
31005: GO 30843
31007: POP
31008: POP
// end ;
31009: LD_VAR 0 4
31013: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31014: LD_INT 0
31016: PPUSH
31017: PPUSH
31018: PPUSH
31019: PPUSH
31020: PPUSH
31021: PPUSH
31022: PPUSH
31023: PPUSH
31024: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31025: LD_VAR 0 1
31029: PPUSH
31030: CALL_OW 264
31034: PUSH
31035: LD_INT 81
31037: EQUAL
31038: NOT
31039: PUSH
31040: LD_VAR 0 1
31044: PUSH
31045: LD_EXP 116
31049: IN
31050: NOT
31051: OR
31052: IFFALSE 31056
// exit ;
31054: GO 31378
// index := GetElementIndex ( minersList , unit ) ;
31056: LD_ADDR_VAR 0 6
31060: PUSH
31061: LD_EXP 116
31065: PPUSH
31066: LD_VAR 0 1
31070: PPUSH
31071: CALL 36550 0 2
31075: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31076: LD_ADDR_VAR 0 8
31080: PUSH
31081: LD_EXP 118
31085: PUSH
31086: LD_EXP 117
31090: PUSH
31091: LD_VAR 0 6
31095: ARRAY
31096: MINUS
31097: ST_TO_ADDR
// if not minesFreeAmount then
31098: LD_VAR 0 8
31102: NOT
31103: IFFALSE 31107
// exit ;
31105: GO 31378
// tmp := [ ] ;
31107: LD_ADDR_VAR 0 7
31111: PUSH
31112: EMPTY
31113: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31114: LD_ADDR_VAR 0 5
31118: PUSH
31119: DOUBLE
31120: LD_INT 1
31122: DEC
31123: ST_TO_ADDR
31124: LD_VAR 0 8
31128: PUSH
31129: FOR_TO
31130: IFFALSE 31325
// begin _d := rand ( 0 , 5 ) ;
31132: LD_ADDR_VAR 0 11
31136: PUSH
31137: LD_INT 0
31139: PPUSH
31140: LD_INT 5
31142: PPUSH
31143: CALL_OW 12
31147: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31148: LD_ADDR_VAR 0 12
31152: PUSH
31153: LD_INT 2
31155: PPUSH
31156: LD_INT 6
31158: PPUSH
31159: CALL_OW 12
31163: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31164: LD_ADDR_VAR 0 9
31168: PUSH
31169: LD_VAR 0 2
31173: PPUSH
31174: LD_VAR 0 11
31178: PPUSH
31179: LD_VAR 0 12
31183: PPUSH
31184: CALL_OW 272
31188: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31189: LD_ADDR_VAR 0 10
31193: PUSH
31194: LD_VAR 0 3
31198: PPUSH
31199: LD_VAR 0 11
31203: PPUSH
31204: LD_VAR 0 12
31208: PPUSH
31209: CALL_OW 273
31213: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31214: LD_VAR 0 9
31218: PPUSH
31219: LD_VAR 0 10
31223: PPUSH
31224: CALL_OW 488
31228: PUSH
31229: LD_VAR 0 9
31233: PUSH
31234: LD_VAR 0 10
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_VAR 0 7
31247: IN
31248: NOT
31249: AND
31250: PUSH
31251: LD_VAR 0 9
31255: PPUSH
31256: LD_VAR 0 10
31260: PPUSH
31261: CALL_OW 458
31265: NOT
31266: AND
31267: IFFALSE 31309
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31269: LD_ADDR_VAR 0 7
31273: PUSH
31274: LD_VAR 0 7
31278: PPUSH
31279: LD_VAR 0 7
31283: PUSH
31284: LD_INT 1
31286: PLUS
31287: PPUSH
31288: LD_VAR 0 9
31292: PUSH
31293: LD_VAR 0 10
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PPUSH
31302: CALL_OW 1
31306: ST_TO_ADDR
31307: GO 31323
// i := i - 1 ;
31309: LD_ADDR_VAR 0 5
31313: PUSH
31314: LD_VAR 0 5
31318: PUSH
31319: LD_INT 1
31321: MINUS
31322: ST_TO_ADDR
// end ;
31323: GO 31129
31325: POP
31326: POP
// for i in tmp do
31327: LD_ADDR_VAR 0 5
31331: PUSH
31332: LD_VAR 0 7
31336: PUSH
31337: FOR_IN
31338: IFFALSE 31376
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31340: LD_VAR 0 1
31344: PPUSH
31345: LD_VAR 0 5
31349: PUSH
31350: LD_INT 1
31352: ARRAY
31353: PPUSH
31354: LD_VAR 0 5
31358: PUSH
31359: LD_INT 2
31361: ARRAY
31362: PPUSH
31363: CALL 30322 0 3
31367: NOT
31368: IFFALSE 31374
// exit ;
31370: POP
31371: POP
31372: GO 31378
31374: GO 31337
31376: POP
31377: POP
// end ;
31378: LD_VAR 0 4
31382: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31383: LD_INT 0
31385: PPUSH
31386: PPUSH
31387: PPUSH
31388: PPUSH
31389: PPUSH
31390: PPUSH
31391: PPUSH
// if not GetClass ( unit ) = class_sniper then
31392: LD_VAR 0 1
31396: PPUSH
31397: CALL_OW 257
31401: PUSH
31402: LD_INT 5
31404: EQUAL
31405: NOT
31406: IFFALSE 31410
// exit ;
31408: GO 31798
// dist := 8 ;
31410: LD_ADDR_VAR 0 5
31414: PUSH
31415: LD_INT 8
31417: ST_TO_ADDR
// viewRange := 12 ;
31418: LD_ADDR_VAR 0 7
31422: PUSH
31423: LD_INT 12
31425: ST_TO_ADDR
// side := GetSide ( unit ) ;
31426: LD_ADDR_VAR 0 6
31430: PUSH
31431: LD_VAR 0 1
31435: PPUSH
31436: CALL_OW 255
31440: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31441: LD_INT 61
31443: PPUSH
31444: LD_VAR 0 6
31448: PPUSH
31449: CALL_OW 321
31453: PUSH
31454: LD_INT 2
31456: EQUAL
31457: IFFALSE 31467
// viewRange := 16 ;
31459: LD_ADDR_VAR 0 7
31463: PUSH
31464: LD_INT 16
31466: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31467: LD_VAR 0 1
31471: PPUSH
31472: LD_VAR 0 2
31476: PPUSH
31477: LD_VAR 0 3
31481: PPUSH
31482: CALL_OW 297
31486: PUSH
31487: LD_VAR 0 5
31491: GREATER
31492: IFFALSE 31571
// begin ComMoveXY ( unit , x , y ) ;
31494: LD_VAR 0 1
31498: PPUSH
31499: LD_VAR 0 2
31503: PPUSH
31504: LD_VAR 0 3
31508: PPUSH
31509: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31513: LD_INT 35
31515: PPUSH
31516: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31520: LD_VAR 0 1
31524: PPUSH
31525: LD_VAR 0 2
31529: PPUSH
31530: LD_VAR 0 3
31534: PPUSH
31535: CALL 68291 0 3
31539: NOT
31540: IFFALSE 31544
// exit ;
31542: GO 31798
// until GetDistUnitXY ( unit , x , y ) < dist ;
31544: LD_VAR 0 1
31548: PPUSH
31549: LD_VAR 0 2
31553: PPUSH
31554: LD_VAR 0 3
31558: PPUSH
31559: CALL_OW 297
31563: PUSH
31564: LD_VAR 0 5
31568: LESS
31569: IFFALSE 31513
// end ; ComTurnXY ( unit , x , y ) ;
31571: LD_VAR 0 1
31575: PPUSH
31576: LD_VAR 0 2
31580: PPUSH
31581: LD_VAR 0 3
31585: PPUSH
31586: CALL_OW 118
// wait ( 5 ) ;
31590: LD_INT 5
31592: PPUSH
31593: CALL_OW 67
// _d := GetDir ( unit ) ;
31597: LD_ADDR_VAR 0 10
31601: PUSH
31602: LD_VAR 0 1
31606: PPUSH
31607: CALL_OW 254
31611: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31612: LD_ADDR_VAR 0 8
31616: PUSH
31617: LD_VAR 0 1
31621: PPUSH
31622: CALL_OW 250
31626: PPUSH
31627: LD_VAR 0 10
31631: PPUSH
31632: LD_VAR 0 5
31636: PPUSH
31637: CALL_OW 272
31641: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31642: LD_ADDR_VAR 0 9
31646: PUSH
31647: LD_VAR 0 1
31651: PPUSH
31652: CALL_OW 251
31656: PPUSH
31657: LD_VAR 0 10
31661: PPUSH
31662: LD_VAR 0 5
31666: PPUSH
31667: CALL_OW 273
31671: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31672: LD_VAR 0 8
31676: PPUSH
31677: LD_VAR 0 9
31681: PPUSH
31682: CALL_OW 488
31686: NOT
31687: IFFALSE 31691
// exit ;
31689: GO 31798
// ComAnimCustom ( unit , 1 ) ;
31691: LD_VAR 0 1
31695: PPUSH
31696: LD_INT 1
31698: PPUSH
31699: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31703: LD_VAR 0 8
31707: PPUSH
31708: LD_VAR 0 9
31712: PPUSH
31713: LD_VAR 0 6
31717: PPUSH
31718: LD_VAR 0 7
31722: PPUSH
31723: CALL_OW 330
// repeat wait ( 1 ) ;
31727: LD_INT 1
31729: PPUSH
31730: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31734: LD_VAR 0 1
31738: PPUSH
31739: CALL_OW 316
31743: PUSH
31744: LD_VAR 0 1
31748: PPUSH
31749: CALL_OW 314
31753: OR
31754: PUSH
31755: LD_VAR 0 1
31759: PPUSH
31760: CALL_OW 302
31764: NOT
31765: OR
31766: PUSH
31767: LD_VAR 0 1
31771: PPUSH
31772: CALL_OW 301
31776: OR
31777: IFFALSE 31727
// RemoveSeeing ( _x , _y , side ) ;
31779: LD_VAR 0 8
31783: PPUSH
31784: LD_VAR 0 9
31788: PPUSH
31789: LD_VAR 0 6
31793: PPUSH
31794: CALL_OW 331
// end ; end_of_file
31798: LD_VAR 0 4
31802: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31803: LD_INT 0
31805: PPUSH
31806: PPUSH
// if exist_mode then
31807: LD_VAR 0 2
31811: IFFALSE 31836
// unit := CreateCharacter ( prefix & ident ) else
31813: LD_ADDR_VAR 0 5
31817: PUSH
31818: LD_VAR 0 3
31822: PUSH
31823: LD_VAR 0 1
31827: STR
31828: PPUSH
31829: CALL_OW 34
31833: ST_TO_ADDR
31834: GO 31851
// unit := NewCharacter ( ident ) ;
31836: LD_ADDR_VAR 0 5
31840: PUSH
31841: LD_VAR 0 1
31845: PPUSH
31846: CALL_OW 25
31850: ST_TO_ADDR
// result := unit ;
31851: LD_ADDR_VAR 0 4
31855: PUSH
31856: LD_VAR 0 5
31860: ST_TO_ADDR
// end ;
31861: LD_VAR 0 4
31865: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31866: LD_INT 0
31868: PPUSH
31869: PPUSH
// if not side or not nation then
31870: LD_VAR 0 1
31874: NOT
31875: PUSH
31876: LD_VAR 0 2
31880: NOT
31881: OR
31882: IFFALSE 31886
// exit ;
31884: GO 32654
// case nation of nation_american :
31886: LD_VAR 0 2
31890: PUSH
31891: LD_INT 1
31893: DOUBLE
31894: EQUAL
31895: IFTRUE 31899
31897: GO 32113
31899: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31900: LD_ADDR_VAR 0 4
31904: PUSH
31905: LD_INT 35
31907: PUSH
31908: LD_INT 45
31910: PUSH
31911: LD_INT 46
31913: PUSH
31914: LD_INT 47
31916: PUSH
31917: LD_INT 82
31919: PUSH
31920: LD_INT 83
31922: PUSH
31923: LD_INT 84
31925: PUSH
31926: LD_INT 85
31928: PUSH
31929: LD_INT 86
31931: PUSH
31932: LD_INT 1
31934: PUSH
31935: LD_INT 2
31937: PUSH
31938: LD_INT 6
31940: PUSH
31941: LD_INT 15
31943: PUSH
31944: LD_INT 16
31946: PUSH
31947: LD_INT 7
31949: PUSH
31950: LD_INT 12
31952: PUSH
31953: LD_INT 13
31955: PUSH
31956: LD_INT 10
31958: PUSH
31959: LD_INT 14
31961: PUSH
31962: LD_INT 20
31964: PUSH
31965: LD_INT 21
31967: PUSH
31968: LD_INT 22
31970: PUSH
31971: LD_INT 25
31973: PUSH
31974: LD_INT 32
31976: PUSH
31977: LD_INT 27
31979: PUSH
31980: LD_INT 36
31982: PUSH
31983: LD_INT 69
31985: PUSH
31986: LD_INT 39
31988: PUSH
31989: LD_INT 34
31991: PUSH
31992: LD_INT 40
31994: PUSH
31995: LD_INT 48
31997: PUSH
31998: LD_INT 49
32000: PUSH
32001: LD_INT 50
32003: PUSH
32004: LD_INT 51
32006: PUSH
32007: LD_INT 52
32009: PUSH
32010: LD_INT 53
32012: PUSH
32013: LD_INT 54
32015: PUSH
32016: LD_INT 55
32018: PUSH
32019: LD_INT 56
32021: PUSH
32022: LD_INT 57
32024: PUSH
32025: LD_INT 58
32027: PUSH
32028: LD_INT 59
32030: PUSH
32031: LD_INT 60
32033: PUSH
32034: LD_INT 61
32036: PUSH
32037: LD_INT 62
32039: PUSH
32040: LD_INT 80
32042: PUSH
32043: LD_INT 82
32045: PUSH
32046: LD_INT 83
32048: PUSH
32049: LD_INT 84
32051: PUSH
32052: LD_INT 85
32054: PUSH
32055: LD_INT 86
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: ST_TO_ADDR
32111: GO 32578
32113: LD_INT 2
32115: DOUBLE
32116: EQUAL
32117: IFTRUE 32121
32119: GO 32347
32121: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32122: LD_ADDR_VAR 0 4
32126: PUSH
32127: LD_INT 35
32129: PUSH
32130: LD_INT 45
32132: PUSH
32133: LD_INT 46
32135: PUSH
32136: LD_INT 47
32138: PUSH
32139: LD_INT 82
32141: PUSH
32142: LD_INT 83
32144: PUSH
32145: LD_INT 84
32147: PUSH
32148: LD_INT 85
32150: PUSH
32151: LD_INT 87
32153: PUSH
32154: LD_INT 70
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: LD_INT 11
32162: PUSH
32163: LD_INT 3
32165: PUSH
32166: LD_INT 4
32168: PUSH
32169: LD_INT 5
32171: PUSH
32172: LD_INT 6
32174: PUSH
32175: LD_INT 15
32177: PUSH
32178: LD_INT 18
32180: PUSH
32181: LD_INT 7
32183: PUSH
32184: LD_INT 17
32186: PUSH
32187: LD_INT 8
32189: PUSH
32190: LD_INT 20
32192: PUSH
32193: LD_INT 21
32195: PUSH
32196: LD_INT 22
32198: PUSH
32199: LD_INT 72
32201: PUSH
32202: LD_INT 26
32204: PUSH
32205: LD_INT 69
32207: PUSH
32208: LD_INT 39
32210: PUSH
32211: LD_INT 40
32213: PUSH
32214: LD_INT 41
32216: PUSH
32217: LD_INT 42
32219: PUSH
32220: LD_INT 43
32222: PUSH
32223: LD_INT 48
32225: PUSH
32226: LD_INT 49
32228: PUSH
32229: LD_INT 50
32231: PUSH
32232: LD_INT 51
32234: PUSH
32235: LD_INT 52
32237: PUSH
32238: LD_INT 53
32240: PUSH
32241: LD_INT 54
32243: PUSH
32244: LD_INT 55
32246: PUSH
32247: LD_INT 56
32249: PUSH
32250: LD_INT 60
32252: PUSH
32253: LD_INT 61
32255: PUSH
32256: LD_INT 62
32258: PUSH
32259: LD_INT 66
32261: PUSH
32262: LD_INT 67
32264: PUSH
32265: LD_INT 68
32267: PUSH
32268: LD_INT 81
32270: PUSH
32271: LD_INT 82
32273: PUSH
32274: LD_INT 83
32276: PUSH
32277: LD_INT 84
32279: PUSH
32280: LD_INT 85
32282: PUSH
32283: LD_INT 87
32285: PUSH
32286: LD_INT 88
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: ST_TO_ADDR
32345: GO 32578
32347: LD_INT 3
32349: DOUBLE
32350: EQUAL
32351: IFTRUE 32355
32353: GO 32577
32355: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32356: LD_ADDR_VAR 0 4
32360: PUSH
32361: LD_INT 46
32363: PUSH
32364: LD_INT 47
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: LD_INT 82
32375: PUSH
32376: LD_INT 83
32378: PUSH
32379: LD_INT 84
32381: PUSH
32382: LD_INT 85
32384: PUSH
32385: LD_INT 86
32387: PUSH
32388: LD_INT 11
32390: PUSH
32391: LD_INT 9
32393: PUSH
32394: LD_INT 20
32396: PUSH
32397: LD_INT 19
32399: PUSH
32400: LD_INT 21
32402: PUSH
32403: LD_INT 24
32405: PUSH
32406: LD_INT 22
32408: PUSH
32409: LD_INT 25
32411: PUSH
32412: LD_INT 28
32414: PUSH
32415: LD_INT 29
32417: PUSH
32418: LD_INT 30
32420: PUSH
32421: LD_INT 31
32423: PUSH
32424: LD_INT 37
32426: PUSH
32427: LD_INT 38
32429: PUSH
32430: LD_INT 32
32432: PUSH
32433: LD_INT 27
32435: PUSH
32436: LD_INT 33
32438: PUSH
32439: LD_INT 69
32441: PUSH
32442: LD_INT 39
32444: PUSH
32445: LD_INT 34
32447: PUSH
32448: LD_INT 40
32450: PUSH
32451: LD_INT 71
32453: PUSH
32454: LD_INT 23
32456: PUSH
32457: LD_INT 44
32459: PUSH
32460: LD_INT 48
32462: PUSH
32463: LD_INT 49
32465: PUSH
32466: LD_INT 50
32468: PUSH
32469: LD_INT 51
32471: PUSH
32472: LD_INT 52
32474: PUSH
32475: LD_INT 53
32477: PUSH
32478: LD_INT 54
32480: PUSH
32481: LD_INT 55
32483: PUSH
32484: LD_INT 56
32486: PUSH
32487: LD_INT 57
32489: PUSH
32490: LD_INT 58
32492: PUSH
32493: LD_INT 59
32495: PUSH
32496: LD_INT 63
32498: PUSH
32499: LD_INT 64
32501: PUSH
32502: LD_INT 65
32504: PUSH
32505: LD_INT 82
32507: PUSH
32508: LD_INT 83
32510: PUSH
32511: LD_INT 84
32513: PUSH
32514: LD_INT 85
32516: PUSH
32517: LD_INT 86
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: ST_TO_ADDR
32575: GO 32578
32577: POP
// if state > - 1 and state < 3 then
32578: LD_VAR 0 3
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: GREATER
32587: PUSH
32588: LD_VAR 0 3
32592: PUSH
32593: LD_INT 3
32595: LESS
32596: AND
32597: IFFALSE 32654
// for i in result do
32599: LD_ADDR_VAR 0 5
32603: PUSH
32604: LD_VAR 0 4
32608: PUSH
32609: FOR_IN
32610: IFFALSE 32652
// if GetTech ( i , side ) <> state then
32612: LD_VAR 0 5
32616: PPUSH
32617: LD_VAR 0 1
32621: PPUSH
32622: CALL_OW 321
32626: PUSH
32627: LD_VAR 0 3
32631: NONEQUAL
32632: IFFALSE 32650
// result := result diff i ;
32634: LD_ADDR_VAR 0 4
32638: PUSH
32639: LD_VAR 0 4
32643: PUSH
32644: LD_VAR 0 5
32648: DIFF
32649: ST_TO_ADDR
32650: GO 32609
32652: POP
32653: POP
// end ;
32654: LD_VAR 0 4
32658: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32659: LD_INT 0
32661: PPUSH
32662: PPUSH
32663: PPUSH
// result := true ;
32664: LD_ADDR_VAR 0 3
32668: PUSH
32669: LD_INT 1
32671: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32672: LD_ADDR_VAR 0 5
32676: PUSH
32677: LD_VAR 0 2
32681: PPUSH
32682: CALL_OW 480
32686: ST_TO_ADDR
// if not tmp then
32687: LD_VAR 0 5
32691: NOT
32692: IFFALSE 32696
// exit ;
32694: GO 32745
// for i in tmp do
32696: LD_ADDR_VAR 0 4
32700: PUSH
32701: LD_VAR 0 5
32705: PUSH
32706: FOR_IN
32707: IFFALSE 32743
// if GetTech ( i , side ) <> state_researched then
32709: LD_VAR 0 4
32713: PPUSH
32714: LD_VAR 0 1
32718: PPUSH
32719: CALL_OW 321
32723: PUSH
32724: LD_INT 2
32726: NONEQUAL
32727: IFFALSE 32741
// begin result := false ;
32729: LD_ADDR_VAR 0 3
32733: PUSH
32734: LD_INT 0
32736: ST_TO_ADDR
// exit ;
32737: POP
32738: POP
32739: GO 32745
// end ;
32741: GO 32706
32743: POP
32744: POP
// end ;
32745: LD_VAR 0 3
32749: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32750: LD_INT 0
32752: PPUSH
32753: PPUSH
32754: PPUSH
32755: PPUSH
32756: PPUSH
32757: PPUSH
32758: PPUSH
32759: PPUSH
32760: PPUSH
32761: PPUSH
32762: PPUSH
32763: PPUSH
32764: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32765: LD_VAR 0 1
32769: NOT
32770: PUSH
32771: LD_VAR 0 1
32775: PPUSH
32776: CALL_OW 257
32780: PUSH
32781: LD_INT 9
32783: NONEQUAL
32784: OR
32785: IFFALSE 32789
// exit ;
32787: GO 33362
// side := GetSide ( unit ) ;
32789: LD_ADDR_VAR 0 9
32793: PUSH
32794: LD_VAR 0 1
32798: PPUSH
32799: CALL_OW 255
32803: ST_TO_ADDR
// tech_space := tech_spacanom ;
32804: LD_ADDR_VAR 0 12
32808: PUSH
32809: LD_INT 29
32811: ST_TO_ADDR
// tech_time := tech_taurad ;
32812: LD_ADDR_VAR 0 13
32816: PUSH
32817: LD_INT 28
32819: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32820: LD_ADDR_VAR 0 11
32824: PUSH
32825: LD_VAR 0 1
32829: PPUSH
32830: CALL_OW 310
32834: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32835: LD_VAR 0 11
32839: PPUSH
32840: CALL_OW 247
32844: PUSH
32845: LD_INT 2
32847: EQUAL
32848: IFFALSE 32852
// exit ;
32850: GO 33362
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32852: LD_ADDR_VAR 0 8
32856: PUSH
32857: LD_INT 81
32859: PUSH
32860: LD_VAR 0 9
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 3
32871: PUSH
32872: LD_INT 21
32874: PUSH
32875: LD_INT 3
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PPUSH
32890: CALL_OW 69
32894: ST_TO_ADDR
// if not tmp then
32895: LD_VAR 0 8
32899: NOT
32900: IFFALSE 32904
// exit ;
32902: GO 33362
// if in_unit then
32904: LD_VAR 0 11
32908: IFFALSE 32932
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32910: LD_ADDR_VAR 0 10
32914: PUSH
32915: LD_VAR 0 8
32919: PPUSH
32920: LD_VAR 0 11
32924: PPUSH
32925: CALL_OW 74
32929: ST_TO_ADDR
32930: GO 32952
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32932: LD_ADDR_VAR 0 10
32936: PUSH
32937: LD_VAR 0 8
32941: PPUSH
32942: LD_VAR 0 1
32946: PPUSH
32947: CALL_OW 74
32951: ST_TO_ADDR
// if not enemy then
32952: LD_VAR 0 10
32956: NOT
32957: IFFALSE 32961
// exit ;
32959: GO 33362
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32961: LD_VAR 0 11
32965: PUSH
32966: LD_VAR 0 11
32970: PPUSH
32971: LD_VAR 0 10
32975: PPUSH
32976: CALL_OW 296
32980: PUSH
32981: LD_INT 13
32983: GREATER
32984: AND
32985: PUSH
32986: LD_VAR 0 1
32990: PPUSH
32991: LD_VAR 0 10
32995: PPUSH
32996: CALL_OW 296
33000: PUSH
33001: LD_INT 12
33003: GREATER
33004: OR
33005: IFFALSE 33009
// exit ;
33007: GO 33362
// missile := [ 1 ] ;
33009: LD_ADDR_VAR 0 14
33013: PUSH
33014: LD_INT 1
33016: PUSH
33017: EMPTY
33018: LIST
33019: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33020: LD_VAR 0 9
33024: PPUSH
33025: LD_VAR 0 12
33029: PPUSH
33030: CALL_OW 325
33034: IFFALSE 33063
// missile := Replace ( missile , missile + 1 , 2 ) ;
33036: LD_ADDR_VAR 0 14
33040: PUSH
33041: LD_VAR 0 14
33045: PPUSH
33046: LD_VAR 0 14
33050: PUSH
33051: LD_INT 1
33053: PLUS
33054: PPUSH
33055: LD_INT 2
33057: PPUSH
33058: CALL_OW 1
33062: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33063: LD_VAR 0 9
33067: PPUSH
33068: LD_VAR 0 13
33072: PPUSH
33073: CALL_OW 325
33077: PUSH
33078: LD_VAR 0 10
33082: PPUSH
33083: CALL_OW 255
33087: PPUSH
33088: LD_VAR 0 13
33092: PPUSH
33093: CALL_OW 325
33097: NOT
33098: AND
33099: IFFALSE 33128
// missile := Replace ( missile , missile + 1 , 3 ) ;
33101: LD_ADDR_VAR 0 14
33105: PUSH
33106: LD_VAR 0 14
33110: PPUSH
33111: LD_VAR 0 14
33115: PUSH
33116: LD_INT 1
33118: PLUS
33119: PPUSH
33120: LD_INT 3
33122: PPUSH
33123: CALL_OW 1
33127: ST_TO_ADDR
// if missile < 2 then
33128: LD_VAR 0 14
33132: PUSH
33133: LD_INT 2
33135: LESS
33136: IFFALSE 33140
// exit ;
33138: GO 33362
// x := GetX ( enemy ) ;
33140: LD_ADDR_VAR 0 4
33144: PUSH
33145: LD_VAR 0 10
33149: PPUSH
33150: CALL_OW 250
33154: ST_TO_ADDR
// y := GetY ( enemy ) ;
33155: LD_ADDR_VAR 0 5
33159: PUSH
33160: LD_VAR 0 10
33164: PPUSH
33165: CALL_OW 251
33169: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33170: LD_ADDR_VAR 0 6
33174: PUSH
33175: LD_VAR 0 4
33179: PUSH
33180: LD_INT 1
33182: NEG
33183: PPUSH
33184: LD_INT 1
33186: PPUSH
33187: CALL_OW 12
33191: PLUS
33192: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33193: LD_ADDR_VAR 0 7
33197: PUSH
33198: LD_VAR 0 5
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PPUSH
33207: LD_INT 1
33209: PPUSH
33210: CALL_OW 12
33214: PLUS
33215: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33216: LD_VAR 0 6
33220: PPUSH
33221: LD_VAR 0 7
33225: PPUSH
33226: CALL_OW 488
33230: NOT
33231: IFFALSE 33253
// begin _x := x ;
33233: LD_ADDR_VAR 0 6
33237: PUSH
33238: LD_VAR 0 4
33242: ST_TO_ADDR
// _y := y ;
33243: LD_ADDR_VAR 0 7
33247: PUSH
33248: LD_VAR 0 5
33252: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33253: LD_ADDR_VAR 0 3
33257: PUSH
33258: LD_INT 1
33260: PPUSH
33261: LD_VAR 0 14
33265: PPUSH
33266: CALL_OW 12
33270: ST_TO_ADDR
// case i of 1 :
33271: LD_VAR 0 3
33275: PUSH
33276: LD_INT 1
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33301
33284: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33285: LD_VAR 0 1
33289: PPUSH
33290: LD_VAR 0 10
33294: PPUSH
33295: CALL_OW 115
33299: GO 33362
33301: LD_INT 2
33303: DOUBLE
33304: EQUAL
33305: IFTRUE 33309
33307: GO 33331
33309: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33310: LD_VAR 0 1
33314: PPUSH
33315: LD_VAR 0 6
33319: PPUSH
33320: LD_VAR 0 7
33324: PPUSH
33325: CALL_OW 153
33329: GO 33362
33331: LD_INT 3
33333: DOUBLE
33334: EQUAL
33335: IFTRUE 33339
33337: GO 33361
33339: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33340: LD_VAR 0 1
33344: PPUSH
33345: LD_VAR 0 6
33349: PPUSH
33350: LD_VAR 0 7
33354: PPUSH
33355: CALL_OW 154
33359: GO 33362
33361: POP
// end ;
33362: LD_VAR 0 2
33366: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33367: LD_INT 0
33369: PPUSH
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
33374: PPUSH
// if not unit or not building then
33375: LD_VAR 0 1
33379: NOT
33380: PUSH
33381: LD_VAR 0 2
33385: NOT
33386: OR
33387: IFFALSE 33391
// exit ;
33389: GO 33549
// x := GetX ( building ) ;
33391: LD_ADDR_VAR 0 5
33395: PUSH
33396: LD_VAR 0 2
33400: PPUSH
33401: CALL_OW 250
33405: ST_TO_ADDR
// y := GetY ( building ) ;
33406: LD_ADDR_VAR 0 6
33410: PUSH
33411: LD_VAR 0 2
33415: PPUSH
33416: CALL_OW 251
33420: ST_TO_ADDR
// for i = 0 to 5 do
33421: LD_ADDR_VAR 0 4
33425: PUSH
33426: DOUBLE
33427: LD_INT 0
33429: DEC
33430: ST_TO_ADDR
33431: LD_INT 5
33433: PUSH
33434: FOR_TO
33435: IFFALSE 33547
// begin _x := ShiftX ( x , i , 3 ) ;
33437: LD_ADDR_VAR 0 7
33441: PUSH
33442: LD_VAR 0 5
33446: PPUSH
33447: LD_VAR 0 4
33451: PPUSH
33452: LD_INT 3
33454: PPUSH
33455: CALL_OW 272
33459: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33460: LD_ADDR_VAR 0 8
33464: PUSH
33465: LD_VAR 0 6
33469: PPUSH
33470: LD_VAR 0 4
33474: PPUSH
33475: LD_INT 3
33477: PPUSH
33478: CALL_OW 273
33482: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33483: LD_VAR 0 7
33487: PPUSH
33488: LD_VAR 0 8
33492: PPUSH
33493: CALL_OW 488
33497: NOT
33498: IFFALSE 33502
// continue ;
33500: GO 33434
// if HexInfo ( _x , _y ) = 0 then
33502: LD_VAR 0 7
33506: PPUSH
33507: LD_VAR 0 8
33511: PPUSH
33512: CALL_OW 428
33516: PUSH
33517: LD_INT 0
33519: EQUAL
33520: IFFALSE 33545
// begin ComMoveXY ( unit , _x , _y ) ;
33522: LD_VAR 0 1
33526: PPUSH
33527: LD_VAR 0 7
33531: PPUSH
33532: LD_VAR 0 8
33536: PPUSH
33537: CALL_OW 111
// exit ;
33541: POP
33542: POP
33543: GO 33549
// end ; end ;
33545: GO 33434
33547: POP
33548: POP
// end ;
33549: LD_VAR 0 3
33553: RET
// export function ScanBase ( side , base_area ) ; begin
33554: LD_INT 0
33556: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33557: LD_ADDR_VAR 0 3
33561: PUSH
33562: LD_VAR 0 2
33566: PPUSH
33567: LD_INT 81
33569: PUSH
33570: LD_VAR 0 1
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PPUSH
33579: CALL_OW 70
33583: ST_TO_ADDR
// end ;
33584: LD_VAR 0 3
33588: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33589: LD_INT 0
33591: PPUSH
33592: PPUSH
33593: PPUSH
33594: PPUSH
// result := false ;
33595: LD_ADDR_VAR 0 2
33599: PUSH
33600: LD_INT 0
33602: ST_TO_ADDR
// side := GetSide ( unit ) ;
33603: LD_ADDR_VAR 0 3
33607: PUSH
33608: LD_VAR 0 1
33612: PPUSH
33613: CALL_OW 255
33617: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33618: LD_ADDR_VAR 0 4
33622: PUSH
33623: LD_VAR 0 1
33627: PPUSH
33628: CALL_OW 248
33632: ST_TO_ADDR
// case nat of 1 :
33633: LD_VAR 0 4
33637: PUSH
33638: LD_INT 1
33640: DOUBLE
33641: EQUAL
33642: IFTRUE 33646
33644: GO 33657
33646: POP
// tech := tech_lassight ; 2 :
33647: LD_ADDR_VAR 0 5
33651: PUSH
33652: LD_INT 12
33654: ST_TO_ADDR
33655: GO 33696
33657: LD_INT 2
33659: DOUBLE
33660: EQUAL
33661: IFTRUE 33665
33663: GO 33676
33665: POP
// tech := tech_mortar ; 3 :
33666: LD_ADDR_VAR 0 5
33670: PUSH
33671: LD_INT 41
33673: ST_TO_ADDR
33674: GO 33696
33676: LD_INT 3
33678: DOUBLE
33679: EQUAL
33680: IFTRUE 33684
33682: GO 33695
33684: POP
// tech := tech_bazooka ; end ;
33685: LD_ADDR_VAR 0 5
33689: PUSH
33690: LD_INT 44
33692: ST_TO_ADDR
33693: GO 33696
33695: POP
// if Researched ( side , tech ) then
33696: LD_VAR 0 3
33700: PPUSH
33701: LD_VAR 0 5
33705: PPUSH
33706: CALL_OW 325
33710: IFFALSE 33737
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33712: LD_ADDR_VAR 0 2
33716: PUSH
33717: LD_INT 5
33719: PUSH
33720: LD_INT 8
33722: PUSH
33723: LD_INT 9
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: LIST
33730: PUSH
33731: LD_VAR 0 4
33735: ARRAY
33736: ST_TO_ADDR
// end ;
33737: LD_VAR 0 2
33741: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33742: LD_INT 0
33744: PPUSH
33745: PPUSH
33746: PPUSH
// if not mines then
33747: LD_VAR 0 2
33751: NOT
33752: IFFALSE 33756
// exit ;
33754: GO 33900
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33756: LD_ADDR_VAR 0 5
33760: PUSH
33761: LD_INT 81
33763: PUSH
33764: LD_VAR 0 1
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 3
33775: PUSH
33776: LD_INT 21
33778: PUSH
33779: LD_INT 3
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PPUSH
33794: CALL_OW 69
33798: ST_TO_ADDR
// for i in mines do
33799: LD_ADDR_VAR 0 4
33803: PUSH
33804: LD_VAR 0 2
33808: PUSH
33809: FOR_IN
33810: IFFALSE 33898
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33812: LD_VAR 0 4
33816: PUSH
33817: LD_INT 1
33819: ARRAY
33820: PPUSH
33821: LD_VAR 0 4
33825: PUSH
33826: LD_INT 2
33828: ARRAY
33829: PPUSH
33830: CALL_OW 458
33834: NOT
33835: IFFALSE 33839
// continue ;
33837: GO 33809
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33839: LD_VAR 0 4
33843: PUSH
33844: LD_INT 1
33846: ARRAY
33847: PPUSH
33848: LD_VAR 0 4
33852: PUSH
33853: LD_INT 2
33855: ARRAY
33856: PPUSH
33857: CALL_OW 428
33861: PUSH
33862: LD_VAR 0 5
33866: IN
33867: IFFALSE 33896
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33869: LD_VAR 0 4
33873: PUSH
33874: LD_INT 1
33876: ARRAY
33877: PPUSH
33878: LD_VAR 0 4
33882: PUSH
33883: LD_INT 2
33885: ARRAY
33886: PPUSH
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL_OW 456
// end ;
33896: GO 33809
33898: POP
33899: POP
// end ;
33900: LD_VAR 0 3
33904: RET
// export function Count ( array ) ; begin
33905: LD_INT 0
33907: PPUSH
// result := array + 0 ;
33908: LD_ADDR_VAR 0 2
33912: PUSH
33913: LD_VAR 0 1
33917: PUSH
33918: LD_INT 0
33920: PLUS
33921: ST_TO_ADDR
// end ;
33922: LD_VAR 0 2
33926: RET
// export function IsEmpty ( building ) ; begin
33927: LD_INT 0
33929: PPUSH
// if not building then
33930: LD_VAR 0 1
33934: NOT
33935: IFFALSE 33939
// exit ;
33937: GO 33982
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33939: LD_ADDR_VAR 0 2
33943: PUSH
33944: LD_VAR 0 1
33948: PUSH
33949: LD_INT 22
33951: PUSH
33952: LD_VAR 0 1
33956: PPUSH
33957: CALL_OW 255
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 58
33968: PUSH
33969: EMPTY
33970: LIST
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PPUSH
33976: CALL_OW 69
33980: IN
33981: ST_TO_ADDR
// end ;
33982: LD_VAR 0 2
33986: RET
// export function IsNotFull ( building ) ; var places ; begin
33987: LD_INT 0
33989: PPUSH
33990: PPUSH
// if not building then
33991: LD_VAR 0 1
33995: NOT
33996: IFFALSE 34000
// exit ;
33998: GO 34028
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34000: LD_ADDR_VAR 0 2
34004: PUSH
34005: LD_VAR 0 1
34009: PPUSH
34010: LD_INT 3
34012: PUSH
34013: LD_INT 62
34015: PUSH
34016: EMPTY
34017: LIST
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PPUSH
34023: CALL_OW 72
34027: ST_TO_ADDR
// end ;
34028: LD_VAR 0 2
34032: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34033: LD_INT 0
34035: PPUSH
34036: PPUSH
34037: PPUSH
34038: PPUSH
// tmp := [ ] ;
34039: LD_ADDR_VAR 0 3
34043: PUSH
34044: EMPTY
34045: ST_TO_ADDR
// list := [ ] ;
34046: LD_ADDR_VAR 0 5
34050: PUSH
34051: EMPTY
34052: ST_TO_ADDR
// for i = 16 to 25 do
34053: LD_ADDR_VAR 0 4
34057: PUSH
34058: DOUBLE
34059: LD_INT 16
34061: DEC
34062: ST_TO_ADDR
34063: LD_INT 25
34065: PUSH
34066: FOR_TO
34067: IFFALSE 34140
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34069: LD_ADDR_VAR 0 3
34073: PUSH
34074: LD_VAR 0 3
34078: PUSH
34079: LD_INT 22
34081: PUSH
34082: LD_VAR 0 1
34086: PPUSH
34087: CALL_OW 255
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 91
34098: PUSH
34099: LD_VAR 0 1
34103: PUSH
34104: LD_INT 6
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 30
34114: PUSH
34115: LD_VAR 0 4
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: LIST
34128: PUSH
34129: EMPTY
34130: LIST
34131: PPUSH
34132: CALL_OW 69
34136: ADD
34137: ST_TO_ADDR
34138: GO 34066
34140: POP
34141: POP
// for i = 1 to tmp do
34142: LD_ADDR_VAR 0 4
34146: PUSH
34147: DOUBLE
34148: LD_INT 1
34150: DEC
34151: ST_TO_ADDR
34152: LD_VAR 0 3
34156: PUSH
34157: FOR_TO
34158: IFFALSE 34246
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34160: LD_ADDR_VAR 0 5
34164: PUSH
34165: LD_VAR 0 5
34169: PUSH
34170: LD_VAR 0 3
34174: PUSH
34175: LD_VAR 0 4
34179: ARRAY
34180: PPUSH
34181: CALL_OW 266
34185: PUSH
34186: LD_VAR 0 3
34190: PUSH
34191: LD_VAR 0 4
34195: ARRAY
34196: PPUSH
34197: CALL_OW 250
34201: PUSH
34202: LD_VAR 0 3
34206: PUSH
34207: LD_VAR 0 4
34211: ARRAY
34212: PPUSH
34213: CALL_OW 251
34217: PUSH
34218: LD_VAR 0 3
34222: PUSH
34223: LD_VAR 0 4
34227: ARRAY
34228: PPUSH
34229: CALL_OW 254
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: PUSH
34240: EMPTY
34241: LIST
34242: ADD
34243: ST_TO_ADDR
34244: GO 34157
34246: POP
34247: POP
// result := list ;
34248: LD_ADDR_VAR 0 2
34252: PUSH
34253: LD_VAR 0 5
34257: ST_TO_ADDR
// end ;
34258: LD_VAR 0 2
34262: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34263: LD_INT 0
34265: PPUSH
34266: PPUSH
34267: PPUSH
34268: PPUSH
34269: PPUSH
34270: PPUSH
34271: PPUSH
// if not factory then
34272: LD_VAR 0 1
34276: NOT
34277: IFFALSE 34281
// exit ;
34279: GO 34874
// if control = control_apeman then
34281: LD_VAR 0 4
34285: PUSH
34286: LD_INT 5
34288: EQUAL
34289: IFFALSE 34398
// begin tmp := UnitsInside ( factory ) ;
34291: LD_ADDR_VAR 0 8
34295: PUSH
34296: LD_VAR 0 1
34300: PPUSH
34301: CALL_OW 313
34305: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34306: LD_VAR 0 8
34310: PPUSH
34311: LD_INT 25
34313: PUSH
34314: LD_INT 12
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PPUSH
34321: CALL_OW 72
34325: NOT
34326: IFFALSE 34336
// control := control_manual ;
34328: LD_ADDR_VAR 0 4
34332: PUSH
34333: LD_INT 1
34335: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34336: LD_ADDR_VAR 0 8
34340: PUSH
34341: LD_VAR 0 1
34345: PPUSH
34346: CALL 34033 0 1
34350: ST_TO_ADDR
// if tmp then
34351: LD_VAR 0 8
34355: IFFALSE 34398
// begin for i in tmp do
34357: LD_ADDR_VAR 0 7
34361: PUSH
34362: LD_VAR 0 8
34366: PUSH
34367: FOR_IN
34368: IFFALSE 34396
// if i [ 1 ] = b_ext_radio then
34370: LD_VAR 0 7
34374: PUSH
34375: LD_INT 1
34377: ARRAY
34378: PUSH
34379: LD_INT 22
34381: EQUAL
34382: IFFALSE 34394
// begin control := control_remote ;
34384: LD_ADDR_VAR 0 4
34388: PUSH
34389: LD_INT 2
34391: ST_TO_ADDR
// break ;
34392: GO 34396
// end ;
34394: GO 34367
34396: POP
34397: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34398: LD_VAR 0 1
34402: PPUSH
34403: LD_VAR 0 2
34407: PPUSH
34408: LD_VAR 0 3
34412: PPUSH
34413: LD_VAR 0 4
34417: PPUSH
34418: LD_VAR 0 5
34422: PPUSH
34423: CALL_OW 448
34427: IFFALSE 34462
// begin result := [ chassis , engine , control , weapon ] ;
34429: LD_ADDR_VAR 0 6
34433: PUSH
34434: LD_VAR 0 2
34438: PUSH
34439: LD_VAR 0 3
34443: PUSH
34444: LD_VAR 0 4
34448: PUSH
34449: LD_VAR 0 5
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: ST_TO_ADDR
// exit ;
34460: GO 34874
// end ; _chassis := AvailableChassisList ( factory ) ;
34462: LD_ADDR_VAR 0 9
34466: PUSH
34467: LD_VAR 0 1
34471: PPUSH
34472: CALL_OW 475
34476: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34477: LD_ADDR_VAR 0 11
34481: PUSH
34482: LD_VAR 0 1
34486: PPUSH
34487: CALL_OW 476
34491: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34492: LD_ADDR_VAR 0 12
34496: PUSH
34497: LD_VAR 0 1
34501: PPUSH
34502: CALL_OW 477
34506: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34507: LD_ADDR_VAR 0 10
34511: PUSH
34512: LD_VAR 0 1
34516: PPUSH
34517: CALL_OW 478
34521: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34522: LD_VAR 0 9
34526: NOT
34527: PUSH
34528: LD_VAR 0 11
34532: NOT
34533: OR
34534: PUSH
34535: LD_VAR 0 12
34539: NOT
34540: OR
34541: PUSH
34542: LD_VAR 0 10
34546: NOT
34547: OR
34548: IFFALSE 34583
// begin result := [ chassis , engine , control , weapon ] ;
34550: LD_ADDR_VAR 0 6
34554: PUSH
34555: LD_VAR 0 2
34559: PUSH
34560: LD_VAR 0 3
34564: PUSH
34565: LD_VAR 0 4
34569: PUSH
34570: LD_VAR 0 5
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: ST_TO_ADDR
// exit ;
34581: GO 34874
// end ; if not chassis in _chassis then
34583: LD_VAR 0 2
34587: PUSH
34588: LD_VAR 0 9
34592: IN
34593: NOT
34594: IFFALSE 34620
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34596: LD_ADDR_VAR 0 2
34600: PUSH
34601: LD_VAR 0 9
34605: PUSH
34606: LD_INT 1
34608: PPUSH
34609: LD_VAR 0 9
34613: PPUSH
34614: CALL_OW 12
34618: ARRAY
34619: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34620: LD_VAR 0 2
34624: PPUSH
34625: LD_VAR 0 3
34629: PPUSH
34630: CALL 34879 0 2
34634: NOT
34635: IFFALSE 34694
// repeat engine := _engine [ 1 ] ;
34637: LD_ADDR_VAR 0 3
34641: PUSH
34642: LD_VAR 0 11
34646: PUSH
34647: LD_INT 1
34649: ARRAY
34650: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34651: LD_ADDR_VAR 0 11
34655: PUSH
34656: LD_VAR 0 11
34660: PPUSH
34661: LD_INT 1
34663: PPUSH
34664: CALL_OW 3
34668: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34669: LD_VAR 0 2
34673: PPUSH
34674: LD_VAR 0 3
34678: PPUSH
34679: CALL 34879 0 2
34683: PUSH
34684: LD_VAR 0 11
34688: PUSH
34689: EMPTY
34690: EQUAL
34691: OR
34692: IFFALSE 34637
// if not control in _control then
34694: LD_VAR 0 4
34698: PUSH
34699: LD_VAR 0 12
34703: IN
34704: NOT
34705: IFFALSE 34731
// control := _control [ rand ( 1 , _control ) ] ;
34707: LD_ADDR_VAR 0 4
34711: PUSH
34712: LD_VAR 0 12
34716: PUSH
34717: LD_INT 1
34719: PPUSH
34720: LD_VAR 0 12
34724: PPUSH
34725: CALL_OW 12
34729: ARRAY
34730: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34731: LD_VAR 0 2
34735: PPUSH
34736: LD_VAR 0 5
34740: PPUSH
34741: CALL 35099 0 2
34745: NOT
34746: IFFALSE 34805
// repeat weapon := _weapon [ 1 ] ;
34748: LD_ADDR_VAR 0 5
34752: PUSH
34753: LD_VAR 0 10
34757: PUSH
34758: LD_INT 1
34760: ARRAY
34761: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34762: LD_ADDR_VAR 0 10
34766: PUSH
34767: LD_VAR 0 10
34771: PPUSH
34772: LD_INT 1
34774: PPUSH
34775: CALL_OW 3
34779: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34780: LD_VAR 0 2
34784: PPUSH
34785: LD_VAR 0 5
34789: PPUSH
34790: CALL 35099 0 2
34794: PUSH
34795: LD_VAR 0 10
34799: PUSH
34800: EMPTY
34801: EQUAL
34802: OR
34803: IFFALSE 34748
// result := [ ] ;
34805: LD_ADDR_VAR 0 6
34809: PUSH
34810: EMPTY
34811: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34812: LD_VAR 0 1
34816: PPUSH
34817: LD_VAR 0 2
34821: PPUSH
34822: LD_VAR 0 3
34826: PPUSH
34827: LD_VAR 0 4
34831: PPUSH
34832: LD_VAR 0 5
34836: PPUSH
34837: CALL_OW 448
34841: IFFALSE 34874
// result := [ chassis , engine , control , weapon ] ;
34843: LD_ADDR_VAR 0 6
34847: PUSH
34848: LD_VAR 0 2
34852: PUSH
34853: LD_VAR 0 3
34857: PUSH
34858: LD_VAR 0 4
34862: PUSH
34863: LD_VAR 0 5
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: ST_TO_ADDR
// end ;
34874: LD_VAR 0 6
34878: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34879: LD_INT 0
34881: PPUSH
// if not chassis or not engine then
34882: LD_VAR 0 1
34886: NOT
34887: PUSH
34888: LD_VAR 0 2
34892: NOT
34893: OR
34894: IFFALSE 34898
// exit ;
34896: GO 35094
// case engine of engine_solar :
34898: LD_VAR 0 2
34902: PUSH
34903: LD_INT 2
34905: DOUBLE
34906: EQUAL
34907: IFTRUE 34911
34909: GO 34949
34911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34912: LD_ADDR_VAR 0 3
34916: PUSH
34917: LD_INT 11
34919: PUSH
34920: LD_INT 12
34922: PUSH
34923: LD_INT 13
34925: PUSH
34926: LD_INT 14
34928: PUSH
34929: LD_INT 1
34931: PUSH
34932: LD_INT 2
34934: PUSH
34935: LD_INT 3
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: ST_TO_ADDR
34947: GO 35078
34949: LD_INT 1
34951: DOUBLE
34952: EQUAL
34953: IFTRUE 34957
34955: GO 35019
34957: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34958: LD_ADDR_VAR 0 3
34962: PUSH
34963: LD_INT 11
34965: PUSH
34966: LD_INT 12
34968: PUSH
34969: LD_INT 13
34971: PUSH
34972: LD_INT 14
34974: PUSH
34975: LD_INT 1
34977: PUSH
34978: LD_INT 2
34980: PUSH
34981: LD_INT 3
34983: PUSH
34984: LD_INT 4
34986: PUSH
34987: LD_INT 5
34989: PUSH
34990: LD_INT 21
34992: PUSH
34993: LD_INT 23
34995: PUSH
34996: LD_INT 22
34998: PUSH
34999: LD_INT 24
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: ST_TO_ADDR
35017: GO 35078
35019: LD_INT 3
35021: DOUBLE
35022: EQUAL
35023: IFTRUE 35027
35025: GO 35077
35027: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35028: LD_ADDR_VAR 0 3
35032: PUSH
35033: LD_INT 13
35035: PUSH
35036: LD_INT 14
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: LD_INT 3
35044: PUSH
35045: LD_INT 4
35047: PUSH
35048: LD_INT 5
35050: PUSH
35051: LD_INT 21
35053: PUSH
35054: LD_INT 22
35056: PUSH
35057: LD_INT 23
35059: PUSH
35060: LD_INT 24
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: ST_TO_ADDR
35075: GO 35078
35077: POP
// result := ( chassis in result ) ;
35078: LD_ADDR_VAR 0 3
35082: PUSH
35083: LD_VAR 0 1
35087: PUSH
35088: LD_VAR 0 3
35092: IN
35093: ST_TO_ADDR
// end ;
35094: LD_VAR 0 3
35098: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35099: LD_INT 0
35101: PPUSH
// if not chassis or not weapon then
35102: LD_VAR 0 1
35106: NOT
35107: PUSH
35108: LD_VAR 0 2
35112: NOT
35113: OR
35114: IFFALSE 35118
// exit ;
35116: GO 36178
// case weapon of us_machine_gun :
35118: LD_VAR 0 2
35122: PUSH
35123: LD_INT 2
35125: DOUBLE
35126: EQUAL
35127: IFTRUE 35131
35129: GO 35161
35131: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35132: LD_ADDR_VAR 0 3
35136: PUSH
35137: LD_INT 1
35139: PUSH
35140: LD_INT 2
35142: PUSH
35143: LD_INT 3
35145: PUSH
35146: LD_INT 4
35148: PUSH
35149: LD_INT 5
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: ST_TO_ADDR
35159: GO 36162
35161: LD_INT 3
35163: DOUBLE
35164: EQUAL
35165: IFTRUE 35169
35167: GO 35199
35169: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35170: LD_ADDR_VAR 0 3
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: LD_INT 2
35180: PUSH
35181: LD_INT 3
35183: PUSH
35184: LD_INT 4
35186: PUSH
35187: LD_INT 5
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: ST_TO_ADDR
35197: GO 36162
35199: LD_INT 11
35201: DOUBLE
35202: EQUAL
35203: IFTRUE 35207
35205: GO 35237
35207: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35208: LD_ADDR_VAR 0 3
35212: PUSH
35213: LD_INT 1
35215: PUSH
35216: LD_INT 2
35218: PUSH
35219: LD_INT 3
35221: PUSH
35222: LD_INT 4
35224: PUSH
35225: LD_INT 5
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: ST_TO_ADDR
35235: GO 36162
35237: LD_INT 4
35239: DOUBLE
35240: EQUAL
35241: IFTRUE 35245
35243: GO 35271
35245: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35246: LD_ADDR_VAR 0 3
35250: PUSH
35251: LD_INT 2
35253: PUSH
35254: LD_INT 3
35256: PUSH
35257: LD_INT 4
35259: PUSH
35260: LD_INT 5
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: ST_TO_ADDR
35269: GO 36162
35271: LD_INT 5
35273: DOUBLE
35274: EQUAL
35275: IFTRUE 35279
35277: GO 35305
35279: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35280: LD_ADDR_VAR 0 3
35284: PUSH
35285: LD_INT 2
35287: PUSH
35288: LD_INT 3
35290: PUSH
35291: LD_INT 4
35293: PUSH
35294: LD_INT 5
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: ST_TO_ADDR
35303: GO 36162
35305: LD_INT 9
35307: DOUBLE
35308: EQUAL
35309: IFTRUE 35313
35311: GO 35339
35313: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35314: LD_ADDR_VAR 0 3
35318: PUSH
35319: LD_INT 2
35321: PUSH
35322: LD_INT 3
35324: PUSH
35325: LD_INT 4
35327: PUSH
35328: LD_INT 5
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: ST_TO_ADDR
35337: GO 36162
35339: LD_INT 7
35341: DOUBLE
35342: EQUAL
35343: IFTRUE 35347
35345: GO 35373
35347: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35348: LD_ADDR_VAR 0 3
35352: PUSH
35353: LD_INT 2
35355: PUSH
35356: LD_INT 3
35358: PUSH
35359: LD_INT 4
35361: PUSH
35362: LD_INT 5
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: ST_TO_ADDR
35371: GO 36162
35373: LD_INT 12
35375: DOUBLE
35376: EQUAL
35377: IFTRUE 35381
35379: GO 35407
35381: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35382: LD_ADDR_VAR 0 3
35386: PUSH
35387: LD_INT 2
35389: PUSH
35390: LD_INT 3
35392: PUSH
35393: LD_INT 4
35395: PUSH
35396: LD_INT 5
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: ST_TO_ADDR
35405: GO 36162
35407: LD_INT 13
35409: DOUBLE
35410: EQUAL
35411: IFTRUE 35415
35413: GO 35441
35415: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35416: LD_ADDR_VAR 0 3
35420: PUSH
35421: LD_INT 2
35423: PUSH
35424: LD_INT 3
35426: PUSH
35427: LD_INT 4
35429: PUSH
35430: LD_INT 5
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: ST_TO_ADDR
35439: GO 36162
35441: LD_INT 14
35443: DOUBLE
35444: EQUAL
35445: IFTRUE 35449
35447: GO 35467
35449: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35450: LD_ADDR_VAR 0 3
35454: PUSH
35455: LD_INT 4
35457: PUSH
35458: LD_INT 5
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: ST_TO_ADDR
35465: GO 36162
35467: LD_INT 6
35469: DOUBLE
35470: EQUAL
35471: IFTRUE 35475
35473: GO 35493
35475: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35476: LD_ADDR_VAR 0 3
35480: PUSH
35481: LD_INT 4
35483: PUSH
35484: LD_INT 5
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: ST_TO_ADDR
35491: GO 36162
35493: LD_INT 10
35495: DOUBLE
35496: EQUAL
35497: IFTRUE 35501
35499: GO 35519
35501: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35502: LD_ADDR_VAR 0 3
35506: PUSH
35507: LD_INT 4
35509: PUSH
35510: LD_INT 5
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: ST_TO_ADDR
35517: GO 36162
35519: LD_INT 22
35521: DOUBLE
35522: EQUAL
35523: IFTRUE 35527
35525: GO 35553
35527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35528: LD_ADDR_VAR 0 3
35532: PUSH
35533: LD_INT 11
35535: PUSH
35536: LD_INT 12
35538: PUSH
35539: LD_INT 13
35541: PUSH
35542: LD_INT 14
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: ST_TO_ADDR
35551: GO 36162
35553: LD_INT 23
35555: DOUBLE
35556: EQUAL
35557: IFTRUE 35561
35559: GO 35587
35561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35562: LD_ADDR_VAR 0 3
35566: PUSH
35567: LD_INT 11
35569: PUSH
35570: LD_INT 12
35572: PUSH
35573: LD_INT 13
35575: PUSH
35576: LD_INT 14
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: ST_TO_ADDR
35585: GO 36162
35587: LD_INT 24
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35595
35593: GO 35621
35595: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35596: LD_ADDR_VAR 0 3
35600: PUSH
35601: LD_INT 11
35603: PUSH
35604: LD_INT 12
35606: PUSH
35607: LD_INT 13
35609: PUSH
35610: LD_INT 14
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: ST_TO_ADDR
35619: GO 36162
35621: LD_INT 30
35623: DOUBLE
35624: EQUAL
35625: IFTRUE 35629
35627: GO 35655
35629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35630: LD_ADDR_VAR 0 3
35634: PUSH
35635: LD_INT 11
35637: PUSH
35638: LD_INT 12
35640: PUSH
35641: LD_INT 13
35643: PUSH
35644: LD_INT 14
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: ST_TO_ADDR
35653: GO 36162
35655: LD_INT 25
35657: DOUBLE
35658: EQUAL
35659: IFTRUE 35663
35661: GO 35681
35663: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35664: LD_ADDR_VAR 0 3
35668: PUSH
35669: LD_INT 13
35671: PUSH
35672: LD_INT 14
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: ST_TO_ADDR
35679: GO 36162
35681: LD_INT 27
35683: DOUBLE
35684: EQUAL
35685: IFTRUE 35689
35687: GO 35707
35689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35690: LD_ADDR_VAR 0 3
35694: PUSH
35695: LD_INT 13
35697: PUSH
35698: LD_INT 14
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: ST_TO_ADDR
35705: GO 36162
35707: LD_INT 92
35709: DOUBLE
35710: EQUAL
35711: IFTRUE 35715
35713: GO 35741
35715: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35716: LD_ADDR_VAR 0 3
35720: PUSH
35721: LD_INT 11
35723: PUSH
35724: LD_INT 12
35726: PUSH
35727: LD_INT 13
35729: PUSH
35730: LD_INT 14
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: ST_TO_ADDR
35739: GO 36162
35741: LD_INT 28
35743: DOUBLE
35744: EQUAL
35745: IFTRUE 35749
35747: GO 35767
35749: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35750: LD_ADDR_VAR 0 3
35754: PUSH
35755: LD_INT 13
35757: PUSH
35758: LD_INT 14
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: ST_TO_ADDR
35765: GO 36162
35767: LD_INT 29
35769: DOUBLE
35770: EQUAL
35771: IFTRUE 35775
35773: GO 35793
35775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35776: LD_ADDR_VAR 0 3
35780: PUSH
35781: LD_INT 13
35783: PUSH
35784: LD_INT 14
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: ST_TO_ADDR
35791: GO 36162
35793: LD_INT 31
35795: DOUBLE
35796: EQUAL
35797: IFTRUE 35801
35799: GO 35819
35801: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35802: LD_ADDR_VAR 0 3
35806: PUSH
35807: LD_INT 13
35809: PUSH
35810: LD_INT 14
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: ST_TO_ADDR
35817: GO 36162
35819: LD_INT 26
35821: DOUBLE
35822: EQUAL
35823: IFTRUE 35827
35825: GO 35845
35827: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35828: LD_ADDR_VAR 0 3
35832: PUSH
35833: LD_INT 13
35835: PUSH
35836: LD_INT 14
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: ST_TO_ADDR
35843: GO 36162
35845: LD_INT 42
35847: DOUBLE
35848: EQUAL
35849: IFTRUE 35853
35851: GO 35879
35853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35854: LD_ADDR_VAR 0 3
35858: PUSH
35859: LD_INT 21
35861: PUSH
35862: LD_INT 22
35864: PUSH
35865: LD_INT 23
35867: PUSH
35868: LD_INT 24
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: ST_TO_ADDR
35877: GO 36162
35879: LD_INT 43
35881: DOUBLE
35882: EQUAL
35883: IFTRUE 35887
35885: GO 35913
35887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35888: LD_ADDR_VAR 0 3
35892: PUSH
35893: LD_INT 21
35895: PUSH
35896: LD_INT 22
35898: PUSH
35899: LD_INT 23
35901: PUSH
35902: LD_INT 24
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: ST_TO_ADDR
35911: GO 36162
35913: LD_INT 44
35915: DOUBLE
35916: EQUAL
35917: IFTRUE 35921
35919: GO 35947
35921: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35922: LD_ADDR_VAR 0 3
35926: PUSH
35927: LD_INT 21
35929: PUSH
35930: LD_INT 22
35932: PUSH
35933: LD_INT 23
35935: PUSH
35936: LD_INT 24
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: ST_TO_ADDR
35945: GO 36162
35947: LD_INT 45
35949: DOUBLE
35950: EQUAL
35951: IFTRUE 35955
35953: GO 35981
35955: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35956: LD_ADDR_VAR 0 3
35960: PUSH
35961: LD_INT 21
35963: PUSH
35964: LD_INT 22
35966: PUSH
35967: LD_INT 23
35969: PUSH
35970: LD_INT 24
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: ST_TO_ADDR
35979: GO 36162
35981: LD_INT 49
35983: DOUBLE
35984: EQUAL
35985: IFTRUE 35989
35987: GO 36015
35989: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35990: LD_ADDR_VAR 0 3
35994: PUSH
35995: LD_INT 21
35997: PUSH
35998: LD_INT 22
36000: PUSH
36001: LD_INT 23
36003: PUSH
36004: LD_INT 24
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: ST_TO_ADDR
36013: GO 36162
36015: LD_INT 51
36017: DOUBLE
36018: EQUAL
36019: IFTRUE 36023
36021: GO 36049
36023: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36024: LD_ADDR_VAR 0 3
36028: PUSH
36029: LD_INT 21
36031: PUSH
36032: LD_INT 22
36034: PUSH
36035: LD_INT 23
36037: PUSH
36038: LD_INT 24
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: ST_TO_ADDR
36047: GO 36162
36049: LD_INT 52
36051: DOUBLE
36052: EQUAL
36053: IFTRUE 36057
36055: GO 36083
36057: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36058: LD_ADDR_VAR 0 3
36062: PUSH
36063: LD_INT 21
36065: PUSH
36066: LD_INT 22
36068: PUSH
36069: LD_INT 23
36071: PUSH
36072: LD_INT 24
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: ST_TO_ADDR
36081: GO 36162
36083: LD_INT 53
36085: DOUBLE
36086: EQUAL
36087: IFTRUE 36091
36089: GO 36109
36091: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36092: LD_ADDR_VAR 0 3
36096: PUSH
36097: LD_INT 23
36099: PUSH
36100: LD_INT 24
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: ST_TO_ADDR
36107: GO 36162
36109: LD_INT 46
36111: DOUBLE
36112: EQUAL
36113: IFTRUE 36117
36115: GO 36135
36117: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36118: LD_ADDR_VAR 0 3
36122: PUSH
36123: LD_INT 23
36125: PUSH
36126: LD_INT 24
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: ST_TO_ADDR
36133: GO 36162
36135: LD_INT 47
36137: DOUBLE
36138: EQUAL
36139: IFTRUE 36143
36141: GO 36161
36143: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36144: LD_ADDR_VAR 0 3
36148: PUSH
36149: LD_INT 23
36151: PUSH
36152: LD_INT 24
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: ST_TO_ADDR
36159: GO 36162
36161: POP
// result := ( chassis in result ) ;
36162: LD_ADDR_VAR 0 3
36166: PUSH
36167: LD_VAR 0 1
36171: PUSH
36172: LD_VAR 0 3
36176: IN
36177: ST_TO_ADDR
// end ;
36178: LD_VAR 0 3
36182: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36183: LD_INT 0
36185: PPUSH
36186: PPUSH
36187: PPUSH
36188: PPUSH
36189: PPUSH
36190: PPUSH
36191: PPUSH
// result := array ;
36192: LD_ADDR_VAR 0 5
36196: PUSH
36197: LD_VAR 0 1
36201: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36202: LD_VAR 0 1
36206: NOT
36207: PUSH
36208: LD_VAR 0 2
36212: NOT
36213: OR
36214: PUSH
36215: LD_VAR 0 3
36219: NOT
36220: OR
36221: PUSH
36222: LD_VAR 0 2
36226: PUSH
36227: LD_VAR 0 1
36231: GREATER
36232: OR
36233: PUSH
36234: LD_VAR 0 3
36238: PUSH
36239: LD_VAR 0 1
36243: GREATER
36244: OR
36245: IFFALSE 36249
// exit ;
36247: GO 36545
// if direction then
36249: LD_VAR 0 4
36253: IFFALSE 36317
// begin d := 1 ;
36255: LD_ADDR_VAR 0 9
36259: PUSH
36260: LD_INT 1
36262: ST_TO_ADDR
// if i_from > i_to then
36263: LD_VAR 0 2
36267: PUSH
36268: LD_VAR 0 3
36272: GREATER
36273: IFFALSE 36299
// length := ( array - i_from ) + i_to else
36275: LD_ADDR_VAR 0 11
36279: PUSH
36280: LD_VAR 0 1
36284: PUSH
36285: LD_VAR 0 2
36289: MINUS
36290: PUSH
36291: LD_VAR 0 3
36295: PLUS
36296: ST_TO_ADDR
36297: GO 36315
// length := i_to - i_from ;
36299: LD_ADDR_VAR 0 11
36303: PUSH
36304: LD_VAR 0 3
36308: PUSH
36309: LD_VAR 0 2
36313: MINUS
36314: ST_TO_ADDR
// end else
36315: GO 36378
// begin d := - 1 ;
36317: LD_ADDR_VAR 0 9
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: ST_TO_ADDR
// if i_from > i_to then
36326: LD_VAR 0 2
36330: PUSH
36331: LD_VAR 0 3
36335: GREATER
36336: IFFALSE 36356
// length := i_from - i_to else
36338: LD_ADDR_VAR 0 11
36342: PUSH
36343: LD_VAR 0 2
36347: PUSH
36348: LD_VAR 0 3
36352: MINUS
36353: ST_TO_ADDR
36354: GO 36378
// length := ( array - i_to ) + i_from ;
36356: LD_ADDR_VAR 0 11
36360: PUSH
36361: LD_VAR 0 1
36365: PUSH
36366: LD_VAR 0 3
36370: MINUS
36371: PUSH
36372: LD_VAR 0 2
36376: PLUS
36377: ST_TO_ADDR
// end ; if not length then
36378: LD_VAR 0 11
36382: NOT
36383: IFFALSE 36387
// exit ;
36385: GO 36545
// tmp := array ;
36387: LD_ADDR_VAR 0 10
36391: PUSH
36392: LD_VAR 0 1
36396: ST_TO_ADDR
// for i = 1 to length do
36397: LD_ADDR_VAR 0 6
36401: PUSH
36402: DOUBLE
36403: LD_INT 1
36405: DEC
36406: ST_TO_ADDR
36407: LD_VAR 0 11
36411: PUSH
36412: FOR_TO
36413: IFFALSE 36533
// begin for j = 1 to array do
36415: LD_ADDR_VAR 0 7
36419: PUSH
36420: DOUBLE
36421: LD_INT 1
36423: DEC
36424: ST_TO_ADDR
36425: LD_VAR 0 1
36429: PUSH
36430: FOR_TO
36431: IFFALSE 36519
// begin k := j + d ;
36433: LD_ADDR_VAR 0 8
36437: PUSH
36438: LD_VAR 0 7
36442: PUSH
36443: LD_VAR 0 9
36447: PLUS
36448: ST_TO_ADDR
// if k > array then
36449: LD_VAR 0 8
36453: PUSH
36454: LD_VAR 0 1
36458: GREATER
36459: IFFALSE 36469
// k := 1 ;
36461: LD_ADDR_VAR 0 8
36465: PUSH
36466: LD_INT 1
36468: ST_TO_ADDR
// if not k then
36469: LD_VAR 0 8
36473: NOT
36474: IFFALSE 36486
// k := array ;
36476: LD_ADDR_VAR 0 8
36480: PUSH
36481: LD_VAR 0 1
36485: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36486: LD_ADDR_VAR 0 10
36490: PUSH
36491: LD_VAR 0 10
36495: PPUSH
36496: LD_VAR 0 8
36500: PPUSH
36501: LD_VAR 0 1
36505: PUSH
36506: LD_VAR 0 7
36510: ARRAY
36511: PPUSH
36512: CALL_OW 1
36516: ST_TO_ADDR
// end ;
36517: GO 36430
36519: POP
36520: POP
// array := tmp ;
36521: LD_ADDR_VAR 0 1
36525: PUSH
36526: LD_VAR 0 10
36530: ST_TO_ADDR
// end ;
36531: GO 36412
36533: POP
36534: POP
// result := array ;
36535: LD_ADDR_VAR 0 5
36539: PUSH
36540: LD_VAR 0 1
36544: ST_TO_ADDR
// end ;
36545: LD_VAR 0 5
36549: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36550: LD_INT 0
36552: PPUSH
36553: PPUSH
// result := 0 ;
36554: LD_ADDR_VAR 0 3
36558: PUSH
36559: LD_INT 0
36561: ST_TO_ADDR
// if not array or not value in array then
36562: LD_VAR 0 1
36566: NOT
36567: PUSH
36568: LD_VAR 0 2
36572: PUSH
36573: LD_VAR 0 1
36577: IN
36578: NOT
36579: OR
36580: IFFALSE 36584
// exit ;
36582: GO 36638
// for i = 1 to array do
36584: LD_ADDR_VAR 0 4
36588: PUSH
36589: DOUBLE
36590: LD_INT 1
36592: DEC
36593: ST_TO_ADDR
36594: LD_VAR 0 1
36598: PUSH
36599: FOR_TO
36600: IFFALSE 36636
// if value = array [ i ] then
36602: LD_VAR 0 2
36606: PUSH
36607: LD_VAR 0 1
36611: PUSH
36612: LD_VAR 0 4
36616: ARRAY
36617: EQUAL
36618: IFFALSE 36634
// begin result := i ;
36620: LD_ADDR_VAR 0 3
36624: PUSH
36625: LD_VAR 0 4
36629: ST_TO_ADDR
// exit ;
36630: POP
36631: POP
36632: GO 36638
// end ;
36634: GO 36599
36636: POP
36637: POP
// end ;
36638: LD_VAR 0 3
36642: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36643: LD_INT 0
36645: PPUSH
// vc_chassis := chassis ;
36646: LD_ADDR_OWVAR 37
36650: PUSH
36651: LD_VAR 0 1
36655: ST_TO_ADDR
// vc_engine := engine ;
36656: LD_ADDR_OWVAR 39
36660: PUSH
36661: LD_VAR 0 2
36665: ST_TO_ADDR
// vc_control := control ;
36666: LD_ADDR_OWVAR 38
36670: PUSH
36671: LD_VAR 0 3
36675: ST_TO_ADDR
// vc_weapon := weapon ;
36676: LD_ADDR_OWVAR 40
36680: PUSH
36681: LD_VAR 0 4
36685: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36686: LD_ADDR_OWVAR 41
36690: PUSH
36691: LD_VAR 0 5
36695: ST_TO_ADDR
// end ;
36696: LD_VAR 0 6
36700: RET
// export function WantPlant ( unit ) ; var task ; begin
36701: LD_INT 0
36703: PPUSH
36704: PPUSH
// result := false ;
36705: LD_ADDR_VAR 0 2
36709: PUSH
36710: LD_INT 0
36712: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36713: LD_ADDR_VAR 0 3
36717: PUSH
36718: LD_VAR 0 1
36722: PPUSH
36723: CALL_OW 437
36727: ST_TO_ADDR
// if task then
36728: LD_VAR 0 3
36732: IFFALSE 36760
// if task [ 1 ] [ 1 ] = p then
36734: LD_VAR 0 3
36738: PUSH
36739: LD_INT 1
36741: ARRAY
36742: PUSH
36743: LD_INT 1
36745: ARRAY
36746: PUSH
36747: LD_STRING p
36749: EQUAL
36750: IFFALSE 36760
// result := true ;
36752: LD_ADDR_VAR 0 2
36756: PUSH
36757: LD_INT 1
36759: ST_TO_ADDR
// end ;
36760: LD_VAR 0 2
36764: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36765: LD_INT 0
36767: PPUSH
36768: PPUSH
36769: PPUSH
36770: PPUSH
// if pos < 1 then
36771: LD_VAR 0 2
36775: PUSH
36776: LD_INT 1
36778: LESS
36779: IFFALSE 36783
// exit ;
36781: GO 37086
// if pos = 1 then
36783: LD_VAR 0 2
36787: PUSH
36788: LD_INT 1
36790: EQUAL
36791: IFFALSE 36824
// result := Replace ( arr , pos [ 1 ] , value ) else
36793: LD_ADDR_VAR 0 4
36797: PUSH
36798: LD_VAR 0 1
36802: PPUSH
36803: LD_VAR 0 2
36807: PUSH
36808: LD_INT 1
36810: ARRAY
36811: PPUSH
36812: LD_VAR 0 3
36816: PPUSH
36817: CALL_OW 1
36821: ST_TO_ADDR
36822: GO 37086
// begin tmp := arr ;
36824: LD_ADDR_VAR 0 6
36828: PUSH
36829: LD_VAR 0 1
36833: ST_TO_ADDR
// s_arr := [ tmp ] ;
36834: LD_ADDR_VAR 0 7
36838: PUSH
36839: LD_VAR 0 6
36843: PUSH
36844: EMPTY
36845: LIST
36846: ST_TO_ADDR
// for i = 1 to pos - 1 do
36847: LD_ADDR_VAR 0 5
36851: PUSH
36852: DOUBLE
36853: LD_INT 1
36855: DEC
36856: ST_TO_ADDR
36857: LD_VAR 0 2
36861: PUSH
36862: LD_INT 1
36864: MINUS
36865: PUSH
36866: FOR_TO
36867: IFFALSE 36912
// begin tmp := tmp [ pos [ i ] ] ;
36869: LD_ADDR_VAR 0 6
36873: PUSH
36874: LD_VAR 0 6
36878: PUSH
36879: LD_VAR 0 2
36883: PUSH
36884: LD_VAR 0 5
36888: ARRAY
36889: ARRAY
36890: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36891: LD_ADDR_VAR 0 7
36895: PUSH
36896: LD_VAR 0 7
36900: PUSH
36901: LD_VAR 0 6
36905: PUSH
36906: EMPTY
36907: LIST
36908: ADD
36909: ST_TO_ADDR
// end ;
36910: GO 36866
36912: POP
36913: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36914: LD_ADDR_VAR 0 6
36918: PUSH
36919: LD_VAR 0 6
36923: PPUSH
36924: LD_VAR 0 2
36928: PUSH
36929: LD_VAR 0 2
36933: ARRAY
36934: PPUSH
36935: LD_VAR 0 3
36939: PPUSH
36940: CALL_OW 1
36944: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36945: LD_ADDR_VAR 0 7
36949: PUSH
36950: LD_VAR 0 7
36954: PPUSH
36955: LD_VAR 0 7
36959: PPUSH
36960: LD_VAR 0 6
36964: PPUSH
36965: CALL_OW 1
36969: ST_TO_ADDR
// for i = s_arr downto 2 do
36970: LD_ADDR_VAR 0 5
36974: PUSH
36975: DOUBLE
36976: LD_VAR 0 7
36980: INC
36981: ST_TO_ADDR
36982: LD_INT 2
36984: PUSH
36985: FOR_DOWNTO
36986: IFFALSE 37070
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36988: LD_ADDR_VAR 0 6
36992: PUSH
36993: LD_VAR 0 7
36997: PUSH
36998: LD_VAR 0 5
37002: PUSH
37003: LD_INT 1
37005: MINUS
37006: ARRAY
37007: PPUSH
37008: LD_VAR 0 2
37012: PUSH
37013: LD_VAR 0 5
37017: PUSH
37018: LD_INT 1
37020: MINUS
37021: ARRAY
37022: PPUSH
37023: LD_VAR 0 7
37027: PUSH
37028: LD_VAR 0 5
37032: ARRAY
37033: PPUSH
37034: CALL_OW 1
37038: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37039: LD_ADDR_VAR 0 7
37043: PUSH
37044: LD_VAR 0 7
37048: PPUSH
37049: LD_VAR 0 5
37053: PUSH
37054: LD_INT 1
37056: MINUS
37057: PPUSH
37058: LD_VAR 0 6
37062: PPUSH
37063: CALL_OW 1
37067: ST_TO_ADDR
// end ;
37068: GO 36985
37070: POP
37071: POP
// result := s_arr [ 1 ] ;
37072: LD_ADDR_VAR 0 4
37076: PUSH
37077: LD_VAR 0 7
37081: PUSH
37082: LD_INT 1
37084: ARRAY
37085: ST_TO_ADDR
// end ; end ;
37086: LD_VAR 0 4
37090: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37091: LD_INT 0
37093: PPUSH
37094: PPUSH
// if not list then
37095: LD_VAR 0 1
37099: NOT
37100: IFFALSE 37104
// exit ;
37102: GO 37195
// i := list [ pos1 ] ;
37104: LD_ADDR_VAR 0 5
37108: PUSH
37109: LD_VAR 0 1
37113: PUSH
37114: LD_VAR 0 2
37118: ARRAY
37119: ST_TO_ADDR
// if not i then
37120: LD_VAR 0 5
37124: NOT
37125: IFFALSE 37129
// exit ;
37127: GO 37195
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37129: LD_ADDR_VAR 0 1
37133: PUSH
37134: LD_VAR 0 1
37138: PPUSH
37139: LD_VAR 0 2
37143: PPUSH
37144: LD_VAR 0 1
37148: PUSH
37149: LD_VAR 0 3
37153: ARRAY
37154: PPUSH
37155: CALL_OW 1
37159: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37160: LD_ADDR_VAR 0 1
37164: PUSH
37165: LD_VAR 0 1
37169: PPUSH
37170: LD_VAR 0 3
37174: PPUSH
37175: LD_VAR 0 5
37179: PPUSH
37180: CALL_OW 1
37184: ST_TO_ADDR
// result := list ;
37185: LD_ADDR_VAR 0 4
37189: PUSH
37190: LD_VAR 0 1
37194: ST_TO_ADDR
// end ;
37195: LD_VAR 0 4
37199: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37200: LD_INT 0
37202: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37203: LD_ADDR_VAR 0 5
37207: PUSH
37208: LD_VAR 0 1
37212: PPUSH
37213: CALL_OW 250
37217: PPUSH
37218: LD_VAR 0 1
37222: PPUSH
37223: CALL_OW 251
37227: PPUSH
37228: LD_VAR 0 2
37232: PPUSH
37233: LD_VAR 0 3
37237: PPUSH
37238: LD_VAR 0 4
37242: PPUSH
37243: CALL 37621 0 5
37247: ST_TO_ADDR
// end ;
37248: LD_VAR 0 5
37252: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37253: LD_INT 0
37255: PPUSH
37256: PPUSH
37257: PPUSH
37258: PPUSH
// if not list or not unit then
37259: LD_VAR 0 2
37263: NOT
37264: PUSH
37265: LD_VAR 0 1
37269: NOT
37270: OR
37271: IFFALSE 37275
// exit ;
37273: GO 37616
// result := [ ] ;
37275: LD_ADDR_VAR 0 5
37279: PUSH
37280: EMPTY
37281: ST_TO_ADDR
// for i in list do
37282: LD_ADDR_VAR 0 6
37286: PUSH
37287: LD_VAR 0 2
37291: PUSH
37292: FOR_IN
37293: IFFALSE 37511
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37295: LD_ADDR_VAR 0 8
37299: PUSH
37300: LD_VAR 0 1
37304: PPUSH
37305: LD_VAR 0 6
37309: PUSH
37310: LD_INT 1
37312: ARRAY
37313: PPUSH
37314: LD_VAR 0 6
37318: PUSH
37319: LD_INT 2
37321: ARRAY
37322: PPUSH
37323: CALL_OW 297
37327: ST_TO_ADDR
// if not Count ( result ) then
37328: LD_VAR 0 5
37332: PPUSH
37333: CALL 33905 0 1
37337: NOT
37338: IFFALSE 37371
// begin result := Join ( result , [ i , tmp ] ) ;
37340: LD_ADDR_VAR 0 5
37344: PUSH
37345: LD_VAR 0 5
37349: PPUSH
37350: LD_VAR 0 6
37354: PUSH
37355: LD_VAR 0 8
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PPUSH
37364: CALL 69494 0 2
37368: ST_TO_ADDR
// continue ;
37369: GO 37292
// end ; if result [ result ] [ 2 ] <= tmp then
37371: LD_VAR 0 5
37375: PUSH
37376: LD_VAR 0 5
37380: ARRAY
37381: PUSH
37382: LD_INT 2
37384: ARRAY
37385: PUSH
37386: LD_VAR 0 8
37390: LESSEQUAL
37391: IFFALSE 37424
// result := Join ( result , [ i , tmp ] ) else
37393: LD_ADDR_VAR 0 5
37397: PUSH
37398: LD_VAR 0 5
37402: PPUSH
37403: LD_VAR 0 6
37407: PUSH
37408: LD_VAR 0 8
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PPUSH
37417: CALL 69494 0 2
37421: ST_TO_ADDR
37422: GO 37509
// begin for j := 1 to Count ( result ) do
37424: LD_ADDR_VAR 0 7
37428: PUSH
37429: DOUBLE
37430: LD_INT 1
37432: DEC
37433: ST_TO_ADDR
37434: LD_VAR 0 5
37438: PPUSH
37439: CALL 33905 0 1
37443: PUSH
37444: FOR_TO
37445: IFFALSE 37507
// begin if tmp < result [ j ] [ 2 ] then
37447: LD_VAR 0 8
37451: PUSH
37452: LD_VAR 0 5
37456: PUSH
37457: LD_VAR 0 7
37461: ARRAY
37462: PUSH
37463: LD_INT 2
37465: ARRAY
37466: LESS
37467: IFFALSE 37505
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37469: LD_ADDR_VAR 0 5
37473: PUSH
37474: LD_VAR 0 5
37478: PPUSH
37479: LD_VAR 0 7
37483: PPUSH
37484: LD_VAR 0 6
37488: PUSH
37489: LD_VAR 0 8
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PPUSH
37498: CALL_OW 2
37502: ST_TO_ADDR
// break ;
37503: GO 37507
// end ; end ;
37505: GO 37444
37507: POP
37508: POP
// end ; end ;
37509: GO 37292
37511: POP
37512: POP
// if result and not asc then
37513: LD_VAR 0 5
37517: PUSH
37518: LD_VAR 0 3
37522: NOT
37523: AND
37524: IFFALSE 37541
// result := ReverseArray ( result ) ;
37526: LD_ADDR_VAR 0 5
37530: PUSH
37531: LD_VAR 0 5
37535: PPUSH
37536: CALL 64781 0 1
37540: ST_TO_ADDR
// tmp := [ ] ;
37541: LD_ADDR_VAR 0 8
37545: PUSH
37546: EMPTY
37547: ST_TO_ADDR
// if mode then
37548: LD_VAR 0 4
37552: IFFALSE 37616
// begin for i := 1 to result do
37554: LD_ADDR_VAR 0 6
37558: PUSH
37559: DOUBLE
37560: LD_INT 1
37562: DEC
37563: ST_TO_ADDR
37564: LD_VAR 0 5
37568: PUSH
37569: FOR_TO
37570: IFFALSE 37604
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37572: LD_ADDR_VAR 0 8
37576: PUSH
37577: LD_VAR 0 8
37581: PPUSH
37582: LD_VAR 0 5
37586: PUSH
37587: LD_VAR 0 6
37591: ARRAY
37592: PUSH
37593: LD_INT 1
37595: ARRAY
37596: PPUSH
37597: CALL 69494 0 2
37601: ST_TO_ADDR
37602: GO 37569
37604: POP
37605: POP
// result := tmp ;
37606: LD_ADDR_VAR 0 5
37610: PUSH
37611: LD_VAR 0 8
37615: ST_TO_ADDR
// end ; end ;
37616: LD_VAR 0 5
37620: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37621: LD_INT 0
37623: PPUSH
37624: PPUSH
37625: PPUSH
37626: PPUSH
// if not list then
37627: LD_VAR 0 3
37631: NOT
37632: IFFALSE 37636
// exit ;
37634: GO 38024
// result := [ ] ;
37636: LD_ADDR_VAR 0 6
37640: PUSH
37641: EMPTY
37642: ST_TO_ADDR
// for i in list do
37643: LD_ADDR_VAR 0 7
37647: PUSH
37648: LD_VAR 0 3
37652: PUSH
37653: FOR_IN
37654: IFFALSE 37856
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37656: LD_ADDR_VAR 0 9
37660: PUSH
37661: LD_VAR 0 7
37665: PPUSH
37666: LD_VAR 0 1
37670: PPUSH
37671: LD_VAR 0 2
37675: PPUSH
37676: CALL_OW 297
37680: ST_TO_ADDR
// if not result then
37681: LD_VAR 0 6
37685: NOT
37686: IFFALSE 37712
// result := [ [ i , tmp ] ] else
37688: LD_ADDR_VAR 0 6
37692: PUSH
37693: LD_VAR 0 7
37697: PUSH
37698: LD_VAR 0 9
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: EMPTY
37708: LIST
37709: ST_TO_ADDR
37710: GO 37854
// begin if result [ result ] [ 2 ] < tmp then
37712: LD_VAR 0 6
37716: PUSH
37717: LD_VAR 0 6
37721: ARRAY
37722: PUSH
37723: LD_INT 2
37725: ARRAY
37726: PUSH
37727: LD_VAR 0 9
37731: LESS
37732: IFFALSE 37774
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37734: LD_ADDR_VAR 0 6
37738: PUSH
37739: LD_VAR 0 6
37743: PPUSH
37744: LD_VAR 0 6
37748: PUSH
37749: LD_INT 1
37751: PLUS
37752: PPUSH
37753: LD_VAR 0 7
37757: PUSH
37758: LD_VAR 0 9
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PPUSH
37767: CALL_OW 2
37771: ST_TO_ADDR
37772: GO 37854
// for j = 1 to result do
37774: LD_ADDR_VAR 0 8
37778: PUSH
37779: DOUBLE
37780: LD_INT 1
37782: DEC
37783: ST_TO_ADDR
37784: LD_VAR 0 6
37788: PUSH
37789: FOR_TO
37790: IFFALSE 37852
// begin if tmp < result [ j ] [ 2 ] then
37792: LD_VAR 0 9
37796: PUSH
37797: LD_VAR 0 6
37801: PUSH
37802: LD_VAR 0 8
37806: ARRAY
37807: PUSH
37808: LD_INT 2
37810: ARRAY
37811: LESS
37812: IFFALSE 37850
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37814: LD_ADDR_VAR 0 6
37818: PUSH
37819: LD_VAR 0 6
37823: PPUSH
37824: LD_VAR 0 8
37828: PPUSH
37829: LD_VAR 0 7
37833: PUSH
37834: LD_VAR 0 9
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PPUSH
37843: CALL_OW 2
37847: ST_TO_ADDR
// break ;
37848: GO 37852
// end ; end ;
37850: GO 37789
37852: POP
37853: POP
// end ; end ;
37854: GO 37653
37856: POP
37857: POP
// if result and not asc then
37858: LD_VAR 0 6
37862: PUSH
37863: LD_VAR 0 4
37867: NOT
37868: AND
37869: IFFALSE 37944
// begin tmp := result ;
37871: LD_ADDR_VAR 0 9
37875: PUSH
37876: LD_VAR 0 6
37880: ST_TO_ADDR
// for i = tmp downto 1 do
37881: LD_ADDR_VAR 0 7
37885: PUSH
37886: DOUBLE
37887: LD_VAR 0 9
37891: INC
37892: ST_TO_ADDR
37893: LD_INT 1
37895: PUSH
37896: FOR_DOWNTO
37897: IFFALSE 37942
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37899: LD_ADDR_VAR 0 6
37903: PUSH
37904: LD_VAR 0 6
37908: PPUSH
37909: LD_VAR 0 9
37913: PUSH
37914: LD_VAR 0 7
37918: MINUS
37919: PUSH
37920: LD_INT 1
37922: PLUS
37923: PPUSH
37924: LD_VAR 0 9
37928: PUSH
37929: LD_VAR 0 7
37933: ARRAY
37934: PPUSH
37935: CALL_OW 1
37939: ST_TO_ADDR
37940: GO 37896
37942: POP
37943: POP
// end ; tmp := [ ] ;
37944: LD_ADDR_VAR 0 9
37948: PUSH
37949: EMPTY
37950: ST_TO_ADDR
// if mode then
37951: LD_VAR 0 5
37955: IFFALSE 38024
// begin for i = 1 to result do
37957: LD_ADDR_VAR 0 7
37961: PUSH
37962: DOUBLE
37963: LD_INT 1
37965: DEC
37966: ST_TO_ADDR
37967: LD_VAR 0 6
37971: PUSH
37972: FOR_TO
37973: IFFALSE 38012
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37975: LD_ADDR_VAR 0 9
37979: PUSH
37980: LD_VAR 0 9
37984: PPUSH
37985: LD_VAR 0 7
37989: PPUSH
37990: LD_VAR 0 6
37994: PUSH
37995: LD_VAR 0 7
37999: ARRAY
38000: PUSH
38001: LD_INT 1
38003: ARRAY
38004: PPUSH
38005: CALL_OW 1
38009: ST_TO_ADDR
38010: GO 37972
38012: POP
38013: POP
// result := tmp ;
38014: LD_ADDR_VAR 0 6
38018: PUSH
38019: LD_VAR 0 9
38023: ST_TO_ADDR
// end ; end ;
38024: LD_VAR 0 6
38028: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38029: LD_INT 0
38031: PPUSH
38032: PPUSH
38033: PPUSH
38034: PPUSH
38035: PPUSH
38036: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38037: LD_ADDR_VAR 0 5
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: EMPTY
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: ST_TO_ADDR
// if not x or not y then
38059: LD_VAR 0 2
38063: NOT
38064: PUSH
38065: LD_VAR 0 3
38069: NOT
38070: OR
38071: IFFALSE 38075
// exit ;
38073: GO 39725
// if not range then
38075: LD_VAR 0 4
38079: NOT
38080: IFFALSE 38090
// range := 10 ;
38082: LD_ADDR_VAR 0 4
38086: PUSH
38087: LD_INT 10
38089: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38090: LD_ADDR_VAR 0 8
38094: PUSH
38095: LD_INT 81
38097: PUSH
38098: LD_VAR 0 1
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 92
38109: PUSH
38110: LD_VAR 0 2
38114: PUSH
38115: LD_VAR 0 3
38119: PUSH
38120: LD_VAR 0 4
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 3
38133: PUSH
38134: LD_INT 21
38136: PUSH
38137: LD_INT 3
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: LIST
38152: PPUSH
38153: CALL_OW 69
38157: ST_TO_ADDR
// if not tmp then
38158: LD_VAR 0 8
38162: NOT
38163: IFFALSE 38167
// exit ;
38165: GO 39725
// for i in tmp do
38167: LD_ADDR_VAR 0 6
38171: PUSH
38172: LD_VAR 0 8
38176: PUSH
38177: FOR_IN
38178: IFFALSE 39700
// begin points := [ 0 , 0 , 0 ] ;
38180: LD_ADDR_VAR 0 9
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: LIST
38198: ST_TO_ADDR
// bpoints := 1 ;
38199: LD_ADDR_VAR 0 10
38203: PUSH
38204: LD_INT 1
38206: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38207: LD_VAR 0 6
38211: PPUSH
38212: CALL_OW 247
38216: PUSH
38217: LD_INT 1
38219: DOUBLE
38220: EQUAL
38221: IFTRUE 38225
38223: GO 38803
38225: POP
// begin if GetClass ( i ) = 1 then
38226: LD_VAR 0 6
38230: PPUSH
38231: CALL_OW 257
38235: PUSH
38236: LD_INT 1
38238: EQUAL
38239: IFFALSE 38260
// points := [ 10 , 5 , 3 ] ;
38241: LD_ADDR_VAR 0 9
38245: PUSH
38246: LD_INT 10
38248: PUSH
38249: LD_INT 5
38251: PUSH
38252: LD_INT 3
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38260: LD_VAR 0 6
38264: PPUSH
38265: CALL_OW 257
38269: PUSH
38270: LD_INT 2
38272: PUSH
38273: LD_INT 3
38275: PUSH
38276: LD_INT 4
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: LIST
38283: IN
38284: IFFALSE 38305
// points := [ 3 , 2 , 1 ] ;
38286: LD_ADDR_VAR 0 9
38290: PUSH
38291: LD_INT 3
38293: PUSH
38294: LD_INT 2
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: LIST
38304: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38305: LD_VAR 0 6
38309: PPUSH
38310: CALL_OW 257
38314: PUSH
38315: LD_INT 5
38317: EQUAL
38318: IFFALSE 38339
// points := [ 130 , 5 , 2 ] ;
38320: LD_ADDR_VAR 0 9
38324: PUSH
38325: LD_INT 130
38327: PUSH
38328: LD_INT 5
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: LIST
38338: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38339: LD_VAR 0 6
38343: PPUSH
38344: CALL_OW 257
38348: PUSH
38349: LD_INT 8
38351: EQUAL
38352: IFFALSE 38373
// points := [ 35 , 35 , 30 ] ;
38354: LD_ADDR_VAR 0 9
38358: PUSH
38359: LD_INT 35
38361: PUSH
38362: LD_INT 35
38364: PUSH
38365: LD_INT 30
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: LIST
38372: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38373: LD_VAR 0 6
38377: PPUSH
38378: CALL_OW 257
38382: PUSH
38383: LD_INT 9
38385: EQUAL
38386: IFFALSE 38407
// points := [ 20 , 55 , 40 ] ;
38388: LD_ADDR_VAR 0 9
38392: PUSH
38393: LD_INT 20
38395: PUSH
38396: LD_INT 55
38398: PUSH
38399: LD_INT 40
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38407: LD_VAR 0 6
38411: PPUSH
38412: CALL_OW 257
38416: PUSH
38417: LD_INT 12
38419: PUSH
38420: LD_INT 16
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: IN
38427: IFFALSE 38448
// points := [ 5 , 3 , 2 ] ;
38429: LD_ADDR_VAR 0 9
38433: PUSH
38434: LD_INT 5
38436: PUSH
38437: LD_INT 3
38439: PUSH
38440: LD_INT 2
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: LIST
38447: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38448: LD_VAR 0 6
38452: PPUSH
38453: CALL_OW 257
38457: PUSH
38458: LD_INT 17
38460: EQUAL
38461: IFFALSE 38482
// points := [ 100 , 50 , 75 ] ;
38463: LD_ADDR_VAR 0 9
38467: PUSH
38468: LD_INT 100
38470: PUSH
38471: LD_INT 50
38473: PUSH
38474: LD_INT 75
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38482: LD_VAR 0 6
38486: PPUSH
38487: CALL_OW 257
38491: PUSH
38492: LD_INT 15
38494: EQUAL
38495: IFFALSE 38516
// points := [ 10 , 5 , 3 ] ;
38497: LD_ADDR_VAR 0 9
38501: PUSH
38502: LD_INT 10
38504: PUSH
38505: LD_INT 5
38507: PUSH
38508: LD_INT 3
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: LIST
38515: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38516: LD_VAR 0 6
38520: PPUSH
38521: CALL_OW 257
38525: PUSH
38526: LD_INT 14
38528: EQUAL
38529: IFFALSE 38550
// points := [ 10 , 0 , 0 ] ;
38531: LD_ADDR_VAR 0 9
38535: PUSH
38536: LD_INT 10
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: LIST
38549: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38550: LD_VAR 0 6
38554: PPUSH
38555: CALL_OW 257
38559: PUSH
38560: LD_INT 11
38562: EQUAL
38563: IFFALSE 38584
// points := [ 30 , 10 , 5 ] ;
38565: LD_ADDR_VAR 0 9
38569: PUSH
38570: LD_INT 30
38572: PUSH
38573: LD_INT 10
38575: PUSH
38576: LD_INT 5
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: LIST
38583: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38584: LD_VAR 0 1
38588: PPUSH
38589: LD_INT 5
38591: PPUSH
38592: CALL_OW 321
38596: PUSH
38597: LD_INT 2
38599: EQUAL
38600: IFFALSE 38617
// bpoints := bpoints * 1.8 ;
38602: LD_ADDR_VAR 0 10
38606: PUSH
38607: LD_VAR 0 10
38611: PUSH
38612: LD_REAL  1.80000000000000E+0000
38615: MUL
38616: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38617: LD_VAR 0 6
38621: PPUSH
38622: CALL_OW 257
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: LD_INT 2
38632: PUSH
38633: LD_INT 3
38635: PUSH
38636: LD_INT 4
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: IN
38645: PUSH
38646: LD_VAR 0 1
38650: PPUSH
38651: LD_INT 51
38653: PPUSH
38654: CALL_OW 321
38658: PUSH
38659: LD_INT 2
38661: EQUAL
38662: AND
38663: IFFALSE 38680
// bpoints := bpoints * 1.2 ;
38665: LD_ADDR_VAR 0 10
38669: PUSH
38670: LD_VAR 0 10
38674: PUSH
38675: LD_REAL  1.20000000000000E+0000
38678: MUL
38679: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38680: LD_VAR 0 6
38684: PPUSH
38685: CALL_OW 257
38689: PUSH
38690: LD_INT 5
38692: PUSH
38693: LD_INT 7
38695: PUSH
38696: LD_INT 9
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: LIST
38703: IN
38704: PUSH
38705: LD_VAR 0 1
38709: PPUSH
38710: LD_INT 52
38712: PPUSH
38713: CALL_OW 321
38717: PUSH
38718: LD_INT 2
38720: EQUAL
38721: AND
38722: IFFALSE 38739
// bpoints := bpoints * 1.5 ;
38724: LD_ADDR_VAR 0 10
38728: PUSH
38729: LD_VAR 0 10
38733: PUSH
38734: LD_REAL  1.50000000000000E+0000
38737: MUL
38738: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38739: LD_VAR 0 1
38743: PPUSH
38744: LD_INT 66
38746: PPUSH
38747: CALL_OW 321
38751: PUSH
38752: LD_INT 2
38754: EQUAL
38755: IFFALSE 38772
// bpoints := bpoints * 1.1 ;
38757: LD_ADDR_VAR 0 10
38761: PUSH
38762: LD_VAR 0 10
38766: PUSH
38767: LD_REAL  1.10000000000000E+0000
38770: MUL
38771: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38772: LD_ADDR_VAR 0 10
38776: PUSH
38777: LD_VAR 0 10
38781: PUSH
38782: LD_VAR 0 6
38786: PPUSH
38787: LD_INT 1
38789: PPUSH
38790: CALL_OW 259
38794: PUSH
38795: LD_REAL  1.15000000000000E+0000
38798: MUL
38799: MUL
38800: ST_TO_ADDR
// end ; unit_vehicle :
38801: GO 39629
38803: LD_INT 2
38805: DOUBLE
38806: EQUAL
38807: IFTRUE 38811
38809: GO 39617
38811: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38812: LD_VAR 0 6
38816: PPUSH
38817: CALL_OW 264
38821: PUSH
38822: LD_INT 2
38824: PUSH
38825: LD_INT 42
38827: PUSH
38828: LD_INT 24
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: LIST
38835: IN
38836: IFFALSE 38857
// points := [ 25 , 5 , 3 ] ;
38838: LD_ADDR_VAR 0 9
38842: PUSH
38843: LD_INT 25
38845: PUSH
38846: LD_INT 5
38848: PUSH
38849: LD_INT 3
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: LIST
38856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38857: LD_VAR 0 6
38861: PPUSH
38862: CALL_OW 264
38866: PUSH
38867: LD_INT 4
38869: PUSH
38870: LD_INT 43
38872: PUSH
38873: LD_INT 25
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: IN
38881: IFFALSE 38902
// points := [ 40 , 15 , 5 ] ;
38883: LD_ADDR_VAR 0 9
38887: PUSH
38888: LD_INT 40
38890: PUSH
38891: LD_INT 15
38893: PUSH
38894: LD_INT 5
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: LIST
38901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38902: LD_VAR 0 6
38906: PPUSH
38907: CALL_OW 264
38911: PUSH
38912: LD_INT 3
38914: PUSH
38915: LD_INT 23
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: IN
38922: IFFALSE 38943
// points := [ 7 , 25 , 8 ] ;
38924: LD_ADDR_VAR 0 9
38928: PUSH
38929: LD_INT 7
38931: PUSH
38932: LD_INT 25
38934: PUSH
38935: LD_INT 8
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38943: LD_VAR 0 6
38947: PPUSH
38948: CALL_OW 264
38952: PUSH
38953: LD_INT 5
38955: PUSH
38956: LD_INT 27
38958: PUSH
38959: LD_INT 44
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: IN
38967: IFFALSE 38988
// points := [ 14 , 50 , 16 ] ;
38969: LD_ADDR_VAR 0 9
38973: PUSH
38974: LD_INT 14
38976: PUSH
38977: LD_INT 50
38979: PUSH
38980: LD_INT 16
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: LIST
38987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38988: LD_VAR 0 6
38992: PPUSH
38993: CALL_OW 264
38997: PUSH
38998: LD_INT 6
39000: PUSH
39001: LD_INT 46
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: IN
39008: IFFALSE 39029
// points := [ 32 , 120 , 70 ] ;
39010: LD_ADDR_VAR 0 9
39014: PUSH
39015: LD_INT 32
39017: PUSH
39018: LD_INT 120
39020: PUSH
39021: LD_INT 70
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: LIST
39028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39029: LD_VAR 0 6
39033: PPUSH
39034: CALL_OW 264
39038: PUSH
39039: LD_INT 7
39041: PUSH
39042: LD_INT 28
39044: PUSH
39045: LD_INT 45
39047: PUSH
39048: LD_INT 92
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: IN
39057: IFFALSE 39078
// points := [ 35 , 20 , 45 ] ;
39059: LD_ADDR_VAR 0 9
39063: PUSH
39064: LD_INT 35
39066: PUSH
39067: LD_INT 20
39069: PUSH
39070: LD_INT 45
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: LIST
39077: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39078: LD_VAR 0 6
39082: PPUSH
39083: CALL_OW 264
39087: PUSH
39088: LD_INT 47
39090: PUSH
39091: EMPTY
39092: LIST
39093: IN
39094: IFFALSE 39115
// points := [ 67 , 45 , 75 ] ;
39096: LD_ADDR_VAR 0 9
39100: PUSH
39101: LD_INT 67
39103: PUSH
39104: LD_INT 45
39106: PUSH
39107: LD_INT 75
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: LIST
39114: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39115: LD_VAR 0 6
39119: PPUSH
39120: CALL_OW 264
39124: PUSH
39125: LD_INT 26
39127: PUSH
39128: EMPTY
39129: LIST
39130: IN
39131: IFFALSE 39152
// points := [ 120 , 30 , 80 ] ;
39133: LD_ADDR_VAR 0 9
39137: PUSH
39138: LD_INT 120
39140: PUSH
39141: LD_INT 30
39143: PUSH
39144: LD_INT 80
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39152: LD_VAR 0 6
39156: PPUSH
39157: CALL_OW 264
39161: PUSH
39162: LD_INT 22
39164: PUSH
39165: EMPTY
39166: LIST
39167: IN
39168: IFFALSE 39189
// points := [ 40 , 1 , 1 ] ;
39170: LD_ADDR_VAR 0 9
39174: PUSH
39175: LD_INT 40
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: LIST
39188: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39189: LD_VAR 0 6
39193: PPUSH
39194: CALL_OW 264
39198: PUSH
39199: LD_INT 29
39201: PUSH
39202: EMPTY
39203: LIST
39204: IN
39205: IFFALSE 39226
// points := [ 70 , 200 , 400 ] ;
39207: LD_ADDR_VAR 0 9
39211: PUSH
39212: LD_INT 70
39214: PUSH
39215: LD_INT 200
39217: PUSH
39218: LD_INT 400
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39226: LD_VAR 0 6
39230: PPUSH
39231: CALL_OW 264
39235: PUSH
39236: LD_INT 14
39238: PUSH
39239: LD_INT 53
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: IN
39246: IFFALSE 39267
// points := [ 40 , 10 , 20 ] ;
39248: LD_ADDR_VAR 0 9
39252: PUSH
39253: LD_INT 40
39255: PUSH
39256: LD_INT 10
39258: PUSH
39259: LD_INT 20
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39267: LD_VAR 0 6
39271: PPUSH
39272: CALL_OW 264
39276: PUSH
39277: LD_INT 9
39279: PUSH
39280: EMPTY
39281: LIST
39282: IN
39283: IFFALSE 39304
// points := [ 5 , 70 , 20 ] ;
39285: LD_ADDR_VAR 0 9
39289: PUSH
39290: LD_INT 5
39292: PUSH
39293: LD_INT 70
39295: PUSH
39296: LD_INT 20
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: LIST
39303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39304: LD_VAR 0 6
39308: PPUSH
39309: CALL_OW 264
39313: PUSH
39314: LD_INT 10
39316: PUSH
39317: EMPTY
39318: LIST
39319: IN
39320: IFFALSE 39341
// points := [ 35 , 110 , 70 ] ;
39322: LD_ADDR_VAR 0 9
39326: PUSH
39327: LD_INT 35
39329: PUSH
39330: LD_INT 110
39332: PUSH
39333: LD_INT 70
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: LIST
39340: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39341: LD_VAR 0 6
39345: PPUSH
39346: CALL_OW 265
39350: PUSH
39351: LD_INT 25
39353: EQUAL
39354: IFFALSE 39375
// points := [ 80 , 65 , 100 ] ;
39356: LD_ADDR_VAR 0 9
39360: PUSH
39361: LD_INT 80
39363: PUSH
39364: LD_INT 65
39366: PUSH
39367: LD_INT 100
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: LIST
39374: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39375: LD_VAR 0 6
39379: PPUSH
39380: CALL_OW 263
39384: PUSH
39385: LD_INT 1
39387: EQUAL
39388: IFFALSE 39423
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39390: LD_ADDR_VAR 0 10
39394: PUSH
39395: LD_VAR 0 10
39399: PUSH
39400: LD_VAR 0 6
39404: PPUSH
39405: CALL_OW 311
39409: PPUSH
39410: LD_INT 3
39412: PPUSH
39413: CALL_OW 259
39417: PUSH
39418: LD_INT 4
39420: MUL
39421: MUL
39422: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39423: LD_VAR 0 6
39427: PPUSH
39428: CALL_OW 263
39432: PUSH
39433: LD_INT 2
39435: EQUAL
39436: IFFALSE 39487
// begin j := IsControledBy ( i ) ;
39438: LD_ADDR_VAR 0 7
39442: PUSH
39443: LD_VAR 0 6
39447: PPUSH
39448: CALL_OW 312
39452: ST_TO_ADDR
// if j then
39453: LD_VAR 0 7
39457: IFFALSE 39487
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39459: LD_ADDR_VAR 0 10
39463: PUSH
39464: LD_VAR 0 10
39468: PUSH
39469: LD_VAR 0 7
39473: PPUSH
39474: LD_INT 3
39476: PPUSH
39477: CALL_OW 259
39481: PUSH
39482: LD_INT 3
39484: MUL
39485: MUL
39486: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39487: LD_VAR 0 6
39491: PPUSH
39492: CALL_OW 264
39496: PUSH
39497: LD_INT 5
39499: PUSH
39500: LD_INT 6
39502: PUSH
39503: LD_INT 46
39505: PUSH
39506: LD_INT 44
39508: PUSH
39509: LD_INT 47
39511: PUSH
39512: LD_INT 45
39514: PUSH
39515: LD_INT 28
39517: PUSH
39518: LD_INT 7
39520: PUSH
39521: LD_INT 27
39523: PUSH
39524: LD_INT 29
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: IN
39539: PUSH
39540: LD_VAR 0 1
39544: PPUSH
39545: LD_INT 52
39547: PPUSH
39548: CALL_OW 321
39552: PUSH
39553: LD_INT 2
39555: EQUAL
39556: AND
39557: IFFALSE 39574
// bpoints := bpoints * 1.2 ;
39559: LD_ADDR_VAR 0 10
39563: PUSH
39564: LD_VAR 0 10
39568: PUSH
39569: LD_REAL  1.20000000000000E+0000
39572: MUL
39573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39574: LD_VAR 0 6
39578: PPUSH
39579: CALL_OW 264
39583: PUSH
39584: LD_INT 6
39586: PUSH
39587: LD_INT 46
39589: PUSH
39590: LD_INT 47
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: LIST
39597: IN
39598: IFFALSE 39615
// bpoints := bpoints * 1.2 ;
39600: LD_ADDR_VAR 0 10
39604: PUSH
39605: LD_VAR 0 10
39609: PUSH
39610: LD_REAL  1.20000000000000E+0000
39613: MUL
39614: ST_TO_ADDR
// end ; unit_building :
39615: GO 39629
39617: LD_INT 3
39619: DOUBLE
39620: EQUAL
39621: IFTRUE 39625
39623: GO 39628
39625: POP
// ; end ;
39626: GO 39629
39628: POP
// for j = 1 to 3 do
39629: LD_ADDR_VAR 0 7
39633: PUSH
39634: DOUBLE
39635: LD_INT 1
39637: DEC
39638: ST_TO_ADDR
39639: LD_INT 3
39641: PUSH
39642: FOR_TO
39643: IFFALSE 39696
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39645: LD_ADDR_VAR 0 5
39649: PUSH
39650: LD_VAR 0 5
39654: PPUSH
39655: LD_VAR 0 7
39659: PPUSH
39660: LD_VAR 0 5
39664: PUSH
39665: LD_VAR 0 7
39669: ARRAY
39670: PUSH
39671: LD_VAR 0 9
39675: PUSH
39676: LD_VAR 0 7
39680: ARRAY
39681: PUSH
39682: LD_VAR 0 10
39686: MUL
39687: PLUS
39688: PPUSH
39689: CALL_OW 1
39693: ST_TO_ADDR
39694: GO 39642
39696: POP
39697: POP
// end ;
39698: GO 38177
39700: POP
39701: POP
// result := Replace ( result , 4 , tmp ) ;
39702: LD_ADDR_VAR 0 5
39706: PUSH
39707: LD_VAR 0 5
39711: PPUSH
39712: LD_INT 4
39714: PPUSH
39715: LD_VAR 0 8
39719: PPUSH
39720: CALL_OW 1
39724: ST_TO_ADDR
// end ;
39725: LD_VAR 0 5
39729: RET
// export function DangerAtRange ( unit , range ) ; begin
39730: LD_INT 0
39732: PPUSH
// if not unit then
39733: LD_VAR 0 1
39737: NOT
39738: IFFALSE 39742
// exit ;
39740: GO 39787
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39742: LD_ADDR_VAR 0 3
39746: PUSH
39747: LD_VAR 0 1
39751: PPUSH
39752: CALL_OW 255
39756: PPUSH
39757: LD_VAR 0 1
39761: PPUSH
39762: CALL_OW 250
39766: PPUSH
39767: LD_VAR 0 1
39771: PPUSH
39772: CALL_OW 251
39776: PPUSH
39777: LD_VAR 0 2
39781: PPUSH
39782: CALL 38029 0 4
39786: ST_TO_ADDR
// end ;
39787: LD_VAR 0 3
39791: RET
// export function DangerInArea ( side , area ) ; begin
39792: LD_INT 0
39794: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39795: LD_ADDR_VAR 0 3
39799: PUSH
39800: LD_VAR 0 2
39804: PPUSH
39805: LD_INT 81
39807: PUSH
39808: LD_VAR 0 1
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PPUSH
39817: CALL_OW 70
39821: ST_TO_ADDR
// end ;
39822: LD_VAR 0 3
39826: RET
// export function IsExtension ( b ) ; begin
39827: LD_INT 0
39829: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39830: LD_ADDR_VAR 0 2
39834: PUSH
39835: LD_VAR 0 1
39839: PUSH
39840: LD_INT 23
39842: PUSH
39843: LD_INT 20
39845: PUSH
39846: LD_INT 22
39848: PUSH
39849: LD_INT 17
39851: PUSH
39852: LD_INT 24
39854: PUSH
39855: LD_INT 21
39857: PUSH
39858: LD_INT 19
39860: PUSH
39861: LD_INT 16
39863: PUSH
39864: LD_INT 25
39866: PUSH
39867: LD_INT 18
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: IN
39882: ST_TO_ADDR
// end ;
39883: LD_VAR 0 2
39887: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39888: LD_INT 0
39890: PPUSH
39891: PPUSH
39892: PPUSH
// result := [ ] ;
39893: LD_ADDR_VAR 0 4
39897: PUSH
39898: EMPTY
39899: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39900: LD_ADDR_VAR 0 5
39904: PUSH
39905: LD_VAR 0 2
39909: PPUSH
39910: LD_INT 21
39912: PUSH
39913: LD_INT 3
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PPUSH
39920: CALL_OW 70
39924: ST_TO_ADDR
// if not tmp then
39925: LD_VAR 0 5
39929: NOT
39930: IFFALSE 39934
// exit ;
39932: GO 39998
// if checkLink then
39934: LD_VAR 0 3
39938: IFFALSE 39988
// begin for i in tmp do
39940: LD_ADDR_VAR 0 6
39944: PUSH
39945: LD_VAR 0 5
39949: PUSH
39950: FOR_IN
39951: IFFALSE 39986
// if GetBase ( i ) <> base then
39953: LD_VAR 0 6
39957: PPUSH
39958: CALL_OW 274
39962: PUSH
39963: LD_VAR 0 1
39967: NONEQUAL
39968: IFFALSE 39984
// ComLinkToBase ( base , i ) ;
39970: LD_VAR 0 1
39974: PPUSH
39975: LD_VAR 0 6
39979: PPUSH
39980: CALL_OW 169
39984: GO 39950
39986: POP
39987: POP
// end ; result := tmp ;
39988: LD_ADDR_VAR 0 4
39992: PUSH
39993: LD_VAR 0 5
39997: ST_TO_ADDR
// end ;
39998: LD_VAR 0 4
40002: RET
// export function ComComplete ( units , b ) ; var i ; begin
40003: LD_INT 0
40005: PPUSH
40006: PPUSH
// if not units then
40007: LD_VAR 0 1
40011: NOT
40012: IFFALSE 40016
// exit ;
40014: GO 40106
// for i in units do
40016: LD_ADDR_VAR 0 4
40020: PUSH
40021: LD_VAR 0 1
40025: PUSH
40026: FOR_IN
40027: IFFALSE 40104
// if BuildingStatus ( b ) = bs_build then
40029: LD_VAR 0 2
40033: PPUSH
40034: CALL_OW 461
40038: PUSH
40039: LD_INT 1
40041: EQUAL
40042: IFFALSE 40102
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40044: LD_VAR 0 4
40048: PPUSH
40049: LD_STRING h
40051: PUSH
40052: LD_VAR 0 2
40056: PPUSH
40057: CALL_OW 250
40061: PUSH
40062: LD_VAR 0 2
40066: PPUSH
40067: CALL_OW 251
40071: PUSH
40072: LD_VAR 0 2
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: PUSH
40095: EMPTY
40096: LIST
40097: PPUSH
40098: CALL_OW 446
40102: GO 40026
40104: POP
40105: POP
// end ;
40106: LD_VAR 0 3
40110: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40111: LD_INT 0
40113: PPUSH
40114: PPUSH
40115: PPUSH
40116: PPUSH
40117: PPUSH
40118: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40119: LD_VAR 0 1
40123: NOT
40124: PUSH
40125: LD_VAR 0 1
40129: PPUSH
40130: CALL_OW 263
40134: PUSH
40135: LD_INT 2
40137: NONEQUAL
40138: OR
40139: IFFALSE 40143
// exit ;
40141: GO 40459
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40143: LD_ADDR_VAR 0 6
40147: PUSH
40148: LD_INT 22
40150: PUSH
40151: LD_VAR 0 1
40155: PPUSH
40156: CALL_OW 255
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: LD_INT 30
40170: PUSH
40171: LD_INT 36
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 34
40180: PUSH
40181: LD_INT 31
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PPUSH
40197: CALL_OW 69
40201: ST_TO_ADDR
// if not tmp then
40202: LD_VAR 0 6
40206: NOT
40207: IFFALSE 40211
// exit ;
40209: GO 40459
// result := [ ] ;
40211: LD_ADDR_VAR 0 2
40215: PUSH
40216: EMPTY
40217: ST_TO_ADDR
// for i in tmp do
40218: LD_ADDR_VAR 0 3
40222: PUSH
40223: LD_VAR 0 6
40227: PUSH
40228: FOR_IN
40229: IFFALSE 40300
// begin t := UnitsInside ( i ) ;
40231: LD_ADDR_VAR 0 4
40235: PUSH
40236: LD_VAR 0 3
40240: PPUSH
40241: CALL_OW 313
40245: ST_TO_ADDR
// if t then
40246: LD_VAR 0 4
40250: IFFALSE 40298
// for j in t do
40252: LD_ADDR_VAR 0 7
40256: PUSH
40257: LD_VAR 0 4
40261: PUSH
40262: FOR_IN
40263: IFFALSE 40296
// result := Replace ( result , result + 1 , j ) ;
40265: LD_ADDR_VAR 0 2
40269: PUSH
40270: LD_VAR 0 2
40274: PPUSH
40275: LD_VAR 0 2
40279: PUSH
40280: LD_INT 1
40282: PLUS
40283: PPUSH
40284: LD_VAR 0 7
40288: PPUSH
40289: CALL_OW 1
40293: ST_TO_ADDR
40294: GO 40262
40296: POP
40297: POP
// end ;
40298: GO 40228
40300: POP
40301: POP
// if not result then
40302: LD_VAR 0 2
40306: NOT
40307: IFFALSE 40311
// exit ;
40309: GO 40459
// mech := result [ 1 ] ;
40311: LD_ADDR_VAR 0 5
40315: PUSH
40316: LD_VAR 0 2
40320: PUSH
40321: LD_INT 1
40323: ARRAY
40324: ST_TO_ADDR
// if result > 1 then
40325: LD_VAR 0 2
40329: PUSH
40330: LD_INT 1
40332: GREATER
40333: IFFALSE 40445
// begin for i = 2 to result do
40335: LD_ADDR_VAR 0 3
40339: PUSH
40340: DOUBLE
40341: LD_INT 2
40343: DEC
40344: ST_TO_ADDR
40345: LD_VAR 0 2
40349: PUSH
40350: FOR_TO
40351: IFFALSE 40443
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40353: LD_ADDR_VAR 0 4
40357: PUSH
40358: LD_VAR 0 2
40362: PUSH
40363: LD_VAR 0 3
40367: ARRAY
40368: PPUSH
40369: LD_INT 3
40371: PPUSH
40372: CALL_OW 259
40376: PUSH
40377: LD_VAR 0 2
40381: PUSH
40382: LD_VAR 0 3
40386: ARRAY
40387: PPUSH
40388: CALL_OW 432
40392: MINUS
40393: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40394: LD_VAR 0 4
40398: PUSH
40399: LD_VAR 0 5
40403: PPUSH
40404: LD_INT 3
40406: PPUSH
40407: CALL_OW 259
40411: PUSH
40412: LD_VAR 0 5
40416: PPUSH
40417: CALL_OW 432
40421: MINUS
40422: GREATEREQUAL
40423: IFFALSE 40441
// mech := result [ i ] ;
40425: LD_ADDR_VAR 0 5
40429: PUSH
40430: LD_VAR 0 2
40434: PUSH
40435: LD_VAR 0 3
40439: ARRAY
40440: ST_TO_ADDR
// end ;
40441: GO 40350
40443: POP
40444: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40445: LD_VAR 0 1
40449: PPUSH
40450: LD_VAR 0 5
40454: PPUSH
40455: CALL_OW 135
// end ;
40459: LD_VAR 0 2
40463: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40464: LD_INT 0
40466: PPUSH
40467: PPUSH
40468: PPUSH
40469: PPUSH
40470: PPUSH
40471: PPUSH
40472: PPUSH
40473: PPUSH
40474: PPUSH
40475: PPUSH
40476: PPUSH
40477: PPUSH
40478: PPUSH
// result := [ ] ;
40479: LD_ADDR_VAR 0 7
40483: PUSH
40484: EMPTY
40485: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40486: LD_VAR 0 1
40490: PPUSH
40491: CALL_OW 266
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: IN
40506: NOT
40507: IFFALSE 40511
// exit ;
40509: GO 42145
// if name then
40511: LD_VAR 0 3
40515: IFFALSE 40531
// SetBName ( base_dep , name ) ;
40517: LD_VAR 0 1
40521: PPUSH
40522: LD_VAR 0 3
40526: PPUSH
40527: CALL_OW 500
// base := GetBase ( base_dep ) ;
40531: LD_ADDR_VAR 0 15
40535: PUSH
40536: LD_VAR 0 1
40540: PPUSH
40541: CALL_OW 274
40545: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40546: LD_ADDR_VAR 0 16
40550: PUSH
40551: LD_VAR 0 1
40555: PPUSH
40556: CALL_OW 255
40560: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40561: LD_ADDR_VAR 0 17
40565: PUSH
40566: LD_VAR 0 1
40570: PPUSH
40571: CALL_OW 248
40575: ST_TO_ADDR
// if sources then
40576: LD_VAR 0 5
40580: IFFALSE 40627
// for i = 1 to 3 do
40582: LD_ADDR_VAR 0 8
40586: PUSH
40587: DOUBLE
40588: LD_INT 1
40590: DEC
40591: ST_TO_ADDR
40592: LD_INT 3
40594: PUSH
40595: FOR_TO
40596: IFFALSE 40625
// AddResourceType ( base , i , sources [ i ] ) ;
40598: LD_VAR 0 15
40602: PPUSH
40603: LD_VAR 0 8
40607: PPUSH
40608: LD_VAR 0 5
40612: PUSH
40613: LD_VAR 0 8
40617: ARRAY
40618: PPUSH
40619: CALL_OW 276
40623: GO 40595
40625: POP
40626: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40627: LD_ADDR_VAR 0 18
40631: PUSH
40632: LD_VAR 0 15
40636: PPUSH
40637: LD_VAR 0 2
40641: PPUSH
40642: LD_INT 1
40644: PPUSH
40645: CALL 39888 0 3
40649: ST_TO_ADDR
// InitHc ;
40650: CALL_OW 19
// InitUc ;
40654: CALL_OW 18
// uc_side := side ;
40658: LD_ADDR_OWVAR 20
40662: PUSH
40663: LD_VAR 0 16
40667: ST_TO_ADDR
// uc_nation := nation ;
40668: LD_ADDR_OWVAR 21
40672: PUSH
40673: LD_VAR 0 17
40677: ST_TO_ADDR
// if buildings then
40678: LD_VAR 0 18
40682: IFFALSE 42004
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40684: LD_ADDR_VAR 0 19
40688: PUSH
40689: LD_VAR 0 18
40693: PPUSH
40694: LD_INT 2
40696: PUSH
40697: LD_INT 30
40699: PUSH
40700: LD_INT 29
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 30
40709: PUSH
40710: LD_INT 30
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: LIST
40721: PPUSH
40722: CALL_OW 72
40726: ST_TO_ADDR
// if tmp then
40727: LD_VAR 0 19
40731: IFFALSE 40779
// for i in tmp do
40733: LD_ADDR_VAR 0 8
40737: PUSH
40738: LD_VAR 0 19
40742: PUSH
40743: FOR_IN
40744: IFFALSE 40777
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40746: LD_VAR 0 8
40750: PPUSH
40751: CALL_OW 250
40755: PPUSH
40756: LD_VAR 0 8
40760: PPUSH
40761: CALL_OW 251
40765: PPUSH
40766: LD_VAR 0 16
40770: PPUSH
40771: CALL_OW 441
40775: GO 40743
40777: POP
40778: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40779: LD_VAR 0 18
40783: PPUSH
40784: LD_INT 2
40786: PUSH
40787: LD_INT 30
40789: PUSH
40790: LD_INT 32
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 30
40799: PUSH
40800: LD_INT 33
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: LIST
40811: PPUSH
40812: CALL_OW 72
40816: IFFALSE 40904
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40818: LD_ADDR_VAR 0 8
40822: PUSH
40823: LD_VAR 0 18
40827: PPUSH
40828: LD_INT 2
40830: PUSH
40831: LD_INT 30
40833: PUSH
40834: LD_INT 32
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 30
40843: PUSH
40844: LD_INT 33
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: LIST
40855: PPUSH
40856: CALL_OW 72
40860: PUSH
40861: FOR_IN
40862: IFFALSE 40902
// begin if not GetBWeapon ( i ) then
40864: LD_VAR 0 8
40868: PPUSH
40869: CALL_OW 269
40873: NOT
40874: IFFALSE 40900
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40876: LD_VAR 0 8
40880: PPUSH
40881: LD_VAR 0 8
40885: PPUSH
40886: LD_VAR 0 2
40890: PPUSH
40891: CALL 42150 0 2
40895: PPUSH
40896: CALL_OW 431
// end ;
40900: GO 40861
40902: POP
40903: POP
// end ; for i = 1 to personel do
40904: LD_ADDR_VAR 0 8
40908: PUSH
40909: DOUBLE
40910: LD_INT 1
40912: DEC
40913: ST_TO_ADDR
40914: LD_VAR 0 6
40918: PUSH
40919: FOR_TO
40920: IFFALSE 41984
// begin if i > 4 then
40922: LD_VAR 0 8
40926: PUSH
40927: LD_INT 4
40929: GREATER
40930: IFFALSE 40934
// break ;
40932: GO 41984
// case i of 1 :
40934: LD_VAR 0 8
40938: PUSH
40939: LD_INT 1
40941: DOUBLE
40942: EQUAL
40943: IFTRUE 40947
40945: GO 41027
40947: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40948: LD_ADDR_VAR 0 12
40952: PUSH
40953: LD_VAR 0 18
40957: PPUSH
40958: LD_INT 22
40960: PUSH
40961: LD_VAR 0 16
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 58
40972: PUSH
40973: EMPTY
40974: LIST
40975: PUSH
40976: LD_INT 2
40978: PUSH
40979: LD_INT 30
40981: PUSH
40982: LD_INT 32
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 30
40991: PUSH
40992: LD_INT 4
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 30
41001: PUSH
41002: LD_INT 5
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: LIST
41019: PPUSH
41020: CALL_OW 72
41024: ST_TO_ADDR
41025: GO 41249
41027: LD_INT 2
41029: DOUBLE
41030: EQUAL
41031: IFTRUE 41035
41033: GO 41097
41035: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41036: LD_ADDR_VAR 0 12
41040: PUSH
41041: LD_VAR 0 18
41045: PPUSH
41046: LD_INT 22
41048: PUSH
41049: LD_VAR 0 16
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: LD_INT 30
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 30
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: LIST
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PPUSH
41090: CALL_OW 72
41094: ST_TO_ADDR
41095: GO 41249
41097: LD_INT 3
41099: DOUBLE
41100: EQUAL
41101: IFTRUE 41105
41103: GO 41167
41105: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41106: LD_ADDR_VAR 0 12
41110: PUSH
41111: LD_VAR 0 18
41115: PPUSH
41116: LD_INT 22
41118: PUSH
41119: LD_VAR 0 16
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 2
41130: PUSH
41131: LD_INT 30
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 30
41143: PUSH
41144: LD_INT 3
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: LIST
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PPUSH
41160: CALL_OW 72
41164: ST_TO_ADDR
41165: GO 41249
41167: LD_INT 4
41169: DOUBLE
41170: EQUAL
41171: IFTRUE 41175
41173: GO 41248
41175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41176: LD_ADDR_VAR 0 12
41180: PUSH
41181: LD_VAR 0 18
41185: PPUSH
41186: LD_INT 22
41188: PUSH
41189: LD_VAR 0 16
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: PUSH
41201: LD_INT 30
41203: PUSH
41204: LD_INT 6
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 30
41213: PUSH
41214: LD_INT 7
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 30
41223: PUSH
41224: LD_INT 8
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PPUSH
41241: CALL_OW 72
41245: ST_TO_ADDR
41246: GO 41249
41248: POP
// if i = 1 then
41249: LD_VAR 0 8
41253: PUSH
41254: LD_INT 1
41256: EQUAL
41257: IFFALSE 41368
// begin tmp := [ ] ;
41259: LD_ADDR_VAR 0 19
41263: PUSH
41264: EMPTY
41265: ST_TO_ADDR
// for j in f do
41266: LD_ADDR_VAR 0 9
41270: PUSH
41271: LD_VAR 0 12
41275: PUSH
41276: FOR_IN
41277: IFFALSE 41350
// if GetBType ( j ) = b_bunker then
41279: LD_VAR 0 9
41283: PPUSH
41284: CALL_OW 266
41288: PUSH
41289: LD_INT 32
41291: EQUAL
41292: IFFALSE 41319
// tmp := Insert ( tmp , 1 , j ) else
41294: LD_ADDR_VAR 0 19
41298: PUSH
41299: LD_VAR 0 19
41303: PPUSH
41304: LD_INT 1
41306: PPUSH
41307: LD_VAR 0 9
41311: PPUSH
41312: CALL_OW 2
41316: ST_TO_ADDR
41317: GO 41348
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41319: LD_ADDR_VAR 0 19
41323: PUSH
41324: LD_VAR 0 19
41328: PPUSH
41329: LD_VAR 0 19
41333: PUSH
41334: LD_INT 1
41336: PLUS
41337: PPUSH
41338: LD_VAR 0 9
41342: PPUSH
41343: CALL_OW 2
41347: ST_TO_ADDR
41348: GO 41276
41350: POP
41351: POP
// if tmp then
41352: LD_VAR 0 19
41356: IFFALSE 41368
// f := tmp ;
41358: LD_ADDR_VAR 0 12
41362: PUSH
41363: LD_VAR 0 19
41367: ST_TO_ADDR
// end ; x := personel [ i ] ;
41368: LD_ADDR_VAR 0 13
41372: PUSH
41373: LD_VAR 0 6
41377: PUSH
41378: LD_VAR 0 8
41382: ARRAY
41383: ST_TO_ADDR
// if x = - 1 then
41384: LD_VAR 0 13
41388: PUSH
41389: LD_INT 1
41391: NEG
41392: EQUAL
41393: IFFALSE 41602
// begin for j in f do
41395: LD_ADDR_VAR 0 9
41399: PUSH
41400: LD_VAR 0 12
41404: PUSH
41405: FOR_IN
41406: IFFALSE 41598
// repeat InitHc ;
41408: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41412: LD_VAR 0 9
41416: PPUSH
41417: CALL_OW 266
41421: PUSH
41422: LD_INT 5
41424: EQUAL
41425: IFFALSE 41495
// begin if UnitsInside ( j ) < 3 then
41427: LD_VAR 0 9
41431: PPUSH
41432: CALL_OW 313
41436: PUSH
41437: LD_INT 3
41439: LESS
41440: IFFALSE 41476
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41442: LD_INT 0
41444: PPUSH
41445: LD_INT 5
41447: PUSH
41448: LD_INT 8
41450: PUSH
41451: LD_INT 9
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: LIST
41458: PUSH
41459: LD_VAR 0 17
41463: ARRAY
41464: PPUSH
41465: LD_VAR 0 4
41469: PPUSH
41470: CALL_OW 380
41474: GO 41493
// PrepareHuman ( false , i , skill ) ;
41476: LD_INT 0
41478: PPUSH
41479: LD_VAR 0 8
41483: PPUSH
41484: LD_VAR 0 4
41488: PPUSH
41489: CALL_OW 380
// end else
41493: GO 41512
// PrepareHuman ( false , i , skill ) ;
41495: LD_INT 0
41497: PPUSH
41498: LD_VAR 0 8
41502: PPUSH
41503: LD_VAR 0 4
41507: PPUSH
41508: CALL_OW 380
// un := CreateHuman ;
41512: LD_ADDR_VAR 0 14
41516: PUSH
41517: CALL_OW 44
41521: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41522: LD_ADDR_VAR 0 7
41526: PUSH
41527: LD_VAR 0 7
41531: PPUSH
41532: LD_INT 1
41534: PPUSH
41535: LD_VAR 0 14
41539: PPUSH
41540: CALL_OW 2
41544: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41545: LD_VAR 0 14
41549: PPUSH
41550: LD_VAR 0 9
41554: PPUSH
41555: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41559: LD_VAR 0 9
41563: PPUSH
41564: CALL_OW 313
41568: PUSH
41569: LD_INT 6
41571: EQUAL
41572: PUSH
41573: LD_VAR 0 9
41577: PPUSH
41578: CALL_OW 266
41582: PUSH
41583: LD_INT 32
41585: PUSH
41586: LD_INT 31
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: IN
41593: OR
41594: IFFALSE 41408
41596: GO 41405
41598: POP
41599: POP
// end else
41600: GO 41982
// for j = 1 to x do
41602: LD_ADDR_VAR 0 9
41606: PUSH
41607: DOUBLE
41608: LD_INT 1
41610: DEC
41611: ST_TO_ADDR
41612: LD_VAR 0 13
41616: PUSH
41617: FOR_TO
41618: IFFALSE 41980
// begin InitHc ;
41620: CALL_OW 19
// if not f then
41624: LD_VAR 0 12
41628: NOT
41629: IFFALSE 41718
// begin PrepareHuman ( false , i , skill ) ;
41631: LD_INT 0
41633: PPUSH
41634: LD_VAR 0 8
41638: PPUSH
41639: LD_VAR 0 4
41643: PPUSH
41644: CALL_OW 380
// un := CreateHuman ;
41648: LD_ADDR_VAR 0 14
41652: PUSH
41653: CALL_OW 44
41657: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41658: LD_ADDR_VAR 0 7
41662: PUSH
41663: LD_VAR 0 7
41667: PPUSH
41668: LD_INT 1
41670: PPUSH
41671: LD_VAR 0 14
41675: PPUSH
41676: CALL_OW 2
41680: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41681: LD_VAR 0 14
41685: PPUSH
41686: LD_VAR 0 1
41690: PPUSH
41691: CALL_OW 250
41695: PPUSH
41696: LD_VAR 0 1
41700: PPUSH
41701: CALL_OW 251
41705: PPUSH
41706: LD_INT 10
41708: PPUSH
41709: LD_INT 0
41711: PPUSH
41712: CALL_OW 50
// continue ;
41716: GO 41617
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41718: LD_VAR 0 12
41722: PUSH
41723: LD_INT 1
41725: ARRAY
41726: PPUSH
41727: CALL_OW 313
41731: PUSH
41732: LD_VAR 0 12
41736: PUSH
41737: LD_INT 1
41739: ARRAY
41740: PPUSH
41741: CALL_OW 266
41745: PUSH
41746: LD_INT 32
41748: PUSH
41749: LD_INT 31
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: IN
41756: AND
41757: PUSH
41758: LD_VAR 0 12
41762: PUSH
41763: LD_INT 1
41765: ARRAY
41766: PPUSH
41767: CALL_OW 313
41771: PUSH
41772: LD_INT 6
41774: EQUAL
41775: OR
41776: IFFALSE 41796
// f := Delete ( f , 1 ) ;
41778: LD_ADDR_VAR 0 12
41782: PUSH
41783: LD_VAR 0 12
41787: PPUSH
41788: LD_INT 1
41790: PPUSH
41791: CALL_OW 3
41795: ST_TO_ADDR
// if not f then
41796: LD_VAR 0 12
41800: NOT
41801: IFFALSE 41819
// begin x := x + 2 ;
41803: LD_ADDR_VAR 0 13
41807: PUSH
41808: LD_VAR 0 13
41812: PUSH
41813: LD_INT 2
41815: PLUS
41816: ST_TO_ADDR
// continue ;
41817: GO 41617
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41819: LD_VAR 0 12
41823: PUSH
41824: LD_INT 1
41826: ARRAY
41827: PPUSH
41828: CALL_OW 266
41832: PUSH
41833: LD_INT 5
41835: EQUAL
41836: IFFALSE 41910
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41838: LD_VAR 0 12
41842: PUSH
41843: LD_INT 1
41845: ARRAY
41846: PPUSH
41847: CALL_OW 313
41851: PUSH
41852: LD_INT 3
41854: LESS
41855: IFFALSE 41891
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41857: LD_INT 0
41859: PPUSH
41860: LD_INT 5
41862: PUSH
41863: LD_INT 8
41865: PUSH
41866: LD_INT 9
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: LIST
41873: PUSH
41874: LD_VAR 0 17
41878: ARRAY
41879: PPUSH
41880: LD_VAR 0 4
41884: PPUSH
41885: CALL_OW 380
41889: GO 41908
// PrepareHuman ( false , i , skill ) ;
41891: LD_INT 0
41893: PPUSH
41894: LD_VAR 0 8
41898: PPUSH
41899: LD_VAR 0 4
41903: PPUSH
41904: CALL_OW 380
// end else
41908: GO 41927
// PrepareHuman ( false , i , skill ) ;
41910: LD_INT 0
41912: PPUSH
41913: LD_VAR 0 8
41917: PPUSH
41918: LD_VAR 0 4
41922: PPUSH
41923: CALL_OW 380
// un := CreateHuman ;
41927: LD_ADDR_VAR 0 14
41931: PUSH
41932: CALL_OW 44
41936: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41937: LD_ADDR_VAR 0 7
41941: PUSH
41942: LD_VAR 0 7
41946: PPUSH
41947: LD_INT 1
41949: PPUSH
41950: LD_VAR 0 14
41954: PPUSH
41955: CALL_OW 2
41959: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41960: LD_VAR 0 14
41964: PPUSH
41965: LD_VAR 0 12
41969: PUSH
41970: LD_INT 1
41972: ARRAY
41973: PPUSH
41974: CALL_OW 52
// end ;
41978: GO 41617
41980: POP
41981: POP
// end ;
41982: GO 40919
41984: POP
41985: POP
// result := result ^ buildings ;
41986: LD_ADDR_VAR 0 7
41990: PUSH
41991: LD_VAR 0 7
41995: PUSH
41996: LD_VAR 0 18
42000: ADD
42001: ST_TO_ADDR
// end else
42002: GO 42145
// begin for i = 1 to personel do
42004: LD_ADDR_VAR 0 8
42008: PUSH
42009: DOUBLE
42010: LD_INT 1
42012: DEC
42013: ST_TO_ADDR
42014: LD_VAR 0 6
42018: PUSH
42019: FOR_TO
42020: IFFALSE 42143
// begin if i > 4 then
42022: LD_VAR 0 8
42026: PUSH
42027: LD_INT 4
42029: GREATER
42030: IFFALSE 42034
// break ;
42032: GO 42143
// x := personel [ i ] ;
42034: LD_ADDR_VAR 0 13
42038: PUSH
42039: LD_VAR 0 6
42043: PUSH
42044: LD_VAR 0 8
42048: ARRAY
42049: ST_TO_ADDR
// if x = - 1 then
42050: LD_VAR 0 13
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: EQUAL
42059: IFFALSE 42063
// continue ;
42061: GO 42019
// PrepareHuman ( false , i , skill ) ;
42063: LD_INT 0
42065: PPUSH
42066: LD_VAR 0 8
42070: PPUSH
42071: LD_VAR 0 4
42075: PPUSH
42076: CALL_OW 380
// un := CreateHuman ;
42080: LD_ADDR_VAR 0 14
42084: PUSH
42085: CALL_OW 44
42089: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42090: LD_VAR 0 14
42094: PPUSH
42095: LD_VAR 0 1
42099: PPUSH
42100: CALL_OW 250
42104: PPUSH
42105: LD_VAR 0 1
42109: PPUSH
42110: CALL_OW 251
42114: PPUSH
42115: LD_INT 10
42117: PPUSH
42118: LD_INT 0
42120: PPUSH
42121: CALL_OW 50
// result := result ^ un ;
42125: LD_ADDR_VAR 0 7
42129: PUSH
42130: LD_VAR 0 7
42134: PUSH
42135: LD_VAR 0 14
42139: ADD
42140: ST_TO_ADDR
// end ;
42141: GO 42019
42143: POP
42144: POP
// end ; end ;
42145: LD_VAR 0 7
42149: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42150: LD_INT 0
42152: PPUSH
42153: PPUSH
42154: PPUSH
42155: PPUSH
42156: PPUSH
42157: PPUSH
42158: PPUSH
42159: PPUSH
42160: PPUSH
42161: PPUSH
42162: PPUSH
42163: PPUSH
42164: PPUSH
42165: PPUSH
42166: PPUSH
42167: PPUSH
// result := false ;
42168: LD_ADDR_VAR 0 3
42172: PUSH
42173: LD_INT 0
42175: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42176: LD_VAR 0 1
42180: NOT
42181: PUSH
42182: LD_VAR 0 1
42186: PPUSH
42187: CALL_OW 266
42191: PUSH
42192: LD_INT 32
42194: PUSH
42195: LD_INT 33
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: IN
42202: NOT
42203: OR
42204: IFFALSE 42208
// exit ;
42206: GO 43317
// nat := GetNation ( tower ) ;
42208: LD_ADDR_VAR 0 12
42212: PUSH
42213: LD_VAR 0 1
42217: PPUSH
42218: CALL_OW 248
42222: ST_TO_ADDR
// side := GetSide ( tower ) ;
42223: LD_ADDR_VAR 0 16
42227: PUSH
42228: LD_VAR 0 1
42232: PPUSH
42233: CALL_OW 255
42237: ST_TO_ADDR
// x := GetX ( tower ) ;
42238: LD_ADDR_VAR 0 10
42242: PUSH
42243: LD_VAR 0 1
42247: PPUSH
42248: CALL_OW 250
42252: ST_TO_ADDR
// y := GetY ( tower ) ;
42253: LD_ADDR_VAR 0 11
42257: PUSH
42258: LD_VAR 0 1
42262: PPUSH
42263: CALL_OW 251
42267: ST_TO_ADDR
// if not x or not y then
42268: LD_VAR 0 10
42272: NOT
42273: PUSH
42274: LD_VAR 0 11
42278: NOT
42279: OR
42280: IFFALSE 42284
// exit ;
42282: GO 43317
// weapon := 0 ;
42284: LD_ADDR_VAR 0 18
42288: PUSH
42289: LD_INT 0
42291: ST_TO_ADDR
// fac_list := [ ] ;
42292: LD_ADDR_VAR 0 17
42296: PUSH
42297: EMPTY
42298: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42299: LD_ADDR_VAR 0 6
42303: PUSH
42304: LD_VAR 0 1
42308: PPUSH
42309: CALL_OW 274
42313: PPUSH
42314: LD_VAR 0 2
42318: PPUSH
42319: LD_INT 0
42321: PPUSH
42322: CALL 39888 0 3
42326: PPUSH
42327: LD_INT 30
42329: PUSH
42330: LD_INT 3
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PPUSH
42337: CALL_OW 72
42341: ST_TO_ADDR
// if not factories then
42342: LD_VAR 0 6
42346: NOT
42347: IFFALSE 42351
// exit ;
42349: GO 43317
// for i in factories do
42351: LD_ADDR_VAR 0 8
42355: PUSH
42356: LD_VAR 0 6
42360: PUSH
42361: FOR_IN
42362: IFFALSE 42387
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42364: LD_ADDR_VAR 0 17
42368: PUSH
42369: LD_VAR 0 17
42373: PUSH
42374: LD_VAR 0 8
42378: PPUSH
42379: CALL_OW 478
42383: UNION
42384: ST_TO_ADDR
42385: GO 42361
42387: POP
42388: POP
// if not fac_list then
42389: LD_VAR 0 17
42393: NOT
42394: IFFALSE 42398
// exit ;
42396: GO 43317
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42398: LD_ADDR_VAR 0 5
42402: PUSH
42403: LD_INT 4
42405: PUSH
42406: LD_INT 5
42408: PUSH
42409: LD_INT 9
42411: PUSH
42412: LD_INT 10
42414: PUSH
42415: LD_INT 6
42417: PUSH
42418: LD_INT 7
42420: PUSH
42421: LD_INT 11
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 27
42435: PUSH
42436: LD_INT 28
42438: PUSH
42439: LD_INT 26
42441: PUSH
42442: LD_INT 30
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 43
42453: PUSH
42454: LD_INT 44
42456: PUSH
42457: LD_INT 46
42459: PUSH
42460: LD_INT 45
42462: PUSH
42463: LD_INT 47
42465: PUSH
42466: LD_INT 49
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: LIST
42481: PUSH
42482: LD_VAR 0 12
42486: ARRAY
42487: ST_TO_ADDR
// list := list isect fac_list ;
42488: LD_ADDR_VAR 0 5
42492: PUSH
42493: LD_VAR 0 5
42497: PUSH
42498: LD_VAR 0 17
42502: ISECT
42503: ST_TO_ADDR
// if not list then
42504: LD_VAR 0 5
42508: NOT
42509: IFFALSE 42513
// exit ;
42511: GO 43317
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42513: LD_VAR 0 12
42517: PUSH
42518: LD_INT 3
42520: EQUAL
42521: PUSH
42522: LD_INT 49
42524: PUSH
42525: LD_VAR 0 5
42529: IN
42530: AND
42531: PUSH
42532: LD_INT 31
42534: PPUSH
42535: LD_VAR 0 16
42539: PPUSH
42540: CALL_OW 321
42544: PUSH
42545: LD_INT 2
42547: EQUAL
42548: AND
42549: IFFALSE 42609
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42551: LD_INT 22
42553: PUSH
42554: LD_VAR 0 16
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 35
42565: PUSH
42566: LD_INT 49
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 91
42575: PUSH
42576: LD_VAR 0 1
42580: PUSH
42581: LD_INT 10
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: LIST
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: LIST
42593: PPUSH
42594: CALL_OW 69
42598: NOT
42599: IFFALSE 42609
// weapon := ru_time_lapser ;
42601: LD_ADDR_VAR 0 18
42605: PUSH
42606: LD_INT 49
42608: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42609: LD_VAR 0 12
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: LD_INT 2
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: IN
42624: PUSH
42625: LD_INT 11
42627: PUSH
42628: LD_VAR 0 5
42632: IN
42633: PUSH
42634: LD_INT 30
42636: PUSH
42637: LD_VAR 0 5
42641: IN
42642: OR
42643: AND
42644: PUSH
42645: LD_INT 6
42647: PPUSH
42648: LD_VAR 0 16
42652: PPUSH
42653: CALL_OW 321
42657: PUSH
42658: LD_INT 2
42660: EQUAL
42661: AND
42662: IFFALSE 42827
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42664: LD_INT 22
42666: PUSH
42667: LD_VAR 0 16
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: LD_INT 35
42681: PUSH
42682: LD_INT 11
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 35
42691: PUSH
42692: LD_INT 30
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 91
42706: PUSH
42707: LD_VAR 0 1
42711: PUSH
42712: LD_INT 18
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: LIST
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: LIST
42724: PPUSH
42725: CALL_OW 69
42729: NOT
42730: PUSH
42731: LD_INT 22
42733: PUSH
42734: LD_VAR 0 16
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: LD_INT 30
42748: PUSH
42749: LD_INT 32
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 30
42758: PUSH
42759: LD_INT 33
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 91
42773: PUSH
42774: LD_VAR 0 1
42778: PUSH
42779: LD_INT 12
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: LIST
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: PUSH
42792: EMPTY
42793: LIST
42794: PPUSH
42795: CALL_OW 69
42799: PUSH
42800: LD_INT 2
42802: GREATER
42803: AND
42804: IFFALSE 42827
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42806: LD_ADDR_VAR 0 18
42810: PUSH
42811: LD_INT 11
42813: PUSH
42814: LD_INT 30
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_VAR 0 12
42825: ARRAY
42826: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42827: LD_VAR 0 18
42831: NOT
42832: PUSH
42833: LD_INT 40
42835: PPUSH
42836: LD_VAR 0 16
42840: PPUSH
42841: CALL_OW 321
42845: PUSH
42846: LD_INT 2
42848: EQUAL
42849: AND
42850: PUSH
42851: LD_INT 7
42853: PUSH
42854: LD_VAR 0 5
42858: IN
42859: PUSH
42860: LD_INT 28
42862: PUSH
42863: LD_VAR 0 5
42867: IN
42868: OR
42869: PUSH
42870: LD_INT 45
42872: PUSH
42873: LD_VAR 0 5
42877: IN
42878: OR
42879: AND
42880: IFFALSE 43134
// begin hex := GetHexInfo ( x , y ) ;
42882: LD_ADDR_VAR 0 4
42886: PUSH
42887: LD_VAR 0 10
42891: PPUSH
42892: LD_VAR 0 11
42896: PPUSH
42897: CALL_OW 546
42901: ST_TO_ADDR
// if hex [ 1 ] then
42902: LD_VAR 0 4
42906: PUSH
42907: LD_INT 1
42909: ARRAY
42910: IFFALSE 42914
// exit ;
42912: GO 43317
// height := hex [ 2 ] ;
42914: LD_ADDR_VAR 0 15
42918: PUSH
42919: LD_VAR 0 4
42923: PUSH
42924: LD_INT 2
42926: ARRAY
42927: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42928: LD_ADDR_VAR 0 14
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: LD_INT 2
42938: PUSH
42939: LD_INT 3
42941: PUSH
42942: LD_INT 5
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: ST_TO_ADDR
// for i in tmp do
42951: LD_ADDR_VAR 0 8
42955: PUSH
42956: LD_VAR 0 14
42960: PUSH
42961: FOR_IN
42962: IFFALSE 43132
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42964: LD_ADDR_VAR 0 9
42968: PUSH
42969: LD_VAR 0 10
42973: PPUSH
42974: LD_VAR 0 8
42978: PPUSH
42979: LD_INT 5
42981: PPUSH
42982: CALL_OW 272
42986: PUSH
42987: LD_VAR 0 11
42991: PPUSH
42992: LD_VAR 0 8
42996: PPUSH
42997: LD_INT 5
42999: PPUSH
43000: CALL_OW 273
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43009: LD_VAR 0 9
43013: PUSH
43014: LD_INT 1
43016: ARRAY
43017: PPUSH
43018: LD_VAR 0 9
43022: PUSH
43023: LD_INT 2
43025: ARRAY
43026: PPUSH
43027: CALL_OW 488
43031: IFFALSE 43130
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43033: LD_ADDR_VAR 0 4
43037: PUSH
43038: LD_VAR 0 9
43042: PUSH
43043: LD_INT 1
43045: ARRAY
43046: PPUSH
43047: LD_VAR 0 9
43051: PUSH
43052: LD_INT 2
43054: ARRAY
43055: PPUSH
43056: CALL_OW 546
43060: ST_TO_ADDR
// if hex [ 1 ] then
43061: LD_VAR 0 4
43065: PUSH
43066: LD_INT 1
43068: ARRAY
43069: IFFALSE 43073
// continue ;
43071: GO 42961
// h := hex [ 2 ] ;
43073: LD_ADDR_VAR 0 13
43077: PUSH
43078: LD_VAR 0 4
43082: PUSH
43083: LD_INT 2
43085: ARRAY
43086: ST_TO_ADDR
// if h + 7 < height then
43087: LD_VAR 0 13
43091: PUSH
43092: LD_INT 7
43094: PLUS
43095: PUSH
43096: LD_VAR 0 15
43100: LESS
43101: IFFALSE 43130
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43103: LD_ADDR_VAR 0 18
43107: PUSH
43108: LD_INT 7
43110: PUSH
43111: LD_INT 28
43113: PUSH
43114: LD_INT 45
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: LIST
43121: PUSH
43122: LD_VAR 0 12
43126: ARRAY
43127: ST_TO_ADDR
// break ;
43128: GO 43132
// end ; end ; end ;
43130: GO 42961
43132: POP
43133: POP
// end ; if not weapon then
43134: LD_VAR 0 18
43138: NOT
43139: IFFALSE 43199
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43141: LD_ADDR_VAR 0 5
43145: PUSH
43146: LD_VAR 0 5
43150: PUSH
43151: LD_INT 11
43153: PUSH
43154: LD_INT 30
43156: PUSH
43157: LD_INT 49
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: DIFF
43165: ST_TO_ADDR
// if not list then
43166: LD_VAR 0 5
43170: NOT
43171: IFFALSE 43175
// exit ;
43173: GO 43317
// weapon := list [ rand ( 1 , list ) ] ;
43175: LD_ADDR_VAR 0 18
43179: PUSH
43180: LD_VAR 0 5
43184: PUSH
43185: LD_INT 1
43187: PPUSH
43188: LD_VAR 0 5
43192: PPUSH
43193: CALL_OW 12
43197: ARRAY
43198: ST_TO_ADDR
// end ; if weapon then
43199: LD_VAR 0 18
43203: IFFALSE 43317
// begin tmp := CostOfWeapon ( weapon ) ;
43205: LD_ADDR_VAR 0 14
43209: PUSH
43210: LD_VAR 0 18
43214: PPUSH
43215: CALL_OW 451
43219: ST_TO_ADDR
// j := GetBase ( tower ) ;
43220: LD_ADDR_VAR 0 9
43224: PUSH
43225: LD_VAR 0 1
43229: PPUSH
43230: CALL_OW 274
43234: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43235: LD_VAR 0 9
43239: PPUSH
43240: LD_INT 1
43242: PPUSH
43243: CALL_OW 275
43247: PUSH
43248: LD_VAR 0 14
43252: PUSH
43253: LD_INT 1
43255: ARRAY
43256: GREATEREQUAL
43257: PUSH
43258: LD_VAR 0 9
43262: PPUSH
43263: LD_INT 2
43265: PPUSH
43266: CALL_OW 275
43270: PUSH
43271: LD_VAR 0 14
43275: PUSH
43276: LD_INT 2
43278: ARRAY
43279: GREATEREQUAL
43280: AND
43281: PUSH
43282: LD_VAR 0 9
43286: PPUSH
43287: LD_INT 3
43289: PPUSH
43290: CALL_OW 275
43294: PUSH
43295: LD_VAR 0 14
43299: PUSH
43300: LD_INT 3
43302: ARRAY
43303: GREATEREQUAL
43304: AND
43305: IFFALSE 43317
// result := weapon ;
43307: LD_ADDR_VAR 0 3
43311: PUSH
43312: LD_VAR 0 18
43316: ST_TO_ADDR
// end ; end ;
43317: LD_VAR 0 3
43321: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43322: LD_INT 0
43324: PPUSH
43325: PPUSH
// result := true ;
43326: LD_ADDR_VAR 0 3
43330: PUSH
43331: LD_INT 1
43333: ST_TO_ADDR
// if array1 = array2 then
43334: LD_VAR 0 1
43338: PUSH
43339: LD_VAR 0 2
43343: EQUAL
43344: IFFALSE 43404
// begin for i = 1 to array1 do
43346: LD_ADDR_VAR 0 4
43350: PUSH
43351: DOUBLE
43352: LD_INT 1
43354: DEC
43355: ST_TO_ADDR
43356: LD_VAR 0 1
43360: PUSH
43361: FOR_TO
43362: IFFALSE 43400
// if array1 [ i ] <> array2 [ i ] then
43364: LD_VAR 0 1
43368: PUSH
43369: LD_VAR 0 4
43373: ARRAY
43374: PUSH
43375: LD_VAR 0 2
43379: PUSH
43380: LD_VAR 0 4
43384: ARRAY
43385: NONEQUAL
43386: IFFALSE 43398
// begin result := false ;
43388: LD_ADDR_VAR 0 3
43392: PUSH
43393: LD_INT 0
43395: ST_TO_ADDR
// break ;
43396: GO 43400
// end ;
43398: GO 43361
43400: POP
43401: POP
// end else
43402: GO 43412
// result := false ;
43404: LD_ADDR_VAR 0 3
43408: PUSH
43409: LD_INT 0
43411: ST_TO_ADDR
// end ;
43412: LD_VAR 0 3
43416: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43417: LD_INT 0
43419: PPUSH
43420: PPUSH
// if not array1 or not array2 then
43421: LD_VAR 0 1
43425: NOT
43426: PUSH
43427: LD_VAR 0 2
43431: NOT
43432: OR
43433: IFFALSE 43437
// exit ;
43435: GO 43501
// result := true ;
43437: LD_ADDR_VAR 0 3
43441: PUSH
43442: LD_INT 1
43444: ST_TO_ADDR
// for i = 1 to array1 do
43445: LD_ADDR_VAR 0 4
43449: PUSH
43450: DOUBLE
43451: LD_INT 1
43453: DEC
43454: ST_TO_ADDR
43455: LD_VAR 0 1
43459: PUSH
43460: FOR_TO
43461: IFFALSE 43499
// if array1 [ i ] <> array2 [ i ] then
43463: LD_VAR 0 1
43467: PUSH
43468: LD_VAR 0 4
43472: ARRAY
43473: PUSH
43474: LD_VAR 0 2
43478: PUSH
43479: LD_VAR 0 4
43483: ARRAY
43484: NONEQUAL
43485: IFFALSE 43497
// begin result := false ;
43487: LD_ADDR_VAR 0 3
43491: PUSH
43492: LD_INT 0
43494: ST_TO_ADDR
// break ;
43495: GO 43499
// end ;
43497: GO 43460
43499: POP
43500: POP
// end ;
43501: LD_VAR 0 3
43505: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43506: LD_INT 0
43508: PPUSH
43509: PPUSH
43510: PPUSH
// pom := GetBase ( fac ) ;
43511: LD_ADDR_VAR 0 5
43515: PUSH
43516: LD_VAR 0 1
43520: PPUSH
43521: CALL_OW 274
43525: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43526: LD_ADDR_VAR 0 4
43530: PUSH
43531: LD_VAR 0 2
43535: PUSH
43536: LD_INT 1
43538: ARRAY
43539: PPUSH
43540: LD_VAR 0 2
43544: PUSH
43545: LD_INT 2
43547: ARRAY
43548: PPUSH
43549: LD_VAR 0 2
43553: PUSH
43554: LD_INT 3
43556: ARRAY
43557: PPUSH
43558: LD_VAR 0 2
43562: PUSH
43563: LD_INT 4
43565: ARRAY
43566: PPUSH
43567: CALL_OW 449
43571: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43572: LD_ADDR_VAR 0 3
43576: PUSH
43577: LD_VAR 0 5
43581: PPUSH
43582: LD_INT 1
43584: PPUSH
43585: CALL_OW 275
43589: PUSH
43590: LD_VAR 0 4
43594: PUSH
43595: LD_INT 1
43597: ARRAY
43598: GREATEREQUAL
43599: PUSH
43600: LD_VAR 0 5
43604: PPUSH
43605: LD_INT 2
43607: PPUSH
43608: CALL_OW 275
43612: PUSH
43613: LD_VAR 0 4
43617: PUSH
43618: LD_INT 2
43620: ARRAY
43621: GREATEREQUAL
43622: AND
43623: PUSH
43624: LD_VAR 0 5
43628: PPUSH
43629: LD_INT 3
43631: PPUSH
43632: CALL_OW 275
43636: PUSH
43637: LD_VAR 0 4
43641: PUSH
43642: LD_INT 3
43644: ARRAY
43645: GREATEREQUAL
43646: AND
43647: ST_TO_ADDR
// end ;
43648: LD_VAR 0 3
43652: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43653: LD_INT 0
43655: PPUSH
43656: PPUSH
43657: PPUSH
43658: PPUSH
// pom := GetBase ( building ) ;
43659: LD_ADDR_VAR 0 3
43663: PUSH
43664: LD_VAR 0 1
43668: PPUSH
43669: CALL_OW 274
43673: ST_TO_ADDR
// if not pom then
43674: LD_VAR 0 3
43678: NOT
43679: IFFALSE 43683
// exit ;
43681: GO 43853
// btype := GetBType ( building ) ;
43683: LD_ADDR_VAR 0 5
43687: PUSH
43688: LD_VAR 0 1
43692: PPUSH
43693: CALL_OW 266
43697: ST_TO_ADDR
// if btype = b_armoury then
43698: LD_VAR 0 5
43702: PUSH
43703: LD_INT 4
43705: EQUAL
43706: IFFALSE 43716
// btype := b_barracks ;
43708: LD_ADDR_VAR 0 5
43712: PUSH
43713: LD_INT 5
43715: ST_TO_ADDR
// if btype = b_depot then
43716: LD_VAR 0 5
43720: PUSH
43721: LD_INT 0
43723: EQUAL
43724: IFFALSE 43734
// btype := b_warehouse ;
43726: LD_ADDR_VAR 0 5
43730: PUSH
43731: LD_INT 1
43733: ST_TO_ADDR
// if btype = b_workshop then
43734: LD_VAR 0 5
43738: PUSH
43739: LD_INT 2
43741: EQUAL
43742: IFFALSE 43752
// btype := b_factory ;
43744: LD_ADDR_VAR 0 5
43748: PUSH
43749: LD_INT 3
43751: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43752: LD_ADDR_VAR 0 4
43756: PUSH
43757: LD_VAR 0 5
43761: PPUSH
43762: LD_VAR 0 1
43766: PPUSH
43767: CALL_OW 248
43771: PPUSH
43772: CALL_OW 450
43776: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43777: LD_ADDR_VAR 0 2
43781: PUSH
43782: LD_VAR 0 3
43786: PPUSH
43787: LD_INT 1
43789: PPUSH
43790: CALL_OW 275
43794: PUSH
43795: LD_VAR 0 4
43799: PUSH
43800: LD_INT 1
43802: ARRAY
43803: GREATEREQUAL
43804: PUSH
43805: LD_VAR 0 3
43809: PPUSH
43810: LD_INT 2
43812: PPUSH
43813: CALL_OW 275
43817: PUSH
43818: LD_VAR 0 4
43822: PUSH
43823: LD_INT 2
43825: ARRAY
43826: GREATEREQUAL
43827: AND
43828: PUSH
43829: LD_VAR 0 3
43833: PPUSH
43834: LD_INT 3
43836: PPUSH
43837: CALL_OW 275
43841: PUSH
43842: LD_VAR 0 4
43846: PUSH
43847: LD_INT 3
43849: ARRAY
43850: GREATEREQUAL
43851: AND
43852: ST_TO_ADDR
// end ;
43853: LD_VAR 0 2
43857: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43858: LD_INT 0
43860: PPUSH
43861: PPUSH
43862: PPUSH
// pom := GetBase ( building ) ;
43863: LD_ADDR_VAR 0 4
43867: PUSH
43868: LD_VAR 0 1
43872: PPUSH
43873: CALL_OW 274
43877: ST_TO_ADDR
// if not pom then
43878: LD_VAR 0 4
43882: NOT
43883: IFFALSE 43887
// exit ;
43885: GO 43988
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43887: LD_ADDR_VAR 0 5
43891: PUSH
43892: LD_VAR 0 2
43896: PPUSH
43897: LD_VAR 0 1
43901: PPUSH
43902: CALL_OW 248
43906: PPUSH
43907: CALL_OW 450
43911: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43912: LD_ADDR_VAR 0 3
43916: PUSH
43917: LD_VAR 0 4
43921: PPUSH
43922: LD_INT 1
43924: PPUSH
43925: CALL_OW 275
43929: PUSH
43930: LD_VAR 0 5
43934: PUSH
43935: LD_INT 1
43937: ARRAY
43938: GREATEREQUAL
43939: PUSH
43940: LD_VAR 0 4
43944: PPUSH
43945: LD_INT 2
43947: PPUSH
43948: CALL_OW 275
43952: PUSH
43953: LD_VAR 0 5
43957: PUSH
43958: LD_INT 2
43960: ARRAY
43961: GREATEREQUAL
43962: AND
43963: PUSH
43964: LD_VAR 0 4
43968: PPUSH
43969: LD_INT 3
43971: PPUSH
43972: CALL_OW 275
43976: PUSH
43977: LD_VAR 0 5
43981: PUSH
43982: LD_INT 3
43984: ARRAY
43985: GREATEREQUAL
43986: AND
43987: ST_TO_ADDR
// end ;
43988: LD_VAR 0 3
43992: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43993: LD_INT 0
43995: PPUSH
43996: PPUSH
43997: PPUSH
43998: PPUSH
43999: PPUSH
44000: PPUSH
44001: PPUSH
44002: PPUSH
44003: PPUSH
44004: PPUSH
44005: PPUSH
// result := false ;
44006: LD_ADDR_VAR 0 8
44010: PUSH
44011: LD_INT 0
44013: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44014: LD_VAR 0 5
44018: NOT
44019: PUSH
44020: LD_VAR 0 1
44024: NOT
44025: OR
44026: PUSH
44027: LD_VAR 0 2
44031: NOT
44032: OR
44033: PUSH
44034: LD_VAR 0 3
44038: NOT
44039: OR
44040: IFFALSE 44044
// exit ;
44042: GO 44858
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44044: LD_ADDR_VAR 0 14
44048: PUSH
44049: LD_VAR 0 1
44053: PPUSH
44054: LD_VAR 0 2
44058: PPUSH
44059: LD_VAR 0 3
44063: PPUSH
44064: LD_VAR 0 4
44068: PPUSH
44069: LD_VAR 0 5
44073: PUSH
44074: LD_INT 1
44076: ARRAY
44077: PPUSH
44078: CALL_OW 248
44082: PPUSH
44083: LD_INT 0
44085: PPUSH
44086: CALL 46111 0 6
44090: ST_TO_ADDR
// if not hexes then
44091: LD_VAR 0 14
44095: NOT
44096: IFFALSE 44100
// exit ;
44098: GO 44858
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44100: LD_ADDR_VAR 0 17
44104: PUSH
44105: LD_VAR 0 5
44109: PPUSH
44110: LD_INT 22
44112: PUSH
44113: LD_VAR 0 13
44117: PPUSH
44118: CALL_OW 255
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: LD_INT 30
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 30
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: LIST
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PPUSH
44159: CALL_OW 72
44163: ST_TO_ADDR
// for i = 1 to hexes do
44164: LD_ADDR_VAR 0 9
44168: PUSH
44169: DOUBLE
44170: LD_INT 1
44172: DEC
44173: ST_TO_ADDR
44174: LD_VAR 0 14
44178: PUSH
44179: FOR_TO
44180: IFFALSE 44856
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44182: LD_ADDR_VAR 0 13
44186: PUSH
44187: LD_VAR 0 14
44191: PUSH
44192: LD_VAR 0 9
44196: ARRAY
44197: PUSH
44198: LD_INT 1
44200: ARRAY
44201: PPUSH
44202: LD_VAR 0 14
44206: PUSH
44207: LD_VAR 0 9
44211: ARRAY
44212: PUSH
44213: LD_INT 2
44215: ARRAY
44216: PPUSH
44217: CALL_OW 428
44221: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44222: LD_VAR 0 14
44226: PUSH
44227: LD_VAR 0 9
44231: ARRAY
44232: PUSH
44233: LD_INT 1
44235: ARRAY
44236: PPUSH
44237: LD_VAR 0 14
44241: PUSH
44242: LD_VAR 0 9
44246: ARRAY
44247: PUSH
44248: LD_INT 2
44250: ARRAY
44251: PPUSH
44252: CALL_OW 351
44256: PUSH
44257: LD_VAR 0 14
44261: PUSH
44262: LD_VAR 0 9
44266: ARRAY
44267: PUSH
44268: LD_INT 1
44270: ARRAY
44271: PPUSH
44272: LD_VAR 0 14
44276: PUSH
44277: LD_VAR 0 9
44281: ARRAY
44282: PUSH
44283: LD_INT 2
44285: ARRAY
44286: PPUSH
44287: CALL_OW 488
44291: NOT
44292: OR
44293: PUSH
44294: LD_VAR 0 13
44298: PPUSH
44299: CALL_OW 247
44303: PUSH
44304: LD_INT 3
44306: EQUAL
44307: OR
44308: IFFALSE 44314
// exit ;
44310: POP
44311: POP
44312: GO 44858
// if not tmp then
44314: LD_VAR 0 13
44318: NOT
44319: IFFALSE 44323
// continue ;
44321: GO 44179
// result := true ;
44323: LD_ADDR_VAR 0 8
44327: PUSH
44328: LD_INT 1
44330: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44331: LD_VAR 0 6
44335: PUSH
44336: LD_VAR 0 13
44340: PPUSH
44341: CALL_OW 247
44345: PUSH
44346: LD_INT 2
44348: EQUAL
44349: AND
44350: PUSH
44351: LD_VAR 0 13
44355: PPUSH
44356: CALL_OW 263
44360: PUSH
44361: LD_INT 1
44363: EQUAL
44364: AND
44365: IFFALSE 44529
// begin if IsDrivenBy ( tmp ) then
44367: LD_VAR 0 13
44371: PPUSH
44372: CALL_OW 311
44376: IFFALSE 44380
// continue ;
44378: GO 44179
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44380: LD_VAR 0 6
44384: PPUSH
44385: LD_INT 3
44387: PUSH
44388: LD_INT 60
44390: PUSH
44391: EMPTY
44392: LIST
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 3
44400: PUSH
44401: LD_INT 55
44403: PUSH
44404: EMPTY
44405: LIST
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PPUSH
44415: CALL_OW 72
44419: IFFALSE 44527
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44421: LD_ADDR_VAR 0 18
44425: PUSH
44426: LD_VAR 0 6
44430: PPUSH
44431: LD_INT 3
44433: PUSH
44434: LD_INT 60
44436: PUSH
44437: EMPTY
44438: LIST
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 3
44446: PUSH
44447: LD_INT 55
44449: PUSH
44450: EMPTY
44451: LIST
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PPUSH
44461: CALL_OW 72
44465: PUSH
44466: LD_INT 1
44468: ARRAY
44469: ST_TO_ADDR
// if IsInUnit ( driver ) then
44470: LD_VAR 0 18
44474: PPUSH
44475: CALL_OW 310
44479: IFFALSE 44490
// ComExit ( driver ) ;
44481: LD_VAR 0 18
44485: PPUSH
44486: CALL 69892 0 1
// AddComEnterUnit ( driver , tmp ) ;
44490: LD_VAR 0 18
44494: PPUSH
44495: LD_VAR 0 13
44499: PPUSH
44500: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44504: LD_VAR 0 18
44508: PPUSH
44509: LD_VAR 0 7
44513: PPUSH
44514: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44518: LD_VAR 0 18
44522: PPUSH
44523: CALL_OW 181
// end ; continue ;
44527: GO 44179
// end ; if not cleaners or not tmp in cleaners then
44529: LD_VAR 0 6
44533: NOT
44534: PUSH
44535: LD_VAR 0 13
44539: PUSH
44540: LD_VAR 0 6
44544: IN
44545: NOT
44546: OR
44547: IFFALSE 44854
// begin if dep then
44549: LD_VAR 0 17
44553: IFFALSE 44689
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44555: LD_ADDR_VAR 0 16
44559: PUSH
44560: LD_VAR 0 17
44564: PUSH
44565: LD_INT 1
44567: ARRAY
44568: PPUSH
44569: CALL_OW 250
44573: PPUSH
44574: LD_VAR 0 17
44578: PUSH
44579: LD_INT 1
44581: ARRAY
44582: PPUSH
44583: CALL_OW 254
44587: PPUSH
44588: LD_INT 5
44590: PPUSH
44591: CALL_OW 272
44595: PUSH
44596: LD_VAR 0 17
44600: PUSH
44601: LD_INT 1
44603: ARRAY
44604: PPUSH
44605: CALL_OW 251
44609: PPUSH
44610: LD_VAR 0 17
44614: PUSH
44615: LD_INT 1
44617: ARRAY
44618: PPUSH
44619: CALL_OW 254
44623: PPUSH
44624: LD_INT 5
44626: PPUSH
44627: CALL_OW 273
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44636: LD_VAR 0 16
44640: PUSH
44641: LD_INT 1
44643: ARRAY
44644: PPUSH
44645: LD_VAR 0 16
44649: PUSH
44650: LD_INT 2
44652: ARRAY
44653: PPUSH
44654: CALL_OW 488
44658: IFFALSE 44689
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44660: LD_VAR 0 13
44664: PPUSH
44665: LD_VAR 0 16
44669: PUSH
44670: LD_INT 1
44672: ARRAY
44673: PPUSH
44674: LD_VAR 0 16
44678: PUSH
44679: LD_INT 2
44681: ARRAY
44682: PPUSH
44683: CALL_OW 111
// continue ;
44687: GO 44179
// end ; end ; r := GetDir ( tmp ) ;
44689: LD_ADDR_VAR 0 15
44693: PUSH
44694: LD_VAR 0 13
44698: PPUSH
44699: CALL_OW 254
44703: ST_TO_ADDR
// if r = 5 then
44704: LD_VAR 0 15
44708: PUSH
44709: LD_INT 5
44711: EQUAL
44712: IFFALSE 44722
// r := 0 ;
44714: LD_ADDR_VAR 0 15
44718: PUSH
44719: LD_INT 0
44721: ST_TO_ADDR
// for j = r to 5 do
44722: LD_ADDR_VAR 0 10
44726: PUSH
44727: DOUBLE
44728: LD_VAR 0 15
44732: DEC
44733: ST_TO_ADDR
44734: LD_INT 5
44736: PUSH
44737: FOR_TO
44738: IFFALSE 44852
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44740: LD_ADDR_VAR 0 11
44744: PUSH
44745: LD_VAR 0 13
44749: PPUSH
44750: CALL_OW 250
44754: PPUSH
44755: LD_VAR 0 10
44759: PPUSH
44760: LD_INT 2
44762: PPUSH
44763: CALL_OW 272
44767: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44768: LD_ADDR_VAR 0 12
44772: PUSH
44773: LD_VAR 0 13
44777: PPUSH
44778: CALL_OW 251
44782: PPUSH
44783: LD_VAR 0 10
44787: PPUSH
44788: LD_INT 2
44790: PPUSH
44791: CALL_OW 273
44795: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44796: LD_VAR 0 11
44800: PPUSH
44801: LD_VAR 0 12
44805: PPUSH
44806: CALL_OW 488
44810: PUSH
44811: LD_VAR 0 11
44815: PPUSH
44816: LD_VAR 0 12
44820: PPUSH
44821: CALL_OW 428
44825: NOT
44826: AND
44827: IFFALSE 44850
// begin ComMoveXY ( tmp , _x , _y ) ;
44829: LD_VAR 0 13
44833: PPUSH
44834: LD_VAR 0 11
44838: PPUSH
44839: LD_VAR 0 12
44843: PPUSH
44844: CALL_OW 111
// break ;
44848: GO 44852
// end ; end ;
44850: GO 44737
44852: POP
44853: POP
// end ; end ;
44854: GO 44179
44856: POP
44857: POP
// end ;
44858: LD_VAR 0 8
44862: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44863: LD_INT 0
44865: PPUSH
// result := true ;
44866: LD_ADDR_VAR 0 3
44870: PUSH
44871: LD_INT 1
44873: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44874: LD_VAR 0 2
44878: PUSH
44879: LD_INT 24
44881: DOUBLE
44882: EQUAL
44883: IFTRUE 44893
44885: LD_INT 33
44887: DOUBLE
44888: EQUAL
44889: IFTRUE 44893
44891: GO 44918
44893: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44894: LD_ADDR_VAR 0 3
44898: PUSH
44899: LD_INT 32
44901: PPUSH
44902: LD_VAR 0 1
44906: PPUSH
44907: CALL_OW 321
44911: PUSH
44912: LD_INT 2
44914: EQUAL
44915: ST_TO_ADDR
44916: GO 45234
44918: LD_INT 20
44920: DOUBLE
44921: EQUAL
44922: IFTRUE 44926
44924: GO 44951
44926: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44927: LD_ADDR_VAR 0 3
44931: PUSH
44932: LD_INT 6
44934: PPUSH
44935: LD_VAR 0 1
44939: PPUSH
44940: CALL_OW 321
44944: PUSH
44945: LD_INT 2
44947: EQUAL
44948: ST_TO_ADDR
44949: GO 45234
44951: LD_INT 22
44953: DOUBLE
44954: EQUAL
44955: IFTRUE 44965
44957: LD_INT 36
44959: DOUBLE
44960: EQUAL
44961: IFTRUE 44965
44963: GO 44990
44965: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44966: LD_ADDR_VAR 0 3
44970: PUSH
44971: LD_INT 15
44973: PPUSH
44974: LD_VAR 0 1
44978: PPUSH
44979: CALL_OW 321
44983: PUSH
44984: LD_INT 2
44986: EQUAL
44987: ST_TO_ADDR
44988: GO 45234
44990: LD_INT 30
44992: DOUBLE
44993: EQUAL
44994: IFTRUE 44998
44996: GO 45023
44998: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44999: LD_ADDR_VAR 0 3
45003: PUSH
45004: LD_INT 20
45006: PPUSH
45007: LD_VAR 0 1
45011: PPUSH
45012: CALL_OW 321
45016: PUSH
45017: LD_INT 2
45019: EQUAL
45020: ST_TO_ADDR
45021: GO 45234
45023: LD_INT 28
45025: DOUBLE
45026: EQUAL
45027: IFTRUE 45037
45029: LD_INT 21
45031: DOUBLE
45032: EQUAL
45033: IFTRUE 45037
45035: GO 45062
45037: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45038: LD_ADDR_VAR 0 3
45042: PUSH
45043: LD_INT 21
45045: PPUSH
45046: LD_VAR 0 1
45050: PPUSH
45051: CALL_OW 321
45055: PUSH
45056: LD_INT 2
45058: EQUAL
45059: ST_TO_ADDR
45060: GO 45234
45062: LD_INT 16
45064: DOUBLE
45065: EQUAL
45066: IFTRUE 45070
45068: GO 45095
45070: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45071: LD_ADDR_VAR 0 3
45075: PUSH
45076: LD_INT 84
45078: PPUSH
45079: LD_VAR 0 1
45083: PPUSH
45084: CALL_OW 321
45088: PUSH
45089: LD_INT 2
45091: EQUAL
45092: ST_TO_ADDR
45093: GO 45234
45095: LD_INT 19
45097: DOUBLE
45098: EQUAL
45099: IFTRUE 45109
45101: LD_INT 23
45103: DOUBLE
45104: EQUAL
45105: IFTRUE 45109
45107: GO 45134
45109: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45110: LD_ADDR_VAR 0 3
45114: PUSH
45115: LD_INT 83
45117: PPUSH
45118: LD_VAR 0 1
45122: PPUSH
45123: CALL_OW 321
45127: PUSH
45128: LD_INT 2
45130: EQUAL
45131: ST_TO_ADDR
45132: GO 45234
45134: LD_INT 17
45136: DOUBLE
45137: EQUAL
45138: IFTRUE 45142
45140: GO 45167
45142: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45143: LD_ADDR_VAR 0 3
45147: PUSH
45148: LD_INT 39
45150: PPUSH
45151: LD_VAR 0 1
45155: PPUSH
45156: CALL_OW 321
45160: PUSH
45161: LD_INT 2
45163: EQUAL
45164: ST_TO_ADDR
45165: GO 45234
45167: LD_INT 18
45169: DOUBLE
45170: EQUAL
45171: IFTRUE 45175
45173: GO 45200
45175: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45176: LD_ADDR_VAR 0 3
45180: PUSH
45181: LD_INT 40
45183: PPUSH
45184: LD_VAR 0 1
45188: PPUSH
45189: CALL_OW 321
45193: PUSH
45194: LD_INT 2
45196: EQUAL
45197: ST_TO_ADDR
45198: GO 45234
45200: LD_INT 27
45202: DOUBLE
45203: EQUAL
45204: IFTRUE 45208
45206: GO 45233
45208: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45209: LD_ADDR_VAR 0 3
45213: PUSH
45214: LD_INT 35
45216: PPUSH
45217: LD_VAR 0 1
45221: PPUSH
45222: CALL_OW 321
45226: PUSH
45227: LD_INT 2
45229: EQUAL
45230: ST_TO_ADDR
45231: GO 45234
45233: POP
// end ;
45234: LD_VAR 0 3
45238: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45239: LD_INT 0
45241: PPUSH
45242: PPUSH
45243: PPUSH
45244: PPUSH
45245: PPUSH
45246: PPUSH
45247: PPUSH
45248: PPUSH
45249: PPUSH
45250: PPUSH
45251: PPUSH
// result := false ;
45252: LD_ADDR_VAR 0 6
45256: PUSH
45257: LD_INT 0
45259: ST_TO_ADDR
// if btype = b_depot then
45260: LD_VAR 0 2
45264: PUSH
45265: LD_INT 0
45267: EQUAL
45268: IFFALSE 45280
// begin result := true ;
45270: LD_ADDR_VAR 0 6
45274: PUSH
45275: LD_INT 1
45277: ST_TO_ADDR
// exit ;
45278: GO 46106
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45280: LD_VAR 0 1
45284: NOT
45285: PUSH
45286: LD_VAR 0 1
45290: PPUSH
45291: CALL_OW 266
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: IN
45306: NOT
45307: OR
45308: PUSH
45309: LD_VAR 0 2
45313: NOT
45314: OR
45315: PUSH
45316: LD_VAR 0 5
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: LD_INT 3
45332: PUSH
45333: LD_INT 4
45335: PUSH
45336: LD_INT 5
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: IN
45347: NOT
45348: OR
45349: PUSH
45350: LD_VAR 0 3
45354: PPUSH
45355: LD_VAR 0 4
45359: PPUSH
45360: CALL_OW 488
45364: NOT
45365: OR
45366: IFFALSE 45370
// exit ;
45368: GO 46106
// side := GetSide ( depot ) ;
45370: LD_ADDR_VAR 0 9
45374: PUSH
45375: LD_VAR 0 1
45379: PPUSH
45380: CALL_OW 255
45384: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45385: LD_VAR 0 9
45389: PPUSH
45390: LD_VAR 0 2
45394: PPUSH
45395: CALL 44863 0 2
45399: NOT
45400: IFFALSE 45404
// exit ;
45402: GO 46106
// pom := GetBase ( depot ) ;
45404: LD_ADDR_VAR 0 10
45408: PUSH
45409: LD_VAR 0 1
45413: PPUSH
45414: CALL_OW 274
45418: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45419: LD_ADDR_VAR 0 11
45423: PUSH
45424: LD_VAR 0 2
45428: PPUSH
45429: LD_VAR 0 1
45433: PPUSH
45434: CALL_OW 248
45438: PPUSH
45439: CALL_OW 450
45443: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45444: LD_VAR 0 10
45448: PPUSH
45449: LD_INT 1
45451: PPUSH
45452: CALL_OW 275
45456: PUSH
45457: LD_VAR 0 11
45461: PUSH
45462: LD_INT 1
45464: ARRAY
45465: GREATEREQUAL
45466: PUSH
45467: LD_VAR 0 10
45471: PPUSH
45472: LD_INT 2
45474: PPUSH
45475: CALL_OW 275
45479: PUSH
45480: LD_VAR 0 11
45484: PUSH
45485: LD_INT 2
45487: ARRAY
45488: GREATEREQUAL
45489: AND
45490: PUSH
45491: LD_VAR 0 10
45495: PPUSH
45496: LD_INT 3
45498: PPUSH
45499: CALL_OW 275
45503: PUSH
45504: LD_VAR 0 11
45508: PUSH
45509: LD_INT 3
45511: ARRAY
45512: GREATEREQUAL
45513: AND
45514: NOT
45515: IFFALSE 45519
// exit ;
45517: GO 46106
// if GetBType ( depot ) = b_depot then
45519: LD_VAR 0 1
45523: PPUSH
45524: CALL_OW 266
45528: PUSH
45529: LD_INT 0
45531: EQUAL
45532: IFFALSE 45544
// dist := 28 else
45534: LD_ADDR_VAR 0 14
45538: PUSH
45539: LD_INT 28
45541: ST_TO_ADDR
45542: GO 45552
// dist := 36 ;
45544: LD_ADDR_VAR 0 14
45548: PUSH
45549: LD_INT 36
45551: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45552: LD_VAR 0 1
45556: PPUSH
45557: LD_VAR 0 3
45561: PPUSH
45562: LD_VAR 0 4
45566: PPUSH
45567: CALL_OW 297
45571: PUSH
45572: LD_VAR 0 14
45576: GREATER
45577: IFFALSE 45581
// exit ;
45579: GO 46106
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45581: LD_ADDR_VAR 0 12
45585: PUSH
45586: LD_VAR 0 2
45590: PPUSH
45591: LD_VAR 0 3
45595: PPUSH
45596: LD_VAR 0 4
45600: PPUSH
45601: LD_VAR 0 5
45605: PPUSH
45606: LD_VAR 0 1
45610: PPUSH
45611: CALL_OW 248
45615: PPUSH
45616: LD_INT 0
45618: PPUSH
45619: CALL 46111 0 6
45623: ST_TO_ADDR
// if not hexes then
45624: LD_VAR 0 12
45628: NOT
45629: IFFALSE 45633
// exit ;
45631: GO 46106
// hex := GetHexInfo ( x , y ) ;
45633: LD_ADDR_VAR 0 15
45637: PUSH
45638: LD_VAR 0 3
45642: PPUSH
45643: LD_VAR 0 4
45647: PPUSH
45648: CALL_OW 546
45652: ST_TO_ADDR
// if hex [ 1 ] then
45653: LD_VAR 0 15
45657: PUSH
45658: LD_INT 1
45660: ARRAY
45661: IFFALSE 45665
// exit ;
45663: GO 46106
// height := hex [ 2 ] ;
45665: LD_ADDR_VAR 0 13
45669: PUSH
45670: LD_VAR 0 15
45674: PUSH
45675: LD_INT 2
45677: ARRAY
45678: ST_TO_ADDR
// for i = 1 to hexes do
45679: LD_ADDR_VAR 0 7
45683: PUSH
45684: DOUBLE
45685: LD_INT 1
45687: DEC
45688: ST_TO_ADDR
45689: LD_VAR 0 12
45693: PUSH
45694: FOR_TO
45695: IFFALSE 46025
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45697: LD_VAR 0 12
45701: PUSH
45702: LD_VAR 0 7
45706: ARRAY
45707: PUSH
45708: LD_INT 1
45710: ARRAY
45711: PPUSH
45712: LD_VAR 0 12
45716: PUSH
45717: LD_VAR 0 7
45721: ARRAY
45722: PUSH
45723: LD_INT 2
45725: ARRAY
45726: PPUSH
45727: CALL_OW 488
45731: NOT
45732: PUSH
45733: LD_VAR 0 12
45737: PUSH
45738: LD_VAR 0 7
45742: ARRAY
45743: PUSH
45744: LD_INT 1
45746: ARRAY
45747: PPUSH
45748: LD_VAR 0 12
45752: PUSH
45753: LD_VAR 0 7
45757: ARRAY
45758: PUSH
45759: LD_INT 2
45761: ARRAY
45762: PPUSH
45763: CALL_OW 428
45767: PUSH
45768: LD_INT 0
45770: GREATER
45771: OR
45772: PUSH
45773: LD_VAR 0 12
45777: PUSH
45778: LD_VAR 0 7
45782: ARRAY
45783: PUSH
45784: LD_INT 1
45786: ARRAY
45787: PPUSH
45788: LD_VAR 0 12
45792: PUSH
45793: LD_VAR 0 7
45797: ARRAY
45798: PUSH
45799: LD_INT 2
45801: ARRAY
45802: PPUSH
45803: CALL_OW 351
45807: OR
45808: IFFALSE 45814
// exit ;
45810: POP
45811: POP
45812: GO 46106
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45814: LD_ADDR_VAR 0 8
45818: PUSH
45819: LD_VAR 0 12
45823: PUSH
45824: LD_VAR 0 7
45828: ARRAY
45829: PUSH
45830: LD_INT 1
45832: ARRAY
45833: PPUSH
45834: LD_VAR 0 12
45838: PUSH
45839: LD_VAR 0 7
45843: ARRAY
45844: PUSH
45845: LD_INT 2
45847: ARRAY
45848: PPUSH
45849: CALL_OW 546
45853: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45854: LD_VAR 0 8
45858: PUSH
45859: LD_INT 1
45861: ARRAY
45862: PUSH
45863: LD_VAR 0 8
45867: PUSH
45868: LD_INT 2
45870: ARRAY
45871: PUSH
45872: LD_VAR 0 13
45876: PUSH
45877: LD_INT 2
45879: PLUS
45880: GREATER
45881: OR
45882: PUSH
45883: LD_VAR 0 8
45887: PUSH
45888: LD_INT 2
45890: ARRAY
45891: PUSH
45892: LD_VAR 0 13
45896: PUSH
45897: LD_INT 2
45899: MINUS
45900: LESS
45901: OR
45902: PUSH
45903: LD_VAR 0 8
45907: PUSH
45908: LD_INT 3
45910: ARRAY
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 8
45917: PUSH
45918: LD_INT 9
45920: PUSH
45921: LD_INT 10
45923: PUSH
45924: LD_INT 11
45926: PUSH
45927: LD_INT 12
45929: PUSH
45930: LD_INT 13
45932: PUSH
45933: LD_INT 16
45935: PUSH
45936: LD_INT 17
45938: PUSH
45939: LD_INT 18
45941: PUSH
45942: LD_INT 19
45944: PUSH
45945: LD_INT 20
45947: PUSH
45948: LD_INT 21
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: IN
45966: NOT
45967: OR
45968: PUSH
45969: LD_VAR 0 8
45973: PUSH
45974: LD_INT 5
45976: ARRAY
45977: NOT
45978: OR
45979: PUSH
45980: LD_VAR 0 8
45984: PUSH
45985: LD_INT 6
45987: ARRAY
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: LD_INT 7
45997: PUSH
45998: LD_INT 9
46000: PUSH
46001: LD_INT 10
46003: PUSH
46004: LD_INT 11
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: IN
46015: NOT
46016: OR
46017: IFFALSE 46023
// exit ;
46019: POP
46020: POP
46021: GO 46106
// end ;
46023: GO 45694
46025: POP
46026: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46027: LD_VAR 0 9
46031: PPUSH
46032: LD_VAR 0 3
46036: PPUSH
46037: LD_VAR 0 4
46041: PPUSH
46042: LD_INT 20
46044: PPUSH
46045: CALL 38029 0 4
46049: PUSH
46050: LD_INT 4
46052: ARRAY
46053: IFFALSE 46057
// exit ;
46055: GO 46106
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46057: LD_VAR 0 2
46061: PUSH
46062: LD_INT 29
46064: PUSH
46065: LD_INT 30
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: IN
46072: PUSH
46073: LD_VAR 0 3
46077: PPUSH
46078: LD_VAR 0 4
46082: PPUSH
46083: LD_VAR 0 9
46087: PPUSH
46088: CALL_OW 440
46092: NOT
46093: AND
46094: IFFALSE 46098
// exit ;
46096: GO 46106
// result := true ;
46098: LD_ADDR_VAR 0 6
46102: PUSH
46103: LD_INT 1
46105: ST_TO_ADDR
// end ;
46106: LD_VAR 0 6
46110: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46111: LD_INT 0
46113: PPUSH
46114: PPUSH
46115: PPUSH
46116: PPUSH
46117: PPUSH
46118: PPUSH
46119: PPUSH
46120: PPUSH
46121: PPUSH
46122: PPUSH
46123: PPUSH
46124: PPUSH
46125: PPUSH
46126: PPUSH
46127: PPUSH
46128: PPUSH
46129: PPUSH
46130: PPUSH
46131: PPUSH
46132: PPUSH
46133: PPUSH
46134: PPUSH
46135: PPUSH
46136: PPUSH
46137: PPUSH
46138: PPUSH
46139: PPUSH
46140: PPUSH
46141: PPUSH
46142: PPUSH
46143: PPUSH
46144: PPUSH
46145: PPUSH
46146: PPUSH
46147: PPUSH
46148: PPUSH
46149: PPUSH
46150: PPUSH
46151: PPUSH
46152: PPUSH
46153: PPUSH
46154: PPUSH
46155: PPUSH
46156: PPUSH
46157: PPUSH
46158: PPUSH
46159: PPUSH
46160: PPUSH
46161: PPUSH
46162: PPUSH
46163: PPUSH
46164: PPUSH
46165: PPUSH
46166: PPUSH
46167: PPUSH
46168: PPUSH
46169: PPUSH
46170: PPUSH
// result = [ ] ;
46171: LD_ADDR_VAR 0 7
46175: PUSH
46176: EMPTY
46177: ST_TO_ADDR
// temp_list = [ ] ;
46178: LD_ADDR_VAR 0 9
46182: PUSH
46183: EMPTY
46184: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46185: LD_VAR 0 4
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: LD_INT 3
46201: PUSH
46202: LD_INT 4
46204: PUSH
46205: LD_INT 5
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: IN
46216: NOT
46217: PUSH
46218: LD_VAR 0 1
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: IN
46233: PUSH
46234: LD_VAR 0 5
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: LD_INT 3
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: LIST
46252: IN
46253: NOT
46254: AND
46255: OR
46256: IFFALSE 46260
// exit ;
46258: GO 64651
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46260: LD_VAR 0 1
46264: PUSH
46265: LD_INT 6
46267: PUSH
46268: LD_INT 7
46270: PUSH
46271: LD_INT 8
46273: PUSH
46274: LD_INT 13
46276: PUSH
46277: LD_INT 12
46279: PUSH
46280: LD_INT 15
46282: PUSH
46283: LD_INT 11
46285: PUSH
46286: LD_INT 14
46288: PUSH
46289: LD_INT 10
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: IN
46303: IFFALSE 46313
// btype = b_lab ;
46305: LD_ADDR_VAR 0 1
46309: PUSH
46310: LD_INT 6
46312: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46313: LD_VAR 0 6
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: LIST
46331: IN
46332: NOT
46333: PUSH
46334: LD_VAR 0 1
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: LD_INT 6
46353: PUSH
46354: LD_INT 36
46356: PUSH
46357: LD_INT 4
46359: PUSH
46360: LD_INT 5
46362: PUSH
46363: LD_INT 31
46365: PUSH
46366: LD_INT 32
46368: PUSH
46369: LD_INT 33
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: IN
46385: NOT
46386: PUSH
46387: LD_VAR 0 6
46391: PUSH
46392: LD_INT 1
46394: EQUAL
46395: AND
46396: OR
46397: PUSH
46398: LD_VAR 0 1
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: LD_INT 3
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: IN
46413: NOT
46414: PUSH
46415: LD_VAR 0 6
46419: PUSH
46420: LD_INT 2
46422: EQUAL
46423: AND
46424: OR
46425: IFFALSE 46435
// mode = 0 ;
46427: LD_ADDR_VAR 0 6
46431: PUSH
46432: LD_INT 0
46434: ST_TO_ADDR
// case mode of 0 :
46435: LD_VAR 0 6
46439: PUSH
46440: LD_INT 0
46442: DOUBLE
46443: EQUAL
46444: IFTRUE 46448
46446: GO 57901
46448: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46449: LD_ADDR_VAR 0 11
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: LD_INT 3
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 3
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46642: LD_ADDR_VAR 0 12
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: NEG
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 3
46799: NEG
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 3
46810: NEG
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46838: LD_ADDR_VAR 0 13
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: NEG
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 2
46985: NEG
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 3
46997: NEG
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 3
47009: NEG
47010: PUSH
47011: LD_INT 3
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47037: LD_ADDR_VAR 0 14
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: LD_INT 2
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 3
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 3
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47233: LD_ADDR_VAR 0 15
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 3
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 3
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47426: LD_ADDR_VAR 0 16
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: LD_INT 2
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: LD_INT 3
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47619: LD_ADDR_VAR 0 17
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: LD_INT 2
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47849: LD_ADDR_VAR 0 18
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: NEG
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48079: LD_ADDR_VAR 0 19
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 2
48255: NEG
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: NEG
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48309: LD_ADDR_VAR 0 20
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: LD_INT 2
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 2
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: NEG
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 2
48496: NEG
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 2
48508: NEG
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48539: LD_ADDR_VAR 0 21
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: LD_INT 2
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: LD_INT 2
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 2
48726: NEG
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: NEG
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48769: LD_ADDR_VAR 0 22
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 2
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 2
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48999: LD_ADDR_VAR 0 23
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: LD_INT 1
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: LD_INT 2
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 2
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: LD_INT 2
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: LD_INT 2
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 2
49186: NEG
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 2
49198: NEG
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: LD_INT 3
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: LD_INT 3
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49279: LD_ADDR_VAR 0 24
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 3
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 3
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49555: LD_ADDR_VAR 0 25
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 2
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 3
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 3
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: LD_INT 3
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 3
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49829: LD_ADDR_VAR 0 26
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: LD_INT 2
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: LD_INT 3
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 3
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 2
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50105: LD_ADDR_VAR 0 27
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 3
50338: NEG
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 3
50350: NEG
50351: PUSH
50352: LD_INT 2
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50385: LD_ADDR_VAR 0 28
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 2
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 2
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 2
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: LD_INT 2
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: LD_INT 3
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 3
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 3
50620: NEG
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 3
50632: NEG
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50667: LD_ADDR_VAR 0 29
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 2
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 2
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 2
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 2
50833: NEG
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: LD_INT 3
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 3
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 3
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 3
50911: NEG
50912: PUSH
50913: LD_INT 2
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50946: LD_ADDR_VAR 0 30
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: LD_INT 2
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 3
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: LD_INT 3
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 3
51189: NEG
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51224: LD_ADDR_VAR 0 31
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 2
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: LD_INT 2
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: NEG
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: LD_INT 2
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: LD_INT 3
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 3
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: LD_INT 3
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 3
51467: NEG
51468: PUSH
51469: LD_INT 2
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51502: LD_ADDR_VAR 0 32
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 2
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 2
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: LD_INT 2
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: LD_INT 2
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 3
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 3
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 2
51734: NEG
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 3
51745: NEG
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51780: LD_ADDR_VAR 0 33
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: LD_INT 2
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: NEG
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: LD_INT 3
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 3
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: LD_INT 3
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 3
52024: NEG
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52059: LD_ADDR_VAR 0 34
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: LD_INT 2
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 2
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 2
52215: NEG
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 3
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 3
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: LD_INT 3
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 3
52304: NEG
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52339: LD_ADDR_VAR 0 35
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52451: LD_ADDR_VAR 0 36
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52563: LD_ADDR_VAR 0 37
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52675: LD_ADDR_VAR 0 38
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52787: LD_ADDR_VAR 0 39
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: LD_INT 2
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52899: LD_ADDR_VAR 0 40
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53011: LD_ADDR_VAR 0 41
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: LD_INT 3
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 3
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 3
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: LD_INT 3
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: LD_INT 3
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 3
53285: NEG
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 3
53296: NEG
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 3
53308: NEG
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 3
53320: NEG
53321: PUSH
53322: LD_INT 3
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53361: LD_ADDR_VAR 0 42
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 2
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: LD_INT 2
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 2
53486: PUSH
53487: LD_INT 2
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 2
53551: NEG
53552: PUSH
53553: LD_INT 3
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: LD_INT 3
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 3
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 3
53597: PUSH
53598: LD_INT 2
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 3
53607: PUSH
53608: LD_INT 3
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: LD_INT 3
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 3
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 3
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 3
53658: NEG
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 3
53670: NEG
53671: PUSH
53672: LD_INT 3
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53711: LD_ADDR_VAR 0 43
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 2
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 2
53877: NEG
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: NEG
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: LD_INT 3
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: LD_INT 3
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 3
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 3
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 3
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 3
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 3
54007: NEG
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 3
54018: NEG
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54059: LD_ADDR_VAR 0 44
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: NEG
54238: PUSH
54239: LD_INT 2
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: NEG
54250: PUSH
54251: LD_INT 3
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 3
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 3
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 3
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 3
54302: PUSH
54303: LD_INT 3
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: LD_INT 3
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 3
54333: NEG
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 3
54344: NEG
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 3
54356: NEG
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 3
54368: NEG
54369: PUSH
54370: LD_INT 3
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54409: LD_ADDR_VAR 0 45
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 2
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 2
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: LD_INT 3
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: LD_INT 3
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 3
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 3
54655: PUSH
54656: LD_INT 3
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: LD_INT 3
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 3
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 3
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 3
54706: NEG
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: NEG
54719: PUSH
54720: LD_INT 3
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54759: LD_ADDR_VAR 0 46
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 3
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 3
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 3
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 3
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: LD_INT 3
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: LD_INT 3
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 3
55055: NEG
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55107: LD_ADDR_VAR 0 47
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: NEG
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55258: LD_ADDR_VAR 0 48
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55405: LD_ADDR_VAR 0 49
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55549: LD_ADDR_VAR 0 50
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 2
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 2
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55693: LD_ADDR_VAR 0 51
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55840: LD_ADDR_VAR 0 52
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55991: LD_ADDR_VAR 0 53
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 2
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56221: LD_ADDR_VAR 0 54
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 2
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: LD_INT 2
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: NEG
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56451: LD_ADDR_VAR 0 55
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 2
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56681: LD_ADDR_VAR 0 56
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 2
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: LD_INT 2
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56911: LD_ADDR_VAR 0 57
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: LD_INT 2
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: LD_INT 2
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57141: LD_ADDR_VAR 0 58
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: NEG
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 2
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 2
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 2
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 2
57276: PUSH
57277: LD_INT 2
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 2
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: NEG
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57371: LD_ADDR_VAR 0 59
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57459: LD_ADDR_VAR 0 60
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57547: LD_ADDR_VAR 0 61
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57635: LD_ADDR_VAR 0 62
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57723: LD_ADDR_VAR 0 63
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57811: LD_ADDR_VAR 0 64
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: ST_TO_ADDR
// end ; 1 :
57899: GO 63796
57901: LD_INT 1
57903: DOUBLE
57904: EQUAL
57905: IFTRUE 57909
57907: GO 60532
57909: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57910: LD_ADDR_VAR 0 11
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: LD_INT 3
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 3
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: LIST
57953: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57954: LD_ADDR_VAR 0 12
57958: PUSH
57959: LD_INT 2
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: LIST
57994: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57995: LD_ADDR_VAR 0 13
57999: PUSH
58000: LD_INT 3
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: LD_INT 3
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: LD_INT 3
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: LIST
58034: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58035: LD_ADDR_VAR 0 14
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 3
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 3
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: LIST
58075: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58076: LD_ADDR_VAR 0 15
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 3
58094: NEG
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 3
58105: NEG
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: LIST
58119: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58120: LD_ADDR_VAR 0 16
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: LD_INT 3
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 3
58139: NEG
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 3
58151: NEG
58152: PUSH
58153: LD_INT 3
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: LIST
58165: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58166: LD_ADDR_VAR 0 17
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: LD_INT 3
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: LD_INT 3
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: LD_INT 2
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58210: LD_ADDR_VAR 0 18
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: LIST
58250: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58251: LD_ADDR_VAR 0 19
58255: PUSH
58256: LD_INT 3
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: PUSH
58269: LD_INT 3
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: LD_INT 3
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58291: LD_ADDR_VAR 0 20
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: LIST
58331: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58332: LD_ADDR_VAR 0 21
58336: PUSH
58337: LD_INT 2
58339: NEG
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 3
58350: NEG
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 3
58361: NEG
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: LIST
58375: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58376: LD_ADDR_VAR 0 22
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: LD_INT 3
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 3
58407: NEG
58408: PUSH
58409: LD_INT 3
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: LIST
58421: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58422: LD_ADDR_VAR 0 23
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: LD_INT 3
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: NEG
58441: PUSH
58442: LD_INT 4
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58466: LD_ADDR_VAR 0 24
58470: PUSH
58471: LD_INT 3
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 4
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: LIST
58506: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58507: LD_ADDR_VAR 0 25
58511: PUSH
58512: LD_INT 3
58514: PUSH
58515: LD_INT 3
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 4
58524: PUSH
58525: LD_INT 3
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 3
58534: PUSH
58535: LD_INT 4
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: LIST
58546: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58547: LD_ADDR_VAR 0 26
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: LD_INT 3
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: LD_INT 4
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 3
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: LIST
58587: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58588: LD_ADDR_VAR 0 27
58592: PUSH
58593: LD_INT 3
58595: NEG
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 3
58606: NEG
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 4
58617: NEG
58618: PUSH
58619: LD_INT 1
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: LIST
58631: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58632: LD_ADDR_VAR 0 28
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: LD_INT 3
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 3
58651: NEG
58652: PUSH
58653: LD_INT 4
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 4
58663: NEG
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: LIST
58677: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58678: LD_ADDR_VAR 0 29
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 3
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: LD_INT 3
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: LD_INT 2
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: LD_INT 4
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 4
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: LD_INT 3
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: LD_INT 5
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: LD_INT 5
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: LD_INT 4
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: LD_INT 6
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 6
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 5
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58833: LD_ADDR_VAR 0 30
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 3
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 3
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 4
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 4
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 4
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 5
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 5
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 5
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 6
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 6
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58976: LD_ADDR_VAR 0 31
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 3
58993: PUSH
58994: LD_INT 3
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: LD_INT 3
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 4
59013: PUSH
59014: LD_INT 3
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 4
59023: PUSH
59024: LD_INT 4
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 3
59033: PUSH
59034: LD_INT 4
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 5
59043: PUSH
59044: LD_INT 4
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 5
59053: PUSH
59054: LD_INT 5
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 4
59063: PUSH
59064: LD_INT 5
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 6
59073: PUSH
59074: LD_INT 5
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 6
59083: PUSH
59084: LD_INT 6
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 5
59093: PUSH
59094: LD_INT 6
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59115: LD_ADDR_VAR 0 32
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: LD_INT 3
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: LD_INT 3
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: LD_INT 4
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 0
59163: PUSH
59164: LD_INT 4
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: LD_INT 5
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: LD_INT 5
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: LD_INT 4
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: LD_INT 6
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: LD_INT 6
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: LD_INT 5
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59258: LD_ADDR_VAR 0 33
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 3
59276: NEG
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 3
59287: NEG
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: NEG
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 4
59310: NEG
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 4
59321: NEG
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 4
59333: NEG
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 5
59344: NEG
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 5
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 5
59367: NEG
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 6
59378: NEG
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 6
59389: NEG
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59413: LD_ADDR_VAR 0 34
59417: PUSH
59418: LD_INT 2
59420: NEG
59421: PUSH
59422: LD_INT 3
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 3
59432: NEG
59433: PUSH
59434: LD_INT 2
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 3
59444: NEG
59445: PUSH
59446: LD_INT 3
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 3
59456: NEG
59457: PUSH
59458: LD_INT 4
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 4
59468: NEG
59469: PUSH
59470: LD_INT 3
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 4
59480: NEG
59481: PUSH
59482: LD_INT 4
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 4
59492: NEG
59493: PUSH
59494: LD_INT 5
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 5
59504: NEG
59505: PUSH
59506: LD_INT 4
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 5
59516: NEG
59517: PUSH
59518: LD_INT 5
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 5
59528: NEG
59529: PUSH
59530: LD_INT 6
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 6
59540: NEG
59541: PUSH
59542: LD_INT 5
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 6
59552: NEG
59553: PUSH
59554: LD_INT 6
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59576: LD_ADDR_VAR 0 41
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: LD_INT 3
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: LIST
59619: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59620: LD_ADDR_VAR 0 42
59624: PUSH
59625: LD_INT 2
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: LIST
59660: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59661: LD_ADDR_VAR 0 43
59665: PUSH
59666: LD_INT 2
59668: PUSH
59669: LD_INT 2
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 3
59678: PUSH
59679: LD_INT 2
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 2
59688: PUSH
59689: LD_INT 3
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: LIST
59700: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59701: LD_ADDR_VAR 0 44
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: LD_INT 3
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59742: LD_ADDR_VAR 0 45
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 3
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: LIST
59785: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59786: LD_ADDR_VAR 0 46
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: LD_INT 3
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 3
59817: NEG
59818: PUSH
59819: LD_INT 2
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59832: LD_ADDR_VAR 0 47
59836: PUSH
59837: LD_INT 2
59839: NEG
59840: PUSH
59841: LD_INT 3
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59865: LD_ADDR_VAR 0 48
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: LD_INT 2
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59896: LD_ADDR_VAR 0 49
59900: PUSH
59901: LD_INT 3
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 3
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59925: LD_ADDR_VAR 0 50
59929: PUSH
59930: LD_INT 2
59932: PUSH
59933: LD_INT 3
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: LD_INT 3
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59954: LD_ADDR_VAR 0 51
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: LD_INT 2
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59985: LD_ADDR_VAR 0 52
59989: PUSH
59990: LD_INT 3
59992: NEG
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 3
60004: NEG
60005: PUSH
60006: LD_INT 2
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60018: LD_ADDR_VAR 0 53
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 3
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 3
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: LIST
60061: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60062: LD_ADDR_VAR 0 54
60066: PUSH
60067: LD_INT 2
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 3
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: LIST
60102: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60103: LD_ADDR_VAR 0 55
60107: PUSH
60108: LD_INT 3
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 3
60120: PUSH
60121: LD_INT 3
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 2
60130: PUSH
60131: LD_INT 3
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: LIST
60142: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60143: LD_ADDR_VAR 0 56
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: LD_INT 3
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: LD_INT 2
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: LIST
60183: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60184: LD_ADDR_VAR 0 57
60188: PUSH
60189: LD_INT 2
60191: NEG
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 3
60202: NEG
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 3
60213: NEG
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: LIST
60227: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60228: LD_ADDR_VAR 0 58
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: LD_INT 3
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 3
60247: NEG
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 3
60259: NEG
60260: PUSH
60261: LD_INT 3
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60274: LD_ADDR_VAR 0 59
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: LD_INT 2
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: LIST
60317: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60318: LD_ADDR_VAR 0 60
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: LIST
60358: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60359: LD_ADDR_VAR 0 61
60363: PUSH
60364: LD_INT 2
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 2
60376: PUSH
60377: LD_INT 2
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: LD_INT 2
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: LIST
60398: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60399: LD_ADDR_VAR 0 62
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: LD_INT 1
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: LIST
60439: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60440: LD_ADDR_VAR 0 63
60444: PUSH
60445: LD_INT 1
60447: NEG
60448: PUSH
60449: LD_INT 1
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 2
60469: NEG
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: LIST
60483: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60484: LD_ADDR_VAR 0 64
60488: PUSH
60489: LD_INT 1
60491: NEG
60492: PUSH
60493: LD_INT 2
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 2
60515: NEG
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: LIST
60529: ST_TO_ADDR
// end ; 2 :
60530: GO 63796
60532: LD_INT 2
60534: DOUBLE
60535: EQUAL
60536: IFTRUE 60540
60538: GO 63795
60540: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60541: LD_ADDR_VAR 0 29
60545: PUSH
60546: LD_INT 4
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 4
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 5
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 5
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 4
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 3
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 3
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: LD_INT 2
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 5
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 3
60641: PUSH
60642: LD_INT 3
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 3
60651: PUSH
60652: LD_INT 2
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 4
60661: PUSH
60662: LD_INT 3
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 4
60671: PUSH
60672: LD_INT 4
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 3
60681: PUSH
60682: LD_INT 4
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: LD_INT 3
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: LD_INT 2
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 4
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: LD_INT 4
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: LD_INT 4
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: LD_INT 3
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: LD_INT 4
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: LD_INT 5
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: LD_INT 5
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: LD_INT 4
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: LD_INT 3
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: LD_INT 5
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: LD_INT 3
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 3
60824: NEG
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 2
60847: NEG
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 3
60869: NEG
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 4
60880: NEG
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 4
60891: NEG
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 4
60903: NEG
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 2
60915: NEG
60916: PUSH
60917: LD_INT 2
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 4
60926: NEG
60927: PUSH
60928: LD_INT 4
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 4
60938: NEG
60939: PUSH
60940: LD_INT 5
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 3
60950: NEG
60951: PUSH
60952: LD_INT 4
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 3
60962: NEG
60963: PUSH
60964: LD_INT 3
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 4
60974: NEG
60975: PUSH
60976: LD_INT 3
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 5
60986: NEG
60987: PUSH
60988: LD_INT 4
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 5
60998: NEG
60999: PUSH
61000: LD_INT 5
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 3
61010: NEG
61011: PUSH
61012: LD_INT 5
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 5
61022: NEG
61023: PUSH
61024: LD_INT 3
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61079: LD_ADDR_VAR 0 30
61083: PUSH
61084: LD_INT 4
61086: PUSH
61087: LD_INT 4
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 4
61096: PUSH
61097: LD_INT 3
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 5
61106: PUSH
61107: LD_INT 4
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 5
61116: PUSH
61117: LD_INT 5
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 4
61126: PUSH
61127: LD_INT 5
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: LD_INT 4
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 3
61146: PUSH
61147: LD_INT 3
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 5
61156: PUSH
61157: LD_INT 3
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 3
61166: PUSH
61167: LD_INT 5
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: LD_INT 3
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 0
61186: PUSH
61187: LD_INT 2
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 1
61196: PUSH
61197: LD_INT 3
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: PUSH
61207: LD_INT 4
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: LD_INT 4
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: LD_INT 3
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: LD_INT 2
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: LD_INT 4
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: LD_INT 2
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 4
61269: NEG
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 4
61280: NEG
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 3
61292: NEG
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: NEG
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 4
61314: NEG
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 5
61325: NEG
61326: PUSH
61327: LD_INT 0
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 5
61336: NEG
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 5
61348: NEG
61349: PUSH
61350: LD_INT 2
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 3
61360: NEG
61361: PUSH
61362: LD_INT 2
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 3
61371: NEG
61372: PUSH
61373: LD_INT 3
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 3
61383: NEG
61384: PUSH
61385: LD_INT 4
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: NEG
61396: PUSH
61397: LD_INT 3
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: LD_INT 2
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 3
61419: NEG
61420: PUSH
61421: LD_INT 2
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 4
61431: NEG
61432: PUSH
61433: LD_INT 3
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 4
61443: NEG
61444: PUSH
61445: LD_INT 4
61447: NEG
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 2
61455: NEG
61456: PUSH
61457: LD_INT 4
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 4
61467: NEG
61468: PUSH
61469: LD_INT 2
61471: NEG
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: LD_INT 4
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: LD_INT 5
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 1
61501: PUSH
61502: LD_INT 4
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: LD_INT 3
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: LD_INT 3
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: LD_INT 4
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: LD_INT 5
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: LD_INT 3
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: LD_INT 5
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61626: LD_ADDR_VAR 0 31
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: LD_INT 4
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 0
61643: PUSH
61644: LD_INT 3
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: PUSH
61654: LD_INT 4
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: LD_INT 5
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 5
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: LD_INT 4
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: LD_INT 3
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: LD_INT 5
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 2
61715: NEG
61716: PUSH
61717: LD_INT 3
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 3
61726: NEG
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 3
61737: NEG
61738: PUSH
61739: LD_INT 1
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 2
61749: NEG
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 2
61760: NEG
61761: PUSH
61762: LD_INT 1
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 3
61771: NEG
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 4
61782: NEG
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 4
61793: NEG
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 4
61805: NEG
61806: PUSH
61807: LD_INT 2
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 2
61817: NEG
61818: PUSH
61819: LD_INT 2
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 4
61828: NEG
61829: PUSH
61830: LD_INT 4
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 4
61840: NEG
61841: PUSH
61842: LD_INT 5
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 3
61852: NEG
61853: PUSH
61854: LD_INT 4
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 3
61864: NEG
61865: PUSH
61866: LD_INT 3
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 4
61876: NEG
61877: PUSH
61878: LD_INT 3
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 5
61888: NEG
61889: PUSH
61890: LD_INT 4
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 5
61900: NEG
61901: PUSH
61902: LD_INT 5
61904: NEG
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 3
61912: NEG
61913: PUSH
61914: LD_INT 5
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 5
61924: NEG
61925: PUSH
61926: LD_INT 3
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 3
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: LD_INT 4
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: LD_INT 3
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: LD_INT 2
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: LD_INT 2
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 3
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: LD_INT 4
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 2
62015: PUSH
62016: LD_INT 2
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 2
62026: NEG
62027: PUSH
62028: LD_INT 4
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 4
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 4
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 5
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 5
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 4
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 3
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 3
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 3
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 5
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62176: LD_ADDR_VAR 0 32
62180: PUSH
62181: LD_INT 4
62183: NEG
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 4
62194: NEG
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 3
62206: NEG
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 3
62217: NEG
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 4
62228: NEG
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 5
62239: NEG
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 5
62250: NEG
62251: PUSH
62252: LD_INT 1
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 5
62262: NEG
62263: PUSH
62264: LD_INT 2
62266: NEG
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 3
62274: NEG
62275: PUSH
62276: LD_INT 2
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 3
62285: NEG
62286: PUSH
62287: LD_INT 3
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 3
62297: NEG
62298: PUSH
62299: LD_INT 4
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 2
62309: NEG
62310: PUSH
62311: LD_INT 3
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 2
62321: NEG
62322: PUSH
62323: LD_INT 2
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 3
62333: NEG
62334: PUSH
62335: LD_INT 2
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 4
62345: NEG
62346: PUSH
62347: LD_INT 3
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 4
62357: NEG
62358: PUSH
62359: LD_INT 4
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 2
62369: NEG
62370: PUSH
62371: LD_INT 4
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 4
62381: NEG
62382: PUSH
62383: LD_INT 2
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: LD_INT 4
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 0
62404: PUSH
62405: LD_INT 5
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: LD_INT 4
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: LD_INT 3
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: LD_INT 3
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 4
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 5
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 2
62472: PUSH
62473: LD_INT 3
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 2
62483: NEG
62484: PUSH
62485: LD_INT 5
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 3
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 3
62505: PUSH
62506: LD_INT 1
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 4
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 4
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 3
62536: PUSH
62537: LD_INT 1
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 2
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 2
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 2
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 4
62578: PUSH
62579: LD_INT 2
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 4
62588: PUSH
62589: LD_INT 4
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 4
62598: PUSH
62599: LD_INT 3
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 5
62608: PUSH
62609: LD_INT 4
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 5
62618: PUSH
62619: LD_INT 5
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 4
62628: PUSH
62629: LD_INT 5
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 3
62638: PUSH
62639: LD_INT 4
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 3
62648: PUSH
62649: LD_INT 3
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 5
62658: PUSH
62659: LD_INT 3
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 3
62668: PUSH
62669: LD_INT 5
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62723: LD_ADDR_VAR 0 33
62727: PUSH
62728: LD_INT 4
62730: NEG
62731: PUSH
62732: LD_INT 4
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 4
62742: NEG
62743: PUSH
62744: LD_INT 5
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 3
62754: NEG
62755: PUSH
62756: LD_INT 4
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 3
62766: NEG
62767: PUSH
62768: LD_INT 3
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 4
62778: NEG
62779: PUSH
62780: LD_INT 3
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 5
62790: NEG
62791: PUSH
62792: LD_INT 4
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 5
62802: NEG
62803: PUSH
62804: LD_INT 5
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 3
62814: NEG
62815: PUSH
62816: LD_INT 5
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 5
62826: NEG
62827: PUSH
62828: LD_INT 3
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: LD_INT 3
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: LD_INT 4
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 1
62860: PUSH
62861: LD_INT 3
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: LD_INT 2
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: LD_INT 2
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: NEG
62894: PUSH
62895: LD_INT 3
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: LD_INT 4
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 2
62917: PUSH
62918: LD_INT 2
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 2
62928: NEG
62929: PUSH
62930: LD_INT 4
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 4
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 4
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 5
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 5
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 4
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 3
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 3
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 3
63012: PUSH
63013: LD_INT 2
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 5
63023: PUSH
63024: LD_INT 2
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 3
63033: PUSH
63034: LD_INT 3
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 3
63043: PUSH
63044: LD_INT 2
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 4
63053: PUSH
63054: LD_INT 3
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 4
63063: PUSH
63064: LD_INT 4
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 3
63073: PUSH
63074: LD_INT 4
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 2
63083: PUSH
63084: LD_INT 3
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 4
63103: PUSH
63104: LD_INT 2
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 2
63113: PUSH
63114: LD_INT 4
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: LD_INT 4
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 0
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: LD_INT 4
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: PUSH
63154: LD_INT 5
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: LD_INT 5
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: LD_INT 4
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: LD_INT 3
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: LD_INT 5
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 2
63205: NEG
63206: PUSH
63207: LD_INT 3
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63261: LD_ADDR_VAR 0 34
63265: PUSH
63266: LD_INT 0
63268: PUSH
63269: LD_INT 4
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: LD_INT 5
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: LD_INT 4
63293: NEG
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: LD_INT 3
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 3
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: LD_INT 4
63327: NEG
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 1
63335: NEG
63336: PUSH
63337: LD_INT 5
63339: NEG
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 2
63347: PUSH
63348: LD_INT 3
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 2
63358: NEG
63359: PUSH
63360: LD_INT 5
63362: NEG
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 3
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 3
63380: PUSH
63381: LD_INT 1
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 4
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 4
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 3
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: LD_INT 0
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 2
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 2
63442: PUSH
63443: LD_INT 2
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 4
63453: PUSH
63454: LD_INT 2
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 4
63463: PUSH
63464: LD_INT 4
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 4
63473: PUSH
63474: LD_INT 3
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 5
63483: PUSH
63484: LD_INT 4
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 5
63493: PUSH
63494: LD_INT 5
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 4
63503: PUSH
63504: LD_INT 5
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 3
63513: PUSH
63514: LD_INT 4
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 3
63523: PUSH
63524: LD_INT 3
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 5
63533: PUSH
63534: LD_INT 3
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 3
63543: PUSH
63544: LD_INT 5
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: LD_INT 3
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: LD_INT 2
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 1
63573: PUSH
63574: LD_INT 3
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: LD_INT 4
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: LD_INT 4
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 1
63603: NEG
63604: PUSH
63605: LD_INT 3
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: LD_INT 2
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 2
63625: PUSH
63626: LD_INT 4
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 2
63635: NEG
63636: PUSH
63637: LD_INT 2
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 4
63646: NEG
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 4
63657: NEG
63658: PUSH
63659: LD_INT 1
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 3
63669: NEG
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 3
63680: NEG
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 4
63691: NEG
63692: PUSH
63693: LD_INT 1
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 5
63702: NEG
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 5
63713: NEG
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 5
63725: NEG
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 3
63737: NEG
63738: PUSH
63739: LD_INT 2
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: ST_TO_ADDR
// end ; end ;
63793: GO 63796
63795: POP
// case btype of b_depot , b_warehouse :
63796: LD_VAR 0 1
63800: PUSH
63801: LD_INT 0
63803: DOUBLE
63804: EQUAL
63805: IFTRUE 63815
63807: LD_INT 1
63809: DOUBLE
63810: EQUAL
63811: IFTRUE 63815
63813: GO 64016
63815: POP
// case nation of nation_american :
63816: LD_VAR 0 5
63820: PUSH
63821: LD_INT 1
63823: DOUBLE
63824: EQUAL
63825: IFTRUE 63829
63827: GO 63885
63829: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63830: LD_ADDR_VAR 0 9
63834: PUSH
63835: LD_VAR 0 11
63839: PUSH
63840: LD_VAR 0 12
63844: PUSH
63845: LD_VAR 0 13
63849: PUSH
63850: LD_VAR 0 14
63854: PUSH
63855: LD_VAR 0 15
63859: PUSH
63860: LD_VAR 0 16
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: PUSH
63873: LD_VAR 0 4
63877: PUSH
63878: LD_INT 1
63880: PLUS
63881: ARRAY
63882: ST_TO_ADDR
63883: GO 64014
63885: LD_INT 2
63887: DOUBLE
63888: EQUAL
63889: IFTRUE 63893
63891: GO 63949
63893: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63894: LD_ADDR_VAR 0 9
63898: PUSH
63899: LD_VAR 0 17
63903: PUSH
63904: LD_VAR 0 18
63908: PUSH
63909: LD_VAR 0 19
63913: PUSH
63914: LD_VAR 0 20
63918: PUSH
63919: LD_VAR 0 21
63923: PUSH
63924: LD_VAR 0 22
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: PUSH
63937: LD_VAR 0 4
63941: PUSH
63942: LD_INT 1
63944: PLUS
63945: ARRAY
63946: ST_TO_ADDR
63947: GO 64014
63949: LD_INT 3
63951: DOUBLE
63952: EQUAL
63953: IFTRUE 63957
63955: GO 64013
63957: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63958: LD_ADDR_VAR 0 9
63962: PUSH
63963: LD_VAR 0 23
63967: PUSH
63968: LD_VAR 0 24
63972: PUSH
63973: LD_VAR 0 25
63977: PUSH
63978: LD_VAR 0 26
63982: PUSH
63983: LD_VAR 0 27
63987: PUSH
63988: LD_VAR 0 28
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: PUSH
64001: LD_VAR 0 4
64005: PUSH
64006: LD_INT 1
64008: PLUS
64009: ARRAY
64010: ST_TO_ADDR
64011: GO 64014
64013: POP
64014: GO 64569
64016: LD_INT 2
64018: DOUBLE
64019: EQUAL
64020: IFTRUE 64030
64022: LD_INT 3
64024: DOUBLE
64025: EQUAL
64026: IFTRUE 64030
64028: GO 64086
64030: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64031: LD_ADDR_VAR 0 9
64035: PUSH
64036: LD_VAR 0 29
64040: PUSH
64041: LD_VAR 0 30
64045: PUSH
64046: LD_VAR 0 31
64050: PUSH
64051: LD_VAR 0 32
64055: PUSH
64056: LD_VAR 0 33
64060: PUSH
64061: LD_VAR 0 34
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: PUSH
64074: LD_VAR 0 4
64078: PUSH
64079: LD_INT 1
64081: PLUS
64082: ARRAY
64083: ST_TO_ADDR
64084: GO 64569
64086: LD_INT 16
64088: DOUBLE
64089: EQUAL
64090: IFTRUE 64148
64092: LD_INT 17
64094: DOUBLE
64095: EQUAL
64096: IFTRUE 64148
64098: LD_INT 18
64100: DOUBLE
64101: EQUAL
64102: IFTRUE 64148
64104: LD_INT 19
64106: DOUBLE
64107: EQUAL
64108: IFTRUE 64148
64110: LD_INT 22
64112: DOUBLE
64113: EQUAL
64114: IFTRUE 64148
64116: LD_INT 20
64118: DOUBLE
64119: EQUAL
64120: IFTRUE 64148
64122: LD_INT 21
64124: DOUBLE
64125: EQUAL
64126: IFTRUE 64148
64128: LD_INT 23
64130: DOUBLE
64131: EQUAL
64132: IFTRUE 64148
64134: LD_INT 24
64136: DOUBLE
64137: EQUAL
64138: IFTRUE 64148
64140: LD_INT 25
64142: DOUBLE
64143: EQUAL
64144: IFTRUE 64148
64146: GO 64204
64148: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64149: LD_ADDR_VAR 0 9
64153: PUSH
64154: LD_VAR 0 35
64158: PUSH
64159: LD_VAR 0 36
64163: PUSH
64164: LD_VAR 0 37
64168: PUSH
64169: LD_VAR 0 38
64173: PUSH
64174: LD_VAR 0 39
64178: PUSH
64179: LD_VAR 0 40
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: PUSH
64192: LD_VAR 0 4
64196: PUSH
64197: LD_INT 1
64199: PLUS
64200: ARRAY
64201: ST_TO_ADDR
64202: GO 64569
64204: LD_INT 6
64206: DOUBLE
64207: EQUAL
64208: IFTRUE 64260
64210: LD_INT 7
64212: DOUBLE
64213: EQUAL
64214: IFTRUE 64260
64216: LD_INT 8
64218: DOUBLE
64219: EQUAL
64220: IFTRUE 64260
64222: LD_INT 13
64224: DOUBLE
64225: EQUAL
64226: IFTRUE 64260
64228: LD_INT 12
64230: DOUBLE
64231: EQUAL
64232: IFTRUE 64260
64234: LD_INT 15
64236: DOUBLE
64237: EQUAL
64238: IFTRUE 64260
64240: LD_INT 11
64242: DOUBLE
64243: EQUAL
64244: IFTRUE 64260
64246: LD_INT 14
64248: DOUBLE
64249: EQUAL
64250: IFTRUE 64260
64252: LD_INT 10
64254: DOUBLE
64255: EQUAL
64256: IFTRUE 64260
64258: GO 64316
64260: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64261: LD_ADDR_VAR 0 9
64265: PUSH
64266: LD_VAR 0 41
64270: PUSH
64271: LD_VAR 0 42
64275: PUSH
64276: LD_VAR 0 43
64280: PUSH
64281: LD_VAR 0 44
64285: PUSH
64286: LD_VAR 0 45
64290: PUSH
64291: LD_VAR 0 46
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: PUSH
64304: LD_VAR 0 4
64308: PUSH
64309: LD_INT 1
64311: PLUS
64312: ARRAY
64313: ST_TO_ADDR
64314: GO 64569
64316: LD_INT 36
64318: DOUBLE
64319: EQUAL
64320: IFTRUE 64324
64322: GO 64380
64324: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64325: LD_ADDR_VAR 0 9
64329: PUSH
64330: LD_VAR 0 47
64334: PUSH
64335: LD_VAR 0 48
64339: PUSH
64340: LD_VAR 0 49
64344: PUSH
64345: LD_VAR 0 50
64349: PUSH
64350: LD_VAR 0 51
64354: PUSH
64355: LD_VAR 0 52
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: PUSH
64368: LD_VAR 0 4
64372: PUSH
64373: LD_INT 1
64375: PLUS
64376: ARRAY
64377: ST_TO_ADDR
64378: GO 64569
64380: LD_INT 4
64382: DOUBLE
64383: EQUAL
64384: IFTRUE 64406
64386: LD_INT 5
64388: DOUBLE
64389: EQUAL
64390: IFTRUE 64406
64392: LD_INT 34
64394: DOUBLE
64395: EQUAL
64396: IFTRUE 64406
64398: LD_INT 37
64400: DOUBLE
64401: EQUAL
64402: IFTRUE 64406
64404: GO 64462
64406: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64407: LD_ADDR_VAR 0 9
64411: PUSH
64412: LD_VAR 0 53
64416: PUSH
64417: LD_VAR 0 54
64421: PUSH
64422: LD_VAR 0 55
64426: PUSH
64427: LD_VAR 0 56
64431: PUSH
64432: LD_VAR 0 57
64436: PUSH
64437: LD_VAR 0 58
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: PUSH
64450: LD_VAR 0 4
64454: PUSH
64455: LD_INT 1
64457: PLUS
64458: ARRAY
64459: ST_TO_ADDR
64460: GO 64569
64462: LD_INT 31
64464: DOUBLE
64465: EQUAL
64466: IFTRUE 64512
64468: LD_INT 32
64470: DOUBLE
64471: EQUAL
64472: IFTRUE 64512
64474: LD_INT 33
64476: DOUBLE
64477: EQUAL
64478: IFTRUE 64512
64480: LD_INT 27
64482: DOUBLE
64483: EQUAL
64484: IFTRUE 64512
64486: LD_INT 26
64488: DOUBLE
64489: EQUAL
64490: IFTRUE 64512
64492: LD_INT 28
64494: DOUBLE
64495: EQUAL
64496: IFTRUE 64512
64498: LD_INT 29
64500: DOUBLE
64501: EQUAL
64502: IFTRUE 64512
64504: LD_INT 30
64506: DOUBLE
64507: EQUAL
64508: IFTRUE 64512
64510: GO 64568
64512: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64513: LD_ADDR_VAR 0 9
64517: PUSH
64518: LD_VAR 0 59
64522: PUSH
64523: LD_VAR 0 60
64527: PUSH
64528: LD_VAR 0 61
64532: PUSH
64533: LD_VAR 0 62
64537: PUSH
64538: LD_VAR 0 63
64542: PUSH
64543: LD_VAR 0 64
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: PUSH
64556: LD_VAR 0 4
64560: PUSH
64561: LD_INT 1
64563: PLUS
64564: ARRAY
64565: ST_TO_ADDR
64566: GO 64569
64568: POP
// temp_list2 = [ ] ;
64569: LD_ADDR_VAR 0 10
64573: PUSH
64574: EMPTY
64575: ST_TO_ADDR
// for i in temp_list do
64576: LD_ADDR_VAR 0 8
64580: PUSH
64581: LD_VAR 0 9
64585: PUSH
64586: FOR_IN
64587: IFFALSE 64639
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64589: LD_ADDR_VAR 0 10
64593: PUSH
64594: LD_VAR 0 10
64598: PUSH
64599: LD_VAR 0 8
64603: PUSH
64604: LD_INT 1
64606: ARRAY
64607: PUSH
64608: LD_VAR 0 2
64612: PLUS
64613: PUSH
64614: LD_VAR 0 8
64618: PUSH
64619: LD_INT 2
64621: ARRAY
64622: PUSH
64623: LD_VAR 0 3
64627: PLUS
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: EMPTY
64634: LIST
64635: ADD
64636: ST_TO_ADDR
64637: GO 64586
64639: POP
64640: POP
// result = temp_list2 ;
64641: LD_ADDR_VAR 0 7
64645: PUSH
64646: LD_VAR 0 10
64650: ST_TO_ADDR
// end ;
64651: LD_VAR 0 7
64655: RET
// export function EnemyInRange ( unit , dist ) ; begin
64656: LD_INT 0
64658: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64659: LD_ADDR_VAR 0 3
64663: PUSH
64664: LD_VAR 0 1
64668: PPUSH
64669: CALL_OW 255
64673: PPUSH
64674: LD_VAR 0 1
64678: PPUSH
64679: CALL_OW 250
64683: PPUSH
64684: LD_VAR 0 1
64688: PPUSH
64689: CALL_OW 251
64693: PPUSH
64694: LD_VAR 0 2
64698: PPUSH
64699: CALL 38029 0 4
64703: PUSH
64704: LD_INT 4
64706: ARRAY
64707: ST_TO_ADDR
// end ;
64708: LD_VAR 0 3
64712: RET
// export function PlayerSeeMe ( unit ) ; begin
64713: LD_INT 0
64715: PPUSH
// result := See ( your_side , unit ) ;
64716: LD_ADDR_VAR 0 2
64720: PUSH
64721: LD_OWVAR 2
64725: PPUSH
64726: LD_VAR 0 1
64730: PPUSH
64731: CALL_OW 292
64735: ST_TO_ADDR
// end ;
64736: LD_VAR 0 2
64740: RET
// export function ReverseDir ( unit ) ; begin
64741: LD_INT 0
64743: PPUSH
// if not unit then
64744: LD_VAR 0 1
64748: NOT
64749: IFFALSE 64753
// exit ;
64751: GO 64776
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64753: LD_ADDR_VAR 0 2
64757: PUSH
64758: LD_VAR 0 1
64762: PPUSH
64763: CALL_OW 254
64767: PUSH
64768: LD_INT 3
64770: PLUS
64771: PUSH
64772: LD_INT 6
64774: MOD
64775: ST_TO_ADDR
// end ;
64776: LD_VAR 0 2
64780: RET
// export function ReverseArray ( array ) ; var i ; begin
64781: LD_INT 0
64783: PPUSH
64784: PPUSH
// if not array then
64785: LD_VAR 0 1
64789: NOT
64790: IFFALSE 64794
// exit ;
64792: GO 64849
// result := [ ] ;
64794: LD_ADDR_VAR 0 2
64798: PUSH
64799: EMPTY
64800: ST_TO_ADDR
// for i := array downto 1 do
64801: LD_ADDR_VAR 0 3
64805: PUSH
64806: DOUBLE
64807: LD_VAR 0 1
64811: INC
64812: ST_TO_ADDR
64813: LD_INT 1
64815: PUSH
64816: FOR_DOWNTO
64817: IFFALSE 64847
// result := Join ( result , array [ i ] ) ;
64819: LD_ADDR_VAR 0 2
64823: PUSH
64824: LD_VAR 0 2
64828: PPUSH
64829: LD_VAR 0 1
64833: PUSH
64834: LD_VAR 0 3
64838: ARRAY
64839: PPUSH
64840: CALL 69494 0 2
64844: ST_TO_ADDR
64845: GO 64816
64847: POP
64848: POP
// end ;
64849: LD_VAR 0 2
64853: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64854: LD_INT 0
64856: PPUSH
64857: PPUSH
64858: PPUSH
64859: PPUSH
64860: PPUSH
64861: PPUSH
// if not unit or not hexes then
64862: LD_VAR 0 1
64866: NOT
64867: PUSH
64868: LD_VAR 0 2
64872: NOT
64873: OR
64874: IFFALSE 64878
// exit ;
64876: GO 65001
// dist := 9999 ;
64878: LD_ADDR_VAR 0 5
64882: PUSH
64883: LD_INT 9999
64885: ST_TO_ADDR
// for i = 1 to hexes do
64886: LD_ADDR_VAR 0 4
64890: PUSH
64891: DOUBLE
64892: LD_INT 1
64894: DEC
64895: ST_TO_ADDR
64896: LD_VAR 0 2
64900: PUSH
64901: FOR_TO
64902: IFFALSE 64989
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64904: LD_ADDR_VAR 0 6
64908: PUSH
64909: LD_VAR 0 1
64913: PPUSH
64914: LD_VAR 0 2
64918: PUSH
64919: LD_VAR 0 4
64923: ARRAY
64924: PUSH
64925: LD_INT 1
64927: ARRAY
64928: PPUSH
64929: LD_VAR 0 2
64933: PUSH
64934: LD_VAR 0 4
64938: ARRAY
64939: PUSH
64940: LD_INT 2
64942: ARRAY
64943: PPUSH
64944: CALL_OW 297
64948: ST_TO_ADDR
// if tdist < dist then
64949: LD_VAR 0 6
64953: PUSH
64954: LD_VAR 0 5
64958: LESS
64959: IFFALSE 64987
// begin hex := hexes [ i ] ;
64961: LD_ADDR_VAR 0 8
64965: PUSH
64966: LD_VAR 0 2
64970: PUSH
64971: LD_VAR 0 4
64975: ARRAY
64976: ST_TO_ADDR
// dist := tdist ;
64977: LD_ADDR_VAR 0 5
64981: PUSH
64982: LD_VAR 0 6
64986: ST_TO_ADDR
// end ; end ;
64987: GO 64901
64989: POP
64990: POP
// result := hex ;
64991: LD_ADDR_VAR 0 3
64995: PUSH
64996: LD_VAR 0 8
65000: ST_TO_ADDR
// end ;
65001: LD_VAR 0 3
65005: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65006: LD_INT 0
65008: PPUSH
65009: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65010: LD_VAR 0 1
65014: NOT
65015: PUSH
65016: LD_VAR 0 1
65020: PUSH
65021: LD_INT 21
65023: PUSH
65024: LD_INT 2
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 23
65033: PUSH
65034: LD_INT 2
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PPUSH
65045: CALL_OW 69
65049: IN
65050: NOT
65051: OR
65052: IFFALSE 65056
// exit ;
65054: GO 65103
// for i = 1 to 3 do
65056: LD_ADDR_VAR 0 3
65060: PUSH
65061: DOUBLE
65062: LD_INT 1
65064: DEC
65065: ST_TO_ADDR
65066: LD_INT 3
65068: PUSH
65069: FOR_TO
65070: IFFALSE 65101
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65072: LD_VAR 0 1
65076: PPUSH
65077: CALL_OW 250
65081: PPUSH
65082: LD_VAR 0 1
65086: PPUSH
65087: CALL_OW 251
65091: PPUSH
65092: LD_INT 1
65094: PPUSH
65095: CALL_OW 453
65099: GO 65069
65101: POP
65102: POP
// end ;
65103: LD_VAR 0 2
65107: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65108: LD_INT 0
65110: PPUSH
65111: PPUSH
65112: PPUSH
65113: PPUSH
65114: PPUSH
65115: PPUSH
// if not unit or not enemy_unit then
65116: LD_VAR 0 1
65120: NOT
65121: PUSH
65122: LD_VAR 0 2
65126: NOT
65127: OR
65128: IFFALSE 65132
// exit ;
65130: GO 65599
// if GetLives ( i ) < 250 then
65132: LD_VAR 0 4
65136: PPUSH
65137: CALL_OW 256
65141: PUSH
65142: LD_INT 250
65144: LESS
65145: IFFALSE 65158
// begin ComAutodestruct ( i ) ;
65147: LD_VAR 0 4
65151: PPUSH
65152: CALL 65006 0 1
// exit ;
65156: GO 65599
// end ; x := GetX ( enemy_unit ) ;
65158: LD_ADDR_VAR 0 7
65162: PUSH
65163: LD_VAR 0 2
65167: PPUSH
65168: CALL_OW 250
65172: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65173: LD_ADDR_VAR 0 8
65177: PUSH
65178: LD_VAR 0 2
65182: PPUSH
65183: CALL_OW 251
65187: ST_TO_ADDR
// if not x or not y then
65188: LD_VAR 0 7
65192: NOT
65193: PUSH
65194: LD_VAR 0 8
65198: NOT
65199: OR
65200: IFFALSE 65204
// exit ;
65202: GO 65599
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65204: LD_ADDR_VAR 0 6
65208: PUSH
65209: LD_VAR 0 7
65213: PPUSH
65214: LD_INT 0
65216: PPUSH
65217: LD_INT 4
65219: PPUSH
65220: CALL_OW 272
65224: PUSH
65225: LD_VAR 0 8
65229: PPUSH
65230: LD_INT 0
65232: PPUSH
65233: LD_INT 4
65235: PPUSH
65236: CALL_OW 273
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_VAR 0 7
65249: PPUSH
65250: LD_INT 1
65252: PPUSH
65253: LD_INT 4
65255: PPUSH
65256: CALL_OW 272
65260: PUSH
65261: LD_VAR 0 8
65265: PPUSH
65266: LD_INT 1
65268: PPUSH
65269: LD_INT 4
65271: PPUSH
65272: CALL_OW 273
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_VAR 0 7
65285: PPUSH
65286: LD_INT 2
65288: PPUSH
65289: LD_INT 4
65291: PPUSH
65292: CALL_OW 272
65296: PUSH
65297: LD_VAR 0 8
65301: PPUSH
65302: LD_INT 2
65304: PPUSH
65305: LD_INT 4
65307: PPUSH
65308: CALL_OW 273
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_VAR 0 7
65321: PPUSH
65322: LD_INT 3
65324: PPUSH
65325: LD_INT 4
65327: PPUSH
65328: CALL_OW 272
65332: PUSH
65333: LD_VAR 0 8
65337: PPUSH
65338: LD_INT 3
65340: PPUSH
65341: LD_INT 4
65343: PPUSH
65344: CALL_OW 273
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_VAR 0 7
65357: PPUSH
65358: LD_INT 4
65360: PPUSH
65361: LD_INT 4
65363: PPUSH
65364: CALL_OW 272
65368: PUSH
65369: LD_VAR 0 8
65373: PPUSH
65374: LD_INT 4
65376: PPUSH
65377: LD_INT 4
65379: PPUSH
65380: CALL_OW 273
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_VAR 0 7
65393: PPUSH
65394: LD_INT 5
65396: PPUSH
65397: LD_INT 4
65399: PPUSH
65400: CALL_OW 272
65404: PUSH
65405: LD_VAR 0 8
65409: PPUSH
65410: LD_INT 5
65412: PPUSH
65413: LD_INT 4
65415: PPUSH
65416: CALL_OW 273
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: ST_TO_ADDR
// for i = tmp downto 1 do
65433: LD_ADDR_VAR 0 4
65437: PUSH
65438: DOUBLE
65439: LD_VAR 0 6
65443: INC
65444: ST_TO_ADDR
65445: LD_INT 1
65447: PUSH
65448: FOR_DOWNTO
65449: IFFALSE 65550
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65451: LD_VAR 0 6
65455: PUSH
65456: LD_VAR 0 4
65460: ARRAY
65461: PUSH
65462: LD_INT 1
65464: ARRAY
65465: PPUSH
65466: LD_VAR 0 6
65470: PUSH
65471: LD_VAR 0 4
65475: ARRAY
65476: PUSH
65477: LD_INT 2
65479: ARRAY
65480: PPUSH
65481: CALL_OW 488
65485: NOT
65486: PUSH
65487: LD_VAR 0 6
65491: PUSH
65492: LD_VAR 0 4
65496: ARRAY
65497: PUSH
65498: LD_INT 1
65500: ARRAY
65501: PPUSH
65502: LD_VAR 0 6
65506: PUSH
65507: LD_VAR 0 4
65511: ARRAY
65512: PUSH
65513: LD_INT 2
65515: ARRAY
65516: PPUSH
65517: CALL_OW 428
65521: PUSH
65522: LD_INT 0
65524: NONEQUAL
65525: OR
65526: IFFALSE 65548
// tmp := Delete ( tmp , i ) ;
65528: LD_ADDR_VAR 0 6
65532: PUSH
65533: LD_VAR 0 6
65537: PPUSH
65538: LD_VAR 0 4
65542: PPUSH
65543: CALL_OW 3
65547: ST_TO_ADDR
65548: GO 65448
65550: POP
65551: POP
// j := GetClosestHex ( unit , tmp ) ;
65552: LD_ADDR_VAR 0 5
65556: PUSH
65557: LD_VAR 0 1
65561: PPUSH
65562: LD_VAR 0 6
65566: PPUSH
65567: CALL 64854 0 2
65571: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65572: LD_VAR 0 1
65576: PPUSH
65577: LD_VAR 0 5
65581: PUSH
65582: LD_INT 1
65584: ARRAY
65585: PPUSH
65586: LD_VAR 0 5
65590: PUSH
65591: LD_INT 2
65593: ARRAY
65594: PPUSH
65595: CALL_OW 111
// end ;
65599: LD_VAR 0 3
65603: RET
// export function PrepareApemanSoldier ( ) ; begin
65604: LD_INT 0
65606: PPUSH
// uc_nation := 0 ;
65607: LD_ADDR_OWVAR 21
65611: PUSH
65612: LD_INT 0
65614: ST_TO_ADDR
// hc_sex := sex_male ;
65615: LD_ADDR_OWVAR 27
65619: PUSH
65620: LD_INT 1
65622: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65623: LD_ADDR_OWVAR 28
65627: PUSH
65628: LD_INT 15
65630: ST_TO_ADDR
// hc_gallery :=  ;
65631: LD_ADDR_OWVAR 33
65635: PUSH
65636: LD_STRING 
65638: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65639: LD_ADDR_OWVAR 31
65643: PUSH
65644: LD_INT 0
65646: PPUSH
65647: LD_INT 3
65649: PPUSH
65650: CALL_OW 12
65654: PUSH
65655: LD_INT 0
65657: PPUSH
65658: LD_INT 3
65660: PPUSH
65661: CALL_OW 12
65665: PUSH
65666: LD_INT 0
65668: PUSH
65669: LD_INT 0
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: ST_TO_ADDR
// end ;
65678: LD_VAR 0 1
65682: RET
// export function PrepareApemanEngineer ( ) ; begin
65683: LD_INT 0
65685: PPUSH
// uc_nation := 0 ;
65686: LD_ADDR_OWVAR 21
65690: PUSH
65691: LD_INT 0
65693: ST_TO_ADDR
// hc_sex := sex_male ;
65694: LD_ADDR_OWVAR 27
65698: PUSH
65699: LD_INT 1
65701: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65702: LD_ADDR_OWVAR 28
65706: PUSH
65707: LD_INT 16
65709: ST_TO_ADDR
// hc_gallery :=  ;
65710: LD_ADDR_OWVAR 33
65714: PUSH
65715: LD_STRING 
65717: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65718: LD_ADDR_OWVAR 31
65722: PUSH
65723: LD_INT 0
65725: PPUSH
65726: LD_INT 3
65728: PPUSH
65729: CALL_OW 12
65733: PUSH
65734: LD_INT 0
65736: PPUSH
65737: LD_INT 3
65739: PPUSH
65740: CALL_OW 12
65744: PUSH
65745: LD_INT 0
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: ST_TO_ADDR
// end ;
65757: LD_VAR 0 1
65761: RET
// export function PrepareApeman ( agressivity ) ; begin
65762: LD_INT 0
65764: PPUSH
// uc_side := 0 ;
65765: LD_ADDR_OWVAR 20
65769: PUSH
65770: LD_INT 0
65772: ST_TO_ADDR
// uc_nation := 0 ;
65773: LD_ADDR_OWVAR 21
65777: PUSH
65778: LD_INT 0
65780: ST_TO_ADDR
// hc_sex := sex_male ;
65781: LD_ADDR_OWVAR 27
65785: PUSH
65786: LD_INT 1
65788: ST_TO_ADDR
// hc_class := class_apeman ;
65789: LD_ADDR_OWVAR 28
65793: PUSH
65794: LD_INT 12
65796: ST_TO_ADDR
// hc_gallery :=  ;
65797: LD_ADDR_OWVAR 33
65801: PUSH
65802: LD_STRING 
65804: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65805: LD_ADDR_OWVAR 35
65809: PUSH
65810: LD_VAR 0 1
65814: NEG
65815: PPUSH
65816: LD_VAR 0 1
65820: PPUSH
65821: CALL_OW 12
65825: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65826: LD_ADDR_OWVAR 31
65830: PUSH
65831: LD_INT 0
65833: PPUSH
65834: LD_INT 3
65836: PPUSH
65837: CALL_OW 12
65841: PUSH
65842: LD_INT 0
65844: PPUSH
65845: LD_INT 3
65847: PPUSH
65848: CALL_OW 12
65852: PUSH
65853: LD_INT 0
65855: PUSH
65856: LD_INT 0
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: ST_TO_ADDR
// end ;
65865: LD_VAR 0 2
65869: RET
// export function PrepareTiger ( agressivity ) ; begin
65870: LD_INT 0
65872: PPUSH
// uc_side := 0 ;
65873: LD_ADDR_OWVAR 20
65877: PUSH
65878: LD_INT 0
65880: ST_TO_ADDR
// uc_nation := 0 ;
65881: LD_ADDR_OWVAR 21
65885: PUSH
65886: LD_INT 0
65888: ST_TO_ADDR
// hc_class := class_tiger ;
65889: LD_ADDR_OWVAR 28
65893: PUSH
65894: LD_INT 14
65896: ST_TO_ADDR
// hc_gallery :=  ;
65897: LD_ADDR_OWVAR 33
65901: PUSH
65902: LD_STRING 
65904: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65905: LD_ADDR_OWVAR 35
65909: PUSH
65910: LD_VAR 0 1
65914: NEG
65915: PPUSH
65916: LD_VAR 0 1
65920: PPUSH
65921: CALL_OW 12
65925: ST_TO_ADDR
// end ;
65926: LD_VAR 0 2
65930: RET
// export function PrepareEnchidna ( ) ; begin
65931: LD_INT 0
65933: PPUSH
// uc_side := 0 ;
65934: LD_ADDR_OWVAR 20
65938: PUSH
65939: LD_INT 0
65941: ST_TO_ADDR
// uc_nation := 0 ;
65942: LD_ADDR_OWVAR 21
65946: PUSH
65947: LD_INT 0
65949: ST_TO_ADDR
// hc_class := class_baggie ;
65950: LD_ADDR_OWVAR 28
65954: PUSH
65955: LD_INT 13
65957: ST_TO_ADDR
// hc_gallery :=  ;
65958: LD_ADDR_OWVAR 33
65962: PUSH
65963: LD_STRING 
65965: ST_TO_ADDR
// end ;
65966: LD_VAR 0 1
65970: RET
// export function PrepareFrog ( ) ; begin
65971: LD_INT 0
65973: PPUSH
// uc_side := 0 ;
65974: LD_ADDR_OWVAR 20
65978: PUSH
65979: LD_INT 0
65981: ST_TO_ADDR
// uc_nation := 0 ;
65982: LD_ADDR_OWVAR 21
65986: PUSH
65987: LD_INT 0
65989: ST_TO_ADDR
// hc_class := class_frog ;
65990: LD_ADDR_OWVAR 28
65994: PUSH
65995: LD_INT 19
65997: ST_TO_ADDR
// hc_gallery :=  ;
65998: LD_ADDR_OWVAR 33
66002: PUSH
66003: LD_STRING 
66005: ST_TO_ADDR
// end ;
66006: LD_VAR 0 1
66010: RET
// export function PrepareFish ( ) ; begin
66011: LD_INT 0
66013: PPUSH
// uc_side := 0 ;
66014: LD_ADDR_OWVAR 20
66018: PUSH
66019: LD_INT 0
66021: ST_TO_ADDR
// uc_nation := 0 ;
66022: LD_ADDR_OWVAR 21
66026: PUSH
66027: LD_INT 0
66029: ST_TO_ADDR
// hc_class := class_fish ;
66030: LD_ADDR_OWVAR 28
66034: PUSH
66035: LD_INT 20
66037: ST_TO_ADDR
// hc_gallery :=  ;
66038: LD_ADDR_OWVAR 33
66042: PUSH
66043: LD_STRING 
66045: ST_TO_ADDR
// end ;
66046: LD_VAR 0 1
66050: RET
// export function PrepareBird ( ) ; begin
66051: LD_INT 0
66053: PPUSH
// uc_side := 0 ;
66054: LD_ADDR_OWVAR 20
66058: PUSH
66059: LD_INT 0
66061: ST_TO_ADDR
// uc_nation := 0 ;
66062: LD_ADDR_OWVAR 21
66066: PUSH
66067: LD_INT 0
66069: ST_TO_ADDR
// hc_class := class_phororhacos ;
66070: LD_ADDR_OWVAR 28
66074: PUSH
66075: LD_INT 18
66077: ST_TO_ADDR
// hc_gallery :=  ;
66078: LD_ADDR_OWVAR 33
66082: PUSH
66083: LD_STRING 
66085: ST_TO_ADDR
// end ;
66086: LD_VAR 0 1
66090: RET
// export function PrepareHorse ( ) ; begin
66091: LD_INT 0
66093: PPUSH
// uc_side := 0 ;
66094: LD_ADDR_OWVAR 20
66098: PUSH
66099: LD_INT 0
66101: ST_TO_ADDR
// uc_nation := 0 ;
66102: LD_ADDR_OWVAR 21
66106: PUSH
66107: LD_INT 0
66109: ST_TO_ADDR
// hc_class := class_horse ;
66110: LD_ADDR_OWVAR 28
66114: PUSH
66115: LD_INT 21
66117: ST_TO_ADDR
// hc_gallery :=  ;
66118: LD_ADDR_OWVAR 33
66122: PUSH
66123: LD_STRING 
66125: ST_TO_ADDR
// end ;
66126: LD_VAR 0 1
66130: RET
// export function PrepareMastodont ( ) ; begin
66131: LD_INT 0
66133: PPUSH
// uc_side := 0 ;
66134: LD_ADDR_OWVAR 20
66138: PUSH
66139: LD_INT 0
66141: ST_TO_ADDR
// uc_nation := 0 ;
66142: LD_ADDR_OWVAR 21
66146: PUSH
66147: LD_INT 0
66149: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66150: LD_ADDR_OWVAR 37
66154: PUSH
66155: LD_INT 31
66157: ST_TO_ADDR
// vc_control := control_rider ;
66158: LD_ADDR_OWVAR 38
66162: PUSH
66163: LD_INT 4
66165: ST_TO_ADDR
// end ;
66166: LD_VAR 0 1
66170: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66171: LD_INT 0
66173: PPUSH
66174: PPUSH
66175: PPUSH
// uc_side = 0 ;
66176: LD_ADDR_OWVAR 20
66180: PUSH
66181: LD_INT 0
66183: ST_TO_ADDR
// uc_nation = 0 ;
66184: LD_ADDR_OWVAR 21
66188: PUSH
66189: LD_INT 0
66191: ST_TO_ADDR
// InitHc_All ( ) ;
66192: CALL_OW 584
// InitVc ;
66196: CALL_OW 20
// if mastodonts then
66200: LD_VAR 0 6
66204: IFFALSE 66271
// for i = 1 to mastodonts do
66206: LD_ADDR_VAR 0 11
66210: PUSH
66211: DOUBLE
66212: LD_INT 1
66214: DEC
66215: ST_TO_ADDR
66216: LD_VAR 0 6
66220: PUSH
66221: FOR_TO
66222: IFFALSE 66269
// begin vc_chassis := 31 ;
66224: LD_ADDR_OWVAR 37
66228: PUSH
66229: LD_INT 31
66231: ST_TO_ADDR
// vc_control := control_rider ;
66232: LD_ADDR_OWVAR 38
66236: PUSH
66237: LD_INT 4
66239: ST_TO_ADDR
// animal := CreateVehicle ;
66240: LD_ADDR_VAR 0 12
66244: PUSH
66245: CALL_OW 45
66249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66250: LD_VAR 0 12
66254: PPUSH
66255: LD_VAR 0 8
66259: PPUSH
66260: LD_INT 0
66262: PPUSH
66263: CALL 68399 0 3
// end ;
66267: GO 66221
66269: POP
66270: POP
// if horses then
66271: LD_VAR 0 5
66275: IFFALSE 66342
// for i = 1 to horses do
66277: LD_ADDR_VAR 0 11
66281: PUSH
66282: DOUBLE
66283: LD_INT 1
66285: DEC
66286: ST_TO_ADDR
66287: LD_VAR 0 5
66291: PUSH
66292: FOR_TO
66293: IFFALSE 66340
// begin hc_class := 21 ;
66295: LD_ADDR_OWVAR 28
66299: PUSH
66300: LD_INT 21
66302: ST_TO_ADDR
// hc_gallery :=  ;
66303: LD_ADDR_OWVAR 33
66307: PUSH
66308: LD_STRING 
66310: ST_TO_ADDR
// animal := CreateHuman ;
66311: LD_ADDR_VAR 0 12
66315: PUSH
66316: CALL_OW 44
66320: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66321: LD_VAR 0 12
66325: PPUSH
66326: LD_VAR 0 8
66330: PPUSH
66331: LD_INT 0
66333: PPUSH
66334: CALL 68399 0 3
// end ;
66338: GO 66292
66340: POP
66341: POP
// if birds then
66342: LD_VAR 0 1
66346: IFFALSE 66413
// for i = 1 to birds do
66348: LD_ADDR_VAR 0 11
66352: PUSH
66353: DOUBLE
66354: LD_INT 1
66356: DEC
66357: ST_TO_ADDR
66358: LD_VAR 0 1
66362: PUSH
66363: FOR_TO
66364: IFFALSE 66411
// begin hc_class := 18 ;
66366: LD_ADDR_OWVAR 28
66370: PUSH
66371: LD_INT 18
66373: ST_TO_ADDR
// hc_gallery =  ;
66374: LD_ADDR_OWVAR 33
66378: PUSH
66379: LD_STRING 
66381: ST_TO_ADDR
// animal := CreateHuman ;
66382: LD_ADDR_VAR 0 12
66386: PUSH
66387: CALL_OW 44
66391: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66392: LD_VAR 0 12
66396: PPUSH
66397: LD_VAR 0 8
66401: PPUSH
66402: LD_INT 0
66404: PPUSH
66405: CALL 68399 0 3
// end ;
66409: GO 66363
66411: POP
66412: POP
// if tigers then
66413: LD_VAR 0 2
66417: IFFALSE 66501
// for i = 1 to tigers do
66419: LD_ADDR_VAR 0 11
66423: PUSH
66424: DOUBLE
66425: LD_INT 1
66427: DEC
66428: ST_TO_ADDR
66429: LD_VAR 0 2
66433: PUSH
66434: FOR_TO
66435: IFFALSE 66499
// begin hc_class = class_tiger ;
66437: LD_ADDR_OWVAR 28
66441: PUSH
66442: LD_INT 14
66444: ST_TO_ADDR
// hc_gallery =  ;
66445: LD_ADDR_OWVAR 33
66449: PUSH
66450: LD_STRING 
66452: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66453: LD_ADDR_OWVAR 35
66457: PUSH
66458: LD_INT 7
66460: NEG
66461: PPUSH
66462: LD_INT 7
66464: PPUSH
66465: CALL_OW 12
66469: ST_TO_ADDR
// animal := CreateHuman ;
66470: LD_ADDR_VAR 0 12
66474: PUSH
66475: CALL_OW 44
66479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66480: LD_VAR 0 12
66484: PPUSH
66485: LD_VAR 0 8
66489: PPUSH
66490: LD_INT 0
66492: PPUSH
66493: CALL 68399 0 3
// end ;
66497: GO 66434
66499: POP
66500: POP
// if apemans then
66501: LD_VAR 0 3
66505: IFFALSE 66628
// for i = 1 to apemans do
66507: LD_ADDR_VAR 0 11
66511: PUSH
66512: DOUBLE
66513: LD_INT 1
66515: DEC
66516: ST_TO_ADDR
66517: LD_VAR 0 3
66521: PUSH
66522: FOR_TO
66523: IFFALSE 66626
// begin hc_class = class_apeman ;
66525: LD_ADDR_OWVAR 28
66529: PUSH
66530: LD_INT 12
66532: ST_TO_ADDR
// hc_gallery =  ;
66533: LD_ADDR_OWVAR 33
66537: PUSH
66538: LD_STRING 
66540: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66541: LD_ADDR_OWVAR 35
66545: PUSH
66546: LD_INT 2
66548: NEG
66549: PPUSH
66550: LD_INT 2
66552: PPUSH
66553: CALL_OW 12
66557: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66558: LD_ADDR_OWVAR 31
66562: PUSH
66563: LD_INT 1
66565: PPUSH
66566: LD_INT 3
66568: PPUSH
66569: CALL_OW 12
66573: PUSH
66574: LD_INT 1
66576: PPUSH
66577: LD_INT 3
66579: PPUSH
66580: CALL_OW 12
66584: PUSH
66585: LD_INT 0
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// animal := CreateHuman ;
66597: LD_ADDR_VAR 0 12
66601: PUSH
66602: CALL_OW 44
66606: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66607: LD_VAR 0 12
66611: PPUSH
66612: LD_VAR 0 8
66616: PPUSH
66617: LD_INT 0
66619: PPUSH
66620: CALL 68399 0 3
// end ;
66624: GO 66522
66626: POP
66627: POP
// if enchidnas then
66628: LD_VAR 0 4
66632: IFFALSE 66699
// for i = 1 to enchidnas do
66634: LD_ADDR_VAR 0 11
66638: PUSH
66639: DOUBLE
66640: LD_INT 1
66642: DEC
66643: ST_TO_ADDR
66644: LD_VAR 0 4
66648: PUSH
66649: FOR_TO
66650: IFFALSE 66697
// begin hc_class = 13 ;
66652: LD_ADDR_OWVAR 28
66656: PUSH
66657: LD_INT 13
66659: ST_TO_ADDR
// hc_gallery =  ;
66660: LD_ADDR_OWVAR 33
66664: PUSH
66665: LD_STRING 
66667: ST_TO_ADDR
// animal := CreateHuman ;
66668: LD_ADDR_VAR 0 12
66672: PUSH
66673: CALL_OW 44
66677: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66678: LD_VAR 0 12
66682: PPUSH
66683: LD_VAR 0 8
66687: PPUSH
66688: LD_INT 0
66690: PPUSH
66691: CALL 68399 0 3
// end ;
66695: GO 66649
66697: POP
66698: POP
// if fishes then
66699: LD_VAR 0 7
66703: IFFALSE 66770
// for i = 1 to fishes do
66705: LD_ADDR_VAR 0 11
66709: PUSH
66710: DOUBLE
66711: LD_INT 1
66713: DEC
66714: ST_TO_ADDR
66715: LD_VAR 0 7
66719: PUSH
66720: FOR_TO
66721: IFFALSE 66768
// begin hc_class = 20 ;
66723: LD_ADDR_OWVAR 28
66727: PUSH
66728: LD_INT 20
66730: ST_TO_ADDR
// hc_gallery =  ;
66731: LD_ADDR_OWVAR 33
66735: PUSH
66736: LD_STRING 
66738: ST_TO_ADDR
// animal := CreateHuman ;
66739: LD_ADDR_VAR 0 12
66743: PUSH
66744: CALL_OW 44
66748: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66749: LD_VAR 0 12
66753: PPUSH
66754: LD_VAR 0 9
66758: PPUSH
66759: LD_INT 0
66761: PPUSH
66762: CALL 68399 0 3
// end ;
66766: GO 66720
66768: POP
66769: POP
// end ;
66770: LD_VAR 0 10
66774: RET
// export function WantHeal ( sci , unit ) ; begin
66775: LD_INT 0
66777: PPUSH
// if GetTaskList ( sci ) > 0 then
66778: LD_VAR 0 1
66782: PPUSH
66783: CALL_OW 437
66787: PUSH
66788: LD_INT 0
66790: GREATER
66791: IFFALSE 66861
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66793: LD_VAR 0 1
66797: PPUSH
66798: CALL_OW 437
66802: PUSH
66803: LD_INT 1
66805: ARRAY
66806: PUSH
66807: LD_INT 1
66809: ARRAY
66810: PUSH
66811: LD_STRING l
66813: EQUAL
66814: PUSH
66815: LD_VAR 0 1
66819: PPUSH
66820: CALL_OW 437
66824: PUSH
66825: LD_INT 1
66827: ARRAY
66828: PUSH
66829: LD_INT 4
66831: ARRAY
66832: PUSH
66833: LD_VAR 0 2
66837: EQUAL
66838: AND
66839: IFFALSE 66851
// result := true else
66841: LD_ADDR_VAR 0 3
66845: PUSH
66846: LD_INT 1
66848: ST_TO_ADDR
66849: GO 66859
// result := false ;
66851: LD_ADDR_VAR 0 3
66855: PUSH
66856: LD_INT 0
66858: ST_TO_ADDR
// end else
66859: GO 66869
// result := false ;
66861: LD_ADDR_VAR 0 3
66865: PUSH
66866: LD_INT 0
66868: ST_TO_ADDR
// end ;
66869: LD_VAR 0 3
66873: RET
// export function HealTarget ( sci ) ; begin
66874: LD_INT 0
66876: PPUSH
// if not sci then
66877: LD_VAR 0 1
66881: NOT
66882: IFFALSE 66886
// exit ;
66884: GO 66951
// result := 0 ;
66886: LD_ADDR_VAR 0 2
66890: PUSH
66891: LD_INT 0
66893: ST_TO_ADDR
// if GetTaskList ( sci ) then
66894: LD_VAR 0 1
66898: PPUSH
66899: CALL_OW 437
66903: IFFALSE 66951
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66905: LD_VAR 0 1
66909: PPUSH
66910: CALL_OW 437
66914: PUSH
66915: LD_INT 1
66917: ARRAY
66918: PUSH
66919: LD_INT 1
66921: ARRAY
66922: PUSH
66923: LD_STRING l
66925: EQUAL
66926: IFFALSE 66951
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66928: LD_ADDR_VAR 0 2
66932: PUSH
66933: LD_VAR 0 1
66937: PPUSH
66938: CALL_OW 437
66942: PUSH
66943: LD_INT 1
66945: ARRAY
66946: PUSH
66947: LD_INT 4
66949: ARRAY
66950: ST_TO_ADDR
// end ;
66951: LD_VAR 0 2
66955: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66956: LD_INT 0
66958: PPUSH
66959: PPUSH
66960: PPUSH
66961: PPUSH
// if not base_units then
66962: LD_VAR 0 1
66966: NOT
66967: IFFALSE 66971
// exit ;
66969: GO 67058
// result := false ;
66971: LD_ADDR_VAR 0 2
66975: PUSH
66976: LD_INT 0
66978: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66979: LD_ADDR_VAR 0 5
66983: PUSH
66984: LD_VAR 0 1
66988: PPUSH
66989: LD_INT 21
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PPUSH
66999: CALL_OW 72
67003: ST_TO_ADDR
// if not tmp then
67004: LD_VAR 0 5
67008: NOT
67009: IFFALSE 67013
// exit ;
67011: GO 67058
// for i in tmp do
67013: LD_ADDR_VAR 0 3
67017: PUSH
67018: LD_VAR 0 5
67022: PUSH
67023: FOR_IN
67024: IFFALSE 67056
// begin result := EnemyInRange ( i , 22 ) ;
67026: LD_ADDR_VAR 0 2
67030: PUSH
67031: LD_VAR 0 3
67035: PPUSH
67036: LD_INT 22
67038: PPUSH
67039: CALL 64656 0 2
67043: ST_TO_ADDR
// if result then
67044: LD_VAR 0 2
67048: IFFALSE 67054
// exit ;
67050: POP
67051: POP
67052: GO 67058
// end ;
67054: GO 67023
67056: POP
67057: POP
// end ;
67058: LD_VAR 0 2
67062: RET
// export function FilterByTag ( units , tag ) ; begin
67063: LD_INT 0
67065: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67066: LD_ADDR_VAR 0 3
67070: PUSH
67071: LD_VAR 0 1
67075: PPUSH
67076: LD_INT 120
67078: PUSH
67079: LD_VAR 0 2
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PPUSH
67088: CALL_OW 72
67092: ST_TO_ADDR
// end ;
67093: LD_VAR 0 3
67097: RET
// export function IsDriver ( un ) ; begin
67098: LD_INT 0
67100: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67101: LD_ADDR_VAR 0 2
67105: PUSH
67106: LD_VAR 0 1
67110: PUSH
67111: LD_INT 55
67113: PUSH
67114: EMPTY
67115: LIST
67116: PPUSH
67117: CALL_OW 69
67121: IN
67122: ST_TO_ADDR
// end ;
67123: LD_VAR 0 2
67127: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67128: LD_INT 0
67130: PPUSH
67131: PPUSH
// list := [ ] ;
67132: LD_ADDR_VAR 0 5
67136: PUSH
67137: EMPTY
67138: ST_TO_ADDR
// case d of 0 :
67139: LD_VAR 0 3
67143: PUSH
67144: LD_INT 0
67146: DOUBLE
67147: EQUAL
67148: IFTRUE 67152
67150: GO 67285
67152: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67153: LD_ADDR_VAR 0 5
67157: PUSH
67158: LD_VAR 0 1
67162: PUSH
67163: LD_INT 4
67165: MINUS
67166: PUSH
67167: LD_VAR 0 2
67171: PUSH
67172: LD_INT 4
67174: MINUS
67175: PUSH
67176: LD_INT 2
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: LIST
67183: PUSH
67184: LD_VAR 0 1
67188: PUSH
67189: LD_INT 3
67191: MINUS
67192: PUSH
67193: LD_VAR 0 2
67197: PUSH
67198: LD_INT 1
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: LIST
67205: PUSH
67206: LD_VAR 0 1
67210: PUSH
67211: LD_INT 4
67213: PLUS
67214: PUSH
67215: LD_VAR 0 2
67219: PUSH
67220: LD_INT 4
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: LIST
67227: PUSH
67228: LD_VAR 0 1
67232: PUSH
67233: LD_INT 3
67235: PLUS
67236: PUSH
67237: LD_VAR 0 2
67241: PUSH
67242: LD_INT 3
67244: PLUS
67245: PUSH
67246: LD_INT 5
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: LIST
67253: PUSH
67254: LD_VAR 0 1
67258: PUSH
67259: LD_VAR 0 2
67263: PUSH
67264: LD_INT 4
67266: PLUS
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: LIST
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: ST_TO_ADDR
// end ; 1 :
67283: GO 67983
67285: LD_INT 1
67287: DOUBLE
67288: EQUAL
67289: IFTRUE 67293
67291: GO 67426
67293: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67294: LD_ADDR_VAR 0 5
67298: PUSH
67299: LD_VAR 0 1
67303: PUSH
67304: LD_VAR 0 2
67308: PUSH
67309: LD_INT 4
67311: MINUS
67312: PUSH
67313: LD_INT 3
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: LIST
67320: PUSH
67321: LD_VAR 0 1
67325: PUSH
67326: LD_INT 3
67328: MINUS
67329: PUSH
67330: LD_VAR 0 2
67334: PUSH
67335: LD_INT 3
67337: MINUS
67338: PUSH
67339: LD_INT 2
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: LIST
67346: PUSH
67347: LD_VAR 0 1
67351: PUSH
67352: LD_INT 4
67354: MINUS
67355: PUSH
67356: LD_VAR 0 2
67360: PUSH
67361: LD_INT 1
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: LIST
67368: PUSH
67369: LD_VAR 0 1
67373: PUSH
67374: LD_VAR 0 2
67378: PUSH
67379: LD_INT 3
67381: PLUS
67382: PUSH
67383: LD_INT 0
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: PUSH
67391: LD_VAR 0 1
67395: PUSH
67396: LD_INT 4
67398: PLUS
67399: PUSH
67400: LD_VAR 0 2
67404: PUSH
67405: LD_INT 4
67407: PLUS
67408: PUSH
67409: LD_INT 5
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: LIST
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: ST_TO_ADDR
// end ; 2 :
67424: GO 67983
67426: LD_INT 2
67428: DOUBLE
67429: EQUAL
67430: IFTRUE 67434
67432: GO 67563
67434: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67435: LD_ADDR_VAR 0 5
67439: PUSH
67440: LD_VAR 0 1
67444: PUSH
67445: LD_VAR 0 2
67449: PUSH
67450: LD_INT 3
67452: MINUS
67453: PUSH
67454: LD_INT 3
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: LIST
67461: PUSH
67462: LD_VAR 0 1
67466: PUSH
67467: LD_INT 4
67469: PLUS
67470: PUSH
67471: LD_VAR 0 2
67475: PUSH
67476: LD_INT 4
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: LIST
67483: PUSH
67484: LD_VAR 0 1
67488: PUSH
67489: LD_VAR 0 2
67493: PUSH
67494: LD_INT 4
67496: PLUS
67497: PUSH
67498: LD_INT 0
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: LIST
67505: PUSH
67506: LD_VAR 0 1
67510: PUSH
67511: LD_INT 3
67513: MINUS
67514: PUSH
67515: LD_VAR 0 2
67519: PUSH
67520: LD_INT 1
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: LIST
67527: PUSH
67528: LD_VAR 0 1
67532: PUSH
67533: LD_INT 4
67535: MINUS
67536: PUSH
67537: LD_VAR 0 2
67541: PUSH
67542: LD_INT 4
67544: MINUS
67545: PUSH
67546: LD_INT 2
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: LIST
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: ST_TO_ADDR
// end ; 3 :
67561: GO 67983
67563: LD_INT 3
67565: DOUBLE
67566: EQUAL
67567: IFTRUE 67571
67569: GO 67704
67571: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67572: LD_ADDR_VAR 0 5
67576: PUSH
67577: LD_VAR 0 1
67581: PUSH
67582: LD_INT 3
67584: PLUS
67585: PUSH
67586: LD_VAR 0 2
67590: PUSH
67591: LD_INT 4
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: LIST
67598: PUSH
67599: LD_VAR 0 1
67603: PUSH
67604: LD_INT 4
67606: PLUS
67607: PUSH
67608: LD_VAR 0 2
67612: PUSH
67613: LD_INT 4
67615: PLUS
67616: PUSH
67617: LD_INT 5
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: LIST
67624: PUSH
67625: LD_VAR 0 1
67629: PUSH
67630: LD_INT 4
67632: MINUS
67633: PUSH
67634: LD_VAR 0 2
67638: PUSH
67639: LD_INT 1
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: LIST
67646: PUSH
67647: LD_VAR 0 1
67651: PUSH
67652: LD_VAR 0 2
67656: PUSH
67657: LD_INT 4
67659: MINUS
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: LIST
67668: PUSH
67669: LD_VAR 0 1
67673: PUSH
67674: LD_INT 3
67676: MINUS
67677: PUSH
67678: LD_VAR 0 2
67682: PUSH
67683: LD_INT 3
67685: MINUS
67686: PUSH
67687: LD_INT 2
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: LIST
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: ST_TO_ADDR
// end ; 4 :
67702: GO 67983
67704: LD_INT 4
67706: DOUBLE
67707: EQUAL
67708: IFTRUE 67712
67710: GO 67845
67712: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67713: LD_ADDR_VAR 0 5
67717: PUSH
67718: LD_VAR 0 1
67722: PUSH
67723: LD_VAR 0 2
67727: PUSH
67728: LD_INT 4
67730: PLUS
67731: PUSH
67732: LD_INT 0
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: LIST
67739: PUSH
67740: LD_VAR 0 1
67744: PUSH
67745: LD_INT 3
67747: PLUS
67748: PUSH
67749: LD_VAR 0 2
67753: PUSH
67754: LD_INT 3
67756: PLUS
67757: PUSH
67758: LD_INT 5
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: LIST
67765: PUSH
67766: LD_VAR 0 1
67770: PUSH
67771: LD_INT 4
67773: PLUS
67774: PUSH
67775: LD_VAR 0 2
67779: PUSH
67780: LD_INT 4
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: LIST
67787: PUSH
67788: LD_VAR 0 1
67792: PUSH
67793: LD_VAR 0 2
67797: PUSH
67798: LD_INT 3
67800: MINUS
67801: PUSH
67802: LD_INT 3
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: LIST
67809: PUSH
67810: LD_VAR 0 1
67814: PUSH
67815: LD_INT 4
67817: MINUS
67818: PUSH
67819: LD_VAR 0 2
67823: PUSH
67824: LD_INT 4
67826: MINUS
67827: PUSH
67828: LD_INT 2
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: LIST
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: ST_TO_ADDR
// end ; 5 :
67843: GO 67983
67845: LD_INT 5
67847: DOUBLE
67848: EQUAL
67849: IFTRUE 67853
67851: GO 67982
67853: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67854: LD_ADDR_VAR 0 5
67858: PUSH
67859: LD_VAR 0 1
67863: PUSH
67864: LD_INT 4
67866: MINUS
67867: PUSH
67868: LD_VAR 0 2
67872: PUSH
67873: LD_INT 1
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: LIST
67880: PUSH
67881: LD_VAR 0 1
67885: PUSH
67886: LD_VAR 0 2
67890: PUSH
67891: LD_INT 4
67893: MINUS
67894: PUSH
67895: LD_INT 3
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: LIST
67902: PUSH
67903: LD_VAR 0 1
67907: PUSH
67908: LD_INT 4
67910: PLUS
67911: PUSH
67912: LD_VAR 0 2
67916: PUSH
67917: LD_INT 4
67919: PLUS
67920: PUSH
67921: LD_INT 5
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: LIST
67928: PUSH
67929: LD_VAR 0 1
67933: PUSH
67934: LD_INT 3
67936: PLUS
67937: PUSH
67938: LD_VAR 0 2
67942: PUSH
67943: LD_INT 4
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: LIST
67950: PUSH
67951: LD_VAR 0 1
67955: PUSH
67956: LD_VAR 0 2
67960: PUSH
67961: LD_INT 3
67963: PLUS
67964: PUSH
67965: LD_INT 0
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: LIST
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: ST_TO_ADDR
// end ; end ;
67980: GO 67983
67982: POP
// result := list ;
67983: LD_ADDR_VAR 0 4
67987: PUSH
67988: LD_VAR 0 5
67992: ST_TO_ADDR
// end ;
67993: LD_VAR 0 4
67997: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67998: LD_INT 0
68000: PPUSH
68001: PPUSH
68002: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68003: LD_VAR 0 1
68007: NOT
68008: PUSH
68009: LD_VAR 0 2
68013: PUSH
68014: LD_INT 1
68016: PUSH
68017: LD_INT 2
68019: PUSH
68020: LD_INT 3
68022: PUSH
68023: LD_INT 4
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: IN
68032: NOT
68033: OR
68034: IFFALSE 68038
// exit ;
68036: GO 68121
// tmp := [ ] ;
68038: LD_ADDR_VAR 0 5
68042: PUSH
68043: EMPTY
68044: ST_TO_ADDR
// for i in units do
68045: LD_ADDR_VAR 0 4
68049: PUSH
68050: LD_VAR 0 1
68054: PUSH
68055: FOR_IN
68056: IFFALSE 68090
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68058: LD_ADDR_VAR 0 5
68062: PUSH
68063: LD_VAR 0 5
68067: PPUSH
68068: LD_VAR 0 4
68072: PPUSH
68073: LD_VAR 0 2
68077: PPUSH
68078: CALL_OW 259
68082: PPUSH
68083: CALL 69494 0 2
68087: ST_TO_ADDR
68088: GO 68055
68090: POP
68091: POP
// if not tmp then
68092: LD_VAR 0 5
68096: NOT
68097: IFFALSE 68101
// exit ;
68099: GO 68121
// result := SortListByListDesc ( units , tmp ) ;
68101: LD_ADDR_VAR 0 3
68105: PUSH
68106: LD_VAR 0 1
68110: PPUSH
68111: LD_VAR 0 5
68115: PPUSH
68116: CALL_OW 77
68120: ST_TO_ADDR
// end ;
68121: LD_VAR 0 3
68125: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68126: LD_INT 0
68128: PPUSH
68129: PPUSH
68130: PPUSH
// result := false ;
68131: LD_ADDR_VAR 0 3
68135: PUSH
68136: LD_INT 0
68138: ST_TO_ADDR
// if not building then
68139: LD_VAR 0 2
68143: NOT
68144: IFFALSE 68148
// exit ;
68146: GO 68286
// x := GetX ( building ) ;
68148: LD_ADDR_VAR 0 4
68152: PUSH
68153: LD_VAR 0 2
68157: PPUSH
68158: CALL_OW 250
68162: ST_TO_ADDR
// y := GetY ( building ) ;
68163: LD_ADDR_VAR 0 5
68167: PUSH
68168: LD_VAR 0 2
68172: PPUSH
68173: CALL_OW 251
68177: ST_TO_ADDR
// if not x or not y then
68178: LD_VAR 0 4
68182: NOT
68183: PUSH
68184: LD_VAR 0 5
68188: NOT
68189: OR
68190: IFFALSE 68194
// exit ;
68192: GO 68286
// if GetTaskList ( unit ) then
68194: LD_VAR 0 1
68198: PPUSH
68199: CALL_OW 437
68203: IFFALSE 68286
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68205: LD_STRING e
68207: PUSH
68208: LD_VAR 0 1
68212: PPUSH
68213: CALL_OW 437
68217: PUSH
68218: LD_INT 1
68220: ARRAY
68221: PUSH
68222: LD_INT 1
68224: ARRAY
68225: EQUAL
68226: PUSH
68227: LD_VAR 0 4
68231: PUSH
68232: LD_VAR 0 1
68236: PPUSH
68237: CALL_OW 437
68241: PUSH
68242: LD_INT 1
68244: ARRAY
68245: PUSH
68246: LD_INT 2
68248: ARRAY
68249: EQUAL
68250: AND
68251: PUSH
68252: LD_VAR 0 5
68256: PUSH
68257: LD_VAR 0 1
68261: PPUSH
68262: CALL_OW 437
68266: PUSH
68267: LD_INT 1
68269: ARRAY
68270: PUSH
68271: LD_INT 3
68273: ARRAY
68274: EQUAL
68275: AND
68276: IFFALSE 68286
// result := true end ;
68278: LD_ADDR_VAR 0 3
68282: PUSH
68283: LD_INT 1
68285: ST_TO_ADDR
// end ;
68286: LD_VAR 0 3
68290: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68291: LD_INT 0
68293: PPUSH
// result := false ;
68294: LD_ADDR_VAR 0 4
68298: PUSH
68299: LD_INT 0
68301: ST_TO_ADDR
// if GetTaskList ( unit ) then
68302: LD_VAR 0 1
68306: PPUSH
68307: CALL_OW 437
68311: IFFALSE 68394
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68313: LD_STRING M
68315: PUSH
68316: LD_VAR 0 1
68320: PPUSH
68321: CALL_OW 437
68325: PUSH
68326: LD_INT 1
68328: ARRAY
68329: PUSH
68330: LD_INT 1
68332: ARRAY
68333: EQUAL
68334: PUSH
68335: LD_VAR 0 2
68339: PUSH
68340: LD_VAR 0 1
68344: PPUSH
68345: CALL_OW 437
68349: PUSH
68350: LD_INT 1
68352: ARRAY
68353: PUSH
68354: LD_INT 2
68356: ARRAY
68357: EQUAL
68358: AND
68359: PUSH
68360: LD_VAR 0 3
68364: PUSH
68365: LD_VAR 0 1
68369: PPUSH
68370: CALL_OW 437
68374: PUSH
68375: LD_INT 1
68377: ARRAY
68378: PUSH
68379: LD_INT 3
68381: ARRAY
68382: EQUAL
68383: AND
68384: IFFALSE 68394
// result := true ;
68386: LD_ADDR_VAR 0 4
68390: PUSH
68391: LD_INT 1
68393: ST_TO_ADDR
// end ; end ;
68394: LD_VAR 0 4
68398: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68399: LD_INT 0
68401: PPUSH
68402: PPUSH
68403: PPUSH
68404: PPUSH
// if not unit or not area then
68405: LD_VAR 0 1
68409: NOT
68410: PUSH
68411: LD_VAR 0 2
68415: NOT
68416: OR
68417: IFFALSE 68421
// exit ;
68419: GO 68597
// tmp := AreaToList ( area , i ) ;
68421: LD_ADDR_VAR 0 6
68425: PUSH
68426: LD_VAR 0 2
68430: PPUSH
68431: LD_VAR 0 5
68435: PPUSH
68436: CALL_OW 517
68440: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68441: LD_ADDR_VAR 0 5
68445: PUSH
68446: DOUBLE
68447: LD_INT 1
68449: DEC
68450: ST_TO_ADDR
68451: LD_VAR 0 6
68455: PUSH
68456: LD_INT 1
68458: ARRAY
68459: PUSH
68460: FOR_TO
68461: IFFALSE 68595
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68463: LD_ADDR_VAR 0 7
68467: PUSH
68468: LD_VAR 0 6
68472: PUSH
68473: LD_INT 1
68475: ARRAY
68476: PUSH
68477: LD_VAR 0 5
68481: ARRAY
68482: PUSH
68483: LD_VAR 0 6
68487: PUSH
68488: LD_INT 2
68490: ARRAY
68491: PUSH
68492: LD_VAR 0 5
68496: ARRAY
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68502: LD_INT 92
68504: PUSH
68505: LD_VAR 0 7
68509: PUSH
68510: LD_INT 1
68512: ARRAY
68513: PUSH
68514: LD_VAR 0 7
68518: PUSH
68519: LD_INT 2
68521: ARRAY
68522: PUSH
68523: LD_INT 2
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: PPUSH
68532: CALL_OW 69
68536: PUSH
68537: LD_INT 0
68539: EQUAL
68540: IFFALSE 68593
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68542: LD_VAR 0 1
68546: PPUSH
68547: LD_VAR 0 7
68551: PUSH
68552: LD_INT 1
68554: ARRAY
68555: PPUSH
68556: LD_VAR 0 7
68560: PUSH
68561: LD_INT 2
68563: ARRAY
68564: PPUSH
68565: LD_VAR 0 3
68569: PPUSH
68570: CALL_OW 48
// result := IsPlaced ( unit ) ;
68574: LD_ADDR_VAR 0 4
68578: PUSH
68579: LD_VAR 0 1
68583: PPUSH
68584: CALL_OW 305
68588: ST_TO_ADDR
// exit ;
68589: POP
68590: POP
68591: GO 68597
// end ; end ;
68593: GO 68460
68595: POP
68596: POP
// end ;
68597: LD_VAR 0 4
68601: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68602: LD_INT 0
68604: PPUSH
68605: PPUSH
68606: PPUSH
// if not side or side > 8 then
68607: LD_VAR 0 1
68611: NOT
68612: PUSH
68613: LD_VAR 0 1
68617: PUSH
68618: LD_INT 8
68620: GREATER
68621: OR
68622: IFFALSE 68626
// exit ;
68624: GO 68813
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68626: LD_ADDR_VAR 0 4
68630: PUSH
68631: LD_INT 22
68633: PUSH
68634: LD_VAR 0 1
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 21
68645: PUSH
68646: LD_INT 3
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PPUSH
68657: CALL_OW 69
68661: ST_TO_ADDR
// if not tmp then
68662: LD_VAR 0 4
68666: NOT
68667: IFFALSE 68671
// exit ;
68669: GO 68813
// enable_addtolog := true ;
68671: LD_ADDR_OWVAR 81
68675: PUSH
68676: LD_INT 1
68678: ST_TO_ADDR
// AddToLog ( [ ) ;
68679: LD_STRING [
68681: PPUSH
68682: CALL_OW 561
// for i in tmp do
68686: LD_ADDR_VAR 0 3
68690: PUSH
68691: LD_VAR 0 4
68695: PUSH
68696: FOR_IN
68697: IFFALSE 68804
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68699: LD_STRING [
68701: PUSH
68702: LD_VAR 0 3
68706: PPUSH
68707: CALL_OW 266
68711: STR
68712: PUSH
68713: LD_STRING , 
68715: STR
68716: PUSH
68717: LD_VAR 0 3
68721: PPUSH
68722: CALL_OW 250
68726: STR
68727: PUSH
68728: LD_STRING , 
68730: STR
68731: PUSH
68732: LD_VAR 0 3
68736: PPUSH
68737: CALL_OW 251
68741: STR
68742: PUSH
68743: LD_STRING , 
68745: STR
68746: PUSH
68747: LD_VAR 0 3
68751: PPUSH
68752: CALL_OW 254
68756: STR
68757: PUSH
68758: LD_STRING , 
68760: STR
68761: PUSH
68762: LD_VAR 0 3
68766: PPUSH
68767: LD_INT 1
68769: PPUSH
68770: CALL_OW 268
68774: STR
68775: PUSH
68776: LD_STRING , 
68778: STR
68779: PUSH
68780: LD_VAR 0 3
68784: PPUSH
68785: LD_INT 2
68787: PPUSH
68788: CALL_OW 268
68792: STR
68793: PUSH
68794: LD_STRING ],
68796: STR
68797: PPUSH
68798: CALL_OW 561
// end ;
68802: GO 68696
68804: POP
68805: POP
// AddToLog ( ]; ) ;
68806: LD_STRING ];
68808: PPUSH
68809: CALL_OW 561
// end ;
68813: LD_VAR 0 2
68817: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68818: LD_INT 0
68820: PPUSH
68821: PPUSH
68822: PPUSH
68823: PPUSH
68824: PPUSH
// if not area or not rate or not max then
68825: LD_VAR 0 1
68829: NOT
68830: PUSH
68831: LD_VAR 0 2
68835: NOT
68836: OR
68837: PUSH
68838: LD_VAR 0 4
68842: NOT
68843: OR
68844: IFFALSE 68848
// exit ;
68846: GO 69037
// while 1 do
68848: LD_INT 1
68850: IFFALSE 69037
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68852: LD_ADDR_VAR 0 9
68856: PUSH
68857: LD_VAR 0 1
68861: PPUSH
68862: LD_INT 1
68864: PPUSH
68865: CALL_OW 287
68869: PUSH
68870: LD_INT 10
68872: MUL
68873: ST_TO_ADDR
// r := rate / 10 ;
68874: LD_ADDR_VAR 0 7
68878: PUSH
68879: LD_VAR 0 2
68883: PUSH
68884: LD_INT 10
68886: DIVREAL
68887: ST_TO_ADDR
// time := 1 1$00 ;
68888: LD_ADDR_VAR 0 8
68892: PUSH
68893: LD_INT 2100
68895: ST_TO_ADDR
// if amount < min then
68896: LD_VAR 0 9
68900: PUSH
68901: LD_VAR 0 3
68905: LESS
68906: IFFALSE 68924
// r := r * 2 else
68908: LD_ADDR_VAR 0 7
68912: PUSH
68913: LD_VAR 0 7
68917: PUSH
68918: LD_INT 2
68920: MUL
68921: ST_TO_ADDR
68922: GO 68950
// if amount > max then
68924: LD_VAR 0 9
68928: PUSH
68929: LD_VAR 0 4
68933: GREATER
68934: IFFALSE 68950
// r := r / 2 ;
68936: LD_ADDR_VAR 0 7
68940: PUSH
68941: LD_VAR 0 7
68945: PUSH
68946: LD_INT 2
68948: DIVREAL
68949: ST_TO_ADDR
// time := time / r ;
68950: LD_ADDR_VAR 0 8
68954: PUSH
68955: LD_VAR 0 8
68959: PUSH
68960: LD_VAR 0 7
68964: DIVREAL
68965: ST_TO_ADDR
// if time < 0 then
68966: LD_VAR 0 8
68970: PUSH
68971: LD_INT 0
68973: LESS
68974: IFFALSE 68991
// time := time * - 1 ;
68976: LD_ADDR_VAR 0 8
68980: PUSH
68981: LD_VAR 0 8
68985: PUSH
68986: LD_INT 1
68988: NEG
68989: MUL
68990: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68991: LD_VAR 0 8
68995: PUSH
68996: LD_INT 35
68998: PPUSH
68999: LD_INT 875
69001: PPUSH
69002: CALL_OW 12
69006: PLUS
69007: PPUSH
69008: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69012: LD_INT 1
69014: PPUSH
69015: LD_INT 5
69017: PPUSH
69018: CALL_OW 12
69022: PPUSH
69023: LD_VAR 0 1
69027: PPUSH
69028: LD_INT 1
69030: PPUSH
69031: CALL_OW 55
// end ;
69035: GO 68848
// end ;
69037: LD_VAR 0 5
69041: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69042: LD_INT 0
69044: PPUSH
69045: PPUSH
69046: PPUSH
69047: PPUSH
69048: PPUSH
69049: PPUSH
69050: PPUSH
69051: PPUSH
// if not turrets or not factories then
69052: LD_VAR 0 1
69056: NOT
69057: PUSH
69058: LD_VAR 0 2
69062: NOT
69063: OR
69064: IFFALSE 69068
// exit ;
69066: GO 69375
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69068: LD_ADDR_VAR 0 10
69072: PUSH
69073: LD_INT 5
69075: PUSH
69076: LD_INT 6
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 2
69085: PUSH
69086: LD_INT 4
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 3
69095: PUSH
69096: LD_INT 5
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 24
69110: PUSH
69111: LD_INT 25
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 23
69120: PUSH
69121: LD_INT 27
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 42
69134: PUSH
69135: LD_INT 43
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 44
69144: PUSH
69145: LD_INT 46
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 45
69154: PUSH
69155: LD_INT 47
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: LIST
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: LIST
69171: ST_TO_ADDR
// result := [ ] ;
69172: LD_ADDR_VAR 0 3
69176: PUSH
69177: EMPTY
69178: ST_TO_ADDR
// for i in turrets do
69179: LD_ADDR_VAR 0 4
69183: PUSH
69184: LD_VAR 0 1
69188: PUSH
69189: FOR_IN
69190: IFFALSE 69373
// begin nat := GetNation ( i ) ;
69192: LD_ADDR_VAR 0 7
69196: PUSH
69197: LD_VAR 0 4
69201: PPUSH
69202: CALL_OW 248
69206: ST_TO_ADDR
// weapon := 0 ;
69207: LD_ADDR_VAR 0 8
69211: PUSH
69212: LD_INT 0
69214: ST_TO_ADDR
// if not nat then
69215: LD_VAR 0 7
69219: NOT
69220: IFFALSE 69224
// continue ;
69222: GO 69189
// for j in list [ nat ] do
69224: LD_ADDR_VAR 0 5
69228: PUSH
69229: LD_VAR 0 10
69233: PUSH
69234: LD_VAR 0 7
69238: ARRAY
69239: PUSH
69240: FOR_IN
69241: IFFALSE 69282
// if GetBWeapon ( i ) = j [ 1 ] then
69243: LD_VAR 0 4
69247: PPUSH
69248: CALL_OW 269
69252: PUSH
69253: LD_VAR 0 5
69257: PUSH
69258: LD_INT 1
69260: ARRAY
69261: EQUAL
69262: IFFALSE 69280
// begin weapon := j [ 2 ] ;
69264: LD_ADDR_VAR 0 8
69268: PUSH
69269: LD_VAR 0 5
69273: PUSH
69274: LD_INT 2
69276: ARRAY
69277: ST_TO_ADDR
// break ;
69278: GO 69282
// end ;
69280: GO 69240
69282: POP
69283: POP
// if not weapon then
69284: LD_VAR 0 8
69288: NOT
69289: IFFALSE 69293
// continue ;
69291: GO 69189
// for k in factories do
69293: LD_ADDR_VAR 0 6
69297: PUSH
69298: LD_VAR 0 2
69302: PUSH
69303: FOR_IN
69304: IFFALSE 69369
// begin weapons := AvailableWeaponList ( k ) ;
69306: LD_ADDR_VAR 0 9
69310: PUSH
69311: LD_VAR 0 6
69315: PPUSH
69316: CALL_OW 478
69320: ST_TO_ADDR
// if not weapons then
69321: LD_VAR 0 9
69325: NOT
69326: IFFALSE 69330
// continue ;
69328: GO 69303
// if weapon in weapons then
69330: LD_VAR 0 8
69334: PUSH
69335: LD_VAR 0 9
69339: IN
69340: IFFALSE 69367
// begin result := [ i , weapon ] ;
69342: LD_ADDR_VAR 0 3
69346: PUSH
69347: LD_VAR 0 4
69351: PUSH
69352: LD_VAR 0 8
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: ST_TO_ADDR
// exit ;
69361: POP
69362: POP
69363: POP
69364: POP
69365: GO 69375
// end ; end ;
69367: GO 69303
69369: POP
69370: POP
// end ;
69371: GO 69189
69373: POP
69374: POP
// end ;
69375: LD_VAR 0 3
69379: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69380: LD_INT 0
69382: PPUSH
// if not side or side > 8 then
69383: LD_VAR 0 3
69387: NOT
69388: PUSH
69389: LD_VAR 0 3
69393: PUSH
69394: LD_INT 8
69396: GREATER
69397: OR
69398: IFFALSE 69402
// exit ;
69400: GO 69461
// if not range then
69402: LD_VAR 0 4
69406: NOT
69407: IFFALSE 69418
// range := - 12 ;
69409: LD_ADDR_VAR 0 4
69413: PUSH
69414: LD_INT 12
69416: NEG
69417: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69418: LD_VAR 0 1
69422: PPUSH
69423: LD_VAR 0 2
69427: PPUSH
69428: LD_VAR 0 3
69432: PPUSH
69433: LD_VAR 0 4
69437: PPUSH
69438: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69442: LD_VAR 0 1
69446: PPUSH
69447: LD_VAR 0 2
69451: PPUSH
69452: LD_VAR 0 3
69456: PPUSH
69457: CALL_OW 331
// end ;
69461: LD_VAR 0 5
69465: RET
// export function Video ( mode ) ; begin
69466: LD_INT 0
69468: PPUSH
// ingame_video = mode ;
69469: LD_ADDR_OWVAR 52
69473: PUSH
69474: LD_VAR 0 1
69478: ST_TO_ADDR
// interface_hidden = mode ;
69479: LD_ADDR_OWVAR 54
69483: PUSH
69484: LD_VAR 0 1
69488: ST_TO_ADDR
// end ;
69489: LD_VAR 0 2
69493: RET
// export function Join ( array , element ) ; begin
69494: LD_INT 0
69496: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69497: LD_ADDR_VAR 0 3
69501: PUSH
69502: LD_VAR 0 1
69506: PPUSH
69507: LD_VAR 0 1
69511: PUSH
69512: LD_INT 1
69514: PLUS
69515: PPUSH
69516: LD_VAR 0 2
69520: PPUSH
69521: CALL_OW 1
69525: ST_TO_ADDR
// end ;
69526: LD_VAR 0 3
69530: RET
// export function JoinUnion ( array , element ) ; begin
69531: LD_INT 0
69533: PPUSH
// result := array union element ;
69534: LD_ADDR_VAR 0 3
69538: PUSH
69539: LD_VAR 0 1
69543: PUSH
69544: LD_VAR 0 2
69548: UNION
69549: ST_TO_ADDR
// end ;
69550: LD_VAR 0 3
69554: RET
// export function GetBehemoths ( side ) ; begin
69555: LD_INT 0
69557: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69558: LD_ADDR_VAR 0 2
69562: PUSH
69563: LD_INT 22
69565: PUSH
69566: LD_VAR 0 1
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 31
69577: PUSH
69578: LD_INT 25
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PPUSH
69589: CALL_OW 69
69593: ST_TO_ADDR
// end ;
69594: LD_VAR 0 2
69598: RET
// export function Shuffle ( array ) ; var i , index ; begin
69599: LD_INT 0
69601: PPUSH
69602: PPUSH
69603: PPUSH
// result := [ ] ;
69604: LD_ADDR_VAR 0 2
69608: PUSH
69609: EMPTY
69610: ST_TO_ADDR
// if not array then
69611: LD_VAR 0 1
69615: NOT
69616: IFFALSE 69620
// exit ;
69618: GO 69719
// Randomize ;
69620: CALL_OW 10
// for i = array downto 1 do
69624: LD_ADDR_VAR 0 3
69628: PUSH
69629: DOUBLE
69630: LD_VAR 0 1
69634: INC
69635: ST_TO_ADDR
69636: LD_INT 1
69638: PUSH
69639: FOR_DOWNTO
69640: IFFALSE 69717
// begin index := rand ( 1 , array ) ;
69642: LD_ADDR_VAR 0 4
69646: PUSH
69647: LD_INT 1
69649: PPUSH
69650: LD_VAR 0 1
69654: PPUSH
69655: CALL_OW 12
69659: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69660: LD_ADDR_VAR 0 2
69664: PUSH
69665: LD_VAR 0 2
69669: PPUSH
69670: LD_VAR 0 2
69674: PUSH
69675: LD_INT 1
69677: PLUS
69678: PPUSH
69679: LD_VAR 0 1
69683: PUSH
69684: LD_VAR 0 4
69688: ARRAY
69689: PPUSH
69690: CALL_OW 2
69694: ST_TO_ADDR
// array := Delete ( array , index ) ;
69695: LD_ADDR_VAR 0 1
69699: PUSH
69700: LD_VAR 0 1
69704: PPUSH
69705: LD_VAR 0 4
69709: PPUSH
69710: CALL_OW 3
69714: ST_TO_ADDR
// end ;
69715: GO 69639
69717: POP
69718: POP
// end ;
69719: LD_VAR 0 2
69723: RET
// export function GetBaseMaterials ( base ) ; begin
69724: LD_INT 0
69726: PPUSH
// result := [ 0 , 0 , 0 ] ;
69727: LD_ADDR_VAR 0 2
69731: PUSH
69732: LD_INT 0
69734: PUSH
69735: LD_INT 0
69737: PUSH
69738: LD_INT 0
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: LIST
69745: ST_TO_ADDR
// if not base then
69746: LD_VAR 0 1
69750: NOT
69751: IFFALSE 69755
// exit ;
69753: GO 69804
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69755: LD_ADDR_VAR 0 2
69759: PUSH
69760: LD_VAR 0 1
69764: PPUSH
69765: LD_INT 1
69767: PPUSH
69768: CALL_OW 275
69772: PUSH
69773: LD_VAR 0 1
69777: PPUSH
69778: LD_INT 2
69780: PPUSH
69781: CALL_OW 275
69785: PUSH
69786: LD_VAR 0 1
69790: PPUSH
69791: LD_INT 3
69793: PPUSH
69794: CALL_OW 275
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: LIST
69803: ST_TO_ADDR
// end ;
69804: LD_VAR 0 2
69808: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69809: LD_INT 0
69811: PPUSH
69812: PPUSH
// result := array ;
69813: LD_ADDR_VAR 0 3
69817: PUSH
69818: LD_VAR 0 1
69822: ST_TO_ADDR
// if size >= result then
69823: LD_VAR 0 2
69827: PUSH
69828: LD_VAR 0 3
69832: GREATEREQUAL
69833: IFFALSE 69837
// exit ;
69835: GO 69887
// if size then
69837: LD_VAR 0 2
69841: IFFALSE 69887
// for i := array downto size do
69843: LD_ADDR_VAR 0 4
69847: PUSH
69848: DOUBLE
69849: LD_VAR 0 1
69853: INC
69854: ST_TO_ADDR
69855: LD_VAR 0 2
69859: PUSH
69860: FOR_DOWNTO
69861: IFFALSE 69885
// result := Delete ( result , result ) ;
69863: LD_ADDR_VAR 0 3
69867: PUSH
69868: LD_VAR 0 3
69872: PPUSH
69873: LD_VAR 0 3
69877: PPUSH
69878: CALL_OW 3
69882: ST_TO_ADDR
69883: GO 69860
69885: POP
69886: POP
// end ;
69887: LD_VAR 0 3
69891: RET
// export function ComExit ( unit ) ; var tmp ; begin
69892: LD_INT 0
69894: PPUSH
69895: PPUSH
// if not IsInUnit ( unit ) then
69896: LD_VAR 0 1
69900: PPUSH
69901: CALL_OW 310
69905: NOT
69906: IFFALSE 69910
// exit ;
69908: GO 69970
// tmp := IsInUnit ( unit ) ;
69910: LD_ADDR_VAR 0 3
69914: PUSH
69915: LD_VAR 0 1
69919: PPUSH
69920: CALL_OW 310
69924: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69925: LD_VAR 0 3
69929: PPUSH
69930: CALL_OW 247
69934: PUSH
69935: LD_INT 2
69937: EQUAL
69938: IFFALSE 69951
// ComExitVehicle ( unit ) else
69940: LD_VAR 0 1
69944: PPUSH
69945: CALL_OW 121
69949: GO 69960
// ComExitBuilding ( unit ) ;
69951: LD_VAR 0 1
69955: PPUSH
69956: CALL_OW 122
// result := tmp ;
69960: LD_ADDR_VAR 0 2
69964: PUSH
69965: LD_VAR 0 3
69969: ST_TO_ADDR
// end ;
69970: LD_VAR 0 2
69974: RET
// export function ComExitAll ( units ) ; var i ; begin
69975: LD_INT 0
69977: PPUSH
69978: PPUSH
// if not units then
69979: LD_VAR 0 1
69983: NOT
69984: IFFALSE 69988
// exit ;
69986: GO 70014
// for i in units do
69988: LD_ADDR_VAR 0 3
69992: PUSH
69993: LD_VAR 0 1
69997: PUSH
69998: FOR_IN
69999: IFFALSE 70012
// ComExit ( i ) ;
70001: LD_VAR 0 3
70005: PPUSH
70006: CALL 69892 0 1
70010: GO 69998
70012: POP
70013: POP
// end ;
70014: LD_VAR 0 2
70018: RET
// export function ResetHc ; begin
70019: LD_INT 0
70021: PPUSH
// InitHc ;
70022: CALL_OW 19
// hc_importance := 0 ;
70026: LD_ADDR_OWVAR 32
70030: PUSH
70031: LD_INT 0
70033: ST_TO_ADDR
// end ;
70034: LD_VAR 0 1
70038: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70039: LD_INT 0
70041: PPUSH
70042: PPUSH
70043: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70044: LD_ADDR_VAR 0 6
70048: PUSH
70049: LD_VAR 0 1
70053: PUSH
70054: LD_VAR 0 3
70058: PLUS
70059: PUSH
70060: LD_INT 2
70062: DIV
70063: ST_TO_ADDR
// if _x < 0 then
70064: LD_VAR 0 6
70068: PUSH
70069: LD_INT 0
70071: LESS
70072: IFFALSE 70089
// _x := _x * - 1 ;
70074: LD_ADDR_VAR 0 6
70078: PUSH
70079: LD_VAR 0 6
70083: PUSH
70084: LD_INT 1
70086: NEG
70087: MUL
70088: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70089: LD_ADDR_VAR 0 7
70093: PUSH
70094: LD_VAR 0 2
70098: PUSH
70099: LD_VAR 0 4
70103: PLUS
70104: PUSH
70105: LD_INT 2
70107: DIV
70108: ST_TO_ADDR
// if _y < 0 then
70109: LD_VAR 0 7
70113: PUSH
70114: LD_INT 0
70116: LESS
70117: IFFALSE 70134
// _y := _y * - 1 ;
70119: LD_ADDR_VAR 0 7
70123: PUSH
70124: LD_VAR 0 7
70128: PUSH
70129: LD_INT 1
70131: NEG
70132: MUL
70133: ST_TO_ADDR
// result := [ _x , _y ] ;
70134: LD_ADDR_VAR 0 5
70138: PUSH
70139: LD_VAR 0 6
70143: PUSH
70144: LD_VAR 0 7
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: ST_TO_ADDR
// end ;
70153: LD_VAR 0 5
70157: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70158: LD_INT 0
70160: PPUSH
70161: PPUSH
70162: PPUSH
70163: PPUSH
// task := GetTaskList ( unit ) ;
70164: LD_ADDR_VAR 0 7
70168: PUSH
70169: LD_VAR 0 1
70173: PPUSH
70174: CALL_OW 437
70178: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70179: LD_VAR 0 7
70183: NOT
70184: PUSH
70185: LD_VAR 0 1
70189: PPUSH
70190: LD_VAR 0 2
70194: PPUSH
70195: CALL_OW 308
70199: NOT
70200: AND
70201: IFFALSE 70205
// exit ;
70203: GO 70323
// if IsInArea ( unit , area ) then
70205: LD_VAR 0 1
70209: PPUSH
70210: LD_VAR 0 2
70214: PPUSH
70215: CALL_OW 308
70219: IFFALSE 70237
// begin ComMoveToArea ( unit , goAway ) ;
70221: LD_VAR 0 1
70225: PPUSH
70226: LD_VAR 0 3
70230: PPUSH
70231: CALL_OW 113
// exit ;
70235: GO 70323
// end ; if task [ 1 ] [ 1 ] <> M then
70237: LD_VAR 0 7
70241: PUSH
70242: LD_INT 1
70244: ARRAY
70245: PUSH
70246: LD_INT 1
70248: ARRAY
70249: PUSH
70250: LD_STRING M
70252: NONEQUAL
70253: IFFALSE 70257
// exit ;
70255: GO 70323
// x := task [ 1 ] [ 2 ] ;
70257: LD_ADDR_VAR 0 5
70261: PUSH
70262: LD_VAR 0 7
70266: PUSH
70267: LD_INT 1
70269: ARRAY
70270: PUSH
70271: LD_INT 2
70273: ARRAY
70274: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70275: LD_ADDR_VAR 0 6
70279: PUSH
70280: LD_VAR 0 7
70284: PUSH
70285: LD_INT 1
70287: ARRAY
70288: PUSH
70289: LD_INT 3
70291: ARRAY
70292: ST_TO_ADDR
// if InArea ( x , y , area ) then
70293: LD_VAR 0 5
70297: PPUSH
70298: LD_VAR 0 6
70302: PPUSH
70303: LD_VAR 0 2
70307: PPUSH
70308: CALL_OW 309
70312: IFFALSE 70323
// ComStop ( unit ) ;
70314: LD_VAR 0 1
70318: PPUSH
70319: CALL_OW 141
// end ;
70323: LD_VAR 0 4
70327: RET
// export function Abs ( value ) ; begin
70328: LD_INT 0
70330: PPUSH
// result := value ;
70331: LD_ADDR_VAR 0 2
70335: PUSH
70336: LD_VAR 0 1
70340: ST_TO_ADDR
// if value < 0 then
70341: LD_VAR 0 1
70345: PUSH
70346: LD_INT 0
70348: LESS
70349: IFFALSE 70366
// result := value * - 1 ;
70351: LD_ADDR_VAR 0 2
70355: PUSH
70356: LD_VAR 0 1
70360: PUSH
70361: LD_INT 1
70363: NEG
70364: MUL
70365: ST_TO_ADDR
// end ;
70366: LD_VAR 0 2
70370: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70371: LD_INT 0
70373: PPUSH
70374: PPUSH
70375: PPUSH
70376: PPUSH
70377: PPUSH
70378: PPUSH
70379: PPUSH
70380: PPUSH
// if not unit or not building then
70381: LD_VAR 0 1
70385: NOT
70386: PUSH
70387: LD_VAR 0 2
70391: NOT
70392: OR
70393: IFFALSE 70397
// exit ;
70395: GO 70623
// x := GetX ( building ) ;
70397: LD_ADDR_VAR 0 4
70401: PUSH
70402: LD_VAR 0 2
70406: PPUSH
70407: CALL_OW 250
70411: ST_TO_ADDR
// y := GetY ( building ) ;
70412: LD_ADDR_VAR 0 6
70416: PUSH
70417: LD_VAR 0 2
70421: PPUSH
70422: CALL_OW 251
70426: ST_TO_ADDR
// d := GetDir ( building ) ;
70427: LD_ADDR_VAR 0 8
70431: PUSH
70432: LD_VAR 0 2
70436: PPUSH
70437: CALL_OW 254
70441: ST_TO_ADDR
// r := 4 ;
70442: LD_ADDR_VAR 0 9
70446: PUSH
70447: LD_INT 4
70449: ST_TO_ADDR
// for i := 1 to 5 do
70450: LD_ADDR_VAR 0 10
70454: PUSH
70455: DOUBLE
70456: LD_INT 1
70458: DEC
70459: ST_TO_ADDR
70460: LD_INT 5
70462: PUSH
70463: FOR_TO
70464: IFFALSE 70621
// begin _x := ShiftX ( x , d , r + i ) ;
70466: LD_ADDR_VAR 0 5
70470: PUSH
70471: LD_VAR 0 4
70475: PPUSH
70476: LD_VAR 0 8
70480: PPUSH
70481: LD_VAR 0 9
70485: PUSH
70486: LD_VAR 0 10
70490: PLUS
70491: PPUSH
70492: CALL_OW 272
70496: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70497: LD_ADDR_VAR 0 7
70501: PUSH
70502: LD_VAR 0 6
70506: PPUSH
70507: LD_VAR 0 8
70511: PPUSH
70512: LD_VAR 0 9
70516: PUSH
70517: LD_VAR 0 10
70521: PLUS
70522: PPUSH
70523: CALL_OW 273
70527: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70528: LD_VAR 0 5
70532: PPUSH
70533: LD_VAR 0 7
70537: PPUSH
70538: CALL_OW 488
70542: PUSH
70543: LD_VAR 0 5
70547: PPUSH
70548: LD_VAR 0 7
70552: PPUSH
70553: CALL_OW 428
70557: PPUSH
70558: CALL_OW 247
70562: PUSH
70563: LD_INT 3
70565: PUSH
70566: LD_INT 2
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: IN
70573: NOT
70574: AND
70575: IFFALSE 70619
// begin ComMoveXY ( unit , _x , _y ) ;
70577: LD_VAR 0 1
70581: PPUSH
70582: LD_VAR 0 5
70586: PPUSH
70587: LD_VAR 0 7
70591: PPUSH
70592: CALL_OW 111
// result := [ _x , _y ] ;
70596: LD_ADDR_VAR 0 3
70600: PUSH
70601: LD_VAR 0 5
70605: PUSH
70606: LD_VAR 0 7
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: ST_TO_ADDR
// exit ;
70615: POP
70616: POP
70617: GO 70623
// end ; end ;
70619: GO 70463
70621: POP
70622: POP
// end ;
70623: LD_VAR 0 3
70627: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70628: LD_INT 0
70630: PPUSH
70631: PPUSH
70632: PPUSH
// result := 0 ;
70633: LD_ADDR_VAR 0 3
70637: PUSH
70638: LD_INT 0
70640: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70641: LD_VAR 0 1
70645: PUSH
70646: LD_INT 0
70648: LESS
70649: PUSH
70650: LD_VAR 0 1
70654: PUSH
70655: LD_INT 8
70657: GREATER
70658: OR
70659: PUSH
70660: LD_VAR 0 2
70664: PUSH
70665: LD_INT 0
70667: LESS
70668: OR
70669: PUSH
70670: LD_VAR 0 2
70674: PUSH
70675: LD_INT 8
70677: GREATER
70678: OR
70679: IFFALSE 70683
// exit ;
70681: GO 70758
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70683: LD_ADDR_VAR 0 4
70687: PUSH
70688: LD_INT 22
70690: PUSH
70691: LD_VAR 0 2
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PPUSH
70700: CALL_OW 69
70704: PUSH
70705: FOR_IN
70706: IFFALSE 70756
// begin un := UnitShoot ( i ) ;
70708: LD_ADDR_VAR 0 5
70712: PUSH
70713: LD_VAR 0 4
70717: PPUSH
70718: CALL_OW 504
70722: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70723: LD_VAR 0 5
70727: PPUSH
70728: CALL_OW 255
70732: PUSH
70733: LD_VAR 0 1
70737: EQUAL
70738: IFFALSE 70754
// begin result := un ;
70740: LD_ADDR_VAR 0 3
70744: PUSH
70745: LD_VAR 0 5
70749: ST_TO_ADDR
// exit ;
70750: POP
70751: POP
70752: GO 70758
// end ; end ;
70754: GO 70705
70756: POP
70757: POP
// end ;
70758: LD_VAR 0 3
70762: RET
// export function GetCargoBay ( units ) ; begin
70763: LD_INT 0
70765: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70766: LD_ADDR_VAR 0 2
70770: PUSH
70771: LD_VAR 0 1
70775: PPUSH
70776: LD_INT 2
70778: PUSH
70779: LD_INT 34
70781: PUSH
70782: LD_INT 12
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 34
70791: PUSH
70792: LD_INT 51
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 34
70801: PUSH
70802: LD_INT 32
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 34
70811: PUSH
70812: LD_INT 89
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: PPUSH
70826: CALL_OW 72
70830: ST_TO_ADDR
// end ;
70831: LD_VAR 0 2
70835: RET
// export function Negate ( value ) ; begin
70836: LD_INT 0
70838: PPUSH
// result := not value ;
70839: LD_ADDR_VAR 0 2
70843: PUSH
70844: LD_VAR 0 1
70848: NOT
70849: ST_TO_ADDR
// end ;
70850: LD_VAR 0 2
70854: RET
// export function Inc ( value ) ; begin
70855: LD_INT 0
70857: PPUSH
// result := value + 1 ;
70858: LD_ADDR_VAR 0 2
70862: PUSH
70863: LD_VAR 0 1
70867: PUSH
70868: LD_INT 1
70870: PLUS
70871: ST_TO_ADDR
// end ;
70872: LD_VAR 0 2
70876: RET
// export function Dec ( value ) ; begin
70877: LD_INT 0
70879: PPUSH
// result := value - 1 ;
70880: LD_ADDR_VAR 0 2
70884: PUSH
70885: LD_VAR 0 1
70889: PUSH
70890: LD_INT 1
70892: MINUS
70893: ST_TO_ADDR
// end ;
70894: LD_VAR 0 2
70898: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70899: LD_INT 0
70901: PPUSH
70902: PPUSH
70903: PPUSH
70904: PPUSH
70905: PPUSH
70906: PPUSH
70907: PPUSH
70908: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70909: LD_VAR 0 1
70913: PPUSH
70914: LD_VAR 0 2
70918: PPUSH
70919: CALL_OW 488
70923: NOT
70924: PUSH
70925: LD_VAR 0 3
70929: PPUSH
70930: LD_VAR 0 4
70934: PPUSH
70935: CALL_OW 488
70939: NOT
70940: OR
70941: IFFALSE 70954
// begin result := - 1 ;
70943: LD_ADDR_VAR 0 5
70947: PUSH
70948: LD_INT 1
70950: NEG
70951: ST_TO_ADDR
// exit ;
70952: GO 71189
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70954: LD_ADDR_VAR 0 12
70958: PUSH
70959: LD_VAR 0 1
70963: PPUSH
70964: LD_VAR 0 2
70968: PPUSH
70969: LD_VAR 0 3
70973: PPUSH
70974: LD_VAR 0 4
70978: PPUSH
70979: CALL 70039 0 4
70983: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70984: LD_ADDR_VAR 0 11
70988: PUSH
70989: LD_VAR 0 1
70993: PPUSH
70994: LD_VAR 0 2
70998: PPUSH
70999: LD_VAR 0 12
71003: PUSH
71004: LD_INT 1
71006: ARRAY
71007: PPUSH
71008: LD_VAR 0 12
71012: PUSH
71013: LD_INT 2
71015: ARRAY
71016: PPUSH
71017: CALL_OW 298
71021: ST_TO_ADDR
// distance := 9999 ;
71022: LD_ADDR_VAR 0 10
71026: PUSH
71027: LD_INT 9999
71029: ST_TO_ADDR
// for i := 0 to 5 do
71030: LD_ADDR_VAR 0 6
71034: PUSH
71035: DOUBLE
71036: LD_INT 0
71038: DEC
71039: ST_TO_ADDR
71040: LD_INT 5
71042: PUSH
71043: FOR_TO
71044: IFFALSE 71187
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71046: LD_ADDR_VAR 0 7
71050: PUSH
71051: LD_VAR 0 1
71055: PPUSH
71056: LD_VAR 0 6
71060: PPUSH
71061: LD_VAR 0 11
71065: PPUSH
71066: CALL_OW 272
71070: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71071: LD_ADDR_VAR 0 8
71075: PUSH
71076: LD_VAR 0 2
71080: PPUSH
71081: LD_VAR 0 6
71085: PPUSH
71086: LD_VAR 0 11
71090: PPUSH
71091: CALL_OW 273
71095: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71096: LD_VAR 0 7
71100: PPUSH
71101: LD_VAR 0 8
71105: PPUSH
71106: CALL_OW 488
71110: NOT
71111: IFFALSE 71115
// continue ;
71113: GO 71043
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71115: LD_ADDR_VAR 0 9
71119: PUSH
71120: LD_VAR 0 12
71124: PUSH
71125: LD_INT 1
71127: ARRAY
71128: PPUSH
71129: LD_VAR 0 12
71133: PUSH
71134: LD_INT 2
71136: ARRAY
71137: PPUSH
71138: LD_VAR 0 7
71142: PPUSH
71143: LD_VAR 0 8
71147: PPUSH
71148: CALL_OW 298
71152: ST_TO_ADDR
// if tmp < distance then
71153: LD_VAR 0 9
71157: PUSH
71158: LD_VAR 0 10
71162: LESS
71163: IFFALSE 71185
// begin result := i ;
71165: LD_ADDR_VAR 0 5
71169: PUSH
71170: LD_VAR 0 6
71174: ST_TO_ADDR
// distance := tmp ;
71175: LD_ADDR_VAR 0 10
71179: PUSH
71180: LD_VAR 0 9
71184: ST_TO_ADDR
// end ; end ;
71185: GO 71043
71187: POP
71188: POP
// end ;
71189: LD_VAR 0 5
71193: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71194: LD_INT 0
71196: PPUSH
71197: PPUSH
// if not driver or not IsInUnit ( driver ) then
71198: LD_VAR 0 1
71202: NOT
71203: PUSH
71204: LD_VAR 0 1
71208: PPUSH
71209: CALL_OW 310
71213: NOT
71214: OR
71215: IFFALSE 71219
// exit ;
71217: GO 71309
// vehicle := IsInUnit ( driver ) ;
71219: LD_ADDR_VAR 0 3
71223: PUSH
71224: LD_VAR 0 1
71228: PPUSH
71229: CALL_OW 310
71233: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71234: LD_VAR 0 1
71238: PPUSH
71239: LD_STRING \
71241: PUSH
71242: LD_INT 0
71244: PUSH
71245: LD_INT 0
71247: PUSH
71248: LD_INT 0
71250: PUSH
71251: LD_INT 0
71253: PUSH
71254: LD_INT 0
71256: PUSH
71257: LD_INT 0
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: LIST
71268: PUSH
71269: LD_STRING E
71271: PUSH
71272: LD_INT 0
71274: PUSH
71275: LD_INT 0
71277: PUSH
71278: LD_VAR 0 3
71282: PUSH
71283: LD_INT 0
71285: PUSH
71286: LD_INT 0
71288: PUSH
71289: LD_INT 0
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PPUSH
71305: CALL_OW 446
// end ;
71309: LD_VAR 0 2
71313: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71314: LD_INT 0
71316: PPUSH
71317: PPUSH
// if not driver or not IsInUnit ( driver ) then
71318: LD_VAR 0 1
71322: NOT
71323: PUSH
71324: LD_VAR 0 1
71328: PPUSH
71329: CALL_OW 310
71333: NOT
71334: OR
71335: IFFALSE 71339
// exit ;
71337: GO 71429
// vehicle := IsInUnit ( driver ) ;
71339: LD_ADDR_VAR 0 3
71343: PUSH
71344: LD_VAR 0 1
71348: PPUSH
71349: CALL_OW 310
71353: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71354: LD_VAR 0 1
71358: PPUSH
71359: LD_STRING \
71361: PUSH
71362: LD_INT 0
71364: PUSH
71365: LD_INT 0
71367: PUSH
71368: LD_INT 0
71370: PUSH
71371: LD_INT 0
71373: PUSH
71374: LD_INT 0
71376: PUSH
71377: LD_INT 0
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: PUSH
71389: LD_STRING E
71391: PUSH
71392: LD_INT 0
71394: PUSH
71395: LD_INT 0
71397: PUSH
71398: LD_VAR 0 3
71402: PUSH
71403: LD_INT 0
71405: PUSH
71406: LD_INT 0
71408: PUSH
71409: LD_INT 0
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PPUSH
71425: CALL_OW 447
// end ;
71429: LD_VAR 0 2
71433: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71434: LD_INT 0
71436: PPUSH
71437: PPUSH
71438: PPUSH
// tmp := [ ] ;
71439: LD_ADDR_VAR 0 5
71443: PUSH
71444: EMPTY
71445: ST_TO_ADDR
// for i in units do
71446: LD_ADDR_VAR 0 4
71450: PUSH
71451: LD_VAR 0 1
71455: PUSH
71456: FOR_IN
71457: IFFALSE 71495
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71459: LD_ADDR_VAR 0 5
71463: PUSH
71464: LD_VAR 0 5
71468: PPUSH
71469: LD_VAR 0 5
71473: PUSH
71474: LD_INT 1
71476: PLUS
71477: PPUSH
71478: LD_VAR 0 4
71482: PPUSH
71483: CALL_OW 256
71487: PPUSH
71488: CALL_OW 2
71492: ST_TO_ADDR
71493: GO 71456
71495: POP
71496: POP
// if not tmp then
71497: LD_VAR 0 5
71501: NOT
71502: IFFALSE 71506
// exit ;
71504: GO 71554
// if asc then
71506: LD_VAR 0 2
71510: IFFALSE 71534
// result := SortListByListAsc ( units , tmp ) else
71512: LD_ADDR_VAR 0 3
71516: PUSH
71517: LD_VAR 0 1
71521: PPUSH
71522: LD_VAR 0 5
71526: PPUSH
71527: CALL_OW 76
71531: ST_TO_ADDR
71532: GO 71554
// result := SortListByListDesc ( units , tmp ) ;
71534: LD_ADDR_VAR 0 3
71538: PUSH
71539: LD_VAR 0 1
71543: PPUSH
71544: LD_VAR 0 5
71548: PPUSH
71549: CALL_OW 77
71553: ST_TO_ADDR
// end ;
71554: LD_VAR 0 3
71558: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71559: LD_INT 0
71561: PPUSH
71562: PPUSH
// task := GetTaskList ( mech ) ;
71563: LD_ADDR_VAR 0 4
71567: PUSH
71568: LD_VAR 0 1
71572: PPUSH
71573: CALL_OW 437
71577: ST_TO_ADDR
// if not task then
71578: LD_VAR 0 4
71582: NOT
71583: IFFALSE 71587
// exit ;
71585: GO 71629
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71587: LD_ADDR_VAR 0 3
71591: PUSH
71592: LD_VAR 0 4
71596: PUSH
71597: LD_INT 1
71599: ARRAY
71600: PUSH
71601: LD_INT 1
71603: ARRAY
71604: PUSH
71605: LD_STRING r
71607: EQUAL
71608: PUSH
71609: LD_VAR 0 4
71613: PUSH
71614: LD_INT 1
71616: ARRAY
71617: PUSH
71618: LD_INT 4
71620: ARRAY
71621: PUSH
71622: LD_VAR 0 2
71626: EQUAL
71627: AND
71628: ST_TO_ADDR
// end ;
71629: LD_VAR 0 3
71633: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71634: LD_INT 0
71636: PPUSH
// SetDir ( unit , d ) ;
71637: LD_VAR 0 1
71641: PPUSH
71642: LD_VAR 0 4
71646: PPUSH
71647: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71651: LD_VAR 0 1
71655: PPUSH
71656: LD_VAR 0 2
71660: PPUSH
71661: LD_VAR 0 3
71665: PPUSH
71666: LD_VAR 0 5
71670: PPUSH
71671: CALL_OW 48
// end ;
71675: LD_VAR 0 6
71679: RET
// export function ToNaturalNumber ( number ) ; begin
71680: LD_INT 0
71682: PPUSH
// result := number div 1 ;
71683: LD_ADDR_VAR 0 2
71687: PUSH
71688: LD_VAR 0 1
71692: PUSH
71693: LD_INT 1
71695: DIV
71696: ST_TO_ADDR
// if number < 0 then
71697: LD_VAR 0 1
71701: PUSH
71702: LD_INT 0
71704: LESS
71705: IFFALSE 71715
// result := 0 ;
71707: LD_ADDR_VAR 0 2
71711: PUSH
71712: LD_INT 0
71714: ST_TO_ADDR
// end ;
71715: LD_VAR 0 2
71719: RET
// export function SortByClass ( units , class ) ; var un ; begin
71720: LD_INT 0
71722: PPUSH
71723: PPUSH
// if not units or not class then
71724: LD_VAR 0 1
71728: NOT
71729: PUSH
71730: LD_VAR 0 2
71734: NOT
71735: OR
71736: IFFALSE 71740
// exit ;
71738: GO 71835
// result := [ ] ;
71740: LD_ADDR_VAR 0 3
71744: PUSH
71745: EMPTY
71746: ST_TO_ADDR
// for un in units do
71747: LD_ADDR_VAR 0 4
71751: PUSH
71752: LD_VAR 0 1
71756: PUSH
71757: FOR_IN
71758: IFFALSE 71833
// if GetClass ( un ) = class then
71760: LD_VAR 0 4
71764: PPUSH
71765: CALL_OW 257
71769: PUSH
71770: LD_VAR 0 2
71774: EQUAL
71775: IFFALSE 71802
// result := Insert ( result , 1 , un ) else
71777: LD_ADDR_VAR 0 3
71781: PUSH
71782: LD_VAR 0 3
71786: PPUSH
71787: LD_INT 1
71789: PPUSH
71790: LD_VAR 0 4
71794: PPUSH
71795: CALL_OW 2
71799: ST_TO_ADDR
71800: GO 71831
// result := Replace ( result , result + 1 , un ) ;
71802: LD_ADDR_VAR 0 3
71806: PUSH
71807: LD_VAR 0 3
71811: PPUSH
71812: LD_VAR 0 3
71816: PUSH
71817: LD_INT 1
71819: PLUS
71820: PPUSH
71821: LD_VAR 0 4
71825: PPUSH
71826: CALL_OW 1
71830: ST_TO_ADDR
71831: GO 71757
71833: POP
71834: POP
// end ;
71835: LD_VAR 0 3
71839: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71840: LD_INT 0
71842: PPUSH
71843: PPUSH
71844: PPUSH
71845: PPUSH
71846: PPUSH
71847: PPUSH
71848: PPUSH
// result := [ ] ;
71849: LD_ADDR_VAR 0 4
71853: PUSH
71854: EMPTY
71855: ST_TO_ADDR
// if x - r < 0 then
71856: LD_VAR 0 1
71860: PUSH
71861: LD_VAR 0 3
71865: MINUS
71866: PUSH
71867: LD_INT 0
71869: LESS
71870: IFFALSE 71882
// min_x := 0 else
71872: LD_ADDR_VAR 0 8
71876: PUSH
71877: LD_INT 0
71879: ST_TO_ADDR
71880: GO 71898
// min_x := x - r ;
71882: LD_ADDR_VAR 0 8
71886: PUSH
71887: LD_VAR 0 1
71891: PUSH
71892: LD_VAR 0 3
71896: MINUS
71897: ST_TO_ADDR
// if y - r < 0 then
71898: LD_VAR 0 2
71902: PUSH
71903: LD_VAR 0 3
71907: MINUS
71908: PUSH
71909: LD_INT 0
71911: LESS
71912: IFFALSE 71924
// min_y := 0 else
71914: LD_ADDR_VAR 0 7
71918: PUSH
71919: LD_INT 0
71921: ST_TO_ADDR
71922: GO 71940
// min_y := y - r ;
71924: LD_ADDR_VAR 0 7
71928: PUSH
71929: LD_VAR 0 2
71933: PUSH
71934: LD_VAR 0 3
71938: MINUS
71939: ST_TO_ADDR
// max_x := x + r ;
71940: LD_ADDR_VAR 0 9
71944: PUSH
71945: LD_VAR 0 1
71949: PUSH
71950: LD_VAR 0 3
71954: PLUS
71955: ST_TO_ADDR
// max_y := y + r ;
71956: LD_ADDR_VAR 0 10
71960: PUSH
71961: LD_VAR 0 2
71965: PUSH
71966: LD_VAR 0 3
71970: PLUS
71971: ST_TO_ADDR
// for _x = min_x to max_x do
71972: LD_ADDR_VAR 0 5
71976: PUSH
71977: DOUBLE
71978: LD_VAR 0 8
71982: DEC
71983: ST_TO_ADDR
71984: LD_VAR 0 9
71988: PUSH
71989: FOR_TO
71990: IFFALSE 72091
// for _y = min_y to max_y do
71992: LD_ADDR_VAR 0 6
71996: PUSH
71997: DOUBLE
71998: LD_VAR 0 7
72002: DEC
72003: ST_TO_ADDR
72004: LD_VAR 0 10
72008: PUSH
72009: FOR_TO
72010: IFFALSE 72087
// begin if not ValidHex ( _x , _y ) then
72012: LD_VAR 0 5
72016: PPUSH
72017: LD_VAR 0 6
72021: PPUSH
72022: CALL_OW 488
72026: NOT
72027: IFFALSE 72031
// continue ;
72029: GO 72009
// if GetResourceTypeXY ( _x , _y ) then
72031: LD_VAR 0 5
72035: PPUSH
72036: LD_VAR 0 6
72040: PPUSH
72041: CALL_OW 283
72045: IFFALSE 72085
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72047: LD_ADDR_VAR 0 4
72051: PUSH
72052: LD_VAR 0 4
72056: PPUSH
72057: LD_VAR 0 4
72061: PUSH
72062: LD_INT 1
72064: PLUS
72065: PPUSH
72066: LD_VAR 0 5
72070: PUSH
72071: LD_VAR 0 6
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PPUSH
72080: CALL_OW 1
72084: ST_TO_ADDR
// end ;
72085: GO 72009
72087: POP
72088: POP
72089: GO 71989
72091: POP
72092: POP
// end ;
72093: LD_VAR 0 4
72097: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72098: LD_INT 0
72100: PPUSH
72101: PPUSH
72102: PPUSH
72103: PPUSH
72104: PPUSH
72105: PPUSH
72106: PPUSH
72107: PPUSH
// if not units then
72108: LD_VAR 0 1
72112: NOT
72113: IFFALSE 72117
// exit ;
72115: GO 72641
// result := UnitFilter ( units , [ f_ok ] ) ;
72117: LD_ADDR_VAR 0 3
72121: PUSH
72122: LD_VAR 0 1
72126: PPUSH
72127: LD_INT 50
72129: PUSH
72130: EMPTY
72131: LIST
72132: PPUSH
72133: CALL_OW 72
72137: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72138: LD_ADDR_VAR 0 8
72142: PUSH
72143: LD_VAR 0 1
72147: PUSH
72148: LD_INT 1
72150: ARRAY
72151: PPUSH
72152: CALL_OW 255
72156: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72157: LD_ADDR_VAR 0 10
72161: PUSH
72162: LD_INT 29
72164: PUSH
72165: LD_INT 91
72167: PUSH
72168: LD_INT 49
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: LIST
72175: ST_TO_ADDR
// if not result then
72176: LD_VAR 0 3
72180: NOT
72181: IFFALSE 72185
// exit ;
72183: GO 72641
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72185: LD_ADDR_VAR 0 5
72189: PUSH
72190: LD_INT 81
72192: PUSH
72193: LD_VAR 0 8
72197: PUSH
72198: EMPTY
72199: LIST
72200: LIST
72201: PPUSH
72202: CALL_OW 69
72206: ST_TO_ADDR
// for i in result do
72207: LD_ADDR_VAR 0 4
72211: PUSH
72212: LD_VAR 0 3
72216: PUSH
72217: FOR_IN
72218: IFFALSE 72639
// begin tag := GetTag ( i ) + 1 ;
72220: LD_ADDR_VAR 0 9
72224: PUSH
72225: LD_VAR 0 4
72229: PPUSH
72230: CALL_OW 110
72234: PUSH
72235: LD_INT 1
72237: PLUS
72238: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72239: LD_ADDR_VAR 0 7
72243: PUSH
72244: LD_VAR 0 4
72248: PPUSH
72249: CALL_OW 250
72253: PPUSH
72254: LD_VAR 0 4
72258: PPUSH
72259: CALL_OW 251
72263: PPUSH
72264: LD_INT 6
72266: PPUSH
72267: CALL 71840 0 3
72271: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72272: LD_VAR 0 4
72276: PPUSH
72277: CALL_OW 247
72281: PUSH
72282: LD_INT 2
72284: EQUAL
72285: PUSH
72286: LD_VAR 0 7
72290: AND
72291: PUSH
72292: LD_VAR 0 4
72296: PPUSH
72297: CALL_OW 264
72301: PUSH
72302: LD_VAR 0 10
72306: IN
72307: NOT
72308: AND
72309: IFFALSE 72348
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72311: LD_VAR 0 4
72315: PPUSH
72316: LD_VAR 0 7
72320: PUSH
72321: LD_INT 1
72323: ARRAY
72324: PUSH
72325: LD_INT 1
72327: ARRAY
72328: PPUSH
72329: LD_VAR 0 7
72333: PUSH
72334: LD_INT 1
72336: ARRAY
72337: PUSH
72338: LD_INT 2
72340: ARRAY
72341: PPUSH
72342: CALL_OW 116
72346: GO 72637
// if path > tag then
72348: LD_VAR 0 2
72352: PUSH
72353: LD_VAR 0 9
72357: GREATER
72358: IFFALSE 72566
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72360: LD_ADDR_VAR 0 6
72364: PUSH
72365: LD_VAR 0 5
72369: PPUSH
72370: LD_INT 91
72372: PUSH
72373: LD_VAR 0 4
72377: PUSH
72378: LD_INT 8
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: LIST
72385: PPUSH
72386: CALL_OW 72
72390: ST_TO_ADDR
// if nearEnemy then
72391: LD_VAR 0 6
72395: IFFALSE 72464
// begin if GetWeapon ( i ) = ru_time_lapser then
72397: LD_VAR 0 4
72401: PPUSH
72402: CALL_OW 264
72406: PUSH
72407: LD_INT 49
72409: EQUAL
72410: IFFALSE 72438
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72412: LD_VAR 0 4
72416: PPUSH
72417: LD_VAR 0 6
72421: PPUSH
72422: LD_VAR 0 4
72426: PPUSH
72427: CALL_OW 74
72431: PPUSH
72432: CALL_OW 112
72436: GO 72462
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72438: LD_VAR 0 4
72442: PPUSH
72443: LD_VAR 0 6
72447: PPUSH
72448: LD_VAR 0 4
72452: PPUSH
72453: CALL_OW 74
72457: PPUSH
72458: CALL 73712 0 2
// end else
72462: GO 72564
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72464: LD_VAR 0 4
72468: PPUSH
72469: LD_VAR 0 2
72473: PUSH
72474: LD_VAR 0 9
72478: ARRAY
72479: PUSH
72480: LD_INT 1
72482: ARRAY
72483: PPUSH
72484: LD_VAR 0 2
72488: PUSH
72489: LD_VAR 0 9
72493: ARRAY
72494: PUSH
72495: LD_INT 2
72497: ARRAY
72498: PPUSH
72499: CALL_OW 297
72503: PUSH
72504: LD_INT 6
72506: GREATER
72507: IFFALSE 72550
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72509: LD_VAR 0 4
72513: PPUSH
72514: LD_VAR 0 2
72518: PUSH
72519: LD_VAR 0 9
72523: ARRAY
72524: PUSH
72525: LD_INT 1
72527: ARRAY
72528: PPUSH
72529: LD_VAR 0 2
72533: PUSH
72534: LD_VAR 0 9
72538: ARRAY
72539: PUSH
72540: LD_INT 2
72542: ARRAY
72543: PPUSH
72544: CALL_OW 114
72548: GO 72564
// SetTag ( i , tag ) ;
72550: LD_VAR 0 4
72554: PPUSH
72555: LD_VAR 0 9
72559: PPUSH
72560: CALL_OW 109
// end else
72564: GO 72637
// if enemy then
72566: LD_VAR 0 5
72570: IFFALSE 72637
// begin if GetWeapon ( i ) = ru_time_lapser then
72572: LD_VAR 0 4
72576: PPUSH
72577: CALL_OW 264
72581: PUSH
72582: LD_INT 49
72584: EQUAL
72585: IFFALSE 72613
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72587: LD_VAR 0 4
72591: PPUSH
72592: LD_VAR 0 5
72596: PPUSH
72597: LD_VAR 0 4
72601: PPUSH
72602: CALL_OW 74
72606: PPUSH
72607: CALL_OW 112
72611: GO 72637
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72613: LD_VAR 0 4
72617: PPUSH
72618: LD_VAR 0 5
72622: PPUSH
72623: LD_VAR 0 4
72627: PPUSH
72628: CALL_OW 74
72632: PPUSH
72633: CALL 73712 0 2
// end ; end ;
72637: GO 72217
72639: POP
72640: POP
// end ;
72641: LD_VAR 0 3
72645: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72646: LD_INT 0
72648: PPUSH
72649: PPUSH
72650: PPUSH
// if not unit or IsInUnit ( unit ) then
72651: LD_VAR 0 1
72655: NOT
72656: PUSH
72657: LD_VAR 0 1
72661: PPUSH
72662: CALL_OW 310
72666: OR
72667: IFFALSE 72671
// exit ;
72669: GO 72762
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72671: LD_ADDR_VAR 0 4
72675: PUSH
72676: LD_VAR 0 1
72680: PPUSH
72681: CALL_OW 250
72685: PPUSH
72686: LD_VAR 0 2
72690: PPUSH
72691: LD_INT 1
72693: PPUSH
72694: CALL_OW 272
72698: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72699: LD_ADDR_VAR 0 5
72703: PUSH
72704: LD_VAR 0 1
72708: PPUSH
72709: CALL_OW 251
72713: PPUSH
72714: LD_VAR 0 2
72718: PPUSH
72719: LD_INT 1
72721: PPUSH
72722: CALL_OW 273
72726: ST_TO_ADDR
// if ValidHex ( x , y ) then
72727: LD_VAR 0 4
72731: PPUSH
72732: LD_VAR 0 5
72736: PPUSH
72737: CALL_OW 488
72741: IFFALSE 72762
// ComTurnXY ( unit , x , y ) ;
72743: LD_VAR 0 1
72747: PPUSH
72748: LD_VAR 0 4
72752: PPUSH
72753: LD_VAR 0 5
72757: PPUSH
72758: CALL_OW 118
// end ;
72762: LD_VAR 0 3
72766: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72767: LD_INT 0
72769: PPUSH
72770: PPUSH
// result := false ;
72771: LD_ADDR_VAR 0 3
72775: PUSH
72776: LD_INT 0
72778: ST_TO_ADDR
// if not units then
72779: LD_VAR 0 2
72783: NOT
72784: IFFALSE 72788
// exit ;
72786: GO 72833
// for i in units do
72788: LD_ADDR_VAR 0 4
72792: PUSH
72793: LD_VAR 0 2
72797: PUSH
72798: FOR_IN
72799: IFFALSE 72831
// if See ( side , i ) then
72801: LD_VAR 0 1
72805: PPUSH
72806: LD_VAR 0 4
72810: PPUSH
72811: CALL_OW 292
72815: IFFALSE 72829
// begin result := true ;
72817: LD_ADDR_VAR 0 3
72821: PUSH
72822: LD_INT 1
72824: ST_TO_ADDR
// exit ;
72825: POP
72826: POP
72827: GO 72833
// end ;
72829: GO 72798
72831: POP
72832: POP
// end ;
72833: LD_VAR 0 3
72837: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72838: LD_INT 0
72840: PPUSH
72841: PPUSH
72842: PPUSH
72843: PPUSH
// if not unit or not points then
72844: LD_VAR 0 1
72848: NOT
72849: PUSH
72850: LD_VAR 0 2
72854: NOT
72855: OR
72856: IFFALSE 72860
// exit ;
72858: GO 72950
// dist := 99999 ;
72860: LD_ADDR_VAR 0 5
72864: PUSH
72865: LD_INT 99999
72867: ST_TO_ADDR
// for i in points do
72868: LD_ADDR_VAR 0 4
72872: PUSH
72873: LD_VAR 0 2
72877: PUSH
72878: FOR_IN
72879: IFFALSE 72948
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72881: LD_ADDR_VAR 0 6
72885: PUSH
72886: LD_VAR 0 1
72890: PPUSH
72891: LD_VAR 0 4
72895: PUSH
72896: LD_INT 1
72898: ARRAY
72899: PPUSH
72900: LD_VAR 0 4
72904: PUSH
72905: LD_INT 2
72907: ARRAY
72908: PPUSH
72909: CALL_OW 297
72913: ST_TO_ADDR
// if tmpDist < dist then
72914: LD_VAR 0 6
72918: PUSH
72919: LD_VAR 0 5
72923: LESS
72924: IFFALSE 72946
// begin result := i ;
72926: LD_ADDR_VAR 0 3
72930: PUSH
72931: LD_VAR 0 4
72935: ST_TO_ADDR
// dist := tmpDist ;
72936: LD_ADDR_VAR 0 5
72940: PUSH
72941: LD_VAR 0 6
72945: ST_TO_ADDR
// end ; end ;
72946: GO 72878
72948: POP
72949: POP
// end ;
72950: LD_VAR 0 3
72954: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72955: LD_INT 0
72957: PPUSH
// uc_side := side ;
72958: LD_ADDR_OWVAR 20
72962: PUSH
72963: LD_VAR 0 1
72967: ST_TO_ADDR
// uc_nation := 3 ;
72968: LD_ADDR_OWVAR 21
72972: PUSH
72973: LD_INT 3
72975: ST_TO_ADDR
// vc_chassis := 25 ;
72976: LD_ADDR_OWVAR 37
72980: PUSH
72981: LD_INT 25
72983: ST_TO_ADDR
// vc_engine := engine_siberite ;
72984: LD_ADDR_OWVAR 39
72988: PUSH
72989: LD_INT 3
72991: ST_TO_ADDR
// vc_control := control_computer ;
72992: LD_ADDR_OWVAR 38
72996: PUSH
72997: LD_INT 3
72999: ST_TO_ADDR
// vc_weapon := 59 ;
73000: LD_ADDR_OWVAR 40
73004: PUSH
73005: LD_INT 59
73007: ST_TO_ADDR
// result := CreateVehicle ;
73008: LD_ADDR_VAR 0 5
73012: PUSH
73013: CALL_OW 45
73017: ST_TO_ADDR
// SetDir ( result , d ) ;
73018: LD_VAR 0 5
73022: PPUSH
73023: LD_VAR 0 4
73027: PPUSH
73028: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73032: LD_VAR 0 5
73036: PPUSH
73037: LD_VAR 0 2
73041: PPUSH
73042: LD_VAR 0 3
73046: PPUSH
73047: LD_INT 0
73049: PPUSH
73050: CALL_OW 48
// end ;
73054: LD_VAR 0 5
73058: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73059: LD_INT 0
73061: PPUSH
73062: PPUSH
73063: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73064: LD_ADDR_VAR 0 2
73068: PUSH
73069: LD_INT 0
73071: PUSH
73072: LD_INT 0
73074: PUSH
73075: LD_INT 0
73077: PUSH
73078: LD_INT 0
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: LIST
73085: LIST
73086: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73087: LD_VAR 0 1
73091: NOT
73092: PUSH
73093: LD_VAR 0 1
73097: PPUSH
73098: CALL_OW 264
73102: PUSH
73103: LD_INT 12
73105: PUSH
73106: LD_INT 51
73108: PUSH
73109: LD_INT 32
73111: PUSH
73112: LD_INT 89
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: IN
73121: NOT
73122: OR
73123: IFFALSE 73127
// exit ;
73125: GO 73225
// for i := 1 to 3 do
73127: LD_ADDR_VAR 0 3
73131: PUSH
73132: DOUBLE
73133: LD_INT 1
73135: DEC
73136: ST_TO_ADDR
73137: LD_INT 3
73139: PUSH
73140: FOR_TO
73141: IFFALSE 73223
// begin tmp := GetCargo ( cargo , i ) ;
73143: LD_ADDR_VAR 0 4
73147: PUSH
73148: LD_VAR 0 1
73152: PPUSH
73153: LD_VAR 0 3
73157: PPUSH
73158: CALL_OW 289
73162: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73163: LD_ADDR_VAR 0 2
73167: PUSH
73168: LD_VAR 0 2
73172: PPUSH
73173: LD_VAR 0 3
73177: PPUSH
73178: LD_VAR 0 4
73182: PPUSH
73183: CALL_OW 1
73187: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73188: LD_ADDR_VAR 0 2
73192: PUSH
73193: LD_VAR 0 2
73197: PPUSH
73198: LD_INT 4
73200: PPUSH
73201: LD_VAR 0 2
73205: PUSH
73206: LD_INT 4
73208: ARRAY
73209: PUSH
73210: LD_VAR 0 4
73214: PLUS
73215: PPUSH
73216: CALL_OW 1
73220: ST_TO_ADDR
// end ;
73221: GO 73140
73223: POP
73224: POP
// end ;
73225: LD_VAR 0 2
73229: RET
// export function Length ( array ) ; begin
73230: LD_INT 0
73232: PPUSH
// result := array + 0 ;
73233: LD_ADDR_VAR 0 2
73237: PUSH
73238: LD_VAR 0 1
73242: PUSH
73243: LD_INT 0
73245: PLUS
73246: ST_TO_ADDR
// end ;
73247: LD_VAR 0 2
73251: RET
// export function PrepareArray ( array ) ; begin
73252: LD_INT 0
73254: PPUSH
// result := array diff 0 ;
73255: LD_ADDR_VAR 0 2
73259: PUSH
73260: LD_VAR 0 1
73264: PUSH
73265: LD_INT 0
73267: DIFF
73268: ST_TO_ADDR
// if not result [ 1 ] then
73269: LD_VAR 0 2
73273: PUSH
73274: LD_INT 1
73276: ARRAY
73277: NOT
73278: IFFALSE 73298
// result := Delete ( result , 1 ) ;
73280: LD_ADDR_VAR 0 2
73284: PUSH
73285: LD_VAR 0 2
73289: PPUSH
73290: LD_INT 1
73292: PPUSH
73293: CALL_OW 3
73297: ST_TO_ADDR
// end ;
73298: LD_VAR 0 2
73302: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73303: LD_INT 0
73305: PPUSH
73306: PPUSH
73307: PPUSH
73308: PPUSH
// sibRocketRange := 25 ;
73309: LD_ADDR_VAR 0 6
73313: PUSH
73314: LD_INT 25
73316: ST_TO_ADDR
// result := false ;
73317: LD_ADDR_VAR 0 4
73321: PUSH
73322: LD_INT 0
73324: ST_TO_ADDR
// for i := 0 to 5 do
73325: LD_ADDR_VAR 0 5
73329: PUSH
73330: DOUBLE
73331: LD_INT 0
73333: DEC
73334: ST_TO_ADDR
73335: LD_INT 5
73337: PUSH
73338: FOR_TO
73339: IFFALSE 73406
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73341: LD_VAR 0 1
73345: PPUSH
73346: LD_VAR 0 5
73350: PPUSH
73351: LD_VAR 0 6
73355: PPUSH
73356: CALL_OW 272
73360: PPUSH
73361: LD_VAR 0 2
73365: PPUSH
73366: LD_VAR 0 5
73370: PPUSH
73371: LD_VAR 0 6
73375: PPUSH
73376: CALL_OW 273
73380: PPUSH
73381: LD_VAR 0 3
73385: PPUSH
73386: CALL_OW 309
73390: IFFALSE 73404
// begin result := true ;
73392: LD_ADDR_VAR 0 4
73396: PUSH
73397: LD_INT 1
73399: ST_TO_ADDR
// exit ;
73400: POP
73401: POP
73402: GO 73408
// end ;
73404: GO 73338
73406: POP
73407: POP
// end ;
73408: LD_VAR 0 4
73412: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
73413: LD_INT 0
73415: PPUSH
73416: PPUSH
73417: PPUSH
// if btype = b_depot then
73418: LD_VAR 0 2
73422: PUSH
73423: LD_INT 0
73425: EQUAL
73426: IFFALSE 73438
// begin result := true ;
73428: LD_ADDR_VAR 0 3
73432: PUSH
73433: LD_INT 1
73435: ST_TO_ADDR
// exit ;
73436: GO 73554
// end ; pom := GetBase ( depot ) ;
73438: LD_ADDR_VAR 0 4
73442: PUSH
73443: LD_VAR 0 1
73447: PPUSH
73448: CALL_OW 274
73452: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
73453: LD_ADDR_VAR 0 5
73457: PUSH
73458: LD_VAR 0 2
73462: PPUSH
73463: LD_VAR 0 1
73467: PPUSH
73468: CALL_OW 248
73472: PPUSH
73473: CALL_OW 450
73477: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
73478: LD_ADDR_VAR 0 3
73482: PUSH
73483: LD_VAR 0 4
73487: PPUSH
73488: LD_INT 1
73490: PPUSH
73491: CALL_OW 275
73495: PUSH
73496: LD_VAR 0 5
73500: PUSH
73501: LD_INT 1
73503: ARRAY
73504: GREATEREQUAL
73505: PUSH
73506: LD_VAR 0 4
73510: PPUSH
73511: LD_INT 2
73513: PPUSH
73514: CALL_OW 275
73518: PUSH
73519: LD_VAR 0 5
73523: PUSH
73524: LD_INT 2
73526: ARRAY
73527: GREATEREQUAL
73528: AND
73529: PUSH
73530: LD_VAR 0 4
73534: PPUSH
73535: LD_INT 3
73537: PPUSH
73538: CALL_OW 275
73542: PUSH
73543: LD_VAR 0 5
73547: PUSH
73548: LD_INT 3
73550: ARRAY
73551: GREATEREQUAL
73552: AND
73553: ST_TO_ADDR
// end ;
73554: LD_VAR 0 3
73558: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73559: LD_INT 0
73561: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73562: LD_VAR 0 1
73566: PPUSH
73567: LD_VAR 0 2
73571: PPUSH
73572: LD_INT 0
73574: PPUSH
73575: LD_INT 0
73577: PPUSH
73578: LD_INT 1
73580: PPUSH
73581: LD_INT 0
73583: PPUSH
73584: CALL_OW 587
// end ;
73588: LD_VAR 0 3
73592: RET
// export function CenterOnNow ( unit ) ; begin
73593: LD_INT 0
73595: PPUSH
// result := IsInUnit ( unit ) ;
73596: LD_ADDR_VAR 0 2
73600: PUSH
73601: LD_VAR 0 1
73605: PPUSH
73606: CALL_OW 310
73610: ST_TO_ADDR
// if not result then
73611: LD_VAR 0 2
73615: NOT
73616: IFFALSE 73628
// result := unit ;
73618: LD_ADDR_VAR 0 2
73622: PUSH
73623: LD_VAR 0 1
73627: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73628: LD_VAR 0 1
73632: PPUSH
73633: CALL_OW 87
// end ;
73637: LD_VAR 0 2
73641: RET
// export function ComMoveHex ( unit , hex ) ; begin
73642: LD_INT 0
73644: PPUSH
// if not hex then
73645: LD_VAR 0 2
73649: NOT
73650: IFFALSE 73654
// exit ;
73652: GO 73707
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73654: LD_VAR 0 2
73658: PUSH
73659: LD_INT 1
73661: ARRAY
73662: PPUSH
73663: LD_VAR 0 2
73667: PUSH
73668: LD_INT 2
73670: ARRAY
73671: PPUSH
73672: CALL_OW 428
73676: IFFALSE 73680
// exit ;
73678: GO 73707
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73680: LD_VAR 0 1
73684: PPUSH
73685: LD_VAR 0 2
73689: PUSH
73690: LD_INT 1
73692: ARRAY
73693: PPUSH
73694: LD_VAR 0 2
73698: PUSH
73699: LD_INT 2
73701: ARRAY
73702: PPUSH
73703: CALL_OW 111
// end ;
73707: LD_VAR 0 3
73711: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73712: LD_INT 0
73714: PPUSH
73715: PPUSH
73716: PPUSH
// if not unit or not enemy then
73717: LD_VAR 0 1
73721: NOT
73722: PUSH
73723: LD_VAR 0 2
73727: NOT
73728: OR
73729: IFFALSE 73733
// exit ;
73731: GO 73857
// x := GetX ( enemy ) ;
73733: LD_ADDR_VAR 0 4
73737: PUSH
73738: LD_VAR 0 2
73742: PPUSH
73743: CALL_OW 250
73747: ST_TO_ADDR
// y := GetY ( enemy ) ;
73748: LD_ADDR_VAR 0 5
73752: PUSH
73753: LD_VAR 0 2
73757: PPUSH
73758: CALL_OW 251
73762: ST_TO_ADDR
// if ValidHex ( x , y ) then
73763: LD_VAR 0 4
73767: PPUSH
73768: LD_VAR 0 5
73772: PPUSH
73773: CALL_OW 488
73777: IFFALSE 73857
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73779: LD_VAR 0 2
73783: PPUSH
73784: CALL_OW 247
73788: PUSH
73789: LD_INT 3
73791: PUSH
73792: LD_INT 2
73794: PUSH
73795: EMPTY
73796: LIST
73797: LIST
73798: IN
73799: PUSH
73800: LD_VAR 0 1
73804: PPUSH
73805: CALL_OW 255
73809: PPUSH
73810: LD_VAR 0 2
73814: PPUSH
73815: CALL_OW 292
73819: OR
73820: IFFALSE 73838
// ComAttackUnit ( unit , enemy ) else
73822: LD_VAR 0 1
73826: PPUSH
73827: LD_VAR 0 2
73831: PPUSH
73832: CALL_OW 115
73836: GO 73857
// ComAgressiveMove ( unit , x , y ) ;
73838: LD_VAR 0 1
73842: PPUSH
73843: LD_VAR 0 4
73847: PPUSH
73848: LD_VAR 0 5
73852: PPUSH
73853: CALL_OW 114
// end ;
73857: LD_VAR 0 3
73861: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73862: LD_INT 0
73864: PPUSH
73865: PPUSH
73866: PPUSH
// list := AreaToList ( area , 0 ) ;
73867: LD_ADDR_VAR 0 5
73871: PUSH
73872: LD_VAR 0 1
73876: PPUSH
73877: LD_INT 0
73879: PPUSH
73880: CALL_OW 517
73884: ST_TO_ADDR
// if not list then
73885: LD_VAR 0 5
73889: NOT
73890: IFFALSE 73894
// exit ;
73892: GO 74024
// if all then
73894: LD_VAR 0 2
73898: IFFALSE 73986
// begin for i := 1 to list [ 1 ] do
73900: LD_ADDR_VAR 0 4
73904: PUSH
73905: DOUBLE
73906: LD_INT 1
73908: DEC
73909: ST_TO_ADDR
73910: LD_VAR 0 5
73914: PUSH
73915: LD_INT 1
73917: ARRAY
73918: PUSH
73919: FOR_TO
73920: IFFALSE 73982
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73922: LD_ADDR_VAR 0 3
73926: PUSH
73927: LD_VAR 0 3
73931: PPUSH
73932: LD_VAR 0 3
73936: PUSH
73937: LD_INT 1
73939: PLUS
73940: PPUSH
73941: LD_VAR 0 5
73945: PUSH
73946: LD_INT 1
73948: ARRAY
73949: PUSH
73950: LD_VAR 0 4
73954: ARRAY
73955: PUSH
73956: LD_VAR 0 5
73960: PUSH
73961: LD_INT 2
73963: ARRAY
73964: PUSH
73965: LD_VAR 0 4
73969: ARRAY
73970: PUSH
73971: EMPTY
73972: LIST
73973: LIST
73974: PPUSH
73975: CALL_OW 1
73979: ST_TO_ADDR
73980: GO 73919
73982: POP
73983: POP
// exit ;
73984: GO 74024
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73986: LD_ADDR_VAR 0 3
73990: PUSH
73991: LD_VAR 0 5
73995: PUSH
73996: LD_INT 1
73998: ARRAY
73999: PUSH
74000: LD_INT 1
74002: ARRAY
74003: PUSH
74004: LD_VAR 0 5
74008: PUSH
74009: LD_INT 2
74011: ARRAY
74012: PUSH
74013: LD_INT 1
74015: ARRAY
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: PUSH
74021: EMPTY
74022: LIST
74023: ST_TO_ADDR
// end ;
74024: LD_VAR 0 3
74028: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
74029: LD_INT 0
74031: PPUSH
74032: PPUSH
// list := AreaToList ( area , 0 ) ;
74033: LD_ADDR_VAR 0 4
74037: PUSH
74038: LD_VAR 0 1
74042: PPUSH
74043: LD_INT 0
74045: PPUSH
74046: CALL_OW 517
74050: ST_TO_ADDR
// if not list then
74051: LD_VAR 0 4
74055: NOT
74056: IFFALSE 74060
// exit ;
74058: GO 74101
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
74060: LD_ADDR_VAR 0 3
74064: PUSH
74065: LD_VAR 0 4
74069: PUSH
74070: LD_INT 1
74072: ARRAY
74073: PUSH
74074: LD_INT 1
74076: ARRAY
74077: PUSH
74078: LD_VAR 0 4
74082: PUSH
74083: LD_INT 2
74085: ARRAY
74086: PUSH
74087: LD_INT 1
74089: ARRAY
74090: PUSH
74091: LD_VAR 0 2
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: LIST
74100: ST_TO_ADDR
// end ;
74101: LD_VAR 0 3
74105: RET
// export function First ( array ) ; begin
74106: LD_INT 0
74108: PPUSH
// if not array then
74109: LD_VAR 0 1
74113: NOT
74114: IFFALSE 74118
// exit ;
74116: GO 74132
// result := array [ 1 ] ;
74118: LD_ADDR_VAR 0 2
74122: PUSH
74123: LD_VAR 0 1
74127: PUSH
74128: LD_INT 1
74130: ARRAY
74131: ST_TO_ADDR
// end ;
74132: LD_VAR 0 2
74136: RET
// export function Last ( array ) ; begin
74137: LD_INT 0
74139: PPUSH
// if not array then
74140: LD_VAR 0 1
74144: NOT
74145: IFFALSE 74149
// exit ;
74147: GO 74165
// result := array [ array ] ;
74149: LD_ADDR_VAR 0 2
74153: PUSH
74154: LD_VAR 0 1
74158: PUSH
74159: LD_VAR 0 1
74163: ARRAY
74164: ST_TO_ADDR
// end ;
74165: LD_VAR 0 2
74169: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74170: LD_INT 0
74172: PPUSH
74173: PPUSH
// result := [ ] ;
74174: LD_ADDR_VAR 0 5
74178: PUSH
74179: EMPTY
74180: ST_TO_ADDR
// if not array then
74181: LD_VAR 0 1
74185: NOT
74186: IFFALSE 74190
// exit ;
74188: GO 74302
// for i := 1 to array do
74190: LD_ADDR_VAR 0 6
74194: PUSH
74195: DOUBLE
74196: LD_INT 1
74198: DEC
74199: ST_TO_ADDR
74200: LD_VAR 0 1
74204: PUSH
74205: FOR_TO
74206: IFFALSE 74300
// if array [ i ] [ index ] = value then
74208: LD_VAR 0 1
74212: PUSH
74213: LD_VAR 0 6
74217: ARRAY
74218: PUSH
74219: LD_VAR 0 2
74223: ARRAY
74224: PUSH
74225: LD_VAR 0 3
74229: EQUAL
74230: IFFALSE 74298
// begin if indexColumn then
74232: LD_VAR 0 4
74236: IFFALSE 74272
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74238: LD_ADDR_VAR 0 5
74242: PUSH
74243: LD_VAR 0 5
74247: PPUSH
74248: LD_VAR 0 1
74252: PUSH
74253: LD_VAR 0 6
74257: ARRAY
74258: PUSH
74259: LD_VAR 0 4
74263: ARRAY
74264: PPUSH
74265: CALL 69494 0 2
74269: ST_TO_ADDR
74270: GO 74298
// result := Join ( result , array [ i ] ) ;
74272: LD_ADDR_VAR 0 5
74276: PUSH
74277: LD_VAR 0 5
74281: PPUSH
74282: LD_VAR 0 1
74286: PUSH
74287: LD_VAR 0 6
74291: ARRAY
74292: PPUSH
74293: CALL 69494 0 2
74297: ST_TO_ADDR
// end ;
74298: GO 74205
74300: POP
74301: POP
// end ;
74302: LD_VAR 0 5
74306: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74307: LD_INT 0
74309: PPUSH
// if not vehicles or not parkingPoint then
74310: LD_VAR 0 1
74314: NOT
74315: PUSH
74316: LD_VAR 0 2
74320: NOT
74321: OR
74322: IFFALSE 74326
// exit ;
74324: GO 74424
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74326: LD_ADDR_VAR 0 1
74330: PUSH
74331: LD_VAR 0 1
74335: PPUSH
74336: LD_INT 50
74338: PUSH
74339: EMPTY
74340: LIST
74341: PUSH
74342: LD_INT 3
74344: PUSH
74345: LD_INT 92
74347: PUSH
74348: LD_VAR 0 2
74352: PUSH
74353: LD_INT 1
74355: ARRAY
74356: PUSH
74357: LD_VAR 0 2
74361: PUSH
74362: LD_INT 2
74364: ARRAY
74365: PUSH
74366: LD_INT 8
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: PUSH
74379: EMPTY
74380: LIST
74381: LIST
74382: PPUSH
74383: CALL_OW 72
74387: ST_TO_ADDR
// if not vehicles then
74388: LD_VAR 0 1
74392: NOT
74393: IFFALSE 74397
// exit ;
74395: GO 74424
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74397: LD_VAR 0 1
74401: PPUSH
74402: LD_VAR 0 2
74406: PUSH
74407: LD_INT 1
74409: ARRAY
74410: PPUSH
74411: LD_VAR 0 2
74415: PUSH
74416: LD_INT 2
74418: ARRAY
74419: PPUSH
74420: CALL_OW 111
// end ;
74424: LD_VAR 0 3
74428: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
74429: LD_INT 0
74431: PPUSH
74432: PPUSH
74433: PPUSH
// if not side or not area then
74434: LD_VAR 0 1
74438: NOT
74439: PUSH
74440: LD_VAR 0 2
74444: NOT
74445: OR
74446: IFFALSE 74450
// exit ;
74448: GO 74569
// tmp := AreaToList ( area , 0 ) ;
74450: LD_ADDR_VAR 0 5
74454: PUSH
74455: LD_VAR 0 2
74459: PPUSH
74460: LD_INT 0
74462: PPUSH
74463: CALL_OW 517
74467: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74468: LD_ADDR_VAR 0 4
74472: PUSH
74473: DOUBLE
74474: LD_INT 1
74476: DEC
74477: ST_TO_ADDR
74478: LD_VAR 0 5
74482: PUSH
74483: LD_INT 1
74485: ARRAY
74486: PUSH
74487: FOR_TO
74488: IFFALSE 74567
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74490: LD_VAR 0 5
74494: PUSH
74495: LD_INT 1
74497: ARRAY
74498: PUSH
74499: LD_VAR 0 4
74503: ARRAY
74504: PPUSH
74505: LD_VAR 0 5
74509: PUSH
74510: LD_INT 2
74512: ARRAY
74513: PUSH
74514: LD_VAR 0 4
74518: ARRAY
74519: PPUSH
74520: CALL_OW 351
74524: IFFALSE 74565
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74526: LD_VAR 0 5
74530: PUSH
74531: LD_INT 1
74533: ARRAY
74534: PUSH
74535: LD_VAR 0 4
74539: ARRAY
74540: PPUSH
74541: LD_VAR 0 5
74545: PUSH
74546: LD_INT 2
74548: ARRAY
74549: PUSH
74550: LD_VAR 0 4
74554: ARRAY
74555: PPUSH
74556: LD_VAR 0 1
74560: PPUSH
74561: CALL_OW 244
// end ;
74565: GO 74487
74567: POP
74568: POP
// end ; end_of_file
74569: LD_VAR 0 3
74573: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74574: LD_VAR 0 1
74578: PUSH
74579: LD_INT 200
74581: DOUBLE
74582: GREATEREQUAL
74583: IFFALSE 74591
74585: LD_INT 299
74587: DOUBLE
74588: LESSEQUAL
74589: IFTRUE 74593
74591: GO 74625
74593: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74594: LD_VAR 0 1
74598: PPUSH
74599: LD_VAR 0 2
74603: PPUSH
74604: LD_VAR 0 3
74608: PPUSH
74609: LD_VAR 0 4
74613: PPUSH
74614: LD_VAR 0 5
74618: PPUSH
74619: CALL 27285 0 5
74623: GO 74702
74625: LD_INT 300
74627: DOUBLE
74628: GREATEREQUAL
74629: IFFALSE 74637
74631: LD_INT 399
74633: DOUBLE
74634: LESSEQUAL
74635: IFTRUE 74639
74637: GO 74701
74639: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74640: LD_VAR 0 1
74644: PPUSH
74645: LD_VAR 0 2
74649: PPUSH
74650: LD_VAR 0 3
74654: PPUSH
74655: LD_VAR 0 4
74659: PPUSH
74660: LD_VAR 0 5
74664: PPUSH
74665: LD_VAR 0 6
74669: PPUSH
74670: LD_VAR 0 7
74674: PPUSH
74675: LD_VAR 0 8
74679: PPUSH
74680: LD_VAR 0 9
74684: PPUSH
74685: LD_VAR 0 10
74689: PPUSH
74690: LD_VAR 0 11
74694: PPUSH
74695: CALL 23610 0 11
74699: GO 74702
74701: POP
// end ;
74702: PPOPN 11
74704: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74705: LD_VAR 0 1
74709: PPUSH
74710: LD_VAR 0 2
74714: PPUSH
74715: LD_VAR 0 3
74719: PPUSH
74720: LD_VAR 0 4
74724: PPUSH
74725: LD_VAR 0 5
74729: PPUSH
74730: CALL 27021 0 5
// end ; end_of_file
74734: PPOPN 5
74736: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74737: LD_VAR 0 1
74741: PPUSH
74742: LD_VAR 0 2
74746: PPUSH
74747: LD_VAR 0 3
74751: PPUSH
74752: LD_VAR 0 4
74756: PPUSH
74757: LD_VAR 0 5
74761: PPUSH
74762: LD_VAR 0 6
74766: PPUSH
74767: CALL 11262 0 6
// end ;
74771: PPOPN 6
74773: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74774: LD_INT 0
74776: PPUSH
// begin if not units then
74777: LD_VAR 0 1
74781: NOT
74782: IFFALSE 74786
// exit ;
74784: GO 74786
// end ;
74786: PPOPN 7
74788: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74789: CALL 11149 0 0
// end ;
74793: PPOPN 1
74795: END
