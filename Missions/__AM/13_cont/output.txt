// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 29
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 31
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 30
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 33
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 32
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 34
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 43
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 25
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 26
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 36
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 37
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 38
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 39
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 40
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 44
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 45
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 46
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 35
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 41
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 42
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// if Difficulty < 4 then
 219: LD_OWVAR 67
 223: PUSH
 224: LD_INT 4
 226: LESS
 227: IFFALSE 236
// RemoveEnvironmentArea ( sibBlockArea ) ;
 229: LD_INT 18
 231: PPUSH
 232: CALL_OW 355
// PrepareVehicles ;
 236: CALL 1245 0 0
// PrepareHeroes ;
 240: CALL 477 0 0
// PrepareAmericansRandom ;
 244: CALL 1149 0 0
// PrepareDifficulty ;
 248: CALL 8539 0 0
// Action ;
 252: CALL 5399 0 0
// end ;
 256: END
// every 0 0$1 trigger debugMode do var i , j ;
 257: LD_EXP 41
 261: IFFALSE 432
 263: GO 265
 265: DISABLE
 266: LD_INT 0
 268: PPUSH
 269: PPUSH
// begin enable ;
 270: ENABLE
// FogOff ( true ) ;
 271: LD_INT 1
 273: PPUSH
 274: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 278: LD_ADDR_VAR 0 1
 282: PUSH
 283: LD_INT 22
 285: PUSH
 286: LD_INT 1
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: LD_INT 21
 295: PUSH
 296: LD_INT 1
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 329
// SetLives ( i , 1000 ) ;
 315: LD_VAR 0 1
 319: PPUSH
 320: LD_INT 1000
 322: PPUSH
 323: CALL_OW 234
 327: GO 312
 329: POP
 330: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 331: LD_ADDR_VAR 0 1
 335: PUSH
 336: LD_INT 22
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: LD_INT 30
 351: PUSH
 352: LD_INT 0
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 30
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PPUSH
 378: CALL_OW 69
 382: PUSH
 383: FOR_IN
 384: IFFALSE 430
// for j := 1 to 3 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 3
 398: PUSH
 399: FOR_TO
 400: IFFALSE 426
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 274
 411: PPUSH
 412: LD_VAR 0 2
 416: PPUSH
 417: LD_INT 9999
 419: PPUSH
 420: CALL_OW 277
 424: GO 399
 426: POP
 427: POP
 428: GO 383
 430: POP
 431: POP
// end ;
 432: PPOPN 2
 434: END
// every 0 0$1 trigger achivCounter >= 2 do
 435: LD_EXP 42
 439: PUSH
 440: LD_INT 2
 442: GREATEREQUAL
 443: IFFALSE 455
 445: GO 447
 447: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 448: LD_STRING ACH_REMOTE
 450: PPUSH
 451: CALL_OW 543
 455: END
// every 0 0$1 trigger destroyCounter >= 30 do
 456: LD_EXP 43
 460: PUSH
 461: LD_INT 30
 463: GREATEREQUAL
 464: IFFALSE 476
 466: GO 468
 468: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 469: LD_STRING ACH_DEFMASTER
 471: PPUSH
 472: CALL_OW 543
 476: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 477: LD_INT 0
 479: PPUSH
 480: PPUSH
 481: PPUSH
 482: PPUSH
// uc_side = 1 ;
 483: LD_ADDR_OWVAR 20
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 491: LD_ADDR_EXP 1
 495: PUSH
 496: LD_STRING JMM
 498: PPUSH
 499: LD_EXP 41
 503: NOT
 504: PPUSH
 505: LD_STRING 13c_
 507: PPUSH
 508: CALL 31893 0 3
 512: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 513: LD_ADDR_EXP 2
 517: PUSH
 518: LD_STRING Stevens
 520: PPUSH
 521: LD_EXP 41
 525: NOT
 526: PPUSH
 527: LD_STRING 13c_
 529: PPUSH
 530: CALL 31893 0 3
 534: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING Lisa
 542: PPUSH
 543: LD_EXP 41
 547: NOT
 548: PPUSH
 549: LD_STRING 13c_
 551: PPUSH
 552: CALL 31893 0 3
 556: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 557: LD_ADDR_EXP 4
 561: PUSH
 562: LD_STRING Donaldson
 564: PPUSH
 565: LD_EXP 41
 569: NOT
 570: PPUSH
 571: LD_STRING 13c_
 573: PPUSH
 574: CALL 31893 0 3
 578: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 579: LD_ADDR_EXP 5
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_EXP 41
 591: NOT
 592: PPUSH
 593: LD_STRING 13c_
 595: PPUSH
 596: CALL 31893 0 3
 600: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 601: LD_ADDR_EXP 6
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_EXP 41
 613: NOT
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 31893 0 3
 622: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 623: LD_ADDR_EXP 7
 627: PUSH
 628: LD_STRING Denis
 630: PPUSH
 631: LD_EXP 41
 635: NOT
 636: PPUSH
 637: LD_STRING 13c_
 639: PPUSH
 640: CALL 31893 0 3
 644: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_STRING Brown
 652: PPUSH
 653: LD_EXP 41
 657: NOT
 658: PPUSH
 659: LD_STRING 13c_
 661: PPUSH
 662: CALL 31893 0 3
 666: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 667: LD_ADDR_EXP 9
 671: PUSH
 672: LD_STRING Gladstone
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: LD_STRING 13c_
 680: PPUSH
 681: CALL 31893 0 3
 685: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 686: LD_ADDR_EXP 10
 690: PUSH
 691: LD_STRING Houten
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: LD_STRING 13c_
 699: PPUSH
 700: CALL 31893 0 3
 704: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 705: LD_ADDR_EXP 11
 709: PUSH
 710: LD_STRING Cornel
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_STRING 13c_
 718: PPUSH
 719: CALL 31893 0 3
 723: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 724: LD_ADDR_EXP 12
 728: PUSH
 729: LD_STRING Gary
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_STRING 13c_
 737: PPUSH
 738: CALL 31893 0 3
 742: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 743: LD_ADDR_EXP 13
 747: PUSH
 748: LD_STRING Frank
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_STRING 13c_
 756: PPUSH
 757: CALL 31893 0 3
 761: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 762: LD_ADDR_EXP 14
 766: PUSH
 767: LD_STRING Kikuchi
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_STRING 13c_
 775: PPUSH
 776: CALL 31893 0 3
 780: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , true , 13c_ ) ;
 781: LD_ADDR_EXP 15
 785: PUSH
 786: LD_STRING DeltaDoctor
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: LD_STRING 13c_
 794: PPUSH
 795: CALL 31893 0 3
 799: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 800: LD_ADDR_EXP 16
 804: PUSH
 805: LD_STRING Powell
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_STRING 
 813: PPUSH
 814: CALL 31893 0 3
 818: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , DeltaDoctor ] ;
 819: LD_ADDR_VAR 0 2
 823: PUSH
 824: LD_EXP 1
 828: PUSH
 829: LD_EXP 2
 833: PUSH
 834: LD_EXP 3
 838: PUSH
 839: LD_EXP 4
 843: PUSH
 844: LD_EXP 5
 848: PUSH
 849: LD_EXP 6
 853: PUSH
 854: LD_EXP 7
 858: PUSH
 859: LD_EXP 8
 863: PUSH
 864: LD_EXP 9
 868: PUSH
 869: LD_EXP 10
 873: PUSH
 874: LD_EXP 11
 878: PUSH
 879: LD_EXP 12
 883: PUSH
 884: LD_EXP 13
 888: PUSH
 889: LD_EXP 14
 893: PUSH
 894: LD_EXP 15
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 916: LD_ADDR_VAR 0 3
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 33
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 21
 943: PUSH
 944: LD_INT 2
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PPUSH
 956: CALL_OW 69
 960: ST_TO_ADDR
// for i = tmp downto 1 do
 961: LD_ADDR_VAR 0 4
 965: PUSH
 966: DOUBLE
 967: LD_VAR 0 2
 971: INC
 972: ST_TO_ADDR
 973: LD_INT 1
 975: PUSH
 976: FOR_DOWNTO
 977: IFFALSE 1014
// if not tmp [ i ] then
 979: LD_VAR 0 2
 983: PUSH
 984: LD_VAR 0 4
 988: ARRAY
 989: NOT
 990: IFFALSE 1012
// tmp := Delete ( tmp , i ) ;
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: LD_VAR 0 2
1001: PPUSH
1002: LD_VAR 0 4
1006: PPUSH
1007: CALL_OW 3
1011: ST_TO_ADDR
1012: GO 976
1014: POP
1015: POP
// for i = 1 to tmp do
1016: LD_ADDR_VAR 0 4
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_VAR 0 2
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1062
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1034: LD_VAR 0 2
1038: PUSH
1039: LD_VAR 0 4
1043: ARRAY
1044: PPUSH
1045: LD_VAR 0 3
1049: PUSH
1050: LD_VAR 0 4
1054: ARRAY
1055: PPUSH
1056: CALL_OW 52
1060: GO 1031
1062: POP
1063: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1064: LD_INT 22
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 25
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PPUSH
1088: CALL_OW 69
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: PUSH
1097: LD_INT 22
1099: PUSH
1100: LD_INT 1
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 34
1109: PUSH
1110: LD_INT 13
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PPUSH
1121: CALL_OW 69
1125: PUSH
1126: LD_INT 0
1128: EQUAL
1129: AND
1130: IFFALSE 1144
// SetClass ( JMM , 2 ) ;
1132: LD_EXP 1
1136: PPUSH
1137: LD_INT 2
1139: PPUSH
1140: CALL_OW 336
// end ;
1144: LD_VAR 0 1
1148: RET
// export function PrepareAmericansRandom ; var i ; begin
1149: LD_INT 0
1151: PPUSH
1152: PPUSH
// uc_side = 1 ;
1153: LD_ADDR_OWVAR 20
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1161: LD_ADDR_EXP 17
1165: PUSH
1166: LD_STRING 13c_others
1168: PPUSH
1169: CALL_OW 31
1173: ST_TO_ADDR
// for i in others13 do
1174: LD_ADDR_VAR 0 2
1178: PUSH
1179: LD_EXP 17
1183: PUSH
1184: FOR_IN
1185: IFFALSE 1238
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1187: LD_VAR 0 2
1191: PPUSH
1192: LD_INT 22
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PUSH
1202: LD_INT 21
1204: PUSH
1205: LD_INT 2
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 58
1214: PUSH
1215: EMPTY
1216: LIST
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: PPUSH
1223: CALL_OW 69
1227: PUSH
1228: LD_INT 1
1230: ARRAY
1231: PPUSH
1232: CALL_OW 52
1236: GO 1184
1238: POP
1239: POP
// end ;
1240: LD_VAR 0 1
1244: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1253: LD_ADDR_VAR 0 5
1257: PUSH
1258: LD_STRING 13_VehiclesIn13_1
1260: PPUSH
1261: LD_INT 1
1263: PUSH
1264: LD_INT 5
1266: PUSH
1267: LD_INT 3
1269: PUSH
1270: LD_INT 1
1272: PUSH
1273: LD_INT 6
1275: PUSH
1276: LD_INT 100
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: PUSH
1287: LD_INT 1
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: LD_INT 3
1295: PUSH
1296: LD_INT 1
1298: PUSH
1299: LD_INT 6
1301: PUSH
1302: LD_INT 100
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 1
1315: PUSH
1316: LD_INT 5
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 1
1324: PUSH
1325: LD_INT 6
1327: PUSH
1328: LD_INT 100
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 1
1341: PUSH
1342: LD_INT 5
1344: PUSH
1345: LD_INT 3
1347: PUSH
1348: LD_INT 1
1350: PUSH
1351: LD_INT 6
1353: PUSH
1354: LD_INT 100
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 5
1370: PUSH
1371: LD_INT 3
1373: PUSH
1374: LD_INT 1
1376: PUSH
1377: LD_INT 6
1379: PUSH
1380: LD_INT 100
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: LD_INT 5
1396: PUSH
1397: LD_INT 3
1399: PUSH
1400: LD_INT 1
1402: PUSH
1403: LD_INT 6
1405: PUSH
1406: LD_INT 100
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: LD_INT 5
1422: PUSH
1423: LD_INT 3
1425: PUSH
1426: LD_INT 1
1428: PUSH
1429: LD_INT 6
1431: PUSH
1432: LD_INT 100
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_INT 1
1445: PUSH
1446: LD_INT 5
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 1
1454: PUSH
1455: LD_INT 6
1457: PUSH
1458: LD_INT 100
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: PPUSH
1479: CALL_OW 30
1483: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1484: LD_ADDR_EXP 25
1488: PUSH
1489: LD_STRING 13_ResourcesInCargo13_1
1491: PPUSH
1492: EMPTY
1493: PPUSH
1494: CALL_OW 30
1498: ST_TO_ADDR
// cargoList = [ ] ;
1499: LD_ADDR_VAR 0 6
1503: PUSH
1504: EMPTY
1505: ST_TO_ADDR
// uc_side = 1 ;
1506: LD_ADDR_OWVAR 20
1510: PUSH
1511: LD_INT 1
1513: ST_TO_ADDR
// if vehicles then
1514: LD_VAR 0 5
1518: IFFALSE 1865
// begin for i := 1 to vehicles do
1520: LD_ADDR_VAR 0 2
1524: PUSH
1525: DOUBLE
1526: LD_INT 1
1528: DEC
1529: ST_TO_ADDR
1530: LD_VAR 0 5
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1685
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1538: LD_ADDR_OWVAR 21
1542: PUSH
1543: LD_VAR 0 5
1547: PUSH
1548: LD_VAR 0 2
1552: ARRAY
1553: PUSH
1554: LD_INT 1
1556: ARRAY
1557: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1558: LD_ADDR_OWVAR 37
1562: PUSH
1563: LD_VAR 0 5
1567: PUSH
1568: LD_VAR 0 2
1572: ARRAY
1573: PUSH
1574: LD_INT 2
1576: ARRAY
1577: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1578: LD_ADDR_OWVAR 39
1582: PUSH
1583: LD_VAR 0 5
1587: PUSH
1588: LD_VAR 0 2
1592: ARRAY
1593: PUSH
1594: LD_INT 3
1596: ARRAY
1597: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1598: LD_ADDR_OWVAR 38
1602: PUSH
1603: LD_VAR 0 5
1607: PUSH
1608: LD_VAR 0 2
1612: ARRAY
1613: PUSH
1614: LD_INT 4
1616: ARRAY
1617: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1618: LD_ADDR_OWVAR 40
1622: PUSH
1623: LD_VAR 0 5
1627: PUSH
1628: LD_VAR 0 2
1632: ARRAY
1633: PUSH
1634: LD_INT 5
1636: ARRAY
1637: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1638: LD_ADDR_OWVAR 41
1642: PUSH
1643: LD_INT 40
1645: ST_TO_ADDR
// veh = CreateVehicle ;
1646: LD_ADDR_VAR 0 4
1650: PUSH
1651: CALL_OW 45
1655: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1656: LD_VAR 0 4
1660: PPUSH
1661: LD_INT 1
1663: PPUSH
1664: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1668: LD_VAR 0 4
1672: PPUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 0
1678: PPUSH
1679: CALL_OW 49
// end ;
1683: GO 1535
1685: POP
1686: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1687: LD_ADDR_VAR 0 6
1691: PUSH
1692: LD_INT 22
1694: PUSH
1695: LD_INT 1
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 21
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 34
1714: PUSH
1715: LD_INT 12
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: PPUSH
1727: CALL_OW 69
1731: ST_TO_ADDR
// if cargoList then
1732: LD_VAR 0 6
1736: IFFALSE 1865
// for i = 1 to cargoList do
1738: LD_ADDR_VAR 0 2
1742: PUSH
1743: DOUBLE
1744: LD_INT 1
1746: DEC
1747: ST_TO_ADDR
1748: LD_VAR 0 6
1752: PUSH
1753: FOR_TO
1754: IFFALSE 1863
// begin if resources then
1756: LD_EXP 25
1760: IFFALSE 1861
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1762: LD_VAR 0 6
1766: PUSH
1767: LD_VAR 0 2
1771: ARRAY
1772: PPUSH
1773: LD_INT 1
1775: PPUSH
1776: LD_EXP 25
1780: PUSH
1781: LD_VAR 0 2
1785: ARRAY
1786: PUSH
1787: LD_INT 1
1789: ARRAY
1790: PPUSH
1791: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1795: LD_VAR 0 6
1799: PUSH
1800: LD_VAR 0 2
1804: ARRAY
1805: PPUSH
1806: LD_INT 2
1808: PPUSH
1809: LD_EXP 25
1813: PUSH
1814: LD_VAR 0 2
1818: ARRAY
1819: PUSH
1820: LD_INT 2
1822: ARRAY
1823: PPUSH
1824: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1828: LD_VAR 0 6
1832: PUSH
1833: LD_VAR 0 2
1837: ARRAY
1838: PPUSH
1839: LD_INT 3
1841: PPUSH
1842: LD_EXP 25
1846: PUSH
1847: LD_VAR 0 2
1851: ARRAY
1852: PUSH
1853: LD_INT 3
1855: ARRAY
1856: PPUSH
1857: CALL_OW 291
// end ; end ;
1861: GO 1753
1863: POP
1864: POP
// end ; end ;
1865: LD_VAR 0 1
1869: RET
// export function PowellSupport ; var i , veh , un ; begin
1870: LD_INT 0
1872: PPUSH
1873: PPUSH
1874: PPUSH
1875: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1876: LD_ADDR_VAR 0 2
1880: PUSH
1881: DOUBLE
1882: LD_INT 1
1884: DEC
1885: ST_TO_ADDR
1886: LD_INT 4
1888: PUSH
1889: LD_INT 3
1891: PUSH
1892: LD_INT 2
1894: PUSH
1895: LD_INT 2
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_OWVAR 67
1908: ARRAY
1909: PUSH
1910: FOR_TO
1911: IFFALSE 2175
// begin uc_nation := 1 ;
1913: LD_ADDR_OWVAR 21
1917: PUSH
1918: LD_INT 1
1920: ST_TO_ADDR
// uc_side := 1 ;
1921: LD_ADDR_OWVAR 20
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// vc_engine := engine_siberite ;
1929: LD_ADDR_OWVAR 39
1933: PUSH
1934: LD_INT 3
1936: ST_TO_ADDR
// vc_control := control_manual ;
1937: LD_ADDR_OWVAR 38
1941: PUSH
1942: LD_INT 1
1944: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1945: LD_ADDR_OWVAR 40
1949: PUSH
1950: LD_INT 9
1952: PUSH
1953: LD_INT 6
1955: PUSH
1956: LD_INT 9
1958: PUSH
1959: LD_INT 5
1961: PUSH
1962: LD_INT 5
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: PUSH
1972: LD_OWVAR 67
1976: PUSH
1977: LD_INT 0
1979: PPUSH
1980: LD_INT 1
1982: PPUSH
1983: CALL_OW 12
1987: PLUS
1988: ARRAY
1989: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1990: LD_OWVAR 40
1994: PUSH
1995: LD_INT 6
1997: EQUAL
1998: IFFALSE 2027
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
2000: LD_ADDR_OWVAR 37
2004: PUSH
2005: LD_INT 5
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: LD_INT 4
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: PUSH
2019: LD_OWVAR 67
2023: ARRAY
2024: ST_TO_ADDR
2025: GO 2062
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
2027: LD_ADDR_OWVAR 37
2031: PUSH
2032: LD_INT 5
2034: PUSH
2035: LD_INT 4
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_INT 1
2052: PPUSH
2053: LD_INT 4
2055: PPUSH
2056: CALL_OW 12
2060: ARRAY
2061: ST_TO_ADDR
// veh = CreateVehicle ;
2062: LD_ADDR_VAR 0 3
2066: PUSH
2067: CALL_OW 45
2071: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2072: LD_VAR 0 3
2076: PPUSH
2077: LD_INT 2
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// SetDir ( veh , 1 ) ;
2087: LD_VAR 0 3
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: CALL_OW 233
// hc_gallery :=  ;
2099: LD_ADDR_OWVAR 33
2103: PUSH
2104: LD_STRING 
2106: ST_TO_ADDR
// hc_name :=  ;
2107: LD_ADDR_OWVAR 26
2111: PUSH
2112: LD_STRING 
2114: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2115: LD_INT 0
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 9
2123: PUSH
2124: LD_INT 8
2126: PUSH
2127: LD_INT 8
2129: PUSH
2130: LD_INT 7
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: PUSH
2139: LD_OWVAR 67
2143: ARRAY
2144: PPUSH
2145: CALL_OW 380
// un := CreateHuman ;
2149: LD_ADDR_VAR 0 4
2153: PUSH
2154: CALL_OW 44
2158: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2159: LD_VAR 0 4
2163: PPUSH
2164: LD_VAR 0 3
2168: PPUSH
2169: CALL_OW 52
// end ;
2173: GO 1910
2175: POP
2176: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: DOUBLE
2183: LD_INT 1
2185: DEC
2186: ST_TO_ADDR
2187: LD_INT 2
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 2
2195: PUSH
2196: LD_INT 1
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_OWVAR 67
2209: ARRAY
2210: PUSH
2211: FOR_TO
2212: IFFALSE 2287
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2214: LD_INT 0
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 9
2222: PUSH
2223: LD_INT 8
2225: PUSH
2226: LD_INT 8
2228: PUSH
2229: LD_INT 7
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_OWVAR 67
2242: ARRAY
2243: PPUSH
2244: CALL_OW 380
// un := CreateHuman ;
2248: LD_ADDR_VAR 0 4
2252: PUSH
2253: CALL_OW 44
2257: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2258: LD_VAR 0 4
2262: PPUSH
2263: LD_INT 1
2265: PPUSH
2266: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2270: LD_VAR 0 4
2274: PPUSH
2275: LD_INT 2
2277: PPUSH
2278: LD_INT 0
2280: PPUSH
2281: CALL_OW 49
// end ;
2285: GO 2211
2287: POP
2288: POP
// end ; end_of_file
2289: LD_VAR 0 1
2293: RET
// export function PrepareBurlak ; begin
2294: LD_INT 0
2296: PPUSH
// uc_side := 7 ;
2297: LD_ADDR_OWVAR 20
2301: PUSH
2302: LD_INT 7
2304: ST_TO_ADDR
// uc_nation := 3 ;
2305: LD_ADDR_OWVAR 21
2309: PUSH
2310: LD_INT 3
2312: ST_TO_ADDR
// vc_engine := engine_siberite ;
2313: LD_ADDR_OWVAR 39
2317: PUSH
2318: LD_INT 3
2320: ST_TO_ADDR
// vc_control := control_manual ;
2321: LD_ADDR_OWVAR 38
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2329: LD_ADDR_OWVAR 40
2333: PUSH
2334: LD_INT 44
2336: PUSH
2337: LD_INT 45
2339: PUSH
2340: LD_INT 46
2342: PUSH
2343: LD_INT 46
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: PUSH
2352: LD_OWVAR 67
2356: ARRAY
2357: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2358: LD_ADDR_OWVAR 37
2362: PUSH
2363: LD_INT 24
2365: ST_TO_ADDR
// Masha := CreateVehicle ;
2366: LD_ADDR_EXP 19
2370: PUSH
2371: CALL_OW 45
2375: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2376: LD_EXP 19
2380: PPUSH
2381: LD_INT 2
2383: PPUSH
2384: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2388: LD_EXP 19
2392: PPUSH
2393: LD_INT 3
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2403: LD_EXP 19
2407: PPUSH
2408: LD_INT 1
2410: PPUSH
2411: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2415: LD_ADDR_EXP 18
2419: PUSH
2420: LD_STRING Burlak
2422: PPUSH
2423: LD_INT 0
2425: PPUSH
2426: LD_STRING 
2428: PPUSH
2429: CALL 31893 0 3
2433: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2434: LD_EXP 18
2438: PPUSH
2439: LD_EXP 19
2443: PPUSH
2444: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2448: LD_EXP 19
2452: PPUSH
2453: LD_INT 107
2455: PPUSH
2456: LD_INT 118
2458: PPUSH
2459: CALL_OW 114
// spawnBurlak := 1 ;
2463: LD_ADDR_EXP 28
2467: PUSH
2468: LD_INT 1
2470: ST_TO_ADDR
// end ;
2471: LD_VAR 0 1
2475: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2476: LD_INT 0
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
// uc_side := 7 ;
2483: LD_ADDR_OWVAR 20
2487: PUSH
2488: LD_INT 7
2490: ST_TO_ADDR
// uc_nation := 3 ;
2491: LD_ADDR_OWVAR 21
2495: PUSH
2496: LD_INT 3
2498: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2499: LD_ADDR_EXP 20
2503: PUSH
2504: LD_STRING Gnyevko
2506: PPUSH
2507: LD_INT 0
2509: PPUSH
2510: LD_STRING 
2512: PPUSH
2513: CALL 31893 0 3
2517: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2518: LD_ADDR_EXP 21
2522: PUSH
2523: LD_STRING Titov
2525: PPUSH
2526: LD_INT 0
2528: PPUSH
2529: LD_STRING 
2531: PPUSH
2532: CALL 31893 0 3
2536: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2537: LD_ADDR_EXP 22
2541: PUSH
2542: LD_STRING Xavier2
2544: PPUSH
2545: LD_INT 0
2547: PPUSH
2548: LD_STRING 
2550: PPUSH
2551: CALL 31893 0 3
2555: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2556: LD_ADDR_EXP 23
2560: PUSH
2561: LD_STRING Belkov
2563: PPUSH
2564: LD_INT 0
2566: PPUSH
2567: LD_STRING 
2569: PPUSH
2570: CALL 31893 0 3
2574: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2575: LD_ADDR_EXP 24
2579: PUSH
2580: LD_STRING Lipshchin
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: LD_STRING 
2588: PPUSH
2589: CALL 31893 0 3
2593: ST_TO_ADDR
// for i = 1 to 5 do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: FOR_TO
2608: IFFALSE 2733
// begin vc_engine := engine_siberite ;
2610: LD_ADDR_OWVAR 39
2614: PUSH
2615: LD_INT 3
2617: ST_TO_ADDR
// vc_control := control_manual ;
2618: LD_ADDR_OWVAR 38
2622: PUSH
2623: LD_INT 1
2625: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2626: LD_ADDR_OWVAR 40
2630: PUSH
2631: LD_INT 43
2633: PUSH
2634: LD_INT 45
2636: PUSH
2637: LD_INT 45
2639: PUSH
2640: LD_INT 44
2642: PUSH
2643: LD_INT 49
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 5
2658: PPUSH
2659: CALL_OW 12
2663: ARRAY
2664: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2665: LD_ADDR_OWVAR 37
2669: PUSH
2670: LD_INT 22
2672: PUSH
2673: LD_INT 22
2675: PUSH
2676: LD_INT 24
2678: PUSH
2679: LD_INT 24
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: LIST
2686: LIST
2687: PUSH
2688: LD_OWVAR 67
2692: ARRAY
2693: ST_TO_ADDR
// veh = CreateVehicle ;
2694: LD_ADDR_VAR 0 3
2698: PUSH
2699: CALL_OW 45
2703: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2704: LD_VAR 0 3
2708: PPUSH
2709: LD_INT 2
2711: PPUSH
2712: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2716: LD_VAR 0 3
2720: PPUSH
2721: LD_INT 3
2723: PPUSH
2724: LD_INT 0
2726: PPUSH
2727: CALL_OW 49
// end ;
2731: GO 2607
2733: POP
2734: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2735: LD_ADDR_VAR 0 4
2739: PUSH
2740: LD_INT 22
2742: PUSH
2743: LD_INT 7
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 21
2752: PUSH
2753: LD_INT 2
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PUSH
2760: LD_INT 58
2762: PUSH
2763: EMPTY
2764: LIST
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: LIST
2770: PPUSH
2771: CALL_OW 69
2775: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2776: LD_EXP 20
2780: PPUSH
2781: LD_VAR 0 4
2785: PUSH
2786: LD_INT 1
2788: ARRAY
2789: PPUSH
2790: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2794: LD_EXP 21
2798: PPUSH
2799: LD_VAR 0 4
2803: PUSH
2804: LD_INT 2
2806: ARRAY
2807: PPUSH
2808: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2812: LD_EXP 22
2816: PPUSH
2817: LD_VAR 0 4
2821: PUSH
2822: LD_INT 3
2824: ARRAY
2825: PPUSH
2826: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2830: LD_EXP 23
2834: PPUSH
2835: LD_VAR 0 4
2839: PUSH
2840: LD_INT 4
2842: ARRAY
2843: PPUSH
2844: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2848: LD_EXP 24
2852: PPUSH
2853: LD_VAR 0 4
2857: PUSH
2858: LD_INT 5
2860: ARRAY
2861: PPUSH
2862: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2866: LD_EXP 20
2870: PPUSH
2871: LD_INT 3
2873: PPUSH
2874: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2878: LD_EXP 21
2882: PUSH
2883: LD_EXP 24
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PPUSH
2892: LD_INT 9
2894: PPUSH
2895: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2899: LD_ADDR_VAR 0 4
2903: PUSH
2904: LD_INT 22
2906: PUSH
2907: LD_INT 7
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PPUSH
2914: CALL_OW 69
2918: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2919: LD_VAR 0 4
2923: PPUSH
2924: LD_INT 107
2926: PPUSH
2927: LD_INT 118
2929: PPUSH
2930: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2934: LD_INT 35
2936: PPUSH
2937: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2941: LD_VAR 0 4
2945: PPUSH
2946: LD_INT 34
2948: PUSH
2949: LD_INT 49
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PPUSH
2956: CALL_OW 72
2960: PPUSH
2961: LD_EXP 19
2965: PPUSH
2966: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2970: LD_VAR 0 4
2974: PPUSH
2975: LD_INT 3
2977: PUSH
2978: LD_INT 34
2980: PUSH
2981: LD_INT 49
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: PPUSH
2992: CALL_OW 72
2996: PPUSH
2997: LD_INT 107
2999: PPUSH
3000: LD_INT 118
3002: PPUSH
3003: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3007: LD_ADDR_VAR 0 5
3011: PUSH
3012: LD_EXP 21
3016: PUSH
3017: LD_EXP 24
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: PPUSH
3026: LD_INT 50
3028: PUSH
3029: EMPTY
3030: LIST
3031: PUSH
3032: LD_INT 3
3034: PUSH
3035: LD_INT 54
3037: PUSH
3038: EMPTY
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 72
3053: ST_TO_ADDR
// if bazooka then
3054: LD_VAR 0 5
3058: IFFALSE 3100
// begin for i in bazooka do
3060: LD_ADDR_VAR 0 2
3064: PUSH
3065: LD_VAR 0 5
3069: PUSH
3070: FOR_IN
3071: IFFALSE 3098
// if See ( 1 , i ) then
3073: LD_INT 1
3075: PPUSH
3076: LD_VAR 0 2
3080: PPUSH
3081: CALL_OW 292
3085: IFFALSE 3096
// ComSpaceTimeShoot ( i ) ;
3087: LD_VAR 0 2
3091: PPUSH
3092: CALL 32840 0 1
3096: GO 3070
3098: POP
3099: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3100: LD_VAR 0 4
3104: PPUSH
3105: LD_INT 34
3107: PUSH
3108: LD_INT 49
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PPUSH
3115: CALL_OW 72
3119: PUSH
3120: LD_INT 0
3122: EQUAL
3123: PUSH
3124: LD_EXP 19
3128: PPUSH
3129: CALL_OW 303
3133: OR
3134: IFFALSE 2934
// repeat wait ( 0 0$1 ) ;
3136: LD_INT 35
3138: PPUSH
3139: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3143: LD_ADDR_VAR 0 4
3147: PUSH
3148: LD_INT 22
3150: PUSH
3151: LD_INT 7
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 69
3162: PUSH
3163: LD_EXP 18
3167: DIFF
3168: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3169: LD_VAR 0 4
3173: PPUSH
3174: LD_INT 107
3176: PPUSH
3177: LD_INT 118
3179: PPUSH
3180: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3184: LD_ADDR_VAR 0 5
3188: PUSH
3189: LD_EXP 21
3193: PUSH
3194: LD_EXP 24
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PPUSH
3203: LD_INT 50
3205: PUSH
3206: EMPTY
3207: LIST
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 54
3214: PUSH
3215: EMPTY
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PPUSH
3226: CALL_OW 72
3230: ST_TO_ADDR
// if bazooka then
3231: LD_VAR 0 5
3235: IFFALSE 3277
// begin for i in bazooka do
3237: LD_ADDR_VAR 0 2
3241: PUSH
3242: LD_VAR 0 5
3246: PUSH
3247: FOR_IN
3248: IFFALSE 3275
// if See ( 1 , i ) then
3250: LD_INT 1
3252: PPUSH
3253: LD_VAR 0 2
3257: PPUSH
3258: CALL_OW 292
3262: IFFALSE 3273
// ComSpaceTimeShoot ( i ) ;
3264: LD_VAR 0 2
3268: PPUSH
3269: CALL 32840 0 1
3273: GO 3247
3275: POP
3276: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3277: LD_EXP 18
3281: PPUSH
3282: CALL_OW 302
3286: PUSH
3287: LD_EXP 18
3291: PPUSH
3292: CALL_OW 310
3296: NOT
3297: AND
3298: IFFALSE 3315
// ComMoveXY ( Burlak , 107 , 118 ) ;
3300: LD_EXP 18
3304: PPUSH
3305: LD_INT 107
3307: PPUSH
3308: LD_INT 118
3310: PPUSH
3311: CALL_OW 111
// until not tmp ;
3315: LD_VAR 0 4
3319: NOT
3320: IFFALSE 3136
// end ;
3322: LD_VAR 0 1
3326: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3327: LD_INT 0
3329: PPUSH
3330: PPUSH
3331: PPUSH
3332: PPUSH
3333: PPUSH
3334: PPUSH
// result := [ ] ;
3335: LD_ADDR_VAR 0 1
3339: PUSH
3340: EMPTY
3341: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3342: LD_ADDR_VAR 0 6
3346: PUSH
3347: LD_INT 1
3349: PPUSH
3350: LD_INT 2
3352: PPUSH
3353: CALL_OW 12
3357: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3358: LD_ADDR_VAR 0 5
3362: PUSH
3363: LD_INT 8
3365: PUSH
3366: LD_INT 9
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PUSH
3373: LD_VAR 0 6
3377: ARRAY
3378: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3379: LD_ADDR_VAR 0 2
3383: PUSH
3384: DOUBLE
3385: LD_INT 1
3387: DEC
3388: ST_TO_ADDR
3389: LD_INT 6
3391: PUSH
3392: LD_INT 8
3394: PUSH
3395: LD_INT 10
3397: PUSH
3398: LD_INT 11
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: PUSH
3407: LD_OWVAR 67
3411: ARRAY
3412: PUSH
3413: FOR_TO
3414: IFFALSE 3652
// begin uc_side := 3 ;
3416: LD_ADDR_OWVAR 20
3420: PUSH
3421: LD_INT 3
3423: ST_TO_ADDR
// uc_nation := 3 ;
3424: LD_ADDR_OWVAR 21
3428: PUSH
3429: LD_INT 3
3431: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3432: LD_INT 24
3434: PPUSH
3435: LD_INT 3
3437: PPUSH
3438: LD_INT 1
3440: PUSH
3441: LD_INT 3
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 1
3450: PPUSH
3451: LD_INT 2
3453: PPUSH
3454: CALL_OW 12
3458: ARRAY
3459: PPUSH
3460: LD_INT 46
3462: PUSH
3463: LD_INT 46
3465: PUSH
3466: LD_INT 45
3468: PUSH
3469: LD_INT 47
3471: PUSH
3472: LD_INT 49
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 1
3484: PPUSH
3485: LD_INT 5
3487: PPUSH
3488: CALL_OW 12
3492: ARRAY
3493: PPUSH
3494: LD_INT 100
3496: PPUSH
3497: CALL 36733 0 5
// veh := CreateVehicle ;
3501: LD_ADDR_VAR 0 4
3505: PUSH
3506: CALL_OW 45
3510: ST_TO_ADDR
// result := Join ( result , veh ) ;
3511: LD_ADDR_VAR 0 1
3515: PUSH
3516: LD_VAR 0 1
3520: PPUSH
3521: LD_VAR 0 4
3525: PPUSH
3526: CALL 69584 0 2
3530: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_INT 3
3538: PUSH
3539: LD_INT 5
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: PUSH
3546: LD_VAR 0 6
3550: ARRAY
3551: PPUSH
3552: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3556: LD_VAR 0 4
3560: PPUSH
3561: LD_VAR 0 5
3565: PPUSH
3566: LD_INT 0
3568: PPUSH
3569: CALL_OW 49
// if vc_control = control_manual then
3573: LD_OWVAR 38
3577: PUSH
3578: LD_INT 1
3580: EQUAL
3581: IFFALSE 3628
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3583: LD_INT 0
3585: PPUSH
3586: LD_INT 7
3588: PUSH
3589: LD_INT 8
3591: PUSH
3592: LD_INT 9
3594: PUSH
3595: LD_INT 10
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: PUSH
3604: LD_OWVAR 67
3608: ARRAY
3609: PPUSH
3610: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3614: CALL_OW 44
3618: PPUSH
3619: LD_VAR 0 4
3623: PPUSH
3624: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3628: LD_INT 18
3630: PPUSH
3631: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3635: LD_VAR 0 4
3639: PPUSH
3640: LD_INT 100
3642: PPUSH
3643: LD_INT 55
3645: PPUSH
3646: CALL_OW 114
// end ;
3650: GO 3413
3652: POP
3653: POP
// for i in result do
3654: LD_ADDR_VAR 0 2
3658: PUSH
3659: LD_VAR 0 1
3663: PUSH
3664: FOR_IN
3665: IFFALSE 3681
// SetTag ( i , 10 ) ;
3667: LD_VAR 0 2
3671: PPUSH
3672: LD_INT 10
3674: PPUSH
3675: CALL_OW 109
3679: GO 3664
3681: POP
3682: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3683: LD_EXP 45
3687: PPUSH
3688: CALL_OW 427
// end ; end_of_file
3692: LD_VAR 0 1
3696: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3697: LD_INT 0
3699: PPUSH
3700: PPUSH
3701: PPUSH
// rnd := 0 ;
3702: LD_ADDR_VAR 0 3
3706: PUSH
3707: LD_INT 0
3709: ST_TO_ADDR
// uc_side := 8 ;
3710: LD_ADDR_OWVAR 20
3714: PUSH
3715: LD_INT 8
3717: ST_TO_ADDR
// uc_nation := 2 ;
3718: LD_ADDR_OWVAR 21
3722: PUSH
3723: LD_INT 2
3725: ST_TO_ADDR
// hc_name :=  ;
3726: LD_ADDR_OWVAR 26
3730: PUSH
3731: LD_STRING 
3733: ST_TO_ADDR
// hc_gallery :=  ;
3734: LD_ADDR_OWVAR 33
3738: PUSH
3739: LD_STRING 
3741: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3742: LD_ADDR_OWVAR 29
3746: PUSH
3747: LD_INT 10
3749: PUSH
3750: LD_INT 11
3752: PUSH
3753: LD_INT 12
3755: PUSH
3756: LD_INT 12
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: PUSH
3765: LD_OWVAR 67
3769: ARRAY
3770: PUSH
3771: LD_INT 10
3773: PUSH
3774: LD_INT 11
3776: PUSH
3777: LD_INT 12
3779: PUSH
3780: LD_INT 12
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3799: LD_INT 0
3801: PPUSH
3802: LD_INT 4
3804: PPUSH
3805: LD_INT 7
3807: PUSH
3808: LD_INT 8
3810: PUSH
3811: LD_INT 9
3813: PUSH
3814: LD_INT 10
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_OWVAR 67
3827: ARRAY
3828: PPUSH
3829: CALL_OW 380
// un := CreateHuman ;
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3843: LD_VAR 0 2
3847: PPUSH
3848: LD_INT 8
3850: PUSH
3851: LD_INT 9
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PUSH
3858: LD_INT 1
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: CALL_OW 12
3868: ARRAY
3869: PPUSH
3870: LD_INT 0
3872: PPUSH
3873: CALL_OW 49
// SetTag ( un , 1 ) ;
3877: LD_VAR 0 2
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3889: LD_ADDR_VAR 0 3
3893: PUSH
3894: LD_INT 1
3896: PPUSH
3897: LD_EXP 32
3901: PPUSH
3902: CALL_OW 12
3906: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3907: LD_EXP 46
3911: PPUSH
3912: LD_VAR 0 2
3916: PPUSH
3917: LD_EXP 32
3921: PUSH
3922: LD_VAR 0 3
3926: ARRAY
3927: PUSH
3928: LD_INT 1
3930: ARRAY
3931: PPUSH
3932: LD_EXP 32
3936: PUSH
3937: LD_VAR 0 3
3941: ARRAY
3942: PUSH
3943: LD_INT 2
3945: ARRAY
3946: PPUSH
3947: LD_INT 0
3949: PPUSH
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 0
3955: PPUSH
3956: CALL_OW 595
// end ;
3960: LD_VAR 0 1
3964: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3965: LD_INT 22
3967: PUSH
3968: LD_INT 8
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: LD_INT 61
3980: PUSH
3981: EMPTY
3982: LIST
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: PUSH
3988: LD_INT 50
3990: PUSH
3991: EMPTY
3992: LIST
3993: PUSH
3994: LD_INT 33
3996: PUSH
3997: LD_INT 2
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PPUSH
4010: CALL_OW 69
4014: IFFALSE 4101
4016: GO 4018
4018: DISABLE
4019: LD_INT 0
4021: PPUSH
// begin enable ;
4022: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
4023: LD_ADDR_VAR 0 1
4027: PUSH
4028: LD_INT 22
4030: PUSH
4031: LD_INT 8
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: LD_INT 61
4043: PUSH
4044: EMPTY
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 50
4053: PUSH
4054: EMPTY
4055: LIST
4056: PUSH
4057: LD_INT 33
4059: PUSH
4060: LD_INT 2
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 69
4077: PUSH
4078: FOR_IN
4079: IFFALSE 4099
// begin wait ( 0 0$0.3 ) ;
4081: LD_INT 10
4083: PPUSH
4084: CALL_OW 67
// Connect ( i ) ;
4088: LD_VAR 0 1
4092: PPUSH
4093: CALL 40201 0 1
// end ;
4097: GO 4078
4099: POP
4100: POP
// end ;
4101: PPOPN 1
4103: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4104: LD_INT 0
4106: PPUSH
4107: PPUSH
4108: PPUSH
4109: PPUSH
4110: PPUSH
4111: PPUSH
4112: PPUSH
4113: PPUSH
4114: PPUSH
// result := [ ] ;
4115: LD_ADDR_VAR 0 1
4119: PUSH
4120: EMPTY
4121: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4122: LD_ADDR_EXP 34
4126: PUSH
4127: LD_EXP 34
4131: PUSH
4132: LD_INT 1
4134: PLUS
4135: ST_TO_ADDR
// xy := [ ctArea1 , ctArea2 , ctArea3 , ctArea4 ] ;
4136: LD_ADDR_VAR 0 4
4140: PUSH
4141: LD_INT 19
4143: PUSH
4144: LD_INT 20
4146: PUSH
4147: LD_INT 21
4149: PUSH
4150: LD_INT 22
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4159: LD_INT 22
4161: PUSH
4162: LD_INT 8
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: PUSH
4169: LD_INT 3
4171: PUSH
4172: LD_INT 58
4174: PUSH
4175: EMPTY
4176: LIST
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PUSH
4182: LD_INT 34
4184: PUSH
4185: LD_INT 31
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: LIST
4196: PPUSH
4197: CALL_OW 69
4201: PUSH
4202: LD_INT 2
4204: LESS
4205: IFFALSE 4510
// begin uc_side := 8 ;
4207: LD_ADDR_OWVAR 20
4211: PUSH
4212: LD_INT 8
4214: ST_TO_ADDR
// uc_nation := 2 ;
4215: LD_ADDR_OWVAR 21
4219: PUSH
4220: LD_INT 2
4222: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4223: LD_INT 14
4225: PPUSH
4226: LD_INT 3
4228: PPUSH
4229: LD_INT 1
4231: PPUSH
4232: LD_INT 31
4234: PPUSH
4235: LD_INT 100
4237: PPUSH
4238: CALL 36733 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4242: LD_ADDR_VAR 0 2
4246: PUSH
4247: DOUBLE
4248: LD_INT 22
4250: PUSH
4251: LD_INT 8
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: PUSH
4258: LD_INT 3
4260: PUSH
4261: LD_INT 58
4263: PUSH
4264: EMPTY
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 34
4273: PUSH
4274: LD_INT 31
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: PPUSH
4286: CALL_OW 69
4290: PUSH
4291: LD_INT 1
4293: PLUS
4294: DEC
4295: ST_TO_ADDR
4296: LD_INT 2
4298: PUSH
4299: FOR_TO
4300: IFFALSE 4508
// begin veh := CreateVehicle ;
4302: LD_ADDR_VAR 0 3
4306: PUSH
4307: CALL_OW 45
4311: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
4312: LD_VAR 0 3
4316: PPUSH
4317: LD_INT 0
4319: PPUSH
4320: LD_INT 5
4322: PPUSH
4323: CALL_OW 12
4327: PPUSH
4328: CALL_OW 233
// xy := Delete ( xy , rand ( 1 , Count ( xy ) ) ) ;
4332: LD_ADDR_VAR 0 4
4336: PUSH
4337: LD_VAR 0 4
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_VAR 0 4
4349: PPUSH
4350: CALL 33995 0 1
4354: PPUSH
4355: CALL_OW 12
4359: PPUSH
4360: CALL_OW 3
4364: ST_TO_ADDR
// area := xy [ rand ( 1 , Count ( xy ) ) ] ;
4365: LD_ADDR_VAR 0 6
4369: PUSH
4370: LD_VAR 0 4
4374: PUSH
4375: LD_INT 1
4377: PPUSH
4378: LD_VAR 0 4
4382: PPUSH
4383: CALL 33995 0 1
4387: PPUSH
4388: CALL_OW 12
4392: ARRAY
4393: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_ok ] ) then
4394: LD_VAR 0 6
4398: PPUSH
4399: LD_INT 50
4401: PUSH
4402: EMPTY
4403: LIST
4404: PPUSH
4405: CALL_OW 70
4409: IFFALSE 4419
// area := ctAreaExtra ;
4411: LD_ADDR_VAR 0 6
4415: PUSH
4416: LD_INT 23
4418: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4419: LD_VAR 0 3
4423: PPUSH
4424: LD_VAR 0 6
4428: PPUSH
4429: LD_INT 0
4431: PPUSH
4432: CALL_OW 49
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 7
4441: PUSH
4442: LD_INT 9
4444: PUSH
4445: LD_INT 10
4447: PUSH
4448: LD_INT 10
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PPUSH
4463: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4467: CALL_OW 44
4471: PPUSH
4472: LD_VAR 0 3
4476: PPUSH
4477: CALL_OW 52
// if area = ctAreaExtra then
4481: LD_VAR 0 6
4485: PUSH
4486: LD_INT 23
4488: EQUAL
4489: IFFALSE 4506
// ComMoveXY ( veh , 73 , 21 ) ;
4491: LD_VAR 0 3
4495: PPUSH
4496: LD_INT 73
4498: PPUSH
4499: LD_INT 21
4501: PPUSH
4502: CALL_OW 111
// end ;
4506: GO 4299
4508: POP
4509: POP
// end ; dir := rand ( 1 , 2 ) ;
4510: LD_ADDR_VAR 0 9
4514: PUSH
4515: LD_INT 1
4517: PPUSH
4518: LD_INT 2
4520: PPUSH
4521: CALL_OW 12
4525: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4526: LD_ADDR_VAR 0 6
4530: PUSH
4531: LD_INT 8
4533: PUSH
4534: LD_INT 9
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: PUSH
4541: LD_VAR 0 9
4545: ARRAY
4546: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4547: LD_ADDR_VAR 0 7
4551: PUSH
4552: LD_INT 6
4554: PUSH
4555: LD_INT 8
4557: PUSH
4558: LD_INT 10
4560: PUSH
4561: LD_INT 11
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: PUSH
4570: LD_OWVAR 67
4574: ARRAY
4575: PUSH
4576: LD_EXP 34
4580: PLUS
4581: ST_TO_ADDR
// if counter > 20 then
4582: LD_VAR 0 7
4586: PUSH
4587: LD_INT 20
4589: GREATER
4590: IFFALSE 4600
// counter := 20 ;
4592: LD_ADDR_VAR 0 7
4596: PUSH
4597: LD_INT 20
4599: ST_TO_ADDR
// for i := 1 to counter do
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: DOUBLE
4606: LD_INT 1
4608: DEC
4609: ST_TO_ADDR
4610: LD_VAR 0 7
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4949
// begin uc_side := 8 ;
4618: LD_ADDR_OWVAR 20
4622: PUSH
4623: LD_INT 8
4625: ST_TO_ADDR
// uc_nation := 2 ;
4626: LD_ADDR_OWVAR 21
4630: PUSH
4631: LD_INT 2
4633: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4634: LD_INT 13
4636: PUSH
4637: LD_INT 14
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: PUSH
4644: LD_INT 1
4646: PPUSH
4647: LD_INT 2
4649: PPUSH
4650: CALL_OW 12
4654: ARRAY
4655: PPUSH
4656: LD_INT 3
4658: PPUSH
4659: LD_INT 1
4661: PUSH
4662: LD_INT 2
4664: PUSH
4665: LD_INT 5
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: LIST
4672: PUSH
4673: LD_INT 1
4675: PPUSH
4676: LD_INT 3
4678: PPUSH
4679: CALL_OW 12
4683: ARRAY
4684: PPUSH
4685: LD_INT 27
4687: PUSH
4688: LD_INT 28
4690: PUSH
4691: LD_INT 27
4693: PUSH
4694: LD_INT 92
4696: PUSH
4697: LD_INT 29
4699: PUSH
4700: LD_INT 25
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: PUSH
4711: LD_INT 1
4713: PPUSH
4714: LD_INT 6
4716: PPUSH
4717: CALL_OW 12
4721: ARRAY
4722: PPUSH
4723: LD_INT 100
4725: PPUSH
4726: CALL 36733 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4730: LD_OWVAR 40
4734: PUSH
4735: LD_INT 29
4737: EQUAL
4738: IFFALSE 4748
// vc_control := control_remote ;
4740: LD_ADDR_OWVAR 38
4744: PUSH
4745: LD_INT 2
4747: ST_TO_ADDR
// veh := CreateVehicle ;
4748: LD_ADDR_VAR 0 3
4752: PUSH
4753: CALL_OW 45
4757: ST_TO_ADDR
// result := Join ( result , veh ) ;
4758: LD_ADDR_VAR 0 1
4762: PUSH
4763: LD_VAR 0 1
4767: PPUSH
4768: LD_VAR 0 3
4772: PPUSH
4773: CALL 69584 0 2
4777: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4778: LD_VAR 0 3
4782: PPUSH
4783: LD_INT 3
4785: PUSH
4786: LD_INT 5
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_VAR 0 9
4797: ARRAY
4798: PPUSH
4799: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4803: LD_VAR 0 3
4807: PPUSH
4808: LD_VAR 0 6
4812: PPUSH
4813: LD_INT 0
4815: PPUSH
4816: CALL_OW 49
// if vc_control = control_manual then
4820: LD_OWVAR 38
4824: PUSH
4825: LD_INT 1
4827: EQUAL
4828: IFFALSE 4875
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4830: LD_INT 0
4832: PPUSH
4833: LD_INT 7
4835: PUSH
4836: LD_INT 8
4838: PUSH
4839: LD_INT 9
4841: PUSH
4842: LD_INT 10
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: PUSH
4851: LD_OWVAR 67
4855: ARRAY
4856: PPUSH
4857: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4861: CALL_OW 44
4865: PPUSH
4866: LD_VAR 0 3
4870: PPUSH
4871: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4875: LD_INT 10
4877: PPUSH
4878: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4882: LD_VAR 0 3
4886: PPUSH
4887: CALL_OW 263
4891: PUSH
4892: LD_INT 2
4894: EQUAL
4895: PUSH
4896: LD_VAR 0 3
4900: PPUSH
4901: CALL_OW 312
4905: NOT
4906: AND
4907: IFFALSE 4925
// begin Connect ( veh ) ;
4909: LD_VAR 0 3
4913: PPUSH
4914: CALL 40201 0 1
// wait ( 0 0$0.3 ) ;
4918: LD_INT 10
4920: PPUSH
4921: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4925: LD_VAR 0 3
4929: PPUSH
4930: LD_INT 100
4932: PPUSH
4933: LD_INT 55
4935: PPUSH
4936: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4940: LD_INT 18
4942: PPUSH
4943: CALL_OW 67
// end ;
4947: GO 4615
4949: POP
4950: POP
// if arabianAttacksCounter = 1 then
4951: LD_EXP 34
4955: PUSH
4956: LD_INT 1
4958: EQUAL
4959: IFFALSE 4965
// DestroySibDeposit ;
4961: CALL 3697 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4965: LD_EXP 34
4969: PUSH
4970: LD_INT 4
4972: PUSH
4973: LD_INT 3
4975: PUSH
4976: LD_INT 3
4978: PUSH
4979: LD_INT 2
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: PUSH
4988: LD_OWVAR 67
4992: ARRAY
4993: MOD
4994: PUSH
4995: LD_INT 0
4997: EQUAL
4998: IFFALSE 5356
// begin tmp := rand ( 0 , 2 ) ;
5000: LD_ADDR_VAR 0 8
5004: PUSH
5005: LD_INT 0
5007: PPUSH
5008: LD_INT 2
5010: PPUSH
5011: CALL_OW 12
5015: ST_TO_ADDR
// if not tmp then
5016: LD_VAR 0 8
5020: NOT
5021: IFFALSE 5182
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
5023: LD_ADDR_VAR 0 2
5027: PUSH
5028: DOUBLE
5029: LD_INT 1
5031: DEC
5032: ST_TO_ADDR
5033: LD_INT 3
5035: PUSH
5036: LD_INT 4
5038: PUSH
5039: LD_INT 4
5041: PUSH
5042: LD_INT 5
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: PUSH
5051: LD_OWVAR 67
5055: ARRAY
5056: PUSH
5057: FOR_TO
5058: IFFALSE 5178
// begin uc_side := 8 ;
5060: LD_ADDR_OWVAR 20
5064: PUSH
5065: LD_INT 8
5067: ST_TO_ADDR
// uc_nation := 2 ;
5068: LD_ADDR_OWVAR 21
5072: PUSH
5073: LD_INT 2
5075: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5076: LD_INT 0
5078: PPUSH
5079: LD_INT 1
5081: PPUSH
5082: LD_INT 7
5084: PUSH
5085: LD_INT 8
5087: PUSH
5088: LD_INT 9
5090: PUSH
5091: LD_INT 10
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: PUSH
5100: LD_OWVAR 67
5104: ARRAY
5105: PPUSH
5106: CALL_OW 380
// un := CreateHuman ;
5110: LD_ADDR_VAR 0 5
5114: PUSH
5115: CALL_OW 44
5119: ST_TO_ADDR
// result := Join ( result , un ) ;
5120: LD_ADDR_VAR 0 1
5124: PUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: LD_VAR 0 5
5134: PPUSH
5135: CALL 69584 0 2
5139: ST_TO_ADDR
// if Prob ( 60 ) then
5140: LD_INT 60
5142: PPUSH
5143: CALL_OW 13
5147: IFFALSE 5161
// SetClass ( un , class_mortar ) ;
5149: LD_VAR 0 5
5153: PPUSH
5154: LD_INT 8
5156: PPUSH
5157: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5161: LD_VAR 0 5
5165: PPUSH
5166: LD_INT 16
5168: PPUSH
5169: LD_INT 0
5171: PPUSH
5172: CALL_OW 49
// end ;
5176: GO 5057
5178: POP
5179: POP
// end else
5180: GO 5346
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: DOUBLE
5188: LD_INT 1
5190: DEC
5191: ST_TO_ADDR
5192: LD_INT 2
5194: PUSH
5195: LD_INT 3
5197: PUSH
5198: LD_INT 3
5200: PUSH
5201: LD_INT 4
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: PUSH
5210: LD_OWVAR 67
5214: ARRAY
5215: PUSH
5216: FOR_TO
5217: IFFALSE 5344
// begin uc_side := 8 ;
5219: LD_ADDR_OWVAR 20
5223: PUSH
5224: LD_INT 8
5226: ST_TO_ADDR
// uc_nation := 0 ;
5227: LD_ADDR_OWVAR 21
5231: PUSH
5232: LD_INT 0
5234: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5235: LD_ADDR_OWVAR 28
5239: PUSH
5240: LD_INT 17
5242: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5243: LD_ADDR_OWVAR 31
5247: PUSH
5248: LD_INT 3
5250: PUSH
5251: LD_INT 0
5253: PUSH
5254: LD_INT 0
5256: PUSH
5257: LD_INT 0
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5266: LD_ADDR_OWVAR 29
5270: PUSH
5271: LD_INT 10
5273: PUSH
5274: LD_INT 10
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: ST_TO_ADDR
// hc_gallery :=  ;
5281: LD_ADDR_OWVAR 33
5285: PUSH
5286: LD_STRING 
5288: ST_TO_ADDR
// hc_name :=  ;
5289: LD_ADDR_OWVAR 26
5293: PUSH
5294: LD_STRING 
5296: ST_TO_ADDR
// un := CreateHuman ;
5297: LD_ADDR_VAR 0 5
5301: PUSH
5302: CALL_OW 44
5306: ST_TO_ADDR
// result := Join ( result , un ) ;
5307: LD_ADDR_VAR 0 1
5311: PUSH
5312: LD_VAR 0 1
5316: PPUSH
5317: LD_VAR 0 5
5321: PPUSH
5322: CALL 69584 0 2
5326: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5327: LD_VAR 0 5
5331: PPUSH
5332: LD_INT 16
5334: PPUSH
5335: LD_INT 0
5337: PPUSH
5338: CALL_OW 49
// end ;
5342: GO 5216
5344: POP
5345: POP
// end ; if sibDeposits then
5346: LD_EXP 32
5350: IFFALSE 5356
// DestroySibDeposit ;
5352: CALL 3697 0 0
// end ; for i in result do
5356: LD_ADDR_VAR 0 2
5360: PUSH
5361: LD_VAR 0 1
5365: PUSH
5366: FOR_IN
5367: IFFALSE 5383
// SetTag ( i , 10 ) ;
5369: LD_VAR 0 2
5373: PPUSH
5374: LD_INT 10
5376: PPUSH
5377: CALL_OW 109
5381: GO 5366
5383: POP
5384: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5385: LD_EXP 44
5389: PPUSH
5390: CALL_OW 427
// end ; end_of_file
5394: LD_VAR 0 1
5398: RET
// export function Action ; var tmp ; begin
5399: LD_INT 0
5401: PPUSH
5402: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5403: LD_ADDR_VAR 0 2
5407: PUSH
5408: LD_INT 22
5410: PUSH
5411: LD_INT 1
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: PUSH
5418: LD_INT 21
5420: PUSH
5421: LD_INT 2
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 69
5436: ST_TO_ADDR
// InGameOn ;
5437: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5441: LD_VAR 0 2
5445: PPUSH
5446: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5450: LD_INT 22
5452: PUSH
5453: LD_INT 1
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: PUSH
5460: LD_INT 21
5462: PUSH
5463: LD_INT 2
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PPUSH
5474: CALL_OW 69
5478: PPUSH
5479: LD_INT 69
5481: PPUSH
5482: LD_INT 94
5484: PPUSH
5485: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5489: LD_EXP 1
5493: PPUSH
5494: LD_STRING D2-JMM-1
5496: PPUSH
5497: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5501: LD_VAR 0 2
5505: PPUSH
5506: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5510: LD_EXP 2
5514: PPUSH
5515: LD_STRING D2-Huck-1
5517: PPUSH
5518: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5522: LD_VAR 0 2
5526: PPUSH
5527: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5531: LD_EXP 1
5535: PPUSH
5536: LD_STRING D2-JMM-2
5538: PPUSH
5539: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5543: LD_VAR 0 2
5547: PPUSH
5548: CALL_OW 87
// InGameOff ;
5552: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5556: LD_STRING M1
5558: PPUSH
5559: CALL_OW 337
// SaveForQuickRestart ;
5563: CALL_OW 22
// wait ( 10 10$00 ) ;
5567: LD_INT 21000
5569: PPUSH
5570: CALL_OW 67
// DialogueOn ;
5574: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5578: LD_EXP 16
5582: PPUSH
5583: LD_STRING D3-Pow-1
5585: PPUSH
5586: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5590: LD_EXP 1
5594: PPUSH
5595: LD_STRING D3-JMM-1
5597: PPUSH
5598: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5602: LD_EXP 16
5606: PPUSH
5607: LD_STRING D3-Pow-2
5609: PPUSH
5610: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5614: LD_EXP 1
5618: PPUSH
5619: LD_STRING D3-JMM-2
5621: PPUSH
5622: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5626: LD_EXP 16
5630: PPUSH
5631: LD_STRING D3-Pow-3
5633: PPUSH
5634: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5638: LD_EXP 1
5642: PPUSH
5643: LD_STRING D3-JMM-3
5645: PPUSH
5646: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5650: LD_EXP 16
5654: PPUSH
5655: LD_STRING D3-Pow-4
5657: PPUSH
5658: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5662: LD_EXP 1
5666: PPUSH
5667: LD_STRING D3-JMM-4
5669: PPUSH
5670: CALL_OW 88
// DialogueOff ;
5674: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5678: LD_STRING M2
5680: PPUSH
5681: CALL_OW 337
// wait ( 2 2$30 ) ;
5685: LD_INT 5250
5687: PPUSH
5688: CALL_OW 67
// PrepareBurlak ;
5692: CALL 2294 0 0
// BurlakArmy ;
5696: CALL 2476 0 0
// end ;
5700: LD_VAR 0 1
5704: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5705: LD_INT 1
5707: PPUSH
5708: LD_EXP 19
5712: PPUSH
5713: CALL_OW 292
5717: IFFALSE 5876
5719: GO 5721
5721: DISABLE
// begin DialogueOn ;
5722: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5726: LD_EXP 19
5730: PPUSH
5731: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5735: LD_INT 22
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: LD_INT 26
5747: PUSH
5748: LD_INT 1
5750: PUSH
5751: EMPTY
5752: LIST
5753: LIST
5754: PUSH
5755: LD_INT 2
5757: PUSH
5758: LD_INT 25
5760: PUSH
5761: LD_INT 1
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PUSH
5768: LD_INT 25
5770: PUSH
5771: LD_INT 2
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: LD_INT 25
5780: PUSH
5781: LD_INT 3
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PUSH
5788: LD_INT 25
5790: PUSH
5791: LD_INT 4
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 25
5800: PUSH
5801: LD_INT 5
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: LIST
5820: PPUSH
5821: CALL_OW 69
5825: PPUSH
5826: LD_STRING D5-Sol1-1
5828: PPUSH
5829: LD_STRING D5-FSol1-1
5831: PPUSH
5832: CALL 8338 0 3
// Say ( JMM , D5-JMM-1 ) ;
5836: LD_EXP 1
5840: PPUSH
5841: LD_STRING D5-JMM-1
5843: PPUSH
5844: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5848: LD_EXP 18
5852: PPUSH
5853: LD_STRING DAmer-Bur-1
5855: PPUSH
5856: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5860: LD_EXP 1
5864: PPUSH
5865: LD_STRING DAmer-JMM-1
5867: PPUSH
5868: CALL_OW 88
// DialogueOff ;
5872: CALL_OW 7
// end ;
5876: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5877: LD_INT 4
5879: PPUSH
5880: LD_INT 22
5882: PUSH
5883: LD_INT 7
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PPUSH
5890: CALL_OW 70
5894: IFFALSE 6293
5896: GO 5898
5898: DISABLE
5899: LD_INT 0
5901: PPUSH
// begin enable ;
5902: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5903: LD_ADDR_VAR 0 1
5907: PUSH
5908: LD_INT 4
5910: PPUSH
5911: LD_INT 22
5913: PUSH
5914: LD_INT 7
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: PPUSH
5921: CALL_OW 70
5925: PUSH
5926: FOR_IN
5927: IFFALSE 6291
// begin if i = Burlak or i = Masha then
5929: LD_VAR 0 1
5933: PUSH
5934: LD_EXP 18
5938: EQUAL
5939: PUSH
5940: LD_VAR 0 1
5944: PUSH
5945: LD_EXP 19
5949: EQUAL
5950: OR
5951: IFFALSE 6098
// begin RemoveUnit ( i ) ;
5953: LD_VAR 0 1
5957: PPUSH
5958: CALL_OW 64
// DialogueOn ;
5962: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5966: LD_EXP 1
5970: PPUSH
5971: LD_STRING D5a-JMM-1
5973: PPUSH
5974: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5978: LD_INT 22
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 26
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 2
6000: PUSH
6001: LD_INT 25
6003: PUSH
6004: LD_INT 1
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 25
6013: PUSH
6014: LD_INT 2
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PUSH
6021: LD_INT 25
6023: PUSH
6024: LD_INT 3
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: LD_INT 25
6033: PUSH
6034: LD_INT 4
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: LD_INT 25
6043: PUSH
6044: LD_INT 5
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: PPUSH
6064: CALL_OW 69
6068: PPUSH
6069: LD_STRING D5a-Sol1-1
6071: PPUSH
6072: LD_STRING D5-FSol1-1
6074: PPUSH
6075: CALL 8338 0 3
// DialogueOff ;
6079: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
6083: LD_STRING M2b
6085: PPUSH
6086: CALL_OW 337
// spawnBurlak = 0 ;
6090: LD_ADDR_EXP 28
6094: PUSH
6095: LD_INT 0
6097: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 247
6107: PUSH
6108: LD_INT 2
6110: EQUAL
6111: PUSH
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 263
6121: PUSH
6122: LD_INT 1
6124: EQUAL
6125: AND
6126: IFFALSE 6254
// begin case IsDrivenBy ( i ) of Gnyevko :
6128: LD_VAR 0 1
6132: PPUSH
6133: CALL_OW 311
6137: PUSH
6138: LD_EXP 20
6142: DOUBLE
6143: EQUAL
6144: IFTRUE 6148
6146: GO 6161
6148: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6149: LD_INT 1
6151: PPUSH
6152: LD_STRING 13_Gnyevko_1
6154: PPUSH
6155: CALL_OW 39
6159: GO 6254
6161: LD_EXP 21
6165: DOUBLE
6166: EQUAL
6167: IFTRUE 6171
6169: GO 6184
6171: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6172: LD_INT 1
6174: PPUSH
6175: LD_STRING 13_Titov_1
6177: PPUSH
6178: CALL_OW 39
6182: GO 6254
6184: LD_EXP 22
6188: DOUBLE
6189: EQUAL
6190: IFTRUE 6194
6192: GO 6207
6194: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6195: LD_INT 1
6197: PPUSH
6198: LD_STRING 13_Xavier_1
6200: PPUSH
6201: CALL_OW 39
6205: GO 6254
6207: LD_EXP 23
6211: DOUBLE
6212: EQUAL
6213: IFTRUE 6217
6215: GO 6230
6217: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6218: LD_INT 1
6220: PPUSH
6221: LD_STRING 13_Belkov_1
6223: PPUSH
6224: CALL_OW 39
6228: GO 6254
6230: LD_EXP 24
6234: DOUBLE
6235: EQUAL
6236: IFTRUE 6240
6238: GO 6253
6240: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6241: LD_INT 1
6243: PPUSH
6244: LD_STRING 13_Lipshchin_1
6246: PPUSH
6247: CALL_OW 39
6251: GO 6254
6253: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6254: LD_VAR 0 1
6258: PPUSH
6259: CALL_OW 264
6263: PUSH
6264: LD_INT 49
6266: EQUAL
6267: IFFALSE 6280
// DestroyUnit ( i ) else
6269: LD_VAR 0 1
6273: PPUSH
6274: CALL_OW 65
6278: GO 6289
// RemoveUnit ( i ) ;
6280: LD_VAR 0 1
6284: PPUSH
6285: CALL_OW 64
// end ;
6289: GO 5926
6291: POP
6292: POP
// end ;
6293: PPOPN 1
6295: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6296: LD_EXP 18
6300: PPUSH
6301: CALL_OW 302
6305: PUSH
6306: LD_EXP 19
6310: PPUSH
6311: CALL_OW 256
6315: PUSH
6316: LD_INT 500
6318: LESS
6319: AND
6320: PUSH
6321: LD_EXP 19
6325: PPUSH
6326: CALL_OW 255
6330: PUSH
6331: LD_INT 7
6333: EQUAL
6334: AND
6335: IFFALSE 6355
6337: GO 6339
6339: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6340: LD_EXP 18
6344: PPUSH
6345: LD_INT 107
6347: PPUSH
6348: LD_INT 118
6350: PPUSH
6351: CALL_OW 111
6355: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6356: LD_EXP 18
6360: PPUSH
6361: CALL_OW 301
6365: PUSH
6366: LD_EXP 28
6370: PUSH
6371: LD_INT 1
6373: EQUAL
6374: AND
6375: IFFALSE 6508
6377: GO 6379
6379: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6380: LD_EXP 1
6384: PPUSH
6385: LD_STRING D5b-JMM-1
6387: PPUSH
6388: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6392: LD_INT 22
6394: PUSH
6395: LD_INT 1
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 26
6404: PUSH
6405: LD_INT 1
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 2
6414: PUSH
6415: LD_INT 25
6417: PUSH
6418: LD_INT 1
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 25
6427: PUSH
6428: LD_INT 2
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PUSH
6435: LD_INT 25
6437: PUSH
6438: LD_INT 3
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: LD_INT 25
6447: PUSH
6448: LD_INT 4
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 25
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: PPUSH
6478: CALL_OW 69
6482: PPUSH
6483: LD_STRING D5b-Sol1-1
6485: PPUSH
6486: LD_STRING 
6488: PPUSH
6489: CALL 8338 0 3
// ChangeMissionObjectives ( M2a ) ;
6493: LD_STRING M2a
6495: PPUSH
6496: CALL_OW 337
// burlakStatus := 1 ;
6500: LD_ADDR_EXP 29
6504: PUSH
6505: LD_INT 1
6507: ST_TO_ADDR
// end ;
6508: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6509: LD_EXP 2
6513: PPUSH
6514: CALL_OW 301
6518: IFFALSE 6655
6520: GO 6522
6522: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6523: LD_EXP 1
6527: PPUSH
6528: LD_STRING D6-JMM-1
6530: PPUSH
6531: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6535: LD_INT 22
6537: PUSH
6538: LD_INT 1
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 26
6547: PUSH
6548: LD_INT 1
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: LD_INT 2
6557: PUSH
6558: LD_INT 25
6560: PUSH
6561: LD_INT 1
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 25
6570: PUSH
6571: LD_INT 2
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 25
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 25
6590: PUSH
6591: LD_INT 4
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 25
6600: PUSH
6601: LD_INT 5
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PPUSH
6626: LD_STRING D6-Sol1-1
6628: PPUSH
6629: LD_STRING 
6631: PPUSH
6632: CALL 8338 0 3
// Say ( JMM , D6-JMM-2 ) ;
6636: LD_EXP 1
6640: PPUSH
6641: LD_STRING D6-JMM-2
6643: PPUSH
6644: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6648: LD_STRING M1a
6650: PPUSH
6651: CALL_OW 337
// end ;
6655: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6656: LD_INT 25
6658: PPUSH
6659: LD_INT 1
6661: PPUSH
6662: CALL_OW 321
6666: PUSH
6667: LD_INT 2
6669: EQUAL
6670: IFFALSE 6687
6672: GO 6674
6674: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6675: LD_EXP 2
6679: PPUSH
6680: LD_STRING D6-Huck-2
6682: PPUSH
6683: CALL_OW 88
6687: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6688: LD_INT 22
6690: PUSH
6691: LD_INT 1
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: LD_INT 2
6700: PUSH
6701: LD_INT 34
6703: PUSH
6704: LD_INT 8
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: PUSH
6711: LD_INT 35
6713: PUSH
6714: LD_INT 8
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PPUSH
6730: CALL_OW 69
6734: PUSH
6735: LD_INT 5
6737: PPUSH
6738: LD_INT 22
6740: PUSH
6741: LD_INT 1
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PUSH
6748: LD_INT 21
6750: PUSH
6751: LD_INT 3
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 30
6760: PUSH
6761: LD_INT 1
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: LD_INT 57
6773: PUSH
6774: EMPTY
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: PPUSH
6787: CALL_OW 70
6791: AND
6792: PUSH
6793: LD_INT 5
6795: PPUSH
6796: LD_INT 22
6798: PUSH
6799: LD_INT 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 21
6808: PUSH
6809: LD_INT 3
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: LD_INT 30
6818: PUSH
6819: LD_INT 5
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 3
6828: PUSH
6829: LD_INT 57
6831: PUSH
6832: EMPTY
6833: LIST
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 70
6849: AND
6850: IFFALSE 6892
6852: GO 6854
6854: DISABLE
// begin DialogueOn ;
6855: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6859: LD_EXP 1
6863: PPUSH
6864: LD_STRING D7-JMM-1
6866: PPUSH
6867: CALL_OW 88
// DialogueOff ;
6871: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6875: LD_STRING M4
6877: PPUSH
6878: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6882: LD_INT 5
6884: PPUSH
6885: LD_INT 0
6887: PPUSH
6888: CALL_OW 424
// end ;
6892: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6893: LD_INT 6
6895: PPUSH
6896: LD_INT 22
6898: PUSH
6899: LD_INT 1
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 25
6908: PUSH
6909: LD_INT 4
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PPUSH
6920: CALL_OW 70
6924: PUSH
6925: LD_EXP 38
6929: PUSH
6930: LD_INT 1
6932: EQUAL
6933: AND
6934: PUSH
6935: LD_EXP 30
6939: PUSH
6940: LD_INT 0
6942: EQUAL
6943: AND
6944: IFFALSE 7009
6946: GO 6948
6948: DISABLE
// begin enable ;
6949: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6950: LD_ADDR_EXP 27
6954: PUSH
6955: LD_INT 6
6957: PPUSH
6958: LD_INT 22
6960: PUSH
6961: LD_INT 1
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: LD_INT 25
6970: PUSH
6971: LD_INT 4
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PPUSH
6982: CALL_OW 70
6986: PUSH
6987: LD_INT 1
6989: ARRAY
6990: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6991: LD_INT 6
6993: PPUSH
6994: LD_INT 0
6996: PPUSH
6997: CALL_OW 424
// radationResearched := 1 ;
7001: LD_ADDR_EXP 30
7005: PUSH
7006: LD_INT 1
7008: ST_TO_ADDR
// end ;
7009: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
7010: LD_EXP 27
7014: PPUSH
7015: CALL_OW 301
7019: PUSH
7020: LD_EXP 30
7024: PUSH
7025: LD_INT 1
7027: EQUAL
7028: AND
7029: IFFALSE 7065
7031: GO 7033
7033: DISABLE
// begin enable ;
7034: ENABLE
// radationResearched = 0 ;
7035: LD_ADDR_EXP 30
7039: PUSH
7040: LD_INT 0
7042: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7043: LD_INT 6
7045: PPUSH
7046: LD_INT 1
7048: PPUSH
7049: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
7053: LD_EXP 1
7057: PPUSH
7058: LD_STRING D9a-JMM-1
7060: PPUSH
7061: CALL_OW 88
// end ; end_of_file
7065: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
7066: LD_VAR 0 5
7070: PUSH
7071: LD_INT 8
7073: EQUAL
7074: PUSH
7075: LD_EXP 36
7079: PUSH
7080: LD_INT 0
7082: EQUAL
7083: AND
7084: IFFALSE 7137
// begin eventVar1 := 1 ;
7086: LD_ADDR_EXP 36
7090: PUSH
7091: LD_INT 1
7093: ST_TO_ADDR
// DialogueOn ;
7094: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
7098: LD_EXP 1
7102: PPUSH
7103: LD_STRING D6a-JMM-1
7105: PPUSH
7106: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
7110: LD_EXP 16
7114: PPUSH
7115: LD_STRING D6a-Pow-1
7117: PPUSH
7118: CALL_OW 94
// DialogueOff ;
7122: CALL_OW 7
// wait ( 3 3$0 ) ;
7126: LD_INT 6300
7128: PPUSH
7129: CALL_OW 67
// PowellSupport ;
7133: CALL 1870 0 0
// end ; end ;
7137: PPOPN 5
7139: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7140: LD_VAR 0 1
7144: PPUSH
7145: CALL 26999 0 1
// if un = JMM then
7149: LD_VAR 0 1
7153: PUSH
7154: LD_EXP 1
7158: EQUAL
7159: IFFALSE 7168
// YouLost ( JMM ) ;
7161: LD_STRING JMM
7163: PPUSH
7164: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7168: LD_VAR 0 1
7172: PPUSH
7173: CALL_OW 264
7177: PUSH
7178: LD_INT 31
7180: EQUAL
7181: IFFALSE 7197
// achivCounter := achivCounter + 1 ;
7183: LD_ADDR_EXP 42
7187: PUSH
7188: LD_EXP 42
7192: PUSH
7193: LD_INT 1
7195: PLUS
7196: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7197: LD_VAR 0 1
7201: PPUSH
7202: CALL_OW 255
7206: PUSH
7207: LD_INT 1
7209: NONEQUAL
7210: PUSH
7211: LD_VAR 0 1
7215: PPUSH
7216: CALL_OW 247
7220: PUSH
7221: LD_INT 2
7223: EQUAL
7224: AND
7225: IFFALSE 7241
// destroyCounter := destroyCounter + 1 ;
7227: LD_ADDR_EXP 43
7231: PUSH
7232: LD_EXP 43
7236: PUSH
7237: LD_INT 1
7239: PLUS
7240: ST_TO_ADDR
// end ;
7241: PPOPN 1
7243: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7244: LD_VAR 0 2
7248: PUSH
7249: LD_EXP 19
7253: EQUAL
7254: IFFALSE 7263
// SetAchievement ( ACH_MASHA ) ;
7256: LD_STRING ACH_MASHA
7258: PPUSH
7259: CALL_OW 543
// end ;
7263: PPOPN 4
7265: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7266: LD_VAR 0 1
7270: PPUSH
7271: LD_VAR 0 2
7275: PPUSH
7276: CALL 27119 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7280: LD_VAR 0 1
7284: PPUSH
7285: CALL_OW 264
7289: PUSH
7290: LD_INT 8
7292: EQUAL
7293: PUSH
7294: LD_EXP 37
7298: PUSH
7299: LD_INT 0
7301: EQUAL
7302: AND
7303: IFFALSE 7372
// begin eventVar2 := 1 ;
7305: LD_ADDR_EXP 37
7309: PUSH
7310: LD_INT 1
7312: ST_TO_ADDR
// DialogueOn ;
7313: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7317: LD_EXP 1
7321: PPUSH
7322: LD_STRING D6b-JMM-1
7324: PPUSH
7325: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7329: LD_EXP 16
7333: PPUSH
7334: LD_STRING D6b-Pow-1
7336: PPUSH
7337: CALL_OW 94
// DialogueOff ;
7341: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7345: LD_INT 5
7347: PPUSH
7348: LD_INT 1
7350: PPUSH
7351: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7355: LD_INT 7
7357: PPUSH
7358: LD_INT 1
7360: PPUSH
7361: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7365: LD_STRING M3
7367: PPUSH
7368: CALL_OW 337
// end ; end ;
7372: PPOPN 2
7374: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7375: LD_VAR 0 2
7379: PPUSH
7380: LD_VAR 0 3
7384: PPUSH
7385: LD_INT 5
7387: PPUSH
7388: CALL_OW 309
7392: PUSH
7393: LD_EXP 38
7397: PUSH
7398: LD_INT 0
7400: EQUAL
7401: AND
7402: IFFALSE 7627
// begin eventVar3 := 1 ;
7404: LD_ADDR_EXP 38
7408: PUSH
7409: LD_INT 1
7411: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7412: LD_INT 175
7414: PPUSH
7415: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7419: LD_INT 7
7421: PPUSH
7422: LD_INT 22
7424: PUSH
7425: LD_INT 1
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PUSH
7432: LD_INT 21
7434: PUSH
7435: LD_INT 2
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 34
7444: PUSH
7445: LD_INT 11
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: LIST
7456: PPUSH
7457: CALL_OW 70
7461: IFFALSE 7480
// begin radarOnSpot := 1 ;
7463: LD_ADDR_EXP 31
7467: PUSH
7468: LD_INT 1
7470: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7471: LD_STRING M3a
7473: PPUSH
7474: CALL_OW 337
// end else
7478: GO 7487
// ChangeMissionObjectives ( M3b ) ;
7480: LD_STRING M3b
7482: PPUSH
7483: CALL_OW 337
// DialogueOn ;
7487: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7491: LD_EXP 2
7495: PPUSH
7496: LD_STRING D8-Huck-1
7498: PPUSH
7499: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7503: LD_EXP 1
7507: PPUSH
7508: LD_STRING D8-JMM-1
7510: PPUSH
7511: CALL_OW 88
// if IsOk ( Stevens ) then
7515: LD_EXP 2
7519: PPUSH
7520: CALL_OW 302
7524: IFFALSE 7586
// begin Say ( Stevens , D8-Huck-2 ) ;
7526: LD_EXP 2
7530: PPUSH
7531: LD_STRING D8-Huck-2
7533: PPUSH
7534: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7538: LD_EXP 1
7542: PPUSH
7543: LD_STRING D8-JMM-2
7545: PPUSH
7546: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7550: LD_EXP 2
7554: PPUSH
7555: LD_STRING D8-Huck-3
7557: PPUSH
7558: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7562: LD_EXP 1
7566: PPUSH
7567: LD_STRING D8-JMM-3
7569: PPUSH
7570: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7574: LD_EXP 2
7578: PPUSH
7579: LD_STRING D8-Huck-4
7581: PPUSH
7582: CALL_OW 88
// end ; DialogueOff ;
7586: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7590: LD_INT 5
7592: PPUSH
7593: LD_INT 0
7595: PPUSH
7596: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7600: LD_INT 7
7602: PPUSH
7603: LD_INT 0
7605: PPUSH
7606: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7610: LD_INT 6
7612: PPUSH
7613: LD_INT 1
7615: PPUSH
7616: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7620: LD_STRING M5
7622: PPUSH
7623: CALL_OW 337
// end ; end ;
7627: PPOPN 3
7629: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7630: LD_EXP 27
7634: PPUSH
7635: CALL_OW 302
7639: PUSH
7640: LD_VAR 0 2
7644: PUSH
7645: LD_EXP 27
7649: EQUAL
7650: AND
7651: PUSH
7652: LD_EXP 39
7656: PUSH
7657: LD_INT 0
7659: EQUAL
7660: AND
7661: PUSH
7662: LD_EXP 38
7666: PUSH
7667: LD_INT 1
7669: EQUAL
7670: AND
7671: PUSH
7672: LD_VAR 0 1
7676: PPUSH
7677: LD_INT 1
7679: PPUSH
7680: CALL_OW 268
7684: PUSH
7685: LD_INT 11
7687: EQUAL
7688: PUSH
7689: LD_VAR 0 1
7693: PPUSH
7694: LD_INT 2
7696: PPUSH
7697: CALL_OW 268
7701: PUSH
7702: LD_INT 11
7704: EQUAL
7705: OR
7706: AND
7707: IFFALSE 7717
// eventVar4 := 1 ;
7709: LD_ADDR_EXP 39
7713: PUSH
7714: LD_INT 1
7716: ST_TO_ADDR
// end ;
7717: PPOPN 2
7719: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7720: LD_INT 0
7722: PPUSH
7723: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7724: LD_VAR 0 1
7728: PPUSH
7729: CALL_OW 248
7733: PUSH
7734: LD_INT 2
7736: EQUAL
7737: IFFALSE 7969
// begin for i := sibDeposits downto 1 do
7739: LD_ADDR_VAR 0 4
7743: PUSH
7744: DOUBLE
7745: LD_EXP 32
7749: INC
7750: ST_TO_ADDR
7751: LD_INT 1
7753: PUSH
7754: FOR_DOWNTO
7755: IFFALSE 7825
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7757: LD_EXP 32
7761: PUSH
7762: LD_VAR 0 4
7766: ARRAY
7767: PUSH
7768: LD_INT 1
7770: ARRAY
7771: PUSH
7772: LD_VAR 0 2
7776: EQUAL
7777: PUSH
7778: LD_EXP 32
7782: PUSH
7783: LD_VAR 0 4
7787: ARRAY
7788: PUSH
7789: LD_INT 2
7791: ARRAY
7792: PUSH
7793: LD_VAR 0 3
7797: EQUAL
7798: AND
7799: IFFALSE 7823
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7801: LD_ADDR_EXP 32
7805: PUSH
7806: LD_EXP 32
7810: PPUSH
7811: LD_VAR 0 4
7815: PPUSH
7816: CALL_OW 3
7820: ST_TO_ADDR
// break ;
7821: GO 7825
// end ;
7823: GO 7754
7825: POP
7826: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7827: LD_EXP 40
7831: PUSH
7832: LD_INT 0
7834: EQUAL
7835: PUSH
7836: LD_VAR 0 2
7840: PPUSH
7841: LD_VAR 0 3
7845: PPUSH
7846: CALL_OW 428
7850: PUSH
7851: LD_INT 22
7853: PUSH
7854: LD_INT 1
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PPUSH
7861: CALL_OW 69
7865: IN
7866: AND
7867: IFFALSE 7969
// begin eventVar5 := 1 ;
7869: LD_ADDR_EXP 40
7873: PUSH
7874: LD_INT 1
7876: ST_TO_ADDR
// DialogueOn ;
7877: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7881: LD_EXP 2
7885: PPUSH
7886: LD_STRING D4-Sci1-1
7888: PPUSH
7889: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7893: LD_EXP 1
7897: PPUSH
7898: LD_STRING D4-JMM-1
7900: PPUSH
7901: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7905: LD_EXP 2
7909: PPUSH
7910: LD_STRING D4-Sci1-2
7912: PPUSH
7913: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7917: LD_EXP 1
7921: PPUSH
7922: LD_STRING D4-JMM-2
7924: PPUSH
7925: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7929: LD_EXP 2
7933: PPUSH
7934: LD_STRING D4-Sci1-3
7936: PPUSH
7937: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7941: LD_EXP 1
7945: PPUSH
7946: LD_STRING D4-JMM-3
7948: PPUSH
7949: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7953: LD_EXP 1
7957: PPUSH
7958: LD_STRING D4-JMM-3a
7960: PPUSH
7961: CALL_OW 88
// DialogueOff ;
7965: CALL_OW 7
// end ; end ; end ;
7969: PPOPN 5
7971: END
// on SiberiteDepositDestroyed ( x , y ) do begin sibDestroyedCounter := Inc ( sibDestroyedCounter ) ;
7972: LD_ADDR_EXP 33
7976: PUSH
7977: LD_EXP 33
7981: PPUSH
7982: CALL 70945 0 1
7986: ST_TO_ADDR
// end ;
7987: PPOPN 2
7989: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7990: LD_VAR 0 1
7994: PPUSH
7995: CALL_OW 255
7999: PUSH
8000: LD_INT 1
8002: EQUAL
8003: PUSH
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL_OW 266
8013: PUSH
8014: LD_INT 0
8016: EQUAL
8017: AND
8018: PUSH
8019: LD_INT 22
8021: PUSH
8022: LD_INT 1
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 21
8031: PUSH
8032: LD_INT 3
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: PUSH
8039: LD_INT 2
8041: PUSH
8042: LD_INT 30
8044: PUSH
8045: LD_INT 0
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: LD_INT 30
8054: PUSH
8055: LD_INT 1
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 69
8076: PUSH
8077: LD_INT 1
8079: EQUAL
8080: AND
8081: IFFALSE 8095
// SetBName ( building , omega ) ;
8083: LD_VAR 0 1
8087: PPUSH
8088: LD_STRING omega
8090: PPUSH
8091: CALL_OW 500
// end ;
8095: PPOPN 2
8097: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8098: LD_VAR 0 1
8102: PPUSH
8103: CALL 27103 0 1
// end ;
8107: PPOPN 1
8109: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
8110: LD_VAR 0 1
8114: PUSH
8115: LD_EXP 44
8119: EQUAL
8120: IFFALSE 8126
// ArabianAttack ;
8122: CALL 10257 0 0
// if event = eventRussianAttack then
8126: LD_VAR 0 1
8130: PUSH
8131: LD_EXP 45
8135: EQUAL
8136: IFFALSE 8142
// RussianAttack ;
8138: CALL 10622 0 0
// end ;
8142: PPOPN 1
8144: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8145: LD_VAR 0 1
8149: PUSH
8150: LD_EXP 46
8154: EQUAL
8155: IFFALSE 8249
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8157: LD_VAR 0 2
8161: PPUSH
8162: CALL_OW 302
8166: PUSH
8167: LD_VAR 0 3
8171: PPUSH
8172: LD_VAR 0 4
8176: PPUSH
8177: CALL_OW 488
8181: AND
8182: IFFALSE 8249
// begin repeat wait ( 0 0$1 ) ;
8184: LD_INT 35
8186: PPUSH
8187: CALL_OW 67
// if not HasTask ( p1 ) then
8191: LD_VAR 0 2
8195: PPUSH
8196: CALL_OW 314
8200: NOT
8201: IFFALSE 8237
// begin ComContaminate ( p1 , p2 , p3 ) ;
8203: LD_VAR 0 2
8207: PPUSH
8208: LD_VAR 0 3
8212: PPUSH
8213: LD_VAR 0 4
8217: PPUSH
8218: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8222: LD_VAR 0 2
8226: PPUSH
8227: LD_INT 42
8229: PPUSH
8230: LD_INT 3
8232: PPUSH
8233: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8237: LD_VAR 0 2
8241: PPUSH
8242: CALL_OW 302
8246: NOT
8247: IFFALSE 8184
// end ; end ; end ;
8249: PPOPN 7
8251: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8252: LD_VAR 0 1
8256: PPUSH
8257: CALL_OW 255
8261: PUSH
8262: LD_INT 3
8264: PUSH
8265: LD_INT 8
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: IN
8272: IFFALSE 8335
// begin ComMoveXY ( driver , 41 , 2 ) ;
8274: LD_VAR 0 1
8278: PPUSH
8279: LD_INT 41
8281: PPUSH
8282: LD_INT 2
8284: PPUSH
8285: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8289: LD_INT 35
8291: PPUSH
8292: CALL_OW 67
// if IsDead ( driver ) then
8296: LD_VAR 0 1
8300: PPUSH
8301: CALL_OW 301
8305: IFFALSE 8309
// exit ;
8307: GO 8335
// until IsAt ( driver , 41 , 2 ) ;
8309: LD_VAR 0 1
8313: PPUSH
8314: LD_INT 41
8316: PPUSH
8317: LD_INT 2
8319: PPUSH
8320: CALL_OW 307
8324: IFFALSE 8289
// RemoveUnit ( driver ) ;
8326: LD_VAR 0 1
8330: PPUSH
8331: CALL_OW 64
// end ; end ; end_of_file
8335: PPOPN 4
8337: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8338: LD_INT 0
8340: PPUSH
8341: PPUSH
8342: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8343: LD_ADDR_VAR 0 1
8347: PUSH
8348: LD_VAR 0 1
8352: PUSH
8353: LD_EXP 1
8357: PUSH
8358: LD_EXP 2
8362: PUSH
8363: LD_EXP 3
8367: PUSH
8368: LD_EXP 4
8372: PUSH
8373: LD_EXP 5
8377: PUSH
8378: LD_EXP 6
8382: PUSH
8383: LD_EXP 7
8387: PUSH
8388: LD_EXP 8
8392: PUSH
8393: LD_EXP 9
8397: PUSH
8398: LD_EXP 10
8402: PUSH
8403: LD_EXP 11
8407: PUSH
8408: LD_EXP 12
8412: PUSH
8413: LD_EXP 13
8417: PUSH
8418: LD_EXP 14
8422: PUSH
8423: LD_EXP 16
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: DIFF
8445: ST_TO_ADDR
// if not characters then
8446: LD_VAR 0 1
8450: NOT
8451: IFFALSE 8455
// exit ;
8453: GO 8534
// speaker := characters [ rand ( 1 , characters ) ] ;
8455: LD_ADDR_VAR 0 6
8459: PUSH
8460: LD_VAR 0 1
8464: PUSH
8465: LD_INT 1
8467: PPUSH
8468: LD_VAR 0 1
8472: PPUSH
8473: CALL_OW 12
8477: ARRAY
8478: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8479: LD_VAR 0 6
8483: PPUSH
8484: CALL_OW 258
8488: PUSH
8489: LD_INT 1
8491: EQUAL
8492: IFFALSE 8510
// Say ( speaker , dialogMID ) else
8494: LD_VAR 0 6
8498: PPUSH
8499: LD_VAR 0 2
8503: PPUSH
8504: CALL_OW 88
8508: GO 8524
// Say ( speaker , dialogFID ) ;
8510: LD_VAR 0 6
8514: PPUSH
8515: LD_VAR 0 3
8519: PPUSH
8520: CALL_OW 88
// result := speaker ;
8524: LD_ADDR_VAR 0 4
8528: PUSH
8529: LD_VAR 0 6
8533: ST_TO_ADDR
// end ;
8534: LD_VAR 0 4
8538: RET
// export function PrepareDifficulty ; begin
8539: LD_INT 0
8541: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8542: LD_INT 5
8544: PPUSH
8545: LD_INT 8
8547: PPUSH
8548: LD_INT 2
8550: PPUSH
8551: CALL_OW 322
// if Difficulty = 1 then
8555: LD_OWVAR 67
8559: PUSH
8560: LD_INT 1
8562: EQUAL
8563: IFFALSE 8682
// begin SetTech ( 66 , 8 , state_researched ) ;
8565: LD_INT 66
8567: PPUSH
8568: LD_INT 8
8570: PPUSH
8571: LD_INT 2
8573: PPUSH
8574: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8578: LD_INT 67
8580: PPUSH
8581: LD_INT 8
8583: PPUSH
8584: LD_INT 0
8586: PPUSH
8587: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8591: LD_INT 68
8593: PPUSH
8594: LD_INT 8
8596: PPUSH
8597: LD_INT 0
8599: PPUSH
8600: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8604: LD_INT 51
8606: PPUSH
8607: LD_INT 8
8609: PPUSH
8610: LD_INT 2
8612: PPUSH
8613: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8617: LD_INT 52
8619: PPUSH
8620: LD_INT 8
8622: PPUSH
8623: LD_INT 0
8625: PPUSH
8626: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8630: LD_INT 53
8632: PPUSH
8633: LD_INT 8
8635: PPUSH
8636: LD_INT 0
8638: PPUSH
8639: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8643: LD_INT 60
8645: PPUSH
8646: LD_INT 8
8648: PPUSH
8649: LD_INT 2
8651: PPUSH
8652: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8656: LD_INT 61
8658: PPUSH
8659: LD_INT 8
8661: PPUSH
8662: LD_INT 0
8664: PPUSH
8665: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8669: LD_INT 62
8671: PPUSH
8672: LD_INT 8
8674: PPUSH
8675: LD_INT 0
8677: PPUSH
8678: CALL_OW 322
// end ; if Difficulty = 2 then
8682: LD_OWVAR 67
8686: PUSH
8687: LD_INT 2
8689: EQUAL
8690: IFFALSE 8809
// begin SetTech ( 66 , 8 , state_researched ) ;
8692: LD_INT 66
8694: PPUSH
8695: LD_INT 8
8697: PPUSH
8698: LD_INT 2
8700: PPUSH
8701: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8705: LD_INT 67
8707: PPUSH
8708: LD_INT 8
8710: PPUSH
8711: LD_INT 2
8713: PPUSH
8714: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8718: LD_INT 68
8720: PPUSH
8721: LD_INT 8
8723: PPUSH
8724: LD_INT 0
8726: PPUSH
8727: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8731: LD_INT 51
8733: PPUSH
8734: LD_INT 8
8736: PPUSH
8737: LD_INT 2
8739: PPUSH
8740: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8744: LD_INT 52
8746: PPUSH
8747: LD_INT 8
8749: PPUSH
8750: LD_INT 2
8752: PPUSH
8753: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8757: LD_INT 53
8759: PPUSH
8760: LD_INT 8
8762: PPUSH
8763: LD_INT 2
8765: PPUSH
8766: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8770: LD_INT 60
8772: PPUSH
8773: LD_INT 8
8775: PPUSH
8776: LD_INT 2
8778: PPUSH
8779: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8783: LD_INT 61
8785: PPUSH
8786: LD_INT 8
8788: PPUSH
8789: LD_INT 2
8791: PPUSH
8792: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8796: LD_INT 62
8798: PPUSH
8799: LD_INT 8
8801: PPUSH
8802: LD_INT 0
8804: PPUSH
8805: CALL_OW 322
// end ; if Difficulty >= 3 then
8809: LD_OWVAR 67
8813: PUSH
8814: LD_INT 3
8816: GREATEREQUAL
8817: IFFALSE 8936
// begin SetTech ( 66 , 8 , state_researched ) ;
8819: LD_INT 66
8821: PPUSH
8822: LD_INT 8
8824: PPUSH
8825: LD_INT 2
8827: PPUSH
8828: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8832: LD_INT 67
8834: PPUSH
8835: LD_INT 8
8837: PPUSH
8838: LD_INT 2
8840: PPUSH
8841: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8845: LD_INT 68
8847: PPUSH
8848: LD_INT 8
8850: PPUSH
8851: LD_INT 0
8853: PPUSH
8854: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8858: LD_INT 51
8860: PPUSH
8861: LD_INT 8
8863: PPUSH
8864: LD_INT 2
8866: PPUSH
8867: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8871: LD_INT 52
8873: PPUSH
8874: LD_INT 8
8876: PPUSH
8877: LD_INT 2
8879: PPUSH
8880: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8884: LD_INT 53
8886: PPUSH
8887: LD_INT 8
8889: PPUSH
8890: LD_INT 2
8892: PPUSH
8893: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8897: LD_INT 60
8899: PPUSH
8900: LD_INT 8
8902: PPUSH
8903: LD_INT 2
8905: PPUSH
8906: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8910: LD_INT 61
8912: PPUSH
8913: LD_INT 8
8915: PPUSH
8916: LD_INT 2
8918: PPUSH
8919: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8923: LD_INT 62
8925: PPUSH
8926: LD_INT 8
8928: PPUSH
8929: LD_INT 0
8931: PPUSH
8932: CALL_OW 322
// end ; end ;
8936: LD_VAR 0 1
8940: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8941: LD_INT 0
8943: PPUSH
8944: PPUSH
// for i in charactersList do
8945: LD_ADDR_VAR 0 4
8949: PUSH
8950: LD_VAR 0 1
8954: PUSH
8955: FOR_IN
8956: IFFALSE 8974
// SaveCharacters ( i , ident ) ;
8958: LD_VAR 0 4
8962: PPUSH
8963: LD_VAR 0 2
8967: PPUSH
8968: CALL_OW 38
8972: GO 8955
8974: POP
8975: POP
// end ; end_of_file
8976: LD_VAR 0 3
8980: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8981: LD_EXP 39
8985: PUSH
8986: LD_INT 1
8988: EQUAL
8989: IFFALSE 9961
8991: GO 8993
8993: DISABLE
8994: LD_INT 0
8996: PPUSH
8997: PPUSH
8998: PPUSH
// begin m1 := false ;
8999: LD_ADDR_VAR 0 1
9003: PUSH
9004: LD_INT 0
9006: ST_TO_ADDR
// m2 := false ;
9007: LD_ADDR_VAR 0 2
9011: PUSH
9012: LD_INT 0
9014: ST_TO_ADDR
// m3 := false ;
9015: LD_ADDR_VAR 0 3
9019: PUSH
9020: LD_INT 0
9022: ST_TO_ADDR
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
9023: LD_INT 22
9025: PUSH
9026: LD_INT 1
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: LD_INT 21
9035: PUSH
9036: LD_INT 1
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: LD_INT 23
9045: PUSH
9046: LD_INT 1
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: PUSH
9053: LD_INT 50
9055: PUSH
9056: EMPTY
9057: LIST
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: PPUSH
9065: CALL_OW 69
9069: PPUSH
9070: CALL 33995 0 1
9074: PUSH
9075: LD_INT 5
9077: LESS
9078: IFFALSE 9089
// begin YouLost ( Troops ) ;
9080: LD_STRING Troops
9082: PPUSH
9083: CALL_OW 104
// exit ;
9087: GO 9961
// end ; DialogueOn ;
9089: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
9093: LD_EXP 1
9097: PPUSH
9098: LD_STRING D9b-JMM-1
9100: PPUSH
9101: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
9105: LD_EXP 16
9109: PPUSH
9110: LD_STRING D9b-Pow-1
9112: PPUSH
9113: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
9117: LD_EXP 1
9121: PPUSH
9122: LD_STRING D9b-JMM-2
9124: PPUSH
9125: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
9129: LD_EXP 16
9133: PPUSH
9134: LD_STRING D9b-Pow-2
9136: PPUSH
9137: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
9141: LD_EXP 1
9145: PPUSH
9146: LD_STRING D9b-JMM-3
9148: PPUSH
9149: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
9153: LD_EXP 16
9157: PPUSH
9158: LD_STRING D9b-Pow-3
9160: PPUSH
9161: CALL_OW 94
// if tick <= 60 60$00 then
9165: LD_OWVAR 1
9169: PUSH
9170: LD_INT 126000
9172: LESSEQUAL
9173: IFFALSE 9182
// SetAchievement ( ACH_ASPEED_13 ) ;
9175: LD_STRING ACH_ASPEED_13
9177: PPUSH
9178: CALL_OW 543
// if burlakStatus = 1 then
9182: LD_EXP 29
9186: PUSH
9187: LD_INT 1
9189: EQUAL
9190: IFFALSE 9212
// begin m1 := true ;
9192: LD_ADDR_VAR 0 1
9196: PUSH
9197: LD_INT 1
9199: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9200: LD_STRING Burlak
9202: PPUSH
9203: LD_INT 1
9205: PPUSH
9206: CALL_OW 101
// end else
9210: GO 9223
// begin AddMedal ( Burlak , - 1 ) ;
9212: LD_STRING Burlak
9214: PPUSH
9215: LD_INT 1
9217: NEG
9218: PPUSH
9219: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9223: LD_EXP 2
9227: PPUSH
9228: CALL_OW 302
9232: IFFALSE 9254
// begin m2 := true ;
9234: LD_ADDR_VAR 0 2
9238: PUSH
9239: LD_INT 1
9241: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9242: LD_STRING Stevens
9244: PPUSH
9245: LD_INT 1
9247: PPUSH
9248: CALL_OW 101
// end else
9252: GO 9265
// begin AddMedal ( Stevens , - 1 ) ;
9254: LD_STRING Stevens
9256: PPUSH
9257: LD_INT 1
9259: NEG
9260: PPUSH
9261: CALL_OW 101
// end ; if radarOnSpot = 1 then
9265: LD_EXP 31
9269: PUSH
9270: LD_INT 1
9272: EQUAL
9273: IFFALSE 9295
// begin m3 := true ;
9275: LD_ADDR_VAR 0 3
9279: PUSH
9280: LD_INT 1
9282: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9283: LD_STRING Observation
9285: PPUSH
9286: LD_INT 1
9288: PPUSH
9289: CALL_OW 101
// end else
9293: GO 9306
// begin AddMedal ( Observation , - 1 ) ;
9295: LD_STRING Observation
9297: PPUSH
9298: LD_INT 1
9300: NEG
9301: PPUSH
9302: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9306: LD_VAR 0 1
9310: PUSH
9311: LD_VAR 0 2
9315: AND
9316: PUSH
9317: LD_VAR 0 3
9321: AND
9322: PUSH
9323: LD_OWVAR 67
9327: PUSH
9328: LD_INT 3
9330: GREATEREQUAL
9331: AND
9332: IFFALSE 9344
// SetAchievementEX ( ACH_AMER , 13 ) ;
9334: LD_STRING ACH_AMER
9336: PPUSH
9337: LD_INT 13
9339: PPUSH
9340: CALL_OW 564
// GiveMedals ( MAIN ) ;
9344: LD_STRING MAIN
9346: PPUSH
9347: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9351: LD_EXP 29
9355: PPUSH
9356: LD_STRING 13_BurlakStatus_1
9358: PPUSH
9359: CALL_OW 39
// if IsLive ( Stevens ) then
9363: LD_EXP 2
9367: PPUSH
9368: CALL_OW 300
9372: IFFALSE 9386
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9374: LD_INT 1
9376: PPUSH
9377: LD_STRING 13_StevensStatus_1
9379: PPUSH
9380: CALL_OW 39
9384: GO 9396
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9386: LD_INT 0
9388: PPUSH
9389: LD_STRING 13_StevensStatus_1
9391: PPUSH
9392: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9396: LD_INT 22
9398: PUSH
9399: LD_INT 1
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 21
9408: PUSH
9409: LD_INT 1
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 2
9418: PUSH
9419: LD_INT 25
9421: PUSH
9422: LD_INT 1
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PUSH
9429: LD_INT 25
9431: PUSH
9432: LD_INT 2
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PUSH
9439: LD_INT 25
9441: PUSH
9442: LD_INT 3
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: LD_INT 25
9451: PUSH
9452: LD_INT 4
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 25
9461: PUSH
9462: LD_INT 5
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 8
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: PPUSH
9493: CALL_OW 69
9497: PPUSH
9498: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9502: LD_EXP 1
9506: PPUSH
9507: LD_EXP 35
9511: PUSH
9512: LD_STRING JMM
9514: STR
9515: PPUSH
9516: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9520: LD_EXP 8
9524: PPUSH
9525: LD_EXP 35
9529: PUSH
9530: LD_STRING Brown
9532: STR
9533: PPUSH
9534: CALL 8941 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9538: LD_EXP 4
9542: PPUSH
9543: LD_EXP 35
9547: PUSH
9548: LD_STRING Donaldson
9550: STR
9551: PPUSH
9552: CALL 8941 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9556: LD_EXP 5
9560: PPUSH
9561: LD_EXP 35
9565: PUSH
9566: LD_STRING Bobby
9568: STR
9569: PPUSH
9570: CALL 8941 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9574: LD_EXP 6
9578: PPUSH
9579: LD_EXP 35
9583: PUSH
9584: LD_STRING Cyrus
9586: STR
9587: PPUSH
9588: CALL 8941 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9592: LD_EXP 3
9596: PPUSH
9597: LD_EXP 35
9601: PUSH
9602: LD_STRING Lisa
9604: STR
9605: PPUSH
9606: CALL 8941 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9610: LD_EXP 13
9614: PPUSH
9615: LD_EXP 35
9619: PUSH
9620: LD_STRING Frank
9622: STR
9623: PPUSH
9624: CALL 8941 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9628: LD_EXP 14
9632: PPUSH
9633: LD_EXP 35
9637: PUSH
9638: LD_STRING Kikuchi
9640: STR
9641: PPUSH
9642: CALL 8941 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9646: LD_EXP 10
9650: PPUSH
9651: LD_EXP 35
9655: PUSH
9656: LD_STRING Houten
9658: STR
9659: PPUSH
9660: CALL 8941 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9664: LD_EXP 12
9668: PPUSH
9669: LD_EXP 35
9673: PUSH
9674: LD_STRING Gary
9676: STR
9677: PPUSH
9678: CALL 8941 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9682: LD_EXP 11
9686: PPUSH
9687: LD_EXP 35
9691: PUSH
9692: LD_STRING Cornell
9694: STR
9695: PPUSH
9696: CALL 8941 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9700: LD_EXP 7
9704: PPUSH
9705: LD_EXP 35
9709: PUSH
9710: LD_STRING Denis
9712: STR
9713: PPUSH
9714: CALL 8941 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9718: LD_EXP 9
9722: PPUSH
9723: LD_EXP 35
9727: PUSH
9728: LD_STRING Gladstone
9730: STR
9731: PPUSH
9732: CALL 8941 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9736: LD_EXP 2
9740: PPUSH
9741: LD_EXP 35
9745: PUSH
9746: LD_STRING Stevens
9748: STR
9749: PPUSH
9750: CALL 8941 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9754: LD_INT 50
9756: PUSH
9757: EMPTY
9758: LIST
9759: PUSH
9760: LD_INT 22
9762: PUSH
9763: LD_INT 1
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PUSH
9770: LD_INT 21
9772: PUSH
9773: LD_INT 1
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 2
9782: PUSH
9783: LD_INT 25
9785: PUSH
9786: LD_INT 1
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 25
9795: PUSH
9796: LD_INT 2
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: LD_INT 25
9805: PUSH
9806: LD_INT 3
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: LD_INT 25
9815: PUSH
9816: LD_INT 4
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 25
9825: PUSH
9826: LD_INT 5
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 25
9835: PUSH
9836: LD_INT 8
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: PPUSH
9858: CALL_OW 69
9862: PUSH
9863: LD_EXP 1
9867: PUSH
9868: LD_EXP 8
9872: PUSH
9873: LD_EXP 4
9877: PUSH
9878: LD_EXP 5
9882: PUSH
9883: LD_EXP 6
9887: PUSH
9888: LD_EXP 3
9892: PUSH
9893: LD_EXP 13
9897: PUSH
9898: LD_EXP 9
9902: PUSH
9903: LD_EXP 14
9907: PUSH
9908: LD_EXP 7
9912: PUSH
9913: LD_EXP 10
9917: PUSH
9918: LD_EXP 12
9922: PUSH
9923: LD_EXP 11
9927: PUSH
9928: LD_EXP 2
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: DIFF
9949: PPUSH
9950: LD_STRING 13_other_survivors
9952: PPUSH
9953: CALL_OW 38
// YouWin ;
9957: CALL_OW 103
// end ; end_of_file
9961: PPOPN 3
9963: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
9964: LD_EXP 33
9968: PUSH
9969: LD_INT 2
9971: EQUAL
9972: PUSH
9973: LD_INT 34
9975: PUSH
9976: LD_INT 8
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PPUSH
9983: CALL_OW 69
9987: NOT
9988: AND
9989: PUSH
9990: LD_INT 25
9992: PPUSH
9993: LD_INT 1
9995: PPUSH
9996: CALL_OW 321
10000: PUSH
10001: LD_INT 1
10003: EQUAL
10004: AND
10005: IFFALSE 10141
10007: GO 10009
10009: DISABLE
10010: LD_INT 0
10012: PPUSH
10013: PPUSH
10014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10015: LD_ADDR_VAR 0 2
10019: PUSH
10020: LD_INT 22
10022: PUSH
10023: LD_INT 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 21
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 2
10042: PUSH
10043: LD_INT 30
10045: PUSH
10046: LD_INT 0
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 30
10055: PUSH
10056: LD_INT 1
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: PPUSH
10073: CALL_OW 69
10077: ST_TO_ADDR
// for i in tmp do
10078: LD_ADDR_VAR 0 1
10082: PUSH
10083: LD_VAR 0 2
10087: PUSH
10088: FOR_IN
10089: IFFALSE 10122
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
10091: LD_ADDR_VAR 0 3
10095: PUSH
10096: LD_VAR 0 3
10100: PUSH
10101: LD_VAR 0 1
10105: PPUSH
10106: CALL_OW 274
10110: PPUSH
10111: LD_INT 3
10113: PPUSH
10114: CALL_OW 275
10118: PLUS
10119: ST_TO_ADDR
10120: GO 10088
10122: POP
10123: POP
// if yourSiberite < 60 then
10124: LD_VAR 0 3
10128: PUSH
10129: LD_INT 60
10131: LESS
10132: IFFALSE 10141
// YouLost ( siberite ) ;
10134: LD_STRING siberite
10136: PPUSH
10137: CALL_OW 104
// end ; end_of_file
10141: PPOPN 3
10143: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10144: LD_INT 22
10146: PUSH
10147: LD_INT 8
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PUSH
10154: LD_INT 21
10156: PUSH
10157: LD_INT 1
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PPUSH
10168: CALL_OW 69
10172: PUSH
10173: LD_INT 6
10175: LESS
10176: IFFALSE 10186
10178: GO 10180
10180: DISABLE
// begin enable ;
10181: ENABLE
// PrepareArabianAttack ;
10182: CALL 4104 0 0
// end ;
10186: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10187: LD_EXP 36
10191: PUSH
10192: LD_INT 1
10194: EQUAL
10195: PUSH
10196: LD_INT 22
10198: PUSH
10199: LD_INT 8
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 21
10208: PUSH
10209: LD_INT 1
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PPUSH
10220: CALL_OW 69
10224: PUSH
10225: LD_INT 6
10227: LESS
10228: AND
10229: IFFALSE 10256
10231: GO 10233
10233: DISABLE
// begin wait ( 4 4$00 ) ;
10234: LD_INT 8400
10236: PPUSH
10237: CALL_OW 67
// PrepareRussianAttack ;
10241: CALL 3327 0 0
// wait ( 12 12$00 ) ;
10245: LD_INT 25200
10247: PPUSH
10248: CALL_OW 67
// PrepareRussianAttack ;
10252: CALL 3327 0 0
// end ;
10256: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10257: LD_INT 0
10259: PPUSH
10260: PPUSH
10261: PPUSH
10262: PPUSH
10263: PPUSH
10264: PPUSH
10265: PPUSH
10266: PPUSH
10267: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10268: LD_ADDR_VAR 0 8
10272: PUSH
10273: LD_INT 22
10275: PUSH
10276: LD_INT 8
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 120
10285: PUSH
10286: LD_INT 10
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PPUSH
10297: CALL_OW 69
10301: ST_TO_ADDR
// if not units then
10302: LD_VAR 0 8
10306: NOT
10307: IFFALSE 10311
// exit ;
10309: GO 10617
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10311: LD_ADDR_VAR 0 4
10315: PUSH
10316: LD_INT 80
10318: PUSH
10319: LD_INT 60
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 54
10328: PUSH
10329: LD_INT 57
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 55
10338: PUSH
10339: LD_INT 74
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 61
10348: PUSH
10349: LD_INT 85
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10362: LD_ADDR_VAR 0 5
10366: PUSH
10367: LD_INT 93
10369: PUSH
10370: LD_INT 99
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 85
10379: PUSH
10380: LD_INT 99
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10391: LD_INT 35
10393: PPUSH
10394: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10398: LD_ADDR_VAR 0 6
10402: PUSH
10403: LD_VAR 0 8
10407: PPUSH
10408: LD_INT 21
10410: PUSH
10411: LD_INT 2
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PPUSH
10418: CALL_OW 72
10422: ST_TO_ADDR
// if vehicles then
10423: LD_VAR 0 6
10427: IFFALSE 10443
// AgressiveMove ( vehicles , path ) ;
10429: LD_VAR 0 6
10433: PPUSH
10434: LD_VAR 0 4
10438: PPUSH
10439: CALL 72188 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10443: LD_ADDR_VAR 0 7
10447: PUSH
10448: LD_VAR 0 8
10452: PPUSH
10453: LD_INT 23
10455: PUSH
10456: LD_INT 2
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: LD_INT 21
10465: PUSH
10466: LD_INT 1
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PPUSH
10477: CALL_OW 72
10481: ST_TO_ADDR
// if infantry then
10482: LD_VAR 0 7
10486: IFFALSE 10502
// AgressiveMove ( infantry , path2 ) ;
10488: LD_VAR 0 7
10492: PPUSH
10493: LD_VAR 0 5
10497: PPUSH
10498: CALL 72188 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10502: LD_ADDR_VAR 0 9
10506: PUSH
10507: LD_VAR 0 8
10511: PPUSH
10512: LD_INT 23
10514: PUSH
10515: LD_INT 0
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 21
10524: PUSH
10525: LD_INT 1
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PPUSH
10536: CALL_OW 72
10540: ST_TO_ADDR
// if apes then
10541: LD_VAR 0 9
10545: IFFALSE 10589
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10547: LD_VAR 0 9
10551: PUSH
10552: LD_INT 1
10554: ARRAY
10555: PPUSH
10556: LD_INT 22
10558: PUSH
10559: LD_INT 1
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PPUSH
10566: CALL_OW 69
10570: PPUSH
10571: LD_VAR 0 9
10575: PUSH
10576: LD_INT 1
10578: ARRAY
10579: PPUSH
10580: CALL_OW 74
10584: PPUSH
10585: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10589: LD_ADDR_VAR 0 8
10593: PUSH
10594: LD_VAR 0 8
10598: PPUSH
10599: LD_INT 50
10601: PUSH
10602: EMPTY
10603: LIST
10604: PPUSH
10605: CALL_OW 72
10609: ST_TO_ADDR
// until not units ;
10610: LD_VAR 0 8
10614: NOT
10615: IFFALSE 10391
// end ;
10617: LD_VAR 0 1
10621: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10622: LD_INT 0
10624: PPUSH
10625: PPUSH
10626: PPUSH
10627: PPUSH
10628: PPUSH
10629: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10630: LD_ADDR_VAR 0 6
10634: PUSH
10635: LD_INT 22
10637: PUSH
10638: LD_INT 3
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 120
10647: PUSH
10648: LD_INT 10
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PPUSH
10659: CALL_OW 69
10663: ST_TO_ADDR
// if not units then
10664: LD_VAR 0 6
10668: NOT
10669: IFFALSE 10673
// exit ;
10671: GO 10804
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10673: LD_ADDR_VAR 0 4
10677: PUSH
10678: LD_INT 80
10680: PUSH
10681: LD_INT 60
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: LD_INT 54
10690: PUSH
10691: LD_INT 57
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 55
10700: PUSH
10701: LD_INT 74
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 61
10710: PUSH
10711: LD_INT 85
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10724: LD_INT 35
10726: PPUSH
10727: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10731: LD_ADDR_VAR 0 5
10735: PUSH
10736: LD_VAR 0 6
10740: PPUSH
10741: LD_INT 21
10743: PUSH
10744: LD_INT 2
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PPUSH
10751: CALL_OW 72
10755: ST_TO_ADDR
// if vehicles then
10756: LD_VAR 0 5
10760: IFFALSE 10776
// AgressiveMove ( vehicles , path ) ;
10762: LD_VAR 0 5
10766: PPUSH
10767: LD_VAR 0 4
10771: PPUSH
10772: CALL 72188 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10776: LD_ADDR_VAR 0 6
10780: PUSH
10781: LD_VAR 0 6
10785: PPUSH
10786: LD_INT 50
10788: PUSH
10789: EMPTY
10790: LIST
10791: PPUSH
10792: CALL_OW 72
10796: ST_TO_ADDR
// until not units ;
10797: LD_VAR 0 6
10801: NOT
10802: IFFALSE 10724
// end ; end_of_file
10804: LD_VAR 0 1
10808: RET
// every 0 0$01 do var i , cratesSpawned ;
10809: GO 10811
10811: DISABLE
10812: LD_INT 0
10814: PPUSH
10815: PPUSH
// begin cratesSpawned := 0 ;
10816: LD_ADDR_VAR 0 2
10820: PUSH
10821: LD_INT 0
10823: ST_TO_ADDR
// for i := 1 to 6 do
10824: LD_ADDR_VAR 0 1
10828: PUSH
10829: DOUBLE
10830: LD_INT 1
10832: DEC
10833: ST_TO_ADDR
10834: LD_INT 6
10836: PUSH
10837: FOR_TO
10838: IFFALSE 10863
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10840: LD_INT 2
10842: PPUSH
10843: LD_INT 5
10845: PPUSH
10846: CALL_OW 12
10850: PPUSH
10851: LD_INT 17
10853: PPUSH
10854: LD_INT 0
10856: PPUSH
10857: CALL_OW 55
10861: GO 10837
10863: POP
10864: POP
// wait ( 0 0$20 ) ;
10865: LD_INT 700
10867: PPUSH
10868: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10872: LD_INT 280
10874: PPUSH
10875: CALL_OW 67
// if cratesSpawned < 12 then
10879: LD_VAR 0 2
10883: PUSH
10884: LD_INT 12
10886: LESS
10887: IFFALSE 10939
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10889: LD_INT 105
10891: PPUSH
10892: LD_INT 350
10894: PPUSH
10895: CALL_OW 12
10899: PPUSH
10900: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10904: LD_INT 3
10906: PPUSH
10907: LD_INT 5
10909: PPUSH
10910: CALL_OW 12
10914: PPUSH
10915: LD_INT 13
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10925: LD_ADDR_VAR 0 2
10929: PUSH
10930: LD_VAR 0 2
10934: PUSH
10935: LD_INT 1
10937: PLUS
10938: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10939: LD_VAR 0 2
10943: PUSH
10944: LD_INT 12
10946: GREATEREQUAL
10947: PUSH
10948: LD_VAR 0 2
10952: PUSH
10953: LD_INT 32
10955: LESS
10956: AND
10957: IFFALSE 11009
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10959: LD_INT 420
10961: PPUSH
10962: LD_INT 700
10964: PPUSH
10965: CALL_OW 12
10969: PPUSH
10970: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10974: LD_INT 3
10976: PPUSH
10977: LD_INT 5
10979: PPUSH
10980: CALL_OW 12
10984: PPUSH
10985: LD_INT 13
10987: PPUSH
10988: LD_INT 1
10990: PPUSH
10991: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10995: LD_ADDR_VAR 0 2
10999: PUSH
11000: LD_VAR 0 2
11004: PUSH
11005: LD_INT 1
11007: PLUS
11008: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
11009: LD_VAR 0 2
11013: PUSH
11014: LD_INT 32
11016: GREATEREQUAL
11017: IFFALSE 11091
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
11019: LD_INT 13
11021: PPUSH
11022: CALL_OW 435
11026: PUSH
11027: LD_INT 14
11029: LESS
11030: IFFALSE 11041
// wait ( 0 0$20 ) else
11032: LD_INT 700
11034: PPUSH
11035: CALL_OW 67
11039: GO 11056
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
11041: LD_INT 1750
11043: PPUSH
11044: LD_INT 3150
11046: PPUSH
11047: CALL_OW 12
11051: PPUSH
11052: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
11056: LD_INT 2
11058: PPUSH
11059: LD_INT 5
11061: PPUSH
11062: CALL_OW 12
11066: PPUSH
11067: LD_INT 13
11069: PPUSH
11070: LD_INT 1
11072: PPUSH
11073: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11077: LD_ADDR_VAR 0 2
11081: PUSH
11082: LD_VAR 0 2
11086: PUSH
11087: LD_INT 1
11089: PLUS
11090: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
11091: LD_VAR 0 2
11095: PUSH
11096: LD_INT 120
11098: GREATEREQUAL
11099: IFFALSE 11173
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
11101: LD_INT 13
11103: PPUSH
11104: CALL_OW 435
11108: PUSH
11109: LD_INT 14
11111: LESS
11112: IFFALSE 11123
// wait ( 0 0$40 ) else
11114: LD_INT 1400
11116: PPUSH
11117: CALL_OW 67
11121: GO 11138
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
11123: LD_INT 2450
11125: PPUSH
11126: LD_INT 3850
11128: PPUSH
11129: CALL_OW 12
11133: PPUSH
11134: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11138: LD_INT 1
11140: PPUSH
11141: LD_INT 5
11143: PPUSH
11144: CALL_OW 12
11148: PPUSH
11149: LD_INT 13
11151: PPUSH
11152: LD_INT 1
11154: PPUSH
11155: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11159: LD_ADDR_VAR 0 2
11163: PUSH
11164: LD_VAR 0 2
11168: PUSH
11169: LD_INT 1
11171: PLUS
11172: ST_TO_ADDR
// end ; until false ;
11173: LD_INT 0
11175: IFFALSE 10872
// end ; end_of_file end_of_file
11177: PPOPN 2
11179: END
// export globalGameSaveCounter ; every 0 0$1 do
11180: GO 11182
11182: DISABLE
// begin enable ;
11183: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11184: LD_STRING updateTimer(
11186: PUSH
11187: LD_OWVAR 1
11191: STR
11192: PUSH
11193: LD_STRING );
11195: STR
11196: PPUSH
11197: CALL_OW 559
// end ;
11201: END
// every 0 0$1 do
11202: GO 11204
11204: DISABLE
// begin globalGameSaveCounter := 0 ;
11205: LD_ADDR_EXP 47
11209: PUSH
11210: LD_INT 0
11212: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11213: LD_STRING setGameSaveCounter(0)
11215: PPUSH
11216: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11220: LD_STRING initStreamRollete();
11222: PPUSH
11223: CALL_OW 559
// InitStreamMode ;
11227: CALL 12570 0 0
// DefineStreamItems ( false ) ;
11231: LD_INT 0
11233: PPUSH
11234: CALL 13034 0 1
// end ;
11238: END
// export function SOS_MapStart ( ) ; begin
11239: LD_INT 0
11241: PPUSH
// if streamModeActive then
11242: LD_EXP 48
11246: IFFALSE 11255
// DefineStreamItems ( true ) ;
11248: LD_INT 1
11250: PPUSH
11251: CALL 13034 0 1
// UpdateLuaVariables ( ) ;
11255: CALL 11272 0 0
// UpdateFactoryWaypoints ( ) ;
11259: CALL 25903 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11263: CALL 26160 0 0
// end ;
11267: LD_VAR 0 1
11271: RET
// function UpdateLuaVariables ( ) ; begin
11272: LD_INT 0
11274: PPUSH
// if globalGameSaveCounter then
11275: LD_EXP 47
11279: IFFALSE 11313
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11281: LD_ADDR_EXP 47
11285: PUSH
11286: LD_EXP 47
11290: PPUSH
11291: CALL 70945 0 1
11295: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11296: LD_STRING setGameSaveCounter(
11298: PUSH
11299: LD_EXP 47
11303: STR
11304: PUSH
11305: LD_STRING )
11307: STR
11308: PPUSH
11309: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11313: LD_STRING setGameDifficulty(
11315: PUSH
11316: LD_OWVAR 67
11320: STR
11321: PUSH
11322: LD_STRING )
11324: STR
11325: PPUSH
11326: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11330: LD_STRING displayDifficulty(
11332: PUSH
11333: LD_OWVAR 67
11337: STR
11338: PUSH
11339: LD_STRING )
11341: STR
11342: PPUSH
11343: CALL_OW 559
// end ;
11347: LD_VAR 0 1
11351: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11352: LD_INT 0
11354: PPUSH
// if p2 = stream_mode then
11355: LD_VAR 0 2
11359: PUSH
11360: LD_INT 100
11362: EQUAL
11363: IFFALSE 12366
// begin if not StreamModeActive then
11365: LD_EXP 48
11369: NOT
11370: IFFALSE 11380
// StreamModeActive := true ;
11372: LD_ADDR_EXP 48
11376: PUSH
11377: LD_INT 1
11379: ST_TO_ADDR
// if p3 = 0 then
11380: LD_VAR 0 3
11384: PUSH
11385: LD_INT 0
11387: EQUAL
11388: IFFALSE 11394
// InitStreamMode ;
11390: CALL 12570 0 0
// if p3 = 1 then
11394: LD_VAR 0 3
11398: PUSH
11399: LD_INT 1
11401: EQUAL
11402: IFFALSE 11412
// sRocket := true ;
11404: LD_ADDR_EXP 53
11408: PUSH
11409: LD_INT 1
11411: ST_TO_ADDR
// if p3 = 2 then
11412: LD_VAR 0 3
11416: PUSH
11417: LD_INT 2
11419: EQUAL
11420: IFFALSE 11430
// sSpeed := true ;
11422: LD_ADDR_EXP 52
11426: PUSH
11427: LD_INT 1
11429: ST_TO_ADDR
// if p3 = 3 then
11430: LD_VAR 0 3
11434: PUSH
11435: LD_INT 3
11437: EQUAL
11438: IFFALSE 11448
// sEngine := true ;
11440: LD_ADDR_EXP 54
11444: PUSH
11445: LD_INT 1
11447: ST_TO_ADDR
// if p3 = 4 then
11448: LD_VAR 0 3
11452: PUSH
11453: LD_INT 4
11455: EQUAL
11456: IFFALSE 11466
// sSpec := true ;
11458: LD_ADDR_EXP 51
11462: PUSH
11463: LD_INT 1
11465: ST_TO_ADDR
// if p3 = 5 then
11466: LD_VAR 0 3
11470: PUSH
11471: LD_INT 5
11473: EQUAL
11474: IFFALSE 11484
// sLevel := true ;
11476: LD_ADDR_EXP 55
11480: PUSH
11481: LD_INT 1
11483: ST_TO_ADDR
// if p3 = 6 then
11484: LD_VAR 0 3
11488: PUSH
11489: LD_INT 6
11491: EQUAL
11492: IFFALSE 11502
// sArmoury := true ;
11494: LD_ADDR_EXP 56
11498: PUSH
11499: LD_INT 1
11501: ST_TO_ADDR
// if p3 = 7 then
11502: LD_VAR 0 3
11506: PUSH
11507: LD_INT 7
11509: EQUAL
11510: IFFALSE 11520
// sRadar := true ;
11512: LD_ADDR_EXP 57
11516: PUSH
11517: LD_INT 1
11519: ST_TO_ADDR
// if p3 = 8 then
11520: LD_VAR 0 3
11524: PUSH
11525: LD_INT 8
11527: EQUAL
11528: IFFALSE 11538
// sBunker := true ;
11530: LD_ADDR_EXP 58
11534: PUSH
11535: LD_INT 1
11537: ST_TO_ADDR
// if p3 = 9 then
11538: LD_VAR 0 3
11542: PUSH
11543: LD_INT 9
11545: EQUAL
11546: IFFALSE 11556
// sHack := true ;
11548: LD_ADDR_EXP 59
11552: PUSH
11553: LD_INT 1
11555: ST_TO_ADDR
// if p3 = 10 then
11556: LD_VAR 0 3
11560: PUSH
11561: LD_INT 10
11563: EQUAL
11564: IFFALSE 11574
// sFire := true ;
11566: LD_ADDR_EXP 60
11570: PUSH
11571: LD_INT 1
11573: ST_TO_ADDR
// if p3 = 11 then
11574: LD_VAR 0 3
11578: PUSH
11579: LD_INT 11
11581: EQUAL
11582: IFFALSE 11592
// sRefresh := true ;
11584: LD_ADDR_EXP 61
11588: PUSH
11589: LD_INT 1
11591: ST_TO_ADDR
// if p3 = 12 then
11592: LD_VAR 0 3
11596: PUSH
11597: LD_INT 12
11599: EQUAL
11600: IFFALSE 11610
// sExp := true ;
11602: LD_ADDR_EXP 62
11606: PUSH
11607: LD_INT 1
11609: ST_TO_ADDR
// if p3 = 13 then
11610: LD_VAR 0 3
11614: PUSH
11615: LD_INT 13
11617: EQUAL
11618: IFFALSE 11628
// sDepot := true ;
11620: LD_ADDR_EXP 63
11624: PUSH
11625: LD_INT 1
11627: ST_TO_ADDR
// if p3 = 14 then
11628: LD_VAR 0 3
11632: PUSH
11633: LD_INT 14
11635: EQUAL
11636: IFFALSE 11646
// sFlag := true ;
11638: LD_ADDR_EXP 64
11642: PUSH
11643: LD_INT 1
11645: ST_TO_ADDR
// if p3 = 15 then
11646: LD_VAR 0 3
11650: PUSH
11651: LD_INT 15
11653: EQUAL
11654: IFFALSE 11664
// sKamikadze := true ;
11656: LD_ADDR_EXP 72
11660: PUSH
11661: LD_INT 1
11663: ST_TO_ADDR
// if p3 = 16 then
11664: LD_VAR 0 3
11668: PUSH
11669: LD_INT 16
11671: EQUAL
11672: IFFALSE 11682
// sTroll := true ;
11674: LD_ADDR_EXP 73
11678: PUSH
11679: LD_INT 1
11681: ST_TO_ADDR
// if p3 = 17 then
11682: LD_VAR 0 3
11686: PUSH
11687: LD_INT 17
11689: EQUAL
11690: IFFALSE 11700
// sSlow := true ;
11692: LD_ADDR_EXP 74
11696: PUSH
11697: LD_INT 1
11699: ST_TO_ADDR
// if p3 = 18 then
11700: LD_VAR 0 3
11704: PUSH
11705: LD_INT 18
11707: EQUAL
11708: IFFALSE 11718
// sLack := true ;
11710: LD_ADDR_EXP 75
11714: PUSH
11715: LD_INT 1
11717: ST_TO_ADDR
// if p3 = 19 then
11718: LD_VAR 0 3
11722: PUSH
11723: LD_INT 19
11725: EQUAL
11726: IFFALSE 11736
// sTank := true ;
11728: LD_ADDR_EXP 77
11732: PUSH
11733: LD_INT 1
11735: ST_TO_ADDR
// if p3 = 20 then
11736: LD_VAR 0 3
11740: PUSH
11741: LD_INT 20
11743: EQUAL
11744: IFFALSE 11754
// sRemote := true ;
11746: LD_ADDR_EXP 78
11750: PUSH
11751: LD_INT 1
11753: ST_TO_ADDR
// if p3 = 21 then
11754: LD_VAR 0 3
11758: PUSH
11759: LD_INT 21
11761: EQUAL
11762: IFFALSE 11772
// sPowell := true ;
11764: LD_ADDR_EXP 79
11768: PUSH
11769: LD_INT 1
11771: ST_TO_ADDR
// if p3 = 22 then
11772: LD_VAR 0 3
11776: PUSH
11777: LD_INT 22
11779: EQUAL
11780: IFFALSE 11790
// sTeleport := true ;
11782: LD_ADDR_EXP 82
11786: PUSH
11787: LD_INT 1
11789: ST_TO_ADDR
// if p3 = 23 then
11790: LD_VAR 0 3
11794: PUSH
11795: LD_INT 23
11797: EQUAL
11798: IFFALSE 11808
// sOilTower := true ;
11800: LD_ADDR_EXP 84
11804: PUSH
11805: LD_INT 1
11807: ST_TO_ADDR
// if p3 = 24 then
11808: LD_VAR 0 3
11812: PUSH
11813: LD_INT 24
11815: EQUAL
11816: IFFALSE 11826
// sShovel := true ;
11818: LD_ADDR_EXP 85
11822: PUSH
11823: LD_INT 1
11825: ST_TO_ADDR
// if p3 = 25 then
11826: LD_VAR 0 3
11830: PUSH
11831: LD_INT 25
11833: EQUAL
11834: IFFALSE 11844
// sSheik := true ;
11836: LD_ADDR_EXP 86
11840: PUSH
11841: LD_INT 1
11843: ST_TO_ADDR
// if p3 = 26 then
11844: LD_VAR 0 3
11848: PUSH
11849: LD_INT 26
11851: EQUAL
11852: IFFALSE 11862
// sEarthquake := true ;
11854: LD_ADDR_EXP 88
11858: PUSH
11859: LD_INT 1
11861: ST_TO_ADDR
// if p3 = 27 then
11862: LD_VAR 0 3
11866: PUSH
11867: LD_INT 27
11869: EQUAL
11870: IFFALSE 11880
// sAI := true ;
11872: LD_ADDR_EXP 89
11876: PUSH
11877: LD_INT 1
11879: ST_TO_ADDR
// if p3 = 28 then
11880: LD_VAR 0 3
11884: PUSH
11885: LD_INT 28
11887: EQUAL
11888: IFFALSE 11898
// sCargo := true ;
11890: LD_ADDR_EXP 92
11894: PUSH
11895: LD_INT 1
11897: ST_TO_ADDR
// if p3 = 29 then
11898: LD_VAR 0 3
11902: PUSH
11903: LD_INT 29
11905: EQUAL
11906: IFFALSE 11916
// sDLaser := true ;
11908: LD_ADDR_EXP 93
11912: PUSH
11913: LD_INT 1
11915: ST_TO_ADDR
// if p3 = 30 then
11916: LD_VAR 0 3
11920: PUSH
11921: LD_INT 30
11923: EQUAL
11924: IFFALSE 11934
// sExchange := true ;
11926: LD_ADDR_EXP 94
11930: PUSH
11931: LD_INT 1
11933: ST_TO_ADDR
// if p3 = 31 then
11934: LD_VAR 0 3
11938: PUSH
11939: LD_INT 31
11941: EQUAL
11942: IFFALSE 11952
// sFac := true ;
11944: LD_ADDR_EXP 95
11948: PUSH
11949: LD_INT 1
11951: ST_TO_ADDR
// if p3 = 32 then
11952: LD_VAR 0 3
11956: PUSH
11957: LD_INT 32
11959: EQUAL
11960: IFFALSE 11970
// sPower := true ;
11962: LD_ADDR_EXP 96
11966: PUSH
11967: LD_INT 1
11969: ST_TO_ADDR
// if p3 = 33 then
11970: LD_VAR 0 3
11974: PUSH
11975: LD_INT 33
11977: EQUAL
11978: IFFALSE 11988
// sRandom := true ;
11980: LD_ADDR_EXP 97
11984: PUSH
11985: LD_INT 1
11987: ST_TO_ADDR
// if p3 = 34 then
11988: LD_VAR 0 3
11992: PUSH
11993: LD_INT 34
11995: EQUAL
11996: IFFALSE 12006
// sShield := true ;
11998: LD_ADDR_EXP 98
12002: PUSH
12003: LD_INT 1
12005: ST_TO_ADDR
// if p3 = 35 then
12006: LD_VAR 0 3
12010: PUSH
12011: LD_INT 35
12013: EQUAL
12014: IFFALSE 12024
// sTime := true ;
12016: LD_ADDR_EXP 99
12020: PUSH
12021: LD_INT 1
12023: ST_TO_ADDR
// if p3 = 36 then
12024: LD_VAR 0 3
12028: PUSH
12029: LD_INT 36
12031: EQUAL
12032: IFFALSE 12042
// sTools := true ;
12034: LD_ADDR_EXP 100
12038: PUSH
12039: LD_INT 1
12041: ST_TO_ADDR
// if p3 = 101 then
12042: LD_VAR 0 3
12046: PUSH
12047: LD_INT 101
12049: EQUAL
12050: IFFALSE 12060
// sSold := true ;
12052: LD_ADDR_EXP 65
12056: PUSH
12057: LD_INT 1
12059: ST_TO_ADDR
// if p3 = 102 then
12060: LD_VAR 0 3
12064: PUSH
12065: LD_INT 102
12067: EQUAL
12068: IFFALSE 12078
// sDiff := true ;
12070: LD_ADDR_EXP 66
12074: PUSH
12075: LD_INT 1
12077: ST_TO_ADDR
// if p3 = 103 then
12078: LD_VAR 0 3
12082: PUSH
12083: LD_INT 103
12085: EQUAL
12086: IFFALSE 12096
// sFog := true ;
12088: LD_ADDR_EXP 69
12092: PUSH
12093: LD_INT 1
12095: ST_TO_ADDR
// if p3 = 104 then
12096: LD_VAR 0 3
12100: PUSH
12101: LD_INT 104
12103: EQUAL
12104: IFFALSE 12114
// sReset := true ;
12106: LD_ADDR_EXP 70
12110: PUSH
12111: LD_INT 1
12113: ST_TO_ADDR
// if p3 = 105 then
12114: LD_VAR 0 3
12118: PUSH
12119: LD_INT 105
12121: EQUAL
12122: IFFALSE 12132
// sSun := true ;
12124: LD_ADDR_EXP 71
12128: PUSH
12129: LD_INT 1
12131: ST_TO_ADDR
// if p3 = 106 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 106
12139: EQUAL
12140: IFFALSE 12150
// sTiger := true ;
12142: LD_ADDR_EXP 67
12146: PUSH
12147: LD_INT 1
12149: ST_TO_ADDR
// if p3 = 107 then
12150: LD_VAR 0 3
12154: PUSH
12155: LD_INT 107
12157: EQUAL
12158: IFFALSE 12168
// sBomb := true ;
12160: LD_ADDR_EXP 68
12164: PUSH
12165: LD_INT 1
12167: ST_TO_ADDR
// if p3 = 108 then
12168: LD_VAR 0 3
12172: PUSH
12173: LD_INT 108
12175: EQUAL
12176: IFFALSE 12186
// sWound := true ;
12178: LD_ADDR_EXP 76
12182: PUSH
12183: LD_INT 1
12185: ST_TO_ADDR
// if p3 = 109 then
12186: LD_VAR 0 3
12190: PUSH
12191: LD_INT 109
12193: EQUAL
12194: IFFALSE 12204
// sBetray := true ;
12196: LD_ADDR_EXP 80
12200: PUSH
12201: LD_INT 1
12203: ST_TO_ADDR
// if p3 = 110 then
12204: LD_VAR 0 3
12208: PUSH
12209: LD_INT 110
12211: EQUAL
12212: IFFALSE 12222
// sContamin := true ;
12214: LD_ADDR_EXP 81
12218: PUSH
12219: LD_INT 1
12221: ST_TO_ADDR
// if p3 = 111 then
12222: LD_VAR 0 3
12226: PUSH
12227: LD_INT 111
12229: EQUAL
12230: IFFALSE 12240
// sOil := true ;
12232: LD_ADDR_EXP 83
12236: PUSH
12237: LD_INT 1
12239: ST_TO_ADDR
// if p3 = 112 then
12240: LD_VAR 0 3
12244: PUSH
12245: LD_INT 112
12247: EQUAL
12248: IFFALSE 12258
// sStu := true ;
12250: LD_ADDR_EXP 87
12254: PUSH
12255: LD_INT 1
12257: ST_TO_ADDR
// if p3 = 113 then
12258: LD_VAR 0 3
12262: PUSH
12263: LD_INT 113
12265: EQUAL
12266: IFFALSE 12276
// sBazooka := true ;
12268: LD_ADDR_EXP 90
12272: PUSH
12273: LD_INT 1
12275: ST_TO_ADDR
// if p3 = 114 then
12276: LD_VAR 0 3
12280: PUSH
12281: LD_INT 114
12283: EQUAL
12284: IFFALSE 12294
// sMortar := true ;
12286: LD_ADDR_EXP 91
12290: PUSH
12291: LD_INT 1
12293: ST_TO_ADDR
// if p3 = 115 then
12294: LD_VAR 0 3
12298: PUSH
12299: LD_INT 115
12301: EQUAL
12302: IFFALSE 12312
// sRanger := true ;
12304: LD_ADDR_EXP 101
12308: PUSH
12309: LD_INT 1
12311: ST_TO_ADDR
// if p3 = 116 then
12312: LD_VAR 0 3
12316: PUSH
12317: LD_INT 116
12319: EQUAL
12320: IFFALSE 12330
// sComputer := true ;
12322: LD_ADDR_EXP 102
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// if p3 = 117 then
12330: LD_VAR 0 3
12334: PUSH
12335: LD_INT 117
12337: EQUAL
12338: IFFALSE 12348
// s30 := true ;
12340: LD_ADDR_EXP 103
12344: PUSH
12345: LD_INT 1
12347: ST_TO_ADDR
// if p3 = 118 then
12348: LD_VAR 0 3
12352: PUSH
12353: LD_INT 118
12355: EQUAL
12356: IFFALSE 12366
// s60 := true ;
12358: LD_ADDR_EXP 104
12362: PUSH
12363: LD_INT 1
12365: ST_TO_ADDR
// end ; if p2 = hack_mode then
12366: LD_VAR 0 2
12370: PUSH
12371: LD_INT 101
12373: EQUAL
12374: IFFALSE 12502
// begin case p3 of 1 :
12376: LD_VAR 0 3
12380: PUSH
12381: LD_INT 1
12383: DOUBLE
12384: EQUAL
12385: IFTRUE 12389
12387: GO 12396
12389: POP
// hHackUnlimitedResources ; 2 :
12390: CALL 24649 0 0
12394: GO 12502
12396: LD_INT 2
12398: DOUBLE
12399: EQUAL
12400: IFTRUE 12404
12402: GO 12411
12404: POP
// hHackSetLevel10 ; 3 :
12405: CALL 24782 0 0
12409: GO 12502
12411: LD_INT 3
12413: DOUBLE
12414: EQUAL
12415: IFTRUE 12419
12417: GO 12426
12419: POP
// hHackSetLevel10YourUnits ; 4 :
12420: CALL 24867 0 0
12424: GO 12502
12426: LD_INT 4
12428: DOUBLE
12429: EQUAL
12430: IFTRUE 12434
12432: GO 12441
12434: POP
// hHackInvincible ; 5 :
12435: CALL 25315 0 0
12439: GO 12502
12441: LD_INT 5
12443: DOUBLE
12444: EQUAL
12445: IFTRUE 12449
12447: GO 12456
12449: POP
// hHackInvisible ; 6 :
12450: CALL 25426 0 0
12454: GO 12502
12456: LD_INT 6
12458: DOUBLE
12459: EQUAL
12460: IFTRUE 12464
12462: GO 12471
12464: POP
// hHackChangeYourSide ; 7 :
12465: CALL 25483 0 0
12469: GO 12502
12471: LD_INT 7
12473: DOUBLE
12474: EQUAL
12475: IFTRUE 12479
12477: GO 12486
12479: POP
// hHackChangeUnitSide ; 8 :
12480: CALL 25525 0 0
12484: GO 12502
12486: LD_INT 8
12488: DOUBLE
12489: EQUAL
12490: IFTRUE 12494
12492: GO 12501
12494: POP
// hHackFog ; end ;
12495: CALL 25626 0 0
12499: GO 12502
12501: POP
// end ; if p2 = game_save_mode then
12502: LD_VAR 0 2
12506: PUSH
12507: LD_INT 102
12509: EQUAL
12510: IFFALSE 12565
// begin if p3 = 1 then
12512: LD_VAR 0 3
12516: PUSH
12517: LD_INT 1
12519: EQUAL
12520: IFFALSE 12532
// globalGameSaveCounter := p4 ;
12522: LD_ADDR_EXP 47
12526: PUSH
12527: LD_VAR 0 4
12531: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12532: LD_VAR 0 3
12536: PUSH
12537: LD_INT 2
12539: EQUAL
12540: PUSH
12541: LD_EXP 47
12545: AND
12546: IFFALSE 12565
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12548: LD_STRING setGameSaveCounter(
12550: PUSH
12551: LD_EXP 47
12555: STR
12556: PUSH
12557: LD_STRING )
12559: STR
12560: PPUSH
12561: CALL_OW 559
// end ; end ;
12565: LD_VAR 0 7
12569: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12570: LD_INT 0
12572: PPUSH
// streamModeActive := false ;
12573: LD_ADDR_EXP 48
12577: PUSH
12578: LD_INT 0
12580: ST_TO_ADDR
// normalCounter := 36 ;
12581: LD_ADDR_EXP 49
12585: PUSH
12586: LD_INT 36
12588: ST_TO_ADDR
// hardcoreCounter := 18 ;
12589: LD_ADDR_EXP 50
12593: PUSH
12594: LD_INT 18
12596: ST_TO_ADDR
// sRocket := false ;
12597: LD_ADDR_EXP 53
12601: PUSH
12602: LD_INT 0
12604: ST_TO_ADDR
// sSpeed := false ;
12605: LD_ADDR_EXP 52
12609: PUSH
12610: LD_INT 0
12612: ST_TO_ADDR
// sEngine := false ;
12613: LD_ADDR_EXP 54
12617: PUSH
12618: LD_INT 0
12620: ST_TO_ADDR
// sSpec := false ;
12621: LD_ADDR_EXP 51
12625: PUSH
12626: LD_INT 0
12628: ST_TO_ADDR
// sLevel := false ;
12629: LD_ADDR_EXP 55
12633: PUSH
12634: LD_INT 0
12636: ST_TO_ADDR
// sArmoury := false ;
12637: LD_ADDR_EXP 56
12641: PUSH
12642: LD_INT 0
12644: ST_TO_ADDR
// sRadar := false ;
12645: LD_ADDR_EXP 57
12649: PUSH
12650: LD_INT 0
12652: ST_TO_ADDR
// sBunker := false ;
12653: LD_ADDR_EXP 58
12657: PUSH
12658: LD_INT 0
12660: ST_TO_ADDR
// sHack := false ;
12661: LD_ADDR_EXP 59
12665: PUSH
12666: LD_INT 0
12668: ST_TO_ADDR
// sFire := false ;
12669: LD_ADDR_EXP 60
12673: PUSH
12674: LD_INT 0
12676: ST_TO_ADDR
// sRefresh := false ;
12677: LD_ADDR_EXP 61
12681: PUSH
12682: LD_INT 0
12684: ST_TO_ADDR
// sExp := false ;
12685: LD_ADDR_EXP 62
12689: PUSH
12690: LD_INT 0
12692: ST_TO_ADDR
// sDepot := false ;
12693: LD_ADDR_EXP 63
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// sFlag := false ;
12701: LD_ADDR_EXP 64
12705: PUSH
12706: LD_INT 0
12708: ST_TO_ADDR
// sKamikadze := false ;
12709: LD_ADDR_EXP 72
12713: PUSH
12714: LD_INT 0
12716: ST_TO_ADDR
// sTroll := false ;
12717: LD_ADDR_EXP 73
12721: PUSH
12722: LD_INT 0
12724: ST_TO_ADDR
// sSlow := false ;
12725: LD_ADDR_EXP 74
12729: PUSH
12730: LD_INT 0
12732: ST_TO_ADDR
// sLack := false ;
12733: LD_ADDR_EXP 75
12737: PUSH
12738: LD_INT 0
12740: ST_TO_ADDR
// sTank := false ;
12741: LD_ADDR_EXP 77
12745: PUSH
12746: LD_INT 0
12748: ST_TO_ADDR
// sRemote := false ;
12749: LD_ADDR_EXP 78
12753: PUSH
12754: LD_INT 0
12756: ST_TO_ADDR
// sPowell := false ;
12757: LD_ADDR_EXP 79
12761: PUSH
12762: LD_INT 0
12764: ST_TO_ADDR
// sTeleport := false ;
12765: LD_ADDR_EXP 82
12769: PUSH
12770: LD_INT 0
12772: ST_TO_ADDR
// sOilTower := false ;
12773: LD_ADDR_EXP 84
12777: PUSH
12778: LD_INT 0
12780: ST_TO_ADDR
// sShovel := false ;
12781: LD_ADDR_EXP 85
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// sSheik := false ;
12789: LD_ADDR_EXP 86
12793: PUSH
12794: LD_INT 0
12796: ST_TO_ADDR
// sEarthquake := false ;
12797: LD_ADDR_EXP 88
12801: PUSH
12802: LD_INT 0
12804: ST_TO_ADDR
// sAI := false ;
12805: LD_ADDR_EXP 89
12809: PUSH
12810: LD_INT 0
12812: ST_TO_ADDR
// sCargo := false ;
12813: LD_ADDR_EXP 92
12817: PUSH
12818: LD_INT 0
12820: ST_TO_ADDR
// sDLaser := false ;
12821: LD_ADDR_EXP 93
12825: PUSH
12826: LD_INT 0
12828: ST_TO_ADDR
// sExchange := false ;
12829: LD_ADDR_EXP 94
12833: PUSH
12834: LD_INT 0
12836: ST_TO_ADDR
// sFac := false ;
12837: LD_ADDR_EXP 95
12841: PUSH
12842: LD_INT 0
12844: ST_TO_ADDR
// sPower := false ;
12845: LD_ADDR_EXP 96
12849: PUSH
12850: LD_INT 0
12852: ST_TO_ADDR
// sRandom := false ;
12853: LD_ADDR_EXP 97
12857: PUSH
12858: LD_INT 0
12860: ST_TO_ADDR
// sShield := false ;
12861: LD_ADDR_EXP 98
12865: PUSH
12866: LD_INT 0
12868: ST_TO_ADDR
// sTime := false ;
12869: LD_ADDR_EXP 99
12873: PUSH
12874: LD_INT 0
12876: ST_TO_ADDR
// sTools := false ;
12877: LD_ADDR_EXP 100
12881: PUSH
12882: LD_INT 0
12884: ST_TO_ADDR
// sSold := false ;
12885: LD_ADDR_EXP 65
12889: PUSH
12890: LD_INT 0
12892: ST_TO_ADDR
// sDiff := false ;
12893: LD_ADDR_EXP 66
12897: PUSH
12898: LD_INT 0
12900: ST_TO_ADDR
// sFog := false ;
12901: LD_ADDR_EXP 69
12905: PUSH
12906: LD_INT 0
12908: ST_TO_ADDR
// sReset := false ;
12909: LD_ADDR_EXP 70
12913: PUSH
12914: LD_INT 0
12916: ST_TO_ADDR
// sSun := false ;
12917: LD_ADDR_EXP 71
12921: PUSH
12922: LD_INT 0
12924: ST_TO_ADDR
// sTiger := false ;
12925: LD_ADDR_EXP 67
12929: PUSH
12930: LD_INT 0
12932: ST_TO_ADDR
// sBomb := false ;
12933: LD_ADDR_EXP 68
12937: PUSH
12938: LD_INT 0
12940: ST_TO_ADDR
// sWound := false ;
12941: LD_ADDR_EXP 76
12945: PUSH
12946: LD_INT 0
12948: ST_TO_ADDR
// sBetray := false ;
12949: LD_ADDR_EXP 80
12953: PUSH
12954: LD_INT 0
12956: ST_TO_ADDR
// sContamin := false ;
12957: LD_ADDR_EXP 81
12961: PUSH
12962: LD_INT 0
12964: ST_TO_ADDR
// sOil := false ;
12965: LD_ADDR_EXP 83
12969: PUSH
12970: LD_INT 0
12972: ST_TO_ADDR
// sStu := false ;
12973: LD_ADDR_EXP 87
12977: PUSH
12978: LD_INT 0
12980: ST_TO_ADDR
// sBazooka := false ;
12981: LD_ADDR_EXP 90
12985: PUSH
12986: LD_INT 0
12988: ST_TO_ADDR
// sMortar := false ;
12989: LD_ADDR_EXP 91
12993: PUSH
12994: LD_INT 0
12996: ST_TO_ADDR
// sRanger := false ;
12997: LD_ADDR_EXP 101
13001: PUSH
13002: LD_INT 0
13004: ST_TO_ADDR
// sComputer := false ;
13005: LD_ADDR_EXP 102
13009: PUSH
13010: LD_INT 0
13012: ST_TO_ADDR
// s30 := false ;
13013: LD_ADDR_EXP 103
13017: PUSH
13018: LD_INT 0
13020: ST_TO_ADDR
// s60 := false ;
13021: LD_ADDR_EXP 104
13025: PUSH
13026: LD_INT 0
13028: ST_TO_ADDR
// end ;
13029: LD_VAR 0 1
13033: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13034: LD_INT 0
13036: PPUSH
13037: PPUSH
13038: PPUSH
13039: PPUSH
13040: PPUSH
13041: PPUSH
13042: PPUSH
// result := [ ] ;
13043: LD_ADDR_VAR 0 2
13047: PUSH
13048: EMPTY
13049: ST_TO_ADDR
// if campaign_id = 1 then
13050: LD_OWVAR 69
13054: PUSH
13055: LD_INT 1
13057: EQUAL
13058: IFFALSE 16224
// begin case mission_number of 1 :
13060: LD_OWVAR 70
13064: PUSH
13065: LD_INT 1
13067: DOUBLE
13068: EQUAL
13069: IFTRUE 13073
13071: GO 13149
13073: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13074: LD_ADDR_VAR 0 2
13078: PUSH
13079: LD_INT 2
13081: PUSH
13082: LD_INT 4
13084: PUSH
13085: LD_INT 11
13087: PUSH
13088: LD_INT 12
13090: PUSH
13091: LD_INT 15
13093: PUSH
13094: LD_INT 16
13096: PUSH
13097: LD_INT 22
13099: PUSH
13100: LD_INT 23
13102: PUSH
13103: LD_INT 26
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 101
13119: PUSH
13120: LD_INT 102
13122: PUSH
13123: LD_INT 106
13125: PUSH
13126: LD_INT 116
13128: PUSH
13129: LD_INT 117
13131: PUSH
13132: LD_INT 118
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: ST_TO_ADDR
13147: GO 16222
13149: LD_INT 2
13151: DOUBLE
13152: EQUAL
13153: IFTRUE 13157
13155: GO 13241
13157: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13158: LD_ADDR_VAR 0 2
13162: PUSH
13163: LD_INT 2
13165: PUSH
13166: LD_INT 4
13168: PUSH
13169: LD_INT 11
13171: PUSH
13172: LD_INT 12
13174: PUSH
13175: LD_INT 15
13177: PUSH
13178: LD_INT 16
13180: PUSH
13181: LD_INT 22
13183: PUSH
13184: LD_INT 23
13186: PUSH
13187: LD_INT 26
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: PUSH
13201: LD_INT 101
13203: PUSH
13204: LD_INT 102
13206: PUSH
13207: LD_INT 105
13209: PUSH
13210: LD_INT 106
13212: PUSH
13213: LD_INT 108
13215: PUSH
13216: LD_INT 116
13218: PUSH
13219: LD_INT 117
13221: PUSH
13222: LD_INT 118
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: ST_TO_ADDR
13239: GO 16222
13241: LD_INT 3
13243: DOUBLE
13244: EQUAL
13245: IFTRUE 13249
13247: GO 13337
13249: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13250: LD_ADDR_VAR 0 2
13254: PUSH
13255: LD_INT 2
13257: PUSH
13258: LD_INT 4
13260: PUSH
13261: LD_INT 5
13263: PUSH
13264: LD_INT 11
13266: PUSH
13267: LD_INT 12
13269: PUSH
13270: LD_INT 15
13272: PUSH
13273: LD_INT 16
13275: PUSH
13276: LD_INT 22
13278: PUSH
13279: LD_INT 26
13281: PUSH
13282: LD_INT 36
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 101
13299: PUSH
13300: LD_INT 102
13302: PUSH
13303: LD_INT 105
13305: PUSH
13306: LD_INT 106
13308: PUSH
13309: LD_INT 108
13311: PUSH
13312: LD_INT 116
13314: PUSH
13315: LD_INT 117
13317: PUSH
13318: LD_INT 118
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: ST_TO_ADDR
13335: GO 16222
13337: LD_INT 4
13339: DOUBLE
13340: EQUAL
13341: IFTRUE 13345
13343: GO 13441
13345: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13346: LD_ADDR_VAR 0 2
13350: PUSH
13351: LD_INT 2
13353: PUSH
13354: LD_INT 4
13356: PUSH
13357: LD_INT 5
13359: PUSH
13360: LD_INT 8
13362: PUSH
13363: LD_INT 11
13365: PUSH
13366: LD_INT 12
13368: PUSH
13369: LD_INT 15
13371: PUSH
13372: LD_INT 16
13374: PUSH
13375: LD_INT 22
13377: PUSH
13378: LD_INT 23
13380: PUSH
13381: LD_INT 26
13383: PUSH
13384: LD_INT 36
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 101
13403: PUSH
13404: LD_INT 102
13406: PUSH
13407: LD_INT 105
13409: PUSH
13410: LD_INT 106
13412: PUSH
13413: LD_INT 108
13415: PUSH
13416: LD_INT 116
13418: PUSH
13419: LD_INT 117
13421: PUSH
13422: LD_INT 118
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: ST_TO_ADDR
13439: GO 16222
13441: LD_INT 5
13443: DOUBLE
13444: EQUAL
13445: IFTRUE 13449
13447: GO 13561
13449: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13450: LD_ADDR_VAR 0 2
13454: PUSH
13455: LD_INT 2
13457: PUSH
13458: LD_INT 4
13460: PUSH
13461: LD_INT 5
13463: PUSH
13464: LD_INT 6
13466: PUSH
13467: LD_INT 8
13469: PUSH
13470: LD_INT 11
13472: PUSH
13473: LD_INT 12
13475: PUSH
13476: LD_INT 15
13478: PUSH
13479: LD_INT 16
13481: PUSH
13482: LD_INT 22
13484: PUSH
13485: LD_INT 23
13487: PUSH
13488: LD_INT 25
13490: PUSH
13491: LD_INT 26
13493: PUSH
13494: LD_INT 36
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 101
13515: PUSH
13516: LD_INT 102
13518: PUSH
13519: LD_INT 105
13521: PUSH
13522: LD_INT 106
13524: PUSH
13525: LD_INT 108
13527: PUSH
13528: LD_INT 109
13530: PUSH
13531: LD_INT 112
13533: PUSH
13534: LD_INT 116
13536: PUSH
13537: LD_INT 117
13539: PUSH
13540: LD_INT 118
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: ST_TO_ADDR
13559: GO 16222
13561: LD_INT 6
13563: DOUBLE
13564: EQUAL
13565: IFTRUE 13569
13567: GO 13701
13569: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13570: LD_ADDR_VAR 0 2
13574: PUSH
13575: LD_INT 2
13577: PUSH
13578: LD_INT 4
13580: PUSH
13581: LD_INT 5
13583: PUSH
13584: LD_INT 6
13586: PUSH
13587: LD_INT 8
13589: PUSH
13590: LD_INT 11
13592: PUSH
13593: LD_INT 12
13595: PUSH
13596: LD_INT 15
13598: PUSH
13599: LD_INT 16
13601: PUSH
13602: LD_INT 20
13604: PUSH
13605: LD_INT 21
13607: PUSH
13608: LD_INT 22
13610: PUSH
13611: LD_INT 23
13613: PUSH
13614: LD_INT 25
13616: PUSH
13617: LD_INT 26
13619: PUSH
13620: LD_INT 30
13622: PUSH
13623: LD_INT 31
13625: PUSH
13626: LD_INT 32
13628: PUSH
13629: LD_INT 36
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 101
13655: PUSH
13656: LD_INT 102
13658: PUSH
13659: LD_INT 105
13661: PUSH
13662: LD_INT 106
13664: PUSH
13665: LD_INT 108
13667: PUSH
13668: LD_INT 109
13670: PUSH
13671: LD_INT 112
13673: PUSH
13674: LD_INT 116
13676: PUSH
13677: LD_INT 117
13679: PUSH
13680: LD_INT 118
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: ST_TO_ADDR
13699: GO 16222
13701: LD_INT 7
13703: DOUBLE
13704: EQUAL
13705: IFTRUE 13709
13707: GO 13821
13709: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13710: LD_ADDR_VAR 0 2
13714: PUSH
13715: LD_INT 2
13717: PUSH
13718: LD_INT 4
13720: PUSH
13721: LD_INT 5
13723: PUSH
13724: LD_INT 7
13726: PUSH
13727: LD_INT 11
13729: PUSH
13730: LD_INT 12
13732: PUSH
13733: LD_INT 15
13735: PUSH
13736: LD_INT 16
13738: PUSH
13739: LD_INT 20
13741: PUSH
13742: LD_INT 21
13744: PUSH
13745: LD_INT 22
13747: PUSH
13748: LD_INT 23
13750: PUSH
13751: LD_INT 25
13753: PUSH
13754: LD_INT 26
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 101
13775: PUSH
13776: LD_INT 102
13778: PUSH
13779: LD_INT 103
13781: PUSH
13782: LD_INT 105
13784: PUSH
13785: LD_INT 106
13787: PUSH
13788: LD_INT 108
13790: PUSH
13791: LD_INT 112
13793: PUSH
13794: LD_INT 116
13796: PUSH
13797: LD_INT 117
13799: PUSH
13800: LD_INT 118
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: ST_TO_ADDR
13819: GO 16222
13821: LD_INT 8
13823: DOUBLE
13824: EQUAL
13825: IFTRUE 13829
13827: GO 13969
13829: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13830: LD_ADDR_VAR 0 2
13834: PUSH
13835: LD_INT 2
13837: PUSH
13838: LD_INT 4
13840: PUSH
13841: LD_INT 5
13843: PUSH
13844: LD_INT 6
13846: PUSH
13847: LD_INT 7
13849: PUSH
13850: LD_INT 8
13852: PUSH
13853: LD_INT 11
13855: PUSH
13856: LD_INT 12
13858: PUSH
13859: LD_INT 15
13861: PUSH
13862: LD_INT 16
13864: PUSH
13865: LD_INT 20
13867: PUSH
13868: LD_INT 21
13870: PUSH
13871: LD_INT 22
13873: PUSH
13874: LD_INT 23
13876: PUSH
13877: LD_INT 25
13879: PUSH
13880: LD_INT 26
13882: PUSH
13883: LD_INT 30
13885: PUSH
13886: LD_INT 31
13888: PUSH
13889: LD_INT 32
13891: PUSH
13892: LD_INT 36
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 101
13919: PUSH
13920: LD_INT 102
13922: PUSH
13923: LD_INT 103
13925: PUSH
13926: LD_INT 105
13928: PUSH
13929: LD_INT 106
13931: PUSH
13932: LD_INT 108
13934: PUSH
13935: LD_INT 109
13937: PUSH
13938: LD_INT 112
13940: PUSH
13941: LD_INT 116
13943: PUSH
13944: LD_INT 117
13946: PUSH
13947: LD_INT 118
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: ST_TO_ADDR
13967: GO 16222
13969: LD_INT 9
13971: DOUBLE
13972: EQUAL
13973: IFTRUE 13977
13975: GO 14125
13977: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13978: LD_ADDR_VAR 0 2
13982: PUSH
13983: LD_INT 2
13985: PUSH
13986: LD_INT 4
13988: PUSH
13989: LD_INT 5
13991: PUSH
13992: LD_INT 6
13994: PUSH
13995: LD_INT 7
13997: PUSH
13998: LD_INT 8
14000: PUSH
14001: LD_INT 11
14003: PUSH
14004: LD_INT 12
14006: PUSH
14007: LD_INT 15
14009: PUSH
14010: LD_INT 16
14012: PUSH
14013: LD_INT 20
14015: PUSH
14016: LD_INT 21
14018: PUSH
14019: LD_INT 22
14021: PUSH
14022: LD_INT 23
14024: PUSH
14025: LD_INT 25
14027: PUSH
14028: LD_INT 26
14030: PUSH
14031: LD_INT 28
14033: PUSH
14034: LD_INT 30
14036: PUSH
14037: LD_INT 31
14039: PUSH
14040: LD_INT 32
14042: PUSH
14043: LD_INT 36
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 101
14071: PUSH
14072: LD_INT 102
14074: PUSH
14075: LD_INT 103
14077: PUSH
14078: LD_INT 105
14080: PUSH
14081: LD_INT 106
14083: PUSH
14084: LD_INT 108
14086: PUSH
14087: LD_INT 109
14089: PUSH
14090: LD_INT 112
14092: PUSH
14093: LD_INT 114
14095: PUSH
14096: LD_INT 116
14098: PUSH
14099: LD_INT 117
14101: PUSH
14102: LD_INT 118
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: ST_TO_ADDR
14123: GO 16222
14125: LD_INT 10
14127: DOUBLE
14128: EQUAL
14129: IFTRUE 14133
14131: GO 14329
14133: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14134: LD_ADDR_VAR 0 2
14138: PUSH
14139: LD_INT 2
14141: PUSH
14142: LD_INT 4
14144: PUSH
14145: LD_INT 5
14147: PUSH
14148: LD_INT 6
14150: PUSH
14151: LD_INT 7
14153: PUSH
14154: LD_INT 8
14156: PUSH
14157: LD_INT 9
14159: PUSH
14160: LD_INT 10
14162: PUSH
14163: LD_INT 11
14165: PUSH
14166: LD_INT 12
14168: PUSH
14169: LD_INT 13
14171: PUSH
14172: LD_INT 14
14174: PUSH
14175: LD_INT 15
14177: PUSH
14178: LD_INT 16
14180: PUSH
14181: LD_INT 17
14183: PUSH
14184: LD_INT 18
14186: PUSH
14187: LD_INT 19
14189: PUSH
14190: LD_INT 20
14192: PUSH
14193: LD_INT 21
14195: PUSH
14196: LD_INT 22
14198: PUSH
14199: LD_INT 23
14201: PUSH
14202: LD_INT 24
14204: PUSH
14205: LD_INT 25
14207: PUSH
14208: LD_INT 26
14210: PUSH
14211: LD_INT 28
14213: PUSH
14214: LD_INT 30
14216: PUSH
14217: LD_INT 31
14219: PUSH
14220: LD_INT 32
14222: PUSH
14223: LD_INT 36
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 101
14259: PUSH
14260: LD_INT 102
14262: PUSH
14263: LD_INT 103
14265: PUSH
14266: LD_INT 104
14268: PUSH
14269: LD_INT 105
14271: PUSH
14272: LD_INT 106
14274: PUSH
14275: LD_INT 107
14277: PUSH
14278: LD_INT 108
14280: PUSH
14281: LD_INT 109
14283: PUSH
14284: LD_INT 110
14286: PUSH
14287: LD_INT 111
14289: PUSH
14290: LD_INT 112
14292: PUSH
14293: LD_INT 114
14295: PUSH
14296: LD_INT 116
14298: PUSH
14299: LD_INT 117
14301: PUSH
14302: LD_INT 118
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: ST_TO_ADDR
14327: GO 16222
14329: LD_INT 11
14331: DOUBLE
14332: EQUAL
14333: IFTRUE 14337
14335: GO 14541
14337: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14338: LD_ADDR_VAR 0 2
14342: PUSH
14343: LD_INT 2
14345: PUSH
14346: LD_INT 3
14348: PUSH
14349: LD_INT 4
14351: PUSH
14352: LD_INT 5
14354: PUSH
14355: LD_INT 6
14357: PUSH
14358: LD_INT 7
14360: PUSH
14361: LD_INT 8
14363: PUSH
14364: LD_INT 9
14366: PUSH
14367: LD_INT 10
14369: PUSH
14370: LD_INT 11
14372: PUSH
14373: LD_INT 12
14375: PUSH
14376: LD_INT 13
14378: PUSH
14379: LD_INT 14
14381: PUSH
14382: LD_INT 15
14384: PUSH
14385: LD_INT 16
14387: PUSH
14388: LD_INT 17
14390: PUSH
14391: LD_INT 18
14393: PUSH
14394: LD_INT 19
14396: PUSH
14397: LD_INT 20
14399: PUSH
14400: LD_INT 21
14402: PUSH
14403: LD_INT 22
14405: PUSH
14406: LD_INT 23
14408: PUSH
14409: LD_INT 24
14411: PUSH
14412: LD_INT 25
14414: PUSH
14415: LD_INT 26
14417: PUSH
14418: LD_INT 28
14420: PUSH
14421: LD_INT 30
14423: PUSH
14424: LD_INT 31
14426: PUSH
14427: LD_INT 32
14429: PUSH
14430: LD_INT 34
14432: PUSH
14433: LD_INT 36
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: PUSH
14469: LD_INT 101
14471: PUSH
14472: LD_INT 102
14474: PUSH
14475: LD_INT 103
14477: PUSH
14478: LD_INT 104
14480: PUSH
14481: LD_INT 105
14483: PUSH
14484: LD_INT 106
14486: PUSH
14487: LD_INT 107
14489: PUSH
14490: LD_INT 108
14492: PUSH
14493: LD_INT 109
14495: PUSH
14496: LD_INT 110
14498: PUSH
14499: LD_INT 111
14501: PUSH
14502: LD_INT 112
14504: PUSH
14505: LD_INT 114
14507: PUSH
14508: LD_INT 116
14510: PUSH
14511: LD_INT 117
14513: PUSH
14514: LD_INT 118
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: ST_TO_ADDR
14539: GO 16222
14541: LD_INT 12
14543: DOUBLE
14544: EQUAL
14545: IFTRUE 14549
14547: GO 14769
14549: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14550: LD_ADDR_VAR 0 2
14554: PUSH
14555: LD_INT 1
14557: PUSH
14558: LD_INT 2
14560: PUSH
14561: LD_INT 3
14563: PUSH
14564: LD_INT 4
14566: PUSH
14567: LD_INT 5
14569: PUSH
14570: LD_INT 6
14572: PUSH
14573: LD_INT 7
14575: PUSH
14576: LD_INT 8
14578: PUSH
14579: LD_INT 9
14581: PUSH
14582: LD_INT 10
14584: PUSH
14585: LD_INT 11
14587: PUSH
14588: LD_INT 12
14590: PUSH
14591: LD_INT 13
14593: PUSH
14594: LD_INT 14
14596: PUSH
14597: LD_INT 15
14599: PUSH
14600: LD_INT 16
14602: PUSH
14603: LD_INT 17
14605: PUSH
14606: LD_INT 18
14608: PUSH
14609: LD_INT 19
14611: PUSH
14612: LD_INT 20
14614: PUSH
14615: LD_INT 21
14617: PUSH
14618: LD_INT 22
14620: PUSH
14621: LD_INT 23
14623: PUSH
14624: LD_INT 24
14626: PUSH
14627: LD_INT 25
14629: PUSH
14630: LD_INT 26
14632: PUSH
14633: LD_INT 27
14635: PUSH
14636: LD_INT 28
14638: PUSH
14639: LD_INT 30
14641: PUSH
14642: LD_INT 31
14644: PUSH
14645: LD_INT 32
14647: PUSH
14648: LD_INT 33
14650: PUSH
14651: LD_INT 34
14653: PUSH
14654: LD_INT 36
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: PUSH
14693: LD_INT 101
14695: PUSH
14696: LD_INT 102
14698: PUSH
14699: LD_INT 103
14701: PUSH
14702: LD_INT 104
14704: PUSH
14705: LD_INT 105
14707: PUSH
14708: LD_INT 106
14710: PUSH
14711: LD_INT 107
14713: PUSH
14714: LD_INT 108
14716: PUSH
14717: LD_INT 109
14719: PUSH
14720: LD_INT 110
14722: PUSH
14723: LD_INT 111
14725: PUSH
14726: LD_INT 112
14728: PUSH
14729: LD_INT 113
14731: PUSH
14732: LD_INT 114
14734: PUSH
14735: LD_INT 116
14737: PUSH
14738: LD_INT 117
14740: PUSH
14741: LD_INT 118
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: ST_TO_ADDR
14767: GO 16222
14769: LD_INT 13
14771: DOUBLE
14772: EQUAL
14773: IFTRUE 14777
14775: GO 14985
14777: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14778: LD_ADDR_VAR 0 2
14782: PUSH
14783: LD_INT 1
14785: PUSH
14786: LD_INT 2
14788: PUSH
14789: LD_INT 3
14791: PUSH
14792: LD_INT 4
14794: PUSH
14795: LD_INT 5
14797: PUSH
14798: LD_INT 8
14800: PUSH
14801: LD_INT 9
14803: PUSH
14804: LD_INT 10
14806: PUSH
14807: LD_INT 11
14809: PUSH
14810: LD_INT 12
14812: PUSH
14813: LD_INT 14
14815: PUSH
14816: LD_INT 15
14818: PUSH
14819: LD_INT 16
14821: PUSH
14822: LD_INT 17
14824: PUSH
14825: LD_INT 18
14827: PUSH
14828: LD_INT 19
14830: PUSH
14831: LD_INT 20
14833: PUSH
14834: LD_INT 21
14836: PUSH
14837: LD_INT 22
14839: PUSH
14840: LD_INT 23
14842: PUSH
14843: LD_INT 24
14845: PUSH
14846: LD_INT 25
14848: PUSH
14849: LD_INT 26
14851: PUSH
14852: LD_INT 27
14854: PUSH
14855: LD_INT 28
14857: PUSH
14858: LD_INT 30
14860: PUSH
14861: LD_INT 31
14863: PUSH
14864: LD_INT 32
14866: PUSH
14867: LD_INT 33
14869: PUSH
14870: LD_INT 34
14872: PUSH
14873: LD_INT 36
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 101
14911: PUSH
14912: LD_INT 102
14914: PUSH
14915: LD_INT 103
14917: PUSH
14918: LD_INT 104
14920: PUSH
14921: LD_INT 105
14923: PUSH
14924: LD_INT 106
14926: PUSH
14927: LD_INT 107
14929: PUSH
14930: LD_INT 108
14932: PUSH
14933: LD_INT 109
14935: PUSH
14936: LD_INT 110
14938: PUSH
14939: LD_INT 111
14941: PUSH
14942: LD_INT 112
14944: PUSH
14945: LD_INT 113
14947: PUSH
14948: LD_INT 114
14950: PUSH
14951: LD_INT 116
14953: PUSH
14954: LD_INT 117
14956: PUSH
14957: LD_INT 118
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: ST_TO_ADDR
14983: GO 16222
14985: LD_INT 14
14987: DOUBLE
14988: EQUAL
14989: IFTRUE 14993
14991: GO 15217
14993: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14994: LD_ADDR_VAR 0 2
14998: PUSH
14999: LD_INT 1
15001: PUSH
15002: LD_INT 2
15004: PUSH
15005: LD_INT 3
15007: PUSH
15008: LD_INT 4
15010: PUSH
15011: LD_INT 5
15013: PUSH
15014: LD_INT 6
15016: PUSH
15017: LD_INT 7
15019: PUSH
15020: LD_INT 8
15022: PUSH
15023: LD_INT 9
15025: PUSH
15026: LD_INT 10
15028: PUSH
15029: LD_INT 11
15031: PUSH
15032: LD_INT 12
15034: PUSH
15035: LD_INT 13
15037: PUSH
15038: LD_INT 14
15040: PUSH
15041: LD_INT 15
15043: PUSH
15044: LD_INT 16
15046: PUSH
15047: LD_INT 17
15049: PUSH
15050: LD_INT 18
15052: PUSH
15053: LD_INT 19
15055: PUSH
15056: LD_INT 20
15058: PUSH
15059: LD_INT 21
15061: PUSH
15062: LD_INT 22
15064: PUSH
15065: LD_INT 23
15067: PUSH
15068: LD_INT 24
15070: PUSH
15071: LD_INT 25
15073: PUSH
15074: LD_INT 26
15076: PUSH
15077: LD_INT 27
15079: PUSH
15080: LD_INT 28
15082: PUSH
15083: LD_INT 29
15085: PUSH
15086: LD_INT 30
15088: PUSH
15089: LD_INT 31
15091: PUSH
15092: LD_INT 32
15094: PUSH
15095: LD_INT 33
15097: PUSH
15098: LD_INT 34
15100: PUSH
15101: LD_INT 36
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 101
15143: PUSH
15144: LD_INT 102
15146: PUSH
15147: LD_INT 103
15149: PUSH
15150: LD_INT 104
15152: PUSH
15153: LD_INT 105
15155: PUSH
15156: LD_INT 106
15158: PUSH
15159: LD_INT 107
15161: PUSH
15162: LD_INT 108
15164: PUSH
15165: LD_INT 109
15167: PUSH
15168: LD_INT 110
15170: PUSH
15171: LD_INT 111
15173: PUSH
15174: LD_INT 112
15176: PUSH
15177: LD_INT 113
15179: PUSH
15180: LD_INT 114
15182: PUSH
15183: LD_INT 116
15185: PUSH
15186: LD_INT 117
15188: PUSH
15189: LD_INT 118
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: ST_TO_ADDR
15215: GO 16222
15217: LD_INT 15
15219: DOUBLE
15220: EQUAL
15221: IFTRUE 15225
15223: GO 15449
15225: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15226: LD_ADDR_VAR 0 2
15230: PUSH
15231: LD_INT 1
15233: PUSH
15234: LD_INT 2
15236: PUSH
15237: LD_INT 3
15239: PUSH
15240: LD_INT 4
15242: PUSH
15243: LD_INT 5
15245: PUSH
15246: LD_INT 6
15248: PUSH
15249: LD_INT 7
15251: PUSH
15252: LD_INT 8
15254: PUSH
15255: LD_INT 9
15257: PUSH
15258: LD_INT 10
15260: PUSH
15261: LD_INT 11
15263: PUSH
15264: LD_INT 12
15266: PUSH
15267: LD_INT 13
15269: PUSH
15270: LD_INT 14
15272: PUSH
15273: LD_INT 15
15275: PUSH
15276: LD_INT 16
15278: PUSH
15279: LD_INT 17
15281: PUSH
15282: LD_INT 18
15284: PUSH
15285: LD_INT 19
15287: PUSH
15288: LD_INT 20
15290: PUSH
15291: LD_INT 21
15293: PUSH
15294: LD_INT 22
15296: PUSH
15297: LD_INT 23
15299: PUSH
15300: LD_INT 24
15302: PUSH
15303: LD_INT 25
15305: PUSH
15306: LD_INT 26
15308: PUSH
15309: LD_INT 27
15311: PUSH
15312: LD_INT 28
15314: PUSH
15315: LD_INT 29
15317: PUSH
15318: LD_INT 30
15320: PUSH
15321: LD_INT 31
15323: PUSH
15324: LD_INT 32
15326: PUSH
15327: LD_INT 33
15329: PUSH
15330: LD_INT 34
15332: PUSH
15333: LD_INT 36
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: PUSH
15373: LD_INT 101
15375: PUSH
15376: LD_INT 102
15378: PUSH
15379: LD_INT 103
15381: PUSH
15382: LD_INT 104
15384: PUSH
15385: LD_INT 105
15387: PUSH
15388: LD_INT 106
15390: PUSH
15391: LD_INT 107
15393: PUSH
15394: LD_INT 108
15396: PUSH
15397: LD_INT 109
15399: PUSH
15400: LD_INT 110
15402: PUSH
15403: LD_INT 111
15405: PUSH
15406: LD_INT 112
15408: PUSH
15409: LD_INT 113
15411: PUSH
15412: LD_INT 114
15414: PUSH
15415: LD_INT 116
15417: PUSH
15418: LD_INT 117
15420: PUSH
15421: LD_INT 118
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: ST_TO_ADDR
15447: GO 16222
15449: LD_INT 16
15451: DOUBLE
15452: EQUAL
15453: IFTRUE 15457
15455: GO 15593
15457: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15458: LD_ADDR_VAR 0 2
15462: PUSH
15463: LD_INT 2
15465: PUSH
15466: LD_INT 4
15468: PUSH
15469: LD_INT 5
15471: PUSH
15472: LD_INT 7
15474: PUSH
15475: LD_INT 11
15477: PUSH
15478: LD_INT 12
15480: PUSH
15481: LD_INT 15
15483: PUSH
15484: LD_INT 16
15486: PUSH
15487: LD_INT 20
15489: PUSH
15490: LD_INT 21
15492: PUSH
15493: LD_INT 22
15495: PUSH
15496: LD_INT 23
15498: PUSH
15499: LD_INT 25
15501: PUSH
15502: LD_INT 26
15504: PUSH
15505: LD_INT 30
15507: PUSH
15508: LD_INT 31
15510: PUSH
15511: LD_INT 32
15513: PUSH
15514: LD_INT 33
15516: PUSH
15517: LD_INT 34
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 101
15543: PUSH
15544: LD_INT 102
15546: PUSH
15547: LD_INT 103
15549: PUSH
15550: LD_INT 106
15552: PUSH
15553: LD_INT 108
15555: PUSH
15556: LD_INT 112
15558: PUSH
15559: LD_INT 113
15561: PUSH
15562: LD_INT 114
15564: PUSH
15565: LD_INT 116
15567: PUSH
15568: LD_INT 117
15570: PUSH
15571: LD_INT 118
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: ST_TO_ADDR
15591: GO 16222
15593: LD_INT 17
15595: DOUBLE
15596: EQUAL
15597: IFTRUE 15601
15599: GO 15825
15601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15602: LD_ADDR_VAR 0 2
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: LD_INT 2
15612: PUSH
15613: LD_INT 3
15615: PUSH
15616: LD_INT 4
15618: PUSH
15619: LD_INT 5
15621: PUSH
15622: LD_INT 6
15624: PUSH
15625: LD_INT 7
15627: PUSH
15628: LD_INT 8
15630: PUSH
15631: LD_INT 9
15633: PUSH
15634: LD_INT 10
15636: PUSH
15637: LD_INT 11
15639: PUSH
15640: LD_INT 12
15642: PUSH
15643: LD_INT 13
15645: PUSH
15646: LD_INT 14
15648: PUSH
15649: LD_INT 15
15651: PUSH
15652: LD_INT 16
15654: PUSH
15655: LD_INT 17
15657: PUSH
15658: LD_INT 18
15660: PUSH
15661: LD_INT 19
15663: PUSH
15664: LD_INT 20
15666: PUSH
15667: LD_INT 21
15669: PUSH
15670: LD_INT 22
15672: PUSH
15673: LD_INT 23
15675: PUSH
15676: LD_INT 24
15678: PUSH
15679: LD_INT 25
15681: PUSH
15682: LD_INT 26
15684: PUSH
15685: LD_INT 27
15687: PUSH
15688: LD_INT 28
15690: PUSH
15691: LD_INT 29
15693: PUSH
15694: LD_INT 30
15696: PUSH
15697: LD_INT 31
15699: PUSH
15700: LD_INT 32
15702: PUSH
15703: LD_INT 33
15705: PUSH
15706: LD_INT 34
15708: PUSH
15709: LD_INT 36
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 101
15751: PUSH
15752: LD_INT 102
15754: PUSH
15755: LD_INT 103
15757: PUSH
15758: LD_INT 104
15760: PUSH
15761: LD_INT 105
15763: PUSH
15764: LD_INT 106
15766: PUSH
15767: LD_INT 107
15769: PUSH
15770: LD_INT 108
15772: PUSH
15773: LD_INT 109
15775: PUSH
15776: LD_INT 110
15778: PUSH
15779: LD_INT 111
15781: PUSH
15782: LD_INT 112
15784: PUSH
15785: LD_INT 113
15787: PUSH
15788: LD_INT 114
15790: PUSH
15791: LD_INT 116
15793: PUSH
15794: LD_INT 117
15796: PUSH
15797: LD_INT 118
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: ST_TO_ADDR
15823: GO 16222
15825: LD_INT 18
15827: DOUBLE
15828: EQUAL
15829: IFTRUE 15833
15831: GO 15981
15833: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15834: LD_ADDR_VAR 0 2
15838: PUSH
15839: LD_INT 2
15841: PUSH
15842: LD_INT 4
15844: PUSH
15845: LD_INT 5
15847: PUSH
15848: LD_INT 7
15850: PUSH
15851: LD_INT 11
15853: PUSH
15854: LD_INT 12
15856: PUSH
15857: LD_INT 15
15859: PUSH
15860: LD_INT 16
15862: PUSH
15863: LD_INT 20
15865: PUSH
15866: LD_INT 21
15868: PUSH
15869: LD_INT 22
15871: PUSH
15872: LD_INT 23
15874: PUSH
15875: LD_INT 25
15877: PUSH
15878: LD_INT 26
15880: PUSH
15881: LD_INT 30
15883: PUSH
15884: LD_INT 31
15886: PUSH
15887: LD_INT 32
15889: PUSH
15890: LD_INT 33
15892: PUSH
15893: LD_INT 34
15895: PUSH
15896: LD_INT 35
15898: PUSH
15899: LD_INT 36
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 101
15927: PUSH
15928: LD_INT 102
15930: PUSH
15931: LD_INT 103
15933: PUSH
15934: LD_INT 106
15936: PUSH
15937: LD_INT 108
15939: PUSH
15940: LD_INT 112
15942: PUSH
15943: LD_INT 113
15945: PUSH
15946: LD_INT 114
15948: PUSH
15949: LD_INT 115
15951: PUSH
15952: LD_INT 116
15954: PUSH
15955: LD_INT 117
15957: PUSH
15958: LD_INT 118
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: ST_TO_ADDR
15979: GO 16222
15981: LD_INT 19
15983: DOUBLE
15984: EQUAL
15985: IFTRUE 15989
15987: GO 16221
15989: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15990: LD_ADDR_VAR 0 2
15994: PUSH
15995: LD_INT 1
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: LD_INT 3
16003: PUSH
16004: LD_INT 4
16006: PUSH
16007: LD_INT 5
16009: PUSH
16010: LD_INT 6
16012: PUSH
16013: LD_INT 7
16015: PUSH
16016: LD_INT 8
16018: PUSH
16019: LD_INT 9
16021: PUSH
16022: LD_INT 10
16024: PUSH
16025: LD_INT 11
16027: PUSH
16028: LD_INT 12
16030: PUSH
16031: LD_INT 13
16033: PUSH
16034: LD_INT 14
16036: PUSH
16037: LD_INT 15
16039: PUSH
16040: LD_INT 16
16042: PUSH
16043: LD_INT 17
16045: PUSH
16046: LD_INT 18
16048: PUSH
16049: LD_INT 19
16051: PUSH
16052: LD_INT 20
16054: PUSH
16055: LD_INT 21
16057: PUSH
16058: LD_INT 22
16060: PUSH
16061: LD_INT 23
16063: PUSH
16064: LD_INT 24
16066: PUSH
16067: LD_INT 25
16069: PUSH
16070: LD_INT 26
16072: PUSH
16073: LD_INT 27
16075: PUSH
16076: LD_INT 28
16078: PUSH
16079: LD_INT 29
16081: PUSH
16082: LD_INT 30
16084: PUSH
16085: LD_INT 31
16087: PUSH
16088: LD_INT 32
16090: PUSH
16091: LD_INT 33
16093: PUSH
16094: LD_INT 34
16096: PUSH
16097: LD_INT 35
16099: PUSH
16100: LD_INT 36
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: PUSH
16141: LD_INT 101
16143: PUSH
16144: LD_INT 102
16146: PUSH
16147: LD_INT 103
16149: PUSH
16150: LD_INT 104
16152: PUSH
16153: LD_INT 105
16155: PUSH
16156: LD_INT 106
16158: PUSH
16159: LD_INT 107
16161: PUSH
16162: LD_INT 108
16164: PUSH
16165: LD_INT 109
16167: PUSH
16168: LD_INT 110
16170: PUSH
16171: LD_INT 111
16173: PUSH
16174: LD_INT 112
16176: PUSH
16177: LD_INT 113
16179: PUSH
16180: LD_INT 114
16182: PUSH
16183: LD_INT 115
16185: PUSH
16186: LD_INT 116
16188: PUSH
16189: LD_INT 117
16191: PUSH
16192: LD_INT 118
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: ST_TO_ADDR
16219: GO 16222
16221: POP
// end else
16222: GO 16453
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16224: LD_ADDR_VAR 0 2
16228: PUSH
16229: LD_INT 1
16231: PUSH
16232: LD_INT 2
16234: PUSH
16235: LD_INT 3
16237: PUSH
16238: LD_INT 4
16240: PUSH
16241: LD_INT 5
16243: PUSH
16244: LD_INT 6
16246: PUSH
16247: LD_INT 7
16249: PUSH
16250: LD_INT 8
16252: PUSH
16253: LD_INT 9
16255: PUSH
16256: LD_INT 10
16258: PUSH
16259: LD_INT 11
16261: PUSH
16262: LD_INT 12
16264: PUSH
16265: LD_INT 13
16267: PUSH
16268: LD_INT 14
16270: PUSH
16271: LD_INT 15
16273: PUSH
16274: LD_INT 16
16276: PUSH
16277: LD_INT 17
16279: PUSH
16280: LD_INT 18
16282: PUSH
16283: LD_INT 19
16285: PUSH
16286: LD_INT 20
16288: PUSH
16289: LD_INT 21
16291: PUSH
16292: LD_INT 22
16294: PUSH
16295: LD_INT 23
16297: PUSH
16298: LD_INT 24
16300: PUSH
16301: LD_INT 25
16303: PUSH
16304: LD_INT 26
16306: PUSH
16307: LD_INT 27
16309: PUSH
16310: LD_INT 28
16312: PUSH
16313: LD_INT 29
16315: PUSH
16316: LD_INT 30
16318: PUSH
16319: LD_INT 31
16321: PUSH
16322: LD_INT 32
16324: PUSH
16325: LD_INT 33
16327: PUSH
16328: LD_INT 34
16330: PUSH
16331: LD_INT 35
16333: PUSH
16334: LD_INT 36
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 101
16377: PUSH
16378: LD_INT 102
16380: PUSH
16381: LD_INT 103
16383: PUSH
16384: LD_INT 104
16386: PUSH
16387: LD_INT 105
16389: PUSH
16390: LD_INT 106
16392: PUSH
16393: LD_INT 107
16395: PUSH
16396: LD_INT 108
16398: PUSH
16399: LD_INT 109
16401: PUSH
16402: LD_INT 110
16404: PUSH
16405: LD_INT 111
16407: PUSH
16408: LD_INT 112
16410: PUSH
16411: LD_INT 113
16413: PUSH
16414: LD_INT 114
16416: PUSH
16417: LD_INT 115
16419: PUSH
16420: LD_INT 116
16422: PUSH
16423: LD_INT 117
16425: PUSH
16426: LD_INT 118
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: ST_TO_ADDR
// if result then
16453: LD_VAR 0 2
16457: IFFALSE 17243
// begin normal :=  ;
16459: LD_ADDR_VAR 0 5
16463: PUSH
16464: LD_STRING 
16466: ST_TO_ADDR
// hardcore :=  ;
16467: LD_ADDR_VAR 0 6
16471: PUSH
16472: LD_STRING 
16474: ST_TO_ADDR
// active :=  ;
16475: LD_ADDR_VAR 0 7
16479: PUSH
16480: LD_STRING 
16482: ST_TO_ADDR
// for i = 1 to normalCounter do
16483: LD_ADDR_VAR 0 8
16487: PUSH
16488: DOUBLE
16489: LD_INT 1
16491: DEC
16492: ST_TO_ADDR
16493: LD_EXP 49
16497: PUSH
16498: FOR_TO
16499: IFFALSE 16600
// begin tmp := 0 ;
16501: LD_ADDR_VAR 0 3
16505: PUSH
16506: LD_STRING 0
16508: ST_TO_ADDR
// if result [ 1 ] then
16509: LD_VAR 0 2
16513: PUSH
16514: LD_INT 1
16516: ARRAY
16517: IFFALSE 16582
// if result [ 1 ] [ 1 ] = i then
16519: LD_VAR 0 2
16523: PUSH
16524: LD_INT 1
16526: ARRAY
16527: PUSH
16528: LD_INT 1
16530: ARRAY
16531: PUSH
16532: LD_VAR 0 8
16536: EQUAL
16537: IFFALSE 16582
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16539: LD_ADDR_VAR 0 2
16543: PUSH
16544: LD_VAR 0 2
16548: PPUSH
16549: LD_INT 1
16551: PPUSH
16552: LD_VAR 0 2
16556: PUSH
16557: LD_INT 1
16559: ARRAY
16560: PPUSH
16561: LD_INT 1
16563: PPUSH
16564: CALL_OW 3
16568: PPUSH
16569: CALL_OW 1
16573: ST_TO_ADDR
// tmp := 1 ;
16574: LD_ADDR_VAR 0 3
16578: PUSH
16579: LD_STRING 1
16581: ST_TO_ADDR
// end ; normal := normal & tmp ;
16582: LD_ADDR_VAR 0 5
16586: PUSH
16587: LD_VAR 0 5
16591: PUSH
16592: LD_VAR 0 3
16596: STR
16597: ST_TO_ADDR
// end ;
16598: GO 16498
16600: POP
16601: POP
// for i = 1 to hardcoreCounter do
16602: LD_ADDR_VAR 0 8
16606: PUSH
16607: DOUBLE
16608: LD_INT 1
16610: DEC
16611: ST_TO_ADDR
16612: LD_EXP 50
16616: PUSH
16617: FOR_TO
16618: IFFALSE 16723
// begin tmp := 0 ;
16620: LD_ADDR_VAR 0 3
16624: PUSH
16625: LD_STRING 0
16627: ST_TO_ADDR
// if result [ 2 ] then
16628: LD_VAR 0 2
16632: PUSH
16633: LD_INT 2
16635: ARRAY
16636: IFFALSE 16705
// if result [ 2 ] [ 1 ] = 100 + i then
16638: LD_VAR 0 2
16642: PUSH
16643: LD_INT 2
16645: ARRAY
16646: PUSH
16647: LD_INT 1
16649: ARRAY
16650: PUSH
16651: LD_INT 100
16653: PUSH
16654: LD_VAR 0 8
16658: PLUS
16659: EQUAL
16660: IFFALSE 16705
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16662: LD_ADDR_VAR 0 2
16666: PUSH
16667: LD_VAR 0 2
16671: PPUSH
16672: LD_INT 2
16674: PPUSH
16675: LD_VAR 0 2
16679: PUSH
16680: LD_INT 2
16682: ARRAY
16683: PPUSH
16684: LD_INT 1
16686: PPUSH
16687: CALL_OW 3
16691: PPUSH
16692: CALL_OW 1
16696: ST_TO_ADDR
// tmp := 1 ;
16697: LD_ADDR_VAR 0 3
16701: PUSH
16702: LD_STRING 1
16704: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16705: LD_ADDR_VAR 0 6
16709: PUSH
16710: LD_VAR 0 6
16714: PUSH
16715: LD_VAR 0 3
16719: STR
16720: ST_TO_ADDR
// end ;
16721: GO 16617
16723: POP
16724: POP
// if isGameLoad then
16725: LD_VAR 0 1
16729: IFFALSE 17204
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16731: LD_ADDR_VAR 0 4
16735: PUSH
16736: LD_EXP 53
16740: PUSH
16741: LD_EXP 52
16745: PUSH
16746: LD_EXP 54
16750: PUSH
16751: LD_EXP 51
16755: PUSH
16756: LD_EXP 55
16760: PUSH
16761: LD_EXP 56
16765: PUSH
16766: LD_EXP 57
16770: PUSH
16771: LD_EXP 58
16775: PUSH
16776: LD_EXP 59
16780: PUSH
16781: LD_EXP 60
16785: PUSH
16786: LD_EXP 61
16790: PUSH
16791: LD_EXP 62
16795: PUSH
16796: LD_EXP 63
16800: PUSH
16801: LD_EXP 64
16805: PUSH
16806: LD_EXP 72
16810: PUSH
16811: LD_EXP 73
16815: PUSH
16816: LD_EXP 74
16820: PUSH
16821: LD_EXP 75
16825: PUSH
16826: LD_EXP 77
16830: PUSH
16831: LD_EXP 78
16835: PUSH
16836: LD_EXP 79
16840: PUSH
16841: LD_EXP 82
16845: PUSH
16846: LD_EXP 84
16850: PUSH
16851: LD_EXP 85
16855: PUSH
16856: LD_EXP 86
16860: PUSH
16861: LD_EXP 88
16865: PUSH
16866: LD_EXP 89
16870: PUSH
16871: LD_EXP 92
16875: PUSH
16876: LD_EXP 93
16880: PUSH
16881: LD_EXP 94
16885: PUSH
16886: LD_EXP 95
16890: PUSH
16891: LD_EXP 96
16895: PUSH
16896: LD_EXP 97
16900: PUSH
16901: LD_EXP 98
16905: PUSH
16906: LD_EXP 99
16910: PUSH
16911: LD_EXP 100
16915: PUSH
16916: LD_EXP 65
16920: PUSH
16921: LD_EXP 66
16925: PUSH
16926: LD_EXP 69
16930: PUSH
16931: LD_EXP 70
16935: PUSH
16936: LD_EXP 71
16940: PUSH
16941: LD_EXP 67
16945: PUSH
16946: LD_EXP 68
16950: PUSH
16951: LD_EXP 76
16955: PUSH
16956: LD_EXP 80
16960: PUSH
16961: LD_EXP 81
16965: PUSH
16966: LD_EXP 83
16970: PUSH
16971: LD_EXP 87
16975: PUSH
16976: LD_EXP 90
16980: PUSH
16981: LD_EXP 91
16985: PUSH
16986: LD_EXP 101
16990: PUSH
16991: LD_EXP 102
16995: PUSH
16996: LD_EXP 103
17000: PUSH
17001: LD_EXP 104
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: ST_TO_ADDR
// tmp :=  ;
17062: LD_ADDR_VAR 0 3
17066: PUSH
17067: LD_STRING 
17069: ST_TO_ADDR
// for i = 1 to normalCounter do
17070: LD_ADDR_VAR 0 8
17074: PUSH
17075: DOUBLE
17076: LD_INT 1
17078: DEC
17079: ST_TO_ADDR
17080: LD_EXP 49
17084: PUSH
17085: FOR_TO
17086: IFFALSE 17122
// begin if flags [ i ] then
17088: LD_VAR 0 4
17092: PUSH
17093: LD_VAR 0 8
17097: ARRAY
17098: IFFALSE 17120
// tmp := tmp & i & ; ;
17100: LD_ADDR_VAR 0 3
17104: PUSH
17105: LD_VAR 0 3
17109: PUSH
17110: LD_VAR 0 8
17114: STR
17115: PUSH
17116: LD_STRING ;
17118: STR
17119: ST_TO_ADDR
// end ;
17120: GO 17085
17122: POP
17123: POP
// for i = 1 to hardcoreCounter do
17124: LD_ADDR_VAR 0 8
17128: PUSH
17129: DOUBLE
17130: LD_INT 1
17132: DEC
17133: ST_TO_ADDR
17134: LD_EXP 50
17138: PUSH
17139: FOR_TO
17140: IFFALSE 17186
// begin if flags [ normalCounter + i ] then
17142: LD_VAR 0 4
17146: PUSH
17147: LD_EXP 49
17151: PUSH
17152: LD_VAR 0 8
17156: PLUS
17157: ARRAY
17158: IFFALSE 17184
// tmp := tmp & ( 100 + i ) & ; ;
17160: LD_ADDR_VAR 0 3
17164: PUSH
17165: LD_VAR 0 3
17169: PUSH
17170: LD_INT 100
17172: PUSH
17173: LD_VAR 0 8
17177: PLUS
17178: STR
17179: PUSH
17180: LD_STRING ;
17182: STR
17183: ST_TO_ADDR
// end ;
17184: GO 17139
17186: POP
17187: POP
// if tmp then
17188: LD_VAR 0 3
17192: IFFALSE 17204
// active := tmp ;
17194: LD_ADDR_VAR 0 7
17198: PUSH
17199: LD_VAR 0 3
17203: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17204: LD_STRING getStreamItemsFromMission("
17206: PUSH
17207: LD_VAR 0 5
17211: STR
17212: PUSH
17213: LD_STRING ","
17215: STR
17216: PUSH
17217: LD_VAR 0 6
17221: STR
17222: PUSH
17223: LD_STRING ","
17225: STR
17226: PUSH
17227: LD_VAR 0 7
17231: STR
17232: PUSH
17233: LD_STRING ")
17235: STR
17236: PPUSH
17237: CALL_OW 559
// end else
17241: GO 17250
// ToLua ( getStreamItemsFromMission("","","") ) ;
17243: LD_STRING getStreamItemsFromMission("","","")
17245: PPUSH
17246: CALL_OW 559
// end ;
17250: LD_VAR 0 2
17254: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17255: LD_EXP 48
17259: PUSH
17260: LD_EXP 53
17264: AND
17265: IFFALSE 17389
17267: GO 17269
17269: DISABLE
17270: LD_INT 0
17272: PPUSH
17273: PPUSH
// begin enable ;
17274: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17275: LD_ADDR_VAR 0 2
17279: PUSH
17280: LD_INT 22
17282: PUSH
17283: LD_OWVAR 2
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 2
17294: PUSH
17295: LD_INT 34
17297: PUSH
17298: LD_INT 7
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 34
17307: PUSH
17308: LD_INT 45
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 34
17317: PUSH
17318: LD_INT 28
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 34
17327: PUSH
17328: LD_INT 47
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PPUSH
17346: CALL_OW 69
17350: ST_TO_ADDR
// if not tmp then
17351: LD_VAR 0 2
17355: NOT
17356: IFFALSE 17360
// exit ;
17358: GO 17389
// for i in tmp do
17360: LD_ADDR_VAR 0 1
17364: PUSH
17365: LD_VAR 0 2
17369: PUSH
17370: FOR_IN
17371: IFFALSE 17387
// begin SetLives ( i , 0 ) ;
17373: LD_VAR 0 1
17377: PPUSH
17378: LD_INT 0
17380: PPUSH
17381: CALL_OW 234
// end ;
17385: GO 17370
17387: POP
17388: POP
// end ;
17389: PPOPN 2
17391: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17392: LD_EXP 48
17396: PUSH
17397: LD_EXP 54
17401: AND
17402: IFFALSE 17486
17404: GO 17406
17406: DISABLE
17407: LD_INT 0
17409: PPUSH
17410: PPUSH
// begin enable ;
17411: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17412: LD_ADDR_VAR 0 2
17416: PUSH
17417: LD_INT 22
17419: PUSH
17420: LD_OWVAR 2
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 32
17431: PUSH
17432: LD_INT 3
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PPUSH
17443: CALL_OW 69
17447: ST_TO_ADDR
// if not tmp then
17448: LD_VAR 0 2
17452: NOT
17453: IFFALSE 17457
// exit ;
17455: GO 17486
// for i in tmp do
17457: LD_ADDR_VAR 0 1
17461: PUSH
17462: LD_VAR 0 2
17466: PUSH
17467: FOR_IN
17468: IFFALSE 17484
// begin SetLives ( i , 0 ) ;
17470: LD_VAR 0 1
17474: PPUSH
17475: LD_INT 0
17477: PPUSH
17478: CALL_OW 234
// end ;
17482: GO 17467
17484: POP
17485: POP
// end ;
17486: PPOPN 2
17488: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17489: LD_EXP 48
17493: PUSH
17494: LD_EXP 51
17498: AND
17499: IFFALSE 17592
17501: GO 17503
17503: DISABLE
17504: LD_INT 0
17506: PPUSH
// begin enable ;
17507: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17508: LD_ADDR_VAR 0 1
17512: PUSH
17513: LD_INT 22
17515: PUSH
17516: LD_OWVAR 2
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 2
17527: PUSH
17528: LD_INT 25
17530: PUSH
17531: LD_INT 5
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 25
17540: PUSH
17541: LD_INT 9
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 25
17550: PUSH
17551: LD_INT 8
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PPUSH
17568: CALL_OW 69
17572: PUSH
17573: FOR_IN
17574: IFFALSE 17590
// begin SetClass ( i , 1 ) ;
17576: LD_VAR 0 1
17580: PPUSH
17581: LD_INT 1
17583: PPUSH
17584: CALL_OW 336
// end ;
17588: GO 17573
17590: POP
17591: POP
// end ;
17592: PPOPN 1
17594: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17595: LD_EXP 48
17599: PUSH
17600: LD_EXP 52
17604: AND
17605: PUSH
17606: LD_OWVAR 65
17610: PUSH
17611: LD_INT 7
17613: LESS
17614: AND
17615: IFFALSE 17629
17617: GO 17619
17619: DISABLE
// begin enable ;
17620: ENABLE
// game_speed := 7 ;
17621: LD_ADDR_OWVAR 65
17625: PUSH
17626: LD_INT 7
17628: ST_TO_ADDR
// end ;
17629: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17630: LD_EXP 48
17634: PUSH
17635: LD_EXP 55
17639: AND
17640: IFFALSE 17842
17642: GO 17644
17644: DISABLE
17645: LD_INT 0
17647: PPUSH
17648: PPUSH
17649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17650: LD_ADDR_VAR 0 3
17654: PUSH
17655: LD_INT 81
17657: PUSH
17658: LD_OWVAR 2
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 21
17669: PUSH
17670: LD_INT 1
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PPUSH
17681: CALL_OW 69
17685: ST_TO_ADDR
// if not tmp then
17686: LD_VAR 0 3
17690: NOT
17691: IFFALSE 17695
// exit ;
17693: GO 17842
// if tmp > 5 then
17695: LD_VAR 0 3
17699: PUSH
17700: LD_INT 5
17702: GREATER
17703: IFFALSE 17715
// k := 5 else
17705: LD_ADDR_VAR 0 2
17709: PUSH
17710: LD_INT 5
17712: ST_TO_ADDR
17713: GO 17725
// k := tmp ;
17715: LD_ADDR_VAR 0 2
17719: PUSH
17720: LD_VAR 0 3
17724: ST_TO_ADDR
// for i := 1 to k do
17725: LD_ADDR_VAR 0 1
17729: PUSH
17730: DOUBLE
17731: LD_INT 1
17733: DEC
17734: ST_TO_ADDR
17735: LD_VAR 0 2
17739: PUSH
17740: FOR_TO
17741: IFFALSE 17840
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17743: LD_VAR 0 3
17747: PUSH
17748: LD_VAR 0 1
17752: ARRAY
17753: PPUSH
17754: LD_VAR 0 1
17758: PUSH
17759: LD_INT 4
17761: MOD
17762: PUSH
17763: LD_INT 1
17765: PLUS
17766: PPUSH
17767: CALL_OW 259
17771: PUSH
17772: LD_INT 10
17774: LESS
17775: IFFALSE 17838
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17777: LD_VAR 0 3
17781: PUSH
17782: LD_VAR 0 1
17786: ARRAY
17787: PPUSH
17788: LD_VAR 0 1
17792: PUSH
17793: LD_INT 4
17795: MOD
17796: PUSH
17797: LD_INT 1
17799: PLUS
17800: PPUSH
17801: LD_VAR 0 3
17805: PUSH
17806: LD_VAR 0 1
17810: ARRAY
17811: PPUSH
17812: LD_VAR 0 1
17816: PUSH
17817: LD_INT 4
17819: MOD
17820: PUSH
17821: LD_INT 1
17823: PLUS
17824: PPUSH
17825: CALL_OW 259
17829: PUSH
17830: LD_INT 1
17832: PLUS
17833: PPUSH
17834: CALL_OW 237
17838: GO 17740
17840: POP
17841: POP
// end ;
17842: PPOPN 3
17844: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17845: LD_EXP 48
17849: PUSH
17850: LD_EXP 56
17854: AND
17855: IFFALSE 17875
17857: GO 17859
17859: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17860: LD_INT 4
17862: PPUSH
17863: LD_OWVAR 2
17867: PPUSH
17868: LD_INT 0
17870: PPUSH
17871: CALL_OW 324
17875: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17876: LD_EXP 48
17880: PUSH
17881: LD_EXP 85
17885: AND
17886: IFFALSE 17906
17888: GO 17890
17890: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17891: LD_INT 19
17893: PPUSH
17894: LD_OWVAR 2
17898: PPUSH
17899: LD_INT 0
17901: PPUSH
17902: CALL_OW 324
17906: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17907: LD_EXP 48
17911: PUSH
17912: LD_EXP 57
17916: AND
17917: IFFALSE 18019
17919: GO 17921
17921: DISABLE
17922: LD_INT 0
17924: PPUSH
17925: PPUSH
// begin enable ;
17926: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17927: LD_ADDR_VAR 0 2
17931: PUSH
17932: LD_INT 22
17934: PUSH
17935: LD_OWVAR 2
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 2
17946: PUSH
17947: LD_INT 34
17949: PUSH
17950: LD_INT 11
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 34
17959: PUSH
17960: LD_INT 30
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: LIST
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PPUSH
17976: CALL_OW 69
17980: ST_TO_ADDR
// if not tmp then
17981: LD_VAR 0 2
17985: NOT
17986: IFFALSE 17990
// exit ;
17988: GO 18019
// for i in tmp do
17990: LD_ADDR_VAR 0 1
17994: PUSH
17995: LD_VAR 0 2
17999: PUSH
18000: FOR_IN
18001: IFFALSE 18017
// begin SetLives ( i , 0 ) ;
18003: LD_VAR 0 1
18007: PPUSH
18008: LD_INT 0
18010: PPUSH
18011: CALL_OW 234
// end ;
18015: GO 18000
18017: POP
18018: POP
// end ;
18019: PPOPN 2
18021: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18022: LD_EXP 48
18026: PUSH
18027: LD_EXP 58
18031: AND
18032: IFFALSE 18052
18034: GO 18036
18036: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18037: LD_INT 32
18039: PPUSH
18040: LD_OWVAR 2
18044: PPUSH
18045: LD_INT 0
18047: PPUSH
18048: CALL_OW 324
18052: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18053: LD_EXP 48
18057: PUSH
18058: LD_EXP 59
18062: AND
18063: IFFALSE 18244
18065: GO 18067
18067: DISABLE
18068: LD_INT 0
18070: PPUSH
18071: PPUSH
18072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18073: LD_ADDR_VAR 0 2
18077: PUSH
18078: LD_INT 22
18080: PUSH
18081: LD_OWVAR 2
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 33
18092: PUSH
18093: LD_INT 3
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PPUSH
18104: CALL_OW 69
18108: ST_TO_ADDR
// if not tmp then
18109: LD_VAR 0 2
18113: NOT
18114: IFFALSE 18118
// exit ;
18116: GO 18244
// side := 0 ;
18118: LD_ADDR_VAR 0 3
18122: PUSH
18123: LD_INT 0
18125: ST_TO_ADDR
// for i := 1 to 8 do
18126: LD_ADDR_VAR 0 1
18130: PUSH
18131: DOUBLE
18132: LD_INT 1
18134: DEC
18135: ST_TO_ADDR
18136: LD_INT 8
18138: PUSH
18139: FOR_TO
18140: IFFALSE 18188
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18142: LD_OWVAR 2
18146: PUSH
18147: LD_VAR 0 1
18151: NONEQUAL
18152: PUSH
18153: LD_OWVAR 2
18157: PPUSH
18158: LD_VAR 0 1
18162: PPUSH
18163: CALL_OW 81
18167: PUSH
18168: LD_INT 2
18170: EQUAL
18171: AND
18172: IFFALSE 18186
// begin side := i ;
18174: LD_ADDR_VAR 0 3
18178: PUSH
18179: LD_VAR 0 1
18183: ST_TO_ADDR
// break ;
18184: GO 18188
// end ;
18186: GO 18139
18188: POP
18189: POP
// if not side then
18190: LD_VAR 0 3
18194: NOT
18195: IFFALSE 18199
// exit ;
18197: GO 18244
// for i := 1 to tmp do
18199: LD_ADDR_VAR 0 1
18203: PUSH
18204: DOUBLE
18205: LD_INT 1
18207: DEC
18208: ST_TO_ADDR
18209: LD_VAR 0 2
18213: PUSH
18214: FOR_TO
18215: IFFALSE 18242
// if Prob ( 60 ) then
18217: LD_INT 60
18219: PPUSH
18220: CALL_OW 13
18224: IFFALSE 18240
// SetSide ( i , side ) ;
18226: LD_VAR 0 1
18230: PPUSH
18231: LD_VAR 0 3
18235: PPUSH
18236: CALL_OW 235
18240: GO 18214
18242: POP
18243: POP
// end ;
18244: PPOPN 3
18246: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18247: LD_EXP 48
18251: PUSH
18252: LD_EXP 61
18256: AND
18257: IFFALSE 18376
18259: GO 18261
18261: DISABLE
18262: LD_INT 0
18264: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18265: LD_ADDR_VAR 0 1
18269: PUSH
18270: LD_INT 22
18272: PUSH
18273: LD_OWVAR 2
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 21
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 3
18294: PUSH
18295: LD_INT 23
18297: PUSH
18298: LD_INT 0
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: LIST
18313: PPUSH
18314: CALL_OW 69
18318: PUSH
18319: FOR_IN
18320: IFFALSE 18374
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18322: LD_VAR 0 1
18326: PPUSH
18327: CALL_OW 257
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: LD_INT 2
18337: PUSH
18338: LD_INT 3
18340: PUSH
18341: LD_INT 4
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: IN
18350: IFFALSE 18372
// SetClass ( un , rand ( 1 , 4 ) ) ;
18352: LD_VAR 0 1
18356: PPUSH
18357: LD_INT 1
18359: PPUSH
18360: LD_INT 4
18362: PPUSH
18363: CALL_OW 12
18367: PPUSH
18368: CALL_OW 336
18372: GO 18319
18374: POP
18375: POP
// end ;
18376: PPOPN 1
18378: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18379: LD_EXP 48
18383: PUSH
18384: LD_EXP 60
18388: AND
18389: IFFALSE 18468
18391: GO 18393
18393: DISABLE
18394: LD_INT 0
18396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18397: LD_ADDR_VAR 0 1
18401: PUSH
18402: LD_INT 22
18404: PUSH
18405: LD_OWVAR 2
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 21
18416: PUSH
18417: LD_INT 3
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PPUSH
18428: CALL_OW 69
18432: ST_TO_ADDR
// if not tmp then
18433: LD_VAR 0 1
18437: NOT
18438: IFFALSE 18442
// exit ;
18440: GO 18468
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18442: LD_VAR 0 1
18446: PUSH
18447: LD_INT 1
18449: PPUSH
18450: LD_VAR 0 1
18454: PPUSH
18455: CALL_OW 12
18459: ARRAY
18460: PPUSH
18461: LD_INT 100
18463: PPUSH
18464: CALL_OW 234
// end ;
18468: PPOPN 1
18470: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18471: LD_EXP 48
18475: PUSH
18476: LD_EXP 62
18480: AND
18481: IFFALSE 18579
18483: GO 18485
18485: DISABLE
18486: LD_INT 0
18488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18489: LD_ADDR_VAR 0 1
18493: PUSH
18494: LD_INT 22
18496: PUSH
18497: LD_OWVAR 2
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 21
18508: PUSH
18509: LD_INT 1
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PPUSH
18520: CALL_OW 69
18524: ST_TO_ADDR
// if not tmp then
18525: LD_VAR 0 1
18529: NOT
18530: IFFALSE 18534
// exit ;
18532: GO 18579
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18534: LD_VAR 0 1
18538: PUSH
18539: LD_INT 1
18541: PPUSH
18542: LD_VAR 0 1
18546: PPUSH
18547: CALL_OW 12
18551: ARRAY
18552: PPUSH
18553: LD_INT 1
18555: PPUSH
18556: LD_INT 4
18558: PPUSH
18559: CALL_OW 12
18563: PPUSH
18564: LD_INT 3000
18566: PPUSH
18567: LD_INT 9000
18569: PPUSH
18570: CALL_OW 12
18574: PPUSH
18575: CALL_OW 492
// end ;
18579: PPOPN 1
18581: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18582: LD_EXP 48
18586: PUSH
18587: LD_EXP 63
18591: AND
18592: IFFALSE 18612
18594: GO 18596
18596: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18597: LD_INT 1
18599: PPUSH
18600: LD_OWVAR 2
18604: PPUSH
18605: LD_INT 0
18607: PPUSH
18608: CALL_OW 324
18612: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18613: LD_EXP 48
18617: PUSH
18618: LD_EXP 64
18622: AND
18623: IFFALSE 18706
18625: GO 18627
18627: DISABLE
18628: LD_INT 0
18630: PPUSH
18631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18632: LD_ADDR_VAR 0 2
18636: PUSH
18637: LD_INT 22
18639: PUSH
18640: LD_OWVAR 2
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 21
18651: PUSH
18652: LD_INT 3
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PPUSH
18663: CALL_OW 69
18667: ST_TO_ADDR
// if not tmp then
18668: LD_VAR 0 2
18672: NOT
18673: IFFALSE 18677
// exit ;
18675: GO 18706
// for i in tmp do
18677: LD_ADDR_VAR 0 1
18681: PUSH
18682: LD_VAR 0 2
18686: PUSH
18687: FOR_IN
18688: IFFALSE 18704
// SetBLevel ( i , 10 ) ;
18690: LD_VAR 0 1
18694: PPUSH
18695: LD_INT 10
18697: PPUSH
18698: CALL_OW 241
18702: GO 18687
18704: POP
18705: POP
// end ;
18706: PPOPN 2
18708: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18709: LD_EXP 48
18713: PUSH
18714: LD_EXP 65
18718: AND
18719: IFFALSE 18830
18721: GO 18723
18723: DISABLE
18724: LD_INT 0
18726: PPUSH
18727: PPUSH
18728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18729: LD_ADDR_VAR 0 3
18733: PUSH
18734: LD_INT 22
18736: PUSH
18737: LD_OWVAR 2
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 25
18748: PUSH
18749: LD_INT 1
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PPUSH
18760: CALL_OW 69
18764: ST_TO_ADDR
// if not tmp then
18765: LD_VAR 0 3
18769: NOT
18770: IFFALSE 18774
// exit ;
18772: GO 18830
// un := tmp [ rand ( 1 , tmp ) ] ;
18774: LD_ADDR_VAR 0 2
18778: PUSH
18779: LD_VAR 0 3
18783: PUSH
18784: LD_INT 1
18786: PPUSH
18787: LD_VAR 0 3
18791: PPUSH
18792: CALL_OW 12
18796: ARRAY
18797: ST_TO_ADDR
// if Crawls ( un ) then
18798: LD_VAR 0 2
18802: PPUSH
18803: CALL_OW 318
18807: IFFALSE 18818
// ComWalk ( un ) ;
18809: LD_VAR 0 2
18813: PPUSH
18814: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18818: LD_VAR 0 2
18822: PPUSH
18823: LD_INT 5
18825: PPUSH
18826: CALL_OW 336
// end ;
18830: PPOPN 3
18832: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18833: LD_EXP 48
18837: PUSH
18838: LD_EXP 66
18842: AND
18843: PUSH
18844: LD_OWVAR 67
18848: PUSH
18849: LD_INT 4
18851: LESS
18852: AND
18853: IFFALSE 18872
18855: GO 18857
18857: DISABLE
// begin Difficulty := Difficulty + 1 ;
18858: LD_ADDR_OWVAR 67
18862: PUSH
18863: LD_OWVAR 67
18867: PUSH
18868: LD_INT 1
18870: PLUS
18871: ST_TO_ADDR
// end ;
18872: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18873: LD_EXP 48
18877: PUSH
18878: LD_EXP 67
18882: AND
18883: IFFALSE 18986
18885: GO 18887
18887: DISABLE
18888: LD_INT 0
18890: PPUSH
// begin for i := 1 to 5 do
18891: LD_ADDR_VAR 0 1
18895: PUSH
18896: DOUBLE
18897: LD_INT 1
18899: DEC
18900: ST_TO_ADDR
18901: LD_INT 5
18903: PUSH
18904: FOR_TO
18905: IFFALSE 18984
// begin uc_nation := nation_nature ;
18907: LD_ADDR_OWVAR 21
18911: PUSH
18912: LD_INT 0
18914: ST_TO_ADDR
// uc_side := 0 ;
18915: LD_ADDR_OWVAR 20
18919: PUSH
18920: LD_INT 0
18922: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18923: LD_ADDR_OWVAR 29
18927: PUSH
18928: LD_INT 12
18930: PUSH
18931: LD_INT 12
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: ST_TO_ADDR
// hc_agressivity := 20 ;
18938: LD_ADDR_OWVAR 35
18942: PUSH
18943: LD_INT 20
18945: ST_TO_ADDR
// hc_class := class_tiger ;
18946: LD_ADDR_OWVAR 28
18950: PUSH
18951: LD_INT 14
18953: ST_TO_ADDR
// hc_gallery :=  ;
18954: LD_ADDR_OWVAR 33
18958: PUSH
18959: LD_STRING 
18961: ST_TO_ADDR
// hc_name :=  ;
18962: LD_ADDR_OWVAR 26
18966: PUSH
18967: LD_STRING 
18969: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18970: CALL_OW 44
18974: PPUSH
18975: LD_INT 0
18977: PPUSH
18978: CALL_OW 51
// end ;
18982: GO 18904
18984: POP
18985: POP
// end ;
18986: PPOPN 1
18988: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18989: LD_EXP 48
18993: PUSH
18994: LD_EXP 68
18998: AND
18999: IFFALSE 19008
19001: GO 19003
19003: DISABLE
// StreamSibBomb ;
19004: CALL 19009 0 0
19008: END
// export function StreamSibBomb ; var i , x , y ; begin
19009: LD_INT 0
19011: PPUSH
19012: PPUSH
19013: PPUSH
19014: PPUSH
// result := false ;
19015: LD_ADDR_VAR 0 1
19019: PUSH
19020: LD_INT 0
19022: ST_TO_ADDR
// for i := 1 to 16 do
19023: LD_ADDR_VAR 0 2
19027: PUSH
19028: DOUBLE
19029: LD_INT 1
19031: DEC
19032: ST_TO_ADDR
19033: LD_INT 16
19035: PUSH
19036: FOR_TO
19037: IFFALSE 19236
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19039: LD_ADDR_VAR 0 3
19043: PUSH
19044: LD_INT 10
19046: PUSH
19047: LD_INT 20
19049: PUSH
19050: LD_INT 30
19052: PUSH
19053: LD_INT 40
19055: PUSH
19056: LD_INT 50
19058: PUSH
19059: LD_INT 60
19061: PUSH
19062: LD_INT 70
19064: PUSH
19065: LD_INT 80
19067: PUSH
19068: LD_INT 90
19070: PUSH
19071: LD_INT 100
19073: PUSH
19074: LD_INT 110
19076: PUSH
19077: LD_INT 120
19079: PUSH
19080: LD_INT 130
19082: PUSH
19083: LD_INT 140
19085: PUSH
19086: LD_INT 150
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 1
19108: PPUSH
19109: LD_INT 15
19111: PPUSH
19112: CALL_OW 12
19116: ARRAY
19117: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19118: LD_ADDR_VAR 0 4
19122: PUSH
19123: LD_INT 10
19125: PUSH
19126: LD_INT 20
19128: PUSH
19129: LD_INT 30
19131: PUSH
19132: LD_INT 40
19134: PUSH
19135: LD_INT 50
19137: PUSH
19138: LD_INT 60
19140: PUSH
19141: LD_INT 70
19143: PUSH
19144: LD_INT 80
19146: PUSH
19147: LD_INT 90
19149: PUSH
19150: LD_INT 100
19152: PUSH
19153: LD_INT 110
19155: PUSH
19156: LD_INT 120
19158: PUSH
19159: LD_INT 130
19161: PUSH
19162: LD_INT 140
19164: PUSH
19165: LD_INT 150
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 1
19187: PPUSH
19188: LD_INT 15
19190: PPUSH
19191: CALL_OW 12
19195: ARRAY
19196: ST_TO_ADDR
// if ValidHex ( x , y ) then
19197: LD_VAR 0 3
19201: PPUSH
19202: LD_VAR 0 4
19206: PPUSH
19207: CALL_OW 488
19211: IFFALSE 19234
// begin result := [ x , y ] ;
19213: LD_ADDR_VAR 0 1
19217: PUSH
19218: LD_VAR 0 3
19222: PUSH
19223: LD_VAR 0 4
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: ST_TO_ADDR
// break ;
19232: GO 19236
// end ; end ;
19234: GO 19036
19236: POP
19237: POP
// if result then
19238: LD_VAR 0 1
19242: IFFALSE 19302
// begin ToLua ( playSibBomb() ) ;
19244: LD_STRING playSibBomb()
19246: PPUSH
19247: CALL_OW 559
// wait ( 0 0$14 ) ;
19251: LD_INT 490
19253: PPUSH
19254: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19258: LD_VAR 0 1
19262: PUSH
19263: LD_INT 1
19265: ARRAY
19266: PPUSH
19267: LD_VAR 0 1
19271: PUSH
19272: LD_INT 2
19274: ARRAY
19275: PPUSH
19276: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19280: LD_VAR 0 1
19284: PUSH
19285: LD_INT 1
19287: ARRAY
19288: PPUSH
19289: LD_VAR 0 1
19293: PUSH
19294: LD_INT 2
19296: ARRAY
19297: PPUSH
19298: CALL_OW 429
// end ; end ;
19302: LD_VAR 0 1
19306: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19307: LD_EXP 48
19311: PUSH
19312: LD_EXP 70
19316: AND
19317: IFFALSE 19329
19319: GO 19321
19321: DISABLE
// YouLost (  ) ;
19322: LD_STRING 
19324: PPUSH
19325: CALL_OW 104
19329: END
// every 0 0$1 trigger StreamModeActive and sFog do
19330: LD_EXP 48
19334: PUSH
19335: LD_EXP 69
19339: AND
19340: IFFALSE 19354
19342: GO 19344
19344: DISABLE
// FogOff ( your_side ) ;
19345: LD_OWVAR 2
19349: PPUSH
19350: CALL_OW 344
19354: END
// every 0 0$1 trigger StreamModeActive and sSun do
19355: LD_EXP 48
19359: PUSH
19360: LD_EXP 71
19364: AND
19365: IFFALSE 19393
19367: GO 19369
19369: DISABLE
// begin solar_recharge_percent := 0 ;
19370: LD_ADDR_OWVAR 79
19374: PUSH
19375: LD_INT 0
19377: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19378: LD_INT 10500
19380: PPUSH
19381: CALL_OW 67
// solar_recharge_percent := 100 ;
19385: LD_ADDR_OWVAR 79
19389: PUSH
19390: LD_INT 100
19392: ST_TO_ADDR
// end ;
19393: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19394: LD_EXP 48
19398: PUSH
19399: LD_EXP 72
19403: AND
19404: IFFALSE 19643
19406: GO 19408
19408: DISABLE
19409: LD_INT 0
19411: PPUSH
19412: PPUSH
19413: PPUSH
// begin tmp := [ ] ;
19414: LD_ADDR_VAR 0 3
19418: PUSH
19419: EMPTY
19420: ST_TO_ADDR
// for i := 1 to 6 do
19421: LD_ADDR_VAR 0 1
19425: PUSH
19426: DOUBLE
19427: LD_INT 1
19429: DEC
19430: ST_TO_ADDR
19431: LD_INT 6
19433: PUSH
19434: FOR_TO
19435: IFFALSE 19540
// begin uc_nation := nation_nature ;
19437: LD_ADDR_OWVAR 21
19441: PUSH
19442: LD_INT 0
19444: ST_TO_ADDR
// uc_side := 0 ;
19445: LD_ADDR_OWVAR 20
19449: PUSH
19450: LD_INT 0
19452: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19453: LD_ADDR_OWVAR 29
19457: PUSH
19458: LD_INT 12
19460: PUSH
19461: LD_INT 12
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: ST_TO_ADDR
// hc_agressivity := 20 ;
19468: LD_ADDR_OWVAR 35
19472: PUSH
19473: LD_INT 20
19475: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19476: LD_ADDR_OWVAR 28
19480: PUSH
19481: LD_INT 17
19483: ST_TO_ADDR
// hc_gallery :=  ;
19484: LD_ADDR_OWVAR 33
19488: PUSH
19489: LD_STRING 
19491: ST_TO_ADDR
// hc_name :=  ;
19492: LD_ADDR_OWVAR 26
19496: PUSH
19497: LD_STRING 
19499: ST_TO_ADDR
// un := CreateHuman ;
19500: LD_ADDR_VAR 0 2
19504: PUSH
19505: CALL_OW 44
19509: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19510: LD_VAR 0 2
19514: PPUSH
19515: LD_INT 1
19517: PPUSH
19518: CALL_OW 51
// tmp := tmp ^ un ;
19522: LD_ADDR_VAR 0 3
19526: PUSH
19527: LD_VAR 0 3
19531: PUSH
19532: LD_VAR 0 2
19536: ADD
19537: ST_TO_ADDR
// end ;
19538: GO 19434
19540: POP
19541: POP
// repeat wait ( 0 0$1 ) ;
19542: LD_INT 35
19544: PPUSH
19545: CALL_OW 67
// for un in tmp do
19549: LD_ADDR_VAR 0 2
19553: PUSH
19554: LD_VAR 0 3
19558: PUSH
19559: FOR_IN
19560: IFFALSE 19634
// begin if IsDead ( un ) then
19562: LD_VAR 0 2
19566: PPUSH
19567: CALL_OW 301
19571: IFFALSE 19591
// begin tmp := tmp diff un ;
19573: LD_ADDR_VAR 0 3
19577: PUSH
19578: LD_VAR 0 3
19582: PUSH
19583: LD_VAR 0 2
19587: DIFF
19588: ST_TO_ADDR
// continue ;
19589: GO 19559
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19591: LD_VAR 0 2
19595: PPUSH
19596: LD_INT 3
19598: PUSH
19599: LD_INT 22
19601: PUSH
19602: LD_INT 0
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PPUSH
19613: CALL_OW 69
19617: PPUSH
19618: LD_VAR 0 2
19622: PPUSH
19623: CALL_OW 74
19627: PPUSH
19628: CALL_OW 115
// end ;
19632: GO 19559
19634: POP
19635: POP
// until not tmp ;
19636: LD_VAR 0 3
19640: NOT
19641: IFFALSE 19542
// end ;
19643: PPOPN 3
19645: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19646: LD_EXP 48
19650: PUSH
19651: LD_EXP 73
19655: AND
19656: IFFALSE 19710
19658: GO 19660
19660: DISABLE
// begin ToLua ( displayTroll(); ) ;
19661: LD_STRING displayTroll();
19663: PPUSH
19664: CALL_OW 559
// wait ( 3 3$00 ) ;
19668: LD_INT 6300
19670: PPUSH
19671: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19675: LD_STRING hideTroll();
19677: PPUSH
19678: CALL_OW 559
// wait ( 1 1$00 ) ;
19682: LD_INT 2100
19684: PPUSH
19685: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19689: LD_STRING displayTroll();
19691: PPUSH
19692: CALL_OW 559
// wait ( 1 1$00 ) ;
19696: LD_INT 2100
19698: PPUSH
19699: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19703: LD_STRING hideTroll();
19705: PPUSH
19706: CALL_OW 559
// end ;
19710: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19711: LD_EXP 48
19715: PUSH
19716: LD_EXP 74
19720: AND
19721: IFFALSE 19784
19723: GO 19725
19725: DISABLE
19726: LD_INT 0
19728: PPUSH
// begin p := 0 ;
19729: LD_ADDR_VAR 0 1
19733: PUSH
19734: LD_INT 0
19736: ST_TO_ADDR
// repeat game_speed := 1 ;
19737: LD_ADDR_OWVAR 65
19741: PUSH
19742: LD_INT 1
19744: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19745: LD_INT 35
19747: PPUSH
19748: CALL_OW 67
// p := p + 1 ;
19752: LD_ADDR_VAR 0 1
19756: PUSH
19757: LD_VAR 0 1
19761: PUSH
19762: LD_INT 1
19764: PLUS
19765: ST_TO_ADDR
// until p >= 60 ;
19766: LD_VAR 0 1
19770: PUSH
19771: LD_INT 60
19773: GREATEREQUAL
19774: IFFALSE 19737
// game_speed := 4 ;
19776: LD_ADDR_OWVAR 65
19780: PUSH
19781: LD_INT 4
19783: ST_TO_ADDR
// end ;
19784: PPOPN 1
19786: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19787: LD_EXP 48
19791: PUSH
19792: LD_EXP 75
19796: AND
19797: IFFALSE 19943
19799: GO 19801
19801: DISABLE
19802: LD_INT 0
19804: PPUSH
19805: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19806: LD_ADDR_VAR 0 1
19810: PUSH
19811: LD_INT 22
19813: PUSH
19814: LD_OWVAR 2
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 2
19825: PUSH
19826: LD_INT 30
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 30
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PPUSH
19855: CALL_OW 69
19859: ST_TO_ADDR
// if not depot then
19860: LD_VAR 0 1
19864: NOT
19865: IFFALSE 19869
// exit ;
19867: GO 19943
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19869: LD_ADDR_VAR 0 2
19873: PUSH
19874: LD_VAR 0 1
19878: PUSH
19879: LD_INT 1
19881: PPUSH
19882: LD_VAR 0 1
19886: PPUSH
19887: CALL_OW 12
19891: ARRAY
19892: PPUSH
19893: CALL_OW 274
19897: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19898: LD_VAR 0 2
19902: PPUSH
19903: LD_INT 1
19905: PPUSH
19906: LD_INT 0
19908: PPUSH
19909: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19913: LD_VAR 0 2
19917: PPUSH
19918: LD_INT 2
19920: PPUSH
19921: LD_INT 0
19923: PPUSH
19924: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19928: LD_VAR 0 2
19932: PPUSH
19933: LD_INT 3
19935: PPUSH
19936: LD_INT 0
19938: PPUSH
19939: CALL_OW 277
// end ;
19943: PPOPN 2
19945: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19946: LD_EXP 48
19950: PUSH
19951: LD_EXP 76
19955: AND
19956: IFFALSE 20053
19958: GO 19960
19960: DISABLE
19961: LD_INT 0
19963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19964: LD_ADDR_VAR 0 1
19968: PUSH
19969: LD_INT 22
19971: PUSH
19972: LD_OWVAR 2
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 21
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 3
19993: PUSH
19994: LD_INT 23
19996: PUSH
19997: LD_INT 0
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: LIST
20012: PPUSH
20013: CALL_OW 69
20017: ST_TO_ADDR
// if not tmp then
20018: LD_VAR 0 1
20022: NOT
20023: IFFALSE 20027
// exit ;
20025: GO 20053
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20027: LD_VAR 0 1
20031: PUSH
20032: LD_INT 1
20034: PPUSH
20035: LD_VAR 0 1
20039: PPUSH
20040: CALL_OW 12
20044: ARRAY
20045: PPUSH
20046: LD_INT 200
20048: PPUSH
20049: CALL_OW 234
// end ;
20053: PPOPN 1
20055: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20056: LD_EXP 48
20060: PUSH
20061: LD_EXP 77
20065: AND
20066: IFFALSE 20145
20068: GO 20070
20070: DISABLE
20071: LD_INT 0
20073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20074: LD_ADDR_VAR 0 1
20078: PUSH
20079: LD_INT 22
20081: PUSH
20082: LD_OWVAR 2
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 21
20093: PUSH
20094: LD_INT 2
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PPUSH
20105: CALL_OW 69
20109: ST_TO_ADDR
// if not tmp then
20110: LD_VAR 0 1
20114: NOT
20115: IFFALSE 20119
// exit ;
20117: GO 20145
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20119: LD_VAR 0 1
20123: PUSH
20124: LD_INT 1
20126: PPUSH
20127: LD_VAR 0 1
20131: PPUSH
20132: CALL_OW 12
20136: ARRAY
20137: PPUSH
20138: LD_INT 60
20140: PPUSH
20141: CALL_OW 234
// end ;
20145: PPOPN 1
20147: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20148: LD_EXP 48
20152: PUSH
20153: LD_EXP 78
20157: AND
20158: IFFALSE 20257
20160: GO 20162
20162: DISABLE
20163: LD_INT 0
20165: PPUSH
20166: PPUSH
// begin enable ;
20167: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20168: LD_ADDR_VAR 0 1
20172: PUSH
20173: LD_INT 22
20175: PUSH
20176: LD_OWVAR 2
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 61
20187: PUSH
20188: EMPTY
20189: LIST
20190: PUSH
20191: LD_INT 33
20193: PUSH
20194: LD_INT 2
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: LIST
20205: PPUSH
20206: CALL_OW 69
20210: ST_TO_ADDR
// if not tmp then
20211: LD_VAR 0 1
20215: NOT
20216: IFFALSE 20220
// exit ;
20218: GO 20257
// for i in tmp do
20220: LD_ADDR_VAR 0 2
20224: PUSH
20225: LD_VAR 0 1
20229: PUSH
20230: FOR_IN
20231: IFFALSE 20255
// if IsControledBy ( i ) then
20233: LD_VAR 0 2
20237: PPUSH
20238: CALL_OW 312
20242: IFFALSE 20253
// ComUnlink ( i ) ;
20244: LD_VAR 0 2
20248: PPUSH
20249: CALL_OW 136
20253: GO 20230
20255: POP
20256: POP
// end ;
20257: PPOPN 2
20259: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20260: LD_EXP 48
20264: PUSH
20265: LD_EXP 79
20269: AND
20270: IFFALSE 20410
20272: GO 20274
20274: DISABLE
20275: LD_INT 0
20277: PPUSH
20278: PPUSH
// begin ToLua ( displayPowell(); ) ;
20279: LD_STRING displayPowell();
20281: PPUSH
20282: CALL_OW 559
// uc_side := 0 ;
20286: LD_ADDR_OWVAR 20
20290: PUSH
20291: LD_INT 0
20293: ST_TO_ADDR
// uc_nation := 2 ;
20294: LD_ADDR_OWVAR 21
20298: PUSH
20299: LD_INT 2
20301: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20302: LD_ADDR_OWVAR 37
20306: PUSH
20307: LD_INT 14
20309: ST_TO_ADDR
// vc_engine := engine_siberite ;
20310: LD_ADDR_OWVAR 39
20314: PUSH
20315: LD_INT 3
20317: ST_TO_ADDR
// vc_control := control_apeman ;
20318: LD_ADDR_OWVAR 38
20322: PUSH
20323: LD_INT 5
20325: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20326: LD_ADDR_OWVAR 40
20330: PUSH
20331: LD_INT 29
20333: ST_TO_ADDR
// un := CreateVehicle ;
20334: LD_ADDR_VAR 0 2
20338: PUSH
20339: CALL_OW 45
20343: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20344: LD_VAR 0 2
20348: PPUSH
20349: LD_INT 1
20351: PPUSH
20352: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20356: LD_INT 35
20358: PPUSH
20359: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20363: LD_VAR 0 2
20367: PPUSH
20368: LD_INT 22
20370: PUSH
20371: LD_OWVAR 2
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PPUSH
20380: CALL_OW 69
20384: PPUSH
20385: LD_VAR 0 2
20389: PPUSH
20390: CALL_OW 74
20394: PPUSH
20395: CALL_OW 115
// until IsDead ( un ) ;
20399: LD_VAR 0 2
20403: PPUSH
20404: CALL_OW 301
20408: IFFALSE 20356
// end ;
20410: PPOPN 2
20412: END
// every 0 0$1 trigger StreamModeActive and sStu do
20413: LD_EXP 48
20417: PUSH
20418: LD_EXP 87
20422: AND
20423: IFFALSE 20439
20425: GO 20427
20427: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20428: LD_STRING displayStucuk();
20430: PPUSH
20431: CALL_OW 559
// ResetFog ;
20435: CALL_OW 335
// end ;
20439: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20440: LD_EXP 48
20444: PUSH
20445: LD_EXP 80
20449: AND
20450: IFFALSE 20591
20452: GO 20454
20454: DISABLE
20455: LD_INT 0
20457: PPUSH
20458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20459: LD_ADDR_VAR 0 2
20463: PUSH
20464: LD_INT 22
20466: PUSH
20467: LD_OWVAR 2
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 21
20478: PUSH
20479: LD_INT 1
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PPUSH
20490: CALL_OW 69
20494: ST_TO_ADDR
// if not tmp then
20495: LD_VAR 0 2
20499: NOT
20500: IFFALSE 20504
// exit ;
20502: GO 20591
// un := tmp [ rand ( 1 , tmp ) ] ;
20504: LD_ADDR_VAR 0 1
20508: PUSH
20509: LD_VAR 0 2
20513: PUSH
20514: LD_INT 1
20516: PPUSH
20517: LD_VAR 0 2
20521: PPUSH
20522: CALL_OW 12
20526: ARRAY
20527: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20528: LD_VAR 0 1
20532: PPUSH
20533: LD_INT 0
20535: PPUSH
20536: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20540: LD_VAR 0 1
20544: PPUSH
20545: LD_OWVAR 3
20549: PUSH
20550: LD_VAR 0 1
20554: DIFF
20555: PPUSH
20556: LD_VAR 0 1
20560: PPUSH
20561: CALL_OW 74
20565: PPUSH
20566: CALL_OW 115
// wait ( 0 0$20 ) ;
20570: LD_INT 700
20572: PPUSH
20573: CALL_OW 67
// SetSide ( un , your_side ) ;
20577: LD_VAR 0 1
20581: PPUSH
20582: LD_OWVAR 2
20586: PPUSH
20587: CALL_OW 235
// end ;
20591: PPOPN 2
20593: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20594: LD_EXP 48
20598: PUSH
20599: LD_EXP 81
20603: AND
20604: IFFALSE 20710
20606: GO 20608
20608: DISABLE
20609: LD_INT 0
20611: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20612: LD_ADDR_VAR 0 1
20616: PUSH
20617: LD_INT 22
20619: PUSH
20620: LD_OWVAR 2
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 2
20631: PUSH
20632: LD_INT 30
20634: PUSH
20635: LD_INT 0
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 30
20644: PUSH
20645: LD_INT 1
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: LIST
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PPUSH
20661: CALL_OW 69
20665: ST_TO_ADDR
// if not depot then
20666: LD_VAR 0 1
20670: NOT
20671: IFFALSE 20675
// exit ;
20673: GO 20710
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20675: LD_VAR 0 1
20679: PUSH
20680: LD_INT 1
20682: ARRAY
20683: PPUSH
20684: CALL_OW 250
20688: PPUSH
20689: LD_VAR 0 1
20693: PUSH
20694: LD_INT 1
20696: ARRAY
20697: PPUSH
20698: CALL_OW 251
20702: PPUSH
20703: LD_INT 70
20705: PPUSH
20706: CALL_OW 495
// end ;
20710: PPOPN 1
20712: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20713: LD_EXP 48
20717: PUSH
20718: LD_EXP 82
20722: AND
20723: IFFALSE 20934
20725: GO 20727
20727: DISABLE
20728: LD_INT 0
20730: PPUSH
20731: PPUSH
20732: PPUSH
20733: PPUSH
20734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20735: LD_ADDR_VAR 0 5
20739: PUSH
20740: LD_INT 22
20742: PUSH
20743: LD_OWVAR 2
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 21
20754: PUSH
20755: LD_INT 1
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PPUSH
20766: CALL_OW 69
20770: ST_TO_ADDR
// if not tmp then
20771: LD_VAR 0 5
20775: NOT
20776: IFFALSE 20780
// exit ;
20778: GO 20934
// for i in tmp do
20780: LD_ADDR_VAR 0 1
20784: PUSH
20785: LD_VAR 0 5
20789: PUSH
20790: FOR_IN
20791: IFFALSE 20932
// begin d := rand ( 0 , 5 ) ;
20793: LD_ADDR_VAR 0 4
20797: PUSH
20798: LD_INT 0
20800: PPUSH
20801: LD_INT 5
20803: PPUSH
20804: CALL_OW 12
20808: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20809: LD_ADDR_VAR 0 2
20813: PUSH
20814: LD_VAR 0 1
20818: PPUSH
20819: CALL_OW 250
20823: PPUSH
20824: LD_VAR 0 4
20828: PPUSH
20829: LD_INT 3
20831: PPUSH
20832: LD_INT 12
20834: PPUSH
20835: CALL_OW 12
20839: PPUSH
20840: CALL_OW 272
20844: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20845: LD_ADDR_VAR 0 3
20849: PUSH
20850: LD_VAR 0 1
20854: PPUSH
20855: CALL_OW 251
20859: PPUSH
20860: LD_VAR 0 4
20864: PPUSH
20865: LD_INT 3
20867: PPUSH
20868: LD_INT 12
20870: PPUSH
20871: CALL_OW 12
20875: PPUSH
20876: CALL_OW 273
20880: ST_TO_ADDR
// if ValidHex ( x , y ) then
20881: LD_VAR 0 2
20885: PPUSH
20886: LD_VAR 0 3
20890: PPUSH
20891: CALL_OW 488
20895: IFFALSE 20930
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20897: LD_VAR 0 1
20901: PPUSH
20902: LD_VAR 0 2
20906: PPUSH
20907: LD_VAR 0 3
20911: PPUSH
20912: LD_INT 3
20914: PPUSH
20915: LD_INT 6
20917: PPUSH
20918: CALL_OW 12
20922: PPUSH
20923: LD_INT 1
20925: PPUSH
20926: CALL_OW 483
// end ;
20930: GO 20790
20932: POP
20933: POP
// end ;
20934: PPOPN 5
20936: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20937: LD_EXP 48
20941: PUSH
20942: LD_EXP 83
20946: AND
20947: IFFALSE 21041
20949: GO 20951
20951: DISABLE
20952: LD_INT 0
20954: PPUSH
20955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20956: LD_ADDR_VAR 0 2
20960: PUSH
20961: LD_INT 22
20963: PUSH
20964: LD_OWVAR 2
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 32
20975: PUSH
20976: LD_INT 1
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 21
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: PPUSH
20998: CALL_OW 69
21002: ST_TO_ADDR
// if not tmp then
21003: LD_VAR 0 2
21007: NOT
21008: IFFALSE 21012
// exit ;
21010: GO 21041
// for i in tmp do
21012: LD_ADDR_VAR 0 1
21016: PUSH
21017: LD_VAR 0 2
21021: PUSH
21022: FOR_IN
21023: IFFALSE 21039
// SetFuel ( i , 0 ) ;
21025: LD_VAR 0 1
21029: PPUSH
21030: LD_INT 0
21032: PPUSH
21033: CALL_OW 240
21037: GO 21022
21039: POP
21040: POP
// end ;
21041: PPOPN 2
21043: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21044: LD_EXP 48
21048: PUSH
21049: LD_EXP 84
21053: AND
21054: IFFALSE 21120
21056: GO 21058
21058: DISABLE
21059: LD_INT 0
21061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21062: LD_ADDR_VAR 0 1
21066: PUSH
21067: LD_INT 22
21069: PUSH
21070: LD_OWVAR 2
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 30
21081: PUSH
21082: LD_INT 29
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PPUSH
21093: CALL_OW 69
21097: ST_TO_ADDR
// if not tmp then
21098: LD_VAR 0 1
21102: NOT
21103: IFFALSE 21107
// exit ;
21105: GO 21120
// DestroyUnit ( tmp [ 1 ] ) ;
21107: LD_VAR 0 1
21111: PUSH
21112: LD_INT 1
21114: ARRAY
21115: PPUSH
21116: CALL_OW 65
// end ;
21120: PPOPN 1
21122: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21123: LD_EXP 48
21127: PUSH
21128: LD_EXP 86
21132: AND
21133: IFFALSE 21262
21135: GO 21137
21137: DISABLE
21138: LD_INT 0
21140: PPUSH
// begin uc_side := 0 ;
21141: LD_ADDR_OWVAR 20
21145: PUSH
21146: LD_INT 0
21148: ST_TO_ADDR
// uc_nation := nation_arabian ;
21149: LD_ADDR_OWVAR 21
21153: PUSH
21154: LD_INT 2
21156: ST_TO_ADDR
// hc_gallery :=  ;
21157: LD_ADDR_OWVAR 33
21161: PUSH
21162: LD_STRING 
21164: ST_TO_ADDR
// hc_name :=  ;
21165: LD_ADDR_OWVAR 26
21169: PUSH
21170: LD_STRING 
21172: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21173: LD_INT 1
21175: PPUSH
21176: LD_INT 11
21178: PPUSH
21179: LD_INT 10
21181: PPUSH
21182: CALL_OW 380
// un := CreateHuman ;
21186: LD_ADDR_VAR 0 1
21190: PUSH
21191: CALL_OW 44
21195: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21196: LD_VAR 0 1
21200: PPUSH
21201: LD_INT 1
21203: PPUSH
21204: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21208: LD_INT 35
21210: PPUSH
21211: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21215: LD_VAR 0 1
21219: PPUSH
21220: LD_INT 22
21222: PUSH
21223: LD_OWVAR 2
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PPUSH
21232: CALL_OW 69
21236: PPUSH
21237: LD_VAR 0 1
21241: PPUSH
21242: CALL_OW 74
21246: PPUSH
21247: CALL_OW 115
// until IsDead ( un ) ;
21251: LD_VAR 0 1
21255: PPUSH
21256: CALL_OW 301
21260: IFFALSE 21208
// end ;
21262: PPOPN 1
21264: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21265: LD_EXP 48
21269: PUSH
21270: LD_EXP 88
21274: AND
21275: IFFALSE 21287
21277: GO 21279
21279: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21280: LD_STRING earthquake(getX(game), 0, 32)
21282: PPUSH
21283: CALL_OW 559
21287: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21288: LD_EXP 48
21292: PUSH
21293: LD_EXP 89
21297: AND
21298: IFFALSE 21389
21300: GO 21302
21302: DISABLE
21303: LD_INT 0
21305: PPUSH
// begin enable ;
21306: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21307: LD_ADDR_VAR 0 1
21311: PUSH
21312: LD_INT 22
21314: PUSH
21315: LD_OWVAR 2
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 21
21326: PUSH
21327: LD_INT 2
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 33
21336: PUSH
21337: LD_INT 3
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: PPUSH
21349: CALL_OW 69
21353: ST_TO_ADDR
// if not tmp then
21354: LD_VAR 0 1
21358: NOT
21359: IFFALSE 21363
// exit ;
21361: GO 21389
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21363: LD_VAR 0 1
21367: PUSH
21368: LD_INT 1
21370: PPUSH
21371: LD_VAR 0 1
21375: PPUSH
21376: CALL_OW 12
21380: ARRAY
21381: PPUSH
21382: LD_INT 1
21384: PPUSH
21385: CALL_OW 234
// end ;
21389: PPOPN 1
21391: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21392: LD_EXP 48
21396: PUSH
21397: LD_EXP 90
21401: AND
21402: IFFALSE 21543
21404: GO 21406
21406: DISABLE
21407: LD_INT 0
21409: PPUSH
21410: PPUSH
21411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21412: LD_ADDR_VAR 0 3
21416: PUSH
21417: LD_INT 22
21419: PUSH
21420: LD_OWVAR 2
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 25
21431: PUSH
21432: LD_INT 1
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PPUSH
21443: CALL_OW 69
21447: ST_TO_ADDR
// if not tmp then
21448: LD_VAR 0 3
21452: NOT
21453: IFFALSE 21457
// exit ;
21455: GO 21543
// un := tmp [ rand ( 1 , tmp ) ] ;
21457: LD_ADDR_VAR 0 2
21461: PUSH
21462: LD_VAR 0 3
21466: PUSH
21467: LD_INT 1
21469: PPUSH
21470: LD_VAR 0 3
21474: PPUSH
21475: CALL_OW 12
21479: ARRAY
21480: ST_TO_ADDR
// if Crawls ( un ) then
21481: LD_VAR 0 2
21485: PPUSH
21486: CALL_OW 318
21490: IFFALSE 21501
// ComWalk ( un ) ;
21492: LD_VAR 0 2
21496: PPUSH
21497: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21501: LD_VAR 0 2
21505: PPUSH
21506: LD_INT 9
21508: PPUSH
21509: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21513: LD_INT 28
21515: PPUSH
21516: LD_OWVAR 2
21520: PPUSH
21521: LD_INT 2
21523: PPUSH
21524: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21528: LD_INT 29
21530: PPUSH
21531: LD_OWVAR 2
21535: PPUSH
21536: LD_INT 2
21538: PPUSH
21539: CALL_OW 322
// end ;
21543: PPOPN 3
21545: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21546: LD_EXP 48
21550: PUSH
21551: LD_EXP 91
21555: AND
21556: IFFALSE 21667
21558: GO 21560
21560: DISABLE
21561: LD_INT 0
21563: PPUSH
21564: PPUSH
21565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21566: LD_ADDR_VAR 0 3
21570: PUSH
21571: LD_INT 22
21573: PUSH
21574: LD_OWVAR 2
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 25
21585: PUSH
21586: LD_INT 1
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PPUSH
21597: CALL_OW 69
21601: ST_TO_ADDR
// if not tmp then
21602: LD_VAR 0 3
21606: NOT
21607: IFFALSE 21611
// exit ;
21609: GO 21667
// un := tmp [ rand ( 1 , tmp ) ] ;
21611: LD_ADDR_VAR 0 2
21615: PUSH
21616: LD_VAR 0 3
21620: PUSH
21621: LD_INT 1
21623: PPUSH
21624: LD_VAR 0 3
21628: PPUSH
21629: CALL_OW 12
21633: ARRAY
21634: ST_TO_ADDR
// if Crawls ( un ) then
21635: LD_VAR 0 2
21639: PPUSH
21640: CALL_OW 318
21644: IFFALSE 21655
// ComWalk ( un ) ;
21646: LD_VAR 0 2
21650: PPUSH
21651: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21655: LD_VAR 0 2
21659: PPUSH
21660: LD_INT 8
21662: PPUSH
21663: CALL_OW 336
// end ;
21667: PPOPN 3
21669: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21670: LD_EXP 48
21674: PUSH
21675: LD_EXP 92
21679: AND
21680: IFFALSE 21824
21682: GO 21684
21684: DISABLE
21685: LD_INT 0
21687: PPUSH
21688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21689: LD_ADDR_VAR 0 2
21693: PUSH
21694: LD_INT 22
21696: PUSH
21697: LD_OWVAR 2
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 21
21708: PUSH
21709: LD_INT 2
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 2
21718: PUSH
21719: LD_INT 34
21721: PUSH
21722: LD_INT 12
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 34
21731: PUSH
21732: LD_INT 51
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 34
21741: PUSH
21742: LD_INT 32
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: LIST
21759: PPUSH
21760: CALL_OW 69
21764: ST_TO_ADDR
// if not tmp then
21765: LD_VAR 0 2
21769: NOT
21770: IFFALSE 21774
// exit ;
21772: GO 21824
// for i in tmp do
21774: LD_ADDR_VAR 0 1
21778: PUSH
21779: LD_VAR 0 2
21783: PUSH
21784: FOR_IN
21785: IFFALSE 21822
// if GetCargo ( i , mat_artifact ) = 0 then
21787: LD_VAR 0 1
21791: PPUSH
21792: LD_INT 4
21794: PPUSH
21795: CALL_OW 289
21799: PUSH
21800: LD_INT 0
21802: EQUAL
21803: IFFALSE 21820
// SetCargo ( i , mat_siberit , 100 ) ;
21805: LD_VAR 0 1
21809: PPUSH
21810: LD_INT 3
21812: PPUSH
21813: LD_INT 100
21815: PPUSH
21816: CALL_OW 290
21820: GO 21784
21822: POP
21823: POP
// end ;
21824: PPOPN 2
21826: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21827: LD_EXP 48
21831: PUSH
21832: LD_EXP 93
21836: AND
21837: IFFALSE 22020
21839: GO 21841
21841: DISABLE
21842: LD_INT 0
21844: PPUSH
21845: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21846: LD_ADDR_VAR 0 2
21850: PUSH
21851: LD_INT 22
21853: PUSH
21854: LD_OWVAR 2
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PPUSH
21863: CALL_OW 69
21867: ST_TO_ADDR
// if not tmp then
21868: LD_VAR 0 2
21872: NOT
21873: IFFALSE 21877
// exit ;
21875: GO 22020
// for i := 1 to 2 do
21877: LD_ADDR_VAR 0 1
21881: PUSH
21882: DOUBLE
21883: LD_INT 1
21885: DEC
21886: ST_TO_ADDR
21887: LD_INT 2
21889: PUSH
21890: FOR_TO
21891: IFFALSE 22018
// begin uc_side := your_side ;
21893: LD_ADDR_OWVAR 20
21897: PUSH
21898: LD_OWVAR 2
21902: ST_TO_ADDR
// uc_nation := nation_american ;
21903: LD_ADDR_OWVAR 21
21907: PUSH
21908: LD_INT 1
21910: ST_TO_ADDR
// vc_chassis := us_morphling ;
21911: LD_ADDR_OWVAR 37
21915: PUSH
21916: LD_INT 5
21918: ST_TO_ADDR
// vc_engine := engine_siberite ;
21919: LD_ADDR_OWVAR 39
21923: PUSH
21924: LD_INT 3
21926: ST_TO_ADDR
// vc_control := control_computer ;
21927: LD_ADDR_OWVAR 38
21931: PUSH
21932: LD_INT 3
21934: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21935: LD_ADDR_OWVAR 40
21939: PUSH
21940: LD_INT 10
21942: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21943: LD_VAR 0 2
21947: PUSH
21948: LD_INT 1
21950: ARRAY
21951: PPUSH
21952: CALL_OW 310
21956: NOT
21957: IFFALSE 22004
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21959: CALL_OW 45
21963: PPUSH
21964: LD_VAR 0 2
21968: PUSH
21969: LD_INT 1
21971: ARRAY
21972: PPUSH
21973: CALL_OW 250
21977: PPUSH
21978: LD_VAR 0 2
21982: PUSH
21983: LD_INT 1
21985: ARRAY
21986: PPUSH
21987: CALL_OW 251
21991: PPUSH
21992: LD_INT 12
21994: PPUSH
21995: LD_INT 1
21997: PPUSH
21998: CALL_OW 50
22002: GO 22016
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22004: CALL_OW 45
22008: PPUSH
22009: LD_INT 1
22011: PPUSH
22012: CALL_OW 51
// end ;
22016: GO 21890
22018: POP
22019: POP
// end ;
22020: PPOPN 2
22022: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22023: LD_EXP 48
22027: PUSH
22028: LD_EXP 94
22032: AND
22033: IFFALSE 22255
22035: GO 22037
22037: DISABLE
22038: LD_INT 0
22040: PPUSH
22041: PPUSH
22042: PPUSH
22043: PPUSH
22044: PPUSH
22045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22046: LD_ADDR_VAR 0 6
22050: PUSH
22051: LD_INT 22
22053: PUSH
22054: LD_OWVAR 2
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 21
22065: PUSH
22066: LD_INT 1
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 3
22075: PUSH
22076: LD_INT 23
22078: PUSH
22079: LD_INT 0
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: LIST
22094: PPUSH
22095: CALL_OW 69
22099: ST_TO_ADDR
// if not tmp then
22100: LD_VAR 0 6
22104: NOT
22105: IFFALSE 22109
// exit ;
22107: GO 22255
// s1 := rand ( 1 , 4 ) ;
22109: LD_ADDR_VAR 0 2
22113: PUSH
22114: LD_INT 1
22116: PPUSH
22117: LD_INT 4
22119: PPUSH
22120: CALL_OW 12
22124: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22125: LD_ADDR_VAR 0 4
22129: PUSH
22130: LD_VAR 0 6
22134: PUSH
22135: LD_INT 1
22137: ARRAY
22138: PPUSH
22139: LD_VAR 0 2
22143: PPUSH
22144: CALL_OW 259
22148: ST_TO_ADDR
// if s1 = 1 then
22149: LD_VAR 0 2
22153: PUSH
22154: LD_INT 1
22156: EQUAL
22157: IFFALSE 22177
// s2 := rand ( 2 , 4 ) else
22159: LD_ADDR_VAR 0 3
22163: PUSH
22164: LD_INT 2
22166: PPUSH
22167: LD_INT 4
22169: PPUSH
22170: CALL_OW 12
22174: ST_TO_ADDR
22175: GO 22185
// s2 := 1 ;
22177: LD_ADDR_VAR 0 3
22181: PUSH
22182: LD_INT 1
22184: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22185: LD_ADDR_VAR 0 5
22189: PUSH
22190: LD_VAR 0 6
22194: PUSH
22195: LD_INT 1
22197: ARRAY
22198: PPUSH
22199: LD_VAR 0 3
22203: PPUSH
22204: CALL_OW 259
22208: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22209: LD_VAR 0 6
22213: PUSH
22214: LD_INT 1
22216: ARRAY
22217: PPUSH
22218: LD_VAR 0 2
22222: PPUSH
22223: LD_VAR 0 5
22227: PPUSH
22228: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22232: LD_VAR 0 6
22236: PUSH
22237: LD_INT 1
22239: ARRAY
22240: PPUSH
22241: LD_VAR 0 3
22245: PPUSH
22246: LD_VAR 0 4
22250: PPUSH
22251: CALL_OW 237
// end ;
22255: PPOPN 6
22257: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22258: LD_EXP 48
22262: PUSH
22263: LD_EXP 95
22267: AND
22268: IFFALSE 22347
22270: GO 22272
22272: DISABLE
22273: LD_INT 0
22275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22276: LD_ADDR_VAR 0 1
22280: PUSH
22281: LD_INT 22
22283: PUSH
22284: LD_OWVAR 2
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 30
22295: PUSH
22296: LD_INT 3
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PPUSH
22307: CALL_OW 69
22311: ST_TO_ADDR
// if not tmp then
22312: LD_VAR 0 1
22316: NOT
22317: IFFALSE 22321
// exit ;
22319: GO 22347
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22321: LD_VAR 0 1
22325: PUSH
22326: LD_INT 1
22328: PPUSH
22329: LD_VAR 0 1
22333: PPUSH
22334: CALL_OW 12
22338: ARRAY
22339: PPUSH
22340: LD_INT 1
22342: PPUSH
22343: CALL_OW 234
// end ;
22347: PPOPN 1
22349: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22350: LD_EXP 48
22354: PUSH
22355: LD_EXP 96
22359: AND
22360: IFFALSE 22472
22362: GO 22364
22364: DISABLE
22365: LD_INT 0
22367: PPUSH
22368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22369: LD_ADDR_VAR 0 2
22373: PUSH
22374: LD_INT 22
22376: PUSH
22377: LD_OWVAR 2
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 2
22388: PUSH
22389: LD_INT 30
22391: PUSH
22392: LD_INT 27
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 30
22401: PUSH
22402: LD_INT 26
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 30
22411: PUSH
22412: LD_INT 28
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PPUSH
22429: CALL_OW 69
22433: ST_TO_ADDR
// if not tmp then
22434: LD_VAR 0 2
22438: NOT
22439: IFFALSE 22443
// exit ;
22441: GO 22472
// for i in tmp do
22443: LD_ADDR_VAR 0 1
22447: PUSH
22448: LD_VAR 0 2
22452: PUSH
22453: FOR_IN
22454: IFFALSE 22470
// SetLives ( i , 1 ) ;
22456: LD_VAR 0 1
22460: PPUSH
22461: LD_INT 1
22463: PPUSH
22464: CALL_OW 234
22468: GO 22453
22470: POP
22471: POP
// end ;
22472: PPOPN 2
22474: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22475: LD_EXP 48
22479: PUSH
22480: LD_EXP 97
22484: AND
22485: IFFALSE 22772
22487: GO 22489
22489: DISABLE
22490: LD_INT 0
22492: PPUSH
22493: PPUSH
22494: PPUSH
// begin i := rand ( 1 , 7 ) ;
22495: LD_ADDR_VAR 0 1
22499: PUSH
22500: LD_INT 1
22502: PPUSH
22503: LD_INT 7
22505: PPUSH
22506: CALL_OW 12
22510: ST_TO_ADDR
// case i of 1 :
22511: LD_VAR 0 1
22515: PUSH
22516: LD_INT 1
22518: DOUBLE
22519: EQUAL
22520: IFTRUE 22524
22522: GO 22534
22524: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22525: LD_STRING earthquake(getX(game), 0, 32)
22527: PPUSH
22528: CALL_OW 559
22532: GO 22772
22534: LD_INT 2
22536: DOUBLE
22537: EQUAL
22538: IFTRUE 22542
22540: GO 22556
22542: POP
// begin ToLua ( displayStucuk(); ) ;
22543: LD_STRING displayStucuk();
22545: PPUSH
22546: CALL_OW 559
// ResetFog ;
22550: CALL_OW 335
// end ; 3 :
22554: GO 22772
22556: LD_INT 3
22558: DOUBLE
22559: EQUAL
22560: IFTRUE 22564
22562: GO 22668
22564: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22565: LD_ADDR_VAR 0 2
22569: PUSH
22570: LD_INT 22
22572: PUSH
22573: LD_OWVAR 2
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 25
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PPUSH
22596: CALL_OW 69
22600: ST_TO_ADDR
// if not tmp then
22601: LD_VAR 0 2
22605: NOT
22606: IFFALSE 22610
// exit ;
22608: GO 22772
// un := tmp [ rand ( 1 , tmp ) ] ;
22610: LD_ADDR_VAR 0 3
22614: PUSH
22615: LD_VAR 0 2
22619: PUSH
22620: LD_INT 1
22622: PPUSH
22623: LD_VAR 0 2
22627: PPUSH
22628: CALL_OW 12
22632: ARRAY
22633: ST_TO_ADDR
// if Crawls ( un ) then
22634: LD_VAR 0 3
22638: PPUSH
22639: CALL_OW 318
22643: IFFALSE 22654
// ComWalk ( un ) ;
22645: LD_VAR 0 3
22649: PPUSH
22650: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22654: LD_VAR 0 3
22658: PPUSH
22659: LD_INT 8
22661: PPUSH
22662: CALL_OW 336
// end ; 4 :
22666: GO 22772
22668: LD_INT 4
22670: DOUBLE
22671: EQUAL
22672: IFTRUE 22676
22674: GO 22750
22676: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22677: LD_ADDR_VAR 0 2
22681: PUSH
22682: LD_INT 22
22684: PUSH
22685: LD_OWVAR 2
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 30
22696: PUSH
22697: LD_INT 29
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PPUSH
22708: CALL_OW 69
22712: ST_TO_ADDR
// if not tmp then
22713: LD_VAR 0 2
22717: NOT
22718: IFFALSE 22722
// exit ;
22720: GO 22772
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22722: LD_VAR 0 2
22726: PUSH
22727: LD_INT 1
22729: ARRAY
22730: PPUSH
22731: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22735: LD_VAR 0 2
22739: PUSH
22740: LD_INT 1
22742: ARRAY
22743: PPUSH
22744: CALL_OW 65
// end ; 5 .. 7 :
22748: GO 22772
22750: LD_INT 5
22752: DOUBLE
22753: GREATEREQUAL
22754: IFFALSE 22762
22756: LD_INT 7
22758: DOUBLE
22759: LESSEQUAL
22760: IFTRUE 22764
22762: GO 22771
22764: POP
// StreamSibBomb ; end ;
22765: CALL 19009 0 0
22769: GO 22772
22771: POP
// end ;
22772: PPOPN 3
22774: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22775: LD_EXP 48
22779: PUSH
22780: LD_EXP 98
22784: AND
22785: IFFALSE 22941
22787: GO 22789
22789: DISABLE
22790: LD_INT 0
22792: PPUSH
22793: PPUSH
22794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22795: LD_ADDR_VAR 0 2
22799: PUSH
22800: LD_INT 81
22802: PUSH
22803: LD_OWVAR 2
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 2
22814: PUSH
22815: LD_INT 21
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 21
22827: PUSH
22828: LD_INT 2
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: LIST
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PPUSH
22844: CALL_OW 69
22848: ST_TO_ADDR
// if not tmp then
22849: LD_VAR 0 2
22853: NOT
22854: IFFALSE 22858
// exit ;
22856: GO 22941
// p := 0 ;
22858: LD_ADDR_VAR 0 3
22862: PUSH
22863: LD_INT 0
22865: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22866: LD_INT 35
22868: PPUSH
22869: CALL_OW 67
// p := p + 1 ;
22873: LD_ADDR_VAR 0 3
22877: PUSH
22878: LD_VAR 0 3
22882: PUSH
22883: LD_INT 1
22885: PLUS
22886: ST_TO_ADDR
// for i in tmp do
22887: LD_ADDR_VAR 0 1
22891: PUSH
22892: LD_VAR 0 2
22896: PUSH
22897: FOR_IN
22898: IFFALSE 22929
// if GetLives ( i ) < 1000 then
22900: LD_VAR 0 1
22904: PPUSH
22905: CALL_OW 256
22909: PUSH
22910: LD_INT 1000
22912: LESS
22913: IFFALSE 22927
// SetLives ( i , 1000 ) ;
22915: LD_VAR 0 1
22919: PPUSH
22920: LD_INT 1000
22922: PPUSH
22923: CALL_OW 234
22927: GO 22897
22929: POP
22930: POP
// until p > 20 ;
22931: LD_VAR 0 3
22935: PUSH
22936: LD_INT 20
22938: GREATER
22939: IFFALSE 22866
// end ;
22941: PPOPN 3
22943: END
// every 0 0$1 trigger StreamModeActive and sTime do
22944: LD_EXP 48
22948: PUSH
22949: LD_EXP 99
22953: AND
22954: IFFALSE 22989
22956: GO 22958
22958: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22959: LD_INT 28
22961: PPUSH
22962: LD_OWVAR 2
22966: PPUSH
22967: LD_INT 2
22969: PPUSH
22970: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22974: LD_INT 30
22976: PPUSH
22977: LD_OWVAR 2
22981: PPUSH
22982: LD_INT 2
22984: PPUSH
22985: CALL_OW 322
// end ;
22989: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22990: LD_EXP 48
22994: PUSH
22995: LD_EXP 100
22999: AND
23000: IFFALSE 23121
23002: GO 23004
23004: DISABLE
23005: LD_INT 0
23007: PPUSH
23008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23009: LD_ADDR_VAR 0 2
23013: PUSH
23014: LD_INT 22
23016: PUSH
23017: LD_OWVAR 2
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 21
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 3
23038: PUSH
23039: LD_INT 23
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: LIST
23057: PPUSH
23058: CALL_OW 69
23062: ST_TO_ADDR
// if not tmp then
23063: LD_VAR 0 2
23067: NOT
23068: IFFALSE 23072
// exit ;
23070: GO 23121
// for i in tmp do
23072: LD_ADDR_VAR 0 1
23076: PUSH
23077: LD_VAR 0 2
23081: PUSH
23082: FOR_IN
23083: IFFALSE 23119
// begin if Crawls ( i ) then
23085: LD_VAR 0 1
23089: PPUSH
23090: CALL_OW 318
23094: IFFALSE 23105
// ComWalk ( i ) ;
23096: LD_VAR 0 1
23100: PPUSH
23101: CALL_OW 138
// SetClass ( i , 2 ) ;
23105: LD_VAR 0 1
23109: PPUSH
23110: LD_INT 2
23112: PPUSH
23113: CALL_OW 336
// end ;
23117: GO 23082
23119: POP
23120: POP
// end ;
23121: PPOPN 2
23123: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23124: LD_EXP 48
23128: PUSH
23129: LD_EXP 101
23133: AND
23134: IFFALSE 23422
23136: GO 23138
23138: DISABLE
23139: LD_INT 0
23141: PPUSH
23142: PPUSH
23143: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23144: LD_OWVAR 2
23148: PPUSH
23149: LD_INT 9
23151: PPUSH
23152: LD_INT 1
23154: PPUSH
23155: LD_INT 1
23157: PPUSH
23158: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23162: LD_INT 9
23164: PPUSH
23165: LD_OWVAR 2
23169: PPUSH
23170: CALL_OW 343
// uc_side := 9 ;
23174: LD_ADDR_OWVAR 20
23178: PUSH
23179: LD_INT 9
23181: ST_TO_ADDR
// uc_nation := 2 ;
23182: LD_ADDR_OWVAR 21
23186: PUSH
23187: LD_INT 2
23189: ST_TO_ADDR
// hc_name := Dark Warrior ;
23190: LD_ADDR_OWVAR 26
23194: PUSH
23195: LD_STRING Dark Warrior
23197: ST_TO_ADDR
// hc_gallery :=  ;
23198: LD_ADDR_OWVAR 33
23202: PUSH
23203: LD_STRING 
23205: ST_TO_ADDR
// hc_noskilllimit := true ;
23206: LD_ADDR_OWVAR 76
23210: PUSH
23211: LD_INT 1
23213: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23214: LD_ADDR_OWVAR 31
23218: PUSH
23219: LD_INT 30
23221: PUSH
23222: LD_INT 30
23224: PUSH
23225: LD_INT 30
23227: PUSH
23228: LD_INT 30
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: ST_TO_ADDR
// un := CreateHuman ;
23237: LD_ADDR_VAR 0 3
23241: PUSH
23242: CALL_OW 44
23246: ST_TO_ADDR
// hc_noskilllimit := false ;
23247: LD_ADDR_OWVAR 76
23251: PUSH
23252: LD_INT 0
23254: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23255: LD_VAR 0 3
23259: PPUSH
23260: LD_INT 1
23262: PPUSH
23263: CALL_OW 51
// ToLua ( playRanger() ) ;
23267: LD_STRING playRanger()
23269: PPUSH
23270: CALL_OW 559
// p := 0 ;
23274: LD_ADDR_VAR 0 2
23278: PUSH
23279: LD_INT 0
23281: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23282: LD_INT 35
23284: PPUSH
23285: CALL_OW 67
// p := p + 1 ;
23289: LD_ADDR_VAR 0 2
23293: PUSH
23294: LD_VAR 0 2
23298: PUSH
23299: LD_INT 1
23301: PLUS
23302: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23303: LD_VAR 0 3
23307: PPUSH
23308: CALL_OW 256
23312: PUSH
23313: LD_INT 1000
23315: LESS
23316: IFFALSE 23330
// SetLives ( un , 1000 ) ;
23318: LD_VAR 0 3
23322: PPUSH
23323: LD_INT 1000
23325: PPUSH
23326: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23330: LD_VAR 0 3
23334: PPUSH
23335: LD_INT 81
23337: PUSH
23338: LD_OWVAR 2
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 91
23349: PUSH
23350: LD_VAR 0 3
23354: PUSH
23355: LD_INT 30
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: LIST
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PPUSH
23367: CALL_OW 69
23371: PPUSH
23372: LD_VAR 0 3
23376: PPUSH
23377: CALL_OW 74
23381: PPUSH
23382: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23386: LD_VAR 0 2
23390: PUSH
23391: LD_INT 80
23393: GREATER
23394: PUSH
23395: LD_VAR 0 3
23399: PPUSH
23400: CALL_OW 301
23404: OR
23405: IFFALSE 23282
// if un then
23407: LD_VAR 0 3
23411: IFFALSE 23422
// RemoveUnit ( un ) ;
23413: LD_VAR 0 3
23417: PPUSH
23418: CALL_OW 64
// end ;
23422: PPOPN 3
23424: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23425: LD_EXP 102
23429: IFFALSE 23545
23431: GO 23433
23433: DISABLE
23434: LD_INT 0
23436: PPUSH
23437: PPUSH
23438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23439: LD_ADDR_VAR 0 2
23443: PUSH
23444: LD_INT 81
23446: PUSH
23447: LD_OWVAR 2
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 21
23458: PUSH
23459: LD_INT 1
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PPUSH
23470: CALL_OW 69
23474: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23475: LD_STRING playComputer()
23477: PPUSH
23478: CALL_OW 559
// if not tmp then
23482: LD_VAR 0 2
23486: NOT
23487: IFFALSE 23491
// exit ;
23489: GO 23545
// for i in tmp do
23491: LD_ADDR_VAR 0 1
23495: PUSH
23496: LD_VAR 0 2
23500: PUSH
23501: FOR_IN
23502: IFFALSE 23543
// for j := 1 to 4 do
23504: LD_ADDR_VAR 0 3
23508: PUSH
23509: DOUBLE
23510: LD_INT 1
23512: DEC
23513: ST_TO_ADDR
23514: LD_INT 4
23516: PUSH
23517: FOR_TO
23518: IFFALSE 23539
// SetSkill ( i , j , 10 ) ;
23520: LD_VAR 0 1
23524: PPUSH
23525: LD_VAR 0 3
23529: PPUSH
23530: LD_INT 10
23532: PPUSH
23533: CALL_OW 237
23537: GO 23517
23539: POP
23540: POP
23541: GO 23501
23543: POP
23544: POP
// end ;
23545: PPOPN 3
23547: END
// every 0 0$1 trigger s30 do var i , tmp ;
23548: LD_EXP 103
23552: IFFALSE 23621
23554: GO 23556
23556: DISABLE
23557: LD_INT 0
23559: PPUSH
23560: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23561: LD_ADDR_VAR 0 2
23565: PUSH
23566: LD_INT 22
23568: PUSH
23569: LD_OWVAR 2
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PPUSH
23578: CALL_OW 69
23582: ST_TO_ADDR
// if not tmp then
23583: LD_VAR 0 2
23587: NOT
23588: IFFALSE 23592
// exit ;
23590: GO 23621
// for i in tmp do
23592: LD_ADDR_VAR 0 1
23596: PUSH
23597: LD_VAR 0 2
23601: PUSH
23602: FOR_IN
23603: IFFALSE 23619
// SetLives ( i , 300 ) ;
23605: LD_VAR 0 1
23609: PPUSH
23610: LD_INT 300
23612: PPUSH
23613: CALL_OW 234
23617: GO 23602
23619: POP
23620: POP
// end ;
23621: PPOPN 2
23623: END
// every 0 0$1 trigger s60 do var i , tmp ;
23624: LD_EXP 104
23628: IFFALSE 23697
23630: GO 23632
23632: DISABLE
23633: LD_INT 0
23635: PPUSH
23636: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23637: LD_ADDR_VAR 0 2
23641: PUSH
23642: LD_INT 22
23644: PUSH
23645: LD_OWVAR 2
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PPUSH
23654: CALL_OW 69
23658: ST_TO_ADDR
// if not tmp then
23659: LD_VAR 0 2
23663: NOT
23664: IFFALSE 23668
// exit ;
23666: GO 23697
// for i in tmp do
23668: LD_ADDR_VAR 0 1
23672: PUSH
23673: LD_VAR 0 2
23677: PUSH
23678: FOR_IN
23679: IFFALSE 23695
// SetLives ( i , 600 ) ;
23681: LD_VAR 0 1
23685: PPUSH
23686: LD_INT 600
23688: PPUSH
23689: CALL_OW 234
23693: GO 23678
23695: POP
23696: POP
// end ;
23697: PPOPN 2
23699: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23700: LD_INT 0
23702: PPUSH
// case cmd of 301 :
23703: LD_VAR 0 1
23707: PUSH
23708: LD_INT 301
23710: DOUBLE
23711: EQUAL
23712: IFTRUE 23716
23714: GO 23748
23716: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23717: LD_VAR 0 6
23721: PPUSH
23722: LD_VAR 0 7
23726: PPUSH
23727: LD_VAR 0 8
23731: PPUSH
23732: LD_VAR 0 4
23736: PPUSH
23737: LD_VAR 0 5
23741: PPUSH
23742: CALL 24957 0 5
23746: GO 23869
23748: LD_INT 302
23750: DOUBLE
23751: EQUAL
23752: IFTRUE 23756
23754: GO 23793
23756: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23757: LD_VAR 0 6
23761: PPUSH
23762: LD_VAR 0 7
23766: PPUSH
23767: LD_VAR 0 8
23771: PPUSH
23772: LD_VAR 0 9
23776: PPUSH
23777: LD_VAR 0 4
23781: PPUSH
23782: LD_VAR 0 5
23786: PPUSH
23787: CALL 25048 0 6
23791: GO 23869
23793: LD_INT 303
23795: DOUBLE
23796: EQUAL
23797: IFTRUE 23801
23799: GO 23838
23801: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23802: LD_VAR 0 6
23806: PPUSH
23807: LD_VAR 0 7
23811: PPUSH
23812: LD_VAR 0 8
23816: PPUSH
23817: LD_VAR 0 9
23821: PPUSH
23822: LD_VAR 0 4
23826: PPUSH
23827: LD_VAR 0 5
23831: PPUSH
23832: CALL 23874 0 6
23836: GO 23869
23838: LD_INT 304
23840: DOUBLE
23841: EQUAL
23842: IFTRUE 23846
23844: GO 23868
23846: POP
// hHackTeleport ( unit , x , y ) ; end ;
23847: LD_VAR 0 2
23851: PPUSH
23852: LD_VAR 0 4
23856: PPUSH
23857: LD_VAR 0 5
23861: PPUSH
23862: CALL 25641 0 3
23866: GO 23869
23868: POP
// end ;
23869: LD_VAR 0 12
23873: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23874: LD_INT 0
23876: PPUSH
23877: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23878: LD_VAR 0 1
23882: PUSH
23883: LD_INT 1
23885: LESS
23886: PUSH
23887: LD_VAR 0 1
23891: PUSH
23892: LD_INT 3
23894: GREATER
23895: OR
23896: PUSH
23897: LD_VAR 0 5
23901: PPUSH
23902: LD_VAR 0 6
23906: PPUSH
23907: CALL_OW 428
23911: OR
23912: IFFALSE 23916
// exit ;
23914: GO 24644
// uc_side := your_side ;
23916: LD_ADDR_OWVAR 20
23920: PUSH
23921: LD_OWVAR 2
23925: ST_TO_ADDR
// uc_nation := nation ;
23926: LD_ADDR_OWVAR 21
23930: PUSH
23931: LD_VAR 0 1
23935: ST_TO_ADDR
// bc_level = 1 ;
23936: LD_ADDR_OWVAR 43
23940: PUSH
23941: LD_INT 1
23943: ST_TO_ADDR
// case btype of 1 :
23944: LD_VAR 0 2
23948: PUSH
23949: LD_INT 1
23951: DOUBLE
23952: EQUAL
23953: IFTRUE 23957
23955: GO 23968
23957: POP
// bc_type := b_depot ; 2 :
23958: LD_ADDR_OWVAR 42
23962: PUSH
23963: LD_INT 0
23965: ST_TO_ADDR
23966: GO 24588
23968: LD_INT 2
23970: DOUBLE
23971: EQUAL
23972: IFTRUE 23976
23974: GO 23987
23976: POP
// bc_type := b_warehouse ; 3 :
23977: LD_ADDR_OWVAR 42
23981: PUSH
23982: LD_INT 1
23984: ST_TO_ADDR
23985: GO 24588
23987: LD_INT 3
23989: DOUBLE
23990: EQUAL
23991: IFTRUE 23995
23993: GO 24006
23995: POP
// bc_type := b_lab ; 4 .. 9 :
23996: LD_ADDR_OWVAR 42
24000: PUSH
24001: LD_INT 6
24003: ST_TO_ADDR
24004: GO 24588
24006: LD_INT 4
24008: DOUBLE
24009: GREATEREQUAL
24010: IFFALSE 24018
24012: LD_INT 9
24014: DOUBLE
24015: LESSEQUAL
24016: IFTRUE 24020
24018: GO 24080
24020: POP
// begin bc_type := b_lab_half ;
24021: LD_ADDR_OWVAR 42
24025: PUSH
24026: LD_INT 7
24028: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24029: LD_ADDR_OWVAR 44
24033: PUSH
24034: LD_INT 10
24036: PUSH
24037: LD_INT 11
24039: PUSH
24040: LD_INT 12
24042: PUSH
24043: LD_INT 15
24045: PUSH
24046: LD_INT 14
24048: PUSH
24049: LD_INT 13
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: PUSH
24060: LD_VAR 0 2
24064: PUSH
24065: LD_INT 3
24067: MINUS
24068: ARRAY
24069: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24070: LD_ADDR_OWVAR 45
24074: PUSH
24075: LD_INT 9
24077: ST_TO_ADDR
// end ; 10 .. 13 :
24078: GO 24588
24080: LD_INT 10
24082: DOUBLE
24083: GREATEREQUAL
24084: IFFALSE 24092
24086: LD_INT 13
24088: DOUBLE
24089: LESSEQUAL
24090: IFTRUE 24094
24092: GO 24171
24094: POP
// begin bc_type := b_lab_full ;
24095: LD_ADDR_OWVAR 42
24099: PUSH
24100: LD_INT 8
24102: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24103: LD_ADDR_OWVAR 44
24107: PUSH
24108: LD_INT 10
24110: PUSH
24111: LD_INT 12
24113: PUSH
24114: LD_INT 14
24116: PUSH
24117: LD_INT 13
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: PUSH
24126: LD_VAR 0 2
24130: PUSH
24131: LD_INT 9
24133: MINUS
24134: ARRAY
24135: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24136: LD_ADDR_OWVAR 45
24140: PUSH
24141: LD_INT 11
24143: PUSH
24144: LD_INT 15
24146: PUSH
24147: LD_INT 12
24149: PUSH
24150: LD_INT 15
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: PUSH
24159: LD_VAR 0 2
24163: PUSH
24164: LD_INT 9
24166: MINUS
24167: ARRAY
24168: ST_TO_ADDR
// end ; 14 :
24169: GO 24588
24171: LD_INT 14
24173: DOUBLE
24174: EQUAL
24175: IFTRUE 24179
24177: GO 24190
24179: POP
// bc_type := b_workshop ; 15 :
24180: LD_ADDR_OWVAR 42
24184: PUSH
24185: LD_INT 2
24187: ST_TO_ADDR
24188: GO 24588
24190: LD_INT 15
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24209
24198: POP
// bc_type := b_factory ; 16 :
24199: LD_ADDR_OWVAR 42
24203: PUSH
24204: LD_INT 3
24206: ST_TO_ADDR
24207: GO 24588
24209: LD_INT 16
24211: DOUBLE
24212: EQUAL
24213: IFTRUE 24217
24215: GO 24228
24217: POP
// bc_type := b_ext_gun ; 17 :
24218: LD_ADDR_OWVAR 42
24222: PUSH
24223: LD_INT 17
24225: ST_TO_ADDR
24226: GO 24588
24228: LD_INT 17
24230: DOUBLE
24231: EQUAL
24232: IFTRUE 24236
24234: GO 24264
24236: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24237: LD_ADDR_OWVAR 42
24241: PUSH
24242: LD_INT 19
24244: PUSH
24245: LD_INT 23
24247: PUSH
24248: LD_INT 19
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: LIST
24255: PUSH
24256: LD_VAR 0 1
24260: ARRAY
24261: ST_TO_ADDR
24262: GO 24588
24264: LD_INT 18
24266: DOUBLE
24267: EQUAL
24268: IFTRUE 24272
24270: GO 24283
24272: POP
// bc_type := b_ext_radar ; 19 :
24273: LD_ADDR_OWVAR 42
24277: PUSH
24278: LD_INT 20
24280: ST_TO_ADDR
24281: GO 24588
24283: LD_INT 19
24285: DOUBLE
24286: EQUAL
24287: IFTRUE 24291
24289: GO 24302
24291: POP
// bc_type := b_ext_radio ; 20 :
24292: LD_ADDR_OWVAR 42
24296: PUSH
24297: LD_INT 22
24299: ST_TO_ADDR
24300: GO 24588
24302: LD_INT 20
24304: DOUBLE
24305: EQUAL
24306: IFTRUE 24310
24308: GO 24321
24310: POP
// bc_type := b_ext_siberium ; 21 :
24311: LD_ADDR_OWVAR 42
24315: PUSH
24316: LD_INT 21
24318: ST_TO_ADDR
24319: GO 24588
24321: LD_INT 21
24323: DOUBLE
24324: EQUAL
24325: IFTRUE 24329
24327: GO 24340
24329: POP
// bc_type := b_ext_computer ; 22 :
24330: LD_ADDR_OWVAR 42
24334: PUSH
24335: LD_INT 24
24337: ST_TO_ADDR
24338: GO 24588
24340: LD_INT 22
24342: DOUBLE
24343: EQUAL
24344: IFTRUE 24348
24346: GO 24359
24348: POP
// bc_type := b_ext_track ; 23 :
24349: LD_ADDR_OWVAR 42
24353: PUSH
24354: LD_INT 16
24356: ST_TO_ADDR
24357: GO 24588
24359: LD_INT 23
24361: DOUBLE
24362: EQUAL
24363: IFTRUE 24367
24365: GO 24378
24367: POP
// bc_type := b_ext_laser ; 24 :
24368: LD_ADDR_OWVAR 42
24372: PUSH
24373: LD_INT 25
24375: ST_TO_ADDR
24376: GO 24588
24378: LD_INT 24
24380: DOUBLE
24381: EQUAL
24382: IFTRUE 24386
24384: GO 24397
24386: POP
// bc_type := b_control_tower ; 25 :
24387: LD_ADDR_OWVAR 42
24391: PUSH
24392: LD_INT 36
24394: ST_TO_ADDR
24395: GO 24588
24397: LD_INT 25
24399: DOUBLE
24400: EQUAL
24401: IFTRUE 24405
24403: GO 24416
24405: POP
// bc_type := b_breastwork ; 26 :
24406: LD_ADDR_OWVAR 42
24410: PUSH
24411: LD_INT 31
24413: ST_TO_ADDR
24414: GO 24588
24416: LD_INT 26
24418: DOUBLE
24419: EQUAL
24420: IFTRUE 24424
24422: GO 24435
24424: POP
// bc_type := b_bunker ; 27 :
24425: LD_ADDR_OWVAR 42
24429: PUSH
24430: LD_INT 32
24432: ST_TO_ADDR
24433: GO 24588
24435: LD_INT 27
24437: DOUBLE
24438: EQUAL
24439: IFTRUE 24443
24441: GO 24454
24443: POP
// bc_type := b_turret ; 28 :
24444: LD_ADDR_OWVAR 42
24448: PUSH
24449: LD_INT 33
24451: ST_TO_ADDR
24452: GO 24588
24454: LD_INT 28
24456: DOUBLE
24457: EQUAL
24458: IFTRUE 24462
24460: GO 24473
24462: POP
// bc_type := b_armoury ; 29 :
24463: LD_ADDR_OWVAR 42
24467: PUSH
24468: LD_INT 4
24470: ST_TO_ADDR
24471: GO 24588
24473: LD_INT 29
24475: DOUBLE
24476: EQUAL
24477: IFTRUE 24481
24479: GO 24492
24481: POP
// bc_type := b_barracks ; 30 :
24482: LD_ADDR_OWVAR 42
24486: PUSH
24487: LD_INT 5
24489: ST_TO_ADDR
24490: GO 24588
24492: LD_INT 30
24494: DOUBLE
24495: EQUAL
24496: IFTRUE 24500
24498: GO 24511
24500: POP
// bc_type := b_solar_power ; 31 :
24501: LD_ADDR_OWVAR 42
24505: PUSH
24506: LD_INT 27
24508: ST_TO_ADDR
24509: GO 24588
24511: LD_INT 31
24513: DOUBLE
24514: EQUAL
24515: IFTRUE 24519
24517: GO 24530
24519: POP
// bc_type := b_oil_power ; 32 :
24520: LD_ADDR_OWVAR 42
24524: PUSH
24525: LD_INT 26
24527: ST_TO_ADDR
24528: GO 24588
24530: LD_INT 32
24532: DOUBLE
24533: EQUAL
24534: IFTRUE 24538
24536: GO 24549
24538: POP
// bc_type := b_siberite_power ; 33 :
24539: LD_ADDR_OWVAR 42
24543: PUSH
24544: LD_INT 28
24546: ST_TO_ADDR
24547: GO 24588
24549: LD_INT 33
24551: DOUBLE
24552: EQUAL
24553: IFTRUE 24557
24555: GO 24568
24557: POP
// bc_type := b_oil_mine ; 34 :
24558: LD_ADDR_OWVAR 42
24562: PUSH
24563: LD_INT 29
24565: ST_TO_ADDR
24566: GO 24588
24568: LD_INT 34
24570: DOUBLE
24571: EQUAL
24572: IFTRUE 24576
24574: GO 24587
24576: POP
// bc_type := b_siberite_mine ; end ;
24577: LD_ADDR_OWVAR 42
24581: PUSH
24582: LD_INT 30
24584: ST_TO_ADDR
24585: GO 24588
24587: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24588: LD_ADDR_VAR 0 8
24592: PUSH
24593: LD_VAR 0 5
24597: PPUSH
24598: LD_VAR 0 6
24602: PPUSH
24603: LD_VAR 0 3
24607: PPUSH
24608: CALL_OW 47
24612: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24613: LD_OWVAR 42
24617: PUSH
24618: LD_INT 32
24620: PUSH
24621: LD_INT 33
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: IN
24628: IFFALSE 24644
// PlaceWeaponTurret ( b , weapon ) ;
24630: LD_VAR 0 8
24634: PPUSH
24635: LD_VAR 0 4
24639: PPUSH
24640: CALL_OW 431
// end ;
24644: LD_VAR 0 7
24648: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24649: LD_INT 0
24651: PPUSH
24652: PPUSH
24653: PPUSH
24654: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24655: LD_ADDR_VAR 0 4
24659: PUSH
24660: LD_INT 22
24662: PUSH
24663: LD_OWVAR 2
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 2
24674: PUSH
24675: LD_INT 30
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 30
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: LIST
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PPUSH
24704: CALL_OW 69
24708: ST_TO_ADDR
// if not tmp then
24709: LD_VAR 0 4
24713: NOT
24714: IFFALSE 24718
// exit ;
24716: GO 24777
// for i in tmp do
24718: LD_ADDR_VAR 0 2
24722: PUSH
24723: LD_VAR 0 4
24727: PUSH
24728: FOR_IN
24729: IFFALSE 24775
// for j = 1 to 3 do
24731: LD_ADDR_VAR 0 3
24735: PUSH
24736: DOUBLE
24737: LD_INT 1
24739: DEC
24740: ST_TO_ADDR
24741: LD_INT 3
24743: PUSH
24744: FOR_TO
24745: IFFALSE 24771
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24747: LD_VAR 0 2
24751: PPUSH
24752: CALL_OW 274
24756: PPUSH
24757: LD_VAR 0 3
24761: PPUSH
24762: LD_INT 99999
24764: PPUSH
24765: CALL_OW 277
24769: GO 24744
24771: POP
24772: POP
24773: GO 24728
24775: POP
24776: POP
// end ;
24777: LD_VAR 0 1
24781: RET
// export function hHackSetLevel10 ; var i , j ; begin
24782: LD_INT 0
24784: PPUSH
24785: PPUSH
24786: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24787: LD_ADDR_VAR 0 2
24791: PUSH
24792: LD_INT 21
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PPUSH
24802: CALL_OW 69
24806: PUSH
24807: FOR_IN
24808: IFFALSE 24860
// if IsSelected ( i ) then
24810: LD_VAR 0 2
24814: PPUSH
24815: CALL_OW 306
24819: IFFALSE 24858
// begin for j := 1 to 4 do
24821: LD_ADDR_VAR 0 3
24825: PUSH
24826: DOUBLE
24827: LD_INT 1
24829: DEC
24830: ST_TO_ADDR
24831: LD_INT 4
24833: PUSH
24834: FOR_TO
24835: IFFALSE 24856
// SetSkill ( i , j , 10 ) ;
24837: LD_VAR 0 2
24841: PPUSH
24842: LD_VAR 0 3
24846: PPUSH
24847: LD_INT 10
24849: PPUSH
24850: CALL_OW 237
24854: GO 24834
24856: POP
24857: POP
// end ;
24858: GO 24807
24860: POP
24861: POP
// end ;
24862: LD_VAR 0 1
24866: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24867: LD_INT 0
24869: PPUSH
24870: PPUSH
24871: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24872: LD_ADDR_VAR 0 2
24876: PUSH
24877: LD_INT 22
24879: PUSH
24880: LD_OWVAR 2
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 21
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PPUSH
24903: CALL_OW 69
24907: PUSH
24908: FOR_IN
24909: IFFALSE 24950
// begin for j := 1 to 4 do
24911: LD_ADDR_VAR 0 3
24915: PUSH
24916: DOUBLE
24917: LD_INT 1
24919: DEC
24920: ST_TO_ADDR
24921: LD_INT 4
24923: PUSH
24924: FOR_TO
24925: IFFALSE 24946
// SetSkill ( i , j , 10 ) ;
24927: LD_VAR 0 2
24931: PPUSH
24932: LD_VAR 0 3
24936: PPUSH
24937: LD_INT 10
24939: PPUSH
24940: CALL_OW 237
24944: GO 24924
24946: POP
24947: POP
// end ;
24948: GO 24908
24950: POP
24951: POP
// end ;
24952: LD_VAR 0 1
24956: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24957: LD_INT 0
24959: PPUSH
// uc_side := your_side ;
24960: LD_ADDR_OWVAR 20
24964: PUSH
24965: LD_OWVAR 2
24969: ST_TO_ADDR
// uc_nation := nation ;
24970: LD_ADDR_OWVAR 21
24974: PUSH
24975: LD_VAR 0 1
24979: ST_TO_ADDR
// InitHc ;
24980: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24984: LD_INT 0
24986: PPUSH
24987: LD_VAR 0 2
24991: PPUSH
24992: LD_VAR 0 3
24996: PPUSH
24997: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25001: LD_VAR 0 4
25005: PPUSH
25006: LD_VAR 0 5
25010: PPUSH
25011: CALL_OW 428
25015: PUSH
25016: LD_INT 0
25018: EQUAL
25019: IFFALSE 25043
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25021: CALL_OW 44
25025: PPUSH
25026: LD_VAR 0 4
25030: PPUSH
25031: LD_VAR 0 5
25035: PPUSH
25036: LD_INT 1
25038: PPUSH
25039: CALL_OW 48
// end ;
25043: LD_VAR 0 6
25047: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25048: LD_INT 0
25050: PPUSH
25051: PPUSH
// uc_side := your_side ;
25052: LD_ADDR_OWVAR 20
25056: PUSH
25057: LD_OWVAR 2
25061: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25062: LD_VAR 0 1
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: LD_INT 2
25072: PUSH
25073: LD_INT 3
25075: PUSH
25076: LD_INT 4
25078: PUSH
25079: LD_INT 5
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: IN
25089: IFFALSE 25101
// uc_nation := nation_american else
25091: LD_ADDR_OWVAR 21
25095: PUSH
25096: LD_INT 1
25098: ST_TO_ADDR
25099: GO 25144
// if chassis in [ 11 , 12 , 13 , 14 ] then
25101: LD_VAR 0 1
25105: PUSH
25106: LD_INT 11
25108: PUSH
25109: LD_INT 12
25111: PUSH
25112: LD_INT 13
25114: PUSH
25115: LD_INT 14
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: IN
25124: IFFALSE 25136
// uc_nation := nation_arabian else
25126: LD_ADDR_OWVAR 21
25130: PUSH
25131: LD_INT 2
25133: ST_TO_ADDR
25134: GO 25144
// uc_nation := nation_russian ;
25136: LD_ADDR_OWVAR 21
25140: PUSH
25141: LD_INT 3
25143: ST_TO_ADDR
// vc_chassis := chassis ;
25144: LD_ADDR_OWVAR 37
25148: PUSH
25149: LD_VAR 0 1
25153: ST_TO_ADDR
// vc_engine := engine ;
25154: LD_ADDR_OWVAR 39
25158: PUSH
25159: LD_VAR 0 2
25163: ST_TO_ADDR
// vc_control := control ;
25164: LD_ADDR_OWVAR 38
25168: PUSH
25169: LD_VAR 0 3
25173: ST_TO_ADDR
// vc_weapon := weapon ;
25174: LD_ADDR_OWVAR 40
25178: PUSH
25179: LD_VAR 0 4
25183: ST_TO_ADDR
// un := CreateVehicle ;
25184: LD_ADDR_VAR 0 8
25188: PUSH
25189: CALL_OW 45
25193: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25194: LD_VAR 0 8
25198: PPUSH
25199: LD_INT 0
25201: PPUSH
25202: LD_INT 5
25204: PPUSH
25205: CALL_OW 12
25209: PPUSH
25210: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25214: LD_VAR 0 8
25218: PPUSH
25219: LD_VAR 0 5
25223: PPUSH
25224: LD_VAR 0 6
25228: PPUSH
25229: LD_INT 1
25231: PPUSH
25232: CALL_OW 48
// end ;
25236: LD_VAR 0 7
25240: RET
// export hInvincible ; every 1 do
25241: GO 25243
25243: DISABLE
// hInvincible := [ ] ;
25244: LD_ADDR_EXP 105
25248: PUSH
25249: EMPTY
25250: ST_TO_ADDR
25251: END
// every 10 do var i ;
25252: GO 25254
25254: DISABLE
25255: LD_INT 0
25257: PPUSH
// begin enable ;
25258: ENABLE
// if not hInvincible then
25259: LD_EXP 105
25263: NOT
25264: IFFALSE 25268
// exit ;
25266: GO 25312
// for i in hInvincible do
25268: LD_ADDR_VAR 0 1
25272: PUSH
25273: LD_EXP 105
25277: PUSH
25278: FOR_IN
25279: IFFALSE 25310
// if GetLives ( i ) < 1000 then
25281: LD_VAR 0 1
25285: PPUSH
25286: CALL_OW 256
25290: PUSH
25291: LD_INT 1000
25293: LESS
25294: IFFALSE 25308
// SetLives ( i , 1000 ) ;
25296: LD_VAR 0 1
25300: PPUSH
25301: LD_INT 1000
25303: PPUSH
25304: CALL_OW 234
25308: GO 25278
25310: POP
25311: POP
// end ;
25312: PPOPN 1
25314: END
// export function hHackInvincible ; var i ; begin
25315: LD_INT 0
25317: PPUSH
25318: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25319: LD_ADDR_VAR 0 2
25323: PUSH
25324: LD_INT 2
25326: PUSH
25327: LD_INT 21
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 21
25339: PUSH
25340: LD_INT 2
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: LIST
25351: PPUSH
25352: CALL_OW 69
25356: PUSH
25357: FOR_IN
25358: IFFALSE 25419
// if IsSelected ( i ) then
25360: LD_VAR 0 2
25364: PPUSH
25365: CALL_OW 306
25369: IFFALSE 25417
// begin if i in hInvincible then
25371: LD_VAR 0 2
25375: PUSH
25376: LD_EXP 105
25380: IN
25381: IFFALSE 25401
// hInvincible := hInvincible diff i else
25383: LD_ADDR_EXP 105
25387: PUSH
25388: LD_EXP 105
25392: PUSH
25393: LD_VAR 0 2
25397: DIFF
25398: ST_TO_ADDR
25399: GO 25417
// hInvincible := hInvincible union i ;
25401: LD_ADDR_EXP 105
25405: PUSH
25406: LD_EXP 105
25410: PUSH
25411: LD_VAR 0 2
25415: UNION
25416: ST_TO_ADDR
// end ;
25417: GO 25357
25419: POP
25420: POP
// end ;
25421: LD_VAR 0 1
25425: RET
// export function hHackInvisible ; var i , j ; begin
25426: LD_INT 0
25428: PPUSH
25429: PPUSH
25430: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25431: LD_ADDR_VAR 0 2
25435: PUSH
25436: LD_INT 21
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PPUSH
25446: CALL_OW 69
25450: PUSH
25451: FOR_IN
25452: IFFALSE 25476
// if IsSelected ( i ) then
25454: LD_VAR 0 2
25458: PPUSH
25459: CALL_OW 306
25463: IFFALSE 25474
// ComForceInvisible ( i ) ;
25465: LD_VAR 0 2
25469: PPUSH
25470: CALL_OW 496
25474: GO 25451
25476: POP
25477: POP
// end ;
25478: LD_VAR 0 1
25482: RET
// export function hHackChangeYourSide ; begin
25483: LD_INT 0
25485: PPUSH
// if your_side = 8 then
25486: LD_OWVAR 2
25490: PUSH
25491: LD_INT 8
25493: EQUAL
25494: IFFALSE 25506
// your_side := 0 else
25496: LD_ADDR_OWVAR 2
25500: PUSH
25501: LD_INT 0
25503: ST_TO_ADDR
25504: GO 25520
// your_side := your_side + 1 ;
25506: LD_ADDR_OWVAR 2
25510: PUSH
25511: LD_OWVAR 2
25515: PUSH
25516: LD_INT 1
25518: PLUS
25519: ST_TO_ADDR
// end ;
25520: LD_VAR 0 1
25524: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25525: LD_INT 0
25527: PPUSH
25528: PPUSH
25529: PPUSH
// for i in all_units do
25530: LD_ADDR_VAR 0 2
25534: PUSH
25535: LD_OWVAR 3
25539: PUSH
25540: FOR_IN
25541: IFFALSE 25619
// if IsSelected ( i ) then
25543: LD_VAR 0 2
25547: PPUSH
25548: CALL_OW 306
25552: IFFALSE 25617
// begin j := GetSide ( i ) ;
25554: LD_ADDR_VAR 0 3
25558: PUSH
25559: LD_VAR 0 2
25563: PPUSH
25564: CALL_OW 255
25568: ST_TO_ADDR
// if j = 8 then
25569: LD_VAR 0 3
25573: PUSH
25574: LD_INT 8
25576: EQUAL
25577: IFFALSE 25589
// j := 0 else
25579: LD_ADDR_VAR 0 3
25583: PUSH
25584: LD_INT 0
25586: ST_TO_ADDR
25587: GO 25603
// j := j + 1 ;
25589: LD_ADDR_VAR 0 3
25593: PUSH
25594: LD_VAR 0 3
25598: PUSH
25599: LD_INT 1
25601: PLUS
25602: ST_TO_ADDR
// SetSide ( i , j ) ;
25603: LD_VAR 0 2
25607: PPUSH
25608: LD_VAR 0 3
25612: PPUSH
25613: CALL_OW 235
// end ;
25617: GO 25540
25619: POP
25620: POP
// end ;
25621: LD_VAR 0 1
25625: RET
// export function hHackFog ; begin
25626: LD_INT 0
25628: PPUSH
// FogOff ( true ) ;
25629: LD_INT 1
25631: PPUSH
25632: CALL_OW 344
// end ;
25636: LD_VAR 0 1
25640: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25641: LD_INT 0
25643: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25644: LD_VAR 0 1
25648: PPUSH
25649: LD_VAR 0 2
25653: PPUSH
25654: LD_VAR 0 3
25658: PPUSH
25659: LD_INT 1
25661: PPUSH
25662: LD_INT 1
25664: PPUSH
25665: CALL_OW 483
// CenterOnXY ( x , y ) ;
25669: LD_VAR 0 2
25673: PPUSH
25674: LD_VAR 0 3
25678: PPUSH
25679: CALL_OW 84
// end ;
25683: LD_VAR 0 4
25687: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25688: LD_INT 0
25690: PPUSH
25691: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25692: LD_VAR 0 1
25696: NOT
25697: PUSH
25698: LD_VAR 0 2
25702: PPUSH
25703: LD_VAR 0 3
25707: PPUSH
25708: CALL_OW 488
25712: NOT
25713: OR
25714: PUSH
25715: LD_VAR 0 1
25719: PPUSH
25720: CALL_OW 266
25724: PUSH
25725: LD_INT 3
25727: NONEQUAL
25728: PUSH
25729: LD_VAR 0 1
25733: PPUSH
25734: CALL_OW 247
25738: PUSH
25739: LD_INT 1
25741: EQUAL
25742: NOT
25743: AND
25744: OR
25745: IFFALSE 25749
// exit ;
25747: GO 25898
// if GetType ( factory ) = unit_human then
25749: LD_VAR 0 1
25753: PPUSH
25754: CALL_OW 247
25758: PUSH
25759: LD_INT 1
25761: EQUAL
25762: IFFALSE 25779
// factory := IsInUnit ( factory ) ;
25764: LD_ADDR_VAR 0 1
25768: PUSH
25769: LD_VAR 0 1
25773: PPUSH
25774: CALL_OW 310
25778: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25779: LD_VAR 0 1
25783: PPUSH
25784: CALL_OW 266
25788: PUSH
25789: LD_INT 3
25791: NONEQUAL
25792: IFFALSE 25796
// exit ;
25794: GO 25898
// if HexInfo ( x , y ) = factory then
25796: LD_VAR 0 2
25800: PPUSH
25801: LD_VAR 0 3
25805: PPUSH
25806: CALL_OW 428
25810: PUSH
25811: LD_VAR 0 1
25815: EQUAL
25816: IFFALSE 25843
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25818: LD_ADDR_EXP 106
25822: PUSH
25823: LD_EXP 106
25827: PPUSH
25828: LD_VAR 0 1
25832: PPUSH
25833: LD_INT 0
25835: PPUSH
25836: CALL_OW 1
25840: ST_TO_ADDR
25841: GO 25894
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25843: LD_ADDR_EXP 106
25847: PUSH
25848: LD_EXP 106
25852: PPUSH
25853: LD_VAR 0 1
25857: PPUSH
25858: LD_VAR 0 1
25862: PPUSH
25863: CALL_OW 255
25867: PUSH
25868: LD_VAR 0 1
25872: PUSH
25873: LD_VAR 0 2
25877: PUSH
25878: LD_VAR 0 3
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: PPUSH
25889: CALL_OW 1
25893: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25894: CALL 25903 0 0
// end ;
25898: LD_VAR 0 4
25902: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25903: LD_INT 0
25905: PPUSH
25906: PPUSH
25907: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25908: LD_STRING resetFactoryWaypoint();
25910: PPUSH
25911: CALL_OW 559
// if factoryWaypoints then
25915: LD_EXP 106
25919: IFFALSE 26045
// begin list := PrepareArray ( factoryWaypoints ) ;
25921: LD_ADDR_VAR 0 3
25925: PUSH
25926: LD_EXP 106
25930: PPUSH
25931: CALL 73342 0 1
25935: ST_TO_ADDR
// for i := 1 to list do
25936: LD_ADDR_VAR 0 2
25940: PUSH
25941: DOUBLE
25942: LD_INT 1
25944: DEC
25945: ST_TO_ADDR
25946: LD_VAR 0 3
25950: PUSH
25951: FOR_TO
25952: IFFALSE 26043
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25954: LD_STRING setFactoryWaypointXY(
25956: PUSH
25957: LD_VAR 0 3
25961: PUSH
25962: LD_VAR 0 2
25966: ARRAY
25967: PUSH
25968: LD_INT 1
25970: ARRAY
25971: STR
25972: PUSH
25973: LD_STRING ,
25975: STR
25976: PUSH
25977: LD_VAR 0 3
25981: PUSH
25982: LD_VAR 0 2
25986: ARRAY
25987: PUSH
25988: LD_INT 2
25990: ARRAY
25991: STR
25992: PUSH
25993: LD_STRING ,
25995: STR
25996: PUSH
25997: LD_VAR 0 3
26001: PUSH
26002: LD_VAR 0 2
26006: ARRAY
26007: PUSH
26008: LD_INT 3
26010: ARRAY
26011: STR
26012: PUSH
26013: LD_STRING ,
26015: STR
26016: PUSH
26017: LD_VAR 0 3
26021: PUSH
26022: LD_VAR 0 2
26026: ARRAY
26027: PUSH
26028: LD_INT 4
26030: ARRAY
26031: STR
26032: PUSH
26033: LD_STRING )
26035: STR
26036: PPUSH
26037: CALL_OW 559
26041: GO 25951
26043: POP
26044: POP
// end ; end ;
26045: LD_VAR 0 1
26049: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26050: LD_INT 0
26052: PPUSH
// if HexInfo ( x , y ) = warehouse then
26053: LD_VAR 0 2
26057: PPUSH
26058: LD_VAR 0 3
26062: PPUSH
26063: CALL_OW 428
26067: PUSH
26068: LD_VAR 0 1
26072: EQUAL
26073: IFFALSE 26100
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26075: LD_ADDR_EXP 107
26079: PUSH
26080: LD_EXP 107
26084: PPUSH
26085: LD_VAR 0 1
26089: PPUSH
26090: LD_INT 0
26092: PPUSH
26093: CALL_OW 1
26097: ST_TO_ADDR
26098: GO 26151
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26100: LD_ADDR_EXP 107
26104: PUSH
26105: LD_EXP 107
26109: PPUSH
26110: LD_VAR 0 1
26114: PPUSH
26115: LD_VAR 0 1
26119: PPUSH
26120: CALL_OW 255
26124: PUSH
26125: LD_VAR 0 1
26129: PUSH
26130: LD_VAR 0 2
26134: PUSH
26135: LD_VAR 0 3
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: PPUSH
26146: CALL_OW 1
26150: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26151: CALL 26160 0 0
// end ;
26155: LD_VAR 0 4
26159: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26160: LD_INT 0
26162: PPUSH
26163: PPUSH
26164: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26165: LD_STRING resetWarehouseGatheringPoints();
26167: PPUSH
26168: CALL_OW 559
// if warehouseGatheringPoints then
26172: LD_EXP 107
26176: IFFALSE 26302
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26178: LD_ADDR_VAR 0 3
26182: PUSH
26183: LD_EXP 107
26187: PPUSH
26188: CALL 73342 0 1
26192: ST_TO_ADDR
// for i := 1 to list do
26193: LD_ADDR_VAR 0 2
26197: PUSH
26198: DOUBLE
26199: LD_INT 1
26201: DEC
26202: ST_TO_ADDR
26203: LD_VAR 0 3
26207: PUSH
26208: FOR_TO
26209: IFFALSE 26300
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26211: LD_STRING setWarehouseGatheringPointXY(
26213: PUSH
26214: LD_VAR 0 3
26218: PUSH
26219: LD_VAR 0 2
26223: ARRAY
26224: PUSH
26225: LD_INT 1
26227: ARRAY
26228: STR
26229: PUSH
26230: LD_STRING ,
26232: STR
26233: PUSH
26234: LD_VAR 0 3
26238: PUSH
26239: LD_VAR 0 2
26243: ARRAY
26244: PUSH
26245: LD_INT 2
26247: ARRAY
26248: STR
26249: PUSH
26250: LD_STRING ,
26252: STR
26253: PUSH
26254: LD_VAR 0 3
26258: PUSH
26259: LD_VAR 0 2
26263: ARRAY
26264: PUSH
26265: LD_INT 3
26267: ARRAY
26268: STR
26269: PUSH
26270: LD_STRING ,
26272: STR
26273: PUSH
26274: LD_VAR 0 3
26278: PUSH
26279: LD_VAR 0 2
26283: ARRAY
26284: PUSH
26285: LD_INT 4
26287: ARRAY
26288: STR
26289: PUSH
26290: LD_STRING )
26292: STR
26293: PPUSH
26294: CALL_OW 559
26298: GO 26208
26300: POP
26301: POP
// end ; end ;
26302: LD_VAR 0 1
26306: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26307: LD_EXP 107
26311: IFFALSE 26996
26313: GO 26315
26315: DISABLE
26316: LD_INT 0
26318: PPUSH
26319: PPUSH
26320: PPUSH
26321: PPUSH
26322: PPUSH
26323: PPUSH
26324: PPUSH
26325: PPUSH
26326: PPUSH
// begin enable ;
26327: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26328: LD_ADDR_VAR 0 3
26332: PUSH
26333: LD_EXP 107
26337: PPUSH
26338: CALL 73342 0 1
26342: ST_TO_ADDR
// if not list then
26343: LD_VAR 0 3
26347: NOT
26348: IFFALSE 26352
// exit ;
26350: GO 26996
// for i := 1 to list do
26352: LD_ADDR_VAR 0 1
26356: PUSH
26357: DOUBLE
26358: LD_INT 1
26360: DEC
26361: ST_TO_ADDR
26362: LD_VAR 0 3
26366: PUSH
26367: FOR_TO
26368: IFFALSE 26994
// begin depot := list [ i ] [ 2 ] ;
26370: LD_ADDR_VAR 0 8
26374: PUSH
26375: LD_VAR 0 3
26379: PUSH
26380: LD_VAR 0 1
26384: ARRAY
26385: PUSH
26386: LD_INT 2
26388: ARRAY
26389: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26390: LD_ADDR_VAR 0 5
26394: PUSH
26395: LD_VAR 0 3
26399: PUSH
26400: LD_VAR 0 1
26404: ARRAY
26405: PUSH
26406: LD_INT 1
26408: ARRAY
26409: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26410: LD_VAR 0 8
26414: PPUSH
26415: CALL_OW 301
26419: PUSH
26420: LD_VAR 0 5
26424: PUSH
26425: LD_VAR 0 8
26429: PPUSH
26430: CALL_OW 255
26434: NONEQUAL
26435: OR
26436: IFFALSE 26465
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26438: LD_ADDR_EXP 107
26442: PUSH
26443: LD_EXP 107
26447: PPUSH
26448: LD_VAR 0 8
26452: PPUSH
26453: LD_INT 0
26455: PPUSH
26456: CALL_OW 1
26460: ST_TO_ADDR
// exit ;
26461: POP
26462: POP
26463: GO 26996
// end ; x := list [ i ] [ 3 ] ;
26465: LD_ADDR_VAR 0 6
26469: PUSH
26470: LD_VAR 0 3
26474: PUSH
26475: LD_VAR 0 1
26479: ARRAY
26480: PUSH
26481: LD_INT 3
26483: ARRAY
26484: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26485: LD_ADDR_VAR 0 7
26489: PUSH
26490: LD_VAR 0 3
26494: PUSH
26495: LD_VAR 0 1
26499: ARRAY
26500: PUSH
26501: LD_INT 4
26503: ARRAY
26504: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26505: LD_ADDR_VAR 0 9
26509: PUSH
26510: LD_VAR 0 6
26514: PPUSH
26515: LD_VAR 0 7
26519: PPUSH
26520: LD_INT 16
26522: PPUSH
26523: CALL 71930 0 3
26527: ST_TO_ADDR
// if not cratesNearbyPoint then
26528: LD_VAR 0 9
26532: NOT
26533: IFFALSE 26539
// exit ;
26535: POP
26536: POP
26537: GO 26996
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26539: LD_ADDR_VAR 0 4
26543: PUSH
26544: LD_INT 22
26546: PUSH
26547: LD_VAR 0 5
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 3
26558: PUSH
26559: LD_INT 60
26561: PUSH
26562: EMPTY
26563: LIST
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 91
26571: PUSH
26572: LD_VAR 0 8
26576: PUSH
26577: LD_INT 6
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 2
26587: PUSH
26588: LD_INT 25
26590: PUSH
26591: LD_INT 2
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 25
26600: PUSH
26601: LD_INT 16
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: PPUSH
26619: CALL_OW 69
26623: PUSH
26624: LD_VAR 0 8
26628: PPUSH
26629: CALL_OW 313
26633: PPUSH
26634: LD_INT 3
26636: PUSH
26637: LD_INT 60
26639: PUSH
26640: EMPTY
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 2
26649: PUSH
26650: LD_INT 25
26652: PUSH
26653: LD_INT 2
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 25
26662: PUSH
26663: LD_INT 16
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: LIST
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PPUSH
26679: CALL_OW 72
26683: UNION
26684: ST_TO_ADDR
// if tmp then
26685: LD_VAR 0 4
26689: IFFALSE 26769
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26691: LD_ADDR_VAR 0 4
26695: PUSH
26696: LD_VAR 0 4
26700: PPUSH
26701: LD_INT 3
26703: PPUSH
26704: CALL 69899 0 2
26708: ST_TO_ADDR
// for j in tmp do
26709: LD_ADDR_VAR 0 2
26713: PUSH
26714: LD_VAR 0 4
26718: PUSH
26719: FOR_IN
26720: IFFALSE 26763
// begin if IsInUnit ( j ) then
26722: LD_VAR 0 2
26726: PPUSH
26727: CALL_OW 310
26731: IFFALSE 26742
// ComExit ( j ) ;
26733: LD_VAR 0 2
26737: PPUSH
26738: CALL 69982 0 1
// AddComCollect ( j , x , y ) ;
26742: LD_VAR 0 2
26746: PPUSH
26747: LD_VAR 0 6
26751: PPUSH
26752: LD_VAR 0 7
26756: PPUSH
26757: CALL_OW 177
// end ;
26761: GO 26719
26763: POP
26764: POP
// exit ;
26765: POP
26766: POP
26767: GO 26996
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26769: LD_ADDR_VAR 0 4
26773: PUSH
26774: LD_INT 22
26776: PUSH
26777: LD_VAR 0 5
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 91
26788: PUSH
26789: LD_VAR 0 8
26793: PUSH
26794: LD_INT 8
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 2
26804: PUSH
26805: LD_INT 34
26807: PUSH
26808: LD_INT 12
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 34
26817: PUSH
26818: LD_INT 51
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 34
26827: PUSH
26828: LD_INT 32
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 34
26837: PUSH
26838: LD_INT 89
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: PPUSH
26857: CALL_OW 69
26861: ST_TO_ADDR
// if tmp then
26862: LD_VAR 0 4
26866: IFFALSE 26992
// begin for j in tmp do
26868: LD_ADDR_VAR 0 2
26872: PUSH
26873: LD_VAR 0 4
26877: PUSH
26878: FOR_IN
26879: IFFALSE 26990
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26881: LD_VAR 0 2
26885: PPUSH
26886: CALL_OW 262
26890: PUSH
26891: LD_INT 3
26893: EQUAL
26894: PUSH
26895: LD_VAR 0 2
26899: PPUSH
26900: CALL_OW 261
26904: PUSH
26905: LD_INT 20
26907: GREATER
26908: OR
26909: PUSH
26910: LD_VAR 0 2
26914: PPUSH
26915: CALL_OW 314
26919: NOT
26920: AND
26921: PUSH
26922: LD_VAR 0 2
26926: PPUSH
26927: CALL_OW 263
26931: PUSH
26932: LD_INT 1
26934: NONEQUAL
26935: PUSH
26936: LD_VAR 0 2
26940: PPUSH
26941: CALL_OW 311
26945: OR
26946: AND
26947: IFFALSE 26988
// begin ComCollect ( j , x , y ) ;
26949: LD_VAR 0 2
26953: PPUSH
26954: LD_VAR 0 6
26958: PPUSH
26959: LD_VAR 0 7
26963: PPUSH
26964: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26968: LD_VAR 0 2
26972: PPUSH
26973: LD_VAR 0 8
26977: PPUSH
26978: CALL_OW 172
// exit ;
26982: POP
26983: POP
26984: POP
26985: POP
26986: GO 26996
// end ;
26988: GO 26878
26990: POP
26991: POP
// end ; end ;
26992: GO 26367
26994: POP
26995: POP
// end ; end_of_file
26996: PPOPN 9
26998: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26999: LD_INT 0
27001: PPUSH
27002: PPUSH
27003: PPUSH
27004: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27005: LD_VAR 0 1
27009: PPUSH
27010: CALL_OW 264
27014: PUSH
27015: LD_INT 91
27017: EQUAL
27018: IFFALSE 27090
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27020: LD_INT 68
27022: PPUSH
27023: LD_VAR 0 1
27027: PPUSH
27028: CALL_OW 255
27032: PPUSH
27033: CALL_OW 321
27037: PUSH
27038: LD_INT 2
27040: EQUAL
27041: IFFALSE 27053
// eff := 70 else
27043: LD_ADDR_VAR 0 4
27047: PUSH
27048: LD_INT 70
27050: ST_TO_ADDR
27051: GO 27061
// eff := 30 ;
27053: LD_ADDR_VAR 0 4
27057: PUSH
27058: LD_INT 30
27060: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27061: LD_VAR 0 1
27065: PPUSH
27066: CALL_OW 250
27070: PPUSH
27071: LD_VAR 0 1
27075: PPUSH
27076: CALL_OW 251
27080: PPUSH
27081: LD_VAR 0 4
27085: PPUSH
27086: CALL_OW 495
// end ; end ;
27090: LD_VAR 0 2
27094: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27095: LD_INT 0
27097: PPUSH
// end ;
27098: LD_VAR 0 4
27102: RET
// export function SOS_Command ( cmd ) ; begin
27103: LD_INT 0
27105: PPUSH
// end ;
27106: LD_VAR 0 2
27110: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27111: LD_INT 0
27113: PPUSH
// end ;
27114: LD_VAR 0 6
27118: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27119: LD_INT 0
27121: PPUSH
27122: PPUSH
// if not vehicle or not factory then
27123: LD_VAR 0 1
27127: NOT
27128: PUSH
27129: LD_VAR 0 2
27133: NOT
27134: OR
27135: IFFALSE 27139
// exit ;
27137: GO 27370
// if factoryWaypoints >= factory then
27139: LD_EXP 106
27143: PUSH
27144: LD_VAR 0 2
27148: GREATEREQUAL
27149: IFFALSE 27370
// if factoryWaypoints [ factory ] then
27151: LD_EXP 106
27155: PUSH
27156: LD_VAR 0 2
27160: ARRAY
27161: IFFALSE 27370
// begin if GetControl ( vehicle ) = control_manual then
27163: LD_VAR 0 1
27167: PPUSH
27168: CALL_OW 263
27172: PUSH
27173: LD_INT 1
27175: EQUAL
27176: IFFALSE 27257
// begin driver := IsDrivenBy ( vehicle ) ;
27178: LD_ADDR_VAR 0 4
27182: PUSH
27183: LD_VAR 0 1
27187: PPUSH
27188: CALL_OW 311
27192: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27193: LD_VAR 0 4
27197: PPUSH
27198: LD_EXP 106
27202: PUSH
27203: LD_VAR 0 2
27207: ARRAY
27208: PUSH
27209: LD_INT 3
27211: ARRAY
27212: PPUSH
27213: LD_EXP 106
27217: PUSH
27218: LD_VAR 0 2
27222: ARRAY
27223: PUSH
27224: LD_INT 4
27226: ARRAY
27227: PPUSH
27228: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27232: LD_VAR 0 4
27236: PPUSH
27237: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27241: LD_VAR 0 4
27245: PPUSH
27246: LD_VAR 0 2
27250: PPUSH
27251: CALL_OW 180
// end else
27255: GO 27370
// if GetControl ( vehicle ) = control_remote then
27257: LD_VAR 0 1
27261: PPUSH
27262: CALL_OW 263
27266: PUSH
27267: LD_INT 2
27269: EQUAL
27270: IFFALSE 27331
// begin wait ( 0 0$2 ) ;
27272: LD_INT 70
27274: PPUSH
27275: CALL_OW 67
// if Connect ( vehicle ) then
27279: LD_VAR 0 1
27283: PPUSH
27284: CALL 40201 0 1
27288: IFFALSE 27329
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27290: LD_VAR 0 1
27294: PPUSH
27295: LD_EXP 106
27299: PUSH
27300: LD_VAR 0 2
27304: ARRAY
27305: PUSH
27306: LD_INT 3
27308: ARRAY
27309: PPUSH
27310: LD_EXP 106
27314: PUSH
27315: LD_VAR 0 2
27319: ARRAY
27320: PUSH
27321: LD_INT 4
27323: ARRAY
27324: PPUSH
27325: CALL_OW 171
// end else
27329: GO 27370
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27331: LD_VAR 0 1
27335: PPUSH
27336: LD_EXP 106
27340: PUSH
27341: LD_VAR 0 2
27345: ARRAY
27346: PUSH
27347: LD_INT 3
27349: ARRAY
27350: PPUSH
27351: LD_EXP 106
27355: PUSH
27356: LD_VAR 0 2
27360: ARRAY
27361: PUSH
27362: LD_INT 4
27364: ARRAY
27365: PPUSH
27366: CALL_OW 171
// end ; end ;
27370: LD_VAR 0 3
27374: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27375: LD_INT 0
27377: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27378: LD_VAR 0 1
27382: PUSH
27383: LD_INT 250
27385: EQUAL
27386: PUSH
27387: LD_VAR 0 2
27391: PPUSH
27392: CALL_OW 264
27396: PUSH
27397: LD_INT 81
27399: EQUAL
27400: AND
27401: IFFALSE 27422
// MinerPlaceMine ( unit , x , y ) ;
27403: LD_VAR 0 2
27407: PPUSH
27408: LD_VAR 0 4
27412: PPUSH
27413: LD_VAR 0 5
27417: PPUSH
27418: CALL 30412 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27422: LD_VAR 0 1
27426: PUSH
27427: LD_INT 251
27429: EQUAL
27430: PUSH
27431: LD_VAR 0 2
27435: PPUSH
27436: CALL_OW 264
27440: PUSH
27441: LD_INT 81
27443: EQUAL
27444: AND
27445: IFFALSE 27466
// MinerDetonateMine ( unit , x , y ) ;
27447: LD_VAR 0 2
27451: PPUSH
27452: LD_VAR 0 4
27456: PPUSH
27457: LD_VAR 0 5
27461: PPUSH
27462: CALL 30687 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27466: LD_VAR 0 1
27470: PUSH
27471: LD_INT 252
27473: EQUAL
27474: PUSH
27475: LD_VAR 0 2
27479: PPUSH
27480: CALL_OW 264
27484: PUSH
27485: LD_INT 81
27487: EQUAL
27488: AND
27489: IFFALSE 27510
// MinerCreateMinefield ( unit , x , y ) ;
27491: LD_VAR 0 2
27495: PPUSH
27496: LD_VAR 0 4
27500: PPUSH
27501: LD_VAR 0 5
27505: PPUSH
27506: CALL 31104 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27510: LD_VAR 0 1
27514: PUSH
27515: LD_INT 253
27517: EQUAL
27518: PUSH
27519: LD_VAR 0 2
27523: PPUSH
27524: CALL_OW 257
27528: PUSH
27529: LD_INT 5
27531: EQUAL
27532: AND
27533: IFFALSE 27554
// ComBinocular ( unit , x , y ) ;
27535: LD_VAR 0 2
27539: PPUSH
27540: LD_VAR 0 4
27544: PPUSH
27545: LD_VAR 0 5
27549: PPUSH
27550: CALL 31473 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27554: LD_VAR 0 1
27558: PUSH
27559: LD_INT 254
27561: EQUAL
27562: PUSH
27563: LD_VAR 0 2
27567: PPUSH
27568: CALL_OW 264
27572: PUSH
27573: LD_INT 99
27575: EQUAL
27576: AND
27577: PUSH
27578: LD_VAR 0 3
27582: PPUSH
27583: CALL_OW 263
27587: PUSH
27588: LD_INT 3
27590: EQUAL
27591: AND
27592: IFFALSE 27608
// HackDestroyVehicle ( unit , selectedUnit ) ;
27594: LD_VAR 0 2
27598: PPUSH
27599: LD_VAR 0 3
27603: PPUSH
27604: CALL 29776 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27608: LD_VAR 0 1
27612: PUSH
27613: LD_INT 255
27615: EQUAL
27616: PUSH
27617: LD_VAR 0 2
27621: PPUSH
27622: CALL_OW 264
27626: PUSH
27627: LD_INT 14
27629: PUSH
27630: LD_INT 53
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: IN
27637: AND
27638: PUSH
27639: LD_VAR 0 4
27643: PPUSH
27644: LD_VAR 0 5
27648: PPUSH
27649: CALL_OW 488
27653: AND
27654: IFFALSE 27678
// CutTreeXYR ( unit , x , y , 12 ) ;
27656: LD_VAR 0 2
27660: PPUSH
27661: LD_VAR 0 4
27665: PPUSH
27666: LD_VAR 0 5
27670: PPUSH
27671: LD_INT 12
27673: PPUSH
27674: CALL 27773 0 4
// if cmd = 256 then
27678: LD_VAR 0 1
27682: PUSH
27683: LD_INT 256
27685: EQUAL
27686: IFFALSE 27707
// SetFactoryWaypoint ( unit , x , y ) ;
27688: LD_VAR 0 2
27692: PPUSH
27693: LD_VAR 0 4
27697: PPUSH
27698: LD_VAR 0 5
27702: PPUSH
27703: CALL 25688 0 3
// if cmd = 257 then
27707: LD_VAR 0 1
27711: PUSH
27712: LD_INT 257
27714: EQUAL
27715: IFFALSE 27736
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27717: LD_VAR 0 2
27721: PPUSH
27722: LD_VAR 0 4
27726: PPUSH
27727: LD_VAR 0 5
27731: PPUSH
27732: CALL 26050 0 3
// if cmd = 258 then
27736: LD_VAR 0 1
27740: PUSH
27741: LD_INT 258
27743: EQUAL
27744: IFFALSE 27768
// BurnTreeXYR ( unit , x , y , 8 ) ;
27746: LD_VAR 0 2
27750: PPUSH
27751: LD_VAR 0 4
27755: PPUSH
27756: LD_VAR 0 5
27760: PPUSH
27761: LD_INT 8
27763: PPUSH
27764: CALL 28167 0 4
// end ;
27768: LD_VAR 0 6
27772: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27773: LD_INT 0
27775: PPUSH
27776: PPUSH
27777: PPUSH
27778: PPUSH
27779: PPUSH
27780: PPUSH
27781: PPUSH
27782: PPUSH
27783: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27784: LD_VAR 0 1
27788: PPUSH
27789: CALL_OW 302
27793: NOT
27794: PUSH
27795: LD_VAR 0 2
27799: PPUSH
27800: LD_VAR 0 3
27804: PPUSH
27805: CALL_OW 488
27809: NOT
27810: OR
27811: PUSH
27812: LD_VAR 0 4
27816: NOT
27817: OR
27818: IFFALSE 27822
// exit ;
27820: GO 28162
// list := [ ] ;
27822: LD_ADDR_VAR 0 13
27826: PUSH
27827: EMPTY
27828: ST_TO_ADDR
// if x - r < 0 then
27829: LD_VAR 0 2
27833: PUSH
27834: LD_VAR 0 4
27838: MINUS
27839: PUSH
27840: LD_INT 0
27842: LESS
27843: IFFALSE 27855
// min_x := 0 else
27845: LD_ADDR_VAR 0 7
27849: PUSH
27850: LD_INT 0
27852: ST_TO_ADDR
27853: GO 27871
// min_x := x - r ;
27855: LD_ADDR_VAR 0 7
27859: PUSH
27860: LD_VAR 0 2
27864: PUSH
27865: LD_VAR 0 4
27869: MINUS
27870: ST_TO_ADDR
// if y - r < 0 then
27871: LD_VAR 0 3
27875: PUSH
27876: LD_VAR 0 4
27880: MINUS
27881: PUSH
27882: LD_INT 0
27884: LESS
27885: IFFALSE 27897
// min_y := 0 else
27887: LD_ADDR_VAR 0 8
27891: PUSH
27892: LD_INT 0
27894: ST_TO_ADDR
27895: GO 27913
// min_y := y - r ;
27897: LD_ADDR_VAR 0 8
27901: PUSH
27902: LD_VAR 0 3
27906: PUSH
27907: LD_VAR 0 4
27911: MINUS
27912: ST_TO_ADDR
// max_x := x + r ;
27913: LD_ADDR_VAR 0 9
27917: PUSH
27918: LD_VAR 0 2
27922: PUSH
27923: LD_VAR 0 4
27927: PLUS
27928: ST_TO_ADDR
// max_y := y + r ;
27929: LD_ADDR_VAR 0 10
27933: PUSH
27934: LD_VAR 0 3
27938: PUSH
27939: LD_VAR 0 4
27943: PLUS
27944: ST_TO_ADDR
// for _x = min_x to max_x do
27945: LD_ADDR_VAR 0 11
27949: PUSH
27950: DOUBLE
27951: LD_VAR 0 7
27955: DEC
27956: ST_TO_ADDR
27957: LD_VAR 0 9
27961: PUSH
27962: FOR_TO
27963: IFFALSE 28080
// for _y = min_y to max_y do
27965: LD_ADDR_VAR 0 12
27969: PUSH
27970: DOUBLE
27971: LD_VAR 0 8
27975: DEC
27976: ST_TO_ADDR
27977: LD_VAR 0 10
27981: PUSH
27982: FOR_TO
27983: IFFALSE 28076
// begin if not ValidHex ( _x , _y ) then
27985: LD_VAR 0 11
27989: PPUSH
27990: LD_VAR 0 12
27994: PPUSH
27995: CALL_OW 488
27999: NOT
28000: IFFALSE 28004
// continue ;
28002: GO 27982
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28004: LD_VAR 0 11
28008: PPUSH
28009: LD_VAR 0 12
28013: PPUSH
28014: CALL_OW 351
28018: PUSH
28019: LD_VAR 0 11
28023: PPUSH
28024: LD_VAR 0 12
28028: PPUSH
28029: CALL_OW 554
28033: AND
28034: IFFALSE 28074
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28036: LD_ADDR_VAR 0 13
28040: PUSH
28041: LD_VAR 0 13
28045: PPUSH
28046: LD_VAR 0 13
28050: PUSH
28051: LD_INT 1
28053: PLUS
28054: PPUSH
28055: LD_VAR 0 11
28059: PUSH
28060: LD_VAR 0 12
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PPUSH
28069: CALL_OW 2
28073: ST_TO_ADDR
// end ;
28074: GO 27982
28076: POP
28077: POP
28078: GO 27962
28080: POP
28081: POP
// if not list then
28082: LD_VAR 0 13
28086: NOT
28087: IFFALSE 28091
// exit ;
28089: GO 28162
// for i in list do
28091: LD_ADDR_VAR 0 6
28095: PUSH
28096: LD_VAR 0 13
28100: PUSH
28101: FOR_IN
28102: IFFALSE 28160
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28104: LD_VAR 0 1
28108: PPUSH
28109: LD_STRING M
28111: PUSH
28112: LD_VAR 0 6
28116: PUSH
28117: LD_INT 1
28119: ARRAY
28120: PUSH
28121: LD_VAR 0 6
28125: PUSH
28126: LD_INT 2
28128: ARRAY
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: LD_INT 0
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: PUSH
28151: EMPTY
28152: LIST
28153: PPUSH
28154: CALL_OW 447
28158: GO 28101
28160: POP
28161: POP
// end ;
28162: LD_VAR 0 5
28166: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28167: LD_INT 0
28169: PPUSH
28170: PPUSH
28171: PPUSH
28172: PPUSH
28173: PPUSH
28174: PPUSH
28175: PPUSH
28176: PPUSH
28177: PPUSH
28178: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28179: LD_VAR 0 1
28183: PPUSH
28184: CALL_OW 302
28188: NOT
28189: PUSH
28190: LD_VAR 0 2
28194: PPUSH
28195: LD_VAR 0 3
28199: PPUSH
28200: CALL_OW 488
28204: NOT
28205: OR
28206: PUSH
28207: LD_VAR 0 4
28211: NOT
28212: OR
28213: IFFALSE 28217
// exit ;
28215: GO 28730
// list := [ ] ;
28217: LD_ADDR_VAR 0 13
28221: PUSH
28222: EMPTY
28223: ST_TO_ADDR
// if x - r < 0 then
28224: LD_VAR 0 2
28228: PUSH
28229: LD_VAR 0 4
28233: MINUS
28234: PUSH
28235: LD_INT 0
28237: LESS
28238: IFFALSE 28250
// min_x := 0 else
28240: LD_ADDR_VAR 0 7
28244: PUSH
28245: LD_INT 0
28247: ST_TO_ADDR
28248: GO 28266
// min_x := x - r ;
28250: LD_ADDR_VAR 0 7
28254: PUSH
28255: LD_VAR 0 2
28259: PUSH
28260: LD_VAR 0 4
28264: MINUS
28265: ST_TO_ADDR
// if y - r < 0 then
28266: LD_VAR 0 3
28270: PUSH
28271: LD_VAR 0 4
28275: MINUS
28276: PUSH
28277: LD_INT 0
28279: LESS
28280: IFFALSE 28292
// min_y := 0 else
28282: LD_ADDR_VAR 0 8
28286: PUSH
28287: LD_INT 0
28289: ST_TO_ADDR
28290: GO 28308
// min_y := y - r ;
28292: LD_ADDR_VAR 0 8
28296: PUSH
28297: LD_VAR 0 3
28301: PUSH
28302: LD_VAR 0 4
28306: MINUS
28307: ST_TO_ADDR
// max_x := x + r ;
28308: LD_ADDR_VAR 0 9
28312: PUSH
28313: LD_VAR 0 2
28317: PUSH
28318: LD_VAR 0 4
28322: PLUS
28323: ST_TO_ADDR
// max_y := y + r ;
28324: LD_ADDR_VAR 0 10
28328: PUSH
28329: LD_VAR 0 3
28333: PUSH
28334: LD_VAR 0 4
28338: PLUS
28339: ST_TO_ADDR
// for _x = min_x to max_x do
28340: LD_ADDR_VAR 0 11
28344: PUSH
28345: DOUBLE
28346: LD_VAR 0 7
28350: DEC
28351: ST_TO_ADDR
28352: LD_VAR 0 9
28356: PUSH
28357: FOR_TO
28358: IFFALSE 28475
// for _y = min_y to max_y do
28360: LD_ADDR_VAR 0 12
28364: PUSH
28365: DOUBLE
28366: LD_VAR 0 8
28370: DEC
28371: ST_TO_ADDR
28372: LD_VAR 0 10
28376: PUSH
28377: FOR_TO
28378: IFFALSE 28471
// begin if not ValidHex ( _x , _y ) then
28380: LD_VAR 0 11
28384: PPUSH
28385: LD_VAR 0 12
28389: PPUSH
28390: CALL_OW 488
28394: NOT
28395: IFFALSE 28399
// continue ;
28397: GO 28377
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28399: LD_VAR 0 11
28403: PPUSH
28404: LD_VAR 0 12
28408: PPUSH
28409: CALL_OW 351
28413: PUSH
28414: LD_VAR 0 11
28418: PPUSH
28419: LD_VAR 0 12
28423: PPUSH
28424: CALL_OW 554
28428: AND
28429: IFFALSE 28469
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28431: LD_ADDR_VAR 0 13
28435: PUSH
28436: LD_VAR 0 13
28440: PPUSH
28441: LD_VAR 0 13
28445: PUSH
28446: LD_INT 1
28448: PLUS
28449: PPUSH
28450: LD_VAR 0 11
28454: PUSH
28455: LD_VAR 0 12
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PPUSH
28464: CALL_OW 2
28468: ST_TO_ADDR
// end ;
28469: GO 28377
28471: POP
28472: POP
28473: GO 28357
28475: POP
28476: POP
// if not list then
28477: LD_VAR 0 13
28481: NOT
28482: IFFALSE 28486
// exit ;
28484: GO 28730
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28486: LD_ADDR_VAR 0 13
28490: PUSH
28491: LD_VAR 0 1
28495: PPUSH
28496: LD_VAR 0 13
28500: PPUSH
28501: LD_INT 1
28503: PPUSH
28504: LD_INT 1
28506: PPUSH
28507: CALL 37343 0 4
28511: ST_TO_ADDR
// ComStop ( flame ) ;
28512: LD_VAR 0 1
28516: PPUSH
28517: CALL_OW 141
// for i in list do
28521: LD_ADDR_VAR 0 6
28525: PUSH
28526: LD_VAR 0 13
28530: PUSH
28531: FOR_IN
28532: IFFALSE 28563
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28534: LD_VAR 0 1
28538: PPUSH
28539: LD_VAR 0 6
28543: PUSH
28544: LD_INT 1
28546: ARRAY
28547: PPUSH
28548: LD_VAR 0 6
28552: PUSH
28553: LD_INT 2
28555: ARRAY
28556: PPUSH
28557: CALL_OW 176
28561: GO 28531
28563: POP
28564: POP
// repeat wait ( 0 0$1 ) ;
28565: LD_INT 35
28567: PPUSH
28568: CALL_OW 67
// task := GetTaskList ( flame ) ;
28572: LD_ADDR_VAR 0 14
28576: PUSH
28577: LD_VAR 0 1
28581: PPUSH
28582: CALL_OW 437
28586: ST_TO_ADDR
// if not task then
28587: LD_VAR 0 14
28591: NOT
28592: IFFALSE 28596
// exit ;
28594: GO 28730
// if task [ 1 ] [ 1 ] <> | then
28596: LD_VAR 0 14
28600: PUSH
28601: LD_INT 1
28603: ARRAY
28604: PUSH
28605: LD_INT 1
28607: ARRAY
28608: PUSH
28609: LD_STRING |
28611: NONEQUAL
28612: IFFALSE 28616
// exit ;
28614: GO 28730
// _x := task [ 1 ] [ 2 ] ;
28616: LD_ADDR_VAR 0 11
28620: PUSH
28621: LD_VAR 0 14
28625: PUSH
28626: LD_INT 1
28628: ARRAY
28629: PUSH
28630: LD_INT 2
28632: ARRAY
28633: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28634: LD_ADDR_VAR 0 12
28638: PUSH
28639: LD_VAR 0 14
28643: PUSH
28644: LD_INT 1
28646: ARRAY
28647: PUSH
28648: LD_INT 3
28650: ARRAY
28651: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28652: LD_VAR 0 11
28656: PPUSH
28657: LD_VAR 0 12
28661: PPUSH
28662: CALL_OW 351
28666: NOT
28667: PUSH
28668: LD_VAR 0 11
28672: PPUSH
28673: LD_VAR 0 12
28677: PPUSH
28678: CALL_OW 554
28682: NOT
28683: OR
28684: IFFALSE 28718
// begin task := Delete ( task , 1 ) ;
28686: LD_ADDR_VAR 0 14
28690: PUSH
28691: LD_VAR 0 14
28695: PPUSH
28696: LD_INT 1
28698: PPUSH
28699: CALL_OW 3
28703: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28704: LD_VAR 0 1
28708: PPUSH
28709: LD_VAR 0 14
28713: PPUSH
28714: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28718: LD_VAR 0 1
28722: PPUSH
28723: CALL_OW 314
28727: NOT
28728: IFFALSE 28565
// end ;
28730: LD_VAR 0 5
28734: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28735: LD_EXP 109
28739: NOT
28740: IFFALSE 28790
28742: GO 28744
28744: DISABLE
// begin initHack := true ;
28745: LD_ADDR_EXP 109
28749: PUSH
28750: LD_INT 1
28752: ST_TO_ADDR
// hackTanks := [ ] ;
28753: LD_ADDR_EXP 110
28757: PUSH
28758: EMPTY
28759: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28760: LD_ADDR_EXP 111
28764: PUSH
28765: EMPTY
28766: ST_TO_ADDR
// hackLimit := 3 ;
28767: LD_ADDR_EXP 112
28771: PUSH
28772: LD_INT 3
28774: ST_TO_ADDR
// hackDist := 12 ;
28775: LD_ADDR_EXP 113
28779: PUSH
28780: LD_INT 12
28782: ST_TO_ADDR
// hackCounter := [ ] ;
28783: LD_ADDR_EXP 114
28787: PUSH
28788: EMPTY
28789: ST_TO_ADDR
// end ;
28790: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28791: LD_EXP 109
28795: PUSH
28796: LD_INT 34
28798: PUSH
28799: LD_INT 99
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PPUSH
28806: CALL_OW 69
28810: AND
28811: IFFALSE 29064
28813: GO 28815
28815: DISABLE
28816: LD_INT 0
28818: PPUSH
28819: PPUSH
// begin enable ;
28820: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28821: LD_ADDR_VAR 0 1
28825: PUSH
28826: LD_INT 34
28828: PUSH
28829: LD_INT 99
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PPUSH
28836: CALL_OW 69
28840: PUSH
28841: FOR_IN
28842: IFFALSE 29062
// begin if not i in hackTanks then
28844: LD_VAR 0 1
28848: PUSH
28849: LD_EXP 110
28853: IN
28854: NOT
28855: IFFALSE 28938
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28857: LD_ADDR_EXP 110
28861: PUSH
28862: LD_EXP 110
28866: PPUSH
28867: LD_EXP 110
28871: PUSH
28872: LD_INT 1
28874: PLUS
28875: PPUSH
28876: LD_VAR 0 1
28880: PPUSH
28881: CALL_OW 1
28885: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28886: LD_ADDR_EXP 111
28890: PUSH
28891: LD_EXP 111
28895: PPUSH
28896: LD_EXP 111
28900: PUSH
28901: LD_INT 1
28903: PLUS
28904: PPUSH
28905: EMPTY
28906: PPUSH
28907: CALL_OW 1
28911: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28912: LD_ADDR_EXP 114
28916: PUSH
28917: LD_EXP 114
28921: PPUSH
28922: LD_EXP 114
28926: PUSH
28927: LD_INT 1
28929: PLUS
28930: PPUSH
28931: EMPTY
28932: PPUSH
28933: CALL_OW 1
28937: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28938: LD_VAR 0 1
28942: PPUSH
28943: CALL_OW 302
28947: NOT
28948: IFFALSE 28961
// begin HackUnlinkAll ( i ) ;
28950: LD_VAR 0 1
28954: PPUSH
28955: CALL 29067 0 1
// continue ;
28959: GO 28841
// end ; HackCheckCapturedStatus ( i ) ;
28961: LD_VAR 0 1
28965: PPUSH
28966: CALL 29510 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28970: LD_ADDR_VAR 0 2
28974: PUSH
28975: LD_INT 81
28977: PUSH
28978: LD_VAR 0 1
28982: PPUSH
28983: CALL_OW 255
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 33
28994: PUSH
28995: LD_INT 3
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 91
29004: PUSH
29005: LD_VAR 0 1
29009: PUSH
29010: LD_EXP 113
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 50
29022: PUSH
29023: EMPTY
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: PPUSH
29032: CALL_OW 69
29036: ST_TO_ADDR
// if not tmp then
29037: LD_VAR 0 2
29041: NOT
29042: IFFALSE 29046
// continue ;
29044: GO 28841
// HackLink ( i , tmp ) ;
29046: LD_VAR 0 1
29050: PPUSH
29051: LD_VAR 0 2
29055: PPUSH
29056: CALL 29203 0 2
// end ;
29060: GO 28841
29062: POP
29063: POP
// end ;
29064: PPOPN 2
29066: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29067: LD_INT 0
29069: PPUSH
29070: PPUSH
29071: PPUSH
// if not hack in hackTanks then
29072: LD_VAR 0 1
29076: PUSH
29077: LD_EXP 110
29081: IN
29082: NOT
29083: IFFALSE 29087
// exit ;
29085: GO 29198
// index := GetElementIndex ( hackTanks , hack ) ;
29087: LD_ADDR_VAR 0 4
29091: PUSH
29092: LD_EXP 110
29096: PPUSH
29097: LD_VAR 0 1
29101: PPUSH
29102: CALL 36640 0 2
29106: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29107: LD_EXP 111
29111: PUSH
29112: LD_VAR 0 4
29116: ARRAY
29117: IFFALSE 29198
// begin for i in hackTanksCaptured [ index ] do
29119: LD_ADDR_VAR 0 3
29123: PUSH
29124: LD_EXP 111
29128: PUSH
29129: LD_VAR 0 4
29133: ARRAY
29134: PUSH
29135: FOR_IN
29136: IFFALSE 29162
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29138: LD_VAR 0 3
29142: PUSH
29143: LD_INT 1
29145: ARRAY
29146: PPUSH
29147: LD_VAR 0 3
29151: PUSH
29152: LD_INT 2
29154: ARRAY
29155: PPUSH
29156: CALL_OW 235
29160: GO 29135
29162: POP
29163: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29164: LD_ADDR_EXP 111
29168: PUSH
29169: LD_EXP 111
29173: PPUSH
29174: LD_VAR 0 4
29178: PPUSH
29179: EMPTY
29180: PPUSH
29181: CALL_OW 1
29185: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29186: LD_VAR 0 1
29190: PPUSH
29191: LD_INT 0
29193: PPUSH
29194: CALL_OW 505
// end ; end ;
29198: LD_VAR 0 2
29202: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29203: LD_INT 0
29205: PPUSH
29206: PPUSH
29207: PPUSH
// if not hack in hackTanks or not vehicles then
29208: LD_VAR 0 1
29212: PUSH
29213: LD_EXP 110
29217: IN
29218: NOT
29219: PUSH
29220: LD_VAR 0 2
29224: NOT
29225: OR
29226: IFFALSE 29230
// exit ;
29228: GO 29505
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29230: LD_ADDR_VAR 0 2
29234: PUSH
29235: LD_VAR 0 1
29239: PPUSH
29240: LD_VAR 0 2
29244: PPUSH
29245: LD_INT 1
29247: PPUSH
29248: LD_INT 1
29250: PPUSH
29251: CALL 37290 0 4
29255: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29256: LD_ADDR_VAR 0 5
29260: PUSH
29261: LD_EXP 110
29265: PPUSH
29266: LD_VAR 0 1
29270: PPUSH
29271: CALL 36640 0 2
29275: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29276: LD_EXP 111
29280: PUSH
29281: LD_VAR 0 5
29285: ARRAY
29286: PUSH
29287: LD_EXP 112
29291: LESS
29292: IFFALSE 29481
// begin for i := 1 to vehicles do
29294: LD_ADDR_VAR 0 4
29298: PUSH
29299: DOUBLE
29300: LD_INT 1
29302: DEC
29303: ST_TO_ADDR
29304: LD_VAR 0 2
29308: PUSH
29309: FOR_TO
29310: IFFALSE 29479
// begin if hackTanksCaptured [ index ] = hackLimit then
29312: LD_EXP 111
29316: PUSH
29317: LD_VAR 0 5
29321: ARRAY
29322: PUSH
29323: LD_EXP 112
29327: EQUAL
29328: IFFALSE 29332
// break ;
29330: GO 29479
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29332: LD_ADDR_EXP 114
29336: PUSH
29337: LD_EXP 114
29341: PPUSH
29342: LD_VAR 0 5
29346: PPUSH
29347: LD_EXP 114
29351: PUSH
29352: LD_VAR 0 5
29356: ARRAY
29357: PUSH
29358: LD_INT 1
29360: PLUS
29361: PPUSH
29362: CALL_OW 1
29366: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29367: LD_ADDR_EXP 111
29371: PUSH
29372: LD_EXP 111
29376: PPUSH
29377: LD_VAR 0 5
29381: PUSH
29382: LD_EXP 111
29386: PUSH
29387: LD_VAR 0 5
29391: ARRAY
29392: PUSH
29393: LD_INT 1
29395: PLUS
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PPUSH
29401: LD_VAR 0 2
29405: PUSH
29406: LD_VAR 0 4
29410: ARRAY
29411: PUSH
29412: LD_VAR 0 2
29416: PUSH
29417: LD_VAR 0 4
29421: ARRAY
29422: PPUSH
29423: CALL_OW 255
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PPUSH
29432: CALL 36855 0 3
29436: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29437: LD_VAR 0 2
29441: PUSH
29442: LD_VAR 0 4
29446: ARRAY
29447: PPUSH
29448: LD_VAR 0 1
29452: PPUSH
29453: CALL_OW 255
29457: PPUSH
29458: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29462: LD_VAR 0 2
29466: PUSH
29467: LD_VAR 0 4
29471: ARRAY
29472: PPUSH
29473: CALL_OW 141
// end ;
29477: GO 29309
29479: POP
29480: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29481: LD_VAR 0 1
29485: PPUSH
29486: LD_EXP 111
29490: PUSH
29491: LD_VAR 0 5
29495: ARRAY
29496: PUSH
29497: LD_INT 0
29499: PLUS
29500: PPUSH
29501: CALL_OW 505
// end ;
29505: LD_VAR 0 3
29509: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29510: LD_INT 0
29512: PPUSH
29513: PPUSH
29514: PPUSH
29515: PPUSH
// if not hack in hackTanks then
29516: LD_VAR 0 1
29520: PUSH
29521: LD_EXP 110
29525: IN
29526: NOT
29527: IFFALSE 29531
// exit ;
29529: GO 29771
// index := GetElementIndex ( hackTanks , hack ) ;
29531: LD_ADDR_VAR 0 4
29535: PUSH
29536: LD_EXP 110
29540: PPUSH
29541: LD_VAR 0 1
29545: PPUSH
29546: CALL 36640 0 2
29550: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29551: LD_ADDR_VAR 0 3
29555: PUSH
29556: DOUBLE
29557: LD_EXP 111
29561: PUSH
29562: LD_VAR 0 4
29566: ARRAY
29567: INC
29568: ST_TO_ADDR
29569: LD_INT 1
29571: PUSH
29572: FOR_DOWNTO
29573: IFFALSE 29745
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29575: LD_ADDR_VAR 0 5
29579: PUSH
29580: LD_EXP 111
29584: PUSH
29585: LD_VAR 0 4
29589: ARRAY
29590: PUSH
29591: LD_VAR 0 3
29595: ARRAY
29596: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29597: LD_VAR 0 5
29601: PUSH
29602: LD_INT 1
29604: ARRAY
29605: PPUSH
29606: CALL_OW 302
29610: NOT
29611: PUSH
29612: LD_VAR 0 5
29616: PUSH
29617: LD_INT 1
29619: ARRAY
29620: PPUSH
29621: CALL_OW 255
29625: PUSH
29626: LD_VAR 0 1
29630: PPUSH
29631: CALL_OW 255
29635: NONEQUAL
29636: OR
29637: IFFALSE 29743
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29639: LD_VAR 0 5
29643: PUSH
29644: LD_INT 1
29646: ARRAY
29647: PPUSH
29648: CALL_OW 305
29652: PUSH
29653: LD_VAR 0 5
29657: PUSH
29658: LD_INT 1
29660: ARRAY
29661: PPUSH
29662: CALL_OW 255
29666: PUSH
29667: LD_VAR 0 1
29671: PPUSH
29672: CALL_OW 255
29676: EQUAL
29677: AND
29678: IFFALSE 29702
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29680: LD_VAR 0 5
29684: PUSH
29685: LD_INT 1
29687: ARRAY
29688: PPUSH
29689: LD_VAR 0 5
29693: PUSH
29694: LD_INT 2
29696: ARRAY
29697: PPUSH
29698: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29702: LD_ADDR_EXP 111
29706: PUSH
29707: LD_EXP 111
29711: PPUSH
29712: LD_VAR 0 4
29716: PPUSH
29717: LD_EXP 111
29721: PUSH
29722: LD_VAR 0 4
29726: ARRAY
29727: PPUSH
29728: LD_VAR 0 3
29732: PPUSH
29733: CALL_OW 3
29737: PPUSH
29738: CALL_OW 1
29742: ST_TO_ADDR
// end ; end ;
29743: GO 29572
29745: POP
29746: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29747: LD_VAR 0 1
29751: PPUSH
29752: LD_EXP 111
29756: PUSH
29757: LD_VAR 0 4
29761: ARRAY
29762: PUSH
29763: LD_INT 0
29765: PLUS
29766: PPUSH
29767: CALL_OW 505
// end ;
29771: LD_VAR 0 2
29775: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29776: LD_INT 0
29778: PPUSH
29779: PPUSH
29780: PPUSH
29781: PPUSH
// if not hack in hackTanks then
29782: LD_VAR 0 1
29786: PUSH
29787: LD_EXP 110
29791: IN
29792: NOT
29793: IFFALSE 29797
// exit ;
29795: GO 29882
// index := GetElementIndex ( hackTanks , hack ) ;
29797: LD_ADDR_VAR 0 5
29801: PUSH
29802: LD_EXP 110
29806: PPUSH
29807: LD_VAR 0 1
29811: PPUSH
29812: CALL 36640 0 2
29816: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29817: LD_ADDR_VAR 0 4
29821: PUSH
29822: DOUBLE
29823: LD_INT 1
29825: DEC
29826: ST_TO_ADDR
29827: LD_EXP 111
29831: PUSH
29832: LD_VAR 0 5
29836: ARRAY
29837: PUSH
29838: FOR_TO
29839: IFFALSE 29880
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29841: LD_EXP 111
29845: PUSH
29846: LD_VAR 0 5
29850: ARRAY
29851: PUSH
29852: LD_VAR 0 4
29856: ARRAY
29857: PUSH
29858: LD_INT 1
29860: ARRAY
29861: PUSH
29862: LD_VAR 0 2
29866: EQUAL
29867: IFFALSE 29878
// KillUnit ( vehicle ) ;
29869: LD_VAR 0 2
29873: PPUSH
29874: CALL_OW 66
29878: GO 29838
29880: POP
29881: POP
// end ;
29882: LD_VAR 0 3
29886: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29887: LD_EXP 115
29891: NOT
29892: IFFALSE 29927
29894: GO 29896
29896: DISABLE
// begin initMiner := true ;
29897: LD_ADDR_EXP 115
29901: PUSH
29902: LD_INT 1
29904: ST_TO_ADDR
// minersList := [ ] ;
29905: LD_ADDR_EXP 116
29909: PUSH
29910: EMPTY
29911: ST_TO_ADDR
// minerMinesList := [ ] ;
29912: LD_ADDR_EXP 117
29916: PUSH
29917: EMPTY
29918: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29919: LD_ADDR_EXP 118
29923: PUSH
29924: LD_INT 5
29926: ST_TO_ADDR
// end ;
29927: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29928: LD_EXP 115
29932: PUSH
29933: LD_INT 34
29935: PUSH
29936: LD_INT 81
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PPUSH
29943: CALL_OW 69
29947: AND
29948: IFFALSE 30409
29950: GO 29952
29952: DISABLE
29953: LD_INT 0
29955: PPUSH
29956: PPUSH
29957: PPUSH
29958: PPUSH
// begin enable ;
29959: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29960: LD_ADDR_VAR 0 1
29964: PUSH
29965: LD_INT 34
29967: PUSH
29968: LD_INT 81
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PPUSH
29975: CALL_OW 69
29979: PUSH
29980: FOR_IN
29981: IFFALSE 30053
// begin if not i in minersList then
29983: LD_VAR 0 1
29987: PUSH
29988: LD_EXP 116
29992: IN
29993: NOT
29994: IFFALSE 30051
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29996: LD_ADDR_EXP 116
30000: PUSH
30001: LD_EXP 116
30005: PPUSH
30006: LD_EXP 116
30010: PUSH
30011: LD_INT 1
30013: PLUS
30014: PPUSH
30015: LD_VAR 0 1
30019: PPUSH
30020: CALL_OW 1
30024: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30025: LD_ADDR_EXP 117
30029: PUSH
30030: LD_EXP 117
30034: PPUSH
30035: LD_EXP 117
30039: PUSH
30040: LD_INT 1
30042: PLUS
30043: PPUSH
30044: EMPTY
30045: PPUSH
30046: CALL_OW 1
30050: ST_TO_ADDR
// end end ;
30051: GO 29980
30053: POP
30054: POP
// for i := minerMinesList downto 1 do
30055: LD_ADDR_VAR 0 1
30059: PUSH
30060: DOUBLE
30061: LD_EXP 117
30065: INC
30066: ST_TO_ADDR
30067: LD_INT 1
30069: PUSH
30070: FOR_DOWNTO
30071: IFFALSE 30407
// begin if IsLive ( minersList [ i ] ) then
30073: LD_EXP 116
30077: PUSH
30078: LD_VAR 0 1
30082: ARRAY
30083: PPUSH
30084: CALL_OW 300
30088: IFFALSE 30116
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30090: LD_EXP 116
30094: PUSH
30095: LD_VAR 0 1
30099: ARRAY
30100: PPUSH
30101: LD_EXP 117
30105: PUSH
30106: LD_VAR 0 1
30110: ARRAY
30111: PPUSH
30112: CALL_OW 505
// if not minerMinesList [ i ] then
30116: LD_EXP 117
30120: PUSH
30121: LD_VAR 0 1
30125: ARRAY
30126: NOT
30127: IFFALSE 30131
// continue ;
30129: GO 30070
// for j := minerMinesList [ i ] downto 1 do
30131: LD_ADDR_VAR 0 2
30135: PUSH
30136: DOUBLE
30137: LD_EXP 117
30141: PUSH
30142: LD_VAR 0 1
30146: ARRAY
30147: INC
30148: ST_TO_ADDR
30149: LD_INT 1
30151: PUSH
30152: FOR_DOWNTO
30153: IFFALSE 30403
// begin side := GetSide ( minersList [ i ] ) ;
30155: LD_ADDR_VAR 0 3
30159: PUSH
30160: LD_EXP 116
30164: PUSH
30165: LD_VAR 0 1
30169: ARRAY
30170: PPUSH
30171: CALL_OW 255
30175: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30176: LD_ADDR_VAR 0 4
30180: PUSH
30181: LD_EXP 117
30185: PUSH
30186: LD_VAR 0 1
30190: ARRAY
30191: PUSH
30192: LD_VAR 0 2
30196: ARRAY
30197: PUSH
30198: LD_INT 1
30200: ARRAY
30201: PPUSH
30202: LD_EXP 117
30206: PUSH
30207: LD_VAR 0 1
30211: ARRAY
30212: PUSH
30213: LD_VAR 0 2
30217: ARRAY
30218: PUSH
30219: LD_INT 2
30221: ARRAY
30222: PPUSH
30223: CALL_OW 428
30227: ST_TO_ADDR
// if not tmp then
30228: LD_VAR 0 4
30232: NOT
30233: IFFALSE 30237
// continue ;
30235: GO 30152
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30237: LD_VAR 0 4
30241: PUSH
30242: LD_INT 81
30244: PUSH
30245: LD_VAR 0 3
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PPUSH
30254: CALL_OW 69
30258: IN
30259: PUSH
30260: LD_EXP 117
30264: PUSH
30265: LD_VAR 0 1
30269: ARRAY
30270: PUSH
30271: LD_VAR 0 2
30275: ARRAY
30276: PUSH
30277: LD_INT 1
30279: ARRAY
30280: PPUSH
30281: LD_EXP 117
30285: PUSH
30286: LD_VAR 0 1
30290: ARRAY
30291: PUSH
30292: LD_VAR 0 2
30296: ARRAY
30297: PUSH
30298: LD_INT 2
30300: ARRAY
30301: PPUSH
30302: CALL_OW 458
30306: AND
30307: IFFALSE 30401
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30309: LD_EXP 117
30313: PUSH
30314: LD_VAR 0 1
30318: ARRAY
30319: PUSH
30320: LD_VAR 0 2
30324: ARRAY
30325: PUSH
30326: LD_INT 1
30328: ARRAY
30329: PPUSH
30330: LD_EXP 117
30334: PUSH
30335: LD_VAR 0 1
30339: ARRAY
30340: PUSH
30341: LD_VAR 0 2
30345: ARRAY
30346: PUSH
30347: LD_INT 2
30349: ARRAY
30350: PPUSH
30351: LD_VAR 0 3
30355: PPUSH
30356: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30360: LD_ADDR_EXP 117
30364: PUSH
30365: LD_EXP 117
30369: PPUSH
30370: LD_VAR 0 1
30374: PPUSH
30375: LD_EXP 117
30379: PUSH
30380: LD_VAR 0 1
30384: ARRAY
30385: PPUSH
30386: LD_VAR 0 2
30390: PPUSH
30391: CALL_OW 3
30395: PPUSH
30396: CALL_OW 1
30400: ST_TO_ADDR
// end ; end ;
30401: GO 30152
30403: POP
30404: POP
// end ;
30405: GO 30070
30407: POP
30408: POP
// end ;
30409: PPOPN 4
30411: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30412: LD_INT 0
30414: PPUSH
30415: PPUSH
// result := false ;
30416: LD_ADDR_VAR 0 4
30420: PUSH
30421: LD_INT 0
30423: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30424: LD_VAR 0 1
30428: PPUSH
30429: CALL_OW 264
30433: PUSH
30434: LD_INT 81
30436: EQUAL
30437: NOT
30438: IFFALSE 30442
// exit ;
30440: GO 30682
// index := GetElementIndex ( minersList , unit ) ;
30442: LD_ADDR_VAR 0 5
30446: PUSH
30447: LD_EXP 116
30451: PPUSH
30452: LD_VAR 0 1
30456: PPUSH
30457: CALL 36640 0 2
30461: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30462: LD_EXP 117
30466: PUSH
30467: LD_VAR 0 5
30471: ARRAY
30472: PUSH
30473: LD_EXP 118
30477: GREATEREQUAL
30478: IFFALSE 30482
// exit ;
30480: GO 30682
// ComMoveXY ( unit , x , y ) ;
30482: LD_VAR 0 1
30486: PPUSH
30487: LD_VAR 0 2
30491: PPUSH
30492: LD_VAR 0 3
30496: PPUSH
30497: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30501: LD_INT 35
30503: PPUSH
30504: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30508: LD_VAR 0 1
30512: PPUSH
30513: LD_VAR 0 2
30517: PPUSH
30518: LD_VAR 0 3
30522: PPUSH
30523: CALL 68381 0 3
30527: NOT
30528: PUSH
30529: LD_VAR 0 1
30533: PPUSH
30534: CALL_OW 314
30538: AND
30539: IFFALSE 30543
// exit ;
30541: GO 30682
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30543: LD_VAR 0 2
30547: PPUSH
30548: LD_VAR 0 3
30552: PPUSH
30553: CALL_OW 428
30557: PUSH
30558: LD_VAR 0 1
30562: EQUAL
30563: PUSH
30564: LD_VAR 0 1
30568: PPUSH
30569: CALL_OW 314
30573: NOT
30574: AND
30575: IFFALSE 30501
// PlaySoundXY ( x , y , PlantMine ) ;
30577: LD_VAR 0 2
30581: PPUSH
30582: LD_VAR 0 3
30586: PPUSH
30587: LD_STRING PlantMine
30589: PPUSH
30590: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30594: LD_VAR 0 2
30598: PPUSH
30599: LD_VAR 0 3
30603: PPUSH
30604: LD_VAR 0 1
30608: PPUSH
30609: CALL_OW 255
30613: PPUSH
30614: LD_INT 0
30616: PPUSH
30617: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30621: LD_ADDR_EXP 117
30625: PUSH
30626: LD_EXP 117
30630: PPUSH
30631: LD_VAR 0 5
30635: PUSH
30636: LD_EXP 117
30640: PUSH
30641: LD_VAR 0 5
30645: ARRAY
30646: PUSH
30647: LD_INT 1
30649: PLUS
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PPUSH
30655: LD_VAR 0 2
30659: PUSH
30660: LD_VAR 0 3
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PPUSH
30669: CALL 36855 0 3
30673: ST_TO_ADDR
// result := true ;
30674: LD_ADDR_VAR 0 4
30678: PUSH
30679: LD_INT 1
30681: ST_TO_ADDR
// end ;
30682: LD_VAR 0 4
30686: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30687: LD_INT 0
30689: PPUSH
30690: PPUSH
30691: PPUSH
// if not unit in minersList then
30692: LD_VAR 0 1
30696: PUSH
30697: LD_EXP 116
30701: IN
30702: NOT
30703: IFFALSE 30707
// exit ;
30705: GO 31099
// index := GetElementIndex ( minersList , unit ) ;
30707: LD_ADDR_VAR 0 6
30711: PUSH
30712: LD_EXP 116
30716: PPUSH
30717: LD_VAR 0 1
30721: PPUSH
30722: CALL 36640 0 2
30726: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30727: LD_ADDR_VAR 0 5
30731: PUSH
30732: DOUBLE
30733: LD_EXP 117
30737: PUSH
30738: LD_VAR 0 6
30742: ARRAY
30743: INC
30744: ST_TO_ADDR
30745: LD_INT 1
30747: PUSH
30748: FOR_DOWNTO
30749: IFFALSE 30910
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30751: LD_EXP 117
30755: PUSH
30756: LD_VAR 0 6
30760: ARRAY
30761: PUSH
30762: LD_VAR 0 5
30766: ARRAY
30767: PUSH
30768: LD_INT 1
30770: ARRAY
30771: PUSH
30772: LD_VAR 0 2
30776: EQUAL
30777: PUSH
30778: LD_EXP 117
30782: PUSH
30783: LD_VAR 0 6
30787: ARRAY
30788: PUSH
30789: LD_VAR 0 5
30793: ARRAY
30794: PUSH
30795: LD_INT 2
30797: ARRAY
30798: PUSH
30799: LD_VAR 0 3
30803: EQUAL
30804: AND
30805: IFFALSE 30908
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30807: LD_EXP 117
30811: PUSH
30812: LD_VAR 0 6
30816: ARRAY
30817: PUSH
30818: LD_VAR 0 5
30822: ARRAY
30823: PUSH
30824: LD_INT 1
30826: ARRAY
30827: PPUSH
30828: LD_EXP 117
30832: PUSH
30833: LD_VAR 0 6
30837: ARRAY
30838: PUSH
30839: LD_VAR 0 5
30843: ARRAY
30844: PUSH
30845: LD_INT 2
30847: ARRAY
30848: PPUSH
30849: LD_VAR 0 1
30853: PPUSH
30854: CALL_OW 255
30858: PPUSH
30859: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30863: LD_ADDR_EXP 117
30867: PUSH
30868: LD_EXP 117
30872: PPUSH
30873: LD_VAR 0 6
30877: PPUSH
30878: LD_EXP 117
30882: PUSH
30883: LD_VAR 0 6
30887: ARRAY
30888: PPUSH
30889: LD_VAR 0 5
30893: PPUSH
30894: CALL_OW 3
30898: PPUSH
30899: CALL_OW 1
30903: ST_TO_ADDR
// exit ;
30904: POP
30905: POP
30906: GO 31099
// end ; end ;
30908: GO 30748
30910: POP
30911: POP
// for i := minerMinesList [ index ] downto 1 do
30912: LD_ADDR_VAR 0 5
30916: PUSH
30917: DOUBLE
30918: LD_EXP 117
30922: PUSH
30923: LD_VAR 0 6
30927: ARRAY
30928: INC
30929: ST_TO_ADDR
30930: LD_INT 1
30932: PUSH
30933: FOR_DOWNTO
30934: IFFALSE 31097
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30936: LD_EXP 117
30940: PUSH
30941: LD_VAR 0 6
30945: ARRAY
30946: PUSH
30947: LD_VAR 0 5
30951: ARRAY
30952: PUSH
30953: LD_INT 1
30955: ARRAY
30956: PPUSH
30957: LD_EXP 117
30961: PUSH
30962: LD_VAR 0 6
30966: ARRAY
30967: PUSH
30968: LD_VAR 0 5
30972: ARRAY
30973: PUSH
30974: LD_INT 2
30976: ARRAY
30977: PPUSH
30978: LD_VAR 0 2
30982: PPUSH
30983: LD_VAR 0 3
30987: PPUSH
30988: CALL_OW 298
30992: PUSH
30993: LD_INT 6
30995: LESS
30996: IFFALSE 31095
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30998: LD_EXP 117
31002: PUSH
31003: LD_VAR 0 6
31007: ARRAY
31008: PUSH
31009: LD_VAR 0 5
31013: ARRAY
31014: PUSH
31015: LD_INT 1
31017: ARRAY
31018: PPUSH
31019: LD_EXP 117
31023: PUSH
31024: LD_VAR 0 6
31028: ARRAY
31029: PUSH
31030: LD_VAR 0 5
31034: ARRAY
31035: PUSH
31036: LD_INT 2
31038: ARRAY
31039: PPUSH
31040: LD_VAR 0 1
31044: PPUSH
31045: CALL_OW 255
31049: PPUSH
31050: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31054: LD_ADDR_EXP 117
31058: PUSH
31059: LD_EXP 117
31063: PPUSH
31064: LD_VAR 0 6
31068: PPUSH
31069: LD_EXP 117
31073: PUSH
31074: LD_VAR 0 6
31078: ARRAY
31079: PPUSH
31080: LD_VAR 0 5
31084: PPUSH
31085: CALL_OW 3
31089: PPUSH
31090: CALL_OW 1
31094: ST_TO_ADDR
// end ; end ;
31095: GO 30933
31097: POP
31098: POP
// end ;
31099: LD_VAR 0 4
31103: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31104: LD_INT 0
31106: PPUSH
31107: PPUSH
31108: PPUSH
31109: PPUSH
31110: PPUSH
31111: PPUSH
31112: PPUSH
31113: PPUSH
31114: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31115: LD_VAR 0 1
31119: PPUSH
31120: CALL_OW 264
31124: PUSH
31125: LD_INT 81
31127: EQUAL
31128: NOT
31129: PUSH
31130: LD_VAR 0 1
31134: PUSH
31135: LD_EXP 116
31139: IN
31140: NOT
31141: OR
31142: IFFALSE 31146
// exit ;
31144: GO 31468
// index := GetElementIndex ( minersList , unit ) ;
31146: LD_ADDR_VAR 0 6
31150: PUSH
31151: LD_EXP 116
31155: PPUSH
31156: LD_VAR 0 1
31160: PPUSH
31161: CALL 36640 0 2
31165: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31166: LD_ADDR_VAR 0 8
31170: PUSH
31171: LD_EXP 118
31175: PUSH
31176: LD_EXP 117
31180: PUSH
31181: LD_VAR 0 6
31185: ARRAY
31186: MINUS
31187: ST_TO_ADDR
// if not minesFreeAmount then
31188: LD_VAR 0 8
31192: NOT
31193: IFFALSE 31197
// exit ;
31195: GO 31468
// tmp := [ ] ;
31197: LD_ADDR_VAR 0 7
31201: PUSH
31202: EMPTY
31203: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31204: LD_ADDR_VAR 0 5
31208: PUSH
31209: DOUBLE
31210: LD_INT 1
31212: DEC
31213: ST_TO_ADDR
31214: LD_VAR 0 8
31218: PUSH
31219: FOR_TO
31220: IFFALSE 31415
// begin _d := rand ( 0 , 5 ) ;
31222: LD_ADDR_VAR 0 11
31226: PUSH
31227: LD_INT 0
31229: PPUSH
31230: LD_INT 5
31232: PPUSH
31233: CALL_OW 12
31237: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31238: LD_ADDR_VAR 0 12
31242: PUSH
31243: LD_INT 2
31245: PPUSH
31246: LD_INT 6
31248: PPUSH
31249: CALL_OW 12
31253: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31254: LD_ADDR_VAR 0 9
31258: PUSH
31259: LD_VAR 0 2
31263: PPUSH
31264: LD_VAR 0 11
31268: PPUSH
31269: LD_VAR 0 12
31273: PPUSH
31274: CALL_OW 272
31278: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31279: LD_ADDR_VAR 0 10
31283: PUSH
31284: LD_VAR 0 3
31288: PPUSH
31289: LD_VAR 0 11
31293: PPUSH
31294: LD_VAR 0 12
31298: PPUSH
31299: CALL_OW 273
31303: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31304: LD_VAR 0 9
31308: PPUSH
31309: LD_VAR 0 10
31313: PPUSH
31314: CALL_OW 488
31318: PUSH
31319: LD_VAR 0 9
31323: PUSH
31324: LD_VAR 0 10
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_VAR 0 7
31337: IN
31338: NOT
31339: AND
31340: PUSH
31341: LD_VAR 0 9
31345: PPUSH
31346: LD_VAR 0 10
31350: PPUSH
31351: CALL_OW 458
31355: NOT
31356: AND
31357: IFFALSE 31399
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31359: LD_ADDR_VAR 0 7
31363: PUSH
31364: LD_VAR 0 7
31368: PPUSH
31369: LD_VAR 0 7
31373: PUSH
31374: LD_INT 1
31376: PLUS
31377: PPUSH
31378: LD_VAR 0 9
31382: PUSH
31383: LD_VAR 0 10
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PPUSH
31392: CALL_OW 1
31396: ST_TO_ADDR
31397: GO 31413
// i := i - 1 ;
31399: LD_ADDR_VAR 0 5
31403: PUSH
31404: LD_VAR 0 5
31408: PUSH
31409: LD_INT 1
31411: MINUS
31412: ST_TO_ADDR
// end ;
31413: GO 31219
31415: POP
31416: POP
// for i in tmp do
31417: LD_ADDR_VAR 0 5
31421: PUSH
31422: LD_VAR 0 7
31426: PUSH
31427: FOR_IN
31428: IFFALSE 31466
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31430: LD_VAR 0 1
31434: PPUSH
31435: LD_VAR 0 5
31439: PUSH
31440: LD_INT 1
31442: ARRAY
31443: PPUSH
31444: LD_VAR 0 5
31448: PUSH
31449: LD_INT 2
31451: ARRAY
31452: PPUSH
31453: CALL 30412 0 3
31457: NOT
31458: IFFALSE 31464
// exit ;
31460: POP
31461: POP
31462: GO 31468
31464: GO 31427
31466: POP
31467: POP
// end ;
31468: LD_VAR 0 4
31472: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31473: LD_INT 0
31475: PPUSH
31476: PPUSH
31477: PPUSH
31478: PPUSH
31479: PPUSH
31480: PPUSH
31481: PPUSH
// if not GetClass ( unit ) = class_sniper then
31482: LD_VAR 0 1
31486: PPUSH
31487: CALL_OW 257
31491: PUSH
31492: LD_INT 5
31494: EQUAL
31495: NOT
31496: IFFALSE 31500
// exit ;
31498: GO 31888
// dist := 8 ;
31500: LD_ADDR_VAR 0 5
31504: PUSH
31505: LD_INT 8
31507: ST_TO_ADDR
// viewRange := 12 ;
31508: LD_ADDR_VAR 0 7
31512: PUSH
31513: LD_INT 12
31515: ST_TO_ADDR
// side := GetSide ( unit ) ;
31516: LD_ADDR_VAR 0 6
31520: PUSH
31521: LD_VAR 0 1
31525: PPUSH
31526: CALL_OW 255
31530: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31531: LD_INT 61
31533: PPUSH
31534: LD_VAR 0 6
31538: PPUSH
31539: CALL_OW 321
31543: PUSH
31544: LD_INT 2
31546: EQUAL
31547: IFFALSE 31557
// viewRange := 16 ;
31549: LD_ADDR_VAR 0 7
31553: PUSH
31554: LD_INT 16
31556: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31557: LD_VAR 0 1
31561: PPUSH
31562: LD_VAR 0 2
31566: PPUSH
31567: LD_VAR 0 3
31571: PPUSH
31572: CALL_OW 297
31576: PUSH
31577: LD_VAR 0 5
31581: GREATER
31582: IFFALSE 31661
// begin ComMoveXY ( unit , x , y ) ;
31584: LD_VAR 0 1
31588: PPUSH
31589: LD_VAR 0 2
31593: PPUSH
31594: LD_VAR 0 3
31598: PPUSH
31599: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31603: LD_INT 35
31605: PPUSH
31606: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31610: LD_VAR 0 1
31614: PPUSH
31615: LD_VAR 0 2
31619: PPUSH
31620: LD_VAR 0 3
31624: PPUSH
31625: CALL 68381 0 3
31629: NOT
31630: IFFALSE 31634
// exit ;
31632: GO 31888
// until GetDistUnitXY ( unit , x , y ) < dist ;
31634: LD_VAR 0 1
31638: PPUSH
31639: LD_VAR 0 2
31643: PPUSH
31644: LD_VAR 0 3
31648: PPUSH
31649: CALL_OW 297
31653: PUSH
31654: LD_VAR 0 5
31658: LESS
31659: IFFALSE 31603
// end ; ComTurnXY ( unit , x , y ) ;
31661: LD_VAR 0 1
31665: PPUSH
31666: LD_VAR 0 2
31670: PPUSH
31671: LD_VAR 0 3
31675: PPUSH
31676: CALL_OW 118
// wait ( 5 ) ;
31680: LD_INT 5
31682: PPUSH
31683: CALL_OW 67
// _d := GetDir ( unit ) ;
31687: LD_ADDR_VAR 0 10
31691: PUSH
31692: LD_VAR 0 1
31696: PPUSH
31697: CALL_OW 254
31701: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31702: LD_ADDR_VAR 0 8
31706: PUSH
31707: LD_VAR 0 1
31711: PPUSH
31712: CALL_OW 250
31716: PPUSH
31717: LD_VAR 0 10
31721: PPUSH
31722: LD_VAR 0 5
31726: PPUSH
31727: CALL_OW 272
31731: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31732: LD_ADDR_VAR 0 9
31736: PUSH
31737: LD_VAR 0 1
31741: PPUSH
31742: CALL_OW 251
31746: PPUSH
31747: LD_VAR 0 10
31751: PPUSH
31752: LD_VAR 0 5
31756: PPUSH
31757: CALL_OW 273
31761: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31762: LD_VAR 0 8
31766: PPUSH
31767: LD_VAR 0 9
31771: PPUSH
31772: CALL_OW 488
31776: NOT
31777: IFFALSE 31781
// exit ;
31779: GO 31888
// ComAnimCustom ( unit , 1 ) ;
31781: LD_VAR 0 1
31785: PPUSH
31786: LD_INT 1
31788: PPUSH
31789: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31793: LD_VAR 0 8
31797: PPUSH
31798: LD_VAR 0 9
31802: PPUSH
31803: LD_VAR 0 6
31807: PPUSH
31808: LD_VAR 0 7
31812: PPUSH
31813: CALL_OW 330
// repeat wait ( 1 ) ;
31817: LD_INT 1
31819: PPUSH
31820: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31824: LD_VAR 0 1
31828: PPUSH
31829: CALL_OW 316
31833: PUSH
31834: LD_VAR 0 1
31838: PPUSH
31839: CALL_OW 314
31843: OR
31844: PUSH
31845: LD_VAR 0 1
31849: PPUSH
31850: CALL_OW 302
31854: NOT
31855: OR
31856: PUSH
31857: LD_VAR 0 1
31861: PPUSH
31862: CALL_OW 301
31866: OR
31867: IFFALSE 31817
// RemoveSeeing ( _x , _y , side ) ;
31869: LD_VAR 0 8
31873: PPUSH
31874: LD_VAR 0 9
31878: PPUSH
31879: LD_VAR 0 6
31883: PPUSH
31884: CALL_OW 331
// end ; end_of_file
31888: LD_VAR 0 4
31892: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31893: LD_INT 0
31895: PPUSH
31896: PPUSH
// if exist_mode then
31897: LD_VAR 0 2
31901: IFFALSE 31926
// unit := CreateCharacter ( prefix & ident ) else
31903: LD_ADDR_VAR 0 5
31907: PUSH
31908: LD_VAR 0 3
31912: PUSH
31913: LD_VAR 0 1
31917: STR
31918: PPUSH
31919: CALL_OW 34
31923: ST_TO_ADDR
31924: GO 31941
// unit := NewCharacter ( ident ) ;
31926: LD_ADDR_VAR 0 5
31930: PUSH
31931: LD_VAR 0 1
31935: PPUSH
31936: CALL_OW 25
31940: ST_TO_ADDR
// result := unit ;
31941: LD_ADDR_VAR 0 4
31945: PUSH
31946: LD_VAR 0 5
31950: ST_TO_ADDR
// end ;
31951: LD_VAR 0 4
31955: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31956: LD_INT 0
31958: PPUSH
31959: PPUSH
// if not side or not nation then
31960: LD_VAR 0 1
31964: NOT
31965: PUSH
31966: LD_VAR 0 2
31970: NOT
31971: OR
31972: IFFALSE 31976
// exit ;
31974: GO 32744
// case nation of nation_american :
31976: LD_VAR 0 2
31980: PUSH
31981: LD_INT 1
31983: DOUBLE
31984: EQUAL
31985: IFTRUE 31989
31987: GO 32203
31989: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31990: LD_ADDR_VAR 0 4
31994: PUSH
31995: LD_INT 35
31997: PUSH
31998: LD_INT 45
32000: PUSH
32001: LD_INT 46
32003: PUSH
32004: LD_INT 47
32006: PUSH
32007: LD_INT 82
32009: PUSH
32010: LD_INT 83
32012: PUSH
32013: LD_INT 84
32015: PUSH
32016: LD_INT 85
32018: PUSH
32019: LD_INT 86
32021: PUSH
32022: LD_INT 1
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: LD_INT 6
32030: PUSH
32031: LD_INT 15
32033: PUSH
32034: LD_INT 16
32036: PUSH
32037: LD_INT 7
32039: PUSH
32040: LD_INT 12
32042: PUSH
32043: LD_INT 13
32045: PUSH
32046: LD_INT 10
32048: PUSH
32049: LD_INT 14
32051: PUSH
32052: LD_INT 20
32054: PUSH
32055: LD_INT 21
32057: PUSH
32058: LD_INT 22
32060: PUSH
32061: LD_INT 25
32063: PUSH
32064: LD_INT 32
32066: PUSH
32067: LD_INT 27
32069: PUSH
32070: LD_INT 36
32072: PUSH
32073: LD_INT 69
32075: PUSH
32076: LD_INT 39
32078: PUSH
32079: LD_INT 34
32081: PUSH
32082: LD_INT 40
32084: PUSH
32085: LD_INT 48
32087: PUSH
32088: LD_INT 49
32090: PUSH
32091: LD_INT 50
32093: PUSH
32094: LD_INT 51
32096: PUSH
32097: LD_INT 52
32099: PUSH
32100: LD_INT 53
32102: PUSH
32103: LD_INT 54
32105: PUSH
32106: LD_INT 55
32108: PUSH
32109: LD_INT 56
32111: PUSH
32112: LD_INT 57
32114: PUSH
32115: LD_INT 58
32117: PUSH
32118: LD_INT 59
32120: PUSH
32121: LD_INT 60
32123: PUSH
32124: LD_INT 61
32126: PUSH
32127: LD_INT 62
32129: PUSH
32130: LD_INT 80
32132: PUSH
32133: LD_INT 82
32135: PUSH
32136: LD_INT 83
32138: PUSH
32139: LD_INT 84
32141: PUSH
32142: LD_INT 85
32144: PUSH
32145: LD_INT 86
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: ST_TO_ADDR
32201: GO 32668
32203: LD_INT 2
32205: DOUBLE
32206: EQUAL
32207: IFTRUE 32211
32209: GO 32437
32211: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32212: LD_ADDR_VAR 0 4
32216: PUSH
32217: LD_INT 35
32219: PUSH
32220: LD_INT 45
32222: PUSH
32223: LD_INT 46
32225: PUSH
32226: LD_INT 47
32228: PUSH
32229: LD_INT 82
32231: PUSH
32232: LD_INT 83
32234: PUSH
32235: LD_INT 84
32237: PUSH
32238: LD_INT 85
32240: PUSH
32241: LD_INT 87
32243: PUSH
32244: LD_INT 70
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: LD_INT 11
32252: PUSH
32253: LD_INT 3
32255: PUSH
32256: LD_INT 4
32258: PUSH
32259: LD_INT 5
32261: PUSH
32262: LD_INT 6
32264: PUSH
32265: LD_INT 15
32267: PUSH
32268: LD_INT 18
32270: PUSH
32271: LD_INT 7
32273: PUSH
32274: LD_INT 17
32276: PUSH
32277: LD_INT 8
32279: PUSH
32280: LD_INT 20
32282: PUSH
32283: LD_INT 21
32285: PUSH
32286: LD_INT 22
32288: PUSH
32289: LD_INT 72
32291: PUSH
32292: LD_INT 26
32294: PUSH
32295: LD_INT 69
32297: PUSH
32298: LD_INT 39
32300: PUSH
32301: LD_INT 40
32303: PUSH
32304: LD_INT 41
32306: PUSH
32307: LD_INT 42
32309: PUSH
32310: LD_INT 43
32312: PUSH
32313: LD_INT 48
32315: PUSH
32316: LD_INT 49
32318: PUSH
32319: LD_INT 50
32321: PUSH
32322: LD_INT 51
32324: PUSH
32325: LD_INT 52
32327: PUSH
32328: LD_INT 53
32330: PUSH
32331: LD_INT 54
32333: PUSH
32334: LD_INT 55
32336: PUSH
32337: LD_INT 56
32339: PUSH
32340: LD_INT 60
32342: PUSH
32343: LD_INT 61
32345: PUSH
32346: LD_INT 62
32348: PUSH
32349: LD_INT 66
32351: PUSH
32352: LD_INT 67
32354: PUSH
32355: LD_INT 68
32357: PUSH
32358: LD_INT 81
32360: PUSH
32361: LD_INT 82
32363: PUSH
32364: LD_INT 83
32366: PUSH
32367: LD_INT 84
32369: PUSH
32370: LD_INT 85
32372: PUSH
32373: LD_INT 87
32375: PUSH
32376: LD_INT 88
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: ST_TO_ADDR
32435: GO 32668
32437: LD_INT 3
32439: DOUBLE
32440: EQUAL
32441: IFTRUE 32445
32443: GO 32667
32445: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32446: LD_ADDR_VAR 0 4
32450: PUSH
32451: LD_INT 46
32453: PUSH
32454: LD_INT 47
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: LD_INT 82
32465: PUSH
32466: LD_INT 83
32468: PUSH
32469: LD_INT 84
32471: PUSH
32472: LD_INT 85
32474: PUSH
32475: LD_INT 86
32477: PUSH
32478: LD_INT 11
32480: PUSH
32481: LD_INT 9
32483: PUSH
32484: LD_INT 20
32486: PUSH
32487: LD_INT 19
32489: PUSH
32490: LD_INT 21
32492: PUSH
32493: LD_INT 24
32495: PUSH
32496: LD_INT 22
32498: PUSH
32499: LD_INT 25
32501: PUSH
32502: LD_INT 28
32504: PUSH
32505: LD_INT 29
32507: PUSH
32508: LD_INT 30
32510: PUSH
32511: LD_INT 31
32513: PUSH
32514: LD_INT 37
32516: PUSH
32517: LD_INT 38
32519: PUSH
32520: LD_INT 32
32522: PUSH
32523: LD_INT 27
32525: PUSH
32526: LD_INT 33
32528: PUSH
32529: LD_INT 69
32531: PUSH
32532: LD_INT 39
32534: PUSH
32535: LD_INT 34
32537: PUSH
32538: LD_INT 40
32540: PUSH
32541: LD_INT 71
32543: PUSH
32544: LD_INT 23
32546: PUSH
32547: LD_INT 44
32549: PUSH
32550: LD_INT 48
32552: PUSH
32553: LD_INT 49
32555: PUSH
32556: LD_INT 50
32558: PUSH
32559: LD_INT 51
32561: PUSH
32562: LD_INT 52
32564: PUSH
32565: LD_INT 53
32567: PUSH
32568: LD_INT 54
32570: PUSH
32571: LD_INT 55
32573: PUSH
32574: LD_INT 56
32576: PUSH
32577: LD_INT 57
32579: PUSH
32580: LD_INT 58
32582: PUSH
32583: LD_INT 59
32585: PUSH
32586: LD_INT 63
32588: PUSH
32589: LD_INT 64
32591: PUSH
32592: LD_INT 65
32594: PUSH
32595: LD_INT 82
32597: PUSH
32598: LD_INT 83
32600: PUSH
32601: LD_INT 84
32603: PUSH
32604: LD_INT 85
32606: PUSH
32607: LD_INT 86
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: ST_TO_ADDR
32665: GO 32668
32667: POP
// if state > - 1 and state < 3 then
32668: LD_VAR 0 3
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: GREATER
32677: PUSH
32678: LD_VAR 0 3
32682: PUSH
32683: LD_INT 3
32685: LESS
32686: AND
32687: IFFALSE 32744
// for i in result do
32689: LD_ADDR_VAR 0 5
32693: PUSH
32694: LD_VAR 0 4
32698: PUSH
32699: FOR_IN
32700: IFFALSE 32742
// if GetTech ( i , side ) <> state then
32702: LD_VAR 0 5
32706: PPUSH
32707: LD_VAR 0 1
32711: PPUSH
32712: CALL_OW 321
32716: PUSH
32717: LD_VAR 0 3
32721: NONEQUAL
32722: IFFALSE 32740
// result := result diff i ;
32724: LD_ADDR_VAR 0 4
32728: PUSH
32729: LD_VAR 0 4
32733: PUSH
32734: LD_VAR 0 5
32738: DIFF
32739: ST_TO_ADDR
32740: GO 32699
32742: POP
32743: POP
// end ;
32744: LD_VAR 0 4
32748: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32749: LD_INT 0
32751: PPUSH
32752: PPUSH
32753: PPUSH
// result := true ;
32754: LD_ADDR_VAR 0 3
32758: PUSH
32759: LD_INT 1
32761: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32762: LD_ADDR_VAR 0 5
32766: PUSH
32767: LD_VAR 0 2
32771: PPUSH
32772: CALL_OW 480
32776: ST_TO_ADDR
// if not tmp then
32777: LD_VAR 0 5
32781: NOT
32782: IFFALSE 32786
// exit ;
32784: GO 32835
// for i in tmp do
32786: LD_ADDR_VAR 0 4
32790: PUSH
32791: LD_VAR 0 5
32795: PUSH
32796: FOR_IN
32797: IFFALSE 32833
// if GetTech ( i , side ) <> state_researched then
32799: LD_VAR 0 4
32803: PPUSH
32804: LD_VAR 0 1
32808: PPUSH
32809: CALL_OW 321
32813: PUSH
32814: LD_INT 2
32816: NONEQUAL
32817: IFFALSE 32831
// begin result := false ;
32819: LD_ADDR_VAR 0 3
32823: PUSH
32824: LD_INT 0
32826: ST_TO_ADDR
// exit ;
32827: POP
32828: POP
32829: GO 32835
// end ;
32831: GO 32796
32833: POP
32834: POP
// end ;
32835: LD_VAR 0 3
32839: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32840: LD_INT 0
32842: PPUSH
32843: PPUSH
32844: PPUSH
32845: PPUSH
32846: PPUSH
32847: PPUSH
32848: PPUSH
32849: PPUSH
32850: PPUSH
32851: PPUSH
32852: PPUSH
32853: PPUSH
32854: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32855: LD_VAR 0 1
32859: NOT
32860: PUSH
32861: LD_VAR 0 1
32865: PPUSH
32866: CALL_OW 257
32870: PUSH
32871: LD_INT 9
32873: NONEQUAL
32874: OR
32875: IFFALSE 32879
// exit ;
32877: GO 33452
// side := GetSide ( unit ) ;
32879: LD_ADDR_VAR 0 9
32883: PUSH
32884: LD_VAR 0 1
32888: PPUSH
32889: CALL_OW 255
32893: ST_TO_ADDR
// tech_space := tech_spacanom ;
32894: LD_ADDR_VAR 0 12
32898: PUSH
32899: LD_INT 29
32901: ST_TO_ADDR
// tech_time := tech_taurad ;
32902: LD_ADDR_VAR 0 13
32906: PUSH
32907: LD_INT 28
32909: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32910: LD_ADDR_VAR 0 11
32914: PUSH
32915: LD_VAR 0 1
32919: PPUSH
32920: CALL_OW 310
32924: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32925: LD_VAR 0 11
32929: PPUSH
32930: CALL_OW 247
32934: PUSH
32935: LD_INT 2
32937: EQUAL
32938: IFFALSE 32942
// exit ;
32940: GO 33452
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32942: LD_ADDR_VAR 0 8
32946: PUSH
32947: LD_INT 81
32949: PUSH
32950: LD_VAR 0 9
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 3
32961: PUSH
32962: LD_INT 21
32964: PUSH
32965: LD_INT 3
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PPUSH
32980: CALL_OW 69
32984: ST_TO_ADDR
// if not tmp then
32985: LD_VAR 0 8
32989: NOT
32990: IFFALSE 32994
// exit ;
32992: GO 33452
// if in_unit then
32994: LD_VAR 0 11
32998: IFFALSE 33022
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33000: LD_ADDR_VAR 0 10
33004: PUSH
33005: LD_VAR 0 8
33009: PPUSH
33010: LD_VAR 0 11
33014: PPUSH
33015: CALL_OW 74
33019: ST_TO_ADDR
33020: GO 33042
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33022: LD_ADDR_VAR 0 10
33026: PUSH
33027: LD_VAR 0 8
33031: PPUSH
33032: LD_VAR 0 1
33036: PPUSH
33037: CALL_OW 74
33041: ST_TO_ADDR
// if not enemy then
33042: LD_VAR 0 10
33046: NOT
33047: IFFALSE 33051
// exit ;
33049: GO 33452
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33051: LD_VAR 0 11
33055: PUSH
33056: LD_VAR 0 11
33060: PPUSH
33061: LD_VAR 0 10
33065: PPUSH
33066: CALL_OW 296
33070: PUSH
33071: LD_INT 13
33073: GREATER
33074: AND
33075: PUSH
33076: LD_VAR 0 1
33080: PPUSH
33081: LD_VAR 0 10
33085: PPUSH
33086: CALL_OW 296
33090: PUSH
33091: LD_INT 12
33093: GREATER
33094: OR
33095: IFFALSE 33099
// exit ;
33097: GO 33452
// missile := [ 1 ] ;
33099: LD_ADDR_VAR 0 14
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: EMPTY
33108: LIST
33109: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33110: LD_VAR 0 9
33114: PPUSH
33115: LD_VAR 0 12
33119: PPUSH
33120: CALL_OW 325
33124: IFFALSE 33153
// missile := Replace ( missile , missile + 1 , 2 ) ;
33126: LD_ADDR_VAR 0 14
33130: PUSH
33131: LD_VAR 0 14
33135: PPUSH
33136: LD_VAR 0 14
33140: PUSH
33141: LD_INT 1
33143: PLUS
33144: PPUSH
33145: LD_INT 2
33147: PPUSH
33148: CALL_OW 1
33152: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33153: LD_VAR 0 9
33157: PPUSH
33158: LD_VAR 0 13
33162: PPUSH
33163: CALL_OW 325
33167: PUSH
33168: LD_VAR 0 10
33172: PPUSH
33173: CALL_OW 255
33177: PPUSH
33178: LD_VAR 0 13
33182: PPUSH
33183: CALL_OW 325
33187: NOT
33188: AND
33189: IFFALSE 33218
// missile := Replace ( missile , missile + 1 , 3 ) ;
33191: LD_ADDR_VAR 0 14
33195: PUSH
33196: LD_VAR 0 14
33200: PPUSH
33201: LD_VAR 0 14
33205: PUSH
33206: LD_INT 1
33208: PLUS
33209: PPUSH
33210: LD_INT 3
33212: PPUSH
33213: CALL_OW 1
33217: ST_TO_ADDR
// if missile < 2 then
33218: LD_VAR 0 14
33222: PUSH
33223: LD_INT 2
33225: LESS
33226: IFFALSE 33230
// exit ;
33228: GO 33452
// x := GetX ( enemy ) ;
33230: LD_ADDR_VAR 0 4
33234: PUSH
33235: LD_VAR 0 10
33239: PPUSH
33240: CALL_OW 250
33244: ST_TO_ADDR
// y := GetY ( enemy ) ;
33245: LD_ADDR_VAR 0 5
33249: PUSH
33250: LD_VAR 0 10
33254: PPUSH
33255: CALL_OW 251
33259: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33260: LD_ADDR_VAR 0 6
33264: PUSH
33265: LD_VAR 0 4
33269: PUSH
33270: LD_INT 1
33272: NEG
33273: PPUSH
33274: LD_INT 1
33276: PPUSH
33277: CALL_OW 12
33281: PLUS
33282: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33283: LD_ADDR_VAR 0 7
33287: PUSH
33288: LD_VAR 0 5
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PPUSH
33297: LD_INT 1
33299: PPUSH
33300: CALL_OW 12
33304: PLUS
33305: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33306: LD_VAR 0 6
33310: PPUSH
33311: LD_VAR 0 7
33315: PPUSH
33316: CALL_OW 488
33320: NOT
33321: IFFALSE 33343
// begin _x := x ;
33323: LD_ADDR_VAR 0 6
33327: PUSH
33328: LD_VAR 0 4
33332: ST_TO_ADDR
// _y := y ;
33333: LD_ADDR_VAR 0 7
33337: PUSH
33338: LD_VAR 0 5
33342: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33343: LD_ADDR_VAR 0 3
33347: PUSH
33348: LD_INT 1
33350: PPUSH
33351: LD_VAR 0 14
33355: PPUSH
33356: CALL_OW 12
33360: ST_TO_ADDR
// case i of 1 :
33361: LD_VAR 0 3
33365: PUSH
33366: LD_INT 1
33368: DOUBLE
33369: EQUAL
33370: IFTRUE 33374
33372: GO 33391
33374: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33375: LD_VAR 0 1
33379: PPUSH
33380: LD_VAR 0 10
33384: PPUSH
33385: CALL_OW 115
33389: GO 33452
33391: LD_INT 2
33393: DOUBLE
33394: EQUAL
33395: IFTRUE 33399
33397: GO 33421
33399: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33400: LD_VAR 0 1
33404: PPUSH
33405: LD_VAR 0 6
33409: PPUSH
33410: LD_VAR 0 7
33414: PPUSH
33415: CALL_OW 153
33419: GO 33452
33421: LD_INT 3
33423: DOUBLE
33424: EQUAL
33425: IFTRUE 33429
33427: GO 33451
33429: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33430: LD_VAR 0 1
33434: PPUSH
33435: LD_VAR 0 6
33439: PPUSH
33440: LD_VAR 0 7
33444: PPUSH
33445: CALL_OW 154
33449: GO 33452
33451: POP
// end ;
33452: LD_VAR 0 2
33456: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33457: LD_INT 0
33459: PPUSH
33460: PPUSH
33461: PPUSH
33462: PPUSH
33463: PPUSH
33464: PPUSH
// if not unit or not building then
33465: LD_VAR 0 1
33469: NOT
33470: PUSH
33471: LD_VAR 0 2
33475: NOT
33476: OR
33477: IFFALSE 33481
// exit ;
33479: GO 33639
// x := GetX ( building ) ;
33481: LD_ADDR_VAR 0 5
33485: PUSH
33486: LD_VAR 0 2
33490: PPUSH
33491: CALL_OW 250
33495: ST_TO_ADDR
// y := GetY ( building ) ;
33496: LD_ADDR_VAR 0 6
33500: PUSH
33501: LD_VAR 0 2
33505: PPUSH
33506: CALL_OW 251
33510: ST_TO_ADDR
// for i = 0 to 5 do
33511: LD_ADDR_VAR 0 4
33515: PUSH
33516: DOUBLE
33517: LD_INT 0
33519: DEC
33520: ST_TO_ADDR
33521: LD_INT 5
33523: PUSH
33524: FOR_TO
33525: IFFALSE 33637
// begin _x := ShiftX ( x , i , 3 ) ;
33527: LD_ADDR_VAR 0 7
33531: PUSH
33532: LD_VAR 0 5
33536: PPUSH
33537: LD_VAR 0 4
33541: PPUSH
33542: LD_INT 3
33544: PPUSH
33545: CALL_OW 272
33549: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33550: LD_ADDR_VAR 0 8
33554: PUSH
33555: LD_VAR 0 6
33559: PPUSH
33560: LD_VAR 0 4
33564: PPUSH
33565: LD_INT 3
33567: PPUSH
33568: CALL_OW 273
33572: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33573: LD_VAR 0 7
33577: PPUSH
33578: LD_VAR 0 8
33582: PPUSH
33583: CALL_OW 488
33587: NOT
33588: IFFALSE 33592
// continue ;
33590: GO 33524
// if HexInfo ( _x , _y ) = 0 then
33592: LD_VAR 0 7
33596: PPUSH
33597: LD_VAR 0 8
33601: PPUSH
33602: CALL_OW 428
33606: PUSH
33607: LD_INT 0
33609: EQUAL
33610: IFFALSE 33635
// begin ComMoveXY ( unit , _x , _y ) ;
33612: LD_VAR 0 1
33616: PPUSH
33617: LD_VAR 0 7
33621: PPUSH
33622: LD_VAR 0 8
33626: PPUSH
33627: CALL_OW 111
// exit ;
33631: POP
33632: POP
33633: GO 33639
// end ; end ;
33635: GO 33524
33637: POP
33638: POP
// end ;
33639: LD_VAR 0 3
33643: RET
// export function ScanBase ( side , base_area ) ; begin
33644: LD_INT 0
33646: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33647: LD_ADDR_VAR 0 3
33651: PUSH
33652: LD_VAR 0 2
33656: PPUSH
33657: LD_INT 81
33659: PUSH
33660: LD_VAR 0 1
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PPUSH
33669: CALL_OW 70
33673: ST_TO_ADDR
// end ;
33674: LD_VAR 0 3
33678: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33679: LD_INT 0
33681: PPUSH
33682: PPUSH
33683: PPUSH
33684: PPUSH
// result := false ;
33685: LD_ADDR_VAR 0 2
33689: PUSH
33690: LD_INT 0
33692: ST_TO_ADDR
// side := GetSide ( unit ) ;
33693: LD_ADDR_VAR 0 3
33697: PUSH
33698: LD_VAR 0 1
33702: PPUSH
33703: CALL_OW 255
33707: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33708: LD_ADDR_VAR 0 4
33712: PUSH
33713: LD_VAR 0 1
33717: PPUSH
33718: CALL_OW 248
33722: ST_TO_ADDR
// case nat of 1 :
33723: LD_VAR 0 4
33727: PUSH
33728: LD_INT 1
33730: DOUBLE
33731: EQUAL
33732: IFTRUE 33736
33734: GO 33747
33736: POP
// tech := tech_lassight ; 2 :
33737: LD_ADDR_VAR 0 5
33741: PUSH
33742: LD_INT 12
33744: ST_TO_ADDR
33745: GO 33786
33747: LD_INT 2
33749: DOUBLE
33750: EQUAL
33751: IFTRUE 33755
33753: GO 33766
33755: POP
// tech := tech_mortar ; 3 :
33756: LD_ADDR_VAR 0 5
33760: PUSH
33761: LD_INT 41
33763: ST_TO_ADDR
33764: GO 33786
33766: LD_INT 3
33768: DOUBLE
33769: EQUAL
33770: IFTRUE 33774
33772: GO 33785
33774: POP
// tech := tech_bazooka ; end ;
33775: LD_ADDR_VAR 0 5
33779: PUSH
33780: LD_INT 44
33782: ST_TO_ADDR
33783: GO 33786
33785: POP
// if Researched ( side , tech ) then
33786: LD_VAR 0 3
33790: PPUSH
33791: LD_VAR 0 5
33795: PPUSH
33796: CALL_OW 325
33800: IFFALSE 33827
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33802: LD_ADDR_VAR 0 2
33806: PUSH
33807: LD_INT 5
33809: PUSH
33810: LD_INT 8
33812: PUSH
33813: LD_INT 9
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: LIST
33820: PUSH
33821: LD_VAR 0 4
33825: ARRAY
33826: ST_TO_ADDR
// end ;
33827: LD_VAR 0 2
33831: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33832: LD_INT 0
33834: PPUSH
33835: PPUSH
33836: PPUSH
// if not mines then
33837: LD_VAR 0 2
33841: NOT
33842: IFFALSE 33846
// exit ;
33844: GO 33990
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33846: LD_ADDR_VAR 0 5
33850: PUSH
33851: LD_INT 81
33853: PUSH
33854: LD_VAR 0 1
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 3
33865: PUSH
33866: LD_INT 21
33868: PUSH
33869: LD_INT 3
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PPUSH
33884: CALL_OW 69
33888: ST_TO_ADDR
// for i in mines do
33889: LD_ADDR_VAR 0 4
33893: PUSH
33894: LD_VAR 0 2
33898: PUSH
33899: FOR_IN
33900: IFFALSE 33988
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33902: LD_VAR 0 4
33906: PUSH
33907: LD_INT 1
33909: ARRAY
33910: PPUSH
33911: LD_VAR 0 4
33915: PUSH
33916: LD_INT 2
33918: ARRAY
33919: PPUSH
33920: CALL_OW 458
33924: NOT
33925: IFFALSE 33929
// continue ;
33927: GO 33899
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33929: LD_VAR 0 4
33933: PUSH
33934: LD_INT 1
33936: ARRAY
33937: PPUSH
33938: LD_VAR 0 4
33942: PUSH
33943: LD_INT 2
33945: ARRAY
33946: PPUSH
33947: CALL_OW 428
33951: PUSH
33952: LD_VAR 0 5
33956: IN
33957: IFFALSE 33986
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33959: LD_VAR 0 4
33963: PUSH
33964: LD_INT 1
33966: ARRAY
33967: PPUSH
33968: LD_VAR 0 4
33972: PUSH
33973: LD_INT 2
33975: ARRAY
33976: PPUSH
33977: LD_VAR 0 1
33981: PPUSH
33982: CALL_OW 456
// end ;
33986: GO 33899
33988: POP
33989: POP
// end ;
33990: LD_VAR 0 3
33994: RET
// export function Count ( array ) ; begin
33995: LD_INT 0
33997: PPUSH
// result := array + 0 ;
33998: LD_ADDR_VAR 0 2
34002: PUSH
34003: LD_VAR 0 1
34007: PUSH
34008: LD_INT 0
34010: PLUS
34011: ST_TO_ADDR
// end ;
34012: LD_VAR 0 2
34016: RET
// export function IsEmpty ( building ) ; begin
34017: LD_INT 0
34019: PPUSH
// if not building then
34020: LD_VAR 0 1
34024: NOT
34025: IFFALSE 34029
// exit ;
34027: GO 34072
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34029: LD_ADDR_VAR 0 2
34033: PUSH
34034: LD_VAR 0 1
34038: PUSH
34039: LD_INT 22
34041: PUSH
34042: LD_VAR 0 1
34046: PPUSH
34047: CALL_OW 255
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 58
34058: PUSH
34059: EMPTY
34060: LIST
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PPUSH
34066: CALL_OW 69
34070: IN
34071: ST_TO_ADDR
// end ;
34072: LD_VAR 0 2
34076: RET
// export function IsNotFull ( building ) ; var places ; begin
34077: LD_INT 0
34079: PPUSH
34080: PPUSH
// if not building then
34081: LD_VAR 0 1
34085: NOT
34086: IFFALSE 34090
// exit ;
34088: GO 34118
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34090: LD_ADDR_VAR 0 2
34094: PUSH
34095: LD_VAR 0 1
34099: PPUSH
34100: LD_INT 3
34102: PUSH
34103: LD_INT 62
34105: PUSH
34106: EMPTY
34107: LIST
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PPUSH
34113: CALL_OW 72
34117: ST_TO_ADDR
// end ;
34118: LD_VAR 0 2
34122: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34123: LD_INT 0
34125: PPUSH
34126: PPUSH
34127: PPUSH
34128: PPUSH
// tmp := [ ] ;
34129: LD_ADDR_VAR 0 3
34133: PUSH
34134: EMPTY
34135: ST_TO_ADDR
// list := [ ] ;
34136: LD_ADDR_VAR 0 5
34140: PUSH
34141: EMPTY
34142: ST_TO_ADDR
// for i = 16 to 25 do
34143: LD_ADDR_VAR 0 4
34147: PUSH
34148: DOUBLE
34149: LD_INT 16
34151: DEC
34152: ST_TO_ADDR
34153: LD_INT 25
34155: PUSH
34156: FOR_TO
34157: IFFALSE 34230
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34159: LD_ADDR_VAR 0 3
34163: PUSH
34164: LD_VAR 0 3
34168: PUSH
34169: LD_INT 22
34171: PUSH
34172: LD_VAR 0 1
34176: PPUSH
34177: CALL_OW 255
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 91
34188: PUSH
34189: LD_VAR 0 1
34193: PUSH
34194: LD_INT 6
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 30
34204: PUSH
34205: LD_VAR 0 4
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: LIST
34218: PUSH
34219: EMPTY
34220: LIST
34221: PPUSH
34222: CALL_OW 69
34226: ADD
34227: ST_TO_ADDR
34228: GO 34156
34230: POP
34231: POP
// for i = 1 to tmp do
34232: LD_ADDR_VAR 0 4
34236: PUSH
34237: DOUBLE
34238: LD_INT 1
34240: DEC
34241: ST_TO_ADDR
34242: LD_VAR 0 3
34246: PUSH
34247: FOR_TO
34248: IFFALSE 34336
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34250: LD_ADDR_VAR 0 5
34254: PUSH
34255: LD_VAR 0 5
34259: PUSH
34260: LD_VAR 0 3
34264: PUSH
34265: LD_VAR 0 4
34269: ARRAY
34270: PPUSH
34271: CALL_OW 266
34275: PUSH
34276: LD_VAR 0 3
34280: PUSH
34281: LD_VAR 0 4
34285: ARRAY
34286: PPUSH
34287: CALL_OW 250
34291: PUSH
34292: LD_VAR 0 3
34296: PUSH
34297: LD_VAR 0 4
34301: ARRAY
34302: PPUSH
34303: CALL_OW 251
34307: PUSH
34308: LD_VAR 0 3
34312: PUSH
34313: LD_VAR 0 4
34317: ARRAY
34318: PPUSH
34319: CALL_OW 254
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: PUSH
34330: EMPTY
34331: LIST
34332: ADD
34333: ST_TO_ADDR
34334: GO 34247
34336: POP
34337: POP
// result := list ;
34338: LD_ADDR_VAR 0 2
34342: PUSH
34343: LD_VAR 0 5
34347: ST_TO_ADDR
// end ;
34348: LD_VAR 0 2
34352: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34353: LD_INT 0
34355: PPUSH
34356: PPUSH
34357: PPUSH
34358: PPUSH
34359: PPUSH
34360: PPUSH
34361: PPUSH
// if not factory then
34362: LD_VAR 0 1
34366: NOT
34367: IFFALSE 34371
// exit ;
34369: GO 34964
// if control = control_apeman then
34371: LD_VAR 0 4
34375: PUSH
34376: LD_INT 5
34378: EQUAL
34379: IFFALSE 34488
// begin tmp := UnitsInside ( factory ) ;
34381: LD_ADDR_VAR 0 8
34385: PUSH
34386: LD_VAR 0 1
34390: PPUSH
34391: CALL_OW 313
34395: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34396: LD_VAR 0 8
34400: PPUSH
34401: LD_INT 25
34403: PUSH
34404: LD_INT 12
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PPUSH
34411: CALL_OW 72
34415: NOT
34416: IFFALSE 34426
// control := control_manual ;
34418: LD_ADDR_VAR 0 4
34422: PUSH
34423: LD_INT 1
34425: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34426: LD_ADDR_VAR 0 8
34430: PUSH
34431: LD_VAR 0 1
34435: PPUSH
34436: CALL 34123 0 1
34440: ST_TO_ADDR
// if tmp then
34441: LD_VAR 0 8
34445: IFFALSE 34488
// begin for i in tmp do
34447: LD_ADDR_VAR 0 7
34451: PUSH
34452: LD_VAR 0 8
34456: PUSH
34457: FOR_IN
34458: IFFALSE 34486
// if i [ 1 ] = b_ext_radio then
34460: LD_VAR 0 7
34464: PUSH
34465: LD_INT 1
34467: ARRAY
34468: PUSH
34469: LD_INT 22
34471: EQUAL
34472: IFFALSE 34484
// begin control := control_remote ;
34474: LD_ADDR_VAR 0 4
34478: PUSH
34479: LD_INT 2
34481: ST_TO_ADDR
// break ;
34482: GO 34486
// end ;
34484: GO 34457
34486: POP
34487: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34488: LD_VAR 0 1
34492: PPUSH
34493: LD_VAR 0 2
34497: PPUSH
34498: LD_VAR 0 3
34502: PPUSH
34503: LD_VAR 0 4
34507: PPUSH
34508: LD_VAR 0 5
34512: PPUSH
34513: CALL_OW 448
34517: IFFALSE 34552
// begin result := [ chassis , engine , control , weapon ] ;
34519: LD_ADDR_VAR 0 6
34523: PUSH
34524: LD_VAR 0 2
34528: PUSH
34529: LD_VAR 0 3
34533: PUSH
34534: LD_VAR 0 4
34538: PUSH
34539: LD_VAR 0 5
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: ST_TO_ADDR
// exit ;
34550: GO 34964
// end ; _chassis := AvailableChassisList ( factory ) ;
34552: LD_ADDR_VAR 0 9
34556: PUSH
34557: LD_VAR 0 1
34561: PPUSH
34562: CALL_OW 475
34566: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34567: LD_ADDR_VAR 0 11
34571: PUSH
34572: LD_VAR 0 1
34576: PPUSH
34577: CALL_OW 476
34581: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34582: LD_ADDR_VAR 0 12
34586: PUSH
34587: LD_VAR 0 1
34591: PPUSH
34592: CALL_OW 477
34596: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34597: LD_ADDR_VAR 0 10
34601: PUSH
34602: LD_VAR 0 1
34606: PPUSH
34607: CALL_OW 478
34611: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34612: LD_VAR 0 9
34616: NOT
34617: PUSH
34618: LD_VAR 0 11
34622: NOT
34623: OR
34624: PUSH
34625: LD_VAR 0 12
34629: NOT
34630: OR
34631: PUSH
34632: LD_VAR 0 10
34636: NOT
34637: OR
34638: IFFALSE 34673
// begin result := [ chassis , engine , control , weapon ] ;
34640: LD_ADDR_VAR 0 6
34644: PUSH
34645: LD_VAR 0 2
34649: PUSH
34650: LD_VAR 0 3
34654: PUSH
34655: LD_VAR 0 4
34659: PUSH
34660: LD_VAR 0 5
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: ST_TO_ADDR
// exit ;
34671: GO 34964
// end ; if not chassis in _chassis then
34673: LD_VAR 0 2
34677: PUSH
34678: LD_VAR 0 9
34682: IN
34683: NOT
34684: IFFALSE 34710
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34686: LD_ADDR_VAR 0 2
34690: PUSH
34691: LD_VAR 0 9
34695: PUSH
34696: LD_INT 1
34698: PPUSH
34699: LD_VAR 0 9
34703: PPUSH
34704: CALL_OW 12
34708: ARRAY
34709: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34710: LD_VAR 0 2
34714: PPUSH
34715: LD_VAR 0 3
34719: PPUSH
34720: CALL 34969 0 2
34724: NOT
34725: IFFALSE 34784
// repeat engine := _engine [ 1 ] ;
34727: LD_ADDR_VAR 0 3
34731: PUSH
34732: LD_VAR 0 11
34736: PUSH
34737: LD_INT 1
34739: ARRAY
34740: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34741: LD_ADDR_VAR 0 11
34745: PUSH
34746: LD_VAR 0 11
34750: PPUSH
34751: LD_INT 1
34753: PPUSH
34754: CALL_OW 3
34758: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34759: LD_VAR 0 2
34763: PPUSH
34764: LD_VAR 0 3
34768: PPUSH
34769: CALL 34969 0 2
34773: PUSH
34774: LD_VAR 0 11
34778: PUSH
34779: EMPTY
34780: EQUAL
34781: OR
34782: IFFALSE 34727
// if not control in _control then
34784: LD_VAR 0 4
34788: PUSH
34789: LD_VAR 0 12
34793: IN
34794: NOT
34795: IFFALSE 34821
// control := _control [ rand ( 1 , _control ) ] ;
34797: LD_ADDR_VAR 0 4
34801: PUSH
34802: LD_VAR 0 12
34806: PUSH
34807: LD_INT 1
34809: PPUSH
34810: LD_VAR 0 12
34814: PPUSH
34815: CALL_OW 12
34819: ARRAY
34820: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34821: LD_VAR 0 2
34825: PPUSH
34826: LD_VAR 0 5
34830: PPUSH
34831: CALL 35189 0 2
34835: NOT
34836: IFFALSE 34895
// repeat weapon := _weapon [ 1 ] ;
34838: LD_ADDR_VAR 0 5
34842: PUSH
34843: LD_VAR 0 10
34847: PUSH
34848: LD_INT 1
34850: ARRAY
34851: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34852: LD_ADDR_VAR 0 10
34856: PUSH
34857: LD_VAR 0 10
34861: PPUSH
34862: LD_INT 1
34864: PPUSH
34865: CALL_OW 3
34869: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34870: LD_VAR 0 2
34874: PPUSH
34875: LD_VAR 0 5
34879: PPUSH
34880: CALL 35189 0 2
34884: PUSH
34885: LD_VAR 0 10
34889: PUSH
34890: EMPTY
34891: EQUAL
34892: OR
34893: IFFALSE 34838
// result := [ ] ;
34895: LD_ADDR_VAR 0 6
34899: PUSH
34900: EMPTY
34901: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34902: LD_VAR 0 1
34906: PPUSH
34907: LD_VAR 0 2
34911: PPUSH
34912: LD_VAR 0 3
34916: PPUSH
34917: LD_VAR 0 4
34921: PPUSH
34922: LD_VAR 0 5
34926: PPUSH
34927: CALL_OW 448
34931: IFFALSE 34964
// result := [ chassis , engine , control , weapon ] ;
34933: LD_ADDR_VAR 0 6
34937: PUSH
34938: LD_VAR 0 2
34942: PUSH
34943: LD_VAR 0 3
34947: PUSH
34948: LD_VAR 0 4
34952: PUSH
34953: LD_VAR 0 5
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: ST_TO_ADDR
// end ;
34964: LD_VAR 0 6
34968: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34969: LD_INT 0
34971: PPUSH
// if not chassis or not engine then
34972: LD_VAR 0 1
34976: NOT
34977: PUSH
34978: LD_VAR 0 2
34982: NOT
34983: OR
34984: IFFALSE 34988
// exit ;
34986: GO 35184
// case engine of engine_solar :
34988: LD_VAR 0 2
34992: PUSH
34993: LD_INT 2
34995: DOUBLE
34996: EQUAL
34997: IFTRUE 35001
34999: GO 35039
35001: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35002: LD_ADDR_VAR 0 3
35006: PUSH
35007: LD_INT 11
35009: PUSH
35010: LD_INT 12
35012: PUSH
35013: LD_INT 13
35015: PUSH
35016: LD_INT 14
35018: PUSH
35019: LD_INT 1
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: LD_INT 3
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: ST_TO_ADDR
35037: GO 35168
35039: LD_INT 1
35041: DOUBLE
35042: EQUAL
35043: IFTRUE 35047
35045: GO 35109
35047: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35048: LD_ADDR_VAR 0 3
35052: PUSH
35053: LD_INT 11
35055: PUSH
35056: LD_INT 12
35058: PUSH
35059: LD_INT 13
35061: PUSH
35062: LD_INT 14
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: LD_INT 3
35073: PUSH
35074: LD_INT 4
35076: PUSH
35077: LD_INT 5
35079: PUSH
35080: LD_INT 21
35082: PUSH
35083: LD_INT 23
35085: PUSH
35086: LD_INT 22
35088: PUSH
35089: LD_INT 24
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: ST_TO_ADDR
35107: GO 35168
35109: LD_INT 3
35111: DOUBLE
35112: EQUAL
35113: IFTRUE 35117
35115: GO 35167
35117: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35118: LD_ADDR_VAR 0 3
35122: PUSH
35123: LD_INT 13
35125: PUSH
35126: LD_INT 14
35128: PUSH
35129: LD_INT 2
35131: PUSH
35132: LD_INT 3
35134: PUSH
35135: LD_INT 4
35137: PUSH
35138: LD_INT 5
35140: PUSH
35141: LD_INT 21
35143: PUSH
35144: LD_INT 22
35146: PUSH
35147: LD_INT 23
35149: PUSH
35150: LD_INT 24
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: ST_TO_ADDR
35165: GO 35168
35167: POP
// result := ( chassis in result ) ;
35168: LD_ADDR_VAR 0 3
35172: PUSH
35173: LD_VAR 0 1
35177: PUSH
35178: LD_VAR 0 3
35182: IN
35183: ST_TO_ADDR
// end ;
35184: LD_VAR 0 3
35188: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35189: LD_INT 0
35191: PPUSH
// if not chassis or not weapon then
35192: LD_VAR 0 1
35196: NOT
35197: PUSH
35198: LD_VAR 0 2
35202: NOT
35203: OR
35204: IFFALSE 35208
// exit ;
35206: GO 36268
// case weapon of us_machine_gun :
35208: LD_VAR 0 2
35212: PUSH
35213: LD_INT 2
35215: DOUBLE
35216: EQUAL
35217: IFTRUE 35221
35219: GO 35251
35221: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35222: LD_ADDR_VAR 0 3
35226: PUSH
35227: LD_INT 1
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: LD_INT 3
35235: PUSH
35236: LD_INT 4
35238: PUSH
35239: LD_INT 5
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: ST_TO_ADDR
35249: GO 36252
35251: LD_INT 3
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35259
35257: GO 35289
35259: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35260: LD_ADDR_VAR 0 3
35264: PUSH
35265: LD_INT 1
35267: PUSH
35268: LD_INT 2
35270: PUSH
35271: LD_INT 3
35273: PUSH
35274: LD_INT 4
35276: PUSH
35277: LD_INT 5
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: ST_TO_ADDR
35287: GO 36252
35289: LD_INT 11
35291: DOUBLE
35292: EQUAL
35293: IFTRUE 35297
35295: GO 35327
35297: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35298: LD_ADDR_VAR 0 3
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: LD_INT 2
35308: PUSH
35309: LD_INT 3
35311: PUSH
35312: LD_INT 4
35314: PUSH
35315: LD_INT 5
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: ST_TO_ADDR
35325: GO 36252
35327: LD_INT 4
35329: DOUBLE
35330: EQUAL
35331: IFTRUE 35335
35333: GO 35361
35335: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35336: LD_ADDR_VAR 0 3
35340: PUSH
35341: LD_INT 2
35343: PUSH
35344: LD_INT 3
35346: PUSH
35347: LD_INT 4
35349: PUSH
35350: LD_INT 5
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: ST_TO_ADDR
35359: GO 36252
35361: LD_INT 5
35363: DOUBLE
35364: EQUAL
35365: IFTRUE 35369
35367: GO 35395
35369: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35370: LD_ADDR_VAR 0 3
35374: PUSH
35375: LD_INT 2
35377: PUSH
35378: LD_INT 3
35380: PUSH
35381: LD_INT 4
35383: PUSH
35384: LD_INT 5
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: ST_TO_ADDR
35393: GO 36252
35395: LD_INT 9
35397: DOUBLE
35398: EQUAL
35399: IFTRUE 35403
35401: GO 35429
35403: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35404: LD_ADDR_VAR 0 3
35408: PUSH
35409: LD_INT 2
35411: PUSH
35412: LD_INT 3
35414: PUSH
35415: LD_INT 4
35417: PUSH
35418: LD_INT 5
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: ST_TO_ADDR
35427: GO 36252
35429: LD_INT 7
35431: DOUBLE
35432: EQUAL
35433: IFTRUE 35437
35435: GO 35463
35437: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35438: LD_ADDR_VAR 0 3
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: LD_INT 3
35448: PUSH
35449: LD_INT 4
35451: PUSH
35452: LD_INT 5
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: ST_TO_ADDR
35461: GO 36252
35463: LD_INT 12
35465: DOUBLE
35466: EQUAL
35467: IFTRUE 35471
35469: GO 35497
35471: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35472: LD_ADDR_VAR 0 3
35476: PUSH
35477: LD_INT 2
35479: PUSH
35480: LD_INT 3
35482: PUSH
35483: LD_INT 4
35485: PUSH
35486: LD_INT 5
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: ST_TO_ADDR
35495: GO 36252
35497: LD_INT 13
35499: DOUBLE
35500: EQUAL
35501: IFTRUE 35505
35503: GO 35531
35505: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35506: LD_ADDR_VAR 0 3
35510: PUSH
35511: LD_INT 2
35513: PUSH
35514: LD_INT 3
35516: PUSH
35517: LD_INT 4
35519: PUSH
35520: LD_INT 5
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: ST_TO_ADDR
35529: GO 36252
35531: LD_INT 14
35533: DOUBLE
35534: EQUAL
35535: IFTRUE 35539
35537: GO 35557
35539: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35540: LD_ADDR_VAR 0 3
35544: PUSH
35545: LD_INT 4
35547: PUSH
35548: LD_INT 5
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: ST_TO_ADDR
35555: GO 36252
35557: LD_INT 6
35559: DOUBLE
35560: EQUAL
35561: IFTRUE 35565
35563: GO 35583
35565: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35566: LD_ADDR_VAR 0 3
35570: PUSH
35571: LD_INT 4
35573: PUSH
35574: LD_INT 5
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: ST_TO_ADDR
35581: GO 36252
35583: LD_INT 10
35585: DOUBLE
35586: EQUAL
35587: IFTRUE 35591
35589: GO 35609
35591: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35592: LD_ADDR_VAR 0 3
35596: PUSH
35597: LD_INT 4
35599: PUSH
35600: LD_INT 5
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: ST_TO_ADDR
35607: GO 36252
35609: LD_INT 22
35611: DOUBLE
35612: EQUAL
35613: IFTRUE 35617
35615: GO 35643
35617: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35618: LD_ADDR_VAR 0 3
35622: PUSH
35623: LD_INT 11
35625: PUSH
35626: LD_INT 12
35628: PUSH
35629: LD_INT 13
35631: PUSH
35632: LD_INT 14
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: ST_TO_ADDR
35641: GO 36252
35643: LD_INT 23
35645: DOUBLE
35646: EQUAL
35647: IFTRUE 35651
35649: GO 35677
35651: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35652: LD_ADDR_VAR 0 3
35656: PUSH
35657: LD_INT 11
35659: PUSH
35660: LD_INT 12
35662: PUSH
35663: LD_INT 13
35665: PUSH
35666: LD_INT 14
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: ST_TO_ADDR
35675: GO 36252
35677: LD_INT 24
35679: DOUBLE
35680: EQUAL
35681: IFTRUE 35685
35683: GO 35711
35685: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35686: LD_ADDR_VAR 0 3
35690: PUSH
35691: LD_INT 11
35693: PUSH
35694: LD_INT 12
35696: PUSH
35697: LD_INT 13
35699: PUSH
35700: LD_INT 14
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: ST_TO_ADDR
35709: GO 36252
35711: LD_INT 30
35713: DOUBLE
35714: EQUAL
35715: IFTRUE 35719
35717: GO 35745
35719: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35720: LD_ADDR_VAR 0 3
35724: PUSH
35725: LD_INT 11
35727: PUSH
35728: LD_INT 12
35730: PUSH
35731: LD_INT 13
35733: PUSH
35734: LD_INT 14
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: ST_TO_ADDR
35743: GO 36252
35745: LD_INT 25
35747: DOUBLE
35748: EQUAL
35749: IFTRUE 35753
35751: GO 35771
35753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35754: LD_ADDR_VAR 0 3
35758: PUSH
35759: LD_INT 13
35761: PUSH
35762: LD_INT 14
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: ST_TO_ADDR
35769: GO 36252
35771: LD_INT 27
35773: DOUBLE
35774: EQUAL
35775: IFTRUE 35779
35777: GO 35797
35779: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35780: LD_ADDR_VAR 0 3
35784: PUSH
35785: LD_INT 13
35787: PUSH
35788: LD_INT 14
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: ST_TO_ADDR
35795: GO 36252
35797: LD_INT 92
35799: DOUBLE
35800: EQUAL
35801: IFTRUE 35805
35803: GO 35831
35805: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35806: LD_ADDR_VAR 0 3
35810: PUSH
35811: LD_INT 11
35813: PUSH
35814: LD_INT 12
35816: PUSH
35817: LD_INT 13
35819: PUSH
35820: LD_INT 14
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: ST_TO_ADDR
35829: GO 36252
35831: LD_INT 28
35833: DOUBLE
35834: EQUAL
35835: IFTRUE 35839
35837: GO 35857
35839: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35840: LD_ADDR_VAR 0 3
35844: PUSH
35845: LD_INT 13
35847: PUSH
35848: LD_INT 14
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: ST_TO_ADDR
35855: GO 36252
35857: LD_INT 29
35859: DOUBLE
35860: EQUAL
35861: IFTRUE 35865
35863: GO 35883
35865: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35866: LD_ADDR_VAR 0 3
35870: PUSH
35871: LD_INT 13
35873: PUSH
35874: LD_INT 14
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: ST_TO_ADDR
35881: GO 36252
35883: LD_INT 31
35885: DOUBLE
35886: EQUAL
35887: IFTRUE 35891
35889: GO 35909
35891: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35892: LD_ADDR_VAR 0 3
35896: PUSH
35897: LD_INT 13
35899: PUSH
35900: LD_INT 14
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: ST_TO_ADDR
35907: GO 36252
35909: LD_INT 26
35911: DOUBLE
35912: EQUAL
35913: IFTRUE 35917
35915: GO 35935
35917: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35918: LD_ADDR_VAR 0 3
35922: PUSH
35923: LD_INT 13
35925: PUSH
35926: LD_INT 14
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: ST_TO_ADDR
35933: GO 36252
35935: LD_INT 42
35937: DOUBLE
35938: EQUAL
35939: IFTRUE 35943
35941: GO 35969
35943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35944: LD_ADDR_VAR 0 3
35948: PUSH
35949: LD_INT 21
35951: PUSH
35952: LD_INT 22
35954: PUSH
35955: LD_INT 23
35957: PUSH
35958: LD_INT 24
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: ST_TO_ADDR
35967: GO 36252
35969: LD_INT 43
35971: DOUBLE
35972: EQUAL
35973: IFTRUE 35977
35975: GO 36003
35977: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35978: LD_ADDR_VAR 0 3
35982: PUSH
35983: LD_INT 21
35985: PUSH
35986: LD_INT 22
35988: PUSH
35989: LD_INT 23
35991: PUSH
35992: LD_INT 24
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: ST_TO_ADDR
36001: GO 36252
36003: LD_INT 44
36005: DOUBLE
36006: EQUAL
36007: IFTRUE 36011
36009: GO 36037
36011: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36012: LD_ADDR_VAR 0 3
36016: PUSH
36017: LD_INT 21
36019: PUSH
36020: LD_INT 22
36022: PUSH
36023: LD_INT 23
36025: PUSH
36026: LD_INT 24
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: ST_TO_ADDR
36035: GO 36252
36037: LD_INT 45
36039: DOUBLE
36040: EQUAL
36041: IFTRUE 36045
36043: GO 36071
36045: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36046: LD_ADDR_VAR 0 3
36050: PUSH
36051: LD_INT 21
36053: PUSH
36054: LD_INT 22
36056: PUSH
36057: LD_INT 23
36059: PUSH
36060: LD_INT 24
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: ST_TO_ADDR
36069: GO 36252
36071: LD_INT 49
36073: DOUBLE
36074: EQUAL
36075: IFTRUE 36079
36077: GO 36105
36079: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36080: LD_ADDR_VAR 0 3
36084: PUSH
36085: LD_INT 21
36087: PUSH
36088: LD_INT 22
36090: PUSH
36091: LD_INT 23
36093: PUSH
36094: LD_INT 24
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: ST_TO_ADDR
36103: GO 36252
36105: LD_INT 51
36107: DOUBLE
36108: EQUAL
36109: IFTRUE 36113
36111: GO 36139
36113: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36114: LD_ADDR_VAR 0 3
36118: PUSH
36119: LD_INT 21
36121: PUSH
36122: LD_INT 22
36124: PUSH
36125: LD_INT 23
36127: PUSH
36128: LD_INT 24
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: ST_TO_ADDR
36137: GO 36252
36139: LD_INT 52
36141: DOUBLE
36142: EQUAL
36143: IFTRUE 36147
36145: GO 36173
36147: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36148: LD_ADDR_VAR 0 3
36152: PUSH
36153: LD_INT 21
36155: PUSH
36156: LD_INT 22
36158: PUSH
36159: LD_INT 23
36161: PUSH
36162: LD_INT 24
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: ST_TO_ADDR
36171: GO 36252
36173: LD_INT 53
36175: DOUBLE
36176: EQUAL
36177: IFTRUE 36181
36179: GO 36199
36181: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36182: LD_ADDR_VAR 0 3
36186: PUSH
36187: LD_INT 23
36189: PUSH
36190: LD_INT 24
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: ST_TO_ADDR
36197: GO 36252
36199: LD_INT 46
36201: DOUBLE
36202: EQUAL
36203: IFTRUE 36207
36205: GO 36225
36207: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36208: LD_ADDR_VAR 0 3
36212: PUSH
36213: LD_INT 23
36215: PUSH
36216: LD_INT 24
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: ST_TO_ADDR
36223: GO 36252
36225: LD_INT 47
36227: DOUBLE
36228: EQUAL
36229: IFTRUE 36233
36231: GO 36251
36233: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36234: LD_ADDR_VAR 0 3
36238: PUSH
36239: LD_INT 23
36241: PUSH
36242: LD_INT 24
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: ST_TO_ADDR
36249: GO 36252
36251: POP
// result := ( chassis in result ) ;
36252: LD_ADDR_VAR 0 3
36256: PUSH
36257: LD_VAR 0 1
36261: PUSH
36262: LD_VAR 0 3
36266: IN
36267: ST_TO_ADDR
// end ;
36268: LD_VAR 0 3
36272: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36273: LD_INT 0
36275: PPUSH
36276: PPUSH
36277: PPUSH
36278: PPUSH
36279: PPUSH
36280: PPUSH
36281: PPUSH
// result := array ;
36282: LD_ADDR_VAR 0 5
36286: PUSH
36287: LD_VAR 0 1
36291: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36292: LD_VAR 0 1
36296: NOT
36297: PUSH
36298: LD_VAR 0 2
36302: NOT
36303: OR
36304: PUSH
36305: LD_VAR 0 3
36309: NOT
36310: OR
36311: PUSH
36312: LD_VAR 0 2
36316: PUSH
36317: LD_VAR 0 1
36321: GREATER
36322: OR
36323: PUSH
36324: LD_VAR 0 3
36328: PUSH
36329: LD_VAR 0 1
36333: GREATER
36334: OR
36335: IFFALSE 36339
// exit ;
36337: GO 36635
// if direction then
36339: LD_VAR 0 4
36343: IFFALSE 36407
// begin d := 1 ;
36345: LD_ADDR_VAR 0 9
36349: PUSH
36350: LD_INT 1
36352: ST_TO_ADDR
// if i_from > i_to then
36353: LD_VAR 0 2
36357: PUSH
36358: LD_VAR 0 3
36362: GREATER
36363: IFFALSE 36389
// length := ( array - i_from ) + i_to else
36365: LD_ADDR_VAR 0 11
36369: PUSH
36370: LD_VAR 0 1
36374: PUSH
36375: LD_VAR 0 2
36379: MINUS
36380: PUSH
36381: LD_VAR 0 3
36385: PLUS
36386: ST_TO_ADDR
36387: GO 36405
// length := i_to - i_from ;
36389: LD_ADDR_VAR 0 11
36393: PUSH
36394: LD_VAR 0 3
36398: PUSH
36399: LD_VAR 0 2
36403: MINUS
36404: ST_TO_ADDR
// end else
36405: GO 36468
// begin d := - 1 ;
36407: LD_ADDR_VAR 0 9
36411: PUSH
36412: LD_INT 1
36414: NEG
36415: ST_TO_ADDR
// if i_from > i_to then
36416: LD_VAR 0 2
36420: PUSH
36421: LD_VAR 0 3
36425: GREATER
36426: IFFALSE 36446
// length := i_from - i_to else
36428: LD_ADDR_VAR 0 11
36432: PUSH
36433: LD_VAR 0 2
36437: PUSH
36438: LD_VAR 0 3
36442: MINUS
36443: ST_TO_ADDR
36444: GO 36468
// length := ( array - i_to ) + i_from ;
36446: LD_ADDR_VAR 0 11
36450: PUSH
36451: LD_VAR 0 1
36455: PUSH
36456: LD_VAR 0 3
36460: MINUS
36461: PUSH
36462: LD_VAR 0 2
36466: PLUS
36467: ST_TO_ADDR
// end ; if not length then
36468: LD_VAR 0 11
36472: NOT
36473: IFFALSE 36477
// exit ;
36475: GO 36635
// tmp := array ;
36477: LD_ADDR_VAR 0 10
36481: PUSH
36482: LD_VAR 0 1
36486: ST_TO_ADDR
// for i = 1 to length do
36487: LD_ADDR_VAR 0 6
36491: PUSH
36492: DOUBLE
36493: LD_INT 1
36495: DEC
36496: ST_TO_ADDR
36497: LD_VAR 0 11
36501: PUSH
36502: FOR_TO
36503: IFFALSE 36623
// begin for j = 1 to array do
36505: LD_ADDR_VAR 0 7
36509: PUSH
36510: DOUBLE
36511: LD_INT 1
36513: DEC
36514: ST_TO_ADDR
36515: LD_VAR 0 1
36519: PUSH
36520: FOR_TO
36521: IFFALSE 36609
// begin k := j + d ;
36523: LD_ADDR_VAR 0 8
36527: PUSH
36528: LD_VAR 0 7
36532: PUSH
36533: LD_VAR 0 9
36537: PLUS
36538: ST_TO_ADDR
// if k > array then
36539: LD_VAR 0 8
36543: PUSH
36544: LD_VAR 0 1
36548: GREATER
36549: IFFALSE 36559
// k := 1 ;
36551: LD_ADDR_VAR 0 8
36555: PUSH
36556: LD_INT 1
36558: ST_TO_ADDR
// if not k then
36559: LD_VAR 0 8
36563: NOT
36564: IFFALSE 36576
// k := array ;
36566: LD_ADDR_VAR 0 8
36570: PUSH
36571: LD_VAR 0 1
36575: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36576: LD_ADDR_VAR 0 10
36580: PUSH
36581: LD_VAR 0 10
36585: PPUSH
36586: LD_VAR 0 8
36590: PPUSH
36591: LD_VAR 0 1
36595: PUSH
36596: LD_VAR 0 7
36600: ARRAY
36601: PPUSH
36602: CALL_OW 1
36606: ST_TO_ADDR
// end ;
36607: GO 36520
36609: POP
36610: POP
// array := tmp ;
36611: LD_ADDR_VAR 0 1
36615: PUSH
36616: LD_VAR 0 10
36620: ST_TO_ADDR
// end ;
36621: GO 36502
36623: POP
36624: POP
// result := array ;
36625: LD_ADDR_VAR 0 5
36629: PUSH
36630: LD_VAR 0 1
36634: ST_TO_ADDR
// end ;
36635: LD_VAR 0 5
36639: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36640: LD_INT 0
36642: PPUSH
36643: PPUSH
// result := 0 ;
36644: LD_ADDR_VAR 0 3
36648: PUSH
36649: LD_INT 0
36651: ST_TO_ADDR
// if not array or not value in array then
36652: LD_VAR 0 1
36656: NOT
36657: PUSH
36658: LD_VAR 0 2
36662: PUSH
36663: LD_VAR 0 1
36667: IN
36668: NOT
36669: OR
36670: IFFALSE 36674
// exit ;
36672: GO 36728
// for i = 1 to array do
36674: LD_ADDR_VAR 0 4
36678: PUSH
36679: DOUBLE
36680: LD_INT 1
36682: DEC
36683: ST_TO_ADDR
36684: LD_VAR 0 1
36688: PUSH
36689: FOR_TO
36690: IFFALSE 36726
// if value = array [ i ] then
36692: LD_VAR 0 2
36696: PUSH
36697: LD_VAR 0 1
36701: PUSH
36702: LD_VAR 0 4
36706: ARRAY
36707: EQUAL
36708: IFFALSE 36724
// begin result := i ;
36710: LD_ADDR_VAR 0 3
36714: PUSH
36715: LD_VAR 0 4
36719: ST_TO_ADDR
// exit ;
36720: POP
36721: POP
36722: GO 36728
// end ;
36724: GO 36689
36726: POP
36727: POP
// end ;
36728: LD_VAR 0 3
36732: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36733: LD_INT 0
36735: PPUSH
// vc_chassis := chassis ;
36736: LD_ADDR_OWVAR 37
36740: PUSH
36741: LD_VAR 0 1
36745: ST_TO_ADDR
// vc_engine := engine ;
36746: LD_ADDR_OWVAR 39
36750: PUSH
36751: LD_VAR 0 2
36755: ST_TO_ADDR
// vc_control := control ;
36756: LD_ADDR_OWVAR 38
36760: PUSH
36761: LD_VAR 0 3
36765: ST_TO_ADDR
// vc_weapon := weapon ;
36766: LD_ADDR_OWVAR 40
36770: PUSH
36771: LD_VAR 0 4
36775: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36776: LD_ADDR_OWVAR 41
36780: PUSH
36781: LD_VAR 0 5
36785: ST_TO_ADDR
// end ;
36786: LD_VAR 0 6
36790: RET
// export function WantPlant ( unit ) ; var task ; begin
36791: LD_INT 0
36793: PPUSH
36794: PPUSH
// result := false ;
36795: LD_ADDR_VAR 0 2
36799: PUSH
36800: LD_INT 0
36802: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36803: LD_ADDR_VAR 0 3
36807: PUSH
36808: LD_VAR 0 1
36812: PPUSH
36813: CALL_OW 437
36817: ST_TO_ADDR
// if task then
36818: LD_VAR 0 3
36822: IFFALSE 36850
// if task [ 1 ] [ 1 ] = p then
36824: LD_VAR 0 3
36828: PUSH
36829: LD_INT 1
36831: ARRAY
36832: PUSH
36833: LD_INT 1
36835: ARRAY
36836: PUSH
36837: LD_STRING p
36839: EQUAL
36840: IFFALSE 36850
// result := true ;
36842: LD_ADDR_VAR 0 2
36846: PUSH
36847: LD_INT 1
36849: ST_TO_ADDR
// end ;
36850: LD_VAR 0 2
36854: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36855: LD_INT 0
36857: PPUSH
36858: PPUSH
36859: PPUSH
36860: PPUSH
// if pos < 1 then
36861: LD_VAR 0 2
36865: PUSH
36866: LD_INT 1
36868: LESS
36869: IFFALSE 36873
// exit ;
36871: GO 37176
// if pos = 1 then
36873: LD_VAR 0 2
36877: PUSH
36878: LD_INT 1
36880: EQUAL
36881: IFFALSE 36914
// result := Replace ( arr , pos [ 1 ] , value ) else
36883: LD_ADDR_VAR 0 4
36887: PUSH
36888: LD_VAR 0 1
36892: PPUSH
36893: LD_VAR 0 2
36897: PUSH
36898: LD_INT 1
36900: ARRAY
36901: PPUSH
36902: LD_VAR 0 3
36906: PPUSH
36907: CALL_OW 1
36911: ST_TO_ADDR
36912: GO 37176
// begin tmp := arr ;
36914: LD_ADDR_VAR 0 6
36918: PUSH
36919: LD_VAR 0 1
36923: ST_TO_ADDR
// s_arr := [ tmp ] ;
36924: LD_ADDR_VAR 0 7
36928: PUSH
36929: LD_VAR 0 6
36933: PUSH
36934: EMPTY
36935: LIST
36936: ST_TO_ADDR
// for i = 1 to pos - 1 do
36937: LD_ADDR_VAR 0 5
36941: PUSH
36942: DOUBLE
36943: LD_INT 1
36945: DEC
36946: ST_TO_ADDR
36947: LD_VAR 0 2
36951: PUSH
36952: LD_INT 1
36954: MINUS
36955: PUSH
36956: FOR_TO
36957: IFFALSE 37002
// begin tmp := tmp [ pos [ i ] ] ;
36959: LD_ADDR_VAR 0 6
36963: PUSH
36964: LD_VAR 0 6
36968: PUSH
36969: LD_VAR 0 2
36973: PUSH
36974: LD_VAR 0 5
36978: ARRAY
36979: ARRAY
36980: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36981: LD_ADDR_VAR 0 7
36985: PUSH
36986: LD_VAR 0 7
36990: PUSH
36991: LD_VAR 0 6
36995: PUSH
36996: EMPTY
36997: LIST
36998: ADD
36999: ST_TO_ADDR
// end ;
37000: GO 36956
37002: POP
37003: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37004: LD_ADDR_VAR 0 6
37008: PUSH
37009: LD_VAR 0 6
37013: PPUSH
37014: LD_VAR 0 2
37018: PUSH
37019: LD_VAR 0 2
37023: ARRAY
37024: PPUSH
37025: LD_VAR 0 3
37029: PPUSH
37030: CALL_OW 1
37034: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37035: LD_ADDR_VAR 0 7
37039: PUSH
37040: LD_VAR 0 7
37044: PPUSH
37045: LD_VAR 0 7
37049: PPUSH
37050: LD_VAR 0 6
37054: PPUSH
37055: CALL_OW 1
37059: ST_TO_ADDR
// for i = s_arr downto 2 do
37060: LD_ADDR_VAR 0 5
37064: PUSH
37065: DOUBLE
37066: LD_VAR 0 7
37070: INC
37071: ST_TO_ADDR
37072: LD_INT 2
37074: PUSH
37075: FOR_DOWNTO
37076: IFFALSE 37160
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37078: LD_ADDR_VAR 0 6
37082: PUSH
37083: LD_VAR 0 7
37087: PUSH
37088: LD_VAR 0 5
37092: PUSH
37093: LD_INT 1
37095: MINUS
37096: ARRAY
37097: PPUSH
37098: LD_VAR 0 2
37102: PUSH
37103: LD_VAR 0 5
37107: PUSH
37108: LD_INT 1
37110: MINUS
37111: ARRAY
37112: PPUSH
37113: LD_VAR 0 7
37117: PUSH
37118: LD_VAR 0 5
37122: ARRAY
37123: PPUSH
37124: CALL_OW 1
37128: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37129: LD_ADDR_VAR 0 7
37133: PUSH
37134: LD_VAR 0 7
37138: PPUSH
37139: LD_VAR 0 5
37143: PUSH
37144: LD_INT 1
37146: MINUS
37147: PPUSH
37148: LD_VAR 0 6
37152: PPUSH
37153: CALL_OW 1
37157: ST_TO_ADDR
// end ;
37158: GO 37075
37160: POP
37161: POP
// result := s_arr [ 1 ] ;
37162: LD_ADDR_VAR 0 4
37166: PUSH
37167: LD_VAR 0 7
37171: PUSH
37172: LD_INT 1
37174: ARRAY
37175: ST_TO_ADDR
// end ; end ;
37176: LD_VAR 0 4
37180: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37181: LD_INT 0
37183: PPUSH
37184: PPUSH
// if not list then
37185: LD_VAR 0 1
37189: NOT
37190: IFFALSE 37194
// exit ;
37192: GO 37285
// i := list [ pos1 ] ;
37194: LD_ADDR_VAR 0 5
37198: PUSH
37199: LD_VAR 0 1
37203: PUSH
37204: LD_VAR 0 2
37208: ARRAY
37209: ST_TO_ADDR
// if not i then
37210: LD_VAR 0 5
37214: NOT
37215: IFFALSE 37219
// exit ;
37217: GO 37285
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37219: LD_ADDR_VAR 0 1
37223: PUSH
37224: LD_VAR 0 1
37228: PPUSH
37229: LD_VAR 0 2
37233: PPUSH
37234: LD_VAR 0 1
37238: PUSH
37239: LD_VAR 0 3
37243: ARRAY
37244: PPUSH
37245: CALL_OW 1
37249: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37250: LD_ADDR_VAR 0 1
37254: PUSH
37255: LD_VAR 0 1
37259: PPUSH
37260: LD_VAR 0 3
37264: PPUSH
37265: LD_VAR 0 5
37269: PPUSH
37270: CALL_OW 1
37274: ST_TO_ADDR
// result := list ;
37275: LD_ADDR_VAR 0 4
37279: PUSH
37280: LD_VAR 0 1
37284: ST_TO_ADDR
// end ;
37285: LD_VAR 0 4
37289: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37290: LD_INT 0
37292: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37293: LD_ADDR_VAR 0 5
37297: PUSH
37298: LD_VAR 0 1
37302: PPUSH
37303: CALL_OW 250
37307: PPUSH
37308: LD_VAR 0 1
37312: PPUSH
37313: CALL_OW 251
37317: PPUSH
37318: LD_VAR 0 2
37322: PPUSH
37323: LD_VAR 0 3
37327: PPUSH
37328: LD_VAR 0 4
37332: PPUSH
37333: CALL 37711 0 5
37337: ST_TO_ADDR
// end ;
37338: LD_VAR 0 5
37342: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37343: LD_INT 0
37345: PPUSH
37346: PPUSH
37347: PPUSH
37348: PPUSH
// if not list or not unit then
37349: LD_VAR 0 2
37353: NOT
37354: PUSH
37355: LD_VAR 0 1
37359: NOT
37360: OR
37361: IFFALSE 37365
// exit ;
37363: GO 37706
// result := [ ] ;
37365: LD_ADDR_VAR 0 5
37369: PUSH
37370: EMPTY
37371: ST_TO_ADDR
// for i in list do
37372: LD_ADDR_VAR 0 6
37376: PUSH
37377: LD_VAR 0 2
37381: PUSH
37382: FOR_IN
37383: IFFALSE 37601
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37385: LD_ADDR_VAR 0 8
37389: PUSH
37390: LD_VAR 0 1
37394: PPUSH
37395: LD_VAR 0 6
37399: PUSH
37400: LD_INT 1
37402: ARRAY
37403: PPUSH
37404: LD_VAR 0 6
37408: PUSH
37409: LD_INT 2
37411: ARRAY
37412: PPUSH
37413: CALL_OW 297
37417: ST_TO_ADDR
// if not Count ( result ) then
37418: LD_VAR 0 5
37422: PPUSH
37423: CALL 33995 0 1
37427: NOT
37428: IFFALSE 37461
// begin result := Join ( result , [ i , tmp ] ) ;
37430: LD_ADDR_VAR 0 5
37434: PUSH
37435: LD_VAR 0 5
37439: PPUSH
37440: LD_VAR 0 6
37444: PUSH
37445: LD_VAR 0 8
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PPUSH
37454: CALL 69584 0 2
37458: ST_TO_ADDR
// continue ;
37459: GO 37382
// end ; if result [ result ] [ 2 ] <= tmp then
37461: LD_VAR 0 5
37465: PUSH
37466: LD_VAR 0 5
37470: ARRAY
37471: PUSH
37472: LD_INT 2
37474: ARRAY
37475: PUSH
37476: LD_VAR 0 8
37480: LESSEQUAL
37481: IFFALSE 37514
// result := Join ( result , [ i , tmp ] ) else
37483: LD_ADDR_VAR 0 5
37487: PUSH
37488: LD_VAR 0 5
37492: PPUSH
37493: LD_VAR 0 6
37497: PUSH
37498: LD_VAR 0 8
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PPUSH
37507: CALL 69584 0 2
37511: ST_TO_ADDR
37512: GO 37599
// begin for j := 1 to Count ( result ) do
37514: LD_ADDR_VAR 0 7
37518: PUSH
37519: DOUBLE
37520: LD_INT 1
37522: DEC
37523: ST_TO_ADDR
37524: LD_VAR 0 5
37528: PPUSH
37529: CALL 33995 0 1
37533: PUSH
37534: FOR_TO
37535: IFFALSE 37597
// begin if tmp < result [ j ] [ 2 ] then
37537: LD_VAR 0 8
37541: PUSH
37542: LD_VAR 0 5
37546: PUSH
37547: LD_VAR 0 7
37551: ARRAY
37552: PUSH
37553: LD_INT 2
37555: ARRAY
37556: LESS
37557: IFFALSE 37595
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37559: LD_ADDR_VAR 0 5
37563: PUSH
37564: LD_VAR 0 5
37568: PPUSH
37569: LD_VAR 0 7
37573: PPUSH
37574: LD_VAR 0 6
37578: PUSH
37579: LD_VAR 0 8
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PPUSH
37588: CALL_OW 2
37592: ST_TO_ADDR
// break ;
37593: GO 37597
// end ; end ;
37595: GO 37534
37597: POP
37598: POP
// end ; end ;
37599: GO 37382
37601: POP
37602: POP
// if result and not asc then
37603: LD_VAR 0 5
37607: PUSH
37608: LD_VAR 0 3
37612: NOT
37613: AND
37614: IFFALSE 37631
// result := ReverseArray ( result ) ;
37616: LD_ADDR_VAR 0 5
37620: PUSH
37621: LD_VAR 0 5
37625: PPUSH
37626: CALL 64871 0 1
37630: ST_TO_ADDR
// tmp := [ ] ;
37631: LD_ADDR_VAR 0 8
37635: PUSH
37636: EMPTY
37637: ST_TO_ADDR
// if mode then
37638: LD_VAR 0 4
37642: IFFALSE 37706
// begin for i := 1 to result do
37644: LD_ADDR_VAR 0 6
37648: PUSH
37649: DOUBLE
37650: LD_INT 1
37652: DEC
37653: ST_TO_ADDR
37654: LD_VAR 0 5
37658: PUSH
37659: FOR_TO
37660: IFFALSE 37694
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37662: LD_ADDR_VAR 0 8
37666: PUSH
37667: LD_VAR 0 8
37671: PPUSH
37672: LD_VAR 0 5
37676: PUSH
37677: LD_VAR 0 6
37681: ARRAY
37682: PUSH
37683: LD_INT 1
37685: ARRAY
37686: PPUSH
37687: CALL 69584 0 2
37691: ST_TO_ADDR
37692: GO 37659
37694: POP
37695: POP
// result := tmp ;
37696: LD_ADDR_VAR 0 5
37700: PUSH
37701: LD_VAR 0 8
37705: ST_TO_ADDR
// end ; end ;
37706: LD_VAR 0 5
37710: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37711: LD_INT 0
37713: PPUSH
37714: PPUSH
37715: PPUSH
37716: PPUSH
// if not list then
37717: LD_VAR 0 3
37721: NOT
37722: IFFALSE 37726
// exit ;
37724: GO 38114
// result := [ ] ;
37726: LD_ADDR_VAR 0 6
37730: PUSH
37731: EMPTY
37732: ST_TO_ADDR
// for i in list do
37733: LD_ADDR_VAR 0 7
37737: PUSH
37738: LD_VAR 0 3
37742: PUSH
37743: FOR_IN
37744: IFFALSE 37946
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37746: LD_ADDR_VAR 0 9
37750: PUSH
37751: LD_VAR 0 7
37755: PPUSH
37756: LD_VAR 0 1
37760: PPUSH
37761: LD_VAR 0 2
37765: PPUSH
37766: CALL_OW 297
37770: ST_TO_ADDR
// if not result then
37771: LD_VAR 0 6
37775: NOT
37776: IFFALSE 37802
// result := [ [ i , tmp ] ] else
37778: LD_ADDR_VAR 0 6
37782: PUSH
37783: LD_VAR 0 7
37787: PUSH
37788: LD_VAR 0 9
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: EMPTY
37798: LIST
37799: ST_TO_ADDR
37800: GO 37944
// begin if result [ result ] [ 2 ] < tmp then
37802: LD_VAR 0 6
37806: PUSH
37807: LD_VAR 0 6
37811: ARRAY
37812: PUSH
37813: LD_INT 2
37815: ARRAY
37816: PUSH
37817: LD_VAR 0 9
37821: LESS
37822: IFFALSE 37864
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37824: LD_ADDR_VAR 0 6
37828: PUSH
37829: LD_VAR 0 6
37833: PPUSH
37834: LD_VAR 0 6
37838: PUSH
37839: LD_INT 1
37841: PLUS
37842: PPUSH
37843: LD_VAR 0 7
37847: PUSH
37848: LD_VAR 0 9
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PPUSH
37857: CALL_OW 2
37861: ST_TO_ADDR
37862: GO 37944
// for j = 1 to result do
37864: LD_ADDR_VAR 0 8
37868: PUSH
37869: DOUBLE
37870: LD_INT 1
37872: DEC
37873: ST_TO_ADDR
37874: LD_VAR 0 6
37878: PUSH
37879: FOR_TO
37880: IFFALSE 37942
// begin if tmp < result [ j ] [ 2 ] then
37882: LD_VAR 0 9
37886: PUSH
37887: LD_VAR 0 6
37891: PUSH
37892: LD_VAR 0 8
37896: ARRAY
37897: PUSH
37898: LD_INT 2
37900: ARRAY
37901: LESS
37902: IFFALSE 37940
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37904: LD_ADDR_VAR 0 6
37908: PUSH
37909: LD_VAR 0 6
37913: PPUSH
37914: LD_VAR 0 8
37918: PPUSH
37919: LD_VAR 0 7
37923: PUSH
37924: LD_VAR 0 9
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PPUSH
37933: CALL_OW 2
37937: ST_TO_ADDR
// break ;
37938: GO 37942
// end ; end ;
37940: GO 37879
37942: POP
37943: POP
// end ; end ;
37944: GO 37743
37946: POP
37947: POP
// if result and not asc then
37948: LD_VAR 0 6
37952: PUSH
37953: LD_VAR 0 4
37957: NOT
37958: AND
37959: IFFALSE 38034
// begin tmp := result ;
37961: LD_ADDR_VAR 0 9
37965: PUSH
37966: LD_VAR 0 6
37970: ST_TO_ADDR
// for i = tmp downto 1 do
37971: LD_ADDR_VAR 0 7
37975: PUSH
37976: DOUBLE
37977: LD_VAR 0 9
37981: INC
37982: ST_TO_ADDR
37983: LD_INT 1
37985: PUSH
37986: FOR_DOWNTO
37987: IFFALSE 38032
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37989: LD_ADDR_VAR 0 6
37993: PUSH
37994: LD_VAR 0 6
37998: PPUSH
37999: LD_VAR 0 9
38003: PUSH
38004: LD_VAR 0 7
38008: MINUS
38009: PUSH
38010: LD_INT 1
38012: PLUS
38013: PPUSH
38014: LD_VAR 0 9
38018: PUSH
38019: LD_VAR 0 7
38023: ARRAY
38024: PPUSH
38025: CALL_OW 1
38029: ST_TO_ADDR
38030: GO 37986
38032: POP
38033: POP
// end ; tmp := [ ] ;
38034: LD_ADDR_VAR 0 9
38038: PUSH
38039: EMPTY
38040: ST_TO_ADDR
// if mode then
38041: LD_VAR 0 5
38045: IFFALSE 38114
// begin for i = 1 to result do
38047: LD_ADDR_VAR 0 7
38051: PUSH
38052: DOUBLE
38053: LD_INT 1
38055: DEC
38056: ST_TO_ADDR
38057: LD_VAR 0 6
38061: PUSH
38062: FOR_TO
38063: IFFALSE 38102
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38065: LD_ADDR_VAR 0 9
38069: PUSH
38070: LD_VAR 0 9
38074: PPUSH
38075: LD_VAR 0 7
38079: PPUSH
38080: LD_VAR 0 6
38084: PUSH
38085: LD_VAR 0 7
38089: ARRAY
38090: PUSH
38091: LD_INT 1
38093: ARRAY
38094: PPUSH
38095: CALL_OW 1
38099: ST_TO_ADDR
38100: GO 38062
38102: POP
38103: POP
// result := tmp ;
38104: LD_ADDR_VAR 0 6
38108: PUSH
38109: LD_VAR 0 9
38113: ST_TO_ADDR
// end ; end ;
38114: LD_VAR 0 6
38118: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38119: LD_INT 0
38121: PPUSH
38122: PPUSH
38123: PPUSH
38124: PPUSH
38125: PPUSH
38126: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38127: LD_ADDR_VAR 0 5
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: EMPTY
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: ST_TO_ADDR
// if not x or not y then
38149: LD_VAR 0 2
38153: NOT
38154: PUSH
38155: LD_VAR 0 3
38159: NOT
38160: OR
38161: IFFALSE 38165
// exit ;
38163: GO 39815
// if not range then
38165: LD_VAR 0 4
38169: NOT
38170: IFFALSE 38180
// range := 10 ;
38172: LD_ADDR_VAR 0 4
38176: PUSH
38177: LD_INT 10
38179: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38180: LD_ADDR_VAR 0 8
38184: PUSH
38185: LD_INT 81
38187: PUSH
38188: LD_VAR 0 1
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 92
38199: PUSH
38200: LD_VAR 0 2
38204: PUSH
38205: LD_VAR 0 3
38209: PUSH
38210: LD_VAR 0 4
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 3
38223: PUSH
38224: LD_INT 21
38226: PUSH
38227: LD_INT 3
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: LIST
38242: PPUSH
38243: CALL_OW 69
38247: ST_TO_ADDR
// if not tmp then
38248: LD_VAR 0 8
38252: NOT
38253: IFFALSE 38257
// exit ;
38255: GO 39815
// for i in tmp do
38257: LD_ADDR_VAR 0 6
38261: PUSH
38262: LD_VAR 0 8
38266: PUSH
38267: FOR_IN
38268: IFFALSE 39790
// begin points := [ 0 , 0 , 0 ] ;
38270: LD_ADDR_VAR 0 9
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: LIST
38288: ST_TO_ADDR
// bpoints := 1 ;
38289: LD_ADDR_VAR 0 10
38293: PUSH
38294: LD_INT 1
38296: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38297: LD_VAR 0 6
38301: PPUSH
38302: CALL_OW 247
38306: PUSH
38307: LD_INT 1
38309: DOUBLE
38310: EQUAL
38311: IFTRUE 38315
38313: GO 38893
38315: POP
// begin if GetClass ( i ) = 1 then
38316: LD_VAR 0 6
38320: PPUSH
38321: CALL_OW 257
38325: PUSH
38326: LD_INT 1
38328: EQUAL
38329: IFFALSE 38350
// points := [ 10 , 5 , 3 ] ;
38331: LD_ADDR_VAR 0 9
38335: PUSH
38336: LD_INT 10
38338: PUSH
38339: LD_INT 5
38341: PUSH
38342: LD_INT 3
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38350: LD_VAR 0 6
38354: PPUSH
38355: CALL_OW 257
38359: PUSH
38360: LD_INT 2
38362: PUSH
38363: LD_INT 3
38365: PUSH
38366: LD_INT 4
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: IN
38374: IFFALSE 38395
// points := [ 3 , 2 , 1 ] ;
38376: LD_ADDR_VAR 0 9
38380: PUSH
38381: LD_INT 3
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: LIST
38394: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38395: LD_VAR 0 6
38399: PPUSH
38400: CALL_OW 257
38404: PUSH
38405: LD_INT 5
38407: EQUAL
38408: IFFALSE 38429
// points := [ 130 , 5 , 2 ] ;
38410: LD_ADDR_VAR 0 9
38414: PUSH
38415: LD_INT 130
38417: PUSH
38418: LD_INT 5
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: LIST
38428: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38429: LD_VAR 0 6
38433: PPUSH
38434: CALL_OW 257
38438: PUSH
38439: LD_INT 8
38441: EQUAL
38442: IFFALSE 38463
// points := [ 35 , 35 , 30 ] ;
38444: LD_ADDR_VAR 0 9
38448: PUSH
38449: LD_INT 35
38451: PUSH
38452: LD_INT 35
38454: PUSH
38455: LD_INT 30
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: LIST
38462: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38463: LD_VAR 0 6
38467: PPUSH
38468: CALL_OW 257
38472: PUSH
38473: LD_INT 9
38475: EQUAL
38476: IFFALSE 38497
// points := [ 20 , 55 , 40 ] ;
38478: LD_ADDR_VAR 0 9
38482: PUSH
38483: LD_INT 20
38485: PUSH
38486: LD_INT 55
38488: PUSH
38489: LD_INT 40
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: LIST
38496: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38497: LD_VAR 0 6
38501: PPUSH
38502: CALL_OW 257
38506: PUSH
38507: LD_INT 12
38509: PUSH
38510: LD_INT 16
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: IN
38517: IFFALSE 38538
// points := [ 5 , 3 , 2 ] ;
38519: LD_ADDR_VAR 0 9
38523: PUSH
38524: LD_INT 5
38526: PUSH
38527: LD_INT 3
38529: PUSH
38530: LD_INT 2
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: LIST
38537: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38538: LD_VAR 0 6
38542: PPUSH
38543: CALL_OW 257
38547: PUSH
38548: LD_INT 17
38550: EQUAL
38551: IFFALSE 38572
// points := [ 100 , 50 , 75 ] ;
38553: LD_ADDR_VAR 0 9
38557: PUSH
38558: LD_INT 100
38560: PUSH
38561: LD_INT 50
38563: PUSH
38564: LD_INT 75
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38572: LD_VAR 0 6
38576: PPUSH
38577: CALL_OW 257
38581: PUSH
38582: LD_INT 15
38584: EQUAL
38585: IFFALSE 38606
// points := [ 10 , 5 , 3 ] ;
38587: LD_ADDR_VAR 0 9
38591: PUSH
38592: LD_INT 10
38594: PUSH
38595: LD_INT 5
38597: PUSH
38598: LD_INT 3
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38606: LD_VAR 0 6
38610: PPUSH
38611: CALL_OW 257
38615: PUSH
38616: LD_INT 14
38618: EQUAL
38619: IFFALSE 38640
// points := [ 10 , 0 , 0 ] ;
38621: LD_ADDR_VAR 0 9
38625: PUSH
38626: LD_INT 10
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: LIST
38639: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38640: LD_VAR 0 6
38644: PPUSH
38645: CALL_OW 257
38649: PUSH
38650: LD_INT 11
38652: EQUAL
38653: IFFALSE 38674
// points := [ 30 , 10 , 5 ] ;
38655: LD_ADDR_VAR 0 9
38659: PUSH
38660: LD_INT 30
38662: PUSH
38663: LD_INT 10
38665: PUSH
38666: LD_INT 5
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: LIST
38673: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38674: LD_VAR 0 1
38678: PPUSH
38679: LD_INT 5
38681: PPUSH
38682: CALL_OW 321
38686: PUSH
38687: LD_INT 2
38689: EQUAL
38690: IFFALSE 38707
// bpoints := bpoints * 1.8 ;
38692: LD_ADDR_VAR 0 10
38696: PUSH
38697: LD_VAR 0 10
38701: PUSH
38702: LD_REAL  1.80000000000000E+0000
38705: MUL
38706: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38707: LD_VAR 0 6
38711: PPUSH
38712: CALL_OW 257
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: LD_INT 3
38725: PUSH
38726: LD_INT 4
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: IN
38735: PUSH
38736: LD_VAR 0 1
38740: PPUSH
38741: LD_INT 51
38743: PPUSH
38744: CALL_OW 321
38748: PUSH
38749: LD_INT 2
38751: EQUAL
38752: AND
38753: IFFALSE 38770
// bpoints := bpoints * 1.2 ;
38755: LD_ADDR_VAR 0 10
38759: PUSH
38760: LD_VAR 0 10
38764: PUSH
38765: LD_REAL  1.20000000000000E+0000
38768: MUL
38769: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38770: LD_VAR 0 6
38774: PPUSH
38775: CALL_OW 257
38779: PUSH
38780: LD_INT 5
38782: PUSH
38783: LD_INT 7
38785: PUSH
38786: LD_INT 9
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: IN
38794: PUSH
38795: LD_VAR 0 1
38799: PPUSH
38800: LD_INT 52
38802: PPUSH
38803: CALL_OW 321
38807: PUSH
38808: LD_INT 2
38810: EQUAL
38811: AND
38812: IFFALSE 38829
// bpoints := bpoints * 1.5 ;
38814: LD_ADDR_VAR 0 10
38818: PUSH
38819: LD_VAR 0 10
38823: PUSH
38824: LD_REAL  1.50000000000000E+0000
38827: MUL
38828: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38829: LD_VAR 0 1
38833: PPUSH
38834: LD_INT 66
38836: PPUSH
38837: CALL_OW 321
38841: PUSH
38842: LD_INT 2
38844: EQUAL
38845: IFFALSE 38862
// bpoints := bpoints * 1.1 ;
38847: LD_ADDR_VAR 0 10
38851: PUSH
38852: LD_VAR 0 10
38856: PUSH
38857: LD_REAL  1.10000000000000E+0000
38860: MUL
38861: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38862: LD_ADDR_VAR 0 10
38866: PUSH
38867: LD_VAR 0 10
38871: PUSH
38872: LD_VAR 0 6
38876: PPUSH
38877: LD_INT 1
38879: PPUSH
38880: CALL_OW 259
38884: PUSH
38885: LD_REAL  1.15000000000000E+0000
38888: MUL
38889: MUL
38890: ST_TO_ADDR
// end ; unit_vehicle :
38891: GO 39719
38893: LD_INT 2
38895: DOUBLE
38896: EQUAL
38897: IFTRUE 38901
38899: GO 39707
38901: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38902: LD_VAR 0 6
38906: PPUSH
38907: CALL_OW 264
38911: PUSH
38912: LD_INT 2
38914: PUSH
38915: LD_INT 42
38917: PUSH
38918: LD_INT 24
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: IN
38926: IFFALSE 38947
// points := [ 25 , 5 , 3 ] ;
38928: LD_ADDR_VAR 0 9
38932: PUSH
38933: LD_INT 25
38935: PUSH
38936: LD_INT 5
38938: PUSH
38939: LD_INT 3
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38947: LD_VAR 0 6
38951: PPUSH
38952: CALL_OW 264
38956: PUSH
38957: LD_INT 4
38959: PUSH
38960: LD_INT 43
38962: PUSH
38963: LD_INT 25
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: LIST
38970: IN
38971: IFFALSE 38992
// points := [ 40 , 15 , 5 ] ;
38973: LD_ADDR_VAR 0 9
38977: PUSH
38978: LD_INT 40
38980: PUSH
38981: LD_INT 15
38983: PUSH
38984: LD_INT 5
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: LIST
38991: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38992: LD_VAR 0 6
38996: PPUSH
38997: CALL_OW 264
39001: PUSH
39002: LD_INT 3
39004: PUSH
39005: LD_INT 23
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: IN
39012: IFFALSE 39033
// points := [ 7 , 25 , 8 ] ;
39014: LD_ADDR_VAR 0 9
39018: PUSH
39019: LD_INT 7
39021: PUSH
39022: LD_INT 25
39024: PUSH
39025: LD_INT 8
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39033: LD_VAR 0 6
39037: PPUSH
39038: CALL_OW 264
39042: PUSH
39043: LD_INT 5
39045: PUSH
39046: LD_INT 27
39048: PUSH
39049: LD_INT 44
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: IN
39057: IFFALSE 39078
// points := [ 14 , 50 , 16 ] ;
39059: LD_ADDR_VAR 0 9
39063: PUSH
39064: LD_INT 14
39066: PUSH
39067: LD_INT 50
39069: PUSH
39070: LD_INT 16
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: LIST
39077: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39078: LD_VAR 0 6
39082: PPUSH
39083: CALL_OW 264
39087: PUSH
39088: LD_INT 6
39090: PUSH
39091: LD_INT 46
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: IN
39098: IFFALSE 39119
// points := [ 32 , 120 , 70 ] ;
39100: LD_ADDR_VAR 0 9
39104: PUSH
39105: LD_INT 32
39107: PUSH
39108: LD_INT 120
39110: PUSH
39111: LD_INT 70
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: LIST
39118: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39119: LD_VAR 0 6
39123: PPUSH
39124: CALL_OW 264
39128: PUSH
39129: LD_INT 7
39131: PUSH
39132: LD_INT 28
39134: PUSH
39135: LD_INT 45
39137: PUSH
39138: LD_INT 92
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: IN
39147: IFFALSE 39168
// points := [ 35 , 20 , 45 ] ;
39149: LD_ADDR_VAR 0 9
39153: PUSH
39154: LD_INT 35
39156: PUSH
39157: LD_INT 20
39159: PUSH
39160: LD_INT 45
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: LIST
39167: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39168: LD_VAR 0 6
39172: PPUSH
39173: CALL_OW 264
39177: PUSH
39178: LD_INT 47
39180: PUSH
39181: EMPTY
39182: LIST
39183: IN
39184: IFFALSE 39205
// points := [ 67 , 45 , 75 ] ;
39186: LD_ADDR_VAR 0 9
39190: PUSH
39191: LD_INT 67
39193: PUSH
39194: LD_INT 45
39196: PUSH
39197: LD_INT 75
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: LIST
39204: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39205: LD_VAR 0 6
39209: PPUSH
39210: CALL_OW 264
39214: PUSH
39215: LD_INT 26
39217: PUSH
39218: EMPTY
39219: LIST
39220: IN
39221: IFFALSE 39242
// points := [ 120 , 30 , 80 ] ;
39223: LD_ADDR_VAR 0 9
39227: PUSH
39228: LD_INT 120
39230: PUSH
39231: LD_INT 30
39233: PUSH
39234: LD_INT 80
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: LIST
39241: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39242: LD_VAR 0 6
39246: PPUSH
39247: CALL_OW 264
39251: PUSH
39252: LD_INT 22
39254: PUSH
39255: EMPTY
39256: LIST
39257: IN
39258: IFFALSE 39279
// points := [ 40 , 1 , 1 ] ;
39260: LD_ADDR_VAR 0 9
39264: PUSH
39265: LD_INT 40
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: LIST
39278: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39279: LD_VAR 0 6
39283: PPUSH
39284: CALL_OW 264
39288: PUSH
39289: LD_INT 29
39291: PUSH
39292: EMPTY
39293: LIST
39294: IN
39295: IFFALSE 39316
// points := [ 70 , 200 , 400 ] ;
39297: LD_ADDR_VAR 0 9
39301: PUSH
39302: LD_INT 70
39304: PUSH
39305: LD_INT 200
39307: PUSH
39308: LD_INT 400
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: LIST
39315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39316: LD_VAR 0 6
39320: PPUSH
39321: CALL_OW 264
39325: PUSH
39326: LD_INT 14
39328: PUSH
39329: LD_INT 53
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: IN
39336: IFFALSE 39357
// points := [ 40 , 10 , 20 ] ;
39338: LD_ADDR_VAR 0 9
39342: PUSH
39343: LD_INT 40
39345: PUSH
39346: LD_INT 10
39348: PUSH
39349: LD_INT 20
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: LIST
39356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39357: LD_VAR 0 6
39361: PPUSH
39362: CALL_OW 264
39366: PUSH
39367: LD_INT 9
39369: PUSH
39370: EMPTY
39371: LIST
39372: IN
39373: IFFALSE 39394
// points := [ 5 , 70 , 20 ] ;
39375: LD_ADDR_VAR 0 9
39379: PUSH
39380: LD_INT 5
39382: PUSH
39383: LD_INT 70
39385: PUSH
39386: LD_INT 20
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: LIST
39393: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39394: LD_VAR 0 6
39398: PPUSH
39399: CALL_OW 264
39403: PUSH
39404: LD_INT 10
39406: PUSH
39407: EMPTY
39408: LIST
39409: IN
39410: IFFALSE 39431
// points := [ 35 , 110 , 70 ] ;
39412: LD_ADDR_VAR 0 9
39416: PUSH
39417: LD_INT 35
39419: PUSH
39420: LD_INT 110
39422: PUSH
39423: LD_INT 70
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: LIST
39430: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39431: LD_VAR 0 6
39435: PPUSH
39436: CALL_OW 265
39440: PUSH
39441: LD_INT 25
39443: EQUAL
39444: IFFALSE 39465
// points := [ 80 , 65 , 100 ] ;
39446: LD_ADDR_VAR 0 9
39450: PUSH
39451: LD_INT 80
39453: PUSH
39454: LD_INT 65
39456: PUSH
39457: LD_INT 100
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39465: LD_VAR 0 6
39469: PPUSH
39470: CALL_OW 263
39474: PUSH
39475: LD_INT 1
39477: EQUAL
39478: IFFALSE 39513
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39480: LD_ADDR_VAR 0 10
39484: PUSH
39485: LD_VAR 0 10
39489: PUSH
39490: LD_VAR 0 6
39494: PPUSH
39495: CALL_OW 311
39499: PPUSH
39500: LD_INT 3
39502: PPUSH
39503: CALL_OW 259
39507: PUSH
39508: LD_INT 4
39510: MUL
39511: MUL
39512: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39513: LD_VAR 0 6
39517: PPUSH
39518: CALL_OW 263
39522: PUSH
39523: LD_INT 2
39525: EQUAL
39526: IFFALSE 39577
// begin j := IsControledBy ( i ) ;
39528: LD_ADDR_VAR 0 7
39532: PUSH
39533: LD_VAR 0 6
39537: PPUSH
39538: CALL_OW 312
39542: ST_TO_ADDR
// if j then
39543: LD_VAR 0 7
39547: IFFALSE 39577
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39549: LD_ADDR_VAR 0 10
39553: PUSH
39554: LD_VAR 0 10
39558: PUSH
39559: LD_VAR 0 7
39563: PPUSH
39564: LD_INT 3
39566: PPUSH
39567: CALL_OW 259
39571: PUSH
39572: LD_INT 3
39574: MUL
39575: MUL
39576: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39577: LD_VAR 0 6
39581: PPUSH
39582: CALL_OW 264
39586: PUSH
39587: LD_INT 5
39589: PUSH
39590: LD_INT 6
39592: PUSH
39593: LD_INT 46
39595: PUSH
39596: LD_INT 44
39598: PUSH
39599: LD_INT 47
39601: PUSH
39602: LD_INT 45
39604: PUSH
39605: LD_INT 28
39607: PUSH
39608: LD_INT 7
39610: PUSH
39611: LD_INT 27
39613: PUSH
39614: LD_INT 29
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: IN
39629: PUSH
39630: LD_VAR 0 1
39634: PPUSH
39635: LD_INT 52
39637: PPUSH
39638: CALL_OW 321
39642: PUSH
39643: LD_INT 2
39645: EQUAL
39646: AND
39647: IFFALSE 39664
// bpoints := bpoints * 1.2 ;
39649: LD_ADDR_VAR 0 10
39653: PUSH
39654: LD_VAR 0 10
39658: PUSH
39659: LD_REAL  1.20000000000000E+0000
39662: MUL
39663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39664: LD_VAR 0 6
39668: PPUSH
39669: CALL_OW 264
39673: PUSH
39674: LD_INT 6
39676: PUSH
39677: LD_INT 46
39679: PUSH
39680: LD_INT 47
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: IN
39688: IFFALSE 39705
// bpoints := bpoints * 1.2 ;
39690: LD_ADDR_VAR 0 10
39694: PUSH
39695: LD_VAR 0 10
39699: PUSH
39700: LD_REAL  1.20000000000000E+0000
39703: MUL
39704: ST_TO_ADDR
// end ; unit_building :
39705: GO 39719
39707: LD_INT 3
39709: DOUBLE
39710: EQUAL
39711: IFTRUE 39715
39713: GO 39718
39715: POP
// ; end ;
39716: GO 39719
39718: POP
// for j = 1 to 3 do
39719: LD_ADDR_VAR 0 7
39723: PUSH
39724: DOUBLE
39725: LD_INT 1
39727: DEC
39728: ST_TO_ADDR
39729: LD_INT 3
39731: PUSH
39732: FOR_TO
39733: IFFALSE 39786
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39735: LD_ADDR_VAR 0 5
39739: PUSH
39740: LD_VAR 0 5
39744: PPUSH
39745: LD_VAR 0 7
39749: PPUSH
39750: LD_VAR 0 5
39754: PUSH
39755: LD_VAR 0 7
39759: ARRAY
39760: PUSH
39761: LD_VAR 0 9
39765: PUSH
39766: LD_VAR 0 7
39770: ARRAY
39771: PUSH
39772: LD_VAR 0 10
39776: MUL
39777: PLUS
39778: PPUSH
39779: CALL_OW 1
39783: ST_TO_ADDR
39784: GO 39732
39786: POP
39787: POP
// end ;
39788: GO 38267
39790: POP
39791: POP
// result := Replace ( result , 4 , tmp ) ;
39792: LD_ADDR_VAR 0 5
39796: PUSH
39797: LD_VAR 0 5
39801: PPUSH
39802: LD_INT 4
39804: PPUSH
39805: LD_VAR 0 8
39809: PPUSH
39810: CALL_OW 1
39814: ST_TO_ADDR
// end ;
39815: LD_VAR 0 5
39819: RET
// export function DangerAtRange ( unit , range ) ; begin
39820: LD_INT 0
39822: PPUSH
// if not unit then
39823: LD_VAR 0 1
39827: NOT
39828: IFFALSE 39832
// exit ;
39830: GO 39877
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39832: LD_ADDR_VAR 0 3
39836: PUSH
39837: LD_VAR 0 1
39841: PPUSH
39842: CALL_OW 255
39846: PPUSH
39847: LD_VAR 0 1
39851: PPUSH
39852: CALL_OW 250
39856: PPUSH
39857: LD_VAR 0 1
39861: PPUSH
39862: CALL_OW 251
39866: PPUSH
39867: LD_VAR 0 2
39871: PPUSH
39872: CALL 38119 0 4
39876: ST_TO_ADDR
// end ;
39877: LD_VAR 0 3
39881: RET
// export function DangerInArea ( side , area ) ; begin
39882: LD_INT 0
39884: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39885: LD_ADDR_VAR 0 3
39889: PUSH
39890: LD_VAR 0 2
39894: PPUSH
39895: LD_INT 81
39897: PUSH
39898: LD_VAR 0 1
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PPUSH
39907: CALL_OW 70
39911: ST_TO_ADDR
// end ;
39912: LD_VAR 0 3
39916: RET
// export function IsExtension ( b ) ; begin
39917: LD_INT 0
39919: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39920: LD_ADDR_VAR 0 2
39924: PUSH
39925: LD_VAR 0 1
39929: PUSH
39930: LD_INT 23
39932: PUSH
39933: LD_INT 20
39935: PUSH
39936: LD_INT 22
39938: PUSH
39939: LD_INT 17
39941: PUSH
39942: LD_INT 24
39944: PUSH
39945: LD_INT 21
39947: PUSH
39948: LD_INT 19
39950: PUSH
39951: LD_INT 16
39953: PUSH
39954: LD_INT 25
39956: PUSH
39957: LD_INT 18
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: IN
39972: ST_TO_ADDR
// end ;
39973: LD_VAR 0 2
39977: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39978: LD_INT 0
39980: PPUSH
39981: PPUSH
39982: PPUSH
// result := [ ] ;
39983: LD_ADDR_VAR 0 4
39987: PUSH
39988: EMPTY
39989: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39990: LD_ADDR_VAR 0 5
39994: PUSH
39995: LD_VAR 0 2
39999: PPUSH
40000: LD_INT 21
40002: PUSH
40003: LD_INT 3
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PPUSH
40010: CALL_OW 70
40014: ST_TO_ADDR
// if not tmp then
40015: LD_VAR 0 5
40019: NOT
40020: IFFALSE 40024
// exit ;
40022: GO 40088
// if checkLink then
40024: LD_VAR 0 3
40028: IFFALSE 40078
// begin for i in tmp do
40030: LD_ADDR_VAR 0 6
40034: PUSH
40035: LD_VAR 0 5
40039: PUSH
40040: FOR_IN
40041: IFFALSE 40076
// if GetBase ( i ) <> base then
40043: LD_VAR 0 6
40047: PPUSH
40048: CALL_OW 274
40052: PUSH
40053: LD_VAR 0 1
40057: NONEQUAL
40058: IFFALSE 40074
// ComLinkToBase ( base , i ) ;
40060: LD_VAR 0 1
40064: PPUSH
40065: LD_VAR 0 6
40069: PPUSH
40070: CALL_OW 169
40074: GO 40040
40076: POP
40077: POP
// end ; result := tmp ;
40078: LD_ADDR_VAR 0 4
40082: PUSH
40083: LD_VAR 0 5
40087: ST_TO_ADDR
// end ;
40088: LD_VAR 0 4
40092: RET
// export function ComComplete ( units , b ) ; var i ; begin
40093: LD_INT 0
40095: PPUSH
40096: PPUSH
// if not units then
40097: LD_VAR 0 1
40101: NOT
40102: IFFALSE 40106
// exit ;
40104: GO 40196
// for i in units do
40106: LD_ADDR_VAR 0 4
40110: PUSH
40111: LD_VAR 0 1
40115: PUSH
40116: FOR_IN
40117: IFFALSE 40194
// if BuildingStatus ( b ) = bs_build then
40119: LD_VAR 0 2
40123: PPUSH
40124: CALL_OW 461
40128: PUSH
40129: LD_INT 1
40131: EQUAL
40132: IFFALSE 40192
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40134: LD_VAR 0 4
40138: PPUSH
40139: LD_STRING h
40141: PUSH
40142: LD_VAR 0 2
40146: PPUSH
40147: CALL_OW 250
40151: PUSH
40152: LD_VAR 0 2
40156: PPUSH
40157: CALL_OW 251
40161: PUSH
40162: LD_VAR 0 2
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: PUSH
40185: EMPTY
40186: LIST
40187: PPUSH
40188: CALL_OW 446
40192: GO 40116
40194: POP
40195: POP
// end ;
40196: LD_VAR 0 3
40200: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40201: LD_INT 0
40203: PPUSH
40204: PPUSH
40205: PPUSH
40206: PPUSH
40207: PPUSH
40208: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40209: LD_VAR 0 1
40213: NOT
40214: PUSH
40215: LD_VAR 0 1
40219: PPUSH
40220: CALL_OW 263
40224: PUSH
40225: LD_INT 2
40227: NONEQUAL
40228: OR
40229: IFFALSE 40233
// exit ;
40231: GO 40549
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40233: LD_ADDR_VAR 0 6
40237: PUSH
40238: LD_INT 22
40240: PUSH
40241: LD_VAR 0 1
40245: PPUSH
40246: CALL_OW 255
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: LD_INT 30
40260: PUSH
40261: LD_INT 36
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 34
40270: PUSH
40271: LD_INT 31
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: LIST
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PPUSH
40287: CALL_OW 69
40291: ST_TO_ADDR
// if not tmp then
40292: LD_VAR 0 6
40296: NOT
40297: IFFALSE 40301
// exit ;
40299: GO 40549
// result := [ ] ;
40301: LD_ADDR_VAR 0 2
40305: PUSH
40306: EMPTY
40307: ST_TO_ADDR
// for i in tmp do
40308: LD_ADDR_VAR 0 3
40312: PUSH
40313: LD_VAR 0 6
40317: PUSH
40318: FOR_IN
40319: IFFALSE 40390
// begin t := UnitsInside ( i ) ;
40321: LD_ADDR_VAR 0 4
40325: PUSH
40326: LD_VAR 0 3
40330: PPUSH
40331: CALL_OW 313
40335: ST_TO_ADDR
// if t then
40336: LD_VAR 0 4
40340: IFFALSE 40388
// for j in t do
40342: LD_ADDR_VAR 0 7
40346: PUSH
40347: LD_VAR 0 4
40351: PUSH
40352: FOR_IN
40353: IFFALSE 40386
// result := Replace ( result , result + 1 , j ) ;
40355: LD_ADDR_VAR 0 2
40359: PUSH
40360: LD_VAR 0 2
40364: PPUSH
40365: LD_VAR 0 2
40369: PUSH
40370: LD_INT 1
40372: PLUS
40373: PPUSH
40374: LD_VAR 0 7
40378: PPUSH
40379: CALL_OW 1
40383: ST_TO_ADDR
40384: GO 40352
40386: POP
40387: POP
// end ;
40388: GO 40318
40390: POP
40391: POP
// if not result then
40392: LD_VAR 0 2
40396: NOT
40397: IFFALSE 40401
// exit ;
40399: GO 40549
// mech := result [ 1 ] ;
40401: LD_ADDR_VAR 0 5
40405: PUSH
40406: LD_VAR 0 2
40410: PUSH
40411: LD_INT 1
40413: ARRAY
40414: ST_TO_ADDR
// if result > 1 then
40415: LD_VAR 0 2
40419: PUSH
40420: LD_INT 1
40422: GREATER
40423: IFFALSE 40535
// begin for i = 2 to result do
40425: LD_ADDR_VAR 0 3
40429: PUSH
40430: DOUBLE
40431: LD_INT 2
40433: DEC
40434: ST_TO_ADDR
40435: LD_VAR 0 2
40439: PUSH
40440: FOR_TO
40441: IFFALSE 40533
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40443: LD_ADDR_VAR 0 4
40447: PUSH
40448: LD_VAR 0 2
40452: PUSH
40453: LD_VAR 0 3
40457: ARRAY
40458: PPUSH
40459: LD_INT 3
40461: PPUSH
40462: CALL_OW 259
40466: PUSH
40467: LD_VAR 0 2
40471: PUSH
40472: LD_VAR 0 3
40476: ARRAY
40477: PPUSH
40478: CALL_OW 432
40482: MINUS
40483: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40484: LD_VAR 0 4
40488: PUSH
40489: LD_VAR 0 5
40493: PPUSH
40494: LD_INT 3
40496: PPUSH
40497: CALL_OW 259
40501: PUSH
40502: LD_VAR 0 5
40506: PPUSH
40507: CALL_OW 432
40511: MINUS
40512: GREATEREQUAL
40513: IFFALSE 40531
// mech := result [ i ] ;
40515: LD_ADDR_VAR 0 5
40519: PUSH
40520: LD_VAR 0 2
40524: PUSH
40525: LD_VAR 0 3
40529: ARRAY
40530: ST_TO_ADDR
// end ;
40531: GO 40440
40533: POP
40534: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40535: LD_VAR 0 1
40539: PPUSH
40540: LD_VAR 0 5
40544: PPUSH
40545: CALL_OW 135
// end ;
40549: LD_VAR 0 2
40553: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40554: LD_INT 0
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
40566: PPUSH
40567: PPUSH
40568: PPUSH
// result := [ ] ;
40569: LD_ADDR_VAR 0 7
40573: PUSH
40574: EMPTY
40575: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40576: LD_VAR 0 1
40580: PPUSH
40581: CALL_OW 266
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: IN
40596: NOT
40597: IFFALSE 40601
// exit ;
40599: GO 42235
// if name then
40601: LD_VAR 0 3
40605: IFFALSE 40621
// SetBName ( base_dep , name ) ;
40607: LD_VAR 0 1
40611: PPUSH
40612: LD_VAR 0 3
40616: PPUSH
40617: CALL_OW 500
// base := GetBase ( base_dep ) ;
40621: LD_ADDR_VAR 0 15
40625: PUSH
40626: LD_VAR 0 1
40630: PPUSH
40631: CALL_OW 274
40635: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40636: LD_ADDR_VAR 0 16
40640: PUSH
40641: LD_VAR 0 1
40645: PPUSH
40646: CALL_OW 255
40650: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40651: LD_ADDR_VAR 0 17
40655: PUSH
40656: LD_VAR 0 1
40660: PPUSH
40661: CALL_OW 248
40665: ST_TO_ADDR
// if sources then
40666: LD_VAR 0 5
40670: IFFALSE 40717
// for i = 1 to 3 do
40672: LD_ADDR_VAR 0 8
40676: PUSH
40677: DOUBLE
40678: LD_INT 1
40680: DEC
40681: ST_TO_ADDR
40682: LD_INT 3
40684: PUSH
40685: FOR_TO
40686: IFFALSE 40715
// AddResourceType ( base , i , sources [ i ] ) ;
40688: LD_VAR 0 15
40692: PPUSH
40693: LD_VAR 0 8
40697: PPUSH
40698: LD_VAR 0 5
40702: PUSH
40703: LD_VAR 0 8
40707: ARRAY
40708: PPUSH
40709: CALL_OW 276
40713: GO 40685
40715: POP
40716: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40717: LD_ADDR_VAR 0 18
40721: PUSH
40722: LD_VAR 0 15
40726: PPUSH
40727: LD_VAR 0 2
40731: PPUSH
40732: LD_INT 1
40734: PPUSH
40735: CALL 39978 0 3
40739: ST_TO_ADDR
// InitHc ;
40740: CALL_OW 19
// InitUc ;
40744: CALL_OW 18
// uc_side := side ;
40748: LD_ADDR_OWVAR 20
40752: PUSH
40753: LD_VAR 0 16
40757: ST_TO_ADDR
// uc_nation := nation ;
40758: LD_ADDR_OWVAR 21
40762: PUSH
40763: LD_VAR 0 17
40767: ST_TO_ADDR
// if buildings then
40768: LD_VAR 0 18
40772: IFFALSE 42094
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40774: LD_ADDR_VAR 0 19
40778: PUSH
40779: LD_VAR 0 18
40783: PPUSH
40784: LD_INT 2
40786: PUSH
40787: LD_INT 30
40789: PUSH
40790: LD_INT 29
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 30
40799: PUSH
40800: LD_INT 30
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: LIST
40811: PPUSH
40812: CALL_OW 72
40816: ST_TO_ADDR
// if tmp then
40817: LD_VAR 0 19
40821: IFFALSE 40869
// for i in tmp do
40823: LD_ADDR_VAR 0 8
40827: PUSH
40828: LD_VAR 0 19
40832: PUSH
40833: FOR_IN
40834: IFFALSE 40867
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40836: LD_VAR 0 8
40840: PPUSH
40841: CALL_OW 250
40845: PPUSH
40846: LD_VAR 0 8
40850: PPUSH
40851: CALL_OW 251
40855: PPUSH
40856: LD_VAR 0 16
40860: PPUSH
40861: CALL_OW 441
40865: GO 40833
40867: POP
40868: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40869: LD_VAR 0 18
40873: PPUSH
40874: LD_INT 2
40876: PUSH
40877: LD_INT 30
40879: PUSH
40880: LD_INT 32
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 30
40889: PUSH
40890: LD_INT 33
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: LIST
40901: PPUSH
40902: CALL_OW 72
40906: IFFALSE 40994
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40908: LD_ADDR_VAR 0 8
40912: PUSH
40913: LD_VAR 0 18
40917: PPUSH
40918: LD_INT 2
40920: PUSH
40921: LD_INT 30
40923: PUSH
40924: LD_INT 32
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 30
40933: PUSH
40934: LD_INT 33
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: LIST
40945: PPUSH
40946: CALL_OW 72
40950: PUSH
40951: FOR_IN
40952: IFFALSE 40992
// begin if not GetBWeapon ( i ) then
40954: LD_VAR 0 8
40958: PPUSH
40959: CALL_OW 269
40963: NOT
40964: IFFALSE 40990
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40966: LD_VAR 0 8
40970: PPUSH
40971: LD_VAR 0 8
40975: PPUSH
40976: LD_VAR 0 2
40980: PPUSH
40981: CALL 42240 0 2
40985: PPUSH
40986: CALL_OW 431
// end ;
40990: GO 40951
40992: POP
40993: POP
// end ; for i = 1 to personel do
40994: LD_ADDR_VAR 0 8
40998: PUSH
40999: DOUBLE
41000: LD_INT 1
41002: DEC
41003: ST_TO_ADDR
41004: LD_VAR 0 6
41008: PUSH
41009: FOR_TO
41010: IFFALSE 42074
// begin if i > 4 then
41012: LD_VAR 0 8
41016: PUSH
41017: LD_INT 4
41019: GREATER
41020: IFFALSE 41024
// break ;
41022: GO 42074
// case i of 1 :
41024: LD_VAR 0 8
41028: PUSH
41029: LD_INT 1
41031: DOUBLE
41032: EQUAL
41033: IFTRUE 41037
41035: GO 41117
41037: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41038: LD_ADDR_VAR 0 12
41042: PUSH
41043: LD_VAR 0 18
41047: PPUSH
41048: LD_INT 22
41050: PUSH
41051: LD_VAR 0 16
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 58
41062: PUSH
41063: EMPTY
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: LD_INT 30
41071: PUSH
41072: LD_INT 32
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 30
41081: PUSH
41082: LD_INT 4
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 30
41091: PUSH
41092: LD_INT 5
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: LIST
41109: PPUSH
41110: CALL_OW 72
41114: ST_TO_ADDR
41115: GO 41339
41117: LD_INT 2
41119: DOUBLE
41120: EQUAL
41121: IFTRUE 41125
41123: GO 41187
41125: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41126: LD_ADDR_VAR 0 12
41130: PUSH
41131: LD_VAR 0 18
41135: PPUSH
41136: LD_INT 22
41138: PUSH
41139: LD_VAR 0 16
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 2
41150: PUSH
41151: LD_INT 30
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 30
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: LIST
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PPUSH
41180: CALL_OW 72
41184: ST_TO_ADDR
41185: GO 41339
41187: LD_INT 3
41189: DOUBLE
41190: EQUAL
41191: IFTRUE 41195
41193: GO 41257
41195: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41196: LD_ADDR_VAR 0 12
41200: PUSH
41201: LD_VAR 0 18
41205: PPUSH
41206: LD_INT 22
41208: PUSH
41209: LD_VAR 0 16
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 30
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 30
41233: PUSH
41234: LD_INT 3
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: LIST
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PPUSH
41250: CALL_OW 72
41254: ST_TO_ADDR
41255: GO 41339
41257: LD_INT 4
41259: DOUBLE
41260: EQUAL
41261: IFTRUE 41265
41263: GO 41338
41265: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41266: LD_ADDR_VAR 0 12
41270: PUSH
41271: LD_VAR 0 18
41275: PPUSH
41276: LD_INT 22
41278: PUSH
41279: LD_VAR 0 16
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 2
41290: PUSH
41291: LD_INT 30
41293: PUSH
41294: LD_INT 6
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 30
41303: PUSH
41304: LD_INT 7
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 30
41313: PUSH
41314: LD_INT 8
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PPUSH
41331: CALL_OW 72
41335: ST_TO_ADDR
41336: GO 41339
41338: POP
// if i = 1 then
41339: LD_VAR 0 8
41343: PUSH
41344: LD_INT 1
41346: EQUAL
41347: IFFALSE 41458
// begin tmp := [ ] ;
41349: LD_ADDR_VAR 0 19
41353: PUSH
41354: EMPTY
41355: ST_TO_ADDR
// for j in f do
41356: LD_ADDR_VAR 0 9
41360: PUSH
41361: LD_VAR 0 12
41365: PUSH
41366: FOR_IN
41367: IFFALSE 41440
// if GetBType ( j ) = b_bunker then
41369: LD_VAR 0 9
41373: PPUSH
41374: CALL_OW 266
41378: PUSH
41379: LD_INT 32
41381: EQUAL
41382: IFFALSE 41409
// tmp := Insert ( tmp , 1 , j ) else
41384: LD_ADDR_VAR 0 19
41388: PUSH
41389: LD_VAR 0 19
41393: PPUSH
41394: LD_INT 1
41396: PPUSH
41397: LD_VAR 0 9
41401: PPUSH
41402: CALL_OW 2
41406: ST_TO_ADDR
41407: GO 41438
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41409: LD_ADDR_VAR 0 19
41413: PUSH
41414: LD_VAR 0 19
41418: PPUSH
41419: LD_VAR 0 19
41423: PUSH
41424: LD_INT 1
41426: PLUS
41427: PPUSH
41428: LD_VAR 0 9
41432: PPUSH
41433: CALL_OW 2
41437: ST_TO_ADDR
41438: GO 41366
41440: POP
41441: POP
// if tmp then
41442: LD_VAR 0 19
41446: IFFALSE 41458
// f := tmp ;
41448: LD_ADDR_VAR 0 12
41452: PUSH
41453: LD_VAR 0 19
41457: ST_TO_ADDR
// end ; x := personel [ i ] ;
41458: LD_ADDR_VAR 0 13
41462: PUSH
41463: LD_VAR 0 6
41467: PUSH
41468: LD_VAR 0 8
41472: ARRAY
41473: ST_TO_ADDR
// if x = - 1 then
41474: LD_VAR 0 13
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: EQUAL
41483: IFFALSE 41692
// begin for j in f do
41485: LD_ADDR_VAR 0 9
41489: PUSH
41490: LD_VAR 0 12
41494: PUSH
41495: FOR_IN
41496: IFFALSE 41688
// repeat InitHc ;
41498: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41502: LD_VAR 0 9
41506: PPUSH
41507: CALL_OW 266
41511: PUSH
41512: LD_INT 5
41514: EQUAL
41515: IFFALSE 41585
// begin if UnitsInside ( j ) < 3 then
41517: LD_VAR 0 9
41521: PPUSH
41522: CALL_OW 313
41526: PUSH
41527: LD_INT 3
41529: LESS
41530: IFFALSE 41566
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41532: LD_INT 0
41534: PPUSH
41535: LD_INT 5
41537: PUSH
41538: LD_INT 8
41540: PUSH
41541: LD_INT 9
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: PUSH
41549: LD_VAR 0 17
41553: ARRAY
41554: PPUSH
41555: LD_VAR 0 4
41559: PPUSH
41560: CALL_OW 380
41564: GO 41583
// PrepareHuman ( false , i , skill ) ;
41566: LD_INT 0
41568: PPUSH
41569: LD_VAR 0 8
41573: PPUSH
41574: LD_VAR 0 4
41578: PPUSH
41579: CALL_OW 380
// end else
41583: GO 41602
// PrepareHuman ( false , i , skill ) ;
41585: LD_INT 0
41587: PPUSH
41588: LD_VAR 0 8
41592: PPUSH
41593: LD_VAR 0 4
41597: PPUSH
41598: CALL_OW 380
// un := CreateHuman ;
41602: LD_ADDR_VAR 0 14
41606: PUSH
41607: CALL_OW 44
41611: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41612: LD_ADDR_VAR 0 7
41616: PUSH
41617: LD_VAR 0 7
41621: PPUSH
41622: LD_INT 1
41624: PPUSH
41625: LD_VAR 0 14
41629: PPUSH
41630: CALL_OW 2
41634: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41635: LD_VAR 0 14
41639: PPUSH
41640: LD_VAR 0 9
41644: PPUSH
41645: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41649: LD_VAR 0 9
41653: PPUSH
41654: CALL_OW 313
41658: PUSH
41659: LD_INT 6
41661: EQUAL
41662: PUSH
41663: LD_VAR 0 9
41667: PPUSH
41668: CALL_OW 266
41672: PUSH
41673: LD_INT 32
41675: PUSH
41676: LD_INT 31
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: IN
41683: OR
41684: IFFALSE 41498
41686: GO 41495
41688: POP
41689: POP
// end else
41690: GO 42072
// for j = 1 to x do
41692: LD_ADDR_VAR 0 9
41696: PUSH
41697: DOUBLE
41698: LD_INT 1
41700: DEC
41701: ST_TO_ADDR
41702: LD_VAR 0 13
41706: PUSH
41707: FOR_TO
41708: IFFALSE 42070
// begin InitHc ;
41710: CALL_OW 19
// if not f then
41714: LD_VAR 0 12
41718: NOT
41719: IFFALSE 41808
// begin PrepareHuman ( false , i , skill ) ;
41721: LD_INT 0
41723: PPUSH
41724: LD_VAR 0 8
41728: PPUSH
41729: LD_VAR 0 4
41733: PPUSH
41734: CALL_OW 380
// un := CreateHuman ;
41738: LD_ADDR_VAR 0 14
41742: PUSH
41743: CALL_OW 44
41747: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41748: LD_ADDR_VAR 0 7
41752: PUSH
41753: LD_VAR 0 7
41757: PPUSH
41758: LD_INT 1
41760: PPUSH
41761: LD_VAR 0 14
41765: PPUSH
41766: CALL_OW 2
41770: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41771: LD_VAR 0 14
41775: PPUSH
41776: LD_VAR 0 1
41780: PPUSH
41781: CALL_OW 250
41785: PPUSH
41786: LD_VAR 0 1
41790: PPUSH
41791: CALL_OW 251
41795: PPUSH
41796: LD_INT 10
41798: PPUSH
41799: LD_INT 0
41801: PPUSH
41802: CALL_OW 50
// continue ;
41806: GO 41707
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41808: LD_VAR 0 12
41812: PUSH
41813: LD_INT 1
41815: ARRAY
41816: PPUSH
41817: CALL_OW 313
41821: PUSH
41822: LD_VAR 0 12
41826: PUSH
41827: LD_INT 1
41829: ARRAY
41830: PPUSH
41831: CALL_OW 266
41835: PUSH
41836: LD_INT 32
41838: PUSH
41839: LD_INT 31
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: IN
41846: AND
41847: PUSH
41848: LD_VAR 0 12
41852: PUSH
41853: LD_INT 1
41855: ARRAY
41856: PPUSH
41857: CALL_OW 313
41861: PUSH
41862: LD_INT 6
41864: EQUAL
41865: OR
41866: IFFALSE 41886
// f := Delete ( f , 1 ) ;
41868: LD_ADDR_VAR 0 12
41872: PUSH
41873: LD_VAR 0 12
41877: PPUSH
41878: LD_INT 1
41880: PPUSH
41881: CALL_OW 3
41885: ST_TO_ADDR
// if not f then
41886: LD_VAR 0 12
41890: NOT
41891: IFFALSE 41909
// begin x := x + 2 ;
41893: LD_ADDR_VAR 0 13
41897: PUSH
41898: LD_VAR 0 13
41902: PUSH
41903: LD_INT 2
41905: PLUS
41906: ST_TO_ADDR
// continue ;
41907: GO 41707
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41909: LD_VAR 0 12
41913: PUSH
41914: LD_INT 1
41916: ARRAY
41917: PPUSH
41918: CALL_OW 266
41922: PUSH
41923: LD_INT 5
41925: EQUAL
41926: IFFALSE 42000
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41928: LD_VAR 0 12
41932: PUSH
41933: LD_INT 1
41935: ARRAY
41936: PPUSH
41937: CALL_OW 313
41941: PUSH
41942: LD_INT 3
41944: LESS
41945: IFFALSE 41981
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41947: LD_INT 0
41949: PPUSH
41950: LD_INT 5
41952: PUSH
41953: LD_INT 8
41955: PUSH
41956: LD_INT 9
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: LIST
41963: PUSH
41964: LD_VAR 0 17
41968: ARRAY
41969: PPUSH
41970: LD_VAR 0 4
41974: PPUSH
41975: CALL_OW 380
41979: GO 41998
// PrepareHuman ( false , i , skill ) ;
41981: LD_INT 0
41983: PPUSH
41984: LD_VAR 0 8
41988: PPUSH
41989: LD_VAR 0 4
41993: PPUSH
41994: CALL_OW 380
// end else
41998: GO 42017
// PrepareHuman ( false , i , skill ) ;
42000: LD_INT 0
42002: PPUSH
42003: LD_VAR 0 8
42007: PPUSH
42008: LD_VAR 0 4
42012: PPUSH
42013: CALL_OW 380
// un := CreateHuman ;
42017: LD_ADDR_VAR 0 14
42021: PUSH
42022: CALL_OW 44
42026: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42027: LD_ADDR_VAR 0 7
42031: PUSH
42032: LD_VAR 0 7
42036: PPUSH
42037: LD_INT 1
42039: PPUSH
42040: LD_VAR 0 14
42044: PPUSH
42045: CALL_OW 2
42049: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42050: LD_VAR 0 14
42054: PPUSH
42055: LD_VAR 0 12
42059: PUSH
42060: LD_INT 1
42062: ARRAY
42063: PPUSH
42064: CALL_OW 52
// end ;
42068: GO 41707
42070: POP
42071: POP
// end ;
42072: GO 41009
42074: POP
42075: POP
// result := result ^ buildings ;
42076: LD_ADDR_VAR 0 7
42080: PUSH
42081: LD_VAR 0 7
42085: PUSH
42086: LD_VAR 0 18
42090: ADD
42091: ST_TO_ADDR
// end else
42092: GO 42235
// begin for i = 1 to personel do
42094: LD_ADDR_VAR 0 8
42098: PUSH
42099: DOUBLE
42100: LD_INT 1
42102: DEC
42103: ST_TO_ADDR
42104: LD_VAR 0 6
42108: PUSH
42109: FOR_TO
42110: IFFALSE 42233
// begin if i > 4 then
42112: LD_VAR 0 8
42116: PUSH
42117: LD_INT 4
42119: GREATER
42120: IFFALSE 42124
// break ;
42122: GO 42233
// x := personel [ i ] ;
42124: LD_ADDR_VAR 0 13
42128: PUSH
42129: LD_VAR 0 6
42133: PUSH
42134: LD_VAR 0 8
42138: ARRAY
42139: ST_TO_ADDR
// if x = - 1 then
42140: LD_VAR 0 13
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: EQUAL
42149: IFFALSE 42153
// continue ;
42151: GO 42109
// PrepareHuman ( false , i , skill ) ;
42153: LD_INT 0
42155: PPUSH
42156: LD_VAR 0 8
42160: PPUSH
42161: LD_VAR 0 4
42165: PPUSH
42166: CALL_OW 380
// un := CreateHuman ;
42170: LD_ADDR_VAR 0 14
42174: PUSH
42175: CALL_OW 44
42179: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42180: LD_VAR 0 14
42184: PPUSH
42185: LD_VAR 0 1
42189: PPUSH
42190: CALL_OW 250
42194: PPUSH
42195: LD_VAR 0 1
42199: PPUSH
42200: CALL_OW 251
42204: PPUSH
42205: LD_INT 10
42207: PPUSH
42208: LD_INT 0
42210: PPUSH
42211: CALL_OW 50
// result := result ^ un ;
42215: LD_ADDR_VAR 0 7
42219: PUSH
42220: LD_VAR 0 7
42224: PUSH
42225: LD_VAR 0 14
42229: ADD
42230: ST_TO_ADDR
// end ;
42231: GO 42109
42233: POP
42234: POP
// end ; end ;
42235: LD_VAR 0 7
42239: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42240: LD_INT 0
42242: PPUSH
42243: PPUSH
42244: PPUSH
42245: PPUSH
42246: PPUSH
42247: PPUSH
42248: PPUSH
42249: PPUSH
42250: PPUSH
42251: PPUSH
42252: PPUSH
42253: PPUSH
42254: PPUSH
42255: PPUSH
42256: PPUSH
42257: PPUSH
// result := false ;
42258: LD_ADDR_VAR 0 3
42262: PUSH
42263: LD_INT 0
42265: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42266: LD_VAR 0 1
42270: NOT
42271: PUSH
42272: LD_VAR 0 1
42276: PPUSH
42277: CALL_OW 266
42281: PUSH
42282: LD_INT 32
42284: PUSH
42285: LD_INT 33
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: IN
42292: NOT
42293: OR
42294: IFFALSE 42298
// exit ;
42296: GO 43407
// nat := GetNation ( tower ) ;
42298: LD_ADDR_VAR 0 12
42302: PUSH
42303: LD_VAR 0 1
42307: PPUSH
42308: CALL_OW 248
42312: ST_TO_ADDR
// side := GetSide ( tower ) ;
42313: LD_ADDR_VAR 0 16
42317: PUSH
42318: LD_VAR 0 1
42322: PPUSH
42323: CALL_OW 255
42327: ST_TO_ADDR
// x := GetX ( tower ) ;
42328: LD_ADDR_VAR 0 10
42332: PUSH
42333: LD_VAR 0 1
42337: PPUSH
42338: CALL_OW 250
42342: ST_TO_ADDR
// y := GetY ( tower ) ;
42343: LD_ADDR_VAR 0 11
42347: PUSH
42348: LD_VAR 0 1
42352: PPUSH
42353: CALL_OW 251
42357: ST_TO_ADDR
// if not x or not y then
42358: LD_VAR 0 10
42362: NOT
42363: PUSH
42364: LD_VAR 0 11
42368: NOT
42369: OR
42370: IFFALSE 42374
// exit ;
42372: GO 43407
// weapon := 0 ;
42374: LD_ADDR_VAR 0 18
42378: PUSH
42379: LD_INT 0
42381: ST_TO_ADDR
// fac_list := [ ] ;
42382: LD_ADDR_VAR 0 17
42386: PUSH
42387: EMPTY
42388: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42389: LD_ADDR_VAR 0 6
42393: PUSH
42394: LD_VAR 0 1
42398: PPUSH
42399: CALL_OW 274
42403: PPUSH
42404: LD_VAR 0 2
42408: PPUSH
42409: LD_INT 0
42411: PPUSH
42412: CALL 39978 0 3
42416: PPUSH
42417: LD_INT 30
42419: PUSH
42420: LD_INT 3
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PPUSH
42427: CALL_OW 72
42431: ST_TO_ADDR
// if not factories then
42432: LD_VAR 0 6
42436: NOT
42437: IFFALSE 42441
// exit ;
42439: GO 43407
// for i in factories do
42441: LD_ADDR_VAR 0 8
42445: PUSH
42446: LD_VAR 0 6
42450: PUSH
42451: FOR_IN
42452: IFFALSE 42477
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42454: LD_ADDR_VAR 0 17
42458: PUSH
42459: LD_VAR 0 17
42463: PUSH
42464: LD_VAR 0 8
42468: PPUSH
42469: CALL_OW 478
42473: UNION
42474: ST_TO_ADDR
42475: GO 42451
42477: POP
42478: POP
// if not fac_list then
42479: LD_VAR 0 17
42483: NOT
42484: IFFALSE 42488
// exit ;
42486: GO 43407
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42488: LD_ADDR_VAR 0 5
42492: PUSH
42493: LD_INT 4
42495: PUSH
42496: LD_INT 5
42498: PUSH
42499: LD_INT 9
42501: PUSH
42502: LD_INT 10
42504: PUSH
42505: LD_INT 6
42507: PUSH
42508: LD_INT 7
42510: PUSH
42511: LD_INT 11
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 27
42525: PUSH
42526: LD_INT 28
42528: PUSH
42529: LD_INT 26
42531: PUSH
42532: LD_INT 30
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 43
42543: PUSH
42544: LD_INT 44
42546: PUSH
42547: LD_INT 46
42549: PUSH
42550: LD_INT 45
42552: PUSH
42553: LD_INT 47
42555: PUSH
42556: LD_INT 49
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: LIST
42571: PUSH
42572: LD_VAR 0 12
42576: ARRAY
42577: ST_TO_ADDR
// list := list isect fac_list ;
42578: LD_ADDR_VAR 0 5
42582: PUSH
42583: LD_VAR 0 5
42587: PUSH
42588: LD_VAR 0 17
42592: ISECT
42593: ST_TO_ADDR
// if not list then
42594: LD_VAR 0 5
42598: NOT
42599: IFFALSE 42603
// exit ;
42601: GO 43407
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42603: LD_VAR 0 12
42607: PUSH
42608: LD_INT 3
42610: EQUAL
42611: PUSH
42612: LD_INT 49
42614: PUSH
42615: LD_VAR 0 5
42619: IN
42620: AND
42621: PUSH
42622: LD_INT 31
42624: PPUSH
42625: LD_VAR 0 16
42629: PPUSH
42630: CALL_OW 321
42634: PUSH
42635: LD_INT 2
42637: EQUAL
42638: AND
42639: IFFALSE 42699
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42641: LD_INT 22
42643: PUSH
42644: LD_VAR 0 16
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 35
42655: PUSH
42656: LD_INT 49
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 91
42665: PUSH
42666: LD_VAR 0 1
42670: PUSH
42671: LD_INT 10
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: LIST
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: PPUSH
42684: CALL_OW 69
42688: NOT
42689: IFFALSE 42699
// weapon := ru_time_lapser ;
42691: LD_ADDR_VAR 0 18
42695: PUSH
42696: LD_INT 49
42698: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42699: LD_VAR 0 12
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: IN
42714: PUSH
42715: LD_INT 11
42717: PUSH
42718: LD_VAR 0 5
42722: IN
42723: PUSH
42724: LD_INT 30
42726: PUSH
42727: LD_VAR 0 5
42731: IN
42732: OR
42733: AND
42734: PUSH
42735: LD_INT 6
42737: PPUSH
42738: LD_VAR 0 16
42742: PPUSH
42743: CALL_OW 321
42747: PUSH
42748: LD_INT 2
42750: EQUAL
42751: AND
42752: IFFALSE 42917
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42754: LD_INT 22
42756: PUSH
42757: LD_VAR 0 16
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: LD_INT 35
42771: PUSH
42772: LD_INT 11
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 35
42781: PUSH
42782: LD_INT 30
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 91
42796: PUSH
42797: LD_VAR 0 1
42801: PUSH
42802: LD_INT 18
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: LIST
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: LIST
42814: PPUSH
42815: CALL_OW 69
42819: NOT
42820: PUSH
42821: LD_INT 22
42823: PUSH
42824: LD_VAR 0 16
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: LD_INT 30
42838: PUSH
42839: LD_INT 32
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 30
42848: PUSH
42849: LD_INT 33
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 91
42863: PUSH
42864: LD_VAR 0 1
42868: PUSH
42869: LD_INT 12
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: LIST
42881: PUSH
42882: EMPTY
42883: LIST
42884: PPUSH
42885: CALL_OW 69
42889: PUSH
42890: LD_INT 2
42892: GREATER
42893: AND
42894: IFFALSE 42917
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42896: LD_ADDR_VAR 0 18
42900: PUSH
42901: LD_INT 11
42903: PUSH
42904: LD_INT 30
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_VAR 0 12
42915: ARRAY
42916: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42917: LD_VAR 0 18
42921: NOT
42922: PUSH
42923: LD_INT 40
42925: PPUSH
42926: LD_VAR 0 16
42930: PPUSH
42931: CALL_OW 321
42935: PUSH
42936: LD_INT 2
42938: EQUAL
42939: AND
42940: PUSH
42941: LD_INT 7
42943: PUSH
42944: LD_VAR 0 5
42948: IN
42949: PUSH
42950: LD_INT 28
42952: PUSH
42953: LD_VAR 0 5
42957: IN
42958: OR
42959: PUSH
42960: LD_INT 45
42962: PUSH
42963: LD_VAR 0 5
42967: IN
42968: OR
42969: AND
42970: IFFALSE 43224
// begin hex := GetHexInfo ( x , y ) ;
42972: LD_ADDR_VAR 0 4
42976: PUSH
42977: LD_VAR 0 10
42981: PPUSH
42982: LD_VAR 0 11
42986: PPUSH
42987: CALL_OW 546
42991: ST_TO_ADDR
// if hex [ 1 ] then
42992: LD_VAR 0 4
42996: PUSH
42997: LD_INT 1
42999: ARRAY
43000: IFFALSE 43004
// exit ;
43002: GO 43407
// height := hex [ 2 ] ;
43004: LD_ADDR_VAR 0 15
43008: PUSH
43009: LD_VAR 0 4
43013: PUSH
43014: LD_INT 2
43016: ARRAY
43017: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43018: LD_ADDR_VAR 0 14
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_INT 2
43028: PUSH
43029: LD_INT 3
43031: PUSH
43032: LD_INT 5
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: ST_TO_ADDR
// for i in tmp do
43041: LD_ADDR_VAR 0 8
43045: PUSH
43046: LD_VAR 0 14
43050: PUSH
43051: FOR_IN
43052: IFFALSE 43222
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43054: LD_ADDR_VAR 0 9
43058: PUSH
43059: LD_VAR 0 10
43063: PPUSH
43064: LD_VAR 0 8
43068: PPUSH
43069: LD_INT 5
43071: PPUSH
43072: CALL_OW 272
43076: PUSH
43077: LD_VAR 0 11
43081: PPUSH
43082: LD_VAR 0 8
43086: PPUSH
43087: LD_INT 5
43089: PPUSH
43090: CALL_OW 273
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43099: LD_VAR 0 9
43103: PUSH
43104: LD_INT 1
43106: ARRAY
43107: PPUSH
43108: LD_VAR 0 9
43112: PUSH
43113: LD_INT 2
43115: ARRAY
43116: PPUSH
43117: CALL_OW 488
43121: IFFALSE 43220
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43123: LD_ADDR_VAR 0 4
43127: PUSH
43128: LD_VAR 0 9
43132: PUSH
43133: LD_INT 1
43135: ARRAY
43136: PPUSH
43137: LD_VAR 0 9
43141: PUSH
43142: LD_INT 2
43144: ARRAY
43145: PPUSH
43146: CALL_OW 546
43150: ST_TO_ADDR
// if hex [ 1 ] then
43151: LD_VAR 0 4
43155: PUSH
43156: LD_INT 1
43158: ARRAY
43159: IFFALSE 43163
// continue ;
43161: GO 43051
// h := hex [ 2 ] ;
43163: LD_ADDR_VAR 0 13
43167: PUSH
43168: LD_VAR 0 4
43172: PUSH
43173: LD_INT 2
43175: ARRAY
43176: ST_TO_ADDR
// if h + 7 < height then
43177: LD_VAR 0 13
43181: PUSH
43182: LD_INT 7
43184: PLUS
43185: PUSH
43186: LD_VAR 0 15
43190: LESS
43191: IFFALSE 43220
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43193: LD_ADDR_VAR 0 18
43197: PUSH
43198: LD_INT 7
43200: PUSH
43201: LD_INT 28
43203: PUSH
43204: LD_INT 45
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: PUSH
43212: LD_VAR 0 12
43216: ARRAY
43217: ST_TO_ADDR
// break ;
43218: GO 43222
// end ; end ; end ;
43220: GO 43051
43222: POP
43223: POP
// end ; if not weapon then
43224: LD_VAR 0 18
43228: NOT
43229: IFFALSE 43289
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43231: LD_ADDR_VAR 0 5
43235: PUSH
43236: LD_VAR 0 5
43240: PUSH
43241: LD_INT 11
43243: PUSH
43244: LD_INT 30
43246: PUSH
43247: LD_INT 49
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: DIFF
43255: ST_TO_ADDR
// if not list then
43256: LD_VAR 0 5
43260: NOT
43261: IFFALSE 43265
// exit ;
43263: GO 43407
// weapon := list [ rand ( 1 , list ) ] ;
43265: LD_ADDR_VAR 0 18
43269: PUSH
43270: LD_VAR 0 5
43274: PUSH
43275: LD_INT 1
43277: PPUSH
43278: LD_VAR 0 5
43282: PPUSH
43283: CALL_OW 12
43287: ARRAY
43288: ST_TO_ADDR
// end ; if weapon then
43289: LD_VAR 0 18
43293: IFFALSE 43407
// begin tmp := CostOfWeapon ( weapon ) ;
43295: LD_ADDR_VAR 0 14
43299: PUSH
43300: LD_VAR 0 18
43304: PPUSH
43305: CALL_OW 451
43309: ST_TO_ADDR
// j := GetBase ( tower ) ;
43310: LD_ADDR_VAR 0 9
43314: PUSH
43315: LD_VAR 0 1
43319: PPUSH
43320: CALL_OW 274
43324: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43325: LD_VAR 0 9
43329: PPUSH
43330: LD_INT 1
43332: PPUSH
43333: CALL_OW 275
43337: PUSH
43338: LD_VAR 0 14
43342: PUSH
43343: LD_INT 1
43345: ARRAY
43346: GREATEREQUAL
43347: PUSH
43348: LD_VAR 0 9
43352: PPUSH
43353: LD_INT 2
43355: PPUSH
43356: CALL_OW 275
43360: PUSH
43361: LD_VAR 0 14
43365: PUSH
43366: LD_INT 2
43368: ARRAY
43369: GREATEREQUAL
43370: AND
43371: PUSH
43372: LD_VAR 0 9
43376: PPUSH
43377: LD_INT 3
43379: PPUSH
43380: CALL_OW 275
43384: PUSH
43385: LD_VAR 0 14
43389: PUSH
43390: LD_INT 3
43392: ARRAY
43393: GREATEREQUAL
43394: AND
43395: IFFALSE 43407
// result := weapon ;
43397: LD_ADDR_VAR 0 3
43401: PUSH
43402: LD_VAR 0 18
43406: ST_TO_ADDR
// end ; end ;
43407: LD_VAR 0 3
43411: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43412: LD_INT 0
43414: PPUSH
43415: PPUSH
// result := true ;
43416: LD_ADDR_VAR 0 3
43420: PUSH
43421: LD_INT 1
43423: ST_TO_ADDR
// if array1 = array2 then
43424: LD_VAR 0 1
43428: PUSH
43429: LD_VAR 0 2
43433: EQUAL
43434: IFFALSE 43494
// begin for i = 1 to array1 do
43436: LD_ADDR_VAR 0 4
43440: PUSH
43441: DOUBLE
43442: LD_INT 1
43444: DEC
43445: ST_TO_ADDR
43446: LD_VAR 0 1
43450: PUSH
43451: FOR_TO
43452: IFFALSE 43490
// if array1 [ i ] <> array2 [ i ] then
43454: LD_VAR 0 1
43458: PUSH
43459: LD_VAR 0 4
43463: ARRAY
43464: PUSH
43465: LD_VAR 0 2
43469: PUSH
43470: LD_VAR 0 4
43474: ARRAY
43475: NONEQUAL
43476: IFFALSE 43488
// begin result := false ;
43478: LD_ADDR_VAR 0 3
43482: PUSH
43483: LD_INT 0
43485: ST_TO_ADDR
// break ;
43486: GO 43490
// end ;
43488: GO 43451
43490: POP
43491: POP
// end else
43492: GO 43502
// result := false ;
43494: LD_ADDR_VAR 0 3
43498: PUSH
43499: LD_INT 0
43501: ST_TO_ADDR
// end ;
43502: LD_VAR 0 3
43506: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43507: LD_INT 0
43509: PPUSH
43510: PPUSH
// if not array1 or not array2 then
43511: LD_VAR 0 1
43515: NOT
43516: PUSH
43517: LD_VAR 0 2
43521: NOT
43522: OR
43523: IFFALSE 43527
// exit ;
43525: GO 43591
// result := true ;
43527: LD_ADDR_VAR 0 3
43531: PUSH
43532: LD_INT 1
43534: ST_TO_ADDR
// for i = 1 to array1 do
43535: LD_ADDR_VAR 0 4
43539: PUSH
43540: DOUBLE
43541: LD_INT 1
43543: DEC
43544: ST_TO_ADDR
43545: LD_VAR 0 1
43549: PUSH
43550: FOR_TO
43551: IFFALSE 43589
// if array1 [ i ] <> array2 [ i ] then
43553: LD_VAR 0 1
43557: PUSH
43558: LD_VAR 0 4
43562: ARRAY
43563: PUSH
43564: LD_VAR 0 2
43568: PUSH
43569: LD_VAR 0 4
43573: ARRAY
43574: NONEQUAL
43575: IFFALSE 43587
// begin result := false ;
43577: LD_ADDR_VAR 0 3
43581: PUSH
43582: LD_INT 0
43584: ST_TO_ADDR
// break ;
43585: GO 43589
// end ;
43587: GO 43550
43589: POP
43590: POP
// end ;
43591: LD_VAR 0 3
43595: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43596: LD_INT 0
43598: PPUSH
43599: PPUSH
43600: PPUSH
// pom := GetBase ( fac ) ;
43601: LD_ADDR_VAR 0 5
43605: PUSH
43606: LD_VAR 0 1
43610: PPUSH
43611: CALL_OW 274
43615: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43616: LD_ADDR_VAR 0 4
43620: PUSH
43621: LD_VAR 0 2
43625: PUSH
43626: LD_INT 1
43628: ARRAY
43629: PPUSH
43630: LD_VAR 0 2
43634: PUSH
43635: LD_INT 2
43637: ARRAY
43638: PPUSH
43639: LD_VAR 0 2
43643: PUSH
43644: LD_INT 3
43646: ARRAY
43647: PPUSH
43648: LD_VAR 0 2
43652: PUSH
43653: LD_INT 4
43655: ARRAY
43656: PPUSH
43657: CALL_OW 449
43661: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43662: LD_ADDR_VAR 0 3
43666: PUSH
43667: LD_VAR 0 5
43671: PPUSH
43672: LD_INT 1
43674: PPUSH
43675: CALL_OW 275
43679: PUSH
43680: LD_VAR 0 4
43684: PUSH
43685: LD_INT 1
43687: ARRAY
43688: GREATEREQUAL
43689: PUSH
43690: LD_VAR 0 5
43694: PPUSH
43695: LD_INT 2
43697: PPUSH
43698: CALL_OW 275
43702: PUSH
43703: LD_VAR 0 4
43707: PUSH
43708: LD_INT 2
43710: ARRAY
43711: GREATEREQUAL
43712: AND
43713: PUSH
43714: LD_VAR 0 5
43718: PPUSH
43719: LD_INT 3
43721: PPUSH
43722: CALL_OW 275
43726: PUSH
43727: LD_VAR 0 4
43731: PUSH
43732: LD_INT 3
43734: ARRAY
43735: GREATEREQUAL
43736: AND
43737: ST_TO_ADDR
// end ;
43738: LD_VAR 0 3
43742: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43743: LD_INT 0
43745: PPUSH
43746: PPUSH
43747: PPUSH
43748: PPUSH
// pom := GetBase ( building ) ;
43749: LD_ADDR_VAR 0 3
43753: PUSH
43754: LD_VAR 0 1
43758: PPUSH
43759: CALL_OW 274
43763: ST_TO_ADDR
// if not pom then
43764: LD_VAR 0 3
43768: NOT
43769: IFFALSE 43773
// exit ;
43771: GO 43943
// btype := GetBType ( building ) ;
43773: LD_ADDR_VAR 0 5
43777: PUSH
43778: LD_VAR 0 1
43782: PPUSH
43783: CALL_OW 266
43787: ST_TO_ADDR
// if btype = b_armoury then
43788: LD_VAR 0 5
43792: PUSH
43793: LD_INT 4
43795: EQUAL
43796: IFFALSE 43806
// btype := b_barracks ;
43798: LD_ADDR_VAR 0 5
43802: PUSH
43803: LD_INT 5
43805: ST_TO_ADDR
// if btype = b_depot then
43806: LD_VAR 0 5
43810: PUSH
43811: LD_INT 0
43813: EQUAL
43814: IFFALSE 43824
// btype := b_warehouse ;
43816: LD_ADDR_VAR 0 5
43820: PUSH
43821: LD_INT 1
43823: ST_TO_ADDR
// if btype = b_workshop then
43824: LD_VAR 0 5
43828: PUSH
43829: LD_INT 2
43831: EQUAL
43832: IFFALSE 43842
// btype := b_factory ;
43834: LD_ADDR_VAR 0 5
43838: PUSH
43839: LD_INT 3
43841: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43842: LD_ADDR_VAR 0 4
43846: PUSH
43847: LD_VAR 0 5
43851: PPUSH
43852: LD_VAR 0 1
43856: PPUSH
43857: CALL_OW 248
43861: PPUSH
43862: CALL_OW 450
43866: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43867: LD_ADDR_VAR 0 2
43871: PUSH
43872: LD_VAR 0 3
43876: PPUSH
43877: LD_INT 1
43879: PPUSH
43880: CALL_OW 275
43884: PUSH
43885: LD_VAR 0 4
43889: PUSH
43890: LD_INT 1
43892: ARRAY
43893: GREATEREQUAL
43894: PUSH
43895: LD_VAR 0 3
43899: PPUSH
43900: LD_INT 2
43902: PPUSH
43903: CALL_OW 275
43907: PUSH
43908: LD_VAR 0 4
43912: PUSH
43913: LD_INT 2
43915: ARRAY
43916: GREATEREQUAL
43917: AND
43918: PUSH
43919: LD_VAR 0 3
43923: PPUSH
43924: LD_INT 3
43926: PPUSH
43927: CALL_OW 275
43931: PUSH
43932: LD_VAR 0 4
43936: PUSH
43937: LD_INT 3
43939: ARRAY
43940: GREATEREQUAL
43941: AND
43942: ST_TO_ADDR
// end ;
43943: LD_VAR 0 2
43947: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43948: LD_INT 0
43950: PPUSH
43951: PPUSH
43952: PPUSH
// pom := GetBase ( building ) ;
43953: LD_ADDR_VAR 0 4
43957: PUSH
43958: LD_VAR 0 1
43962: PPUSH
43963: CALL_OW 274
43967: ST_TO_ADDR
// if not pom then
43968: LD_VAR 0 4
43972: NOT
43973: IFFALSE 43977
// exit ;
43975: GO 44078
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43977: LD_ADDR_VAR 0 5
43981: PUSH
43982: LD_VAR 0 2
43986: PPUSH
43987: LD_VAR 0 1
43991: PPUSH
43992: CALL_OW 248
43996: PPUSH
43997: CALL_OW 450
44001: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44002: LD_ADDR_VAR 0 3
44006: PUSH
44007: LD_VAR 0 4
44011: PPUSH
44012: LD_INT 1
44014: PPUSH
44015: CALL_OW 275
44019: PUSH
44020: LD_VAR 0 5
44024: PUSH
44025: LD_INT 1
44027: ARRAY
44028: GREATEREQUAL
44029: PUSH
44030: LD_VAR 0 4
44034: PPUSH
44035: LD_INT 2
44037: PPUSH
44038: CALL_OW 275
44042: PUSH
44043: LD_VAR 0 5
44047: PUSH
44048: LD_INT 2
44050: ARRAY
44051: GREATEREQUAL
44052: AND
44053: PUSH
44054: LD_VAR 0 4
44058: PPUSH
44059: LD_INT 3
44061: PPUSH
44062: CALL_OW 275
44066: PUSH
44067: LD_VAR 0 5
44071: PUSH
44072: LD_INT 3
44074: ARRAY
44075: GREATEREQUAL
44076: AND
44077: ST_TO_ADDR
// end ;
44078: LD_VAR 0 3
44082: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44083: LD_INT 0
44085: PPUSH
44086: PPUSH
44087: PPUSH
44088: PPUSH
44089: PPUSH
44090: PPUSH
44091: PPUSH
44092: PPUSH
44093: PPUSH
44094: PPUSH
44095: PPUSH
// result := false ;
44096: LD_ADDR_VAR 0 8
44100: PUSH
44101: LD_INT 0
44103: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44104: LD_VAR 0 5
44108: NOT
44109: PUSH
44110: LD_VAR 0 1
44114: NOT
44115: OR
44116: PUSH
44117: LD_VAR 0 2
44121: NOT
44122: OR
44123: PUSH
44124: LD_VAR 0 3
44128: NOT
44129: OR
44130: IFFALSE 44134
// exit ;
44132: GO 44948
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44134: LD_ADDR_VAR 0 14
44138: PUSH
44139: LD_VAR 0 1
44143: PPUSH
44144: LD_VAR 0 2
44148: PPUSH
44149: LD_VAR 0 3
44153: PPUSH
44154: LD_VAR 0 4
44158: PPUSH
44159: LD_VAR 0 5
44163: PUSH
44164: LD_INT 1
44166: ARRAY
44167: PPUSH
44168: CALL_OW 248
44172: PPUSH
44173: LD_INT 0
44175: PPUSH
44176: CALL 46201 0 6
44180: ST_TO_ADDR
// if not hexes then
44181: LD_VAR 0 14
44185: NOT
44186: IFFALSE 44190
// exit ;
44188: GO 44948
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44190: LD_ADDR_VAR 0 17
44194: PUSH
44195: LD_VAR 0 5
44199: PPUSH
44200: LD_INT 22
44202: PUSH
44203: LD_VAR 0 13
44207: PPUSH
44208: CALL_OW 255
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 2
44219: PUSH
44220: LD_INT 30
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 30
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: LIST
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PPUSH
44249: CALL_OW 72
44253: ST_TO_ADDR
// for i = 1 to hexes do
44254: LD_ADDR_VAR 0 9
44258: PUSH
44259: DOUBLE
44260: LD_INT 1
44262: DEC
44263: ST_TO_ADDR
44264: LD_VAR 0 14
44268: PUSH
44269: FOR_TO
44270: IFFALSE 44946
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44272: LD_ADDR_VAR 0 13
44276: PUSH
44277: LD_VAR 0 14
44281: PUSH
44282: LD_VAR 0 9
44286: ARRAY
44287: PUSH
44288: LD_INT 1
44290: ARRAY
44291: PPUSH
44292: LD_VAR 0 14
44296: PUSH
44297: LD_VAR 0 9
44301: ARRAY
44302: PUSH
44303: LD_INT 2
44305: ARRAY
44306: PPUSH
44307: CALL_OW 428
44311: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44312: LD_VAR 0 14
44316: PUSH
44317: LD_VAR 0 9
44321: ARRAY
44322: PUSH
44323: LD_INT 1
44325: ARRAY
44326: PPUSH
44327: LD_VAR 0 14
44331: PUSH
44332: LD_VAR 0 9
44336: ARRAY
44337: PUSH
44338: LD_INT 2
44340: ARRAY
44341: PPUSH
44342: CALL_OW 351
44346: PUSH
44347: LD_VAR 0 14
44351: PUSH
44352: LD_VAR 0 9
44356: ARRAY
44357: PUSH
44358: LD_INT 1
44360: ARRAY
44361: PPUSH
44362: LD_VAR 0 14
44366: PUSH
44367: LD_VAR 0 9
44371: ARRAY
44372: PUSH
44373: LD_INT 2
44375: ARRAY
44376: PPUSH
44377: CALL_OW 488
44381: NOT
44382: OR
44383: PUSH
44384: LD_VAR 0 13
44388: PPUSH
44389: CALL_OW 247
44393: PUSH
44394: LD_INT 3
44396: EQUAL
44397: OR
44398: IFFALSE 44404
// exit ;
44400: POP
44401: POP
44402: GO 44948
// if not tmp then
44404: LD_VAR 0 13
44408: NOT
44409: IFFALSE 44413
// continue ;
44411: GO 44269
// result := true ;
44413: LD_ADDR_VAR 0 8
44417: PUSH
44418: LD_INT 1
44420: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44421: LD_VAR 0 6
44425: PUSH
44426: LD_VAR 0 13
44430: PPUSH
44431: CALL_OW 247
44435: PUSH
44436: LD_INT 2
44438: EQUAL
44439: AND
44440: PUSH
44441: LD_VAR 0 13
44445: PPUSH
44446: CALL_OW 263
44450: PUSH
44451: LD_INT 1
44453: EQUAL
44454: AND
44455: IFFALSE 44619
// begin if IsDrivenBy ( tmp ) then
44457: LD_VAR 0 13
44461: PPUSH
44462: CALL_OW 311
44466: IFFALSE 44470
// continue ;
44468: GO 44269
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44470: LD_VAR 0 6
44474: PPUSH
44475: LD_INT 3
44477: PUSH
44478: LD_INT 60
44480: PUSH
44481: EMPTY
44482: LIST
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 3
44490: PUSH
44491: LD_INT 55
44493: PUSH
44494: EMPTY
44495: LIST
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PPUSH
44505: CALL_OW 72
44509: IFFALSE 44617
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44511: LD_ADDR_VAR 0 18
44515: PUSH
44516: LD_VAR 0 6
44520: PPUSH
44521: LD_INT 3
44523: PUSH
44524: LD_INT 60
44526: PUSH
44527: EMPTY
44528: LIST
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 3
44536: PUSH
44537: LD_INT 55
44539: PUSH
44540: EMPTY
44541: LIST
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PPUSH
44551: CALL_OW 72
44555: PUSH
44556: LD_INT 1
44558: ARRAY
44559: ST_TO_ADDR
// if IsInUnit ( driver ) then
44560: LD_VAR 0 18
44564: PPUSH
44565: CALL_OW 310
44569: IFFALSE 44580
// ComExit ( driver ) ;
44571: LD_VAR 0 18
44575: PPUSH
44576: CALL 69982 0 1
// AddComEnterUnit ( driver , tmp ) ;
44580: LD_VAR 0 18
44584: PPUSH
44585: LD_VAR 0 13
44589: PPUSH
44590: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44594: LD_VAR 0 18
44598: PPUSH
44599: LD_VAR 0 7
44603: PPUSH
44604: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44608: LD_VAR 0 18
44612: PPUSH
44613: CALL_OW 181
// end ; continue ;
44617: GO 44269
// end ; if not cleaners or not tmp in cleaners then
44619: LD_VAR 0 6
44623: NOT
44624: PUSH
44625: LD_VAR 0 13
44629: PUSH
44630: LD_VAR 0 6
44634: IN
44635: NOT
44636: OR
44637: IFFALSE 44944
// begin if dep then
44639: LD_VAR 0 17
44643: IFFALSE 44779
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44645: LD_ADDR_VAR 0 16
44649: PUSH
44650: LD_VAR 0 17
44654: PUSH
44655: LD_INT 1
44657: ARRAY
44658: PPUSH
44659: CALL_OW 250
44663: PPUSH
44664: LD_VAR 0 17
44668: PUSH
44669: LD_INT 1
44671: ARRAY
44672: PPUSH
44673: CALL_OW 254
44677: PPUSH
44678: LD_INT 5
44680: PPUSH
44681: CALL_OW 272
44685: PUSH
44686: LD_VAR 0 17
44690: PUSH
44691: LD_INT 1
44693: ARRAY
44694: PPUSH
44695: CALL_OW 251
44699: PPUSH
44700: LD_VAR 0 17
44704: PUSH
44705: LD_INT 1
44707: ARRAY
44708: PPUSH
44709: CALL_OW 254
44713: PPUSH
44714: LD_INT 5
44716: PPUSH
44717: CALL_OW 273
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44726: LD_VAR 0 16
44730: PUSH
44731: LD_INT 1
44733: ARRAY
44734: PPUSH
44735: LD_VAR 0 16
44739: PUSH
44740: LD_INT 2
44742: ARRAY
44743: PPUSH
44744: CALL_OW 488
44748: IFFALSE 44779
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44750: LD_VAR 0 13
44754: PPUSH
44755: LD_VAR 0 16
44759: PUSH
44760: LD_INT 1
44762: ARRAY
44763: PPUSH
44764: LD_VAR 0 16
44768: PUSH
44769: LD_INT 2
44771: ARRAY
44772: PPUSH
44773: CALL_OW 111
// continue ;
44777: GO 44269
// end ; end ; r := GetDir ( tmp ) ;
44779: LD_ADDR_VAR 0 15
44783: PUSH
44784: LD_VAR 0 13
44788: PPUSH
44789: CALL_OW 254
44793: ST_TO_ADDR
// if r = 5 then
44794: LD_VAR 0 15
44798: PUSH
44799: LD_INT 5
44801: EQUAL
44802: IFFALSE 44812
// r := 0 ;
44804: LD_ADDR_VAR 0 15
44808: PUSH
44809: LD_INT 0
44811: ST_TO_ADDR
// for j = r to 5 do
44812: LD_ADDR_VAR 0 10
44816: PUSH
44817: DOUBLE
44818: LD_VAR 0 15
44822: DEC
44823: ST_TO_ADDR
44824: LD_INT 5
44826: PUSH
44827: FOR_TO
44828: IFFALSE 44942
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44830: LD_ADDR_VAR 0 11
44834: PUSH
44835: LD_VAR 0 13
44839: PPUSH
44840: CALL_OW 250
44844: PPUSH
44845: LD_VAR 0 10
44849: PPUSH
44850: LD_INT 2
44852: PPUSH
44853: CALL_OW 272
44857: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44858: LD_ADDR_VAR 0 12
44862: PUSH
44863: LD_VAR 0 13
44867: PPUSH
44868: CALL_OW 251
44872: PPUSH
44873: LD_VAR 0 10
44877: PPUSH
44878: LD_INT 2
44880: PPUSH
44881: CALL_OW 273
44885: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44886: LD_VAR 0 11
44890: PPUSH
44891: LD_VAR 0 12
44895: PPUSH
44896: CALL_OW 488
44900: PUSH
44901: LD_VAR 0 11
44905: PPUSH
44906: LD_VAR 0 12
44910: PPUSH
44911: CALL_OW 428
44915: NOT
44916: AND
44917: IFFALSE 44940
// begin ComMoveXY ( tmp , _x , _y ) ;
44919: LD_VAR 0 13
44923: PPUSH
44924: LD_VAR 0 11
44928: PPUSH
44929: LD_VAR 0 12
44933: PPUSH
44934: CALL_OW 111
// break ;
44938: GO 44942
// end ; end ;
44940: GO 44827
44942: POP
44943: POP
// end ; end ;
44944: GO 44269
44946: POP
44947: POP
// end ;
44948: LD_VAR 0 8
44952: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44953: LD_INT 0
44955: PPUSH
// result := true ;
44956: LD_ADDR_VAR 0 3
44960: PUSH
44961: LD_INT 1
44963: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44964: LD_VAR 0 2
44968: PUSH
44969: LD_INT 24
44971: DOUBLE
44972: EQUAL
44973: IFTRUE 44983
44975: LD_INT 33
44977: DOUBLE
44978: EQUAL
44979: IFTRUE 44983
44981: GO 45008
44983: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44984: LD_ADDR_VAR 0 3
44988: PUSH
44989: LD_INT 32
44991: PPUSH
44992: LD_VAR 0 1
44996: PPUSH
44997: CALL_OW 321
45001: PUSH
45002: LD_INT 2
45004: EQUAL
45005: ST_TO_ADDR
45006: GO 45324
45008: LD_INT 20
45010: DOUBLE
45011: EQUAL
45012: IFTRUE 45016
45014: GO 45041
45016: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45017: LD_ADDR_VAR 0 3
45021: PUSH
45022: LD_INT 6
45024: PPUSH
45025: LD_VAR 0 1
45029: PPUSH
45030: CALL_OW 321
45034: PUSH
45035: LD_INT 2
45037: EQUAL
45038: ST_TO_ADDR
45039: GO 45324
45041: LD_INT 22
45043: DOUBLE
45044: EQUAL
45045: IFTRUE 45055
45047: LD_INT 36
45049: DOUBLE
45050: EQUAL
45051: IFTRUE 45055
45053: GO 45080
45055: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45056: LD_ADDR_VAR 0 3
45060: PUSH
45061: LD_INT 15
45063: PPUSH
45064: LD_VAR 0 1
45068: PPUSH
45069: CALL_OW 321
45073: PUSH
45074: LD_INT 2
45076: EQUAL
45077: ST_TO_ADDR
45078: GO 45324
45080: LD_INT 30
45082: DOUBLE
45083: EQUAL
45084: IFTRUE 45088
45086: GO 45113
45088: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45089: LD_ADDR_VAR 0 3
45093: PUSH
45094: LD_INT 20
45096: PPUSH
45097: LD_VAR 0 1
45101: PPUSH
45102: CALL_OW 321
45106: PUSH
45107: LD_INT 2
45109: EQUAL
45110: ST_TO_ADDR
45111: GO 45324
45113: LD_INT 28
45115: DOUBLE
45116: EQUAL
45117: IFTRUE 45127
45119: LD_INT 21
45121: DOUBLE
45122: EQUAL
45123: IFTRUE 45127
45125: GO 45152
45127: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45128: LD_ADDR_VAR 0 3
45132: PUSH
45133: LD_INT 21
45135: PPUSH
45136: LD_VAR 0 1
45140: PPUSH
45141: CALL_OW 321
45145: PUSH
45146: LD_INT 2
45148: EQUAL
45149: ST_TO_ADDR
45150: GO 45324
45152: LD_INT 16
45154: DOUBLE
45155: EQUAL
45156: IFTRUE 45160
45158: GO 45185
45160: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45161: LD_ADDR_VAR 0 3
45165: PUSH
45166: LD_INT 84
45168: PPUSH
45169: LD_VAR 0 1
45173: PPUSH
45174: CALL_OW 321
45178: PUSH
45179: LD_INT 2
45181: EQUAL
45182: ST_TO_ADDR
45183: GO 45324
45185: LD_INT 19
45187: DOUBLE
45188: EQUAL
45189: IFTRUE 45199
45191: LD_INT 23
45193: DOUBLE
45194: EQUAL
45195: IFTRUE 45199
45197: GO 45224
45199: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45200: LD_ADDR_VAR 0 3
45204: PUSH
45205: LD_INT 83
45207: PPUSH
45208: LD_VAR 0 1
45212: PPUSH
45213: CALL_OW 321
45217: PUSH
45218: LD_INT 2
45220: EQUAL
45221: ST_TO_ADDR
45222: GO 45324
45224: LD_INT 17
45226: DOUBLE
45227: EQUAL
45228: IFTRUE 45232
45230: GO 45257
45232: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45233: LD_ADDR_VAR 0 3
45237: PUSH
45238: LD_INT 39
45240: PPUSH
45241: LD_VAR 0 1
45245: PPUSH
45246: CALL_OW 321
45250: PUSH
45251: LD_INT 2
45253: EQUAL
45254: ST_TO_ADDR
45255: GO 45324
45257: LD_INT 18
45259: DOUBLE
45260: EQUAL
45261: IFTRUE 45265
45263: GO 45290
45265: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45266: LD_ADDR_VAR 0 3
45270: PUSH
45271: LD_INT 40
45273: PPUSH
45274: LD_VAR 0 1
45278: PPUSH
45279: CALL_OW 321
45283: PUSH
45284: LD_INT 2
45286: EQUAL
45287: ST_TO_ADDR
45288: GO 45324
45290: LD_INT 27
45292: DOUBLE
45293: EQUAL
45294: IFTRUE 45298
45296: GO 45323
45298: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45299: LD_ADDR_VAR 0 3
45303: PUSH
45304: LD_INT 35
45306: PPUSH
45307: LD_VAR 0 1
45311: PPUSH
45312: CALL_OW 321
45316: PUSH
45317: LD_INT 2
45319: EQUAL
45320: ST_TO_ADDR
45321: GO 45324
45323: POP
// end ;
45324: LD_VAR 0 3
45328: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45329: LD_INT 0
45331: PPUSH
45332: PPUSH
45333: PPUSH
45334: PPUSH
45335: PPUSH
45336: PPUSH
45337: PPUSH
45338: PPUSH
45339: PPUSH
45340: PPUSH
45341: PPUSH
// result := false ;
45342: LD_ADDR_VAR 0 6
45346: PUSH
45347: LD_INT 0
45349: ST_TO_ADDR
// if btype = b_depot then
45350: LD_VAR 0 2
45354: PUSH
45355: LD_INT 0
45357: EQUAL
45358: IFFALSE 45370
// begin result := true ;
45360: LD_ADDR_VAR 0 6
45364: PUSH
45365: LD_INT 1
45367: ST_TO_ADDR
// exit ;
45368: GO 46196
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45370: LD_VAR 0 1
45374: NOT
45375: PUSH
45376: LD_VAR 0 1
45380: PPUSH
45381: CALL_OW 266
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: IN
45396: NOT
45397: OR
45398: PUSH
45399: LD_VAR 0 2
45403: NOT
45404: OR
45405: PUSH
45406: LD_VAR 0 5
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: LD_INT 2
45419: PUSH
45420: LD_INT 3
45422: PUSH
45423: LD_INT 4
45425: PUSH
45426: LD_INT 5
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: IN
45437: NOT
45438: OR
45439: PUSH
45440: LD_VAR 0 3
45444: PPUSH
45445: LD_VAR 0 4
45449: PPUSH
45450: CALL_OW 488
45454: NOT
45455: OR
45456: IFFALSE 45460
// exit ;
45458: GO 46196
// side := GetSide ( depot ) ;
45460: LD_ADDR_VAR 0 9
45464: PUSH
45465: LD_VAR 0 1
45469: PPUSH
45470: CALL_OW 255
45474: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45475: LD_VAR 0 9
45479: PPUSH
45480: LD_VAR 0 2
45484: PPUSH
45485: CALL 44953 0 2
45489: NOT
45490: IFFALSE 45494
// exit ;
45492: GO 46196
// pom := GetBase ( depot ) ;
45494: LD_ADDR_VAR 0 10
45498: PUSH
45499: LD_VAR 0 1
45503: PPUSH
45504: CALL_OW 274
45508: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45509: LD_ADDR_VAR 0 11
45513: PUSH
45514: LD_VAR 0 2
45518: PPUSH
45519: LD_VAR 0 1
45523: PPUSH
45524: CALL_OW 248
45528: PPUSH
45529: CALL_OW 450
45533: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45534: LD_VAR 0 10
45538: PPUSH
45539: LD_INT 1
45541: PPUSH
45542: CALL_OW 275
45546: PUSH
45547: LD_VAR 0 11
45551: PUSH
45552: LD_INT 1
45554: ARRAY
45555: GREATEREQUAL
45556: PUSH
45557: LD_VAR 0 10
45561: PPUSH
45562: LD_INT 2
45564: PPUSH
45565: CALL_OW 275
45569: PUSH
45570: LD_VAR 0 11
45574: PUSH
45575: LD_INT 2
45577: ARRAY
45578: GREATEREQUAL
45579: AND
45580: PUSH
45581: LD_VAR 0 10
45585: PPUSH
45586: LD_INT 3
45588: PPUSH
45589: CALL_OW 275
45593: PUSH
45594: LD_VAR 0 11
45598: PUSH
45599: LD_INT 3
45601: ARRAY
45602: GREATEREQUAL
45603: AND
45604: NOT
45605: IFFALSE 45609
// exit ;
45607: GO 46196
// if GetBType ( depot ) = b_depot then
45609: LD_VAR 0 1
45613: PPUSH
45614: CALL_OW 266
45618: PUSH
45619: LD_INT 0
45621: EQUAL
45622: IFFALSE 45634
// dist := 28 else
45624: LD_ADDR_VAR 0 14
45628: PUSH
45629: LD_INT 28
45631: ST_TO_ADDR
45632: GO 45642
// dist := 36 ;
45634: LD_ADDR_VAR 0 14
45638: PUSH
45639: LD_INT 36
45641: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45642: LD_VAR 0 1
45646: PPUSH
45647: LD_VAR 0 3
45651: PPUSH
45652: LD_VAR 0 4
45656: PPUSH
45657: CALL_OW 297
45661: PUSH
45662: LD_VAR 0 14
45666: GREATER
45667: IFFALSE 45671
// exit ;
45669: GO 46196
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45671: LD_ADDR_VAR 0 12
45675: PUSH
45676: LD_VAR 0 2
45680: PPUSH
45681: LD_VAR 0 3
45685: PPUSH
45686: LD_VAR 0 4
45690: PPUSH
45691: LD_VAR 0 5
45695: PPUSH
45696: LD_VAR 0 1
45700: PPUSH
45701: CALL_OW 248
45705: PPUSH
45706: LD_INT 0
45708: PPUSH
45709: CALL 46201 0 6
45713: ST_TO_ADDR
// if not hexes then
45714: LD_VAR 0 12
45718: NOT
45719: IFFALSE 45723
// exit ;
45721: GO 46196
// hex := GetHexInfo ( x , y ) ;
45723: LD_ADDR_VAR 0 15
45727: PUSH
45728: LD_VAR 0 3
45732: PPUSH
45733: LD_VAR 0 4
45737: PPUSH
45738: CALL_OW 546
45742: ST_TO_ADDR
// if hex [ 1 ] then
45743: LD_VAR 0 15
45747: PUSH
45748: LD_INT 1
45750: ARRAY
45751: IFFALSE 45755
// exit ;
45753: GO 46196
// height := hex [ 2 ] ;
45755: LD_ADDR_VAR 0 13
45759: PUSH
45760: LD_VAR 0 15
45764: PUSH
45765: LD_INT 2
45767: ARRAY
45768: ST_TO_ADDR
// for i = 1 to hexes do
45769: LD_ADDR_VAR 0 7
45773: PUSH
45774: DOUBLE
45775: LD_INT 1
45777: DEC
45778: ST_TO_ADDR
45779: LD_VAR 0 12
45783: PUSH
45784: FOR_TO
45785: IFFALSE 46115
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45787: LD_VAR 0 12
45791: PUSH
45792: LD_VAR 0 7
45796: ARRAY
45797: PUSH
45798: LD_INT 1
45800: ARRAY
45801: PPUSH
45802: LD_VAR 0 12
45806: PUSH
45807: LD_VAR 0 7
45811: ARRAY
45812: PUSH
45813: LD_INT 2
45815: ARRAY
45816: PPUSH
45817: CALL_OW 488
45821: NOT
45822: PUSH
45823: LD_VAR 0 12
45827: PUSH
45828: LD_VAR 0 7
45832: ARRAY
45833: PUSH
45834: LD_INT 1
45836: ARRAY
45837: PPUSH
45838: LD_VAR 0 12
45842: PUSH
45843: LD_VAR 0 7
45847: ARRAY
45848: PUSH
45849: LD_INT 2
45851: ARRAY
45852: PPUSH
45853: CALL_OW 428
45857: PUSH
45858: LD_INT 0
45860: GREATER
45861: OR
45862: PUSH
45863: LD_VAR 0 12
45867: PUSH
45868: LD_VAR 0 7
45872: ARRAY
45873: PUSH
45874: LD_INT 1
45876: ARRAY
45877: PPUSH
45878: LD_VAR 0 12
45882: PUSH
45883: LD_VAR 0 7
45887: ARRAY
45888: PUSH
45889: LD_INT 2
45891: ARRAY
45892: PPUSH
45893: CALL_OW 351
45897: OR
45898: IFFALSE 45904
// exit ;
45900: POP
45901: POP
45902: GO 46196
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45904: LD_ADDR_VAR 0 8
45908: PUSH
45909: LD_VAR 0 12
45913: PUSH
45914: LD_VAR 0 7
45918: ARRAY
45919: PUSH
45920: LD_INT 1
45922: ARRAY
45923: PPUSH
45924: LD_VAR 0 12
45928: PUSH
45929: LD_VAR 0 7
45933: ARRAY
45934: PUSH
45935: LD_INT 2
45937: ARRAY
45938: PPUSH
45939: CALL_OW 546
45943: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45944: LD_VAR 0 8
45948: PUSH
45949: LD_INT 1
45951: ARRAY
45952: PUSH
45953: LD_VAR 0 8
45957: PUSH
45958: LD_INT 2
45960: ARRAY
45961: PUSH
45962: LD_VAR 0 13
45966: PUSH
45967: LD_INT 2
45969: PLUS
45970: GREATER
45971: OR
45972: PUSH
45973: LD_VAR 0 8
45977: PUSH
45978: LD_INT 2
45980: ARRAY
45981: PUSH
45982: LD_VAR 0 13
45986: PUSH
45987: LD_INT 2
45989: MINUS
45990: LESS
45991: OR
45992: PUSH
45993: LD_VAR 0 8
45997: PUSH
45998: LD_INT 3
46000: ARRAY
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 8
46007: PUSH
46008: LD_INT 9
46010: PUSH
46011: LD_INT 10
46013: PUSH
46014: LD_INT 11
46016: PUSH
46017: LD_INT 12
46019: PUSH
46020: LD_INT 13
46022: PUSH
46023: LD_INT 16
46025: PUSH
46026: LD_INT 17
46028: PUSH
46029: LD_INT 18
46031: PUSH
46032: LD_INT 19
46034: PUSH
46035: LD_INT 20
46037: PUSH
46038: LD_INT 21
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: IN
46056: NOT
46057: OR
46058: PUSH
46059: LD_VAR 0 8
46063: PUSH
46064: LD_INT 5
46066: ARRAY
46067: NOT
46068: OR
46069: PUSH
46070: LD_VAR 0 8
46074: PUSH
46075: LD_INT 6
46077: ARRAY
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: LD_INT 7
46087: PUSH
46088: LD_INT 9
46090: PUSH
46091: LD_INT 10
46093: PUSH
46094: LD_INT 11
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: IN
46105: NOT
46106: OR
46107: IFFALSE 46113
// exit ;
46109: POP
46110: POP
46111: GO 46196
// end ;
46113: GO 45784
46115: POP
46116: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46117: LD_VAR 0 9
46121: PPUSH
46122: LD_VAR 0 3
46126: PPUSH
46127: LD_VAR 0 4
46131: PPUSH
46132: LD_INT 20
46134: PPUSH
46135: CALL 38119 0 4
46139: PUSH
46140: LD_INT 4
46142: ARRAY
46143: IFFALSE 46147
// exit ;
46145: GO 46196
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46147: LD_VAR 0 2
46151: PUSH
46152: LD_INT 29
46154: PUSH
46155: LD_INT 30
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: IN
46162: PUSH
46163: LD_VAR 0 3
46167: PPUSH
46168: LD_VAR 0 4
46172: PPUSH
46173: LD_VAR 0 9
46177: PPUSH
46178: CALL_OW 440
46182: NOT
46183: AND
46184: IFFALSE 46188
// exit ;
46186: GO 46196
// result := true ;
46188: LD_ADDR_VAR 0 6
46192: PUSH
46193: LD_INT 1
46195: ST_TO_ADDR
// end ;
46196: LD_VAR 0 6
46200: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46201: LD_INT 0
46203: PPUSH
46204: PPUSH
46205: PPUSH
46206: PPUSH
46207: PPUSH
46208: PPUSH
46209: PPUSH
46210: PPUSH
46211: PPUSH
46212: PPUSH
46213: PPUSH
46214: PPUSH
46215: PPUSH
46216: PPUSH
46217: PPUSH
46218: PPUSH
46219: PPUSH
46220: PPUSH
46221: PPUSH
46222: PPUSH
46223: PPUSH
46224: PPUSH
46225: PPUSH
46226: PPUSH
46227: PPUSH
46228: PPUSH
46229: PPUSH
46230: PPUSH
46231: PPUSH
46232: PPUSH
46233: PPUSH
46234: PPUSH
46235: PPUSH
46236: PPUSH
46237: PPUSH
46238: PPUSH
46239: PPUSH
46240: PPUSH
46241: PPUSH
46242: PPUSH
46243: PPUSH
46244: PPUSH
46245: PPUSH
46246: PPUSH
46247: PPUSH
46248: PPUSH
46249: PPUSH
46250: PPUSH
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
46259: PPUSH
46260: PPUSH
// result = [ ] ;
46261: LD_ADDR_VAR 0 7
46265: PUSH
46266: EMPTY
46267: ST_TO_ADDR
// temp_list = [ ] ;
46268: LD_ADDR_VAR 0 9
46272: PUSH
46273: EMPTY
46274: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46275: LD_VAR 0 4
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: LD_INT 2
46288: PUSH
46289: LD_INT 3
46291: PUSH
46292: LD_INT 4
46294: PUSH
46295: LD_INT 5
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: IN
46306: NOT
46307: PUSH
46308: LD_VAR 0 1
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: IN
46323: PUSH
46324: LD_VAR 0 5
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 3
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: IN
46343: NOT
46344: AND
46345: OR
46346: IFFALSE 46350
// exit ;
46348: GO 64741
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46350: LD_VAR 0 1
46354: PUSH
46355: LD_INT 6
46357: PUSH
46358: LD_INT 7
46360: PUSH
46361: LD_INT 8
46363: PUSH
46364: LD_INT 13
46366: PUSH
46367: LD_INT 12
46369: PUSH
46370: LD_INT 15
46372: PUSH
46373: LD_INT 11
46375: PUSH
46376: LD_INT 14
46378: PUSH
46379: LD_INT 10
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: IN
46393: IFFALSE 46403
// btype = b_lab ;
46395: LD_ADDR_VAR 0 1
46399: PUSH
46400: LD_INT 6
46402: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46403: LD_VAR 0 6
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: LIST
46421: IN
46422: NOT
46423: PUSH
46424: LD_VAR 0 1
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: LD_INT 3
46440: PUSH
46441: LD_INT 6
46443: PUSH
46444: LD_INT 36
46446: PUSH
46447: LD_INT 4
46449: PUSH
46450: LD_INT 5
46452: PUSH
46453: LD_INT 31
46455: PUSH
46456: LD_INT 32
46458: PUSH
46459: LD_INT 33
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: IN
46475: NOT
46476: PUSH
46477: LD_VAR 0 6
46481: PUSH
46482: LD_INT 1
46484: EQUAL
46485: AND
46486: OR
46487: PUSH
46488: LD_VAR 0 1
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: LD_INT 3
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: IN
46503: NOT
46504: PUSH
46505: LD_VAR 0 6
46509: PUSH
46510: LD_INT 2
46512: EQUAL
46513: AND
46514: OR
46515: IFFALSE 46525
// mode = 0 ;
46517: LD_ADDR_VAR 0 6
46521: PUSH
46522: LD_INT 0
46524: ST_TO_ADDR
// case mode of 0 :
46525: LD_VAR 0 6
46529: PUSH
46530: LD_INT 0
46532: DOUBLE
46533: EQUAL
46534: IFTRUE 46538
46536: GO 57991
46538: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46539: LD_ADDR_VAR 0 11
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 2
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 3
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 3
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46732: LD_ADDR_VAR 0 12
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 3
46889: NEG
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 3
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46928: LD_ADDR_VAR 0 13
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: NEG
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: NEG
47076: PUSH
47077: LD_INT 3
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 3
47087: NEG
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 3
47099: NEG
47100: PUSH
47101: LD_INT 3
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47127: LD_ADDR_VAR 0 14
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: LD_INT 2
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 3
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 3
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47323: LD_ADDR_VAR 0 15
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 3
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 3
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47516: LD_ADDR_VAR 0 16
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: LD_INT 2
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: NEG
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 3
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 3
47673: PUSH
47674: LD_INT 3
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: LD_INT 3
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47709: LD_ADDR_VAR 0 17
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: NEG
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47939: LD_ADDR_VAR 0 18
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 2
48126: NEG
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: LD_INT 2
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48169: LD_ADDR_VAR 0 19
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 2
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48399: LD_ADDR_VAR 0 20
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48629: LD_ADDR_VAR 0 21
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48859: LD_ADDR_VAR 0 22
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: NEG
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49089: LD_ADDR_VAR 0 23
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: LD_INT 2
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 2
49265: NEG
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: NEG
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: LD_INT 3
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: LD_INT 3
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49369: LD_ADDR_VAR 0 24
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: LD_INT 2
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 2
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: LD_INT 2
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: NEG
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: NEG
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: NEG
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 3
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 3
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49645: LD_ADDR_VAR 0 25
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 2
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 3
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 3
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: LD_INT 3
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 3
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49919: LD_ADDR_VAR 0 26
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 2
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 2
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: LD_INT 2
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: LD_INT 2
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: NEG
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: LD_INT 3
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: LD_INT 3
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50195: LD_ADDR_VAR 0 27
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: NEG
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 3
50428: NEG
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 3
50440: NEG
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50475: LD_ADDR_VAR 0 28
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 2
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: LD_INT 3
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 3
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 3
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 3
50722: NEG
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50757: LD_ADDR_VAR 0 29
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: LD_INT 3
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 3
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 3
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 3
51001: NEG
51002: PUSH
51003: LD_INT 2
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51036: LD_ADDR_VAR 0 30
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 2
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 2
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 2
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: LD_INT 3
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: LD_INT 2
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 3
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 3
51279: NEG
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51314: LD_ADDR_VAR 0 31
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: NEG
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: LD_INT 3
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 3
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 3
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 2
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 3
51557: NEG
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51592: LD_ADDR_VAR 0 32
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: LD_INT 2
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 2
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 2
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: LD_INT 3
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 3
51804: PUSH
51805: LD_INT 2
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: LD_INT 3
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 3
51835: NEG
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51870: LD_ADDR_VAR 0 33
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 2
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: LD_INT 3
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 3
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 3
52114: NEG
52115: PUSH
52116: LD_INT 2
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52149: LD_ADDR_VAR 0 34
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: LD_INT 2
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: LD_INT 3
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: LD_INT 2
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 3
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 2
52383: NEG
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 3
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52429: LD_ADDR_VAR 0 35
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52541: LD_ADDR_VAR 0 36
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52653: LD_ADDR_VAR 0 37
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52765: LD_ADDR_VAR 0 38
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: NEG
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52877: LD_ADDR_VAR 0 39
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 2
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52989: LD_ADDR_VAR 0 40
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53101: LD_ADDR_VAR 0 41
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: NEG
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: LD_INT 2
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 2
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: LD_INT 2
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 2
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: LD_INT 3
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 3
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 3
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 3
53334: PUSH
53335: LD_INT 2
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 3
53344: PUSH
53345: LD_INT 3
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: LD_INT 3
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 3
53375: NEG
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 3
53398: NEG
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 3
53410: NEG
53411: PUSH
53412: LD_INT 3
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53451: LD_ADDR_VAR 0 42
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: LD_INT 2
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: LD_INT 2
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: NEG
53642: PUSH
53643: LD_INT 3
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: LD_INT 3
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 3
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 3
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 3
53697: PUSH
53698: LD_INT 3
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: LD_INT 3
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 3
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 3
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: LD_INT 3
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53801: LD_ADDR_VAR 0 43
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: LD_INT 2
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 2
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: LD_INT 3
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 3
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 3
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 3
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 3
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 3
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 3
54097: NEG
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54149: LD_ADDR_VAR 0 44
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: LD_INT 3
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 3
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 3
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 3
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 3
54392: PUSH
54393: LD_INT 3
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: LD_INT 3
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 3
54423: NEG
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 3
54434: NEG
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: NEG
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 3
54458: NEG
54459: PUSH
54460: LD_INT 3
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54499: LD_ADDR_VAR 0 45
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 2
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: LD_INT 3
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: LD_INT 3
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 3
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 2
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 3
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 3
54745: PUSH
54746: LD_INT 3
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: LD_INT 3
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 3
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: LD_INT 3
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 3
54796: NEG
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 3
54808: NEG
54809: PUSH
54810: LD_INT 3
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54849: LD_ADDR_VAR 0 46
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 2
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: NEG
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: LD_INT 3
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 3
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 3
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 3
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: LD_INT 3
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 3
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 2
55134: NEG
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55197: LD_ADDR_VAR 0 47
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 1
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: NEG
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55348: LD_ADDR_VAR 0 48
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: LD_INT 2
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55495: LD_ADDR_VAR 0 49
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: PUSH
55608: LD_INT 2
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: LD_INT 2
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55639: LD_ADDR_VAR 0 50
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 2
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55783: LD_ADDR_VAR 0 51
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: NEG
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55930: LD_ADDR_VAR 0 52
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56081: LD_ADDR_VAR 0 53
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56311: LD_ADDR_VAR 0 54
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 2
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: LD_INT 2
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: LD_INT 2
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56541: LD_ADDR_VAR 0 55
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56771: LD_ADDR_VAR 0 56
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 2
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 2
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 2
56947: NEG
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 2
56958: NEG
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: NEG
56971: PUSH
56972: LD_INT 2
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57001: LD_ADDR_VAR 0 57
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: LD_INT 2
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: NEG
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57231: LD_ADDR_VAR 0 58
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: LD_INT 1
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: LD_INT 2
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: LD_INT 2
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: LD_INT 2
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 2
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: NEG
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: NEG
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57461: LD_ADDR_VAR 0 59
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57549: LD_ADDR_VAR 0 60
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57637: LD_ADDR_VAR 0 61
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57725: LD_ADDR_VAR 0 62
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57813: LD_ADDR_VAR 0 63
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57901: LD_ADDR_VAR 0 64
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: ST_TO_ADDR
// end ; 1 :
57989: GO 63886
57991: LD_INT 1
57993: DOUBLE
57994: EQUAL
57995: IFTRUE 57999
57997: GO 60622
57999: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58000: LD_ADDR_VAR 0 11
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: LD_INT 3
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: LD_INT 3
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: LIST
58043: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58044: LD_ADDR_VAR 0 12
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 3
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 3
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: LIST
58084: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58085: LD_ADDR_VAR 0 13
58089: PUSH
58090: LD_INT 3
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 3
58102: PUSH
58103: LD_INT 3
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 2
58112: PUSH
58113: LD_INT 3
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: LIST
58124: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58125: LD_ADDR_VAR 0 14
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_INT 3
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: LIST
58165: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58166: LD_ADDR_VAR 0 15
58170: PUSH
58171: LD_INT 2
58173: NEG
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 3
58184: NEG
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 3
58195: NEG
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58210: LD_ADDR_VAR 0 16
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: LD_INT 3
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 3
58229: NEG
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 3
58241: NEG
58242: PUSH
58243: LD_INT 3
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: LIST
58255: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58256: LD_ADDR_VAR 0 17
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: LIST
58299: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58300: LD_ADDR_VAR 0 18
58304: PUSH
58305: LD_INT 2
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 3
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: LIST
58340: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58341: LD_ADDR_VAR 0 19
58345: PUSH
58346: LD_INT 3
58348: PUSH
58349: LD_INT 2
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 3
58358: PUSH
58359: LD_INT 3
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: LD_INT 3
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: LIST
58380: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58381: LD_ADDR_VAR 0 20
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: LD_INT 3
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: LD_INT 3
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: LD_INT 2
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: LIST
58421: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58422: LD_ADDR_VAR 0 21
58426: PUSH
58427: LD_INT 2
58429: NEG
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 3
58440: NEG
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 3
58451: NEG
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58466: LD_ADDR_VAR 0 22
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 3
58485: NEG
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 3
58497: NEG
58498: PUSH
58499: LD_INT 3
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58512: LD_ADDR_VAR 0 23
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 3
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: LD_INT 4
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: LD_INT 3
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: LIST
58555: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58556: LD_ADDR_VAR 0 24
58560: PUSH
58561: LD_INT 3
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 4
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58597: LD_ADDR_VAR 0 25
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 4
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 3
58624: PUSH
58625: LD_INT 4
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: LIST
58636: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58637: LD_ADDR_VAR 0 26
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: LD_INT 4
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: LD_INT 3
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: LIST
58677: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58678: LD_ADDR_VAR 0 27
58682: PUSH
58683: LD_INT 3
58685: NEG
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 3
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 4
58707: NEG
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: LIST
58721: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58722: LD_ADDR_VAR 0 28
58726: PUSH
58727: LD_INT 3
58729: NEG
58730: PUSH
58731: LD_INT 3
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 3
58741: NEG
58742: PUSH
58743: LD_INT 4
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 4
58753: NEG
58754: PUSH
58755: LD_INT 3
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: LIST
58767: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58768: LD_ADDR_VAR 0 29
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: LD_INT 3
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: LD_INT 4
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 4
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: LD_INT 5
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 5
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: LD_INT 4
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: LD_INT 6
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 6
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: LD_INT 5
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58923: LD_ADDR_VAR 0 30
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 3
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 3
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 3
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 4
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 4
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 4
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 5
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 5
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 5
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 6
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 6
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59066: LD_ADDR_VAR 0 31
59070: PUSH
59071: LD_INT 3
59073: PUSH
59074: LD_INT 2
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 3
59083: PUSH
59084: LD_INT 3
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: LD_INT 3
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 4
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 4
59113: PUSH
59114: LD_INT 4
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 3
59123: PUSH
59124: LD_INT 4
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 5
59133: PUSH
59134: LD_INT 4
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 5
59143: PUSH
59144: LD_INT 5
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 4
59153: PUSH
59154: LD_INT 5
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 6
59163: PUSH
59164: LD_INT 5
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 6
59173: PUSH
59174: LD_INT 6
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 5
59183: PUSH
59184: LD_INT 6
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59205: LD_ADDR_VAR 0 32
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: LD_INT 3
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: LD_INT 4
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: LD_INT 4
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 3
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: LD_INT 5
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: LD_INT 5
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: LD_INT 4
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: LD_INT 6
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 6
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: LD_INT 5
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59348: LD_ADDR_VAR 0 33
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 3
59377: NEG
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 3
59389: NEG
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 4
59400: NEG
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 4
59411: NEG
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 4
59423: NEG
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 5
59434: NEG
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 5
59445: NEG
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 5
59457: NEG
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 6
59468: NEG
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 6
59479: NEG
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59503: LD_ADDR_VAR 0 34
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: LD_INT 3
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: NEG
59535: PUSH
59536: LD_INT 3
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 3
59546: NEG
59547: PUSH
59548: LD_INT 4
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 4
59558: NEG
59559: PUSH
59560: LD_INT 3
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 4
59570: NEG
59571: PUSH
59572: LD_INT 4
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 4
59582: NEG
59583: PUSH
59584: LD_INT 5
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 5
59594: NEG
59595: PUSH
59596: LD_INT 4
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 5
59606: NEG
59607: PUSH
59608: LD_INT 5
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 5
59618: NEG
59619: PUSH
59620: LD_INT 6
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 6
59630: NEG
59631: PUSH
59632: LD_INT 5
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 6
59642: NEG
59643: PUSH
59644: LD_INT 6
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59666: LD_ADDR_VAR 0 41
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: LD_INT 3
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: LD_INT 2
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59710: LD_ADDR_VAR 0 42
59714: PUSH
59715: LD_INT 2
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 2
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 3
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: LIST
59750: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59751: LD_ADDR_VAR 0 43
59755: PUSH
59756: LD_INT 2
59758: PUSH
59759: LD_INT 2
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 3
59768: PUSH
59769: LD_INT 2
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: LD_INT 3
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: LIST
59790: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59791: LD_ADDR_VAR 0 44
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: LD_INT 2
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: LD_INT 3
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59832: LD_ADDR_VAR 0 45
59836: PUSH
59837: LD_INT 2
59839: NEG
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 2
59850: NEG
59851: PUSH
59852: LD_INT 1
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 3
59861: NEG
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: LIST
59875: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59876: LD_ADDR_VAR 0 46
59880: PUSH
59881: LD_INT 2
59883: NEG
59884: PUSH
59885: LD_INT 2
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: LD_INT 3
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 3
59907: NEG
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: LIST
59921: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59922: LD_ADDR_VAR 0 47
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: LD_INT 3
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: LD_INT 3
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59955: LD_ADDR_VAR 0 48
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59986: LD_ADDR_VAR 0 49
59990: PUSH
59991: LD_INT 3
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 3
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60015: LD_ADDR_VAR 0 50
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: LD_INT 3
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: PUSH
60033: LD_INT 3
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60044: LD_ADDR_VAR 0 51
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 2
60062: NEG
60063: PUSH
60064: LD_INT 1
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60075: LD_ADDR_VAR 0 52
60079: PUSH
60080: LD_INT 3
60082: NEG
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 3
60094: NEG
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60108: LD_ADDR_VAR 0 53
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: LD_INT 3
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: LD_INT 2
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: LIST
60151: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60152: LD_ADDR_VAR 0 54
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: LD_INT 0
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 3
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: LIST
60192: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60193: LD_ADDR_VAR 0 55
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: LD_INT 2
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 3
60210: PUSH
60211: LD_INT 3
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: LD_INT 3
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: LIST
60232: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60233: LD_ADDR_VAR 0 56
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: LD_INT 3
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: LD_INT 3
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60274: LD_ADDR_VAR 0 57
60278: PUSH
60279: LD_INT 2
60281: NEG
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 3
60292: NEG
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 3
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: LIST
60317: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60318: LD_ADDR_VAR 0 58
60322: PUSH
60323: LD_INT 2
60325: NEG
60326: PUSH
60327: LD_INT 3
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 3
60337: NEG
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 3
60349: NEG
60350: PUSH
60351: LD_INT 3
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: LIST
60363: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60364: LD_ADDR_VAR 0 59
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: LIST
60407: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60408: LD_ADDR_VAR 0 60
60412: PUSH
60413: LD_INT 1
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: LIST
60448: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60449: LD_ADDR_VAR 0 61
60453: PUSH
60454: LD_INT 2
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 2
60466: PUSH
60467: LD_INT 2
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: LD_INT 2
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: LIST
60488: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60489: LD_ADDR_VAR 0 62
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: LD_INT 2
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 2
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 1
60516: NEG
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: LIST
60529: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60530: LD_ADDR_VAR 0 63
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: NEG
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 2
60559: NEG
60560: PUSH
60561: LD_INT 1
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: LIST
60573: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60574: LD_ADDR_VAR 0 64
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: LD_INT 2
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 2
60593: NEG
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: LIST
60619: ST_TO_ADDR
// end ; 2 :
60620: GO 63886
60622: LD_INT 2
60624: DOUBLE
60625: EQUAL
60626: IFTRUE 60630
60628: GO 63885
60630: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60631: LD_ADDR_VAR 0 29
60635: PUSH
60636: LD_INT 4
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 4
60648: PUSH
60649: LD_INT 1
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 5
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 5
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 4
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 3
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 3
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 3
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 5
60721: PUSH
60722: LD_INT 2
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 3
60731: PUSH
60732: LD_INT 3
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 3
60741: PUSH
60742: LD_INT 2
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 4
60751: PUSH
60752: LD_INT 3
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 4
60761: PUSH
60762: LD_INT 4
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 3
60771: PUSH
60772: LD_INT 4
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: LD_INT 3
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 4
60801: PUSH
60802: LD_INT 2
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: LD_INT 4
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: LD_INT 4
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: LD_INT 3
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: LD_INT 4
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: LD_INT 5
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: LD_INT 5
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: LD_INT 4
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 1
60882: NEG
60883: PUSH
60884: LD_INT 3
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 2
60893: PUSH
60894: LD_INT 5
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 2
60903: NEG
60904: PUSH
60905: LD_INT 3
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 3
60925: NEG
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 2
60948: NEG
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 3
60959: NEG
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 4
60970: NEG
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 4
60981: NEG
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 4
60993: NEG
60994: PUSH
60995: LD_INT 2
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 4
61016: NEG
61017: PUSH
61018: LD_INT 4
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 4
61028: NEG
61029: PUSH
61030: LD_INT 5
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 3
61040: NEG
61041: PUSH
61042: LD_INT 4
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 3
61052: NEG
61053: PUSH
61054: LD_INT 3
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 4
61064: NEG
61065: PUSH
61066: LD_INT 3
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 5
61076: NEG
61077: PUSH
61078: LD_INT 4
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 5
61088: NEG
61089: PUSH
61090: LD_INT 5
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 3
61100: NEG
61101: PUSH
61102: LD_INT 5
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 5
61112: NEG
61113: PUSH
61114: LD_INT 3
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61169: LD_ADDR_VAR 0 30
61173: PUSH
61174: LD_INT 4
61176: PUSH
61177: LD_INT 4
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 4
61186: PUSH
61187: LD_INT 3
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 5
61196: PUSH
61197: LD_INT 4
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 5
61206: PUSH
61207: LD_INT 5
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 4
61216: PUSH
61217: LD_INT 5
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 3
61226: PUSH
61227: LD_INT 4
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 3
61236: PUSH
61237: LD_INT 3
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 5
61246: PUSH
61247: LD_INT 3
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 3
61256: PUSH
61257: LD_INT 5
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: LD_INT 3
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 1
61286: PUSH
61287: LD_INT 3
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: PUSH
61297: LD_INT 4
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: LD_INT 4
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: NEG
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 1
61327: NEG
61328: PUSH
61329: LD_INT 2
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 2
61338: PUSH
61339: LD_INT 4
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: LD_INT 2
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 4
61359: NEG
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 4
61370: NEG
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 3
61382: NEG
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 3
61393: NEG
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 4
61404: NEG
61405: PUSH
61406: LD_INT 1
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 5
61415: NEG
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 5
61426: NEG
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 5
61438: NEG
61439: PUSH
61440: LD_INT 2
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 3
61450: NEG
61451: PUSH
61452: LD_INT 2
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 3
61461: NEG
61462: PUSH
61463: LD_INT 3
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: LD_INT 4
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: LD_INT 3
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: LD_INT 2
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 3
61509: NEG
61510: PUSH
61511: LD_INT 2
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 4
61521: NEG
61522: PUSH
61523: LD_INT 3
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 4
61533: NEG
61534: PUSH
61535: LD_INT 4
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: NEG
61546: PUSH
61547: LD_INT 4
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 4
61557: NEG
61558: PUSH
61559: LD_INT 2
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 4
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: LD_INT 5
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: LD_INT 4
61594: NEG
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: LD_INT 3
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 3
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: LD_INT 4
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 5
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 2
61648: PUSH
61649: LD_INT 3
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: NEG
61660: PUSH
61661: LD_INT 5
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61716: LD_ADDR_VAR 0 31
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: LD_INT 4
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: LD_INT 3
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: LD_INT 4
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: LD_INT 5
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 0
61763: PUSH
61764: LD_INT 5
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: NEG
61774: PUSH
61775: LD_INT 4
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 1
61784: NEG
61785: PUSH
61786: LD_INT 3
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 2
61795: PUSH
61796: LD_INT 5
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 2
61805: NEG
61806: PUSH
61807: LD_INT 3
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 3
61816: NEG
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 3
61827: NEG
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 2
61839: NEG
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 2
61850: NEG
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 3
61861: NEG
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 4
61872: NEG
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 4
61883: NEG
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 4
61895: NEG
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 2
61907: NEG
61908: PUSH
61909: LD_INT 2
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 4
61918: NEG
61919: PUSH
61920: LD_INT 4
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 4
61930: NEG
61931: PUSH
61932: LD_INT 5
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 3
61942: NEG
61943: PUSH
61944: LD_INT 4
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 3
61954: NEG
61955: PUSH
61956: LD_INT 3
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 4
61966: NEG
61967: PUSH
61968: LD_INT 3
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 5
61978: NEG
61979: PUSH
61980: LD_INT 4
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 5
61990: NEG
61991: PUSH
61992: LD_INT 5
61994: NEG
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 3
62002: NEG
62003: PUSH
62004: LD_INT 5
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 5
62014: NEG
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: LD_INT 3
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 4
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: LD_INT 3
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: LD_INT 2
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: LD_INT 2
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: LD_INT 3
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: LD_INT 4
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 2
62105: PUSH
62106: LD_INT 2
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: LD_INT 4
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 4
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 4
62138: PUSH
62139: LD_INT 1
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 5
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 5
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 4
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 3
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 3
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 3
62200: PUSH
62201: LD_INT 2
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 5
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62266: LD_ADDR_VAR 0 32
62270: PUSH
62271: LD_INT 4
62273: NEG
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 4
62284: NEG
62285: PUSH
62286: LD_INT 1
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 3
62296: NEG
62297: PUSH
62298: LD_INT 0
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 3
62307: NEG
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 4
62318: NEG
62319: PUSH
62320: LD_INT 1
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 5
62329: NEG
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 5
62340: NEG
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 5
62352: NEG
62353: PUSH
62354: LD_INT 2
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 3
62364: NEG
62365: PUSH
62366: LD_INT 2
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 3
62375: NEG
62376: PUSH
62377: LD_INT 3
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 3
62387: NEG
62388: PUSH
62389: LD_INT 4
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 2
62399: NEG
62400: PUSH
62401: LD_INT 3
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 2
62411: NEG
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 3
62423: NEG
62424: PUSH
62425: LD_INT 2
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 4
62435: NEG
62436: PUSH
62437: LD_INT 3
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 4
62447: NEG
62448: PUSH
62449: LD_INT 4
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 2
62459: NEG
62460: PUSH
62461: LD_INT 4
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 4
62471: NEG
62472: PUSH
62473: LD_INT 2
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: LD_INT 4
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: LD_INT 5
62497: NEG
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: LD_INT 4
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 1
62516: PUSH
62517: LD_INT 3
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: LD_INT 3
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: LD_INT 4
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: LD_INT 5
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 2
62562: PUSH
62563: LD_INT 3
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 2
62573: NEG
62574: PUSH
62575: LD_INT 5
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 3
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 3
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 4
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 4
62616: PUSH
62617: LD_INT 1
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 3
62626: PUSH
62627: LD_INT 1
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 2
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 2
62646: PUSH
62647: LD_INT 1
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 2
62657: PUSH
62658: LD_INT 2
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 4
62668: PUSH
62669: LD_INT 2
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 4
62678: PUSH
62679: LD_INT 4
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 4
62688: PUSH
62689: LD_INT 3
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 5
62698: PUSH
62699: LD_INT 4
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 5
62708: PUSH
62709: LD_INT 5
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 4
62718: PUSH
62719: LD_INT 5
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 3
62728: PUSH
62729: LD_INT 4
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 3
62738: PUSH
62739: LD_INT 3
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 5
62748: PUSH
62749: LD_INT 3
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 3
62758: PUSH
62759: LD_INT 5
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62813: LD_ADDR_VAR 0 33
62817: PUSH
62818: LD_INT 4
62820: NEG
62821: PUSH
62822: LD_INT 4
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 4
62832: NEG
62833: PUSH
62834: LD_INT 5
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 3
62844: NEG
62845: PUSH
62846: LD_INT 4
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 3
62856: NEG
62857: PUSH
62858: LD_INT 3
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 4
62868: NEG
62869: PUSH
62870: LD_INT 3
62872: NEG
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 5
62880: NEG
62881: PUSH
62882: LD_INT 4
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 5
62892: NEG
62893: PUSH
62894: LD_INT 5
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 3
62904: NEG
62905: PUSH
62906: LD_INT 5
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 5
62916: NEG
62917: PUSH
62918: LD_INT 3
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: LD_INT 3
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: LD_INT 4
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 1
62950: PUSH
62951: LD_INT 3
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 1
62961: PUSH
62962: LD_INT 2
62964: NEG
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: LD_INT 2
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: LD_INT 3
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 1
62995: NEG
62996: PUSH
62997: LD_INT 4
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 2
63007: PUSH
63008: LD_INT 2
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 2
63018: NEG
63019: PUSH
63020: LD_INT 4
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 4
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 4
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 5
63051: PUSH
63052: LD_INT 0
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 5
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 4
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 3
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 3
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 3
63102: PUSH
63103: LD_INT 2
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 5
63113: PUSH
63114: LD_INT 2
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 3
63123: PUSH
63124: LD_INT 3
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 3
63133: PUSH
63134: LD_INT 2
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 4
63143: PUSH
63144: LD_INT 3
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 4
63153: PUSH
63154: LD_INT 4
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 3
63163: PUSH
63164: LD_INT 4
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: LD_INT 3
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 2
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 4
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 2
63203: PUSH
63204: LD_INT 4
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_INT 4
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 0
63223: PUSH
63224: LD_INT 3
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 1
63233: PUSH
63234: LD_INT 4
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 1
63243: PUSH
63244: LD_INT 5
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: LD_INT 5
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: LD_INT 4
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: LD_INT 3
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 2
63285: PUSH
63286: LD_INT 5
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 2
63295: NEG
63296: PUSH
63297: LD_INT 3
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63351: LD_ADDR_VAR 0 34
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 4
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 0
63369: PUSH
63370: LD_INT 5
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: PUSH
63381: LD_INT 4
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: LD_INT 3
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: LD_INT 3
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: LD_INT 4
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: LD_INT 5
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: LD_INT 3
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 2
63448: NEG
63449: PUSH
63450: LD_INT 5
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 3
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 3
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 4
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 4
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 3
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 2
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 2
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 2
63532: PUSH
63533: LD_INT 2
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 4
63543: PUSH
63544: LD_INT 2
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 4
63553: PUSH
63554: LD_INT 4
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 4
63563: PUSH
63564: LD_INT 3
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 5
63573: PUSH
63574: LD_INT 4
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 5
63583: PUSH
63584: LD_INT 5
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 4
63593: PUSH
63594: LD_INT 5
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 3
63603: PUSH
63604: LD_INT 4
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 3
63613: PUSH
63614: LD_INT 3
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 5
63623: PUSH
63624: LD_INT 3
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 3
63633: PUSH
63634: LD_INT 5
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: LD_INT 3
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: LD_INT 2
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 3
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: LD_INT 4
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: LD_INT 4
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: LD_INT 3
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: LD_INT 2
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 2
63715: PUSH
63716: LD_INT 4
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 2
63725: NEG
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 4
63736: NEG
63737: PUSH
63738: LD_INT 0
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 4
63747: NEG
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 3
63759: NEG
63760: PUSH
63761: LD_INT 0
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 3
63770: NEG
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 4
63781: NEG
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 5
63792: NEG
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 5
63803: NEG
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 5
63815: NEG
63816: PUSH
63817: LD_INT 2
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 3
63827: NEG
63828: PUSH
63829: LD_INT 2
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: ST_TO_ADDR
// end ; end ;
63883: GO 63886
63885: POP
// case btype of b_depot , b_warehouse :
63886: LD_VAR 0 1
63890: PUSH
63891: LD_INT 0
63893: DOUBLE
63894: EQUAL
63895: IFTRUE 63905
63897: LD_INT 1
63899: DOUBLE
63900: EQUAL
63901: IFTRUE 63905
63903: GO 64106
63905: POP
// case nation of nation_american :
63906: LD_VAR 0 5
63910: PUSH
63911: LD_INT 1
63913: DOUBLE
63914: EQUAL
63915: IFTRUE 63919
63917: GO 63975
63919: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63920: LD_ADDR_VAR 0 9
63924: PUSH
63925: LD_VAR 0 11
63929: PUSH
63930: LD_VAR 0 12
63934: PUSH
63935: LD_VAR 0 13
63939: PUSH
63940: LD_VAR 0 14
63944: PUSH
63945: LD_VAR 0 15
63949: PUSH
63950: LD_VAR 0 16
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: PUSH
63963: LD_VAR 0 4
63967: PUSH
63968: LD_INT 1
63970: PLUS
63971: ARRAY
63972: ST_TO_ADDR
63973: GO 64104
63975: LD_INT 2
63977: DOUBLE
63978: EQUAL
63979: IFTRUE 63983
63981: GO 64039
63983: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63984: LD_ADDR_VAR 0 9
63988: PUSH
63989: LD_VAR 0 17
63993: PUSH
63994: LD_VAR 0 18
63998: PUSH
63999: LD_VAR 0 19
64003: PUSH
64004: LD_VAR 0 20
64008: PUSH
64009: LD_VAR 0 21
64013: PUSH
64014: LD_VAR 0 22
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: PUSH
64027: LD_VAR 0 4
64031: PUSH
64032: LD_INT 1
64034: PLUS
64035: ARRAY
64036: ST_TO_ADDR
64037: GO 64104
64039: LD_INT 3
64041: DOUBLE
64042: EQUAL
64043: IFTRUE 64047
64045: GO 64103
64047: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64048: LD_ADDR_VAR 0 9
64052: PUSH
64053: LD_VAR 0 23
64057: PUSH
64058: LD_VAR 0 24
64062: PUSH
64063: LD_VAR 0 25
64067: PUSH
64068: LD_VAR 0 26
64072: PUSH
64073: LD_VAR 0 27
64077: PUSH
64078: LD_VAR 0 28
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: PUSH
64091: LD_VAR 0 4
64095: PUSH
64096: LD_INT 1
64098: PLUS
64099: ARRAY
64100: ST_TO_ADDR
64101: GO 64104
64103: POP
64104: GO 64659
64106: LD_INT 2
64108: DOUBLE
64109: EQUAL
64110: IFTRUE 64120
64112: LD_INT 3
64114: DOUBLE
64115: EQUAL
64116: IFTRUE 64120
64118: GO 64176
64120: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64121: LD_ADDR_VAR 0 9
64125: PUSH
64126: LD_VAR 0 29
64130: PUSH
64131: LD_VAR 0 30
64135: PUSH
64136: LD_VAR 0 31
64140: PUSH
64141: LD_VAR 0 32
64145: PUSH
64146: LD_VAR 0 33
64150: PUSH
64151: LD_VAR 0 34
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: PUSH
64164: LD_VAR 0 4
64168: PUSH
64169: LD_INT 1
64171: PLUS
64172: ARRAY
64173: ST_TO_ADDR
64174: GO 64659
64176: LD_INT 16
64178: DOUBLE
64179: EQUAL
64180: IFTRUE 64238
64182: LD_INT 17
64184: DOUBLE
64185: EQUAL
64186: IFTRUE 64238
64188: LD_INT 18
64190: DOUBLE
64191: EQUAL
64192: IFTRUE 64238
64194: LD_INT 19
64196: DOUBLE
64197: EQUAL
64198: IFTRUE 64238
64200: LD_INT 22
64202: DOUBLE
64203: EQUAL
64204: IFTRUE 64238
64206: LD_INT 20
64208: DOUBLE
64209: EQUAL
64210: IFTRUE 64238
64212: LD_INT 21
64214: DOUBLE
64215: EQUAL
64216: IFTRUE 64238
64218: LD_INT 23
64220: DOUBLE
64221: EQUAL
64222: IFTRUE 64238
64224: LD_INT 24
64226: DOUBLE
64227: EQUAL
64228: IFTRUE 64238
64230: LD_INT 25
64232: DOUBLE
64233: EQUAL
64234: IFTRUE 64238
64236: GO 64294
64238: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64239: LD_ADDR_VAR 0 9
64243: PUSH
64244: LD_VAR 0 35
64248: PUSH
64249: LD_VAR 0 36
64253: PUSH
64254: LD_VAR 0 37
64258: PUSH
64259: LD_VAR 0 38
64263: PUSH
64264: LD_VAR 0 39
64268: PUSH
64269: LD_VAR 0 40
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: PUSH
64282: LD_VAR 0 4
64286: PUSH
64287: LD_INT 1
64289: PLUS
64290: ARRAY
64291: ST_TO_ADDR
64292: GO 64659
64294: LD_INT 6
64296: DOUBLE
64297: EQUAL
64298: IFTRUE 64350
64300: LD_INT 7
64302: DOUBLE
64303: EQUAL
64304: IFTRUE 64350
64306: LD_INT 8
64308: DOUBLE
64309: EQUAL
64310: IFTRUE 64350
64312: LD_INT 13
64314: DOUBLE
64315: EQUAL
64316: IFTRUE 64350
64318: LD_INT 12
64320: DOUBLE
64321: EQUAL
64322: IFTRUE 64350
64324: LD_INT 15
64326: DOUBLE
64327: EQUAL
64328: IFTRUE 64350
64330: LD_INT 11
64332: DOUBLE
64333: EQUAL
64334: IFTRUE 64350
64336: LD_INT 14
64338: DOUBLE
64339: EQUAL
64340: IFTRUE 64350
64342: LD_INT 10
64344: DOUBLE
64345: EQUAL
64346: IFTRUE 64350
64348: GO 64406
64350: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64351: LD_ADDR_VAR 0 9
64355: PUSH
64356: LD_VAR 0 41
64360: PUSH
64361: LD_VAR 0 42
64365: PUSH
64366: LD_VAR 0 43
64370: PUSH
64371: LD_VAR 0 44
64375: PUSH
64376: LD_VAR 0 45
64380: PUSH
64381: LD_VAR 0 46
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: PUSH
64394: LD_VAR 0 4
64398: PUSH
64399: LD_INT 1
64401: PLUS
64402: ARRAY
64403: ST_TO_ADDR
64404: GO 64659
64406: LD_INT 36
64408: DOUBLE
64409: EQUAL
64410: IFTRUE 64414
64412: GO 64470
64414: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64415: LD_ADDR_VAR 0 9
64419: PUSH
64420: LD_VAR 0 47
64424: PUSH
64425: LD_VAR 0 48
64429: PUSH
64430: LD_VAR 0 49
64434: PUSH
64435: LD_VAR 0 50
64439: PUSH
64440: LD_VAR 0 51
64444: PUSH
64445: LD_VAR 0 52
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: PUSH
64458: LD_VAR 0 4
64462: PUSH
64463: LD_INT 1
64465: PLUS
64466: ARRAY
64467: ST_TO_ADDR
64468: GO 64659
64470: LD_INT 4
64472: DOUBLE
64473: EQUAL
64474: IFTRUE 64496
64476: LD_INT 5
64478: DOUBLE
64479: EQUAL
64480: IFTRUE 64496
64482: LD_INT 34
64484: DOUBLE
64485: EQUAL
64486: IFTRUE 64496
64488: LD_INT 37
64490: DOUBLE
64491: EQUAL
64492: IFTRUE 64496
64494: GO 64552
64496: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64497: LD_ADDR_VAR 0 9
64501: PUSH
64502: LD_VAR 0 53
64506: PUSH
64507: LD_VAR 0 54
64511: PUSH
64512: LD_VAR 0 55
64516: PUSH
64517: LD_VAR 0 56
64521: PUSH
64522: LD_VAR 0 57
64526: PUSH
64527: LD_VAR 0 58
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: PUSH
64540: LD_VAR 0 4
64544: PUSH
64545: LD_INT 1
64547: PLUS
64548: ARRAY
64549: ST_TO_ADDR
64550: GO 64659
64552: LD_INT 31
64554: DOUBLE
64555: EQUAL
64556: IFTRUE 64602
64558: LD_INT 32
64560: DOUBLE
64561: EQUAL
64562: IFTRUE 64602
64564: LD_INT 33
64566: DOUBLE
64567: EQUAL
64568: IFTRUE 64602
64570: LD_INT 27
64572: DOUBLE
64573: EQUAL
64574: IFTRUE 64602
64576: LD_INT 26
64578: DOUBLE
64579: EQUAL
64580: IFTRUE 64602
64582: LD_INT 28
64584: DOUBLE
64585: EQUAL
64586: IFTRUE 64602
64588: LD_INT 29
64590: DOUBLE
64591: EQUAL
64592: IFTRUE 64602
64594: LD_INT 30
64596: DOUBLE
64597: EQUAL
64598: IFTRUE 64602
64600: GO 64658
64602: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64603: LD_ADDR_VAR 0 9
64607: PUSH
64608: LD_VAR 0 59
64612: PUSH
64613: LD_VAR 0 60
64617: PUSH
64618: LD_VAR 0 61
64622: PUSH
64623: LD_VAR 0 62
64627: PUSH
64628: LD_VAR 0 63
64632: PUSH
64633: LD_VAR 0 64
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: PUSH
64646: LD_VAR 0 4
64650: PUSH
64651: LD_INT 1
64653: PLUS
64654: ARRAY
64655: ST_TO_ADDR
64656: GO 64659
64658: POP
// temp_list2 = [ ] ;
64659: LD_ADDR_VAR 0 10
64663: PUSH
64664: EMPTY
64665: ST_TO_ADDR
// for i in temp_list do
64666: LD_ADDR_VAR 0 8
64670: PUSH
64671: LD_VAR 0 9
64675: PUSH
64676: FOR_IN
64677: IFFALSE 64729
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64679: LD_ADDR_VAR 0 10
64683: PUSH
64684: LD_VAR 0 10
64688: PUSH
64689: LD_VAR 0 8
64693: PUSH
64694: LD_INT 1
64696: ARRAY
64697: PUSH
64698: LD_VAR 0 2
64702: PLUS
64703: PUSH
64704: LD_VAR 0 8
64708: PUSH
64709: LD_INT 2
64711: ARRAY
64712: PUSH
64713: LD_VAR 0 3
64717: PLUS
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: EMPTY
64724: LIST
64725: ADD
64726: ST_TO_ADDR
64727: GO 64676
64729: POP
64730: POP
// result = temp_list2 ;
64731: LD_ADDR_VAR 0 7
64735: PUSH
64736: LD_VAR 0 10
64740: ST_TO_ADDR
// end ;
64741: LD_VAR 0 7
64745: RET
// export function EnemyInRange ( unit , dist ) ; begin
64746: LD_INT 0
64748: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64749: LD_ADDR_VAR 0 3
64753: PUSH
64754: LD_VAR 0 1
64758: PPUSH
64759: CALL_OW 255
64763: PPUSH
64764: LD_VAR 0 1
64768: PPUSH
64769: CALL_OW 250
64773: PPUSH
64774: LD_VAR 0 1
64778: PPUSH
64779: CALL_OW 251
64783: PPUSH
64784: LD_VAR 0 2
64788: PPUSH
64789: CALL 38119 0 4
64793: PUSH
64794: LD_INT 4
64796: ARRAY
64797: ST_TO_ADDR
// end ;
64798: LD_VAR 0 3
64802: RET
// export function PlayerSeeMe ( unit ) ; begin
64803: LD_INT 0
64805: PPUSH
// result := See ( your_side , unit ) ;
64806: LD_ADDR_VAR 0 2
64810: PUSH
64811: LD_OWVAR 2
64815: PPUSH
64816: LD_VAR 0 1
64820: PPUSH
64821: CALL_OW 292
64825: ST_TO_ADDR
// end ;
64826: LD_VAR 0 2
64830: RET
// export function ReverseDir ( unit ) ; begin
64831: LD_INT 0
64833: PPUSH
// if not unit then
64834: LD_VAR 0 1
64838: NOT
64839: IFFALSE 64843
// exit ;
64841: GO 64866
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64843: LD_ADDR_VAR 0 2
64847: PUSH
64848: LD_VAR 0 1
64852: PPUSH
64853: CALL_OW 254
64857: PUSH
64858: LD_INT 3
64860: PLUS
64861: PUSH
64862: LD_INT 6
64864: MOD
64865: ST_TO_ADDR
// end ;
64866: LD_VAR 0 2
64870: RET
// export function ReverseArray ( array ) ; var i ; begin
64871: LD_INT 0
64873: PPUSH
64874: PPUSH
// if not array then
64875: LD_VAR 0 1
64879: NOT
64880: IFFALSE 64884
// exit ;
64882: GO 64939
// result := [ ] ;
64884: LD_ADDR_VAR 0 2
64888: PUSH
64889: EMPTY
64890: ST_TO_ADDR
// for i := array downto 1 do
64891: LD_ADDR_VAR 0 3
64895: PUSH
64896: DOUBLE
64897: LD_VAR 0 1
64901: INC
64902: ST_TO_ADDR
64903: LD_INT 1
64905: PUSH
64906: FOR_DOWNTO
64907: IFFALSE 64937
// result := Join ( result , array [ i ] ) ;
64909: LD_ADDR_VAR 0 2
64913: PUSH
64914: LD_VAR 0 2
64918: PPUSH
64919: LD_VAR 0 1
64923: PUSH
64924: LD_VAR 0 3
64928: ARRAY
64929: PPUSH
64930: CALL 69584 0 2
64934: ST_TO_ADDR
64935: GO 64906
64937: POP
64938: POP
// end ;
64939: LD_VAR 0 2
64943: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64944: LD_INT 0
64946: PPUSH
64947: PPUSH
64948: PPUSH
64949: PPUSH
64950: PPUSH
64951: PPUSH
// if not unit or not hexes then
64952: LD_VAR 0 1
64956: NOT
64957: PUSH
64958: LD_VAR 0 2
64962: NOT
64963: OR
64964: IFFALSE 64968
// exit ;
64966: GO 65091
// dist := 9999 ;
64968: LD_ADDR_VAR 0 5
64972: PUSH
64973: LD_INT 9999
64975: ST_TO_ADDR
// for i = 1 to hexes do
64976: LD_ADDR_VAR 0 4
64980: PUSH
64981: DOUBLE
64982: LD_INT 1
64984: DEC
64985: ST_TO_ADDR
64986: LD_VAR 0 2
64990: PUSH
64991: FOR_TO
64992: IFFALSE 65079
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64994: LD_ADDR_VAR 0 6
64998: PUSH
64999: LD_VAR 0 1
65003: PPUSH
65004: LD_VAR 0 2
65008: PUSH
65009: LD_VAR 0 4
65013: ARRAY
65014: PUSH
65015: LD_INT 1
65017: ARRAY
65018: PPUSH
65019: LD_VAR 0 2
65023: PUSH
65024: LD_VAR 0 4
65028: ARRAY
65029: PUSH
65030: LD_INT 2
65032: ARRAY
65033: PPUSH
65034: CALL_OW 297
65038: ST_TO_ADDR
// if tdist < dist then
65039: LD_VAR 0 6
65043: PUSH
65044: LD_VAR 0 5
65048: LESS
65049: IFFALSE 65077
// begin hex := hexes [ i ] ;
65051: LD_ADDR_VAR 0 8
65055: PUSH
65056: LD_VAR 0 2
65060: PUSH
65061: LD_VAR 0 4
65065: ARRAY
65066: ST_TO_ADDR
// dist := tdist ;
65067: LD_ADDR_VAR 0 5
65071: PUSH
65072: LD_VAR 0 6
65076: ST_TO_ADDR
// end ; end ;
65077: GO 64991
65079: POP
65080: POP
// result := hex ;
65081: LD_ADDR_VAR 0 3
65085: PUSH
65086: LD_VAR 0 8
65090: ST_TO_ADDR
// end ;
65091: LD_VAR 0 3
65095: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65096: LD_INT 0
65098: PPUSH
65099: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65100: LD_VAR 0 1
65104: NOT
65105: PUSH
65106: LD_VAR 0 1
65110: PUSH
65111: LD_INT 21
65113: PUSH
65114: LD_INT 2
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 23
65123: PUSH
65124: LD_INT 2
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PPUSH
65135: CALL_OW 69
65139: IN
65140: NOT
65141: OR
65142: IFFALSE 65146
// exit ;
65144: GO 65193
// for i = 1 to 3 do
65146: LD_ADDR_VAR 0 3
65150: PUSH
65151: DOUBLE
65152: LD_INT 1
65154: DEC
65155: ST_TO_ADDR
65156: LD_INT 3
65158: PUSH
65159: FOR_TO
65160: IFFALSE 65191
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65162: LD_VAR 0 1
65166: PPUSH
65167: CALL_OW 250
65171: PPUSH
65172: LD_VAR 0 1
65176: PPUSH
65177: CALL_OW 251
65181: PPUSH
65182: LD_INT 1
65184: PPUSH
65185: CALL_OW 453
65189: GO 65159
65191: POP
65192: POP
// end ;
65193: LD_VAR 0 2
65197: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65198: LD_INT 0
65200: PPUSH
65201: PPUSH
65202: PPUSH
65203: PPUSH
65204: PPUSH
65205: PPUSH
// if not unit or not enemy_unit then
65206: LD_VAR 0 1
65210: NOT
65211: PUSH
65212: LD_VAR 0 2
65216: NOT
65217: OR
65218: IFFALSE 65222
// exit ;
65220: GO 65689
// if GetLives ( i ) < 250 then
65222: LD_VAR 0 4
65226: PPUSH
65227: CALL_OW 256
65231: PUSH
65232: LD_INT 250
65234: LESS
65235: IFFALSE 65248
// begin ComAutodestruct ( i ) ;
65237: LD_VAR 0 4
65241: PPUSH
65242: CALL 65096 0 1
// exit ;
65246: GO 65689
// end ; x := GetX ( enemy_unit ) ;
65248: LD_ADDR_VAR 0 7
65252: PUSH
65253: LD_VAR 0 2
65257: PPUSH
65258: CALL_OW 250
65262: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65263: LD_ADDR_VAR 0 8
65267: PUSH
65268: LD_VAR 0 2
65272: PPUSH
65273: CALL_OW 251
65277: ST_TO_ADDR
// if not x or not y then
65278: LD_VAR 0 7
65282: NOT
65283: PUSH
65284: LD_VAR 0 8
65288: NOT
65289: OR
65290: IFFALSE 65294
// exit ;
65292: GO 65689
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65294: LD_ADDR_VAR 0 6
65298: PUSH
65299: LD_VAR 0 7
65303: PPUSH
65304: LD_INT 0
65306: PPUSH
65307: LD_INT 4
65309: PPUSH
65310: CALL_OW 272
65314: PUSH
65315: LD_VAR 0 8
65319: PPUSH
65320: LD_INT 0
65322: PPUSH
65323: LD_INT 4
65325: PPUSH
65326: CALL_OW 273
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_VAR 0 7
65339: PPUSH
65340: LD_INT 1
65342: PPUSH
65343: LD_INT 4
65345: PPUSH
65346: CALL_OW 272
65350: PUSH
65351: LD_VAR 0 8
65355: PPUSH
65356: LD_INT 1
65358: PPUSH
65359: LD_INT 4
65361: PPUSH
65362: CALL_OW 273
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_VAR 0 7
65375: PPUSH
65376: LD_INT 2
65378: PPUSH
65379: LD_INT 4
65381: PPUSH
65382: CALL_OW 272
65386: PUSH
65387: LD_VAR 0 8
65391: PPUSH
65392: LD_INT 2
65394: PPUSH
65395: LD_INT 4
65397: PPUSH
65398: CALL_OW 273
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_VAR 0 7
65411: PPUSH
65412: LD_INT 3
65414: PPUSH
65415: LD_INT 4
65417: PPUSH
65418: CALL_OW 272
65422: PUSH
65423: LD_VAR 0 8
65427: PPUSH
65428: LD_INT 3
65430: PPUSH
65431: LD_INT 4
65433: PPUSH
65434: CALL_OW 273
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_VAR 0 7
65447: PPUSH
65448: LD_INT 4
65450: PPUSH
65451: LD_INT 4
65453: PPUSH
65454: CALL_OW 272
65458: PUSH
65459: LD_VAR 0 8
65463: PPUSH
65464: LD_INT 4
65466: PPUSH
65467: LD_INT 4
65469: PPUSH
65470: CALL_OW 273
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_VAR 0 7
65483: PPUSH
65484: LD_INT 5
65486: PPUSH
65487: LD_INT 4
65489: PPUSH
65490: CALL_OW 272
65494: PUSH
65495: LD_VAR 0 8
65499: PPUSH
65500: LD_INT 5
65502: PPUSH
65503: LD_INT 4
65505: PPUSH
65506: CALL_OW 273
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: ST_TO_ADDR
// for i = tmp downto 1 do
65523: LD_ADDR_VAR 0 4
65527: PUSH
65528: DOUBLE
65529: LD_VAR 0 6
65533: INC
65534: ST_TO_ADDR
65535: LD_INT 1
65537: PUSH
65538: FOR_DOWNTO
65539: IFFALSE 65640
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65541: LD_VAR 0 6
65545: PUSH
65546: LD_VAR 0 4
65550: ARRAY
65551: PUSH
65552: LD_INT 1
65554: ARRAY
65555: PPUSH
65556: LD_VAR 0 6
65560: PUSH
65561: LD_VAR 0 4
65565: ARRAY
65566: PUSH
65567: LD_INT 2
65569: ARRAY
65570: PPUSH
65571: CALL_OW 488
65575: NOT
65576: PUSH
65577: LD_VAR 0 6
65581: PUSH
65582: LD_VAR 0 4
65586: ARRAY
65587: PUSH
65588: LD_INT 1
65590: ARRAY
65591: PPUSH
65592: LD_VAR 0 6
65596: PUSH
65597: LD_VAR 0 4
65601: ARRAY
65602: PUSH
65603: LD_INT 2
65605: ARRAY
65606: PPUSH
65607: CALL_OW 428
65611: PUSH
65612: LD_INT 0
65614: NONEQUAL
65615: OR
65616: IFFALSE 65638
// tmp := Delete ( tmp , i ) ;
65618: LD_ADDR_VAR 0 6
65622: PUSH
65623: LD_VAR 0 6
65627: PPUSH
65628: LD_VAR 0 4
65632: PPUSH
65633: CALL_OW 3
65637: ST_TO_ADDR
65638: GO 65538
65640: POP
65641: POP
// j := GetClosestHex ( unit , tmp ) ;
65642: LD_ADDR_VAR 0 5
65646: PUSH
65647: LD_VAR 0 1
65651: PPUSH
65652: LD_VAR 0 6
65656: PPUSH
65657: CALL 64944 0 2
65661: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65662: LD_VAR 0 1
65666: PPUSH
65667: LD_VAR 0 5
65671: PUSH
65672: LD_INT 1
65674: ARRAY
65675: PPUSH
65676: LD_VAR 0 5
65680: PUSH
65681: LD_INT 2
65683: ARRAY
65684: PPUSH
65685: CALL_OW 111
// end ;
65689: LD_VAR 0 3
65693: RET
// export function PrepareApemanSoldier ( ) ; begin
65694: LD_INT 0
65696: PPUSH
// uc_nation := 0 ;
65697: LD_ADDR_OWVAR 21
65701: PUSH
65702: LD_INT 0
65704: ST_TO_ADDR
// hc_sex := sex_male ;
65705: LD_ADDR_OWVAR 27
65709: PUSH
65710: LD_INT 1
65712: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65713: LD_ADDR_OWVAR 28
65717: PUSH
65718: LD_INT 15
65720: ST_TO_ADDR
// hc_gallery :=  ;
65721: LD_ADDR_OWVAR 33
65725: PUSH
65726: LD_STRING 
65728: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65729: LD_ADDR_OWVAR 31
65733: PUSH
65734: LD_INT 0
65736: PPUSH
65737: LD_INT 3
65739: PPUSH
65740: CALL_OW 12
65744: PUSH
65745: LD_INT 0
65747: PPUSH
65748: LD_INT 3
65750: PPUSH
65751: CALL_OW 12
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: LD_INT 0
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: ST_TO_ADDR
// end ;
65768: LD_VAR 0 1
65772: RET
// export function PrepareApemanEngineer ( ) ; begin
65773: LD_INT 0
65775: PPUSH
// uc_nation := 0 ;
65776: LD_ADDR_OWVAR 21
65780: PUSH
65781: LD_INT 0
65783: ST_TO_ADDR
// hc_sex := sex_male ;
65784: LD_ADDR_OWVAR 27
65788: PUSH
65789: LD_INT 1
65791: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65792: LD_ADDR_OWVAR 28
65796: PUSH
65797: LD_INT 16
65799: ST_TO_ADDR
// hc_gallery :=  ;
65800: LD_ADDR_OWVAR 33
65804: PUSH
65805: LD_STRING 
65807: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65808: LD_ADDR_OWVAR 31
65812: PUSH
65813: LD_INT 0
65815: PPUSH
65816: LD_INT 3
65818: PPUSH
65819: CALL_OW 12
65823: PUSH
65824: LD_INT 0
65826: PPUSH
65827: LD_INT 3
65829: PPUSH
65830: CALL_OW 12
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: LD_INT 0
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: ST_TO_ADDR
// end ;
65847: LD_VAR 0 1
65851: RET
// export function PrepareApeman ( agressivity ) ; begin
65852: LD_INT 0
65854: PPUSH
// uc_side := 0 ;
65855: LD_ADDR_OWVAR 20
65859: PUSH
65860: LD_INT 0
65862: ST_TO_ADDR
// uc_nation := 0 ;
65863: LD_ADDR_OWVAR 21
65867: PUSH
65868: LD_INT 0
65870: ST_TO_ADDR
// hc_sex := sex_male ;
65871: LD_ADDR_OWVAR 27
65875: PUSH
65876: LD_INT 1
65878: ST_TO_ADDR
// hc_class := class_apeman ;
65879: LD_ADDR_OWVAR 28
65883: PUSH
65884: LD_INT 12
65886: ST_TO_ADDR
// hc_gallery :=  ;
65887: LD_ADDR_OWVAR 33
65891: PUSH
65892: LD_STRING 
65894: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65895: LD_ADDR_OWVAR 35
65899: PUSH
65900: LD_VAR 0 1
65904: NEG
65905: PPUSH
65906: LD_VAR 0 1
65910: PPUSH
65911: CALL_OW 12
65915: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65916: LD_ADDR_OWVAR 31
65920: PUSH
65921: LD_INT 0
65923: PPUSH
65924: LD_INT 3
65926: PPUSH
65927: CALL_OW 12
65931: PUSH
65932: LD_INT 0
65934: PPUSH
65935: LD_INT 3
65937: PPUSH
65938: CALL_OW 12
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: LD_INT 0
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: ST_TO_ADDR
// end ;
65955: LD_VAR 0 2
65959: RET
// export function PrepareTiger ( agressivity ) ; begin
65960: LD_INT 0
65962: PPUSH
// uc_side := 0 ;
65963: LD_ADDR_OWVAR 20
65967: PUSH
65968: LD_INT 0
65970: ST_TO_ADDR
// uc_nation := 0 ;
65971: LD_ADDR_OWVAR 21
65975: PUSH
65976: LD_INT 0
65978: ST_TO_ADDR
// hc_class := class_tiger ;
65979: LD_ADDR_OWVAR 28
65983: PUSH
65984: LD_INT 14
65986: ST_TO_ADDR
// hc_gallery :=  ;
65987: LD_ADDR_OWVAR 33
65991: PUSH
65992: LD_STRING 
65994: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65995: LD_ADDR_OWVAR 35
65999: PUSH
66000: LD_VAR 0 1
66004: NEG
66005: PPUSH
66006: LD_VAR 0 1
66010: PPUSH
66011: CALL_OW 12
66015: ST_TO_ADDR
// end ;
66016: LD_VAR 0 2
66020: RET
// export function PrepareEnchidna ( ) ; begin
66021: LD_INT 0
66023: PPUSH
// uc_side := 0 ;
66024: LD_ADDR_OWVAR 20
66028: PUSH
66029: LD_INT 0
66031: ST_TO_ADDR
// uc_nation := 0 ;
66032: LD_ADDR_OWVAR 21
66036: PUSH
66037: LD_INT 0
66039: ST_TO_ADDR
// hc_class := class_baggie ;
66040: LD_ADDR_OWVAR 28
66044: PUSH
66045: LD_INT 13
66047: ST_TO_ADDR
// hc_gallery :=  ;
66048: LD_ADDR_OWVAR 33
66052: PUSH
66053: LD_STRING 
66055: ST_TO_ADDR
// end ;
66056: LD_VAR 0 1
66060: RET
// export function PrepareFrog ( ) ; begin
66061: LD_INT 0
66063: PPUSH
// uc_side := 0 ;
66064: LD_ADDR_OWVAR 20
66068: PUSH
66069: LD_INT 0
66071: ST_TO_ADDR
// uc_nation := 0 ;
66072: LD_ADDR_OWVAR 21
66076: PUSH
66077: LD_INT 0
66079: ST_TO_ADDR
// hc_class := class_frog ;
66080: LD_ADDR_OWVAR 28
66084: PUSH
66085: LD_INT 19
66087: ST_TO_ADDR
// hc_gallery :=  ;
66088: LD_ADDR_OWVAR 33
66092: PUSH
66093: LD_STRING 
66095: ST_TO_ADDR
// end ;
66096: LD_VAR 0 1
66100: RET
// export function PrepareFish ( ) ; begin
66101: LD_INT 0
66103: PPUSH
// uc_side := 0 ;
66104: LD_ADDR_OWVAR 20
66108: PUSH
66109: LD_INT 0
66111: ST_TO_ADDR
// uc_nation := 0 ;
66112: LD_ADDR_OWVAR 21
66116: PUSH
66117: LD_INT 0
66119: ST_TO_ADDR
// hc_class := class_fish ;
66120: LD_ADDR_OWVAR 28
66124: PUSH
66125: LD_INT 20
66127: ST_TO_ADDR
// hc_gallery :=  ;
66128: LD_ADDR_OWVAR 33
66132: PUSH
66133: LD_STRING 
66135: ST_TO_ADDR
// end ;
66136: LD_VAR 0 1
66140: RET
// export function PrepareBird ( ) ; begin
66141: LD_INT 0
66143: PPUSH
// uc_side := 0 ;
66144: LD_ADDR_OWVAR 20
66148: PUSH
66149: LD_INT 0
66151: ST_TO_ADDR
// uc_nation := 0 ;
66152: LD_ADDR_OWVAR 21
66156: PUSH
66157: LD_INT 0
66159: ST_TO_ADDR
// hc_class := class_phororhacos ;
66160: LD_ADDR_OWVAR 28
66164: PUSH
66165: LD_INT 18
66167: ST_TO_ADDR
// hc_gallery :=  ;
66168: LD_ADDR_OWVAR 33
66172: PUSH
66173: LD_STRING 
66175: ST_TO_ADDR
// end ;
66176: LD_VAR 0 1
66180: RET
// export function PrepareHorse ( ) ; begin
66181: LD_INT 0
66183: PPUSH
// uc_side := 0 ;
66184: LD_ADDR_OWVAR 20
66188: PUSH
66189: LD_INT 0
66191: ST_TO_ADDR
// uc_nation := 0 ;
66192: LD_ADDR_OWVAR 21
66196: PUSH
66197: LD_INT 0
66199: ST_TO_ADDR
// hc_class := class_horse ;
66200: LD_ADDR_OWVAR 28
66204: PUSH
66205: LD_INT 21
66207: ST_TO_ADDR
// hc_gallery :=  ;
66208: LD_ADDR_OWVAR 33
66212: PUSH
66213: LD_STRING 
66215: ST_TO_ADDR
// end ;
66216: LD_VAR 0 1
66220: RET
// export function PrepareMastodont ( ) ; begin
66221: LD_INT 0
66223: PPUSH
// uc_side := 0 ;
66224: LD_ADDR_OWVAR 20
66228: PUSH
66229: LD_INT 0
66231: ST_TO_ADDR
// uc_nation := 0 ;
66232: LD_ADDR_OWVAR 21
66236: PUSH
66237: LD_INT 0
66239: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66240: LD_ADDR_OWVAR 37
66244: PUSH
66245: LD_INT 31
66247: ST_TO_ADDR
// vc_control := control_rider ;
66248: LD_ADDR_OWVAR 38
66252: PUSH
66253: LD_INT 4
66255: ST_TO_ADDR
// end ;
66256: LD_VAR 0 1
66260: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66261: LD_INT 0
66263: PPUSH
66264: PPUSH
66265: PPUSH
// uc_side = 0 ;
66266: LD_ADDR_OWVAR 20
66270: PUSH
66271: LD_INT 0
66273: ST_TO_ADDR
// uc_nation = 0 ;
66274: LD_ADDR_OWVAR 21
66278: PUSH
66279: LD_INT 0
66281: ST_TO_ADDR
// InitHc_All ( ) ;
66282: CALL_OW 584
// InitVc ;
66286: CALL_OW 20
// if mastodonts then
66290: LD_VAR 0 6
66294: IFFALSE 66361
// for i = 1 to mastodonts do
66296: LD_ADDR_VAR 0 11
66300: PUSH
66301: DOUBLE
66302: LD_INT 1
66304: DEC
66305: ST_TO_ADDR
66306: LD_VAR 0 6
66310: PUSH
66311: FOR_TO
66312: IFFALSE 66359
// begin vc_chassis := 31 ;
66314: LD_ADDR_OWVAR 37
66318: PUSH
66319: LD_INT 31
66321: ST_TO_ADDR
// vc_control := control_rider ;
66322: LD_ADDR_OWVAR 38
66326: PUSH
66327: LD_INT 4
66329: ST_TO_ADDR
// animal := CreateVehicle ;
66330: LD_ADDR_VAR 0 12
66334: PUSH
66335: CALL_OW 45
66339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66340: LD_VAR 0 12
66344: PPUSH
66345: LD_VAR 0 8
66349: PPUSH
66350: LD_INT 0
66352: PPUSH
66353: CALL 68489 0 3
// end ;
66357: GO 66311
66359: POP
66360: POP
// if horses then
66361: LD_VAR 0 5
66365: IFFALSE 66432
// for i = 1 to horses do
66367: LD_ADDR_VAR 0 11
66371: PUSH
66372: DOUBLE
66373: LD_INT 1
66375: DEC
66376: ST_TO_ADDR
66377: LD_VAR 0 5
66381: PUSH
66382: FOR_TO
66383: IFFALSE 66430
// begin hc_class := 21 ;
66385: LD_ADDR_OWVAR 28
66389: PUSH
66390: LD_INT 21
66392: ST_TO_ADDR
// hc_gallery :=  ;
66393: LD_ADDR_OWVAR 33
66397: PUSH
66398: LD_STRING 
66400: ST_TO_ADDR
// animal := CreateHuman ;
66401: LD_ADDR_VAR 0 12
66405: PUSH
66406: CALL_OW 44
66410: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66411: LD_VAR 0 12
66415: PPUSH
66416: LD_VAR 0 8
66420: PPUSH
66421: LD_INT 0
66423: PPUSH
66424: CALL 68489 0 3
// end ;
66428: GO 66382
66430: POP
66431: POP
// if birds then
66432: LD_VAR 0 1
66436: IFFALSE 66503
// for i = 1 to birds do
66438: LD_ADDR_VAR 0 11
66442: PUSH
66443: DOUBLE
66444: LD_INT 1
66446: DEC
66447: ST_TO_ADDR
66448: LD_VAR 0 1
66452: PUSH
66453: FOR_TO
66454: IFFALSE 66501
// begin hc_class := 18 ;
66456: LD_ADDR_OWVAR 28
66460: PUSH
66461: LD_INT 18
66463: ST_TO_ADDR
// hc_gallery =  ;
66464: LD_ADDR_OWVAR 33
66468: PUSH
66469: LD_STRING 
66471: ST_TO_ADDR
// animal := CreateHuman ;
66472: LD_ADDR_VAR 0 12
66476: PUSH
66477: CALL_OW 44
66481: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66482: LD_VAR 0 12
66486: PPUSH
66487: LD_VAR 0 8
66491: PPUSH
66492: LD_INT 0
66494: PPUSH
66495: CALL 68489 0 3
// end ;
66499: GO 66453
66501: POP
66502: POP
// if tigers then
66503: LD_VAR 0 2
66507: IFFALSE 66591
// for i = 1 to tigers do
66509: LD_ADDR_VAR 0 11
66513: PUSH
66514: DOUBLE
66515: LD_INT 1
66517: DEC
66518: ST_TO_ADDR
66519: LD_VAR 0 2
66523: PUSH
66524: FOR_TO
66525: IFFALSE 66589
// begin hc_class = class_tiger ;
66527: LD_ADDR_OWVAR 28
66531: PUSH
66532: LD_INT 14
66534: ST_TO_ADDR
// hc_gallery =  ;
66535: LD_ADDR_OWVAR 33
66539: PUSH
66540: LD_STRING 
66542: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66543: LD_ADDR_OWVAR 35
66547: PUSH
66548: LD_INT 7
66550: NEG
66551: PPUSH
66552: LD_INT 7
66554: PPUSH
66555: CALL_OW 12
66559: ST_TO_ADDR
// animal := CreateHuman ;
66560: LD_ADDR_VAR 0 12
66564: PUSH
66565: CALL_OW 44
66569: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66570: LD_VAR 0 12
66574: PPUSH
66575: LD_VAR 0 8
66579: PPUSH
66580: LD_INT 0
66582: PPUSH
66583: CALL 68489 0 3
// end ;
66587: GO 66524
66589: POP
66590: POP
// if apemans then
66591: LD_VAR 0 3
66595: IFFALSE 66718
// for i = 1 to apemans do
66597: LD_ADDR_VAR 0 11
66601: PUSH
66602: DOUBLE
66603: LD_INT 1
66605: DEC
66606: ST_TO_ADDR
66607: LD_VAR 0 3
66611: PUSH
66612: FOR_TO
66613: IFFALSE 66716
// begin hc_class = class_apeman ;
66615: LD_ADDR_OWVAR 28
66619: PUSH
66620: LD_INT 12
66622: ST_TO_ADDR
// hc_gallery =  ;
66623: LD_ADDR_OWVAR 33
66627: PUSH
66628: LD_STRING 
66630: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66631: LD_ADDR_OWVAR 35
66635: PUSH
66636: LD_INT 2
66638: NEG
66639: PPUSH
66640: LD_INT 2
66642: PPUSH
66643: CALL_OW 12
66647: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66648: LD_ADDR_OWVAR 31
66652: PUSH
66653: LD_INT 1
66655: PPUSH
66656: LD_INT 3
66658: PPUSH
66659: CALL_OW 12
66663: PUSH
66664: LD_INT 1
66666: PPUSH
66667: LD_INT 3
66669: PPUSH
66670: CALL_OW 12
66674: PUSH
66675: LD_INT 0
66677: PUSH
66678: LD_INT 0
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: ST_TO_ADDR
// animal := CreateHuman ;
66687: LD_ADDR_VAR 0 12
66691: PUSH
66692: CALL_OW 44
66696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66697: LD_VAR 0 12
66701: PPUSH
66702: LD_VAR 0 8
66706: PPUSH
66707: LD_INT 0
66709: PPUSH
66710: CALL 68489 0 3
// end ;
66714: GO 66612
66716: POP
66717: POP
// if enchidnas then
66718: LD_VAR 0 4
66722: IFFALSE 66789
// for i = 1 to enchidnas do
66724: LD_ADDR_VAR 0 11
66728: PUSH
66729: DOUBLE
66730: LD_INT 1
66732: DEC
66733: ST_TO_ADDR
66734: LD_VAR 0 4
66738: PUSH
66739: FOR_TO
66740: IFFALSE 66787
// begin hc_class = 13 ;
66742: LD_ADDR_OWVAR 28
66746: PUSH
66747: LD_INT 13
66749: ST_TO_ADDR
// hc_gallery =  ;
66750: LD_ADDR_OWVAR 33
66754: PUSH
66755: LD_STRING 
66757: ST_TO_ADDR
// animal := CreateHuman ;
66758: LD_ADDR_VAR 0 12
66762: PUSH
66763: CALL_OW 44
66767: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66768: LD_VAR 0 12
66772: PPUSH
66773: LD_VAR 0 8
66777: PPUSH
66778: LD_INT 0
66780: PPUSH
66781: CALL 68489 0 3
// end ;
66785: GO 66739
66787: POP
66788: POP
// if fishes then
66789: LD_VAR 0 7
66793: IFFALSE 66860
// for i = 1 to fishes do
66795: LD_ADDR_VAR 0 11
66799: PUSH
66800: DOUBLE
66801: LD_INT 1
66803: DEC
66804: ST_TO_ADDR
66805: LD_VAR 0 7
66809: PUSH
66810: FOR_TO
66811: IFFALSE 66858
// begin hc_class = 20 ;
66813: LD_ADDR_OWVAR 28
66817: PUSH
66818: LD_INT 20
66820: ST_TO_ADDR
// hc_gallery =  ;
66821: LD_ADDR_OWVAR 33
66825: PUSH
66826: LD_STRING 
66828: ST_TO_ADDR
// animal := CreateHuman ;
66829: LD_ADDR_VAR 0 12
66833: PUSH
66834: CALL_OW 44
66838: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66839: LD_VAR 0 12
66843: PPUSH
66844: LD_VAR 0 9
66848: PPUSH
66849: LD_INT 0
66851: PPUSH
66852: CALL 68489 0 3
// end ;
66856: GO 66810
66858: POP
66859: POP
// end ;
66860: LD_VAR 0 10
66864: RET
// export function WantHeal ( sci , unit ) ; begin
66865: LD_INT 0
66867: PPUSH
// if GetTaskList ( sci ) > 0 then
66868: LD_VAR 0 1
66872: PPUSH
66873: CALL_OW 437
66877: PUSH
66878: LD_INT 0
66880: GREATER
66881: IFFALSE 66951
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66883: LD_VAR 0 1
66887: PPUSH
66888: CALL_OW 437
66892: PUSH
66893: LD_INT 1
66895: ARRAY
66896: PUSH
66897: LD_INT 1
66899: ARRAY
66900: PUSH
66901: LD_STRING l
66903: EQUAL
66904: PUSH
66905: LD_VAR 0 1
66909: PPUSH
66910: CALL_OW 437
66914: PUSH
66915: LD_INT 1
66917: ARRAY
66918: PUSH
66919: LD_INT 4
66921: ARRAY
66922: PUSH
66923: LD_VAR 0 2
66927: EQUAL
66928: AND
66929: IFFALSE 66941
// result := true else
66931: LD_ADDR_VAR 0 3
66935: PUSH
66936: LD_INT 1
66938: ST_TO_ADDR
66939: GO 66949
// result := false ;
66941: LD_ADDR_VAR 0 3
66945: PUSH
66946: LD_INT 0
66948: ST_TO_ADDR
// end else
66949: GO 66959
// result := false ;
66951: LD_ADDR_VAR 0 3
66955: PUSH
66956: LD_INT 0
66958: ST_TO_ADDR
// end ;
66959: LD_VAR 0 3
66963: RET
// export function HealTarget ( sci ) ; begin
66964: LD_INT 0
66966: PPUSH
// if not sci then
66967: LD_VAR 0 1
66971: NOT
66972: IFFALSE 66976
// exit ;
66974: GO 67041
// result := 0 ;
66976: LD_ADDR_VAR 0 2
66980: PUSH
66981: LD_INT 0
66983: ST_TO_ADDR
// if GetTaskList ( sci ) then
66984: LD_VAR 0 1
66988: PPUSH
66989: CALL_OW 437
66993: IFFALSE 67041
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66995: LD_VAR 0 1
66999: PPUSH
67000: CALL_OW 437
67004: PUSH
67005: LD_INT 1
67007: ARRAY
67008: PUSH
67009: LD_INT 1
67011: ARRAY
67012: PUSH
67013: LD_STRING l
67015: EQUAL
67016: IFFALSE 67041
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67018: LD_ADDR_VAR 0 2
67022: PUSH
67023: LD_VAR 0 1
67027: PPUSH
67028: CALL_OW 437
67032: PUSH
67033: LD_INT 1
67035: ARRAY
67036: PUSH
67037: LD_INT 4
67039: ARRAY
67040: ST_TO_ADDR
// end ;
67041: LD_VAR 0 2
67045: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67046: LD_INT 0
67048: PPUSH
67049: PPUSH
67050: PPUSH
67051: PPUSH
// if not base_units then
67052: LD_VAR 0 1
67056: NOT
67057: IFFALSE 67061
// exit ;
67059: GO 67148
// result := false ;
67061: LD_ADDR_VAR 0 2
67065: PUSH
67066: LD_INT 0
67068: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67069: LD_ADDR_VAR 0 5
67073: PUSH
67074: LD_VAR 0 1
67078: PPUSH
67079: LD_INT 21
67081: PUSH
67082: LD_INT 3
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PPUSH
67089: CALL_OW 72
67093: ST_TO_ADDR
// if not tmp then
67094: LD_VAR 0 5
67098: NOT
67099: IFFALSE 67103
// exit ;
67101: GO 67148
// for i in tmp do
67103: LD_ADDR_VAR 0 3
67107: PUSH
67108: LD_VAR 0 5
67112: PUSH
67113: FOR_IN
67114: IFFALSE 67146
// begin result := EnemyInRange ( i , 22 ) ;
67116: LD_ADDR_VAR 0 2
67120: PUSH
67121: LD_VAR 0 3
67125: PPUSH
67126: LD_INT 22
67128: PPUSH
67129: CALL 64746 0 2
67133: ST_TO_ADDR
// if result then
67134: LD_VAR 0 2
67138: IFFALSE 67144
// exit ;
67140: POP
67141: POP
67142: GO 67148
// end ;
67144: GO 67113
67146: POP
67147: POP
// end ;
67148: LD_VAR 0 2
67152: RET
// export function FilterByTag ( units , tag ) ; begin
67153: LD_INT 0
67155: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67156: LD_ADDR_VAR 0 3
67160: PUSH
67161: LD_VAR 0 1
67165: PPUSH
67166: LD_INT 120
67168: PUSH
67169: LD_VAR 0 2
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PPUSH
67178: CALL_OW 72
67182: ST_TO_ADDR
// end ;
67183: LD_VAR 0 3
67187: RET
// export function IsDriver ( un ) ; begin
67188: LD_INT 0
67190: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67191: LD_ADDR_VAR 0 2
67195: PUSH
67196: LD_VAR 0 1
67200: PUSH
67201: LD_INT 55
67203: PUSH
67204: EMPTY
67205: LIST
67206: PPUSH
67207: CALL_OW 69
67211: IN
67212: ST_TO_ADDR
// end ;
67213: LD_VAR 0 2
67217: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67218: LD_INT 0
67220: PPUSH
67221: PPUSH
// list := [ ] ;
67222: LD_ADDR_VAR 0 5
67226: PUSH
67227: EMPTY
67228: ST_TO_ADDR
// case d of 0 :
67229: LD_VAR 0 3
67233: PUSH
67234: LD_INT 0
67236: DOUBLE
67237: EQUAL
67238: IFTRUE 67242
67240: GO 67375
67242: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67243: LD_ADDR_VAR 0 5
67247: PUSH
67248: LD_VAR 0 1
67252: PUSH
67253: LD_INT 4
67255: MINUS
67256: PUSH
67257: LD_VAR 0 2
67261: PUSH
67262: LD_INT 4
67264: MINUS
67265: PUSH
67266: LD_INT 2
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: LIST
67273: PUSH
67274: LD_VAR 0 1
67278: PUSH
67279: LD_INT 3
67281: MINUS
67282: PUSH
67283: LD_VAR 0 2
67287: PUSH
67288: LD_INT 1
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: LIST
67295: PUSH
67296: LD_VAR 0 1
67300: PUSH
67301: LD_INT 4
67303: PLUS
67304: PUSH
67305: LD_VAR 0 2
67309: PUSH
67310: LD_INT 4
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: LIST
67317: PUSH
67318: LD_VAR 0 1
67322: PUSH
67323: LD_INT 3
67325: PLUS
67326: PUSH
67327: LD_VAR 0 2
67331: PUSH
67332: LD_INT 3
67334: PLUS
67335: PUSH
67336: LD_INT 5
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: LIST
67343: PUSH
67344: LD_VAR 0 1
67348: PUSH
67349: LD_VAR 0 2
67353: PUSH
67354: LD_INT 4
67356: PLUS
67357: PUSH
67358: LD_INT 0
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: LIST
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: ST_TO_ADDR
// end ; 1 :
67373: GO 68073
67375: LD_INT 1
67377: DOUBLE
67378: EQUAL
67379: IFTRUE 67383
67381: GO 67516
67383: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67384: LD_ADDR_VAR 0 5
67388: PUSH
67389: LD_VAR 0 1
67393: PUSH
67394: LD_VAR 0 2
67398: PUSH
67399: LD_INT 4
67401: MINUS
67402: PUSH
67403: LD_INT 3
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: LIST
67410: PUSH
67411: LD_VAR 0 1
67415: PUSH
67416: LD_INT 3
67418: MINUS
67419: PUSH
67420: LD_VAR 0 2
67424: PUSH
67425: LD_INT 3
67427: MINUS
67428: PUSH
67429: LD_INT 2
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: LIST
67436: PUSH
67437: LD_VAR 0 1
67441: PUSH
67442: LD_INT 4
67444: MINUS
67445: PUSH
67446: LD_VAR 0 2
67450: PUSH
67451: LD_INT 1
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: LIST
67458: PUSH
67459: LD_VAR 0 1
67463: PUSH
67464: LD_VAR 0 2
67468: PUSH
67469: LD_INT 3
67471: PLUS
67472: PUSH
67473: LD_INT 0
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: LIST
67480: PUSH
67481: LD_VAR 0 1
67485: PUSH
67486: LD_INT 4
67488: PLUS
67489: PUSH
67490: LD_VAR 0 2
67494: PUSH
67495: LD_INT 4
67497: PLUS
67498: PUSH
67499: LD_INT 5
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: LIST
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: ST_TO_ADDR
// end ; 2 :
67514: GO 68073
67516: LD_INT 2
67518: DOUBLE
67519: EQUAL
67520: IFTRUE 67524
67522: GO 67653
67524: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67525: LD_ADDR_VAR 0 5
67529: PUSH
67530: LD_VAR 0 1
67534: PUSH
67535: LD_VAR 0 2
67539: PUSH
67540: LD_INT 3
67542: MINUS
67543: PUSH
67544: LD_INT 3
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: LIST
67551: PUSH
67552: LD_VAR 0 1
67556: PUSH
67557: LD_INT 4
67559: PLUS
67560: PUSH
67561: LD_VAR 0 2
67565: PUSH
67566: LD_INT 4
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: LIST
67573: PUSH
67574: LD_VAR 0 1
67578: PUSH
67579: LD_VAR 0 2
67583: PUSH
67584: LD_INT 4
67586: PLUS
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: LIST
67595: PUSH
67596: LD_VAR 0 1
67600: PUSH
67601: LD_INT 3
67603: MINUS
67604: PUSH
67605: LD_VAR 0 2
67609: PUSH
67610: LD_INT 1
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: LIST
67617: PUSH
67618: LD_VAR 0 1
67622: PUSH
67623: LD_INT 4
67625: MINUS
67626: PUSH
67627: LD_VAR 0 2
67631: PUSH
67632: LD_INT 4
67634: MINUS
67635: PUSH
67636: LD_INT 2
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: LIST
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: ST_TO_ADDR
// end ; 3 :
67651: GO 68073
67653: LD_INT 3
67655: DOUBLE
67656: EQUAL
67657: IFTRUE 67661
67659: GO 67794
67661: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67662: LD_ADDR_VAR 0 5
67666: PUSH
67667: LD_VAR 0 1
67671: PUSH
67672: LD_INT 3
67674: PLUS
67675: PUSH
67676: LD_VAR 0 2
67680: PUSH
67681: LD_INT 4
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: LIST
67688: PUSH
67689: LD_VAR 0 1
67693: PUSH
67694: LD_INT 4
67696: PLUS
67697: PUSH
67698: LD_VAR 0 2
67702: PUSH
67703: LD_INT 4
67705: PLUS
67706: PUSH
67707: LD_INT 5
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: LIST
67714: PUSH
67715: LD_VAR 0 1
67719: PUSH
67720: LD_INT 4
67722: MINUS
67723: PUSH
67724: LD_VAR 0 2
67728: PUSH
67729: LD_INT 1
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: LIST
67736: PUSH
67737: LD_VAR 0 1
67741: PUSH
67742: LD_VAR 0 2
67746: PUSH
67747: LD_INT 4
67749: MINUS
67750: PUSH
67751: LD_INT 3
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: LIST
67758: PUSH
67759: LD_VAR 0 1
67763: PUSH
67764: LD_INT 3
67766: MINUS
67767: PUSH
67768: LD_VAR 0 2
67772: PUSH
67773: LD_INT 3
67775: MINUS
67776: PUSH
67777: LD_INT 2
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: LIST
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: ST_TO_ADDR
// end ; 4 :
67792: GO 68073
67794: LD_INT 4
67796: DOUBLE
67797: EQUAL
67798: IFTRUE 67802
67800: GO 67935
67802: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67803: LD_ADDR_VAR 0 5
67807: PUSH
67808: LD_VAR 0 1
67812: PUSH
67813: LD_VAR 0 2
67817: PUSH
67818: LD_INT 4
67820: PLUS
67821: PUSH
67822: LD_INT 0
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: LIST
67829: PUSH
67830: LD_VAR 0 1
67834: PUSH
67835: LD_INT 3
67837: PLUS
67838: PUSH
67839: LD_VAR 0 2
67843: PUSH
67844: LD_INT 3
67846: PLUS
67847: PUSH
67848: LD_INT 5
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: LIST
67855: PUSH
67856: LD_VAR 0 1
67860: PUSH
67861: LD_INT 4
67863: PLUS
67864: PUSH
67865: LD_VAR 0 2
67869: PUSH
67870: LD_INT 4
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: LIST
67877: PUSH
67878: LD_VAR 0 1
67882: PUSH
67883: LD_VAR 0 2
67887: PUSH
67888: LD_INT 3
67890: MINUS
67891: PUSH
67892: LD_INT 3
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: LIST
67899: PUSH
67900: LD_VAR 0 1
67904: PUSH
67905: LD_INT 4
67907: MINUS
67908: PUSH
67909: LD_VAR 0 2
67913: PUSH
67914: LD_INT 4
67916: MINUS
67917: PUSH
67918: LD_INT 2
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: LIST
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: ST_TO_ADDR
// end ; 5 :
67933: GO 68073
67935: LD_INT 5
67937: DOUBLE
67938: EQUAL
67939: IFTRUE 67943
67941: GO 68072
67943: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67944: LD_ADDR_VAR 0 5
67948: PUSH
67949: LD_VAR 0 1
67953: PUSH
67954: LD_INT 4
67956: MINUS
67957: PUSH
67958: LD_VAR 0 2
67962: PUSH
67963: LD_INT 1
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: LIST
67970: PUSH
67971: LD_VAR 0 1
67975: PUSH
67976: LD_VAR 0 2
67980: PUSH
67981: LD_INT 4
67983: MINUS
67984: PUSH
67985: LD_INT 3
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: LIST
67992: PUSH
67993: LD_VAR 0 1
67997: PUSH
67998: LD_INT 4
68000: PLUS
68001: PUSH
68002: LD_VAR 0 2
68006: PUSH
68007: LD_INT 4
68009: PLUS
68010: PUSH
68011: LD_INT 5
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: LIST
68018: PUSH
68019: LD_VAR 0 1
68023: PUSH
68024: LD_INT 3
68026: PLUS
68027: PUSH
68028: LD_VAR 0 2
68032: PUSH
68033: LD_INT 4
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: LIST
68040: PUSH
68041: LD_VAR 0 1
68045: PUSH
68046: LD_VAR 0 2
68050: PUSH
68051: LD_INT 3
68053: PLUS
68054: PUSH
68055: LD_INT 0
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: LIST
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: ST_TO_ADDR
// end ; end ;
68070: GO 68073
68072: POP
// result := list ;
68073: LD_ADDR_VAR 0 4
68077: PUSH
68078: LD_VAR 0 5
68082: ST_TO_ADDR
// end ;
68083: LD_VAR 0 4
68087: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68088: LD_INT 0
68090: PPUSH
68091: PPUSH
68092: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68093: LD_VAR 0 1
68097: NOT
68098: PUSH
68099: LD_VAR 0 2
68103: PUSH
68104: LD_INT 1
68106: PUSH
68107: LD_INT 2
68109: PUSH
68110: LD_INT 3
68112: PUSH
68113: LD_INT 4
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: IN
68122: NOT
68123: OR
68124: IFFALSE 68128
// exit ;
68126: GO 68211
// tmp := [ ] ;
68128: LD_ADDR_VAR 0 5
68132: PUSH
68133: EMPTY
68134: ST_TO_ADDR
// for i in units do
68135: LD_ADDR_VAR 0 4
68139: PUSH
68140: LD_VAR 0 1
68144: PUSH
68145: FOR_IN
68146: IFFALSE 68180
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68148: LD_ADDR_VAR 0 5
68152: PUSH
68153: LD_VAR 0 5
68157: PPUSH
68158: LD_VAR 0 4
68162: PPUSH
68163: LD_VAR 0 2
68167: PPUSH
68168: CALL_OW 259
68172: PPUSH
68173: CALL 69584 0 2
68177: ST_TO_ADDR
68178: GO 68145
68180: POP
68181: POP
// if not tmp then
68182: LD_VAR 0 5
68186: NOT
68187: IFFALSE 68191
// exit ;
68189: GO 68211
// result := SortListByListDesc ( units , tmp ) ;
68191: LD_ADDR_VAR 0 3
68195: PUSH
68196: LD_VAR 0 1
68200: PPUSH
68201: LD_VAR 0 5
68205: PPUSH
68206: CALL_OW 77
68210: ST_TO_ADDR
// end ;
68211: LD_VAR 0 3
68215: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68216: LD_INT 0
68218: PPUSH
68219: PPUSH
68220: PPUSH
// result := false ;
68221: LD_ADDR_VAR 0 3
68225: PUSH
68226: LD_INT 0
68228: ST_TO_ADDR
// if not building then
68229: LD_VAR 0 2
68233: NOT
68234: IFFALSE 68238
// exit ;
68236: GO 68376
// x := GetX ( building ) ;
68238: LD_ADDR_VAR 0 4
68242: PUSH
68243: LD_VAR 0 2
68247: PPUSH
68248: CALL_OW 250
68252: ST_TO_ADDR
// y := GetY ( building ) ;
68253: LD_ADDR_VAR 0 5
68257: PUSH
68258: LD_VAR 0 2
68262: PPUSH
68263: CALL_OW 251
68267: ST_TO_ADDR
// if not x or not y then
68268: LD_VAR 0 4
68272: NOT
68273: PUSH
68274: LD_VAR 0 5
68278: NOT
68279: OR
68280: IFFALSE 68284
// exit ;
68282: GO 68376
// if GetTaskList ( unit ) then
68284: LD_VAR 0 1
68288: PPUSH
68289: CALL_OW 437
68293: IFFALSE 68376
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68295: LD_STRING e
68297: PUSH
68298: LD_VAR 0 1
68302: PPUSH
68303: CALL_OW 437
68307: PUSH
68308: LD_INT 1
68310: ARRAY
68311: PUSH
68312: LD_INT 1
68314: ARRAY
68315: EQUAL
68316: PUSH
68317: LD_VAR 0 4
68321: PUSH
68322: LD_VAR 0 1
68326: PPUSH
68327: CALL_OW 437
68331: PUSH
68332: LD_INT 1
68334: ARRAY
68335: PUSH
68336: LD_INT 2
68338: ARRAY
68339: EQUAL
68340: AND
68341: PUSH
68342: LD_VAR 0 5
68346: PUSH
68347: LD_VAR 0 1
68351: PPUSH
68352: CALL_OW 437
68356: PUSH
68357: LD_INT 1
68359: ARRAY
68360: PUSH
68361: LD_INT 3
68363: ARRAY
68364: EQUAL
68365: AND
68366: IFFALSE 68376
// result := true end ;
68368: LD_ADDR_VAR 0 3
68372: PUSH
68373: LD_INT 1
68375: ST_TO_ADDR
// end ;
68376: LD_VAR 0 3
68380: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68381: LD_INT 0
68383: PPUSH
// result := false ;
68384: LD_ADDR_VAR 0 4
68388: PUSH
68389: LD_INT 0
68391: ST_TO_ADDR
// if GetTaskList ( unit ) then
68392: LD_VAR 0 1
68396: PPUSH
68397: CALL_OW 437
68401: IFFALSE 68484
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68403: LD_STRING M
68405: PUSH
68406: LD_VAR 0 1
68410: PPUSH
68411: CALL_OW 437
68415: PUSH
68416: LD_INT 1
68418: ARRAY
68419: PUSH
68420: LD_INT 1
68422: ARRAY
68423: EQUAL
68424: PUSH
68425: LD_VAR 0 2
68429: PUSH
68430: LD_VAR 0 1
68434: PPUSH
68435: CALL_OW 437
68439: PUSH
68440: LD_INT 1
68442: ARRAY
68443: PUSH
68444: LD_INT 2
68446: ARRAY
68447: EQUAL
68448: AND
68449: PUSH
68450: LD_VAR 0 3
68454: PUSH
68455: LD_VAR 0 1
68459: PPUSH
68460: CALL_OW 437
68464: PUSH
68465: LD_INT 1
68467: ARRAY
68468: PUSH
68469: LD_INT 3
68471: ARRAY
68472: EQUAL
68473: AND
68474: IFFALSE 68484
// result := true ;
68476: LD_ADDR_VAR 0 4
68480: PUSH
68481: LD_INT 1
68483: ST_TO_ADDR
// end ; end ;
68484: LD_VAR 0 4
68488: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68489: LD_INT 0
68491: PPUSH
68492: PPUSH
68493: PPUSH
68494: PPUSH
// if not unit or not area then
68495: LD_VAR 0 1
68499: NOT
68500: PUSH
68501: LD_VAR 0 2
68505: NOT
68506: OR
68507: IFFALSE 68511
// exit ;
68509: GO 68687
// tmp := AreaToList ( area , i ) ;
68511: LD_ADDR_VAR 0 6
68515: PUSH
68516: LD_VAR 0 2
68520: PPUSH
68521: LD_VAR 0 5
68525: PPUSH
68526: CALL_OW 517
68530: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68531: LD_ADDR_VAR 0 5
68535: PUSH
68536: DOUBLE
68537: LD_INT 1
68539: DEC
68540: ST_TO_ADDR
68541: LD_VAR 0 6
68545: PUSH
68546: LD_INT 1
68548: ARRAY
68549: PUSH
68550: FOR_TO
68551: IFFALSE 68685
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68553: LD_ADDR_VAR 0 7
68557: PUSH
68558: LD_VAR 0 6
68562: PUSH
68563: LD_INT 1
68565: ARRAY
68566: PUSH
68567: LD_VAR 0 5
68571: ARRAY
68572: PUSH
68573: LD_VAR 0 6
68577: PUSH
68578: LD_INT 2
68580: ARRAY
68581: PUSH
68582: LD_VAR 0 5
68586: ARRAY
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68592: LD_INT 92
68594: PUSH
68595: LD_VAR 0 7
68599: PUSH
68600: LD_INT 1
68602: ARRAY
68603: PUSH
68604: LD_VAR 0 7
68608: PUSH
68609: LD_INT 2
68611: ARRAY
68612: PUSH
68613: LD_INT 2
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: PPUSH
68622: CALL_OW 69
68626: PUSH
68627: LD_INT 0
68629: EQUAL
68630: IFFALSE 68683
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68632: LD_VAR 0 1
68636: PPUSH
68637: LD_VAR 0 7
68641: PUSH
68642: LD_INT 1
68644: ARRAY
68645: PPUSH
68646: LD_VAR 0 7
68650: PUSH
68651: LD_INT 2
68653: ARRAY
68654: PPUSH
68655: LD_VAR 0 3
68659: PPUSH
68660: CALL_OW 48
// result := IsPlaced ( unit ) ;
68664: LD_ADDR_VAR 0 4
68668: PUSH
68669: LD_VAR 0 1
68673: PPUSH
68674: CALL_OW 305
68678: ST_TO_ADDR
// exit ;
68679: POP
68680: POP
68681: GO 68687
// end ; end ;
68683: GO 68550
68685: POP
68686: POP
// end ;
68687: LD_VAR 0 4
68691: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68692: LD_INT 0
68694: PPUSH
68695: PPUSH
68696: PPUSH
// if not side or side > 8 then
68697: LD_VAR 0 1
68701: NOT
68702: PUSH
68703: LD_VAR 0 1
68707: PUSH
68708: LD_INT 8
68710: GREATER
68711: OR
68712: IFFALSE 68716
// exit ;
68714: GO 68903
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68716: LD_ADDR_VAR 0 4
68720: PUSH
68721: LD_INT 22
68723: PUSH
68724: LD_VAR 0 1
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 21
68735: PUSH
68736: LD_INT 3
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PPUSH
68747: CALL_OW 69
68751: ST_TO_ADDR
// if not tmp then
68752: LD_VAR 0 4
68756: NOT
68757: IFFALSE 68761
// exit ;
68759: GO 68903
// enable_addtolog := true ;
68761: LD_ADDR_OWVAR 81
68765: PUSH
68766: LD_INT 1
68768: ST_TO_ADDR
// AddToLog ( [ ) ;
68769: LD_STRING [
68771: PPUSH
68772: CALL_OW 561
// for i in tmp do
68776: LD_ADDR_VAR 0 3
68780: PUSH
68781: LD_VAR 0 4
68785: PUSH
68786: FOR_IN
68787: IFFALSE 68894
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68789: LD_STRING [
68791: PUSH
68792: LD_VAR 0 3
68796: PPUSH
68797: CALL_OW 266
68801: STR
68802: PUSH
68803: LD_STRING , 
68805: STR
68806: PUSH
68807: LD_VAR 0 3
68811: PPUSH
68812: CALL_OW 250
68816: STR
68817: PUSH
68818: LD_STRING , 
68820: STR
68821: PUSH
68822: LD_VAR 0 3
68826: PPUSH
68827: CALL_OW 251
68831: STR
68832: PUSH
68833: LD_STRING , 
68835: STR
68836: PUSH
68837: LD_VAR 0 3
68841: PPUSH
68842: CALL_OW 254
68846: STR
68847: PUSH
68848: LD_STRING , 
68850: STR
68851: PUSH
68852: LD_VAR 0 3
68856: PPUSH
68857: LD_INT 1
68859: PPUSH
68860: CALL_OW 268
68864: STR
68865: PUSH
68866: LD_STRING , 
68868: STR
68869: PUSH
68870: LD_VAR 0 3
68874: PPUSH
68875: LD_INT 2
68877: PPUSH
68878: CALL_OW 268
68882: STR
68883: PUSH
68884: LD_STRING ],
68886: STR
68887: PPUSH
68888: CALL_OW 561
// end ;
68892: GO 68786
68894: POP
68895: POP
// AddToLog ( ]; ) ;
68896: LD_STRING ];
68898: PPUSH
68899: CALL_OW 561
// end ;
68903: LD_VAR 0 2
68907: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68908: LD_INT 0
68910: PPUSH
68911: PPUSH
68912: PPUSH
68913: PPUSH
68914: PPUSH
// if not area or not rate or not max then
68915: LD_VAR 0 1
68919: NOT
68920: PUSH
68921: LD_VAR 0 2
68925: NOT
68926: OR
68927: PUSH
68928: LD_VAR 0 4
68932: NOT
68933: OR
68934: IFFALSE 68938
// exit ;
68936: GO 69127
// while 1 do
68938: LD_INT 1
68940: IFFALSE 69127
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68942: LD_ADDR_VAR 0 9
68946: PUSH
68947: LD_VAR 0 1
68951: PPUSH
68952: LD_INT 1
68954: PPUSH
68955: CALL_OW 287
68959: PUSH
68960: LD_INT 10
68962: MUL
68963: ST_TO_ADDR
// r := rate / 10 ;
68964: LD_ADDR_VAR 0 7
68968: PUSH
68969: LD_VAR 0 2
68973: PUSH
68974: LD_INT 10
68976: DIVREAL
68977: ST_TO_ADDR
// time := 1 1$00 ;
68978: LD_ADDR_VAR 0 8
68982: PUSH
68983: LD_INT 2100
68985: ST_TO_ADDR
// if amount < min then
68986: LD_VAR 0 9
68990: PUSH
68991: LD_VAR 0 3
68995: LESS
68996: IFFALSE 69014
// r := r * 2 else
68998: LD_ADDR_VAR 0 7
69002: PUSH
69003: LD_VAR 0 7
69007: PUSH
69008: LD_INT 2
69010: MUL
69011: ST_TO_ADDR
69012: GO 69040
// if amount > max then
69014: LD_VAR 0 9
69018: PUSH
69019: LD_VAR 0 4
69023: GREATER
69024: IFFALSE 69040
// r := r / 2 ;
69026: LD_ADDR_VAR 0 7
69030: PUSH
69031: LD_VAR 0 7
69035: PUSH
69036: LD_INT 2
69038: DIVREAL
69039: ST_TO_ADDR
// time := time / r ;
69040: LD_ADDR_VAR 0 8
69044: PUSH
69045: LD_VAR 0 8
69049: PUSH
69050: LD_VAR 0 7
69054: DIVREAL
69055: ST_TO_ADDR
// if time < 0 then
69056: LD_VAR 0 8
69060: PUSH
69061: LD_INT 0
69063: LESS
69064: IFFALSE 69081
// time := time * - 1 ;
69066: LD_ADDR_VAR 0 8
69070: PUSH
69071: LD_VAR 0 8
69075: PUSH
69076: LD_INT 1
69078: NEG
69079: MUL
69080: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69081: LD_VAR 0 8
69085: PUSH
69086: LD_INT 35
69088: PPUSH
69089: LD_INT 875
69091: PPUSH
69092: CALL_OW 12
69096: PLUS
69097: PPUSH
69098: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69102: LD_INT 1
69104: PPUSH
69105: LD_INT 5
69107: PPUSH
69108: CALL_OW 12
69112: PPUSH
69113: LD_VAR 0 1
69117: PPUSH
69118: LD_INT 1
69120: PPUSH
69121: CALL_OW 55
// end ;
69125: GO 68938
// end ;
69127: LD_VAR 0 5
69131: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69132: LD_INT 0
69134: PPUSH
69135: PPUSH
69136: PPUSH
69137: PPUSH
69138: PPUSH
69139: PPUSH
69140: PPUSH
69141: PPUSH
// if not turrets or not factories then
69142: LD_VAR 0 1
69146: NOT
69147: PUSH
69148: LD_VAR 0 2
69152: NOT
69153: OR
69154: IFFALSE 69158
// exit ;
69156: GO 69465
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69158: LD_ADDR_VAR 0 10
69162: PUSH
69163: LD_INT 5
69165: PUSH
69166: LD_INT 6
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 2
69175: PUSH
69176: LD_INT 4
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 3
69185: PUSH
69186: LD_INT 5
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: LIST
69197: PUSH
69198: LD_INT 24
69200: PUSH
69201: LD_INT 25
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 23
69210: PUSH
69211: LD_INT 27
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 42
69224: PUSH
69225: LD_INT 43
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 44
69234: PUSH
69235: LD_INT 46
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 45
69244: PUSH
69245: LD_INT 47
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: LIST
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: LIST
69261: ST_TO_ADDR
// result := [ ] ;
69262: LD_ADDR_VAR 0 3
69266: PUSH
69267: EMPTY
69268: ST_TO_ADDR
// for i in turrets do
69269: LD_ADDR_VAR 0 4
69273: PUSH
69274: LD_VAR 0 1
69278: PUSH
69279: FOR_IN
69280: IFFALSE 69463
// begin nat := GetNation ( i ) ;
69282: LD_ADDR_VAR 0 7
69286: PUSH
69287: LD_VAR 0 4
69291: PPUSH
69292: CALL_OW 248
69296: ST_TO_ADDR
// weapon := 0 ;
69297: LD_ADDR_VAR 0 8
69301: PUSH
69302: LD_INT 0
69304: ST_TO_ADDR
// if not nat then
69305: LD_VAR 0 7
69309: NOT
69310: IFFALSE 69314
// continue ;
69312: GO 69279
// for j in list [ nat ] do
69314: LD_ADDR_VAR 0 5
69318: PUSH
69319: LD_VAR 0 10
69323: PUSH
69324: LD_VAR 0 7
69328: ARRAY
69329: PUSH
69330: FOR_IN
69331: IFFALSE 69372
// if GetBWeapon ( i ) = j [ 1 ] then
69333: LD_VAR 0 4
69337: PPUSH
69338: CALL_OW 269
69342: PUSH
69343: LD_VAR 0 5
69347: PUSH
69348: LD_INT 1
69350: ARRAY
69351: EQUAL
69352: IFFALSE 69370
// begin weapon := j [ 2 ] ;
69354: LD_ADDR_VAR 0 8
69358: PUSH
69359: LD_VAR 0 5
69363: PUSH
69364: LD_INT 2
69366: ARRAY
69367: ST_TO_ADDR
// break ;
69368: GO 69372
// end ;
69370: GO 69330
69372: POP
69373: POP
// if not weapon then
69374: LD_VAR 0 8
69378: NOT
69379: IFFALSE 69383
// continue ;
69381: GO 69279
// for k in factories do
69383: LD_ADDR_VAR 0 6
69387: PUSH
69388: LD_VAR 0 2
69392: PUSH
69393: FOR_IN
69394: IFFALSE 69459
// begin weapons := AvailableWeaponList ( k ) ;
69396: LD_ADDR_VAR 0 9
69400: PUSH
69401: LD_VAR 0 6
69405: PPUSH
69406: CALL_OW 478
69410: ST_TO_ADDR
// if not weapons then
69411: LD_VAR 0 9
69415: NOT
69416: IFFALSE 69420
// continue ;
69418: GO 69393
// if weapon in weapons then
69420: LD_VAR 0 8
69424: PUSH
69425: LD_VAR 0 9
69429: IN
69430: IFFALSE 69457
// begin result := [ i , weapon ] ;
69432: LD_ADDR_VAR 0 3
69436: PUSH
69437: LD_VAR 0 4
69441: PUSH
69442: LD_VAR 0 8
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: ST_TO_ADDR
// exit ;
69451: POP
69452: POP
69453: POP
69454: POP
69455: GO 69465
// end ; end ;
69457: GO 69393
69459: POP
69460: POP
// end ;
69461: GO 69279
69463: POP
69464: POP
// end ;
69465: LD_VAR 0 3
69469: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69470: LD_INT 0
69472: PPUSH
// if not side or side > 8 then
69473: LD_VAR 0 3
69477: NOT
69478: PUSH
69479: LD_VAR 0 3
69483: PUSH
69484: LD_INT 8
69486: GREATER
69487: OR
69488: IFFALSE 69492
// exit ;
69490: GO 69551
// if not range then
69492: LD_VAR 0 4
69496: NOT
69497: IFFALSE 69508
// range := - 12 ;
69499: LD_ADDR_VAR 0 4
69503: PUSH
69504: LD_INT 12
69506: NEG
69507: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69508: LD_VAR 0 1
69512: PPUSH
69513: LD_VAR 0 2
69517: PPUSH
69518: LD_VAR 0 3
69522: PPUSH
69523: LD_VAR 0 4
69527: PPUSH
69528: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69532: LD_VAR 0 1
69536: PPUSH
69537: LD_VAR 0 2
69541: PPUSH
69542: LD_VAR 0 3
69546: PPUSH
69547: CALL_OW 331
// end ;
69551: LD_VAR 0 5
69555: RET
// export function Video ( mode ) ; begin
69556: LD_INT 0
69558: PPUSH
// ingame_video = mode ;
69559: LD_ADDR_OWVAR 52
69563: PUSH
69564: LD_VAR 0 1
69568: ST_TO_ADDR
// interface_hidden = mode ;
69569: LD_ADDR_OWVAR 54
69573: PUSH
69574: LD_VAR 0 1
69578: ST_TO_ADDR
// end ;
69579: LD_VAR 0 2
69583: RET
// export function Join ( array , element ) ; begin
69584: LD_INT 0
69586: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69587: LD_ADDR_VAR 0 3
69591: PUSH
69592: LD_VAR 0 1
69596: PPUSH
69597: LD_VAR 0 1
69601: PUSH
69602: LD_INT 1
69604: PLUS
69605: PPUSH
69606: LD_VAR 0 2
69610: PPUSH
69611: CALL_OW 1
69615: ST_TO_ADDR
// end ;
69616: LD_VAR 0 3
69620: RET
// export function JoinUnion ( array , element ) ; begin
69621: LD_INT 0
69623: PPUSH
// result := array union element ;
69624: LD_ADDR_VAR 0 3
69628: PUSH
69629: LD_VAR 0 1
69633: PUSH
69634: LD_VAR 0 2
69638: UNION
69639: ST_TO_ADDR
// end ;
69640: LD_VAR 0 3
69644: RET
// export function GetBehemoths ( side ) ; begin
69645: LD_INT 0
69647: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69648: LD_ADDR_VAR 0 2
69652: PUSH
69653: LD_INT 22
69655: PUSH
69656: LD_VAR 0 1
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 31
69667: PUSH
69668: LD_INT 25
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PPUSH
69679: CALL_OW 69
69683: ST_TO_ADDR
// end ;
69684: LD_VAR 0 2
69688: RET
// export function Shuffle ( array ) ; var i , index ; begin
69689: LD_INT 0
69691: PPUSH
69692: PPUSH
69693: PPUSH
// result := [ ] ;
69694: LD_ADDR_VAR 0 2
69698: PUSH
69699: EMPTY
69700: ST_TO_ADDR
// if not array then
69701: LD_VAR 0 1
69705: NOT
69706: IFFALSE 69710
// exit ;
69708: GO 69809
// Randomize ;
69710: CALL_OW 10
// for i = array downto 1 do
69714: LD_ADDR_VAR 0 3
69718: PUSH
69719: DOUBLE
69720: LD_VAR 0 1
69724: INC
69725: ST_TO_ADDR
69726: LD_INT 1
69728: PUSH
69729: FOR_DOWNTO
69730: IFFALSE 69807
// begin index := rand ( 1 , array ) ;
69732: LD_ADDR_VAR 0 4
69736: PUSH
69737: LD_INT 1
69739: PPUSH
69740: LD_VAR 0 1
69744: PPUSH
69745: CALL_OW 12
69749: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69750: LD_ADDR_VAR 0 2
69754: PUSH
69755: LD_VAR 0 2
69759: PPUSH
69760: LD_VAR 0 2
69764: PUSH
69765: LD_INT 1
69767: PLUS
69768: PPUSH
69769: LD_VAR 0 1
69773: PUSH
69774: LD_VAR 0 4
69778: ARRAY
69779: PPUSH
69780: CALL_OW 2
69784: ST_TO_ADDR
// array := Delete ( array , index ) ;
69785: LD_ADDR_VAR 0 1
69789: PUSH
69790: LD_VAR 0 1
69794: PPUSH
69795: LD_VAR 0 4
69799: PPUSH
69800: CALL_OW 3
69804: ST_TO_ADDR
// end ;
69805: GO 69729
69807: POP
69808: POP
// end ;
69809: LD_VAR 0 2
69813: RET
// export function GetBaseMaterials ( base ) ; begin
69814: LD_INT 0
69816: PPUSH
// result := [ 0 , 0 , 0 ] ;
69817: LD_ADDR_VAR 0 2
69821: PUSH
69822: LD_INT 0
69824: PUSH
69825: LD_INT 0
69827: PUSH
69828: LD_INT 0
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: LIST
69835: ST_TO_ADDR
// if not base then
69836: LD_VAR 0 1
69840: NOT
69841: IFFALSE 69845
// exit ;
69843: GO 69894
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69845: LD_ADDR_VAR 0 2
69849: PUSH
69850: LD_VAR 0 1
69854: PPUSH
69855: LD_INT 1
69857: PPUSH
69858: CALL_OW 275
69862: PUSH
69863: LD_VAR 0 1
69867: PPUSH
69868: LD_INT 2
69870: PPUSH
69871: CALL_OW 275
69875: PUSH
69876: LD_VAR 0 1
69880: PPUSH
69881: LD_INT 3
69883: PPUSH
69884: CALL_OW 275
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: LIST
69893: ST_TO_ADDR
// end ;
69894: LD_VAR 0 2
69898: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69899: LD_INT 0
69901: PPUSH
69902: PPUSH
// result := array ;
69903: LD_ADDR_VAR 0 3
69907: PUSH
69908: LD_VAR 0 1
69912: ST_TO_ADDR
// if size >= result then
69913: LD_VAR 0 2
69917: PUSH
69918: LD_VAR 0 3
69922: GREATEREQUAL
69923: IFFALSE 69927
// exit ;
69925: GO 69977
// if size then
69927: LD_VAR 0 2
69931: IFFALSE 69977
// for i := array downto size do
69933: LD_ADDR_VAR 0 4
69937: PUSH
69938: DOUBLE
69939: LD_VAR 0 1
69943: INC
69944: ST_TO_ADDR
69945: LD_VAR 0 2
69949: PUSH
69950: FOR_DOWNTO
69951: IFFALSE 69975
// result := Delete ( result , result ) ;
69953: LD_ADDR_VAR 0 3
69957: PUSH
69958: LD_VAR 0 3
69962: PPUSH
69963: LD_VAR 0 3
69967: PPUSH
69968: CALL_OW 3
69972: ST_TO_ADDR
69973: GO 69950
69975: POP
69976: POP
// end ;
69977: LD_VAR 0 3
69981: RET
// export function ComExit ( unit ) ; var tmp ; begin
69982: LD_INT 0
69984: PPUSH
69985: PPUSH
// if not IsInUnit ( unit ) then
69986: LD_VAR 0 1
69990: PPUSH
69991: CALL_OW 310
69995: NOT
69996: IFFALSE 70000
// exit ;
69998: GO 70060
// tmp := IsInUnit ( unit ) ;
70000: LD_ADDR_VAR 0 3
70004: PUSH
70005: LD_VAR 0 1
70009: PPUSH
70010: CALL_OW 310
70014: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70015: LD_VAR 0 3
70019: PPUSH
70020: CALL_OW 247
70024: PUSH
70025: LD_INT 2
70027: EQUAL
70028: IFFALSE 70041
// ComExitVehicle ( unit ) else
70030: LD_VAR 0 1
70034: PPUSH
70035: CALL_OW 121
70039: GO 70050
// ComExitBuilding ( unit ) ;
70041: LD_VAR 0 1
70045: PPUSH
70046: CALL_OW 122
// result := tmp ;
70050: LD_ADDR_VAR 0 2
70054: PUSH
70055: LD_VAR 0 3
70059: ST_TO_ADDR
// end ;
70060: LD_VAR 0 2
70064: RET
// export function ComExitAll ( units ) ; var i ; begin
70065: LD_INT 0
70067: PPUSH
70068: PPUSH
// if not units then
70069: LD_VAR 0 1
70073: NOT
70074: IFFALSE 70078
// exit ;
70076: GO 70104
// for i in units do
70078: LD_ADDR_VAR 0 3
70082: PUSH
70083: LD_VAR 0 1
70087: PUSH
70088: FOR_IN
70089: IFFALSE 70102
// ComExit ( i ) ;
70091: LD_VAR 0 3
70095: PPUSH
70096: CALL 69982 0 1
70100: GO 70088
70102: POP
70103: POP
// end ;
70104: LD_VAR 0 2
70108: RET
// export function ResetHc ; begin
70109: LD_INT 0
70111: PPUSH
// InitHc ;
70112: CALL_OW 19
// hc_importance := 0 ;
70116: LD_ADDR_OWVAR 32
70120: PUSH
70121: LD_INT 0
70123: ST_TO_ADDR
// end ;
70124: LD_VAR 0 1
70128: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70129: LD_INT 0
70131: PPUSH
70132: PPUSH
70133: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70134: LD_ADDR_VAR 0 6
70138: PUSH
70139: LD_VAR 0 1
70143: PUSH
70144: LD_VAR 0 3
70148: PLUS
70149: PUSH
70150: LD_INT 2
70152: DIV
70153: ST_TO_ADDR
// if _x < 0 then
70154: LD_VAR 0 6
70158: PUSH
70159: LD_INT 0
70161: LESS
70162: IFFALSE 70179
// _x := _x * - 1 ;
70164: LD_ADDR_VAR 0 6
70168: PUSH
70169: LD_VAR 0 6
70173: PUSH
70174: LD_INT 1
70176: NEG
70177: MUL
70178: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70179: LD_ADDR_VAR 0 7
70183: PUSH
70184: LD_VAR 0 2
70188: PUSH
70189: LD_VAR 0 4
70193: PLUS
70194: PUSH
70195: LD_INT 2
70197: DIV
70198: ST_TO_ADDR
// if _y < 0 then
70199: LD_VAR 0 7
70203: PUSH
70204: LD_INT 0
70206: LESS
70207: IFFALSE 70224
// _y := _y * - 1 ;
70209: LD_ADDR_VAR 0 7
70213: PUSH
70214: LD_VAR 0 7
70218: PUSH
70219: LD_INT 1
70221: NEG
70222: MUL
70223: ST_TO_ADDR
// result := [ _x , _y ] ;
70224: LD_ADDR_VAR 0 5
70228: PUSH
70229: LD_VAR 0 6
70233: PUSH
70234: LD_VAR 0 7
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: ST_TO_ADDR
// end ;
70243: LD_VAR 0 5
70247: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70248: LD_INT 0
70250: PPUSH
70251: PPUSH
70252: PPUSH
70253: PPUSH
// task := GetTaskList ( unit ) ;
70254: LD_ADDR_VAR 0 7
70258: PUSH
70259: LD_VAR 0 1
70263: PPUSH
70264: CALL_OW 437
70268: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70269: LD_VAR 0 7
70273: NOT
70274: PUSH
70275: LD_VAR 0 1
70279: PPUSH
70280: LD_VAR 0 2
70284: PPUSH
70285: CALL_OW 308
70289: NOT
70290: AND
70291: IFFALSE 70295
// exit ;
70293: GO 70413
// if IsInArea ( unit , area ) then
70295: LD_VAR 0 1
70299: PPUSH
70300: LD_VAR 0 2
70304: PPUSH
70305: CALL_OW 308
70309: IFFALSE 70327
// begin ComMoveToArea ( unit , goAway ) ;
70311: LD_VAR 0 1
70315: PPUSH
70316: LD_VAR 0 3
70320: PPUSH
70321: CALL_OW 113
// exit ;
70325: GO 70413
// end ; if task [ 1 ] [ 1 ] <> M then
70327: LD_VAR 0 7
70331: PUSH
70332: LD_INT 1
70334: ARRAY
70335: PUSH
70336: LD_INT 1
70338: ARRAY
70339: PUSH
70340: LD_STRING M
70342: NONEQUAL
70343: IFFALSE 70347
// exit ;
70345: GO 70413
// x := task [ 1 ] [ 2 ] ;
70347: LD_ADDR_VAR 0 5
70351: PUSH
70352: LD_VAR 0 7
70356: PUSH
70357: LD_INT 1
70359: ARRAY
70360: PUSH
70361: LD_INT 2
70363: ARRAY
70364: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70365: LD_ADDR_VAR 0 6
70369: PUSH
70370: LD_VAR 0 7
70374: PUSH
70375: LD_INT 1
70377: ARRAY
70378: PUSH
70379: LD_INT 3
70381: ARRAY
70382: ST_TO_ADDR
// if InArea ( x , y , area ) then
70383: LD_VAR 0 5
70387: PPUSH
70388: LD_VAR 0 6
70392: PPUSH
70393: LD_VAR 0 2
70397: PPUSH
70398: CALL_OW 309
70402: IFFALSE 70413
// ComStop ( unit ) ;
70404: LD_VAR 0 1
70408: PPUSH
70409: CALL_OW 141
// end ;
70413: LD_VAR 0 4
70417: RET
// export function Abs ( value ) ; begin
70418: LD_INT 0
70420: PPUSH
// result := value ;
70421: LD_ADDR_VAR 0 2
70425: PUSH
70426: LD_VAR 0 1
70430: ST_TO_ADDR
// if value < 0 then
70431: LD_VAR 0 1
70435: PUSH
70436: LD_INT 0
70438: LESS
70439: IFFALSE 70456
// result := value * - 1 ;
70441: LD_ADDR_VAR 0 2
70445: PUSH
70446: LD_VAR 0 1
70450: PUSH
70451: LD_INT 1
70453: NEG
70454: MUL
70455: ST_TO_ADDR
// end ;
70456: LD_VAR 0 2
70460: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70461: LD_INT 0
70463: PPUSH
70464: PPUSH
70465: PPUSH
70466: PPUSH
70467: PPUSH
70468: PPUSH
70469: PPUSH
70470: PPUSH
// if not unit or not building then
70471: LD_VAR 0 1
70475: NOT
70476: PUSH
70477: LD_VAR 0 2
70481: NOT
70482: OR
70483: IFFALSE 70487
// exit ;
70485: GO 70713
// x := GetX ( building ) ;
70487: LD_ADDR_VAR 0 4
70491: PUSH
70492: LD_VAR 0 2
70496: PPUSH
70497: CALL_OW 250
70501: ST_TO_ADDR
// y := GetY ( building ) ;
70502: LD_ADDR_VAR 0 6
70506: PUSH
70507: LD_VAR 0 2
70511: PPUSH
70512: CALL_OW 251
70516: ST_TO_ADDR
// d := GetDir ( building ) ;
70517: LD_ADDR_VAR 0 8
70521: PUSH
70522: LD_VAR 0 2
70526: PPUSH
70527: CALL_OW 254
70531: ST_TO_ADDR
// r := 4 ;
70532: LD_ADDR_VAR 0 9
70536: PUSH
70537: LD_INT 4
70539: ST_TO_ADDR
// for i := 1 to 5 do
70540: LD_ADDR_VAR 0 10
70544: PUSH
70545: DOUBLE
70546: LD_INT 1
70548: DEC
70549: ST_TO_ADDR
70550: LD_INT 5
70552: PUSH
70553: FOR_TO
70554: IFFALSE 70711
// begin _x := ShiftX ( x , d , r + i ) ;
70556: LD_ADDR_VAR 0 5
70560: PUSH
70561: LD_VAR 0 4
70565: PPUSH
70566: LD_VAR 0 8
70570: PPUSH
70571: LD_VAR 0 9
70575: PUSH
70576: LD_VAR 0 10
70580: PLUS
70581: PPUSH
70582: CALL_OW 272
70586: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70587: LD_ADDR_VAR 0 7
70591: PUSH
70592: LD_VAR 0 6
70596: PPUSH
70597: LD_VAR 0 8
70601: PPUSH
70602: LD_VAR 0 9
70606: PUSH
70607: LD_VAR 0 10
70611: PLUS
70612: PPUSH
70613: CALL_OW 273
70617: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70618: LD_VAR 0 5
70622: PPUSH
70623: LD_VAR 0 7
70627: PPUSH
70628: CALL_OW 488
70632: PUSH
70633: LD_VAR 0 5
70637: PPUSH
70638: LD_VAR 0 7
70642: PPUSH
70643: CALL_OW 428
70647: PPUSH
70648: CALL_OW 247
70652: PUSH
70653: LD_INT 3
70655: PUSH
70656: LD_INT 2
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: IN
70663: NOT
70664: AND
70665: IFFALSE 70709
// begin ComMoveXY ( unit , _x , _y ) ;
70667: LD_VAR 0 1
70671: PPUSH
70672: LD_VAR 0 5
70676: PPUSH
70677: LD_VAR 0 7
70681: PPUSH
70682: CALL_OW 111
// result := [ _x , _y ] ;
70686: LD_ADDR_VAR 0 3
70690: PUSH
70691: LD_VAR 0 5
70695: PUSH
70696: LD_VAR 0 7
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: ST_TO_ADDR
// exit ;
70705: POP
70706: POP
70707: GO 70713
// end ; end ;
70709: GO 70553
70711: POP
70712: POP
// end ;
70713: LD_VAR 0 3
70717: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70718: LD_INT 0
70720: PPUSH
70721: PPUSH
70722: PPUSH
// result := 0 ;
70723: LD_ADDR_VAR 0 3
70727: PUSH
70728: LD_INT 0
70730: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70731: LD_VAR 0 1
70735: PUSH
70736: LD_INT 0
70738: LESS
70739: PUSH
70740: LD_VAR 0 1
70744: PUSH
70745: LD_INT 8
70747: GREATER
70748: OR
70749: PUSH
70750: LD_VAR 0 2
70754: PUSH
70755: LD_INT 0
70757: LESS
70758: OR
70759: PUSH
70760: LD_VAR 0 2
70764: PUSH
70765: LD_INT 8
70767: GREATER
70768: OR
70769: IFFALSE 70773
// exit ;
70771: GO 70848
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70773: LD_ADDR_VAR 0 4
70777: PUSH
70778: LD_INT 22
70780: PUSH
70781: LD_VAR 0 2
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PPUSH
70790: CALL_OW 69
70794: PUSH
70795: FOR_IN
70796: IFFALSE 70846
// begin un := UnitShoot ( i ) ;
70798: LD_ADDR_VAR 0 5
70802: PUSH
70803: LD_VAR 0 4
70807: PPUSH
70808: CALL_OW 504
70812: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70813: LD_VAR 0 5
70817: PPUSH
70818: CALL_OW 255
70822: PUSH
70823: LD_VAR 0 1
70827: EQUAL
70828: IFFALSE 70844
// begin result := un ;
70830: LD_ADDR_VAR 0 3
70834: PUSH
70835: LD_VAR 0 5
70839: ST_TO_ADDR
// exit ;
70840: POP
70841: POP
70842: GO 70848
// end ; end ;
70844: GO 70795
70846: POP
70847: POP
// end ;
70848: LD_VAR 0 3
70852: RET
// export function GetCargoBay ( units ) ; begin
70853: LD_INT 0
70855: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70856: LD_ADDR_VAR 0 2
70860: PUSH
70861: LD_VAR 0 1
70865: PPUSH
70866: LD_INT 2
70868: PUSH
70869: LD_INT 34
70871: PUSH
70872: LD_INT 12
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 34
70881: PUSH
70882: LD_INT 51
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: LD_INT 34
70891: PUSH
70892: LD_INT 32
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 34
70901: PUSH
70902: LD_INT 89
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: PPUSH
70916: CALL_OW 72
70920: ST_TO_ADDR
// end ;
70921: LD_VAR 0 2
70925: RET
// export function Negate ( value ) ; begin
70926: LD_INT 0
70928: PPUSH
// result := not value ;
70929: LD_ADDR_VAR 0 2
70933: PUSH
70934: LD_VAR 0 1
70938: NOT
70939: ST_TO_ADDR
// end ;
70940: LD_VAR 0 2
70944: RET
// export function Inc ( value ) ; begin
70945: LD_INT 0
70947: PPUSH
// result := value + 1 ;
70948: LD_ADDR_VAR 0 2
70952: PUSH
70953: LD_VAR 0 1
70957: PUSH
70958: LD_INT 1
70960: PLUS
70961: ST_TO_ADDR
// end ;
70962: LD_VAR 0 2
70966: RET
// export function Dec ( value ) ; begin
70967: LD_INT 0
70969: PPUSH
// result := value - 1 ;
70970: LD_ADDR_VAR 0 2
70974: PUSH
70975: LD_VAR 0 1
70979: PUSH
70980: LD_INT 1
70982: MINUS
70983: ST_TO_ADDR
// end ;
70984: LD_VAR 0 2
70988: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70989: LD_INT 0
70991: PPUSH
70992: PPUSH
70993: PPUSH
70994: PPUSH
70995: PPUSH
70996: PPUSH
70997: PPUSH
70998: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70999: LD_VAR 0 1
71003: PPUSH
71004: LD_VAR 0 2
71008: PPUSH
71009: CALL_OW 488
71013: NOT
71014: PUSH
71015: LD_VAR 0 3
71019: PPUSH
71020: LD_VAR 0 4
71024: PPUSH
71025: CALL_OW 488
71029: NOT
71030: OR
71031: IFFALSE 71044
// begin result := - 1 ;
71033: LD_ADDR_VAR 0 5
71037: PUSH
71038: LD_INT 1
71040: NEG
71041: ST_TO_ADDR
// exit ;
71042: GO 71279
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71044: LD_ADDR_VAR 0 12
71048: PUSH
71049: LD_VAR 0 1
71053: PPUSH
71054: LD_VAR 0 2
71058: PPUSH
71059: LD_VAR 0 3
71063: PPUSH
71064: LD_VAR 0 4
71068: PPUSH
71069: CALL 70129 0 4
71073: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71074: LD_ADDR_VAR 0 11
71078: PUSH
71079: LD_VAR 0 1
71083: PPUSH
71084: LD_VAR 0 2
71088: PPUSH
71089: LD_VAR 0 12
71093: PUSH
71094: LD_INT 1
71096: ARRAY
71097: PPUSH
71098: LD_VAR 0 12
71102: PUSH
71103: LD_INT 2
71105: ARRAY
71106: PPUSH
71107: CALL_OW 298
71111: ST_TO_ADDR
// distance := 9999 ;
71112: LD_ADDR_VAR 0 10
71116: PUSH
71117: LD_INT 9999
71119: ST_TO_ADDR
// for i := 0 to 5 do
71120: LD_ADDR_VAR 0 6
71124: PUSH
71125: DOUBLE
71126: LD_INT 0
71128: DEC
71129: ST_TO_ADDR
71130: LD_INT 5
71132: PUSH
71133: FOR_TO
71134: IFFALSE 71277
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71136: LD_ADDR_VAR 0 7
71140: PUSH
71141: LD_VAR 0 1
71145: PPUSH
71146: LD_VAR 0 6
71150: PPUSH
71151: LD_VAR 0 11
71155: PPUSH
71156: CALL_OW 272
71160: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71161: LD_ADDR_VAR 0 8
71165: PUSH
71166: LD_VAR 0 2
71170: PPUSH
71171: LD_VAR 0 6
71175: PPUSH
71176: LD_VAR 0 11
71180: PPUSH
71181: CALL_OW 273
71185: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71186: LD_VAR 0 7
71190: PPUSH
71191: LD_VAR 0 8
71195: PPUSH
71196: CALL_OW 488
71200: NOT
71201: IFFALSE 71205
// continue ;
71203: GO 71133
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71205: LD_ADDR_VAR 0 9
71209: PUSH
71210: LD_VAR 0 12
71214: PUSH
71215: LD_INT 1
71217: ARRAY
71218: PPUSH
71219: LD_VAR 0 12
71223: PUSH
71224: LD_INT 2
71226: ARRAY
71227: PPUSH
71228: LD_VAR 0 7
71232: PPUSH
71233: LD_VAR 0 8
71237: PPUSH
71238: CALL_OW 298
71242: ST_TO_ADDR
// if tmp < distance then
71243: LD_VAR 0 9
71247: PUSH
71248: LD_VAR 0 10
71252: LESS
71253: IFFALSE 71275
// begin result := i ;
71255: LD_ADDR_VAR 0 5
71259: PUSH
71260: LD_VAR 0 6
71264: ST_TO_ADDR
// distance := tmp ;
71265: LD_ADDR_VAR 0 10
71269: PUSH
71270: LD_VAR 0 9
71274: ST_TO_ADDR
// end ; end ;
71275: GO 71133
71277: POP
71278: POP
// end ;
71279: LD_VAR 0 5
71283: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71284: LD_INT 0
71286: PPUSH
71287: PPUSH
// if not driver or not IsInUnit ( driver ) then
71288: LD_VAR 0 1
71292: NOT
71293: PUSH
71294: LD_VAR 0 1
71298: PPUSH
71299: CALL_OW 310
71303: NOT
71304: OR
71305: IFFALSE 71309
// exit ;
71307: GO 71399
// vehicle := IsInUnit ( driver ) ;
71309: LD_ADDR_VAR 0 3
71313: PUSH
71314: LD_VAR 0 1
71318: PPUSH
71319: CALL_OW 310
71323: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71324: LD_VAR 0 1
71328: PPUSH
71329: LD_STRING \
71331: PUSH
71332: LD_INT 0
71334: PUSH
71335: LD_INT 0
71337: PUSH
71338: LD_INT 0
71340: PUSH
71341: LD_INT 0
71343: PUSH
71344: LD_INT 0
71346: PUSH
71347: LD_INT 0
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: PUSH
71359: LD_STRING E
71361: PUSH
71362: LD_INT 0
71364: PUSH
71365: LD_INT 0
71367: PUSH
71368: LD_VAR 0 3
71372: PUSH
71373: LD_INT 0
71375: PUSH
71376: LD_INT 0
71378: PUSH
71379: LD_INT 0
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PPUSH
71395: CALL_OW 446
// end ;
71399: LD_VAR 0 2
71403: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71404: LD_INT 0
71406: PPUSH
71407: PPUSH
// if not driver or not IsInUnit ( driver ) then
71408: LD_VAR 0 1
71412: NOT
71413: PUSH
71414: LD_VAR 0 1
71418: PPUSH
71419: CALL_OW 310
71423: NOT
71424: OR
71425: IFFALSE 71429
// exit ;
71427: GO 71519
// vehicle := IsInUnit ( driver ) ;
71429: LD_ADDR_VAR 0 3
71433: PUSH
71434: LD_VAR 0 1
71438: PPUSH
71439: CALL_OW 310
71443: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71444: LD_VAR 0 1
71448: PPUSH
71449: LD_STRING \
71451: PUSH
71452: LD_INT 0
71454: PUSH
71455: LD_INT 0
71457: PUSH
71458: LD_INT 0
71460: PUSH
71461: LD_INT 0
71463: PUSH
71464: LD_INT 0
71466: PUSH
71467: LD_INT 0
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: PUSH
71479: LD_STRING E
71481: PUSH
71482: LD_INT 0
71484: PUSH
71485: LD_INT 0
71487: PUSH
71488: LD_VAR 0 3
71492: PUSH
71493: LD_INT 0
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: LD_INT 0
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PPUSH
71515: CALL_OW 447
// end ;
71519: LD_VAR 0 2
71523: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71524: LD_INT 0
71526: PPUSH
71527: PPUSH
71528: PPUSH
// tmp := [ ] ;
71529: LD_ADDR_VAR 0 5
71533: PUSH
71534: EMPTY
71535: ST_TO_ADDR
// for i in units do
71536: LD_ADDR_VAR 0 4
71540: PUSH
71541: LD_VAR 0 1
71545: PUSH
71546: FOR_IN
71547: IFFALSE 71585
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71549: LD_ADDR_VAR 0 5
71553: PUSH
71554: LD_VAR 0 5
71558: PPUSH
71559: LD_VAR 0 5
71563: PUSH
71564: LD_INT 1
71566: PLUS
71567: PPUSH
71568: LD_VAR 0 4
71572: PPUSH
71573: CALL_OW 256
71577: PPUSH
71578: CALL_OW 2
71582: ST_TO_ADDR
71583: GO 71546
71585: POP
71586: POP
// if not tmp then
71587: LD_VAR 0 5
71591: NOT
71592: IFFALSE 71596
// exit ;
71594: GO 71644
// if asc then
71596: LD_VAR 0 2
71600: IFFALSE 71624
// result := SortListByListAsc ( units , tmp ) else
71602: LD_ADDR_VAR 0 3
71606: PUSH
71607: LD_VAR 0 1
71611: PPUSH
71612: LD_VAR 0 5
71616: PPUSH
71617: CALL_OW 76
71621: ST_TO_ADDR
71622: GO 71644
// result := SortListByListDesc ( units , tmp ) ;
71624: LD_ADDR_VAR 0 3
71628: PUSH
71629: LD_VAR 0 1
71633: PPUSH
71634: LD_VAR 0 5
71638: PPUSH
71639: CALL_OW 77
71643: ST_TO_ADDR
// end ;
71644: LD_VAR 0 3
71648: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71649: LD_INT 0
71651: PPUSH
71652: PPUSH
// task := GetTaskList ( mech ) ;
71653: LD_ADDR_VAR 0 4
71657: PUSH
71658: LD_VAR 0 1
71662: PPUSH
71663: CALL_OW 437
71667: ST_TO_ADDR
// if not task then
71668: LD_VAR 0 4
71672: NOT
71673: IFFALSE 71677
// exit ;
71675: GO 71719
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71677: LD_ADDR_VAR 0 3
71681: PUSH
71682: LD_VAR 0 4
71686: PUSH
71687: LD_INT 1
71689: ARRAY
71690: PUSH
71691: LD_INT 1
71693: ARRAY
71694: PUSH
71695: LD_STRING r
71697: EQUAL
71698: PUSH
71699: LD_VAR 0 4
71703: PUSH
71704: LD_INT 1
71706: ARRAY
71707: PUSH
71708: LD_INT 4
71710: ARRAY
71711: PUSH
71712: LD_VAR 0 2
71716: EQUAL
71717: AND
71718: ST_TO_ADDR
// end ;
71719: LD_VAR 0 3
71723: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71724: LD_INT 0
71726: PPUSH
// SetDir ( unit , d ) ;
71727: LD_VAR 0 1
71731: PPUSH
71732: LD_VAR 0 4
71736: PPUSH
71737: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71741: LD_VAR 0 1
71745: PPUSH
71746: LD_VAR 0 2
71750: PPUSH
71751: LD_VAR 0 3
71755: PPUSH
71756: LD_VAR 0 5
71760: PPUSH
71761: CALL_OW 48
// end ;
71765: LD_VAR 0 6
71769: RET
// export function ToNaturalNumber ( number ) ; begin
71770: LD_INT 0
71772: PPUSH
// result := number div 1 ;
71773: LD_ADDR_VAR 0 2
71777: PUSH
71778: LD_VAR 0 1
71782: PUSH
71783: LD_INT 1
71785: DIV
71786: ST_TO_ADDR
// if number < 0 then
71787: LD_VAR 0 1
71791: PUSH
71792: LD_INT 0
71794: LESS
71795: IFFALSE 71805
// result := 0 ;
71797: LD_ADDR_VAR 0 2
71801: PUSH
71802: LD_INT 0
71804: ST_TO_ADDR
// end ;
71805: LD_VAR 0 2
71809: RET
// export function SortByClass ( units , class ) ; var un ; begin
71810: LD_INT 0
71812: PPUSH
71813: PPUSH
// if not units or not class then
71814: LD_VAR 0 1
71818: NOT
71819: PUSH
71820: LD_VAR 0 2
71824: NOT
71825: OR
71826: IFFALSE 71830
// exit ;
71828: GO 71925
// result := [ ] ;
71830: LD_ADDR_VAR 0 3
71834: PUSH
71835: EMPTY
71836: ST_TO_ADDR
// for un in units do
71837: LD_ADDR_VAR 0 4
71841: PUSH
71842: LD_VAR 0 1
71846: PUSH
71847: FOR_IN
71848: IFFALSE 71923
// if GetClass ( un ) = class then
71850: LD_VAR 0 4
71854: PPUSH
71855: CALL_OW 257
71859: PUSH
71860: LD_VAR 0 2
71864: EQUAL
71865: IFFALSE 71892
// result := Insert ( result , 1 , un ) else
71867: LD_ADDR_VAR 0 3
71871: PUSH
71872: LD_VAR 0 3
71876: PPUSH
71877: LD_INT 1
71879: PPUSH
71880: LD_VAR 0 4
71884: PPUSH
71885: CALL_OW 2
71889: ST_TO_ADDR
71890: GO 71921
// result := Replace ( result , result + 1 , un ) ;
71892: LD_ADDR_VAR 0 3
71896: PUSH
71897: LD_VAR 0 3
71901: PPUSH
71902: LD_VAR 0 3
71906: PUSH
71907: LD_INT 1
71909: PLUS
71910: PPUSH
71911: LD_VAR 0 4
71915: PPUSH
71916: CALL_OW 1
71920: ST_TO_ADDR
71921: GO 71847
71923: POP
71924: POP
// end ;
71925: LD_VAR 0 3
71929: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71930: LD_INT 0
71932: PPUSH
71933: PPUSH
71934: PPUSH
71935: PPUSH
71936: PPUSH
71937: PPUSH
71938: PPUSH
// result := [ ] ;
71939: LD_ADDR_VAR 0 4
71943: PUSH
71944: EMPTY
71945: ST_TO_ADDR
// if x - r < 0 then
71946: LD_VAR 0 1
71950: PUSH
71951: LD_VAR 0 3
71955: MINUS
71956: PUSH
71957: LD_INT 0
71959: LESS
71960: IFFALSE 71972
// min_x := 0 else
71962: LD_ADDR_VAR 0 8
71966: PUSH
71967: LD_INT 0
71969: ST_TO_ADDR
71970: GO 71988
// min_x := x - r ;
71972: LD_ADDR_VAR 0 8
71976: PUSH
71977: LD_VAR 0 1
71981: PUSH
71982: LD_VAR 0 3
71986: MINUS
71987: ST_TO_ADDR
// if y - r < 0 then
71988: LD_VAR 0 2
71992: PUSH
71993: LD_VAR 0 3
71997: MINUS
71998: PUSH
71999: LD_INT 0
72001: LESS
72002: IFFALSE 72014
// min_y := 0 else
72004: LD_ADDR_VAR 0 7
72008: PUSH
72009: LD_INT 0
72011: ST_TO_ADDR
72012: GO 72030
// min_y := y - r ;
72014: LD_ADDR_VAR 0 7
72018: PUSH
72019: LD_VAR 0 2
72023: PUSH
72024: LD_VAR 0 3
72028: MINUS
72029: ST_TO_ADDR
// max_x := x + r ;
72030: LD_ADDR_VAR 0 9
72034: PUSH
72035: LD_VAR 0 1
72039: PUSH
72040: LD_VAR 0 3
72044: PLUS
72045: ST_TO_ADDR
// max_y := y + r ;
72046: LD_ADDR_VAR 0 10
72050: PUSH
72051: LD_VAR 0 2
72055: PUSH
72056: LD_VAR 0 3
72060: PLUS
72061: ST_TO_ADDR
// for _x = min_x to max_x do
72062: LD_ADDR_VAR 0 5
72066: PUSH
72067: DOUBLE
72068: LD_VAR 0 8
72072: DEC
72073: ST_TO_ADDR
72074: LD_VAR 0 9
72078: PUSH
72079: FOR_TO
72080: IFFALSE 72181
// for _y = min_y to max_y do
72082: LD_ADDR_VAR 0 6
72086: PUSH
72087: DOUBLE
72088: LD_VAR 0 7
72092: DEC
72093: ST_TO_ADDR
72094: LD_VAR 0 10
72098: PUSH
72099: FOR_TO
72100: IFFALSE 72177
// begin if not ValidHex ( _x , _y ) then
72102: LD_VAR 0 5
72106: PPUSH
72107: LD_VAR 0 6
72111: PPUSH
72112: CALL_OW 488
72116: NOT
72117: IFFALSE 72121
// continue ;
72119: GO 72099
// if GetResourceTypeXY ( _x , _y ) then
72121: LD_VAR 0 5
72125: PPUSH
72126: LD_VAR 0 6
72130: PPUSH
72131: CALL_OW 283
72135: IFFALSE 72175
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72137: LD_ADDR_VAR 0 4
72141: PUSH
72142: LD_VAR 0 4
72146: PPUSH
72147: LD_VAR 0 4
72151: PUSH
72152: LD_INT 1
72154: PLUS
72155: PPUSH
72156: LD_VAR 0 5
72160: PUSH
72161: LD_VAR 0 6
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PPUSH
72170: CALL_OW 1
72174: ST_TO_ADDR
// end ;
72175: GO 72099
72177: POP
72178: POP
72179: GO 72079
72181: POP
72182: POP
// end ;
72183: LD_VAR 0 4
72187: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72188: LD_INT 0
72190: PPUSH
72191: PPUSH
72192: PPUSH
72193: PPUSH
72194: PPUSH
72195: PPUSH
72196: PPUSH
72197: PPUSH
// if not units then
72198: LD_VAR 0 1
72202: NOT
72203: IFFALSE 72207
// exit ;
72205: GO 72731
// result := UnitFilter ( units , [ f_ok ] ) ;
72207: LD_ADDR_VAR 0 3
72211: PUSH
72212: LD_VAR 0 1
72216: PPUSH
72217: LD_INT 50
72219: PUSH
72220: EMPTY
72221: LIST
72222: PPUSH
72223: CALL_OW 72
72227: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72228: LD_ADDR_VAR 0 8
72232: PUSH
72233: LD_VAR 0 1
72237: PUSH
72238: LD_INT 1
72240: ARRAY
72241: PPUSH
72242: CALL_OW 255
72246: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72247: LD_ADDR_VAR 0 10
72251: PUSH
72252: LD_INT 29
72254: PUSH
72255: LD_INT 91
72257: PUSH
72258: LD_INT 49
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: LIST
72265: ST_TO_ADDR
// if not result then
72266: LD_VAR 0 3
72270: NOT
72271: IFFALSE 72275
// exit ;
72273: GO 72731
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72275: LD_ADDR_VAR 0 5
72279: PUSH
72280: LD_INT 81
72282: PUSH
72283: LD_VAR 0 8
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PPUSH
72292: CALL_OW 69
72296: ST_TO_ADDR
// for i in result do
72297: LD_ADDR_VAR 0 4
72301: PUSH
72302: LD_VAR 0 3
72306: PUSH
72307: FOR_IN
72308: IFFALSE 72729
// begin tag := GetTag ( i ) + 1 ;
72310: LD_ADDR_VAR 0 9
72314: PUSH
72315: LD_VAR 0 4
72319: PPUSH
72320: CALL_OW 110
72324: PUSH
72325: LD_INT 1
72327: PLUS
72328: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72329: LD_ADDR_VAR 0 7
72333: PUSH
72334: LD_VAR 0 4
72338: PPUSH
72339: CALL_OW 250
72343: PPUSH
72344: LD_VAR 0 4
72348: PPUSH
72349: CALL_OW 251
72353: PPUSH
72354: LD_INT 6
72356: PPUSH
72357: CALL 71930 0 3
72361: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72362: LD_VAR 0 4
72366: PPUSH
72367: CALL_OW 247
72371: PUSH
72372: LD_INT 2
72374: EQUAL
72375: PUSH
72376: LD_VAR 0 7
72380: AND
72381: PUSH
72382: LD_VAR 0 4
72386: PPUSH
72387: CALL_OW 264
72391: PUSH
72392: LD_VAR 0 10
72396: IN
72397: NOT
72398: AND
72399: IFFALSE 72438
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72401: LD_VAR 0 4
72405: PPUSH
72406: LD_VAR 0 7
72410: PUSH
72411: LD_INT 1
72413: ARRAY
72414: PUSH
72415: LD_INT 1
72417: ARRAY
72418: PPUSH
72419: LD_VAR 0 7
72423: PUSH
72424: LD_INT 1
72426: ARRAY
72427: PUSH
72428: LD_INT 2
72430: ARRAY
72431: PPUSH
72432: CALL_OW 116
72436: GO 72727
// if path > tag then
72438: LD_VAR 0 2
72442: PUSH
72443: LD_VAR 0 9
72447: GREATER
72448: IFFALSE 72656
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72450: LD_ADDR_VAR 0 6
72454: PUSH
72455: LD_VAR 0 5
72459: PPUSH
72460: LD_INT 91
72462: PUSH
72463: LD_VAR 0 4
72467: PUSH
72468: LD_INT 8
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: LIST
72475: PPUSH
72476: CALL_OW 72
72480: ST_TO_ADDR
// if nearEnemy then
72481: LD_VAR 0 6
72485: IFFALSE 72554
// begin if GetWeapon ( i ) = ru_time_lapser then
72487: LD_VAR 0 4
72491: PPUSH
72492: CALL_OW 264
72496: PUSH
72497: LD_INT 49
72499: EQUAL
72500: IFFALSE 72528
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72502: LD_VAR 0 4
72506: PPUSH
72507: LD_VAR 0 6
72511: PPUSH
72512: LD_VAR 0 4
72516: PPUSH
72517: CALL_OW 74
72521: PPUSH
72522: CALL_OW 112
72526: GO 72552
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72528: LD_VAR 0 4
72532: PPUSH
72533: LD_VAR 0 6
72537: PPUSH
72538: LD_VAR 0 4
72542: PPUSH
72543: CALL_OW 74
72547: PPUSH
72548: CALL 73802 0 2
// end else
72552: GO 72654
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72554: LD_VAR 0 4
72558: PPUSH
72559: LD_VAR 0 2
72563: PUSH
72564: LD_VAR 0 9
72568: ARRAY
72569: PUSH
72570: LD_INT 1
72572: ARRAY
72573: PPUSH
72574: LD_VAR 0 2
72578: PUSH
72579: LD_VAR 0 9
72583: ARRAY
72584: PUSH
72585: LD_INT 2
72587: ARRAY
72588: PPUSH
72589: CALL_OW 297
72593: PUSH
72594: LD_INT 6
72596: GREATER
72597: IFFALSE 72640
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72599: LD_VAR 0 4
72603: PPUSH
72604: LD_VAR 0 2
72608: PUSH
72609: LD_VAR 0 9
72613: ARRAY
72614: PUSH
72615: LD_INT 1
72617: ARRAY
72618: PPUSH
72619: LD_VAR 0 2
72623: PUSH
72624: LD_VAR 0 9
72628: ARRAY
72629: PUSH
72630: LD_INT 2
72632: ARRAY
72633: PPUSH
72634: CALL_OW 114
72638: GO 72654
// SetTag ( i , tag ) ;
72640: LD_VAR 0 4
72644: PPUSH
72645: LD_VAR 0 9
72649: PPUSH
72650: CALL_OW 109
// end else
72654: GO 72727
// if enemy then
72656: LD_VAR 0 5
72660: IFFALSE 72727
// begin if GetWeapon ( i ) = ru_time_lapser then
72662: LD_VAR 0 4
72666: PPUSH
72667: CALL_OW 264
72671: PUSH
72672: LD_INT 49
72674: EQUAL
72675: IFFALSE 72703
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72677: LD_VAR 0 4
72681: PPUSH
72682: LD_VAR 0 5
72686: PPUSH
72687: LD_VAR 0 4
72691: PPUSH
72692: CALL_OW 74
72696: PPUSH
72697: CALL_OW 112
72701: GO 72727
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72703: LD_VAR 0 4
72707: PPUSH
72708: LD_VAR 0 5
72712: PPUSH
72713: LD_VAR 0 4
72717: PPUSH
72718: CALL_OW 74
72722: PPUSH
72723: CALL 73802 0 2
// end ; end ;
72727: GO 72307
72729: POP
72730: POP
// end ;
72731: LD_VAR 0 3
72735: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72736: LD_INT 0
72738: PPUSH
72739: PPUSH
72740: PPUSH
// if not unit or IsInUnit ( unit ) then
72741: LD_VAR 0 1
72745: NOT
72746: PUSH
72747: LD_VAR 0 1
72751: PPUSH
72752: CALL_OW 310
72756: OR
72757: IFFALSE 72761
// exit ;
72759: GO 72852
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72761: LD_ADDR_VAR 0 4
72765: PUSH
72766: LD_VAR 0 1
72770: PPUSH
72771: CALL_OW 250
72775: PPUSH
72776: LD_VAR 0 2
72780: PPUSH
72781: LD_INT 1
72783: PPUSH
72784: CALL_OW 272
72788: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72789: LD_ADDR_VAR 0 5
72793: PUSH
72794: LD_VAR 0 1
72798: PPUSH
72799: CALL_OW 251
72803: PPUSH
72804: LD_VAR 0 2
72808: PPUSH
72809: LD_INT 1
72811: PPUSH
72812: CALL_OW 273
72816: ST_TO_ADDR
// if ValidHex ( x , y ) then
72817: LD_VAR 0 4
72821: PPUSH
72822: LD_VAR 0 5
72826: PPUSH
72827: CALL_OW 488
72831: IFFALSE 72852
// ComTurnXY ( unit , x , y ) ;
72833: LD_VAR 0 1
72837: PPUSH
72838: LD_VAR 0 4
72842: PPUSH
72843: LD_VAR 0 5
72847: PPUSH
72848: CALL_OW 118
// end ;
72852: LD_VAR 0 3
72856: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72857: LD_INT 0
72859: PPUSH
72860: PPUSH
// result := false ;
72861: LD_ADDR_VAR 0 3
72865: PUSH
72866: LD_INT 0
72868: ST_TO_ADDR
// if not units then
72869: LD_VAR 0 2
72873: NOT
72874: IFFALSE 72878
// exit ;
72876: GO 72923
// for i in units do
72878: LD_ADDR_VAR 0 4
72882: PUSH
72883: LD_VAR 0 2
72887: PUSH
72888: FOR_IN
72889: IFFALSE 72921
// if See ( side , i ) then
72891: LD_VAR 0 1
72895: PPUSH
72896: LD_VAR 0 4
72900: PPUSH
72901: CALL_OW 292
72905: IFFALSE 72919
// begin result := true ;
72907: LD_ADDR_VAR 0 3
72911: PUSH
72912: LD_INT 1
72914: ST_TO_ADDR
// exit ;
72915: POP
72916: POP
72917: GO 72923
// end ;
72919: GO 72888
72921: POP
72922: POP
// end ;
72923: LD_VAR 0 3
72927: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72928: LD_INT 0
72930: PPUSH
72931: PPUSH
72932: PPUSH
72933: PPUSH
// if not unit or not points then
72934: LD_VAR 0 1
72938: NOT
72939: PUSH
72940: LD_VAR 0 2
72944: NOT
72945: OR
72946: IFFALSE 72950
// exit ;
72948: GO 73040
// dist := 99999 ;
72950: LD_ADDR_VAR 0 5
72954: PUSH
72955: LD_INT 99999
72957: ST_TO_ADDR
// for i in points do
72958: LD_ADDR_VAR 0 4
72962: PUSH
72963: LD_VAR 0 2
72967: PUSH
72968: FOR_IN
72969: IFFALSE 73038
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72971: LD_ADDR_VAR 0 6
72975: PUSH
72976: LD_VAR 0 1
72980: PPUSH
72981: LD_VAR 0 4
72985: PUSH
72986: LD_INT 1
72988: ARRAY
72989: PPUSH
72990: LD_VAR 0 4
72994: PUSH
72995: LD_INT 2
72997: ARRAY
72998: PPUSH
72999: CALL_OW 297
73003: ST_TO_ADDR
// if tmpDist < dist then
73004: LD_VAR 0 6
73008: PUSH
73009: LD_VAR 0 5
73013: LESS
73014: IFFALSE 73036
// begin result := i ;
73016: LD_ADDR_VAR 0 3
73020: PUSH
73021: LD_VAR 0 4
73025: ST_TO_ADDR
// dist := tmpDist ;
73026: LD_ADDR_VAR 0 5
73030: PUSH
73031: LD_VAR 0 6
73035: ST_TO_ADDR
// end ; end ;
73036: GO 72968
73038: POP
73039: POP
// end ;
73040: LD_VAR 0 3
73044: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73045: LD_INT 0
73047: PPUSH
// uc_side := side ;
73048: LD_ADDR_OWVAR 20
73052: PUSH
73053: LD_VAR 0 1
73057: ST_TO_ADDR
// uc_nation := 3 ;
73058: LD_ADDR_OWVAR 21
73062: PUSH
73063: LD_INT 3
73065: ST_TO_ADDR
// vc_chassis := 25 ;
73066: LD_ADDR_OWVAR 37
73070: PUSH
73071: LD_INT 25
73073: ST_TO_ADDR
// vc_engine := engine_siberite ;
73074: LD_ADDR_OWVAR 39
73078: PUSH
73079: LD_INT 3
73081: ST_TO_ADDR
// vc_control := control_computer ;
73082: LD_ADDR_OWVAR 38
73086: PUSH
73087: LD_INT 3
73089: ST_TO_ADDR
// vc_weapon := 59 ;
73090: LD_ADDR_OWVAR 40
73094: PUSH
73095: LD_INT 59
73097: ST_TO_ADDR
// result := CreateVehicle ;
73098: LD_ADDR_VAR 0 5
73102: PUSH
73103: CALL_OW 45
73107: ST_TO_ADDR
// SetDir ( result , d ) ;
73108: LD_VAR 0 5
73112: PPUSH
73113: LD_VAR 0 4
73117: PPUSH
73118: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73122: LD_VAR 0 5
73126: PPUSH
73127: LD_VAR 0 2
73131: PPUSH
73132: LD_VAR 0 3
73136: PPUSH
73137: LD_INT 0
73139: PPUSH
73140: CALL_OW 48
// end ;
73144: LD_VAR 0 5
73148: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73149: LD_INT 0
73151: PPUSH
73152: PPUSH
73153: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73154: LD_ADDR_VAR 0 2
73158: PUSH
73159: LD_INT 0
73161: PUSH
73162: LD_INT 0
73164: PUSH
73165: LD_INT 0
73167: PUSH
73168: LD_INT 0
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73177: LD_VAR 0 1
73181: NOT
73182: PUSH
73183: LD_VAR 0 1
73187: PPUSH
73188: CALL_OW 264
73192: PUSH
73193: LD_INT 12
73195: PUSH
73196: LD_INT 51
73198: PUSH
73199: LD_INT 32
73201: PUSH
73202: LD_INT 89
73204: PUSH
73205: EMPTY
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: IN
73211: NOT
73212: OR
73213: IFFALSE 73217
// exit ;
73215: GO 73315
// for i := 1 to 3 do
73217: LD_ADDR_VAR 0 3
73221: PUSH
73222: DOUBLE
73223: LD_INT 1
73225: DEC
73226: ST_TO_ADDR
73227: LD_INT 3
73229: PUSH
73230: FOR_TO
73231: IFFALSE 73313
// begin tmp := GetCargo ( cargo , i ) ;
73233: LD_ADDR_VAR 0 4
73237: PUSH
73238: LD_VAR 0 1
73242: PPUSH
73243: LD_VAR 0 3
73247: PPUSH
73248: CALL_OW 289
73252: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73253: LD_ADDR_VAR 0 2
73257: PUSH
73258: LD_VAR 0 2
73262: PPUSH
73263: LD_VAR 0 3
73267: PPUSH
73268: LD_VAR 0 4
73272: PPUSH
73273: CALL_OW 1
73277: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73278: LD_ADDR_VAR 0 2
73282: PUSH
73283: LD_VAR 0 2
73287: PPUSH
73288: LD_INT 4
73290: PPUSH
73291: LD_VAR 0 2
73295: PUSH
73296: LD_INT 4
73298: ARRAY
73299: PUSH
73300: LD_VAR 0 4
73304: PLUS
73305: PPUSH
73306: CALL_OW 1
73310: ST_TO_ADDR
// end ;
73311: GO 73230
73313: POP
73314: POP
// end ;
73315: LD_VAR 0 2
73319: RET
// export function Length ( array ) ; begin
73320: LD_INT 0
73322: PPUSH
// result := array + 0 ;
73323: LD_ADDR_VAR 0 2
73327: PUSH
73328: LD_VAR 0 1
73332: PUSH
73333: LD_INT 0
73335: PLUS
73336: ST_TO_ADDR
// end ;
73337: LD_VAR 0 2
73341: RET
// export function PrepareArray ( array ) ; begin
73342: LD_INT 0
73344: PPUSH
// result := array diff 0 ;
73345: LD_ADDR_VAR 0 2
73349: PUSH
73350: LD_VAR 0 1
73354: PUSH
73355: LD_INT 0
73357: DIFF
73358: ST_TO_ADDR
// if not result [ 1 ] then
73359: LD_VAR 0 2
73363: PUSH
73364: LD_INT 1
73366: ARRAY
73367: NOT
73368: IFFALSE 73388
// result := Delete ( result , 1 ) ;
73370: LD_ADDR_VAR 0 2
73374: PUSH
73375: LD_VAR 0 2
73379: PPUSH
73380: LD_INT 1
73382: PPUSH
73383: CALL_OW 3
73387: ST_TO_ADDR
// end ;
73388: LD_VAR 0 2
73392: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73393: LD_INT 0
73395: PPUSH
73396: PPUSH
73397: PPUSH
73398: PPUSH
// sibRocketRange := 25 ;
73399: LD_ADDR_VAR 0 6
73403: PUSH
73404: LD_INT 25
73406: ST_TO_ADDR
// result := false ;
73407: LD_ADDR_VAR 0 4
73411: PUSH
73412: LD_INT 0
73414: ST_TO_ADDR
// for i := 0 to 5 do
73415: LD_ADDR_VAR 0 5
73419: PUSH
73420: DOUBLE
73421: LD_INT 0
73423: DEC
73424: ST_TO_ADDR
73425: LD_INT 5
73427: PUSH
73428: FOR_TO
73429: IFFALSE 73496
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73431: LD_VAR 0 1
73435: PPUSH
73436: LD_VAR 0 5
73440: PPUSH
73441: LD_VAR 0 6
73445: PPUSH
73446: CALL_OW 272
73450: PPUSH
73451: LD_VAR 0 2
73455: PPUSH
73456: LD_VAR 0 5
73460: PPUSH
73461: LD_VAR 0 6
73465: PPUSH
73466: CALL_OW 273
73470: PPUSH
73471: LD_VAR 0 3
73475: PPUSH
73476: CALL_OW 309
73480: IFFALSE 73494
// begin result := true ;
73482: LD_ADDR_VAR 0 4
73486: PUSH
73487: LD_INT 1
73489: ST_TO_ADDR
// exit ;
73490: POP
73491: POP
73492: GO 73498
// end ;
73494: GO 73428
73496: POP
73497: POP
// end ;
73498: LD_VAR 0 4
73502: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
73503: LD_INT 0
73505: PPUSH
73506: PPUSH
73507: PPUSH
// if btype = b_depot then
73508: LD_VAR 0 2
73512: PUSH
73513: LD_INT 0
73515: EQUAL
73516: IFFALSE 73528
// begin result := true ;
73518: LD_ADDR_VAR 0 3
73522: PUSH
73523: LD_INT 1
73525: ST_TO_ADDR
// exit ;
73526: GO 73644
// end ; pom := GetBase ( depot ) ;
73528: LD_ADDR_VAR 0 4
73532: PUSH
73533: LD_VAR 0 1
73537: PPUSH
73538: CALL_OW 274
73542: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
73543: LD_ADDR_VAR 0 5
73547: PUSH
73548: LD_VAR 0 2
73552: PPUSH
73553: LD_VAR 0 1
73557: PPUSH
73558: CALL_OW 248
73562: PPUSH
73563: CALL_OW 450
73567: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
73568: LD_ADDR_VAR 0 3
73572: PUSH
73573: LD_VAR 0 4
73577: PPUSH
73578: LD_INT 1
73580: PPUSH
73581: CALL_OW 275
73585: PUSH
73586: LD_VAR 0 5
73590: PUSH
73591: LD_INT 1
73593: ARRAY
73594: GREATEREQUAL
73595: PUSH
73596: LD_VAR 0 4
73600: PPUSH
73601: LD_INT 2
73603: PPUSH
73604: CALL_OW 275
73608: PUSH
73609: LD_VAR 0 5
73613: PUSH
73614: LD_INT 2
73616: ARRAY
73617: GREATEREQUAL
73618: AND
73619: PUSH
73620: LD_VAR 0 4
73624: PPUSH
73625: LD_INT 3
73627: PPUSH
73628: CALL_OW 275
73632: PUSH
73633: LD_VAR 0 5
73637: PUSH
73638: LD_INT 3
73640: ARRAY
73641: GREATEREQUAL
73642: AND
73643: ST_TO_ADDR
// end ;
73644: LD_VAR 0 3
73648: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73649: LD_INT 0
73651: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73652: LD_VAR 0 1
73656: PPUSH
73657: LD_VAR 0 2
73661: PPUSH
73662: LD_INT 0
73664: PPUSH
73665: LD_INT 0
73667: PPUSH
73668: LD_INT 1
73670: PPUSH
73671: LD_INT 0
73673: PPUSH
73674: CALL_OW 587
// end ;
73678: LD_VAR 0 3
73682: RET
// export function CenterOnNow ( unit ) ; begin
73683: LD_INT 0
73685: PPUSH
// result := IsInUnit ( unit ) ;
73686: LD_ADDR_VAR 0 2
73690: PUSH
73691: LD_VAR 0 1
73695: PPUSH
73696: CALL_OW 310
73700: ST_TO_ADDR
// if not result then
73701: LD_VAR 0 2
73705: NOT
73706: IFFALSE 73718
// result := unit ;
73708: LD_ADDR_VAR 0 2
73712: PUSH
73713: LD_VAR 0 1
73717: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73718: LD_VAR 0 1
73722: PPUSH
73723: CALL_OW 87
// end ;
73727: LD_VAR 0 2
73731: RET
// export function ComMoveHex ( unit , hex ) ; begin
73732: LD_INT 0
73734: PPUSH
// if not hex then
73735: LD_VAR 0 2
73739: NOT
73740: IFFALSE 73744
// exit ;
73742: GO 73797
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73744: LD_VAR 0 2
73748: PUSH
73749: LD_INT 1
73751: ARRAY
73752: PPUSH
73753: LD_VAR 0 2
73757: PUSH
73758: LD_INT 2
73760: ARRAY
73761: PPUSH
73762: CALL_OW 428
73766: IFFALSE 73770
// exit ;
73768: GO 73797
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73770: LD_VAR 0 1
73774: PPUSH
73775: LD_VAR 0 2
73779: PUSH
73780: LD_INT 1
73782: ARRAY
73783: PPUSH
73784: LD_VAR 0 2
73788: PUSH
73789: LD_INT 2
73791: ARRAY
73792: PPUSH
73793: CALL_OW 111
// end ;
73797: LD_VAR 0 3
73801: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73802: LD_INT 0
73804: PPUSH
73805: PPUSH
73806: PPUSH
// if not unit or not enemy then
73807: LD_VAR 0 1
73811: NOT
73812: PUSH
73813: LD_VAR 0 2
73817: NOT
73818: OR
73819: IFFALSE 73823
// exit ;
73821: GO 73947
// x := GetX ( enemy ) ;
73823: LD_ADDR_VAR 0 4
73827: PUSH
73828: LD_VAR 0 2
73832: PPUSH
73833: CALL_OW 250
73837: ST_TO_ADDR
// y := GetY ( enemy ) ;
73838: LD_ADDR_VAR 0 5
73842: PUSH
73843: LD_VAR 0 2
73847: PPUSH
73848: CALL_OW 251
73852: ST_TO_ADDR
// if ValidHex ( x , y ) then
73853: LD_VAR 0 4
73857: PPUSH
73858: LD_VAR 0 5
73862: PPUSH
73863: CALL_OW 488
73867: IFFALSE 73947
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73869: LD_VAR 0 2
73873: PPUSH
73874: CALL_OW 247
73878: PUSH
73879: LD_INT 3
73881: PUSH
73882: LD_INT 2
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: IN
73889: PUSH
73890: LD_VAR 0 1
73894: PPUSH
73895: CALL_OW 255
73899: PPUSH
73900: LD_VAR 0 2
73904: PPUSH
73905: CALL_OW 292
73909: OR
73910: IFFALSE 73928
// ComAttackUnit ( unit , enemy ) else
73912: LD_VAR 0 1
73916: PPUSH
73917: LD_VAR 0 2
73921: PPUSH
73922: CALL_OW 115
73926: GO 73947
// ComAgressiveMove ( unit , x , y ) ;
73928: LD_VAR 0 1
73932: PPUSH
73933: LD_VAR 0 4
73937: PPUSH
73938: LD_VAR 0 5
73942: PPUSH
73943: CALL_OW 114
// end ;
73947: LD_VAR 0 3
73951: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73952: LD_INT 0
73954: PPUSH
73955: PPUSH
73956: PPUSH
// list := AreaToList ( area , 0 ) ;
73957: LD_ADDR_VAR 0 5
73961: PUSH
73962: LD_VAR 0 1
73966: PPUSH
73967: LD_INT 0
73969: PPUSH
73970: CALL_OW 517
73974: ST_TO_ADDR
// if not list then
73975: LD_VAR 0 5
73979: NOT
73980: IFFALSE 73984
// exit ;
73982: GO 74114
// if all then
73984: LD_VAR 0 2
73988: IFFALSE 74076
// begin for i := 1 to list [ 1 ] do
73990: LD_ADDR_VAR 0 4
73994: PUSH
73995: DOUBLE
73996: LD_INT 1
73998: DEC
73999: ST_TO_ADDR
74000: LD_VAR 0 5
74004: PUSH
74005: LD_INT 1
74007: ARRAY
74008: PUSH
74009: FOR_TO
74010: IFFALSE 74072
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74012: LD_ADDR_VAR 0 3
74016: PUSH
74017: LD_VAR 0 3
74021: PPUSH
74022: LD_VAR 0 3
74026: PUSH
74027: LD_INT 1
74029: PLUS
74030: PPUSH
74031: LD_VAR 0 5
74035: PUSH
74036: LD_INT 1
74038: ARRAY
74039: PUSH
74040: LD_VAR 0 4
74044: ARRAY
74045: PUSH
74046: LD_VAR 0 5
74050: PUSH
74051: LD_INT 2
74053: ARRAY
74054: PUSH
74055: LD_VAR 0 4
74059: ARRAY
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PPUSH
74065: CALL_OW 1
74069: ST_TO_ADDR
74070: GO 74009
74072: POP
74073: POP
// exit ;
74074: GO 74114
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74076: LD_ADDR_VAR 0 3
74080: PUSH
74081: LD_VAR 0 5
74085: PUSH
74086: LD_INT 1
74088: ARRAY
74089: PUSH
74090: LD_INT 1
74092: ARRAY
74093: PUSH
74094: LD_VAR 0 5
74098: PUSH
74099: LD_INT 2
74101: ARRAY
74102: PUSH
74103: LD_INT 1
74105: ARRAY
74106: PUSH
74107: EMPTY
74108: LIST
74109: LIST
74110: PUSH
74111: EMPTY
74112: LIST
74113: ST_TO_ADDR
// end ;
74114: LD_VAR 0 3
74118: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
74119: LD_INT 0
74121: PPUSH
74122: PPUSH
// list := AreaToList ( area , 0 ) ;
74123: LD_ADDR_VAR 0 4
74127: PUSH
74128: LD_VAR 0 1
74132: PPUSH
74133: LD_INT 0
74135: PPUSH
74136: CALL_OW 517
74140: ST_TO_ADDR
// if not list then
74141: LD_VAR 0 4
74145: NOT
74146: IFFALSE 74150
// exit ;
74148: GO 74191
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
74150: LD_ADDR_VAR 0 3
74154: PUSH
74155: LD_VAR 0 4
74159: PUSH
74160: LD_INT 1
74162: ARRAY
74163: PUSH
74164: LD_INT 1
74166: ARRAY
74167: PUSH
74168: LD_VAR 0 4
74172: PUSH
74173: LD_INT 2
74175: ARRAY
74176: PUSH
74177: LD_INT 1
74179: ARRAY
74180: PUSH
74181: LD_VAR 0 2
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: LIST
74190: ST_TO_ADDR
// end ;
74191: LD_VAR 0 3
74195: RET
// export function First ( array ) ; begin
74196: LD_INT 0
74198: PPUSH
// if not array then
74199: LD_VAR 0 1
74203: NOT
74204: IFFALSE 74208
// exit ;
74206: GO 74222
// result := array [ 1 ] ;
74208: LD_ADDR_VAR 0 2
74212: PUSH
74213: LD_VAR 0 1
74217: PUSH
74218: LD_INT 1
74220: ARRAY
74221: ST_TO_ADDR
// end ;
74222: LD_VAR 0 2
74226: RET
// export function Last ( array ) ; begin
74227: LD_INT 0
74229: PPUSH
// if not array then
74230: LD_VAR 0 1
74234: NOT
74235: IFFALSE 74239
// exit ;
74237: GO 74255
// result := array [ array ] ;
74239: LD_ADDR_VAR 0 2
74243: PUSH
74244: LD_VAR 0 1
74248: PUSH
74249: LD_VAR 0 1
74253: ARRAY
74254: ST_TO_ADDR
// end ;
74255: LD_VAR 0 2
74259: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
74260: LD_INT 0
74262: PPUSH
74263: PPUSH
// result := [ ] ;
74264: LD_ADDR_VAR 0 5
74268: PUSH
74269: EMPTY
74270: ST_TO_ADDR
// if not array then
74271: LD_VAR 0 1
74275: NOT
74276: IFFALSE 74280
// exit ;
74278: GO 74392
// for i := 1 to array do
74280: LD_ADDR_VAR 0 6
74284: PUSH
74285: DOUBLE
74286: LD_INT 1
74288: DEC
74289: ST_TO_ADDR
74290: LD_VAR 0 1
74294: PUSH
74295: FOR_TO
74296: IFFALSE 74390
// if array [ i ] [ index ] = value then
74298: LD_VAR 0 1
74302: PUSH
74303: LD_VAR 0 6
74307: ARRAY
74308: PUSH
74309: LD_VAR 0 2
74313: ARRAY
74314: PUSH
74315: LD_VAR 0 3
74319: EQUAL
74320: IFFALSE 74388
// begin if indexColumn then
74322: LD_VAR 0 4
74326: IFFALSE 74362
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74328: LD_ADDR_VAR 0 5
74332: PUSH
74333: LD_VAR 0 5
74337: PPUSH
74338: LD_VAR 0 1
74342: PUSH
74343: LD_VAR 0 6
74347: ARRAY
74348: PUSH
74349: LD_VAR 0 4
74353: ARRAY
74354: PPUSH
74355: CALL 69584 0 2
74359: ST_TO_ADDR
74360: GO 74388
// result := Join ( result , array [ i ] ) ;
74362: LD_ADDR_VAR 0 5
74366: PUSH
74367: LD_VAR 0 5
74371: PPUSH
74372: LD_VAR 0 1
74376: PUSH
74377: LD_VAR 0 6
74381: ARRAY
74382: PPUSH
74383: CALL 69584 0 2
74387: ST_TO_ADDR
// end ;
74388: GO 74295
74390: POP
74391: POP
// end ;
74392: LD_VAR 0 5
74396: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74397: LD_INT 0
74399: PPUSH
// if not vehicles or not parkingPoint then
74400: LD_VAR 0 1
74404: NOT
74405: PUSH
74406: LD_VAR 0 2
74410: NOT
74411: OR
74412: IFFALSE 74416
// exit ;
74414: GO 74514
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74416: LD_ADDR_VAR 0 1
74420: PUSH
74421: LD_VAR 0 1
74425: PPUSH
74426: LD_INT 50
74428: PUSH
74429: EMPTY
74430: LIST
74431: PUSH
74432: LD_INT 3
74434: PUSH
74435: LD_INT 92
74437: PUSH
74438: LD_VAR 0 2
74442: PUSH
74443: LD_INT 1
74445: ARRAY
74446: PUSH
74447: LD_VAR 0 2
74451: PUSH
74452: LD_INT 2
74454: ARRAY
74455: PUSH
74456: LD_INT 8
74458: PUSH
74459: EMPTY
74460: LIST
74461: LIST
74462: LIST
74463: LIST
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: PPUSH
74473: CALL_OW 72
74477: ST_TO_ADDR
// if not vehicles then
74478: LD_VAR 0 1
74482: NOT
74483: IFFALSE 74487
// exit ;
74485: GO 74514
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74487: LD_VAR 0 1
74491: PPUSH
74492: LD_VAR 0 2
74496: PUSH
74497: LD_INT 1
74499: ARRAY
74500: PPUSH
74501: LD_VAR 0 2
74505: PUSH
74506: LD_INT 2
74508: ARRAY
74509: PPUSH
74510: CALL_OW 111
// end ;
74514: LD_VAR 0 3
74518: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
74519: LD_INT 0
74521: PPUSH
74522: PPUSH
74523: PPUSH
// if not side or not area then
74524: LD_VAR 0 1
74528: NOT
74529: PUSH
74530: LD_VAR 0 2
74534: NOT
74535: OR
74536: IFFALSE 74540
// exit ;
74538: GO 74659
// tmp := AreaToList ( area , 0 ) ;
74540: LD_ADDR_VAR 0 5
74544: PUSH
74545: LD_VAR 0 2
74549: PPUSH
74550: LD_INT 0
74552: PPUSH
74553: CALL_OW 517
74557: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74558: LD_ADDR_VAR 0 4
74562: PUSH
74563: DOUBLE
74564: LD_INT 1
74566: DEC
74567: ST_TO_ADDR
74568: LD_VAR 0 5
74572: PUSH
74573: LD_INT 1
74575: ARRAY
74576: PUSH
74577: FOR_TO
74578: IFFALSE 74657
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74580: LD_VAR 0 5
74584: PUSH
74585: LD_INT 1
74587: ARRAY
74588: PUSH
74589: LD_VAR 0 4
74593: ARRAY
74594: PPUSH
74595: LD_VAR 0 5
74599: PUSH
74600: LD_INT 2
74602: ARRAY
74603: PUSH
74604: LD_VAR 0 4
74608: ARRAY
74609: PPUSH
74610: CALL_OW 351
74614: IFFALSE 74655
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74616: LD_VAR 0 5
74620: PUSH
74621: LD_INT 1
74623: ARRAY
74624: PUSH
74625: LD_VAR 0 4
74629: ARRAY
74630: PPUSH
74631: LD_VAR 0 5
74635: PUSH
74636: LD_INT 2
74638: ARRAY
74639: PUSH
74640: LD_VAR 0 4
74644: ARRAY
74645: PPUSH
74646: LD_VAR 0 1
74650: PPUSH
74651: CALL_OW 244
// end ;
74655: GO 74577
74657: POP
74658: POP
// end ; end_of_file
74659: LD_VAR 0 3
74663: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74664: LD_VAR 0 1
74668: PUSH
74669: LD_INT 200
74671: DOUBLE
74672: GREATEREQUAL
74673: IFFALSE 74681
74675: LD_INT 299
74677: DOUBLE
74678: LESSEQUAL
74679: IFTRUE 74683
74681: GO 74715
74683: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74684: LD_VAR 0 1
74688: PPUSH
74689: LD_VAR 0 2
74693: PPUSH
74694: LD_VAR 0 3
74698: PPUSH
74699: LD_VAR 0 4
74703: PPUSH
74704: LD_VAR 0 5
74708: PPUSH
74709: CALL 27375 0 5
74713: GO 74792
74715: LD_INT 300
74717: DOUBLE
74718: GREATEREQUAL
74719: IFFALSE 74727
74721: LD_INT 399
74723: DOUBLE
74724: LESSEQUAL
74725: IFTRUE 74729
74727: GO 74791
74729: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74730: LD_VAR 0 1
74734: PPUSH
74735: LD_VAR 0 2
74739: PPUSH
74740: LD_VAR 0 3
74744: PPUSH
74745: LD_VAR 0 4
74749: PPUSH
74750: LD_VAR 0 5
74754: PPUSH
74755: LD_VAR 0 6
74759: PPUSH
74760: LD_VAR 0 7
74764: PPUSH
74765: LD_VAR 0 8
74769: PPUSH
74770: LD_VAR 0 9
74774: PPUSH
74775: LD_VAR 0 10
74779: PPUSH
74780: LD_VAR 0 11
74784: PPUSH
74785: CALL 23700 0 11
74789: GO 74792
74791: POP
// end ;
74792: PPOPN 11
74794: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74795: LD_VAR 0 1
74799: PPUSH
74800: LD_VAR 0 2
74804: PPUSH
74805: LD_VAR 0 3
74809: PPUSH
74810: LD_VAR 0 4
74814: PPUSH
74815: LD_VAR 0 5
74819: PPUSH
74820: CALL 27111 0 5
// end ; end_of_file
74824: PPOPN 5
74826: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74827: LD_VAR 0 1
74831: PPUSH
74832: LD_VAR 0 2
74836: PPUSH
74837: LD_VAR 0 3
74841: PPUSH
74842: LD_VAR 0 4
74846: PPUSH
74847: LD_VAR 0 5
74851: PPUSH
74852: LD_VAR 0 6
74856: PPUSH
74857: CALL 11352 0 6
// end ;
74861: PPOPN 6
74863: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74864: LD_INT 0
74866: PPUSH
// begin if not units then
74867: LD_VAR 0 1
74871: NOT
74872: IFFALSE 74876
// exit ;
74874: GO 74876
// end ;
74876: PPOPN 7
74878: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74879: CALL 11239 0 0
// end ;
74883: PPOPN 1
74885: END
