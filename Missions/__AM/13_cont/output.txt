// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// mission_prefix := 13f_ ;
 170: LD_ADDR_EXP 34
 174: PUSH
 175: LD_STRING 13f_
 177: ST_TO_ADDR
// debugMode := 0 ;
 178: LD_ADDR_EXP 40
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// achivCounter := 0 ;
 186: LD_ADDR_EXP 41
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// if Difficulty = 1 then
 194: LD_OWVAR 67
 198: PUSH
 199: LD_INT 1
 201: EQUAL
 202: IFFALSE 211
// RemoveEnvironmentArea ( oilBlockArea ) ;
 204: LD_INT 15
 206: PPUSH
 207: CALL_OW 355
// PrepareVehicles ;
 211: CALL 1195 0 0
// PrepareHeroes ;
 215: CALL 452 0 0
// PrepareAmericansRandom ;
 219: CALL 1099 0 0
// PrepareDifficulty ;
 223: CALL 8101 0 0
// Action ;
 227: CALL 4966 0 0
// end ;
 231: END
// every 0 0$1 trigger debugMode do var i , j ;
 232: LD_EXP 40
 236: IFFALSE 407
 238: GO 240
 240: DISABLE
 241: LD_INT 0
 243: PPUSH
 244: PPUSH
// begin enable ;
 245: ENABLE
// FogOff ( true ) ;
 246: LD_INT 1
 248: PPUSH
 249: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 253: LD_ADDR_VAR 0 1
 257: PUSH
 258: LD_INT 22
 260: PUSH
 261: LD_INT 1
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 21
 270: PUSH
 271: LD_INT 1
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PPUSH
 282: CALL_OW 69
 286: PUSH
 287: FOR_IN
 288: IFFALSE 304
// SetLives ( i , 1000 ) ;
 290: LD_VAR 0 1
 294: PPUSH
 295: LD_INT 1000
 297: PPUSH
 298: CALL_OW 234
 302: GO 287
 304: POP
 305: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 306: LD_ADDR_VAR 0 1
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 2
 323: PUSH
 324: LD_INT 30
 326: PUSH
 327: LD_INT 0
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: PUSH
 334: LD_INT 30
 336: PUSH
 337: LD_INT 1
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: LIST
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PPUSH
 353: CALL_OW 69
 357: PUSH
 358: FOR_IN
 359: IFFALSE 405
// for j := 1 to 3 do
 361: LD_ADDR_VAR 0 2
 365: PUSH
 366: DOUBLE
 367: LD_INT 1
 369: DEC
 370: ST_TO_ADDR
 371: LD_INT 3
 373: PUSH
 374: FOR_TO
 375: IFFALSE 401
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 377: LD_VAR 0 1
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_VAR 0 2
 391: PPUSH
 392: LD_INT 9999
 394: PPUSH
 395: CALL_OW 277
 399: GO 374
 401: POP
 402: POP
 403: GO 358
 405: POP
 406: POP
// end ;
 407: PPOPN 2
 409: END
// every 0 0$1 trigger achivCounter >= 2 do
 410: LD_EXP 41
 414: PUSH
 415: LD_INT 2
 417: GREATEREQUAL
 418: IFFALSE 430
 420: GO 422
 422: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 423: LD_STRING ACH_REMOTE
 425: PPUSH
 426: CALL_OW 543
 430: END
// every 0 0$1 trigger destroyCounter >= 30 do
 431: LD_EXP 42
 435: PUSH
 436: LD_INT 30
 438: GREATEREQUAL
 439: IFFALSE 451
 441: GO 443
 443: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 444: LD_STRING ACH_DEFMASTER
 446: PPUSH
 447: CALL_OW 543
 451: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
 456: PPUSH
 457: PPUSH
// uc_side = 1 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 466: LD_ADDR_EXP 1
 470: PUSH
 471: LD_STRING JMM
 473: PPUSH
 474: LD_EXP 40
 478: NOT
 479: PPUSH
 480: LD_STRING 13c_
 482: PPUSH
 483: CALL 29392 0 3
 487: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 488: LD_ADDR_EXP 2
 492: PUSH
 493: LD_STRING Stevens
 495: PPUSH
 496: LD_EXP 40
 500: NOT
 501: PPUSH
 502: LD_STRING 13c_
 504: PPUSH
 505: CALL 29392 0 3
 509: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 510: LD_ADDR_EXP 3
 514: PUSH
 515: LD_STRING Lisa
 517: PPUSH
 518: LD_EXP 40
 522: NOT
 523: PPUSH
 524: LD_STRING 13c_
 526: PPUSH
 527: CALL 29392 0 3
 531: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 532: LD_ADDR_EXP 4
 536: PUSH
 537: LD_STRING Donaldson
 539: PPUSH
 540: LD_EXP 40
 544: NOT
 545: PPUSH
 546: LD_STRING 13c_
 548: PPUSH
 549: CALL 29392 0 3
 553: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 554: LD_ADDR_EXP 5
 558: PUSH
 559: LD_STRING Bobby
 561: PPUSH
 562: LD_EXP 40
 566: NOT
 567: PPUSH
 568: LD_STRING 13c_
 570: PPUSH
 571: CALL 29392 0 3
 575: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 576: LD_ADDR_EXP 6
 580: PUSH
 581: LD_STRING Cyrus
 583: PPUSH
 584: LD_EXP 40
 588: NOT
 589: PPUSH
 590: LD_STRING 13c_
 592: PPUSH
 593: CALL 29392 0 3
 597: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 598: LD_ADDR_EXP 7
 602: PUSH
 603: LD_STRING Denis
 605: PPUSH
 606: LD_EXP 40
 610: NOT
 611: PPUSH
 612: LD_STRING 13c_
 614: PPUSH
 615: CALL 29392 0 3
 619: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 620: LD_ADDR_EXP 8
 624: PUSH
 625: LD_STRING Brown
 627: PPUSH
 628: LD_EXP 40
 632: NOT
 633: PPUSH
 634: LD_STRING 13c_
 636: PPUSH
 637: CALL 29392 0 3
 641: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 642: LD_ADDR_EXP 9
 646: PUSH
 647: LD_STRING Gladstone
 649: PPUSH
 650: LD_INT 1
 652: PPUSH
 653: LD_STRING 13c_
 655: PPUSH
 656: CALL 29392 0 3
 660: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 661: LD_ADDR_EXP 10
 665: PUSH
 666: LD_STRING Houten
 668: PPUSH
 669: LD_INT 1
 671: PPUSH
 672: LD_STRING 13c_
 674: PPUSH
 675: CALL 29392 0 3
 679: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 680: LD_ADDR_EXP 11
 684: PUSH
 685: LD_STRING Cornel
 687: PPUSH
 688: LD_INT 1
 690: PPUSH
 691: LD_STRING 13c_
 693: PPUSH
 694: CALL 29392 0 3
 698: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 699: LD_ADDR_EXP 12
 703: PUSH
 704: LD_STRING Gary
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: LD_STRING 13c_
 712: PPUSH
 713: CALL 29392 0 3
 717: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 718: LD_ADDR_EXP 13
 722: PUSH
 723: LD_STRING Frank
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: LD_STRING 13c_
 731: PPUSH
 732: CALL 29392 0 3
 736: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 737: LD_ADDR_EXP 14
 741: PUSH
 742: LD_STRING Kikuchi
 744: PPUSH
 745: LD_INT 1
 747: PPUSH
 748: LD_STRING 13c_
 750: PPUSH
 751: CALL 29392 0 3
 755: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 756: LD_ADDR_EXP 15
 760: PUSH
 761: LD_STRING Powell
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: LD_STRING 
 769: PPUSH
 770: CALL 29392 0 3
 774: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 775: LD_ADDR_VAR 0 2
 779: PUSH
 780: LD_EXP 1
 784: PUSH
 785: LD_EXP 2
 789: PUSH
 790: LD_EXP 3
 794: PUSH
 795: LD_EXP 4
 799: PUSH
 800: LD_EXP 5
 804: PUSH
 805: LD_EXP 6
 809: PUSH
 810: LD_EXP 7
 814: PUSH
 815: LD_EXP 8
 819: PUSH
 820: LD_EXP 9
 824: PUSH
 825: LD_EXP 10
 829: PUSH
 830: LD_EXP 11
 834: PUSH
 835: LD_EXP 12
 839: PUSH
 840: LD_EXP 13
 844: PUSH
 845: LD_EXP 14
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 866: LD_ADDR_VAR 0 3
 870: PUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 33
 883: PUSH
 884: LD_INT 1
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: LD_INT 21
 893: PUSH
 894: LD_INT 2
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: LIST
 905: PPUSH
 906: CALL_OW 69
 910: ST_TO_ADDR
// for i = tmp downto 1 do
 911: LD_ADDR_VAR 0 4
 915: PUSH
 916: DOUBLE
 917: LD_VAR 0 2
 921: INC
 922: ST_TO_ADDR
 923: LD_INT 1
 925: PUSH
 926: FOR_DOWNTO
 927: IFFALSE 964
// if not tmp [ i ] then
 929: LD_VAR 0 2
 933: PUSH
 934: LD_VAR 0 4
 938: ARRAY
 939: NOT
 940: IFFALSE 962
// tmp := Delete ( tmp , i ) ;
 942: LD_ADDR_VAR 0 2
 946: PUSH
 947: LD_VAR 0 2
 951: PPUSH
 952: LD_VAR 0 4
 956: PPUSH
 957: CALL_OW 3
 961: ST_TO_ADDR
 962: GO 926
 964: POP
 965: POP
// for i = 1 to tmp do
 966: LD_ADDR_VAR 0 4
 970: PUSH
 971: DOUBLE
 972: LD_INT 1
 974: DEC
 975: ST_TO_ADDR
 976: LD_VAR 0 2
 980: PUSH
 981: FOR_TO
 982: IFFALSE 1012
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
 984: LD_VAR 0 2
 988: PUSH
 989: LD_VAR 0 4
 993: ARRAY
 994: PPUSH
 995: LD_VAR 0 3
 999: PUSH
1000: LD_VAR 0 4
1004: ARRAY
1005: PPUSH
1006: CALL_OW 52
1010: GO 981
1012: POP
1013: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1014: LD_INT 22
1016: PUSH
1017: LD_INT 1
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 25
1026: PUSH
1027: LD_INT 2
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: PPUSH
1038: CALL_OW 69
1042: PUSH
1043: LD_INT 0
1045: EQUAL
1046: PUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PUSH
1057: LD_INT 34
1059: PUSH
1060: LD_INT 13
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PPUSH
1071: CALL_OW 69
1075: PUSH
1076: LD_INT 0
1078: EQUAL
1079: AND
1080: IFFALSE 1094
// SetClass ( JMM , 2 ) ;
1082: LD_EXP 1
1086: PPUSH
1087: LD_INT 2
1089: PPUSH
1090: CALL_OW 336
// end ;
1094: LD_VAR 0 1
1098: RET
// export function PrepareAmericansRandom ; var i ; begin
1099: LD_INT 0
1101: PPUSH
1102: PPUSH
// uc_side = 1 ;
1103: LD_ADDR_OWVAR 20
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1111: LD_ADDR_EXP 16
1115: PUSH
1116: LD_STRING 13c_others
1118: PPUSH
1119: CALL_OW 31
1123: ST_TO_ADDR
// for i in others13 do
1124: LD_ADDR_VAR 0 2
1128: PUSH
1129: LD_EXP 16
1133: PUSH
1134: FOR_IN
1135: IFFALSE 1188
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1137: LD_VAR 0 2
1141: PPUSH
1142: LD_INT 22
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 21
1154: PUSH
1155: LD_INT 2
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: PUSH
1162: LD_INT 58
1164: PUSH
1165: EMPTY
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: PPUSH
1173: CALL_OW 69
1177: PUSH
1178: LD_INT 1
1180: ARRAY
1181: PPUSH
1182: CALL_OW 52
1186: GO 1134
1188: POP
1189: POP
// end ;
1190: LD_VAR 0 1
1194: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1195: LD_INT 0
1197: PPUSH
1198: PPUSH
1199: PPUSH
1200: PPUSH
1201: PPUSH
1202: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1203: LD_ADDR_VAR 0 5
1207: PUSH
1208: LD_STRING 13_VehiclesIn13_1
1210: PPUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 5
1216: PUSH
1217: LD_INT 3
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 6
1225: PUSH
1226: LD_INT 100
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 3
1245: PUSH
1246: LD_INT 1
1248: PUSH
1249: LD_INT 6
1251: PUSH
1252: LD_INT 100
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: PUSH
1263: LD_INT 1
1265: PUSH
1266: LD_INT 5
1268: PUSH
1269: LD_INT 3
1271: PUSH
1272: LD_INT 1
1274: PUSH
1275: LD_INT 6
1277: PUSH
1278: LD_INT 100
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: LD_INT 5
1294: PUSH
1295: LD_INT 3
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: LD_INT 6
1303: PUSH
1304: LD_INT 100
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: PUSH
1315: LD_INT 1
1317: PUSH
1318: LD_INT 5
1320: PUSH
1321: LD_INT 3
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: LD_INT 6
1329: PUSH
1330: LD_INT 100
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_INT 1
1343: PUSH
1344: LD_INT 5
1346: PUSH
1347: LD_INT 3
1349: PUSH
1350: LD_INT 1
1352: PUSH
1353: LD_INT 6
1355: PUSH
1356: LD_INT 100
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 1
1369: PUSH
1370: LD_INT 5
1372: PUSH
1373: LD_INT 3
1375: PUSH
1376: LD_INT 1
1378: PUSH
1379: LD_INT 6
1381: PUSH
1382: LD_INT 100
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 1
1395: PUSH
1396: LD_INT 5
1398: PUSH
1399: LD_INT 3
1401: PUSH
1402: LD_INT 1
1404: PUSH
1405: LD_INT 6
1407: PUSH
1408: LD_INT 100
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 30
1433: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1434: LD_ADDR_EXP 24
1438: PUSH
1439: LD_STRING 13_ResourcesInCargo13_1
1441: PPUSH
1442: EMPTY
1443: PPUSH
1444: CALL_OW 30
1448: ST_TO_ADDR
// cargoList = [ ] ;
1449: LD_ADDR_VAR 0 6
1453: PUSH
1454: EMPTY
1455: ST_TO_ADDR
// uc_side = 1 ;
1456: LD_ADDR_OWVAR 20
1460: PUSH
1461: LD_INT 1
1463: ST_TO_ADDR
// if vehicles then
1464: LD_VAR 0 5
1468: IFFALSE 1815
// begin for i := 1 to vehicles do
1470: LD_ADDR_VAR 0 2
1474: PUSH
1475: DOUBLE
1476: LD_INT 1
1478: DEC
1479: ST_TO_ADDR
1480: LD_VAR 0 5
1484: PUSH
1485: FOR_TO
1486: IFFALSE 1635
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1488: LD_ADDR_OWVAR 21
1492: PUSH
1493: LD_VAR 0 5
1497: PUSH
1498: LD_VAR 0 2
1502: ARRAY
1503: PUSH
1504: LD_INT 1
1506: ARRAY
1507: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1508: LD_ADDR_OWVAR 37
1512: PUSH
1513: LD_VAR 0 5
1517: PUSH
1518: LD_VAR 0 2
1522: ARRAY
1523: PUSH
1524: LD_INT 2
1526: ARRAY
1527: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1528: LD_ADDR_OWVAR 39
1532: PUSH
1533: LD_VAR 0 5
1537: PUSH
1538: LD_VAR 0 2
1542: ARRAY
1543: PUSH
1544: LD_INT 3
1546: ARRAY
1547: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1548: LD_ADDR_OWVAR 38
1552: PUSH
1553: LD_VAR 0 5
1557: PUSH
1558: LD_VAR 0 2
1562: ARRAY
1563: PUSH
1564: LD_INT 4
1566: ARRAY
1567: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1568: LD_ADDR_OWVAR 40
1572: PUSH
1573: LD_VAR 0 5
1577: PUSH
1578: LD_VAR 0 2
1582: ARRAY
1583: PUSH
1584: LD_INT 5
1586: ARRAY
1587: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1588: LD_ADDR_OWVAR 41
1592: PUSH
1593: LD_INT 40
1595: ST_TO_ADDR
// veh = CreateVehicle ;
1596: LD_ADDR_VAR 0 4
1600: PUSH
1601: CALL_OW 45
1605: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1606: LD_VAR 0 4
1610: PPUSH
1611: LD_INT 3
1613: PPUSH
1614: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1618: LD_VAR 0 4
1622: PPUSH
1623: LD_INT 2
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 49
// end ;
1633: GO 1485
1635: POP
1636: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1637: LD_ADDR_VAR 0 6
1641: PUSH
1642: LD_INT 22
1644: PUSH
1645: LD_INT 1
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: LD_INT 21
1654: PUSH
1655: LD_INT 2
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 34
1664: PUSH
1665: LD_INT 12
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: PPUSH
1677: CALL_OW 69
1681: ST_TO_ADDR
// if cargoList then
1682: LD_VAR 0 6
1686: IFFALSE 1815
// for i = 1 to cargoList do
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: DOUBLE
1694: LD_INT 1
1696: DEC
1697: ST_TO_ADDR
1698: LD_VAR 0 6
1702: PUSH
1703: FOR_TO
1704: IFFALSE 1813
// begin if resources then
1706: LD_EXP 24
1710: IFFALSE 1811
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1712: LD_VAR 0 6
1716: PUSH
1717: LD_VAR 0 2
1721: ARRAY
1722: PPUSH
1723: LD_INT 1
1725: PPUSH
1726: LD_EXP 24
1730: PUSH
1731: LD_VAR 0 2
1735: ARRAY
1736: PUSH
1737: LD_INT 1
1739: ARRAY
1740: PPUSH
1741: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1745: LD_VAR 0 6
1749: PUSH
1750: LD_VAR 0 2
1754: ARRAY
1755: PPUSH
1756: LD_INT 2
1758: PPUSH
1759: LD_EXP 24
1763: PUSH
1764: LD_VAR 0 2
1768: ARRAY
1769: PUSH
1770: LD_INT 2
1772: ARRAY
1773: PPUSH
1774: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1778: LD_VAR 0 6
1782: PUSH
1783: LD_VAR 0 2
1787: ARRAY
1788: PPUSH
1789: LD_INT 3
1791: PPUSH
1792: LD_EXP 24
1796: PUSH
1797: LD_VAR 0 2
1801: ARRAY
1802: PUSH
1803: LD_INT 3
1805: ARRAY
1806: PPUSH
1807: CALL_OW 291
// end ; end ;
1811: GO 1703
1813: POP
1814: POP
// end ; end ;
1815: LD_VAR 0 1
1819: RET
// export function PowellSupport ; var i , veh , un ; begin
1820: LD_INT 0
1822: PPUSH
1823: PPUSH
1824: PPUSH
1825: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1826: LD_ADDR_VAR 0 2
1830: PUSH
1831: DOUBLE
1832: LD_INT 1
1834: DEC
1835: ST_TO_ADDR
1836: LD_INT 4
1838: PUSH
1839: LD_INT 3
1841: PUSH
1842: LD_INT 2
1844: PUSH
1845: LD_INT 2
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: PUSH
1854: LD_OWVAR 67
1858: ARRAY
1859: PUSH
1860: FOR_TO
1861: IFFALSE 2129
// begin uc_nation := 1 ;
1863: LD_ADDR_OWVAR 21
1867: PUSH
1868: LD_INT 1
1870: ST_TO_ADDR
// uc_side := 1 ;
1871: LD_ADDR_OWVAR 20
1875: PUSH
1876: LD_INT 1
1878: ST_TO_ADDR
// vc_engine := engine_siberite ;
1879: LD_ADDR_OWVAR 39
1883: PUSH
1884: LD_INT 3
1886: ST_TO_ADDR
// vc_control := control_manual ;
1887: LD_ADDR_OWVAR 38
1891: PUSH
1892: LD_INT 1
1894: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1895: LD_ADDR_OWVAR 40
1899: PUSH
1900: LD_INT 9
1902: PUSH
1903: LD_INT 6
1905: PUSH
1906: LD_INT 9
1908: PUSH
1909: LD_INT 5
1911: PUSH
1912: LD_INT 5
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: PUSH
1922: LD_OWVAR 67
1926: PUSH
1927: LD_INT 0
1929: PPUSH
1930: LD_INT 1
1932: PPUSH
1933: CALL_OW 12
1937: PLUS
1938: ARRAY
1939: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1940: LD_OWVAR 40
1944: PUSH
1945: LD_INT 6
1947: EQUAL
1948: IFFALSE 1977
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1950: LD_ADDR_OWVAR 37
1954: PUSH
1955: LD_INT 5
1957: PUSH
1958: LD_INT 4
1960: PUSH
1961: LD_INT 4
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: LIST
1968: PUSH
1969: LD_OWVAR 67
1973: ARRAY
1974: ST_TO_ADDR
1975: GO 2016
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 5 ) ] ;
1977: LD_ADDR_OWVAR 37
1981: PUSH
1982: LD_INT 5
1984: PUSH
1985: LD_INT 4
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: LD_INT 3
1993: PUSH
1994: LD_INT 2
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: LD_INT 1
2006: PPUSH
2007: LD_INT 5
2009: PPUSH
2010: CALL_OW 12
2014: ARRAY
2015: ST_TO_ADDR
// veh = CreateVehicle ;
2016: LD_ADDR_VAR 0 3
2020: PUSH
2021: CALL_OW 45
2025: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2026: LD_VAR 0 3
2030: PPUSH
2031: LD_INT 2
2033: PPUSH
2034: LD_INT 0
2036: PPUSH
2037: CALL_OW 49
// SetDir ( veh , 1 ) ;
2041: LD_VAR 0 3
2045: PPUSH
2046: LD_INT 1
2048: PPUSH
2049: CALL_OW 233
// hc_gallery :=  ;
2053: LD_ADDR_OWVAR 33
2057: PUSH
2058: LD_STRING 
2060: ST_TO_ADDR
// hc_name :=  ;
2061: LD_ADDR_OWVAR 26
2065: PUSH
2066: LD_STRING 
2068: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2069: LD_INT 0
2071: PPUSH
2072: LD_INT 3
2074: PPUSH
2075: LD_INT 9
2077: PUSH
2078: LD_INT 8
2080: PUSH
2081: LD_INT 8
2083: PUSH
2084: LD_INT 7
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: LD_OWVAR 67
2097: ARRAY
2098: PPUSH
2099: CALL_OW 380
// un := CreateHuman ;
2103: LD_ADDR_VAR 0 4
2107: PUSH
2108: CALL_OW 44
2112: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2113: LD_VAR 0 4
2117: PPUSH
2118: LD_VAR 0 3
2122: PPUSH
2123: CALL_OW 52
// end ;
2127: GO 1860
2129: POP
2130: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2131: LD_ADDR_VAR 0 2
2135: PUSH
2136: DOUBLE
2137: LD_INT 1
2139: DEC
2140: ST_TO_ADDR
2141: LD_INT 2
2143: PUSH
2144: LD_INT 2
2146: PUSH
2147: LD_INT 2
2149: PUSH
2150: LD_INT 1
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_OWVAR 67
2163: ARRAY
2164: PUSH
2165: FOR_TO
2166: IFFALSE 2241
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2168: LD_INT 0
2170: PPUSH
2171: LD_INT 1
2173: PPUSH
2174: LD_INT 9
2176: PUSH
2177: LD_INT 8
2179: PUSH
2180: LD_INT 8
2182: PUSH
2183: LD_INT 7
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: PUSH
2192: LD_OWVAR 67
2196: ARRAY
2197: PPUSH
2198: CALL_OW 380
// un := CreateHuman ;
2202: LD_ADDR_VAR 0 4
2206: PUSH
2207: CALL_OW 44
2211: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2212: LD_VAR 0 4
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2224: LD_VAR 0 4
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 0
2234: PPUSH
2235: CALL_OW 49
// end ;
2239: GO 2165
2241: POP
2242: POP
// end ; end_of_file
2243: LD_VAR 0 1
2247: RET
// export function PrepareBurlak ; begin
2248: LD_INT 0
2250: PPUSH
// uc_side := 7 ;
2251: LD_ADDR_OWVAR 20
2255: PUSH
2256: LD_INT 7
2258: ST_TO_ADDR
// uc_nation := 3 ;
2259: LD_ADDR_OWVAR 21
2263: PUSH
2264: LD_INT 3
2266: ST_TO_ADDR
// vc_engine := engine_siberite ;
2267: LD_ADDR_OWVAR 39
2271: PUSH
2272: LD_INT 3
2274: ST_TO_ADDR
// vc_control := control_manual ;
2275: LD_ADDR_OWVAR 38
2279: PUSH
2280: LD_INT 1
2282: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2283: LD_ADDR_OWVAR 40
2287: PUSH
2288: LD_INT 44
2290: PUSH
2291: LD_INT 45
2293: PUSH
2294: LD_INT 46
2296: PUSH
2297: LD_INT 46
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: PUSH
2306: LD_OWVAR 67
2310: ARRAY
2311: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2312: LD_ADDR_OWVAR 37
2316: PUSH
2317: LD_INT 24
2319: ST_TO_ADDR
// Masha := CreateVehicle ;
2320: LD_ADDR_EXP 18
2324: PUSH
2325: CALL_OW 45
2329: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2330: LD_EXP 18
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2342: LD_EXP 18
2346: PPUSH
2347: LD_INT 3
2349: PPUSH
2350: LD_INT 0
2352: PPUSH
2353: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2357: LD_EXP 18
2361: PPUSH
2362: LD_INT 1
2364: PPUSH
2365: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2369: LD_ADDR_EXP 17
2373: PUSH
2374: LD_STRING Burlak
2376: PPUSH
2377: LD_INT 0
2379: PPUSH
2380: LD_STRING 
2382: PPUSH
2383: CALL 29392 0 3
2387: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2388: LD_EXP 17
2392: PPUSH
2393: LD_EXP 18
2397: PPUSH
2398: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2402: LD_EXP 18
2406: PPUSH
2407: LD_INT 107
2409: PPUSH
2410: LD_INT 118
2412: PPUSH
2413: CALL_OW 114
// spawnBurlak := 1 ;
2417: LD_ADDR_EXP 27
2421: PUSH
2422: LD_INT 1
2424: ST_TO_ADDR
// end ;
2425: LD_VAR 0 1
2429: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2430: LD_INT 0
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
2436: PPUSH
// uc_side := 7 ;
2437: LD_ADDR_OWVAR 20
2441: PUSH
2442: LD_INT 7
2444: ST_TO_ADDR
// uc_nation := 3 ;
2445: LD_ADDR_OWVAR 21
2449: PUSH
2450: LD_INT 3
2452: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2453: LD_ADDR_EXP 19
2457: PUSH
2458: LD_STRING Gnyevko
2460: PPUSH
2461: LD_INT 0
2463: PPUSH
2464: LD_STRING 
2466: PPUSH
2467: CALL 29392 0 3
2471: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2472: LD_ADDR_EXP 20
2476: PUSH
2477: LD_STRING Titov
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: LD_STRING 
2485: PPUSH
2486: CALL 29392 0 3
2490: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2491: LD_ADDR_EXP 21
2495: PUSH
2496: LD_STRING Xavier2
2498: PPUSH
2499: LD_INT 0
2501: PPUSH
2502: LD_STRING 
2504: PPUSH
2505: CALL 29392 0 3
2509: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2510: LD_ADDR_EXP 22
2514: PUSH
2515: LD_STRING Belkov
2517: PPUSH
2518: LD_INT 0
2520: PPUSH
2521: LD_STRING 
2523: PPUSH
2524: CALL 29392 0 3
2528: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2529: LD_ADDR_EXP 23
2533: PUSH
2534: LD_STRING Lipshchin
2536: PPUSH
2537: LD_INT 0
2539: PPUSH
2540: LD_STRING 
2542: PPUSH
2543: CALL 29392 0 3
2547: ST_TO_ADDR
// for i = 1 to 5 do
2548: LD_ADDR_VAR 0 2
2552: PUSH
2553: DOUBLE
2554: LD_INT 1
2556: DEC
2557: ST_TO_ADDR
2558: LD_INT 5
2560: PUSH
2561: FOR_TO
2562: IFFALSE 2687
// begin vc_engine := engine_siberite ;
2564: LD_ADDR_OWVAR 39
2568: PUSH
2569: LD_INT 3
2571: ST_TO_ADDR
// vc_control := control_manual ;
2572: LD_ADDR_OWVAR 38
2576: PUSH
2577: LD_INT 1
2579: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2580: LD_ADDR_OWVAR 40
2584: PUSH
2585: LD_INT 43
2587: PUSH
2588: LD_INT 45
2590: PUSH
2591: LD_INT 45
2593: PUSH
2594: LD_INT 44
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: PUSH
2607: LD_INT 1
2609: PPUSH
2610: LD_INT 5
2612: PPUSH
2613: CALL_OW 12
2617: ARRAY
2618: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2619: LD_ADDR_OWVAR 37
2623: PUSH
2624: LD_INT 22
2626: PUSH
2627: LD_INT 22
2629: PUSH
2630: LD_INT 24
2632: PUSH
2633: LD_INT 24
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: LD_OWVAR 67
2646: ARRAY
2647: ST_TO_ADDR
// veh = CreateVehicle ;
2648: LD_ADDR_VAR 0 3
2652: PUSH
2653: CALL_OW 45
2657: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2658: LD_VAR 0 3
2662: PPUSH
2663: LD_INT 2
2665: PPUSH
2666: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2670: LD_VAR 0 3
2674: PPUSH
2675: LD_INT 3
2677: PPUSH
2678: LD_INT 0
2680: PPUSH
2681: CALL_OW 49
// end ;
2685: GO 2561
2687: POP
2688: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2689: LD_ADDR_VAR 0 4
2693: PUSH
2694: LD_INT 22
2696: PUSH
2697: LD_INT 7
2699: PUSH
2700: EMPTY
2701: LIST
2702: LIST
2703: PUSH
2704: LD_INT 21
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: PUSH
2714: LD_INT 58
2716: PUSH
2717: EMPTY
2718: LIST
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PPUSH
2725: CALL_OW 69
2729: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2730: LD_EXP 19
2734: PPUSH
2735: LD_VAR 0 4
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PPUSH
2744: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2748: LD_EXP 20
2752: PPUSH
2753: LD_VAR 0 4
2757: PUSH
2758: LD_INT 2
2760: ARRAY
2761: PPUSH
2762: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2766: LD_EXP 21
2770: PPUSH
2771: LD_VAR 0 4
2775: PUSH
2776: LD_INT 3
2778: ARRAY
2779: PPUSH
2780: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2784: LD_EXP 22
2788: PPUSH
2789: LD_VAR 0 4
2793: PUSH
2794: LD_INT 4
2796: ARRAY
2797: PPUSH
2798: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2802: LD_EXP 23
2806: PPUSH
2807: LD_VAR 0 4
2811: PUSH
2812: LD_INT 5
2814: ARRAY
2815: PPUSH
2816: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2820: LD_EXP 19
2824: PPUSH
2825: LD_INT 3
2827: PPUSH
2828: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2832: LD_EXP 20
2836: PUSH
2837: LD_EXP 23
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: LD_INT 9
2848: PPUSH
2849: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2853: LD_ADDR_VAR 0 4
2857: PUSH
2858: LD_INT 22
2860: PUSH
2861: LD_INT 7
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 69
2872: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2873: LD_VAR 0 4
2877: PPUSH
2878: LD_INT 107
2880: PPUSH
2881: LD_INT 118
2883: PPUSH
2884: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2888: LD_INT 35
2890: PPUSH
2891: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2895: LD_VAR 0 4
2899: PPUSH
2900: LD_INT 34
2902: PUSH
2903: LD_INT 49
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PPUSH
2910: CALL_OW 72
2914: PPUSH
2915: LD_EXP 18
2919: PPUSH
2920: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2924: LD_VAR 0 4
2928: PPUSH
2929: LD_INT 3
2931: PUSH
2932: LD_INT 34
2934: PUSH
2935: LD_INT 49
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PPUSH
2946: CALL_OW 72
2950: PPUSH
2951: LD_INT 107
2953: PPUSH
2954: LD_INT 118
2956: PPUSH
2957: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2961: LD_ADDR_VAR 0 5
2965: PUSH
2966: LD_EXP 20
2970: PUSH
2971: LD_EXP 23
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PPUSH
2980: LD_INT 50
2982: PUSH
2983: EMPTY
2984: LIST
2985: PUSH
2986: LD_INT 3
2988: PUSH
2989: LD_INT 54
2991: PUSH
2992: EMPTY
2993: LIST
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: PPUSH
3003: CALL_OW 72
3007: ST_TO_ADDR
// if bazooka then
3008: LD_VAR 0 5
3012: IFFALSE 3054
// begin for i in bazooka do
3014: LD_ADDR_VAR 0 2
3018: PUSH
3019: LD_VAR 0 5
3023: PUSH
3024: FOR_IN
3025: IFFALSE 3052
// if See ( 1 , i ) then
3027: LD_INT 1
3029: PPUSH
3030: LD_VAR 0 2
3034: PPUSH
3035: CALL_OW 292
3039: IFFALSE 3050
// ComSpaceTimeShoot ( i ) ;
3041: LD_VAR 0 2
3045: PPUSH
3046: CALL 30339 0 1
3050: GO 3024
3052: POP
3053: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3054: LD_VAR 0 4
3058: PPUSH
3059: LD_INT 34
3061: PUSH
3062: LD_INT 49
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: PPUSH
3069: CALL_OW 72
3073: PUSH
3074: LD_INT 0
3076: EQUAL
3077: PUSH
3078: LD_EXP 18
3082: PPUSH
3083: CALL_OW 303
3087: OR
3088: IFFALSE 2888
// repeat wait ( 0 0$1 ) ;
3090: LD_INT 35
3092: PPUSH
3093: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3097: LD_ADDR_VAR 0 4
3101: PUSH
3102: LD_INT 22
3104: PUSH
3105: LD_INT 7
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 69
3116: PUSH
3117: LD_EXP 17
3121: DIFF
3122: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3123: LD_VAR 0 4
3127: PPUSH
3128: LD_INT 107
3130: PPUSH
3131: LD_INT 118
3133: PPUSH
3134: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3138: LD_ADDR_VAR 0 5
3142: PUSH
3143: LD_EXP 20
3147: PUSH
3148: LD_EXP 23
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: PPUSH
3157: LD_INT 50
3159: PUSH
3160: EMPTY
3161: LIST
3162: PUSH
3163: LD_INT 3
3165: PUSH
3166: LD_INT 54
3168: PUSH
3169: EMPTY
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PPUSH
3180: CALL_OW 72
3184: ST_TO_ADDR
// if bazooka then
3185: LD_VAR 0 5
3189: IFFALSE 3231
// begin for i in bazooka do
3191: LD_ADDR_VAR 0 2
3195: PUSH
3196: LD_VAR 0 5
3200: PUSH
3201: FOR_IN
3202: IFFALSE 3229
// if See ( 1 , i ) then
3204: LD_INT 1
3206: PPUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: CALL_OW 292
3216: IFFALSE 3227
// ComSpaceTimeShoot ( i ) ;
3218: LD_VAR 0 2
3222: PPUSH
3223: CALL 30339 0 1
3227: GO 3201
3229: POP
3230: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3231: LD_EXP 17
3235: PPUSH
3236: CALL_OW 302
3240: PUSH
3241: LD_EXP 17
3245: PPUSH
3246: CALL_OW 310
3250: NOT
3251: AND
3252: IFFALSE 3269
// ComMoveXY ( Burlak , 107 , 118 ) ;
3254: LD_EXP 17
3258: PPUSH
3259: LD_INT 107
3261: PPUSH
3262: LD_INT 118
3264: PPUSH
3265: CALL_OW 111
// until not tmp ;
3269: LD_VAR 0 4
3273: NOT
3274: IFFALSE 3090
// end ;
3276: LD_VAR 0 1
3280: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3281: LD_INT 0
3283: PPUSH
3284: PPUSH
3285: PPUSH
3286: PPUSH
3287: PPUSH
3288: PPUSH
// result := [ ] ;
3289: LD_ADDR_VAR 0 1
3293: PUSH
3294: EMPTY
3295: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3296: LD_ADDR_VAR 0 6
3300: PUSH
3301: LD_INT 1
3303: PPUSH
3304: LD_INT 2
3306: PPUSH
3307: CALL_OW 12
3311: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3312: LD_ADDR_VAR 0 5
3316: PUSH
3317: LD_INT 8
3319: PUSH
3320: LD_INT 9
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: PUSH
3327: LD_VAR 0 6
3331: ARRAY
3332: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 9 ] [ Difficulty ] do
3333: LD_ADDR_VAR 0 2
3337: PUSH
3338: DOUBLE
3339: LD_INT 1
3341: DEC
3342: ST_TO_ADDR
3343: LD_INT 6
3345: PUSH
3346: LD_INT 7
3348: PUSH
3349: LD_INT 8
3351: PUSH
3352: LD_INT 9
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: PUSH
3361: LD_OWVAR 67
3365: ARRAY
3366: PUSH
3367: FOR_TO
3368: IFFALSE 3584
// begin uc_side := 3 ;
3370: LD_ADDR_OWVAR 20
3374: PUSH
3375: LD_INT 3
3377: ST_TO_ADDR
// uc_nation := 3 ;
3378: LD_ADDR_OWVAR 21
3382: PUSH
3383: LD_INT 3
3385: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3386: LD_INT 24
3388: PPUSH
3389: LD_INT 3
3391: PPUSH
3392: LD_INT 1
3394: PUSH
3395: LD_INT 3
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 1
3404: PPUSH
3405: LD_INT 2
3407: PPUSH
3408: CALL_OW 12
3412: ARRAY
3413: PPUSH
3414: LD_INT 46
3416: PUSH
3417: LD_INT 46
3419: PUSH
3420: LD_INT 45
3422: PUSH
3423: LD_INT 47
3425: PUSH
3426: LD_INT 49
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: PUSH
3436: LD_INT 1
3438: PPUSH
3439: LD_INT 5
3441: PPUSH
3442: CALL_OW 12
3446: ARRAY
3447: PPUSH
3448: LD_INT 100
3450: PPUSH
3451: CALL 34256 0 5
// veh := CreateVehicle ;
3455: LD_ADDR_VAR 0 4
3459: PUSH
3460: CALL_OW 45
3464: ST_TO_ADDR
// result := Join ( result , veh ) ;
3465: LD_ADDR_VAR 0 1
3469: PUSH
3470: LD_VAR 0 1
3474: PPUSH
3475: LD_VAR 0 4
3479: PPUSH
3480: CALL 66073 0 2
3484: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3485: LD_VAR 0 4
3489: PPUSH
3490: LD_INT 3
3492: PUSH
3493: LD_INT 5
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_VAR 0 6
3504: ARRAY
3505: PPUSH
3506: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3510: LD_VAR 0 4
3514: PPUSH
3515: LD_VAR 0 5
3519: PPUSH
3520: LD_INT 0
3522: PPUSH
3523: CALL_OW 49
// if vc_control = control_manual then
3527: LD_OWVAR 38
3531: PUSH
3532: LD_INT 1
3534: EQUAL
3535: IFFALSE 3582
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3537: LD_INT 0
3539: PPUSH
3540: LD_INT 7
3542: PUSH
3543: LD_INT 8
3545: PUSH
3546: LD_INT 9
3548: PUSH
3549: LD_INT 10
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_OWVAR 67
3562: ARRAY
3563: PPUSH
3564: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3568: CALL_OW 44
3572: PPUSH
3573: LD_VAR 0 4
3577: PPUSH
3578: CALL_OW 52
// end ; end ;
3582: GO 3367
3584: POP
3585: POP
// for i in result do
3586: LD_ADDR_VAR 0 2
3590: PUSH
3591: LD_VAR 0 1
3595: PUSH
3596: FOR_IN
3597: IFFALSE 3613
// SetTag ( i , 10 ) ;
3599: LD_VAR 0 2
3603: PPUSH
3604: LD_INT 10
3606: PPUSH
3607: CALL_OW 109
3611: GO 3596
3613: POP
3614: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3615: LD_EXP 44
3619: PPUSH
3620: CALL_OW 427
// end ; end_of_file
3624: LD_VAR 0 1
3628: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3629: LD_INT 0
3631: PPUSH
3632: PPUSH
3633: PPUSH
// rnd := 0 ;
3634: LD_ADDR_VAR 0 3
3638: PUSH
3639: LD_INT 0
3641: ST_TO_ADDR
// uc_side := 8 ;
3642: LD_ADDR_OWVAR 20
3646: PUSH
3647: LD_INT 8
3649: ST_TO_ADDR
// uc_nation := 2 ;
3650: LD_ADDR_OWVAR 21
3654: PUSH
3655: LD_INT 2
3657: ST_TO_ADDR
// hc_name :=  ;
3658: LD_ADDR_OWVAR 26
3662: PUSH
3663: LD_STRING 
3665: ST_TO_ADDR
// hc_gallery :=  ;
3666: LD_ADDR_OWVAR 33
3670: PUSH
3671: LD_STRING 
3673: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3674: LD_ADDR_OWVAR 29
3678: PUSH
3679: LD_INT 10
3681: PUSH
3682: LD_INT 11
3684: PUSH
3685: LD_INT 12
3687: PUSH
3688: LD_INT 12
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_OWVAR 67
3701: ARRAY
3702: PUSH
3703: LD_INT 10
3705: PUSH
3706: LD_INT 11
3708: PUSH
3709: LD_INT 12
3711: PUSH
3712: LD_INT 12
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: PUSH
3721: LD_OWVAR 67
3725: ARRAY
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3731: LD_INT 0
3733: PPUSH
3734: LD_INT 4
3736: PPUSH
3737: LD_INT 7
3739: PUSH
3740: LD_INT 8
3742: PUSH
3743: LD_INT 9
3745: PUSH
3746: LD_INT 10
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: PUSH
3755: LD_OWVAR 67
3759: ARRAY
3760: PPUSH
3761: CALL_OW 380
// un := CreateHuman ;
3765: LD_ADDR_VAR 0 2
3769: PUSH
3770: CALL_OW 44
3774: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3775: LD_VAR 0 2
3779: PPUSH
3780: LD_INT 8
3782: PUSH
3783: LD_INT 9
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 1
3792: PPUSH
3793: LD_INT 2
3795: PPUSH
3796: CALL_OW 12
3800: ARRAY
3801: PPUSH
3802: LD_INT 0
3804: PPUSH
3805: CALL_OW 49
// SetTag ( un , 1 ) ;
3809: LD_VAR 0 2
3813: PPUSH
3814: LD_INT 1
3816: PPUSH
3817: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3821: LD_ADDR_VAR 0 3
3825: PUSH
3826: LD_INT 1
3828: PPUSH
3829: LD_EXP 31
3833: PPUSH
3834: CALL_OW 12
3838: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3839: LD_VAR 0 2
3843: PPUSH
3844: LD_EXP 31
3848: PUSH
3849: LD_VAR 0 3
3853: ARRAY
3854: PUSH
3855: LD_INT 1
3857: ARRAY
3858: PPUSH
3859: LD_EXP 31
3863: PUSH
3864: LD_VAR 0 3
3868: ARRAY
3869: PUSH
3870: LD_INT 2
3872: ARRAY
3873: PPUSH
3874: CALL_OW 158
// end ;
3878: LD_VAR 0 1
3882: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3883: LD_INT 22
3885: PUSH
3886: LD_INT 8
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: PUSH
3893: LD_INT 3
3895: PUSH
3896: LD_INT 61
3898: PUSH
3899: EMPTY
3900: LIST
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: PUSH
3906: LD_INT 50
3908: PUSH
3909: EMPTY
3910: LIST
3911: PUSH
3912: LD_INT 33
3914: PUSH
3915: LD_INT 2
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: PPUSH
3928: CALL_OW 69
3932: IFFALSE 4019
3934: GO 3936
3936: DISABLE
3937: LD_INT 0
3939: PPUSH
// begin enable ;
3940: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3941: LD_ADDR_VAR 0 1
3945: PUSH
3946: LD_INT 22
3948: PUSH
3949: LD_INT 8
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: PUSH
3956: LD_INT 3
3958: PUSH
3959: LD_INT 61
3961: PUSH
3962: EMPTY
3963: LIST
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 50
3971: PUSH
3972: EMPTY
3973: LIST
3974: PUSH
3975: LD_INT 33
3977: PUSH
3978: LD_INT 2
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: PPUSH
3991: CALL_OW 69
3995: PUSH
3996: FOR_IN
3997: IFFALSE 4017
// begin wait ( 0 0$0.3 ) ;
3999: LD_INT 10
4001: PPUSH
4002: CALL_OW 67
// Connect ( i ) ;
4006: LD_VAR 0 1
4010: PPUSH
4011: CALL 37349 0 1
// end ;
4015: GO 3996
4017: POP
4018: POP
// end ;
4019: PPOPN 1
4021: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4022: LD_INT 0
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
4029: PPUSH
4030: PPUSH
4031: PPUSH
4032: PPUSH
// result := [ ] ;
4033: LD_ADDR_VAR 0 1
4037: PUSH
4038: EMPTY
4039: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4040: LD_ADDR_EXP 33
4044: PUSH
4045: LD_EXP 33
4049: PUSH
4050: LD_INT 1
4052: PLUS
4053: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4054: LD_INT 22
4056: PUSH
4057: LD_INT 8
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: LD_INT 3
4066: PUSH
4067: LD_INT 58
4069: PUSH
4070: EMPTY
4071: LIST
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PUSH
4077: LD_INT 34
4079: PUSH
4080: LD_INT 31
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: PPUSH
4092: CALL_OW 69
4096: PUSH
4097: LD_INT 2
4099: LESS
4100: IFFALSE 4344
// begin uc_side := 8 ;
4102: LD_ADDR_OWVAR 20
4106: PUSH
4107: LD_INT 8
4109: ST_TO_ADDR
// uc_nation := 2 ;
4110: LD_ADDR_OWVAR 21
4114: PUSH
4115: LD_INT 2
4117: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4118: LD_INT 14
4120: PPUSH
4121: LD_INT 3
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: LD_INT 31
4129: PPUSH
4130: LD_INT 100
4132: PPUSH
4133: CALL 34256 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: DOUBLE
4143: LD_INT 22
4145: PUSH
4146: LD_INT 8
4148: PUSH
4149: EMPTY
4150: LIST
4151: LIST
4152: PUSH
4153: LD_INT 3
4155: PUSH
4156: LD_INT 58
4158: PUSH
4159: EMPTY
4160: LIST
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 34
4168: PUSH
4169: LD_INT 31
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: LIST
4180: PPUSH
4181: CALL_OW 69
4185: PUSH
4186: LD_INT 1
4188: PLUS
4189: DEC
4190: ST_TO_ADDR
4191: LD_INT 2
4193: PUSH
4194: FOR_TO
4195: IFFALSE 4342
// begin veh := CreateVehicle ;
4197: LD_ADDR_VAR 0 3
4201: PUSH
4202: CALL_OW 45
4206: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4207: LD_VAR 0 3
4211: PPUSH
4212: LD_INT 5
4214: PPUSH
4215: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4219: LD_ADDR_VAR 0 4
4223: PUSH
4224: LD_INT 181
4226: PUSH
4227: LD_INT 105
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 137
4236: PUSH
4237: LD_INT 6
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: LD_VAR 0 2
4252: PUSH
4253: LD_INT 2
4255: MOD
4256: PUSH
4257: LD_INT 1
4259: PLUS
4260: ARRAY
4261: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4262: LD_VAR 0 3
4266: PPUSH
4267: LD_VAR 0 4
4271: PUSH
4272: LD_INT 1
4274: ARRAY
4275: PPUSH
4276: LD_VAR 0 4
4280: PUSH
4281: LD_INT 2
4283: ARRAY
4284: PPUSH
4285: LD_INT 12
4287: PPUSH
4288: LD_INT 0
4290: PPUSH
4291: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4295: LD_INT 0
4297: PPUSH
4298: LD_INT 7
4300: PUSH
4301: LD_INT 9
4303: PUSH
4304: LD_INT 10
4306: PUSH
4307: LD_INT 10
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: PUSH
4316: LD_OWVAR 67
4320: ARRAY
4321: PPUSH
4322: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4326: CALL_OW 44
4330: PPUSH
4331: LD_VAR 0 3
4335: PPUSH
4336: CALL_OW 52
// end ;
4340: GO 4194
4342: POP
4343: POP
// end ; dir := rand ( 1 , 2 ) ;
4344: LD_ADDR_VAR 0 9
4348: PUSH
4349: LD_INT 1
4351: PPUSH
4352: LD_INT 2
4354: PPUSH
4355: CALL_OW 12
4359: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4360: LD_ADDR_VAR 0 6
4364: PUSH
4365: LD_INT 8
4367: PUSH
4368: LD_INT 9
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: LD_VAR 0 9
4379: ARRAY
4380: ST_TO_ADDR
// counter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] + arabianAttacksCounter ;
4381: LD_ADDR_VAR 0 7
4385: PUSH
4386: LD_INT 4
4388: PUSH
4389: LD_INT 5
4391: PUSH
4392: LD_INT 6
4394: PUSH
4395: LD_INT 7
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: PUSH
4404: LD_OWVAR 67
4408: ARRAY
4409: PUSH
4410: LD_EXP 33
4414: PLUS
4415: ST_TO_ADDR
// if counter > 20 then
4416: LD_VAR 0 7
4420: PUSH
4421: LD_INT 20
4423: GREATER
4424: IFFALSE 4434
// counter := 20 ;
4426: LD_ADDR_VAR 0 7
4430: PUSH
4431: LD_INT 20
4433: ST_TO_ADDR
// for i := 1 to counter do
4434: LD_ADDR_VAR 0 2
4438: PUSH
4439: DOUBLE
4440: LD_INT 1
4442: DEC
4443: ST_TO_ADDR
4444: LD_VAR 0 7
4448: PUSH
4449: FOR_TO
4450: IFFALSE 4765
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 5 ) ] , 100 ) ;
4452: LD_INT 13
4454: PUSH
4455: LD_INT 14
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: LD_INT 1
4464: PPUSH
4465: LD_INT 2
4467: PPUSH
4468: CALL_OW 12
4472: ARRAY
4473: PPUSH
4474: LD_INT 3
4476: PPUSH
4477: LD_INT 1
4479: PUSH
4480: LD_INT 2
4482: PUSH
4483: LD_INT 5
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: PUSH
4491: LD_INT 1
4493: PPUSH
4494: LD_INT 3
4496: PPUSH
4497: CALL_OW 12
4501: ARRAY
4502: PPUSH
4503: LD_INT 27
4505: PUSH
4506: LD_INT 28
4508: PUSH
4509: LD_EXP 50
4513: PUSH
4514: LD_INT 29
4516: PUSH
4517: LD_INT 25
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 1
4529: PPUSH
4530: LD_INT 5
4532: PPUSH
4533: CALL_OW 12
4537: ARRAY
4538: PPUSH
4539: LD_INT 100
4541: PPUSH
4542: CALL 34256 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4546: LD_OWVAR 40
4550: PUSH
4551: LD_INT 29
4553: EQUAL
4554: IFFALSE 4564
// vc_control := control_remote ;
4556: LD_ADDR_OWVAR 38
4560: PUSH
4561: LD_INT 2
4563: ST_TO_ADDR
// veh := CreateVehicle ;
4564: LD_ADDR_VAR 0 3
4568: PUSH
4569: CALL_OW 45
4573: ST_TO_ADDR
// result := Join ( result , veh ) ;
4574: LD_ADDR_VAR 0 1
4578: PUSH
4579: LD_VAR 0 1
4583: PPUSH
4584: LD_VAR 0 3
4588: PPUSH
4589: CALL 66073 0 2
4593: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4594: LD_VAR 0 3
4598: PPUSH
4599: LD_INT 3
4601: PUSH
4602: LD_INT 5
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: LD_VAR 0 9
4613: ARRAY
4614: PPUSH
4615: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4619: LD_VAR 0 3
4623: PPUSH
4624: LD_VAR 0 6
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 49
// if vc_control = control_manual then
4636: LD_OWVAR 38
4640: PUSH
4641: LD_INT 1
4643: EQUAL
4644: IFFALSE 4691
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4646: LD_INT 0
4648: PPUSH
4649: LD_INT 7
4651: PUSH
4652: LD_INT 8
4654: PUSH
4655: LD_INT 9
4657: PUSH
4658: LD_INT 10
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: PUSH
4667: LD_OWVAR 67
4671: ARRAY
4672: PPUSH
4673: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4677: CALL_OW 44
4681: PPUSH
4682: LD_VAR 0 3
4686: PPUSH
4687: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4691: LD_INT 10
4693: PPUSH
4694: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4698: LD_VAR 0 3
4702: PPUSH
4703: CALL_OW 263
4707: PUSH
4708: LD_INT 2
4710: EQUAL
4711: PUSH
4712: LD_VAR 0 3
4716: PPUSH
4717: CALL_OW 312
4721: NOT
4722: AND
4723: IFFALSE 4741
// begin Connect ( veh ) ;
4725: LD_VAR 0 3
4729: PPUSH
4730: CALL 37349 0 1
// wait ( 0 0$0.3 ) ;
4734: LD_INT 10
4736: PPUSH
4737: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4741: LD_VAR 0 3
4745: PPUSH
4746: LD_INT 100
4748: PPUSH
4749: LD_INT 55
4751: PPUSH
4752: CALL_OW 114
// wait ( 0 0$0.3 ) ;
4756: LD_INT 10
4758: PPUSH
4759: CALL_OW 67
// end ;
4763: GO 4449
4765: POP
4766: POP
// if sibDeposits and arabianAttacksCounter mod 5 = 0 then
4767: LD_EXP 31
4771: PUSH
4772: LD_EXP 33
4776: PUSH
4777: LD_INT 5
4779: MOD
4780: PUSH
4781: LD_INT 0
4783: EQUAL
4784: AND
4785: IFFALSE 4923
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4787: LD_ADDR_VAR 0 2
4791: PUSH
4792: DOUBLE
4793: LD_INT 1
4795: DEC
4796: ST_TO_ADDR
4797: LD_INT 3
4799: PUSH
4800: LD_INT 4
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: LD_INT 5
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: PUSH
4815: LD_OWVAR 67
4819: ARRAY
4820: PUSH
4821: FOR_TO
4822: IFFALSE 4917
// begin PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4824: LD_INT 0
4826: PPUSH
4827: LD_INT 1
4829: PPUSH
4830: LD_INT 7
4832: PUSH
4833: LD_INT 8
4835: PUSH
4836: LD_INT 9
4838: PUSH
4839: LD_INT 10
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: PUSH
4848: LD_OWVAR 67
4852: ARRAY
4853: PPUSH
4854: CALL_OW 380
// un := CreateHuman ;
4858: LD_ADDR_VAR 0 5
4862: PUSH
4863: CALL_OW 44
4867: ST_TO_ADDR
// result := Join ( result , un ) ;
4868: LD_ADDR_VAR 0 1
4872: PUSH
4873: LD_VAR 0 1
4877: PPUSH
4878: LD_VAR 0 5
4882: PPUSH
4883: CALL 66073 0 2
4887: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
4888: LD_VAR 0 5
4892: PPUSH
4893: LD_INT 8
4895: PPUSH
4896: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
4900: LD_VAR 0 5
4904: PPUSH
4905: LD_INT 16
4907: PPUSH
4908: LD_INT 0
4910: PPUSH
4911: CALL_OW 49
// end ;
4915: GO 4821
4917: POP
4918: POP
// DestroySibDeposit ;
4919: CALL 3629 0 0
// end ; for i in result do
4923: LD_ADDR_VAR 0 2
4927: PUSH
4928: LD_VAR 0 1
4932: PUSH
4933: FOR_IN
4934: IFFALSE 4950
// SetTag ( i , 10 ) ;
4936: LD_VAR 0 2
4940: PPUSH
4941: LD_INT 10
4943: PPUSH
4944: CALL_OW 109
4948: GO 4933
4950: POP
4951: POP
// RaiseSailEvent ( eventArabianAttack ) ;
4952: LD_EXP 43
4956: PPUSH
4957: CALL_OW 427
// end ; end_of_file
4961: LD_VAR 0 1
4965: RET
// export function Action ; begin
4966: LD_INT 0
4968: PPUSH
// InGameOn ;
4969: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
4973: LD_INT 22
4975: PUSH
4976: LD_INT 1
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: LD_INT 21
4985: PUSH
4986: LD_INT 2
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PPUSH
4997: CALL_OW 69
5001: PUSH
5002: LD_INT 1
5004: ARRAY
5005: PPUSH
5006: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5010: LD_INT 22
5012: PUSH
5013: LD_INT 1
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 21
5022: PUSH
5023: LD_INT 2
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PPUSH
5034: CALL_OW 69
5038: PPUSH
5039: LD_INT 69
5041: PPUSH
5042: LD_INT 94
5044: PPUSH
5045: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5049: LD_EXP 1
5053: PPUSH
5054: LD_STRING D2-JMM-1
5056: PPUSH
5057: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
5061: LD_INT 22
5063: PUSH
5064: LD_INT 1
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: LD_INT 21
5073: PUSH
5074: LD_INT 2
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: PPUSH
5085: CALL_OW 69
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5098: LD_EXP 2
5102: PPUSH
5103: LD_STRING D2-Huck-1
5105: PPUSH
5106: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
5110: LD_INT 22
5112: PUSH
5113: LD_INT 1
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: LD_INT 21
5122: PUSH
5123: LD_INT 2
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: PPUSH
5134: CALL_OW 69
5138: PUSH
5139: LD_INT 1
5141: ARRAY
5142: PPUSH
5143: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5147: LD_EXP 1
5151: PPUSH
5152: LD_STRING D2-JMM-2
5154: PPUSH
5155: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
5159: LD_INT 22
5161: PUSH
5162: LD_INT 1
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 2
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: PPUSH
5183: CALL_OW 69
5187: PUSH
5188: LD_INT 1
5190: ARRAY
5191: PPUSH
5192: CALL_OW 87
// InGameOff ;
5196: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5200: LD_STRING M1
5202: PPUSH
5203: CALL_OW 337
// SaveForQuickRestart ;
5207: CALL_OW 22
// end ;
5211: LD_VAR 0 1
5215: RET
// every 10 10$0 do
5216: GO 5218
5218: DISABLE
// begin DialogueOn ;
5219: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5223: LD_EXP 15
5227: PPUSH
5228: LD_STRING D3-Pow-1
5230: PPUSH
5231: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5235: LD_EXP 1
5239: PPUSH
5240: LD_STRING D3-JMM-1
5242: PPUSH
5243: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5247: LD_EXP 15
5251: PPUSH
5252: LD_STRING D3-Pow-2
5254: PPUSH
5255: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5259: LD_EXP 1
5263: PPUSH
5264: LD_STRING D3-JMM-2
5266: PPUSH
5267: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5271: LD_EXP 15
5275: PPUSH
5276: LD_STRING D3-Pow-3
5278: PPUSH
5279: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5283: LD_EXP 1
5287: PPUSH
5288: LD_STRING D3-JMM-3
5290: PPUSH
5291: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5295: LD_EXP 15
5299: PPUSH
5300: LD_STRING D3-Pow-4
5302: PPUSH
5303: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5307: LD_EXP 1
5311: PPUSH
5312: LD_STRING D3-JMM-4
5314: PPUSH
5315: CALL_OW 88
// DialogueOff ;
5319: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5323: LD_STRING M2
5325: PPUSH
5326: CALL_OW 337
// wait ( 2 2$30 ) ;
5330: LD_INT 5250
5332: PPUSH
5333: CALL_OW 67
// PrepareBurlak ;
5337: CALL 2248 0 0
// BurlakArmy ;
5341: CALL 2430 0 0
// end ;
5345: END
// every 0 0$1 trigger See ( 1 , Masha ) do
5346: LD_INT 1
5348: PPUSH
5349: LD_EXP 18
5353: PPUSH
5354: CALL_OW 292
5358: IFFALSE 5517
5360: GO 5362
5362: DISABLE
// begin DialogueOn ;
5363: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5367: LD_EXP 18
5371: PPUSH
5372: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5376: LD_INT 22
5378: PUSH
5379: LD_INT 1
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 26
5388: PUSH
5389: LD_INT 1
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PUSH
5396: LD_INT 2
5398: PUSH
5399: LD_INT 25
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 25
5411: PUSH
5412: LD_INT 2
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 25
5421: PUSH
5422: LD_INT 3
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 25
5431: PUSH
5432: LD_INT 4
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: LD_INT 25
5441: PUSH
5442: LD_INT 5
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: LIST
5461: PPUSH
5462: CALL_OW 69
5466: PPUSH
5467: LD_STRING D5-Sol1-1
5469: PPUSH
5470: LD_STRING D5-FSol1-1
5472: PPUSH
5473: CALL 7900 0 3
// Say ( JMM , D5-JMM-1 ) ;
5477: LD_EXP 1
5481: PPUSH
5482: LD_STRING D5-JMM-1
5484: PPUSH
5485: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5489: LD_EXP 17
5493: PPUSH
5494: LD_STRING DAmer-Bur-1
5496: PPUSH
5497: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5501: LD_EXP 1
5505: PPUSH
5506: LD_STRING DAmer-JMM-1
5508: PPUSH
5509: CALL_OW 88
// DialogueOff ;
5513: CALL_OW 7
// end ;
5517: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5518: LD_INT 4
5520: PPUSH
5521: LD_INT 22
5523: PUSH
5524: LD_INT 7
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PPUSH
5531: CALL_OW 70
5535: IFFALSE 5934
5537: GO 5539
5539: DISABLE
5540: LD_INT 0
5542: PPUSH
// begin enable ;
5543: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5544: LD_ADDR_VAR 0 1
5548: PUSH
5549: LD_INT 4
5551: PPUSH
5552: LD_INT 22
5554: PUSH
5555: LD_INT 7
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PPUSH
5562: CALL_OW 70
5566: PUSH
5567: FOR_IN
5568: IFFALSE 5932
// begin if i = Burlak or i = Masha then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_EXP 17
5579: EQUAL
5580: PUSH
5581: LD_VAR 0 1
5585: PUSH
5586: LD_EXP 18
5590: EQUAL
5591: OR
5592: IFFALSE 5739
// begin RemoveUnit ( i ) ;
5594: LD_VAR 0 1
5598: PPUSH
5599: CALL_OW 64
// DialogueOn ;
5603: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5607: LD_EXP 1
5611: PPUSH
5612: LD_STRING D5a-JMM-1
5614: PPUSH
5615: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5619: LD_INT 22
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PUSH
5629: LD_INT 26
5631: PUSH
5632: LD_INT 1
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PUSH
5639: LD_INT 2
5641: PUSH
5642: LD_INT 25
5644: PUSH
5645: LD_INT 1
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: PUSH
5652: LD_INT 25
5654: PUSH
5655: LD_INT 2
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PUSH
5662: LD_INT 25
5664: PUSH
5665: LD_INT 3
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: PUSH
5672: LD_INT 25
5674: PUSH
5675: LD_INT 4
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PUSH
5682: LD_INT 25
5684: PUSH
5685: LD_INT 5
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 69
5709: PPUSH
5710: LD_STRING D5a-Sol1-1
5712: PPUSH
5713: LD_STRING D5-FSol1-1
5715: PPUSH
5716: CALL 7900 0 3
// DialogueOff ;
5720: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5724: LD_STRING M2b
5726: PPUSH
5727: CALL_OW 337
// spawnBurlak = 0 ;
5731: LD_ADDR_EXP 27
5735: PUSH
5736: LD_INT 0
5738: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 247
5748: PUSH
5749: LD_INT 2
5751: EQUAL
5752: PUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: CALL_OW 263
5762: PUSH
5763: LD_INT 1
5765: EQUAL
5766: AND
5767: IFFALSE 5895
// begin case IsDrivenBy ( i ) of Gnyevko :
5769: LD_VAR 0 1
5773: PPUSH
5774: CALL_OW 311
5778: PUSH
5779: LD_EXP 19
5783: DOUBLE
5784: EQUAL
5785: IFTRUE 5789
5787: GO 5802
5789: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
5790: LD_INT 1
5792: PPUSH
5793: LD_STRING 13_Gnyevko_1
5795: PPUSH
5796: CALL_OW 39
5800: GO 5895
5802: LD_EXP 20
5806: DOUBLE
5807: EQUAL
5808: IFTRUE 5812
5810: GO 5825
5812: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
5813: LD_INT 1
5815: PPUSH
5816: LD_STRING 13_Titov_1
5818: PPUSH
5819: CALL_OW 39
5823: GO 5895
5825: LD_EXP 21
5829: DOUBLE
5830: EQUAL
5831: IFTRUE 5835
5833: GO 5848
5835: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
5836: LD_INT 1
5838: PPUSH
5839: LD_STRING 13_Xavier_1
5841: PPUSH
5842: CALL_OW 39
5846: GO 5895
5848: LD_EXP 22
5852: DOUBLE
5853: EQUAL
5854: IFTRUE 5858
5856: GO 5871
5858: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
5859: LD_INT 1
5861: PPUSH
5862: LD_STRING 13_Belkov_1
5864: PPUSH
5865: CALL_OW 39
5869: GO 5895
5871: LD_EXP 23
5875: DOUBLE
5876: EQUAL
5877: IFTRUE 5881
5879: GO 5894
5881: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
5882: LD_INT 1
5884: PPUSH
5885: LD_STRING 13_Lipshchin_1
5887: PPUSH
5888: CALL_OW 39
5892: GO 5895
5894: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
5895: LD_VAR 0 1
5899: PPUSH
5900: CALL_OW 264
5904: PUSH
5905: LD_INT 49
5907: EQUAL
5908: IFFALSE 5921
// DestroyUnit ( i ) else
5910: LD_VAR 0 1
5914: PPUSH
5915: CALL_OW 65
5919: GO 5930
// RemoveUnit ( i ) ;
5921: LD_VAR 0 1
5925: PPUSH
5926: CALL_OW 64
// end ;
5930: GO 5567
5932: POP
5933: POP
// end ;
5934: PPOPN 1
5936: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
5937: LD_EXP 17
5941: PPUSH
5942: CALL_OW 302
5946: PUSH
5947: LD_EXP 18
5951: PPUSH
5952: CALL_OW 256
5956: PUSH
5957: LD_INT 500
5959: LESS
5960: AND
5961: PUSH
5962: LD_EXP 18
5966: PPUSH
5967: CALL_OW 255
5971: PUSH
5972: LD_INT 7
5974: EQUAL
5975: AND
5976: IFFALSE 5996
5978: GO 5980
5980: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
5981: LD_EXP 17
5985: PPUSH
5986: LD_INT 107
5988: PPUSH
5989: LD_INT 118
5991: PPUSH
5992: CALL_OW 111
5996: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
5997: LD_EXP 17
6001: PPUSH
6002: CALL_OW 301
6006: PUSH
6007: LD_EXP 27
6011: PUSH
6012: LD_INT 1
6014: EQUAL
6015: AND
6016: IFFALSE 6149
6018: GO 6020
6020: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6021: LD_EXP 1
6025: PPUSH
6026: LD_STRING D5b-JMM-1
6028: PPUSH
6029: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6033: LD_INT 22
6035: PUSH
6036: LD_INT 1
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PUSH
6043: LD_INT 26
6045: PUSH
6046: LD_INT 1
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 2
6055: PUSH
6056: LD_INT 25
6058: PUSH
6059: LD_INT 1
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 25
6068: PUSH
6069: LD_INT 2
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PUSH
6076: LD_INT 25
6078: PUSH
6079: LD_INT 3
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: PUSH
6086: LD_INT 25
6088: PUSH
6089: LD_INT 4
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PUSH
6096: LD_INT 25
6098: PUSH
6099: LD_INT 5
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: PPUSH
6119: CALL_OW 69
6123: PPUSH
6124: LD_STRING D5b-Sol1-1
6126: PPUSH
6127: LD_STRING 
6129: PPUSH
6130: CALL 7900 0 3
// ChangeMissionObjectives ( M2a ) ;
6134: LD_STRING M2a
6136: PPUSH
6137: CALL_OW 337
// burlakStatus := 1 ;
6141: LD_ADDR_EXP 28
6145: PUSH
6146: LD_INT 1
6148: ST_TO_ADDR
// end ;
6149: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6150: LD_EXP 2
6154: PPUSH
6155: CALL_OW 301
6159: IFFALSE 6296
6161: GO 6163
6163: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6164: LD_EXP 1
6168: PPUSH
6169: LD_STRING D6-JMM-1
6171: PPUSH
6172: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6176: LD_INT 22
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 26
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 2
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 1
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 2
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 25
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 25
6231: PUSH
6232: LD_INT 4
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: LD_INT 25
6241: PUSH
6242: LD_INT 5
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: PPUSH
6262: CALL_OW 69
6266: PPUSH
6267: LD_STRING D6-Sol1-1
6269: PPUSH
6270: LD_STRING 
6272: PPUSH
6273: CALL 7900 0 3
// Say ( JMM , D6-JMM-2 ) ;
6277: LD_EXP 1
6281: PPUSH
6282: LD_STRING D6-JMM-2
6284: PPUSH
6285: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6289: LD_STRING M1a
6291: PPUSH
6292: CALL_OW 337
// end ;
6296: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6297: LD_INT 25
6299: PPUSH
6300: LD_INT 1
6302: PPUSH
6303: CALL_OW 321
6307: PUSH
6308: LD_INT 2
6310: EQUAL
6311: IFFALSE 6328
6313: GO 6315
6315: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6316: LD_EXP 2
6320: PPUSH
6321: LD_STRING D6-Huck-2
6323: PPUSH
6324: CALL_OW 88
6328: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6329: LD_INT 22
6331: PUSH
6332: LD_INT 1
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: PUSH
6339: LD_INT 2
6341: PUSH
6342: LD_INT 34
6344: PUSH
6345: LD_INT 8
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 35
6354: PUSH
6355: LD_INT 8
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PPUSH
6371: CALL_OW 69
6375: PUSH
6376: LD_INT 5
6378: PPUSH
6379: LD_INT 22
6381: PUSH
6382: LD_INT 1
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: LD_INT 21
6391: PUSH
6392: LD_INT 3
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 30
6401: PUSH
6402: LD_INT 1
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 3
6411: PUSH
6412: LD_INT 57
6414: PUSH
6415: EMPTY
6416: LIST
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: PPUSH
6428: CALL_OW 70
6432: AND
6433: PUSH
6434: LD_INT 5
6436: PPUSH
6437: LD_INT 22
6439: PUSH
6440: LD_INT 1
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: LD_INT 21
6449: PUSH
6450: LD_INT 3
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: PUSH
6457: LD_INT 30
6459: PUSH
6460: LD_INT 5
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PUSH
6467: LD_INT 3
6469: PUSH
6470: LD_INT 57
6472: PUSH
6473: EMPTY
6474: LIST
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: PPUSH
6486: CALL_OW 70
6490: AND
6491: IFFALSE 6533
6493: GO 6495
6495: DISABLE
// begin DialogueOn ;
6496: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6500: LD_EXP 1
6504: PPUSH
6505: LD_STRING D7-JMM-1
6507: PPUSH
6508: CALL_OW 88
// DialogueOff ;
6512: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6516: LD_STRING M4
6518: PPUSH
6519: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6523: LD_INT 5
6525: PPUSH
6526: LD_INT 0
6528: PPUSH
6529: CALL_OW 424
// end ;
6533: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6534: LD_INT 6
6536: PPUSH
6537: LD_INT 22
6539: PUSH
6540: LD_INT 1
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 25
6549: PUSH
6550: LD_INT 4
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PPUSH
6561: CALL_OW 70
6565: PUSH
6566: LD_EXP 37
6570: PUSH
6571: LD_INT 1
6573: EQUAL
6574: AND
6575: PUSH
6576: LD_EXP 29
6580: PUSH
6581: LD_INT 0
6583: EQUAL
6584: AND
6585: IFFALSE 6650
6587: GO 6589
6589: DISABLE
// begin enable ;
6590: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6591: LD_ADDR_EXP 26
6595: PUSH
6596: LD_INT 6
6598: PPUSH
6599: LD_INT 22
6601: PUSH
6602: LD_INT 1
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 25
6611: PUSH
6612: LD_INT 4
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PPUSH
6623: CALL_OW 70
6627: PUSH
6628: LD_INT 1
6630: ARRAY
6631: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6632: LD_INT 6
6634: PPUSH
6635: LD_INT 0
6637: PPUSH
6638: CALL_OW 424
// radationResearched := 1 ;
6642: LD_ADDR_EXP 29
6646: PUSH
6647: LD_INT 1
6649: ST_TO_ADDR
// end ;
6650: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6651: LD_EXP 26
6655: PPUSH
6656: CALL_OW 301
6660: PUSH
6661: LD_EXP 29
6665: PUSH
6666: LD_INT 1
6668: EQUAL
6669: AND
6670: IFFALSE 6706
6672: GO 6674
6674: DISABLE
// begin enable ;
6675: ENABLE
// radationResearched = 0 ;
6676: LD_ADDR_EXP 29
6680: PUSH
6681: LD_INT 0
6683: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6684: LD_INT 6
6686: PPUSH
6687: LD_INT 1
6689: PPUSH
6690: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6694: LD_EXP 1
6698: PPUSH
6699: LD_STRING D9a-JMM-1
6701: PPUSH
6702: CALL_OW 88
// end ; end_of_file
6706: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6707: LD_VAR 0 5
6711: PUSH
6712: LD_INT 8
6714: EQUAL
6715: PUSH
6716: LD_EXP 35
6720: PUSH
6721: LD_INT 0
6723: EQUAL
6724: AND
6725: IFFALSE 6778
// begin eventVar1 := 1 ;
6727: LD_ADDR_EXP 35
6731: PUSH
6732: LD_INT 1
6734: ST_TO_ADDR
// DialogueOn ;
6735: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6739: LD_EXP 1
6743: PPUSH
6744: LD_STRING D6a-JMM-1
6746: PPUSH
6747: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
6751: LD_EXP 15
6755: PPUSH
6756: LD_STRING D6a-Pow-1
6758: PPUSH
6759: CALL_OW 94
// DialogueOff ;
6763: CALL_OW 7
// wait ( 3 3$0 ) ;
6767: LD_INT 6300
6769: PPUSH
6770: CALL_OW 67
// PowellSupport ;
6774: CALL 1820 0 0
// end ; end ;
6778: PPOPN 5
6780: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6781: LD_VAR 0 1
6785: PPUSH
6786: CALL 24752 0 1
// if un = JMM then
6790: LD_VAR 0 1
6794: PUSH
6795: LD_EXP 1
6799: EQUAL
6800: IFFALSE 6809
// YouLost ( JMM ) ;
6802: LD_STRING JMM
6804: PPUSH
6805: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
6809: LD_VAR 0 1
6813: PPUSH
6814: CALL_OW 264
6818: PUSH
6819: LD_INT 31
6821: EQUAL
6822: IFFALSE 6838
// achivCounter := achivCounter + 1 ;
6824: LD_ADDR_EXP 41
6828: PUSH
6829: LD_EXP 41
6833: PUSH
6834: LD_INT 1
6836: PLUS
6837: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
6838: LD_VAR 0 1
6842: PPUSH
6843: CALL_OW 255
6847: PUSH
6848: LD_INT 1
6850: NONEQUAL
6851: PUSH
6852: LD_VAR 0 1
6856: PPUSH
6857: CALL_OW 247
6861: PUSH
6862: LD_INT 2
6864: EQUAL
6865: AND
6866: IFFALSE 6882
// destroyCounter := destroyCounter + 1 ;
6868: LD_ADDR_EXP 42
6872: PUSH
6873: LD_EXP 42
6877: PUSH
6878: LD_INT 1
6880: PLUS
6881: ST_TO_ADDR
// end ;
6882: PPOPN 1
6884: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
6885: LD_VAR 0 2
6889: PUSH
6890: LD_EXP 18
6894: EQUAL
6895: IFFALSE 6904
// SetAchievement ( ACH_MASHA ) ;
6897: LD_STRING ACH_MASHA
6899: PPUSH
6900: CALL_OW 543
// end ;
6904: PPOPN 4
6906: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
6907: LD_VAR 0 1
6911: PPUSH
6912: LD_VAR 0 2
6916: PPUSH
6917: CALL 24874 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
6921: LD_VAR 0 1
6925: PPUSH
6926: CALL_OW 264
6930: PUSH
6931: LD_INT 8
6933: EQUAL
6934: PUSH
6935: LD_EXP 36
6939: PUSH
6940: LD_INT 0
6942: EQUAL
6943: AND
6944: IFFALSE 7013
// begin eventVar2 := 1 ;
6946: LD_ADDR_EXP 36
6950: PUSH
6951: LD_INT 1
6953: ST_TO_ADDR
// DialogueOn ;
6954: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
6958: LD_EXP 1
6962: PPUSH
6963: LD_STRING D6b-JMM-1
6965: PPUSH
6966: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
6970: LD_EXP 15
6974: PPUSH
6975: LD_STRING D6b-Pow-1
6977: PPUSH
6978: CALL_OW 94
// DialogueOff ;
6982: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
6986: LD_INT 5
6988: PPUSH
6989: LD_INT 1
6991: PPUSH
6992: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
6996: LD_INT 7
6998: PPUSH
6999: LD_INT 1
7001: PPUSH
7002: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7006: LD_STRING M3
7008: PPUSH
7009: CALL_OW 337
// end ; end ;
7013: PPOPN 2
7015: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7016: LD_VAR 0 2
7020: PPUSH
7021: LD_VAR 0 3
7025: PPUSH
7026: LD_INT 5
7028: PPUSH
7029: CALL_OW 309
7033: PUSH
7034: LD_EXP 37
7038: PUSH
7039: LD_INT 0
7041: EQUAL
7042: AND
7043: IFFALSE 7268
// begin eventVar3 := 1 ;
7045: LD_ADDR_EXP 37
7049: PUSH
7050: LD_INT 1
7052: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7053: LD_INT 175
7055: PPUSH
7056: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) then
7060: LD_INT 7
7062: PPUSH
7063: LD_INT 22
7065: PUSH
7066: LD_INT 1
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: LD_INT 21
7075: PUSH
7076: LD_INT 2
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 34
7085: PUSH
7086: LD_INT 11
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: LIST
7097: PPUSH
7098: CALL_OW 70
7102: IFFALSE 7121
// begin radarOnSpot = 1 ;
7104: LD_ADDR_EXP 30
7108: PUSH
7109: LD_INT 1
7111: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7112: LD_STRING M3a
7114: PPUSH
7115: CALL_OW 337
// end else
7119: GO 7128
// ChangeMissionObjectives ( M3b ) ;
7121: LD_STRING M3b
7123: PPUSH
7124: CALL_OW 337
// DialogueOn ;
7128: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7132: LD_EXP 2
7136: PPUSH
7137: LD_STRING D8-Huck-1
7139: PPUSH
7140: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7144: LD_EXP 1
7148: PPUSH
7149: LD_STRING D8-JMM-1
7151: PPUSH
7152: CALL_OW 88
// if IsOk ( Stevens ) then
7156: LD_EXP 2
7160: PPUSH
7161: CALL_OW 302
7165: IFFALSE 7227
// begin Say ( Stevens , D8-Huck-2 ) ;
7167: LD_EXP 2
7171: PPUSH
7172: LD_STRING D8-Huck-2
7174: PPUSH
7175: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7179: LD_EXP 1
7183: PPUSH
7184: LD_STRING D8-JMM-2
7186: PPUSH
7187: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7191: LD_EXP 2
7195: PPUSH
7196: LD_STRING D8-Huck-3
7198: PPUSH
7199: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7203: LD_EXP 1
7207: PPUSH
7208: LD_STRING D8-JMM-3
7210: PPUSH
7211: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7215: LD_EXP 2
7219: PPUSH
7220: LD_STRING D8-Huck-4
7222: PPUSH
7223: CALL_OW 88
// end ; DialogueOff ;
7227: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7231: LD_INT 5
7233: PPUSH
7234: LD_INT 0
7236: PPUSH
7237: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7241: LD_INT 7
7243: PPUSH
7244: LD_INT 0
7246: PPUSH
7247: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7251: LD_INT 6
7253: PPUSH
7254: LD_INT 1
7256: PPUSH
7257: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7261: LD_STRING M5
7263: PPUSH
7264: CALL_OW 337
// end ; end ;
7268: PPOPN 3
7270: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
7271: LD_EXP 26
7275: PPUSH
7276: CALL_OW 302
7280: PUSH
7281: LD_VAR 0 2
7285: PUSH
7286: LD_EXP 26
7290: EQUAL
7291: AND
7292: PUSH
7293: LD_EXP 38
7297: PUSH
7298: LD_INT 0
7300: EQUAL
7301: AND
7302: PUSH
7303: LD_EXP 37
7307: PUSH
7308: LD_INT 1
7310: EQUAL
7311: AND
7312: PUSH
7313: LD_VAR 0 1
7317: PPUSH
7318: LD_INT 1
7320: PPUSH
7321: CALL_OW 268
7325: PUSH
7326: LD_INT 11
7328: EQUAL
7329: AND
7330: PUSH
7331: LD_VAR 0 1
7335: PPUSH
7336: LD_INT 2
7338: PPUSH
7339: CALL_OW 268
7343: PUSH
7344: LD_INT 11
7346: EQUAL
7347: OR
7348: IFFALSE 7358
// eventVar4 := 1 ;
7350: LD_ADDR_EXP 38
7354: PUSH
7355: LD_INT 1
7357: ST_TO_ADDR
// end ;
7358: PPOPN 2
7360: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7361: LD_INT 0
7363: PPUSH
7364: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7365: LD_VAR 0 1
7369: PPUSH
7370: CALL_OW 248
7374: PUSH
7375: LD_INT 2
7377: EQUAL
7378: IFFALSE 7656
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
7380: LD_ADDR_EXP 32
7384: PUSH
7385: LD_EXP 32
7389: PUSH
7390: LD_INT 1
7392: PLUS
7393: ST_TO_ADDR
// for i := 1 to sibDeposits do
7394: LD_ADDR_VAR 0 4
7398: PUSH
7399: DOUBLE
7400: LD_INT 1
7402: DEC
7403: ST_TO_ADDR
7404: LD_EXP 31
7408: PUSH
7409: FOR_TO
7410: IFFALSE 7512
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7412: LD_EXP 31
7416: PUSH
7417: LD_VAR 0 4
7421: ARRAY
7422: PUSH
7423: LD_INT 1
7425: ARRAY
7426: PUSH
7427: LD_VAR 0 2
7431: EQUAL
7432: PUSH
7433: LD_EXP 31
7437: PUSH
7438: LD_VAR 0 4
7442: ARRAY
7443: PUSH
7444: LD_INT 2
7446: ARRAY
7447: PUSH
7448: LD_VAR 0 3
7452: EQUAL
7453: AND
7454: IFFALSE 7510
// begin sibDeposits := Delete ( sibDeposits , [ i ] [ 1 ] ) ;
7456: LD_ADDR_EXP 31
7460: PUSH
7461: LD_EXP 31
7465: PPUSH
7466: LD_VAR 0 4
7470: PUSH
7471: EMPTY
7472: LIST
7473: PUSH
7474: LD_INT 1
7476: ARRAY
7477: PPUSH
7478: CALL_OW 3
7482: ST_TO_ADDR
// sibDeposits := Delete ( sibDeposits , [ i ] [ 2 ] ) ;
7483: LD_ADDR_EXP 31
7487: PUSH
7488: LD_EXP 31
7492: PPUSH
7493: LD_VAR 0 4
7497: PUSH
7498: EMPTY
7499: LIST
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PPUSH
7505: CALL_OW 3
7509: ST_TO_ADDR
// end ;
7510: GO 7409
7512: POP
7513: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7514: LD_EXP 39
7518: PUSH
7519: LD_INT 0
7521: EQUAL
7522: PUSH
7523: LD_VAR 0 2
7527: PPUSH
7528: LD_VAR 0 3
7532: PPUSH
7533: CALL_OW 428
7537: PUSH
7538: LD_INT 22
7540: PUSH
7541: LD_INT 1
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: IN
7553: AND
7554: IFFALSE 7656
// begin eventVar5 := 1 ;
7556: LD_ADDR_EXP 39
7560: PUSH
7561: LD_INT 1
7563: ST_TO_ADDR
// DialogueOn ;
7564: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7568: LD_EXP 2
7572: PPUSH
7573: LD_STRING D4-Sci1-1
7575: PPUSH
7576: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7580: LD_EXP 1
7584: PPUSH
7585: LD_STRING D4-JMM-1
7587: PPUSH
7588: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7592: LD_EXP 2
7596: PPUSH
7597: LD_STRING D4-Sci1-2
7599: PPUSH
7600: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7604: LD_EXP 1
7608: PPUSH
7609: LD_STRING D4-JMM-2
7611: PPUSH
7612: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7616: LD_EXP 2
7620: PPUSH
7621: LD_STRING D4-Sci1-3
7623: PPUSH
7624: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7628: LD_EXP 1
7632: PPUSH
7633: LD_STRING D4-JMM-3
7635: PPUSH
7636: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7640: LD_EXP 1
7644: PPUSH
7645: LD_STRING D4-JMM-3a
7647: PPUSH
7648: CALL_OW 88
// DialogueOff ;
7652: CALL_OW 7
// end ; end ; end ;
7656: PPOPN 5
7658: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7659: LD_VAR 0 1
7663: PPUSH
7664: CALL_OW 255
7668: PUSH
7669: LD_INT 1
7671: EQUAL
7672: PUSH
7673: LD_VAR 0 1
7677: PPUSH
7678: CALL_OW 266
7682: PUSH
7683: LD_INT 0
7685: EQUAL
7686: AND
7687: PUSH
7688: LD_INT 22
7690: PUSH
7691: LD_INT 1
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: LD_INT 21
7700: PUSH
7701: LD_INT 3
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 2
7710: PUSH
7711: LD_INT 30
7713: PUSH
7714: LD_INT 0
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 30
7723: PUSH
7724: LD_INT 1
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 69
7745: PUSH
7746: LD_INT 1
7748: EQUAL
7749: AND
7750: IFFALSE 7764
// SetBName ( building , omega ) ;
7752: LD_VAR 0 1
7756: PPUSH
7757: LD_STRING omega
7759: PPUSH
7760: CALL_OW 500
// end ;
7764: PPOPN 2
7766: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7767: LD_VAR 0 1
7771: PPUSH
7772: CALL 24858 0 1
// end ;
7776: PPOPN 1
7778: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7779: LD_VAR 0 1
7783: PUSH
7784: LD_EXP 43
7788: EQUAL
7789: IFFALSE 7795
// ArabianAttack ;
7791: CALL 9753 0 0
// if event = eventRussianAttack then
7795: LD_VAR 0 1
7799: PUSH
7800: LD_EXP 44
7804: EQUAL
7805: IFFALSE 7811
// RussianAttack ;
7807: CALL 10016 0 0
// end ;
7811: PPOPN 1
7813: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
7814: LD_VAR 0 1
7818: PPUSH
7819: CALL_OW 255
7823: PUSH
7824: LD_INT 3
7826: PUSH
7827: LD_INT 8
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: IN
7834: IFFALSE 7897
// begin ComMoveXY ( driver , 41 , 2 ) ;
7836: LD_VAR 0 1
7840: PPUSH
7841: LD_INT 41
7843: PPUSH
7844: LD_INT 2
7846: PPUSH
7847: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7851: LD_INT 35
7853: PPUSH
7854: CALL_OW 67
// if IsDead ( driver ) then
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 301
7867: IFFALSE 7871
// exit ;
7869: GO 7897
// until IsAt ( driver , 41 , 2 ) ;
7871: LD_VAR 0 1
7875: PPUSH
7876: LD_INT 41
7878: PPUSH
7879: LD_INT 2
7881: PPUSH
7882: CALL_OW 307
7886: IFFALSE 7851
// RemoveUnit ( driver ) ;
7888: LD_VAR 0 1
7892: PPUSH
7893: CALL_OW 64
// end ; end ; end_of_file
7897: PPOPN 4
7899: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7900: LD_INT 0
7902: PPUSH
7903: PPUSH
7904: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
7905: LD_ADDR_VAR 0 1
7909: PUSH
7910: LD_VAR 0 1
7914: PUSH
7915: LD_EXP 1
7919: PUSH
7920: LD_EXP 2
7924: PUSH
7925: LD_EXP 3
7929: PUSH
7930: LD_EXP 4
7934: PUSH
7935: LD_EXP 5
7939: PUSH
7940: LD_EXP 6
7944: PUSH
7945: LD_EXP 7
7949: PUSH
7950: LD_EXP 8
7954: PUSH
7955: LD_EXP 9
7959: PUSH
7960: LD_EXP 10
7964: PUSH
7965: LD_EXP 11
7969: PUSH
7970: LD_EXP 12
7974: PUSH
7975: LD_EXP 13
7979: PUSH
7980: LD_EXP 14
7984: PUSH
7985: LD_EXP 15
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: DIFF
8007: ST_TO_ADDR
// if not characters then
8008: LD_VAR 0 1
8012: NOT
8013: IFFALSE 8017
// exit ;
8015: GO 8096
// speaker := characters [ rand ( 1 , characters ) ] ;
8017: LD_ADDR_VAR 0 6
8021: PUSH
8022: LD_VAR 0 1
8026: PUSH
8027: LD_INT 1
8029: PPUSH
8030: LD_VAR 0 1
8034: PPUSH
8035: CALL_OW 12
8039: ARRAY
8040: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8041: LD_VAR 0 6
8045: PPUSH
8046: CALL_OW 258
8050: PUSH
8051: LD_INT 1
8053: EQUAL
8054: IFFALSE 8072
// Say ( speaker , dialogMID ) else
8056: LD_VAR 0 6
8060: PPUSH
8061: LD_VAR 0 2
8065: PPUSH
8066: CALL_OW 88
8070: GO 8086
// Say ( speaker , dialogFID ) ;
8072: LD_VAR 0 6
8076: PPUSH
8077: LD_VAR 0 3
8081: PPUSH
8082: CALL_OW 88
// result := speaker ;
8086: LD_ADDR_VAR 0 4
8090: PUSH
8091: LD_VAR 0 6
8095: ST_TO_ADDR
// end ;
8096: LD_VAR 0 4
8100: RET
// export function PrepareDifficulty ; begin
8101: LD_INT 0
8103: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8104: LD_INT 5
8106: PPUSH
8107: LD_INT 8
8109: PPUSH
8110: LD_INT 2
8112: PPUSH
8113: CALL_OW 322
// if Difficulty = 1 then
8117: LD_OWVAR 67
8121: PUSH
8122: LD_INT 1
8124: EQUAL
8125: IFFALSE 8244
// begin SetTech ( 66 , 8 , state_researched ) ;
8127: LD_INT 66
8129: PPUSH
8130: LD_INT 8
8132: PPUSH
8133: LD_INT 2
8135: PPUSH
8136: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8140: LD_INT 67
8142: PPUSH
8143: LD_INT 8
8145: PPUSH
8146: LD_INT 0
8148: PPUSH
8149: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8153: LD_INT 68
8155: PPUSH
8156: LD_INT 8
8158: PPUSH
8159: LD_INT 0
8161: PPUSH
8162: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8166: LD_INT 51
8168: PPUSH
8169: LD_INT 8
8171: PPUSH
8172: LD_INT 2
8174: PPUSH
8175: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8179: LD_INT 52
8181: PPUSH
8182: LD_INT 8
8184: PPUSH
8185: LD_INT 0
8187: PPUSH
8188: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8192: LD_INT 53
8194: PPUSH
8195: LD_INT 8
8197: PPUSH
8198: LD_INT 0
8200: PPUSH
8201: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8205: LD_INT 60
8207: PPUSH
8208: LD_INT 8
8210: PPUSH
8211: LD_INT 2
8213: PPUSH
8214: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8218: LD_INT 61
8220: PPUSH
8221: LD_INT 8
8223: PPUSH
8224: LD_INT 0
8226: PPUSH
8227: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8231: LD_INT 62
8233: PPUSH
8234: LD_INT 8
8236: PPUSH
8237: LD_INT 0
8239: PPUSH
8240: CALL_OW 322
// end ; if Difficulty = 2 then
8244: LD_OWVAR 67
8248: PUSH
8249: LD_INT 2
8251: EQUAL
8252: IFFALSE 8371
// begin SetTech ( 66 , 8 , state_researched ) ;
8254: LD_INT 66
8256: PPUSH
8257: LD_INT 8
8259: PPUSH
8260: LD_INT 2
8262: PPUSH
8263: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8267: LD_INT 67
8269: PPUSH
8270: LD_INT 8
8272: PPUSH
8273: LD_INT 2
8275: PPUSH
8276: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8280: LD_INT 68
8282: PPUSH
8283: LD_INT 8
8285: PPUSH
8286: LD_INT 0
8288: PPUSH
8289: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8293: LD_INT 51
8295: PPUSH
8296: LD_INT 8
8298: PPUSH
8299: LD_INT 2
8301: PPUSH
8302: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8306: LD_INT 52
8308: PPUSH
8309: LD_INT 8
8311: PPUSH
8312: LD_INT 2
8314: PPUSH
8315: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8319: LD_INT 53
8321: PPUSH
8322: LD_INT 8
8324: PPUSH
8325: LD_INT 2
8327: PPUSH
8328: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8332: LD_INT 60
8334: PPUSH
8335: LD_INT 8
8337: PPUSH
8338: LD_INT 2
8340: PPUSH
8341: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8345: LD_INT 61
8347: PPUSH
8348: LD_INT 8
8350: PPUSH
8351: LD_INT 2
8353: PPUSH
8354: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8358: LD_INT 62
8360: PPUSH
8361: LD_INT 8
8363: PPUSH
8364: LD_INT 0
8366: PPUSH
8367: CALL_OW 322
// end ; if Difficulty >= 3 then
8371: LD_OWVAR 67
8375: PUSH
8376: LD_INT 3
8378: GREATEREQUAL
8379: IFFALSE 8498
// begin SetTech ( 66 , 8 , state_researched ) ;
8381: LD_INT 66
8383: PPUSH
8384: LD_INT 8
8386: PPUSH
8387: LD_INT 2
8389: PPUSH
8390: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8394: LD_INT 67
8396: PPUSH
8397: LD_INT 8
8399: PPUSH
8400: LD_INT 2
8402: PPUSH
8403: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8407: LD_INT 68
8409: PPUSH
8410: LD_INT 8
8412: PPUSH
8413: LD_INT 0
8415: PPUSH
8416: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8420: LD_INT 51
8422: PPUSH
8423: LD_INT 8
8425: PPUSH
8426: LD_INT 2
8428: PPUSH
8429: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8433: LD_INT 52
8435: PPUSH
8436: LD_INT 8
8438: PPUSH
8439: LD_INT 2
8441: PPUSH
8442: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8446: LD_INT 53
8448: PPUSH
8449: LD_INT 8
8451: PPUSH
8452: LD_INT 2
8454: PPUSH
8455: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8459: LD_INT 60
8461: PPUSH
8462: LD_INT 8
8464: PPUSH
8465: LD_INT 2
8467: PPUSH
8468: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8472: LD_INT 61
8474: PPUSH
8475: LD_INT 8
8477: PPUSH
8478: LD_INT 2
8480: PPUSH
8481: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8485: LD_INT 62
8487: PPUSH
8488: LD_INT 8
8490: PPUSH
8491: LD_INT 0
8493: PPUSH
8494: CALL_OW 322
// end ; end ;
8498: LD_VAR 0 1
8502: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8503: LD_INT 0
8505: PPUSH
8506: PPUSH
// for i in charactersList do
8507: LD_ADDR_VAR 0 4
8511: PUSH
8512: LD_VAR 0 1
8516: PUSH
8517: FOR_IN
8518: IFFALSE 8536
// SaveCharacters ( i , ident ) ;
8520: LD_VAR 0 4
8524: PPUSH
8525: LD_VAR 0 2
8529: PPUSH
8530: CALL_OW 38
8534: GO 8517
8536: POP
8537: POP
// end ; end_of_file
8538: LD_VAR 0 3
8542: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8543: LD_EXP 38
8547: PUSH
8548: LD_INT 1
8550: EQUAL
8551: IFFALSE 9453
8553: GO 8555
8555: DISABLE
8556: LD_INT 0
8558: PPUSH
8559: PPUSH
8560: PPUSH
// begin m1 := false ;
8561: LD_ADDR_VAR 0 1
8565: PUSH
8566: LD_INT 0
8568: ST_TO_ADDR
// m2 := false ;
8569: LD_ADDR_VAR 0 2
8573: PUSH
8574: LD_INT 0
8576: ST_TO_ADDR
// m3 := false ;
8577: LD_ADDR_VAR 0 3
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
8585: LD_EXP 1
8589: PPUSH
8590: LD_STRING D9b-JMM-1
8592: PPUSH
8593: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8597: LD_EXP 15
8601: PPUSH
8602: LD_STRING D9b-Pow-1
8604: PPUSH
8605: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
8609: LD_EXP 1
8613: PPUSH
8614: LD_STRING D9b-JMM-2
8616: PPUSH
8617: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
8621: LD_EXP 15
8625: PPUSH
8626: LD_STRING D9b-Pow-2
8628: PPUSH
8629: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
8633: LD_EXP 1
8637: PPUSH
8638: LD_STRING D9b-JMM-3
8640: PPUSH
8641: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
8645: LD_EXP 15
8649: PPUSH
8650: LD_STRING D9b-Pow-3
8652: PPUSH
8653: CALL_OW 94
// if tick <= 60 60$00 then
8657: LD_OWVAR 1
8661: PUSH
8662: LD_INT 126000
8664: LESSEQUAL
8665: IFFALSE 8674
// SetAchievement ( ACH_ASPEED_13 ) ;
8667: LD_STRING ACH_ASPEED_13
8669: PPUSH
8670: CALL_OW 543
// if burlakStatus = 1 then
8674: LD_EXP 28
8678: PUSH
8679: LD_INT 1
8681: EQUAL
8682: IFFALSE 8704
// begin m1 := true ;
8684: LD_ADDR_VAR 0 1
8688: PUSH
8689: LD_INT 1
8691: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
8692: LD_STRING Burlak
8694: PPUSH
8695: LD_INT 1
8697: PPUSH
8698: CALL_OW 101
// end else
8702: GO 8715
// begin AddMedal ( Burlak , - 1 ) ;
8704: LD_STRING Burlak
8706: PPUSH
8707: LD_INT 1
8709: NEG
8710: PPUSH
8711: CALL_OW 101
// end ; if IsOk ( Stevens ) then
8715: LD_EXP 2
8719: PPUSH
8720: CALL_OW 302
8724: IFFALSE 8746
// begin m2 := true ;
8726: LD_ADDR_VAR 0 2
8730: PUSH
8731: LD_INT 1
8733: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
8734: LD_STRING Stevens
8736: PPUSH
8737: LD_INT 1
8739: PPUSH
8740: CALL_OW 101
// end else
8744: GO 8757
// begin AddMedal ( Stevens , - 1 ) ;
8746: LD_STRING Stevens
8748: PPUSH
8749: LD_INT 1
8751: NEG
8752: PPUSH
8753: CALL_OW 101
// end ; if radarOnSpot = 1 then
8757: LD_EXP 30
8761: PUSH
8762: LD_INT 1
8764: EQUAL
8765: IFFALSE 8787
// begin m3 := true ;
8767: LD_ADDR_VAR 0 3
8771: PUSH
8772: LD_INT 1
8774: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
8775: LD_STRING Observation
8777: PPUSH
8778: LD_INT 1
8780: PPUSH
8781: CALL_OW 101
// end else
8785: GO 8798
// begin AddMedal ( Observation , - 1 ) ;
8787: LD_STRING Observation
8789: PPUSH
8790: LD_INT 1
8792: NEG
8793: PPUSH
8794: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
8798: LD_VAR 0 1
8802: PUSH
8803: LD_VAR 0 2
8807: AND
8808: PUSH
8809: LD_VAR 0 3
8813: AND
8814: PUSH
8815: LD_OWVAR 67
8819: PUSH
8820: LD_INT 3
8822: GREATEREQUAL
8823: AND
8824: IFFALSE 8836
// SetAchievementEX ( ACH_AMER , 13 ) ;
8826: LD_STRING ACH_AMER
8828: PPUSH
8829: LD_INT 13
8831: PPUSH
8832: CALL_OW 564
// GiveMedals ( MAIN ) ;
8836: LD_STRING MAIN
8838: PPUSH
8839: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
8843: LD_EXP 28
8847: PPUSH
8848: LD_STRING 13_BurlakStatus_1
8850: PPUSH
8851: CALL_OW 39
// if IsLive ( Stevens ) then
8855: LD_EXP 2
8859: PPUSH
8860: CALL_OW 300
8864: IFFALSE 8878
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
8866: LD_INT 1
8868: PPUSH
8869: LD_STRING 13_StevensStatus_1
8871: PPUSH
8872: CALL_OW 39
8876: GO 8888
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
8878: LD_INT 0
8880: PPUSH
8881: LD_STRING 13_StevensStatus_1
8883: PPUSH
8884: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
8888: LD_INT 22
8890: PUSH
8891: LD_INT 1
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 21
8900: PUSH
8901: LD_INT 1
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 2
8910: PUSH
8911: LD_INT 25
8913: PUSH
8914: LD_INT 1
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 25
8923: PUSH
8924: LD_INT 2
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 25
8933: PUSH
8934: LD_INT 3
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 25
8943: PUSH
8944: LD_INT 4
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: LD_INT 25
8953: PUSH
8954: LD_INT 5
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 25
8963: PUSH
8964: LD_INT 8
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: PPUSH
8985: CALL_OW 69
8989: PPUSH
8990: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
8994: LD_EXP 1
8998: PPUSH
8999: LD_EXP 34
9003: PUSH
9004: LD_STRING JMM
9006: STR
9007: PPUSH
9008: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9012: LD_EXP 8
9016: PPUSH
9017: LD_EXP 34
9021: PUSH
9022: LD_STRING Brown
9024: STR
9025: PPUSH
9026: CALL 8503 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9030: LD_EXP 4
9034: PPUSH
9035: LD_EXP 34
9039: PUSH
9040: LD_STRING Donaldson
9042: STR
9043: PPUSH
9044: CALL 8503 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9048: LD_EXP 5
9052: PPUSH
9053: LD_EXP 34
9057: PUSH
9058: LD_STRING Bobby
9060: STR
9061: PPUSH
9062: CALL 8503 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9066: LD_EXP 6
9070: PPUSH
9071: LD_EXP 34
9075: PUSH
9076: LD_STRING Cyrus
9078: STR
9079: PPUSH
9080: CALL 8503 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9084: LD_EXP 3
9088: PPUSH
9089: LD_EXP 34
9093: PUSH
9094: LD_STRING Lisa
9096: STR
9097: PPUSH
9098: CALL 8503 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9102: LD_EXP 13
9106: PPUSH
9107: LD_EXP 34
9111: PUSH
9112: LD_STRING Frank
9114: STR
9115: PPUSH
9116: CALL 8503 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9120: LD_EXP 14
9124: PPUSH
9125: LD_EXP 34
9129: PUSH
9130: LD_STRING Kikuchi
9132: STR
9133: PPUSH
9134: CALL 8503 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9138: LD_EXP 10
9142: PPUSH
9143: LD_EXP 34
9147: PUSH
9148: LD_STRING Houten
9150: STR
9151: PPUSH
9152: CALL 8503 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9156: LD_EXP 12
9160: PPUSH
9161: LD_EXP 34
9165: PUSH
9166: LD_STRING Gary
9168: STR
9169: PPUSH
9170: CALL 8503 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9174: LD_EXP 11
9178: PPUSH
9179: LD_EXP 34
9183: PUSH
9184: LD_STRING Cornell
9186: STR
9187: PPUSH
9188: CALL 8503 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9192: LD_EXP 7
9196: PPUSH
9197: LD_EXP 34
9201: PUSH
9202: LD_STRING Denis
9204: STR
9205: PPUSH
9206: CALL 8503 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9210: LD_EXP 9
9214: PPUSH
9215: LD_EXP 34
9219: PUSH
9220: LD_STRING Gladstone
9222: STR
9223: PPUSH
9224: CALL 8503 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9228: LD_EXP 2
9232: PPUSH
9233: LD_EXP 34
9237: PUSH
9238: LD_STRING Stevens
9240: STR
9241: PPUSH
9242: CALL 8503 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9246: LD_INT 50
9248: PUSH
9249: EMPTY
9250: LIST
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_INT 1
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 21
9264: PUSH
9265: LD_INT 1
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: LD_INT 2
9274: PUSH
9275: LD_INT 25
9277: PUSH
9278: LD_INT 1
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: LD_INT 25
9287: PUSH
9288: LD_INT 2
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: LD_INT 25
9297: PUSH
9298: LD_INT 3
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: PUSH
9305: LD_INT 25
9307: PUSH
9308: LD_INT 4
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: PUSH
9315: LD_INT 25
9317: PUSH
9318: LD_INT 5
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 25
9327: PUSH
9328: LD_INT 8
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PPUSH
9350: CALL_OW 69
9354: PUSH
9355: LD_EXP 1
9359: PUSH
9360: LD_EXP 8
9364: PUSH
9365: LD_EXP 4
9369: PUSH
9370: LD_EXP 5
9374: PUSH
9375: LD_EXP 6
9379: PUSH
9380: LD_EXP 3
9384: PUSH
9385: LD_EXP 13
9389: PUSH
9390: LD_EXP 9
9394: PUSH
9395: LD_EXP 14
9399: PUSH
9400: LD_EXP 7
9404: PUSH
9405: LD_EXP 10
9409: PUSH
9410: LD_EXP 12
9414: PUSH
9415: LD_EXP 11
9419: PUSH
9420: LD_EXP 2
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: DIFF
9441: PPUSH
9442: LD_STRING 13_other_survivors
9444: PPUSH
9445: CALL_OW 38
// YouWin ;
9449: CALL_OW 103
// end ; end_of_file
9453: PPOPN 3
9455: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do var i , tmp , yourSiberite ;
9456: LD_EXP 32
9460: PUSH
9461: LD_INT 2
9463: EQUAL
9464: PUSH
9465: LD_INT 34
9467: PUSH
9468: LD_INT 8
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PPUSH
9475: CALL_OW 69
9479: NOT
9480: AND
9481: IFFALSE 9617
9483: GO 9485
9485: DISABLE
9486: LD_INT 0
9488: PPUSH
9489: PPUSH
9490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9491: LD_ADDR_VAR 0 2
9495: PUSH
9496: LD_INT 22
9498: PUSH
9499: LD_INT 1
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 21
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 2
9518: PUSH
9519: LD_INT 30
9521: PUSH
9522: LD_INT 0
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 30
9531: PUSH
9532: LD_INT 1
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: LIST
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: LIST
9548: PPUSH
9549: CALL_OW 69
9553: ST_TO_ADDR
// for i in tmp do
9554: LD_ADDR_VAR 0 1
9558: PUSH
9559: LD_VAR 0 2
9563: PUSH
9564: FOR_IN
9565: IFFALSE 9598
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9567: LD_ADDR_VAR 0 3
9571: PUSH
9572: LD_VAR 0 3
9576: PUSH
9577: LD_VAR 0 1
9581: PPUSH
9582: CALL_OW 274
9586: PPUSH
9587: LD_INT 3
9589: PPUSH
9590: CALL_OW 275
9594: PLUS
9595: ST_TO_ADDR
9596: GO 9564
9598: POP
9599: POP
// if yourSiberite < 79 then
9600: LD_VAR 0 3
9604: PUSH
9605: LD_INT 79
9607: LESS
9608: IFFALSE 9617
// YouLost ( siberite ) ;
9610: LD_STRING siberite
9612: PPUSH
9613: CALL_OW 104
// end ; end_of_file
9617: PPOPN 3
9619: END
// every 10 10$00 + 6 6$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 4 and not FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
9620: LD_INT 22
9622: PUSH
9623: LD_INT 8
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 21
9632: PUSH
9633: LD_INT 1
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PPUSH
9644: CALL_OW 69
9648: PUSH
9649: LD_INT 4
9651: LESS
9652: PUSH
9653: LD_INT 22
9655: PUSH
9656: LD_INT 7
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 21
9665: PUSH
9666: LD_INT 1
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 69
9681: NOT
9682: AND
9683: IFFALSE 9693
9685: GO 9687
9687: DISABLE
// begin enable ;
9688: ENABLE
// PrepareArabianAttack ;
9689: CALL 4022 0 0
// end ;
9693: END
// every 0 0$30 trigger eventVar2 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 4 do
9694: LD_EXP 36
9698: PUSH
9699: LD_INT 1
9701: EQUAL
9702: PUSH
9703: LD_INT 22
9705: PUSH
9706: LD_INT 8
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 21
9715: PUSH
9716: LD_INT 1
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PPUSH
9727: CALL_OW 69
9731: PUSH
9732: LD_INT 4
9734: LESS
9735: AND
9736: IFFALSE 9752
9738: GO 9740
9740: DISABLE
// begin wait ( 3 3$30 ) ;
9741: LD_INT 7350
9743: PPUSH
9744: CALL_OW 67
// PrepareRussianAttack ;
9748: CALL 3281 0 0
// end ;
9752: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units ; begin
9753: LD_INT 0
9755: PPUSH
9756: PPUSH
9757: PPUSH
9758: PPUSH
9759: PPUSH
9760: PPUSH
9761: PPUSH
9762: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
9763: LD_ADDR_VAR 0 8
9767: PUSH
9768: LD_INT 22
9770: PUSH
9771: LD_INT 8
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 120
9780: PUSH
9781: LD_INT 10
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PPUSH
9792: CALL_OW 69
9796: ST_TO_ADDR
// if not units then
9797: LD_VAR 0 8
9801: NOT
9802: IFFALSE 9806
// exit ;
9804: GO 10011
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
9806: LD_ADDR_VAR 0 4
9810: PUSH
9811: LD_INT 80
9813: PUSH
9814: LD_INT 60
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 54
9823: PUSH
9824: LD_INT 57
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 55
9833: PUSH
9834: LD_INT 74
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 61
9843: PUSH
9844: LD_INT 85
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
9857: LD_ADDR_VAR 0 5
9861: PUSH
9862: LD_INT 93
9864: PUSH
9865: LD_INT 99
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 85
9874: PUSH
9875: LD_INT 99
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9886: LD_INT 35
9888: PPUSH
9889: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
9893: LD_ADDR_VAR 0 6
9897: PUSH
9898: LD_VAR 0 8
9902: PPUSH
9903: LD_INT 21
9905: PUSH
9906: LD_INT 2
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PPUSH
9913: CALL_OW 72
9917: ST_TO_ADDR
// if vehicles then
9918: LD_VAR 0 6
9922: IFFALSE 9938
// AgressiveMove ( vehicles , path ) ;
9924: LD_VAR 0 6
9928: PPUSH
9929: LD_VAR 0 4
9933: PPUSH
9934: CALL 68669 0 2
// infantry := UnitFilter ( units , [ f_type , unit_human ] ) ;
9938: LD_ADDR_VAR 0 7
9942: PUSH
9943: LD_VAR 0 8
9947: PPUSH
9948: LD_INT 21
9950: PUSH
9951: LD_INT 1
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PPUSH
9958: CALL_OW 72
9962: ST_TO_ADDR
// if infantry then
9963: LD_VAR 0 7
9967: IFFALSE 9983
// AgressiveMove ( infantry , path2 ) ;
9969: LD_VAR 0 7
9973: PPUSH
9974: LD_VAR 0 5
9978: PPUSH
9979: CALL 68669 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
9983: LD_ADDR_VAR 0 8
9987: PUSH
9988: LD_VAR 0 8
9992: PPUSH
9993: LD_INT 50
9995: PUSH
9996: EMPTY
9997: LIST
9998: PPUSH
9999: CALL_OW 72
10003: ST_TO_ADDR
// until not units ;
10004: LD_VAR 0 8
10008: NOT
10009: IFFALSE 9886
// end ;
10011: LD_VAR 0 1
10015: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10016: LD_INT 0
10018: PPUSH
10019: PPUSH
10020: PPUSH
10021: PPUSH
10022: PPUSH
10023: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10024: LD_ADDR_VAR 0 6
10028: PUSH
10029: LD_INT 22
10031: PUSH
10032: LD_INT 3
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PUSH
10039: LD_INT 120
10041: PUSH
10042: LD_INT 10
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PPUSH
10053: CALL_OW 69
10057: ST_TO_ADDR
// if not units then
10058: LD_VAR 0 6
10062: NOT
10063: IFFALSE 10067
// exit ;
10065: GO 10198
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10067: LD_ADDR_VAR 0 4
10071: PUSH
10072: LD_INT 80
10074: PUSH
10075: LD_INT 60
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PUSH
10082: LD_INT 54
10084: PUSH
10085: LD_INT 57
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PUSH
10092: LD_INT 55
10094: PUSH
10095: LD_INT 74
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 61
10104: PUSH
10105: LD_INT 85
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10118: LD_INT 35
10120: PPUSH
10121: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10125: LD_ADDR_VAR 0 5
10129: PUSH
10130: LD_VAR 0 6
10134: PPUSH
10135: LD_INT 21
10137: PUSH
10138: LD_INT 2
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL_OW 72
10149: ST_TO_ADDR
// if vehicles then
10150: LD_VAR 0 5
10154: IFFALSE 10170
// AgressiveMove ( vehicles , path ) ;
10156: LD_VAR 0 5
10160: PPUSH
10161: LD_VAR 0 4
10165: PPUSH
10166: CALL 68669 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10170: LD_ADDR_VAR 0 6
10174: PUSH
10175: LD_VAR 0 6
10179: PPUSH
10180: LD_INT 50
10182: PUSH
10183: EMPTY
10184: LIST
10185: PPUSH
10186: CALL_OW 72
10190: ST_TO_ADDR
// until not units ;
10191: LD_VAR 0 6
10195: NOT
10196: IFFALSE 10118
// end ; end_of_file
10198: LD_VAR 0 1
10202: RET
// every 1 1$0 trigger GetListOfCratesInArea ( CratesArea ) < 40 do
10203: LD_INT 13
10205: PPUSH
10206: CALL_OW 435
10210: PUSH
10211: LD_INT 40
10213: LESS
10214: IFFALSE 10241
10216: GO 10218
10218: DISABLE
// begin enable ;
10219: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10220: LD_INT 3
10222: PPUSH
10223: LD_INT 5
10225: PPUSH
10226: CALL_OW 12
10230: PPUSH
10231: LD_INT 13
10233: PPUSH
10234: LD_INT 1
10236: PPUSH
10237: CALL_OW 55
// end ; end_of_file
10241: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10242: LD_INT 0
10244: PPUSH
// ar_miner := 81 ;
10245: LD_ADDR_EXP 52
10249: PUSH
10250: LD_INT 81
10252: ST_TO_ADDR
// ar_crane := 88 ;
10253: LD_ADDR_EXP 51
10257: PUSH
10258: LD_INT 88
10260: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10261: LD_ADDR_EXP 46
10265: PUSH
10266: LD_INT 89
10268: ST_TO_ADDR
// us_hack := 99 ;
10269: LD_ADDR_EXP 47
10273: PUSH
10274: LD_INT 99
10276: ST_TO_ADDR
// us_artillery := 97 ;
10277: LD_ADDR_EXP 48
10281: PUSH
10282: LD_INT 97
10284: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10285: LD_ADDR_EXP 49
10289: PUSH
10290: LD_INT 91
10292: ST_TO_ADDR
// ar_mortar := 92 ;
10293: LD_ADDR_EXP 50
10297: PUSH
10298: LD_INT 92
10300: ST_TO_ADDR
// ru_flamethrower := 93 ;
10301: LD_ADDR_EXP 53
10305: PUSH
10306: LD_INT 93
10308: ST_TO_ADDR
// ru_radar := 98 ;
10309: LD_ADDR_EXP 45
10313: PUSH
10314: LD_INT 98
10316: ST_TO_ADDR
// tech_Artillery := 80 ;
10317: LD_ADDR_EXP 54
10321: PUSH
10322: LD_INT 80
10324: ST_TO_ADDR
// tech_RadMat := 81 ;
10325: LD_ADDR_EXP 55
10329: PUSH
10330: LD_INT 81
10332: ST_TO_ADDR
// tech_BasicTools := 82 ;
10333: LD_ADDR_EXP 56
10337: PUSH
10338: LD_INT 82
10340: ST_TO_ADDR
// tech_Cargo := 83 ;
10341: LD_ADDR_EXP 57
10345: PUSH
10346: LD_INT 83
10348: ST_TO_ADDR
// tech_Track := 84 ;
10349: LD_ADDR_EXP 58
10353: PUSH
10354: LD_INT 84
10356: ST_TO_ADDR
// tech_Crane := 85 ;
10357: LD_ADDR_EXP 59
10361: PUSH
10362: LD_INT 85
10364: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10365: LD_ADDR_EXP 60
10369: PUSH
10370: LD_INT 86
10372: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10373: LD_ADDR_EXP 61
10377: PUSH
10378: LD_INT 87
10380: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10381: LD_ADDR_EXP 62
10385: PUSH
10386: LD_INT 88
10388: ST_TO_ADDR
// class_mastodont := 31 ;
10389: LD_ADDR_EXP 63
10393: PUSH
10394: LD_INT 31
10396: ST_TO_ADDR
// class_horse := 21 ;
10397: LD_ADDR_EXP 64
10401: PUSH
10402: LD_INT 21
10404: ST_TO_ADDR
// end ;
10405: LD_VAR 0 1
10409: RET
// every 1 do
10410: GO 10412
10412: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10413: CALL 10242 0 0
10417: END
// every 0 0$1 do
10418: GO 10420
10420: DISABLE
// begin enable ;
10421: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10422: LD_STRING updateTimer(
10424: PUSH
10425: LD_OWVAR 1
10429: STR
10430: PUSH
10431: LD_STRING );
10433: STR
10434: PPUSH
10435: CALL_OW 559
// end ;
10439: END
// export function SOS_MapStart ( ) ; begin
10440: LD_INT 0
10442: PPUSH
// if streamModeActive then
10443: LD_EXP 65
10447: IFFALSE 10456
// DefineStreamItems ( true ) ;
10449: LD_INT 1
10451: PPUSH
10452: CALL 12106 0 1
// UpdateFactoryWaypoints ( ) ;
10456: CALL 25690 0 0
// end ;
10460: LD_VAR 0 1
10464: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10465: LD_INT 0
10467: PPUSH
// if p2 = 100 then
10468: LD_VAR 0 2
10472: PUSH
10473: LD_INT 100
10475: EQUAL
10476: IFFALSE 11479
// begin if not StreamModeActive then
10478: LD_EXP 65
10482: NOT
10483: IFFALSE 10493
// StreamModeActive := true ;
10485: LD_ADDR_EXP 65
10489: PUSH
10490: LD_INT 1
10492: ST_TO_ADDR
// if p3 = 0 then
10493: LD_VAR 0 3
10497: PUSH
10498: LD_INT 0
10500: EQUAL
10501: IFFALSE 10507
// InitStreamMode ;
10503: CALL 11642 0 0
// if p3 = 1 then
10507: LD_VAR 0 3
10511: PUSH
10512: LD_INT 1
10514: EQUAL
10515: IFFALSE 10525
// sRocket := true ;
10517: LD_ADDR_EXP 70
10521: PUSH
10522: LD_INT 1
10524: ST_TO_ADDR
// if p3 = 2 then
10525: LD_VAR 0 3
10529: PUSH
10530: LD_INT 2
10532: EQUAL
10533: IFFALSE 10543
// sSpeed := true ;
10535: LD_ADDR_EXP 69
10539: PUSH
10540: LD_INT 1
10542: ST_TO_ADDR
// if p3 = 3 then
10543: LD_VAR 0 3
10547: PUSH
10548: LD_INT 3
10550: EQUAL
10551: IFFALSE 10561
// sEngine := true ;
10553: LD_ADDR_EXP 71
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// if p3 = 4 then
10561: LD_VAR 0 3
10565: PUSH
10566: LD_INT 4
10568: EQUAL
10569: IFFALSE 10579
// sSpec := true ;
10571: LD_ADDR_EXP 68
10575: PUSH
10576: LD_INT 1
10578: ST_TO_ADDR
// if p3 = 5 then
10579: LD_VAR 0 3
10583: PUSH
10584: LD_INT 5
10586: EQUAL
10587: IFFALSE 10597
// sLevel := true ;
10589: LD_ADDR_EXP 72
10593: PUSH
10594: LD_INT 1
10596: ST_TO_ADDR
// if p3 = 6 then
10597: LD_VAR 0 3
10601: PUSH
10602: LD_INT 6
10604: EQUAL
10605: IFFALSE 10615
// sArmoury := true ;
10607: LD_ADDR_EXP 73
10611: PUSH
10612: LD_INT 1
10614: ST_TO_ADDR
// if p3 = 7 then
10615: LD_VAR 0 3
10619: PUSH
10620: LD_INT 7
10622: EQUAL
10623: IFFALSE 10633
// sRadar := true ;
10625: LD_ADDR_EXP 74
10629: PUSH
10630: LD_INT 1
10632: ST_TO_ADDR
// if p3 = 8 then
10633: LD_VAR 0 3
10637: PUSH
10638: LD_INT 8
10640: EQUAL
10641: IFFALSE 10651
// sBunker := true ;
10643: LD_ADDR_EXP 75
10647: PUSH
10648: LD_INT 1
10650: ST_TO_ADDR
// if p3 = 9 then
10651: LD_VAR 0 3
10655: PUSH
10656: LD_INT 9
10658: EQUAL
10659: IFFALSE 10669
// sHack := true ;
10661: LD_ADDR_EXP 76
10665: PUSH
10666: LD_INT 1
10668: ST_TO_ADDR
// if p3 = 10 then
10669: LD_VAR 0 3
10673: PUSH
10674: LD_INT 10
10676: EQUAL
10677: IFFALSE 10687
// sFire := true ;
10679: LD_ADDR_EXP 77
10683: PUSH
10684: LD_INT 1
10686: ST_TO_ADDR
// if p3 = 11 then
10687: LD_VAR 0 3
10691: PUSH
10692: LD_INT 11
10694: EQUAL
10695: IFFALSE 10705
// sRefresh := true ;
10697: LD_ADDR_EXP 78
10701: PUSH
10702: LD_INT 1
10704: ST_TO_ADDR
// if p3 = 12 then
10705: LD_VAR 0 3
10709: PUSH
10710: LD_INT 12
10712: EQUAL
10713: IFFALSE 10723
// sExp := true ;
10715: LD_ADDR_EXP 79
10719: PUSH
10720: LD_INT 1
10722: ST_TO_ADDR
// if p3 = 13 then
10723: LD_VAR 0 3
10727: PUSH
10728: LD_INT 13
10730: EQUAL
10731: IFFALSE 10741
// sDepot := true ;
10733: LD_ADDR_EXP 80
10737: PUSH
10738: LD_INT 1
10740: ST_TO_ADDR
// if p3 = 14 then
10741: LD_VAR 0 3
10745: PUSH
10746: LD_INT 14
10748: EQUAL
10749: IFFALSE 10759
// sFlag := true ;
10751: LD_ADDR_EXP 81
10755: PUSH
10756: LD_INT 1
10758: ST_TO_ADDR
// if p3 = 15 then
10759: LD_VAR 0 3
10763: PUSH
10764: LD_INT 15
10766: EQUAL
10767: IFFALSE 10777
// sKamikadze := true ;
10769: LD_ADDR_EXP 89
10773: PUSH
10774: LD_INT 1
10776: ST_TO_ADDR
// if p3 = 16 then
10777: LD_VAR 0 3
10781: PUSH
10782: LD_INT 16
10784: EQUAL
10785: IFFALSE 10795
// sTroll := true ;
10787: LD_ADDR_EXP 90
10791: PUSH
10792: LD_INT 1
10794: ST_TO_ADDR
// if p3 = 17 then
10795: LD_VAR 0 3
10799: PUSH
10800: LD_INT 17
10802: EQUAL
10803: IFFALSE 10813
// sSlow := true ;
10805: LD_ADDR_EXP 91
10809: PUSH
10810: LD_INT 1
10812: ST_TO_ADDR
// if p3 = 18 then
10813: LD_VAR 0 3
10817: PUSH
10818: LD_INT 18
10820: EQUAL
10821: IFFALSE 10831
// sLack := true ;
10823: LD_ADDR_EXP 92
10827: PUSH
10828: LD_INT 1
10830: ST_TO_ADDR
// if p3 = 19 then
10831: LD_VAR 0 3
10835: PUSH
10836: LD_INT 19
10838: EQUAL
10839: IFFALSE 10849
// sTank := true ;
10841: LD_ADDR_EXP 94
10845: PUSH
10846: LD_INT 1
10848: ST_TO_ADDR
// if p3 = 20 then
10849: LD_VAR 0 3
10853: PUSH
10854: LD_INT 20
10856: EQUAL
10857: IFFALSE 10867
// sRemote := true ;
10859: LD_ADDR_EXP 95
10863: PUSH
10864: LD_INT 1
10866: ST_TO_ADDR
// if p3 = 21 then
10867: LD_VAR 0 3
10871: PUSH
10872: LD_INT 21
10874: EQUAL
10875: IFFALSE 10885
// sPowell := true ;
10877: LD_ADDR_EXP 96
10881: PUSH
10882: LD_INT 1
10884: ST_TO_ADDR
// if p3 = 22 then
10885: LD_VAR 0 3
10889: PUSH
10890: LD_INT 22
10892: EQUAL
10893: IFFALSE 10903
// sTeleport := true ;
10895: LD_ADDR_EXP 99
10899: PUSH
10900: LD_INT 1
10902: ST_TO_ADDR
// if p3 = 23 then
10903: LD_VAR 0 3
10907: PUSH
10908: LD_INT 23
10910: EQUAL
10911: IFFALSE 10921
// sOilTower := true ;
10913: LD_ADDR_EXP 101
10917: PUSH
10918: LD_INT 1
10920: ST_TO_ADDR
// if p3 = 24 then
10921: LD_VAR 0 3
10925: PUSH
10926: LD_INT 24
10928: EQUAL
10929: IFFALSE 10939
// sShovel := true ;
10931: LD_ADDR_EXP 102
10935: PUSH
10936: LD_INT 1
10938: ST_TO_ADDR
// if p3 = 25 then
10939: LD_VAR 0 3
10943: PUSH
10944: LD_INT 25
10946: EQUAL
10947: IFFALSE 10957
// sSheik := true ;
10949: LD_ADDR_EXP 103
10953: PUSH
10954: LD_INT 1
10956: ST_TO_ADDR
// if p3 = 26 then
10957: LD_VAR 0 3
10961: PUSH
10962: LD_INT 26
10964: EQUAL
10965: IFFALSE 10975
// sEarthquake := true ;
10967: LD_ADDR_EXP 105
10971: PUSH
10972: LD_INT 1
10974: ST_TO_ADDR
// if p3 = 27 then
10975: LD_VAR 0 3
10979: PUSH
10980: LD_INT 27
10982: EQUAL
10983: IFFALSE 10993
// sAI := true ;
10985: LD_ADDR_EXP 106
10989: PUSH
10990: LD_INT 1
10992: ST_TO_ADDR
// if p3 = 28 then
10993: LD_VAR 0 3
10997: PUSH
10998: LD_INT 28
11000: EQUAL
11001: IFFALSE 11011
// sCargo := true ;
11003: LD_ADDR_EXP 109
11007: PUSH
11008: LD_INT 1
11010: ST_TO_ADDR
// if p3 = 29 then
11011: LD_VAR 0 3
11015: PUSH
11016: LD_INT 29
11018: EQUAL
11019: IFFALSE 11029
// sDLaser := true ;
11021: LD_ADDR_EXP 110
11025: PUSH
11026: LD_INT 1
11028: ST_TO_ADDR
// if p3 = 30 then
11029: LD_VAR 0 3
11033: PUSH
11034: LD_INT 30
11036: EQUAL
11037: IFFALSE 11047
// sExchange := true ;
11039: LD_ADDR_EXP 111
11043: PUSH
11044: LD_INT 1
11046: ST_TO_ADDR
// if p3 = 31 then
11047: LD_VAR 0 3
11051: PUSH
11052: LD_INT 31
11054: EQUAL
11055: IFFALSE 11065
// sFac := true ;
11057: LD_ADDR_EXP 112
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// if p3 = 32 then
11065: LD_VAR 0 3
11069: PUSH
11070: LD_INT 32
11072: EQUAL
11073: IFFALSE 11083
// sPower := true ;
11075: LD_ADDR_EXP 113
11079: PUSH
11080: LD_INT 1
11082: ST_TO_ADDR
// if p3 = 33 then
11083: LD_VAR 0 3
11087: PUSH
11088: LD_INT 33
11090: EQUAL
11091: IFFALSE 11101
// sRandom := true ;
11093: LD_ADDR_EXP 114
11097: PUSH
11098: LD_INT 1
11100: ST_TO_ADDR
// if p3 = 34 then
11101: LD_VAR 0 3
11105: PUSH
11106: LD_INT 34
11108: EQUAL
11109: IFFALSE 11119
// sShield := true ;
11111: LD_ADDR_EXP 115
11115: PUSH
11116: LD_INT 1
11118: ST_TO_ADDR
// if p3 = 35 then
11119: LD_VAR 0 3
11123: PUSH
11124: LD_INT 35
11126: EQUAL
11127: IFFALSE 11137
// sTime := true ;
11129: LD_ADDR_EXP 116
11133: PUSH
11134: LD_INT 1
11136: ST_TO_ADDR
// if p3 = 36 then
11137: LD_VAR 0 3
11141: PUSH
11142: LD_INT 36
11144: EQUAL
11145: IFFALSE 11155
// sTools := true ;
11147: LD_ADDR_EXP 117
11151: PUSH
11152: LD_INT 1
11154: ST_TO_ADDR
// if p3 = 101 then
11155: LD_VAR 0 3
11159: PUSH
11160: LD_INT 101
11162: EQUAL
11163: IFFALSE 11173
// sSold := true ;
11165: LD_ADDR_EXP 82
11169: PUSH
11170: LD_INT 1
11172: ST_TO_ADDR
// if p3 = 102 then
11173: LD_VAR 0 3
11177: PUSH
11178: LD_INT 102
11180: EQUAL
11181: IFFALSE 11191
// sDiff := true ;
11183: LD_ADDR_EXP 83
11187: PUSH
11188: LD_INT 1
11190: ST_TO_ADDR
// if p3 = 103 then
11191: LD_VAR 0 3
11195: PUSH
11196: LD_INT 103
11198: EQUAL
11199: IFFALSE 11209
// sFog := true ;
11201: LD_ADDR_EXP 86
11205: PUSH
11206: LD_INT 1
11208: ST_TO_ADDR
// if p3 = 104 then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_INT 104
11216: EQUAL
11217: IFFALSE 11227
// sReset := true ;
11219: LD_ADDR_EXP 87
11223: PUSH
11224: LD_INT 1
11226: ST_TO_ADDR
// if p3 = 105 then
11227: LD_VAR 0 3
11231: PUSH
11232: LD_INT 105
11234: EQUAL
11235: IFFALSE 11245
// sSun := true ;
11237: LD_ADDR_EXP 88
11241: PUSH
11242: LD_INT 1
11244: ST_TO_ADDR
// if p3 = 106 then
11245: LD_VAR 0 3
11249: PUSH
11250: LD_INT 106
11252: EQUAL
11253: IFFALSE 11263
// sTiger := true ;
11255: LD_ADDR_EXP 84
11259: PUSH
11260: LD_INT 1
11262: ST_TO_ADDR
// if p3 = 107 then
11263: LD_VAR 0 3
11267: PUSH
11268: LD_INT 107
11270: EQUAL
11271: IFFALSE 11281
// sBomb := true ;
11273: LD_ADDR_EXP 85
11277: PUSH
11278: LD_INT 1
11280: ST_TO_ADDR
// if p3 = 108 then
11281: LD_VAR 0 3
11285: PUSH
11286: LD_INT 108
11288: EQUAL
11289: IFFALSE 11299
// sWound := true ;
11291: LD_ADDR_EXP 93
11295: PUSH
11296: LD_INT 1
11298: ST_TO_ADDR
// if p3 = 109 then
11299: LD_VAR 0 3
11303: PUSH
11304: LD_INT 109
11306: EQUAL
11307: IFFALSE 11317
// sBetray := true ;
11309: LD_ADDR_EXP 97
11313: PUSH
11314: LD_INT 1
11316: ST_TO_ADDR
// if p3 = 110 then
11317: LD_VAR 0 3
11321: PUSH
11322: LD_INT 110
11324: EQUAL
11325: IFFALSE 11335
// sContamin := true ;
11327: LD_ADDR_EXP 98
11331: PUSH
11332: LD_INT 1
11334: ST_TO_ADDR
// if p3 = 111 then
11335: LD_VAR 0 3
11339: PUSH
11340: LD_INT 111
11342: EQUAL
11343: IFFALSE 11353
// sOil := true ;
11345: LD_ADDR_EXP 100
11349: PUSH
11350: LD_INT 1
11352: ST_TO_ADDR
// if p3 = 112 then
11353: LD_VAR 0 3
11357: PUSH
11358: LD_INT 112
11360: EQUAL
11361: IFFALSE 11371
// sStu := true ;
11363: LD_ADDR_EXP 104
11367: PUSH
11368: LD_INT 1
11370: ST_TO_ADDR
// if p3 = 113 then
11371: LD_VAR 0 3
11375: PUSH
11376: LD_INT 113
11378: EQUAL
11379: IFFALSE 11389
// sBazooka := true ;
11381: LD_ADDR_EXP 107
11385: PUSH
11386: LD_INT 1
11388: ST_TO_ADDR
// if p3 = 114 then
11389: LD_VAR 0 3
11393: PUSH
11394: LD_INT 114
11396: EQUAL
11397: IFFALSE 11407
// sMortar := true ;
11399: LD_ADDR_EXP 108
11403: PUSH
11404: LD_INT 1
11406: ST_TO_ADDR
// if p3 = 115 then
11407: LD_VAR 0 3
11411: PUSH
11412: LD_INT 115
11414: EQUAL
11415: IFFALSE 11425
// sRanger := true ;
11417: LD_ADDR_EXP 118
11421: PUSH
11422: LD_INT 1
11424: ST_TO_ADDR
// if p3 = 116 then
11425: LD_VAR 0 3
11429: PUSH
11430: LD_INT 116
11432: EQUAL
11433: IFFALSE 11443
// sComputer := true ;
11435: LD_ADDR_EXP 119
11439: PUSH
11440: LD_INT 1
11442: ST_TO_ADDR
// if p3 = 117 then
11443: LD_VAR 0 3
11447: PUSH
11448: LD_INT 117
11450: EQUAL
11451: IFFALSE 11461
// s30 := true ;
11453: LD_ADDR_EXP 120
11457: PUSH
11458: LD_INT 1
11460: ST_TO_ADDR
// if p3 = 118 then
11461: LD_VAR 0 3
11465: PUSH
11466: LD_INT 118
11468: EQUAL
11469: IFFALSE 11479
// s60 := true ;
11471: LD_ADDR_EXP 121
11475: PUSH
11476: LD_INT 1
11478: ST_TO_ADDR
// end ; if p2 = 101 then
11479: LD_VAR 0 2
11483: PUSH
11484: LD_INT 101
11486: EQUAL
11487: IFFALSE 11615
// begin case p3 of 1 :
11489: LD_VAR 0 3
11493: PUSH
11494: LD_INT 1
11496: DOUBLE
11497: EQUAL
11498: IFTRUE 11502
11500: GO 11509
11502: POP
// hHackUnlimitedResources ; 2 :
11503: CALL 23713 0 0
11507: GO 11615
11509: LD_INT 2
11511: DOUBLE
11512: EQUAL
11513: IFTRUE 11517
11515: GO 11524
11517: POP
// hHackSetLevel10 ; 3 :
11518: CALL 23846 0 0
11522: GO 11615
11524: LD_INT 3
11526: DOUBLE
11527: EQUAL
11528: IFTRUE 11532
11530: GO 11539
11532: POP
// hHackSetLevel10YourUnits ; 4 :
11533: CALL 23931 0 0
11537: GO 11615
11539: LD_INT 4
11541: DOUBLE
11542: EQUAL
11543: IFTRUE 11547
11545: GO 11554
11547: POP
// hHackInvincible ; 5 :
11548: CALL 24379 0 0
11552: GO 11615
11554: LD_INT 5
11556: DOUBLE
11557: EQUAL
11558: IFTRUE 11562
11560: GO 11569
11562: POP
// hHackInvisible ; 6 :
11563: CALL 24490 0 0
11567: GO 11615
11569: LD_INT 6
11571: DOUBLE
11572: EQUAL
11573: IFTRUE 11577
11575: GO 11584
11577: POP
// hHackChangeYourSide ; 7 :
11578: CALL 24547 0 0
11582: GO 11615
11584: LD_INT 7
11586: DOUBLE
11587: EQUAL
11588: IFTRUE 11592
11590: GO 11599
11592: POP
// hHackChangeUnitSide ; 8 :
11593: CALL 24589 0 0
11597: GO 11615
11599: LD_INT 8
11601: DOUBLE
11602: EQUAL
11603: IFTRUE 11607
11605: GO 11614
11607: POP
// hHackFog ; end ;
11608: CALL 24690 0 0
11612: GO 11615
11614: POP
// end ; end ;
11615: LD_VAR 0 7
11619: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11620: GO 11622
11622: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11623: LD_STRING initStreamRollete();
11625: PPUSH
11626: CALL_OW 559
// InitStreamMode ;
11630: CALL 11642 0 0
// DefineStreamItems ( false ) ;
11634: LD_INT 0
11636: PPUSH
11637: CALL 12106 0 1
// end ;
11641: END
// function InitStreamMode ; begin
11642: LD_INT 0
11644: PPUSH
// streamModeActive := false ;
11645: LD_ADDR_EXP 65
11649: PUSH
11650: LD_INT 0
11652: ST_TO_ADDR
// normalCounter := 36 ;
11653: LD_ADDR_EXP 66
11657: PUSH
11658: LD_INT 36
11660: ST_TO_ADDR
// hardcoreCounter := 18 ;
11661: LD_ADDR_EXP 67
11665: PUSH
11666: LD_INT 18
11668: ST_TO_ADDR
// sRocket := false ;
11669: LD_ADDR_EXP 70
11673: PUSH
11674: LD_INT 0
11676: ST_TO_ADDR
// sSpeed := false ;
11677: LD_ADDR_EXP 69
11681: PUSH
11682: LD_INT 0
11684: ST_TO_ADDR
// sEngine := false ;
11685: LD_ADDR_EXP 71
11689: PUSH
11690: LD_INT 0
11692: ST_TO_ADDR
// sSpec := false ;
11693: LD_ADDR_EXP 68
11697: PUSH
11698: LD_INT 0
11700: ST_TO_ADDR
// sLevel := false ;
11701: LD_ADDR_EXP 72
11705: PUSH
11706: LD_INT 0
11708: ST_TO_ADDR
// sArmoury := false ;
11709: LD_ADDR_EXP 73
11713: PUSH
11714: LD_INT 0
11716: ST_TO_ADDR
// sRadar := false ;
11717: LD_ADDR_EXP 74
11721: PUSH
11722: LD_INT 0
11724: ST_TO_ADDR
// sBunker := false ;
11725: LD_ADDR_EXP 75
11729: PUSH
11730: LD_INT 0
11732: ST_TO_ADDR
// sHack := false ;
11733: LD_ADDR_EXP 76
11737: PUSH
11738: LD_INT 0
11740: ST_TO_ADDR
// sFire := false ;
11741: LD_ADDR_EXP 77
11745: PUSH
11746: LD_INT 0
11748: ST_TO_ADDR
// sRefresh := false ;
11749: LD_ADDR_EXP 78
11753: PUSH
11754: LD_INT 0
11756: ST_TO_ADDR
// sExp := false ;
11757: LD_ADDR_EXP 79
11761: PUSH
11762: LD_INT 0
11764: ST_TO_ADDR
// sDepot := false ;
11765: LD_ADDR_EXP 80
11769: PUSH
11770: LD_INT 0
11772: ST_TO_ADDR
// sFlag := false ;
11773: LD_ADDR_EXP 81
11777: PUSH
11778: LD_INT 0
11780: ST_TO_ADDR
// sKamikadze := false ;
11781: LD_ADDR_EXP 89
11785: PUSH
11786: LD_INT 0
11788: ST_TO_ADDR
// sTroll := false ;
11789: LD_ADDR_EXP 90
11793: PUSH
11794: LD_INT 0
11796: ST_TO_ADDR
// sSlow := false ;
11797: LD_ADDR_EXP 91
11801: PUSH
11802: LD_INT 0
11804: ST_TO_ADDR
// sLack := false ;
11805: LD_ADDR_EXP 92
11809: PUSH
11810: LD_INT 0
11812: ST_TO_ADDR
// sTank := false ;
11813: LD_ADDR_EXP 94
11817: PUSH
11818: LD_INT 0
11820: ST_TO_ADDR
// sRemote := false ;
11821: LD_ADDR_EXP 95
11825: PUSH
11826: LD_INT 0
11828: ST_TO_ADDR
// sPowell := false ;
11829: LD_ADDR_EXP 96
11833: PUSH
11834: LD_INT 0
11836: ST_TO_ADDR
// sTeleport := false ;
11837: LD_ADDR_EXP 99
11841: PUSH
11842: LD_INT 0
11844: ST_TO_ADDR
// sOilTower := false ;
11845: LD_ADDR_EXP 101
11849: PUSH
11850: LD_INT 0
11852: ST_TO_ADDR
// sShovel := false ;
11853: LD_ADDR_EXP 102
11857: PUSH
11858: LD_INT 0
11860: ST_TO_ADDR
// sSheik := false ;
11861: LD_ADDR_EXP 103
11865: PUSH
11866: LD_INT 0
11868: ST_TO_ADDR
// sEarthquake := false ;
11869: LD_ADDR_EXP 105
11873: PUSH
11874: LD_INT 0
11876: ST_TO_ADDR
// sAI := false ;
11877: LD_ADDR_EXP 106
11881: PUSH
11882: LD_INT 0
11884: ST_TO_ADDR
// sCargo := false ;
11885: LD_ADDR_EXP 109
11889: PUSH
11890: LD_INT 0
11892: ST_TO_ADDR
// sDLaser := false ;
11893: LD_ADDR_EXP 110
11897: PUSH
11898: LD_INT 0
11900: ST_TO_ADDR
// sExchange := false ;
11901: LD_ADDR_EXP 111
11905: PUSH
11906: LD_INT 0
11908: ST_TO_ADDR
// sFac := false ;
11909: LD_ADDR_EXP 112
11913: PUSH
11914: LD_INT 0
11916: ST_TO_ADDR
// sPower := false ;
11917: LD_ADDR_EXP 113
11921: PUSH
11922: LD_INT 0
11924: ST_TO_ADDR
// sRandom := false ;
11925: LD_ADDR_EXP 114
11929: PUSH
11930: LD_INT 0
11932: ST_TO_ADDR
// sShield := false ;
11933: LD_ADDR_EXP 115
11937: PUSH
11938: LD_INT 0
11940: ST_TO_ADDR
// sTime := false ;
11941: LD_ADDR_EXP 116
11945: PUSH
11946: LD_INT 0
11948: ST_TO_ADDR
// sTools := false ;
11949: LD_ADDR_EXP 117
11953: PUSH
11954: LD_INT 0
11956: ST_TO_ADDR
// sSold := false ;
11957: LD_ADDR_EXP 82
11961: PUSH
11962: LD_INT 0
11964: ST_TO_ADDR
// sDiff := false ;
11965: LD_ADDR_EXP 83
11969: PUSH
11970: LD_INT 0
11972: ST_TO_ADDR
// sFog := false ;
11973: LD_ADDR_EXP 86
11977: PUSH
11978: LD_INT 0
11980: ST_TO_ADDR
// sReset := false ;
11981: LD_ADDR_EXP 87
11985: PUSH
11986: LD_INT 0
11988: ST_TO_ADDR
// sSun := false ;
11989: LD_ADDR_EXP 88
11993: PUSH
11994: LD_INT 0
11996: ST_TO_ADDR
// sTiger := false ;
11997: LD_ADDR_EXP 84
12001: PUSH
12002: LD_INT 0
12004: ST_TO_ADDR
// sBomb := false ;
12005: LD_ADDR_EXP 85
12009: PUSH
12010: LD_INT 0
12012: ST_TO_ADDR
// sWound := false ;
12013: LD_ADDR_EXP 93
12017: PUSH
12018: LD_INT 0
12020: ST_TO_ADDR
// sBetray := false ;
12021: LD_ADDR_EXP 97
12025: PUSH
12026: LD_INT 0
12028: ST_TO_ADDR
// sContamin := false ;
12029: LD_ADDR_EXP 98
12033: PUSH
12034: LD_INT 0
12036: ST_TO_ADDR
// sOil := false ;
12037: LD_ADDR_EXP 100
12041: PUSH
12042: LD_INT 0
12044: ST_TO_ADDR
// sStu := false ;
12045: LD_ADDR_EXP 104
12049: PUSH
12050: LD_INT 0
12052: ST_TO_ADDR
// sBazooka := false ;
12053: LD_ADDR_EXP 107
12057: PUSH
12058: LD_INT 0
12060: ST_TO_ADDR
// sMortar := false ;
12061: LD_ADDR_EXP 108
12065: PUSH
12066: LD_INT 0
12068: ST_TO_ADDR
// sRanger := false ;
12069: LD_ADDR_EXP 118
12073: PUSH
12074: LD_INT 0
12076: ST_TO_ADDR
// sComputer := false ;
12077: LD_ADDR_EXP 119
12081: PUSH
12082: LD_INT 0
12084: ST_TO_ADDR
// s30 := false ;
12085: LD_ADDR_EXP 120
12089: PUSH
12090: LD_INT 0
12092: ST_TO_ADDR
// s60 := false ;
12093: LD_ADDR_EXP 121
12097: PUSH
12098: LD_INT 0
12100: ST_TO_ADDR
// end ;
12101: LD_VAR 0 1
12105: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12106: LD_INT 0
12108: PPUSH
12109: PPUSH
12110: PPUSH
12111: PPUSH
12112: PPUSH
12113: PPUSH
12114: PPUSH
// result := [ ] ;
12115: LD_ADDR_VAR 0 2
12119: PUSH
12120: EMPTY
12121: ST_TO_ADDR
// if campaign_id = 1 then
12122: LD_OWVAR 69
12126: PUSH
12127: LD_INT 1
12129: EQUAL
12130: IFFALSE 15296
// begin case mission_number of 1 :
12132: LD_OWVAR 70
12136: PUSH
12137: LD_INT 1
12139: DOUBLE
12140: EQUAL
12141: IFTRUE 12145
12143: GO 12221
12145: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12146: LD_ADDR_VAR 0 2
12150: PUSH
12151: LD_INT 2
12153: PUSH
12154: LD_INT 4
12156: PUSH
12157: LD_INT 11
12159: PUSH
12160: LD_INT 12
12162: PUSH
12163: LD_INT 15
12165: PUSH
12166: LD_INT 16
12168: PUSH
12169: LD_INT 22
12171: PUSH
12172: LD_INT 23
12174: PUSH
12175: LD_INT 26
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 101
12191: PUSH
12192: LD_INT 102
12194: PUSH
12195: LD_INT 106
12197: PUSH
12198: LD_INT 116
12200: PUSH
12201: LD_INT 117
12203: PUSH
12204: LD_INT 118
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: ST_TO_ADDR
12219: GO 15294
12221: LD_INT 2
12223: DOUBLE
12224: EQUAL
12225: IFTRUE 12229
12227: GO 12313
12229: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12230: LD_ADDR_VAR 0 2
12234: PUSH
12235: LD_INT 2
12237: PUSH
12238: LD_INT 4
12240: PUSH
12241: LD_INT 11
12243: PUSH
12244: LD_INT 12
12246: PUSH
12247: LD_INT 15
12249: PUSH
12250: LD_INT 16
12252: PUSH
12253: LD_INT 22
12255: PUSH
12256: LD_INT 23
12258: PUSH
12259: LD_INT 26
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: PUSH
12273: LD_INT 101
12275: PUSH
12276: LD_INT 102
12278: PUSH
12279: LD_INT 105
12281: PUSH
12282: LD_INT 106
12284: PUSH
12285: LD_INT 108
12287: PUSH
12288: LD_INT 116
12290: PUSH
12291: LD_INT 117
12293: PUSH
12294: LD_INT 118
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: ST_TO_ADDR
12311: GO 15294
12313: LD_INT 3
12315: DOUBLE
12316: EQUAL
12317: IFTRUE 12321
12319: GO 12409
12321: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12322: LD_ADDR_VAR 0 2
12326: PUSH
12327: LD_INT 2
12329: PUSH
12330: LD_INT 4
12332: PUSH
12333: LD_INT 5
12335: PUSH
12336: LD_INT 11
12338: PUSH
12339: LD_INT 12
12341: PUSH
12342: LD_INT 15
12344: PUSH
12345: LD_INT 16
12347: PUSH
12348: LD_INT 22
12350: PUSH
12351: LD_INT 26
12353: PUSH
12354: LD_INT 36
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 101
12371: PUSH
12372: LD_INT 102
12374: PUSH
12375: LD_INT 105
12377: PUSH
12378: LD_INT 106
12380: PUSH
12381: LD_INT 108
12383: PUSH
12384: LD_INT 116
12386: PUSH
12387: LD_INT 117
12389: PUSH
12390: LD_INT 118
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: ST_TO_ADDR
12407: GO 15294
12409: LD_INT 4
12411: DOUBLE
12412: EQUAL
12413: IFTRUE 12417
12415: GO 12513
12417: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12418: LD_ADDR_VAR 0 2
12422: PUSH
12423: LD_INT 2
12425: PUSH
12426: LD_INT 4
12428: PUSH
12429: LD_INT 5
12431: PUSH
12432: LD_INT 8
12434: PUSH
12435: LD_INT 11
12437: PUSH
12438: LD_INT 12
12440: PUSH
12441: LD_INT 15
12443: PUSH
12444: LD_INT 16
12446: PUSH
12447: LD_INT 22
12449: PUSH
12450: LD_INT 23
12452: PUSH
12453: LD_INT 26
12455: PUSH
12456: LD_INT 36
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 101
12475: PUSH
12476: LD_INT 102
12478: PUSH
12479: LD_INT 105
12481: PUSH
12482: LD_INT 106
12484: PUSH
12485: LD_INT 108
12487: PUSH
12488: LD_INT 116
12490: PUSH
12491: LD_INT 117
12493: PUSH
12494: LD_INT 118
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: ST_TO_ADDR
12511: GO 15294
12513: LD_INT 5
12515: DOUBLE
12516: EQUAL
12517: IFTRUE 12521
12519: GO 12633
12521: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12522: LD_ADDR_VAR 0 2
12526: PUSH
12527: LD_INT 2
12529: PUSH
12530: LD_INT 4
12532: PUSH
12533: LD_INT 5
12535: PUSH
12536: LD_INT 6
12538: PUSH
12539: LD_INT 8
12541: PUSH
12542: LD_INT 11
12544: PUSH
12545: LD_INT 12
12547: PUSH
12548: LD_INT 15
12550: PUSH
12551: LD_INT 16
12553: PUSH
12554: LD_INT 22
12556: PUSH
12557: LD_INT 23
12559: PUSH
12560: LD_INT 25
12562: PUSH
12563: LD_INT 26
12565: PUSH
12566: LD_INT 36
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: PUSH
12585: LD_INT 101
12587: PUSH
12588: LD_INT 102
12590: PUSH
12591: LD_INT 105
12593: PUSH
12594: LD_INT 106
12596: PUSH
12597: LD_INT 108
12599: PUSH
12600: LD_INT 109
12602: PUSH
12603: LD_INT 112
12605: PUSH
12606: LD_INT 116
12608: PUSH
12609: LD_INT 117
12611: PUSH
12612: LD_INT 118
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: ST_TO_ADDR
12631: GO 15294
12633: LD_INT 6
12635: DOUBLE
12636: EQUAL
12637: IFTRUE 12641
12639: GO 12773
12641: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12642: LD_ADDR_VAR 0 2
12646: PUSH
12647: LD_INT 2
12649: PUSH
12650: LD_INT 4
12652: PUSH
12653: LD_INT 5
12655: PUSH
12656: LD_INT 6
12658: PUSH
12659: LD_INT 8
12661: PUSH
12662: LD_INT 11
12664: PUSH
12665: LD_INT 12
12667: PUSH
12668: LD_INT 15
12670: PUSH
12671: LD_INT 16
12673: PUSH
12674: LD_INT 20
12676: PUSH
12677: LD_INT 21
12679: PUSH
12680: LD_INT 22
12682: PUSH
12683: LD_INT 23
12685: PUSH
12686: LD_INT 25
12688: PUSH
12689: LD_INT 26
12691: PUSH
12692: LD_INT 30
12694: PUSH
12695: LD_INT 31
12697: PUSH
12698: LD_INT 32
12700: PUSH
12701: LD_INT 36
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 101
12727: PUSH
12728: LD_INT 102
12730: PUSH
12731: LD_INT 105
12733: PUSH
12734: LD_INT 106
12736: PUSH
12737: LD_INT 108
12739: PUSH
12740: LD_INT 109
12742: PUSH
12743: LD_INT 112
12745: PUSH
12746: LD_INT 116
12748: PUSH
12749: LD_INT 117
12751: PUSH
12752: LD_INT 118
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: ST_TO_ADDR
12771: GO 15294
12773: LD_INT 7
12775: DOUBLE
12776: EQUAL
12777: IFTRUE 12781
12779: GO 12893
12781: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12782: LD_ADDR_VAR 0 2
12786: PUSH
12787: LD_INT 2
12789: PUSH
12790: LD_INT 4
12792: PUSH
12793: LD_INT 5
12795: PUSH
12796: LD_INT 7
12798: PUSH
12799: LD_INT 11
12801: PUSH
12802: LD_INT 12
12804: PUSH
12805: LD_INT 15
12807: PUSH
12808: LD_INT 16
12810: PUSH
12811: LD_INT 20
12813: PUSH
12814: LD_INT 21
12816: PUSH
12817: LD_INT 22
12819: PUSH
12820: LD_INT 23
12822: PUSH
12823: LD_INT 25
12825: PUSH
12826: LD_INT 26
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 101
12847: PUSH
12848: LD_INT 102
12850: PUSH
12851: LD_INT 103
12853: PUSH
12854: LD_INT 105
12856: PUSH
12857: LD_INT 106
12859: PUSH
12860: LD_INT 108
12862: PUSH
12863: LD_INT 112
12865: PUSH
12866: LD_INT 116
12868: PUSH
12869: LD_INT 117
12871: PUSH
12872: LD_INT 118
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: ST_TO_ADDR
12891: GO 15294
12893: LD_INT 8
12895: DOUBLE
12896: EQUAL
12897: IFTRUE 12901
12899: GO 13041
12901: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12902: LD_ADDR_VAR 0 2
12906: PUSH
12907: LD_INT 2
12909: PUSH
12910: LD_INT 4
12912: PUSH
12913: LD_INT 5
12915: PUSH
12916: LD_INT 6
12918: PUSH
12919: LD_INT 7
12921: PUSH
12922: LD_INT 8
12924: PUSH
12925: LD_INT 11
12927: PUSH
12928: LD_INT 12
12930: PUSH
12931: LD_INT 15
12933: PUSH
12934: LD_INT 16
12936: PUSH
12937: LD_INT 20
12939: PUSH
12940: LD_INT 21
12942: PUSH
12943: LD_INT 22
12945: PUSH
12946: LD_INT 23
12948: PUSH
12949: LD_INT 25
12951: PUSH
12952: LD_INT 26
12954: PUSH
12955: LD_INT 30
12957: PUSH
12958: LD_INT 31
12960: PUSH
12961: LD_INT 32
12963: PUSH
12964: LD_INT 36
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: PUSH
12989: LD_INT 101
12991: PUSH
12992: LD_INT 102
12994: PUSH
12995: LD_INT 103
12997: PUSH
12998: LD_INT 105
13000: PUSH
13001: LD_INT 106
13003: PUSH
13004: LD_INT 108
13006: PUSH
13007: LD_INT 109
13009: PUSH
13010: LD_INT 112
13012: PUSH
13013: LD_INT 116
13015: PUSH
13016: LD_INT 117
13018: PUSH
13019: LD_INT 118
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: ST_TO_ADDR
13039: GO 15294
13041: LD_INT 9
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13197
13049: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13050: LD_ADDR_VAR 0 2
13054: PUSH
13055: LD_INT 2
13057: PUSH
13058: LD_INT 4
13060: PUSH
13061: LD_INT 5
13063: PUSH
13064: LD_INT 6
13066: PUSH
13067: LD_INT 7
13069: PUSH
13070: LD_INT 8
13072: PUSH
13073: LD_INT 11
13075: PUSH
13076: LD_INT 12
13078: PUSH
13079: LD_INT 15
13081: PUSH
13082: LD_INT 16
13084: PUSH
13085: LD_INT 20
13087: PUSH
13088: LD_INT 21
13090: PUSH
13091: LD_INT 22
13093: PUSH
13094: LD_INT 23
13096: PUSH
13097: LD_INT 25
13099: PUSH
13100: LD_INT 26
13102: PUSH
13103: LD_INT 28
13105: PUSH
13106: LD_INT 30
13108: PUSH
13109: LD_INT 31
13111: PUSH
13112: LD_INT 32
13114: PUSH
13115: LD_INT 36
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 101
13143: PUSH
13144: LD_INT 102
13146: PUSH
13147: LD_INT 103
13149: PUSH
13150: LD_INT 105
13152: PUSH
13153: LD_INT 106
13155: PUSH
13156: LD_INT 108
13158: PUSH
13159: LD_INT 109
13161: PUSH
13162: LD_INT 112
13164: PUSH
13165: LD_INT 114
13167: PUSH
13168: LD_INT 116
13170: PUSH
13171: LD_INT 117
13173: PUSH
13174: LD_INT 118
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: ST_TO_ADDR
13195: GO 15294
13197: LD_INT 10
13199: DOUBLE
13200: EQUAL
13201: IFTRUE 13205
13203: GO 13401
13205: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13206: LD_ADDR_VAR 0 2
13210: PUSH
13211: LD_INT 2
13213: PUSH
13214: LD_INT 4
13216: PUSH
13217: LD_INT 5
13219: PUSH
13220: LD_INT 6
13222: PUSH
13223: LD_INT 7
13225: PUSH
13226: LD_INT 8
13228: PUSH
13229: LD_INT 9
13231: PUSH
13232: LD_INT 10
13234: PUSH
13235: LD_INT 11
13237: PUSH
13238: LD_INT 12
13240: PUSH
13241: LD_INT 13
13243: PUSH
13244: LD_INT 14
13246: PUSH
13247: LD_INT 15
13249: PUSH
13250: LD_INT 16
13252: PUSH
13253: LD_INT 17
13255: PUSH
13256: LD_INT 18
13258: PUSH
13259: LD_INT 19
13261: PUSH
13262: LD_INT 20
13264: PUSH
13265: LD_INT 21
13267: PUSH
13268: LD_INT 22
13270: PUSH
13271: LD_INT 23
13273: PUSH
13274: LD_INT 24
13276: PUSH
13277: LD_INT 25
13279: PUSH
13280: LD_INT 26
13282: PUSH
13283: LD_INT 28
13285: PUSH
13286: LD_INT 30
13288: PUSH
13289: LD_INT 31
13291: PUSH
13292: LD_INT 32
13294: PUSH
13295: LD_INT 36
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: PUSH
13329: LD_INT 101
13331: PUSH
13332: LD_INT 102
13334: PUSH
13335: LD_INT 103
13337: PUSH
13338: LD_INT 104
13340: PUSH
13341: LD_INT 105
13343: PUSH
13344: LD_INT 106
13346: PUSH
13347: LD_INT 107
13349: PUSH
13350: LD_INT 108
13352: PUSH
13353: LD_INT 109
13355: PUSH
13356: LD_INT 110
13358: PUSH
13359: LD_INT 111
13361: PUSH
13362: LD_INT 112
13364: PUSH
13365: LD_INT 114
13367: PUSH
13368: LD_INT 116
13370: PUSH
13371: LD_INT 117
13373: PUSH
13374: LD_INT 118
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: ST_TO_ADDR
13399: GO 15294
13401: LD_INT 11
13403: DOUBLE
13404: EQUAL
13405: IFTRUE 13409
13407: GO 13613
13409: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13410: LD_ADDR_VAR 0 2
13414: PUSH
13415: LD_INT 2
13417: PUSH
13418: LD_INT 3
13420: PUSH
13421: LD_INT 4
13423: PUSH
13424: LD_INT 5
13426: PUSH
13427: LD_INT 6
13429: PUSH
13430: LD_INT 7
13432: PUSH
13433: LD_INT 8
13435: PUSH
13436: LD_INT 9
13438: PUSH
13439: LD_INT 10
13441: PUSH
13442: LD_INT 11
13444: PUSH
13445: LD_INT 12
13447: PUSH
13448: LD_INT 13
13450: PUSH
13451: LD_INT 14
13453: PUSH
13454: LD_INT 15
13456: PUSH
13457: LD_INT 16
13459: PUSH
13460: LD_INT 17
13462: PUSH
13463: LD_INT 18
13465: PUSH
13466: LD_INT 19
13468: PUSH
13469: LD_INT 20
13471: PUSH
13472: LD_INT 21
13474: PUSH
13475: LD_INT 22
13477: PUSH
13478: LD_INT 23
13480: PUSH
13481: LD_INT 24
13483: PUSH
13484: LD_INT 25
13486: PUSH
13487: LD_INT 26
13489: PUSH
13490: LD_INT 28
13492: PUSH
13493: LD_INT 30
13495: PUSH
13496: LD_INT 31
13498: PUSH
13499: LD_INT 32
13501: PUSH
13502: LD_INT 34
13504: PUSH
13505: LD_INT 36
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: PUSH
13541: LD_INT 101
13543: PUSH
13544: LD_INT 102
13546: PUSH
13547: LD_INT 103
13549: PUSH
13550: LD_INT 104
13552: PUSH
13553: LD_INT 105
13555: PUSH
13556: LD_INT 106
13558: PUSH
13559: LD_INT 107
13561: PUSH
13562: LD_INT 108
13564: PUSH
13565: LD_INT 109
13567: PUSH
13568: LD_INT 110
13570: PUSH
13571: LD_INT 111
13573: PUSH
13574: LD_INT 112
13576: PUSH
13577: LD_INT 114
13579: PUSH
13580: LD_INT 116
13582: PUSH
13583: LD_INT 117
13585: PUSH
13586: LD_INT 118
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: ST_TO_ADDR
13611: GO 15294
13613: LD_INT 12
13615: DOUBLE
13616: EQUAL
13617: IFTRUE 13621
13619: GO 13841
13621: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13622: LD_ADDR_VAR 0 2
13626: PUSH
13627: LD_INT 1
13629: PUSH
13630: LD_INT 2
13632: PUSH
13633: LD_INT 3
13635: PUSH
13636: LD_INT 4
13638: PUSH
13639: LD_INT 5
13641: PUSH
13642: LD_INT 6
13644: PUSH
13645: LD_INT 7
13647: PUSH
13648: LD_INT 8
13650: PUSH
13651: LD_INT 9
13653: PUSH
13654: LD_INT 10
13656: PUSH
13657: LD_INT 11
13659: PUSH
13660: LD_INT 12
13662: PUSH
13663: LD_INT 13
13665: PUSH
13666: LD_INT 14
13668: PUSH
13669: LD_INT 15
13671: PUSH
13672: LD_INT 16
13674: PUSH
13675: LD_INT 17
13677: PUSH
13678: LD_INT 18
13680: PUSH
13681: LD_INT 19
13683: PUSH
13684: LD_INT 20
13686: PUSH
13687: LD_INT 21
13689: PUSH
13690: LD_INT 22
13692: PUSH
13693: LD_INT 23
13695: PUSH
13696: LD_INT 24
13698: PUSH
13699: LD_INT 25
13701: PUSH
13702: LD_INT 26
13704: PUSH
13705: LD_INT 27
13707: PUSH
13708: LD_INT 28
13710: PUSH
13711: LD_INT 30
13713: PUSH
13714: LD_INT 31
13716: PUSH
13717: LD_INT 32
13719: PUSH
13720: LD_INT 33
13722: PUSH
13723: LD_INT 34
13725: PUSH
13726: LD_INT 36
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 101
13767: PUSH
13768: LD_INT 102
13770: PUSH
13771: LD_INT 103
13773: PUSH
13774: LD_INT 104
13776: PUSH
13777: LD_INT 105
13779: PUSH
13780: LD_INT 106
13782: PUSH
13783: LD_INT 107
13785: PUSH
13786: LD_INT 108
13788: PUSH
13789: LD_INT 109
13791: PUSH
13792: LD_INT 110
13794: PUSH
13795: LD_INT 111
13797: PUSH
13798: LD_INT 112
13800: PUSH
13801: LD_INT 113
13803: PUSH
13804: LD_INT 114
13806: PUSH
13807: LD_INT 116
13809: PUSH
13810: LD_INT 117
13812: PUSH
13813: LD_INT 118
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: ST_TO_ADDR
13839: GO 15294
13841: LD_INT 13
13843: DOUBLE
13844: EQUAL
13845: IFTRUE 13849
13847: GO 14057
13849: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13850: LD_ADDR_VAR 0 2
13854: PUSH
13855: LD_INT 1
13857: PUSH
13858: LD_INT 2
13860: PUSH
13861: LD_INT 3
13863: PUSH
13864: LD_INT 4
13866: PUSH
13867: LD_INT 5
13869: PUSH
13870: LD_INT 8
13872: PUSH
13873: LD_INT 9
13875: PUSH
13876: LD_INT 10
13878: PUSH
13879: LD_INT 11
13881: PUSH
13882: LD_INT 12
13884: PUSH
13885: LD_INT 14
13887: PUSH
13888: LD_INT 15
13890: PUSH
13891: LD_INT 16
13893: PUSH
13894: LD_INT 17
13896: PUSH
13897: LD_INT 18
13899: PUSH
13900: LD_INT 19
13902: PUSH
13903: LD_INT 20
13905: PUSH
13906: LD_INT 21
13908: PUSH
13909: LD_INT 22
13911: PUSH
13912: LD_INT 23
13914: PUSH
13915: LD_INT 24
13917: PUSH
13918: LD_INT 25
13920: PUSH
13921: LD_INT 26
13923: PUSH
13924: LD_INT 27
13926: PUSH
13927: LD_INT 28
13929: PUSH
13930: LD_INT 30
13932: PUSH
13933: LD_INT 31
13935: PUSH
13936: LD_INT 32
13938: PUSH
13939: LD_INT 33
13941: PUSH
13942: LD_INT 34
13944: PUSH
13945: LD_INT 36
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 101
13983: PUSH
13984: LD_INT 102
13986: PUSH
13987: LD_INT 103
13989: PUSH
13990: LD_INT 104
13992: PUSH
13993: LD_INT 105
13995: PUSH
13996: LD_INT 106
13998: PUSH
13999: LD_INT 107
14001: PUSH
14002: LD_INT 108
14004: PUSH
14005: LD_INT 109
14007: PUSH
14008: LD_INT 110
14010: PUSH
14011: LD_INT 111
14013: PUSH
14014: LD_INT 112
14016: PUSH
14017: LD_INT 113
14019: PUSH
14020: LD_INT 114
14022: PUSH
14023: LD_INT 116
14025: PUSH
14026: LD_INT 117
14028: PUSH
14029: LD_INT 118
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: ST_TO_ADDR
14055: GO 15294
14057: LD_INT 14
14059: DOUBLE
14060: EQUAL
14061: IFTRUE 14065
14063: GO 14289
14065: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14066: LD_ADDR_VAR 0 2
14070: PUSH
14071: LD_INT 1
14073: PUSH
14074: LD_INT 2
14076: PUSH
14077: LD_INT 3
14079: PUSH
14080: LD_INT 4
14082: PUSH
14083: LD_INT 5
14085: PUSH
14086: LD_INT 6
14088: PUSH
14089: LD_INT 7
14091: PUSH
14092: LD_INT 8
14094: PUSH
14095: LD_INT 9
14097: PUSH
14098: LD_INT 10
14100: PUSH
14101: LD_INT 11
14103: PUSH
14104: LD_INT 12
14106: PUSH
14107: LD_INT 13
14109: PUSH
14110: LD_INT 14
14112: PUSH
14113: LD_INT 15
14115: PUSH
14116: LD_INT 16
14118: PUSH
14119: LD_INT 17
14121: PUSH
14122: LD_INT 18
14124: PUSH
14125: LD_INT 19
14127: PUSH
14128: LD_INT 20
14130: PUSH
14131: LD_INT 21
14133: PUSH
14134: LD_INT 22
14136: PUSH
14137: LD_INT 23
14139: PUSH
14140: LD_INT 24
14142: PUSH
14143: LD_INT 25
14145: PUSH
14146: LD_INT 26
14148: PUSH
14149: LD_INT 27
14151: PUSH
14152: LD_INT 28
14154: PUSH
14155: LD_INT 29
14157: PUSH
14158: LD_INT 30
14160: PUSH
14161: LD_INT 31
14163: PUSH
14164: LD_INT 32
14166: PUSH
14167: LD_INT 33
14169: PUSH
14170: LD_INT 34
14172: PUSH
14173: LD_INT 36
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: PUSH
14213: LD_INT 101
14215: PUSH
14216: LD_INT 102
14218: PUSH
14219: LD_INT 103
14221: PUSH
14222: LD_INT 104
14224: PUSH
14225: LD_INT 105
14227: PUSH
14228: LD_INT 106
14230: PUSH
14231: LD_INT 107
14233: PUSH
14234: LD_INT 108
14236: PUSH
14237: LD_INT 109
14239: PUSH
14240: LD_INT 110
14242: PUSH
14243: LD_INT 111
14245: PUSH
14246: LD_INT 112
14248: PUSH
14249: LD_INT 113
14251: PUSH
14252: LD_INT 114
14254: PUSH
14255: LD_INT 116
14257: PUSH
14258: LD_INT 117
14260: PUSH
14261: LD_INT 118
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: ST_TO_ADDR
14287: GO 15294
14289: LD_INT 15
14291: DOUBLE
14292: EQUAL
14293: IFTRUE 14297
14295: GO 14521
14297: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14298: LD_ADDR_VAR 0 2
14302: PUSH
14303: LD_INT 1
14305: PUSH
14306: LD_INT 2
14308: PUSH
14309: LD_INT 3
14311: PUSH
14312: LD_INT 4
14314: PUSH
14315: LD_INT 5
14317: PUSH
14318: LD_INT 6
14320: PUSH
14321: LD_INT 7
14323: PUSH
14324: LD_INT 8
14326: PUSH
14327: LD_INT 9
14329: PUSH
14330: LD_INT 10
14332: PUSH
14333: LD_INT 11
14335: PUSH
14336: LD_INT 12
14338: PUSH
14339: LD_INT 13
14341: PUSH
14342: LD_INT 14
14344: PUSH
14345: LD_INT 15
14347: PUSH
14348: LD_INT 16
14350: PUSH
14351: LD_INT 17
14353: PUSH
14354: LD_INT 18
14356: PUSH
14357: LD_INT 19
14359: PUSH
14360: LD_INT 20
14362: PUSH
14363: LD_INT 21
14365: PUSH
14366: LD_INT 22
14368: PUSH
14369: LD_INT 23
14371: PUSH
14372: LD_INT 24
14374: PUSH
14375: LD_INT 25
14377: PUSH
14378: LD_INT 26
14380: PUSH
14381: LD_INT 27
14383: PUSH
14384: LD_INT 28
14386: PUSH
14387: LD_INT 29
14389: PUSH
14390: LD_INT 30
14392: PUSH
14393: LD_INT 31
14395: PUSH
14396: LD_INT 32
14398: PUSH
14399: LD_INT 33
14401: PUSH
14402: LD_INT 34
14404: PUSH
14405: LD_INT 36
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 101
14447: PUSH
14448: LD_INT 102
14450: PUSH
14451: LD_INT 103
14453: PUSH
14454: LD_INT 104
14456: PUSH
14457: LD_INT 105
14459: PUSH
14460: LD_INT 106
14462: PUSH
14463: LD_INT 107
14465: PUSH
14466: LD_INT 108
14468: PUSH
14469: LD_INT 109
14471: PUSH
14472: LD_INT 110
14474: PUSH
14475: LD_INT 111
14477: PUSH
14478: LD_INT 112
14480: PUSH
14481: LD_INT 113
14483: PUSH
14484: LD_INT 114
14486: PUSH
14487: LD_INT 116
14489: PUSH
14490: LD_INT 117
14492: PUSH
14493: LD_INT 118
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: ST_TO_ADDR
14519: GO 15294
14521: LD_INT 16
14523: DOUBLE
14524: EQUAL
14525: IFTRUE 14529
14527: GO 14665
14529: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14530: LD_ADDR_VAR 0 2
14534: PUSH
14535: LD_INT 2
14537: PUSH
14538: LD_INT 4
14540: PUSH
14541: LD_INT 5
14543: PUSH
14544: LD_INT 7
14546: PUSH
14547: LD_INT 11
14549: PUSH
14550: LD_INT 12
14552: PUSH
14553: LD_INT 15
14555: PUSH
14556: LD_INT 16
14558: PUSH
14559: LD_INT 20
14561: PUSH
14562: LD_INT 21
14564: PUSH
14565: LD_INT 22
14567: PUSH
14568: LD_INT 23
14570: PUSH
14571: LD_INT 25
14573: PUSH
14574: LD_INT 26
14576: PUSH
14577: LD_INT 30
14579: PUSH
14580: LD_INT 31
14582: PUSH
14583: LD_INT 32
14585: PUSH
14586: LD_INT 33
14588: PUSH
14589: LD_INT 34
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: PUSH
14613: LD_INT 101
14615: PUSH
14616: LD_INT 102
14618: PUSH
14619: LD_INT 103
14621: PUSH
14622: LD_INT 106
14624: PUSH
14625: LD_INT 108
14627: PUSH
14628: LD_INT 112
14630: PUSH
14631: LD_INT 113
14633: PUSH
14634: LD_INT 114
14636: PUSH
14637: LD_INT 116
14639: PUSH
14640: LD_INT 117
14642: PUSH
14643: LD_INT 118
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: ST_TO_ADDR
14663: GO 15294
14665: LD_INT 17
14667: DOUBLE
14668: EQUAL
14669: IFTRUE 14673
14671: GO 14897
14673: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14674: LD_ADDR_VAR 0 2
14678: PUSH
14679: LD_INT 1
14681: PUSH
14682: LD_INT 2
14684: PUSH
14685: LD_INT 3
14687: PUSH
14688: LD_INT 4
14690: PUSH
14691: LD_INT 5
14693: PUSH
14694: LD_INT 6
14696: PUSH
14697: LD_INT 7
14699: PUSH
14700: LD_INT 8
14702: PUSH
14703: LD_INT 9
14705: PUSH
14706: LD_INT 10
14708: PUSH
14709: LD_INT 11
14711: PUSH
14712: LD_INT 12
14714: PUSH
14715: LD_INT 13
14717: PUSH
14718: LD_INT 14
14720: PUSH
14721: LD_INT 15
14723: PUSH
14724: LD_INT 16
14726: PUSH
14727: LD_INT 17
14729: PUSH
14730: LD_INT 18
14732: PUSH
14733: LD_INT 19
14735: PUSH
14736: LD_INT 20
14738: PUSH
14739: LD_INT 21
14741: PUSH
14742: LD_INT 22
14744: PUSH
14745: LD_INT 23
14747: PUSH
14748: LD_INT 24
14750: PUSH
14751: LD_INT 25
14753: PUSH
14754: LD_INT 26
14756: PUSH
14757: LD_INT 27
14759: PUSH
14760: LD_INT 28
14762: PUSH
14763: LD_INT 29
14765: PUSH
14766: LD_INT 30
14768: PUSH
14769: LD_INT 31
14771: PUSH
14772: LD_INT 32
14774: PUSH
14775: LD_INT 33
14777: PUSH
14778: LD_INT 34
14780: PUSH
14781: LD_INT 36
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: PUSH
14821: LD_INT 101
14823: PUSH
14824: LD_INT 102
14826: PUSH
14827: LD_INT 103
14829: PUSH
14830: LD_INT 104
14832: PUSH
14833: LD_INT 105
14835: PUSH
14836: LD_INT 106
14838: PUSH
14839: LD_INT 107
14841: PUSH
14842: LD_INT 108
14844: PUSH
14845: LD_INT 109
14847: PUSH
14848: LD_INT 110
14850: PUSH
14851: LD_INT 111
14853: PUSH
14854: LD_INT 112
14856: PUSH
14857: LD_INT 113
14859: PUSH
14860: LD_INT 114
14862: PUSH
14863: LD_INT 116
14865: PUSH
14866: LD_INT 117
14868: PUSH
14869: LD_INT 118
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: ST_TO_ADDR
14895: GO 15294
14897: LD_INT 18
14899: DOUBLE
14900: EQUAL
14901: IFTRUE 14905
14903: GO 15053
14905: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14906: LD_ADDR_VAR 0 2
14910: PUSH
14911: LD_INT 2
14913: PUSH
14914: LD_INT 4
14916: PUSH
14917: LD_INT 5
14919: PUSH
14920: LD_INT 7
14922: PUSH
14923: LD_INT 11
14925: PUSH
14926: LD_INT 12
14928: PUSH
14929: LD_INT 15
14931: PUSH
14932: LD_INT 16
14934: PUSH
14935: LD_INT 20
14937: PUSH
14938: LD_INT 21
14940: PUSH
14941: LD_INT 22
14943: PUSH
14944: LD_INT 23
14946: PUSH
14947: LD_INT 25
14949: PUSH
14950: LD_INT 26
14952: PUSH
14953: LD_INT 30
14955: PUSH
14956: LD_INT 31
14958: PUSH
14959: LD_INT 32
14961: PUSH
14962: LD_INT 33
14964: PUSH
14965: LD_INT 34
14967: PUSH
14968: LD_INT 35
14970: PUSH
14971: LD_INT 36
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 101
14999: PUSH
15000: LD_INT 102
15002: PUSH
15003: LD_INT 103
15005: PUSH
15006: LD_INT 106
15008: PUSH
15009: LD_INT 108
15011: PUSH
15012: LD_INT 112
15014: PUSH
15015: LD_INT 113
15017: PUSH
15018: LD_INT 114
15020: PUSH
15021: LD_INT 115
15023: PUSH
15024: LD_INT 116
15026: PUSH
15027: LD_INT 117
15029: PUSH
15030: LD_INT 118
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: ST_TO_ADDR
15051: GO 15294
15053: LD_INT 19
15055: DOUBLE
15056: EQUAL
15057: IFTRUE 15061
15059: GO 15293
15061: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15062: LD_ADDR_VAR 0 2
15066: PUSH
15067: LD_INT 1
15069: PUSH
15070: LD_INT 2
15072: PUSH
15073: LD_INT 3
15075: PUSH
15076: LD_INT 4
15078: PUSH
15079: LD_INT 5
15081: PUSH
15082: LD_INT 6
15084: PUSH
15085: LD_INT 7
15087: PUSH
15088: LD_INT 8
15090: PUSH
15091: LD_INT 9
15093: PUSH
15094: LD_INT 10
15096: PUSH
15097: LD_INT 11
15099: PUSH
15100: LD_INT 12
15102: PUSH
15103: LD_INT 13
15105: PUSH
15106: LD_INT 14
15108: PUSH
15109: LD_INT 15
15111: PUSH
15112: LD_INT 16
15114: PUSH
15115: LD_INT 17
15117: PUSH
15118: LD_INT 18
15120: PUSH
15121: LD_INT 19
15123: PUSH
15124: LD_INT 20
15126: PUSH
15127: LD_INT 21
15129: PUSH
15130: LD_INT 22
15132: PUSH
15133: LD_INT 23
15135: PUSH
15136: LD_INT 24
15138: PUSH
15139: LD_INT 25
15141: PUSH
15142: LD_INT 26
15144: PUSH
15145: LD_INT 27
15147: PUSH
15148: LD_INT 28
15150: PUSH
15151: LD_INT 29
15153: PUSH
15154: LD_INT 30
15156: PUSH
15157: LD_INT 31
15159: PUSH
15160: LD_INT 32
15162: PUSH
15163: LD_INT 33
15165: PUSH
15166: LD_INT 34
15168: PUSH
15169: LD_INT 35
15171: PUSH
15172: LD_INT 36
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 101
15215: PUSH
15216: LD_INT 102
15218: PUSH
15219: LD_INT 103
15221: PUSH
15222: LD_INT 104
15224: PUSH
15225: LD_INT 105
15227: PUSH
15228: LD_INT 106
15230: PUSH
15231: LD_INT 107
15233: PUSH
15234: LD_INT 108
15236: PUSH
15237: LD_INT 109
15239: PUSH
15240: LD_INT 110
15242: PUSH
15243: LD_INT 111
15245: PUSH
15246: LD_INT 112
15248: PUSH
15249: LD_INT 113
15251: PUSH
15252: LD_INT 114
15254: PUSH
15255: LD_INT 115
15257: PUSH
15258: LD_INT 116
15260: PUSH
15261: LD_INT 117
15263: PUSH
15264: LD_INT 118
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: ST_TO_ADDR
15291: GO 15294
15293: POP
// end else
15294: GO 15525
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15296: LD_ADDR_VAR 0 2
15300: PUSH
15301: LD_INT 1
15303: PUSH
15304: LD_INT 2
15306: PUSH
15307: LD_INT 3
15309: PUSH
15310: LD_INT 4
15312: PUSH
15313: LD_INT 5
15315: PUSH
15316: LD_INT 6
15318: PUSH
15319: LD_INT 7
15321: PUSH
15322: LD_INT 8
15324: PUSH
15325: LD_INT 9
15327: PUSH
15328: LD_INT 10
15330: PUSH
15331: LD_INT 11
15333: PUSH
15334: LD_INT 12
15336: PUSH
15337: LD_INT 13
15339: PUSH
15340: LD_INT 14
15342: PUSH
15343: LD_INT 15
15345: PUSH
15346: LD_INT 16
15348: PUSH
15349: LD_INT 17
15351: PUSH
15352: LD_INT 18
15354: PUSH
15355: LD_INT 19
15357: PUSH
15358: LD_INT 20
15360: PUSH
15361: LD_INT 21
15363: PUSH
15364: LD_INT 22
15366: PUSH
15367: LD_INT 23
15369: PUSH
15370: LD_INT 24
15372: PUSH
15373: LD_INT 25
15375: PUSH
15376: LD_INT 26
15378: PUSH
15379: LD_INT 27
15381: PUSH
15382: LD_INT 28
15384: PUSH
15385: LD_INT 29
15387: PUSH
15388: LD_INT 30
15390: PUSH
15391: LD_INT 31
15393: PUSH
15394: LD_INT 32
15396: PUSH
15397: LD_INT 33
15399: PUSH
15400: LD_INT 34
15402: PUSH
15403: LD_INT 35
15405: PUSH
15406: LD_INT 36
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 101
15449: PUSH
15450: LD_INT 102
15452: PUSH
15453: LD_INT 103
15455: PUSH
15456: LD_INT 104
15458: PUSH
15459: LD_INT 105
15461: PUSH
15462: LD_INT 106
15464: PUSH
15465: LD_INT 107
15467: PUSH
15468: LD_INT 108
15470: PUSH
15471: LD_INT 109
15473: PUSH
15474: LD_INT 110
15476: PUSH
15477: LD_INT 111
15479: PUSH
15480: LD_INT 112
15482: PUSH
15483: LD_INT 113
15485: PUSH
15486: LD_INT 114
15488: PUSH
15489: LD_INT 115
15491: PUSH
15492: LD_INT 116
15494: PUSH
15495: LD_INT 117
15497: PUSH
15498: LD_INT 118
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: ST_TO_ADDR
// if result then
15525: LD_VAR 0 2
15529: IFFALSE 16315
// begin normal :=  ;
15531: LD_ADDR_VAR 0 5
15535: PUSH
15536: LD_STRING 
15538: ST_TO_ADDR
// hardcore :=  ;
15539: LD_ADDR_VAR 0 6
15543: PUSH
15544: LD_STRING 
15546: ST_TO_ADDR
// active :=  ;
15547: LD_ADDR_VAR 0 7
15551: PUSH
15552: LD_STRING 
15554: ST_TO_ADDR
// for i = 1 to normalCounter do
15555: LD_ADDR_VAR 0 8
15559: PUSH
15560: DOUBLE
15561: LD_INT 1
15563: DEC
15564: ST_TO_ADDR
15565: LD_EXP 66
15569: PUSH
15570: FOR_TO
15571: IFFALSE 15672
// begin tmp := 0 ;
15573: LD_ADDR_VAR 0 3
15577: PUSH
15578: LD_STRING 0
15580: ST_TO_ADDR
// if result [ 1 ] then
15581: LD_VAR 0 2
15585: PUSH
15586: LD_INT 1
15588: ARRAY
15589: IFFALSE 15654
// if result [ 1 ] [ 1 ] = i then
15591: LD_VAR 0 2
15595: PUSH
15596: LD_INT 1
15598: ARRAY
15599: PUSH
15600: LD_INT 1
15602: ARRAY
15603: PUSH
15604: LD_VAR 0 8
15608: EQUAL
15609: IFFALSE 15654
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15611: LD_ADDR_VAR 0 2
15615: PUSH
15616: LD_VAR 0 2
15620: PPUSH
15621: LD_INT 1
15623: PPUSH
15624: LD_VAR 0 2
15628: PUSH
15629: LD_INT 1
15631: ARRAY
15632: PPUSH
15633: LD_INT 1
15635: PPUSH
15636: CALL_OW 3
15640: PPUSH
15641: CALL_OW 1
15645: ST_TO_ADDR
// tmp := 1 ;
15646: LD_ADDR_VAR 0 3
15650: PUSH
15651: LD_STRING 1
15653: ST_TO_ADDR
// end ; normal := normal & tmp ;
15654: LD_ADDR_VAR 0 5
15658: PUSH
15659: LD_VAR 0 5
15663: PUSH
15664: LD_VAR 0 3
15668: STR
15669: ST_TO_ADDR
// end ;
15670: GO 15570
15672: POP
15673: POP
// for i = 1 to hardcoreCounter do
15674: LD_ADDR_VAR 0 8
15678: PUSH
15679: DOUBLE
15680: LD_INT 1
15682: DEC
15683: ST_TO_ADDR
15684: LD_EXP 67
15688: PUSH
15689: FOR_TO
15690: IFFALSE 15795
// begin tmp := 0 ;
15692: LD_ADDR_VAR 0 3
15696: PUSH
15697: LD_STRING 0
15699: ST_TO_ADDR
// if result [ 2 ] then
15700: LD_VAR 0 2
15704: PUSH
15705: LD_INT 2
15707: ARRAY
15708: IFFALSE 15777
// if result [ 2 ] [ 1 ] = 100 + i then
15710: LD_VAR 0 2
15714: PUSH
15715: LD_INT 2
15717: ARRAY
15718: PUSH
15719: LD_INT 1
15721: ARRAY
15722: PUSH
15723: LD_INT 100
15725: PUSH
15726: LD_VAR 0 8
15730: PLUS
15731: EQUAL
15732: IFFALSE 15777
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15734: LD_ADDR_VAR 0 2
15738: PUSH
15739: LD_VAR 0 2
15743: PPUSH
15744: LD_INT 2
15746: PPUSH
15747: LD_VAR 0 2
15751: PUSH
15752: LD_INT 2
15754: ARRAY
15755: PPUSH
15756: LD_INT 1
15758: PPUSH
15759: CALL_OW 3
15763: PPUSH
15764: CALL_OW 1
15768: ST_TO_ADDR
// tmp := 1 ;
15769: LD_ADDR_VAR 0 3
15773: PUSH
15774: LD_STRING 1
15776: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15777: LD_ADDR_VAR 0 6
15781: PUSH
15782: LD_VAR 0 6
15786: PUSH
15787: LD_VAR 0 3
15791: STR
15792: ST_TO_ADDR
// end ;
15793: GO 15689
15795: POP
15796: POP
// if isGameLoad then
15797: LD_VAR 0 1
15801: IFFALSE 16276
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15803: LD_ADDR_VAR 0 4
15807: PUSH
15808: LD_EXP 70
15812: PUSH
15813: LD_EXP 69
15817: PUSH
15818: LD_EXP 71
15822: PUSH
15823: LD_EXP 68
15827: PUSH
15828: LD_EXP 72
15832: PUSH
15833: LD_EXP 73
15837: PUSH
15838: LD_EXP 74
15842: PUSH
15843: LD_EXP 75
15847: PUSH
15848: LD_EXP 76
15852: PUSH
15853: LD_EXP 77
15857: PUSH
15858: LD_EXP 78
15862: PUSH
15863: LD_EXP 79
15867: PUSH
15868: LD_EXP 80
15872: PUSH
15873: LD_EXP 81
15877: PUSH
15878: LD_EXP 89
15882: PUSH
15883: LD_EXP 90
15887: PUSH
15888: LD_EXP 91
15892: PUSH
15893: LD_EXP 92
15897: PUSH
15898: LD_EXP 94
15902: PUSH
15903: LD_EXP 95
15907: PUSH
15908: LD_EXP 96
15912: PUSH
15913: LD_EXP 99
15917: PUSH
15918: LD_EXP 101
15922: PUSH
15923: LD_EXP 102
15927: PUSH
15928: LD_EXP 103
15932: PUSH
15933: LD_EXP 105
15937: PUSH
15938: LD_EXP 106
15942: PUSH
15943: LD_EXP 109
15947: PUSH
15948: LD_EXP 110
15952: PUSH
15953: LD_EXP 111
15957: PUSH
15958: LD_EXP 112
15962: PUSH
15963: LD_EXP 113
15967: PUSH
15968: LD_EXP 114
15972: PUSH
15973: LD_EXP 115
15977: PUSH
15978: LD_EXP 116
15982: PUSH
15983: LD_EXP 117
15987: PUSH
15988: LD_EXP 82
15992: PUSH
15993: LD_EXP 83
15997: PUSH
15998: LD_EXP 86
16002: PUSH
16003: LD_EXP 87
16007: PUSH
16008: LD_EXP 88
16012: PUSH
16013: LD_EXP 84
16017: PUSH
16018: LD_EXP 85
16022: PUSH
16023: LD_EXP 93
16027: PUSH
16028: LD_EXP 97
16032: PUSH
16033: LD_EXP 98
16037: PUSH
16038: LD_EXP 100
16042: PUSH
16043: LD_EXP 104
16047: PUSH
16048: LD_EXP 107
16052: PUSH
16053: LD_EXP 108
16057: PUSH
16058: LD_EXP 118
16062: PUSH
16063: LD_EXP 119
16067: PUSH
16068: LD_EXP 120
16072: PUSH
16073: LD_EXP 121
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: ST_TO_ADDR
// tmp :=  ;
16134: LD_ADDR_VAR 0 3
16138: PUSH
16139: LD_STRING 
16141: ST_TO_ADDR
// for i = 1 to normalCounter do
16142: LD_ADDR_VAR 0 8
16146: PUSH
16147: DOUBLE
16148: LD_INT 1
16150: DEC
16151: ST_TO_ADDR
16152: LD_EXP 66
16156: PUSH
16157: FOR_TO
16158: IFFALSE 16194
// begin if flags [ i ] then
16160: LD_VAR 0 4
16164: PUSH
16165: LD_VAR 0 8
16169: ARRAY
16170: IFFALSE 16192
// tmp := tmp & i & ; ;
16172: LD_ADDR_VAR 0 3
16176: PUSH
16177: LD_VAR 0 3
16181: PUSH
16182: LD_VAR 0 8
16186: STR
16187: PUSH
16188: LD_STRING ;
16190: STR
16191: ST_TO_ADDR
// end ;
16192: GO 16157
16194: POP
16195: POP
// for i = 1 to hardcoreCounter do
16196: LD_ADDR_VAR 0 8
16200: PUSH
16201: DOUBLE
16202: LD_INT 1
16204: DEC
16205: ST_TO_ADDR
16206: LD_EXP 67
16210: PUSH
16211: FOR_TO
16212: IFFALSE 16258
// begin if flags [ normalCounter + i ] then
16214: LD_VAR 0 4
16218: PUSH
16219: LD_EXP 66
16223: PUSH
16224: LD_VAR 0 8
16228: PLUS
16229: ARRAY
16230: IFFALSE 16256
// tmp := tmp & ( 100 + i ) & ; ;
16232: LD_ADDR_VAR 0 3
16236: PUSH
16237: LD_VAR 0 3
16241: PUSH
16242: LD_INT 100
16244: PUSH
16245: LD_VAR 0 8
16249: PLUS
16250: STR
16251: PUSH
16252: LD_STRING ;
16254: STR
16255: ST_TO_ADDR
// end ;
16256: GO 16211
16258: POP
16259: POP
// if tmp then
16260: LD_VAR 0 3
16264: IFFALSE 16276
// active := tmp ;
16266: LD_ADDR_VAR 0 7
16270: PUSH
16271: LD_VAR 0 3
16275: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16276: LD_STRING getStreamItemsFromMission("
16278: PUSH
16279: LD_VAR 0 5
16283: STR
16284: PUSH
16285: LD_STRING ","
16287: STR
16288: PUSH
16289: LD_VAR 0 6
16293: STR
16294: PUSH
16295: LD_STRING ","
16297: STR
16298: PUSH
16299: LD_VAR 0 7
16303: STR
16304: PUSH
16305: LD_STRING ")
16307: STR
16308: PPUSH
16309: CALL_OW 559
// end else
16313: GO 16322
// ToLua ( getStreamItemsFromMission("","","") ) ;
16315: LD_STRING getStreamItemsFromMission("","","")
16317: PPUSH
16318: CALL_OW 559
// end ;
16322: LD_VAR 0 2
16326: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16327: LD_EXP 65
16331: PUSH
16332: LD_EXP 70
16336: AND
16337: IFFALSE 16461
16339: GO 16341
16341: DISABLE
16342: LD_INT 0
16344: PPUSH
16345: PPUSH
// begin enable ;
16346: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16347: LD_ADDR_VAR 0 2
16351: PUSH
16352: LD_INT 22
16354: PUSH
16355: LD_OWVAR 2
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: LD_INT 2
16366: PUSH
16367: LD_INT 34
16369: PUSH
16370: LD_INT 7
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 34
16379: PUSH
16380: LD_INT 45
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 34
16389: PUSH
16390: LD_INT 28
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 34
16399: PUSH
16400: LD_INT 47
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PPUSH
16418: CALL_OW 69
16422: ST_TO_ADDR
// if not tmp then
16423: LD_VAR 0 2
16427: NOT
16428: IFFALSE 16432
// exit ;
16430: GO 16461
// for i in tmp do
16432: LD_ADDR_VAR 0 1
16436: PUSH
16437: LD_VAR 0 2
16441: PUSH
16442: FOR_IN
16443: IFFALSE 16459
// begin SetLives ( i , 0 ) ;
16445: LD_VAR 0 1
16449: PPUSH
16450: LD_INT 0
16452: PPUSH
16453: CALL_OW 234
// end ;
16457: GO 16442
16459: POP
16460: POP
// end ;
16461: PPOPN 2
16463: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16464: LD_EXP 65
16468: PUSH
16469: LD_EXP 71
16473: AND
16474: IFFALSE 16558
16476: GO 16478
16478: DISABLE
16479: LD_INT 0
16481: PPUSH
16482: PPUSH
// begin enable ;
16483: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16484: LD_ADDR_VAR 0 2
16488: PUSH
16489: LD_INT 22
16491: PUSH
16492: LD_OWVAR 2
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 32
16503: PUSH
16504: LD_INT 3
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PPUSH
16515: CALL_OW 69
16519: ST_TO_ADDR
// if not tmp then
16520: LD_VAR 0 2
16524: NOT
16525: IFFALSE 16529
// exit ;
16527: GO 16558
// for i in tmp do
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: LD_VAR 0 2
16538: PUSH
16539: FOR_IN
16540: IFFALSE 16556
// begin SetLives ( i , 0 ) ;
16542: LD_VAR 0 1
16546: PPUSH
16547: LD_INT 0
16549: PPUSH
16550: CALL_OW 234
// end ;
16554: GO 16539
16556: POP
16557: POP
// end ;
16558: PPOPN 2
16560: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16561: LD_EXP 65
16565: PUSH
16566: LD_EXP 68
16570: AND
16571: IFFALSE 16664
16573: GO 16575
16575: DISABLE
16576: LD_INT 0
16578: PPUSH
// begin enable ;
16579: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16580: LD_ADDR_VAR 0 1
16584: PUSH
16585: LD_INT 22
16587: PUSH
16588: LD_OWVAR 2
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 2
16599: PUSH
16600: LD_INT 25
16602: PUSH
16603: LD_INT 5
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 25
16612: PUSH
16613: LD_INT 9
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 25
16622: PUSH
16623: LD_INT 8
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PPUSH
16640: CALL_OW 69
16644: PUSH
16645: FOR_IN
16646: IFFALSE 16662
// begin SetClass ( i , 1 ) ;
16648: LD_VAR 0 1
16652: PPUSH
16653: LD_INT 1
16655: PPUSH
16656: CALL_OW 336
// end ;
16660: GO 16645
16662: POP
16663: POP
// end ;
16664: PPOPN 1
16666: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16667: LD_EXP 65
16671: PUSH
16672: LD_EXP 69
16676: AND
16677: PUSH
16678: LD_OWVAR 65
16682: PUSH
16683: LD_INT 7
16685: LESS
16686: AND
16687: IFFALSE 16701
16689: GO 16691
16691: DISABLE
// begin enable ;
16692: ENABLE
// game_speed := 7 ;
16693: LD_ADDR_OWVAR 65
16697: PUSH
16698: LD_INT 7
16700: ST_TO_ADDR
// end ;
16701: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16702: LD_EXP 65
16706: PUSH
16707: LD_EXP 72
16711: AND
16712: IFFALSE 16914
16714: GO 16716
16716: DISABLE
16717: LD_INT 0
16719: PPUSH
16720: PPUSH
16721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16722: LD_ADDR_VAR 0 3
16726: PUSH
16727: LD_INT 81
16729: PUSH
16730: LD_OWVAR 2
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 21
16741: PUSH
16742: LD_INT 1
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PPUSH
16753: CALL_OW 69
16757: ST_TO_ADDR
// if not tmp then
16758: LD_VAR 0 3
16762: NOT
16763: IFFALSE 16767
// exit ;
16765: GO 16914
// if tmp > 5 then
16767: LD_VAR 0 3
16771: PUSH
16772: LD_INT 5
16774: GREATER
16775: IFFALSE 16787
// k := 5 else
16777: LD_ADDR_VAR 0 2
16781: PUSH
16782: LD_INT 5
16784: ST_TO_ADDR
16785: GO 16797
// k := tmp ;
16787: LD_ADDR_VAR 0 2
16791: PUSH
16792: LD_VAR 0 3
16796: ST_TO_ADDR
// for i := 1 to k do
16797: LD_ADDR_VAR 0 1
16801: PUSH
16802: DOUBLE
16803: LD_INT 1
16805: DEC
16806: ST_TO_ADDR
16807: LD_VAR 0 2
16811: PUSH
16812: FOR_TO
16813: IFFALSE 16912
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16815: LD_VAR 0 3
16819: PUSH
16820: LD_VAR 0 1
16824: ARRAY
16825: PPUSH
16826: LD_VAR 0 1
16830: PUSH
16831: LD_INT 4
16833: MOD
16834: PUSH
16835: LD_INT 1
16837: PLUS
16838: PPUSH
16839: CALL_OW 259
16843: PUSH
16844: LD_INT 10
16846: LESS
16847: IFFALSE 16910
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16849: LD_VAR 0 3
16853: PUSH
16854: LD_VAR 0 1
16858: ARRAY
16859: PPUSH
16860: LD_VAR 0 1
16864: PUSH
16865: LD_INT 4
16867: MOD
16868: PUSH
16869: LD_INT 1
16871: PLUS
16872: PPUSH
16873: LD_VAR 0 3
16877: PUSH
16878: LD_VAR 0 1
16882: ARRAY
16883: PPUSH
16884: LD_VAR 0 1
16888: PUSH
16889: LD_INT 4
16891: MOD
16892: PUSH
16893: LD_INT 1
16895: PLUS
16896: PPUSH
16897: CALL_OW 259
16901: PUSH
16902: LD_INT 1
16904: PLUS
16905: PPUSH
16906: CALL_OW 237
16910: GO 16812
16912: POP
16913: POP
// end ;
16914: PPOPN 3
16916: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16917: LD_EXP 65
16921: PUSH
16922: LD_EXP 73
16926: AND
16927: IFFALSE 16947
16929: GO 16931
16931: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16932: LD_INT 4
16934: PPUSH
16935: LD_OWVAR 2
16939: PPUSH
16940: LD_INT 0
16942: PPUSH
16943: CALL_OW 324
16947: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16948: LD_EXP 65
16952: PUSH
16953: LD_EXP 102
16957: AND
16958: IFFALSE 16978
16960: GO 16962
16962: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16963: LD_INT 19
16965: PPUSH
16966: LD_OWVAR 2
16970: PPUSH
16971: LD_INT 0
16973: PPUSH
16974: CALL_OW 324
16978: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16979: LD_EXP 65
16983: PUSH
16984: LD_EXP 74
16988: AND
16989: IFFALSE 17091
16991: GO 16993
16993: DISABLE
16994: LD_INT 0
16996: PPUSH
16997: PPUSH
// begin enable ;
16998: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16999: LD_ADDR_VAR 0 2
17003: PUSH
17004: LD_INT 22
17006: PUSH
17007: LD_OWVAR 2
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 2
17018: PUSH
17019: LD_INT 34
17021: PUSH
17022: LD_INT 11
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: LD_INT 34
17031: PUSH
17032: LD_INT 30
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: LIST
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PPUSH
17048: CALL_OW 69
17052: ST_TO_ADDR
// if not tmp then
17053: LD_VAR 0 2
17057: NOT
17058: IFFALSE 17062
// exit ;
17060: GO 17091
// for i in tmp do
17062: LD_ADDR_VAR 0 1
17066: PUSH
17067: LD_VAR 0 2
17071: PUSH
17072: FOR_IN
17073: IFFALSE 17089
// begin SetLives ( i , 0 ) ;
17075: LD_VAR 0 1
17079: PPUSH
17080: LD_INT 0
17082: PPUSH
17083: CALL_OW 234
// end ;
17087: GO 17072
17089: POP
17090: POP
// end ;
17091: PPOPN 2
17093: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17094: LD_EXP 65
17098: PUSH
17099: LD_EXP 75
17103: AND
17104: IFFALSE 17124
17106: GO 17108
17108: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17109: LD_INT 32
17111: PPUSH
17112: LD_OWVAR 2
17116: PPUSH
17117: LD_INT 0
17119: PPUSH
17120: CALL_OW 324
17124: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17125: LD_EXP 65
17129: PUSH
17130: LD_EXP 76
17134: AND
17135: IFFALSE 17316
17137: GO 17139
17139: DISABLE
17140: LD_INT 0
17142: PPUSH
17143: PPUSH
17144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17145: LD_ADDR_VAR 0 2
17149: PUSH
17150: LD_INT 22
17152: PUSH
17153: LD_OWVAR 2
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 33
17164: PUSH
17165: LD_INT 3
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PPUSH
17176: CALL_OW 69
17180: ST_TO_ADDR
// if not tmp then
17181: LD_VAR 0 2
17185: NOT
17186: IFFALSE 17190
// exit ;
17188: GO 17316
// side := 0 ;
17190: LD_ADDR_VAR 0 3
17194: PUSH
17195: LD_INT 0
17197: ST_TO_ADDR
// for i := 1 to 8 do
17198: LD_ADDR_VAR 0 1
17202: PUSH
17203: DOUBLE
17204: LD_INT 1
17206: DEC
17207: ST_TO_ADDR
17208: LD_INT 8
17210: PUSH
17211: FOR_TO
17212: IFFALSE 17260
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17214: LD_OWVAR 2
17218: PUSH
17219: LD_VAR 0 1
17223: NONEQUAL
17224: PUSH
17225: LD_OWVAR 2
17229: PPUSH
17230: LD_VAR 0 1
17234: PPUSH
17235: CALL_OW 81
17239: PUSH
17240: LD_INT 2
17242: EQUAL
17243: AND
17244: IFFALSE 17258
// begin side := i ;
17246: LD_ADDR_VAR 0 3
17250: PUSH
17251: LD_VAR 0 1
17255: ST_TO_ADDR
// break ;
17256: GO 17260
// end ;
17258: GO 17211
17260: POP
17261: POP
// if not side then
17262: LD_VAR 0 3
17266: NOT
17267: IFFALSE 17271
// exit ;
17269: GO 17316
// for i := 1 to tmp do
17271: LD_ADDR_VAR 0 1
17275: PUSH
17276: DOUBLE
17277: LD_INT 1
17279: DEC
17280: ST_TO_ADDR
17281: LD_VAR 0 2
17285: PUSH
17286: FOR_TO
17287: IFFALSE 17314
// if Prob ( 60 ) then
17289: LD_INT 60
17291: PPUSH
17292: CALL_OW 13
17296: IFFALSE 17312
// SetSide ( i , side ) ;
17298: LD_VAR 0 1
17302: PPUSH
17303: LD_VAR 0 3
17307: PPUSH
17308: CALL_OW 235
17312: GO 17286
17314: POP
17315: POP
// end ;
17316: PPOPN 3
17318: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17319: LD_EXP 65
17323: PUSH
17324: LD_EXP 78
17328: AND
17329: IFFALSE 17448
17331: GO 17333
17333: DISABLE
17334: LD_INT 0
17336: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17337: LD_ADDR_VAR 0 1
17341: PUSH
17342: LD_INT 22
17344: PUSH
17345: LD_OWVAR 2
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 21
17356: PUSH
17357: LD_INT 1
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 3
17366: PUSH
17367: LD_INT 23
17369: PUSH
17370: LD_INT 0
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: LIST
17385: PPUSH
17386: CALL_OW 69
17390: PUSH
17391: FOR_IN
17392: IFFALSE 17446
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17394: LD_VAR 0 1
17398: PPUSH
17399: CALL_OW 257
17403: PUSH
17404: LD_INT 1
17406: PUSH
17407: LD_INT 2
17409: PUSH
17410: LD_INT 3
17412: PUSH
17413: LD_INT 4
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: IN
17422: IFFALSE 17444
// SetClass ( un , rand ( 1 , 4 ) ) ;
17424: LD_VAR 0 1
17428: PPUSH
17429: LD_INT 1
17431: PPUSH
17432: LD_INT 4
17434: PPUSH
17435: CALL_OW 12
17439: PPUSH
17440: CALL_OW 336
17444: GO 17391
17446: POP
17447: POP
// end ;
17448: PPOPN 1
17450: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17451: LD_EXP 65
17455: PUSH
17456: LD_EXP 77
17460: AND
17461: IFFALSE 17540
17463: GO 17465
17465: DISABLE
17466: LD_INT 0
17468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17469: LD_ADDR_VAR 0 1
17473: PUSH
17474: LD_INT 22
17476: PUSH
17477: LD_OWVAR 2
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 21
17488: PUSH
17489: LD_INT 3
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PPUSH
17500: CALL_OW 69
17504: ST_TO_ADDR
// if not tmp then
17505: LD_VAR 0 1
17509: NOT
17510: IFFALSE 17514
// exit ;
17512: GO 17540
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17514: LD_VAR 0 1
17518: PUSH
17519: LD_INT 1
17521: PPUSH
17522: LD_VAR 0 1
17526: PPUSH
17527: CALL_OW 12
17531: ARRAY
17532: PPUSH
17533: LD_INT 100
17535: PPUSH
17536: CALL_OW 234
// end ;
17540: PPOPN 1
17542: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17543: LD_EXP 65
17547: PUSH
17548: LD_EXP 79
17552: AND
17553: IFFALSE 17651
17555: GO 17557
17557: DISABLE
17558: LD_INT 0
17560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17561: LD_ADDR_VAR 0 1
17565: PUSH
17566: LD_INT 22
17568: PUSH
17569: LD_OWVAR 2
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 21
17580: PUSH
17581: LD_INT 1
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PPUSH
17592: CALL_OW 69
17596: ST_TO_ADDR
// if not tmp then
17597: LD_VAR 0 1
17601: NOT
17602: IFFALSE 17606
// exit ;
17604: GO 17651
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17606: LD_VAR 0 1
17610: PUSH
17611: LD_INT 1
17613: PPUSH
17614: LD_VAR 0 1
17618: PPUSH
17619: CALL_OW 12
17623: ARRAY
17624: PPUSH
17625: LD_INT 1
17627: PPUSH
17628: LD_INT 4
17630: PPUSH
17631: CALL_OW 12
17635: PPUSH
17636: LD_INT 3000
17638: PPUSH
17639: LD_INT 9000
17641: PPUSH
17642: CALL_OW 12
17646: PPUSH
17647: CALL_OW 492
// end ;
17651: PPOPN 1
17653: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17654: LD_EXP 65
17658: PUSH
17659: LD_EXP 80
17663: AND
17664: IFFALSE 17684
17666: GO 17668
17668: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17669: LD_INT 1
17671: PPUSH
17672: LD_OWVAR 2
17676: PPUSH
17677: LD_INT 0
17679: PPUSH
17680: CALL_OW 324
17684: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17685: LD_EXP 65
17689: PUSH
17690: LD_EXP 81
17694: AND
17695: IFFALSE 17778
17697: GO 17699
17699: DISABLE
17700: LD_INT 0
17702: PPUSH
17703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17704: LD_ADDR_VAR 0 2
17708: PUSH
17709: LD_INT 22
17711: PUSH
17712: LD_OWVAR 2
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 21
17723: PUSH
17724: LD_INT 3
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PPUSH
17735: CALL_OW 69
17739: ST_TO_ADDR
// if not tmp then
17740: LD_VAR 0 2
17744: NOT
17745: IFFALSE 17749
// exit ;
17747: GO 17778
// for i in tmp do
17749: LD_ADDR_VAR 0 1
17753: PUSH
17754: LD_VAR 0 2
17758: PUSH
17759: FOR_IN
17760: IFFALSE 17776
// SetBLevel ( i , 10 ) ;
17762: LD_VAR 0 1
17766: PPUSH
17767: LD_INT 10
17769: PPUSH
17770: CALL_OW 241
17774: GO 17759
17776: POP
17777: POP
// end ;
17778: PPOPN 2
17780: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17781: LD_EXP 65
17785: PUSH
17786: LD_EXP 82
17790: AND
17791: IFFALSE 17902
17793: GO 17795
17795: DISABLE
17796: LD_INT 0
17798: PPUSH
17799: PPUSH
17800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17801: LD_ADDR_VAR 0 3
17805: PUSH
17806: LD_INT 22
17808: PUSH
17809: LD_OWVAR 2
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 25
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PPUSH
17832: CALL_OW 69
17836: ST_TO_ADDR
// if not tmp then
17837: LD_VAR 0 3
17841: NOT
17842: IFFALSE 17846
// exit ;
17844: GO 17902
// un := tmp [ rand ( 1 , tmp ) ] ;
17846: LD_ADDR_VAR 0 2
17850: PUSH
17851: LD_VAR 0 3
17855: PUSH
17856: LD_INT 1
17858: PPUSH
17859: LD_VAR 0 3
17863: PPUSH
17864: CALL_OW 12
17868: ARRAY
17869: ST_TO_ADDR
// if Crawls ( un ) then
17870: LD_VAR 0 2
17874: PPUSH
17875: CALL_OW 318
17879: IFFALSE 17890
// ComWalk ( un ) ;
17881: LD_VAR 0 2
17885: PPUSH
17886: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17890: LD_VAR 0 2
17894: PPUSH
17895: LD_INT 5
17897: PPUSH
17898: CALL_OW 336
// end ;
17902: PPOPN 3
17904: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17905: LD_EXP 65
17909: PUSH
17910: LD_EXP 83
17914: AND
17915: PUSH
17916: LD_OWVAR 67
17920: PUSH
17921: LD_INT 4
17923: LESS
17924: AND
17925: IFFALSE 17944
17927: GO 17929
17929: DISABLE
// begin Difficulty := Difficulty + 1 ;
17930: LD_ADDR_OWVAR 67
17934: PUSH
17935: LD_OWVAR 67
17939: PUSH
17940: LD_INT 1
17942: PLUS
17943: ST_TO_ADDR
// end ;
17944: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17945: LD_EXP 65
17949: PUSH
17950: LD_EXP 84
17954: AND
17955: IFFALSE 18058
17957: GO 17959
17959: DISABLE
17960: LD_INT 0
17962: PPUSH
// begin for i := 1 to 5 do
17963: LD_ADDR_VAR 0 1
17967: PUSH
17968: DOUBLE
17969: LD_INT 1
17971: DEC
17972: ST_TO_ADDR
17973: LD_INT 5
17975: PUSH
17976: FOR_TO
17977: IFFALSE 18056
// begin uc_nation := nation_nature ;
17979: LD_ADDR_OWVAR 21
17983: PUSH
17984: LD_INT 0
17986: ST_TO_ADDR
// uc_side := 0 ;
17987: LD_ADDR_OWVAR 20
17991: PUSH
17992: LD_INT 0
17994: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17995: LD_ADDR_OWVAR 29
17999: PUSH
18000: LD_INT 12
18002: PUSH
18003: LD_INT 12
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: ST_TO_ADDR
// hc_agressivity := 20 ;
18010: LD_ADDR_OWVAR 35
18014: PUSH
18015: LD_INT 20
18017: ST_TO_ADDR
// hc_class := class_tiger ;
18018: LD_ADDR_OWVAR 28
18022: PUSH
18023: LD_INT 14
18025: ST_TO_ADDR
// hc_gallery :=  ;
18026: LD_ADDR_OWVAR 33
18030: PUSH
18031: LD_STRING 
18033: ST_TO_ADDR
// hc_name :=  ;
18034: LD_ADDR_OWVAR 26
18038: PUSH
18039: LD_STRING 
18041: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18042: CALL_OW 44
18046: PPUSH
18047: LD_INT 0
18049: PPUSH
18050: CALL_OW 51
// end ;
18054: GO 17976
18056: POP
18057: POP
// end ;
18058: PPOPN 1
18060: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18061: LD_EXP 65
18065: PUSH
18066: LD_EXP 85
18070: AND
18071: IFFALSE 18080
18073: GO 18075
18075: DISABLE
// StreamSibBomb ;
18076: CALL 18081 0 0
18080: END
// export function StreamSibBomb ; var i , x , y ; begin
18081: LD_INT 0
18083: PPUSH
18084: PPUSH
18085: PPUSH
18086: PPUSH
// result := false ;
18087: LD_ADDR_VAR 0 1
18091: PUSH
18092: LD_INT 0
18094: ST_TO_ADDR
// for i := 1 to 16 do
18095: LD_ADDR_VAR 0 2
18099: PUSH
18100: DOUBLE
18101: LD_INT 1
18103: DEC
18104: ST_TO_ADDR
18105: LD_INT 16
18107: PUSH
18108: FOR_TO
18109: IFFALSE 18308
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18111: LD_ADDR_VAR 0 3
18115: PUSH
18116: LD_INT 10
18118: PUSH
18119: LD_INT 20
18121: PUSH
18122: LD_INT 30
18124: PUSH
18125: LD_INT 40
18127: PUSH
18128: LD_INT 50
18130: PUSH
18131: LD_INT 60
18133: PUSH
18134: LD_INT 70
18136: PUSH
18137: LD_INT 80
18139: PUSH
18140: LD_INT 90
18142: PUSH
18143: LD_INT 100
18145: PUSH
18146: LD_INT 110
18148: PUSH
18149: LD_INT 120
18151: PUSH
18152: LD_INT 130
18154: PUSH
18155: LD_INT 140
18157: PUSH
18158: LD_INT 150
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 1
18180: PPUSH
18181: LD_INT 15
18183: PPUSH
18184: CALL_OW 12
18188: ARRAY
18189: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18190: LD_ADDR_VAR 0 4
18194: PUSH
18195: LD_INT 10
18197: PUSH
18198: LD_INT 20
18200: PUSH
18201: LD_INT 30
18203: PUSH
18204: LD_INT 40
18206: PUSH
18207: LD_INT 50
18209: PUSH
18210: LD_INT 60
18212: PUSH
18213: LD_INT 70
18215: PUSH
18216: LD_INT 80
18218: PUSH
18219: LD_INT 90
18221: PUSH
18222: LD_INT 100
18224: PUSH
18225: LD_INT 110
18227: PUSH
18228: LD_INT 120
18230: PUSH
18231: LD_INT 130
18233: PUSH
18234: LD_INT 140
18236: PUSH
18237: LD_INT 150
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 1
18259: PPUSH
18260: LD_INT 15
18262: PPUSH
18263: CALL_OW 12
18267: ARRAY
18268: ST_TO_ADDR
// if ValidHex ( x , y ) then
18269: LD_VAR 0 3
18273: PPUSH
18274: LD_VAR 0 4
18278: PPUSH
18279: CALL_OW 488
18283: IFFALSE 18306
// begin result := [ x , y ] ;
18285: LD_ADDR_VAR 0 1
18289: PUSH
18290: LD_VAR 0 3
18294: PUSH
18295: LD_VAR 0 4
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: ST_TO_ADDR
// break ;
18304: GO 18308
// end ; end ;
18306: GO 18108
18308: POP
18309: POP
// if result then
18310: LD_VAR 0 1
18314: IFFALSE 18374
// begin ToLua ( playSibBomb() ) ;
18316: LD_STRING playSibBomb()
18318: PPUSH
18319: CALL_OW 559
// wait ( 0 0$14 ) ;
18323: LD_INT 490
18325: PPUSH
18326: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18330: LD_VAR 0 1
18334: PUSH
18335: LD_INT 1
18337: ARRAY
18338: PPUSH
18339: LD_VAR 0 1
18343: PUSH
18344: LD_INT 2
18346: ARRAY
18347: PPUSH
18348: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18352: LD_VAR 0 1
18356: PUSH
18357: LD_INT 1
18359: ARRAY
18360: PPUSH
18361: LD_VAR 0 1
18365: PUSH
18366: LD_INT 2
18368: ARRAY
18369: PPUSH
18370: CALL_OW 429
// end ; end ;
18374: LD_VAR 0 1
18378: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18379: LD_EXP 65
18383: PUSH
18384: LD_EXP 87
18388: AND
18389: IFFALSE 18401
18391: GO 18393
18393: DISABLE
// YouLost (  ) ;
18394: LD_STRING 
18396: PPUSH
18397: CALL_OW 104
18401: END
// every 0 0$1 trigger StreamModeActive and sFog do
18402: LD_EXP 65
18406: PUSH
18407: LD_EXP 86
18411: AND
18412: IFFALSE 18426
18414: GO 18416
18416: DISABLE
// FogOff ( your_side ) ;
18417: LD_OWVAR 2
18421: PPUSH
18422: CALL_OW 344
18426: END
// every 0 0$1 trigger StreamModeActive and sSun do
18427: LD_EXP 65
18431: PUSH
18432: LD_EXP 88
18436: AND
18437: IFFALSE 18465
18439: GO 18441
18441: DISABLE
// begin solar_recharge_percent := 0 ;
18442: LD_ADDR_OWVAR 79
18446: PUSH
18447: LD_INT 0
18449: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18450: LD_INT 10500
18452: PPUSH
18453: CALL_OW 67
// solar_recharge_percent := 100 ;
18457: LD_ADDR_OWVAR 79
18461: PUSH
18462: LD_INT 100
18464: ST_TO_ADDR
// end ;
18465: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18466: LD_EXP 65
18470: PUSH
18471: LD_EXP 89
18475: AND
18476: IFFALSE 18715
18478: GO 18480
18480: DISABLE
18481: LD_INT 0
18483: PPUSH
18484: PPUSH
18485: PPUSH
// begin tmp := [ ] ;
18486: LD_ADDR_VAR 0 3
18490: PUSH
18491: EMPTY
18492: ST_TO_ADDR
// for i := 1 to 6 do
18493: LD_ADDR_VAR 0 1
18497: PUSH
18498: DOUBLE
18499: LD_INT 1
18501: DEC
18502: ST_TO_ADDR
18503: LD_INT 6
18505: PUSH
18506: FOR_TO
18507: IFFALSE 18612
// begin uc_nation := nation_nature ;
18509: LD_ADDR_OWVAR 21
18513: PUSH
18514: LD_INT 0
18516: ST_TO_ADDR
// uc_side := 0 ;
18517: LD_ADDR_OWVAR 20
18521: PUSH
18522: LD_INT 0
18524: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18525: LD_ADDR_OWVAR 29
18529: PUSH
18530: LD_INT 12
18532: PUSH
18533: LD_INT 12
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: ST_TO_ADDR
// hc_agressivity := 20 ;
18540: LD_ADDR_OWVAR 35
18544: PUSH
18545: LD_INT 20
18547: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18548: LD_ADDR_OWVAR 28
18552: PUSH
18553: LD_INT 17
18555: ST_TO_ADDR
// hc_gallery :=  ;
18556: LD_ADDR_OWVAR 33
18560: PUSH
18561: LD_STRING 
18563: ST_TO_ADDR
// hc_name :=  ;
18564: LD_ADDR_OWVAR 26
18568: PUSH
18569: LD_STRING 
18571: ST_TO_ADDR
// un := CreateHuman ;
18572: LD_ADDR_VAR 0 2
18576: PUSH
18577: CALL_OW 44
18581: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18582: LD_VAR 0 2
18586: PPUSH
18587: LD_INT 1
18589: PPUSH
18590: CALL_OW 51
// tmp := tmp ^ un ;
18594: LD_ADDR_VAR 0 3
18598: PUSH
18599: LD_VAR 0 3
18603: PUSH
18604: LD_VAR 0 2
18608: ADD
18609: ST_TO_ADDR
// end ;
18610: GO 18506
18612: POP
18613: POP
// repeat wait ( 0 0$1 ) ;
18614: LD_INT 35
18616: PPUSH
18617: CALL_OW 67
// for un in tmp do
18621: LD_ADDR_VAR 0 2
18625: PUSH
18626: LD_VAR 0 3
18630: PUSH
18631: FOR_IN
18632: IFFALSE 18706
// begin if IsDead ( un ) then
18634: LD_VAR 0 2
18638: PPUSH
18639: CALL_OW 301
18643: IFFALSE 18663
// begin tmp := tmp diff un ;
18645: LD_ADDR_VAR 0 3
18649: PUSH
18650: LD_VAR 0 3
18654: PUSH
18655: LD_VAR 0 2
18659: DIFF
18660: ST_TO_ADDR
// continue ;
18661: GO 18631
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18663: LD_VAR 0 2
18667: PPUSH
18668: LD_INT 3
18670: PUSH
18671: LD_INT 22
18673: PUSH
18674: LD_INT 0
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PPUSH
18685: CALL_OW 69
18689: PPUSH
18690: LD_VAR 0 2
18694: PPUSH
18695: CALL_OW 74
18699: PPUSH
18700: CALL_OW 115
// end ;
18704: GO 18631
18706: POP
18707: POP
// until not tmp ;
18708: LD_VAR 0 3
18712: NOT
18713: IFFALSE 18614
// end ;
18715: PPOPN 3
18717: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18718: LD_EXP 65
18722: PUSH
18723: LD_EXP 90
18727: AND
18728: IFFALSE 18782
18730: GO 18732
18732: DISABLE
// begin ToLua ( displayTroll(); ) ;
18733: LD_STRING displayTroll();
18735: PPUSH
18736: CALL_OW 559
// wait ( 3 3$00 ) ;
18740: LD_INT 6300
18742: PPUSH
18743: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18747: LD_STRING hideTroll();
18749: PPUSH
18750: CALL_OW 559
// wait ( 1 1$00 ) ;
18754: LD_INT 2100
18756: PPUSH
18757: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18761: LD_STRING displayTroll();
18763: PPUSH
18764: CALL_OW 559
// wait ( 1 1$00 ) ;
18768: LD_INT 2100
18770: PPUSH
18771: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18775: LD_STRING hideTroll();
18777: PPUSH
18778: CALL_OW 559
// end ;
18782: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18783: LD_EXP 65
18787: PUSH
18788: LD_EXP 91
18792: AND
18793: IFFALSE 18856
18795: GO 18797
18797: DISABLE
18798: LD_INT 0
18800: PPUSH
// begin p := 0 ;
18801: LD_ADDR_VAR 0 1
18805: PUSH
18806: LD_INT 0
18808: ST_TO_ADDR
// repeat game_speed := 1 ;
18809: LD_ADDR_OWVAR 65
18813: PUSH
18814: LD_INT 1
18816: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18817: LD_INT 35
18819: PPUSH
18820: CALL_OW 67
// p := p + 1 ;
18824: LD_ADDR_VAR 0 1
18828: PUSH
18829: LD_VAR 0 1
18833: PUSH
18834: LD_INT 1
18836: PLUS
18837: ST_TO_ADDR
// until p >= 60 ;
18838: LD_VAR 0 1
18842: PUSH
18843: LD_INT 60
18845: GREATEREQUAL
18846: IFFALSE 18809
// game_speed := 4 ;
18848: LD_ADDR_OWVAR 65
18852: PUSH
18853: LD_INT 4
18855: ST_TO_ADDR
// end ;
18856: PPOPN 1
18858: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18859: LD_EXP 65
18863: PUSH
18864: LD_EXP 92
18868: AND
18869: IFFALSE 19015
18871: GO 18873
18873: DISABLE
18874: LD_INT 0
18876: PPUSH
18877: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18878: LD_ADDR_VAR 0 1
18882: PUSH
18883: LD_INT 22
18885: PUSH
18886: LD_OWVAR 2
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 2
18897: PUSH
18898: LD_INT 30
18900: PUSH
18901: LD_INT 0
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 30
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: LIST
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PPUSH
18927: CALL_OW 69
18931: ST_TO_ADDR
// if not depot then
18932: LD_VAR 0 1
18936: NOT
18937: IFFALSE 18941
// exit ;
18939: GO 19015
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18941: LD_ADDR_VAR 0 2
18945: PUSH
18946: LD_VAR 0 1
18950: PUSH
18951: LD_INT 1
18953: PPUSH
18954: LD_VAR 0 1
18958: PPUSH
18959: CALL_OW 12
18963: ARRAY
18964: PPUSH
18965: CALL_OW 274
18969: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18970: LD_VAR 0 2
18974: PPUSH
18975: LD_INT 1
18977: PPUSH
18978: LD_INT 0
18980: PPUSH
18981: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18985: LD_VAR 0 2
18989: PPUSH
18990: LD_INT 2
18992: PPUSH
18993: LD_INT 0
18995: PPUSH
18996: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19000: LD_VAR 0 2
19004: PPUSH
19005: LD_INT 3
19007: PPUSH
19008: LD_INT 0
19010: PPUSH
19011: CALL_OW 277
// end ;
19015: PPOPN 2
19017: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19018: LD_EXP 65
19022: PUSH
19023: LD_EXP 93
19027: AND
19028: IFFALSE 19125
19030: GO 19032
19032: DISABLE
19033: LD_INT 0
19035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19036: LD_ADDR_VAR 0 1
19040: PUSH
19041: LD_INT 22
19043: PUSH
19044: LD_OWVAR 2
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 21
19055: PUSH
19056: LD_INT 1
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 3
19065: PUSH
19066: LD_INT 23
19068: PUSH
19069: LD_INT 0
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: PPUSH
19085: CALL_OW 69
19089: ST_TO_ADDR
// if not tmp then
19090: LD_VAR 0 1
19094: NOT
19095: IFFALSE 19099
// exit ;
19097: GO 19125
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19099: LD_VAR 0 1
19103: PUSH
19104: LD_INT 1
19106: PPUSH
19107: LD_VAR 0 1
19111: PPUSH
19112: CALL_OW 12
19116: ARRAY
19117: PPUSH
19118: LD_INT 200
19120: PPUSH
19121: CALL_OW 234
// end ;
19125: PPOPN 1
19127: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19128: LD_EXP 65
19132: PUSH
19133: LD_EXP 94
19137: AND
19138: IFFALSE 19217
19140: GO 19142
19142: DISABLE
19143: LD_INT 0
19145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19146: LD_ADDR_VAR 0 1
19150: PUSH
19151: LD_INT 22
19153: PUSH
19154: LD_OWVAR 2
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 21
19165: PUSH
19166: LD_INT 2
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PPUSH
19177: CALL_OW 69
19181: ST_TO_ADDR
// if not tmp then
19182: LD_VAR 0 1
19186: NOT
19187: IFFALSE 19191
// exit ;
19189: GO 19217
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19191: LD_VAR 0 1
19195: PUSH
19196: LD_INT 1
19198: PPUSH
19199: LD_VAR 0 1
19203: PPUSH
19204: CALL_OW 12
19208: ARRAY
19209: PPUSH
19210: LD_INT 60
19212: PPUSH
19213: CALL_OW 234
// end ;
19217: PPOPN 1
19219: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19220: LD_EXP 65
19224: PUSH
19225: LD_EXP 95
19229: AND
19230: IFFALSE 19329
19232: GO 19234
19234: DISABLE
19235: LD_INT 0
19237: PPUSH
19238: PPUSH
// begin enable ;
19239: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19240: LD_ADDR_VAR 0 1
19244: PUSH
19245: LD_INT 22
19247: PUSH
19248: LD_OWVAR 2
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 61
19259: PUSH
19260: EMPTY
19261: LIST
19262: PUSH
19263: LD_INT 33
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: LIST
19277: PPUSH
19278: CALL_OW 69
19282: ST_TO_ADDR
// if not tmp then
19283: LD_VAR 0 1
19287: NOT
19288: IFFALSE 19292
// exit ;
19290: GO 19329
// for i in tmp do
19292: LD_ADDR_VAR 0 2
19296: PUSH
19297: LD_VAR 0 1
19301: PUSH
19302: FOR_IN
19303: IFFALSE 19327
// if IsControledBy ( i ) then
19305: LD_VAR 0 2
19309: PPUSH
19310: CALL_OW 312
19314: IFFALSE 19325
// ComUnlink ( i ) ;
19316: LD_VAR 0 2
19320: PPUSH
19321: CALL_OW 136
19325: GO 19302
19327: POP
19328: POP
// end ;
19329: PPOPN 2
19331: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19332: LD_EXP 65
19336: PUSH
19337: LD_EXP 96
19341: AND
19342: IFFALSE 19482
19344: GO 19346
19346: DISABLE
19347: LD_INT 0
19349: PPUSH
19350: PPUSH
// begin ToLua ( displayPowell(); ) ;
19351: LD_STRING displayPowell();
19353: PPUSH
19354: CALL_OW 559
// uc_side := 0 ;
19358: LD_ADDR_OWVAR 20
19362: PUSH
19363: LD_INT 0
19365: ST_TO_ADDR
// uc_nation := 2 ;
19366: LD_ADDR_OWVAR 21
19370: PUSH
19371: LD_INT 2
19373: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19374: LD_ADDR_OWVAR 37
19378: PUSH
19379: LD_INT 14
19381: ST_TO_ADDR
// vc_engine := engine_siberite ;
19382: LD_ADDR_OWVAR 39
19386: PUSH
19387: LD_INT 3
19389: ST_TO_ADDR
// vc_control := control_apeman ;
19390: LD_ADDR_OWVAR 38
19394: PUSH
19395: LD_INT 5
19397: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19398: LD_ADDR_OWVAR 40
19402: PUSH
19403: LD_INT 29
19405: ST_TO_ADDR
// un := CreateVehicle ;
19406: LD_ADDR_VAR 0 2
19410: PUSH
19411: CALL_OW 45
19415: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19416: LD_VAR 0 2
19420: PPUSH
19421: LD_INT 1
19423: PPUSH
19424: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19428: LD_INT 35
19430: PPUSH
19431: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19435: LD_VAR 0 2
19439: PPUSH
19440: LD_INT 22
19442: PUSH
19443: LD_OWVAR 2
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PPUSH
19452: CALL_OW 69
19456: PPUSH
19457: LD_VAR 0 2
19461: PPUSH
19462: CALL_OW 74
19466: PPUSH
19467: CALL_OW 115
// until IsDead ( un ) ;
19471: LD_VAR 0 2
19475: PPUSH
19476: CALL_OW 301
19480: IFFALSE 19428
// end ;
19482: PPOPN 2
19484: END
// every 0 0$1 trigger StreamModeActive and sStu do
19485: LD_EXP 65
19489: PUSH
19490: LD_EXP 104
19494: AND
19495: IFFALSE 19511
19497: GO 19499
19499: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19500: LD_STRING displayStucuk();
19502: PPUSH
19503: CALL_OW 559
// ResetFog ;
19507: CALL_OW 335
// end ;
19511: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19512: LD_EXP 65
19516: PUSH
19517: LD_EXP 97
19521: AND
19522: IFFALSE 19663
19524: GO 19526
19526: DISABLE
19527: LD_INT 0
19529: PPUSH
19530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19531: LD_ADDR_VAR 0 2
19535: PUSH
19536: LD_INT 22
19538: PUSH
19539: LD_OWVAR 2
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 21
19550: PUSH
19551: LD_INT 1
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PPUSH
19562: CALL_OW 69
19566: ST_TO_ADDR
// if not tmp then
19567: LD_VAR 0 2
19571: NOT
19572: IFFALSE 19576
// exit ;
19574: GO 19663
// un := tmp [ rand ( 1 , tmp ) ] ;
19576: LD_ADDR_VAR 0 1
19580: PUSH
19581: LD_VAR 0 2
19585: PUSH
19586: LD_INT 1
19588: PPUSH
19589: LD_VAR 0 2
19593: PPUSH
19594: CALL_OW 12
19598: ARRAY
19599: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19600: LD_VAR 0 1
19604: PPUSH
19605: LD_INT 0
19607: PPUSH
19608: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19612: LD_VAR 0 1
19616: PPUSH
19617: LD_OWVAR 3
19621: PUSH
19622: LD_VAR 0 1
19626: DIFF
19627: PPUSH
19628: LD_VAR 0 1
19632: PPUSH
19633: CALL_OW 74
19637: PPUSH
19638: CALL_OW 115
// wait ( 0 0$20 ) ;
19642: LD_INT 700
19644: PPUSH
19645: CALL_OW 67
// SetSide ( un , your_side ) ;
19649: LD_VAR 0 1
19653: PPUSH
19654: LD_OWVAR 2
19658: PPUSH
19659: CALL_OW 235
// end ;
19663: PPOPN 2
19665: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19666: LD_EXP 65
19670: PUSH
19671: LD_EXP 98
19675: AND
19676: IFFALSE 19782
19678: GO 19680
19680: DISABLE
19681: LD_INT 0
19683: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19684: LD_ADDR_VAR 0 1
19688: PUSH
19689: LD_INT 22
19691: PUSH
19692: LD_OWVAR 2
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: LD_INT 30
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 30
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: LIST
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PPUSH
19733: CALL_OW 69
19737: ST_TO_ADDR
// if not depot then
19738: LD_VAR 0 1
19742: NOT
19743: IFFALSE 19747
// exit ;
19745: GO 19782
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19747: LD_VAR 0 1
19751: PUSH
19752: LD_INT 1
19754: ARRAY
19755: PPUSH
19756: CALL_OW 250
19760: PPUSH
19761: LD_VAR 0 1
19765: PUSH
19766: LD_INT 1
19768: ARRAY
19769: PPUSH
19770: CALL_OW 251
19774: PPUSH
19775: LD_INT 70
19777: PPUSH
19778: CALL_OW 495
// end ;
19782: PPOPN 1
19784: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19785: LD_EXP 65
19789: PUSH
19790: LD_EXP 99
19794: AND
19795: IFFALSE 20006
19797: GO 19799
19799: DISABLE
19800: LD_INT 0
19802: PPUSH
19803: PPUSH
19804: PPUSH
19805: PPUSH
19806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19807: LD_ADDR_VAR 0 5
19811: PUSH
19812: LD_INT 22
19814: PUSH
19815: LD_OWVAR 2
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 21
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PPUSH
19838: CALL_OW 69
19842: ST_TO_ADDR
// if not tmp then
19843: LD_VAR 0 5
19847: NOT
19848: IFFALSE 19852
// exit ;
19850: GO 20006
// for i in tmp do
19852: LD_ADDR_VAR 0 1
19856: PUSH
19857: LD_VAR 0 5
19861: PUSH
19862: FOR_IN
19863: IFFALSE 20004
// begin d := rand ( 0 , 5 ) ;
19865: LD_ADDR_VAR 0 4
19869: PUSH
19870: LD_INT 0
19872: PPUSH
19873: LD_INT 5
19875: PPUSH
19876: CALL_OW 12
19880: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19881: LD_ADDR_VAR 0 2
19885: PUSH
19886: LD_VAR 0 1
19890: PPUSH
19891: CALL_OW 250
19895: PPUSH
19896: LD_VAR 0 4
19900: PPUSH
19901: LD_INT 3
19903: PPUSH
19904: LD_INT 12
19906: PPUSH
19907: CALL_OW 12
19911: PPUSH
19912: CALL_OW 272
19916: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19917: LD_ADDR_VAR 0 3
19921: PUSH
19922: LD_VAR 0 1
19926: PPUSH
19927: CALL_OW 251
19931: PPUSH
19932: LD_VAR 0 4
19936: PPUSH
19937: LD_INT 3
19939: PPUSH
19940: LD_INT 12
19942: PPUSH
19943: CALL_OW 12
19947: PPUSH
19948: CALL_OW 273
19952: ST_TO_ADDR
// if ValidHex ( x , y ) then
19953: LD_VAR 0 2
19957: PPUSH
19958: LD_VAR 0 3
19962: PPUSH
19963: CALL_OW 488
19967: IFFALSE 20002
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19969: LD_VAR 0 1
19973: PPUSH
19974: LD_VAR 0 2
19978: PPUSH
19979: LD_VAR 0 3
19983: PPUSH
19984: LD_INT 3
19986: PPUSH
19987: LD_INT 6
19989: PPUSH
19990: CALL_OW 12
19994: PPUSH
19995: LD_INT 1
19997: PPUSH
19998: CALL_OW 483
// end ;
20002: GO 19862
20004: POP
20005: POP
// end ;
20006: PPOPN 5
20008: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20009: LD_EXP 65
20013: PUSH
20014: LD_EXP 100
20018: AND
20019: IFFALSE 20113
20021: GO 20023
20023: DISABLE
20024: LD_INT 0
20026: PPUSH
20027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20028: LD_ADDR_VAR 0 2
20032: PUSH
20033: LD_INT 22
20035: PUSH
20036: LD_OWVAR 2
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 32
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 21
20057: PUSH
20058: LD_INT 2
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: LIST
20069: PPUSH
20070: CALL_OW 69
20074: ST_TO_ADDR
// if not tmp then
20075: LD_VAR 0 2
20079: NOT
20080: IFFALSE 20084
// exit ;
20082: GO 20113
// for i in tmp do
20084: LD_ADDR_VAR 0 1
20088: PUSH
20089: LD_VAR 0 2
20093: PUSH
20094: FOR_IN
20095: IFFALSE 20111
// SetFuel ( i , 0 ) ;
20097: LD_VAR 0 1
20101: PPUSH
20102: LD_INT 0
20104: PPUSH
20105: CALL_OW 240
20109: GO 20094
20111: POP
20112: POP
// end ;
20113: PPOPN 2
20115: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20116: LD_EXP 65
20120: PUSH
20121: LD_EXP 101
20125: AND
20126: IFFALSE 20192
20128: GO 20130
20130: DISABLE
20131: LD_INT 0
20133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20134: LD_ADDR_VAR 0 1
20138: PUSH
20139: LD_INT 22
20141: PUSH
20142: LD_OWVAR 2
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 30
20153: PUSH
20154: LD_INT 29
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PPUSH
20165: CALL_OW 69
20169: ST_TO_ADDR
// if not tmp then
20170: LD_VAR 0 1
20174: NOT
20175: IFFALSE 20179
// exit ;
20177: GO 20192
// DestroyUnit ( tmp [ 1 ] ) ;
20179: LD_VAR 0 1
20183: PUSH
20184: LD_INT 1
20186: ARRAY
20187: PPUSH
20188: CALL_OW 65
// end ;
20192: PPOPN 1
20194: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20195: LD_EXP 65
20199: PUSH
20200: LD_EXP 103
20204: AND
20205: IFFALSE 20334
20207: GO 20209
20209: DISABLE
20210: LD_INT 0
20212: PPUSH
// begin uc_side := 0 ;
20213: LD_ADDR_OWVAR 20
20217: PUSH
20218: LD_INT 0
20220: ST_TO_ADDR
// uc_nation := nation_arabian ;
20221: LD_ADDR_OWVAR 21
20225: PUSH
20226: LD_INT 2
20228: ST_TO_ADDR
// hc_gallery :=  ;
20229: LD_ADDR_OWVAR 33
20233: PUSH
20234: LD_STRING 
20236: ST_TO_ADDR
// hc_name :=  ;
20237: LD_ADDR_OWVAR 26
20241: PUSH
20242: LD_STRING 
20244: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20245: LD_INT 1
20247: PPUSH
20248: LD_INT 11
20250: PPUSH
20251: LD_INT 10
20253: PPUSH
20254: CALL_OW 380
// un := CreateHuman ;
20258: LD_ADDR_VAR 0 1
20262: PUSH
20263: CALL_OW 44
20267: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20268: LD_VAR 0 1
20272: PPUSH
20273: LD_INT 1
20275: PPUSH
20276: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20280: LD_INT 35
20282: PPUSH
20283: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20287: LD_VAR 0 1
20291: PPUSH
20292: LD_INT 22
20294: PUSH
20295: LD_OWVAR 2
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PPUSH
20304: CALL_OW 69
20308: PPUSH
20309: LD_VAR 0 1
20313: PPUSH
20314: CALL_OW 74
20318: PPUSH
20319: CALL_OW 115
// until IsDead ( un ) ;
20323: LD_VAR 0 1
20327: PPUSH
20328: CALL_OW 301
20332: IFFALSE 20280
// end ;
20334: PPOPN 1
20336: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20337: LD_EXP 65
20341: PUSH
20342: LD_EXP 105
20346: AND
20347: IFFALSE 20359
20349: GO 20351
20351: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20352: LD_STRING earthquake(getX(game), 0, 32)
20354: PPUSH
20355: CALL_OW 559
20359: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20360: LD_EXP 65
20364: PUSH
20365: LD_EXP 106
20369: AND
20370: IFFALSE 20461
20372: GO 20374
20374: DISABLE
20375: LD_INT 0
20377: PPUSH
// begin enable ;
20378: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20379: LD_ADDR_VAR 0 1
20383: PUSH
20384: LD_INT 22
20386: PUSH
20387: LD_OWVAR 2
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 21
20398: PUSH
20399: LD_INT 2
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 33
20408: PUSH
20409: LD_INT 3
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: LIST
20420: PPUSH
20421: CALL_OW 69
20425: ST_TO_ADDR
// if not tmp then
20426: LD_VAR 0 1
20430: NOT
20431: IFFALSE 20435
// exit ;
20433: GO 20461
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20435: LD_VAR 0 1
20439: PUSH
20440: LD_INT 1
20442: PPUSH
20443: LD_VAR 0 1
20447: PPUSH
20448: CALL_OW 12
20452: ARRAY
20453: PPUSH
20454: LD_INT 1
20456: PPUSH
20457: CALL_OW 234
// end ;
20461: PPOPN 1
20463: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20464: LD_EXP 65
20468: PUSH
20469: LD_EXP 107
20473: AND
20474: IFFALSE 20615
20476: GO 20478
20478: DISABLE
20479: LD_INT 0
20481: PPUSH
20482: PPUSH
20483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20484: LD_ADDR_VAR 0 3
20488: PUSH
20489: LD_INT 22
20491: PUSH
20492: LD_OWVAR 2
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 25
20503: PUSH
20504: LD_INT 1
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PPUSH
20515: CALL_OW 69
20519: ST_TO_ADDR
// if not tmp then
20520: LD_VAR 0 3
20524: NOT
20525: IFFALSE 20529
// exit ;
20527: GO 20615
// un := tmp [ rand ( 1 , tmp ) ] ;
20529: LD_ADDR_VAR 0 2
20533: PUSH
20534: LD_VAR 0 3
20538: PUSH
20539: LD_INT 1
20541: PPUSH
20542: LD_VAR 0 3
20546: PPUSH
20547: CALL_OW 12
20551: ARRAY
20552: ST_TO_ADDR
// if Crawls ( un ) then
20553: LD_VAR 0 2
20557: PPUSH
20558: CALL_OW 318
20562: IFFALSE 20573
// ComWalk ( un ) ;
20564: LD_VAR 0 2
20568: PPUSH
20569: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20573: LD_VAR 0 2
20577: PPUSH
20578: LD_INT 9
20580: PPUSH
20581: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20585: LD_INT 28
20587: PPUSH
20588: LD_OWVAR 2
20592: PPUSH
20593: LD_INT 2
20595: PPUSH
20596: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20600: LD_INT 29
20602: PPUSH
20603: LD_OWVAR 2
20607: PPUSH
20608: LD_INT 2
20610: PPUSH
20611: CALL_OW 322
// end ;
20615: PPOPN 3
20617: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20618: LD_EXP 65
20622: PUSH
20623: LD_EXP 108
20627: AND
20628: IFFALSE 20739
20630: GO 20632
20632: DISABLE
20633: LD_INT 0
20635: PPUSH
20636: PPUSH
20637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20638: LD_ADDR_VAR 0 3
20642: PUSH
20643: LD_INT 22
20645: PUSH
20646: LD_OWVAR 2
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 25
20657: PUSH
20658: LD_INT 1
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PPUSH
20669: CALL_OW 69
20673: ST_TO_ADDR
// if not tmp then
20674: LD_VAR 0 3
20678: NOT
20679: IFFALSE 20683
// exit ;
20681: GO 20739
// un := tmp [ rand ( 1 , tmp ) ] ;
20683: LD_ADDR_VAR 0 2
20687: PUSH
20688: LD_VAR 0 3
20692: PUSH
20693: LD_INT 1
20695: PPUSH
20696: LD_VAR 0 3
20700: PPUSH
20701: CALL_OW 12
20705: ARRAY
20706: ST_TO_ADDR
// if Crawls ( un ) then
20707: LD_VAR 0 2
20711: PPUSH
20712: CALL_OW 318
20716: IFFALSE 20727
// ComWalk ( un ) ;
20718: LD_VAR 0 2
20722: PPUSH
20723: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20727: LD_VAR 0 2
20731: PPUSH
20732: LD_INT 8
20734: PPUSH
20735: CALL_OW 336
// end ;
20739: PPOPN 3
20741: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20742: LD_EXP 65
20746: PUSH
20747: LD_EXP 109
20751: AND
20752: IFFALSE 20896
20754: GO 20756
20756: DISABLE
20757: LD_INT 0
20759: PPUSH
20760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20761: LD_ADDR_VAR 0 2
20765: PUSH
20766: LD_INT 22
20768: PUSH
20769: LD_OWVAR 2
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 21
20780: PUSH
20781: LD_INT 2
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 2
20790: PUSH
20791: LD_INT 34
20793: PUSH
20794: LD_INT 12
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 34
20803: PUSH
20804: LD_INT 51
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 34
20813: PUSH
20814: LD_INT 32
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: PPUSH
20832: CALL_OW 69
20836: ST_TO_ADDR
// if not tmp then
20837: LD_VAR 0 2
20841: NOT
20842: IFFALSE 20846
// exit ;
20844: GO 20896
// for i in tmp do
20846: LD_ADDR_VAR 0 1
20850: PUSH
20851: LD_VAR 0 2
20855: PUSH
20856: FOR_IN
20857: IFFALSE 20894
// if GetCargo ( i , mat_artifact ) = 0 then
20859: LD_VAR 0 1
20863: PPUSH
20864: LD_INT 4
20866: PPUSH
20867: CALL_OW 289
20871: PUSH
20872: LD_INT 0
20874: EQUAL
20875: IFFALSE 20892
// SetCargo ( i , mat_siberit , 100 ) ;
20877: LD_VAR 0 1
20881: PPUSH
20882: LD_INT 3
20884: PPUSH
20885: LD_INT 100
20887: PPUSH
20888: CALL_OW 290
20892: GO 20856
20894: POP
20895: POP
// end ;
20896: PPOPN 2
20898: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20899: LD_EXP 65
20903: PUSH
20904: LD_EXP 110
20908: AND
20909: IFFALSE 21092
20911: GO 20913
20913: DISABLE
20914: LD_INT 0
20916: PPUSH
20917: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20918: LD_ADDR_VAR 0 2
20922: PUSH
20923: LD_INT 22
20925: PUSH
20926: LD_OWVAR 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PPUSH
20935: CALL_OW 69
20939: ST_TO_ADDR
// if not tmp then
20940: LD_VAR 0 2
20944: NOT
20945: IFFALSE 20949
// exit ;
20947: GO 21092
// for i := 1 to 2 do
20949: LD_ADDR_VAR 0 1
20953: PUSH
20954: DOUBLE
20955: LD_INT 1
20957: DEC
20958: ST_TO_ADDR
20959: LD_INT 2
20961: PUSH
20962: FOR_TO
20963: IFFALSE 21090
// begin uc_side := your_side ;
20965: LD_ADDR_OWVAR 20
20969: PUSH
20970: LD_OWVAR 2
20974: ST_TO_ADDR
// uc_nation := nation_american ;
20975: LD_ADDR_OWVAR 21
20979: PUSH
20980: LD_INT 1
20982: ST_TO_ADDR
// vc_chassis := us_morphling ;
20983: LD_ADDR_OWVAR 37
20987: PUSH
20988: LD_INT 5
20990: ST_TO_ADDR
// vc_engine := engine_siberite ;
20991: LD_ADDR_OWVAR 39
20995: PUSH
20996: LD_INT 3
20998: ST_TO_ADDR
// vc_control := control_computer ;
20999: LD_ADDR_OWVAR 38
21003: PUSH
21004: LD_INT 3
21006: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21007: LD_ADDR_OWVAR 40
21011: PUSH
21012: LD_INT 10
21014: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21015: LD_VAR 0 2
21019: PUSH
21020: LD_INT 1
21022: ARRAY
21023: PPUSH
21024: CALL_OW 310
21028: NOT
21029: IFFALSE 21076
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21031: CALL_OW 45
21035: PPUSH
21036: LD_VAR 0 2
21040: PUSH
21041: LD_INT 1
21043: ARRAY
21044: PPUSH
21045: CALL_OW 250
21049: PPUSH
21050: LD_VAR 0 2
21054: PUSH
21055: LD_INT 1
21057: ARRAY
21058: PPUSH
21059: CALL_OW 251
21063: PPUSH
21064: LD_INT 12
21066: PPUSH
21067: LD_INT 1
21069: PPUSH
21070: CALL_OW 50
21074: GO 21088
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21076: CALL_OW 45
21080: PPUSH
21081: LD_INT 1
21083: PPUSH
21084: CALL_OW 51
// end ;
21088: GO 20962
21090: POP
21091: POP
// end ;
21092: PPOPN 2
21094: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21095: LD_EXP 65
21099: PUSH
21100: LD_EXP 111
21104: AND
21105: IFFALSE 21327
21107: GO 21109
21109: DISABLE
21110: LD_INT 0
21112: PPUSH
21113: PPUSH
21114: PPUSH
21115: PPUSH
21116: PPUSH
21117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21118: LD_ADDR_VAR 0 6
21122: PUSH
21123: LD_INT 22
21125: PUSH
21126: LD_OWVAR 2
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 21
21137: PUSH
21138: LD_INT 1
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 3
21147: PUSH
21148: LD_INT 23
21150: PUSH
21151: LD_INT 0
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: PPUSH
21167: CALL_OW 69
21171: ST_TO_ADDR
// if not tmp then
21172: LD_VAR 0 6
21176: NOT
21177: IFFALSE 21181
// exit ;
21179: GO 21327
// s1 := rand ( 1 , 4 ) ;
21181: LD_ADDR_VAR 0 2
21185: PUSH
21186: LD_INT 1
21188: PPUSH
21189: LD_INT 4
21191: PPUSH
21192: CALL_OW 12
21196: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21197: LD_ADDR_VAR 0 4
21201: PUSH
21202: LD_VAR 0 6
21206: PUSH
21207: LD_INT 1
21209: ARRAY
21210: PPUSH
21211: LD_VAR 0 2
21215: PPUSH
21216: CALL_OW 259
21220: ST_TO_ADDR
// if s1 = 1 then
21221: LD_VAR 0 2
21225: PUSH
21226: LD_INT 1
21228: EQUAL
21229: IFFALSE 21249
// s2 := rand ( 2 , 4 ) else
21231: LD_ADDR_VAR 0 3
21235: PUSH
21236: LD_INT 2
21238: PPUSH
21239: LD_INT 4
21241: PPUSH
21242: CALL_OW 12
21246: ST_TO_ADDR
21247: GO 21257
// s2 := 1 ;
21249: LD_ADDR_VAR 0 3
21253: PUSH
21254: LD_INT 1
21256: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21257: LD_ADDR_VAR 0 5
21261: PUSH
21262: LD_VAR 0 6
21266: PUSH
21267: LD_INT 1
21269: ARRAY
21270: PPUSH
21271: LD_VAR 0 3
21275: PPUSH
21276: CALL_OW 259
21280: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21281: LD_VAR 0 6
21285: PUSH
21286: LD_INT 1
21288: ARRAY
21289: PPUSH
21290: LD_VAR 0 2
21294: PPUSH
21295: LD_VAR 0 5
21299: PPUSH
21300: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21304: LD_VAR 0 6
21308: PUSH
21309: LD_INT 1
21311: ARRAY
21312: PPUSH
21313: LD_VAR 0 3
21317: PPUSH
21318: LD_VAR 0 4
21322: PPUSH
21323: CALL_OW 237
// end ;
21327: PPOPN 6
21329: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21330: LD_EXP 65
21334: PUSH
21335: LD_EXP 112
21339: AND
21340: IFFALSE 21419
21342: GO 21344
21344: DISABLE
21345: LD_INT 0
21347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21348: LD_ADDR_VAR 0 1
21352: PUSH
21353: LD_INT 22
21355: PUSH
21356: LD_OWVAR 2
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 30
21367: PUSH
21368: LD_INT 3
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PPUSH
21379: CALL_OW 69
21383: ST_TO_ADDR
// if not tmp then
21384: LD_VAR 0 1
21388: NOT
21389: IFFALSE 21393
// exit ;
21391: GO 21419
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21393: LD_VAR 0 1
21397: PUSH
21398: LD_INT 1
21400: PPUSH
21401: LD_VAR 0 1
21405: PPUSH
21406: CALL_OW 12
21410: ARRAY
21411: PPUSH
21412: LD_INT 1
21414: PPUSH
21415: CALL_OW 234
// end ;
21419: PPOPN 1
21421: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21422: LD_EXP 65
21426: PUSH
21427: LD_EXP 113
21431: AND
21432: IFFALSE 21544
21434: GO 21436
21436: DISABLE
21437: LD_INT 0
21439: PPUSH
21440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21441: LD_ADDR_VAR 0 2
21445: PUSH
21446: LD_INT 22
21448: PUSH
21449: LD_OWVAR 2
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 2
21460: PUSH
21461: LD_INT 30
21463: PUSH
21464: LD_INT 27
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 30
21473: PUSH
21474: LD_INT 26
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 30
21483: PUSH
21484: LD_INT 28
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PPUSH
21501: CALL_OW 69
21505: ST_TO_ADDR
// if not tmp then
21506: LD_VAR 0 2
21510: NOT
21511: IFFALSE 21515
// exit ;
21513: GO 21544
// for i in tmp do
21515: LD_ADDR_VAR 0 1
21519: PUSH
21520: LD_VAR 0 2
21524: PUSH
21525: FOR_IN
21526: IFFALSE 21542
// SetLives ( i , 1 ) ;
21528: LD_VAR 0 1
21532: PPUSH
21533: LD_INT 1
21535: PPUSH
21536: CALL_OW 234
21540: GO 21525
21542: POP
21543: POP
// end ;
21544: PPOPN 2
21546: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21547: LD_EXP 65
21551: PUSH
21552: LD_EXP 114
21556: AND
21557: IFFALSE 21844
21559: GO 21561
21561: DISABLE
21562: LD_INT 0
21564: PPUSH
21565: PPUSH
21566: PPUSH
// begin i := rand ( 1 , 7 ) ;
21567: LD_ADDR_VAR 0 1
21571: PUSH
21572: LD_INT 1
21574: PPUSH
21575: LD_INT 7
21577: PPUSH
21578: CALL_OW 12
21582: ST_TO_ADDR
// case i of 1 :
21583: LD_VAR 0 1
21587: PUSH
21588: LD_INT 1
21590: DOUBLE
21591: EQUAL
21592: IFTRUE 21596
21594: GO 21606
21596: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21597: LD_STRING earthquake(getX(game), 0, 32)
21599: PPUSH
21600: CALL_OW 559
21604: GO 21844
21606: LD_INT 2
21608: DOUBLE
21609: EQUAL
21610: IFTRUE 21614
21612: GO 21628
21614: POP
// begin ToLua ( displayStucuk(); ) ;
21615: LD_STRING displayStucuk();
21617: PPUSH
21618: CALL_OW 559
// ResetFog ;
21622: CALL_OW 335
// end ; 3 :
21626: GO 21844
21628: LD_INT 3
21630: DOUBLE
21631: EQUAL
21632: IFTRUE 21636
21634: GO 21740
21636: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21637: LD_ADDR_VAR 0 2
21641: PUSH
21642: LD_INT 22
21644: PUSH
21645: LD_OWVAR 2
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 25
21656: PUSH
21657: LD_INT 1
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PPUSH
21668: CALL_OW 69
21672: ST_TO_ADDR
// if not tmp then
21673: LD_VAR 0 2
21677: NOT
21678: IFFALSE 21682
// exit ;
21680: GO 21844
// un := tmp [ rand ( 1 , tmp ) ] ;
21682: LD_ADDR_VAR 0 3
21686: PUSH
21687: LD_VAR 0 2
21691: PUSH
21692: LD_INT 1
21694: PPUSH
21695: LD_VAR 0 2
21699: PPUSH
21700: CALL_OW 12
21704: ARRAY
21705: ST_TO_ADDR
// if Crawls ( un ) then
21706: LD_VAR 0 3
21710: PPUSH
21711: CALL_OW 318
21715: IFFALSE 21726
// ComWalk ( un ) ;
21717: LD_VAR 0 3
21721: PPUSH
21722: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21726: LD_VAR 0 3
21730: PPUSH
21731: LD_INT 8
21733: PPUSH
21734: CALL_OW 336
// end ; 4 :
21738: GO 21844
21740: LD_INT 4
21742: DOUBLE
21743: EQUAL
21744: IFTRUE 21748
21746: GO 21822
21748: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21749: LD_ADDR_VAR 0 2
21753: PUSH
21754: LD_INT 22
21756: PUSH
21757: LD_OWVAR 2
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 30
21768: PUSH
21769: LD_INT 29
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PPUSH
21780: CALL_OW 69
21784: ST_TO_ADDR
// if not tmp then
21785: LD_VAR 0 2
21789: NOT
21790: IFFALSE 21794
// exit ;
21792: GO 21844
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21794: LD_VAR 0 2
21798: PUSH
21799: LD_INT 1
21801: ARRAY
21802: PPUSH
21803: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21807: LD_VAR 0 2
21811: PUSH
21812: LD_INT 1
21814: ARRAY
21815: PPUSH
21816: CALL_OW 65
// end ; 5 .. 7 :
21820: GO 21844
21822: LD_INT 5
21824: DOUBLE
21825: GREATEREQUAL
21826: IFFALSE 21834
21828: LD_INT 7
21830: DOUBLE
21831: LESSEQUAL
21832: IFTRUE 21836
21834: GO 21843
21836: POP
// StreamSibBomb ; end ;
21837: CALL 18081 0 0
21841: GO 21844
21843: POP
// end ;
21844: PPOPN 3
21846: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21847: LD_EXP 65
21851: PUSH
21852: LD_EXP 115
21856: AND
21857: IFFALSE 22013
21859: GO 21861
21861: DISABLE
21862: LD_INT 0
21864: PPUSH
21865: PPUSH
21866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21867: LD_ADDR_VAR 0 2
21871: PUSH
21872: LD_INT 81
21874: PUSH
21875: LD_OWVAR 2
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 2
21886: PUSH
21887: LD_INT 21
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 21
21899: PUSH
21900: LD_INT 2
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: LIST
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PPUSH
21916: CALL_OW 69
21920: ST_TO_ADDR
// if not tmp then
21921: LD_VAR 0 2
21925: NOT
21926: IFFALSE 21930
// exit ;
21928: GO 22013
// p := 0 ;
21930: LD_ADDR_VAR 0 3
21934: PUSH
21935: LD_INT 0
21937: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21938: LD_INT 35
21940: PPUSH
21941: CALL_OW 67
// p := p + 1 ;
21945: LD_ADDR_VAR 0 3
21949: PUSH
21950: LD_VAR 0 3
21954: PUSH
21955: LD_INT 1
21957: PLUS
21958: ST_TO_ADDR
// for i in tmp do
21959: LD_ADDR_VAR 0 1
21963: PUSH
21964: LD_VAR 0 2
21968: PUSH
21969: FOR_IN
21970: IFFALSE 22001
// if GetLives ( i ) < 1000 then
21972: LD_VAR 0 1
21976: PPUSH
21977: CALL_OW 256
21981: PUSH
21982: LD_INT 1000
21984: LESS
21985: IFFALSE 21999
// SetLives ( i , 1000 ) ;
21987: LD_VAR 0 1
21991: PPUSH
21992: LD_INT 1000
21994: PPUSH
21995: CALL_OW 234
21999: GO 21969
22001: POP
22002: POP
// until p > 20 ;
22003: LD_VAR 0 3
22007: PUSH
22008: LD_INT 20
22010: GREATER
22011: IFFALSE 21938
// end ;
22013: PPOPN 3
22015: END
// every 0 0$1 trigger StreamModeActive and sTime do
22016: LD_EXP 65
22020: PUSH
22021: LD_EXP 116
22025: AND
22026: IFFALSE 22061
22028: GO 22030
22030: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22031: LD_INT 28
22033: PPUSH
22034: LD_OWVAR 2
22038: PPUSH
22039: LD_INT 2
22041: PPUSH
22042: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22046: LD_INT 30
22048: PPUSH
22049: LD_OWVAR 2
22053: PPUSH
22054: LD_INT 2
22056: PPUSH
22057: CALL_OW 322
// end ;
22061: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22062: LD_EXP 65
22066: PUSH
22067: LD_EXP 117
22071: AND
22072: IFFALSE 22193
22074: GO 22076
22076: DISABLE
22077: LD_INT 0
22079: PPUSH
22080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22081: LD_ADDR_VAR 0 2
22085: PUSH
22086: LD_INT 22
22088: PUSH
22089: LD_OWVAR 2
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 21
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 3
22110: PUSH
22111: LD_INT 23
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: LIST
22129: PPUSH
22130: CALL_OW 69
22134: ST_TO_ADDR
// if not tmp then
22135: LD_VAR 0 2
22139: NOT
22140: IFFALSE 22144
// exit ;
22142: GO 22193
// for i in tmp do
22144: LD_ADDR_VAR 0 1
22148: PUSH
22149: LD_VAR 0 2
22153: PUSH
22154: FOR_IN
22155: IFFALSE 22191
// begin if Crawls ( i ) then
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 318
22166: IFFALSE 22177
// ComWalk ( i ) ;
22168: LD_VAR 0 1
22172: PPUSH
22173: CALL_OW 138
// SetClass ( i , 2 ) ;
22177: LD_VAR 0 1
22181: PPUSH
22182: LD_INT 2
22184: PPUSH
22185: CALL_OW 336
// end ;
22189: GO 22154
22191: POP
22192: POP
// end ;
22193: PPOPN 2
22195: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22196: LD_EXP 65
22200: PUSH
22201: LD_EXP 118
22205: AND
22206: IFFALSE 22494
22208: GO 22210
22210: DISABLE
22211: LD_INT 0
22213: PPUSH
22214: PPUSH
22215: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22216: LD_OWVAR 2
22220: PPUSH
22221: LD_INT 9
22223: PPUSH
22224: LD_INT 1
22226: PPUSH
22227: LD_INT 1
22229: PPUSH
22230: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22234: LD_INT 9
22236: PPUSH
22237: LD_OWVAR 2
22241: PPUSH
22242: CALL_OW 343
// uc_side := 9 ;
22246: LD_ADDR_OWVAR 20
22250: PUSH
22251: LD_INT 9
22253: ST_TO_ADDR
// uc_nation := 2 ;
22254: LD_ADDR_OWVAR 21
22258: PUSH
22259: LD_INT 2
22261: ST_TO_ADDR
// hc_name := Dark Warrior ;
22262: LD_ADDR_OWVAR 26
22266: PUSH
22267: LD_STRING Dark Warrior
22269: ST_TO_ADDR
// hc_gallery :=  ;
22270: LD_ADDR_OWVAR 33
22274: PUSH
22275: LD_STRING 
22277: ST_TO_ADDR
// hc_noskilllimit := true ;
22278: LD_ADDR_OWVAR 76
22282: PUSH
22283: LD_INT 1
22285: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22286: LD_ADDR_OWVAR 31
22290: PUSH
22291: LD_INT 30
22293: PUSH
22294: LD_INT 30
22296: PUSH
22297: LD_INT 30
22299: PUSH
22300: LD_INT 30
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: ST_TO_ADDR
// un := CreateHuman ;
22309: LD_ADDR_VAR 0 3
22313: PUSH
22314: CALL_OW 44
22318: ST_TO_ADDR
// hc_noskilllimit := false ;
22319: LD_ADDR_OWVAR 76
22323: PUSH
22324: LD_INT 0
22326: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22327: LD_VAR 0 3
22331: PPUSH
22332: LD_INT 1
22334: PPUSH
22335: CALL_OW 51
// ToLua ( playRanger() ) ;
22339: LD_STRING playRanger()
22341: PPUSH
22342: CALL_OW 559
// p := 0 ;
22346: LD_ADDR_VAR 0 2
22350: PUSH
22351: LD_INT 0
22353: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22354: LD_INT 35
22356: PPUSH
22357: CALL_OW 67
// p := p + 1 ;
22361: LD_ADDR_VAR 0 2
22365: PUSH
22366: LD_VAR 0 2
22370: PUSH
22371: LD_INT 1
22373: PLUS
22374: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22375: LD_VAR 0 3
22379: PPUSH
22380: CALL_OW 256
22384: PUSH
22385: LD_INT 1000
22387: LESS
22388: IFFALSE 22402
// SetLives ( un , 1000 ) ;
22390: LD_VAR 0 3
22394: PPUSH
22395: LD_INT 1000
22397: PPUSH
22398: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22402: LD_VAR 0 3
22406: PPUSH
22407: LD_INT 81
22409: PUSH
22410: LD_OWVAR 2
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 91
22421: PUSH
22422: LD_VAR 0 3
22426: PUSH
22427: LD_INT 30
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: LIST
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PPUSH
22439: CALL_OW 69
22443: PPUSH
22444: LD_VAR 0 3
22448: PPUSH
22449: CALL_OW 74
22453: PPUSH
22454: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22458: LD_VAR 0 2
22462: PUSH
22463: LD_INT 80
22465: GREATER
22466: PUSH
22467: LD_VAR 0 3
22471: PPUSH
22472: CALL_OW 301
22476: OR
22477: IFFALSE 22354
// if un then
22479: LD_VAR 0 3
22483: IFFALSE 22494
// RemoveUnit ( un ) ;
22485: LD_VAR 0 3
22489: PPUSH
22490: CALL_OW 64
// end ;
22494: PPOPN 3
22496: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22497: LD_EXP 119
22501: IFFALSE 22617
22503: GO 22505
22505: DISABLE
22506: LD_INT 0
22508: PPUSH
22509: PPUSH
22510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22511: LD_ADDR_VAR 0 2
22515: PUSH
22516: LD_INT 81
22518: PUSH
22519: LD_OWVAR 2
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 21
22530: PUSH
22531: LD_INT 1
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PPUSH
22542: CALL_OW 69
22546: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22547: LD_STRING playComputer()
22549: PPUSH
22550: CALL_OW 559
// if not tmp then
22554: LD_VAR 0 2
22558: NOT
22559: IFFALSE 22563
// exit ;
22561: GO 22617
// for i in tmp do
22563: LD_ADDR_VAR 0 1
22567: PUSH
22568: LD_VAR 0 2
22572: PUSH
22573: FOR_IN
22574: IFFALSE 22615
// for j := 1 to 4 do
22576: LD_ADDR_VAR 0 3
22580: PUSH
22581: DOUBLE
22582: LD_INT 1
22584: DEC
22585: ST_TO_ADDR
22586: LD_INT 4
22588: PUSH
22589: FOR_TO
22590: IFFALSE 22611
// SetSkill ( i , j , 10 ) ;
22592: LD_VAR 0 1
22596: PPUSH
22597: LD_VAR 0 3
22601: PPUSH
22602: LD_INT 10
22604: PPUSH
22605: CALL_OW 237
22609: GO 22589
22611: POP
22612: POP
22613: GO 22573
22615: POP
22616: POP
// end ;
22617: PPOPN 3
22619: END
// every 0 0$1 trigger s30 do var i , tmp ;
22620: LD_EXP 120
22624: IFFALSE 22693
22626: GO 22628
22628: DISABLE
22629: LD_INT 0
22631: PPUSH
22632: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22633: LD_ADDR_VAR 0 2
22637: PUSH
22638: LD_INT 22
22640: PUSH
22641: LD_OWVAR 2
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PPUSH
22650: CALL_OW 69
22654: ST_TO_ADDR
// if not tmp then
22655: LD_VAR 0 2
22659: NOT
22660: IFFALSE 22664
// exit ;
22662: GO 22693
// for i in tmp do
22664: LD_ADDR_VAR 0 1
22668: PUSH
22669: LD_VAR 0 2
22673: PUSH
22674: FOR_IN
22675: IFFALSE 22691
// SetLives ( i , 300 ) ;
22677: LD_VAR 0 1
22681: PPUSH
22682: LD_INT 300
22684: PPUSH
22685: CALL_OW 234
22689: GO 22674
22691: POP
22692: POP
// end ;
22693: PPOPN 2
22695: END
// every 0 0$1 trigger s60 do var i , tmp ;
22696: LD_EXP 121
22700: IFFALSE 22769
22702: GO 22704
22704: DISABLE
22705: LD_INT 0
22707: PPUSH
22708: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22709: LD_ADDR_VAR 0 2
22713: PUSH
22714: LD_INT 22
22716: PUSH
22717: LD_OWVAR 2
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PPUSH
22726: CALL_OW 69
22730: ST_TO_ADDR
// if not tmp then
22731: LD_VAR 0 2
22735: NOT
22736: IFFALSE 22740
// exit ;
22738: GO 22769
// for i in tmp do
22740: LD_ADDR_VAR 0 1
22744: PUSH
22745: LD_VAR 0 2
22749: PUSH
22750: FOR_IN
22751: IFFALSE 22767
// SetLives ( i , 600 ) ;
22753: LD_VAR 0 1
22757: PPUSH
22758: LD_INT 600
22760: PPUSH
22761: CALL_OW 234
22765: GO 22750
22767: POP
22768: POP
// end ;
22769: PPOPN 2
22771: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22772: LD_INT 0
22774: PPUSH
// case cmd of 301 :
22775: LD_VAR 0 1
22779: PUSH
22780: LD_INT 301
22782: DOUBLE
22783: EQUAL
22784: IFTRUE 22788
22786: GO 22820
22788: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22789: LD_VAR 0 6
22793: PPUSH
22794: LD_VAR 0 7
22798: PPUSH
22799: LD_VAR 0 8
22803: PPUSH
22804: LD_VAR 0 4
22808: PPUSH
22809: LD_VAR 0 5
22813: PPUSH
22814: CALL 24021 0 5
22818: GO 22941
22820: LD_INT 302
22822: DOUBLE
22823: EQUAL
22824: IFTRUE 22828
22826: GO 22865
22828: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22829: LD_VAR 0 6
22833: PPUSH
22834: LD_VAR 0 7
22838: PPUSH
22839: LD_VAR 0 8
22843: PPUSH
22844: LD_VAR 0 9
22848: PPUSH
22849: LD_VAR 0 4
22853: PPUSH
22854: LD_VAR 0 5
22858: PPUSH
22859: CALL 24112 0 6
22863: GO 22941
22865: LD_INT 303
22867: DOUBLE
22868: EQUAL
22869: IFTRUE 22873
22871: GO 22910
22873: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22874: LD_VAR 0 6
22878: PPUSH
22879: LD_VAR 0 7
22883: PPUSH
22884: LD_VAR 0 8
22888: PPUSH
22889: LD_VAR 0 9
22893: PPUSH
22894: LD_VAR 0 4
22898: PPUSH
22899: LD_VAR 0 5
22903: PPUSH
22904: CALL 22946 0 6
22908: GO 22941
22910: LD_INT 304
22912: DOUBLE
22913: EQUAL
22914: IFTRUE 22918
22916: GO 22940
22918: POP
// hHackTeleport ( unit , x , y ) ; end ;
22919: LD_VAR 0 2
22923: PPUSH
22924: LD_VAR 0 4
22928: PPUSH
22929: LD_VAR 0 5
22933: PPUSH
22934: CALL 24705 0 3
22938: GO 22941
22940: POP
// end ;
22941: LD_VAR 0 12
22945: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22946: LD_INT 0
22948: PPUSH
22949: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22950: LD_VAR 0 1
22954: PUSH
22955: LD_INT 1
22957: LESS
22958: PUSH
22959: LD_VAR 0 1
22963: PUSH
22964: LD_INT 3
22966: GREATER
22967: OR
22968: PUSH
22969: LD_VAR 0 5
22973: PPUSH
22974: LD_VAR 0 6
22978: PPUSH
22979: CALL_OW 428
22983: OR
22984: IFFALSE 22988
// exit ;
22986: GO 23708
// uc_side := your_side ;
22988: LD_ADDR_OWVAR 20
22992: PUSH
22993: LD_OWVAR 2
22997: ST_TO_ADDR
// uc_nation := nation ;
22998: LD_ADDR_OWVAR 21
23002: PUSH
23003: LD_VAR 0 1
23007: ST_TO_ADDR
// bc_level = 1 ;
23008: LD_ADDR_OWVAR 43
23012: PUSH
23013: LD_INT 1
23015: ST_TO_ADDR
// case btype of 1 :
23016: LD_VAR 0 2
23020: PUSH
23021: LD_INT 1
23023: DOUBLE
23024: EQUAL
23025: IFTRUE 23029
23027: GO 23040
23029: POP
// bc_type := b_depot ; 2 :
23030: LD_ADDR_OWVAR 42
23034: PUSH
23035: LD_INT 0
23037: ST_TO_ADDR
23038: GO 23652
23040: LD_INT 2
23042: DOUBLE
23043: EQUAL
23044: IFTRUE 23048
23046: GO 23059
23048: POP
// bc_type := b_warehouse ; 3 :
23049: LD_ADDR_OWVAR 42
23053: PUSH
23054: LD_INT 1
23056: ST_TO_ADDR
23057: GO 23652
23059: LD_INT 3
23061: DOUBLE
23062: EQUAL
23063: IFTRUE 23067
23065: GO 23078
23067: POP
// bc_type := b_lab ; 4 .. 9 :
23068: LD_ADDR_OWVAR 42
23072: PUSH
23073: LD_INT 6
23075: ST_TO_ADDR
23076: GO 23652
23078: LD_INT 4
23080: DOUBLE
23081: GREATEREQUAL
23082: IFFALSE 23090
23084: LD_INT 9
23086: DOUBLE
23087: LESSEQUAL
23088: IFTRUE 23092
23090: GO 23144
23092: POP
// begin bc_type := b_lab_half ;
23093: LD_ADDR_OWVAR 42
23097: PUSH
23098: LD_INT 7
23100: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23101: LD_ADDR_OWVAR 44
23105: PUSH
23106: LD_INT 10
23108: PUSH
23109: LD_INT 11
23111: PUSH
23112: LD_INT 12
23114: PUSH
23115: LD_INT 15
23117: PUSH
23118: LD_INT 14
23120: PUSH
23121: LD_INT 13
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: PUSH
23132: LD_VAR 0 2
23136: PUSH
23137: LD_INT 3
23139: MINUS
23140: ARRAY
23141: ST_TO_ADDR
// end ; 10 .. 13 :
23142: GO 23652
23144: LD_INT 10
23146: DOUBLE
23147: GREATEREQUAL
23148: IFFALSE 23156
23150: LD_INT 13
23152: DOUBLE
23153: LESSEQUAL
23154: IFTRUE 23158
23156: GO 23235
23158: POP
// begin bc_type := b_lab_full ;
23159: LD_ADDR_OWVAR 42
23163: PUSH
23164: LD_INT 8
23166: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23167: LD_ADDR_OWVAR 44
23171: PUSH
23172: LD_INT 10
23174: PUSH
23175: LD_INT 12
23177: PUSH
23178: LD_INT 14
23180: PUSH
23181: LD_INT 13
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: PUSH
23190: LD_VAR 0 2
23194: PUSH
23195: LD_INT 9
23197: MINUS
23198: ARRAY
23199: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23200: LD_ADDR_OWVAR 45
23204: PUSH
23205: LD_INT 11
23207: PUSH
23208: LD_INT 15
23210: PUSH
23211: LD_INT 12
23213: PUSH
23214: LD_INT 15
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: PUSH
23223: LD_VAR 0 2
23227: PUSH
23228: LD_INT 9
23230: MINUS
23231: ARRAY
23232: ST_TO_ADDR
// end ; 14 :
23233: GO 23652
23235: LD_INT 14
23237: DOUBLE
23238: EQUAL
23239: IFTRUE 23243
23241: GO 23254
23243: POP
// bc_type := b_workshop ; 15 :
23244: LD_ADDR_OWVAR 42
23248: PUSH
23249: LD_INT 2
23251: ST_TO_ADDR
23252: GO 23652
23254: LD_INT 15
23256: DOUBLE
23257: EQUAL
23258: IFTRUE 23262
23260: GO 23273
23262: POP
// bc_type := b_factory ; 16 :
23263: LD_ADDR_OWVAR 42
23267: PUSH
23268: LD_INT 3
23270: ST_TO_ADDR
23271: GO 23652
23273: LD_INT 16
23275: DOUBLE
23276: EQUAL
23277: IFTRUE 23281
23279: GO 23292
23281: POP
// bc_type := b_ext_gun ; 17 :
23282: LD_ADDR_OWVAR 42
23286: PUSH
23287: LD_INT 17
23289: ST_TO_ADDR
23290: GO 23652
23292: LD_INT 17
23294: DOUBLE
23295: EQUAL
23296: IFTRUE 23300
23298: GO 23328
23300: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23301: LD_ADDR_OWVAR 42
23305: PUSH
23306: LD_INT 19
23308: PUSH
23309: LD_INT 23
23311: PUSH
23312: LD_INT 19
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: LIST
23319: PUSH
23320: LD_VAR 0 1
23324: ARRAY
23325: ST_TO_ADDR
23326: GO 23652
23328: LD_INT 18
23330: DOUBLE
23331: EQUAL
23332: IFTRUE 23336
23334: GO 23347
23336: POP
// bc_type := b_ext_radar ; 19 :
23337: LD_ADDR_OWVAR 42
23341: PUSH
23342: LD_INT 20
23344: ST_TO_ADDR
23345: GO 23652
23347: LD_INT 19
23349: DOUBLE
23350: EQUAL
23351: IFTRUE 23355
23353: GO 23366
23355: POP
// bc_type := b_ext_radio ; 20 :
23356: LD_ADDR_OWVAR 42
23360: PUSH
23361: LD_INT 22
23363: ST_TO_ADDR
23364: GO 23652
23366: LD_INT 20
23368: DOUBLE
23369: EQUAL
23370: IFTRUE 23374
23372: GO 23385
23374: POP
// bc_type := b_ext_siberium ; 21 :
23375: LD_ADDR_OWVAR 42
23379: PUSH
23380: LD_INT 21
23382: ST_TO_ADDR
23383: GO 23652
23385: LD_INT 21
23387: DOUBLE
23388: EQUAL
23389: IFTRUE 23393
23391: GO 23404
23393: POP
// bc_type := b_ext_computer ; 22 :
23394: LD_ADDR_OWVAR 42
23398: PUSH
23399: LD_INT 24
23401: ST_TO_ADDR
23402: GO 23652
23404: LD_INT 22
23406: DOUBLE
23407: EQUAL
23408: IFTRUE 23412
23410: GO 23423
23412: POP
// bc_type := b_ext_track ; 23 :
23413: LD_ADDR_OWVAR 42
23417: PUSH
23418: LD_INT 16
23420: ST_TO_ADDR
23421: GO 23652
23423: LD_INT 23
23425: DOUBLE
23426: EQUAL
23427: IFTRUE 23431
23429: GO 23442
23431: POP
// bc_type := b_ext_laser ; 24 :
23432: LD_ADDR_OWVAR 42
23436: PUSH
23437: LD_INT 25
23439: ST_TO_ADDR
23440: GO 23652
23442: LD_INT 24
23444: DOUBLE
23445: EQUAL
23446: IFTRUE 23450
23448: GO 23461
23450: POP
// bc_type := b_control_tower ; 25 :
23451: LD_ADDR_OWVAR 42
23455: PUSH
23456: LD_INT 36
23458: ST_TO_ADDR
23459: GO 23652
23461: LD_INT 25
23463: DOUBLE
23464: EQUAL
23465: IFTRUE 23469
23467: GO 23480
23469: POP
// bc_type := b_breastwork ; 26 :
23470: LD_ADDR_OWVAR 42
23474: PUSH
23475: LD_INT 31
23477: ST_TO_ADDR
23478: GO 23652
23480: LD_INT 26
23482: DOUBLE
23483: EQUAL
23484: IFTRUE 23488
23486: GO 23499
23488: POP
// bc_type := b_bunker ; 27 :
23489: LD_ADDR_OWVAR 42
23493: PUSH
23494: LD_INT 32
23496: ST_TO_ADDR
23497: GO 23652
23499: LD_INT 27
23501: DOUBLE
23502: EQUAL
23503: IFTRUE 23507
23505: GO 23518
23507: POP
// bc_type := b_turret ; 28 :
23508: LD_ADDR_OWVAR 42
23512: PUSH
23513: LD_INT 33
23515: ST_TO_ADDR
23516: GO 23652
23518: LD_INT 28
23520: DOUBLE
23521: EQUAL
23522: IFTRUE 23526
23524: GO 23537
23526: POP
// bc_type := b_armoury ; 29 :
23527: LD_ADDR_OWVAR 42
23531: PUSH
23532: LD_INT 4
23534: ST_TO_ADDR
23535: GO 23652
23537: LD_INT 29
23539: DOUBLE
23540: EQUAL
23541: IFTRUE 23545
23543: GO 23556
23545: POP
// bc_type := b_barracks ; 30 :
23546: LD_ADDR_OWVAR 42
23550: PUSH
23551: LD_INT 5
23553: ST_TO_ADDR
23554: GO 23652
23556: LD_INT 30
23558: DOUBLE
23559: EQUAL
23560: IFTRUE 23564
23562: GO 23575
23564: POP
// bc_type := b_solar_power ; 31 :
23565: LD_ADDR_OWVAR 42
23569: PUSH
23570: LD_INT 27
23572: ST_TO_ADDR
23573: GO 23652
23575: LD_INT 31
23577: DOUBLE
23578: EQUAL
23579: IFTRUE 23583
23581: GO 23594
23583: POP
// bc_type := b_oil_power ; 32 :
23584: LD_ADDR_OWVAR 42
23588: PUSH
23589: LD_INT 26
23591: ST_TO_ADDR
23592: GO 23652
23594: LD_INT 32
23596: DOUBLE
23597: EQUAL
23598: IFTRUE 23602
23600: GO 23613
23602: POP
// bc_type := b_siberite_power ; 33 :
23603: LD_ADDR_OWVAR 42
23607: PUSH
23608: LD_INT 28
23610: ST_TO_ADDR
23611: GO 23652
23613: LD_INT 33
23615: DOUBLE
23616: EQUAL
23617: IFTRUE 23621
23619: GO 23632
23621: POP
// bc_type := b_oil_mine ; 34 :
23622: LD_ADDR_OWVAR 42
23626: PUSH
23627: LD_INT 29
23629: ST_TO_ADDR
23630: GO 23652
23632: LD_INT 34
23634: DOUBLE
23635: EQUAL
23636: IFTRUE 23640
23638: GO 23651
23640: POP
// bc_type := b_siberite_mine ; end ;
23641: LD_ADDR_OWVAR 42
23645: PUSH
23646: LD_INT 30
23648: ST_TO_ADDR
23649: GO 23652
23651: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23652: LD_ADDR_VAR 0 8
23656: PUSH
23657: LD_VAR 0 5
23661: PPUSH
23662: LD_VAR 0 6
23666: PPUSH
23667: LD_VAR 0 3
23671: PPUSH
23672: CALL_OW 47
23676: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23677: LD_OWVAR 42
23681: PUSH
23682: LD_INT 32
23684: PUSH
23685: LD_INT 33
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: IN
23692: IFFALSE 23708
// PlaceWeaponTurret ( b , weapon ) ;
23694: LD_VAR 0 8
23698: PPUSH
23699: LD_VAR 0 4
23703: PPUSH
23704: CALL_OW 431
// end ;
23708: LD_VAR 0 7
23712: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23713: LD_INT 0
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23719: LD_ADDR_VAR 0 4
23723: PUSH
23724: LD_INT 22
23726: PUSH
23727: LD_OWVAR 2
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: LD_INT 30
23741: PUSH
23742: LD_INT 0
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 30
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PPUSH
23768: CALL_OW 69
23772: ST_TO_ADDR
// if not tmp then
23773: LD_VAR 0 4
23777: NOT
23778: IFFALSE 23782
// exit ;
23780: GO 23841
// for i in tmp do
23782: LD_ADDR_VAR 0 2
23786: PUSH
23787: LD_VAR 0 4
23791: PUSH
23792: FOR_IN
23793: IFFALSE 23839
// for j = 1 to 3 do
23795: LD_ADDR_VAR 0 3
23799: PUSH
23800: DOUBLE
23801: LD_INT 1
23803: DEC
23804: ST_TO_ADDR
23805: LD_INT 3
23807: PUSH
23808: FOR_TO
23809: IFFALSE 23835
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23811: LD_VAR 0 2
23815: PPUSH
23816: CALL_OW 274
23820: PPUSH
23821: LD_VAR 0 3
23825: PPUSH
23826: LD_INT 99999
23828: PPUSH
23829: CALL_OW 277
23833: GO 23808
23835: POP
23836: POP
23837: GO 23792
23839: POP
23840: POP
// end ;
23841: LD_VAR 0 1
23845: RET
// export function hHackSetLevel10 ; var i , j ; begin
23846: LD_INT 0
23848: PPUSH
23849: PPUSH
23850: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23851: LD_ADDR_VAR 0 2
23855: PUSH
23856: LD_INT 21
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PPUSH
23866: CALL_OW 69
23870: PUSH
23871: FOR_IN
23872: IFFALSE 23924
// if IsSelected ( i ) then
23874: LD_VAR 0 2
23878: PPUSH
23879: CALL_OW 306
23883: IFFALSE 23922
// begin for j := 1 to 4 do
23885: LD_ADDR_VAR 0 3
23889: PUSH
23890: DOUBLE
23891: LD_INT 1
23893: DEC
23894: ST_TO_ADDR
23895: LD_INT 4
23897: PUSH
23898: FOR_TO
23899: IFFALSE 23920
// SetSkill ( i , j , 10 ) ;
23901: LD_VAR 0 2
23905: PPUSH
23906: LD_VAR 0 3
23910: PPUSH
23911: LD_INT 10
23913: PPUSH
23914: CALL_OW 237
23918: GO 23898
23920: POP
23921: POP
// end ;
23922: GO 23871
23924: POP
23925: POP
// end ;
23926: LD_VAR 0 1
23930: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23931: LD_INT 0
23933: PPUSH
23934: PPUSH
23935: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23936: LD_ADDR_VAR 0 2
23940: PUSH
23941: LD_INT 22
23943: PUSH
23944: LD_OWVAR 2
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 21
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PPUSH
23967: CALL_OW 69
23971: PUSH
23972: FOR_IN
23973: IFFALSE 24014
// begin for j := 1 to 4 do
23975: LD_ADDR_VAR 0 3
23979: PUSH
23980: DOUBLE
23981: LD_INT 1
23983: DEC
23984: ST_TO_ADDR
23985: LD_INT 4
23987: PUSH
23988: FOR_TO
23989: IFFALSE 24010
// SetSkill ( i , j , 10 ) ;
23991: LD_VAR 0 2
23995: PPUSH
23996: LD_VAR 0 3
24000: PPUSH
24001: LD_INT 10
24003: PPUSH
24004: CALL_OW 237
24008: GO 23988
24010: POP
24011: POP
// end ;
24012: GO 23972
24014: POP
24015: POP
// end ;
24016: LD_VAR 0 1
24020: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24021: LD_INT 0
24023: PPUSH
// uc_side := your_side ;
24024: LD_ADDR_OWVAR 20
24028: PUSH
24029: LD_OWVAR 2
24033: ST_TO_ADDR
// uc_nation := nation ;
24034: LD_ADDR_OWVAR 21
24038: PUSH
24039: LD_VAR 0 1
24043: ST_TO_ADDR
// InitHc ;
24044: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24048: LD_INT 0
24050: PPUSH
24051: LD_VAR 0 2
24055: PPUSH
24056: LD_VAR 0 3
24060: PPUSH
24061: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24065: LD_VAR 0 4
24069: PPUSH
24070: LD_VAR 0 5
24074: PPUSH
24075: CALL_OW 428
24079: PUSH
24080: LD_INT 0
24082: EQUAL
24083: IFFALSE 24107
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24085: CALL_OW 44
24089: PPUSH
24090: LD_VAR 0 4
24094: PPUSH
24095: LD_VAR 0 5
24099: PPUSH
24100: LD_INT 1
24102: PPUSH
24103: CALL_OW 48
// end ;
24107: LD_VAR 0 6
24111: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24112: LD_INT 0
24114: PPUSH
24115: PPUSH
// uc_side := your_side ;
24116: LD_ADDR_OWVAR 20
24120: PUSH
24121: LD_OWVAR 2
24125: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24126: LD_VAR 0 1
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: LD_INT 2
24136: PUSH
24137: LD_INT 3
24139: PUSH
24140: LD_INT 4
24142: PUSH
24143: LD_INT 5
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: IN
24153: IFFALSE 24165
// uc_nation := nation_american else
24155: LD_ADDR_OWVAR 21
24159: PUSH
24160: LD_INT 1
24162: ST_TO_ADDR
24163: GO 24208
// if chassis in [ 11 , 12 , 13 , 14 ] then
24165: LD_VAR 0 1
24169: PUSH
24170: LD_INT 11
24172: PUSH
24173: LD_INT 12
24175: PUSH
24176: LD_INT 13
24178: PUSH
24179: LD_INT 14
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: IN
24188: IFFALSE 24200
// uc_nation := nation_arabian else
24190: LD_ADDR_OWVAR 21
24194: PUSH
24195: LD_INT 2
24197: ST_TO_ADDR
24198: GO 24208
// uc_nation := nation_russian ;
24200: LD_ADDR_OWVAR 21
24204: PUSH
24205: LD_INT 3
24207: ST_TO_ADDR
// vc_chassis := chassis ;
24208: LD_ADDR_OWVAR 37
24212: PUSH
24213: LD_VAR 0 1
24217: ST_TO_ADDR
// vc_engine := engine ;
24218: LD_ADDR_OWVAR 39
24222: PUSH
24223: LD_VAR 0 2
24227: ST_TO_ADDR
// vc_control := control ;
24228: LD_ADDR_OWVAR 38
24232: PUSH
24233: LD_VAR 0 3
24237: ST_TO_ADDR
// vc_weapon := weapon ;
24238: LD_ADDR_OWVAR 40
24242: PUSH
24243: LD_VAR 0 4
24247: ST_TO_ADDR
// un := CreateVehicle ;
24248: LD_ADDR_VAR 0 8
24252: PUSH
24253: CALL_OW 45
24257: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24258: LD_VAR 0 8
24262: PPUSH
24263: LD_INT 0
24265: PPUSH
24266: LD_INT 5
24268: PPUSH
24269: CALL_OW 12
24273: PPUSH
24274: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24278: LD_VAR 0 8
24282: PPUSH
24283: LD_VAR 0 5
24287: PPUSH
24288: LD_VAR 0 6
24292: PPUSH
24293: LD_INT 1
24295: PPUSH
24296: CALL_OW 48
// end ;
24300: LD_VAR 0 7
24304: RET
// export hInvincible ; every 1 do
24305: GO 24307
24307: DISABLE
// hInvincible := [ ] ;
24308: LD_ADDR_EXP 122
24312: PUSH
24313: EMPTY
24314: ST_TO_ADDR
24315: END
// every 10 do var i ;
24316: GO 24318
24318: DISABLE
24319: LD_INT 0
24321: PPUSH
// begin enable ;
24322: ENABLE
// if not hInvincible then
24323: LD_EXP 122
24327: NOT
24328: IFFALSE 24332
// exit ;
24330: GO 24376
// for i in hInvincible do
24332: LD_ADDR_VAR 0 1
24336: PUSH
24337: LD_EXP 122
24341: PUSH
24342: FOR_IN
24343: IFFALSE 24374
// if GetLives ( i ) < 1000 then
24345: LD_VAR 0 1
24349: PPUSH
24350: CALL_OW 256
24354: PUSH
24355: LD_INT 1000
24357: LESS
24358: IFFALSE 24372
// SetLives ( i , 1000 ) ;
24360: LD_VAR 0 1
24364: PPUSH
24365: LD_INT 1000
24367: PPUSH
24368: CALL_OW 234
24372: GO 24342
24374: POP
24375: POP
// end ;
24376: PPOPN 1
24378: END
// export function hHackInvincible ; var i ; begin
24379: LD_INT 0
24381: PPUSH
24382: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24383: LD_ADDR_VAR 0 2
24387: PUSH
24388: LD_INT 2
24390: PUSH
24391: LD_INT 21
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 21
24403: PUSH
24404: LD_INT 2
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: LIST
24415: PPUSH
24416: CALL_OW 69
24420: PUSH
24421: FOR_IN
24422: IFFALSE 24483
// if IsSelected ( i ) then
24424: LD_VAR 0 2
24428: PPUSH
24429: CALL_OW 306
24433: IFFALSE 24481
// begin if i in hInvincible then
24435: LD_VAR 0 2
24439: PUSH
24440: LD_EXP 122
24444: IN
24445: IFFALSE 24465
// hInvincible := hInvincible diff i else
24447: LD_ADDR_EXP 122
24451: PUSH
24452: LD_EXP 122
24456: PUSH
24457: LD_VAR 0 2
24461: DIFF
24462: ST_TO_ADDR
24463: GO 24481
// hInvincible := hInvincible union i ;
24465: LD_ADDR_EXP 122
24469: PUSH
24470: LD_EXP 122
24474: PUSH
24475: LD_VAR 0 2
24479: UNION
24480: ST_TO_ADDR
// end ;
24481: GO 24421
24483: POP
24484: POP
// end ;
24485: LD_VAR 0 1
24489: RET
// export function hHackInvisible ; var i , j ; begin
24490: LD_INT 0
24492: PPUSH
24493: PPUSH
24494: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24495: LD_ADDR_VAR 0 2
24499: PUSH
24500: LD_INT 21
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PPUSH
24510: CALL_OW 69
24514: PUSH
24515: FOR_IN
24516: IFFALSE 24540
// if IsSelected ( i ) then
24518: LD_VAR 0 2
24522: PPUSH
24523: CALL_OW 306
24527: IFFALSE 24538
// ComForceInvisible ( i ) ;
24529: LD_VAR 0 2
24533: PPUSH
24534: CALL_OW 496
24538: GO 24515
24540: POP
24541: POP
// end ;
24542: LD_VAR 0 1
24546: RET
// export function hHackChangeYourSide ; begin
24547: LD_INT 0
24549: PPUSH
// if your_side = 8 then
24550: LD_OWVAR 2
24554: PUSH
24555: LD_INT 8
24557: EQUAL
24558: IFFALSE 24570
// your_side := 0 else
24560: LD_ADDR_OWVAR 2
24564: PUSH
24565: LD_INT 0
24567: ST_TO_ADDR
24568: GO 24584
// your_side := your_side + 1 ;
24570: LD_ADDR_OWVAR 2
24574: PUSH
24575: LD_OWVAR 2
24579: PUSH
24580: LD_INT 1
24582: PLUS
24583: ST_TO_ADDR
// end ;
24584: LD_VAR 0 1
24588: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24589: LD_INT 0
24591: PPUSH
24592: PPUSH
24593: PPUSH
// for i in all_units do
24594: LD_ADDR_VAR 0 2
24598: PUSH
24599: LD_OWVAR 3
24603: PUSH
24604: FOR_IN
24605: IFFALSE 24683
// if IsSelected ( i ) then
24607: LD_VAR 0 2
24611: PPUSH
24612: CALL_OW 306
24616: IFFALSE 24681
// begin j := GetSide ( i ) ;
24618: LD_ADDR_VAR 0 3
24622: PUSH
24623: LD_VAR 0 2
24627: PPUSH
24628: CALL_OW 255
24632: ST_TO_ADDR
// if j = 8 then
24633: LD_VAR 0 3
24637: PUSH
24638: LD_INT 8
24640: EQUAL
24641: IFFALSE 24653
// j := 0 else
24643: LD_ADDR_VAR 0 3
24647: PUSH
24648: LD_INT 0
24650: ST_TO_ADDR
24651: GO 24667
// j := j + 1 ;
24653: LD_ADDR_VAR 0 3
24657: PUSH
24658: LD_VAR 0 3
24662: PUSH
24663: LD_INT 1
24665: PLUS
24666: ST_TO_ADDR
// SetSide ( i , j ) ;
24667: LD_VAR 0 2
24671: PPUSH
24672: LD_VAR 0 3
24676: PPUSH
24677: CALL_OW 235
// end ;
24681: GO 24604
24683: POP
24684: POP
// end ;
24685: LD_VAR 0 1
24689: RET
// export function hHackFog ; begin
24690: LD_INT 0
24692: PPUSH
// FogOff ( true ) ;
24693: LD_INT 1
24695: PPUSH
24696: CALL_OW 344
// end ;
24700: LD_VAR 0 1
24704: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24705: LD_INT 0
24707: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24708: LD_VAR 0 1
24712: PPUSH
24713: LD_VAR 0 2
24717: PPUSH
24718: LD_VAR 0 3
24722: PPUSH
24723: LD_INT 1
24725: PPUSH
24726: LD_INT 1
24728: PPUSH
24729: CALL_OW 483
// CenterOnXY ( x , y ) ;
24733: LD_VAR 0 2
24737: PPUSH
24738: LD_VAR 0 3
24742: PPUSH
24743: CALL_OW 84
// end ; end_of_file
24747: LD_VAR 0 4
24751: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24752: LD_INT 0
24754: PPUSH
24755: PPUSH
24756: PPUSH
24757: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24758: LD_VAR 0 1
24762: PPUSH
24763: CALL_OW 264
24767: PUSH
24768: LD_EXP 49
24772: EQUAL
24773: IFFALSE 24845
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24775: LD_INT 68
24777: PPUSH
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL_OW 255
24787: PPUSH
24788: CALL_OW 321
24792: PUSH
24793: LD_INT 2
24795: EQUAL
24796: IFFALSE 24808
// eff := 70 else
24798: LD_ADDR_VAR 0 4
24802: PUSH
24803: LD_INT 70
24805: ST_TO_ADDR
24806: GO 24816
// eff := 30 ;
24808: LD_ADDR_VAR 0 4
24812: PUSH
24813: LD_INT 30
24815: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24816: LD_VAR 0 1
24820: PPUSH
24821: CALL_OW 250
24825: PPUSH
24826: LD_VAR 0 1
24830: PPUSH
24831: CALL_OW 251
24835: PPUSH
24836: LD_VAR 0 4
24840: PPUSH
24841: CALL_OW 495
// end ; end ;
24845: LD_VAR 0 2
24849: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24850: LD_INT 0
24852: PPUSH
// end ;
24853: LD_VAR 0 4
24857: RET
// export function SOS_Command ( cmd ) ; begin
24858: LD_INT 0
24860: PPUSH
// end ;
24861: LD_VAR 0 2
24865: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24866: LD_INT 0
24868: PPUSH
// end ;
24869: LD_VAR 0 6
24873: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24874: LD_INT 0
24876: PPUSH
24877: PPUSH
// if not vehicle or not factory then
24878: LD_VAR 0 1
24882: NOT
24883: PUSH
24884: LD_VAR 0 2
24888: NOT
24889: OR
24890: IFFALSE 24894
// exit ;
24892: GO 25125
// if factoryWaypoints >= factory then
24894: LD_EXP 123
24898: PUSH
24899: LD_VAR 0 2
24903: GREATEREQUAL
24904: IFFALSE 25125
// if factoryWaypoints [ factory ] then
24906: LD_EXP 123
24910: PUSH
24911: LD_VAR 0 2
24915: ARRAY
24916: IFFALSE 25125
// begin if GetControl ( vehicle ) = control_manual then
24918: LD_VAR 0 1
24922: PPUSH
24923: CALL_OW 263
24927: PUSH
24928: LD_INT 1
24930: EQUAL
24931: IFFALSE 25012
// begin driver := IsDrivenBy ( vehicle ) ;
24933: LD_ADDR_VAR 0 4
24937: PUSH
24938: LD_VAR 0 1
24942: PPUSH
24943: CALL_OW 311
24947: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24948: LD_VAR 0 4
24952: PPUSH
24953: LD_EXP 123
24957: PUSH
24958: LD_VAR 0 2
24962: ARRAY
24963: PUSH
24964: LD_INT 3
24966: ARRAY
24967: PPUSH
24968: LD_EXP 123
24972: PUSH
24973: LD_VAR 0 2
24977: ARRAY
24978: PUSH
24979: LD_INT 4
24981: ARRAY
24982: PPUSH
24983: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24987: LD_VAR 0 4
24991: PPUSH
24992: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24996: LD_VAR 0 4
25000: PPUSH
25001: LD_VAR 0 2
25005: PPUSH
25006: CALL_OW 180
// end else
25010: GO 25125
// if GetControl ( vehicle ) = control_remote then
25012: LD_VAR 0 1
25016: PPUSH
25017: CALL_OW 263
25021: PUSH
25022: LD_INT 2
25024: EQUAL
25025: IFFALSE 25086
// begin wait ( 0 0$2 ) ;
25027: LD_INT 70
25029: PPUSH
25030: CALL_OW 67
// if Connect ( vehicle ) then
25034: LD_VAR 0 1
25038: PPUSH
25039: CALL 37349 0 1
25043: IFFALSE 25084
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25045: LD_VAR 0 1
25049: PPUSH
25050: LD_EXP 123
25054: PUSH
25055: LD_VAR 0 2
25059: ARRAY
25060: PUSH
25061: LD_INT 3
25063: ARRAY
25064: PPUSH
25065: LD_EXP 123
25069: PUSH
25070: LD_VAR 0 2
25074: ARRAY
25075: PUSH
25076: LD_INT 4
25078: ARRAY
25079: PPUSH
25080: CALL_OW 171
// end else
25084: GO 25125
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25086: LD_VAR 0 1
25090: PPUSH
25091: LD_EXP 123
25095: PUSH
25096: LD_VAR 0 2
25100: ARRAY
25101: PUSH
25102: LD_INT 3
25104: ARRAY
25105: PPUSH
25106: LD_EXP 123
25110: PUSH
25111: LD_VAR 0 2
25115: ARRAY
25116: PUSH
25117: LD_INT 4
25119: ARRAY
25120: PPUSH
25121: CALL_OW 171
// end ; end ;
25125: LD_VAR 0 3
25129: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25130: LD_INT 0
25132: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25133: LD_VAR 0 1
25137: PUSH
25138: LD_INT 250
25140: EQUAL
25141: PUSH
25142: LD_VAR 0 2
25146: PPUSH
25147: CALL_OW 264
25151: PUSH
25152: LD_EXP 52
25156: EQUAL
25157: AND
25158: IFFALSE 25179
// MinerPlaceMine ( unit , x , y ) ;
25160: LD_VAR 0 2
25164: PPUSH
25165: LD_VAR 0 4
25169: PPUSH
25170: LD_VAR 0 5
25174: PPUSH
25175: CALL 27907 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25179: LD_VAR 0 1
25183: PUSH
25184: LD_INT 251
25186: EQUAL
25187: PUSH
25188: LD_VAR 0 2
25192: PPUSH
25193: CALL_OW 264
25197: PUSH
25198: LD_EXP 52
25202: EQUAL
25203: AND
25204: IFFALSE 25225
// MinerDetonateMine ( unit , x , y ) ;
25206: LD_VAR 0 2
25210: PPUSH
25211: LD_VAR 0 4
25215: PPUSH
25216: LD_VAR 0 5
25220: PPUSH
25221: CALL 28184 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25225: LD_VAR 0 1
25229: PUSH
25230: LD_INT 252
25232: EQUAL
25233: PUSH
25234: LD_VAR 0 2
25238: PPUSH
25239: CALL_OW 264
25243: PUSH
25244: LD_EXP 52
25248: EQUAL
25249: AND
25250: IFFALSE 25271
// MinerCreateMinefield ( unit , x , y ) ;
25252: LD_VAR 0 2
25256: PPUSH
25257: LD_VAR 0 4
25261: PPUSH
25262: LD_VAR 0 5
25266: PPUSH
25267: CALL 28601 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25271: LD_VAR 0 1
25275: PUSH
25276: LD_INT 253
25278: EQUAL
25279: PUSH
25280: LD_VAR 0 2
25284: PPUSH
25285: CALL_OW 257
25289: PUSH
25290: LD_INT 5
25292: EQUAL
25293: AND
25294: IFFALSE 25315
// ComBinocular ( unit , x , y ) ;
25296: LD_VAR 0 2
25300: PPUSH
25301: LD_VAR 0 4
25305: PPUSH
25306: LD_VAR 0 5
25310: PPUSH
25311: CALL 28972 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25315: LD_VAR 0 1
25319: PUSH
25320: LD_INT 254
25322: EQUAL
25323: PUSH
25324: LD_VAR 0 2
25328: PPUSH
25329: CALL_OW 264
25333: PUSH
25334: LD_EXP 47
25338: EQUAL
25339: AND
25340: PUSH
25341: LD_VAR 0 3
25345: PPUSH
25346: CALL_OW 263
25350: PUSH
25351: LD_INT 3
25353: EQUAL
25354: AND
25355: IFFALSE 25371
// HackDestroyVehicle ( unit , selectedUnit ) ;
25357: LD_VAR 0 2
25361: PPUSH
25362: LD_VAR 0 3
25366: PPUSH
25367: CALL 27267 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25371: LD_VAR 0 1
25375: PUSH
25376: LD_INT 255
25378: EQUAL
25379: PUSH
25380: LD_VAR 0 2
25384: PPUSH
25385: CALL_OW 264
25389: PUSH
25390: LD_INT 14
25392: PUSH
25393: LD_INT 53
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: IN
25400: AND
25401: PUSH
25402: LD_VAR 0 4
25406: PPUSH
25407: LD_VAR 0 5
25411: PPUSH
25412: CALL_OW 488
25416: AND
25417: IFFALSE 25441
// CutTreeXYR ( unit , x , y , 12 ) ;
25419: LD_VAR 0 2
25423: PPUSH
25424: LD_VAR 0 4
25428: PPUSH
25429: LD_VAR 0 5
25433: PPUSH
25434: LD_INT 12
25436: PPUSH
25437: CALL 25833 0 4
// if cmd = 256 then
25441: LD_VAR 0 1
25445: PUSH
25446: LD_INT 256
25448: EQUAL
25449: IFFALSE 25470
// SetFactoryWaypoint ( unit , x , y ) ;
25451: LD_VAR 0 2
25455: PPUSH
25456: LD_VAR 0 4
25460: PPUSH
25461: LD_VAR 0 5
25465: PPUSH
25466: CALL 25475 0 3
// end ;
25470: LD_VAR 0 6
25474: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25475: LD_INT 0
25477: PPUSH
25478: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25479: LD_VAR 0 1
25483: NOT
25484: PUSH
25485: LD_VAR 0 2
25489: PPUSH
25490: LD_VAR 0 3
25494: PPUSH
25495: CALL_OW 488
25499: NOT
25500: OR
25501: PUSH
25502: LD_VAR 0 1
25506: PPUSH
25507: CALL_OW 266
25511: PUSH
25512: LD_INT 3
25514: NONEQUAL
25515: PUSH
25516: LD_VAR 0 1
25520: PPUSH
25521: CALL_OW 247
25525: PUSH
25526: LD_INT 1
25528: EQUAL
25529: NOT
25530: AND
25531: OR
25532: IFFALSE 25536
// exit ;
25534: GO 25685
// if GetType ( factory ) = unit_human then
25536: LD_VAR 0 1
25540: PPUSH
25541: CALL_OW 247
25545: PUSH
25546: LD_INT 1
25548: EQUAL
25549: IFFALSE 25566
// factory := IsInUnit ( factory ) ;
25551: LD_ADDR_VAR 0 1
25555: PUSH
25556: LD_VAR 0 1
25560: PPUSH
25561: CALL_OW 310
25565: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25566: LD_VAR 0 1
25570: PPUSH
25571: CALL_OW 266
25575: PUSH
25576: LD_INT 3
25578: NONEQUAL
25579: IFFALSE 25583
// exit ;
25581: GO 25685
// if HexInfo ( x , y ) = factory then
25583: LD_VAR 0 2
25587: PPUSH
25588: LD_VAR 0 3
25592: PPUSH
25593: CALL_OW 428
25597: PUSH
25598: LD_VAR 0 1
25602: EQUAL
25603: IFFALSE 25630
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25605: LD_ADDR_EXP 123
25609: PUSH
25610: LD_EXP 123
25614: PPUSH
25615: LD_VAR 0 1
25619: PPUSH
25620: LD_INT 0
25622: PPUSH
25623: CALL_OW 1
25627: ST_TO_ADDR
25628: GO 25681
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25630: LD_ADDR_EXP 123
25634: PUSH
25635: LD_EXP 123
25639: PPUSH
25640: LD_VAR 0 1
25644: PPUSH
25645: LD_VAR 0 1
25649: PPUSH
25650: CALL_OW 255
25654: PUSH
25655: LD_VAR 0 1
25659: PUSH
25660: LD_VAR 0 2
25664: PUSH
25665: LD_VAR 0 3
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: PPUSH
25676: CALL_OW 1
25680: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25681: CALL 25690 0 0
// end ;
25685: LD_VAR 0 4
25689: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
25690: LD_INT 0
25692: PPUSH
25693: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25694: LD_STRING resetFactoryWaypoint();
25696: PPUSH
25697: CALL_OW 559
// if factoryWaypoints then
25701: LD_EXP 123
25705: IFFALSE 25828
// begin for i := 1 to factoryWaypoints do
25707: LD_ADDR_VAR 0 2
25711: PUSH
25712: DOUBLE
25713: LD_INT 1
25715: DEC
25716: ST_TO_ADDR
25717: LD_EXP 123
25721: PUSH
25722: FOR_TO
25723: IFFALSE 25826
// if factoryWaypoints [ i ] then
25725: LD_EXP 123
25729: PUSH
25730: LD_VAR 0 2
25734: ARRAY
25735: IFFALSE 25824
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
25737: LD_STRING setFactoryWaypointXY(
25739: PUSH
25740: LD_EXP 123
25744: PUSH
25745: LD_VAR 0 2
25749: ARRAY
25750: PUSH
25751: LD_INT 1
25753: ARRAY
25754: STR
25755: PUSH
25756: LD_STRING ,
25758: STR
25759: PUSH
25760: LD_EXP 123
25764: PUSH
25765: LD_VAR 0 2
25769: ARRAY
25770: PUSH
25771: LD_INT 2
25773: ARRAY
25774: STR
25775: PUSH
25776: LD_STRING ,
25778: STR
25779: PUSH
25780: LD_EXP 123
25784: PUSH
25785: LD_VAR 0 2
25789: ARRAY
25790: PUSH
25791: LD_INT 3
25793: ARRAY
25794: STR
25795: PUSH
25796: LD_STRING ,
25798: STR
25799: PUSH
25800: LD_EXP 123
25804: PUSH
25805: LD_VAR 0 2
25809: ARRAY
25810: PUSH
25811: LD_INT 4
25813: ARRAY
25814: STR
25815: PUSH
25816: LD_STRING )
25818: STR
25819: PPUSH
25820: CALL_OW 559
25824: GO 25722
25826: POP
25827: POP
// end ; end ;
25828: LD_VAR 0 1
25832: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25833: LD_INT 0
25835: PPUSH
25836: PPUSH
25837: PPUSH
25838: PPUSH
25839: PPUSH
25840: PPUSH
25841: PPUSH
25842: PPUSH
25843: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25844: LD_VAR 0 1
25848: NOT
25849: PUSH
25850: LD_VAR 0 2
25854: PPUSH
25855: LD_VAR 0 3
25859: PPUSH
25860: CALL_OW 488
25864: NOT
25865: OR
25866: PUSH
25867: LD_VAR 0 4
25871: NOT
25872: OR
25873: IFFALSE 25877
// exit ;
25875: GO 26217
// list := [ ] ;
25877: LD_ADDR_VAR 0 13
25881: PUSH
25882: EMPTY
25883: ST_TO_ADDR
// if x - r < 0 then
25884: LD_VAR 0 2
25888: PUSH
25889: LD_VAR 0 4
25893: MINUS
25894: PUSH
25895: LD_INT 0
25897: LESS
25898: IFFALSE 25910
// min_x := 0 else
25900: LD_ADDR_VAR 0 7
25904: PUSH
25905: LD_INT 0
25907: ST_TO_ADDR
25908: GO 25926
// min_x := x - r ;
25910: LD_ADDR_VAR 0 7
25914: PUSH
25915: LD_VAR 0 2
25919: PUSH
25920: LD_VAR 0 4
25924: MINUS
25925: ST_TO_ADDR
// if y - r < 0 then
25926: LD_VAR 0 3
25930: PUSH
25931: LD_VAR 0 4
25935: MINUS
25936: PUSH
25937: LD_INT 0
25939: LESS
25940: IFFALSE 25952
// min_y := 0 else
25942: LD_ADDR_VAR 0 8
25946: PUSH
25947: LD_INT 0
25949: ST_TO_ADDR
25950: GO 25968
// min_y := y - r ;
25952: LD_ADDR_VAR 0 8
25956: PUSH
25957: LD_VAR 0 3
25961: PUSH
25962: LD_VAR 0 4
25966: MINUS
25967: ST_TO_ADDR
// max_x := x + r ;
25968: LD_ADDR_VAR 0 9
25972: PUSH
25973: LD_VAR 0 2
25977: PUSH
25978: LD_VAR 0 4
25982: PLUS
25983: ST_TO_ADDR
// max_y := y + r ;
25984: LD_ADDR_VAR 0 10
25988: PUSH
25989: LD_VAR 0 3
25993: PUSH
25994: LD_VAR 0 4
25998: PLUS
25999: ST_TO_ADDR
// for _x = min_x to max_x do
26000: LD_ADDR_VAR 0 11
26004: PUSH
26005: DOUBLE
26006: LD_VAR 0 7
26010: DEC
26011: ST_TO_ADDR
26012: LD_VAR 0 9
26016: PUSH
26017: FOR_TO
26018: IFFALSE 26135
// for _y = min_y to max_y do
26020: LD_ADDR_VAR 0 12
26024: PUSH
26025: DOUBLE
26026: LD_VAR 0 8
26030: DEC
26031: ST_TO_ADDR
26032: LD_VAR 0 10
26036: PUSH
26037: FOR_TO
26038: IFFALSE 26131
// begin if not ValidHex ( _x , _y ) then
26040: LD_VAR 0 11
26044: PPUSH
26045: LD_VAR 0 12
26049: PPUSH
26050: CALL_OW 488
26054: NOT
26055: IFFALSE 26059
// continue ;
26057: GO 26037
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26059: LD_VAR 0 11
26063: PPUSH
26064: LD_VAR 0 12
26068: PPUSH
26069: CALL_OW 351
26073: PUSH
26074: LD_VAR 0 11
26078: PPUSH
26079: LD_VAR 0 12
26083: PPUSH
26084: CALL_OW 554
26088: AND
26089: IFFALSE 26129
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26091: LD_ADDR_VAR 0 13
26095: PUSH
26096: LD_VAR 0 13
26100: PPUSH
26101: LD_VAR 0 13
26105: PUSH
26106: LD_INT 1
26108: PLUS
26109: PPUSH
26110: LD_VAR 0 11
26114: PUSH
26115: LD_VAR 0 12
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PPUSH
26124: CALL_OW 2
26128: ST_TO_ADDR
// end ;
26129: GO 26037
26131: POP
26132: POP
26133: GO 26017
26135: POP
26136: POP
// if not list then
26137: LD_VAR 0 13
26141: NOT
26142: IFFALSE 26146
// exit ;
26144: GO 26217
// for i in list do
26146: LD_ADDR_VAR 0 6
26150: PUSH
26151: LD_VAR 0 13
26155: PUSH
26156: FOR_IN
26157: IFFALSE 26215
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26159: LD_VAR 0 1
26163: PPUSH
26164: LD_STRING M
26166: PUSH
26167: LD_VAR 0 6
26171: PUSH
26172: LD_INT 1
26174: ARRAY
26175: PUSH
26176: LD_VAR 0 6
26180: PUSH
26181: LD_INT 2
26183: ARRAY
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: PUSH
26206: EMPTY
26207: LIST
26208: PPUSH
26209: CALL_OW 447
26213: GO 26156
26215: POP
26216: POP
// end ;
26217: LD_VAR 0 5
26221: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26222: LD_EXP 124
26226: NOT
26227: IFFALSE 26277
26229: GO 26231
26231: DISABLE
// begin initHack := true ;
26232: LD_ADDR_EXP 124
26236: PUSH
26237: LD_INT 1
26239: ST_TO_ADDR
// hackTanks := [ ] ;
26240: LD_ADDR_EXP 125
26244: PUSH
26245: EMPTY
26246: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26247: LD_ADDR_EXP 126
26251: PUSH
26252: EMPTY
26253: ST_TO_ADDR
// hackLimit := 3 ;
26254: LD_ADDR_EXP 127
26258: PUSH
26259: LD_INT 3
26261: ST_TO_ADDR
// hackDist := 12 ;
26262: LD_ADDR_EXP 128
26266: PUSH
26267: LD_INT 12
26269: ST_TO_ADDR
// hackCounter := [ ] ;
26270: LD_ADDR_EXP 129
26274: PUSH
26275: EMPTY
26276: ST_TO_ADDR
// end ;
26277: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26278: LD_EXP 124
26282: PUSH
26283: LD_INT 34
26285: PUSH
26286: LD_EXP 47
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PPUSH
26295: CALL_OW 69
26299: AND
26300: IFFALSE 26555
26302: GO 26304
26304: DISABLE
26305: LD_INT 0
26307: PPUSH
26308: PPUSH
// begin enable ;
26309: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26310: LD_ADDR_VAR 0 1
26314: PUSH
26315: LD_INT 34
26317: PUSH
26318: LD_EXP 47
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PPUSH
26327: CALL_OW 69
26331: PUSH
26332: FOR_IN
26333: IFFALSE 26553
// begin if not i in hackTanks then
26335: LD_VAR 0 1
26339: PUSH
26340: LD_EXP 125
26344: IN
26345: NOT
26346: IFFALSE 26429
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26348: LD_ADDR_EXP 125
26352: PUSH
26353: LD_EXP 125
26357: PPUSH
26358: LD_EXP 125
26362: PUSH
26363: LD_INT 1
26365: PLUS
26366: PPUSH
26367: LD_VAR 0 1
26371: PPUSH
26372: CALL_OW 1
26376: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26377: LD_ADDR_EXP 126
26381: PUSH
26382: LD_EXP 126
26386: PPUSH
26387: LD_EXP 126
26391: PUSH
26392: LD_INT 1
26394: PLUS
26395: PPUSH
26396: EMPTY
26397: PPUSH
26398: CALL_OW 1
26402: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26403: LD_ADDR_EXP 129
26407: PUSH
26408: LD_EXP 129
26412: PPUSH
26413: LD_EXP 129
26417: PUSH
26418: LD_INT 1
26420: PLUS
26421: PPUSH
26422: EMPTY
26423: PPUSH
26424: CALL_OW 1
26428: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26429: LD_VAR 0 1
26433: PPUSH
26434: CALL_OW 302
26438: NOT
26439: IFFALSE 26452
// begin HackUnlinkAll ( i ) ;
26441: LD_VAR 0 1
26445: PPUSH
26446: CALL 26558 0 1
// continue ;
26450: GO 26332
// end ; HackCheckCapturedStatus ( i ) ;
26452: LD_VAR 0 1
26456: PPUSH
26457: CALL 27001 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26461: LD_ADDR_VAR 0 2
26465: PUSH
26466: LD_INT 81
26468: PUSH
26469: LD_VAR 0 1
26473: PPUSH
26474: CALL_OW 255
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 33
26485: PUSH
26486: LD_INT 3
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 91
26495: PUSH
26496: LD_VAR 0 1
26500: PUSH
26501: LD_EXP 128
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 50
26513: PUSH
26514: EMPTY
26515: LIST
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: PPUSH
26523: CALL_OW 69
26527: ST_TO_ADDR
// if not tmp then
26528: LD_VAR 0 2
26532: NOT
26533: IFFALSE 26537
// continue ;
26535: GO 26332
// HackLink ( i , tmp ) ;
26537: LD_VAR 0 1
26541: PPUSH
26542: LD_VAR 0 2
26546: PPUSH
26547: CALL 26694 0 2
// end ;
26551: GO 26332
26553: POP
26554: POP
// end ;
26555: PPOPN 2
26557: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26558: LD_INT 0
26560: PPUSH
26561: PPUSH
26562: PPUSH
// if not hack in hackTanks then
26563: LD_VAR 0 1
26567: PUSH
26568: LD_EXP 125
26572: IN
26573: NOT
26574: IFFALSE 26578
// exit ;
26576: GO 26689
// index := GetElementIndex ( hackTanks , hack ) ;
26578: LD_ADDR_VAR 0 4
26582: PUSH
26583: LD_EXP 125
26587: PPUSH
26588: LD_VAR 0 1
26592: PPUSH
26593: CALL 34163 0 2
26597: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26598: LD_EXP 126
26602: PUSH
26603: LD_VAR 0 4
26607: ARRAY
26608: IFFALSE 26689
// begin for i in hackTanksCaptured [ index ] do
26610: LD_ADDR_VAR 0 3
26614: PUSH
26615: LD_EXP 126
26619: PUSH
26620: LD_VAR 0 4
26624: ARRAY
26625: PUSH
26626: FOR_IN
26627: IFFALSE 26653
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26629: LD_VAR 0 3
26633: PUSH
26634: LD_INT 1
26636: ARRAY
26637: PPUSH
26638: LD_VAR 0 3
26642: PUSH
26643: LD_INT 2
26645: ARRAY
26646: PPUSH
26647: CALL_OW 235
26651: GO 26626
26653: POP
26654: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26655: LD_ADDR_EXP 126
26659: PUSH
26660: LD_EXP 126
26664: PPUSH
26665: LD_VAR 0 4
26669: PPUSH
26670: EMPTY
26671: PPUSH
26672: CALL_OW 1
26676: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26677: LD_VAR 0 1
26681: PPUSH
26682: LD_INT 0
26684: PPUSH
26685: CALL_OW 505
// end ; end ;
26689: LD_VAR 0 2
26693: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26694: LD_INT 0
26696: PPUSH
26697: PPUSH
26698: PPUSH
// if not hack in hackTanks or not vehicles then
26699: LD_VAR 0 1
26703: PUSH
26704: LD_EXP 125
26708: IN
26709: NOT
26710: PUSH
26711: LD_VAR 0 2
26715: NOT
26716: OR
26717: IFFALSE 26721
// exit ;
26719: GO 26996
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26721: LD_ADDR_VAR 0 2
26725: PUSH
26726: LD_VAR 0 1
26730: PPUSH
26731: LD_VAR 0 2
26735: PPUSH
26736: LD_INT 1
26738: PPUSH
26739: LD_INT 1
26741: PPUSH
26742: CALL 34813 0 4
26746: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26747: LD_ADDR_VAR 0 5
26751: PUSH
26752: LD_EXP 125
26756: PPUSH
26757: LD_VAR 0 1
26761: PPUSH
26762: CALL 34163 0 2
26766: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26767: LD_EXP 126
26771: PUSH
26772: LD_VAR 0 5
26776: ARRAY
26777: PUSH
26778: LD_EXP 127
26782: LESS
26783: IFFALSE 26972
// begin for i := 1 to vehicles do
26785: LD_ADDR_VAR 0 4
26789: PUSH
26790: DOUBLE
26791: LD_INT 1
26793: DEC
26794: ST_TO_ADDR
26795: LD_VAR 0 2
26799: PUSH
26800: FOR_TO
26801: IFFALSE 26970
// begin if hackTanksCaptured [ index ] = hackLimit then
26803: LD_EXP 126
26807: PUSH
26808: LD_VAR 0 5
26812: ARRAY
26813: PUSH
26814: LD_EXP 127
26818: EQUAL
26819: IFFALSE 26823
// break ;
26821: GO 26970
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26823: LD_ADDR_EXP 129
26827: PUSH
26828: LD_EXP 129
26832: PPUSH
26833: LD_VAR 0 5
26837: PPUSH
26838: LD_EXP 129
26842: PUSH
26843: LD_VAR 0 5
26847: ARRAY
26848: PUSH
26849: LD_INT 1
26851: PLUS
26852: PPUSH
26853: CALL_OW 1
26857: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26858: LD_ADDR_EXP 126
26862: PUSH
26863: LD_EXP 126
26867: PPUSH
26868: LD_VAR 0 5
26872: PUSH
26873: LD_EXP 126
26877: PUSH
26878: LD_VAR 0 5
26882: ARRAY
26883: PUSH
26884: LD_INT 1
26886: PLUS
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PPUSH
26892: LD_VAR 0 2
26896: PUSH
26897: LD_VAR 0 4
26901: ARRAY
26902: PUSH
26903: LD_VAR 0 2
26907: PUSH
26908: LD_VAR 0 4
26912: ARRAY
26913: PPUSH
26914: CALL_OW 255
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PPUSH
26923: CALL 34378 0 3
26927: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26928: LD_VAR 0 2
26932: PUSH
26933: LD_VAR 0 4
26937: ARRAY
26938: PPUSH
26939: LD_VAR 0 1
26943: PPUSH
26944: CALL_OW 255
26948: PPUSH
26949: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26953: LD_VAR 0 2
26957: PUSH
26958: LD_VAR 0 4
26962: ARRAY
26963: PPUSH
26964: CALL_OW 141
// end ;
26968: GO 26800
26970: POP
26971: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26972: LD_VAR 0 1
26976: PPUSH
26977: LD_EXP 126
26981: PUSH
26982: LD_VAR 0 5
26986: ARRAY
26987: PUSH
26988: LD_INT 0
26990: PLUS
26991: PPUSH
26992: CALL_OW 505
// end ;
26996: LD_VAR 0 3
27000: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27001: LD_INT 0
27003: PPUSH
27004: PPUSH
27005: PPUSH
27006: PPUSH
// if not hack in hackTanks then
27007: LD_VAR 0 1
27011: PUSH
27012: LD_EXP 125
27016: IN
27017: NOT
27018: IFFALSE 27022
// exit ;
27020: GO 27262
// index := GetElementIndex ( hackTanks , hack ) ;
27022: LD_ADDR_VAR 0 4
27026: PUSH
27027: LD_EXP 125
27031: PPUSH
27032: LD_VAR 0 1
27036: PPUSH
27037: CALL 34163 0 2
27041: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27042: LD_ADDR_VAR 0 3
27046: PUSH
27047: DOUBLE
27048: LD_EXP 126
27052: PUSH
27053: LD_VAR 0 4
27057: ARRAY
27058: INC
27059: ST_TO_ADDR
27060: LD_INT 1
27062: PUSH
27063: FOR_DOWNTO
27064: IFFALSE 27236
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27066: LD_ADDR_VAR 0 5
27070: PUSH
27071: LD_EXP 126
27075: PUSH
27076: LD_VAR 0 4
27080: ARRAY
27081: PUSH
27082: LD_VAR 0 3
27086: ARRAY
27087: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27088: LD_VAR 0 5
27092: PUSH
27093: LD_INT 1
27095: ARRAY
27096: PPUSH
27097: CALL_OW 302
27101: NOT
27102: PUSH
27103: LD_VAR 0 5
27107: PUSH
27108: LD_INT 1
27110: ARRAY
27111: PPUSH
27112: CALL_OW 255
27116: PUSH
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 255
27126: NONEQUAL
27127: OR
27128: IFFALSE 27234
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27130: LD_VAR 0 5
27134: PUSH
27135: LD_INT 1
27137: ARRAY
27138: PPUSH
27139: CALL_OW 305
27143: PUSH
27144: LD_VAR 0 5
27148: PUSH
27149: LD_INT 1
27151: ARRAY
27152: PPUSH
27153: CALL_OW 255
27157: PUSH
27158: LD_VAR 0 1
27162: PPUSH
27163: CALL_OW 255
27167: EQUAL
27168: AND
27169: IFFALSE 27193
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27171: LD_VAR 0 5
27175: PUSH
27176: LD_INT 1
27178: ARRAY
27179: PPUSH
27180: LD_VAR 0 5
27184: PUSH
27185: LD_INT 2
27187: ARRAY
27188: PPUSH
27189: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27193: LD_ADDR_EXP 126
27197: PUSH
27198: LD_EXP 126
27202: PPUSH
27203: LD_VAR 0 4
27207: PPUSH
27208: LD_EXP 126
27212: PUSH
27213: LD_VAR 0 4
27217: ARRAY
27218: PPUSH
27219: LD_VAR 0 3
27223: PPUSH
27224: CALL_OW 3
27228: PPUSH
27229: CALL_OW 1
27233: ST_TO_ADDR
// end ; end ;
27234: GO 27063
27236: POP
27237: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27238: LD_VAR 0 1
27242: PPUSH
27243: LD_EXP 126
27247: PUSH
27248: LD_VAR 0 4
27252: ARRAY
27253: PUSH
27254: LD_INT 0
27256: PLUS
27257: PPUSH
27258: CALL_OW 505
// end ;
27262: LD_VAR 0 2
27266: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27267: LD_INT 0
27269: PPUSH
27270: PPUSH
27271: PPUSH
27272: PPUSH
// if not hack in hackTanks then
27273: LD_VAR 0 1
27277: PUSH
27278: LD_EXP 125
27282: IN
27283: NOT
27284: IFFALSE 27288
// exit ;
27286: GO 27373
// index := GetElementIndex ( hackTanks , hack ) ;
27288: LD_ADDR_VAR 0 5
27292: PUSH
27293: LD_EXP 125
27297: PPUSH
27298: LD_VAR 0 1
27302: PPUSH
27303: CALL 34163 0 2
27307: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27308: LD_ADDR_VAR 0 4
27312: PUSH
27313: DOUBLE
27314: LD_INT 1
27316: DEC
27317: ST_TO_ADDR
27318: LD_EXP 126
27322: PUSH
27323: LD_VAR 0 5
27327: ARRAY
27328: PUSH
27329: FOR_TO
27330: IFFALSE 27371
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27332: LD_EXP 126
27336: PUSH
27337: LD_VAR 0 5
27341: ARRAY
27342: PUSH
27343: LD_VAR 0 4
27347: ARRAY
27348: PUSH
27349: LD_INT 1
27351: ARRAY
27352: PUSH
27353: LD_VAR 0 2
27357: EQUAL
27358: IFFALSE 27369
// KillUnit ( vehicle ) ;
27360: LD_VAR 0 2
27364: PPUSH
27365: CALL_OW 66
27369: GO 27329
27371: POP
27372: POP
// end ;
27373: LD_VAR 0 3
27377: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27378: LD_EXP 130
27382: NOT
27383: IFFALSE 27418
27385: GO 27387
27387: DISABLE
// begin initMiner := true ;
27388: LD_ADDR_EXP 130
27392: PUSH
27393: LD_INT 1
27395: ST_TO_ADDR
// minersList := [ ] ;
27396: LD_ADDR_EXP 131
27400: PUSH
27401: EMPTY
27402: ST_TO_ADDR
// minerMinesList := [ ] ;
27403: LD_ADDR_EXP 132
27407: PUSH
27408: EMPTY
27409: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27410: LD_ADDR_EXP 133
27414: PUSH
27415: LD_INT 5
27417: ST_TO_ADDR
// end ;
27418: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27419: LD_EXP 130
27423: PUSH
27424: LD_INT 34
27426: PUSH
27427: LD_EXP 52
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PPUSH
27436: CALL_OW 69
27440: AND
27441: IFFALSE 27904
27443: GO 27445
27445: DISABLE
27446: LD_INT 0
27448: PPUSH
27449: PPUSH
27450: PPUSH
27451: PPUSH
// begin enable ;
27452: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27453: LD_ADDR_VAR 0 1
27457: PUSH
27458: LD_INT 34
27460: PUSH
27461: LD_EXP 52
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PPUSH
27470: CALL_OW 69
27474: PUSH
27475: FOR_IN
27476: IFFALSE 27548
// begin if not i in minersList then
27478: LD_VAR 0 1
27482: PUSH
27483: LD_EXP 131
27487: IN
27488: NOT
27489: IFFALSE 27546
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27491: LD_ADDR_EXP 131
27495: PUSH
27496: LD_EXP 131
27500: PPUSH
27501: LD_EXP 131
27505: PUSH
27506: LD_INT 1
27508: PLUS
27509: PPUSH
27510: LD_VAR 0 1
27514: PPUSH
27515: CALL_OW 1
27519: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27520: LD_ADDR_EXP 132
27524: PUSH
27525: LD_EXP 132
27529: PPUSH
27530: LD_EXP 132
27534: PUSH
27535: LD_INT 1
27537: PLUS
27538: PPUSH
27539: EMPTY
27540: PPUSH
27541: CALL_OW 1
27545: ST_TO_ADDR
// end end ;
27546: GO 27475
27548: POP
27549: POP
// for i := minerMinesList downto 1 do
27550: LD_ADDR_VAR 0 1
27554: PUSH
27555: DOUBLE
27556: LD_EXP 132
27560: INC
27561: ST_TO_ADDR
27562: LD_INT 1
27564: PUSH
27565: FOR_DOWNTO
27566: IFFALSE 27902
// begin if IsLive ( minersList [ i ] ) then
27568: LD_EXP 131
27572: PUSH
27573: LD_VAR 0 1
27577: ARRAY
27578: PPUSH
27579: CALL_OW 300
27583: IFFALSE 27611
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27585: LD_EXP 131
27589: PUSH
27590: LD_VAR 0 1
27594: ARRAY
27595: PPUSH
27596: LD_EXP 132
27600: PUSH
27601: LD_VAR 0 1
27605: ARRAY
27606: PPUSH
27607: CALL_OW 505
// if not minerMinesList [ i ] then
27611: LD_EXP 132
27615: PUSH
27616: LD_VAR 0 1
27620: ARRAY
27621: NOT
27622: IFFALSE 27626
// continue ;
27624: GO 27565
// for j := minerMinesList [ i ] downto 1 do
27626: LD_ADDR_VAR 0 2
27630: PUSH
27631: DOUBLE
27632: LD_EXP 132
27636: PUSH
27637: LD_VAR 0 1
27641: ARRAY
27642: INC
27643: ST_TO_ADDR
27644: LD_INT 1
27646: PUSH
27647: FOR_DOWNTO
27648: IFFALSE 27898
// begin side := GetSide ( minersList [ i ] ) ;
27650: LD_ADDR_VAR 0 3
27654: PUSH
27655: LD_EXP 131
27659: PUSH
27660: LD_VAR 0 1
27664: ARRAY
27665: PPUSH
27666: CALL_OW 255
27670: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27671: LD_ADDR_VAR 0 4
27675: PUSH
27676: LD_EXP 132
27680: PUSH
27681: LD_VAR 0 1
27685: ARRAY
27686: PUSH
27687: LD_VAR 0 2
27691: ARRAY
27692: PUSH
27693: LD_INT 1
27695: ARRAY
27696: PPUSH
27697: LD_EXP 132
27701: PUSH
27702: LD_VAR 0 1
27706: ARRAY
27707: PUSH
27708: LD_VAR 0 2
27712: ARRAY
27713: PUSH
27714: LD_INT 2
27716: ARRAY
27717: PPUSH
27718: CALL_OW 428
27722: ST_TO_ADDR
// if not tmp then
27723: LD_VAR 0 4
27727: NOT
27728: IFFALSE 27732
// continue ;
27730: GO 27647
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27732: LD_VAR 0 4
27736: PUSH
27737: LD_INT 81
27739: PUSH
27740: LD_VAR 0 3
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PPUSH
27749: CALL_OW 69
27753: IN
27754: PUSH
27755: LD_EXP 132
27759: PUSH
27760: LD_VAR 0 1
27764: ARRAY
27765: PUSH
27766: LD_VAR 0 2
27770: ARRAY
27771: PUSH
27772: LD_INT 1
27774: ARRAY
27775: PPUSH
27776: LD_EXP 132
27780: PUSH
27781: LD_VAR 0 1
27785: ARRAY
27786: PUSH
27787: LD_VAR 0 2
27791: ARRAY
27792: PUSH
27793: LD_INT 2
27795: ARRAY
27796: PPUSH
27797: CALL_OW 458
27801: AND
27802: IFFALSE 27896
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27804: LD_EXP 132
27808: PUSH
27809: LD_VAR 0 1
27813: ARRAY
27814: PUSH
27815: LD_VAR 0 2
27819: ARRAY
27820: PUSH
27821: LD_INT 1
27823: ARRAY
27824: PPUSH
27825: LD_EXP 132
27829: PUSH
27830: LD_VAR 0 1
27834: ARRAY
27835: PUSH
27836: LD_VAR 0 2
27840: ARRAY
27841: PUSH
27842: LD_INT 2
27844: ARRAY
27845: PPUSH
27846: LD_VAR 0 3
27850: PPUSH
27851: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27855: LD_ADDR_EXP 132
27859: PUSH
27860: LD_EXP 132
27864: PPUSH
27865: LD_VAR 0 1
27869: PPUSH
27870: LD_EXP 132
27874: PUSH
27875: LD_VAR 0 1
27879: ARRAY
27880: PPUSH
27881: LD_VAR 0 2
27885: PPUSH
27886: CALL_OW 3
27890: PPUSH
27891: CALL_OW 1
27895: ST_TO_ADDR
// end ; end ;
27896: GO 27647
27898: POP
27899: POP
// end ;
27900: GO 27565
27902: POP
27903: POP
// end ;
27904: PPOPN 4
27906: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27907: LD_INT 0
27909: PPUSH
27910: PPUSH
// result := false ;
27911: LD_ADDR_VAR 0 4
27915: PUSH
27916: LD_INT 0
27918: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27919: LD_VAR 0 1
27923: PPUSH
27924: CALL_OW 264
27928: PUSH
27929: LD_EXP 52
27933: EQUAL
27934: NOT
27935: IFFALSE 27939
// exit ;
27937: GO 28179
// index := GetElementIndex ( minersList , unit ) ;
27939: LD_ADDR_VAR 0 5
27943: PUSH
27944: LD_EXP 131
27948: PPUSH
27949: LD_VAR 0 1
27953: PPUSH
27954: CALL 34163 0 2
27958: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27959: LD_EXP 132
27963: PUSH
27964: LD_VAR 0 5
27968: ARRAY
27969: PUSH
27970: LD_EXP 133
27974: GREATEREQUAL
27975: IFFALSE 27979
// exit ;
27977: GO 28179
// ComMoveXY ( unit , x , y ) ;
27979: LD_VAR 0 1
27983: PPUSH
27984: LD_VAR 0 2
27988: PPUSH
27989: LD_VAR 0 3
27993: PPUSH
27994: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27998: LD_INT 35
28000: PPUSH
28001: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28005: LD_VAR 0 1
28009: PPUSH
28010: LD_VAR 0 2
28014: PPUSH
28015: LD_VAR 0 3
28019: PPUSH
28020: CALL 64882 0 3
28024: NOT
28025: PUSH
28026: LD_VAR 0 1
28030: PPUSH
28031: CALL_OW 314
28035: AND
28036: IFFALSE 28040
// exit ;
28038: GO 28179
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28040: LD_VAR 0 2
28044: PPUSH
28045: LD_VAR 0 3
28049: PPUSH
28050: CALL_OW 428
28054: PUSH
28055: LD_VAR 0 1
28059: EQUAL
28060: PUSH
28061: LD_VAR 0 1
28065: PPUSH
28066: CALL_OW 314
28070: NOT
28071: AND
28072: IFFALSE 27998
// PlaySoundXY ( x , y , PlantMine ) ;
28074: LD_VAR 0 2
28078: PPUSH
28079: LD_VAR 0 3
28083: PPUSH
28084: LD_STRING PlantMine
28086: PPUSH
28087: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28091: LD_VAR 0 2
28095: PPUSH
28096: LD_VAR 0 3
28100: PPUSH
28101: LD_VAR 0 1
28105: PPUSH
28106: CALL_OW 255
28110: PPUSH
28111: LD_INT 0
28113: PPUSH
28114: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28118: LD_ADDR_EXP 132
28122: PUSH
28123: LD_EXP 132
28127: PPUSH
28128: LD_VAR 0 5
28132: PUSH
28133: LD_EXP 132
28137: PUSH
28138: LD_VAR 0 5
28142: ARRAY
28143: PUSH
28144: LD_INT 1
28146: PLUS
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PPUSH
28152: LD_VAR 0 2
28156: PUSH
28157: LD_VAR 0 3
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PPUSH
28166: CALL 34378 0 3
28170: ST_TO_ADDR
// result := true ;
28171: LD_ADDR_VAR 0 4
28175: PUSH
28176: LD_INT 1
28178: ST_TO_ADDR
// end ;
28179: LD_VAR 0 4
28183: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28184: LD_INT 0
28186: PPUSH
28187: PPUSH
28188: PPUSH
// if not unit in minersList then
28189: LD_VAR 0 1
28193: PUSH
28194: LD_EXP 131
28198: IN
28199: NOT
28200: IFFALSE 28204
// exit ;
28202: GO 28596
// index := GetElementIndex ( minersList , unit ) ;
28204: LD_ADDR_VAR 0 6
28208: PUSH
28209: LD_EXP 131
28213: PPUSH
28214: LD_VAR 0 1
28218: PPUSH
28219: CALL 34163 0 2
28223: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28224: LD_ADDR_VAR 0 5
28228: PUSH
28229: DOUBLE
28230: LD_EXP 132
28234: PUSH
28235: LD_VAR 0 6
28239: ARRAY
28240: INC
28241: ST_TO_ADDR
28242: LD_INT 1
28244: PUSH
28245: FOR_DOWNTO
28246: IFFALSE 28407
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28248: LD_EXP 132
28252: PUSH
28253: LD_VAR 0 6
28257: ARRAY
28258: PUSH
28259: LD_VAR 0 5
28263: ARRAY
28264: PUSH
28265: LD_INT 1
28267: ARRAY
28268: PUSH
28269: LD_VAR 0 2
28273: EQUAL
28274: PUSH
28275: LD_EXP 132
28279: PUSH
28280: LD_VAR 0 6
28284: ARRAY
28285: PUSH
28286: LD_VAR 0 5
28290: ARRAY
28291: PUSH
28292: LD_INT 2
28294: ARRAY
28295: PUSH
28296: LD_VAR 0 3
28300: EQUAL
28301: AND
28302: IFFALSE 28405
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28304: LD_EXP 132
28308: PUSH
28309: LD_VAR 0 6
28313: ARRAY
28314: PUSH
28315: LD_VAR 0 5
28319: ARRAY
28320: PUSH
28321: LD_INT 1
28323: ARRAY
28324: PPUSH
28325: LD_EXP 132
28329: PUSH
28330: LD_VAR 0 6
28334: ARRAY
28335: PUSH
28336: LD_VAR 0 5
28340: ARRAY
28341: PUSH
28342: LD_INT 2
28344: ARRAY
28345: PPUSH
28346: LD_VAR 0 1
28350: PPUSH
28351: CALL_OW 255
28355: PPUSH
28356: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28360: LD_ADDR_EXP 132
28364: PUSH
28365: LD_EXP 132
28369: PPUSH
28370: LD_VAR 0 6
28374: PPUSH
28375: LD_EXP 132
28379: PUSH
28380: LD_VAR 0 6
28384: ARRAY
28385: PPUSH
28386: LD_VAR 0 5
28390: PPUSH
28391: CALL_OW 3
28395: PPUSH
28396: CALL_OW 1
28400: ST_TO_ADDR
// exit ;
28401: POP
28402: POP
28403: GO 28596
// end ; end ;
28405: GO 28245
28407: POP
28408: POP
// for i := minerMinesList [ index ] downto 1 do
28409: LD_ADDR_VAR 0 5
28413: PUSH
28414: DOUBLE
28415: LD_EXP 132
28419: PUSH
28420: LD_VAR 0 6
28424: ARRAY
28425: INC
28426: ST_TO_ADDR
28427: LD_INT 1
28429: PUSH
28430: FOR_DOWNTO
28431: IFFALSE 28594
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28433: LD_EXP 132
28437: PUSH
28438: LD_VAR 0 6
28442: ARRAY
28443: PUSH
28444: LD_VAR 0 5
28448: ARRAY
28449: PUSH
28450: LD_INT 1
28452: ARRAY
28453: PPUSH
28454: LD_EXP 132
28458: PUSH
28459: LD_VAR 0 6
28463: ARRAY
28464: PUSH
28465: LD_VAR 0 5
28469: ARRAY
28470: PUSH
28471: LD_INT 2
28473: ARRAY
28474: PPUSH
28475: LD_VAR 0 2
28479: PPUSH
28480: LD_VAR 0 3
28484: PPUSH
28485: CALL_OW 298
28489: PUSH
28490: LD_INT 6
28492: LESS
28493: IFFALSE 28592
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28495: LD_EXP 132
28499: PUSH
28500: LD_VAR 0 6
28504: ARRAY
28505: PUSH
28506: LD_VAR 0 5
28510: ARRAY
28511: PUSH
28512: LD_INT 1
28514: ARRAY
28515: PPUSH
28516: LD_EXP 132
28520: PUSH
28521: LD_VAR 0 6
28525: ARRAY
28526: PUSH
28527: LD_VAR 0 5
28531: ARRAY
28532: PUSH
28533: LD_INT 2
28535: ARRAY
28536: PPUSH
28537: LD_VAR 0 1
28541: PPUSH
28542: CALL_OW 255
28546: PPUSH
28547: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28551: LD_ADDR_EXP 132
28555: PUSH
28556: LD_EXP 132
28560: PPUSH
28561: LD_VAR 0 6
28565: PPUSH
28566: LD_EXP 132
28570: PUSH
28571: LD_VAR 0 6
28575: ARRAY
28576: PPUSH
28577: LD_VAR 0 5
28581: PPUSH
28582: CALL_OW 3
28586: PPUSH
28587: CALL_OW 1
28591: ST_TO_ADDR
// end ; end ;
28592: GO 28430
28594: POP
28595: POP
// end ;
28596: LD_VAR 0 4
28600: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28601: LD_INT 0
28603: PPUSH
28604: PPUSH
28605: PPUSH
28606: PPUSH
28607: PPUSH
28608: PPUSH
28609: PPUSH
28610: PPUSH
28611: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28612: LD_VAR 0 1
28616: PPUSH
28617: CALL_OW 264
28621: PUSH
28622: LD_EXP 52
28626: EQUAL
28627: NOT
28628: PUSH
28629: LD_VAR 0 1
28633: PUSH
28634: LD_EXP 131
28638: IN
28639: NOT
28640: OR
28641: IFFALSE 28645
// exit ;
28643: GO 28967
// index := GetElementIndex ( minersList , unit ) ;
28645: LD_ADDR_VAR 0 6
28649: PUSH
28650: LD_EXP 131
28654: PPUSH
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL 34163 0 2
28664: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28665: LD_ADDR_VAR 0 8
28669: PUSH
28670: LD_EXP 133
28674: PUSH
28675: LD_EXP 132
28679: PUSH
28680: LD_VAR 0 6
28684: ARRAY
28685: MINUS
28686: ST_TO_ADDR
// if not minesFreeAmount then
28687: LD_VAR 0 8
28691: NOT
28692: IFFALSE 28696
// exit ;
28694: GO 28967
// tmp := [ ] ;
28696: LD_ADDR_VAR 0 7
28700: PUSH
28701: EMPTY
28702: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28703: LD_ADDR_VAR 0 5
28707: PUSH
28708: DOUBLE
28709: LD_INT 1
28711: DEC
28712: ST_TO_ADDR
28713: LD_VAR 0 8
28717: PUSH
28718: FOR_TO
28719: IFFALSE 28914
// begin _d := rand ( 0 , 5 ) ;
28721: LD_ADDR_VAR 0 11
28725: PUSH
28726: LD_INT 0
28728: PPUSH
28729: LD_INT 5
28731: PPUSH
28732: CALL_OW 12
28736: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28737: LD_ADDR_VAR 0 12
28741: PUSH
28742: LD_INT 2
28744: PPUSH
28745: LD_INT 6
28747: PPUSH
28748: CALL_OW 12
28752: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28753: LD_ADDR_VAR 0 9
28757: PUSH
28758: LD_VAR 0 2
28762: PPUSH
28763: LD_VAR 0 11
28767: PPUSH
28768: LD_VAR 0 12
28772: PPUSH
28773: CALL_OW 272
28777: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28778: LD_ADDR_VAR 0 10
28782: PUSH
28783: LD_VAR 0 3
28787: PPUSH
28788: LD_VAR 0 11
28792: PPUSH
28793: LD_VAR 0 12
28797: PPUSH
28798: CALL_OW 273
28802: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28803: LD_VAR 0 9
28807: PPUSH
28808: LD_VAR 0 10
28812: PPUSH
28813: CALL_OW 488
28817: PUSH
28818: LD_VAR 0 9
28822: PUSH
28823: LD_VAR 0 10
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_VAR 0 7
28836: IN
28837: NOT
28838: AND
28839: PUSH
28840: LD_VAR 0 9
28844: PPUSH
28845: LD_VAR 0 10
28849: PPUSH
28850: CALL_OW 458
28854: NOT
28855: AND
28856: IFFALSE 28898
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28858: LD_ADDR_VAR 0 7
28862: PUSH
28863: LD_VAR 0 7
28867: PPUSH
28868: LD_VAR 0 7
28872: PUSH
28873: LD_INT 1
28875: PLUS
28876: PPUSH
28877: LD_VAR 0 9
28881: PUSH
28882: LD_VAR 0 10
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PPUSH
28891: CALL_OW 1
28895: ST_TO_ADDR
28896: GO 28912
// i := i - 1 ;
28898: LD_ADDR_VAR 0 5
28902: PUSH
28903: LD_VAR 0 5
28907: PUSH
28908: LD_INT 1
28910: MINUS
28911: ST_TO_ADDR
// end ;
28912: GO 28718
28914: POP
28915: POP
// for i in tmp do
28916: LD_ADDR_VAR 0 5
28920: PUSH
28921: LD_VAR 0 7
28925: PUSH
28926: FOR_IN
28927: IFFALSE 28965
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28929: LD_VAR 0 1
28933: PPUSH
28934: LD_VAR 0 5
28938: PUSH
28939: LD_INT 1
28941: ARRAY
28942: PPUSH
28943: LD_VAR 0 5
28947: PUSH
28948: LD_INT 2
28950: ARRAY
28951: PPUSH
28952: CALL 27907 0 3
28956: NOT
28957: IFFALSE 28963
// exit ;
28959: POP
28960: POP
28961: GO 28967
28963: GO 28926
28965: POP
28966: POP
// end ;
28967: LD_VAR 0 4
28971: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28972: LD_INT 0
28974: PPUSH
28975: PPUSH
28976: PPUSH
28977: PPUSH
28978: PPUSH
28979: PPUSH
28980: PPUSH
// if not GetClass ( unit ) = class_sniper then
28981: LD_VAR 0 1
28985: PPUSH
28986: CALL_OW 257
28990: PUSH
28991: LD_INT 5
28993: EQUAL
28994: NOT
28995: IFFALSE 28999
// exit ;
28997: GO 29387
// dist := 8 ;
28999: LD_ADDR_VAR 0 5
29003: PUSH
29004: LD_INT 8
29006: ST_TO_ADDR
// viewRange := 12 ;
29007: LD_ADDR_VAR 0 7
29011: PUSH
29012: LD_INT 12
29014: ST_TO_ADDR
// side := GetSide ( unit ) ;
29015: LD_ADDR_VAR 0 6
29019: PUSH
29020: LD_VAR 0 1
29024: PPUSH
29025: CALL_OW 255
29029: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29030: LD_INT 61
29032: PPUSH
29033: LD_VAR 0 6
29037: PPUSH
29038: CALL_OW 321
29042: PUSH
29043: LD_INT 2
29045: EQUAL
29046: IFFALSE 29056
// viewRange := 16 ;
29048: LD_ADDR_VAR 0 7
29052: PUSH
29053: LD_INT 16
29055: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29056: LD_VAR 0 1
29060: PPUSH
29061: LD_VAR 0 2
29065: PPUSH
29066: LD_VAR 0 3
29070: PPUSH
29071: CALL_OW 297
29075: PUSH
29076: LD_VAR 0 5
29080: GREATER
29081: IFFALSE 29160
// begin ComMoveXY ( unit , x , y ) ;
29083: LD_VAR 0 1
29087: PPUSH
29088: LD_VAR 0 2
29092: PPUSH
29093: LD_VAR 0 3
29097: PPUSH
29098: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29102: LD_INT 35
29104: PPUSH
29105: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29109: LD_VAR 0 1
29113: PPUSH
29114: LD_VAR 0 2
29118: PPUSH
29119: LD_VAR 0 3
29123: PPUSH
29124: CALL 64882 0 3
29128: NOT
29129: IFFALSE 29133
// exit ;
29131: GO 29387
// until GetDistUnitXY ( unit , x , y ) < dist ;
29133: LD_VAR 0 1
29137: PPUSH
29138: LD_VAR 0 2
29142: PPUSH
29143: LD_VAR 0 3
29147: PPUSH
29148: CALL_OW 297
29152: PUSH
29153: LD_VAR 0 5
29157: LESS
29158: IFFALSE 29102
// end ; ComTurnXY ( unit , x , y ) ;
29160: LD_VAR 0 1
29164: PPUSH
29165: LD_VAR 0 2
29169: PPUSH
29170: LD_VAR 0 3
29174: PPUSH
29175: CALL_OW 118
// wait ( 5 ) ;
29179: LD_INT 5
29181: PPUSH
29182: CALL_OW 67
// _d := GetDir ( unit ) ;
29186: LD_ADDR_VAR 0 10
29190: PUSH
29191: LD_VAR 0 1
29195: PPUSH
29196: CALL_OW 254
29200: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29201: LD_ADDR_VAR 0 8
29205: PUSH
29206: LD_VAR 0 1
29210: PPUSH
29211: CALL_OW 250
29215: PPUSH
29216: LD_VAR 0 10
29220: PPUSH
29221: LD_VAR 0 5
29225: PPUSH
29226: CALL_OW 272
29230: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29231: LD_ADDR_VAR 0 9
29235: PUSH
29236: LD_VAR 0 1
29240: PPUSH
29241: CALL_OW 251
29245: PPUSH
29246: LD_VAR 0 10
29250: PPUSH
29251: LD_VAR 0 5
29255: PPUSH
29256: CALL_OW 273
29260: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29261: LD_VAR 0 8
29265: PPUSH
29266: LD_VAR 0 9
29270: PPUSH
29271: CALL_OW 488
29275: NOT
29276: IFFALSE 29280
// exit ;
29278: GO 29387
// ComAnimCustom ( unit , 1 ) ;
29280: LD_VAR 0 1
29284: PPUSH
29285: LD_INT 1
29287: PPUSH
29288: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29292: LD_VAR 0 8
29296: PPUSH
29297: LD_VAR 0 9
29301: PPUSH
29302: LD_VAR 0 6
29306: PPUSH
29307: LD_VAR 0 7
29311: PPUSH
29312: CALL_OW 330
// repeat wait ( 1 ) ;
29316: LD_INT 1
29318: PPUSH
29319: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29323: LD_VAR 0 1
29327: PPUSH
29328: CALL_OW 316
29332: PUSH
29333: LD_VAR 0 1
29337: PPUSH
29338: CALL_OW 314
29342: OR
29343: PUSH
29344: LD_VAR 0 1
29348: PPUSH
29349: CALL_OW 302
29353: NOT
29354: OR
29355: PUSH
29356: LD_VAR 0 1
29360: PPUSH
29361: CALL_OW 301
29365: OR
29366: IFFALSE 29316
// RemoveSeeing ( _x , _y , side ) ;
29368: LD_VAR 0 8
29372: PPUSH
29373: LD_VAR 0 9
29377: PPUSH
29378: LD_VAR 0 6
29382: PPUSH
29383: CALL_OW 331
// end ; end_of_file
29387: LD_VAR 0 4
29391: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29392: LD_INT 0
29394: PPUSH
29395: PPUSH
// if exist_mode then
29396: LD_VAR 0 2
29400: IFFALSE 29425
// unit := CreateCharacter ( prefix & ident ) else
29402: LD_ADDR_VAR 0 5
29406: PUSH
29407: LD_VAR 0 3
29411: PUSH
29412: LD_VAR 0 1
29416: STR
29417: PPUSH
29418: CALL_OW 34
29422: ST_TO_ADDR
29423: GO 29440
// unit := NewCharacter ( ident ) ;
29425: LD_ADDR_VAR 0 5
29429: PUSH
29430: LD_VAR 0 1
29434: PPUSH
29435: CALL_OW 25
29439: ST_TO_ADDR
// result := unit ;
29440: LD_ADDR_VAR 0 4
29444: PUSH
29445: LD_VAR 0 5
29449: ST_TO_ADDR
// end ;
29450: LD_VAR 0 4
29454: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29455: LD_INT 0
29457: PPUSH
29458: PPUSH
// if not side or not nation then
29459: LD_VAR 0 1
29463: NOT
29464: PUSH
29465: LD_VAR 0 2
29469: NOT
29470: OR
29471: IFFALSE 29475
// exit ;
29473: GO 30243
// case nation of nation_american :
29475: LD_VAR 0 2
29479: PUSH
29480: LD_INT 1
29482: DOUBLE
29483: EQUAL
29484: IFTRUE 29488
29486: GO 29702
29488: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29489: LD_ADDR_VAR 0 4
29493: PUSH
29494: LD_INT 35
29496: PUSH
29497: LD_INT 45
29499: PUSH
29500: LD_INT 46
29502: PUSH
29503: LD_INT 47
29505: PUSH
29506: LD_INT 82
29508: PUSH
29509: LD_INT 83
29511: PUSH
29512: LD_INT 84
29514: PUSH
29515: LD_INT 85
29517: PUSH
29518: LD_INT 86
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: LD_INT 2
29526: PUSH
29527: LD_INT 6
29529: PUSH
29530: LD_INT 15
29532: PUSH
29533: LD_INT 16
29535: PUSH
29536: LD_INT 7
29538: PUSH
29539: LD_INT 12
29541: PUSH
29542: LD_INT 13
29544: PUSH
29545: LD_INT 10
29547: PUSH
29548: LD_INT 14
29550: PUSH
29551: LD_INT 20
29553: PUSH
29554: LD_INT 21
29556: PUSH
29557: LD_INT 22
29559: PUSH
29560: LD_INT 25
29562: PUSH
29563: LD_INT 32
29565: PUSH
29566: LD_INT 27
29568: PUSH
29569: LD_INT 36
29571: PUSH
29572: LD_INT 69
29574: PUSH
29575: LD_INT 39
29577: PUSH
29578: LD_INT 34
29580: PUSH
29581: LD_INT 40
29583: PUSH
29584: LD_INT 48
29586: PUSH
29587: LD_INT 49
29589: PUSH
29590: LD_INT 50
29592: PUSH
29593: LD_INT 51
29595: PUSH
29596: LD_INT 52
29598: PUSH
29599: LD_INT 53
29601: PUSH
29602: LD_INT 54
29604: PUSH
29605: LD_INT 55
29607: PUSH
29608: LD_INT 56
29610: PUSH
29611: LD_INT 57
29613: PUSH
29614: LD_INT 58
29616: PUSH
29617: LD_INT 59
29619: PUSH
29620: LD_INT 60
29622: PUSH
29623: LD_INT 61
29625: PUSH
29626: LD_INT 62
29628: PUSH
29629: LD_INT 80
29631: PUSH
29632: LD_INT 82
29634: PUSH
29635: LD_INT 83
29637: PUSH
29638: LD_INT 84
29640: PUSH
29641: LD_INT 85
29643: PUSH
29644: LD_INT 86
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: ST_TO_ADDR
29700: GO 30167
29702: LD_INT 2
29704: DOUBLE
29705: EQUAL
29706: IFTRUE 29710
29708: GO 29936
29710: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29711: LD_ADDR_VAR 0 4
29715: PUSH
29716: LD_INT 35
29718: PUSH
29719: LD_INT 45
29721: PUSH
29722: LD_INT 46
29724: PUSH
29725: LD_INT 47
29727: PUSH
29728: LD_INT 82
29730: PUSH
29731: LD_INT 83
29733: PUSH
29734: LD_INT 84
29736: PUSH
29737: LD_INT 85
29739: PUSH
29740: LD_INT 87
29742: PUSH
29743: LD_INT 70
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: LD_INT 11
29751: PUSH
29752: LD_INT 3
29754: PUSH
29755: LD_INT 4
29757: PUSH
29758: LD_INT 5
29760: PUSH
29761: LD_INT 6
29763: PUSH
29764: LD_INT 15
29766: PUSH
29767: LD_INT 18
29769: PUSH
29770: LD_INT 7
29772: PUSH
29773: LD_INT 17
29775: PUSH
29776: LD_INT 8
29778: PUSH
29779: LD_INT 20
29781: PUSH
29782: LD_INT 21
29784: PUSH
29785: LD_INT 22
29787: PUSH
29788: LD_INT 72
29790: PUSH
29791: LD_INT 26
29793: PUSH
29794: LD_INT 69
29796: PUSH
29797: LD_INT 39
29799: PUSH
29800: LD_INT 40
29802: PUSH
29803: LD_INT 41
29805: PUSH
29806: LD_INT 42
29808: PUSH
29809: LD_INT 43
29811: PUSH
29812: LD_INT 48
29814: PUSH
29815: LD_INT 49
29817: PUSH
29818: LD_INT 50
29820: PUSH
29821: LD_INT 51
29823: PUSH
29824: LD_INT 52
29826: PUSH
29827: LD_INT 53
29829: PUSH
29830: LD_INT 54
29832: PUSH
29833: LD_INT 55
29835: PUSH
29836: LD_INT 56
29838: PUSH
29839: LD_INT 60
29841: PUSH
29842: LD_INT 61
29844: PUSH
29845: LD_INT 62
29847: PUSH
29848: LD_INT 66
29850: PUSH
29851: LD_INT 67
29853: PUSH
29854: LD_INT 68
29856: PUSH
29857: LD_INT 81
29859: PUSH
29860: LD_INT 82
29862: PUSH
29863: LD_INT 83
29865: PUSH
29866: LD_INT 84
29868: PUSH
29869: LD_INT 85
29871: PUSH
29872: LD_INT 87
29874: PUSH
29875: LD_INT 88
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: ST_TO_ADDR
29934: GO 30167
29936: LD_INT 3
29938: DOUBLE
29939: EQUAL
29940: IFTRUE 29944
29942: GO 30166
29944: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29945: LD_ADDR_VAR 0 4
29949: PUSH
29950: LD_INT 46
29952: PUSH
29953: LD_INT 47
29955: PUSH
29956: LD_INT 1
29958: PUSH
29959: LD_INT 2
29961: PUSH
29962: LD_INT 82
29964: PUSH
29965: LD_INT 83
29967: PUSH
29968: LD_INT 84
29970: PUSH
29971: LD_INT 85
29973: PUSH
29974: LD_INT 86
29976: PUSH
29977: LD_INT 11
29979: PUSH
29980: LD_INT 9
29982: PUSH
29983: LD_INT 20
29985: PUSH
29986: LD_INT 19
29988: PUSH
29989: LD_INT 21
29991: PUSH
29992: LD_INT 24
29994: PUSH
29995: LD_INT 22
29997: PUSH
29998: LD_INT 25
30000: PUSH
30001: LD_INT 28
30003: PUSH
30004: LD_INT 29
30006: PUSH
30007: LD_INT 30
30009: PUSH
30010: LD_INT 31
30012: PUSH
30013: LD_INT 37
30015: PUSH
30016: LD_INT 38
30018: PUSH
30019: LD_INT 32
30021: PUSH
30022: LD_INT 27
30024: PUSH
30025: LD_INT 33
30027: PUSH
30028: LD_INT 69
30030: PUSH
30031: LD_INT 39
30033: PUSH
30034: LD_INT 34
30036: PUSH
30037: LD_INT 40
30039: PUSH
30040: LD_INT 71
30042: PUSH
30043: LD_INT 23
30045: PUSH
30046: LD_INT 44
30048: PUSH
30049: LD_INT 48
30051: PUSH
30052: LD_INT 49
30054: PUSH
30055: LD_INT 50
30057: PUSH
30058: LD_INT 51
30060: PUSH
30061: LD_INT 52
30063: PUSH
30064: LD_INT 53
30066: PUSH
30067: LD_INT 54
30069: PUSH
30070: LD_INT 55
30072: PUSH
30073: LD_INT 56
30075: PUSH
30076: LD_INT 57
30078: PUSH
30079: LD_INT 58
30081: PUSH
30082: LD_INT 59
30084: PUSH
30085: LD_INT 63
30087: PUSH
30088: LD_INT 64
30090: PUSH
30091: LD_INT 65
30093: PUSH
30094: LD_INT 82
30096: PUSH
30097: LD_INT 83
30099: PUSH
30100: LD_INT 84
30102: PUSH
30103: LD_INT 85
30105: PUSH
30106: LD_INT 86
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: ST_TO_ADDR
30164: GO 30167
30166: POP
// if state > - 1 and state < 3 then
30167: LD_VAR 0 3
30171: PUSH
30172: LD_INT 1
30174: NEG
30175: GREATER
30176: PUSH
30177: LD_VAR 0 3
30181: PUSH
30182: LD_INT 3
30184: LESS
30185: AND
30186: IFFALSE 30243
// for i in result do
30188: LD_ADDR_VAR 0 5
30192: PUSH
30193: LD_VAR 0 4
30197: PUSH
30198: FOR_IN
30199: IFFALSE 30241
// if GetTech ( i , side ) <> state then
30201: LD_VAR 0 5
30205: PPUSH
30206: LD_VAR 0 1
30210: PPUSH
30211: CALL_OW 321
30215: PUSH
30216: LD_VAR 0 3
30220: NONEQUAL
30221: IFFALSE 30239
// result := result diff i ;
30223: LD_ADDR_VAR 0 4
30227: PUSH
30228: LD_VAR 0 4
30232: PUSH
30233: LD_VAR 0 5
30237: DIFF
30238: ST_TO_ADDR
30239: GO 30198
30241: POP
30242: POP
// end ;
30243: LD_VAR 0 4
30247: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30248: LD_INT 0
30250: PPUSH
30251: PPUSH
30252: PPUSH
// result := true ;
30253: LD_ADDR_VAR 0 3
30257: PUSH
30258: LD_INT 1
30260: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30261: LD_ADDR_VAR 0 5
30265: PUSH
30266: LD_VAR 0 2
30270: PPUSH
30271: CALL_OW 480
30275: ST_TO_ADDR
// if not tmp then
30276: LD_VAR 0 5
30280: NOT
30281: IFFALSE 30285
// exit ;
30283: GO 30334
// for i in tmp do
30285: LD_ADDR_VAR 0 4
30289: PUSH
30290: LD_VAR 0 5
30294: PUSH
30295: FOR_IN
30296: IFFALSE 30332
// if GetTech ( i , side ) <> state_researched then
30298: LD_VAR 0 4
30302: PPUSH
30303: LD_VAR 0 1
30307: PPUSH
30308: CALL_OW 321
30312: PUSH
30313: LD_INT 2
30315: NONEQUAL
30316: IFFALSE 30330
// begin result := false ;
30318: LD_ADDR_VAR 0 3
30322: PUSH
30323: LD_INT 0
30325: ST_TO_ADDR
// exit ;
30326: POP
30327: POP
30328: GO 30334
// end ;
30330: GO 30295
30332: POP
30333: POP
// end ;
30334: LD_VAR 0 3
30338: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30339: LD_INT 0
30341: PPUSH
30342: PPUSH
30343: PPUSH
30344: PPUSH
30345: PPUSH
30346: PPUSH
30347: PPUSH
30348: PPUSH
30349: PPUSH
30350: PPUSH
30351: PPUSH
30352: PPUSH
30353: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30354: LD_VAR 0 1
30358: NOT
30359: PUSH
30360: LD_VAR 0 1
30364: PPUSH
30365: CALL_OW 257
30369: PUSH
30370: LD_INT 9
30372: NONEQUAL
30373: OR
30374: IFFALSE 30378
// exit ;
30376: GO 30951
// side := GetSide ( unit ) ;
30378: LD_ADDR_VAR 0 9
30382: PUSH
30383: LD_VAR 0 1
30387: PPUSH
30388: CALL_OW 255
30392: ST_TO_ADDR
// tech_space := tech_spacanom ;
30393: LD_ADDR_VAR 0 12
30397: PUSH
30398: LD_INT 29
30400: ST_TO_ADDR
// tech_time := tech_taurad ;
30401: LD_ADDR_VAR 0 13
30405: PUSH
30406: LD_INT 28
30408: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30409: LD_ADDR_VAR 0 11
30413: PUSH
30414: LD_VAR 0 1
30418: PPUSH
30419: CALL_OW 310
30423: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30424: LD_VAR 0 11
30428: PPUSH
30429: CALL_OW 247
30433: PUSH
30434: LD_INT 2
30436: EQUAL
30437: IFFALSE 30441
// exit ;
30439: GO 30951
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30441: LD_ADDR_VAR 0 8
30445: PUSH
30446: LD_INT 81
30448: PUSH
30449: LD_VAR 0 9
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 3
30460: PUSH
30461: LD_INT 21
30463: PUSH
30464: LD_INT 3
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PPUSH
30479: CALL_OW 69
30483: ST_TO_ADDR
// if not tmp then
30484: LD_VAR 0 8
30488: NOT
30489: IFFALSE 30493
// exit ;
30491: GO 30951
// if in_unit then
30493: LD_VAR 0 11
30497: IFFALSE 30521
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30499: LD_ADDR_VAR 0 10
30503: PUSH
30504: LD_VAR 0 8
30508: PPUSH
30509: LD_VAR 0 11
30513: PPUSH
30514: CALL_OW 74
30518: ST_TO_ADDR
30519: GO 30541
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30521: LD_ADDR_VAR 0 10
30525: PUSH
30526: LD_VAR 0 8
30530: PPUSH
30531: LD_VAR 0 1
30535: PPUSH
30536: CALL_OW 74
30540: ST_TO_ADDR
// if not enemy then
30541: LD_VAR 0 10
30545: NOT
30546: IFFALSE 30550
// exit ;
30548: GO 30951
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30550: LD_VAR 0 11
30554: PUSH
30555: LD_VAR 0 11
30559: PPUSH
30560: LD_VAR 0 10
30564: PPUSH
30565: CALL_OW 296
30569: PUSH
30570: LD_INT 13
30572: GREATER
30573: AND
30574: PUSH
30575: LD_VAR 0 1
30579: PPUSH
30580: LD_VAR 0 10
30584: PPUSH
30585: CALL_OW 296
30589: PUSH
30590: LD_INT 12
30592: GREATER
30593: OR
30594: IFFALSE 30598
// exit ;
30596: GO 30951
// missile := [ 1 ] ;
30598: LD_ADDR_VAR 0 14
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: EMPTY
30607: LIST
30608: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30609: LD_VAR 0 9
30613: PPUSH
30614: LD_VAR 0 12
30618: PPUSH
30619: CALL_OW 325
30623: IFFALSE 30652
// missile := Replace ( missile , missile + 1 , 2 ) ;
30625: LD_ADDR_VAR 0 14
30629: PUSH
30630: LD_VAR 0 14
30634: PPUSH
30635: LD_VAR 0 14
30639: PUSH
30640: LD_INT 1
30642: PLUS
30643: PPUSH
30644: LD_INT 2
30646: PPUSH
30647: CALL_OW 1
30651: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30652: LD_VAR 0 9
30656: PPUSH
30657: LD_VAR 0 13
30661: PPUSH
30662: CALL_OW 325
30666: PUSH
30667: LD_VAR 0 10
30671: PPUSH
30672: CALL_OW 255
30676: PPUSH
30677: LD_VAR 0 13
30681: PPUSH
30682: CALL_OW 325
30686: NOT
30687: AND
30688: IFFALSE 30717
// missile := Replace ( missile , missile + 1 , 3 ) ;
30690: LD_ADDR_VAR 0 14
30694: PUSH
30695: LD_VAR 0 14
30699: PPUSH
30700: LD_VAR 0 14
30704: PUSH
30705: LD_INT 1
30707: PLUS
30708: PPUSH
30709: LD_INT 3
30711: PPUSH
30712: CALL_OW 1
30716: ST_TO_ADDR
// if missile < 2 then
30717: LD_VAR 0 14
30721: PUSH
30722: LD_INT 2
30724: LESS
30725: IFFALSE 30729
// exit ;
30727: GO 30951
// x := GetX ( enemy ) ;
30729: LD_ADDR_VAR 0 4
30733: PUSH
30734: LD_VAR 0 10
30738: PPUSH
30739: CALL_OW 250
30743: ST_TO_ADDR
// y := GetY ( enemy ) ;
30744: LD_ADDR_VAR 0 5
30748: PUSH
30749: LD_VAR 0 10
30753: PPUSH
30754: CALL_OW 251
30758: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30759: LD_ADDR_VAR 0 6
30763: PUSH
30764: LD_VAR 0 4
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PPUSH
30773: LD_INT 1
30775: PPUSH
30776: CALL_OW 12
30780: PLUS
30781: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30782: LD_ADDR_VAR 0 7
30786: PUSH
30787: LD_VAR 0 5
30791: PUSH
30792: LD_INT 1
30794: NEG
30795: PPUSH
30796: LD_INT 1
30798: PPUSH
30799: CALL_OW 12
30803: PLUS
30804: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30805: LD_VAR 0 6
30809: PPUSH
30810: LD_VAR 0 7
30814: PPUSH
30815: CALL_OW 488
30819: NOT
30820: IFFALSE 30842
// begin _x := x ;
30822: LD_ADDR_VAR 0 6
30826: PUSH
30827: LD_VAR 0 4
30831: ST_TO_ADDR
// _y := y ;
30832: LD_ADDR_VAR 0 7
30836: PUSH
30837: LD_VAR 0 5
30841: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30842: LD_ADDR_VAR 0 3
30846: PUSH
30847: LD_INT 1
30849: PPUSH
30850: LD_VAR 0 14
30854: PPUSH
30855: CALL_OW 12
30859: ST_TO_ADDR
// case i of 1 :
30860: LD_VAR 0 3
30864: PUSH
30865: LD_INT 1
30867: DOUBLE
30868: EQUAL
30869: IFTRUE 30873
30871: GO 30890
30873: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30874: LD_VAR 0 1
30878: PPUSH
30879: LD_VAR 0 10
30883: PPUSH
30884: CALL_OW 115
30888: GO 30951
30890: LD_INT 2
30892: DOUBLE
30893: EQUAL
30894: IFTRUE 30898
30896: GO 30920
30898: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30899: LD_VAR 0 1
30903: PPUSH
30904: LD_VAR 0 6
30908: PPUSH
30909: LD_VAR 0 7
30913: PPUSH
30914: CALL_OW 153
30918: GO 30951
30920: LD_INT 3
30922: DOUBLE
30923: EQUAL
30924: IFTRUE 30928
30926: GO 30950
30928: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30929: LD_VAR 0 1
30933: PPUSH
30934: LD_VAR 0 6
30938: PPUSH
30939: LD_VAR 0 7
30943: PPUSH
30944: CALL_OW 154
30948: GO 30951
30950: POP
// end ;
30951: LD_VAR 0 2
30955: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30956: LD_INT 0
30958: PPUSH
30959: PPUSH
30960: PPUSH
30961: PPUSH
30962: PPUSH
30963: PPUSH
// if not unit or not building then
30964: LD_VAR 0 1
30968: NOT
30969: PUSH
30970: LD_VAR 0 2
30974: NOT
30975: OR
30976: IFFALSE 30980
// exit ;
30978: GO 31138
// x := GetX ( building ) ;
30980: LD_ADDR_VAR 0 5
30984: PUSH
30985: LD_VAR 0 2
30989: PPUSH
30990: CALL_OW 250
30994: ST_TO_ADDR
// y := GetY ( building ) ;
30995: LD_ADDR_VAR 0 6
30999: PUSH
31000: LD_VAR 0 2
31004: PPUSH
31005: CALL_OW 251
31009: ST_TO_ADDR
// for i = 0 to 5 do
31010: LD_ADDR_VAR 0 4
31014: PUSH
31015: DOUBLE
31016: LD_INT 0
31018: DEC
31019: ST_TO_ADDR
31020: LD_INT 5
31022: PUSH
31023: FOR_TO
31024: IFFALSE 31136
// begin _x := ShiftX ( x , i , 3 ) ;
31026: LD_ADDR_VAR 0 7
31030: PUSH
31031: LD_VAR 0 5
31035: PPUSH
31036: LD_VAR 0 4
31040: PPUSH
31041: LD_INT 3
31043: PPUSH
31044: CALL_OW 272
31048: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31049: LD_ADDR_VAR 0 8
31053: PUSH
31054: LD_VAR 0 6
31058: PPUSH
31059: LD_VAR 0 4
31063: PPUSH
31064: LD_INT 3
31066: PPUSH
31067: CALL_OW 273
31071: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31072: LD_VAR 0 7
31076: PPUSH
31077: LD_VAR 0 8
31081: PPUSH
31082: CALL_OW 488
31086: NOT
31087: IFFALSE 31091
// continue ;
31089: GO 31023
// if HexInfo ( _x , _y ) = 0 then
31091: LD_VAR 0 7
31095: PPUSH
31096: LD_VAR 0 8
31100: PPUSH
31101: CALL_OW 428
31105: PUSH
31106: LD_INT 0
31108: EQUAL
31109: IFFALSE 31134
// begin ComMoveXY ( unit , _x , _y ) ;
31111: LD_VAR 0 1
31115: PPUSH
31116: LD_VAR 0 7
31120: PPUSH
31121: LD_VAR 0 8
31125: PPUSH
31126: CALL_OW 111
// exit ;
31130: POP
31131: POP
31132: GO 31138
// end ; end ;
31134: GO 31023
31136: POP
31137: POP
// end ;
31138: LD_VAR 0 3
31142: RET
// export function ScanBase ( side , base_area ) ; begin
31143: LD_INT 0
31145: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31146: LD_ADDR_VAR 0 3
31150: PUSH
31151: LD_VAR 0 2
31155: PPUSH
31156: LD_INT 81
31158: PUSH
31159: LD_VAR 0 1
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PPUSH
31168: CALL_OW 70
31172: ST_TO_ADDR
// end ;
31173: LD_VAR 0 3
31177: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31178: LD_INT 0
31180: PPUSH
31181: PPUSH
31182: PPUSH
31183: PPUSH
// result := false ;
31184: LD_ADDR_VAR 0 2
31188: PUSH
31189: LD_INT 0
31191: ST_TO_ADDR
// side := GetSide ( unit ) ;
31192: LD_ADDR_VAR 0 3
31196: PUSH
31197: LD_VAR 0 1
31201: PPUSH
31202: CALL_OW 255
31206: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31207: LD_ADDR_VAR 0 4
31211: PUSH
31212: LD_VAR 0 1
31216: PPUSH
31217: CALL_OW 248
31221: ST_TO_ADDR
// case nat of 1 :
31222: LD_VAR 0 4
31226: PUSH
31227: LD_INT 1
31229: DOUBLE
31230: EQUAL
31231: IFTRUE 31235
31233: GO 31246
31235: POP
// tech := tech_lassight ; 2 :
31236: LD_ADDR_VAR 0 5
31240: PUSH
31241: LD_INT 12
31243: ST_TO_ADDR
31244: GO 31285
31246: LD_INT 2
31248: DOUBLE
31249: EQUAL
31250: IFTRUE 31254
31252: GO 31265
31254: POP
// tech := tech_mortar ; 3 :
31255: LD_ADDR_VAR 0 5
31259: PUSH
31260: LD_INT 41
31262: ST_TO_ADDR
31263: GO 31285
31265: LD_INT 3
31267: DOUBLE
31268: EQUAL
31269: IFTRUE 31273
31271: GO 31284
31273: POP
// tech := tech_bazooka ; end ;
31274: LD_ADDR_VAR 0 5
31278: PUSH
31279: LD_INT 44
31281: ST_TO_ADDR
31282: GO 31285
31284: POP
// if Researched ( side , tech ) then
31285: LD_VAR 0 3
31289: PPUSH
31290: LD_VAR 0 5
31294: PPUSH
31295: CALL_OW 325
31299: IFFALSE 31326
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31301: LD_ADDR_VAR 0 2
31305: PUSH
31306: LD_INT 5
31308: PUSH
31309: LD_INT 8
31311: PUSH
31312: LD_INT 9
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: PUSH
31320: LD_VAR 0 4
31324: ARRAY
31325: ST_TO_ADDR
// end ;
31326: LD_VAR 0 2
31330: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31331: LD_INT 0
31333: PPUSH
31334: PPUSH
31335: PPUSH
// if not mines then
31336: LD_VAR 0 2
31340: NOT
31341: IFFALSE 31345
// exit ;
31343: GO 31489
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31345: LD_ADDR_VAR 0 5
31349: PUSH
31350: LD_INT 81
31352: PUSH
31353: LD_VAR 0 1
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 3
31364: PUSH
31365: LD_INT 21
31367: PUSH
31368: LD_INT 3
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PPUSH
31383: CALL_OW 69
31387: ST_TO_ADDR
// for i in mines do
31388: LD_ADDR_VAR 0 4
31392: PUSH
31393: LD_VAR 0 2
31397: PUSH
31398: FOR_IN
31399: IFFALSE 31487
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31401: LD_VAR 0 4
31405: PUSH
31406: LD_INT 1
31408: ARRAY
31409: PPUSH
31410: LD_VAR 0 4
31414: PUSH
31415: LD_INT 2
31417: ARRAY
31418: PPUSH
31419: CALL_OW 458
31423: NOT
31424: IFFALSE 31428
// continue ;
31426: GO 31398
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31428: LD_VAR 0 4
31432: PUSH
31433: LD_INT 1
31435: ARRAY
31436: PPUSH
31437: LD_VAR 0 4
31441: PUSH
31442: LD_INT 2
31444: ARRAY
31445: PPUSH
31446: CALL_OW 428
31450: PUSH
31451: LD_VAR 0 5
31455: IN
31456: IFFALSE 31485
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31458: LD_VAR 0 4
31462: PUSH
31463: LD_INT 1
31465: ARRAY
31466: PPUSH
31467: LD_VAR 0 4
31471: PUSH
31472: LD_INT 2
31474: ARRAY
31475: PPUSH
31476: LD_VAR 0 1
31480: PPUSH
31481: CALL_OW 456
// end ;
31485: GO 31398
31487: POP
31488: POP
// end ;
31489: LD_VAR 0 3
31493: RET
// export function Count ( array ) ; var i ; begin
31494: LD_INT 0
31496: PPUSH
31497: PPUSH
// result := 0 ;
31498: LD_ADDR_VAR 0 2
31502: PUSH
31503: LD_INT 0
31505: ST_TO_ADDR
// for i in array do
31506: LD_ADDR_VAR 0 3
31510: PUSH
31511: LD_VAR 0 1
31515: PUSH
31516: FOR_IN
31517: IFFALSE 31541
// if i then
31519: LD_VAR 0 3
31523: IFFALSE 31539
// result := result + 1 ;
31525: LD_ADDR_VAR 0 2
31529: PUSH
31530: LD_VAR 0 2
31534: PUSH
31535: LD_INT 1
31537: PLUS
31538: ST_TO_ADDR
31539: GO 31516
31541: POP
31542: POP
// end ;
31543: LD_VAR 0 2
31547: RET
// export function IsEmpty ( building ) ; begin
31548: LD_INT 0
31550: PPUSH
// if not building then
31551: LD_VAR 0 1
31555: NOT
31556: IFFALSE 31560
// exit ;
31558: GO 31603
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31560: LD_ADDR_VAR 0 2
31564: PUSH
31565: LD_VAR 0 1
31569: PUSH
31570: LD_INT 22
31572: PUSH
31573: LD_VAR 0 1
31577: PPUSH
31578: CALL_OW 255
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 58
31589: PUSH
31590: EMPTY
31591: LIST
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PPUSH
31597: CALL_OW 69
31601: IN
31602: ST_TO_ADDR
// end ;
31603: LD_VAR 0 2
31607: RET
// export function IsNotFull ( building ) ; begin
31608: LD_INT 0
31610: PPUSH
// if not building then
31611: LD_VAR 0 1
31615: NOT
31616: IFFALSE 31620
// exit ;
31618: GO 31639
// result := UnitsInside ( building ) < 6 ;
31620: LD_ADDR_VAR 0 2
31624: PUSH
31625: LD_VAR 0 1
31629: PPUSH
31630: CALL_OW 313
31634: PUSH
31635: LD_INT 6
31637: LESS
31638: ST_TO_ADDR
// end ;
31639: LD_VAR 0 2
31643: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31644: LD_INT 0
31646: PPUSH
31647: PPUSH
31648: PPUSH
31649: PPUSH
// tmp := [ ] ;
31650: LD_ADDR_VAR 0 3
31654: PUSH
31655: EMPTY
31656: ST_TO_ADDR
// list := [ ] ;
31657: LD_ADDR_VAR 0 5
31661: PUSH
31662: EMPTY
31663: ST_TO_ADDR
// for i = 16 to 25 do
31664: LD_ADDR_VAR 0 4
31668: PUSH
31669: DOUBLE
31670: LD_INT 16
31672: DEC
31673: ST_TO_ADDR
31674: LD_INT 25
31676: PUSH
31677: FOR_TO
31678: IFFALSE 31751
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31680: LD_ADDR_VAR 0 3
31684: PUSH
31685: LD_VAR 0 3
31689: PUSH
31690: LD_INT 22
31692: PUSH
31693: LD_VAR 0 1
31697: PPUSH
31698: CALL_OW 255
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 91
31709: PUSH
31710: LD_VAR 0 1
31714: PUSH
31715: LD_INT 6
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 30
31725: PUSH
31726: LD_VAR 0 4
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: PUSH
31740: EMPTY
31741: LIST
31742: PPUSH
31743: CALL_OW 69
31747: ADD
31748: ST_TO_ADDR
31749: GO 31677
31751: POP
31752: POP
// for i = 1 to tmp do
31753: LD_ADDR_VAR 0 4
31757: PUSH
31758: DOUBLE
31759: LD_INT 1
31761: DEC
31762: ST_TO_ADDR
31763: LD_VAR 0 3
31767: PUSH
31768: FOR_TO
31769: IFFALSE 31857
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31771: LD_ADDR_VAR 0 5
31775: PUSH
31776: LD_VAR 0 5
31780: PUSH
31781: LD_VAR 0 3
31785: PUSH
31786: LD_VAR 0 4
31790: ARRAY
31791: PPUSH
31792: CALL_OW 266
31796: PUSH
31797: LD_VAR 0 3
31801: PUSH
31802: LD_VAR 0 4
31806: ARRAY
31807: PPUSH
31808: CALL_OW 250
31812: PUSH
31813: LD_VAR 0 3
31817: PUSH
31818: LD_VAR 0 4
31822: ARRAY
31823: PPUSH
31824: CALL_OW 251
31828: PUSH
31829: LD_VAR 0 3
31833: PUSH
31834: LD_VAR 0 4
31838: ARRAY
31839: PPUSH
31840: CALL_OW 254
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: PUSH
31851: EMPTY
31852: LIST
31853: ADD
31854: ST_TO_ADDR
31855: GO 31768
31857: POP
31858: POP
// result := list ;
31859: LD_ADDR_VAR 0 2
31863: PUSH
31864: LD_VAR 0 5
31868: ST_TO_ADDR
// end ;
31869: LD_VAR 0 2
31873: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31874: LD_INT 0
31876: PPUSH
31877: PPUSH
31878: PPUSH
31879: PPUSH
31880: PPUSH
31881: PPUSH
31882: PPUSH
// if not factory then
31883: LD_VAR 0 1
31887: NOT
31888: IFFALSE 31892
// exit ;
31890: GO 32485
// if control = control_apeman then
31892: LD_VAR 0 4
31896: PUSH
31897: LD_INT 5
31899: EQUAL
31900: IFFALSE 32009
// begin tmp := UnitsInside ( factory ) ;
31902: LD_ADDR_VAR 0 8
31906: PUSH
31907: LD_VAR 0 1
31911: PPUSH
31912: CALL_OW 313
31916: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31917: LD_VAR 0 8
31921: PPUSH
31922: LD_INT 25
31924: PUSH
31925: LD_INT 12
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PPUSH
31932: CALL_OW 72
31936: NOT
31937: IFFALSE 31947
// control := control_manual ;
31939: LD_ADDR_VAR 0 4
31943: PUSH
31944: LD_INT 1
31946: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31947: LD_ADDR_VAR 0 8
31951: PUSH
31952: LD_VAR 0 1
31956: PPUSH
31957: CALL 31644 0 1
31961: ST_TO_ADDR
// if tmp then
31962: LD_VAR 0 8
31966: IFFALSE 32009
// begin for i in tmp do
31968: LD_ADDR_VAR 0 7
31972: PUSH
31973: LD_VAR 0 8
31977: PUSH
31978: FOR_IN
31979: IFFALSE 32007
// if i [ 1 ] = b_ext_radio then
31981: LD_VAR 0 7
31985: PUSH
31986: LD_INT 1
31988: ARRAY
31989: PUSH
31990: LD_INT 22
31992: EQUAL
31993: IFFALSE 32005
// begin control := control_remote ;
31995: LD_ADDR_VAR 0 4
31999: PUSH
32000: LD_INT 2
32002: ST_TO_ADDR
// break ;
32003: GO 32007
// end ;
32005: GO 31978
32007: POP
32008: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32009: LD_VAR 0 1
32013: PPUSH
32014: LD_VAR 0 2
32018: PPUSH
32019: LD_VAR 0 3
32023: PPUSH
32024: LD_VAR 0 4
32028: PPUSH
32029: LD_VAR 0 5
32033: PPUSH
32034: CALL_OW 448
32038: IFFALSE 32073
// begin result := [ chassis , engine , control , weapon ] ;
32040: LD_ADDR_VAR 0 6
32044: PUSH
32045: LD_VAR 0 2
32049: PUSH
32050: LD_VAR 0 3
32054: PUSH
32055: LD_VAR 0 4
32059: PUSH
32060: LD_VAR 0 5
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: ST_TO_ADDR
// exit ;
32071: GO 32485
// end ; _chassis := AvailableChassisList ( factory ) ;
32073: LD_ADDR_VAR 0 9
32077: PUSH
32078: LD_VAR 0 1
32082: PPUSH
32083: CALL_OW 475
32087: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32088: LD_ADDR_VAR 0 11
32092: PUSH
32093: LD_VAR 0 1
32097: PPUSH
32098: CALL_OW 476
32102: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32103: LD_ADDR_VAR 0 12
32107: PUSH
32108: LD_VAR 0 1
32112: PPUSH
32113: CALL_OW 477
32117: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32118: LD_ADDR_VAR 0 10
32122: PUSH
32123: LD_VAR 0 1
32127: PPUSH
32128: CALL_OW 478
32132: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32133: LD_VAR 0 9
32137: NOT
32138: PUSH
32139: LD_VAR 0 11
32143: NOT
32144: OR
32145: PUSH
32146: LD_VAR 0 12
32150: NOT
32151: OR
32152: PUSH
32153: LD_VAR 0 10
32157: NOT
32158: OR
32159: IFFALSE 32194
// begin result := [ chassis , engine , control , weapon ] ;
32161: LD_ADDR_VAR 0 6
32165: PUSH
32166: LD_VAR 0 2
32170: PUSH
32171: LD_VAR 0 3
32175: PUSH
32176: LD_VAR 0 4
32180: PUSH
32181: LD_VAR 0 5
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: ST_TO_ADDR
// exit ;
32192: GO 32485
// end ; if not chassis in _chassis then
32194: LD_VAR 0 2
32198: PUSH
32199: LD_VAR 0 9
32203: IN
32204: NOT
32205: IFFALSE 32231
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32207: LD_ADDR_VAR 0 2
32211: PUSH
32212: LD_VAR 0 9
32216: PUSH
32217: LD_INT 1
32219: PPUSH
32220: LD_VAR 0 9
32224: PPUSH
32225: CALL_OW 12
32229: ARRAY
32230: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32231: LD_VAR 0 2
32235: PPUSH
32236: LD_VAR 0 3
32240: PPUSH
32241: CALL 32490 0 2
32245: NOT
32246: IFFALSE 32305
// repeat engine := _engine [ 1 ] ;
32248: LD_ADDR_VAR 0 3
32252: PUSH
32253: LD_VAR 0 11
32257: PUSH
32258: LD_INT 1
32260: ARRAY
32261: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32262: LD_ADDR_VAR 0 11
32266: PUSH
32267: LD_VAR 0 11
32271: PPUSH
32272: LD_INT 1
32274: PPUSH
32275: CALL_OW 3
32279: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32280: LD_VAR 0 2
32284: PPUSH
32285: LD_VAR 0 3
32289: PPUSH
32290: CALL 32490 0 2
32294: PUSH
32295: LD_VAR 0 11
32299: PUSH
32300: EMPTY
32301: EQUAL
32302: OR
32303: IFFALSE 32248
// if not control in _control then
32305: LD_VAR 0 4
32309: PUSH
32310: LD_VAR 0 12
32314: IN
32315: NOT
32316: IFFALSE 32342
// control := _control [ rand ( 1 , _control ) ] ;
32318: LD_ADDR_VAR 0 4
32322: PUSH
32323: LD_VAR 0 12
32327: PUSH
32328: LD_INT 1
32330: PPUSH
32331: LD_VAR 0 12
32335: PPUSH
32336: CALL_OW 12
32340: ARRAY
32341: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32342: LD_VAR 0 2
32346: PPUSH
32347: LD_VAR 0 5
32351: PPUSH
32352: CALL 32710 0 2
32356: NOT
32357: IFFALSE 32416
// repeat weapon := _weapon [ 1 ] ;
32359: LD_ADDR_VAR 0 5
32363: PUSH
32364: LD_VAR 0 10
32368: PUSH
32369: LD_INT 1
32371: ARRAY
32372: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32373: LD_ADDR_VAR 0 10
32377: PUSH
32378: LD_VAR 0 10
32382: PPUSH
32383: LD_INT 1
32385: PPUSH
32386: CALL_OW 3
32390: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32391: LD_VAR 0 2
32395: PPUSH
32396: LD_VAR 0 5
32400: PPUSH
32401: CALL 32710 0 2
32405: PUSH
32406: LD_VAR 0 10
32410: PUSH
32411: EMPTY
32412: EQUAL
32413: OR
32414: IFFALSE 32359
// result := [ ] ;
32416: LD_ADDR_VAR 0 6
32420: PUSH
32421: EMPTY
32422: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32423: LD_VAR 0 1
32427: PPUSH
32428: LD_VAR 0 2
32432: PPUSH
32433: LD_VAR 0 3
32437: PPUSH
32438: LD_VAR 0 4
32442: PPUSH
32443: LD_VAR 0 5
32447: PPUSH
32448: CALL_OW 448
32452: IFFALSE 32485
// result := [ chassis , engine , control , weapon ] ;
32454: LD_ADDR_VAR 0 6
32458: PUSH
32459: LD_VAR 0 2
32463: PUSH
32464: LD_VAR 0 3
32468: PUSH
32469: LD_VAR 0 4
32473: PUSH
32474: LD_VAR 0 5
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: ST_TO_ADDR
// end ;
32485: LD_VAR 0 6
32489: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32490: LD_INT 0
32492: PPUSH
// if not chassis or not engine then
32493: LD_VAR 0 1
32497: NOT
32498: PUSH
32499: LD_VAR 0 2
32503: NOT
32504: OR
32505: IFFALSE 32509
// exit ;
32507: GO 32705
// case engine of engine_solar :
32509: LD_VAR 0 2
32513: PUSH
32514: LD_INT 2
32516: DOUBLE
32517: EQUAL
32518: IFTRUE 32522
32520: GO 32560
32522: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32523: LD_ADDR_VAR 0 3
32527: PUSH
32528: LD_INT 11
32530: PUSH
32531: LD_INT 12
32533: PUSH
32534: LD_INT 13
32536: PUSH
32537: LD_INT 14
32539: PUSH
32540: LD_INT 1
32542: PUSH
32543: LD_INT 2
32545: PUSH
32546: LD_INT 3
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: ST_TO_ADDR
32558: GO 32689
32560: LD_INT 1
32562: DOUBLE
32563: EQUAL
32564: IFTRUE 32568
32566: GO 32630
32568: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32569: LD_ADDR_VAR 0 3
32573: PUSH
32574: LD_INT 11
32576: PUSH
32577: LD_INT 12
32579: PUSH
32580: LD_INT 13
32582: PUSH
32583: LD_INT 14
32585: PUSH
32586: LD_INT 1
32588: PUSH
32589: LD_INT 2
32591: PUSH
32592: LD_INT 3
32594: PUSH
32595: LD_INT 4
32597: PUSH
32598: LD_INT 5
32600: PUSH
32601: LD_INT 21
32603: PUSH
32604: LD_INT 23
32606: PUSH
32607: LD_INT 22
32609: PUSH
32610: LD_INT 24
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: ST_TO_ADDR
32628: GO 32689
32630: LD_INT 3
32632: DOUBLE
32633: EQUAL
32634: IFTRUE 32638
32636: GO 32688
32638: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32639: LD_ADDR_VAR 0 3
32643: PUSH
32644: LD_INT 13
32646: PUSH
32647: LD_INT 14
32649: PUSH
32650: LD_INT 2
32652: PUSH
32653: LD_INT 3
32655: PUSH
32656: LD_INT 4
32658: PUSH
32659: LD_INT 5
32661: PUSH
32662: LD_INT 21
32664: PUSH
32665: LD_INT 22
32667: PUSH
32668: LD_INT 23
32670: PUSH
32671: LD_INT 24
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: ST_TO_ADDR
32686: GO 32689
32688: POP
// result := ( chassis in result ) ;
32689: LD_ADDR_VAR 0 3
32693: PUSH
32694: LD_VAR 0 1
32698: PUSH
32699: LD_VAR 0 3
32703: IN
32704: ST_TO_ADDR
// end ;
32705: LD_VAR 0 3
32709: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32710: LD_INT 0
32712: PPUSH
// if not chassis or not weapon then
32713: LD_VAR 0 1
32717: NOT
32718: PUSH
32719: LD_VAR 0 2
32723: NOT
32724: OR
32725: IFFALSE 32729
// exit ;
32727: GO 33791
// case weapon of us_machine_gun :
32729: LD_VAR 0 2
32733: PUSH
32734: LD_INT 2
32736: DOUBLE
32737: EQUAL
32738: IFTRUE 32742
32740: GO 32772
32742: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32743: LD_ADDR_VAR 0 3
32747: PUSH
32748: LD_INT 1
32750: PUSH
32751: LD_INT 2
32753: PUSH
32754: LD_INT 3
32756: PUSH
32757: LD_INT 4
32759: PUSH
32760: LD_INT 5
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: ST_TO_ADDR
32770: GO 33775
32772: LD_INT 3
32774: DOUBLE
32775: EQUAL
32776: IFTRUE 32780
32778: GO 32810
32780: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32781: LD_ADDR_VAR 0 3
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: LD_INT 2
32791: PUSH
32792: LD_INT 3
32794: PUSH
32795: LD_INT 4
32797: PUSH
32798: LD_INT 5
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: ST_TO_ADDR
32808: GO 33775
32810: LD_INT 11
32812: DOUBLE
32813: EQUAL
32814: IFTRUE 32818
32816: GO 32848
32818: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32819: LD_ADDR_VAR 0 3
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: LD_INT 3
32832: PUSH
32833: LD_INT 4
32835: PUSH
32836: LD_INT 5
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: ST_TO_ADDR
32846: GO 33775
32848: LD_INT 4
32850: DOUBLE
32851: EQUAL
32852: IFTRUE 32856
32854: GO 32882
32856: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32857: LD_ADDR_VAR 0 3
32861: PUSH
32862: LD_INT 2
32864: PUSH
32865: LD_INT 3
32867: PUSH
32868: LD_INT 4
32870: PUSH
32871: LD_INT 5
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: ST_TO_ADDR
32880: GO 33775
32882: LD_INT 5
32884: DOUBLE
32885: EQUAL
32886: IFTRUE 32890
32888: GO 32916
32890: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32891: LD_ADDR_VAR 0 3
32895: PUSH
32896: LD_INT 2
32898: PUSH
32899: LD_INT 3
32901: PUSH
32902: LD_INT 4
32904: PUSH
32905: LD_INT 5
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: ST_TO_ADDR
32914: GO 33775
32916: LD_INT 9
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32924
32922: GO 32950
32924: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32925: LD_ADDR_VAR 0 3
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: LD_INT 3
32935: PUSH
32936: LD_INT 4
32938: PUSH
32939: LD_INT 5
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: ST_TO_ADDR
32948: GO 33775
32950: LD_INT 7
32952: DOUBLE
32953: EQUAL
32954: IFTRUE 32958
32956: GO 32984
32958: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32959: LD_ADDR_VAR 0 3
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: LD_INT 4
32972: PUSH
32973: LD_INT 5
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: ST_TO_ADDR
32982: GO 33775
32984: LD_INT 12
32986: DOUBLE
32987: EQUAL
32988: IFTRUE 32992
32990: GO 33018
32992: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32993: LD_ADDR_VAR 0 3
32997: PUSH
32998: LD_INT 2
33000: PUSH
33001: LD_INT 3
33003: PUSH
33004: LD_INT 4
33006: PUSH
33007: LD_INT 5
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: ST_TO_ADDR
33016: GO 33775
33018: LD_INT 13
33020: DOUBLE
33021: EQUAL
33022: IFTRUE 33026
33024: GO 33052
33026: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33027: LD_ADDR_VAR 0 3
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: LD_INT 3
33037: PUSH
33038: LD_INT 4
33040: PUSH
33041: LD_INT 5
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: ST_TO_ADDR
33050: GO 33775
33052: LD_INT 14
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33060
33058: GO 33078
33060: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33061: LD_ADDR_VAR 0 3
33065: PUSH
33066: LD_INT 4
33068: PUSH
33069: LD_INT 5
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: ST_TO_ADDR
33076: GO 33775
33078: LD_INT 6
33080: DOUBLE
33081: EQUAL
33082: IFTRUE 33086
33084: GO 33104
33086: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33087: LD_ADDR_VAR 0 3
33091: PUSH
33092: LD_INT 4
33094: PUSH
33095: LD_INT 5
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: ST_TO_ADDR
33102: GO 33775
33104: LD_INT 10
33106: DOUBLE
33107: EQUAL
33108: IFTRUE 33112
33110: GO 33130
33112: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33113: LD_ADDR_VAR 0 3
33117: PUSH
33118: LD_INT 4
33120: PUSH
33121: LD_INT 5
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: ST_TO_ADDR
33128: GO 33775
33130: LD_INT 22
33132: DOUBLE
33133: EQUAL
33134: IFTRUE 33138
33136: GO 33164
33138: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33139: LD_ADDR_VAR 0 3
33143: PUSH
33144: LD_INT 11
33146: PUSH
33147: LD_INT 12
33149: PUSH
33150: LD_INT 13
33152: PUSH
33153: LD_INT 14
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: ST_TO_ADDR
33162: GO 33775
33164: LD_INT 23
33166: DOUBLE
33167: EQUAL
33168: IFTRUE 33172
33170: GO 33198
33172: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33173: LD_ADDR_VAR 0 3
33177: PUSH
33178: LD_INT 11
33180: PUSH
33181: LD_INT 12
33183: PUSH
33184: LD_INT 13
33186: PUSH
33187: LD_INT 14
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: ST_TO_ADDR
33196: GO 33775
33198: LD_INT 24
33200: DOUBLE
33201: EQUAL
33202: IFTRUE 33206
33204: GO 33232
33206: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33207: LD_ADDR_VAR 0 3
33211: PUSH
33212: LD_INT 11
33214: PUSH
33215: LD_INT 12
33217: PUSH
33218: LD_INT 13
33220: PUSH
33221: LD_INT 14
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: ST_TO_ADDR
33230: GO 33775
33232: LD_INT 30
33234: DOUBLE
33235: EQUAL
33236: IFTRUE 33240
33238: GO 33266
33240: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33241: LD_ADDR_VAR 0 3
33245: PUSH
33246: LD_INT 11
33248: PUSH
33249: LD_INT 12
33251: PUSH
33252: LD_INT 13
33254: PUSH
33255: LD_INT 14
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: ST_TO_ADDR
33264: GO 33775
33266: LD_INT 25
33268: DOUBLE
33269: EQUAL
33270: IFTRUE 33274
33272: GO 33292
33274: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33275: LD_ADDR_VAR 0 3
33279: PUSH
33280: LD_INT 13
33282: PUSH
33283: LD_INT 14
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: ST_TO_ADDR
33290: GO 33775
33292: LD_INT 27
33294: DOUBLE
33295: EQUAL
33296: IFTRUE 33300
33298: GO 33318
33300: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33301: LD_ADDR_VAR 0 3
33305: PUSH
33306: LD_INT 13
33308: PUSH
33309: LD_INT 14
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: ST_TO_ADDR
33316: GO 33775
33318: LD_EXP 50
33322: DOUBLE
33323: EQUAL
33324: IFTRUE 33328
33326: GO 33354
33328: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33329: LD_ADDR_VAR 0 3
33333: PUSH
33334: LD_INT 11
33336: PUSH
33337: LD_INT 12
33339: PUSH
33340: LD_INT 13
33342: PUSH
33343: LD_INT 14
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: ST_TO_ADDR
33352: GO 33775
33354: LD_INT 28
33356: DOUBLE
33357: EQUAL
33358: IFTRUE 33362
33360: GO 33380
33362: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33363: LD_ADDR_VAR 0 3
33367: PUSH
33368: LD_INT 13
33370: PUSH
33371: LD_INT 14
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: ST_TO_ADDR
33378: GO 33775
33380: LD_INT 29
33382: DOUBLE
33383: EQUAL
33384: IFTRUE 33388
33386: GO 33406
33388: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33389: LD_ADDR_VAR 0 3
33393: PUSH
33394: LD_INT 13
33396: PUSH
33397: LD_INT 14
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: ST_TO_ADDR
33404: GO 33775
33406: LD_INT 31
33408: DOUBLE
33409: EQUAL
33410: IFTRUE 33414
33412: GO 33432
33414: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33415: LD_ADDR_VAR 0 3
33419: PUSH
33420: LD_INT 13
33422: PUSH
33423: LD_INT 14
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: ST_TO_ADDR
33430: GO 33775
33432: LD_INT 26
33434: DOUBLE
33435: EQUAL
33436: IFTRUE 33440
33438: GO 33458
33440: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33441: LD_ADDR_VAR 0 3
33445: PUSH
33446: LD_INT 13
33448: PUSH
33449: LD_INT 14
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: ST_TO_ADDR
33456: GO 33775
33458: LD_INT 42
33460: DOUBLE
33461: EQUAL
33462: IFTRUE 33466
33464: GO 33492
33466: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33467: LD_ADDR_VAR 0 3
33471: PUSH
33472: LD_INT 21
33474: PUSH
33475: LD_INT 22
33477: PUSH
33478: LD_INT 23
33480: PUSH
33481: LD_INT 24
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: ST_TO_ADDR
33490: GO 33775
33492: LD_INT 43
33494: DOUBLE
33495: EQUAL
33496: IFTRUE 33500
33498: GO 33526
33500: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33501: LD_ADDR_VAR 0 3
33505: PUSH
33506: LD_INT 21
33508: PUSH
33509: LD_INT 22
33511: PUSH
33512: LD_INT 23
33514: PUSH
33515: LD_INT 24
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: ST_TO_ADDR
33524: GO 33775
33526: LD_INT 44
33528: DOUBLE
33529: EQUAL
33530: IFTRUE 33534
33532: GO 33560
33534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33535: LD_ADDR_VAR 0 3
33539: PUSH
33540: LD_INT 21
33542: PUSH
33543: LD_INT 22
33545: PUSH
33546: LD_INT 23
33548: PUSH
33549: LD_INT 24
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: ST_TO_ADDR
33558: GO 33775
33560: LD_INT 45
33562: DOUBLE
33563: EQUAL
33564: IFTRUE 33568
33566: GO 33594
33568: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33569: LD_ADDR_VAR 0 3
33573: PUSH
33574: LD_INT 21
33576: PUSH
33577: LD_INT 22
33579: PUSH
33580: LD_INT 23
33582: PUSH
33583: LD_INT 24
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: ST_TO_ADDR
33592: GO 33775
33594: LD_INT 49
33596: DOUBLE
33597: EQUAL
33598: IFTRUE 33602
33600: GO 33628
33602: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33603: LD_ADDR_VAR 0 3
33607: PUSH
33608: LD_INT 21
33610: PUSH
33611: LD_INT 22
33613: PUSH
33614: LD_INT 23
33616: PUSH
33617: LD_INT 24
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: ST_TO_ADDR
33626: GO 33775
33628: LD_INT 51
33630: DOUBLE
33631: EQUAL
33632: IFTRUE 33636
33634: GO 33662
33636: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33637: LD_ADDR_VAR 0 3
33641: PUSH
33642: LD_INT 21
33644: PUSH
33645: LD_INT 22
33647: PUSH
33648: LD_INT 23
33650: PUSH
33651: LD_INT 24
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: ST_TO_ADDR
33660: GO 33775
33662: LD_INT 52
33664: DOUBLE
33665: EQUAL
33666: IFTRUE 33670
33668: GO 33696
33670: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33671: LD_ADDR_VAR 0 3
33675: PUSH
33676: LD_INT 21
33678: PUSH
33679: LD_INT 22
33681: PUSH
33682: LD_INT 23
33684: PUSH
33685: LD_INT 24
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: ST_TO_ADDR
33694: GO 33775
33696: LD_INT 53
33698: DOUBLE
33699: EQUAL
33700: IFTRUE 33704
33702: GO 33722
33704: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33705: LD_ADDR_VAR 0 3
33709: PUSH
33710: LD_INT 23
33712: PUSH
33713: LD_INT 24
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: ST_TO_ADDR
33720: GO 33775
33722: LD_INT 46
33724: DOUBLE
33725: EQUAL
33726: IFTRUE 33730
33728: GO 33748
33730: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33731: LD_ADDR_VAR 0 3
33735: PUSH
33736: LD_INT 23
33738: PUSH
33739: LD_INT 24
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: ST_TO_ADDR
33746: GO 33775
33748: LD_INT 47
33750: DOUBLE
33751: EQUAL
33752: IFTRUE 33756
33754: GO 33774
33756: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33757: LD_ADDR_VAR 0 3
33761: PUSH
33762: LD_INT 23
33764: PUSH
33765: LD_INT 24
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: ST_TO_ADDR
33772: GO 33775
33774: POP
// result := ( chassis in result ) ;
33775: LD_ADDR_VAR 0 3
33779: PUSH
33780: LD_VAR 0 1
33784: PUSH
33785: LD_VAR 0 3
33789: IN
33790: ST_TO_ADDR
// end ;
33791: LD_VAR 0 3
33795: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33796: LD_INT 0
33798: PPUSH
33799: PPUSH
33800: PPUSH
33801: PPUSH
33802: PPUSH
33803: PPUSH
33804: PPUSH
// result := array ;
33805: LD_ADDR_VAR 0 5
33809: PUSH
33810: LD_VAR 0 1
33814: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33815: LD_VAR 0 1
33819: NOT
33820: PUSH
33821: LD_VAR 0 2
33825: NOT
33826: OR
33827: PUSH
33828: LD_VAR 0 3
33832: NOT
33833: OR
33834: PUSH
33835: LD_VAR 0 2
33839: PUSH
33840: LD_VAR 0 1
33844: GREATER
33845: OR
33846: PUSH
33847: LD_VAR 0 3
33851: PUSH
33852: LD_VAR 0 1
33856: GREATER
33857: OR
33858: IFFALSE 33862
// exit ;
33860: GO 34158
// if direction then
33862: LD_VAR 0 4
33866: IFFALSE 33930
// begin d := 1 ;
33868: LD_ADDR_VAR 0 9
33872: PUSH
33873: LD_INT 1
33875: ST_TO_ADDR
// if i_from > i_to then
33876: LD_VAR 0 2
33880: PUSH
33881: LD_VAR 0 3
33885: GREATER
33886: IFFALSE 33912
// length := ( array - i_from ) + i_to else
33888: LD_ADDR_VAR 0 11
33892: PUSH
33893: LD_VAR 0 1
33897: PUSH
33898: LD_VAR 0 2
33902: MINUS
33903: PUSH
33904: LD_VAR 0 3
33908: PLUS
33909: ST_TO_ADDR
33910: GO 33928
// length := i_to - i_from ;
33912: LD_ADDR_VAR 0 11
33916: PUSH
33917: LD_VAR 0 3
33921: PUSH
33922: LD_VAR 0 2
33926: MINUS
33927: ST_TO_ADDR
// end else
33928: GO 33991
// begin d := - 1 ;
33930: LD_ADDR_VAR 0 9
33934: PUSH
33935: LD_INT 1
33937: NEG
33938: ST_TO_ADDR
// if i_from > i_to then
33939: LD_VAR 0 2
33943: PUSH
33944: LD_VAR 0 3
33948: GREATER
33949: IFFALSE 33969
// length := i_from - i_to else
33951: LD_ADDR_VAR 0 11
33955: PUSH
33956: LD_VAR 0 2
33960: PUSH
33961: LD_VAR 0 3
33965: MINUS
33966: ST_TO_ADDR
33967: GO 33991
// length := ( array - i_to ) + i_from ;
33969: LD_ADDR_VAR 0 11
33973: PUSH
33974: LD_VAR 0 1
33978: PUSH
33979: LD_VAR 0 3
33983: MINUS
33984: PUSH
33985: LD_VAR 0 2
33989: PLUS
33990: ST_TO_ADDR
// end ; if not length then
33991: LD_VAR 0 11
33995: NOT
33996: IFFALSE 34000
// exit ;
33998: GO 34158
// tmp := array ;
34000: LD_ADDR_VAR 0 10
34004: PUSH
34005: LD_VAR 0 1
34009: ST_TO_ADDR
// for i = 1 to length do
34010: LD_ADDR_VAR 0 6
34014: PUSH
34015: DOUBLE
34016: LD_INT 1
34018: DEC
34019: ST_TO_ADDR
34020: LD_VAR 0 11
34024: PUSH
34025: FOR_TO
34026: IFFALSE 34146
// begin for j = 1 to array do
34028: LD_ADDR_VAR 0 7
34032: PUSH
34033: DOUBLE
34034: LD_INT 1
34036: DEC
34037: ST_TO_ADDR
34038: LD_VAR 0 1
34042: PUSH
34043: FOR_TO
34044: IFFALSE 34132
// begin k := j + d ;
34046: LD_ADDR_VAR 0 8
34050: PUSH
34051: LD_VAR 0 7
34055: PUSH
34056: LD_VAR 0 9
34060: PLUS
34061: ST_TO_ADDR
// if k > array then
34062: LD_VAR 0 8
34066: PUSH
34067: LD_VAR 0 1
34071: GREATER
34072: IFFALSE 34082
// k := 1 ;
34074: LD_ADDR_VAR 0 8
34078: PUSH
34079: LD_INT 1
34081: ST_TO_ADDR
// if not k then
34082: LD_VAR 0 8
34086: NOT
34087: IFFALSE 34099
// k := array ;
34089: LD_ADDR_VAR 0 8
34093: PUSH
34094: LD_VAR 0 1
34098: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34099: LD_ADDR_VAR 0 10
34103: PUSH
34104: LD_VAR 0 10
34108: PPUSH
34109: LD_VAR 0 8
34113: PPUSH
34114: LD_VAR 0 1
34118: PUSH
34119: LD_VAR 0 7
34123: ARRAY
34124: PPUSH
34125: CALL_OW 1
34129: ST_TO_ADDR
// end ;
34130: GO 34043
34132: POP
34133: POP
// array := tmp ;
34134: LD_ADDR_VAR 0 1
34138: PUSH
34139: LD_VAR 0 10
34143: ST_TO_ADDR
// end ;
34144: GO 34025
34146: POP
34147: POP
// result := array ;
34148: LD_ADDR_VAR 0 5
34152: PUSH
34153: LD_VAR 0 1
34157: ST_TO_ADDR
// end ;
34158: LD_VAR 0 5
34162: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34163: LD_INT 0
34165: PPUSH
34166: PPUSH
// result := 0 ;
34167: LD_ADDR_VAR 0 3
34171: PUSH
34172: LD_INT 0
34174: ST_TO_ADDR
// if not array or not value in array then
34175: LD_VAR 0 1
34179: NOT
34180: PUSH
34181: LD_VAR 0 2
34185: PUSH
34186: LD_VAR 0 1
34190: IN
34191: NOT
34192: OR
34193: IFFALSE 34197
// exit ;
34195: GO 34251
// for i = 1 to array do
34197: LD_ADDR_VAR 0 4
34201: PUSH
34202: DOUBLE
34203: LD_INT 1
34205: DEC
34206: ST_TO_ADDR
34207: LD_VAR 0 1
34211: PUSH
34212: FOR_TO
34213: IFFALSE 34249
// if value = array [ i ] then
34215: LD_VAR 0 2
34219: PUSH
34220: LD_VAR 0 1
34224: PUSH
34225: LD_VAR 0 4
34229: ARRAY
34230: EQUAL
34231: IFFALSE 34247
// begin result := i ;
34233: LD_ADDR_VAR 0 3
34237: PUSH
34238: LD_VAR 0 4
34242: ST_TO_ADDR
// exit ;
34243: POP
34244: POP
34245: GO 34251
// end ;
34247: GO 34212
34249: POP
34250: POP
// end ;
34251: LD_VAR 0 3
34255: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34256: LD_INT 0
34258: PPUSH
// vc_chassis := chassis ;
34259: LD_ADDR_OWVAR 37
34263: PUSH
34264: LD_VAR 0 1
34268: ST_TO_ADDR
// vc_engine := engine ;
34269: LD_ADDR_OWVAR 39
34273: PUSH
34274: LD_VAR 0 2
34278: ST_TO_ADDR
// vc_control := control ;
34279: LD_ADDR_OWVAR 38
34283: PUSH
34284: LD_VAR 0 3
34288: ST_TO_ADDR
// vc_weapon := weapon ;
34289: LD_ADDR_OWVAR 40
34293: PUSH
34294: LD_VAR 0 4
34298: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34299: LD_ADDR_OWVAR 41
34303: PUSH
34304: LD_VAR 0 5
34308: ST_TO_ADDR
// end ;
34309: LD_VAR 0 6
34313: RET
// export function WantPlant ( unit ) ; var task ; begin
34314: LD_INT 0
34316: PPUSH
34317: PPUSH
// result := false ;
34318: LD_ADDR_VAR 0 2
34322: PUSH
34323: LD_INT 0
34325: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34326: LD_ADDR_VAR 0 3
34330: PUSH
34331: LD_VAR 0 1
34335: PPUSH
34336: CALL_OW 437
34340: ST_TO_ADDR
// if task then
34341: LD_VAR 0 3
34345: IFFALSE 34373
// if task [ 1 ] [ 1 ] = p then
34347: LD_VAR 0 3
34351: PUSH
34352: LD_INT 1
34354: ARRAY
34355: PUSH
34356: LD_INT 1
34358: ARRAY
34359: PUSH
34360: LD_STRING p
34362: EQUAL
34363: IFFALSE 34373
// result := true ;
34365: LD_ADDR_VAR 0 2
34369: PUSH
34370: LD_INT 1
34372: ST_TO_ADDR
// end ;
34373: LD_VAR 0 2
34377: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34378: LD_INT 0
34380: PPUSH
34381: PPUSH
34382: PPUSH
34383: PPUSH
// if pos < 1 then
34384: LD_VAR 0 2
34388: PUSH
34389: LD_INT 1
34391: LESS
34392: IFFALSE 34396
// exit ;
34394: GO 34699
// if pos = 1 then
34396: LD_VAR 0 2
34400: PUSH
34401: LD_INT 1
34403: EQUAL
34404: IFFALSE 34437
// result := Replace ( arr , pos [ 1 ] , value ) else
34406: LD_ADDR_VAR 0 4
34410: PUSH
34411: LD_VAR 0 1
34415: PPUSH
34416: LD_VAR 0 2
34420: PUSH
34421: LD_INT 1
34423: ARRAY
34424: PPUSH
34425: LD_VAR 0 3
34429: PPUSH
34430: CALL_OW 1
34434: ST_TO_ADDR
34435: GO 34699
// begin tmp := arr ;
34437: LD_ADDR_VAR 0 6
34441: PUSH
34442: LD_VAR 0 1
34446: ST_TO_ADDR
// s_arr := [ tmp ] ;
34447: LD_ADDR_VAR 0 7
34451: PUSH
34452: LD_VAR 0 6
34456: PUSH
34457: EMPTY
34458: LIST
34459: ST_TO_ADDR
// for i = 1 to pos - 1 do
34460: LD_ADDR_VAR 0 5
34464: PUSH
34465: DOUBLE
34466: LD_INT 1
34468: DEC
34469: ST_TO_ADDR
34470: LD_VAR 0 2
34474: PUSH
34475: LD_INT 1
34477: MINUS
34478: PUSH
34479: FOR_TO
34480: IFFALSE 34525
// begin tmp := tmp [ pos [ i ] ] ;
34482: LD_ADDR_VAR 0 6
34486: PUSH
34487: LD_VAR 0 6
34491: PUSH
34492: LD_VAR 0 2
34496: PUSH
34497: LD_VAR 0 5
34501: ARRAY
34502: ARRAY
34503: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34504: LD_ADDR_VAR 0 7
34508: PUSH
34509: LD_VAR 0 7
34513: PUSH
34514: LD_VAR 0 6
34518: PUSH
34519: EMPTY
34520: LIST
34521: ADD
34522: ST_TO_ADDR
// end ;
34523: GO 34479
34525: POP
34526: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34527: LD_ADDR_VAR 0 6
34531: PUSH
34532: LD_VAR 0 6
34536: PPUSH
34537: LD_VAR 0 2
34541: PUSH
34542: LD_VAR 0 2
34546: ARRAY
34547: PPUSH
34548: LD_VAR 0 3
34552: PPUSH
34553: CALL_OW 1
34557: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34558: LD_ADDR_VAR 0 7
34562: PUSH
34563: LD_VAR 0 7
34567: PPUSH
34568: LD_VAR 0 7
34572: PPUSH
34573: LD_VAR 0 6
34577: PPUSH
34578: CALL_OW 1
34582: ST_TO_ADDR
// for i = s_arr downto 2 do
34583: LD_ADDR_VAR 0 5
34587: PUSH
34588: DOUBLE
34589: LD_VAR 0 7
34593: INC
34594: ST_TO_ADDR
34595: LD_INT 2
34597: PUSH
34598: FOR_DOWNTO
34599: IFFALSE 34683
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34601: LD_ADDR_VAR 0 6
34605: PUSH
34606: LD_VAR 0 7
34610: PUSH
34611: LD_VAR 0 5
34615: PUSH
34616: LD_INT 1
34618: MINUS
34619: ARRAY
34620: PPUSH
34621: LD_VAR 0 2
34625: PUSH
34626: LD_VAR 0 5
34630: PUSH
34631: LD_INT 1
34633: MINUS
34634: ARRAY
34635: PPUSH
34636: LD_VAR 0 7
34640: PUSH
34641: LD_VAR 0 5
34645: ARRAY
34646: PPUSH
34647: CALL_OW 1
34651: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34652: LD_ADDR_VAR 0 7
34656: PUSH
34657: LD_VAR 0 7
34661: PPUSH
34662: LD_VAR 0 5
34666: PUSH
34667: LD_INT 1
34669: MINUS
34670: PPUSH
34671: LD_VAR 0 6
34675: PPUSH
34676: CALL_OW 1
34680: ST_TO_ADDR
// end ;
34681: GO 34598
34683: POP
34684: POP
// result := s_arr [ 1 ] ;
34685: LD_ADDR_VAR 0 4
34689: PUSH
34690: LD_VAR 0 7
34694: PUSH
34695: LD_INT 1
34697: ARRAY
34698: ST_TO_ADDR
// end ; end ;
34699: LD_VAR 0 4
34703: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34704: LD_INT 0
34706: PPUSH
34707: PPUSH
// if not list then
34708: LD_VAR 0 1
34712: NOT
34713: IFFALSE 34717
// exit ;
34715: GO 34808
// i := list [ pos1 ] ;
34717: LD_ADDR_VAR 0 5
34721: PUSH
34722: LD_VAR 0 1
34726: PUSH
34727: LD_VAR 0 2
34731: ARRAY
34732: ST_TO_ADDR
// if not i then
34733: LD_VAR 0 5
34737: NOT
34738: IFFALSE 34742
// exit ;
34740: GO 34808
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34742: LD_ADDR_VAR 0 1
34746: PUSH
34747: LD_VAR 0 1
34751: PPUSH
34752: LD_VAR 0 2
34756: PPUSH
34757: LD_VAR 0 1
34761: PUSH
34762: LD_VAR 0 3
34766: ARRAY
34767: PPUSH
34768: CALL_OW 1
34772: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34773: LD_ADDR_VAR 0 1
34777: PUSH
34778: LD_VAR 0 1
34782: PPUSH
34783: LD_VAR 0 3
34787: PPUSH
34788: LD_VAR 0 5
34792: PPUSH
34793: CALL_OW 1
34797: ST_TO_ADDR
// result := list ;
34798: LD_ADDR_VAR 0 4
34802: PUSH
34803: LD_VAR 0 1
34807: ST_TO_ADDR
// end ;
34808: LD_VAR 0 4
34812: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34813: LD_INT 0
34815: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34816: LD_ADDR_VAR 0 5
34820: PUSH
34821: LD_VAR 0 1
34825: PPUSH
34826: CALL_OW 250
34830: PPUSH
34831: LD_VAR 0 1
34835: PPUSH
34836: CALL_OW 251
34840: PPUSH
34841: LD_VAR 0 2
34845: PPUSH
34846: LD_VAR 0 3
34850: PPUSH
34851: LD_VAR 0 4
34855: PPUSH
34856: CALL 34866 0 5
34860: ST_TO_ADDR
// end ;
34861: LD_VAR 0 5
34865: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34866: LD_INT 0
34868: PPUSH
34869: PPUSH
34870: PPUSH
34871: PPUSH
// if not list then
34872: LD_VAR 0 3
34876: NOT
34877: IFFALSE 34881
// exit ;
34879: GO 35269
// result := [ ] ;
34881: LD_ADDR_VAR 0 6
34885: PUSH
34886: EMPTY
34887: ST_TO_ADDR
// for i in list do
34888: LD_ADDR_VAR 0 7
34892: PUSH
34893: LD_VAR 0 3
34897: PUSH
34898: FOR_IN
34899: IFFALSE 35101
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34901: LD_ADDR_VAR 0 9
34905: PUSH
34906: LD_VAR 0 7
34910: PPUSH
34911: LD_VAR 0 1
34915: PPUSH
34916: LD_VAR 0 2
34920: PPUSH
34921: CALL_OW 297
34925: ST_TO_ADDR
// if not result then
34926: LD_VAR 0 6
34930: NOT
34931: IFFALSE 34957
// result := [ [ i , tmp ] ] else
34933: LD_ADDR_VAR 0 6
34937: PUSH
34938: LD_VAR 0 7
34942: PUSH
34943: LD_VAR 0 9
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: EMPTY
34953: LIST
34954: ST_TO_ADDR
34955: GO 35099
// begin if result [ result ] [ 2 ] < tmp then
34957: LD_VAR 0 6
34961: PUSH
34962: LD_VAR 0 6
34966: ARRAY
34967: PUSH
34968: LD_INT 2
34970: ARRAY
34971: PUSH
34972: LD_VAR 0 9
34976: LESS
34977: IFFALSE 35019
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34979: LD_ADDR_VAR 0 6
34983: PUSH
34984: LD_VAR 0 6
34988: PPUSH
34989: LD_VAR 0 6
34993: PUSH
34994: LD_INT 1
34996: PLUS
34997: PPUSH
34998: LD_VAR 0 7
35002: PUSH
35003: LD_VAR 0 9
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PPUSH
35012: CALL_OW 2
35016: ST_TO_ADDR
35017: GO 35099
// for j = 1 to result do
35019: LD_ADDR_VAR 0 8
35023: PUSH
35024: DOUBLE
35025: LD_INT 1
35027: DEC
35028: ST_TO_ADDR
35029: LD_VAR 0 6
35033: PUSH
35034: FOR_TO
35035: IFFALSE 35097
// begin if tmp < result [ j ] [ 2 ] then
35037: LD_VAR 0 9
35041: PUSH
35042: LD_VAR 0 6
35046: PUSH
35047: LD_VAR 0 8
35051: ARRAY
35052: PUSH
35053: LD_INT 2
35055: ARRAY
35056: LESS
35057: IFFALSE 35095
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35059: LD_ADDR_VAR 0 6
35063: PUSH
35064: LD_VAR 0 6
35068: PPUSH
35069: LD_VAR 0 8
35073: PPUSH
35074: LD_VAR 0 7
35078: PUSH
35079: LD_VAR 0 9
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PPUSH
35088: CALL_OW 2
35092: ST_TO_ADDR
// break ;
35093: GO 35097
// end ; end ;
35095: GO 35034
35097: POP
35098: POP
// end ; end ;
35099: GO 34898
35101: POP
35102: POP
// if result and not asc then
35103: LD_VAR 0 6
35107: PUSH
35108: LD_VAR 0 4
35112: NOT
35113: AND
35114: IFFALSE 35189
// begin tmp := result ;
35116: LD_ADDR_VAR 0 9
35120: PUSH
35121: LD_VAR 0 6
35125: ST_TO_ADDR
// for i = tmp downto 1 do
35126: LD_ADDR_VAR 0 7
35130: PUSH
35131: DOUBLE
35132: LD_VAR 0 9
35136: INC
35137: ST_TO_ADDR
35138: LD_INT 1
35140: PUSH
35141: FOR_DOWNTO
35142: IFFALSE 35187
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35144: LD_ADDR_VAR 0 6
35148: PUSH
35149: LD_VAR 0 6
35153: PPUSH
35154: LD_VAR 0 9
35158: PUSH
35159: LD_VAR 0 7
35163: MINUS
35164: PUSH
35165: LD_INT 1
35167: PLUS
35168: PPUSH
35169: LD_VAR 0 9
35173: PUSH
35174: LD_VAR 0 7
35178: ARRAY
35179: PPUSH
35180: CALL_OW 1
35184: ST_TO_ADDR
35185: GO 35141
35187: POP
35188: POP
// end ; tmp := [ ] ;
35189: LD_ADDR_VAR 0 9
35193: PUSH
35194: EMPTY
35195: ST_TO_ADDR
// if mode then
35196: LD_VAR 0 5
35200: IFFALSE 35269
// begin for i = 1 to result do
35202: LD_ADDR_VAR 0 7
35206: PUSH
35207: DOUBLE
35208: LD_INT 1
35210: DEC
35211: ST_TO_ADDR
35212: LD_VAR 0 6
35216: PUSH
35217: FOR_TO
35218: IFFALSE 35257
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35220: LD_ADDR_VAR 0 9
35224: PUSH
35225: LD_VAR 0 9
35229: PPUSH
35230: LD_VAR 0 7
35234: PPUSH
35235: LD_VAR 0 6
35239: PUSH
35240: LD_VAR 0 7
35244: ARRAY
35245: PUSH
35246: LD_INT 1
35248: ARRAY
35249: PPUSH
35250: CALL_OW 1
35254: ST_TO_ADDR
35255: GO 35217
35257: POP
35258: POP
// result := tmp ;
35259: LD_ADDR_VAR 0 6
35263: PUSH
35264: LD_VAR 0 9
35268: ST_TO_ADDR
// end ; end ;
35269: LD_VAR 0 6
35273: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35274: LD_INT 0
35276: PPUSH
35277: PPUSH
35278: PPUSH
35279: PPUSH
35280: PPUSH
35281: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35282: LD_ADDR_VAR 0 5
35286: PUSH
35287: LD_INT 0
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: LD_INT 0
35295: PUSH
35296: EMPTY
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: ST_TO_ADDR
// if not x or not y then
35304: LD_VAR 0 2
35308: NOT
35309: PUSH
35310: LD_VAR 0 3
35314: NOT
35315: OR
35316: IFFALSE 35320
// exit ;
35318: GO 36972
// if not range then
35320: LD_VAR 0 4
35324: NOT
35325: IFFALSE 35335
// range := 10 ;
35327: LD_ADDR_VAR 0 4
35331: PUSH
35332: LD_INT 10
35334: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35335: LD_ADDR_VAR 0 8
35339: PUSH
35340: LD_INT 81
35342: PUSH
35343: LD_VAR 0 1
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 92
35354: PUSH
35355: LD_VAR 0 2
35359: PUSH
35360: LD_VAR 0 3
35364: PUSH
35365: LD_VAR 0 4
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 3
35378: PUSH
35379: LD_INT 21
35381: PUSH
35382: LD_INT 3
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: LIST
35397: PPUSH
35398: CALL_OW 69
35402: ST_TO_ADDR
// if not tmp then
35403: LD_VAR 0 8
35407: NOT
35408: IFFALSE 35412
// exit ;
35410: GO 36972
// for i in tmp do
35412: LD_ADDR_VAR 0 6
35416: PUSH
35417: LD_VAR 0 8
35421: PUSH
35422: FOR_IN
35423: IFFALSE 36947
// begin points := [ 0 , 0 , 0 ] ;
35425: LD_ADDR_VAR 0 9
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: LIST
35443: ST_TO_ADDR
// bpoints := 1 ;
35444: LD_ADDR_VAR 0 10
35448: PUSH
35449: LD_INT 1
35451: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35452: LD_VAR 0 6
35456: PPUSH
35457: CALL_OW 247
35461: PUSH
35462: LD_INT 1
35464: DOUBLE
35465: EQUAL
35466: IFTRUE 35470
35468: GO 36048
35470: POP
// begin if GetClass ( i ) = 1 then
35471: LD_VAR 0 6
35475: PPUSH
35476: CALL_OW 257
35480: PUSH
35481: LD_INT 1
35483: EQUAL
35484: IFFALSE 35505
// points := [ 10 , 5 , 3 ] ;
35486: LD_ADDR_VAR 0 9
35490: PUSH
35491: LD_INT 10
35493: PUSH
35494: LD_INT 5
35496: PUSH
35497: LD_INT 3
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: LIST
35504: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35505: LD_VAR 0 6
35509: PPUSH
35510: CALL_OW 257
35514: PUSH
35515: LD_INT 2
35517: PUSH
35518: LD_INT 3
35520: PUSH
35521: LD_INT 4
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: IN
35529: IFFALSE 35550
// points := [ 3 , 2 , 1 ] ;
35531: LD_ADDR_VAR 0 9
35535: PUSH
35536: LD_INT 3
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35550: LD_VAR 0 6
35554: PPUSH
35555: CALL_OW 257
35559: PUSH
35560: LD_INT 5
35562: EQUAL
35563: IFFALSE 35584
// points := [ 130 , 5 , 2 ] ;
35565: LD_ADDR_VAR 0 9
35569: PUSH
35570: LD_INT 130
35572: PUSH
35573: LD_INT 5
35575: PUSH
35576: LD_INT 2
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: LIST
35583: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35584: LD_VAR 0 6
35588: PPUSH
35589: CALL_OW 257
35593: PUSH
35594: LD_INT 8
35596: EQUAL
35597: IFFALSE 35618
// points := [ 35 , 35 , 30 ] ;
35599: LD_ADDR_VAR 0 9
35603: PUSH
35604: LD_INT 35
35606: PUSH
35607: LD_INT 35
35609: PUSH
35610: LD_INT 30
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35618: LD_VAR 0 6
35622: PPUSH
35623: CALL_OW 257
35627: PUSH
35628: LD_INT 9
35630: EQUAL
35631: IFFALSE 35652
// points := [ 20 , 55 , 40 ] ;
35633: LD_ADDR_VAR 0 9
35637: PUSH
35638: LD_INT 20
35640: PUSH
35641: LD_INT 55
35643: PUSH
35644: LD_INT 40
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: LIST
35651: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35652: LD_VAR 0 6
35656: PPUSH
35657: CALL_OW 257
35661: PUSH
35662: LD_INT 12
35664: PUSH
35665: LD_INT 16
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: IN
35672: IFFALSE 35693
// points := [ 5 , 3 , 2 ] ;
35674: LD_ADDR_VAR 0 9
35678: PUSH
35679: LD_INT 5
35681: PUSH
35682: LD_INT 3
35684: PUSH
35685: LD_INT 2
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: LIST
35692: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35693: LD_VAR 0 6
35697: PPUSH
35698: CALL_OW 257
35702: PUSH
35703: LD_INT 17
35705: EQUAL
35706: IFFALSE 35727
// points := [ 100 , 50 , 75 ] ;
35708: LD_ADDR_VAR 0 9
35712: PUSH
35713: LD_INT 100
35715: PUSH
35716: LD_INT 50
35718: PUSH
35719: LD_INT 75
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: LIST
35726: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35727: LD_VAR 0 6
35731: PPUSH
35732: CALL_OW 257
35736: PUSH
35737: LD_INT 15
35739: EQUAL
35740: IFFALSE 35761
// points := [ 10 , 5 , 3 ] ;
35742: LD_ADDR_VAR 0 9
35746: PUSH
35747: LD_INT 10
35749: PUSH
35750: LD_INT 5
35752: PUSH
35753: LD_INT 3
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: LIST
35760: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35761: LD_VAR 0 6
35765: PPUSH
35766: CALL_OW 257
35770: PUSH
35771: LD_INT 14
35773: EQUAL
35774: IFFALSE 35795
// points := [ 10 , 0 , 0 ] ;
35776: LD_ADDR_VAR 0 9
35780: PUSH
35781: LD_INT 10
35783: PUSH
35784: LD_INT 0
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: LIST
35794: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35795: LD_VAR 0 6
35799: PPUSH
35800: CALL_OW 257
35804: PUSH
35805: LD_INT 11
35807: EQUAL
35808: IFFALSE 35829
// points := [ 30 , 10 , 5 ] ;
35810: LD_ADDR_VAR 0 9
35814: PUSH
35815: LD_INT 30
35817: PUSH
35818: LD_INT 10
35820: PUSH
35821: LD_INT 5
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35829: LD_VAR 0 1
35833: PPUSH
35834: LD_INT 5
35836: PPUSH
35837: CALL_OW 321
35841: PUSH
35842: LD_INT 2
35844: EQUAL
35845: IFFALSE 35862
// bpoints := bpoints * 1.8 ;
35847: LD_ADDR_VAR 0 10
35851: PUSH
35852: LD_VAR 0 10
35856: PUSH
35857: LD_REAL  1.80000000000000E+0000
35860: MUL
35861: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35862: LD_VAR 0 6
35866: PPUSH
35867: CALL_OW 257
35871: PUSH
35872: LD_INT 1
35874: PUSH
35875: LD_INT 2
35877: PUSH
35878: LD_INT 3
35880: PUSH
35881: LD_INT 4
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: IN
35890: PUSH
35891: LD_VAR 0 1
35895: PPUSH
35896: LD_INT 51
35898: PPUSH
35899: CALL_OW 321
35903: PUSH
35904: LD_INT 2
35906: EQUAL
35907: AND
35908: IFFALSE 35925
// bpoints := bpoints * 1.2 ;
35910: LD_ADDR_VAR 0 10
35914: PUSH
35915: LD_VAR 0 10
35919: PUSH
35920: LD_REAL  1.20000000000000E+0000
35923: MUL
35924: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35925: LD_VAR 0 6
35929: PPUSH
35930: CALL_OW 257
35934: PUSH
35935: LD_INT 5
35937: PUSH
35938: LD_INT 7
35940: PUSH
35941: LD_INT 9
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: IN
35949: PUSH
35950: LD_VAR 0 1
35954: PPUSH
35955: LD_INT 52
35957: PPUSH
35958: CALL_OW 321
35962: PUSH
35963: LD_INT 2
35965: EQUAL
35966: AND
35967: IFFALSE 35984
// bpoints := bpoints * 1.5 ;
35969: LD_ADDR_VAR 0 10
35973: PUSH
35974: LD_VAR 0 10
35978: PUSH
35979: LD_REAL  1.50000000000000E+0000
35982: MUL
35983: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35984: LD_VAR 0 1
35988: PPUSH
35989: LD_INT 66
35991: PPUSH
35992: CALL_OW 321
35996: PUSH
35997: LD_INT 2
35999: EQUAL
36000: IFFALSE 36017
// bpoints := bpoints * 1.1 ;
36002: LD_ADDR_VAR 0 10
36006: PUSH
36007: LD_VAR 0 10
36011: PUSH
36012: LD_REAL  1.10000000000000E+0000
36015: MUL
36016: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36017: LD_ADDR_VAR 0 10
36021: PUSH
36022: LD_VAR 0 10
36026: PUSH
36027: LD_VAR 0 6
36031: PPUSH
36032: LD_INT 1
36034: PPUSH
36035: CALL_OW 259
36039: PUSH
36040: LD_REAL  1.15000000000000E+0000
36043: MUL
36044: MUL
36045: ST_TO_ADDR
// end ; unit_vehicle :
36046: GO 36876
36048: LD_INT 2
36050: DOUBLE
36051: EQUAL
36052: IFTRUE 36056
36054: GO 36864
36056: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36057: LD_VAR 0 6
36061: PPUSH
36062: CALL_OW 264
36066: PUSH
36067: LD_INT 2
36069: PUSH
36070: LD_INT 42
36072: PUSH
36073: LD_INT 24
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: IN
36081: IFFALSE 36102
// points := [ 25 , 5 , 3 ] ;
36083: LD_ADDR_VAR 0 9
36087: PUSH
36088: LD_INT 25
36090: PUSH
36091: LD_INT 5
36093: PUSH
36094: LD_INT 3
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36102: LD_VAR 0 6
36106: PPUSH
36107: CALL_OW 264
36111: PUSH
36112: LD_INT 4
36114: PUSH
36115: LD_INT 43
36117: PUSH
36118: LD_INT 25
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: LIST
36125: IN
36126: IFFALSE 36147
// points := [ 40 , 15 , 5 ] ;
36128: LD_ADDR_VAR 0 9
36132: PUSH
36133: LD_INT 40
36135: PUSH
36136: LD_INT 15
36138: PUSH
36139: LD_INT 5
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: LIST
36146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36147: LD_VAR 0 6
36151: PPUSH
36152: CALL_OW 264
36156: PUSH
36157: LD_INT 3
36159: PUSH
36160: LD_INT 23
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: IN
36167: IFFALSE 36188
// points := [ 7 , 25 , 8 ] ;
36169: LD_ADDR_VAR 0 9
36173: PUSH
36174: LD_INT 7
36176: PUSH
36177: LD_INT 25
36179: PUSH
36180: LD_INT 8
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: LIST
36187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36188: LD_VAR 0 6
36192: PPUSH
36193: CALL_OW 264
36197: PUSH
36198: LD_INT 5
36200: PUSH
36201: LD_INT 27
36203: PUSH
36204: LD_INT 44
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: LIST
36211: IN
36212: IFFALSE 36233
// points := [ 14 , 50 , 16 ] ;
36214: LD_ADDR_VAR 0 9
36218: PUSH
36219: LD_INT 14
36221: PUSH
36222: LD_INT 50
36224: PUSH
36225: LD_INT 16
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: LIST
36232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36233: LD_VAR 0 6
36237: PPUSH
36238: CALL_OW 264
36242: PUSH
36243: LD_INT 6
36245: PUSH
36246: LD_INT 46
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: IN
36253: IFFALSE 36274
// points := [ 32 , 120 , 70 ] ;
36255: LD_ADDR_VAR 0 9
36259: PUSH
36260: LD_INT 32
36262: PUSH
36263: LD_INT 120
36265: PUSH
36266: LD_INT 70
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: LIST
36273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36274: LD_VAR 0 6
36278: PPUSH
36279: CALL_OW 264
36283: PUSH
36284: LD_INT 7
36286: PUSH
36287: LD_INT 28
36289: PUSH
36290: LD_INT 45
36292: PUSH
36293: LD_EXP 50
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: IN
36304: IFFALSE 36325
// points := [ 35 , 20 , 45 ] ;
36306: LD_ADDR_VAR 0 9
36310: PUSH
36311: LD_INT 35
36313: PUSH
36314: LD_INT 20
36316: PUSH
36317: LD_INT 45
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: LIST
36324: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36325: LD_VAR 0 6
36329: PPUSH
36330: CALL_OW 264
36334: PUSH
36335: LD_INT 47
36337: PUSH
36338: EMPTY
36339: LIST
36340: IN
36341: IFFALSE 36362
// points := [ 67 , 45 , 75 ] ;
36343: LD_ADDR_VAR 0 9
36347: PUSH
36348: LD_INT 67
36350: PUSH
36351: LD_INT 45
36353: PUSH
36354: LD_INT 75
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: LIST
36361: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36362: LD_VAR 0 6
36366: PPUSH
36367: CALL_OW 264
36371: PUSH
36372: LD_INT 26
36374: PUSH
36375: EMPTY
36376: LIST
36377: IN
36378: IFFALSE 36399
// points := [ 120 , 30 , 80 ] ;
36380: LD_ADDR_VAR 0 9
36384: PUSH
36385: LD_INT 120
36387: PUSH
36388: LD_INT 30
36390: PUSH
36391: LD_INT 80
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36399: LD_VAR 0 6
36403: PPUSH
36404: CALL_OW 264
36408: PUSH
36409: LD_INT 22
36411: PUSH
36412: EMPTY
36413: LIST
36414: IN
36415: IFFALSE 36436
// points := [ 40 , 1 , 1 ] ;
36417: LD_ADDR_VAR 0 9
36421: PUSH
36422: LD_INT 40
36424: PUSH
36425: LD_INT 1
36427: PUSH
36428: LD_INT 1
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: LIST
36435: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36436: LD_VAR 0 6
36440: PPUSH
36441: CALL_OW 264
36445: PUSH
36446: LD_INT 29
36448: PUSH
36449: EMPTY
36450: LIST
36451: IN
36452: IFFALSE 36473
// points := [ 70 , 200 , 400 ] ;
36454: LD_ADDR_VAR 0 9
36458: PUSH
36459: LD_INT 70
36461: PUSH
36462: LD_INT 200
36464: PUSH
36465: LD_INT 400
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: LIST
36472: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36473: LD_VAR 0 6
36477: PPUSH
36478: CALL_OW 264
36482: PUSH
36483: LD_INT 14
36485: PUSH
36486: LD_INT 53
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: IN
36493: IFFALSE 36514
// points := [ 40 , 10 , 20 ] ;
36495: LD_ADDR_VAR 0 9
36499: PUSH
36500: LD_INT 40
36502: PUSH
36503: LD_INT 10
36505: PUSH
36506: LD_INT 20
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36514: LD_VAR 0 6
36518: PPUSH
36519: CALL_OW 264
36523: PUSH
36524: LD_INT 9
36526: PUSH
36527: EMPTY
36528: LIST
36529: IN
36530: IFFALSE 36551
// points := [ 5 , 70 , 20 ] ;
36532: LD_ADDR_VAR 0 9
36536: PUSH
36537: LD_INT 5
36539: PUSH
36540: LD_INT 70
36542: PUSH
36543: LD_INT 20
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: LIST
36550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36551: LD_VAR 0 6
36555: PPUSH
36556: CALL_OW 264
36560: PUSH
36561: LD_INT 10
36563: PUSH
36564: EMPTY
36565: LIST
36566: IN
36567: IFFALSE 36588
// points := [ 35 , 110 , 70 ] ;
36569: LD_ADDR_VAR 0 9
36573: PUSH
36574: LD_INT 35
36576: PUSH
36577: LD_INT 110
36579: PUSH
36580: LD_INT 70
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36588: LD_VAR 0 6
36592: PPUSH
36593: CALL_OW 265
36597: PUSH
36598: LD_INT 25
36600: EQUAL
36601: IFFALSE 36622
// points := [ 80 , 65 , 100 ] ;
36603: LD_ADDR_VAR 0 9
36607: PUSH
36608: LD_INT 80
36610: PUSH
36611: LD_INT 65
36613: PUSH
36614: LD_INT 100
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36622: LD_VAR 0 6
36626: PPUSH
36627: CALL_OW 263
36631: PUSH
36632: LD_INT 1
36634: EQUAL
36635: IFFALSE 36670
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36637: LD_ADDR_VAR 0 10
36641: PUSH
36642: LD_VAR 0 10
36646: PUSH
36647: LD_VAR 0 6
36651: PPUSH
36652: CALL_OW 311
36656: PPUSH
36657: LD_INT 3
36659: PPUSH
36660: CALL_OW 259
36664: PUSH
36665: LD_INT 4
36667: MUL
36668: MUL
36669: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36670: LD_VAR 0 6
36674: PPUSH
36675: CALL_OW 263
36679: PUSH
36680: LD_INT 2
36682: EQUAL
36683: IFFALSE 36734
// begin j := IsControledBy ( i ) ;
36685: LD_ADDR_VAR 0 7
36689: PUSH
36690: LD_VAR 0 6
36694: PPUSH
36695: CALL_OW 312
36699: ST_TO_ADDR
// if j then
36700: LD_VAR 0 7
36704: IFFALSE 36734
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36706: LD_ADDR_VAR 0 10
36710: PUSH
36711: LD_VAR 0 10
36715: PUSH
36716: LD_VAR 0 7
36720: PPUSH
36721: LD_INT 3
36723: PPUSH
36724: CALL_OW 259
36728: PUSH
36729: LD_INT 3
36731: MUL
36732: MUL
36733: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36734: LD_VAR 0 6
36738: PPUSH
36739: CALL_OW 264
36743: PUSH
36744: LD_INT 5
36746: PUSH
36747: LD_INT 6
36749: PUSH
36750: LD_INT 46
36752: PUSH
36753: LD_INT 44
36755: PUSH
36756: LD_INT 47
36758: PUSH
36759: LD_INT 45
36761: PUSH
36762: LD_INT 28
36764: PUSH
36765: LD_INT 7
36767: PUSH
36768: LD_INT 27
36770: PUSH
36771: LD_INT 29
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: IN
36786: PUSH
36787: LD_VAR 0 1
36791: PPUSH
36792: LD_INT 52
36794: PPUSH
36795: CALL_OW 321
36799: PUSH
36800: LD_INT 2
36802: EQUAL
36803: AND
36804: IFFALSE 36821
// bpoints := bpoints * 1.2 ;
36806: LD_ADDR_VAR 0 10
36810: PUSH
36811: LD_VAR 0 10
36815: PUSH
36816: LD_REAL  1.20000000000000E+0000
36819: MUL
36820: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36821: LD_VAR 0 6
36825: PPUSH
36826: CALL_OW 264
36830: PUSH
36831: LD_INT 6
36833: PUSH
36834: LD_INT 46
36836: PUSH
36837: LD_INT 47
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: LIST
36844: IN
36845: IFFALSE 36862
// bpoints := bpoints * 1.2 ;
36847: LD_ADDR_VAR 0 10
36851: PUSH
36852: LD_VAR 0 10
36856: PUSH
36857: LD_REAL  1.20000000000000E+0000
36860: MUL
36861: ST_TO_ADDR
// end ; unit_building :
36862: GO 36876
36864: LD_INT 3
36866: DOUBLE
36867: EQUAL
36868: IFTRUE 36872
36870: GO 36875
36872: POP
// ; end ;
36873: GO 36876
36875: POP
// for j = 1 to 3 do
36876: LD_ADDR_VAR 0 7
36880: PUSH
36881: DOUBLE
36882: LD_INT 1
36884: DEC
36885: ST_TO_ADDR
36886: LD_INT 3
36888: PUSH
36889: FOR_TO
36890: IFFALSE 36943
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36892: LD_ADDR_VAR 0 5
36896: PUSH
36897: LD_VAR 0 5
36901: PPUSH
36902: LD_VAR 0 7
36906: PPUSH
36907: LD_VAR 0 5
36911: PUSH
36912: LD_VAR 0 7
36916: ARRAY
36917: PUSH
36918: LD_VAR 0 9
36922: PUSH
36923: LD_VAR 0 7
36927: ARRAY
36928: PUSH
36929: LD_VAR 0 10
36933: MUL
36934: PLUS
36935: PPUSH
36936: CALL_OW 1
36940: ST_TO_ADDR
36941: GO 36889
36943: POP
36944: POP
// end ;
36945: GO 35422
36947: POP
36948: POP
// result := Replace ( result , 4 , tmp ) ;
36949: LD_ADDR_VAR 0 5
36953: PUSH
36954: LD_VAR 0 5
36958: PPUSH
36959: LD_INT 4
36961: PPUSH
36962: LD_VAR 0 8
36966: PPUSH
36967: CALL_OW 1
36971: ST_TO_ADDR
// end ;
36972: LD_VAR 0 5
36976: RET
// export function DangerAtRange ( unit , range ) ; begin
36977: LD_INT 0
36979: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36980: LD_ADDR_VAR 0 3
36984: PUSH
36985: LD_VAR 0 1
36989: PPUSH
36990: CALL_OW 255
36994: PPUSH
36995: LD_VAR 0 1
36999: PPUSH
37000: CALL_OW 250
37004: PPUSH
37005: LD_VAR 0 1
37009: PPUSH
37010: CALL_OW 251
37014: PPUSH
37015: LD_VAR 0 2
37019: PPUSH
37020: CALL 35274 0 4
37024: ST_TO_ADDR
// end ;
37025: LD_VAR 0 3
37029: RET
// export function DangerInArea ( side , area ) ; begin
37030: LD_INT 0
37032: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37033: LD_ADDR_VAR 0 3
37037: PUSH
37038: LD_VAR 0 2
37042: PPUSH
37043: LD_INT 81
37045: PUSH
37046: LD_VAR 0 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PPUSH
37055: CALL_OW 70
37059: ST_TO_ADDR
// end ;
37060: LD_VAR 0 3
37064: RET
// export function IsExtension ( b ) ; begin
37065: LD_INT 0
37067: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37068: LD_ADDR_VAR 0 2
37072: PUSH
37073: LD_VAR 0 1
37077: PUSH
37078: LD_INT 23
37080: PUSH
37081: LD_INT 20
37083: PUSH
37084: LD_INT 22
37086: PUSH
37087: LD_INT 17
37089: PUSH
37090: LD_INT 24
37092: PUSH
37093: LD_INT 21
37095: PUSH
37096: LD_INT 19
37098: PUSH
37099: LD_INT 16
37101: PUSH
37102: LD_INT 25
37104: PUSH
37105: LD_INT 18
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: IN
37120: ST_TO_ADDR
// end ;
37121: LD_VAR 0 2
37125: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37126: LD_INT 0
37128: PPUSH
37129: PPUSH
37130: PPUSH
// result := [ ] ;
37131: LD_ADDR_VAR 0 4
37135: PUSH
37136: EMPTY
37137: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37138: LD_ADDR_VAR 0 5
37142: PUSH
37143: LD_VAR 0 2
37147: PPUSH
37148: LD_INT 21
37150: PUSH
37151: LD_INT 3
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PPUSH
37158: CALL_OW 70
37162: ST_TO_ADDR
// if not tmp then
37163: LD_VAR 0 5
37167: NOT
37168: IFFALSE 37172
// exit ;
37170: GO 37236
// if checkLink then
37172: LD_VAR 0 3
37176: IFFALSE 37226
// begin for i in tmp do
37178: LD_ADDR_VAR 0 6
37182: PUSH
37183: LD_VAR 0 5
37187: PUSH
37188: FOR_IN
37189: IFFALSE 37224
// if GetBase ( i ) <> base then
37191: LD_VAR 0 6
37195: PPUSH
37196: CALL_OW 274
37200: PUSH
37201: LD_VAR 0 1
37205: NONEQUAL
37206: IFFALSE 37222
// ComLinkToBase ( base , i ) ;
37208: LD_VAR 0 1
37212: PPUSH
37213: LD_VAR 0 6
37217: PPUSH
37218: CALL_OW 169
37222: GO 37188
37224: POP
37225: POP
// end ; result := tmp ;
37226: LD_ADDR_VAR 0 4
37230: PUSH
37231: LD_VAR 0 5
37235: ST_TO_ADDR
// end ;
37236: LD_VAR 0 4
37240: RET
// export function ComComplete ( units , b ) ; var i ; begin
37241: LD_INT 0
37243: PPUSH
37244: PPUSH
// if not units then
37245: LD_VAR 0 1
37249: NOT
37250: IFFALSE 37254
// exit ;
37252: GO 37344
// for i in units do
37254: LD_ADDR_VAR 0 4
37258: PUSH
37259: LD_VAR 0 1
37263: PUSH
37264: FOR_IN
37265: IFFALSE 37342
// if BuildingStatus ( b ) = bs_build then
37267: LD_VAR 0 2
37271: PPUSH
37272: CALL_OW 461
37276: PUSH
37277: LD_INT 1
37279: EQUAL
37280: IFFALSE 37340
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37282: LD_VAR 0 4
37286: PPUSH
37287: LD_STRING h
37289: PUSH
37290: LD_VAR 0 2
37294: PPUSH
37295: CALL_OW 250
37299: PUSH
37300: LD_VAR 0 2
37304: PPUSH
37305: CALL_OW 251
37309: PUSH
37310: LD_VAR 0 2
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: PUSH
37333: EMPTY
37334: LIST
37335: PPUSH
37336: CALL_OW 446
37340: GO 37264
37342: POP
37343: POP
// end ;
37344: LD_VAR 0 3
37348: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37349: LD_INT 0
37351: PPUSH
37352: PPUSH
37353: PPUSH
37354: PPUSH
37355: PPUSH
37356: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37357: LD_VAR 0 1
37361: NOT
37362: PUSH
37363: LD_VAR 0 1
37367: PPUSH
37368: CALL_OW 263
37372: PUSH
37373: LD_INT 2
37375: NONEQUAL
37376: OR
37377: IFFALSE 37381
// exit ;
37379: GO 37697
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37381: LD_ADDR_VAR 0 6
37385: PUSH
37386: LD_INT 22
37388: PUSH
37389: LD_VAR 0 1
37393: PPUSH
37394: CALL_OW 255
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: LD_INT 30
37408: PUSH
37409: LD_INT 36
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 34
37418: PUSH
37419: LD_INT 31
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: LIST
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PPUSH
37435: CALL_OW 69
37439: ST_TO_ADDR
// if not tmp then
37440: LD_VAR 0 6
37444: NOT
37445: IFFALSE 37449
// exit ;
37447: GO 37697
// result := [ ] ;
37449: LD_ADDR_VAR 0 2
37453: PUSH
37454: EMPTY
37455: ST_TO_ADDR
// for i in tmp do
37456: LD_ADDR_VAR 0 3
37460: PUSH
37461: LD_VAR 0 6
37465: PUSH
37466: FOR_IN
37467: IFFALSE 37538
// begin t := UnitsInside ( i ) ;
37469: LD_ADDR_VAR 0 4
37473: PUSH
37474: LD_VAR 0 3
37478: PPUSH
37479: CALL_OW 313
37483: ST_TO_ADDR
// if t then
37484: LD_VAR 0 4
37488: IFFALSE 37536
// for j in t do
37490: LD_ADDR_VAR 0 7
37494: PUSH
37495: LD_VAR 0 4
37499: PUSH
37500: FOR_IN
37501: IFFALSE 37534
// result := Replace ( result , result + 1 , j ) ;
37503: LD_ADDR_VAR 0 2
37507: PUSH
37508: LD_VAR 0 2
37512: PPUSH
37513: LD_VAR 0 2
37517: PUSH
37518: LD_INT 1
37520: PLUS
37521: PPUSH
37522: LD_VAR 0 7
37526: PPUSH
37527: CALL_OW 1
37531: ST_TO_ADDR
37532: GO 37500
37534: POP
37535: POP
// end ;
37536: GO 37466
37538: POP
37539: POP
// if not result then
37540: LD_VAR 0 2
37544: NOT
37545: IFFALSE 37549
// exit ;
37547: GO 37697
// mech := result [ 1 ] ;
37549: LD_ADDR_VAR 0 5
37553: PUSH
37554: LD_VAR 0 2
37558: PUSH
37559: LD_INT 1
37561: ARRAY
37562: ST_TO_ADDR
// if result > 1 then
37563: LD_VAR 0 2
37567: PUSH
37568: LD_INT 1
37570: GREATER
37571: IFFALSE 37683
// begin for i = 2 to result do
37573: LD_ADDR_VAR 0 3
37577: PUSH
37578: DOUBLE
37579: LD_INT 2
37581: DEC
37582: ST_TO_ADDR
37583: LD_VAR 0 2
37587: PUSH
37588: FOR_TO
37589: IFFALSE 37681
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37591: LD_ADDR_VAR 0 4
37595: PUSH
37596: LD_VAR 0 2
37600: PUSH
37601: LD_VAR 0 3
37605: ARRAY
37606: PPUSH
37607: LD_INT 3
37609: PPUSH
37610: CALL_OW 259
37614: PUSH
37615: LD_VAR 0 2
37619: PUSH
37620: LD_VAR 0 3
37624: ARRAY
37625: PPUSH
37626: CALL_OW 432
37630: MINUS
37631: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37632: LD_VAR 0 4
37636: PUSH
37637: LD_VAR 0 5
37641: PPUSH
37642: LD_INT 3
37644: PPUSH
37645: CALL_OW 259
37649: PUSH
37650: LD_VAR 0 5
37654: PPUSH
37655: CALL_OW 432
37659: MINUS
37660: GREATEREQUAL
37661: IFFALSE 37679
// mech := result [ i ] ;
37663: LD_ADDR_VAR 0 5
37667: PUSH
37668: LD_VAR 0 2
37672: PUSH
37673: LD_VAR 0 3
37677: ARRAY
37678: ST_TO_ADDR
// end ;
37679: GO 37588
37681: POP
37682: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37683: LD_VAR 0 1
37687: PPUSH
37688: LD_VAR 0 5
37692: PPUSH
37693: CALL_OW 135
// end ;
37697: LD_VAR 0 2
37701: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37702: LD_INT 0
37704: PPUSH
37705: PPUSH
37706: PPUSH
37707: PPUSH
37708: PPUSH
37709: PPUSH
37710: PPUSH
37711: PPUSH
37712: PPUSH
37713: PPUSH
37714: PPUSH
37715: PPUSH
37716: PPUSH
// result := [ ] ;
37717: LD_ADDR_VAR 0 7
37721: PUSH
37722: EMPTY
37723: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37724: LD_VAR 0 1
37728: PPUSH
37729: CALL_OW 266
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: LD_INT 1
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: IN
37744: NOT
37745: IFFALSE 37749
// exit ;
37747: GO 39383
// if name then
37749: LD_VAR 0 3
37753: IFFALSE 37769
// SetBName ( base_dep , name ) ;
37755: LD_VAR 0 1
37759: PPUSH
37760: LD_VAR 0 3
37764: PPUSH
37765: CALL_OW 500
// base := GetBase ( base_dep ) ;
37769: LD_ADDR_VAR 0 15
37773: PUSH
37774: LD_VAR 0 1
37778: PPUSH
37779: CALL_OW 274
37783: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37784: LD_ADDR_VAR 0 16
37788: PUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: CALL_OW 255
37798: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37799: LD_ADDR_VAR 0 17
37803: PUSH
37804: LD_VAR 0 1
37808: PPUSH
37809: CALL_OW 248
37813: ST_TO_ADDR
// if sources then
37814: LD_VAR 0 5
37818: IFFALSE 37865
// for i = 1 to 3 do
37820: LD_ADDR_VAR 0 8
37824: PUSH
37825: DOUBLE
37826: LD_INT 1
37828: DEC
37829: ST_TO_ADDR
37830: LD_INT 3
37832: PUSH
37833: FOR_TO
37834: IFFALSE 37863
// AddResourceType ( base , i , sources [ i ] ) ;
37836: LD_VAR 0 15
37840: PPUSH
37841: LD_VAR 0 8
37845: PPUSH
37846: LD_VAR 0 5
37850: PUSH
37851: LD_VAR 0 8
37855: ARRAY
37856: PPUSH
37857: CALL_OW 276
37861: GO 37833
37863: POP
37864: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37865: LD_ADDR_VAR 0 18
37869: PUSH
37870: LD_VAR 0 15
37874: PPUSH
37875: LD_VAR 0 2
37879: PPUSH
37880: LD_INT 1
37882: PPUSH
37883: CALL 37126 0 3
37887: ST_TO_ADDR
// InitHc ;
37888: CALL_OW 19
// InitUc ;
37892: CALL_OW 18
// uc_side := side ;
37896: LD_ADDR_OWVAR 20
37900: PUSH
37901: LD_VAR 0 16
37905: ST_TO_ADDR
// uc_nation := nation ;
37906: LD_ADDR_OWVAR 21
37910: PUSH
37911: LD_VAR 0 17
37915: ST_TO_ADDR
// if buildings then
37916: LD_VAR 0 18
37920: IFFALSE 39242
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37922: LD_ADDR_VAR 0 19
37926: PUSH
37927: LD_VAR 0 18
37931: PPUSH
37932: LD_INT 2
37934: PUSH
37935: LD_INT 30
37937: PUSH
37938: LD_INT 29
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 30
37947: PUSH
37948: LD_INT 30
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: LIST
37959: PPUSH
37960: CALL_OW 72
37964: ST_TO_ADDR
// if tmp then
37965: LD_VAR 0 19
37969: IFFALSE 38017
// for i in tmp do
37971: LD_ADDR_VAR 0 8
37975: PUSH
37976: LD_VAR 0 19
37980: PUSH
37981: FOR_IN
37982: IFFALSE 38015
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37984: LD_VAR 0 8
37988: PPUSH
37989: CALL_OW 250
37993: PPUSH
37994: LD_VAR 0 8
37998: PPUSH
37999: CALL_OW 251
38003: PPUSH
38004: LD_VAR 0 16
38008: PPUSH
38009: CALL_OW 441
38013: GO 37981
38015: POP
38016: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38017: LD_VAR 0 18
38021: PPUSH
38022: LD_INT 2
38024: PUSH
38025: LD_INT 30
38027: PUSH
38028: LD_INT 32
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 30
38037: PUSH
38038: LD_INT 33
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: LIST
38049: PPUSH
38050: CALL_OW 72
38054: IFFALSE 38142
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38056: LD_ADDR_VAR 0 8
38060: PUSH
38061: LD_VAR 0 18
38065: PPUSH
38066: LD_INT 2
38068: PUSH
38069: LD_INT 30
38071: PUSH
38072: LD_INT 32
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 30
38081: PUSH
38082: LD_INT 33
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: PPUSH
38094: CALL_OW 72
38098: PUSH
38099: FOR_IN
38100: IFFALSE 38140
// begin if not GetBWeapon ( i ) then
38102: LD_VAR 0 8
38106: PPUSH
38107: CALL_OW 269
38111: NOT
38112: IFFALSE 38138
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38114: LD_VAR 0 8
38118: PPUSH
38119: LD_VAR 0 8
38123: PPUSH
38124: LD_VAR 0 2
38128: PPUSH
38129: CALL 39388 0 2
38133: PPUSH
38134: CALL_OW 431
// end ;
38138: GO 38099
38140: POP
38141: POP
// end ; for i = 1 to personel do
38142: LD_ADDR_VAR 0 8
38146: PUSH
38147: DOUBLE
38148: LD_INT 1
38150: DEC
38151: ST_TO_ADDR
38152: LD_VAR 0 6
38156: PUSH
38157: FOR_TO
38158: IFFALSE 39222
// begin if i > 4 then
38160: LD_VAR 0 8
38164: PUSH
38165: LD_INT 4
38167: GREATER
38168: IFFALSE 38172
// break ;
38170: GO 39222
// case i of 1 :
38172: LD_VAR 0 8
38176: PUSH
38177: LD_INT 1
38179: DOUBLE
38180: EQUAL
38181: IFTRUE 38185
38183: GO 38265
38185: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38186: LD_ADDR_VAR 0 12
38190: PUSH
38191: LD_VAR 0 18
38195: PPUSH
38196: LD_INT 22
38198: PUSH
38199: LD_VAR 0 16
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 58
38210: PUSH
38211: EMPTY
38212: LIST
38213: PUSH
38214: LD_INT 2
38216: PUSH
38217: LD_INT 30
38219: PUSH
38220: LD_INT 32
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 30
38229: PUSH
38230: LD_INT 4
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 30
38239: PUSH
38240: LD_INT 5
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: LIST
38257: PPUSH
38258: CALL_OW 72
38262: ST_TO_ADDR
38263: GO 38487
38265: LD_INT 2
38267: DOUBLE
38268: EQUAL
38269: IFTRUE 38273
38271: GO 38335
38273: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38274: LD_ADDR_VAR 0 12
38278: PUSH
38279: LD_VAR 0 18
38283: PPUSH
38284: LD_INT 22
38286: PUSH
38287: LD_VAR 0 16
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 2
38298: PUSH
38299: LD_INT 30
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 30
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: LIST
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PPUSH
38328: CALL_OW 72
38332: ST_TO_ADDR
38333: GO 38487
38335: LD_INT 3
38337: DOUBLE
38338: EQUAL
38339: IFTRUE 38343
38341: GO 38405
38343: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38344: LD_ADDR_VAR 0 12
38348: PUSH
38349: LD_VAR 0 18
38353: PPUSH
38354: LD_INT 22
38356: PUSH
38357: LD_VAR 0 16
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: LD_INT 30
38371: PUSH
38372: LD_INT 2
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 30
38381: PUSH
38382: LD_INT 3
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PPUSH
38398: CALL_OW 72
38402: ST_TO_ADDR
38403: GO 38487
38405: LD_INT 4
38407: DOUBLE
38408: EQUAL
38409: IFTRUE 38413
38411: GO 38486
38413: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38414: LD_ADDR_VAR 0 12
38418: PUSH
38419: LD_VAR 0 18
38423: PPUSH
38424: LD_INT 22
38426: PUSH
38427: LD_VAR 0 16
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: LD_INT 30
38441: PUSH
38442: LD_INT 6
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 30
38451: PUSH
38452: LD_INT 7
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 30
38461: PUSH
38462: LD_INT 8
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PPUSH
38479: CALL_OW 72
38483: ST_TO_ADDR
38484: GO 38487
38486: POP
// if i = 1 then
38487: LD_VAR 0 8
38491: PUSH
38492: LD_INT 1
38494: EQUAL
38495: IFFALSE 38606
// begin tmp := [ ] ;
38497: LD_ADDR_VAR 0 19
38501: PUSH
38502: EMPTY
38503: ST_TO_ADDR
// for j in f do
38504: LD_ADDR_VAR 0 9
38508: PUSH
38509: LD_VAR 0 12
38513: PUSH
38514: FOR_IN
38515: IFFALSE 38588
// if GetBType ( j ) = b_bunker then
38517: LD_VAR 0 9
38521: PPUSH
38522: CALL_OW 266
38526: PUSH
38527: LD_INT 32
38529: EQUAL
38530: IFFALSE 38557
// tmp := Insert ( tmp , 1 , j ) else
38532: LD_ADDR_VAR 0 19
38536: PUSH
38537: LD_VAR 0 19
38541: PPUSH
38542: LD_INT 1
38544: PPUSH
38545: LD_VAR 0 9
38549: PPUSH
38550: CALL_OW 2
38554: ST_TO_ADDR
38555: GO 38586
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38557: LD_ADDR_VAR 0 19
38561: PUSH
38562: LD_VAR 0 19
38566: PPUSH
38567: LD_VAR 0 19
38571: PUSH
38572: LD_INT 1
38574: PLUS
38575: PPUSH
38576: LD_VAR 0 9
38580: PPUSH
38581: CALL_OW 2
38585: ST_TO_ADDR
38586: GO 38514
38588: POP
38589: POP
// if tmp then
38590: LD_VAR 0 19
38594: IFFALSE 38606
// f := tmp ;
38596: LD_ADDR_VAR 0 12
38600: PUSH
38601: LD_VAR 0 19
38605: ST_TO_ADDR
// end ; x := personel [ i ] ;
38606: LD_ADDR_VAR 0 13
38610: PUSH
38611: LD_VAR 0 6
38615: PUSH
38616: LD_VAR 0 8
38620: ARRAY
38621: ST_TO_ADDR
// if x = - 1 then
38622: LD_VAR 0 13
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: EQUAL
38631: IFFALSE 38840
// begin for j in f do
38633: LD_ADDR_VAR 0 9
38637: PUSH
38638: LD_VAR 0 12
38642: PUSH
38643: FOR_IN
38644: IFFALSE 38836
// repeat InitHc ;
38646: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38650: LD_VAR 0 9
38654: PPUSH
38655: CALL_OW 266
38659: PUSH
38660: LD_INT 5
38662: EQUAL
38663: IFFALSE 38733
// begin if UnitsInside ( j ) < 3 then
38665: LD_VAR 0 9
38669: PPUSH
38670: CALL_OW 313
38674: PUSH
38675: LD_INT 3
38677: LESS
38678: IFFALSE 38714
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38680: LD_INT 0
38682: PPUSH
38683: LD_INT 5
38685: PUSH
38686: LD_INT 8
38688: PUSH
38689: LD_INT 9
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: PUSH
38697: LD_VAR 0 17
38701: ARRAY
38702: PPUSH
38703: LD_VAR 0 4
38707: PPUSH
38708: CALL_OW 380
38712: GO 38731
// PrepareHuman ( false , i , skill ) ;
38714: LD_INT 0
38716: PPUSH
38717: LD_VAR 0 8
38721: PPUSH
38722: LD_VAR 0 4
38726: PPUSH
38727: CALL_OW 380
// end else
38731: GO 38750
// PrepareHuman ( false , i , skill ) ;
38733: LD_INT 0
38735: PPUSH
38736: LD_VAR 0 8
38740: PPUSH
38741: LD_VAR 0 4
38745: PPUSH
38746: CALL_OW 380
// un := CreateHuman ;
38750: LD_ADDR_VAR 0 14
38754: PUSH
38755: CALL_OW 44
38759: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38760: LD_ADDR_VAR 0 7
38764: PUSH
38765: LD_VAR 0 7
38769: PPUSH
38770: LD_INT 1
38772: PPUSH
38773: LD_VAR 0 14
38777: PPUSH
38778: CALL_OW 2
38782: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38783: LD_VAR 0 14
38787: PPUSH
38788: LD_VAR 0 9
38792: PPUSH
38793: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38797: LD_VAR 0 9
38801: PPUSH
38802: CALL_OW 313
38806: PUSH
38807: LD_INT 6
38809: EQUAL
38810: PUSH
38811: LD_VAR 0 9
38815: PPUSH
38816: CALL_OW 266
38820: PUSH
38821: LD_INT 32
38823: PUSH
38824: LD_INT 31
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: IN
38831: OR
38832: IFFALSE 38646
38834: GO 38643
38836: POP
38837: POP
// end else
38838: GO 39220
// for j = 1 to x do
38840: LD_ADDR_VAR 0 9
38844: PUSH
38845: DOUBLE
38846: LD_INT 1
38848: DEC
38849: ST_TO_ADDR
38850: LD_VAR 0 13
38854: PUSH
38855: FOR_TO
38856: IFFALSE 39218
// begin InitHc ;
38858: CALL_OW 19
// if not f then
38862: LD_VAR 0 12
38866: NOT
38867: IFFALSE 38956
// begin PrepareHuman ( false , i , skill ) ;
38869: LD_INT 0
38871: PPUSH
38872: LD_VAR 0 8
38876: PPUSH
38877: LD_VAR 0 4
38881: PPUSH
38882: CALL_OW 380
// un := CreateHuman ;
38886: LD_ADDR_VAR 0 14
38890: PUSH
38891: CALL_OW 44
38895: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38896: LD_ADDR_VAR 0 7
38900: PUSH
38901: LD_VAR 0 7
38905: PPUSH
38906: LD_INT 1
38908: PPUSH
38909: LD_VAR 0 14
38913: PPUSH
38914: CALL_OW 2
38918: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38919: LD_VAR 0 14
38923: PPUSH
38924: LD_VAR 0 1
38928: PPUSH
38929: CALL_OW 250
38933: PPUSH
38934: LD_VAR 0 1
38938: PPUSH
38939: CALL_OW 251
38943: PPUSH
38944: LD_INT 10
38946: PPUSH
38947: LD_INT 0
38949: PPUSH
38950: CALL_OW 50
// continue ;
38954: GO 38855
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38956: LD_VAR 0 12
38960: PUSH
38961: LD_INT 1
38963: ARRAY
38964: PPUSH
38965: CALL_OW 313
38969: PUSH
38970: LD_VAR 0 12
38974: PUSH
38975: LD_INT 1
38977: ARRAY
38978: PPUSH
38979: CALL_OW 266
38983: PUSH
38984: LD_INT 32
38986: PUSH
38987: LD_INT 31
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: IN
38994: AND
38995: PUSH
38996: LD_VAR 0 12
39000: PUSH
39001: LD_INT 1
39003: ARRAY
39004: PPUSH
39005: CALL_OW 313
39009: PUSH
39010: LD_INT 6
39012: EQUAL
39013: OR
39014: IFFALSE 39034
// f := Delete ( f , 1 ) ;
39016: LD_ADDR_VAR 0 12
39020: PUSH
39021: LD_VAR 0 12
39025: PPUSH
39026: LD_INT 1
39028: PPUSH
39029: CALL_OW 3
39033: ST_TO_ADDR
// if not f then
39034: LD_VAR 0 12
39038: NOT
39039: IFFALSE 39057
// begin x := x + 2 ;
39041: LD_ADDR_VAR 0 13
39045: PUSH
39046: LD_VAR 0 13
39050: PUSH
39051: LD_INT 2
39053: PLUS
39054: ST_TO_ADDR
// continue ;
39055: GO 38855
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39057: LD_VAR 0 12
39061: PUSH
39062: LD_INT 1
39064: ARRAY
39065: PPUSH
39066: CALL_OW 266
39070: PUSH
39071: LD_INT 5
39073: EQUAL
39074: IFFALSE 39148
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39076: LD_VAR 0 12
39080: PUSH
39081: LD_INT 1
39083: ARRAY
39084: PPUSH
39085: CALL_OW 313
39089: PUSH
39090: LD_INT 3
39092: LESS
39093: IFFALSE 39129
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39095: LD_INT 0
39097: PPUSH
39098: LD_INT 5
39100: PUSH
39101: LD_INT 8
39103: PUSH
39104: LD_INT 9
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: PUSH
39112: LD_VAR 0 17
39116: ARRAY
39117: PPUSH
39118: LD_VAR 0 4
39122: PPUSH
39123: CALL_OW 380
39127: GO 39146
// PrepareHuman ( false , i , skill ) ;
39129: LD_INT 0
39131: PPUSH
39132: LD_VAR 0 8
39136: PPUSH
39137: LD_VAR 0 4
39141: PPUSH
39142: CALL_OW 380
// end else
39146: GO 39165
// PrepareHuman ( false , i , skill ) ;
39148: LD_INT 0
39150: PPUSH
39151: LD_VAR 0 8
39155: PPUSH
39156: LD_VAR 0 4
39160: PPUSH
39161: CALL_OW 380
// un := CreateHuman ;
39165: LD_ADDR_VAR 0 14
39169: PUSH
39170: CALL_OW 44
39174: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39175: LD_ADDR_VAR 0 7
39179: PUSH
39180: LD_VAR 0 7
39184: PPUSH
39185: LD_INT 1
39187: PPUSH
39188: LD_VAR 0 14
39192: PPUSH
39193: CALL_OW 2
39197: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39198: LD_VAR 0 14
39202: PPUSH
39203: LD_VAR 0 12
39207: PUSH
39208: LD_INT 1
39210: ARRAY
39211: PPUSH
39212: CALL_OW 52
// end ;
39216: GO 38855
39218: POP
39219: POP
// end ;
39220: GO 38157
39222: POP
39223: POP
// result := result ^ buildings ;
39224: LD_ADDR_VAR 0 7
39228: PUSH
39229: LD_VAR 0 7
39233: PUSH
39234: LD_VAR 0 18
39238: ADD
39239: ST_TO_ADDR
// end else
39240: GO 39383
// begin for i = 1 to personel do
39242: LD_ADDR_VAR 0 8
39246: PUSH
39247: DOUBLE
39248: LD_INT 1
39250: DEC
39251: ST_TO_ADDR
39252: LD_VAR 0 6
39256: PUSH
39257: FOR_TO
39258: IFFALSE 39381
// begin if i > 4 then
39260: LD_VAR 0 8
39264: PUSH
39265: LD_INT 4
39267: GREATER
39268: IFFALSE 39272
// break ;
39270: GO 39381
// x := personel [ i ] ;
39272: LD_ADDR_VAR 0 13
39276: PUSH
39277: LD_VAR 0 6
39281: PUSH
39282: LD_VAR 0 8
39286: ARRAY
39287: ST_TO_ADDR
// if x = - 1 then
39288: LD_VAR 0 13
39292: PUSH
39293: LD_INT 1
39295: NEG
39296: EQUAL
39297: IFFALSE 39301
// continue ;
39299: GO 39257
// PrepareHuman ( false , i , skill ) ;
39301: LD_INT 0
39303: PPUSH
39304: LD_VAR 0 8
39308: PPUSH
39309: LD_VAR 0 4
39313: PPUSH
39314: CALL_OW 380
// un := CreateHuman ;
39318: LD_ADDR_VAR 0 14
39322: PUSH
39323: CALL_OW 44
39327: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39328: LD_VAR 0 14
39332: PPUSH
39333: LD_VAR 0 1
39337: PPUSH
39338: CALL_OW 250
39342: PPUSH
39343: LD_VAR 0 1
39347: PPUSH
39348: CALL_OW 251
39352: PPUSH
39353: LD_INT 10
39355: PPUSH
39356: LD_INT 0
39358: PPUSH
39359: CALL_OW 50
// result := result ^ un ;
39363: LD_ADDR_VAR 0 7
39367: PUSH
39368: LD_VAR 0 7
39372: PUSH
39373: LD_VAR 0 14
39377: ADD
39378: ST_TO_ADDR
// end ;
39379: GO 39257
39381: POP
39382: POP
// end ; end ;
39383: LD_VAR 0 7
39387: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39388: LD_INT 0
39390: PPUSH
39391: PPUSH
39392: PPUSH
39393: PPUSH
39394: PPUSH
39395: PPUSH
39396: PPUSH
39397: PPUSH
39398: PPUSH
39399: PPUSH
39400: PPUSH
39401: PPUSH
39402: PPUSH
39403: PPUSH
39404: PPUSH
39405: PPUSH
// result := false ;
39406: LD_ADDR_VAR 0 3
39410: PUSH
39411: LD_INT 0
39413: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39414: LD_VAR 0 1
39418: NOT
39419: PUSH
39420: LD_VAR 0 1
39424: PPUSH
39425: CALL_OW 266
39429: PUSH
39430: LD_INT 32
39432: PUSH
39433: LD_INT 33
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: IN
39440: NOT
39441: OR
39442: IFFALSE 39446
// exit ;
39444: GO 40555
// nat := GetNation ( tower ) ;
39446: LD_ADDR_VAR 0 12
39450: PUSH
39451: LD_VAR 0 1
39455: PPUSH
39456: CALL_OW 248
39460: ST_TO_ADDR
// side := GetSide ( tower ) ;
39461: LD_ADDR_VAR 0 16
39465: PUSH
39466: LD_VAR 0 1
39470: PPUSH
39471: CALL_OW 255
39475: ST_TO_ADDR
// x := GetX ( tower ) ;
39476: LD_ADDR_VAR 0 10
39480: PUSH
39481: LD_VAR 0 1
39485: PPUSH
39486: CALL_OW 250
39490: ST_TO_ADDR
// y := GetY ( tower ) ;
39491: LD_ADDR_VAR 0 11
39495: PUSH
39496: LD_VAR 0 1
39500: PPUSH
39501: CALL_OW 251
39505: ST_TO_ADDR
// if not x or not y then
39506: LD_VAR 0 10
39510: NOT
39511: PUSH
39512: LD_VAR 0 11
39516: NOT
39517: OR
39518: IFFALSE 39522
// exit ;
39520: GO 40555
// weapon := 0 ;
39522: LD_ADDR_VAR 0 18
39526: PUSH
39527: LD_INT 0
39529: ST_TO_ADDR
// fac_list := [ ] ;
39530: LD_ADDR_VAR 0 17
39534: PUSH
39535: EMPTY
39536: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39537: LD_ADDR_VAR 0 6
39541: PUSH
39542: LD_VAR 0 1
39546: PPUSH
39547: CALL_OW 274
39551: PPUSH
39552: LD_VAR 0 2
39556: PPUSH
39557: LD_INT 0
39559: PPUSH
39560: CALL 37126 0 3
39564: PPUSH
39565: LD_INT 30
39567: PUSH
39568: LD_INT 3
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PPUSH
39575: CALL_OW 72
39579: ST_TO_ADDR
// if not factories then
39580: LD_VAR 0 6
39584: NOT
39585: IFFALSE 39589
// exit ;
39587: GO 40555
// for i in factories do
39589: LD_ADDR_VAR 0 8
39593: PUSH
39594: LD_VAR 0 6
39598: PUSH
39599: FOR_IN
39600: IFFALSE 39625
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39602: LD_ADDR_VAR 0 17
39606: PUSH
39607: LD_VAR 0 17
39611: PUSH
39612: LD_VAR 0 8
39616: PPUSH
39617: CALL_OW 478
39621: UNION
39622: ST_TO_ADDR
39623: GO 39599
39625: POP
39626: POP
// if not fac_list then
39627: LD_VAR 0 17
39631: NOT
39632: IFFALSE 39636
// exit ;
39634: GO 40555
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39636: LD_ADDR_VAR 0 5
39640: PUSH
39641: LD_INT 4
39643: PUSH
39644: LD_INT 5
39646: PUSH
39647: LD_INT 9
39649: PUSH
39650: LD_INT 10
39652: PUSH
39653: LD_INT 6
39655: PUSH
39656: LD_INT 7
39658: PUSH
39659: LD_INT 11
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 27
39673: PUSH
39674: LD_INT 28
39676: PUSH
39677: LD_INT 26
39679: PUSH
39680: LD_INT 30
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 43
39691: PUSH
39692: LD_INT 44
39694: PUSH
39695: LD_INT 46
39697: PUSH
39698: LD_INT 45
39700: PUSH
39701: LD_INT 47
39703: PUSH
39704: LD_INT 49
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: LIST
39719: PUSH
39720: LD_VAR 0 12
39724: ARRAY
39725: ST_TO_ADDR
// list := list isect fac_list ;
39726: LD_ADDR_VAR 0 5
39730: PUSH
39731: LD_VAR 0 5
39735: PUSH
39736: LD_VAR 0 17
39740: ISECT
39741: ST_TO_ADDR
// if not list then
39742: LD_VAR 0 5
39746: NOT
39747: IFFALSE 39751
// exit ;
39749: GO 40555
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39751: LD_VAR 0 12
39755: PUSH
39756: LD_INT 3
39758: EQUAL
39759: PUSH
39760: LD_INT 49
39762: PUSH
39763: LD_VAR 0 5
39767: IN
39768: AND
39769: PUSH
39770: LD_INT 31
39772: PPUSH
39773: LD_VAR 0 16
39777: PPUSH
39778: CALL_OW 321
39782: PUSH
39783: LD_INT 2
39785: EQUAL
39786: AND
39787: IFFALSE 39847
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39789: LD_INT 22
39791: PUSH
39792: LD_VAR 0 16
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 35
39803: PUSH
39804: LD_INT 49
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 91
39813: PUSH
39814: LD_VAR 0 1
39818: PUSH
39819: LD_INT 10
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: LIST
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: LIST
39831: PPUSH
39832: CALL_OW 69
39836: NOT
39837: IFFALSE 39847
// weapon := ru_time_lapser ;
39839: LD_ADDR_VAR 0 18
39843: PUSH
39844: LD_INT 49
39846: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39847: LD_VAR 0 12
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: LD_INT 2
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: IN
39862: PUSH
39863: LD_INT 11
39865: PUSH
39866: LD_VAR 0 5
39870: IN
39871: PUSH
39872: LD_INT 30
39874: PUSH
39875: LD_VAR 0 5
39879: IN
39880: OR
39881: AND
39882: PUSH
39883: LD_INT 6
39885: PPUSH
39886: LD_VAR 0 16
39890: PPUSH
39891: CALL_OW 321
39895: PUSH
39896: LD_INT 2
39898: EQUAL
39899: AND
39900: IFFALSE 40065
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39902: LD_INT 22
39904: PUSH
39905: LD_VAR 0 16
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: LD_INT 35
39919: PUSH
39920: LD_INT 11
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 35
39929: PUSH
39930: LD_INT 30
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 91
39944: PUSH
39945: LD_VAR 0 1
39949: PUSH
39950: LD_INT 18
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: LIST
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: LIST
39962: PPUSH
39963: CALL_OW 69
39967: NOT
39968: PUSH
39969: LD_INT 22
39971: PUSH
39972: LD_VAR 0 16
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: LD_INT 30
39986: PUSH
39987: LD_INT 32
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 30
39996: PUSH
39997: LD_INT 33
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 91
40011: PUSH
40012: LD_VAR 0 1
40016: PUSH
40017: LD_INT 12
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: LIST
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: PUSH
40030: EMPTY
40031: LIST
40032: PPUSH
40033: CALL_OW 69
40037: PUSH
40038: LD_INT 2
40040: GREATER
40041: AND
40042: IFFALSE 40065
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40044: LD_ADDR_VAR 0 18
40048: PUSH
40049: LD_INT 11
40051: PUSH
40052: LD_INT 30
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_VAR 0 12
40063: ARRAY
40064: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40065: LD_VAR 0 18
40069: NOT
40070: PUSH
40071: LD_INT 40
40073: PPUSH
40074: LD_VAR 0 16
40078: PPUSH
40079: CALL_OW 321
40083: PUSH
40084: LD_INT 2
40086: EQUAL
40087: AND
40088: PUSH
40089: LD_INT 7
40091: PUSH
40092: LD_VAR 0 5
40096: IN
40097: PUSH
40098: LD_INT 28
40100: PUSH
40101: LD_VAR 0 5
40105: IN
40106: OR
40107: PUSH
40108: LD_INT 45
40110: PUSH
40111: LD_VAR 0 5
40115: IN
40116: OR
40117: AND
40118: IFFALSE 40372
// begin hex := GetHexInfo ( x , y ) ;
40120: LD_ADDR_VAR 0 4
40124: PUSH
40125: LD_VAR 0 10
40129: PPUSH
40130: LD_VAR 0 11
40134: PPUSH
40135: CALL_OW 546
40139: ST_TO_ADDR
// if hex [ 1 ] then
40140: LD_VAR 0 4
40144: PUSH
40145: LD_INT 1
40147: ARRAY
40148: IFFALSE 40152
// exit ;
40150: GO 40555
// height := hex [ 2 ] ;
40152: LD_ADDR_VAR 0 15
40156: PUSH
40157: LD_VAR 0 4
40161: PUSH
40162: LD_INT 2
40164: ARRAY
40165: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40166: LD_ADDR_VAR 0 14
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: LD_INT 3
40179: PUSH
40180: LD_INT 5
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: ST_TO_ADDR
// for i in tmp do
40189: LD_ADDR_VAR 0 8
40193: PUSH
40194: LD_VAR 0 14
40198: PUSH
40199: FOR_IN
40200: IFFALSE 40370
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40202: LD_ADDR_VAR 0 9
40206: PUSH
40207: LD_VAR 0 10
40211: PPUSH
40212: LD_VAR 0 8
40216: PPUSH
40217: LD_INT 5
40219: PPUSH
40220: CALL_OW 272
40224: PUSH
40225: LD_VAR 0 11
40229: PPUSH
40230: LD_VAR 0 8
40234: PPUSH
40235: LD_INT 5
40237: PPUSH
40238: CALL_OW 273
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40247: LD_VAR 0 9
40251: PUSH
40252: LD_INT 1
40254: ARRAY
40255: PPUSH
40256: LD_VAR 0 9
40260: PUSH
40261: LD_INT 2
40263: ARRAY
40264: PPUSH
40265: CALL_OW 488
40269: IFFALSE 40368
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40271: LD_ADDR_VAR 0 4
40275: PUSH
40276: LD_VAR 0 9
40280: PUSH
40281: LD_INT 1
40283: ARRAY
40284: PPUSH
40285: LD_VAR 0 9
40289: PUSH
40290: LD_INT 2
40292: ARRAY
40293: PPUSH
40294: CALL_OW 546
40298: ST_TO_ADDR
// if hex [ 1 ] then
40299: LD_VAR 0 4
40303: PUSH
40304: LD_INT 1
40306: ARRAY
40307: IFFALSE 40311
// continue ;
40309: GO 40199
// h := hex [ 2 ] ;
40311: LD_ADDR_VAR 0 13
40315: PUSH
40316: LD_VAR 0 4
40320: PUSH
40321: LD_INT 2
40323: ARRAY
40324: ST_TO_ADDR
// if h + 7 < height then
40325: LD_VAR 0 13
40329: PUSH
40330: LD_INT 7
40332: PLUS
40333: PUSH
40334: LD_VAR 0 15
40338: LESS
40339: IFFALSE 40368
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40341: LD_ADDR_VAR 0 18
40345: PUSH
40346: LD_INT 7
40348: PUSH
40349: LD_INT 28
40351: PUSH
40352: LD_INT 45
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: PUSH
40360: LD_VAR 0 12
40364: ARRAY
40365: ST_TO_ADDR
// break ;
40366: GO 40370
// end ; end ; end ;
40368: GO 40199
40370: POP
40371: POP
// end ; if not weapon then
40372: LD_VAR 0 18
40376: NOT
40377: IFFALSE 40437
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40379: LD_ADDR_VAR 0 5
40383: PUSH
40384: LD_VAR 0 5
40388: PUSH
40389: LD_INT 11
40391: PUSH
40392: LD_INT 30
40394: PUSH
40395: LD_INT 49
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: LIST
40402: DIFF
40403: ST_TO_ADDR
// if not list then
40404: LD_VAR 0 5
40408: NOT
40409: IFFALSE 40413
// exit ;
40411: GO 40555
// weapon := list [ rand ( 1 , list ) ] ;
40413: LD_ADDR_VAR 0 18
40417: PUSH
40418: LD_VAR 0 5
40422: PUSH
40423: LD_INT 1
40425: PPUSH
40426: LD_VAR 0 5
40430: PPUSH
40431: CALL_OW 12
40435: ARRAY
40436: ST_TO_ADDR
// end ; if weapon then
40437: LD_VAR 0 18
40441: IFFALSE 40555
// begin tmp := CostOfWeapon ( weapon ) ;
40443: LD_ADDR_VAR 0 14
40447: PUSH
40448: LD_VAR 0 18
40452: PPUSH
40453: CALL_OW 451
40457: ST_TO_ADDR
// j := GetBase ( tower ) ;
40458: LD_ADDR_VAR 0 9
40462: PUSH
40463: LD_VAR 0 1
40467: PPUSH
40468: CALL_OW 274
40472: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40473: LD_VAR 0 9
40477: PPUSH
40478: LD_INT 1
40480: PPUSH
40481: CALL_OW 275
40485: PUSH
40486: LD_VAR 0 14
40490: PUSH
40491: LD_INT 1
40493: ARRAY
40494: GREATEREQUAL
40495: PUSH
40496: LD_VAR 0 9
40500: PPUSH
40501: LD_INT 2
40503: PPUSH
40504: CALL_OW 275
40508: PUSH
40509: LD_VAR 0 14
40513: PUSH
40514: LD_INT 2
40516: ARRAY
40517: GREATEREQUAL
40518: AND
40519: PUSH
40520: LD_VAR 0 9
40524: PPUSH
40525: LD_INT 3
40527: PPUSH
40528: CALL_OW 275
40532: PUSH
40533: LD_VAR 0 14
40537: PUSH
40538: LD_INT 3
40540: ARRAY
40541: GREATEREQUAL
40542: AND
40543: IFFALSE 40555
// result := weapon ;
40545: LD_ADDR_VAR 0 3
40549: PUSH
40550: LD_VAR 0 18
40554: ST_TO_ADDR
// end ; end ;
40555: LD_VAR 0 3
40559: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40560: LD_INT 0
40562: PPUSH
40563: PPUSH
// result := true ;
40564: LD_ADDR_VAR 0 3
40568: PUSH
40569: LD_INT 1
40571: ST_TO_ADDR
// if array1 = array2 then
40572: LD_VAR 0 1
40576: PUSH
40577: LD_VAR 0 2
40581: EQUAL
40582: IFFALSE 40642
// begin for i = 1 to array1 do
40584: LD_ADDR_VAR 0 4
40588: PUSH
40589: DOUBLE
40590: LD_INT 1
40592: DEC
40593: ST_TO_ADDR
40594: LD_VAR 0 1
40598: PUSH
40599: FOR_TO
40600: IFFALSE 40638
// if array1 [ i ] <> array2 [ i ] then
40602: LD_VAR 0 1
40606: PUSH
40607: LD_VAR 0 4
40611: ARRAY
40612: PUSH
40613: LD_VAR 0 2
40617: PUSH
40618: LD_VAR 0 4
40622: ARRAY
40623: NONEQUAL
40624: IFFALSE 40636
// begin result := false ;
40626: LD_ADDR_VAR 0 3
40630: PUSH
40631: LD_INT 0
40633: ST_TO_ADDR
// break ;
40634: GO 40638
// end ;
40636: GO 40599
40638: POP
40639: POP
// end else
40640: GO 40650
// result := false ;
40642: LD_ADDR_VAR 0 3
40646: PUSH
40647: LD_INT 0
40649: ST_TO_ADDR
// end ;
40650: LD_VAR 0 3
40654: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40655: LD_INT 0
40657: PPUSH
40658: PPUSH
// if not array1 or not array2 then
40659: LD_VAR 0 1
40663: NOT
40664: PUSH
40665: LD_VAR 0 2
40669: NOT
40670: OR
40671: IFFALSE 40675
// exit ;
40673: GO 40739
// result := true ;
40675: LD_ADDR_VAR 0 3
40679: PUSH
40680: LD_INT 1
40682: ST_TO_ADDR
// for i = 1 to array1 do
40683: LD_ADDR_VAR 0 4
40687: PUSH
40688: DOUBLE
40689: LD_INT 1
40691: DEC
40692: ST_TO_ADDR
40693: LD_VAR 0 1
40697: PUSH
40698: FOR_TO
40699: IFFALSE 40737
// if array1 [ i ] <> array2 [ i ] then
40701: LD_VAR 0 1
40705: PUSH
40706: LD_VAR 0 4
40710: ARRAY
40711: PUSH
40712: LD_VAR 0 2
40716: PUSH
40717: LD_VAR 0 4
40721: ARRAY
40722: NONEQUAL
40723: IFFALSE 40735
// begin result := false ;
40725: LD_ADDR_VAR 0 3
40729: PUSH
40730: LD_INT 0
40732: ST_TO_ADDR
// break ;
40733: GO 40737
// end ;
40735: GO 40698
40737: POP
40738: POP
// end ;
40739: LD_VAR 0 3
40743: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40744: LD_INT 0
40746: PPUSH
40747: PPUSH
40748: PPUSH
// pom := GetBase ( fac ) ;
40749: LD_ADDR_VAR 0 5
40753: PUSH
40754: LD_VAR 0 1
40758: PPUSH
40759: CALL_OW 274
40763: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40764: LD_ADDR_VAR 0 4
40768: PUSH
40769: LD_VAR 0 2
40773: PUSH
40774: LD_INT 1
40776: ARRAY
40777: PPUSH
40778: LD_VAR 0 2
40782: PUSH
40783: LD_INT 2
40785: ARRAY
40786: PPUSH
40787: LD_VAR 0 2
40791: PUSH
40792: LD_INT 3
40794: ARRAY
40795: PPUSH
40796: LD_VAR 0 2
40800: PUSH
40801: LD_INT 4
40803: ARRAY
40804: PPUSH
40805: CALL_OW 449
40809: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40810: LD_ADDR_VAR 0 3
40814: PUSH
40815: LD_VAR 0 5
40819: PPUSH
40820: LD_INT 1
40822: PPUSH
40823: CALL_OW 275
40827: PUSH
40828: LD_VAR 0 4
40832: PUSH
40833: LD_INT 1
40835: ARRAY
40836: GREATEREQUAL
40837: PUSH
40838: LD_VAR 0 5
40842: PPUSH
40843: LD_INT 2
40845: PPUSH
40846: CALL_OW 275
40850: PUSH
40851: LD_VAR 0 4
40855: PUSH
40856: LD_INT 2
40858: ARRAY
40859: GREATEREQUAL
40860: AND
40861: PUSH
40862: LD_VAR 0 5
40866: PPUSH
40867: LD_INT 3
40869: PPUSH
40870: CALL_OW 275
40874: PUSH
40875: LD_VAR 0 4
40879: PUSH
40880: LD_INT 3
40882: ARRAY
40883: GREATEREQUAL
40884: AND
40885: ST_TO_ADDR
// end ;
40886: LD_VAR 0 3
40890: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40891: LD_INT 0
40893: PPUSH
40894: PPUSH
40895: PPUSH
40896: PPUSH
// pom := GetBase ( building ) ;
40897: LD_ADDR_VAR 0 3
40901: PUSH
40902: LD_VAR 0 1
40906: PPUSH
40907: CALL_OW 274
40911: ST_TO_ADDR
// if not pom then
40912: LD_VAR 0 3
40916: NOT
40917: IFFALSE 40921
// exit ;
40919: GO 41091
// btype := GetBType ( building ) ;
40921: LD_ADDR_VAR 0 5
40925: PUSH
40926: LD_VAR 0 1
40930: PPUSH
40931: CALL_OW 266
40935: ST_TO_ADDR
// if btype = b_armoury then
40936: LD_VAR 0 5
40940: PUSH
40941: LD_INT 4
40943: EQUAL
40944: IFFALSE 40954
// btype := b_barracks ;
40946: LD_ADDR_VAR 0 5
40950: PUSH
40951: LD_INT 5
40953: ST_TO_ADDR
// if btype = b_depot then
40954: LD_VAR 0 5
40958: PUSH
40959: LD_INT 0
40961: EQUAL
40962: IFFALSE 40972
// btype := b_warehouse ;
40964: LD_ADDR_VAR 0 5
40968: PUSH
40969: LD_INT 1
40971: ST_TO_ADDR
// if btype = b_workshop then
40972: LD_VAR 0 5
40976: PUSH
40977: LD_INT 2
40979: EQUAL
40980: IFFALSE 40990
// btype := b_factory ;
40982: LD_ADDR_VAR 0 5
40986: PUSH
40987: LD_INT 3
40989: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40990: LD_ADDR_VAR 0 4
40994: PUSH
40995: LD_VAR 0 5
40999: PPUSH
41000: LD_VAR 0 1
41004: PPUSH
41005: CALL_OW 248
41009: PPUSH
41010: CALL_OW 450
41014: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41015: LD_ADDR_VAR 0 2
41019: PUSH
41020: LD_VAR 0 3
41024: PPUSH
41025: LD_INT 1
41027: PPUSH
41028: CALL_OW 275
41032: PUSH
41033: LD_VAR 0 4
41037: PUSH
41038: LD_INT 1
41040: ARRAY
41041: GREATEREQUAL
41042: PUSH
41043: LD_VAR 0 3
41047: PPUSH
41048: LD_INT 2
41050: PPUSH
41051: CALL_OW 275
41055: PUSH
41056: LD_VAR 0 4
41060: PUSH
41061: LD_INT 2
41063: ARRAY
41064: GREATEREQUAL
41065: AND
41066: PUSH
41067: LD_VAR 0 3
41071: PPUSH
41072: LD_INT 3
41074: PPUSH
41075: CALL_OW 275
41079: PUSH
41080: LD_VAR 0 4
41084: PUSH
41085: LD_INT 3
41087: ARRAY
41088: GREATEREQUAL
41089: AND
41090: ST_TO_ADDR
// end ;
41091: LD_VAR 0 2
41095: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41096: LD_INT 0
41098: PPUSH
41099: PPUSH
41100: PPUSH
// pom := GetBase ( building ) ;
41101: LD_ADDR_VAR 0 4
41105: PUSH
41106: LD_VAR 0 1
41110: PPUSH
41111: CALL_OW 274
41115: ST_TO_ADDR
// if not pom then
41116: LD_VAR 0 4
41120: NOT
41121: IFFALSE 41125
// exit ;
41123: GO 41226
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41125: LD_ADDR_VAR 0 5
41129: PUSH
41130: LD_VAR 0 2
41134: PPUSH
41135: LD_VAR 0 1
41139: PPUSH
41140: CALL_OW 248
41144: PPUSH
41145: CALL_OW 450
41149: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41150: LD_ADDR_VAR 0 3
41154: PUSH
41155: LD_VAR 0 4
41159: PPUSH
41160: LD_INT 1
41162: PPUSH
41163: CALL_OW 275
41167: PUSH
41168: LD_VAR 0 5
41172: PUSH
41173: LD_INT 1
41175: ARRAY
41176: GREATEREQUAL
41177: PUSH
41178: LD_VAR 0 4
41182: PPUSH
41183: LD_INT 2
41185: PPUSH
41186: CALL_OW 275
41190: PUSH
41191: LD_VAR 0 5
41195: PUSH
41196: LD_INT 2
41198: ARRAY
41199: GREATEREQUAL
41200: AND
41201: PUSH
41202: LD_VAR 0 4
41206: PPUSH
41207: LD_INT 3
41209: PPUSH
41210: CALL_OW 275
41214: PUSH
41215: LD_VAR 0 5
41219: PUSH
41220: LD_INT 3
41222: ARRAY
41223: GREATEREQUAL
41224: AND
41225: ST_TO_ADDR
// end ;
41226: LD_VAR 0 3
41230: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41231: LD_INT 0
41233: PPUSH
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
41239: PPUSH
41240: PPUSH
41241: PPUSH
41242: PPUSH
41243: PPUSH
// result := false ;
41244: LD_ADDR_VAR 0 8
41248: PUSH
41249: LD_INT 0
41251: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41252: LD_VAR 0 5
41256: NOT
41257: PUSH
41258: LD_VAR 0 1
41262: NOT
41263: OR
41264: PUSH
41265: LD_VAR 0 2
41269: NOT
41270: OR
41271: PUSH
41272: LD_VAR 0 3
41276: NOT
41277: OR
41278: IFFALSE 41282
// exit ;
41280: GO 42096
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41282: LD_ADDR_VAR 0 14
41286: PUSH
41287: LD_VAR 0 1
41291: PPUSH
41292: LD_VAR 0 2
41296: PPUSH
41297: LD_VAR 0 3
41301: PPUSH
41302: LD_VAR 0 4
41306: PPUSH
41307: LD_VAR 0 5
41311: PUSH
41312: LD_INT 1
41314: ARRAY
41315: PPUSH
41316: CALL_OW 248
41320: PPUSH
41321: LD_INT 0
41323: PPUSH
41324: CALL 43333 0 6
41328: ST_TO_ADDR
// if not hexes then
41329: LD_VAR 0 14
41333: NOT
41334: IFFALSE 41338
// exit ;
41336: GO 42096
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41338: LD_ADDR_VAR 0 17
41342: PUSH
41343: LD_VAR 0 5
41347: PPUSH
41348: LD_INT 22
41350: PUSH
41351: LD_VAR 0 13
41355: PPUSH
41356: CALL_OW 255
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: LD_INT 30
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 30
41380: PUSH
41381: LD_INT 1
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: LIST
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PPUSH
41397: CALL_OW 72
41401: ST_TO_ADDR
// for i = 1 to hexes do
41402: LD_ADDR_VAR 0 9
41406: PUSH
41407: DOUBLE
41408: LD_INT 1
41410: DEC
41411: ST_TO_ADDR
41412: LD_VAR 0 14
41416: PUSH
41417: FOR_TO
41418: IFFALSE 42094
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41420: LD_ADDR_VAR 0 13
41424: PUSH
41425: LD_VAR 0 14
41429: PUSH
41430: LD_VAR 0 9
41434: ARRAY
41435: PUSH
41436: LD_INT 1
41438: ARRAY
41439: PPUSH
41440: LD_VAR 0 14
41444: PUSH
41445: LD_VAR 0 9
41449: ARRAY
41450: PUSH
41451: LD_INT 2
41453: ARRAY
41454: PPUSH
41455: CALL_OW 428
41459: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41460: LD_VAR 0 14
41464: PUSH
41465: LD_VAR 0 9
41469: ARRAY
41470: PUSH
41471: LD_INT 1
41473: ARRAY
41474: PPUSH
41475: LD_VAR 0 14
41479: PUSH
41480: LD_VAR 0 9
41484: ARRAY
41485: PUSH
41486: LD_INT 2
41488: ARRAY
41489: PPUSH
41490: CALL_OW 351
41494: PUSH
41495: LD_VAR 0 14
41499: PUSH
41500: LD_VAR 0 9
41504: ARRAY
41505: PUSH
41506: LD_INT 1
41508: ARRAY
41509: PPUSH
41510: LD_VAR 0 14
41514: PUSH
41515: LD_VAR 0 9
41519: ARRAY
41520: PUSH
41521: LD_INT 2
41523: ARRAY
41524: PPUSH
41525: CALL_OW 488
41529: NOT
41530: OR
41531: PUSH
41532: LD_VAR 0 13
41536: PPUSH
41537: CALL_OW 247
41541: PUSH
41542: LD_INT 3
41544: EQUAL
41545: OR
41546: IFFALSE 41552
// exit ;
41548: POP
41549: POP
41550: GO 42096
// if not tmp then
41552: LD_VAR 0 13
41556: NOT
41557: IFFALSE 41561
// continue ;
41559: GO 41417
// result := true ;
41561: LD_ADDR_VAR 0 8
41565: PUSH
41566: LD_INT 1
41568: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41569: LD_VAR 0 6
41573: PUSH
41574: LD_VAR 0 13
41578: PPUSH
41579: CALL_OW 247
41583: PUSH
41584: LD_INT 2
41586: EQUAL
41587: AND
41588: PUSH
41589: LD_VAR 0 13
41593: PPUSH
41594: CALL_OW 263
41598: PUSH
41599: LD_INT 1
41601: EQUAL
41602: AND
41603: IFFALSE 41767
// begin if IsDrivenBy ( tmp ) then
41605: LD_VAR 0 13
41609: PPUSH
41610: CALL_OW 311
41614: IFFALSE 41618
// continue ;
41616: GO 41417
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41618: LD_VAR 0 6
41622: PPUSH
41623: LD_INT 3
41625: PUSH
41626: LD_INT 60
41628: PUSH
41629: EMPTY
41630: LIST
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 3
41638: PUSH
41639: LD_INT 55
41641: PUSH
41642: EMPTY
41643: LIST
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PPUSH
41653: CALL_OW 72
41657: IFFALSE 41765
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41659: LD_ADDR_VAR 0 18
41663: PUSH
41664: LD_VAR 0 6
41668: PPUSH
41669: LD_INT 3
41671: PUSH
41672: LD_INT 60
41674: PUSH
41675: EMPTY
41676: LIST
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 3
41684: PUSH
41685: LD_INT 55
41687: PUSH
41688: EMPTY
41689: LIST
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PPUSH
41699: CALL_OW 72
41703: PUSH
41704: LD_INT 1
41706: ARRAY
41707: ST_TO_ADDR
// if IsInUnit ( driver ) then
41708: LD_VAR 0 18
41712: PPUSH
41713: CALL_OW 310
41717: IFFALSE 41728
// ComExit ( driver ) ;
41719: LD_VAR 0 18
41723: PPUSH
41724: CALL 66461 0 1
// AddComEnterUnit ( driver , tmp ) ;
41728: LD_VAR 0 18
41732: PPUSH
41733: LD_VAR 0 13
41737: PPUSH
41738: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41742: LD_VAR 0 18
41746: PPUSH
41747: LD_VAR 0 7
41751: PPUSH
41752: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41756: LD_VAR 0 18
41760: PPUSH
41761: CALL_OW 181
// end ; continue ;
41765: GO 41417
// end ; if not cleaners or not tmp in cleaners then
41767: LD_VAR 0 6
41771: NOT
41772: PUSH
41773: LD_VAR 0 13
41777: PUSH
41778: LD_VAR 0 6
41782: IN
41783: NOT
41784: OR
41785: IFFALSE 42092
// begin if dep then
41787: LD_VAR 0 17
41791: IFFALSE 41927
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41793: LD_ADDR_VAR 0 16
41797: PUSH
41798: LD_VAR 0 17
41802: PUSH
41803: LD_INT 1
41805: ARRAY
41806: PPUSH
41807: CALL_OW 250
41811: PPUSH
41812: LD_VAR 0 17
41816: PUSH
41817: LD_INT 1
41819: ARRAY
41820: PPUSH
41821: CALL_OW 254
41825: PPUSH
41826: LD_INT 5
41828: PPUSH
41829: CALL_OW 272
41833: PUSH
41834: LD_VAR 0 17
41838: PUSH
41839: LD_INT 1
41841: ARRAY
41842: PPUSH
41843: CALL_OW 251
41847: PPUSH
41848: LD_VAR 0 17
41852: PUSH
41853: LD_INT 1
41855: ARRAY
41856: PPUSH
41857: CALL_OW 254
41861: PPUSH
41862: LD_INT 5
41864: PPUSH
41865: CALL_OW 273
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41874: LD_VAR 0 16
41878: PUSH
41879: LD_INT 1
41881: ARRAY
41882: PPUSH
41883: LD_VAR 0 16
41887: PUSH
41888: LD_INT 2
41890: ARRAY
41891: PPUSH
41892: CALL_OW 488
41896: IFFALSE 41927
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41898: LD_VAR 0 13
41902: PPUSH
41903: LD_VAR 0 16
41907: PUSH
41908: LD_INT 1
41910: ARRAY
41911: PPUSH
41912: LD_VAR 0 16
41916: PUSH
41917: LD_INT 2
41919: ARRAY
41920: PPUSH
41921: CALL_OW 111
// continue ;
41925: GO 41417
// end ; end ; r := GetDir ( tmp ) ;
41927: LD_ADDR_VAR 0 15
41931: PUSH
41932: LD_VAR 0 13
41936: PPUSH
41937: CALL_OW 254
41941: ST_TO_ADDR
// if r = 5 then
41942: LD_VAR 0 15
41946: PUSH
41947: LD_INT 5
41949: EQUAL
41950: IFFALSE 41960
// r := 0 ;
41952: LD_ADDR_VAR 0 15
41956: PUSH
41957: LD_INT 0
41959: ST_TO_ADDR
// for j = r to 5 do
41960: LD_ADDR_VAR 0 10
41964: PUSH
41965: DOUBLE
41966: LD_VAR 0 15
41970: DEC
41971: ST_TO_ADDR
41972: LD_INT 5
41974: PUSH
41975: FOR_TO
41976: IFFALSE 42090
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41978: LD_ADDR_VAR 0 11
41982: PUSH
41983: LD_VAR 0 13
41987: PPUSH
41988: CALL_OW 250
41992: PPUSH
41993: LD_VAR 0 10
41997: PPUSH
41998: LD_INT 2
42000: PPUSH
42001: CALL_OW 272
42005: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42006: LD_ADDR_VAR 0 12
42010: PUSH
42011: LD_VAR 0 13
42015: PPUSH
42016: CALL_OW 251
42020: PPUSH
42021: LD_VAR 0 10
42025: PPUSH
42026: LD_INT 2
42028: PPUSH
42029: CALL_OW 273
42033: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42034: LD_VAR 0 11
42038: PPUSH
42039: LD_VAR 0 12
42043: PPUSH
42044: CALL_OW 488
42048: PUSH
42049: LD_VAR 0 11
42053: PPUSH
42054: LD_VAR 0 12
42058: PPUSH
42059: CALL_OW 428
42063: NOT
42064: AND
42065: IFFALSE 42088
// begin ComMoveXY ( tmp , _x , _y ) ;
42067: LD_VAR 0 13
42071: PPUSH
42072: LD_VAR 0 11
42076: PPUSH
42077: LD_VAR 0 12
42081: PPUSH
42082: CALL_OW 111
// break ;
42086: GO 42090
// end ; end ;
42088: GO 41975
42090: POP
42091: POP
// end ; end ;
42092: GO 41417
42094: POP
42095: POP
// end ;
42096: LD_VAR 0 8
42100: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42101: LD_INT 0
42103: PPUSH
// result := true ;
42104: LD_ADDR_VAR 0 3
42108: PUSH
42109: LD_INT 1
42111: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42112: LD_VAR 0 2
42116: PUSH
42117: LD_INT 24
42119: DOUBLE
42120: EQUAL
42121: IFTRUE 42131
42123: LD_INT 33
42125: DOUBLE
42126: EQUAL
42127: IFTRUE 42131
42129: GO 42156
42131: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42132: LD_ADDR_VAR 0 3
42136: PUSH
42137: LD_INT 32
42139: PPUSH
42140: LD_VAR 0 1
42144: PPUSH
42145: CALL_OW 321
42149: PUSH
42150: LD_INT 2
42152: EQUAL
42153: ST_TO_ADDR
42154: GO 42476
42156: LD_INT 20
42158: DOUBLE
42159: EQUAL
42160: IFTRUE 42164
42162: GO 42189
42164: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42165: LD_ADDR_VAR 0 3
42169: PUSH
42170: LD_INT 6
42172: PPUSH
42173: LD_VAR 0 1
42177: PPUSH
42178: CALL_OW 321
42182: PUSH
42183: LD_INT 2
42185: EQUAL
42186: ST_TO_ADDR
42187: GO 42476
42189: LD_INT 22
42191: DOUBLE
42192: EQUAL
42193: IFTRUE 42203
42195: LD_INT 36
42197: DOUBLE
42198: EQUAL
42199: IFTRUE 42203
42201: GO 42228
42203: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42204: LD_ADDR_VAR 0 3
42208: PUSH
42209: LD_INT 15
42211: PPUSH
42212: LD_VAR 0 1
42216: PPUSH
42217: CALL_OW 321
42221: PUSH
42222: LD_INT 2
42224: EQUAL
42225: ST_TO_ADDR
42226: GO 42476
42228: LD_INT 30
42230: DOUBLE
42231: EQUAL
42232: IFTRUE 42236
42234: GO 42261
42236: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42237: LD_ADDR_VAR 0 3
42241: PUSH
42242: LD_INT 20
42244: PPUSH
42245: LD_VAR 0 1
42249: PPUSH
42250: CALL_OW 321
42254: PUSH
42255: LD_INT 2
42257: EQUAL
42258: ST_TO_ADDR
42259: GO 42476
42261: LD_INT 28
42263: DOUBLE
42264: EQUAL
42265: IFTRUE 42275
42267: LD_INT 21
42269: DOUBLE
42270: EQUAL
42271: IFTRUE 42275
42273: GO 42300
42275: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42276: LD_ADDR_VAR 0 3
42280: PUSH
42281: LD_INT 21
42283: PPUSH
42284: LD_VAR 0 1
42288: PPUSH
42289: CALL_OW 321
42293: PUSH
42294: LD_INT 2
42296: EQUAL
42297: ST_TO_ADDR
42298: GO 42476
42300: LD_INT 16
42302: DOUBLE
42303: EQUAL
42304: IFTRUE 42308
42306: GO 42335
42308: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42309: LD_ADDR_VAR 0 3
42313: PUSH
42314: LD_EXP 58
42318: PPUSH
42319: LD_VAR 0 1
42323: PPUSH
42324: CALL_OW 321
42328: PUSH
42329: LD_INT 2
42331: EQUAL
42332: ST_TO_ADDR
42333: GO 42476
42335: LD_INT 19
42337: DOUBLE
42338: EQUAL
42339: IFTRUE 42349
42341: LD_INT 23
42343: DOUBLE
42344: EQUAL
42345: IFTRUE 42349
42347: GO 42376
42349: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42350: LD_ADDR_VAR 0 3
42354: PUSH
42355: LD_EXP 57
42359: PPUSH
42360: LD_VAR 0 1
42364: PPUSH
42365: CALL_OW 321
42369: PUSH
42370: LD_INT 2
42372: EQUAL
42373: ST_TO_ADDR
42374: GO 42476
42376: LD_INT 17
42378: DOUBLE
42379: EQUAL
42380: IFTRUE 42384
42382: GO 42409
42384: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42385: LD_ADDR_VAR 0 3
42389: PUSH
42390: LD_INT 39
42392: PPUSH
42393: LD_VAR 0 1
42397: PPUSH
42398: CALL_OW 321
42402: PUSH
42403: LD_INT 2
42405: EQUAL
42406: ST_TO_ADDR
42407: GO 42476
42409: LD_INT 18
42411: DOUBLE
42412: EQUAL
42413: IFTRUE 42417
42415: GO 42442
42417: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42418: LD_ADDR_VAR 0 3
42422: PUSH
42423: LD_INT 40
42425: PPUSH
42426: LD_VAR 0 1
42430: PPUSH
42431: CALL_OW 321
42435: PUSH
42436: LD_INT 2
42438: EQUAL
42439: ST_TO_ADDR
42440: GO 42476
42442: LD_INT 27
42444: DOUBLE
42445: EQUAL
42446: IFTRUE 42450
42448: GO 42475
42450: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42451: LD_ADDR_VAR 0 3
42455: PUSH
42456: LD_INT 35
42458: PPUSH
42459: LD_VAR 0 1
42463: PPUSH
42464: CALL_OW 321
42468: PUSH
42469: LD_INT 2
42471: EQUAL
42472: ST_TO_ADDR
42473: GO 42476
42475: POP
// end ;
42476: LD_VAR 0 3
42480: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42481: LD_INT 0
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
42488: PPUSH
42489: PPUSH
42490: PPUSH
42491: PPUSH
42492: PPUSH
42493: PPUSH
// result := false ;
42494: LD_ADDR_VAR 0 6
42498: PUSH
42499: LD_INT 0
42501: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42502: LD_VAR 0 1
42506: NOT
42507: PUSH
42508: LD_VAR 0 1
42512: PPUSH
42513: CALL_OW 266
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: IN
42528: NOT
42529: OR
42530: PUSH
42531: LD_VAR 0 2
42535: NOT
42536: OR
42537: PUSH
42538: LD_VAR 0 5
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 2
42551: PUSH
42552: LD_INT 3
42554: PUSH
42555: LD_INT 4
42557: PUSH
42558: LD_INT 5
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: IN
42569: NOT
42570: OR
42571: PUSH
42572: LD_VAR 0 3
42576: PPUSH
42577: LD_VAR 0 4
42581: PPUSH
42582: CALL_OW 488
42586: NOT
42587: OR
42588: IFFALSE 42592
// exit ;
42590: GO 43328
// side := GetSide ( depot ) ;
42592: LD_ADDR_VAR 0 9
42596: PUSH
42597: LD_VAR 0 1
42601: PPUSH
42602: CALL_OW 255
42606: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42607: LD_VAR 0 9
42611: PPUSH
42612: LD_VAR 0 2
42616: PPUSH
42617: CALL 42101 0 2
42621: NOT
42622: IFFALSE 42626
// exit ;
42624: GO 43328
// pom := GetBase ( depot ) ;
42626: LD_ADDR_VAR 0 10
42630: PUSH
42631: LD_VAR 0 1
42635: PPUSH
42636: CALL_OW 274
42640: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42641: LD_ADDR_VAR 0 11
42645: PUSH
42646: LD_VAR 0 2
42650: PPUSH
42651: LD_VAR 0 1
42655: PPUSH
42656: CALL_OW 248
42660: PPUSH
42661: CALL_OW 450
42665: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42666: LD_VAR 0 10
42670: PPUSH
42671: LD_INT 1
42673: PPUSH
42674: CALL_OW 275
42678: PUSH
42679: LD_VAR 0 11
42683: PUSH
42684: LD_INT 1
42686: ARRAY
42687: GREATEREQUAL
42688: PUSH
42689: LD_VAR 0 10
42693: PPUSH
42694: LD_INT 2
42696: PPUSH
42697: CALL_OW 275
42701: PUSH
42702: LD_VAR 0 11
42706: PUSH
42707: LD_INT 2
42709: ARRAY
42710: GREATEREQUAL
42711: AND
42712: PUSH
42713: LD_VAR 0 10
42717: PPUSH
42718: LD_INT 3
42720: PPUSH
42721: CALL_OW 275
42725: PUSH
42726: LD_VAR 0 11
42730: PUSH
42731: LD_INT 3
42733: ARRAY
42734: GREATEREQUAL
42735: AND
42736: NOT
42737: IFFALSE 42741
// exit ;
42739: GO 43328
// if GetBType ( depot ) = b_depot then
42741: LD_VAR 0 1
42745: PPUSH
42746: CALL_OW 266
42750: PUSH
42751: LD_INT 0
42753: EQUAL
42754: IFFALSE 42766
// dist := 28 else
42756: LD_ADDR_VAR 0 14
42760: PUSH
42761: LD_INT 28
42763: ST_TO_ADDR
42764: GO 42774
// dist := 36 ;
42766: LD_ADDR_VAR 0 14
42770: PUSH
42771: LD_INT 36
42773: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42774: LD_VAR 0 1
42778: PPUSH
42779: LD_VAR 0 3
42783: PPUSH
42784: LD_VAR 0 4
42788: PPUSH
42789: CALL_OW 297
42793: PUSH
42794: LD_VAR 0 14
42798: GREATER
42799: IFFALSE 42803
// exit ;
42801: GO 43328
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42803: LD_ADDR_VAR 0 12
42807: PUSH
42808: LD_VAR 0 2
42812: PPUSH
42813: LD_VAR 0 3
42817: PPUSH
42818: LD_VAR 0 4
42822: PPUSH
42823: LD_VAR 0 5
42827: PPUSH
42828: LD_VAR 0 1
42832: PPUSH
42833: CALL_OW 248
42837: PPUSH
42838: LD_INT 0
42840: PPUSH
42841: CALL 43333 0 6
42845: ST_TO_ADDR
// if not hexes then
42846: LD_VAR 0 12
42850: NOT
42851: IFFALSE 42855
// exit ;
42853: GO 43328
// hex := GetHexInfo ( x , y ) ;
42855: LD_ADDR_VAR 0 15
42859: PUSH
42860: LD_VAR 0 3
42864: PPUSH
42865: LD_VAR 0 4
42869: PPUSH
42870: CALL_OW 546
42874: ST_TO_ADDR
// if hex [ 1 ] then
42875: LD_VAR 0 15
42879: PUSH
42880: LD_INT 1
42882: ARRAY
42883: IFFALSE 42887
// exit ;
42885: GO 43328
// height := hex [ 2 ] ;
42887: LD_ADDR_VAR 0 13
42891: PUSH
42892: LD_VAR 0 15
42896: PUSH
42897: LD_INT 2
42899: ARRAY
42900: ST_TO_ADDR
// for i = 1 to hexes do
42901: LD_ADDR_VAR 0 7
42905: PUSH
42906: DOUBLE
42907: LD_INT 1
42909: DEC
42910: ST_TO_ADDR
42911: LD_VAR 0 12
42915: PUSH
42916: FOR_TO
42917: IFFALSE 43247
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42919: LD_VAR 0 12
42923: PUSH
42924: LD_VAR 0 7
42928: ARRAY
42929: PUSH
42930: LD_INT 1
42932: ARRAY
42933: PPUSH
42934: LD_VAR 0 12
42938: PUSH
42939: LD_VAR 0 7
42943: ARRAY
42944: PUSH
42945: LD_INT 2
42947: ARRAY
42948: PPUSH
42949: CALL_OW 488
42953: NOT
42954: PUSH
42955: LD_VAR 0 12
42959: PUSH
42960: LD_VAR 0 7
42964: ARRAY
42965: PUSH
42966: LD_INT 1
42968: ARRAY
42969: PPUSH
42970: LD_VAR 0 12
42974: PUSH
42975: LD_VAR 0 7
42979: ARRAY
42980: PUSH
42981: LD_INT 2
42983: ARRAY
42984: PPUSH
42985: CALL_OW 428
42989: PUSH
42990: LD_INT 0
42992: GREATER
42993: OR
42994: PUSH
42995: LD_VAR 0 12
42999: PUSH
43000: LD_VAR 0 7
43004: ARRAY
43005: PUSH
43006: LD_INT 1
43008: ARRAY
43009: PPUSH
43010: LD_VAR 0 12
43014: PUSH
43015: LD_VAR 0 7
43019: ARRAY
43020: PUSH
43021: LD_INT 2
43023: ARRAY
43024: PPUSH
43025: CALL_OW 351
43029: OR
43030: IFFALSE 43036
// exit ;
43032: POP
43033: POP
43034: GO 43328
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43036: LD_ADDR_VAR 0 8
43040: PUSH
43041: LD_VAR 0 12
43045: PUSH
43046: LD_VAR 0 7
43050: ARRAY
43051: PUSH
43052: LD_INT 1
43054: ARRAY
43055: PPUSH
43056: LD_VAR 0 12
43060: PUSH
43061: LD_VAR 0 7
43065: ARRAY
43066: PUSH
43067: LD_INT 2
43069: ARRAY
43070: PPUSH
43071: CALL_OW 546
43075: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43076: LD_VAR 0 8
43080: PUSH
43081: LD_INT 1
43083: ARRAY
43084: PUSH
43085: LD_VAR 0 8
43089: PUSH
43090: LD_INT 2
43092: ARRAY
43093: PUSH
43094: LD_VAR 0 13
43098: PUSH
43099: LD_INT 2
43101: PLUS
43102: GREATER
43103: OR
43104: PUSH
43105: LD_VAR 0 8
43109: PUSH
43110: LD_INT 2
43112: ARRAY
43113: PUSH
43114: LD_VAR 0 13
43118: PUSH
43119: LD_INT 2
43121: MINUS
43122: LESS
43123: OR
43124: PUSH
43125: LD_VAR 0 8
43129: PUSH
43130: LD_INT 3
43132: ARRAY
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: LD_INT 8
43139: PUSH
43140: LD_INT 9
43142: PUSH
43143: LD_INT 10
43145: PUSH
43146: LD_INT 11
43148: PUSH
43149: LD_INT 12
43151: PUSH
43152: LD_INT 13
43154: PUSH
43155: LD_INT 16
43157: PUSH
43158: LD_INT 17
43160: PUSH
43161: LD_INT 18
43163: PUSH
43164: LD_INT 19
43166: PUSH
43167: LD_INT 20
43169: PUSH
43170: LD_INT 21
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: IN
43188: NOT
43189: OR
43190: PUSH
43191: LD_VAR 0 8
43195: PUSH
43196: LD_INT 5
43198: ARRAY
43199: NOT
43200: OR
43201: PUSH
43202: LD_VAR 0 8
43206: PUSH
43207: LD_INT 6
43209: ARRAY
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: LD_INT 7
43219: PUSH
43220: LD_INT 9
43222: PUSH
43223: LD_INT 10
43225: PUSH
43226: LD_INT 11
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: IN
43237: NOT
43238: OR
43239: IFFALSE 43245
// exit ;
43241: POP
43242: POP
43243: GO 43328
// end ;
43245: GO 42916
43247: POP
43248: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43249: LD_VAR 0 9
43253: PPUSH
43254: LD_VAR 0 3
43258: PPUSH
43259: LD_VAR 0 4
43263: PPUSH
43264: LD_INT 20
43266: PPUSH
43267: CALL 35274 0 4
43271: PUSH
43272: LD_INT 4
43274: ARRAY
43275: IFFALSE 43279
// exit ;
43277: GO 43328
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43279: LD_VAR 0 2
43283: PUSH
43284: LD_INT 29
43286: PUSH
43287: LD_INT 30
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: IN
43294: PUSH
43295: LD_VAR 0 3
43299: PPUSH
43300: LD_VAR 0 4
43304: PPUSH
43305: LD_VAR 0 9
43309: PPUSH
43310: CALL_OW 440
43314: NOT
43315: AND
43316: IFFALSE 43320
// exit ;
43318: GO 43328
// result := true ;
43320: LD_ADDR_VAR 0 6
43324: PUSH
43325: LD_INT 1
43327: ST_TO_ADDR
// end ;
43328: LD_VAR 0 6
43332: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43333: LD_INT 0
43335: PPUSH
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
43340: PPUSH
43341: PPUSH
43342: PPUSH
43343: PPUSH
43344: PPUSH
43345: PPUSH
43346: PPUSH
43347: PPUSH
43348: PPUSH
43349: PPUSH
43350: PPUSH
43351: PPUSH
43352: PPUSH
43353: PPUSH
43354: PPUSH
43355: PPUSH
43356: PPUSH
43357: PPUSH
43358: PPUSH
43359: PPUSH
43360: PPUSH
43361: PPUSH
43362: PPUSH
43363: PPUSH
43364: PPUSH
43365: PPUSH
43366: PPUSH
43367: PPUSH
43368: PPUSH
43369: PPUSH
43370: PPUSH
43371: PPUSH
43372: PPUSH
43373: PPUSH
43374: PPUSH
43375: PPUSH
43376: PPUSH
43377: PPUSH
43378: PPUSH
43379: PPUSH
43380: PPUSH
43381: PPUSH
43382: PPUSH
43383: PPUSH
43384: PPUSH
43385: PPUSH
43386: PPUSH
43387: PPUSH
43388: PPUSH
43389: PPUSH
43390: PPUSH
43391: PPUSH
43392: PPUSH
// result = [ ] ;
43393: LD_ADDR_VAR 0 7
43397: PUSH
43398: EMPTY
43399: ST_TO_ADDR
// temp_list = [ ] ;
43400: LD_ADDR_VAR 0 9
43404: PUSH
43405: EMPTY
43406: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43407: LD_VAR 0 4
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 3
43423: PUSH
43424: LD_INT 4
43426: PUSH
43427: LD_INT 5
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: IN
43438: NOT
43439: PUSH
43440: LD_VAR 0 1
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: IN
43455: PUSH
43456: LD_VAR 0 5
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: LD_INT 3
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: LIST
43474: IN
43475: NOT
43476: AND
43477: OR
43478: IFFALSE 43482
// exit ;
43480: GO 61873
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43482: LD_VAR 0 1
43486: PUSH
43487: LD_INT 6
43489: PUSH
43490: LD_INT 7
43492: PUSH
43493: LD_INT 8
43495: PUSH
43496: LD_INT 13
43498: PUSH
43499: LD_INT 12
43501: PUSH
43502: LD_INT 15
43504: PUSH
43505: LD_INT 11
43507: PUSH
43508: LD_INT 14
43510: PUSH
43511: LD_INT 10
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: IN
43525: IFFALSE 43535
// btype = b_lab ;
43527: LD_ADDR_VAR 0 1
43531: PUSH
43532: LD_INT 6
43534: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43535: LD_VAR 0 6
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: LIST
43553: IN
43554: NOT
43555: PUSH
43556: LD_VAR 0 1
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: LD_INT 3
43572: PUSH
43573: LD_INT 6
43575: PUSH
43576: LD_INT 36
43578: PUSH
43579: LD_INT 4
43581: PUSH
43582: LD_INT 5
43584: PUSH
43585: LD_INT 31
43587: PUSH
43588: LD_INT 32
43590: PUSH
43591: LD_INT 33
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: IN
43607: NOT
43608: PUSH
43609: LD_VAR 0 6
43613: PUSH
43614: LD_INT 1
43616: EQUAL
43617: AND
43618: OR
43619: PUSH
43620: LD_VAR 0 1
43624: PUSH
43625: LD_INT 2
43627: PUSH
43628: LD_INT 3
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: IN
43635: NOT
43636: PUSH
43637: LD_VAR 0 6
43641: PUSH
43642: LD_INT 2
43644: EQUAL
43645: AND
43646: OR
43647: IFFALSE 43657
// mode = 0 ;
43649: LD_ADDR_VAR 0 6
43653: PUSH
43654: LD_INT 0
43656: ST_TO_ADDR
// case mode of 0 :
43657: LD_VAR 0 6
43661: PUSH
43662: LD_INT 0
43664: DOUBLE
43665: EQUAL
43666: IFTRUE 43670
43668: GO 55123
43670: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43671: LD_ADDR_VAR 0 11
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: LD_INT 3
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 3
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43864: LD_ADDR_VAR 0 12
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 2
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: NEG
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 2
43998: NEG
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 3
44021: NEG
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 3
44032: NEG
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44060: LD_ADDR_VAR 0 13
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: NEG
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: LD_INT 3
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 3
44219: NEG
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 3
44231: NEG
44232: PUSH
44233: LD_INT 3
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44259: LD_ADDR_VAR 0 14
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: LD_INT 2
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 3
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: LD_INT 3
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44455: LD_ADDR_VAR 0 15
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 2
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 2
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 3
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 3
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44648: LD_ADDR_VAR 0 16
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 2
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 2
44783: NEG
44784: PUSH
44785: LD_INT 2
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 3
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 3
44805: PUSH
44806: LD_INT 3
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: LD_INT 3
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44841: LD_ADDR_VAR 0 17
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 2
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: LD_INT 2
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45071: LD_ADDR_VAR 0 18
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: NEG
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: NEG
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 2
45270: NEG
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45301: LD_ADDR_VAR 0 19
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: LD_INT 2
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 2
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 2
45477: NEG
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 2
45488: NEG
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45531: LD_ADDR_VAR 0 20
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 2
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: LD_INT 2
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 2
45730: NEG
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45761: LD_ADDR_VAR 0 21
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 2
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: LD_INT 2
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 2
45937: NEG
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 2
45960: NEG
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45991: LD_ADDR_VAR 0 22
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: LD_INT 2
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: LD_INT 2
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 2
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46221: LD_ADDR_VAR 0 23
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: LD_INT 2
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 2
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: LD_INT 2
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: LD_INT 2
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: NEG
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: LD_INT 3
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 3
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46501: LD_ADDR_VAR 0 24
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 2
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: LD_INT 2
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 3
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46777: LD_ADDR_VAR 0 25
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 2
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 3
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 3
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: LD_INT 3
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 3
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47051: LD_ADDR_VAR 0 26
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 2
47227: NEG
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: LD_INT 3
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 3
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47327: LD_ADDR_VAR 0 27
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: LD_INT 2
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 2
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: LD_INT 2
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 3
47560: NEG
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 3
47572: NEG
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47607: LD_ADDR_VAR 0 28
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: NEG
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: LD_INT 2
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: NEG
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 3
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: LD_INT 3
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 3
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 3
47854: NEG
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47889: LD_ADDR_VAR 0 29
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 2
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 2
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: LD_INT 3
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 3
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 3
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 2
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 3
48133: NEG
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48168: LD_ADDR_VAR 0 30
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 2
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 3
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 3
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 3
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 3
48411: NEG
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48446: LD_ADDR_VAR 0 31
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 2
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 2
48635: NEG
48636: PUSH
48637: LD_INT 3
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 3
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: LD_INT 3
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 3
48689: NEG
48690: PUSH
48691: LD_INT 2
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48724: LD_ADDR_VAR 0 32
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: LD_INT 3
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 3
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: LD_INT 3
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 3
48967: NEG
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49002: LD_ADDR_VAR 0 33
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 2
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: NEG
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: LD_INT 2
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: LD_INT 3
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 3
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: LD_INT 3
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 3
49246: NEG
49247: PUSH
49248: LD_INT 2
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49281: LD_ADDR_VAR 0 34
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 2
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: LD_INT 2
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: LD_INT 3
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 3
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: LD_INT 3
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 3
49526: NEG
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49561: LD_ADDR_VAR 0 35
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49673: LD_ADDR_VAR 0 36
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49785: LD_ADDR_VAR 0 37
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49897: LD_ADDR_VAR 0 38
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50009: LD_ADDR_VAR 0 39
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50121: LD_ADDR_VAR 0 40
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50233: LD_ADDR_VAR 0 41
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: NEG
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: LD_INT 2
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: LD_INT 3
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 3
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 3
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 3
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 3
50476: PUSH
50477: LD_INT 3
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: LD_INT 3
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 3
50507: NEG
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 3
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 3
50530: NEG
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 3
50542: NEG
50543: PUSH
50544: LD_INT 3
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50583: LD_ADDR_VAR 0 42
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: LD_INT 2
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 2
50749: NEG
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: LD_INT 3
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: LD_INT 3
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: LD_INT 3
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 2
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 3
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 3
50829: PUSH
50830: LD_INT 3
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: LD_INT 3
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 3
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 3
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 3
50880: NEG
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 3
50892: NEG
50893: PUSH
50894: LD_INT 3
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50933: LD_ADDR_VAR 0 43
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: NEG
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: LD_INT 3
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 2
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 3
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 3
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: LD_INT 3
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: NEG
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 3
51229: NEG
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 3
51240: NEG
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51281: LD_ADDR_VAR 0 44
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 2
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: NEG
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: LD_INT 2
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 2
51471: NEG
51472: PUSH
51473: LD_INT 3
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 3
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 3
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 3
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 3
51524: PUSH
51525: LD_INT 3
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: LD_INT 3
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 2
51544: NEG
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 3
51555: NEG
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 3
51566: NEG
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 3
51578: NEG
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 3
51590: NEG
51591: PUSH
51592: LD_INT 3
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51631: LD_ADDR_VAR 0 45
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: LD_INT 1
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: LD_INT 2
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: NEG
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 2
51809: NEG
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: LD_INT 3
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: LD_INT 3
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: LD_INT 3
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: LD_INT 2
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 3
51867: PUSH
51868: LD_INT 2
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 3
51877: PUSH
51878: LD_INT 3
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: LD_INT 3
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 3
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 3
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 3
51928: NEG
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 3
51940: NEG
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51981: LD_ADDR_VAR 0 46
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 3
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 3
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 3
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 3
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 3
52277: NEG
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 3
52288: NEG
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52329: LD_ADDR_VAR 0 47
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 2
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: NEG
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: LD_INT 2
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52480: LD_ADDR_VAR 0 48
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52627: LD_ADDR_VAR 0 49
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 2
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 2
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 2
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52771: LD_ADDR_VAR 0 50
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52915: LD_ADDR_VAR 0 51
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53062: LD_ADDR_VAR 0 52
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53213: LD_ADDR_VAR 0 53
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53443: LD_ADDR_VAR 0 54
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: LD_INT 2
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53673: LD_ADDR_VAR 0 55
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 2
53860: NEG
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53903: LD_ADDR_VAR 0 56
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: LD_INT 2
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: NEG
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: NEG
54103: PUSH
54104: LD_INT 2
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54133: LD_ADDR_VAR 0 57
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: LD_INT 2
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 2
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 2
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 2
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 2
54320: NEG
54321: PUSH
54322: LD_INT 1
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 2
54332: NEG
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54363: LD_ADDR_VAR 0 58
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: LD_INT 2
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 2
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: LD_INT 2
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 2
54550: NEG
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: NEG
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54593: LD_ADDR_VAR 0 59
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54681: LD_ADDR_VAR 0 60
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54769: LD_ADDR_VAR 0 61
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54857: LD_ADDR_VAR 0 62
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 1
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54945: LD_ADDR_VAR 0 63
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55033: LD_ADDR_VAR 0 64
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: ST_TO_ADDR
// end ; 1 :
55121: GO 61018
55123: LD_INT 1
55125: DOUBLE
55126: EQUAL
55127: IFTRUE 55131
55129: GO 57754
55131: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55132: LD_ADDR_VAR 0 11
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 3
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: LIST
55175: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55176: LD_ADDR_VAR 0 12
55180: PUSH
55181: LD_INT 2
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 3
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 3
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: LIST
55216: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55217: LD_ADDR_VAR 0 13
55221: PUSH
55222: LD_INT 3
55224: PUSH
55225: LD_INT 2
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 3
55234: PUSH
55235: LD_INT 3
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: LD_INT 3
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: LIST
55256: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55257: LD_ADDR_VAR 0 14
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: LD_INT 3
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: LD_INT 3
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: LIST
55297: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55298: LD_ADDR_VAR 0 15
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 3
55316: NEG
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 3
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: LIST
55341: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55342: LD_ADDR_VAR 0 16
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: LD_INT 3
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 3
55361: NEG
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 3
55373: NEG
55374: PUSH
55375: LD_INT 3
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: LIST
55387: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55388: LD_ADDR_VAR 0 17
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 3
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 3
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: LD_INT 2
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: LIST
55431: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55432: LD_ADDR_VAR 0 18
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 3
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 3
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: LIST
55472: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55473: LD_ADDR_VAR 0 19
55477: PUSH
55478: LD_INT 3
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 3
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: LIST
55512: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55513: LD_ADDR_VAR 0 20
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: LD_INT 3
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 3
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: LD_INT 2
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: LIST
55553: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55554: LD_ADDR_VAR 0 21
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 3
55572: NEG
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 3
55583: NEG
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: LIST
55597: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55598: LD_ADDR_VAR 0 22
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: LD_INT 3
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 3
55617: NEG
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 3
55629: NEG
55630: PUSH
55631: LD_INT 3
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: LIST
55643: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55644: LD_ADDR_VAR 0 23
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 3
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: NEG
55663: PUSH
55664: LD_INT 4
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: LD_INT 3
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: LIST
55687: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55688: LD_ADDR_VAR 0 24
55692: PUSH
55693: LD_INT 3
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 3
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 4
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: LIST
55728: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55729: LD_ADDR_VAR 0 25
55733: PUSH
55734: LD_INT 3
55736: PUSH
55737: LD_INT 3
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 4
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 3
55756: PUSH
55757: LD_INT 4
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: LIST
55768: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55769: LD_ADDR_VAR 0 26
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 3
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 4
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: LD_INT 3
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: LIST
55809: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55810: LD_ADDR_VAR 0 27
55814: PUSH
55815: LD_INT 3
55817: NEG
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 4
55839: NEG
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55854: LD_ADDR_VAR 0 28
55858: PUSH
55859: LD_INT 3
55861: NEG
55862: PUSH
55863: LD_INT 3
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 3
55873: NEG
55874: PUSH
55875: LD_INT 4
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 4
55885: NEG
55886: PUSH
55887: LD_INT 3
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: LIST
55899: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55900: LD_ADDR_VAR 0 29
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: LD_INT 4
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 4
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: LD_INT 3
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 5
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 5
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: LD_INT 4
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: LD_INT 6
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 6
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 5
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56055: LD_ADDR_VAR 0 30
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 3
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 3
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 3
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 4
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 4
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 4
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 5
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 5
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 5
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 6
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 6
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56198: LD_ADDR_VAR 0 31
56202: PUSH
56203: LD_INT 3
56205: PUSH
56206: LD_INT 2
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: LD_INT 3
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: LD_INT 3
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 4
56235: PUSH
56236: LD_INT 3
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 4
56245: PUSH
56246: LD_INT 4
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 3
56255: PUSH
56256: LD_INT 4
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 5
56265: PUSH
56266: LD_INT 4
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 5
56275: PUSH
56276: LD_INT 5
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 4
56285: PUSH
56286: LD_INT 5
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 6
56295: PUSH
56296: LD_INT 5
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 6
56305: PUSH
56306: LD_INT 6
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 5
56315: PUSH
56316: LD_INT 6
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56337: LD_ADDR_VAR 0 32
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: LD_INT 4
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 4
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 5
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 5
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 4
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 6
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: LD_INT 6
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: LD_INT 5
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56480: LD_ADDR_VAR 0 33
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 3
56509: NEG
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 3
56521: NEG
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 4
56532: NEG
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 4
56543: NEG
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 4
56555: NEG
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 5
56566: NEG
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 5
56577: NEG
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 5
56589: NEG
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 6
56600: NEG
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 6
56611: NEG
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56635: LD_ADDR_VAR 0 34
56639: PUSH
56640: LD_INT 2
56642: NEG
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 3
56654: NEG
56655: PUSH
56656: LD_INT 2
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 3
56666: NEG
56667: PUSH
56668: LD_INT 3
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 3
56678: NEG
56679: PUSH
56680: LD_INT 4
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 4
56690: NEG
56691: PUSH
56692: LD_INT 3
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 4
56702: NEG
56703: PUSH
56704: LD_INT 4
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 4
56714: NEG
56715: PUSH
56716: LD_INT 5
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 5
56726: NEG
56727: PUSH
56728: LD_INT 4
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 5
56738: NEG
56739: PUSH
56740: LD_INT 5
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 5
56750: NEG
56751: PUSH
56752: LD_INT 6
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 6
56762: NEG
56763: PUSH
56764: LD_INT 5
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 6
56774: NEG
56775: PUSH
56776: LD_INT 6
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56798: LD_ADDR_VAR 0 41
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: LD_INT 2
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: LD_INT 3
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: LIST
56841: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56842: LD_ADDR_VAR 0 42
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 3
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: LIST
56882: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56883: LD_ADDR_VAR 0 43
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: LD_INT 3
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: LIST
56922: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56923: LD_ADDR_VAR 0 44
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 3
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: PUSH
56952: LD_INT 2
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: LIST
56963: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56964: LD_ADDR_VAR 0 45
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 2
56982: NEG
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 3
56993: NEG
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: LIST
57007: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57008: LD_ADDR_VAR 0 46
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: LD_INT 2
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: LD_INT 3
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 3
57039: NEG
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: LIST
57053: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57054: LD_ADDR_VAR 0 47
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: LD_INT 3
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 3
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57087: LD_ADDR_VAR 0 48
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57118: LD_ADDR_VAR 0 49
57122: PUSH
57123: LD_INT 3
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57147: LD_ADDR_VAR 0 50
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: LD_INT 3
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 3
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57176: LD_ADDR_VAR 0 51
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57207: LD_ADDR_VAR 0 52
57211: PUSH
57212: LD_INT 3
57214: NEG
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 3
57226: NEG
57227: PUSH
57228: LD_INT 2
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57240: LD_ADDR_VAR 0 53
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: LD_INT 3
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: LIST
57283: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57284: LD_ADDR_VAR 0 54
57288: PUSH
57289: LD_INT 2
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 3
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: LIST
57324: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57325: LD_ADDR_VAR 0 55
57329: PUSH
57330: LD_INT 3
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 3
57342: PUSH
57343: LD_INT 3
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: LD_INT 3
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57365: LD_ADDR_VAR 0 56
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: LD_INT 3
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: LD_INT 3
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: LIST
57405: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57406: LD_ADDR_VAR 0 57
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 3
57424: NEG
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 3
57435: NEG
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57450: LD_ADDR_VAR 0 58
57454: PUSH
57455: LD_INT 2
57457: NEG
57458: PUSH
57459: LD_INT 3
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 3
57469: NEG
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 3
57481: NEG
57482: PUSH
57483: LD_INT 3
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57496: LD_ADDR_VAR 0 59
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: LIST
57539: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57540: LD_ADDR_VAR 0 60
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: LIST
57580: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57581: LD_ADDR_VAR 0 61
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: LD_INT 2
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57621: LD_ADDR_VAR 0 62
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: LD_INT 2
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: LIST
57661: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57662: LD_ADDR_VAR 0 63
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: LIST
57705: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57706: LD_ADDR_VAR 0 64
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 2
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: LD_INT 2
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: LIST
57751: ST_TO_ADDR
// end ; 2 :
57752: GO 61018
57754: LD_INT 2
57756: DOUBLE
57757: EQUAL
57758: IFTRUE 57762
57760: GO 61017
57762: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57763: LD_ADDR_VAR 0 29
57767: PUSH
57768: LD_INT 4
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 4
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 5
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 5
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 4
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 3
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 5
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 3
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 3
57873: PUSH
57874: LD_INT 2
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 4
57883: PUSH
57884: LD_INT 3
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 4
57893: PUSH
57894: LD_INT 4
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 3
57903: PUSH
57904: LD_INT 4
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: LD_INT 3
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: LD_INT 2
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 4
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: LD_INT 4
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 4
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: LD_INT 3
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: LD_INT 4
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: LD_INT 5
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: LD_INT 5
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: NEG
58004: PUSH
58005: LD_INT 4
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: LD_INT 3
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: PUSH
58026: LD_INT 5
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: NEG
58036: PUSH
58037: LD_INT 3
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 3
58046: NEG
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 3
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 3
58091: NEG
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 4
58102: NEG
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 4
58113: NEG
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 4
58125: NEG
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: NEG
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 4
58148: NEG
58149: PUSH
58150: LD_INT 4
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 4
58160: NEG
58161: PUSH
58162: LD_INT 5
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 3
58172: NEG
58173: PUSH
58174: LD_INT 4
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 3
58184: NEG
58185: PUSH
58186: LD_INT 3
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 4
58196: NEG
58197: PUSH
58198: LD_INT 3
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 5
58208: NEG
58209: PUSH
58210: LD_INT 4
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 5
58220: NEG
58221: PUSH
58222: LD_INT 5
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 3
58232: NEG
58233: PUSH
58234: LD_INT 5
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 5
58244: NEG
58245: PUSH
58246: LD_INT 3
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58301: LD_ADDR_VAR 0 30
58305: PUSH
58306: LD_INT 4
58308: PUSH
58309: LD_INT 4
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 4
58318: PUSH
58319: LD_INT 3
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 5
58328: PUSH
58329: LD_INT 4
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 5
58338: PUSH
58339: LD_INT 5
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 4
58348: PUSH
58349: LD_INT 5
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 3
58358: PUSH
58359: LD_INT 4
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 3
58368: PUSH
58369: LD_INT 3
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 5
58378: PUSH
58379: LD_INT 3
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 3
58388: PUSH
58389: LD_INT 5
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: LD_INT 3
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 0
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: LD_INT 4
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: LD_INT 4
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: LD_INT 3
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: LD_INT 4
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 4
58491: NEG
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 4
58502: NEG
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 3
58514: NEG
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 3
58525: NEG
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 4
58536: NEG
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 5
58547: NEG
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 5
58558: NEG
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 5
58570: NEG
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 3
58582: NEG
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 3
58593: NEG
58594: PUSH
58595: LD_INT 3
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 3
58605: NEG
58606: PUSH
58607: LD_INT 4
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: LD_INT 3
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 3
58641: NEG
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 4
58653: NEG
58654: PUSH
58655: LD_INT 3
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 4
58665: NEG
58666: PUSH
58667: LD_INT 4
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: LD_INT 4
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 4
58689: NEG
58690: PUSH
58691: LD_INT 2
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: LD_INT 4
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: LD_INT 5
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: LD_INT 4
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 3
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: LD_INT 3
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 4
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: LD_INT 5
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 3
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: LD_INT 5
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58848: LD_ADDR_VAR 0 31
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 4
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: LD_INT 4
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: LD_INT 5
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: LD_INT 5
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: LD_INT 4
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 3
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: PUSH
58928: LD_INT 5
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 2
58937: NEG
58938: PUSH
58939: LD_INT 3
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: NEG
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 3
58959: NEG
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 2
58971: NEG
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: NEG
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 3
58993: NEG
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 4
59004: NEG
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 4
59015: NEG
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 4
59027: NEG
59028: PUSH
59029: LD_INT 2
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 4
59050: NEG
59051: PUSH
59052: LD_INT 4
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 4
59062: NEG
59063: PUSH
59064: LD_INT 5
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 3
59074: NEG
59075: PUSH
59076: LD_INT 4
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: LD_INT 3
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 4
59098: NEG
59099: PUSH
59100: LD_INT 3
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 5
59110: NEG
59111: PUSH
59112: LD_INT 4
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 5
59122: NEG
59123: PUSH
59124: LD_INT 5
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 3
59134: NEG
59135: PUSH
59136: LD_INT 5
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 5
59146: NEG
59147: PUSH
59148: LD_INT 3
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 3
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 4
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 3
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: LD_INT 2
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: LD_INT 3
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: LD_INT 4
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 2
59248: NEG
59249: PUSH
59250: LD_INT 4
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 4
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 4
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 5
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 5
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 4
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 3
59321: PUSH
59322: LD_INT 1
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 5
59343: PUSH
59344: LD_INT 2
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59398: LD_ADDR_VAR 0 32
59402: PUSH
59403: LD_INT 4
59405: NEG
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 4
59416: NEG
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 3
59428: NEG
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 3
59439: NEG
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 4
59450: NEG
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 5
59461: NEG
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 5
59472: NEG
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 5
59484: NEG
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 3
59496: NEG
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 3
59507: NEG
59508: PUSH
59509: LD_INT 3
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 3
59519: NEG
59520: PUSH
59521: LD_INT 4
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: LD_INT 2
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: LD_INT 2
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 4
59567: NEG
59568: PUSH
59569: LD_INT 3
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 4
59579: NEG
59580: PUSH
59581: LD_INT 4
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: LD_INT 4
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 4
59603: NEG
59604: PUSH
59605: LD_INT 2
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: LD_INT 4
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 5
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: LD_INT 4
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: LD_INT 3
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 3
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: LD_INT 4
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: LD_INT 5
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: LD_INT 3
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: LD_INT 5
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 3
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 3
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 4
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 4
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 3
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: PUSH
59790: LD_INT 2
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 4
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 4
59810: PUSH
59811: LD_INT 4
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 4
59820: PUSH
59821: LD_INT 3
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 5
59830: PUSH
59831: LD_INT 4
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 5
59840: PUSH
59841: LD_INT 5
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 4
59850: PUSH
59851: LD_INT 5
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 3
59860: PUSH
59861: LD_INT 4
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 3
59870: PUSH
59871: LD_INT 3
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 5
59880: PUSH
59881: LD_INT 3
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 3
59890: PUSH
59891: LD_INT 5
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59945: LD_ADDR_VAR 0 33
59949: PUSH
59950: LD_INT 4
59952: NEG
59953: PUSH
59954: LD_INT 4
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 4
59964: NEG
59965: PUSH
59966: LD_INT 5
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 3
59976: NEG
59977: PUSH
59978: LD_INT 4
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 3
59988: NEG
59989: PUSH
59990: LD_INT 3
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 4
60000: NEG
60001: PUSH
60002: LD_INT 3
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 5
60012: NEG
60013: PUSH
60014: LD_INT 4
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 5
60024: NEG
60025: PUSH
60026: LD_INT 5
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 3
60036: NEG
60037: PUSH
60038: LD_INT 5
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 5
60048: NEG
60049: PUSH
60050: LD_INT 3
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 3
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: LD_INT 4
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: LD_INT 3
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: LD_INT 2
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: LD_INT 4
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 2
60139: PUSH
60140: LD_INT 2
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: LD_INT 4
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 4
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 4
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 5
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 5
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 4
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 3
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 3
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 5
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 3
60255: PUSH
60256: LD_INT 3
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: LD_INT 2
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 4
60275: PUSH
60276: LD_INT 3
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 4
60285: PUSH
60286: LD_INT 4
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: LD_INT 4
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 2
60305: PUSH
60306: LD_INT 3
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 4
60325: PUSH
60326: LD_INT 2
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: LD_INT 4
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 4
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: LD_INT 3
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: LD_INT 4
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 1
60375: PUSH
60376: LD_INT 5
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 5
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: LD_INT 4
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: LD_INT 3
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 2
60417: PUSH
60418: LD_INT 5
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: LD_INT 3
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60483: LD_ADDR_VAR 0 34
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 4
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: LD_INT 5
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: LD_INT 4
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 3
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: LD_INT 3
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: NEG
60546: PUSH
60547: LD_INT 4
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 5
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 2
60569: PUSH
60570: LD_INT 3
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 2
60580: NEG
60581: PUSH
60582: LD_INT 5
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 3
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 3
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 4
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 4
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 3
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 2
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 2
60664: PUSH
60665: LD_INT 2
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 4
60675: PUSH
60676: LD_INT 2
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 4
60685: PUSH
60686: LD_INT 4
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 4
60695: PUSH
60696: LD_INT 3
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 5
60705: PUSH
60706: LD_INT 4
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 5
60715: PUSH
60716: LD_INT 5
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 4
60725: PUSH
60726: LD_INT 5
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 3
60735: PUSH
60736: LD_INT 4
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 3
60745: PUSH
60746: LD_INT 3
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 5
60755: PUSH
60756: LD_INT 3
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 3
60765: PUSH
60766: LD_INT 5
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: LD_INT 3
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: LD_INT 3
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: LD_INT 4
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: LD_INT 4
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: LD_INT 3
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: LD_INT 4
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 2
60857: NEG
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 4
60868: NEG
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 4
60879: NEG
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 3
60891: NEG
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 3
60902: NEG
60903: PUSH
60904: LD_INT 1
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 4
60913: NEG
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 5
60924: NEG
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 5
60935: NEG
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 5
60947: NEG
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 3
60959: NEG
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: ST_TO_ADDR
// end ; end ;
61015: GO 61018
61017: POP
// case btype of b_depot , b_warehouse :
61018: LD_VAR 0 1
61022: PUSH
61023: LD_INT 0
61025: DOUBLE
61026: EQUAL
61027: IFTRUE 61037
61029: LD_INT 1
61031: DOUBLE
61032: EQUAL
61033: IFTRUE 61037
61035: GO 61238
61037: POP
// case nation of nation_american :
61038: LD_VAR 0 5
61042: PUSH
61043: LD_INT 1
61045: DOUBLE
61046: EQUAL
61047: IFTRUE 61051
61049: GO 61107
61051: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61052: LD_ADDR_VAR 0 9
61056: PUSH
61057: LD_VAR 0 11
61061: PUSH
61062: LD_VAR 0 12
61066: PUSH
61067: LD_VAR 0 13
61071: PUSH
61072: LD_VAR 0 14
61076: PUSH
61077: LD_VAR 0 15
61081: PUSH
61082: LD_VAR 0 16
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: PUSH
61095: LD_VAR 0 4
61099: PUSH
61100: LD_INT 1
61102: PLUS
61103: ARRAY
61104: ST_TO_ADDR
61105: GO 61236
61107: LD_INT 2
61109: DOUBLE
61110: EQUAL
61111: IFTRUE 61115
61113: GO 61171
61115: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61116: LD_ADDR_VAR 0 9
61120: PUSH
61121: LD_VAR 0 17
61125: PUSH
61126: LD_VAR 0 18
61130: PUSH
61131: LD_VAR 0 19
61135: PUSH
61136: LD_VAR 0 20
61140: PUSH
61141: LD_VAR 0 21
61145: PUSH
61146: LD_VAR 0 22
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: PUSH
61159: LD_VAR 0 4
61163: PUSH
61164: LD_INT 1
61166: PLUS
61167: ARRAY
61168: ST_TO_ADDR
61169: GO 61236
61171: LD_INT 3
61173: DOUBLE
61174: EQUAL
61175: IFTRUE 61179
61177: GO 61235
61179: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61180: LD_ADDR_VAR 0 9
61184: PUSH
61185: LD_VAR 0 23
61189: PUSH
61190: LD_VAR 0 24
61194: PUSH
61195: LD_VAR 0 25
61199: PUSH
61200: LD_VAR 0 26
61204: PUSH
61205: LD_VAR 0 27
61209: PUSH
61210: LD_VAR 0 28
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: PUSH
61223: LD_VAR 0 4
61227: PUSH
61228: LD_INT 1
61230: PLUS
61231: ARRAY
61232: ST_TO_ADDR
61233: GO 61236
61235: POP
61236: GO 61791
61238: LD_INT 2
61240: DOUBLE
61241: EQUAL
61242: IFTRUE 61252
61244: LD_INT 3
61246: DOUBLE
61247: EQUAL
61248: IFTRUE 61252
61250: GO 61308
61252: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61253: LD_ADDR_VAR 0 9
61257: PUSH
61258: LD_VAR 0 29
61262: PUSH
61263: LD_VAR 0 30
61267: PUSH
61268: LD_VAR 0 31
61272: PUSH
61273: LD_VAR 0 32
61277: PUSH
61278: LD_VAR 0 33
61282: PUSH
61283: LD_VAR 0 34
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: PUSH
61296: LD_VAR 0 4
61300: PUSH
61301: LD_INT 1
61303: PLUS
61304: ARRAY
61305: ST_TO_ADDR
61306: GO 61791
61308: LD_INT 16
61310: DOUBLE
61311: EQUAL
61312: IFTRUE 61370
61314: LD_INT 17
61316: DOUBLE
61317: EQUAL
61318: IFTRUE 61370
61320: LD_INT 18
61322: DOUBLE
61323: EQUAL
61324: IFTRUE 61370
61326: LD_INT 19
61328: DOUBLE
61329: EQUAL
61330: IFTRUE 61370
61332: LD_INT 22
61334: DOUBLE
61335: EQUAL
61336: IFTRUE 61370
61338: LD_INT 20
61340: DOUBLE
61341: EQUAL
61342: IFTRUE 61370
61344: LD_INT 21
61346: DOUBLE
61347: EQUAL
61348: IFTRUE 61370
61350: LD_INT 23
61352: DOUBLE
61353: EQUAL
61354: IFTRUE 61370
61356: LD_INT 24
61358: DOUBLE
61359: EQUAL
61360: IFTRUE 61370
61362: LD_INT 25
61364: DOUBLE
61365: EQUAL
61366: IFTRUE 61370
61368: GO 61426
61370: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61371: LD_ADDR_VAR 0 9
61375: PUSH
61376: LD_VAR 0 35
61380: PUSH
61381: LD_VAR 0 36
61385: PUSH
61386: LD_VAR 0 37
61390: PUSH
61391: LD_VAR 0 38
61395: PUSH
61396: LD_VAR 0 39
61400: PUSH
61401: LD_VAR 0 40
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: PUSH
61414: LD_VAR 0 4
61418: PUSH
61419: LD_INT 1
61421: PLUS
61422: ARRAY
61423: ST_TO_ADDR
61424: GO 61791
61426: LD_INT 6
61428: DOUBLE
61429: EQUAL
61430: IFTRUE 61482
61432: LD_INT 7
61434: DOUBLE
61435: EQUAL
61436: IFTRUE 61482
61438: LD_INT 8
61440: DOUBLE
61441: EQUAL
61442: IFTRUE 61482
61444: LD_INT 13
61446: DOUBLE
61447: EQUAL
61448: IFTRUE 61482
61450: LD_INT 12
61452: DOUBLE
61453: EQUAL
61454: IFTRUE 61482
61456: LD_INT 15
61458: DOUBLE
61459: EQUAL
61460: IFTRUE 61482
61462: LD_INT 11
61464: DOUBLE
61465: EQUAL
61466: IFTRUE 61482
61468: LD_INT 14
61470: DOUBLE
61471: EQUAL
61472: IFTRUE 61482
61474: LD_INT 10
61476: DOUBLE
61477: EQUAL
61478: IFTRUE 61482
61480: GO 61538
61482: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61483: LD_ADDR_VAR 0 9
61487: PUSH
61488: LD_VAR 0 41
61492: PUSH
61493: LD_VAR 0 42
61497: PUSH
61498: LD_VAR 0 43
61502: PUSH
61503: LD_VAR 0 44
61507: PUSH
61508: LD_VAR 0 45
61512: PUSH
61513: LD_VAR 0 46
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: PUSH
61526: LD_VAR 0 4
61530: PUSH
61531: LD_INT 1
61533: PLUS
61534: ARRAY
61535: ST_TO_ADDR
61536: GO 61791
61538: LD_INT 36
61540: DOUBLE
61541: EQUAL
61542: IFTRUE 61546
61544: GO 61602
61546: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61547: LD_ADDR_VAR 0 9
61551: PUSH
61552: LD_VAR 0 47
61556: PUSH
61557: LD_VAR 0 48
61561: PUSH
61562: LD_VAR 0 49
61566: PUSH
61567: LD_VAR 0 50
61571: PUSH
61572: LD_VAR 0 51
61576: PUSH
61577: LD_VAR 0 52
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: PUSH
61590: LD_VAR 0 4
61594: PUSH
61595: LD_INT 1
61597: PLUS
61598: ARRAY
61599: ST_TO_ADDR
61600: GO 61791
61602: LD_INT 4
61604: DOUBLE
61605: EQUAL
61606: IFTRUE 61628
61608: LD_INT 5
61610: DOUBLE
61611: EQUAL
61612: IFTRUE 61628
61614: LD_INT 34
61616: DOUBLE
61617: EQUAL
61618: IFTRUE 61628
61620: LD_INT 37
61622: DOUBLE
61623: EQUAL
61624: IFTRUE 61628
61626: GO 61684
61628: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61629: LD_ADDR_VAR 0 9
61633: PUSH
61634: LD_VAR 0 53
61638: PUSH
61639: LD_VAR 0 54
61643: PUSH
61644: LD_VAR 0 55
61648: PUSH
61649: LD_VAR 0 56
61653: PUSH
61654: LD_VAR 0 57
61658: PUSH
61659: LD_VAR 0 58
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: PUSH
61672: LD_VAR 0 4
61676: PUSH
61677: LD_INT 1
61679: PLUS
61680: ARRAY
61681: ST_TO_ADDR
61682: GO 61791
61684: LD_INT 31
61686: DOUBLE
61687: EQUAL
61688: IFTRUE 61734
61690: LD_INT 32
61692: DOUBLE
61693: EQUAL
61694: IFTRUE 61734
61696: LD_INT 33
61698: DOUBLE
61699: EQUAL
61700: IFTRUE 61734
61702: LD_INT 27
61704: DOUBLE
61705: EQUAL
61706: IFTRUE 61734
61708: LD_INT 26
61710: DOUBLE
61711: EQUAL
61712: IFTRUE 61734
61714: LD_INT 28
61716: DOUBLE
61717: EQUAL
61718: IFTRUE 61734
61720: LD_INT 29
61722: DOUBLE
61723: EQUAL
61724: IFTRUE 61734
61726: LD_INT 30
61728: DOUBLE
61729: EQUAL
61730: IFTRUE 61734
61732: GO 61790
61734: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61735: LD_ADDR_VAR 0 9
61739: PUSH
61740: LD_VAR 0 59
61744: PUSH
61745: LD_VAR 0 60
61749: PUSH
61750: LD_VAR 0 61
61754: PUSH
61755: LD_VAR 0 62
61759: PUSH
61760: LD_VAR 0 63
61764: PUSH
61765: LD_VAR 0 64
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: PUSH
61778: LD_VAR 0 4
61782: PUSH
61783: LD_INT 1
61785: PLUS
61786: ARRAY
61787: ST_TO_ADDR
61788: GO 61791
61790: POP
// temp_list2 = [ ] ;
61791: LD_ADDR_VAR 0 10
61795: PUSH
61796: EMPTY
61797: ST_TO_ADDR
// for i in temp_list do
61798: LD_ADDR_VAR 0 8
61802: PUSH
61803: LD_VAR 0 9
61807: PUSH
61808: FOR_IN
61809: IFFALSE 61861
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61811: LD_ADDR_VAR 0 10
61815: PUSH
61816: LD_VAR 0 10
61820: PUSH
61821: LD_VAR 0 8
61825: PUSH
61826: LD_INT 1
61828: ARRAY
61829: PUSH
61830: LD_VAR 0 2
61834: PLUS
61835: PUSH
61836: LD_VAR 0 8
61840: PUSH
61841: LD_INT 2
61843: ARRAY
61844: PUSH
61845: LD_VAR 0 3
61849: PLUS
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: EMPTY
61856: LIST
61857: ADD
61858: ST_TO_ADDR
61859: GO 61808
61861: POP
61862: POP
// result = temp_list2 ;
61863: LD_ADDR_VAR 0 7
61867: PUSH
61868: LD_VAR 0 10
61872: ST_TO_ADDR
// end ;
61873: LD_VAR 0 7
61877: RET
// export function EnemyInRange ( unit , dist ) ; begin
61878: LD_INT 0
61880: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61881: LD_ADDR_VAR 0 3
61885: PUSH
61886: LD_VAR 0 1
61890: PPUSH
61891: CALL_OW 255
61895: PPUSH
61896: LD_VAR 0 1
61900: PPUSH
61901: CALL_OW 250
61905: PPUSH
61906: LD_VAR 0 1
61910: PPUSH
61911: CALL_OW 251
61915: PPUSH
61916: LD_VAR 0 2
61920: PPUSH
61921: CALL 35274 0 4
61925: PUSH
61926: LD_INT 4
61928: ARRAY
61929: ST_TO_ADDR
// end ;
61930: LD_VAR 0 3
61934: RET
// export function PlayerSeeMe ( unit ) ; begin
61935: LD_INT 0
61937: PPUSH
// result := See ( your_side , unit ) ;
61938: LD_ADDR_VAR 0 2
61942: PUSH
61943: LD_OWVAR 2
61947: PPUSH
61948: LD_VAR 0 1
61952: PPUSH
61953: CALL_OW 292
61957: ST_TO_ADDR
// end ;
61958: LD_VAR 0 2
61962: RET
// export function ReverseDir ( unit ) ; begin
61963: LD_INT 0
61965: PPUSH
// if not unit then
61966: LD_VAR 0 1
61970: NOT
61971: IFFALSE 61975
// exit ;
61973: GO 61998
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61975: LD_ADDR_VAR 0 2
61979: PUSH
61980: LD_VAR 0 1
61984: PPUSH
61985: CALL_OW 254
61989: PUSH
61990: LD_INT 3
61992: PLUS
61993: PUSH
61994: LD_INT 6
61996: MOD
61997: ST_TO_ADDR
// end ;
61998: LD_VAR 0 2
62002: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62003: LD_INT 0
62005: PPUSH
62006: PPUSH
62007: PPUSH
62008: PPUSH
62009: PPUSH
// if not hexes then
62010: LD_VAR 0 2
62014: NOT
62015: IFFALSE 62019
// exit ;
62017: GO 62167
// dist := 9999 ;
62019: LD_ADDR_VAR 0 5
62023: PUSH
62024: LD_INT 9999
62026: ST_TO_ADDR
// for i = 1 to hexes do
62027: LD_ADDR_VAR 0 4
62031: PUSH
62032: DOUBLE
62033: LD_INT 1
62035: DEC
62036: ST_TO_ADDR
62037: LD_VAR 0 2
62041: PUSH
62042: FOR_TO
62043: IFFALSE 62155
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62045: LD_VAR 0 1
62049: PPUSH
62050: LD_VAR 0 2
62054: PUSH
62055: LD_VAR 0 4
62059: ARRAY
62060: PUSH
62061: LD_INT 1
62063: ARRAY
62064: PPUSH
62065: LD_VAR 0 2
62069: PUSH
62070: LD_VAR 0 4
62074: ARRAY
62075: PUSH
62076: LD_INT 2
62078: ARRAY
62079: PPUSH
62080: CALL_OW 297
62084: PUSH
62085: LD_VAR 0 5
62089: LESS
62090: IFFALSE 62153
// begin hex := hexes [ i ] ;
62092: LD_ADDR_VAR 0 7
62096: PUSH
62097: LD_VAR 0 2
62101: PUSH
62102: LD_VAR 0 4
62106: ARRAY
62107: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62108: LD_ADDR_VAR 0 5
62112: PUSH
62113: LD_VAR 0 1
62117: PPUSH
62118: LD_VAR 0 2
62122: PUSH
62123: LD_VAR 0 4
62127: ARRAY
62128: PUSH
62129: LD_INT 1
62131: ARRAY
62132: PPUSH
62133: LD_VAR 0 2
62137: PUSH
62138: LD_VAR 0 4
62142: ARRAY
62143: PUSH
62144: LD_INT 2
62146: ARRAY
62147: PPUSH
62148: CALL_OW 297
62152: ST_TO_ADDR
// end ; end ;
62153: GO 62042
62155: POP
62156: POP
// result := hex ;
62157: LD_ADDR_VAR 0 3
62161: PUSH
62162: LD_VAR 0 7
62166: ST_TO_ADDR
// end ;
62167: LD_VAR 0 3
62171: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62172: LD_INT 0
62174: PPUSH
62175: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62176: LD_VAR 0 1
62180: NOT
62181: PUSH
62182: LD_VAR 0 1
62186: PUSH
62187: LD_INT 21
62189: PUSH
62190: LD_INT 2
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 23
62199: PUSH
62200: LD_INT 2
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PPUSH
62211: CALL_OW 69
62215: IN
62216: NOT
62217: OR
62218: IFFALSE 62222
// exit ;
62220: GO 62269
// for i = 1 to 3 do
62222: LD_ADDR_VAR 0 3
62226: PUSH
62227: DOUBLE
62228: LD_INT 1
62230: DEC
62231: ST_TO_ADDR
62232: LD_INT 3
62234: PUSH
62235: FOR_TO
62236: IFFALSE 62267
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62238: LD_VAR 0 1
62242: PPUSH
62243: CALL_OW 250
62247: PPUSH
62248: LD_VAR 0 1
62252: PPUSH
62253: CALL_OW 251
62257: PPUSH
62258: LD_INT 1
62260: PPUSH
62261: CALL_OW 453
62265: GO 62235
62267: POP
62268: POP
// end ;
62269: LD_VAR 0 2
62273: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62274: LD_INT 0
62276: PPUSH
62277: PPUSH
62278: PPUSH
62279: PPUSH
62280: PPUSH
62281: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62282: LD_VAR 0 1
62286: NOT
62287: PUSH
62288: LD_VAR 0 2
62292: NOT
62293: OR
62294: PUSH
62295: LD_VAR 0 1
62299: PPUSH
62300: CALL_OW 314
62304: OR
62305: IFFALSE 62309
// exit ;
62307: GO 62750
// x := GetX ( enemy_unit ) ;
62309: LD_ADDR_VAR 0 7
62313: PUSH
62314: LD_VAR 0 2
62318: PPUSH
62319: CALL_OW 250
62323: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62324: LD_ADDR_VAR 0 8
62328: PUSH
62329: LD_VAR 0 2
62333: PPUSH
62334: CALL_OW 251
62338: ST_TO_ADDR
// if not x or not y then
62339: LD_VAR 0 7
62343: NOT
62344: PUSH
62345: LD_VAR 0 8
62349: NOT
62350: OR
62351: IFFALSE 62355
// exit ;
62353: GO 62750
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62355: LD_ADDR_VAR 0 6
62359: PUSH
62360: LD_VAR 0 7
62364: PPUSH
62365: LD_INT 0
62367: PPUSH
62368: LD_INT 4
62370: PPUSH
62371: CALL_OW 272
62375: PUSH
62376: LD_VAR 0 8
62380: PPUSH
62381: LD_INT 0
62383: PPUSH
62384: LD_INT 4
62386: PPUSH
62387: CALL_OW 273
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_VAR 0 7
62400: PPUSH
62401: LD_INT 1
62403: PPUSH
62404: LD_INT 4
62406: PPUSH
62407: CALL_OW 272
62411: PUSH
62412: LD_VAR 0 8
62416: PPUSH
62417: LD_INT 1
62419: PPUSH
62420: LD_INT 4
62422: PPUSH
62423: CALL_OW 273
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_VAR 0 7
62436: PPUSH
62437: LD_INT 2
62439: PPUSH
62440: LD_INT 4
62442: PPUSH
62443: CALL_OW 272
62447: PUSH
62448: LD_VAR 0 8
62452: PPUSH
62453: LD_INT 2
62455: PPUSH
62456: LD_INT 4
62458: PPUSH
62459: CALL_OW 273
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_VAR 0 7
62472: PPUSH
62473: LD_INT 3
62475: PPUSH
62476: LD_INT 4
62478: PPUSH
62479: CALL_OW 272
62483: PUSH
62484: LD_VAR 0 8
62488: PPUSH
62489: LD_INT 3
62491: PPUSH
62492: LD_INT 4
62494: PPUSH
62495: CALL_OW 273
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_VAR 0 7
62508: PPUSH
62509: LD_INT 4
62511: PPUSH
62512: LD_INT 4
62514: PPUSH
62515: CALL_OW 272
62519: PUSH
62520: LD_VAR 0 8
62524: PPUSH
62525: LD_INT 4
62527: PPUSH
62528: LD_INT 4
62530: PPUSH
62531: CALL_OW 273
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_VAR 0 7
62544: PPUSH
62545: LD_INT 5
62547: PPUSH
62548: LD_INT 4
62550: PPUSH
62551: CALL_OW 272
62555: PUSH
62556: LD_VAR 0 8
62560: PPUSH
62561: LD_INT 5
62563: PPUSH
62564: LD_INT 4
62566: PPUSH
62567: CALL_OW 273
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: ST_TO_ADDR
// for i = tmp downto 1 do
62584: LD_ADDR_VAR 0 4
62588: PUSH
62589: DOUBLE
62590: LD_VAR 0 6
62594: INC
62595: ST_TO_ADDR
62596: LD_INT 1
62598: PUSH
62599: FOR_DOWNTO
62600: IFFALSE 62701
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62602: LD_VAR 0 6
62606: PUSH
62607: LD_VAR 0 4
62611: ARRAY
62612: PUSH
62613: LD_INT 1
62615: ARRAY
62616: PPUSH
62617: LD_VAR 0 6
62621: PUSH
62622: LD_VAR 0 4
62626: ARRAY
62627: PUSH
62628: LD_INT 2
62630: ARRAY
62631: PPUSH
62632: CALL_OW 488
62636: NOT
62637: PUSH
62638: LD_VAR 0 6
62642: PUSH
62643: LD_VAR 0 4
62647: ARRAY
62648: PUSH
62649: LD_INT 1
62651: ARRAY
62652: PPUSH
62653: LD_VAR 0 6
62657: PUSH
62658: LD_VAR 0 4
62662: ARRAY
62663: PUSH
62664: LD_INT 2
62666: ARRAY
62667: PPUSH
62668: CALL_OW 428
62672: PUSH
62673: LD_INT 0
62675: NONEQUAL
62676: OR
62677: IFFALSE 62699
// tmp := Delete ( tmp , i ) ;
62679: LD_ADDR_VAR 0 6
62683: PUSH
62684: LD_VAR 0 6
62688: PPUSH
62689: LD_VAR 0 4
62693: PPUSH
62694: CALL_OW 3
62698: ST_TO_ADDR
62699: GO 62599
62701: POP
62702: POP
// j := GetClosestHex ( unit , tmp ) ;
62703: LD_ADDR_VAR 0 5
62707: PUSH
62708: LD_VAR 0 1
62712: PPUSH
62713: LD_VAR 0 6
62717: PPUSH
62718: CALL 62003 0 2
62722: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62723: LD_VAR 0 1
62727: PPUSH
62728: LD_VAR 0 5
62732: PUSH
62733: LD_INT 1
62735: ARRAY
62736: PPUSH
62737: LD_VAR 0 5
62741: PUSH
62742: LD_INT 2
62744: ARRAY
62745: PPUSH
62746: CALL_OW 111
// end ;
62750: LD_VAR 0 3
62754: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62755: LD_INT 0
62757: PPUSH
62758: PPUSH
62759: PPUSH
// uc_side = 0 ;
62760: LD_ADDR_OWVAR 20
62764: PUSH
62765: LD_INT 0
62767: ST_TO_ADDR
// uc_nation = 0 ;
62768: LD_ADDR_OWVAR 21
62772: PUSH
62773: LD_INT 0
62775: ST_TO_ADDR
// InitHc_All ( ) ;
62776: CALL_OW 584
// InitVc ;
62780: CALL_OW 20
// if mastodonts then
62784: LD_VAR 0 6
62788: IFFALSE 62855
// for i = 1 to mastodonts do
62790: LD_ADDR_VAR 0 11
62794: PUSH
62795: DOUBLE
62796: LD_INT 1
62798: DEC
62799: ST_TO_ADDR
62800: LD_VAR 0 6
62804: PUSH
62805: FOR_TO
62806: IFFALSE 62853
// begin vc_chassis := 31 ;
62808: LD_ADDR_OWVAR 37
62812: PUSH
62813: LD_INT 31
62815: ST_TO_ADDR
// vc_control := control_rider ;
62816: LD_ADDR_OWVAR 38
62820: PUSH
62821: LD_INT 4
62823: ST_TO_ADDR
// animal := CreateVehicle ;
62824: LD_ADDR_VAR 0 12
62828: PUSH
62829: CALL_OW 45
62833: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62834: LD_VAR 0 12
62838: PPUSH
62839: LD_VAR 0 8
62843: PPUSH
62844: LD_INT 0
62846: PPUSH
62847: CALL 64990 0 3
// end ;
62851: GO 62805
62853: POP
62854: POP
// if horses then
62855: LD_VAR 0 5
62859: IFFALSE 62926
// for i = 1 to horses do
62861: LD_ADDR_VAR 0 11
62865: PUSH
62866: DOUBLE
62867: LD_INT 1
62869: DEC
62870: ST_TO_ADDR
62871: LD_VAR 0 5
62875: PUSH
62876: FOR_TO
62877: IFFALSE 62924
// begin hc_class := 21 ;
62879: LD_ADDR_OWVAR 28
62883: PUSH
62884: LD_INT 21
62886: ST_TO_ADDR
// hc_gallery :=  ;
62887: LD_ADDR_OWVAR 33
62891: PUSH
62892: LD_STRING 
62894: ST_TO_ADDR
// animal := CreateHuman ;
62895: LD_ADDR_VAR 0 12
62899: PUSH
62900: CALL_OW 44
62904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62905: LD_VAR 0 12
62909: PPUSH
62910: LD_VAR 0 8
62914: PPUSH
62915: LD_INT 0
62917: PPUSH
62918: CALL 64990 0 3
// end ;
62922: GO 62876
62924: POP
62925: POP
// if birds then
62926: LD_VAR 0 1
62930: IFFALSE 62997
// for i = 1 to birds do
62932: LD_ADDR_VAR 0 11
62936: PUSH
62937: DOUBLE
62938: LD_INT 1
62940: DEC
62941: ST_TO_ADDR
62942: LD_VAR 0 1
62946: PUSH
62947: FOR_TO
62948: IFFALSE 62995
// begin hc_class = 18 ;
62950: LD_ADDR_OWVAR 28
62954: PUSH
62955: LD_INT 18
62957: ST_TO_ADDR
// hc_gallery =  ;
62958: LD_ADDR_OWVAR 33
62962: PUSH
62963: LD_STRING 
62965: ST_TO_ADDR
// animal := CreateHuman ;
62966: LD_ADDR_VAR 0 12
62970: PUSH
62971: CALL_OW 44
62975: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62976: LD_VAR 0 12
62980: PPUSH
62981: LD_VAR 0 8
62985: PPUSH
62986: LD_INT 0
62988: PPUSH
62989: CALL 64990 0 3
// end ;
62993: GO 62947
62995: POP
62996: POP
// if tigers then
62997: LD_VAR 0 2
63001: IFFALSE 63085
// for i = 1 to tigers do
63003: LD_ADDR_VAR 0 11
63007: PUSH
63008: DOUBLE
63009: LD_INT 1
63011: DEC
63012: ST_TO_ADDR
63013: LD_VAR 0 2
63017: PUSH
63018: FOR_TO
63019: IFFALSE 63083
// begin hc_class = class_tiger ;
63021: LD_ADDR_OWVAR 28
63025: PUSH
63026: LD_INT 14
63028: ST_TO_ADDR
// hc_gallery =  ;
63029: LD_ADDR_OWVAR 33
63033: PUSH
63034: LD_STRING 
63036: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63037: LD_ADDR_OWVAR 35
63041: PUSH
63042: LD_INT 7
63044: NEG
63045: PPUSH
63046: LD_INT 7
63048: PPUSH
63049: CALL_OW 12
63053: ST_TO_ADDR
// animal := CreateHuman ;
63054: LD_ADDR_VAR 0 12
63058: PUSH
63059: CALL_OW 44
63063: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63064: LD_VAR 0 12
63068: PPUSH
63069: LD_VAR 0 8
63073: PPUSH
63074: LD_INT 0
63076: PPUSH
63077: CALL 64990 0 3
// end ;
63081: GO 63018
63083: POP
63084: POP
// if apemans then
63085: LD_VAR 0 3
63089: IFFALSE 63212
// for i = 1 to apemans do
63091: LD_ADDR_VAR 0 11
63095: PUSH
63096: DOUBLE
63097: LD_INT 1
63099: DEC
63100: ST_TO_ADDR
63101: LD_VAR 0 3
63105: PUSH
63106: FOR_TO
63107: IFFALSE 63210
// begin hc_class = class_apeman ;
63109: LD_ADDR_OWVAR 28
63113: PUSH
63114: LD_INT 12
63116: ST_TO_ADDR
// hc_gallery =  ;
63117: LD_ADDR_OWVAR 33
63121: PUSH
63122: LD_STRING 
63124: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63125: LD_ADDR_OWVAR 35
63129: PUSH
63130: LD_INT 2
63132: NEG
63133: PPUSH
63134: LD_INT 2
63136: PPUSH
63137: CALL_OW 12
63141: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63142: LD_ADDR_OWVAR 31
63146: PUSH
63147: LD_INT 1
63149: PPUSH
63150: LD_INT 3
63152: PPUSH
63153: CALL_OW 12
63157: PUSH
63158: LD_INT 1
63160: PPUSH
63161: LD_INT 3
63163: PPUSH
63164: CALL_OW 12
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: ST_TO_ADDR
// animal := CreateHuman ;
63181: LD_ADDR_VAR 0 12
63185: PUSH
63186: CALL_OW 44
63190: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63191: LD_VAR 0 12
63195: PPUSH
63196: LD_VAR 0 8
63200: PPUSH
63201: LD_INT 0
63203: PPUSH
63204: CALL 64990 0 3
// end ;
63208: GO 63106
63210: POP
63211: POP
// if enchidnas then
63212: LD_VAR 0 4
63216: IFFALSE 63283
// for i = 1 to enchidnas do
63218: LD_ADDR_VAR 0 11
63222: PUSH
63223: DOUBLE
63224: LD_INT 1
63226: DEC
63227: ST_TO_ADDR
63228: LD_VAR 0 4
63232: PUSH
63233: FOR_TO
63234: IFFALSE 63281
// begin hc_class = 13 ;
63236: LD_ADDR_OWVAR 28
63240: PUSH
63241: LD_INT 13
63243: ST_TO_ADDR
// hc_gallery =  ;
63244: LD_ADDR_OWVAR 33
63248: PUSH
63249: LD_STRING 
63251: ST_TO_ADDR
// animal := CreateHuman ;
63252: LD_ADDR_VAR 0 12
63256: PUSH
63257: CALL_OW 44
63261: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63262: LD_VAR 0 12
63266: PPUSH
63267: LD_VAR 0 8
63271: PPUSH
63272: LD_INT 0
63274: PPUSH
63275: CALL 64990 0 3
// end ;
63279: GO 63233
63281: POP
63282: POP
// if fishes then
63283: LD_VAR 0 7
63287: IFFALSE 63354
// for i = 1 to fishes do
63289: LD_ADDR_VAR 0 11
63293: PUSH
63294: DOUBLE
63295: LD_INT 1
63297: DEC
63298: ST_TO_ADDR
63299: LD_VAR 0 7
63303: PUSH
63304: FOR_TO
63305: IFFALSE 63352
// begin hc_class = 20 ;
63307: LD_ADDR_OWVAR 28
63311: PUSH
63312: LD_INT 20
63314: ST_TO_ADDR
// hc_gallery =  ;
63315: LD_ADDR_OWVAR 33
63319: PUSH
63320: LD_STRING 
63322: ST_TO_ADDR
// animal := CreateHuman ;
63323: LD_ADDR_VAR 0 12
63327: PUSH
63328: CALL_OW 44
63332: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63333: LD_VAR 0 12
63337: PPUSH
63338: LD_VAR 0 9
63342: PPUSH
63343: LD_INT 0
63345: PPUSH
63346: CALL 64990 0 3
// end ;
63350: GO 63304
63352: POP
63353: POP
// end ;
63354: LD_VAR 0 10
63358: RET
// export function WantHeal ( sci , unit ) ; begin
63359: LD_INT 0
63361: PPUSH
// if GetTaskList ( sci ) > 0 then
63362: LD_VAR 0 1
63366: PPUSH
63367: CALL_OW 437
63371: PUSH
63372: LD_INT 0
63374: GREATER
63375: IFFALSE 63445
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63377: LD_VAR 0 1
63381: PPUSH
63382: CALL_OW 437
63386: PUSH
63387: LD_INT 1
63389: ARRAY
63390: PUSH
63391: LD_INT 1
63393: ARRAY
63394: PUSH
63395: LD_STRING l
63397: EQUAL
63398: PUSH
63399: LD_VAR 0 1
63403: PPUSH
63404: CALL_OW 437
63408: PUSH
63409: LD_INT 1
63411: ARRAY
63412: PUSH
63413: LD_INT 4
63415: ARRAY
63416: PUSH
63417: LD_VAR 0 2
63421: EQUAL
63422: AND
63423: IFFALSE 63435
// result := true else
63425: LD_ADDR_VAR 0 3
63429: PUSH
63430: LD_INT 1
63432: ST_TO_ADDR
63433: GO 63443
// result := false ;
63435: LD_ADDR_VAR 0 3
63439: PUSH
63440: LD_INT 0
63442: ST_TO_ADDR
// end else
63443: GO 63453
// result := false ;
63445: LD_ADDR_VAR 0 3
63449: PUSH
63450: LD_INT 0
63452: ST_TO_ADDR
// end ;
63453: LD_VAR 0 3
63457: RET
// export function HealTarget ( sci ) ; begin
63458: LD_INT 0
63460: PPUSH
// if not sci then
63461: LD_VAR 0 1
63465: NOT
63466: IFFALSE 63470
// exit ;
63468: GO 63535
// result := 0 ;
63470: LD_ADDR_VAR 0 2
63474: PUSH
63475: LD_INT 0
63477: ST_TO_ADDR
// if GetTaskList ( sci ) then
63478: LD_VAR 0 1
63482: PPUSH
63483: CALL_OW 437
63487: IFFALSE 63535
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63489: LD_VAR 0 1
63493: PPUSH
63494: CALL_OW 437
63498: PUSH
63499: LD_INT 1
63501: ARRAY
63502: PUSH
63503: LD_INT 1
63505: ARRAY
63506: PUSH
63507: LD_STRING l
63509: EQUAL
63510: IFFALSE 63535
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63512: LD_ADDR_VAR 0 2
63516: PUSH
63517: LD_VAR 0 1
63521: PPUSH
63522: CALL_OW 437
63526: PUSH
63527: LD_INT 1
63529: ARRAY
63530: PUSH
63531: LD_INT 4
63533: ARRAY
63534: ST_TO_ADDR
// end ;
63535: LD_VAR 0 2
63539: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63540: LD_INT 0
63542: PPUSH
63543: PPUSH
63544: PPUSH
63545: PPUSH
// if not base_units then
63546: LD_VAR 0 1
63550: NOT
63551: IFFALSE 63555
// exit ;
63553: GO 63642
// result := false ;
63555: LD_ADDR_VAR 0 2
63559: PUSH
63560: LD_INT 0
63562: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63563: LD_ADDR_VAR 0 5
63567: PUSH
63568: LD_VAR 0 1
63572: PPUSH
63573: LD_INT 21
63575: PUSH
63576: LD_INT 3
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PPUSH
63583: CALL_OW 72
63587: ST_TO_ADDR
// if not tmp then
63588: LD_VAR 0 5
63592: NOT
63593: IFFALSE 63597
// exit ;
63595: GO 63642
// for i in tmp do
63597: LD_ADDR_VAR 0 3
63601: PUSH
63602: LD_VAR 0 5
63606: PUSH
63607: FOR_IN
63608: IFFALSE 63640
// begin result := EnemyInRange ( i , 22 ) ;
63610: LD_ADDR_VAR 0 2
63614: PUSH
63615: LD_VAR 0 3
63619: PPUSH
63620: LD_INT 22
63622: PPUSH
63623: CALL 61878 0 2
63627: ST_TO_ADDR
// if result then
63628: LD_VAR 0 2
63632: IFFALSE 63638
// exit ;
63634: POP
63635: POP
63636: GO 63642
// end ;
63638: GO 63607
63640: POP
63641: POP
// end ;
63642: LD_VAR 0 2
63646: RET
// export function FilterByTag ( units , tag ) ; begin
63647: LD_INT 0
63649: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63650: LD_ADDR_VAR 0 3
63654: PUSH
63655: LD_VAR 0 1
63659: PPUSH
63660: LD_INT 120
63662: PUSH
63663: LD_VAR 0 2
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PPUSH
63672: CALL_OW 72
63676: ST_TO_ADDR
// end ;
63677: LD_VAR 0 3
63681: RET
// export function IsDriver ( un ) ; begin
63682: LD_INT 0
63684: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63685: LD_ADDR_VAR 0 2
63689: PUSH
63690: LD_VAR 0 1
63694: PUSH
63695: LD_INT 55
63697: PUSH
63698: EMPTY
63699: LIST
63700: PPUSH
63701: CALL_OW 69
63705: IN
63706: ST_TO_ADDR
// end ;
63707: LD_VAR 0 2
63711: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63712: LD_INT 0
63714: PPUSH
63715: PPUSH
// list := [ ] ;
63716: LD_ADDR_VAR 0 5
63720: PUSH
63721: EMPTY
63722: ST_TO_ADDR
// case d of 0 :
63723: LD_VAR 0 3
63727: PUSH
63728: LD_INT 0
63730: DOUBLE
63731: EQUAL
63732: IFTRUE 63736
63734: GO 63869
63736: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63737: LD_ADDR_VAR 0 5
63741: PUSH
63742: LD_VAR 0 1
63746: PUSH
63747: LD_INT 4
63749: MINUS
63750: PUSH
63751: LD_VAR 0 2
63755: PUSH
63756: LD_INT 4
63758: MINUS
63759: PUSH
63760: LD_INT 2
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: PUSH
63768: LD_VAR 0 1
63772: PUSH
63773: LD_INT 3
63775: MINUS
63776: PUSH
63777: LD_VAR 0 2
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: LIST
63789: PUSH
63790: LD_VAR 0 1
63794: PUSH
63795: LD_INT 4
63797: PLUS
63798: PUSH
63799: LD_VAR 0 2
63803: PUSH
63804: LD_INT 4
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: LIST
63811: PUSH
63812: LD_VAR 0 1
63816: PUSH
63817: LD_INT 3
63819: PLUS
63820: PUSH
63821: LD_VAR 0 2
63825: PUSH
63826: LD_INT 3
63828: PLUS
63829: PUSH
63830: LD_INT 5
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: PUSH
63838: LD_VAR 0 1
63842: PUSH
63843: LD_VAR 0 2
63847: PUSH
63848: LD_INT 4
63850: PLUS
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: LIST
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: ST_TO_ADDR
// end ; 1 :
63867: GO 64567
63869: LD_INT 1
63871: DOUBLE
63872: EQUAL
63873: IFTRUE 63877
63875: GO 64010
63877: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63878: LD_ADDR_VAR 0 5
63882: PUSH
63883: LD_VAR 0 1
63887: PUSH
63888: LD_VAR 0 2
63892: PUSH
63893: LD_INT 4
63895: MINUS
63896: PUSH
63897: LD_INT 3
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: LIST
63904: PUSH
63905: LD_VAR 0 1
63909: PUSH
63910: LD_INT 3
63912: MINUS
63913: PUSH
63914: LD_VAR 0 2
63918: PUSH
63919: LD_INT 3
63921: MINUS
63922: PUSH
63923: LD_INT 2
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: LIST
63930: PUSH
63931: LD_VAR 0 1
63935: PUSH
63936: LD_INT 4
63938: MINUS
63939: PUSH
63940: LD_VAR 0 2
63944: PUSH
63945: LD_INT 1
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: LIST
63952: PUSH
63953: LD_VAR 0 1
63957: PUSH
63958: LD_VAR 0 2
63962: PUSH
63963: LD_INT 3
63965: PLUS
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: LIST
63974: PUSH
63975: LD_VAR 0 1
63979: PUSH
63980: LD_INT 4
63982: PLUS
63983: PUSH
63984: LD_VAR 0 2
63988: PUSH
63989: LD_INT 4
63991: PLUS
63992: PUSH
63993: LD_INT 5
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: LIST
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: ST_TO_ADDR
// end ; 2 :
64008: GO 64567
64010: LD_INT 2
64012: DOUBLE
64013: EQUAL
64014: IFTRUE 64018
64016: GO 64147
64018: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64019: LD_ADDR_VAR 0 5
64023: PUSH
64024: LD_VAR 0 1
64028: PUSH
64029: LD_VAR 0 2
64033: PUSH
64034: LD_INT 3
64036: MINUS
64037: PUSH
64038: LD_INT 3
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: LIST
64045: PUSH
64046: LD_VAR 0 1
64050: PUSH
64051: LD_INT 4
64053: PLUS
64054: PUSH
64055: LD_VAR 0 2
64059: PUSH
64060: LD_INT 4
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: LIST
64067: PUSH
64068: LD_VAR 0 1
64072: PUSH
64073: LD_VAR 0 2
64077: PUSH
64078: LD_INT 4
64080: PLUS
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: LIST
64089: PUSH
64090: LD_VAR 0 1
64094: PUSH
64095: LD_INT 3
64097: MINUS
64098: PUSH
64099: LD_VAR 0 2
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: LIST
64111: PUSH
64112: LD_VAR 0 1
64116: PUSH
64117: LD_INT 4
64119: MINUS
64120: PUSH
64121: LD_VAR 0 2
64125: PUSH
64126: LD_INT 4
64128: MINUS
64129: PUSH
64130: LD_INT 2
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: LIST
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: ST_TO_ADDR
// end ; 3 :
64145: GO 64567
64147: LD_INT 3
64149: DOUBLE
64150: EQUAL
64151: IFTRUE 64155
64153: GO 64288
64155: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64156: LD_ADDR_VAR 0 5
64160: PUSH
64161: LD_VAR 0 1
64165: PUSH
64166: LD_INT 3
64168: PLUS
64169: PUSH
64170: LD_VAR 0 2
64174: PUSH
64175: LD_INT 4
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: LIST
64182: PUSH
64183: LD_VAR 0 1
64187: PUSH
64188: LD_INT 4
64190: PLUS
64191: PUSH
64192: LD_VAR 0 2
64196: PUSH
64197: LD_INT 4
64199: PLUS
64200: PUSH
64201: LD_INT 5
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: LIST
64208: PUSH
64209: LD_VAR 0 1
64213: PUSH
64214: LD_INT 4
64216: MINUS
64217: PUSH
64218: LD_VAR 0 2
64222: PUSH
64223: LD_INT 1
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: LIST
64230: PUSH
64231: LD_VAR 0 1
64235: PUSH
64236: LD_VAR 0 2
64240: PUSH
64241: LD_INT 4
64243: MINUS
64244: PUSH
64245: LD_INT 3
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: LIST
64252: PUSH
64253: LD_VAR 0 1
64257: PUSH
64258: LD_INT 3
64260: MINUS
64261: PUSH
64262: LD_VAR 0 2
64266: PUSH
64267: LD_INT 3
64269: MINUS
64270: PUSH
64271: LD_INT 2
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: LIST
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: ST_TO_ADDR
// end ; 4 :
64286: GO 64567
64288: LD_INT 4
64290: DOUBLE
64291: EQUAL
64292: IFTRUE 64296
64294: GO 64429
64296: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64297: LD_ADDR_VAR 0 5
64301: PUSH
64302: LD_VAR 0 1
64306: PUSH
64307: LD_VAR 0 2
64311: PUSH
64312: LD_INT 4
64314: PLUS
64315: PUSH
64316: LD_INT 0
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: LIST
64323: PUSH
64324: LD_VAR 0 1
64328: PUSH
64329: LD_INT 3
64331: PLUS
64332: PUSH
64333: LD_VAR 0 2
64337: PUSH
64338: LD_INT 3
64340: PLUS
64341: PUSH
64342: LD_INT 5
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: LIST
64349: PUSH
64350: LD_VAR 0 1
64354: PUSH
64355: LD_INT 4
64357: PLUS
64358: PUSH
64359: LD_VAR 0 2
64363: PUSH
64364: LD_INT 4
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: LIST
64371: PUSH
64372: LD_VAR 0 1
64376: PUSH
64377: LD_VAR 0 2
64381: PUSH
64382: LD_INT 3
64384: MINUS
64385: PUSH
64386: LD_INT 3
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: LIST
64393: PUSH
64394: LD_VAR 0 1
64398: PUSH
64399: LD_INT 4
64401: MINUS
64402: PUSH
64403: LD_VAR 0 2
64407: PUSH
64408: LD_INT 4
64410: MINUS
64411: PUSH
64412: LD_INT 2
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: LIST
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: ST_TO_ADDR
// end ; 5 :
64427: GO 64567
64429: LD_INT 5
64431: DOUBLE
64432: EQUAL
64433: IFTRUE 64437
64435: GO 64566
64437: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64438: LD_ADDR_VAR 0 5
64442: PUSH
64443: LD_VAR 0 1
64447: PUSH
64448: LD_INT 4
64450: MINUS
64451: PUSH
64452: LD_VAR 0 2
64456: PUSH
64457: LD_INT 1
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: LIST
64464: PUSH
64465: LD_VAR 0 1
64469: PUSH
64470: LD_VAR 0 2
64474: PUSH
64475: LD_INT 4
64477: MINUS
64478: PUSH
64479: LD_INT 3
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: LIST
64486: PUSH
64487: LD_VAR 0 1
64491: PUSH
64492: LD_INT 4
64494: PLUS
64495: PUSH
64496: LD_VAR 0 2
64500: PUSH
64501: LD_INT 4
64503: PLUS
64504: PUSH
64505: LD_INT 5
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: LIST
64512: PUSH
64513: LD_VAR 0 1
64517: PUSH
64518: LD_INT 3
64520: PLUS
64521: PUSH
64522: LD_VAR 0 2
64526: PUSH
64527: LD_INT 4
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: LIST
64534: PUSH
64535: LD_VAR 0 1
64539: PUSH
64540: LD_VAR 0 2
64544: PUSH
64545: LD_INT 3
64547: PLUS
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: LIST
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: ST_TO_ADDR
// end ; end ;
64564: GO 64567
64566: POP
// result := list ;
64567: LD_ADDR_VAR 0 4
64571: PUSH
64572: LD_VAR 0 5
64576: ST_TO_ADDR
// end ;
64577: LD_VAR 0 4
64581: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64582: LD_INT 0
64584: PPUSH
64585: PPUSH
64586: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64587: LD_VAR 0 1
64591: NOT
64592: PUSH
64593: LD_VAR 0 2
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: LD_INT 2
64603: PUSH
64604: LD_INT 3
64606: PUSH
64607: LD_INT 4
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: IN
64616: NOT
64617: OR
64618: IFFALSE 64622
// exit ;
64620: GO 64714
// tmp := [ ] ;
64622: LD_ADDR_VAR 0 5
64626: PUSH
64627: EMPTY
64628: ST_TO_ADDR
// for i in units do
64629: LD_ADDR_VAR 0 4
64633: PUSH
64634: LD_VAR 0 1
64638: PUSH
64639: FOR_IN
64640: IFFALSE 64683
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64642: LD_ADDR_VAR 0 5
64646: PUSH
64647: LD_VAR 0 5
64651: PPUSH
64652: LD_VAR 0 5
64656: PUSH
64657: LD_INT 1
64659: PLUS
64660: PPUSH
64661: LD_VAR 0 4
64665: PPUSH
64666: LD_VAR 0 2
64670: PPUSH
64671: CALL_OW 259
64675: PPUSH
64676: CALL_OW 2
64680: ST_TO_ADDR
64681: GO 64639
64683: POP
64684: POP
// if not tmp then
64685: LD_VAR 0 5
64689: NOT
64690: IFFALSE 64694
// exit ;
64692: GO 64714
// result := SortListByListDesc ( units , tmp ) ;
64694: LD_ADDR_VAR 0 3
64698: PUSH
64699: LD_VAR 0 1
64703: PPUSH
64704: LD_VAR 0 5
64708: PPUSH
64709: CALL_OW 77
64713: ST_TO_ADDR
// end ;
64714: LD_VAR 0 3
64718: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64719: LD_INT 0
64721: PPUSH
64722: PPUSH
64723: PPUSH
// result := false ;
64724: LD_ADDR_VAR 0 3
64728: PUSH
64729: LD_INT 0
64731: ST_TO_ADDR
// x := GetX ( building ) ;
64732: LD_ADDR_VAR 0 4
64736: PUSH
64737: LD_VAR 0 2
64741: PPUSH
64742: CALL_OW 250
64746: ST_TO_ADDR
// y := GetY ( building ) ;
64747: LD_ADDR_VAR 0 5
64751: PUSH
64752: LD_VAR 0 2
64756: PPUSH
64757: CALL_OW 251
64761: ST_TO_ADDR
// if not building or not x or not y then
64762: LD_VAR 0 2
64766: NOT
64767: PUSH
64768: LD_VAR 0 4
64772: NOT
64773: OR
64774: PUSH
64775: LD_VAR 0 5
64779: NOT
64780: OR
64781: IFFALSE 64785
// exit ;
64783: GO 64877
// if GetTaskList ( unit ) then
64785: LD_VAR 0 1
64789: PPUSH
64790: CALL_OW 437
64794: IFFALSE 64877
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64796: LD_STRING e
64798: PUSH
64799: LD_VAR 0 1
64803: PPUSH
64804: CALL_OW 437
64808: PUSH
64809: LD_INT 1
64811: ARRAY
64812: PUSH
64813: LD_INT 1
64815: ARRAY
64816: EQUAL
64817: PUSH
64818: LD_VAR 0 4
64822: PUSH
64823: LD_VAR 0 1
64827: PPUSH
64828: CALL_OW 437
64832: PUSH
64833: LD_INT 1
64835: ARRAY
64836: PUSH
64837: LD_INT 2
64839: ARRAY
64840: EQUAL
64841: AND
64842: PUSH
64843: LD_VAR 0 5
64847: PUSH
64848: LD_VAR 0 1
64852: PPUSH
64853: CALL_OW 437
64857: PUSH
64858: LD_INT 1
64860: ARRAY
64861: PUSH
64862: LD_INT 3
64864: ARRAY
64865: EQUAL
64866: AND
64867: IFFALSE 64877
// result := true end ;
64869: LD_ADDR_VAR 0 3
64873: PUSH
64874: LD_INT 1
64876: ST_TO_ADDR
// end ;
64877: LD_VAR 0 3
64881: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64882: LD_INT 0
64884: PPUSH
// result := false ;
64885: LD_ADDR_VAR 0 4
64889: PUSH
64890: LD_INT 0
64892: ST_TO_ADDR
// if GetTaskList ( unit ) then
64893: LD_VAR 0 1
64897: PPUSH
64898: CALL_OW 437
64902: IFFALSE 64985
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64904: LD_STRING M
64906: PUSH
64907: LD_VAR 0 1
64911: PPUSH
64912: CALL_OW 437
64916: PUSH
64917: LD_INT 1
64919: ARRAY
64920: PUSH
64921: LD_INT 1
64923: ARRAY
64924: EQUAL
64925: PUSH
64926: LD_VAR 0 2
64930: PUSH
64931: LD_VAR 0 1
64935: PPUSH
64936: CALL_OW 437
64940: PUSH
64941: LD_INT 1
64943: ARRAY
64944: PUSH
64945: LD_INT 2
64947: ARRAY
64948: EQUAL
64949: AND
64950: PUSH
64951: LD_VAR 0 3
64955: PUSH
64956: LD_VAR 0 1
64960: PPUSH
64961: CALL_OW 437
64965: PUSH
64966: LD_INT 1
64968: ARRAY
64969: PUSH
64970: LD_INT 3
64972: ARRAY
64973: EQUAL
64974: AND
64975: IFFALSE 64985
// result := true ;
64977: LD_ADDR_VAR 0 4
64981: PUSH
64982: LD_INT 1
64984: ST_TO_ADDR
// end ; end ;
64985: LD_VAR 0 4
64989: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64990: LD_INT 0
64992: PPUSH
64993: PPUSH
64994: PPUSH
64995: PPUSH
// if not unit or not area then
64996: LD_VAR 0 1
65000: NOT
65001: PUSH
65002: LD_VAR 0 2
65006: NOT
65007: OR
65008: IFFALSE 65012
// exit ;
65010: GO 65176
// tmp := AreaToList ( area , i ) ;
65012: LD_ADDR_VAR 0 6
65016: PUSH
65017: LD_VAR 0 2
65021: PPUSH
65022: LD_VAR 0 5
65026: PPUSH
65027: CALL_OW 517
65031: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65032: LD_ADDR_VAR 0 5
65036: PUSH
65037: DOUBLE
65038: LD_INT 1
65040: DEC
65041: ST_TO_ADDR
65042: LD_VAR 0 6
65046: PUSH
65047: LD_INT 1
65049: ARRAY
65050: PUSH
65051: FOR_TO
65052: IFFALSE 65174
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65054: LD_ADDR_VAR 0 7
65058: PUSH
65059: LD_VAR 0 6
65063: PUSH
65064: LD_INT 1
65066: ARRAY
65067: PUSH
65068: LD_VAR 0 5
65072: ARRAY
65073: PUSH
65074: LD_VAR 0 6
65078: PUSH
65079: LD_INT 2
65081: ARRAY
65082: PUSH
65083: LD_VAR 0 5
65087: ARRAY
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65093: LD_VAR 0 7
65097: PUSH
65098: LD_INT 1
65100: ARRAY
65101: PPUSH
65102: LD_VAR 0 7
65106: PUSH
65107: LD_INT 2
65109: ARRAY
65110: PPUSH
65111: CALL_OW 428
65115: PUSH
65116: LD_INT 0
65118: EQUAL
65119: IFFALSE 65172
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65121: LD_VAR 0 1
65125: PPUSH
65126: LD_VAR 0 7
65130: PUSH
65131: LD_INT 1
65133: ARRAY
65134: PPUSH
65135: LD_VAR 0 7
65139: PUSH
65140: LD_INT 2
65142: ARRAY
65143: PPUSH
65144: LD_VAR 0 3
65148: PPUSH
65149: CALL_OW 48
// result := IsPlaced ( unit ) ;
65153: LD_ADDR_VAR 0 4
65157: PUSH
65158: LD_VAR 0 1
65162: PPUSH
65163: CALL_OW 305
65167: ST_TO_ADDR
// exit ;
65168: POP
65169: POP
65170: GO 65176
// end ; end ;
65172: GO 65051
65174: POP
65175: POP
// end ;
65176: LD_VAR 0 4
65180: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65181: LD_INT 0
65183: PPUSH
65184: PPUSH
65185: PPUSH
// if not side or side > 8 then
65186: LD_VAR 0 1
65190: NOT
65191: PUSH
65192: LD_VAR 0 1
65196: PUSH
65197: LD_INT 8
65199: GREATER
65200: OR
65201: IFFALSE 65205
// exit ;
65203: GO 65392
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65205: LD_ADDR_VAR 0 4
65209: PUSH
65210: LD_INT 22
65212: PUSH
65213: LD_VAR 0 1
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 21
65224: PUSH
65225: LD_INT 3
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PPUSH
65236: CALL_OW 69
65240: ST_TO_ADDR
// if not tmp then
65241: LD_VAR 0 4
65245: NOT
65246: IFFALSE 65250
// exit ;
65248: GO 65392
// enable_addtolog := true ;
65250: LD_ADDR_OWVAR 81
65254: PUSH
65255: LD_INT 1
65257: ST_TO_ADDR
// AddToLog ( [ ) ;
65258: LD_STRING [
65260: PPUSH
65261: CALL_OW 561
// for i in tmp do
65265: LD_ADDR_VAR 0 3
65269: PUSH
65270: LD_VAR 0 4
65274: PUSH
65275: FOR_IN
65276: IFFALSE 65383
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65278: LD_STRING [
65280: PUSH
65281: LD_VAR 0 3
65285: PPUSH
65286: CALL_OW 266
65290: STR
65291: PUSH
65292: LD_STRING , 
65294: STR
65295: PUSH
65296: LD_VAR 0 3
65300: PPUSH
65301: CALL_OW 250
65305: STR
65306: PUSH
65307: LD_STRING , 
65309: STR
65310: PUSH
65311: LD_VAR 0 3
65315: PPUSH
65316: CALL_OW 251
65320: STR
65321: PUSH
65322: LD_STRING , 
65324: STR
65325: PUSH
65326: LD_VAR 0 3
65330: PPUSH
65331: CALL_OW 254
65335: STR
65336: PUSH
65337: LD_STRING , 
65339: STR
65340: PUSH
65341: LD_VAR 0 3
65345: PPUSH
65346: LD_INT 1
65348: PPUSH
65349: CALL_OW 268
65353: STR
65354: PUSH
65355: LD_STRING , 
65357: STR
65358: PUSH
65359: LD_VAR 0 3
65363: PPUSH
65364: LD_INT 2
65366: PPUSH
65367: CALL_OW 268
65371: STR
65372: PUSH
65373: LD_STRING ],
65375: STR
65376: PPUSH
65377: CALL_OW 561
// end ;
65381: GO 65275
65383: POP
65384: POP
// AddToLog ( ]; ) ;
65385: LD_STRING ];
65387: PPUSH
65388: CALL_OW 561
// end ;
65392: LD_VAR 0 2
65396: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65397: LD_INT 0
65399: PPUSH
65400: PPUSH
65401: PPUSH
65402: PPUSH
65403: PPUSH
// if not area or not rate or not max then
65404: LD_VAR 0 1
65408: NOT
65409: PUSH
65410: LD_VAR 0 2
65414: NOT
65415: OR
65416: PUSH
65417: LD_VAR 0 4
65421: NOT
65422: OR
65423: IFFALSE 65427
// exit ;
65425: GO 65616
// while 1 do
65427: LD_INT 1
65429: IFFALSE 65616
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65431: LD_ADDR_VAR 0 9
65435: PUSH
65436: LD_VAR 0 1
65440: PPUSH
65441: LD_INT 1
65443: PPUSH
65444: CALL_OW 287
65448: PUSH
65449: LD_INT 10
65451: MUL
65452: ST_TO_ADDR
// r := rate / 10 ;
65453: LD_ADDR_VAR 0 7
65457: PUSH
65458: LD_VAR 0 2
65462: PUSH
65463: LD_INT 10
65465: DIVREAL
65466: ST_TO_ADDR
// time := 1 1$00 ;
65467: LD_ADDR_VAR 0 8
65471: PUSH
65472: LD_INT 2100
65474: ST_TO_ADDR
// if amount < min then
65475: LD_VAR 0 9
65479: PUSH
65480: LD_VAR 0 3
65484: LESS
65485: IFFALSE 65503
// r := r * 2 else
65487: LD_ADDR_VAR 0 7
65491: PUSH
65492: LD_VAR 0 7
65496: PUSH
65497: LD_INT 2
65499: MUL
65500: ST_TO_ADDR
65501: GO 65529
// if amount > max then
65503: LD_VAR 0 9
65507: PUSH
65508: LD_VAR 0 4
65512: GREATER
65513: IFFALSE 65529
// r := r / 2 ;
65515: LD_ADDR_VAR 0 7
65519: PUSH
65520: LD_VAR 0 7
65524: PUSH
65525: LD_INT 2
65527: DIVREAL
65528: ST_TO_ADDR
// time := time / r ;
65529: LD_ADDR_VAR 0 8
65533: PUSH
65534: LD_VAR 0 8
65538: PUSH
65539: LD_VAR 0 7
65543: DIVREAL
65544: ST_TO_ADDR
// if time < 0 then
65545: LD_VAR 0 8
65549: PUSH
65550: LD_INT 0
65552: LESS
65553: IFFALSE 65570
// time := time * - 1 ;
65555: LD_ADDR_VAR 0 8
65559: PUSH
65560: LD_VAR 0 8
65564: PUSH
65565: LD_INT 1
65567: NEG
65568: MUL
65569: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65570: LD_VAR 0 8
65574: PUSH
65575: LD_INT 35
65577: PPUSH
65578: LD_INT 875
65580: PPUSH
65581: CALL_OW 12
65585: PLUS
65586: PPUSH
65587: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65591: LD_INT 1
65593: PPUSH
65594: LD_INT 5
65596: PPUSH
65597: CALL_OW 12
65601: PPUSH
65602: LD_VAR 0 1
65606: PPUSH
65607: LD_INT 1
65609: PPUSH
65610: CALL_OW 55
// end ;
65614: GO 65427
// end ;
65616: LD_VAR 0 5
65620: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65621: LD_INT 0
65623: PPUSH
65624: PPUSH
65625: PPUSH
65626: PPUSH
65627: PPUSH
65628: PPUSH
65629: PPUSH
65630: PPUSH
// if not turrets or not factories then
65631: LD_VAR 0 1
65635: NOT
65636: PUSH
65637: LD_VAR 0 2
65641: NOT
65642: OR
65643: IFFALSE 65647
// exit ;
65645: GO 65954
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65647: LD_ADDR_VAR 0 10
65651: PUSH
65652: LD_INT 5
65654: PUSH
65655: LD_INT 6
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 2
65664: PUSH
65665: LD_INT 4
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 3
65674: PUSH
65675: LD_INT 5
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 24
65689: PUSH
65690: LD_INT 25
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 23
65699: PUSH
65700: LD_INT 27
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 42
65713: PUSH
65714: LD_INT 43
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 44
65723: PUSH
65724: LD_INT 46
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 45
65733: PUSH
65734: LD_INT 47
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: LIST
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: LIST
65750: ST_TO_ADDR
// result := [ ] ;
65751: LD_ADDR_VAR 0 3
65755: PUSH
65756: EMPTY
65757: ST_TO_ADDR
// for i in turrets do
65758: LD_ADDR_VAR 0 4
65762: PUSH
65763: LD_VAR 0 1
65767: PUSH
65768: FOR_IN
65769: IFFALSE 65952
// begin nat := GetNation ( i ) ;
65771: LD_ADDR_VAR 0 7
65775: PUSH
65776: LD_VAR 0 4
65780: PPUSH
65781: CALL_OW 248
65785: ST_TO_ADDR
// weapon := 0 ;
65786: LD_ADDR_VAR 0 8
65790: PUSH
65791: LD_INT 0
65793: ST_TO_ADDR
// if not nat then
65794: LD_VAR 0 7
65798: NOT
65799: IFFALSE 65803
// continue ;
65801: GO 65768
// for j in list [ nat ] do
65803: LD_ADDR_VAR 0 5
65807: PUSH
65808: LD_VAR 0 10
65812: PUSH
65813: LD_VAR 0 7
65817: ARRAY
65818: PUSH
65819: FOR_IN
65820: IFFALSE 65861
// if GetBWeapon ( i ) = j [ 1 ] then
65822: LD_VAR 0 4
65826: PPUSH
65827: CALL_OW 269
65831: PUSH
65832: LD_VAR 0 5
65836: PUSH
65837: LD_INT 1
65839: ARRAY
65840: EQUAL
65841: IFFALSE 65859
// begin weapon := j [ 2 ] ;
65843: LD_ADDR_VAR 0 8
65847: PUSH
65848: LD_VAR 0 5
65852: PUSH
65853: LD_INT 2
65855: ARRAY
65856: ST_TO_ADDR
// break ;
65857: GO 65861
// end ;
65859: GO 65819
65861: POP
65862: POP
// if not weapon then
65863: LD_VAR 0 8
65867: NOT
65868: IFFALSE 65872
// continue ;
65870: GO 65768
// for k in factories do
65872: LD_ADDR_VAR 0 6
65876: PUSH
65877: LD_VAR 0 2
65881: PUSH
65882: FOR_IN
65883: IFFALSE 65948
// begin weapons := AvailableWeaponList ( k ) ;
65885: LD_ADDR_VAR 0 9
65889: PUSH
65890: LD_VAR 0 6
65894: PPUSH
65895: CALL_OW 478
65899: ST_TO_ADDR
// if not weapons then
65900: LD_VAR 0 9
65904: NOT
65905: IFFALSE 65909
// continue ;
65907: GO 65882
// if weapon in weapons then
65909: LD_VAR 0 8
65913: PUSH
65914: LD_VAR 0 9
65918: IN
65919: IFFALSE 65946
// begin result := [ i , weapon ] ;
65921: LD_ADDR_VAR 0 3
65925: PUSH
65926: LD_VAR 0 4
65930: PUSH
65931: LD_VAR 0 8
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: ST_TO_ADDR
// exit ;
65940: POP
65941: POP
65942: POP
65943: POP
65944: GO 65954
// end ; end ;
65946: GO 65882
65948: POP
65949: POP
// end ;
65950: GO 65768
65952: POP
65953: POP
// end ;
65954: LD_VAR 0 3
65958: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65959: LD_INT 0
65961: PPUSH
// if not side or side > 8 then
65962: LD_VAR 0 3
65966: NOT
65967: PUSH
65968: LD_VAR 0 3
65972: PUSH
65973: LD_INT 8
65975: GREATER
65976: OR
65977: IFFALSE 65981
// exit ;
65979: GO 66040
// if not range then
65981: LD_VAR 0 4
65985: NOT
65986: IFFALSE 65997
// range := - 12 ;
65988: LD_ADDR_VAR 0 4
65992: PUSH
65993: LD_INT 12
65995: NEG
65996: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65997: LD_VAR 0 1
66001: PPUSH
66002: LD_VAR 0 2
66006: PPUSH
66007: LD_VAR 0 3
66011: PPUSH
66012: LD_VAR 0 4
66016: PPUSH
66017: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66021: LD_VAR 0 1
66025: PPUSH
66026: LD_VAR 0 2
66030: PPUSH
66031: LD_VAR 0 3
66035: PPUSH
66036: CALL_OW 331
// end ;
66040: LD_VAR 0 5
66044: RET
// export function Video ( mode ) ; begin
66045: LD_INT 0
66047: PPUSH
// ingame_video = mode ;
66048: LD_ADDR_OWVAR 52
66052: PUSH
66053: LD_VAR 0 1
66057: ST_TO_ADDR
// interface_hidden = mode ;
66058: LD_ADDR_OWVAR 54
66062: PUSH
66063: LD_VAR 0 1
66067: ST_TO_ADDR
// end ;
66068: LD_VAR 0 2
66072: RET
// export function Join ( array , element ) ; begin
66073: LD_INT 0
66075: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66076: LD_ADDR_VAR 0 3
66080: PUSH
66081: LD_VAR 0 1
66085: PPUSH
66086: LD_VAR 0 1
66090: PUSH
66091: LD_INT 1
66093: PLUS
66094: PPUSH
66095: LD_VAR 0 2
66099: PPUSH
66100: CALL_OW 1
66104: ST_TO_ADDR
// end ;
66105: LD_VAR 0 3
66109: RET
// export function JoinUnion ( array , element ) ; begin
66110: LD_INT 0
66112: PPUSH
// result := array union element ;
66113: LD_ADDR_VAR 0 3
66117: PUSH
66118: LD_VAR 0 1
66122: PUSH
66123: LD_VAR 0 2
66127: UNION
66128: ST_TO_ADDR
// end ;
66129: LD_VAR 0 3
66133: RET
// export function GetBehemoths ( side ) ; begin
66134: LD_INT 0
66136: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66137: LD_ADDR_VAR 0 2
66141: PUSH
66142: LD_INT 22
66144: PUSH
66145: LD_VAR 0 1
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 31
66156: PUSH
66157: LD_INT 25
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PPUSH
66168: CALL_OW 69
66172: ST_TO_ADDR
// end ;
66173: LD_VAR 0 2
66177: RET
// export function Shuffle ( array ) ; var i , index ; begin
66178: LD_INT 0
66180: PPUSH
66181: PPUSH
66182: PPUSH
// result := [ ] ;
66183: LD_ADDR_VAR 0 2
66187: PUSH
66188: EMPTY
66189: ST_TO_ADDR
// if not array then
66190: LD_VAR 0 1
66194: NOT
66195: IFFALSE 66199
// exit ;
66197: GO 66298
// Randomize ;
66199: CALL_OW 10
// for i = array downto 1 do
66203: LD_ADDR_VAR 0 3
66207: PUSH
66208: DOUBLE
66209: LD_VAR 0 1
66213: INC
66214: ST_TO_ADDR
66215: LD_INT 1
66217: PUSH
66218: FOR_DOWNTO
66219: IFFALSE 66296
// begin index := rand ( 1 , array ) ;
66221: LD_ADDR_VAR 0 4
66225: PUSH
66226: LD_INT 1
66228: PPUSH
66229: LD_VAR 0 1
66233: PPUSH
66234: CALL_OW 12
66238: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66239: LD_ADDR_VAR 0 2
66243: PUSH
66244: LD_VAR 0 2
66248: PPUSH
66249: LD_VAR 0 2
66253: PUSH
66254: LD_INT 1
66256: PLUS
66257: PPUSH
66258: LD_VAR 0 1
66262: PUSH
66263: LD_VAR 0 4
66267: ARRAY
66268: PPUSH
66269: CALL_OW 2
66273: ST_TO_ADDR
// array := Delete ( array , index ) ;
66274: LD_ADDR_VAR 0 1
66278: PUSH
66279: LD_VAR 0 1
66283: PPUSH
66284: LD_VAR 0 4
66288: PPUSH
66289: CALL_OW 3
66293: ST_TO_ADDR
// end ;
66294: GO 66218
66296: POP
66297: POP
// end ;
66298: LD_VAR 0 2
66302: RET
// export function GetBaseMaterials ( base ) ; begin
66303: LD_INT 0
66305: PPUSH
// result := [ 0 , 0 , 0 ] ;
66306: LD_ADDR_VAR 0 2
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: ST_TO_ADDR
// if not base then
66325: LD_VAR 0 1
66329: NOT
66330: IFFALSE 66334
// exit ;
66332: GO 66383
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66334: LD_ADDR_VAR 0 2
66338: PUSH
66339: LD_VAR 0 1
66343: PPUSH
66344: LD_INT 1
66346: PPUSH
66347: CALL_OW 275
66351: PUSH
66352: LD_VAR 0 1
66356: PPUSH
66357: LD_INT 2
66359: PPUSH
66360: CALL_OW 275
66364: PUSH
66365: LD_VAR 0 1
66369: PPUSH
66370: LD_INT 3
66372: PPUSH
66373: CALL_OW 275
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: LIST
66382: ST_TO_ADDR
// end ;
66383: LD_VAR 0 2
66387: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66388: LD_INT 0
66390: PPUSH
66391: PPUSH
// result := array ;
66392: LD_ADDR_VAR 0 3
66396: PUSH
66397: LD_VAR 0 1
66401: ST_TO_ADDR
// if size > 0 then
66402: LD_VAR 0 2
66406: PUSH
66407: LD_INT 0
66409: GREATER
66410: IFFALSE 66456
// for i := array downto size do
66412: LD_ADDR_VAR 0 4
66416: PUSH
66417: DOUBLE
66418: LD_VAR 0 1
66422: INC
66423: ST_TO_ADDR
66424: LD_VAR 0 2
66428: PUSH
66429: FOR_DOWNTO
66430: IFFALSE 66454
// result := Delete ( result , result ) ;
66432: LD_ADDR_VAR 0 3
66436: PUSH
66437: LD_VAR 0 3
66441: PPUSH
66442: LD_VAR 0 3
66446: PPUSH
66447: CALL_OW 3
66451: ST_TO_ADDR
66452: GO 66429
66454: POP
66455: POP
// end ;
66456: LD_VAR 0 3
66460: RET
// export function ComExit ( unit ) ; var tmp ; begin
66461: LD_INT 0
66463: PPUSH
66464: PPUSH
// if not IsInUnit ( unit ) then
66465: LD_VAR 0 1
66469: PPUSH
66470: CALL_OW 310
66474: NOT
66475: IFFALSE 66479
// exit ;
66477: GO 66539
// tmp := IsInUnit ( unit ) ;
66479: LD_ADDR_VAR 0 3
66483: PUSH
66484: LD_VAR 0 1
66488: PPUSH
66489: CALL_OW 310
66493: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66494: LD_VAR 0 3
66498: PPUSH
66499: CALL_OW 247
66503: PUSH
66504: LD_INT 2
66506: EQUAL
66507: IFFALSE 66520
// ComExitVehicle ( unit ) else
66509: LD_VAR 0 1
66513: PPUSH
66514: CALL_OW 121
66518: GO 66529
// ComExitBuilding ( unit ) ;
66520: LD_VAR 0 1
66524: PPUSH
66525: CALL_OW 122
// result := tmp ;
66529: LD_ADDR_VAR 0 2
66533: PUSH
66534: LD_VAR 0 3
66538: ST_TO_ADDR
// end ;
66539: LD_VAR 0 2
66543: RET
// export function ComExitAll ( units ) ; var i ; begin
66544: LD_INT 0
66546: PPUSH
66547: PPUSH
// if not units then
66548: LD_VAR 0 1
66552: NOT
66553: IFFALSE 66557
// exit ;
66555: GO 66583
// for i in units do
66557: LD_ADDR_VAR 0 3
66561: PUSH
66562: LD_VAR 0 1
66566: PUSH
66567: FOR_IN
66568: IFFALSE 66581
// ComExit ( i ) ;
66570: LD_VAR 0 3
66574: PPUSH
66575: CALL 66461 0 1
66579: GO 66567
66581: POP
66582: POP
// end ;
66583: LD_VAR 0 2
66587: RET
// export function ResetHc ; begin
66588: LD_INT 0
66590: PPUSH
// InitHc ;
66591: CALL_OW 19
// hc_importance := 0 ;
66595: LD_ADDR_OWVAR 32
66599: PUSH
66600: LD_INT 0
66602: ST_TO_ADDR
// end ;
66603: LD_VAR 0 1
66607: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66608: LD_INT 0
66610: PPUSH
66611: PPUSH
66612: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66613: LD_ADDR_VAR 0 6
66617: PUSH
66618: LD_VAR 0 1
66622: PUSH
66623: LD_VAR 0 3
66627: PLUS
66628: PUSH
66629: LD_INT 2
66631: DIV
66632: ST_TO_ADDR
// if _x < 0 then
66633: LD_VAR 0 6
66637: PUSH
66638: LD_INT 0
66640: LESS
66641: IFFALSE 66658
// _x := _x * - 1 ;
66643: LD_ADDR_VAR 0 6
66647: PUSH
66648: LD_VAR 0 6
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: MUL
66657: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66658: LD_ADDR_VAR 0 7
66662: PUSH
66663: LD_VAR 0 2
66667: PUSH
66668: LD_VAR 0 4
66672: PLUS
66673: PUSH
66674: LD_INT 2
66676: DIV
66677: ST_TO_ADDR
// if _y < 0 then
66678: LD_VAR 0 7
66682: PUSH
66683: LD_INT 0
66685: LESS
66686: IFFALSE 66703
// _y := _y * - 1 ;
66688: LD_ADDR_VAR 0 7
66692: PUSH
66693: LD_VAR 0 7
66697: PUSH
66698: LD_INT 1
66700: NEG
66701: MUL
66702: ST_TO_ADDR
// result := [ _x , _y ] ;
66703: LD_ADDR_VAR 0 5
66707: PUSH
66708: LD_VAR 0 6
66712: PUSH
66713: LD_VAR 0 7
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: ST_TO_ADDR
// end ;
66722: LD_VAR 0 5
66726: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66727: LD_INT 0
66729: PPUSH
66730: PPUSH
66731: PPUSH
66732: PPUSH
// task := GetTaskList ( unit ) ;
66733: LD_ADDR_VAR 0 7
66737: PUSH
66738: LD_VAR 0 1
66742: PPUSH
66743: CALL_OW 437
66747: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66748: LD_VAR 0 7
66752: NOT
66753: PUSH
66754: LD_VAR 0 1
66758: PPUSH
66759: LD_VAR 0 2
66763: PPUSH
66764: CALL_OW 308
66768: NOT
66769: AND
66770: IFFALSE 66774
// exit ;
66772: GO 66892
// if IsInArea ( unit , area ) then
66774: LD_VAR 0 1
66778: PPUSH
66779: LD_VAR 0 2
66783: PPUSH
66784: CALL_OW 308
66788: IFFALSE 66806
// begin ComMoveToArea ( unit , goAway ) ;
66790: LD_VAR 0 1
66794: PPUSH
66795: LD_VAR 0 3
66799: PPUSH
66800: CALL_OW 113
// exit ;
66804: GO 66892
// end ; if task [ 1 ] [ 1 ] <> M then
66806: LD_VAR 0 7
66810: PUSH
66811: LD_INT 1
66813: ARRAY
66814: PUSH
66815: LD_INT 1
66817: ARRAY
66818: PUSH
66819: LD_STRING M
66821: NONEQUAL
66822: IFFALSE 66826
// exit ;
66824: GO 66892
// x := task [ 1 ] [ 2 ] ;
66826: LD_ADDR_VAR 0 5
66830: PUSH
66831: LD_VAR 0 7
66835: PUSH
66836: LD_INT 1
66838: ARRAY
66839: PUSH
66840: LD_INT 2
66842: ARRAY
66843: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66844: LD_ADDR_VAR 0 6
66848: PUSH
66849: LD_VAR 0 7
66853: PUSH
66854: LD_INT 1
66856: ARRAY
66857: PUSH
66858: LD_INT 3
66860: ARRAY
66861: ST_TO_ADDR
// if InArea ( x , y , area ) then
66862: LD_VAR 0 5
66866: PPUSH
66867: LD_VAR 0 6
66871: PPUSH
66872: LD_VAR 0 2
66876: PPUSH
66877: CALL_OW 309
66881: IFFALSE 66892
// ComStop ( unit ) ;
66883: LD_VAR 0 1
66887: PPUSH
66888: CALL_OW 141
// end ;
66892: LD_VAR 0 4
66896: RET
// export function Abs ( value ) ; begin
66897: LD_INT 0
66899: PPUSH
// result := value ;
66900: LD_ADDR_VAR 0 2
66904: PUSH
66905: LD_VAR 0 1
66909: ST_TO_ADDR
// if value < 0 then
66910: LD_VAR 0 1
66914: PUSH
66915: LD_INT 0
66917: LESS
66918: IFFALSE 66935
// result := value * - 1 ;
66920: LD_ADDR_VAR 0 2
66924: PUSH
66925: LD_VAR 0 1
66929: PUSH
66930: LD_INT 1
66932: NEG
66933: MUL
66934: ST_TO_ADDR
// end ;
66935: LD_VAR 0 2
66939: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66940: LD_INT 0
66942: PPUSH
66943: PPUSH
66944: PPUSH
66945: PPUSH
66946: PPUSH
66947: PPUSH
66948: PPUSH
66949: PPUSH
// if not unit or not building then
66950: LD_VAR 0 1
66954: NOT
66955: PUSH
66956: LD_VAR 0 2
66960: NOT
66961: OR
66962: IFFALSE 66966
// exit ;
66964: GO 67192
// x := GetX ( building ) ;
66966: LD_ADDR_VAR 0 4
66970: PUSH
66971: LD_VAR 0 2
66975: PPUSH
66976: CALL_OW 250
66980: ST_TO_ADDR
// y := GetY ( building ) ;
66981: LD_ADDR_VAR 0 6
66985: PUSH
66986: LD_VAR 0 2
66990: PPUSH
66991: CALL_OW 251
66995: ST_TO_ADDR
// d := GetDir ( building ) ;
66996: LD_ADDR_VAR 0 8
67000: PUSH
67001: LD_VAR 0 2
67005: PPUSH
67006: CALL_OW 254
67010: ST_TO_ADDR
// r := 4 ;
67011: LD_ADDR_VAR 0 9
67015: PUSH
67016: LD_INT 4
67018: ST_TO_ADDR
// for i := 1 to 5 do
67019: LD_ADDR_VAR 0 10
67023: PUSH
67024: DOUBLE
67025: LD_INT 1
67027: DEC
67028: ST_TO_ADDR
67029: LD_INT 5
67031: PUSH
67032: FOR_TO
67033: IFFALSE 67190
// begin _x := ShiftX ( x , d , r + i ) ;
67035: LD_ADDR_VAR 0 5
67039: PUSH
67040: LD_VAR 0 4
67044: PPUSH
67045: LD_VAR 0 8
67049: PPUSH
67050: LD_VAR 0 9
67054: PUSH
67055: LD_VAR 0 10
67059: PLUS
67060: PPUSH
67061: CALL_OW 272
67065: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67066: LD_ADDR_VAR 0 7
67070: PUSH
67071: LD_VAR 0 6
67075: PPUSH
67076: LD_VAR 0 8
67080: PPUSH
67081: LD_VAR 0 9
67085: PUSH
67086: LD_VAR 0 10
67090: PLUS
67091: PPUSH
67092: CALL_OW 273
67096: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67097: LD_VAR 0 5
67101: PPUSH
67102: LD_VAR 0 7
67106: PPUSH
67107: CALL_OW 488
67111: PUSH
67112: LD_VAR 0 5
67116: PPUSH
67117: LD_VAR 0 7
67121: PPUSH
67122: CALL_OW 428
67126: PPUSH
67127: CALL_OW 247
67131: PUSH
67132: LD_INT 3
67134: PUSH
67135: LD_INT 2
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: IN
67142: NOT
67143: AND
67144: IFFALSE 67188
// begin ComMoveXY ( unit , _x , _y ) ;
67146: LD_VAR 0 1
67150: PPUSH
67151: LD_VAR 0 5
67155: PPUSH
67156: LD_VAR 0 7
67160: PPUSH
67161: CALL_OW 111
// result := [ _x , _y ] ;
67165: LD_ADDR_VAR 0 3
67169: PUSH
67170: LD_VAR 0 5
67174: PUSH
67175: LD_VAR 0 7
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: ST_TO_ADDR
// exit ;
67184: POP
67185: POP
67186: GO 67192
// end ; end ;
67188: GO 67032
67190: POP
67191: POP
// end ;
67192: LD_VAR 0 3
67196: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67197: LD_INT 0
67199: PPUSH
67200: PPUSH
67201: PPUSH
// result := 0 ;
67202: LD_ADDR_VAR 0 3
67206: PUSH
67207: LD_INT 0
67209: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67210: LD_VAR 0 1
67214: PUSH
67215: LD_INT 0
67217: LESS
67218: PUSH
67219: LD_VAR 0 1
67223: PUSH
67224: LD_INT 8
67226: GREATER
67227: OR
67228: PUSH
67229: LD_VAR 0 2
67233: PUSH
67234: LD_INT 0
67236: LESS
67237: OR
67238: PUSH
67239: LD_VAR 0 2
67243: PUSH
67244: LD_INT 8
67246: GREATER
67247: OR
67248: IFFALSE 67252
// exit ;
67250: GO 67327
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67252: LD_ADDR_VAR 0 4
67256: PUSH
67257: LD_INT 22
67259: PUSH
67260: LD_VAR 0 2
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PPUSH
67269: CALL_OW 69
67273: PUSH
67274: FOR_IN
67275: IFFALSE 67325
// begin un := UnitShoot ( i ) ;
67277: LD_ADDR_VAR 0 5
67281: PUSH
67282: LD_VAR 0 4
67286: PPUSH
67287: CALL_OW 504
67291: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67292: LD_VAR 0 5
67296: PPUSH
67297: CALL_OW 255
67301: PUSH
67302: LD_VAR 0 1
67306: EQUAL
67307: IFFALSE 67323
// begin result := un ;
67309: LD_ADDR_VAR 0 3
67313: PUSH
67314: LD_VAR 0 5
67318: ST_TO_ADDR
// exit ;
67319: POP
67320: POP
67321: GO 67327
// end ; end ;
67323: GO 67274
67325: POP
67326: POP
// end ;
67327: LD_VAR 0 3
67331: RET
// export function GetCargoBay ( units ) ; begin
67332: LD_INT 0
67334: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67335: LD_ADDR_VAR 0 2
67339: PUSH
67340: LD_VAR 0 1
67344: PPUSH
67345: LD_INT 2
67347: PUSH
67348: LD_INT 34
67350: PUSH
67351: LD_INT 12
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 34
67360: PUSH
67361: LD_INT 51
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 34
67370: PUSH
67371: LD_INT 32
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 34
67380: PUSH
67381: LD_EXP 46
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: PPUSH
67397: CALL_OW 72
67401: ST_TO_ADDR
// end ;
67402: LD_VAR 0 2
67406: RET
// export function Negate ( value ) ; begin
67407: LD_INT 0
67409: PPUSH
// result := not value ;
67410: LD_ADDR_VAR 0 2
67414: PUSH
67415: LD_VAR 0 1
67419: NOT
67420: ST_TO_ADDR
// end ;
67421: LD_VAR 0 2
67425: RET
// export function Inc ( value ) ; begin
67426: LD_INT 0
67428: PPUSH
// result := value + 1 ;
67429: LD_ADDR_VAR 0 2
67433: PUSH
67434: LD_VAR 0 1
67438: PUSH
67439: LD_INT 1
67441: PLUS
67442: ST_TO_ADDR
// end ;
67443: LD_VAR 0 2
67447: RET
// export function Dec ( value ) ; begin
67448: LD_INT 0
67450: PPUSH
// result := value - 1 ;
67451: LD_ADDR_VAR 0 2
67455: PUSH
67456: LD_VAR 0 1
67460: PUSH
67461: LD_INT 1
67463: MINUS
67464: ST_TO_ADDR
// end ;
67465: LD_VAR 0 2
67469: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67470: LD_INT 0
67472: PPUSH
67473: PPUSH
67474: PPUSH
67475: PPUSH
67476: PPUSH
67477: PPUSH
67478: PPUSH
67479: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67480: LD_VAR 0 1
67484: PPUSH
67485: LD_VAR 0 2
67489: PPUSH
67490: CALL_OW 488
67494: NOT
67495: PUSH
67496: LD_VAR 0 3
67500: PPUSH
67501: LD_VAR 0 4
67505: PPUSH
67506: CALL_OW 488
67510: NOT
67511: OR
67512: IFFALSE 67525
// begin result := - 1 ;
67514: LD_ADDR_VAR 0 5
67518: PUSH
67519: LD_INT 1
67521: NEG
67522: ST_TO_ADDR
// exit ;
67523: GO 67760
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67525: LD_ADDR_VAR 0 12
67529: PUSH
67530: LD_VAR 0 1
67534: PPUSH
67535: LD_VAR 0 2
67539: PPUSH
67540: LD_VAR 0 3
67544: PPUSH
67545: LD_VAR 0 4
67549: PPUSH
67550: CALL 66608 0 4
67554: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67555: LD_ADDR_VAR 0 11
67559: PUSH
67560: LD_VAR 0 1
67564: PPUSH
67565: LD_VAR 0 2
67569: PPUSH
67570: LD_VAR 0 12
67574: PUSH
67575: LD_INT 1
67577: ARRAY
67578: PPUSH
67579: LD_VAR 0 12
67583: PUSH
67584: LD_INT 2
67586: ARRAY
67587: PPUSH
67588: CALL_OW 298
67592: ST_TO_ADDR
// distance := 9999 ;
67593: LD_ADDR_VAR 0 10
67597: PUSH
67598: LD_INT 9999
67600: ST_TO_ADDR
// for i := 0 to 5 do
67601: LD_ADDR_VAR 0 6
67605: PUSH
67606: DOUBLE
67607: LD_INT 0
67609: DEC
67610: ST_TO_ADDR
67611: LD_INT 5
67613: PUSH
67614: FOR_TO
67615: IFFALSE 67758
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67617: LD_ADDR_VAR 0 7
67621: PUSH
67622: LD_VAR 0 1
67626: PPUSH
67627: LD_VAR 0 6
67631: PPUSH
67632: LD_VAR 0 11
67636: PPUSH
67637: CALL_OW 272
67641: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67642: LD_ADDR_VAR 0 8
67646: PUSH
67647: LD_VAR 0 2
67651: PPUSH
67652: LD_VAR 0 6
67656: PPUSH
67657: LD_VAR 0 11
67661: PPUSH
67662: CALL_OW 273
67666: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67667: LD_VAR 0 7
67671: PPUSH
67672: LD_VAR 0 8
67676: PPUSH
67677: CALL_OW 488
67681: NOT
67682: IFFALSE 67686
// continue ;
67684: GO 67614
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67686: LD_ADDR_VAR 0 9
67690: PUSH
67691: LD_VAR 0 12
67695: PUSH
67696: LD_INT 1
67698: ARRAY
67699: PPUSH
67700: LD_VAR 0 12
67704: PUSH
67705: LD_INT 2
67707: ARRAY
67708: PPUSH
67709: LD_VAR 0 7
67713: PPUSH
67714: LD_VAR 0 8
67718: PPUSH
67719: CALL_OW 298
67723: ST_TO_ADDR
// if tmp < distance then
67724: LD_VAR 0 9
67728: PUSH
67729: LD_VAR 0 10
67733: LESS
67734: IFFALSE 67756
// begin result := i ;
67736: LD_ADDR_VAR 0 5
67740: PUSH
67741: LD_VAR 0 6
67745: ST_TO_ADDR
// distance := tmp ;
67746: LD_ADDR_VAR 0 10
67750: PUSH
67751: LD_VAR 0 9
67755: ST_TO_ADDR
// end ; end ;
67756: GO 67614
67758: POP
67759: POP
// end ;
67760: LD_VAR 0 5
67764: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67765: LD_INT 0
67767: PPUSH
67768: PPUSH
// if not driver or not IsInUnit ( driver ) then
67769: LD_VAR 0 1
67773: NOT
67774: PUSH
67775: LD_VAR 0 1
67779: PPUSH
67780: CALL_OW 310
67784: NOT
67785: OR
67786: IFFALSE 67790
// exit ;
67788: GO 67880
// vehicle := IsInUnit ( driver ) ;
67790: LD_ADDR_VAR 0 3
67794: PUSH
67795: LD_VAR 0 1
67799: PPUSH
67800: CALL_OW 310
67804: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67805: LD_VAR 0 1
67809: PPUSH
67810: LD_STRING \
67812: PUSH
67813: LD_INT 0
67815: PUSH
67816: LD_INT 0
67818: PUSH
67819: LD_INT 0
67821: PUSH
67822: LD_INT 0
67824: PUSH
67825: LD_INT 0
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: PUSH
67840: LD_STRING E
67842: PUSH
67843: LD_INT 0
67845: PUSH
67846: LD_INT 0
67848: PUSH
67849: LD_VAR 0 3
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: LD_INT 0
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PPUSH
67876: CALL_OW 446
// end ;
67880: LD_VAR 0 2
67884: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67885: LD_INT 0
67887: PPUSH
67888: PPUSH
// if not driver or not IsInUnit ( driver ) then
67889: LD_VAR 0 1
67893: NOT
67894: PUSH
67895: LD_VAR 0 1
67899: PPUSH
67900: CALL_OW 310
67904: NOT
67905: OR
67906: IFFALSE 67910
// exit ;
67908: GO 68000
// vehicle := IsInUnit ( driver ) ;
67910: LD_ADDR_VAR 0 3
67914: PUSH
67915: LD_VAR 0 1
67919: PPUSH
67920: CALL_OW 310
67924: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67925: LD_VAR 0 1
67929: PPUSH
67930: LD_STRING \
67932: PUSH
67933: LD_INT 0
67935: PUSH
67936: LD_INT 0
67938: PUSH
67939: LD_INT 0
67941: PUSH
67942: LD_INT 0
67944: PUSH
67945: LD_INT 0
67947: PUSH
67948: LD_INT 0
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: PUSH
67960: LD_STRING E
67962: PUSH
67963: LD_INT 0
67965: PUSH
67966: LD_INT 0
67968: PUSH
67969: LD_VAR 0 3
67973: PUSH
67974: LD_INT 0
67976: PUSH
67977: LD_INT 0
67979: PUSH
67980: LD_INT 0
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PPUSH
67996: CALL_OW 447
// end ;
68000: LD_VAR 0 2
68004: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68005: LD_INT 0
68007: PPUSH
68008: PPUSH
68009: PPUSH
// tmp := [ ] ;
68010: LD_ADDR_VAR 0 5
68014: PUSH
68015: EMPTY
68016: ST_TO_ADDR
// for i in units do
68017: LD_ADDR_VAR 0 4
68021: PUSH
68022: LD_VAR 0 1
68026: PUSH
68027: FOR_IN
68028: IFFALSE 68066
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68030: LD_ADDR_VAR 0 5
68034: PUSH
68035: LD_VAR 0 5
68039: PPUSH
68040: LD_VAR 0 5
68044: PUSH
68045: LD_INT 1
68047: PLUS
68048: PPUSH
68049: LD_VAR 0 4
68053: PPUSH
68054: CALL_OW 256
68058: PPUSH
68059: CALL_OW 2
68063: ST_TO_ADDR
68064: GO 68027
68066: POP
68067: POP
// if not tmp then
68068: LD_VAR 0 5
68072: NOT
68073: IFFALSE 68077
// exit ;
68075: GO 68125
// if asc then
68077: LD_VAR 0 2
68081: IFFALSE 68105
// result := SortListByListAsc ( units , tmp ) else
68083: LD_ADDR_VAR 0 3
68087: PUSH
68088: LD_VAR 0 1
68092: PPUSH
68093: LD_VAR 0 5
68097: PPUSH
68098: CALL_OW 76
68102: ST_TO_ADDR
68103: GO 68125
// result := SortListByListDesc ( units , tmp ) ;
68105: LD_ADDR_VAR 0 3
68109: PUSH
68110: LD_VAR 0 1
68114: PPUSH
68115: LD_VAR 0 5
68119: PPUSH
68120: CALL_OW 77
68124: ST_TO_ADDR
// end ;
68125: LD_VAR 0 3
68129: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68130: LD_INT 0
68132: PPUSH
68133: PPUSH
// task := GetTaskList ( mech ) ;
68134: LD_ADDR_VAR 0 4
68138: PUSH
68139: LD_VAR 0 1
68143: PPUSH
68144: CALL_OW 437
68148: ST_TO_ADDR
// if not task then
68149: LD_VAR 0 4
68153: NOT
68154: IFFALSE 68158
// exit ;
68156: GO 68200
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68158: LD_ADDR_VAR 0 3
68162: PUSH
68163: LD_VAR 0 4
68167: PUSH
68168: LD_INT 1
68170: ARRAY
68171: PUSH
68172: LD_INT 1
68174: ARRAY
68175: PUSH
68176: LD_STRING r
68178: EQUAL
68179: PUSH
68180: LD_VAR 0 4
68184: PUSH
68185: LD_INT 1
68187: ARRAY
68188: PUSH
68189: LD_INT 4
68191: ARRAY
68192: PUSH
68193: LD_VAR 0 2
68197: EQUAL
68198: AND
68199: ST_TO_ADDR
// end ;
68200: LD_VAR 0 3
68204: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68205: LD_INT 0
68207: PPUSH
// SetDir ( unit , d ) ;
68208: LD_VAR 0 1
68212: PPUSH
68213: LD_VAR 0 4
68217: PPUSH
68218: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68222: LD_VAR 0 1
68226: PPUSH
68227: LD_VAR 0 2
68231: PPUSH
68232: LD_VAR 0 3
68236: PPUSH
68237: LD_VAR 0 5
68241: PPUSH
68242: CALL_OW 48
// end ;
68246: LD_VAR 0 6
68250: RET
// export function ToNaturalNumber ( number ) ; begin
68251: LD_INT 0
68253: PPUSH
// result := number div 1 ;
68254: LD_ADDR_VAR 0 2
68258: PUSH
68259: LD_VAR 0 1
68263: PUSH
68264: LD_INT 1
68266: DIV
68267: ST_TO_ADDR
// if number < 0 then
68268: LD_VAR 0 1
68272: PUSH
68273: LD_INT 0
68275: LESS
68276: IFFALSE 68286
// result := 0 ;
68278: LD_ADDR_VAR 0 2
68282: PUSH
68283: LD_INT 0
68285: ST_TO_ADDR
// end ;
68286: LD_VAR 0 2
68290: RET
// export function SortByClass ( units , class ) ; var un ; begin
68291: LD_INT 0
68293: PPUSH
68294: PPUSH
// if not units or not class then
68295: LD_VAR 0 1
68299: NOT
68300: PUSH
68301: LD_VAR 0 2
68305: NOT
68306: OR
68307: IFFALSE 68311
// exit ;
68309: GO 68406
// result := [ ] ;
68311: LD_ADDR_VAR 0 3
68315: PUSH
68316: EMPTY
68317: ST_TO_ADDR
// for un in units do
68318: LD_ADDR_VAR 0 4
68322: PUSH
68323: LD_VAR 0 1
68327: PUSH
68328: FOR_IN
68329: IFFALSE 68404
// if GetClass ( un ) = class then
68331: LD_VAR 0 4
68335: PPUSH
68336: CALL_OW 257
68340: PUSH
68341: LD_VAR 0 2
68345: EQUAL
68346: IFFALSE 68373
// result := Insert ( result , 1 , un ) else
68348: LD_ADDR_VAR 0 3
68352: PUSH
68353: LD_VAR 0 3
68357: PPUSH
68358: LD_INT 1
68360: PPUSH
68361: LD_VAR 0 4
68365: PPUSH
68366: CALL_OW 2
68370: ST_TO_ADDR
68371: GO 68402
// result := Replace ( result , result + 1 , un ) ;
68373: LD_ADDR_VAR 0 3
68377: PUSH
68378: LD_VAR 0 3
68382: PPUSH
68383: LD_VAR 0 3
68387: PUSH
68388: LD_INT 1
68390: PLUS
68391: PPUSH
68392: LD_VAR 0 4
68396: PPUSH
68397: CALL_OW 1
68401: ST_TO_ADDR
68402: GO 68328
68404: POP
68405: POP
// end ;
68406: LD_VAR 0 3
68410: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68411: LD_INT 0
68413: PPUSH
68414: PPUSH
68415: PPUSH
68416: PPUSH
68417: PPUSH
68418: PPUSH
68419: PPUSH
// result := [ ] ;
68420: LD_ADDR_VAR 0 4
68424: PUSH
68425: EMPTY
68426: ST_TO_ADDR
// if x - r < 0 then
68427: LD_VAR 0 1
68431: PUSH
68432: LD_VAR 0 3
68436: MINUS
68437: PUSH
68438: LD_INT 0
68440: LESS
68441: IFFALSE 68453
// min_x := 0 else
68443: LD_ADDR_VAR 0 8
68447: PUSH
68448: LD_INT 0
68450: ST_TO_ADDR
68451: GO 68469
// min_x := x - r ;
68453: LD_ADDR_VAR 0 8
68457: PUSH
68458: LD_VAR 0 1
68462: PUSH
68463: LD_VAR 0 3
68467: MINUS
68468: ST_TO_ADDR
// if y - r < 0 then
68469: LD_VAR 0 2
68473: PUSH
68474: LD_VAR 0 3
68478: MINUS
68479: PUSH
68480: LD_INT 0
68482: LESS
68483: IFFALSE 68495
// min_y := 0 else
68485: LD_ADDR_VAR 0 7
68489: PUSH
68490: LD_INT 0
68492: ST_TO_ADDR
68493: GO 68511
// min_y := y - r ;
68495: LD_ADDR_VAR 0 7
68499: PUSH
68500: LD_VAR 0 2
68504: PUSH
68505: LD_VAR 0 3
68509: MINUS
68510: ST_TO_ADDR
// max_x := x + r ;
68511: LD_ADDR_VAR 0 9
68515: PUSH
68516: LD_VAR 0 1
68520: PUSH
68521: LD_VAR 0 3
68525: PLUS
68526: ST_TO_ADDR
// max_y := y + r ;
68527: LD_ADDR_VAR 0 10
68531: PUSH
68532: LD_VAR 0 2
68536: PUSH
68537: LD_VAR 0 3
68541: PLUS
68542: ST_TO_ADDR
// for _x = min_x to max_x do
68543: LD_ADDR_VAR 0 5
68547: PUSH
68548: DOUBLE
68549: LD_VAR 0 8
68553: DEC
68554: ST_TO_ADDR
68555: LD_VAR 0 9
68559: PUSH
68560: FOR_TO
68561: IFFALSE 68662
// for _y = min_y to max_y do
68563: LD_ADDR_VAR 0 6
68567: PUSH
68568: DOUBLE
68569: LD_VAR 0 7
68573: DEC
68574: ST_TO_ADDR
68575: LD_VAR 0 10
68579: PUSH
68580: FOR_TO
68581: IFFALSE 68658
// begin if not ValidHex ( _x , _y ) then
68583: LD_VAR 0 5
68587: PPUSH
68588: LD_VAR 0 6
68592: PPUSH
68593: CALL_OW 488
68597: NOT
68598: IFFALSE 68602
// continue ;
68600: GO 68580
// if GetResourceTypeXY ( _x , _y ) then
68602: LD_VAR 0 5
68606: PPUSH
68607: LD_VAR 0 6
68611: PPUSH
68612: CALL_OW 283
68616: IFFALSE 68656
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68618: LD_ADDR_VAR 0 4
68622: PUSH
68623: LD_VAR 0 4
68627: PPUSH
68628: LD_VAR 0 4
68632: PUSH
68633: LD_INT 1
68635: PLUS
68636: PPUSH
68637: LD_VAR 0 5
68641: PUSH
68642: LD_VAR 0 6
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PPUSH
68651: CALL_OW 1
68655: ST_TO_ADDR
// end ;
68656: GO 68580
68658: POP
68659: POP
68660: GO 68560
68662: POP
68663: POP
// end ;
68664: LD_VAR 0 4
68668: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68669: LD_INT 0
68671: PPUSH
68672: PPUSH
68673: PPUSH
68674: PPUSH
68675: PPUSH
68676: PPUSH
68677: PPUSH
68678: PPUSH
// if not units then
68679: LD_VAR 0 1
68683: NOT
68684: IFFALSE 68688
// exit ;
68686: GO 69199
// result := UnitFilter ( units , [ f_ok ] ) ;
68688: LD_ADDR_VAR 0 3
68692: PUSH
68693: LD_VAR 0 1
68697: PPUSH
68698: LD_INT 50
68700: PUSH
68701: EMPTY
68702: LIST
68703: PPUSH
68704: CALL_OW 72
68708: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68709: LD_ADDR_VAR 0 8
68713: PUSH
68714: LD_VAR 0 1
68718: PUSH
68719: LD_INT 1
68721: ARRAY
68722: PPUSH
68723: CALL_OW 255
68727: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68728: LD_ADDR_VAR 0 10
68732: PUSH
68733: LD_INT 29
68735: PUSH
68736: LD_EXP 49
68740: PUSH
68741: LD_INT 49
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: LIST
68748: ST_TO_ADDR
// if not result then
68749: LD_VAR 0 3
68753: NOT
68754: IFFALSE 68758
// exit ;
68756: GO 69199
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68758: LD_ADDR_VAR 0 5
68762: PUSH
68763: LD_INT 81
68765: PUSH
68766: LD_VAR 0 8
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PPUSH
68775: CALL_OW 69
68779: ST_TO_ADDR
// for i in result do
68780: LD_ADDR_VAR 0 4
68784: PUSH
68785: LD_VAR 0 3
68789: PUSH
68790: FOR_IN
68791: IFFALSE 69197
// begin tag := GetTag ( i ) + 1 ;
68793: LD_ADDR_VAR 0 9
68797: PUSH
68798: LD_VAR 0 4
68802: PPUSH
68803: CALL_OW 110
68807: PUSH
68808: LD_INT 1
68810: PLUS
68811: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68812: LD_ADDR_VAR 0 7
68816: PUSH
68817: LD_VAR 0 4
68821: PPUSH
68822: CALL_OW 250
68826: PPUSH
68827: LD_VAR 0 4
68831: PPUSH
68832: CALL_OW 251
68836: PPUSH
68837: LD_INT 6
68839: PPUSH
68840: CALL 68411 0 3
68844: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68845: LD_VAR 0 7
68849: PUSH
68850: LD_VAR 0 4
68854: PPUSH
68855: CALL_OW 264
68859: PUSH
68860: LD_VAR 0 10
68864: IN
68865: NOT
68866: AND
68867: IFFALSE 68906
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68869: LD_VAR 0 4
68873: PPUSH
68874: LD_VAR 0 7
68878: PUSH
68879: LD_INT 1
68881: ARRAY
68882: PUSH
68883: LD_INT 1
68885: ARRAY
68886: PPUSH
68887: LD_VAR 0 7
68891: PUSH
68892: LD_INT 1
68894: ARRAY
68895: PUSH
68896: LD_INT 2
68898: ARRAY
68899: PPUSH
68900: CALL_OW 116
68904: GO 69195
// if path > tag then
68906: LD_VAR 0 2
68910: PUSH
68911: LD_VAR 0 9
68915: GREATER
68916: IFFALSE 69124
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68918: LD_ADDR_VAR 0 6
68922: PUSH
68923: LD_VAR 0 5
68927: PPUSH
68928: LD_INT 91
68930: PUSH
68931: LD_VAR 0 4
68935: PUSH
68936: LD_INT 12
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: LIST
68943: PPUSH
68944: CALL_OW 72
68948: ST_TO_ADDR
// if nearEnemy then
68949: LD_VAR 0 6
68953: IFFALSE 69022
// begin if GetWeapon ( i ) = ru_time_lapser then
68955: LD_VAR 0 4
68959: PPUSH
68960: CALL_OW 264
68964: PUSH
68965: LD_INT 49
68967: EQUAL
68968: IFFALSE 68996
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68970: LD_VAR 0 4
68974: PPUSH
68975: LD_VAR 0 6
68979: PPUSH
68980: LD_VAR 0 4
68984: PPUSH
68985: CALL_OW 74
68989: PPUSH
68990: CALL_OW 112
68994: GO 69020
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68996: LD_VAR 0 4
69000: PPUSH
69001: LD_VAR 0 6
69005: PPUSH
69006: LD_VAR 0 4
69010: PPUSH
69011: CALL_OW 74
69015: PPUSH
69016: CALL_OW 115
// end else
69020: GO 69122
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69022: LD_VAR 0 4
69026: PPUSH
69027: LD_VAR 0 2
69031: PUSH
69032: LD_VAR 0 9
69036: ARRAY
69037: PUSH
69038: LD_INT 1
69040: ARRAY
69041: PPUSH
69042: LD_VAR 0 2
69046: PUSH
69047: LD_VAR 0 9
69051: ARRAY
69052: PUSH
69053: LD_INT 2
69055: ARRAY
69056: PPUSH
69057: CALL_OW 297
69061: PUSH
69062: LD_INT 6
69064: GREATER
69065: IFFALSE 69108
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69067: LD_VAR 0 4
69071: PPUSH
69072: LD_VAR 0 2
69076: PUSH
69077: LD_VAR 0 9
69081: ARRAY
69082: PUSH
69083: LD_INT 1
69085: ARRAY
69086: PPUSH
69087: LD_VAR 0 2
69091: PUSH
69092: LD_VAR 0 9
69096: ARRAY
69097: PUSH
69098: LD_INT 2
69100: ARRAY
69101: PPUSH
69102: CALL_OW 114
69106: GO 69122
// SetTag ( i , tag ) ;
69108: LD_VAR 0 4
69112: PPUSH
69113: LD_VAR 0 9
69117: PPUSH
69118: CALL_OW 109
// end else
69122: GO 69195
// if enemy then
69124: LD_VAR 0 5
69128: IFFALSE 69195
// begin if GetWeapon ( i ) = ru_time_lapser then
69130: LD_VAR 0 4
69134: PPUSH
69135: CALL_OW 264
69139: PUSH
69140: LD_INT 49
69142: EQUAL
69143: IFFALSE 69171
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69145: LD_VAR 0 4
69149: PPUSH
69150: LD_VAR 0 5
69154: PPUSH
69155: LD_VAR 0 4
69159: PPUSH
69160: CALL_OW 74
69164: PPUSH
69165: CALL_OW 112
69169: GO 69195
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69171: LD_VAR 0 4
69175: PPUSH
69176: LD_VAR 0 5
69180: PPUSH
69181: LD_VAR 0 4
69185: PPUSH
69186: CALL_OW 74
69190: PPUSH
69191: CALL_OW 115
// end ; end ;
69195: GO 68790
69197: POP
69198: POP
// end ;
69199: LD_VAR 0 3
69203: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69204: LD_INT 0
69206: PPUSH
69207: PPUSH
69208: PPUSH
// if not unit or IsInUnit ( unit ) then
69209: LD_VAR 0 1
69213: NOT
69214: PUSH
69215: LD_VAR 0 1
69219: PPUSH
69220: CALL_OW 310
69224: OR
69225: IFFALSE 69229
// exit ;
69227: GO 69320
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69229: LD_ADDR_VAR 0 4
69233: PUSH
69234: LD_VAR 0 1
69238: PPUSH
69239: CALL_OW 250
69243: PPUSH
69244: LD_VAR 0 2
69248: PPUSH
69249: LD_INT 1
69251: PPUSH
69252: CALL_OW 272
69256: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69257: LD_ADDR_VAR 0 5
69261: PUSH
69262: LD_VAR 0 1
69266: PPUSH
69267: CALL_OW 251
69271: PPUSH
69272: LD_VAR 0 2
69276: PPUSH
69277: LD_INT 1
69279: PPUSH
69280: CALL_OW 273
69284: ST_TO_ADDR
// if ValidHex ( x , y ) then
69285: LD_VAR 0 4
69289: PPUSH
69290: LD_VAR 0 5
69294: PPUSH
69295: CALL_OW 488
69299: IFFALSE 69320
// ComTurnXY ( unit , x , y ) ;
69301: LD_VAR 0 1
69305: PPUSH
69306: LD_VAR 0 4
69310: PPUSH
69311: LD_VAR 0 5
69315: PPUSH
69316: CALL_OW 118
// end ;
69320: LD_VAR 0 3
69324: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69325: LD_INT 0
69327: PPUSH
69328: PPUSH
// result := false ;
69329: LD_ADDR_VAR 0 3
69333: PUSH
69334: LD_INT 0
69336: ST_TO_ADDR
// if not units then
69337: LD_VAR 0 2
69341: NOT
69342: IFFALSE 69346
// exit ;
69344: GO 69391
// for i in units do
69346: LD_ADDR_VAR 0 4
69350: PUSH
69351: LD_VAR 0 2
69355: PUSH
69356: FOR_IN
69357: IFFALSE 69389
// if See ( side , i ) then
69359: LD_VAR 0 1
69363: PPUSH
69364: LD_VAR 0 4
69368: PPUSH
69369: CALL_OW 292
69373: IFFALSE 69387
// begin result := true ;
69375: LD_ADDR_VAR 0 3
69379: PUSH
69380: LD_INT 1
69382: ST_TO_ADDR
// exit ;
69383: POP
69384: POP
69385: GO 69391
// end ;
69387: GO 69356
69389: POP
69390: POP
// end ;
69391: LD_VAR 0 3
69395: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69396: LD_INT 0
69398: PPUSH
69399: PPUSH
69400: PPUSH
69401: PPUSH
// if not unit or not points then
69402: LD_VAR 0 1
69406: NOT
69407: PUSH
69408: LD_VAR 0 2
69412: NOT
69413: OR
69414: IFFALSE 69418
// exit ;
69416: GO 69508
// dist := 99999 ;
69418: LD_ADDR_VAR 0 5
69422: PUSH
69423: LD_INT 99999
69425: ST_TO_ADDR
// for i in points do
69426: LD_ADDR_VAR 0 4
69430: PUSH
69431: LD_VAR 0 2
69435: PUSH
69436: FOR_IN
69437: IFFALSE 69506
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69439: LD_ADDR_VAR 0 6
69443: PUSH
69444: LD_VAR 0 1
69448: PPUSH
69449: LD_VAR 0 4
69453: PUSH
69454: LD_INT 1
69456: ARRAY
69457: PPUSH
69458: LD_VAR 0 4
69462: PUSH
69463: LD_INT 2
69465: ARRAY
69466: PPUSH
69467: CALL_OW 297
69471: ST_TO_ADDR
// if tmpDist < dist then
69472: LD_VAR 0 6
69476: PUSH
69477: LD_VAR 0 5
69481: LESS
69482: IFFALSE 69504
// begin result := i ;
69484: LD_ADDR_VAR 0 3
69488: PUSH
69489: LD_VAR 0 4
69493: ST_TO_ADDR
// dist := tmpDist ;
69494: LD_ADDR_VAR 0 5
69498: PUSH
69499: LD_VAR 0 6
69503: ST_TO_ADDR
// end ; end ;
69504: GO 69436
69506: POP
69507: POP
// end ;
69508: LD_VAR 0 3
69512: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69513: LD_INT 0
69515: PPUSH
// uc_side := side ;
69516: LD_ADDR_OWVAR 20
69520: PUSH
69521: LD_VAR 0 1
69525: ST_TO_ADDR
// uc_nation := 3 ;
69526: LD_ADDR_OWVAR 21
69530: PUSH
69531: LD_INT 3
69533: ST_TO_ADDR
// vc_chassis := 25 ;
69534: LD_ADDR_OWVAR 37
69538: PUSH
69539: LD_INT 25
69541: ST_TO_ADDR
// vc_engine := engine_siberite ;
69542: LD_ADDR_OWVAR 39
69546: PUSH
69547: LD_INT 3
69549: ST_TO_ADDR
// vc_control := control_computer ;
69550: LD_ADDR_OWVAR 38
69554: PUSH
69555: LD_INT 3
69557: ST_TO_ADDR
// vc_weapon := 59 ;
69558: LD_ADDR_OWVAR 40
69562: PUSH
69563: LD_INT 59
69565: ST_TO_ADDR
// result := CreateVehicle ;
69566: LD_ADDR_VAR 0 5
69570: PUSH
69571: CALL_OW 45
69575: ST_TO_ADDR
// SetDir ( result , d ) ;
69576: LD_VAR 0 5
69580: PPUSH
69581: LD_VAR 0 4
69585: PPUSH
69586: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69590: LD_VAR 0 5
69594: PPUSH
69595: LD_VAR 0 2
69599: PPUSH
69600: LD_VAR 0 3
69604: PPUSH
69605: LD_INT 0
69607: PPUSH
69608: CALL_OW 48
// end ;
69612: LD_VAR 0 5
69616: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69617: LD_INT 0
69619: PPUSH
69620: PPUSH
69621: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69622: LD_ADDR_VAR 0 2
69626: PUSH
69627: LD_INT 0
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: LD_INT 0
69635: PUSH
69636: LD_INT 0
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69645: LD_VAR 0 1
69649: NOT
69650: PUSH
69651: LD_VAR 0 1
69655: PPUSH
69656: CALL_OW 264
69660: PUSH
69661: LD_INT 12
69663: PUSH
69664: LD_INT 51
69666: PUSH
69667: LD_INT 32
69669: PUSH
69670: LD_EXP 46
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: IN
69681: NOT
69682: OR
69683: IFFALSE 69687
// exit ;
69685: GO 69785
// for i := 1 to 3 do
69687: LD_ADDR_VAR 0 3
69691: PUSH
69692: DOUBLE
69693: LD_INT 1
69695: DEC
69696: ST_TO_ADDR
69697: LD_INT 3
69699: PUSH
69700: FOR_TO
69701: IFFALSE 69783
// begin tmp := GetCargo ( cargo , i ) ;
69703: LD_ADDR_VAR 0 4
69707: PUSH
69708: LD_VAR 0 1
69712: PPUSH
69713: LD_VAR 0 3
69717: PPUSH
69718: CALL_OW 289
69722: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69723: LD_ADDR_VAR 0 2
69727: PUSH
69728: LD_VAR 0 2
69732: PPUSH
69733: LD_VAR 0 3
69737: PPUSH
69738: LD_VAR 0 4
69742: PPUSH
69743: CALL_OW 1
69747: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69748: LD_ADDR_VAR 0 2
69752: PUSH
69753: LD_VAR 0 2
69757: PPUSH
69758: LD_INT 4
69760: PPUSH
69761: LD_VAR 0 2
69765: PUSH
69766: LD_INT 4
69768: ARRAY
69769: PUSH
69770: LD_VAR 0 4
69774: PLUS
69775: PPUSH
69776: CALL_OW 1
69780: ST_TO_ADDR
// end ;
69781: GO 69700
69783: POP
69784: POP
// end ; end_of_file
69785: LD_VAR 0 2
69789: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69790: LD_VAR 0 1
69794: PUSH
69795: LD_INT 200
69797: DOUBLE
69798: GREATEREQUAL
69799: IFFALSE 69807
69801: LD_INT 299
69803: DOUBLE
69804: LESSEQUAL
69805: IFTRUE 69809
69807: GO 69841
69809: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69810: LD_VAR 0 1
69814: PPUSH
69815: LD_VAR 0 2
69819: PPUSH
69820: LD_VAR 0 3
69824: PPUSH
69825: LD_VAR 0 4
69829: PPUSH
69830: LD_VAR 0 5
69834: PPUSH
69835: CALL 25130 0 5
69839: GO 69918
69841: LD_INT 300
69843: DOUBLE
69844: GREATEREQUAL
69845: IFFALSE 69853
69847: LD_INT 399
69849: DOUBLE
69850: LESSEQUAL
69851: IFTRUE 69855
69853: GO 69917
69855: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69856: LD_VAR 0 1
69860: PPUSH
69861: LD_VAR 0 2
69865: PPUSH
69866: LD_VAR 0 3
69870: PPUSH
69871: LD_VAR 0 4
69875: PPUSH
69876: LD_VAR 0 5
69880: PPUSH
69881: LD_VAR 0 6
69885: PPUSH
69886: LD_VAR 0 7
69890: PPUSH
69891: LD_VAR 0 8
69895: PPUSH
69896: LD_VAR 0 9
69900: PPUSH
69901: LD_VAR 0 10
69905: PPUSH
69906: LD_VAR 0 11
69910: PPUSH
69911: CALL 22772 0 11
69915: GO 69918
69917: POP
// end ;
69918: PPOPN 11
69920: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69921: LD_VAR 0 1
69925: PPUSH
69926: LD_VAR 0 2
69930: PPUSH
69931: LD_VAR 0 3
69935: PPUSH
69936: LD_VAR 0 4
69940: PPUSH
69941: LD_VAR 0 5
69945: PPUSH
69946: CALL 24866 0 5
// end ; end_of_file
69950: PPOPN 5
69952: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69953: LD_VAR 0 1
69957: PPUSH
69958: LD_VAR 0 2
69962: PPUSH
69963: LD_VAR 0 3
69967: PPUSH
69968: LD_VAR 0 4
69972: PPUSH
69973: LD_VAR 0 5
69977: PPUSH
69978: LD_VAR 0 6
69982: PPUSH
69983: CALL 10465 0 6
// end ;
69987: PPOPN 6
69989: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69990: CALL 10440 0 0
// end ;
69994: PPOPN 1
69996: END
