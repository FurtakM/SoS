// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1290 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1194 0 0
// PrepareDifficulty ;
 207: CALL 6051 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13c_ ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING JMM
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: LD_STRING 13c_
 598: PPUSH
 599: CALL 30023 0 3
 603: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , true , 13c_ ) ;
 604: LD_ADDR_EXP 2
 608: PUSH
 609: LD_STRING Stevens
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 30023 0 3
 622: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 13c_ ) ;
 623: LD_ADDR_EXP 3
 627: PUSH
 628: LD_STRING Lisa
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_STRING 13c_
 636: PPUSH
 637: CALL 30023 0 3
 641: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 13c_ ) ;
 642: LD_ADDR_EXP 4
 646: PUSH
 647: LD_STRING Donaldson
 649: PPUSH
 650: LD_INT 1
 652: PPUSH
 653: LD_STRING 13c_
 655: PPUSH
 656: CALL 30023 0 3
 660: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 13c_ ) ;
 661: LD_ADDR_EXP 5
 665: PUSH
 666: LD_STRING Bobby
 668: PPUSH
 669: LD_INT 1
 671: PPUSH
 672: LD_STRING 13c_
 674: PPUSH
 675: CALL 30023 0 3
 679: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 13c_ ) ;
 680: LD_ADDR_EXP 6
 684: PUSH
 685: LD_STRING Cyrus
 687: PPUSH
 688: LD_INT 1
 690: PPUSH
 691: LD_STRING 13c_
 693: PPUSH
 694: CALL 30023 0 3
 698: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 13c_ ) ;
 699: LD_ADDR_EXP 7
 703: PUSH
 704: LD_STRING Denis
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: LD_STRING 13c_
 712: PPUSH
 713: CALL 30023 0 3
 717: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 13c_ ) ;
 718: LD_ADDR_EXP 8
 722: PUSH
 723: LD_STRING Brown
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: LD_STRING 13c_
 731: PPUSH
 732: CALL 30023 0 3
 736: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 13c_ ) ;
 737: LD_ADDR_EXP 9
 741: PUSH
 742: LD_STRING Gladstone
 744: PPUSH
 745: LD_INT 1
 747: PPUSH
 748: LD_STRING 13c_
 750: PPUSH
 751: CALL 30023 0 3
 755: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 13c_ ) ;
 756: LD_ADDR_EXP 10
 760: PUSH
 761: LD_STRING Houten
 763: PPUSH
 764: LD_INT 1
 766: PPUSH
 767: LD_STRING 13c_
 769: PPUSH
 770: CALL 30023 0 3
 774: ST_TO_ADDR
// Cornel = PrepareUnit ( Cornel , true , 13c_ ) ;
 775: LD_ADDR_EXP 11
 779: PUSH
 780: LD_STRING Cornel
 782: PPUSH
 783: LD_INT 1
 785: PPUSH
 786: LD_STRING 13c_
 788: PPUSH
 789: CALL 30023 0 3
 793: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 13c_ ) ;
 794: LD_ADDR_EXP 12
 798: PUSH
 799: LD_STRING Gary
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: LD_STRING 13c_
 807: PPUSH
 808: CALL 30023 0 3
 812: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 13c_ ) ;
 813: LD_ADDR_EXP 13
 817: PUSH
 818: LD_STRING Frank
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: LD_STRING 13c_
 826: PPUSH
 827: CALL 30023 0 3
 831: ST_TO_ADDR
// Kikuchi = PrepareUnit ( Kikuchi , true , 13c_ ) ;
 832: LD_ADDR_EXP 14
 836: PUSH
 837: LD_STRING Kikuchi
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: LD_STRING 13c_
 845: PPUSH
 846: CALL 30023 0 3
 850: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 851: LD_ADDR_EXP 15
 855: PUSH
 856: LD_STRING Powell
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: LD_STRING 
 864: PPUSH
 865: CALL 30023 0 3
 869: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 870: LD_ADDR_VAR 0 2
 874: PUSH
 875: LD_EXP 1
 879: PUSH
 880: LD_EXP 2
 884: PUSH
 885: LD_EXP 3
 889: PUSH
 890: LD_EXP 4
 894: PUSH
 895: LD_EXP 5
 899: PUSH
 900: LD_EXP 6
 904: PUSH
 905: LD_EXP 7
 909: PUSH
 910: LD_EXP 8
 914: PUSH
 915: LD_EXP 9
 919: PUSH
 920: LD_EXP 10
 924: PUSH
 925: LD_EXP 11
 929: PUSH
 930: LD_EXP 12
 934: PUSH
 935: LD_EXP 13
 939: PUSH
 940: LD_EXP 14
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 961: LD_ADDR_VAR 0 3
 965: PUSH
 966: LD_INT 22
 968: PUSH
 969: LD_INT 1
 971: PUSH
 972: EMPTY
 973: LIST
 974: LIST
 975: PUSH
 976: LD_INT 33
 978: PUSH
 979: LD_INT 1
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PUSH
 986: LD_INT 21
 988: PUSH
 989: LD_INT 2
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: LIST
1000: PPUSH
1001: CALL_OW 69
1005: ST_TO_ADDR
// for i = tmp downto 1 do
1006: LD_ADDR_VAR 0 4
1010: PUSH
1011: DOUBLE
1012: LD_VAR 0 2
1016: INC
1017: ST_TO_ADDR
1018: LD_INT 1
1020: PUSH
1021: FOR_DOWNTO
1022: IFFALSE 1059
// if not tmp [ i ] then
1024: LD_VAR 0 2
1028: PUSH
1029: LD_VAR 0 4
1033: ARRAY
1034: NOT
1035: IFFALSE 1057
// tmp := Delete ( tmp , i ) ;
1037: LD_ADDR_VAR 0 2
1041: PUSH
1042: LD_VAR 0 2
1046: PPUSH
1047: LD_VAR 0 4
1051: PPUSH
1052: CALL_OW 3
1056: ST_TO_ADDR
1057: GO 1021
1059: POP
1060: POP
// for i = 1 to tmp do
1061: LD_ADDR_VAR 0 4
1065: PUSH
1066: DOUBLE
1067: LD_INT 1
1069: DEC
1070: ST_TO_ADDR
1071: LD_VAR 0 2
1075: PUSH
1076: FOR_TO
1077: IFFALSE 1107
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1079: LD_VAR 0 2
1083: PUSH
1084: LD_VAR 0 4
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 3
1094: PUSH
1095: LD_VAR 0 4
1099: ARRAY
1100: PPUSH
1101: CALL_OW 52
1105: GO 1076
1107: POP
1108: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1109: LD_INT 22
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 25
1121: PUSH
1122: LD_INT 2
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PPUSH
1133: CALL_OW 69
1137: PUSH
1138: LD_INT 0
1140: EQUAL
1141: PUSH
1142: LD_INT 22
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 34
1154: PUSH
1155: LD_INT 13
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: PPUSH
1166: CALL_OW 69
1170: PUSH
1171: LD_INT 0
1173: EQUAL
1174: AND
1175: IFFALSE 1189
// SetClass ( JMM , 2 ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_INT 2
1184: PPUSH
1185: CALL_OW 336
// end ;
1189: LD_VAR 0 1
1193: RET
// export function PrepareAmericansRandom ; var i ; begin
1194: LD_INT 0
1196: PPUSH
1197: PPUSH
// uc_side = 1 ;
1198: LD_ADDR_OWVAR 20
1202: PUSH
1203: LD_INT 1
1205: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1206: LD_ADDR_EXP 16
1210: PUSH
1211: LD_STRING 13c_others
1213: PPUSH
1214: CALL_OW 31
1218: ST_TO_ADDR
// for i in others13 do
1219: LD_ADDR_VAR 0 2
1223: PUSH
1224: LD_EXP 16
1228: PUSH
1229: FOR_IN
1230: IFFALSE 1283
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1232: LD_VAR 0 2
1236: PPUSH
1237: LD_INT 22
1239: PUSH
1240: LD_INT 1
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 21
1249: PUSH
1250: LD_INT 2
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: LD_INT 58
1259: PUSH
1260: EMPTY
1261: LIST
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 69
1272: PUSH
1273: LD_INT 1
1275: ARRAY
1276: PPUSH
1277: CALL_OW 52
1281: GO 1229
1283: POP
1284: POP
// end ;
1285: LD_VAR 0 1
1289: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1290: LD_INT 0
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1298: LD_ADDR_VAR 0 5
1302: PUSH
1303: LD_STRING 13_VehiclesIn13_1
1305: PPUSH
1306: EMPTY
1307: PPUSH
1308: CALL_OW 30
1312: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1313: LD_ADDR_EXP 24
1317: PUSH
1318: LD_STRING 13_ResourcesInCargo13_1
1320: PPUSH
1321: EMPTY
1322: PPUSH
1323: CALL_OW 30
1327: ST_TO_ADDR
// cargoList = [ ] ;
1328: LD_ADDR_VAR 0 6
1332: PUSH
1333: EMPTY
1334: ST_TO_ADDR
// uc_side = 1 ;
1335: LD_ADDR_OWVAR 20
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// if vehicles > 0 then
1343: LD_VAR 0 5
1347: PUSH
1348: LD_INT 0
1350: GREATER
1351: IFFALSE 1706
// begin for i := 1 to vehicles do
1353: LD_ADDR_VAR 0 2
1357: PUSH
1358: DOUBLE
1359: LD_INT 1
1361: DEC
1362: ST_TO_ADDR
1363: LD_VAR 0 5
1367: PUSH
1368: FOR_TO
1369: IFFALSE 1518
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1371: LD_ADDR_OWVAR 21
1375: PUSH
1376: LD_VAR 0 5
1380: PUSH
1381: LD_VAR 0 2
1385: ARRAY
1386: PUSH
1387: LD_INT 1
1389: ARRAY
1390: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1391: LD_ADDR_OWVAR 37
1395: PUSH
1396: LD_VAR 0 5
1400: PUSH
1401: LD_VAR 0 2
1405: ARRAY
1406: PUSH
1407: LD_INT 2
1409: ARRAY
1410: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1411: LD_ADDR_OWVAR 39
1415: PUSH
1416: LD_VAR 0 5
1420: PUSH
1421: LD_VAR 0 2
1425: ARRAY
1426: PUSH
1427: LD_INT 3
1429: ARRAY
1430: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1431: LD_ADDR_OWVAR 38
1435: PUSH
1436: LD_VAR 0 5
1440: PUSH
1441: LD_VAR 0 2
1445: ARRAY
1446: PUSH
1447: LD_INT 4
1449: ARRAY
1450: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1451: LD_ADDR_OWVAR 40
1455: PUSH
1456: LD_VAR 0 5
1460: PUSH
1461: LD_VAR 0 2
1465: ARRAY
1466: PUSH
1467: LD_INT 5
1469: ARRAY
1470: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1471: LD_ADDR_OWVAR 41
1475: PUSH
1476: LD_INT 40
1478: ST_TO_ADDR
// veh = CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 2
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
// end ;
1516: GO 1368
1518: POP
1519: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1520: LD_ADDR_VAR 0 6
1524: PUSH
1525: LD_INT 22
1527: PUSH
1528: LD_INT 1
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 21
1537: PUSH
1538: LD_INT 2
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 34
1547: PUSH
1548: LD_INT 12
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PPUSH
1560: CALL_OW 69
1564: ST_TO_ADDR
// if cargoList > 0 then
1565: LD_VAR 0 6
1569: PUSH
1570: LD_INT 0
1572: GREATER
1573: IFFALSE 1706
// for i = 1 to cargoList do
1575: LD_ADDR_VAR 0 2
1579: PUSH
1580: DOUBLE
1581: LD_INT 1
1583: DEC
1584: ST_TO_ADDR
1585: LD_VAR 0 6
1589: PUSH
1590: FOR_TO
1591: IFFALSE 1704
// begin if resources > 0 then
1593: LD_EXP 24
1597: PUSH
1598: LD_INT 0
1600: GREATER
1601: IFFALSE 1702
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1603: LD_VAR 0 6
1607: PUSH
1608: LD_VAR 0 2
1612: ARRAY
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: LD_EXP 24
1621: PUSH
1622: LD_VAR 0 2
1626: ARRAY
1627: PUSH
1628: LD_INT 1
1630: ARRAY
1631: PPUSH
1632: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1636: LD_VAR 0 6
1640: PUSH
1641: LD_VAR 0 2
1645: ARRAY
1646: PPUSH
1647: LD_INT 2
1649: PPUSH
1650: LD_EXP 24
1654: PUSH
1655: LD_VAR 0 2
1659: ARRAY
1660: PUSH
1661: LD_INT 2
1663: ARRAY
1664: PPUSH
1665: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1669: LD_VAR 0 6
1673: PUSH
1674: LD_VAR 0 2
1678: ARRAY
1679: PPUSH
1680: LD_INT 3
1682: PPUSH
1683: LD_EXP 24
1687: PUSH
1688: LD_VAR 0 2
1692: ARRAY
1693: PUSH
1694: LD_INT 3
1696: ARRAY
1697: PPUSH
1698: CALL_OW 291
// end ; end ;
1702: GO 1590
1704: POP
1705: POP
// end ; end ;
1706: LD_VAR 0 1
1710: RET
// export function PowellSupport ; var i , veh , un ; begin
1711: LD_INT 0
1713: PPUSH
1714: PPUSH
1715: PPUSH
1716: PPUSH
// for i = 1 to 3 do
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: DOUBLE
1723: LD_INT 1
1725: DEC
1726: ST_TO_ADDR
1727: LD_INT 3
1729: PUSH
1730: FOR_TO
1731: IFFALSE 1932
// begin uc_nation = 1 ;
1733: LD_ADDR_OWVAR 21
1737: PUSH
1738: LD_INT 1
1740: ST_TO_ADDR
// uc_side = 1 ;
1741: LD_ADDR_OWVAR 20
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// vc_engine = 3 ;
1749: LD_ADDR_OWVAR 39
1753: PUSH
1754: LD_INT 3
1756: ST_TO_ADDR
// vc_control = 1 ;
1757: LD_ADDR_OWVAR 38
1761: PUSH
1762: LD_INT 1
1764: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1765: LD_ADDR_OWVAR 40
1769: PUSH
1770: LD_INT 9
1772: PUSH
1773: LD_INT 5
1775: PUSH
1776: LD_INT 4
1778: PUSH
1779: LD_INT 7
1781: PUSH
1782: LD_INT 6
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: PUSH
1792: LD_INT 1
1794: PPUSH
1795: LD_INT 5
1797: PPUSH
1798: CALL_OW 12
1802: ARRAY
1803: ST_TO_ADDR
// if vc_weapon = 6 then
1804: LD_OWVAR 40
1808: PUSH
1809: LD_INT 6
1811: EQUAL
1812: IFFALSE 1824
// vc_chassis = 4 else
1814: LD_ADDR_OWVAR 37
1818: PUSH
1819: LD_INT 4
1821: ST_TO_ADDR
1822: GO 1832
// vc_chassis = 3 ;
1824: LD_ADDR_OWVAR 37
1828: PUSH
1829: LD_INT 3
1831: ST_TO_ADDR
// veh = CreateVehicle ;
1832: LD_ADDR_VAR 0 3
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 3
1846: PPUSH
1847: LD_INT 2
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// SetDir ( veh , 1 ) ;
1857: LD_VAR 0 3
1861: PPUSH
1862: LD_INT 1
1864: PPUSH
1865: CALL_OW 233
// hc_gallery =  ;
1869: LD_ADDR_OWVAR 33
1873: PUSH
1874: LD_STRING 
1876: ST_TO_ADDR
// hc_name =  ;
1877: LD_ADDR_OWVAR 26
1881: PUSH
1882: LD_STRING 
1884: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1885: LD_INT 0
1887: PPUSH
1888: LD_INT 3
1890: PPUSH
1891: LD_INT 7
1893: PPUSH
1894: LD_INT 10
1896: PPUSH
1897: CALL_OW 12
1901: PPUSH
1902: CALL_OW 380
// un = CreateHuman ;
1906: LD_ADDR_VAR 0 4
1910: PUSH
1911: CALL_OW 44
1915: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1916: LD_VAR 0 4
1920: PPUSH
1921: LD_VAR 0 3
1925: PPUSH
1926: CALL_OW 52
// end ;
1930: GO 1730
1932: POP
1933: POP
// end ; end_of_file
1934: LD_VAR 0 1
1938: RET
// export function PrepareBurlak ; begin
1939: LD_INT 0
1941: PPUSH
// uc_side = 7 ;
1942: LD_ADDR_OWVAR 20
1946: PUSH
1947: LD_INT 7
1949: ST_TO_ADDR
// uc_nation = 3 ;
1950: LD_ADDR_OWVAR 21
1954: PUSH
1955: LD_INT 3
1957: ST_TO_ADDR
// vc_engine = 3 ;
1958: LD_ADDR_OWVAR 39
1962: PUSH
1963: LD_INT 3
1965: ST_TO_ADDR
// vc_control = 1 ;
1966: LD_ADDR_OWVAR 38
1970: PUSH
1971: LD_INT 1
1973: ST_TO_ADDR
// vc_weapon = 46 ;
1974: LD_ADDR_OWVAR 40
1978: PUSH
1979: LD_INT 46
1981: ST_TO_ADDR
// vc_chassis = 24 ;
1982: LD_ADDR_OWVAR 37
1986: PUSH
1987: LD_INT 24
1989: ST_TO_ADDR
// Masha = CreateVehicle ;
1990: LD_ADDR_EXP 18
1994: PUSH
1995: CALL_OW 45
1999: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2000: LD_EXP 18
2004: PPUSH
2005: LD_INT 3
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2015: LD_EXP 18
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2027: LD_ADDR_EXP 17
2031: PUSH
2032: LD_STRING Burlak
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: LD_STRING 
2040: PPUSH
2041: CALL 30023 0 3
2045: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2046: LD_EXP 17
2050: PPUSH
2051: LD_EXP 18
2055: PPUSH
2056: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2060: LD_EXP 18
2064: PPUSH
2065: LD_INT 107
2067: PPUSH
2068: LD_INT 118
2070: PPUSH
2071: CALL_OW 114
// spawnBurlak = 1 ;
2075: LD_ADDR_EXP 27
2079: PUSH
2080: LD_INT 1
2082: ST_TO_ADDR
// end ;
2083: LD_VAR 0 1
2087: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2088: LD_INT 0
2090: PPUSH
2091: PPUSH
2092: PPUSH
2093: PPUSH
// uc_side = 7 ;
2094: LD_ADDR_OWVAR 20
2098: PUSH
2099: LD_INT 7
2101: ST_TO_ADDR
// uc_nation = 3 ;
2102: LD_ADDR_OWVAR 21
2106: PUSH
2107: LD_INT 3
2109: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ,  ) ;
2110: LD_ADDR_EXP 19
2114: PUSH
2115: LD_STRING Gnyevko
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: LD_STRING 
2123: PPUSH
2124: CALL 30023 0 3
2128: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ,  ) ;
2129: LD_ADDR_EXP 20
2133: PUSH
2134: LD_STRING Titov
2136: PPUSH
2137: LD_INT 0
2139: PPUSH
2140: LD_STRING 
2142: PPUSH
2143: CALL 30023 0 3
2147: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ,  ) ;
2148: LD_ADDR_EXP 21
2152: PUSH
2153: LD_STRING Xavier2
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: LD_STRING 
2161: PPUSH
2162: CALL 30023 0 3
2166: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ,  ) ;
2167: LD_ADDR_EXP 22
2171: PUSH
2172: LD_STRING Belkov
2174: PPUSH
2175: LD_INT 0
2177: PPUSH
2178: LD_STRING 
2180: PPUSH
2181: CALL 30023 0 3
2185: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ,  ) ;
2186: LD_ADDR_EXP 23
2190: PUSH
2191: LD_STRING Lipshchin
2193: PPUSH
2194: LD_INT 0
2196: PPUSH
2197: LD_STRING 
2199: PPUSH
2200: CALL 30023 0 3
2204: ST_TO_ADDR
// for i = 1 to 5 do
2205: LD_ADDR_VAR 0 2
2209: PUSH
2210: DOUBLE
2211: LD_INT 1
2213: DEC
2214: ST_TO_ADDR
2215: LD_INT 5
2217: PUSH
2218: FOR_TO
2219: IFFALSE 2307
// begin vc_engine = 3 ;
2221: LD_ADDR_OWVAR 39
2225: PUSH
2226: LD_INT 3
2228: ST_TO_ADDR
// vc_control = 1 ;
2229: LD_ADDR_OWVAR 38
2233: PUSH
2234: LD_INT 1
2236: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2237: LD_ADDR_OWVAR 40
2241: PUSH
2242: LD_INT 43
2244: PUSH
2245: LD_INT 44
2247: PUSH
2248: LD_INT 45
2250: PUSH
2251: LD_INT 49
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 1
2262: PPUSH
2263: LD_INT 4
2265: PPUSH
2266: CALL_OW 12
2270: ARRAY
2271: ST_TO_ADDR
// vc_chassis = 22 ;
2272: LD_ADDR_OWVAR 37
2276: PUSH
2277: LD_INT 22
2279: ST_TO_ADDR
// veh = CreateVehicle ;
2280: LD_ADDR_VAR 0 3
2284: PUSH
2285: CALL_OW 45
2289: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2290: LD_VAR 0 3
2294: PPUSH
2295: LD_INT 3
2297: PPUSH
2298: LD_INT 0
2300: PPUSH
2301: CALL_OW 49
// end ;
2305: GO 2218
2307: POP
2308: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2309: LD_ADDR_VAR 0 4
2313: PUSH
2314: LD_INT 22
2316: PUSH
2317: LD_INT 7
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 21
2326: PUSH
2327: LD_INT 2
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: PUSH
2334: LD_INT 58
2336: PUSH
2337: EMPTY
2338: LIST
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: LIST
2344: PPUSH
2345: CALL_OW 69
2349: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2350: LD_EXP 19
2354: PPUSH
2355: LD_VAR 0 4
2359: PUSH
2360: LD_INT 1
2362: ARRAY
2363: PPUSH
2364: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2368: LD_EXP 20
2372: PPUSH
2373: LD_VAR 0 4
2377: PUSH
2378: LD_INT 2
2380: ARRAY
2381: PPUSH
2382: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2386: LD_EXP 21
2390: PPUSH
2391: LD_VAR 0 4
2395: PUSH
2396: LD_INT 3
2398: ARRAY
2399: PPUSH
2400: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2404: LD_EXP 22
2408: PPUSH
2409: LD_VAR 0 4
2413: PUSH
2414: LD_INT 4
2416: ARRAY
2417: PPUSH
2418: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2422: LD_EXP 23
2426: PPUSH
2427: LD_VAR 0 4
2431: PUSH
2432: LD_INT 5
2434: ARRAY
2435: PPUSH
2436: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2440: LD_EXP 19
2444: PPUSH
2445: LD_INT 3
2447: PPUSH
2448: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2452: LD_EXP 20
2456: PUSH
2457: LD_EXP 23
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PPUSH
2466: LD_INT 9
2468: PPUSH
2469: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2473: LD_ADDR_VAR 0 4
2477: PUSH
2478: LD_INT 22
2480: PUSH
2481: LD_INT 7
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: PPUSH
2488: CALL_OW 69
2492: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2493: LD_VAR 0 4
2497: PPUSH
2498: LD_INT 107
2500: PPUSH
2501: LD_INT 118
2503: PPUSH
2504: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2508: LD_INT 35
2510: PPUSH
2511: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2515: LD_VAR 0 4
2519: PPUSH
2520: LD_INT 34
2522: PUSH
2523: LD_INT 49
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PPUSH
2530: CALL_OW 72
2534: PPUSH
2535: LD_EXP 18
2539: PPUSH
2540: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2544: LD_VAR 0 4
2548: PPUSH
2549: LD_INT 3
2551: PUSH
2552: LD_INT 34
2554: PUSH
2555: LD_INT 49
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PPUSH
2566: CALL_OW 72
2570: PPUSH
2571: LD_INT 107
2573: PPUSH
2574: LD_INT 118
2576: PPUSH
2577: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2581: LD_VAR 0 4
2585: PPUSH
2586: LD_INT 34
2588: PUSH
2589: LD_INT 49
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: PPUSH
2596: CALL_OW 72
2600: PUSH
2601: LD_INT 0
2603: EQUAL
2604: PUSH
2605: LD_EXP 18
2609: PPUSH
2610: CALL_OW 303
2614: OR
2615: IFFALSE 2508
// repeat wait ( 0 0$1 ) ;
2617: LD_INT 35
2619: PPUSH
2620: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2624: LD_ADDR_VAR 0 4
2628: PUSH
2629: LD_INT 22
2631: PUSH
2632: LD_INT 7
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: PUSH
2644: LD_EXP 17
2648: DIFF
2649: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2650: LD_VAR 0 4
2654: PPUSH
2655: LD_INT 107
2657: PPUSH
2658: LD_INT 118
2660: PPUSH
2661: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2665: LD_EXP 17
2669: PPUSH
2670: CALL_OW 302
2674: PUSH
2675: LD_EXP 17
2679: PPUSH
2680: CALL_OW 310
2684: NOT
2685: AND
2686: IFFALSE 2703
// ComMoveXY ( Burlak , 107 , 118 ) ;
2688: LD_EXP 17
2692: PPUSH
2693: LD_INT 107
2695: PPUSH
2696: LD_INT 118
2698: PPUSH
2699: CALL_OW 111
// until not tmp ;
2703: LD_VAR 0 4
2707: NOT
2708: IFFALSE 2617
// end ; end_of_file
2710: LD_VAR 0 1
2714: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2715: LD_EXP 31
2719: IFFALSE 2895
2721: GO 2723
2723: DISABLE
2724: LD_INT 0
2726: PPUSH
2727: PPUSH
// begin enable ;
2728: ENABLE
// rnd = 0 ;
2729: LD_ADDR_VAR 0 2
2733: PUSH
2734: LD_INT 0
2736: ST_TO_ADDR
// uc_side = 8 ;
2737: LD_ADDR_OWVAR 20
2741: PUSH
2742: LD_INT 8
2744: ST_TO_ADDR
// uc_nation = 2 ;
2745: LD_ADDR_OWVAR 21
2749: PUSH
2750: LD_INT 2
2752: ST_TO_ADDR
// hc_name =  ;
2753: LD_ADDR_OWVAR 26
2757: PUSH
2758: LD_STRING 
2760: ST_TO_ADDR
// hc_gallery =  ;
2761: LD_ADDR_OWVAR 33
2765: PUSH
2766: LD_STRING 
2768: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2769: LD_INT 0
2771: PPUSH
2772: LD_INT 4
2774: PPUSH
2775: LD_INT 10
2777: PPUSH
2778: CALL_OW 380
// un = CreateHuman ;
2782: LD_ADDR_VAR 0 1
2786: PUSH
2787: CALL_OW 44
2791: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2792: LD_VAR 0 1
2796: PPUSH
2797: LD_INT 8
2799: PUSH
2800: LD_INT 9
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 1
2809: PPUSH
2810: LD_INT 2
2812: PPUSH
2813: CALL_OW 12
2817: ARRAY
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 49
// SetTag ( un , 1 ) ;
2826: LD_VAR 0 1
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
2838: LD_ADDR_VAR 0 2
2842: PUSH
2843: LD_INT 1
2845: PPUSH
2846: LD_EXP 31
2850: PPUSH
2851: CALL_OW 12
2855: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
2856: LD_VAR 0 1
2860: PPUSH
2861: LD_EXP 31
2865: PUSH
2866: LD_VAR 0 2
2870: ARRAY
2871: PUSH
2872: LD_INT 1
2874: ARRAY
2875: PPUSH
2876: LD_EXP 31
2880: PUSH
2881: LD_VAR 0 2
2885: ARRAY
2886: PUSH
2887: LD_INT 2
2889: ARRAY
2890: PPUSH
2891: CALL_OW 158
// end ;
2895: PPOPN 2
2897: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
2898: LD_INT 22
2900: PUSH
2901: LD_INT 8
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: LD_INT 3
2910: PUSH
2911: LD_INT 61
2913: PUSH
2914: EMPTY
2915: LIST
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: LD_INT 33
2923: PUSH
2924: LD_INT 2
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 69
2940: IFFALSE 3013
2942: GO 2944
2944: DISABLE
2945: LD_INT 0
2947: PPUSH
// begin enable ;
2948: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
2949: LD_ADDR_VAR 0 1
2953: PUSH
2954: LD_INT 22
2956: PUSH
2957: LD_INT 8
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: PUSH
2964: LD_INT 3
2966: PUSH
2967: LD_INT 61
2969: PUSH
2970: EMPTY
2971: LIST
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PUSH
2977: LD_INT 33
2979: PUSH
2980: LD_INT 2
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: LIST
2991: PPUSH
2992: CALL_OW 69
2996: PUSH
2997: FOR_IN
2998: IFFALSE 3011
// Connect ( i ) ;
3000: LD_VAR 0 1
3004: PPUSH
3005: CALL 37934 0 1
3009: GO 2997
3011: POP
3012: POP
// end ; end_of_file
3013: PPOPN 1
3015: END
// every 1 do
3016: GO 3018
3018: DISABLE
// begin InGameOn ;
3019: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3023: LD_INT 22
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: LD_INT 21
3035: PUSH
3036: LD_INT 2
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: PUSH
3052: LD_INT 1
3054: ARRAY
3055: PPUSH
3056: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3060: LD_INT 22
3062: PUSH
3063: LD_INT 1
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: LD_INT 21
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 69
3088: PPUSH
3089: LD_INT 69
3091: PPUSH
3092: LD_INT 94
3094: PPUSH
3095: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3099: LD_EXP 1
3103: PPUSH
3104: LD_STRING D2-JMM-1
3106: PPUSH
3107: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3111: LD_INT 22
3113: PUSH
3114: LD_INT 1
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 21
3123: PUSH
3124: LD_INT 2
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: CALL_OW 69
3139: PUSH
3140: LD_INT 1
3142: ARRAY
3143: PPUSH
3144: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3148: LD_EXP 2
3152: PPUSH
3153: LD_STRING D2-Huck-1
3155: PPUSH
3156: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3160: LD_INT 22
3162: PUSH
3163: LD_INT 1
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 21
3172: PUSH
3173: LD_INT 2
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PPUSH
3184: CALL_OW 69
3188: PUSH
3189: LD_INT 1
3191: ARRAY
3192: PPUSH
3193: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3197: LD_EXP 1
3201: PPUSH
3202: LD_STRING D2-JMM-2
3204: PPUSH
3205: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3209: LD_INT 22
3211: PUSH
3212: LD_INT 1
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: LD_INT 21
3221: PUSH
3222: LD_INT 2
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PPUSH
3233: CALL_OW 69
3237: PUSH
3238: LD_INT 1
3240: ARRAY
3241: PPUSH
3242: CALL_OW 87
// InGameOff ;
3246: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3250: LD_STRING M1
3252: PPUSH
3253: CALL_OW 337
// SaveForQuickRestart ;
3257: CALL_OW 22
// end ;
3261: END
// every 10 10$0 do
3262: GO 3264
3264: DISABLE
// begin DialogueOn ;
3265: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3269: LD_EXP 15
3273: PPUSH
3274: LD_STRING D3-Pow-1
3276: PPUSH
3277: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3281: LD_EXP 1
3285: PPUSH
3286: LD_STRING D3-JMM-1
3288: PPUSH
3289: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3293: LD_EXP 15
3297: PPUSH
3298: LD_STRING D3-Pow-2
3300: PPUSH
3301: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3305: LD_EXP 1
3309: PPUSH
3310: LD_STRING D3-JMM-2
3312: PPUSH
3313: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3317: LD_EXP 15
3321: PPUSH
3322: LD_STRING D3-Pow-3
3324: PPUSH
3325: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3329: LD_EXP 1
3333: PPUSH
3334: LD_STRING D3-JMM-3
3336: PPUSH
3337: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3341: LD_EXP 15
3345: PPUSH
3346: LD_STRING D3-Pow-4
3348: PPUSH
3349: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3353: LD_EXP 1
3357: PPUSH
3358: LD_STRING D3-JMM-4
3360: PPUSH
3361: CALL_OW 88
// DialogueOff ;
3365: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3369: LD_STRING M2
3371: PPUSH
3372: CALL_OW 337
// wait ( 2 2$30 ) ;
3376: LD_INT 5250
3378: PPUSH
3379: CALL_OW 67
// PrepareBurlak ;
3383: CALL 1939 0 0
// BurlakArmy ;
3387: CALL 2088 0 0
// end ;
3391: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3392: LD_INT 1
3394: PPUSH
3395: LD_EXP 18
3399: PPUSH
3400: CALL_OW 292
3404: IFFALSE 3563
3406: GO 3408
3408: DISABLE
// begin DialogueOn ;
3409: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3413: LD_EXP 18
3417: PPUSH
3418: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3422: LD_INT 22
3424: PUSH
3425: LD_INT 1
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 26
3434: PUSH
3435: LD_INT 1
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: LD_INT 25
3447: PUSH
3448: LD_INT 1
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 25
3457: PUSH
3458: LD_INT 2
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: LD_INT 25
3467: PUSH
3468: LD_INT 3
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 25
3477: PUSH
3478: LD_INT 4
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PUSH
3485: LD_INT 25
3487: PUSH
3488: LD_INT 5
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: PPUSH
3508: CALL_OW 69
3512: PPUSH
3513: LD_STRING D5-Sol1-1
3515: PPUSH
3516: LD_STRING D5-FSol1-1
3518: PPUSH
3519: CALL 5850 0 3
// Say ( JMM , D5-JMM-1 ) ;
3523: LD_EXP 1
3527: PPUSH
3528: LD_STRING D5-JMM-1
3530: PPUSH
3531: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3535: LD_EXP 17
3539: PPUSH
3540: LD_STRING DAmer-Bur-1
3542: PPUSH
3543: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_STRING DAmer-JMM-1
3554: PPUSH
3555: CALL_OW 88
// DialogueOff ;
3559: CALL_OW 7
// end ;
3563: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3564: LD_INT 4
3566: PPUSH
3567: LD_INT 22
3569: PUSH
3570: LD_INT 7
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: PPUSH
3577: CALL_OW 70
3581: IFFALSE 3980
3583: GO 3585
3585: DISABLE
3586: LD_INT 0
3588: PPUSH
// begin enable ;
3589: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3590: LD_ADDR_VAR 0 1
3594: PUSH
3595: LD_INT 4
3597: PPUSH
3598: LD_INT 22
3600: PUSH
3601: LD_INT 7
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 70
3612: PUSH
3613: FOR_IN
3614: IFFALSE 3978
// begin if i = Burlak or i = Masha then
3616: LD_VAR 0 1
3620: PUSH
3621: LD_EXP 17
3625: EQUAL
3626: PUSH
3627: LD_VAR 0 1
3631: PUSH
3632: LD_EXP 18
3636: EQUAL
3637: OR
3638: IFFALSE 3785
// begin RemoveUnit ( i ) ;
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 64
// DialogueOn ;
3649: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3653: LD_EXP 1
3657: PPUSH
3658: LD_STRING D5a-JMM-1
3660: PPUSH
3661: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3665: LD_INT 22
3667: PUSH
3668: LD_INT 1
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 26
3677: PUSH
3678: LD_INT 1
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 2
3687: PUSH
3688: LD_INT 25
3690: PUSH
3691: LD_INT 1
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 25
3700: PUSH
3701: LD_INT 2
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 3
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 25
3720: PUSH
3721: LD_INT 4
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: PUSH
3728: LD_INT 25
3730: PUSH
3731: LD_INT 5
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: PPUSH
3751: CALL_OW 69
3755: PPUSH
3756: LD_STRING D5a-Sol1-1
3758: PPUSH
3759: LD_STRING D5-FSol1-1
3761: PPUSH
3762: CALL 5850 0 3
// DialogueOff ;
3766: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3770: LD_STRING M2b
3772: PPUSH
3773: CALL_OW 337
// spawnBurlak = 0 ;
3777: LD_ADDR_EXP 27
3781: PUSH
3782: LD_INT 0
3784: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
3785: LD_VAR 0 1
3789: PPUSH
3790: CALL_OW 247
3794: PUSH
3795: LD_INT 2
3797: EQUAL
3798: PUSH
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 263
3808: PUSH
3809: LD_INT 1
3811: EQUAL
3812: AND
3813: IFFALSE 3941
// begin case IsDrivenBy ( i ) of Gnyevko :
3815: LD_VAR 0 1
3819: PPUSH
3820: CALL_OW 311
3824: PUSH
3825: LD_EXP 19
3829: DOUBLE
3830: EQUAL
3831: IFTRUE 3835
3833: GO 3848
3835: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
3836: LD_INT 1
3838: PPUSH
3839: LD_STRING 13_Gnyevko_1
3841: PPUSH
3842: CALL_OW 39
3846: GO 3941
3848: LD_EXP 20
3852: DOUBLE
3853: EQUAL
3854: IFTRUE 3858
3856: GO 3871
3858: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
3859: LD_INT 1
3861: PPUSH
3862: LD_STRING 13_Titov_1
3864: PPUSH
3865: CALL_OW 39
3869: GO 3941
3871: LD_EXP 21
3875: DOUBLE
3876: EQUAL
3877: IFTRUE 3881
3879: GO 3894
3881: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
3882: LD_INT 1
3884: PPUSH
3885: LD_STRING 13_Xavier_1
3887: PPUSH
3888: CALL_OW 39
3892: GO 3941
3894: LD_EXP 22
3898: DOUBLE
3899: EQUAL
3900: IFTRUE 3904
3902: GO 3917
3904: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
3905: LD_INT 1
3907: PPUSH
3908: LD_STRING 13_Belkov_1
3910: PPUSH
3911: CALL_OW 39
3915: GO 3941
3917: LD_EXP 23
3921: DOUBLE
3922: EQUAL
3923: IFTRUE 3927
3925: GO 3940
3927: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
3928: LD_INT 1
3930: PPUSH
3931: LD_STRING 13_Lipshchin_1
3933: PPUSH
3934: CALL_OW 39
3938: GO 3941
3940: POP
// end ; if GetWeapon ( i ) = 49 then
3941: LD_VAR 0 1
3945: PPUSH
3946: CALL_OW 264
3950: PUSH
3951: LD_INT 49
3953: EQUAL
3954: IFFALSE 3967
// DestroyUnit ( i ) else
3956: LD_VAR 0 1
3960: PPUSH
3961: CALL_OW 65
3965: GO 3976
// RemoveUnit ( i ) ;
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 64
// end ;
3976: GO 3613
3978: POP
3979: POP
// end ;
3980: PPOPN 1
3982: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
3983: LD_EXP 17
3987: PPUSH
3988: CALL_OW 302
3992: PUSH
3993: LD_EXP 18
3997: PPUSH
3998: CALL_OW 256
4002: PUSH
4003: LD_INT 500
4005: LESS
4006: AND
4007: PUSH
4008: LD_EXP 18
4012: PPUSH
4013: CALL_OW 255
4017: PUSH
4018: LD_INT 7
4020: EQUAL
4021: AND
4022: IFFALSE 4042
4024: GO 4026
4026: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
4027: LD_EXP 17
4031: PPUSH
4032: LD_INT 107
4034: PPUSH
4035: LD_INT 118
4037: PPUSH
4038: CALL_OW 111
4042: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4043: LD_EXP 17
4047: PPUSH
4048: CALL_OW 301
4052: PUSH
4053: LD_EXP 27
4057: PUSH
4058: LD_INT 1
4060: EQUAL
4061: AND
4062: IFFALSE 4195
4064: GO 4066
4066: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4067: LD_EXP 1
4071: PPUSH
4072: LD_STRING D5b-JMM-1
4074: PPUSH
4075: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4079: LD_INT 22
4081: PUSH
4082: LD_INT 1
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: LD_INT 26
4091: PUSH
4092: LD_INT 1
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 2
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 1
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: LD_INT 25
4114: PUSH
4115: LD_INT 2
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 25
4124: PUSH
4125: LD_INT 3
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: PUSH
4132: LD_INT 25
4134: PUSH
4135: LD_INT 4
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 25
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PPUSH
4170: LD_STRING D5b-Sol1-1
4172: PPUSH
4173: LD_STRING 
4175: PPUSH
4176: CALL 5850 0 3
// ChangeMissionObjectives ( M2a ) ;
4180: LD_STRING M2a
4182: PPUSH
4183: CALL_OW 337
// burlakStatus = 1 ;
4187: LD_ADDR_EXP 28
4191: PUSH
4192: LD_INT 1
4194: ST_TO_ADDR
// end ;
4195: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4196: LD_EXP 2
4200: PPUSH
4201: CALL_OW 301
4205: IFFALSE 4342
4207: GO 4209
4209: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4210: LD_EXP 1
4214: PPUSH
4215: LD_STRING D6-JMM-1
4217: PPUSH
4218: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4222: LD_INT 22
4224: PUSH
4225: LD_INT 1
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: LD_INT 26
4234: PUSH
4235: LD_INT 1
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: PUSH
4242: LD_INT 2
4244: PUSH
4245: LD_INT 25
4247: PUSH
4248: LD_INT 1
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 2
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 25
4267: PUSH
4268: LD_INT 3
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: PUSH
4275: LD_INT 25
4277: PUSH
4278: LD_INT 4
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 5
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: PPUSH
4308: CALL_OW 69
4312: PPUSH
4313: LD_STRING D6-Sol1-1
4315: PPUSH
4316: LD_STRING 
4318: PPUSH
4319: CALL 5850 0 3
// Say ( JMM , D6-JMM-2 ) ;
4323: LD_EXP 1
4327: PPUSH
4328: LD_STRING D6-JMM-2
4330: PPUSH
4331: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4335: LD_STRING M1a
4337: PPUSH
4338: CALL_OW 337
// end ;
4342: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4343: LD_INT 25
4345: PPUSH
4346: LD_INT 1
4348: PPUSH
4349: CALL_OW 321
4353: PUSH
4354: LD_INT 2
4356: EQUAL
4357: IFFALSE 4374
4359: GO 4361
4361: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4362: LD_EXP 2
4366: PPUSH
4367: LD_STRING D6-Huck-2
4369: PPUSH
4370: CALL_OW 88
// end ;
4374: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4375: LD_INT 22
4377: PUSH
4378: LD_INT 1
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 2
4387: PUSH
4388: LD_INT 34
4390: PUSH
4391: LD_INT 8
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 35
4400: PUSH
4401: LD_INT 8
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PPUSH
4417: CALL_OW 69
4421: PUSH
4422: LD_INT 0
4424: GREATER
4425: IFFALSE 4617
4427: GO 4429
4429: DISABLE
4430: LD_INT 0
4432: PPUSH
4433: PPUSH
// begin enable ;
4434: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4435: LD_ADDR_VAR 0 1
4439: PUSH
4440: LD_INT 5
4442: PPUSH
4443: LD_INT 22
4445: PUSH
4446: LD_INT 1
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: PUSH
4453: LD_INT 21
4455: PUSH
4456: LD_INT 3
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 30
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 3
4475: PUSH
4476: LD_INT 57
4478: PUSH
4479: EMPTY
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PPUSH
4492: CALL_OW 70
4496: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: LD_INT 5
4504: PPUSH
4505: LD_INT 22
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 21
4517: PUSH
4518: LD_INT 3
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: LD_INT 30
4527: PUSH
4528: LD_INT 5
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 3
4537: PUSH
4538: LD_INT 57
4540: PUSH
4541: EMPTY
4542: LIST
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PPUSH
4554: CALL_OW 70
4558: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4559: LD_VAR 0 1
4563: PUSH
4564: LD_INT 0
4566: GREATER
4567: PUSH
4568: LD_VAR 0 2
4572: PUSH
4573: LD_INT 0
4575: GREATER
4576: AND
4577: IFFALSE 4617
// begin disable ;
4579: DISABLE
// DialogueOn ;
4580: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4584: LD_EXP 1
4588: PPUSH
4589: LD_STRING D7-JMM-1
4591: PPUSH
4592: CALL_OW 88
// DialogueOff ;
4596: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4600: LD_STRING M4
4602: PPUSH
4603: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4607: LD_INT 5
4609: PPUSH
4610: LD_INT 0
4612: PPUSH
4613: CALL_OW 424
// end ; end ;
4617: PPOPN 2
4619: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4620: LD_INT 6
4622: PPUSH
4623: LD_INT 22
4625: PUSH
4626: LD_INT 1
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 25
4635: PUSH
4636: LD_INT 4
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 70
4651: PUSH
4652: LD_INT 0
4654: GREATER
4655: PUSH
4656: LD_EXP 37
4660: PUSH
4661: LD_INT 1
4663: EQUAL
4664: AND
4665: PUSH
4666: LD_EXP 29
4670: PUSH
4671: LD_INT 0
4673: EQUAL
4674: AND
4675: IFFALSE 4740
4677: GO 4679
4679: DISABLE
// begin enable ;
4680: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4681: LD_ADDR_EXP 26
4685: PUSH
4686: LD_INT 6
4688: PPUSH
4689: LD_INT 22
4691: PUSH
4692: LD_INT 1
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: PUSH
4699: LD_INT 25
4701: PUSH
4702: LD_INT 4
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: PPUSH
4713: CALL_OW 70
4717: PUSH
4718: LD_INT 1
4720: ARRAY
4721: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4722: LD_INT 6
4724: PPUSH
4725: LD_INT 0
4727: PPUSH
4728: CALL_OW 424
// radationResearched = 1 ;
4732: LD_ADDR_EXP 29
4736: PUSH
4737: LD_INT 1
4739: ST_TO_ADDR
// end ;
4740: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4741: LD_EXP 26
4745: PPUSH
4746: CALL_OW 301
4750: PUSH
4751: LD_EXP 29
4755: PUSH
4756: LD_INT 1
4758: EQUAL
4759: AND
4760: IFFALSE 4796
4762: GO 4764
4764: DISABLE
// begin enable ;
4765: ENABLE
// radationResearched = 0 ;
4766: LD_ADDR_EXP 29
4770: PUSH
4771: LD_INT 0
4773: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4774: LD_INT 6
4776: PPUSH
4777: LD_INT 1
4779: PPUSH
4780: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4784: LD_EXP 1
4788: PPUSH
4789: LD_STRING D9a-JMM-1
4791: PPUSH
4792: CALL_OW 88
// end ; end_of_file
4796: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4797: LD_VAR 0 5
4801: PUSH
4802: LD_INT 8
4804: EQUAL
4805: PUSH
4806: LD_EXP 35
4810: PUSH
4811: LD_INT 0
4813: EQUAL
4814: AND
4815: IFFALSE 4868
// begin eventVar1 = 1 ;
4817: LD_ADDR_EXP 35
4821: PUSH
4822: LD_INT 1
4824: ST_TO_ADDR
// DialogueOn ;
4825: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4829: LD_EXP 1
4833: PPUSH
4834: LD_STRING D6a-JMM-1
4836: PPUSH
4837: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4841: LD_EXP 15
4845: PPUSH
4846: LD_STRING D6a-Pow-1
4848: PPUSH
4849: CALL_OW 94
// DialogueOff ;
4853: CALL_OW 7
// wait ( 3 3$0 ) ;
4857: LD_INT 6300
4859: PPUSH
4860: CALL_OW 67
// PowellSupport ;
4864: CALL 1711 0 0
// end ; end ;
4868: PPOPN 5
4870: END
// on UnitDestroyed ( un ) do begin if un = JMM then
4871: LD_VAR 0 1
4875: PUSH
4876: LD_EXP 1
4880: EQUAL
4881: IFFALSE 4890
// YouLost ( JMM ) ;
4883: LD_STRING JMM
4885: PPUSH
4886: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
4890: LD_VAR 0 1
4894: PPUSH
4895: CALL_OW 264
4899: PUSH
4900: LD_INT 31
4902: EQUAL
4903: IFFALSE 4919
// achivCounter := achivCounter + 1 ;
4905: LD_ADDR_EXP 41
4909: PUSH
4910: LD_EXP 41
4914: PUSH
4915: LD_INT 1
4917: PLUS
4918: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
4919: LD_VAR 0 1
4923: PPUSH
4924: CALL_OW 255
4928: PUSH
4929: LD_INT 1
4931: NONEQUAL
4932: PUSH
4933: LD_VAR 0 1
4937: PPUSH
4938: CALL_OW 247
4942: PUSH
4943: LD_INT 2
4945: EQUAL
4946: AND
4947: IFFALSE 4963
// destroyCounter := destroyCounter + 1 ;
4949: LD_ADDR_EXP 42
4953: PUSH
4954: LD_EXP 42
4958: PUSH
4959: LD_INT 1
4961: PLUS
4962: ST_TO_ADDR
// end ;
4963: PPOPN 1
4965: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_EXP 18
4975: EQUAL
4976: IFFALSE 4985
// SetAchievement ( ACH_MASHA ) ;
4978: LD_STRING ACH_MASHA
4980: PPUSH
4981: CALL_OW 543
// end ;
4985: PPOPN 4
4987: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4988: LD_VAR 0 1
4992: PPUSH
4993: CALL_OW 264
4997: PUSH
4998: LD_INT 8
5000: EQUAL
5001: PUSH
5002: LD_EXP 36
5006: PUSH
5007: LD_INT 0
5009: EQUAL
5010: AND
5011: IFFALSE 5080
// begin eventVar2 = 1 ;
5013: LD_ADDR_EXP 36
5017: PUSH
5018: LD_INT 1
5020: ST_TO_ADDR
// DialogueOn ;
5021: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5025: LD_EXP 1
5029: PPUSH
5030: LD_STRING D6b-JMM-1
5032: PPUSH
5033: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5037: LD_EXP 15
5041: PPUSH
5042: LD_STRING D6b-Pow-1
5044: PPUSH
5045: CALL_OW 94
// DialogueOff ;
5049: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5053: LD_INT 5
5055: PPUSH
5056: LD_INT 1
5058: PPUSH
5059: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5063: LD_INT 7
5065: PPUSH
5066: LD_INT 1
5068: PPUSH
5069: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5073: LD_STRING M3
5075: PPUSH
5076: CALL_OW 337
// end ; end ;
5080: PPOPN 2
5082: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5083: LD_VAR 0 2
5087: PPUSH
5088: LD_VAR 0 3
5092: PPUSH
5093: LD_INT 5
5095: PPUSH
5096: CALL_OW 309
5100: PUSH
5101: LD_EXP 37
5105: PUSH
5106: LD_INT 0
5108: EQUAL
5109: AND
5110: IFFALSE 5339
// begin eventVar3 = 1 ;
5112: LD_ADDR_EXP 37
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5120: LD_INT 175
5122: PPUSH
5123: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5127: LD_INT 7
5129: PPUSH
5130: LD_INT 22
5132: PUSH
5133: LD_INT 1
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 21
5142: PUSH
5143: LD_INT 2
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 34
5152: PUSH
5153: LD_INT 11
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: PPUSH
5165: CALL_OW 70
5169: PUSH
5170: LD_INT 0
5172: GREATER
5173: IFFALSE 5192
// begin radarOnSpot = 1 ;
5175: LD_ADDR_EXP 30
5179: PUSH
5180: LD_INT 1
5182: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5183: LD_STRING M3a
5185: PPUSH
5186: CALL_OW 337
// end else
5190: GO 5199
// begin ChangeMissionObjectives ( M3b ) ;
5192: LD_STRING M3b
5194: PPUSH
5195: CALL_OW 337
// end ; DialogueOn ;
5199: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5203: LD_EXP 2
5207: PPUSH
5208: LD_STRING D8-Huck-1
5210: PPUSH
5211: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5215: LD_EXP 1
5219: PPUSH
5220: LD_STRING D8-JMM-1
5222: PPUSH
5223: CALL_OW 88
// if IsOk ( Stevens ) then
5227: LD_EXP 2
5231: PPUSH
5232: CALL_OW 302
5236: IFFALSE 5298
// begin Say ( Stevens , D8-Huck-2 ) ;
5238: LD_EXP 2
5242: PPUSH
5243: LD_STRING D8-Huck-2
5245: PPUSH
5246: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5250: LD_EXP 1
5254: PPUSH
5255: LD_STRING D8-JMM-2
5257: PPUSH
5258: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5262: LD_EXP 2
5266: PPUSH
5267: LD_STRING D8-Huck-3
5269: PPUSH
5270: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5274: LD_EXP 1
5278: PPUSH
5279: LD_STRING D8-JMM-3
5281: PPUSH
5282: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5286: LD_EXP 2
5290: PPUSH
5291: LD_STRING D8-Huck-4
5293: PPUSH
5294: CALL_OW 88
// end ; DialogueOff ;
5298: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5302: LD_INT 5
5304: PPUSH
5305: LD_INT 0
5307: PPUSH
5308: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5312: LD_INT 7
5314: PPUSH
5315: LD_INT 0
5317: PPUSH
5318: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5322: LD_INT 6
5324: PPUSH
5325: LD_INT 1
5327: PPUSH
5328: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5332: LD_STRING M5
5334: PPUSH
5335: CALL_OW 337
// end ; end ;
5339: PPOPN 3
5341: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5342: LD_EXP 26
5346: PPUSH
5347: CALL_OW 302
5351: PUSH
5352: LD_VAR 0 2
5356: PUSH
5357: LD_EXP 26
5361: EQUAL
5362: AND
5363: PUSH
5364: LD_EXP 38
5368: PUSH
5369: LD_INT 0
5371: EQUAL
5372: AND
5373: PUSH
5374: LD_EXP 37
5378: PUSH
5379: LD_INT 1
5381: EQUAL
5382: AND
5383: IFFALSE 5429
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5385: LD_VAR 0 1
5389: PPUSH
5390: LD_INT 1
5392: PPUSH
5393: CALL_OW 268
5397: PUSH
5398: LD_INT 11
5400: EQUAL
5401: PUSH
5402: LD_VAR 0 1
5406: PPUSH
5407: LD_INT 2
5409: PPUSH
5410: CALL_OW 268
5414: PUSH
5415: LD_INT 11
5417: EQUAL
5418: OR
5419: IFFALSE 5429
// eventVar4 = 1 ;
5421: LD_ADDR_EXP 38
5425: PUSH
5426: LD_INT 1
5428: ST_TO_ADDR
// end ;
5429: PPOPN 2
5431: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5432: LD_INT 0
5434: PPUSH
5435: PPUSH
// begin if GetNation ( unit ) = 2 then
5436: LD_VAR 0 1
5440: PPUSH
5441: CALL_OW 248
5445: PUSH
5446: LD_INT 2
5448: EQUAL
5449: IFFALSE 5727
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5451: LD_ADDR_EXP 32
5455: PUSH
5456: LD_EXP 32
5460: PUSH
5461: LD_INT 1
5463: PLUS
5464: ST_TO_ADDR
// for i := 1 to sibDeposits do
5465: LD_ADDR_VAR 0 4
5469: PUSH
5470: DOUBLE
5471: LD_INT 1
5473: DEC
5474: ST_TO_ADDR
5475: LD_EXP 31
5479: PUSH
5480: FOR_TO
5481: IFFALSE 5583
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5483: LD_EXP 31
5487: PUSH
5488: LD_VAR 0 4
5492: ARRAY
5493: PUSH
5494: LD_INT 1
5496: ARRAY
5497: PUSH
5498: LD_VAR 0 2
5502: EQUAL
5503: PUSH
5504: LD_EXP 31
5508: PUSH
5509: LD_VAR 0 4
5513: ARRAY
5514: PUSH
5515: LD_INT 2
5517: ARRAY
5518: PUSH
5519: LD_VAR 0 3
5523: EQUAL
5524: AND
5525: IFFALSE 5581
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5527: LD_ADDR_EXP 31
5531: PUSH
5532: LD_EXP 31
5536: PPUSH
5537: LD_VAR 0 4
5541: PUSH
5542: EMPTY
5543: LIST
5544: PUSH
5545: LD_INT 1
5547: ARRAY
5548: PPUSH
5549: CALL_OW 3
5553: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5554: LD_ADDR_EXP 31
5558: PUSH
5559: LD_EXP 31
5563: PPUSH
5564: LD_VAR 0 4
5568: PUSH
5569: EMPTY
5570: LIST
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: CALL_OW 3
5580: ST_TO_ADDR
// end ;
5581: GO 5480
5583: POP
5584: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5585: LD_EXP 39
5589: PUSH
5590: LD_INT 0
5592: EQUAL
5593: PUSH
5594: LD_VAR 0 2
5598: PPUSH
5599: LD_VAR 0 3
5603: PPUSH
5604: CALL_OW 428
5608: PUSH
5609: LD_INT 22
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PPUSH
5619: CALL_OW 69
5623: IN
5624: AND
5625: IFFALSE 5727
// begin eventVar5 = 1 ;
5627: LD_ADDR_EXP 39
5631: PUSH
5632: LD_INT 1
5634: ST_TO_ADDR
// DialogueOn ;
5635: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5639: LD_EXP 2
5643: PPUSH
5644: LD_STRING D4-Sci1-1
5646: PPUSH
5647: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5651: LD_EXP 1
5655: PPUSH
5656: LD_STRING D4-JMM-1
5658: PPUSH
5659: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5663: LD_EXP 2
5667: PPUSH
5668: LD_STRING D4-Sci1-2
5670: PPUSH
5671: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5675: LD_EXP 1
5679: PPUSH
5680: LD_STRING D4-JMM-2
5682: PPUSH
5683: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5687: LD_EXP 2
5691: PPUSH
5692: LD_STRING D4-Sci1-3
5694: PPUSH
5695: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5699: LD_EXP 1
5703: PPUSH
5704: LD_STRING D4-JMM-3
5706: PPUSH
5707: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5711: LD_EXP 1
5715: PPUSH
5716: LD_STRING D4-JMM-3a
5718: PPUSH
5719: CALL_OW 88
// DialogueOff ;
5723: CALL_OW 7
// end ; end ; end ;
5727: PPOPN 5
5729: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5730: LD_VAR 0 1
5734: PPUSH
5735: CALL_OW 255
5739: PUSH
5740: LD_INT 1
5742: EQUAL
5743: PUSH
5744: LD_VAR 0 1
5748: PPUSH
5749: CALL_OW 266
5753: PUSH
5754: LD_INT 0
5756: EQUAL
5757: AND
5758: PUSH
5759: LD_INT 22
5761: PUSH
5762: LD_INT 1
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: LD_INT 21
5771: PUSH
5772: LD_INT 3
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 2
5781: PUSH
5782: LD_INT 30
5784: PUSH
5785: LD_INT 0
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 30
5794: PUSH
5795: LD_INT 1
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: PPUSH
5812: CALL_OW 69
5816: PUSH
5817: LD_INT 1
5819: EQUAL
5820: AND
5821: IFFALSE 5835
// SetBName ( building , omega ) ;
5823: LD_VAR 0 1
5827: PPUSH
5828: LD_STRING omega
5830: PPUSH
5831: CALL_OW 500
// end ;
5835: PPOPN 2
5837: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5838: LD_VAR 0 1
5842: PPUSH
5843: CALL 26114 0 1
// end ; end_of_file
5847: PPOPN 1
5849: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
5850: LD_INT 0
5852: PPUSH
5853: PPUSH
5854: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
5855: LD_ADDR_VAR 0 1
5859: PUSH
5860: LD_VAR 0 1
5864: PUSH
5865: LD_EXP 1
5869: PUSH
5870: LD_EXP 2
5874: PUSH
5875: LD_EXP 3
5879: PUSH
5880: LD_EXP 4
5884: PUSH
5885: LD_EXP 5
5889: PUSH
5890: LD_EXP 6
5894: PUSH
5895: LD_EXP 7
5899: PUSH
5900: LD_EXP 8
5904: PUSH
5905: LD_EXP 9
5909: PUSH
5910: LD_EXP 10
5914: PUSH
5915: LD_EXP 11
5919: PUSH
5920: LD_EXP 12
5924: PUSH
5925: LD_EXP 13
5929: PUSH
5930: LD_EXP 14
5934: PUSH
5935: LD_EXP 15
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: DIFF
5957: ST_TO_ADDR
// if not characters then
5958: LD_VAR 0 1
5962: NOT
5963: IFFALSE 5967
// exit ;
5965: GO 6046
// speaker := characters [ rand ( 1 , characters ) ] ;
5967: LD_ADDR_VAR 0 6
5971: PUSH
5972: LD_VAR 0 1
5976: PUSH
5977: LD_INT 1
5979: PPUSH
5980: LD_VAR 0 1
5984: PPUSH
5985: CALL_OW 12
5989: ARRAY
5990: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
5991: LD_VAR 0 6
5995: PPUSH
5996: CALL_OW 258
6000: PUSH
6001: LD_INT 1
6003: EQUAL
6004: IFFALSE 6022
// Say ( speaker , dialogMID ) else
6006: LD_VAR 0 6
6010: PPUSH
6011: LD_VAR 0 2
6015: PPUSH
6016: CALL_OW 88
6020: GO 6036
// Say ( speaker , dialogFID ) ;
6022: LD_VAR 0 6
6026: PPUSH
6027: LD_VAR 0 3
6031: PPUSH
6032: CALL_OW 88
// result := speaker ;
6036: LD_ADDR_VAR 0 4
6040: PUSH
6041: LD_VAR 0 6
6045: ST_TO_ADDR
// end ;
6046: LD_VAR 0 4
6050: RET
// export function PrepareDifficulty ; begin
6051: LD_INT 0
6053: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6054: LD_INT 5
6056: PPUSH
6057: LD_INT 8
6059: PPUSH
6060: LD_INT 2
6062: PPUSH
6063: CALL_OW 322
// if difficulty = 1 then
6067: LD_OWVAR 67
6071: PUSH
6072: LD_INT 1
6074: EQUAL
6075: IFFALSE 6194
// begin SetTech ( 66 , 8 , state_researched ) ;
6077: LD_INT 66
6079: PPUSH
6080: LD_INT 8
6082: PPUSH
6083: LD_INT 2
6085: PPUSH
6086: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6090: LD_INT 67
6092: PPUSH
6093: LD_INT 8
6095: PPUSH
6096: LD_INT 0
6098: PPUSH
6099: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6103: LD_INT 68
6105: PPUSH
6106: LD_INT 8
6108: PPUSH
6109: LD_INT 0
6111: PPUSH
6112: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6116: LD_INT 51
6118: PPUSH
6119: LD_INT 8
6121: PPUSH
6122: LD_INT 2
6124: PPUSH
6125: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6129: LD_INT 52
6131: PPUSH
6132: LD_INT 8
6134: PPUSH
6135: LD_INT 0
6137: PPUSH
6138: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6142: LD_INT 53
6144: PPUSH
6145: LD_INT 8
6147: PPUSH
6148: LD_INT 0
6150: PPUSH
6151: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6155: LD_INT 60
6157: PPUSH
6158: LD_INT 8
6160: PPUSH
6161: LD_INT 2
6163: PPUSH
6164: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6168: LD_INT 61
6170: PPUSH
6171: LD_INT 8
6173: PPUSH
6174: LD_INT 0
6176: PPUSH
6177: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6181: LD_INT 62
6183: PPUSH
6184: LD_INT 8
6186: PPUSH
6187: LD_INT 0
6189: PPUSH
6190: CALL_OW 322
// end ; if difficulty = 2 then
6194: LD_OWVAR 67
6198: PUSH
6199: LD_INT 2
6201: EQUAL
6202: IFFALSE 6321
// begin SetTech ( 66 , 8 , state_researched ) ;
6204: LD_INT 66
6206: PPUSH
6207: LD_INT 8
6209: PPUSH
6210: LD_INT 2
6212: PPUSH
6213: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6217: LD_INT 67
6219: PPUSH
6220: LD_INT 8
6222: PPUSH
6223: LD_INT 2
6225: PPUSH
6226: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6230: LD_INT 68
6232: PPUSH
6233: LD_INT 8
6235: PPUSH
6236: LD_INT 0
6238: PPUSH
6239: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6243: LD_INT 51
6245: PPUSH
6246: LD_INT 8
6248: PPUSH
6249: LD_INT 2
6251: PPUSH
6252: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6256: LD_INT 52
6258: PPUSH
6259: LD_INT 8
6261: PPUSH
6262: LD_INT 2
6264: PPUSH
6265: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6269: LD_INT 53
6271: PPUSH
6272: LD_INT 8
6274: PPUSH
6275: LD_INT 2
6277: PPUSH
6278: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6282: LD_INT 60
6284: PPUSH
6285: LD_INT 8
6287: PPUSH
6288: LD_INT 2
6290: PPUSH
6291: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6295: LD_INT 61
6297: PPUSH
6298: LD_INT 8
6300: PPUSH
6301: LD_INT 2
6303: PPUSH
6304: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6308: LD_INT 62
6310: PPUSH
6311: LD_INT 8
6313: PPUSH
6314: LD_INT 0
6316: PPUSH
6317: CALL_OW 322
// end ; if difficulty = 3 then
6321: LD_OWVAR 67
6325: PUSH
6326: LD_INT 3
6328: EQUAL
6329: IFFALSE 6448
// begin SetTech ( 66 , 8 , state_researched ) ;
6331: LD_INT 66
6333: PPUSH
6334: LD_INT 8
6336: PPUSH
6337: LD_INT 2
6339: PPUSH
6340: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6344: LD_INT 67
6346: PPUSH
6347: LD_INT 8
6349: PPUSH
6350: LD_INT 2
6352: PPUSH
6353: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6357: LD_INT 68
6359: PPUSH
6360: LD_INT 8
6362: PPUSH
6363: LD_INT 0
6365: PPUSH
6366: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6370: LD_INT 51
6372: PPUSH
6373: LD_INT 8
6375: PPUSH
6376: LD_INT 2
6378: PPUSH
6379: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6383: LD_INT 52
6385: PPUSH
6386: LD_INT 8
6388: PPUSH
6389: LD_INT 2
6391: PPUSH
6392: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6396: LD_INT 53
6398: PPUSH
6399: LD_INT 8
6401: PPUSH
6402: LD_INT 2
6404: PPUSH
6405: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6409: LD_INT 60
6411: PPUSH
6412: LD_INT 8
6414: PPUSH
6415: LD_INT 2
6417: PPUSH
6418: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6422: LD_INT 61
6424: PPUSH
6425: LD_INT 8
6427: PPUSH
6428: LD_INT 2
6430: PPUSH
6431: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6435: LD_INT 62
6437: PPUSH
6438: LD_INT 8
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 322
// end ; end ;
6448: LD_VAR 0 1
6452: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6453: LD_INT 0
6455: PPUSH
6456: PPUSH
6457: PPUSH
6458: PPUSH
6459: PPUSH
6460: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6461: LD_ADDR_VAR 0 7
6465: PUSH
6466: LD_INT 22
6468: PUSH
6469: LD_VAR 0 1
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: LD_INT 25
6480: PUSH
6481: LD_INT 9
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6497: LD_ADDR_VAR 0 8
6501: PUSH
6502: LD_INT 22
6504: PUSH
6505: LD_VAR 0 2
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 3
6516: PUSH
6517: LD_INT 21
6519: PUSH
6520: LD_INT 3
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6540: LD_ADDR_VAR 0 5
6544: PUSH
6545: LD_INT 1
6547: PPUSH
6548: LD_INT 3
6550: PPUSH
6551: CALL_OW 12
6555: ST_TO_ADDR
// for i = 1 to list do
6556: LD_ADDR_VAR 0 6
6560: PUSH
6561: DOUBLE
6562: LD_INT 1
6564: DEC
6565: ST_TO_ADDR
6566: LD_VAR 0 7
6570: PUSH
6571: FOR_TO
6572: IFFALSE 6754
// for ta in filter do
6574: LD_ADDR_VAR 0 4
6578: PUSH
6579: LD_VAR 0 8
6583: PUSH
6584: FOR_IN
6585: IFFALSE 6750
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6587: LD_VAR 0 7
6591: PUSH
6592: LD_VAR 0 6
6596: ARRAY
6597: PPUSH
6598: LD_VAR 0 4
6602: PPUSH
6603: CALL_OW 296
6607: PUSH
6608: LD_INT 13
6610: LESSEQUAL
6611: IFFALSE 6748
// begin case c of 1 :
6613: LD_VAR 0 5
6617: PUSH
6618: LD_INT 1
6620: DOUBLE
6621: EQUAL
6622: IFTRUE 6626
6624: GO 6664
6626: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6627: LD_VAR 0 7
6631: PUSH
6632: LD_VAR 0 6
6636: ARRAY
6637: PPUSH
6638: LD_VAR 0 4
6642: PPUSH
6643: CALL_OW 250
6647: PPUSH
6648: LD_VAR 0 4
6652: PPUSH
6653: CALL_OW 251
6657: PPUSH
6658: CALL_OW 154
6662: GO 6748
6664: LD_INT 2
6666: DOUBLE
6667: EQUAL
6668: IFTRUE 6672
6670: GO 6736
6672: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6673: LD_VAR 0 7
6677: PUSH
6678: LD_VAR 0 6
6682: ARRAY
6683: PPUSH
6684: LD_VAR 0 4
6688: PPUSH
6689: CALL_OW 250
6693: PUSH
6694: LD_INT 1
6696: NEG
6697: PPUSH
6698: LD_INT 1
6700: PPUSH
6701: CALL_OW 12
6705: PLUS
6706: PPUSH
6707: LD_VAR 0 4
6711: PPUSH
6712: CALL_OW 251
6716: PUSH
6717: LD_INT 1
6719: NEG
6720: PPUSH
6721: LD_INT 1
6723: PPUSH
6724: CALL_OW 12
6728: PLUS
6729: PPUSH
6730: CALL_OW 153
6734: GO 6748
6736: LD_INT 3
6738: DOUBLE
6739: EQUAL
6740: IFTRUE 6744
6742: GO 6747
6744: POP
// ; end ;
6745: GO 6748
6747: POP
// end ; end ;
6748: GO 6584
6750: POP
6751: POP
6752: GO 6571
6754: POP
6755: POP
// end ;
6756: LD_VAR 0 3
6760: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6761: LD_INT 0
6763: PPUSH
6764: PPUSH
// for i in charactersList do
6765: LD_ADDR_VAR 0 4
6769: PUSH
6770: LD_VAR 0 1
6774: PUSH
6775: FOR_IN
6776: IFFALSE 6794
// SaveCharacters ( i , ident ) ;
6778: LD_VAR 0 4
6782: PPUSH
6783: LD_VAR 0 2
6787: PPUSH
6788: CALL_OW 38
6792: GO 6775
6794: POP
6795: POP
// end ;
6796: LD_VAR 0 3
6800: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6801: LD_INT 0
6803: PPUSH
6804: PPUSH
6805: PPUSH
6806: PPUSH
6807: PPUSH
6808: PPUSH
6809: PPUSH
6810: PPUSH
6811: PPUSH
6812: PPUSH
6813: PPUSH
// for i = 1 to medicCount do
6814: LD_ADDR_VAR 0 13
6818: PUSH
6819: DOUBLE
6820: LD_INT 1
6822: DEC
6823: ST_TO_ADDR
6824: LD_VAR 0 7
6828: PUSH
6829: FOR_TO
6830: IFFALSE 6912
// begin uc_side = side ;
6832: LD_ADDR_OWVAR 20
6836: PUSH
6837: LD_VAR 0 1
6841: ST_TO_ADDR
// uc_nation = nation ;
6842: LD_ADDR_OWVAR 21
6846: PUSH
6847: LD_VAR 0 2
6851: ST_TO_ADDR
// hc_name =  ;
6852: LD_ADDR_OWVAR 26
6856: PUSH
6857: LD_STRING 
6859: ST_TO_ADDR
// hc_gallery =  ;
6860: LD_ADDR_OWVAR 33
6864: PUSH
6865: LD_STRING 
6867: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6868: LD_INT 0
6870: PPUSH
6871: LD_INT 4
6873: PPUSH
6874: LD_VAR 0 8
6878: PPUSH
6879: CALL_OW 380
// un = CreateHuman ;
6883: LD_ADDR_VAR 0 15
6887: PUSH
6888: CALL_OW 44
6892: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6893: LD_VAR 0 15
6897: PPUSH
6898: LD_VAR 0 9
6902: PPUSH
6903: LD_INT 0
6905: PPUSH
6906: CALL_OW 49
// end ;
6910: GO 6829
6912: POP
6913: POP
// for i = 1 to soldierCount do
6914: LD_ADDR_VAR 0 13
6918: PUSH
6919: DOUBLE
6920: LD_INT 1
6922: DEC
6923: ST_TO_ADDR
6924: LD_VAR 0 3
6928: PUSH
6929: FOR_TO
6930: IFFALSE 7012
// begin uc_side = side ;
6932: LD_ADDR_OWVAR 20
6936: PUSH
6937: LD_VAR 0 1
6941: ST_TO_ADDR
// uc_nation = nation ;
6942: LD_ADDR_OWVAR 21
6946: PUSH
6947: LD_VAR 0 2
6951: ST_TO_ADDR
// hc_name =  ;
6952: LD_ADDR_OWVAR 26
6956: PUSH
6957: LD_STRING 
6959: ST_TO_ADDR
// hc_gallery =  ;
6960: LD_ADDR_OWVAR 33
6964: PUSH
6965: LD_STRING 
6967: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6968: LD_INT 0
6970: PPUSH
6971: LD_INT 1
6973: PPUSH
6974: LD_VAR 0 8
6978: PPUSH
6979: CALL_OW 380
// un = CreateHuman ;
6983: LD_ADDR_VAR 0 15
6987: PUSH
6988: CALL_OW 44
6992: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6993: LD_VAR 0 15
6997: PPUSH
6998: LD_VAR 0 9
7002: PPUSH
7003: LD_INT 0
7005: PPUSH
7006: CALL_OW 49
// end ;
7010: GO 6929
7012: POP
7013: POP
// for i = 1 to sniperCount do
7014: LD_ADDR_VAR 0 13
7018: PUSH
7019: DOUBLE
7020: LD_INT 1
7022: DEC
7023: ST_TO_ADDR
7024: LD_VAR 0 4
7028: PUSH
7029: FOR_TO
7030: IFFALSE 7112
// begin uc_side = side ;
7032: LD_ADDR_OWVAR 20
7036: PUSH
7037: LD_VAR 0 1
7041: ST_TO_ADDR
// uc_nation = nation ;
7042: LD_ADDR_OWVAR 21
7046: PUSH
7047: LD_VAR 0 2
7051: ST_TO_ADDR
// hc_name =  ;
7052: LD_ADDR_OWVAR 26
7056: PUSH
7057: LD_STRING 
7059: ST_TO_ADDR
// hc_gallery =  ;
7060: LD_ADDR_OWVAR 33
7064: PUSH
7065: LD_STRING 
7067: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7068: LD_INT 0
7070: PPUSH
7071: LD_INT 5
7073: PPUSH
7074: LD_VAR 0 8
7078: PPUSH
7079: CALL_OW 380
// un = CreateHuman ;
7083: LD_ADDR_VAR 0 15
7087: PUSH
7088: CALL_OW 44
7092: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7093: LD_VAR 0 15
7097: PPUSH
7098: LD_VAR 0 9
7102: PPUSH
7103: LD_INT 0
7105: PPUSH
7106: CALL_OW 49
// end ;
7110: GO 7029
7112: POP
7113: POP
// for i = 1 to bazookCount do
7114: LD_ADDR_VAR 0 13
7118: PUSH
7119: DOUBLE
7120: LD_INT 1
7122: DEC
7123: ST_TO_ADDR
7124: LD_VAR 0 5
7128: PUSH
7129: FOR_TO
7130: IFFALSE 7212
// begin uc_side = side ;
7132: LD_ADDR_OWVAR 20
7136: PUSH
7137: LD_VAR 0 1
7141: ST_TO_ADDR
// uc_nation = nation ;
7142: LD_ADDR_OWVAR 21
7146: PUSH
7147: LD_VAR 0 2
7151: ST_TO_ADDR
// hc_name =  ;
7152: LD_ADDR_OWVAR 26
7156: PUSH
7157: LD_STRING 
7159: ST_TO_ADDR
// hc_gallery =  ;
7160: LD_ADDR_OWVAR 33
7164: PUSH
7165: LD_STRING 
7167: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7168: LD_INT 0
7170: PPUSH
7171: LD_INT 9
7173: PPUSH
7174: LD_VAR 0 8
7178: PPUSH
7179: CALL_OW 380
// un = CreateHuman ;
7183: LD_ADDR_VAR 0 15
7187: PUSH
7188: CALL_OW 44
7192: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7193: LD_VAR 0 15
7197: PPUSH
7198: LD_VAR 0 9
7202: PPUSH
7203: LD_INT 0
7205: PPUSH
7206: CALL_OW 49
// end ;
7210: GO 7129
7212: POP
7213: POP
// for i = 1 to mortalCount do
7214: LD_ADDR_VAR 0 13
7218: PUSH
7219: DOUBLE
7220: LD_INT 1
7222: DEC
7223: ST_TO_ADDR
7224: LD_VAR 0 6
7228: PUSH
7229: FOR_TO
7230: IFFALSE 7312
// begin uc_side = side ;
7232: LD_ADDR_OWVAR 20
7236: PUSH
7237: LD_VAR 0 1
7241: ST_TO_ADDR
// uc_nation = nation ;
7242: LD_ADDR_OWVAR 21
7246: PUSH
7247: LD_VAR 0 2
7251: ST_TO_ADDR
// hc_name =  ;
7252: LD_ADDR_OWVAR 26
7256: PUSH
7257: LD_STRING 
7259: ST_TO_ADDR
// hc_gallery =  ;
7260: LD_ADDR_OWVAR 33
7264: PUSH
7265: LD_STRING 
7267: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7268: LD_INT 0
7270: PPUSH
7271: LD_INT 8
7273: PPUSH
7274: LD_VAR 0 8
7278: PPUSH
7279: CALL_OW 380
// un = CreateHuman ;
7283: LD_ADDR_VAR 0 15
7287: PUSH
7288: CALL_OW 44
7292: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7293: LD_VAR 0 15
7297: PPUSH
7298: LD_VAR 0 9
7302: PPUSH
7303: LD_INT 0
7305: PPUSH
7306: CALL_OW 49
// end ;
7310: GO 7229
7312: POP
7313: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7314: LD_ADDR_VAR 0 17
7318: PUSH
7319: LD_INT 22
7321: PUSH
7322: LD_VAR 0 1
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 25
7333: PUSH
7334: LD_INT 4
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PPUSH
7345: CALL_OW 69
7349: ST_TO_ADDR
// for i in medic_list do
7350: LD_ADDR_VAR 0 13
7354: PUSH
7355: LD_VAR 0 17
7359: PUSH
7360: FOR_IN
7361: IFFALSE 7396
// if GetTag ( i ) = 1 then
7363: LD_VAR 0 13
7367: PPUSH
7368: CALL_OW 110
7372: PUSH
7373: LD_INT 1
7375: EQUAL
7376: IFFALSE 7394
// medic_list := medic_list diff i ;
7378: LD_ADDR_VAR 0 17
7382: PUSH
7383: LD_VAR 0 17
7387: PUSH
7388: LD_VAR 0 13
7392: DIFF
7393: ST_TO_ADDR
7394: GO 7360
7396: POP
7397: POP
// for i in medic_list do
7398: LD_ADDR_VAR 0 13
7402: PUSH
7403: LD_VAR 0 17
7407: PUSH
7408: FOR_IN
7409: IFFALSE 7427
// ComMoveToArea ( i , healArea ) ;
7411: LD_VAR 0 13
7415: PPUSH
7416: LD_VAR 0 10
7420: PPUSH
7421: CALL_OW 113
7425: GO 7408
7427: POP
7428: POP
// repeat wait ( 0 0$1 ) ;
7429: LD_INT 35
7431: PPUSH
7432: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7436: LD_ADDR_VAR 0 16
7440: PUSH
7441: LD_INT 22
7443: PUSH
7444: LD_VAR 0 1
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 1
7455: PUSH
7456: LD_INT 3
7458: PUSH
7459: LD_INT 24
7461: PUSH
7462: LD_INT 550
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 24
7475: PUSH
7476: LD_INT 250
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: LIST
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PPUSH
7492: CALL_OW 69
7496: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7497: LD_ADDR_VAR 0 18
7501: PUSH
7502: LD_INT 22
7504: PUSH
7505: LD_VAR 0 1
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 25
7519: PUSH
7520: LD_INT 1
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PUSH
7527: LD_INT 25
7529: PUSH
7530: LD_INT 5
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 25
7539: PUSH
7540: LD_INT 8
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 25
7549: PUSH
7550: LD_INT 9
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 24
7566: PUSH
7567: LD_INT 1000
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: PPUSH
7579: CALL_OW 69
7583: ST_TO_ADDR
// if medicCount > 0 then
7584: LD_VAR 0 7
7588: PUSH
7589: LD_INT 0
7591: GREATER
7592: IFFALSE 7666
// begin if damageUnit_list > 0 then
7594: LD_VAR 0 16
7598: PUSH
7599: LD_INT 0
7601: GREATER
7602: IFFALSE 7666
// begin for i in damageUnit_list do
7604: LD_ADDR_VAR 0 13
7608: PUSH
7609: LD_VAR 0 16
7613: PUSH
7614: FOR_IN
7615: IFFALSE 7664
// begin ComMoveToArea ( i , healArea ) ;
7617: LD_VAR 0 13
7621: PPUSH
7622: LD_VAR 0 10
7626: PPUSH
7627: CALL_OW 113
// for j in medic_list do
7631: LD_ADDR_VAR 0 14
7635: PUSH
7636: LD_VAR 0 17
7640: PUSH
7641: FOR_IN
7642: IFFALSE 7660
// AddComHeal ( j , i ) ;
7644: LD_VAR 0 14
7648: PPUSH
7649: LD_VAR 0 13
7653: PPUSH
7654: CALL_OW 188
7658: GO 7641
7660: POP
7661: POP
// end ;
7662: GO 7614
7664: POP
7665: POP
// end ; end ; for i in soldiersOK_list do
7666: LD_ADDR_VAR 0 13
7670: PUSH
7671: LD_VAR 0 18
7675: PUSH
7676: FOR_IN
7677: IFFALSE 7853
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7679: LD_ADDR_VAR 0 21
7683: PUSH
7684: LD_INT 22
7686: PUSH
7687: LD_VAR 0 11
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PPUSH
7696: CALL_OW 69
7700: PPUSH
7701: LD_VAR 0 13
7705: PPUSH
7706: CALL_OW 74
7710: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7711: LD_ADDR_VAR 0 22
7715: PUSH
7716: LD_INT 22
7718: PUSH
7719: LD_VAR 0 11
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 2
7730: PUSH
7731: LD_INT 59
7733: PUSH
7734: EMPTY
7735: LIST
7736: PUSH
7737: LD_INT 21
7739: PUSH
7740: LD_INT 1
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 21
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: PPUSH
7770: CALL_OW 69
7774: PPUSH
7775: LD_VAR 0 13
7779: PPUSH
7780: CALL_OW 74
7784: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7785: LD_VAR 0 13
7789: PPUSH
7790: LD_VAR 0 21
7794: PPUSH
7795: CALL_OW 296
7799: PUSH
7800: LD_INT 8
7802: PLUS
7803: PUSH
7804: LD_VAR 0 13
7808: PPUSH
7809: LD_VAR 0 22
7813: PPUSH
7814: CALL_OW 296
7818: LESS
7819: IFFALSE 7837
// begin ComAttackUnit ( i , target1 ) ;
7821: LD_VAR 0 13
7825: PPUSH
7826: LD_VAR 0 21
7830: PPUSH
7831: CALL_OW 115
// end else
7835: GO 7851
// begin ComAttackUnit ( i , target2 ) ;
7837: LD_VAR 0 13
7841: PPUSH
7842: LD_VAR 0 22
7846: PPUSH
7847: CALL_OW 115
// end ; end ;
7851: GO 7676
7853: POP
7854: POP
// until soldiersOK_list = [ ] ;
7855: LD_VAR 0 18
7859: PUSH
7860: EMPTY
7861: EQUAL
7862: IFFALSE 7429
// end ;
7864: LD_VAR 0 12
7868: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7869: LD_INT 0
7871: PPUSH
7872: PPUSH
7873: PPUSH
7874: PPUSH
7875: PPUSH
7876: PPUSH
7877: PPUSH
7878: PPUSH
7879: PPUSH
7880: PPUSH
7881: PPUSH
// amChassisTab = [ ] ;
7882: LD_ADDR_VAR 0 19
7886: PUSH
7887: EMPTY
7888: ST_TO_ADDR
// arChassisTab = [ ] ;
7889: LD_ADDR_VAR 0 18
7893: PUSH
7894: EMPTY
7895: ST_TO_ADDR
// ruChassisTab = [ ] ;
7896: LD_ADDR_VAR 0 17
7900: PUSH
7901: EMPTY
7902: ST_TO_ADDR
// for i = 1 to vehCount do
7903: LD_ADDR_VAR 0 13
7907: PUSH
7908: DOUBLE
7909: LD_INT 1
7911: DEC
7912: ST_TO_ADDR
7913: LD_VAR 0 3
7917: PUSH
7918: FOR_TO
7919: IFFALSE 9343
// begin wait ( 0 0$01 ) ;
7921: LD_INT 35
7923: PPUSH
7924: CALL_OW 67
// if nation = 1 then
7928: LD_VAR 0 5
7932: PUSH
7933: LD_INT 1
7935: EQUAL
7936: IFFALSE 8417
// begin uc_side = side ;
7938: LD_ADDR_OWVAR 20
7942: PUSH
7943: LD_VAR 0 2
7947: ST_TO_ADDR
// uc_nation = nation ;
7948: LD_ADDR_OWVAR 21
7952: PUSH
7953: LD_VAR 0 5
7957: ST_TO_ADDR
// vc_engine = vehengine ;
7958: LD_ADDR_OWVAR 39
7962: PUSH
7963: LD_VAR 0 6
7967: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7968: LD_ADDR_OWVAR 40
7972: PUSH
7973: LD_VAR 0 10
7977: PUSH
7978: LD_INT 1
7980: PPUSH
7981: LD_VAR 0 10
7985: PPUSH
7986: CALL_OW 12
7990: ARRAY
7991: ST_TO_ADDR
// for j = 1 to AMWeapon do
7992: LD_ADDR_VAR 0 14
7996: PUSH
7997: DOUBLE
7998: LD_INT 1
8000: DEC
8001: ST_TO_ADDR
8002: LD_VAR 0 10
8006: PUSH
8007: FOR_TO
8008: IFFALSE 8309
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8010: LD_VAR 0 10
8014: PUSH
8015: LD_VAR 0 14
8019: ARRAY
8020: PUSH
8021: LD_INT 2
8023: EQUAL
8024: PUSH
8025: LD_VAR 0 10
8029: PUSH
8030: LD_VAR 0 14
8034: ARRAY
8035: PUSH
8036: LD_INT 3
8038: EQUAL
8039: OR
8040: IFFALSE 8093
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8042: LD_ADDR_VAR 0 19
8046: PUSH
8047: LD_INT 1
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: LD_INT 3
8055: PUSH
8056: LD_INT 4
8058: PUSH
8059: LD_INT 5
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8069: LD_ADDR_OWVAR 37
8073: PUSH
8074: LD_VAR 0 19
8078: PUSH
8079: LD_INT 1
8081: PPUSH
8082: LD_VAR 0 19
8086: PPUSH
8087: CALL_OW 12
8091: ARRAY
8092: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8093: LD_VAR 0 10
8097: PUSH
8098: LD_VAR 0 14
8102: ARRAY
8103: PUSH
8104: LD_INT 4
8106: EQUAL
8107: PUSH
8108: LD_VAR 0 10
8112: PUSH
8113: LD_VAR 0 14
8117: ARRAY
8118: PUSH
8119: LD_INT 5
8121: EQUAL
8122: OR
8123: PUSH
8124: LD_VAR 0 10
8128: PUSH
8129: LD_VAR 0 14
8133: ARRAY
8134: PUSH
8135: LD_INT 9
8137: EQUAL
8138: OR
8139: PUSH
8140: LD_VAR 0 10
8144: PUSH
8145: LD_VAR 0 14
8149: ARRAY
8150: PUSH
8151: LD_INT 11
8153: EQUAL
8154: OR
8155: PUSH
8156: LD_VAR 0 10
8160: PUSH
8161: LD_VAR 0 14
8165: ARRAY
8166: PUSH
8167: LD_INT 7
8169: EQUAL
8170: OR
8171: IFFALSE 8220
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8173: LD_ADDR_VAR 0 19
8177: PUSH
8178: LD_INT 2
8180: PUSH
8181: LD_INT 3
8183: PUSH
8184: LD_INT 4
8186: PUSH
8187: LD_INT 5
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8196: LD_ADDR_OWVAR 37
8200: PUSH
8201: LD_VAR 0 19
8205: PUSH
8206: LD_INT 1
8208: PPUSH
8209: LD_VAR 0 19
8213: PPUSH
8214: CALL_OW 12
8218: ARRAY
8219: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8220: LD_VAR 0 10
8224: PUSH
8225: LD_VAR 0 14
8229: ARRAY
8230: PUSH
8231: LD_INT 8
8233: EQUAL
8234: PUSH
8235: LD_VAR 0 10
8239: PUSH
8240: LD_VAR 0 14
8244: ARRAY
8245: PUSH
8246: LD_INT 6
8248: EQUAL
8249: OR
8250: PUSH
8251: LD_VAR 0 10
8255: PUSH
8256: LD_VAR 0 14
8260: ARRAY
8261: PUSH
8262: LD_INT 10
8264: EQUAL
8265: OR
8266: IFFALSE 8307
// begin amChassisTab = [ 4 , 5 ] ;
8268: LD_ADDR_VAR 0 19
8272: PUSH
8273: LD_INT 4
8275: PUSH
8276: LD_INT 5
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8283: LD_ADDR_OWVAR 37
8287: PUSH
8288: LD_VAR 0 19
8292: PUSH
8293: LD_INT 1
8295: PPUSH
8296: LD_VAR 0 19
8300: PPUSH
8301: CALL_OW 12
8305: ARRAY
8306: ST_TO_ADDR
// end ; end ;
8307: GO 8007
8309: POP
8310: POP
// veh = CreateVehicle ;
8311: LD_ADDR_VAR 0 16
8315: PUSH
8316: CALL_OW 45
8320: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8321: LD_VAR 0 16
8325: PPUSH
8326: LD_VAR 0 1
8330: PPUSH
8331: LD_INT 0
8333: PPUSH
8334: CALL_OW 49
// if vc_control = 1 then
8338: LD_OWVAR 38
8342: PUSH
8343: LD_INT 1
8345: EQUAL
8346: IFFALSE 8403
// begin hc_gallery =  ;
8348: LD_ADDR_OWVAR 33
8352: PUSH
8353: LD_STRING 
8355: ST_TO_ADDR
// hc_name =  ;
8356: LD_ADDR_OWVAR 26
8360: PUSH
8361: LD_STRING 
8363: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8364: LD_INT 0
8366: PPUSH
8367: LD_INT 3
8369: PPUSH
8370: LD_VAR 0 4
8374: PPUSH
8375: CALL_OW 380
// un = CreateHuman ;
8379: LD_ADDR_VAR 0 15
8383: PUSH
8384: CALL_OW 44
8388: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8389: LD_VAR 0 15
8393: PPUSH
8394: LD_VAR 0 16
8398: PPUSH
8399: CALL_OW 52
// end ; i = i + 1 ;
8403: LD_ADDR_VAR 0 13
8407: PUSH
8408: LD_VAR 0 13
8412: PUSH
8413: LD_INT 1
8415: PLUS
8416: ST_TO_ADDR
// end ; if nation = 2 then
8417: LD_VAR 0 5
8421: PUSH
8422: LD_INT 2
8424: EQUAL
8425: IFFALSE 8927
// begin uc_side = side ;
8427: LD_ADDR_OWVAR 20
8431: PUSH
8432: LD_VAR 0 2
8436: ST_TO_ADDR
// uc_nation = nation ;
8437: LD_ADDR_OWVAR 21
8441: PUSH
8442: LD_VAR 0 5
8446: ST_TO_ADDR
// vc_engine = vehengine ;
8447: LD_ADDR_OWVAR 39
8451: PUSH
8452: LD_VAR 0 6
8456: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8457: LD_INT 22
8459: PUSH
8460: LD_VAR 0 2
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 21
8471: PUSH
8472: LD_INT 2
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 33
8481: PUSH
8482: LD_INT 2
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 50
8491: PUSH
8492: EMPTY
8493: LIST
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: PPUSH
8501: CALL_OW 69
8505: PUSH
8506: LD_INT 8
8508: LESSEQUAL
8509: IFFALSE 8537
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8511: LD_ADDR_OWVAR 38
8515: PUSH
8516: LD_VAR 0 7
8520: PUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_VAR 0 7
8528: PPUSH
8529: CALL_OW 12
8533: ARRAY
8534: ST_TO_ADDR
8535: GO 8545
// vc_control = control_apeman ;
8537: LD_ADDR_OWVAR 38
8541: PUSH
8542: LD_INT 5
8544: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8545: LD_ADDR_OWVAR 40
8549: PUSH
8550: LD_VAR 0 9
8554: PUSH
8555: LD_INT 1
8557: PPUSH
8558: LD_VAR 0 9
8562: PPUSH
8563: CALL_OW 12
8567: ARRAY
8568: ST_TO_ADDR
// for j = 1 to ARWeapons do
8569: LD_ADDR_VAR 0 14
8573: PUSH
8574: DOUBLE
8575: LD_INT 1
8577: DEC
8578: ST_TO_ADDR
8579: LD_VAR 0 9
8583: PUSH
8584: FOR_TO
8585: IFFALSE 8819
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8587: LD_VAR 0 9
8591: PUSH
8592: LD_VAR 0 14
8596: ARRAY
8597: PUSH
8598: LD_INT 24
8600: EQUAL
8601: PUSH
8602: LD_VAR 0 9
8606: PUSH
8607: LD_VAR 0 14
8611: ARRAY
8612: PUSH
8613: LD_INT 22
8615: EQUAL
8616: OR
8617: PUSH
8618: LD_VAR 0 9
8622: PUSH
8623: LD_VAR 0 14
8627: ARRAY
8628: PUSH
8629: LD_INT 23
8631: EQUAL
8632: OR
8633: PUSH
8634: LD_VAR 0 9
8638: PUSH
8639: LD_VAR 0 14
8643: ARRAY
8644: PUSH
8645: LD_INT 30
8647: EQUAL
8648: OR
8649: IFFALSE 8698
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8651: LD_ADDR_VAR 0 18
8655: PUSH
8656: LD_INT 11
8658: PUSH
8659: LD_INT 12
8661: PUSH
8662: LD_INT 13
8664: PUSH
8665: LD_INT 14
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8674: LD_ADDR_OWVAR 37
8678: PUSH
8679: LD_VAR 0 18
8683: PUSH
8684: LD_INT 1
8686: PPUSH
8687: LD_VAR 0 18
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8698: LD_VAR 0 9
8702: PUSH
8703: LD_VAR 0 14
8707: ARRAY
8708: PUSH
8709: LD_INT 29
8711: EQUAL
8712: PUSH
8713: LD_VAR 0 9
8717: PUSH
8718: LD_VAR 0 14
8722: ARRAY
8723: PUSH
8724: LD_INT 28
8726: EQUAL
8727: OR
8728: PUSH
8729: LD_VAR 0 9
8733: PUSH
8734: LD_VAR 0 14
8738: ARRAY
8739: PUSH
8740: LD_INT 27
8742: EQUAL
8743: OR
8744: PUSH
8745: LD_VAR 0 9
8749: PUSH
8750: LD_VAR 0 14
8754: ARRAY
8755: PUSH
8756: LD_INT 26
8758: EQUAL
8759: OR
8760: PUSH
8761: LD_VAR 0 9
8765: PUSH
8766: LD_VAR 0 14
8770: ARRAY
8771: PUSH
8772: LD_INT 25
8774: EQUAL
8775: OR
8776: IFFALSE 8817
// begin arChassisTab = [ 13 , 14 ] ;
8778: LD_ADDR_VAR 0 18
8782: PUSH
8783: LD_INT 13
8785: PUSH
8786: LD_INT 14
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8793: LD_ADDR_OWVAR 37
8797: PUSH
8798: LD_VAR 0 18
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_VAR 0 18
8810: PPUSH
8811: CALL_OW 12
8815: ARRAY
8816: ST_TO_ADDR
// end ; end ;
8817: GO 8584
8819: POP
8820: POP
// veh = CreateVehicle ;
8821: LD_ADDR_VAR 0 16
8825: PUSH
8826: CALL_OW 45
8830: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8831: LD_VAR 0 16
8835: PPUSH
8836: LD_VAR 0 1
8840: PPUSH
8841: LD_INT 0
8843: PPUSH
8844: CALL_OW 49
// if vc_control = 1 then
8848: LD_OWVAR 38
8852: PUSH
8853: LD_INT 1
8855: EQUAL
8856: IFFALSE 8913
// begin hc_gallery =  ;
8858: LD_ADDR_OWVAR 33
8862: PUSH
8863: LD_STRING 
8865: ST_TO_ADDR
// hc_name =  ;
8866: LD_ADDR_OWVAR 26
8870: PUSH
8871: LD_STRING 
8873: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8874: LD_INT 0
8876: PPUSH
8877: LD_INT 3
8879: PPUSH
8880: LD_VAR 0 4
8884: PPUSH
8885: CALL_OW 380
// un = CreateHuman ;
8889: LD_ADDR_VAR 0 15
8893: PUSH
8894: CALL_OW 44
8898: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8899: LD_VAR 0 15
8903: PPUSH
8904: LD_VAR 0 16
8908: PPUSH
8909: CALL_OW 52
// end ; i = i + 1 ;
8913: LD_ADDR_VAR 0 13
8917: PUSH
8918: LD_VAR 0 13
8922: PUSH
8923: LD_INT 1
8925: PLUS
8926: ST_TO_ADDR
// end ; if nation = 3 then
8927: LD_VAR 0 5
8931: PUSH
8932: LD_INT 3
8934: EQUAL
8935: IFFALSE 9341
// begin uc_side = side ;
8937: LD_ADDR_OWVAR 20
8941: PUSH
8942: LD_VAR 0 2
8946: ST_TO_ADDR
// uc_nation = nation ;
8947: LD_ADDR_OWVAR 21
8951: PUSH
8952: LD_VAR 0 5
8956: ST_TO_ADDR
// vc_engine = vehengine ;
8957: LD_ADDR_OWVAR 39
8961: PUSH
8962: LD_VAR 0 6
8966: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
8967: LD_ADDR_OWVAR 38
8971: PUSH
8972: LD_VAR 0 7
8976: PUSH
8977: LD_INT 1
8979: PPUSH
8980: LD_VAR 0 7
8984: PPUSH
8985: CALL_OW 12
8989: ARRAY
8990: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8991: LD_ADDR_OWVAR 40
8995: PUSH
8996: LD_VAR 0 8
9000: PUSH
9001: LD_INT 1
9003: PPUSH
9004: LD_VAR 0 8
9008: PPUSH
9009: CALL_OW 12
9013: ARRAY
9014: ST_TO_ADDR
// for j = 1 to RuWeapons do
9015: LD_ADDR_VAR 0 14
9019: PUSH
9020: DOUBLE
9021: LD_INT 1
9023: DEC
9024: ST_TO_ADDR
9025: LD_VAR 0 8
9029: PUSH
9030: FOR_TO
9031: IFFALSE 9217
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9033: LD_VAR 0 8
9037: PUSH
9038: LD_VAR 0 14
9042: ARRAY
9043: PUSH
9044: LD_INT 42
9046: EQUAL
9047: PUSH
9048: LD_VAR 0 8
9052: PUSH
9053: LD_VAR 0 14
9057: ARRAY
9058: PUSH
9059: LD_INT 43
9061: EQUAL
9062: OR
9063: PUSH
9064: LD_VAR 0 8
9068: PUSH
9069: LD_VAR 0 14
9073: ARRAY
9074: PUSH
9075: LD_INT 44
9077: EQUAL
9078: OR
9079: PUSH
9080: LD_VAR 0 8
9084: PUSH
9085: LD_VAR 0 14
9089: ARRAY
9090: PUSH
9091: LD_INT 45
9093: EQUAL
9094: OR
9095: PUSH
9096: LD_VAR 0 8
9100: PUSH
9101: LD_VAR 0 14
9105: ARRAY
9106: PUSH
9107: LD_INT 49
9109: EQUAL
9110: OR
9111: IFFALSE 9148
// begin ruChassisTab = [ 24 ] ;
9113: LD_ADDR_VAR 0 17
9117: PUSH
9118: LD_INT 24
9120: PUSH
9121: EMPTY
9122: LIST
9123: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9124: LD_ADDR_OWVAR 37
9128: PUSH
9129: LD_VAR 0 17
9133: PUSH
9134: LD_INT 1
9136: PPUSH
9137: LD_VAR 0 17
9141: PPUSH
9142: CALL_OW 12
9146: ARRAY
9147: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9148: LD_VAR 0 8
9152: PUSH
9153: LD_VAR 0 14
9157: ARRAY
9158: PUSH
9159: LD_INT 46
9161: EQUAL
9162: PUSH
9163: LD_VAR 0 8
9167: PUSH
9168: LD_VAR 0 14
9172: ARRAY
9173: PUSH
9174: LD_INT 47
9176: EQUAL
9177: OR
9178: IFFALSE 9215
// begin ruChassisTab = [ 24 ] ;
9180: LD_ADDR_VAR 0 17
9184: PUSH
9185: LD_INT 24
9187: PUSH
9188: EMPTY
9189: LIST
9190: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9191: LD_ADDR_OWVAR 37
9195: PUSH
9196: LD_VAR 0 17
9200: PUSH
9201: LD_INT 1
9203: PPUSH
9204: LD_VAR 0 17
9208: PPUSH
9209: CALL_OW 12
9213: ARRAY
9214: ST_TO_ADDR
// end ; end ;
9215: GO 9030
9217: POP
9218: POP
// veh = CreateVehicle ;
9219: LD_ADDR_VAR 0 16
9223: PUSH
9224: CALL_OW 45
9228: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9229: LD_VAR 0 16
9233: PPUSH
9234: LD_VAR 0 1
9238: PPUSH
9239: LD_INT 0
9241: PPUSH
9242: CALL_OW 49
// if vc_control = 1 then
9246: LD_OWVAR 38
9250: PUSH
9251: LD_INT 1
9253: EQUAL
9254: IFFALSE 9341
// begin if uc_side = 8 then
9256: LD_OWVAR 20
9260: PUSH
9261: LD_INT 8
9263: EQUAL
9264: IFFALSE 9276
// uc_nation = 2 else
9266: LD_ADDR_OWVAR 21
9270: PUSH
9271: LD_INT 2
9273: ST_TO_ADDR
9274: GO 9286
// uc_nation = nation ;
9276: LD_ADDR_OWVAR 21
9280: PUSH
9281: LD_VAR 0 5
9285: ST_TO_ADDR
// hc_gallery =  ;
9286: LD_ADDR_OWVAR 33
9290: PUSH
9291: LD_STRING 
9293: ST_TO_ADDR
// hc_name =  ;
9294: LD_ADDR_OWVAR 26
9298: PUSH
9299: LD_STRING 
9301: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9302: LD_INT 0
9304: PPUSH
9305: LD_INT 3
9307: PPUSH
9308: LD_VAR 0 4
9312: PPUSH
9313: CALL_OW 380
// un = CreateHuman ;
9317: LD_ADDR_VAR 0 15
9321: PUSH
9322: CALL_OW 44
9326: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9327: LD_VAR 0 15
9331: PPUSH
9332: LD_VAR 0 16
9336: PPUSH
9337: CALL_OW 52
// end ; end ; end ;
9341: GO 7918
9343: POP
9344: POP
// repeat wait ( 0 0$1 ) ;
9345: LD_INT 35
9347: PPUSH
9348: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9352: LD_ADDR_VAR 0 20
9356: PUSH
9357: LD_INT 22
9359: PUSH
9360: LD_VAR 0 2
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 21
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PUSH
9379: LD_INT 24
9381: PUSH
9382: LD_INT 250
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 2
9391: PUSH
9392: LD_INT 34
9394: PUSH
9395: LD_INT 25
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 34
9404: PUSH
9405: LD_INT 26
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 34
9414: PUSH
9415: LD_INT 27
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: LD_INT 34
9424: PUSH
9425: LD_INT 28
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 34
9434: PUSH
9435: LD_INT 29
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: LD_INT 34
9444: PUSH
9445: LD_INT 46
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 34
9454: PUSH
9455: LD_INT 44
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 34
9464: PUSH
9465: LD_INT 45
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 34
9474: PUSH
9475: LD_INT 47
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: PPUSH
9500: CALL_OW 69
9504: ST_TO_ADDR
// if vehicleOK_list > 0 then
9505: LD_VAR 0 20
9509: PUSH
9510: LD_INT 0
9512: GREATER
9513: IFFALSE 9732
// begin for i in vehicleOK_list do
9515: LD_ADDR_VAR 0 13
9519: PUSH
9520: LD_VAR 0 20
9524: PUSH
9525: FOR_IN
9526: IFFALSE 9730
// begin if GetSide ( i ) <> side then
9528: LD_VAR 0 13
9532: PPUSH
9533: CALL_OW 255
9537: PUSH
9538: LD_VAR 0 2
9542: NONEQUAL
9543: IFFALSE 9556
// begin ComStop ( i ) ;
9545: LD_VAR 0 13
9549: PPUSH
9550: CALL_OW 141
// continue ;
9554: GO 9525
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9556: LD_ADDR_VAR 0 21
9560: PUSH
9561: LD_INT 22
9563: PUSH
9564: LD_VAR 0 11
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: PPUSH
9578: LD_VAR 0 13
9582: PPUSH
9583: CALL_OW 74
9587: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9588: LD_ADDR_VAR 0 22
9592: PUSH
9593: LD_INT 22
9595: PUSH
9596: LD_VAR 0 11
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: LD_INT 59
9610: PUSH
9611: EMPTY
9612: LIST
9613: PUSH
9614: LD_INT 21
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 21
9626: PUSH
9627: LD_INT 2
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: EMPTY
9645: LIST
9646: PPUSH
9647: CALL_OW 69
9651: PPUSH
9652: LD_VAR 0 13
9656: PPUSH
9657: CALL_OW 74
9661: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9662: LD_VAR 0 13
9666: PPUSH
9667: LD_VAR 0 21
9671: PPUSH
9672: CALL_OW 296
9676: PUSH
9677: LD_INT 8
9679: PLUS
9680: PUSH
9681: LD_VAR 0 13
9685: PPUSH
9686: LD_VAR 0 22
9690: PPUSH
9691: CALL_OW 296
9695: LESS
9696: IFFALSE 9714
// begin ComAttackUnit ( i , target1 ) ;
9698: LD_VAR 0 13
9702: PPUSH
9703: LD_VAR 0 21
9707: PPUSH
9708: CALL_OW 115
// end else
9712: GO 9728
// begin ComAttackUnit ( i , target2 ) ;
9714: LD_VAR 0 13
9718: PPUSH
9719: LD_VAR 0 22
9723: PPUSH
9724: CALL_OW 115
// end ; end ;
9728: GO 9525
9730: POP
9731: POP
// end ; until vehicleOK_list = 0 ;
9732: LD_VAR 0 20
9736: PUSH
9737: LD_INT 0
9739: EQUAL
9740: IFFALSE 9345
// end ;
9742: LD_VAR 0 12
9746: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9747: LD_INT 0
9749: PPUSH
9750: PPUSH
9751: PPUSH
9752: PPUSH
9753: PPUSH
9754: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9755: LD_ADDR_VAR 0 6
9759: PUSH
9760: LD_INT 22
9762: PUSH
9763: LD_VAR 0 1
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 34
9774: PUSH
9775: LD_INT 29
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PPUSH
9786: CALL_OW 69
9790: ST_TO_ADDR
// if veh_list = 0 then
9791: LD_VAR 0 6
9795: PUSH
9796: LD_INT 0
9798: EQUAL
9799: IFFALSE 9803
// exit ;
9801: GO 10008
// if veh_list > 0 then
9803: LD_VAR 0 6
9807: PUSH
9808: LD_INT 0
9810: GREATER
9811: IFFALSE 10008
// begin for i in veh_List do
9813: LD_ADDR_VAR 0 4
9817: PUSH
9818: LD_VAR 0 6
9822: PUSH
9823: FOR_IN
9824: IFFALSE 10006
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9826: LD_ADDR_VAR 0 7
9830: PUSH
9831: LD_INT 22
9833: PUSH
9834: LD_VAR 0 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 24
9845: PUSH
9846: LD_INT 250
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PUSH
9853: LD_INT 2
9855: PUSH
9856: LD_INT 59
9858: PUSH
9859: EMPTY
9860: LIST
9861: PUSH
9862: LD_INT 21
9864: PUSH
9865: LD_INT 1
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 21
9874: PUSH
9875: LD_INT 2
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: PUSH
9893: EMPTY
9894: LIST
9895: PPUSH
9896: CALL_OW 69
9900: PPUSH
9901: LD_VAR 0 4
9905: PPUSH
9906: CALL_OW 74
9910: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
9911: LD_VAR 0 4
9915: PPUSH
9916: LD_VAR 0 7
9920: PPUSH
9921: CALL_OW 115
// if not HasTask ( i ) then
9925: LD_VAR 0 4
9929: PPUSH
9930: CALL_OW 314
9934: NOT
9935: IFFALSE 10004
// begin wait ( 0 0$0.1 ) ;
9937: LD_INT 4
9939: PPUSH
9940: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
9944: LD_ADDR_VAR 0 8
9948: PUSH
9949: LD_INT 22
9951: PUSH
9952: LD_VAR 0 2
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 24
9963: PUSH
9964: LD_INT 250
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PPUSH
9975: CALL_OW 69
9979: PPUSH
9980: LD_VAR 0 4
9984: PPUSH
9985: CALL_OW 74
9989: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
9990: LD_VAR 0 4
9994: PPUSH
9995: LD_VAR 0 8
9999: PPUSH
10000: CALL_OW 115
// end ; end ;
10004: GO 9823
10006: POP
10007: POP
// end ; end ; end_of_file
10008: LD_VAR 0 3
10012: RET
// every 0 0$1 do
10013: GO 10015
10015: DISABLE
// begin enable ;
10016: ENABLE
// IntBazooka ( 7 , 1 ) ;
10017: LD_INT 7
10019: PPUSH
10020: LD_INT 1
10022: PPUSH
10023: CALL 6453 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10027: LD_INT 8
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: CALL 9747 0 2
// end ;
10037: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10038: LD_INT 22
10040: PUSH
10041: LD_INT 3
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 21
10050: PUSH
10051: LD_INT 2
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 50
10060: PUSH
10061: EMPTY
10062: LIST
10063: PUSH
10064: LD_INT 2
10066: PUSH
10067: LD_INT 34
10069: PUSH
10070: LD_INT 46
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: LD_INT 34
10079: PUSH
10080: LD_INT 44
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 34
10089: PUSH
10090: LD_INT 45
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PUSH
10097: LD_INT 34
10099: PUSH
10100: LD_INT 47
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: PUSH
10125: LD_INT 0
10127: GREATER
10128: PUSH
10129: LD_INT 22
10131: PUSH
10132: LD_INT 3
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: LD_INT 21
10141: PUSH
10142: LD_INT 2
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 50
10151: PUSH
10152: EMPTY
10153: LIST
10154: PUSH
10155: LD_INT 34
10157: PUSH
10158: LD_INT 49
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: PUSH
10176: LD_INT 0
10178: GREATER
10179: AND
10180: IFFALSE 10352
10182: GO 10184
10184: DISABLE
10185: LD_INT 0
10187: PPUSH
10188: PPUSH
// begin enable ;
10189: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10190: LD_ADDR_VAR 0 1
10194: PUSH
10195: LD_INT 22
10197: PUSH
10198: LD_INT 3
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PUSH
10205: LD_INT 21
10207: PUSH
10208: LD_INT 2
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: LD_INT 50
10217: PUSH
10218: EMPTY
10219: LIST
10220: PUSH
10221: LD_INT 2
10223: PUSH
10224: LD_INT 34
10226: PUSH
10227: LD_INT 46
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: LD_INT 34
10236: PUSH
10237: LD_INT 44
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 34
10246: PUSH
10247: LD_INT 45
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 34
10256: PUSH
10257: LD_INT 47
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: PPUSH
10277: CALL_OW 69
10281: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10282: LD_ADDR_VAR 0 2
10286: PUSH
10287: LD_INT 22
10289: PUSH
10290: LD_INT 3
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 21
10299: PUSH
10300: LD_INT 2
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 50
10309: PUSH
10310: EMPTY
10311: LIST
10312: PUSH
10313: LD_INT 34
10315: PUSH
10316: LD_INT 49
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: PPUSH
10329: CALL_OW 69
10333: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10334: LD_VAR 0 2
10338: PPUSH
10339: LD_VAR 0 1
10343: PUSH
10344: LD_INT 1
10346: ARRAY
10347: PPUSH
10348: CALL_OW 112
// end ; end_of_file
10352: PPOPN 2
10354: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10355: LD_EXP 38
10359: PUSH
10360: LD_INT 1
10362: EQUAL
10363: IFFALSE 11265
10365: GO 10367
10367: DISABLE
10368: LD_INT 0
10370: PPUSH
10371: PPUSH
10372: PPUSH
// begin m1 := false ;
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 0
10380: ST_TO_ADDR
// m2 := false ;
10381: LD_ADDR_VAR 0 2
10385: PUSH
10386: LD_INT 0
10388: ST_TO_ADDR
// m3 := false ;
10389: LD_ADDR_VAR 0 3
10393: PUSH
10394: LD_INT 0
10396: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10397: LD_EXP 1
10401: PPUSH
10402: LD_STRING D9b-JMM-1
10404: PPUSH
10405: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10409: LD_EXP 15
10413: PPUSH
10414: LD_STRING D9b-Pow-1
10416: PPUSH
10417: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10421: LD_EXP 1
10425: PPUSH
10426: LD_STRING D9b-JMM-2
10428: PPUSH
10429: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10433: LD_EXP 15
10437: PPUSH
10438: LD_STRING D9b-Pow-2
10440: PPUSH
10441: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10445: LD_EXP 1
10449: PPUSH
10450: LD_STRING D9b-JMM-3
10452: PPUSH
10453: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10457: LD_EXP 15
10461: PPUSH
10462: LD_STRING D9b-Pow-3
10464: PPUSH
10465: CALL_OW 94
// if tick <= 60 60$00 then
10469: LD_OWVAR 1
10473: PUSH
10474: LD_INT 126000
10476: LESSEQUAL
10477: IFFALSE 10486
// SetAchievement ( ACH_ASPEED_13 ) ;
10479: LD_STRING ACH_ASPEED_13
10481: PPUSH
10482: CALL_OW 543
// if burlakStatus = 1 then
10486: LD_EXP 28
10490: PUSH
10491: LD_INT 1
10493: EQUAL
10494: IFFALSE 10516
// begin m1 := true ;
10496: LD_ADDR_VAR 0 1
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10504: LD_STRING Burlak
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: CALL_OW 101
// end else
10514: GO 10527
// begin AddMedal ( Burlak , - 1 ) ;
10516: LD_STRING Burlak
10518: PPUSH
10519: LD_INT 1
10521: NEG
10522: PPUSH
10523: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10527: LD_EXP 2
10531: PPUSH
10532: CALL_OW 302
10536: IFFALSE 10558
// begin m2 := true ;
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_INT 1
10545: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10546: LD_STRING Stevens
10548: PPUSH
10549: LD_INT 1
10551: PPUSH
10552: CALL_OW 101
// end else
10556: GO 10569
// begin AddMedal ( Stevens , - 1 ) ;
10558: LD_STRING Stevens
10560: PPUSH
10561: LD_INT 1
10563: NEG
10564: PPUSH
10565: CALL_OW 101
// end ; if radarOnSpot = 1 then
10569: LD_EXP 30
10573: PUSH
10574: LD_INT 1
10576: EQUAL
10577: IFFALSE 10599
// begin m3 := true ;
10579: LD_ADDR_VAR 0 3
10583: PUSH
10584: LD_INT 1
10586: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10587: LD_STRING Observation
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 101
// end else
10597: GO 10610
// begin AddMedal ( Observation , - 1 ) ;
10599: LD_STRING Observation
10601: PPUSH
10602: LD_INT 1
10604: NEG
10605: PPUSH
10606: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10610: LD_VAR 0 1
10614: PUSH
10615: LD_VAR 0 2
10619: AND
10620: PUSH
10621: LD_VAR 0 3
10625: AND
10626: PUSH
10627: LD_OWVAR 67
10631: PUSH
10632: LD_INT 3
10634: EQUAL
10635: AND
10636: IFFALSE 10648
// SetAchievementEX ( ACH_AMER , 13 ) ;
10638: LD_STRING ACH_AMER
10640: PPUSH
10641: LD_INT 13
10643: PPUSH
10644: CALL_OW 564
// GiveMedals ( MAIN ) ;
10648: LD_STRING MAIN
10650: PPUSH
10651: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10655: LD_EXP 28
10659: PPUSH
10660: LD_STRING 13_BurlakStatus_1
10662: PPUSH
10663: CALL_OW 39
// if IsLive ( Stevens ) then
10667: LD_EXP 2
10671: PPUSH
10672: CALL_OW 300
10676: IFFALSE 10690
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10678: LD_INT 1
10680: PPUSH
10681: LD_STRING 13_StevensStatus_1
10683: PPUSH
10684: CALL_OW 39
10688: GO 10700
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10690: LD_INT 0
10692: PPUSH
10693: LD_STRING 13_StevensStatus_1
10695: PPUSH
10696: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10700: LD_INT 22
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 21
10712: PUSH
10713: LD_INT 1
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 2
10722: PUSH
10723: LD_INT 25
10725: PUSH
10726: LD_INT 1
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 25
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: LD_INT 25
10745: PUSH
10746: LD_INT 3
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PUSH
10753: LD_INT 25
10755: PUSH
10756: LD_INT 4
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 25
10765: PUSH
10766: LD_INT 5
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 25
10775: PUSH
10776: LD_INT 8
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: LIST
10796: PPUSH
10797: CALL_OW 69
10801: PPUSH
10802: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10806: LD_EXP 1
10810: PPUSH
10811: LD_EXP 34
10815: PUSH
10816: LD_STRING JMM
10818: STR
10819: PPUSH
10820: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
10824: LD_EXP 8
10828: PPUSH
10829: LD_EXP 34
10833: PUSH
10834: LD_STRING Brown
10836: STR
10837: PPUSH
10838: CALL 6761 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10842: LD_EXP 4
10846: PPUSH
10847: LD_EXP 34
10851: PUSH
10852: LD_STRING Donaldson
10854: STR
10855: PPUSH
10856: CALL 6761 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
10860: LD_EXP 5
10864: PPUSH
10865: LD_EXP 34
10869: PUSH
10870: LD_STRING Bobby
10872: STR
10873: PPUSH
10874: CALL 6761 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
10878: LD_EXP 6
10882: PPUSH
10883: LD_EXP 34
10887: PUSH
10888: LD_STRING Cyrus
10890: STR
10891: PPUSH
10892: CALL 6761 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
10896: LD_EXP 3
10900: PPUSH
10901: LD_EXP 34
10905: PUSH
10906: LD_STRING Lisa
10908: STR
10909: PPUSH
10910: CALL 6761 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
10914: LD_EXP 13
10918: PPUSH
10919: LD_EXP 34
10923: PUSH
10924: LD_STRING Frank
10926: STR
10927: PPUSH
10928: CALL 6761 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
10932: LD_EXP 14
10936: PPUSH
10937: LD_EXP 34
10941: PUSH
10942: LD_STRING Kikuchi
10944: STR
10945: PPUSH
10946: CALL 6761 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
10950: LD_EXP 10
10954: PPUSH
10955: LD_EXP 34
10959: PUSH
10960: LD_STRING Houten
10962: STR
10963: PPUSH
10964: CALL 6761 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
10968: LD_EXP 12
10972: PPUSH
10973: LD_EXP 34
10977: PUSH
10978: LD_STRING Gary
10980: STR
10981: PPUSH
10982: CALL 6761 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
10986: LD_EXP 11
10990: PPUSH
10991: LD_EXP 34
10995: PUSH
10996: LD_STRING Cornell
10998: STR
10999: PPUSH
11000: CALL 6761 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11004: LD_EXP 7
11008: PPUSH
11009: LD_EXP 34
11013: PUSH
11014: LD_STRING Denis
11016: STR
11017: PPUSH
11018: CALL 6761 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11022: LD_EXP 9
11026: PPUSH
11027: LD_EXP 34
11031: PUSH
11032: LD_STRING Gladstone
11034: STR
11035: PPUSH
11036: CALL 6761 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11040: LD_EXP 2
11044: PPUSH
11045: LD_EXP 34
11049: PUSH
11050: LD_STRING Stevens
11052: STR
11053: PPUSH
11054: CALL 6761 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11058: LD_INT 50
11060: PUSH
11061: EMPTY
11062: LIST
11063: PUSH
11064: LD_INT 22
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 21
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 2
11086: PUSH
11087: LD_INT 25
11089: PUSH
11090: LD_INT 1
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 25
11099: PUSH
11100: LD_INT 2
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 25
11109: PUSH
11110: LD_INT 3
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: LD_INT 25
11119: PUSH
11120: LD_INT 4
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 25
11129: PUSH
11130: LD_INT 5
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 25
11139: PUSH
11140: LD_INT 8
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: PPUSH
11162: CALL_OW 69
11166: PUSH
11167: LD_EXP 1
11171: PUSH
11172: LD_EXP 8
11176: PUSH
11177: LD_EXP 4
11181: PUSH
11182: LD_EXP 5
11186: PUSH
11187: LD_EXP 6
11191: PUSH
11192: LD_EXP 3
11196: PUSH
11197: LD_EXP 13
11201: PUSH
11202: LD_EXP 9
11206: PUSH
11207: LD_EXP 14
11211: PUSH
11212: LD_EXP 7
11216: PUSH
11217: LD_EXP 10
11221: PUSH
11222: LD_EXP 12
11226: PUSH
11227: LD_EXP 11
11231: PUSH
11232: LD_EXP 2
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: DIFF
11253: PPUSH
11254: LD_STRING 13_other_survivors
11256: PPUSH
11257: CALL_OW 38
// YouWin ;
11261: CALL_OW 103
// end ; end_of_file
11265: PPOPN 3
11267: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do var i , tmp , yourSiberite ;
11268: LD_EXP 32
11272: PUSH
11273: LD_INT 2
11275: EQUAL
11276: PUSH
11277: LD_INT 34
11279: PUSH
11280: LD_INT 8
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PPUSH
11287: CALL_OW 69
11291: NOT
11292: AND
11293: IFFALSE 11429
11295: GO 11297
11297: DISABLE
11298: LD_INT 0
11300: PPUSH
11301: PPUSH
11302: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11303: LD_ADDR_VAR 0 2
11307: PUSH
11308: LD_INT 22
11310: PUSH
11311: LD_INT 1
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 21
11320: PUSH
11321: LD_INT 3
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 2
11330: PUSH
11331: LD_INT 30
11333: PUSH
11334: LD_INT 0
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 30
11343: PUSH
11344: LD_INT 1
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: LIST
11360: PPUSH
11361: CALL_OW 69
11365: ST_TO_ADDR
// for i in tmp do
11366: LD_ADDR_VAR 0 1
11370: PUSH
11371: LD_VAR 0 2
11375: PUSH
11376: FOR_IN
11377: IFFALSE 11410
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11379: LD_ADDR_VAR 0 3
11383: PUSH
11384: LD_VAR 0 3
11388: PUSH
11389: LD_VAR 0 1
11393: PPUSH
11394: CALL_OW 274
11398: PPUSH
11399: LD_INT 3
11401: PPUSH
11402: CALL_OW 275
11406: PLUS
11407: ST_TO_ADDR
11408: GO 11376
11410: POP
11411: POP
// if yourSiberite < 79 then
11412: LD_VAR 0 3
11416: PUSH
11417: LD_INT 79
11419: LESS
11420: IFFALSE 11429
// YouLost ( siberite ) ;
11422: LD_STRING siberite
11424: PPUSH
11425: CALL_OW 104
// end ; end_of_file
11429: PPOPN 3
11431: END
// every 8 8$0 + 7 7$0 do
11432: GO 11434
11434: DISABLE
// begin enable ;
11435: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11436: LD_INT 8
11438: PPUSH
11439: LD_INT 2
11441: PPUSH
11442: LD_INT 1
11444: PPUSH
11445: LD_INT 3
11447: PPUSH
11448: CALL_OW 12
11452: PPUSH
11453: LD_INT 0
11455: PPUSH
11456: LD_INT 0
11458: PPUSH
11459: LD_INT 2
11461: PUSH
11462: LD_INT 3
11464: PUSH
11465: LD_INT 4
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: LIST
11472: PUSH
11473: LD_OWVAR 67
11477: ARRAY
11478: PPUSH
11479: LD_INT 0
11481: PPUSH
11482: LD_INT 10
11484: PPUSH
11485: LD_INT 8
11487: PUSH
11488: LD_INT 9
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 1
11497: PPUSH
11498: LD_INT 2
11500: PPUSH
11501: CALL_OW 12
11505: ARRAY
11506: PPUSH
11507: LD_INT 12
11509: PPUSH
11510: LD_INT 1
11512: PPUSH
11513: CALL 6801 0 11
// end ;
11517: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11518: GO 11520
11520: DISABLE
11521: LD_INT 0
11523: PPUSH
11524: PPUSH
11525: PPUSH
// begin enable ;
11526: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11527: LD_ADDR_EXP 33
11531: PUSH
11532: LD_EXP 33
11536: PUSH
11537: LD_INT 1
11539: PLUS
11540: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11541: LD_INT 22
11543: PUSH
11544: LD_INT 8
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 3
11553: PUSH
11554: LD_INT 58
11556: PUSH
11557: EMPTY
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 34
11566: PUSH
11567: LD_INT 31
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: PPUSH
11579: CALL_OW 69
11583: PUSH
11584: LD_INT 2
11586: LESS
11587: IFFALSE 11827
// begin uc_side := 8 ;
11589: LD_ADDR_OWVAR 20
11593: PUSH
11594: LD_INT 8
11596: ST_TO_ADDR
// uc_nation := 2 ;
11597: LD_ADDR_OWVAR 21
11601: PUSH
11602: LD_INT 2
11604: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11605: LD_INT 14
11607: PPUSH
11608: LD_INT 3
11610: PPUSH
11611: LD_INT 1
11613: PPUSH
11614: LD_INT 31
11616: PPUSH
11617: LD_INT 100
11619: PPUSH
11620: CALL 34847 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
11624: LD_ADDR_VAR 0 1
11628: PUSH
11629: DOUBLE
11630: LD_INT 22
11632: PUSH
11633: LD_INT 8
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 3
11642: PUSH
11643: LD_INT 58
11645: PUSH
11646: EMPTY
11647: LIST
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 34
11655: PUSH
11656: LD_INT 31
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 69
11672: PUSH
11673: LD_INT 1
11675: PLUS
11676: DEC
11677: ST_TO_ADDR
11678: LD_INT 2
11680: PUSH
11681: FOR_TO
11682: IFFALSE 11825
// begin veh := CreateVehicle ;
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: CALL_OW 45
11693: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11694: LD_VAR 0 2
11698: PPUSH
11699: LD_INT 5
11701: PPUSH
11702: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
11706: LD_ADDR_VAR 0 3
11710: PUSH
11711: LD_INT 181
11713: PUSH
11714: LD_INT 105
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 137
11723: PUSH
11724: LD_INT 6
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: LD_VAR 0 1
11739: PUSH
11740: LD_INT 2
11742: MOD
11743: PUSH
11744: LD_INT 1
11746: PLUS
11747: ARRAY
11748: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
11749: LD_VAR 0 2
11753: PPUSH
11754: LD_VAR 0 3
11758: PUSH
11759: LD_INT 1
11761: ARRAY
11762: PPUSH
11763: LD_VAR 0 3
11767: PUSH
11768: LD_INT 2
11770: ARRAY
11771: PPUSH
11772: LD_INT 12
11774: PPUSH
11775: LD_INT 0
11777: PPUSH
11778: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 ] [ Difficulty ] ) ;
11782: LD_INT 0
11784: PPUSH
11785: LD_INT 7
11787: PUSH
11788: LD_INT 9
11790: PUSH
11791: LD_INT 10
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: LIST
11798: PUSH
11799: LD_OWVAR 67
11803: ARRAY
11804: PPUSH
11805: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
11809: CALL_OW 44
11813: PPUSH
11814: LD_VAR 0 2
11818: PPUSH
11819: CALL_OW 52
// end ;
11823: GO 11681
11825: POP
11826: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
11827: LD_INT 8
11829: PUSH
11830: LD_INT 9
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 1
11839: PPUSH
11840: LD_INT 2
11842: PPUSH
11843: CALL_OW 12
11847: ARRAY
11848: PPUSH
11849: LD_INT 8
11851: PPUSH
11852: LD_INT 4
11854: PPUSH
11855: LD_INT 6
11857: PPUSH
11858: CALL_OW 12
11862: PUSH
11863: LD_INT 6
11865: PPUSH
11866: LD_INT 9
11868: PPUSH
11869: CALL_OW 12
11873: PUSH
11874: LD_INT 7
11876: PPUSH
11877: LD_INT 10
11879: PPUSH
11880: CALL_OW 12
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: LIST
11889: PUSH
11890: LD_OWVAR 67
11894: ARRAY
11895: PPUSH
11896: LD_INT 10
11898: PPUSH
11899: LD_INT 2
11901: PPUSH
11902: LD_INT 3
11904: PPUSH
11905: LD_INT 5
11907: PUSH
11908: LD_INT 2
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PPUSH
11915: EMPTY
11916: PPUSH
11917: LD_INT 25
11919: PUSH
11920: LD_INT 26
11922: PUSH
11923: LD_INT 27
11925: PUSH
11926: LD_INT 28
11928: PUSH
11929: LD_INT 29
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: PPUSH
11939: EMPTY
11940: PPUSH
11941: LD_INT 1
11943: PPUSH
11944: CALL 7869 0 11
// end ;
11948: PPOPN 3
11950: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
11951: LD_EXP 33
11955: PUSH
11956: LD_INT 4
11958: GREATEREQUAL
11959: IFFALSE 12299
11961: GO 11963
11963: DISABLE
11964: LD_INT 0
11966: PPUSH
11967: PPUSH
// begin enable ;
11968: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11969: LD_ADDR_EXP 33
11973: PUSH
11974: LD_EXP 33
11978: PUSH
11979: LD_INT 1
11981: PLUS
11982: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11983: LD_INT 22
11985: PUSH
11986: LD_INT 8
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 3
11995: PUSH
11996: LD_INT 58
11998: PUSH
11999: EMPTY
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 34
12008: PUSH
12009: LD_INT 31
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: PPUSH
12021: CALL_OW 69
12025: PUSH
12026: LD_INT 2
12028: LESS
12029: IFFALSE 12214
// begin uc_side := 8 ;
12031: LD_ADDR_OWVAR 20
12035: PUSH
12036: LD_INT 8
12038: ST_TO_ADDR
// uc_nation := 2 ;
12039: LD_ADDR_OWVAR 21
12043: PUSH
12044: LD_INT 2
12046: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12047: LD_INT 14
12049: PPUSH
12050: LD_INT 3
12052: PPUSH
12053: LD_INT 1
12055: PPUSH
12056: LD_INT 31
12058: PPUSH
12059: LD_INT 100
12061: PPUSH
12062: CALL 34847 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12066: LD_ADDR_VAR 0 1
12070: PUSH
12071: DOUBLE
12072: LD_INT 22
12074: PUSH
12075: LD_INT 8
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 3
12084: PUSH
12085: LD_INT 58
12087: PUSH
12088: EMPTY
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 34
12097: PUSH
12098: LD_INT 31
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: PPUSH
12110: CALL_OW 69
12114: PUSH
12115: LD_INT 1
12117: PLUS
12118: DEC
12119: ST_TO_ADDR
12120: LD_INT 2
12122: PUSH
12123: FOR_TO
12124: IFFALSE 12212
// begin veh := CreateVehicle ;
12126: LD_ADDR_VAR 0 2
12130: PUSH
12131: CALL_OW 45
12135: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12136: LD_VAR 0 2
12140: PPUSH
12141: LD_INT 5
12143: PPUSH
12144: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12148: LD_VAR 0 2
12152: PPUSH
12153: LD_INT 181
12155: PPUSH
12156: LD_INT 105
12158: PPUSH
12159: LD_INT 12
12161: PPUSH
12162: LD_INT 0
12164: PPUSH
12165: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12169: LD_INT 0
12171: PPUSH
12172: LD_INT 8
12174: PUSH
12175: LD_INT 9
12177: PUSH
12178: LD_INT 10
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: LIST
12185: PUSH
12186: LD_OWVAR 67
12190: ARRAY
12191: PPUSH
12192: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12196: CALL_OW 44
12200: PPUSH
12201: LD_VAR 0 2
12205: PPUSH
12206: CALL_OW 52
// end ;
12210: GO 12123
12212: POP
12213: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12214: LD_INT 8
12216: PUSH
12217: LD_INT 9
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 1
12226: PPUSH
12227: LD_INT 2
12229: PPUSH
12230: CALL_OW 12
12234: ARRAY
12235: PPUSH
12236: LD_INT 8
12238: PPUSH
12239: LD_INT 1
12241: PUSH
12242: LD_INT 2
12244: PUSH
12245: LD_INT 3
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: LIST
12252: PUSH
12253: LD_OWVAR 67
12257: ARRAY
12258: PPUSH
12259: LD_INT 10
12261: PPUSH
12262: LD_INT 3
12264: PPUSH
12265: LD_INT 3
12267: PPUSH
12268: LD_INT 1
12270: PUSH
12271: LD_INT 1
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PPUSH
12278: LD_INT 47
12280: PUSH
12281: LD_INT 47
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PPUSH
12288: EMPTY
12289: PPUSH
12290: EMPTY
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL 7869 0 11
// end ;
12299: PPOPN 2
12301: END
// every 1 1$0 trigger eventVar2 = 1 do var i , veh ;
12302: LD_EXP 36
12306: PUSH
12307: LD_INT 1
12309: EQUAL
12310: IFFALSE 12647
12312: GO 12314
12314: DISABLE
12315: LD_INT 0
12317: PPUSH
12318: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12319: LD_INT 22
12321: PUSH
12322: LD_INT 8
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: LD_INT 3
12331: PUSH
12332: LD_INT 58
12334: PUSH
12335: EMPTY
12336: LIST
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 34
12344: PUSH
12345: LD_INT 31
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: LIST
12356: PPUSH
12357: CALL_OW 69
12361: PUSH
12362: LD_INT 2
12364: LESS
12365: IFFALSE 12550
// begin uc_side := 8 ;
12367: LD_ADDR_OWVAR 20
12371: PUSH
12372: LD_INT 8
12374: ST_TO_ADDR
// uc_nation := 2 ;
12375: LD_ADDR_OWVAR 21
12379: PUSH
12380: LD_INT 2
12382: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12383: LD_INT 14
12385: PPUSH
12386: LD_INT 3
12388: PPUSH
12389: LD_INT 1
12391: PPUSH
12392: LD_INT 31
12394: PPUSH
12395: LD_INT 100
12397: PPUSH
12398: CALL 34847 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12402: LD_ADDR_VAR 0 1
12406: PUSH
12407: DOUBLE
12408: LD_INT 22
12410: PUSH
12411: LD_INT 8
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 3
12420: PUSH
12421: LD_INT 58
12423: PUSH
12424: EMPTY
12425: LIST
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 34
12433: PUSH
12434: LD_INT 31
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: PPUSH
12446: CALL_OW 69
12450: PUSH
12451: LD_INT 1
12453: PLUS
12454: DEC
12455: ST_TO_ADDR
12456: LD_INT 2
12458: PUSH
12459: FOR_TO
12460: IFFALSE 12548
// begin veh := CreateVehicle ;
12462: LD_ADDR_VAR 0 2
12466: PUSH
12467: CALL_OW 45
12471: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12472: LD_VAR 0 2
12476: PPUSH
12477: LD_INT 5
12479: PPUSH
12480: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12484: LD_VAR 0 2
12488: PPUSH
12489: LD_INT 181
12491: PPUSH
12492: LD_INT 105
12494: PPUSH
12495: LD_INT 12
12497: PPUSH
12498: LD_INT 0
12500: PPUSH
12501: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12505: LD_INT 0
12507: PPUSH
12508: LD_INT 8
12510: PUSH
12511: LD_INT 9
12513: PUSH
12514: LD_INT 10
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: LIST
12521: PUSH
12522: LD_OWVAR 67
12526: ARRAY
12527: PPUSH
12528: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12532: CALL_OW 44
12536: PPUSH
12537: LD_VAR 0 2
12541: PPUSH
12542: CALL_OW 52
// end ;
12546: GO 12459
12548: POP
12549: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12550: LD_INT 8
12552: PUSH
12553: LD_INT 9
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 1
12562: PPUSH
12563: LD_INT 2
12565: PPUSH
12566: CALL_OW 12
12570: ARRAY
12571: PPUSH
12572: LD_INT 3
12574: PPUSH
12575: LD_INT 5
12577: PUSH
12578: LD_INT 7
12580: PUSH
12581: LD_INT 8
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: LIST
12588: PUSH
12589: LD_OWVAR 67
12593: ARRAY
12594: PPUSH
12595: LD_INT 10
12597: PPUSH
12598: LD_INT 3
12600: PPUSH
12601: LD_INT 3
12603: PPUSH
12604: LD_INT 3
12606: PUSH
12607: LD_INT 3
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: PPUSH
12614: LD_INT 46
12616: PUSH
12617: LD_INT 44
12619: PUSH
12620: LD_INT 45
12622: PUSH
12623: LD_INT 47
12625: PUSH
12626: LD_INT 49
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: PPUSH
12636: EMPTY
12637: PPUSH
12638: EMPTY
12639: PPUSH
12640: LD_INT 1
12642: PPUSH
12643: CALL 7869 0 11
// end ; end_of_file
12647: PPOPN 2
12649: END
// every 1 1$0 do
12650: GO 12652
12652: DISABLE
// begin enable ;
12653: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12654: LD_INT 3
12656: PPUSH
12657: LD_INT 5
12659: PPUSH
12660: CALL_OW 12
12664: PPUSH
12665: LD_INT 13
12667: PPUSH
12668: LD_INT 1
12670: PPUSH
12671: CALL_OW 55
// end ; end_of_file
12675: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12676: LD_INT 0
12678: PPUSH
// ar_miner := 81 ;
12679: LD_ADDR_EXP 50
12683: PUSH
12684: LD_INT 81
12686: ST_TO_ADDR
// ar_crane := 88 ;
12687: LD_ADDR_EXP 49
12691: PUSH
12692: LD_INT 88
12694: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12695: LD_ADDR_EXP 44
12699: PUSH
12700: LD_INT 89
12702: ST_TO_ADDR
// us_hack := 99 ;
12703: LD_ADDR_EXP 45
12707: PUSH
12708: LD_INT 99
12710: ST_TO_ADDR
// us_artillery := 97 ;
12711: LD_ADDR_EXP 46
12715: PUSH
12716: LD_INT 97
12718: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12719: LD_ADDR_EXP 47
12723: PUSH
12724: LD_INT 91
12726: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
12727: LD_ADDR_EXP 48
12731: PUSH
12732: LD_INT 92
12734: ST_TO_ADDR
// ru_radar := 98 ;
12735: LD_ADDR_EXP 43
12739: PUSH
12740: LD_INT 98
12742: ST_TO_ADDR
// tech_Artillery := 80 ;
12743: LD_ADDR_EXP 51
12747: PUSH
12748: LD_INT 80
12750: ST_TO_ADDR
// tech_RadMat := 81 ;
12751: LD_ADDR_EXP 52
12755: PUSH
12756: LD_INT 81
12758: ST_TO_ADDR
// tech_BasicTools := 82 ;
12759: LD_ADDR_EXP 53
12763: PUSH
12764: LD_INT 82
12766: ST_TO_ADDR
// tech_Cargo := 83 ;
12767: LD_ADDR_EXP 54
12771: PUSH
12772: LD_INT 83
12774: ST_TO_ADDR
// tech_Track := 84 ;
12775: LD_ADDR_EXP 55
12779: PUSH
12780: LD_INT 84
12782: ST_TO_ADDR
// tech_Crane := 85 ;
12783: LD_ADDR_EXP 56
12787: PUSH
12788: LD_INT 85
12790: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12791: LD_ADDR_EXP 57
12795: PUSH
12796: LD_INT 86
12798: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12799: LD_ADDR_EXP 58
12803: PUSH
12804: LD_INT 87
12806: ST_TO_ADDR
// class_mastodont := 31 ;
12807: LD_ADDR_EXP 59
12811: PUSH
12812: LD_INT 31
12814: ST_TO_ADDR
// class_horse := 21 ;
12815: LD_ADDR_EXP 60
12819: PUSH
12820: LD_INT 21
12822: ST_TO_ADDR
// end ;
12823: LD_VAR 0 1
12827: RET
// every 1 do
12828: GO 12830
12830: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12831: CALL 12676 0 0
12835: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12836: LD_INT 0
12838: PPUSH
// if p2 = 100 then
12839: LD_VAR 0 2
12843: PUSH
12844: LD_INT 100
12846: EQUAL
12847: IFFALSE 13796
// begin if not StreamModeActive then
12849: LD_EXP 61
12853: NOT
12854: IFFALSE 12864
// StreamModeActive := true ;
12856: LD_ADDR_EXP 61
12860: PUSH
12861: LD_INT 1
12863: ST_TO_ADDR
// if p3 = 0 then
12864: LD_VAR 0 3
12868: PUSH
12869: LD_INT 0
12871: EQUAL
12872: IFFALSE 12878
// InitStreamMode ;
12874: CALL 13956 0 0
// if p3 = 1 then
12878: LD_VAR 0 3
12882: PUSH
12883: LD_INT 1
12885: EQUAL
12886: IFFALSE 12896
// sRocket := true ;
12888: LD_ADDR_EXP 66
12892: PUSH
12893: LD_INT 1
12895: ST_TO_ADDR
// if p3 = 2 then
12896: LD_VAR 0 3
12900: PUSH
12901: LD_INT 2
12903: EQUAL
12904: IFFALSE 12914
// sSpeed := true ;
12906: LD_ADDR_EXP 65
12910: PUSH
12911: LD_INT 1
12913: ST_TO_ADDR
// if p3 = 3 then
12914: LD_VAR 0 3
12918: PUSH
12919: LD_INT 3
12921: EQUAL
12922: IFFALSE 12932
// sEngine := true ;
12924: LD_ADDR_EXP 67
12928: PUSH
12929: LD_INT 1
12931: ST_TO_ADDR
// if p3 = 4 then
12932: LD_VAR 0 3
12936: PUSH
12937: LD_INT 4
12939: EQUAL
12940: IFFALSE 12950
// sSpec := true ;
12942: LD_ADDR_EXP 64
12946: PUSH
12947: LD_INT 1
12949: ST_TO_ADDR
// if p3 = 5 then
12950: LD_VAR 0 3
12954: PUSH
12955: LD_INT 5
12957: EQUAL
12958: IFFALSE 12968
// sLevel := true ;
12960: LD_ADDR_EXP 68
12964: PUSH
12965: LD_INT 1
12967: ST_TO_ADDR
// if p3 = 6 then
12968: LD_VAR 0 3
12972: PUSH
12973: LD_INT 6
12975: EQUAL
12976: IFFALSE 12986
// sArmoury := true ;
12978: LD_ADDR_EXP 69
12982: PUSH
12983: LD_INT 1
12985: ST_TO_ADDR
// if p3 = 7 then
12986: LD_VAR 0 3
12990: PUSH
12991: LD_INT 7
12993: EQUAL
12994: IFFALSE 13004
// sRadar := true ;
12996: LD_ADDR_EXP 70
13000: PUSH
13001: LD_INT 1
13003: ST_TO_ADDR
// if p3 = 8 then
13004: LD_VAR 0 3
13008: PUSH
13009: LD_INT 8
13011: EQUAL
13012: IFFALSE 13022
// sBunker := true ;
13014: LD_ADDR_EXP 71
13018: PUSH
13019: LD_INT 1
13021: ST_TO_ADDR
// if p3 = 9 then
13022: LD_VAR 0 3
13026: PUSH
13027: LD_INT 9
13029: EQUAL
13030: IFFALSE 13040
// sHack := true ;
13032: LD_ADDR_EXP 72
13036: PUSH
13037: LD_INT 1
13039: ST_TO_ADDR
// if p3 = 10 then
13040: LD_VAR 0 3
13044: PUSH
13045: LD_INT 10
13047: EQUAL
13048: IFFALSE 13058
// sFire := true ;
13050: LD_ADDR_EXP 73
13054: PUSH
13055: LD_INT 1
13057: ST_TO_ADDR
// if p3 = 11 then
13058: LD_VAR 0 3
13062: PUSH
13063: LD_INT 11
13065: EQUAL
13066: IFFALSE 13076
// sRefresh := true ;
13068: LD_ADDR_EXP 74
13072: PUSH
13073: LD_INT 1
13075: ST_TO_ADDR
// if p3 = 12 then
13076: LD_VAR 0 3
13080: PUSH
13081: LD_INT 12
13083: EQUAL
13084: IFFALSE 13094
// sExp := true ;
13086: LD_ADDR_EXP 75
13090: PUSH
13091: LD_INT 1
13093: ST_TO_ADDR
// if p3 = 13 then
13094: LD_VAR 0 3
13098: PUSH
13099: LD_INT 13
13101: EQUAL
13102: IFFALSE 13112
// sDepot := true ;
13104: LD_ADDR_EXP 76
13108: PUSH
13109: LD_INT 1
13111: ST_TO_ADDR
// if p3 = 14 then
13112: LD_VAR 0 3
13116: PUSH
13117: LD_INT 14
13119: EQUAL
13120: IFFALSE 13130
// sFlag := true ;
13122: LD_ADDR_EXP 77
13126: PUSH
13127: LD_INT 1
13129: ST_TO_ADDR
// if p3 = 15 then
13130: LD_VAR 0 3
13134: PUSH
13135: LD_INT 15
13137: EQUAL
13138: IFFALSE 13148
// sKamikadze := true ;
13140: LD_ADDR_EXP 85
13144: PUSH
13145: LD_INT 1
13147: ST_TO_ADDR
// if p3 = 16 then
13148: LD_VAR 0 3
13152: PUSH
13153: LD_INT 16
13155: EQUAL
13156: IFFALSE 13166
// sTroll := true ;
13158: LD_ADDR_EXP 86
13162: PUSH
13163: LD_INT 1
13165: ST_TO_ADDR
// if p3 = 17 then
13166: LD_VAR 0 3
13170: PUSH
13171: LD_INT 17
13173: EQUAL
13174: IFFALSE 13184
// sSlow := true ;
13176: LD_ADDR_EXP 87
13180: PUSH
13181: LD_INT 1
13183: ST_TO_ADDR
// if p3 = 18 then
13184: LD_VAR 0 3
13188: PUSH
13189: LD_INT 18
13191: EQUAL
13192: IFFALSE 13202
// sLack := true ;
13194: LD_ADDR_EXP 88
13198: PUSH
13199: LD_INT 1
13201: ST_TO_ADDR
// if p3 = 19 then
13202: LD_VAR 0 3
13206: PUSH
13207: LD_INT 19
13209: EQUAL
13210: IFFALSE 13220
// sTank := true ;
13212: LD_ADDR_EXP 90
13216: PUSH
13217: LD_INT 1
13219: ST_TO_ADDR
// if p3 = 20 then
13220: LD_VAR 0 3
13224: PUSH
13225: LD_INT 20
13227: EQUAL
13228: IFFALSE 13238
// sRemote := true ;
13230: LD_ADDR_EXP 91
13234: PUSH
13235: LD_INT 1
13237: ST_TO_ADDR
// if p3 = 21 then
13238: LD_VAR 0 3
13242: PUSH
13243: LD_INT 21
13245: EQUAL
13246: IFFALSE 13256
// sPowell := true ;
13248: LD_ADDR_EXP 92
13252: PUSH
13253: LD_INT 1
13255: ST_TO_ADDR
// if p3 = 22 then
13256: LD_VAR 0 3
13260: PUSH
13261: LD_INT 22
13263: EQUAL
13264: IFFALSE 13274
// sTeleport := true ;
13266: LD_ADDR_EXP 95
13270: PUSH
13271: LD_INT 1
13273: ST_TO_ADDR
// if p3 = 23 then
13274: LD_VAR 0 3
13278: PUSH
13279: LD_INT 23
13281: EQUAL
13282: IFFALSE 13292
// sOilTower := true ;
13284: LD_ADDR_EXP 97
13288: PUSH
13289: LD_INT 1
13291: ST_TO_ADDR
// if p3 = 24 then
13292: LD_VAR 0 3
13296: PUSH
13297: LD_INT 24
13299: EQUAL
13300: IFFALSE 13310
// sShovel := true ;
13302: LD_ADDR_EXP 98
13306: PUSH
13307: LD_INT 1
13309: ST_TO_ADDR
// if p3 = 25 then
13310: LD_VAR 0 3
13314: PUSH
13315: LD_INT 25
13317: EQUAL
13318: IFFALSE 13328
// sSheik := true ;
13320: LD_ADDR_EXP 99
13324: PUSH
13325: LD_INT 1
13327: ST_TO_ADDR
// if p3 = 26 then
13328: LD_VAR 0 3
13332: PUSH
13333: LD_INT 26
13335: EQUAL
13336: IFFALSE 13346
// sEarthquake := true ;
13338: LD_ADDR_EXP 101
13342: PUSH
13343: LD_INT 1
13345: ST_TO_ADDR
// if p3 = 27 then
13346: LD_VAR 0 3
13350: PUSH
13351: LD_INT 27
13353: EQUAL
13354: IFFALSE 13364
// sAI := true ;
13356: LD_ADDR_EXP 102
13360: PUSH
13361: LD_INT 1
13363: ST_TO_ADDR
// if p3 = 28 then
13364: LD_VAR 0 3
13368: PUSH
13369: LD_INT 28
13371: EQUAL
13372: IFFALSE 13382
// sCargo := true ;
13374: LD_ADDR_EXP 105
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// if p3 = 29 then
13382: LD_VAR 0 3
13386: PUSH
13387: LD_INT 29
13389: EQUAL
13390: IFFALSE 13400
// sDLaser := true ;
13392: LD_ADDR_EXP 106
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// if p3 = 30 then
13400: LD_VAR 0 3
13404: PUSH
13405: LD_INT 30
13407: EQUAL
13408: IFFALSE 13418
// sExchange := true ;
13410: LD_ADDR_EXP 107
13414: PUSH
13415: LD_INT 1
13417: ST_TO_ADDR
// if p3 = 31 then
13418: LD_VAR 0 3
13422: PUSH
13423: LD_INT 31
13425: EQUAL
13426: IFFALSE 13436
// sFac := true ;
13428: LD_ADDR_EXP 108
13432: PUSH
13433: LD_INT 1
13435: ST_TO_ADDR
// if p3 = 32 then
13436: LD_VAR 0 3
13440: PUSH
13441: LD_INT 32
13443: EQUAL
13444: IFFALSE 13454
// sPower := true ;
13446: LD_ADDR_EXP 109
13450: PUSH
13451: LD_INT 1
13453: ST_TO_ADDR
// if p3 = 33 then
13454: LD_VAR 0 3
13458: PUSH
13459: LD_INT 33
13461: EQUAL
13462: IFFALSE 13472
// sRandom := true ;
13464: LD_ADDR_EXP 110
13468: PUSH
13469: LD_INT 1
13471: ST_TO_ADDR
// if p3 = 34 then
13472: LD_VAR 0 3
13476: PUSH
13477: LD_INT 34
13479: EQUAL
13480: IFFALSE 13490
// sShield := true ;
13482: LD_ADDR_EXP 111
13486: PUSH
13487: LD_INT 1
13489: ST_TO_ADDR
// if p3 = 35 then
13490: LD_VAR 0 3
13494: PUSH
13495: LD_INT 35
13497: EQUAL
13498: IFFALSE 13508
// sTime := true ;
13500: LD_ADDR_EXP 112
13504: PUSH
13505: LD_INT 1
13507: ST_TO_ADDR
// if p3 = 36 then
13508: LD_VAR 0 3
13512: PUSH
13513: LD_INT 36
13515: EQUAL
13516: IFFALSE 13526
// sTools := true ;
13518: LD_ADDR_EXP 113
13522: PUSH
13523: LD_INT 1
13525: ST_TO_ADDR
// if p3 = 101 then
13526: LD_VAR 0 3
13530: PUSH
13531: LD_INT 101
13533: EQUAL
13534: IFFALSE 13544
// sSold := true ;
13536: LD_ADDR_EXP 78
13540: PUSH
13541: LD_INT 1
13543: ST_TO_ADDR
// if p3 = 102 then
13544: LD_VAR 0 3
13548: PUSH
13549: LD_INT 102
13551: EQUAL
13552: IFFALSE 13562
// sDiff := true ;
13554: LD_ADDR_EXP 79
13558: PUSH
13559: LD_INT 1
13561: ST_TO_ADDR
// if p3 = 103 then
13562: LD_VAR 0 3
13566: PUSH
13567: LD_INT 103
13569: EQUAL
13570: IFFALSE 13580
// sFog := true ;
13572: LD_ADDR_EXP 82
13576: PUSH
13577: LD_INT 1
13579: ST_TO_ADDR
// if p3 = 104 then
13580: LD_VAR 0 3
13584: PUSH
13585: LD_INT 104
13587: EQUAL
13588: IFFALSE 13598
// sReset := true ;
13590: LD_ADDR_EXP 83
13594: PUSH
13595: LD_INT 1
13597: ST_TO_ADDR
// if p3 = 105 then
13598: LD_VAR 0 3
13602: PUSH
13603: LD_INT 105
13605: EQUAL
13606: IFFALSE 13616
// sSun := true ;
13608: LD_ADDR_EXP 84
13612: PUSH
13613: LD_INT 1
13615: ST_TO_ADDR
// if p3 = 106 then
13616: LD_VAR 0 3
13620: PUSH
13621: LD_INT 106
13623: EQUAL
13624: IFFALSE 13634
// sTiger := true ;
13626: LD_ADDR_EXP 80
13630: PUSH
13631: LD_INT 1
13633: ST_TO_ADDR
// if p3 = 107 then
13634: LD_VAR 0 3
13638: PUSH
13639: LD_INT 107
13641: EQUAL
13642: IFFALSE 13652
// sBomb := true ;
13644: LD_ADDR_EXP 81
13648: PUSH
13649: LD_INT 1
13651: ST_TO_ADDR
// if p3 = 108 then
13652: LD_VAR 0 3
13656: PUSH
13657: LD_INT 108
13659: EQUAL
13660: IFFALSE 13670
// sWound := true ;
13662: LD_ADDR_EXP 89
13666: PUSH
13667: LD_INT 1
13669: ST_TO_ADDR
// if p3 = 109 then
13670: LD_VAR 0 3
13674: PUSH
13675: LD_INT 109
13677: EQUAL
13678: IFFALSE 13688
// sBetray := true ;
13680: LD_ADDR_EXP 93
13684: PUSH
13685: LD_INT 1
13687: ST_TO_ADDR
// if p3 = 110 then
13688: LD_VAR 0 3
13692: PUSH
13693: LD_INT 110
13695: EQUAL
13696: IFFALSE 13706
// sContamin := true ;
13698: LD_ADDR_EXP 94
13702: PUSH
13703: LD_INT 1
13705: ST_TO_ADDR
// if p3 = 111 then
13706: LD_VAR 0 3
13710: PUSH
13711: LD_INT 111
13713: EQUAL
13714: IFFALSE 13724
// sOil := true ;
13716: LD_ADDR_EXP 96
13720: PUSH
13721: LD_INT 1
13723: ST_TO_ADDR
// if p3 = 112 then
13724: LD_VAR 0 3
13728: PUSH
13729: LD_INT 112
13731: EQUAL
13732: IFFALSE 13742
// sStu := true ;
13734: LD_ADDR_EXP 100
13738: PUSH
13739: LD_INT 1
13741: ST_TO_ADDR
// if p3 = 113 then
13742: LD_VAR 0 3
13746: PUSH
13747: LD_INT 113
13749: EQUAL
13750: IFFALSE 13760
// sBazooka := true ;
13752: LD_ADDR_EXP 103
13756: PUSH
13757: LD_INT 1
13759: ST_TO_ADDR
// if p3 = 114 then
13760: LD_VAR 0 3
13764: PUSH
13765: LD_INT 114
13767: EQUAL
13768: IFFALSE 13778
// sMortar := true ;
13770: LD_ADDR_EXP 104
13774: PUSH
13775: LD_INT 1
13777: ST_TO_ADDR
// if p3 = 115 then
13778: LD_VAR 0 3
13782: PUSH
13783: LD_INT 115
13785: EQUAL
13786: IFFALSE 13796
// sRanger := true ;
13788: LD_ADDR_EXP 114
13792: PUSH
13793: LD_INT 1
13795: ST_TO_ADDR
// end ; if p2 = 101 then
13796: LD_VAR 0 2
13800: PUSH
13801: LD_INT 101
13803: EQUAL
13804: IFFALSE 13932
// begin case p3 of 1 :
13806: LD_VAR 0 3
13810: PUSH
13811: LD_INT 1
13813: DOUBLE
13814: EQUAL
13815: IFTRUE 13819
13817: GO 13826
13819: POP
// hHackUnlimitedResources ; 2 :
13820: CALL 24969 0 0
13824: GO 13932
13826: LD_INT 2
13828: DOUBLE
13829: EQUAL
13830: IFTRUE 13834
13832: GO 13841
13834: POP
// hHackSetLevel10 ; 3 :
13835: CALL 25102 0 0
13839: GO 13932
13841: LD_INT 3
13843: DOUBLE
13844: EQUAL
13845: IFTRUE 13849
13847: GO 13856
13849: POP
// hHackSetLevel10YourUnits ; 4 :
13850: CALL 25187 0 0
13854: GO 13932
13856: LD_INT 4
13858: DOUBLE
13859: EQUAL
13860: IFTRUE 13864
13862: GO 13871
13864: POP
// hHackInvincible ; 5 :
13865: CALL 25635 0 0
13869: GO 13932
13871: LD_INT 5
13873: DOUBLE
13874: EQUAL
13875: IFTRUE 13879
13877: GO 13886
13879: POP
// hHackInvisible ; 6 :
13880: CALL 25746 0 0
13884: GO 13932
13886: LD_INT 6
13888: DOUBLE
13889: EQUAL
13890: IFTRUE 13894
13892: GO 13901
13894: POP
// hHackChangeYourSide ; 7 :
13895: CALL 25803 0 0
13899: GO 13932
13901: LD_INT 7
13903: DOUBLE
13904: EQUAL
13905: IFTRUE 13909
13907: GO 13916
13909: POP
// hHackChangeUnitSide ; 8 :
13910: CALL 25845 0 0
13914: GO 13932
13916: LD_INT 8
13918: DOUBLE
13919: EQUAL
13920: IFTRUE 13924
13922: GO 13931
13924: POP
// hHackFog ; end ;
13925: CALL 25946 0 0
13929: GO 13932
13931: POP
// end ; end ;
13932: LD_VAR 0 7
13936: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13937: GO 13939
13939: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13940: LD_STRING initStreamRollete();
13942: PPUSH
13943: CALL_OW 559
// InitStreamMode ;
13947: CALL 13956 0 0
// DefineStreamItems ( ) ;
13951: CALL 14396 0 0
// end ;
13955: END
// function InitStreamMode ; begin
13956: LD_INT 0
13958: PPUSH
// streamModeActive := false ;
13959: LD_ADDR_EXP 61
13963: PUSH
13964: LD_INT 0
13966: ST_TO_ADDR
// normalCounter := 36 ;
13967: LD_ADDR_EXP 62
13971: PUSH
13972: LD_INT 36
13974: ST_TO_ADDR
// hardcoreCounter := 16 ;
13975: LD_ADDR_EXP 63
13979: PUSH
13980: LD_INT 16
13982: ST_TO_ADDR
// sRocket := false ;
13983: LD_ADDR_EXP 66
13987: PUSH
13988: LD_INT 0
13990: ST_TO_ADDR
// sSpeed := false ;
13991: LD_ADDR_EXP 65
13995: PUSH
13996: LD_INT 0
13998: ST_TO_ADDR
// sEngine := false ;
13999: LD_ADDR_EXP 67
14003: PUSH
14004: LD_INT 0
14006: ST_TO_ADDR
// sSpec := false ;
14007: LD_ADDR_EXP 64
14011: PUSH
14012: LD_INT 0
14014: ST_TO_ADDR
// sLevel := false ;
14015: LD_ADDR_EXP 68
14019: PUSH
14020: LD_INT 0
14022: ST_TO_ADDR
// sArmoury := false ;
14023: LD_ADDR_EXP 69
14027: PUSH
14028: LD_INT 0
14030: ST_TO_ADDR
// sRadar := false ;
14031: LD_ADDR_EXP 70
14035: PUSH
14036: LD_INT 0
14038: ST_TO_ADDR
// sBunker := false ;
14039: LD_ADDR_EXP 71
14043: PUSH
14044: LD_INT 0
14046: ST_TO_ADDR
// sHack := false ;
14047: LD_ADDR_EXP 72
14051: PUSH
14052: LD_INT 0
14054: ST_TO_ADDR
// sFire := false ;
14055: LD_ADDR_EXP 73
14059: PUSH
14060: LD_INT 0
14062: ST_TO_ADDR
// sRefresh := false ;
14063: LD_ADDR_EXP 74
14067: PUSH
14068: LD_INT 0
14070: ST_TO_ADDR
// sExp := false ;
14071: LD_ADDR_EXP 75
14075: PUSH
14076: LD_INT 0
14078: ST_TO_ADDR
// sDepot := false ;
14079: LD_ADDR_EXP 76
14083: PUSH
14084: LD_INT 0
14086: ST_TO_ADDR
// sFlag := false ;
14087: LD_ADDR_EXP 77
14091: PUSH
14092: LD_INT 0
14094: ST_TO_ADDR
// sKamikadze := false ;
14095: LD_ADDR_EXP 85
14099: PUSH
14100: LD_INT 0
14102: ST_TO_ADDR
// sTroll := false ;
14103: LD_ADDR_EXP 86
14107: PUSH
14108: LD_INT 0
14110: ST_TO_ADDR
// sSlow := false ;
14111: LD_ADDR_EXP 87
14115: PUSH
14116: LD_INT 0
14118: ST_TO_ADDR
// sLack := false ;
14119: LD_ADDR_EXP 88
14123: PUSH
14124: LD_INT 0
14126: ST_TO_ADDR
// sTank := false ;
14127: LD_ADDR_EXP 90
14131: PUSH
14132: LD_INT 0
14134: ST_TO_ADDR
// sRemote := false ;
14135: LD_ADDR_EXP 91
14139: PUSH
14140: LD_INT 0
14142: ST_TO_ADDR
// sPowell := false ;
14143: LD_ADDR_EXP 92
14147: PUSH
14148: LD_INT 0
14150: ST_TO_ADDR
// sTeleport := false ;
14151: LD_ADDR_EXP 95
14155: PUSH
14156: LD_INT 0
14158: ST_TO_ADDR
// sOilTower := false ;
14159: LD_ADDR_EXP 97
14163: PUSH
14164: LD_INT 0
14166: ST_TO_ADDR
// sShovel := false ;
14167: LD_ADDR_EXP 98
14171: PUSH
14172: LD_INT 0
14174: ST_TO_ADDR
// sSheik := false ;
14175: LD_ADDR_EXP 99
14179: PUSH
14180: LD_INT 0
14182: ST_TO_ADDR
// sEarthquake := false ;
14183: LD_ADDR_EXP 101
14187: PUSH
14188: LD_INT 0
14190: ST_TO_ADDR
// sAI := false ;
14191: LD_ADDR_EXP 102
14195: PUSH
14196: LD_INT 0
14198: ST_TO_ADDR
// sCargo := false ;
14199: LD_ADDR_EXP 105
14203: PUSH
14204: LD_INT 0
14206: ST_TO_ADDR
// sDLaser := false ;
14207: LD_ADDR_EXP 106
14211: PUSH
14212: LD_INT 0
14214: ST_TO_ADDR
// sExchange := false ;
14215: LD_ADDR_EXP 107
14219: PUSH
14220: LD_INT 0
14222: ST_TO_ADDR
// sFac := false ;
14223: LD_ADDR_EXP 108
14227: PUSH
14228: LD_INT 0
14230: ST_TO_ADDR
// sPower := false ;
14231: LD_ADDR_EXP 109
14235: PUSH
14236: LD_INT 0
14238: ST_TO_ADDR
// sRandom := false ;
14239: LD_ADDR_EXP 110
14243: PUSH
14244: LD_INT 0
14246: ST_TO_ADDR
// sShield := false ;
14247: LD_ADDR_EXP 111
14251: PUSH
14252: LD_INT 0
14254: ST_TO_ADDR
// sTime := false ;
14255: LD_ADDR_EXP 112
14259: PUSH
14260: LD_INT 0
14262: ST_TO_ADDR
// sTools := false ;
14263: LD_ADDR_EXP 113
14267: PUSH
14268: LD_INT 0
14270: ST_TO_ADDR
// sSold := false ;
14271: LD_ADDR_EXP 78
14275: PUSH
14276: LD_INT 0
14278: ST_TO_ADDR
// sDiff := false ;
14279: LD_ADDR_EXP 79
14283: PUSH
14284: LD_INT 0
14286: ST_TO_ADDR
// sFog := false ;
14287: LD_ADDR_EXP 82
14291: PUSH
14292: LD_INT 0
14294: ST_TO_ADDR
// sReset := false ;
14295: LD_ADDR_EXP 83
14299: PUSH
14300: LD_INT 0
14302: ST_TO_ADDR
// sSun := false ;
14303: LD_ADDR_EXP 84
14307: PUSH
14308: LD_INT 0
14310: ST_TO_ADDR
// sTiger := false ;
14311: LD_ADDR_EXP 80
14315: PUSH
14316: LD_INT 0
14318: ST_TO_ADDR
// sBomb := false ;
14319: LD_ADDR_EXP 81
14323: PUSH
14324: LD_INT 0
14326: ST_TO_ADDR
// sWound := false ;
14327: LD_ADDR_EXP 89
14331: PUSH
14332: LD_INT 0
14334: ST_TO_ADDR
// sBetray := false ;
14335: LD_ADDR_EXP 93
14339: PUSH
14340: LD_INT 0
14342: ST_TO_ADDR
// sContamin := false ;
14343: LD_ADDR_EXP 94
14347: PUSH
14348: LD_INT 0
14350: ST_TO_ADDR
// sOil := false ;
14351: LD_ADDR_EXP 96
14355: PUSH
14356: LD_INT 0
14358: ST_TO_ADDR
// sStu := false ;
14359: LD_ADDR_EXP 100
14363: PUSH
14364: LD_INT 0
14366: ST_TO_ADDR
// sBazooka := false ;
14367: LD_ADDR_EXP 103
14371: PUSH
14372: LD_INT 0
14374: ST_TO_ADDR
// sMortar := false ;
14375: LD_ADDR_EXP 104
14379: PUSH
14380: LD_INT 0
14382: ST_TO_ADDR
// sRanger := false ;
14383: LD_ADDR_EXP 114
14387: PUSH
14388: LD_INT 0
14390: ST_TO_ADDR
// end ;
14391: LD_VAR 0 1
14395: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14396: LD_INT 0
14398: PPUSH
14399: PPUSH
14400: PPUSH
14401: PPUSH
14402: PPUSH
// result := [ ] ;
14403: LD_ADDR_VAR 0 1
14407: PUSH
14408: EMPTY
14409: ST_TO_ADDR
// if campaign_id = 1 then
14410: LD_OWVAR 69
14414: PUSH
14415: LD_INT 1
14417: EQUAL
14418: IFFALSE 17356
// begin case mission_number of 1 :
14420: LD_OWVAR 70
14424: PUSH
14425: LD_INT 1
14427: DOUBLE
14428: EQUAL
14429: IFTRUE 14433
14431: GO 14497
14433: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
14434: LD_ADDR_VAR 0 1
14438: PUSH
14439: LD_INT 2
14441: PUSH
14442: LD_INT 4
14444: PUSH
14445: LD_INT 11
14447: PUSH
14448: LD_INT 12
14450: PUSH
14451: LD_INT 15
14453: PUSH
14454: LD_INT 16
14456: PUSH
14457: LD_INT 22
14459: PUSH
14460: LD_INT 23
14462: PUSH
14463: LD_INT 26
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 101
14479: PUSH
14480: LD_INT 102
14482: PUSH
14483: LD_INT 106
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: LIST
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: ST_TO_ADDR
14495: GO 17354
14497: LD_INT 2
14499: DOUBLE
14500: EQUAL
14501: IFTRUE 14505
14503: GO 14577
14505: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14506: LD_ADDR_VAR 0 1
14510: PUSH
14511: LD_INT 2
14513: PUSH
14514: LD_INT 4
14516: PUSH
14517: LD_INT 11
14519: PUSH
14520: LD_INT 12
14522: PUSH
14523: LD_INT 15
14525: PUSH
14526: LD_INT 16
14528: PUSH
14529: LD_INT 22
14531: PUSH
14532: LD_INT 23
14534: PUSH
14535: LD_INT 26
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: PUSH
14549: LD_INT 101
14551: PUSH
14552: LD_INT 102
14554: PUSH
14555: LD_INT 105
14557: PUSH
14558: LD_INT 106
14560: PUSH
14561: LD_INT 108
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: ST_TO_ADDR
14575: GO 17354
14577: LD_INT 3
14579: DOUBLE
14580: EQUAL
14581: IFTRUE 14585
14583: GO 14661
14585: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14586: LD_ADDR_VAR 0 1
14590: PUSH
14591: LD_INT 2
14593: PUSH
14594: LD_INT 4
14596: PUSH
14597: LD_INT 5
14599: PUSH
14600: LD_INT 11
14602: PUSH
14603: LD_INT 12
14605: PUSH
14606: LD_INT 15
14608: PUSH
14609: LD_INT 16
14611: PUSH
14612: LD_INT 22
14614: PUSH
14615: LD_INT 26
14617: PUSH
14618: LD_INT 36
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 101
14635: PUSH
14636: LD_INT 102
14638: PUSH
14639: LD_INT 105
14641: PUSH
14642: LD_INT 106
14644: PUSH
14645: LD_INT 108
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: ST_TO_ADDR
14659: GO 17354
14661: LD_INT 4
14663: DOUBLE
14664: EQUAL
14665: IFTRUE 14669
14667: GO 14753
14669: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14670: LD_ADDR_VAR 0 1
14674: PUSH
14675: LD_INT 2
14677: PUSH
14678: LD_INT 4
14680: PUSH
14681: LD_INT 5
14683: PUSH
14684: LD_INT 8
14686: PUSH
14687: LD_INT 11
14689: PUSH
14690: LD_INT 12
14692: PUSH
14693: LD_INT 15
14695: PUSH
14696: LD_INT 16
14698: PUSH
14699: LD_INT 22
14701: PUSH
14702: LD_INT 23
14704: PUSH
14705: LD_INT 26
14707: PUSH
14708: LD_INT 36
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 101
14727: PUSH
14728: LD_INT 102
14730: PUSH
14731: LD_INT 105
14733: PUSH
14734: LD_INT 106
14736: PUSH
14737: LD_INT 108
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: ST_TO_ADDR
14751: GO 17354
14753: LD_INT 5
14755: DOUBLE
14756: EQUAL
14757: IFTRUE 14761
14759: GO 14861
14761: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14762: LD_ADDR_VAR 0 1
14766: PUSH
14767: LD_INT 2
14769: PUSH
14770: LD_INT 4
14772: PUSH
14773: LD_INT 5
14775: PUSH
14776: LD_INT 6
14778: PUSH
14779: LD_INT 8
14781: PUSH
14782: LD_INT 11
14784: PUSH
14785: LD_INT 12
14787: PUSH
14788: LD_INT 15
14790: PUSH
14791: LD_INT 16
14793: PUSH
14794: LD_INT 22
14796: PUSH
14797: LD_INT 23
14799: PUSH
14800: LD_INT 25
14802: PUSH
14803: LD_INT 26
14805: PUSH
14806: LD_INT 36
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 101
14827: PUSH
14828: LD_INT 102
14830: PUSH
14831: LD_INT 105
14833: PUSH
14834: LD_INT 106
14836: PUSH
14837: LD_INT 108
14839: PUSH
14840: LD_INT 109
14842: PUSH
14843: LD_INT 112
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: ST_TO_ADDR
14859: GO 17354
14861: LD_INT 6
14863: DOUBLE
14864: EQUAL
14865: IFTRUE 14869
14867: GO 14989
14869: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14870: LD_ADDR_VAR 0 1
14874: PUSH
14875: LD_INT 2
14877: PUSH
14878: LD_INT 4
14880: PUSH
14881: LD_INT 5
14883: PUSH
14884: LD_INT 6
14886: PUSH
14887: LD_INT 8
14889: PUSH
14890: LD_INT 11
14892: PUSH
14893: LD_INT 12
14895: PUSH
14896: LD_INT 15
14898: PUSH
14899: LD_INT 16
14901: PUSH
14902: LD_INT 20
14904: PUSH
14905: LD_INT 21
14907: PUSH
14908: LD_INT 22
14910: PUSH
14911: LD_INT 23
14913: PUSH
14914: LD_INT 25
14916: PUSH
14917: LD_INT 26
14919: PUSH
14920: LD_INT 30
14922: PUSH
14923: LD_INT 31
14925: PUSH
14926: LD_INT 32
14928: PUSH
14929: LD_INT 36
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 101
14955: PUSH
14956: LD_INT 102
14958: PUSH
14959: LD_INT 105
14961: PUSH
14962: LD_INT 106
14964: PUSH
14965: LD_INT 108
14967: PUSH
14968: LD_INT 109
14970: PUSH
14971: LD_INT 112
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: ST_TO_ADDR
14987: GO 17354
14989: LD_INT 7
14991: DOUBLE
14992: EQUAL
14993: IFTRUE 14997
14995: GO 15097
14997: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14998: LD_ADDR_VAR 0 1
15002: PUSH
15003: LD_INT 2
15005: PUSH
15006: LD_INT 4
15008: PUSH
15009: LD_INT 5
15011: PUSH
15012: LD_INT 7
15014: PUSH
15015: LD_INT 11
15017: PUSH
15018: LD_INT 12
15020: PUSH
15021: LD_INT 15
15023: PUSH
15024: LD_INT 16
15026: PUSH
15027: LD_INT 20
15029: PUSH
15030: LD_INT 21
15032: PUSH
15033: LD_INT 22
15035: PUSH
15036: LD_INT 23
15038: PUSH
15039: LD_INT 25
15041: PUSH
15042: LD_INT 26
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 101
15063: PUSH
15064: LD_INT 102
15066: PUSH
15067: LD_INT 103
15069: PUSH
15070: LD_INT 105
15072: PUSH
15073: LD_INT 106
15075: PUSH
15076: LD_INT 108
15078: PUSH
15079: LD_INT 112
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: ST_TO_ADDR
15095: GO 17354
15097: LD_INT 8
15099: DOUBLE
15100: EQUAL
15101: IFTRUE 15105
15103: GO 15233
15105: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
15106: LD_ADDR_VAR 0 1
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 4
15116: PUSH
15117: LD_INT 5
15119: PUSH
15120: LD_INT 6
15122: PUSH
15123: LD_INT 7
15125: PUSH
15126: LD_INT 8
15128: PUSH
15129: LD_INT 11
15131: PUSH
15132: LD_INT 12
15134: PUSH
15135: LD_INT 15
15137: PUSH
15138: LD_INT 16
15140: PUSH
15141: LD_INT 20
15143: PUSH
15144: LD_INT 21
15146: PUSH
15147: LD_INT 22
15149: PUSH
15150: LD_INT 23
15152: PUSH
15153: LD_INT 25
15155: PUSH
15156: LD_INT 26
15158: PUSH
15159: LD_INT 30
15161: PUSH
15162: LD_INT 31
15164: PUSH
15165: LD_INT 32
15167: PUSH
15168: LD_INT 36
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: PUSH
15193: LD_INT 101
15195: PUSH
15196: LD_INT 102
15198: PUSH
15199: LD_INT 103
15201: PUSH
15202: LD_INT 105
15204: PUSH
15205: LD_INT 106
15207: PUSH
15208: LD_INT 108
15210: PUSH
15211: LD_INT 109
15213: PUSH
15214: LD_INT 112
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: ST_TO_ADDR
15231: GO 17354
15233: LD_INT 9
15235: DOUBLE
15236: EQUAL
15237: IFTRUE 15241
15239: GO 15377
15241: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
15242: LD_ADDR_VAR 0 1
15246: PUSH
15247: LD_INT 2
15249: PUSH
15250: LD_INT 4
15252: PUSH
15253: LD_INT 5
15255: PUSH
15256: LD_INT 6
15258: PUSH
15259: LD_INT 7
15261: PUSH
15262: LD_INT 8
15264: PUSH
15265: LD_INT 11
15267: PUSH
15268: LD_INT 12
15270: PUSH
15271: LD_INT 15
15273: PUSH
15274: LD_INT 16
15276: PUSH
15277: LD_INT 20
15279: PUSH
15280: LD_INT 21
15282: PUSH
15283: LD_INT 22
15285: PUSH
15286: LD_INT 23
15288: PUSH
15289: LD_INT 25
15291: PUSH
15292: LD_INT 26
15294: PUSH
15295: LD_INT 28
15297: PUSH
15298: LD_INT 30
15300: PUSH
15301: LD_INT 31
15303: PUSH
15304: LD_INT 32
15306: PUSH
15307: LD_INT 36
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 101
15335: PUSH
15336: LD_INT 102
15338: PUSH
15339: LD_INT 103
15341: PUSH
15342: LD_INT 105
15344: PUSH
15345: LD_INT 106
15347: PUSH
15348: LD_INT 108
15350: PUSH
15351: LD_INT 109
15353: PUSH
15354: LD_INT 112
15356: PUSH
15357: LD_INT 114
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: ST_TO_ADDR
15375: GO 17354
15377: LD_INT 10
15379: DOUBLE
15380: EQUAL
15381: IFTRUE 15385
15383: GO 15569
15385: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
15386: LD_ADDR_VAR 0 1
15390: PUSH
15391: LD_INT 2
15393: PUSH
15394: LD_INT 4
15396: PUSH
15397: LD_INT 5
15399: PUSH
15400: LD_INT 6
15402: PUSH
15403: LD_INT 7
15405: PUSH
15406: LD_INT 8
15408: PUSH
15409: LD_INT 9
15411: PUSH
15412: LD_INT 10
15414: PUSH
15415: LD_INT 11
15417: PUSH
15418: LD_INT 12
15420: PUSH
15421: LD_INT 13
15423: PUSH
15424: LD_INT 14
15426: PUSH
15427: LD_INT 15
15429: PUSH
15430: LD_INT 16
15432: PUSH
15433: LD_INT 17
15435: PUSH
15436: LD_INT 18
15438: PUSH
15439: LD_INT 19
15441: PUSH
15442: LD_INT 20
15444: PUSH
15445: LD_INT 21
15447: PUSH
15448: LD_INT 22
15450: PUSH
15451: LD_INT 23
15453: PUSH
15454: LD_INT 24
15456: PUSH
15457: LD_INT 25
15459: PUSH
15460: LD_INT 26
15462: PUSH
15463: LD_INT 28
15465: PUSH
15466: LD_INT 30
15468: PUSH
15469: LD_INT 31
15471: PUSH
15472: LD_INT 32
15474: PUSH
15475: LD_INT 36
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 101
15511: PUSH
15512: LD_INT 102
15514: PUSH
15515: LD_INT 103
15517: PUSH
15518: LD_INT 104
15520: PUSH
15521: LD_INT 105
15523: PUSH
15524: LD_INT 106
15526: PUSH
15527: LD_INT 107
15529: PUSH
15530: LD_INT 108
15532: PUSH
15533: LD_INT 109
15535: PUSH
15536: LD_INT 110
15538: PUSH
15539: LD_INT 111
15541: PUSH
15542: LD_INT 112
15544: PUSH
15545: LD_INT 114
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: ST_TO_ADDR
15567: GO 17354
15569: LD_INT 11
15571: DOUBLE
15572: EQUAL
15573: IFTRUE 15577
15575: GO 15769
15577: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15578: LD_ADDR_VAR 0 1
15582: PUSH
15583: LD_INT 2
15585: PUSH
15586: LD_INT 3
15588: PUSH
15589: LD_INT 4
15591: PUSH
15592: LD_INT 5
15594: PUSH
15595: LD_INT 6
15597: PUSH
15598: LD_INT 7
15600: PUSH
15601: LD_INT 8
15603: PUSH
15604: LD_INT 9
15606: PUSH
15607: LD_INT 10
15609: PUSH
15610: LD_INT 11
15612: PUSH
15613: LD_INT 12
15615: PUSH
15616: LD_INT 13
15618: PUSH
15619: LD_INT 14
15621: PUSH
15622: LD_INT 15
15624: PUSH
15625: LD_INT 16
15627: PUSH
15628: LD_INT 17
15630: PUSH
15631: LD_INT 18
15633: PUSH
15634: LD_INT 19
15636: PUSH
15637: LD_INT 20
15639: PUSH
15640: LD_INT 21
15642: PUSH
15643: LD_INT 22
15645: PUSH
15646: LD_INT 23
15648: PUSH
15649: LD_INT 24
15651: PUSH
15652: LD_INT 25
15654: PUSH
15655: LD_INT 26
15657: PUSH
15658: LD_INT 28
15660: PUSH
15661: LD_INT 30
15663: PUSH
15664: LD_INT 31
15666: PUSH
15667: LD_INT 32
15669: PUSH
15670: LD_INT 34
15672: PUSH
15673: LD_INT 36
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 101
15711: PUSH
15712: LD_INT 102
15714: PUSH
15715: LD_INT 103
15717: PUSH
15718: LD_INT 104
15720: PUSH
15721: LD_INT 105
15723: PUSH
15724: LD_INT 106
15726: PUSH
15727: LD_INT 107
15729: PUSH
15730: LD_INT 108
15732: PUSH
15733: LD_INT 109
15735: PUSH
15736: LD_INT 110
15738: PUSH
15739: LD_INT 111
15741: PUSH
15742: LD_INT 112
15744: PUSH
15745: LD_INT 114
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: ST_TO_ADDR
15767: GO 17354
15769: LD_INT 12
15771: DOUBLE
15772: EQUAL
15773: IFTRUE 15777
15775: GO 15985
15777: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15778: LD_ADDR_VAR 0 1
15782: PUSH
15783: LD_INT 1
15785: PUSH
15786: LD_INT 2
15788: PUSH
15789: LD_INT 3
15791: PUSH
15792: LD_INT 4
15794: PUSH
15795: LD_INT 5
15797: PUSH
15798: LD_INT 6
15800: PUSH
15801: LD_INT 7
15803: PUSH
15804: LD_INT 8
15806: PUSH
15807: LD_INT 9
15809: PUSH
15810: LD_INT 10
15812: PUSH
15813: LD_INT 11
15815: PUSH
15816: LD_INT 12
15818: PUSH
15819: LD_INT 13
15821: PUSH
15822: LD_INT 14
15824: PUSH
15825: LD_INT 15
15827: PUSH
15828: LD_INT 16
15830: PUSH
15831: LD_INT 17
15833: PUSH
15834: LD_INT 18
15836: PUSH
15837: LD_INT 19
15839: PUSH
15840: LD_INT 20
15842: PUSH
15843: LD_INT 21
15845: PUSH
15846: LD_INT 22
15848: PUSH
15849: LD_INT 23
15851: PUSH
15852: LD_INT 24
15854: PUSH
15855: LD_INT 25
15857: PUSH
15858: LD_INT 26
15860: PUSH
15861: LD_INT 27
15863: PUSH
15864: LD_INT 28
15866: PUSH
15867: LD_INT 30
15869: PUSH
15870: LD_INT 31
15872: PUSH
15873: LD_INT 32
15875: PUSH
15876: LD_INT 33
15878: PUSH
15879: LD_INT 34
15881: PUSH
15882: LD_INT 36
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: PUSH
15921: LD_INT 101
15923: PUSH
15924: LD_INT 102
15926: PUSH
15927: LD_INT 103
15929: PUSH
15930: LD_INT 104
15932: PUSH
15933: LD_INT 105
15935: PUSH
15936: LD_INT 106
15938: PUSH
15939: LD_INT 107
15941: PUSH
15942: LD_INT 108
15944: PUSH
15945: LD_INT 109
15947: PUSH
15948: LD_INT 110
15950: PUSH
15951: LD_INT 111
15953: PUSH
15954: LD_INT 112
15956: PUSH
15957: LD_INT 113
15959: PUSH
15960: LD_INT 114
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: ST_TO_ADDR
15983: GO 17354
15985: LD_INT 13
15987: DOUBLE
15988: EQUAL
15989: IFTRUE 15993
15991: GO 16189
15993: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15994: LD_ADDR_VAR 0 1
15998: PUSH
15999: LD_INT 1
16001: PUSH
16002: LD_INT 2
16004: PUSH
16005: LD_INT 3
16007: PUSH
16008: LD_INT 4
16010: PUSH
16011: LD_INT 5
16013: PUSH
16014: LD_INT 8
16016: PUSH
16017: LD_INT 9
16019: PUSH
16020: LD_INT 10
16022: PUSH
16023: LD_INT 11
16025: PUSH
16026: LD_INT 12
16028: PUSH
16029: LD_INT 14
16031: PUSH
16032: LD_INT 15
16034: PUSH
16035: LD_INT 16
16037: PUSH
16038: LD_INT 17
16040: PUSH
16041: LD_INT 18
16043: PUSH
16044: LD_INT 19
16046: PUSH
16047: LD_INT 20
16049: PUSH
16050: LD_INT 21
16052: PUSH
16053: LD_INT 22
16055: PUSH
16056: LD_INT 23
16058: PUSH
16059: LD_INT 24
16061: PUSH
16062: LD_INT 25
16064: PUSH
16065: LD_INT 26
16067: PUSH
16068: LD_INT 27
16070: PUSH
16071: LD_INT 28
16073: PUSH
16074: LD_INT 30
16076: PUSH
16077: LD_INT 31
16079: PUSH
16080: LD_INT 32
16082: PUSH
16083: LD_INT 33
16085: PUSH
16086: LD_INT 34
16088: PUSH
16089: LD_INT 36
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 101
16127: PUSH
16128: LD_INT 102
16130: PUSH
16131: LD_INT 103
16133: PUSH
16134: LD_INT 104
16136: PUSH
16137: LD_INT 105
16139: PUSH
16140: LD_INT 106
16142: PUSH
16143: LD_INT 107
16145: PUSH
16146: LD_INT 108
16148: PUSH
16149: LD_INT 109
16151: PUSH
16152: LD_INT 110
16154: PUSH
16155: LD_INT 111
16157: PUSH
16158: LD_INT 112
16160: PUSH
16161: LD_INT 113
16163: PUSH
16164: LD_INT 114
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: ST_TO_ADDR
16187: GO 17354
16189: LD_INT 14
16191: DOUBLE
16192: EQUAL
16193: IFTRUE 16197
16195: GO 16409
16197: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
16198: LD_ADDR_VAR 0 1
16202: PUSH
16203: LD_INT 1
16205: PUSH
16206: LD_INT 2
16208: PUSH
16209: LD_INT 3
16211: PUSH
16212: LD_INT 4
16214: PUSH
16215: LD_INT 5
16217: PUSH
16218: LD_INT 6
16220: PUSH
16221: LD_INT 7
16223: PUSH
16224: LD_INT 8
16226: PUSH
16227: LD_INT 9
16229: PUSH
16230: LD_INT 10
16232: PUSH
16233: LD_INT 11
16235: PUSH
16236: LD_INT 12
16238: PUSH
16239: LD_INT 13
16241: PUSH
16242: LD_INT 14
16244: PUSH
16245: LD_INT 15
16247: PUSH
16248: LD_INT 16
16250: PUSH
16251: LD_INT 17
16253: PUSH
16254: LD_INT 18
16256: PUSH
16257: LD_INT 19
16259: PUSH
16260: LD_INT 20
16262: PUSH
16263: LD_INT 21
16265: PUSH
16266: LD_INT 22
16268: PUSH
16269: LD_INT 23
16271: PUSH
16272: LD_INT 24
16274: PUSH
16275: LD_INT 25
16277: PUSH
16278: LD_INT 26
16280: PUSH
16281: LD_INT 27
16283: PUSH
16284: LD_INT 28
16286: PUSH
16287: LD_INT 29
16289: PUSH
16290: LD_INT 30
16292: PUSH
16293: LD_INT 31
16295: PUSH
16296: LD_INT 32
16298: PUSH
16299: LD_INT 33
16301: PUSH
16302: LD_INT 34
16304: PUSH
16305: LD_INT 36
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: PUSH
16345: LD_INT 101
16347: PUSH
16348: LD_INT 102
16350: PUSH
16351: LD_INT 103
16353: PUSH
16354: LD_INT 104
16356: PUSH
16357: LD_INT 105
16359: PUSH
16360: LD_INT 106
16362: PUSH
16363: LD_INT 107
16365: PUSH
16366: LD_INT 108
16368: PUSH
16369: LD_INT 109
16371: PUSH
16372: LD_INT 110
16374: PUSH
16375: LD_INT 111
16377: PUSH
16378: LD_INT 112
16380: PUSH
16381: LD_INT 113
16383: PUSH
16384: LD_INT 114
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: ST_TO_ADDR
16407: GO 17354
16409: LD_INT 15
16411: DOUBLE
16412: EQUAL
16413: IFTRUE 16417
16415: GO 16629
16417: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
16418: LD_ADDR_VAR 0 1
16422: PUSH
16423: LD_INT 1
16425: PUSH
16426: LD_INT 2
16428: PUSH
16429: LD_INT 3
16431: PUSH
16432: LD_INT 4
16434: PUSH
16435: LD_INT 5
16437: PUSH
16438: LD_INT 6
16440: PUSH
16441: LD_INT 7
16443: PUSH
16444: LD_INT 8
16446: PUSH
16447: LD_INT 9
16449: PUSH
16450: LD_INT 10
16452: PUSH
16453: LD_INT 11
16455: PUSH
16456: LD_INT 12
16458: PUSH
16459: LD_INT 13
16461: PUSH
16462: LD_INT 14
16464: PUSH
16465: LD_INT 15
16467: PUSH
16468: LD_INT 16
16470: PUSH
16471: LD_INT 17
16473: PUSH
16474: LD_INT 18
16476: PUSH
16477: LD_INT 19
16479: PUSH
16480: LD_INT 20
16482: PUSH
16483: LD_INT 21
16485: PUSH
16486: LD_INT 22
16488: PUSH
16489: LD_INT 23
16491: PUSH
16492: LD_INT 24
16494: PUSH
16495: LD_INT 25
16497: PUSH
16498: LD_INT 26
16500: PUSH
16501: LD_INT 27
16503: PUSH
16504: LD_INT 28
16506: PUSH
16507: LD_INT 29
16509: PUSH
16510: LD_INT 30
16512: PUSH
16513: LD_INT 31
16515: PUSH
16516: LD_INT 32
16518: PUSH
16519: LD_INT 33
16521: PUSH
16522: LD_INT 34
16524: PUSH
16525: LD_INT 36
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 101
16567: PUSH
16568: LD_INT 102
16570: PUSH
16571: LD_INT 103
16573: PUSH
16574: LD_INT 104
16576: PUSH
16577: LD_INT 105
16579: PUSH
16580: LD_INT 106
16582: PUSH
16583: LD_INT 107
16585: PUSH
16586: LD_INT 108
16588: PUSH
16589: LD_INT 109
16591: PUSH
16592: LD_INT 110
16594: PUSH
16595: LD_INT 111
16597: PUSH
16598: LD_INT 112
16600: PUSH
16601: LD_INT 113
16603: PUSH
16604: LD_INT 114
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: ST_TO_ADDR
16627: GO 17354
16629: LD_INT 16
16631: DOUBLE
16632: EQUAL
16633: IFTRUE 16637
16635: GO 16761
16637: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16638: LD_ADDR_VAR 0 1
16642: PUSH
16643: LD_INT 2
16645: PUSH
16646: LD_INT 4
16648: PUSH
16649: LD_INT 5
16651: PUSH
16652: LD_INT 7
16654: PUSH
16655: LD_INT 11
16657: PUSH
16658: LD_INT 12
16660: PUSH
16661: LD_INT 15
16663: PUSH
16664: LD_INT 16
16666: PUSH
16667: LD_INT 20
16669: PUSH
16670: LD_INT 21
16672: PUSH
16673: LD_INT 22
16675: PUSH
16676: LD_INT 23
16678: PUSH
16679: LD_INT 25
16681: PUSH
16682: LD_INT 26
16684: PUSH
16685: LD_INT 30
16687: PUSH
16688: LD_INT 31
16690: PUSH
16691: LD_INT 32
16693: PUSH
16694: LD_INT 33
16696: PUSH
16697: LD_INT 34
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 101
16723: PUSH
16724: LD_INT 102
16726: PUSH
16727: LD_INT 103
16729: PUSH
16730: LD_INT 106
16732: PUSH
16733: LD_INT 108
16735: PUSH
16736: LD_INT 112
16738: PUSH
16739: LD_INT 113
16741: PUSH
16742: LD_INT 114
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: ST_TO_ADDR
16759: GO 17354
16761: LD_INT 17
16763: DOUBLE
16764: EQUAL
16765: IFTRUE 16769
16767: GO 16981
16769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16770: LD_ADDR_VAR 0 1
16774: PUSH
16775: LD_INT 1
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 3
16783: PUSH
16784: LD_INT 4
16786: PUSH
16787: LD_INT 5
16789: PUSH
16790: LD_INT 6
16792: PUSH
16793: LD_INT 7
16795: PUSH
16796: LD_INT 8
16798: PUSH
16799: LD_INT 9
16801: PUSH
16802: LD_INT 10
16804: PUSH
16805: LD_INT 11
16807: PUSH
16808: LD_INT 12
16810: PUSH
16811: LD_INT 13
16813: PUSH
16814: LD_INT 14
16816: PUSH
16817: LD_INT 15
16819: PUSH
16820: LD_INT 16
16822: PUSH
16823: LD_INT 17
16825: PUSH
16826: LD_INT 18
16828: PUSH
16829: LD_INT 19
16831: PUSH
16832: LD_INT 20
16834: PUSH
16835: LD_INT 21
16837: PUSH
16838: LD_INT 22
16840: PUSH
16841: LD_INT 23
16843: PUSH
16844: LD_INT 24
16846: PUSH
16847: LD_INT 25
16849: PUSH
16850: LD_INT 26
16852: PUSH
16853: LD_INT 27
16855: PUSH
16856: LD_INT 28
16858: PUSH
16859: LD_INT 29
16861: PUSH
16862: LD_INT 30
16864: PUSH
16865: LD_INT 31
16867: PUSH
16868: LD_INT 32
16870: PUSH
16871: LD_INT 33
16873: PUSH
16874: LD_INT 34
16876: PUSH
16877: LD_INT 36
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 101
16919: PUSH
16920: LD_INT 102
16922: PUSH
16923: LD_INT 103
16925: PUSH
16926: LD_INT 104
16928: PUSH
16929: LD_INT 105
16931: PUSH
16932: LD_INT 106
16934: PUSH
16935: LD_INT 107
16937: PUSH
16938: LD_INT 108
16940: PUSH
16941: LD_INT 109
16943: PUSH
16944: LD_INT 110
16946: PUSH
16947: LD_INT 111
16949: PUSH
16950: LD_INT 112
16952: PUSH
16953: LD_INT 113
16955: PUSH
16956: LD_INT 114
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: ST_TO_ADDR
16979: GO 17354
16981: LD_INT 18
16983: DOUBLE
16984: EQUAL
16985: IFTRUE 16989
16987: GO 17125
16989: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16990: LD_ADDR_VAR 0 1
16994: PUSH
16995: LD_INT 2
16997: PUSH
16998: LD_INT 4
17000: PUSH
17001: LD_INT 5
17003: PUSH
17004: LD_INT 7
17006: PUSH
17007: LD_INT 11
17009: PUSH
17010: LD_INT 12
17012: PUSH
17013: LD_INT 15
17015: PUSH
17016: LD_INT 16
17018: PUSH
17019: LD_INT 20
17021: PUSH
17022: LD_INT 21
17024: PUSH
17025: LD_INT 22
17027: PUSH
17028: LD_INT 23
17030: PUSH
17031: LD_INT 25
17033: PUSH
17034: LD_INT 26
17036: PUSH
17037: LD_INT 30
17039: PUSH
17040: LD_INT 31
17042: PUSH
17043: LD_INT 32
17045: PUSH
17046: LD_INT 33
17048: PUSH
17049: LD_INT 34
17051: PUSH
17052: LD_INT 35
17054: PUSH
17055: LD_INT 36
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 101
17083: PUSH
17084: LD_INT 102
17086: PUSH
17087: LD_INT 103
17089: PUSH
17090: LD_INT 106
17092: PUSH
17093: LD_INT 108
17095: PUSH
17096: LD_INT 112
17098: PUSH
17099: LD_INT 113
17101: PUSH
17102: LD_INT 114
17104: PUSH
17105: LD_INT 115
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: ST_TO_ADDR
17123: GO 17354
17125: LD_INT 19
17127: DOUBLE
17128: EQUAL
17129: IFTRUE 17133
17131: GO 17353
17133: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
17134: LD_ADDR_VAR 0 1
17138: PUSH
17139: LD_INT 1
17141: PUSH
17142: LD_INT 2
17144: PUSH
17145: LD_INT 3
17147: PUSH
17148: LD_INT 4
17150: PUSH
17151: LD_INT 5
17153: PUSH
17154: LD_INT 6
17156: PUSH
17157: LD_INT 7
17159: PUSH
17160: LD_INT 8
17162: PUSH
17163: LD_INT 9
17165: PUSH
17166: LD_INT 10
17168: PUSH
17169: LD_INT 11
17171: PUSH
17172: LD_INT 12
17174: PUSH
17175: LD_INT 13
17177: PUSH
17178: LD_INT 14
17180: PUSH
17181: LD_INT 15
17183: PUSH
17184: LD_INT 16
17186: PUSH
17187: LD_INT 17
17189: PUSH
17190: LD_INT 18
17192: PUSH
17193: LD_INT 19
17195: PUSH
17196: LD_INT 20
17198: PUSH
17199: LD_INT 21
17201: PUSH
17202: LD_INT 22
17204: PUSH
17205: LD_INT 23
17207: PUSH
17208: LD_INT 24
17210: PUSH
17211: LD_INT 25
17213: PUSH
17214: LD_INT 26
17216: PUSH
17217: LD_INT 27
17219: PUSH
17220: LD_INT 28
17222: PUSH
17223: LD_INT 29
17225: PUSH
17226: LD_INT 30
17228: PUSH
17229: LD_INT 31
17231: PUSH
17232: LD_INT 32
17234: PUSH
17235: LD_INT 33
17237: PUSH
17238: LD_INT 34
17240: PUSH
17241: LD_INT 35
17243: PUSH
17244: LD_INT 36
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 101
17287: PUSH
17288: LD_INT 102
17290: PUSH
17291: LD_INT 103
17293: PUSH
17294: LD_INT 104
17296: PUSH
17297: LD_INT 105
17299: PUSH
17300: LD_INT 106
17302: PUSH
17303: LD_INT 107
17305: PUSH
17306: LD_INT 108
17308: PUSH
17309: LD_INT 109
17311: PUSH
17312: LD_INT 110
17314: PUSH
17315: LD_INT 111
17317: PUSH
17318: LD_INT 112
17320: PUSH
17321: LD_INT 113
17323: PUSH
17324: LD_INT 114
17326: PUSH
17327: LD_INT 115
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: ST_TO_ADDR
17351: GO 17354
17353: POP
// end else
17354: GO 17573
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
17356: LD_ADDR_VAR 0 1
17360: PUSH
17361: LD_INT 1
17363: PUSH
17364: LD_INT 2
17366: PUSH
17367: LD_INT 3
17369: PUSH
17370: LD_INT 4
17372: PUSH
17373: LD_INT 5
17375: PUSH
17376: LD_INT 6
17378: PUSH
17379: LD_INT 7
17381: PUSH
17382: LD_INT 8
17384: PUSH
17385: LD_INT 9
17387: PUSH
17388: LD_INT 10
17390: PUSH
17391: LD_INT 11
17393: PUSH
17394: LD_INT 12
17396: PUSH
17397: LD_INT 13
17399: PUSH
17400: LD_INT 14
17402: PUSH
17403: LD_INT 15
17405: PUSH
17406: LD_INT 16
17408: PUSH
17409: LD_INT 17
17411: PUSH
17412: LD_INT 18
17414: PUSH
17415: LD_INT 19
17417: PUSH
17418: LD_INT 20
17420: PUSH
17421: LD_INT 21
17423: PUSH
17424: LD_INT 22
17426: PUSH
17427: LD_INT 23
17429: PUSH
17430: LD_INT 24
17432: PUSH
17433: LD_INT 25
17435: PUSH
17436: LD_INT 26
17438: PUSH
17439: LD_INT 27
17441: PUSH
17442: LD_INT 28
17444: PUSH
17445: LD_INT 29
17447: PUSH
17448: LD_INT 30
17450: PUSH
17451: LD_INT 31
17453: PUSH
17454: LD_INT 32
17456: PUSH
17457: LD_INT 33
17459: PUSH
17460: LD_INT 34
17462: PUSH
17463: LD_INT 35
17465: PUSH
17466: LD_INT 36
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 101
17509: PUSH
17510: LD_INT 102
17512: PUSH
17513: LD_INT 103
17515: PUSH
17516: LD_INT 104
17518: PUSH
17519: LD_INT 105
17521: PUSH
17522: LD_INT 106
17524: PUSH
17525: LD_INT 107
17527: PUSH
17528: LD_INT 108
17530: PUSH
17531: LD_INT 109
17533: PUSH
17534: LD_INT 110
17536: PUSH
17537: LD_INT 111
17539: PUSH
17540: LD_INT 112
17542: PUSH
17543: LD_INT 113
17545: PUSH
17546: LD_INT 114
17548: PUSH
17549: LD_INT 115
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: ST_TO_ADDR
// if result then
17573: LD_VAR 0 1
17577: IFFALSE 17866
// begin normal :=  ;
17579: LD_ADDR_VAR 0 3
17583: PUSH
17584: LD_STRING 
17586: ST_TO_ADDR
// hardcore :=  ;
17587: LD_ADDR_VAR 0 4
17591: PUSH
17592: LD_STRING 
17594: ST_TO_ADDR
// for i = 1 to normalCounter do
17595: LD_ADDR_VAR 0 5
17599: PUSH
17600: DOUBLE
17601: LD_INT 1
17603: DEC
17604: ST_TO_ADDR
17605: LD_EXP 62
17609: PUSH
17610: FOR_TO
17611: IFFALSE 17712
// begin tmp := 0 ;
17613: LD_ADDR_VAR 0 2
17617: PUSH
17618: LD_STRING 0
17620: ST_TO_ADDR
// if result [ 1 ] then
17621: LD_VAR 0 1
17625: PUSH
17626: LD_INT 1
17628: ARRAY
17629: IFFALSE 17694
// if result [ 1 ] [ 1 ] = i then
17631: LD_VAR 0 1
17635: PUSH
17636: LD_INT 1
17638: ARRAY
17639: PUSH
17640: LD_INT 1
17642: ARRAY
17643: PUSH
17644: LD_VAR 0 5
17648: EQUAL
17649: IFFALSE 17694
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17651: LD_ADDR_VAR 0 1
17655: PUSH
17656: LD_VAR 0 1
17660: PPUSH
17661: LD_INT 1
17663: PPUSH
17664: LD_VAR 0 1
17668: PUSH
17669: LD_INT 1
17671: ARRAY
17672: PPUSH
17673: LD_INT 1
17675: PPUSH
17676: CALL_OW 3
17680: PPUSH
17681: CALL_OW 1
17685: ST_TO_ADDR
// tmp := 1 ;
17686: LD_ADDR_VAR 0 2
17690: PUSH
17691: LD_STRING 1
17693: ST_TO_ADDR
// end ; normal := normal & tmp ;
17694: LD_ADDR_VAR 0 3
17698: PUSH
17699: LD_VAR 0 3
17703: PUSH
17704: LD_VAR 0 2
17708: STR
17709: ST_TO_ADDR
// end ;
17710: GO 17610
17712: POP
17713: POP
// for i = 1 to hardcoreCounter do
17714: LD_ADDR_VAR 0 5
17718: PUSH
17719: DOUBLE
17720: LD_INT 1
17722: DEC
17723: ST_TO_ADDR
17724: LD_EXP 63
17728: PUSH
17729: FOR_TO
17730: IFFALSE 17835
// begin tmp := 0 ;
17732: LD_ADDR_VAR 0 2
17736: PUSH
17737: LD_STRING 0
17739: ST_TO_ADDR
// if result [ 2 ] then
17740: LD_VAR 0 1
17744: PUSH
17745: LD_INT 2
17747: ARRAY
17748: IFFALSE 17817
// if result [ 2 ] [ 1 ] = 100 + i then
17750: LD_VAR 0 1
17754: PUSH
17755: LD_INT 2
17757: ARRAY
17758: PUSH
17759: LD_INT 1
17761: ARRAY
17762: PUSH
17763: LD_INT 100
17765: PUSH
17766: LD_VAR 0 5
17770: PLUS
17771: EQUAL
17772: IFFALSE 17817
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17774: LD_ADDR_VAR 0 1
17778: PUSH
17779: LD_VAR 0 1
17783: PPUSH
17784: LD_INT 2
17786: PPUSH
17787: LD_VAR 0 1
17791: PUSH
17792: LD_INT 2
17794: ARRAY
17795: PPUSH
17796: LD_INT 1
17798: PPUSH
17799: CALL_OW 3
17803: PPUSH
17804: CALL_OW 1
17808: ST_TO_ADDR
// tmp := 1 ;
17809: LD_ADDR_VAR 0 2
17813: PUSH
17814: LD_STRING 1
17816: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17817: LD_ADDR_VAR 0 4
17821: PUSH
17822: LD_VAR 0 4
17826: PUSH
17827: LD_VAR 0 2
17831: STR
17832: ST_TO_ADDR
// end ;
17833: GO 17729
17835: POP
17836: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17837: LD_STRING getStreamItemsFromMission("
17839: PUSH
17840: LD_VAR 0 3
17844: STR
17845: PUSH
17846: LD_STRING ","
17848: STR
17849: PUSH
17850: LD_VAR 0 4
17854: STR
17855: PUSH
17856: LD_STRING ")
17858: STR
17859: PPUSH
17860: CALL_OW 559
// end else
17864: GO 17873
// ToLua ( getStreamItemsFromMission("","") ) ;
17866: LD_STRING getStreamItemsFromMission("","")
17868: PPUSH
17869: CALL_OW 559
// end ;
17873: LD_VAR 0 1
17877: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17878: LD_EXP 61
17882: PUSH
17883: LD_EXP 66
17887: AND
17888: IFFALSE 18012
17890: GO 17892
17892: DISABLE
17893: LD_INT 0
17895: PPUSH
17896: PPUSH
// begin enable ;
17897: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17898: LD_ADDR_VAR 0 2
17902: PUSH
17903: LD_INT 22
17905: PUSH
17906: LD_OWVAR 2
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 2
17917: PUSH
17918: LD_INT 34
17920: PUSH
17921: LD_INT 7
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 34
17930: PUSH
17931: LD_INT 45
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 34
17940: PUSH
17941: LD_INT 28
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 34
17950: PUSH
17951: LD_INT 47
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PPUSH
17969: CALL_OW 69
17973: ST_TO_ADDR
// if not tmp then
17974: LD_VAR 0 2
17978: NOT
17979: IFFALSE 17983
// exit ;
17981: GO 18012
// for i in tmp do
17983: LD_ADDR_VAR 0 1
17987: PUSH
17988: LD_VAR 0 2
17992: PUSH
17993: FOR_IN
17994: IFFALSE 18010
// begin SetLives ( i , 0 ) ;
17996: LD_VAR 0 1
18000: PPUSH
18001: LD_INT 0
18003: PPUSH
18004: CALL_OW 234
// end ;
18008: GO 17993
18010: POP
18011: POP
// end ;
18012: PPOPN 2
18014: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18015: LD_EXP 61
18019: PUSH
18020: LD_EXP 67
18024: AND
18025: IFFALSE 18109
18027: GO 18029
18029: DISABLE
18030: LD_INT 0
18032: PPUSH
18033: PPUSH
// begin enable ;
18034: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18035: LD_ADDR_VAR 0 2
18039: PUSH
18040: LD_INT 22
18042: PUSH
18043: LD_OWVAR 2
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 32
18054: PUSH
18055: LD_INT 3
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PPUSH
18066: CALL_OW 69
18070: ST_TO_ADDR
// if not tmp then
18071: LD_VAR 0 2
18075: NOT
18076: IFFALSE 18080
// exit ;
18078: GO 18109
// for i in tmp do
18080: LD_ADDR_VAR 0 1
18084: PUSH
18085: LD_VAR 0 2
18089: PUSH
18090: FOR_IN
18091: IFFALSE 18107
// begin SetLives ( i , 0 ) ;
18093: LD_VAR 0 1
18097: PPUSH
18098: LD_INT 0
18100: PPUSH
18101: CALL_OW 234
// end ;
18105: GO 18090
18107: POP
18108: POP
// end ;
18109: PPOPN 2
18111: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18112: LD_EXP 61
18116: PUSH
18117: LD_EXP 64
18121: AND
18122: IFFALSE 18215
18124: GO 18126
18126: DISABLE
18127: LD_INT 0
18129: PPUSH
// begin enable ;
18130: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18131: LD_ADDR_VAR 0 1
18135: PUSH
18136: LD_INT 22
18138: PUSH
18139: LD_OWVAR 2
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 2
18150: PUSH
18151: LD_INT 25
18153: PUSH
18154: LD_INT 5
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 25
18163: PUSH
18164: LD_INT 9
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 25
18173: PUSH
18174: LD_INT 8
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PPUSH
18191: CALL_OW 69
18195: PUSH
18196: FOR_IN
18197: IFFALSE 18213
// begin SetClass ( i , 1 ) ;
18199: LD_VAR 0 1
18203: PPUSH
18204: LD_INT 1
18206: PPUSH
18207: CALL_OW 336
// end ;
18211: GO 18196
18213: POP
18214: POP
// end ;
18215: PPOPN 1
18217: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18218: LD_EXP 61
18222: PUSH
18223: LD_EXP 65
18227: AND
18228: PUSH
18229: LD_OWVAR 65
18233: PUSH
18234: LD_INT 7
18236: LESS
18237: AND
18238: IFFALSE 18252
18240: GO 18242
18242: DISABLE
// begin enable ;
18243: ENABLE
// game_speed := 7 ;
18244: LD_ADDR_OWVAR 65
18248: PUSH
18249: LD_INT 7
18251: ST_TO_ADDR
// end ;
18252: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18253: LD_EXP 61
18257: PUSH
18258: LD_EXP 68
18262: AND
18263: IFFALSE 18465
18265: GO 18267
18267: DISABLE
18268: LD_INT 0
18270: PPUSH
18271: PPUSH
18272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18273: LD_ADDR_VAR 0 3
18277: PUSH
18278: LD_INT 81
18280: PUSH
18281: LD_OWVAR 2
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 21
18292: PUSH
18293: LD_INT 1
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PPUSH
18304: CALL_OW 69
18308: ST_TO_ADDR
// if not tmp then
18309: LD_VAR 0 3
18313: NOT
18314: IFFALSE 18318
// exit ;
18316: GO 18465
// if tmp > 5 then
18318: LD_VAR 0 3
18322: PUSH
18323: LD_INT 5
18325: GREATER
18326: IFFALSE 18338
// k := 5 else
18328: LD_ADDR_VAR 0 2
18332: PUSH
18333: LD_INT 5
18335: ST_TO_ADDR
18336: GO 18348
// k := tmp ;
18338: LD_ADDR_VAR 0 2
18342: PUSH
18343: LD_VAR 0 3
18347: ST_TO_ADDR
// for i := 1 to k do
18348: LD_ADDR_VAR 0 1
18352: PUSH
18353: DOUBLE
18354: LD_INT 1
18356: DEC
18357: ST_TO_ADDR
18358: LD_VAR 0 2
18362: PUSH
18363: FOR_TO
18364: IFFALSE 18463
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18366: LD_VAR 0 3
18370: PUSH
18371: LD_VAR 0 1
18375: ARRAY
18376: PPUSH
18377: LD_VAR 0 1
18381: PUSH
18382: LD_INT 4
18384: MOD
18385: PUSH
18386: LD_INT 1
18388: PLUS
18389: PPUSH
18390: CALL_OW 259
18394: PUSH
18395: LD_INT 10
18397: LESS
18398: IFFALSE 18461
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18400: LD_VAR 0 3
18404: PUSH
18405: LD_VAR 0 1
18409: ARRAY
18410: PPUSH
18411: LD_VAR 0 1
18415: PUSH
18416: LD_INT 4
18418: MOD
18419: PUSH
18420: LD_INT 1
18422: PLUS
18423: PPUSH
18424: LD_VAR 0 3
18428: PUSH
18429: LD_VAR 0 1
18433: ARRAY
18434: PPUSH
18435: LD_VAR 0 1
18439: PUSH
18440: LD_INT 4
18442: MOD
18443: PUSH
18444: LD_INT 1
18446: PLUS
18447: PPUSH
18448: CALL_OW 259
18452: PUSH
18453: LD_INT 1
18455: PLUS
18456: PPUSH
18457: CALL_OW 237
18461: GO 18363
18463: POP
18464: POP
// end ;
18465: PPOPN 3
18467: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18468: LD_EXP 61
18472: PUSH
18473: LD_EXP 69
18477: AND
18478: IFFALSE 18498
18480: GO 18482
18482: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18483: LD_INT 4
18485: PPUSH
18486: LD_OWVAR 2
18490: PPUSH
18491: LD_INT 0
18493: PPUSH
18494: CALL_OW 324
18498: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18499: LD_EXP 61
18503: PUSH
18504: LD_EXP 98
18508: AND
18509: IFFALSE 18529
18511: GO 18513
18513: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18514: LD_INT 19
18516: PPUSH
18517: LD_OWVAR 2
18521: PPUSH
18522: LD_INT 0
18524: PPUSH
18525: CALL_OW 324
18529: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18530: LD_EXP 61
18534: PUSH
18535: LD_EXP 70
18539: AND
18540: IFFALSE 18642
18542: GO 18544
18544: DISABLE
18545: LD_INT 0
18547: PPUSH
18548: PPUSH
// begin enable ;
18549: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18550: LD_ADDR_VAR 0 2
18554: PUSH
18555: LD_INT 22
18557: PUSH
18558: LD_OWVAR 2
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 2
18569: PUSH
18570: LD_INT 34
18572: PUSH
18573: LD_INT 11
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 34
18582: PUSH
18583: LD_INT 30
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PPUSH
18599: CALL_OW 69
18603: ST_TO_ADDR
// if not tmp then
18604: LD_VAR 0 2
18608: NOT
18609: IFFALSE 18613
// exit ;
18611: GO 18642
// for i in tmp do
18613: LD_ADDR_VAR 0 1
18617: PUSH
18618: LD_VAR 0 2
18622: PUSH
18623: FOR_IN
18624: IFFALSE 18640
// begin SetLives ( i , 0 ) ;
18626: LD_VAR 0 1
18630: PPUSH
18631: LD_INT 0
18633: PPUSH
18634: CALL_OW 234
// end ;
18638: GO 18623
18640: POP
18641: POP
// end ;
18642: PPOPN 2
18644: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18645: LD_EXP 61
18649: PUSH
18650: LD_EXP 71
18654: AND
18655: IFFALSE 18675
18657: GO 18659
18659: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18660: LD_INT 32
18662: PPUSH
18663: LD_OWVAR 2
18667: PPUSH
18668: LD_INT 0
18670: PPUSH
18671: CALL_OW 324
18675: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18676: LD_EXP 61
18680: PUSH
18681: LD_EXP 72
18685: AND
18686: IFFALSE 18867
18688: GO 18690
18690: DISABLE
18691: LD_INT 0
18693: PPUSH
18694: PPUSH
18695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18696: LD_ADDR_VAR 0 2
18700: PUSH
18701: LD_INT 22
18703: PUSH
18704: LD_OWVAR 2
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 33
18715: PUSH
18716: LD_INT 3
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PPUSH
18727: CALL_OW 69
18731: ST_TO_ADDR
// if not tmp then
18732: LD_VAR 0 2
18736: NOT
18737: IFFALSE 18741
// exit ;
18739: GO 18867
// side := 0 ;
18741: LD_ADDR_VAR 0 3
18745: PUSH
18746: LD_INT 0
18748: ST_TO_ADDR
// for i := 1 to 8 do
18749: LD_ADDR_VAR 0 1
18753: PUSH
18754: DOUBLE
18755: LD_INT 1
18757: DEC
18758: ST_TO_ADDR
18759: LD_INT 8
18761: PUSH
18762: FOR_TO
18763: IFFALSE 18811
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18765: LD_OWVAR 2
18769: PUSH
18770: LD_VAR 0 1
18774: NONEQUAL
18775: PUSH
18776: LD_OWVAR 2
18780: PPUSH
18781: LD_VAR 0 1
18785: PPUSH
18786: CALL_OW 81
18790: PUSH
18791: LD_INT 2
18793: EQUAL
18794: AND
18795: IFFALSE 18809
// begin side := i ;
18797: LD_ADDR_VAR 0 3
18801: PUSH
18802: LD_VAR 0 1
18806: ST_TO_ADDR
// break ;
18807: GO 18811
// end ;
18809: GO 18762
18811: POP
18812: POP
// if not side then
18813: LD_VAR 0 3
18817: NOT
18818: IFFALSE 18822
// exit ;
18820: GO 18867
// for i := 1 to tmp do
18822: LD_ADDR_VAR 0 1
18826: PUSH
18827: DOUBLE
18828: LD_INT 1
18830: DEC
18831: ST_TO_ADDR
18832: LD_VAR 0 2
18836: PUSH
18837: FOR_TO
18838: IFFALSE 18865
// if Prob ( 60 ) then
18840: LD_INT 60
18842: PPUSH
18843: CALL_OW 13
18847: IFFALSE 18863
// SetSide ( i , side ) ;
18849: LD_VAR 0 1
18853: PPUSH
18854: LD_VAR 0 3
18858: PPUSH
18859: CALL_OW 235
18863: GO 18837
18865: POP
18866: POP
// end ;
18867: PPOPN 3
18869: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18870: LD_EXP 61
18874: PUSH
18875: LD_EXP 74
18879: AND
18880: IFFALSE 18999
18882: GO 18884
18884: DISABLE
18885: LD_INT 0
18887: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18888: LD_ADDR_VAR 0 1
18892: PUSH
18893: LD_INT 22
18895: PUSH
18896: LD_OWVAR 2
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 21
18907: PUSH
18908: LD_INT 1
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 3
18917: PUSH
18918: LD_INT 23
18920: PUSH
18921: LD_INT 0
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: PPUSH
18937: CALL_OW 69
18941: PUSH
18942: FOR_IN
18943: IFFALSE 18997
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18945: LD_VAR 0 1
18949: PPUSH
18950: CALL_OW 257
18954: PUSH
18955: LD_INT 1
18957: PUSH
18958: LD_INT 2
18960: PUSH
18961: LD_INT 3
18963: PUSH
18964: LD_INT 4
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: IN
18973: IFFALSE 18995
// SetClass ( un , rand ( 1 , 4 ) ) ;
18975: LD_VAR 0 1
18979: PPUSH
18980: LD_INT 1
18982: PPUSH
18983: LD_INT 4
18985: PPUSH
18986: CALL_OW 12
18990: PPUSH
18991: CALL_OW 336
18995: GO 18942
18997: POP
18998: POP
// end ;
18999: PPOPN 1
19001: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19002: LD_EXP 61
19006: PUSH
19007: LD_EXP 73
19011: AND
19012: IFFALSE 19091
19014: GO 19016
19016: DISABLE
19017: LD_INT 0
19019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19020: LD_ADDR_VAR 0 1
19024: PUSH
19025: LD_INT 22
19027: PUSH
19028: LD_OWVAR 2
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 21
19039: PUSH
19040: LD_INT 3
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PPUSH
19051: CALL_OW 69
19055: ST_TO_ADDR
// if not tmp then
19056: LD_VAR 0 1
19060: NOT
19061: IFFALSE 19065
// exit ;
19063: GO 19091
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19065: LD_VAR 0 1
19069: PUSH
19070: LD_INT 1
19072: PPUSH
19073: LD_VAR 0 1
19077: PPUSH
19078: CALL_OW 12
19082: ARRAY
19083: PPUSH
19084: LD_INT 100
19086: PPUSH
19087: CALL_OW 234
// end ;
19091: PPOPN 1
19093: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19094: LD_EXP 61
19098: PUSH
19099: LD_EXP 75
19103: AND
19104: IFFALSE 19202
19106: GO 19108
19108: DISABLE
19109: LD_INT 0
19111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19112: LD_ADDR_VAR 0 1
19116: PUSH
19117: LD_INT 22
19119: PUSH
19120: LD_OWVAR 2
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 21
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PPUSH
19143: CALL_OW 69
19147: ST_TO_ADDR
// if not tmp then
19148: LD_VAR 0 1
19152: NOT
19153: IFFALSE 19157
// exit ;
19155: GO 19202
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19157: LD_VAR 0 1
19161: PUSH
19162: LD_INT 1
19164: PPUSH
19165: LD_VAR 0 1
19169: PPUSH
19170: CALL_OW 12
19174: ARRAY
19175: PPUSH
19176: LD_INT 1
19178: PPUSH
19179: LD_INT 4
19181: PPUSH
19182: CALL_OW 12
19186: PPUSH
19187: LD_INT 3000
19189: PPUSH
19190: LD_INT 9000
19192: PPUSH
19193: CALL_OW 12
19197: PPUSH
19198: CALL_OW 492
// end ;
19202: PPOPN 1
19204: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19205: LD_EXP 61
19209: PUSH
19210: LD_EXP 76
19214: AND
19215: IFFALSE 19235
19217: GO 19219
19219: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19220: LD_INT 1
19222: PPUSH
19223: LD_OWVAR 2
19227: PPUSH
19228: LD_INT 0
19230: PPUSH
19231: CALL_OW 324
19235: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19236: LD_EXP 61
19240: PUSH
19241: LD_EXP 77
19245: AND
19246: IFFALSE 19329
19248: GO 19250
19250: DISABLE
19251: LD_INT 0
19253: PPUSH
19254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19255: LD_ADDR_VAR 0 2
19259: PUSH
19260: LD_INT 22
19262: PUSH
19263: LD_OWVAR 2
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 21
19274: PUSH
19275: LD_INT 3
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PPUSH
19286: CALL_OW 69
19290: ST_TO_ADDR
// if not tmp then
19291: LD_VAR 0 2
19295: NOT
19296: IFFALSE 19300
// exit ;
19298: GO 19329
// for i in tmp do
19300: LD_ADDR_VAR 0 1
19304: PUSH
19305: LD_VAR 0 2
19309: PUSH
19310: FOR_IN
19311: IFFALSE 19327
// SetBLevel ( i , 10 ) ;
19313: LD_VAR 0 1
19317: PPUSH
19318: LD_INT 10
19320: PPUSH
19321: CALL_OW 241
19325: GO 19310
19327: POP
19328: POP
// end ;
19329: PPOPN 2
19331: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19332: LD_EXP 61
19336: PUSH
19337: LD_EXP 78
19341: AND
19342: IFFALSE 19453
19344: GO 19346
19346: DISABLE
19347: LD_INT 0
19349: PPUSH
19350: PPUSH
19351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19352: LD_ADDR_VAR 0 3
19356: PUSH
19357: LD_INT 22
19359: PUSH
19360: LD_OWVAR 2
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 25
19371: PUSH
19372: LD_INT 1
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PPUSH
19383: CALL_OW 69
19387: ST_TO_ADDR
// if not tmp then
19388: LD_VAR 0 3
19392: NOT
19393: IFFALSE 19397
// exit ;
19395: GO 19453
// un := tmp [ rand ( 1 , tmp ) ] ;
19397: LD_ADDR_VAR 0 2
19401: PUSH
19402: LD_VAR 0 3
19406: PUSH
19407: LD_INT 1
19409: PPUSH
19410: LD_VAR 0 3
19414: PPUSH
19415: CALL_OW 12
19419: ARRAY
19420: ST_TO_ADDR
// if Crawls ( un ) then
19421: LD_VAR 0 2
19425: PPUSH
19426: CALL_OW 318
19430: IFFALSE 19441
// ComWalk ( un ) ;
19432: LD_VAR 0 2
19436: PPUSH
19437: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19441: LD_VAR 0 2
19445: PPUSH
19446: LD_INT 5
19448: PPUSH
19449: CALL_OW 336
// end ;
19453: PPOPN 3
19455: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19456: LD_EXP 61
19460: PUSH
19461: LD_EXP 79
19465: AND
19466: PUSH
19467: LD_OWVAR 67
19471: PUSH
19472: LD_INT 3
19474: LESS
19475: AND
19476: IFFALSE 19495
19478: GO 19480
19480: DISABLE
// Difficulty := Difficulty + 1 ;
19481: LD_ADDR_OWVAR 67
19485: PUSH
19486: LD_OWVAR 67
19490: PUSH
19491: LD_INT 1
19493: PLUS
19494: ST_TO_ADDR
19495: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19496: LD_EXP 61
19500: PUSH
19501: LD_EXP 80
19505: AND
19506: IFFALSE 19609
19508: GO 19510
19510: DISABLE
19511: LD_INT 0
19513: PPUSH
// begin for i := 1 to 5 do
19514: LD_ADDR_VAR 0 1
19518: PUSH
19519: DOUBLE
19520: LD_INT 1
19522: DEC
19523: ST_TO_ADDR
19524: LD_INT 5
19526: PUSH
19527: FOR_TO
19528: IFFALSE 19607
// begin uc_nation := nation_nature ;
19530: LD_ADDR_OWVAR 21
19534: PUSH
19535: LD_INT 0
19537: ST_TO_ADDR
// uc_side := 0 ;
19538: LD_ADDR_OWVAR 20
19542: PUSH
19543: LD_INT 0
19545: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19546: LD_ADDR_OWVAR 29
19550: PUSH
19551: LD_INT 12
19553: PUSH
19554: LD_INT 12
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: ST_TO_ADDR
// hc_agressivity := 20 ;
19561: LD_ADDR_OWVAR 35
19565: PUSH
19566: LD_INT 20
19568: ST_TO_ADDR
// hc_class := class_tiger ;
19569: LD_ADDR_OWVAR 28
19573: PUSH
19574: LD_INT 14
19576: ST_TO_ADDR
// hc_gallery :=  ;
19577: LD_ADDR_OWVAR 33
19581: PUSH
19582: LD_STRING 
19584: ST_TO_ADDR
// hc_name :=  ;
19585: LD_ADDR_OWVAR 26
19589: PUSH
19590: LD_STRING 
19592: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19593: CALL_OW 44
19597: PPUSH
19598: LD_INT 0
19600: PPUSH
19601: CALL_OW 51
// end ;
19605: GO 19527
19607: POP
19608: POP
// end ;
19609: PPOPN 1
19611: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19612: LD_EXP 61
19616: PUSH
19617: LD_EXP 81
19621: AND
19622: IFFALSE 19631
19624: GO 19626
19626: DISABLE
// StreamSibBomb ;
19627: CALL 19632 0 0
19631: END
// export function StreamSibBomb ; var i , x , y ; begin
19632: LD_INT 0
19634: PPUSH
19635: PPUSH
19636: PPUSH
19637: PPUSH
// result := false ;
19638: LD_ADDR_VAR 0 1
19642: PUSH
19643: LD_INT 0
19645: ST_TO_ADDR
// for i := 1 to 16 do
19646: LD_ADDR_VAR 0 2
19650: PUSH
19651: DOUBLE
19652: LD_INT 1
19654: DEC
19655: ST_TO_ADDR
19656: LD_INT 16
19658: PUSH
19659: FOR_TO
19660: IFFALSE 19859
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19662: LD_ADDR_VAR 0 3
19666: PUSH
19667: LD_INT 10
19669: PUSH
19670: LD_INT 20
19672: PUSH
19673: LD_INT 30
19675: PUSH
19676: LD_INT 40
19678: PUSH
19679: LD_INT 50
19681: PUSH
19682: LD_INT 60
19684: PUSH
19685: LD_INT 70
19687: PUSH
19688: LD_INT 80
19690: PUSH
19691: LD_INT 90
19693: PUSH
19694: LD_INT 100
19696: PUSH
19697: LD_INT 110
19699: PUSH
19700: LD_INT 120
19702: PUSH
19703: LD_INT 130
19705: PUSH
19706: LD_INT 140
19708: PUSH
19709: LD_INT 150
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 1
19731: PPUSH
19732: LD_INT 15
19734: PPUSH
19735: CALL_OW 12
19739: ARRAY
19740: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19741: LD_ADDR_VAR 0 4
19745: PUSH
19746: LD_INT 10
19748: PUSH
19749: LD_INT 20
19751: PUSH
19752: LD_INT 30
19754: PUSH
19755: LD_INT 40
19757: PUSH
19758: LD_INT 50
19760: PUSH
19761: LD_INT 60
19763: PUSH
19764: LD_INT 70
19766: PUSH
19767: LD_INT 80
19769: PUSH
19770: LD_INT 90
19772: PUSH
19773: LD_INT 100
19775: PUSH
19776: LD_INT 110
19778: PUSH
19779: LD_INT 120
19781: PUSH
19782: LD_INT 130
19784: PUSH
19785: LD_INT 140
19787: PUSH
19788: LD_INT 150
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 1
19810: PPUSH
19811: LD_INT 15
19813: PPUSH
19814: CALL_OW 12
19818: ARRAY
19819: ST_TO_ADDR
// if ValidHex ( x , y ) then
19820: LD_VAR 0 3
19824: PPUSH
19825: LD_VAR 0 4
19829: PPUSH
19830: CALL_OW 488
19834: IFFALSE 19857
// begin result := [ x , y ] ;
19836: LD_ADDR_VAR 0 1
19840: PUSH
19841: LD_VAR 0 3
19845: PUSH
19846: LD_VAR 0 4
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: ST_TO_ADDR
// break ;
19855: GO 19859
// end ; end ;
19857: GO 19659
19859: POP
19860: POP
// if result then
19861: LD_VAR 0 1
19865: IFFALSE 19925
// begin ToLua ( playSibBomb() ) ;
19867: LD_STRING playSibBomb()
19869: PPUSH
19870: CALL_OW 559
// wait ( 0 0$14 ) ;
19874: LD_INT 490
19876: PPUSH
19877: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19881: LD_VAR 0 1
19885: PUSH
19886: LD_INT 1
19888: ARRAY
19889: PPUSH
19890: LD_VAR 0 1
19894: PUSH
19895: LD_INT 2
19897: ARRAY
19898: PPUSH
19899: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19903: LD_VAR 0 1
19907: PUSH
19908: LD_INT 1
19910: ARRAY
19911: PPUSH
19912: LD_VAR 0 1
19916: PUSH
19917: LD_INT 2
19919: ARRAY
19920: PPUSH
19921: CALL_OW 429
// end ; end ;
19925: LD_VAR 0 1
19929: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19930: LD_EXP 61
19934: PUSH
19935: LD_EXP 83
19939: AND
19940: IFFALSE 19952
19942: GO 19944
19944: DISABLE
// YouLost (  ) ;
19945: LD_STRING 
19947: PPUSH
19948: CALL_OW 104
19952: END
// every 0 0$1 trigger StreamModeActive and sFog do
19953: LD_EXP 61
19957: PUSH
19958: LD_EXP 82
19962: AND
19963: IFFALSE 19977
19965: GO 19967
19967: DISABLE
// FogOff ( your_side ) ;
19968: LD_OWVAR 2
19972: PPUSH
19973: CALL_OW 344
19977: END
// every 0 0$1 trigger StreamModeActive and sSun do
19978: LD_EXP 61
19982: PUSH
19983: LD_EXP 84
19987: AND
19988: IFFALSE 20016
19990: GO 19992
19992: DISABLE
// begin solar_recharge_percent := 0 ;
19993: LD_ADDR_OWVAR 79
19997: PUSH
19998: LD_INT 0
20000: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20001: LD_INT 10500
20003: PPUSH
20004: CALL_OW 67
// solar_recharge_percent := 100 ;
20008: LD_ADDR_OWVAR 79
20012: PUSH
20013: LD_INT 100
20015: ST_TO_ADDR
// end ;
20016: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20017: LD_EXP 61
20021: PUSH
20022: LD_EXP 85
20026: AND
20027: IFFALSE 20266
20029: GO 20031
20031: DISABLE
20032: LD_INT 0
20034: PPUSH
20035: PPUSH
20036: PPUSH
// begin tmp := [ ] ;
20037: LD_ADDR_VAR 0 3
20041: PUSH
20042: EMPTY
20043: ST_TO_ADDR
// for i := 1 to 6 do
20044: LD_ADDR_VAR 0 1
20048: PUSH
20049: DOUBLE
20050: LD_INT 1
20052: DEC
20053: ST_TO_ADDR
20054: LD_INT 6
20056: PUSH
20057: FOR_TO
20058: IFFALSE 20163
// begin uc_nation := nation_nature ;
20060: LD_ADDR_OWVAR 21
20064: PUSH
20065: LD_INT 0
20067: ST_TO_ADDR
// uc_side := 0 ;
20068: LD_ADDR_OWVAR 20
20072: PUSH
20073: LD_INT 0
20075: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20076: LD_ADDR_OWVAR 29
20080: PUSH
20081: LD_INT 12
20083: PUSH
20084: LD_INT 12
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: ST_TO_ADDR
// hc_agressivity := 20 ;
20091: LD_ADDR_OWVAR 35
20095: PUSH
20096: LD_INT 20
20098: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20099: LD_ADDR_OWVAR 28
20103: PUSH
20104: LD_INT 17
20106: ST_TO_ADDR
// hc_gallery :=  ;
20107: LD_ADDR_OWVAR 33
20111: PUSH
20112: LD_STRING 
20114: ST_TO_ADDR
// hc_name :=  ;
20115: LD_ADDR_OWVAR 26
20119: PUSH
20120: LD_STRING 
20122: ST_TO_ADDR
// un := CreateHuman ;
20123: LD_ADDR_VAR 0 2
20127: PUSH
20128: CALL_OW 44
20132: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20133: LD_VAR 0 2
20137: PPUSH
20138: LD_INT 1
20140: PPUSH
20141: CALL_OW 51
// tmp := tmp ^ un ;
20145: LD_ADDR_VAR 0 3
20149: PUSH
20150: LD_VAR 0 3
20154: PUSH
20155: LD_VAR 0 2
20159: ADD
20160: ST_TO_ADDR
// end ;
20161: GO 20057
20163: POP
20164: POP
// repeat wait ( 0 0$1 ) ;
20165: LD_INT 35
20167: PPUSH
20168: CALL_OW 67
// for un in tmp do
20172: LD_ADDR_VAR 0 2
20176: PUSH
20177: LD_VAR 0 3
20181: PUSH
20182: FOR_IN
20183: IFFALSE 20257
// begin if IsDead ( un ) then
20185: LD_VAR 0 2
20189: PPUSH
20190: CALL_OW 301
20194: IFFALSE 20214
// begin tmp := tmp diff un ;
20196: LD_ADDR_VAR 0 3
20200: PUSH
20201: LD_VAR 0 3
20205: PUSH
20206: LD_VAR 0 2
20210: DIFF
20211: ST_TO_ADDR
// continue ;
20212: GO 20182
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20214: LD_VAR 0 2
20218: PPUSH
20219: LD_INT 3
20221: PUSH
20222: LD_INT 22
20224: PUSH
20225: LD_INT 0
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PPUSH
20236: CALL_OW 69
20240: PPUSH
20241: LD_VAR 0 2
20245: PPUSH
20246: CALL_OW 74
20250: PPUSH
20251: CALL_OW 115
// end ;
20255: GO 20182
20257: POP
20258: POP
// until not tmp ;
20259: LD_VAR 0 3
20263: NOT
20264: IFFALSE 20165
// end ;
20266: PPOPN 3
20268: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20269: LD_EXP 61
20273: PUSH
20274: LD_EXP 86
20278: AND
20279: IFFALSE 20333
20281: GO 20283
20283: DISABLE
// begin ToLua ( displayTroll(); ) ;
20284: LD_STRING displayTroll();
20286: PPUSH
20287: CALL_OW 559
// wait ( 3 3$00 ) ;
20291: LD_INT 6300
20293: PPUSH
20294: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20298: LD_STRING hideTroll();
20300: PPUSH
20301: CALL_OW 559
// wait ( 1 1$00 ) ;
20305: LD_INT 2100
20307: PPUSH
20308: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20312: LD_STRING displayTroll();
20314: PPUSH
20315: CALL_OW 559
// wait ( 1 1$00 ) ;
20319: LD_INT 2100
20321: PPUSH
20322: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20326: LD_STRING hideTroll();
20328: PPUSH
20329: CALL_OW 559
// end ;
20333: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20334: LD_EXP 61
20338: PUSH
20339: LD_EXP 87
20343: AND
20344: IFFALSE 20407
20346: GO 20348
20348: DISABLE
20349: LD_INT 0
20351: PPUSH
// begin p := 0 ;
20352: LD_ADDR_VAR 0 1
20356: PUSH
20357: LD_INT 0
20359: ST_TO_ADDR
// repeat game_speed := 1 ;
20360: LD_ADDR_OWVAR 65
20364: PUSH
20365: LD_INT 1
20367: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20368: LD_INT 35
20370: PPUSH
20371: CALL_OW 67
// p := p + 1 ;
20375: LD_ADDR_VAR 0 1
20379: PUSH
20380: LD_VAR 0 1
20384: PUSH
20385: LD_INT 1
20387: PLUS
20388: ST_TO_ADDR
// until p >= 60 ;
20389: LD_VAR 0 1
20393: PUSH
20394: LD_INT 60
20396: GREATEREQUAL
20397: IFFALSE 20360
// game_speed := 4 ;
20399: LD_ADDR_OWVAR 65
20403: PUSH
20404: LD_INT 4
20406: ST_TO_ADDR
// end ;
20407: PPOPN 1
20409: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20410: LD_EXP 61
20414: PUSH
20415: LD_EXP 88
20419: AND
20420: IFFALSE 20566
20422: GO 20424
20424: DISABLE
20425: LD_INT 0
20427: PPUSH
20428: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20429: LD_ADDR_VAR 0 1
20433: PUSH
20434: LD_INT 22
20436: PUSH
20437: LD_OWVAR 2
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: LD_INT 30
20451: PUSH
20452: LD_INT 0
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 30
20461: PUSH
20462: LD_INT 1
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: LIST
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PPUSH
20478: CALL_OW 69
20482: ST_TO_ADDR
// if not depot then
20483: LD_VAR 0 1
20487: NOT
20488: IFFALSE 20492
// exit ;
20490: GO 20566
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20492: LD_ADDR_VAR 0 2
20496: PUSH
20497: LD_VAR 0 1
20501: PUSH
20502: LD_INT 1
20504: PPUSH
20505: LD_VAR 0 1
20509: PPUSH
20510: CALL_OW 12
20514: ARRAY
20515: PPUSH
20516: CALL_OW 274
20520: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20521: LD_VAR 0 2
20525: PPUSH
20526: LD_INT 1
20528: PPUSH
20529: LD_INT 0
20531: PPUSH
20532: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20536: LD_VAR 0 2
20540: PPUSH
20541: LD_INT 2
20543: PPUSH
20544: LD_INT 0
20546: PPUSH
20547: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20551: LD_VAR 0 2
20555: PPUSH
20556: LD_INT 3
20558: PPUSH
20559: LD_INT 0
20561: PPUSH
20562: CALL_OW 277
// end ;
20566: PPOPN 2
20568: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20569: LD_EXP 61
20573: PUSH
20574: LD_EXP 89
20578: AND
20579: IFFALSE 20676
20581: GO 20583
20583: DISABLE
20584: LD_INT 0
20586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20587: LD_ADDR_VAR 0 1
20591: PUSH
20592: LD_INT 22
20594: PUSH
20595: LD_OWVAR 2
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 21
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 3
20616: PUSH
20617: LD_INT 23
20619: PUSH
20620: LD_INT 0
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: LIST
20635: PPUSH
20636: CALL_OW 69
20640: ST_TO_ADDR
// if not tmp then
20641: LD_VAR 0 1
20645: NOT
20646: IFFALSE 20650
// exit ;
20648: GO 20676
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20650: LD_VAR 0 1
20654: PUSH
20655: LD_INT 1
20657: PPUSH
20658: LD_VAR 0 1
20662: PPUSH
20663: CALL_OW 12
20667: ARRAY
20668: PPUSH
20669: LD_INT 200
20671: PPUSH
20672: CALL_OW 234
// end ;
20676: PPOPN 1
20678: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20679: LD_EXP 61
20683: PUSH
20684: LD_EXP 90
20688: AND
20689: IFFALSE 20768
20691: GO 20693
20693: DISABLE
20694: LD_INT 0
20696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20697: LD_ADDR_VAR 0 1
20701: PUSH
20702: LD_INT 22
20704: PUSH
20705: LD_OWVAR 2
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 21
20716: PUSH
20717: LD_INT 2
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PPUSH
20728: CALL_OW 69
20732: ST_TO_ADDR
// if not tmp then
20733: LD_VAR 0 1
20737: NOT
20738: IFFALSE 20742
// exit ;
20740: GO 20768
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20742: LD_VAR 0 1
20746: PUSH
20747: LD_INT 1
20749: PPUSH
20750: LD_VAR 0 1
20754: PPUSH
20755: CALL_OW 12
20759: ARRAY
20760: PPUSH
20761: LD_INT 60
20763: PPUSH
20764: CALL_OW 234
// end ;
20768: PPOPN 1
20770: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20771: LD_EXP 61
20775: PUSH
20776: LD_EXP 91
20780: AND
20781: IFFALSE 20880
20783: GO 20785
20785: DISABLE
20786: LD_INT 0
20788: PPUSH
20789: PPUSH
// begin enable ;
20790: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20791: LD_ADDR_VAR 0 1
20795: PUSH
20796: LD_INT 22
20798: PUSH
20799: LD_OWVAR 2
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 61
20810: PUSH
20811: EMPTY
20812: LIST
20813: PUSH
20814: LD_INT 33
20816: PUSH
20817: LD_INT 2
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: LIST
20828: PPUSH
20829: CALL_OW 69
20833: ST_TO_ADDR
// if not tmp then
20834: LD_VAR 0 1
20838: NOT
20839: IFFALSE 20843
// exit ;
20841: GO 20880
// for i in tmp do
20843: LD_ADDR_VAR 0 2
20847: PUSH
20848: LD_VAR 0 1
20852: PUSH
20853: FOR_IN
20854: IFFALSE 20878
// if IsControledBy ( i ) then
20856: LD_VAR 0 2
20860: PPUSH
20861: CALL_OW 312
20865: IFFALSE 20876
// ComUnlink ( i ) ;
20867: LD_VAR 0 2
20871: PPUSH
20872: CALL_OW 136
20876: GO 20853
20878: POP
20879: POP
// end ;
20880: PPOPN 2
20882: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20883: LD_EXP 61
20887: PUSH
20888: LD_EXP 92
20892: AND
20893: IFFALSE 21033
20895: GO 20897
20897: DISABLE
20898: LD_INT 0
20900: PPUSH
20901: PPUSH
// begin ToLua ( displayPowell(); ) ;
20902: LD_STRING displayPowell();
20904: PPUSH
20905: CALL_OW 559
// uc_side := 0 ;
20909: LD_ADDR_OWVAR 20
20913: PUSH
20914: LD_INT 0
20916: ST_TO_ADDR
// uc_nation := 2 ;
20917: LD_ADDR_OWVAR 21
20921: PUSH
20922: LD_INT 2
20924: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20925: LD_ADDR_OWVAR 37
20929: PUSH
20930: LD_INT 14
20932: ST_TO_ADDR
// vc_engine := engine_siberite ;
20933: LD_ADDR_OWVAR 39
20937: PUSH
20938: LD_INT 3
20940: ST_TO_ADDR
// vc_control := control_apeman ;
20941: LD_ADDR_OWVAR 38
20945: PUSH
20946: LD_INT 5
20948: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20949: LD_ADDR_OWVAR 40
20953: PUSH
20954: LD_INT 29
20956: ST_TO_ADDR
// un := CreateVehicle ;
20957: LD_ADDR_VAR 0 2
20961: PUSH
20962: CALL_OW 45
20966: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20967: LD_VAR 0 2
20971: PPUSH
20972: LD_INT 1
20974: PPUSH
20975: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20979: LD_INT 35
20981: PPUSH
20982: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20986: LD_VAR 0 2
20990: PPUSH
20991: LD_INT 22
20993: PUSH
20994: LD_OWVAR 2
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PPUSH
21003: CALL_OW 69
21007: PPUSH
21008: LD_VAR 0 2
21012: PPUSH
21013: CALL_OW 74
21017: PPUSH
21018: CALL_OW 115
// until IsDead ( un ) ;
21022: LD_VAR 0 2
21026: PPUSH
21027: CALL_OW 301
21031: IFFALSE 20979
// end ;
21033: PPOPN 2
21035: END
// every 0 0$1 trigger StreamModeActive and sStu do
21036: LD_EXP 61
21040: PUSH
21041: LD_EXP 100
21045: AND
21046: IFFALSE 21062
21048: GO 21050
21050: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21051: LD_STRING displayStucuk();
21053: PPUSH
21054: CALL_OW 559
// ResetFog ;
21058: CALL_OW 335
// end ;
21062: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21063: LD_EXP 61
21067: PUSH
21068: LD_EXP 93
21072: AND
21073: IFFALSE 21214
21075: GO 21077
21077: DISABLE
21078: LD_INT 0
21080: PPUSH
21081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21082: LD_ADDR_VAR 0 2
21086: PUSH
21087: LD_INT 22
21089: PUSH
21090: LD_OWVAR 2
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 21
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PPUSH
21113: CALL_OW 69
21117: ST_TO_ADDR
// if not tmp then
21118: LD_VAR 0 2
21122: NOT
21123: IFFALSE 21127
// exit ;
21125: GO 21214
// un := tmp [ rand ( 1 , tmp ) ] ;
21127: LD_ADDR_VAR 0 1
21131: PUSH
21132: LD_VAR 0 2
21136: PUSH
21137: LD_INT 1
21139: PPUSH
21140: LD_VAR 0 2
21144: PPUSH
21145: CALL_OW 12
21149: ARRAY
21150: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21151: LD_VAR 0 1
21155: PPUSH
21156: LD_INT 0
21158: PPUSH
21159: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21163: LD_VAR 0 1
21167: PPUSH
21168: LD_OWVAR 3
21172: PUSH
21173: LD_VAR 0 1
21177: DIFF
21178: PPUSH
21179: LD_VAR 0 1
21183: PPUSH
21184: CALL_OW 74
21188: PPUSH
21189: CALL_OW 115
// wait ( 0 0$20 ) ;
21193: LD_INT 700
21195: PPUSH
21196: CALL_OW 67
// SetSide ( un , your_side ) ;
21200: LD_VAR 0 1
21204: PPUSH
21205: LD_OWVAR 2
21209: PPUSH
21210: CALL_OW 235
// end ;
21214: PPOPN 2
21216: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21217: LD_EXP 61
21221: PUSH
21222: LD_EXP 94
21226: AND
21227: IFFALSE 21333
21229: GO 21231
21231: DISABLE
21232: LD_INT 0
21234: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21235: LD_ADDR_VAR 0 1
21239: PUSH
21240: LD_INT 22
21242: PUSH
21243: LD_OWVAR 2
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 2
21254: PUSH
21255: LD_INT 30
21257: PUSH
21258: LD_INT 0
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 30
21267: PUSH
21268: LD_INT 1
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PPUSH
21284: CALL_OW 69
21288: ST_TO_ADDR
// if not depot then
21289: LD_VAR 0 1
21293: NOT
21294: IFFALSE 21298
// exit ;
21296: GO 21333
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21298: LD_VAR 0 1
21302: PUSH
21303: LD_INT 1
21305: ARRAY
21306: PPUSH
21307: CALL_OW 250
21311: PPUSH
21312: LD_VAR 0 1
21316: PUSH
21317: LD_INT 1
21319: ARRAY
21320: PPUSH
21321: CALL_OW 251
21325: PPUSH
21326: LD_INT 70
21328: PPUSH
21329: CALL_OW 495
// end ;
21333: PPOPN 1
21335: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21336: LD_EXP 61
21340: PUSH
21341: LD_EXP 95
21345: AND
21346: IFFALSE 21557
21348: GO 21350
21350: DISABLE
21351: LD_INT 0
21353: PPUSH
21354: PPUSH
21355: PPUSH
21356: PPUSH
21357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21358: LD_ADDR_VAR 0 5
21362: PUSH
21363: LD_INT 22
21365: PUSH
21366: LD_OWVAR 2
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 21
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PPUSH
21389: CALL_OW 69
21393: ST_TO_ADDR
// if not tmp then
21394: LD_VAR 0 5
21398: NOT
21399: IFFALSE 21403
// exit ;
21401: GO 21557
// for i in tmp do
21403: LD_ADDR_VAR 0 1
21407: PUSH
21408: LD_VAR 0 5
21412: PUSH
21413: FOR_IN
21414: IFFALSE 21555
// begin d := rand ( 0 , 5 ) ;
21416: LD_ADDR_VAR 0 4
21420: PUSH
21421: LD_INT 0
21423: PPUSH
21424: LD_INT 5
21426: PPUSH
21427: CALL_OW 12
21431: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21432: LD_ADDR_VAR 0 2
21436: PUSH
21437: LD_VAR 0 1
21441: PPUSH
21442: CALL_OW 250
21446: PPUSH
21447: LD_VAR 0 4
21451: PPUSH
21452: LD_INT 3
21454: PPUSH
21455: LD_INT 12
21457: PPUSH
21458: CALL_OW 12
21462: PPUSH
21463: CALL_OW 272
21467: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21468: LD_ADDR_VAR 0 3
21472: PUSH
21473: LD_VAR 0 1
21477: PPUSH
21478: CALL_OW 251
21482: PPUSH
21483: LD_VAR 0 4
21487: PPUSH
21488: LD_INT 3
21490: PPUSH
21491: LD_INT 12
21493: PPUSH
21494: CALL_OW 12
21498: PPUSH
21499: CALL_OW 273
21503: ST_TO_ADDR
// if ValidHex ( x , y ) then
21504: LD_VAR 0 2
21508: PPUSH
21509: LD_VAR 0 3
21513: PPUSH
21514: CALL_OW 488
21518: IFFALSE 21553
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21520: LD_VAR 0 1
21524: PPUSH
21525: LD_VAR 0 2
21529: PPUSH
21530: LD_VAR 0 3
21534: PPUSH
21535: LD_INT 3
21537: PPUSH
21538: LD_INT 6
21540: PPUSH
21541: CALL_OW 12
21545: PPUSH
21546: LD_INT 1
21548: PPUSH
21549: CALL_OW 483
// end ;
21553: GO 21413
21555: POP
21556: POP
// end ;
21557: PPOPN 5
21559: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21560: LD_EXP 61
21564: PUSH
21565: LD_EXP 96
21569: AND
21570: IFFALSE 21664
21572: GO 21574
21574: DISABLE
21575: LD_INT 0
21577: PPUSH
21578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21579: LD_ADDR_VAR 0 2
21583: PUSH
21584: LD_INT 22
21586: PUSH
21587: LD_OWVAR 2
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 32
21598: PUSH
21599: LD_INT 1
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 21
21608: PUSH
21609: LD_INT 2
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: LIST
21620: PPUSH
21621: CALL_OW 69
21625: ST_TO_ADDR
// if not tmp then
21626: LD_VAR 0 2
21630: NOT
21631: IFFALSE 21635
// exit ;
21633: GO 21664
// for i in tmp do
21635: LD_ADDR_VAR 0 1
21639: PUSH
21640: LD_VAR 0 2
21644: PUSH
21645: FOR_IN
21646: IFFALSE 21662
// SetFuel ( i , 0 ) ;
21648: LD_VAR 0 1
21652: PPUSH
21653: LD_INT 0
21655: PPUSH
21656: CALL_OW 240
21660: GO 21645
21662: POP
21663: POP
// end ;
21664: PPOPN 2
21666: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21667: LD_EXP 61
21671: PUSH
21672: LD_EXP 97
21676: AND
21677: IFFALSE 21743
21679: GO 21681
21681: DISABLE
21682: LD_INT 0
21684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21685: LD_ADDR_VAR 0 1
21689: PUSH
21690: LD_INT 22
21692: PUSH
21693: LD_OWVAR 2
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 30
21704: PUSH
21705: LD_INT 29
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PPUSH
21716: CALL_OW 69
21720: ST_TO_ADDR
// if not tmp then
21721: LD_VAR 0 1
21725: NOT
21726: IFFALSE 21730
// exit ;
21728: GO 21743
// DestroyUnit ( tmp [ 1 ] ) ;
21730: LD_VAR 0 1
21734: PUSH
21735: LD_INT 1
21737: ARRAY
21738: PPUSH
21739: CALL_OW 65
// end ;
21743: PPOPN 1
21745: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21746: LD_EXP 61
21750: PUSH
21751: LD_EXP 99
21755: AND
21756: IFFALSE 21885
21758: GO 21760
21760: DISABLE
21761: LD_INT 0
21763: PPUSH
// begin uc_side := 0 ;
21764: LD_ADDR_OWVAR 20
21768: PUSH
21769: LD_INT 0
21771: ST_TO_ADDR
// uc_nation := nation_arabian ;
21772: LD_ADDR_OWVAR 21
21776: PUSH
21777: LD_INT 2
21779: ST_TO_ADDR
// hc_gallery :=  ;
21780: LD_ADDR_OWVAR 33
21784: PUSH
21785: LD_STRING 
21787: ST_TO_ADDR
// hc_name :=  ;
21788: LD_ADDR_OWVAR 26
21792: PUSH
21793: LD_STRING 
21795: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21796: LD_INT 1
21798: PPUSH
21799: LD_INT 11
21801: PPUSH
21802: LD_INT 10
21804: PPUSH
21805: CALL_OW 380
// un := CreateHuman ;
21809: LD_ADDR_VAR 0 1
21813: PUSH
21814: CALL_OW 44
21818: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21819: LD_VAR 0 1
21823: PPUSH
21824: LD_INT 1
21826: PPUSH
21827: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21831: LD_INT 35
21833: PPUSH
21834: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21838: LD_VAR 0 1
21842: PPUSH
21843: LD_INT 22
21845: PUSH
21846: LD_OWVAR 2
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PPUSH
21855: CALL_OW 69
21859: PPUSH
21860: LD_VAR 0 1
21864: PPUSH
21865: CALL_OW 74
21869: PPUSH
21870: CALL_OW 115
// until IsDead ( un ) ;
21874: LD_VAR 0 1
21878: PPUSH
21879: CALL_OW 301
21883: IFFALSE 21831
// end ;
21885: PPOPN 1
21887: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21888: LD_EXP 61
21892: PUSH
21893: LD_EXP 101
21897: AND
21898: IFFALSE 21910
21900: GO 21902
21902: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21903: LD_STRING earthquake(getX(game), 0, 32)
21905: PPUSH
21906: CALL_OW 559
21910: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21911: LD_EXP 61
21915: PUSH
21916: LD_EXP 102
21920: AND
21921: IFFALSE 22012
21923: GO 21925
21925: DISABLE
21926: LD_INT 0
21928: PPUSH
// begin enable ;
21929: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21930: LD_ADDR_VAR 0 1
21934: PUSH
21935: LD_INT 22
21937: PUSH
21938: LD_OWVAR 2
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 21
21949: PUSH
21950: LD_INT 2
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 33
21959: PUSH
21960: LD_INT 3
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: PPUSH
21972: CALL_OW 69
21976: ST_TO_ADDR
// if not tmp then
21977: LD_VAR 0 1
21981: NOT
21982: IFFALSE 21986
// exit ;
21984: GO 22012
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21986: LD_VAR 0 1
21990: PUSH
21991: LD_INT 1
21993: PPUSH
21994: LD_VAR 0 1
21998: PPUSH
21999: CALL_OW 12
22003: ARRAY
22004: PPUSH
22005: LD_INT 1
22007: PPUSH
22008: CALL_OW 234
// end ;
22012: PPOPN 1
22014: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22015: LD_EXP 61
22019: PUSH
22020: LD_EXP 103
22024: AND
22025: IFFALSE 22166
22027: GO 22029
22029: DISABLE
22030: LD_INT 0
22032: PPUSH
22033: PPUSH
22034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22035: LD_ADDR_VAR 0 3
22039: PUSH
22040: LD_INT 22
22042: PUSH
22043: LD_OWVAR 2
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 25
22054: PUSH
22055: LD_INT 1
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PPUSH
22066: CALL_OW 69
22070: ST_TO_ADDR
// if not tmp then
22071: LD_VAR 0 3
22075: NOT
22076: IFFALSE 22080
// exit ;
22078: GO 22166
// un := tmp [ rand ( 1 , tmp ) ] ;
22080: LD_ADDR_VAR 0 2
22084: PUSH
22085: LD_VAR 0 3
22089: PUSH
22090: LD_INT 1
22092: PPUSH
22093: LD_VAR 0 3
22097: PPUSH
22098: CALL_OW 12
22102: ARRAY
22103: ST_TO_ADDR
// if Crawls ( un ) then
22104: LD_VAR 0 2
22108: PPUSH
22109: CALL_OW 318
22113: IFFALSE 22124
// ComWalk ( un ) ;
22115: LD_VAR 0 2
22119: PPUSH
22120: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22124: LD_VAR 0 2
22128: PPUSH
22129: LD_INT 9
22131: PPUSH
22132: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22136: LD_INT 28
22138: PPUSH
22139: LD_OWVAR 2
22143: PPUSH
22144: LD_INT 2
22146: PPUSH
22147: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22151: LD_INT 29
22153: PPUSH
22154: LD_OWVAR 2
22158: PPUSH
22159: LD_INT 2
22161: PPUSH
22162: CALL_OW 322
// end ;
22166: PPOPN 3
22168: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22169: LD_EXP 61
22173: PUSH
22174: LD_EXP 104
22178: AND
22179: IFFALSE 22290
22181: GO 22183
22183: DISABLE
22184: LD_INT 0
22186: PPUSH
22187: PPUSH
22188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22189: LD_ADDR_VAR 0 3
22193: PUSH
22194: LD_INT 22
22196: PUSH
22197: LD_OWVAR 2
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 25
22208: PUSH
22209: LD_INT 1
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PPUSH
22220: CALL_OW 69
22224: ST_TO_ADDR
// if not tmp then
22225: LD_VAR 0 3
22229: NOT
22230: IFFALSE 22234
// exit ;
22232: GO 22290
// un := tmp [ rand ( 1 , tmp ) ] ;
22234: LD_ADDR_VAR 0 2
22238: PUSH
22239: LD_VAR 0 3
22243: PUSH
22244: LD_INT 1
22246: PPUSH
22247: LD_VAR 0 3
22251: PPUSH
22252: CALL_OW 12
22256: ARRAY
22257: ST_TO_ADDR
// if Crawls ( un ) then
22258: LD_VAR 0 2
22262: PPUSH
22263: CALL_OW 318
22267: IFFALSE 22278
// ComWalk ( un ) ;
22269: LD_VAR 0 2
22273: PPUSH
22274: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22278: LD_VAR 0 2
22282: PPUSH
22283: LD_INT 8
22285: PPUSH
22286: CALL_OW 336
// end ;
22290: PPOPN 3
22292: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22293: LD_EXP 61
22297: PUSH
22298: LD_EXP 105
22302: AND
22303: IFFALSE 22447
22305: GO 22307
22307: DISABLE
22308: LD_INT 0
22310: PPUSH
22311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22312: LD_ADDR_VAR 0 2
22316: PUSH
22317: LD_INT 22
22319: PUSH
22320: LD_OWVAR 2
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 21
22331: PUSH
22332: LD_INT 2
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 2
22341: PUSH
22342: LD_INT 34
22344: PUSH
22345: LD_INT 12
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 34
22354: PUSH
22355: LD_INT 51
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 34
22364: PUSH
22365: LD_INT 32
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: LIST
22382: PPUSH
22383: CALL_OW 69
22387: ST_TO_ADDR
// if not tmp then
22388: LD_VAR 0 2
22392: NOT
22393: IFFALSE 22397
// exit ;
22395: GO 22447
// for i in tmp do
22397: LD_ADDR_VAR 0 1
22401: PUSH
22402: LD_VAR 0 2
22406: PUSH
22407: FOR_IN
22408: IFFALSE 22445
// if GetCargo ( i , mat_artifact ) = 0 then
22410: LD_VAR 0 1
22414: PPUSH
22415: LD_INT 4
22417: PPUSH
22418: CALL_OW 289
22422: PUSH
22423: LD_INT 0
22425: EQUAL
22426: IFFALSE 22443
// SetCargo ( i , mat_siberit , 100 ) ;
22428: LD_VAR 0 1
22432: PPUSH
22433: LD_INT 3
22435: PPUSH
22436: LD_INT 100
22438: PPUSH
22439: CALL_OW 290
22443: GO 22407
22445: POP
22446: POP
// end ;
22447: PPOPN 2
22449: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22450: LD_EXP 61
22454: PUSH
22455: LD_EXP 106
22459: AND
22460: IFFALSE 22643
22462: GO 22464
22464: DISABLE
22465: LD_INT 0
22467: PPUSH
22468: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22469: LD_ADDR_VAR 0 2
22473: PUSH
22474: LD_INT 22
22476: PUSH
22477: LD_OWVAR 2
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PPUSH
22486: CALL_OW 69
22490: ST_TO_ADDR
// if not tmp then
22491: LD_VAR 0 2
22495: NOT
22496: IFFALSE 22500
// exit ;
22498: GO 22643
// for i := 1 to 2 do
22500: LD_ADDR_VAR 0 1
22504: PUSH
22505: DOUBLE
22506: LD_INT 1
22508: DEC
22509: ST_TO_ADDR
22510: LD_INT 2
22512: PUSH
22513: FOR_TO
22514: IFFALSE 22641
// begin uc_side := your_side ;
22516: LD_ADDR_OWVAR 20
22520: PUSH
22521: LD_OWVAR 2
22525: ST_TO_ADDR
// uc_nation := nation_american ;
22526: LD_ADDR_OWVAR 21
22530: PUSH
22531: LD_INT 1
22533: ST_TO_ADDR
// vc_chassis := us_morphling ;
22534: LD_ADDR_OWVAR 37
22538: PUSH
22539: LD_INT 5
22541: ST_TO_ADDR
// vc_engine := engine_siberite ;
22542: LD_ADDR_OWVAR 39
22546: PUSH
22547: LD_INT 3
22549: ST_TO_ADDR
// vc_control := control_computer ;
22550: LD_ADDR_OWVAR 38
22554: PUSH
22555: LD_INT 3
22557: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22558: LD_ADDR_OWVAR 40
22562: PUSH
22563: LD_INT 10
22565: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22566: LD_VAR 0 2
22570: PUSH
22571: LD_INT 1
22573: ARRAY
22574: PPUSH
22575: CALL_OW 310
22579: NOT
22580: IFFALSE 22627
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22582: CALL_OW 45
22586: PPUSH
22587: LD_VAR 0 2
22591: PUSH
22592: LD_INT 1
22594: ARRAY
22595: PPUSH
22596: CALL_OW 250
22600: PPUSH
22601: LD_VAR 0 2
22605: PUSH
22606: LD_INT 1
22608: ARRAY
22609: PPUSH
22610: CALL_OW 251
22614: PPUSH
22615: LD_INT 12
22617: PPUSH
22618: LD_INT 1
22620: PPUSH
22621: CALL_OW 50
22625: GO 22639
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22627: CALL_OW 45
22631: PPUSH
22632: LD_INT 1
22634: PPUSH
22635: CALL_OW 51
// end ;
22639: GO 22513
22641: POP
22642: POP
// end ;
22643: PPOPN 2
22645: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22646: LD_EXP 61
22650: PUSH
22651: LD_EXP 107
22655: AND
22656: IFFALSE 22878
22658: GO 22660
22660: DISABLE
22661: LD_INT 0
22663: PPUSH
22664: PPUSH
22665: PPUSH
22666: PPUSH
22667: PPUSH
22668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22669: LD_ADDR_VAR 0 6
22673: PUSH
22674: LD_INT 22
22676: PUSH
22677: LD_OWVAR 2
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 21
22688: PUSH
22689: LD_INT 1
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 3
22698: PUSH
22699: LD_INT 23
22701: PUSH
22702: LD_INT 0
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: PPUSH
22718: CALL_OW 69
22722: ST_TO_ADDR
// if not tmp then
22723: LD_VAR 0 6
22727: NOT
22728: IFFALSE 22732
// exit ;
22730: GO 22878
// s1 := rand ( 1 , 4 ) ;
22732: LD_ADDR_VAR 0 2
22736: PUSH
22737: LD_INT 1
22739: PPUSH
22740: LD_INT 4
22742: PPUSH
22743: CALL_OW 12
22747: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22748: LD_ADDR_VAR 0 4
22752: PUSH
22753: LD_VAR 0 6
22757: PUSH
22758: LD_INT 1
22760: ARRAY
22761: PPUSH
22762: LD_VAR 0 2
22766: PPUSH
22767: CALL_OW 259
22771: ST_TO_ADDR
// if s1 = 1 then
22772: LD_VAR 0 2
22776: PUSH
22777: LD_INT 1
22779: EQUAL
22780: IFFALSE 22800
// s2 := rand ( 2 , 4 ) else
22782: LD_ADDR_VAR 0 3
22786: PUSH
22787: LD_INT 2
22789: PPUSH
22790: LD_INT 4
22792: PPUSH
22793: CALL_OW 12
22797: ST_TO_ADDR
22798: GO 22808
// s2 := 1 ;
22800: LD_ADDR_VAR 0 3
22804: PUSH
22805: LD_INT 1
22807: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22808: LD_ADDR_VAR 0 5
22812: PUSH
22813: LD_VAR 0 6
22817: PUSH
22818: LD_INT 1
22820: ARRAY
22821: PPUSH
22822: LD_VAR 0 3
22826: PPUSH
22827: CALL_OW 259
22831: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22832: LD_VAR 0 6
22836: PUSH
22837: LD_INT 1
22839: ARRAY
22840: PPUSH
22841: LD_VAR 0 2
22845: PPUSH
22846: LD_VAR 0 5
22850: PPUSH
22851: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22855: LD_VAR 0 6
22859: PUSH
22860: LD_INT 1
22862: ARRAY
22863: PPUSH
22864: LD_VAR 0 3
22868: PPUSH
22869: LD_VAR 0 4
22873: PPUSH
22874: CALL_OW 237
// end ;
22878: PPOPN 6
22880: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22881: LD_EXP 61
22885: PUSH
22886: LD_EXP 108
22890: AND
22891: IFFALSE 22970
22893: GO 22895
22895: DISABLE
22896: LD_INT 0
22898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22899: LD_ADDR_VAR 0 1
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_OWVAR 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 30
22918: PUSH
22919: LD_INT 3
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 69
22934: ST_TO_ADDR
// if not tmp then
22935: LD_VAR 0 1
22939: NOT
22940: IFFALSE 22944
// exit ;
22942: GO 22970
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22944: LD_VAR 0 1
22948: PUSH
22949: LD_INT 1
22951: PPUSH
22952: LD_VAR 0 1
22956: PPUSH
22957: CALL_OW 12
22961: ARRAY
22962: PPUSH
22963: LD_INT 1
22965: PPUSH
22966: CALL_OW 234
// end ;
22970: PPOPN 1
22972: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22973: LD_EXP 61
22977: PUSH
22978: LD_EXP 109
22982: AND
22983: IFFALSE 23095
22985: GO 22987
22987: DISABLE
22988: LD_INT 0
22990: PPUSH
22991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22992: LD_ADDR_VAR 0 2
22996: PUSH
22997: LD_INT 22
22999: PUSH
23000: LD_OWVAR 2
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 2
23011: PUSH
23012: LD_INT 30
23014: PUSH
23015: LD_INT 27
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 30
23024: PUSH
23025: LD_INT 26
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 30
23034: PUSH
23035: LD_INT 28
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PPUSH
23052: CALL_OW 69
23056: ST_TO_ADDR
// if not tmp then
23057: LD_VAR 0 2
23061: NOT
23062: IFFALSE 23066
// exit ;
23064: GO 23095
// for i in tmp do
23066: LD_ADDR_VAR 0 1
23070: PUSH
23071: LD_VAR 0 2
23075: PUSH
23076: FOR_IN
23077: IFFALSE 23093
// SetLives ( i , 1 ) ;
23079: LD_VAR 0 1
23083: PPUSH
23084: LD_INT 1
23086: PPUSH
23087: CALL_OW 234
23091: GO 23076
23093: POP
23094: POP
// end ;
23095: PPOPN 2
23097: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23098: LD_EXP 61
23102: PUSH
23103: LD_EXP 110
23107: AND
23108: IFFALSE 23382
23110: GO 23112
23112: DISABLE
23113: LD_INT 0
23115: PPUSH
23116: PPUSH
23117: PPUSH
// begin i := rand ( 1 , 7 ) ;
23118: LD_ADDR_VAR 0 1
23122: PUSH
23123: LD_INT 1
23125: PPUSH
23126: LD_INT 7
23128: PPUSH
23129: CALL_OW 12
23133: ST_TO_ADDR
// case i of 1 :
23134: LD_VAR 0 1
23138: PUSH
23139: LD_INT 1
23141: DOUBLE
23142: EQUAL
23143: IFTRUE 23147
23145: GO 23157
23147: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23148: LD_STRING earthquake(getX(game), 0, 32)
23150: PPUSH
23151: CALL_OW 559
23155: GO 23382
23157: LD_INT 2
23159: DOUBLE
23160: EQUAL
23161: IFTRUE 23165
23163: GO 23179
23165: POP
// begin ToLua ( displayStucuk(); ) ;
23166: LD_STRING displayStucuk();
23168: PPUSH
23169: CALL_OW 559
// ResetFog ;
23173: CALL_OW 335
// end ; 3 :
23177: GO 23382
23179: LD_INT 3
23181: DOUBLE
23182: EQUAL
23183: IFTRUE 23187
23185: GO 23291
23187: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23188: LD_ADDR_VAR 0 2
23192: PUSH
23193: LD_INT 22
23195: PUSH
23196: LD_OWVAR 2
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 25
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PPUSH
23219: CALL_OW 69
23223: ST_TO_ADDR
// if not tmp then
23224: LD_VAR 0 2
23228: NOT
23229: IFFALSE 23233
// exit ;
23231: GO 23382
// un := tmp [ rand ( 1 , tmp ) ] ;
23233: LD_ADDR_VAR 0 3
23237: PUSH
23238: LD_VAR 0 2
23242: PUSH
23243: LD_INT 1
23245: PPUSH
23246: LD_VAR 0 2
23250: PPUSH
23251: CALL_OW 12
23255: ARRAY
23256: ST_TO_ADDR
// if Crawls ( un ) then
23257: LD_VAR 0 3
23261: PPUSH
23262: CALL_OW 318
23266: IFFALSE 23277
// ComWalk ( un ) ;
23268: LD_VAR 0 3
23272: PPUSH
23273: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23277: LD_VAR 0 3
23281: PPUSH
23282: LD_INT 8
23284: PPUSH
23285: CALL_OW 336
// end ; 4 :
23289: GO 23382
23291: LD_INT 4
23293: DOUBLE
23294: EQUAL
23295: IFTRUE 23299
23297: GO 23360
23299: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23300: LD_ADDR_VAR 0 2
23304: PUSH
23305: LD_INT 22
23307: PUSH
23308: LD_OWVAR 2
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 30
23319: PUSH
23320: LD_INT 29
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PPUSH
23331: CALL_OW 69
23335: ST_TO_ADDR
// if not tmp then
23336: LD_VAR 0 2
23340: NOT
23341: IFFALSE 23345
// exit ;
23343: GO 23382
// DestroyUnit ( tmp [ 1 ] ) ;
23345: LD_VAR 0 2
23349: PUSH
23350: LD_INT 1
23352: ARRAY
23353: PPUSH
23354: CALL_OW 65
// end ; 5 .. 7 :
23358: GO 23382
23360: LD_INT 5
23362: DOUBLE
23363: GREATEREQUAL
23364: IFFALSE 23372
23366: LD_INT 7
23368: DOUBLE
23369: LESSEQUAL
23370: IFTRUE 23374
23372: GO 23381
23374: POP
// StreamSibBomb ; end ;
23375: CALL 19632 0 0
23379: GO 23382
23381: POP
// end ;
23382: PPOPN 3
23384: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23385: LD_EXP 61
23389: PUSH
23390: LD_EXP 111
23394: AND
23395: IFFALSE 23551
23397: GO 23399
23399: DISABLE
23400: LD_INT 0
23402: PPUSH
23403: PPUSH
23404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23405: LD_ADDR_VAR 0 2
23409: PUSH
23410: LD_INT 81
23412: PUSH
23413: LD_OWVAR 2
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 2
23424: PUSH
23425: LD_INT 21
23427: PUSH
23428: LD_INT 1
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 21
23437: PUSH
23438: LD_INT 2
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PPUSH
23454: CALL_OW 69
23458: ST_TO_ADDR
// if not tmp then
23459: LD_VAR 0 2
23463: NOT
23464: IFFALSE 23468
// exit ;
23466: GO 23551
// p := 0 ;
23468: LD_ADDR_VAR 0 3
23472: PUSH
23473: LD_INT 0
23475: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23476: LD_INT 35
23478: PPUSH
23479: CALL_OW 67
// p := p + 1 ;
23483: LD_ADDR_VAR 0 3
23487: PUSH
23488: LD_VAR 0 3
23492: PUSH
23493: LD_INT 1
23495: PLUS
23496: ST_TO_ADDR
// for i in tmp do
23497: LD_ADDR_VAR 0 1
23501: PUSH
23502: LD_VAR 0 2
23506: PUSH
23507: FOR_IN
23508: IFFALSE 23539
// if GetLives ( i ) < 1000 then
23510: LD_VAR 0 1
23514: PPUSH
23515: CALL_OW 256
23519: PUSH
23520: LD_INT 1000
23522: LESS
23523: IFFALSE 23537
// SetLives ( i , 1000 ) ;
23525: LD_VAR 0 1
23529: PPUSH
23530: LD_INT 1000
23532: PPUSH
23533: CALL_OW 234
23537: GO 23507
23539: POP
23540: POP
// until p > 20 ;
23541: LD_VAR 0 3
23545: PUSH
23546: LD_INT 20
23548: GREATER
23549: IFFALSE 23476
// end ;
23551: PPOPN 3
23553: END
// every 0 0$1 trigger StreamModeActive and sTime do
23554: LD_EXP 61
23558: PUSH
23559: LD_EXP 112
23563: AND
23564: IFFALSE 23599
23566: GO 23568
23568: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23569: LD_INT 28
23571: PPUSH
23572: LD_OWVAR 2
23576: PPUSH
23577: LD_INT 2
23579: PPUSH
23580: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23584: LD_INT 30
23586: PPUSH
23587: LD_OWVAR 2
23591: PPUSH
23592: LD_INT 2
23594: PPUSH
23595: CALL_OW 322
// end ;
23599: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23600: LD_EXP 61
23604: PUSH
23605: LD_EXP 113
23609: AND
23610: IFFALSE 23731
23612: GO 23614
23614: DISABLE
23615: LD_INT 0
23617: PPUSH
23618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23619: LD_ADDR_VAR 0 2
23623: PUSH
23624: LD_INT 22
23626: PUSH
23627: LD_OWVAR 2
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 21
23638: PUSH
23639: LD_INT 1
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 3
23648: PUSH
23649: LD_INT 23
23651: PUSH
23652: LD_INT 0
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: LIST
23667: PPUSH
23668: CALL_OW 69
23672: ST_TO_ADDR
// if not tmp then
23673: LD_VAR 0 2
23677: NOT
23678: IFFALSE 23682
// exit ;
23680: GO 23731
// for i in tmp do
23682: LD_ADDR_VAR 0 1
23686: PUSH
23687: LD_VAR 0 2
23691: PUSH
23692: FOR_IN
23693: IFFALSE 23729
// begin if Crawls ( i ) then
23695: LD_VAR 0 1
23699: PPUSH
23700: CALL_OW 318
23704: IFFALSE 23715
// ComWalk ( i ) ;
23706: LD_VAR 0 1
23710: PPUSH
23711: CALL_OW 138
// SetClass ( i , 2 ) ;
23715: LD_VAR 0 1
23719: PPUSH
23720: LD_INT 2
23722: PPUSH
23723: CALL_OW 336
// end ;
23727: GO 23692
23729: POP
23730: POP
// end ;
23731: PPOPN 2
23733: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23734: LD_EXP 61
23738: PUSH
23739: LD_EXP 114
23743: AND
23744: IFFALSE 24025
23746: GO 23748
23748: DISABLE
23749: LD_INT 0
23751: PPUSH
23752: PPUSH
23753: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23754: LD_OWVAR 2
23758: PPUSH
23759: LD_INT 9
23761: PPUSH
23762: LD_INT 1
23764: PPUSH
23765: LD_INT 1
23767: PPUSH
23768: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23772: LD_INT 9
23774: PPUSH
23775: LD_OWVAR 2
23779: PPUSH
23780: CALL_OW 343
// uc_side := 9 ;
23784: LD_ADDR_OWVAR 20
23788: PUSH
23789: LD_INT 9
23791: ST_TO_ADDR
// uc_nation := 2 ;
23792: LD_ADDR_OWVAR 21
23796: PUSH
23797: LD_INT 2
23799: ST_TO_ADDR
// hc_name := Dark Warrior ;
23800: LD_ADDR_OWVAR 26
23804: PUSH
23805: LD_STRING Dark Warrior
23807: ST_TO_ADDR
// hc_gallery :=  ;
23808: LD_ADDR_OWVAR 33
23812: PUSH
23813: LD_STRING 
23815: ST_TO_ADDR
// hc_noskilllimit := true ;
23816: LD_ADDR_OWVAR 76
23820: PUSH
23821: LD_INT 1
23823: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23824: LD_ADDR_OWVAR 31
23828: PUSH
23829: LD_INT 30
23831: PUSH
23832: LD_INT 30
23834: PUSH
23835: LD_INT 30
23837: PUSH
23838: LD_INT 30
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: ST_TO_ADDR
// un := CreateHuman ;
23847: LD_ADDR_VAR 0 3
23851: PUSH
23852: CALL_OW 44
23856: ST_TO_ADDR
// hc_noskilllimit := false ;
23857: LD_ADDR_OWVAR 76
23861: PUSH
23862: LD_INT 0
23864: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23865: LD_VAR 0 3
23869: PPUSH
23870: LD_INT 1
23872: PPUSH
23873: CALL_OW 51
// p := 0 ;
23877: LD_ADDR_VAR 0 2
23881: PUSH
23882: LD_INT 0
23884: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23885: LD_INT 35
23887: PPUSH
23888: CALL_OW 67
// p := p + 1 ;
23892: LD_ADDR_VAR 0 2
23896: PUSH
23897: LD_VAR 0 2
23901: PUSH
23902: LD_INT 1
23904: PLUS
23905: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23906: LD_VAR 0 3
23910: PPUSH
23911: CALL_OW 256
23915: PUSH
23916: LD_INT 1000
23918: LESS
23919: IFFALSE 23933
// SetLives ( un , 1000 ) ;
23921: LD_VAR 0 3
23925: PPUSH
23926: LD_INT 1000
23928: PPUSH
23929: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23933: LD_VAR 0 3
23937: PPUSH
23938: LD_INT 81
23940: PUSH
23941: LD_OWVAR 2
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 91
23952: PUSH
23953: LD_VAR 0 3
23957: PUSH
23958: LD_INT 30
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PPUSH
23970: CALL_OW 69
23974: PPUSH
23975: LD_VAR 0 3
23979: PPUSH
23980: CALL_OW 74
23984: PPUSH
23985: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23989: LD_VAR 0 2
23993: PUSH
23994: LD_INT 60
23996: GREATER
23997: PUSH
23998: LD_VAR 0 3
24002: PPUSH
24003: CALL_OW 301
24007: OR
24008: IFFALSE 23885
// if un then
24010: LD_VAR 0 3
24014: IFFALSE 24025
// RemoveUnit ( un ) ;
24016: LD_VAR 0 3
24020: PPUSH
24021: CALL_OW 64
// end ;
24025: PPOPN 3
24027: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24028: LD_INT 0
24030: PPUSH
// case cmd of 301 :
24031: LD_VAR 0 1
24035: PUSH
24036: LD_INT 301
24038: DOUBLE
24039: EQUAL
24040: IFTRUE 24044
24042: GO 24076
24044: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24045: LD_VAR 0 6
24049: PPUSH
24050: LD_VAR 0 7
24054: PPUSH
24055: LD_VAR 0 8
24059: PPUSH
24060: LD_VAR 0 4
24064: PPUSH
24065: LD_VAR 0 5
24069: PPUSH
24070: CALL 25277 0 5
24074: GO 24197
24076: LD_INT 302
24078: DOUBLE
24079: EQUAL
24080: IFTRUE 24084
24082: GO 24121
24084: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24085: LD_VAR 0 6
24089: PPUSH
24090: LD_VAR 0 7
24094: PPUSH
24095: LD_VAR 0 8
24099: PPUSH
24100: LD_VAR 0 9
24104: PPUSH
24105: LD_VAR 0 4
24109: PPUSH
24110: LD_VAR 0 5
24114: PPUSH
24115: CALL 25368 0 6
24119: GO 24197
24121: LD_INT 303
24123: DOUBLE
24124: EQUAL
24125: IFTRUE 24129
24127: GO 24166
24129: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24130: LD_VAR 0 6
24134: PPUSH
24135: LD_VAR 0 7
24139: PPUSH
24140: LD_VAR 0 8
24144: PPUSH
24145: LD_VAR 0 9
24149: PPUSH
24150: LD_VAR 0 4
24154: PPUSH
24155: LD_VAR 0 5
24159: PPUSH
24160: CALL 24202 0 6
24164: GO 24197
24166: LD_INT 304
24168: DOUBLE
24169: EQUAL
24170: IFTRUE 24174
24172: GO 24196
24174: POP
// hHackTeleport ( unit , x , y ) ; end ;
24175: LD_VAR 0 2
24179: PPUSH
24180: LD_VAR 0 4
24184: PPUSH
24185: LD_VAR 0 5
24189: PPUSH
24190: CALL 25961 0 3
24194: GO 24197
24196: POP
// end ;
24197: LD_VAR 0 12
24201: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24202: LD_INT 0
24204: PPUSH
24205: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24206: LD_VAR 0 1
24210: PUSH
24211: LD_INT 1
24213: LESS
24214: PUSH
24215: LD_VAR 0 1
24219: PUSH
24220: LD_INT 3
24222: GREATER
24223: OR
24224: PUSH
24225: LD_VAR 0 5
24229: PPUSH
24230: LD_VAR 0 6
24234: PPUSH
24235: CALL_OW 428
24239: OR
24240: IFFALSE 24244
// exit ;
24242: GO 24964
// uc_side := your_side ;
24244: LD_ADDR_OWVAR 20
24248: PUSH
24249: LD_OWVAR 2
24253: ST_TO_ADDR
// uc_nation := nation ;
24254: LD_ADDR_OWVAR 21
24258: PUSH
24259: LD_VAR 0 1
24263: ST_TO_ADDR
// bc_level = 1 ;
24264: LD_ADDR_OWVAR 43
24268: PUSH
24269: LD_INT 1
24271: ST_TO_ADDR
// case btype of 1 :
24272: LD_VAR 0 2
24276: PUSH
24277: LD_INT 1
24279: DOUBLE
24280: EQUAL
24281: IFTRUE 24285
24283: GO 24296
24285: POP
// bc_type := b_depot ; 2 :
24286: LD_ADDR_OWVAR 42
24290: PUSH
24291: LD_INT 0
24293: ST_TO_ADDR
24294: GO 24908
24296: LD_INT 2
24298: DOUBLE
24299: EQUAL
24300: IFTRUE 24304
24302: GO 24315
24304: POP
// bc_type := b_warehouse ; 3 :
24305: LD_ADDR_OWVAR 42
24309: PUSH
24310: LD_INT 1
24312: ST_TO_ADDR
24313: GO 24908
24315: LD_INT 3
24317: DOUBLE
24318: EQUAL
24319: IFTRUE 24323
24321: GO 24334
24323: POP
// bc_type := b_lab ; 4 .. 9 :
24324: LD_ADDR_OWVAR 42
24328: PUSH
24329: LD_INT 6
24331: ST_TO_ADDR
24332: GO 24908
24334: LD_INT 4
24336: DOUBLE
24337: GREATEREQUAL
24338: IFFALSE 24346
24340: LD_INT 9
24342: DOUBLE
24343: LESSEQUAL
24344: IFTRUE 24348
24346: GO 24400
24348: POP
// begin bc_type := b_lab_half ;
24349: LD_ADDR_OWVAR 42
24353: PUSH
24354: LD_INT 7
24356: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24357: LD_ADDR_OWVAR 44
24361: PUSH
24362: LD_INT 10
24364: PUSH
24365: LD_INT 11
24367: PUSH
24368: LD_INT 12
24370: PUSH
24371: LD_INT 15
24373: PUSH
24374: LD_INT 14
24376: PUSH
24377: LD_INT 13
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: PUSH
24388: LD_VAR 0 2
24392: PUSH
24393: LD_INT 3
24395: MINUS
24396: ARRAY
24397: ST_TO_ADDR
// end ; 10 .. 13 :
24398: GO 24908
24400: LD_INT 10
24402: DOUBLE
24403: GREATEREQUAL
24404: IFFALSE 24412
24406: LD_INT 13
24408: DOUBLE
24409: LESSEQUAL
24410: IFTRUE 24414
24412: GO 24491
24414: POP
// begin bc_type := b_lab_full ;
24415: LD_ADDR_OWVAR 42
24419: PUSH
24420: LD_INT 8
24422: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24423: LD_ADDR_OWVAR 44
24427: PUSH
24428: LD_INT 10
24430: PUSH
24431: LD_INT 12
24433: PUSH
24434: LD_INT 14
24436: PUSH
24437: LD_INT 13
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: PUSH
24446: LD_VAR 0 2
24450: PUSH
24451: LD_INT 9
24453: MINUS
24454: ARRAY
24455: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24456: LD_ADDR_OWVAR 45
24460: PUSH
24461: LD_INT 11
24463: PUSH
24464: LD_INT 15
24466: PUSH
24467: LD_INT 12
24469: PUSH
24470: LD_INT 15
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: PUSH
24479: LD_VAR 0 2
24483: PUSH
24484: LD_INT 9
24486: MINUS
24487: ARRAY
24488: ST_TO_ADDR
// end ; 14 :
24489: GO 24908
24491: LD_INT 14
24493: DOUBLE
24494: EQUAL
24495: IFTRUE 24499
24497: GO 24510
24499: POP
// bc_type := b_workshop ; 15 :
24500: LD_ADDR_OWVAR 42
24504: PUSH
24505: LD_INT 2
24507: ST_TO_ADDR
24508: GO 24908
24510: LD_INT 15
24512: DOUBLE
24513: EQUAL
24514: IFTRUE 24518
24516: GO 24529
24518: POP
// bc_type := b_factory ; 16 :
24519: LD_ADDR_OWVAR 42
24523: PUSH
24524: LD_INT 3
24526: ST_TO_ADDR
24527: GO 24908
24529: LD_INT 16
24531: DOUBLE
24532: EQUAL
24533: IFTRUE 24537
24535: GO 24548
24537: POP
// bc_type := b_ext_gun ; 17 :
24538: LD_ADDR_OWVAR 42
24542: PUSH
24543: LD_INT 17
24545: ST_TO_ADDR
24546: GO 24908
24548: LD_INT 17
24550: DOUBLE
24551: EQUAL
24552: IFTRUE 24556
24554: GO 24584
24556: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24557: LD_ADDR_OWVAR 42
24561: PUSH
24562: LD_INT 19
24564: PUSH
24565: LD_INT 23
24567: PUSH
24568: LD_INT 19
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: LIST
24575: PUSH
24576: LD_VAR 0 1
24580: ARRAY
24581: ST_TO_ADDR
24582: GO 24908
24584: LD_INT 18
24586: DOUBLE
24587: EQUAL
24588: IFTRUE 24592
24590: GO 24603
24592: POP
// bc_type := b_ext_radar ; 19 :
24593: LD_ADDR_OWVAR 42
24597: PUSH
24598: LD_INT 20
24600: ST_TO_ADDR
24601: GO 24908
24603: LD_INT 19
24605: DOUBLE
24606: EQUAL
24607: IFTRUE 24611
24609: GO 24622
24611: POP
// bc_type := b_ext_radio ; 20 :
24612: LD_ADDR_OWVAR 42
24616: PUSH
24617: LD_INT 22
24619: ST_TO_ADDR
24620: GO 24908
24622: LD_INT 20
24624: DOUBLE
24625: EQUAL
24626: IFTRUE 24630
24628: GO 24641
24630: POP
// bc_type := b_ext_siberium ; 21 :
24631: LD_ADDR_OWVAR 42
24635: PUSH
24636: LD_INT 21
24638: ST_TO_ADDR
24639: GO 24908
24641: LD_INT 21
24643: DOUBLE
24644: EQUAL
24645: IFTRUE 24649
24647: GO 24660
24649: POP
// bc_type := b_ext_computer ; 22 :
24650: LD_ADDR_OWVAR 42
24654: PUSH
24655: LD_INT 24
24657: ST_TO_ADDR
24658: GO 24908
24660: LD_INT 22
24662: DOUBLE
24663: EQUAL
24664: IFTRUE 24668
24666: GO 24679
24668: POP
// bc_type := b_ext_track ; 23 :
24669: LD_ADDR_OWVAR 42
24673: PUSH
24674: LD_INT 16
24676: ST_TO_ADDR
24677: GO 24908
24679: LD_INT 23
24681: DOUBLE
24682: EQUAL
24683: IFTRUE 24687
24685: GO 24698
24687: POP
// bc_type := b_ext_laser ; 24 :
24688: LD_ADDR_OWVAR 42
24692: PUSH
24693: LD_INT 25
24695: ST_TO_ADDR
24696: GO 24908
24698: LD_INT 24
24700: DOUBLE
24701: EQUAL
24702: IFTRUE 24706
24704: GO 24717
24706: POP
// bc_type := b_control_tower ; 25 :
24707: LD_ADDR_OWVAR 42
24711: PUSH
24712: LD_INT 36
24714: ST_TO_ADDR
24715: GO 24908
24717: LD_INT 25
24719: DOUBLE
24720: EQUAL
24721: IFTRUE 24725
24723: GO 24736
24725: POP
// bc_type := b_breastwork ; 26 :
24726: LD_ADDR_OWVAR 42
24730: PUSH
24731: LD_INT 31
24733: ST_TO_ADDR
24734: GO 24908
24736: LD_INT 26
24738: DOUBLE
24739: EQUAL
24740: IFTRUE 24744
24742: GO 24755
24744: POP
// bc_type := b_bunker ; 27 :
24745: LD_ADDR_OWVAR 42
24749: PUSH
24750: LD_INT 32
24752: ST_TO_ADDR
24753: GO 24908
24755: LD_INT 27
24757: DOUBLE
24758: EQUAL
24759: IFTRUE 24763
24761: GO 24774
24763: POP
// bc_type := b_turret ; 28 :
24764: LD_ADDR_OWVAR 42
24768: PUSH
24769: LD_INT 33
24771: ST_TO_ADDR
24772: GO 24908
24774: LD_INT 28
24776: DOUBLE
24777: EQUAL
24778: IFTRUE 24782
24780: GO 24793
24782: POP
// bc_type := b_armoury ; 29 :
24783: LD_ADDR_OWVAR 42
24787: PUSH
24788: LD_INT 4
24790: ST_TO_ADDR
24791: GO 24908
24793: LD_INT 29
24795: DOUBLE
24796: EQUAL
24797: IFTRUE 24801
24799: GO 24812
24801: POP
// bc_type := b_barracks ; 30 :
24802: LD_ADDR_OWVAR 42
24806: PUSH
24807: LD_INT 5
24809: ST_TO_ADDR
24810: GO 24908
24812: LD_INT 30
24814: DOUBLE
24815: EQUAL
24816: IFTRUE 24820
24818: GO 24831
24820: POP
// bc_type := b_solar_power ; 31 :
24821: LD_ADDR_OWVAR 42
24825: PUSH
24826: LD_INT 27
24828: ST_TO_ADDR
24829: GO 24908
24831: LD_INT 31
24833: DOUBLE
24834: EQUAL
24835: IFTRUE 24839
24837: GO 24850
24839: POP
// bc_type := b_oil_power ; 32 :
24840: LD_ADDR_OWVAR 42
24844: PUSH
24845: LD_INT 26
24847: ST_TO_ADDR
24848: GO 24908
24850: LD_INT 32
24852: DOUBLE
24853: EQUAL
24854: IFTRUE 24858
24856: GO 24869
24858: POP
// bc_type := b_siberite_power ; 33 :
24859: LD_ADDR_OWVAR 42
24863: PUSH
24864: LD_INT 28
24866: ST_TO_ADDR
24867: GO 24908
24869: LD_INT 33
24871: DOUBLE
24872: EQUAL
24873: IFTRUE 24877
24875: GO 24888
24877: POP
// bc_type := b_oil_mine ; 34 :
24878: LD_ADDR_OWVAR 42
24882: PUSH
24883: LD_INT 29
24885: ST_TO_ADDR
24886: GO 24908
24888: LD_INT 34
24890: DOUBLE
24891: EQUAL
24892: IFTRUE 24896
24894: GO 24907
24896: POP
// bc_type := b_siberite_mine ; end ;
24897: LD_ADDR_OWVAR 42
24901: PUSH
24902: LD_INT 30
24904: ST_TO_ADDR
24905: GO 24908
24907: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24908: LD_ADDR_VAR 0 8
24912: PUSH
24913: LD_VAR 0 5
24917: PPUSH
24918: LD_VAR 0 6
24922: PPUSH
24923: LD_VAR 0 3
24927: PPUSH
24928: CALL_OW 47
24932: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24933: LD_OWVAR 42
24937: PUSH
24938: LD_INT 32
24940: PUSH
24941: LD_INT 33
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: IN
24948: IFFALSE 24964
// PlaceWeaponTurret ( b , weapon ) ;
24950: LD_VAR 0 8
24954: PPUSH
24955: LD_VAR 0 4
24959: PPUSH
24960: CALL_OW 431
// end ;
24964: LD_VAR 0 7
24968: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24969: LD_INT 0
24971: PPUSH
24972: PPUSH
24973: PPUSH
24974: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24975: LD_ADDR_VAR 0 4
24979: PUSH
24980: LD_INT 22
24982: PUSH
24983: LD_OWVAR 2
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 2
24994: PUSH
24995: LD_INT 30
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 30
25007: PUSH
25008: LD_INT 1
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: LIST
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PPUSH
25024: CALL_OW 69
25028: ST_TO_ADDR
// if not tmp then
25029: LD_VAR 0 4
25033: NOT
25034: IFFALSE 25038
// exit ;
25036: GO 25097
// for i in tmp do
25038: LD_ADDR_VAR 0 2
25042: PUSH
25043: LD_VAR 0 4
25047: PUSH
25048: FOR_IN
25049: IFFALSE 25095
// for j = 1 to 3 do
25051: LD_ADDR_VAR 0 3
25055: PUSH
25056: DOUBLE
25057: LD_INT 1
25059: DEC
25060: ST_TO_ADDR
25061: LD_INT 3
25063: PUSH
25064: FOR_TO
25065: IFFALSE 25091
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25067: LD_VAR 0 2
25071: PPUSH
25072: CALL_OW 274
25076: PPUSH
25077: LD_VAR 0 3
25081: PPUSH
25082: LD_INT 99999
25084: PPUSH
25085: CALL_OW 277
25089: GO 25064
25091: POP
25092: POP
25093: GO 25048
25095: POP
25096: POP
// end ;
25097: LD_VAR 0 1
25101: RET
// export function hHackSetLevel10 ; var i , j ; begin
25102: LD_INT 0
25104: PPUSH
25105: PPUSH
25106: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25107: LD_ADDR_VAR 0 2
25111: PUSH
25112: LD_INT 21
25114: PUSH
25115: LD_INT 1
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PPUSH
25122: CALL_OW 69
25126: PUSH
25127: FOR_IN
25128: IFFALSE 25180
// if IsSelected ( i ) then
25130: LD_VAR 0 2
25134: PPUSH
25135: CALL_OW 306
25139: IFFALSE 25178
// begin for j := 1 to 4 do
25141: LD_ADDR_VAR 0 3
25145: PUSH
25146: DOUBLE
25147: LD_INT 1
25149: DEC
25150: ST_TO_ADDR
25151: LD_INT 4
25153: PUSH
25154: FOR_TO
25155: IFFALSE 25176
// SetSkill ( i , j , 10 ) ;
25157: LD_VAR 0 2
25161: PPUSH
25162: LD_VAR 0 3
25166: PPUSH
25167: LD_INT 10
25169: PPUSH
25170: CALL_OW 237
25174: GO 25154
25176: POP
25177: POP
// end ;
25178: GO 25127
25180: POP
25181: POP
// end ;
25182: LD_VAR 0 1
25186: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25187: LD_INT 0
25189: PPUSH
25190: PPUSH
25191: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25192: LD_ADDR_VAR 0 2
25196: PUSH
25197: LD_INT 22
25199: PUSH
25200: LD_OWVAR 2
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 21
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PPUSH
25223: CALL_OW 69
25227: PUSH
25228: FOR_IN
25229: IFFALSE 25270
// begin for j := 1 to 4 do
25231: LD_ADDR_VAR 0 3
25235: PUSH
25236: DOUBLE
25237: LD_INT 1
25239: DEC
25240: ST_TO_ADDR
25241: LD_INT 4
25243: PUSH
25244: FOR_TO
25245: IFFALSE 25266
// SetSkill ( i , j , 10 ) ;
25247: LD_VAR 0 2
25251: PPUSH
25252: LD_VAR 0 3
25256: PPUSH
25257: LD_INT 10
25259: PPUSH
25260: CALL_OW 237
25264: GO 25244
25266: POP
25267: POP
// end ;
25268: GO 25228
25270: POP
25271: POP
// end ;
25272: LD_VAR 0 1
25276: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25277: LD_INT 0
25279: PPUSH
// uc_side := your_side ;
25280: LD_ADDR_OWVAR 20
25284: PUSH
25285: LD_OWVAR 2
25289: ST_TO_ADDR
// uc_nation := nation ;
25290: LD_ADDR_OWVAR 21
25294: PUSH
25295: LD_VAR 0 1
25299: ST_TO_ADDR
// InitHc ;
25300: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25304: LD_INT 0
25306: PPUSH
25307: LD_VAR 0 2
25311: PPUSH
25312: LD_VAR 0 3
25316: PPUSH
25317: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25321: LD_VAR 0 4
25325: PPUSH
25326: LD_VAR 0 5
25330: PPUSH
25331: CALL_OW 428
25335: PUSH
25336: LD_INT 0
25338: EQUAL
25339: IFFALSE 25363
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25341: CALL_OW 44
25345: PPUSH
25346: LD_VAR 0 4
25350: PPUSH
25351: LD_VAR 0 5
25355: PPUSH
25356: LD_INT 1
25358: PPUSH
25359: CALL_OW 48
// end ;
25363: LD_VAR 0 6
25367: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25368: LD_INT 0
25370: PPUSH
25371: PPUSH
// uc_side := your_side ;
25372: LD_ADDR_OWVAR 20
25376: PUSH
25377: LD_OWVAR 2
25381: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25382: LD_VAR 0 1
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: LD_INT 2
25392: PUSH
25393: LD_INT 3
25395: PUSH
25396: LD_INT 4
25398: PUSH
25399: LD_INT 5
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: IN
25409: IFFALSE 25421
// uc_nation := nation_american else
25411: LD_ADDR_OWVAR 21
25415: PUSH
25416: LD_INT 1
25418: ST_TO_ADDR
25419: GO 25464
// if chassis in [ 11 , 12 , 13 , 14 ] then
25421: LD_VAR 0 1
25425: PUSH
25426: LD_INT 11
25428: PUSH
25429: LD_INT 12
25431: PUSH
25432: LD_INT 13
25434: PUSH
25435: LD_INT 14
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: IN
25444: IFFALSE 25456
// uc_nation := nation_arabian else
25446: LD_ADDR_OWVAR 21
25450: PUSH
25451: LD_INT 2
25453: ST_TO_ADDR
25454: GO 25464
// uc_nation := nation_russian ;
25456: LD_ADDR_OWVAR 21
25460: PUSH
25461: LD_INT 3
25463: ST_TO_ADDR
// vc_chassis := chassis ;
25464: LD_ADDR_OWVAR 37
25468: PUSH
25469: LD_VAR 0 1
25473: ST_TO_ADDR
// vc_engine := engine ;
25474: LD_ADDR_OWVAR 39
25478: PUSH
25479: LD_VAR 0 2
25483: ST_TO_ADDR
// vc_control := control ;
25484: LD_ADDR_OWVAR 38
25488: PUSH
25489: LD_VAR 0 3
25493: ST_TO_ADDR
// vc_weapon := weapon ;
25494: LD_ADDR_OWVAR 40
25498: PUSH
25499: LD_VAR 0 4
25503: ST_TO_ADDR
// un := CreateVehicle ;
25504: LD_ADDR_VAR 0 8
25508: PUSH
25509: CALL_OW 45
25513: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25514: LD_VAR 0 8
25518: PPUSH
25519: LD_INT 0
25521: PPUSH
25522: LD_INT 5
25524: PPUSH
25525: CALL_OW 12
25529: PPUSH
25530: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25534: LD_VAR 0 8
25538: PPUSH
25539: LD_VAR 0 5
25543: PPUSH
25544: LD_VAR 0 6
25548: PPUSH
25549: LD_INT 1
25551: PPUSH
25552: CALL_OW 48
// end ;
25556: LD_VAR 0 7
25560: RET
// export hInvincible ; every 1 do
25561: GO 25563
25563: DISABLE
// hInvincible := [ ] ;
25564: LD_ADDR_EXP 115
25568: PUSH
25569: EMPTY
25570: ST_TO_ADDR
25571: END
// every 10 do var i ;
25572: GO 25574
25574: DISABLE
25575: LD_INT 0
25577: PPUSH
// begin enable ;
25578: ENABLE
// if not hInvincible then
25579: LD_EXP 115
25583: NOT
25584: IFFALSE 25588
// exit ;
25586: GO 25632
// for i in hInvincible do
25588: LD_ADDR_VAR 0 1
25592: PUSH
25593: LD_EXP 115
25597: PUSH
25598: FOR_IN
25599: IFFALSE 25630
// if GetLives ( i ) < 1000 then
25601: LD_VAR 0 1
25605: PPUSH
25606: CALL_OW 256
25610: PUSH
25611: LD_INT 1000
25613: LESS
25614: IFFALSE 25628
// SetLives ( i , 1000 ) ;
25616: LD_VAR 0 1
25620: PPUSH
25621: LD_INT 1000
25623: PPUSH
25624: CALL_OW 234
25628: GO 25598
25630: POP
25631: POP
// end ;
25632: PPOPN 1
25634: END
// export function hHackInvincible ; var i ; begin
25635: LD_INT 0
25637: PPUSH
25638: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25639: LD_ADDR_VAR 0 2
25643: PUSH
25644: LD_INT 2
25646: PUSH
25647: LD_INT 21
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 21
25659: PUSH
25660: LD_INT 2
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: LIST
25671: PPUSH
25672: CALL_OW 69
25676: PUSH
25677: FOR_IN
25678: IFFALSE 25739
// if IsSelected ( i ) then
25680: LD_VAR 0 2
25684: PPUSH
25685: CALL_OW 306
25689: IFFALSE 25737
// begin if i in hInvincible then
25691: LD_VAR 0 2
25695: PUSH
25696: LD_EXP 115
25700: IN
25701: IFFALSE 25721
// hInvincible := hInvincible diff i else
25703: LD_ADDR_EXP 115
25707: PUSH
25708: LD_EXP 115
25712: PUSH
25713: LD_VAR 0 2
25717: DIFF
25718: ST_TO_ADDR
25719: GO 25737
// hInvincible := hInvincible union i ;
25721: LD_ADDR_EXP 115
25725: PUSH
25726: LD_EXP 115
25730: PUSH
25731: LD_VAR 0 2
25735: UNION
25736: ST_TO_ADDR
// end ;
25737: GO 25677
25739: POP
25740: POP
// end ;
25741: LD_VAR 0 1
25745: RET
// export function hHackInvisible ; var i , j ; begin
25746: LD_INT 0
25748: PPUSH
25749: PPUSH
25750: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25751: LD_ADDR_VAR 0 2
25755: PUSH
25756: LD_INT 21
25758: PUSH
25759: LD_INT 1
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PPUSH
25766: CALL_OW 69
25770: PUSH
25771: FOR_IN
25772: IFFALSE 25796
// if IsSelected ( i ) then
25774: LD_VAR 0 2
25778: PPUSH
25779: CALL_OW 306
25783: IFFALSE 25794
// ComForceInvisible ( i ) ;
25785: LD_VAR 0 2
25789: PPUSH
25790: CALL_OW 496
25794: GO 25771
25796: POP
25797: POP
// end ;
25798: LD_VAR 0 1
25802: RET
// export function hHackChangeYourSide ; begin
25803: LD_INT 0
25805: PPUSH
// if your_side = 8 then
25806: LD_OWVAR 2
25810: PUSH
25811: LD_INT 8
25813: EQUAL
25814: IFFALSE 25826
// your_side := 0 else
25816: LD_ADDR_OWVAR 2
25820: PUSH
25821: LD_INT 0
25823: ST_TO_ADDR
25824: GO 25840
// your_side := your_side + 1 ;
25826: LD_ADDR_OWVAR 2
25830: PUSH
25831: LD_OWVAR 2
25835: PUSH
25836: LD_INT 1
25838: PLUS
25839: ST_TO_ADDR
// end ;
25840: LD_VAR 0 1
25844: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25845: LD_INT 0
25847: PPUSH
25848: PPUSH
25849: PPUSH
// for i in all_units do
25850: LD_ADDR_VAR 0 2
25854: PUSH
25855: LD_OWVAR 3
25859: PUSH
25860: FOR_IN
25861: IFFALSE 25939
// if IsSelected ( i ) then
25863: LD_VAR 0 2
25867: PPUSH
25868: CALL_OW 306
25872: IFFALSE 25937
// begin j := GetSide ( i ) ;
25874: LD_ADDR_VAR 0 3
25878: PUSH
25879: LD_VAR 0 2
25883: PPUSH
25884: CALL_OW 255
25888: ST_TO_ADDR
// if j = 8 then
25889: LD_VAR 0 3
25893: PUSH
25894: LD_INT 8
25896: EQUAL
25897: IFFALSE 25909
// j := 0 else
25899: LD_ADDR_VAR 0 3
25903: PUSH
25904: LD_INT 0
25906: ST_TO_ADDR
25907: GO 25923
// j := j + 1 ;
25909: LD_ADDR_VAR 0 3
25913: PUSH
25914: LD_VAR 0 3
25918: PUSH
25919: LD_INT 1
25921: PLUS
25922: ST_TO_ADDR
// SetSide ( i , j ) ;
25923: LD_VAR 0 2
25927: PPUSH
25928: LD_VAR 0 3
25932: PPUSH
25933: CALL_OW 235
// end ;
25937: GO 25860
25939: POP
25940: POP
// end ;
25941: LD_VAR 0 1
25945: RET
// export function hHackFog ; begin
25946: LD_INT 0
25948: PPUSH
// FogOff ( true ) ;
25949: LD_INT 1
25951: PPUSH
25952: CALL_OW 344
// end ;
25956: LD_VAR 0 1
25960: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25961: LD_INT 0
25963: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25964: LD_VAR 0 1
25968: PPUSH
25969: LD_VAR 0 2
25973: PPUSH
25974: LD_VAR 0 3
25978: PPUSH
25979: LD_INT 1
25981: PPUSH
25982: LD_INT 1
25984: PPUSH
25985: CALL_OW 483
// CenterOnXY ( x , y ) ;
25989: LD_VAR 0 2
25993: PPUSH
25994: LD_VAR 0 3
25998: PPUSH
25999: CALL_OW 84
// end ; end_of_file
26003: LD_VAR 0 4
26007: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26008: LD_INT 0
26010: PPUSH
26011: PPUSH
26012: PPUSH
26013: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26014: LD_VAR 0 1
26018: PPUSH
26019: CALL_OW 264
26023: PUSH
26024: LD_EXP 47
26028: EQUAL
26029: IFFALSE 26101
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26031: LD_INT 68
26033: PPUSH
26034: LD_VAR 0 1
26038: PPUSH
26039: CALL_OW 255
26043: PPUSH
26044: CALL_OW 321
26048: PUSH
26049: LD_INT 2
26051: EQUAL
26052: IFFALSE 26064
// eff := 70 else
26054: LD_ADDR_VAR 0 4
26058: PUSH
26059: LD_INT 70
26061: ST_TO_ADDR
26062: GO 26072
// eff := 30 ;
26064: LD_ADDR_VAR 0 4
26068: PUSH
26069: LD_INT 30
26071: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26072: LD_VAR 0 1
26076: PPUSH
26077: CALL_OW 250
26081: PPUSH
26082: LD_VAR 0 1
26086: PPUSH
26087: CALL_OW 251
26091: PPUSH
26092: LD_VAR 0 4
26096: PPUSH
26097: CALL_OW 495
// end ; end ;
26101: LD_VAR 0 2
26105: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26106: LD_INT 0
26108: PPUSH
// end ;
26109: LD_VAR 0 4
26113: RET
// export function SOS_Command ( cmd ) ; begin
26114: LD_INT 0
26116: PPUSH
// end ;
26117: LD_VAR 0 2
26121: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26122: LD_INT 0
26124: PPUSH
// if cmd = 121 then
26125: LD_VAR 0 1
26129: PUSH
26130: LD_INT 121
26132: EQUAL
26133: IFFALSE 26135
// end ;
26135: LD_VAR 0 6
26139: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26140: LD_INT 0
26142: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26143: LD_VAR 0 1
26147: PUSH
26148: LD_INT 250
26150: EQUAL
26151: PUSH
26152: LD_VAR 0 2
26156: PPUSH
26157: CALL_OW 264
26161: PUSH
26162: LD_EXP 50
26166: EQUAL
26167: AND
26168: IFFALSE 26189
// MinerPlaceMine ( unit , x , y ) ;
26170: LD_VAR 0 2
26174: PPUSH
26175: LD_VAR 0 4
26179: PPUSH
26180: LD_VAR 0 5
26184: PPUSH
26185: CALL 28538 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26189: LD_VAR 0 1
26193: PUSH
26194: LD_INT 251
26196: EQUAL
26197: PUSH
26198: LD_VAR 0 2
26202: PPUSH
26203: CALL_OW 264
26207: PUSH
26208: LD_EXP 50
26212: EQUAL
26213: AND
26214: IFFALSE 26235
// MinerDetonateMine ( unit , x , y ) ;
26216: LD_VAR 0 2
26220: PPUSH
26221: LD_VAR 0 4
26225: PPUSH
26226: LD_VAR 0 5
26230: PPUSH
26231: CALL 28815 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26235: LD_VAR 0 1
26239: PUSH
26240: LD_INT 252
26242: EQUAL
26243: PUSH
26244: LD_VAR 0 2
26248: PPUSH
26249: CALL_OW 264
26253: PUSH
26254: LD_EXP 50
26258: EQUAL
26259: AND
26260: IFFALSE 26281
// MinerCreateMinefield ( unit , x , y ) ;
26262: LD_VAR 0 2
26266: PPUSH
26267: LD_VAR 0 4
26271: PPUSH
26272: LD_VAR 0 5
26276: PPUSH
26277: CALL 29232 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26281: LD_VAR 0 1
26285: PUSH
26286: LD_INT 253
26288: EQUAL
26289: PUSH
26290: LD_VAR 0 2
26294: PPUSH
26295: CALL_OW 257
26299: PUSH
26300: LD_INT 5
26302: EQUAL
26303: AND
26304: IFFALSE 26325
// ComBinocular ( unit , x , y ) ;
26306: LD_VAR 0 2
26310: PPUSH
26311: LD_VAR 0 4
26315: PPUSH
26316: LD_VAR 0 5
26320: PPUSH
26321: CALL 29603 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26325: LD_VAR 0 1
26329: PUSH
26330: LD_INT 254
26332: EQUAL
26333: PUSH
26334: LD_VAR 0 2
26338: PPUSH
26339: CALL_OW 264
26343: PUSH
26344: LD_EXP 45
26348: EQUAL
26349: AND
26350: PUSH
26351: LD_VAR 0 3
26355: PPUSH
26356: CALL_OW 263
26360: PUSH
26361: LD_INT 3
26363: EQUAL
26364: AND
26365: IFFALSE 26381
// HackDestroyVehicle ( unit , selectedUnit ) ;
26367: LD_VAR 0 2
26371: PPUSH
26372: LD_VAR 0 3
26376: PPUSH
26377: CALL 27898 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26381: LD_VAR 0 1
26385: PUSH
26386: LD_INT 255
26388: EQUAL
26389: PUSH
26390: LD_VAR 0 2
26394: PPUSH
26395: CALL_OW 264
26399: PUSH
26400: LD_INT 14
26402: PUSH
26403: LD_INT 53
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: IN
26410: AND
26411: PUSH
26412: LD_VAR 0 4
26416: PPUSH
26417: LD_VAR 0 5
26421: PPUSH
26422: CALL_OW 488
26426: AND
26427: IFFALSE 26451
// CutTreeXYR ( unit , x , y , 12 ) ;
26429: LD_VAR 0 2
26433: PPUSH
26434: LD_VAR 0 4
26438: PPUSH
26439: LD_VAR 0 5
26443: PPUSH
26444: LD_INT 12
26446: PPUSH
26447: CALL 26464 0 4
// end ;
26451: LD_VAR 0 6
26455: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
26456: LD_INT 0
26458: PPUSH
// end ;
26459: LD_VAR 0 4
26463: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26464: LD_INT 0
26466: PPUSH
26467: PPUSH
26468: PPUSH
26469: PPUSH
26470: PPUSH
26471: PPUSH
26472: PPUSH
26473: PPUSH
26474: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26475: LD_VAR 0 1
26479: NOT
26480: PUSH
26481: LD_VAR 0 2
26485: PPUSH
26486: LD_VAR 0 3
26490: PPUSH
26491: CALL_OW 488
26495: NOT
26496: OR
26497: PUSH
26498: LD_VAR 0 4
26502: NOT
26503: OR
26504: IFFALSE 26508
// exit ;
26506: GO 26848
// list := [ ] ;
26508: LD_ADDR_VAR 0 13
26512: PUSH
26513: EMPTY
26514: ST_TO_ADDR
// if x - r < 0 then
26515: LD_VAR 0 2
26519: PUSH
26520: LD_VAR 0 4
26524: MINUS
26525: PUSH
26526: LD_INT 0
26528: LESS
26529: IFFALSE 26541
// min_x := 0 else
26531: LD_ADDR_VAR 0 7
26535: PUSH
26536: LD_INT 0
26538: ST_TO_ADDR
26539: GO 26557
// min_x := x - r ;
26541: LD_ADDR_VAR 0 7
26545: PUSH
26546: LD_VAR 0 2
26550: PUSH
26551: LD_VAR 0 4
26555: MINUS
26556: ST_TO_ADDR
// if y - r < 0 then
26557: LD_VAR 0 3
26561: PUSH
26562: LD_VAR 0 4
26566: MINUS
26567: PUSH
26568: LD_INT 0
26570: LESS
26571: IFFALSE 26583
// min_y := 0 else
26573: LD_ADDR_VAR 0 8
26577: PUSH
26578: LD_INT 0
26580: ST_TO_ADDR
26581: GO 26599
// min_y := y - r ;
26583: LD_ADDR_VAR 0 8
26587: PUSH
26588: LD_VAR 0 3
26592: PUSH
26593: LD_VAR 0 4
26597: MINUS
26598: ST_TO_ADDR
// max_x := x + r ;
26599: LD_ADDR_VAR 0 9
26603: PUSH
26604: LD_VAR 0 2
26608: PUSH
26609: LD_VAR 0 4
26613: PLUS
26614: ST_TO_ADDR
// max_y := y + r ;
26615: LD_ADDR_VAR 0 10
26619: PUSH
26620: LD_VAR 0 3
26624: PUSH
26625: LD_VAR 0 4
26629: PLUS
26630: ST_TO_ADDR
// for _x = min_x to max_x do
26631: LD_ADDR_VAR 0 11
26635: PUSH
26636: DOUBLE
26637: LD_VAR 0 7
26641: DEC
26642: ST_TO_ADDR
26643: LD_VAR 0 9
26647: PUSH
26648: FOR_TO
26649: IFFALSE 26766
// for _y = min_y to max_y do
26651: LD_ADDR_VAR 0 12
26655: PUSH
26656: DOUBLE
26657: LD_VAR 0 8
26661: DEC
26662: ST_TO_ADDR
26663: LD_VAR 0 10
26667: PUSH
26668: FOR_TO
26669: IFFALSE 26762
// begin if not ValidHex ( _x , _y ) then
26671: LD_VAR 0 11
26675: PPUSH
26676: LD_VAR 0 12
26680: PPUSH
26681: CALL_OW 488
26685: NOT
26686: IFFALSE 26690
// continue ;
26688: GO 26668
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26690: LD_VAR 0 11
26694: PPUSH
26695: LD_VAR 0 12
26699: PPUSH
26700: CALL_OW 351
26704: PUSH
26705: LD_VAR 0 11
26709: PPUSH
26710: LD_VAR 0 12
26714: PPUSH
26715: CALL_OW 554
26719: AND
26720: IFFALSE 26760
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26722: LD_ADDR_VAR 0 13
26726: PUSH
26727: LD_VAR 0 13
26731: PPUSH
26732: LD_VAR 0 13
26736: PUSH
26737: LD_INT 1
26739: PLUS
26740: PPUSH
26741: LD_VAR 0 11
26745: PUSH
26746: LD_VAR 0 12
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PPUSH
26755: CALL_OW 2
26759: ST_TO_ADDR
// end ;
26760: GO 26668
26762: POP
26763: POP
26764: GO 26648
26766: POP
26767: POP
// if not list then
26768: LD_VAR 0 13
26772: NOT
26773: IFFALSE 26777
// exit ;
26775: GO 26848
// for i in list do
26777: LD_ADDR_VAR 0 6
26781: PUSH
26782: LD_VAR 0 13
26786: PUSH
26787: FOR_IN
26788: IFFALSE 26846
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26790: LD_VAR 0 1
26794: PPUSH
26795: LD_STRING M
26797: PUSH
26798: LD_VAR 0 6
26802: PUSH
26803: LD_INT 1
26805: ARRAY
26806: PUSH
26807: LD_VAR 0 6
26811: PUSH
26812: LD_INT 2
26814: ARRAY
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: PUSH
26837: EMPTY
26838: LIST
26839: PPUSH
26840: CALL_OW 447
26844: GO 26787
26846: POP
26847: POP
// end ;
26848: LD_VAR 0 5
26852: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26853: LD_EXP 118
26857: NOT
26858: IFFALSE 26908
26860: GO 26862
26862: DISABLE
// begin initHack := true ;
26863: LD_ADDR_EXP 118
26867: PUSH
26868: LD_INT 1
26870: ST_TO_ADDR
// hackTanks := [ ] ;
26871: LD_ADDR_EXP 119
26875: PUSH
26876: EMPTY
26877: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26878: LD_ADDR_EXP 120
26882: PUSH
26883: EMPTY
26884: ST_TO_ADDR
// hackLimit := 3 ;
26885: LD_ADDR_EXP 121
26889: PUSH
26890: LD_INT 3
26892: ST_TO_ADDR
// hackDist := 12 ;
26893: LD_ADDR_EXP 122
26897: PUSH
26898: LD_INT 12
26900: ST_TO_ADDR
// hackCounter := [ ] ;
26901: LD_ADDR_EXP 123
26905: PUSH
26906: EMPTY
26907: ST_TO_ADDR
// end ;
26908: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26909: LD_EXP 118
26913: PUSH
26914: LD_INT 34
26916: PUSH
26917: LD_EXP 45
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PPUSH
26926: CALL_OW 69
26930: AND
26931: IFFALSE 27186
26933: GO 26935
26935: DISABLE
26936: LD_INT 0
26938: PPUSH
26939: PPUSH
// begin enable ;
26940: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26941: LD_ADDR_VAR 0 1
26945: PUSH
26946: LD_INT 34
26948: PUSH
26949: LD_EXP 45
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PPUSH
26958: CALL_OW 69
26962: PUSH
26963: FOR_IN
26964: IFFALSE 27184
// begin if not i in hackTanks then
26966: LD_VAR 0 1
26970: PUSH
26971: LD_EXP 119
26975: IN
26976: NOT
26977: IFFALSE 27060
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26979: LD_ADDR_EXP 119
26983: PUSH
26984: LD_EXP 119
26988: PPUSH
26989: LD_EXP 119
26993: PUSH
26994: LD_INT 1
26996: PLUS
26997: PPUSH
26998: LD_VAR 0 1
27002: PPUSH
27003: CALL_OW 1
27007: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27008: LD_ADDR_EXP 120
27012: PUSH
27013: LD_EXP 120
27017: PPUSH
27018: LD_EXP 120
27022: PUSH
27023: LD_INT 1
27025: PLUS
27026: PPUSH
27027: EMPTY
27028: PPUSH
27029: CALL_OW 1
27033: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27034: LD_ADDR_EXP 123
27038: PUSH
27039: LD_EXP 123
27043: PPUSH
27044: LD_EXP 123
27048: PUSH
27049: LD_INT 1
27051: PLUS
27052: PPUSH
27053: EMPTY
27054: PPUSH
27055: CALL_OW 1
27059: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27060: LD_VAR 0 1
27064: PPUSH
27065: CALL_OW 302
27069: NOT
27070: IFFALSE 27083
// begin HackUnlinkAll ( i ) ;
27072: LD_VAR 0 1
27076: PPUSH
27077: CALL 27189 0 1
// continue ;
27081: GO 26963
// end ; HackCheckCapturedStatus ( i ) ;
27083: LD_VAR 0 1
27087: PPUSH
27088: CALL 27632 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27092: LD_ADDR_VAR 0 2
27096: PUSH
27097: LD_INT 81
27099: PUSH
27100: LD_VAR 0 1
27104: PPUSH
27105: CALL_OW 255
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 33
27116: PUSH
27117: LD_INT 3
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 91
27126: PUSH
27127: LD_VAR 0 1
27131: PUSH
27132: LD_EXP 122
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 50
27144: PUSH
27145: EMPTY
27146: LIST
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: PPUSH
27154: CALL_OW 69
27158: ST_TO_ADDR
// if not tmp then
27159: LD_VAR 0 2
27163: NOT
27164: IFFALSE 27168
// continue ;
27166: GO 26963
// HackLink ( i , tmp ) ;
27168: LD_VAR 0 1
27172: PPUSH
27173: LD_VAR 0 2
27177: PPUSH
27178: CALL 27325 0 2
// end ;
27182: GO 26963
27184: POP
27185: POP
// end ;
27186: PPOPN 2
27188: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27189: LD_INT 0
27191: PPUSH
27192: PPUSH
27193: PPUSH
// if not hack in hackTanks then
27194: LD_VAR 0 1
27198: PUSH
27199: LD_EXP 119
27203: IN
27204: NOT
27205: IFFALSE 27209
// exit ;
27207: GO 27320
// index := GetElementIndex ( hackTanks , hack ) ;
27209: LD_ADDR_VAR 0 4
27213: PUSH
27214: LD_EXP 119
27218: PPUSH
27219: LD_VAR 0 1
27223: PPUSH
27224: CALL 34754 0 2
27228: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27229: LD_EXP 120
27233: PUSH
27234: LD_VAR 0 4
27238: ARRAY
27239: IFFALSE 27320
// begin for i in hackTanksCaptured [ index ] do
27241: LD_ADDR_VAR 0 3
27245: PUSH
27246: LD_EXP 120
27250: PUSH
27251: LD_VAR 0 4
27255: ARRAY
27256: PUSH
27257: FOR_IN
27258: IFFALSE 27284
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27260: LD_VAR 0 3
27264: PUSH
27265: LD_INT 1
27267: ARRAY
27268: PPUSH
27269: LD_VAR 0 3
27273: PUSH
27274: LD_INT 2
27276: ARRAY
27277: PPUSH
27278: CALL_OW 235
27282: GO 27257
27284: POP
27285: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27286: LD_ADDR_EXP 120
27290: PUSH
27291: LD_EXP 120
27295: PPUSH
27296: LD_VAR 0 4
27300: PPUSH
27301: EMPTY
27302: PPUSH
27303: CALL_OW 1
27307: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27308: LD_VAR 0 1
27312: PPUSH
27313: LD_INT 0
27315: PPUSH
27316: CALL_OW 505
// end ; end ;
27320: LD_VAR 0 2
27324: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27325: LD_INT 0
27327: PPUSH
27328: PPUSH
27329: PPUSH
// if not hack in hackTanks or not vehicles then
27330: LD_VAR 0 1
27334: PUSH
27335: LD_EXP 119
27339: IN
27340: NOT
27341: PUSH
27342: LD_VAR 0 2
27346: NOT
27347: OR
27348: IFFALSE 27352
// exit ;
27350: GO 27627
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27352: LD_ADDR_VAR 0 2
27356: PUSH
27357: LD_VAR 0 1
27361: PPUSH
27362: LD_VAR 0 2
27366: PPUSH
27367: LD_INT 1
27369: PPUSH
27370: LD_INT 1
27372: PPUSH
27373: CALL 35404 0 4
27377: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27378: LD_ADDR_VAR 0 5
27382: PUSH
27383: LD_EXP 119
27387: PPUSH
27388: LD_VAR 0 1
27392: PPUSH
27393: CALL 34754 0 2
27397: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27398: LD_EXP 120
27402: PUSH
27403: LD_VAR 0 5
27407: ARRAY
27408: PUSH
27409: LD_EXP 121
27413: LESS
27414: IFFALSE 27603
// begin for i := 1 to vehicles do
27416: LD_ADDR_VAR 0 4
27420: PUSH
27421: DOUBLE
27422: LD_INT 1
27424: DEC
27425: ST_TO_ADDR
27426: LD_VAR 0 2
27430: PUSH
27431: FOR_TO
27432: IFFALSE 27601
// begin if hackTanksCaptured [ index ] = hackLimit then
27434: LD_EXP 120
27438: PUSH
27439: LD_VAR 0 5
27443: ARRAY
27444: PUSH
27445: LD_EXP 121
27449: EQUAL
27450: IFFALSE 27454
// break ;
27452: GO 27601
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27454: LD_ADDR_EXP 123
27458: PUSH
27459: LD_EXP 123
27463: PPUSH
27464: LD_VAR 0 5
27468: PPUSH
27469: LD_EXP 123
27473: PUSH
27474: LD_VAR 0 5
27478: ARRAY
27479: PUSH
27480: LD_INT 1
27482: PLUS
27483: PPUSH
27484: CALL_OW 1
27488: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27489: LD_ADDR_EXP 120
27493: PUSH
27494: LD_EXP 120
27498: PPUSH
27499: LD_VAR 0 5
27503: PUSH
27504: LD_EXP 120
27508: PUSH
27509: LD_VAR 0 5
27513: ARRAY
27514: PUSH
27515: LD_INT 1
27517: PLUS
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PPUSH
27523: LD_VAR 0 2
27527: PUSH
27528: LD_VAR 0 4
27532: ARRAY
27533: PUSH
27534: LD_VAR 0 2
27538: PUSH
27539: LD_VAR 0 4
27543: ARRAY
27544: PPUSH
27545: CALL_OW 255
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PPUSH
27554: CALL 34969 0 3
27558: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27559: LD_VAR 0 2
27563: PUSH
27564: LD_VAR 0 4
27568: ARRAY
27569: PPUSH
27570: LD_VAR 0 1
27574: PPUSH
27575: CALL_OW 255
27579: PPUSH
27580: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27584: LD_VAR 0 2
27588: PUSH
27589: LD_VAR 0 4
27593: ARRAY
27594: PPUSH
27595: CALL_OW 141
// end ;
27599: GO 27431
27601: POP
27602: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27603: LD_VAR 0 1
27607: PPUSH
27608: LD_EXP 120
27612: PUSH
27613: LD_VAR 0 5
27617: ARRAY
27618: PUSH
27619: LD_INT 0
27621: PLUS
27622: PPUSH
27623: CALL_OW 505
// end ;
27627: LD_VAR 0 3
27631: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27632: LD_INT 0
27634: PPUSH
27635: PPUSH
27636: PPUSH
27637: PPUSH
// if not hack in hackTanks then
27638: LD_VAR 0 1
27642: PUSH
27643: LD_EXP 119
27647: IN
27648: NOT
27649: IFFALSE 27653
// exit ;
27651: GO 27893
// index := GetElementIndex ( hackTanks , hack ) ;
27653: LD_ADDR_VAR 0 4
27657: PUSH
27658: LD_EXP 119
27662: PPUSH
27663: LD_VAR 0 1
27667: PPUSH
27668: CALL 34754 0 2
27672: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27673: LD_ADDR_VAR 0 3
27677: PUSH
27678: DOUBLE
27679: LD_EXP 120
27683: PUSH
27684: LD_VAR 0 4
27688: ARRAY
27689: INC
27690: ST_TO_ADDR
27691: LD_INT 1
27693: PUSH
27694: FOR_DOWNTO
27695: IFFALSE 27867
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27697: LD_ADDR_VAR 0 5
27701: PUSH
27702: LD_EXP 120
27706: PUSH
27707: LD_VAR 0 4
27711: ARRAY
27712: PUSH
27713: LD_VAR 0 3
27717: ARRAY
27718: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27719: LD_VAR 0 5
27723: PUSH
27724: LD_INT 1
27726: ARRAY
27727: PPUSH
27728: CALL_OW 302
27732: NOT
27733: PUSH
27734: LD_VAR 0 5
27738: PUSH
27739: LD_INT 1
27741: ARRAY
27742: PPUSH
27743: CALL_OW 255
27747: PUSH
27748: LD_VAR 0 1
27752: PPUSH
27753: CALL_OW 255
27757: NONEQUAL
27758: OR
27759: IFFALSE 27865
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27761: LD_VAR 0 5
27765: PUSH
27766: LD_INT 1
27768: ARRAY
27769: PPUSH
27770: CALL_OW 305
27774: PUSH
27775: LD_VAR 0 5
27779: PUSH
27780: LD_INT 1
27782: ARRAY
27783: PPUSH
27784: CALL_OW 255
27788: PUSH
27789: LD_VAR 0 1
27793: PPUSH
27794: CALL_OW 255
27798: EQUAL
27799: AND
27800: IFFALSE 27824
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27802: LD_VAR 0 5
27806: PUSH
27807: LD_INT 1
27809: ARRAY
27810: PPUSH
27811: LD_VAR 0 5
27815: PUSH
27816: LD_INT 2
27818: ARRAY
27819: PPUSH
27820: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27824: LD_ADDR_EXP 120
27828: PUSH
27829: LD_EXP 120
27833: PPUSH
27834: LD_VAR 0 4
27838: PPUSH
27839: LD_EXP 120
27843: PUSH
27844: LD_VAR 0 4
27848: ARRAY
27849: PPUSH
27850: LD_VAR 0 3
27854: PPUSH
27855: CALL_OW 3
27859: PPUSH
27860: CALL_OW 1
27864: ST_TO_ADDR
// end ; end ;
27865: GO 27694
27867: POP
27868: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27869: LD_VAR 0 1
27873: PPUSH
27874: LD_EXP 120
27878: PUSH
27879: LD_VAR 0 4
27883: ARRAY
27884: PUSH
27885: LD_INT 0
27887: PLUS
27888: PPUSH
27889: CALL_OW 505
// end ;
27893: LD_VAR 0 2
27897: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27898: LD_INT 0
27900: PPUSH
27901: PPUSH
27902: PPUSH
27903: PPUSH
// if not hack in hackTanks then
27904: LD_VAR 0 1
27908: PUSH
27909: LD_EXP 119
27913: IN
27914: NOT
27915: IFFALSE 27919
// exit ;
27917: GO 28004
// index := GetElementIndex ( hackTanks , hack ) ;
27919: LD_ADDR_VAR 0 5
27923: PUSH
27924: LD_EXP 119
27928: PPUSH
27929: LD_VAR 0 1
27933: PPUSH
27934: CALL 34754 0 2
27938: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27939: LD_ADDR_VAR 0 4
27943: PUSH
27944: DOUBLE
27945: LD_INT 1
27947: DEC
27948: ST_TO_ADDR
27949: LD_EXP 120
27953: PUSH
27954: LD_VAR 0 5
27958: ARRAY
27959: PUSH
27960: FOR_TO
27961: IFFALSE 28002
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27963: LD_EXP 120
27967: PUSH
27968: LD_VAR 0 5
27972: ARRAY
27973: PUSH
27974: LD_VAR 0 4
27978: ARRAY
27979: PUSH
27980: LD_INT 1
27982: ARRAY
27983: PUSH
27984: LD_VAR 0 2
27988: EQUAL
27989: IFFALSE 28000
// KillUnit ( vehicle ) ;
27991: LD_VAR 0 2
27995: PPUSH
27996: CALL_OW 66
28000: GO 27960
28002: POP
28003: POP
// end ;
28004: LD_VAR 0 3
28008: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28009: LD_EXP 124
28013: NOT
28014: IFFALSE 28049
28016: GO 28018
28018: DISABLE
// begin initMiner := true ;
28019: LD_ADDR_EXP 124
28023: PUSH
28024: LD_INT 1
28026: ST_TO_ADDR
// minersList := [ ] ;
28027: LD_ADDR_EXP 125
28031: PUSH
28032: EMPTY
28033: ST_TO_ADDR
// minerMinesList := [ ] ;
28034: LD_ADDR_EXP 126
28038: PUSH
28039: EMPTY
28040: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28041: LD_ADDR_EXP 127
28045: PUSH
28046: LD_INT 5
28048: ST_TO_ADDR
// end ;
28049: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28050: LD_EXP 124
28054: PUSH
28055: LD_INT 34
28057: PUSH
28058: LD_EXP 50
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PPUSH
28067: CALL_OW 69
28071: AND
28072: IFFALSE 28535
28074: GO 28076
28076: DISABLE
28077: LD_INT 0
28079: PPUSH
28080: PPUSH
28081: PPUSH
28082: PPUSH
// begin enable ;
28083: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28084: LD_ADDR_VAR 0 1
28088: PUSH
28089: LD_INT 34
28091: PUSH
28092: LD_EXP 50
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PPUSH
28101: CALL_OW 69
28105: PUSH
28106: FOR_IN
28107: IFFALSE 28179
// begin if not i in minersList then
28109: LD_VAR 0 1
28113: PUSH
28114: LD_EXP 125
28118: IN
28119: NOT
28120: IFFALSE 28177
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28122: LD_ADDR_EXP 125
28126: PUSH
28127: LD_EXP 125
28131: PPUSH
28132: LD_EXP 125
28136: PUSH
28137: LD_INT 1
28139: PLUS
28140: PPUSH
28141: LD_VAR 0 1
28145: PPUSH
28146: CALL_OW 1
28150: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28151: LD_ADDR_EXP 126
28155: PUSH
28156: LD_EXP 126
28160: PPUSH
28161: LD_EXP 126
28165: PUSH
28166: LD_INT 1
28168: PLUS
28169: PPUSH
28170: EMPTY
28171: PPUSH
28172: CALL_OW 1
28176: ST_TO_ADDR
// end end ;
28177: GO 28106
28179: POP
28180: POP
// for i := minerMinesList downto 1 do
28181: LD_ADDR_VAR 0 1
28185: PUSH
28186: DOUBLE
28187: LD_EXP 126
28191: INC
28192: ST_TO_ADDR
28193: LD_INT 1
28195: PUSH
28196: FOR_DOWNTO
28197: IFFALSE 28533
// begin if IsLive ( minersList [ i ] ) then
28199: LD_EXP 125
28203: PUSH
28204: LD_VAR 0 1
28208: ARRAY
28209: PPUSH
28210: CALL_OW 300
28214: IFFALSE 28242
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28216: LD_EXP 125
28220: PUSH
28221: LD_VAR 0 1
28225: ARRAY
28226: PPUSH
28227: LD_EXP 126
28231: PUSH
28232: LD_VAR 0 1
28236: ARRAY
28237: PPUSH
28238: CALL_OW 505
// if not minerMinesList [ i ] then
28242: LD_EXP 126
28246: PUSH
28247: LD_VAR 0 1
28251: ARRAY
28252: NOT
28253: IFFALSE 28257
// continue ;
28255: GO 28196
// for j := minerMinesList [ i ] downto 1 do
28257: LD_ADDR_VAR 0 2
28261: PUSH
28262: DOUBLE
28263: LD_EXP 126
28267: PUSH
28268: LD_VAR 0 1
28272: ARRAY
28273: INC
28274: ST_TO_ADDR
28275: LD_INT 1
28277: PUSH
28278: FOR_DOWNTO
28279: IFFALSE 28529
// begin side := GetSide ( minersList [ i ] ) ;
28281: LD_ADDR_VAR 0 3
28285: PUSH
28286: LD_EXP 125
28290: PUSH
28291: LD_VAR 0 1
28295: ARRAY
28296: PPUSH
28297: CALL_OW 255
28301: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28302: LD_ADDR_VAR 0 4
28306: PUSH
28307: LD_EXP 126
28311: PUSH
28312: LD_VAR 0 1
28316: ARRAY
28317: PUSH
28318: LD_VAR 0 2
28322: ARRAY
28323: PUSH
28324: LD_INT 1
28326: ARRAY
28327: PPUSH
28328: LD_EXP 126
28332: PUSH
28333: LD_VAR 0 1
28337: ARRAY
28338: PUSH
28339: LD_VAR 0 2
28343: ARRAY
28344: PUSH
28345: LD_INT 2
28347: ARRAY
28348: PPUSH
28349: CALL_OW 428
28353: ST_TO_ADDR
// if not tmp then
28354: LD_VAR 0 4
28358: NOT
28359: IFFALSE 28363
// continue ;
28361: GO 28278
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28363: LD_VAR 0 4
28367: PUSH
28368: LD_INT 81
28370: PUSH
28371: LD_VAR 0 3
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PPUSH
28380: CALL_OW 69
28384: IN
28385: PUSH
28386: LD_EXP 126
28390: PUSH
28391: LD_VAR 0 1
28395: ARRAY
28396: PUSH
28397: LD_VAR 0 2
28401: ARRAY
28402: PUSH
28403: LD_INT 1
28405: ARRAY
28406: PPUSH
28407: LD_EXP 126
28411: PUSH
28412: LD_VAR 0 1
28416: ARRAY
28417: PUSH
28418: LD_VAR 0 2
28422: ARRAY
28423: PUSH
28424: LD_INT 2
28426: ARRAY
28427: PPUSH
28428: CALL_OW 458
28432: AND
28433: IFFALSE 28527
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28435: LD_EXP 126
28439: PUSH
28440: LD_VAR 0 1
28444: ARRAY
28445: PUSH
28446: LD_VAR 0 2
28450: ARRAY
28451: PUSH
28452: LD_INT 1
28454: ARRAY
28455: PPUSH
28456: LD_EXP 126
28460: PUSH
28461: LD_VAR 0 1
28465: ARRAY
28466: PUSH
28467: LD_VAR 0 2
28471: ARRAY
28472: PUSH
28473: LD_INT 2
28475: ARRAY
28476: PPUSH
28477: LD_VAR 0 3
28481: PPUSH
28482: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28486: LD_ADDR_EXP 126
28490: PUSH
28491: LD_EXP 126
28495: PPUSH
28496: LD_VAR 0 1
28500: PPUSH
28501: LD_EXP 126
28505: PUSH
28506: LD_VAR 0 1
28510: ARRAY
28511: PPUSH
28512: LD_VAR 0 2
28516: PPUSH
28517: CALL_OW 3
28521: PPUSH
28522: CALL_OW 1
28526: ST_TO_ADDR
// end ; end ;
28527: GO 28278
28529: POP
28530: POP
// end ;
28531: GO 28196
28533: POP
28534: POP
// end ;
28535: PPOPN 4
28537: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28538: LD_INT 0
28540: PPUSH
28541: PPUSH
// result := false ;
28542: LD_ADDR_VAR 0 4
28546: PUSH
28547: LD_INT 0
28549: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28550: LD_VAR 0 1
28554: PPUSH
28555: CALL_OW 264
28559: PUSH
28560: LD_EXP 50
28564: EQUAL
28565: NOT
28566: IFFALSE 28570
// exit ;
28568: GO 28810
// index := GetElementIndex ( minersList , unit ) ;
28570: LD_ADDR_VAR 0 5
28574: PUSH
28575: LD_EXP 125
28579: PPUSH
28580: LD_VAR 0 1
28584: PPUSH
28585: CALL 34754 0 2
28589: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28590: LD_EXP 126
28594: PUSH
28595: LD_VAR 0 5
28599: ARRAY
28600: PUSH
28601: LD_EXP 127
28605: GREATEREQUAL
28606: IFFALSE 28610
// exit ;
28608: GO 28810
// ComMoveXY ( unit , x , y ) ;
28610: LD_VAR 0 1
28614: PPUSH
28615: LD_VAR 0 2
28619: PPUSH
28620: LD_VAR 0 3
28624: PPUSH
28625: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28629: LD_INT 35
28631: PPUSH
28632: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28636: LD_VAR 0 1
28640: PPUSH
28641: LD_VAR 0 2
28645: PPUSH
28646: LD_VAR 0 3
28650: PPUSH
28651: CALL 65151 0 3
28655: NOT
28656: PUSH
28657: LD_VAR 0 1
28661: PPUSH
28662: CALL_OW 314
28666: AND
28667: IFFALSE 28671
// exit ;
28669: GO 28810
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28671: LD_VAR 0 2
28675: PPUSH
28676: LD_VAR 0 3
28680: PPUSH
28681: CALL_OW 428
28685: PUSH
28686: LD_VAR 0 1
28690: EQUAL
28691: PUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: CALL_OW 314
28701: NOT
28702: AND
28703: IFFALSE 28629
// PlaySoundXY ( x , y , PlantMine ) ;
28705: LD_VAR 0 2
28709: PPUSH
28710: LD_VAR 0 3
28714: PPUSH
28715: LD_STRING PlantMine
28717: PPUSH
28718: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28722: LD_VAR 0 2
28726: PPUSH
28727: LD_VAR 0 3
28731: PPUSH
28732: LD_VAR 0 1
28736: PPUSH
28737: CALL_OW 255
28741: PPUSH
28742: LD_INT 0
28744: PPUSH
28745: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28749: LD_ADDR_EXP 126
28753: PUSH
28754: LD_EXP 126
28758: PPUSH
28759: LD_VAR 0 5
28763: PUSH
28764: LD_EXP 126
28768: PUSH
28769: LD_VAR 0 5
28773: ARRAY
28774: PUSH
28775: LD_INT 1
28777: PLUS
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PPUSH
28783: LD_VAR 0 2
28787: PUSH
28788: LD_VAR 0 3
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PPUSH
28797: CALL 34969 0 3
28801: ST_TO_ADDR
// result := true ;
28802: LD_ADDR_VAR 0 4
28806: PUSH
28807: LD_INT 1
28809: ST_TO_ADDR
// end ;
28810: LD_VAR 0 4
28814: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28815: LD_INT 0
28817: PPUSH
28818: PPUSH
28819: PPUSH
// if not unit in minersList then
28820: LD_VAR 0 1
28824: PUSH
28825: LD_EXP 125
28829: IN
28830: NOT
28831: IFFALSE 28835
// exit ;
28833: GO 29227
// index := GetElementIndex ( minersList , unit ) ;
28835: LD_ADDR_VAR 0 6
28839: PUSH
28840: LD_EXP 125
28844: PPUSH
28845: LD_VAR 0 1
28849: PPUSH
28850: CALL 34754 0 2
28854: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28855: LD_ADDR_VAR 0 5
28859: PUSH
28860: DOUBLE
28861: LD_EXP 126
28865: PUSH
28866: LD_VAR 0 6
28870: ARRAY
28871: INC
28872: ST_TO_ADDR
28873: LD_INT 1
28875: PUSH
28876: FOR_DOWNTO
28877: IFFALSE 29038
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28879: LD_EXP 126
28883: PUSH
28884: LD_VAR 0 6
28888: ARRAY
28889: PUSH
28890: LD_VAR 0 5
28894: ARRAY
28895: PUSH
28896: LD_INT 1
28898: ARRAY
28899: PUSH
28900: LD_VAR 0 2
28904: EQUAL
28905: PUSH
28906: LD_EXP 126
28910: PUSH
28911: LD_VAR 0 6
28915: ARRAY
28916: PUSH
28917: LD_VAR 0 5
28921: ARRAY
28922: PUSH
28923: LD_INT 2
28925: ARRAY
28926: PUSH
28927: LD_VAR 0 3
28931: EQUAL
28932: AND
28933: IFFALSE 29036
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28935: LD_EXP 126
28939: PUSH
28940: LD_VAR 0 6
28944: ARRAY
28945: PUSH
28946: LD_VAR 0 5
28950: ARRAY
28951: PUSH
28952: LD_INT 1
28954: ARRAY
28955: PPUSH
28956: LD_EXP 126
28960: PUSH
28961: LD_VAR 0 6
28965: ARRAY
28966: PUSH
28967: LD_VAR 0 5
28971: ARRAY
28972: PUSH
28973: LD_INT 2
28975: ARRAY
28976: PPUSH
28977: LD_VAR 0 1
28981: PPUSH
28982: CALL_OW 255
28986: PPUSH
28987: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28991: LD_ADDR_EXP 126
28995: PUSH
28996: LD_EXP 126
29000: PPUSH
29001: LD_VAR 0 6
29005: PPUSH
29006: LD_EXP 126
29010: PUSH
29011: LD_VAR 0 6
29015: ARRAY
29016: PPUSH
29017: LD_VAR 0 5
29021: PPUSH
29022: CALL_OW 3
29026: PPUSH
29027: CALL_OW 1
29031: ST_TO_ADDR
// exit ;
29032: POP
29033: POP
29034: GO 29227
// end ; end ;
29036: GO 28876
29038: POP
29039: POP
// for i := minerMinesList [ index ] downto 1 do
29040: LD_ADDR_VAR 0 5
29044: PUSH
29045: DOUBLE
29046: LD_EXP 126
29050: PUSH
29051: LD_VAR 0 6
29055: ARRAY
29056: INC
29057: ST_TO_ADDR
29058: LD_INT 1
29060: PUSH
29061: FOR_DOWNTO
29062: IFFALSE 29225
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29064: LD_EXP 126
29068: PUSH
29069: LD_VAR 0 6
29073: ARRAY
29074: PUSH
29075: LD_VAR 0 5
29079: ARRAY
29080: PUSH
29081: LD_INT 1
29083: ARRAY
29084: PPUSH
29085: LD_EXP 126
29089: PUSH
29090: LD_VAR 0 6
29094: ARRAY
29095: PUSH
29096: LD_VAR 0 5
29100: ARRAY
29101: PUSH
29102: LD_INT 2
29104: ARRAY
29105: PPUSH
29106: LD_VAR 0 2
29110: PPUSH
29111: LD_VAR 0 3
29115: PPUSH
29116: CALL_OW 298
29120: PUSH
29121: LD_INT 6
29123: LESS
29124: IFFALSE 29223
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29126: LD_EXP 126
29130: PUSH
29131: LD_VAR 0 6
29135: ARRAY
29136: PUSH
29137: LD_VAR 0 5
29141: ARRAY
29142: PUSH
29143: LD_INT 1
29145: ARRAY
29146: PPUSH
29147: LD_EXP 126
29151: PUSH
29152: LD_VAR 0 6
29156: ARRAY
29157: PUSH
29158: LD_VAR 0 5
29162: ARRAY
29163: PUSH
29164: LD_INT 2
29166: ARRAY
29167: PPUSH
29168: LD_VAR 0 1
29172: PPUSH
29173: CALL_OW 255
29177: PPUSH
29178: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29182: LD_ADDR_EXP 126
29186: PUSH
29187: LD_EXP 126
29191: PPUSH
29192: LD_VAR 0 6
29196: PPUSH
29197: LD_EXP 126
29201: PUSH
29202: LD_VAR 0 6
29206: ARRAY
29207: PPUSH
29208: LD_VAR 0 5
29212: PPUSH
29213: CALL_OW 3
29217: PPUSH
29218: CALL_OW 1
29222: ST_TO_ADDR
// end ; end ;
29223: GO 29061
29225: POP
29226: POP
// end ;
29227: LD_VAR 0 4
29231: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29232: LD_INT 0
29234: PPUSH
29235: PPUSH
29236: PPUSH
29237: PPUSH
29238: PPUSH
29239: PPUSH
29240: PPUSH
29241: PPUSH
29242: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29243: LD_VAR 0 1
29247: PPUSH
29248: CALL_OW 264
29252: PUSH
29253: LD_EXP 50
29257: EQUAL
29258: NOT
29259: PUSH
29260: LD_VAR 0 1
29264: PUSH
29265: LD_EXP 125
29269: IN
29270: NOT
29271: OR
29272: IFFALSE 29276
// exit ;
29274: GO 29598
// index := GetElementIndex ( minersList , unit ) ;
29276: LD_ADDR_VAR 0 6
29280: PUSH
29281: LD_EXP 125
29285: PPUSH
29286: LD_VAR 0 1
29290: PPUSH
29291: CALL 34754 0 2
29295: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29296: LD_ADDR_VAR 0 8
29300: PUSH
29301: LD_EXP 127
29305: PUSH
29306: LD_EXP 126
29310: PUSH
29311: LD_VAR 0 6
29315: ARRAY
29316: MINUS
29317: ST_TO_ADDR
// if not minesFreeAmount then
29318: LD_VAR 0 8
29322: NOT
29323: IFFALSE 29327
// exit ;
29325: GO 29598
// tmp := [ ] ;
29327: LD_ADDR_VAR 0 7
29331: PUSH
29332: EMPTY
29333: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29334: LD_ADDR_VAR 0 5
29338: PUSH
29339: DOUBLE
29340: LD_INT 1
29342: DEC
29343: ST_TO_ADDR
29344: LD_VAR 0 8
29348: PUSH
29349: FOR_TO
29350: IFFALSE 29545
// begin _d := rand ( 0 , 5 ) ;
29352: LD_ADDR_VAR 0 11
29356: PUSH
29357: LD_INT 0
29359: PPUSH
29360: LD_INT 5
29362: PPUSH
29363: CALL_OW 12
29367: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29368: LD_ADDR_VAR 0 12
29372: PUSH
29373: LD_INT 2
29375: PPUSH
29376: LD_INT 6
29378: PPUSH
29379: CALL_OW 12
29383: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29384: LD_ADDR_VAR 0 9
29388: PUSH
29389: LD_VAR 0 2
29393: PPUSH
29394: LD_VAR 0 11
29398: PPUSH
29399: LD_VAR 0 12
29403: PPUSH
29404: CALL_OW 272
29408: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29409: LD_ADDR_VAR 0 10
29413: PUSH
29414: LD_VAR 0 3
29418: PPUSH
29419: LD_VAR 0 11
29423: PPUSH
29424: LD_VAR 0 12
29428: PPUSH
29429: CALL_OW 273
29433: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29434: LD_VAR 0 9
29438: PPUSH
29439: LD_VAR 0 10
29443: PPUSH
29444: CALL_OW 488
29448: PUSH
29449: LD_VAR 0 9
29453: PUSH
29454: LD_VAR 0 10
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_VAR 0 7
29467: IN
29468: NOT
29469: AND
29470: PUSH
29471: LD_VAR 0 9
29475: PPUSH
29476: LD_VAR 0 10
29480: PPUSH
29481: CALL_OW 458
29485: NOT
29486: AND
29487: IFFALSE 29529
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29489: LD_ADDR_VAR 0 7
29493: PUSH
29494: LD_VAR 0 7
29498: PPUSH
29499: LD_VAR 0 7
29503: PUSH
29504: LD_INT 1
29506: PLUS
29507: PPUSH
29508: LD_VAR 0 9
29512: PUSH
29513: LD_VAR 0 10
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PPUSH
29522: CALL_OW 1
29526: ST_TO_ADDR
29527: GO 29543
// i := i - 1 ;
29529: LD_ADDR_VAR 0 5
29533: PUSH
29534: LD_VAR 0 5
29538: PUSH
29539: LD_INT 1
29541: MINUS
29542: ST_TO_ADDR
// end ;
29543: GO 29349
29545: POP
29546: POP
// for i in tmp do
29547: LD_ADDR_VAR 0 5
29551: PUSH
29552: LD_VAR 0 7
29556: PUSH
29557: FOR_IN
29558: IFFALSE 29596
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29560: LD_VAR 0 1
29564: PPUSH
29565: LD_VAR 0 5
29569: PUSH
29570: LD_INT 1
29572: ARRAY
29573: PPUSH
29574: LD_VAR 0 5
29578: PUSH
29579: LD_INT 2
29581: ARRAY
29582: PPUSH
29583: CALL 28538 0 3
29587: NOT
29588: IFFALSE 29594
// exit ;
29590: POP
29591: POP
29592: GO 29598
29594: GO 29557
29596: POP
29597: POP
// end ;
29598: LD_VAR 0 4
29602: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29603: LD_INT 0
29605: PPUSH
29606: PPUSH
29607: PPUSH
29608: PPUSH
29609: PPUSH
29610: PPUSH
29611: PPUSH
// if not GetClass ( unit ) = class_sniper then
29612: LD_VAR 0 1
29616: PPUSH
29617: CALL_OW 257
29621: PUSH
29622: LD_INT 5
29624: EQUAL
29625: NOT
29626: IFFALSE 29630
// exit ;
29628: GO 30018
// dist := 8 ;
29630: LD_ADDR_VAR 0 5
29634: PUSH
29635: LD_INT 8
29637: ST_TO_ADDR
// viewRange := 12 ;
29638: LD_ADDR_VAR 0 7
29642: PUSH
29643: LD_INT 12
29645: ST_TO_ADDR
// side := GetSide ( unit ) ;
29646: LD_ADDR_VAR 0 6
29650: PUSH
29651: LD_VAR 0 1
29655: PPUSH
29656: CALL_OW 255
29660: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29661: LD_INT 61
29663: PPUSH
29664: LD_VAR 0 6
29668: PPUSH
29669: CALL_OW 321
29673: PUSH
29674: LD_INT 2
29676: EQUAL
29677: IFFALSE 29687
// viewRange := 16 ;
29679: LD_ADDR_VAR 0 7
29683: PUSH
29684: LD_INT 16
29686: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29687: LD_VAR 0 1
29691: PPUSH
29692: LD_VAR 0 2
29696: PPUSH
29697: LD_VAR 0 3
29701: PPUSH
29702: CALL_OW 297
29706: PUSH
29707: LD_VAR 0 5
29711: GREATER
29712: IFFALSE 29791
// begin ComMoveXY ( unit , x , y ) ;
29714: LD_VAR 0 1
29718: PPUSH
29719: LD_VAR 0 2
29723: PPUSH
29724: LD_VAR 0 3
29728: PPUSH
29729: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29733: LD_INT 35
29735: PPUSH
29736: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29740: LD_VAR 0 1
29744: PPUSH
29745: LD_VAR 0 2
29749: PPUSH
29750: LD_VAR 0 3
29754: PPUSH
29755: CALL 65151 0 3
29759: NOT
29760: IFFALSE 29764
// exit ;
29762: GO 30018
// until GetDistUnitXY ( unit , x , y ) < dist ;
29764: LD_VAR 0 1
29768: PPUSH
29769: LD_VAR 0 2
29773: PPUSH
29774: LD_VAR 0 3
29778: PPUSH
29779: CALL_OW 297
29783: PUSH
29784: LD_VAR 0 5
29788: LESS
29789: IFFALSE 29733
// end ; ComTurnXY ( unit , x , y ) ;
29791: LD_VAR 0 1
29795: PPUSH
29796: LD_VAR 0 2
29800: PPUSH
29801: LD_VAR 0 3
29805: PPUSH
29806: CALL_OW 118
// wait ( 5 ) ;
29810: LD_INT 5
29812: PPUSH
29813: CALL_OW 67
// _d := GetDir ( unit ) ;
29817: LD_ADDR_VAR 0 10
29821: PUSH
29822: LD_VAR 0 1
29826: PPUSH
29827: CALL_OW 254
29831: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29832: LD_ADDR_VAR 0 8
29836: PUSH
29837: LD_VAR 0 1
29841: PPUSH
29842: CALL_OW 250
29846: PPUSH
29847: LD_VAR 0 10
29851: PPUSH
29852: LD_VAR 0 5
29856: PPUSH
29857: CALL_OW 272
29861: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29862: LD_ADDR_VAR 0 9
29866: PUSH
29867: LD_VAR 0 1
29871: PPUSH
29872: CALL_OW 251
29876: PPUSH
29877: LD_VAR 0 10
29881: PPUSH
29882: LD_VAR 0 5
29886: PPUSH
29887: CALL_OW 273
29891: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29892: LD_VAR 0 8
29896: PPUSH
29897: LD_VAR 0 9
29901: PPUSH
29902: CALL_OW 488
29906: NOT
29907: IFFALSE 29911
// exit ;
29909: GO 30018
// ComAnimCustom ( unit , 1 ) ;
29911: LD_VAR 0 1
29915: PPUSH
29916: LD_INT 1
29918: PPUSH
29919: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29923: LD_VAR 0 8
29927: PPUSH
29928: LD_VAR 0 9
29932: PPUSH
29933: LD_VAR 0 6
29937: PPUSH
29938: LD_VAR 0 7
29942: PPUSH
29943: CALL_OW 330
// repeat wait ( 1 ) ;
29947: LD_INT 1
29949: PPUSH
29950: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29954: LD_VAR 0 1
29958: PPUSH
29959: CALL_OW 316
29963: PUSH
29964: LD_VAR 0 1
29968: PPUSH
29969: CALL_OW 314
29973: OR
29974: PUSH
29975: LD_VAR 0 1
29979: PPUSH
29980: CALL_OW 302
29984: NOT
29985: OR
29986: PUSH
29987: LD_VAR 0 1
29991: PPUSH
29992: CALL_OW 301
29996: OR
29997: IFFALSE 29947
// RemoveSeeing ( _x , _y , side ) ;
29999: LD_VAR 0 8
30003: PPUSH
30004: LD_VAR 0 9
30008: PPUSH
30009: LD_VAR 0 6
30013: PPUSH
30014: CALL_OW 331
// end ; end_of_file
30018: LD_VAR 0 4
30022: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30023: LD_INT 0
30025: PPUSH
30026: PPUSH
// if exist_mode then
30027: LD_VAR 0 2
30031: IFFALSE 30056
// unit := CreateCharacter ( prefix & ident ) else
30033: LD_ADDR_VAR 0 5
30037: PUSH
30038: LD_VAR 0 3
30042: PUSH
30043: LD_VAR 0 1
30047: STR
30048: PPUSH
30049: CALL_OW 34
30053: ST_TO_ADDR
30054: GO 30071
// unit := NewCharacter ( ident ) ;
30056: LD_ADDR_VAR 0 5
30060: PUSH
30061: LD_VAR 0 1
30065: PPUSH
30066: CALL_OW 25
30070: ST_TO_ADDR
// result := unit ;
30071: LD_ADDR_VAR 0 4
30075: PUSH
30076: LD_VAR 0 5
30080: ST_TO_ADDR
// end ;
30081: LD_VAR 0 4
30085: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30086: LD_INT 0
30088: PPUSH
30089: PPUSH
// if not side or not nation then
30090: LD_VAR 0 1
30094: NOT
30095: PUSH
30096: LD_VAR 0 2
30100: NOT
30101: OR
30102: IFFALSE 30106
// exit ;
30104: GO 30870
// case nation of nation_american :
30106: LD_VAR 0 2
30110: PUSH
30111: LD_INT 1
30113: DOUBLE
30114: EQUAL
30115: IFTRUE 30119
30117: GO 30333
30119: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30120: LD_ADDR_VAR 0 4
30124: PUSH
30125: LD_INT 35
30127: PUSH
30128: LD_INT 45
30130: PUSH
30131: LD_INT 46
30133: PUSH
30134: LD_INT 47
30136: PUSH
30137: LD_INT 82
30139: PUSH
30140: LD_INT 83
30142: PUSH
30143: LD_INT 84
30145: PUSH
30146: LD_INT 85
30148: PUSH
30149: LD_INT 86
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: LD_INT 2
30157: PUSH
30158: LD_INT 6
30160: PUSH
30161: LD_INT 15
30163: PUSH
30164: LD_INT 16
30166: PUSH
30167: LD_INT 7
30169: PUSH
30170: LD_INT 12
30172: PUSH
30173: LD_INT 13
30175: PUSH
30176: LD_INT 10
30178: PUSH
30179: LD_INT 14
30181: PUSH
30182: LD_INT 20
30184: PUSH
30185: LD_INT 21
30187: PUSH
30188: LD_INT 22
30190: PUSH
30191: LD_INT 25
30193: PUSH
30194: LD_INT 32
30196: PUSH
30197: LD_INT 27
30199: PUSH
30200: LD_INT 36
30202: PUSH
30203: LD_INT 69
30205: PUSH
30206: LD_INT 39
30208: PUSH
30209: LD_INT 34
30211: PUSH
30212: LD_INT 40
30214: PUSH
30215: LD_INT 48
30217: PUSH
30218: LD_INT 49
30220: PUSH
30221: LD_INT 50
30223: PUSH
30224: LD_INT 51
30226: PUSH
30227: LD_INT 52
30229: PUSH
30230: LD_INT 53
30232: PUSH
30233: LD_INT 54
30235: PUSH
30236: LD_INT 55
30238: PUSH
30239: LD_INT 56
30241: PUSH
30242: LD_INT 57
30244: PUSH
30245: LD_INT 58
30247: PUSH
30248: LD_INT 59
30250: PUSH
30251: LD_INT 60
30253: PUSH
30254: LD_INT 61
30256: PUSH
30257: LD_INT 62
30259: PUSH
30260: LD_INT 80
30262: PUSH
30263: LD_INT 82
30265: PUSH
30266: LD_INT 83
30268: PUSH
30269: LD_INT 84
30271: PUSH
30272: LD_INT 85
30274: PUSH
30275: LD_INT 86
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: ST_TO_ADDR
30331: GO 30794
30333: LD_INT 2
30335: DOUBLE
30336: EQUAL
30337: IFTRUE 30341
30339: GO 30563
30341: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
30342: LD_ADDR_VAR 0 4
30346: PUSH
30347: LD_INT 35
30349: PUSH
30350: LD_INT 45
30352: PUSH
30353: LD_INT 46
30355: PUSH
30356: LD_INT 47
30358: PUSH
30359: LD_INT 82
30361: PUSH
30362: LD_INT 83
30364: PUSH
30365: LD_INT 84
30367: PUSH
30368: LD_INT 85
30370: PUSH
30371: LD_INT 87
30373: PUSH
30374: LD_INT 70
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 11
30382: PUSH
30383: LD_INT 3
30385: PUSH
30386: LD_INT 4
30388: PUSH
30389: LD_INT 5
30391: PUSH
30392: LD_INT 6
30394: PUSH
30395: LD_INT 15
30397: PUSH
30398: LD_INT 18
30400: PUSH
30401: LD_INT 7
30403: PUSH
30404: LD_INT 17
30406: PUSH
30407: LD_INT 8
30409: PUSH
30410: LD_INT 20
30412: PUSH
30413: LD_INT 21
30415: PUSH
30416: LD_INT 22
30418: PUSH
30419: LD_INT 72
30421: PUSH
30422: LD_INT 26
30424: PUSH
30425: LD_INT 69
30427: PUSH
30428: LD_INT 39
30430: PUSH
30431: LD_INT 40
30433: PUSH
30434: LD_INT 41
30436: PUSH
30437: LD_INT 42
30439: PUSH
30440: LD_INT 43
30442: PUSH
30443: LD_INT 48
30445: PUSH
30446: LD_INT 49
30448: PUSH
30449: LD_INT 50
30451: PUSH
30452: LD_INT 51
30454: PUSH
30455: LD_INT 52
30457: PUSH
30458: LD_INT 53
30460: PUSH
30461: LD_INT 54
30463: PUSH
30464: LD_INT 55
30466: PUSH
30467: LD_INT 56
30469: PUSH
30470: LD_INT 60
30472: PUSH
30473: LD_INT 61
30475: PUSH
30476: LD_INT 62
30478: PUSH
30479: LD_INT 66
30481: PUSH
30482: LD_INT 67
30484: PUSH
30485: LD_INT 68
30487: PUSH
30488: LD_INT 81
30490: PUSH
30491: LD_INT 82
30493: PUSH
30494: LD_INT 83
30496: PUSH
30497: LD_INT 84
30499: PUSH
30500: LD_INT 85
30502: PUSH
30503: LD_INT 87
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: ST_TO_ADDR
30561: GO 30794
30563: LD_INT 3
30565: DOUBLE
30566: EQUAL
30567: IFTRUE 30571
30569: GO 30793
30571: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30572: LD_ADDR_VAR 0 4
30576: PUSH
30577: LD_INT 46
30579: PUSH
30580: LD_INT 47
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: LD_INT 2
30588: PUSH
30589: LD_INT 82
30591: PUSH
30592: LD_INT 83
30594: PUSH
30595: LD_INT 84
30597: PUSH
30598: LD_INT 85
30600: PUSH
30601: LD_INT 86
30603: PUSH
30604: LD_INT 11
30606: PUSH
30607: LD_INT 9
30609: PUSH
30610: LD_INT 20
30612: PUSH
30613: LD_INT 19
30615: PUSH
30616: LD_INT 21
30618: PUSH
30619: LD_INT 24
30621: PUSH
30622: LD_INT 22
30624: PUSH
30625: LD_INT 25
30627: PUSH
30628: LD_INT 28
30630: PUSH
30631: LD_INT 29
30633: PUSH
30634: LD_INT 30
30636: PUSH
30637: LD_INT 31
30639: PUSH
30640: LD_INT 37
30642: PUSH
30643: LD_INT 38
30645: PUSH
30646: LD_INT 32
30648: PUSH
30649: LD_INT 27
30651: PUSH
30652: LD_INT 33
30654: PUSH
30655: LD_INT 69
30657: PUSH
30658: LD_INT 39
30660: PUSH
30661: LD_INT 34
30663: PUSH
30664: LD_INT 40
30666: PUSH
30667: LD_INT 71
30669: PUSH
30670: LD_INT 23
30672: PUSH
30673: LD_INT 44
30675: PUSH
30676: LD_INT 48
30678: PUSH
30679: LD_INT 49
30681: PUSH
30682: LD_INT 50
30684: PUSH
30685: LD_INT 51
30687: PUSH
30688: LD_INT 52
30690: PUSH
30691: LD_INT 53
30693: PUSH
30694: LD_INT 54
30696: PUSH
30697: LD_INT 55
30699: PUSH
30700: LD_INT 56
30702: PUSH
30703: LD_INT 57
30705: PUSH
30706: LD_INT 58
30708: PUSH
30709: LD_INT 59
30711: PUSH
30712: LD_INT 63
30714: PUSH
30715: LD_INT 64
30717: PUSH
30718: LD_INT 65
30720: PUSH
30721: LD_INT 82
30723: PUSH
30724: LD_INT 83
30726: PUSH
30727: LD_INT 84
30729: PUSH
30730: LD_INT 85
30732: PUSH
30733: LD_INT 86
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: ST_TO_ADDR
30791: GO 30794
30793: POP
// if state > - 1 and state < 3 then
30794: LD_VAR 0 3
30798: PUSH
30799: LD_INT 1
30801: NEG
30802: GREATER
30803: PUSH
30804: LD_VAR 0 3
30808: PUSH
30809: LD_INT 3
30811: LESS
30812: AND
30813: IFFALSE 30870
// for i in result do
30815: LD_ADDR_VAR 0 5
30819: PUSH
30820: LD_VAR 0 4
30824: PUSH
30825: FOR_IN
30826: IFFALSE 30868
// if GetTech ( i , side ) <> state then
30828: LD_VAR 0 5
30832: PPUSH
30833: LD_VAR 0 1
30837: PPUSH
30838: CALL_OW 321
30842: PUSH
30843: LD_VAR 0 3
30847: NONEQUAL
30848: IFFALSE 30866
// result := result diff i ;
30850: LD_ADDR_VAR 0 4
30854: PUSH
30855: LD_VAR 0 4
30859: PUSH
30860: LD_VAR 0 5
30864: DIFF
30865: ST_TO_ADDR
30866: GO 30825
30868: POP
30869: POP
// end ;
30870: LD_VAR 0 4
30874: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30875: LD_INT 0
30877: PPUSH
30878: PPUSH
30879: PPUSH
// result := true ;
30880: LD_ADDR_VAR 0 3
30884: PUSH
30885: LD_INT 1
30887: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30888: LD_ADDR_VAR 0 5
30892: PUSH
30893: LD_VAR 0 2
30897: PPUSH
30898: CALL_OW 480
30902: ST_TO_ADDR
// if not tmp then
30903: LD_VAR 0 5
30907: NOT
30908: IFFALSE 30912
// exit ;
30910: GO 30961
// for i in tmp do
30912: LD_ADDR_VAR 0 4
30916: PUSH
30917: LD_VAR 0 5
30921: PUSH
30922: FOR_IN
30923: IFFALSE 30959
// if GetTech ( i , side ) <> state_researched then
30925: LD_VAR 0 4
30929: PPUSH
30930: LD_VAR 0 1
30934: PPUSH
30935: CALL_OW 321
30939: PUSH
30940: LD_INT 2
30942: NONEQUAL
30943: IFFALSE 30957
// begin result := false ;
30945: LD_ADDR_VAR 0 3
30949: PUSH
30950: LD_INT 0
30952: ST_TO_ADDR
// exit ;
30953: POP
30954: POP
30955: GO 30961
// end ;
30957: GO 30922
30959: POP
30960: POP
// end ;
30961: LD_VAR 0 3
30965: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30966: LD_INT 0
30968: PPUSH
30969: PPUSH
30970: PPUSH
30971: PPUSH
30972: PPUSH
30973: PPUSH
30974: PPUSH
30975: PPUSH
30976: PPUSH
30977: PPUSH
30978: PPUSH
30979: PPUSH
30980: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30981: LD_VAR 0 1
30985: NOT
30986: PUSH
30987: LD_VAR 0 1
30991: PPUSH
30992: CALL_OW 257
30996: PUSH
30997: LD_INT 9
30999: NONEQUAL
31000: OR
31001: IFFALSE 31005
// exit ;
31003: GO 31578
// side := GetSide ( unit ) ;
31005: LD_ADDR_VAR 0 9
31009: PUSH
31010: LD_VAR 0 1
31014: PPUSH
31015: CALL_OW 255
31019: ST_TO_ADDR
// tech_space := tech_spacanom ;
31020: LD_ADDR_VAR 0 12
31024: PUSH
31025: LD_INT 29
31027: ST_TO_ADDR
// tech_time := tech_taurad ;
31028: LD_ADDR_VAR 0 13
31032: PUSH
31033: LD_INT 28
31035: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31036: LD_ADDR_VAR 0 11
31040: PUSH
31041: LD_VAR 0 1
31045: PPUSH
31046: CALL_OW 310
31050: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31051: LD_VAR 0 11
31055: PPUSH
31056: CALL_OW 247
31060: PUSH
31061: LD_INT 2
31063: EQUAL
31064: IFFALSE 31068
// exit ;
31066: GO 31578
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31068: LD_ADDR_VAR 0 8
31072: PUSH
31073: LD_INT 81
31075: PUSH
31076: LD_VAR 0 9
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 3
31087: PUSH
31088: LD_INT 21
31090: PUSH
31091: LD_INT 3
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PPUSH
31106: CALL_OW 69
31110: ST_TO_ADDR
// if not tmp then
31111: LD_VAR 0 8
31115: NOT
31116: IFFALSE 31120
// exit ;
31118: GO 31578
// if in_unit then
31120: LD_VAR 0 11
31124: IFFALSE 31148
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31126: LD_ADDR_VAR 0 10
31130: PUSH
31131: LD_VAR 0 8
31135: PPUSH
31136: LD_VAR 0 11
31140: PPUSH
31141: CALL_OW 74
31145: ST_TO_ADDR
31146: GO 31168
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31148: LD_ADDR_VAR 0 10
31152: PUSH
31153: LD_VAR 0 8
31157: PPUSH
31158: LD_VAR 0 1
31162: PPUSH
31163: CALL_OW 74
31167: ST_TO_ADDR
// if not enemy then
31168: LD_VAR 0 10
31172: NOT
31173: IFFALSE 31177
// exit ;
31175: GO 31578
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31177: LD_VAR 0 11
31181: PUSH
31182: LD_VAR 0 11
31186: PPUSH
31187: LD_VAR 0 10
31191: PPUSH
31192: CALL_OW 296
31196: PUSH
31197: LD_INT 13
31199: GREATER
31200: AND
31201: PUSH
31202: LD_VAR 0 1
31206: PPUSH
31207: LD_VAR 0 10
31211: PPUSH
31212: CALL_OW 296
31216: PUSH
31217: LD_INT 12
31219: GREATER
31220: OR
31221: IFFALSE 31225
// exit ;
31223: GO 31578
// missile := [ 1 ] ;
31225: LD_ADDR_VAR 0 14
31229: PUSH
31230: LD_INT 1
31232: PUSH
31233: EMPTY
31234: LIST
31235: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31236: LD_VAR 0 9
31240: PPUSH
31241: LD_VAR 0 12
31245: PPUSH
31246: CALL_OW 325
31250: IFFALSE 31279
// missile := Insert ( missile , missile + 1 , 2 ) ;
31252: LD_ADDR_VAR 0 14
31256: PUSH
31257: LD_VAR 0 14
31261: PPUSH
31262: LD_VAR 0 14
31266: PUSH
31267: LD_INT 1
31269: PLUS
31270: PPUSH
31271: LD_INT 2
31273: PPUSH
31274: CALL_OW 2
31278: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31279: LD_VAR 0 9
31283: PPUSH
31284: LD_VAR 0 13
31288: PPUSH
31289: CALL_OW 325
31293: PUSH
31294: LD_VAR 0 10
31298: PPUSH
31299: CALL_OW 255
31303: PPUSH
31304: LD_VAR 0 13
31308: PPUSH
31309: CALL_OW 325
31313: NOT
31314: AND
31315: IFFALSE 31344
// missile := Insert ( missile , missile + 1 , 3 ) ;
31317: LD_ADDR_VAR 0 14
31321: PUSH
31322: LD_VAR 0 14
31326: PPUSH
31327: LD_VAR 0 14
31331: PUSH
31332: LD_INT 1
31334: PLUS
31335: PPUSH
31336: LD_INT 3
31338: PPUSH
31339: CALL_OW 2
31343: ST_TO_ADDR
// if missile < 2 then
31344: LD_VAR 0 14
31348: PUSH
31349: LD_INT 2
31351: LESS
31352: IFFALSE 31356
// exit ;
31354: GO 31578
// x := GetX ( enemy ) ;
31356: LD_ADDR_VAR 0 4
31360: PUSH
31361: LD_VAR 0 10
31365: PPUSH
31366: CALL_OW 250
31370: ST_TO_ADDR
// y := GetY ( enemy ) ;
31371: LD_ADDR_VAR 0 5
31375: PUSH
31376: LD_VAR 0 10
31380: PPUSH
31381: CALL_OW 251
31385: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31386: LD_ADDR_VAR 0 6
31390: PUSH
31391: LD_VAR 0 4
31395: PUSH
31396: LD_INT 1
31398: NEG
31399: PPUSH
31400: LD_INT 1
31402: PPUSH
31403: CALL_OW 12
31407: PLUS
31408: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31409: LD_ADDR_VAR 0 7
31413: PUSH
31414: LD_VAR 0 5
31418: PUSH
31419: LD_INT 1
31421: NEG
31422: PPUSH
31423: LD_INT 1
31425: PPUSH
31426: CALL_OW 12
31430: PLUS
31431: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31432: LD_VAR 0 6
31436: PPUSH
31437: LD_VAR 0 7
31441: PPUSH
31442: CALL_OW 488
31446: NOT
31447: IFFALSE 31469
// begin _x := x ;
31449: LD_ADDR_VAR 0 6
31453: PUSH
31454: LD_VAR 0 4
31458: ST_TO_ADDR
// _y := y ;
31459: LD_ADDR_VAR 0 7
31463: PUSH
31464: LD_VAR 0 5
31468: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31469: LD_ADDR_VAR 0 3
31473: PUSH
31474: LD_INT 1
31476: PPUSH
31477: LD_VAR 0 14
31481: PPUSH
31482: CALL_OW 12
31486: ST_TO_ADDR
// case i of 1 :
31487: LD_VAR 0 3
31491: PUSH
31492: LD_INT 1
31494: DOUBLE
31495: EQUAL
31496: IFTRUE 31500
31498: GO 31517
31500: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31501: LD_VAR 0 1
31505: PPUSH
31506: LD_VAR 0 10
31510: PPUSH
31511: CALL_OW 115
31515: GO 31578
31517: LD_INT 2
31519: DOUBLE
31520: EQUAL
31521: IFTRUE 31525
31523: GO 31547
31525: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31526: LD_VAR 0 1
31530: PPUSH
31531: LD_VAR 0 6
31535: PPUSH
31536: LD_VAR 0 7
31540: PPUSH
31541: CALL_OW 153
31545: GO 31578
31547: LD_INT 3
31549: DOUBLE
31550: EQUAL
31551: IFTRUE 31555
31553: GO 31577
31555: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31556: LD_VAR 0 1
31560: PPUSH
31561: LD_VAR 0 6
31565: PPUSH
31566: LD_VAR 0 7
31570: PPUSH
31571: CALL_OW 154
31575: GO 31578
31577: POP
// end ;
31578: LD_VAR 0 2
31582: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31583: LD_INT 0
31585: PPUSH
31586: PPUSH
31587: PPUSH
31588: PPUSH
31589: PPUSH
31590: PPUSH
// if not unit or not building then
31591: LD_VAR 0 1
31595: NOT
31596: PUSH
31597: LD_VAR 0 2
31601: NOT
31602: OR
31603: IFFALSE 31607
// exit ;
31605: GO 31765
// x := GetX ( building ) ;
31607: LD_ADDR_VAR 0 5
31611: PUSH
31612: LD_VAR 0 2
31616: PPUSH
31617: CALL_OW 250
31621: ST_TO_ADDR
// y := GetY ( building ) ;
31622: LD_ADDR_VAR 0 6
31626: PUSH
31627: LD_VAR 0 2
31631: PPUSH
31632: CALL_OW 251
31636: ST_TO_ADDR
// for i = 0 to 5 do
31637: LD_ADDR_VAR 0 4
31641: PUSH
31642: DOUBLE
31643: LD_INT 0
31645: DEC
31646: ST_TO_ADDR
31647: LD_INT 5
31649: PUSH
31650: FOR_TO
31651: IFFALSE 31763
// begin _x := ShiftX ( x , i , 3 ) ;
31653: LD_ADDR_VAR 0 7
31657: PUSH
31658: LD_VAR 0 5
31662: PPUSH
31663: LD_VAR 0 4
31667: PPUSH
31668: LD_INT 3
31670: PPUSH
31671: CALL_OW 272
31675: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31676: LD_ADDR_VAR 0 8
31680: PUSH
31681: LD_VAR 0 6
31685: PPUSH
31686: LD_VAR 0 4
31690: PPUSH
31691: LD_INT 3
31693: PPUSH
31694: CALL_OW 273
31698: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31699: LD_VAR 0 7
31703: PPUSH
31704: LD_VAR 0 8
31708: PPUSH
31709: CALL_OW 488
31713: NOT
31714: IFFALSE 31718
// continue ;
31716: GO 31650
// if HexInfo ( _x , _y ) = 0 then
31718: LD_VAR 0 7
31722: PPUSH
31723: LD_VAR 0 8
31727: PPUSH
31728: CALL_OW 428
31732: PUSH
31733: LD_INT 0
31735: EQUAL
31736: IFFALSE 31761
// begin ComMoveXY ( unit , _x , _y ) ;
31738: LD_VAR 0 1
31742: PPUSH
31743: LD_VAR 0 7
31747: PPUSH
31748: LD_VAR 0 8
31752: PPUSH
31753: CALL_OW 111
// exit ;
31757: POP
31758: POP
31759: GO 31765
// end ; end ;
31761: GO 31650
31763: POP
31764: POP
// end ;
31765: LD_VAR 0 3
31769: RET
// export function ScanBase ( side , base_area ) ; begin
31770: LD_INT 0
31772: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31773: LD_ADDR_VAR 0 3
31777: PUSH
31778: LD_VAR 0 2
31782: PPUSH
31783: LD_INT 81
31785: PUSH
31786: LD_VAR 0 1
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PPUSH
31795: CALL_OW 70
31799: ST_TO_ADDR
// end ;
31800: LD_VAR 0 3
31804: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31805: LD_INT 0
31807: PPUSH
31808: PPUSH
31809: PPUSH
31810: PPUSH
// result := false ;
31811: LD_ADDR_VAR 0 2
31815: PUSH
31816: LD_INT 0
31818: ST_TO_ADDR
// side := GetSide ( unit ) ;
31819: LD_ADDR_VAR 0 3
31823: PUSH
31824: LD_VAR 0 1
31828: PPUSH
31829: CALL_OW 255
31833: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31834: LD_ADDR_VAR 0 4
31838: PUSH
31839: LD_VAR 0 1
31843: PPUSH
31844: CALL_OW 248
31848: ST_TO_ADDR
// case nat of 1 :
31849: LD_VAR 0 4
31853: PUSH
31854: LD_INT 1
31856: DOUBLE
31857: EQUAL
31858: IFTRUE 31862
31860: GO 31873
31862: POP
// tech := tech_lassight ; 2 :
31863: LD_ADDR_VAR 0 5
31867: PUSH
31868: LD_INT 12
31870: ST_TO_ADDR
31871: GO 31912
31873: LD_INT 2
31875: DOUBLE
31876: EQUAL
31877: IFTRUE 31881
31879: GO 31892
31881: POP
// tech := tech_mortar ; 3 :
31882: LD_ADDR_VAR 0 5
31886: PUSH
31887: LD_INT 41
31889: ST_TO_ADDR
31890: GO 31912
31892: LD_INT 3
31894: DOUBLE
31895: EQUAL
31896: IFTRUE 31900
31898: GO 31911
31900: POP
// tech := tech_bazooka ; end ;
31901: LD_ADDR_VAR 0 5
31905: PUSH
31906: LD_INT 44
31908: ST_TO_ADDR
31909: GO 31912
31911: POP
// if Researched ( side , tech ) then
31912: LD_VAR 0 3
31916: PPUSH
31917: LD_VAR 0 5
31921: PPUSH
31922: CALL_OW 325
31926: IFFALSE 31953
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31928: LD_ADDR_VAR 0 2
31932: PUSH
31933: LD_INT 5
31935: PUSH
31936: LD_INT 8
31938: PUSH
31939: LD_INT 9
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: LIST
31946: PUSH
31947: LD_VAR 0 4
31951: ARRAY
31952: ST_TO_ADDR
// end ;
31953: LD_VAR 0 2
31957: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31958: LD_INT 0
31960: PPUSH
31961: PPUSH
31962: PPUSH
// if not mines then
31963: LD_VAR 0 2
31967: NOT
31968: IFFALSE 31972
// exit ;
31970: GO 32116
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31972: LD_ADDR_VAR 0 5
31976: PUSH
31977: LD_INT 81
31979: PUSH
31980: LD_VAR 0 1
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: LD_INT 21
31994: PUSH
31995: LD_INT 3
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PPUSH
32010: CALL_OW 69
32014: ST_TO_ADDR
// for i in mines do
32015: LD_ADDR_VAR 0 4
32019: PUSH
32020: LD_VAR 0 2
32024: PUSH
32025: FOR_IN
32026: IFFALSE 32114
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32028: LD_VAR 0 4
32032: PUSH
32033: LD_INT 1
32035: ARRAY
32036: PPUSH
32037: LD_VAR 0 4
32041: PUSH
32042: LD_INT 2
32044: ARRAY
32045: PPUSH
32046: CALL_OW 458
32050: NOT
32051: IFFALSE 32055
// continue ;
32053: GO 32025
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32055: LD_VAR 0 4
32059: PUSH
32060: LD_INT 1
32062: ARRAY
32063: PPUSH
32064: LD_VAR 0 4
32068: PUSH
32069: LD_INT 2
32071: ARRAY
32072: PPUSH
32073: CALL_OW 428
32077: PUSH
32078: LD_VAR 0 5
32082: IN
32083: IFFALSE 32112
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32085: LD_VAR 0 4
32089: PUSH
32090: LD_INT 1
32092: ARRAY
32093: PPUSH
32094: LD_VAR 0 4
32098: PUSH
32099: LD_INT 2
32101: ARRAY
32102: PPUSH
32103: LD_VAR 0 1
32107: PPUSH
32108: CALL_OW 456
// end ;
32112: GO 32025
32114: POP
32115: POP
// end ;
32116: LD_VAR 0 3
32120: RET
// export function Count ( array ) ; var i ; begin
32121: LD_INT 0
32123: PPUSH
32124: PPUSH
// result := 0 ;
32125: LD_ADDR_VAR 0 2
32129: PUSH
32130: LD_INT 0
32132: ST_TO_ADDR
// for i in array do
32133: LD_ADDR_VAR 0 3
32137: PUSH
32138: LD_VAR 0 1
32142: PUSH
32143: FOR_IN
32144: IFFALSE 32168
// if i then
32146: LD_VAR 0 3
32150: IFFALSE 32166
// result := result + 1 ;
32152: LD_ADDR_VAR 0 2
32156: PUSH
32157: LD_VAR 0 2
32161: PUSH
32162: LD_INT 1
32164: PLUS
32165: ST_TO_ADDR
32166: GO 32143
32168: POP
32169: POP
// end ;
32170: LD_VAR 0 2
32174: RET
// export function IsEmpty ( building ) ; begin
32175: LD_INT 0
32177: PPUSH
// if not building then
32178: LD_VAR 0 1
32182: NOT
32183: IFFALSE 32187
// exit ;
32185: GO 32230
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32187: LD_ADDR_VAR 0 2
32191: PUSH
32192: LD_VAR 0 1
32196: PUSH
32197: LD_INT 22
32199: PUSH
32200: LD_VAR 0 1
32204: PPUSH
32205: CALL_OW 255
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 58
32216: PUSH
32217: EMPTY
32218: LIST
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PPUSH
32224: CALL_OW 69
32228: IN
32229: ST_TO_ADDR
// end ;
32230: LD_VAR 0 2
32234: RET
// export function IsNotFull ( building ) ; begin
32235: LD_INT 0
32237: PPUSH
// if not building then
32238: LD_VAR 0 1
32242: NOT
32243: IFFALSE 32247
// exit ;
32245: GO 32266
// result := UnitsInside ( building ) < 6 ;
32247: LD_ADDR_VAR 0 2
32251: PUSH
32252: LD_VAR 0 1
32256: PPUSH
32257: CALL_OW 313
32261: PUSH
32262: LD_INT 6
32264: LESS
32265: ST_TO_ADDR
// end ;
32266: LD_VAR 0 2
32270: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32271: LD_INT 0
32273: PPUSH
32274: PPUSH
32275: PPUSH
32276: PPUSH
// tmp := [ ] ;
32277: LD_ADDR_VAR 0 3
32281: PUSH
32282: EMPTY
32283: ST_TO_ADDR
// list := [ ] ;
32284: LD_ADDR_VAR 0 5
32288: PUSH
32289: EMPTY
32290: ST_TO_ADDR
// for i = 16 to 25 do
32291: LD_ADDR_VAR 0 4
32295: PUSH
32296: DOUBLE
32297: LD_INT 16
32299: DEC
32300: ST_TO_ADDR
32301: LD_INT 25
32303: PUSH
32304: FOR_TO
32305: IFFALSE 32378
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32307: LD_ADDR_VAR 0 3
32311: PUSH
32312: LD_VAR 0 3
32316: PUSH
32317: LD_INT 22
32319: PUSH
32320: LD_VAR 0 1
32324: PPUSH
32325: CALL_OW 255
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 91
32336: PUSH
32337: LD_VAR 0 1
32341: PUSH
32342: LD_INT 6
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 30
32352: PUSH
32353: LD_VAR 0 4
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: PUSH
32367: EMPTY
32368: LIST
32369: PPUSH
32370: CALL_OW 69
32374: ADD
32375: ST_TO_ADDR
32376: GO 32304
32378: POP
32379: POP
// for i = 1 to tmp do
32380: LD_ADDR_VAR 0 4
32384: PUSH
32385: DOUBLE
32386: LD_INT 1
32388: DEC
32389: ST_TO_ADDR
32390: LD_VAR 0 3
32394: PUSH
32395: FOR_TO
32396: IFFALSE 32484
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32398: LD_ADDR_VAR 0 5
32402: PUSH
32403: LD_VAR 0 5
32407: PUSH
32408: LD_VAR 0 3
32412: PUSH
32413: LD_VAR 0 4
32417: ARRAY
32418: PPUSH
32419: CALL_OW 266
32423: PUSH
32424: LD_VAR 0 3
32428: PUSH
32429: LD_VAR 0 4
32433: ARRAY
32434: PPUSH
32435: CALL_OW 250
32439: PUSH
32440: LD_VAR 0 3
32444: PUSH
32445: LD_VAR 0 4
32449: ARRAY
32450: PPUSH
32451: CALL_OW 251
32455: PUSH
32456: LD_VAR 0 3
32460: PUSH
32461: LD_VAR 0 4
32465: ARRAY
32466: PPUSH
32467: CALL_OW 254
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: PUSH
32478: EMPTY
32479: LIST
32480: ADD
32481: ST_TO_ADDR
32482: GO 32395
32484: POP
32485: POP
// result := list ;
32486: LD_ADDR_VAR 0 2
32490: PUSH
32491: LD_VAR 0 5
32495: ST_TO_ADDR
// end ;
32496: LD_VAR 0 2
32500: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32501: LD_INT 0
32503: PPUSH
32504: PPUSH
32505: PPUSH
32506: PPUSH
32507: PPUSH
32508: PPUSH
32509: PPUSH
// if not factory then
32510: LD_VAR 0 1
32514: NOT
32515: IFFALSE 32519
// exit ;
32517: GO 33112
// if control = control_apeman then
32519: LD_VAR 0 4
32523: PUSH
32524: LD_INT 5
32526: EQUAL
32527: IFFALSE 32636
// begin tmp := UnitsInside ( factory ) ;
32529: LD_ADDR_VAR 0 8
32533: PUSH
32534: LD_VAR 0 1
32538: PPUSH
32539: CALL_OW 313
32543: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32544: LD_VAR 0 8
32548: PPUSH
32549: LD_INT 25
32551: PUSH
32552: LD_INT 12
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PPUSH
32559: CALL_OW 72
32563: NOT
32564: IFFALSE 32574
// control := control_manual ;
32566: LD_ADDR_VAR 0 4
32570: PUSH
32571: LD_INT 1
32573: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32574: LD_ADDR_VAR 0 8
32578: PUSH
32579: LD_VAR 0 1
32583: PPUSH
32584: CALL 32271 0 1
32588: ST_TO_ADDR
// if tmp then
32589: LD_VAR 0 8
32593: IFFALSE 32636
// begin for i in tmp do
32595: LD_ADDR_VAR 0 7
32599: PUSH
32600: LD_VAR 0 8
32604: PUSH
32605: FOR_IN
32606: IFFALSE 32634
// if i [ 1 ] = b_ext_radio then
32608: LD_VAR 0 7
32612: PUSH
32613: LD_INT 1
32615: ARRAY
32616: PUSH
32617: LD_INT 22
32619: EQUAL
32620: IFFALSE 32632
// begin control := control_remote ;
32622: LD_ADDR_VAR 0 4
32626: PUSH
32627: LD_INT 2
32629: ST_TO_ADDR
// break ;
32630: GO 32634
// end ;
32632: GO 32605
32634: POP
32635: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32636: LD_VAR 0 1
32640: PPUSH
32641: LD_VAR 0 2
32645: PPUSH
32646: LD_VAR 0 3
32650: PPUSH
32651: LD_VAR 0 4
32655: PPUSH
32656: LD_VAR 0 5
32660: PPUSH
32661: CALL_OW 448
32665: IFFALSE 32700
// begin result := [ chassis , engine , control , weapon ] ;
32667: LD_ADDR_VAR 0 6
32671: PUSH
32672: LD_VAR 0 2
32676: PUSH
32677: LD_VAR 0 3
32681: PUSH
32682: LD_VAR 0 4
32686: PUSH
32687: LD_VAR 0 5
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: ST_TO_ADDR
// exit ;
32698: GO 33112
// end ; _chassis := AvailableChassisList ( factory ) ;
32700: LD_ADDR_VAR 0 9
32704: PUSH
32705: LD_VAR 0 1
32709: PPUSH
32710: CALL_OW 475
32714: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32715: LD_ADDR_VAR 0 11
32719: PUSH
32720: LD_VAR 0 1
32724: PPUSH
32725: CALL_OW 476
32729: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32730: LD_ADDR_VAR 0 12
32734: PUSH
32735: LD_VAR 0 1
32739: PPUSH
32740: CALL_OW 477
32744: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32745: LD_ADDR_VAR 0 10
32749: PUSH
32750: LD_VAR 0 1
32754: PPUSH
32755: CALL_OW 478
32759: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32760: LD_VAR 0 9
32764: NOT
32765: PUSH
32766: LD_VAR 0 11
32770: NOT
32771: OR
32772: PUSH
32773: LD_VAR 0 12
32777: NOT
32778: OR
32779: PUSH
32780: LD_VAR 0 10
32784: NOT
32785: OR
32786: IFFALSE 32821
// begin result := [ chassis , engine , control , weapon ] ;
32788: LD_ADDR_VAR 0 6
32792: PUSH
32793: LD_VAR 0 2
32797: PUSH
32798: LD_VAR 0 3
32802: PUSH
32803: LD_VAR 0 4
32807: PUSH
32808: LD_VAR 0 5
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: ST_TO_ADDR
// exit ;
32819: GO 33112
// end ; if not chassis in _chassis then
32821: LD_VAR 0 2
32825: PUSH
32826: LD_VAR 0 9
32830: IN
32831: NOT
32832: IFFALSE 32858
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32834: LD_ADDR_VAR 0 2
32838: PUSH
32839: LD_VAR 0 9
32843: PUSH
32844: LD_INT 1
32846: PPUSH
32847: LD_VAR 0 9
32851: PPUSH
32852: CALL_OW 12
32856: ARRAY
32857: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32858: LD_VAR 0 2
32862: PPUSH
32863: LD_VAR 0 3
32867: PPUSH
32868: CALL 33117 0 2
32872: NOT
32873: IFFALSE 32932
// repeat engine := _engine [ 1 ] ;
32875: LD_ADDR_VAR 0 3
32879: PUSH
32880: LD_VAR 0 11
32884: PUSH
32885: LD_INT 1
32887: ARRAY
32888: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32889: LD_ADDR_VAR 0 11
32893: PUSH
32894: LD_VAR 0 11
32898: PPUSH
32899: LD_INT 1
32901: PPUSH
32902: CALL_OW 3
32906: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32907: LD_VAR 0 2
32911: PPUSH
32912: LD_VAR 0 3
32916: PPUSH
32917: CALL 33117 0 2
32921: PUSH
32922: LD_VAR 0 11
32926: PUSH
32927: EMPTY
32928: EQUAL
32929: OR
32930: IFFALSE 32875
// if not control in _control then
32932: LD_VAR 0 4
32936: PUSH
32937: LD_VAR 0 12
32941: IN
32942: NOT
32943: IFFALSE 32969
// control := _control [ rand ( 1 , _control ) ] ;
32945: LD_ADDR_VAR 0 4
32949: PUSH
32950: LD_VAR 0 12
32954: PUSH
32955: LD_INT 1
32957: PPUSH
32958: LD_VAR 0 12
32962: PPUSH
32963: CALL_OW 12
32967: ARRAY
32968: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32969: LD_VAR 0 2
32973: PPUSH
32974: LD_VAR 0 5
32978: PPUSH
32979: CALL 33337 0 2
32983: NOT
32984: IFFALSE 33043
// repeat weapon := _weapon [ 1 ] ;
32986: LD_ADDR_VAR 0 5
32990: PUSH
32991: LD_VAR 0 10
32995: PUSH
32996: LD_INT 1
32998: ARRAY
32999: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33000: LD_ADDR_VAR 0 10
33004: PUSH
33005: LD_VAR 0 10
33009: PPUSH
33010: LD_INT 1
33012: PPUSH
33013: CALL_OW 3
33017: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33018: LD_VAR 0 2
33022: PPUSH
33023: LD_VAR 0 5
33027: PPUSH
33028: CALL 33337 0 2
33032: PUSH
33033: LD_VAR 0 10
33037: PUSH
33038: EMPTY
33039: EQUAL
33040: OR
33041: IFFALSE 32986
// result := [ ] ;
33043: LD_ADDR_VAR 0 6
33047: PUSH
33048: EMPTY
33049: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33050: LD_VAR 0 1
33054: PPUSH
33055: LD_VAR 0 2
33059: PPUSH
33060: LD_VAR 0 3
33064: PPUSH
33065: LD_VAR 0 4
33069: PPUSH
33070: LD_VAR 0 5
33074: PPUSH
33075: CALL_OW 448
33079: IFFALSE 33112
// result := [ chassis , engine , control , weapon ] ;
33081: LD_ADDR_VAR 0 6
33085: PUSH
33086: LD_VAR 0 2
33090: PUSH
33091: LD_VAR 0 3
33095: PUSH
33096: LD_VAR 0 4
33100: PUSH
33101: LD_VAR 0 5
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: ST_TO_ADDR
// end ;
33112: LD_VAR 0 6
33116: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33117: LD_INT 0
33119: PPUSH
// if not chassis or not engine then
33120: LD_VAR 0 1
33124: NOT
33125: PUSH
33126: LD_VAR 0 2
33130: NOT
33131: OR
33132: IFFALSE 33136
// exit ;
33134: GO 33332
// case engine of engine_solar :
33136: LD_VAR 0 2
33140: PUSH
33141: LD_INT 2
33143: DOUBLE
33144: EQUAL
33145: IFTRUE 33149
33147: GO 33187
33149: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33150: LD_ADDR_VAR 0 3
33154: PUSH
33155: LD_INT 11
33157: PUSH
33158: LD_INT 12
33160: PUSH
33161: LD_INT 13
33163: PUSH
33164: LD_INT 14
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: LD_INT 3
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: ST_TO_ADDR
33185: GO 33316
33187: LD_INT 1
33189: DOUBLE
33190: EQUAL
33191: IFTRUE 33195
33193: GO 33257
33195: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33196: LD_ADDR_VAR 0 3
33200: PUSH
33201: LD_INT 11
33203: PUSH
33204: LD_INT 12
33206: PUSH
33207: LD_INT 13
33209: PUSH
33210: LD_INT 14
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: LD_INT 2
33218: PUSH
33219: LD_INT 3
33221: PUSH
33222: LD_INT 4
33224: PUSH
33225: LD_INT 5
33227: PUSH
33228: LD_INT 21
33230: PUSH
33231: LD_INT 23
33233: PUSH
33234: LD_INT 22
33236: PUSH
33237: LD_INT 24
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: ST_TO_ADDR
33255: GO 33316
33257: LD_INT 3
33259: DOUBLE
33260: EQUAL
33261: IFTRUE 33265
33263: GO 33315
33265: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33266: LD_ADDR_VAR 0 3
33270: PUSH
33271: LD_INT 13
33273: PUSH
33274: LD_INT 14
33276: PUSH
33277: LD_INT 2
33279: PUSH
33280: LD_INT 3
33282: PUSH
33283: LD_INT 4
33285: PUSH
33286: LD_INT 5
33288: PUSH
33289: LD_INT 21
33291: PUSH
33292: LD_INT 22
33294: PUSH
33295: LD_INT 23
33297: PUSH
33298: LD_INT 24
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: ST_TO_ADDR
33313: GO 33316
33315: POP
// result := ( chassis in result ) ;
33316: LD_ADDR_VAR 0 3
33320: PUSH
33321: LD_VAR 0 1
33325: PUSH
33326: LD_VAR 0 3
33330: IN
33331: ST_TO_ADDR
// end ;
33332: LD_VAR 0 3
33336: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33337: LD_INT 0
33339: PPUSH
// if not chassis or not weapon then
33340: LD_VAR 0 1
33344: NOT
33345: PUSH
33346: LD_VAR 0 2
33350: NOT
33351: OR
33352: IFFALSE 33356
// exit ;
33354: GO 34382
// case weapon of us_machine_gun :
33356: LD_VAR 0 2
33360: PUSH
33361: LD_INT 2
33363: DOUBLE
33364: EQUAL
33365: IFTRUE 33369
33367: GO 33399
33369: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33370: LD_ADDR_VAR 0 3
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: LD_INT 2
33380: PUSH
33381: LD_INT 3
33383: PUSH
33384: LD_INT 4
33386: PUSH
33387: LD_INT 5
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: ST_TO_ADDR
33397: GO 34366
33399: LD_INT 3
33401: DOUBLE
33402: EQUAL
33403: IFTRUE 33407
33405: GO 33437
33407: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33408: LD_ADDR_VAR 0 3
33412: PUSH
33413: LD_INT 1
33415: PUSH
33416: LD_INT 2
33418: PUSH
33419: LD_INT 3
33421: PUSH
33422: LD_INT 4
33424: PUSH
33425: LD_INT 5
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: ST_TO_ADDR
33435: GO 34366
33437: LD_INT 11
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33445
33443: GO 33475
33445: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33446: LD_ADDR_VAR 0 3
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: LD_INT 2
33456: PUSH
33457: LD_INT 3
33459: PUSH
33460: LD_INT 4
33462: PUSH
33463: LD_INT 5
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: ST_TO_ADDR
33473: GO 34366
33475: LD_INT 4
33477: DOUBLE
33478: EQUAL
33479: IFTRUE 33483
33481: GO 33509
33483: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33484: LD_ADDR_VAR 0 3
33488: PUSH
33489: LD_INT 2
33491: PUSH
33492: LD_INT 3
33494: PUSH
33495: LD_INT 4
33497: PUSH
33498: LD_INT 5
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: ST_TO_ADDR
33507: GO 34366
33509: LD_INT 5
33511: DOUBLE
33512: EQUAL
33513: IFTRUE 33517
33515: GO 33543
33517: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33518: LD_ADDR_VAR 0 3
33522: PUSH
33523: LD_INT 2
33525: PUSH
33526: LD_INT 3
33528: PUSH
33529: LD_INT 4
33531: PUSH
33532: LD_INT 5
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: ST_TO_ADDR
33541: GO 34366
33543: LD_INT 9
33545: DOUBLE
33546: EQUAL
33547: IFTRUE 33551
33549: GO 33577
33551: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33552: LD_ADDR_VAR 0 3
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: LD_INT 3
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: LD_INT 5
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: ST_TO_ADDR
33575: GO 34366
33577: LD_INT 7
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33585
33583: GO 33611
33585: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33586: LD_ADDR_VAR 0 3
33590: PUSH
33591: LD_INT 2
33593: PUSH
33594: LD_INT 3
33596: PUSH
33597: LD_INT 4
33599: PUSH
33600: LD_INT 5
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: ST_TO_ADDR
33609: GO 34366
33611: LD_INT 12
33613: DOUBLE
33614: EQUAL
33615: IFTRUE 33619
33617: GO 33645
33619: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33620: LD_ADDR_VAR 0 3
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: LD_INT 3
33630: PUSH
33631: LD_INT 4
33633: PUSH
33634: LD_INT 5
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: ST_TO_ADDR
33643: GO 34366
33645: LD_INT 13
33647: DOUBLE
33648: EQUAL
33649: IFTRUE 33653
33651: GO 33679
33653: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33654: LD_ADDR_VAR 0 3
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: LD_INT 3
33664: PUSH
33665: LD_INT 4
33667: PUSH
33668: LD_INT 5
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: ST_TO_ADDR
33677: GO 34366
33679: LD_INT 14
33681: DOUBLE
33682: EQUAL
33683: IFTRUE 33687
33685: GO 33705
33687: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33688: LD_ADDR_VAR 0 3
33692: PUSH
33693: LD_INT 4
33695: PUSH
33696: LD_INT 5
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: ST_TO_ADDR
33703: GO 34366
33705: LD_INT 6
33707: DOUBLE
33708: EQUAL
33709: IFTRUE 33713
33711: GO 33731
33713: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33714: LD_ADDR_VAR 0 3
33718: PUSH
33719: LD_INT 4
33721: PUSH
33722: LD_INT 5
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: ST_TO_ADDR
33729: GO 34366
33731: LD_INT 10
33733: DOUBLE
33734: EQUAL
33735: IFTRUE 33739
33737: GO 33757
33739: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33740: LD_ADDR_VAR 0 3
33744: PUSH
33745: LD_INT 4
33747: PUSH
33748: LD_INT 5
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: ST_TO_ADDR
33755: GO 34366
33757: LD_INT 22
33759: DOUBLE
33760: EQUAL
33761: IFTRUE 33765
33763: GO 33791
33765: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33766: LD_ADDR_VAR 0 3
33770: PUSH
33771: LD_INT 11
33773: PUSH
33774: LD_INT 12
33776: PUSH
33777: LD_INT 13
33779: PUSH
33780: LD_INT 14
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: ST_TO_ADDR
33789: GO 34366
33791: LD_INT 23
33793: DOUBLE
33794: EQUAL
33795: IFTRUE 33799
33797: GO 33825
33799: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33800: LD_ADDR_VAR 0 3
33804: PUSH
33805: LD_INT 11
33807: PUSH
33808: LD_INT 12
33810: PUSH
33811: LD_INT 13
33813: PUSH
33814: LD_INT 14
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: ST_TO_ADDR
33823: GO 34366
33825: LD_INT 24
33827: DOUBLE
33828: EQUAL
33829: IFTRUE 33833
33831: GO 33859
33833: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33834: LD_ADDR_VAR 0 3
33838: PUSH
33839: LD_INT 11
33841: PUSH
33842: LD_INT 12
33844: PUSH
33845: LD_INT 13
33847: PUSH
33848: LD_INT 14
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: ST_TO_ADDR
33857: GO 34366
33859: LD_INT 30
33861: DOUBLE
33862: EQUAL
33863: IFTRUE 33867
33865: GO 33893
33867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33868: LD_ADDR_VAR 0 3
33872: PUSH
33873: LD_INT 11
33875: PUSH
33876: LD_INT 12
33878: PUSH
33879: LD_INT 13
33881: PUSH
33882: LD_INT 14
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: ST_TO_ADDR
33891: GO 34366
33893: LD_INT 25
33895: DOUBLE
33896: EQUAL
33897: IFTRUE 33901
33899: GO 33919
33901: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33902: LD_ADDR_VAR 0 3
33906: PUSH
33907: LD_INT 13
33909: PUSH
33910: LD_INT 14
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: ST_TO_ADDR
33917: GO 34366
33919: LD_INT 27
33921: DOUBLE
33922: EQUAL
33923: IFTRUE 33927
33925: GO 33945
33927: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33928: LD_ADDR_VAR 0 3
33932: PUSH
33933: LD_INT 13
33935: PUSH
33936: LD_INT 14
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: ST_TO_ADDR
33943: GO 34366
33945: LD_INT 28
33947: DOUBLE
33948: EQUAL
33949: IFTRUE 33953
33951: GO 33971
33953: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33954: LD_ADDR_VAR 0 3
33958: PUSH
33959: LD_INT 13
33961: PUSH
33962: LD_INT 14
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: ST_TO_ADDR
33969: GO 34366
33971: LD_INT 29
33973: DOUBLE
33974: EQUAL
33975: IFTRUE 33979
33977: GO 33997
33979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33980: LD_ADDR_VAR 0 3
33984: PUSH
33985: LD_INT 13
33987: PUSH
33988: LD_INT 14
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: ST_TO_ADDR
33995: GO 34366
33997: LD_INT 31
33999: DOUBLE
34000: EQUAL
34001: IFTRUE 34005
34003: GO 34023
34005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34006: LD_ADDR_VAR 0 3
34010: PUSH
34011: LD_INT 13
34013: PUSH
34014: LD_INT 14
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: ST_TO_ADDR
34021: GO 34366
34023: LD_INT 26
34025: DOUBLE
34026: EQUAL
34027: IFTRUE 34031
34029: GO 34049
34031: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34032: LD_ADDR_VAR 0 3
34036: PUSH
34037: LD_INT 13
34039: PUSH
34040: LD_INT 14
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: ST_TO_ADDR
34047: GO 34366
34049: LD_INT 42
34051: DOUBLE
34052: EQUAL
34053: IFTRUE 34057
34055: GO 34083
34057: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34058: LD_ADDR_VAR 0 3
34062: PUSH
34063: LD_INT 21
34065: PUSH
34066: LD_INT 22
34068: PUSH
34069: LD_INT 23
34071: PUSH
34072: LD_INT 24
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: ST_TO_ADDR
34081: GO 34366
34083: LD_INT 43
34085: DOUBLE
34086: EQUAL
34087: IFTRUE 34091
34089: GO 34117
34091: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34092: LD_ADDR_VAR 0 3
34096: PUSH
34097: LD_INT 21
34099: PUSH
34100: LD_INT 22
34102: PUSH
34103: LD_INT 23
34105: PUSH
34106: LD_INT 24
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: ST_TO_ADDR
34115: GO 34366
34117: LD_INT 44
34119: DOUBLE
34120: EQUAL
34121: IFTRUE 34125
34123: GO 34151
34125: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: LD_INT 21
34133: PUSH
34134: LD_INT 22
34136: PUSH
34137: LD_INT 23
34139: PUSH
34140: LD_INT 24
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: ST_TO_ADDR
34149: GO 34366
34151: LD_INT 45
34153: DOUBLE
34154: EQUAL
34155: IFTRUE 34159
34157: GO 34185
34159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34160: LD_ADDR_VAR 0 3
34164: PUSH
34165: LD_INT 21
34167: PUSH
34168: LD_INT 22
34170: PUSH
34171: LD_INT 23
34173: PUSH
34174: LD_INT 24
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: ST_TO_ADDR
34183: GO 34366
34185: LD_INT 49
34187: DOUBLE
34188: EQUAL
34189: IFTRUE 34193
34191: GO 34219
34193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34194: LD_ADDR_VAR 0 3
34198: PUSH
34199: LD_INT 21
34201: PUSH
34202: LD_INT 22
34204: PUSH
34205: LD_INT 23
34207: PUSH
34208: LD_INT 24
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: ST_TO_ADDR
34217: GO 34366
34219: LD_INT 51
34221: DOUBLE
34222: EQUAL
34223: IFTRUE 34227
34225: GO 34253
34227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34228: LD_ADDR_VAR 0 3
34232: PUSH
34233: LD_INT 21
34235: PUSH
34236: LD_INT 22
34238: PUSH
34239: LD_INT 23
34241: PUSH
34242: LD_INT 24
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: ST_TO_ADDR
34251: GO 34366
34253: LD_INT 52
34255: DOUBLE
34256: EQUAL
34257: IFTRUE 34261
34259: GO 34287
34261: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34262: LD_ADDR_VAR 0 3
34266: PUSH
34267: LD_INT 21
34269: PUSH
34270: LD_INT 22
34272: PUSH
34273: LD_INT 23
34275: PUSH
34276: LD_INT 24
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: ST_TO_ADDR
34285: GO 34366
34287: LD_INT 53
34289: DOUBLE
34290: EQUAL
34291: IFTRUE 34295
34293: GO 34313
34295: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34296: LD_ADDR_VAR 0 3
34300: PUSH
34301: LD_INT 23
34303: PUSH
34304: LD_INT 24
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: ST_TO_ADDR
34311: GO 34366
34313: LD_INT 46
34315: DOUBLE
34316: EQUAL
34317: IFTRUE 34321
34319: GO 34339
34321: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34322: LD_ADDR_VAR 0 3
34326: PUSH
34327: LD_INT 23
34329: PUSH
34330: LD_INT 24
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: ST_TO_ADDR
34337: GO 34366
34339: LD_INT 47
34341: DOUBLE
34342: EQUAL
34343: IFTRUE 34347
34345: GO 34365
34347: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34348: LD_ADDR_VAR 0 3
34352: PUSH
34353: LD_INT 23
34355: PUSH
34356: LD_INT 24
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: ST_TO_ADDR
34363: GO 34366
34365: POP
// result := ( chassis in result ) ;
34366: LD_ADDR_VAR 0 3
34370: PUSH
34371: LD_VAR 0 1
34375: PUSH
34376: LD_VAR 0 3
34380: IN
34381: ST_TO_ADDR
// end ;
34382: LD_VAR 0 3
34386: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34387: LD_INT 0
34389: PPUSH
34390: PPUSH
34391: PPUSH
34392: PPUSH
34393: PPUSH
34394: PPUSH
34395: PPUSH
// result := array ;
34396: LD_ADDR_VAR 0 5
34400: PUSH
34401: LD_VAR 0 1
34405: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34406: LD_VAR 0 1
34410: NOT
34411: PUSH
34412: LD_VAR 0 2
34416: NOT
34417: OR
34418: PUSH
34419: LD_VAR 0 3
34423: NOT
34424: OR
34425: PUSH
34426: LD_VAR 0 2
34430: PUSH
34431: LD_VAR 0 1
34435: GREATER
34436: OR
34437: PUSH
34438: LD_VAR 0 3
34442: PUSH
34443: LD_VAR 0 1
34447: GREATER
34448: OR
34449: IFFALSE 34453
// exit ;
34451: GO 34749
// if direction then
34453: LD_VAR 0 4
34457: IFFALSE 34521
// begin d := 1 ;
34459: LD_ADDR_VAR 0 9
34463: PUSH
34464: LD_INT 1
34466: ST_TO_ADDR
// if i_from > i_to then
34467: LD_VAR 0 2
34471: PUSH
34472: LD_VAR 0 3
34476: GREATER
34477: IFFALSE 34503
// length := ( array - i_from ) + i_to else
34479: LD_ADDR_VAR 0 11
34483: PUSH
34484: LD_VAR 0 1
34488: PUSH
34489: LD_VAR 0 2
34493: MINUS
34494: PUSH
34495: LD_VAR 0 3
34499: PLUS
34500: ST_TO_ADDR
34501: GO 34519
// length := i_to - i_from ;
34503: LD_ADDR_VAR 0 11
34507: PUSH
34508: LD_VAR 0 3
34512: PUSH
34513: LD_VAR 0 2
34517: MINUS
34518: ST_TO_ADDR
// end else
34519: GO 34582
// begin d := - 1 ;
34521: LD_ADDR_VAR 0 9
34525: PUSH
34526: LD_INT 1
34528: NEG
34529: ST_TO_ADDR
// if i_from > i_to then
34530: LD_VAR 0 2
34534: PUSH
34535: LD_VAR 0 3
34539: GREATER
34540: IFFALSE 34560
// length := i_from - i_to else
34542: LD_ADDR_VAR 0 11
34546: PUSH
34547: LD_VAR 0 2
34551: PUSH
34552: LD_VAR 0 3
34556: MINUS
34557: ST_TO_ADDR
34558: GO 34582
// length := ( array - i_to ) + i_from ;
34560: LD_ADDR_VAR 0 11
34564: PUSH
34565: LD_VAR 0 1
34569: PUSH
34570: LD_VAR 0 3
34574: MINUS
34575: PUSH
34576: LD_VAR 0 2
34580: PLUS
34581: ST_TO_ADDR
// end ; if not length then
34582: LD_VAR 0 11
34586: NOT
34587: IFFALSE 34591
// exit ;
34589: GO 34749
// tmp := array ;
34591: LD_ADDR_VAR 0 10
34595: PUSH
34596: LD_VAR 0 1
34600: ST_TO_ADDR
// for i = 1 to length do
34601: LD_ADDR_VAR 0 6
34605: PUSH
34606: DOUBLE
34607: LD_INT 1
34609: DEC
34610: ST_TO_ADDR
34611: LD_VAR 0 11
34615: PUSH
34616: FOR_TO
34617: IFFALSE 34737
// begin for j = 1 to array do
34619: LD_ADDR_VAR 0 7
34623: PUSH
34624: DOUBLE
34625: LD_INT 1
34627: DEC
34628: ST_TO_ADDR
34629: LD_VAR 0 1
34633: PUSH
34634: FOR_TO
34635: IFFALSE 34723
// begin k := j + d ;
34637: LD_ADDR_VAR 0 8
34641: PUSH
34642: LD_VAR 0 7
34646: PUSH
34647: LD_VAR 0 9
34651: PLUS
34652: ST_TO_ADDR
// if k > array then
34653: LD_VAR 0 8
34657: PUSH
34658: LD_VAR 0 1
34662: GREATER
34663: IFFALSE 34673
// k := 1 ;
34665: LD_ADDR_VAR 0 8
34669: PUSH
34670: LD_INT 1
34672: ST_TO_ADDR
// if not k then
34673: LD_VAR 0 8
34677: NOT
34678: IFFALSE 34690
// k := array ;
34680: LD_ADDR_VAR 0 8
34684: PUSH
34685: LD_VAR 0 1
34689: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34690: LD_ADDR_VAR 0 10
34694: PUSH
34695: LD_VAR 0 10
34699: PPUSH
34700: LD_VAR 0 8
34704: PPUSH
34705: LD_VAR 0 1
34709: PUSH
34710: LD_VAR 0 7
34714: ARRAY
34715: PPUSH
34716: CALL_OW 1
34720: ST_TO_ADDR
// end ;
34721: GO 34634
34723: POP
34724: POP
// array := tmp ;
34725: LD_ADDR_VAR 0 1
34729: PUSH
34730: LD_VAR 0 10
34734: ST_TO_ADDR
// end ;
34735: GO 34616
34737: POP
34738: POP
// result := array ;
34739: LD_ADDR_VAR 0 5
34743: PUSH
34744: LD_VAR 0 1
34748: ST_TO_ADDR
// end ;
34749: LD_VAR 0 5
34753: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34754: LD_INT 0
34756: PPUSH
34757: PPUSH
// result := 0 ;
34758: LD_ADDR_VAR 0 3
34762: PUSH
34763: LD_INT 0
34765: ST_TO_ADDR
// if not array or not value in array then
34766: LD_VAR 0 1
34770: NOT
34771: PUSH
34772: LD_VAR 0 2
34776: PUSH
34777: LD_VAR 0 1
34781: IN
34782: NOT
34783: OR
34784: IFFALSE 34788
// exit ;
34786: GO 34842
// for i = 1 to array do
34788: LD_ADDR_VAR 0 4
34792: PUSH
34793: DOUBLE
34794: LD_INT 1
34796: DEC
34797: ST_TO_ADDR
34798: LD_VAR 0 1
34802: PUSH
34803: FOR_TO
34804: IFFALSE 34840
// if value = array [ i ] then
34806: LD_VAR 0 2
34810: PUSH
34811: LD_VAR 0 1
34815: PUSH
34816: LD_VAR 0 4
34820: ARRAY
34821: EQUAL
34822: IFFALSE 34838
// begin result := i ;
34824: LD_ADDR_VAR 0 3
34828: PUSH
34829: LD_VAR 0 4
34833: ST_TO_ADDR
// exit ;
34834: POP
34835: POP
34836: GO 34842
// end ;
34838: GO 34803
34840: POP
34841: POP
// end ;
34842: LD_VAR 0 3
34846: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34847: LD_INT 0
34849: PPUSH
// vc_chassis := chassis ;
34850: LD_ADDR_OWVAR 37
34854: PUSH
34855: LD_VAR 0 1
34859: ST_TO_ADDR
// vc_engine := engine ;
34860: LD_ADDR_OWVAR 39
34864: PUSH
34865: LD_VAR 0 2
34869: ST_TO_ADDR
// vc_control := control ;
34870: LD_ADDR_OWVAR 38
34874: PUSH
34875: LD_VAR 0 3
34879: ST_TO_ADDR
// vc_weapon := weapon ;
34880: LD_ADDR_OWVAR 40
34884: PUSH
34885: LD_VAR 0 4
34889: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34890: LD_ADDR_OWVAR 41
34894: PUSH
34895: LD_VAR 0 5
34899: ST_TO_ADDR
// end ;
34900: LD_VAR 0 6
34904: RET
// export function WantPlant ( unit ) ; var task ; begin
34905: LD_INT 0
34907: PPUSH
34908: PPUSH
// result := false ;
34909: LD_ADDR_VAR 0 2
34913: PUSH
34914: LD_INT 0
34916: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34917: LD_ADDR_VAR 0 3
34921: PUSH
34922: LD_VAR 0 1
34926: PPUSH
34927: CALL_OW 437
34931: ST_TO_ADDR
// if task then
34932: LD_VAR 0 3
34936: IFFALSE 34964
// if task [ 1 ] [ 1 ] = p then
34938: LD_VAR 0 3
34942: PUSH
34943: LD_INT 1
34945: ARRAY
34946: PUSH
34947: LD_INT 1
34949: ARRAY
34950: PUSH
34951: LD_STRING p
34953: EQUAL
34954: IFFALSE 34964
// result := true ;
34956: LD_ADDR_VAR 0 2
34960: PUSH
34961: LD_INT 1
34963: ST_TO_ADDR
// end ;
34964: LD_VAR 0 2
34968: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34969: LD_INT 0
34971: PPUSH
34972: PPUSH
34973: PPUSH
34974: PPUSH
// if pos < 1 then
34975: LD_VAR 0 2
34979: PUSH
34980: LD_INT 1
34982: LESS
34983: IFFALSE 34987
// exit ;
34985: GO 35290
// if pos = 1 then
34987: LD_VAR 0 2
34991: PUSH
34992: LD_INT 1
34994: EQUAL
34995: IFFALSE 35028
// result := Replace ( arr , pos [ 1 ] , value ) else
34997: LD_ADDR_VAR 0 4
35001: PUSH
35002: LD_VAR 0 1
35006: PPUSH
35007: LD_VAR 0 2
35011: PUSH
35012: LD_INT 1
35014: ARRAY
35015: PPUSH
35016: LD_VAR 0 3
35020: PPUSH
35021: CALL_OW 1
35025: ST_TO_ADDR
35026: GO 35290
// begin tmp := arr ;
35028: LD_ADDR_VAR 0 6
35032: PUSH
35033: LD_VAR 0 1
35037: ST_TO_ADDR
// s_arr := [ tmp ] ;
35038: LD_ADDR_VAR 0 7
35042: PUSH
35043: LD_VAR 0 6
35047: PUSH
35048: EMPTY
35049: LIST
35050: ST_TO_ADDR
// for i = 1 to pos - 1 do
35051: LD_ADDR_VAR 0 5
35055: PUSH
35056: DOUBLE
35057: LD_INT 1
35059: DEC
35060: ST_TO_ADDR
35061: LD_VAR 0 2
35065: PUSH
35066: LD_INT 1
35068: MINUS
35069: PUSH
35070: FOR_TO
35071: IFFALSE 35116
// begin tmp := tmp [ pos [ i ] ] ;
35073: LD_ADDR_VAR 0 6
35077: PUSH
35078: LD_VAR 0 6
35082: PUSH
35083: LD_VAR 0 2
35087: PUSH
35088: LD_VAR 0 5
35092: ARRAY
35093: ARRAY
35094: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35095: LD_ADDR_VAR 0 7
35099: PUSH
35100: LD_VAR 0 7
35104: PUSH
35105: LD_VAR 0 6
35109: PUSH
35110: EMPTY
35111: LIST
35112: ADD
35113: ST_TO_ADDR
// end ;
35114: GO 35070
35116: POP
35117: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35118: LD_ADDR_VAR 0 6
35122: PUSH
35123: LD_VAR 0 6
35127: PPUSH
35128: LD_VAR 0 2
35132: PUSH
35133: LD_VAR 0 2
35137: ARRAY
35138: PPUSH
35139: LD_VAR 0 3
35143: PPUSH
35144: CALL_OW 1
35148: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35149: LD_ADDR_VAR 0 7
35153: PUSH
35154: LD_VAR 0 7
35158: PPUSH
35159: LD_VAR 0 7
35163: PPUSH
35164: LD_VAR 0 6
35168: PPUSH
35169: CALL_OW 1
35173: ST_TO_ADDR
// for i = s_arr downto 2 do
35174: LD_ADDR_VAR 0 5
35178: PUSH
35179: DOUBLE
35180: LD_VAR 0 7
35184: INC
35185: ST_TO_ADDR
35186: LD_INT 2
35188: PUSH
35189: FOR_DOWNTO
35190: IFFALSE 35274
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35192: LD_ADDR_VAR 0 6
35196: PUSH
35197: LD_VAR 0 7
35201: PUSH
35202: LD_VAR 0 5
35206: PUSH
35207: LD_INT 1
35209: MINUS
35210: ARRAY
35211: PPUSH
35212: LD_VAR 0 2
35216: PUSH
35217: LD_VAR 0 5
35221: PUSH
35222: LD_INT 1
35224: MINUS
35225: ARRAY
35226: PPUSH
35227: LD_VAR 0 7
35231: PUSH
35232: LD_VAR 0 5
35236: ARRAY
35237: PPUSH
35238: CALL_OW 1
35242: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35243: LD_ADDR_VAR 0 7
35247: PUSH
35248: LD_VAR 0 7
35252: PPUSH
35253: LD_VAR 0 5
35257: PUSH
35258: LD_INT 1
35260: MINUS
35261: PPUSH
35262: LD_VAR 0 6
35266: PPUSH
35267: CALL_OW 1
35271: ST_TO_ADDR
// end ;
35272: GO 35189
35274: POP
35275: POP
// result := s_arr [ 1 ] ;
35276: LD_ADDR_VAR 0 4
35280: PUSH
35281: LD_VAR 0 7
35285: PUSH
35286: LD_INT 1
35288: ARRAY
35289: ST_TO_ADDR
// end ; end ;
35290: LD_VAR 0 4
35294: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35295: LD_INT 0
35297: PPUSH
35298: PPUSH
// if not list then
35299: LD_VAR 0 1
35303: NOT
35304: IFFALSE 35308
// exit ;
35306: GO 35399
// i := list [ pos1 ] ;
35308: LD_ADDR_VAR 0 5
35312: PUSH
35313: LD_VAR 0 1
35317: PUSH
35318: LD_VAR 0 2
35322: ARRAY
35323: ST_TO_ADDR
// if not i then
35324: LD_VAR 0 5
35328: NOT
35329: IFFALSE 35333
// exit ;
35331: GO 35399
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35333: LD_ADDR_VAR 0 1
35337: PUSH
35338: LD_VAR 0 1
35342: PPUSH
35343: LD_VAR 0 2
35347: PPUSH
35348: LD_VAR 0 1
35352: PUSH
35353: LD_VAR 0 3
35357: ARRAY
35358: PPUSH
35359: CALL_OW 1
35363: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35364: LD_ADDR_VAR 0 1
35368: PUSH
35369: LD_VAR 0 1
35373: PPUSH
35374: LD_VAR 0 3
35378: PPUSH
35379: LD_VAR 0 5
35383: PPUSH
35384: CALL_OW 1
35388: ST_TO_ADDR
// result := list ;
35389: LD_ADDR_VAR 0 4
35393: PUSH
35394: LD_VAR 0 1
35398: ST_TO_ADDR
// end ;
35399: LD_VAR 0 4
35403: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35404: LD_INT 0
35406: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35407: LD_ADDR_VAR 0 5
35411: PUSH
35412: LD_VAR 0 1
35416: PPUSH
35417: CALL_OW 250
35421: PPUSH
35422: LD_VAR 0 1
35426: PPUSH
35427: CALL_OW 251
35431: PPUSH
35432: LD_VAR 0 2
35436: PPUSH
35437: LD_VAR 0 3
35441: PPUSH
35442: LD_VAR 0 4
35446: PPUSH
35447: CALL 35457 0 5
35451: ST_TO_ADDR
// end ;
35452: LD_VAR 0 5
35456: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35457: LD_INT 0
35459: PPUSH
35460: PPUSH
35461: PPUSH
35462: PPUSH
// if not list then
35463: LD_VAR 0 3
35467: NOT
35468: IFFALSE 35472
// exit ;
35470: GO 35860
// result := [ ] ;
35472: LD_ADDR_VAR 0 6
35476: PUSH
35477: EMPTY
35478: ST_TO_ADDR
// for i in list do
35479: LD_ADDR_VAR 0 7
35483: PUSH
35484: LD_VAR 0 3
35488: PUSH
35489: FOR_IN
35490: IFFALSE 35692
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35492: LD_ADDR_VAR 0 9
35496: PUSH
35497: LD_VAR 0 7
35501: PPUSH
35502: LD_VAR 0 1
35506: PPUSH
35507: LD_VAR 0 2
35511: PPUSH
35512: CALL_OW 297
35516: ST_TO_ADDR
// if not result then
35517: LD_VAR 0 6
35521: NOT
35522: IFFALSE 35548
// result := [ [ i , tmp ] ] else
35524: LD_ADDR_VAR 0 6
35528: PUSH
35529: LD_VAR 0 7
35533: PUSH
35534: LD_VAR 0 9
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: EMPTY
35544: LIST
35545: ST_TO_ADDR
35546: GO 35690
// begin if result [ result ] [ 2 ] < tmp then
35548: LD_VAR 0 6
35552: PUSH
35553: LD_VAR 0 6
35557: ARRAY
35558: PUSH
35559: LD_INT 2
35561: ARRAY
35562: PUSH
35563: LD_VAR 0 9
35567: LESS
35568: IFFALSE 35610
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35570: LD_ADDR_VAR 0 6
35574: PUSH
35575: LD_VAR 0 6
35579: PPUSH
35580: LD_VAR 0 6
35584: PUSH
35585: LD_INT 1
35587: PLUS
35588: PPUSH
35589: LD_VAR 0 7
35593: PUSH
35594: LD_VAR 0 9
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PPUSH
35603: CALL_OW 2
35607: ST_TO_ADDR
35608: GO 35690
// for j = 1 to result do
35610: LD_ADDR_VAR 0 8
35614: PUSH
35615: DOUBLE
35616: LD_INT 1
35618: DEC
35619: ST_TO_ADDR
35620: LD_VAR 0 6
35624: PUSH
35625: FOR_TO
35626: IFFALSE 35688
// begin if tmp < result [ j ] [ 2 ] then
35628: LD_VAR 0 9
35632: PUSH
35633: LD_VAR 0 6
35637: PUSH
35638: LD_VAR 0 8
35642: ARRAY
35643: PUSH
35644: LD_INT 2
35646: ARRAY
35647: LESS
35648: IFFALSE 35686
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35650: LD_ADDR_VAR 0 6
35654: PUSH
35655: LD_VAR 0 6
35659: PPUSH
35660: LD_VAR 0 8
35664: PPUSH
35665: LD_VAR 0 7
35669: PUSH
35670: LD_VAR 0 9
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PPUSH
35679: CALL_OW 2
35683: ST_TO_ADDR
// break ;
35684: GO 35688
// end ; end ;
35686: GO 35625
35688: POP
35689: POP
// end ; end ;
35690: GO 35489
35692: POP
35693: POP
// if result and not asc then
35694: LD_VAR 0 6
35698: PUSH
35699: LD_VAR 0 4
35703: NOT
35704: AND
35705: IFFALSE 35780
// begin tmp := result ;
35707: LD_ADDR_VAR 0 9
35711: PUSH
35712: LD_VAR 0 6
35716: ST_TO_ADDR
// for i = tmp downto 1 do
35717: LD_ADDR_VAR 0 7
35721: PUSH
35722: DOUBLE
35723: LD_VAR 0 9
35727: INC
35728: ST_TO_ADDR
35729: LD_INT 1
35731: PUSH
35732: FOR_DOWNTO
35733: IFFALSE 35778
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35735: LD_ADDR_VAR 0 6
35739: PUSH
35740: LD_VAR 0 6
35744: PPUSH
35745: LD_VAR 0 9
35749: PUSH
35750: LD_VAR 0 7
35754: MINUS
35755: PUSH
35756: LD_INT 1
35758: PLUS
35759: PPUSH
35760: LD_VAR 0 9
35764: PUSH
35765: LD_VAR 0 7
35769: ARRAY
35770: PPUSH
35771: CALL_OW 1
35775: ST_TO_ADDR
35776: GO 35732
35778: POP
35779: POP
// end ; tmp := [ ] ;
35780: LD_ADDR_VAR 0 9
35784: PUSH
35785: EMPTY
35786: ST_TO_ADDR
// if mode then
35787: LD_VAR 0 5
35791: IFFALSE 35860
// begin for i = 1 to result do
35793: LD_ADDR_VAR 0 7
35797: PUSH
35798: DOUBLE
35799: LD_INT 1
35801: DEC
35802: ST_TO_ADDR
35803: LD_VAR 0 6
35807: PUSH
35808: FOR_TO
35809: IFFALSE 35848
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35811: LD_ADDR_VAR 0 9
35815: PUSH
35816: LD_VAR 0 9
35820: PPUSH
35821: LD_VAR 0 7
35825: PPUSH
35826: LD_VAR 0 6
35830: PUSH
35831: LD_VAR 0 7
35835: ARRAY
35836: PUSH
35837: LD_INT 1
35839: ARRAY
35840: PPUSH
35841: CALL_OW 1
35845: ST_TO_ADDR
35846: GO 35808
35848: POP
35849: POP
// result := tmp ;
35850: LD_ADDR_VAR 0 6
35854: PUSH
35855: LD_VAR 0 9
35859: ST_TO_ADDR
// end ; end ;
35860: LD_VAR 0 6
35864: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35865: LD_INT 0
35867: PPUSH
35868: PPUSH
35869: PPUSH
35870: PPUSH
35871: PPUSH
35872: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35873: LD_ADDR_VAR 0 5
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: EMPTY
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: ST_TO_ADDR
// if not x or not y then
35895: LD_VAR 0 2
35899: NOT
35900: PUSH
35901: LD_VAR 0 3
35905: NOT
35906: OR
35907: IFFALSE 35911
// exit ;
35909: GO 37557
// if not range then
35911: LD_VAR 0 4
35915: NOT
35916: IFFALSE 35926
// range := 10 ;
35918: LD_ADDR_VAR 0 4
35922: PUSH
35923: LD_INT 10
35925: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35926: LD_ADDR_VAR 0 8
35930: PUSH
35931: LD_INT 81
35933: PUSH
35934: LD_VAR 0 1
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 92
35945: PUSH
35946: LD_VAR 0 2
35950: PUSH
35951: LD_VAR 0 3
35955: PUSH
35956: LD_VAR 0 4
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 3
35969: PUSH
35970: LD_INT 21
35972: PUSH
35973: LD_INT 3
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: PPUSH
35989: CALL_OW 69
35993: ST_TO_ADDR
// if not tmp then
35994: LD_VAR 0 8
35998: NOT
35999: IFFALSE 36003
// exit ;
36001: GO 37557
// for i in tmp do
36003: LD_ADDR_VAR 0 6
36007: PUSH
36008: LD_VAR 0 8
36012: PUSH
36013: FOR_IN
36014: IFFALSE 37532
// begin points := [ 0 , 0 , 0 ] ;
36016: LD_ADDR_VAR 0 9
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: LIST
36034: ST_TO_ADDR
// bpoints := 1 ;
36035: LD_ADDR_VAR 0 10
36039: PUSH
36040: LD_INT 1
36042: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36043: LD_VAR 0 6
36047: PPUSH
36048: CALL_OW 247
36052: PUSH
36053: LD_INT 1
36055: DOUBLE
36056: EQUAL
36057: IFTRUE 36061
36059: GO 36639
36061: POP
// begin if GetClass ( i ) = 1 then
36062: LD_VAR 0 6
36066: PPUSH
36067: CALL_OW 257
36071: PUSH
36072: LD_INT 1
36074: EQUAL
36075: IFFALSE 36096
// points := [ 10 , 5 , 3 ] ;
36077: LD_ADDR_VAR 0 9
36081: PUSH
36082: LD_INT 10
36084: PUSH
36085: LD_INT 5
36087: PUSH
36088: LD_INT 3
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: LIST
36095: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36096: LD_VAR 0 6
36100: PPUSH
36101: CALL_OW 257
36105: PUSH
36106: LD_INT 2
36108: PUSH
36109: LD_INT 3
36111: PUSH
36112: LD_INT 4
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: LIST
36119: IN
36120: IFFALSE 36141
// points := [ 3 , 2 , 1 ] ;
36122: LD_ADDR_VAR 0 9
36126: PUSH
36127: LD_INT 3
36129: PUSH
36130: LD_INT 2
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: LIST
36140: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36141: LD_VAR 0 6
36145: PPUSH
36146: CALL_OW 257
36150: PUSH
36151: LD_INT 5
36153: EQUAL
36154: IFFALSE 36175
// points := [ 130 , 5 , 2 ] ;
36156: LD_ADDR_VAR 0 9
36160: PUSH
36161: LD_INT 130
36163: PUSH
36164: LD_INT 5
36166: PUSH
36167: LD_INT 2
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36175: LD_VAR 0 6
36179: PPUSH
36180: CALL_OW 257
36184: PUSH
36185: LD_INT 8
36187: EQUAL
36188: IFFALSE 36209
// points := [ 35 , 35 , 30 ] ;
36190: LD_ADDR_VAR 0 9
36194: PUSH
36195: LD_INT 35
36197: PUSH
36198: LD_INT 35
36200: PUSH
36201: LD_INT 30
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: LIST
36208: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36209: LD_VAR 0 6
36213: PPUSH
36214: CALL_OW 257
36218: PUSH
36219: LD_INT 9
36221: EQUAL
36222: IFFALSE 36243
// points := [ 20 , 55 , 40 ] ;
36224: LD_ADDR_VAR 0 9
36228: PUSH
36229: LD_INT 20
36231: PUSH
36232: LD_INT 55
36234: PUSH
36235: LD_INT 40
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: LIST
36242: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36243: LD_VAR 0 6
36247: PPUSH
36248: CALL_OW 257
36252: PUSH
36253: LD_INT 12
36255: PUSH
36256: LD_INT 16
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: IN
36263: IFFALSE 36284
// points := [ 5 , 3 , 2 ] ;
36265: LD_ADDR_VAR 0 9
36269: PUSH
36270: LD_INT 5
36272: PUSH
36273: LD_INT 3
36275: PUSH
36276: LD_INT 2
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: LIST
36283: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36284: LD_VAR 0 6
36288: PPUSH
36289: CALL_OW 257
36293: PUSH
36294: LD_INT 17
36296: EQUAL
36297: IFFALSE 36318
// points := [ 100 , 50 , 75 ] ;
36299: LD_ADDR_VAR 0 9
36303: PUSH
36304: LD_INT 100
36306: PUSH
36307: LD_INT 50
36309: PUSH
36310: LD_INT 75
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: LIST
36317: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36318: LD_VAR 0 6
36322: PPUSH
36323: CALL_OW 257
36327: PUSH
36328: LD_INT 15
36330: EQUAL
36331: IFFALSE 36352
// points := [ 10 , 5 , 3 ] ;
36333: LD_ADDR_VAR 0 9
36337: PUSH
36338: LD_INT 10
36340: PUSH
36341: LD_INT 5
36343: PUSH
36344: LD_INT 3
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: LIST
36351: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36352: LD_VAR 0 6
36356: PPUSH
36357: CALL_OW 257
36361: PUSH
36362: LD_INT 14
36364: EQUAL
36365: IFFALSE 36386
// points := [ 10 , 0 , 0 ] ;
36367: LD_ADDR_VAR 0 9
36371: PUSH
36372: LD_INT 10
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: LIST
36385: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36386: LD_VAR 0 6
36390: PPUSH
36391: CALL_OW 257
36395: PUSH
36396: LD_INT 11
36398: EQUAL
36399: IFFALSE 36420
// points := [ 30 , 10 , 5 ] ;
36401: LD_ADDR_VAR 0 9
36405: PUSH
36406: LD_INT 30
36408: PUSH
36409: LD_INT 10
36411: PUSH
36412: LD_INT 5
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: LIST
36419: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36420: LD_VAR 0 1
36424: PPUSH
36425: LD_INT 5
36427: PPUSH
36428: CALL_OW 321
36432: PUSH
36433: LD_INT 2
36435: EQUAL
36436: IFFALSE 36453
// bpoints := bpoints * 1.8 ;
36438: LD_ADDR_VAR 0 10
36442: PUSH
36443: LD_VAR 0 10
36447: PUSH
36448: LD_REAL  1.80000000000000E+0000
36451: MUL
36452: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36453: LD_VAR 0 6
36457: PPUSH
36458: CALL_OW 257
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: LD_INT 2
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: LD_INT 4
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: IN
36481: PUSH
36482: LD_VAR 0 1
36486: PPUSH
36487: LD_INT 51
36489: PPUSH
36490: CALL_OW 321
36494: PUSH
36495: LD_INT 2
36497: EQUAL
36498: AND
36499: IFFALSE 36516
// bpoints := bpoints * 1.2 ;
36501: LD_ADDR_VAR 0 10
36505: PUSH
36506: LD_VAR 0 10
36510: PUSH
36511: LD_REAL  1.20000000000000E+0000
36514: MUL
36515: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36516: LD_VAR 0 6
36520: PPUSH
36521: CALL_OW 257
36525: PUSH
36526: LD_INT 5
36528: PUSH
36529: LD_INT 7
36531: PUSH
36532: LD_INT 9
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: LIST
36539: IN
36540: PUSH
36541: LD_VAR 0 1
36545: PPUSH
36546: LD_INT 52
36548: PPUSH
36549: CALL_OW 321
36553: PUSH
36554: LD_INT 2
36556: EQUAL
36557: AND
36558: IFFALSE 36575
// bpoints := bpoints * 1.5 ;
36560: LD_ADDR_VAR 0 10
36564: PUSH
36565: LD_VAR 0 10
36569: PUSH
36570: LD_REAL  1.50000000000000E+0000
36573: MUL
36574: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36575: LD_VAR 0 1
36579: PPUSH
36580: LD_INT 66
36582: PPUSH
36583: CALL_OW 321
36587: PUSH
36588: LD_INT 2
36590: EQUAL
36591: IFFALSE 36608
// bpoints := bpoints * 1.1 ;
36593: LD_ADDR_VAR 0 10
36597: PUSH
36598: LD_VAR 0 10
36602: PUSH
36603: LD_REAL  1.10000000000000E+0000
36606: MUL
36607: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36608: LD_ADDR_VAR 0 10
36612: PUSH
36613: LD_VAR 0 10
36617: PUSH
36618: LD_VAR 0 6
36622: PPUSH
36623: LD_INT 1
36625: PPUSH
36626: CALL_OW 259
36630: PUSH
36631: LD_REAL  1.15000000000000E+0000
36634: MUL
36635: MUL
36636: ST_TO_ADDR
// end ; unit_vehicle :
36637: GO 37461
36639: LD_INT 2
36641: DOUBLE
36642: EQUAL
36643: IFTRUE 36647
36645: GO 37449
36647: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36648: LD_VAR 0 6
36652: PPUSH
36653: CALL_OW 264
36657: PUSH
36658: LD_INT 2
36660: PUSH
36661: LD_INT 42
36663: PUSH
36664: LD_INT 24
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: LIST
36671: IN
36672: IFFALSE 36693
// points := [ 25 , 5 , 3 ] ;
36674: LD_ADDR_VAR 0 9
36678: PUSH
36679: LD_INT 25
36681: PUSH
36682: LD_INT 5
36684: PUSH
36685: LD_INT 3
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: LIST
36692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36693: LD_VAR 0 6
36697: PPUSH
36698: CALL_OW 264
36702: PUSH
36703: LD_INT 4
36705: PUSH
36706: LD_INT 43
36708: PUSH
36709: LD_INT 25
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: IN
36717: IFFALSE 36738
// points := [ 40 , 15 , 5 ] ;
36719: LD_ADDR_VAR 0 9
36723: PUSH
36724: LD_INT 40
36726: PUSH
36727: LD_INT 15
36729: PUSH
36730: LD_INT 5
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: LIST
36737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36738: LD_VAR 0 6
36742: PPUSH
36743: CALL_OW 264
36747: PUSH
36748: LD_INT 3
36750: PUSH
36751: LD_INT 23
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: IN
36758: IFFALSE 36779
// points := [ 7 , 25 , 8 ] ;
36760: LD_ADDR_VAR 0 9
36764: PUSH
36765: LD_INT 7
36767: PUSH
36768: LD_INT 25
36770: PUSH
36771: LD_INT 8
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: LIST
36778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36779: LD_VAR 0 6
36783: PPUSH
36784: CALL_OW 264
36788: PUSH
36789: LD_INT 5
36791: PUSH
36792: LD_INT 27
36794: PUSH
36795: LD_INT 44
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: LIST
36802: IN
36803: IFFALSE 36824
// points := [ 14 , 50 , 16 ] ;
36805: LD_ADDR_VAR 0 9
36809: PUSH
36810: LD_INT 14
36812: PUSH
36813: LD_INT 50
36815: PUSH
36816: LD_INT 16
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: LIST
36823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36824: LD_VAR 0 6
36828: PPUSH
36829: CALL_OW 264
36833: PUSH
36834: LD_INT 6
36836: PUSH
36837: LD_INT 46
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: IN
36844: IFFALSE 36865
// points := [ 32 , 120 , 70 ] ;
36846: LD_ADDR_VAR 0 9
36850: PUSH
36851: LD_INT 32
36853: PUSH
36854: LD_INT 120
36856: PUSH
36857: LD_INT 70
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: LIST
36864: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
36865: LD_VAR 0 6
36869: PPUSH
36870: CALL_OW 264
36874: PUSH
36875: LD_INT 7
36877: PUSH
36878: LD_INT 28
36880: PUSH
36881: LD_INT 45
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: LIST
36888: IN
36889: IFFALSE 36910
// points := [ 35 , 20 , 45 ] ;
36891: LD_ADDR_VAR 0 9
36895: PUSH
36896: LD_INT 35
36898: PUSH
36899: LD_INT 20
36901: PUSH
36902: LD_INT 45
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: LIST
36909: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36910: LD_VAR 0 6
36914: PPUSH
36915: CALL_OW 264
36919: PUSH
36920: LD_INT 47
36922: PUSH
36923: EMPTY
36924: LIST
36925: IN
36926: IFFALSE 36947
// points := [ 67 , 45 , 75 ] ;
36928: LD_ADDR_VAR 0 9
36932: PUSH
36933: LD_INT 67
36935: PUSH
36936: LD_INT 45
36938: PUSH
36939: LD_INT 75
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: LIST
36946: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36947: LD_VAR 0 6
36951: PPUSH
36952: CALL_OW 264
36956: PUSH
36957: LD_INT 26
36959: PUSH
36960: EMPTY
36961: LIST
36962: IN
36963: IFFALSE 36984
// points := [ 120 , 30 , 80 ] ;
36965: LD_ADDR_VAR 0 9
36969: PUSH
36970: LD_INT 120
36972: PUSH
36973: LD_INT 30
36975: PUSH
36976: LD_INT 80
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36984: LD_VAR 0 6
36988: PPUSH
36989: CALL_OW 264
36993: PUSH
36994: LD_INT 22
36996: PUSH
36997: EMPTY
36998: LIST
36999: IN
37000: IFFALSE 37021
// points := [ 40 , 1 , 1 ] ;
37002: LD_ADDR_VAR 0 9
37006: PUSH
37007: LD_INT 40
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: LIST
37020: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37021: LD_VAR 0 6
37025: PPUSH
37026: CALL_OW 264
37030: PUSH
37031: LD_INT 29
37033: PUSH
37034: EMPTY
37035: LIST
37036: IN
37037: IFFALSE 37058
// points := [ 70 , 200 , 400 ] ;
37039: LD_ADDR_VAR 0 9
37043: PUSH
37044: LD_INT 70
37046: PUSH
37047: LD_INT 200
37049: PUSH
37050: LD_INT 400
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37058: LD_VAR 0 6
37062: PPUSH
37063: CALL_OW 264
37067: PUSH
37068: LD_INT 14
37070: PUSH
37071: LD_INT 53
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: IN
37078: IFFALSE 37099
// points := [ 40 , 10 , 20 ] ;
37080: LD_ADDR_VAR 0 9
37084: PUSH
37085: LD_INT 40
37087: PUSH
37088: LD_INT 10
37090: PUSH
37091: LD_INT 20
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: LIST
37098: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37099: LD_VAR 0 6
37103: PPUSH
37104: CALL_OW 264
37108: PUSH
37109: LD_INT 9
37111: PUSH
37112: EMPTY
37113: LIST
37114: IN
37115: IFFALSE 37136
// points := [ 5 , 70 , 20 ] ;
37117: LD_ADDR_VAR 0 9
37121: PUSH
37122: LD_INT 5
37124: PUSH
37125: LD_INT 70
37127: PUSH
37128: LD_INT 20
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37136: LD_VAR 0 6
37140: PPUSH
37141: CALL_OW 264
37145: PUSH
37146: LD_INT 10
37148: PUSH
37149: EMPTY
37150: LIST
37151: IN
37152: IFFALSE 37173
// points := [ 35 , 110 , 70 ] ;
37154: LD_ADDR_VAR 0 9
37158: PUSH
37159: LD_INT 35
37161: PUSH
37162: LD_INT 110
37164: PUSH
37165: LD_INT 70
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: LIST
37172: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37173: LD_VAR 0 6
37177: PPUSH
37178: CALL_OW 265
37182: PUSH
37183: LD_INT 25
37185: EQUAL
37186: IFFALSE 37207
// points := [ 80 , 65 , 100 ] ;
37188: LD_ADDR_VAR 0 9
37192: PUSH
37193: LD_INT 80
37195: PUSH
37196: LD_INT 65
37198: PUSH
37199: LD_INT 100
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: LIST
37206: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37207: LD_VAR 0 6
37211: PPUSH
37212: CALL_OW 263
37216: PUSH
37217: LD_INT 1
37219: EQUAL
37220: IFFALSE 37255
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37222: LD_ADDR_VAR 0 10
37226: PUSH
37227: LD_VAR 0 10
37231: PUSH
37232: LD_VAR 0 6
37236: PPUSH
37237: CALL_OW 311
37241: PPUSH
37242: LD_INT 3
37244: PPUSH
37245: CALL_OW 259
37249: PUSH
37250: LD_INT 4
37252: MUL
37253: MUL
37254: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37255: LD_VAR 0 6
37259: PPUSH
37260: CALL_OW 263
37264: PUSH
37265: LD_INT 2
37267: EQUAL
37268: IFFALSE 37319
// begin j := IsControledBy ( i ) ;
37270: LD_ADDR_VAR 0 7
37274: PUSH
37275: LD_VAR 0 6
37279: PPUSH
37280: CALL_OW 312
37284: ST_TO_ADDR
// if j then
37285: LD_VAR 0 7
37289: IFFALSE 37319
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37291: LD_ADDR_VAR 0 10
37295: PUSH
37296: LD_VAR 0 10
37300: PUSH
37301: LD_VAR 0 7
37305: PPUSH
37306: LD_INT 3
37308: PPUSH
37309: CALL_OW 259
37313: PUSH
37314: LD_INT 3
37316: MUL
37317: MUL
37318: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37319: LD_VAR 0 6
37323: PPUSH
37324: CALL_OW 264
37328: PUSH
37329: LD_INT 5
37331: PUSH
37332: LD_INT 6
37334: PUSH
37335: LD_INT 46
37337: PUSH
37338: LD_INT 44
37340: PUSH
37341: LD_INT 47
37343: PUSH
37344: LD_INT 45
37346: PUSH
37347: LD_INT 28
37349: PUSH
37350: LD_INT 7
37352: PUSH
37353: LD_INT 27
37355: PUSH
37356: LD_INT 29
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: IN
37371: PUSH
37372: LD_VAR 0 1
37376: PPUSH
37377: LD_INT 52
37379: PPUSH
37380: CALL_OW 321
37384: PUSH
37385: LD_INT 2
37387: EQUAL
37388: AND
37389: IFFALSE 37406
// bpoints := bpoints * 1.2 ;
37391: LD_ADDR_VAR 0 10
37395: PUSH
37396: LD_VAR 0 10
37400: PUSH
37401: LD_REAL  1.20000000000000E+0000
37404: MUL
37405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37406: LD_VAR 0 6
37410: PPUSH
37411: CALL_OW 264
37415: PUSH
37416: LD_INT 6
37418: PUSH
37419: LD_INT 46
37421: PUSH
37422: LD_INT 47
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: LIST
37429: IN
37430: IFFALSE 37447
// bpoints := bpoints * 1.2 ;
37432: LD_ADDR_VAR 0 10
37436: PUSH
37437: LD_VAR 0 10
37441: PUSH
37442: LD_REAL  1.20000000000000E+0000
37445: MUL
37446: ST_TO_ADDR
// end ; unit_building :
37447: GO 37461
37449: LD_INT 3
37451: DOUBLE
37452: EQUAL
37453: IFTRUE 37457
37455: GO 37460
37457: POP
// ; end ;
37458: GO 37461
37460: POP
// for j = 1 to 3 do
37461: LD_ADDR_VAR 0 7
37465: PUSH
37466: DOUBLE
37467: LD_INT 1
37469: DEC
37470: ST_TO_ADDR
37471: LD_INT 3
37473: PUSH
37474: FOR_TO
37475: IFFALSE 37528
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37477: LD_ADDR_VAR 0 5
37481: PUSH
37482: LD_VAR 0 5
37486: PPUSH
37487: LD_VAR 0 7
37491: PPUSH
37492: LD_VAR 0 5
37496: PUSH
37497: LD_VAR 0 7
37501: ARRAY
37502: PUSH
37503: LD_VAR 0 9
37507: PUSH
37508: LD_VAR 0 7
37512: ARRAY
37513: PUSH
37514: LD_VAR 0 10
37518: MUL
37519: PLUS
37520: PPUSH
37521: CALL_OW 1
37525: ST_TO_ADDR
37526: GO 37474
37528: POP
37529: POP
// end ;
37530: GO 36013
37532: POP
37533: POP
// result := Replace ( result , 4 , tmp ) ;
37534: LD_ADDR_VAR 0 5
37538: PUSH
37539: LD_VAR 0 5
37543: PPUSH
37544: LD_INT 4
37546: PPUSH
37547: LD_VAR 0 8
37551: PPUSH
37552: CALL_OW 1
37556: ST_TO_ADDR
// end ;
37557: LD_VAR 0 5
37561: RET
// export function DangerAtRange ( unit , range ) ; begin
37562: LD_INT 0
37564: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37565: LD_ADDR_VAR 0 3
37569: PUSH
37570: LD_VAR 0 1
37574: PPUSH
37575: CALL_OW 255
37579: PPUSH
37580: LD_VAR 0 1
37584: PPUSH
37585: CALL_OW 250
37589: PPUSH
37590: LD_VAR 0 1
37594: PPUSH
37595: CALL_OW 251
37599: PPUSH
37600: LD_VAR 0 2
37604: PPUSH
37605: CALL 35865 0 4
37609: ST_TO_ADDR
// end ;
37610: LD_VAR 0 3
37614: RET
// export function DangerInArea ( side , area ) ; begin
37615: LD_INT 0
37617: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37618: LD_ADDR_VAR 0 3
37622: PUSH
37623: LD_VAR 0 2
37627: PPUSH
37628: LD_INT 81
37630: PUSH
37631: LD_VAR 0 1
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PPUSH
37640: CALL_OW 70
37644: ST_TO_ADDR
// end ;
37645: LD_VAR 0 3
37649: RET
// export function IsExtension ( b ) ; begin
37650: LD_INT 0
37652: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37653: LD_ADDR_VAR 0 2
37657: PUSH
37658: LD_VAR 0 1
37662: PUSH
37663: LD_INT 23
37665: PUSH
37666: LD_INT 20
37668: PUSH
37669: LD_INT 22
37671: PUSH
37672: LD_INT 17
37674: PUSH
37675: LD_INT 24
37677: PUSH
37678: LD_INT 21
37680: PUSH
37681: LD_INT 19
37683: PUSH
37684: LD_INT 16
37686: PUSH
37687: LD_INT 25
37689: PUSH
37690: LD_INT 18
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: IN
37705: ST_TO_ADDR
// end ;
37706: LD_VAR 0 2
37710: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37711: LD_INT 0
37713: PPUSH
37714: PPUSH
37715: PPUSH
// result := [ ] ;
37716: LD_ADDR_VAR 0 4
37720: PUSH
37721: EMPTY
37722: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37723: LD_ADDR_VAR 0 5
37727: PUSH
37728: LD_VAR 0 2
37732: PPUSH
37733: LD_INT 21
37735: PUSH
37736: LD_INT 3
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PPUSH
37743: CALL_OW 70
37747: ST_TO_ADDR
// if not tmp then
37748: LD_VAR 0 5
37752: NOT
37753: IFFALSE 37757
// exit ;
37755: GO 37821
// if checkLink then
37757: LD_VAR 0 3
37761: IFFALSE 37811
// begin for i in tmp do
37763: LD_ADDR_VAR 0 6
37767: PUSH
37768: LD_VAR 0 5
37772: PUSH
37773: FOR_IN
37774: IFFALSE 37809
// if GetBase ( i ) <> base then
37776: LD_VAR 0 6
37780: PPUSH
37781: CALL_OW 274
37785: PUSH
37786: LD_VAR 0 1
37790: NONEQUAL
37791: IFFALSE 37807
// ComLinkToBase ( base , i ) ;
37793: LD_VAR 0 1
37797: PPUSH
37798: LD_VAR 0 6
37802: PPUSH
37803: CALL_OW 169
37807: GO 37773
37809: POP
37810: POP
// end ; result := tmp ;
37811: LD_ADDR_VAR 0 4
37815: PUSH
37816: LD_VAR 0 5
37820: ST_TO_ADDR
// end ;
37821: LD_VAR 0 4
37825: RET
// export function ComComplete ( units , b ) ; var i ; begin
37826: LD_INT 0
37828: PPUSH
37829: PPUSH
// if not units then
37830: LD_VAR 0 1
37834: NOT
37835: IFFALSE 37839
// exit ;
37837: GO 37929
// for i in units do
37839: LD_ADDR_VAR 0 4
37843: PUSH
37844: LD_VAR 0 1
37848: PUSH
37849: FOR_IN
37850: IFFALSE 37927
// if BuildingStatus ( b ) = bs_build then
37852: LD_VAR 0 2
37856: PPUSH
37857: CALL_OW 461
37861: PUSH
37862: LD_INT 1
37864: EQUAL
37865: IFFALSE 37925
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37867: LD_VAR 0 4
37871: PPUSH
37872: LD_STRING h
37874: PUSH
37875: LD_VAR 0 2
37879: PPUSH
37880: CALL_OW 250
37884: PUSH
37885: LD_VAR 0 2
37889: PPUSH
37890: CALL_OW 251
37894: PUSH
37895: LD_VAR 0 2
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: PUSH
37918: EMPTY
37919: LIST
37920: PPUSH
37921: CALL_OW 446
37925: GO 37849
37927: POP
37928: POP
// end ;
37929: LD_VAR 0 3
37933: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37934: LD_INT 0
37936: PPUSH
37937: PPUSH
37938: PPUSH
37939: PPUSH
37940: PPUSH
37941: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37942: LD_VAR 0 1
37946: NOT
37947: PUSH
37948: LD_VAR 0 1
37952: PPUSH
37953: CALL_OW 263
37957: PUSH
37958: LD_INT 2
37960: EQUAL
37961: NOT
37962: OR
37963: IFFALSE 37967
// exit ;
37965: GO 38283
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37967: LD_ADDR_VAR 0 6
37971: PUSH
37972: LD_INT 22
37974: PUSH
37975: LD_VAR 0 1
37979: PPUSH
37980: CALL_OW 255
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 2
37991: PUSH
37992: LD_INT 30
37994: PUSH
37995: LD_INT 36
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 34
38004: PUSH
38005: LD_INT 31
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: LIST
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PPUSH
38021: CALL_OW 69
38025: ST_TO_ADDR
// if not tmp then
38026: LD_VAR 0 6
38030: NOT
38031: IFFALSE 38035
// exit ;
38033: GO 38283
// result := [ ] ;
38035: LD_ADDR_VAR 0 2
38039: PUSH
38040: EMPTY
38041: ST_TO_ADDR
// for i in tmp do
38042: LD_ADDR_VAR 0 3
38046: PUSH
38047: LD_VAR 0 6
38051: PUSH
38052: FOR_IN
38053: IFFALSE 38124
// begin t := UnitsInside ( i ) ;
38055: LD_ADDR_VAR 0 4
38059: PUSH
38060: LD_VAR 0 3
38064: PPUSH
38065: CALL_OW 313
38069: ST_TO_ADDR
// if t then
38070: LD_VAR 0 4
38074: IFFALSE 38122
// for j in t do
38076: LD_ADDR_VAR 0 7
38080: PUSH
38081: LD_VAR 0 4
38085: PUSH
38086: FOR_IN
38087: IFFALSE 38120
// result := Insert ( result , result + 1 , j ) ;
38089: LD_ADDR_VAR 0 2
38093: PUSH
38094: LD_VAR 0 2
38098: PPUSH
38099: LD_VAR 0 2
38103: PUSH
38104: LD_INT 1
38106: PLUS
38107: PPUSH
38108: LD_VAR 0 7
38112: PPUSH
38113: CALL_OW 2
38117: ST_TO_ADDR
38118: GO 38086
38120: POP
38121: POP
// end ;
38122: GO 38052
38124: POP
38125: POP
// if not result then
38126: LD_VAR 0 2
38130: NOT
38131: IFFALSE 38135
// exit ;
38133: GO 38283
// mech := result [ 1 ] ;
38135: LD_ADDR_VAR 0 5
38139: PUSH
38140: LD_VAR 0 2
38144: PUSH
38145: LD_INT 1
38147: ARRAY
38148: ST_TO_ADDR
// if result > 1 then
38149: LD_VAR 0 2
38153: PUSH
38154: LD_INT 1
38156: GREATER
38157: IFFALSE 38269
// for i = 2 to result do
38159: LD_ADDR_VAR 0 3
38163: PUSH
38164: DOUBLE
38165: LD_INT 2
38167: DEC
38168: ST_TO_ADDR
38169: LD_VAR 0 2
38173: PUSH
38174: FOR_TO
38175: IFFALSE 38267
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38177: LD_ADDR_VAR 0 4
38181: PUSH
38182: LD_VAR 0 2
38186: PUSH
38187: LD_VAR 0 3
38191: ARRAY
38192: PPUSH
38193: LD_INT 3
38195: PPUSH
38196: CALL_OW 259
38200: PUSH
38201: LD_VAR 0 2
38205: PUSH
38206: LD_VAR 0 3
38210: ARRAY
38211: PPUSH
38212: CALL_OW 432
38216: MINUS
38217: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38218: LD_VAR 0 4
38222: PUSH
38223: LD_VAR 0 5
38227: PPUSH
38228: LD_INT 3
38230: PPUSH
38231: CALL_OW 259
38235: PUSH
38236: LD_VAR 0 5
38240: PPUSH
38241: CALL_OW 432
38245: MINUS
38246: GREATEREQUAL
38247: IFFALSE 38265
// mech := result [ i ] ;
38249: LD_ADDR_VAR 0 5
38253: PUSH
38254: LD_VAR 0 2
38258: PUSH
38259: LD_VAR 0 3
38263: ARRAY
38264: ST_TO_ADDR
// end ;
38265: GO 38174
38267: POP
38268: POP
// ComLinkTo ( vehicle , mech ) ;
38269: LD_VAR 0 1
38273: PPUSH
38274: LD_VAR 0 5
38278: PPUSH
38279: CALL_OW 135
// end ;
38283: LD_VAR 0 2
38287: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38288: LD_INT 0
38290: PPUSH
38291: PPUSH
38292: PPUSH
38293: PPUSH
38294: PPUSH
38295: PPUSH
38296: PPUSH
38297: PPUSH
38298: PPUSH
38299: PPUSH
38300: PPUSH
38301: PPUSH
38302: PPUSH
// result := [ ] ;
38303: LD_ADDR_VAR 0 7
38307: PUSH
38308: EMPTY
38309: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38310: LD_VAR 0 1
38314: PPUSH
38315: CALL_OW 266
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: IN
38330: NOT
38331: IFFALSE 38335
// exit ;
38333: GO 39969
// if name then
38335: LD_VAR 0 3
38339: IFFALSE 38355
// SetBName ( base_dep , name ) ;
38341: LD_VAR 0 1
38345: PPUSH
38346: LD_VAR 0 3
38350: PPUSH
38351: CALL_OW 500
// base := GetBase ( base_dep ) ;
38355: LD_ADDR_VAR 0 15
38359: PUSH
38360: LD_VAR 0 1
38364: PPUSH
38365: CALL_OW 274
38369: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38370: LD_ADDR_VAR 0 16
38374: PUSH
38375: LD_VAR 0 1
38379: PPUSH
38380: CALL_OW 255
38384: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38385: LD_ADDR_VAR 0 17
38389: PUSH
38390: LD_VAR 0 1
38394: PPUSH
38395: CALL_OW 248
38399: ST_TO_ADDR
// if sources then
38400: LD_VAR 0 5
38404: IFFALSE 38451
// for i = 1 to 3 do
38406: LD_ADDR_VAR 0 8
38410: PUSH
38411: DOUBLE
38412: LD_INT 1
38414: DEC
38415: ST_TO_ADDR
38416: LD_INT 3
38418: PUSH
38419: FOR_TO
38420: IFFALSE 38449
// AddResourceType ( base , i , sources [ i ] ) ;
38422: LD_VAR 0 15
38426: PPUSH
38427: LD_VAR 0 8
38431: PPUSH
38432: LD_VAR 0 5
38436: PUSH
38437: LD_VAR 0 8
38441: ARRAY
38442: PPUSH
38443: CALL_OW 276
38447: GO 38419
38449: POP
38450: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38451: LD_ADDR_VAR 0 18
38455: PUSH
38456: LD_VAR 0 15
38460: PPUSH
38461: LD_VAR 0 2
38465: PPUSH
38466: LD_INT 1
38468: PPUSH
38469: CALL 37711 0 3
38473: ST_TO_ADDR
// InitHc ;
38474: CALL_OW 19
// InitUc ;
38478: CALL_OW 18
// uc_side := side ;
38482: LD_ADDR_OWVAR 20
38486: PUSH
38487: LD_VAR 0 16
38491: ST_TO_ADDR
// uc_nation := nation ;
38492: LD_ADDR_OWVAR 21
38496: PUSH
38497: LD_VAR 0 17
38501: ST_TO_ADDR
// if buildings then
38502: LD_VAR 0 18
38506: IFFALSE 39828
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38508: LD_ADDR_VAR 0 19
38512: PUSH
38513: LD_VAR 0 18
38517: PPUSH
38518: LD_INT 2
38520: PUSH
38521: LD_INT 30
38523: PUSH
38524: LD_INT 29
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 30
38533: PUSH
38534: LD_INT 30
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: LIST
38545: PPUSH
38546: CALL_OW 72
38550: ST_TO_ADDR
// if tmp then
38551: LD_VAR 0 19
38555: IFFALSE 38603
// for i in tmp do
38557: LD_ADDR_VAR 0 8
38561: PUSH
38562: LD_VAR 0 19
38566: PUSH
38567: FOR_IN
38568: IFFALSE 38601
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38570: LD_VAR 0 8
38574: PPUSH
38575: CALL_OW 250
38579: PPUSH
38580: LD_VAR 0 8
38584: PPUSH
38585: CALL_OW 251
38589: PPUSH
38590: LD_VAR 0 16
38594: PPUSH
38595: CALL_OW 441
38599: GO 38567
38601: POP
38602: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38603: LD_VAR 0 18
38607: PPUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 30
38613: PUSH
38614: LD_INT 32
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 30
38623: PUSH
38624: LD_INT 33
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: LIST
38635: PPUSH
38636: CALL_OW 72
38640: IFFALSE 38728
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38642: LD_ADDR_VAR 0 8
38646: PUSH
38647: LD_VAR 0 18
38651: PPUSH
38652: LD_INT 2
38654: PUSH
38655: LD_INT 30
38657: PUSH
38658: LD_INT 32
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 30
38667: PUSH
38668: LD_INT 33
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: LIST
38679: PPUSH
38680: CALL_OW 72
38684: PUSH
38685: FOR_IN
38686: IFFALSE 38726
// begin if not GetBWeapon ( i ) then
38688: LD_VAR 0 8
38692: PPUSH
38693: CALL_OW 269
38697: NOT
38698: IFFALSE 38724
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38700: LD_VAR 0 8
38704: PPUSH
38705: LD_VAR 0 8
38709: PPUSH
38710: LD_VAR 0 2
38714: PPUSH
38715: CALL 39974 0 2
38719: PPUSH
38720: CALL_OW 431
// end ;
38724: GO 38685
38726: POP
38727: POP
// end ; for i = 1 to personel do
38728: LD_ADDR_VAR 0 8
38732: PUSH
38733: DOUBLE
38734: LD_INT 1
38736: DEC
38737: ST_TO_ADDR
38738: LD_VAR 0 6
38742: PUSH
38743: FOR_TO
38744: IFFALSE 39808
// begin if i > 4 then
38746: LD_VAR 0 8
38750: PUSH
38751: LD_INT 4
38753: GREATER
38754: IFFALSE 38758
// break ;
38756: GO 39808
// case i of 1 :
38758: LD_VAR 0 8
38762: PUSH
38763: LD_INT 1
38765: DOUBLE
38766: EQUAL
38767: IFTRUE 38771
38769: GO 38851
38771: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38772: LD_ADDR_VAR 0 12
38776: PUSH
38777: LD_VAR 0 18
38781: PPUSH
38782: LD_INT 22
38784: PUSH
38785: LD_VAR 0 16
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 58
38796: PUSH
38797: EMPTY
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: PUSH
38803: LD_INT 30
38805: PUSH
38806: LD_INT 32
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 30
38815: PUSH
38816: LD_INT 4
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 30
38825: PUSH
38826: LD_INT 5
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: LIST
38843: PPUSH
38844: CALL_OW 72
38848: ST_TO_ADDR
38849: GO 39073
38851: LD_INT 2
38853: DOUBLE
38854: EQUAL
38855: IFTRUE 38859
38857: GO 38921
38859: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38860: LD_ADDR_VAR 0 12
38864: PUSH
38865: LD_VAR 0 18
38869: PPUSH
38870: LD_INT 22
38872: PUSH
38873: LD_VAR 0 16
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 2
38884: PUSH
38885: LD_INT 30
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 30
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: LIST
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PPUSH
38914: CALL_OW 72
38918: ST_TO_ADDR
38919: GO 39073
38921: LD_INT 3
38923: DOUBLE
38924: EQUAL
38925: IFTRUE 38929
38927: GO 38991
38929: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38930: LD_ADDR_VAR 0 12
38934: PUSH
38935: LD_VAR 0 18
38939: PPUSH
38940: LD_INT 22
38942: PUSH
38943: LD_VAR 0 16
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 2
38954: PUSH
38955: LD_INT 30
38957: PUSH
38958: LD_INT 2
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 30
38967: PUSH
38968: LD_INT 3
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: LIST
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PPUSH
38984: CALL_OW 72
38988: ST_TO_ADDR
38989: GO 39073
38991: LD_INT 4
38993: DOUBLE
38994: EQUAL
38995: IFTRUE 38999
38997: GO 39072
38999: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39000: LD_ADDR_VAR 0 12
39004: PUSH
39005: LD_VAR 0 18
39009: PPUSH
39010: LD_INT 22
39012: PUSH
39013: LD_VAR 0 16
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 2
39024: PUSH
39025: LD_INT 30
39027: PUSH
39028: LD_INT 6
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 30
39037: PUSH
39038: LD_INT 7
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 30
39047: PUSH
39048: LD_INT 8
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PPUSH
39065: CALL_OW 72
39069: ST_TO_ADDR
39070: GO 39073
39072: POP
// if i = 1 then
39073: LD_VAR 0 8
39077: PUSH
39078: LD_INT 1
39080: EQUAL
39081: IFFALSE 39192
// begin tmp := [ ] ;
39083: LD_ADDR_VAR 0 19
39087: PUSH
39088: EMPTY
39089: ST_TO_ADDR
// for j in f do
39090: LD_ADDR_VAR 0 9
39094: PUSH
39095: LD_VAR 0 12
39099: PUSH
39100: FOR_IN
39101: IFFALSE 39174
// if GetBType ( j ) = b_bunker then
39103: LD_VAR 0 9
39107: PPUSH
39108: CALL_OW 266
39112: PUSH
39113: LD_INT 32
39115: EQUAL
39116: IFFALSE 39143
// tmp := Insert ( tmp , 1 , j ) else
39118: LD_ADDR_VAR 0 19
39122: PUSH
39123: LD_VAR 0 19
39127: PPUSH
39128: LD_INT 1
39130: PPUSH
39131: LD_VAR 0 9
39135: PPUSH
39136: CALL_OW 2
39140: ST_TO_ADDR
39141: GO 39172
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39143: LD_ADDR_VAR 0 19
39147: PUSH
39148: LD_VAR 0 19
39152: PPUSH
39153: LD_VAR 0 19
39157: PUSH
39158: LD_INT 1
39160: PLUS
39161: PPUSH
39162: LD_VAR 0 9
39166: PPUSH
39167: CALL_OW 2
39171: ST_TO_ADDR
39172: GO 39100
39174: POP
39175: POP
// if tmp then
39176: LD_VAR 0 19
39180: IFFALSE 39192
// f := tmp ;
39182: LD_ADDR_VAR 0 12
39186: PUSH
39187: LD_VAR 0 19
39191: ST_TO_ADDR
// end ; x := personel [ i ] ;
39192: LD_ADDR_VAR 0 13
39196: PUSH
39197: LD_VAR 0 6
39201: PUSH
39202: LD_VAR 0 8
39206: ARRAY
39207: ST_TO_ADDR
// if x = - 1 then
39208: LD_VAR 0 13
39212: PUSH
39213: LD_INT 1
39215: NEG
39216: EQUAL
39217: IFFALSE 39426
// begin for j in f do
39219: LD_ADDR_VAR 0 9
39223: PUSH
39224: LD_VAR 0 12
39228: PUSH
39229: FOR_IN
39230: IFFALSE 39422
// repeat InitHc ;
39232: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39236: LD_VAR 0 9
39240: PPUSH
39241: CALL_OW 266
39245: PUSH
39246: LD_INT 5
39248: EQUAL
39249: IFFALSE 39319
// begin if UnitsInside ( j ) < 3 then
39251: LD_VAR 0 9
39255: PPUSH
39256: CALL_OW 313
39260: PUSH
39261: LD_INT 3
39263: LESS
39264: IFFALSE 39300
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39266: LD_INT 0
39268: PPUSH
39269: LD_INT 5
39271: PUSH
39272: LD_INT 8
39274: PUSH
39275: LD_INT 9
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: PUSH
39283: LD_VAR 0 17
39287: ARRAY
39288: PPUSH
39289: LD_VAR 0 4
39293: PPUSH
39294: CALL_OW 380
39298: GO 39317
// PrepareHuman ( false , i , skill ) ;
39300: LD_INT 0
39302: PPUSH
39303: LD_VAR 0 8
39307: PPUSH
39308: LD_VAR 0 4
39312: PPUSH
39313: CALL_OW 380
// end else
39317: GO 39336
// PrepareHuman ( false , i , skill ) ;
39319: LD_INT 0
39321: PPUSH
39322: LD_VAR 0 8
39326: PPUSH
39327: LD_VAR 0 4
39331: PPUSH
39332: CALL_OW 380
// un := CreateHuman ;
39336: LD_ADDR_VAR 0 14
39340: PUSH
39341: CALL_OW 44
39345: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39346: LD_ADDR_VAR 0 7
39350: PUSH
39351: LD_VAR 0 7
39355: PPUSH
39356: LD_INT 1
39358: PPUSH
39359: LD_VAR 0 14
39363: PPUSH
39364: CALL_OW 2
39368: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39369: LD_VAR 0 14
39373: PPUSH
39374: LD_VAR 0 9
39378: PPUSH
39379: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39383: LD_VAR 0 9
39387: PPUSH
39388: CALL_OW 313
39392: PUSH
39393: LD_INT 6
39395: EQUAL
39396: PUSH
39397: LD_VAR 0 9
39401: PPUSH
39402: CALL_OW 266
39406: PUSH
39407: LD_INT 32
39409: PUSH
39410: LD_INT 31
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: IN
39417: OR
39418: IFFALSE 39232
39420: GO 39229
39422: POP
39423: POP
// end else
39424: GO 39806
// for j = 1 to x do
39426: LD_ADDR_VAR 0 9
39430: PUSH
39431: DOUBLE
39432: LD_INT 1
39434: DEC
39435: ST_TO_ADDR
39436: LD_VAR 0 13
39440: PUSH
39441: FOR_TO
39442: IFFALSE 39804
// begin InitHc ;
39444: CALL_OW 19
// if not f then
39448: LD_VAR 0 12
39452: NOT
39453: IFFALSE 39542
// begin PrepareHuman ( false , i , skill ) ;
39455: LD_INT 0
39457: PPUSH
39458: LD_VAR 0 8
39462: PPUSH
39463: LD_VAR 0 4
39467: PPUSH
39468: CALL_OW 380
// un := CreateHuman ;
39472: LD_ADDR_VAR 0 14
39476: PUSH
39477: CALL_OW 44
39481: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39482: LD_ADDR_VAR 0 7
39486: PUSH
39487: LD_VAR 0 7
39491: PPUSH
39492: LD_INT 1
39494: PPUSH
39495: LD_VAR 0 14
39499: PPUSH
39500: CALL_OW 2
39504: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39505: LD_VAR 0 14
39509: PPUSH
39510: LD_VAR 0 1
39514: PPUSH
39515: CALL_OW 250
39519: PPUSH
39520: LD_VAR 0 1
39524: PPUSH
39525: CALL_OW 251
39529: PPUSH
39530: LD_INT 10
39532: PPUSH
39533: LD_INT 0
39535: PPUSH
39536: CALL_OW 50
// continue ;
39540: GO 39441
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39542: LD_VAR 0 12
39546: PUSH
39547: LD_INT 1
39549: ARRAY
39550: PPUSH
39551: CALL_OW 313
39555: PUSH
39556: LD_VAR 0 12
39560: PUSH
39561: LD_INT 1
39563: ARRAY
39564: PPUSH
39565: CALL_OW 266
39569: PUSH
39570: LD_INT 32
39572: PUSH
39573: LD_INT 31
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: IN
39580: AND
39581: PUSH
39582: LD_VAR 0 12
39586: PUSH
39587: LD_INT 1
39589: ARRAY
39590: PPUSH
39591: CALL_OW 313
39595: PUSH
39596: LD_INT 6
39598: EQUAL
39599: OR
39600: IFFALSE 39620
// f := Delete ( f , 1 ) ;
39602: LD_ADDR_VAR 0 12
39606: PUSH
39607: LD_VAR 0 12
39611: PPUSH
39612: LD_INT 1
39614: PPUSH
39615: CALL_OW 3
39619: ST_TO_ADDR
// if not f then
39620: LD_VAR 0 12
39624: NOT
39625: IFFALSE 39643
// begin x := x + 2 ;
39627: LD_ADDR_VAR 0 13
39631: PUSH
39632: LD_VAR 0 13
39636: PUSH
39637: LD_INT 2
39639: PLUS
39640: ST_TO_ADDR
// continue ;
39641: GO 39441
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39643: LD_VAR 0 12
39647: PUSH
39648: LD_INT 1
39650: ARRAY
39651: PPUSH
39652: CALL_OW 266
39656: PUSH
39657: LD_INT 5
39659: EQUAL
39660: IFFALSE 39734
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39662: LD_VAR 0 12
39666: PUSH
39667: LD_INT 1
39669: ARRAY
39670: PPUSH
39671: CALL_OW 313
39675: PUSH
39676: LD_INT 3
39678: LESS
39679: IFFALSE 39715
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39681: LD_INT 0
39683: PPUSH
39684: LD_INT 5
39686: PUSH
39687: LD_INT 8
39689: PUSH
39690: LD_INT 9
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: PUSH
39698: LD_VAR 0 17
39702: ARRAY
39703: PPUSH
39704: LD_VAR 0 4
39708: PPUSH
39709: CALL_OW 380
39713: GO 39732
// PrepareHuman ( false , i , skill ) ;
39715: LD_INT 0
39717: PPUSH
39718: LD_VAR 0 8
39722: PPUSH
39723: LD_VAR 0 4
39727: PPUSH
39728: CALL_OW 380
// end else
39732: GO 39751
// PrepareHuman ( false , i , skill ) ;
39734: LD_INT 0
39736: PPUSH
39737: LD_VAR 0 8
39741: PPUSH
39742: LD_VAR 0 4
39746: PPUSH
39747: CALL_OW 380
// un := CreateHuman ;
39751: LD_ADDR_VAR 0 14
39755: PUSH
39756: CALL_OW 44
39760: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39761: LD_ADDR_VAR 0 7
39765: PUSH
39766: LD_VAR 0 7
39770: PPUSH
39771: LD_INT 1
39773: PPUSH
39774: LD_VAR 0 14
39778: PPUSH
39779: CALL_OW 2
39783: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39784: LD_VAR 0 14
39788: PPUSH
39789: LD_VAR 0 12
39793: PUSH
39794: LD_INT 1
39796: ARRAY
39797: PPUSH
39798: CALL_OW 52
// end ;
39802: GO 39441
39804: POP
39805: POP
// end ;
39806: GO 38743
39808: POP
39809: POP
// result := result ^ buildings ;
39810: LD_ADDR_VAR 0 7
39814: PUSH
39815: LD_VAR 0 7
39819: PUSH
39820: LD_VAR 0 18
39824: ADD
39825: ST_TO_ADDR
// end else
39826: GO 39969
// begin for i = 1 to personel do
39828: LD_ADDR_VAR 0 8
39832: PUSH
39833: DOUBLE
39834: LD_INT 1
39836: DEC
39837: ST_TO_ADDR
39838: LD_VAR 0 6
39842: PUSH
39843: FOR_TO
39844: IFFALSE 39967
// begin if i > 4 then
39846: LD_VAR 0 8
39850: PUSH
39851: LD_INT 4
39853: GREATER
39854: IFFALSE 39858
// break ;
39856: GO 39967
// x := personel [ i ] ;
39858: LD_ADDR_VAR 0 13
39862: PUSH
39863: LD_VAR 0 6
39867: PUSH
39868: LD_VAR 0 8
39872: ARRAY
39873: ST_TO_ADDR
// if x = - 1 then
39874: LD_VAR 0 13
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: EQUAL
39883: IFFALSE 39887
// continue ;
39885: GO 39843
// PrepareHuman ( false , i , skill ) ;
39887: LD_INT 0
39889: PPUSH
39890: LD_VAR 0 8
39894: PPUSH
39895: LD_VAR 0 4
39899: PPUSH
39900: CALL_OW 380
// un := CreateHuman ;
39904: LD_ADDR_VAR 0 14
39908: PUSH
39909: CALL_OW 44
39913: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39914: LD_VAR 0 14
39918: PPUSH
39919: LD_VAR 0 1
39923: PPUSH
39924: CALL_OW 250
39928: PPUSH
39929: LD_VAR 0 1
39933: PPUSH
39934: CALL_OW 251
39938: PPUSH
39939: LD_INT 10
39941: PPUSH
39942: LD_INT 0
39944: PPUSH
39945: CALL_OW 50
// result := result ^ un ;
39949: LD_ADDR_VAR 0 7
39953: PUSH
39954: LD_VAR 0 7
39958: PUSH
39959: LD_VAR 0 14
39963: ADD
39964: ST_TO_ADDR
// end ;
39965: GO 39843
39967: POP
39968: POP
// end ; end ;
39969: LD_VAR 0 7
39973: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39974: LD_INT 0
39976: PPUSH
39977: PPUSH
39978: PPUSH
39979: PPUSH
39980: PPUSH
39981: PPUSH
39982: PPUSH
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
39987: PPUSH
39988: PPUSH
39989: PPUSH
39990: PPUSH
39991: PPUSH
// result := false ;
39992: LD_ADDR_VAR 0 3
39996: PUSH
39997: LD_INT 0
39999: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40000: LD_VAR 0 1
40004: NOT
40005: PUSH
40006: LD_VAR 0 1
40010: PPUSH
40011: CALL_OW 266
40015: PUSH
40016: LD_INT 32
40018: PUSH
40019: LD_INT 33
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: IN
40026: NOT
40027: OR
40028: IFFALSE 40032
// exit ;
40030: GO 41171
// nat := GetNation ( tower ) ;
40032: LD_ADDR_VAR 0 12
40036: PUSH
40037: LD_VAR 0 1
40041: PPUSH
40042: CALL_OW 248
40046: ST_TO_ADDR
// side := GetSide ( tower ) ;
40047: LD_ADDR_VAR 0 16
40051: PUSH
40052: LD_VAR 0 1
40056: PPUSH
40057: CALL_OW 255
40061: ST_TO_ADDR
// x := GetX ( tower ) ;
40062: LD_ADDR_VAR 0 10
40066: PUSH
40067: LD_VAR 0 1
40071: PPUSH
40072: CALL_OW 250
40076: ST_TO_ADDR
// y := GetY ( tower ) ;
40077: LD_ADDR_VAR 0 11
40081: PUSH
40082: LD_VAR 0 1
40086: PPUSH
40087: CALL_OW 251
40091: ST_TO_ADDR
// if not x or not y then
40092: LD_VAR 0 10
40096: NOT
40097: PUSH
40098: LD_VAR 0 11
40102: NOT
40103: OR
40104: IFFALSE 40108
// exit ;
40106: GO 41171
// weapon := 0 ;
40108: LD_ADDR_VAR 0 18
40112: PUSH
40113: LD_INT 0
40115: ST_TO_ADDR
// fac_list := [ ] ;
40116: LD_ADDR_VAR 0 17
40120: PUSH
40121: EMPTY
40122: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40123: LD_ADDR_VAR 0 6
40127: PUSH
40128: LD_VAR 0 1
40132: PPUSH
40133: CALL_OW 274
40137: PPUSH
40138: LD_VAR 0 2
40142: PPUSH
40143: LD_INT 0
40145: PPUSH
40146: CALL 37711 0 3
40150: PPUSH
40151: LD_INT 30
40153: PUSH
40154: LD_INT 3
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PPUSH
40161: CALL_OW 72
40165: ST_TO_ADDR
// if not factories then
40166: LD_VAR 0 6
40170: NOT
40171: IFFALSE 40175
// exit ;
40173: GO 41171
// for i in factories do
40175: LD_ADDR_VAR 0 8
40179: PUSH
40180: LD_VAR 0 6
40184: PUSH
40185: FOR_IN
40186: IFFALSE 40211
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40188: LD_ADDR_VAR 0 17
40192: PUSH
40193: LD_VAR 0 17
40197: PUSH
40198: LD_VAR 0 8
40202: PPUSH
40203: CALL_OW 478
40207: UNION
40208: ST_TO_ADDR
40209: GO 40185
40211: POP
40212: POP
// if not fac_list then
40213: LD_VAR 0 17
40217: NOT
40218: IFFALSE 40222
// exit ;
40220: GO 41171
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40222: LD_ADDR_VAR 0 5
40226: PUSH
40227: LD_INT 4
40229: PUSH
40230: LD_INT 5
40232: PUSH
40233: LD_INT 9
40235: PUSH
40236: LD_INT 10
40238: PUSH
40239: LD_INT 6
40241: PUSH
40242: LD_INT 7
40244: PUSH
40245: LD_INT 11
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 27
40259: PUSH
40260: LD_INT 28
40262: PUSH
40263: LD_INT 26
40265: PUSH
40266: LD_INT 30
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 43
40277: PUSH
40278: LD_INT 44
40280: PUSH
40281: LD_INT 46
40283: PUSH
40284: LD_INT 45
40286: PUSH
40287: LD_INT 47
40289: PUSH
40290: LD_INT 49
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: LIST
40305: PUSH
40306: LD_VAR 0 12
40310: ARRAY
40311: ST_TO_ADDR
// for i in list do
40312: LD_ADDR_VAR 0 8
40316: PUSH
40317: LD_VAR 0 5
40321: PUSH
40322: FOR_IN
40323: IFFALSE 40356
// if not i in fac_list then
40325: LD_VAR 0 8
40329: PUSH
40330: LD_VAR 0 17
40334: IN
40335: NOT
40336: IFFALSE 40354
// list := list diff i ;
40338: LD_ADDR_VAR 0 5
40342: PUSH
40343: LD_VAR 0 5
40347: PUSH
40348: LD_VAR 0 8
40352: DIFF
40353: ST_TO_ADDR
40354: GO 40322
40356: POP
40357: POP
// if not list then
40358: LD_VAR 0 5
40362: NOT
40363: IFFALSE 40367
// exit ;
40365: GO 41171
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40367: LD_VAR 0 12
40371: PUSH
40372: LD_INT 3
40374: EQUAL
40375: PUSH
40376: LD_INT 49
40378: PUSH
40379: LD_VAR 0 5
40383: IN
40384: AND
40385: PUSH
40386: LD_INT 31
40388: PPUSH
40389: LD_VAR 0 16
40393: PPUSH
40394: CALL_OW 321
40398: PUSH
40399: LD_INT 2
40401: EQUAL
40402: AND
40403: IFFALSE 40463
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40405: LD_INT 22
40407: PUSH
40408: LD_VAR 0 16
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 35
40419: PUSH
40420: LD_INT 49
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 91
40429: PUSH
40430: LD_VAR 0 1
40434: PUSH
40435: LD_INT 10
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: LIST
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: LIST
40447: PPUSH
40448: CALL_OW 69
40452: NOT
40453: IFFALSE 40463
// weapon := ru_time_lapser ;
40455: LD_ADDR_VAR 0 18
40459: PUSH
40460: LD_INT 49
40462: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40463: LD_VAR 0 12
40467: PUSH
40468: LD_INT 1
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: IN
40478: PUSH
40479: LD_INT 11
40481: PUSH
40482: LD_VAR 0 5
40486: IN
40487: PUSH
40488: LD_INT 30
40490: PUSH
40491: LD_VAR 0 5
40495: IN
40496: OR
40497: AND
40498: PUSH
40499: LD_INT 6
40501: PPUSH
40502: LD_VAR 0 16
40506: PPUSH
40507: CALL_OW 321
40511: PUSH
40512: LD_INT 2
40514: EQUAL
40515: AND
40516: IFFALSE 40681
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40518: LD_INT 22
40520: PUSH
40521: LD_VAR 0 16
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 35
40535: PUSH
40536: LD_INT 11
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 35
40545: PUSH
40546: LD_INT 30
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 91
40560: PUSH
40561: LD_VAR 0 1
40565: PUSH
40566: LD_INT 18
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: LIST
40578: PPUSH
40579: CALL_OW 69
40583: NOT
40584: PUSH
40585: LD_INT 22
40587: PUSH
40588: LD_VAR 0 16
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: LD_INT 30
40602: PUSH
40603: LD_INT 32
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 30
40612: PUSH
40613: LD_INT 33
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 91
40627: PUSH
40628: LD_VAR 0 1
40632: PUSH
40633: LD_INT 12
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: LIST
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: LIST
40645: PUSH
40646: EMPTY
40647: LIST
40648: PPUSH
40649: CALL_OW 69
40653: PUSH
40654: LD_INT 2
40656: GREATER
40657: AND
40658: IFFALSE 40681
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40660: LD_ADDR_VAR 0 18
40664: PUSH
40665: LD_INT 11
40667: PUSH
40668: LD_INT 30
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_VAR 0 12
40679: ARRAY
40680: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40681: LD_VAR 0 18
40685: NOT
40686: PUSH
40687: LD_INT 40
40689: PPUSH
40690: LD_VAR 0 16
40694: PPUSH
40695: CALL_OW 321
40699: PUSH
40700: LD_INT 2
40702: EQUAL
40703: AND
40704: PUSH
40705: LD_INT 7
40707: PUSH
40708: LD_VAR 0 5
40712: IN
40713: PUSH
40714: LD_INT 28
40716: PUSH
40717: LD_VAR 0 5
40721: IN
40722: OR
40723: PUSH
40724: LD_INT 45
40726: PUSH
40727: LD_VAR 0 5
40731: IN
40732: OR
40733: AND
40734: IFFALSE 40988
// begin hex := GetHexInfo ( x , y ) ;
40736: LD_ADDR_VAR 0 4
40740: PUSH
40741: LD_VAR 0 10
40745: PPUSH
40746: LD_VAR 0 11
40750: PPUSH
40751: CALL_OW 546
40755: ST_TO_ADDR
// if hex [ 1 ] then
40756: LD_VAR 0 4
40760: PUSH
40761: LD_INT 1
40763: ARRAY
40764: IFFALSE 40768
// exit ;
40766: GO 41171
// height := hex [ 2 ] ;
40768: LD_ADDR_VAR 0 15
40772: PUSH
40773: LD_VAR 0 4
40777: PUSH
40778: LD_INT 2
40780: ARRAY
40781: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40782: LD_ADDR_VAR 0 14
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: LD_INT 3
40795: PUSH
40796: LD_INT 5
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: ST_TO_ADDR
// for i in tmp do
40805: LD_ADDR_VAR 0 8
40809: PUSH
40810: LD_VAR 0 14
40814: PUSH
40815: FOR_IN
40816: IFFALSE 40986
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40818: LD_ADDR_VAR 0 9
40822: PUSH
40823: LD_VAR 0 10
40827: PPUSH
40828: LD_VAR 0 8
40832: PPUSH
40833: LD_INT 5
40835: PPUSH
40836: CALL_OW 272
40840: PUSH
40841: LD_VAR 0 11
40845: PPUSH
40846: LD_VAR 0 8
40850: PPUSH
40851: LD_INT 5
40853: PPUSH
40854: CALL_OW 273
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40863: LD_VAR 0 9
40867: PUSH
40868: LD_INT 1
40870: ARRAY
40871: PPUSH
40872: LD_VAR 0 9
40876: PUSH
40877: LD_INT 2
40879: ARRAY
40880: PPUSH
40881: CALL_OW 488
40885: IFFALSE 40984
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40887: LD_ADDR_VAR 0 4
40891: PUSH
40892: LD_VAR 0 9
40896: PUSH
40897: LD_INT 1
40899: ARRAY
40900: PPUSH
40901: LD_VAR 0 9
40905: PUSH
40906: LD_INT 2
40908: ARRAY
40909: PPUSH
40910: CALL_OW 546
40914: ST_TO_ADDR
// if hex [ 1 ] then
40915: LD_VAR 0 4
40919: PUSH
40920: LD_INT 1
40922: ARRAY
40923: IFFALSE 40927
// continue ;
40925: GO 40815
// h := hex [ 2 ] ;
40927: LD_ADDR_VAR 0 13
40931: PUSH
40932: LD_VAR 0 4
40936: PUSH
40937: LD_INT 2
40939: ARRAY
40940: ST_TO_ADDR
// if h + 7 < height then
40941: LD_VAR 0 13
40945: PUSH
40946: LD_INT 7
40948: PLUS
40949: PUSH
40950: LD_VAR 0 15
40954: LESS
40955: IFFALSE 40984
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40957: LD_ADDR_VAR 0 18
40961: PUSH
40962: LD_INT 7
40964: PUSH
40965: LD_INT 28
40967: PUSH
40968: LD_INT 45
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: LIST
40975: PUSH
40976: LD_VAR 0 12
40980: ARRAY
40981: ST_TO_ADDR
// break ;
40982: GO 40986
// end ; end ; end ;
40984: GO 40815
40986: POP
40987: POP
// end ; if not weapon then
40988: LD_VAR 0 18
40992: NOT
40993: IFFALSE 41053
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40995: LD_ADDR_VAR 0 5
40999: PUSH
41000: LD_VAR 0 5
41004: PUSH
41005: LD_INT 11
41007: PUSH
41008: LD_INT 30
41010: PUSH
41011: LD_INT 49
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: LIST
41018: DIFF
41019: ST_TO_ADDR
// if not list then
41020: LD_VAR 0 5
41024: NOT
41025: IFFALSE 41029
// exit ;
41027: GO 41171
// weapon := list [ rand ( 1 , list ) ] ;
41029: LD_ADDR_VAR 0 18
41033: PUSH
41034: LD_VAR 0 5
41038: PUSH
41039: LD_INT 1
41041: PPUSH
41042: LD_VAR 0 5
41046: PPUSH
41047: CALL_OW 12
41051: ARRAY
41052: ST_TO_ADDR
// end ; if weapon then
41053: LD_VAR 0 18
41057: IFFALSE 41171
// begin tmp := CostOfWeapon ( weapon ) ;
41059: LD_ADDR_VAR 0 14
41063: PUSH
41064: LD_VAR 0 18
41068: PPUSH
41069: CALL_OW 451
41073: ST_TO_ADDR
// j := GetBase ( tower ) ;
41074: LD_ADDR_VAR 0 9
41078: PUSH
41079: LD_VAR 0 1
41083: PPUSH
41084: CALL_OW 274
41088: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41089: LD_VAR 0 9
41093: PPUSH
41094: LD_INT 1
41096: PPUSH
41097: CALL_OW 275
41101: PUSH
41102: LD_VAR 0 14
41106: PUSH
41107: LD_INT 1
41109: ARRAY
41110: GREATEREQUAL
41111: PUSH
41112: LD_VAR 0 9
41116: PPUSH
41117: LD_INT 2
41119: PPUSH
41120: CALL_OW 275
41124: PUSH
41125: LD_VAR 0 14
41129: PUSH
41130: LD_INT 2
41132: ARRAY
41133: GREATEREQUAL
41134: AND
41135: PUSH
41136: LD_VAR 0 9
41140: PPUSH
41141: LD_INT 3
41143: PPUSH
41144: CALL_OW 275
41148: PUSH
41149: LD_VAR 0 14
41153: PUSH
41154: LD_INT 3
41156: ARRAY
41157: GREATEREQUAL
41158: AND
41159: IFFALSE 41171
// result := weapon ;
41161: LD_ADDR_VAR 0 3
41165: PUSH
41166: LD_VAR 0 18
41170: ST_TO_ADDR
// end ; end ;
41171: LD_VAR 0 3
41175: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41176: LD_INT 0
41178: PPUSH
41179: PPUSH
// result := true ;
41180: LD_ADDR_VAR 0 3
41184: PUSH
41185: LD_INT 1
41187: ST_TO_ADDR
// if array1 = array2 then
41188: LD_VAR 0 1
41192: PUSH
41193: LD_VAR 0 2
41197: EQUAL
41198: IFFALSE 41258
// begin for i = 1 to array1 do
41200: LD_ADDR_VAR 0 4
41204: PUSH
41205: DOUBLE
41206: LD_INT 1
41208: DEC
41209: ST_TO_ADDR
41210: LD_VAR 0 1
41214: PUSH
41215: FOR_TO
41216: IFFALSE 41254
// if array1 [ i ] <> array2 [ i ] then
41218: LD_VAR 0 1
41222: PUSH
41223: LD_VAR 0 4
41227: ARRAY
41228: PUSH
41229: LD_VAR 0 2
41233: PUSH
41234: LD_VAR 0 4
41238: ARRAY
41239: NONEQUAL
41240: IFFALSE 41252
// begin result := false ;
41242: LD_ADDR_VAR 0 3
41246: PUSH
41247: LD_INT 0
41249: ST_TO_ADDR
// break ;
41250: GO 41254
// end ;
41252: GO 41215
41254: POP
41255: POP
// end else
41256: GO 41266
// result := false ;
41258: LD_ADDR_VAR 0 3
41262: PUSH
41263: LD_INT 0
41265: ST_TO_ADDR
// end ;
41266: LD_VAR 0 3
41270: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41271: LD_INT 0
41273: PPUSH
41274: PPUSH
// if not array1 or not array2 then
41275: LD_VAR 0 1
41279: NOT
41280: PUSH
41281: LD_VAR 0 2
41285: NOT
41286: OR
41287: IFFALSE 41291
// exit ;
41289: GO 41355
// result := true ;
41291: LD_ADDR_VAR 0 3
41295: PUSH
41296: LD_INT 1
41298: ST_TO_ADDR
// for i = 1 to array1 do
41299: LD_ADDR_VAR 0 4
41303: PUSH
41304: DOUBLE
41305: LD_INT 1
41307: DEC
41308: ST_TO_ADDR
41309: LD_VAR 0 1
41313: PUSH
41314: FOR_TO
41315: IFFALSE 41353
// if array1 [ i ] <> array2 [ i ] then
41317: LD_VAR 0 1
41321: PUSH
41322: LD_VAR 0 4
41326: ARRAY
41327: PUSH
41328: LD_VAR 0 2
41332: PUSH
41333: LD_VAR 0 4
41337: ARRAY
41338: NONEQUAL
41339: IFFALSE 41351
// begin result := false ;
41341: LD_ADDR_VAR 0 3
41345: PUSH
41346: LD_INT 0
41348: ST_TO_ADDR
// break ;
41349: GO 41353
// end ;
41351: GO 41314
41353: POP
41354: POP
// end ;
41355: LD_VAR 0 3
41359: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41360: LD_INT 0
41362: PPUSH
41363: PPUSH
41364: PPUSH
// pom := GetBase ( fac ) ;
41365: LD_ADDR_VAR 0 5
41369: PUSH
41370: LD_VAR 0 1
41374: PPUSH
41375: CALL_OW 274
41379: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41380: LD_ADDR_VAR 0 4
41384: PUSH
41385: LD_VAR 0 2
41389: PUSH
41390: LD_INT 1
41392: ARRAY
41393: PPUSH
41394: LD_VAR 0 2
41398: PUSH
41399: LD_INT 2
41401: ARRAY
41402: PPUSH
41403: LD_VAR 0 2
41407: PUSH
41408: LD_INT 3
41410: ARRAY
41411: PPUSH
41412: LD_VAR 0 2
41416: PUSH
41417: LD_INT 4
41419: ARRAY
41420: PPUSH
41421: CALL_OW 449
41425: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41426: LD_ADDR_VAR 0 3
41430: PUSH
41431: LD_VAR 0 5
41435: PPUSH
41436: LD_INT 1
41438: PPUSH
41439: CALL_OW 275
41443: PUSH
41444: LD_VAR 0 4
41448: PUSH
41449: LD_INT 1
41451: ARRAY
41452: GREATEREQUAL
41453: PUSH
41454: LD_VAR 0 5
41458: PPUSH
41459: LD_INT 2
41461: PPUSH
41462: CALL_OW 275
41466: PUSH
41467: LD_VAR 0 4
41471: PUSH
41472: LD_INT 2
41474: ARRAY
41475: GREATEREQUAL
41476: AND
41477: PUSH
41478: LD_VAR 0 5
41482: PPUSH
41483: LD_INT 3
41485: PPUSH
41486: CALL_OW 275
41490: PUSH
41491: LD_VAR 0 4
41495: PUSH
41496: LD_INT 3
41498: ARRAY
41499: GREATEREQUAL
41500: AND
41501: ST_TO_ADDR
// end ;
41502: LD_VAR 0 3
41506: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41507: LD_INT 0
41509: PPUSH
41510: PPUSH
41511: PPUSH
41512: PPUSH
// pom := GetBase ( building ) ;
41513: LD_ADDR_VAR 0 3
41517: PUSH
41518: LD_VAR 0 1
41522: PPUSH
41523: CALL_OW 274
41527: ST_TO_ADDR
// if not pom then
41528: LD_VAR 0 3
41532: NOT
41533: IFFALSE 41537
// exit ;
41535: GO 41707
// btype := GetBType ( building ) ;
41537: LD_ADDR_VAR 0 5
41541: PUSH
41542: LD_VAR 0 1
41546: PPUSH
41547: CALL_OW 266
41551: ST_TO_ADDR
// if btype = b_armoury then
41552: LD_VAR 0 5
41556: PUSH
41557: LD_INT 4
41559: EQUAL
41560: IFFALSE 41570
// btype := b_barracks ;
41562: LD_ADDR_VAR 0 5
41566: PUSH
41567: LD_INT 5
41569: ST_TO_ADDR
// if btype = b_depot then
41570: LD_VAR 0 5
41574: PUSH
41575: LD_INT 0
41577: EQUAL
41578: IFFALSE 41588
// btype := b_warehouse ;
41580: LD_ADDR_VAR 0 5
41584: PUSH
41585: LD_INT 1
41587: ST_TO_ADDR
// if btype = b_workshop then
41588: LD_VAR 0 5
41592: PUSH
41593: LD_INT 2
41595: EQUAL
41596: IFFALSE 41606
// btype := b_factory ;
41598: LD_ADDR_VAR 0 5
41602: PUSH
41603: LD_INT 3
41605: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41606: LD_ADDR_VAR 0 4
41610: PUSH
41611: LD_VAR 0 5
41615: PPUSH
41616: LD_VAR 0 1
41620: PPUSH
41621: CALL_OW 248
41625: PPUSH
41626: CALL_OW 450
41630: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41631: LD_ADDR_VAR 0 2
41635: PUSH
41636: LD_VAR 0 3
41640: PPUSH
41641: LD_INT 1
41643: PPUSH
41644: CALL_OW 275
41648: PUSH
41649: LD_VAR 0 4
41653: PUSH
41654: LD_INT 1
41656: ARRAY
41657: GREATEREQUAL
41658: PUSH
41659: LD_VAR 0 3
41663: PPUSH
41664: LD_INT 2
41666: PPUSH
41667: CALL_OW 275
41671: PUSH
41672: LD_VAR 0 4
41676: PUSH
41677: LD_INT 2
41679: ARRAY
41680: GREATEREQUAL
41681: AND
41682: PUSH
41683: LD_VAR 0 3
41687: PPUSH
41688: LD_INT 3
41690: PPUSH
41691: CALL_OW 275
41695: PUSH
41696: LD_VAR 0 4
41700: PUSH
41701: LD_INT 3
41703: ARRAY
41704: GREATEREQUAL
41705: AND
41706: ST_TO_ADDR
// end ;
41707: LD_VAR 0 2
41711: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41712: LD_INT 0
41714: PPUSH
41715: PPUSH
41716: PPUSH
// pom := GetBase ( building ) ;
41717: LD_ADDR_VAR 0 4
41721: PUSH
41722: LD_VAR 0 1
41726: PPUSH
41727: CALL_OW 274
41731: ST_TO_ADDR
// if not pom then
41732: LD_VAR 0 4
41736: NOT
41737: IFFALSE 41741
// exit ;
41739: GO 41842
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41741: LD_ADDR_VAR 0 5
41745: PUSH
41746: LD_VAR 0 2
41750: PPUSH
41751: LD_VAR 0 1
41755: PPUSH
41756: CALL_OW 248
41760: PPUSH
41761: CALL_OW 450
41765: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41766: LD_ADDR_VAR 0 3
41770: PUSH
41771: LD_VAR 0 4
41775: PPUSH
41776: LD_INT 1
41778: PPUSH
41779: CALL_OW 275
41783: PUSH
41784: LD_VAR 0 5
41788: PUSH
41789: LD_INT 1
41791: ARRAY
41792: GREATEREQUAL
41793: PUSH
41794: LD_VAR 0 4
41798: PPUSH
41799: LD_INT 2
41801: PPUSH
41802: CALL_OW 275
41806: PUSH
41807: LD_VAR 0 5
41811: PUSH
41812: LD_INT 2
41814: ARRAY
41815: GREATEREQUAL
41816: AND
41817: PUSH
41818: LD_VAR 0 4
41822: PPUSH
41823: LD_INT 3
41825: PPUSH
41826: CALL_OW 275
41830: PUSH
41831: LD_VAR 0 5
41835: PUSH
41836: LD_INT 3
41838: ARRAY
41839: GREATEREQUAL
41840: AND
41841: ST_TO_ADDR
// end ;
41842: LD_VAR 0 3
41846: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41847: LD_INT 0
41849: PPUSH
41850: PPUSH
41851: PPUSH
41852: PPUSH
41853: PPUSH
41854: PPUSH
41855: PPUSH
41856: PPUSH
41857: PPUSH
41858: PPUSH
41859: PPUSH
// result := false ;
41860: LD_ADDR_VAR 0 8
41864: PUSH
41865: LD_INT 0
41867: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41868: LD_VAR 0 5
41872: NOT
41873: PUSH
41874: LD_VAR 0 1
41878: NOT
41879: OR
41880: PUSH
41881: LD_VAR 0 2
41885: NOT
41886: OR
41887: PUSH
41888: LD_VAR 0 3
41892: NOT
41893: OR
41894: IFFALSE 41898
// exit ;
41896: GO 42712
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41898: LD_ADDR_VAR 0 14
41902: PUSH
41903: LD_VAR 0 1
41907: PPUSH
41908: LD_VAR 0 2
41912: PPUSH
41913: LD_VAR 0 3
41917: PPUSH
41918: LD_VAR 0 4
41922: PPUSH
41923: LD_VAR 0 5
41927: PUSH
41928: LD_INT 1
41930: ARRAY
41931: PPUSH
41932: CALL_OW 248
41936: PPUSH
41937: LD_INT 0
41939: PPUSH
41940: CALL 43549 0 6
41944: ST_TO_ADDR
// if not hexes then
41945: LD_VAR 0 14
41949: NOT
41950: IFFALSE 41954
// exit ;
41952: GO 42712
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41954: LD_ADDR_VAR 0 17
41958: PUSH
41959: LD_VAR 0 5
41963: PPUSH
41964: LD_INT 22
41966: PUSH
41967: LD_VAR 0 13
41971: PPUSH
41972: CALL_OW 255
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 2
41983: PUSH
41984: LD_INT 30
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 30
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: LIST
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PPUSH
42013: CALL_OW 72
42017: ST_TO_ADDR
// for i = 1 to hexes do
42018: LD_ADDR_VAR 0 9
42022: PUSH
42023: DOUBLE
42024: LD_INT 1
42026: DEC
42027: ST_TO_ADDR
42028: LD_VAR 0 14
42032: PUSH
42033: FOR_TO
42034: IFFALSE 42710
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42036: LD_ADDR_VAR 0 13
42040: PUSH
42041: LD_VAR 0 14
42045: PUSH
42046: LD_VAR 0 9
42050: ARRAY
42051: PUSH
42052: LD_INT 1
42054: ARRAY
42055: PPUSH
42056: LD_VAR 0 14
42060: PUSH
42061: LD_VAR 0 9
42065: ARRAY
42066: PUSH
42067: LD_INT 2
42069: ARRAY
42070: PPUSH
42071: CALL_OW 428
42075: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42076: LD_VAR 0 14
42080: PUSH
42081: LD_VAR 0 9
42085: ARRAY
42086: PUSH
42087: LD_INT 1
42089: ARRAY
42090: PPUSH
42091: LD_VAR 0 14
42095: PUSH
42096: LD_VAR 0 9
42100: ARRAY
42101: PUSH
42102: LD_INT 2
42104: ARRAY
42105: PPUSH
42106: CALL_OW 351
42110: PUSH
42111: LD_VAR 0 14
42115: PUSH
42116: LD_VAR 0 9
42120: ARRAY
42121: PUSH
42122: LD_INT 1
42124: ARRAY
42125: PPUSH
42126: LD_VAR 0 14
42130: PUSH
42131: LD_VAR 0 9
42135: ARRAY
42136: PUSH
42137: LD_INT 2
42139: ARRAY
42140: PPUSH
42141: CALL_OW 488
42145: NOT
42146: OR
42147: PUSH
42148: LD_VAR 0 13
42152: PPUSH
42153: CALL_OW 247
42157: PUSH
42158: LD_INT 3
42160: EQUAL
42161: OR
42162: IFFALSE 42168
// exit ;
42164: POP
42165: POP
42166: GO 42712
// if not tmp then
42168: LD_VAR 0 13
42172: NOT
42173: IFFALSE 42177
// continue ;
42175: GO 42033
// result := true ;
42177: LD_ADDR_VAR 0 8
42181: PUSH
42182: LD_INT 1
42184: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42185: LD_VAR 0 6
42189: PUSH
42190: LD_VAR 0 13
42194: PPUSH
42195: CALL_OW 247
42199: PUSH
42200: LD_INT 2
42202: EQUAL
42203: AND
42204: PUSH
42205: LD_VAR 0 13
42209: PPUSH
42210: CALL_OW 263
42214: PUSH
42215: LD_INT 1
42217: EQUAL
42218: AND
42219: IFFALSE 42383
// begin if IsDrivenBy ( tmp ) then
42221: LD_VAR 0 13
42225: PPUSH
42226: CALL_OW 311
42230: IFFALSE 42234
// continue ;
42232: GO 42033
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42234: LD_VAR 0 6
42238: PPUSH
42239: LD_INT 3
42241: PUSH
42242: LD_INT 60
42244: PUSH
42245: EMPTY
42246: LIST
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 3
42254: PUSH
42255: LD_INT 55
42257: PUSH
42258: EMPTY
42259: LIST
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PPUSH
42269: CALL_OW 72
42273: IFFALSE 42381
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42275: LD_ADDR_VAR 0 18
42279: PUSH
42280: LD_VAR 0 6
42284: PPUSH
42285: LD_INT 3
42287: PUSH
42288: LD_INT 60
42290: PUSH
42291: EMPTY
42292: LIST
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 3
42300: PUSH
42301: LD_INT 55
42303: PUSH
42304: EMPTY
42305: LIST
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PPUSH
42315: CALL_OW 72
42319: PUSH
42320: LD_INT 1
42322: ARRAY
42323: ST_TO_ADDR
// if IsInUnit ( driver ) then
42324: LD_VAR 0 18
42328: PPUSH
42329: CALL_OW 310
42333: IFFALSE 42344
// ComExit ( driver ) ;
42335: LD_VAR 0 18
42339: PPUSH
42340: CALL 66733 0 1
// AddComEnterUnit ( driver , tmp ) ;
42344: LD_VAR 0 18
42348: PPUSH
42349: LD_VAR 0 13
42353: PPUSH
42354: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42358: LD_VAR 0 18
42362: PPUSH
42363: LD_VAR 0 7
42367: PPUSH
42368: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42372: LD_VAR 0 18
42376: PPUSH
42377: CALL_OW 181
// end ; continue ;
42381: GO 42033
// end ; if not cleaners or not tmp in cleaners then
42383: LD_VAR 0 6
42387: NOT
42388: PUSH
42389: LD_VAR 0 13
42393: PUSH
42394: LD_VAR 0 6
42398: IN
42399: NOT
42400: OR
42401: IFFALSE 42708
// begin if dep then
42403: LD_VAR 0 17
42407: IFFALSE 42543
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42409: LD_ADDR_VAR 0 16
42413: PUSH
42414: LD_VAR 0 17
42418: PUSH
42419: LD_INT 1
42421: ARRAY
42422: PPUSH
42423: CALL_OW 250
42427: PPUSH
42428: LD_VAR 0 17
42432: PUSH
42433: LD_INT 1
42435: ARRAY
42436: PPUSH
42437: CALL_OW 254
42441: PPUSH
42442: LD_INT 5
42444: PPUSH
42445: CALL_OW 272
42449: PUSH
42450: LD_VAR 0 17
42454: PUSH
42455: LD_INT 1
42457: ARRAY
42458: PPUSH
42459: CALL_OW 251
42463: PPUSH
42464: LD_VAR 0 17
42468: PUSH
42469: LD_INT 1
42471: ARRAY
42472: PPUSH
42473: CALL_OW 254
42477: PPUSH
42478: LD_INT 5
42480: PPUSH
42481: CALL_OW 273
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42490: LD_VAR 0 16
42494: PUSH
42495: LD_INT 1
42497: ARRAY
42498: PPUSH
42499: LD_VAR 0 16
42503: PUSH
42504: LD_INT 2
42506: ARRAY
42507: PPUSH
42508: CALL_OW 488
42512: IFFALSE 42543
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42514: LD_VAR 0 13
42518: PPUSH
42519: LD_VAR 0 16
42523: PUSH
42524: LD_INT 1
42526: ARRAY
42527: PPUSH
42528: LD_VAR 0 16
42532: PUSH
42533: LD_INT 2
42535: ARRAY
42536: PPUSH
42537: CALL_OW 111
// continue ;
42541: GO 42033
// end ; end ; r := GetDir ( tmp ) ;
42543: LD_ADDR_VAR 0 15
42547: PUSH
42548: LD_VAR 0 13
42552: PPUSH
42553: CALL_OW 254
42557: ST_TO_ADDR
// if r = 5 then
42558: LD_VAR 0 15
42562: PUSH
42563: LD_INT 5
42565: EQUAL
42566: IFFALSE 42576
// r := 0 ;
42568: LD_ADDR_VAR 0 15
42572: PUSH
42573: LD_INT 0
42575: ST_TO_ADDR
// for j = r to 5 do
42576: LD_ADDR_VAR 0 10
42580: PUSH
42581: DOUBLE
42582: LD_VAR 0 15
42586: DEC
42587: ST_TO_ADDR
42588: LD_INT 5
42590: PUSH
42591: FOR_TO
42592: IFFALSE 42706
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42594: LD_ADDR_VAR 0 11
42598: PUSH
42599: LD_VAR 0 13
42603: PPUSH
42604: CALL_OW 250
42608: PPUSH
42609: LD_VAR 0 10
42613: PPUSH
42614: LD_INT 2
42616: PPUSH
42617: CALL_OW 272
42621: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42622: LD_ADDR_VAR 0 12
42626: PUSH
42627: LD_VAR 0 13
42631: PPUSH
42632: CALL_OW 251
42636: PPUSH
42637: LD_VAR 0 10
42641: PPUSH
42642: LD_INT 2
42644: PPUSH
42645: CALL_OW 273
42649: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42650: LD_VAR 0 11
42654: PPUSH
42655: LD_VAR 0 12
42659: PPUSH
42660: CALL_OW 488
42664: PUSH
42665: LD_VAR 0 11
42669: PPUSH
42670: LD_VAR 0 12
42674: PPUSH
42675: CALL_OW 428
42679: NOT
42680: AND
42681: IFFALSE 42704
// begin ComMoveXY ( tmp , _x , _y ) ;
42683: LD_VAR 0 13
42687: PPUSH
42688: LD_VAR 0 11
42692: PPUSH
42693: LD_VAR 0 12
42697: PPUSH
42698: CALL_OW 111
// break ;
42702: GO 42706
// end ; end ;
42704: GO 42591
42706: POP
42707: POP
// end ; end ;
42708: GO 42033
42710: POP
42711: POP
// end ;
42712: LD_VAR 0 8
42716: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
42717: LD_INT 0
42719: PPUSH
42720: PPUSH
42721: PPUSH
42722: PPUSH
42723: PPUSH
42724: PPUSH
42725: PPUSH
42726: PPUSH
42727: PPUSH
42728: PPUSH
// result := false ;
42729: LD_ADDR_VAR 0 6
42733: PUSH
42734: LD_INT 0
42736: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42737: LD_VAR 0 1
42741: NOT
42742: PUSH
42743: LD_VAR 0 1
42747: PPUSH
42748: CALL_OW 266
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: IN
42763: NOT
42764: OR
42765: PUSH
42766: LD_VAR 0 2
42770: NOT
42771: OR
42772: PUSH
42773: LD_VAR 0 5
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: LD_INT 2
42786: PUSH
42787: LD_INT 3
42789: PUSH
42790: LD_INT 4
42792: PUSH
42793: LD_INT 5
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: IN
42804: NOT
42805: OR
42806: PUSH
42807: LD_VAR 0 3
42811: PPUSH
42812: LD_VAR 0 4
42816: PPUSH
42817: CALL_OW 488
42821: NOT
42822: OR
42823: IFFALSE 42827
// exit ;
42825: GO 43544
// pom := GetBase ( depot ) ;
42827: LD_ADDR_VAR 0 10
42831: PUSH
42832: LD_VAR 0 1
42836: PPUSH
42837: CALL_OW 274
42841: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42842: LD_ADDR_VAR 0 11
42846: PUSH
42847: LD_VAR 0 2
42851: PPUSH
42852: LD_VAR 0 1
42856: PPUSH
42857: CALL_OW 248
42861: PPUSH
42862: CALL_OW 450
42866: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42867: LD_VAR 0 10
42871: PPUSH
42872: LD_INT 1
42874: PPUSH
42875: CALL_OW 275
42879: PUSH
42880: LD_VAR 0 11
42884: PUSH
42885: LD_INT 1
42887: ARRAY
42888: GREATEREQUAL
42889: PUSH
42890: LD_VAR 0 10
42894: PPUSH
42895: LD_INT 2
42897: PPUSH
42898: CALL_OW 275
42902: PUSH
42903: LD_VAR 0 11
42907: PUSH
42908: LD_INT 2
42910: ARRAY
42911: GREATEREQUAL
42912: AND
42913: PUSH
42914: LD_VAR 0 10
42918: PPUSH
42919: LD_INT 3
42921: PPUSH
42922: CALL_OW 275
42926: PUSH
42927: LD_VAR 0 11
42931: PUSH
42932: LD_INT 3
42934: ARRAY
42935: GREATEREQUAL
42936: AND
42937: NOT
42938: IFFALSE 42942
// exit ;
42940: GO 43544
// if GetBType ( depot ) = b_depot then
42942: LD_VAR 0 1
42946: PPUSH
42947: CALL_OW 266
42951: PUSH
42952: LD_INT 0
42954: EQUAL
42955: IFFALSE 42967
// dist := 28 else
42957: LD_ADDR_VAR 0 14
42961: PUSH
42962: LD_INT 28
42964: ST_TO_ADDR
42965: GO 42975
// dist := 36 ;
42967: LD_ADDR_VAR 0 14
42971: PUSH
42972: LD_INT 36
42974: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42975: LD_VAR 0 1
42979: PPUSH
42980: LD_VAR 0 3
42984: PPUSH
42985: LD_VAR 0 4
42989: PPUSH
42990: CALL_OW 297
42994: PUSH
42995: LD_VAR 0 14
42999: GREATER
43000: IFFALSE 43004
// exit ;
43002: GO 43544
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43004: LD_ADDR_VAR 0 12
43008: PUSH
43009: LD_VAR 0 2
43013: PPUSH
43014: LD_VAR 0 3
43018: PPUSH
43019: LD_VAR 0 4
43023: PPUSH
43024: LD_VAR 0 5
43028: PPUSH
43029: LD_VAR 0 1
43033: PPUSH
43034: CALL_OW 248
43038: PPUSH
43039: LD_INT 0
43041: PPUSH
43042: CALL 43549 0 6
43046: ST_TO_ADDR
// if not hexes then
43047: LD_VAR 0 12
43051: NOT
43052: IFFALSE 43056
// exit ;
43054: GO 43544
// hex := GetHexInfo ( x , y ) ;
43056: LD_ADDR_VAR 0 15
43060: PUSH
43061: LD_VAR 0 3
43065: PPUSH
43066: LD_VAR 0 4
43070: PPUSH
43071: CALL_OW 546
43075: ST_TO_ADDR
// if hex [ 1 ] then
43076: LD_VAR 0 15
43080: PUSH
43081: LD_INT 1
43083: ARRAY
43084: IFFALSE 43088
// exit ;
43086: GO 43544
// height := hex [ 2 ] ;
43088: LD_ADDR_VAR 0 13
43092: PUSH
43093: LD_VAR 0 15
43097: PUSH
43098: LD_INT 2
43100: ARRAY
43101: ST_TO_ADDR
// for i = 1 to hexes do
43102: LD_ADDR_VAR 0 7
43106: PUSH
43107: DOUBLE
43108: LD_INT 1
43110: DEC
43111: ST_TO_ADDR
43112: LD_VAR 0 12
43116: PUSH
43117: FOR_TO
43118: IFFALSE 43448
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43120: LD_VAR 0 12
43124: PUSH
43125: LD_VAR 0 7
43129: ARRAY
43130: PUSH
43131: LD_INT 1
43133: ARRAY
43134: PPUSH
43135: LD_VAR 0 12
43139: PUSH
43140: LD_VAR 0 7
43144: ARRAY
43145: PUSH
43146: LD_INT 2
43148: ARRAY
43149: PPUSH
43150: CALL_OW 488
43154: NOT
43155: PUSH
43156: LD_VAR 0 12
43160: PUSH
43161: LD_VAR 0 7
43165: ARRAY
43166: PUSH
43167: LD_INT 1
43169: ARRAY
43170: PPUSH
43171: LD_VAR 0 12
43175: PUSH
43176: LD_VAR 0 7
43180: ARRAY
43181: PUSH
43182: LD_INT 2
43184: ARRAY
43185: PPUSH
43186: CALL_OW 428
43190: PUSH
43191: LD_INT 0
43193: GREATER
43194: OR
43195: PUSH
43196: LD_VAR 0 12
43200: PUSH
43201: LD_VAR 0 7
43205: ARRAY
43206: PUSH
43207: LD_INT 1
43209: ARRAY
43210: PPUSH
43211: LD_VAR 0 12
43215: PUSH
43216: LD_VAR 0 7
43220: ARRAY
43221: PUSH
43222: LD_INT 2
43224: ARRAY
43225: PPUSH
43226: CALL_OW 351
43230: OR
43231: IFFALSE 43237
// exit ;
43233: POP
43234: POP
43235: GO 43544
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43237: LD_ADDR_VAR 0 8
43241: PUSH
43242: LD_VAR 0 12
43246: PUSH
43247: LD_VAR 0 7
43251: ARRAY
43252: PUSH
43253: LD_INT 1
43255: ARRAY
43256: PPUSH
43257: LD_VAR 0 12
43261: PUSH
43262: LD_VAR 0 7
43266: ARRAY
43267: PUSH
43268: LD_INT 2
43270: ARRAY
43271: PPUSH
43272: CALL_OW 546
43276: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43277: LD_VAR 0 8
43281: PUSH
43282: LD_INT 1
43284: ARRAY
43285: PUSH
43286: LD_VAR 0 8
43290: PUSH
43291: LD_INT 2
43293: ARRAY
43294: PUSH
43295: LD_VAR 0 13
43299: PUSH
43300: LD_INT 2
43302: PLUS
43303: GREATER
43304: OR
43305: PUSH
43306: LD_VAR 0 8
43310: PUSH
43311: LD_INT 2
43313: ARRAY
43314: PUSH
43315: LD_VAR 0 13
43319: PUSH
43320: LD_INT 2
43322: MINUS
43323: LESS
43324: OR
43325: PUSH
43326: LD_VAR 0 8
43330: PUSH
43331: LD_INT 3
43333: ARRAY
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: LD_INT 8
43340: PUSH
43341: LD_INT 9
43343: PUSH
43344: LD_INT 10
43346: PUSH
43347: LD_INT 11
43349: PUSH
43350: LD_INT 12
43352: PUSH
43353: LD_INT 13
43355: PUSH
43356: LD_INT 16
43358: PUSH
43359: LD_INT 17
43361: PUSH
43362: LD_INT 18
43364: PUSH
43365: LD_INT 19
43367: PUSH
43368: LD_INT 20
43370: PUSH
43371: LD_INT 21
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: IN
43389: NOT
43390: OR
43391: PUSH
43392: LD_VAR 0 8
43396: PUSH
43397: LD_INT 5
43399: ARRAY
43400: NOT
43401: OR
43402: PUSH
43403: LD_VAR 0 8
43407: PUSH
43408: LD_INT 6
43410: ARRAY
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: LD_INT 7
43420: PUSH
43421: LD_INT 9
43423: PUSH
43424: LD_INT 10
43426: PUSH
43427: LD_INT 11
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: IN
43438: NOT
43439: OR
43440: IFFALSE 43446
// exit ;
43442: POP
43443: POP
43444: GO 43544
// end ;
43446: GO 43117
43448: POP
43449: POP
// side := GetSide ( depot ) ;
43450: LD_ADDR_VAR 0 9
43454: PUSH
43455: LD_VAR 0 1
43459: PPUSH
43460: CALL_OW 255
43464: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43465: LD_VAR 0 9
43469: PPUSH
43470: LD_VAR 0 3
43474: PPUSH
43475: LD_VAR 0 4
43479: PPUSH
43480: LD_INT 20
43482: PPUSH
43483: CALL 35865 0 4
43487: PUSH
43488: LD_INT 4
43490: ARRAY
43491: IFFALSE 43495
// exit ;
43493: GO 43544
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43495: LD_VAR 0 2
43499: PUSH
43500: LD_INT 29
43502: PUSH
43503: LD_INT 30
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: IN
43510: PUSH
43511: LD_VAR 0 3
43515: PPUSH
43516: LD_VAR 0 4
43520: PPUSH
43521: LD_VAR 0 9
43525: PPUSH
43526: CALL_OW 440
43530: NOT
43531: AND
43532: IFFALSE 43536
// exit ;
43534: GO 43544
// result := true ;
43536: LD_ADDR_VAR 0 6
43540: PUSH
43541: LD_INT 1
43543: ST_TO_ADDR
// end ;
43544: LD_VAR 0 6
43548: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43549: LD_INT 0
43551: PPUSH
43552: PPUSH
43553: PPUSH
43554: PPUSH
43555: PPUSH
43556: PPUSH
43557: PPUSH
43558: PPUSH
43559: PPUSH
43560: PPUSH
43561: PPUSH
43562: PPUSH
43563: PPUSH
43564: PPUSH
43565: PPUSH
43566: PPUSH
43567: PPUSH
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
43573: PPUSH
43574: PPUSH
43575: PPUSH
43576: PPUSH
43577: PPUSH
43578: PPUSH
43579: PPUSH
43580: PPUSH
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
43592: PPUSH
43593: PPUSH
43594: PPUSH
43595: PPUSH
43596: PPUSH
43597: PPUSH
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
43602: PPUSH
43603: PPUSH
43604: PPUSH
43605: PPUSH
43606: PPUSH
43607: PPUSH
43608: PPUSH
// result = [ ] ;
43609: LD_ADDR_VAR 0 7
43613: PUSH
43614: EMPTY
43615: ST_TO_ADDR
// temp_list = [ ] ;
43616: LD_ADDR_VAR 0 9
43620: PUSH
43621: EMPTY
43622: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43623: LD_VAR 0 4
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: LD_INT 2
43636: PUSH
43637: LD_INT 3
43639: PUSH
43640: LD_INT 4
43642: PUSH
43643: LD_INT 5
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: IN
43654: NOT
43655: PUSH
43656: LD_VAR 0 1
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: IN
43671: PUSH
43672: LD_VAR 0 5
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: LD_INT 3
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: LIST
43690: IN
43691: NOT
43692: AND
43693: OR
43694: IFFALSE 43698
// exit ;
43696: GO 62089
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43698: LD_VAR 0 1
43702: PUSH
43703: LD_INT 6
43705: PUSH
43706: LD_INT 7
43708: PUSH
43709: LD_INT 8
43711: PUSH
43712: LD_INT 13
43714: PUSH
43715: LD_INT 12
43717: PUSH
43718: LD_INT 15
43720: PUSH
43721: LD_INT 11
43723: PUSH
43724: LD_INT 14
43726: PUSH
43727: LD_INT 10
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: IN
43741: IFFALSE 43751
// btype = b_lab ;
43743: LD_ADDR_VAR 0 1
43747: PUSH
43748: LD_INT 6
43750: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43751: LD_VAR 0 6
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: LD_INT 2
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: LIST
43769: IN
43770: NOT
43771: PUSH
43772: LD_VAR 0 1
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: LD_INT 3
43788: PUSH
43789: LD_INT 6
43791: PUSH
43792: LD_INT 36
43794: PUSH
43795: LD_INT 4
43797: PUSH
43798: LD_INT 5
43800: PUSH
43801: LD_INT 31
43803: PUSH
43804: LD_INT 32
43806: PUSH
43807: LD_INT 33
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: IN
43823: NOT
43824: PUSH
43825: LD_VAR 0 6
43829: PUSH
43830: LD_INT 1
43832: EQUAL
43833: AND
43834: OR
43835: PUSH
43836: LD_VAR 0 1
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: LD_INT 3
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: IN
43851: NOT
43852: PUSH
43853: LD_VAR 0 6
43857: PUSH
43858: LD_INT 2
43860: EQUAL
43861: AND
43862: OR
43863: IFFALSE 43873
// mode = 0 ;
43865: LD_ADDR_VAR 0 6
43869: PUSH
43870: LD_INT 0
43872: ST_TO_ADDR
// case mode of 0 :
43873: LD_VAR 0 6
43877: PUSH
43878: LD_INT 0
43880: DOUBLE
43881: EQUAL
43882: IFTRUE 43886
43884: GO 55339
43886: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43887: LD_ADDR_VAR 0 11
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: LD_INT 2
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 2
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 3
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 3
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: LD_INT 2
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44080: LD_ADDR_VAR 0 12
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 3
44237: NEG
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 3
44248: NEG
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44276: LD_ADDR_VAR 0 13
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 2
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: NEG
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 2
44411: NEG
44412: PUSH
44413: LD_INT 2
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 2
44423: NEG
44424: PUSH
44425: LD_INT 3
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 3
44435: NEG
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 3
44447: NEG
44448: PUSH
44449: LD_INT 3
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44475: LD_ADDR_VAR 0 14
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 2
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: LD_INT 2
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 2
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 3
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 3
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44671: LD_ADDR_VAR 0 15
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 3
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 3
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44864: LD_ADDR_VAR 0 16
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: LD_INT 2
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 3
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 3
45021: PUSH
45022: LD_INT 3
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: LD_INT 3
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45057: LD_ADDR_VAR 0 17
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45287: LD_ADDR_VAR 0 18
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45517: LD_ADDR_VAR 0 19
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45747: LD_ADDR_VAR 0 20
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45977: LD_ADDR_VAR 0 21
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46207: LD_ADDR_VAR 0 22
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: LD_INT 2
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46437: LD_ADDR_VAR 0 23
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: LD_INT 3
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: LD_INT 3
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46717: LD_ADDR_VAR 0 24
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: LD_INT 2
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 3
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 3
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46993: LD_ADDR_VAR 0 25
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: LD_INT 2
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 2
47169: NEG
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 2
47192: NEG
47193: PUSH
47194: LD_INT 2
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 3
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 3
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: LD_INT 3
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: LD_INT 3
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47267: LD_ADDR_VAR 0 26
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: LD_INT 3
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 3
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: NEG
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47543: LD_ADDR_VAR 0 27
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 2
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: NEG
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 3
47776: NEG
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 3
47788: NEG
47789: PUSH
47790: LD_INT 2
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47823: LD_ADDR_VAR 0 28
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 2
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 2
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 2
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 2
48034: NEG
48035: PUSH
48036: LD_INT 3
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: LD_INT 3
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 3
48058: NEG
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 3
48070: NEG
48071: PUSH
48072: LD_INT 2
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48105: LD_ADDR_VAR 0 29
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: LD_INT 2
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: LD_INT 2
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: LD_INT 3
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 3
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: LD_INT 3
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 3
48349: NEG
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48384: LD_ADDR_VAR 0 30
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 3
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 2
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 3
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: LD_INT 3
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 3
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48662: LD_ADDR_VAR 0 31
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: LD_INT 3
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 3
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: LD_INT 3
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 3
48905: NEG
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48940: LD_ADDR_VAR 0 32
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 3
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 3
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: LD_INT 3
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 3
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49218: LD_ADDR_VAR 0 33
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: LD_INT 2
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: LD_INT 3
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: LD_INT 3
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 3
49462: NEG
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49497: LD_ADDR_VAR 0 34
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: LD_INT 2
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: NEG
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: LD_INT 3
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 3
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: LD_INT 3
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 3
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49777: LD_ADDR_VAR 0 35
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49889: LD_ADDR_VAR 0 36
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50001: LD_ADDR_VAR 0 37
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50113: LD_ADDR_VAR 0 38
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50225: LD_ADDR_VAR 0 39
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: LD_INT 2
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50337: LD_ADDR_VAR 0 40
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50449: LD_ADDR_VAR 0 41
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: LD_INT 2
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 2
50604: NEG
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: NEG
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 2
50627: NEG
50628: PUSH
50629: LD_INT 2
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 2
50639: NEG
50640: PUSH
50641: LD_INT 3
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 3
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 3
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 3
50692: PUSH
50693: LD_INT 3
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: LD_INT 3
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 3
50723: NEG
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 3
50734: NEG
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 3
50746: NEG
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 3
50758: NEG
50759: PUSH
50760: LD_INT 3
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50799: LD_ADDR_VAR 0 42
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: LD_INT 2
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 2
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: LD_INT 3
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 3
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: LD_INT 2
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 3
51035: PUSH
51036: LD_INT 2
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 3
51045: PUSH
51046: LD_INT 3
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 2
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 3
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 3
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 2
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 3
51096: NEG
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 3
51108: NEG
51109: PUSH
51110: LD_INT 3
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51149: LD_ADDR_VAR 0 43
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 0
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 2
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 3
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 3
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 3
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 3
51445: NEG
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 3
51456: NEG
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51497: LD_ADDR_VAR 0 44
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 2
51652: NEG
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 3
51740: PUSH
51741: LD_INT 3
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: PUSH
51751: LD_INT 3
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 3
51771: NEG
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 3
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 3
51794: NEG
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 3
51806: NEG
51807: PUSH
51808: LD_INT 3
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51847: LD_ADDR_VAR 0 45
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: NEG
52038: PUSH
52039: LD_INT 3
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: LD_INT 3
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 3
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 2
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 3
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 3
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 2
52103: PUSH
52104: LD_INT 3
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: LD_INT 3
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 3
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 3
52144: NEG
52145: PUSH
52146: LD_INT 2
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 3
52156: NEG
52157: PUSH
52158: LD_INT 3
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52197: LD_ADDR_VAR 0 46
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: LD_INT 2
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 2
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: LD_INT 2
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 2
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 2
52374: NEG
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 3
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: LD_INT 3
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: LD_INT 2
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 3
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 3
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 3
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 2
52482: NEG
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 3
52493: NEG
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 3
52504: NEG
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52545: LD_ADDR_VAR 0 47
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: LD_INT 2
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 2
52672: NEG
52673: PUSH
52674: LD_INT 2
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52696: LD_ADDR_VAR 0 48
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_INT 2
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52843: LD_ADDR_VAR 0 49
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 2
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52987: LD_ADDR_VAR 0 50
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53131: LD_ADDR_VAR 0 51
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 2
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53278: LD_ADDR_VAR 0 52
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: LD_INT 2
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53429: LD_ADDR_VAR 0 53
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 2
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 2
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: NEG
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53659: LD_ADDR_VAR 0 54
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53889: LD_ADDR_VAR 0 55
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: LD_INT 2
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 2
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54119: LD_ADDR_VAR 0 56
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 2
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 2
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: LD_INT 2
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54349: LD_ADDR_VAR 0 57
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: LD_INT 2
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54579: LD_ADDR_VAR 0 58
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: LD_INT 2
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: NEG
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54809: LD_ADDR_VAR 0 59
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54897: LD_ADDR_VAR 0 60
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54985: LD_ADDR_VAR 0 61
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55073: LD_ADDR_VAR 0 62
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55161: LD_ADDR_VAR 0 63
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55249: LD_ADDR_VAR 0 64
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// end ; 1 :
55337: GO 61234
55339: LD_INT 1
55341: DOUBLE
55342: EQUAL
55343: IFTRUE 55347
55345: GO 57970
55347: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55348: LD_ADDR_VAR 0 11
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: LD_INT 3
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 3
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 2
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: LIST
55391: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55392: LD_ADDR_VAR 0 12
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 3
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 3
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: LIST
55432: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55433: LD_ADDR_VAR 0 13
55437: PUSH
55438: LD_INT 3
55440: PUSH
55441: LD_INT 2
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 3
55450: PUSH
55451: LD_INT 3
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: LD_INT 3
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: LIST
55472: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55473: LD_ADDR_VAR 0 14
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: LIST
55513: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55514: LD_ADDR_VAR 0 15
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: NEG
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 3
55543: NEG
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55558: LD_ADDR_VAR 0 16
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: LD_INT 3
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 3
55577: NEG
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: LD_INT 3
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: LIST
55603: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55604: LD_ADDR_VAR 0 17
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 3
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 3
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: LIST
55647: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55648: LD_ADDR_VAR 0 18
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 3
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 3
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: LIST
55688: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55689: LD_ADDR_VAR 0 19
55693: PUSH
55694: LD_INT 3
55696: PUSH
55697: LD_INT 2
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 3
55706: PUSH
55707: LD_INT 3
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: LD_INT 3
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: LIST
55728: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55729: LD_ADDR_VAR 0 20
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 3
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: LIST
55769: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55770: LD_ADDR_VAR 0 21
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: NEG
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 3
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: LIST
55813: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55814: LD_ADDR_VAR 0 22
55818: PUSH
55819: LD_INT 2
55821: NEG
55822: PUSH
55823: LD_INT 3
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 3
55833: NEG
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 3
55845: NEG
55846: PUSH
55847: LD_INT 3
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: LIST
55859: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55860: LD_ADDR_VAR 0 23
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 3
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 4
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: LD_INT 3
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: LIST
55903: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55904: LD_ADDR_VAR 0 24
55908: PUSH
55909: LD_INT 3
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 3
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 4
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: LIST
55944: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55945: LD_ADDR_VAR 0 25
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: LD_INT 3
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 4
55962: PUSH
55963: LD_INT 3
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 3
55972: PUSH
55973: LD_INT 4
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: LIST
55984: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55985: LD_ADDR_VAR 0 26
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 3
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: LD_INT 4
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: LD_INT 3
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56026: LD_ADDR_VAR 0 27
56030: PUSH
56031: LD_INT 3
56033: NEG
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 3
56044: NEG
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 4
56055: NEG
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56070: LD_ADDR_VAR 0 28
56074: PUSH
56075: LD_INT 3
56077: NEG
56078: PUSH
56079: LD_INT 3
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 3
56089: NEG
56090: PUSH
56091: LD_INT 4
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 4
56101: NEG
56102: PUSH
56103: LD_INT 3
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: LIST
56115: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56116: LD_ADDR_VAR 0 29
56120: PUSH
56121: LD_INT 1
56123: NEG
56124: PUSH
56125: LD_INT 3
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 3
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: LD_INT 4
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: LD_INT 4
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: LD_INT 3
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: LD_INT 5
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 5
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 4
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: LD_INT 6
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 6
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: LD_INT 5
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56271: LD_ADDR_VAR 0 30
56275: PUSH
56276: LD_INT 2
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 3
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 3
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 4
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 4
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 4
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 5
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 5
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 5
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 6
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 6
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56414: LD_ADDR_VAR 0 31
56418: PUSH
56419: LD_INT 3
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 3
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: LD_INT 3
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 4
56451: PUSH
56452: LD_INT 3
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 4
56461: PUSH
56462: LD_INT 4
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 3
56471: PUSH
56472: LD_INT 4
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 5
56481: PUSH
56482: LD_INT 4
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 5
56491: PUSH
56492: LD_INT 5
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 4
56501: PUSH
56502: LD_INT 5
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 6
56511: PUSH
56512: LD_INT 5
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 6
56521: PUSH
56522: LD_INT 6
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 5
56531: PUSH
56532: LD_INT 6
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56553: LD_ADDR_VAR 0 32
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 3
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 4
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 4
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 3
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 5
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 5
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: LD_INT 4
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: LD_INT 6
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 6
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: LD_INT 5
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56696: LD_ADDR_VAR 0 33
56700: PUSH
56701: LD_INT 2
56703: NEG
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 3
56714: NEG
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 3
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 3
56737: NEG
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 4
56748: NEG
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 4
56759: NEG
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 4
56771: NEG
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 5
56782: NEG
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 5
56793: NEG
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 5
56805: NEG
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 6
56816: NEG
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 6
56827: NEG
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56851: LD_ADDR_VAR 0 34
56855: PUSH
56856: LD_INT 2
56858: NEG
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 3
56870: NEG
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 3
56882: NEG
56883: PUSH
56884: LD_INT 3
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 3
56894: NEG
56895: PUSH
56896: LD_INT 4
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 4
56906: NEG
56907: PUSH
56908: LD_INT 3
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 4
56918: NEG
56919: PUSH
56920: LD_INT 4
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 4
56930: NEG
56931: PUSH
56932: LD_INT 5
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 5
56942: NEG
56943: PUSH
56944: LD_INT 4
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 5
56954: NEG
56955: PUSH
56956: LD_INT 5
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 5
56966: NEG
56967: PUSH
56968: LD_INT 6
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 6
56978: NEG
56979: PUSH
56980: LD_INT 5
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 6
56990: NEG
56991: PUSH
56992: LD_INT 6
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57014: LD_ADDR_VAR 0 41
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: LD_INT 3
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 2
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: LIST
57057: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57058: LD_ADDR_VAR 0 42
57062: PUSH
57063: LD_INT 2
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 3
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: LIST
57098: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57099: LD_ADDR_VAR 0 43
57103: PUSH
57104: LD_INT 2
57106: PUSH
57107: LD_INT 2
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: LIST
57138: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57139: LD_ADDR_VAR 0 44
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: LD_INT 3
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 2
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: LIST
57179: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57180: LD_ADDR_VAR 0 45
57184: PUSH
57185: LD_INT 2
57187: NEG
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: NEG
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 3
57209: NEG
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: LIST
57223: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57224: LD_ADDR_VAR 0 46
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: LD_INT 3
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: NEG
57256: PUSH
57257: LD_INT 2
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: LIST
57269: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57270: LD_ADDR_VAR 0 47
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: LD_INT 3
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 3
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57303: LD_ADDR_VAR 0 48
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 2
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57334: LD_ADDR_VAR 0 49
57338: PUSH
57339: LD_INT 3
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 3
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57363: LD_ADDR_VAR 0 50
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: LD_INT 3
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: LD_INT 3
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57392: LD_ADDR_VAR 0 51
57396: PUSH
57397: LD_INT 1
57399: NEG
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57423: LD_ADDR_VAR 0 52
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: NEG
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57456: LD_ADDR_VAR 0 53
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: LD_INT 3
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 3
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 2
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: LIST
57499: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57500: LD_ADDR_VAR 0 54
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 3
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 3
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: LIST
57540: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57541: LD_ADDR_VAR 0 55
57545: PUSH
57546: LD_INT 3
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: LD_INT 3
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: LIST
57580: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57581: LD_ADDR_VAR 0 56
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: LD_INT 3
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 2
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: LIST
57621: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57622: LD_ADDR_VAR 0 57
57626: PUSH
57627: LD_INT 2
57629: NEG
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: NEG
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 3
57651: NEG
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: LIST
57665: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57666: LD_ADDR_VAR 0 58
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: LD_INT 3
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 3
57685: NEG
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 3
57697: NEG
57698: PUSH
57699: LD_INT 3
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: LIST
57711: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57712: LD_ADDR_VAR 0 59
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: LIST
57755: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57756: LD_ADDR_VAR 0 60
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: LIST
57796: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57797: LD_ADDR_VAR 0 61
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: LIST
57836: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57837: LD_ADDR_VAR 0 62
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: LIST
57877: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57878: LD_ADDR_VAR 0 63
57882: PUSH
57883: LD_INT 1
57885: NEG
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 2
57907: NEG
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57922: LD_ADDR_VAR 0 64
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: LD_INT 2
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: LIST
57967: ST_TO_ADDR
// end ; 2 :
57968: GO 61234
57970: LD_INT 2
57972: DOUBLE
57973: EQUAL
57974: IFTRUE 57978
57976: GO 61233
57978: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57979: LD_ADDR_VAR 0 29
57983: PUSH
57984: LD_INT 4
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 4
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 5
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 5
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 4
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 3
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 3
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 3
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 5
58069: PUSH
58070: LD_INT 2
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 3
58079: PUSH
58080: LD_INT 3
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 4
58099: PUSH
58100: LD_INT 3
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 4
58109: PUSH
58110: LD_INT 4
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: LD_INT 4
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 2
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 2
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 4
58149: PUSH
58150: LD_INT 2
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 4
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 4
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 3
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: LD_INT 4
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: LD_INT 5
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 5
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: LD_INT 4
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 3
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: LD_INT 5
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 2
58251: NEG
58252: PUSH
58253: LD_INT 3
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 3
58262: NEG
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 3
58273: NEG
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: NEG
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: NEG
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 3
58307: NEG
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 4
58318: NEG
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 4
58329: NEG
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 4
58341: NEG
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 2
58353: NEG
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 4
58364: NEG
58365: PUSH
58366: LD_INT 4
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 4
58376: NEG
58377: PUSH
58378: LD_INT 5
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 3
58388: NEG
58389: PUSH
58390: LD_INT 4
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: NEG
58401: PUSH
58402: LD_INT 3
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 4
58412: NEG
58413: PUSH
58414: LD_INT 3
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 5
58424: NEG
58425: PUSH
58426: LD_INT 4
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 5
58436: NEG
58437: PUSH
58438: LD_INT 5
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 3
58448: NEG
58449: PUSH
58450: LD_INT 5
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 5
58460: NEG
58461: PUSH
58462: LD_INT 3
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58517: LD_ADDR_VAR 0 30
58521: PUSH
58522: LD_INT 4
58524: PUSH
58525: LD_INT 4
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 4
58534: PUSH
58535: LD_INT 3
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 5
58544: PUSH
58545: LD_INT 4
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 5
58554: PUSH
58555: LD_INT 5
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 4
58564: PUSH
58565: LD_INT 5
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 3
58574: PUSH
58575: LD_INT 4
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: PUSH
58585: LD_INT 3
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 5
58594: PUSH
58595: LD_INT 3
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: LD_INT 5
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: LD_INT 3
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: LD_INT 4
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: LD_INT 4
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: LD_INT 3
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: LD_INT 4
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 4
58707: NEG
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 4
58718: NEG
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 3
58730: NEG
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 3
58741: NEG
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 4
58752: NEG
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 5
58763: NEG
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 5
58774: NEG
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 5
58786: NEG
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 3
58798: NEG
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 3
58809: NEG
58810: PUSH
58811: LD_INT 3
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 3
58821: NEG
58822: PUSH
58823: LD_INT 4
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: LD_INT 3
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: NEG
58846: PUSH
58847: LD_INT 2
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 3
58857: NEG
58858: PUSH
58859: LD_INT 2
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 4
58869: NEG
58870: PUSH
58871: LD_INT 3
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 4
58881: NEG
58882: PUSH
58883: LD_INT 4
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: LD_INT 4
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 4
58905: NEG
58906: PUSH
58907: LD_INT 2
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: LD_INT 4
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: LD_INT 5
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: LD_INT 4
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 3
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 3
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 4
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: LD_INT 5
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: LD_INT 3
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: LD_INT 5
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59064: LD_ADDR_VAR 0 31
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: LD_INT 4
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 0
59081: PUSH
59082: LD_INT 3
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: LD_INT 4
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 1
59101: PUSH
59102: LD_INT 5
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 5
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: LD_INT 4
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 2
59143: PUSH
59144: LD_INT 5
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: NEG
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 3
59164: NEG
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 3
59175: NEG
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 3
59209: NEG
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 4
59220: NEG
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 4
59231: NEG
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 4
59243: NEG
59244: PUSH
59245: LD_INT 2
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 2
59255: NEG
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 4
59266: NEG
59267: PUSH
59268: LD_INT 4
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 4
59278: NEG
59279: PUSH
59280: LD_INT 5
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 3
59290: NEG
59291: PUSH
59292: LD_INT 4
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 3
59302: NEG
59303: PUSH
59304: LD_INT 3
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 4
59314: NEG
59315: PUSH
59316: LD_INT 3
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 5
59326: NEG
59327: PUSH
59328: LD_INT 4
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 5
59338: NEG
59339: PUSH
59340: LD_INT 5
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 3
59350: NEG
59351: PUSH
59352: LD_INT 5
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 5
59362: NEG
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 3
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: LD_INT 4
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 3
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: LD_INT 2
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: LD_INT 2
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 3
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: LD_INT 4
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: LD_INT 2
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 2
59464: NEG
59465: PUSH
59466: LD_INT 4
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 4
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 4
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 5
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 5
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 4
59517: PUSH
59518: LD_INT 1
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 3
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 3
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 3
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 5
59559: PUSH
59560: LD_INT 2
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59614: LD_ADDR_VAR 0 32
59618: PUSH
59619: LD_INT 4
59621: NEG
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 4
59632: NEG
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 3
59644: NEG
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 3
59655: NEG
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 4
59666: NEG
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 5
59677: NEG
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 5
59688: NEG
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 5
59700: NEG
59701: PUSH
59702: LD_INT 2
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 3
59712: NEG
59713: PUSH
59714: LD_INT 2
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 3
59723: NEG
59724: PUSH
59725: LD_INT 3
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 3
59735: NEG
59736: PUSH
59737: LD_INT 4
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: LD_INT 3
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 3
59771: NEG
59772: PUSH
59773: LD_INT 2
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 4
59783: NEG
59784: PUSH
59785: LD_INT 3
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 4
59795: NEG
59796: PUSH
59797: LD_INT 4
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 2
59807: NEG
59808: PUSH
59809: LD_INT 4
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 4
59819: NEG
59820: PUSH
59821: LD_INT 2
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: LD_INT 4
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 5
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 4
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: LD_INT 3
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: LD_INT 3
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: LD_INT 4
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: LD_INT 5
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 2
59910: PUSH
59911: LD_INT 3
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 2
59921: NEG
59922: PUSH
59923: LD_INT 5
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 3
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 3
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 4
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 4
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 3
59974: PUSH
59975: LD_INT 1
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 2
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: PUSH
60006: LD_INT 2
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 4
60016: PUSH
60017: LD_INT 2
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 4
60026: PUSH
60027: LD_INT 4
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 4
60036: PUSH
60037: LD_INT 3
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 5
60046: PUSH
60047: LD_INT 4
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 5
60056: PUSH
60057: LD_INT 5
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 4
60066: PUSH
60067: LD_INT 5
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 3
60076: PUSH
60077: LD_INT 4
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 3
60086: PUSH
60087: LD_INT 3
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 5
60096: PUSH
60097: LD_INT 3
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: LD_INT 5
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60161: LD_ADDR_VAR 0 33
60165: PUSH
60166: LD_INT 4
60168: NEG
60169: PUSH
60170: LD_INT 4
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 4
60180: NEG
60181: PUSH
60182: LD_INT 5
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 3
60192: NEG
60193: PUSH
60194: LD_INT 4
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 3
60204: NEG
60205: PUSH
60206: LD_INT 3
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 4
60216: NEG
60217: PUSH
60218: LD_INT 3
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 5
60228: NEG
60229: PUSH
60230: LD_INT 4
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 5
60240: NEG
60241: PUSH
60242: LD_INT 5
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 3
60252: NEG
60253: PUSH
60254: LD_INT 5
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 5
60264: NEG
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: LD_INT 4
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: LD_INT 3
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 2
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: LD_INT 2
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: NEG
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: LD_INT 4
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 2
60355: PUSH
60356: LD_INT 2
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: LD_INT 4
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 4
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 4
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 5
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 5
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 4
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 3
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 3
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 5
60461: PUSH
60462: LD_INT 2
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 3
60471: PUSH
60472: LD_INT 3
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 3
60481: PUSH
60482: LD_INT 2
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 4
60491: PUSH
60492: LD_INT 3
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 4
60501: PUSH
60502: LD_INT 4
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: LD_INT 4
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 2
60521: PUSH
60522: LD_INT 3
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 2
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 4
60541: PUSH
60542: LD_INT 2
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: LD_INT 4
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: LD_INT 4
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: LD_INT 3
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: LD_INT 5
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 5
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: LD_INT 4
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: LD_INT 3
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: LD_INT 5
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: NEG
60644: PUSH
60645: LD_INT 3
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60699: LD_ADDR_VAR 0 34
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 4
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: LD_INT 5
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: LD_INT 4
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: LD_INT 3
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: LD_INT 3
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: LD_INT 4
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: LD_INT 5
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 2
60785: PUSH
60786: LD_INT 3
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 2
60796: NEG
60797: PUSH
60798: LD_INT 5
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 3
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 3
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 4
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 4
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 3
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 2
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: PUSH
60881: LD_INT 2
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 4
60891: PUSH
60892: LD_INT 2
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 4
60901: PUSH
60902: LD_INT 4
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 4
60911: PUSH
60912: LD_INT 3
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 5
60921: PUSH
60922: LD_INT 4
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 5
60931: PUSH
60932: LD_INT 5
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 4
60941: PUSH
60942: LD_INT 5
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 3
60951: PUSH
60952: LD_INT 4
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 3
60961: PUSH
60962: LD_INT 3
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 5
60971: PUSH
60972: LD_INT 3
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 3
60981: PUSH
60982: LD_INT 5
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: LD_INT 3
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: LD_INT 2
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: LD_INT 3
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: LD_INT 4
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: LD_INT 4
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: LD_INT 3
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 2
61063: PUSH
61064: LD_INT 4
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 2
61073: NEG
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 4
61084: NEG
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 4
61095: NEG
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 3
61107: NEG
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 3
61118: NEG
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 4
61129: NEG
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 5
61140: NEG
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 5
61151: NEG
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 5
61163: NEG
61164: PUSH
61165: LD_INT 2
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 3
61175: NEG
61176: PUSH
61177: LD_INT 2
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: ST_TO_ADDR
// end ; end ;
61231: GO 61234
61233: POP
// case btype of b_depot , b_warehouse :
61234: LD_VAR 0 1
61238: PUSH
61239: LD_INT 0
61241: DOUBLE
61242: EQUAL
61243: IFTRUE 61253
61245: LD_INT 1
61247: DOUBLE
61248: EQUAL
61249: IFTRUE 61253
61251: GO 61454
61253: POP
// case nation of nation_american :
61254: LD_VAR 0 5
61258: PUSH
61259: LD_INT 1
61261: DOUBLE
61262: EQUAL
61263: IFTRUE 61267
61265: GO 61323
61267: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61268: LD_ADDR_VAR 0 9
61272: PUSH
61273: LD_VAR 0 11
61277: PUSH
61278: LD_VAR 0 12
61282: PUSH
61283: LD_VAR 0 13
61287: PUSH
61288: LD_VAR 0 14
61292: PUSH
61293: LD_VAR 0 15
61297: PUSH
61298: LD_VAR 0 16
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: PUSH
61311: LD_VAR 0 4
61315: PUSH
61316: LD_INT 1
61318: PLUS
61319: ARRAY
61320: ST_TO_ADDR
61321: GO 61452
61323: LD_INT 2
61325: DOUBLE
61326: EQUAL
61327: IFTRUE 61331
61329: GO 61387
61331: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61332: LD_ADDR_VAR 0 9
61336: PUSH
61337: LD_VAR 0 17
61341: PUSH
61342: LD_VAR 0 18
61346: PUSH
61347: LD_VAR 0 19
61351: PUSH
61352: LD_VAR 0 20
61356: PUSH
61357: LD_VAR 0 21
61361: PUSH
61362: LD_VAR 0 22
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: PUSH
61375: LD_VAR 0 4
61379: PUSH
61380: LD_INT 1
61382: PLUS
61383: ARRAY
61384: ST_TO_ADDR
61385: GO 61452
61387: LD_INT 3
61389: DOUBLE
61390: EQUAL
61391: IFTRUE 61395
61393: GO 61451
61395: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61396: LD_ADDR_VAR 0 9
61400: PUSH
61401: LD_VAR 0 23
61405: PUSH
61406: LD_VAR 0 24
61410: PUSH
61411: LD_VAR 0 25
61415: PUSH
61416: LD_VAR 0 26
61420: PUSH
61421: LD_VAR 0 27
61425: PUSH
61426: LD_VAR 0 28
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: PUSH
61439: LD_VAR 0 4
61443: PUSH
61444: LD_INT 1
61446: PLUS
61447: ARRAY
61448: ST_TO_ADDR
61449: GO 61452
61451: POP
61452: GO 62007
61454: LD_INT 2
61456: DOUBLE
61457: EQUAL
61458: IFTRUE 61468
61460: LD_INT 3
61462: DOUBLE
61463: EQUAL
61464: IFTRUE 61468
61466: GO 61524
61468: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61469: LD_ADDR_VAR 0 9
61473: PUSH
61474: LD_VAR 0 29
61478: PUSH
61479: LD_VAR 0 30
61483: PUSH
61484: LD_VAR 0 31
61488: PUSH
61489: LD_VAR 0 32
61493: PUSH
61494: LD_VAR 0 33
61498: PUSH
61499: LD_VAR 0 34
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: PUSH
61512: LD_VAR 0 4
61516: PUSH
61517: LD_INT 1
61519: PLUS
61520: ARRAY
61521: ST_TO_ADDR
61522: GO 62007
61524: LD_INT 16
61526: DOUBLE
61527: EQUAL
61528: IFTRUE 61586
61530: LD_INT 17
61532: DOUBLE
61533: EQUAL
61534: IFTRUE 61586
61536: LD_INT 18
61538: DOUBLE
61539: EQUAL
61540: IFTRUE 61586
61542: LD_INT 19
61544: DOUBLE
61545: EQUAL
61546: IFTRUE 61586
61548: LD_INT 22
61550: DOUBLE
61551: EQUAL
61552: IFTRUE 61586
61554: LD_INT 20
61556: DOUBLE
61557: EQUAL
61558: IFTRUE 61586
61560: LD_INT 21
61562: DOUBLE
61563: EQUAL
61564: IFTRUE 61586
61566: LD_INT 23
61568: DOUBLE
61569: EQUAL
61570: IFTRUE 61586
61572: LD_INT 24
61574: DOUBLE
61575: EQUAL
61576: IFTRUE 61586
61578: LD_INT 25
61580: DOUBLE
61581: EQUAL
61582: IFTRUE 61586
61584: GO 61642
61586: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61587: LD_ADDR_VAR 0 9
61591: PUSH
61592: LD_VAR 0 35
61596: PUSH
61597: LD_VAR 0 36
61601: PUSH
61602: LD_VAR 0 37
61606: PUSH
61607: LD_VAR 0 38
61611: PUSH
61612: LD_VAR 0 39
61616: PUSH
61617: LD_VAR 0 40
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: PUSH
61630: LD_VAR 0 4
61634: PUSH
61635: LD_INT 1
61637: PLUS
61638: ARRAY
61639: ST_TO_ADDR
61640: GO 62007
61642: LD_INT 6
61644: DOUBLE
61645: EQUAL
61646: IFTRUE 61698
61648: LD_INT 7
61650: DOUBLE
61651: EQUAL
61652: IFTRUE 61698
61654: LD_INT 8
61656: DOUBLE
61657: EQUAL
61658: IFTRUE 61698
61660: LD_INT 13
61662: DOUBLE
61663: EQUAL
61664: IFTRUE 61698
61666: LD_INT 12
61668: DOUBLE
61669: EQUAL
61670: IFTRUE 61698
61672: LD_INT 15
61674: DOUBLE
61675: EQUAL
61676: IFTRUE 61698
61678: LD_INT 11
61680: DOUBLE
61681: EQUAL
61682: IFTRUE 61698
61684: LD_INT 14
61686: DOUBLE
61687: EQUAL
61688: IFTRUE 61698
61690: LD_INT 10
61692: DOUBLE
61693: EQUAL
61694: IFTRUE 61698
61696: GO 61754
61698: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61699: LD_ADDR_VAR 0 9
61703: PUSH
61704: LD_VAR 0 41
61708: PUSH
61709: LD_VAR 0 42
61713: PUSH
61714: LD_VAR 0 43
61718: PUSH
61719: LD_VAR 0 44
61723: PUSH
61724: LD_VAR 0 45
61728: PUSH
61729: LD_VAR 0 46
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: PUSH
61742: LD_VAR 0 4
61746: PUSH
61747: LD_INT 1
61749: PLUS
61750: ARRAY
61751: ST_TO_ADDR
61752: GO 62007
61754: LD_INT 36
61756: DOUBLE
61757: EQUAL
61758: IFTRUE 61762
61760: GO 61818
61762: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61763: LD_ADDR_VAR 0 9
61767: PUSH
61768: LD_VAR 0 47
61772: PUSH
61773: LD_VAR 0 48
61777: PUSH
61778: LD_VAR 0 49
61782: PUSH
61783: LD_VAR 0 50
61787: PUSH
61788: LD_VAR 0 51
61792: PUSH
61793: LD_VAR 0 52
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: PUSH
61806: LD_VAR 0 4
61810: PUSH
61811: LD_INT 1
61813: PLUS
61814: ARRAY
61815: ST_TO_ADDR
61816: GO 62007
61818: LD_INT 4
61820: DOUBLE
61821: EQUAL
61822: IFTRUE 61844
61824: LD_INT 5
61826: DOUBLE
61827: EQUAL
61828: IFTRUE 61844
61830: LD_INT 34
61832: DOUBLE
61833: EQUAL
61834: IFTRUE 61844
61836: LD_INT 37
61838: DOUBLE
61839: EQUAL
61840: IFTRUE 61844
61842: GO 61900
61844: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61845: LD_ADDR_VAR 0 9
61849: PUSH
61850: LD_VAR 0 53
61854: PUSH
61855: LD_VAR 0 54
61859: PUSH
61860: LD_VAR 0 55
61864: PUSH
61865: LD_VAR 0 56
61869: PUSH
61870: LD_VAR 0 57
61874: PUSH
61875: LD_VAR 0 58
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: PUSH
61888: LD_VAR 0 4
61892: PUSH
61893: LD_INT 1
61895: PLUS
61896: ARRAY
61897: ST_TO_ADDR
61898: GO 62007
61900: LD_INT 31
61902: DOUBLE
61903: EQUAL
61904: IFTRUE 61950
61906: LD_INT 32
61908: DOUBLE
61909: EQUAL
61910: IFTRUE 61950
61912: LD_INT 33
61914: DOUBLE
61915: EQUAL
61916: IFTRUE 61950
61918: LD_INT 27
61920: DOUBLE
61921: EQUAL
61922: IFTRUE 61950
61924: LD_INT 26
61926: DOUBLE
61927: EQUAL
61928: IFTRUE 61950
61930: LD_INT 28
61932: DOUBLE
61933: EQUAL
61934: IFTRUE 61950
61936: LD_INT 29
61938: DOUBLE
61939: EQUAL
61940: IFTRUE 61950
61942: LD_INT 30
61944: DOUBLE
61945: EQUAL
61946: IFTRUE 61950
61948: GO 62006
61950: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61951: LD_ADDR_VAR 0 9
61955: PUSH
61956: LD_VAR 0 59
61960: PUSH
61961: LD_VAR 0 60
61965: PUSH
61966: LD_VAR 0 61
61970: PUSH
61971: LD_VAR 0 62
61975: PUSH
61976: LD_VAR 0 63
61980: PUSH
61981: LD_VAR 0 64
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: PUSH
61994: LD_VAR 0 4
61998: PUSH
61999: LD_INT 1
62001: PLUS
62002: ARRAY
62003: ST_TO_ADDR
62004: GO 62007
62006: POP
// temp_list2 = [ ] ;
62007: LD_ADDR_VAR 0 10
62011: PUSH
62012: EMPTY
62013: ST_TO_ADDR
// for i in temp_list do
62014: LD_ADDR_VAR 0 8
62018: PUSH
62019: LD_VAR 0 9
62023: PUSH
62024: FOR_IN
62025: IFFALSE 62077
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62027: LD_ADDR_VAR 0 10
62031: PUSH
62032: LD_VAR 0 10
62036: PUSH
62037: LD_VAR 0 8
62041: PUSH
62042: LD_INT 1
62044: ARRAY
62045: PUSH
62046: LD_VAR 0 2
62050: PLUS
62051: PUSH
62052: LD_VAR 0 8
62056: PUSH
62057: LD_INT 2
62059: ARRAY
62060: PUSH
62061: LD_VAR 0 3
62065: PLUS
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: EMPTY
62072: LIST
62073: ADD
62074: ST_TO_ADDR
62075: GO 62024
62077: POP
62078: POP
// result = temp_list2 ;
62079: LD_ADDR_VAR 0 7
62083: PUSH
62084: LD_VAR 0 10
62088: ST_TO_ADDR
// end ;
62089: LD_VAR 0 7
62093: RET
// export function EnemyInRange ( unit , dist ) ; begin
62094: LD_INT 0
62096: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62097: LD_ADDR_VAR 0 3
62101: PUSH
62102: LD_VAR 0 1
62106: PPUSH
62107: CALL_OW 255
62111: PPUSH
62112: LD_VAR 0 1
62116: PPUSH
62117: CALL_OW 250
62121: PPUSH
62122: LD_VAR 0 1
62126: PPUSH
62127: CALL_OW 251
62131: PPUSH
62132: LD_VAR 0 2
62136: PPUSH
62137: CALL 35865 0 4
62141: PUSH
62142: LD_INT 4
62144: ARRAY
62145: ST_TO_ADDR
// end ;
62146: LD_VAR 0 3
62150: RET
// export function PlayerSeeMe ( unit ) ; begin
62151: LD_INT 0
62153: PPUSH
// result := See ( your_side , unit ) ;
62154: LD_ADDR_VAR 0 2
62158: PUSH
62159: LD_OWVAR 2
62163: PPUSH
62164: LD_VAR 0 1
62168: PPUSH
62169: CALL_OW 292
62173: ST_TO_ADDR
// end ;
62174: LD_VAR 0 2
62178: RET
// export function ReverseDir ( unit ) ; begin
62179: LD_INT 0
62181: PPUSH
// if not unit then
62182: LD_VAR 0 1
62186: NOT
62187: IFFALSE 62191
// exit ;
62189: GO 62214
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62191: LD_ADDR_VAR 0 2
62195: PUSH
62196: LD_VAR 0 1
62200: PPUSH
62201: CALL_OW 254
62205: PUSH
62206: LD_INT 3
62208: PLUS
62209: PUSH
62210: LD_INT 6
62212: MOD
62213: ST_TO_ADDR
// end ;
62214: LD_VAR 0 2
62218: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62219: LD_INT 0
62221: PPUSH
62222: PPUSH
62223: PPUSH
62224: PPUSH
62225: PPUSH
// if not hexes then
62226: LD_VAR 0 2
62230: NOT
62231: IFFALSE 62235
// exit ;
62233: GO 62383
// dist := 9999 ;
62235: LD_ADDR_VAR 0 5
62239: PUSH
62240: LD_INT 9999
62242: ST_TO_ADDR
// for i = 1 to hexes do
62243: LD_ADDR_VAR 0 4
62247: PUSH
62248: DOUBLE
62249: LD_INT 1
62251: DEC
62252: ST_TO_ADDR
62253: LD_VAR 0 2
62257: PUSH
62258: FOR_TO
62259: IFFALSE 62371
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62261: LD_VAR 0 1
62265: PPUSH
62266: LD_VAR 0 2
62270: PUSH
62271: LD_VAR 0 4
62275: ARRAY
62276: PUSH
62277: LD_INT 1
62279: ARRAY
62280: PPUSH
62281: LD_VAR 0 2
62285: PUSH
62286: LD_VAR 0 4
62290: ARRAY
62291: PUSH
62292: LD_INT 2
62294: ARRAY
62295: PPUSH
62296: CALL_OW 297
62300: PUSH
62301: LD_VAR 0 5
62305: LESS
62306: IFFALSE 62369
// begin hex := hexes [ i ] ;
62308: LD_ADDR_VAR 0 7
62312: PUSH
62313: LD_VAR 0 2
62317: PUSH
62318: LD_VAR 0 4
62322: ARRAY
62323: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62324: LD_ADDR_VAR 0 5
62328: PUSH
62329: LD_VAR 0 1
62333: PPUSH
62334: LD_VAR 0 2
62338: PUSH
62339: LD_VAR 0 4
62343: ARRAY
62344: PUSH
62345: LD_INT 1
62347: ARRAY
62348: PPUSH
62349: LD_VAR 0 2
62353: PUSH
62354: LD_VAR 0 4
62358: ARRAY
62359: PUSH
62360: LD_INT 2
62362: ARRAY
62363: PPUSH
62364: CALL_OW 297
62368: ST_TO_ADDR
// end ; end ;
62369: GO 62258
62371: POP
62372: POP
// result := hex ;
62373: LD_ADDR_VAR 0 3
62377: PUSH
62378: LD_VAR 0 7
62382: ST_TO_ADDR
// end ;
62383: LD_VAR 0 3
62387: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62388: LD_INT 0
62390: PPUSH
62391: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62392: LD_VAR 0 1
62396: NOT
62397: PUSH
62398: LD_VAR 0 1
62402: PUSH
62403: LD_INT 21
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 23
62415: PUSH
62416: LD_INT 2
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PPUSH
62427: CALL_OW 69
62431: IN
62432: NOT
62433: OR
62434: IFFALSE 62438
// exit ;
62436: GO 62485
// for i = 1 to 3 do
62438: LD_ADDR_VAR 0 3
62442: PUSH
62443: DOUBLE
62444: LD_INT 1
62446: DEC
62447: ST_TO_ADDR
62448: LD_INT 3
62450: PUSH
62451: FOR_TO
62452: IFFALSE 62483
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62454: LD_VAR 0 1
62458: PPUSH
62459: CALL_OW 250
62463: PPUSH
62464: LD_VAR 0 1
62468: PPUSH
62469: CALL_OW 251
62473: PPUSH
62474: LD_INT 1
62476: PPUSH
62477: CALL_OW 453
62481: GO 62451
62483: POP
62484: POP
// end ;
62485: LD_VAR 0 2
62489: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62490: LD_INT 0
62492: PPUSH
62493: PPUSH
62494: PPUSH
62495: PPUSH
62496: PPUSH
62497: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62498: LD_VAR 0 1
62502: NOT
62503: PUSH
62504: LD_VAR 0 2
62508: NOT
62509: OR
62510: PUSH
62511: LD_VAR 0 1
62515: PPUSH
62516: CALL_OW 314
62520: OR
62521: IFFALSE 62525
// exit ;
62523: GO 62966
// x := GetX ( enemy_unit ) ;
62525: LD_ADDR_VAR 0 7
62529: PUSH
62530: LD_VAR 0 2
62534: PPUSH
62535: CALL_OW 250
62539: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62540: LD_ADDR_VAR 0 8
62544: PUSH
62545: LD_VAR 0 2
62549: PPUSH
62550: CALL_OW 251
62554: ST_TO_ADDR
// if not x or not y then
62555: LD_VAR 0 7
62559: NOT
62560: PUSH
62561: LD_VAR 0 8
62565: NOT
62566: OR
62567: IFFALSE 62571
// exit ;
62569: GO 62966
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62571: LD_ADDR_VAR 0 6
62575: PUSH
62576: LD_VAR 0 7
62580: PPUSH
62581: LD_INT 0
62583: PPUSH
62584: LD_INT 4
62586: PPUSH
62587: CALL_OW 272
62591: PUSH
62592: LD_VAR 0 8
62596: PPUSH
62597: LD_INT 0
62599: PPUSH
62600: LD_INT 4
62602: PPUSH
62603: CALL_OW 273
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_VAR 0 7
62616: PPUSH
62617: LD_INT 1
62619: PPUSH
62620: LD_INT 4
62622: PPUSH
62623: CALL_OW 272
62627: PUSH
62628: LD_VAR 0 8
62632: PPUSH
62633: LD_INT 1
62635: PPUSH
62636: LD_INT 4
62638: PPUSH
62639: CALL_OW 273
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_VAR 0 7
62652: PPUSH
62653: LD_INT 2
62655: PPUSH
62656: LD_INT 4
62658: PPUSH
62659: CALL_OW 272
62663: PUSH
62664: LD_VAR 0 8
62668: PPUSH
62669: LD_INT 2
62671: PPUSH
62672: LD_INT 4
62674: PPUSH
62675: CALL_OW 273
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_VAR 0 7
62688: PPUSH
62689: LD_INT 3
62691: PPUSH
62692: LD_INT 4
62694: PPUSH
62695: CALL_OW 272
62699: PUSH
62700: LD_VAR 0 8
62704: PPUSH
62705: LD_INT 3
62707: PPUSH
62708: LD_INT 4
62710: PPUSH
62711: CALL_OW 273
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_VAR 0 7
62724: PPUSH
62725: LD_INT 4
62727: PPUSH
62728: LD_INT 4
62730: PPUSH
62731: CALL_OW 272
62735: PUSH
62736: LD_VAR 0 8
62740: PPUSH
62741: LD_INT 4
62743: PPUSH
62744: LD_INT 4
62746: PPUSH
62747: CALL_OW 273
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_VAR 0 7
62760: PPUSH
62761: LD_INT 5
62763: PPUSH
62764: LD_INT 4
62766: PPUSH
62767: CALL_OW 272
62771: PUSH
62772: LD_VAR 0 8
62776: PPUSH
62777: LD_INT 5
62779: PPUSH
62780: LD_INT 4
62782: PPUSH
62783: CALL_OW 273
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: ST_TO_ADDR
// for i = tmp downto 1 do
62800: LD_ADDR_VAR 0 4
62804: PUSH
62805: DOUBLE
62806: LD_VAR 0 6
62810: INC
62811: ST_TO_ADDR
62812: LD_INT 1
62814: PUSH
62815: FOR_DOWNTO
62816: IFFALSE 62917
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62818: LD_VAR 0 6
62822: PUSH
62823: LD_VAR 0 4
62827: ARRAY
62828: PUSH
62829: LD_INT 1
62831: ARRAY
62832: PPUSH
62833: LD_VAR 0 6
62837: PUSH
62838: LD_VAR 0 4
62842: ARRAY
62843: PUSH
62844: LD_INT 2
62846: ARRAY
62847: PPUSH
62848: CALL_OW 488
62852: NOT
62853: PUSH
62854: LD_VAR 0 6
62858: PUSH
62859: LD_VAR 0 4
62863: ARRAY
62864: PUSH
62865: LD_INT 1
62867: ARRAY
62868: PPUSH
62869: LD_VAR 0 6
62873: PUSH
62874: LD_VAR 0 4
62878: ARRAY
62879: PUSH
62880: LD_INT 2
62882: ARRAY
62883: PPUSH
62884: CALL_OW 428
62888: PUSH
62889: LD_INT 0
62891: NONEQUAL
62892: OR
62893: IFFALSE 62915
// tmp := Delete ( tmp , i ) ;
62895: LD_ADDR_VAR 0 6
62899: PUSH
62900: LD_VAR 0 6
62904: PPUSH
62905: LD_VAR 0 4
62909: PPUSH
62910: CALL_OW 3
62914: ST_TO_ADDR
62915: GO 62815
62917: POP
62918: POP
// j := GetClosestHex ( unit , tmp ) ;
62919: LD_ADDR_VAR 0 5
62923: PUSH
62924: LD_VAR 0 1
62928: PPUSH
62929: LD_VAR 0 6
62933: PPUSH
62934: CALL 62219 0 2
62938: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62939: LD_VAR 0 1
62943: PPUSH
62944: LD_VAR 0 5
62948: PUSH
62949: LD_INT 1
62951: ARRAY
62952: PPUSH
62953: LD_VAR 0 5
62957: PUSH
62958: LD_INT 2
62960: ARRAY
62961: PPUSH
62962: CALL_OW 111
// end ;
62966: LD_VAR 0 3
62970: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62971: LD_INT 0
62973: PPUSH
62974: PPUSH
62975: PPUSH
// uc_side = 0 ;
62976: LD_ADDR_OWVAR 20
62980: PUSH
62981: LD_INT 0
62983: ST_TO_ADDR
// uc_nation = 0 ;
62984: LD_ADDR_OWVAR 21
62988: PUSH
62989: LD_INT 0
62991: ST_TO_ADDR
// InitHc_All ( ) ;
62992: CALL_OW 584
// InitVc ;
62996: CALL_OW 20
// if mastodonts then
63000: LD_VAR 0 6
63004: IFFALSE 63071
// for i = 1 to mastodonts do
63006: LD_ADDR_VAR 0 11
63010: PUSH
63011: DOUBLE
63012: LD_INT 1
63014: DEC
63015: ST_TO_ADDR
63016: LD_VAR 0 6
63020: PUSH
63021: FOR_TO
63022: IFFALSE 63069
// begin vc_chassis := 31 ;
63024: LD_ADDR_OWVAR 37
63028: PUSH
63029: LD_INT 31
63031: ST_TO_ADDR
// vc_control := control_rider ;
63032: LD_ADDR_OWVAR 38
63036: PUSH
63037: LD_INT 4
63039: ST_TO_ADDR
// animal := CreateVehicle ;
63040: LD_ADDR_VAR 0 12
63044: PUSH
63045: CALL_OW 45
63049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63050: LD_VAR 0 12
63054: PPUSH
63055: LD_VAR 0 8
63059: PPUSH
63060: LD_INT 0
63062: PPUSH
63063: CALL 65259 0 3
// end ;
63067: GO 63021
63069: POP
63070: POP
// if horses then
63071: LD_VAR 0 5
63075: IFFALSE 63142
// for i = 1 to horses do
63077: LD_ADDR_VAR 0 11
63081: PUSH
63082: DOUBLE
63083: LD_INT 1
63085: DEC
63086: ST_TO_ADDR
63087: LD_VAR 0 5
63091: PUSH
63092: FOR_TO
63093: IFFALSE 63140
// begin hc_class := 21 ;
63095: LD_ADDR_OWVAR 28
63099: PUSH
63100: LD_INT 21
63102: ST_TO_ADDR
// hc_gallery :=  ;
63103: LD_ADDR_OWVAR 33
63107: PUSH
63108: LD_STRING 
63110: ST_TO_ADDR
// animal := CreateHuman ;
63111: LD_ADDR_VAR 0 12
63115: PUSH
63116: CALL_OW 44
63120: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63121: LD_VAR 0 12
63125: PPUSH
63126: LD_VAR 0 8
63130: PPUSH
63131: LD_INT 0
63133: PPUSH
63134: CALL 65259 0 3
// end ;
63138: GO 63092
63140: POP
63141: POP
// if birds then
63142: LD_VAR 0 1
63146: IFFALSE 63213
// for i = 1 to birds do
63148: LD_ADDR_VAR 0 11
63152: PUSH
63153: DOUBLE
63154: LD_INT 1
63156: DEC
63157: ST_TO_ADDR
63158: LD_VAR 0 1
63162: PUSH
63163: FOR_TO
63164: IFFALSE 63211
// begin hc_class = 18 ;
63166: LD_ADDR_OWVAR 28
63170: PUSH
63171: LD_INT 18
63173: ST_TO_ADDR
// hc_gallery =  ;
63174: LD_ADDR_OWVAR 33
63178: PUSH
63179: LD_STRING 
63181: ST_TO_ADDR
// animal := CreateHuman ;
63182: LD_ADDR_VAR 0 12
63186: PUSH
63187: CALL_OW 44
63191: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63192: LD_VAR 0 12
63196: PPUSH
63197: LD_VAR 0 8
63201: PPUSH
63202: LD_INT 0
63204: PPUSH
63205: CALL 65259 0 3
// end ;
63209: GO 63163
63211: POP
63212: POP
// if tigers then
63213: LD_VAR 0 2
63217: IFFALSE 63301
// for i = 1 to tigers do
63219: LD_ADDR_VAR 0 11
63223: PUSH
63224: DOUBLE
63225: LD_INT 1
63227: DEC
63228: ST_TO_ADDR
63229: LD_VAR 0 2
63233: PUSH
63234: FOR_TO
63235: IFFALSE 63299
// begin hc_class = class_tiger ;
63237: LD_ADDR_OWVAR 28
63241: PUSH
63242: LD_INT 14
63244: ST_TO_ADDR
// hc_gallery =  ;
63245: LD_ADDR_OWVAR 33
63249: PUSH
63250: LD_STRING 
63252: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63253: LD_ADDR_OWVAR 35
63257: PUSH
63258: LD_INT 7
63260: NEG
63261: PPUSH
63262: LD_INT 7
63264: PPUSH
63265: CALL_OW 12
63269: ST_TO_ADDR
// animal := CreateHuman ;
63270: LD_ADDR_VAR 0 12
63274: PUSH
63275: CALL_OW 44
63279: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63280: LD_VAR 0 12
63284: PPUSH
63285: LD_VAR 0 8
63289: PPUSH
63290: LD_INT 0
63292: PPUSH
63293: CALL 65259 0 3
// end ;
63297: GO 63234
63299: POP
63300: POP
// if apemans then
63301: LD_VAR 0 3
63305: IFFALSE 63428
// for i = 1 to apemans do
63307: LD_ADDR_VAR 0 11
63311: PUSH
63312: DOUBLE
63313: LD_INT 1
63315: DEC
63316: ST_TO_ADDR
63317: LD_VAR 0 3
63321: PUSH
63322: FOR_TO
63323: IFFALSE 63426
// begin hc_class = class_apeman ;
63325: LD_ADDR_OWVAR 28
63329: PUSH
63330: LD_INT 12
63332: ST_TO_ADDR
// hc_gallery =  ;
63333: LD_ADDR_OWVAR 33
63337: PUSH
63338: LD_STRING 
63340: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
63341: LD_ADDR_OWVAR 35
63345: PUSH
63346: LD_INT 5
63348: NEG
63349: PPUSH
63350: LD_INT 5
63352: PPUSH
63353: CALL_OW 12
63357: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63358: LD_ADDR_OWVAR 31
63362: PUSH
63363: LD_INT 1
63365: PPUSH
63366: LD_INT 3
63368: PPUSH
63369: CALL_OW 12
63373: PUSH
63374: LD_INT 1
63376: PPUSH
63377: LD_INT 3
63379: PPUSH
63380: CALL_OW 12
63384: PUSH
63385: LD_INT 0
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: ST_TO_ADDR
// animal := CreateHuman ;
63397: LD_ADDR_VAR 0 12
63401: PUSH
63402: CALL_OW 44
63406: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63407: LD_VAR 0 12
63411: PPUSH
63412: LD_VAR 0 8
63416: PPUSH
63417: LD_INT 0
63419: PPUSH
63420: CALL 65259 0 3
// end ;
63424: GO 63322
63426: POP
63427: POP
// if enchidnas then
63428: LD_VAR 0 4
63432: IFFALSE 63499
// for i = 1 to enchidnas do
63434: LD_ADDR_VAR 0 11
63438: PUSH
63439: DOUBLE
63440: LD_INT 1
63442: DEC
63443: ST_TO_ADDR
63444: LD_VAR 0 4
63448: PUSH
63449: FOR_TO
63450: IFFALSE 63497
// begin hc_class = 13 ;
63452: LD_ADDR_OWVAR 28
63456: PUSH
63457: LD_INT 13
63459: ST_TO_ADDR
// hc_gallery =  ;
63460: LD_ADDR_OWVAR 33
63464: PUSH
63465: LD_STRING 
63467: ST_TO_ADDR
// animal := CreateHuman ;
63468: LD_ADDR_VAR 0 12
63472: PUSH
63473: CALL_OW 44
63477: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63478: LD_VAR 0 12
63482: PPUSH
63483: LD_VAR 0 8
63487: PPUSH
63488: LD_INT 0
63490: PPUSH
63491: CALL 65259 0 3
// end ;
63495: GO 63449
63497: POP
63498: POP
// if fishes then
63499: LD_VAR 0 7
63503: IFFALSE 63570
// for i = 1 to fishes do
63505: LD_ADDR_VAR 0 11
63509: PUSH
63510: DOUBLE
63511: LD_INT 1
63513: DEC
63514: ST_TO_ADDR
63515: LD_VAR 0 7
63519: PUSH
63520: FOR_TO
63521: IFFALSE 63568
// begin hc_class = 20 ;
63523: LD_ADDR_OWVAR 28
63527: PUSH
63528: LD_INT 20
63530: ST_TO_ADDR
// hc_gallery =  ;
63531: LD_ADDR_OWVAR 33
63535: PUSH
63536: LD_STRING 
63538: ST_TO_ADDR
// animal := CreateHuman ;
63539: LD_ADDR_VAR 0 12
63543: PUSH
63544: CALL_OW 44
63548: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63549: LD_VAR 0 12
63553: PPUSH
63554: LD_VAR 0 9
63558: PPUSH
63559: LD_INT 0
63561: PPUSH
63562: CALL 65259 0 3
// end ;
63566: GO 63520
63568: POP
63569: POP
// end ;
63570: LD_VAR 0 10
63574: RET
// export function WantHeal ( sci , unit ) ; begin
63575: LD_INT 0
63577: PPUSH
// if GetTaskList ( sci ) > 0 then
63578: LD_VAR 0 1
63582: PPUSH
63583: CALL_OW 437
63587: PUSH
63588: LD_INT 0
63590: GREATER
63591: IFFALSE 63661
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63593: LD_VAR 0 1
63597: PPUSH
63598: CALL_OW 437
63602: PUSH
63603: LD_INT 1
63605: ARRAY
63606: PUSH
63607: LD_INT 1
63609: ARRAY
63610: PUSH
63611: LD_STRING l
63613: EQUAL
63614: PUSH
63615: LD_VAR 0 1
63619: PPUSH
63620: CALL_OW 437
63624: PUSH
63625: LD_INT 1
63627: ARRAY
63628: PUSH
63629: LD_INT 4
63631: ARRAY
63632: PUSH
63633: LD_VAR 0 2
63637: EQUAL
63638: AND
63639: IFFALSE 63651
// result := true else
63641: LD_ADDR_VAR 0 3
63645: PUSH
63646: LD_INT 1
63648: ST_TO_ADDR
63649: GO 63659
// result := false ;
63651: LD_ADDR_VAR 0 3
63655: PUSH
63656: LD_INT 0
63658: ST_TO_ADDR
// end else
63659: GO 63669
// result := false ;
63661: LD_ADDR_VAR 0 3
63665: PUSH
63666: LD_INT 0
63668: ST_TO_ADDR
// end ;
63669: LD_VAR 0 3
63673: RET
// export function HealTarget ( sci ) ; begin
63674: LD_INT 0
63676: PPUSH
// if not sci then
63677: LD_VAR 0 1
63681: NOT
63682: IFFALSE 63686
// exit ;
63684: GO 63751
// result := 0 ;
63686: LD_ADDR_VAR 0 2
63690: PUSH
63691: LD_INT 0
63693: ST_TO_ADDR
// if GetTaskList ( sci ) then
63694: LD_VAR 0 1
63698: PPUSH
63699: CALL_OW 437
63703: IFFALSE 63751
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63705: LD_VAR 0 1
63709: PPUSH
63710: CALL_OW 437
63714: PUSH
63715: LD_INT 1
63717: ARRAY
63718: PUSH
63719: LD_INT 1
63721: ARRAY
63722: PUSH
63723: LD_STRING l
63725: EQUAL
63726: IFFALSE 63751
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63728: LD_ADDR_VAR 0 2
63732: PUSH
63733: LD_VAR 0 1
63737: PPUSH
63738: CALL_OW 437
63742: PUSH
63743: LD_INT 1
63745: ARRAY
63746: PUSH
63747: LD_INT 4
63749: ARRAY
63750: ST_TO_ADDR
// end ;
63751: LD_VAR 0 2
63755: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63756: LD_INT 0
63758: PPUSH
63759: PPUSH
63760: PPUSH
63761: PPUSH
// if not base_units then
63762: LD_VAR 0 1
63766: NOT
63767: IFFALSE 63771
// exit ;
63769: GO 63858
// result := false ;
63771: LD_ADDR_VAR 0 2
63775: PUSH
63776: LD_INT 0
63778: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63779: LD_ADDR_VAR 0 5
63783: PUSH
63784: LD_VAR 0 1
63788: PPUSH
63789: LD_INT 21
63791: PUSH
63792: LD_INT 3
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PPUSH
63799: CALL_OW 72
63803: ST_TO_ADDR
// if not tmp then
63804: LD_VAR 0 5
63808: NOT
63809: IFFALSE 63813
// exit ;
63811: GO 63858
// for i in tmp do
63813: LD_ADDR_VAR 0 3
63817: PUSH
63818: LD_VAR 0 5
63822: PUSH
63823: FOR_IN
63824: IFFALSE 63856
// begin result := EnemyInRange ( i , 22 ) ;
63826: LD_ADDR_VAR 0 2
63830: PUSH
63831: LD_VAR 0 3
63835: PPUSH
63836: LD_INT 22
63838: PPUSH
63839: CALL 62094 0 2
63843: ST_TO_ADDR
// if result then
63844: LD_VAR 0 2
63848: IFFALSE 63854
// exit ;
63850: POP
63851: POP
63852: GO 63858
// end ;
63854: GO 63823
63856: POP
63857: POP
// end ;
63858: LD_VAR 0 2
63862: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63863: LD_INT 0
63865: PPUSH
63866: PPUSH
// if not units then
63867: LD_VAR 0 1
63871: NOT
63872: IFFALSE 63876
// exit ;
63874: GO 63946
// result := [ ] ;
63876: LD_ADDR_VAR 0 3
63880: PUSH
63881: EMPTY
63882: ST_TO_ADDR
// for i in units do
63883: LD_ADDR_VAR 0 4
63887: PUSH
63888: LD_VAR 0 1
63892: PUSH
63893: FOR_IN
63894: IFFALSE 63944
// if GetTag ( i ) = tag then
63896: LD_VAR 0 4
63900: PPUSH
63901: CALL_OW 110
63905: PUSH
63906: LD_VAR 0 2
63910: EQUAL
63911: IFFALSE 63942
// result := Insert ( result , result + 1 , i ) ;
63913: LD_ADDR_VAR 0 3
63917: PUSH
63918: LD_VAR 0 3
63922: PPUSH
63923: LD_VAR 0 3
63927: PUSH
63928: LD_INT 1
63930: PLUS
63931: PPUSH
63932: LD_VAR 0 4
63936: PPUSH
63937: CALL_OW 2
63941: ST_TO_ADDR
63942: GO 63893
63944: POP
63945: POP
// end ;
63946: LD_VAR 0 3
63950: RET
// export function IsDriver ( un ) ; begin
63951: LD_INT 0
63953: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63954: LD_ADDR_VAR 0 2
63958: PUSH
63959: LD_VAR 0 1
63963: PUSH
63964: LD_INT 55
63966: PUSH
63967: EMPTY
63968: LIST
63969: PPUSH
63970: CALL_OW 69
63974: IN
63975: ST_TO_ADDR
// end ;
63976: LD_VAR 0 2
63980: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63981: LD_INT 0
63983: PPUSH
63984: PPUSH
// list := [ ] ;
63985: LD_ADDR_VAR 0 5
63989: PUSH
63990: EMPTY
63991: ST_TO_ADDR
// case d of 0 :
63992: LD_VAR 0 3
63996: PUSH
63997: LD_INT 0
63999: DOUBLE
64000: EQUAL
64001: IFTRUE 64005
64003: GO 64138
64005: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64006: LD_ADDR_VAR 0 5
64010: PUSH
64011: LD_VAR 0 1
64015: PUSH
64016: LD_INT 4
64018: MINUS
64019: PUSH
64020: LD_VAR 0 2
64024: PUSH
64025: LD_INT 4
64027: MINUS
64028: PUSH
64029: LD_INT 2
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: LIST
64036: PUSH
64037: LD_VAR 0 1
64041: PUSH
64042: LD_INT 3
64044: MINUS
64045: PUSH
64046: LD_VAR 0 2
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: LIST
64058: PUSH
64059: LD_VAR 0 1
64063: PUSH
64064: LD_INT 4
64066: PLUS
64067: PUSH
64068: LD_VAR 0 2
64072: PUSH
64073: LD_INT 4
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: LIST
64080: PUSH
64081: LD_VAR 0 1
64085: PUSH
64086: LD_INT 3
64088: PLUS
64089: PUSH
64090: LD_VAR 0 2
64094: PUSH
64095: LD_INT 3
64097: PLUS
64098: PUSH
64099: LD_INT 5
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: LIST
64106: PUSH
64107: LD_VAR 0 1
64111: PUSH
64112: LD_VAR 0 2
64116: PUSH
64117: LD_INT 4
64119: PLUS
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: LIST
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: ST_TO_ADDR
// end ; 1 :
64136: GO 64836
64138: LD_INT 1
64140: DOUBLE
64141: EQUAL
64142: IFTRUE 64146
64144: GO 64279
64146: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64147: LD_ADDR_VAR 0 5
64151: PUSH
64152: LD_VAR 0 1
64156: PUSH
64157: LD_VAR 0 2
64161: PUSH
64162: LD_INT 4
64164: MINUS
64165: PUSH
64166: LD_INT 3
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: LIST
64173: PUSH
64174: LD_VAR 0 1
64178: PUSH
64179: LD_INT 3
64181: MINUS
64182: PUSH
64183: LD_VAR 0 2
64187: PUSH
64188: LD_INT 3
64190: MINUS
64191: PUSH
64192: LD_INT 2
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: LIST
64199: PUSH
64200: LD_VAR 0 1
64204: PUSH
64205: LD_INT 4
64207: MINUS
64208: PUSH
64209: LD_VAR 0 2
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: LIST
64221: PUSH
64222: LD_VAR 0 1
64226: PUSH
64227: LD_VAR 0 2
64231: PUSH
64232: LD_INT 3
64234: PLUS
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: LIST
64243: PUSH
64244: LD_VAR 0 1
64248: PUSH
64249: LD_INT 4
64251: PLUS
64252: PUSH
64253: LD_VAR 0 2
64257: PUSH
64258: LD_INT 4
64260: PLUS
64261: PUSH
64262: LD_INT 5
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: LIST
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: ST_TO_ADDR
// end ; 2 :
64277: GO 64836
64279: LD_INT 2
64281: DOUBLE
64282: EQUAL
64283: IFTRUE 64287
64285: GO 64416
64287: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64288: LD_ADDR_VAR 0 5
64292: PUSH
64293: LD_VAR 0 1
64297: PUSH
64298: LD_VAR 0 2
64302: PUSH
64303: LD_INT 3
64305: MINUS
64306: PUSH
64307: LD_INT 3
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: LIST
64314: PUSH
64315: LD_VAR 0 1
64319: PUSH
64320: LD_INT 4
64322: PLUS
64323: PUSH
64324: LD_VAR 0 2
64328: PUSH
64329: LD_INT 4
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: LIST
64336: PUSH
64337: LD_VAR 0 1
64341: PUSH
64342: LD_VAR 0 2
64346: PUSH
64347: LD_INT 4
64349: PLUS
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: LIST
64358: PUSH
64359: LD_VAR 0 1
64363: PUSH
64364: LD_INT 3
64366: MINUS
64367: PUSH
64368: LD_VAR 0 2
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: LIST
64380: PUSH
64381: LD_VAR 0 1
64385: PUSH
64386: LD_INT 4
64388: MINUS
64389: PUSH
64390: LD_VAR 0 2
64394: PUSH
64395: LD_INT 4
64397: MINUS
64398: PUSH
64399: LD_INT 2
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: LIST
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: ST_TO_ADDR
// end ; 3 :
64414: GO 64836
64416: LD_INT 3
64418: DOUBLE
64419: EQUAL
64420: IFTRUE 64424
64422: GO 64557
64424: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64425: LD_ADDR_VAR 0 5
64429: PUSH
64430: LD_VAR 0 1
64434: PUSH
64435: LD_INT 3
64437: PLUS
64438: PUSH
64439: LD_VAR 0 2
64443: PUSH
64444: LD_INT 4
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: LIST
64451: PUSH
64452: LD_VAR 0 1
64456: PUSH
64457: LD_INT 4
64459: PLUS
64460: PUSH
64461: LD_VAR 0 2
64465: PUSH
64466: LD_INT 4
64468: PLUS
64469: PUSH
64470: LD_INT 5
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: LIST
64477: PUSH
64478: LD_VAR 0 1
64482: PUSH
64483: LD_INT 4
64485: MINUS
64486: PUSH
64487: LD_VAR 0 2
64491: PUSH
64492: LD_INT 1
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: LIST
64499: PUSH
64500: LD_VAR 0 1
64504: PUSH
64505: LD_VAR 0 2
64509: PUSH
64510: LD_INT 4
64512: MINUS
64513: PUSH
64514: LD_INT 3
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: LIST
64521: PUSH
64522: LD_VAR 0 1
64526: PUSH
64527: LD_INT 3
64529: MINUS
64530: PUSH
64531: LD_VAR 0 2
64535: PUSH
64536: LD_INT 3
64538: MINUS
64539: PUSH
64540: LD_INT 2
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: LIST
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: ST_TO_ADDR
// end ; 4 :
64555: GO 64836
64557: LD_INT 4
64559: DOUBLE
64560: EQUAL
64561: IFTRUE 64565
64563: GO 64698
64565: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64566: LD_ADDR_VAR 0 5
64570: PUSH
64571: LD_VAR 0 1
64575: PUSH
64576: LD_VAR 0 2
64580: PUSH
64581: LD_INT 4
64583: PLUS
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: PUSH
64593: LD_VAR 0 1
64597: PUSH
64598: LD_INT 3
64600: PLUS
64601: PUSH
64602: LD_VAR 0 2
64606: PUSH
64607: LD_INT 3
64609: PLUS
64610: PUSH
64611: LD_INT 5
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: LIST
64618: PUSH
64619: LD_VAR 0 1
64623: PUSH
64624: LD_INT 4
64626: PLUS
64627: PUSH
64628: LD_VAR 0 2
64632: PUSH
64633: LD_INT 4
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: LIST
64640: PUSH
64641: LD_VAR 0 1
64645: PUSH
64646: LD_VAR 0 2
64650: PUSH
64651: LD_INT 3
64653: MINUS
64654: PUSH
64655: LD_INT 3
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: LIST
64662: PUSH
64663: LD_VAR 0 1
64667: PUSH
64668: LD_INT 4
64670: MINUS
64671: PUSH
64672: LD_VAR 0 2
64676: PUSH
64677: LD_INT 4
64679: MINUS
64680: PUSH
64681: LD_INT 2
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: LIST
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: ST_TO_ADDR
// end ; 5 :
64696: GO 64836
64698: LD_INT 5
64700: DOUBLE
64701: EQUAL
64702: IFTRUE 64706
64704: GO 64835
64706: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64707: LD_ADDR_VAR 0 5
64711: PUSH
64712: LD_VAR 0 1
64716: PUSH
64717: LD_INT 4
64719: MINUS
64720: PUSH
64721: LD_VAR 0 2
64725: PUSH
64726: LD_INT 1
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: LIST
64733: PUSH
64734: LD_VAR 0 1
64738: PUSH
64739: LD_VAR 0 2
64743: PUSH
64744: LD_INT 4
64746: MINUS
64747: PUSH
64748: LD_INT 3
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: LIST
64755: PUSH
64756: LD_VAR 0 1
64760: PUSH
64761: LD_INT 4
64763: PLUS
64764: PUSH
64765: LD_VAR 0 2
64769: PUSH
64770: LD_INT 4
64772: PLUS
64773: PUSH
64774: LD_INT 5
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: LIST
64781: PUSH
64782: LD_VAR 0 1
64786: PUSH
64787: LD_INT 3
64789: PLUS
64790: PUSH
64791: LD_VAR 0 2
64795: PUSH
64796: LD_INT 4
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: LIST
64803: PUSH
64804: LD_VAR 0 1
64808: PUSH
64809: LD_VAR 0 2
64813: PUSH
64814: LD_INT 3
64816: PLUS
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: LIST
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: ST_TO_ADDR
// end ; end ;
64833: GO 64836
64835: POP
// result := list ;
64836: LD_ADDR_VAR 0 4
64840: PUSH
64841: LD_VAR 0 5
64845: ST_TO_ADDR
// end ;
64846: LD_VAR 0 4
64850: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64851: LD_INT 0
64853: PPUSH
64854: PPUSH
64855: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64856: LD_VAR 0 1
64860: NOT
64861: PUSH
64862: LD_VAR 0 2
64866: PUSH
64867: LD_INT 1
64869: PUSH
64870: LD_INT 2
64872: PUSH
64873: LD_INT 3
64875: PUSH
64876: LD_INT 4
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: IN
64885: NOT
64886: OR
64887: IFFALSE 64891
// exit ;
64889: GO 64983
// tmp := [ ] ;
64891: LD_ADDR_VAR 0 5
64895: PUSH
64896: EMPTY
64897: ST_TO_ADDR
// for i in units do
64898: LD_ADDR_VAR 0 4
64902: PUSH
64903: LD_VAR 0 1
64907: PUSH
64908: FOR_IN
64909: IFFALSE 64952
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64911: LD_ADDR_VAR 0 5
64915: PUSH
64916: LD_VAR 0 5
64920: PPUSH
64921: LD_VAR 0 5
64925: PUSH
64926: LD_INT 1
64928: PLUS
64929: PPUSH
64930: LD_VAR 0 4
64934: PPUSH
64935: LD_VAR 0 2
64939: PPUSH
64940: CALL_OW 259
64944: PPUSH
64945: CALL_OW 2
64949: ST_TO_ADDR
64950: GO 64908
64952: POP
64953: POP
// if not tmp then
64954: LD_VAR 0 5
64958: NOT
64959: IFFALSE 64963
// exit ;
64961: GO 64983
// result := SortListByListDesc ( units , tmp ) ;
64963: LD_ADDR_VAR 0 3
64967: PUSH
64968: LD_VAR 0 1
64972: PPUSH
64973: LD_VAR 0 5
64977: PPUSH
64978: CALL_OW 77
64982: ST_TO_ADDR
// end ;
64983: LD_VAR 0 3
64987: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64988: LD_INT 0
64990: PPUSH
64991: PPUSH
64992: PPUSH
// result := false ;
64993: LD_ADDR_VAR 0 3
64997: PUSH
64998: LD_INT 0
65000: ST_TO_ADDR
// x := GetX ( building ) ;
65001: LD_ADDR_VAR 0 4
65005: PUSH
65006: LD_VAR 0 2
65010: PPUSH
65011: CALL_OW 250
65015: ST_TO_ADDR
// y := GetY ( building ) ;
65016: LD_ADDR_VAR 0 5
65020: PUSH
65021: LD_VAR 0 2
65025: PPUSH
65026: CALL_OW 251
65030: ST_TO_ADDR
// if not building or not x or not y then
65031: LD_VAR 0 2
65035: NOT
65036: PUSH
65037: LD_VAR 0 4
65041: NOT
65042: OR
65043: PUSH
65044: LD_VAR 0 5
65048: NOT
65049: OR
65050: IFFALSE 65054
// exit ;
65052: GO 65146
// if GetTaskList ( unit ) then
65054: LD_VAR 0 1
65058: PPUSH
65059: CALL_OW 437
65063: IFFALSE 65146
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65065: LD_STRING e
65067: PUSH
65068: LD_VAR 0 1
65072: PPUSH
65073: CALL_OW 437
65077: PUSH
65078: LD_INT 1
65080: ARRAY
65081: PUSH
65082: LD_INT 1
65084: ARRAY
65085: EQUAL
65086: PUSH
65087: LD_VAR 0 4
65091: PUSH
65092: LD_VAR 0 1
65096: PPUSH
65097: CALL_OW 437
65101: PUSH
65102: LD_INT 1
65104: ARRAY
65105: PUSH
65106: LD_INT 2
65108: ARRAY
65109: EQUAL
65110: AND
65111: PUSH
65112: LD_VAR 0 5
65116: PUSH
65117: LD_VAR 0 1
65121: PPUSH
65122: CALL_OW 437
65126: PUSH
65127: LD_INT 1
65129: ARRAY
65130: PUSH
65131: LD_INT 3
65133: ARRAY
65134: EQUAL
65135: AND
65136: IFFALSE 65146
// result := true end ;
65138: LD_ADDR_VAR 0 3
65142: PUSH
65143: LD_INT 1
65145: ST_TO_ADDR
// end ;
65146: LD_VAR 0 3
65150: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65151: LD_INT 0
65153: PPUSH
// result := false ;
65154: LD_ADDR_VAR 0 4
65158: PUSH
65159: LD_INT 0
65161: ST_TO_ADDR
// if GetTaskList ( unit ) then
65162: LD_VAR 0 1
65166: PPUSH
65167: CALL_OW 437
65171: IFFALSE 65254
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65173: LD_STRING M
65175: PUSH
65176: LD_VAR 0 1
65180: PPUSH
65181: CALL_OW 437
65185: PUSH
65186: LD_INT 1
65188: ARRAY
65189: PUSH
65190: LD_INT 1
65192: ARRAY
65193: EQUAL
65194: PUSH
65195: LD_VAR 0 2
65199: PUSH
65200: LD_VAR 0 1
65204: PPUSH
65205: CALL_OW 437
65209: PUSH
65210: LD_INT 1
65212: ARRAY
65213: PUSH
65214: LD_INT 2
65216: ARRAY
65217: EQUAL
65218: AND
65219: PUSH
65220: LD_VAR 0 3
65224: PUSH
65225: LD_VAR 0 1
65229: PPUSH
65230: CALL_OW 437
65234: PUSH
65235: LD_INT 1
65237: ARRAY
65238: PUSH
65239: LD_INT 3
65241: ARRAY
65242: EQUAL
65243: AND
65244: IFFALSE 65254
// result := true ;
65246: LD_ADDR_VAR 0 4
65250: PUSH
65251: LD_INT 1
65253: ST_TO_ADDR
// end ; end ;
65254: LD_VAR 0 4
65258: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65259: LD_INT 0
65261: PPUSH
65262: PPUSH
65263: PPUSH
65264: PPUSH
// if not unit or not area then
65265: LD_VAR 0 1
65269: NOT
65270: PUSH
65271: LD_VAR 0 2
65275: NOT
65276: OR
65277: IFFALSE 65281
// exit ;
65279: GO 65445
// tmp := AreaToList ( area , i ) ;
65281: LD_ADDR_VAR 0 6
65285: PUSH
65286: LD_VAR 0 2
65290: PPUSH
65291: LD_VAR 0 5
65295: PPUSH
65296: CALL_OW 517
65300: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65301: LD_ADDR_VAR 0 5
65305: PUSH
65306: DOUBLE
65307: LD_INT 1
65309: DEC
65310: ST_TO_ADDR
65311: LD_VAR 0 6
65315: PUSH
65316: LD_INT 1
65318: ARRAY
65319: PUSH
65320: FOR_TO
65321: IFFALSE 65443
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65323: LD_ADDR_VAR 0 7
65327: PUSH
65328: LD_VAR 0 6
65332: PUSH
65333: LD_INT 1
65335: ARRAY
65336: PUSH
65337: LD_VAR 0 5
65341: ARRAY
65342: PUSH
65343: LD_VAR 0 6
65347: PUSH
65348: LD_INT 2
65350: ARRAY
65351: PUSH
65352: LD_VAR 0 5
65356: ARRAY
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65362: LD_VAR 0 7
65366: PUSH
65367: LD_INT 1
65369: ARRAY
65370: PPUSH
65371: LD_VAR 0 7
65375: PUSH
65376: LD_INT 2
65378: ARRAY
65379: PPUSH
65380: CALL_OW 428
65384: PUSH
65385: LD_INT 0
65387: EQUAL
65388: IFFALSE 65441
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65390: LD_VAR 0 1
65394: PPUSH
65395: LD_VAR 0 7
65399: PUSH
65400: LD_INT 1
65402: ARRAY
65403: PPUSH
65404: LD_VAR 0 7
65408: PUSH
65409: LD_INT 2
65411: ARRAY
65412: PPUSH
65413: LD_VAR 0 3
65417: PPUSH
65418: CALL_OW 48
// result := IsPlaced ( unit ) ;
65422: LD_ADDR_VAR 0 4
65426: PUSH
65427: LD_VAR 0 1
65431: PPUSH
65432: CALL_OW 305
65436: ST_TO_ADDR
// exit ;
65437: POP
65438: POP
65439: GO 65445
// end ; end ;
65441: GO 65320
65443: POP
65444: POP
// end ;
65445: LD_VAR 0 4
65449: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65450: LD_INT 0
65452: PPUSH
65453: PPUSH
65454: PPUSH
// if not side or side > 8 then
65455: LD_VAR 0 1
65459: NOT
65460: PUSH
65461: LD_VAR 0 1
65465: PUSH
65466: LD_INT 8
65468: GREATER
65469: OR
65470: IFFALSE 65474
// exit ;
65472: GO 65661
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65474: LD_ADDR_VAR 0 4
65478: PUSH
65479: LD_INT 22
65481: PUSH
65482: LD_VAR 0 1
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 21
65493: PUSH
65494: LD_INT 3
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PPUSH
65505: CALL_OW 69
65509: ST_TO_ADDR
// if not tmp then
65510: LD_VAR 0 4
65514: NOT
65515: IFFALSE 65519
// exit ;
65517: GO 65661
// enable_addtolog := true ;
65519: LD_ADDR_OWVAR 81
65523: PUSH
65524: LD_INT 1
65526: ST_TO_ADDR
// AddToLog ( [ ) ;
65527: LD_STRING [
65529: PPUSH
65530: CALL_OW 561
// for i in tmp do
65534: LD_ADDR_VAR 0 3
65538: PUSH
65539: LD_VAR 0 4
65543: PUSH
65544: FOR_IN
65545: IFFALSE 65652
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65547: LD_STRING [
65549: PUSH
65550: LD_VAR 0 3
65554: PPUSH
65555: CALL_OW 266
65559: STR
65560: PUSH
65561: LD_STRING , 
65563: STR
65564: PUSH
65565: LD_VAR 0 3
65569: PPUSH
65570: CALL_OW 250
65574: STR
65575: PUSH
65576: LD_STRING , 
65578: STR
65579: PUSH
65580: LD_VAR 0 3
65584: PPUSH
65585: CALL_OW 251
65589: STR
65590: PUSH
65591: LD_STRING , 
65593: STR
65594: PUSH
65595: LD_VAR 0 3
65599: PPUSH
65600: CALL_OW 254
65604: STR
65605: PUSH
65606: LD_STRING , 
65608: STR
65609: PUSH
65610: LD_VAR 0 3
65614: PPUSH
65615: LD_INT 1
65617: PPUSH
65618: CALL_OW 268
65622: STR
65623: PUSH
65624: LD_STRING , 
65626: STR
65627: PUSH
65628: LD_VAR 0 3
65632: PPUSH
65633: LD_INT 2
65635: PPUSH
65636: CALL_OW 268
65640: STR
65641: PUSH
65642: LD_STRING ],
65644: STR
65645: PPUSH
65646: CALL_OW 561
// end ;
65650: GO 65544
65652: POP
65653: POP
// AddToLog ( ]; ) ;
65654: LD_STRING ];
65656: PPUSH
65657: CALL_OW 561
// end ;
65661: LD_VAR 0 2
65665: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65666: LD_INT 0
65668: PPUSH
65669: PPUSH
65670: PPUSH
65671: PPUSH
65672: PPUSH
// if not area or not rate or not max then
65673: LD_VAR 0 1
65677: NOT
65678: PUSH
65679: LD_VAR 0 2
65683: NOT
65684: OR
65685: PUSH
65686: LD_VAR 0 4
65690: NOT
65691: OR
65692: IFFALSE 65696
// exit ;
65694: GO 65888
// while 1 do
65696: LD_INT 1
65698: IFFALSE 65888
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65700: LD_ADDR_VAR 0 9
65704: PUSH
65705: LD_VAR 0 1
65709: PPUSH
65710: LD_INT 1
65712: PPUSH
65713: CALL_OW 287
65717: PUSH
65718: LD_INT 10
65720: MUL
65721: ST_TO_ADDR
// r := rate / 10 ;
65722: LD_ADDR_VAR 0 7
65726: PUSH
65727: LD_VAR 0 2
65731: PUSH
65732: LD_INT 10
65734: DIVREAL
65735: ST_TO_ADDR
// time := 1 1$00 ;
65736: LD_ADDR_VAR 0 8
65740: PUSH
65741: LD_INT 2100
65743: ST_TO_ADDR
// if amount < min then
65744: LD_VAR 0 9
65748: PUSH
65749: LD_VAR 0 3
65753: LESS
65754: IFFALSE 65772
// r := r * 2 else
65756: LD_ADDR_VAR 0 7
65760: PUSH
65761: LD_VAR 0 7
65765: PUSH
65766: LD_INT 2
65768: MUL
65769: ST_TO_ADDR
65770: GO 65798
// if amount > max then
65772: LD_VAR 0 9
65776: PUSH
65777: LD_VAR 0 4
65781: GREATER
65782: IFFALSE 65798
// r := r / 2 ;
65784: LD_ADDR_VAR 0 7
65788: PUSH
65789: LD_VAR 0 7
65793: PUSH
65794: LD_INT 2
65796: DIVREAL
65797: ST_TO_ADDR
// time := time / r ;
65798: LD_ADDR_VAR 0 8
65802: PUSH
65803: LD_VAR 0 8
65807: PUSH
65808: LD_VAR 0 7
65812: DIVREAL
65813: ST_TO_ADDR
// if time < 0 then
65814: LD_VAR 0 8
65818: PUSH
65819: LD_INT 0
65821: LESS
65822: IFFALSE 65839
// time := time * - 1 ;
65824: LD_ADDR_VAR 0 8
65828: PUSH
65829: LD_VAR 0 8
65833: PUSH
65834: LD_INT 1
65836: NEG
65837: MUL
65838: ST_TO_ADDR
// wait ( time ) ;
65839: LD_VAR 0 8
65843: PPUSH
65844: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65848: LD_INT 35
65850: PPUSH
65851: LD_INT 875
65853: PPUSH
65854: CALL_OW 12
65858: PPUSH
65859: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65863: LD_INT 1
65865: PPUSH
65866: LD_INT 5
65868: PPUSH
65869: CALL_OW 12
65873: PPUSH
65874: LD_VAR 0 1
65878: PPUSH
65879: LD_INT 1
65881: PPUSH
65882: CALL_OW 55
// end ;
65886: GO 65696
// end ;
65888: LD_VAR 0 5
65892: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65893: LD_INT 0
65895: PPUSH
65896: PPUSH
65897: PPUSH
65898: PPUSH
65899: PPUSH
65900: PPUSH
65901: PPUSH
65902: PPUSH
// if not turrets or not factories then
65903: LD_VAR 0 1
65907: NOT
65908: PUSH
65909: LD_VAR 0 2
65913: NOT
65914: OR
65915: IFFALSE 65919
// exit ;
65917: GO 66226
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65919: LD_ADDR_VAR 0 10
65923: PUSH
65924: LD_INT 5
65926: PUSH
65927: LD_INT 6
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 2
65936: PUSH
65937: LD_INT 4
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 3
65946: PUSH
65947: LD_INT 5
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 24
65961: PUSH
65962: LD_INT 25
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 23
65971: PUSH
65972: LD_INT 27
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 42
65985: PUSH
65986: LD_INT 43
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 44
65995: PUSH
65996: LD_INT 46
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 45
66005: PUSH
66006: LD_INT 47
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: LIST
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: LIST
66022: ST_TO_ADDR
// result := [ ] ;
66023: LD_ADDR_VAR 0 3
66027: PUSH
66028: EMPTY
66029: ST_TO_ADDR
// for i in turrets do
66030: LD_ADDR_VAR 0 4
66034: PUSH
66035: LD_VAR 0 1
66039: PUSH
66040: FOR_IN
66041: IFFALSE 66224
// begin nat := GetNation ( i ) ;
66043: LD_ADDR_VAR 0 7
66047: PUSH
66048: LD_VAR 0 4
66052: PPUSH
66053: CALL_OW 248
66057: ST_TO_ADDR
// weapon := 0 ;
66058: LD_ADDR_VAR 0 8
66062: PUSH
66063: LD_INT 0
66065: ST_TO_ADDR
// if not nat then
66066: LD_VAR 0 7
66070: NOT
66071: IFFALSE 66075
// continue ;
66073: GO 66040
// for j in list [ nat ] do
66075: LD_ADDR_VAR 0 5
66079: PUSH
66080: LD_VAR 0 10
66084: PUSH
66085: LD_VAR 0 7
66089: ARRAY
66090: PUSH
66091: FOR_IN
66092: IFFALSE 66133
// if GetBWeapon ( i ) = j [ 1 ] then
66094: LD_VAR 0 4
66098: PPUSH
66099: CALL_OW 269
66103: PUSH
66104: LD_VAR 0 5
66108: PUSH
66109: LD_INT 1
66111: ARRAY
66112: EQUAL
66113: IFFALSE 66131
// begin weapon := j [ 2 ] ;
66115: LD_ADDR_VAR 0 8
66119: PUSH
66120: LD_VAR 0 5
66124: PUSH
66125: LD_INT 2
66127: ARRAY
66128: ST_TO_ADDR
// break ;
66129: GO 66133
// end ;
66131: GO 66091
66133: POP
66134: POP
// if not weapon then
66135: LD_VAR 0 8
66139: NOT
66140: IFFALSE 66144
// continue ;
66142: GO 66040
// for k in factories do
66144: LD_ADDR_VAR 0 6
66148: PUSH
66149: LD_VAR 0 2
66153: PUSH
66154: FOR_IN
66155: IFFALSE 66220
// begin weapons := AvailableWeaponList ( k ) ;
66157: LD_ADDR_VAR 0 9
66161: PUSH
66162: LD_VAR 0 6
66166: PPUSH
66167: CALL_OW 478
66171: ST_TO_ADDR
// if not weapons then
66172: LD_VAR 0 9
66176: NOT
66177: IFFALSE 66181
// continue ;
66179: GO 66154
// if weapon in weapons then
66181: LD_VAR 0 8
66185: PUSH
66186: LD_VAR 0 9
66190: IN
66191: IFFALSE 66218
// begin result := [ i , weapon ] ;
66193: LD_ADDR_VAR 0 3
66197: PUSH
66198: LD_VAR 0 4
66202: PUSH
66203: LD_VAR 0 8
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: ST_TO_ADDR
// exit ;
66212: POP
66213: POP
66214: POP
66215: POP
66216: GO 66226
// end ; end ;
66218: GO 66154
66220: POP
66221: POP
// end ;
66222: GO 66040
66224: POP
66225: POP
// end ;
66226: LD_VAR 0 3
66230: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66231: LD_INT 0
66233: PPUSH
// if not side or side > 8 then
66234: LD_VAR 0 3
66238: NOT
66239: PUSH
66240: LD_VAR 0 3
66244: PUSH
66245: LD_INT 8
66247: GREATER
66248: OR
66249: IFFALSE 66253
// exit ;
66251: GO 66312
// if not range then
66253: LD_VAR 0 4
66257: NOT
66258: IFFALSE 66269
// range := - 12 ;
66260: LD_ADDR_VAR 0 4
66264: PUSH
66265: LD_INT 12
66267: NEG
66268: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66269: LD_VAR 0 1
66273: PPUSH
66274: LD_VAR 0 2
66278: PPUSH
66279: LD_VAR 0 3
66283: PPUSH
66284: LD_VAR 0 4
66288: PPUSH
66289: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66293: LD_VAR 0 1
66297: PPUSH
66298: LD_VAR 0 2
66302: PPUSH
66303: LD_VAR 0 3
66307: PPUSH
66308: CALL_OW 331
// end ;
66312: LD_VAR 0 5
66316: RET
// export function Video ( mode ) ; begin
66317: LD_INT 0
66319: PPUSH
// ingame_video = mode ;
66320: LD_ADDR_OWVAR 52
66324: PUSH
66325: LD_VAR 0 1
66329: ST_TO_ADDR
// interface_hidden = mode ;
66330: LD_ADDR_OWVAR 54
66334: PUSH
66335: LD_VAR 0 1
66339: ST_TO_ADDR
// end ;
66340: LD_VAR 0 2
66344: RET
// export function Join ( array , element ) ; begin
66345: LD_INT 0
66347: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66348: LD_ADDR_VAR 0 3
66352: PUSH
66353: LD_VAR 0 1
66357: PPUSH
66358: LD_VAR 0 1
66362: PUSH
66363: LD_INT 1
66365: PLUS
66366: PPUSH
66367: LD_VAR 0 2
66371: PPUSH
66372: CALL_OW 1
66376: ST_TO_ADDR
// end ;
66377: LD_VAR 0 3
66381: RET
// export function JoinUnion ( array , element ) ; begin
66382: LD_INT 0
66384: PPUSH
// result := array union element ;
66385: LD_ADDR_VAR 0 3
66389: PUSH
66390: LD_VAR 0 1
66394: PUSH
66395: LD_VAR 0 2
66399: UNION
66400: ST_TO_ADDR
// end ;
66401: LD_VAR 0 3
66405: RET
// export function GetBehemoths ( side ) ; begin
66406: LD_INT 0
66408: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66409: LD_ADDR_VAR 0 2
66413: PUSH
66414: LD_INT 22
66416: PUSH
66417: LD_VAR 0 1
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 31
66428: PUSH
66429: LD_INT 25
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PPUSH
66440: CALL_OW 69
66444: ST_TO_ADDR
// end ;
66445: LD_VAR 0 2
66449: RET
// export function Shuffle ( array ) ; var i , index ; begin
66450: LD_INT 0
66452: PPUSH
66453: PPUSH
66454: PPUSH
// result := [ ] ;
66455: LD_ADDR_VAR 0 2
66459: PUSH
66460: EMPTY
66461: ST_TO_ADDR
// if not array then
66462: LD_VAR 0 1
66466: NOT
66467: IFFALSE 66471
// exit ;
66469: GO 66570
// Randomize ;
66471: CALL_OW 10
// for i = array downto 1 do
66475: LD_ADDR_VAR 0 3
66479: PUSH
66480: DOUBLE
66481: LD_VAR 0 1
66485: INC
66486: ST_TO_ADDR
66487: LD_INT 1
66489: PUSH
66490: FOR_DOWNTO
66491: IFFALSE 66568
// begin index := rand ( 1 , array ) ;
66493: LD_ADDR_VAR 0 4
66497: PUSH
66498: LD_INT 1
66500: PPUSH
66501: LD_VAR 0 1
66505: PPUSH
66506: CALL_OW 12
66510: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66511: LD_ADDR_VAR 0 2
66515: PUSH
66516: LD_VAR 0 2
66520: PPUSH
66521: LD_VAR 0 2
66525: PUSH
66526: LD_INT 1
66528: PLUS
66529: PPUSH
66530: LD_VAR 0 1
66534: PUSH
66535: LD_VAR 0 4
66539: ARRAY
66540: PPUSH
66541: CALL_OW 2
66545: ST_TO_ADDR
// array := Delete ( array , index ) ;
66546: LD_ADDR_VAR 0 1
66550: PUSH
66551: LD_VAR 0 1
66555: PPUSH
66556: LD_VAR 0 4
66560: PPUSH
66561: CALL_OW 3
66565: ST_TO_ADDR
// end ;
66566: GO 66490
66568: POP
66569: POP
// end ;
66570: LD_VAR 0 2
66574: RET
// export function GetBaseMaterials ( base ) ; begin
66575: LD_INT 0
66577: PPUSH
// result := [ 0 , 0 , 0 ] ;
66578: LD_ADDR_VAR 0 2
66582: PUSH
66583: LD_INT 0
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// if not base then
66597: LD_VAR 0 1
66601: NOT
66602: IFFALSE 66606
// exit ;
66604: GO 66655
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66606: LD_ADDR_VAR 0 2
66610: PUSH
66611: LD_VAR 0 1
66615: PPUSH
66616: LD_INT 1
66618: PPUSH
66619: CALL_OW 275
66623: PUSH
66624: LD_VAR 0 1
66628: PPUSH
66629: LD_INT 2
66631: PPUSH
66632: CALL_OW 275
66636: PUSH
66637: LD_VAR 0 1
66641: PPUSH
66642: LD_INT 3
66644: PPUSH
66645: CALL_OW 275
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: LIST
66654: ST_TO_ADDR
// end ;
66655: LD_VAR 0 2
66659: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66660: LD_INT 0
66662: PPUSH
66663: PPUSH
// result := array ;
66664: LD_ADDR_VAR 0 3
66668: PUSH
66669: LD_VAR 0 1
66673: ST_TO_ADDR
// if size > 0 then
66674: LD_VAR 0 2
66678: PUSH
66679: LD_INT 0
66681: GREATER
66682: IFFALSE 66728
// for i := array downto size do
66684: LD_ADDR_VAR 0 4
66688: PUSH
66689: DOUBLE
66690: LD_VAR 0 1
66694: INC
66695: ST_TO_ADDR
66696: LD_VAR 0 2
66700: PUSH
66701: FOR_DOWNTO
66702: IFFALSE 66726
// result := Delete ( result , result ) ;
66704: LD_ADDR_VAR 0 3
66708: PUSH
66709: LD_VAR 0 3
66713: PPUSH
66714: LD_VAR 0 3
66718: PPUSH
66719: CALL_OW 3
66723: ST_TO_ADDR
66724: GO 66701
66726: POP
66727: POP
// end ;
66728: LD_VAR 0 3
66732: RET
// export function ComExit ( unit ) ; var tmp ; begin
66733: LD_INT 0
66735: PPUSH
66736: PPUSH
// if not IsInUnit ( unit ) then
66737: LD_VAR 0 1
66741: PPUSH
66742: CALL_OW 310
66746: NOT
66747: IFFALSE 66751
// exit ;
66749: GO 66811
// tmp := IsInUnit ( unit ) ;
66751: LD_ADDR_VAR 0 3
66755: PUSH
66756: LD_VAR 0 1
66760: PPUSH
66761: CALL_OW 310
66765: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66766: LD_VAR 0 3
66770: PPUSH
66771: CALL_OW 247
66775: PUSH
66776: LD_INT 2
66778: EQUAL
66779: IFFALSE 66792
// ComExitVehicle ( unit ) else
66781: LD_VAR 0 1
66785: PPUSH
66786: CALL_OW 121
66790: GO 66801
// ComExitBuilding ( unit ) ;
66792: LD_VAR 0 1
66796: PPUSH
66797: CALL_OW 122
// result := tmp ;
66801: LD_ADDR_VAR 0 2
66805: PUSH
66806: LD_VAR 0 3
66810: ST_TO_ADDR
// end ;
66811: LD_VAR 0 2
66815: RET
// export function ComExitAll ( units ) ; var i ; begin
66816: LD_INT 0
66818: PPUSH
66819: PPUSH
// if not units then
66820: LD_VAR 0 1
66824: NOT
66825: IFFALSE 66829
// exit ;
66827: GO 66855
// for i in units do
66829: LD_ADDR_VAR 0 3
66833: PUSH
66834: LD_VAR 0 1
66838: PUSH
66839: FOR_IN
66840: IFFALSE 66853
// ComExit ( i ) ;
66842: LD_VAR 0 3
66846: PPUSH
66847: CALL 66733 0 1
66851: GO 66839
66853: POP
66854: POP
// end ;
66855: LD_VAR 0 2
66859: RET
// export function ResetHc ; begin
66860: LD_INT 0
66862: PPUSH
// InitHc ;
66863: CALL_OW 19
// hc_importance := 0 ;
66867: LD_ADDR_OWVAR 32
66871: PUSH
66872: LD_INT 0
66874: ST_TO_ADDR
// end ;
66875: LD_VAR 0 1
66879: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66880: LD_INT 0
66882: PPUSH
66883: PPUSH
66884: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66885: LD_ADDR_VAR 0 6
66889: PUSH
66890: LD_VAR 0 1
66894: PUSH
66895: LD_VAR 0 3
66899: PLUS
66900: PUSH
66901: LD_INT 2
66903: DIV
66904: ST_TO_ADDR
// if _x < 0 then
66905: LD_VAR 0 6
66909: PUSH
66910: LD_INT 0
66912: LESS
66913: IFFALSE 66930
// _x := _x * - 1 ;
66915: LD_ADDR_VAR 0 6
66919: PUSH
66920: LD_VAR 0 6
66924: PUSH
66925: LD_INT 1
66927: NEG
66928: MUL
66929: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66930: LD_ADDR_VAR 0 7
66934: PUSH
66935: LD_VAR 0 2
66939: PUSH
66940: LD_VAR 0 4
66944: PLUS
66945: PUSH
66946: LD_INT 2
66948: DIV
66949: ST_TO_ADDR
// if _y < 0 then
66950: LD_VAR 0 7
66954: PUSH
66955: LD_INT 0
66957: LESS
66958: IFFALSE 66975
// _y := _y * - 1 ;
66960: LD_ADDR_VAR 0 7
66964: PUSH
66965: LD_VAR 0 7
66969: PUSH
66970: LD_INT 1
66972: NEG
66973: MUL
66974: ST_TO_ADDR
// result := [ _x , _y ] ;
66975: LD_ADDR_VAR 0 5
66979: PUSH
66980: LD_VAR 0 6
66984: PUSH
66985: LD_VAR 0 7
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: ST_TO_ADDR
// end ;
66994: LD_VAR 0 5
66998: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66999: LD_INT 0
67001: PPUSH
67002: PPUSH
67003: PPUSH
67004: PPUSH
// task := GetTaskList ( unit ) ;
67005: LD_ADDR_VAR 0 7
67009: PUSH
67010: LD_VAR 0 1
67014: PPUSH
67015: CALL_OW 437
67019: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67020: LD_VAR 0 7
67024: NOT
67025: PUSH
67026: LD_VAR 0 1
67030: PPUSH
67031: LD_VAR 0 2
67035: PPUSH
67036: CALL_OW 308
67040: NOT
67041: AND
67042: IFFALSE 67046
// exit ;
67044: GO 67164
// if IsInArea ( unit , area ) then
67046: LD_VAR 0 1
67050: PPUSH
67051: LD_VAR 0 2
67055: PPUSH
67056: CALL_OW 308
67060: IFFALSE 67078
// begin ComMoveToArea ( unit , goAway ) ;
67062: LD_VAR 0 1
67066: PPUSH
67067: LD_VAR 0 3
67071: PPUSH
67072: CALL_OW 113
// exit ;
67076: GO 67164
// end ; if task [ 1 ] [ 1 ] <> M then
67078: LD_VAR 0 7
67082: PUSH
67083: LD_INT 1
67085: ARRAY
67086: PUSH
67087: LD_INT 1
67089: ARRAY
67090: PUSH
67091: LD_STRING M
67093: NONEQUAL
67094: IFFALSE 67098
// exit ;
67096: GO 67164
// x := task [ 1 ] [ 2 ] ;
67098: LD_ADDR_VAR 0 5
67102: PUSH
67103: LD_VAR 0 7
67107: PUSH
67108: LD_INT 1
67110: ARRAY
67111: PUSH
67112: LD_INT 2
67114: ARRAY
67115: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67116: LD_ADDR_VAR 0 6
67120: PUSH
67121: LD_VAR 0 7
67125: PUSH
67126: LD_INT 1
67128: ARRAY
67129: PUSH
67130: LD_INT 3
67132: ARRAY
67133: ST_TO_ADDR
// if InArea ( x , y , area ) then
67134: LD_VAR 0 5
67138: PPUSH
67139: LD_VAR 0 6
67143: PPUSH
67144: LD_VAR 0 2
67148: PPUSH
67149: CALL_OW 309
67153: IFFALSE 67164
// ComStop ( unit ) ;
67155: LD_VAR 0 1
67159: PPUSH
67160: CALL_OW 141
// end ;
67164: LD_VAR 0 4
67168: RET
// export function Abs ( value ) ; begin
67169: LD_INT 0
67171: PPUSH
// result := value ;
67172: LD_ADDR_VAR 0 2
67176: PUSH
67177: LD_VAR 0 1
67181: ST_TO_ADDR
// if value < 0 then
67182: LD_VAR 0 1
67186: PUSH
67187: LD_INT 0
67189: LESS
67190: IFFALSE 67207
// result := value * - 1 ;
67192: LD_ADDR_VAR 0 2
67196: PUSH
67197: LD_VAR 0 1
67201: PUSH
67202: LD_INT 1
67204: NEG
67205: MUL
67206: ST_TO_ADDR
// end ;
67207: LD_VAR 0 2
67211: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67212: LD_INT 0
67214: PPUSH
67215: PPUSH
67216: PPUSH
67217: PPUSH
67218: PPUSH
67219: PPUSH
67220: PPUSH
67221: PPUSH
// if not unit or not building then
67222: LD_VAR 0 1
67226: NOT
67227: PUSH
67228: LD_VAR 0 2
67232: NOT
67233: OR
67234: IFFALSE 67238
// exit ;
67236: GO 67464
// x := GetX ( building ) ;
67238: LD_ADDR_VAR 0 4
67242: PUSH
67243: LD_VAR 0 2
67247: PPUSH
67248: CALL_OW 250
67252: ST_TO_ADDR
// y := GetY ( building ) ;
67253: LD_ADDR_VAR 0 6
67257: PUSH
67258: LD_VAR 0 2
67262: PPUSH
67263: CALL_OW 251
67267: ST_TO_ADDR
// d := GetDir ( building ) ;
67268: LD_ADDR_VAR 0 8
67272: PUSH
67273: LD_VAR 0 2
67277: PPUSH
67278: CALL_OW 254
67282: ST_TO_ADDR
// r := 4 ;
67283: LD_ADDR_VAR 0 9
67287: PUSH
67288: LD_INT 4
67290: ST_TO_ADDR
// for i := 1 to 5 do
67291: LD_ADDR_VAR 0 10
67295: PUSH
67296: DOUBLE
67297: LD_INT 1
67299: DEC
67300: ST_TO_ADDR
67301: LD_INT 5
67303: PUSH
67304: FOR_TO
67305: IFFALSE 67462
// begin _x := ShiftX ( x , d , r + i ) ;
67307: LD_ADDR_VAR 0 5
67311: PUSH
67312: LD_VAR 0 4
67316: PPUSH
67317: LD_VAR 0 8
67321: PPUSH
67322: LD_VAR 0 9
67326: PUSH
67327: LD_VAR 0 10
67331: PLUS
67332: PPUSH
67333: CALL_OW 272
67337: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67338: LD_ADDR_VAR 0 7
67342: PUSH
67343: LD_VAR 0 6
67347: PPUSH
67348: LD_VAR 0 8
67352: PPUSH
67353: LD_VAR 0 9
67357: PUSH
67358: LD_VAR 0 10
67362: PLUS
67363: PPUSH
67364: CALL_OW 273
67368: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67369: LD_VAR 0 5
67373: PPUSH
67374: LD_VAR 0 7
67378: PPUSH
67379: CALL_OW 488
67383: PUSH
67384: LD_VAR 0 5
67388: PPUSH
67389: LD_VAR 0 7
67393: PPUSH
67394: CALL_OW 428
67398: PPUSH
67399: CALL_OW 247
67403: PUSH
67404: LD_INT 3
67406: PUSH
67407: LD_INT 2
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: IN
67414: NOT
67415: AND
67416: IFFALSE 67460
// begin ComMoveXY ( unit , _x , _y ) ;
67418: LD_VAR 0 1
67422: PPUSH
67423: LD_VAR 0 5
67427: PPUSH
67428: LD_VAR 0 7
67432: PPUSH
67433: CALL_OW 111
// result := [ _x , _y ] ;
67437: LD_ADDR_VAR 0 3
67441: PUSH
67442: LD_VAR 0 5
67446: PUSH
67447: LD_VAR 0 7
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: ST_TO_ADDR
// exit ;
67456: POP
67457: POP
67458: GO 67464
// end ; end ;
67460: GO 67304
67462: POP
67463: POP
// end ;
67464: LD_VAR 0 3
67468: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67469: LD_INT 0
67471: PPUSH
67472: PPUSH
67473: PPUSH
// result := 0 ;
67474: LD_ADDR_VAR 0 3
67478: PUSH
67479: LD_INT 0
67481: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67482: LD_VAR 0 1
67486: PUSH
67487: LD_INT 0
67489: LESS
67490: PUSH
67491: LD_VAR 0 1
67495: PUSH
67496: LD_INT 8
67498: GREATER
67499: OR
67500: PUSH
67501: LD_VAR 0 2
67505: PUSH
67506: LD_INT 0
67508: LESS
67509: OR
67510: PUSH
67511: LD_VAR 0 2
67515: PUSH
67516: LD_INT 8
67518: GREATER
67519: OR
67520: IFFALSE 67524
// exit ;
67522: GO 67599
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67524: LD_ADDR_VAR 0 4
67528: PUSH
67529: LD_INT 22
67531: PUSH
67532: LD_VAR 0 2
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PPUSH
67541: CALL_OW 69
67545: PUSH
67546: FOR_IN
67547: IFFALSE 67597
// begin un := UnitShoot ( i ) ;
67549: LD_ADDR_VAR 0 5
67553: PUSH
67554: LD_VAR 0 4
67558: PPUSH
67559: CALL_OW 504
67563: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67564: LD_VAR 0 5
67568: PPUSH
67569: CALL_OW 255
67573: PUSH
67574: LD_VAR 0 1
67578: EQUAL
67579: IFFALSE 67595
// begin result := un ;
67581: LD_ADDR_VAR 0 3
67585: PUSH
67586: LD_VAR 0 5
67590: ST_TO_ADDR
// exit ;
67591: POP
67592: POP
67593: GO 67599
// end ; end ;
67595: GO 67546
67597: POP
67598: POP
// end ;
67599: LD_VAR 0 3
67603: RET
// export function GetCargoBay ( units ) ; begin
67604: LD_INT 0
67606: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67607: LD_ADDR_VAR 0 2
67611: PUSH
67612: LD_VAR 0 1
67616: PPUSH
67617: LD_INT 2
67619: PUSH
67620: LD_INT 34
67622: PUSH
67623: LD_INT 12
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 34
67632: PUSH
67633: LD_INT 51
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 34
67642: PUSH
67643: LD_INT 32
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 34
67652: PUSH
67653: LD_EXP 44
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: PPUSH
67669: CALL_OW 72
67673: ST_TO_ADDR
// end ; end_of_file
67674: LD_VAR 0 2
67678: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67679: LD_VAR 0 1
67683: PUSH
67684: LD_INT 200
67686: DOUBLE
67687: GREATEREQUAL
67688: IFFALSE 67696
67690: LD_INT 299
67692: DOUBLE
67693: LESSEQUAL
67694: IFTRUE 67698
67696: GO 67730
67698: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67699: LD_VAR 0 1
67703: PPUSH
67704: LD_VAR 0 2
67708: PPUSH
67709: LD_VAR 0 3
67713: PPUSH
67714: LD_VAR 0 4
67718: PPUSH
67719: LD_VAR 0 5
67723: PPUSH
67724: CALL 26140 0 5
67728: GO 67807
67730: LD_INT 300
67732: DOUBLE
67733: GREATEREQUAL
67734: IFFALSE 67742
67736: LD_INT 399
67738: DOUBLE
67739: LESSEQUAL
67740: IFTRUE 67744
67742: GO 67806
67744: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67745: LD_VAR 0 1
67749: PPUSH
67750: LD_VAR 0 2
67754: PPUSH
67755: LD_VAR 0 3
67759: PPUSH
67760: LD_VAR 0 4
67764: PPUSH
67765: LD_VAR 0 5
67769: PPUSH
67770: LD_VAR 0 6
67774: PPUSH
67775: LD_VAR 0 7
67779: PPUSH
67780: LD_VAR 0 8
67784: PPUSH
67785: LD_VAR 0 9
67789: PPUSH
67790: LD_VAR 0 10
67794: PPUSH
67795: LD_VAR 0 11
67799: PPUSH
67800: CALL 24028 0 11
67804: GO 67807
67806: POP
// end ;
67807: PPOPN 11
67809: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67810: LD_VAR 0 1
67814: PPUSH
67815: LD_VAR 0 2
67819: PPUSH
67820: LD_VAR 0 3
67824: PPUSH
67825: LD_VAR 0 4
67829: PPUSH
67830: LD_VAR 0 5
67834: PPUSH
67835: CALL 26122 0 5
// end ; end_of_file
67839: PPOPN 5
67841: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67842: LD_VAR 0 1
67846: PPUSH
67847: LD_VAR 0 2
67851: PPUSH
67852: LD_VAR 0 3
67856: PPUSH
67857: LD_VAR 0 4
67861: PPUSH
67862: LD_VAR 0 5
67866: PPUSH
67867: LD_VAR 0 6
67871: PPUSH
67872: CALL 12836 0 6
// end ;
67876: PPOPN 6
67878: END
