// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot = 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched = 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources = [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles = [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 = 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 = 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 = 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 = 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 = 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// mission_prefix = 13f_ ;
 154: LD_ADDR_EXP 34
 158: PUSH
 159: LD_STRING 13f_
 161: ST_TO_ADDR
// debugMode = 0 ;
 162: LD_ADDR_EXP 40
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// achivCounter := 0 ;
 170: LD_ADDR_EXP 41
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// if Difficulty = 1 then
 178: LD_OWVAR 67
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 195
// RemoveEnvironmentArea ( oilBlockArea ) ;
 188: LD_INT 15
 190: PPUSH
 191: CALL_OW 355
// PrepareVehicles ;
 195: CALL 1290 0 0
// PrepareHeroes ;
 199: CALL 571 0 0
// PrepareAmericansRandom ;
 203: CALL 1194 0 0
// PrepareDifficulty ;
 207: CALL 6051 0 0
// end ;
 211: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 212: LD_EXP 40
 216: PUSH
 217: LD_INT 1
 219: EQUAL
 220: IFFALSE 526
 222: GO 224
 224: DISABLE
 225: LD_INT 0
 227: PPUSH
// begin enable ;
 228: ENABLE
// fogoff ( true ) ;
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 236: LD_ADDR_VAR 0 1
 240: PUSH
 241: LD_INT 22
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 21
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PPUSH
 265: CALL_OW 69
 269: PUSH
 270: FOR_IN
 271: IFFALSE 287
// SetLives ( i , 1000 ) ;
 273: LD_VAR 0 1
 277: PPUSH
 278: LD_INT 1000
 280: PPUSH
 281: CALL_OW 234
 285: GO 270
 287: POP
 288: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 289: LD_ADDR_VAR 0 1
 293: PUSH
 294: LD_INT 22
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 30
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 30
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 366
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: CALL_OW 274
 353: PPUSH
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 9999
 359: PPUSH
 360: CALL_OW 277
 364: GO 341
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 3
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// end ;
 526: PPOPN 1
 528: END
// every 0 0$1 trigger achivCounter >= 2 do
 529: LD_EXP 41
 533: PUSH
 534: LD_INT 2
 536: GREATEREQUAL
 537: IFFALSE 549
 539: GO 541
 541: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 542: LD_STRING ACH_REMOTE
 544: PPUSH
 545: CALL_OW 543
 549: END
// every 0 0$1 trigger destroyCounter >= 30 do
 550: LD_EXP 42
 554: PUSH
 555: LD_INT 30
 557: GREATEREQUAL
 558: IFFALSE 570
 560: GO 562
 562: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 563: LD_STRING ACH_DEFMASTER
 565: PPUSH
 566: CALL_OW 543
 570: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 571: LD_INT 0
 573: PPUSH
 574: PPUSH
 575: PPUSH
 576: PPUSH
// uc_side = 1 ;
 577: LD_ADDR_OWVAR 20
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13c_ ) ;
 585: LD_ADDR_EXP 1
 589: PUSH
 590: LD_STRING JMM
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: LD_STRING 13c_
 598: PPUSH
 599: CALL 27241 0 3
 603: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , true , 13c_ ) ;
 604: LD_ADDR_EXP 2
 608: PUSH
 609: LD_STRING Stevens
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 27241 0 3
 622: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 13c_ ) ;
 623: LD_ADDR_EXP 3
 627: PUSH
 628: LD_STRING Lisa
 630: PPUSH
 631: LD_INT 1
 633: PPUSH
 634: LD_STRING 13c_
 636: PPUSH
 637: CALL 27241 0 3
 641: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 13c_ ) ;
 642: LD_ADDR_EXP 4
 646: PUSH
 647: LD_STRING Donaldson
 649: PPUSH
 650: LD_INT 1
 652: PPUSH
 653: LD_STRING 13c_
 655: PPUSH
 656: CALL 27241 0 3
 660: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 13c_ ) ;
 661: LD_ADDR_EXP 5
 665: PUSH
 666: LD_STRING Bobby
 668: PPUSH
 669: LD_INT 1
 671: PPUSH
 672: LD_STRING 13c_
 674: PPUSH
 675: CALL 27241 0 3
 679: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 13c_ ) ;
 680: LD_ADDR_EXP 6
 684: PUSH
 685: LD_STRING Cyrus
 687: PPUSH
 688: LD_INT 1
 690: PPUSH
 691: LD_STRING 13c_
 693: PPUSH
 694: CALL 27241 0 3
 698: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 13c_ ) ;
 699: LD_ADDR_EXP 7
 703: PUSH
 704: LD_STRING Denis
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: LD_STRING 13c_
 712: PPUSH
 713: CALL 27241 0 3
 717: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 13c_ ) ;
 718: LD_ADDR_EXP 8
 722: PUSH
 723: LD_STRING Brown
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: LD_STRING 13c_
 731: PPUSH
 732: CALL 27241 0 3
 736: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 13c_ ) ;
 737: LD_ADDR_EXP 9
 741: PUSH
 742: LD_STRING Gladstone
 744: PPUSH
 745: LD_INT 1
 747: PPUSH
 748: LD_STRING 13c_
 750: PPUSH
 751: CALL 27241 0 3
 755: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 13c_ ) ;
 756: LD_ADDR_EXP 10
 760: PUSH
 761: LD_STRING Houten
 763: PPUSH
 764: LD_INT 1
 766: PPUSH
 767: LD_STRING 13c_
 769: PPUSH
 770: CALL 27241 0 3
 774: ST_TO_ADDR
// Cornel = PrepareUnit ( Cornel , true , 13c_ ) ;
 775: LD_ADDR_EXP 11
 779: PUSH
 780: LD_STRING Cornel
 782: PPUSH
 783: LD_INT 1
 785: PPUSH
 786: LD_STRING 13c_
 788: PPUSH
 789: CALL 27241 0 3
 793: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 13c_ ) ;
 794: LD_ADDR_EXP 12
 798: PUSH
 799: LD_STRING Gary
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: LD_STRING 13c_
 807: PPUSH
 808: CALL 27241 0 3
 812: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 13c_ ) ;
 813: LD_ADDR_EXP 13
 817: PUSH
 818: LD_STRING Frank
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: LD_STRING 13c_
 826: PPUSH
 827: CALL 27241 0 3
 831: ST_TO_ADDR
// Kikuchi = PrepareUnit ( Kikuchi , true , 13c_ ) ;
 832: LD_ADDR_EXP 14
 836: PUSH
 837: LD_STRING Kikuchi
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: LD_STRING 13c_
 845: PPUSH
 846: CALL 27241 0 3
 850: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
 851: LD_ADDR_EXP 15
 855: PUSH
 856: LD_STRING Powell
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: LD_STRING 
 864: PPUSH
 865: CALL 27241 0 3
 869: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 870: LD_ADDR_VAR 0 2
 874: PUSH
 875: LD_EXP 1
 879: PUSH
 880: LD_EXP 2
 884: PUSH
 885: LD_EXP 3
 889: PUSH
 890: LD_EXP 4
 894: PUSH
 895: LD_EXP 5
 899: PUSH
 900: LD_EXP 6
 904: PUSH
 905: LD_EXP 7
 909: PUSH
 910: LD_EXP 8
 914: PUSH
 915: LD_EXP 9
 919: PUSH
 920: LD_EXP 10
 924: PUSH
 925: LD_EXP 11
 929: PUSH
 930: LD_EXP 12
 934: PUSH
 935: LD_EXP 13
 939: PUSH
 940: LD_EXP 14
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 961: LD_ADDR_VAR 0 3
 965: PUSH
 966: LD_INT 22
 968: PUSH
 969: LD_INT 1
 971: PUSH
 972: EMPTY
 973: LIST
 974: LIST
 975: PUSH
 976: LD_INT 33
 978: PUSH
 979: LD_INT 1
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PUSH
 986: LD_INT 21
 988: PUSH
 989: LD_INT 2
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: LIST
1000: PPUSH
1001: CALL_OW 69
1005: ST_TO_ADDR
// for i = tmp downto 1 do
1006: LD_ADDR_VAR 0 4
1010: PUSH
1011: DOUBLE
1012: LD_VAR 0 2
1016: INC
1017: ST_TO_ADDR
1018: LD_INT 1
1020: PUSH
1021: FOR_DOWNTO
1022: IFFALSE 1059
// if not tmp [ i ] then
1024: LD_VAR 0 2
1028: PUSH
1029: LD_VAR 0 4
1033: ARRAY
1034: NOT
1035: IFFALSE 1057
// tmp := Delete ( tmp , i ) ;
1037: LD_ADDR_VAR 0 2
1041: PUSH
1042: LD_VAR 0 2
1046: PPUSH
1047: LD_VAR 0 4
1051: PPUSH
1052: CALL_OW 3
1056: ST_TO_ADDR
1057: GO 1021
1059: POP
1060: POP
// for i = 1 to tmp do
1061: LD_ADDR_VAR 0 4
1065: PUSH
1066: DOUBLE
1067: LD_INT 1
1069: DEC
1070: ST_TO_ADDR
1071: LD_VAR 0 2
1075: PUSH
1076: FOR_TO
1077: IFFALSE 1107
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1079: LD_VAR 0 2
1083: PUSH
1084: LD_VAR 0 4
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 3
1094: PUSH
1095: LD_VAR 0 4
1099: ARRAY
1100: PPUSH
1101: CALL_OW 52
1105: GO 1076
1107: POP
1108: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1109: LD_INT 22
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 25
1121: PUSH
1122: LD_INT 2
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PPUSH
1133: CALL_OW 69
1137: PUSH
1138: LD_INT 0
1140: EQUAL
1141: PUSH
1142: LD_INT 22
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 34
1154: PUSH
1155: LD_INT 13
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: PPUSH
1166: CALL_OW 69
1170: PUSH
1171: LD_INT 0
1173: EQUAL
1174: AND
1175: IFFALSE 1189
// SetClass ( JMM , 2 ) ;
1177: LD_EXP 1
1181: PPUSH
1182: LD_INT 2
1184: PPUSH
1185: CALL_OW 336
// end ;
1189: LD_VAR 0 1
1193: RET
// export function PrepareAmericansRandom ; var i ; begin
1194: LD_INT 0
1196: PPUSH
1197: PPUSH
// uc_side = 1 ;
1198: LD_ADDR_OWVAR 20
1202: PUSH
1203: LD_INT 1
1205: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1206: LD_ADDR_EXP 16
1210: PUSH
1211: LD_STRING 13c_others
1213: PPUSH
1214: CALL_OW 31
1218: ST_TO_ADDR
// for i in others13 do
1219: LD_ADDR_VAR 0 2
1223: PUSH
1224: LD_EXP 16
1228: PUSH
1229: FOR_IN
1230: IFFALSE 1283
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1232: LD_VAR 0 2
1236: PPUSH
1237: LD_INT 22
1239: PUSH
1240: LD_INT 1
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 21
1249: PUSH
1250: LD_INT 2
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: LD_INT 58
1259: PUSH
1260: EMPTY
1261: LIST
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PPUSH
1268: CALL_OW 69
1272: PUSH
1273: LD_INT 1
1275: ARRAY
1276: PPUSH
1277: CALL_OW 52
1281: GO 1229
1283: POP
1284: POP
// end ;
1285: LD_VAR 0 1
1289: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1290: LD_INT 0
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1298: LD_ADDR_VAR 0 5
1302: PUSH
1303: LD_STRING 13_VehiclesIn13_1
1305: PPUSH
1306: EMPTY
1307: PPUSH
1308: CALL_OW 30
1312: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1313: LD_ADDR_EXP 24
1317: PUSH
1318: LD_STRING 13_ResourcesInCargo13_1
1320: PPUSH
1321: EMPTY
1322: PPUSH
1323: CALL_OW 30
1327: ST_TO_ADDR
// cargoList = [ ] ;
1328: LD_ADDR_VAR 0 6
1332: PUSH
1333: EMPTY
1334: ST_TO_ADDR
// uc_side = 1 ;
1335: LD_ADDR_OWVAR 20
1339: PUSH
1340: LD_INT 1
1342: ST_TO_ADDR
// if vehicles > 0 then
1343: LD_VAR 0 5
1347: PUSH
1348: LD_INT 0
1350: GREATER
1351: IFFALSE 1706
// begin for i := 1 to vehicles do
1353: LD_ADDR_VAR 0 2
1357: PUSH
1358: DOUBLE
1359: LD_INT 1
1361: DEC
1362: ST_TO_ADDR
1363: LD_VAR 0 5
1367: PUSH
1368: FOR_TO
1369: IFFALSE 1518
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1371: LD_ADDR_OWVAR 21
1375: PUSH
1376: LD_VAR 0 5
1380: PUSH
1381: LD_VAR 0 2
1385: ARRAY
1386: PUSH
1387: LD_INT 1
1389: ARRAY
1390: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1391: LD_ADDR_OWVAR 37
1395: PUSH
1396: LD_VAR 0 5
1400: PUSH
1401: LD_VAR 0 2
1405: ARRAY
1406: PUSH
1407: LD_INT 2
1409: ARRAY
1410: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1411: LD_ADDR_OWVAR 39
1415: PUSH
1416: LD_VAR 0 5
1420: PUSH
1421: LD_VAR 0 2
1425: ARRAY
1426: PUSH
1427: LD_INT 3
1429: ARRAY
1430: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1431: LD_ADDR_OWVAR 38
1435: PUSH
1436: LD_VAR 0 5
1440: PUSH
1441: LD_VAR 0 2
1445: ARRAY
1446: PUSH
1447: LD_INT 4
1449: ARRAY
1450: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1451: LD_ADDR_OWVAR 40
1455: PUSH
1456: LD_VAR 0 5
1460: PUSH
1461: LD_VAR 0 2
1465: ARRAY
1466: PUSH
1467: LD_INT 5
1469: ARRAY
1470: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1471: LD_ADDR_OWVAR 41
1475: PUSH
1476: LD_INT 40
1478: ST_TO_ADDR
// veh = CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 2
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
// end ;
1516: GO 1368
1518: POP
1519: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1520: LD_ADDR_VAR 0 6
1524: PUSH
1525: LD_INT 22
1527: PUSH
1528: LD_INT 1
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 21
1537: PUSH
1538: LD_INT 2
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 34
1547: PUSH
1548: LD_INT 12
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PPUSH
1560: CALL_OW 69
1564: ST_TO_ADDR
// if cargoList > 0 then
1565: LD_VAR 0 6
1569: PUSH
1570: LD_INT 0
1572: GREATER
1573: IFFALSE 1706
// for i = 1 to cargoList do
1575: LD_ADDR_VAR 0 2
1579: PUSH
1580: DOUBLE
1581: LD_INT 1
1583: DEC
1584: ST_TO_ADDR
1585: LD_VAR 0 6
1589: PUSH
1590: FOR_TO
1591: IFFALSE 1704
// begin if resources > 0 then
1593: LD_EXP 24
1597: PUSH
1598: LD_INT 0
1600: GREATER
1601: IFFALSE 1702
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1603: LD_VAR 0 6
1607: PUSH
1608: LD_VAR 0 2
1612: ARRAY
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: LD_EXP 24
1621: PUSH
1622: LD_VAR 0 2
1626: ARRAY
1627: PUSH
1628: LD_INT 1
1630: ARRAY
1631: PPUSH
1632: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1636: LD_VAR 0 6
1640: PUSH
1641: LD_VAR 0 2
1645: ARRAY
1646: PPUSH
1647: LD_INT 2
1649: PPUSH
1650: LD_EXP 24
1654: PUSH
1655: LD_VAR 0 2
1659: ARRAY
1660: PUSH
1661: LD_INT 2
1663: ARRAY
1664: PPUSH
1665: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1669: LD_VAR 0 6
1673: PUSH
1674: LD_VAR 0 2
1678: ARRAY
1679: PPUSH
1680: LD_INT 3
1682: PPUSH
1683: LD_EXP 24
1687: PUSH
1688: LD_VAR 0 2
1692: ARRAY
1693: PUSH
1694: LD_INT 3
1696: ARRAY
1697: PPUSH
1698: CALL_OW 291
// end ; end ;
1702: GO 1590
1704: POP
1705: POP
// end ; end ;
1706: LD_VAR 0 1
1710: RET
// export function PowellSupport ; var i , veh , un ; begin
1711: LD_INT 0
1713: PPUSH
1714: PPUSH
1715: PPUSH
1716: PPUSH
// for i = 1 to 3 do
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: DOUBLE
1723: LD_INT 1
1725: DEC
1726: ST_TO_ADDR
1727: LD_INT 3
1729: PUSH
1730: FOR_TO
1731: IFFALSE 1932
// begin uc_nation = 1 ;
1733: LD_ADDR_OWVAR 21
1737: PUSH
1738: LD_INT 1
1740: ST_TO_ADDR
// uc_side = 1 ;
1741: LD_ADDR_OWVAR 20
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// vc_engine = 3 ;
1749: LD_ADDR_OWVAR 39
1753: PUSH
1754: LD_INT 3
1756: ST_TO_ADDR
// vc_control = 1 ;
1757: LD_ADDR_OWVAR 38
1761: PUSH
1762: LD_INT 1
1764: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1765: LD_ADDR_OWVAR 40
1769: PUSH
1770: LD_INT 9
1772: PUSH
1773: LD_INT 5
1775: PUSH
1776: LD_INT 4
1778: PUSH
1779: LD_INT 7
1781: PUSH
1782: LD_INT 6
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: PUSH
1792: LD_INT 1
1794: PPUSH
1795: LD_INT 5
1797: PPUSH
1798: CALL_OW 12
1802: ARRAY
1803: ST_TO_ADDR
// if vc_weapon = 6 then
1804: LD_OWVAR 40
1808: PUSH
1809: LD_INT 6
1811: EQUAL
1812: IFFALSE 1824
// vc_chassis = 4 else
1814: LD_ADDR_OWVAR 37
1818: PUSH
1819: LD_INT 4
1821: ST_TO_ADDR
1822: GO 1832
// vc_chassis = 3 ;
1824: LD_ADDR_OWVAR 37
1828: PUSH
1829: LD_INT 3
1831: ST_TO_ADDR
// veh = CreateVehicle ;
1832: LD_ADDR_VAR 0 3
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 3
1846: PPUSH
1847: LD_INT 2
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// SetDir ( veh , 1 ) ;
1857: LD_VAR 0 3
1861: PPUSH
1862: LD_INT 1
1864: PPUSH
1865: CALL_OW 233
// hc_gallery =  ;
1869: LD_ADDR_OWVAR 33
1873: PUSH
1874: LD_STRING 
1876: ST_TO_ADDR
// hc_name =  ;
1877: LD_ADDR_OWVAR 26
1881: PUSH
1882: LD_STRING 
1884: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1885: LD_INT 0
1887: PPUSH
1888: LD_INT 3
1890: PPUSH
1891: LD_INT 7
1893: PPUSH
1894: LD_INT 10
1896: PPUSH
1897: CALL_OW 12
1901: PPUSH
1902: CALL_OW 380
// un = CreateHuman ;
1906: LD_ADDR_VAR 0 4
1910: PUSH
1911: CALL_OW 44
1915: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1916: LD_VAR 0 4
1920: PPUSH
1921: LD_VAR 0 3
1925: PPUSH
1926: CALL_OW 52
// end ;
1930: GO 1730
1932: POP
1933: POP
// end ; end_of_file
1934: LD_VAR 0 1
1938: RET
// export function PrepareBurlak ; begin
1939: LD_INT 0
1941: PPUSH
// uc_side = 7 ;
1942: LD_ADDR_OWVAR 20
1946: PUSH
1947: LD_INT 7
1949: ST_TO_ADDR
// uc_nation = 3 ;
1950: LD_ADDR_OWVAR 21
1954: PUSH
1955: LD_INT 3
1957: ST_TO_ADDR
// vc_engine = 3 ;
1958: LD_ADDR_OWVAR 39
1962: PUSH
1963: LD_INT 3
1965: ST_TO_ADDR
// vc_control = 1 ;
1966: LD_ADDR_OWVAR 38
1970: PUSH
1971: LD_INT 1
1973: ST_TO_ADDR
// vc_weapon = 46 ;
1974: LD_ADDR_OWVAR 40
1978: PUSH
1979: LD_INT 46
1981: ST_TO_ADDR
// vc_chassis = 24 ;
1982: LD_ADDR_OWVAR 37
1986: PUSH
1987: LD_INT 24
1989: ST_TO_ADDR
// Masha = CreateVehicle ;
1990: LD_ADDR_EXP 18
1994: PUSH
1995: CALL_OW 45
1999: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2000: LD_EXP 18
2004: PPUSH
2005: LD_INT 3
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2015: LD_EXP 18
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2027: LD_ADDR_EXP 17
2031: PUSH
2032: LD_STRING Burlak
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: LD_STRING 
2040: PPUSH
2041: CALL 27241 0 3
2045: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2046: LD_EXP 17
2050: PPUSH
2051: LD_EXP 18
2055: PPUSH
2056: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2060: LD_EXP 18
2064: PPUSH
2065: LD_INT 107
2067: PPUSH
2068: LD_INT 118
2070: PPUSH
2071: CALL_OW 114
// spawnBurlak = 1 ;
2075: LD_ADDR_EXP 27
2079: PUSH
2080: LD_INT 1
2082: ST_TO_ADDR
// end ;
2083: LD_VAR 0 1
2087: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
2088: LD_INT 0
2090: PPUSH
2091: PPUSH
2092: PPUSH
2093: PPUSH
// uc_side = 7 ;
2094: LD_ADDR_OWVAR 20
2098: PUSH
2099: LD_INT 7
2101: ST_TO_ADDR
// uc_nation = 3 ;
2102: LD_ADDR_OWVAR 21
2106: PUSH
2107: LD_INT 3
2109: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ,  ) ;
2110: LD_ADDR_EXP 19
2114: PUSH
2115: LD_STRING Gnyevko
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: LD_STRING 
2123: PPUSH
2124: CALL 27241 0 3
2128: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ,  ) ;
2129: LD_ADDR_EXP 20
2133: PUSH
2134: LD_STRING Titov
2136: PPUSH
2137: LD_INT 0
2139: PPUSH
2140: LD_STRING 
2142: PPUSH
2143: CALL 27241 0 3
2147: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ,  ) ;
2148: LD_ADDR_EXP 21
2152: PUSH
2153: LD_STRING Xavier2
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: LD_STRING 
2161: PPUSH
2162: CALL 27241 0 3
2166: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ,  ) ;
2167: LD_ADDR_EXP 22
2171: PUSH
2172: LD_STRING Belkov
2174: PPUSH
2175: LD_INT 0
2177: PPUSH
2178: LD_STRING 
2180: PPUSH
2181: CALL 27241 0 3
2185: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ,  ) ;
2186: LD_ADDR_EXP 23
2190: PUSH
2191: LD_STRING Lipshchin
2193: PPUSH
2194: LD_INT 0
2196: PPUSH
2197: LD_STRING 
2199: PPUSH
2200: CALL 27241 0 3
2204: ST_TO_ADDR
// for i = 1 to 5 do
2205: LD_ADDR_VAR 0 2
2209: PUSH
2210: DOUBLE
2211: LD_INT 1
2213: DEC
2214: ST_TO_ADDR
2215: LD_INT 5
2217: PUSH
2218: FOR_TO
2219: IFFALSE 2307
// begin vc_engine = 3 ;
2221: LD_ADDR_OWVAR 39
2225: PUSH
2226: LD_INT 3
2228: ST_TO_ADDR
// vc_control = 1 ;
2229: LD_ADDR_OWVAR 38
2233: PUSH
2234: LD_INT 1
2236: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2237: LD_ADDR_OWVAR 40
2241: PUSH
2242: LD_INT 43
2244: PUSH
2245: LD_INT 44
2247: PUSH
2248: LD_INT 45
2250: PUSH
2251: LD_INT 49
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 1
2262: PPUSH
2263: LD_INT 4
2265: PPUSH
2266: CALL_OW 12
2270: ARRAY
2271: ST_TO_ADDR
// vc_chassis = 22 ;
2272: LD_ADDR_OWVAR 37
2276: PUSH
2277: LD_INT 22
2279: ST_TO_ADDR
// veh = CreateVehicle ;
2280: LD_ADDR_VAR 0 3
2284: PUSH
2285: CALL_OW 45
2289: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2290: LD_VAR 0 3
2294: PPUSH
2295: LD_INT 3
2297: PPUSH
2298: LD_INT 0
2300: PPUSH
2301: CALL_OW 49
// end ;
2305: GO 2218
2307: POP
2308: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2309: LD_ADDR_VAR 0 4
2313: PUSH
2314: LD_INT 22
2316: PUSH
2317: LD_INT 7
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 21
2326: PUSH
2327: LD_INT 2
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: PUSH
2334: LD_INT 58
2336: PUSH
2337: EMPTY
2338: LIST
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: LIST
2344: PPUSH
2345: CALL_OW 69
2349: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2350: LD_EXP 19
2354: PPUSH
2355: LD_VAR 0 4
2359: PUSH
2360: LD_INT 1
2362: ARRAY
2363: PPUSH
2364: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2368: LD_EXP 20
2372: PPUSH
2373: LD_VAR 0 4
2377: PUSH
2378: LD_INT 2
2380: ARRAY
2381: PPUSH
2382: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2386: LD_EXP 21
2390: PPUSH
2391: LD_VAR 0 4
2395: PUSH
2396: LD_INT 3
2398: ARRAY
2399: PPUSH
2400: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2404: LD_EXP 22
2408: PPUSH
2409: LD_VAR 0 4
2413: PUSH
2414: LD_INT 4
2416: ARRAY
2417: PPUSH
2418: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2422: LD_EXP 23
2426: PPUSH
2427: LD_VAR 0 4
2431: PUSH
2432: LD_INT 5
2434: ARRAY
2435: PPUSH
2436: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2440: LD_EXP 19
2444: PPUSH
2445: LD_INT 3
2447: PPUSH
2448: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2452: LD_EXP 20
2456: PUSH
2457: LD_EXP 23
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PPUSH
2466: LD_INT 9
2468: PPUSH
2469: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2473: LD_ADDR_VAR 0 4
2477: PUSH
2478: LD_INT 22
2480: PUSH
2481: LD_INT 7
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: PPUSH
2488: CALL_OW 69
2492: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2493: LD_VAR 0 4
2497: PPUSH
2498: LD_INT 107
2500: PPUSH
2501: LD_INT 118
2503: PPUSH
2504: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2508: LD_INT 35
2510: PPUSH
2511: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2515: LD_VAR 0 4
2519: PPUSH
2520: LD_INT 34
2522: PUSH
2523: LD_INT 49
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PPUSH
2530: CALL_OW 72
2534: PPUSH
2535: LD_EXP 18
2539: PPUSH
2540: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , 49 ] ] ) , 107 , 118 ) ;
2544: LD_VAR 0 4
2548: PPUSH
2549: LD_INT 3
2551: PUSH
2552: LD_INT 34
2554: PUSH
2555: LD_INT 49
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PPUSH
2566: CALL_OW 72
2570: PPUSH
2571: LD_INT 107
2573: PPUSH
2574: LD_INT 118
2576: PPUSH
2577: CALL_OW 114
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2581: LD_VAR 0 4
2585: PPUSH
2586: LD_INT 34
2588: PUSH
2589: LD_INT 49
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: PPUSH
2596: CALL_OW 72
2600: PUSH
2601: LD_INT 0
2603: EQUAL
2604: PUSH
2605: LD_EXP 18
2609: PPUSH
2610: CALL_OW 303
2614: OR
2615: IFFALSE 2508
// repeat wait ( 0 0$1 ) ;
2617: LD_INT 35
2619: PPUSH
2620: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
2624: LD_ADDR_VAR 0 4
2628: PUSH
2629: LD_INT 22
2631: PUSH
2632: LD_INT 7
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: PUSH
2644: LD_EXP 17
2648: DIFF
2649: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2650: LD_VAR 0 4
2654: PPUSH
2655: LD_INT 107
2657: PPUSH
2658: LD_INT 118
2660: PPUSH
2661: CALL_OW 114
// if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
2665: LD_EXP 17
2669: PPUSH
2670: CALL_OW 302
2674: PUSH
2675: LD_EXP 17
2679: PPUSH
2680: CALL_OW 310
2684: NOT
2685: AND
2686: IFFALSE 2703
// ComMoveXY ( Burlak , 107 , 118 ) ;
2688: LD_EXP 17
2692: PPUSH
2693: LD_INT 107
2695: PPUSH
2696: LD_INT 118
2698: PPUSH
2699: CALL_OW 111
// until not tmp ;
2703: LD_VAR 0 4
2707: NOT
2708: IFFALSE 2617
// end ; end_of_file
2710: LD_VAR 0 1
2714: RET
// every 15 15$0 trigger sibDeposits do var un , rnd ;
2715: LD_EXP 31
2719: IFFALSE 2895
2721: GO 2723
2723: DISABLE
2724: LD_INT 0
2726: PPUSH
2727: PPUSH
// begin enable ;
2728: ENABLE
// rnd = 0 ;
2729: LD_ADDR_VAR 0 2
2733: PUSH
2734: LD_INT 0
2736: ST_TO_ADDR
// uc_side = 8 ;
2737: LD_ADDR_OWVAR 20
2741: PUSH
2742: LD_INT 8
2744: ST_TO_ADDR
// uc_nation = 2 ;
2745: LD_ADDR_OWVAR 21
2749: PUSH
2750: LD_INT 2
2752: ST_TO_ADDR
// hc_name =  ;
2753: LD_ADDR_OWVAR 26
2757: PUSH
2758: LD_STRING 
2760: ST_TO_ADDR
// hc_gallery =  ;
2761: LD_ADDR_OWVAR 33
2765: PUSH
2766: LD_STRING 
2768: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
2769: LD_INT 0
2771: PPUSH
2772: LD_INT 4
2774: PPUSH
2775: LD_INT 10
2777: PPUSH
2778: CALL_OW 380
// un = CreateHuman ;
2782: LD_ADDR_VAR 0 1
2786: PUSH
2787: CALL_OW 44
2791: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2792: LD_VAR 0 1
2796: PPUSH
2797: LD_INT 8
2799: PUSH
2800: LD_INT 9
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 1
2809: PPUSH
2810: LD_INT 2
2812: PPUSH
2813: CALL_OW 12
2817: ARRAY
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 49
// SetTag ( un , 1 ) ;
2826: LD_VAR 0 1
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: CALL_OW 109
// rnd = Rand ( 1 , sibDeposits ) ;
2838: LD_ADDR_VAR 0 2
2842: PUSH
2843: LD_INT 1
2845: PPUSH
2846: LD_EXP 31
2850: PPUSH
2851: CALL_OW 12
2855: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
2856: LD_VAR 0 1
2860: PPUSH
2861: LD_EXP 31
2865: PUSH
2866: LD_VAR 0 2
2870: ARRAY
2871: PUSH
2872: LD_INT 1
2874: ARRAY
2875: PPUSH
2876: LD_EXP 31
2880: PUSH
2881: LD_VAR 0 2
2885: ARRAY
2886: PUSH
2887: LD_INT 2
2889: ARRAY
2890: PPUSH
2891: CALL_OW 158
// end ;
2895: PPOPN 2
2897: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do var i ;
2898: LD_INT 22
2900: PUSH
2901: LD_INT 8
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: LD_INT 3
2910: PUSH
2911: LD_INT 61
2913: PUSH
2914: EMPTY
2915: LIST
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: LD_INT 33
2923: PUSH
2924: LD_INT 2
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 69
2940: IFFALSE 3013
2942: GO 2944
2944: DISABLE
2945: LD_INT 0
2947: PPUSH
// begin enable ;
2948: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_control , control_remote ] ] ) do
2949: LD_ADDR_VAR 0 1
2953: PUSH
2954: LD_INT 22
2956: PUSH
2957: LD_INT 8
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: PUSH
2964: LD_INT 3
2966: PUSH
2967: LD_INT 61
2969: PUSH
2970: EMPTY
2971: LIST
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PUSH
2977: LD_INT 33
2979: PUSH
2980: LD_INT 2
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: LIST
2991: PPUSH
2992: CALL_OW 69
2996: PUSH
2997: FOR_IN
2998: IFFALSE 3011
// Connect ( i ) ;
3000: LD_VAR 0 1
3004: PPUSH
3005: CALL 35120 0 1
3009: GO 2997
3011: POP
3012: POP
// end ; end_of_file
3013: PPOPN 1
3015: END
// every 1 do
3016: GO 3018
3018: DISABLE
// begin InGameOn ;
3019: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3023: LD_INT 22
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: LD_INT 21
3035: PUSH
3036: LD_INT 2
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: PUSH
3052: LD_INT 1
3054: ARRAY
3055: PPUSH
3056: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3060: LD_INT 22
3062: PUSH
3063: LD_INT 1
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: LD_INT 21
3072: PUSH
3073: LD_INT 2
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: PPUSH
3084: CALL_OW 69
3088: PPUSH
3089: LD_INT 69
3091: PPUSH
3092: LD_INT 94
3094: PPUSH
3095: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3099: LD_EXP 1
3103: PPUSH
3104: LD_STRING D2-JMM-1
3106: PPUSH
3107: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3111: LD_INT 22
3113: PUSH
3114: LD_INT 1
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 21
3123: PUSH
3124: LD_INT 2
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: CALL_OW 69
3139: PUSH
3140: LD_INT 1
3142: ARRAY
3143: PPUSH
3144: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3148: LD_EXP 2
3152: PPUSH
3153: LD_STRING D2-Huck-1
3155: PPUSH
3156: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3160: LD_INT 22
3162: PUSH
3163: LD_INT 1
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 21
3172: PUSH
3173: LD_INT 2
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PPUSH
3184: CALL_OW 69
3188: PUSH
3189: LD_INT 1
3191: ARRAY
3192: PPUSH
3193: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3197: LD_EXP 1
3201: PPUSH
3202: LD_STRING D2-JMM-2
3204: PPUSH
3205: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3209: LD_INT 22
3211: PUSH
3212: LD_INT 1
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: LD_INT 21
3221: PUSH
3222: LD_INT 2
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PPUSH
3233: CALL_OW 69
3237: PUSH
3238: LD_INT 1
3240: ARRAY
3241: PPUSH
3242: CALL_OW 87
// InGameOff ;
3246: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3250: LD_STRING M1
3252: PPUSH
3253: CALL_OW 337
// SaveForQuickRestart ;
3257: CALL_OW 22
// end ;
3261: END
// every 10 10$0 do
3262: GO 3264
3264: DISABLE
// begin DialogueOn ;
3265: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3269: LD_EXP 15
3273: PPUSH
3274: LD_STRING D3-Pow-1
3276: PPUSH
3277: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3281: LD_EXP 1
3285: PPUSH
3286: LD_STRING D3-JMM-1
3288: PPUSH
3289: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3293: LD_EXP 15
3297: PPUSH
3298: LD_STRING D3-Pow-2
3300: PPUSH
3301: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3305: LD_EXP 1
3309: PPUSH
3310: LD_STRING D3-JMM-2
3312: PPUSH
3313: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3317: LD_EXP 15
3321: PPUSH
3322: LD_STRING D3-Pow-3
3324: PPUSH
3325: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3329: LD_EXP 1
3333: PPUSH
3334: LD_STRING D3-JMM-3
3336: PPUSH
3337: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3341: LD_EXP 15
3345: PPUSH
3346: LD_STRING D3-Pow-4
3348: PPUSH
3349: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3353: LD_EXP 1
3357: PPUSH
3358: LD_STRING D3-JMM-4
3360: PPUSH
3361: CALL_OW 88
// DialogueOff ;
3365: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3369: LD_STRING M2
3371: PPUSH
3372: CALL_OW 337
// wait ( 2 2$30 ) ;
3376: LD_INT 5250
3378: PPUSH
3379: CALL_OW 67
// PrepareBurlak ;
3383: CALL 1939 0 0
// BurlakArmy ;
3387: CALL 2088 0 0
// end ;
3391: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3392: LD_INT 1
3394: PPUSH
3395: LD_EXP 18
3399: PPUSH
3400: CALL_OW 292
3404: IFFALSE 3563
3406: GO 3408
3408: DISABLE
// begin DialogueOn ;
3409: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3413: LD_EXP 18
3417: PPUSH
3418: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3422: LD_INT 22
3424: PUSH
3425: LD_INT 1
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 26
3434: PUSH
3435: LD_INT 1
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: LD_INT 25
3447: PUSH
3448: LD_INT 1
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 25
3457: PUSH
3458: LD_INT 2
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: LD_INT 25
3467: PUSH
3468: LD_INT 3
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 25
3477: PUSH
3478: LD_INT 4
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PUSH
3485: LD_INT 25
3487: PUSH
3488: LD_INT 5
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: PPUSH
3508: CALL_OW 69
3512: PPUSH
3513: LD_STRING D5-Sol1-1
3515: PPUSH
3516: LD_STRING D5-FSol1-1
3518: PPUSH
3519: CALL 5850 0 3
// Say ( JMM , D5-JMM-1 ) ;
3523: LD_EXP 1
3527: PPUSH
3528: LD_STRING D5-JMM-1
3530: PPUSH
3531: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3535: LD_EXP 17
3539: PPUSH
3540: LD_STRING DAmer-Bur-1
3542: PPUSH
3543: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_STRING DAmer-JMM-1
3554: PPUSH
3555: CALL_OW 88
// DialogueOff ;
3559: CALL_OW 7
// end ;
3563: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
3564: LD_INT 4
3566: PPUSH
3567: LD_INT 22
3569: PUSH
3570: LD_INT 7
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: PPUSH
3577: CALL_OW 70
3581: IFFALSE 3980
3583: GO 3585
3585: DISABLE
3586: LD_INT 0
3588: PPUSH
// begin enable ;
3589: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
3590: LD_ADDR_VAR 0 1
3594: PUSH
3595: LD_INT 4
3597: PPUSH
3598: LD_INT 22
3600: PUSH
3601: LD_INT 7
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 70
3612: PUSH
3613: FOR_IN
3614: IFFALSE 3978
// begin if i = Burlak or i = Masha then
3616: LD_VAR 0 1
3620: PUSH
3621: LD_EXP 17
3625: EQUAL
3626: PUSH
3627: LD_VAR 0 1
3631: PUSH
3632: LD_EXP 18
3636: EQUAL
3637: OR
3638: IFFALSE 3785
// begin RemoveUnit ( i ) ;
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 64
// DialogueOn ;
3649: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3653: LD_EXP 1
3657: PPUSH
3658: LD_STRING D5a-JMM-1
3660: PPUSH
3661: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3665: LD_INT 22
3667: PUSH
3668: LD_INT 1
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 26
3677: PUSH
3678: LD_INT 1
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 2
3687: PUSH
3688: LD_INT 25
3690: PUSH
3691: LD_INT 1
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 25
3700: PUSH
3701: LD_INT 2
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 25
3710: PUSH
3711: LD_INT 3
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 25
3720: PUSH
3721: LD_INT 4
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: PUSH
3728: LD_INT 25
3730: PUSH
3731: LD_INT 5
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: PPUSH
3751: CALL_OW 69
3755: PPUSH
3756: LD_STRING D5a-Sol1-1
3758: PPUSH
3759: LD_STRING D5-FSol1-1
3761: PPUSH
3762: CALL 5850 0 3
// DialogueOff ;
3766: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3770: LD_STRING M2b
3772: PPUSH
3773: CALL_OW 337
// spawnBurlak = 0 ;
3777: LD_ADDR_EXP 27
3781: PUSH
3782: LD_INT 0
3784: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
3785: LD_VAR 0 1
3789: PPUSH
3790: CALL_OW 247
3794: PUSH
3795: LD_INT 2
3797: EQUAL
3798: PUSH
3799: LD_VAR 0 1
3803: PPUSH
3804: CALL_OW 263
3808: PUSH
3809: LD_INT 1
3811: EQUAL
3812: AND
3813: IFFALSE 3941
// begin case IsDrivenBy ( i ) of Gnyevko :
3815: LD_VAR 0 1
3819: PPUSH
3820: CALL_OW 311
3824: PUSH
3825: LD_EXP 19
3829: DOUBLE
3830: EQUAL
3831: IFTRUE 3835
3833: GO 3848
3835: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
3836: LD_INT 1
3838: PPUSH
3839: LD_STRING 13_Gnyevko_1
3841: PPUSH
3842: CALL_OW 39
3846: GO 3941
3848: LD_EXP 20
3852: DOUBLE
3853: EQUAL
3854: IFTRUE 3858
3856: GO 3871
3858: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
3859: LD_INT 1
3861: PPUSH
3862: LD_STRING 13_Titov_1
3864: PPUSH
3865: CALL_OW 39
3869: GO 3941
3871: LD_EXP 21
3875: DOUBLE
3876: EQUAL
3877: IFTRUE 3881
3879: GO 3894
3881: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
3882: LD_INT 1
3884: PPUSH
3885: LD_STRING 13_Xavier_1
3887: PPUSH
3888: CALL_OW 39
3892: GO 3941
3894: LD_EXP 22
3898: DOUBLE
3899: EQUAL
3900: IFTRUE 3904
3902: GO 3917
3904: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
3905: LD_INT 1
3907: PPUSH
3908: LD_STRING 13_Belkov_1
3910: PPUSH
3911: CALL_OW 39
3915: GO 3941
3917: LD_EXP 23
3921: DOUBLE
3922: EQUAL
3923: IFTRUE 3927
3925: GO 3940
3927: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
3928: LD_INT 1
3930: PPUSH
3931: LD_STRING 13_Lipshchin_1
3933: PPUSH
3934: CALL_OW 39
3938: GO 3941
3940: POP
// end ; if GetWeapon ( i ) = 49 then
3941: LD_VAR 0 1
3945: PPUSH
3946: CALL_OW 264
3950: PUSH
3951: LD_INT 49
3953: EQUAL
3954: IFFALSE 3967
// DestroyUnit ( i ) else
3956: LD_VAR 0 1
3960: PPUSH
3961: CALL_OW 65
3965: GO 3976
// RemoveUnit ( i ) ;
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 64
// end ;
3976: GO 3613
3978: POP
3979: POP
// end ;
3980: PPOPN 1
3982: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
3983: LD_EXP 17
3987: PPUSH
3988: CALL_OW 302
3992: PUSH
3993: LD_EXP 18
3997: PPUSH
3998: CALL_OW 256
4002: PUSH
4003: LD_INT 500
4005: LESS
4006: AND
4007: PUSH
4008: LD_EXP 18
4012: PPUSH
4013: CALL_OW 255
4017: PUSH
4018: LD_INT 7
4020: EQUAL
4021: AND
4022: IFFALSE 4042
4024: GO 4026
4026: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
4027: LD_EXP 17
4031: PPUSH
4032: LD_INT 107
4034: PPUSH
4035: LD_INT 118
4037: PPUSH
4038: CALL_OW 111
4042: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4043: LD_EXP 17
4047: PPUSH
4048: CALL_OW 301
4052: PUSH
4053: LD_EXP 27
4057: PUSH
4058: LD_INT 1
4060: EQUAL
4061: AND
4062: IFFALSE 4195
4064: GO 4066
4066: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4067: LD_EXP 1
4071: PPUSH
4072: LD_STRING D5b-JMM-1
4074: PPUSH
4075: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4079: LD_INT 22
4081: PUSH
4082: LD_INT 1
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: LD_INT 26
4091: PUSH
4092: LD_INT 1
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 2
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 1
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: LD_INT 25
4114: PUSH
4115: LD_INT 2
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 25
4124: PUSH
4125: LD_INT 3
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: PUSH
4132: LD_INT 25
4134: PUSH
4135: LD_INT 4
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 25
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PPUSH
4170: LD_STRING D5b-Sol1-1
4172: PPUSH
4173: LD_STRING 
4175: PPUSH
4176: CALL 5850 0 3
// ChangeMissionObjectives ( M2a ) ;
4180: LD_STRING M2a
4182: PPUSH
4183: CALL_OW 337
// burlakStatus = 1 ;
4187: LD_ADDR_EXP 28
4191: PUSH
4192: LD_INT 1
4194: ST_TO_ADDR
// end ;
4195: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4196: LD_EXP 2
4200: PPUSH
4201: CALL_OW 301
4205: IFFALSE 4342
4207: GO 4209
4209: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4210: LD_EXP 1
4214: PPUSH
4215: LD_STRING D6-JMM-1
4217: PPUSH
4218: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4222: LD_INT 22
4224: PUSH
4225: LD_INT 1
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: LD_INT 26
4234: PUSH
4235: LD_INT 1
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: PUSH
4242: LD_INT 2
4244: PUSH
4245: LD_INT 25
4247: PUSH
4248: LD_INT 1
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 2
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 25
4267: PUSH
4268: LD_INT 3
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: PUSH
4275: LD_INT 25
4277: PUSH
4278: LD_INT 4
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: PUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 5
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: PPUSH
4308: CALL_OW 69
4312: PPUSH
4313: LD_STRING D6-Sol1-1
4315: PPUSH
4316: LD_STRING 
4318: PPUSH
4319: CALL 5850 0 3
// Say ( JMM , D6-JMM-2 ) ;
4323: LD_EXP 1
4327: PPUSH
4328: LD_STRING D6-JMM-2
4330: PPUSH
4331: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4335: LD_STRING M1a
4337: PPUSH
4338: CALL_OW 337
// end ;
4342: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4343: LD_INT 25
4345: PPUSH
4346: LD_INT 1
4348: PPUSH
4349: CALL_OW 321
4353: PUSH
4354: LD_INT 2
4356: EQUAL
4357: IFFALSE 4374
4359: GO 4361
4361: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4362: LD_EXP 2
4366: PPUSH
4367: LD_STRING D6-Huck-2
4369: PPUSH
4370: CALL_OW 88
// end ;
4374: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4375: LD_INT 22
4377: PUSH
4378: LD_INT 1
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 2
4387: PUSH
4388: LD_INT 34
4390: PUSH
4391: LD_INT 8
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 35
4400: PUSH
4401: LD_INT 8
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PPUSH
4417: CALL_OW 69
4421: PUSH
4422: LD_INT 0
4424: GREATER
4425: IFFALSE 4617
4427: GO 4429
4429: DISABLE
4430: LD_INT 0
4432: PPUSH
4433: PPUSH
// begin enable ;
4434: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4435: LD_ADDR_VAR 0 1
4439: PUSH
4440: LD_INT 5
4442: PPUSH
4443: LD_INT 22
4445: PUSH
4446: LD_INT 1
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: PUSH
4453: LD_INT 21
4455: PUSH
4456: LD_INT 3
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 30
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 3
4475: PUSH
4476: LD_INT 57
4478: PUSH
4479: EMPTY
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PPUSH
4492: CALL_OW 70
4496: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: LD_INT 5
4504: PPUSH
4505: LD_INT 22
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 21
4517: PUSH
4518: LD_INT 3
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: LD_INT 30
4527: PUSH
4528: LD_INT 5
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 3
4537: PUSH
4538: LD_INT 57
4540: PUSH
4541: EMPTY
4542: LIST
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: PPUSH
4554: CALL_OW 70
4558: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4559: LD_VAR 0 1
4563: PUSH
4564: LD_INT 0
4566: GREATER
4567: PUSH
4568: LD_VAR 0 2
4572: PUSH
4573: LD_INT 0
4575: GREATER
4576: AND
4577: IFFALSE 4617
// begin disable ;
4579: DISABLE
// DialogueOn ;
4580: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4584: LD_EXP 1
4588: PPUSH
4589: LD_STRING D7-JMM-1
4591: PPUSH
4592: CALL_OW 88
// DialogueOff ;
4596: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4600: LD_STRING M4
4602: PPUSH
4603: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4607: LD_INT 5
4609: PPUSH
4610: LD_INT 0
4612: PPUSH
4613: CALL_OW 424
// end ; end ;
4617: PPOPN 2
4619: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4620: LD_INT 6
4622: PPUSH
4623: LD_INT 22
4625: PUSH
4626: LD_INT 1
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 25
4635: PUSH
4636: LD_INT 4
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: PPUSH
4647: CALL_OW 70
4651: PUSH
4652: LD_INT 0
4654: GREATER
4655: PUSH
4656: LD_EXP 37
4660: PUSH
4661: LD_INT 1
4663: EQUAL
4664: AND
4665: PUSH
4666: LD_EXP 29
4670: PUSH
4671: LD_INT 0
4673: EQUAL
4674: AND
4675: IFFALSE 4740
4677: GO 4679
4679: DISABLE
// begin enable ;
4680: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4681: LD_ADDR_EXP 26
4685: PUSH
4686: LD_INT 6
4688: PPUSH
4689: LD_INT 22
4691: PUSH
4692: LD_INT 1
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: PUSH
4699: LD_INT 25
4701: PUSH
4702: LD_INT 4
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: PPUSH
4713: CALL_OW 70
4717: PUSH
4718: LD_INT 1
4720: ARRAY
4721: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4722: LD_INT 6
4724: PPUSH
4725: LD_INT 0
4727: PPUSH
4728: CALL_OW 424
// radationResearched = 1 ;
4732: LD_ADDR_EXP 29
4736: PUSH
4737: LD_INT 1
4739: ST_TO_ADDR
// end ;
4740: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4741: LD_EXP 26
4745: PPUSH
4746: CALL_OW 301
4750: PUSH
4751: LD_EXP 29
4755: PUSH
4756: LD_INT 1
4758: EQUAL
4759: AND
4760: IFFALSE 4796
4762: GO 4764
4764: DISABLE
// begin enable ;
4765: ENABLE
// radationResearched = 0 ;
4766: LD_ADDR_EXP 29
4770: PUSH
4771: LD_INT 0
4773: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4774: LD_INT 6
4776: PPUSH
4777: LD_INT 1
4779: PPUSH
4780: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4784: LD_EXP 1
4788: PPUSH
4789: LD_STRING D9a-JMM-1
4791: PPUSH
4792: CALL_OW 88
// end ; end_of_file
4796: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4797: LD_VAR 0 5
4801: PUSH
4802: LD_INT 8
4804: EQUAL
4805: PUSH
4806: LD_EXP 35
4810: PUSH
4811: LD_INT 0
4813: EQUAL
4814: AND
4815: IFFALSE 4868
// begin eventVar1 = 1 ;
4817: LD_ADDR_EXP 35
4821: PUSH
4822: LD_INT 1
4824: ST_TO_ADDR
// DialogueOn ;
4825: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4829: LD_EXP 1
4833: PPUSH
4834: LD_STRING D6a-JMM-1
4836: PPUSH
4837: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4841: LD_EXP 15
4845: PPUSH
4846: LD_STRING D6a-Pow-1
4848: PPUSH
4849: CALL_OW 94
// DialogueOff ;
4853: CALL_OW 7
// wait ( 3 3$0 ) ;
4857: LD_INT 6300
4859: PPUSH
4860: CALL_OW 67
// PowellSupport ;
4864: CALL 1711 0 0
// end ; end ;
4868: PPOPN 5
4870: END
// on UnitDestroyed ( un ) do begin if un = JMM then
4871: LD_VAR 0 1
4875: PUSH
4876: LD_EXP 1
4880: EQUAL
4881: IFFALSE 4890
// YouLost ( JMM ) ;
4883: LD_STRING JMM
4885: PPUSH
4886: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
4890: LD_VAR 0 1
4894: PPUSH
4895: CALL_OW 264
4899: PUSH
4900: LD_INT 31
4902: EQUAL
4903: IFFALSE 4919
// achivCounter := achivCounter + 1 ;
4905: LD_ADDR_EXP 41
4909: PUSH
4910: LD_EXP 41
4914: PUSH
4915: LD_INT 1
4917: PLUS
4918: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
4919: LD_VAR 0 1
4923: PPUSH
4924: CALL_OW 255
4928: PUSH
4929: LD_INT 1
4931: NONEQUAL
4932: PUSH
4933: LD_VAR 0 1
4937: PPUSH
4938: CALL_OW 247
4942: PUSH
4943: LD_INT 2
4945: EQUAL
4946: AND
4947: IFFALSE 4963
// destroyCounter := destroyCounter + 1 ;
4949: LD_ADDR_EXP 42
4953: PUSH
4954: LD_EXP 42
4958: PUSH
4959: LD_INT 1
4961: PLUS
4962: ST_TO_ADDR
// end ;
4963: PPOPN 1
4965: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_EXP 18
4975: EQUAL
4976: IFFALSE 4985
// SetAchievement ( ACH_MASHA ) ;
4978: LD_STRING ACH_MASHA
4980: PPUSH
4981: CALL_OW 543
// end ;
4985: PPOPN 4
4987: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4988: LD_VAR 0 1
4992: PPUSH
4993: CALL_OW 264
4997: PUSH
4998: LD_INT 8
5000: EQUAL
5001: PUSH
5002: LD_EXP 36
5006: PUSH
5007: LD_INT 0
5009: EQUAL
5010: AND
5011: IFFALSE 5080
// begin eventVar2 = 1 ;
5013: LD_ADDR_EXP 36
5017: PUSH
5018: LD_INT 1
5020: ST_TO_ADDR
// DialogueOn ;
5021: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5025: LD_EXP 1
5029: PPUSH
5030: LD_STRING D6b-JMM-1
5032: PPUSH
5033: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5037: LD_EXP 15
5041: PPUSH
5042: LD_STRING D6b-Pow-1
5044: PPUSH
5045: CALL_OW 94
// DialogueOff ;
5049: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5053: LD_INT 5
5055: PPUSH
5056: LD_INT 1
5058: PPUSH
5059: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5063: LD_INT 7
5065: PPUSH
5066: LD_INT 1
5068: PPUSH
5069: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5073: LD_STRING M3
5075: PPUSH
5076: CALL_OW 337
// end ; end ;
5080: PPOPN 2
5082: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5083: LD_VAR 0 2
5087: PPUSH
5088: LD_VAR 0 3
5092: PPUSH
5093: LD_INT 5
5095: PPUSH
5096: CALL_OW 309
5100: PUSH
5101: LD_EXP 37
5105: PUSH
5106: LD_INT 0
5108: EQUAL
5109: AND
5110: IFFALSE 5339
// begin eventVar3 = 1 ;
5112: LD_ADDR_EXP 37
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5120: LD_INT 175
5122: PPUSH
5123: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5127: LD_INT 7
5129: PPUSH
5130: LD_INT 22
5132: PUSH
5133: LD_INT 1
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 21
5142: PUSH
5143: LD_INT 2
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 34
5152: PUSH
5153: LD_INT 11
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: PPUSH
5165: CALL_OW 70
5169: PUSH
5170: LD_INT 0
5172: GREATER
5173: IFFALSE 5192
// begin radarOnSpot = 1 ;
5175: LD_ADDR_EXP 30
5179: PUSH
5180: LD_INT 1
5182: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5183: LD_STRING M3a
5185: PPUSH
5186: CALL_OW 337
// end else
5190: GO 5199
// begin ChangeMissionObjectives ( M3b ) ;
5192: LD_STRING M3b
5194: PPUSH
5195: CALL_OW 337
// end ; DialogueOn ;
5199: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5203: LD_EXP 2
5207: PPUSH
5208: LD_STRING D8-Huck-1
5210: PPUSH
5211: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5215: LD_EXP 1
5219: PPUSH
5220: LD_STRING D8-JMM-1
5222: PPUSH
5223: CALL_OW 88
// if IsOk ( Stevens ) then
5227: LD_EXP 2
5231: PPUSH
5232: CALL_OW 302
5236: IFFALSE 5298
// begin Say ( Stevens , D8-Huck-2 ) ;
5238: LD_EXP 2
5242: PPUSH
5243: LD_STRING D8-Huck-2
5245: PPUSH
5246: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5250: LD_EXP 1
5254: PPUSH
5255: LD_STRING D8-JMM-2
5257: PPUSH
5258: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5262: LD_EXP 2
5266: PPUSH
5267: LD_STRING D8-Huck-3
5269: PPUSH
5270: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5274: LD_EXP 1
5278: PPUSH
5279: LD_STRING D8-JMM-3
5281: PPUSH
5282: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5286: LD_EXP 2
5290: PPUSH
5291: LD_STRING D8-Huck-4
5293: PPUSH
5294: CALL_OW 88
// end ; DialogueOff ;
5298: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5302: LD_INT 5
5304: PPUSH
5305: LD_INT 0
5307: PPUSH
5308: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5312: LD_INT 7
5314: PPUSH
5315: LD_INT 0
5317: PPUSH
5318: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5322: LD_INT 6
5324: PPUSH
5325: LD_INT 1
5327: PPUSH
5328: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5332: LD_STRING M5
5334: PPUSH
5335: CALL_OW 337
// end ; end ;
5339: PPOPN 3
5341: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5342: LD_EXP 26
5346: PPUSH
5347: CALL_OW 302
5351: PUSH
5352: LD_VAR 0 2
5356: PUSH
5357: LD_EXP 26
5361: EQUAL
5362: AND
5363: PUSH
5364: LD_EXP 38
5368: PUSH
5369: LD_INT 0
5371: EQUAL
5372: AND
5373: PUSH
5374: LD_EXP 37
5378: PUSH
5379: LD_INT 1
5381: EQUAL
5382: AND
5383: IFFALSE 5429
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5385: LD_VAR 0 1
5389: PPUSH
5390: LD_INT 1
5392: PPUSH
5393: CALL_OW 268
5397: PUSH
5398: LD_INT 11
5400: EQUAL
5401: PUSH
5402: LD_VAR 0 1
5406: PPUSH
5407: LD_INT 2
5409: PPUSH
5410: CALL_OW 268
5414: PUSH
5415: LD_INT 11
5417: EQUAL
5418: OR
5419: IFFALSE 5429
// eventVar4 = 1 ;
5421: LD_ADDR_EXP 38
5425: PUSH
5426: LD_INT 1
5428: ST_TO_ADDR
// end ;
5429: PPOPN 2
5431: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5432: LD_INT 0
5434: PPUSH
5435: PPUSH
// begin if GetNation ( unit ) = 2 then
5436: LD_VAR 0 1
5440: PPUSH
5441: CALL_OW 248
5445: PUSH
5446: LD_INT 2
5448: EQUAL
5449: IFFALSE 5727
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5451: LD_ADDR_EXP 32
5455: PUSH
5456: LD_EXP 32
5460: PUSH
5461: LD_INT 1
5463: PLUS
5464: ST_TO_ADDR
// for i := 1 to sibDeposits do
5465: LD_ADDR_VAR 0 4
5469: PUSH
5470: DOUBLE
5471: LD_INT 1
5473: DEC
5474: ST_TO_ADDR
5475: LD_EXP 31
5479: PUSH
5480: FOR_TO
5481: IFFALSE 5583
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5483: LD_EXP 31
5487: PUSH
5488: LD_VAR 0 4
5492: ARRAY
5493: PUSH
5494: LD_INT 1
5496: ARRAY
5497: PUSH
5498: LD_VAR 0 2
5502: EQUAL
5503: PUSH
5504: LD_EXP 31
5508: PUSH
5509: LD_VAR 0 4
5513: ARRAY
5514: PUSH
5515: LD_INT 2
5517: ARRAY
5518: PUSH
5519: LD_VAR 0 3
5523: EQUAL
5524: AND
5525: IFFALSE 5581
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5527: LD_ADDR_EXP 31
5531: PUSH
5532: LD_EXP 31
5536: PPUSH
5537: LD_VAR 0 4
5541: PUSH
5542: EMPTY
5543: LIST
5544: PUSH
5545: LD_INT 1
5547: ARRAY
5548: PPUSH
5549: CALL_OW 3
5553: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5554: LD_ADDR_EXP 31
5558: PUSH
5559: LD_EXP 31
5563: PPUSH
5564: LD_VAR 0 4
5568: PUSH
5569: EMPTY
5570: LIST
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: CALL_OW 3
5580: ST_TO_ADDR
// end ;
5581: GO 5480
5583: POP
5584: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
5585: LD_EXP 39
5589: PUSH
5590: LD_INT 0
5592: EQUAL
5593: PUSH
5594: LD_VAR 0 2
5598: PPUSH
5599: LD_VAR 0 3
5603: PPUSH
5604: CALL_OW 428
5608: PUSH
5609: LD_INT 22
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PPUSH
5619: CALL_OW 69
5623: IN
5624: AND
5625: IFFALSE 5727
// begin eventVar5 = 1 ;
5627: LD_ADDR_EXP 39
5631: PUSH
5632: LD_INT 1
5634: ST_TO_ADDR
// DialogueOn ;
5635: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5639: LD_EXP 2
5643: PPUSH
5644: LD_STRING D4-Sci1-1
5646: PPUSH
5647: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5651: LD_EXP 1
5655: PPUSH
5656: LD_STRING D4-JMM-1
5658: PPUSH
5659: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5663: LD_EXP 2
5667: PPUSH
5668: LD_STRING D4-Sci1-2
5670: PPUSH
5671: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5675: LD_EXP 1
5679: PPUSH
5680: LD_STRING D4-JMM-2
5682: PPUSH
5683: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5687: LD_EXP 2
5691: PPUSH
5692: LD_STRING D4-Sci1-3
5694: PPUSH
5695: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5699: LD_EXP 1
5703: PPUSH
5704: LD_STRING D4-JMM-3
5706: PPUSH
5707: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5711: LD_EXP 1
5715: PPUSH
5716: LD_STRING D4-JMM-3a
5718: PPUSH
5719: CALL_OW 88
// DialogueOff ;
5723: CALL_OW 7
// end ; end ; end ;
5727: PPOPN 5
5729: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5730: LD_VAR 0 1
5734: PPUSH
5735: CALL_OW 255
5739: PUSH
5740: LD_INT 1
5742: EQUAL
5743: PUSH
5744: LD_VAR 0 1
5748: PPUSH
5749: CALL_OW 266
5753: PUSH
5754: LD_INT 0
5756: EQUAL
5757: AND
5758: PUSH
5759: LD_INT 22
5761: PUSH
5762: LD_INT 1
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: LD_INT 21
5771: PUSH
5772: LD_INT 3
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 2
5781: PUSH
5782: LD_INT 30
5784: PUSH
5785: LD_INT 0
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 30
5794: PUSH
5795: LD_INT 1
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: PPUSH
5812: CALL_OW 69
5816: PUSH
5817: LD_INT 1
5819: EQUAL
5820: AND
5821: IFFALSE 5835
// SetBName ( building , omega ) ;
5823: LD_VAR 0 1
5827: PPUSH
5828: LD_STRING omega
5830: PPUSH
5831: CALL_OW 500
// end ;
5835: PPOPN 2
5837: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
5838: LD_VAR 0 1
5842: PPUSH
5843: CALL 25559 0 1
// end ; end_of_file
5847: PPOPN 1
5849: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
5850: LD_INT 0
5852: PPUSH
5853: PPUSH
5854: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
5855: LD_ADDR_VAR 0 1
5859: PUSH
5860: LD_VAR 0 1
5864: PUSH
5865: LD_EXP 1
5869: PUSH
5870: LD_EXP 2
5874: PUSH
5875: LD_EXP 3
5879: PUSH
5880: LD_EXP 4
5884: PUSH
5885: LD_EXP 5
5889: PUSH
5890: LD_EXP 6
5894: PUSH
5895: LD_EXP 7
5899: PUSH
5900: LD_EXP 8
5904: PUSH
5905: LD_EXP 9
5909: PUSH
5910: LD_EXP 10
5914: PUSH
5915: LD_EXP 11
5919: PUSH
5920: LD_EXP 12
5924: PUSH
5925: LD_EXP 13
5929: PUSH
5930: LD_EXP 14
5934: PUSH
5935: LD_EXP 15
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: DIFF
5957: ST_TO_ADDR
// if not characters then
5958: LD_VAR 0 1
5962: NOT
5963: IFFALSE 5967
// exit ;
5965: GO 6046
// speaker := characters [ rand ( 1 , characters ) ] ;
5967: LD_ADDR_VAR 0 6
5971: PUSH
5972: LD_VAR 0 1
5976: PUSH
5977: LD_INT 1
5979: PPUSH
5980: LD_VAR 0 1
5984: PPUSH
5985: CALL_OW 12
5989: ARRAY
5990: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
5991: LD_VAR 0 6
5995: PPUSH
5996: CALL_OW 258
6000: PUSH
6001: LD_INT 1
6003: EQUAL
6004: IFFALSE 6022
// Say ( speaker , dialogMID ) else
6006: LD_VAR 0 6
6010: PPUSH
6011: LD_VAR 0 2
6015: PPUSH
6016: CALL_OW 88
6020: GO 6036
// Say ( speaker , dialogFID ) ;
6022: LD_VAR 0 6
6026: PPUSH
6027: LD_VAR 0 3
6031: PPUSH
6032: CALL_OW 88
// result := speaker ;
6036: LD_ADDR_VAR 0 4
6040: PUSH
6041: LD_VAR 0 6
6045: ST_TO_ADDR
// end ;
6046: LD_VAR 0 4
6050: RET
// export function PrepareDifficulty ; begin
6051: LD_INT 0
6053: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6054: LD_INT 5
6056: PPUSH
6057: LD_INT 8
6059: PPUSH
6060: LD_INT 2
6062: PPUSH
6063: CALL_OW 322
// if difficulty = 1 then
6067: LD_OWVAR 67
6071: PUSH
6072: LD_INT 1
6074: EQUAL
6075: IFFALSE 6194
// begin SetTech ( 66 , 8 , state_researched ) ;
6077: LD_INT 66
6079: PPUSH
6080: LD_INT 8
6082: PPUSH
6083: LD_INT 2
6085: PPUSH
6086: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6090: LD_INT 67
6092: PPUSH
6093: LD_INT 8
6095: PPUSH
6096: LD_INT 0
6098: PPUSH
6099: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6103: LD_INT 68
6105: PPUSH
6106: LD_INT 8
6108: PPUSH
6109: LD_INT 0
6111: PPUSH
6112: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6116: LD_INT 51
6118: PPUSH
6119: LD_INT 8
6121: PPUSH
6122: LD_INT 2
6124: PPUSH
6125: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6129: LD_INT 52
6131: PPUSH
6132: LD_INT 8
6134: PPUSH
6135: LD_INT 0
6137: PPUSH
6138: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6142: LD_INT 53
6144: PPUSH
6145: LD_INT 8
6147: PPUSH
6148: LD_INT 0
6150: PPUSH
6151: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6155: LD_INT 60
6157: PPUSH
6158: LD_INT 8
6160: PPUSH
6161: LD_INT 2
6163: PPUSH
6164: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6168: LD_INT 61
6170: PPUSH
6171: LD_INT 8
6173: PPUSH
6174: LD_INT 0
6176: PPUSH
6177: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6181: LD_INT 62
6183: PPUSH
6184: LD_INT 8
6186: PPUSH
6187: LD_INT 0
6189: PPUSH
6190: CALL_OW 322
// end ; if difficulty = 2 then
6194: LD_OWVAR 67
6198: PUSH
6199: LD_INT 2
6201: EQUAL
6202: IFFALSE 6321
// begin SetTech ( 66 , 8 , state_researched ) ;
6204: LD_INT 66
6206: PPUSH
6207: LD_INT 8
6209: PPUSH
6210: LD_INT 2
6212: PPUSH
6213: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6217: LD_INT 67
6219: PPUSH
6220: LD_INT 8
6222: PPUSH
6223: LD_INT 2
6225: PPUSH
6226: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6230: LD_INT 68
6232: PPUSH
6233: LD_INT 8
6235: PPUSH
6236: LD_INT 0
6238: PPUSH
6239: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6243: LD_INT 51
6245: PPUSH
6246: LD_INT 8
6248: PPUSH
6249: LD_INT 2
6251: PPUSH
6252: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6256: LD_INT 52
6258: PPUSH
6259: LD_INT 8
6261: PPUSH
6262: LD_INT 2
6264: PPUSH
6265: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6269: LD_INT 53
6271: PPUSH
6272: LD_INT 8
6274: PPUSH
6275: LD_INT 2
6277: PPUSH
6278: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6282: LD_INT 60
6284: PPUSH
6285: LD_INT 8
6287: PPUSH
6288: LD_INT 2
6290: PPUSH
6291: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6295: LD_INT 61
6297: PPUSH
6298: LD_INT 8
6300: PPUSH
6301: LD_INT 2
6303: PPUSH
6304: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6308: LD_INT 62
6310: PPUSH
6311: LD_INT 8
6313: PPUSH
6314: LD_INT 0
6316: PPUSH
6317: CALL_OW 322
// end ; if difficulty = 3 then
6321: LD_OWVAR 67
6325: PUSH
6326: LD_INT 3
6328: EQUAL
6329: IFFALSE 6448
// begin SetTech ( 66 , 8 , state_researched ) ;
6331: LD_INT 66
6333: PPUSH
6334: LD_INT 8
6336: PPUSH
6337: LD_INT 2
6339: PPUSH
6340: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6344: LD_INT 67
6346: PPUSH
6347: LD_INT 8
6349: PPUSH
6350: LD_INT 2
6352: PPUSH
6353: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6357: LD_INT 68
6359: PPUSH
6360: LD_INT 8
6362: PPUSH
6363: LD_INT 0
6365: PPUSH
6366: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6370: LD_INT 51
6372: PPUSH
6373: LD_INT 8
6375: PPUSH
6376: LD_INT 2
6378: PPUSH
6379: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6383: LD_INT 52
6385: PPUSH
6386: LD_INT 8
6388: PPUSH
6389: LD_INT 2
6391: PPUSH
6392: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6396: LD_INT 53
6398: PPUSH
6399: LD_INT 8
6401: PPUSH
6402: LD_INT 2
6404: PPUSH
6405: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6409: LD_INT 60
6411: PPUSH
6412: LD_INT 8
6414: PPUSH
6415: LD_INT 2
6417: PPUSH
6418: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6422: LD_INT 61
6424: PPUSH
6425: LD_INT 8
6427: PPUSH
6428: LD_INT 2
6430: PPUSH
6431: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6435: LD_INT 62
6437: PPUSH
6438: LD_INT 8
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 322
// end ; end ;
6448: LD_VAR 0 1
6452: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6453: LD_INT 0
6455: PPUSH
6456: PPUSH
6457: PPUSH
6458: PPUSH
6459: PPUSH
6460: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6461: LD_ADDR_VAR 0 7
6465: PUSH
6466: LD_INT 22
6468: PUSH
6469: LD_VAR 0 1
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: LD_INT 25
6480: PUSH
6481: LD_INT 9
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6497: LD_ADDR_VAR 0 8
6501: PUSH
6502: LD_INT 22
6504: PUSH
6505: LD_VAR 0 2
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 3
6516: PUSH
6517: LD_INT 21
6519: PUSH
6520: LD_INT 3
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6540: LD_ADDR_VAR 0 5
6544: PUSH
6545: LD_INT 1
6547: PPUSH
6548: LD_INT 3
6550: PPUSH
6551: CALL_OW 12
6555: ST_TO_ADDR
// for i = 1 to list do
6556: LD_ADDR_VAR 0 6
6560: PUSH
6561: DOUBLE
6562: LD_INT 1
6564: DEC
6565: ST_TO_ADDR
6566: LD_VAR 0 7
6570: PUSH
6571: FOR_TO
6572: IFFALSE 6754
// for ta in filter do
6574: LD_ADDR_VAR 0 4
6578: PUSH
6579: LD_VAR 0 8
6583: PUSH
6584: FOR_IN
6585: IFFALSE 6750
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6587: LD_VAR 0 7
6591: PUSH
6592: LD_VAR 0 6
6596: ARRAY
6597: PPUSH
6598: LD_VAR 0 4
6602: PPUSH
6603: CALL_OW 296
6607: PUSH
6608: LD_INT 13
6610: LESSEQUAL
6611: IFFALSE 6748
// begin case c of 1 :
6613: LD_VAR 0 5
6617: PUSH
6618: LD_INT 1
6620: DOUBLE
6621: EQUAL
6622: IFTRUE 6626
6624: GO 6664
6626: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6627: LD_VAR 0 7
6631: PUSH
6632: LD_VAR 0 6
6636: ARRAY
6637: PPUSH
6638: LD_VAR 0 4
6642: PPUSH
6643: CALL_OW 250
6647: PPUSH
6648: LD_VAR 0 4
6652: PPUSH
6653: CALL_OW 251
6657: PPUSH
6658: CALL_OW 154
6662: GO 6748
6664: LD_INT 2
6666: DOUBLE
6667: EQUAL
6668: IFTRUE 6672
6670: GO 6736
6672: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6673: LD_VAR 0 7
6677: PUSH
6678: LD_VAR 0 6
6682: ARRAY
6683: PPUSH
6684: LD_VAR 0 4
6688: PPUSH
6689: CALL_OW 250
6693: PUSH
6694: LD_INT 1
6696: NEG
6697: PPUSH
6698: LD_INT 1
6700: PPUSH
6701: CALL_OW 12
6705: PLUS
6706: PPUSH
6707: LD_VAR 0 4
6711: PPUSH
6712: CALL_OW 251
6716: PUSH
6717: LD_INT 1
6719: NEG
6720: PPUSH
6721: LD_INT 1
6723: PPUSH
6724: CALL_OW 12
6728: PLUS
6729: PPUSH
6730: CALL_OW 153
6734: GO 6748
6736: LD_INT 3
6738: DOUBLE
6739: EQUAL
6740: IFTRUE 6744
6742: GO 6747
6744: POP
// ; end ;
6745: GO 6748
6747: POP
// end ; end ;
6748: GO 6584
6750: POP
6751: POP
6752: GO 6571
6754: POP
6755: POP
// end ;
6756: LD_VAR 0 3
6760: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6761: LD_INT 0
6763: PPUSH
6764: PPUSH
// for i in charactersList do
6765: LD_ADDR_VAR 0 4
6769: PUSH
6770: LD_VAR 0 1
6774: PUSH
6775: FOR_IN
6776: IFFALSE 6794
// SaveCharacters ( i , ident ) ;
6778: LD_VAR 0 4
6782: PPUSH
6783: LD_VAR 0 2
6787: PPUSH
6788: CALL_OW 38
6792: GO 6775
6794: POP
6795: POP
// end ;
6796: LD_VAR 0 3
6800: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6801: LD_INT 0
6803: PPUSH
6804: PPUSH
6805: PPUSH
6806: PPUSH
6807: PPUSH
6808: PPUSH
6809: PPUSH
6810: PPUSH
6811: PPUSH
6812: PPUSH
6813: PPUSH
// for i = 1 to medicCount do
6814: LD_ADDR_VAR 0 13
6818: PUSH
6819: DOUBLE
6820: LD_INT 1
6822: DEC
6823: ST_TO_ADDR
6824: LD_VAR 0 7
6828: PUSH
6829: FOR_TO
6830: IFFALSE 6912
// begin uc_side = side ;
6832: LD_ADDR_OWVAR 20
6836: PUSH
6837: LD_VAR 0 1
6841: ST_TO_ADDR
// uc_nation = nation ;
6842: LD_ADDR_OWVAR 21
6846: PUSH
6847: LD_VAR 0 2
6851: ST_TO_ADDR
// hc_name =  ;
6852: LD_ADDR_OWVAR 26
6856: PUSH
6857: LD_STRING 
6859: ST_TO_ADDR
// hc_gallery =  ;
6860: LD_ADDR_OWVAR 33
6864: PUSH
6865: LD_STRING 
6867: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6868: LD_INT 0
6870: PPUSH
6871: LD_INT 4
6873: PPUSH
6874: LD_VAR 0 8
6878: PPUSH
6879: CALL_OW 380
// un = CreateHuman ;
6883: LD_ADDR_VAR 0 15
6887: PUSH
6888: CALL_OW 44
6892: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6893: LD_VAR 0 15
6897: PPUSH
6898: LD_VAR 0 9
6902: PPUSH
6903: LD_INT 0
6905: PPUSH
6906: CALL_OW 49
// end ;
6910: GO 6829
6912: POP
6913: POP
// for i = 1 to soldierCount do
6914: LD_ADDR_VAR 0 13
6918: PUSH
6919: DOUBLE
6920: LD_INT 1
6922: DEC
6923: ST_TO_ADDR
6924: LD_VAR 0 3
6928: PUSH
6929: FOR_TO
6930: IFFALSE 7012
// begin uc_side = side ;
6932: LD_ADDR_OWVAR 20
6936: PUSH
6937: LD_VAR 0 1
6941: ST_TO_ADDR
// uc_nation = nation ;
6942: LD_ADDR_OWVAR 21
6946: PUSH
6947: LD_VAR 0 2
6951: ST_TO_ADDR
// hc_name =  ;
6952: LD_ADDR_OWVAR 26
6956: PUSH
6957: LD_STRING 
6959: ST_TO_ADDR
// hc_gallery =  ;
6960: LD_ADDR_OWVAR 33
6964: PUSH
6965: LD_STRING 
6967: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6968: LD_INT 0
6970: PPUSH
6971: LD_INT 1
6973: PPUSH
6974: LD_VAR 0 8
6978: PPUSH
6979: CALL_OW 380
// un = CreateHuman ;
6983: LD_ADDR_VAR 0 15
6987: PUSH
6988: CALL_OW 44
6992: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6993: LD_VAR 0 15
6997: PPUSH
6998: LD_VAR 0 9
7002: PPUSH
7003: LD_INT 0
7005: PPUSH
7006: CALL_OW 49
// end ;
7010: GO 6929
7012: POP
7013: POP
// for i = 1 to sniperCount do
7014: LD_ADDR_VAR 0 13
7018: PUSH
7019: DOUBLE
7020: LD_INT 1
7022: DEC
7023: ST_TO_ADDR
7024: LD_VAR 0 4
7028: PUSH
7029: FOR_TO
7030: IFFALSE 7112
// begin uc_side = side ;
7032: LD_ADDR_OWVAR 20
7036: PUSH
7037: LD_VAR 0 1
7041: ST_TO_ADDR
// uc_nation = nation ;
7042: LD_ADDR_OWVAR 21
7046: PUSH
7047: LD_VAR 0 2
7051: ST_TO_ADDR
// hc_name =  ;
7052: LD_ADDR_OWVAR 26
7056: PUSH
7057: LD_STRING 
7059: ST_TO_ADDR
// hc_gallery =  ;
7060: LD_ADDR_OWVAR 33
7064: PUSH
7065: LD_STRING 
7067: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7068: LD_INT 0
7070: PPUSH
7071: LD_INT 5
7073: PPUSH
7074: LD_VAR 0 8
7078: PPUSH
7079: CALL_OW 380
// un = CreateHuman ;
7083: LD_ADDR_VAR 0 15
7087: PUSH
7088: CALL_OW 44
7092: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7093: LD_VAR 0 15
7097: PPUSH
7098: LD_VAR 0 9
7102: PPUSH
7103: LD_INT 0
7105: PPUSH
7106: CALL_OW 49
// end ;
7110: GO 7029
7112: POP
7113: POP
// for i = 1 to bazookCount do
7114: LD_ADDR_VAR 0 13
7118: PUSH
7119: DOUBLE
7120: LD_INT 1
7122: DEC
7123: ST_TO_ADDR
7124: LD_VAR 0 5
7128: PUSH
7129: FOR_TO
7130: IFFALSE 7212
// begin uc_side = side ;
7132: LD_ADDR_OWVAR 20
7136: PUSH
7137: LD_VAR 0 1
7141: ST_TO_ADDR
// uc_nation = nation ;
7142: LD_ADDR_OWVAR 21
7146: PUSH
7147: LD_VAR 0 2
7151: ST_TO_ADDR
// hc_name =  ;
7152: LD_ADDR_OWVAR 26
7156: PUSH
7157: LD_STRING 
7159: ST_TO_ADDR
// hc_gallery =  ;
7160: LD_ADDR_OWVAR 33
7164: PUSH
7165: LD_STRING 
7167: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7168: LD_INT 0
7170: PPUSH
7171: LD_INT 9
7173: PPUSH
7174: LD_VAR 0 8
7178: PPUSH
7179: CALL_OW 380
// un = CreateHuman ;
7183: LD_ADDR_VAR 0 15
7187: PUSH
7188: CALL_OW 44
7192: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7193: LD_VAR 0 15
7197: PPUSH
7198: LD_VAR 0 9
7202: PPUSH
7203: LD_INT 0
7205: PPUSH
7206: CALL_OW 49
// end ;
7210: GO 7129
7212: POP
7213: POP
// for i = 1 to mortalCount do
7214: LD_ADDR_VAR 0 13
7218: PUSH
7219: DOUBLE
7220: LD_INT 1
7222: DEC
7223: ST_TO_ADDR
7224: LD_VAR 0 6
7228: PUSH
7229: FOR_TO
7230: IFFALSE 7312
// begin uc_side = side ;
7232: LD_ADDR_OWVAR 20
7236: PUSH
7237: LD_VAR 0 1
7241: ST_TO_ADDR
// uc_nation = nation ;
7242: LD_ADDR_OWVAR 21
7246: PUSH
7247: LD_VAR 0 2
7251: ST_TO_ADDR
// hc_name =  ;
7252: LD_ADDR_OWVAR 26
7256: PUSH
7257: LD_STRING 
7259: ST_TO_ADDR
// hc_gallery =  ;
7260: LD_ADDR_OWVAR 33
7264: PUSH
7265: LD_STRING 
7267: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7268: LD_INT 0
7270: PPUSH
7271: LD_INT 8
7273: PPUSH
7274: LD_VAR 0 8
7278: PPUSH
7279: CALL_OW 380
// un = CreateHuman ;
7283: LD_ADDR_VAR 0 15
7287: PUSH
7288: CALL_OW 44
7292: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7293: LD_VAR 0 15
7297: PPUSH
7298: LD_VAR 0 9
7302: PPUSH
7303: LD_INT 0
7305: PPUSH
7306: CALL_OW 49
// end ;
7310: GO 7229
7312: POP
7313: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7314: LD_ADDR_VAR 0 17
7318: PUSH
7319: LD_INT 22
7321: PUSH
7322: LD_VAR 0 1
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 25
7333: PUSH
7334: LD_INT 4
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PPUSH
7345: CALL_OW 69
7349: ST_TO_ADDR
// for i in medic_list do
7350: LD_ADDR_VAR 0 13
7354: PUSH
7355: LD_VAR 0 17
7359: PUSH
7360: FOR_IN
7361: IFFALSE 7396
// if GetTag ( i ) = 1 then
7363: LD_VAR 0 13
7367: PPUSH
7368: CALL_OW 110
7372: PUSH
7373: LD_INT 1
7375: EQUAL
7376: IFFALSE 7394
// medic_list := medic_list diff i ;
7378: LD_ADDR_VAR 0 17
7382: PUSH
7383: LD_VAR 0 17
7387: PUSH
7388: LD_VAR 0 13
7392: DIFF
7393: ST_TO_ADDR
7394: GO 7360
7396: POP
7397: POP
// for i in medic_list do
7398: LD_ADDR_VAR 0 13
7402: PUSH
7403: LD_VAR 0 17
7407: PUSH
7408: FOR_IN
7409: IFFALSE 7427
// ComMoveToArea ( i , healArea ) ;
7411: LD_VAR 0 13
7415: PPUSH
7416: LD_VAR 0 10
7420: PPUSH
7421: CALL_OW 113
7425: GO 7408
7427: POP
7428: POP
// repeat wait ( 0 0$1 ) ;
7429: LD_INT 35
7431: PPUSH
7432: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7436: LD_ADDR_VAR 0 16
7440: PUSH
7441: LD_INT 22
7443: PUSH
7444: LD_VAR 0 1
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 1
7455: PUSH
7456: LD_INT 3
7458: PUSH
7459: LD_INT 24
7461: PUSH
7462: LD_INT 550
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 24
7475: PUSH
7476: LD_INT 250
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: LIST
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PPUSH
7492: CALL_OW 69
7496: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7497: LD_ADDR_VAR 0 18
7501: PUSH
7502: LD_INT 22
7504: PUSH
7505: LD_VAR 0 1
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 25
7519: PUSH
7520: LD_INT 1
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PUSH
7527: LD_INT 25
7529: PUSH
7530: LD_INT 5
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 25
7539: PUSH
7540: LD_INT 8
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 25
7549: PUSH
7550: LD_INT 9
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 24
7566: PUSH
7567: LD_INT 1000
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: LIST
7578: PPUSH
7579: CALL_OW 69
7583: ST_TO_ADDR
// if medicCount > 0 then
7584: LD_VAR 0 7
7588: PUSH
7589: LD_INT 0
7591: GREATER
7592: IFFALSE 7666
// begin if damageUnit_list > 0 then
7594: LD_VAR 0 16
7598: PUSH
7599: LD_INT 0
7601: GREATER
7602: IFFALSE 7666
// begin for i in damageUnit_list do
7604: LD_ADDR_VAR 0 13
7608: PUSH
7609: LD_VAR 0 16
7613: PUSH
7614: FOR_IN
7615: IFFALSE 7664
// begin ComMoveToArea ( i , healArea ) ;
7617: LD_VAR 0 13
7621: PPUSH
7622: LD_VAR 0 10
7626: PPUSH
7627: CALL_OW 113
// for j in medic_list do
7631: LD_ADDR_VAR 0 14
7635: PUSH
7636: LD_VAR 0 17
7640: PUSH
7641: FOR_IN
7642: IFFALSE 7660
// AddComHeal ( j , i ) ;
7644: LD_VAR 0 14
7648: PPUSH
7649: LD_VAR 0 13
7653: PPUSH
7654: CALL_OW 188
7658: GO 7641
7660: POP
7661: POP
// end ;
7662: GO 7614
7664: POP
7665: POP
// end ; end ; for i in soldiersOK_list do
7666: LD_ADDR_VAR 0 13
7670: PUSH
7671: LD_VAR 0 18
7675: PUSH
7676: FOR_IN
7677: IFFALSE 7853
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7679: LD_ADDR_VAR 0 21
7683: PUSH
7684: LD_INT 22
7686: PUSH
7687: LD_VAR 0 11
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PPUSH
7696: CALL_OW 69
7700: PPUSH
7701: LD_VAR 0 13
7705: PPUSH
7706: CALL_OW 74
7710: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7711: LD_ADDR_VAR 0 22
7715: PUSH
7716: LD_INT 22
7718: PUSH
7719: LD_VAR 0 11
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 2
7730: PUSH
7731: LD_INT 59
7733: PUSH
7734: EMPTY
7735: LIST
7736: PUSH
7737: LD_INT 21
7739: PUSH
7740: LD_INT 1
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 21
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: PPUSH
7770: CALL_OW 69
7774: PPUSH
7775: LD_VAR 0 13
7779: PPUSH
7780: CALL_OW 74
7784: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7785: LD_VAR 0 13
7789: PPUSH
7790: LD_VAR 0 21
7794: PPUSH
7795: CALL_OW 296
7799: PUSH
7800: LD_INT 8
7802: PLUS
7803: PUSH
7804: LD_VAR 0 13
7808: PPUSH
7809: LD_VAR 0 22
7813: PPUSH
7814: CALL_OW 296
7818: LESS
7819: IFFALSE 7837
// begin ComAttackUnit ( i , target1 ) ;
7821: LD_VAR 0 13
7825: PPUSH
7826: LD_VAR 0 21
7830: PPUSH
7831: CALL_OW 115
// end else
7835: GO 7851
// begin ComAttackUnit ( i , target2 ) ;
7837: LD_VAR 0 13
7841: PPUSH
7842: LD_VAR 0 22
7846: PPUSH
7847: CALL_OW 115
// end ; end ;
7851: GO 7676
7853: POP
7854: POP
// until soldiersOK_list = [ ] ;
7855: LD_VAR 0 18
7859: PUSH
7860: EMPTY
7861: EQUAL
7862: IFFALSE 7429
// end ;
7864: LD_VAR 0 12
7868: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7869: LD_INT 0
7871: PPUSH
7872: PPUSH
7873: PPUSH
7874: PPUSH
7875: PPUSH
7876: PPUSH
7877: PPUSH
7878: PPUSH
7879: PPUSH
7880: PPUSH
7881: PPUSH
// amChassisTab = [ ] ;
7882: LD_ADDR_VAR 0 19
7886: PUSH
7887: EMPTY
7888: ST_TO_ADDR
// arChassisTab = [ ] ;
7889: LD_ADDR_VAR 0 18
7893: PUSH
7894: EMPTY
7895: ST_TO_ADDR
// ruChassisTab = [ ] ;
7896: LD_ADDR_VAR 0 17
7900: PUSH
7901: EMPTY
7902: ST_TO_ADDR
// for i = 1 to vehCount do
7903: LD_ADDR_VAR 0 13
7907: PUSH
7908: DOUBLE
7909: LD_INT 1
7911: DEC
7912: ST_TO_ADDR
7913: LD_VAR 0 3
7917: PUSH
7918: FOR_TO
7919: IFFALSE 9343
// begin wait ( 0 0$01 ) ;
7921: LD_INT 35
7923: PPUSH
7924: CALL_OW 67
// if nation = 1 then
7928: LD_VAR 0 5
7932: PUSH
7933: LD_INT 1
7935: EQUAL
7936: IFFALSE 8417
// begin uc_side = side ;
7938: LD_ADDR_OWVAR 20
7942: PUSH
7943: LD_VAR 0 2
7947: ST_TO_ADDR
// uc_nation = nation ;
7948: LD_ADDR_OWVAR 21
7952: PUSH
7953: LD_VAR 0 5
7957: ST_TO_ADDR
// vc_engine = vehengine ;
7958: LD_ADDR_OWVAR 39
7962: PUSH
7963: LD_VAR 0 6
7967: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7968: LD_ADDR_OWVAR 40
7972: PUSH
7973: LD_VAR 0 10
7977: PUSH
7978: LD_INT 1
7980: PPUSH
7981: LD_VAR 0 10
7985: PPUSH
7986: CALL_OW 12
7990: ARRAY
7991: ST_TO_ADDR
// for j = 1 to AMWeapon do
7992: LD_ADDR_VAR 0 14
7996: PUSH
7997: DOUBLE
7998: LD_INT 1
8000: DEC
8001: ST_TO_ADDR
8002: LD_VAR 0 10
8006: PUSH
8007: FOR_TO
8008: IFFALSE 8309
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8010: LD_VAR 0 10
8014: PUSH
8015: LD_VAR 0 14
8019: ARRAY
8020: PUSH
8021: LD_INT 2
8023: EQUAL
8024: PUSH
8025: LD_VAR 0 10
8029: PUSH
8030: LD_VAR 0 14
8034: ARRAY
8035: PUSH
8036: LD_INT 3
8038: EQUAL
8039: OR
8040: IFFALSE 8093
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8042: LD_ADDR_VAR 0 19
8046: PUSH
8047: LD_INT 1
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: LD_INT 3
8055: PUSH
8056: LD_INT 4
8058: PUSH
8059: LD_INT 5
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8069: LD_ADDR_OWVAR 37
8073: PUSH
8074: LD_VAR 0 19
8078: PUSH
8079: LD_INT 1
8081: PPUSH
8082: LD_VAR 0 19
8086: PPUSH
8087: CALL_OW 12
8091: ARRAY
8092: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8093: LD_VAR 0 10
8097: PUSH
8098: LD_VAR 0 14
8102: ARRAY
8103: PUSH
8104: LD_INT 4
8106: EQUAL
8107: PUSH
8108: LD_VAR 0 10
8112: PUSH
8113: LD_VAR 0 14
8117: ARRAY
8118: PUSH
8119: LD_INT 5
8121: EQUAL
8122: OR
8123: PUSH
8124: LD_VAR 0 10
8128: PUSH
8129: LD_VAR 0 14
8133: ARRAY
8134: PUSH
8135: LD_INT 9
8137: EQUAL
8138: OR
8139: PUSH
8140: LD_VAR 0 10
8144: PUSH
8145: LD_VAR 0 14
8149: ARRAY
8150: PUSH
8151: LD_INT 11
8153: EQUAL
8154: OR
8155: PUSH
8156: LD_VAR 0 10
8160: PUSH
8161: LD_VAR 0 14
8165: ARRAY
8166: PUSH
8167: LD_INT 7
8169: EQUAL
8170: OR
8171: IFFALSE 8220
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8173: LD_ADDR_VAR 0 19
8177: PUSH
8178: LD_INT 2
8180: PUSH
8181: LD_INT 3
8183: PUSH
8184: LD_INT 4
8186: PUSH
8187: LD_INT 5
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8196: LD_ADDR_OWVAR 37
8200: PUSH
8201: LD_VAR 0 19
8205: PUSH
8206: LD_INT 1
8208: PPUSH
8209: LD_VAR 0 19
8213: PPUSH
8214: CALL_OW 12
8218: ARRAY
8219: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8220: LD_VAR 0 10
8224: PUSH
8225: LD_VAR 0 14
8229: ARRAY
8230: PUSH
8231: LD_INT 8
8233: EQUAL
8234: PUSH
8235: LD_VAR 0 10
8239: PUSH
8240: LD_VAR 0 14
8244: ARRAY
8245: PUSH
8246: LD_INT 6
8248: EQUAL
8249: OR
8250: PUSH
8251: LD_VAR 0 10
8255: PUSH
8256: LD_VAR 0 14
8260: ARRAY
8261: PUSH
8262: LD_INT 10
8264: EQUAL
8265: OR
8266: IFFALSE 8307
// begin amChassisTab = [ 4 , 5 ] ;
8268: LD_ADDR_VAR 0 19
8272: PUSH
8273: LD_INT 4
8275: PUSH
8276: LD_INT 5
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8283: LD_ADDR_OWVAR 37
8287: PUSH
8288: LD_VAR 0 19
8292: PUSH
8293: LD_INT 1
8295: PPUSH
8296: LD_VAR 0 19
8300: PPUSH
8301: CALL_OW 12
8305: ARRAY
8306: ST_TO_ADDR
// end ; end ;
8307: GO 8007
8309: POP
8310: POP
// veh = CreateVehicle ;
8311: LD_ADDR_VAR 0 16
8315: PUSH
8316: CALL_OW 45
8320: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8321: LD_VAR 0 16
8325: PPUSH
8326: LD_VAR 0 1
8330: PPUSH
8331: LD_INT 0
8333: PPUSH
8334: CALL_OW 49
// if vc_control = 1 then
8338: LD_OWVAR 38
8342: PUSH
8343: LD_INT 1
8345: EQUAL
8346: IFFALSE 8403
// begin hc_gallery =  ;
8348: LD_ADDR_OWVAR 33
8352: PUSH
8353: LD_STRING 
8355: ST_TO_ADDR
// hc_name =  ;
8356: LD_ADDR_OWVAR 26
8360: PUSH
8361: LD_STRING 
8363: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8364: LD_INT 0
8366: PPUSH
8367: LD_INT 3
8369: PPUSH
8370: LD_VAR 0 4
8374: PPUSH
8375: CALL_OW 380
// un = CreateHuman ;
8379: LD_ADDR_VAR 0 15
8383: PUSH
8384: CALL_OW 44
8388: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8389: LD_VAR 0 15
8393: PPUSH
8394: LD_VAR 0 16
8398: PPUSH
8399: CALL_OW 52
// end ; i = i + 1 ;
8403: LD_ADDR_VAR 0 13
8407: PUSH
8408: LD_VAR 0 13
8412: PUSH
8413: LD_INT 1
8415: PLUS
8416: ST_TO_ADDR
// end ; if nation = 2 then
8417: LD_VAR 0 5
8421: PUSH
8422: LD_INT 2
8424: EQUAL
8425: IFFALSE 8927
// begin uc_side = side ;
8427: LD_ADDR_OWVAR 20
8431: PUSH
8432: LD_VAR 0 2
8436: ST_TO_ADDR
// uc_nation = nation ;
8437: LD_ADDR_OWVAR 21
8441: PUSH
8442: LD_VAR 0 5
8446: ST_TO_ADDR
// vc_engine = vehengine ;
8447: LD_ADDR_OWVAR 39
8451: PUSH
8452: LD_VAR 0 6
8456: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8457: LD_INT 22
8459: PUSH
8460: LD_VAR 0 2
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 21
8471: PUSH
8472: LD_INT 2
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 33
8481: PUSH
8482: LD_INT 2
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 50
8491: PUSH
8492: EMPTY
8493: LIST
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: PPUSH
8501: CALL_OW 69
8505: PUSH
8506: LD_INT 8
8508: LESSEQUAL
8509: IFFALSE 8537
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8511: LD_ADDR_OWVAR 38
8515: PUSH
8516: LD_VAR 0 7
8520: PUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_VAR 0 7
8528: PPUSH
8529: CALL_OW 12
8533: ARRAY
8534: ST_TO_ADDR
8535: GO 8545
// vc_control = control_apeman ;
8537: LD_ADDR_OWVAR 38
8541: PUSH
8542: LD_INT 5
8544: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8545: LD_ADDR_OWVAR 40
8549: PUSH
8550: LD_VAR 0 9
8554: PUSH
8555: LD_INT 1
8557: PPUSH
8558: LD_VAR 0 9
8562: PPUSH
8563: CALL_OW 12
8567: ARRAY
8568: ST_TO_ADDR
// for j = 1 to ARWeapons do
8569: LD_ADDR_VAR 0 14
8573: PUSH
8574: DOUBLE
8575: LD_INT 1
8577: DEC
8578: ST_TO_ADDR
8579: LD_VAR 0 9
8583: PUSH
8584: FOR_TO
8585: IFFALSE 8819
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8587: LD_VAR 0 9
8591: PUSH
8592: LD_VAR 0 14
8596: ARRAY
8597: PUSH
8598: LD_INT 24
8600: EQUAL
8601: PUSH
8602: LD_VAR 0 9
8606: PUSH
8607: LD_VAR 0 14
8611: ARRAY
8612: PUSH
8613: LD_INT 22
8615: EQUAL
8616: OR
8617: PUSH
8618: LD_VAR 0 9
8622: PUSH
8623: LD_VAR 0 14
8627: ARRAY
8628: PUSH
8629: LD_INT 23
8631: EQUAL
8632: OR
8633: PUSH
8634: LD_VAR 0 9
8638: PUSH
8639: LD_VAR 0 14
8643: ARRAY
8644: PUSH
8645: LD_INT 30
8647: EQUAL
8648: OR
8649: IFFALSE 8698
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8651: LD_ADDR_VAR 0 18
8655: PUSH
8656: LD_INT 11
8658: PUSH
8659: LD_INT 12
8661: PUSH
8662: LD_INT 13
8664: PUSH
8665: LD_INT 14
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8674: LD_ADDR_OWVAR 37
8678: PUSH
8679: LD_VAR 0 18
8683: PUSH
8684: LD_INT 1
8686: PPUSH
8687: LD_VAR 0 18
8691: PPUSH
8692: CALL_OW 12
8696: ARRAY
8697: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8698: LD_VAR 0 9
8702: PUSH
8703: LD_VAR 0 14
8707: ARRAY
8708: PUSH
8709: LD_INT 29
8711: EQUAL
8712: PUSH
8713: LD_VAR 0 9
8717: PUSH
8718: LD_VAR 0 14
8722: ARRAY
8723: PUSH
8724: LD_INT 28
8726: EQUAL
8727: OR
8728: PUSH
8729: LD_VAR 0 9
8733: PUSH
8734: LD_VAR 0 14
8738: ARRAY
8739: PUSH
8740: LD_INT 27
8742: EQUAL
8743: OR
8744: PUSH
8745: LD_VAR 0 9
8749: PUSH
8750: LD_VAR 0 14
8754: ARRAY
8755: PUSH
8756: LD_INT 26
8758: EQUAL
8759: OR
8760: PUSH
8761: LD_VAR 0 9
8765: PUSH
8766: LD_VAR 0 14
8770: ARRAY
8771: PUSH
8772: LD_INT 25
8774: EQUAL
8775: OR
8776: IFFALSE 8817
// begin arChassisTab = [ 13 , 14 ] ;
8778: LD_ADDR_VAR 0 18
8782: PUSH
8783: LD_INT 13
8785: PUSH
8786: LD_INT 14
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8793: LD_ADDR_OWVAR 37
8797: PUSH
8798: LD_VAR 0 18
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_VAR 0 18
8810: PPUSH
8811: CALL_OW 12
8815: ARRAY
8816: ST_TO_ADDR
// end ; end ;
8817: GO 8584
8819: POP
8820: POP
// veh = CreateVehicle ;
8821: LD_ADDR_VAR 0 16
8825: PUSH
8826: CALL_OW 45
8830: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8831: LD_VAR 0 16
8835: PPUSH
8836: LD_VAR 0 1
8840: PPUSH
8841: LD_INT 0
8843: PPUSH
8844: CALL_OW 49
// if vc_control = 1 then
8848: LD_OWVAR 38
8852: PUSH
8853: LD_INT 1
8855: EQUAL
8856: IFFALSE 8913
// begin hc_gallery =  ;
8858: LD_ADDR_OWVAR 33
8862: PUSH
8863: LD_STRING 
8865: ST_TO_ADDR
// hc_name =  ;
8866: LD_ADDR_OWVAR 26
8870: PUSH
8871: LD_STRING 
8873: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8874: LD_INT 0
8876: PPUSH
8877: LD_INT 3
8879: PPUSH
8880: LD_VAR 0 4
8884: PPUSH
8885: CALL_OW 380
// un = CreateHuman ;
8889: LD_ADDR_VAR 0 15
8893: PUSH
8894: CALL_OW 44
8898: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8899: LD_VAR 0 15
8903: PPUSH
8904: LD_VAR 0 16
8908: PPUSH
8909: CALL_OW 52
// end ; i = i + 1 ;
8913: LD_ADDR_VAR 0 13
8917: PUSH
8918: LD_VAR 0 13
8922: PUSH
8923: LD_INT 1
8925: PLUS
8926: ST_TO_ADDR
// end ; if nation = 3 then
8927: LD_VAR 0 5
8931: PUSH
8932: LD_INT 3
8934: EQUAL
8935: IFFALSE 9341
// begin uc_side = side ;
8937: LD_ADDR_OWVAR 20
8941: PUSH
8942: LD_VAR 0 2
8946: ST_TO_ADDR
// uc_nation = nation ;
8947: LD_ADDR_OWVAR 21
8951: PUSH
8952: LD_VAR 0 5
8956: ST_TO_ADDR
// vc_engine = vehengine ;
8957: LD_ADDR_OWVAR 39
8961: PUSH
8962: LD_VAR 0 6
8966: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
8967: LD_ADDR_OWVAR 38
8971: PUSH
8972: LD_VAR 0 7
8976: PUSH
8977: LD_INT 1
8979: PPUSH
8980: LD_VAR 0 7
8984: PPUSH
8985: CALL_OW 12
8989: ARRAY
8990: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8991: LD_ADDR_OWVAR 40
8995: PUSH
8996: LD_VAR 0 8
9000: PUSH
9001: LD_INT 1
9003: PPUSH
9004: LD_VAR 0 8
9008: PPUSH
9009: CALL_OW 12
9013: ARRAY
9014: ST_TO_ADDR
// for j = 1 to RuWeapons do
9015: LD_ADDR_VAR 0 14
9019: PUSH
9020: DOUBLE
9021: LD_INT 1
9023: DEC
9024: ST_TO_ADDR
9025: LD_VAR 0 8
9029: PUSH
9030: FOR_TO
9031: IFFALSE 9217
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9033: LD_VAR 0 8
9037: PUSH
9038: LD_VAR 0 14
9042: ARRAY
9043: PUSH
9044: LD_INT 42
9046: EQUAL
9047: PUSH
9048: LD_VAR 0 8
9052: PUSH
9053: LD_VAR 0 14
9057: ARRAY
9058: PUSH
9059: LD_INT 43
9061: EQUAL
9062: OR
9063: PUSH
9064: LD_VAR 0 8
9068: PUSH
9069: LD_VAR 0 14
9073: ARRAY
9074: PUSH
9075: LD_INT 44
9077: EQUAL
9078: OR
9079: PUSH
9080: LD_VAR 0 8
9084: PUSH
9085: LD_VAR 0 14
9089: ARRAY
9090: PUSH
9091: LD_INT 45
9093: EQUAL
9094: OR
9095: PUSH
9096: LD_VAR 0 8
9100: PUSH
9101: LD_VAR 0 14
9105: ARRAY
9106: PUSH
9107: LD_INT 49
9109: EQUAL
9110: OR
9111: IFFALSE 9148
// begin ruChassisTab = [ 24 ] ;
9113: LD_ADDR_VAR 0 17
9117: PUSH
9118: LD_INT 24
9120: PUSH
9121: EMPTY
9122: LIST
9123: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9124: LD_ADDR_OWVAR 37
9128: PUSH
9129: LD_VAR 0 17
9133: PUSH
9134: LD_INT 1
9136: PPUSH
9137: LD_VAR 0 17
9141: PPUSH
9142: CALL_OW 12
9146: ARRAY
9147: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9148: LD_VAR 0 8
9152: PUSH
9153: LD_VAR 0 14
9157: ARRAY
9158: PUSH
9159: LD_INT 46
9161: EQUAL
9162: PUSH
9163: LD_VAR 0 8
9167: PUSH
9168: LD_VAR 0 14
9172: ARRAY
9173: PUSH
9174: LD_INT 47
9176: EQUAL
9177: OR
9178: IFFALSE 9215
// begin ruChassisTab = [ 24 ] ;
9180: LD_ADDR_VAR 0 17
9184: PUSH
9185: LD_INT 24
9187: PUSH
9188: EMPTY
9189: LIST
9190: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9191: LD_ADDR_OWVAR 37
9195: PUSH
9196: LD_VAR 0 17
9200: PUSH
9201: LD_INT 1
9203: PPUSH
9204: LD_VAR 0 17
9208: PPUSH
9209: CALL_OW 12
9213: ARRAY
9214: ST_TO_ADDR
// end ; end ;
9215: GO 9030
9217: POP
9218: POP
// veh = CreateVehicle ;
9219: LD_ADDR_VAR 0 16
9223: PUSH
9224: CALL_OW 45
9228: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9229: LD_VAR 0 16
9233: PPUSH
9234: LD_VAR 0 1
9238: PPUSH
9239: LD_INT 0
9241: PPUSH
9242: CALL_OW 49
// if vc_control = 1 then
9246: LD_OWVAR 38
9250: PUSH
9251: LD_INT 1
9253: EQUAL
9254: IFFALSE 9341
// begin if uc_side = 8 then
9256: LD_OWVAR 20
9260: PUSH
9261: LD_INT 8
9263: EQUAL
9264: IFFALSE 9276
// uc_nation = 2 else
9266: LD_ADDR_OWVAR 21
9270: PUSH
9271: LD_INT 2
9273: ST_TO_ADDR
9274: GO 9286
// uc_nation = nation ;
9276: LD_ADDR_OWVAR 21
9280: PUSH
9281: LD_VAR 0 5
9285: ST_TO_ADDR
// hc_gallery =  ;
9286: LD_ADDR_OWVAR 33
9290: PUSH
9291: LD_STRING 
9293: ST_TO_ADDR
// hc_name =  ;
9294: LD_ADDR_OWVAR 26
9298: PUSH
9299: LD_STRING 
9301: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9302: LD_INT 0
9304: PPUSH
9305: LD_INT 3
9307: PPUSH
9308: LD_VAR 0 4
9312: PPUSH
9313: CALL_OW 380
// un = CreateHuman ;
9317: LD_ADDR_VAR 0 15
9321: PUSH
9322: CALL_OW 44
9326: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9327: LD_VAR 0 15
9331: PPUSH
9332: LD_VAR 0 16
9336: PPUSH
9337: CALL_OW 52
// end ; end ; end ;
9341: GO 7918
9343: POP
9344: POP
// repeat wait ( 0 0$1 ) ;
9345: LD_INT 35
9347: PPUSH
9348: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9352: LD_ADDR_VAR 0 20
9356: PUSH
9357: LD_INT 22
9359: PUSH
9360: LD_VAR 0 2
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 21
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PUSH
9379: LD_INT 24
9381: PUSH
9382: LD_INT 250
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 2
9391: PUSH
9392: LD_INT 34
9394: PUSH
9395: LD_INT 25
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 34
9404: PUSH
9405: LD_INT 26
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 34
9414: PUSH
9415: LD_INT 27
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: LD_INT 34
9424: PUSH
9425: LD_INT 28
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 34
9434: PUSH
9435: LD_INT 29
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: LD_INT 34
9444: PUSH
9445: LD_INT 46
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 34
9454: PUSH
9455: LD_INT 44
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 34
9464: PUSH
9465: LD_INT 45
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 34
9474: PUSH
9475: LD_INT 47
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: PPUSH
9500: CALL_OW 69
9504: ST_TO_ADDR
// if vehicleOK_list > 0 then
9505: LD_VAR 0 20
9509: PUSH
9510: LD_INT 0
9512: GREATER
9513: IFFALSE 9732
// begin for i in vehicleOK_list do
9515: LD_ADDR_VAR 0 13
9519: PUSH
9520: LD_VAR 0 20
9524: PUSH
9525: FOR_IN
9526: IFFALSE 9730
// begin if GetSide ( i ) <> side then
9528: LD_VAR 0 13
9532: PPUSH
9533: CALL_OW 255
9537: PUSH
9538: LD_VAR 0 2
9542: NONEQUAL
9543: IFFALSE 9556
// begin ComStop ( i ) ;
9545: LD_VAR 0 13
9549: PPUSH
9550: CALL_OW 141
// continue ;
9554: GO 9525
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9556: LD_ADDR_VAR 0 21
9560: PUSH
9561: LD_INT 22
9563: PUSH
9564: LD_VAR 0 11
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: PPUSH
9578: LD_VAR 0 13
9582: PPUSH
9583: CALL_OW 74
9587: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9588: LD_ADDR_VAR 0 22
9592: PUSH
9593: LD_INT 22
9595: PUSH
9596: LD_VAR 0 11
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: LD_INT 59
9610: PUSH
9611: EMPTY
9612: LIST
9613: PUSH
9614: LD_INT 21
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 21
9626: PUSH
9627: LD_INT 2
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: EMPTY
9645: LIST
9646: PPUSH
9647: CALL_OW 69
9651: PPUSH
9652: LD_VAR 0 13
9656: PPUSH
9657: CALL_OW 74
9661: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9662: LD_VAR 0 13
9666: PPUSH
9667: LD_VAR 0 21
9671: PPUSH
9672: CALL_OW 296
9676: PUSH
9677: LD_INT 8
9679: PLUS
9680: PUSH
9681: LD_VAR 0 13
9685: PPUSH
9686: LD_VAR 0 22
9690: PPUSH
9691: CALL_OW 296
9695: LESS
9696: IFFALSE 9714
// begin ComAttackUnit ( i , target1 ) ;
9698: LD_VAR 0 13
9702: PPUSH
9703: LD_VAR 0 21
9707: PPUSH
9708: CALL_OW 115
// end else
9712: GO 9728
// begin ComAttackUnit ( i , target2 ) ;
9714: LD_VAR 0 13
9718: PPUSH
9719: LD_VAR 0 22
9723: PPUSH
9724: CALL_OW 115
// end ; end ;
9728: GO 9525
9730: POP
9731: POP
// end ; until vehicleOK_list = 0 ;
9732: LD_VAR 0 20
9736: PUSH
9737: LD_INT 0
9739: EQUAL
9740: IFFALSE 9345
// end ;
9742: LD_VAR 0 12
9746: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9747: LD_INT 0
9749: PPUSH
9750: PPUSH
9751: PPUSH
9752: PPUSH
9753: PPUSH
9754: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9755: LD_ADDR_VAR 0 6
9759: PUSH
9760: LD_INT 22
9762: PUSH
9763: LD_VAR 0 1
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 34
9774: PUSH
9775: LD_INT 29
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PPUSH
9786: CALL_OW 69
9790: ST_TO_ADDR
// if veh_list = 0 then
9791: LD_VAR 0 6
9795: PUSH
9796: LD_INT 0
9798: EQUAL
9799: IFFALSE 9803
// exit ;
9801: GO 10008
// if veh_list > 0 then
9803: LD_VAR 0 6
9807: PUSH
9808: LD_INT 0
9810: GREATER
9811: IFFALSE 10008
// begin for i in veh_List do
9813: LD_ADDR_VAR 0 4
9817: PUSH
9818: LD_VAR 0 6
9822: PUSH
9823: FOR_IN
9824: IFFALSE 10006
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9826: LD_ADDR_VAR 0 7
9830: PUSH
9831: LD_INT 22
9833: PUSH
9834: LD_VAR 0 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 24
9845: PUSH
9846: LD_INT 250
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PUSH
9853: LD_INT 2
9855: PUSH
9856: LD_INT 59
9858: PUSH
9859: EMPTY
9860: LIST
9861: PUSH
9862: LD_INT 21
9864: PUSH
9865: LD_INT 1
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 21
9874: PUSH
9875: LD_INT 2
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: PUSH
9893: EMPTY
9894: LIST
9895: PPUSH
9896: CALL_OW 69
9900: PPUSH
9901: LD_VAR 0 4
9905: PPUSH
9906: CALL_OW 74
9910: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
9911: LD_VAR 0 4
9915: PPUSH
9916: LD_VAR 0 7
9920: PPUSH
9921: CALL_OW 115
// if not HasTask ( i ) then
9925: LD_VAR 0 4
9929: PPUSH
9930: CALL_OW 314
9934: NOT
9935: IFFALSE 10004
// begin wait ( 0 0$0.1 ) ;
9937: LD_INT 4
9939: PPUSH
9940: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
9944: LD_ADDR_VAR 0 8
9948: PUSH
9949: LD_INT 22
9951: PUSH
9952: LD_VAR 0 2
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 24
9963: PUSH
9964: LD_INT 250
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PPUSH
9975: CALL_OW 69
9979: PPUSH
9980: LD_VAR 0 4
9984: PPUSH
9985: CALL_OW 74
9989: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
9990: LD_VAR 0 4
9994: PPUSH
9995: LD_VAR 0 8
9999: PPUSH
10000: CALL_OW 115
// end ; end ;
10004: GO 9823
10006: POP
10007: POP
// end ; end ; end_of_file
10008: LD_VAR 0 3
10012: RET
// every 0 0$1 do
10013: GO 10015
10015: DISABLE
// begin enable ;
10016: ENABLE
// IntBazooka ( 7 , 1 ) ;
10017: LD_INT 7
10019: PPUSH
10020: LD_INT 1
10022: PPUSH
10023: CALL 6453 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10027: LD_INT 8
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: CALL 9747 0 2
// end ;
10037: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10038: LD_INT 22
10040: PUSH
10041: LD_INT 3
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 21
10050: PUSH
10051: LD_INT 2
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 50
10060: PUSH
10061: EMPTY
10062: LIST
10063: PUSH
10064: LD_INT 2
10066: PUSH
10067: LD_INT 34
10069: PUSH
10070: LD_INT 46
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: LD_INT 34
10079: PUSH
10080: LD_INT 44
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 34
10089: PUSH
10090: LD_INT 45
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PUSH
10097: LD_INT 34
10099: PUSH
10100: LD_INT 47
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: PUSH
10125: LD_INT 0
10127: GREATER
10128: PUSH
10129: LD_INT 22
10131: PUSH
10132: LD_INT 3
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: LD_INT 21
10141: PUSH
10142: LD_INT 2
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 50
10151: PUSH
10152: EMPTY
10153: LIST
10154: PUSH
10155: LD_INT 34
10157: PUSH
10158: LD_INT 49
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: PPUSH
10171: CALL_OW 69
10175: PUSH
10176: LD_INT 0
10178: GREATER
10179: AND
10180: IFFALSE 10352
10182: GO 10184
10184: DISABLE
10185: LD_INT 0
10187: PPUSH
10188: PPUSH
// begin enable ;
10189: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10190: LD_ADDR_VAR 0 1
10194: PUSH
10195: LD_INT 22
10197: PUSH
10198: LD_INT 3
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PUSH
10205: LD_INT 21
10207: PUSH
10208: LD_INT 2
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: LD_INT 50
10217: PUSH
10218: EMPTY
10219: LIST
10220: PUSH
10221: LD_INT 2
10223: PUSH
10224: LD_INT 34
10226: PUSH
10227: LD_INT 46
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PUSH
10234: LD_INT 34
10236: PUSH
10237: LD_INT 44
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 34
10246: PUSH
10247: LD_INT 45
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 34
10256: PUSH
10257: LD_INT 47
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: PPUSH
10277: CALL_OW 69
10281: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10282: LD_ADDR_VAR 0 2
10286: PUSH
10287: LD_INT 22
10289: PUSH
10290: LD_INT 3
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 21
10299: PUSH
10300: LD_INT 2
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 50
10309: PUSH
10310: EMPTY
10311: LIST
10312: PUSH
10313: LD_INT 34
10315: PUSH
10316: LD_INT 49
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: PPUSH
10329: CALL_OW 69
10333: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10334: LD_VAR 0 2
10338: PPUSH
10339: LD_VAR 0 1
10343: PUSH
10344: LD_INT 1
10346: ARRAY
10347: PPUSH
10348: CALL_OW 112
// end ; end_of_file
10352: PPOPN 2
10354: END
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
10355: LD_EXP 38
10359: PUSH
10360: LD_INT 1
10362: EQUAL
10363: IFFALSE 11265
10365: GO 10367
10367: DISABLE
10368: LD_INT 0
10370: PPUSH
10371: PPUSH
10372: PPUSH
// begin m1 := false ;
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 0
10380: ST_TO_ADDR
// m2 := false ;
10381: LD_ADDR_VAR 0 2
10385: PUSH
10386: LD_INT 0
10388: ST_TO_ADDR
// m3 := false ;
10389: LD_ADDR_VAR 0 3
10393: PUSH
10394: LD_INT 0
10396: ST_TO_ADDR
// Say ( JMM , D9b-JMM-1 ) ;
10397: LD_EXP 1
10401: PPUSH
10402: LD_STRING D9b-JMM-1
10404: PPUSH
10405: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10409: LD_EXP 15
10413: PPUSH
10414: LD_STRING D9b-Pow-1
10416: PPUSH
10417: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10421: LD_EXP 1
10425: PPUSH
10426: LD_STRING D9b-JMM-2
10428: PPUSH
10429: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10433: LD_EXP 15
10437: PPUSH
10438: LD_STRING D9b-Pow-2
10440: PPUSH
10441: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10445: LD_EXP 1
10449: PPUSH
10450: LD_STRING D9b-JMM-3
10452: PPUSH
10453: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10457: LD_EXP 15
10461: PPUSH
10462: LD_STRING D9b-Pow-3
10464: PPUSH
10465: CALL_OW 94
// if tick <= 60 60$00 then
10469: LD_OWVAR 1
10473: PUSH
10474: LD_INT 126000
10476: LESSEQUAL
10477: IFFALSE 10486
// SetAchievement ( ACH_ASPEED_13 ) ;
10479: LD_STRING ACH_ASPEED_13
10481: PPUSH
10482: CALL_OW 543
// if burlakStatus = 1 then
10486: LD_EXP 28
10490: PUSH
10491: LD_INT 1
10493: EQUAL
10494: IFFALSE 10516
// begin m1 := true ;
10496: LD_ADDR_VAR 0 1
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
10504: LD_STRING Burlak
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: CALL_OW 101
// end else
10514: GO 10527
// begin AddMedal ( Burlak , - 1 ) ;
10516: LD_STRING Burlak
10518: PPUSH
10519: LD_INT 1
10521: NEG
10522: PPUSH
10523: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10527: LD_EXP 2
10531: PPUSH
10532: CALL_OW 302
10536: IFFALSE 10558
// begin m2 := true ;
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_INT 1
10545: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
10546: LD_STRING Stevens
10548: PPUSH
10549: LD_INT 1
10551: PPUSH
10552: CALL_OW 101
// end else
10556: GO 10569
// begin AddMedal ( Stevens , - 1 ) ;
10558: LD_STRING Stevens
10560: PPUSH
10561: LD_INT 1
10563: NEG
10564: PPUSH
10565: CALL_OW 101
// end ; if radarOnSpot = 1 then
10569: LD_EXP 30
10573: PUSH
10574: LD_INT 1
10576: EQUAL
10577: IFFALSE 10599
// begin m3 := true ;
10579: LD_ADDR_VAR 0 3
10583: PUSH
10584: LD_INT 1
10586: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
10587: LD_STRING Observation
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 101
// end else
10597: GO 10610
// begin AddMedal ( Observation , - 1 ) ;
10599: LD_STRING Observation
10601: PPUSH
10602: LD_INT 1
10604: NEG
10605: PPUSH
10606: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10610: LD_VAR 0 1
10614: PUSH
10615: LD_VAR 0 2
10619: AND
10620: PUSH
10621: LD_VAR 0 3
10625: AND
10626: PUSH
10627: LD_OWVAR 67
10631: PUSH
10632: LD_INT 3
10634: EQUAL
10635: AND
10636: IFFALSE 10648
// SetAchievementEX ( ACH_AMER , 13 ) ;
10638: LD_STRING ACH_AMER
10640: PPUSH
10641: LD_INT 13
10643: PPUSH
10644: CALL_OW 564
// GiveMedals ( MAIN ) ;
10648: LD_STRING MAIN
10650: PPUSH
10651: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10655: LD_EXP 28
10659: PPUSH
10660: LD_STRING 13_BurlakStatus_1
10662: PPUSH
10663: CALL_OW 39
// if IsLive ( Stevens ) then
10667: LD_EXP 2
10671: PPUSH
10672: CALL_OW 300
10676: IFFALSE 10690
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10678: LD_INT 1
10680: PPUSH
10681: LD_STRING 13_StevensStatus_1
10683: PPUSH
10684: CALL_OW 39
10688: GO 10700
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10690: LD_INT 0
10692: PPUSH
10693: LD_STRING 13_StevensStatus_1
10695: PPUSH
10696: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10700: LD_INT 22
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 21
10712: PUSH
10713: LD_INT 1
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 2
10722: PUSH
10723: LD_INT 25
10725: PUSH
10726: LD_INT 1
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 25
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: LD_INT 25
10745: PUSH
10746: LD_INT 3
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PUSH
10753: LD_INT 25
10755: PUSH
10756: LD_INT 4
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 25
10765: PUSH
10766: LD_INT 5
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 25
10775: PUSH
10776: LD_INT 8
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: LIST
10796: PPUSH
10797: CALL_OW 69
10801: PPUSH
10802: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10806: LD_EXP 1
10810: PPUSH
10811: LD_EXP 34
10815: PUSH
10816: LD_STRING JMM
10818: STR
10819: PPUSH
10820: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
10824: LD_EXP 8
10828: PPUSH
10829: LD_EXP 34
10833: PUSH
10834: LD_STRING Brown
10836: STR
10837: PPUSH
10838: CALL 6761 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10842: LD_EXP 4
10846: PPUSH
10847: LD_EXP 34
10851: PUSH
10852: LD_STRING Donaldson
10854: STR
10855: PPUSH
10856: CALL 6761 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
10860: LD_EXP 5
10864: PPUSH
10865: LD_EXP 34
10869: PUSH
10870: LD_STRING Bobby
10872: STR
10873: PPUSH
10874: CALL 6761 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
10878: LD_EXP 6
10882: PPUSH
10883: LD_EXP 34
10887: PUSH
10888: LD_STRING Cyrus
10890: STR
10891: PPUSH
10892: CALL 6761 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
10896: LD_EXP 3
10900: PPUSH
10901: LD_EXP 34
10905: PUSH
10906: LD_STRING Lisa
10908: STR
10909: PPUSH
10910: CALL 6761 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
10914: LD_EXP 13
10918: PPUSH
10919: LD_EXP 34
10923: PUSH
10924: LD_STRING Frank
10926: STR
10927: PPUSH
10928: CALL 6761 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
10932: LD_EXP 14
10936: PPUSH
10937: LD_EXP 34
10941: PUSH
10942: LD_STRING Kikuchi
10944: STR
10945: PPUSH
10946: CALL 6761 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
10950: LD_EXP 10
10954: PPUSH
10955: LD_EXP 34
10959: PUSH
10960: LD_STRING Houten
10962: STR
10963: PPUSH
10964: CALL 6761 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
10968: LD_EXP 12
10972: PPUSH
10973: LD_EXP 34
10977: PUSH
10978: LD_STRING Gary
10980: STR
10981: PPUSH
10982: CALL 6761 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
10986: LD_EXP 11
10990: PPUSH
10991: LD_EXP 34
10995: PUSH
10996: LD_STRING Cornell
10998: STR
10999: PPUSH
11000: CALL 6761 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11004: LD_EXP 7
11008: PPUSH
11009: LD_EXP 34
11013: PUSH
11014: LD_STRING Denis
11016: STR
11017: PPUSH
11018: CALL 6761 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11022: LD_EXP 9
11026: PPUSH
11027: LD_EXP 34
11031: PUSH
11032: LD_STRING Gladstone
11034: STR
11035: PPUSH
11036: CALL 6761 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11040: LD_EXP 2
11044: PPUSH
11045: LD_EXP 34
11049: PUSH
11050: LD_STRING Stevens
11052: STR
11053: PPUSH
11054: CALL 6761 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11058: LD_INT 50
11060: PUSH
11061: EMPTY
11062: LIST
11063: PUSH
11064: LD_INT 22
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 21
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 2
11086: PUSH
11087: LD_INT 25
11089: PUSH
11090: LD_INT 1
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 25
11099: PUSH
11100: LD_INT 2
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 25
11109: PUSH
11110: LD_INT 3
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: LD_INT 25
11119: PUSH
11120: LD_INT 4
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 25
11129: PUSH
11130: LD_INT 5
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 25
11139: PUSH
11140: LD_INT 8
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: PPUSH
11162: CALL_OW 69
11166: PUSH
11167: LD_EXP 1
11171: PUSH
11172: LD_EXP 8
11176: PUSH
11177: LD_EXP 4
11181: PUSH
11182: LD_EXP 5
11186: PUSH
11187: LD_EXP 6
11191: PUSH
11192: LD_EXP 3
11196: PUSH
11197: LD_EXP 13
11201: PUSH
11202: LD_EXP 9
11206: PUSH
11207: LD_EXP 14
11211: PUSH
11212: LD_EXP 7
11216: PUSH
11217: LD_EXP 10
11221: PUSH
11222: LD_EXP 12
11226: PUSH
11227: LD_EXP 11
11231: PUSH
11232: LD_EXP 2
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: DIFF
11253: PPUSH
11254: LD_STRING 13_other_survivors
11256: PPUSH
11257: CALL_OW 38
// YouWin ;
11261: CALL_OW 103
// end ; end_of_file
11265: PPOPN 3
11267: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11268: LD_EXP 32
11272: PUSH
11273: LD_INT 2
11275: EQUAL
11276: IFFALSE 11412
11278: GO 11280
11280: DISABLE
11281: LD_INT 0
11283: PPUSH
11284: PPUSH
11285: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11286: LD_ADDR_VAR 0 2
11290: PUSH
11291: LD_INT 22
11293: PUSH
11294: LD_INT 1
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 21
11303: PUSH
11304: LD_INT 3
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 2
11313: PUSH
11314: LD_INT 30
11316: PUSH
11317: LD_INT 0
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: LD_INT 30
11326: PUSH
11327: LD_INT 1
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: LIST
11343: PPUSH
11344: CALL_OW 69
11348: ST_TO_ADDR
// for i in tmp do
11349: LD_ADDR_VAR 0 1
11353: PUSH
11354: LD_VAR 0 2
11358: PUSH
11359: FOR_IN
11360: IFFALSE 11393
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11362: LD_ADDR_VAR 0 3
11366: PUSH
11367: LD_VAR 0 3
11371: PUSH
11372: LD_VAR 0 1
11376: PPUSH
11377: CALL_OW 274
11381: PPUSH
11382: LD_INT 3
11384: PPUSH
11385: CALL_OW 275
11389: PLUS
11390: ST_TO_ADDR
11391: GO 11359
11393: POP
11394: POP
// if yourSiberite < 79 then
11395: LD_VAR 0 3
11399: PUSH
11400: LD_INT 79
11402: LESS
11403: IFFALSE 11412
// YouLost ( siberite ) ;
11405: LD_STRING siberite
11407: PPUSH
11408: CALL_OW 104
// end ; end_of_file
11412: PPOPN 3
11414: END
// every 8 8$0 + 7 7$0 do
11415: GO 11417
11417: DISABLE
// begin enable ;
11418: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11419: LD_INT 8
11421: PPUSH
11422: LD_INT 2
11424: PPUSH
11425: LD_INT 1
11427: PPUSH
11428: LD_INT 3
11430: PPUSH
11431: CALL_OW 12
11435: PPUSH
11436: LD_INT 0
11438: PPUSH
11439: LD_INT 0
11441: PPUSH
11442: LD_INT 2
11444: PUSH
11445: LD_INT 3
11447: PUSH
11448: LD_INT 4
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: LIST
11455: PUSH
11456: LD_OWVAR 67
11460: ARRAY
11461: PPUSH
11462: LD_INT 0
11464: PPUSH
11465: LD_INT 10
11467: PPUSH
11468: LD_INT 8
11470: PUSH
11471: LD_INT 9
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 1
11480: PPUSH
11481: LD_INT 2
11483: PPUSH
11484: CALL_OW 12
11488: ARRAY
11489: PPUSH
11490: LD_INT 12
11492: PPUSH
11493: LD_INT 1
11495: PPUSH
11496: CALL 6801 0 11
// end ;
11500: END
// every 8 8$00 + 7 7$0 do var i , veh , xy ;
11501: GO 11503
11503: DISABLE
11504: LD_INT 0
11506: PPUSH
11507: PPUSH
11508: PPUSH
// begin enable ;
11509: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11510: LD_ADDR_EXP 33
11514: PUSH
11515: LD_EXP 33
11519: PUSH
11520: LD_INT 1
11522: PLUS
11523: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11524: LD_INT 22
11526: PUSH
11527: LD_INT 8
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 3
11536: PUSH
11537: LD_INT 58
11539: PUSH
11540: EMPTY
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 34
11549: PUSH
11550: LD_INT 31
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: PPUSH
11562: CALL_OW 69
11566: PUSH
11567: LD_INT 2
11569: LESS
11570: IFFALSE 11810
// begin uc_side := 8 ;
11572: LD_ADDR_OWVAR 20
11576: PUSH
11577: LD_INT 8
11579: ST_TO_ADDR
// uc_nation := 2 ;
11580: LD_ADDR_OWVAR 21
11584: PUSH
11585: LD_INT 2
11587: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
11588: LD_INT 14
11590: PPUSH
11591: LD_INT 3
11593: PPUSH
11594: LD_INT 1
11596: PPUSH
11597: LD_INT 31
11599: PPUSH
11600: LD_INT 100
11602: PPUSH
11603: CALL 32065 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
11607: LD_ADDR_VAR 0 1
11611: PUSH
11612: DOUBLE
11613: LD_INT 22
11615: PUSH
11616: LD_INT 8
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 3
11625: PUSH
11626: LD_INT 58
11628: PUSH
11629: EMPTY
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 34
11638: PUSH
11639: LD_INT 31
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: LIST
11650: PPUSH
11651: CALL_OW 69
11655: PUSH
11656: LD_INT 1
11658: PLUS
11659: DEC
11660: ST_TO_ADDR
11661: LD_INT 2
11663: PUSH
11664: FOR_TO
11665: IFFALSE 11808
// begin veh := CreateVehicle ;
11667: LD_ADDR_VAR 0 2
11671: PUSH
11672: CALL_OW 45
11676: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11677: LD_VAR 0 2
11681: PPUSH
11682: LD_INT 5
11684: PPUSH
11685: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
11689: LD_ADDR_VAR 0 3
11693: PUSH
11694: LD_INT 181
11696: PUSH
11697: LD_INT 105
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: LD_INT 137
11706: PUSH
11707: LD_INT 6
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: LD_VAR 0 1
11722: PUSH
11723: LD_INT 2
11725: MOD
11726: PUSH
11727: LD_INT 1
11729: PLUS
11730: ARRAY
11731: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
11732: LD_VAR 0 2
11736: PPUSH
11737: LD_VAR 0 3
11741: PUSH
11742: LD_INT 1
11744: ARRAY
11745: PPUSH
11746: LD_VAR 0 3
11750: PUSH
11751: LD_INT 2
11753: ARRAY
11754: PPUSH
11755: LD_INT 12
11757: PPUSH
11758: LD_INT 0
11760: PPUSH
11761: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 ] [ Difficulty ] ) ;
11765: LD_INT 0
11767: PPUSH
11768: LD_INT 7
11770: PUSH
11771: LD_INT 9
11773: PUSH
11774: LD_INT 10
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: PUSH
11782: LD_OWVAR 67
11786: ARRAY
11787: PPUSH
11788: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
11792: CALL_OW 44
11796: PPUSH
11797: LD_VAR 0 2
11801: PPUSH
11802: CALL_OW 52
// end ;
11806: GO 11664
11808: POP
11809: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 6 ) , rand ( 6 , 9 ) , rand ( 7 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
11810: LD_INT 8
11812: PUSH
11813: LD_INT 9
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: PUSH
11820: LD_INT 1
11822: PPUSH
11823: LD_INT 2
11825: PPUSH
11826: CALL_OW 12
11830: ARRAY
11831: PPUSH
11832: LD_INT 8
11834: PPUSH
11835: LD_INT 4
11837: PPUSH
11838: LD_INT 6
11840: PPUSH
11841: CALL_OW 12
11845: PUSH
11846: LD_INT 6
11848: PPUSH
11849: LD_INT 9
11851: PPUSH
11852: CALL_OW 12
11856: PUSH
11857: LD_INT 7
11859: PPUSH
11860: LD_INT 10
11862: PPUSH
11863: CALL_OW 12
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: LIST
11872: PUSH
11873: LD_OWVAR 67
11877: ARRAY
11878: PPUSH
11879: LD_INT 10
11881: PPUSH
11882: LD_INT 2
11884: PPUSH
11885: LD_INT 3
11887: PPUSH
11888: LD_INT 5
11890: PUSH
11891: LD_INT 2
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PPUSH
11898: EMPTY
11899: PPUSH
11900: LD_INT 25
11902: PUSH
11903: LD_INT 26
11905: PUSH
11906: LD_INT 27
11908: PUSH
11909: LD_INT 28
11911: PUSH
11912: LD_INT 29
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: PPUSH
11922: EMPTY
11923: PPUSH
11924: LD_INT 1
11926: PPUSH
11927: CALL 7869 0 11
// end ;
11931: PPOPN 3
11933: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do var i , veh ;
11934: LD_EXP 33
11938: PUSH
11939: LD_INT 4
11941: GREATEREQUAL
11942: IFFALSE 12282
11944: GO 11946
11946: DISABLE
11947: LD_INT 0
11949: PPUSH
11950: PPUSH
// begin enable ;
11951: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11952: LD_ADDR_EXP 33
11956: PUSH
11957: LD_EXP 33
11961: PUSH
11962: LD_INT 1
11964: PLUS
11965: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
11966: LD_INT 22
11968: PUSH
11969: LD_INT 8
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 3
11978: PUSH
11979: LD_INT 58
11981: PUSH
11982: EMPTY
11983: LIST
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 34
11991: PUSH
11992: LD_INT 31
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: LIST
12003: PPUSH
12004: CALL_OW 69
12008: PUSH
12009: LD_INT 2
12011: LESS
12012: IFFALSE 12197
// begin uc_side := 8 ;
12014: LD_ADDR_OWVAR 20
12018: PUSH
12019: LD_INT 8
12021: ST_TO_ADDR
// uc_nation := 2 ;
12022: LD_ADDR_OWVAR 21
12026: PUSH
12027: LD_INT 2
12029: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12030: LD_INT 14
12032: PPUSH
12033: LD_INT 3
12035: PPUSH
12036: LD_INT 1
12038: PPUSH
12039: LD_INT 31
12041: PPUSH
12042: LD_INT 100
12044: PPUSH
12045: CALL 32065 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12049: LD_ADDR_VAR 0 1
12053: PUSH
12054: DOUBLE
12055: LD_INT 22
12057: PUSH
12058: LD_INT 8
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 3
12067: PUSH
12068: LD_INT 58
12070: PUSH
12071: EMPTY
12072: LIST
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 34
12080: PUSH
12081: LD_INT 31
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: PPUSH
12093: CALL_OW 69
12097: PUSH
12098: LD_INT 1
12100: PLUS
12101: DEC
12102: ST_TO_ADDR
12103: LD_INT 2
12105: PUSH
12106: FOR_TO
12107: IFFALSE 12195
// begin veh := CreateVehicle ;
12109: LD_ADDR_VAR 0 2
12113: PUSH
12114: CALL_OW 45
12118: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12119: LD_VAR 0 2
12123: PPUSH
12124: LD_INT 5
12126: PPUSH
12127: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12131: LD_VAR 0 2
12135: PPUSH
12136: LD_INT 181
12138: PPUSH
12139: LD_INT 105
12141: PPUSH
12142: LD_INT 12
12144: PPUSH
12145: LD_INT 0
12147: PPUSH
12148: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12152: LD_INT 0
12154: PPUSH
12155: LD_INT 8
12157: PUSH
12158: LD_INT 9
12160: PUSH
12161: LD_INT 10
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: LIST
12168: PUSH
12169: LD_OWVAR 67
12173: ARRAY
12174: PPUSH
12175: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12179: CALL_OW 44
12183: PPUSH
12184: LD_VAR 0 2
12188: PPUSH
12189: CALL_OW 52
// end ;
12193: GO 12106
12195: POP
12196: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
12197: LD_INT 8
12199: PUSH
12200: LD_INT 9
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 1
12209: PPUSH
12210: LD_INT 2
12212: PPUSH
12213: CALL_OW 12
12217: ARRAY
12218: PPUSH
12219: LD_INT 8
12221: PPUSH
12222: LD_INT 1
12224: PUSH
12225: LD_INT 2
12227: PUSH
12228: LD_INT 3
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: PUSH
12236: LD_OWVAR 67
12240: ARRAY
12241: PPUSH
12242: LD_INT 10
12244: PPUSH
12245: LD_INT 3
12247: PPUSH
12248: LD_INT 3
12250: PPUSH
12251: LD_INT 1
12253: PUSH
12254: LD_INT 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PPUSH
12261: LD_INT 47
12263: PUSH
12264: LD_INT 47
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PPUSH
12271: EMPTY
12272: PPUSH
12273: EMPTY
12274: PPUSH
12275: LD_INT 1
12277: PPUSH
12278: CALL 7869 0 11
// end ;
12282: PPOPN 2
12284: END
// every 1 1$0 trigger eventVar2 = 1 do var i , veh ;
12285: LD_EXP 36
12289: PUSH
12290: LD_INT 1
12292: EQUAL
12293: IFFALSE 12630
12295: GO 12297
12297: DISABLE
12298: LD_INT 0
12300: PPUSH
12301: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
12302: LD_INT 22
12304: PUSH
12305: LD_INT 8
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 3
12314: PUSH
12315: LD_INT 58
12317: PUSH
12318: EMPTY
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PUSH
12325: LD_INT 34
12327: PUSH
12328: LD_INT 31
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: PPUSH
12340: CALL_OW 69
12344: PUSH
12345: LD_INT 2
12347: LESS
12348: IFFALSE 12533
// begin uc_side := 8 ;
12350: LD_ADDR_OWVAR 20
12354: PUSH
12355: LD_INT 8
12357: ST_TO_ADDR
// uc_nation := 2 ;
12358: LD_ADDR_OWVAR 21
12362: PUSH
12363: LD_INT 2
12365: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
12366: LD_INT 14
12368: PPUSH
12369: LD_INT 3
12371: PPUSH
12372: LD_INT 1
12374: PPUSH
12375: LD_INT 31
12377: PPUSH
12378: LD_INT 100
12380: PPUSH
12381: CALL 32065 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
12385: LD_ADDR_VAR 0 1
12389: PUSH
12390: DOUBLE
12391: LD_INT 22
12393: PUSH
12394: LD_INT 8
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 3
12403: PUSH
12404: LD_INT 58
12406: PUSH
12407: EMPTY
12408: LIST
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 34
12416: PUSH
12417: LD_INT 31
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: PPUSH
12429: CALL_OW 69
12433: PUSH
12434: LD_INT 1
12436: PLUS
12437: DEC
12438: ST_TO_ADDR
12439: LD_INT 2
12441: PUSH
12442: FOR_TO
12443: IFFALSE 12531
// begin veh := CreateVehicle ;
12445: LD_ADDR_VAR 0 2
12449: PUSH
12450: CALL_OW 45
12454: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
12455: LD_VAR 0 2
12459: PPUSH
12460: LD_INT 5
12462: PPUSH
12463: CALL_OW 233
// PlaceUnitXYR ( veh , 181 , 105 , 12 , false ) ;
12467: LD_VAR 0 2
12471: PPUSH
12472: LD_INT 181
12474: PPUSH
12475: LD_INT 105
12477: PPUSH
12478: LD_INT 12
12480: PPUSH
12481: LD_INT 0
12483: PPUSH
12484: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
12488: LD_INT 0
12490: PPUSH
12491: LD_INT 8
12493: PUSH
12494: LD_INT 9
12496: PUSH
12497: LD_INT 10
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: PUSH
12505: LD_OWVAR 67
12509: ARRAY
12510: PPUSH
12511: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
12515: CALL_OW 44
12519: PPUSH
12520: LD_VAR 0 2
12524: PPUSH
12525: CALL_OW 52
// end ;
12529: GO 12442
12531: POP
12532: POP
// end ; RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 5 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12533: LD_INT 8
12535: PUSH
12536: LD_INT 9
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 1
12545: PPUSH
12546: LD_INT 2
12548: PPUSH
12549: CALL_OW 12
12553: ARRAY
12554: PPUSH
12555: LD_INT 3
12557: PPUSH
12558: LD_INT 5
12560: PUSH
12561: LD_INT 7
12563: PUSH
12564: LD_INT 8
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: PUSH
12572: LD_OWVAR 67
12576: ARRAY
12577: PPUSH
12578: LD_INT 10
12580: PPUSH
12581: LD_INT 3
12583: PPUSH
12584: LD_INT 3
12586: PPUSH
12587: LD_INT 3
12589: PUSH
12590: LD_INT 3
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PPUSH
12597: LD_INT 46
12599: PUSH
12600: LD_INT 44
12602: PUSH
12603: LD_INT 45
12605: PUSH
12606: LD_INT 47
12608: PUSH
12609: LD_INT 49
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: PPUSH
12619: EMPTY
12620: PPUSH
12621: EMPTY
12622: PPUSH
12623: LD_INT 1
12625: PPUSH
12626: CALL 7869 0 11
// end ; end_of_file
12630: PPOPN 2
12632: END
// every 1 1$0 do
12633: GO 12635
12635: DISABLE
// begin enable ;
12636: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12637: LD_INT 3
12639: PPUSH
12640: LD_INT 5
12642: PPUSH
12643: CALL_OW 12
12647: PPUSH
12648: LD_INT 13
12650: PPUSH
12651: LD_INT 1
12653: PPUSH
12654: CALL_OW 55
// end ; end_of_file
12658: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
12659: LD_INT 0
12661: PPUSH
// ar_crane := 88 ;
12662: LD_ADDR_EXP 49
12666: PUSH
12667: LD_INT 88
12669: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12670: LD_ADDR_EXP 44
12674: PUSH
12675: LD_INT 89
12677: ST_TO_ADDR
// us_hack := 99 ;
12678: LD_ADDR_EXP 45
12682: PUSH
12683: LD_INT 99
12685: ST_TO_ADDR
// us_artillery := 97 ;
12686: LD_ADDR_EXP 46
12690: PUSH
12691: LD_INT 97
12693: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12694: LD_ADDR_EXP 47
12698: PUSH
12699: LD_INT 91
12701: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
12702: LD_ADDR_EXP 48
12706: PUSH
12707: LD_INT 92
12709: ST_TO_ADDR
// ru_radar := 98 ;
12710: LD_ADDR_EXP 43
12714: PUSH
12715: LD_INT 98
12717: ST_TO_ADDR
// tech_Artillery := 80 ;
12718: LD_ADDR_EXP 50
12722: PUSH
12723: LD_INT 80
12725: ST_TO_ADDR
// tech_RadMat := 81 ;
12726: LD_ADDR_EXP 51
12730: PUSH
12731: LD_INT 81
12733: ST_TO_ADDR
// tech_BasicTools := 82 ;
12734: LD_ADDR_EXP 52
12738: PUSH
12739: LD_INT 82
12741: ST_TO_ADDR
// tech_Cargo := 83 ;
12742: LD_ADDR_EXP 53
12746: PUSH
12747: LD_INT 83
12749: ST_TO_ADDR
// tech_Track := 84 ;
12750: LD_ADDR_EXP 54
12754: PUSH
12755: LD_INT 84
12757: ST_TO_ADDR
// tech_Crane := 85 ;
12758: LD_ADDR_EXP 55
12762: PUSH
12763: LD_INT 85
12765: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12766: LD_ADDR_EXP 56
12770: PUSH
12771: LD_INT 86
12773: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12774: LD_ADDR_EXP 57
12778: PUSH
12779: LD_INT 87
12781: ST_TO_ADDR
// end ;
12782: LD_VAR 0 1
12786: RET
// every 1 do
12787: GO 12789
12789: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12790: CALL 12659 0 0
12794: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12795: LD_VAR 0 2
12799: PUSH
12800: LD_INT 100
12802: EQUAL
12803: IFFALSE 13752
// begin if not StreamModeActive then
12805: LD_EXP 58
12809: NOT
12810: IFFALSE 12820
// StreamModeActive := true ;
12812: LD_ADDR_EXP 58
12816: PUSH
12817: LD_INT 1
12819: ST_TO_ADDR
// if p3 = 0 then
12820: LD_VAR 0 3
12824: PUSH
12825: LD_INT 0
12827: EQUAL
12828: IFFALSE 12834
// InitStreamMode ;
12830: CALL 13985 0 0
// if p3 = 1 then
12834: LD_VAR 0 3
12838: PUSH
12839: LD_INT 1
12841: EQUAL
12842: IFFALSE 12852
// sRocket := true ;
12844: LD_ADDR_EXP 63
12848: PUSH
12849: LD_INT 1
12851: ST_TO_ADDR
// if p3 = 2 then
12852: LD_VAR 0 3
12856: PUSH
12857: LD_INT 2
12859: EQUAL
12860: IFFALSE 12870
// sSpeed := true ;
12862: LD_ADDR_EXP 62
12866: PUSH
12867: LD_INT 1
12869: ST_TO_ADDR
// if p3 = 3 then
12870: LD_VAR 0 3
12874: PUSH
12875: LD_INT 3
12877: EQUAL
12878: IFFALSE 12888
// sEngine := true ;
12880: LD_ADDR_EXP 64
12884: PUSH
12885: LD_INT 1
12887: ST_TO_ADDR
// if p3 = 4 then
12888: LD_VAR 0 3
12892: PUSH
12893: LD_INT 4
12895: EQUAL
12896: IFFALSE 12906
// sSpec := true ;
12898: LD_ADDR_EXP 61
12902: PUSH
12903: LD_INT 1
12905: ST_TO_ADDR
// if p3 = 5 then
12906: LD_VAR 0 3
12910: PUSH
12911: LD_INT 5
12913: EQUAL
12914: IFFALSE 12924
// sLevel := true ;
12916: LD_ADDR_EXP 65
12920: PUSH
12921: LD_INT 1
12923: ST_TO_ADDR
// if p3 = 6 then
12924: LD_VAR 0 3
12928: PUSH
12929: LD_INT 6
12931: EQUAL
12932: IFFALSE 12942
// sArmoury := true ;
12934: LD_ADDR_EXP 66
12938: PUSH
12939: LD_INT 1
12941: ST_TO_ADDR
// if p3 = 7 then
12942: LD_VAR 0 3
12946: PUSH
12947: LD_INT 7
12949: EQUAL
12950: IFFALSE 12960
// sRadar := true ;
12952: LD_ADDR_EXP 67
12956: PUSH
12957: LD_INT 1
12959: ST_TO_ADDR
// if p3 = 8 then
12960: LD_VAR 0 3
12964: PUSH
12965: LD_INT 8
12967: EQUAL
12968: IFFALSE 12978
// sBunker := true ;
12970: LD_ADDR_EXP 68
12974: PUSH
12975: LD_INT 1
12977: ST_TO_ADDR
// if p3 = 9 then
12978: LD_VAR 0 3
12982: PUSH
12983: LD_INT 9
12985: EQUAL
12986: IFFALSE 12996
// sHack := true ;
12988: LD_ADDR_EXP 69
12992: PUSH
12993: LD_INT 1
12995: ST_TO_ADDR
// if p3 = 10 then
12996: LD_VAR 0 3
13000: PUSH
13001: LD_INT 10
13003: EQUAL
13004: IFFALSE 13014
// sFire := true ;
13006: LD_ADDR_EXP 70
13010: PUSH
13011: LD_INT 1
13013: ST_TO_ADDR
// if p3 = 11 then
13014: LD_VAR 0 3
13018: PUSH
13019: LD_INT 11
13021: EQUAL
13022: IFFALSE 13032
// sRefresh := true ;
13024: LD_ADDR_EXP 71
13028: PUSH
13029: LD_INT 1
13031: ST_TO_ADDR
// if p3 = 12 then
13032: LD_VAR 0 3
13036: PUSH
13037: LD_INT 12
13039: EQUAL
13040: IFFALSE 13050
// sExp := true ;
13042: LD_ADDR_EXP 72
13046: PUSH
13047: LD_INT 1
13049: ST_TO_ADDR
// if p3 = 13 then
13050: LD_VAR 0 3
13054: PUSH
13055: LD_INT 13
13057: EQUAL
13058: IFFALSE 13068
// sDepot := true ;
13060: LD_ADDR_EXP 73
13064: PUSH
13065: LD_INT 1
13067: ST_TO_ADDR
// if p3 = 14 then
13068: LD_VAR 0 3
13072: PUSH
13073: LD_INT 14
13075: EQUAL
13076: IFFALSE 13086
// sFlag := true ;
13078: LD_ADDR_EXP 74
13082: PUSH
13083: LD_INT 1
13085: ST_TO_ADDR
// if p3 = 15 then
13086: LD_VAR 0 3
13090: PUSH
13091: LD_INT 15
13093: EQUAL
13094: IFFALSE 13104
// sKamikadze := true ;
13096: LD_ADDR_EXP 82
13100: PUSH
13101: LD_INT 1
13103: ST_TO_ADDR
// if p3 = 16 then
13104: LD_VAR 0 3
13108: PUSH
13109: LD_INT 16
13111: EQUAL
13112: IFFALSE 13122
// sTroll := true ;
13114: LD_ADDR_EXP 83
13118: PUSH
13119: LD_INT 1
13121: ST_TO_ADDR
// if p3 = 17 then
13122: LD_VAR 0 3
13126: PUSH
13127: LD_INT 17
13129: EQUAL
13130: IFFALSE 13140
// sSlow := true ;
13132: LD_ADDR_EXP 84
13136: PUSH
13137: LD_INT 1
13139: ST_TO_ADDR
// if p3 = 18 then
13140: LD_VAR 0 3
13144: PUSH
13145: LD_INT 18
13147: EQUAL
13148: IFFALSE 13158
// sLack := true ;
13150: LD_ADDR_EXP 85
13154: PUSH
13155: LD_INT 1
13157: ST_TO_ADDR
// if p3 = 19 then
13158: LD_VAR 0 3
13162: PUSH
13163: LD_INT 19
13165: EQUAL
13166: IFFALSE 13176
// sTank := true ;
13168: LD_ADDR_EXP 87
13172: PUSH
13173: LD_INT 1
13175: ST_TO_ADDR
// if p3 = 20 then
13176: LD_VAR 0 3
13180: PUSH
13181: LD_INT 20
13183: EQUAL
13184: IFFALSE 13194
// sRemote := true ;
13186: LD_ADDR_EXP 88
13190: PUSH
13191: LD_INT 1
13193: ST_TO_ADDR
// if p3 = 21 then
13194: LD_VAR 0 3
13198: PUSH
13199: LD_INT 21
13201: EQUAL
13202: IFFALSE 13212
// sPowell := true ;
13204: LD_ADDR_EXP 89
13208: PUSH
13209: LD_INT 1
13211: ST_TO_ADDR
// if p3 = 22 then
13212: LD_VAR 0 3
13216: PUSH
13217: LD_INT 22
13219: EQUAL
13220: IFFALSE 13230
// sTeleport := true ;
13222: LD_ADDR_EXP 92
13226: PUSH
13227: LD_INT 1
13229: ST_TO_ADDR
// if p3 = 23 then
13230: LD_VAR 0 3
13234: PUSH
13235: LD_INT 23
13237: EQUAL
13238: IFFALSE 13248
// sOilTower := true ;
13240: LD_ADDR_EXP 94
13244: PUSH
13245: LD_INT 1
13247: ST_TO_ADDR
// if p3 = 24 then
13248: LD_VAR 0 3
13252: PUSH
13253: LD_INT 24
13255: EQUAL
13256: IFFALSE 13266
// sShovel := true ;
13258: LD_ADDR_EXP 95
13262: PUSH
13263: LD_INT 1
13265: ST_TO_ADDR
// if p3 = 25 then
13266: LD_VAR 0 3
13270: PUSH
13271: LD_INT 25
13273: EQUAL
13274: IFFALSE 13284
// sSheik := true ;
13276: LD_ADDR_EXP 96
13280: PUSH
13281: LD_INT 1
13283: ST_TO_ADDR
// if p3 = 26 then
13284: LD_VAR 0 3
13288: PUSH
13289: LD_INT 26
13291: EQUAL
13292: IFFALSE 13302
// sEarthquake := true ;
13294: LD_ADDR_EXP 98
13298: PUSH
13299: LD_INT 1
13301: ST_TO_ADDR
// if p3 = 27 then
13302: LD_VAR 0 3
13306: PUSH
13307: LD_INT 27
13309: EQUAL
13310: IFFALSE 13320
// sAI := true ;
13312: LD_ADDR_EXP 99
13316: PUSH
13317: LD_INT 1
13319: ST_TO_ADDR
// if p3 = 28 then
13320: LD_VAR 0 3
13324: PUSH
13325: LD_INT 28
13327: EQUAL
13328: IFFALSE 13338
// sCargo := true ;
13330: LD_ADDR_EXP 102
13334: PUSH
13335: LD_INT 1
13337: ST_TO_ADDR
// if p3 = 29 then
13338: LD_VAR 0 3
13342: PUSH
13343: LD_INT 29
13345: EQUAL
13346: IFFALSE 13356
// sDLaser := true ;
13348: LD_ADDR_EXP 103
13352: PUSH
13353: LD_INT 1
13355: ST_TO_ADDR
// if p3 = 30 then
13356: LD_VAR 0 3
13360: PUSH
13361: LD_INT 30
13363: EQUAL
13364: IFFALSE 13374
// sExchange := true ;
13366: LD_ADDR_EXP 104
13370: PUSH
13371: LD_INT 1
13373: ST_TO_ADDR
// if p3 = 31 then
13374: LD_VAR 0 3
13378: PUSH
13379: LD_INT 31
13381: EQUAL
13382: IFFALSE 13392
// sFac := true ;
13384: LD_ADDR_EXP 105
13388: PUSH
13389: LD_INT 1
13391: ST_TO_ADDR
// if p3 = 32 then
13392: LD_VAR 0 3
13396: PUSH
13397: LD_INT 32
13399: EQUAL
13400: IFFALSE 13410
// sPower := true ;
13402: LD_ADDR_EXP 106
13406: PUSH
13407: LD_INT 1
13409: ST_TO_ADDR
// if p3 = 33 then
13410: LD_VAR 0 3
13414: PUSH
13415: LD_INT 33
13417: EQUAL
13418: IFFALSE 13428
// sRandom := true ;
13420: LD_ADDR_EXP 107
13424: PUSH
13425: LD_INT 1
13427: ST_TO_ADDR
// if p3 = 34 then
13428: LD_VAR 0 3
13432: PUSH
13433: LD_INT 34
13435: EQUAL
13436: IFFALSE 13446
// sShield := true ;
13438: LD_ADDR_EXP 108
13442: PUSH
13443: LD_INT 1
13445: ST_TO_ADDR
// if p3 = 35 then
13446: LD_VAR 0 3
13450: PUSH
13451: LD_INT 35
13453: EQUAL
13454: IFFALSE 13464
// sTime := true ;
13456: LD_ADDR_EXP 109
13460: PUSH
13461: LD_INT 1
13463: ST_TO_ADDR
// if p3 = 36 then
13464: LD_VAR 0 3
13468: PUSH
13469: LD_INT 36
13471: EQUAL
13472: IFFALSE 13482
// sTools := true ;
13474: LD_ADDR_EXP 110
13478: PUSH
13479: LD_INT 1
13481: ST_TO_ADDR
// if p3 = 101 then
13482: LD_VAR 0 3
13486: PUSH
13487: LD_INT 101
13489: EQUAL
13490: IFFALSE 13500
// sSold := true ;
13492: LD_ADDR_EXP 75
13496: PUSH
13497: LD_INT 1
13499: ST_TO_ADDR
// if p3 = 102 then
13500: LD_VAR 0 3
13504: PUSH
13505: LD_INT 102
13507: EQUAL
13508: IFFALSE 13518
// sDiff := true ;
13510: LD_ADDR_EXP 76
13514: PUSH
13515: LD_INT 1
13517: ST_TO_ADDR
// if p3 = 103 then
13518: LD_VAR 0 3
13522: PUSH
13523: LD_INT 103
13525: EQUAL
13526: IFFALSE 13536
// sFog := true ;
13528: LD_ADDR_EXP 79
13532: PUSH
13533: LD_INT 1
13535: ST_TO_ADDR
// if p3 = 104 then
13536: LD_VAR 0 3
13540: PUSH
13541: LD_INT 104
13543: EQUAL
13544: IFFALSE 13554
// sReset := true ;
13546: LD_ADDR_EXP 80
13550: PUSH
13551: LD_INT 1
13553: ST_TO_ADDR
// if p3 = 105 then
13554: LD_VAR 0 3
13558: PUSH
13559: LD_INT 105
13561: EQUAL
13562: IFFALSE 13572
// sSun := true ;
13564: LD_ADDR_EXP 81
13568: PUSH
13569: LD_INT 1
13571: ST_TO_ADDR
// if p3 = 106 then
13572: LD_VAR 0 3
13576: PUSH
13577: LD_INT 106
13579: EQUAL
13580: IFFALSE 13590
// sTiger := true ;
13582: LD_ADDR_EXP 77
13586: PUSH
13587: LD_INT 1
13589: ST_TO_ADDR
// if p3 = 107 then
13590: LD_VAR 0 3
13594: PUSH
13595: LD_INT 107
13597: EQUAL
13598: IFFALSE 13608
// sBomb := true ;
13600: LD_ADDR_EXP 78
13604: PUSH
13605: LD_INT 1
13607: ST_TO_ADDR
// if p3 = 108 then
13608: LD_VAR 0 3
13612: PUSH
13613: LD_INT 108
13615: EQUAL
13616: IFFALSE 13626
// sWound := true ;
13618: LD_ADDR_EXP 86
13622: PUSH
13623: LD_INT 1
13625: ST_TO_ADDR
// if p3 = 109 then
13626: LD_VAR 0 3
13630: PUSH
13631: LD_INT 109
13633: EQUAL
13634: IFFALSE 13644
// sBetray := true ;
13636: LD_ADDR_EXP 90
13640: PUSH
13641: LD_INT 1
13643: ST_TO_ADDR
// if p3 = 110 then
13644: LD_VAR 0 3
13648: PUSH
13649: LD_INT 110
13651: EQUAL
13652: IFFALSE 13662
// sContamin := true ;
13654: LD_ADDR_EXP 91
13658: PUSH
13659: LD_INT 1
13661: ST_TO_ADDR
// if p3 = 111 then
13662: LD_VAR 0 3
13666: PUSH
13667: LD_INT 111
13669: EQUAL
13670: IFFALSE 13680
// sOil := true ;
13672: LD_ADDR_EXP 93
13676: PUSH
13677: LD_INT 1
13679: ST_TO_ADDR
// if p3 = 112 then
13680: LD_VAR 0 3
13684: PUSH
13685: LD_INT 112
13687: EQUAL
13688: IFFALSE 13698
// sStu := true ;
13690: LD_ADDR_EXP 97
13694: PUSH
13695: LD_INT 1
13697: ST_TO_ADDR
// if p3 = 113 then
13698: LD_VAR 0 3
13702: PUSH
13703: LD_INT 113
13705: EQUAL
13706: IFFALSE 13716
// sBazooka := true ;
13708: LD_ADDR_EXP 100
13712: PUSH
13713: LD_INT 1
13715: ST_TO_ADDR
// if p3 = 114 then
13716: LD_VAR 0 3
13720: PUSH
13721: LD_INT 114
13723: EQUAL
13724: IFFALSE 13734
// sMortar := true ;
13726: LD_ADDR_EXP 101
13730: PUSH
13731: LD_INT 1
13733: ST_TO_ADDR
// if p3 = 115 then
13734: LD_VAR 0 3
13738: PUSH
13739: LD_INT 115
13741: EQUAL
13742: IFFALSE 13752
// sRanger := true ;
13744: LD_ADDR_EXP 111
13748: PUSH
13749: LD_INT 1
13751: ST_TO_ADDR
// end ; if p2 = 101 then
13752: LD_VAR 0 2
13756: PUSH
13757: LD_INT 101
13759: EQUAL
13760: IFFALSE 13963
// begin case p3 of 1 :
13762: LD_VAR 0 3
13766: PUSH
13767: LD_INT 1
13769: DOUBLE
13770: EQUAL
13771: IFTRUE 13775
13773: GO 13782
13775: POP
// hHackUnlimitedResources ; 2 :
13776: CALL 24057 0 0
13780: GO 13963
13782: LD_INT 2
13784: DOUBLE
13785: EQUAL
13786: IFTRUE 13790
13788: GO 13797
13790: POP
// hHackSetLevel10 ; 3 :
13791: CALL 24190 0 0
13795: GO 13963
13797: LD_INT 3
13799: DOUBLE
13800: EQUAL
13801: IFTRUE 13805
13803: GO 13812
13805: POP
// hHackSetLevel10YourUnits ; 4 :
13806: CALL 24275 0 0
13810: GO 13963
13812: LD_INT 4
13814: DOUBLE
13815: EQUAL
13816: IFTRUE 13820
13818: GO 13842
13820: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
13821: LD_VAR 0 4
13825: PPUSH
13826: LD_VAR 0 5
13830: PPUSH
13831: LD_VAR 0 6
13835: PPUSH
13836: CALL 24365 0 3
13840: GO 13963
13842: LD_INT 5
13844: DOUBLE
13845: EQUAL
13846: IFTRUE 13850
13848: GO 13857
13850: POP
// hHackSpawnVehicle ; 6 :
13851: CALL 24426 0 0
13855: GO 13963
13857: LD_INT 6
13859: DOUBLE
13860: EQUAL
13861: IFTRUE 13865
13863: GO 13872
13865: POP
// hHackInvincible ; 7 :
13866: CALL 24972 0 0
13870: GO 13963
13872: LD_INT 7
13874: DOUBLE
13875: EQUAL
13876: IFTRUE 13880
13878: GO 13887
13880: POP
// hHackInvisible ; 8 :
13881: CALL 25083 0 0
13885: GO 13963
13887: LD_INT 8
13889: DOUBLE
13890: EQUAL
13891: IFTRUE 13895
13893: GO 13902
13895: POP
// hHackChangeYourSide ; 9 :
13896: CALL 25140 0 0
13900: GO 13963
13902: LD_INT 9
13904: DOUBLE
13905: EQUAL
13906: IFTRUE 13910
13908: GO 13917
13910: POP
// hHackChangeUnitSide ; 10 :
13911: CALL 25182 0 0
13915: GO 13963
13917: LD_INT 10
13919: DOUBLE
13920: EQUAL
13921: IFTRUE 13925
13923: GO 13932
13925: POP
// hHackFog ; 11 :
13926: CALL 25283 0 0
13930: GO 13963
13932: LD_INT 11
13934: DOUBLE
13935: EQUAL
13936: IFTRUE 13940
13938: GO 13947
13940: POP
// hHackApeman ; 12 :
13941: CALL 25298 0 0
13945: GO 13963
13947: LD_INT 12
13949: DOUBLE
13950: EQUAL
13951: IFTRUE 13955
13953: GO 13962
13955: POP
// hHackBoom ; end ;
13956: CALL 25383 0 0
13960: GO 13963
13962: POP
// end ; end ;
13963: PPOPN 6
13965: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13966: GO 13968
13968: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13969: LD_STRING initStreamRollete();
13971: PPUSH
13972: CALL_OW 559
// InitStreamMode ;
13976: CALL 13985 0 0
// DefineStreamItems ( ) ;
13980: CALL 14425 0 0
// end ;
13984: END
// function InitStreamMode ; begin
13985: LD_INT 0
13987: PPUSH
// streamModeActive := false ;
13988: LD_ADDR_EXP 58
13992: PUSH
13993: LD_INT 0
13995: ST_TO_ADDR
// normalCounter := 36 ;
13996: LD_ADDR_EXP 59
14000: PUSH
14001: LD_INT 36
14003: ST_TO_ADDR
// hardcoreCounter := 16 ;
14004: LD_ADDR_EXP 60
14008: PUSH
14009: LD_INT 16
14011: ST_TO_ADDR
// sRocket := false ;
14012: LD_ADDR_EXP 63
14016: PUSH
14017: LD_INT 0
14019: ST_TO_ADDR
// sSpeed := false ;
14020: LD_ADDR_EXP 62
14024: PUSH
14025: LD_INT 0
14027: ST_TO_ADDR
// sEngine := false ;
14028: LD_ADDR_EXP 64
14032: PUSH
14033: LD_INT 0
14035: ST_TO_ADDR
// sSpec := false ;
14036: LD_ADDR_EXP 61
14040: PUSH
14041: LD_INT 0
14043: ST_TO_ADDR
// sLevel := false ;
14044: LD_ADDR_EXP 65
14048: PUSH
14049: LD_INT 0
14051: ST_TO_ADDR
// sArmoury := false ;
14052: LD_ADDR_EXP 66
14056: PUSH
14057: LD_INT 0
14059: ST_TO_ADDR
// sRadar := false ;
14060: LD_ADDR_EXP 67
14064: PUSH
14065: LD_INT 0
14067: ST_TO_ADDR
// sBunker := false ;
14068: LD_ADDR_EXP 68
14072: PUSH
14073: LD_INT 0
14075: ST_TO_ADDR
// sHack := false ;
14076: LD_ADDR_EXP 69
14080: PUSH
14081: LD_INT 0
14083: ST_TO_ADDR
// sFire := false ;
14084: LD_ADDR_EXP 70
14088: PUSH
14089: LD_INT 0
14091: ST_TO_ADDR
// sRefresh := false ;
14092: LD_ADDR_EXP 71
14096: PUSH
14097: LD_INT 0
14099: ST_TO_ADDR
// sExp := false ;
14100: LD_ADDR_EXP 72
14104: PUSH
14105: LD_INT 0
14107: ST_TO_ADDR
// sDepot := false ;
14108: LD_ADDR_EXP 73
14112: PUSH
14113: LD_INT 0
14115: ST_TO_ADDR
// sFlag := false ;
14116: LD_ADDR_EXP 74
14120: PUSH
14121: LD_INT 0
14123: ST_TO_ADDR
// sKamikadze := false ;
14124: LD_ADDR_EXP 82
14128: PUSH
14129: LD_INT 0
14131: ST_TO_ADDR
// sTroll := false ;
14132: LD_ADDR_EXP 83
14136: PUSH
14137: LD_INT 0
14139: ST_TO_ADDR
// sSlow := false ;
14140: LD_ADDR_EXP 84
14144: PUSH
14145: LD_INT 0
14147: ST_TO_ADDR
// sLack := false ;
14148: LD_ADDR_EXP 85
14152: PUSH
14153: LD_INT 0
14155: ST_TO_ADDR
// sTank := false ;
14156: LD_ADDR_EXP 87
14160: PUSH
14161: LD_INT 0
14163: ST_TO_ADDR
// sRemote := false ;
14164: LD_ADDR_EXP 88
14168: PUSH
14169: LD_INT 0
14171: ST_TO_ADDR
// sPowell := false ;
14172: LD_ADDR_EXP 89
14176: PUSH
14177: LD_INT 0
14179: ST_TO_ADDR
// sTeleport := false ;
14180: LD_ADDR_EXP 92
14184: PUSH
14185: LD_INT 0
14187: ST_TO_ADDR
// sOilTower := false ;
14188: LD_ADDR_EXP 94
14192: PUSH
14193: LD_INT 0
14195: ST_TO_ADDR
// sShovel := false ;
14196: LD_ADDR_EXP 95
14200: PUSH
14201: LD_INT 0
14203: ST_TO_ADDR
// sSheik := false ;
14204: LD_ADDR_EXP 96
14208: PUSH
14209: LD_INT 0
14211: ST_TO_ADDR
// sEarthquake := false ;
14212: LD_ADDR_EXP 98
14216: PUSH
14217: LD_INT 0
14219: ST_TO_ADDR
// sAI := false ;
14220: LD_ADDR_EXP 99
14224: PUSH
14225: LD_INT 0
14227: ST_TO_ADDR
// sCargo := false ;
14228: LD_ADDR_EXP 102
14232: PUSH
14233: LD_INT 0
14235: ST_TO_ADDR
// sDLaser := false ;
14236: LD_ADDR_EXP 103
14240: PUSH
14241: LD_INT 0
14243: ST_TO_ADDR
// sExchange := false ;
14244: LD_ADDR_EXP 104
14248: PUSH
14249: LD_INT 0
14251: ST_TO_ADDR
// sFac := false ;
14252: LD_ADDR_EXP 105
14256: PUSH
14257: LD_INT 0
14259: ST_TO_ADDR
// sPower := false ;
14260: LD_ADDR_EXP 106
14264: PUSH
14265: LD_INT 0
14267: ST_TO_ADDR
// sRandom := false ;
14268: LD_ADDR_EXP 107
14272: PUSH
14273: LD_INT 0
14275: ST_TO_ADDR
// sShield := false ;
14276: LD_ADDR_EXP 108
14280: PUSH
14281: LD_INT 0
14283: ST_TO_ADDR
// sTime := false ;
14284: LD_ADDR_EXP 109
14288: PUSH
14289: LD_INT 0
14291: ST_TO_ADDR
// sTools := false ;
14292: LD_ADDR_EXP 110
14296: PUSH
14297: LD_INT 0
14299: ST_TO_ADDR
// sSold := false ;
14300: LD_ADDR_EXP 75
14304: PUSH
14305: LD_INT 0
14307: ST_TO_ADDR
// sDiff := false ;
14308: LD_ADDR_EXP 76
14312: PUSH
14313: LD_INT 0
14315: ST_TO_ADDR
// sFog := false ;
14316: LD_ADDR_EXP 79
14320: PUSH
14321: LD_INT 0
14323: ST_TO_ADDR
// sReset := false ;
14324: LD_ADDR_EXP 80
14328: PUSH
14329: LD_INT 0
14331: ST_TO_ADDR
// sSun := false ;
14332: LD_ADDR_EXP 81
14336: PUSH
14337: LD_INT 0
14339: ST_TO_ADDR
// sTiger := false ;
14340: LD_ADDR_EXP 77
14344: PUSH
14345: LD_INT 0
14347: ST_TO_ADDR
// sBomb := false ;
14348: LD_ADDR_EXP 78
14352: PUSH
14353: LD_INT 0
14355: ST_TO_ADDR
// sWound := false ;
14356: LD_ADDR_EXP 86
14360: PUSH
14361: LD_INT 0
14363: ST_TO_ADDR
// sBetray := false ;
14364: LD_ADDR_EXP 90
14368: PUSH
14369: LD_INT 0
14371: ST_TO_ADDR
// sContamin := false ;
14372: LD_ADDR_EXP 91
14376: PUSH
14377: LD_INT 0
14379: ST_TO_ADDR
// sOil := false ;
14380: LD_ADDR_EXP 93
14384: PUSH
14385: LD_INT 0
14387: ST_TO_ADDR
// sStu := false ;
14388: LD_ADDR_EXP 97
14392: PUSH
14393: LD_INT 0
14395: ST_TO_ADDR
// sBazooka := false ;
14396: LD_ADDR_EXP 100
14400: PUSH
14401: LD_INT 0
14403: ST_TO_ADDR
// sMortar := false ;
14404: LD_ADDR_EXP 101
14408: PUSH
14409: LD_INT 0
14411: ST_TO_ADDR
// sRanger := false ;
14412: LD_ADDR_EXP 111
14416: PUSH
14417: LD_INT 0
14419: ST_TO_ADDR
// end ;
14420: LD_VAR 0 1
14424: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14425: LD_INT 0
14427: PPUSH
14428: PPUSH
14429: PPUSH
14430: PPUSH
14431: PPUSH
// result := [ ] ;
14432: LD_ADDR_VAR 0 1
14436: PUSH
14437: EMPTY
14438: ST_TO_ADDR
// if campaign_id = 1 then
14439: LD_OWVAR 69
14443: PUSH
14444: LD_INT 1
14446: EQUAL
14447: IFFALSE 17385
// begin case mission_number of 1 :
14449: LD_OWVAR 70
14453: PUSH
14454: LD_INT 1
14456: DOUBLE
14457: EQUAL
14458: IFTRUE 14462
14460: GO 14526
14462: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
14463: LD_ADDR_VAR 0 1
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: LD_INT 4
14473: PUSH
14474: LD_INT 11
14476: PUSH
14477: LD_INT 12
14479: PUSH
14480: LD_INT 15
14482: PUSH
14483: LD_INT 16
14485: PUSH
14486: LD_INT 22
14488: PUSH
14489: LD_INT 23
14491: PUSH
14492: LD_INT 26
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 101
14508: PUSH
14509: LD_INT 102
14511: PUSH
14512: LD_INT 106
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: ST_TO_ADDR
14524: GO 17383
14526: LD_INT 2
14528: DOUBLE
14529: EQUAL
14530: IFTRUE 14534
14532: GO 14606
14534: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14535: LD_ADDR_VAR 0 1
14539: PUSH
14540: LD_INT 2
14542: PUSH
14543: LD_INT 4
14545: PUSH
14546: LD_INT 11
14548: PUSH
14549: LD_INT 12
14551: PUSH
14552: LD_INT 15
14554: PUSH
14555: LD_INT 16
14557: PUSH
14558: LD_INT 22
14560: PUSH
14561: LD_INT 23
14563: PUSH
14564: LD_INT 26
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 101
14580: PUSH
14581: LD_INT 102
14583: PUSH
14584: LD_INT 105
14586: PUSH
14587: LD_INT 106
14589: PUSH
14590: LD_INT 108
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: ST_TO_ADDR
14604: GO 17383
14606: LD_INT 3
14608: DOUBLE
14609: EQUAL
14610: IFTRUE 14614
14612: GO 14690
14614: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14615: LD_ADDR_VAR 0 1
14619: PUSH
14620: LD_INT 2
14622: PUSH
14623: LD_INT 4
14625: PUSH
14626: LD_INT 5
14628: PUSH
14629: LD_INT 11
14631: PUSH
14632: LD_INT 12
14634: PUSH
14635: LD_INT 15
14637: PUSH
14638: LD_INT 16
14640: PUSH
14641: LD_INT 22
14643: PUSH
14644: LD_INT 26
14646: PUSH
14647: LD_INT 36
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: PUSH
14662: LD_INT 101
14664: PUSH
14665: LD_INT 102
14667: PUSH
14668: LD_INT 105
14670: PUSH
14671: LD_INT 106
14673: PUSH
14674: LD_INT 108
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: ST_TO_ADDR
14688: GO 17383
14690: LD_INT 4
14692: DOUBLE
14693: EQUAL
14694: IFTRUE 14698
14696: GO 14782
14698: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14699: LD_ADDR_VAR 0 1
14703: PUSH
14704: LD_INT 2
14706: PUSH
14707: LD_INT 4
14709: PUSH
14710: LD_INT 5
14712: PUSH
14713: LD_INT 8
14715: PUSH
14716: LD_INT 11
14718: PUSH
14719: LD_INT 12
14721: PUSH
14722: LD_INT 15
14724: PUSH
14725: LD_INT 16
14727: PUSH
14728: LD_INT 22
14730: PUSH
14731: LD_INT 23
14733: PUSH
14734: LD_INT 26
14736: PUSH
14737: LD_INT 36
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: PUSH
14754: LD_INT 101
14756: PUSH
14757: LD_INT 102
14759: PUSH
14760: LD_INT 105
14762: PUSH
14763: LD_INT 106
14765: PUSH
14766: LD_INT 108
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: ST_TO_ADDR
14780: GO 17383
14782: LD_INT 5
14784: DOUBLE
14785: EQUAL
14786: IFTRUE 14790
14788: GO 14890
14790: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14791: LD_ADDR_VAR 0 1
14795: PUSH
14796: LD_INT 2
14798: PUSH
14799: LD_INT 4
14801: PUSH
14802: LD_INT 5
14804: PUSH
14805: LD_INT 6
14807: PUSH
14808: LD_INT 8
14810: PUSH
14811: LD_INT 11
14813: PUSH
14814: LD_INT 12
14816: PUSH
14817: LD_INT 15
14819: PUSH
14820: LD_INT 16
14822: PUSH
14823: LD_INT 22
14825: PUSH
14826: LD_INT 23
14828: PUSH
14829: LD_INT 25
14831: PUSH
14832: LD_INT 26
14834: PUSH
14835: LD_INT 36
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: PUSH
14854: LD_INT 101
14856: PUSH
14857: LD_INT 102
14859: PUSH
14860: LD_INT 105
14862: PUSH
14863: LD_INT 106
14865: PUSH
14866: LD_INT 108
14868: PUSH
14869: LD_INT 109
14871: PUSH
14872: LD_INT 112
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: ST_TO_ADDR
14888: GO 17383
14890: LD_INT 6
14892: DOUBLE
14893: EQUAL
14894: IFTRUE 14898
14896: GO 15018
14898: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14899: LD_ADDR_VAR 0 1
14903: PUSH
14904: LD_INT 2
14906: PUSH
14907: LD_INT 4
14909: PUSH
14910: LD_INT 5
14912: PUSH
14913: LD_INT 6
14915: PUSH
14916: LD_INT 8
14918: PUSH
14919: LD_INT 11
14921: PUSH
14922: LD_INT 12
14924: PUSH
14925: LD_INT 15
14927: PUSH
14928: LD_INT 16
14930: PUSH
14931: LD_INT 20
14933: PUSH
14934: LD_INT 21
14936: PUSH
14937: LD_INT 22
14939: PUSH
14940: LD_INT 23
14942: PUSH
14943: LD_INT 25
14945: PUSH
14946: LD_INT 26
14948: PUSH
14949: LD_INT 30
14951: PUSH
14952: LD_INT 31
14954: PUSH
14955: LD_INT 32
14957: PUSH
14958: LD_INT 36
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 101
14984: PUSH
14985: LD_INT 102
14987: PUSH
14988: LD_INT 105
14990: PUSH
14991: LD_INT 106
14993: PUSH
14994: LD_INT 108
14996: PUSH
14997: LD_INT 109
14999: PUSH
15000: LD_INT 112
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: ST_TO_ADDR
15016: GO 17383
15018: LD_INT 7
15020: DOUBLE
15021: EQUAL
15022: IFTRUE 15026
15024: GO 15126
15026: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
15027: LD_ADDR_VAR 0 1
15031: PUSH
15032: LD_INT 2
15034: PUSH
15035: LD_INT 4
15037: PUSH
15038: LD_INT 5
15040: PUSH
15041: LD_INT 7
15043: PUSH
15044: LD_INT 11
15046: PUSH
15047: LD_INT 12
15049: PUSH
15050: LD_INT 15
15052: PUSH
15053: LD_INT 16
15055: PUSH
15056: LD_INT 20
15058: PUSH
15059: LD_INT 21
15061: PUSH
15062: LD_INT 22
15064: PUSH
15065: LD_INT 23
15067: PUSH
15068: LD_INT 25
15070: PUSH
15071: LD_INT 26
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 101
15092: PUSH
15093: LD_INT 102
15095: PUSH
15096: LD_INT 103
15098: PUSH
15099: LD_INT 105
15101: PUSH
15102: LD_INT 106
15104: PUSH
15105: LD_INT 108
15107: PUSH
15108: LD_INT 112
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: ST_TO_ADDR
15124: GO 17383
15126: LD_INT 8
15128: DOUBLE
15129: EQUAL
15130: IFTRUE 15134
15132: GO 15262
15134: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
15135: LD_ADDR_VAR 0 1
15139: PUSH
15140: LD_INT 2
15142: PUSH
15143: LD_INT 4
15145: PUSH
15146: LD_INT 5
15148: PUSH
15149: LD_INT 6
15151: PUSH
15152: LD_INT 7
15154: PUSH
15155: LD_INT 8
15157: PUSH
15158: LD_INT 11
15160: PUSH
15161: LD_INT 12
15163: PUSH
15164: LD_INT 15
15166: PUSH
15167: LD_INT 16
15169: PUSH
15170: LD_INT 20
15172: PUSH
15173: LD_INT 21
15175: PUSH
15176: LD_INT 22
15178: PUSH
15179: LD_INT 23
15181: PUSH
15182: LD_INT 25
15184: PUSH
15185: LD_INT 26
15187: PUSH
15188: LD_INT 30
15190: PUSH
15191: LD_INT 31
15193: PUSH
15194: LD_INT 32
15196: PUSH
15197: LD_INT 36
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: PUSH
15222: LD_INT 101
15224: PUSH
15225: LD_INT 102
15227: PUSH
15228: LD_INT 103
15230: PUSH
15231: LD_INT 105
15233: PUSH
15234: LD_INT 106
15236: PUSH
15237: LD_INT 108
15239: PUSH
15240: LD_INT 109
15242: PUSH
15243: LD_INT 112
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: ST_TO_ADDR
15260: GO 17383
15262: LD_INT 9
15264: DOUBLE
15265: EQUAL
15266: IFTRUE 15270
15268: GO 15406
15270: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
15271: LD_ADDR_VAR 0 1
15275: PUSH
15276: LD_INT 2
15278: PUSH
15279: LD_INT 4
15281: PUSH
15282: LD_INT 5
15284: PUSH
15285: LD_INT 6
15287: PUSH
15288: LD_INT 7
15290: PUSH
15291: LD_INT 8
15293: PUSH
15294: LD_INT 11
15296: PUSH
15297: LD_INT 12
15299: PUSH
15300: LD_INT 15
15302: PUSH
15303: LD_INT 16
15305: PUSH
15306: LD_INT 20
15308: PUSH
15309: LD_INT 21
15311: PUSH
15312: LD_INT 22
15314: PUSH
15315: LD_INT 23
15317: PUSH
15318: LD_INT 25
15320: PUSH
15321: LD_INT 26
15323: PUSH
15324: LD_INT 28
15326: PUSH
15327: LD_INT 30
15329: PUSH
15330: LD_INT 31
15332: PUSH
15333: LD_INT 32
15335: PUSH
15336: LD_INT 36
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 101
15364: PUSH
15365: LD_INT 102
15367: PUSH
15368: LD_INT 103
15370: PUSH
15371: LD_INT 105
15373: PUSH
15374: LD_INT 106
15376: PUSH
15377: LD_INT 108
15379: PUSH
15380: LD_INT 109
15382: PUSH
15383: LD_INT 112
15385: PUSH
15386: LD_INT 114
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: ST_TO_ADDR
15404: GO 17383
15406: LD_INT 10
15408: DOUBLE
15409: EQUAL
15410: IFTRUE 15414
15412: GO 15598
15414: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
15415: LD_ADDR_VAR 0 1
15419: PUSH
15420: LD_INT 2
15422: PUSH
15423: LD_INT 4
15425: PUSH
15426: LD_INT 5
15428: PUSH
15429: LD_INT 6
15431: PUSH
15432: LD_INT 7
15434: PUSH
15435: LD_INT 8
15437: PUSH
15438: LD_INT 9
15440: PUSH
15441: LD_INT 10
15443: PUSH
15444: LD_INT 11
15446: PUSH
15447: LD_INT 12
15449: PUSH
15450: LD_INT 13
15452: PUSH
15453: LD_INT 14
15455: PUSH
15456: LD_INT 15
15458: PUSH
15459: LD_INT 16
15461: PUSH
15462: LD_INT 17
15464: PUSH
15465: LD_INT 18
15467: PUSH
15468: LD_INT 19
15470: PUSH
15471: LD_INT 20
15473: PUSH
15474: LD_INT 21
15476: PUSH
15477: LD_INT 22
15479: PUSH
15480: LD_INT 23
15482: PUSH
15483: LD_INT 24
15485: PUSH
15486: LD_INT 25
15488: PUSH
15489: LD_INT 26
15491: PUSH
15492: LD_INT 28
15494: PUSH
15495: LD_INT 30
15497: PUSH
15498: LD_INT 31
15500: PUSH
15501: LD_INT 32
15503: PUSH
15504: LD_INT 36
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 101
15540: PUSH
15541: LD_INT 102
15543: PUSH
15544: LD_INT 103
15546: PUSH
15547: LD_INT 104
15549: PUSH
15550: LD_INT 105
15552: PUSH
15553: LD_INT 106
15555: PUSH
15556: LD_INT 107
15558: PUSH
15559: LD_INT 108
15561: PUSH
15562: LD_INT 109
15564: PUSH
15565: LD_INT 110
15567: PUSH
15568: LD_INT 111
15570: PUSH
15571: LD_INT 112
15573: PUSH
15574: LD_INT 114
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: ST_TO_ADDR
15596: GO 17383
15598: LD_INT 11
15600: DOUBLE
15601: EQUAL
15602: IFTRUE 15606
15604: GO 15798
15606: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 2
15614: PUSH
15615: LD_INT 3
15617: PUSH
15618: LD_INT 4
15620: PUSH
15621: LD_INT 5
15623: PUSH
15624: LD_INT 6
15626: PUSH
15627: LD_INT 7
15629: PUSH
15630: LD_INT 8
15632: PUSH
15633: LD_INT 9
15635: PUSH
15636: LD_INT 10
15638: PUSH
15639: LD_INT 11
15641: PUSH
15642: LD_INT 12
15644: PUSH
15645: LD_INT 13
15647: PUSH
15648: LD_INT 14
15650: PUSH
15651: LD_INT 15
15653: PUSH
15654: LD_INT 16
15656: PUSH
15657: LD_INT 17
15659: PUSH
15660: LD_INT 18
15662: PUSH
15663: LD_INT 19
15665: PUSH
15666: LD_INT 20
15668: PUSH
15669: LD_INT 21
15671: PUSH
15672: LD_INT 22
15674: PUSH
15675: LD_INT 23
15677: PUSH
15678: LD_INT 24
15680: PUSH
15681: LD_INT 25
15683: PUSH
15684: LD_INT 26
15686: PUSH
15687: LD_INT 28
15689: PUSH
15690: LD_INT 30
15692: PUSH
15693: LD_INT 31
15695: PUSH
15696: LD_INT 32
15698: PUSH
15699: LD_INT 34
15701: PUSH
15702: LD_INT 36
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 101
15740: PUSH
15741: LD_INT 102
15743: PUSH
15744: LD_INT 103
15746: PUSH
15747: LD_INT 104
15749: PUSH
15750: LD_INT 105
15752: PUSH
15753: LD_INT 106
15755: PUSH
15756: LD_INT 107
15758: PUSH
15759: LD_INT 108
15761: PUSH
15762: LD_INT 109
15764: PUSH
15765: LD_INT 110
15767: PUSH
15768: LD_INT 111
15770: PUSH
15771: LD_INT 112
15773: PUSH
15774: LD_INT 114
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: ST_TO_ADDR
15796: GO 17383
15798: LD_INT 12
15800: DOUBLE
15801: EQUAL
15802: IFTRUE 15806
15804: GO 16014
15806: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15807: LD_ADDR_VAR 0 1
15811: PUSH
15812: LD_INT 1
15814: PUSH
15815: LD_INT 2
15817: PUSH
15818: LD_INT 3
15820: PUSH
15821: LD_INT 4
15823: PUSH
15824: LD_INT 5
15826: PUSH
15827: LD_INT 6
15829: PUSH
15830: LD_INT 7
15832: PUSH
15833: LD_INT 8
15835: PUSH
15836: LD_INT 9
15838: PUSH
15839: LD_INT 10
15841: PUSH
15842: LD_INT 11
15844: PUSH
15845: LD_INT 12
15847: PUSH
15848: LD_INT 13
15850: PUSH
15851: LD_INT 14
15853: PUSH
15854: LD_INT 15
15856: PUSH
15857: LD_INT 16
15859: PUSH
15860: LD_INT 17
15862: PUSH
15863: LD_INT 18
15865: PUSH
15866: LD_INT 19
15868: PUSH
15869: LD_INT 20
15871: PUSH
15872: LD_INT 21
15874: PUSH
15875: LD_INT 22
15877: PUSH
15878: LD_INT 23
15880: PUSH
15881: LD_INT 24
15883: PUSH
15884: LD_INT 25
15886: PUSH
15887: LD_INT 26
15889: PUSH
15890: LD_INT 27
15892: PUSH
15893: LD_INT 28
15895: PUSH
15896: LD_INT 30
15898: PUSH
15899: LD_INT 31
15901: PUSH
15902: LD_INT 32
15904: PUSH
15905: LD_INT 33
15907: PUSH
15908: LD_INT 34
15910: PUSH
15911: LD_INT 36
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 101
15952: PUSH
15953: LD_INT 102
15955: PUSH
15956: LD_INT 103
15958: PUSH
15959: LD_INT 104
15961: PUSH
15962: LD_INT 105
15964: PUSH
15965: LD_INT 106
15967: PUSH
15968: LD_INT 107
15970: PUSH
15971: LD_INT 108
15973: PUSH
15974: LD_INT 109
15976: PUSH
15977: LD_INT 110
15979: PUSH
15980: LD_INT 111
15982: PUSH
15983: LD_INT 112
15985: PUSH
15986: LD_INT 113
15988: PUSH
15989: LD_INT 114
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: ST_TO_ADDR
16012: GO 17383
16014: LD_INT 13
16016: DOUBLE
16017: EQUAL
16018: IFTRUE 16022
16020: GO 16218
16022: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
16023: LD_ADDR_VAR 0 1
16027: PUSH
16028: LD_INT 1
16030: PUSH
16031: LD_INT 2
16033: PUSH
16034: LD_INT 3
16036: PUSH
16037: LD_INT 4
16039: PUSH
16040: LD_INT 5
16042: PUSH
16043: LD_INT 8
16045: PUSH
16046: LD_INT 9
16048: PUSH
16049: LD_INT 10
16051: PUSH
16052: LD_INT 11
16054: PUSH
16055: LD_INT 12
16057: PUSH
16058: LD_INT 14
16060: PUSH
16061: LD_INT 15
16063: PUSH
16064: LD_INT 16
16066: PUSH
16067: LD_INT 17
16069: PUSH
16070: LD_INT 18
16072: PUSH
16073: LD_INT 19
16075: PUSH
16076: LD_INT 20
16078: PUSH
16079: LD_INT 21
16081: PUSH
16082: LD_INT 22
16084: PUSH
16085: LD_INT 23
16087: PUSH
16088: LD_INT 24
16090: PUSH
16091: LD_INT 25
16093: PUSH
16094: LD_INT 26
16096: PUSH
16097: LD_INT 27
16099: PUSH
16100: LD_INT 28
16102: PUSH
16103: LD_INT 30
16105: PUSH
16106: LD_INT 31
16108: PUSH
16109: LD_INT 32
16111: PUSH
16112: LD_INT 33
16114: PUSH
16115: LD_INT 34
16117: PUSH
16118: LD_INT 36
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 101
16156: PUSH
16157: LD_INT 102
16159: PUSH
16160: LD_INT 103
16162: PUSH
16163: LD_INT 104
16165: PUSH
16166: LD_INT 105
16168: PUSH
16169: LD_INT 106
16171: PUSH
16172: LD_INT 107
16174: PUSH
16175: LD_INT 108
16177: PUSH
16178: LD_INT 109
16180: PUSH
16181: LD_INT 110
16183: PUSH
16184: LD_INT 111
16186: PUSH
16187: LD_INT 112
16189: PUSH
16190: LD_INT 113
16192: PUSH
16193: LD_INT 114
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: ST_TO_ADDR
16216: GO 17383
16218: LD_INT 14
16220: DOUBLE
16221: EQUAL
16222: IFTRUE 16226
16224: GO 16438
16226: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
16227: LD_ADDR_VAR 0 1
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: LD_INT 3
16240: PUSH
16241: LD_INT 4
16243: PUSH
16244: LD_INT 5
16246: PUSH
16247: LD_INT 6
16249: PUSH
16250: LD_INT 7
16252: PUSH
16253: LD_INT 8
16255: PUSH
16256: LD_INT 9
16258: PUSH
16259: LD_INT 10
16261: PUSH
16262: LD_INT 11
16264: PUSH
16265: LD_INT 12
16267: PUSH
16268: LD_INT 13
16270: PUSH
16271: LD_INT 14
16273: PUSH
16274: LD_INT 15
16276: PUSH
16277: LD_INT 16
16279: PUSH
16280: LD_INT 17
16282: PUSH
16283: LD_INT 18
16285: PUSH
16286: LD_INT 19
16288: PUSH
16289: LD_INT 20
16291: PUSH
16292: LD_INT 21
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_INT 23
16300: PUSH
16301: LD_INT 24
16303: PUSH
16304: LD_INT 25
16306: PUSH
16307: LD_INT 26
16309: PUSH
16310: LD_INT 27
16312: PUSH
16313: LD_INT 28
16315: PUSH
16316: LD_INT 29
16318: PUSH
16319: LD_INT 30
16321: PUSH
16322: LD_INT 31
16324: PUSH
16325: LD_INT 32
16327: PUSH
16328: LD_INT 33
16330: PUSH
16331: LD_INT 34
16333: PUSH
16334: LD_INT 36
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 101
16376: PUSH
16377: LD_INT 102
16379: PUSH
16380: LD_INT 103
16382: PUSH
16383: LD_INT 104
16385: PUSH
16386: LD_INT 105
16388: PUSH
16389: LD_INT 106
16391: PUSH
16392: LD_INT 107
16394: PUSH
16395: LD_INT 108
16397: PUSH
16398: LD_INT 109
16400: PUSH
16401: LD_INT 110
16403: PUSH
16404: LD_INT 111
16406: PUSH
16407: LD_INT 112
16409: PUSH
16410: LD_INT 113
16412: PUSH
16413: LD_INT 114
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: ST_TO_ADDR
16436: GO 17383
16438: LD_INT 15
16440: DOUBLE
16441: EQUAL
16442: IFTRUE 16446
16444: GO 16658
16446: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
16447: LD_ADDR_VAR 0 1
16451: PUSH
16452: LD_INT 1
16454: PUSH
16455: LD_INT 2
16457: PUSH
16458: LD_INT 3
16460: PUSH
16461: LD_INT 4
16463: PUSH
16464: LD_INT 5
16466: PUSH
16467: LD_INT 6
16469: PUSH
16470: LD_INT 7
16472: PUSH
16473: LD_INT 8
16475: PUSH
16476: LD_INT 9
16478: PUSH
16479: LD_INT 10
16481: PUSH
16482: LD_INT 11
16484: PUSH
16485: LD_INT 12
16487: PUSH
16488: LD_INT 13
16490: PUSH
16491: LD_INT 14
16493: PUSH
16494: LD_INT 15
16496: PUSH
16497: LD_INT 16
16499: PUSH
16500: LD_INT 17
16502: PUSH
16503: LD_INT 18
16505: PUSH
16506: LD_INT 19
16508: PUSH
16509: LD_INT 20
16511: PUSH
16512: LD_INT 21
16514: PUSH
16515: LD_INT 22
16517: PUSH
16518: LD_INT 23
16520: PUSH
16521: LD_INT 24
16523: PUSH
16524: LD_INT 25
16526: PUSH
16527: LD_INT 26
16529: PUSH
16530: LD_INT 27
16532: PUSH
16533: LD_INT 28
16535: PUSH
16536: LD_INT 29
16538: PUSH
16539: LD_INT 30
16541: PUSH
16542: LD_INT 31
16544: PUSH
16545: LD_INT 32
16547: PUSH
16548: LD_INT 33
16550: PUSH
16551: LD_INT 34
16553: PUSH
16554: LD_INT 36
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 101
16596: PUSH
16597: LD_INT 102
16599: PUSH
16600: LD_INT 103
16602: PUSH
16603: LD_INT 104
16605: PUSH
16606: LD_INT 105
16608: PUSH
16609: LD_INT 106
16611: PUSH
16612: LD_INT 107
16614: PUSH
16615: LD_INT 108
16617: PUSH
16618: LD_INT 109
16620: PUSH
16621: LD_INT 110
16623: PUSH
16624: LD_INT 111
16626: PUSH
16627: LD_INT 112
16629: PUSH
16630: LD_INT 113
16632: PUSH
16633: LD_INT 114
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: ST_TO_ADDR
16656: GO 17383
16658: LD_INT 16
16660: DOUBLE
16661: EQUAL
16662: IFTRUE 16666
16664: GO 16790
16666: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16667: LD_ADDR_VAR 0 1
16671: PUSH
16672: LD_INT 2
16674: PUSH
16675: LD_INT 4
16677: PUSH
16678: LD_INT 5
16680: PUSH
16681: LD_INT 7
16683: PUSH
16684: LD_INT 11
16686: PUSH
16687: LD_INT 12
16689: PUSH
16690: LD_INT 15
16692: PUSH
16693: LD_INT 16
16695: PUSH
16696: LD_INT 20
16698: PUSH
16699: LD_INT 21
16701: PUSH
16702: LD_INT 22
16704: PUSH
16705: LD_INT 23
16707: PUSH
16708: LD_INT 25
16710: PUSH
16711: LD_INT 26
16713: PUSH
16714: LD_INT 30
16716: PUSH
16717: LD_INT 31
16719: PUSH
16720: LD_INT 32
16722: PUSH
16723: LD_INT 33
16725: PUSH
16726: LD_INT 34
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 101
16752: PUSH
16753: LD_INT 102
16755: PUSH
16756: LD_INT 103
16758: PUSH
16759: LD_INT 106
16761: PUSH
16762: LD_INT 108
16764: PUSH
16765: LD_INT 112
16767: PUSH
16768: LD_INT 113
16770: PUSH
16771: LD_INT 114
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: ST_TO_ADDR
16788: GO 17383
16790: LD_INT 17
16792: DOUBLE
16793: EQUAL
16794: IFTRUE 16798
16796: GO 17010
16798: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16799: LD_ADDR_VAR 0 1
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: LD_INT 2
16809: PUSH
16810: LD_INT 3
16812: PUSH
16813: LD_INT 4
16815: PUSH
16816: LD_INT 5
16818: PUSH
16819: LD_INT 6
16821: PUSH
16822: LD_INT 7
16824: PUSH
16825: LD_INT 8
16827: PUSH
16828: LD_INT 9
16830: PUSH
16831: LD_INT 10
16833: PUSH
16834: LD_INT 11
16836: PUSH
16837: LD_INT 12
16839: PUSH
16840: LD_INT 13
16842: PUSH
16843: LD_INT 14
16845: PUSH
16846: LD_INT 15
16848: PUSH
16849: LD_INT 16
16851: PUSH
16852: LD_INT 17
16854: PUSH
16855: LD_INT 18
16857: PUSH
16858: LD_INT 19
16860: PUSH
16861: LD_INT 20
16863: PUSH
16864: LD_INT 21
16866: PUSH
16867: LD_INT 22
16869: PUSH
16870: LD_INT 23
16872: PUSH
16873: LD_INT 24
16875: PUSH
16876: LD_INT 25
16878: PUSH
16879: LD_INT 26
16881: PUSH
16882: LD_INT 27
16884: PUSH
16885: LD_INT 28
16887: PUSH
16888: LD_INT 29
16890: PUSH
16891: LD_INT 30
16893: PUSH
16894: LD_INT 31
16896: PUSH
16897: LD_INT 32
16899: PUSH
16900: LD_INT 33
16902: PUSH
16903: LD_INT 34
16905: PUSH
16906: LD_INT 36
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 101
16948: PUSH
16949: LD_INT 102
16951: PUSH
16952: LD_INT 103
16954: PUSH
16955: LD_INT 104
16957: PUSH
16958: LD_INT 105
16960: PUSH
16961: LD_INT 106
16963: PUSH
16964: LD_INT 107
16966: PUSH
16967: LD_INT 108
16969: PUSH
16970: LD_INT 109
16972: PUSH
16973: LD_INT 110
16975: PUSH
16976: LD_INT 111
16978: PUSH
16979: LD_INT 112
16981: PUSH
16982: LD_INT 113
16984: PUSH
16985: LD_INT 114
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: ST_TO_ADDR
17008: GO 17383
17010: LD_INT 18
17012: DOUBLE
17013: EQUAL
17014: IFTRUE 17018
17016: GO 17154
17018: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
17019: LD_ADDR_VAR 0 1
17023: PUSH
17024: LD_INT 2
17026: PUSH
17027: LD_INT 4
17029: PUSH
17030: LD_INT 5
17032: PUSH
17033: LD_INT 7
17035: PUSH
17036: LD_INT 11
17038: PUSH
17039: LD_INT 12
17041: PUSH
17042: LD_INT 15
17044: PUSH
17045: LD_INT 16
17047: PUSH
17048: LD_INT 20
17050: PUSH
17051: LD_INT 21
17053: PUSH
17054: LD_INT 22
17056: PUSH
17057: LD_INT 23
17059: PUSH
17060: LD_INT 25
17062: PUSH
17063: LD_INT 26
17065: PUSH
17066: LD_INT 30
17068: PUSH
17069: LD_INT 31
17071: PUSH
17072: LD_INT 32
17074: PUSH
17075: LD_INT 33
17077: PUSH
17078: LD_INT 34
17080: PUSH
17081: LD_INT 35
17083: PUSH
17084: LD_INT 36
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 101
17112: PUSH
17113: LD_INT 102
17115: PUSH
17116: LD_INT 103
17118: PUSH
17119: LD_INT 106
17121: PUSH
17122: LD_INT 108
17124: PUSH
17125: LD_INT 112
17127: PUSH
17128: LD_INT 113
17130: PUSH
17131: LD_INT 114
17133: PUSH
17134: LD_INT 115
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: ST_TO_ADDR
17152: GO 17383
17154: LD_INT 19
17156: DOUBLE
17157: EQUAL
17158: IFTRUE 17162
17160: GO 17382
17162: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
17163: LD_ADDR_VAR 0 1
17167: PUSH
17168: LD_INT 1
17170: PUSH
17171: LD_INT 2
17173: PUSH
17174: LD_INT 3
17176: PUSH
17177: LD_INT 4
17179: PUSH
17180: LD_INT 5
17182: PUSH
17183: LD_INT 6
17185: PUSH
17186: LD_INT 7
17188: PUSH
17189: LD_INT 8
17191: PUSH
17192: LD_INT 9
17194: PUSH
17195: LD_INT 10
17197: PUSH
17198: LD_INT 11
17200: PUSH
17201: LD_INT 12
17203: PUSH
17204: LD_INT 13
17206: PUSH
17207: LD_INT 14
17209: PUSH
17210: LD_INT 15
17212: PUSH
17213: LD_INT 16
17215: PUSH
17216: LD_INT 17
17218: PUSH
17219: LD_INT 18
17221: PUSH
17222: LD_INT 19
17224: PUSH
17225: LD_INT 20
17227: PUSH
17228: LD_INT 21
17230: PUSH
17231: LD_INT 22
17233: PUSH
17234: LD_INT 23
17236: PUSH
17237: LD_INT 24
17239: PUSH
17240: LD_INT 25
17242: PUSH
17243: LD_INT 26
17245: PUSH
17246: LD_INT 27
17248: PUSH
17249: LD_INT 28
17251: PUSH
17252: LD_INT 29
17254: PUSH
17255: LD_INT 30
17257: PUSH
17258: LD_INT 31
17260: PUSH
17261: LD_INT 32
17263: PUSH
17264: LD_INT 33
17266: PUSH
17267: LD_INT 34
17269: PUSH
17270: LD_INT 35
17272: PUSH
17273: LD_INT 36
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 101
17316: PUSH
17317: LD_INT 102
17319: PUSH
17320: LD_INT 103
17322: PUSH
17323: LD_INT 104
17325: PUSH
17326: LD_INT 105
17328: PUSH
17329: LD_INT 106
17331: PUSH
17332: LD_INT 107
17334: PUSH
17335: LD_INT 108
17337: PUSH
17338: LD_INT 109
17340: PUSH
17341: LD_INT 110
17343: PUSH
17344: LD_INT 111
17346: PUSH
17347: LD_INT 112
17349: PUSH
17350: LD_INT 113
17352: PUSH
17353: LD_INT 114
17355: PUSH
17356: LD_INT 115
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: ST_TO_ADDR
17380: GO 17383
17382: POP
// end else
17383: GO 17602
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
17385: LD_ADDR_VAR 0 1
17389: PUSH
17390: LD_INT 1
17392: PUSH
17393: LD_INT 2
17395: PUSH
17396: LD_INT 3
17398: PUSH
17399: LD_INT 4
17401: PUSH
17402: LD_INT 5
17404: PUSH
17405: LD_INT 6
17407: PUSH
17408: LD_INT 7
17410: PUSH
17411: LD_INT 8
17413: PUSH
17414: LD_INT 9
17416: PUSH
17417: LD_INT 10
17419: PUSH
17420: LD_INT 11
17422: PUSH
17423: LD_INT 12
17425: PUSH
17426: LD_INT 13
17428: PUSH
17429: LD_INT 14
17431: PUSH
17432: LD_INT 15
17434: PUSH
17435: LD_INT 16
17437: PUSH
17438: LD_INT 17
17440: PUSH
17441: LD_INT 18
17443: PUSH
17444: LD_INT 19
17446: PUSH
17447: LD_INT 20
17449: PUSH
17450: LD_INT 21
17452: PUSH
17453: LD_INT 22
17455: PUSH
17456: LD_INT 23
17458: PUSH
17459: LD_INT 24
17461: PUSH
17462: LD_INT 25
17464: PUSH
17465: LD_INT 26
17467: PUSH
17468: LD_INT 27
17470: PUSH
17471: LD_INT 28
17473: PUSH
17474: LD_INT 29
17476: PUSH
17477: LD_INT 30
17479: PUSH
17480: LD_INT 31
17482: PUSH
17483: LD_INT 32
17485: PUSH
17486: LD_INT 33
17488: PUSH
17489: LD_INT 34
17491: PUSH
17492: LD_INT 35
17494: PUSH
17495: LD_INT 36
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 101
17538: PUSH
17539: LD_INT 102
17541: PUSH
17542: LD_INT 103
17544: PUSH
17545: LD_INT 104
17547: PUSH
17548: LD_INT 105
17550: PUSH
17551: LD_INT 106
17553: PUSH
17554: LD_INT 107
17556: PUSH
17557: LD_INT 108
17559: PUSH
17560: LD_INT 109
17562: PUSH
17563: LD_INT 110
17565: PUSH
17566: LD_INT 111
17568: PUSH
17569: LD_INT 112
17571: PUSH
17572: LD_INT 113
17574: PUSH
17575: LD_INT 114
17577: PUSH
17578: LD_INT 115
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: ST_TO_ADDR
// if result then
17602: LD_VAR 0 1
17606: IFFALSE 17895
// begin normal :=  ;
17608: LD_ADDR_VAR 0 3
17612: PUSH
17613: LD_STRING 
17615: ST_TO_ADDR
// hardcore :=  ;
17616: LD_ADDR_VAR 0 4
17620: PUSH
17621: LD_STRING 
17623: ST_TO_ADDR
// for i = 1 to normalCounter do
17624: LD_ADDR_VAR 0 5
17628: PUSH
17629: DOUBLE
17630: LD_INT 1
17632: DEC
17633: ST_TO_ADDR
17634: LD_EXP 59
17638: PUSH
17639: FOR_TO
17640: IFFALSE 17741
// begin tmp := 0 ;
17642: LD_ADDR_VAR 0 2
17646: PUSH
17647: LD_STRING 0
17649: ST_TO_ADDR
// if result [ 1 ] then
17650: LD_VAR 0 1
17654: PUSH
17655: LD_INT 1
17657: ARRAY
17658: IFFALSE 17723
// if result [ 1 ] [ 1 ] = i then
17660: LD_VAR 0 1
17664: PUSH
17665: LD_INT 1
17667: ARRAY
17668: PUSH
17669: LD_INT 1
17671: ARRAY
17672: PUSH
17673: LD_VAR 0 5
17677: EQUAL
17678: IFFALSE 17723
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17680: LD_ADDR_VAR 0 1
17684: PUSH
17685: LD_VAR 0 1
17689: PPUSH
17690: LD_INT 1
17692: PPUSH
17693: LD_VAR 0 1
17697: PUSH
17698: LD_INT 1
17700: ARRAY
17701: PPUSH
17702: LD_INT 1
17704: PPUSH
17705: CALL_OW 3
17709: PPUSH
17710: CALL_OW 1
17714: ST_TO_ADDR
// tmp := 1 ;
17715: LD_ADDR_VAR 0 2
17719: PUSH
17720: LD_STRING 1
17722: ST_TO_ADDR
// end ; normal := normal & tmp ;
17723: LD_ADDR_VAR 0 3
17727: PUSH
17728: LD_VAR 0 3
17732: PUSH
17733: LD_VAR 0 2
17737: STR
17738: ST_TO_ADDR
// end ;
17739: GO 17639
17741: POP
17742: POP
// for i = 1 to hardcoreCounter do
17743: LD_ADDR_VAR 0 5
17747: PUSH
17748: DOUBLE
17749: LD_INT 1
17751: DEC
17752: ST_TO_ADDR
17753: LD_EXP 60
17757: PUSH
17758: FOR_TO
17759: IFFALSE 17864
// begin tmp := 0 ;
17761: LD_ADDR_VAR 0 2
17765: PUSH
17766: LD_STRING 0
17768: ST_TO_ADDR
// if result [ 2 ] then
17769: LD_VAR 0 1
17773: PUSH
17774: LD_INT 2
17776: ARRAY
17777: IFFALSE 17846
// if result [ 2 ] [ 1 ] = 100 + i then
17779: LD_VAR 0 1
17783: PUSH
17784: LD_INT 2
17786: ARRAY
17787: PUSH
17788: LD_INT 1
17790: ARRAY
17791: PUSH
17792: LD_INT 100
17794: PUSH
17795: LD_VAR 0 5
17799: PLUS
17800: EQUAL
17801: IFFALSE 17846
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17803: LD_ADDR_VAR 0 1
17807: PUSH
17808: LD_VAR 0 1
17812: PPUSH
17813: LD_INT 2
17815: PPUSH
17816: LD_VAR 0 1
17820: PUSH
17821: LD_INT 2
17823: ARRAY
17824: PPUSH
17825: LD_INT 1
17827: PPUSH
17828: CALL_OW 3
17832: PPUSH
17833: CALL_OW 1
17837: ST_TO_ADDR
// tmp := 1 ;
17838: LD_ADDR_VAR 0 2
17842: PUSH
17843: LD_STRING 1
17845: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17846: LD_ADDR_VAR 0 4
17850: PUSH
17851: LD_VAR 0 4
17855: PUSH
17856: LD_VAR 0 2
17860: STR
17861: ST_TO_ADDR
// end ;
17862: GO 17758
17864: POP
17865: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17866: LD_STRING getStreamItemsFromMission("
17868: PUSH
17869: LD_VAR 0 3
17873: STR
17874: PUSH
17875: LD_STRING ","
17877: STR
17878: PUSH
17879: LD_VAR 0 4
17883: STR
17884: PUSH
17885: LD_STRING ")
17887: STR
17888: PPUSH
17889: CALL_OW 559
// end else
17893: GO 17902
// ToLua ( getStreamItemsFromMission("","") ) ;
17895: LD_STRING getStreamItemsFromMission("","")
17897: PPUSH
17898: CALL_OW 559
// end ;
17902: LD_VAR 0 1
17906: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17907: LD_EXP 58
17911: PUSH
17912: LD_EXP 63
17916: AND
17917: IFFALSE 18041
17919: GO 17921
17921: DISABLE
17922: LD_INT 0
17924: PPUSH
17925: PPUSH
// begin enable ;
17926: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17927: LD_ADDR_VAR 0 2
17931: PUSH
17932: LD_INT 22
17934: PUSH
17935: LD_OWVAR 2
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 2
17946: PUSH
17947: LD_INT 34
17949: PUSH
17950: LD_INT 7
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 34
17959: PUSH
17960: LD_INT 45
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 34
17969: PUSH
17970: LD_INT 28
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 34
17979: PUSH
17980: LD_INT 47
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PPUSH
17998: CALL_OW 69
18002: ST_TO_ADDR
// if not tmp then
18003: LD_VAR 0 2
18007: NOT
18008: IFFALSE 18012
// exit ;
18010: GO 18041
// for i in tmp do
18012: LD_ADDR_VAR 0 1
18016: PUSH
18017: LD_VAR 0 2
18021: PUSH
18022: FOR_IN
18023: IFFALSE 18039
// begin SetLives ( i , 0 ) ;
18025: LD_VAR 0 1
18029: PPUSH
18030: LD_INT 0
18032: PPUSH
18033: CALL_OW 234
// end ;
18037: GO 18022
18039: POP
18040: POP
// end ;
18041: PPOPN 2
18043: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18044: LD_EXP 58
18048: PUSH
18049: LD_EXP 64
18053: AND
18054: IFFALSE 18138
18056: GO 18058
18058: DISABLE
18059: LD_INT 0
18061: PPUSH
18062: PPUSH
// begin enable ;
18063: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18064: LD_ADDR_VAR 0 2
18068: PUSH
18069: LD_INT 22
18071: PUSH
18072: LD_OWVAR 2
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 32
18083: PUSH
18084: LD_INT 3
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PPUSH
18095: CALL_OW 69
18099: ST_TO_ADDR
// if not tmp then
18100: LD_VAR 0 2
18104: NOT
18105: IFFALSE 18109
// exit ;
18107: GO 18138
// for i in tmp do
18109: LD_ADDR_VAR 0 1
18113: PUSH
18114: LD_VAR 0 2
18118: PUSH
18119: FOR_IN
18120: IFFALSE 18136
// begin SetLives ( i , 0 ) ;
18122: LD_VAR 0 1
18126: PPUSH
18127: LD_INT 0
18129: PPUSH
18130: CALL_OW 234
// end ;
18134: GO 18119
18136: POP
18137: POP
// end ;
18138: PPOPN 2
18140: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18141: LD_EXP 58
18145: PUSH
18146: LD_EXP 61
18150: AND
18151: IFFALSE 18244
18153: GO 18155
18155: DISABLE
18156: LD_INT 0
18158: PPUSH
// begin enable ;
18159: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18160: LD_ADDR_VAR 0 1
18164: PUSH
18165: LD_INT 22
18167: PUSH
18168: LD_OWVAR 2
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 2
18179: PUSH
18180: LD_INT 25
18182: PUSH
18183: LD_INT 5
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 25
18192: PUSH
18193: LD_INT 9
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 25
18202: PUSH
18203: LD_INT 8
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PPUSH
18220: CALL_OW 69
18224: PUSH
18225: FOR_IN
18226: IFFALSE 18242
// begin SetClass ( i , 1 ) ;
18228: LD_VAR 0 1
18232: PPUSH
18233: LD_INT 1
18235: PPUSH
18236: CALL_OW 336
// end ;
18240: GO 18225
18242: POP
18243: POP
// end ;
18244: PPOPN 1
18246: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18247: LD_EXP 58
18251: PUSH
18252: LD_EXP 62
18256: AND
18257: PUSH
18258: LD_OWVAR 65
18262: PUSH
18263: LD_INT 7
18265: LESS
18266: AND
18267: IFFALSE 18281
18269: GO 18271
18271: DISABLE
// begin enable ;
18272: ENABLE
// game_speed := 7 ;
18273: LD_ADDR_OWVAR 65
18277: PUSH
18278: LD_INT 7
18280: ST_TO_ADDR
// end ;
18281: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18282: LD_EXP 58
18286: PUSH
18287: LD_EXP 65
18291: AND
18292: IFFALSE 18494
18294: GO 18296
18296: DISABLE
18297: LD_INT 0
18299: PPUSH
18300: PPUSH
18301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18302: LD_ADDR_VAR 0 3
18306: PUSH
18307: LD_INT 81
18309: PUSH
18310: LD_OWVAR 2
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 21
18321: PUSH
18322: LD_INT 1
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PPUSH
18333: CALL_OW 69
18337: ST_TO_ADDR
// if not tmp then
18338: LD_VAR 0 3
18342: NOT
18343: IFFALSE 18347
// exit ;
18345: GO 18494
// if tmp > 5 then
18347: LD_VAR 0 3
18351: PUSH
18352: LD_INT 5
18354: GREATER
18355: IFFALSE 18367
// k := 5 else
18357: LD_ADDR_VAR 0 2
18361: PUSH
18362: LD_INT 5
18364: ST_TO_ADDR
18365: GO 18377
// k := tmp ;
18367: LD_ADDR_VAR 0 2
18371: PUSH
18372: LD_VAR 0 3
18376: ST_TO_ADDR
// for i := 1 to k do
18377: LD_ADDR_VAR 0 1
18381: PUSH
18382: DOUBLE
18383: LD_INT 1
18385: DEC
18386: ST_TO_ADDR
18387: LD_VAR 0 2
18391: PUSH
18392: FOR_TO
18393: IFFALSE 18492
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18395: LD_VAR 0 3
18399: PUSH
18400: LD_VAR 0 1
18404: ARRAY
18405: PPUSH
18406: LD_VAR 0 1
18410: PUSH
18411: LD_INT 4
18413: MOD
18414: PUSH
18415: LD_INT 1
18417: PLUS
18418: PPUSH
18419: CALL_OW 259
18423: PUSH
18424: LD_INT 10
18426: LESS
18427: IFFALSE 18490
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18429: LD_VAR 0 3
18433: PUSH
18434: LD_VAR 0 1
18438: ARRAY
18439: PPUSH
18440: LD_VAR 0 1
18444: PUSH
18445: LD_INT 4
18447: MOD
18448: PUSH
18449: LD_INT 1
18451: PLUS
18452: PPUSH
18453: LD_VAR 0 3
18457: PUSH
18458: LD_VAR 0 1
18462: ARRAY
18463: PPUSH
18464: LD_VAR 0 1
18468: PUSH
18469: LD_INT 4
18471: MOD
18472: PUSH
18473: LD_INT 1
18475: PLUS
18476: PPUSH
18477: CALL_OW 259
18481: PUSH
18482: LD_INT 1
18484: PLUS
18485: PPUSH
18486: CALL_OW 237
18490: GO 18392
18492: POP
18493: POP
// end ;
18494: PPOPN 3
18496: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18497: LD_EXP 58
18501: PUSH
18502: LD_EXP 66
18506: AND
18507: IFFALSE 18527
18509: GO 18511
18511: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18512: LD_INT 4
18514: PPUSH
18515: LD_OWVAR 2
18519: PPUSH
18520: LD_INT 0
18522: PPUSH
18523: CALL_OW 324
18527: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18528: LD_EXP 58
18532: PUSH
18533: LD_EXP 95
18537: AND
18538: IFFALSE 18558
18540: GO 18542
18542: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18543: LD_INT 19
18545: PPUSH
18546: LD_OWVAR 2
18550: PPUSH
18551: LD_INT 0
18553: PPUSH
18554: CALL_OW 324
18558: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18559: LD_EXP 58
18563: PUSH
18564: LD_EXP 67
18568: AND
18569: IFFALSE 18671
18571: GO 18573
18573: DISABLE
18574: LD_INT 0
18576: PPUSH
18577: PPUSH
// begin enable ;
18578: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18579: LD_ADDR_VAR 0 2
18583: PUSH
18584: LD_INT 22
18586: PUSH
18587: LD_OWVAR 2
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 2
18598: PUSH
18599: LD_INT 34
18601: PUSH
18602: LD_INT 11
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 34
18611: PUSH
18612: LD_INT 30
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: LIST
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PPUSH
18628: CALL_OW 69
18632: ST_TO_ADDR
// if not tmp then
18633: LD_VAR 0 2
18637: NOT
18638: IFFALSE 18642
// exit ;
18640: GO 18671
// for i in tmp do
18642: LD_ADDR_VAR 0 1
18646: PUSH
18647: LD_VAR 0 2
18651: PUSH
18652: FOR_IN
18653: IFFALSE 18669
// begin SetLives ( i , 0 ) ;
18655: LD_VAR 0 1
18659: PPUSH
18660: LD_INT 0
18662: PPUSH
18663: CALL_OW 234
// end ;
18667: GO 18652
18669: POP
18670: POP
// end ;
18671: PPOPN 2
18673: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18674: LD_EXP 58
18678: PUSH
18679: LD_EXP 68
18683: AND
18684: IFFALSE 18704
18686: GO 18688
18688: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18689: LD_INT 32
18691: PPUSH
18692: LD_OWVAR 2
18696: PPUSH
18697: LD_INT 0
18699: PPUSH
18700: CALL_OW 324
18704: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18705: LD_EXP 58
18709: PUSH
18710: LD_EXP 69
18714: AND
18715: IFFALSE 18896
18717: GO 18719
18719: DISABLE
18720: LD_INT 0
18722: PPUSH
18723: PPUSH
18724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18725: LD_ADDR_VAR 0 2
18729: PUSH
18730: LD_INT 22
18732: PUSH
18733: LD_OWVAR 2
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 33
18744: PUSH
18745: LD_INT 3
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PPUSH
18756: CALL_OW 69
18760: ST_TO_ADDR
// if not tmp then
18761: LD_VAR 0 2
18765: NOT
18766: IFFALSE 18770
// exit ;
18768: GO 18896
// side := 0 ;
18770: LD_ADDR_VAR 0 3
18774: PUSH
18775: LD_INT 0
18777: ST_TO_ADDR
// for i := 1 to 8 do
18778: LD_ADDR_VAR 0 1
18782: PUSH
18783: DOUBLE
18784: LD_INT 1
18786: DEC
18787: ST_TO_ADDR
18788: LD_INT 8
18790: PUSH
18791: FOR_TO
18792: IFFALSE 18840
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18794: LD_OWVAR 2
18798: PUSH
18799: LD_VAR 0 1
18803: NONEQUAL
18804: PUSH
18805: LD_OWVAR 2
18809: PPUSH
18810: LD_VAR 0 1
18814: PPUSH
18815: CALL_OW 81
18819: PUSH
18820: LD_INT 2
18822: EQUAL
18823: AND
18824: IFFALSE 18838
// begin side := i ;
18826: LD_ADDR_VAR 0 3
18830: PUSH
18831: LD_VAR 0 1
18835: ST_TO_ADDR
// break ;
18836: GO 18840
// end ;
18838: GO 18791
18840: POP
18841: POP
// if not side then
18842: LD_VAR 0 3
18846: NOT
18847: IFFALSE 18851
// exit ;
18849: GO 18896
// for i := 1 to tmp do
18851: LD_ADDR_VAR 0 1
18855: PUSH
18856: DOUBLE
18857: LD_INT 1
18859: DEC
18860: ST_TO_ADDR
18861: LD_VAR 0 2
18865: PUSH
18866: FOR_TO
18867: IFFALSE 18894
// if Prob ( 60 ) then
18869: LD_INT 60
18871: PPUSH
18872: CALL_OW 13
18876: IFFALSE 18892
// SetSide ( i , side ) ;
18878: LD_VAR 0 1
18882: PPUSH
18883: LD_VAR 0 3
18887: PPUSH
18888: CALL_OW 235
18892: GO 18866
18894: POP
18895: POP
// end ;
18896: PPOPN 3
18898: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18899: LD_EXP 58
18903: PUSH
18904: LD_EXP 71
18908: AND
18909: IFFALSE 19028
18911: GO 18913
18913: DISABLE
18914: LD_INT 0
18916: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18917: LD_ADDR_VAR 0 1
18921: PUSH
18922: LD_INT 22
18924: PUSH
18925: LD_OWVAR 2
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 21
18936: PUSH
18937: LD_INT 1
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 3
18946: PUSH
18947: LD_INT 23
18949: PUSH
18950: LD_INT 0
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: LIST
18965: PPUSH
18966: CALL_OW 69
18970: PUSH
18971: FOR_IN
18972: IFFALSE 19026
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18974: LD_VAR 0 1
18978: PPUSH
18979: CALL_OW 257
18983: PUSH
18984: LD_INT 1
18986: PUSH
18987: LD_INT 2
18989: PUSH
18990: LD_INT 3
18992: PUSH
18993: LD_INT 4
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: IN
19002: IFFALSE 19024
// SetClass ( un , rand ( 1 , 4 ) ) ;
19004: LD_VAR 0 1
19008: PPUSH
19009: LD_INT 1
19011: PPUSH
19012: LD_INT 4
19014: PPUSH
19015: CALL_OW 12
19019: PPUSH
19020: CALL_OW 336
19024: GO 18971
19026: POP
19027: POP
// end ;
19028: PPOPN 1
19030: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19031: LD_EXP 58
19035: PUSH
19036: LD_EXP 70
19040: AND
19041: IFFALSE 19120
19043: GO 19045
19045: DISABLE
19046: LD_INT 0
19048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19049: LD_ADDR_VAR 0 1
19053: PUSH
19054: LD_INT 22
19056: PUSH
19057: LD_OWVAR 2
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 21
19068: PUSH
19069: LD_INT 3
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PPUSH
19080: CALL_OW 69
19084: ST_TO_ADDR
// if not tmp then
19085: LD_VAR 0 1
19089: NOT
19090: IFFALSE 19094
// exit ;
19092: GO 19120
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19094: LD_VAR 0 1
19098: PUSH
19099: LD_INT 1
19101: PPUSH
19102: LD_VAR 0 1
19106: PPUSH
19107: CALL_OW 12
19111: ARRAY
19112: PPUSH
19113: LD_INT 100
19115: PPUSH
19116: CALL_OW 234
// end ;
19120: PPOPN 1
19122: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19123: LD_EXP 58
19127: PUSH
19128: LD_EXP 72
19132: AND
19133: IFFALSE 19231
19135: GO 19137
19137: DISABLE
19138: LD_INT 0
19140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19141: LD_ADDR_VAR 0 1
19145: PUSH
19146: LD_INT 22
19148: PUSH
19149: LD_OWVAR 2
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 21
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PPUSH
19172: CALL_OW 69
19176: ST_TO_ADDR
// if not tmp then
19177: LD_VAR 0 1
19181: NOT
19182: IFFALSE 19186
// exit ;
19184: GO 19231
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19186: LD_VAR 0 1
19190: PUSH
19191: LD_INT 1
19193: PPUSH
19194: LD_VAR 0 1
19198: PPUSH
19199: CALL_OW 12
19203: ARRAY
19204: PPUSH
19205: LD_INT 1
19207: PPUSH
19208: LD_INT 4
19210: PPUSH
19211: CALL_OW 12
19215: PPUSH
19216: LD_INT 3000
19218: PPUSH
19219: LD_INT 9000
19221: PPUSH
19222: CALL_OW 12
19226: PPUSH
19227: CALL_OW 492
// end ;
19231: PPOPN 1
19233: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19234: LD_EXP 58
19238: PUSH
19239: LD_EXP 73
19243: AND
19244: IFFALSE 19264
19246: GO 19248
19248: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19249: LD_INT 1
19251: PPUSH
19252: LD_OWVAR 2
19256: PPUSH
19257: LD_INT 0
19259: PPUSH
19260: CALL_OW 324
19264: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19265: LD_EXP 58
19269: PUSH
19270: LD_EXP 74
19274: AND
19275: IFFALSE 19358
19277: GO 19279
19279: DISABLE
19280: LD_INT 0
19282: PPUSH
19283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19284: LD_ADDR_VAR 0 2
19288: PUSH
19289: LD_INT 22
19291: PUSH
19292: LD_OWVAR 2
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 21
19303: PUSH
19304: LD_INT 3
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PPUSH
19315: CALL_OW 69
19319: ST_TO_ADDR
// if not tmp then
19320: LD_VAR 0 2
19324: NOT
19325: IFFALSE 19329
// exit ;
19327: GO 19358
// for i in tmp do
19329: LD_ADDR_VAR 0 1
19333: PUSH
19334: LD_VAR 0 2
19338: PUSH
19339: FOR_IN
19340: IFFALSE 19356
// SetBLevel ( i , 10 ) ;
19342: LD_VAR 0 1
19346: PPUSH
19347: LD_INT 10
19349: PPUSH
19350: CALL_OW 241
19354: GO 19339
19356: POP
19357: POP
// end ;
19358: PPOPN 2
19360: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19361: LD_EXP 58
19365: PUSH
19366: LD_EXP 75
19370: AND
19371: IFFALSE 19482
19373: GO 19375
19375: DISABLE
19376: LD_INT 0
19378: PPUSH
19379: PPUSH
19380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19381: LD_ADDR_VAR 0 3
19385: PUSH
19386: LD_INT 22
19388: PUSH
19389: LD_OWVAR 2
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 25
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PPUSH
19412: CALL_OW 69
19416: ST_TO_ADDR
// if not tmp then
19417: LD_VAR 0 3
19421: NOT
19422: IFFALSE 19426
// exit ;
19424: GO 19482
// un := tmp [ rand ( 1 , tmp ) ] ;
19426: LD_ADDR_VAR 0 2
19430: PUSH
19431: LD_VAR 0 3
19435: PUSH
19436: LD_INT 1
19438: PPUSH
19439: LD_VAR 0 3
19443: PPUSH
19444: CALL_OW 12
19448: ARRAY
19449: ST_TO_ADDR
// if Crawls ( un ) then
19450: LD_VAR 0 2
19454: PPUSH
19455: CALL_OW 318
19459: IFFALSE 19470
// ComWalk ( un ) ;
19461: LD_VAR 0 2
19465: PPUSH
19466: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19470: LD_VAR 0 2
19474: PPUSH
19475: LD_INT 5
19477: PPUSH
19478: CALL_OW 336
// end ;
19482: PPOPN 3
19484: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19485: LD_EXP 58
19489: PUSH
19490: LD_EXP 76
19494: AND
19495: PUSH
19496: LD_OWVAR 67
19500: PUSH
19501: LD_INT 3
19503: LESS
19504: AND
19505: IFFALSE 19524
19507: GO 19509
19509: DISABLE
// Difficulty := Difficulty + 1 ;
19510: LD_ADDR_OWVAR 67
19514: PUSH
19515: LD_OWVAR 67
19519: PUSH
19520: LD_INT 1
19522: PLUS
19523: ST_TO_ADDR
19524: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19525: LD_EXP 58
19529: PUSH
19530: LD_EXP 77
19534: AND
19535: IFFALSE 19638
19537: GO 19539
19539: DISABLE
19540: LD_INT 0
19542: PPUSH
// begin for i := 1 to 5 do
19543: LD_ADDR_VAR 0 1
19547: PUSH
19548: DOUBLE
19549: LD_INT 1
19551: DEC
19552: ST_TO_ADDR
19553: LD_INT 5
19555: PUSH
19556: FOR_TO
19557: IFFALSE 19636
// begin uc_nation := nation_nature ;
19559: LD_ADDR_OWVAR 21
19563: PUSH
19564: LD_INT 0
19566: ST_TO_ADDR
// uc_side := 0 ;
19567: LD_ADDR_OWVAR 20
19571: PUSH
19572: LD_INT 0
19574: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19575: LD_ADDR_OWVAR 29
19579: PUSH
19580: LD_INT 12
19582: PUSH
19583: LD_INT 12
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: ST_TO_ADDR
// hc_agressivity := 20 ;
19590: LD_ADDR_OWVAR 35
19594: PUSH
19595: LD_INT 20
19597: ST_TO_ADDR
// hc_class := class_tiger ;
19598: LD_ADDR_OWVAR 28
19602: PUSH
19603: LD_INT 14
19605: ST_TO_ADDR
// hc_gallery :=  ;
19606: LD_ADDR_OWVAR 33
19610: PUSH
19611: LD_STRING 
19613: ST_TO_ADDR
// hc_name :=  ;
19614: LD_ADDR_OWVAR 26
19618: PUSH
19619: LD_STRING 
19621: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19622: CALL_OW 44
19626: PPUSH
19627: LD_INT 0
19629: PPUSH
19630: CALL_OW 51
// end ;
19634: GO 19556
19636: POP
19637: POP
// end ;
19638: PPOPN 1
19640: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19641: LD_EXP 58
19645: PUSH
19646: LD_EXP 78
19650: AND
19651: IFFALSE 19660
19653: GO 19655
19655: DISABLE
// StreamSibBomb ;
19656: CALL 19661 0 0
19660: END
// export function StreamSibBomb ; var i , x , y ; begin
19661: LD_INT 0
19663: PPUSH
19664: PPUSH
19665: PPUSH
19666: PPUSH
// result := false ;
19667: LD_ADDR_VAR 0 1
19671: PUSH
19672: LD_INT 0
19674: ST_TO_ADDR
// for i := 1 to 16 do
19675: LD_ADDR_VAR 0 2
19679: PUSH
19680: DOUBLE
19681: LD_INT 1
19683: DEC
19684: ST_TO_ADDR
19685: LD_INT 16
19687: PUSH
19688: FOR_TO
19689: IFFALSE 19888
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19691: LD_ADDR_VAR 0 3
19695: PUSH
19696: LD_INT 10
19698: PUSH
19699: LD_INT 20
19701: PUSH
19702: LD_INT 30
19704: PUSH
19705: LD_INT 40
19707: PUSH
19708: LD_INT 50
19710: PUSH
19711: LD_INT 60
19713: PUSH
19714: LD_INT 70
19716: PUSH
19717: LD_INT 80
19719: PUSH
19720: LD_INT 90
19722: PUSH
19723: LD_INT 100
19725: PUSH
19726: LD_INT 110
19728: PUSH
19729: LD_INT 120
19731: PUSH
19732: LD_INT 130
19734: PUSH
19735: LD_INT 140
19737: PUSH
19738: LD_INT 150
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 1
19760: PPUSH
19761: LD_INT 15
19763: PPUSH
19764: CALL_OW 12
19768: ARRAY
19769: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19770: LD_ADDR_VAR 0 4
19774: PUSH
19775: LD_INT 10
19777: PUSH
19778: LD_INT 20
19780: PUSH
19781: LD_INT 30
19783: PUSH
19784: LD_INT 40
19786: PUSH
19787: LD_INT 50
19789: PUSH
19790: LD_INT 60
19792: PUSH
19793: LD_INT 70
19795: PUSH
19796: LD_INT 80
19798: PUSH
19799: LD_INT 90
19801: PUSH
19802: LD_INT 100
19804: PUSH
19805: LD_INT 110
19807: PUSH
19808: LD_INT 120
19810: PUSH
19811: LD_INT 130
19813: PUSH
19814: LD_INT 140
19816: PUSH
19817: LD_INT 150
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 1
19839: PPUSH
19840: LD_INT 15
19842: PPUSH
19843: CALL_OW 12
19847: ARRAY
19848: ST_TO_ADDR
// if ValidHex ( x , y ) then
19849: LD_VAR 0 3
19853: PPUSH
19854: LD_VAR 0 4
19858: PPUSH
19859: CALL_OW 488
19863: IFFALSE 19886
// begin result := [ x , y ] ;
19865: LD_ADDR_VAR 0 1
19869: PUSH
19870: LD_VAR 0 3
19874: PUSH
19875: LD_VAR 0 4
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: ST_TO_ADDR
// break ;
19884: GO 19888
// end ; end ;
19886: GO 19688
19888: POP
19889: POP
// if result then
19890: LD_VAR 0 1
19894: IFFALSE 19954
// begin ToLua ( playSibBomb() ) ;
19896: LD_STRING playSibBomb()
19898: PPUSH
19899: CALL_OW 559
// wait ( 0 0$14 ) ;
19903: LD_INT 490
19905: PPUSH
19906: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19910: LD_VAR 0 1
19914: PUSH
19915: LD_INT 1
19917: ARRAY
19918: PPUSH
19919: LD_VAR 0 1
19923: PUSH
19924: LD_INT 2
19926: ARRAY
19927: PPUSH
19928: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19932: LD_VAR 0 1
19936: PUSH
19937: LD_INT 1
19939: ARRAY
19940: PPUSH
19941: LD_VAR 0 1
19945: PUSH
19946: LD_INT 2
19948: ARRAY
19949: PPUSH
19950: CALL_OW 429
// end ; end ;
19954: LD_VAR 0 1
19958: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19959: LD_EXP 58
19963: PUSH
19964: LD_EXP 80
19968: AND
19969: IFFALSE 19981
19971: GO 19973
19973: DISABLE
// YouLost (  ) ;
19974: LD_STRING 
19976: PPUSH
19977: CALL_OW 104
19981: END
// every 0 0$1 trigger StreamModeActive and sFog do
19982: LD_EXP 58
19986: PUSH
19987: LD_EXP 79
19991: AND
19992: IFFALSE 20006
19994: GO 19996
19996: DISABLE
// FogOff ( your_side ) ;
19997: LD_OWVAR 2
20001: PPUSH
20002: CALL_OW 344
20006: END
// every 0 0$1 trigger StreamModeActive and sSun do
20007: LD_EXP 58
20011: PUSH
20012: LD_EXP 81
20016: AND
20017: IFFALSE 20045
20019: GO 20021
20021: DISABLE
// begin solar_recharge_percent := 0 ;
20022: LD_ADDR_OWVAR 79
20026: PUSH
20027: LD_INT 0
20029: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20030: LD_INT 10500
20032: PPUSH
20033: CALL_OW 67
// solar_recharge_percent := 100 ;
20037: LD_ADDR_OWVAR 79
20041: PUSH
20042: LD_INT 100
20044: ST_TO_ADDR
// end ;
20045: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20046: LD_EXP 58
20050: PUSH
20051: LD_EXP 82
20055: AND
20056: IFFALSE 20295
20058: GO 20060
20060: DISABLE
20061: LD_INT 0
20063: PPUSH
20064: PPUSH
20065: PPUSH
// begin tmp := [ ] ;
20066: LD_ADDR_VAR 0 3
20070: PUSH
20071: EMPTY
20072: ST_TO_ADDR
// for i := 1 to 6 do
20073: LD_ADDR_VAR 0 1
20077: PUSH
20078: DOUBLE
20079: LD_INT 1
20081: DEC
20082: ST_TO_ADDR
20083: LD_INT 6
20085: PUSH
20086: FOR_TO
20087: IFFALSE 20192
// begin uc_nation := nation_nature ;
20089: LD_ADDR_OWVAR 21
20093: PUSH
20094: LD_INT 0
20096: ST_TO_ADDR
// uc_side := 0 ;
20097: LD_ADDR_OWVAR 20
20101: PUSH
20102: LD_INT 0
20104: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20105: LD_ADDR_OWVAR 29
20109: PUSH
20110: LD_INT 12
20112: PUSH
20113: LD_INT 12
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: ST_TO_ADDR
// hc_agressivity := 20 ;
20120: LD_ADDR_OWVAR 35
20124: PUSH
20125: LD_INT 20
20127: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20128: LD_ADDR_OWVAR 28
20132: PUSH
20133: LD_INT 17
20135: ST_TO_ADDR
// hc_gallery :=  ;
20136: LD_ADDR_OWVAR 33
20140: PUSH
20141: LD_STRING 
20143: ST_TO_ADDR
// hc_name :=  ;
20144: LD_ADDR_OWVAR 26
20148: PUSH
20149: LD_STRING 
20151: ST_TO_ADDR
// un := CreateHuman ;
20152: LD_ADDR_VAR 0 2
20156: PUSH
20157: CALL_OW 44
20161: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20162: LD_VAR 0 2
20166: PPUSH
20167: LD_INT 1
20169: PPUSH
20170: CALL_OW 51
// tmp := tmp ^ un ;
20174: LD_ADDR_VAR 0 3
20178: PUSH
20179: LD_VAR 0 3
20183: PUSH
20184: LD_VAR 0 2
20188: ADD
20189: ST_TO_ADDR
// end ;
20190: GO 20086
20192: POP
20193: POP
// repeat wait ( 0 0$1 ) ;
20194: LD_INT 35
20196: PPUSH
20197: CALL_OW 67
// for un in tmp do
20201: LD_ADDR_VAR 0 2
20205: PUSH
20206: LD_VAR 0 3
20210: PUSH
20211: FOR_IN
20212: IFFALSE 20286
// begin if IsDead ( un ) then
20214: LD_VAR 0 2
20218: PPUSH
20219: CALL_OW 301
20223: IFFALSE 20243
// begin tmp := tmp diff un ;
20225: LD_ADDR_VAR 0 3
20229: PUSH
20230: LD_VAR 0 3
20234: PUSH
20235: LD_VAR 0 2
20239: DIFF
20240: ST_TO_ADDR
// continue ;
20241: GO 20211
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20243: LD_VAR 0 2
20247: PPUSH
20248: LD_INT 3
20250: PUSH
20251: LD_INT 22
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PPUSH
20265: CALL_OW 69
20269: PPUSH
20270: LD_VAR 0 2
20274: PPUSH
20275: CALL_OW 74
20279: PPUSH
20280: CALL_OW 115
// end ;
20284: GO 20211
20286: POP
20287: POP
// until not tmp ;
20288: LD_VAR 0 3
20292: NOT
20293: IFFALSE 20194
// end ;
20295: PPOPN 3
20297: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20298: LD_EXP 58
20302: PUSH
20303: LD_EXP 83
20307: AND
20308: IFFALSE 20362
20310: GO 20312
20312: DISABLE
// begin ToLua ( displayTroll(); ) ;
20313: LD_STRING displayTroll();
20315: PPUSH
20316: CALL_OW 559
// wait ( 3 3$00 ) ;
20320: LD_INT 6300
20322: PPUSH
20323: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20327: LD_STRING hideTroll();
20329: PPUSH
20330: CALL_OW 559
// wait ( 1 1$00 ) ;
20334: LD_INT 2100
20336: PPUSH
20337: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20341: LD_STRING displayTroll();
20343: PPUSH
20344: CALL_OW 559
// wait ( 1 1$00 ) ;
20348: LD_INT 2100
20350: PPUSH
20351: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20355: LD_STRING hideTroll();
20357: PPUSH
20358: CALL_OW 559
// end ;
20362: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20363: LD_EXP 58
20367: PUSH
20368: LD_EXP 84
20372: AND
20373: IFFALSE 20436
20375: GO 20377
20377: DISABLE
20378: LD_INT 0
20380: PPUSH
// begin p := 0 ;
20381: LD_ADDR_VAR 0 1
20385: PUSH
20386: LD_INT 0
20388: ST_TO_ADDR
// repeat game_speed := 1 ;
20389: LD_ADDR_OWVAR 65
20393: PUSH
20394: LD_INT 1
20396: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20397: LD_INT 35
20399: PPUSH
20400: CALL_OW 67
// p := p + 1 ;
20404: LD_ADDR_VAR 0 1
20408: PUSH
20409: LD_VAR 0 1
20413: PUSH
20414: LD_INT 1
20416: PLUS
20417: ST_TO_ADDR
// until p >= 60 ;
20418: LD_VAR 0 1
20422: PUSH
20423: LD_INT 60
20425: GREATEREQUAL
20426: IFFALSE 20389
// game_speed := 4 ;
20428: LD_ADDR_OWVAR 65
20432: PUSH
20433: LD_INT 4
20435: ST_TO_ADDR
// end ;
20436: PPOPN 1
20438: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20439: LD_EXP 58
20443: PUSH
20444: LD_EXP 85
20448: AND
20449: IFFALSE 20595
20451: GO 20453
20453: DISABLE
20454: LD_INT 0
20456: PPUSH
20457: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20458: LD_ADDR_VAR 0 1
20462: PUSH
20463: LD_INT 22
20465: PUSH
20466: LD_OWVAR 2
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 2
20477: PUSH
20478: LD_INT 30
20480: PUSH
20481: LD_INT 0
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 30
20490: PUSH
20491: LD_INT 1
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: LIST
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PPUSH
20507: CALL_OW 69
20511: ST_TO_ADDR
// if not depot then
20512: LD_VAR 0 1
20516: NOT
20517: IFFALSE 20521
// exit ;
20519: GO 20595
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20521: LD_ADDR_VAR 0 2
20525: PUSH
20526: LD_VAR 0 1
20530: PUSH
20531: LD_INT 1
20533: PPUSH
20534: LD_VAR 0 1
20538: PPUSH
20539: CALL_OW 12
20543: ARRAY
20544: PPUSH
20545: CALL_OW 274
20549: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20550: LD_VAR 0 2
20554: PPUSH
20555: LD_INT 1
20557: PPUSH
20558: LD_INT 0
20560: PPUSH
20561: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20565: LD_VAR 0 2
20569: PPUSH
20570: LD_INT 2
20572: PPUSH
20573: LD_INT 0
20575: PPUSH
20576: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20580: LD_VAR 0 2
20584: PPUSH
20585: LD_INT 3
20587: PPUSH
20588: LD_INT 0
20590: PPUSH
20591: CALL_OW 277
// end ;
20595: PPOPN 2
20597: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20598: LD_EXP 58
20602: PUSH
20603: LD_EXP 86
20607: AND
20608: IFFALSE 20705
20610: GO 20612
20612: DISABLE
20613: LD_INT 0
20615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20616: LD_ADDR_VAR 0 1
20620: PUSH
20621: LD_INT 22
20623: PUSH
20624: LD_OWVAR 2
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 21
20635: PUSH
20636: LD_INT 1
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 3
20645: PUSH
20646: LD_INT 23
20648: PUSH
20649: LD_INT 0
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: LIST
20664: PPUSH
20665: CALL_OW 69
20669: ST_TO_ADDR
// if not tmp then
20670: LD_VAR 0 1
20674: NOT
20675: IFFALSE 20679
// exit ;
20677: GO 20705
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20679: LD_VAR 0 1
20683: PUSH
20684: LD_INT 1
20686: PPUSH
20687: LD_VAR 0 1
20691: PPUSH
20692: CALL_OW 12
20696: ARRAY
20697: PPUSH
20698: LD_INT 200
20700: PPUSH
20701: CALL_OW 234
// end ;
20705: PPOPN 1
20707: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20708: LD_EXP 58
20712: PUSH
20713: LD_EXP 87
20717: AND
20718: IFFALSE 20797
20720: GO 20722
20722: DISABLE
20723: LD_INT 0
20725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20726: LD_ADDR_VAR 0 1
20730: PUSH
20731: LD_INT 22
20733: PUSH
20734: LD_OWVAR 2
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 21
20745: PUSH
20746: LD_INT 2
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PPUSH
20757: CALL_OW 69
20761: ST_TO_ADDR
// if not tmp then
20762: LD_VAR 0 1
20766: NOT
20767: IFFALSE 20771
// exit ;
20769: GO 20797
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20771: LD_VAR 0 1
20775: PUSH
20776: LD_INT 1
20778: PPUSH
20779: LD_VAR 0 1
20783: PPUSH
20784: CALL_OW 12
20788: ARRAY
20789: PPUSH
20790: LD_INT 60
20792: PPUSH
20793: CALL_OW 234
// end ;
20797: PPOPN 1
20799: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20800: LD_EXP 58
20804: PUSH
20805: LD_EXP 88
20809: AND
20810: IFFALSE 20909
20812: GO 20814
20814: DISABLE
20815: LD_INT 0
20817: PPUSH
20818: PPUSH
// begin enable ;
20819: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20820: LD_ADDR_VAR 0 1
20824: PUSH
20825: LD_INT 22
20827: PUSH
20828: LD_OWVAR 2
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 61
20839: PUSH
20840: EMPTY
20841: LIST
20842: PUSH
20843: LD_INT 33
20845: PUSH
20846: LD_INT 2
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: LIST
20857: PPUSH
20858: CALL_OW 69
20862: ST_TO_ADDR
// if not tmp then
20863: LD_VAR 0 1
20867: NOT
20868: IFFALSE 20872
// exit ;
20870: GO 20909
// for i in tmp do
20872: LD_ADDR_VAR 0 2
20876: PUSH
20877: LD_VAR 0 1
20881: PUSH
20882: FOR_IN
20883: IFFALSE 20907
// if IsControledBy ( i ) then
20885: LD_VAR 0 2
20889: PPUSH
20890: CALL_OW 312
20894: IFFALSE 20905
// ComUnlink ( i ) ;
20896: LD_VAR 0 2
20900: PPUSH
20901: CALL_OW 136
20905: GO 20882
20907: POP
20908: POP
// end ;
20909: PPOPN 2
20911: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20912: LD_EXP 58
20916: PUSH
20917: LD_EXP 89
20921: AND
20922: IFFALSE 21062
20924: GO 20926
20926: DISABLE
20927: LD_INT 0
20929: PPUSH
20930: PPUSH
// begin ToLua ( displayPowell(); ) ;
20931: LD_STRING displayPowell();
20933: PPUSH
20934: CALL_OW 559
// uc_side := 0 ;
20938: LD_ADDR_OWVAR 20
20942: PUSH
20943: LD_INT 0
20945: ST_TO_ADDR
// uc_nation := 2 ;
20946: LD_ADDR_OWVAR 21
20950: PUSH
20951: LD_INT 2
20953: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20954: LD_ADDR_OWVAR 37
20958: PUSH
20959: LD_INT 14
20961: ST_TO_ADDR
// vc_engine := engine_siberite ;
20962: LD_ADDR_OWVAR 39
20966: PUSH
20967: LD_INT 3
20969: ST_TO_ADDR
// vc_control := control_apeman ;
20970: LD_ADDR_OWVAR 38
20974: PUSH
20975: LD_INT 5
20977: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20978: LD_ADDR_OWVAR 40
20982: PUSH
20983: LD_INT 29
20985: ST_TO_ADDR
// un := CreateVehicle ;
20986: LD_ADDR_VAR 0 2
20990: PUSH
20991: CALL_OW 45
20995: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20996: LD_VAR 0 2
21000: PPUSH
21001: LD_INT 1
21003: PPUSH
21004: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21008: LD_INT 35
21010: PPUSH
21011: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21015: LD_VAR 0 2
21019: PPUSH
21020: LD_INT 22
21022: PUSH
21023: LD_OWVAR 2
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PPUSH
21032: CALL_OW 69
21036: PPUSH
21037: LD_VAR 0 2
21041: PPUSH
21042: CALL_OW 74
21046: PPUSH
21047: CALL_OW 115
// until IsDead ( un ) ;
21051: LD_VAR 0 2
21055: PPUSH
21056: CALL_OW 301
21060: IFFALSE 21008
// end ;
21062: PPOPN 2
21064: END
// every 0 0$1 trigger StreamModeActive and sStu do
21065: LD_EXP 58
21069: PUSH
21070: LD_EXP 97
21074: AND
21075: IFFALSE 21091
21077: GO 21079
21079: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21080: LD_STRING displayStucuk();
21082: PPUSH
21083: CALL_OW 559
// ResetFog ;
21087: CALL_OW 335
// end ;
21091: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21092: LD_EXP 58
21096: PUSH
21097: LD_EXP 90
21101: AND
21102: IFFALSE 21243
21104: GO 21106
21106: DISABLE
21107: LD_INT 0
21109: PPUSH
21110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21111: LD_ADDR_VAR 0 2
21115: PUSH
21116: LD_INT 22
21118: PUSH
21119: LD_OWVAR 2
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 21
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PPUSH
21142: CALL_OW 69
21146: ST_TO_ADDR
// if not tmp then
21147: LD_VAR 0 2
21151: NOT
21152: IFFALSE 21156
// exit ;
21154: GO 21243
// un := tmp [ rand ( 1 , tmp ) ] ;
21156: LD_ADDR_VAR 0 1
21160: PUSH
21161: LD_VAR 0 2
21165: PUSH
21166: LD_INT 1
21168: PPUSH
21169: LD_VAR 0 2
21173: PPUSH
21174: CALL_OW 12
21178: ARRAY
21179: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21180: LD_VAR 0 1
21184: PPUSH
21185: LD_INT 0
21187: PPUSH
21188: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21192: LD_VAR 0 1
21196: PPUSH
21197: LD_OWVAR 3
21201: PUSH
21202: LD_VAR 0 1
21206: DIFF
21207: PPUSH
21208: LD_VAR 0 1
21212: PPUSH
21213: CALL_OW 74
21217: PPUSH
21218: CALL_OW 115
// wait ( 0 0$20 ) ;
21222: LD_INT 700
21224: PPUSH
21225: CALL_OW 67
// SetSide ( un , your_side ) ;
21229: LD_VAR 0 1
21233: PPUSH
21234: LD_OWVAR 2
21238: PPUSH
21239: CALL_OW 235
// end ;
21243: PPOPN 2
21245: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21246: LD_EXP 58
21250: PUSH
21251: LD_EXP 91
21255: AND
21256: IFFALSE 21362
21258: GO 21260
21260: DISABLE
21261: LD_INT 0
21263: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21264: LD_ADDR_VAR 0 1
21268: PUSH
21269: LD_INT 22
21271: PUSH
21272: LD_OWVAR 2
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 2
21283: PUSH
21284: LD_INT 30
21286: PUSH
21287: LD_INT 0
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 30
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PPUSH
21313: CALL_OW 69
21317: ST_TO_ADDR
// if not depot then
21318: LD_VAR 0 1
21322: NOT
21323: IFFALSE 21327
// exit ;
21325: GO 21362
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21327: LD_VAR 0 1
21331: PUSH
21332: LD_INT 1
21334: ARRAY
21335: PPUSH
21336: CALL_OW 250
21340: PPUSH
21341: LD_VAR 0 1
21345: PUSH
21346: LD_INT 1
21348: ARRAY
21349: PPUSH
21350: CALL_OW 251
21354: PPUSH
21355: LD_INT 70
21357: PPUSH
21358: CALL_OW 495
// end ;
21362: PPOPN 1
21364: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21365: LD_EXP 58
21369: PUSH
21370: LD_EXP 92
21374: AND
21375: IFFALSE 21586
21377: GO 21379
21379: DISABLE
21380: LD_INT 0
21382: PPUSH
21383: PPUSH
21384: PPUSH
21385: PPUSH
21386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21387: LD_ADDR_VAR 0 5
21391: PUSH
21392: LD_INT 22
21394: PUSH
21395: LD_OWVAR 2
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 21
21406: PUSH
21407: LD_INT 1
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PPUSH
21418: CALL_OW 69
21422: ST_TO_ADDR
// if not tmp then
21423: LD_VAR 0 5
21427: NOT
21428: IFFALSE 21432
// exit ;
21430: GO 21586
// for i in tmp do
21432: LD_ADDR_VAR 0 1
21436: PUSH
21437: LD_VAR 0 5
21441: PUSH
21442: FOR_IN
21443: IFFALSE 21584
// begin d := rand ( 0 , 5 ) ;
21445: LD_ADDR_VAR 0 4
21449: PUSH
21450: LD_INT 0
21452: PPUSH
21453: LD_INT 5
21455: PPUSH
21456: CALL_OW 12
21460: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21461: LD_ADDR_VAR 0 2
21465: PUSH
21466: LD_VAR 0 1
21470: PPUSH
21471: CALL_OW 250
21475: PPUSH
21476: LD_VAR 0 4
21480: PPUSH
21481: LD_INT 3
21483: PPUSH
21484: LD_INT 12
21486: PPUSH
21487: CALL_OW 12
21491: PPUSH
21492: CALL_OW 272
21496: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21497: LD_ADDR_VAR 0 3
21501: PUSH
21502: LD_VAR 0 1
21506: PPUSH
21507: CALL_OW 251
21511: PPUSH
21512: LD_VAR 0 4
21516: PPUSH
21517: LD_INT 3
21519: PPUSH
21520: LD_INT 12
21522: PPUSH
21523: CALL_OW 12
21527: PPUSH
21528: CALL_OW 273
21532: ST_TO_ADDR
// if ValidHex ( x , y ) then
21533: LD_VAR 0 2
21537: PPUSH
21538: LD_VAR 0 3
21542: PPUSH
21543: CALL_OW 488
21547: IFFALSE 21582
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21549: LD_VAR 0 1
21553: PPUSH
21554: LD_VAR 0 2
21558: PPUSH
21559: LD_VAR 0 3
21563: PPUSH
21564: LD_INT 3
21566: PPUSH
21567: LD_INT 6
21569: PPUSH
21570: CALL_OW 12
21574: PPUSH
21575: LD_INT 1
21577: PPUSH
21578: CALL_OW 483
// end ;
21582: GO 21442
21584: POP
21585: POP
// end ;
21586: PPOPN 5
21588: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21589: LD_EXP 58
21593: PUSH
21594: LD_EXP 93
21598: AND
21599: IFFALSE 21693
21601: GO 21603
21603: DISABLE
21604: LD_INT 0
21606: PPUSH
21607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21608: LD_ADDR_VAR 0 2
21612: PUSH
21613: LD_INT 22
21615: PUSH
21616: LD_OWVAR 2
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 32
21627: PUSH
21628: LD_INT 1
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 21
21637: PUSH
21638: LD_INT 2
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: PPUSH
21650: CALL_OW 69
21654: ST_TO_ADDR
// if not tmp then
21655: LD_VAR 0 2
21659: NOT
21660: IFFALSE 21664
// exit ;
21662: GO 21693
// for i in tmp do
21664: LD_ADDR_VAR 0 1
21668: PUSH
21669: LD_VAR 0 2
21673: PUSH
21674: FOR_IN
21675: IFFALSE 21691
// SetFuel ( i , 0 ) ;
21677: LD_VAR 0 1
21681: PPUSH
21682: LD_INT 0
21684: PPUSH
21685: CALL_OW 240
21689: GO 21674
21691: POP
21692: POP
// end ;
21693: PPOPN 2
21695: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21696: LD_EXP 58
21700: PUSH
21701: LD_EXP 94
21705: AND
21706: IFFALSE 21772
21708: GO 21710
21710: DISABLE
21711: LD_INT 0
21713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21714: LD_ADDR_VAR 0 1
21718: PUSH
21719: LD_INT 22
21721: PUSH
21722: LD_OWVAR 2
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 30
21733: PUSH
21734: LD_INT 29
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PPUSH
21745: CALL_OW 69
21749: ST_TO_ADDR
// if not tmp then
21750: LD_VAR 0 1
21754: NOT
21755: IFFALSE 21759
// exit ;
21757: GO 21772
// DestroyUnit ( tmp [ 1 ] ) ;
21759: LD_VAR 0 1
21763: PUSH
21764: LD_INT 1
21766: ARRAY
21767: PPUSH
21768: CALL_OW 65
// end ;
21772: PPOPN 1
21774: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21775: LD_EXP 58
21779: PUSH
21780: LD_EXP 96
21784: AND
21785: IFFALSE 21914
21787: GO 21789
21789: DISABLE
21790: LD_INT 0
21792: PPUSH
// begin uc_side := 0 ;
21793: LD_ADDR_OWVAR 20
21797: PUSH
21798: LD_INT 0
21800: ST_TO_ADDR
// uc_nation := nation_arabian ;
21801: LD_ADDR_OWVAR 21
21805: PUSH
21806: LD_INT 2
21808: ST_TO_ADDR
// hc_gallery :=  ;
21809: LD_ADDR_OWVAR 33
21813: PUSH
21814: LD_STRING 
21816: ST_TO_ADDR
// hc_name :=  ;
21817: LD_ADDR_OWVAR 26
21821: PUSH
21822: LD_STRING 
21824: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21825: LD_INT 1
21827: PPUSH
21828: LD_INT 11
21830: PPUSH
21831: LD_INT 10
21833: PPUSH
21834: CALL_OW 380
// un := CreateHuman ;
21838: LD_ADDR_VAR 0 1
21842: PUSH
21843: CALL_OW 44
21847: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21848: LD_VAR 0 1
21852: PPUSH
21853: LD_INT 1
21855: PPUSH
21856: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21860: LD_INT 35
21862: PPUSH
21863: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21867: LD_VAR 0 1
21871: PPUSH
21872: LD_INT 22
21874: PUSH
21875: LD_OWVAR 2
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PPUSH
21884: CALL_OW 69
21888: PPUSH
21889: LD_VAR 0 1
21893: PPUSH
21894: CALL_OW 74
21898: PPUSH
21899: CALL_OW 115
// until IsDead ( un ) ;
21903: LD_VAR 0 1
21907: PPUSH
21908: CALL_OW 301
21912: IFFALSE 21860
// end ;
21914: PPOPN 1
21916: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21917: LD_EXP 58
21921: PUSH
21922: LD_EXP 98
21926: AND
21927: IFFALSE 21939
21929: GO 21931
21931: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21932: LD_STRING earthquake(getX(game), 0, 32)
21934: PPUSH
21935: CALL_OW 559
21939: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21940: LD_EXP 58
21944: PUSH
21945: LD_EXP 99
21949: AND
21950: IFFALSE 22041
21952: GO 21954
21954: DISABLE
21955: LD_INT 0
21957: PPUSH
// begin enable ;
21958: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21959: LD_ADDR_VAR 0 1
21963: PUSH
21964: LD_INT 22
21966: PUSH
21967: LD_OWVAR 2
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 21
21978: PUSH
21979: LD_INT 2
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 33
21988: PUSH
21989: LD_INT 3
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: LIST
22000: PPUSH
22001: CALL_OW 69
22005: ST_TO_ADDR
// if not tmp then
22006: LD_VAR 0 1
22010: NOT
22011: IFFALSE 22015
// exit ;
22013: GO 22041
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22015: LD_VAR 0 1
22019: PUSH
22020: LD_INT 1
22022: PPUSH
22023: LD_VAR 0 1
22027: PPUSH
22028: CALL_OW 12
22032: ARRAY
22033: PPUSH
22034: LD_INT 1
22036: PPUSH
22037: CALL_OW 234
// end ;
22041: PPOPN 1
22043: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22044: LD_EXP 58
22048: PUSH
22049: LD_EXP 100
22053: AND
22054: IFFALSE 22195
22056: GO 22058
22058: DISABLE
22059: LD_INT 0
22061: PPUSH
22062: PPUSH
22063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22064: LD_ADDR_VAR 0 3
22068: PUSH
22069: LD_INT 22
22071: PUSH
22072: LD_OWVAR 2
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 25
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PPUSH
22095: CALL_OW 69
22099: ST_TO_ADDR
// if not tmp then
22100: LD_VAR 0 3
22104: NOT
22105: IFFALSE 22109
// exit ;
22107: GO 22195
// un := tmp [ rand ( 1 , tmp ) ] ;
22109: LD_ADDR_VAR 0 2
22113: PUSH
22114: LD_VAR 0 3
22118: PUSH
22119: LD_INT 1
22121: PPUSH
22122: LD_VAR 0 3
22126: PPUSH
22127: CALL_OW 12
22131: ARRAY
22132: ST_TO_ADDR
// if Crawls ( un ) then
22133: LD_VAR 0 2
22137: PPUSH
22138: CALL_OW 318
22142: IFFALSE 22153
// ComWalk ( un ) ;
22144: LD_VAR 0 2
22148: PPUSH
22149: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22153: LD_VAR 0 2
22157: PPUSH
22158: LD_INT 9
22160: PPUSH
22161: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22165: LD_INT 28
22167: PPUSH
22168: LD_OWVAR 2
22172: PPUSH
22173: LD_INT 2
22175: PPUSH
22176: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22180: LD_INT 29
22182: PPUSH
22183: LD_OWVAR 2
22187: PPUSH
22188: LD_INT 2
22190: PPUSH
22191: CALL_OW 322
// end ;
22195: PPOPN 3
22197: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22198: LD_EXP 58
22202: PUSH
22203: LD_EXP 101
22207: AND
22208: IFFALSE 22319
22210: GO 22212
22212: DISABLE
22213: LD_INT 0
22215: PPUSH
22216: PPUSH
22217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22218: LD_ADDR_VAR 0 3
22222: PUSH
22223: LD_INT 22
22225: PUSH
22226: LD_OWVAR 2
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 25
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PPUSH
22249: CALL_OW 69
22253: ST_TO_ADDR
// if not tmp then
22254: LD_VAR 0 3
22258: NOT
22259: IFFALSE 22263
// exit ;
22261: GO 22319
// un := tmp [ rand ( 1 , tmp ) ] ;
22263: LD_ADDR_VAR 0 2
22267: PUSH
22268: LD_VAR 0 3
22272: PUSH
22273: LD_INT 1
22275: PPUSH
22276: LD_VAR 0 3
22280: PPUSH
22281: CALL_OW 12
22285: ARRAY
22286: ST_TO_ADDR
// if Crawls ( un ) then
22287: LD_VAR 0 2
22291: PPUSH
22292: CALL_OW 318
22296: IFFALSE 22307
// ComWalk ( un ) ;
22298: LD_VAR 0 2
22302: PPUSH
22303: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22307: LD_VAR 0 2
22311: PPUSH
22312: LD_INT 8
22314: PPUSH
22315: CALL_OW 336
// end ;
22319: PPOPN 3
22321: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22322: LD_EXP 58
22326: PUSH
22327: LD_EXP 102
22331: AND
22332: IFFALSE 22476
22334: GO 22336
22336: DISABLE
22337: LD_INT 0
22339: PPUSH
22340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22341: LD_ADDR_VAR 0 2
22345: PUSH
22346: LD_INT 22
22348: PUSH
22349: LD_OWVAR 2
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 21
22360: PUSH
22361: LD_INT 2
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 2
22370: PUSH
22371: LD_INT 34
22373: PUSH
22374: LD_INT 12
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 34
22383: PUSH
22384: LD_INT 51
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 34
22393: PUSH
22394: LD_INT 32
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: LIST
22411: PPUSH
22412: CALL_OW 69
22416: ST_TO_ADDR
// if not tmp then
22417: LD_VAR 0 2
22421: NOT
22422: IFFALSE 22426
// exit ;
22424: GO 22476
// for i in tmp do
22426: LD_ADDR_VAR 0 1
22430: PUSH
22431: LD_VAR 0 2
22435: PUSH
22436: FOR_IN
22437: IFFALSE 22474
// if GetCargo ( i , mat_artifact ) = 0 then
22439: LD_VAR 0 1
22443: PPUSH
22444: LD_INT 4
22446: PPUSH
22447: CALL_OW 289
22451: PUSH
22452: LD_INT 0
22454: EQUAL
22455: IFFALSE 22472
// SetCargo ( i , mat_siberit , 100 ) ;
22457: LD_VAR 0 1
22461: PPUSH
22462: LD_INT 3
22464: PPUSH
22465: LD_INT 100
22467: PPUSH
22468: CALL_OW 290
22472: GO 22436
22474: POP
22475: POP
// end ;
22476: PPOPN 2
22478: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22479: LD_EXP 58
22483: PUSH
22484: LD_EXP 103
22488: AND
22489: IFFALSE 22672
22491: GO 22493
22493: DISABLE
22494: LD_INT 0
22496: PPUSH
22497: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22498: LD_ADDR_VAR 0 2
22502: PUSH
22503: LD_INT 22
22505: PUSH
22506: LD_OWVAR 2
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PPUSH
22515: CALL_OW 69
22519: ST_TO_ADDR
// if not tmp then
22520: LD_VAR 0 2
22524: NOT
22525: IFFALSE 22529
// exit ;
22527: GO 22672
// for i := 1 to 2 do
22529: LD_ADDR_VAR 0 1
22533: PUSH
22534: DOUBLE
22535: LD_INT 1
22537: DEC
22538: ST_TO_ADDR
22539: LD_INT 2
22541: PUSH
22542: FOR_TO
22543: IFFALSE 22670
// begin uc_side := your_side ;
22545: LD_ADDR_OWVAR 20
22549: PUSH
22550: LD_OWVAR 2
22554: ST_TO_ADDR
// uc_nation := nation_american ;
22555: LD_ADDR_OWVAR 21
22559: PUSH
22560: LD_INT 1
22562: ST_TO_ADDR
// vc_chassis := us_morphling ;
22563: LD_ADDR_OWVAR 37
22567: PUSH
22568: LD_INT 5
22570: ST_TO_ADDR
// vc_engine := engine_siberite ;
22571: LD_ADDR_OWVAR 39
22575: PUSH
22576: LD_INT 3
22578: ST_TO_ADDR
// vc_control := control_computer ;
22579: LD_ADDR_OWVAR 38
22583: PUSH
22584: LD_INT 3
22586: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22587: LD_ADDR_OWVAR 40
22591: PUSH
22592: LD_INT 10
22594: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22595: LD_VAR 0 2
22599: PUSH
22600: LD_INT 1
22602: ARRAY
22603: PPUSH
22604: CALL_OW 310
22608: NOT
22609: IFFALSE 22656
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22611: CALL_OW 45
22615: PPUSH
22616: LD_VAR 0 2
22620: PUSH
22621: LD_INT 1
22623: ARRAY
22624: PPUSH
22625: CALL_OW 250
22629: PPUSH
22630: LD_VAR 0 2
22634: PUSH
22635: LD_INT 1
22637: ARRAY
22638: PPUSH
22639: CALL_OW 251
22643: PPUSH
22644: LD_INT 12
22646: PPUSH
22647: LD_INT 1
22649: PPUSH
22650: CALL_OW 50
22654: GO 22668
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22656: CALL_OW 45
22660: PPUSH
22661: LD_INT 1
22663: PPUSH
22664: CALL_OW 51
// end ;
22668: GO 22542
22670: POP
22671: POP
// end ;
22672: PPOPN 2
22674: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22675: LD_EXP 58
22679: PUSH
22680: LD_EXP 104
22684: AND
22685: IFFALSE 22907
22687: GO 22689
22689: DISABLE
22690: LD_INT 0
22692: PPUSH
22693: PPUSH
22694: PPUSH
22695: PPUSH
22696: PPUSH
22697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22698: LD_ADDR_VAR 0 6
22702: PUSH
22703: LD_INT 22
22705: PUSH
22706: LD_OWVAR 2
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 21
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 3
22727: PUSH
22728: LD_INT 23
22730: PUSH
22731: LD_INT 0
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: LIST
22746: PPUSH
22747: CALL_OW 69
22751: ST_TO_ADDR
// if not tmp then
22752: LD_VAR 0 6
22756: NOT
22757: IFFALSE 22761
// exit ;
22759: GO 22907
// s1 := rand ( 1 , 4 ) ;
22761: LD_ADDR_VAR 0 2
22765: PUSH
22766: LD_INT 1
22768: PPUSH
22769: LD_INT 4
22771: PPUSH
22772: CALL_OW 12
22776: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22777: LD_ADDR_VAR 0 4
22781: PUSH
22782: LD_VAR 0 6
22786: PUSH
22787: LD_INT 1
22789: ARRAY
22790: PPUSH
22791: LD_VAR 0 2
22795: PPUSH
22796: CALL_OW 259
22800: ST_TO_ADDR
// if s1 = 1 then
22801: LD_VAR 0 2
22805: PUSH
22806: LD_INT 1
22808: EQUAL
22809: IFFALSE 22829
// s2 := rand ( 2 , 4 ) else
22811: LD_ADDR_VAR 0 3
22815: PUSH
22816: LD_INT 2
22818: PPUSH
22819: LD_INT 4
22821: PPUSH
22822: CALL_OW 12
22826: ST_TO_ADDR
22827: GO 22837
// s2 := 1 ;
22829: LD_ADDR_VAR 0 3
22833: PUSH
22834: LD_INT 1
22836: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22837: LD_ADDR_VAR 0 5
22841: PUSH
22842: LD_VAR 0 6
22846: PUSH
22847: LD_INT 1
22849: ARRAY
22850: PPUSH
22851: LD_VAR 0 3
22855: PPUSH
22856: CALL_OW 259
22860: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22861: LD_VAR 0 6
22865: PUSH
22866: LD_INT 1
22868: ARRAY
22869: PPUSH
22870: LD_VAR 0 2
22874: PPUSH
22875: LD_VAR 0 5
22879: PPUSH
22880: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22884: LD_VAR 0 6
22888: PUSH
22889: LD_INT 1
22891: ARRAY
22892: PPUSH
22893: LD_VAR 0 3
22897: PPUSH
22898: LD_VAR 0 4
22902: PPUSH
22903: CALL_OW 237
// end ;
22907: PPOPN 6
22909: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22910: LD_EXP 58
22914: PUSH
22915: LD_EXP 105
22919: AND
22920: IFFALSE 22999
22922: GO 22924
22924: DISABLE
22925: LD_INT 0
22927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22928: LD_ADDR_VAR 0 1
22932: PUSH
22933: LD_INT 22
22935: PUSH
22936: LD_OWVAR 2
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 30
22947: PUSH
22948: LD_INT 3
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PPUSH
22959: CALL_OW 69
22963: ST_TO_ADDR
// if not tmp then
22964: LD_VAR 0 1
22968: NOT
22969: IFFALSE 22973
// exit ;
22971: GO 22999
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22973: LD_VAR 0 1
22977: PUSH
22978: LD_INT 1
22980: PPUSH
22981: LD_VAR 0 1
22985: PPUSH
22986: CALL_OW 12
22990: ARRAY
22991: PPUSH
22992: LD_INT 1
22994: PPUSH
22995: CALL_OW 234
// end ;
22999: PPOPN 1
23001: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23002: LD_EXP 58
23006: PUSH
23007: LD_EXP 106
23011: AND
23012: IFFALSE 23124
23014: GO 23016
23016: DISABLE
23017: LD_INT 0
23019: PPUSH
23020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23021: LD_ADDR_VAR 0 2
23025: PUSH
23026: LD_INT 22
23028: PUSH
23029: LD_OWVAR 2
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 2
23040: PUSH
23041: LD_INT 30
23043: PUSH
23044: LD_INT 27
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 30
23053: PUSH
23054: LD_INT 26
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 30
23063: PUSH
23064: LD_INT 28
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PPUSH
23081: CALL_OW 69
23085: ST_TO_ADDR
// if not tmp then
23086: LD_VAR 0 2
23090: NOT
23091: IFFALSE 23095
// exit ;
23093: GO 23124
// for i in tmp do
23095: LD_ADDR_VAR 0 1
23099: PUSH
23100: LD_VAR 0 2
23104: PUSH
23105: FOR_IN
23106: IFFALSE 23122
// SetLives ( i , 1 ) ;
23108: LD_VAR 0 1
23112: PPUSH
23113: LD_INT 1
23115: PPUSH
23116: CALL_OW 234
23120: GO 23105
23122: POP
23123: POP
// end ;
23124: PPOPN 2
23126: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23127: LD_EXP 58
23131: PUSH
23132: LD_EXP 107
23136: AND
23137: IFFALSE 23411
23139: GO 23141
23141: DISABLE
23142: LD_INT 0
23144: PPUSH
23145: PPUSH
23146: PPUSH
// begin i := rand ( 1 , 7 ) ;
23147: LD_ADDR_VAR 0 1
23151: PUSH
23152: LD_INT 1
23154: PPUSH
23155: LD_INT 7
23157: PPUSH
23158: CALL_OW 12
23162: ST_TO_ADDR
// case i of 1 :
23163: LD_VAR 0 1
23167: PUSH
23168: LD_INT 1
23170: DOUBLE
23171: EQUAL
23172: IFTRUE 23176
23174: GO 23186
23176: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23177: LD_STRING earthquake(getX(game), 0, 32)
23179: PPUSH
23180: CALL_OW 559
23184: GO 23411
23186: LD_INT 2
23188: DOUBLE
23189: EQUAL
23190: IFTRUE 23194
23192: GO 23208
23194: POP
// begin ToLua ( displayStucuk(); ) ;
23195: LD_STRING displayStucuk();
23197: PPUSH
23198: CALL_OW 559
// ResetFog ;
23202: CALL_OW 335
// end ; 3 :
23206: GO 23411
23208: LD_INT 3
23210: DOUBLE
23211: EQUAL
23212: IFTRUE 23216
23214: GO 23320
23216: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23217: LD_ADDR_VAR 0 2
23221: PUSH
23222: LD_INT 22
23224: PUSH
23225: LD_OWVAR 2
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 25
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PPUSH
23248: CALL_OW 69
23252: ST_TO_ADDR
// if not tmp then
23253: LD_VAR 0 2
23257: NOT
23258: IFFALSE 23262
// exit ;
23260: GO 23411
// un := tmp [ rand ( 1 , tmp ) ] ;
23262: LD_ADDR_VAR 0 3
23266: PUSH
23267: LD_VAR 0 2
23271: PUSH
23272: LD_INT 1
23274: PPUSH
23275: LD_VAR 0 2
23279: PPUSH
23280: CALL_OW 12
23284: ARRAY
23285: ST_TO_ADDR
// if Crawls ( un ) then
23286: LD_VAR 0 3
23290: PPUSH
23291: CALL_OW 318
23295: IFFALSE 23306
// ComWalk ( un ) ;
23297: LD_VAR 0 3
23301: PPUSH
23302: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23306: LD_VAR 0 3
23310: PPUSH
23311: LD_INT 8
23313: PPUSH
23314: CALL_OW 336
// end ; 4 :
23318: GO 23411
23320: LD_INT 4
23322: DOUBLE
23323: EQUAL
23324: IFTRUE 23328
23326: GO 23389
23328: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23329: LD_ADDR_VAR 0 2
23333: PUSH
23334: LD_INT 22
23336: PUSH
23337: LD_OWVAR 2
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 30
23348: PUSH
23349: LD_INT 29
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PPUSH
23360: CALL_OW 69
23364: ST_TO_ADDR
// if not tmp then
23365: LD_VAR 0 2
23369: NOT
23370: IFFALSE 23374
// exit ;
23372: GO 23411
// DestroyUnit ( tmp [ 1 ] ) ;
23374: LD_VAR 0 2
23378: PUSH
23379: LD_INT 1
23381: ARRAY
23382: PPUSH
23383: CALL_OW 65
// end ; 5 .. 7 :
23387: GO 23411
23389: LD_INT 5
23391: DOUBLE
23392: GREATEREQUAL
23393: IFFALSE 23401
23395: LD_INT 7
23397: DOUBLE
23398: LESSEQUAL
23399: IFTRUE 23403
23401: GO 23410
23403: POP
// StreamSibBomb ; end ;
23404: CALL 19661 0 0
23408: GO 23411
23410: POP
// end ;
23411: PPOPN 3
23413: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23414: LD_EXP 58
23418: PUSH
23419: LD_EXP 108
23423: AND
23424: IFFALSE 23580
23426: GO 23428
23428: DISABLE
23429: LD_INT 0
23431: PPUSH
23432: PPUSH
23433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23434: LD_ADDR_VAR 0 2
23438: PUSH
23439: LD_INT 81
23441: PUSH
23442: LD_OWVAR 2
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: LD_INT 21
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 21
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: LIST
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PPUSH
23483: CALL_OW 69
23487: ST_TO_ADDR
// if not tmp then
23488: LD_VAR 0 2
23492: NOT
23493: IFFALSE 23497
// exit ;
23495: GO 23580
// p := 0 ;
23497: LD_ADDR_VAR 0 3
23501: PUSH
23502: LD_INT 0
23504: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23505: LD_INT 35
23507: PPUSH
23508: CALL_OW 67
// p := p + 1 ;
23512: LD_ADDR_VAR 0 3
23516: PUSH
23517: LD_VAR 0 3
23521: PUSH
23522: LD_INT 1
23524: PLUS
23525: ST_TO_ADDR
// for i in tmp do
23526: LD_ADDR_VAR 0 1
23530: PUSH
23531: LD_VAR 0 2
23535: PUSH
23536: FOR_IN
23537: IFFALSE 23568
// if GetLives ( i ) < 1000 then
23539: LD_VAR 0 1
23543: PPUSH
23544: CALL_OW 256
23548: PUSH
23549: LD_INT 1000
23551: LESS
23552: IFFALSE 23566
// SetLives ( i , 1000 ) ;
23554: LD_VAR 0 1
23558: PPUSH
23559: LD_INT 1000
23561: PPUSH
23562: CALL_OW 234
23566: GO 23536
23568: POP
23569: POP
// until p > 20 ;
23570: LD_VAR 0 3
23574: PUSH
23575: LD_INT 20
23577: GREATER
23578: IFFALSE 23505
// end ;
23580: PPOPN 3
23582: END
// every 0 0$1 trigger StreamModeActive and sTime do
23583: LD_EXP 58
23587: PUSH
23588: LD_EXP 109
23592: AND
23593: IFFALSE 23628
23595: GO 23597
23597: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23598: LD_INT 28
23600: PPUSH
23601: LD_OWVAR 2
23605: PPUSH
23606: LD_INT 2
23608: PPUSH
23609: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23613: LD_INT 30
23615: PPUSH
23616: LD_OWVAR 2
23620: PPUSH
23621: LD_INT 2
23623: PPUSH
23624: CALL_OW 322
// end ;
23628: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23629: LD_EXP 58
23633: PUSH
23634: LD_EXP 110
23638: AND
23639: IFFALSE 23760
23641: GO 23643
23643: DISABLE
23644: LD_INT 0
23646: PPUSH
23647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23648: LD_ADDR_VAR 0 2
23652: PUSH
23653: LD_INT 22
23655: PUSH
23656: LD_OWVAR 2
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 21
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 3
23677: PUSH
23678: LD_INT 23
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: LIST
23696: PPUSH
23697: CALL_OW 69
23701: ST_TO_ADDR
// if not tmp then
23702: LD_VAR 0 2
23706: NOT
23707: IFFALSE 23711
// exit ;
23709: GO 23760
// for i in tmp do
23711: LD_ADDR_VAR 0 1
23715: PUSH
23716: LD_VAR 0 2
23720: PUSH
23721: FOR_IN
23722: IFFALSE 23758
// begin if Crawls ( i ) then
23724: LD_VAR 0 1
23728: PPUSH
23729: CALL_OW 318
23733: IFFALSE 23744
// ComWalk ( i ) ;
23735: LD_VAR 0 1
23739: PPUSH
23740: CALL_OW 138
// SetClass ( i , 2 ) ;
23744: LD_VAR 0 1
23748: PPUSH
23749: LD_INT 2
23751: PPUSH
23752: CALL_OW 336
// end ;
23756: GO 23721
23758: POP
23759: POP
// end ;
23760: PPOPN 2
23762: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23763: LD_EXP 58
23767: PUSH
23768: LD_EXP 111
23772: AND
23773: IFFALSE 24054
23775: GO 23777
23777: DISABLE
23778: LD_INT 0
23780: PPUSH
23781: PPUSH
23782: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23783: LD_OWVAR 2
23787: PPUSH
23788: LD_INT 9
23790: PPUSH
23791: LD_INT 1
23793: PPUSH
23794: LD_INT 1
23796: PPUSH
23797: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23801: LD_INT 9
23803: PPUSH
23804: LD_OWVAR 2
23808: PPUSH
23809: CALL_OW 343
// uc_side := 9 ;
23813: LD_ADDR_OWVAR 20
23817: PUSH
23818: LD_INT 9
23820: ST_TO_ADDR
// uc_nation := 2 ;
23821: LD_ADDR_OWVAR 21
23825: PUSH
23826: LD_INT 2
23828: ST_TO_ADDR
// hc_name := Dark Warrior ;
23829: LD_ADDR_OWVAR 26
23833: PUSH
23834: LD_STRING Dark Warrior
23836: ST_TO_ADDR
// hc_gallery :=  ;
23837: LD_ADDR_OWVAR 33
23841: PUSH
23842: LD_STRING 
23844: ST_TO_ADDR
// hc_noskilllimit := true ;
23845: LD_ADDR_OWVAR 76
23849: PUSH
23850: LD_INT 1
23852: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23853: LD_ADDR_OWVAR 31
23857: PUSH
23858: LD_INT 30
23860: PUSH
23861: LD_INT 30
23863: PUSH
23864: LD_INT 30
23866: PUSH
23867: LD_INT 30
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: ST_TO_ADDR
// un := CreateHuman ;
23876: LD_ADDR_VAR 0 3
23880: PUSH
23881: CALL_OW 44
23885: ST_TO_ADDR
// hc_noskilllimit := false ;
23886: LD_ADDR_OWVAR 76
23890: PUSH
23891: LD_INT 0
23893: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23894: LD_VAR 0 3
23898: PPUSH
23899: LD_INT 1
23901: PPUSH
23902: CALL_OW 51
// p := 0 ;
23906: LD_ADDR_VAR 0 2
23910: PUSH
23911: LD_INT 0
23913: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23914: LD_INT 35
23916: PPUSH
23917: CALL_OW 67
// p := p + 1 ;
23921: LD_ADDR_VAR 0 2
23925: PUSH
23926: LD_VAR 0 2
23930: PUSH
23931: LD_INT 1
23933: PLUS
23934: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23935: LD_VAR 0 3
23939: PPUSH
23940: CALL_OW 256
23944: PUSH
23945: LD_INT 1000
23947: LESS
23948: IFFALSE 23962
// SetLives ( un , 1000 ) ;
23950: LD_VAR 0 3
23954: PPUSH
23955: LD_INT 1000
23957: PPUSH
23958: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23962: LD_VAR 0 3
23966: PPUSH
23967: LD_INT 81
23969: PUSH
23970: LD_OWVAR 2
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 91
23981: PUSH
23982: LD_VAR 0 3
23986: PUSH
23987: LD_INT 30
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PPUSH
23999: CALL_OW 69
24003: PPUSH
24004: LD_VAR 0 3
24008: PPUSH
24009: CALL_OW 74
24013: PPUSH
24014: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
24018: LD_VAR 0 2
24022: PUSH
24023: LD_INT 60
24025: GREATER
24026: PUSH
24027: LD_VAR 0 3
24031: PPUSH
24032: CALL_OW 301
24036: OR
24037: IFFALSE 23914
// if un then
24039: LD_VAR 0 3
24043: IFFALSE 24054
// RemoveUnit ( un ) ;
24045: LD_VAR 0 3
24049: PPUSH
24050: CALL_OW 64
// end ;
24054: PPOPN 3
24056: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24057: LD_INT 0
24059: PPUSH
24060: PPUSH
24061: PPUSH
24062: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24063: LD_ADDR_VAR 0 4
24067: PUSH
24068: LD_INT 22
24070: PUSH
24071: LD_OWVAR 2
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 2
24082: PUSH
24083: LD_INT 30
24085: PUSH
24086: LD_INT 0
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 30
24095: PUSH
24096: LD_INT 1
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PPUSH
24112: CALL_OW 69
24116: ST_TO_ADDR
// if not tmp then
24117: LD_VAR 0 4
24121: NOT
24122: IFFALSE 24126
// exit ;
24124: GO 24185
// for i in tmp do
24126: LD_ADDR_VAR 0 2
24130: PUSH
24131: LD_VAR 0 4
24135: PUSH
24136: FOR_IN
24137: IFFALSE 24183
// for j = 1 to 3 do
24139: LD_ADDR_VAR 0 3
24143: PUSH
24144: DOUBLE
24145: LD_INT 1
24147: DEC
24148: ST_TO_ADDR
24149: LD_INT 3
24151: PUSH
24152: FOR_TO
24153: IFFALSE 24179
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24155: LD_VAR 0 2
24159: PPUSH
24160: CALL_OW 274
24164: PPUSH
24165: LD_VAR 0 3
24169: PPUSH
24170: LD_INT 99999
24172: PPUSH
24173: CALL_OW 277
24177: GO 24152
24179: POP
24180: POP
24181: GO 24136
24183: POP
24184: POP
// end ;
24185: LD_VAR 0 1
24189: RET
// export function hHackSetLevel10 ; var i , j ; begin
24190: LD_INT 0
24192: PPUSH
24193: PPUSH
24194: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24195: LD_ADDR_VAR 0 2
24199: PUSH
24200: LD_INT 21
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PPUSH
24210: CALL_OW 69
24214: PUSH
24215: FOR_IN
24216: IFFALSE 24268
// if IsSelected ( i ) then
24218: LD_VAR 0 2
24222: PPUSH
24223: CALL_OW 306
24227: IFFALSE 24266
// begin for j := 1 to 4 do
24229: LD_ADDR_VAR 0 3
24233: PUSH
24234: DOUBLE
24235: LD_INT 1
24237: DEC
24238: ST_TO_ADDR
24239: LD_INT 4
24241: PUSH
24242: FOR_TO
24243: IFFALSE 24264
// SetSkill ( i , j , 10 ) ;
24245: LD_VAR 0 2
24249: PPUSH
24250: LD_VAR 0 3
24254: PPUSH
24255: LD_INT 10
24257: PPUSH
24258: CALL_OW 237
24262: GO 24242
24264: POP
24265: POP
// end ;
24266: GO 24215
24268: POP
24269: POP
// end ;
24270: LD_VAR 0 1
24274: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24275: LD_INT 0
24277: PPUSH
24278: PPUSH
24279: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24280: LD_ADDR_VAR 0 2
24284: PUSH
24285: LD_INT 22
24287: PUSH
24288: LD_OWVAR 2
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 21
24299: PUSH
24300: LD_INT 1
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PPUSH
24311: CALL_OW 69
24315: PUSH
24316: FOR_IN
24317: IFFALSE 24358
// begin for j := 1 to 4 do
24319: LD_ADDR_VAR 0 3
24323: PUSH
24324: DOUBLE
24325: LD_INT 1
24327: DEC
24328: ST_TO_ADDR
24329: LD_INT 4
24331: PUSH
24332: FOR_TO
24333: IFFALSE 24354
// SetSkill ( i , j , 10 ) ;
24335: LD_VAR 0 2
24339: PPUSH
24340: LD_VAR 0 3
24344: PPUSH
24345: LD_INT 10
24347: PPUSH
24348: CALL_OW 237
24352: GO 24332
24354: POP
24355: POP
// end ;
24356: GO 24316
24358: POP
24359: POP
// end ;
24360: LD_VAR 0 1
24364: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
24365: LD_INT 0
24367: PPUSH
// uc_side := your_side ;
24368: LD_ADDR_OWVAR 20
24372: PUSH
24373: LD_OWVAR 2
24377: ST_TO_ADDR
// uc_nation := nation ;
24378: LD_ADDR_OWVAR 21
24382: PUSH
24383: LD_VAR 0 1
24387: ST_TO_ADDR
// InitHc ;
24388: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24392: LD_INT 0
24394: PPUSH
24395: LD_VAR 0 2
24399: PPUSH
24400: LD_VAR 0 3
24404: PPUSH
24405: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
24409: CALL_OW 44
24413: PPUSH
24414: LD_INT 1
24416: PPUSH
24417: CALL_OW 51
// end ;
24421: LD_VAR 0 4
24425: RET
// export function hHackSpawnVehicle ; begin
24426: LD_INT 0
24428: PPUSH
// uc_side := your_side ;
24429: LD_ADDR_OWVAR 20
24433: PUSH
24434: LD_OWVAR 2
24438: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
24439: LD_ADDR_OWVAR 21
24443: PUSH
24444: LD_INT 1
24446: PPUSH
24447: LD_INT 3
24449: PPUSH
24450: CALL_OW 12
24454: ST_TO_ADDR
// InitVc ;
24455: CALL_OW 20
// case uc_nation of 1 :
24459: LD_OWVAR 21
24463: PUSH
24464: LD_INT 1
24466: DOUBLE
24467: EQUAL
24468: IFTRUE 24472
24470: GO 24616
24472: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
24473: LD_ADDR_OWVAR 37
24477: PUSH
24478: LD_INT 1
24480: PUSH
24481: LD_INT 2
24483: PUSH
24484: LD_INT 3
24486: PUSH
24487: LD_INT 4
24489: PUSH
24490: LD_INT 5
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 1
24502: PPUSH
24503: LD_INT 5
24505: PPUSH
24506: CALL_OW 12
24510: ARRAY
24511: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
24512: LD_ADDR_OWVAR 39
24516: PUSH
24517: LD_INT 1
24519: PPUSH
24520: LD_INT 3
24522: PPUSH
24523: CALL_OW 12
24527: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
24528: LD_ADDR_OWVAR 38
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: LD_INT 2
24538: PUSH
24539: LD_INT 3
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: PPUSH
24550: LD_INT 3
24552: PPUSH
24553: CALL_OW 12
24557: ARRAY
24558: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
24559: LD_ADDR_OWVAR 40
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: LD_INT 4
24569: PUSH
24570: LD_INT 5
24572: PUSH
24573: LD_INT 3
24575: PUSH
24576: LD_INT 7
24578: PUSH
24579: LD_INT 8
24581: PUSH
24582: LD_INT 9
24584: PUSH
24585: LD_INT 10
24587: PUSH
24588: LD_INT 6
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: PPUSH
24605: LD_INT 9
24607: PPUSH
24608: CALL_OW 12
24612: ARRAY
24613: ST_TO_ADDR
// end ; 2 :
24614: GO 24881
24616: LD_INT 2
24618: DOUBLE
24619: EQUAL
24620: IFTRUE 24624
24622: GO 24748
24624: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
24625: LD_ADDR_OWVAR 37
24629: PUSH
24630: LD_INT 11
24632: PUSH
24633: LD_INT 12
24635: PUSH
24636: LD_INT 13
24638: PUSH
24639: LD_INT 14
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 1
24650: PPUSH
24651: LD_INT 4
24653: PPUSH
24654: CALL_OW 12
24658: ARRAY
24659: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
24660: LD_ADDR_OWVAR 39
24664: PUSH
24665: LD_INT 1
24667: PPUSH
24668: LD_INT 3
24670: PPUSH
24671: CALL_OW 12
24675: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
24676: LD_ADDR_OWVAR 38
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: LD_INT 2
24686: PUSH
24687: LD_INT 5
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: PPUSH
24698: LD_INT 3
24700: PPUSH
24701: CALL_OW 12
24705: ARRAY
24706: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
24707: LD_ADDR_OWVAR 40
24711: PUSH
24712: LD_INT 24
24714: PUSH
24715: LD_INT 26
24717: PUSH
24718: LD_INT 27
24720: PUSH
24721: LD_INT 28
24723: PUSH
24724: LD_INT 29
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 1
24736: PPUSH
24737: LD_INT 5
24739: PPUSH
24740: CALL_OW 12
24744: ARRAY
24745: ST_TO_ADDR
// end ; 3 :
24746: GO 24881
24748: LD_INT 3
24750: DOUBLE
24751: EQUAL
24752: IFTRUE 24756
24754: GO 24880
24756: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
24757: LD_ADDR_OWVAR 37
24761: PUSH
24762: LD_INT 21
24764: PUSH
24765: LD_INT 23
24767: PUSH
24768: LD_INT 22
24770: PUSH
24771: LD_INT 24
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: PPUSH
24783: LD_INT 4
24785: PPUSH
24786: CALL_OW 12
24790: ARRAY
24791: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
24792: LD_ADDR_OWVAR 39
24796: PUSH
24797: LD_INT 1
24799: PPUSH
24800: LD_INT 3
24802: PPUSH
24803: CALL_OW 12
24807: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
24808: LD_ADDR_OWVAR 38
24812: PUSH
24813: LD_INT 1
24815: PUSH
24816: LD_INT 3
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 1
24825: PPUSH
24826: LD_INT 2
24828: PPUSH
24829: CALL_OW 12
24833: ARRAY
24834: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
24835: LD_ADDR_OWVAR 40
24839: PUSH
24840: LD_INT 42
24842: PUSH
24843: LD_INT 43
24845: PUSH
24846: LD_INT 44
24848: PUSH
24849: LD_INT 46
24851: PUSH
24852: LD_INT 48
24854: PUSH
24855: LD_INT 47
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 1
24868: PPUSH
24869: LD_INT 6
24871: PPUSH
24872: CALL_OW 12
24876: ARRAY
24877: ST_TO_ADDR
// end ; end ;
24878: GO 24881
24880: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24881: CALL_OW 45
24885: PPUSH
24886: LD_INT 1
24888: PPUSH
24889: CALL_OW 51
// end ;
24893: LD_VAR 0 1
24897: RET
// export hInvincible ; every 1 do
24898: GO 24900
24900: DISABLE
// hInvincible := [ ] ;
24901: LD_ADDR_EXP 112
24905: PUSH
24906: EMPTY
24907: ST_TO_ADDR
24908: END
// every 10 do var i ;
24909: GO 24911
24911: DISABLE
24912: LD_INT 0
24914: PPUSH
// begin enable ;
24915: ENABLE
// if not hInvincible then
24916: LD_EXP 112
24920: NOT
24921: IFFALSE 24925
// exit ;
24923: GO 24969
// for i in hInvincible do
24925: LD_ADDR_VAR 0 1
24929: PUSH
24930: LD_EXP 112
24934: PUSH
24935: FOR_IN
24936: IFFALSE 24967
// if GetLives ( i ) < 1000 then
24938: LD_VAR 0 1
24942: PPUSH
24943: CALL_OW 256
24947: PUSH
24948: LD_INT 1000
24950: LESS
24951: IFFALSE 24965
// SetLives ( i , 1000 ) ;
24953: LD_VAR 0 1
24957: PPUSH
24958: LD_INT 1000
24960: PPUSH
24961: CALL_OW 234
24965: GO 24935
24967: POP
24968: POP
// end ;
24969: PPOPN 1
24971: END
// export function hHackInvincible ; var i ; begin
24972: LD_INT 0
24974: PPUSH
24975: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24976: LD_ADDR_VAR 0 2
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: LD_INT 21
24986: PUSH
24987: LD_INT 1
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 21
24996: PUSH
24997: LD_INT 2
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: LIST
25008: PPUSH
25009: CALL_OW 69
25013: PUSH
25014: FOR_IN
25015: IFFALSE 25076
// if IsSelected ( i ) then
25017: LD_VAR 0 2
25021: PPUSH
25022: CALL_OW 306
25026: IFFALSE 25074
// begin if i in hInvincible then
25028: LD_VAR 0 2
25032: PUSH
25033: LD_EXP 112
25037: IN
25038: IFFALSE 25058
// hInvincible := hInvincible diff i else
25040: LD_ADDR_EXP 112
25044: PUSH
25045: LD_EXP 112
25049: PUSH
25050: LD_VAR 0 2
25054: DIFF
25055: ST_TO_ADDR
25056: GO 25074
// hInvincible := hInvincible union i ;
25058: LD_ADDR_EXP 112
25062: PUSH
25063: LD_EXP 112
25067: PUSH
25068: LD_VAR 0 2
25072: UNION
25073: ST_TO_ADDR
// end ;
25074: GO 25014
25076: POP
25077: POP
// end ;
25078: LD_VAR 0 1
25082: RET
// export function hHackInvisible ; var i , j ; begin
25083: LD_INT 0
25085: PPUSH
25086: PPUSH
25087: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25088: LD_ADDR_VAR 0 2
25092: PUSH
25093: LD_INT 21
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PPUSH
25103: CALL_OW 69
25107: PUSH
25108: FOR_IN
25109: IFFALSE 25133
// if IsSelected ( i ) then
25111: LD_VAR 0 2
25115: PPUSH
25116: CALL_OW 306
25120: IFFALSE 25131
// ComForceInvisible ( i ) ;
25122: LD_VAR 0 2
25126: PPUSH
25127: CALL_OW 496
25131: GO 25108
25133: POP
25134: POP
// end ;
25135: LD_VAR 0 1
25139: RET
// export function hHackChangeYourSide ; begin
25140: LD_INT 0
25142: PPUSH
// if your_side = 8 then
25143: LD_OWVAR 2
25147: PUSH
25148: LD_INT 8
25150: EQUAL
25151: IFFALSE 25163
// your_side := 0 else
25153: LD_ADDR_OWVAR 2
25157: PUSH
25158: LD_INT 0
25160: ST_TO_ADDR
25161: GO 25177
// your_side := your_side + 1 ;
25163: LD_ADDR_OWVAR 2
25167: PUSH
25168: LD_OWVAR 2
25172: PUSH
25173: LD_INT 1
25175: PLUS
25176: ST_TO_ADDR
// end ;
25177: LD_VAR 0 1
25181: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25182: LD_INT 0
25184: PPUSH
25185: PPUSH
25186: PPUSH
// for i in all_units do
25187: LD_ADDR_VAR 0 2
25191: PUSH
25192: LD_OWVAR 3
25196: PUSH
25197: FOR_IN
25198: IFFALSE 25276
// if IsSelected ( i ) then
25200: LD_VAR 0 2
25204: PPUSH
25205: CALL_OW 306
25209: IFFALSE 25274
// begin j := GetSide ( i ) ;
25211: LD_ADDR_VAR 0 3
25215: PUSH
25216: LD_VAR 0 2
25220: PPUSH
25221: CALL_OW 255
25225: ST_TO_ADDR
// if j = 8 then
25226: LD_VAR 0 3
25230: PUSH
25231: LD_INT 8
25233: EQUAL
25234: IFFALSE 25246
// j := 0 else
25236: LD_ADDR_VAR 0 3
25240: PUSH
25241: LD_INT 0
25243: ST_TO_ADDR
25244: GO 25260
// j := j + 1 ;
25246: LD_ADDR_VAR 0 3
25250: PUSH
25251: LD_VAR 0 3
25255: PUSH
25256: LD_INT 1
25258: PLUS
25259: ST_TO_ADDR
// SetSide ( i , j ) ;
25260: LD_VAR 0 2
25264: PPUSH
25265: LD_VAR 0 3
25269: PPUSH
25270: CALL_OW 235
// end ;
25274: GO 25197
25276: POP
25277: POP
// end ;
25278: LD_VAR 0 1
25282: RET
// export function hHackFog ; begin
25283: LD_INT 0
25285: PPUSH
// FogOff ( true ) ;
25286: LD_INT 1
25288: PPUSH
25289: CALL_OW 344
// end ;
25293: LD_VAR 0 1
25297: RET
// export function hHackApeman ; begin
25298: LD_INT 0
25300: PPUSH
// uc_side := your_side ;
25301: LD_ADDR_OWVAR 20
25305: PUSH
25306: LD_OWVAR 2
25310: ST_TO_ADDR
// uc_nation := 0 ;
25311: LD_ADDR_OWVAR 21
25315: PUSH
25316: LD_INT 0
25318: ST_TO_ADDR
// hc_name :=  ;
25319: LD_ADDR_OWVAR 26
25323: PUSH
25324: LD_STRING 
25326: ST_TO_ADDR
// hc_gallery :=  ;
25327: LD_ADDR_OWVAR 33
25331: PUSH
25332: LD_STRING 
25334: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
25335: LD_ADDR_OWVAR 31
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: ST_TO_ADDR
// hc_class := class_apeman ;
25358: LD_ADDR_OWVAR 28
25362: PUSH
25363: LD_INT 12
25365: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
25366: CALL_OW 44
25370: PPUSH
25371: LD_INT 1
25373: PPUSH
25374: CALL_OW 51
// end ;
25378: LD_VAR 0 1
25382: RET
// export function hHackBoom ; begin
25383: LD_INT 0
25385: PPUSH
// uc_side := your_side ;
25386: LD_ADDR_OWVAR 20
25390: PUSH
25391: LD_OWVAR 2
25395: ST_TO_ADDR
// uc_nation := 1 ;
25396: LD_ADDR_OWVAR 21
25400: PUSH
25401: LD_INT 1
25403: ST_TO_ADDR
// vc_chassis := us_morphling ;
25404: LD_ADDR_OWVAR 37
25408: PUSH
25409: LD_INT 5
25411: ST_TO_ADDR
// vc_engine := engine_siberite ;
25412: LD_ADDR_OWVAR 39
25416: PUSH
25417: LD_INT 3
25419: ST_TO_ADDR
// vc_control := control_computer ;
25420: LD_ADDR_OWVAR 38
25424: PUSH
25425: LD_INT 3
25427: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
25428: LD_ADDR_OWVAR 40
25432: PUSH
25433: LD_INT 8
25435: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25436: CALL_OW 45
25440: PPUSH
25441: LD_INT 1
25443: PPUSH
25444: CALL_OW 51
// end ; end_of_file
25448: LD_VAR 0 1
25452: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25453: LD_INT 0
25455: PPUSH
25456: PPUSH
25457: PPUSH
25458: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25459: LD_VAR 0 1
25463: PPUSH
25464: CALL_OW 264
25468: PUSH
25469: LD_EXP 47
25473: EQUAL
25474: IFFALSE 25546
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25476: LD_INT 68
25478: PPUSH
25479: LD_VAR 0 1
25483: PPUSH
25484: CALL_OW 255
25488: PPUSH
25489: CALL_OW 321
25493: PUSH
25494: LD_INT 2
25496: EQUAL
25497: IFFALSE 25509
// eff := 70 else
25499: LD_ADDR_VAR 0 4
25503: PUSH
25504: LD_INT 70
25506: ST_TO_ADDR
25507: GO 25517
// eff := 30 ;
25509: LD_ADDR_VAR 0 4
25513: PUSH
25514: LD_INT 30
25516: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25517: LD_VAR 0 1
25521: PPUSH
25522: CALL_OW 250
25526: PPUSH
25527: LD_VAR 0 1
25531: PPUSH
25532: CALL_OW 251
25536: PPUSH
25537: LD_VAR 0 4
25541: PPUSH
25542: CALL_OW 495
// end ; end ;
25546: LD_VAR 0 2
25550: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25551: LD_INT 0
25553: PPUSH
// end ;
25554: LD_VAR 0 4
25558: RET
// export function SOS_Command ( cmd ) ; begin
25559: LD_INT 0
25561: PPUSH
// end ;
25562: LD_VAR 0 2
25566: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25567: LD_VAR 0 1
25571: PUSH
25572: LD_INT 254
25574: EQUAL
25575: PUSH
25576: LD_VAR 0 2
25580: PPUSH
25581: CALL_OW 264
25585: PUSH
25586: LD_EXP 45
25590: EQUAL
25591: AND
25592: PUSH
25593: LD_VAR 0 3
25597: PPUSH
25598: CALL_OW 263
25602: PUSH
25603: LD_INT 3
25605: EQUAL
25606: AND
25607: IFFALSE 25623
// HackDestroyVehicle ( unit , selectedUnit ) ;
25609: LD_VAR 0 2
25613: PPUSH
25614: LD_VAR 0 3
25618: PPUSH
25619: CALL 27130 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25623: LD_VAR 0 1
25627: PUSH
25628: LD_INT 255
25630: EQUAL
25631: PUSH
25632: LD_VAR 0 2
25636: PPUSH
25637: CALL_OW 264
25641: PUSH
25642: LD_INT 14
25644: PUSH
25645: LD_INT 53
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: IN
25652: AND
25653: PUSH
25654: LD_VAR 0 4
25658: PPUSH
25659: LD_VAR 0 5
25663: PPUSH
25664: CALL_OW 488
25668: AND
25669: IFFALSE 25693
// CutTreeXYR ( unit , x , y , 12 ) ;
25671: LD_VAR 0 2
25675: PPUSH
25676: LD_VAR 0 4
25680: PPUSH
25681: LD_VAR 0 5
25685: PPUSH
25686: LD_INT 12
25688: PPUSH
25689: CALL 25696 0 4
// end ;
25693: PPOPN 5
25695: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25696: LD_INT 0
25698: PPUSH
25699: PPUSH
25700: PPUSH
25701: PPUSH
25702: PPUSH
25703: PPUSH
25704: PPUSH
25705: PPUSH
25706: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25707: LD_VAR 0 1
25711: NOT
25712: PUSH
25713: LD_VAR 0 2
25717: PPUSH
25718: LD_VAR 0 3
25722: PPUSH
25723: CALL_OW 488
25727: NOT
25728: OR
25729: PUSH
25730: LD_VAR 0 4
25734: NOT
25735: OR
25736: IFFALSE 25740
// exit ;
25738: GO 26080
// list := [ ] ;
25740: LD_ADDR_VAR 0 13
25744: PUSH
25745: EMPTY
25746: ST_TO_ADDR
// if x - r < 0 then
25747: LD_VAR 0 2
25751: PUSH
25752: LD_VAR 0 4
25756: MINUS
25757: PUSH
25758: LD_INT 0
25760: LESS
25761: IFFALSE 25773
// min_x := 0 else
25763: LD_ADDR_VAR 0 7
25767: PUSH
25768: LD_INT 0
25770: ST_TO_ADDR
25771: GO 25789
// min_x := x - r ;
25773: LD_ADDR_VAR 0 7
25777: PUSH
25778: LD_VAR 0 2
25782: PUSH
25783: LD_VAR 0 4
25787: MINUS
25788: ST_TO_ADDR
// if y - r < 0 then
25789: LD_VAR 0 3
25793: PUSH
25794: LD_VAR 0 4
25798: MINUS
25799: PUSH
25800: LD_INT 0
25802: LESS
25803: IFFALSE 25815
// min_y := 0 else
25805: LD_ADDR_VAR 0 8
25809: PUSH
25810: LD_INT 0
25812: ST_TO_ADDR
25813: GO 25831
// min_y := y - r ;
25815: LD_ADDR_VAR 0 8
25819: PUSH
25820: LD_VAR 0 3
25824: PUSH
25825: LD_VAR 0 4
25829: MINUS
25830: ST_TO_ADDR
// max_x := x + r ;
25831: LD_ADDR_VAR 0 9
25835: PUSH
25836: LD_VAR 0 2
25840: PUSH
25841: LD_VAR 0 4
25845: PLUS
25846: ST_TO_ADDR
// max_y := y + r ;
25847: LD_ADDR_VAR 0 10
25851: PUSH
25852: LD_VAR 0 3
25856: PUSH
25857: LD_VAR 0 4
25861: PLUS
25862: ST_TO_ADDR
// for _x = min_x to max_x do
25863: LD_ADDR_VAR 0 11
25867: PUSH
25868: DOUBLE
25869: LD_VAR 0 7
25873: DEC
25874: ST_TO_ADDR
25875: LD_VAR 0 9
25879: PUSH
25880: FOR_TO
25881: IFFALSE 25998
// for _y = min_y to max_y do
25883: LD_ADDR_VAR 0 12
25887: PUSH
25888: DOUBLE
25889: LD_VAR 0 8
25893: DEC
25894: ST_TO_ADDR
25895: LD_VAR 0 10
25899: PUSH
25900: FOR_TO
25901: IFFALSE 25994
// begin if not ValidHex ( _x , _y ) then
25903: LD_VAR 0 11
25907: PPUSH
25908: LD_VAR 0 12
25912: PPUSH
25913: CALL_OW 488
25917: NOT
25918: IFFALSE 25922
// continue ;
25920: GO 25900
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25922: LD_VAR 0 11
25926: PPUSH
25927: LD_VAR 0 12
25931: PPUSH
25932: CALL_OW 351
25936: PUSH
25937: LD_VAR 0 11
25941: PPUSH
25942: LD_VAR 0 12
25946: PPUSH
25947: CALL_OW 554
25951: AND
25952: IFFALSE 25992
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25954: LD_ADDR_VAR 0 13
25958: PUSH
25959: LD_VAR 0 13
25963: PPUSH
25964: LD_VAR 0 13
25968: PUSH
25969: LD_INT 1
25971: PLUS
25972: PPUSH
25973: LD_VAR 0 11
25977: PUSH
25978: LD_VAR 0 12
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PPUSH
25987: CALL_OW 2
25991: ST_TO_ADDR
// end ;
25992: GO 25900
25994: POP
25995: POP
25996: GO 25880
25998: POP
25999: POP
// if not list then
26000: LD_VAR 0 13
26004: NOT
26005: IFFALSE 26009
// exit ;
26007: GO 26080
// for i in list do
26009: LD_ADDR_VAR 0 6
26013: PUSH
26014: LD_VAR 0 13
26018: PUSH
26019: FOR_IN
26020: IFFALSE 26078
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26022: LD_VAR 0 1
26026: PPUSH
26027: LD_STRING M
26029: PUSH
26030: LD_VAR 0 6
26034: PUSH
26035: LD_INT 1
26037: ARRAY
26038: PUSH
26039: LD_VAR 0 6
26043: PUSH
26044: LD_INT 2
26046: ARRAY
26047: PUSH
26048: LD_INT 0
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: LD_INT 0
26056: PUSH
26057: LD_INT 0
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: PUSH
26069: EMPTY
26070: LIST
26071: PPUSH
26072: CALL_OW 447
26076: GO 26019
26078: POP
26079: POP
// end ;
26080: LD_VAR 0 5
26084: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26085: LD_EXP 113
26089: NOT
26090: IFFALSE 26140
26092: GO 26094
26094: DISABLE
// begin initHack := true ;
26095: LD_ADDR_EXP 113
26099: PUSH
26100: LD_INT 1
26102: ST_TO_ADDR
// hackTanks := [ ] ;
26103: LD_ADDR_EXP 114
26107: PUSH
26108: EMPTY
26109: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26110: LD_ADDR_EXP 115
26114: PUSH
26115: EMPTY
26116: ST_TO_ADDR
// hackLimit := 3 ;
26117: LD_ADDR_EXP 116
26121: PUSH
26122: LD_INT 3
26124: ST_TO_ADDR
// hackDist := 12 ;
26125: LD_ADDR_EXP 117
26129: PUSH
26130: LD_INT 12
26132: ST_TO_ADDR
// hackCounter := [ ] ;
26133: LD_ADDR_EXP 118
26137: PUSH
26138: EMPTY
26139: ST_TO_ADDR
// end ;
26140: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26141: LD_EXP 113
26145: PUSH
26146: LD_INT 34
26148: PUSH
26149: LD_EXP 45
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PPUSH
26158: CALL_OW 69
26162: AND
26163: IFFALSE 26418
26165: GO 26167
26167: DISABLE
26168: LD_INT 0
26170: PPUSH
26171: PPUSH
// begin enable ;
26172: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26173: LD_ADDR_VAR 0 1
26177: PUSH
26178: LD_INT 34
26180: PUSH
26181: LD_EXP 45
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PPUSH
26190: CALL_OW 69
26194: PUSH
26195: FOR_IN
26196: IFFALSE 26416
// begin if not i in hackTanks then
26198: LD_VAR 0 1
26202: PUSH
26203: LD_EXP 114
26207: IN
26208: NOT
26209: IFFALSE 26292
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26211: LD_ADDR_EXP 114
26215: PUSH
26216: LD_EXP 114
26220: PPUSH
26221: LD_EXP 114
26225: PUSH
26226: LD_INT 1
26228: PLUS
26229: PPUSH
26230: LD_VAR 0 1
26234: PPUSH
26235: CALL_OW 1
26239: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26240: LD_ADDR_EXP 115
26244: PUSH
26245: LD_EXP 115
26249: PPUSH
26250: LD_EXP 115
26254: PUSH
26255: LD_INT 1
26257: PLUS
26258: PPUSH
26259: EMPTY
26260: PPUSH
26261: CALL_OW 1
26265: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26266: LD_ADDR_EXP 118
26270: PUSH
26271: LD_EXP 118
26275: PPUSH
26276: LD_EXP 118
26280: PUSH
26281: LD_INT 1
26283: PLUS
26284: PPUSH
26285: EMPTY
26286: PPUSH
26287: CALL_OW 1
26291: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26292: LD_VAR 0 1
26296: PPUSH
26297: CALL_OW 302
26301: NOT
26302: IFFALSE 26315
// begin HackUnlinkAll ( i ) ;
26304: LD_VAR 0 1
26308: PPUSH
26309: CALL 26421 0 1
// continue ;
26313: GO 26195
// end ; HackCheckCapturedStatus ( i ) ;
26315: LD_VAR 0 1
26319: PPUSH
26320: CALL 26864 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26324: LD_ADDR_VAR 0 2
26328: PUSH
26329: LD_INT 81
26331: PUSH
26332: LD_VAR 0 1
26336: PPUSH
26337: CALL_OW 255
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 33
26348: PUSH
26349: LD_INT 3
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 91
26358: PUSH
26359: LD_VAR 0 1
26363: PUSH
26364: LD_EXP 117
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 50
26376: PUSH
26377: EMPTY
26378: LIST
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: PPUSH
26386: CALL_OW 69
26390: ST_TO_ADDR
// if not tmp then
26391: LD_VAR 0 2
26395: NOT
26396: IFFALSE 26400
// continue ;
26398: GO 26195
// HackLink ( i , tmp ) ;
26400: LD_VAR 0 1
26404: PPUSH
26405: LD_VAR 0 2
26409: PPUSH
26410: CALL 26557 0 2
// end ;
26414: GO 26195
26416: POP
26417: POP
// end ;
26418: PPOPN 2
26420: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26421: LD_INT 0
26423: PPUSH
26424: PPUSH
26425: PPUSH
// if not hack in hackTanks then
26426: LD_VAR 0 1
26430: PUSH
26431: LD_EXP 114
26435: IN
26436: NOT
26437: IFFALSE 26441
// exit ;
26439: GO 26552
// index := GetElementIndex ( hackTanks , hack ) ;
26441: LD_ADDR_VAR 0 4
26445: PUSH
26446: LD_EXP 114
26450: PPUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: CALL 31972 0 2
26460: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26461: LD_EXP 115
26465: PUSH
26466: LD_VAR 0 4
26470: ARRAY
26471: IFFALSE 26552
// begin for i in hackTanksCaptured [ index ] do
26473: LD_ADDR_VAR 0 3
26477: PUSH
26478: LD_EXP 115
26482: PUSH
26483: LD_VAR 0 4
26487: ARRAY
26488: PUSH
26489: FOR_IN
26490: IFFALSE 26516
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26492: LD_VAR 0 3
26496: PUSH
26497: LD_INT 1
26499: ARRAY
26500: PPUSH
26501: LD_VAR 0 3
26505: PUSH
26506: LD_INT 2
26508: ARRAY
26509: PPUSH
26510: CALL_OW 235
26514: GO 26489
26516: POP
26517: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26518: LD_ADDR_EXP 115
26522: PUSH
26523: LD_EXP 115
26527: PPUSH
26528: LD_VAR 0 4
26532: PPUSH
26533: EMPTY
26534: PPUSH
26535: CALL_OW 1
26539: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26540: LD_VAR 0 1
26544: PPUSH
26545: LD_INT 0
26547: PPUSH
26548: CALL_OW 505
// end ; end ;
26552: LD_VAR 0 2
26556: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26557: LD_INT 0
26559: PPUSH
26560: PPUSH
26561: PPUSH
// if not hack in hackTanks or not vehicles then
26562: LD_VAR 0 1
26566: PUSH
26567: LD_EXP 114
26571: IN
26572: NOT
26573: PUSH
26574: LD_VAR 0 2
26578: NOT
26579: OR
26580: IFFALSE 26584
// exit ;
26582: GO 26859
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26584: LD_ADDR_VAR 0 2
26588: PUSH
26589: LD_VAR 0 1
26593: PPUSH
26594: LD_VAR 0 2
26598: PPUSH
26599: LD_INT 1
26601: PPUSH
26602: LD_INT 1
26604: PPUSH
26605: CALL 32622 0 4
26609: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26610: LD_ADDR_VAR 0 5
26614: PUSH
26615: LD_EXP 114
26619: PPUSH
26620: LD_VAR 0 1
26624: PPUSH
26625: CALL 31972 0 2
26629: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26630: LD_EXP 115
26634: PUSH
26635: LD_VAR 0 5
26639: ARRAY
26640: PUSH
26641: LD_EXP 116
26645: LESS
26646: IFFALSE 26835
// begin for i := 1 to vehicles do
26648: LD_ADDR_VAR 0 4
26652: PUSH
26653: DOUBLE
26654: LD_INT 1
26656: DEC
26657: ST_TO_ADDR
26658: LD_VAR 0 2
26662: PUSH
26663: FOR_TO
26664: IFFALSE 26833
// begin if hackTanksCaptured [ index ] = hackLimit then
26666: LD_EXP 115
26670: PUSH
26671: LD_VAR 0 5
26675: ARRAY
26676: PUSH
26677: LD_EXP 116
26681: EQUAL
26682: IFFALSE 26686
// break ;
26684: GO 26833
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26686: LD_ADDR_EXP 118
26690: PUSH
26691: LD_EXP 118
26695: PPUSH
26696: LD_VAR 0 5
26700: PPUSH
26701: LD_EXP 118
26705: PUSH
26706: LD_VAR 0 5
26710: ARRAY
26711: PUSH
26712: LD_INT 1
26714: PLUS
26715: PPUSH
26716: CALL_OW 1
26720: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26721: LD_ADDR_EXP 115
26725: PUSH
26726: LD_EXP 115
26730: PPUSH
26731: LD_VAR 0 5
26735: PUSH
26736: LD_EXP 115
26740: PUSH
26741: LD_VAR 0 5
26745: ARRAY
26746: PUSH
26747: LD_INT 1
26749: PLUS
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PPUSH
26755: LD_VAR 0 2
26759: PUSH
26760: LD_VAR 0 4
26764: ARRAY
26765: PUSH
26766: LD_VAR 0 2
26770: PUSH
26771: LD_VAR 0 4
26775: ARRAY
26776: PPUSH
26777: CALL_OW 255
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PPUSH
26786: CALL 32187 0 3
26790: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26791: LD_VAR 0 2
26795: PUSH
26796: LD_VAR 0 4
26800: ARRAY
26801: PPUSH
26802: LD_VAR 0 1
26806: PPUSH
26807: CALL_OW 255
26811: PPUSH
26812: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26816: LD_VAR 0 2
26820: PUSH
26821: LD_VAR 0 4
26825: ARRAY
26826: PPUSH
26827: CALL_OW 141
// end ;
26831: GO 26663
26833: POP
26834: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26835: LD_VAR 0 1
26839: PPUSH
26840: LD_EXP 115
26844: PUSH
26845: LD_VAR 0 5
26849: ARRAY
26850: PUSH
26851: LD_INT 0
26853: PLUS
26854: PPUSH
26855: CALL_OW 505
// end ;
26859: LD_VAR 0 3
26863: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26864: LD_INT 0
26866: PPUSH
26867: PPUSH
26868: PPUSH
26869: PPUSH
// if not hack in hackTanks then
26870: LD_VAR 0 1
26874: PUSH
26875: LD_EXP 114
26879: IN
26880: NOT
26881: IFFALSE 26885
// exit ;
26883: GO 27125
// index := GetElementIndex ( hackTanks , hack ) ;
26885: LD_ADDR_VAR 0 4
26889: PUSH
26890: LD_EXP 114
26894: PPUSH
26895: LD_VAR 0 1
26899: PPUSH
26900: CALL 31972 0 2
26904: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26905: LD_ADDR_VAR 0 3
26909: PUSH
26910: DOUBLE
26911: LD_EXP 115
26915: PUSH
26916: LD_VAR 0 4
26920: ARRAY
26921: INC
26922: ST_TO_ADDR
26923: LD_INT 1
26925: PUSH
26926: FOR_DOWNTO
26927: IFFALSE 27099
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26929: LD_ADDR_VAR 0 5
26933: PUSH
26934: LD_EXP 115
26938: PUSH
26939: LD_VAR 0 4
26943: ARRAY
26944: PUSH
26945: LD_VAR 0 3
26949: ARRAY
26950: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26951: LD_VAR 0 5
26955: PUSH
26956: LD_INT 1
26958: ARRAY
26959: PPUSH
26960: CALL_OW 302
26964: NOT
26965: PUSH
26966: LD_VAR 0 5
26970: PUSH
26971: LD_INT 1
26973: ARRAY
26974: PPUSH
26975: CALL_OW 255
26979: PUSH
26980: LD_VAR 0 1
26984: PPUSH
26985: CALL_OW 255
26989: NONEQUAL
26990: OR
26991: IFFALSE 27097
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26993: LD_VAR 0 5
26997: PUSH
26998: LD_INT 1
27000: ARRAY
27001: PPUSH
27002: CALL_OW 305
27006: PUSH
27007: LD_VAR 0 5
27011: PUSH
27012: LD_INT 1
27014: ARRAY
27015: PPUSH
27016: CALL_OW 255
27020: PUSH
27021: LD_VAR 0 1
27025: PPUSH
27026: CALL_OW 255
27030: EQUAL
27031: AND
27032: IFFALSE 27056
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27034: LD_VAR 0 5
27038: PUSH
27039: LD_INT 1
27041: ARRAY
27042: PPUSH
27043: LD_VAR 0 5
27047: PUSH
27048: LD_INT 2
27050: ARRAY
27051: PPUSH
27052: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27056: LD_ADDR_EXP 115
27060: PUSH
27061: LD_EXP 115
27065: PPUSH
27066: LD_VAR 0 4
27070: PPUSH
27071: LD_EXP 115
27075: PUSH
27076: LD_VAR 0 4
27080: ARRAY
27081: PPUSH
27082: LD_VAR 0 3
27086: PPUSH
27087: CALL_OW 3
27091: PPUSH
27092: CALL_OW 1
27096: ST_TO_ADDR
// end ; end ;
27097: GO 26926
27099: POP
27100: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27101: LD_VAR 0 1
27105: PPUSH
27106: LD_EXP 115
27110: PUSH
27111: LD_VAR 0 4
27115: ARRAY
27116: PUSH
27117: LD_INT 0
27119: PLUS
27120: PPUSH
27121: CALL_OW 505
// end ;
27125: LD_VAR 0 2
27129: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27130: LD_INT 0
27132: PPUSH
27133: PPUSH
27134: PPUSH
27135: PPUSH
// if not hack in hackTanks then
27136: LD_VAR 0 1
27140: PUSH
27141: LD_EXP 114
27145: IN
27146: NOT
27147: IFFALSE 27151
// exit ;
27149: GO 27236
// index := GetElementIndex ( hackTanks , hack ) ;
27151: LD_ADDR_VAR 0 5
27155: PUSH
27156: LD_EXP 114
27160: PPUSH
27161: LD_VAR 0 1
27165: PPUSH
27166: CALL 31972 0 2
27170: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27171: LD_ADDR_VAR 0 4
27175: PUSH
27176: DOUBLE
27177: LD_INT 1
27179: DEC
27180: ST_TO_ADDR
27181: LD_EXP 115
27185: PUSH
27186: LD_VAR 0 5
27190: ARRAY
27191: PUSH
27192: FOR_TO
27193: IFFALSE 27234
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27195: LD_EXP 115
27199: PUSH
27200: LD_VAR 0 5
27204: ARRAY
27205: PUSH
27206: LD_VAR 0 4
27210: ARRAY
27211: PUSH
27212: LD_INT 1
27214: ARRAY
27215: PUSH
27216: LD_VAR 0 2
27220: EQUAL
27221: IFFALSE 27232
// KillUnit ( vehicle ) ;
27223: LD_VAR 0 2
27227: PPUSH
27228: CALL_OW 66
27232: GO 27192
27234: POP
27235: POP
// end ; end_of_file
27236: LD_VAR 0 3
27240: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27241: LD_INT 0
27243: PPUSH
27244: PPUSH
// if exist_mode then
27245: LD_VAR 0 2
27249: IFFALSE 27274
// unit := CreateCharacter ( prefix & ident ) else
27251: LD_ADDR_VAR 0 5
27255: PUSH
27256: LD_VAR 0 3
27260: PUSH
27261: LD_VAR 0 1
27265: STR
27266: PPUSH
27267: CALL_OW 34
27271: ST_TO_ADDR
27272: GO 27289
// unit := NewCharacter ( ident ) ;
27274: LD_ADDR_VAR 0 5
27278: PUSH
27279: LD_VAR 0 1
27283: PPUSH
27284: CALL_OW 25
27288: ST_TO_ADDR
// result := unit ;
27289: LD_ADDR_VAR 0 4
27293: PUSH
27294: LD_VAR 0 5
27298: ST_TO_ADDR
// end ;
27299: LD_VAR 0 4
27303: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27304: LD_INT 0
27306: PPUSH
27307: PPUSH
// if not side or not nation then
27308: LD_VAR 0 1
27312: NOT
27313: PUSH
27314: LD_VAR 0 2
27318: NOT
27319: OR
27320: IFFALSE 27324
// exit ;
27322: GO 28088
// case nation of nation_american :
27324: LD_VAR 0 2
27328: PUSH
27329: LD_INT 1
27331: DOUBLE
27332: EQUAL
27333: IFTRUE 27337
27335: GO 27551
27337: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27338: LD_ADDR_VAR 0 4
27342: PUSH
27343: LD_INT 35
27345: PUSH
27346: LD_INT 45
27348: PUSH
27349: LD_INT 46
27351: PUSH
27352: LD_INT 47
27354: PUSH
27355: LD_INT 82
27357: PUSH
27358: LD_INT 83
27360: PUSH
27361: LD_INT 84
27363: PUSH
27364: LD_INT 85
27366: PUSH
27367: LD_INT 86
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: LD_INT 6
27378: PUSH
27379: LD_INT 15
27381: PUSH
27382: LD_INT 16
27384: PUSH
27385: LD_INT 7
27387: PUSH
27388: LD_INT 12
27390: PUSH
27391: LD_INT 13
27393: PUSH
27394: LD_INT 10
27396: PUSH
27397: LD_INT 14
27399: PUSH
27400: LD_INT 20
27402: PUSH
27403: LD_INT 21
27405: PUSH
27406: LD_INT 22
27408: PUSH
27409: LD_INT 25
27411: PUSH
27412: LD_INT 32
27414: PUSH
27415: LD_INT 27
27417: PUSH
27418: LD_INT 36
27420: PUSH
27421: LD_INT 69
27423: PUSH
27424: LD_INT 39
27426: PUSH
27427: LD_INT 34
27429: PUSH
27430: LD_INT 40
27432: PUSH
27433: LD_INT 48
27435: PUSH
27436: LD_INT 49
27438: PUSH
27439: LD_INT 50
27441: PUSH
27442: LD_INT 51
27444: PUSH
27445: LD_INT 52
27447: PUSH
27448: LD_INT 53
27450: PUSH
27451: LD_INT 54
27453: PUSH
27454: LD_INT 55
27456: PUSH
27457: LD_INT 56
27459: PUSH
27460: LD_INT 57
27462: PUSH
27463: LD_INT 58
27465: PUSH
27466: LD_INT 59
27468: PUSH
27469: LD_INT 60
27471: PUSH
27472: LD_INT 61
27474: PUSH
27475: LD_INT 62
27477: PUSH
27478: LD_INT 80
27480: PUSH
27481: LD_INT 82
27483: PUSH
27484: LD_INT 83
27486: PUSH
27487: LD_INT 84
27489: PUSH
27490: LD_INT 85
27492: PUSH
27493: LD_INT 86
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: ST_TO_ADDR
27549: GO 28012
27551: LD_INT 2
27553: DOUBLE
27554: EQUAL
27555: IFTRUE 27559
27557: GO 27781
27559: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27560: LD_ADDR_VAR 0 4
27564: PUSH
27565: LD_INT 35
27567: PUSH
27568: LD_INT 45
27570: PUSH
27571: LD_INT 46
27573: PUSH
27574: LD_INT 47
27576: PUSH
27577: LD_INT 82
27579: PUSH
27580: LD_INT 83
27582: PUSH
27583: LD_INT 84
27585: PUSH
27586: LD_INT 85
27588: PUSH
27589: LD_INT 87
27591: PUSH
27592: LD_INT 70
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: LD_INT 11
27600: PUSH
27601: LD_INT 3
27603: PUSH
27604: LD_INT 4
27606: PUSH
27607: LD_INT 5
27609: PUSH
27610: LD_INT 6
27612: PUSH
27613: LD_INT 15
27615: PUSH
27616: LD_INT 18
27618: PUSH
27619: LD_INT 7
27621: PUSH
27622: LD_INT 17
27624: PUSH
27625: LD_INT 8
27627: PUSH
27628: LD_INT 20
27630: PUSH
27631: LD_INT 21
27633: PUSH
27634: LD_INT 22
27636: PUSH
27637: LD_INT 72
27639: PUSH
27640: LD_INT 26
27642: PUSH
27643: LD_INT 69
27645: PUSH
27646: LD_INT 39
27648: PUSH
27649: LD_INT 40
27651: PUSH
27652: LD_INT 41
27654: PUSH
27655: LD_INT 42
27657: PUSH
27658: LD_INT 43
27660: PUSH
27661: LD_INT 48
27663: PUSH
27664: LD_INT 49
27666: PUSH
27667: LD_INT 50
27669: PUSH
27670: LD_INT 51
27672: PUSH
27673: LD_INT 52
27675: PUSH
27676: LD_INT 53
27678: PUSH
27679: LD_INT 54
27681: PUSH
27682: LD_INT 55
27684: PUSH
27685: LD_INT 56
27687: PUSH
27688: LD_INT 60
27690: PUSH
27691: LD_INT 61
27693: PUSH
27694: LD_INT 62
27696: PUSH
27697: LD_INT 66
27699: PUSH
27700: LD_INT 67
27702: PUSH
27703: LD_INT 68
27705: PUSH
27706: LD_INT 81
27708: PUSH
27709: LD_INT 82
27711: PUSH
27712: LD_INT 83
27714: PUSH
27715: LD_INT 84
27717: PUSH
27718: LD_INT 85
27720: PUSH
27721: LD_INT 87
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: ST_TO_ADDR
27779: GO 28012
27781: LD_INT 3
27783: DOUBLE
27784: EQUAL
27785: IFTRUE 27789
27787: GO 28011
27789: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27790: LD_ADDR_VAR 0 4
27794: PUSH
27795: LD_INT 46
27797: PUSH
27798: LD_INT 47
27800: PUSH
27801: LD_INT 1
27803: PUSH
27804: LD_INT 2
27806: PUSH
27807: LD_INT 82
27809: PUSH
27810: LD_INT 83
27812: PUSH
27813: LD_INT 84
27815: PUSH
27816: LD_INT 85
27818: PUSH
27819: LD_INT 86
27821: PUSH
27822: LD_INT 11
27824: PUSH
27825: LD_INT 9
27827: PUSH
27828: LD_INT 20
27830: PUSH
27831: LD_INT 19
27833: PUSH
27834: LD_INT 21
27836: PUSH
27837: LD_INT 24
27839: PUSH
27840: LD_INT 22
27842: PUSH
27843: LD_INT 25
27845: PUSH
27846: LD_INT 28
27848: PUSH
27849: LD_INT 29
27851: PUSH
27852: LD_INT 30
27854: PUSH
27855: LD_INT 31
27857: PUSH
27858: LD_INT 37
27860: PUSH
27861: LD_INT 38
27863: PUSH
27864: LD_INT 32
27866: PUSH
27867: LD_INT 27
27869: PUSH
27870: LD_INT 33
27872: PUSH
27873: LD_INT 69
27875: PUSH
27876: LD_INT 39
27878: PUSH
27879: LD_INT 34
27881: PUSH
27882: LD_INT 40
27884: PUSH
27885: LD_INT 71
27887: PUSH
27888: LD_INT 23
27890: PUSH
27891: LD_INT 44
27893: PUSH
27894: LD_INT 48
27896: PUSH
27897: LD_INT 49
27899: PUSH
27900: LD_INT 50
27902: PUSH
27903: LD_INT 51
27905: PUSH
27906: LD_INT 52
27908: PUSH
27909: LD_INT 53
27911: PUSH
27912: LD_INT 54
27914: PUSH
27915: LD_INT 55
27917: PUSH
27918: LD_INT 56
27920: PUSH
27921: LD_INT 57
27923: PUSH
27924: LD_INT 58
27926: PUSH
27927: LD_INT 59
27929: PUSH
27930: LD_INT 63
27932: PUSH
27933: LD_INT 64
27935: PUSH
27936: LD_INT 65
27938: PUSH
27939: LD_INT 82
27941: PUSH
27942: LD_INT 83
27944: PUSH
27945: LD_INT 84
27947: PUSH
27948: LD_INT 85
27950: PUSH
27951: LD_INT 86
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: ST_TO_ADDR
28009: GO 28012
28011: POP
// if state > - 1 and state < 3 then
28012: LD_VAR 0 3
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: GREATER
28021: PUSH
28022: LD_VAR 0 3
28026: PUSH
28027: LD_INT 3
28029: LESS
28030: AND
28031: IFFALSE 28088
// for i in result do
28033: LD_ADDR_VAR 0 5
28037: PUSH
28038: LD_VAR 0 4
28042: PUSH
28043: FOR_IN
28044: IFFALSE 28086
// if GetTech ( i , side ) <> state then
28046: LD_VAR 0 5
28050: PPUSH
28051: LD_VAR 0 1
28055: PPUSH
28056: CALL_OW 321
28060: PUSH
28061: LD_VAR 0 3
28065: NONEQUAL
28066: IFFALSE 28084
// result := result diff i ;
28068: LD_ADDR_VAR 0 4
28072: PUSH
28073: LD_VAR 0 4
28077: PUSH
28078: LD_VAR 0 5
28082: DIFF
28083: ST_TO_ADDR
28084: GO 28043
28086: POP
28087: POP
// end ;
28088: LD_VAR 0 4
28092: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28093: LD_INT 0
28095: PPUSH
28096: PPUSH
28097: PPUSH
// result := true ;
28098: LD_ADDR_VAR 0 3
28102: PUSH
28103: LD_INT 1
28105: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28106: LD_ADDR_VAR 0 5
28110: PUSH
28111: LD_VAR 0 2
28115: PPUSH
28116: CALL_OW 480
28120: ST_TO_ADDR
// if not tmp then
28121: LD_VAR 0 5
28125: NOT
28126: IFFALSE 28130
// exit ;
28128: GO 28179
// for i in tmp do
28130: LD_ADDR_VAR 0 4
28134: PUSH
28135: LD_VAR 0 5
28139: PUSH
28140: FOR_IN
28141: IFFALSE 28177
// if GetTech ( i , side ) <> state_researched then
28143: LD_VAR 0 4
28147: PPUSH
28148: LD_VAR 0 1
28152: PPUSH
28153: CALL_OW 321
28157: PUSH
28158: LD_INT 2
28160: NONEQUAL
28161: IFFALSE 28175
// begin result := false ;
28163: LD_ADDR_VAR 0 3
28167: PUSH
28168: LD_INT 0
28170: ST_TO_ADDR
// exit ;
28171: POP
28172: POP
28173: GO 28179
// end ;
28175: GO 28140
28177: POP
28178: POP
// end ;
28179: LD_VAR 0 3
28183: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28184: LD_INT 0
28186: PPUSH
28187: PPUSH
28188: PPUSH
28189: PPUSH
28190: PPUSH
28191: PPUSH
28192: PPUSH
28193: PPUSH
28194: PPUSH
28195: PPUSH
28196: PPUSH
28197: PPUSH
28198: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28199: LD_VAR 0 1
28203: NOT
28204: PUSH
28205: LD_VAR 0 1
28209: PPUSH
28210: CALL_OW 257
28214: PUSH
28215: LD_INT 9
28217: NONEQUAL
28218: OR
28219: IFFALSE 28223
// exit ;
28221: GO 28796
// side := GetSide ( unit ) ;
28223: LD_ADDR_VAR 0 9
28227: PUSH
28228: LD_VAR 0 1
28232: PPUSH
28233: CALL_OW 255
28237: ST_TO_ADDR
// tech_space := tech_spacanom ;
28238: LD_ADDR_VAR 0 12
28242: PUSH
28243: LD_INT 29
28245: ST_TO_ADDR
// tech_time := tech_taurad ;
28246: LD_ADDR_VAR 0 13
28250: PUSH
28251: LD_INT 28
28253: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28254: LD_ADDR_VAR 0 11
28258: PUSH
28259: LD_VAR 0 1
28263: PPUSH
28264: CALL_OW 310
28268: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28269: LD_VAR 0 11
28273: PPUSH
28274: CALL_OW 247
28278: PUSH
28279: LD_INT 2
28281: EQUAL
28282: IFFALSE 28286
// exit ;
28284: GO 28796
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28286: LD_ADDR_VAR 0 8
28290: PUSH
28291: LD_INT 81
28293: PUSH
28294: LD_VAR 0 9
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 3
28305: PUSH
28306: LD_INT 21
28308: PUSH
28309: LD_INT 3
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PPUSH
28324: CALL_OW 69
28328: ST_TO_ADDR
// if not tmp then
28329: LD_VAR 0 8
28333: NOT
28334: IFFALSE 28338
// exit ;
28336: GO 28796
// if in_unit then
28338: LD_VAR 0 11
28342: IFFALSE 28366
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28344: LD_ADDR_VAR 0 10
28348: PUSH
28349: LD_VAR 0 8
28353: PPUSH
28354: LD_VAR 0 11
28358: PPUSH
28359: CALL_OW 74
28363: ST_TO_ADDR
28364: GO 28386
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28366: LD_ADDR_VAR 0 10
28370: PUSH
28371: LD_VAR 0 8
28375: PPUSH
28376: LD_VAR 0 1
28380: PPUSH
28381: CALL_OW 74
28385: ST_TO_ADDR
// if not enemy then
28386: LD_VAR 0 10
28390: NOT
28391: IFFALSE 28395
// exit ;
28393: GO 28796
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28395: LD_VAR 0 11
28399: PUSH
28400: LD_VAR 0 11
28404: PPUSH
28405: LD_VAR 0 10
28409: PPUSH
28410: CALL_OW 296
28414: PUSH
28415: LD_INT 13
28417: GREATER
28418: AND
28419: PUSH
28420: LD_VAR 0 1
28424: PPUSH
28425: LD_VAR 0 10
28429: PPUSH
28430: CALL_OW 296
28434: PUSH
28435: LD_INT 12
28437: GREATER
28438: OR
28439: IFFALSE 28443
// exit ;
28441: GO 28796
// missile := [ 1 ] ;
28443: LD_ADDR_VAR 0 14
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: EMPTY
28452: LIST
28453: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28454: LD_VAR 0 9
28458: PPUSH
28459: LD_VAR 0 12
28463: PPUSH
28464: CALL_OW 325
28468: IFFALSE 28497
// missile := Insert ( missile , missile + 1 , 2 ) ;
28470: LD_ADDR_VAR 0 14
28474: PUSH
28475: LD_VAR 0 14
28479: PPUSH
28480: LD_VAR 0 14
28484: PUSH
28485: LD_INT 1
28487: PLUS
28488: PPUSH
28489: LD_INT 2
28491: PPUSH
28492: CALL_OW 2
28496: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28497: LD_VAR 0 9
28501: PPUSH
28502: LD_VAR 0 13
28506: PPUSH
28507: CALL_OW 325
28511: PUSH
28512: LD_VAR 0 10
28516: PPUSH
28517: CALL_OW 255
28521: PPUSH
28522: LD_VAR 0 13
28526: PPUSH
28527: CALL_OW 325
28531: NOT
28532: AND
28533: IFFALSE 28562
// missile := Insert ( missile , missile + 1 , 3 ) ;
28535: LD_ADDR_VAR 0 14
28539: PUSH
28540: LD_VAR 0 14
28544: PPUSH
28545: LD_VAR 0 14
28549: PUSH
28550: LD_INT 1
28552: PLUS
28553: PPUSH
28554: LD_INT 3
28556: PPUSH
28557: CALL_OW 2
28561: ST_TO_ADDR
// if missile < 2 then
28562: LD_VAR 0 14
28566: PUSH
28567: LD_INT 2
28569: LESS
28570: IFFALSE 28574
// exit ;
28572: GO 28796
// x := GetX ( enemy ) ;
28574: LD_ADDR_VAR 0 4
28578: PUSH
28579: LD_VAR 0 10
28583: PPUSH
28584: CALL_OW 250
28588: ST_TO_ADDR
// y := GetY ( enemy ) ;
28589: LD_ADDR_VAR 0 5
28593: PUSH
28594: LD_VAR 0 10
28598: PPUSH
28599: CALL_OW 251
28603: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28604: LD_ADDR_VAR 0 6
28608: PUSH
28609: LD_VAR 0 4
28613: PUSH
28614: LD_INT 1
28616: NEG
28617: PPUSH
28618: LD_INT 1
28620: PPUSH
28621: CALL_OW 12
28625: PLUS
28626: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28627: LD_ADDR_VAR 0 7
28631: PUSH
28632: LD_VAR 0 5
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PPUSH
28641: LD_INT 1
28643: PPUSH
28644: CALL_OW 12
28648: PLUS
28649: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28650: LD_VAR 0 6
28654: PPUSH
28655: LD_VAR 0 7
28659: PPUSH
28660: CALL_OW 488
28664: NOT
28665: IFFALSE 28687
// begin _x := x ;
28667: LD_ADDR_VAR 0 6
28671: PUSH
28672: LD_VAR 0 4
28676: ST_TO_ADDR
// _y := y ;
28677: LD_ADDR_VAR 0 7
28681: PUSH
28682: LD_VAR 0 5
28686: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28687: LD_ADDR_VAR 0 3
28691: PUSH
28692: LD_INT 1
28694: PPUSH
28695: LD_VAR 0 14
28699: PPUSH
28700: CALL_OW 12
28704: ST_TO_ADDR
// case i of 1 :
28705: LD_VAR 0 3
28709: PUSH
28710: LD_INT 1
28712: DOUBLE
28713: EQUAL
28714: IFTRUE 28718
28716: GO 28735
28718: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28719: LD_VAR 0 1
28723: PPUSH
28724: LD_VAR 0 10
28728: PPUSH
28729: CALL_OW 115
28733: GO 28796
28735: LD_INT 2
28737: DOUBLE
28738: EQUAL
28739: IFTRUE 28743
28741: GO 28765
28743: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28744: LD_VAR 0 1
28748: PPUSH
28749: LD_VAR 0 6
28753: PPUSH
28754: LD_VAR 0 7
28758: PPUSH
28759: CALL_OW 153
28763: GO 28796
28765: LD_INT 3
28767: DOUBLE
28768: EQUAL
28769: IFTRUE 28773
28771: GO 28795
28773: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28774: LD_VAR 0 1
28778: PPUSH
28779: LD_VAR 0 6
28783: PPUSH
28784: LD_VAR 0 7
28788: PPUSH
28789: CALL_OW 154
28793: GO 28796
28795: POP
// end ;
28796: LD_VAR 0 2
28800: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28801: LD_INT 0
28803: PPUSH
28804: PPUSH
28805: PPUSH
28806: PPUSH
28807: PPUSH
28808: PPUSH
// if not unit or not building then
28809: LD_VAR 0 1
28813: NOT
28814: PUSH
28815: LD_VAR 0 2
28819: NOT
28820: OR
28821: IFFALSE 28825
// exit ;
28823: GO 28983
// x := GetX ( building ) ;
28825: LD_ADDR_VAR 0 5
28829: PUSH
28830: LD_VAR 0 2
28834: PPUSH
28835: CALL_OW 250
28839: ST_TO_ADDR
// y := GetY ( building ) ;
28840: LD_ADDR_VAR 0 6
28844: PUSH
28845: LD_VAR 0 2
28849: PPUSH
28850: CALL_OW 251
28854: ST_TO_ADDR
// for i = 0 to 5 do
28855: LD_ADDR_VAR 0 4
28859: PUSH
28860: DOUBLE
28861: LD_INT 0
28863: DEC
28864: ST_TO_ADDR
28865: LD_INT 5
28867: PUSH
28868: FOR_TO
28869: IFFALSE 28981
// begin _x := ShiftX ( x , i , 3 ) ;
28871: LD_ADDR_VAR 0 7
28875: PUSH
28876: LD_VAR 0 5
28880: PPUSH
28881: LD_VAR 0 4
28885: PPUSH
28886: LD_INT 3
28888: PPUSH
28889: CALL_OW 272
28893: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28894: LD_ADDR_VAR 0 8
28898: PUSH
28899: LD_VAR 0 6
28903: PPUSH
28904: LD_VAR 0 4
28908: PPUSH
28909: LD_INT 3
28911: PPUSH
28912: CALL_OW 273
28916: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28917: LD_VAR 0 7
28921: PPUSH
28922: LD_VAR 0 8
28926: PPUSH
28927: CALL_OW 488
28931: NOT
28932: IFFALSE 28936
// continue ;
28934: GO 28868
// if HexInfo ( _x , _y ) = 0 then
28936: LD_VAR 0 7
28940: PPUSH
28941: LD_VAR 0 8
28945: PPUSH
28946: CALL_OW 428
28950: PUSH
28951: LD_INT 0
28953: EQUAL
28954: IFFALSE 28979
// begin ComMoveXY ( unit , _x , _y ) ;
28956: LD_VAR 0 1
28960: PPUSH
28961: LD_VAR 0 7
28965: PPUSH
28966: LD_VAR 0 8
28970: PPUSH
28971: CALL_OW 111
// exit ;
28975: POP
28976: POP
28977: GO 28983
// end ; end ;
28979: GO 28868
28981: POP
28982: POP
// end ;
28983: LD_VAR 0 3
28987: RET
// export function ScanBase ( side , base_area ) ; begin
28988: LD_INT 0
28990: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28991: LD_ADDR_VAR 0 3
28995: PUSH
28996: LD_VAR 0 2
29000: PPUSH
29001: LD_INT 81
29003: PUSH
29004: LD_VAR 0 1
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PPUSH
29013: CALL_OW 70
29017: ST_TO_ADDR
// end ;
29018: LD_VAR 0 3
29022: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29023: LD_INT 0
29025: PPUSH
29026: PPUSH
29027: PPUSH
29028: PPUSH
// result := false ;
29029: LD_ADDR_VAR 0 2
29033: PUSH
29034: LD_INT 0
29036: ST_TO_ADDR
// side := GetSide ( unit ) ;
29037: LD_ADDR_VAR 0 3
29041: PUSH
29042: LD_VAR 0 1
29046: PPUSH
29047: CALL_OW 255
29051: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29052: LD_ADDR_VAR 0 4
29056: PUSH
29057: LD_VAR 0 1
29061: PPUSH
29062: CALL_OW 248
29066: ST_TO_ADDR
// case nat of 1 :
29067: LD_VAR 0 4
29071: PUSH
29072: LD_INT 1
29074: DOUBLE
29075: EQUAL
29076: IFTRUE 29080
29078: GO 29091
29080: POP
// tech := tech_lassight ; 2 :
29081: LD_ADDR_VAR 0 5
29085: PUSH
29086: LD_INT 12
29088: ST_TO_ADDR
29089: GO 29130
29091: LD_INT 2
29093: DOUBLE
29094: EQUAL
29095: IFTRUE 29099
29097: GO 29110
29099: POP
// tech := tech_mortar ; 3 :
29100: LD_ADDR_VAR 0 5
29104: PUSH
29105: LD_INT 41
29107: ST_TO_ADDR
29108: GO 29130
29110: LD_INT 3
29112: DOUBLE
29113: EQUAL
29114: IFTRUE 29118
29116: GO 29129
29118: POP
// tech := tech_bazooka ; end ;
29119: LD_ADDR_VAR 0 5
29123: PUSH
29124: LD_INT 44
29126: ST_TO_ADDR
29127: GO 29130
29129: POP
// if Researched ( side , tech ) then
29130: LD_VAR 0 3
29134: PPUSH
29135: LD_VAR 0 5
29139: PPUSH
29140: CALL_OW 325
29144: IFFALSE 29171
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29146: LD_ADDR_VAR 0 2
29150: PUSH
29151: LD_INT 5
29153: PUSH
29154: LD_INT 8
29156: PUSH
29157: LD_INT 9
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: LIST
29164: PUSH
29165: LD_VAR 0 4
29169: ARRAY
29170: ST_TO_ADDR
// end ;
29171: LD_VAR 0 2
29175: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29176: LD_INT 0
29178: PPUSH
29179: PPUSH
29180: PPUSH
// if not mines then
29181: LD_VAR 0 2
29185: NOT
29186: IFFALSE 29190
// exit ;
29188: GO 29334
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29190: LD_ADDR_VAR 0 5
29194: PUSH
29195: LD_INT 81
29197: PUSH
29198: LD_VAR 0 1
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 3
29209: PUSH
29210: LD_INT 21
29212: PUSH
29213: LD_INT 3
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PPUSH
29228: CALL_OW 69
29232: ST_TO_ADDR
// for i in mines do
29233: LD_ADDR_VAR 0 4
29237: PUSH
29238: LD_VAR 0 2
29242: PUSH
29243: FOR_IN
29244: IFFALSE 29332
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29246: LD_VAR 0 4
29250: PUSH
29251: LD_INT 1
29253: ARRAY
29254: PPUSH
29255: LD_VAR 0 4
29259: PUSH
29260: LD_INT 2
29262: ARRAY
29263: PPUSH
29264: CALL_OW 458
29268: NOT
29269: IFFALSE 29273
// continue ;
29271: GO 29243
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29273: LD_VAR 0 4
29277: PUSH
29278: LD_INT 1
29280: ARRAY
29281: PPUSH
29282: LD_VAR 0 4
29286: PUSH
29287: LD_INT 2
29289: ARRAY
29290: PPUSH
29291: CALL_OW 428
29295: PUSH
29296: LD_VAR 0 5
29300: IN
29301: IFFALSE 29330
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29303: LD_VAR 0 4
29307: PUSH
29308: LD_INT 1
29310: ARRAY
29311: PPUSH
29312: LD_VAR 0 4
29316: PUSH
29317: LD_INT 2
29319: ARRAY
29320: PPUSH
29321: LD_VAR 0 1
29325: PPUSH
29326: CALL_OW 456
// end ;
29330: GO 29243
29332: POP
29333: POP
// end ;
29334: LD_VAR 0 3
29338: RET
// export function Count ( array ) ; var i ; begin
29339: LD_INT 0
29341: PPUSH
29342: PPUSH
// result := 0 ;
29343: LD_ADDR_VAR 0 2
29347: PUSH
29348: LD_INT 0
29350: ST_TO_ADDR
// for i in array do
29351: LD_ADDR_VAR 0 3
29355: PUSH
29356: LD_VAR 0 1
29360: PUSH
29361: FOR_IN
29362: IFFALSE 29386
// if i then
29364: LD_VAR 0 3
29368: IFFALSE 29384
// result := result + 1 ;
29370: LD_ADDR_VAR 0 2
29374: PUSH
29375: LD_VAR 0 2
29379: PUSH
29380: LD_INT 1
29382: PLUS
29383: ST_TO_ADDR
29384: GO 29361
29386: POP
29387: POP
// end ;
29388: LD_VAR 0 2
29392: RET
// export function IsEmpty ( building ) ; begin
29393: LD_INT 0
29395: PPUSH
// if not building then
29396: LD_VAR 0 1
29400: NOT
29401: IFFALSE 29405
// exit ;
29403: GO 29448
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29405: LD_ADDR_VAR 0 2
29409: PUSH
29410: LD_VAR 0 1
29414: PUSH
29415: LD_INT 22
29417: PUSH
29418: LD_VAR 0 1
29422: PPUSH
29423: CALL_OW 255
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 58
29434: PUSH
29435: EMPTY
29436: LIST
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PPUSH
29442: CALL_OW 69
29446: IN
29447: ST_TO_ADDR
// end ;
29448: LD_VAR 0 2
29452: RET
// export function IsNotFull ( building ) ; begin
29453: LD_INT 0
29455: PPUSH
// if not building then
29456: LD_VAR 0 1
29460: NOT
29461: IFFALSE 29465
// exit ;
29463: GO 29484
// result := UnitsInside ( building ) < 6 ;
29465: LD_ADDR_VAR 0 2
29469: PUSH
29470: LD_VAR 0 1
29474: PPUSH
29475: CALL_OW 313
29479: PUSH
29480: LD_INT 6
29482: LESS
29483: ST_TO_ADDR
// end ;
29484: LD_VAR 0 2
29488: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29489: LD_INT 0
29491: PPUSH
29492: PPUSH
29493: PPUSH
29494: PPUSH
// tmp := [ ] ;
29495: LD_ADDR_VAR 0 3
29499: PUSH
29500: EMPTY
29501: ST_TO_ADDR
// list := [ ] ;
29502: LD_ADDR_VAR 0 5
29506: PUSH
29507: EMPTY
29508: ST_TO_ADDR
// for i = 16 to 25 do
29509: LD_ADDR_VAR 0 4
29513: PUSH
29514: DOUBLE
29515: LD_INT 16
29517: DEC
29518: ST_TO_ADDR
29519: LD_INT 25
29521: PUSH
29522: FOR_TO
29523: IFFALSE 29596
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29525: LD_ADDR_VAR 0 3
29529: PUSH
29530: LD_VAR 0 3
29534: PUSH
29535: LD_INT 22
29537: PUSH
29538: LD_VAR 0 1
29542: PPUSH
29543: CALL_OW 255
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 91
29554: PUSH
29555: LD_VAR 0 1
29559: PUSH
29560: LD_INT 6
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 30
29570: PUSH
29571: LD_VAR 0 4
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: PUSH
29585: EMPTY
29586: LIST
29587: PPUSH
29588: CALL_OW 69
29592: ADD
29593: ST_TO_ADDR
29594: GO 29522
29596: POP
29597: POP
// for i = 1 to tmp do
29598: LD_ADDR_VAR 0 4
29602: PUSH
29603: DOUBLE
29604: LD_INT 1
29606: DEC
29607: ST_TO_ADDR
29608: LD_VAR 0 3
29612: PUSH
29613: FOR_TO
29614: IFFALSE 29702
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29616: LD_ADDR_VAR 0 5
29620: PUSH
29621: LD_VAR 0 5
29625: PUSH
29626: LD_VAR 0 3
29630: PUSH
29631: LD_VAR 0 4
29635: ARRAY
29636: PPUSH
29637: CALL_OW 266
29641: PUSH
29642: LD_VAR 0 3
29646: PUSH
29647: LD_VAR 0 4
29651: ARRAY
29652: PPUSH
29653: CALL_OW 250
29657: PUSH
29658: LD_VAR 0 3
29662: PUSH
29663: LD_VAR 0 4
29667: ARRAY
29668: PPUSH
29669: CALL_OW 251
29673: PUSH
29674: LD_VAR 0 3
29678: PUSH
29679: LD_VAR 0 4
29683: ARRAY
29684: PPUSH
29685: CALL_OW 254
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: PUSH
29696: EMPTY
29697: LIST
29698: ADD
29699: ST_TO_ADDR
29700: GO 29613
29702: POP
29703: POP
// result := list ;
29704: LD_ADDR_VAR 0 2
29708: PUSH
29709: LD_VAR 0 5
29713: ST_TO_ADDR
// end ;
29714: LD_VAR 0 2
29718: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29719: LD_INT 0
29721: PPUSH
29722: PPUSH
29723: PPUSH
29724: PPUSH
29725: PPUSH
29726: PPUSH
29727: PPUSH
// if not factory then
29728: LD_VAR 0 1
29732: NOT
29733: IFFALSE 29737
// exit ;
29735: GO 30330
// if control = control_apeman then
29737: LD_VAR 0 4
29741: PUSH
29742: LD_INT 5
29744: EQUAL
29745: IFFALSE 29854
// begin tmp := UnitsInside ( factory ) ;
29747: LD_ADDR_VAR 0 8
29751: PUSH
29752: LD_VAR 0 1
29756: PPUSH
29757: CALL_OW 313
29761: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29762: LD_VAR 0 8
29766: PPUSH
29767: LD_INT 25
29769: PUSH
29770: LD_INT 12
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PPUSH
29777: CALL_OW 72
29781: NOT
29782: IFFALSE 29792
// control := control_manual ;
29784: LD_ADDR_VAR 0 4
29788: PUSH
29789: LD_INT 1
29791: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29792: LD_ADDR_VAR 0 8
29796: PUSH
29797: LD_VAR 0 1
29801: PPUSH
29802: CALL 29489 0 1
29806: ST_TO_ADDR
// if tmp then
29807: LD_VAR 0 8
29811: IFFALSE 29854
// begin for i in tmp do
29813: LD_ADDR_VAR 0 7
29817: PUSH
29818: LD_VAR 0 8
29822: PUSH
29823: FOR_IN
29824: IFFALSE 29852
// if i [ 1 ] = b_ext_radio then
29826: LD_VAR 0 7
29830: PUSH
29831: LD_INT 1
29833: ARRAY
29834: PUSH
29835: LD_INT 22
29837: EQUAL
29838: IFFALSE 29850
// begin control := control_remote ;
29840: LD_ADDR_VAR 0 4
29844: PUSH
29845: LD_INT 2
29847: ST_TO_ADDR
// break ;
29848: GO 29852
// end ;
29850: GO 29823
29852: POP
29853: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29854: LD_VAR 0 1
29858: PPUSH
29859: LD_VAR 0 2
29863: PPUSH
29864: LD_VAR 0 3
29868: PPUSH
29869: LD_VAR 0 4
29873: PPUSH
29874: LD_VAR 0 5
29878: PPUSH
29879: CALL_OW 448
29883: IFFALSE 29918
// begin result := [ chassis , engine , control , weapon ] ;
29885: LD_ADDR_VAR 0 6
29889: PUSH
29890: LD_VAR 0 2
29894: PUSH
29895: LD_VAR 0 3
29899: PUSH
29900: LD_VAR 0 4
29904: PUSH
29905: LD_VAR 0 5
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: ST_TO_ADDR
// exit ;
29916: GO 30330
// end ; _chassis := AvailableChassisList ( factory ) ;
29918: LD_ADDR_VAR 0 9
29922: PUSH
29923: LD_VAR 0 1
29927: PPUSH
29928: CALL_OW 475
29932: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29933: LD_ADDR_VAR 0 11
29937: PUSH
29938: LD_VAR 0 1
29942: PPUSH
29943: CALL_OW 476
29947: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29948: LD_ADDR_VAR 0 12
29952: PUSH
29953: LD_VAR 0 1
29957: PPUSH
29958: CALL_OW 477
29962: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29963: LD_ADDR_VAR 0 10
29967: PUSH
29968: LD_VAR 0 1
29972: PPUSH
29973: CALL_OW 478
29977: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29978: LD_VAR 0 9
29982: NOT
29983: PUSH
29984: LD_VAR 0 11
29988: NOT
29989: OR
29990: PUSH
29991: LD_VAR 0 12
29995: NOT
29996: OR
29997: PUSH
29998: LD_VAR 0 10
30002: NOT
30003: OR
30004: IFFALSE 30039
// begin result := [ chassis , engine , control , weapon ] ;
30006: LD_ADDR_VAR 0 6
30010: PUSH
30011: LD_VAR 0 2
30015: PUSH
30016: LD_VAR 0 3
30020: PUSH
30021: LD_VAR 0 4
30025: PUSH
30026: LD_VAR 0 5
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: ST_TO_ADDR
// exit ;
30037: GO 30330
// end ; if not chassis in _chassis then
30039: LD_VAR 0 2
30043: PUSH
30044: LD_VAR 0 9
30048: IN
30049: NOT
30050: IFFALSE 30076
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30052: LD_ADDR_VAR 0 2
30056: PUSH
30057: LD_VAR 0 9
30061: PUSH
30062: LD_INT 1
30064: PPUSH
30065: LD_VAR 0 9
30069: PPUSH
30070: CALL_OW 12
30074: ARRAY
30075: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30076: LD_VAR 0 2
30080: PPUSH
30081: LD_VAR 0 3
30085: PPUSH
30086: CALL 30335 0 2
30090: NOT
30091: IFFALSE 30150
// repeat engine := _engine [ 1 ] ;
30093: LD_ADDR_VAR 0 3
30097: PUSH
30098: LD_VAR 0 11
30102: PUSH
30103: LD_INT 1
30105: ARRAY
30106: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30107: LD_ADDR_VAR 0 11
30111: PUSH
30112: LD_VAR 0 11
30116: PPUSH
30117: LD_INT 1
30119: PPUSH
30120: CALL_OW 3
30124: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30125: LD_VAR 0 2
30129: PPUSH
30130: LD_VAR 0 3
30134: PPUSH
30135: CALL 30335 0 2
30139: PUSH
30140: LD_VAR 0 11
30144: PUSH
30145: EMPTY
30146: EQUAL
30147: OR
30148: IFFALSE 30093
// if not control in _control then
30150: LD_VAR 0 4
30154: PUSH
30155: LD_VAR 0 12
30159: IN
30160: NOT
30161: IFFALSE 30187
// control := _control [ rand ( 1 , _control ) ] ;
30163: LD_ADDR_VAR 0 4
30167: PUSH
30168: LD_VAR 0 12
30172: PUSH
30173: LD_INT 1
30175: PPUSH
30176: LD_VAR 0 12
30180: PPUSH
30181: CALL_OW 12
30185: ARRAY
30186: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30187: LD_VAR 0 2
30191: PPUSH
30192: LD_VAR 0 5
30196: PPUSH
30197: CALL 30555 0 2
30201: NOT
30202: IFFALSE 30261
// repeat weapon := _weapon [ 1 ] ;
30204: LD_ADDR_VAR 0 5
30208: PUSH
30209: LD_VAR 0 10
30213: PUSH
30214: LD_INT 1
30216: ARRAY
30217: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30218: LD_ADDR_VAR 0 10
30222: PUSH
30223: LD_VAR 0 10
30227: PPUSH
30228: LD_INT 1
30230: PPUSH
30231: CALL_OW 3
30235: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30236: LD_VAR 0 2
30240: PPUSH
30241: LD_VAR 0 5
30245: PPUSH
30246: CALL 30555 0 2
30250: PUSH
30251: LD_VAR 0 10
30255: PUSH
30256: EMPTY
30257: EQUAL
30258: OR
30259: IFFALSE 30204
// result := [ ] ;
30261: LD_ADDR_VAR 0 6
30265: PUSH
30266: EMPTY
30267: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30268: LD_VAR 0 1
30272: PPUSH
30273: LD_VAR 0 2
30277: PPUSH
30278: LD_VAR 0 3
30282: PPUSH
30283: LD_VAR 0 4
30287: PPUSH
30288: LD_VAR 0 5
30292: PPUSH
30293: CALL_OW 448
30297: IFFALSE 30330
// result := [ chassis , engine , control , weapon ] ;
30299: LD_ADDR_VAR 0 6
30303: PUSH
30304: LD_VAR 0 2
30308: PUSH
30309: LD_VAR 0 3
30313: PUSH
30314: LD_VAR 0 4
30318: PUSH
30319: LD_VAR 0 5
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: ST_TO_ADDR
// end ;
30330: LD_VAR 0 6
30334: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30335: LD_INT 0
30337: PPUSH
// if not chassis or not engine then
30338: LD_VAR 0 1
30342: NOT
30343: PUSH
30344: LD_VAR 0 2
30348: NOT
30349: OR
30350: IFFALSE 30354
// exit ;
30352: GO 30550
// case engine of engine_solar :
30354: LD_VAR 0 2
30358: PUSH
30359: LD_INT 2
30361: DOUBLE
30362: EQUAL
30363: IFTRUE 30367
30365: GO 30405
30367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30368: LD_ADDR_VAR 0 3
30372: PUSH
30373: LD_INT 11
30375: PUSH
30376: LD_INT 12
30378: PUSH
30379: LD_INT 13
30381: PUSH
30382: LD_INT 14
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: LD_INT 3
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: ST_TO_ADDR
30403: GO 30534
30405: LD_INT 1
30407: DOUBLE
30408: EQUAL
30409: IFTRUE 30413
30411: GO 30475
30413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30414: LD_ADDR_VAR 0 3
30418: PUSH
30419: LD_INT 11
30421: PUSH
30422: LD_INT 12
30424: PUSH
30425: LD_INT 13
30427: PUSH
30428: LD_INT 14
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: LD_INT 2
30436: PUSH
30437: LD_INT 3
30439: PUSH
30440: LD_INT 4
30442: PUSH
30443: LD_INT 5
30445: PUSH
30446: LD_INT 21
30448: PUSH
30449: LD_INT 23
30451: PUSH
30452: LD_INT 22
30454: PUSH
30455: LD_INT 24
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: ST_TO_ADDR
30473: GO 30534
30475: LD_INT 3
30477: DOUBLE
30478: EQUAL
30479: IFTRUE 30483
30481: GO 30533
30483: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30484: LD_ADDR_VAR 0 3
30488: PUSH
30489: LD_INT 13
30491: PUSH
30492: LD_INT 14
30494: PUSH
30495: LD_INT 2
30497: PUSH
30498: LD_INT 3
30500: PUSH
30501: LD_INT 4
30503: PUSH
30504: LD_INT 5
30506: PUSH
30507: LD_INT 21
30509: PUSH
30510: LD_INT 22
30512: PUSH
30513: LD_INT 23
30515: PUSH
30516: LD_INT 24
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: ST_TO_ADDR
30531: GO 30534
30533: POP
// result := ( chassis in result ) ;
30534: LD_ADDR_VAR 0 3
30538: PUSH
30539: LD_VAR 0 1
30543: PUSH
30544: LD_VAR 0 3
30548: IN
30549: ST_TO_ADDR
// end ;
30550: LD_VAR 0 3
30554: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30555: LD_INT 0
30557: PPUSH
// if not chassis or not weapon then
30558: LD_VAR 0 1
30562: NOT
30563: PUSH
30564: LD_VAR 0 2
30568: NOT
30569: OR
30570: IFFALSE 30574
// exit ;
30572: GO 31600
// case weapon of us_machine_gun :
30574: LD_VAR 0 2
30578: PUSH
30579: LD_INT 2
30581: DOUBLE
30582: EQUAL
30583: IFTRUE 30587
30585: GO 30617
30587: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30588: LD_ADDR_VAR 0 3
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: LD_INT 2
30598: PUSH
30599: LD_INT 3
30601: PUSH
30602: LD_INT 4
30604: PUSH
30605: LD_INT 5
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: ST_TO_ADDR
30615: GO 31584
30617: LD_INT 3
30619: DOUBLE
30620: EQUAL
30621: IFTRUE 30625
30623: GO 30655
30625: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30626: LD_ADDR_VAR 0 3
30630: PUSH
30631: LD_INT 1
30633: PUSH
30634: LD_INT 2
30636: PUSH
30637: LD_INT 3
30639: PUSH
30640: LD_INT 4
30642: PUSH
30643: LD_INT 5
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: ST_TO_ADDR
30653: GO 31584
30655: LD_INT 11
30657: DOUBLE
30658: EQUAL
30659: IFTRUE 30663
30661: GO 30693
30663: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30664: LD_ADDR_VAR 0 3
30668: PUSH
30669: LD_INT 1
30671: PUSH
30672: LD_INT 2
30674: PUSH
30675: LD_INT 3
30677: PUSH
30678: LD_INT 4
30680: PUSH
30681: LD_INT 5
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: ST_TO_ADDR
30691: GO 31584
30693: LD_INT 4
30695: DOUBLE
30696: EQUAL
30697: IFTRUE 30701
30699: GO 30727
30701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30702: LD_ADDR_VAR 0 3
30706: PUSH
30707: LD_INT 2
30709: PUSH
30710: LD_INT 3
30712: PUSH
30713: LD_INT 4
30715: PUSH
30716: LD_INT 5
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: ST_TO_ADDR
30725: GO 31584
30727: LD_INT 5
30729: DOUBLE
30730: EQUAL
30731: IFTRUE 30735
30733: GO 30761
30735: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30736: LD_ADDR_VAR 0 3
30740: PUSH
30741: LD_INT 2
30743: PUSH
30744: LD_INT 3
30746: PUSH
30747: LD_INT 4
30749: PUSH
30750: LD_INT 5
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: ST_TO_ADDR
30759: GO 31584
30761: LD_INT 9
30763: DOUBLE
30764: EQUAL
30765: IFTRUE 30769
30767: GO 30795
30769: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30770: LD_ADDR_VAR 0 3
30774: PUSH
30775: LD_INT 2
30777: PUSH
30778: LD_INT 3
30780: PUSH
30781: LD_INT 4
30783: PUSH
30784: LD_INT 5
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: ST_TO_ADDR
30793: GO 31584
30795: LD_INT 7
30797: DOUBLE
30798: EQUAL
30799: IFTRUE 30803
30801: GO 30829
30803: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30804: LD_ADDR_VAR 0 3
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: LD_INT 3
30814: PUSH
30815: LD_INT 4
30817: PUSH
30818: LD_INT 5
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
30827: GO 31584
30829: LD_INT 12
30831: DOUBLE
30832: EQUAL
30833: IFTRUE 30837
30835: GO 30863
30837: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30838: LD_ADDR_VAR 0 3
30842: PUSH
30843: LD_INT 2
30845: PUSH
30846: LD_INT 3
30848: PUSH
30849: LD_INT 4
30851: PUSH
30852: LD_INT 5
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
30861: GO 31584
30863: LD_INT 13
30865: DOUBLE
30866: EQUAL
30867: IFTRUE 30871
30869: GO 30897
30871: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30872: LD_ADDR_VAR 0 3
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: LD_INT 3
30882: PUSH
30883: LD_INT 4
30885: PUSH
30886: LD_INT 5
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: ST_TO_ADDR
30895: GO 31584
30897: LD_INT 14
30899: DOUBLE
30900: EQUAL
30901: IFTRUE 30905
30903: GO 30923
30905: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30906: LD_ADDR_VAR 0 3
30910: PUSH
30911: LD_INT 4
30913: PUSH
30914: LD_INT 5
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: ST_TO_ADDR
30921: GO 31584
30923: LD_INT 6
30925: DOUBLE
30926: EQUAL
30927: IFTRUE 30931
30929: GO 30949
30931: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30932: LD_ADDR_VAR 0 3
30936: PUSH
30937: LD_INT 4
30939: PUSH
30940: LD_INT 5
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: ST_TO_ADDR
30947: GO 31584
30949: LD_INT 10
30951: DOUBLE
30952: EQUAL
30953: IFTRUE 30957
30955: GO 30975
30957: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30958: LD_ADDR_VAR 0 3
30962: PUSH
30963: LD_INT 4
30965: PUSH
30966: LD_INT 5
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: ST_TO_ADDR
30973: GO 31584
30975: LD_INT 22
30977: DOUBLE
30978: EQUAL
30979: IFTRUE 30983
30981: GO 31009
30983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30984: LD_ADDR_VAR 0 3
30988: PUSH
30989: LD_INT 11
30991: PUSH
30992: LD_INT 12
30994: PUSH
30995: LD_INT 13
30997: PUSH
30998: LD_INT 14
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: ST_TO_ADDR
31007: GO 31584
31009: LD_INT 23
31011: DOUBLE
31012: EQUAL
31013: IFTRUE 31017
31015: GO 31043
31017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31018: LD_ADDR_VAR 0 3
31022: PUSH
31023: LD_INT 11
31025: PUSH
31026: LD_INT 12
31028: PUSH
31029: LD_INT 13
31031: PUSH
31032: LD_INT 14
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: ST_TO_ADDR
31041: GO 31584
31043: LD_INT 24
31045: DOUBLE
31046: EQUAL
31047: IFTRUE 31051
31049: GO 31077
31051: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31052: LD_ADDR_VAR 0 3
31056: PUSH
31057: LD_INT 11
31059: PUSH
31060: LD_INT 12
31062: PUSH
31063: LD_INT 13
31065: PUSH
31066: LD_INT 14
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: ST_TO_ADDR
31075: GO 31584
31077: LD_INT 30
31079: DOUBLE
31080: EQUAL
31081: IFTRUE 31085
31083: GO 31111
31085: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31086: LD_ADDR_VAR 0 3
31090: PUSH
31091: LD_INT 11
31093: PUSH
31094: LD_INT 12
31096: PUSH
31097: LD_INT 13
31099: PUSH
31100: LD_INT 14
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: ST_TO_ADDR
31109: GO 31584
31111: LD_INT 25
31113: DOUBLE
31114: EQUAL
31115: IFTRUE 31119
31117: GO 31137
31119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31120: LD_ADDR_VAR 0 3
31124: PUSH
31125: LD_INT 13
31127: PUSH
31128: LD_INT 14
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: ST_TO_ADDR
31135: GO 31584
31137: LD_INT 27
31139: DOUBLE
31140: EQUAL
31141: IFTRUE 31145
31143: GO 31163
31145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31146: LD_ADDR_VAR 0 3
31150: PUSH
31151: LD_INT 13
31153: PUSH
31154: LD_INT 14
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: ST_TO_ADDR
31161: GO 31584
31163: LD_INT 28
31165: DOUBLE
31166: EQUAL
31167: IFTRUE 31171
31169: GO 31189
31171: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31172: LD_ADDR_VAR 0 3
31176: PUSH
31177: LD_INT 13
31179: PUSH
31180: LD_INT 14
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: ST_TO_ADDR
31187: GO 31584
31189: LD_INT 29
31191: DOUBLE
31192: EQUAL
31193: IFTRUE 31197
31195: GO 31215
31197: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31198: LD_ADDR_VAR 0 3
31202: PUSH
31203: LD_INT 13
31205: PUSH
31206: LD_INT 14
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: ST_TO_ADDR
31213: GO 31584
31215: LD_INT 31
31217: DOUBLE
31218: EQUAL
31219: IFTRUE 31223
31221: GO 31241
31223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31224: LD_ADDR_VAR 0 3
31228: PUSH
31229: LD_INT 13
31231: PUSH
31232: LD_INT 14
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: ST_TO_ADDR
31239: GO 31584
31241: LD_INT 26
31243: DOUBLE
31244: EQUAL
31245: IFTRUE 31249
31247: GO 31267
31249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31250: LD_ADDR_VAR 0 3
31254: PUSH
31255: LD_INT 13
31257: PUSH
31258: LD_INT 14
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: ST_TO_ADDR
31265: GO 31584
31267: LD_INT 42
31269: DOUBLE
31270: EQUAL
31271: IFTRUE 31275
31273: GO 31301
31275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31276: LD_ADDR_VAR 0 3
31280: PUSH
31281: LD_INT 21
31283: PUSH
31284: LD_INT 22
31286: PUSH
31287: LD_INT 23
31289: PUSH
31290: LD_INT 24
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: ST_TO_ADDR
31299: GO 31584
31301: LD_INT 43
31303: DOUBLE
31304: EQUAL
31305: IFTRUE 31309
31307: GO 31335
31309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31310: LD_ADDR_VAR 0 3
31314: PUSH
31315: LD_INT 21
31317: PUSH
31318: LD_INT 22
31320: PUSH
31321: LD_INT 23
31323: PUSH
31324: LD_INT 24
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: ST_TO_ADDR
31333: GO 31584
31335: LD_INT 44
31337: DOUBLE
31338: EQUAL
31339: IFTRUE 31343
31341: GO 31369
31343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31344: LD_ADDR_VAR 0 3
31348: PUSH
31349: LD_INT 21
31351: PUSH
31352: LD_INT 22
31354: PUSH
31355: LD_INT 23
31357: PUSH
31358: LD_INT 24
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: ST_TO_ADDR
31367: GO 31584
31369: LD_INT 45
31371: DOUBLE
31372: EQUAL
31373: IFTRUE 31377
31375: GO 31403
31377: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31378: LD_ADDR_VAR 0 3
31382: PUSH
31383: LD_INT 21
31385: PUSH
31386: LD_INT 22
31388: PUSH
31389: LD_INT 23
31391: PUSH
31392: LD_INT 24
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: ST_TO_ADDR
31401: GO 31584
31403: LD_INT 49
31405: DOUBLE
31406: EQUAL
31407: IFTRUE 31411
31409: GO 31437
31411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31412: LD_ADDR_VAR 0 3
31416: PUSH
31417: LD_INT 21
31419: PUSH
31420: LD_INT 22
31422: PUSH
31423: LD_INT 23
31425: PUSH
31426: LD_INT 24
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: ST_TO_ADDR
31435: GO 31584
31437: LD_INT 51
31439: DOUBLE
31440: EQUAL
31441: IFTRUE 31445
31443: GO 31471
31445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31446: LD_ADDR_VAR 0 3
31450: PUSH
31451: LD_INT 21
31453: PUSH
31454: LD_INT 22
31456: PUSH
31457: LD_INT 23
31459: PUSH
31460: LD_INT 24
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: ST_TO_ADDR
31469: GO 31584
31471: LD_INT 52
31473: DOUBLE
31474: EQUAL
31475: IFTRUE 31479
31477: GO 31505
31479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31480: LD_ADDR_VAR 0 3
31484: PUSH
31485: LD_INT 21
31487: PUSH
31488: LD_INT 22
31490: PUSH
31491: LD_INT 23
31493: PUSH
31494: LD_INT 24
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: ST_TO_ADDR
31503: GO 31584
31505: LD_INT 53
31507: DOUBLE
31508: EQUAL
31509: IFTRUE 31513
31511: GO 31531
31513: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31514: LD_ADDR_VAR 0 3
31518: PUSH
31519: LD_INT 23
31521: PUSH
31522: LD_INT 24
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: ST_TO_ADDR
31529: GO 31584
31531: LD_INT 46
31533: DOUBLE
31534: EQUAL
31535: IFTRUE 31539
31537: GO 31557
31539: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31540: LD_ADDR_VAR 0 3
31544: PUSH
31545: LD_INT 23
31547: PUSH
31548: LD_INT 24
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: ST_TO_ADDR
31555: GO 31584
31557: LD_INT 47
31559: DOUBLE
31560: EQUAL
31561: IFTRUE 31565
31563: GO 31583
31565: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31566: LD_ADDR_VAR 0 3
31570: PUSH
31571: LD_INT 23
31573: PUSH
31574: LD_INT 24
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: ST_TO_ADDR
31581: GO 31584
31583: POP
// result := ( chassis in result ) ;
31584: LD_ADDR_VAR 0 3
31588: PUSH
31589: LD_VAR 0 1
31593: PUSH
31594: LD_VAR 0 3
31598: IN
31599: ST_TO_ADDR
// end ;
31600: LD_VAR 0 3
31604: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31605: LD_INT 0
31607: PPUSH
31608: PPUSH
31609: PPUSH
31610: PPUSH
31611: PPUSH
31612: PPUSH
31613: PPUSH
// result := array ;
31614: LD_ADDR_VAR 0 5
31618: PUSH
31619: LD_VAR 0 1
31623: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31624: LD_VAR 0 1
31628: NOT
31629: PUSH
31630: LD_VAR 0 2
31634: NOT
31635: OR
31636: PUSH
31637: LD_VAR 0 3
31641: NOT
31642: OR
31643: PUSH
31644: LD_VAR 0 2
31648: PUSH
31649: LD_VAR 0 1
31653: GREATER
31654: OR
31655: PUSH
31656: LD_VAR 0 3
31660: PUSH
31661: LD_VAR 0 1
31665: GREATER
31666: OR
31667: IFFALSE 31671
// exit ;
31669: GO 31967
// if direction then
31671: LD_VAR 0 4
31675: IFFALSE 31739
// begin d := 1 ;
31677: LD_ADDR_VAR 0 9
31681: PUSH
31682: LD_INT 1
31684: ST_TO_ADDR
// if i_from > i_to then
31685: LD_VAR 0 2
31689: PUSH
31690: LD_VAR 0 3
31694: GREATER
31695: IFFALSE 31721
// length := ( array - i_from ) + i_to else
31697: LD_ADDR_VAR 0 11
31701: PUSH
31702: LD_VAR 0 1
31706: PUSH
31707: LD_VAR 0 2
31711: MINUS
31712: PUSH
31713: LD_VAR 0 3
31717: PLUS
31718: ST_TO_ADDR
31719: GO 31737
// length := i_to - i_from ;
31721: LD_ADDR_VAR 0 11
31725: PUSH
31726: LD_VAR 0 3
31730: PUSH
31731: LD_VAR 0 2
31735: MINUS
31736: ST_TO_ADDR
// end else
31737: GO 31800
// begin d := - 1 ;
31739: LD_ADDR_VAR 0 9
31743: PUSH
31744: LD_INT 1
31746: NEG
31747: ST_TO_ADDR
// if i_from > i_to then
31748: LD_VAR 0 2
31752: PUSH
31753: LD_VAR 0 3
31757: GREATER
31758: IFFALSE 31778
// length := i_from - i_to else
31760: LD_ADDR_VAR 0 11
31764: PUSH
31765: LD_VAR 0 2
31769: PUSH
31770: LD_VAR 0 3
31774: MINUS
31775: ST_TO_ADDR
31776: GO 31800
// length := ( array - i_to ) + i_from ;
31778: LD_ADDR_VAR 0 11
31782: PUSH
31783: LD_VAR 0 1
31787: PUSH
31788: LD_VAR 0 3
31792: MINUS
31793: PUSH
31794: LD_VAR 0 2
31798: PLUS
31799: ST_TO_ADDR
// end ; if not length then
31800: LD_VAR 0 11
31804: NOT
31805: IFFALSE 31809
// exit ;
31807: GO 31967
// tmp := array ;
31809: LD_ADDR_VAR 0 10
31813: PUSH
31814: LD_VAR 0 1
31818: ST_TO_ADDR
// for i = 1 to length do
31819: LD_ADDR_VAR 0 6
31823: PUSH
31824: DOUBLE
31825: LD_INT 1
31827: DEC
31828: ST_TO_ADDR
31829: LD_VAR 0 11
31833: PUSH
31834: FOR_TO
31835: IFFALSE 31955
// begin for j = 1 to array do
31837: LD_ADDR_VAR 0 7
31841: PUSH
31842: DOUBLE
31843: LD_INT 1
31845: DEC
31846: ST_TO_ADDR
31847: LD_VAR 0 1
31851: PUSH
31852: FOR_TO
31853: IFFALSE 31941
// begin k := j + d ;
31855: LD_ADDR_VAR 0 8
31859: PUSH
31860: LD_VAR 0 7
31864: PUSH
31865: LD_VAR 0 9
31869: PLUS
31870: ST_TO_ADDR
// if k > array then
31871: LD_VAR 0 8
31875: PUSH
31876: LD_VAR 0 1
31880: GREATER
31881: IFFALSE 31891
// k := 1 ;
31883: LD_ADDR_VAR 0 8
31887: PUSH
31888: LD_INT 1
31890: ST_TO_ADDR
// if not k then
31891: LD_VAR 0 8
31895: NOT
31896: IFFALSE 31908
// k := array ;
31898: LD_ADDR_VAR 0 8
31902: PUSH
31903: LD_VAR 0 1
31907: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31908: LD_ADDR_VAR 0 10
31912: PUSH
31913: LD_VAR 0 10
31917: PPUSH
31918: LD_VAR 0 8
31922: PPUSH
31923: LD_VAR 0 1
31927: PUSH
31928: LD_VAR 0 7
31932: ARRAY
31933: PPUSH
31934: CALL_OW 1
31938: ST_TO_ADDR
// end ;
31939: GO 31852
31941: POP
31942: POP
// array := tmp ;
31943: LD_ADDR_VAR 0 1
31947: PUSH
31948: LD_VAR 0 10
31952: ST_TO_ADDR
// end ;
31953: GO 31834
31955: POP
31956: POP
// result := array ;
31957: LD_ADDR_VAR 0 5
31961: PUSH
31962: LD_VAR 0 1
31966: ST_TO_ADDR
// end ;
31967: LD_VAR 0 5
31971: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31972: LD_INT 0
31974: PPUSH
31975: PPUSH
// result := 0 ;
31976: LD_ADDR_VAR 0 3
31980: PUSH
31981: LD_INT 0
31983: ST_TO_ADDR
// if not array or not value in array then
31984: LD_VAR 0 1
31988: NOT
31989: PUSH
31990: LD_VAR 0 2
31994: PUSH
31995: LD_VAR 0 1
31999: IN
32000: NOT
32001: OR
32002: IFFALSE 32006
// exit ;
32004: GO 32060
// for i = 1 to array do
32006: LD_ADDR_VAR 0 4
32010: PUSH
32011: DOUBLE
32012: LD_INT 1
32014: DEC
32015: ST_TO_ADDR
32016: LD_VAR 0 1
32020: PUSH
32021: FOR_TO
32022: IFFALSE 32058
// if value = array [ i ] then
32024: LD_VAR 0 2
32028: PUSH
32029: LD_VAR 0 1
32033: PUSH
32034: LD_VAR 0 4
32038: ARRAY
32039: EQUAL
32040: IFFALSE 32056
// begin result := i ;
32042: LD_ADDR_VAR 0 3
32046: PUSH
32047: LD_VAR 0 4
32051: ST_TO_ADDR
// exit ;
32052: POP
32053: POP
32054: GO 32060
// end ;
32056: GO 32021
32058: POP
32059: POP
// end ;
32060: LD_VAR 0 3
32064: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32065: LD_INT 0
32067: PPUSH
// vc_chassis := chassis ;
32068: LD_ADDR_OWVAR 37
32072: PUSH
32073: LD_VAR 0 1
32077: ST_TO_ADDR
// vc_engine := engine ;
32078: LD_ADDR_OWVAR 39
32082: PUSH
32083: LD_VAR 0 2
32087: ST_TO_ADDR
// vc_control := control ;
32088: LD_ADDR_OWVAR 38
32092: PUSH
32093: LD_VAR 0 3
32097: ST_TO_ADDR
// vc_weapon := weapon ;
32098: LD_ADDR_OWVAR 40
32102: PUSH
32103: LD_VAR 0 4
32107: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32108: LD_ADDR_OWVAR 41
32112: PUSH
32113: LD_VAR 0 5
32117: ST_TO_ADDR
// end ;
32118: LD_VAR 0 6
32122: RET
// export function WantPlant ( unit ) ; var task ; begin
32123: LD_INT 0
32125: PPUSH
32126: PPUSH
// result := false ;
32127: LD_ADDR_VAR 0 2
32131: PUSH
32132: LD_INT 0
32134: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32135: LD_ADDR_VAR 0 3
32139: PUSH
32140: LD_VAR 0 1
32144: PPUSH
32145: CALL_OW 437
32149: ST_TO_ADDR
// if task then
32150: LD_VAR 0 3
32154: IFFALSE 32182
// if task [ 1 ] [ 1 ] = p then
32156: LD_VAR 0 3
32160: PUSH
32161: LD_INT 1
32163: ARRAY
32164: PUSH
32165: LD_INT 1
32167: ARRAY
32168: PUSH
32169: LD_STRING p
32171: EQUAL
32172: IFFALSE 32182
// result := true ;
32174: LD_ADDR_VAR 0 2
32178: PUSH
32179: LD_INT 1
32181: ST_TO_ADDR
// end ;
32182: LD_VAR 0 2
32186: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32187: LD_INT 0
32189: PPUSH
32190: PPUSH
32191: PPUSH
32192: PPUSH
// if pos < 1 then
32193: LD_VAR 0 2
32197: PUSH
32198: LD_INT 1
32200: LESS
32201: IFFALSE 32205
// exit ;
32203: GO 32508
// if pos = 1 then
32205: LD_VAR 0 2
32209: PUSH
32210: LD_INT 1
32212: EQUAL
32213: IFFALSE 32246
// result := Replace ( arr , pos [ 1 ] , value ) else
32215: LD_ADDR_VAR 0 4
32219: PUSH
32220: LD_VAR 0 1
32224: PPUSH
32225: LD_VAR 0 2
32229: PUSH
32230: LD_INT 1
32232: ARRAY
32233: PPUSH
32234: LD_VAR 0 3
32238: PPUSH
32239: CALL_OW 1
32243: ST_TO_ADDR
32244: GO 32508
// begin tmp := arr ;
32246: LD_ADDR_VAR 0 6
32250: PUSH
32251: LD_VAR 0 1
32255: ST_TO_ADDR
// s_arr := [ tmp ] ;
32256: LD_ADDR_VAR 0 7
32260: PUSH
32261: LD_VAR 0 6
32265: PUSH
32266: EMPTY
32267: LIST
32268: ST_TO_ADDR
// for i = 1 to pos - 1 do
32269: LD_ADDR_VAR 0 5
32273: PUSH
32274: DOUBLE
32275: LD_INT 1
32277: DEC
32278: ST_TO_ADDR
32279: LD_VAR 0 2
32283: PUSH
32284: LD_INT 1
32286: MINUS
32287: PUSH
32288: FOR_TO
32289: IFFALSE 32334
// begin tmp := tmp [ pos [ i ] ] ;
32291: LD_ADDR_VAR 0 6
32295: PUSH
32296: LD_VAR 0 6
32300: PUSH
32301: LD_VAR 0 2
32305: PUSH
32306: LD_VAR 0 5
32310: ARRAY
32311: ARRAY
32312: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32313: LD_ADDR_VAR 0 7
32317: PUSH
32318: LD_VAR 0 7
32322: PUSH
32323: LD_VAR 0 6
32327: PUSH
32328: EMPTY
32329: LIST
32330: ADD
32331: ST_TO_ADDR
// end ;
32332: GO 32288
32334: POP
32335: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32336: LD_ADDR_VAR 0 6
32340: PUSH
32341: LD_VAR 0 6
32345: PPUSH
32346: LD_VAR 0 2
32350: PUSH
32351: LD_VAR 0 2
32355: ARRAY
32356: PPUSH
32357: LD_VAR 0 3
32361: PPUSH
32362: CALL_OW 1
32366: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32367: LD_ADDR_VAR 0 7
32371: PUSH
32372: LD_VAR 0 7
32376: PPUSH
32377: LD_VAR 0 7
32381: PPUSH
32382: LD_VAR 0 6
32386: PPUSH
32387: CALL_OW 1
32391: ST_TO_ADDR
// for i = s_arr downto 2 do
32392: LD_ADDR_VAR 0 5
32396: PUSH
32397: DOUBLE
32398: LD_VAR 0 7
32402: INC
32403: ST_TO_ADDR
32404: LD_INT 2
32406: PUSH
32407: FOR_DOWNTO
32408: IFFALSE 32492
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32410: LD_ADDR_VAR 0 6
32414: PUSH
32415: LD_VAR 0 7
32419: PUSH
32420: LD_VAR 0 5
32424: PUSH
32425: LD_INT 1
32427: MINUS
32428: ARRAY
32429: PPUSH
32430: LD_VAR 0 2
32434: PUSH
32435: LD_VAR 0 5
32439: PUSH
32440: LD_INT 1
32442: MINUS
32443: ARRAY
32444: PPUSH
32445: LD_VAR 0 7
32449: PUSH
32450: LD_VAR 0 5
32454: ARRAY
32455: PPUSH
32456: CALL_OW 1
32460: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32461: LD_ADDR_VAR 0 7
32465: PUSH
32466: LD_VAR 0 7
32470: PPUSH
32471: LD_VAR 0 5
32475: PUSH
32476: LD_INT 1
32478: MINUS
32479: PPUSH
32480: LD_VAR 0 6
32484: PPUSH
32485: CALL_OW 1
32489: ST_TO_ADDR
// end ;
32490: GO 32407
32492: POP
32493: POP
// result := s_arr [ 1 ] ;
32494: LD_ADDR_VAR 0 4
32498: PUSH
32499: LD_VAR 0 7
32503: PUSH
32504: LD_INT 1
32506: ARRAY
32507: ST_TO_ADDR
// end ; end ;
32508: LD_VAR 0 4
32512: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32513: LD_INT 0
32515: PPUSH
32516: PPUSH
// if not list then
32517: LD_VAR 0 1
32521: NOT
32522: IFFALSE 32526
// exit ;
32524: GO 32617
// i := list [ pos1 ] ;
32526: LD_ADDR_VAR 0 5
32530: PUSH
32531: LD_VAR 0 1
32535: PUSH
32536: LD_VAR 0 2
32540: ARRAY
32541: ST_TO_ADDR
// if not i then
32542: LD_VAR 0 5
32546: NOT
32547: IFFALSE 32551
// exit ;
32549: GO 32617
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32551: LD_ADDR_VAR 0 1
32555: PUSH
32556: LD_VAR 0 1
32560: PPUSH
32561: LD_VAR 0 2
32565: PPUSH
32566: LD_VAR 0 1
32570: PUSH
32571: LD_VAR 0 3
32575: ARRAY
32576: PPUSH
32577: CALL_OW 1
32581: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32582: LD_ADDR_VAR 0 1
32586: PUSH
32587: LD_VAR 0 1
32591: PPUSH
32592: LD_VAR 0 3
32596: PPUSH
32597: LD_VAR 0 5
32601: PPUSH
32602: CALL_OW 1
32606: ST_TO_ADDR
// result := list ;
32607: LD_ADDR_VAR 0 4
32611: PUSH
32612: LD_VAR 0 1
32616: ST_TO_ADDR
// end ;
32617: LD_VAR 0 4
32621: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32622: LD_INT 0
32624: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32625: LD_ADDR_VAR 0 5
32629: PUSH
32630: LD_VAR 0 1
32634: PPUSH
32635: CALL_OW 250
32639: PPUSH
32640: LD_VAR 0 1
32644: PPUSH
32645: CALL_OW 251
32649: PPUSH
32650: LD_VAR 0 2
32654: PPUSH
32655: LD_VAR 0 3
32659: PPUSH
32660: LD_VAR 0 4
32664: PPUSH
32665: CALL 32675 0 5
32669: ST_TO_ADDR
// end ;
32670: LD_VAR 0 5
32674: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32675: LD_INT 0
32677: PPUSH
32678: PPUSH
32679: PPUSH
32680: PPUSH
// if not list then
32681: LD_VAR 0 3
32685: NOT
32686: IFFALSE 32690
// exit ;
32688: GO 33078
// result := [ ] ;
32690: LD_ADDR_VAR 0 6
32694: PUSH
32695: EMPTY
32696: ST_TO_ADDR
// for i in list do
32697: LD_ADDR_VAR 0 7
32701: PUSH
32702: LD_VAR 0 3
32706: PUSH
32707: FOR_IN
32708: IFFALSE 32910
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32710: LD_ADDR_VAR 0 9
32714: PUSH
32715: LD_VAR 0 7
32719: PPUSH
32720: LD_VAR 0 1
32724: PPUSH
32725: LD_VAR 0 2
32729: PPUSH
32730: CALL_OW 297
32734: ST_TO_ADDR
// if not result then
32735: LD_VAR 0 6
32739: NOT
32740: IFFALSE 32766
// result := [ [ i , tmp ] ] else
32742: LD_ADDR_VAR 0 6
32746: PUSH
32747: LD_VAR 0 7
32751: PUSH
32752: LD_VAR 0 9
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: EMPTY
32762: LIST
32763: ST_TO_ADDR
32764: GO 32908
// begin if result [ result ] [ 2 ] < tmp then
32766: LD_VAR 0 6
32770: PUSH
32771: LD_VAR 0 6
32775: ARRAY
32776: PUSH
32777: LD_INT 2
32779: ARRAY
32780: PUSH
32781: LD_VAR 0 9
32785: LESS
32786: IFFALSE 32828
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32788: LD_ADDR_VAR 0 6
32792: PUSH
32793: LD_VAR 0 6
32797: PPUSH
32798: LD_VAR 0 6
32802: PUSH
32803: LD_INT 1
32805: PLUS
32806: PPUSH
32807: LD_VAR 0 7
32811: PUSH
32812: LD_VAR 0 9
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PPUSH
32821: CALL_OW 2
32825: ST_TO_ADDR
32826: GO 32908
// for j = 1 to result do
32828: LD_ADDR_VAR 0 8
32832: PUSH
32833: DOUBLE
32834: LD_INT 1
32836: DEC
32837: ST_TO_ADDR
32838: LD_VAR 0 6
32842: PUSH
32843: FOR_TO
32844: IFFALSE 32906
// begin if tmp < result [ j ] [ 2 ] then
32846: LD_VAR 0 9
32850: PUSH
32851: LD_VAR 0 6
32855: PUSH
32856: LD_VAR 0 8
32860: ARRAY
32861: PUSH
32862: LD_INT 2
32864: ARRAY
32865: LESS
32866: IFFALSE 32904
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32868: LD_ADDR_VAR 0 6
32872: PUSH
32873: LD_VAR 0 6
32877: PPUSH
32878: LD_VAR 0 8
32882: PPUSH
32883: LD_VAR 0 7
32887: PUSH
32888: LD_VAR 0 9
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PPUSH
32897: CALL_OW 2
32901: ST_TO_ADDR
// break ;
32902: GO 32906
// end ; end ;
32904: GO 32843
32906: POP
32907: POP
// end ; end ;
32908: GO 32707
32910: POP
32911: POP
// if result and not asc then
32912: LD_VAR 0 6
32916: PUSH
32917: LD_VAR 0 4
32921: NOT
32922: AND
32923: IFFALSE 32998
// begin tmp := result ;
32925: LD_ADDR_VAR 0 9
32929: PUSH
32930: LD_VAR 0 6
32934: ST_TO_ADDR
// for i = tmp downto 1 do
32935: LD_ADDR_VAR 0 7
32939: PUSH
32940: DOUBLE
32941: LD_VAR 0 9
32945: INC
32946: ST_TO_ADDR
32947: LD_INT 1
32949: PUSH
32950: FOR_DOWNTO
32951: IFFALSE 32996
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32953: LD_ADDR_VAR 0 6
32957: PUSH
32958: LD_VAR 0 6
32962: PPUSH
32963: LD_VAR 0 9
32967: PUSH
32968: LD_VAR 0 7
32972: MINUS
32973: PUSH
32974: LD_INT 1
32976: PLUS
32977: PPUSH
32978: LD_VAR 0 9
32982: PUSH
32983: LD_VAR 0 7
32987: ARRAY
32988: PPUSH
32989: CALL_OW 1
32993: ST_TO_ADDR
32994: GO 32950
32996: POP
32997: POP
// end ; tmp := [ ] ;
32998: LD_ADDR_VAR 0 9
33002: PUSH
33003: EMPTY
33004: ST_TO_ADDR
// if mode then
33005: LD_VAR 0 5
33009: IFFALSE 33078
// begin for i = 1 to result do
33011: LD_ADDR_VAR 0 7
33015: PUSH
33016: DOUBLE
33017: LD_INT 1
33019: DEC
33020: ST_TO_ADDR
33021: LD_VAR 0 6
33025: PUSH
33026: FOR_TO
33027: IFFALSE 33066
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33029: LD_ADDR_VAR 0 9
33033: PUSH
33034: LD_VAR 0 9
33038: PPUSH
33039: LD_VAR 0 7
33043: PPUSH
33044: LD_VAR 0 6
33048: PUSH
33049: LD_VAR 0 7
33053: ARRAY
33054: PUSH
33055: LD_INT 1
33057: ARRAY
33058: PPUSH
33059: CALL_OW 1
33063: ST_TO_ADDR
33064: GO 33026
33066: POP
33067: POP
// result := tmp ;
33068: LD_ADDR_VAR 0 6
33072: PUSH
33073: LD_VAR 0 9
33077: ST_TO_ADDR
// end ; end ;
33078: LD_VAR 0 6
33082: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33083: LD_INT 0
33085: PPUSH
33086: PPUSH
33087: PPUSH
33088: PPUSH
33089: PPUSH
33090: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33091: LD_ADDR_VAR 0 5
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: LD_INT 0
33104: PUSH
33105: EMPTY
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: ST_TO_ADDR
// if not x or not y then
33113: LD_VAR 0 2
33117: NOT
33118: PUSH
33119: LD_VAR 0 3
33123: NOT
33124: OR
33125: IFFALSE 33129
// exit ;
33127: GO 34775
// if not range then
33129: LD_VAR 0 4
33133: NOT
33134: IFFALSE 33144
// range := 10 ;
33136: LD_ADDR_VAR 0 4
33140: PUSH
33141: LD_INT 10
33143: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33144: LD_ADDR_VAR 0 8
33148: PUSH
33149: LD_INT 81
33151: PUSH
33152: LD_VAR 0 1
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 92
33163: PUSH
33164: LD_VAR 0 2
33168: PUSH
33169: LD_VAR 0 3
33173: PUSH
33174: LD_VAR 0 4
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 3
33187: PUSH
33188: LD_INT 21
33190: PUSH
33191: LD_INT 3
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: LIST
33206: PPUSH
33207: CALL_OW 69
33211: ST_TO_ADDR
// if not tmp then
33212: LD_VAR 0 8
33216: NOT
33217: IFFALSE 33221
// exit ;
33219: GO 34775
// for i in tmp do
33221: LD_ADDR_VAR 0 6
33225: PUSH
33226: LD_VAR 0 8
33230: PUSH
33231: FOR_IN
33232: IFFALSE 34750
// begin points := [ 0 , 0 , 0 ] ;
33234: LD_ADDR_VAR 0 9
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: LIST
33252: ST_TO_ADDR
// bpoints := 1 ;
33253: LD_ADDR_VAR 0 10
33257: PUSH
33258: LD_INT 1
33260: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33261: LD_VAR 0 6
33265: PPUSH
33266: CALL_OW 247
33270: PUSH
33271: LD_INT 1
33273: DOUBLE
33274: EQUAL
33275: IFTRUE 33279
33277: GO 33857
33279: POP
// begin if GetClass ( i ) = 1 then
33280: LD_VAR 0 6
33284: PPUSH
33285: CALL_OW 257
33289: PUSH
33290: LD_INT 1
33292: EQUAL
33293: IFFALSE 33314
// points := [ 10 , 5 , 3 ] ;
33295: LD_ADDR_VAR 0 9
33299: PUSH
33300: LD_INT 10
33302: PUSH
33303: LD_INT 5
33305: PUSH
33306: LD_INT 3
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: LIST
33313: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33314: LD_VAR 0 6
33318: PPUSH
33319: CALL_OW 257
33323: PUSH
33324: LD_INT 2
33326: PUSH
33327: LD_INT 3
33329: PUSH
33330: LD_INT 4
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: LIST
33337: IN
33338: IFFALSE 33359
// points := [ 3 , 2 , 1 ] ;
33340: LD_ADDR_VAR 0 9
33344: PUSH
33345: LD_INT 3
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: LIST
33358: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33359: LD_VAR 0 6
33363: PPUSH
33364: CALL_OW 257
33368: PUSH
33369: LD_INT 5
33371: EQUAL
33372: IFFALSE 33393
// points := [ 130 , 5 , 2 ] ;
33374: LD_ADDR_VAR 0 9
33378: PUSH
33379: LD_INT 130
33381: PUSH
33382: LD_INT 5
33384: PUSH
33385: LD_INT 2
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: LIST
33392: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33393: LD_VAR 0 6
33397: PPUSH
33398: CALL_OW 257
33402: PUSH
33403: LD_INT 8
33405: EQUAL
33406: IFFALSE 33427
// points := [ 35 , 35 , 30 ] ;
33408: LD_ADDR_VAR 0 9
33412: PUSH
33413: LD_INT 35
33415: PUSH
33416: LD_INT 35
33418: PUSH
33419: LD_INT 30
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: LIST
33426: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33427: LD_VAR 0 6
33431: PPUSH
33432: CALL_OW 257
33436: PUSH
33437: LD_INT 9
33439: EQUAL
33440: IFFALSE 33461
// points := [ 20 , 55 , 40 ] ;
33442: LD_ADDR_VAR 0 9
33446: PUSH
33447: LD_INT 20
33449: PUSH
33450: LD_INT 55
33452: PUSH
33453: LD_INT 40
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: LIST
33460: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33461: LD_VAR 0 6
33465: PPUSH
33466: CALL_OW 257
33470: PUSH
33471: LD_INT 12
33473: PUSH
33474: LD_INT 16
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: IN
33481: IFFALSE 33502
// points := [ 5 , 3 , 2 ] ;
33483: LD_ADDR_VAR 0 9
33487: PUSH
33488: LD_INT 5
33490: PUSH
33491: LD_INT 3
33493: PUSH
33494: LD_INT 2
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33502: LD_VAR 0 6
33506: PPUSH
33507: CALL_OW 257
33511: PUSH
33512: LD_INT 17
33514: EQUAL
33515: IFFALSE 33536
// points := [ 100 , 50 , 75 ] ;
33517: LD_ADDR_VAR 0 9
33521: PUSH
33522: LD_INT 100
33524: PUSH
33525: LD_INT 50
33527: PUSH
33528: LD_INT 75
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33536: LD_VAR 0 6
33540: PPUSH
33541: CALL_OW 257
33545: PUSH
33546: LD_INT 15
33548: EQUAL
33549: IFFALSE 33570
// points := [ 10 , 5 , 3 ] ;
33551: LD_ADDR_VAR 0 9
33555: PUSH
33556: LD_INT 10
33558: PUSH
33559: LD_INT 5
33561: PUSH
33562: LD_INT 3
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33570: LD_VAR 0 6
33574: PPUSH
33575: CALL_OW 257
33579: PUSH
33580: LD_INT 14
33582: EQUAL
33583: IFFALSE 33604
// points := [ 10 , 0 , 0 ] ;
33585: LD_ADDR_VAR 0 9
33589: PUSH
33590: LD_INT 10
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33604: LD_VAR 0 6
33608: PPUSH
33609: CALL_OW 257
33613: PUSH
33614: LD_INT 11
33616: EQUAL
33617: IFFALSE 33638
// points := [ 30 , 10 , 5 ] ;
33619: LD_ADDR_VAR 0 9
33623: PUSH
33624: LD_INT 30
33626: PUSH
33627: LD_INT 10
33629: PUSH
33630: LD_INT 5
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33638: LD_VAR 0 1
33642: PPUSH
33643: LD_INT 5
33645: PPUSH
33646: CALL_OW 321
33650: PUSH
33651: LD_INT 2
33653: EQUAL
33654: IFFALSE 33671
// bpoints := bpoints * 1.8 ;
33656: LD_ADDR_VAR 0 10
33660: PUSH
33661: LD_VAR 0 10
33665: PUSH
33666: LD_REAL  1.80000000000000E+0000
33669: MUL
33670: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33671: LD_VAR 0 6
33675: PPUSH
33676: CALL_OW 257
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: LD_INT 2
33686: PUSH
33687: LD_INT 3
33689: PUSH
33690: LD_INT 4
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: IN
33699: PUSH
33700: LD_VAR 0 1
33704: PPUSH
33705: LD_INT 51
33707: PPUSH
33708: CALL_OW 321
33712: PUSH
33713: LD_INT 2
33715: EQUAL
33716: AND
33717: IFFALSE 33734
// bpoints := bpoints * 1.2 ;
33719: LD_ADDR_VAR 0 10
33723: PUSH
33724: LD_VAR 0 10
33728: PUSH
33729: LD_REAL  1.20000000000000E+0000
33732: MUL
33733: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33734: LD_VAR 0 6
33738: PPUSH
33739: CALL_OW 257
33743: PUSH
33744: LD_INT 5
33746: PUSH
33747: LD_INT 7
33749: PUSH
33750: LD_INT 9
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: IN
33758: PUSH
33759: LD_VAR 0 1
33763: PPUSH
33764: LD_INT 52
33766: PPUSH
33767: CALL_OW 321
33771: PUSH
33772: LD_INT 2
33774: EQUAL
33775: AND
33776: IFFALSE 33793
// bpoints := bpoints * 1.5 ;
33778: LD_ADDR_VAR 0 10
33782: PUSH
33783: LD_VAR 0 10
33787: PUSH
33788: LD_REAL  1.50000000000000E+0000
33791: MUL
33792: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33793: LD_VAR 0 1
33797: PPUSH
33798: LD_INT 66
33800: PPUSH
33801: CALL_OW 321
33805: PUSH
33806: LD_INT 2
33808: EQUAL
33809: IFFALSE 33826
// bpoints := bpoints * 1.1 ;
33811: LD_ADDR_VAR 0 10
33815: PUSH
33816: LD_VAR 0 10
33820: PUSH
33821: LD_REAL  1.10000000000000E+0000
33824: MUL
33825: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33826: LD_ADDR_VAR 0 10
33830: PUSH
33831: LD_VAR 0 10
33835: PUSH
33836: LD_VAR 0 6
33840: PPUSH
33841: LD_INT 1
33843: PPUSH
33844: CALL_OW 259
33848: PUSH
33849: LD_REAL  1.15000000000000E+0000
33852: MUL
33853: MUL
33854: ST_TO_ADDR
// end ; unit_vehicle :
33855: GO 34679
33857: LD_INT 2
33859: DOUBLE
33860: EQUAL
33861: IFTRUE 33865
33863: GO 34667
33865: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33866: LD_VAR 0 6
33870: PPUSH
33871: CALL_OW 264
33875: PUSH
33876: LD_INT 2
33878: PUSH
33879: LD_INT 42
33881: PUSH
33882: LD_INT 24
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: IN
33890: IFFALSE 33911
// points := [ 25 , 5 , 3 ] ;
33892: LD_ADDR_VAR 0 9
33896: PUSH
33897: LD_INT 25
33899: PUSH
33900: LD_INT 5
33902: PUSH
33903: LD_INT 3
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: LIST
33910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33911: LD_VAR 0 6
33915: PPUSH
33916: CALL_OW 264
33920: PUSH
33921: LD_INT 4
33923: PUSH
33924: LD_INT 43
33926: PUSH
33927: LD_INT 25
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: IN
33935: IFFALSE 33956
// points := [ 40 , 15 , 5 ] ;
33937: LD_ADDR_VAR 0 9
33941: PUSH
33942: LD_INT 40
33944: PUSH
33945: LD_INT 15
33947: PUSH
33948: LD_INT 5
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: LIST
33955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33956: LD_VAR 0 6
33960: PPUSH
33961: CALL_OW 264
33965: PUSH
33966: LD_INT 3
33968: PUSH
33969: LD_INT 23
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: IN
33976: IFFALSE 33997
// points := [ 7 , 25 , 8 ] ;
33978: LD_ADDR_VAR 0 9
33982: PUSH
33983: LD_INT 7
33985: PUSH
33986: LD_INT 25
33988: PUSH
33989: LD_INT 8
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: LIST
33996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33997: LD_VAR 0 6
34001: PPUSH
34002: CALL_OW 264
34006: PUSH
34007: LD_INT 5
34009: PUSH
34010: LD_INT 27
34012: PUSH
34013: LD_INT 44
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: IN
34021: IFFALSE 34042
// points := [ 14 , 50 , 16 ] ;
34023: LD_ADDR_VAR 0 9
34027: PUSH
34028: LD_INT 14
34030: PUSH
34031: LD_INT 50
34033: PUSH
34034: LD_INT 16
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: LIST
34041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34042: LD_VAR 0 6
34046: PPUSH
34047: CALL_OW 264
34051: PUSH
34052: LD_INT 6
34054: PUSH
34055: LD_INT 46
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: IN
34062: IFFALSE 34083
// points := [ 32 , 120 , 70 ] ;
34064: LD_ADDR_VAR 0 9
34068: PUSH
34069: LD_INT 32
34071: PUSH
34072: LD_INT 120
34074: PUSH
34075: LD_INT 70
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: LIST
34082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
34083: LD_VAR 0 6
34087: PPUSH
34088: CALL_OW 264
34092: PUSH
34093: LD_INT 7
34095: PUSH
34096: LD_INT 28
34098: PUSH
34099: LD_INT 45
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: LIST
34106: IN
34107: IFFALSE 34128
// points := [ 35 , 20 , 45 ] ;
34109: LD_ADDR_VAR 0 9
34113: PUSH
34114: LD_INT 35
34116: PUSH
34117: LD_INT 20
34119: PUSH
34120: LD_INT 45
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: LIST
34127: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34128: LD_VAR 0 6
34132: PPUSH
34133: CALL_OW 264
34137: PUSH
34138: LD_INT 47
34140: PUSH
34141: EMPTY
34142: LIST
34143: IN
34144: IFFALSE 34165
// points := [ 67 , 45 , 75 ] ;
34146: LD_ADDR_VAR 0 9
34150: PUSH
34151: LD_INT 67
34153: PUSH
34154: LD_INT 45
34156: PUSH
34157: LD_INT 75
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: LIST
34164: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34165: LD_VAR 0 6
34169: PPUSH
34170: CALL_OW 264
34174: PUSH
34175: LD_INT 26
34177: PUSH
34178: EMPTY
34179: LIST
34180: IN
34181: IFFALSE 34202
// points := [ 120 , 30 , 80 ] ;
34183: LD_ADDR_VAR 0 9
34187: PUSH
34188: LD_INT 120
34190: PUSH
34191: LD_INT 30
34193: PUSH
34194: LD_INT 80
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: LIST
34201: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34202: LD_VAR 0 6
34206: PPUSH
34207: CALL_OW 264
34211: PUSH
34212: LD_INT 22
34214: PUSH
34215: EMPTY
34216: LIST
34217: IN
34218: IFFALSE 34239
// points := [ 40 , 1 , 1 ] ;
34220: LD_ADDR_VAR 0 9
34224: PUSH
34225: LD_INT 40
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: LIST
34238: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34239: LD_VAR 0 6
34243: PPUSH
34244: CALL_OW 264
34248: PUSH
34249: LD_INT 29
34251: PUSH
34252: EMPTY
34253: LIST
34254: IN
34255: IFFALSE 34276
// points := [ 70 , 200 , 400 ] ;
34257: LD_ADDR_VAR 0 9
34261: PUSH
34262: LD_INT 70
34264: PUSH
34265: LD_INT 200
34267: PUSH
34268: LD_INT 400
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: LIST
34275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34276: LD_VAR 0 6
34280: PPUSH
34281: CALL_OW 264
34285: PUSH
34286: LD_INT 14
34288: PUSH
34289: LD_INT 53
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: IN
34296: IFFALSE 34317
// points := [ 40 , 10 , 20 ] ;
34298: LD_ADDR_VAR 0 9
34302: PUSH
34303: LD_INT 40
34305: PUSH
34306: LD_INT 10
34308: PUSH
34309: LD_INT 20
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34317: LD_VAR 0 6
34321: PPUSH
34322: CALL_OW 264
34326: PUSH
34327: LD_INT 9
34329: PUSH
34330: EMPTY
34331: LIST
34332: IN
34333: IFFALSE 34354
// points := [ 5 , 70 , 20 ] ;
34335: LD_ADDR_VAR 0 9
34339: PUSH
34340: LD_INT 5
34342: PUSH
34343: LD_INT 70
34345: PUSH
34346: LD_INT 20
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: LIST
34353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34354: LD_VAR 0 6
34358: PPUSH
34359: CALL_OW 264
34363: PUSH
34364: LD_INT 10
34366: PUSH
34367: EMPTY
34368: LIST
34369: IN
34370: IFFALSE 34391
// points := [ 35 , 110 , 70 ] ;
34372: LD_ADDR_VAR 0 9
34376: PUSH
34377: LD_INT 35
34379: PUSH
34380: LD_INT 110
34382: PUSH
34383: LD_INT 70
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: LIST
34390: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34391: LD_VAR 0 6
34395: PPUSH
34396: CALL_OW 265
34400: PUSH
34401: LD_INT 25
34403: EQUAL
34404: IFFALSE 34425
// points := [ 80 , 65 , 100 ] ;
34406: LD_ADDR_VAR 0 9
34410: PUSH
34411: LD_INT 80
34413: PUSH
34414: LD_INT 65
34416: PUSH
34417: LD_INT 100
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: LIST
34424: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34425: LD_VAR 0 6
34429: PPUSH
34430: CALL_OW 263
34434: PUSH
34435: LD_INT 1
34437: EQUAL
34438: IFFALSE 34473
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34440: LD_ADDR_VAR 0 10
34444: PUSH
34445: LD_VAR 0 10
34449: PUSH
34450: LD_VAR 0 6
34454: PPUSH
34455: CALL_OW 311
34459: PPUSH
34460: LD_INT 3
34462: PPUSH
34463: CALL_OW 259
34467: PUSH
34468: LD_INT 4
34470: MUL
34471: MUL
34472: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34473: LD_VAR 0 6
34477: PPUSH
34478: CALL_OW 263
34482: PUSH
34483: LD_INT 2
34485: EQUAL
34486: IFFALSE 34537
// begin j := IsControledBy ( i ) ;
34488: LD_ADDR_VAR 0 7
34492: PUSH
34493: LD_VAR 0 6
34497: PPUSH
34498: CALL_OW 312
34502: ST_TO_ADDR
// if j then
34503: LD_VAR 0 7
34507: IFFALSE 34537
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34509: LD_ADDR_VAR 0 10
34513: PUSH
34514: LD_VAR 0 10
34518: PUSH
34519: LD_VAR 0 7
34523: PPUSH
34524: LD_INT 3
34526: PPUSH
34527: CALL_OW 259
34531: PUSH
34532: LD_INT 3
34534: MUL
34535: MUL
34536: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34537: LD_VAR 0 6
34541: PPUSH
34542: CALL_OW 264
34546: PUSH
34547: LD_INT 5
34549: PUSH
34550: LD_INT 6
34552: PUSH
34553: LD_INT 46
34555: PUSH
34556: LD_INT 44
34558: PUSH
34559: LD_INT 47
34561: PUSH
34562: LD_INT 45
34564: PUSH
34565: LD_INT 28
34567: PUSH
34568: LD_INT 7
34570: PUSH
34571: LD_INT 27
34573: PUSH
34574: LD_INT 29
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: IN
34589: PUSH
34590: LD_VAR 0 1
34594: PPUSH
34595: LD_INT 52
34597: PPUSH
34598: CALL_OW 321
34602: PUSH
34603: LD_INT 2
34605: EQUAL
34606: AND
34607: IFFALSE 34624
// bpoints := bpoints * 1.2 ;
34609: LD_ADDR_VAR 0 10
34613: PUSH
34614: LD_VAR 0 10
34618: PUSH
34619: LD_REAL  1.20000000000000E+0000
34622: MUL
34623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34624: LD_VAR 0 6
34628: PPUSH
34629: CALL_OW 264
34633: PUSH
34634: LD_INT 6
34636: PUSH
34637: LD_INT 46
34639: PUSH
34640: LD_INT 47
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: LIST
34647: IN
34648: IFFALSE 34665
// bpoints := bpoints * 1.2 ;
34650: LD_ADDR_VAR 0 10
34654: PUSH
34655: LD_VAR 0 10
34659: PUSH
34660: LD_REAL  1.20000000000000E+0000
34663: MUL
34664: ST_TO_ADDR
// end ; unit_building :
34665: GO 34679
34667: LD_INT 3
34669: DOUBLE
34670: EQUAL
34671: IFTRUE 34675
34673: GO 34678
34675: POP
// ; end ;
34676: GO 34679
34678: POP
// for j = 1 to 3 do
34679: LD_ADDR_VAR 0 7
34683: PUSH
34684: DOUBLE
34685: LD_INT 1
34687: DEC
34688: ST_TO_ADDR
34689: LD_INT 3
34691: PUSH
34692: FOR_TO
34693: IFFALSE 34746
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34695: LD_ADDR_VAR 0 5
34699: PUSH
34700: LD_VAR 0 5
34704: PPUSH
34705: LD_VAR 0 7
34709: PPUSH
34710: LD_VAR 0 5
34714: PUSH
34715: LD_VAR 0 7
34719: ARRAY
34720: PUSH
34721: LD_VAR 0 9
34725: PUSH
34726: LD_VAR 0 7
34730: ARRAY
34731: PUSH
34732: LD_VAR 0 10
34736: MUL
34737: PLUS
34738: PPUSH
34739: CALL_OW 1
34743: ST_TO_ADDR
34744: GO 34692
34746: POP
34747: POP
// end ;
34748: GO 33231
34750: POP
34751: POP
// result := Replace ( result , 4 , tmp ) ;
34752: LD_ADDR_VAR 0 5
34756: PUSH
34757: LD_VAR 0 5
34761: PPUSH
34762: LD_INT 4
34764: PPUSH
34765: LD_VAR 0 8
34769: PPUSH
34770: CALL_OW 1
34774: ST_TO_ADDR
// end ;
34775: LD_VAR 0 5
34779: RET
// export function DangerAtRange ( unit , range ) ; begin
34780: LD_INT 0
34782: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34783: LD_ADDR_VAR 0 3
34787: PUSH
34788: LD_VAR 0 1
34792: PPUSH
34793: CALL_OW 255
34797: PPUSH
34798: LD_VAR 0 1
34802: PPUSH
34803: CALL_OW 250
34807: PPUSH
34808: LD_VAR 0 1
34812: PPUSH
34813: CALL_OW 251
34817: PPUSH
34818: LD_VAR 0 2
34822: PPUSH
34823: CALL 33083 0 4
34827: ST_TO_ADDR
// end ;
34828: LD_VAR 0 3
34832: RET
// export function DangerInArea ( side , area ) ; begin
34833: LD_INT 0
34835: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34836: LD_ADDR_VAR 0 3
34840: PUSH
34841: LD_VAR 0 2
34845: PPUSH
34846: LD_INT 81
34848: PUSH
34849: LD_VAR 0 1
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PPUSH
34858: CALL_OW 70
34862: ST_TO_ADDR
// end ;
34863: LD_VAR 0 3
34867: RET
// export function IsExtension ( b ) ; begin
34868: LD_INT 0
34870: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34871: LD_ADDR_VAR 0 2
34875: PUSH
34876: LD_VAR 0 1
34880: PUSH
34881: LD_INT 23
34883: PUSH
34884: LD_INT 20
34886: PUSH
34887: LD_INT 22
34889: PUSH
34890: LD_INT 17
34892: PUSH
34893: LD_INT 24
34895: PUSH
34896: LD_INT 21
34898: PUSH
34899: LD_INT 19
34901: PUSH
34902: LD_INT 16
34904: PUSH
34905: LD_INT 25
34907: PUSH
34908: LD_INT 18
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: IN
34923: ST_TO_ADDR
// end ;
34924: LD_VAR 0 2
34928: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
34929: LD_INT 0
34931: PPUSH
34932: PPUSH
34933: PPUSH
// result := [ ] ;
34934: LD_ADDR_VAR 0 3
34938: PUSH
34939: EMPTY
34940: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34941: LD_ADDR_VAR 0 4
34945: PUSH
34946: LD_VAR 0 2
34950: PPUSH
34951: LD_INT 21
34953: PUSH
34954: LD_INT 3
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PPUSH
34961: CALL_OW 70
34965: ST_TO_ADDR
// if not tmp then
34966: LD_VAR 0 4
34970: NOT
34971: IFFALSE 34975
// exit ;
34973: GO 35033
// for i in tmp do
34975: LD_ADDR_VAR 0 5
34979: PUSH
34980: LD_VAR 0 4
34984: PUSH
34985: FOR_IN
34986: IFFALSE 35021
// if GetBase ( i ) <> base then
34988: LD_VAR 0 5
34992: PPUSH
34993: CALL_OW 274
34997: PUSH
34998: LD_VAR 0 1
35002: NONEQUAL
35003: IFFALSE 35019
// ComLinkToBase ( base , i ) ;
35005: LD_VAR 0 1
35009: PPUSH
35010: LD_VAR 0 5
35014: PPUSH
35015: CALL_OW 169
35019: GO 34985
35021: POP
35022: POP
// result := tmp ;
35023: LD_ADDR_VAR 0 3
35027: PUSH
35028: LD_VAR 0 4
35032: ST_TO_ADDR
// end ;
35033: LD_VAR 0 3
35037: RET
// export function ComComplete ( unit , b ) ; var i ; begin
35038: LD_INT 0
35040: PPUSH
35041: PPUSH
// if BuildingStatus ( b ) = bs_build then
35042: LD_VAR 0 2
35046: PPUSH
35047: CALL_OW 461
35051: PUSH
35052: LD_INT 1
35054: EQUAL
35055: IFFALSE 35115
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35057: LD_VAR 0 1
35061: PPUSH
35062: LD_STRING h
35064: PUSH
35065: LD_VAR 0 2
35069: PPUSH
35070: CALL_OW 250
35074: PUSH
35075: LD_VAR 0 2
35079: PPUSH
35080: CALL_OW 251
35084: PUSH
35085: LD_VAR 0 2
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: PUSH
35108: EMPTY
35109: LIST
35110: PPUSH
35111: CALL_OW 446
// end ;
35115: LD_VAR 0 3
35119: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35120: LD_INT 0
35122: PPUSH
35123: PPUSH
35124: PPUSH
35125: PPUSH
35126: PPUSH
35127: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
35128: LD_VAR 0 1
35132: NOT
35133: PUSH
35134: LD_VAR 0 1
35138: PPUSH
35139: CALL_OW 263
35143: PUSH
35144: LD_INT 2
35146: EQUAL
35147: NOT
35148: OR
35149: IFFALSE 35153
// exit ;
35151: GO 35469
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35153: LD_ADDR_VAR 0 6
35157: PUSH
35158: LD_INT 22
35160: PUSH
35161: LD_VAR 0 1
35165: PPUSH
35166: CALL_OW 255
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 2
35177: PUSH
35178: LD_INT 30
35180: PUSH
35181: LD_INT 36
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 34
35190: PUSH
35191: LD_INT 31
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: LIST
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PPUSH
35207: CALL_OW 69
35211: ST_TO_ADDR
// if not tmp then
35212: LD_VAR 0 6
35216: NOT
35217: IFFALSE 35221
// exit ;
35219: GO 35469
// result := [ ] ;
35221: LD_ADDR_VAR 0 2
35225: PUSH
35226: EMPTY
35227: ST_TO_ADDR
// for i in tmp do
35228: LD_ADDR_VAR 0 3
35232: PUSH
35233: LD_VAR 0 6
35237: PUSH
35238: FOR_IN
35239: IFFALSE 35310
// begin t := UnitsInside ( i ) ;
35241: LD_ADDR_VAR 0 4
35245: PUSH
35246: LD_VAR 0 3
35250: PPUSH
35251: CALL_OW 313
35255: ST_TO_ADDR
// if t then
35256: LD_VAR 0 4
35260: IFFALSE 35308
// for j in t do
35262: LD_ADDR_VAR 0 7
35266: PUSH
35267: LD_VAR 0 4
35271: PUSH
35272: FOR_IN
35273: IFFALSE 35306
// result := Insert ( result , result + 1 , j ) ;
35275: LD_ADDR_VAR 0 2
35279: PUSH
35280: LD_VAR 0 2
35284: PPUSH
35285: LD_VAR 0 2
35289: PUSH
35290: LD_INT 1
35292: PLUS
35293: PPUSH
35294: LD_VAR 0 7
35298: PPUSH
35299: CALL_OW 2
35303: ST_TO_ADDR
35304: GO 35272
35306: POP
35307: POP
// end ;
35308: GO 35238
35310: POP
35311: POP
// if not result then
35312: LD_VAR 0 2
35316: NOT
35317: IFFALSE 35321
// exit ;
35319: GO 35469
// mech := result [ 1 ] ;
35321: LD_ADDR_VAR 0 5
35325: PUSH
35326: LD_VAR 0 2
35330: PUSH
35331: LD_INT 1
35333: ARRAY
35334: ST_TO_ADDR
// if result > 1 then
35335: LD_VAR 0 2
35339: PUSH
35340: LD_INT 1
35342: GREATER
35343: IFFALSE 35455
// for i = 2 to result do
35345: LD_ADDR_VAR 0 3
35349: PUSH
35350: DOUBLE
35351: LD_INT 2
35353: DEC
35354: ST_TO_ADDR
35355: LD_VAR 0 2
35359: PUSH
35360: FOR_TO
35361: IFFALSE 35453
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35363: LD_ADDR_VAR 0 4
35367: PUSH
35368: LD_VAR 0 2
35372: PUSH
35373: LD_VAR 0 3
35377: ARRAY
35378: PPUSH
35379: LD_INT 3
35381: PPUSH
35382: CALL_OW 259
35386: PUSH
35387: LD_VAR 0 2
35391: PUSH
35392: LD_VAR 0 3
35396: ARRAY
35397: PPUSH
35398: CALL_OW 432
35402: MINUS
35403: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35404: LD_VAR 0 4
35408: PUSH
35409: LD_VAR 0 5
35413: PPUSH
35414: LD_INT 3
35416: PPUSH
35417: CALL_OW 259
35421: PUSH
35422: LD_VAR 0 5
35426: PPUSH
35427: CALL_OW 432
35431: MINUS
35432: GREATEREQUAL
35433: IFFALSE 35451
// mech := result [ i ] ;
35435: LD_ADDR_VAR 0 5
35439: PUSH
35440: LD_VAR 0 2
35444: PUSH
35445: LD_VAR 0 3
35449: ARRAY
35450: ST_TO_ADDR
// end ;
35451: GO 35360
35453: POP
35454: POP
// ComLinkTo ( vehicle , mech ) ;
35455: LD_VAR 0 1
35459: PPUSH
35460: LD_VAR 0 5
35464: PPUSH
35465: CALL_OW 135
// end ;
35469: LD_VAR 0 2
35473: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35474: LD_INT 0
35476: PPUSH
35477: PPUSH
35478: PPUSH
35479: PPUSH
35480: PPUSH
35481: PPUSH
35482: PPUSH
35483: PPUSH
35484: PPUSH
35485: PPUSH
35486: PPUSH
35487: PPUSH
35488: PPUSH
// result := [ ] ;
35489: LD_ADDR_VAR 0 7
35493: PUSH
35494: EMPTY
35495: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35496: LD_VAR 0 1
35500: PPUSH
35501: CALL_OW 266
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: IN
35516: NOT
35517: IFFALSE 35521
// exit ;
35519: GO 37152
// if name then
35521: LD_VAR 0 3
35525: IFFALSE 35541
// SetBName ( base_dep , name ) ;
35527: LD_VAR 0 1
35531: PPUSH
35532: LD_VAR 0 3
35536: PPUSH
35537: CALL_OW 500
// base := GetBase ( base_dep ) ;
35541: LD_ADDR_VAR 0 15
35545: PUSH
35546: LD_VAR 0 1
35550: PPUSH
35551: CALL_OW 274
35555: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35556: LD_ADDR_VAR 0 16
35560: PUSH
35561: LD_VAR 0 1
35565: PPUSH
35566: CALL_OW 255
35570: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35571: LD_ADDR_VAR 0 17
35575: PUSH
35576: LD_VAR 0 1
35580: PPUSH
35581: CALL_OW 248
35585: ST_TO_ADDR
// if sources then
35586: LD_VAR 0 5
35590: IFFALSE 35637
// for i = 1 to 3 do
35592: LD_ADDR_VAR 0 8
35596: PUSH
35597: DOUBLE
35598: LD_INT 1
35600: DEC
35601: ST_TO_ADDR
35602: LD_INT 3
35604: PUSH
35605: FOR_TO
35606: IFFALSE 35635
// AddResourceType ( base , i , sources [ i ] ) ;
35608: LD_VAR 0 15
35612: PPUSH
35613: LD_VAR 0 8
35617: PPUSH
35618: LD_VAR 0 5
35622: PUSH
35623: LD_VAR 0 8
35627: ARRAY
35628: PPUSH
35629: CALL_OW 276
35633: GO 35605
35635: POP
35636: POP
// buildings := GetBaseBuildings ( base , area ) ;
35637: LD_ADDR_VAR 0 18
35641: PUSH
35642: LD_VAR 0 15
35646: PPUSH
35647: LD_VAR 0 2
35651: PPUSH
35652: CALL 34929 0 2
35656: ST_TO_ADDR
// InitHc ;
35657: CALL_OW 19
// InitUc ;
35661: CALL_OW 18
// uc_side := side ;
35665: LD_ADDR_OWVAR 20
35669: PUSH
35670: LD_VAR 0 16
35674: ST_TO_ADDR
// uc_nation := nation ;
35675: LD_ADDR_OWVAR 21
35679: PUSH
35680: LD_VAR 0 17
35684: ST_TO_ADDR
// if buildings then
35685: LD_VAR 0 18
35689: IFFALSE 37011
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35691: LD_ADDR_VAR 0 19
35695: PUSH
35696: LD_VAR 0 18
35700: PPUSH
35701: LD_INT 2
35703: PUSH
35704: LD_INT 30
35706: PUSH
35707: LD_INT 29
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 30
35716: PUSH
35717: LD_INT 30
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: LIST
35728: PPUSH
35729: CALL_OW 72
35733: ST_TO_ADDR
// if tmp then
35734: LD_VAR 0 19
35738: IFFALSE 35786
// for i in tmp do
35740: LD_ADDR_VAR 0 8
35744: PUSH
35745: LD_VAR 0 19
35749: PUSH
35750: FOR_IN
35751: IFFALSE 35784
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35753: LD_VAR 0 8
35757: PPUSH
35758: CALL_OW 250
35762: PPUSH
35763: LD_VAR 0 8
35767: PPUSH
35768: CALL_OW 251
35772: PPUSH
35773: LD_VAR 0 16
35777: PPUSH
35778: CALL_OW 441
35782: GO 35750
35784: POP
35785: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35786: LD_VAR 0 18
35790: PPUSH
35791: LD_INT 2
35793: PUSH
35794: LD_INT 30
35796: PUSH
35797: LD_INT 32
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 30
35806: PUSH
35807: LD_INT 33
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: PPUSH
35819: CALL_OW 72
35823: IFFALSE 35911
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35825: LD_ADDR_VAR 0 8
35829: PUSH
35830: LD_VAR 0 18
35834: PPUSH
35835: LD_INT 2
35837: PUSH
35838: LD_INT 30
35840: PUSH
35841: LD_INT 32
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 30
35850: PUSH
35851: LD_INT 33
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: LIST
35862: PPUSH
35863: CALL_OW 72
35867: PUSH
35868: FOR_IN
35869: IFFALSE 35909
// begin if not GetBWeapon ( i ) then
35871: LD_VAR 0 8
35875: PPUSH
35876: CALL_OW 269
35880: NOT
35881: IFFALSE 35907
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35883: LD_VAR 0 8
35887: PPUSH
35888: LD_VAR 0 8
35892: PPUSH
35893: LD_VAR 0 2
35897: PPUSH
35898: CALL 37157 0 2
35902: PPUSH
35903: CALL_OW 431
// end ;
35907: GO 35868
35909: POP
35910: POP
// end ; for i = 1 to personel do
35911: LD_ADDR_VAR 0 8
35915: PUSH
35916: DOUBLE
35917: LD_INT 1
35919: DEC
35920: ST_TO_ADDR
35921: LD_VAR 0 6
35925: PUSH
35926: FOR_TO
35927: IFFALSE 36991
// begin if i > 4 then
35929: LD_VAR 0 8
35933: PUSH
35934: LD_INT 4
35936: GREATER
35937: IFFALSE 35941
// break ;
35939: GO 36991
// case i of 1 :
35941: LD_VAR 0 8
35945: PUSH
35946: LD_INT 1
35948: DOUBLE
35949: EQUAL
35950: IFTRUE 35954
35952: GO 36034
35954: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35955: LD_ADDR_VAR 0 12
35959: PUSH
35960: LD_VAR 0 18
35964: PPUSH
35965: LD_INT 22
35967: PUSH
35968: LD_VAR 0 16
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 58
35979: PUSH
35980: EMPTY
35981: LIST
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: LD_INT 30
35988: PUSH
35989: LD_INT 32
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 30
35998: PUSH
35999: LD_INT 4
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 30
36008: PUSH
36009: LD_INT 5
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: LIST
36026: PPUSH
36027: CALL_OW 72
36031: ST_TO_ADDR
36032: GO 36256
36034: LD_INT 2
36036: DOUBLE
36037: EQUAL
36038: IFTRUE 36042
36040: GO 36104
36042: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36043: LD_ADDR_VAR 0 12
36047: PUSH
36048: LD_VAR 0 18
36052: PPUSH
36053: LD_INT 22
36055: PUSH
36056: LD_VAR 0 16
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 2
36067: PUSH
36068: LD_INT 30
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 30
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PPUSH
36097: CALL_OW 72
36101: ST_TO_ADDR
36102: GO 36256
36104: LD_INT 3
36106: DOUBLE
36107: EQUAL
36108: IFTRUE 36112
36110: GO 36174
36112: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36113: LD_ADDR_VAR 0 12
36117: PUSH
36118: LD_VAR 0 18
36122: PPUSH
36123: LD_INT 22
36125: PUSH
36126: LD_VAR 0 16
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 2
36137: PUSH
36138: LD_INT 30
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 30
36150: PUSH
36151: LD_INT 3
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: LIST
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PPUSH
36167: CALL_OW 72
36171: ST_TO_ADDR
36172: GO 36256
36174: LD_INT 4
36176: DOUBLE
36177: EQUAL
36178: IFTRUE 36182
36180: GO 36255
36182: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36183: LD_ADDR_VAR 0 12
36187: PUSH
36188: LD_VAR 0 18
36192: PPUSH
36193: LD_INT 22
36195: PUSH
36196: LD_VAR 0 16
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 2
36207: PUSH
36208: LD_INT 30
36210: PUSH
36211: LD_INT 6
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 30
36220: PUSH
36221: LD_INT 7
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 30
36230: PUSH
36231: LD_INT 8
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PPUSH
36248: CALL_OW 72
36252: ST_TO_ADDR
36253: GO 36256
36255: POP
// if i = 1 then
36256: LD_VAR 0 8
36260: PUSH
36261: LD_INT 1
36263: EQUAL
36264: IFFALSE 36375
// begin tmp := [ ] ;
36266: LD_ADDR_VAR 0 19
36270: PUSH
36271: EMPTY
36272: ST_TO_ADDR
// for j in f do
36273: LD_ADDR_VAR 0 9
36277: PUSH
36278: LD_VAR 0 12
36282: PUSH
36283: FOR_IN
36284: IFFALSE 36357
// if GetBType ( j ) = b_bunker then
36286: LD_VAR 0 9
36290: PPUSH
36291: CALL_OW 266
36295: PUSH
36296: LD_INT 32
36298: EQUAL
36299: IFFALSE 36326
// tmp := Insert ( tmp , 1 , j ) else
36301: LD_ADDR_VAR 0 19
36305: PUSH
36306: LD_VAR 0 19
36310: PPUSH
36311: LD_INT 1
36313: PPUSH
36314: LD_VAR 0 9
36318: PPUSH
36319: CALL_OW 2
36323: ST_TO_ADDR
36324: GO 36355
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36326: LD_ADDR_VAR 0 19
36330: PUSH
36331: LD_VAR 0 19
36335: PPUSH
36336: LD_VAR 0 19
36340: PUSH
36341: LD_INT 1
36343: PLUS
36344: PPUSH
36345: LD_VAR 0 9
36349: PPUSH
36350: CALL_OW 2
36354: ST_TO_ADDR
36355: GO 36283
36357: POP
36358: POP
// if tmp then
36359: LD_VAR 0 19
36363: IFFALSE 36375
// f := tmp ;
36365: LD_ADDR_VAR 0 12
36369: PUSH
36370: LD_VAR 0 19
36374: ST_TO_ADDR
// end ; x := personel [ i ] ;
36375: LD_ADDR_VAR 0 13
36379: PUSH
36380: LD_VAR 0 6
36384: PUSH
36385: LD_VAR 0 8
36389: ARRAY
36390: ST_TO_ADDR
// if x = - 1 then
36391: LD_VAR 0 13
36395: PUSH
36396: LD_INT 1
36398: NEG
36399: EQUAL
36400: IFFALSE 36609
// begin for j in f do
36402: LD_ADDR_VAR 0 9
36406: PUSH
36407: LD_VAR 0 12
36411: PUSH
36412: FOR_IN
36413: IFFALSE 36605
// repeat InitHc ;
36415: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36419: LD_VAR 0 9
36423: PPUSH
36424: CALL_OW 266
36428: PUSH
36429: LD_INT 5
36431: EQUAL
36432: IFFALSE 36502
// begin if UnitsInside ( j ) < 3 then
36434: LD_VAR 0 9
36438: PPUSH
36439: CALL_OW 313
36443: PUSH
36444: LD_INT 3
36446: LESS
36447: IFFALSE 36483
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36449: LD_INT 0
36451: PPUSH
36452: LD_INT 5
36454: PUSH
36455: LD_INT 8
36457: PUSH
36458: LD_INT 9
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: PUSH
36466: LD_VAR 0 17
36470: ARRAY
36471: PPUSH
36472: LD_VAR 0 4
36476: PPUSH
36477: CALL_OW 380
36481: GO 36500
// PrepareHuman ( false , i , skill ) ;
36483: LD_INT 0
36485: PPUSH
36486: LD_VAR 0 8
36490: PPUSH
36491: LD_VAR 0 4
36495: PPUSH
36496: CALL_OW 380
// end else
36500: GO 36519
// PrepareHuman ( false , i , skill ) ;
36502: LD_INT 0
36504: PPUSH
36505: LD_VAR 0 8
36509: PPUSH
36510: LD_VAR 0 4
36514: PPUSH
36515: CALL_OW 380
// un := CreateHuman ;
36519: LD_ADDR_VAR 0 14
36523: PUSH
36524: CALL_OW 44
36528: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36529: LD_ADDR_VAR 0 7
36533: PUSH
36534: LD_VAR 0 7
36538: PPUSH
36539: LD_INT 1
36541: PPUSH
36542: LD_VAR 0 14
36546: PPUSH
36547: CALL_OW 2
36551: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36552: LD_VAR 0 14
36556: PPUSH
36557: LD_VAR 0 9
36561: PPUSH
36562: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36566: LD_VAR 0 9
36570: PPUSH
36571: CALL_OW 313
36575: PUSH
36576: LD_INT 6
36578: EQUAL
36579: PUSH
36580: LD_VAR 0 9
36584: PPUSH
36585: CALL_OW 266
36589: PUSH
36590: LD_INT 32
36592: PUSH
36593: LD_INT 31
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: IN
36600: OR
36601: IFFALSE 36415
36603: GO 36412
36605: POP
36606: POP
// end else
36607: GO 36989
// for j = 1 to x do
36609: LD_ADDR_VAR 0 9
36613: PUSH
36614: DOUBLE
36615: LD_INT 1
36617: DEC
36618: ST_TO_ADDR
36619: LD_VAR 0 13
36623: PUSH
36624: FOR_TO
36625: IFFALSE 36987
// begin InitHc ;
36627: CALL_OW 19
// if not f then
36631: LD_VAR 0 12
36635: NOT
36636: IFFALSE 36725
// begin PrepareHuman ( false , i , skill ) ;
36638: LD_INT 0
36640: PPUSH
36641: LD_VAR 0 8
36645: PPUSH
36646: LD_VAR 0 4
36650: PPUSH
36651: CALL_OW 380
// un := CreateHuman ;
36655: LD_ADDR_VAR 0 14
36659: PUSH
36660: CALL_OW 44
36664: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36665: LD_ADDR_VAR 0 7
36669: PUSH
36670: LD_VAR 0 7
36674: PPUSH
36675: LD_INT 1
36677: PPUSH
36678: LD_VAR 0 14
36682: PPUSH
36683: CALL_OW 2
36687: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36688: LD_VAR 0 14
36692: PPUSH
36693: LD_VAR 0 1
36697: PPUSH
36698: CALL_OW 250
36702: PPUSH
36703: LD_VAR 0 1
36707: PPUSH
36708: CALL_OW 251
36712: PPUSH
36713: LD_INT 10
36715: PPUSH
36716: LD_INT 0
36718: PPUSH
36719: CALL_OW 50
// continue ;
36723: GO 36624
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36725: LD_VAR 0 12
36729: PUSH
36730: LD_INT 1
36732: ARRAY
36733: PPUSH
36734: CALL_OW 313
36738: PUSH
36739: LD_VAR 0 12
36743: PUSH
36744: LD_INT 1
36746: ARRAY
36747: PPUSH
36748: CALL_OW 266
36752: PUSH
36753: LD_INT 32
36755: PUSH
36756: LD_INT 31
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: IN
36763: AND
36764: PUSH
36765: LD_VAR 0 12
36769: PUSH
36770: LD_INT 1
36772: ARRAY
36773: PPUSH
36774: CALL_OW 313
36778: PUSH
36779: LD_INT 6
36781: EQUAL
36782: OR
36783: IFFALSE 36803
// f := Delete ( f , 1 ) ;
36785: LD_ADDR_VAR 0 12
36789: PUSH
36790: LD_VAR 0 12
36794: PPUSH
36795: LD_INT 1
36797: PPUSH
36798: CALL_OW 3
36802: ST_TO_ADDR
// if not f then
36803: LD_VAR 0 12
36807: NOT
36808: IFFALSE 36826
// begin x := x + 2 ;
36810: LD_ADDR_VAR 0 13
36814: PUSH
36815: LD_VAR 0 13
36819: PUSH
36820: LD_INT 2
36822: PLUS
36823: ST_TO_ADDR
// continue ;
36824: GO 36624
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36826: LD_VAR 0 12
36830: PUSH
36831: LD_INT 1
36833: ARRAY
36834: PPUSH
36835: CALL_OW 266
36839: PUSH
36840: LD_INT 5
36842: EQUAL
36843: IFFALSE 36917
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36845: LD_VAR 0 12
36849: PUSH
36850: LD_INT 1
36852: ARRAY
36853: PPUSH
36854: CALL_OW 313
36858: PUSH
36859: LD_INT 3
36861: LESS
36862: IFFALSE 36898
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36864: LD_INT 0
36866: PPUSH
36867: LD_INT 5
36869: PUSH
36870: LD_INT 8
36872: PUSH
36873: LD_INT 9
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: PUSH
36881: LD_VAR 0 17
36885: ARRAY
36886: PPUSH
36887: LD_VAR 0 4
36891: PPUSH
36892: CALL_OW 380
36896: GO 36915
// PrepareHuman ( false , i , skill ) ;
36898: LD_INT 0
36900: PPUSH
36901: LD_VAR 0 8
36905: PPUSH
36906: LD_VAR 0 4
36910: PPUSH
36911: CALL_OW 380
// end else
36915: GO 36934
// PrepareHuman ( false , i , skill ) ;
36917: LD_INT 0
36919: PPUSH
36920: LD_VAR 0 8
36924: PPUSH
36925: LD_VAR 0 4
36929: PPUSH
36930: CALL_OW 380
// un := CreateHuman ;
36934: LD_ADDR_VAR 0 14
36938: PUSH
36939: CALL_OW 44
36943: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36944: LD_ADDR_VAR 0 7
36948: PUSH
36949: LD_VAR 0 7
36953: PPUSH
36954: LD_INT 1
36956: PPUSH
36957: LD_VAR 0 14
36961: PPUSH
36962: CALL_OW 2
36966: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36967: LD_VAR 0 14
36971: PPUSH
36972: LD_VAR 0 12
36976: PUSH
36977: LD_INT 1
36979: ARRAY
36980: PPUSH
36981: CALL_OW 52
// end ;
36985: GO 36624
36987: POP
36988: POP
// end ;
36989: GO 35926
36991: POP
36992: POP
// result := result ^ buildings ;
36993: LD_ADDR_VAR 0 7
36997: PUSH
36998: LD_VAR 0 7
37002: PUSH
37003: LD_VAR 0 18
37007: ADD
37008: ST_TO_ADDR
// end else
37009: GO 37152
// begin for i = 1 to personel do
37011: LD_ADDR_VAR 0 8
37015: PUSH
37016: DOUBLE
37017: LD_INT 1
37019: DEC
37020: ST_TO_ADDR
37021: LD_VAR 0 6
37025: PUSH
37026: FOR_TO
37027: IFFALSE 37150
// begin if i > 4 then
37029: LD_VAR 0 8
37033: PUSH
37034: LD_INT 4
37036: GREATER
37037: IFFALSE 37041
// break ;
37039: GO 37150
// x := personel [ i ] ;
37041: LD_ADDR_VAR 0 13
37045: PUSH
37046: LD_VAR 0 6
37050: PUSH
37051: LD_VAR 0 8
37055: ARRAY
37056: ST_TO_ADDR
// if x = - 1 then
37057: LD_VAR 0 13
37061: PUSH
37062: LD_INT 1
37064: NEG
37065: EQUAL
37066: IFFALSE 37070
// continue ;
37068: GO 37026
// PrepareHuman ( false , i , skill ) ;
37070: LD_INT 0
37072: PPUSH
37073: LD_VAR 0 8
37077: PPUSH
37078: LD_VAR 0 4
37082: PPUSH
37083: CALL_OW 380
// un := CreateHuman ;
37087: LD_ADDR_VAR 0 14
37091: PUSH
37092: CALL_OW 44
37096: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37097: LD_VAR 0 14
37101: PPUSH
37102: LD_VAR 0 1
37106: PPUSH
37107: CALL_OW 250
37111: PPUSH
37112: LD_VAR 0 1
37116: PPUSH
37117: CALL_OW 251
37121: PPUSH
37122: LD_INT 10
37124: PPUSH
37125: LD_INT 0
37127: PPUSH
37128: CALL_OW 50
// result := result ^ un ;
37132: LD_ADDR_VAR 0 7
37136: PUSH
37137: LD_VAR 0 7
37141: PUSH
37142: LD_VAR 0 14
37146: ADD
37147: ST_TO_ADDR
// end ;
37148: GO 37026
37150: POP
37151: POP
// end ; end ;
37152: LD_VAR 0 7
37156: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37157: LD_INT 0
37159: PPUSH
37160: PPUSH
37161: PPUSH
37162: PPUSH
37163: PPUSH
37164: PPUSH
37165: PPUSH
37166: PPUSH
37167: PPUSH
37168: PPUSH
37169: PPUSH
37170: PPUSH
37171: PPUSH
37172: PPUSH
37173: PPUSH
37174: PPUSH
// result := false ;
37175: LD_ADDR_VAR 0 3
37179: PUSH
37180: LD_INT 0
37182: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37183: LD_VAR 0 1
37187: NOT
37188: PUSH
37189: LD_VAR 0 1
37193: PPUSH
37194: CALL_OW 266
37198: PUSH
37199: LD_INT 32
37201: PUSH
37202: LD_INT 33
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: IN
37209: NOT
37210: OR
37211: IFFALSE 37215
// exit ;
37213: GO 38351
// nat := GetNation ( tower ) ;
37215: LD_ADDR_VAR 0 12
37219: PUSH
37220: LD_VAR 0 1
37224: PPUSH
37225: CALL_OW 248
37229: ST_TO_ADDR
// side := GetSide ( tower ) ;
37230: LD_ADDR_VAR 0 16
37234: PUSH
37235: LD_VAR 0 1
37239: PPUSH
37240: CALL_OW 255
37244: ST_TO_ADDR
// x := GetX ( tower ) ;
37245: LD_ADDR_VAR 0 10
37249: PUSH
37250: LD_VAR 0 1
37254: PPUSH
37255: CALL_OW 250
37259: ST_TO_ADDR
// y := GetY ( tower ) ;
37260: LD_ADDR_VAR 0 11
37264: PUSH
37265: LD_VAR 0 1
37269: PPUSH
37270: CALL_OW 251
37274: ST_TO_ADDR
// if not x or not y then
37275: LD_VAR 0 10
37279: NOT
37280: PUSH
37281: LD_VAR 0 11
37285: NOT
37286: OR
37287: IFFALSE 37291
// exit ;
37289: GO 38351
// weapon := 0 ;
37291: LD_ADDR_VAR 0 18
37295: PUSH
37296: LD_INT 0
37298: ST_TO_ADDR
// fac_list := [ ] ;
37299: LD_ADDR_VAR 0 17
37303: PUSH
37304: EMPTY
37305: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
37306: LD_ADDR_VAR 0 6
37310: PUSH
37311: LD_VAR 0 1
37315: PPUSH
37316: CALL_OW 274
37320: PPUSH
37321: LD_VAR 0 2
37325: PPUSH
37326: CALL 34929 0 2
37330: PPUSH
37331: LD_INT 30
37333: PUSH
37334: LD_INT 3
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PPUSH
37341: CALL_OW 72
37345: ST_TO_ADDR
// if not factories then
37346: LD_VAR 0 6
37350: NOT
37351: IFFALSE 37355
// exit ;
37353: GO 38351
// for i in factories do
37355: LD_ADDR_VAR 0 8
37359: PUSH
37360: LD_VAR 0 6
37364: PUSH
37365: FOR_IN
37366: IFFALSE 37391
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37368: LD_ADDR_VAR 0 17
37372: PUSH
37373: LD_VAR 0 17
37377: PUSH
37378: LD_VAR 0 8
37382: PPUSH
37383: CALL_OW 478
37387: UNION
37388: ST_TO_ADDR
37389: GO 37365
37391: POP
37392: POP
// if not fac_list then
37393: LD_VAR 0 17
37397: NOT
37398: IFFALSE 37402
// exit ;
37400: GO 38351
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37402: LD_ADDR_VAR 0 5
37406: PUSH
37407: LD_INT 4
37409: PUSH
37410: LD_INT 5
37412: PUSH
37413: LD_INT 9
37415: PUSH
37416: LD_INT 10
37418: PUSH
37419: LD_INT 6
37421: PUSH
37422: LD_INT 7
37424: PUSH
37425: LD_INT 11
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 27
37439: PUSH
37440: LD_INT 28
37442: PUSH
37443: LD_INT 26
37445: PUSH
37446: LD_INT 30
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 43
37457: PUSH
37458: LD_INT 44
37460: PUSH
37461: LD_INT 46
37463: PUSH
37464: LD_INT 45
37466: PUSH
37467: LD_INT 47
37469: PUSH
37470: LD_INT 49
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: LIST
37485: PUSH
37486: LD_VAR 0 12
37490: ARRAY
37491: ST_TO_ADDR
// for i in list do
37492: LD_ADDR_VAR 0 8
37496: PUSH
37497: LD_VAR 0 5
37501: PUSH
37502: FOR_IN
37503: IFFALSE 37536
// if not i in fac_list then
37505: LD_VAR 0 8
37509: PUSH
37510: LD_VAR 0 17
37514: IN
37515: NOT
37516: IFFALSE 37534
// list := list diff i ;
37518: LD_ADDR_VAR 0 5
37522: PUSH
37523: LD_VAR 0 5
37527: PUSH
37528: LD_VAR 0 8
37532: DIFF
37533: ST_TO_ADDR
37534: GO 37502
37536: POP
37537: POP
// if not list then
37538: LD_VAR 0 5
37542: NOT
37543: IFFALSE 37547
// exit ;
37545: GO 38351
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37547: LD_VAR 0 12
37551: PUSH
37552: LD_INT 3
37554: EQUAL
37555: PUSH
37556: LD_INT 49
37558: PUSH
37559: LD_VAR 0 5
37563: IN
37564: AND
37565: PUSH
37566: LD_INT 31
37568: PPUSH
37569: LD_VAR 0 16
37573: PPUSH
37574: CALL_OW 321
37578: PUSH
37579: LD_INT 2
37581: EQUAL
37582: AND
37583: IFFALSE 37643
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37585: LD_INT 22
37587: PUSH
37588: LD_VAR 0 16
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 35
37599: PUSH
37600: LD_INT 49
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 91
37609: PUSH
37610: LD_VAR 0 1
37614: PUSH
37615: LD_INT 10
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: LIST
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: LIST
37627: PPUSH
37628: CALL_OW 69
37632: NOT
37633: IFFALSE 37643
// weapon := ru_time_lapser ;
37635: LD_ADDR_VAR 0 18
37639: PUSH
37640: LD_INT 49
37642: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37643: LD_VAR 0 12
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: LD_INT 2
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: IN
37658: PUSH
37659: LD_INT 11
37661: PUSH
37662: LD_VAR 0 5
37666: IN
37667: PUSH
37668: LD_INT 30
37670: PUSH
37671: LD_VAR 0 5
37675: IN
37676: OR
37677: AND
37678: PUSH
37679: LD_INT 6
37681: PPUSH
37682: LD_VAR 0 16
37686: PPUSH
37687: CALL_OW 321
37691: PUSH
37692: LD_INT 2
37694: EQUAL
37695: AND
37696: IFFALSE 37861
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37698: LD_INT 22
37700: PUSH
37701: LD_VAR 0 16
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 2
37712: PUSH
37713: LD_INT 35
37715: PUSH
37716: LD_INT 11
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 35
37725: PUSH
37726: LD_INT 30
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 91
37740: PUSH
37741: LD_VAR 0 1
37745: PUSH
37746: LD_INT 18
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: LIST
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: PPUSH
37759: CALL_OW 69
37763: NOT
37764: PUSH
37765: LD_INT 22
37767: PUSH
37768: LD_VAR 0 16
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: LD_INT 30
37782: PUSH
37783: LD_INT 32
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 30
37792: PUSH
37793: LD_INT 33
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 91
37807: PUSH
37808: LD_VAR 0 1
37812: PUSH
37813: LD_INT 12
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: LIST
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: PPUSH
37829: CALL_OW 69
37833: PUSH
37834: LD_INT 2
37836: GREATER
37837: AND
37838: IFFALSE 37861
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37840: LD_ADDR_VAR 0 18
37844: PUSH
37845: LD_INT 11
37847: PUSH
37848: LD_INT 30
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_VAR 0 12
37859: ARRAY
37860: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37861: LD_VAR 0 18
37865: NOT
37866: PUSH
37867: LD_INT 40
37869: PPUSH
37870: LD_VAR 0 16
37874: PPUSH
37875: CALL_OW 321
37879: PUSH
37880: LD_INT 2
37882: EQUAL
37883: AND
37884: PUSH
37885: LD_INT 7
37887: PUSH
37888: LD_VAR 0 5
37892: IN
37893: PUSH
37894: LD_INT 28
37896: PUSH
37897: LD_VAR 0 5
37901: IN
37902: OR
37903: PUSH
37904: LD_INT 45
37906: PUSH
37907: LD_VAR 0 5
37911: IN
37912: OR
37913: AND
37914: IFFALSE 38168
// begin hex := GetHexInfo ( x , y ) ;
37916: LD_ADDR_VAR 0 4
37920: PUSH
37921: LD_VAR 0 10
37925: PPUSH
37926: LD_VAR 0 11
37930: PPUSH
37931: CALL_OW 546
37935: ST_TO_ADDR
// if hex [ 1 ] then
37936: LD_VAR 0 4
37940: PUSH
37941: LD_INT 1
37943: ARRAY
37944: IFFALSE 37948
// exit ;
37946: GO 38351
// height := hex [ 2 ] ;
37948: LD_ADDR_VAR 0 15
37952: PUSH
37953: LD_VAR 0 4
37957: PUSH
37958: LD_INT 2
37960: ARRAY
37961: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37962: LD_ADDR_VAR 0 14
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: LD_INT 2
37972: PUSH
37973: LD_INT 3
37975: PUSH
37976: LD_INT 5
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: ST_TO_ADDR
// for i in tmp do
37985: LD_ADDR_VAR 0 8
37989: PUSH
37990: LD_VAR 0 14
37994: PUSH
37995: FOR_IN
37996: IFFALSE 38166
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37998: LD_ADDR_VAR 0 9
38002: PUSH
38003: LD_VAR 0 10
38007: PPUSH
38008: LD_VAR 0 8
38012: PPUSH
38013: LD_INT 5
38015: PPUSH
38016: CALL_OW 272
38020: PUSH
38021: LD_VAR 0 11
38025: PPUSH
38026: LD_VAR 0 8
38030: PPUSH
38031: LD_INT 5
38033: PPUSH
38034: CALL_OW 273
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38043: LD_VAR 0 9
38047: PUSH
38048: LD_INT 1
38050: ARRAY
38051: PPUSH
38052: LD_VAR 0 9
38056: PUSH
38057: LD_INT 2
38059: ARRAY
38060: PPUSH
38061: CALL_OW 488
38065: IFFALSE 38164
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38067: LD_ADDR_VAR 0 4
38071: PUSH
38072: LD_VAR 0 9
38076: PUSH
38077: LD_INT 1
38079: ARRAY
38080: PPUSH
38081: LD_VAR 0 9
38085: PUSH
38086: LD_INT 2
38088: ARRAY
38089: PPUSH
38090: CALL_OW 546
38094: ST_TO_ADDR
// if hex [ 1 ] then
38095: LD_VAR 0 4
38099: PUSH
38100: LD_INT 1
38102: ARRAY
38103: IFFALSE 38107
// continue ;
38105: GO 37995
// h := hex [ 2 ] ;
38107: LD_ADDR_VAR 0 13
38111: PUSH
38112: LD_VAR 0 4
38116: PUSH
38117: LD_INT 2
38119: ARRAY
38120: ST_TO_ADDR
// if h + 7 < height then
38121: LD_VAR 0 13
38125: PUSH
38126: LD_INT 7
38128: PLUS
38129: PUSH
38130: LD_VAR 0 15
38134: LESS
38135: IFFALSE 38164
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38137: LD_ADDR_VAR 0 18
38141: PUSH
38142: LD_INT 7
38144: PUSH
38145: LD_INT 28
38147: PUSH
38148: LD_INT 45
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: LIST
38155: PUSH
38156: LD_VAR 0 12
38160: ARRAY
38161: ST_TO_ADDR
// break ;
38162: GO 38166
// end ; end ; end ;
38164: GO 37995
38166: POP
38167: POP
// end ; if not weapon then
38168: LD_VAR 0 18
38172: NOT
38173: IFFALSE 38233
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38175: LD_ADDR_VAR 0 5
38179: PUSH
38180: LD_VAR 0 5
38184: PUSH
38185: LD_INT 11
38187: PUSH
38188: LD_INT 30
38190: PUSH
38191: LD_INT 49
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: LIST
38198: DIFF
38199: ST_TO_ADDR
// if not list then
38200: LD_VAR 0 5
38204: NOT
38205: IFFALSE 38209
// exit ;
38207: GO 38351
// weapon := list [ rand ( 1 , list ) ] ;
38209: LD_ADDR_VAR 0 18
38213: PUSH
38214: LD_VAR 0 5
38218: PUSH
38219: LD_INT 1
38221: PPUSH
38222: LD_VAR 0 5
38226: PPUSH
38227: CALL_OW 12
38231: ARRAY
38232: ST_TO_ADDR
// end ; if weapon then
38233: LD_VAR 0 18
38237: IFFALSE 38351
// begin tmp := CostOfWeapon ( weapon ) ;
38239: LD_ADDR_VAR 0 14
38243: PUSH
38244: LD_VAR 0 18
38248: PPUSH
38249: CALL_OW 451
38253: ST_TO_ADDR
// j := GetBase ( tower ) ;
38254: LD_ADDR_VAR 0 9
38258: PUSH
38259: LD_VAR 0 1
38263: PPUSH
38264: CALL_OW 274
38268: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38269: LD_VAR 0 9
38273: PPUSH
38274: LD_INT 1
38276: PPUSH
38277: CALL_OW 275
38281: PUSH
38282: LD_VAR 0 14
38286: PUSH
38287: LD_INT 1
38289: ARRAY
38290: GREATEREQUAL
38291: PUSH
38292: LD_VAR 0 9
38296: PPUSH
38297: LD_INT 2
38299: PPUSH
38300: CALL_OW 275
38304: PUSH
38305: LD_VAR 0 14
38309: PUSH
38310: LD_INT 2
38312: ARRAY
38313: GREATEREQUAL
38314: AND
38315: PUSH
38316: LD_VAR 0 9
38320: PPUSH
38321: LD_INT 3
38323: PPUSH
38324: CALL_OW 275
38328: PUSH
38329: LD_VAR 0 14
38333: PUSH
38334: LD_INT 3
38336: ARRAY
38337: GREATEREQUAL
38338: AND
38339: IFFALSE 38351
// result := weapon ;
38341: LD_ADDR_VAR 0 3
38345: PUSH
38346: LD_VAR 0 18
38350: ST_TO_ADDR
// end ; end ;
38351: LD_VAR 0 3
38355: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38356: LD_INT 0
38358: PPUSH
38359: PPUSH
// result := true ;
38360: LD_ADDR_VAR 0 3
38364: PUSH
38365: LD_INT 1
38367: ST_TO_ADDR
// if array1 = array2 then
38368: LD_VAR 0 1
38372: PUSH
38373: LD_VAR 0 2
38377: EQUAL
38378: IFFALSE 38438
// begin for i = 1 to array1 do
38380: LD_ADDR_VAR 0 4
38384: PUSH
38385: DOUBLE
38386: LD_INT 1
38388: DEC
38389: ST_TO_ADDR
38390: LD_VAR 0 1
38394: PUSH
38395: FOR_TO
38396: IFFALSE 38434
// if array1 [ i ] <> array2 [ i ] then
38398: LD_VAR 0 1
38402: PUSH
38403: LD_VAR 0 4
38407: ARRAY
38408: PUSH
38409: LD_VAR 0 2
38413: PUSH
38414: LD_VAR 0 4
38418: ARRAY
38419: NONEQUAL
38420: IFFALSE 38432
// begin result := false ;
38422: LD_ADDR_VAR 0 3
38426: PUSH
38427: LD_INT 0
38429: ST_TO_ADDR
// break ;
38430: GO 38434
// end ;
38432: GO 38395
38434: POP
38435: POP
// end else
38436: GO 38446
// result := false ;
38438: LD_ADDR_VAR 0 3
38442: PUSH
38443: LD_INT 0
38445: ST_TO_ADDR
// end ;
38446: LD_VAR 0 3
38450: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38451: LD_INT 0
38453: PPUSH
38454: PPUSH
38455: PPUSH
// pom := GetBase ( fac ) ;
38456: LD_ADDR_VAR 0 5
38460: PUSH
38461: LD_VAR 0 1
38465: PPUSH
38466: CALL_OW 274
38470: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38471: LD_ADDR_VAR 0 4
38475: PUSH
38476: LD_VAR 0 2
38480: PUSH
38481: LD_INT 1
38483: ARRAY
38484: PPUSH
38485: LD_VAR 0 2
38489: PUSH
38490: LD_INT 2
38492: ARRAY
38493: PPUSH
38494: LD_VAR 0 2
38498: PUSH
38499: LD_INT 3
38501: ARRAY
38502: PPUSH
38503: LD_VAR 0 2
38507: PUSH
38508: LD_INT 4
38510: ARRAY
38511: PPUSH
38512: CALL_OW 449
38516: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38517: LD_ADDR_VAR 0 3
38521: PUSH
38522: LD_VAR 0 5
38526: PPUSH
38527: LD_INT 1
38529: PPUSH
38530: CALL_OW 275
38534: PUSH
38535: LD_VAR 0 4
38539: PUSH
38540: LD_INT 1
38542: ARRAY
38543: GREATEREQUAL
38544: PUSH
38545: LD_VAR 0 5
38549: PPUSH
38550: LD_INT 2
38552: PPUSH
38553: CALL_OW 275
38557: PUSH
38558: LD_VAR 0 4
38562: PUSH
38563: LD_INT 2
38565: ARRAY
38566: GREATEREQUAL
38567: AND
38568: PUSH
38569: LD_VAR 0 5
38573: PPUSH
38574: LD_INT 3
38576: PPUSH
38577: CALL_OW 275
38581: PUSH
38582: LD_VAR 0 4
38586: PUSH
38587: LD_INT 3
38589: ARRAY
38590: GREATEREQUAL
38591: AND
38592: ST_TO_ADDR
// end ;
38593: LD_VAR 0 3
38597: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38598: LD_INT 0
38600: PPUSH
38601: PPUSH
38602: PPUSH
38603: PPUSH
// pom := GetBase ( building ) ;
38604: LD_ADDR_VAR 0 3
38608: PUSH
38609: LD_VAR 0 1
38613: PPUSH
38614: CALL_OW 274
38618: ST_TO_ADDR
// if not pom then
38619: LD_VAR 0 3
38623: NOT
38624: IFFALSE 38628
// exit ;
38626: GO 38798
// btype := GetBType ( building ) ;
38628: LD_ADDR_VAR 0 5
38632: PUSH
38633: LD_VAR 0 1
38637: PPUSH
38638: CALL_OW 266
38642: ST_TO_ADDR
// if btype = b_armoury then
38643: LD_VAR 0 5
38647: PUSH
38648: LD_INT 4
38650: EQUAL
38651: IFFALSE 38661
// btype := b_barracks ;
38653: LD_ADDR_VAR 0 5
38657: PUSH
38658: LD_INT 5
38660: ST_TO_ADDR
// if btype = b_depot then
38661: LD_VAR 0 5
38665: PUSH
38666: LD_INT 0
38668: EQUAL
38669: IFFALSE 38679
// btype := b_warehouse ;
38671: LD_ADDR_VAR 0 5
38675: PUSH
38676: LD_INT 1
38678: ST_TO_ADDR
// if btype = b_workshop then
38679: LD_VAR 0 5
38683: PUSH
38684: LD_INT 2
38686: EQUAL
38687: IFFALSE 38697
// btype := b_factory ;
38689: LD_ADDR_VAR 0 5
38693: PUSH
38694: LD_INT 3
38696: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38697: LD_ADDR_VAR 0 4
38701: PUSH
38702: LD_VAR 0 5
38706: PPUSH
38707: LD_VAR 0 1
38711: PPUSH
38712: CALL_OW 248
38716: PPUSH
38717: CALL_OW 450
38721: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38722: LD_ADDR_VAR 0 2
38726: PUSH
38727: LD_VAR 0 3
38731: PPUSH
38732: LD_INT 1
38734: PPUSH
38735: CALL_OW 275
38739: PUSH
38740: LD_VAR 0 4
38744: PUSH
38745: LD_INT 1
38747: ARRAY
38748: GREATEREQUAL
38749: PUSH
38750: LD_VAR 0 3
38754: PPUSH
38755: LD_INT 2
38757: PPUSH
38758: CALL_OW 275
38762: PUSH
38763: LD_VAR 0 4
38767: PUSH
38768: LD_INT 2
38770: ARRAY
38771: GREATEREQUAL
38772: AND
38773: PUSH
38774: LD_VAR 0 3
38778: PPUSH
38779: LD_INT 3
38781: PPUSH
38782: CALL_OW 275
38786: PUSH
38787: LD_VAR 0 4
38791: PUSH
38792: LD_INT 3
38794: ARRAY
38795: GREATEREQUAL
38796: AND
38797: ST_TO_ADDR
// end ;
38798: LD_VAR 0 2
38802: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38803: LD_INT 0
38805: PPUSH
38806: PPUSH
38807: PPUSH
// pom := GetBase ( building ) ;
38808: LD_ADDR_VAR 0 4
38812: PUSH
38813: LD_VAR 0 1
38817: PPUSH
38818: CALL_OW 274
38822: ST_TO_ADDR
// if not pom then
38823: LD_VAR 0 4
38827: NOT
38828: IFFALSE 38832
// exit ;
38830: GO 38933
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38832: LD_ADDR_VAR 0 5
38836: PUSH
38837: LD_VAR 0 2
38841: PPUSH
38842: LD_VAR 0 1
38846: PPUSH
38847: CALL_OW 248
38851: PPUSH
38852: CALL_OW 450
38856: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38857: LD_ADDR_VAR 0 3
38861: PUSH
38862: LD_VAR 0 4
38866: PPUSH
38867: LD_INT 1
38869: PPUSH
38870: CALL_OW 275
38874: PUSH
38875: LD_VAR 0 5
38879: PUSH
38880: LD_INT 1
38882: ARRAY
38883: GREATEREQUAL
38884: PUSH
38885: LD_VAR 0 4
38889: PPUSH
38890: LD_INT 2
38892: PPUSH
38893: CALL_OW 275
38897: PUSH
38898: LD_VAR 0 5
38902: PUSH
38903: LD_INT 2
38905: ARRAY
38906: GREATEREQUAL
38907: AND
38908: PUSH
38909: LD_VAR 0 4
38913: PPUSH
38914: LD_INT 3
38916: PPUSH
38917: CALL_OW 275
38921: PUSH
38922: LD_VAR 0 5
38926: PUSH
38927: LD_INT 3
38929: ARRAY
38930: GREATEREQUAL
38931: AND
38932: ST_TO_ADDR
// end ;
38933: LD_VAR 0 3
38937: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
38938: LD_INT 0
38940: PPUSH
38941: PPUSH
38942: PPUSH
38943: PPUSH
38944: PPUSH
38945: PPUSH
38946: PPUSH
38947: PPUSH
38948: PPUSH
38949: PPUSH
// result := false ;
38950: LD_ADDR_VAR 0 6
38954: PUSH
38955: LD_INT 0
38957: ST_TO_ADDR
// if not base or not btype or not x or not y then
38958: LD_VAR 0 1
38962: NOT
38963: PUSH
38964: LD_VAR 0 2
38968: NOT
38969: OR
38970: PUSH
38971: LD_VAR 0 3
38975: NOT
38976: OR
38977: PUSH
38978: LD_VAR 0 4
38982: NOT
38983: OR
38984: IFFALSE 38988
// exit ;
38986: GO 39597
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
38988: LD_ADDR_VAR 0 12
38992: PUSH
38993: LD_VAR 0 2
38997: PPUSH
38998: LD_VAR 0 3
39002: PPUSH
39003: LD_VAR 0 4
39007: PPUSH
39008: LD_VAR 0 5
39012: PPUSH
39013: LD_VAR 0 1
39017: PUSH
39018: LD_INT 1
39020: ARRAY
39021: PPUSH
39022: CALL_OW 248
39026: PPUSH
39027: LD_INT 0
39029: PPUSH
39030: CALL 40434 0 6
39034: ST_TO_ADDR
// if not hexes then
39035: LD_VAR 0 12
39039: NOT
39040: IFFALSE 39044
// exit ;
39042: GO 39597
// for i = 1 to hexes do
39044: LD_ADDR_VAR 0 7
39048: PUSH
39049: DOUBLE
39050: LD_INT 1
39052: DEC
39053: ST_TO_ADDR
39054: LD_VAR 0 12
39058: PUSH
39059: FOR_TO
39060: IFFALSE 39595
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39062: LD_ADDR_VAR 0 11
39066: PUSH
39067: LD_VAR 0 12
39071: PUSH
39072: LD_VAR 0 7
39076: ARRAY
39077: PUSH
39078: LD_INT 1
39080: ARRAY
39081: PPUSH
39082: LD_VAR 0 12
39086: PUSH
39087: LD_VAR 0 7
39091: ARRAY
39092: PUSH
39093: LD_INT 2
39095: ARRAY
39096: PPUSH
39097: CALL_OW 428
39101: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39102: LD_VAR 0 12
39106: PUSH
39107: LD_VAR 0 7
39111: ARRAY
39112: PUSH
39113: LD_INT 1
39115: ARRAY
39116: PPUSH
39117: LD_VAR 0 12
39121: PUSH
39122: LD_VAR 0 7
39126: ARRAY
39127: PUSH
39128: LD_INT 2
39130: ARRAY
39131: PPUSH
39132: CALL_OW 351
39136: PUSH
39137: LD_VAR 0 12
39141: PUSH
39142: LD_VAR 0 7
39146: ARRAY
39147: PUSH
39148: LD_INT 1
39150: ARRAY
39151: PPUSH
39152: LD_VAR 0 12
39156: PUSH
39157: LD_VAR 0 7
39161: ARRAY
39162: PUSH
39163: LD_INT 2
39165: ARRAY
39166: PPUSH
39167: CALL_OW 488
39171: NOT
39172: OR
39173: PUSH
39174: LD_VAR 0 11
39178: PPUSH
39179: CALL_OW 247
39183: PUSH
39184: LD_INT 3
39186: EQUAL
39187: OR
39188: IFFALSE 39194
// exit ;
39190: POP
39191: POP
39192: GO 39597
// if not tmp or not tmp in base then
39194: LD_VAR 0 11
39198: NOT
39199: PUSH
39200: LD_VAR 0 11
39204: PUSH
39205: LD_VAR 0 1
39209: IN
39210: NOT
39211: OR
39212: IFFALSE 39216
// continue ;
39214: GO 39059
// result := true ;
39216: LD_ADDR_VAR 0 6
39220: PUSH
39221: LD_INT 1
39223: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39224: LD_ADDR_VAR 0 15
39228: PUSH
39229: LD_VAR 0 1
39233: PPUSH
39234: LD_INT 22
39236: PUSH
39237: LD_VAR 0 11
39241: PPUSH
39242: CALL_OW 255
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 2
39253: PUSH
39254: LD_INT 30
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 30
39266: PUSH
39267: LD_INT 1
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: LIST
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PPUSH
39283: CALL_OW 72
39287: ST_TO_ADDR
// if dep then
39288: LD_VAR 0 15
39292: IFFALSE 39428
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39294: LD_ADDR_VAR 0 14
39298: PUSH
39299: LD_VAR 0 15
39303: PUSH
39304: LD_INT 1
39306: ARRAY
39307: PPUSH
39308: CALL_OW 250
39312: PPUSH
39313: LD_VAR 0 15
39317: PUSH
39318: LD_INT 1
39320: ARRAY
39321: PPUSH
39322: CALL_OW 254
39326: PPUSH
39327: LD_INT 5
39329: PPUSH
39330: CALL_OW 272
39334: PUSH
39335: LD_VAR 0 15
39339: PUSH
39340: LD_INT 1
39342: ARRAY
39343: PPUSH
39344: CALL_OW 251
39348: PPUSH
39349: LD_VAR 0 15
39353: PUSH
39354: LD_INT 1
39356: ARRAY
39357: PPUSH
39358: CALL_OW 254
39362: PPUSH
39363: LD_INT 5
39365: PPUSH
39366: CALL_OW 273
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39375: LD_VAR 0 14
39379: PUSH
39380: LD_INT 1
39382: ARRAY
39383: PPUSH
39384: LD_VAR 0 14
39388: PUSH
39389: LD_INT 2
39391: ARRAY
39392: PPUSH
39393: CALL_OW 488
39397: IFFALSE 39428
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39399: LD_VAR 0 11
39403: PPUSH
39404: LD_VAR 0 14
39408: PUSH
39409: LD_INT 1
39411: ARRAY
39412: PPUSH
39413: LD_VAR 0 14
39417: PUSH
39418: LD_INT 2
39420: ARRAY
39421: PPUSH
39422: CALL_OW 111
// continue ;
39426: GO 39059
// end ; end ; r := GetDir ( tmp ) ;
39428: LD_ADDR_VAR 0 13
39432: PUSH
39433: LD_VAR 0 11
39437: PPUSH
39438: CALL_OW 254
39442: ST_TO_ADDR
// if r = 5 then
39443: LD_VAR 0 13
39447: PUSH
39448: LD_INT 5
39450: EQUAL
39451: IFFALSE 39461
// r := 0 ;
39453: LD_ADDR_VAR 0 13
39457: PUSH
39458: LD_INT 0
39460: ST_TO_ADDR
// for j = r to 5 do
39461: LD_ADDR_VAR 0 8
39465: PUSH
39466: DOUBLE
39467: LD_VAR 0 13
39471: DEC
39472: ST_TO_ADDR
39473: LD_INT 5
39475: PUSH
39476: FOR_TO
39477: IFFALSE 39591
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39479: LD_ADDR_VAR 0 9
39483: PUSH
39484: LD_VAR 0 11
39488: PPUSH
39489: CALL_OW 250
39493: PPUSH
39494: LD_VAR 0 8
39498: PPUSH
39499: LD_INT 2
39501: PPUSH
39502: CALL_OW 272
39506: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39507: LD_ADDR_VAR 0 10
39511: PUSH
39512: LD_VAR 0 11
39516: PPUSH
39517: CALL_OW 251
39521: PPUSH
39522: LD_VAR 0 8
39526: PPUSH
39527: LD_INT 2
39529: PPUSH
39530: CALL_OW 273
39534: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39535: LD_VAR 0 9
39539: PPUSH
39540: LD_VAR 0 10
39544: PPUSH
39545: CALL_OW 488
39549: PUSH
39550: LD_VAR 0 9
39554: PPUSH
39555: LD_VAR 0 10
39559: PPUSH
39560: CALL_OW 428
39564: NOT
39565: AND
39566: IFFALSE 39589
// begin ComMoveXY ( tmp , _x , _y ) ;
39568: LD_VAR 0 11
39572: PPUSH
39573: LD_VAR 0 9
39577: PPUSH
39578: LD_VAR 0 10
39582: PPUSH
39583: CALL_OW 111
// break ;
39587: GO 39591
// end ; end ;
39589: GO 39476
39591: POP
39592: POP
// end ;
39593: GO 39059
39595: POP
39596: POP
// end ;
39597: LD_VAR 0 6
39601: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39602: LD_INT 0
39604: PPUSH
39605: PPUSH
39606: PPUSH
39607: PPUSH
39608: PPUSH
39609: PPUSH
39610: PPUSH
39611: PPUSH
39612: PPUSH
39613: PPUSH
// result := false ;
39614: LD_ADDR_VAR 0 6
39618: PUSH
39619: LD_INT 0
39621: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39622: LD_VAR 0 1
39626: NOT
39627: PUSH
39628: LD_VAR 0 1
39632: PPUSH
39633: CALL_OW 266
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: IN
39648: NOT
39649: OR
39650: PUSH
39651: LD_VAR 0 2
39655: NOT
39656: OR
39657: PUSH
39658: LD_VAR 0 5
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: LD_INT 3
39674: PUSH
39675: LD_INT 4
39677: PUSH
39678: LD_INT 5
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: IN
39689: NOT
39690: OR
39691: PUSH
39692: LD_VAR 0 3
39696: PPUSH
39697: LD_VAR 0 4
39701: PPUSH
39702: CALL_OW 488
39706: NOT
39707: OR
39708: IFFALSE 39712
// exit ;
39710: GO 40429
// pom := GetBase ( depot ) ;
39712: LD_ADDR_VAR 0 10
39716: PUSH
39717: LD_VAR 0 1
39721: PPUSH
39722: CALL_OW 274
39726: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39727: LD_ADDR_VAR 0 11
39731: PUSH
39732: LD_VAR 0 2
39736: PPUSH
39737: LD_VAR 0 1
39741: PPUSH
39742: CALL_OW 248
39746: PPUSH
39747: CALL_OW 450
39751: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39752: LD_VAR 0 10
39756: PPUSH
39757: LD_INT 1
39759: PPUSH
39760: CALL_OW 275
39764: PUSH
39765: LD_VAR 0 11
39769: PUSH
39770: LD_INT 1
39772: ARRAY
39773: GREATEREQUAL
39774: PUSH
39775: LD_VAR 0 10
39779: PPUSH
39780: LD_INT 2
39782: PPUSH
39783: CALL_OW 275
39787: PUSH
39788: LD_VAR 0 11
39792: PUSH
39793: LD_INT 2
39795: ARRAY
39796: GREATEREQUAL
39797: AND
39798: PUSH
39799: LD_VAR 0 10
39803: PPUSH
39804: LD_INT 3
39806: PPUSH
39807: CALL_OW 275
39811: PUSH
39812: LD_VAR 0 11
39816: PUSH
39817: LD_INT 3
39819: ARRAY
39820: GREATEREQUAL
39821: AND
39822: NOT
39823: IFFALSE 39827
// exit ;
39825: GO 40429
// if GetBType ( depot ) = b_depot then
39827: LD_VAR 0 1
39831: PPUSH
39832: CALL_OW 266
39836: PUSH
39837: LD_INT 0
39839: EQUAL
39840: IFFALSE 39852
// dist := 28 else
39842: LD_ADDR_VAR 0 14
39846: PUSH
39847: LD_INT 28
39849: ST_TO_ADDR
39850: GO 39860
// dist := 36 ;
39852: LD_ADDR_VAR 0 14
39856: PUSH
39857: LD_INT 36
39859: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39860: LD_VAR 0 1
39864: PPUSH
39865: LD_VAR 0 3
39869: PPUSH
39870: LD_VAR 0 4
39874: PPUSH
39875: CALL_OW 297
39879: PUSH
39880: LD_VAR 0 14
39884: GREATER
39885: IFFALSE 39889
// exit ;
39887: GO 40429
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39889: LD_ADDR_VAR 0 12
39893: PUSH
39894: LD_VAR 0 2
39898: PPUSH
39899: LD_VAR 0 3
39903: PPUSH
39904: LD_VAR 0 4
39908: PPUSH
39909: LD_VAR 0 5
39913: PPUSH
39914: LD_VAR 0 1
39918: PPUSH
39919: CALL_OW 248
39923: PPUSH
39924: LD_INT 0
39926: PPUSH
39927: CALL 40434 0 6
39931: ST_TO_ADDR
// if not hexes then
39932: LD_VAR 0 12
39936: NOT
39937: IFFALSE 39941
// exit ;
39939: GO 40429
// hex := GetHexInfo ( x , y ) ;
39941: LD_ADDR_VAR 0 15
39945: PUSH
39946: LD_VAR 0 3
39950: PPUSH
39951: LD_VAR 0 4
39955: PPUSH
39956: CALL_OW 546
39960: ST_TO_ADDR
// if hex [ 1 ] then
39961: LD_VAR 0 15
39965: PUSH
39966: LD_INT 1
39968: ARRAY
39969: IFFALSE 39973
// exit ;
39971: GO 40429
// height := hex [ 2 ] ;
39973: LD_ADDR_VAR 0 13
39977: PUSH
39978: LD_VAR 0 15
39982: PUSH
39983: LD_INT 2
39985: ARRAY
39986: ST_TO_ADDR
// for i = 1 to hexes do
39987: LD_ADDR_VAR 0 7
39991: PUSH
39992: DOUBLE
39993: LD_INT 1
39995: DEC
39996: ST_TO_ADDR
39997: LD_VAR 0 12
40001: PUSH
40002: FOR_TO
40003: IFFALSE 40333
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40005: LD_VAR 0 12
40009: PUSH
40010: LD_VAR 0 7
40014: ARRAY
40015: PUSH
40016: LD_INT 1
40018: ARRAY
40019: PPUSH
40020: LD_VAR 0 12
40024: PUSH
40025: LD_VAR 0 7
40029: ARRAY
40030: PUSH
40031: LD_INT 2
40033: ARRAY
40034: PPUSH
40035: CALL_OW 488
40039: NOT
40040: PUSH
40041: LD_VAR 0 12
40045: PUSH
40046: LD_VAR 0 7
40050: ARRAY
40051: PUSH
40052: LD_INT 1
40054: ARRAY
40055: PPUSH
40056: LD_VAR 0 12
40060: PUSH
40061: LD_VAR 0 7
40065: ARRAY
40066: PUSH
40067: LD_INT 2
40069: ARRAY
40070: PPUSH
40071: CALL_OW 428
40075: PUSH
40076: LD_INT 0
40078: GREATER
40079: OR
40080: PUSH
40081: LD_VAR 0 12
40085: PUSH
40086: LD_VAR 0 7
40090: ARRAY
40091: PUSH
40092: LD_INT 1
40094: ARRAY
40095: PPUSH
40096: LD_VAR 0 12
40100: PUSH
40101: LD_VAR 0 7
40105: ARRAY
40106: PUSH
40107: LD_INT 2
40109: ARRAY
40110: PPUSH
40111: CALL_OW 351
40115: OR
40116: IFFALSE 40122
// exit ;
40118: POP
40119: POP
40120: GO 40429
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40122: LD_ADDR_VAR 0 8
40126: PUSH
40127: LD_VAR 0 12
40131: PUSH
40132: LD_VAR 0 7
40136: ARRAY
40137: PUSH
40138: LD_INT 1
40140: ARRAY
40141: PPUSH
40142: LD_VAR 0 12
40146: PUSH
40147: LD_VAR 0 7
40151: ARRAY
40152: PUSH
40153: LD_INT 2
40155: ARRAY
40156: PPUSH
40157: CALL_OW 546
40161: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40162: LD_VAR 0 8
40166: PUSH
40167: LD_INT 1
40169: ARRAY
40170: PUSH
40171: LD_VAR 0 8
40175: PUSH
40176: LD_INT 2
40178: ARRAY
40179: PUSH
40180: LD_VAR 0 13
40184: PUSH
40185: LD_INT 2
40187: PLUS
40188: GREATER
40189: OR
40190: PUSH
40191: LD_VAR 0 8
40195: PUSH
40196: LD_INT 2
40198: ARRAY
40199: PUSH
40200: LD_VAR 0 13
40204: PUSH
40205: LD_INT 2
40207: MINUS
40208: LESS
40209: OR
40210: PUSH
40211: LD_VAR 0 8
40215: PUSH
40216: LD_INT 3
40218: ARRAY
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: LD_INT 8
40225: PUSH
40226: LD_INT 9
40228: PUSH
40229: LD_INT 10
40231: PUSH
40232: LD_INT 11
40234: PUSH
40235: LD_INT 12
40237: PUSH
40238: LD_INT 13
40240: PUSH
40241: LD_INT 16
40243: PUSH
40244: LD_INT 17
40246: PUSH
40247: LD_INT 18
40249: PUSH
40250: LD_INT 19
40252: PUSH
40253: LD_INT 20
40255: PUSH
40256: LD_INT 21
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: IN
40274: NOT
40275: OR
40276: PUSH
40277: LD_VAR 0 8
40281: PUSH
40282: LD_INT 5
40284: ARRAY
40285: NOT
40286: OR
40287: PUSH
40288: LD_VAR 0 8
40292: PUSH
40293: LD_INT 6
40295: ARRAY
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: LD_INT 2
40302: PUSH
40303: LD_INT 7
40305: PUSH
40306: LD_INT 9
40308: PUSH
40309: LD_INT 10
40311: PUSH
40312: LD_INT 11
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: IN
40323: NOT
40324: OR
40325: IFFALSE 40331
// exit ;
40327: POP
40328: POP
40329: GO 40429
// end ;
40331: GO 40002
40333: POP
40334: POP
// side := GetSide ( depot ) ;
40335: LD_ADDR_VAR 0 9
40339: PUSH
40340: LD_VAR 0 1
40344: PPUSH
40345: CALL_OW 255
40349: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40350: LD_VAR 0 9
40354: PPUSH
40355: LD_VAR 0 3
40359: PPUSH
40360: LD_VAR 0 4
40364: PPUSH
40365: LD_INT 20
40367: PPUSH
40368: CALL 33083 0 4
40372: PUSH
40373: LD_INT 4
40375: ARRAY
40376: IFFALSE 40380
// exit ;
40378: GO 40429
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40380: LD_VAR 0 2
40384: PUSH
40385: LD_INT 29
40387: PUSH
40388: LD_INT 30
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: IN
40395: PUSH
40396: LD_VAR 0 3
40400: PPUSH
40401: LD_VAR 0 4
40405: PPUSH
40406: LD_VAR 0 9
40410: PPUSH
40411: CALL_OW 440
40415: NOT
40416: AND
40417: IFFALSE 40421
// exit ;
40419: GO 40429
// result := true ;
40421: LD_ADDR_VAR 0 6
40425: PUSH
40426: LD_INT 1
40428: ST_TO_ADDR
// end ;
40429: LD_VAR 0 6
40433: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
40434: LD_INT 0
40436: PPUSH
40437: PPUSH
40438: PPUSH
40439: PPUSH
40440: PPUSH
40441: PPUSH
40442: PPUSH
40443: PPUSH
40444: PPUSH
40445: PPUSH
40446: PPUSH
40447: PPUSH
40448: PPUSH
40449: PPUSH
40450: PPUSH
40451: PPUSH
40452: PPUSH
40453: PPUSH
40454: PPUSH
40455: PPUSH
40456: PPUSH
40457: PPUSH
40458: PPUSH
40459: PPUSH
40460: PPUSH
40461: PPUSH
40462: PPUSH
40463: PPUSH
40464: PPUSH
40465: PPUSH
40466: PPUSH
40467: PPUSH
40468: PPUSH
40469: PPUSH
40470: PPUSH
40471: PPUSH
40472: PPUSH
40473: PPUSH
40474: PPUSH
40475: PPUSH
40476: PPUSH
40477: PPUSH
40478: PPUSH
40479: PPUSH
40480: PPUSH
40481: PPUSH
40482: PPUSH
40483: PPUSH
40484: PPUSH
40485: PPUSH
40486: PPUSH
40487: PPUSH
40488: PPUSH
40489: PPUSH
40490: PPUSH
40491: PPUSH
40492: PPUSH
40493: PPUSH
// result = [ ] ;
40494: LD_ADDR_VAR 0 7
40498: PUSH
40499: EMPTY
40500: ST_TO_ADDR
// temp_list = [ ] ;
40501: LD_ADDR_VAR 0 9
40505: PUSH
40506: EMPTY
40507: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40508: LD_VAR 0 4
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: LD_INT 2
40521: PUSH
40522: LD_INT 3
40524: PUSH
40525: LD_INT 4
40527: PUSH
40528: LD_INT 5
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: IN
40539: NOT
40540: PUSH
40541: LD_VAR 0 1
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: IN
40556: PUSH
40557: LD_VAR 0 5
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: LD_INT 3
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: LIST
40575: IN
40576: NOT
40577: AND
40578: OR
40579: IFFALSE 40583
// exit ;
40581: GO 58974
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40583: LD_VAR 0 1
40587: PUSH
40588: LD_INT 6
40590: PUSH
40591: LD_INT 7
40593: PUSH
40594: LD_INT 8
40596: PUSH
40597: LD_INT 13
40599: PUSH
40600: LD_INT 12
40602: PUSH
40603: LD_INT 15
40605: PUSH
40606: LD_INT 11
40608: PUSH
40609: LD_INT 14
40611: PUSH
40612: LD_INT 10
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: IN
40626: IFFALSE 40636
// btype = b_lab ;
40628: LD_ADDR_VAR 0 1
40632: PUSH
40633: LD_INT 6
40635: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40636: LD_VAR 0 6
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: LIST
40654: IN
40655: NOT
40656: PUSH
40657: LD_VAR 0 1
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: LD_INT 3
40673: PUSH
40674: LD_INT 6
40676: PUSH
40677: LD_INT 36
40679: PUSH
40680: LD_INT 4
40682: PUSH
40683: LD_INT 5
40685: PUSH
40686: LD_INT 31
40688: PUSH
40689: LD_INT 32
40691: PUSH
40692: LD_INT 33
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: IN
40708: NOT
40709: PUSH
40710: LD_VAR 0 6
40714: PUSH
40715: LD_INT 1
40717: EQUAL
40718: AND
40719: OR
40720: PUSH
40721: LD_VAR 0 1
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: LD_INT 3
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: IN
40736: NOT
40737: PUSH
40738: LD_VAR 0 6
40742: PUSH
40743: LD_INT 2
40745: EQUAL
40746: AND
40747: OR
40748: IFFALSE 40758
// mode = 0 ;
40750: LD_ADDR_VAR 0 6
40754: PUSH
40755: LD_INT 0
40757: ST_TO_ADDR
// case mode of 0 :
40758: LD_VAR 0 6
40762: PUSH
40763: LD_INT 0
40765: DOUBLE
40766: EQUAL
40767: IFTRUE 40771
40769: GO 52224
40771: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40772: LD_ADDR_VAR 0 11
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: LD_INT 1
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: LD_INT 2
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 2
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: LD_INT 2
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: LD_INT 3
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: LD_INT 3
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40965: LD_ADDR_VAR 0 12
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 2
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 2
41111: NEG
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 3
41122: NEG
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 3
41133: NEG
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41161: LD_ADDR_VAR 0 13
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 1
41219: NEG
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: LD_INT 1
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: LD_INT 2
41246: NEG
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 2
41264: PUSH
41265: LD_INT 2
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: LD_INT 2
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: NEG
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 2
41296: NEG
41297: PUSH
41298: LD_INT 2
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 2
41308: NEG
41309: PUSH
41310: LD_INT 3
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 3
41320: NEG
41321: PUSH
41322: LD_INT 2
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 3
41332: NEG
41333: PUSH
41334: LD_INT 3
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41360: LD_ADDR_VAR 0 14
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: NEG
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 2
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 2
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 3
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 3
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 2
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41556: LD_ADDR_VAR 0 15
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 2
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: NEG
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 3
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 3
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41749: LD_ADDR_VAR 0 16
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: PUSH
41843: LD_INT 1
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 2
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 2
41872: NEG
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 2
41884: NEG
41885: PUSH
41886: LD_INT 2
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 3
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 3
41906: PUSH
41907: LD_INT 3
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: LD_INT 3
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41942: LD_ADDR_VAR 0 17
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: LD_INT 2
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 2
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 2
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 2
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 2
42118: NEG
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 2
42129: NEG
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 2
42141: NEG
42142: PUSH
42143: LD_INT 2
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42172: LD_ADDR_VAR 0 18
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: LD_INT 2
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: PUSH
42298: LD_INT 1
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 2
42307: PUSH
42308: LD_INT 2
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 2
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: LD_INT 2
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: NEG
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 2
42359: NEG
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 2
42371: NEG
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42402: LD_ADDR_VAR 0 19
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: NEG
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: NEG
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 2
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 2
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 2
42527: PUSH
42528: LD_INT 1
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 2
42537: PUSH
42538: LD_INT 2
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: LD_INT 2
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 2
42578: NEG
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 2
42589: NEG
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 2
42601: NEG
42602: PUSH
42603: LD_INT 2
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42632: LD_ADDR_VAR 0 20
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: LD_INT 2
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 2
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 2
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 2
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 2
42767: PUSH
42768: LD_INT 2
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 2
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 2
42819: NEG
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 2
42831: NEG
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42862: LD_ADDR_VAR 0 21
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: LD_INT 2
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43092: LD_ADDR_VAR 0 22
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 2
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 2
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: LD_INT 2
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43322: LD_ADDR_VAR 0 23
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 2
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: LD_INT 2
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: LD_INT 3
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 3
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: LD_INT 2
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43602: LD_ADDR_VAR 0 24
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 2
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: LD_INT 2
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 2
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 2
43801: NEG
43802: PUSH
43803: LD_INT 2
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 3
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 3
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43878: LD_ADDR_VAR 0 25
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: LD_INT 2
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 2
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 2
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 3
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 3
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: LD_INT 3
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: LD_INT 3
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44152: LD_ADDR_VAR 0 26
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: NEG
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 2
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: LD_INT 2
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 2
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 2
44328: NEG
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: NEG
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 2
44351: NEG
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: LD_INT 3
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 3
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: LD_INT 2
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44428: LD_ADDR_VAR 0 27
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 2
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 3
44661: NEG
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 3
44673: NEG
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44708: LD_ADDR_VAR 0 28
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 2
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: NEG
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: LD_INT 2
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: LD_INT 3
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: LD_INT 3
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 3
44943: NEG
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 3
44955: NEG
44956: PUSH
44957: LD_INT 2
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44990: LD_ADDR_VAR 0 29
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: LD_INT 3
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 3
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 3
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 3
45234: NEG
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45269: LD_ADDR_VAR 0 30
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 2
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 2
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: LD_INT 3
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 3
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: LD_INT 3
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 3
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45547: LD_ADDR_VAR 0 31
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: LD_INT 3
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 3
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: LD_INT 3
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 3
45790: NEG
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45825: LD_ADDR_VAR 0 32
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 2
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: LD_INT 3
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 3
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: LD_INT 3
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 3
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46103: LD_ADDR_VAR 0 33
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 1
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: NEG
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: NEG
46294: PUSH
46295: LD_INT 3
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 3
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: LD_INT 2
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 3
46347: NEG
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46382: LD_ADDR_VAR 0 34
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: LD_INT 3
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 3
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: LD_INT 3
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 3
46627: NEG
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46662: LD_ADDR_VAR 0 35
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46774: LD_ADDR_VAR 0 36
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: LD_INT 2
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46886: LD_ADDR_VAR 0 37
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46998: LD_ADDR_VAR 0 38
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47110: LD_ADDR_VAR 0 39
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47222: LD_ADDR_VAR 0 40
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47334: LD_ADDR_VAR 0 41
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: LD_INT 2
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: LD_INT 2
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: NEG
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: LD_INT 3
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 3
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 3
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 3
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 3
47577: PUSH
47578: LD_INT 3
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: LD_INT 3
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 3
47608: NEG
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 3
47619: NEG
47620: PUSH
47621: LD_INT 1
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 3
47631: NEG
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 3
47643: NEG
47644: PUSH
47645: LD_INT 3
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47684: LD_ADDR_VAR 0 42
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: LD_INT 2
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 2
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: LD_INT 2
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: LD_INT 3
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: LD_INT 3
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 3
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 3
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 3
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 3
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 3
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 3
47981: NEG
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 3
47993: NEG
47994: PUSH
47995: LD_INT 3
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48034: LD_ADDR_VAR 0 43
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 3
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: LD_INT 3
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: LD_INT 2
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 3
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 3
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: LD_INT 3
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 3
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 3
48330: NEG
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 3
48341: NEG
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48382: LD_ADDR_VAR 0 44
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: LD_INT 3
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 3
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 3
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 3
48615: PUSH
48616: LD_INT 2
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 3
48625: PUSH
48626: LD_INT 3
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: LD_INT 3
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 3
48656: NEG
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 3
48667: NEG
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 3
48679: NEG
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 3
48691: NEG
48692: PUSH
48693: LD_INT 3
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48732: LD_ADDR_VAR 0 45
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: LD_INT 2
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: LD_INT 3
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: LD_INT 3
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: LD_INT 3
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 3
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 3
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 3
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 3
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: LD_INT 3
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 3
49029: NEG
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 3
49041: NEG
49042: PUSH
49043: LD_INT 3
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49082: LD_ADDR_VAR 0 46
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: LD_INT 3
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 3
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 3
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 3
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 3
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: LD_INT 3
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 3
49378: NEG
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 3
49389: NEG
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49430: LD_ADDR_VAR 0 47
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49581: LD_ADDR_VAR 0 48
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 2
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49728: LD_ADDR_VAR 0 49
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49872: LD_ADDR_VAR 0 50
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 2
49963: PUSH
49964: LD_INT 2
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 2
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50016: LD_ADDR_VAR 0 51
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: NEG
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50163: LD_ADDR_VAR 0 52
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: LD_INT 2
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: LD_INT 2
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50314: LD_ADDR_VAR 0 53
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 2
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 2
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50544: LD_ADDR_VAR 0 54
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 2
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 2
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: NEG
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: LD_INT 2
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50774: LD_ADDR_VAR 0 55
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 2
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51004: LD_ADDR_VAR 0 56
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: NEG
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: LD_INT 2
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51234: LD_ADDR_VAR 0 57
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51464: LD_ADDR_VAR 0 58
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 2
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 2
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51694: LD_ADDR_VAR 0 59
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51782: LD_ADDR_VAR 0 60
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51870: LD_ADDR_VAR 0 61
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51958: LD_ADDR_VAR 0 62
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52046: LD_ADDR_VAR 0 63
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52134: LD_ADDR_VAR 0 64
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: ST_TO_ADDR
// end ; 1 :
52222: GO 58119
52224: LD_INT 1
52226: DOUBLE
52227: EQUAL
52228: IFTRUE 52232
52230: GO 54855
52232: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52233: LD_ADDR_VAR 0 11
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: LD_INT 3
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: LD_INT 3
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: LIST
52276: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52277: LD_ADDR_VAR 0 12
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 3
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: LIST
52317: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52318: LD_ADDR_VAR 0 13
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 3
52335: PUSH
52336: LD_INT 3
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 2
52345: PUSH
52346: LD_INT 3
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52358: LD_ADDR_VAR 0 14
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 3
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: LIST
52398: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52399: LD_ADDR_VAR 0 15
52403: PUSH
52404: LD_INT 2
52406: NEG
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 3
52417: NEG
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 3
52428: NEG
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: LIST
52442: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52443: LD_ADDR_VAR 0 16
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: LD_INT 3
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 3
52462: NEG
52463: PUSH
52464: LD_INT 2
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 3
52474: NEG
52475: PUSH
52476: LD_INT 3
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: LIST
52488: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52489: LD_ADDR_VAR 0 17
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 3
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: LD_INT 3
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: LD_INT 2
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: LIST
52532: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52533: LD_ADDR_VAR 0 18
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 3
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: LIST
52573: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52574: LD_ADDR_VAR 0 19
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 3
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: LIST
52613: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52614: LD_ADDR_VAR 0 20
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: LIST
52654: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52655: LD_ADDR_VAR 0 21
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 3
52673: NEG
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 3
52684: NEG
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: LIST
52698: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52699: LD_ADDR_VAR 0 22
52703: PUSH
52704: LD_INT 2
52706: NEG
52707: PUSH
52708: LD_INT 3
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 3
52718: NEG
52719: PUSH
52720: LD_INT 2
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 3
52730: NEG
52731: PUSH
52732: LD_INT 3
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: LIST
52744: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52745: LD_ADDR_VAR 0 23
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: LD_INT 3
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 4
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: LD_INT 3
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: LIST
52788: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52789: LD_ADDR_VAR 0 24
52793: PUSH
52794: LD_INT 3
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 3
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 4
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: LIST
52829: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52830: LD_ADDR_VAR 0 25
52834: PUSH
52835: LD_INT 3
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 4
52847: PUSH
52848: LD_INT 3
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 3
52857: PUSH
52858: LD_INT 4
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: LIST
52869: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52870: LD_ADDR_VAR 0 26
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 3
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: LD_INT 4
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: LD_INT 3
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: LIST
52910: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52911: LD_ADDR_VAR 0 27
52915: PUSH
52916: LD_INT 3
52918: NEG
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 3
52929: NEG
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 4
52940: NEG
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: LIST
52954: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52955: LD_ADDR_VAR 0 28
52959: PUSH
52960: LD_INT 3
52962: NEG
52963: PUSH
52964: LD_INT 3
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 3
52974: NEG
52975: PUSH
52976: LD_INT 4
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 4
52986: NEG
52987: PUSH
52988: LD_INT 3
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: LIST
53000: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53001: LD_ADDR_VAR 0 29
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 3
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 3
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 2
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 4
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 4
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 3
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 5
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 5
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: LD_INT 4
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 6
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 6
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: LD_INT 5
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53156: LD_ADDR_VAR 0 30
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 3
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 3
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 3
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 4
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 4
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 4
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 5
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 5
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 5
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 6
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 6
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53299: LD_ADDR_VAR 0 31
53303: PUSH
53304: LD_INT 3
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 3
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 4
53336: PUSH
53337: LD_INT 3
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 4
53346: PUSH
53347: LD_INT 4
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 3
53356: PUSH
53357: LD_INT 4
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 5
53366: PUSH
53367: LD_INT 4
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 5
53376: PUSH
53377: LD_INT 5
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 4
53386: PUSH
53387: LD_INT 5
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 6
53396: PUSH
53397: LD_INT 5
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 6
53406: PUSH
53407: LD_INT 6
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 5
53416: PUSH
53417: LD_INT 6
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53438: LD_ADDR_VAR 0 32
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: LD_INT 4
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 4
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 5
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 5
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 4
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: LD_INT 6
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 6
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 5
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53581: LD_ADDR_VAR 0 33
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 3
53599: NEG
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 3
53610: NEG
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 3
53622: NEG
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 4
53633: NEG
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 4
53644: NEG
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 4
53656: NEG
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 5
53667: NEG
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 5
53678: NEG
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 5
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 6
53701: NEG
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 6
53712: NEG
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53736: LD_ADDR_VAR 0 34
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: LD_INT 3
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 3
53755: NEG
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: NEG
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 3
53779: NEG
53780: PUSH
53781: LD_INT 4
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 4
53791: NEG
53792: PUSH
53793: LD_INT 3
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 4
53803: NEG
53804: PUSH
53805: LD_INT 4
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 4
53815: NEG
53816: PUSH
53817: LD_INT 5
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 5
53827: NEG
53828: PUSH
53829: LD_INT 4
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 5
53839: NEG
53840: PUSH
53841: LD_INT 5
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 5
53851: NEG
53852: PUSH
53853: LD_INT 6
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 6
53863: NEG
53864: PUSH
53865: LD_INT 5
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 6
53875: NEG
53876: PUSH
53877: LD_INT 6
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53899: LD_ADDR_VAR 0 41
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: LD_INT 2
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 3
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: LIST
53942: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53943: LD_ADDR_VAR 0 42
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 3
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53984: LD_ADDR_VAR 0 43
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 3
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 2
54011: PUSH
54012: LD_INT 3
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: LIST
54023: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54024: LD_ADDR_VAR 0 44
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 3
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: LD_INT 2
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: LIST
54064: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54065: LD_ADDR_VAR 0 45
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: NEG
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 3
54094: NEG
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: LIST
54108: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54109: LD_ADDR_VAR 0 46
54113: PUSH
54114: LD_INT 2
54116: NEG
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: NEG
54129: PUSH
54130: LD_INT 3
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 3
54140: NEG
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: LIST
54154: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54155: LD_ADDR_VAR 0 47
54159: PUSH
54160: LD_INT 2
54162: NEG
54163: PUSH
54164: LD_INT 3
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: LD_INT 3
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54188: LD_ADDR_VAR 0 48
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54219: LD_ADDR_VAR 0 49
54223: PUSH
54224: LD_INT 3
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 3
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54248: LD_ADDR_VAR 0 50
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: LD_INT 3
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 3
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54277: LD_ADDR_VAR 0 51
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54308: LD_ADDR_VAR 0 52
54312: PUSH
54313: LD_INT 3
54315: NEG
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 3
54327: NEG
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54341: LD_ADDR_VAR 0 53
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: LD_INT 3
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: LD_INT 3
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: LIST
54384: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54385: LD_ADDR_VAR 0 54
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 3
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: LIST
54425: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54426: LD_ADDR_VAR 0 55
54430: PUSH
54431: LD_INT 3
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: LD_INT 3
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: LIST
54465: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54466: LD_ADDR_VAR 0 56
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 3
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 3
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: LIST
54506: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54507: LD_ADDR_VAR 0 57
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 3
54525: NEG
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: LIST
54550: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54551: LD_ADDR_VAR 0 58
54555: PUSH
54556: LD_INT 2
54558: NEG
54559: PUSH
54560: LD_INT 3
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 3
54570: NEG
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 3
54582: NEG
54583: PUSH
54584: LD_INT 3
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: LIST
54596: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54597: LD_ADDR_VAR 0 59
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: LIST
54640: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54641: LD_ADDR_VAR 0 60
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: LIST
54681: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54682: LD_ADDR_VAR 0 61
54686: PUSH
54687: LD_INT 2
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: LIST
54721: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54722: LD_ADDR_VAR 0 62
54726: PUSH
54727: LD_INT 1
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: LIST
54762: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54763: LD_ADDR_VAR 0 63
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: NEG
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: LIST
54806: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54807: LD_ADDR_VAR 0 64
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: NEG
54839: PUSH
54840: LD_INT 2
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: LIST
54852: ST_TO_ADDR
// end ; 2 :
54853: GO 58119
54855: LD_INT 2
54857: DOUBLE
54858: EQUAL
54859: IFTRUE 54863
54861: GO 58118
54863: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54864: LD_ADDR_VAR 0 29
54868: PUSH
54869: LD_INT 4
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 4
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 5
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 5
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 4
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 3
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 3
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 3
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 5
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 3
54964: PUSH
54965: LD_INT 3
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: LD_INT 2
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 4
54984: PUSH
54985: LD_INT 3
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 4
54994: PUSH
54995: LD_INT 4
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 3
55004: PUSH
55005: LD_INT 4
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: LD_INT 3
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 2
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 4
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: LD_INT 4
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 4
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 3
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 4
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: LD_INT 5
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 5
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: LD_INT 4
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 3
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: LD_INT 5
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: LD_INT 3
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 3
55147: NEG
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 4
55203: NEG
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 4
55214: NEG
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 4
55226: NEG
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 4
55249: NEG
55250: PUSH
55251: LD_INT 4
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 4
55261: NEG
55262: PUSH
55263: LD_INT 5
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 3
55273: NEG
55274: PUSH
55275: LD_INT 4
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 3
55285: NEG
55286: PUSH
55287: LD_INT 3
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 4
55297: NEG
55298: PUSH
55299: LD_INT 3
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 5
55309: NEG
55310: PUSH
55311: LD_INT 4
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 5
55321: NEG
55322: PUSH
55323: LD_INT 5
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 3
55333: NEG
55334: PUSH
55335: LD_INT 5
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 5
55345: NEG
55346: PUSH
55347: LD_INT 3
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55402: LD_ADDR_VAR 0 30
55406: PUSH
55407: LD_INT 4
55409: PUSH
55410: LD_INT 4
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 4
55419: PUSH
55420: LD_INT 3
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 5
55429: PUSH
55430: LD_INT 4
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 5
55439: PUSH
55440: LD_INT 5
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 4
55449: PUSH
55450: LD_INT 5
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 3
55459: PUSH
55460: LD_INT 4
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 3
55469: PUSH
55470: LD_INT 3
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 5
55479: PUSH
55480: LD_INT 3
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 3
55489: PUSH
55490: LD_INT 5
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 3
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 3
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 4
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 4
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: LD_INT 3
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 2
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: LD_INT 4
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 4
55592: NEG
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 4
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 3
55615: NEG
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 3
55626: NEG
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 4
55637: NEG
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 5
55648: NEG
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 5
55659: NEG
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 5
55671: NEG
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 3
55683: NEG
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 3
55694: NEG
55695: PUSH
55696: LD_INT 3
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 3
55706: NEG
55707: PUSH
55708: LD_INT 4
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: NEG
55719: PUSH
55720: LD_INT 3
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 3
55742: NEG
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 4
55754: NEG
55755: PUSH
55756: LD_INT 3
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 4
55766: NEG
55767: PUSH
55768: LD_INT 4
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: NEG
55779: PUSH
55780: LD_INT 4
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 4
55790: NEG
55791: PUSH
55792: LD_INT 2
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 4
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 5
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 4
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 3
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 3
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: LD_INT 4
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: LD_INT 5
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 2
55881: PUSH
55882: LD_INT 3
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: LD_INT 5
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55949: LD_ADDR_VAR 0 31
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 4
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 3
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 4
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 5
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: LD_INT 5
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: LD_INT 4
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: LD_INT 5
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: LD_INT 3
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: NEG
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: NEG
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 3
56094: NEG
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 4
56105: NEG
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 4
56116: NEG
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 4
56128: NEG
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 2
56140: NEG
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 4
56151: NEG
56152: PUSH
56153: LD_INT 4
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 4
56163: NEG
56164: PUSH
56165: LD_INT 5
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 3
56175: NEG
56176: PUSH
56177: LD_INT 4
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 3
56187: NEG
56188: PUSH
56189: LD_INT 3
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 4
56199: NEG
56200: PUSH
56201: LD_INT 3
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 5
56211: NEG
56212: PUSH
56213: LD_INT 4
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 5
56223: NEG
56224: PUSH
56225: LD_INT 5
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 3
56235: NEG
56236: PUSH
56237: LD_INT 5
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 5
56247: NEG
56248: PUSH
56249: LD_INT 3
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: LD_INT 3
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: LD_INT 4
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: PUSH
56282: LD_INT 3
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: LD_INT 4
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: LD_INT 2
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 2
56349: NEG
56350: PUSH
56351: LD_INT 4
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 4
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 4
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 5
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 5
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 4
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 3
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 3
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 5
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56499: LD_ADDR_VAR 0 32
56503: PUSH
56504: LD_INT 4
56506: NEG
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 4
56517: NEG
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 3
56529: NEG
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 3
56540: NEG
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 4
56551: NEG
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 5
56562: NEG
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 5
56573: NEG
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 5
56585: NEG
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 3
56597: NEG
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 3
56608: NEG
56609: PUSH
56610: LD_INT 3
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 3
56620: NEG
56621: PUSH
56622: LD_INT 4
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: NEG
56633: PUSH
56634: LD_INT 3
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 3
56656: NEG
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 4
56668: NEG
56669: PUSH
56670: LD_INT 3
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 4
56680: NEG
56681: PUSH
56682: LD_INT 4
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: LD_INT 4
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 4
56704: NEG
56705: PUSH
56706: LD_INT 2
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 4
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: LD_INT 5
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 4
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: LD_INT 3
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 3
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: LD_INT 4
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: LD_INT 5
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 2
56795: PUSH
56796: LD_INT 3
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 2
56806: NEG
56807: PUSH
56808: LD_INT 5
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 3
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 4
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 4
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 3
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 2
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 2
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: LD_INT 2
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 4
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 4
56911: PUSH
56912: LD_INT 4
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 4
56921: PUSH
56922: LD_INT 3
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 5
56931: PUSH
56932: LD_INT 4
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 5
56941: PUSH
56942: LD_INT 5
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 4
56951: PUSH
56952: LD_INT 5
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 3
56961: PUSH
56962: LD_INT 4
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 3
56971: PUSH
56972: LD_INT 3
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 5
56981: PUSH
56982: LD_INT 3
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: PUSH
56992: LD_INT 5
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57046: LD_ADDR_VAR 0 33
57050: PUSH
57051: LD_INT 4
57053: NEG
57054: PUSH
57055: LD_INT 4
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 4
57065: NEG
57066: PUSH
57067: LD_INT 5
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 3
57077: NEG
57078: PUSH
57079: LD_INT 4
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 3
57089: NEG
57090: PUSH
57091: LD_INT 3
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 4
57101: NEG
57102: PUSH
57103: LD_INT 3
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 5
57113: NEG
57114: PUSH
57115: LD_INT 4
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 5
57125: NEG
57126: PUSH
57127: LD_INT 5
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 3
57137: NEG
57138: PUSH
57139: LD_INT 5
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 5
57149: NEG
57150: PUSH
57151: LD_INT 3
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 3
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: LD_INT 4
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 3
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 2
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: LD_INT 3
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: LD_INT 4
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 2
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 2
57251: NEG
57252: PUSH
57253: LD_INT 4
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 4
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 5
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 5
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 4
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 3
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 3
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 3
57335: PUSH
57336: LD_INT 2
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 5
57346: PUSH
57347: LD_INT 2
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 3
57356: PUSH
57357: LD_INT 3
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 3
57366: PUSH
57367: LD_INT 2
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 4
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 4
57386: PUSH
57387: LD_INT 4
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: PUSH
57397: LD_INT 4
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 4
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: LD_INT 4
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 4
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 3
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: LD_INT 4
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: LD_INT 5
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: LD_INT 5
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: LD_INT 4
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: LD_INT 3
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 2
57518: PUSH
57519: LD_INT 5
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: NEG
57529: PUSH
57530: LD_INT 3
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57584: LD_ADDR_VAR 0 34
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 4
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 5
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: LD_INT 4
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: LD_INT 3
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: LD_INT 3
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: LD_INT 4
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: LD_INT 5
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: LD_INT 3
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: NEG
57682: PUSH
57683: LD_INT 5
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 3
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 3
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 4
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 4
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 3
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 4
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 4
57786: PUSH
57787: LD_INT 4
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 4
57796: PUSH
57797: LD_INT 3
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 5
57806: PUSH
57807: LD_INT 4
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 5
57816: PUSH
57817: LD_INT 5
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 4
57826: PUSH
57827: LD_INT 5
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: PUSH
57837: LD_INT 4
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 3
57846: PUSH
57847: LD_INT 3
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 5
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: LD_INT 5
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: LD_INT 3
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 2
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: LD_INT 3
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: LD_INT 4
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: LD_INT 4
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: LD_INT 3
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: LD_INT 4
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: NEG
57959: PUSH
57960: LD_INT 2
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 4
57969: NEG
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 4
57980: NEG
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 3
57992: NEG
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 3
58003: NEG
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 4
58014: NEG
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 5
58025: NEG
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 5
58036: NEG
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 5
58048: NEG
58049: PUSH
58050: LD_INT 2
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: ST_TO_ADDR
// end ; end ;
58116: GO 58119
58118: POP
// case btype of b_depot , b_warehouse :
58119: LD_VAR 0 1
58123: PUSH
58124: LD_INT 0
58126: DOUBLE
58127: EQUAL
58128: IFTRUE 58138
58130: LD_INT 1
58132: DOUBLE
58133: EQUAL
58134: IFTRUE 58138
58136: GO 58339
58138: POP
// case nation of nation_american :
58139: LD_VAR 0 5
58143: PUSH
58144: LD_INT 1
58146: DOUBLE
58147: EQUAL
58148: IFTRUE 58152
58150: GO 58208
58152: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
58153: LD_ADDR_VAR 0 9
58157: PUSH
58158: LD_VAR 0 11
58162: PUSH
58163: LD_VAR 0 12
58167: PUSH
58168: LD_VAR 0 13
58172: PUSH
58173: LD_VAR 0 14
58177: PUSH
58178: LD_VAR 0 15
58182: PUSH
58183: LD_VAR 0 16
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: PUSH
58196: LD_VAR 0 4
58200: PUSH
58201: LD_INT 1
58203: PLUS
58204: ARRAY
58205: ST_TO_ADDR
58206: GO 58337
58208: LD_INT 2
58210: DOUBLE
58211: EQUAL
58212: IFTRUE 58216
58214: GO 58272
58216: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
58217: LD_ADDR_VAR 0 9
58221: PUSH
58222: LD_VAR 0 17
58226: PUSH
58227: LD_VAR 0 18
58231: PUSH
58232: LD_VAR 0 19
58236: PUSH
58237: LD_VAR 0 20
58241: PUSH
58242: LD_VAR 0 21
58246: PUSH
58247: LD_VAR 0 22
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: PUSH
58260: LD_VAR 0 4
58264: PUSH
58265: LD_INT 1
58267: PLUS
58268: ARRAY
58269: ST_TO_ADDR
58270: GO 58337
58272: LD_INT 3
58274: DOUBLE
58275: EQUAL
58276: IFTRUE 58280
58278: GO 58336
58280: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58281: LD_ADDR_VAR 0 9
58285: PUSH
58286: LD_VAR 0 23
58290: PUSH
58291: LD_VAR 0 24
58295: PUSH
58296: LD_VAR 0 25
58300: PUSH
58301: LD_VAR 0 26
58305: PUSH
58306: LD_VAR 0 27
58310: PUSH
58311: LD_VAR 0 28
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: PUSH
58324: LD_VAR 0 4
58328: PUSH
58329: LD_INT 1
58331: PLUS
58332: ARRAY
58333: ST_TO_ADDR
58334: GO 58337
58336: POP
58337: GO 58892
58339: LD_INT 2
58341: DOUBLE
58342: EQUAL
58343: IFTRUE 58353
58345: LD_INT 3
58347: DOUBLE
58348: EQUAL
58349: IFTRUE 58353
58351: GO 58409
58353: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58354: LD_ADDR_VAR 0 9
58358: PUSH
58359: LD_VAR 0 29
58363: PUSH
58364: LD_VAR 0 30
58368: PUSH
58369: LD_VAR 0 31
58373: PUSH
58374: LD_VAR 0 32
58378: PUSH
58379: LD_VAR 0 33
58383: PUSH
58384: LD_VAR 0 34
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: PUSH
58397: LD_VAR 0 4
58401: PUSH
58402: LD_INT 1
58404: PLUS
58405: ARRAY
58406: ST_TO_ADDR
58407: GO 58892
58409: LD_INT 16
58411: DOUBLE
58412: EQUAL
58413: IFTRUE 58471
58415: LD_INT 17
58417: DOUBLE
58418: EQUAL
58419: IFTRUE 58471
58421: LD_INT 18
58423: DOUBLE
58424: EQUAL
58425: IFTRUE 58471
58427: LD_INT 19
58429: DOUBLE
58430: EQUAL
58431: IFTRUE 58471
58433: LD_INT 22
58435: DOUBLE
58436: EQUAL
58437: IFTRUE 58471
58439: LD_INT 20
58441: DOUBLE
58442: EQUAL
58443: IFTRUE 58471
58445: LD_INT 21
58447: DOUBLE
58448: EQUAL
58449: IFTRUE 58471
58451: LD_INT 23
58453: DOUBLE
58454: EQUAL
58455: IFTRUE 58471
58457: LD_INT 24
58459: DOUBLE
58460: EQUAL
58461: IFTRUE 58471
58463: LD_INT 25
58465: DOUBLE
58466: EQUAL
58467: IFTRUE 58471
58469: GO 58527
58471: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58472: LD_ADDR_VAR 0 9
58476: PUSH
58477: LD_VAR 0 35
58481: PUSH
58482: LD_VAR 0 36
58486: PUSH
58487: LD_VAR 0 37
58491: PUSH
58492: LD_VAR 0 38
58496: PUSH
58497: LD_VAR 0 39
58501: PUSH
58502: LD_VAR 0 40
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: PUSH
58515: LD_VAR 0 4
58519: PUSH
58520: LD_INT 1
58522: PLUS
58523: ARRAY
58524: ST_TO_ADDR
58525: GO 58892
58527: LD_INT 6
58529: DOUBLE
58530: EQUAL
58531: IFTRUE 58583
58533: LD_INT 7
58535: DOUBLE
58536: EQUAL
58537: IFTRUE 58583
58539: LD_INT 8
58541: DOUBLE
58542: EQUAL
58543: IFTRUE 58583
58545: LD_INT 13
58547: DOUBLE
58548: EQUAL
58549: IFTRUE 58583
58551: LD_INT 12
58553: DOUBLE
58554: EQUAL
58555: IFTRUE 58583
58557: LD_INT 15
58559: DOUBLE
58560: EQUAL
58561: IFTRUE 58583
58563: LD_INT 11
58565: DOUBLE
58566: EQUAL
58567: IFTRUE 58583
58569: LD_INT 14
58571: DOUBLE
58572: EQUAL
58573: IFTRUE 58583
58575: LD_INT 10
58577: DOUBLE
58578: EQUAL
58579: IFTRUE 58583
58581: GO 58639
58583: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
58584: LD_ADDR_VAR 0 9
58588: PUSH
58589: LD_VAR 0 41
58593: PUSH
58594: LD_VAR 0 42
58598: PUSH
58599: LD_VAR 0 43
58603: PUSH
58604: LD_VAR 0 44
58608: PUSH
58609: LD_VAR 0 45
58613: PUSH
58614: LD_VAR 0 46
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: PUSH
58627: LD_VAR 0 4
58631: PUSH
58632: LD_INT 1
58634: PLUS
58635: ARRAY
58636: ST_TO_ADDR
58637: GO 58892
58639: LD_INT 36
58641: DOUBLE
58642: EQUAL
58643: IFTRUE 58647
58645: GO 58703
58647: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58648: LD_ADDR_VAR 0 9
58652: PUSH
58653: LD_VAR 0 47
58657: PUSH
58658: LD_VAR 0 48
58662: PUSH
58663: LD_VAR 0 49
58667: PUSH
58668: LD_VAR 0 50
58672: PUSH
58673: LD_VAR 0 51
58677: PUSH
58678: LD_VAR 0 52
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: PUSH
58691: LD_VAR 0 4
58695: PUSH
58696: LD_INT 1
58698: PLUS
58699: ARRAY
58700: ST_TO_ADDR
58701: GO 58892
58703: LD_INT 4
58705: DOUBLE
58706: EQUAL
58707: IFTRUE 58729
58709: LD_INT 5
58711: DOUBLE
58712: EQUAL
58713: IFTRUE 58729
58715: LD_INT 34
58717: DOUBLE
58718: EQUAL
58719: IFTRUE 58729
58721: LD_INT 37
58723: DOUBLE
58724: EQUAL
58725: IFTRUE 58729
58727: GO 58785
58729: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58730: LD_ADDR_VAR 0 9
58734: PUSH
58735: LD_VAR 0 53
58739: PUSH
58740: LD_VAR 0 54
58744: PUSH
58745: LD_VAR 0 55
58749: PUSH
58750: LD_VAR 0 56
58754: PUSH
58755: LD_VAR 0 57
58759: PUSH
58760: LD_VAR 0 58
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: PUSH
58773: LD_VAR 0 4
58777: PUSH
58778: LD_INT 1
58780: PLUS
58781: ARRAY
58782: ST_TO_ADDR
58783: GO 58892
58785: LD_INT 31
58787: DOUBLE
58788: EQUAL
58789: IFTRUE 58835
58791: LD_INT 32
58793: DOUBLE
58794: EQUAL
58795: IFTRUE 58835
58797: LD_INT 33
58799: DOUBLE
58800: EQUAL
58801: IFTRUE 58835
58803: LD_INT 27
58805: DOUBLE
58806: EQUAL
58807: IFTRUE 58835
58809: LD_INT 26
58811: DOUBLE
58812: EQUAL
58813: IFTRUE 58835
58815: LD_INT 28
58817: DOUBLE
58818: EQUAL
58819: IFTRUE 58835
58821: LD_INT 29
58823: DOUBLE
58824: EQUAL
58825: IFTRUE 58835
58827: LD_INT 30
58829: DOUBLE
58830: EQUAL
58831: IFTRUE 58835
58833: GO 58891
58835: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
58836: LD_ADDR_VAR 0 9
58840: PUSH
58841: LD_VAR 0 59
58845: PUSH
58846: LD_VAR 0 60
58850: PUSH
58851: LD_VAR 0 61
58855: PUSH
58856: LD_VAR 0 62
58860: PUSH
58861: LD_VAR 0 63
58865: PUSH
58866: LD_VAR 0 64
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: PUSH
58879: LD_VAR 0 4
58883: PUSH
58884: LD_INT 1
58886: PLUS
58887: ARRAY
58888: ST_TO_ADDR
58889: GO 58892
58891: POP
// temp_list2 = [ ] ;
58892: LD_ADDR_VAR 0 10
58896: PUSH
58897: EMPTY
58898: ST_TO_ADDR
// for i in temp_list do
58899: LD_ADDR_VAR 0 8
58903: PUSH
58904: LD_VAR 0 9
58908: PUSH
58909: FOR_IN
58910: IFFALSE 58962
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58912: LD_ADDR_VAR 0 10
58916: PUSH
58917: LD_VAR 0 10
58921: PUSH
58922: LD_VAR 0 8
58926: PUSH
58927: LD_INT 1
58929: ARRAY
58930: PUSH
58931: LD_VAR 0 2
58935: PLUS
58936: PUSH
58937: LD_VAR 0 8
58941: PUSH
58942: LD_INT 2
58944: ARRAY
58945: PUSH
58946: LD_VAR 0 3
58950: PLUS
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: EMPTY
58957: LIST
58958: ADD
58959: ST_TO_ADDR
58960: GO 58909
58962: POP
58963: POP
// result = temp_list2 ;
58964: LD_ADDR_VAR 0 7
58968: PUSH
58969: LD_VAR 0 10
58973: ST_TO_ADDR
// end ;
58974: LD_VAR 0 7
58978: RET
// export function EnemyInRange ( unit , dist ) ; begin
58979: LD_INT 0
58981: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58982: LD_ADDR_VAR 0 3
58986: PUSH
58987: LD_VAR 0 1
58991: PPUSH
58992: CALL_OW 255
58996: PPUSH
58997: LD_VAR 0 1
59001: PPUSH
59002: CALL_OW 250
59006: PPUSH
59007: LD_VAR 0 1
59011: PPUSH
59012: CALL_OW 251
59016: PPUSH
59017: LD_VAR 0 2
59021: PPUSH
59022: CALL 33083 0 4
59026: PUSH
59027: LD_INT 4
59029: ARRAY
59030: ST_TO_ADDR
// end ;
59031: LD_VAR 0 3
59035: RET
// export function PlayerSeeMe ( unit ) ; begin
59036: LD_INT 0
59038: PPUSH
// result := See ( your_side , unit ) ;
59039: LD_ADDR_VAR 0 2
59043: PUSH
59044: LD_OWVAR 2
59048: PPUSH
59049: LD_VAR 0 1
59053: PPUSH
59054: CALL_OW 292
59058: ST_TO_ADDR
// end ;
59059: LD_VAR 0 2
59063: RET
// export function ReverseDir ( unit ) ; begin
59064: LD_INT 0
59066: PPUSH
// if not unit then
59067: LD_VAR 0 1
59071: NOT
59072: IFFALSE 59076
// exit ;
59074: GO 59099
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59076: LD_ADDR_VAR 0 2
59080: PUSH
59081: LD_VAR 0 1
59085: PPUSH
59086: CALL_OW 254
59090: PUSH
59091: LD_INT 3
59093: PLUS
59094: PUSH
59095: LD_INT 6
59097: MOD
59098: ST_TO_ADDR
// end ;
59099: LD_VAR 0 2
59103: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59104: LD_INT 0
59106: PPUSH
59107: PPUSH
59108: PPUSH
59109: PPUSH
59110: PPUSH
// if not hexes then
59111: LD_VAR 0 2
59115: NOT
59116: IFFALSE 59120
// exit ;
59118: GO 59268
// dist := 9999 ;
59120: LD_ADDR_VAR 0 5
59124: PUSH
59125: LD_INT 9999
59127: ST_TO_ADDR
// for i = 1 to hexes do
59128: LD_ADDR_VAR 0 4
59132: PUSH
59133: DOUBLE
59134: LD_INT 1
59136: DEC
59137: ST_TO_ADDR
59138: LD_VAR 0 2
59142: PUSH
59143: FOR_TO
59144: IFFALSE 59256
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59146: LD_VAR 0 1
59150: PPUSH
59151: LD_VAR 0 2
59155: PUSH
59156: LD_VAR 0 4
59160: ARRAY
59161: PUSH
59162: LD_INT 1
59164: ARRAY
59165: PPUSH
59166: LD_VAR 0 2
59170: PUSH
59171: LD_VAR 0 4
59175: ARRAY
59176: PUSH
59177: LD_INT 2
59179: ARRAY
59180: PPUSH
59181: CALL_OW 297
59185: PUSH
59186: LD_VAR 0 5
59190: LESS
59191: IFFALSE 59254
// begin hex := hexes [ i ] ;
59193: LD_ADDR_VAR 0 7
59197: PUSH
59198: LD_VAR 0 2
59202: PUSH
59203: LD_VAR 0 4
59207: ARRAY
59208: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59209: LD_ADDR_VAR 0 5
59213: PUSH
59214: LD_VAR 0 1
59218: PPUSH
59219: LD_VAR 0 2
59223: PUSH
59224: LD_VAR 0 4
59228: ARRAY
59229: PUSH
59230: LD_INT 1
59232: ARRAY
59233: PPUSH
59234: LD_VAR 0 2
59238: PUSH
59239: LD_VAR 0 4
59243: ARRAY
59244: PUSH
59245: LD_INT 2
59247: ARRAY
59248: PPUSH
59249: CALL_OW 297
59253: ST_TO_ADDR
// end ; end ;
59254: GO 59143
59256: POP
59257: POP
// result := hex ;
59258: LD_ADDR_VAR 0 3
59262: PUSH
59263: LD_VAR 0 7
59267: ST_TO_ADDR
// end ;
59268: LD_VAR 0 3
59272: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59273: LD_INT 0
59275: PPUSH
59276: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59277: LD_VAR 0 1
59281: NOT
59282: PUSH
59283: LD_VAR 0 1
59287: PUSH
59288: LD_INT 21
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 23
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PPUSH
59312: CALL_OW 69
59316: IN
59317: NOT
59318: OR
59319: IFFALSE 59323
// exit ;
59321: GO 59370
// for i = 1 to 3 do
59323: LD_ADDR_VAR 0 3
59327: PUSH
59328: DOUBLE
59329: LD_INT 1
59331: DEC
59332: ST_TO_ADDR
59333: LD_INT 3
59335: PUSH
59336: FOR_TO
59337: IFFALSE 59368
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59339: LD_VAR 0 1
59343: PPUSH
59344: CALL_OW 250
59348: PPUSH
59349: LD_VAR 0 1
59353: PPUSH
59354: CALL_OW 251
59358: PPUSH
59359: LD_INT 1
59361: PPUSH
59362: CALL_OW 453
59366: GO 59336
59368: POP
59369: POP
// end ;
59370: LD_VAR 0 2
59374: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59375: LD_INT 0
59377: PPUSH
59378: PPUSH
59379: PPUSH
59380: PPUSH
59381: PPUSH
59382: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59383: LD_VAR 0 1
59387: NOT
59388: PUSH
59389: LD_VAR 0 2
59393: NOT
59394: OR
59395: PUSH
59396: LD_VAR 0 1
59400: PPUSH
59401: CALL_OW 314
59405: OR
59406: IFFALSE 59410
// exit ;
59408: GO 59851
// x := GetX ( enemy_unit ) ;
59410: LD_ADDR_VAR 0 7
59414: PUSH
59415: LD_VAR 0 2
59419: PPUSH
59420: CALL_OW 250
59424: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59425: LD_ADDR_VAR 0 8
59429: PUSH
59430: LD_VAR 0 2
59434: PPUSH
59435: CALL_OW 251
59439: ST_TO_ADDR
// if not x or not y then
59440: LD_VAR 0 7
59444: NOT
59445: PUSH
59446: LD_VAR 0 8
59450: NOT
59451: OR
59452: IFFALSE 59456
// exit ;
59454: GO 59851
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59456: LD_ADDR_VAR 0 6
59460: PUSH
59461: LD_VAR 0 7
59465: PPUSH
59466: LD_INT 0
59468: PPUSH
59469: LD_INT 4
59471: PPUSH
59472: CALL_OW 272
59476: PUSH
59477: LD_VAR 0 8
59481: PPUSH
59482: LD_INT 0
59484: PPUSH
59485: LD_INT 4
59487: PPUSH
59488: CALL_OW 273
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_VAR 0 7
59501: PPUSH
59502: LD_INT 1
59504: PPUSH
59505: LD_INT 4
59507: PPUSH
59508: CALL_OW 272
59512: PUSH
59513: LD_VAR 0 8
59517: PPUSH
59518: LD_INT 1
59520: PPUSH
59521: LD_INT 4
59523: PPUSH
59524: CALL_OW 273
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_VAR 0 7
59537: PPUSH
59538: LD_INT 2
59540: PPUSH
59541: LD_INT 4
59543: PPUSH
59544: CALL_OW 272
59548: PUSH
59549: LD_VAR 0 8
59553: PPUSH
59554: LD_INT 2
59556: PPUSH
59557: LD_INT 4
59559: PPUSH
59560: CALL_OW 273
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_VAR 0 7
59573: PPUSH
59574: LD_INT 3
59576: PPUSH
59577: LD_INT 4
59579: PPUSH
59580: CALL_OW 272
59584: PUSH
59585: LD_VAR 0 8
59589: PPUSH
59590: LD_INT 3
59592: PPUSH
59593: LD_INT 4
59595: PPUSH
59596: CALL_OW 273
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_VAR 0 7
59609: PPUSH
59610: LD_INT 4
59612: PPUSH
59613: LD_INT 4
59615: PPUSH
59616: CALL_OW 272
59620: PUSH
59621: LD_VAR 0 8
59625: PPUSH
59626: LD_INT 4
59628: PPUSH
59629: LD_INT 4
59631: PPUSH
59632: CALL_OW 273
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_VAR 0 7
59645: PPUSH
59646: LD_INT 5
59648: PPUSH
59649: LD_INT 4
59651: PPUSH
59652: CALL_OW 272
59656: PUSH
59657: LD_VAR 0 8
59661: PPUSH
59662: LD_INT 5
59664: PPUSH
59665: LD_INT 4
59667: PPUSH
59668: CALL_OW 273
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: ST_TO_ADDR
// for i = tmp downto 1 do
59685: LD_ADDR_VAR 0 4
59689: PUSH
59690: DOUBLE
59691: LD_VAR 0 6
59695: INC
59696: ST_TO_ADDR
59697: LD_INT 1
59699: PUSH
59700: FOR_DOWNTO
59701: IFFALSE 59802
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59703: LD_VAR 0 6
59707: PUSH
59708: LD_VAR 0 4
59712: ARRAY
59713: PUSH
59714: LD_INT 1
59716: ARRAY
59717: PPUSH
59718: LD_VAR 0 6
59722: PUSH
59723: LD_VAR 0 4
59727: ARRAY
59728: PUSH
59729: LD_INT 2
59731: ARRAY
59732: PPUSH
59733: CALL_OW 488
59737: NOT
59738: PUSH
59739: LD_VAR 0 6
59743: PUSH
59744: LD_VAR 0 4
59748: ARRAY
59749: PUSH
59750: LD_INT 1
59752: ARRAY
59753: PPUSH
59754: LD_VAR 0 6
59758: PUSH
59759: LD_VAR 0 4
59763: ARRAY
59764: PUSH
59765: LD_INT 2
59767: ARRAY
59768: PPUSH
59769: CALL_OW 428
59773: PUSH
59774: LD_INT 0
59776: NONEQUAL
59777: OR
59778: IFFALSE 59800
// tmp := Delete ( tmp , i ) ;
59780: LD_ADDR_VAR 0 6
59784: PUSH
59785: LD_VAR 0 6
59789: PPUSH
59790: LD_VAR 0 4
59794: PPUSH
59795: CALL_OW 3
59799: ST_TO_ADDR
59800: GO 59700
59802: POP
59803: POP
// j := GetClosestHex ( unit , tmp ) ;
59804: LD_ADDR_VAR 0 5
59808: PUSH
59809: LD_VAR 0 1
59813: PPUSH
59814: LD_VAR 0 6
59818: PPUSH
59819: CALL 59104 0 2
59823: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59824: LD_VAR 0 1
59828: PPUSH
59829: LD_VAR 0 5
59833: PUSH
59834: LD_INT 1
59836: ARRAY
59837: PPUSH
59838: LD_VAR 0 5
59842: PUSH
59843: LD_INT 2
59845: ARRAY
59846: PPUSH
59847: CALL_OW 111
// end ;
59851: LD_VAR 0 3
59855: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59856: LD_INT 0
59858: PPUSH
59859: PPUSH
59860: PPUSH
// uc_side = 0 ;
59861: LD_ADDR_OWVAR 20
59865: PUSH
59866: LD_INT 0
59868: ST_TO_ADDR
// uc_nation = 0 ;
59869: LD_ADDR_OWVAR 21
59873: PUSH
59874: LD_INT 0
59876: ST_TO_ADDR
// InitHc ;
59877: CALL_OW 19
// InitVc ;
59881: CALL_OW 20
// if mastodonts then
59885: LD_VAR 0 6
59889: IFFALSE 59956
// for i = 1 to mastodonts do
59891: LD_ADDR_VAR 0 11
59895: PUSH
59896: DOUBLE
59897: LD_INT 1
59899: DEC
59900: ST_TO_ADDR
59901: LD_VAR 0 6
59905: PUSH
59906: FOR_TO
59907: IFFALSE 59954
// begin vc_chassis := 31 ;
59909: LD_ADDR_OWVAR 37
59913: PUSH
59914: LD_INT 31
59916: ST_TO_ADDR
// vc_control := control_rider ;
59917: LD_ADDR_OWVAR 38
59921: PUSH
59922: LD_INT 4
59924: ST_TO_ADDR
// animal := CreateVehicle ;
59925: LD_ADDR_VAR 0 12
59929: PUSH
59930: CALL_OW 45
59934: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59935: LD_VAR 0 12
59939: PPUSH
59940: LD_VAR 0 8
59944: PPUSH
59945: LD_INT 0
59947: PPUSH
59948: CALL 62025 0 3
// end ;
59952: GO 59906
59954: POP
59955: POP
// if horses then
59956: LD_VAR 0 5
59960: IFFALSE 60027
// for i = 1 to horses do
59962: LD_ADDR_VAR 0 11
59966: PUSH
59967: DOUBLE
59968: LD_INT 1
59970: DEC
59971: ST_TO_ADDR
59972: LD_VAR 0 5
59976: PUSH
59977: FOR_TO
59978: IFFALSE 60025
// begin hc_class := 21 ;
59980: LD_ADDR_OWVAR 28
59984: PUSH
59985: LD_INT 21
59987: ST_TO_ADDR
// hc_gallery :=  ;
59988: LD_ADDR_OWVAR 33
59992: PUSH
59993: LD_STRING 
59995: ST_TO_ADDR
// animal := CreateHuman ;
59996: LD_ADDR_VAR 0 12
60000: PUSH
60001: CALL_OW 44
60005: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60006: LD_VAR 0 12
60010: PPUSH
60011: LD_VAR 0 8
60015: PPUSH
60016: LD_INT 0
60018: PPUSH
60019: CALL 62025 0 3
// end ;
60023: GO 59977
60025: POP
60026: POP
// if birds then
60027: LD_VAR 0 1
60031: IFFALSE 60098
// for i = 1 to birds do
60033: LD_ADDR_VAR 0 11
60037: PUSH
60038: DOUBLE
60039: LD_INT 1
60041: DEC
60042: ST_TO_ADDR
60043: LD_VAR 0 1
60047: PUSH
60048: FOR_TO
60049: IFFALSE 60096
// begin hc_class = 18 ;
60051: LD_ADDR_OWVAR 28
60055: PUSH
60056: LD_INT 18
60058: ST_TO_ADDR
// hc_gallery =  ;
60059: LD_ADDR_OWVAR 33
60063: PUSH
60064: LD_STRING 
60066: ST_TO_ADDR
// animal := CreateHuman ;
60067: LD_ADDR_VAR 0 12
60071: PUSH
60072: CALL_OW 44
60076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60077: LD_VAR 0 12
60081: PPUSH
60082: LD_VAR 0 8
60086: PPUSH
60087: LD_INT 0
60089: PPUSH
60090: CALL 62025 0 3
// end ;
60094: GO 60048
60096: POP
60097: POP
// if tigers then
60098: LD_VAR 0 2
60102: IFFALSE 60186
// for i = 1 to tigers do
60104: LD_ADDR_VAR 0 11
60108: PUSH
60109: DOUBLE
60110: LD_INT 1
60112: DEC
60113: ST_TO_ADDR
60114: LD_VAR 0 2
60118: PUSH
60119: FOR_TO
60120: IFFALSE 60184
// begin hc_class = class_tiger ;
60122: LD_ADDR_OWVAR 28
60126: PUSH
60127: LD_INT 14
60129: ST_TO_ADDR
// hc_gallery =  ;
60130: LD_ADDR_OWVAR 33
60134: PUSH
60135: LD_STRING 
60137: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60138: LD_ADDR_OWVAR 35
60142: PUSH
60143: LD_INT 7
60145: NEG
60146: PPUSH
60147: LD_INT 7
60149: PPUSH
60150: CALL_OW 12
60154: ST_TO_ADDR
// animal := CreateHuman ;
60155: LD_ADDR_VAR 0 12
60159: PUSH
60160: CALL_OW 44
60164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60165: LD_VAR 0 12
60169: PPUSH
60170: LD_VAR 0 8
60174: PPUSH
60175: LD_INT 0
60177: PPUSH
60178: CALL 62025 0 3
// end ;
60182: GO 60119
60184: POP
60185: POP
// if apemans then
60186: LD_VAR 0 3
60190: IFFALSE 60313
// for i = 1 to apemans do
60192: LD_ADDR_VAR 0 11
60196: PUSH
60197: DOUBLE
60198: LD_INT 1
60200: DEC
60201: ST_TO_ADDR
60202: LD_VAR 0 3
60206: PUSH
60207: FOR_TO
60208: IFFALSE 60311
// begin hc_class = class_apeman ;
60210: LD_ADDR_OWVAR 28
60214: PUSH
60215: LD_INT 12
60217: ST_TO_ADDR
// hc_gallery =  ;
60218: LD_ADDR_OWVAR 33
60222: PUSH
60223: LD_STRING 
60225: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
60226: LD_ADDR_OWVAR 35
60230: PUSH
60231: LD_INT 5
60233: NEG
60234: PPUSH
60235: LD_INT 5
60237: PPUSH
60238: CALL_OW 12
60242: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60243: LD_ADDR_OWVAR 31
60247: PUSH
60248: LD_INT 1
60250: PPUSH
60251: LD_INT 3
60253: PPUSH
60254: CALL_OW 12
60258: PUSH
60259: LD_INT 1
60261: PPUSH
60262: LD_INT 3
60264: PPUSH
60265: CALL_OW 12
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: ST_TO_ADDR
// animal := CreateHuman ;
60282: LD_ADDR_VAR 0 12
60286: PUSH
60287: CALL_OW 44
60291: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60292: LD_VAR 0 12
60296: PPUSH
60297: LD_VAR 0 8
60301: PPUSH
60302: LD_INT 0
60304: PPUSH
60305: CALL 62025 0 3
// end ;
60309: GO 60207
60311: POP
60312: POP
// if enchidnas then
60313: LD_VAR 0 4
60317: IFFALSE 60384
// for i = 1 to enchidnas do
60319: LD_ADDR_VAR 0 11
60323: PUSH
60324: DOUBLE
60325: LD_INT 1
60327: DEC
60328: ST_TO_ADDR
60329: LD_VAR 0 4
60333: PUSH
60334: FOR_TO
60335: IFFALSE 60382
// begin hc_class = 13 ;
60337: LD_ADDR_OWVAR 28
60341: PUSH
60342: LD_INT 13
60344: ST_TO_ADDR
// hc_gallery =  ;
60345: LD_ADDR_OWVAR 33
60349: PUSH
60350: LD_STRING 
60352: ST_TO_ADDR
// animal := CreateHuman ;
60353: LD_ADDR_VAR 0 12
60357: PUSH
60358: CALL_OW 44
60362: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60363: LD_VAR 0 12
60367: PPUSH
60368: LD_VAR 0 8
60372: PPUSH
60373: LD_INT 0
60375: PPUSH
60376: CALL 62025 0 3
// end ;
60380: GO 60334
60382: POP
60383: POP
// if fishes then
60384: LD_VAR 0 7
60388: IFFALSE 60455
// for i = 1 to fishes do
60390: LD_ADDR_VAR 0 11
60394: PUSH
60395: DOUBLE
60396: LD_INT 1
60398: DEC
60399: ST_TO_ADDR
60400: LD_VAR 0 7
60404: PUSH
60405: FOR_TO
60406: IFFALSE 60453
// begin hc_class = 20 ;
60408: LD_ADDR_OWVAR 28
60412: PUSH
60413: LD_INT 20
60415: ST_TO_ADDR
// hc_gallery =  ;
60416: LD_ADDR_OWVAR 33
60420: PUSH
60421: LD_STRING 
60423: ST_TO_ADDR
// animal := CreateHuman ;
60424: LD_ADDR_VAR 0 12
60428: PUSH
60429: CALL_OW 44
60433: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60434: LD_VAR 0 12
60438: PPUSH
60439: LD_VAR 0 9
60443: PPUSH
60444: LD_INT 0
60446: PPUSH
60447: CALL 62025 0 3
// end ;
60451: GO 60405
60453: POP
60454: POP
// end ;
60455: LD_VAR 0 10
60459: RET
// export function WantHeal ( sci , unit ) ; begin
60460: LD_INT 0
60462: PPUSH
// if GetTaskList ( sci ) > 0 then
60463: LD_VAR 0 1
60467: PPUSH
60468: CALL_OW 437
60472: PUSH
60473: LD_INT 0
60475: GREATER
60476: IFFALSE 60546
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60478: LD_VAR 0 1
60482: PPUSH
60483: CALL_OW 437
60487: PUSH
60488: LD_INT 1
60490: ARRAY
60491: PUSH
60492: LD_INT 1
60494: ARRAY
60495: PUSH
60496: LD_STRING l
60498: EQUAL
60499: PUSH
60500: LD_VAR 0 1
60504: PPUSH
60505: CALL_OW 437
60509: PUSH
60510: LD_INT 1
60512: ARRAY
60513: PUSH
60514: LD_INT 4
60516: ARRAY
60517: PUSH
60518: LD_VAR 0 2
60522: EQUAL
60523: AND
60524: IFFALSE 60536
// result := true else
60526: LD_ADDR_VAR 0 3
60530: PUSH
60531: LD_INT 1
60533: ST_TO_ADDR
60534: GO 60544
// result := false ;
60536: LD_ADDR_VAR 0 3
60540: PUSH
60541: LD_INT 0
60543: ST_TO_ADDR
// end else
60544: GO 60554
// result := false ;
60546: LD_ADDR_VAR 0 3
60550: PUSH
60551: LD_INT 0
60553: ST_TO_ADDR
// end ;
60554: LD_VAR 0 3
60558: RET
// export function HealTarget ( sci ) ; begin
60559: LD_INT 0
60561: PPUSH
// if not sci then
60562: LD_VAR 0 1
60566: NOT
60567: IFFALSE 60571
// exit ;
60569: GO 60636
// result := 0 ;
60571: LD_ADDR_VAR 0 2
60575: PUSH
60576: LD_INT 0
60578: ST_TO_ADDR
// if GetTaskList ( sci ) then
60579: LD_VAR 0 1
60583: PPUSH
60584: CALL_OW 437
60588: IFFALSE 60636
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60590: LD_VAR 0 1
60594: PPUSH
60595: CALL_OW 437
60599: PUSH
60600: LD_INT 1
60602: ARRAY
60603: PUSH
60604: LD_INT 1
60606: ARRAY
60607: PUSH
60608: LD_STRING l
60610: EQUAL
60611: IFFALSE 60636
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60613: LD_ADDR_VAR 0 2
60617: PUSH
60618: LD_VAR 0 1
60622: PPUSH
60623: CALL_OW 437
60627: PUSH
60628: LD_INT 1
60630: ARRAY
60631: PUSH
60632: LD_INT 4
60634: ARRAY
60635: ST_TO_ADDR
// end ;
60636: LD_VAR 0 2
60640: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60641: LD_INT 0
60643: PPUSH
60644: PPUSH
60645: PPUSH
60646: PPUSH
// if not base_units then
60647: LD_VAR 0 1
60651: NOT
60652: IFFALSE 60656
// exit ;
60654: GO 60743
// result := false ;
60656: LD_ADDR_VAR 0 2
60660: PUSH
60661: LD_INT 0
60663: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60664: LD_ADDR_VAR 0 5
60668: PUSH
60669: LD_VAR 0 1
60673: PPUSH
60674: LD_INT 21
60676: PUSH
60677: LD_INT 3
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PPUSH
60684: CALL_OW 72
60688: ST_TO_ADDR
// if not tmp then
60689: LD_VAR 0 5
60693: NOT
60694: IFFALSE 60698
// exit ;
60696: GO 60743
// for i in tmp do
60698: LD_ADDR_VAR 0 3
60702: PUSH
60703: LD_VAR 0 5
60707: PUSH
60708: FOR_IN
60709: IFFALSE 60741
// begin result := EnemyInRange ( i , 22 ) ;
60711: LD_ADDR_VAR 0 2
60715: PUSH
60716: LD_VAR 0 3
60720: PPUSH
60721: LD_INT 22
60723: PPUSH
60724: CALL 58979 0 2
60728: ST_TO_ADDR
// if result then
60729: LD_VAR 0 2
60733: IFFALSE 60739
// exit ;
60735: POP
60736: POP
60737: GO 60743
// end ;
60739: GO 60708
60741: POP
60742: POP
// end ;
60743: LD_VAR 0 2
60747: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60748: LD_INT 0
60750: PPUSH
60751: PPUSH
// if not units then
60752: LD_VAR 0 1
60756: NOT
60757: IFFALSE 60761
// exit ;
60759: GO 60831
// result := [ ] ;
60761: LD_ADDR_VAR 0 3
60765: PUSH
60766: EMPTY
60767: ST_TO_ADDR
// for i in units do
60768: LD_ADDR_VAR 0 4
60772: PUSH
60773: LD_VAR 0 1
60777: PUSH
60778: FOR_IN
60779: IFFALSE 60829
// if GetTag ( i ) = tag then
60781: LD_VAR 0 4
60785: PPUSH
60786: CALL_OW 110
60790: PUSH
60791: LD_VAR 0 2
60795: EQUAL
60796: IFFALSE 60827
// result := Insert ( result , result + 1 , i ) ;
60798: LD_ADDR_VAR 0 3
60802: PUSH
60803: LD_VAR 0 3
60807: PPUSH
60808: LD_VAR 0 3
60812: PUSH
60813: LD_INT 1
60815: PLUS
60816: PPUSH
60817: LD_VAR 0 4
60821: PPUSH
60822: CALL_OW 2
60826: ST_TO_ADDR
60827: GO 60778
60829: POP
60830: POP
// end ;
60831: LD_VAR 0 3
60835: RET
// export function IsDriver ( un ) ; begin
60836: LD_INT 0
60838: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60839: LD_ADDR_VAR 0 2
60843: PUSH
60844: LD_VAR 0 1
60848: PUSH
60849: LD_INT 55
60851: PUSH
60852: EMPTY
60853: LIST
60854: PPUSH
60855: CALL_OW 69
60859: IN
60860: ST_TO_ADDR
// end ;
60861: LD_VAR 0 2
60865: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60866: LD_INT 0
60868: PPUSH
60869: PPUSH
// list := [ ] ;
60870: LD_ADDR_VAR 0 5
60874: PUSH
60875: EMPTY
60876: ST_TO_ADDR
// case d of 0 :
60877: LD_VAR 0 3
60881: PUSH
60882: LD_INT 0
60884: DOUBLE
60885: EQUAL
60886: IFTRUE 60890
60888: GO 61023
60890: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60891: LD_ADDR_VAR 0 5
60895: PUSH
60896: LD_VAR 0 1
60900: PUSH
60901: LD_INT 4
60903: MINUS
60904: PUSH
60905: LD_VAR 0 2
60909: PUSH
60910: LD_INT 4
60912: MINUS
60913: PUSH
60914: LD_INT 2
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: LIST
60921: PUSH
60922: LD_VAR 0 1
60926: PUSH
60927: LD_INT 3
60929: MINUS
60930: PUSH
60931: LD_VAR 0 2
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: LIST
60943: PUSH
60944: LD_VAR 0 1
60948: PUSH
60949: LD_INT 4
60951: PLUS
60952: PUSH
60953: LD_VAR 0 2
60957: PUSH
60958: LD_INT 4
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: LIST
60965: PUSH
60966: LD_VAR 0 1
60970: PUSH
60971: LD_INT 3
60973: PLUS
60974: PUSH
60975: LD_VAR 0 2
60979: PUSH
60980: LD_INT 3
60982: PLUS
60983: PUSH
60984: LD_INT 5
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: LIST
60991: PUSH
60992: LD_VAR 0 1
60996: PUSH
60997: LD_VAR 0 2
61001: PUSH
61002: LD_INT 4
61004: PLUS
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: LIST
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: ST_TO_ADDR
// end ; 1 :
61021: GO 61721
61023: LD_INT 1
61025: DOUBLE
61026: EQUAL
61027: IFTRUE 61031
61029: GO 61164
61031: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61032: LD_ADDR_VAR 0 5
61036: PUSH
61037: LD_VAR 0 1
61041: PUSH
61042: LD_VAR 0 2
61046: PUSH
61047: LD_INT 4
61049: MINUS
61050: PUSH
61051: LD_INT 3
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: LIST
61058: PUSH
61059: LD_VAR 0 1
61063: PUSH
61064: LD_INT 3
61066: MINUS
61067: PUSH
61068: LD_VAR 0 2
61072: PUSH
61073: LD_INT 3
61075: MINUS
61076: PUSH
61077: LD_INT 2
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: LIST
61084: PUSH
61085: LD_VAR 0 1
61089: PUSH
61090: LD_INT 4
61092: MINUS
61093: PUSH
61094: LD_VAR 0 2
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: LIST
61106: PUSH
61107: LD_VAR 0 1
61111: PUSH
61112: LD_VAR 0 2
61116: PUSH
61117: LD_INT 3
61119: PLUS
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: LIST
61128: PUSH
61129: LD_VAR 0 1
61133: PUSH
61134: LD_INT 4
61136: PLUS
61137: PUSH
61138: LD_VAR 0 2
61142: PUSH
61143: LD_INT 4
61145: PLUS
61146: PUSH
61147: LD_INT 5
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: LIST
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: ST_TO_ADDR
// end ; 2 :
61162: GO 61721
61164: LD_INT 2
61166: DOUBLE
61167: EQUAL
61168: IFTRUE 61172
61170: GO 61301
61172: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61173: LD_ADDR_VAR 0 5
61177: PUSH
61178: LD_VAR 0 1
61182: PUSH
61183: LD_VAR 0 2
61187: PUSH
61188: LD_INT 3
61190: MINUS
61191: PUSH
61192: LD_INT 3
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: LIST
61199: PUSH
61200: LD_VAR 0 1
61204: PUSH
61205: LD_INT 4
61207: PLUS
61208: PUSH
61209: LD_VAR 0 2
61213: PUSH
61214: LD_INT 4
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: LIST
61221: PUSH
61222: LD_VAR 0 1
61226: PUSH
61227: LD_VAR 0 2
61231: PUSH
61232: LD_INT 4
61234: PLUS
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: LIST
61243: PUSH
61244: LD_VAR 0 1
61248: PUSH
61249: LD_INT 3
61251: MINUS
61252: PUSH
61253: LD_VAR 0 2
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: LIST
61265: PUSH
61266: LD_VAR 0 1
61270: PUSH
61271: LD_INT 4
61273: MINUS
61274: PUSH
61275: LD_VAR 0 2
61279: PUSH
61280: LD_INT 4
61282: MINUS
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: LIST
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: ST_TO_ADDR
// end ; 3 :
61299: GO 61721
61301: LD_INT 3
61303: DOUBLE
61304: EQUAL
61305: IFTRUE 61309
61307: GO 61442
61309: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61310: LD_ADDR_VAR 0 5
61314: PUSH
61315: LD_VAR 0 1
61319: PUSH
61320: LD_INT 3
61322: PLUS
61323: PUSH
61324: LD_VAR 0 2
61328: PUSH
61329: LD_INT 4
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: LIST
61336: PUSH
61337: LD_VAR 0 1
61341: PUSH
61342: LD_INT 4
61344: PLUS
61345: PUSH
61346: LD_VAR 0 2
61350: PUSH
61351: LD_INT 4
61353: PLUS
61354: PUSH
61355: LD_INT 5
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: LIST
61362: PUSH
61363: LD_VAR 0 1
61367: PUSH
61368: LD_INT 4
61370: MINUS
61371: PUSH
61372: LD_VAR 0 2
61376: PUSH
61377: LD_INT 1
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: LIST
61384: PUSH
61385: LD_VAR 0 1
61389: PUSH
61390: LD_VAR 0 2
61394: PUSH
61395: LD_INT 4
61397: MINUS
61398: PUSH
61399: LD_INT 3
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: LIST
61406: PUSH
61407: LD_VAR 0 1
61411: PUSH
61412: LD_INT 3
61414: MINUS
61415: PUSH
61416: LD_VAR 0 2
61420: PUSH
61421: LD_INT 3
61423: MINUS
61424: PUSH
61425: LD_INT 2
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: LIST
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: ST_TO_ADDR
// end ; 4 :
61440: GO 61721
61442: LD_INT 4
61444: DOUBLE
61445: EQUAL
61446: IFTRUE 61450
61448: GO 61583
61450: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61451: LD_ADDR_VAR 0 5
61455: PUSH
61456: LD_VAR 0 1
61460: PUSH
61461: LD_VAR 0 2
61465: PUSH
61466: LD_INT 4
61468: PLUS
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: LIST
61477: PUSH
61478: LD_VAR 0 1
61482: PUSH
61483: LD_INT 3
61485: PLUS
61486: PUSH
61487: LD_VAR 0 2
61491: PUSH
61492: LD_INT 3
61494: PLUS
61495: PUSH
61496: LD_INT 5
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: LIST
61503: PUSH
61504: LD_VAR 0 1
61508: PUSH
61509: LD_INT 4
61511: PLUS
61512: PUSH
61513: LD_VAR 0 2
61517: PUSH
61518: LD_INT 4
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: LIST
61525: PUSH
61526: LD_VAR 0 1
61530: PUSH
61531: LD_VAR 0 2
61535: PUSH
61536: LD_INT 3
61538: MINUS
61539: PUSH
61540: LD_INT 3
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: LIST
61547: PUSH
61548: LD_VAR 0 1
61552: PUSH
61553: LD_INT 4
61555: MINUS
61556: PUSH
61557: LD_VAR 0 2
61561: PUSH
61562: LD_INT 4
61564: MINUS
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: LIST
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: ST_TO_ADDR
// end ; 5 :
61581: GO 61721
61583: LD_INT 5
61585: DOUBLE
61586: EQUAL
61587: IFTRUE 61591
61589: GO 61720
61591: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61592: LD_ADDR_VAR 0 5
61596: PUSH
61597: LD_VAR 0 1
61601: PUSH
61602: LD_INT 4
61604: MINUS
61605: PUSH
61606: LD_VAR 0 2
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: LIST
61618: PUSH
61619: LD_VAR 0 1
61623: PUSH
61624: LD_VAR 0 2
61628: PUSH
61629: LD_INT 4
61631: MINUS
61632: PUSH
61633: LD_INT 3
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: LIST
61640: PUSH
61641: LD_VAR 0 1
61645: PUSH
61646: LD_INT 4
61648: PLUS
61649: PUSH
61650: LD_VAR 0 2
61654: PUSH
61655: LD_INT 4
61657: PLUS
61658: PUSH
61659: LD_INT 5
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: LIST
61666: PUSH
61667: LD_VAR 0 1
61671: PUSH
61672: LD_INT 3
61674: PLUS
61675: PUSH
61676: LD_VAR 0 2
61680: PUSH
61681: LD_INT 4
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: LIST
61688: PUSH
61689: LD_VAR 0 1
61693: PUSH
61694: LD_VAR 0 2
61698: PUSH
61699: LD_INT 3
61701: PLUS
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: LIST
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: ST_TO_ADDR
// end ; end ;
61718: GO 61721
61720: POP
// result := list ;
61721: LD_ADDR_VAR 0 4
61725: PUSH
61726: LD_VAR 0 5
61730: ST_TO_ADDR
// end ;
61731: LD_VAR 0 4
61735: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61736: LD_INT 0
61738: PPUSH
61739: PPUSH
61740: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61741: LD_VAR 0 1
61745: NOT
61746: PUSH
61747: LD_VAR 0 2
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: LD_INT 3
61760: PUSH
61761: LD_INT 4
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: IN
61770: NOT
61771: OR
61772: IFFALSE 61776
// exit ;
61774: GO 61868
// tmp := [ ] ;
61776: LD_ADDR_VAR 0 5
61780: PUSH
61781: EMPTY
61782: ST_TO_ADDR
// for i in units do
61783: LD_ADDR_VAR 0 4
61787: PUSH
61788: LD_VAR 0 1
61792: PUSH
61793: FOR_IN
61794: IFFALSE 61837
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61796: LD_ADDR_VAR 0 5
61800: PUSH
61801: LD_VAR 0 5
61805: PPUSH
61806: LD_VAR 0 5
61810: PUSH
61811: LD_INT 1
61813: PLUS
61814: PPUSH
61815: LD_VAR 0 4
61819: PPUSH
61820: LD_VAR 0 2
61824: PPUSH
61825: CALL_OW 259
61829: PPUSH
61830: CALL_OW 2
61834: ST_TO_ADDR
61835: GO 61793
61837: POP
61838: POP
// if not tmp then
61839: LD_VAR 0 5
61843: NOT
61844: IFFALSE 61848
// exit ;
61846: GO 61868
// result := SortListByListDesc ( units , tmp ) ;
61848: LD_ADDR_VAR 0 3
61852: PUSH
61853: LD_VAR 0 1
61857: PPUSH
61858: LD_VAR 0 5
61862: PPUSH
61863: CALL_OW 77
61867: ST_TO_ADDR
// end ;
61868: LD_VAR 0 3
61872: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61873: LD_INT 0
61875: PPUSH
61876: PPUSH
61877: PPUSH
// x := GetX ( building ) ;
61878: LD_ADDR_VAR 0 4
61882: PUSH
61883: LD_VAR 0 2
61887: PPUSH
61888: CALL_OW 250
61892: ST_TO_ADDR
// y := GetY ( building ) ;
61893: LD_ADDR_VAR 0 5
61897: PUSH
61898: LD_VAR 0 2
61902: PPUSH
61903: CALL_OW 251
61907: ST_TO_ADDR
// if GetTaskList ( unit ) then
61908: LD_VAR 0 1
61912: PPUSH
61913: CALL_OW 437
61917: IFFALSE 62012
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61919: LD_STRING e
61921: PUSH
61922: LD_VAR 0 1
61926: PPUSH
61927: CALL_OW 437
61931: PUSH
61932: LD_INT 1
61934: ARRAY
61935: PUSH
61936: LD_INT 1
61938: ARRAY
61939: EQUAL
61940: PUSH
61941: LD_VAR 0 4
61945: PUSH
61946: LD_VAR 0 1
61950: PPUSH
61951: CALL_OW 437
61955: PUSH
61956: LD_INT 1
61958: ARRAY
61959: PUSH
61960: LD_INT 2
61962: ARRAY
61963: EQUAL
61964: AND
61965: PUSH
61966: LD_VAR 0 5
61970: PUSH
61971: LD_VAR 0 1
61975: PPUSH
61976: CALL_OW 437
61980: PUSH
61981: LD_INT 1
61983: ARRAY
61984: PUSH
61985: LD_INT 3
61987: ARRAY
61988: EQUAL
61989: AND
61990: IFFALSE 62002
// result := true else
61992: LD_ADDR_VAR 0 3
61996: PUSH
61997: LD_INT 1
61999: ST_TO_ADDR
62000: GO 62010
// result := false ;
62002: LD_ADDR_VAR 0 3
62006: PUSH
62007: LD_INT 0
62009: ST_TO_ADDR
// end else
62010: GO 62020
// result := false ;
62012: LD_ADDR_VAR 0 3
62016: PUSH
62017: LD_INT 0
62019: ST_TO_ADDR
// end ;
62020: LD_VAR 0 3
62024: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62025: LD_INT 0
62027: PPUSH
62028: PPUSH
62029: PPUSH
62030: PPUSH
// if not unit or not area then
62031: LD_VAR 0 1
62035: NOT
62036: PUSH
62037: LD_VAR 0 2
62041: NOT
62042: OR
62043: IFFALSE 62047
// exit ;
62045: GO 62211
// tmp := AreaToList ( area , i ) ;
62047: LD_ADDR_VAR 0 6
62051: PUSH
62052: LD_VAR 0 2
62056: PPUSH
62057: LD_VAR 0 5
62061: PPUSH
62062: CALL_OW 517
62066: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62067: LD_ADDR_VAR 0 5
62071: PUSH
62072: DOUBLE
62073: LD_INT 1
62075: DEC
62076: ST_TO_ADDR
62077: LD_VAR 0 6
62081: PUSH
62082: LD_INT 1
62084: ARRAY
62085: PUSH
62086: FOR_TO
62087: IFFALSE 62209
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62089: LD_ADDR_VAR 0 7
62093: PUSH
62094: LD_VAR 0 6
62098: PUSH
62099: LD_INT 1
62101: ARRAY
62102: PUSH
62103: LD_VAR 0 5
62107: ARRAY
62108: PUSH
62109: LD_VAR 0 6
62113: PUSH
62114: LD_INT 2
62116: ARRAY
62117: PUSH
62118: LD_VAR 0 5
62122: ARRAY
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62128: LD_VAR 0 7
62132: PUSH
62133: LD_INT 1
62135: ARRAY
62136: PPUSH
62137: LD_VAR 0 7
62141: PUSH
62142: LD_INT 2
62144: ARRAY
62145: PPUSH
62146: CALL_OW 428
62150: PUSH
62151: LD_INT 0
62153: EQUAL
62154: IFFALSE 62207
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62156: LD_VAR 0 1
62160: PPUSH
62161: LD_VAR 0 7
62165: PUSH
62166: LD_INT 1
62168: ARRAY
62169: PPUSH
62170: LD_VAR 0 7
62174: PUSH
62175: LD_INT 2
62177: ARRAY
62178: PPUSH
62179: LD_VAR 0 3
62183: PPUSH
62184: CALL_OW 48
// result := IsPlaced ( unit ) ;
62188: LD_ADDR_VAR 0 4
62192: PUSH
62193: LD_VAR 0 1
62197: PPUSH
62198: CALL_OW 305
62202: ST_TO_ADDR
// exit ;
62203: POP
62204: POP
62205: GO 62211
// end ; end ;
62207: GO 62086
62209: POP
62210: POP
// end ;
62211: LD_VAR 0 4
62215: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62216: LD_INT 0
62218: PPUSH
62219: PPUSH
62220: PPUSH
// if not side or side > 8 then
62221: LD_VAR 0 1
62225: NOT
62226: PUSH
62227: LD_VAR 0 1
62231: PUSH
62232: LD_INT 8
62234: GREATER
62235: OR
62236: IFFALSE 62240
// exit ;
62238: GO 62427
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62240: LD_ADDR_VAR 0 4
62244: PUSH
62245: LD_INT 22
62247: PUSH
62248: LD_VAR 0 1
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 21
62259: PUSH
62260: LD_INT 3
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PPUSH
62271: CALL_OW 69
62275: ST_TO_ADDR
// if not tmp then
62276: LD_VAR 0 4
62280: NOT
62281: IFFALSE 62285
// exit ;
62283: GO 62427
// enable_addtolog := true ;
62285: LD_ADDR_OWVAR 81
62289: PUSH
62290: LD_INT 1
62292: ST_TO_ADDR
// AddToLog ( [ ) ;
62293: LD_STRING [
62295: PPUSH
62296: CALL_OW 561
// for i in tmp do
62300: LD_ADDR_VAR 0 3
62304: PUSH
62305: LD_VAR 0 4
62309: PUSH
62310: FOR_IN
62311: IFFALSE 62418
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62313: LD_STRING [
62315: PUSH
62316: LD_VAR 0 3
62320: PPUSH
62321: CALL_OW 266
62325: STR
62326: PUSH
62327: LD_STRING , 
62329: STR
62330: PUSH
62331: LD_VAR 0 3
62335: PPUSH
62336: CALL_OW 250
62340: STR
62341: PUSH
62342: LD_STRING , 
62344: STR
62345: PUSH
62346: LD_VAR 0 3
62350: PPUSH
62351: CALL_OW 251
62355: STR
62356: PUSH
62357: LD_STRING , 
62359: STR
62360: PUSH
62361: LD_VAR 0 3
62365: PPUSH
62366: CALL_OW 254
62370: STR
62371: PUSH
62372: LD_STRING , 
62374: STR
62375: PUSH
62376: LD_VAR 0 3
62380: PPUSH
62381: LD_INT 1
62383: PPUSH
62384: CALL_OW 268
62388: STR
62389: PUSH
62390: LD_STRING , 
62392: STR
62393: PUSH
62394: LD_VAR 0 3
62398: PPUSH
62399: LD_INT 2
62401: PPUSH
62402: CALL_OW 268
62406: STR
62407: PUSH
62408: LD_STRING ],
62410: STR
62411: PPUSH
62412: CALL_OW 561
// end ;
62416: GO 62310
62418: POP
62419: POP
// AddToLog ( ]; ) ;
62420: LD_STRING ];
62422: PPUSH
62423: CALL_OW 561
// end ;
62427: LD_VAR 0 2
62431: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62432: LD_INT 0
62434: PPUSH
62435: PPUSH
62436: PPUSH
62437: PPUSH
62438: PPUSH
// if not area or not rate or not max then
62439: LD_VAR 0 1
62443: NOT
62444: PUSH
62445: LD_VAR 0 2
62449: NOT
62450: OR
62451: PUSH
62452: LD_VAR 0 4
62456: NOT
62457: OR
62458: IFFALSE 62462
// exit ;
62460: GO 62654
// while 1 do
62462: LD_INT 1
62464: IFFALSE 62654
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62466: LD_ADDR_VAR 0 9
62470: PUSH
62471: LD_VAR 0 1
62475: PPUSH
62476: LD_INT 1
62478: PPUSH
62479: CALL_OW 287
62483: PUSH
62484: LD_INT 10
62486: MUL
62487: ST_TO_ADDR
// r := rate / 10 ;
62488: LD_ADDR_VAR 0 7
62492: PUSH
62493: LD_VAR 0 2
62497: PUSH
62498: LD_INT 10
62500: DIVREAL
62501: ST_TO_ADDR
// time := 1 1$00 ;
62502: LD_ADDR_VAR 0 8
62506: PUSH
62507: LD_INT 2100
62509: ST_TO_ADDR
// if amount < min then
62510: LD_VAR 0 9
62514: PUSH
62515: LD_VAR 0 3
62519: LESS
62520: IFFALSE 62538
// r := r * 2 else
62522: LD_ADDR_VAR 0 7
62526: PUSH
62527: LD_VAR 0 7
62531: PUSH
62532: LD_INT 2
62534: MUL
62535: ST_TO_ADDR
62536: GO 62564
// if amount > max then
62538: LD_VAR 0 9
62542: PUSH
62543: LD_VAR 0 4
62547: GREATER
62548: IFFALSE 62564
// r := r / 2 ;
62550: LD_ADDR_VAR 0 7
62554: PUSH
62555: LD_VAR 0 7
62559: PUSH
62560: LD_INT 2
62562: DIVREAL
62563: ST_TO_ADDR
// time := time / r ;
62564: LD_ADDR_VAR 0 8
62568: PUSH
62569: LD_VAR 0 8
62573: PUSH
62574: LD_VAR 0 7
62578: DIVREAL
62579: ST_TO_ADDR
// if time < 0 then
62580: LD_VAR 0 8
62584: PUSH
62585: LD_INT 0
62587: LESS
62588: IFFALSE 62605
// time := time * - 1 ;
62590: LD_ADDR_VAR 0 8
62594: PUSH
62595: LD_VAR 0 8
62599: PUSH
62600: LD_INT 1
62602: NEG
62603: MUL
62604: ST_TO_ADDR
// wait ( time ) ;
62605: LD_VAR 0 8
62609: PPUSH
62610: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62614: LD_INT 35
62616: PPUSH
62617: LD_INT 875
62619: PPUSH
62620: CALL_OW 12
62624: PPUSH
62625: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62629: LD_INT 1
62631: PPUSH
62632: LD_INT 5
62634: PPUSH
62635: CALL_OW 12
62639: PPUSH
62640: LD_VAR 0 1
62644: PPUSH
62645: LD_INT 1
62647: PPUSH
62648: CALL_OW 55
// end ;
62652: GO 62462
// end ;
62654: LD_VAR 0 5
62658: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62659: LD_INT 0
62661: PPUSH
62662: PPUSH
62663: PPUSH
62664: PPUSH
62665: PPUSH
62666: PPUSH
62667: PPUSH
62668: PPUSH
// if not turrets or not factories then
62669: LD_VAR 0 1
62673: NOT
62674: PUSH
62675: LD_VAR 0 2
62679: NOT
62680: OR
62681: IFFALSE 62685
// exit ;
62683: GO 62992
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62685: LD_ADDR_VAR 0 10
62689: PUSH
62690: LD_INT 5
62692: PUSH
62693: LD_INT 6
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 2
62702: PUSH
62703: LD_INT 4
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 3
62712: PUSH
62713: LD_INT 5
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 24
62727: PUSH
62728: LD_INT 25
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 23
62737: PUSH
62738: LD_INT 27
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 42
62751: PUSH
62752: LD_INT 43
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 44
62761: PUSH
62762: LD_INT 46
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 45
62771: PUSH
62772: LD_INT 47
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: LIST
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: LIST
62788: ST_TO_ADDR
// result := [ ] ;
62789: LD_ADDR_VAR 0 3
62793: PUSH
62794: EMPTY
62795: ST_TO_ADDR
// for i in turrets do
62796: LD_ADDR_VAR 0 4
62800: PUSH
62801: LD_VAR 0 1
62805: PUSH
62806: FOR_IN
62807: IFFALSE 62990
// begin nat := GetNation ( i ) ;
62809: LD_ADDR_VAR 0 7
62813: PUSH
62814: LD_VAR 0 4
62818: PPUSH
62819: CALL_OW 248
62823: ST_TO_ADDR
// weapon := 0 ;
62824: LD_ADDR_VAR 0 8
62828: PUSH
62829: LD_INT 0
62831: ST_TO_ADDR
// if not nat then
62832: LD_VAR 0 7
62836: NOT
62837: IFFALSE 62841
// continue ;
62839: GO 62806
// for j in list [ nat ] do
62841: LD_ADDR_VAR 0 5
62845: PUSH
62846: LD_VAR 0 10
62850: PUSH
62851: LD_VAR 0 7
62855: ARRAY
62856: PUSH
62857: FOR_IN
62858: IFFALSE 62899
// if GetBWeapon ( i ) = j [ 1 ] then
62860: LD_VAR 0 4
62864: PPUSH
62865: CALL_OW 269
62869: PUSH
62870: LD_VAR 0 5
62874: PUSH
62875: LD_INT 1
62877: ARRAY
62878: EQUAL
62879: IFFALSE 62897
// begin weapon := j [ 2 ] ;
62881: LD_ADDR_VAR 0 8
62885: PUSH
62886: LD_VAR 0 5
62890: PUSH
62891: LD_INT 2
62893: ARRAY
62894: ST_TO_ADDR
// break ;
62895: GO 62899
// end ;
62897: GO 62857
62899: POP
62900: POP
// if not weapon then
62901: LD_VAR 0 8
62905: NOT
62906: IFFALSE 62910
// continue ;
62908: GO 62806
// for k in factories do
62910: LD_ADDR_VAR 0 6
62914: PUSH
62915: LD_VAR 0 2
62919: PUSH
62920: FOR_IN
62921: IFFALSE 62986
// begin weapons := AvailableWeaponList ( k ) ;
62923: LD_ADDR_VAR 0 9
62927: PUSH
62928: LD_VAR 0 6
62932: PPUSH
62933: CALL_OW 478
62937: ST_TO_ADDR
// if not weapons then
62938: LD_VAR 0 9
62942: NOT
62943: IFFALSE 62947
// continue ;
62945: GO 62920
// if weapon in weapons then
62947: LD_VAR 0 8
62951: PUSH
62952: LD_VAR 0 9
62956: IN
62957: IFFALSE 62984
// begin result := [ i , weapon ] ;
62959: LD_ADDR_VAR 0 3
62963: PUSH
62964: LD_VAR 0 4
62968: PUSH
62969: LD_VAR 0 8
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: ST_TO_ADDR
// exit ;
62978: POP
62979: POP
62980: POP
62981: POP
62982: GO 62992
// end ; end ;
62984: GO 62920
62986: POP
62987: POP
// end ;
62988: GO 62806
62990: POP
62991: POP
// end ;
62992: LD_VAR 0 3
62996: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62997: LD_INT 0
62999: PPUSH
// if not side or side > 8 then
63000: LD_VAR 0 3
63004: NOT
63005: PUSH
63006: LD_VAR 0 3
63010: PUSH
63011: LD_INT 8
63013: GREATER
63014: OR
63015: IFFALSE 63019
// exit ;
63017: GO 63078
// if not range then
63019: LD_VAR 0 4
63023: NOT
63024: IFFALSE 63035
// range := - 12 ;
63026: LD_ADDR_VAR 0 4
63030: PUSH
63031: LD_INT 12
63033: NEG
63034: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63035: LD_VAR 0 1
63039: PPUSH
63040: LD_VAR 0 2
63044: PPUSH
63045: LD_VAR 0 3
63049: PPUSH
63050: LD_VAR 0 4
63054: PPUSH
63055: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63059: LD_VAR 0 1
63063: PPUSH
63064: LD_VAR 0 2
63068: PPUSH
63069: LD_VAR 0 3
63073: PPUSH
63074: CALL_OW 331
// end ;
63078: LD_VAR 0 5
63082: RET
// export function Video ( mode ) ; begin
63083: LD_INT 0
63085: PPUSH
// ingame_video = mode ;
63086: LD_ADDR_OWVAR 52
63090: PUSH
63091: LD_VAR 0 1
63095: ST_TO_ADDR
// interface_hidden = mode ;
63096: LD_ADDR_OWVAR 54
63100: PUSH
63101: LD_VAR 0 1
63105: ST_TO_ADDR
// end ;
63106: LD_VAR 0 2
63110: RET
// export function Join ( array , element ) ; begin
63111: LD_INT 0
63113: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63114: LD_ADDR_VAR 0 3
63118: PUSH
63119: LD_VAR 0 1
63123: PPUSH
63124: LD_VAR 0 1
63128: PUSH
63129: LD_INT 1
63131: PLUS
63132: PPUSH
63133: LD_VAR 0 2
63137: PPUSH
63138: CALL_OW 1
63142: ST_TO_ADDR
// end ;
63143: LD_VAR 0 3
63147: RET
// export function JoinUnion ( array , element ) ; begin
63148: LD_INT 0
63150: PPUSH
// result := array union element ;
63151: LD_ADDR_VAR 0 3
63155: PUSH
63156: LD_VAR 0 1
63160: PUSH
63161: LD_VAR 0 2
63165: UNION
63166: ST_TO_ADDR
// end ;
63167: LD_VAR 0 3
63171: RET
// export function GetBehemoths ( side ) ; begin
63172: LD_INT 0
63174: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63175: LD_ADDR_VAR 0 2
63179: PUSH
63180: LD_INT 22
63182: PUSH
63183: LD_VAR 0 1
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 31
63194: PUSH
63195: LD_INT 25
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PPUSH
63206: CALL_OW 69
63210: ST_TO_ADDR
// end ;
63211: LD_VAR 0 2
63215: RET
// export function Shuffle ( array ) ; var i , index ; begin
63216: LD_INT 0
63218: PPUSH
63219: PPUSH
63220: PPUSH
// result := [ ] ;
63221: LD_ADDR_VAR 0 2
63225: PUSH
63226: EMPTY
63227: ST_TO_ADDR
// if not array then
63228: LD_VAR 0 1
63232: NOT
63233: IFFALSE 63237
// exit ;
63235: GO 63336
// Randomize ;
63237: CALL_OW 10
// for i = array downto 1 do
63241: LD_ADDR_VAR 0 3
63245: PUSH
63246: DOUBLE
63247: LD_VAR 0 1
63251: INC
63252: ST_TO_ADDR
63253: LD_INT 1
63255: PUSH
63256: FOR_DOWNTO
63257: IFFALSE 63334
// begin index := rand ( 1 , array ) ;
63259: LD_ADDR_VAR 0 4
63263: PUSH
63264: LD_INT 1
63266: PPUSH
63267: LD_VAR 0 1
63271: PPUSH
63272: CALL_OW 12
63276: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63277: LD_ADDR_VAR 0 2
63281: PUSH
63282: LD_VAR 0 2
63286: PPUSH
63287: LD_VAR 0 2
63291: PUSH
63292: LD_INT 1
63294: PLUS
63295: PPUSH
63296: LD_VAR 0 1
63300: PUSH
63301: LD_VAR 0 4
63305: ARRAY
63306: PPUSH
63307: CALL_OW 2
63311: ST_TO_ADDR
// array := Delete ( array , index ) ;
63312: LD_ADDR_VAR 0 1
63316: PUSH
63317: LD_VAR 0 1
63321: PPUSH
63322: LD_VAR 0 4
63326: PPUSH
63327: CALL_OW 3
63331: ST_TO_ADDR
// end ;
63332: GO 63256
63334: POP
63335: POP
// end ;
63336: LD_VAR 0 2
63340: RET
// export function GetBaseMaterials ( base ) ; begin
63341: LD_INT 0
63343: PPUSH
// result := [ 0 , 0 , 0 ] ;
63344: LD_ADDR_VAR 0 2
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: LIST
63362: ST_TO_ADDR
// if not base then
63363: LD_VAR 0 1
63367: NOT
63368: IFFALSE 63372
// exit ;
63370: GO 63421
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63372: LD_ADDR_VAR 0 2
63376: PUSH
63377: LD_VAR 0 1
63381: PPUSH
63382: LD_INT 1
63384: PPUSH
63385: CALL_OW 275
63389: PUSH
63390: LD_VAR 0 1
63394: PPUSH
63395: LD_INT 2
63397: PPUSH
63398: CALL_OW 275
63402: PUSH
63403: LD_VAR 0 1
63407: PPUSH
63408: LD_INT 3
63410: PPUSH
63411: CALL_OW 275
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: LIST
63420: ST_TO_ADDR
// end ;
63421: LD_VAR 0 2
63425: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63426: LD_INT 0
63428: PPUSH
63429: PPUSH
// result := array ;
63430: LD_ADDR_VAR 0 3
63434: PUSH
63435: LD_VAR 0 1
63439: ST_TO_ADDR
// if size > 0 then
63440: LD_VAR 0 2
63444: PUSH
63445: LD_INT 0
63447: GREATER
63448: IFFALSE 63494
// for i := array downto size do
63450: LD_ADDR_VAR 0 4
63454: PUSH
63455: DOUBLE
63456: LD_VAR 0 1
63460: INC
63461: ST_TO_ADDR
63462: LD_VAR 0 2
63466: PUSH
63467: FOR_DOWNTO
63468: IFFALSE 63492
// result := Delete ( result , result ) ;
63470: LD_ADDR_VAR 0 3
63474: PUSH
63475: LD_VAR 0 3
63479: PPUSH
63480: LD_VAR 0 3
63484: PPUSH
63485: CALL_OW 3
63489: ST_TO_ADDR
63490: GO 63467
63492: POP
63493: POP
// end ;
63494: LD_VAR 0 3
63498: RET
// export function ComExit ( unit ) ; var tmp ; begin
63499: LD_INT 0
63501: PPUSH
63502: PPUSH
// if not IsInUnit ( unit ) then
63503: LD_VAR 0 1
63507: PPUSH
63508: CALL_OW 310
63512: NOT
63513: IFFALSE 63517
// exit ;
63515: GO 63577
// tmp := IsInUnit ( unit ) ;
63517: LD_ADDR_VAR 0 3
63521: PUSH
63522: LD_VAR 0 1
63526: PPUSH
63527: CALL_OW 310
63531: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63532: LD_VAR 0 3
63536: PPUSH
63537: CALL_OW 247
63541: PUSH
63542: LD_INT 2
63544: EQUAL
63545: IFFALSE 63558
// ComExitVehicle ( unit ) else
63547: LD_VAR 0 1
63551: PPUSH
63552: CALL_OW 121
63556: GO 63567
// ComExitBuilding ( unit ) ;
63558: LD_VAR 0 1
63562: PPUSH
63563: CALL_OW 122
// result := tmp ;
63567: LD_ADDR_VAR 0 2
63571: PUSH
63572: LD_VAR 0 3
63576: ST_TO_ADDR
// end ;
63577: LD_VAR 0 2
63581: RET
// export function ResetHc ; begin
63582: LD_INT 0
63584: PPUSH
// InitHc ;
63585: CALL_OW 19
// hc_importance := 0 ;
63589: LD_ADDR_OWVAR 32
63593: PUSH
63594: LD_INT 0
63596: ST_TO_ADDR
// end ;
63597: LD_VAR 0 1
63601: RET
