// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode , achivCounter , destroyCounter ; export eventArabianAttack , eventRussianAttack , eventContaminate ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// spawnBurlak := 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// burlakStatus := 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// radarOnSpot := 0 ;
  31: LD_ADDR_EXP 30
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// radationResearched := 0 ;
  39: LD_ADDR_EXP 29
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// sibDestroyedCounter := 0 ;
  47: LD_ADDR_EXP 32
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// sibDeposits := [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  55: LD_ADDR_EXP 31
  59: PUSH
  60: LD_INT 91
  62: PUSH
  63: LD_INT 111
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 23
  72: PUSH
  73: LD_INT 37
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// arabianAttacksCounter := 0 ;
  84: LD_ADDR_EXP 33
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// destroyCounter := 0 ;
  92: LD_ADDR_EXP 42
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// resources := [ ] ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: EMPTY
 106: ST_TO_ADDR
// vehicles := [ ] ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: EMPTY
 113: ST_TO_ADDR
// eventVar1 := 0 ;
 114: LD_ADDR_EXP 35
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// eventVar2 := 0 ;
 122: LD_ADDR_EXP 36
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// eventVar3 := 0 ;
 130: LD_ADDR_EXP 37
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// eventVar4 := 0 ;
 138: LD_ADDR_EXP 38
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// eventVar5 := 0 ;
 146: LD_ADDR_EXP 39
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// eventArabianAttack := 1 ;
 154: LD_ADDR_EXP 43
 158: PUSH
 159: LD_INT 1
 161: ST_TO_ADDR
// eventRussianAttack := 2 ;
 162: LD_ADDR_EXP 44
 166: PUSH
 167: LD_INT 2
 169: ST_TO_ADDR
// eventContaminate := 3 ;
 170: LD_ADDR_EXP 45
 174: PUSH
 175: LD_INT 3
 177: ST_TO_ADDR
// mission_prefix := 13f_ ;
 178: LD_ADDR_EXP 34
 182: PUSH
 183: LD_STRING 13f_
 185: ST_TO_ADDR
// debugMode := 0 ;
 186: LD_ADDR_EXP 40
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// achivCounter := 0 ;
 194: LD_ADDR_EXP 41
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// if Difficulty = 1 then
 202: LD_OWVAR 67
 206: PUSH
 207: LD_INT 1
 209: EQUAL
 210: IFFALSE 219
// RemoveEnvironmentArea ( oilBlockArea ) ;
 212: LD_INT 15
 214: PPUSH
 215: CALL_OW 355
// if Difficulty < 4 then
 219: LD_OWVAR 67
 223: PUSH
 224: LD_INT 4
 226: LESS
 227: IFFALSE 236
// RemoveEnvironmentArea ( sibBlockArea ) ;
 229: LD_INT 18
 231: PPUSH
 232: CALL_OW 355
// PrepareVehicles ;
 236: CALL 1220 0 0
// PrepareHeroes ;
 240: CALL 477 0 0
// PrepareAmericansRandom ;
 244: CALL 1124 0 0
// PrepareDifficulty ;
 248: CALL 8426 0 0
// Action ;
 252: CALL 5290 0 0
// end ;
 256: END
// every 0 0$1 trigger debugMode do var i , j ;
 257: LD_EXP 40
 261: IFFALSE 432
 263: GO 265
 265: DISABLE
 266: LD_INT 0
 268: PPUSH
 269: PPUSH
// begin enable ;
 270: ENABLE
// FogOff ( true ) ;
 271: LD_INT 1
 273: PPUSH
 274: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 278: LD_ADDR_VAR 0 1
 282: PUSH
 283: LD_INT 22
 285: PUSH
 286: LD_INT 1
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: LD_INT 21
 295: PUSH
 296: LD_INT 1
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 329
// SetLives ( i , 1000 ) ;
 315: LD_VAR 0 1
 319: PPUSH
 320: LD_INT 1000
 322: PPUSH
 323: CALL_OW 234
 327: GO 312
 329: POP
 330: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 331: LD_ADDR_VAR 0 1
 335: PUSH
 336: LD_INT 22
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: LD_INT 30
 351: PUSH
 352: LD_INT 0
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 30
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PPUSH
 378: CALL_OW 69
 382: PUSH
 383: FOR_IN
 384: IFFALSE 430
// for j := 1 to 3 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 3
 398: PUSH
 399: FOR_TO
 400: IFFALSE 426
// SetResourceType ( GetBase ( i ) , j , 9999 ) ;
 402: LD_VAR 0 1
 406: PPUSH
 407: CALL_OW 274
 411: PPUSH
 412: LD_VAR 0 2
 416: PPUSH
 417: LD_INT 9999
 419: PPUSH
 420: CALL_OW 277
 424: GO 399
 426: POP
 427: POP
 428: GO 383
 430: POP
 431: POP
// end ;
 432: PPOPN 2
 434: END
// every 0 0$1 trigger achivCounter >= 2 do
 435: LD_EXP 41
 439: PUSH
 440: LD_INT 2
 442: GREATEREQUAL
 443: IFFALSE 455
 445: GO 447
 447: DISABLE
// SetAchievement ( ACH_REMOTE ) ;
 448: LD_STRING ACH_REMOTE
 450: PPUSH
 451: CALL_OW 543
 455: END
// every 0 0$1 trigger destroyCounter >= 30 do
 456: LD_EXP 42
 460: PUSH
 461: LD_INT 30
 463: GREATEREQUAL
 464: IFFALSE 476
 466: GO 468
 468: DISABLE
// SetAchievement ( ACH_DEFMASTER ) ; end_of_file
 469: LD_STRING ACH_DEFMASTER
 471: PPUSH
 472: CALL_OW 543
 476: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 477: LD_INT 0
 479: PPUSH
 480: PPUSH
 481: PPUSH
 482: PPUSH
// uc_side = 1 ;
 483: LD_ADDR_OWVAR 20
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debugMode ) , 13c_ ) ;
 491: LD_ADDR_EXP 1
 495: PUSH
 496: LD_STRING JMM
 498: PPUSH
 499: LD_EXP 40
 503: NOT
 504: PPUSH
 505: LD_STRING 13c_
 507: PPUSH
 508: CALL 31778 0 3
 512: ST_TO_ADDR
// Stevens := PrepareUnit ( Stevens , ( not debugMode ) , 13c_ ) ;
 513: LD_ADDR_EXP 2
 517: PUSH
 518: LD_STRING Stevens
 520: PPUSH
 521: LD_EXP 40
 525: NOT
 526: PPUSH
 527: LD_STRING 13c_
 529: PPUSH
 530: CALL 31778 0 3
 534: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debugMode ) , 13c_ ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING Lisa
 542: PPUSH
 543: LD_EXP 40
 547: NOT
 548: PPUSH
 549: LD_STRING 13c_
 551: PPUSH
 552: CALL 31778 0 3
 556: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debugMode ) , 13c_ ) ;
 557: LD_ADDR_EXP 4
 561: PUSH
 562: LD_STRING Donaldson
 564: PPUSH
 565: LD_EXP 40
 569: NOT
 570: PPUSH
 571: LD_STRING 13c_
 573: PPUSH
 574: CALL 31778 0 3
 578: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debugMode ) , 13c_ ) ;
 579: LD_ADDR_EXP 5
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_EXP 40
 591: NOT
 592: PPUSH
 593: LD_STRING 13c_
 595: PPUSH
 596: CALL 31778 0 3
 600: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debugMode ) , 13c_ ) ;
 601: LD_ADDR_EXP 6
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_EXP 40
 613: NOT
 614: PPUSH
 615: LD_STRING 13c_
 617: PPUSH
 618: CALL 31778 0 3
 622: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debugMode ) , 13c_ ) ;
 623: LD_ADDR_EXP 7
 627: PUSH
 628: LD_STRING Denis
 630: PPUSH
 631: LD_EXP 40
 635: NOT
 636: PPUSH
 637: LD_STRING 13c_
 639: PPUSH
 640: CALL 31778 0 3
 644: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debugMode ) , 13c_ ) ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_STRING Brown
 652: PPUSH
 653: LD_EXP 40
 657: NOT
 658: PPUSH
 659: LD_STRING 13c_
 661: PPUSH
 662: CALL 31778 0 3
 666: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true , 13c_ ) ;
 667: LD_ADDR_EXP 9
 671: PUSH
 672: LD_STRING Gladstone
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: LD_STRING 13c_
 680: PPUSH
 681: CALL 31778 0 3
 685: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true , 13c_ ) ;
 686: LD_ADDR_EXP 10
 690: PUSH
 691: LD_STRING Houten
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: LD_STRING 13c_
 699: PPUSH
 700: CALL 31778 0 3
 704: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , true , 13c_ ) ;
 705: LD_ADDR_EXP 11
 709: PUSH
 710: LD_STRING Cornel
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_STRING 13c_
 718: PPUSH
 719: CALL 31778 0 3
 723: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true , 13c_ ) ;
 724: LD_ADDR_EXP 12
 728: PUSH
 729: LD_STRING Gary
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_STRING 13c_
 737: PPUSH
 738: CALL 31778 0 3
 742: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 13c_ ) ;
 743: LD_ADDR_EXP 13
 747: PUSH
 748: LD_STRING Frank
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_STRING 13c_
 756: PPUSH
 757: CALL 31778 0 3
 761: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true , 13c_ ) ;
 762: LD_ADDR_EXP 14
 766: PUSH
 767: LD_STRING Kikuchi
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_STRING 13c_
 775: PPUSH
 776: CALL 31778 0 3
 780: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 781: LD_ADDR_EXP 15
 785: PUSH
 786: LD_STRING Powell
 788: PPUSH
 789: LD_INT 0
 791: PPUSH
 792: LD_STRING 
 794: PPUSH
 795: CALL 31778 0 3
 799: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 800: LD_ADDR_VAR 0 2
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_EXP 2
 814: PUSH
 815: LD_EXP 3
 819: PUSH
 820: LD_EXP 4
 824: PUSH
 825: LD_EXP 5
 829: PUSH
 830: LD_EXP 6
 834: PUSH
 835: LD_EXP 7
 839: PUSH
 840: LD_EXP 8
 844: PUSH
 845: LD_EXP 9
 849: PUSH
 850: LD_EXP 10
 854: PUSH
 855: LD_EXP 11
 859: PUSH
 860: LD_EXP 12
 864: PUSH
 865: LD_EXP 13
 869: PUSH
 870: LD_EXP 14
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 891: LD_ADDR_VAR 0 3
 895: PUSH
 896: LD_INT 22
 898: PUSH
 899: LD_INT 1
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 33
 908: PUSH
 909: LD_INT 1
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PUSH
 916: LD_INT 21
 918: PUSH
 919: LD_INT 2
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: LIST
 930: PPUSH
 931: CALL_OW 69
 935: ST_TO_ADDR
// for i = tmp downto 1 do
 936: LD_ADDR_VAR 0 4
 940: PUSH
 941: DOUBLE
 942: LD_VAR 0 2
 946: INC
 947: ST_TO_ADDR
 948: LD_INT 1
 950: PUSH
 951: FOR_DOWNTO
 952: IFFALSE 989
// if not tmp [ i ] then
 954: LD_VAR 0 2
 958: PUSH
 959: LD_VAR 0 4
 963: ARRAY
 964: NOT
 965: IFFALSE 987
// tmp := Delete ( tmp , i ) ;
 967: LD_ADDR_VAR 0 2
 971: PUSH
 972: LD_VAR 0 2
 976: PPUSH
 977: LD_VAR 0 4
 981: PPUSH
 982: CALL_OW 3
 986: ST_TO_ADDR
 987: GO 951
 989: POP
 990: POP
// for i = 1 to tmp do
 991: LD_ADDR_VAR 0 4
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 2
1005: PUSH
1006: FOR_TO
1007: IFFALSE 1037
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
1009: LD_VAR 0 2
1013: PUSH
1014: LD_VAR 0 4
1018: ARRAY
1019: PPUSH
1020: LD_VAR 0 3
1024: PUSH
1025: LD_VAR 0 4
1029: ARRAY
1030: PPUSH
1031: CALL_OW 52
1035: GO 1006
1037: POP
1038: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 25
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: PPUSH
1063: CALL_OW 69
1067: PUSH
1068: LD_INT 0
1070: EQUAL
1071: PUSH
1072: LD_INT 22
1074: PUSH
1075: LD_INT 1
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 34
1084: PUSH
1085: LD_INT 13
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PPUSH
1096: CALL_OW 69
1100: PUSH
1101: LD_INT 0
1103: EQUAL
1104: AND
1105: IFFALSE 1119
// SetClass ( JMM , 2 ) ;
1107: LD_EXP 1
1111: PPUSH
1112: LD_INT 2
1114: PPUSH
1115: CALL_OW 336
// end ;
1119: LD_VAR 0 1
1123: RET
// export function PrepareAmericansRandom ; var i ; begin
1124: LD_INT 0
1126: PPUSH
1127: PPUSH
// uc_side = 1 ;
1128: LD_ADDR_OWVAR 20
1132: PUSH
1133: LD_INT 1
1135: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1136: LD_ADDR_EXP 16
1140: PUSH
1141: LD_STRING 13c_others
1143: PPUSH
1144: CALL_OW 31
1148: ST_TO_ADDR
// for i in others13 do
1149: LD_ADDR_VAR 0 2
1153: PUSH
1154: LD_EXP 16
1158: PUSH
1159: FOR_IN
1160: IFFALSE 1213
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1162: LD_VAR 0 2
1166: PPUSH
1167: LD_INT 22
1169: PUSH
1170: LD_INT 1
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: LD_INT 21
1179: PUSH
1180: LD_INT 2
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: PUSH
1187: LD_INT 58
1189: PUSH
1190: EMPTY
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: PPUSH
1198: CALL_OW 69
1202: PUSH
1203: LD_INT 1
1205: ARRAY
1206: PPUSH
1207: CALL_OW 52
1211: GO 1159
1213: POP
1214: POP
// end ;
1215: LD_VAR 0 1
1219: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1220: LD_INT 0
1222: PPUSH
1223: PPUSH
1224: PPUSH
1225: PPUSH
1226: PPUSH
1227: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] , [ 1 , us_morphling , engine_siberite , control_manual , us_heavy_gun , 100 ] ] ) ;
1228: LD_ADDR_VAR 0 5
1232: PUSH
1233: LD_STRING 13_VehiclesIn13_1
1235: PPUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 5
1241: PUSH
1242: LD_INT 3
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 6
1250: PUSH
1251: LD_INT 100
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: PUSH
1262: LD_INT 1
1264: PUSH
1265: LD_INT 5
1267: PUSH
1268: LD_INT 3
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 6
1276: PUSH
1277: LD_INT 100
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 5
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 6
1302: PUSH
1303: LD_INT 100
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 1
1316: PUSH
1317: LD_INT 5
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: LD_INT 6
1328: PUSH
1329: LD_INT 100
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: PUSH
1340: LD_INT 1
1342: PUSH
1343: LD_INT 5
1345: PUSH
1346: LD_INT 3
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: LD_INT 6
1354: PUSH
1355: LD_INT 100
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 1
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: LD_INT 3
1374: PUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 6
1380: PUSH
1381: LD_INT 100
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: LD_INT 5
1397: PUSH
1398: LD_INT 3
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: LD_INT 6
1406: PUSH
1407: LD_INT 100
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 1
1420: PUSH
1421: LD_INT 5
1423: PUSH
1424: LD_INT 3
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 6
1432: PUSH
1433: LD_INT 100
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: PPUSH
1454: CALL_OW 30
1458: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1459: LD_ADDR_EXP 24
1463: PUSH
1464: LD_STRING 13_ResourcesInCargo13_1
1466: PPUSH
1467: EMPTY
1468: PPUSH
1469: CALL_OW 30
1473: ST_TO_ADDR
// cargoList = [ ] ;
1474: LD_ADDR_VAR 0 6
1478: PUSH
1479: EMPTY
1480: ST_TO_ADDR
// uc_side = 1 ;
1481: LD_ADDR_OWVAR 20
1485: PUSH
1486: LD_INT 1
1488: ST_TO_ADDR
// if vehicles then
1489: LD_VAR 0 5
1493: IFFALSE 1840
// begin for i := 1 to vehicles do
1495: LD_ADDR_VAR 0 2
1499: PUSH
1500: DOUBLE
1501: LD_INT 1
1503: DEC
1504: ST_TO_ADDR
1505: LD_VAR 0 5
1509: PUSH
1510: FOR_TO
1511: IFFALSE 1660
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1513: LD_ADDR_OWVAR 21
1517: PUSH
1518: LD_VAR 0 5
1522: PUSH
1523: LD_VAR 0 2
1527: ARRAY
1528: PUSH
1529: LD_INT 1
1531: ARRAY
1532: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1533: LD_ADDR_OWVAR 37
1537: PUSH
1538: LD_VAR 0 5
1542: PUSH
1543: LD_VAR 0 2
1547: ARRAY
1548: PUSH
1549: LD_INT 2
1551: ARRAY
1552: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1553: LD_ADDR_OWVAR 39
1557: PUSH
1558: LD_VAR 0 5
1562: PUSH
1563: LD_VAR 0 2
1567: ARRAY
1568: PUSH
1569: LD_INT 3
1571: ARRAY
1572: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1573: LD_ADDR_OWVAR 38
1577: PUSH
1578: LD_VAR 0 5
1582: PUSH
1583: LD_VAR 0 2
1587: ARRAY
1588: PUSH
1589: LD_INT 4
1591: ARRAY
1592: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1593: LD_ADDR_OWVAR 40
1597: PUSH
1598: LD_VAR 0 5
1602: PUSH
1603: LD_VAR 0 2
1607: ARRAY
1608: PUSH
1609: LD_INT 5
1611: ARRAY
1612: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1613: LD_ADDR_OWVAR 41
1617: PUSH
1618: LD_INT 40
1620: ST_TO_ADDR
// veh = CreateVehicle ;
1621: LD_ADDR_VAR 0 4
1625: PUSH
1626: CALL_OW 45
1630: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1631: LD_VAR 0 4
1635: PPUSH
1636: LD_INT 1
1638: PPUSH
1639: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1643: LD_VAR 0 4
1647: PPUSH
1648: LD_INT 2
1650: PPUSH
1651: LD_INT 0
1653: PPUSH
1654: CALL_OW 49
// end ;
1658: GO 1510
1660: POP
1661: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1662: LD_ADDR_VAR 0 6
1666: PUSH
1667: LD_INT 22
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 21
1679: PUSH
1680: LD_INT 2
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 34
1689: PUSH
1690: LD_INT 12
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PPUSH
1702: CALL_OW 69
1706: ST_TO_ADDR
// if cargoList then
1707: LD_VAR 0 6
1711: IFFALSE 1840
// for i = 1 to cargoList do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_VAR 0 6
1727: PUSH
1728: FOR_TO
1729: IFFALSE 1838
// begin if resources then
1731: LD_EXP 24
1735: IFFALSE 1836
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1737: LD_VAR 0 6
1741: PUSH
1742: LD_VAR 0 2
1746: ARRAY
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: LD_EXP 24
1755: PUSH
1756: LD_VAR 0 2
1760: ARRAY
1761: PUSH
1762: LD_INT 1
1764: ARRAY
1765: PPUSH
1766: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1770: LD_VAR 0 6
1774: PUSH
1775: LD_VAR 0 2
1779: ARRAY
1780: PPUSH
1781: LD_INT 2
1783: PPUSH
1784: LD_EXP 24
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PUSH
1795: LD_INT 2
1797: ARRAY
1798: PPUSH
1799: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1803: LD_VAR 0 6
1807: PUSH
1808: LD_VAR 0 2
1812: ARRAY
1813: PPUSH
1814: LD_INT 3
1816: PPUSH
1817: LD_EXP 24
1821: PUSH
1822: LD_VAR 0 2
1826: ARRAY
1827: PUSH
1828: LD_INT 3
1830: ARRAY
1831: PPUSH
1832: CALL_OW 291
// end ; end ;
1836: GO 1728
1838: POP
1839: POP
// end ; end ;
1840: LD_VAR 0 1
1844: RET
// export function PowellSupport ; var i , veh , un ; begin
1845: LD_INT 0
1847: PPUSH
1848: PPUSH
1849: PPUSH
1850: PPUSH
// for i := 1 to [ 4 , 3 , 2 , 2 ] [ Difficulty ] do
1851: LD_ADDR_VAR 0 2
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 4
1863: PUSH
1864: LD_INT 3
1866: PUSH
1867: LD_INT 2
1869: PUSH
1870: LD_INT 2
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: PUSH
1879: LD_OWVAR 67
1883: ARRAY
1884: PUSH
1885: FOR_TO
1886: IFFALSE 2150
// begin uc_nation := 1 ;
1888: LD_ADDR_OWVAR 21
1892: PUSH
1893: LD_INT 1
1895: ST_TO_ADDR
// uc_side := 1 ;
1896: LD_ADDR_OWVAR 20
1900: PUSH
1901: LD_INT 1
1903: ST_TO_ADDR
// vc_engine := engine_siberite ;
1904: LD_ADDR_OWVAR 39
1908: PUSH
1909: LD_INT 3
1911: ST_TO_ADDR
// vc_control := control_manual ;
1912: LD_ADDR_OWVAR 38
1916: PUSH
1917: LD_INT 1
1919: ST_TO_ADDR
// vc_weapon := [ us_laser , us_heavy_gun , us_laser , us_double_gun , us_double_gun ] [ Difficulty + rand ( 0 , 1 ) ] ;
1920: LD_ADDR_OWVAR 40
1924: PUSH
1925: LD_INT 9
1927: PUSH
1928: LD_INT 6
1930: PUSH
1931: LD_INT 9
1933: PUSH
1934: LD_INT 5
1936: PUSH
1937: LD_INT 5
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_OWVAR 67
1951: PUSH
1952: LD_INT 0
1954: PPUSH
1955: LD_INT 1
1957: PPUSH
1958: CALL_OW 12
1962: PLUS
1963: ARRAY
1964: ST_TO_ADDR
// if vc_weapon = us_heavy_gun then
1965: LD_OWVAR 40
1969: PUSH
1970: LD_INT 6
1972: EQUAL
1973: IFFALSE 2002
// vc_chassis := [ us_morphling , us_heavy_tracked , us_heavy_tracked ] [ Difficulty ] else
1975: LD_ADDR_OWVAR 37
1979: PUSH
1980: LD_INT 5
1982: PUSH
1983: LD_INT 4
1985: PUSH
1986: LD_INT 4
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: LD_OWVAR 67
1998: ARRAY
1999: ST_TO_ADDR
2000: GO 2037
// vc_chassis := [ us_morphling , us_heavy_tracked , us_medium_tracked , us_medium_tracked ] [ rand ( 1 , 4 ) ] ;
2002: LD_ADDR_OWVAR 37
2006: PUSH
2007: LD_INT 5
2009: PUSH
2010: LD_INT 4
2012: PUSH
2013: LD_INT 3
2015: PUSH
2016: LD_INT 3
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 1
2027: PPUSH
2028: LD_INT 4
2030: PPUSH
2031: CALL_OW 12
2035: ARRAY
2036: ST_TO_ADDR
// veh = CreateVehicle ;
2037: LD_ADDR_VAR 0 3
2041: PUSH
2042: CALL_OW 45
2046: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2047: LD_VAR 0 3
2051: PPUSH
2052: LD_INT 2
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 49
// SetDir ( veh , 1 ) ;
2062: LD_VAR 0 3
2066: PPUSH
2067: LD_INT 1
2069: PPUSH
2070: CALL_OW 233
// hc_gallery :=  ;
2074: LD_ADDR_OWVAR 33
2078: PUSH
2079: LD_STRING 
2081: ST_TO_ADDR
// hc_name :=  ;
2082: LD_ADDR_OWVAR 26
2086: PUSH
2087: LD_STRING 
2089: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2090: LD_INT 0
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: LD_INT 9
2098: PUSH
2099: LD_INT 8
2101: PUSH
2102: LD_INT 8
2104: PUSH
2105: LD_INT 7
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: LD_OWVAR 67
2118: ARRAY
2119: PPUSH
2120: CALL_OW 380
// un := CreateHuman ;
2124: LD_ADDR_VAR 0 4
2128: PUSH
2129: CALL_OW 44
2133: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2134: LD_VAR 0 4
2138: PPUSH
2139: LD_VAR 0 3
2143: PPUSH
2144: CALL_OW 52
// end ;
2148: GO 1885
2150: POP
2151: POP
// for i := 1 to [ 2 , 2 , 2 , 1 ] [ Difficulty ] do
2152: LD_ADDR_VAR 0 2
2156: PUSH
2157: DOUBLE
2158: LD_INT 1
2160: DEC
2161: ST_TO_ADDR
2162: LD_INT 2
2164: PUSH
2165: LD_INT 2
2167: PUSH
2168: LD_INT 2
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: LD_OWVAR 67
2184: ARRAY
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2262
// begin PrepareHuman ( false , class_soldier , [ 9 , 8 , 8 , 7 ] [ Difficulty ] ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 9
2197: PUSH
2198: LD_INT 8
2200: PUSH
2201: LD_INT 8
2203: PUSH
2204: LD_INT 7
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_OWVAR 67
2217: ARRAY
2218: PPUSH
2219: CALL_OW 380
// un := CreateHuman ;
2223: LD_ADDR_VAR 0 4
2227: PUSH
2228: CALL_OW 44
2232: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2233: LD_VAR 0 4
2237: PPUSH
2238: LD_INT 1
2240: PPUSH
2241: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
2245: LD_VAR 0 4
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: CALL_OW 49
// end ;
2260: GO 2186
2262: POP
2263: POP
// end ; end_of_file
2264: LD_VAR 0 1
2268: RET
// export function PrepareBurlak ; begin
2269: LD_INT 0
2271: PPUSH
// uc_side := 7 ;
2272: LD_ADDR_OWVAR 20
2276: PUSH
2277: LD_INT 7
2279: ST_TO_ADDR
// uc_nation := 3 ;
2280: LD_ADDR_OWVAR 21
2284: PUSH
2285: LD_INT 3
2287: ST_TO_ADDR
// vc_engine := engine_siberite ;
2288: LD_ADDR_OWVAR 39
2292: PUSH
2293: LD_INT 3
2295: ST_TO_ADDR
// vc_control := control_manual ;
2296: LD_ADDR_OWVAR 38
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_rocket_launcher , ru_heavy_gun , ru_heavy_gun ] [ Difficulty ] ;
2304: LD_ADDR_OWVAR 40
2308: PUSH
2309: LD_INT 44
2311: PUSH
2312: LD_INT 45
2314: PUSH
2315: LD_INT 46
2317: PUSH
2318: LD_INT 46
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: PUSH
2327: LD_OWVAR 67
2331: ARRAY
2332: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
2333: LD_ADDR_OWVAR 37
2337: PUSH
2338: LD_INT 24
2340: ST_TO_ADDR
// Masha := CreateVehicle ;
2341: LD_ADDR_EXP 18
2345: PUSH
2346: CALL_OW 45
2350: ST_TO_ADDR
// SetDir ( Masha , 2 ) ;
2351: LD_EXP 18
2355: PPUSH
2356: LD_INT 2
2358: PPUSH
2359: CALL_OW 233
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2363: LD_EXP 18
2367: PPUSH
2368: LD_INT 3
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2378: LD_EXP 18
2382: PPUSH
2383: LD_INT 1
2385: PPUSH
2386: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ,  ) ;
2390: LD_ADDR_EXP 17
2394: PUSH
2395: LD_STRING Burlak
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: LD_STRING 
2403: PPUSH
2404: CALL 31778 0 3
2408: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2409: LD_EXP 17
2413: PPUSH
2414: LD_EXP 18
2418: PPUSH
2419: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2423: LD_EXP 18
2427: PPUSH
2428: LD_INT 107
2430: PPUSH
2431: LD_INT 118
2433: PPUSH
2434: CALL_OW 114
// spawnBurlak := 1 ;
2438: LD_ADDR_EXP 27
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// end ;
2446: LD_VAR 0 1
2450: RET
// export function BurlakArmy ; var i , veh , tmp , bazooka ; begin
2451: LD_INT 0
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
// uc_side := 7 ;
2458: LD_ADDR_OWVAR 20
2462: PUSH
2463: LD_INT 7
2465: ST_TO_ADDR
// uc_nation := 3 ;
2466: LD_ADDR_OWVAR 21
2470: PUSH
2471: LD_INT 3
2473: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
2474: LD_ADDR_EXP 19
2478: PUSH
2479: LD_STRING Gnyevko
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: LD_STRING 
2487: PPUSH
2488: CALL 31778 0 3
2492: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2493: LD_ADDR_EXP 20
2497: PUSH
2498: LD_STRING Titov
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: LD_STRING 
2506: PPUSH
2507: CALL 31778 0 3
2511: ST_TO_ADDR
// Xavier := PrepareUnit ( Xavier2 , false ,  ) ;
2512: LD_ADDR_EXP 21
2516: PUSH
2517: LD_STRING Xavier2
2519: PPUSH
2520: LD_INT 0
2522: PPUSH
2523: LD_STRING 
2525: PPUSH
2526: CALL 31778 0 3
2530: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
2531: LD_ADDR_EXP 22
2535: PUSH
2536: LD_STRING Belkov
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: LD_STRING 
2544: PPUSH
2545: CALL 31778 0 3
2549: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2550: LD_ADDR_EXP 23
2554: PUSH
2555: LD_STRING Lipshchin
2557: PPUSH
2558: LD_INT 0
2560: PPUSH
2561: LD_STRING 
2563: PPUSH
2564: CALL 31778 0 3
2568: ST_TO_ADDR
// for i = 1 to 5 do
2569: LD_ADDR_VAR 0 2
2573: PUSH
2574: DOUBLE
2575: LD_INT 1
2577: DEC
2578: ST_TO_ADDR
2579: LD_INT 5
2581: PUSH
2582: FOR_TO
2583: IFFALSE 2708
// begin vc_engine := engine_siberite ;
2585: LD_ADDR_OWVAR 39
2589: PUSH
2590: LD_INT 3
2592: ST_TO_ADDR
// vc_control := control_manual ;
2593: LD_ADDR_OWVAR 38
2597: PUSH
2598: LD_INT 1
2600: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun , ru_time_lapser ] [ rand ( 1 , 5 ) ] ;
2601: LD_ADDR_OWVAR 40
2605: PUSH
2606: LD_INT 43
2608: PUSH
2609: LD_INT 45
2611: PUSH
2612: LD_INT 45
2614: PUSH
2615: LD_INT 44
2617: PUSH
2618: LD_INT 49
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 1
2630: PPUSH
2631: LD_INT 5
2633: PPUSH
2634: CALL_OW 12
2638: ARRAY
2639: ST_TO_ADDR
// vc_chassis := [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] ;
2640: LD_ADDR_OWVAR 37
2644: PUSH
2645: LD_INT 22
2647: PUSH
2648: LD_INT 22
2650: PUSH
2651: LD_INT 24
2653: PUSH
2654: LD_INT 24
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_OWVAR 67
2667: ARRAY
2668: ST_TO_ADDR
// veh = CreateVehicle ;
2669: LD_ADDR_VAR 0 3
2673: PUSH
2674: CALL_OW 45
2678: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2679: LD_VAR 0 3
2683: PPUSH
2684: LD_INT 2
2686: PPUSH
2687: CALL_OW 233
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2691: LD_VAR 0 3
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// end ;
2706: GO 2582
2708: POP
2709: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_INT 22
2717: PUSH
2718: LD_INT 7
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 21
2727: PUSH
2728: LD_INT 2
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 58
2737: PUSH
2738: EMPTY
2739: LIST
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: PPUSH
2746: CALL_OW 69
2750: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2751: LD_EXP 19
2755: PPUSH
2756: LD_VAR 0 4
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: PPUSH
2765: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2769: LD_EXP 20
2773: PPUSH
2774: LD_VAR 0 4
2778: PUSH
2779: LD_INT 2
2781: ARRAY
2782: PPUSH
2783: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2787: LD_EXP 21
2791: PPUSH
2792: LD_VAR 0 4
2796: PUSH
2797: LD_INT 3
2799: ARRAY
2800: PPUSH
2801: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2805: LD_EXP 22
2809: PPUSH
2810: LD_VAR 0 4
2814: PUSH
2815: LD_INT 4
2817: ARRAY
2818: PPUSH
2819: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2823: LD_EXP 23
2827: PPUSH
2828: LD_VAR 0 4
2832: PUSH
2833: LD_INT 5
2835: ARRAY
2836: PPUSH
2837: CALL_OW 52
// SetClass ( Gnyevko , class_mechanic ) ;
2841: LD_EXP 19
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , class_bazooker ) ;
2853: LD_EXP 20
2857: PUSH
2858: LD_EXP 23
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: LD_INT 9
2869: PPUSH
2870: CALL_OW 336
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2874: LD_ADDR_VAR 0 4
2878: PUSH
2879: LD_INT 22
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 69
2893: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2894: LD_VAR 0 4
2898: PPUSH
2899: LD_INT 107
2901: PPUSH
2902: LD_INT 118
2904: PPUSH
2905: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2909: LD_INT 35
2911: PPUSH
2912: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) , Masha ) ;
2916: LD_VAR 0 4
2920: PPUSH
2921: LD_INT 34
2923: PUSH
2924: LD_INT 49
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PPUSH
2931: CALL_OW 72
2935: PPUSH
2936: LD_EXP 18
2940: PPUSH
2941: CALL_OW 112
// ComAgressiveMove ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , 107 , 118 ) ;
2945: LD_VAR 0 4
2949: PPUSH
2950: LD_INT 3
2952: PUSH
2953: LD_INT 34
2955: PUSH
2956: LD_INT 49
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 72
2971: PPUSH
2972: LD_INT 107
2974: PPUSH
2975: LD_INT 118
2977: PPUSH
2978: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_EXP 20
2991: PUSH
2992: LD_EXP 23
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PPUSH
3001: LD_INT 50
3003: PUSH
3004: EMPTY
3005: LIST
3006: PUSH
3007: LD_INT 3
3009: PUSH
3010: LD_INT 54
3012: PUSH
3013: EMPTY
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 72
3028: ST_TO_ADDR
// if bazooka then
3029: LD_VAR 0 5
3033: IFFALSE 3075
// begin for i in bazooka do
3035: LD_ADDR_VAR 0 2
3039: PUSH
3040: LD_VAR 0 5
3044: PUSH
3045: FOR_IN
3046: IFFALSE 3073
// if See ( 1 , i ) then
3048: LD_INT 1
3050: PPUSH
3051: LD_VAR 0 2
3055: PPUSH
3056: CALL_OW 292
3060: IFFALSE 3071
// ComSpaceTimeShoot ( i ) ;
3062: LD_VAR 0 2
3066: PPUSH
3067: CALL 32725 0 1
3071: GO 3045
3073: POP
3074: POP
// end ; until UnitFilter ( tmp , [ f_weapon , ru_time_lapser ] ) = 0 or IsDying ( Masha ) ;
3075: LD_VAR 0 4
3079: PPUSH
3080: LD_INT 34
3082: PUSH
3083: LD_INT 49
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PPUSH
3090: CALL_OW 72
3094: PUSH
3095: LD_INT 0
3097: EQUAL
3098: PUSH
3099: LD_EXP 18
3103: PPUSH
3104: CALL_OW 303
3108: OR
3109: IFFALSE 2909
// repeat wait ( 0 0$1 ) ;
3111: LD_INT 35
3113: PPUSH
3114: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) diff Burlak ;
3118: LD_ADDR_VAR 0 4
3122: PUSH
3123: LD_INT 22
3125: PUSH
3126: LD_INT 7
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PPUSH
3133: CALL_OW 69
3137: PUSH
3138: LD_EXP 17
3142: DIFF
3143: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
3144: LD_VAR 0 4
3148: PPUSH
3149: LD_INT 107
3151: PPUSH
3152: LD_INT 118
3154: PPUSH
3155: CALL_OW 114
// bazooka := UnitFilter ( [ Titov , Lipshchin ] , [ [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
3159: LD_ADDR_VAR 0 5
3163: PUSH
3164: LD_EXP 20
3168: PUSH
3169: LD_EXP 23
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: PPUSH
3178: LD_INT 50
3180: PUSH
3181: EMPTY
3182: LIST
3183: PUSH
3184: LD_INT 3
3186: PUSH
3187: LD_INT 54
3189: PUSH
3190: EMPTY
3191: LIST
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: PPUSH
3201: CALL_OW 72
3205: ST_TO_ADDR
// if bazooka then
3206: LD_VAR 0 5
3210: IFFALSE 3252
// begin for i in bazooka do
3212: LD_ADDR_VAR 0 2
3216: PUSH
3217: LD_VAR 0 5
3221: PUSH
3222: FOR_IN
3223: IFFALSE 3250
// if See ( 1 , i ) then
3225: LD_INT 1
3227: PPUSH
3228: LD_VAR 0 2
3232: PPUSH
3233: CALL_OW 292
3237: IFFALSE 3248
// ComSpaceTimeShoot ( i ) ;
3239: LD_VAR 0 2
3243: PPUSH
3244: CALL 32725 0 1
3248: GO 3222
3250: POP
3251: POP
// end ; if IsOk ( Burlak ) and not IsInUnit ( Burlak ) then
3252: LD_EXP 17
3256: PPUSH
3257: CALL_OW 302
3261: PUSH
3262: LD_EXP 17
3266: PPUSH
3267: CALL_OW 310
3271: NOT
3272: AND
3273: IFFALSE 3290
// ComMoveXY ( Burlak , 107 , 118 ) ;
3275: LD_EXP 17
3279: PPUSH
3280: LD_INT 107
3282: PPUSH
3283: LD_INT 118
3285: PPUSH
3286: CALL_OW 111
// until not tmp ;
3290: LD_VAR 0 4
3294: NOT
3295: IFFALSE 3111
// end ;
3297: LD_VAR 0 1
3301: RET
// export function PrepareRussianAttack ; var i , un , veh , area , dir ; begin
3302: LD_INT 0
3304: PPUSH
3305: PPUSH
3306: PPUSH
3307: PPUSH
3308: PPUSH
3309: PPUSH
// result := [ ] ;
3310: LD_ADDR_VAR 0 1
3314: PUSH
3315: EMPTY
3316: ST_TO_ADDR
// dir := rand ( 1 , 2 ) ;
3317: LD_ADDR_VAR 0 6
3321: PUSH
3322: LD_INT 1
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: CALL_OW 12
3332: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
3333: LD_ADDR_VAR 0 5
3337: PUSH
3338: LD_INT 8
3340: PUSH
3341: LD_INT 9
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_VAR 0 6
3352: ARRAY
3353: ST_TO_ADDR
// for i := 1 to [ 6 , 8 , 10 , 11 ] [ Difficulty ] do
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: DOUBLE
3360: LD_INT 1
3362: DEC
3363: ST_TO_ADDR
3364: LD_INT 6
3366: PUSH
3367: LD_INT 8
3369: PUSH
3370: LD_INT 10
3372: PUSH
3373: LD_INT 11
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: PUSH
3382: LD_OWVAR 67
3386: ARRAY
3387: PUSH
3388: FOR_TO
3389: IFFALSE 3627
// begin uc_side := 3 ;
3391: LD_ADDR_OWVAR 20
3395: PUSH
3396: LD_INT 3
3398: ST_TO_ADDR
// uc_nation := 3 ;
3399: LD_ADDR_OWVAR 21
3403: PUSH
3404: LD_INT 3
3406: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] , [ ru_heavy_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] [ rand ( 1 , 5 ) ] , 100 ) ;
3407: LD_INT 24
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: LD_INT 1
3415: PUSH
3416: LD_INT 3
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 1
3425: PPUSH
3426: LD_INT 2
3428: PPUSH
3429: CALL_OW 12
3433: ARRAY
3434: PPUSH
3435: LD_INT 46
3437: PUSH
3438: LD_INT 46
3440: PUSH
3441: LD_INT 45
3443: PUSH
3444: LD_INT 47
3446: PUSH
3447: LD_INT 49
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: PUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 5
3462: PPUSH
3463: CALL_OW 12
3467: ARRAY
3468: PPUSH
3469: LD_INT 100
3471: PPUSH
3472: CALL 36618 0 5
// veh := CreateVehicle ;
3476: LD_ADDR_VAR 0 4
3480: PUSH
3481: CALL_OW 45
3485: ST_TO_ADDR
// result := Join ( result , veh ) ;
3486: LD_ADDR_VAR 0 1
3490: PUSH
3491: LD_VAR 0 1
3495: PPUSH
3496: LD_VAR 0 4
3500: PPUSH
3501: CALL 69469 0 2
3505: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
3506: LD_VAR 0 4
3510: PPUSH
3511: LD_INT 3
3513: PUSH
3514: LD_INT 5
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: LD_VAR 0 6
3525: ARRAY
3526: PPUSH
3527: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_VAR 0 5
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
// if vc_control = control_manual then
3548: LD_OWVAR 38
3552: PUSH
3553: LD_INT 1
3555: EQUAL
3556: IFFALSE 3603
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3558: LD_INT 0
3560: PPUSH
3561: LD_INT 7
3563: PUSH
3564: LD_INT 8
3566: PUSH
3567: LD_INT 9
3569: PUSH
3570: LD_INT 10
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PUSH
3579: LD_OWVAR 67
3583: ARRAY
3584: PPUSH
3585: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3589: CALL_OW 44
3593: PPUSH
3594: LD_VAR 0 4
3598: PPUSH
3599: CALL_OW 52
// end ; wait ( 0 0$0.5 ) ;
3603: LD_INT 18
3605: PPUSH
3606: CALL_OW 67
// ComAgressiveMove ( veh , 100 , 55 ) ;
3610: LD_VAR 0 4
3614: PPUSH
3615: LD_INT 100
3617: PPUSH
3618: LD_INT 55
3620: PPUSH
3621: CALL_OW 114
// end ;
3625: GO 3388
3627: POP
3628: POP
// for i in result do
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: LD_VAR 0 1
3638: PUSH
3639: FOR_IN
3640: IFFALSE 3656
// SetTag ( i , 10 ) ;
3642: LD_VAR 0 2
3646: PPUSH
3647: LD_INT 10
3649: PPUSH
3650: CALL_OW 109
3654: GO 3639
3656: POP
3657: POP
// RaiseSailEvent ( eventRussianAttack ) ;
3658: LD_EXP 44
3662: PPUSH
3663: CALL_OW 427
// end ; end_of_file
3667: LD_VAR 0 1
3671: RET
// export function DestroySibDeposit ; var un , rnd ; begin
3672: LD_INT 0
3674: PPUSH
3675: PPUSH
3676: PPUSH
// rnd := 0 ;
3677: LD_ADDR_VAR 0 3
3681: PUSH
3682: LD_INT 0
3684: ST_TO_ADDR
// uc_side := 8 ;
3685: LD_ADDR_OWVAR 20
3689: PUSH
3690: LD_INT 8
3692: ST_TO_ADDR
// uc_nation := 2 ;
3693: LD_ADDR_OWVAR 21
3697: PUSH
3698: LD_INT 2
3700: ST_TO_ADDR
// hc_name :=  ;
3701: LD_ADDR_OWVAR 26
3705: PUSH
3706: LD_STRING 
3708: ST_TO_ADDR
// hc_gallery :=  ;
3709: LD_ADDR_OWVAR 33
3713: PUSH
3714: LD_STRING 
3716: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 , 12 ] [ Difficulty ] , [ 10 , 11 , 12 , 12 ] [ Difficulty ] ] ;
3717: LD_ADDR_OWVAR 29
3721: PUSH
3722: LD_INT 10
3724: PUSH
3725: LD_INT 11
3727: PUSH
3728: LD_INT 12
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: PUSH
3740: LD_OWVAR 67
3744: ARRAY
3745: PUSH
3746: LD_INT 10
3748: PUSH
3749: LD_INT 11
3751: PUSH
3752: LD_INT 12
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: PUSH
3764: LD_OWVAR 67
3768: ARRAY
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: ST_TO_ADDR
// PrepareHuman ( false , 4 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
3774: LD_INT 0
3776: PPUSH
3777: LD_INT 4
3779: PPUSH
3780: LD_INT 7
3782: PUSH
3783: LD_INT 8
3785: PUSH
3786: LD_INT 9
3788: PUSH
3789: LD_INT 10
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_OWVAR 67
3802: ARRAY
3803: PPUSH
3804: CALL_OW 380
// un := CreateHuman ;
3808: LD_ADDR_VAR 0 2
3812: PUSH
3813: CALL_OW 44
3817: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3818: LD_VAR 0 2
3822: PPUSH
3823: LD_INT 8
3825: PUSH
3826: LD_INT 9
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ARRAY
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 49
// SetTag ( un , 1 ) ;
3852: LD_VAR 0 2
3856: PPUSH
3857: LD_INT 1
3859: PPUSH
3860: CALL_OW 109
// rnd := rand ( 1 , sibDeposits ) ;
3864: LD_ADDR_VAR 0 3
3868: PUSH
3869: LD_INT 1
3871: PPUSH
3872: LD_EXP 31
3876: PPUSH
3877: CALL_OW 12
3881: ST_TO_ADDR
// RaiseSailEventCustom ( eventContaminate , un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] , 0 , 0 , 0 ) ;
3882: LD_EXP 45
3886: PPUSH
3887: LD_VAR 0 2
3891: PPUSH
3892: LD_EXP 31
3896: PUSH
3897: LD_VAR 0 3
3901: ARRAY
3902: PUSH
3903: LD_INT 1
3905: ARRAY
3906: PPUSH
3907: LD_EXP 31
3911: PUSH
3912: LD_VAR 0 3
3916: ARRAY
3917: PUSH
3918: LD_INT 2
3920: ARRAY
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: LD_INT 0
3927: PPUSH
3928: LD_INT 0
3930: PPUSH
3931: CALL_OW 595
// end ;
3935: LD_VAR 0 1
3939: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do var i ;
3940: LD_INT 22
3942: PUSH
3943: LD_INT 8
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: PUSH
3950: LD_INT 3
3952: PUSH
3953: LD_INT 61
3955: PUSH
3956: EMPTY
3957: LIST
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PUSH
3963: LD_INT 50
3965: PUSH
3966: EMPTY
3967: LIST
3968: PUSH
3969: LD_INT 33
3971: PUSH
3972: LD_INT 2
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PPUSH
3985: CALL_OW 69
3989: IFFALSE 4076
3991: GO 3993
3993: DISABLE
3994: LD_INT 0
3996: PPUSH
// begin enable ;
3997: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) do
3998: LD_ADDR_VAR 0 1
4002: PUSH
4003: LD_INT 22
4005: PUSH
4006: LD_INT 8
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: LD_INT 61
4018: PUSH
4019: EMPTY
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 50
4028: PUSH
4029: EMPTY
4030: LIST
4031: PUSH
4032: LD_INT 33
4034: PUSH
4035: LD_INT 2
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 69
4052: PUSH
4053: FOR_IN
4054: IFFALSE 4074
// begin wait ( 0 0$0.3 ) ;
4056: LD_INT 10
4058: PPUSH
4059: CALL_OW 67
// Connect ( i ) ;
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL 40086 0 1
// end ;
4072: GO 4053
4074: POP
4075: POP
// end ;
4076: PPOPN 1
4078: END
// export function PrepareArabianAttack ; var i , veh , xy , un , area , counter , tmp , dir ; begin
4079: LD_INT 0
4081: PPUSH
4082: PPUSH
4083: PPUSH
4084: PPUSH
4085: PPUSH
4086: PPUSH
4087: PPUSH
4088: PPUSH
4089: PPUSH
// result := [ ] ;
4090: LD_ADDR_VAR 0 1
4094: PUSH
4095: EMPTY
4096: ST_TO_ADDR
// arabianAttacksCounter := arabianAttacksCounter + 1 ;
4097: LD_ADDR_EXP 33
4101: PUSH
4102: LD_EXP 33
4106: PUSH
4107: LD_INT 1
4109: PLUS
4110: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) < 2 then
4111: LD_INT 22
4113: PUSH
4114: LD_INT 8
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: LD_INT 3
4123: PUSH
4124: LD_INT 58
4126: PUSH
4127: EMPTY
4128: LIST
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 34
4136: PUSH
4137: LD_INT 31
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: PPUSH
4149: CALL_OW 69
4153: PUSH
4154: LD_INT 2
4156: LESS
4157: IFFALSE 4401
// begin uc_side := 8 ;
4159: LD_ADDR_OWVAR 20
4163: PUSH
4164: LD_INT 8
4166: ST_TO_ADDR
// uc_nation := 2 ;
4167: LD_ADDR_OWVAR 21
4171: PUSH
4172: LD_INT 2
4174: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_control_tower , 100 ) ;
4175: LD_INT 14
4177: PPUSH
4178: LD_INT 3
4180: PPUSH
4181: LD_INT 1
4183: PPUSH
4184: LD_INT 31
4186: PPUSH
4187: LD_INT 100
4189: PPUSH
4190: CALL 36618 0 5
// for i = FilterAllUnits ( [ [ f_side , 8 ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) + 1 to 2 do
4194: LD_ADDR_VAR 0 2
4198: PUSH
4199: DOUBLE
4200: LD_INT 22
4202: PUSH
4203: LD_INT 8
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: LD_INT 58
4215: PUSH
4216: EMPTY
4217: LIST
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: LD_INT 34
4225: PUSH
4226: LD_INT 31
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: CALL_OW 69
4242: PUSH
4243: LD_INT 1
4245: PLUS
4246: DEC
4247: ST_TO_ADDR
4248: LD_INT 2
4250: PUSH
4251: FOR_TO
4252: IFFALSE 4399
// begin veh := CreateVehicle ;
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: CALL_OW 45
4263: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: CALL_OW 233
// xy := [ [ 181 , 105 ] , [ 137 , 6 ] ] [ i mod 2 + 1 ] ;
4276: LD_ADDR_VAR 0 4
4280: PUSH
4281: LD_INT 181
4283: PUSH
4284: LD_INT 105
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: PUSH
4291: LD_INT 137
4293: PUSH
4294: LD_INT 6
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_VAR 0 2
4309: PUSH
4310: LD_INT 2
4312: MOD
4313: PUSH
4314: LD_INT 1
4316: PLUS
4317: ARRAY
4318: ST_TO_ADDR
// PlaceUnitXYR ( veh , xy [ 1 ] , xy [ 2 ] , 12 , false ) ;
4319: LD_VAR 0 3
4323: PPUSH
4324: LD_VAR 0 4
4328: PUSH
4329: LD_INT 1
4331: ARRAY
4332: PPUSH
4333: LD_VAR 0 4
4337: PUSH
4338: LD_INT 2
4340: ARRAY
4341: PPUSH
4342: LD_INT 12
4344: PPUSH
4345: LD_INT 0
4347: PPUSH
4348: CALL_OW 50
// PrepareMechanic ( false , [ 7 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 7
4357: PUSH
4358: LD_INT 9
4360: PUSH
4361: LD_INT 10
4363: PUSH
4364: LD_INT 10
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: PUSH
4373: LD_OWVAR 67
4377: ARRAY
4378: PPUSH
4379: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4383: CALL_OW 44
4387: PPUSH
4388: LD_VAR 0 3
4392: PPUSH
4393: CALL_OW 52
// end ;
4397: GO 4251
4399: POP
4400: POP
// end ; dir := rand ( 1 , 2 ) ;
4401: LD_ADDR_VAR 0 9
4405: PUSH
4406: LD_INT 1
4408: PPUSH
4409: LD_INT 2
4411: PPUSH
4412: CALL_OW 12
4416: ST_TO_ADDR
// area := [ ArabianSpawn1 , ArabianSpawn2 ] [ dir ] ;
4417: LD_ADDR_VAR 0 6
4421: PUSH
4422: LD_INT 8
4424: PUSH
4425: LD_INT 9
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: LD_VAR 0 9
4436: ARRAY
4437: ST_TO_ADDR
// counter := [ 6 , 8 , 10 , 11 ] [ Difficulty ] + arabianAttacksCounter ;
4438: LD_ADDR_VAR 0 7
4442: PUSH
4443: LD_INT 6
4445: PUSH
4446: LD_INT 8
4448: PUSH
4449: LD_INT 10
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: PUSH
4461: LD_OWVAR 67
4465: ARRAY
4466: PUSH
4467: LD_EXP 33
4471: PLUS
4472: ST_TO_ADDR
// if counter > 20 then
4473: LD_VAR 0 7
4477: PUSH
4478: LD_INT 20
4480: GREATER
4481: IFFALSE 4491
// counter := 20 ;
4483: LD_ADDR_VAR 0 7
4487: PUSH
4488: LD_INT 20
4490: ST_TO_ADDR
// for i := 1 to counter do
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: DOUBLE
4497: LD_INT 1
4499: DEC
4500: ST_TO_ADDR
4501: LD_VAR 0 7
4505: PUSH
4506: FOR_TO
4507: IFFALSE 4840
// begin uc_side := 8 ;
4509: LD_ADDR_OWVAR 20
4513: PUSH
4514: LD_INT 8
4516: ST_TO_ADDR
// uc_nation := 2 ;
4517: LD_ADDR_OWVAR 21
4521: PUSH
4522: LD_INT 2
4524: ST_TO_ADDR
// PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] , [ ar_gun , ar_rocket_launcher , ar_gun , ar_mortar , ar_selfpropelled_bomb , ar_gatling_gun ] [ rand ( 1 , 6 ) ] , 100 ) ;
4525: LD_INT 13
4527: PUSH
4528: LD_INT 14
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 1
4537: PPUSH
4538: LD_INT 2
4540: PPUSH
4541: CALL_OW 12
4545: ARRAY
4546: PPUSH
4547: LD_INT 3
4549: PPUSH
4550: LD_INT 1
4552: PUSH
4553: LD_INT 2
4555: PUSH
4556: LD_INT 5
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 1
4566: PPUSH
4567: LD_INT 3
4569: PPUSH
4570: CALL_OW 12
4574: ARRAY
4575: PPUSH
4576: LD_INT 27
4578: PUSH
4579: LD_INT 28
4581: PUSH
4582: LD_INT 27
4584: PUSH
4585: LD_INT 92
4587: PUSH
4588: LD_INT 29
4590: PUSH
4591: LD_INT 25
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_INT 1
4604: PPUSH
4605: LD_INT 6
4607: PPUSH
4608: CALL_OW 12
4612: ARRAY
4613: PPUSH
4614: LD_INT 100
4616: PPUSH
4617: CALL 36618 0 5
// if vc_weapon = ar_selfpropelled_bomb then
4621: LD_OWVAR 40
4625: PUSH
4626: LD_INT 29
4628: EQUAL
4629: IFFALSE 4639
// vc_control := control_remote ;
4631: LD_ADDR_OWVAR 38
4635: PUSH
4636: LD_INT 2
4638: ST_TO_ADDR
// veh := CreateVehicle ;
4639: LD_ADDR_VAR 0 3
4643: PUSH
4644: CALL_OW 45
4648: ST_TO_ADDR
// result := Join ( result , veh ) ;
4649: LD_ADDR_VAR 0 1
4653: PUSH
4654: LD_VAR 0 1
4658: PPUSH
4659: LD_VAR 0 3
4663: PPUSH
4664: CALL 69469 0 2
4668: ST_TO_ADDR
// SetDir ( veh , [ 3 , 5 ] [ dir ] ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 3
4676: PUSH
4677: LD_INT 5
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_VAR 0 9
4688: ARRAY
4689: PPUSH
4690: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_VAR 0 6
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// if vc_control = control_manual then
4711: LD_OWVAR 38
4715: PUSH
4716: LD_INT 1
4718: EQUAL
4719: IFFALSE 4766
// begin PrepareMechanic ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4721: LD_INT 0
4723: PPUSH
4724: LD_INT 7
4726: PUSH
4727: LD_INT 8
4729: PUSH
4730: LD_INT 9
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: PUSH
4742: LD_OWVAR 67
4746: ARRAY
4747: PPUSH
4748: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4752: CALL_OW 44
4756: PPUSH
4757: LD_VAR 0 3
4761: PPUSH
4762: CALL_OW 52
// end ; wait ( 0 0$0.3 ) ;
4766: LD_INT 10
4768: PPUSH
4769: CALL_OW 67
// if GetControl ( veh ) = control_remote and not IsControledBy ( veh ) then
4773: LD_VAR 0 3
4777: PPUSH
4778: CALL_OW 263
4782: PUSH
4783: LD_INT 2
4785: EQUAL
4786: PUSH
4787: LD_VAR 0 3
4791: PPUSH
4792: CALL_OW 312
4796: NOT
4797: AND
4798: IFFALSE 4816
// begin Connect ( veh ) ;
4800: LD_VAR 0 3
4804: PPUSH
4805: CALL 40086 0 1
// wait ( 0 0$0.3 ) ;
4809: LD_INT 10
4811: PPUSH
4812: CALL_OW 67
// end ; ComAgressiveMove ( veh , 100 , 55 ) ;
4816: LD_VAR 0 3
4820: PPUSH
4821: LD_INT 100
4823: PPUSH
4824: LD_INT 55
4826: PPUSH
4827: CALL_OW 114
// wait ( 0 0$0.5 ) ;
4831: LD_INT 18
4833: PPUSH
4834: CALL_OW 67
// end ;
4838: GO 4506
4840: POP
4841: POP
// if arabianAttacksCounter = 1 then
4842: LD_EXP 33
4846: PUSH
4847: LD_INT 1
4849: EQUAL
4850: IFFALSE 4856
// DestroySibDeposit ;
4852: CALL 3672 0 0
// if arabianAttacksCounter mod [ 4 , 3 , 3 , 2 ] [ Difficulty ] = 0 then
4856: LD_EXP 33
4860: PUSH
4861: LD_INT 4
4863: PUSH
4864: LD_INT 3
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 2
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: LD_OWVAR 67
4883: ARRAY
4884: MOD
4885: PUSH
4886: LD_INT 0
4888: EQUAL
4889: IFFALSE 5247
// begin tmp := rand ( 0 , 2 ) ;
4891: LD_ADDR_VAR 0 8
4895: PUSH
4896: LD_INT 0
4898: PPUSH
4899: LD_INT 2
4901: PPUSH
4902: CALL_OW 12
4906: ST_TO_ADDR
// if not tmp then
4907: LD_VAR 0 8
4911: NOT
4912: IFFALSE 5073
// begin for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] do
4914: LD_ADDR_VAR 0 2
4918: PUSH
4919: DOUBLE
4920: LD_INT 1
4922: DEC
4923: ST_TO_ADDR
4924: LD_INT 3
4926: PUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: LD_INT 5
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: PUSH
4942: LD_OWVAR 67
4946: ARRAY
4947: PUSH
4948: FOR_TO
4949: IFFALSE 5069
// begin uc_side := 8 ;
4951: LD_ADDR_OWVAR 20
4955: PUSH
4956: LD_INT 8
4958: ST_TO_ADDR
// uc_nation := 2 ;
4959: LD_ADDR_OWVAR 21
4963: PUSH
4964: LD_INT 2
4966: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
4967: LD_INT 0
4969: PPUSH
4970: LD_INT 1
4972: PPUSH
4973: LD_INT 7
4975: PUSH
4976: LD_INT 8
4978: PUSH
4979: LD_INT 9
4981: PUSH
4982: LD_INT 10
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: PUSH
4991: LD_OWVAR 67
4995: ARRAY
4996: PPUSH
4997: CALL_OW 380
// un := CreateHuman ;
5001: LD_ADDR_VAR 0 5
5005: PUSH
5006: CALL_OW 44
5010: ST_TO_ADDR
// result := Join ( result , un ) ;
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_VAR 0 1
5020: PPUSH
5021: LD_VAR 0 5
5025: PPUSH
5026: CALL 69469 0 2
5030: ST_TO_ADDR
// if Prob ( 60 ) then
5031: LD_INT 60
5033: PPUSH
5034: CALL_OW 13
5038: IFFALSE 5052
// SetClass ( un , class_mortar ) ;
5040: LD_VAR 0 5
5044: PPUSH
5045: LD_INT 8
5047: PPUSH
5048: CALL_OW 336
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5052: LD_VAR 0 5
5056: PPUSH
5057: LD_INT 16
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// end ;
5067: GO 4948
5069: POP
5070: POP
// end else
5071: GO 5237
// begin for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
5073: LD_ADDR_VAR 0 2
5077: PUSH
5078: DOUBLE
5079: LD_INT 1
5081: DEC
5082: ST_TO_ADDR
5083: LD_INT 2
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 3
5091: PUSH
5092: LD_INT 4
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: PUSH
5101: LD_OWVAR 67
5105: ARRAY
5106: PUSH
5107: FOR_TO
5108: IFFALSE 5235
// begin uc_side := 8 ;
5110: LD_ADDR_OWVAR 20
5114: PUSH
5115: LD_INT 8
5117: ST_TO_ADDR
// uc_nation := 0 ;
5118: LD_ADDR_OWVAR 21
5122: PUSH
5123: LD_INT 0
5125: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
5126: LD_ADDR_OWVAR 28
5130: PUSH
5131: LD_INT 17
5133: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
5134: LD_ADDR_OWVAR 31
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: LD_INT 0
5144: PUSH
5145: LD_INT 0
5147: PUSH
5148: LD_INT 0
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5157: LD_ADDR_OWVAR 29
5161: PUSH
5162: LD_INT 10
5164: PUSH
5165: LD_INT 10
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: ST_TO_ADDR
// hc_gallery :=  ;
5172: LD_ADDR_OWVAR 33
5176: PUSH
5177: LD_STRING 
5179: ST_TO_ADDR
// hc_name :=  ;
5180: LD_ADDR_OWVAR 26
5184: PUSH
5185: LD_STRING 
5187: ST_TO_ADDR
// un := CreateHuman ;
5188: LD_ADDR_VAR 0 5
5192: PUSH
5193: CALL_OW 44
5197: ST_TO_ADDR
// result := Join ( result , un ) ;
5198: LD_ADDR_VAR 0 1
5202: PUSH
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 5
5212: PPUSH
5213: CALL 69469 0 2
5217: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianInfSpawn , false ) ;
5218: LD_VAR 0 5
5222: PPUSH
5223: LD_INT 16
5225: PPUSH
5226: LD_INT 0
5228: PPUSH
5229: CALL_OW 49
// end ;
5233: GO 5107
5235: POP
5236: POP
// end ; if sibDeposits then
5237: LD_EXP 31
5241: IFFALSE 5247
// DestroySibDeposit ;
5243: CALL 3672 0 0
// end ; for i in result do
5247: LD_ADDR_VAR 0 2
5251: PUSH
5252: LD_VAR 0 1
5256: PUSH
5257: FOR_IN
5258: IFFALSE 5274
// SetTag ( i , 10 ) ;
5260: LD_VAR 0 2
5264: PPUSH
5265: LD_INT 10
5267: PPUSH
5268: CALL_OW 109
5272: GO 5257
5274: POP
5275: POP
// RaiseSailEvent ( eventArabianAttack ) ;
5276: LD_EXP 43
5280: PPUSH
5281: CALL_OW 427
// end ; end_of_file
5285: LD_VAR 0 1
5289: RET
// export function Action ; var tmp ; begin
5290: LD_INT 0
5292: PPUSH
5293: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ;
5294: LD_ADDR_VAR 0 2
5298: PUSH
5299: LD_INT 22
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 21
5311: PUSH
5312: LD_INT 2
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PPUSH
5323: CALL_OW 69
5327: ST_TO_ADDR
// InGameOn ;
5328: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
5341: LD_INT 22
5343: PUSH
5344: LD_INT 1
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: LD_INT 21
5353: PUSH
5354: LD_INT 2
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 69
5369: PPUSH
5370: LD_INT 69
5372: PPUSH
5373: LD_INT 94
5375: PPUSH
5376: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
5380: LD_EXP 1
5384: PPUSH
5385: LD_STRING D2-JMM-1
5387: PPUSH
5388: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5392: LD_VAR 0 2
5396: PPUSH
5397: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
5401: LD_EXP 2
5405: PPUSH
5406: LD_STRING D2-Huck-1
5408: PPUSH
5409: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5413: LD_VAR 0 2
5417: PPUSH
5418: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
5422: LD_EXP 1
5426: PPUSH
5427: LD_STRING D2-JMM-2
5429: PPUSH
5430: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5434: LD_VAR 0 2
5438: PPUSH
5439: CALL_OW 87
// InGameOff ;
5443: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5447: LD_STRING M1
5449: PPUSH
5450: CALL_OW 337
// SaveForQuickRestart ;
5454: CALL_OW 22
// wait ( 10 10$00 ) ;
5458: LD_INT 21000
5460: PPUSH
5461: CALL_OW 67
// DialogueOn ;
5465: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
5469: LD_EXP 15
5473: PPUSH
5474: LD_STRING D3-Pow-1
5476: PPUSH
5477: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
5481: LD_EXP 1
5485: PPUSH
5486: LD_STRING D3-JMM-1
5488: PPUSH
5489: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
5493: LD_EXP 15
5497: PPUSH
5498: LD_STRING D3-Pow-2
5500: PPUSH
5501: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
5505: LD_EXP 1
5509: PPUSH
5510: LD_STRING D3-JMM-2
5512: PPUSH
5513: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
5517: LD_EXP 15
5521: PPUSH
5522: LD_STRING D3-Pow-3
5524: PPUSH
5525: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
5529: LD_EXP 1
5533: PPUSH
5534: LD_STRING D3-JMM-3
5536: PPUSH
5537: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
5541: LD_EXP 15
5545: PPUSH
5546: LD_STRING D3-Pow-4
5548: PPUSH
5549: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
5553: LD_EXP 1
5557: PPUSH
5558: LD_STRING D3-JMM-4
5560: PPUSH
5561: CALL_OW 88
// DialogueOff ;
5565: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
5569: LD_STRING M2
5571: PPUSH
5572: CALL_OW 337
// wait ( 2 2$30 ) ;
5576: LD_INT 5250
5578: PPUSH
5579: CALL_OW 67
// PrepareBurlak ;
5583: CALL 2269 0 0
// BurlakArmy ;
5587: CALL 2451 0 0
// end ;
5591: LD_VAR 0 1
5595: RET
// every 0 0$1 trigger See ( 1 , Masha ) do
5596: LD_INT 1
5598: PPUSH
5599: LD_EXP 18
5603: PPUSH
5604: CALL_OW 292
5608: IFFALSE 5767
5610: GO 5612
5612: DISABLE
// begin DialogueOn ;
5613: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
5617: LD_EXP 18
5621: PPUSH
5622: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
5626: LD_INT 22
5628: PUSH
5629: LD_INT 1
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: PUSH
5636: LD_INT 26
5638: PUSH
5639: LD_INT 1
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: LD_INT 2
5648: PUSH
5649: LD_INT 25
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PUSH
5659: LD_INT 25
5661: PUSH
5662: LD_INT 2
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 25
5671: PUSH
5672: LD_INT 3
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PUSH
5679: LD_INT 25
5681: PUSH
5682: LD_INT 4
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 25
5691: PUSH
5692: LD_INT 5
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: PPUSH
5712: CALL_OW 69
5716: PPUSH
5717: LD_STRING D5-Sol1-1
5719: PPUSH
5720: LD_STRING D5-FSol1-1
5722: PPUSH
5723: CALL 8225 0 3
// Say ( JMM , D5-JMM-1 ) ;
5727: LD_EXP 1
5731: PPUSH
5732: LD_STRING D5-JMM-1
5734: PPUSH
5735: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
5739: LD_EXP 17
5743: PPUSH
5744: LD_STRING DAmer-Bur-1
5746: PPUSH
5747: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
5751: LD_EXP 1
5755: PPUSH
5756: LD_STRING DAmer-JMM-1
5758: PPUSH
5759: CALL_OW 88
// DialogueOff ;
5763: CALL_OW 7
// end ;
5767: END
// every 0 0$1 trigger FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do var i ;
5768: LD_INT 4
5770: PPUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 7
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PPUSH
5781: CALL_OW 70
5785: IFFALSE 6184
5787: GO 5789
5789: DISABLE
5790: LD_INT 0
5792: PPUSH
// begin enable ;
5793: ENABLE
// for i in FilterUnitsInArea ( AllianceEscape , [ f_side , 7 ] ) do
5794: LD_ADDR_VAR 0 1
5798: PUSH
5799: LD_INT 4
5801: PPUSH
5802: LD_INT 22
5804: PUSH
5805: LD_INT 7
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PPUSH
5812: CALL_OW 70
5816: PUSH
5817: FOR_IN
5818: IFFALSE 6182
// begin if i = Burlak or i = Masha then
5820: LD_VAR 0 1
5824: PUSH
5825: LD_EXP 17
5829: EQUAL
5830: PUSH
5831: LD_VAR 0 1
5835: PUSH
5836: LD_EXP 18
5840: EQUAL
5841: OR
5842: IFFALSE 5989
// begin RemoveUnit ( i ) ;
5844: LD_VAR 0 1
5848: PPUSH
5849: CALL_OW 64
// DialogueOn ;
5853: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
5857: LD_EXP 1
5861: PPUSH
5862: LD_STRING D5a-JMM-1
5864: PPUSH
5865: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
5869: LD_INT 22
5871: PUSH
5872: LD_INT 1
5874: PUSH
5875: EMPTY
5876: LIST
5877: LIST
5878: PUSH
5879: LD_INT 26
5881: PUSH
5882: LD_INT 1
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 2
5891: PUSH
5892: LD_INT 25
5894: PUSH
5895: LD_INT 1
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 25
5904: PUSH
5905: LD_INT 2
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 25
5914: PUSH
5915: LD_INT 3
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 25
5924: PUSH
5925: LD_INT 4
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 25
5934: PUSH
5935: LD_INT 5
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: PPUSH
5955: CALL_OW 69
5959: PPUSH
5960: LD_STRING D5a-Sol1-1
5962: PPUSH
5963: LD_STRING D5-FSol1-1
5965: PPUSH
5966: CALL 8225 0 3
// DialogueOff ;
5970: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
5974: LD_STRING M2b
5976: PPUSH
5977: CALL_OW 337
// spawnBurlak = 0 ;
5981: LD_ADDR_EXP 27
5985: PUSH
5986: LD_INT 0
5988: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
5989: LD_VAR 0 1
5993: PPUSH
5994: CALL_OW 247
5998: PUSH
5999: LD_INT 2
6001: EQUAL
6002: PUSH
6003: LD_VAR 0 1
6007: PPUSH
6008: CALL_OW 263
6012: PUSH
6013: LD_INT 1
6015: EQUAL
6016: AND
6017: IFFALSE 6145
// begin case IsDrivenBy ( i ) of Gnyevko :
6019: LD_VAR 0 1
6023: PPUSH
6024: CALL_OW 311
6028: PUSH
6029: LD_EXP 19
6033: DOUBLE
6034: EQUAL
6035: IFTRUE 6039
6037: GO 6052
6039: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
6040: LD_INT 1
6042: PPUSH
6043: LD_STRING 13_Gnyevko_1
6045: PPUSH
6046: CALL_OW 39
6050: GO 6145
6052: LD_EXP 20
6056: DOUBLE
6057: EQUAL
6058: IFTRUE 6062
6060: GO 6075
6062: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
6063: LD_INT 1
6065: PPUSH
6066: LD_STRING 13_Titov_1
6068: PPUSH
6069: CALL_OW 39
6073: GO 6145
6075: LD_EXP 21
6079: DOUBLE
6080: EQUAL
6081: IFTRUE 6085
6083: GO 6098
6085: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
6086: LD_INT 1
6088: PPUSH
6089: LD_STRING 13_Xavier_1
6091: PPUSH
6092: CALL_OW 39
6096: GO 6145
6098: LD_EXP 22
6102: DOUBLE
6103: EQUAL
6104: IFTRUE 6108
6106: GO 6121
6108: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
6109: LD_INT 1
6111: PPUSH
6112: LD_STRING 13_Belkov_1
6114: PPUSH
6115: CALL_OW 39
6119: GO 6145
6121: LD_EXP 23
6125: DOUBLE
6126: EQUAL
6127: IFTRUE 6131
6129: GO 6144
6131: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
6132: LD_INT 1
6134: PPUSH
6135: LD_STRING 13_Lipshchin_1
6137: PPUSH
6138: CALL_OW 39
6142: GO 6145
6144: POP
// end ; if GetWeapon ( i ) = ru_time_lapser then
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL_OW 264
6154: PUSH
6155: LD_INT 49
6157: EQUAL
6158: IFFALSE 6171
// DestroyUnit ( i ) else
6160: LD_VAR 0 1
6164: PPUSH
6165: CALL_OW 65
6169: GO 6180
// RemoveUnit ( i ) ;
6171: LD_VAR 0 1
6175: PPUSH
6176: CALL_OW 64
// end ;
6180: GO 5817
6182: POP
6183: POP
// end ;
6184: PPOPN 1
6186: END
// every 0 0$1 trigger IsOk ( Burlak ) and GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
6187: LD_EXP 17
6191: PPUSH
6192: CALL_OW 302
6196: PUSH
6197: LD_EXP 18
6201: PPUSH
6202: CALL_OW 256
6206: PUSH
6207: LD_INT 500
6209: LESS
6210: AND
6211: PUSH
6212: LD_EXP 18
6216: PPUSH
6217: CALL_OW 255
6221: PUSH
6222: LD_INT 7
6224: EQUAL
6225: AND
6226: IFFALSE 6246
6228: GO 6230
6230: DISABLE
// ComMoveXY ( Burlak , 107 , 118 ) ;
6231: LD_EXP 17
6235: PPUSH
6236: LD_INT 107
6238: PPUSH
6239: LD_INT 118
6241: PPUSH
6242: CALL_OW 111
6246: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
6247: LD_EXP 17
6251: PPUSH
6252: CALL_OW 301
6256: PUSH
6257: LD_EXP 27
6261: PUSH
6262: LD_INT 1
6264: EQUAL
6265: AND
6266: IFFALSE 6399
6268: GO 6270
6270: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
6271: LD_EXP 1
6275: PPUSH
6276: LD_STRING D5b-JMM-1
6278: PPUSH
6279: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
6283: LD_INT 22
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 26
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 2
6305: PUSH
6306: LD_INT 25
6308: PUSH
6309: LD_INT 1
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 25
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: PUSH
6326: LD_INT 25
6328: PUSH
6329: LD_INT 3
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 25
6338: PUSH
6339: LD_INT 4
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: LD_INT 25
6348: PUSH
6349: LD_INT 5
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: LIST
6368: PPUSH
6369: CALL_OW 69
6373: PPUSH
6374: LD_STRING D5b-Sol1-1
6376: PPUSH
6377: LD_STRING 
6379: PPUSH
6380: CALL 8225 0 3
// ChangeMissionObjectives ( M2a ) ;
6384: LD_STRING M2a
6386: PPUSH
6387: CALL_OW 337
// burlakStatus := 1 ;
6391: LD_ADDR_EXP 28
6395: PUSH
6396: LD_INT 1
6398: ST_TO_ADDR
// end ;
6399: END
// every 0 0$1 trigger IsDead ( Stevens ) do
6400: LD_EXP 2
6404: PPUSH
6405: CALL_OW 301
6409: IFFALSE 6546
6411: GO 6413
6413: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
6414: LD_EXP 1
6418: PPUSH
6419: LD_STRING D6-JMM-1
6421: PPUSH
6422: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
6426: LD_INT 22
6428: PUSH
6429: LD_INT 1
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: LD_INT 26
6438: PUSH
6439: LD_INT 1
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 2
6448: PUSH
6449: LD_INT 25
6451: PUSH
6452: LD_INT 1
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 25
6461: PUSH
6462: LD_INT 2
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 25
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 25
6481: PUSH
6482: LD_INT 4
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PUSH
6489: LD_INT 25
6491: PUSH
6492: LD_INT 5
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: PPUSH
6512: CALL_OW 69
6516: PPUSH
6517: LD_STRING D6-Sol1-1
6519: PPUSH
6520: LD_STRING 
6522: PPUSH
6523: CALL 8225 0 3
// Say ( JMM , D6-JMM-2 ) ;
6527: LD_EXP 1
6531: PPUSH
6532: LD_STRING D6-JMM-2
6534: PPUSH
6535: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
6539: LD_STRING M1a
6541: PPUSH
6542: CALL_OW 337
// end ;
6546: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
6547: LD_INT 25
6549: PPUSH
6550: LD_INT 1
6552: PPUSH
6553: CALL_OW 321
6557: PUSH
6558: LD_INT 2
6560: EQUAL
6561: IFFALSE 6578
6563: GO 6565
6565: DISABLE
// Say ( Stevens , D6-Huck-2 ) ;
6566: LD_EXP 2
6570: PPUSH
6571: LD_STRING D6-Huck-2
6573: PPUSH
6574: CALL_OW 88
6578: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_siberium_rocket ] , [ f_bweapon , us_siberium_rocket ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_warehouse ] , [ f_not , [ f_constructed ] ] ] ) and FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] , [ f_not , [ f_constructed ] ] ] ) do
6579: LD_INT 22
6581: PUSH
6582: LD_INT 1
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 2
6591: PUSH
6592: LD_INT 34
6594: PUSH
6595: LD_INT 8
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 35
6604: PUSH
6605: LD_INT 8
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PUSH
6626: LD_INT 5
6628: PPUSH
6629: LD_INT 22
6631: PUSH
6632: LD_INT 1
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 21
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 30
6651: PUSH
6652: LD_INT 1
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 3
6661: PUSH
6662: LD_INT 57
6664: PUSH
6665: EMPTY
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 70
6682: AND
6683: PUSH
6684: LD_INT 5
6686: PPUSH
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 21
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 30
6709: PUSH
6710: LD_INT 5
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 57
6722: PUSH
6723: EMPTY
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: PPUSH
6736: CALL_OW 70
6740: AND
6741: IFFALSE 6783
6743: GO 6745
6745: DISABLE
// begin DialogueOn ;
6746: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
6750: LD_EXP 1
6754: PPUSH
6755: LD_STRING D7-JMM-1
6757: PPUSH
6758: CALL_OW 88
// DialogueOff ;
6762: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
6766: LD_STRING M4
6768: PPUSH
6769: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
6773: LD_INT 5
6775: PPUSH
6776: LD_INT 0
6778: PPUSH
6779: CALL_OW 424
// end ;
6783: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) and eventVar3 = 1 and radationResearched = 0 do
6784: LD_INT 6
6786: PPUSH
6787: LD_INT 22
6789: PUSH
6790: LD_INT 1
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 25
6799: PUSH
6800: LD_INT 4
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PPUSH
6811: CALL_OW 70
6815: PUSH
6816: LD_EXP 37
6820: PUSH
6821: LD_INT 1
6823: EQUAL
6824: AND
6825: PUSH
6826: LD_EXP 29
6830: PUSH
6831: LD_INT 0
6833: EQUAL
6834: AND
6835: IFFALSE 6900
6837: GO 6839
6839: DISABLE
// begin enable ;
6840: ENABLE
// AmSciSib := FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
6841: LD_ADDR_EXP 26
6845: PUSH
6846: LD_INT 6
6848: PPUSH
6849: LD_INT 22
6851: PUSH
6852: LD_INT 1
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 25
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PPUSH
6873: CALL_OW 70
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
6882: LD_INT 6
6884: PPUSH
6885: LD_INT 0
6887: PPUSH
6888: CALL_OW 424
// radationResearched := 1 ;
6892: LD_ADDR_EXP 29
6896: PUSH
6897: LD_INT 1
6899: ST_TO_ADDR
// end ;
6900: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
6901: LD_EXP 26
6905: PPUSH
6906: CALL_OW 301
6910: PUSH
6911: LD_EXP 29
6915: PUSH
6916: LD_INT 1
6918: EQUAL
6919: AND
6920: IFFALSE 6956
6922: GO 6924
6924: DISABLE
// begin enable ;
6925: ENABLE
// radationResearched = 0 ;
6926: LD_ADDR_EXP 29
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
6934: LD_INT 6
6936: PPUSH
6937: LD_INT 1
6939: PPUSH
6940: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
6944: LD_EXP 1
6948: PPUSH
6949: LD_STRING D9a-JMM-1
6951: PPUSH
6952: CALL_OW 88
// end ; end_of_file
6956: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = us_siberium_rocket and eventVar1 = 0 then
6957: LD_VAR 0 5
6961: PUSH
6962: LD_INT 8
6964: EQUAL
6965: PUSH
6966: LD_EXP 35
6970: PUSH
6971: LD_INT 0
6973: EQUAL
6974: AND
6975: IFFALSE 7028
// begin eventVar1 := 1 ;
6977: LD_ADDR_EXP 35
6981: PUSH
6982: LD_INT 1
6984: ST_TO_ADDR
// DialogueOn ;
6985: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
6989: LD_EXP 1
6993: PPUSH
6994: LD_STRING D6a-JMM-1
6996: PPUSH
6997: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
7001: LD_EXP 15
7005: PPUSH
7006: LD_STRING D6a-Pow-1
7008: PPUSH
7009: CALL_OW 94
// DialogueOff ;
7013: CALL_OW 7
// wait ( 3 3$0 ) ;
7017: LD_INT 6300
7019: PPUSH
7020: CALL_OW 67
// PowellSupport ;
7024: CALL 1845 0 0
// end ; end ;
7028: PPOPN 5
7030: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7031: LD_VAR 0 1
7035: PPUSH
7036: CALL 26884 0 1
// if un = JMM then
7040: LD_VAR 0 1
7044: PUSH
7045: LD_EXP 1
7049: EQUAL
7050: IFFALSE 7059
// YouLost ( JMM ) ;
7052: LD_STRING JMM
7054: PPUSH
7055: CALL_OW 104
// if GetWeapon ( un ) = ar_control_tower then
7059: LD_VAR 0 1
7063: PPUSH
7064: CALL_OW 264
7068: PUSH
7069: LD_INT 31
7071: EQUAL
7072: IFFALSE 7088
// achivCounter := achivCounter + 1 ;
7074: LD_ADDR_EXP 41
7078: PUSH
7079: LD_EXP 41
7083: PUSH
7084: LD_INT 1
7086: PLUS
7087: ST_TO_ADDR
// if GetSide ( un ) <> 1 and GetType ( un ) = unit_vehicle then
7088: LD_VAR 0 1
7092: PPUSH
7093: CALL_OW 255
7097: PUSH
7098: LD_INT 1
7100: NONEQUAL
7101: PUSH
7102: LD_VAR 0 1
7106: PPUSH
7107: CALL_OW 247
7111: PUSH
7112: LD_INT 2
7114: EQUAL
7115: AND
7116: IFFALSE 7132
// destroyCounter := destroyCounter + 1 ;
7118: LD_ADDR_EXP 42
7122: PUSH
7123: LD_EXP 42
7127: PUSH
7128: LD_INT 1
7130: PLUS
7131: ST_TO_ADDR
// end ;
7132: PPOPN 1
7134: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId = Masha then
7135: LD_VAR 0 2
7139: PUSH
7140: LD_EXP 18
7144: EQUAL
7145: IFFALSE 7154
// SetAchievement ( ACH_MASHA ) ;
7147: LD_STRING ACH_MASHA
7149: PPUSH
7150: CALL_OW 543
// end ;
7154: PPOPN 4
7156: END
// on VehicleConstructed ( vehicle , building ) do begin SOS_VehicleConstructed ( vehicle , building ) ;
7157: LD_VAR 0 1
7161: PPUSH
7162: LD_VAR 0 2
7166: PPUSH
7167: CALL 27004 0 2
// if GetWeapon ( vehicle ) = us_siberium_rocket and eventVar2 = 0 then
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 264
7180: PUSH
7181: LD_INT 8
7183: EQUAL
7184: PUSH
7185: LD_EXP 36
7189: PUSH
7190: LD_INT 0
7192: EQUAL
7193: AND
7194: IFFALSE 7263
// begin eventVar2 := 1 ;
7196: LD_ADDR_EXP 36
7200: PUSH
7201: LD_INT 1
7203: ST_TO_ADDR
// DialogueOn ;
7204: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
7208: LD_EXP 1
7212: PPUSH
7213: LD_STRING D6b-JMM-1
7215: PPUSH
7216: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
7220: LD_EXP 15
7224: PPUSH
7225: LD_STRING D6b-Pow-1
7227: PPUSH
7228: CALL_OW 94
// DialogueOff ;
7232: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
7236: LD_INT 5
7238: PPUSH
7239: LD_INT 1
7241: PPUSH
7242: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
7246: LD_INT 7
7248: PPUSH
7249: LD_INT 1
7251: PPUSH
7252: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
7256: LD_STRING M3
7258: PPUSH
7259: CALL_OW 337
// end ; end ;
7263: PPOPN 2
7265: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
7266: LD_VAR 0 2
7270: PPUSH
7271: LD_VAR 0 3
7275: PPUSH
7276: LD_INT 5
7278: PPUSH
7279: CALL_OW 309
7283: PUSH
7284: LD_EXP 37
7288: PUSH
7289: LD_INT 0
7291: EQUAL
7292: AND
7293: IFFALSE 7518
// begin eventVar3 := 1 ;
7295: LD_ADDR_EXP 37
7299: PUSH
7300: LD_INT 1
7302: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7303: LD_INT 175
7305: PPUSH
7306: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_radar ] ] ) then
7310: LD_INT 7
7312: PPUSH
7313: LD_INT 22
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 21
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 34
7335: PUSH
7336: LD_INT 11
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: PPUSH
7348: CALL_OW 70
7352: IFFALSE 7371
// begin radarOnSpot := 1 ;
7354: LD_ADDR_EXP 30
7358: PUSH
7359: LD_INT 1
7361: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
7362: LD_STRING M3a
7364: PPUSH
7365: CALL_OW 337
// end else
7369: GO 7378
// ChangeMissionObjectives ( M3b ) ;
7371: LD_STRING M3b
7373: PPUSH
7374: CALL_OW 337
// DialogueOn ;
7378: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
7382: LD_EXP 2
7386: PPUSH
7387: LD_STRING D8-Huck-1
7389: PPUSH
7390: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
7394: LD_EXP 1
7398: PPUSH
7399: LD_STRING D8-JMM-1
7401: PPUSH
7402: CALL_OW 88
// if IsOk ( Stevens ) then
7406: LD_EXP 2
7410: PPUSH
7411: CALL_OW 302
7415: IFFALSE 7477
// begin Say ( Stevens , D8-Huck-2 ) ;
7417: LD_EXP 2
7421: PPUSH
7422: LD_STRING D8-Huck-2
7424: PPUSH
7425: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
7429: LD_EXP 1
7433: PPUSH
7434: LD_STRING D8-JMM-2
7436: PPUSH
7437: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
7441: LD_EXP 2
7445: PPUSH
7446: LD_STRING D8-Huck-3
7448: PPUSH
7449: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
7453: LD_EXP 1
7457: PPUSH
7458: LD_STRING D8-JMM-3
7460: PPUSH
7461: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
7465: LD_EXP 2
7469: PPUSH
7470: LD_STRING D8-Huck-4
7472: PPUSH
7473: CALL_OW 88
// end ; DialogueOff ;
7477: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
7481: LD_INT 5
7483: PPUSH
7484: LD_INT 0
7486: PPUSH
7487: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
7491: LD_INT 7
7493: PPUSH
7494: LD_INT 0
7496: PPUSH
7497: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
7501: LD_INT 6
7503: PPUSH
7504: LD_INT 1
7506: PPUSH
7507: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
7511: LD_STRING M5
7513: PPUSH
7514: CALL_OW 337
// end ; end ;
7518: PPOPN 3
7520: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 and ( GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium ) then
7521: LD_EXP 26
7525: PPUSH
7526: CALL_OW 302
7530: PUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_EXP 26
7540: EQUAL
7541: AND
7542: PUSH
7543: LD_EXP 38
7547: PUSH
7548: LD_INT 0
7550: EQUAL
7551: AND
7552: PUSH
7553: LD_EXP 37
7557: PUSH
7558: LD_INT 1
7560: EQUAL
7561: AND
7562: PUSH
7563: LD_VAR 0 1
7567: PPUSH
7568: LD_INT 1
7570: PPUSH
7571: CALL_OW 268
7575: PUSH
7576: LD_INT 11
7578: EQUAL
7579: PUSH
7580: LD_VAR 0 1
7584: PPUSH
7585: LD_INT 2
7587: PPUSH
7588: CALL_OW 268
7592: PUSH
7593: LD_INT 11
7595: EQUAL
7596: OR
7597: AND
7598: IFFALSE 7608
// eventVar4 := 1 ;
7600: LD_ADDR_EXP 38
7604: PUSH
7605: LD_INT 1
7607: ST_TO_ADDR
// end ;
7608: PPOPN 2
7610: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
7611: LD_INT 0
7613: PPUSH
7614: PPUSH
// begin if GetNation ( unit ) = nation_arabian then
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 248
7624: PUSH
7625: LD_INT 2
7627: EQUAL
7628: IFFALSE 7874
// begin sibDestroyedCounter := sibDestroyedCounter + 1 ;
7630: LD_ADDR_EXP 32
7634: PUSH
7635: LD_EXP 32
7639: PUSH
7640: LD_INT 1
7642: PLUS
7643: ST_TO_ADDR
// for i := sibDeposits downto 1 do
7644: LD_ADDR_VAR 0 4
7648: PUSH
7649: DOUBLE
7650: LD_EXP 31
7654: INC
7655: ST_TO_ADDR
7656: LD_INT 1
7658: PUSH
7659: FOR_DOWNTO
7660: IFFALSE 7730
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
7662: LD_EXP 31
7666: PUSH
7667: LD_VAR 0 4
7671: ARRAY
7672: PUSH
7673: LD_INT 1
7675: ARRAY
7676: PUSH
7677: LD_VAR 0 2
7681: EQUAL
7682: PUSH
7683: LD_EXP 31
7687: PUSH
7688: LD_VAR 0 4
7692: ARRAY
7693: PUSH
7694: LD_INT 2
7696: ARRAY
7697: PUSH
7698: LD_VAR 0 3
7702: EQUAL
7703: AND
7704: IFFALSE 7728
// begin sibDeposits := Delete ( sibDeposits , i ) ;
7706: LD_ADDR_EXP 31
7710: PUSH
7711: LD_EXP 31
7715: PPUSH
7716: LD_VAR 0 4
7720: PPUSH
7721: CALL_OW 3
7725: ST_TO_ADDR
// break ;
7726: GO 7730
// end ;
7728: GO 7659
7730: POP
7731: POP
// if eventVar5 = 0 and HexInfo ( x , y ) in FilterAllUnits ( [ f_side , 1 ] ) then
7732: LD_EXP 39
7736: PUSH
7737: LD_INT 0
7739: EQUAL
7740: PUSH
7741: LD_VAR 0 2
7745: PPUSH
7746: LD_VAR 0 3
7750: PPUSH
7751: CALL_OW 428
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 1
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 69
7770: IN
7771: AND
7772: IFFALSE 7874
// begin eventVar5 := 1 ;
7774: LD_ADDR_EXP 39
7778: PUSH
7779: LD_INT 1
7781: ST_TO_ADDR
// DialogueOn ;
7782: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
7786: LD_EXP 2
7790: PPUSH
7791: LD_STRING D4-Sci1-1
7793: PPUSH
7794: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7798: LD_EXP 1
7802: PPUSH
7803: LD_STRING D4-JMM-1
7805: PPUSH
7806: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
7810: LD_EXP 2
7814: PPUSH
7815: LD_STRING D4-Sci1-2
7817: PPUSH
7818: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7822: LD_EXP 1
7826: PPUSH
7827: LD_STRING D4-JMM-2
7829: PPUSH
7830: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
7834: LD_EXP 2
7838: PPUSH
7839: LD_STRING D4-Sci1-3
7841: PPUSH
7842: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7846: LD_EXP 1
7850: PPUSH
7851: LD_STRING D4-JMM-3
7853: PPUSH
7854: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
7858: LD_EXP 1
7862: PPUSH
7863: LD_STRING D4-JMM-3a
7865: PPUSH
7866: CALL_OW 88
// DialogueOff ;
7870: CALL_OW 7
// end ; end ; end ;
7874: PPOPN 5
7876: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = b_depot and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 1 then
7877: LD_VAR 0 1
7881: PPUSH
7882: CALL_OW 255
7886: PUSH
7887: LD_INT 1
7889: EQUAL
7890: PUSH
7891: LD_VAR 0 1
7895: PPUSH
7896: CALL_OW 266
7900: PUSH
7901: LD_INT 0
7903: EQUAL
7904: AND
7905: PUSH
7906: LD_INT 22
7908: PUSH
7909: LD_INT 1
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PUSH
7916: LD_INT 21
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: LD_INT 30
7931: PUSH
7932: LD_INT 0
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: LD_INT 30
7941: PUSH
7942: LD_INT 1
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: PPUSH
7959: CALL_OW 69
7963: PUSH
7964: LD_INT 1
7966: EQUAL
7967: AND
7968: IFFALSE 7982
// SetBName ( building , omega ) ;
7970: LD_VAR 0 1
7974: PPUSH
7975: LD_STRING omega
7977: PPUSH
7978: CALL_OW 500
// end ;
7982: PPOPN 2
7984: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7985: LD_VAR 0 1
7989: PPUSH
7990: CALL 26988 0 1
// end ;
7994: PPOPN 1
7996: END
// on SailEvent ( event ) do begin if event = eventArabianAttack then
7997: LD_VAR 0 1
8001: PUSH
8002: LD_EXP 43
8006: EQUAL
8007: IFFALSE 8013
// ArabianAttack ;
8009: CALL 10142 0 0
// if event = eventRussianAttack then
8013: LD_VAR 0 1
8017: PUSH
8018: LD_EXP 44
8022: EQUAL
8023: IFFALSE 8029
// RussianAttack ;
8025: CALL 10507 0 0
// end ;
8029: PPOPN 1
8031: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = eventContaminate then
8032: LD_VAR 0 1
8036: PUSH
8037: LD_EXP 45
8041: EQUAL
8042: IFFALSE 8136
// begin if IsOk ( p1 ) and ValidHex ( p2 , p3 ) then
8044: LD_VAR 0 2
8048: PPUSH
8049: CALL_OW 302
8053: PUSH
8054: LD_VAR 0 3
8058: PPUSH
8059: LD_VAR 0 4
8063: PPUSH
8064: CALL_OW 488
8068: AND
8069: IFFALSE 8136
// begin repeat wait ( 0 0$1 ) ;
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 67
// if not HasTask ( p1 ) then
8078: LD_VAR 0 2
8082: PPUSH
8083: CALL_OW 314
8087: NOT
8088: IFFALSE 8124
// begin ComContaminate ( p1 , p2 , p3 ) ;
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: CALL_OW 158
// AddComMoveXY ( p1 , 42 , 3 ) ;
8109: LD_VAR 0 2
8113: PPUSH
8114: LD_INT 42
8116: PPUSH
8117: LD_INT 3
8119: PPUSH
8120: CALL_OW 171
// end ; until not IsOk ( p1 ) ;
8124: LD_VAR 0 2
8128: PPUSH
8129: CALL_OW 302
8133: NOT
8134: IFFALSE 8071
// end ; end ; end ;
8136: PPOPN 7
8138: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 8 ] then
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 255
8148: PUSH
8149: LD_INT 3
8151: PUSH
8152: LD_INT 8
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: IN
8159: IFFALSE 8222
// begin ComMoveXY ( driver , 41 , 2 ) ;
8161: LD_VAR 0 1
8165: PPUSH
8166: LD_INT 41
8168: PPUSH
8169: LD_INT 2
8171: PPUSH
8172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8176: LD_INT 35
8178: PPUSH
8179: CALL_OW 67
// if IsDead ( driver ) then
8183: LD_VAR 0 1
8187: PPUSH
8188: CALL_OW 301
8192: IFFALSE 8196
// exit ;
8194: GO 8222
// until IsAt ( driver , 41 , 2 ) ;
8196: LD_VAR 0 1
8200: PPUSH
8201: LD_INT 41
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 307
8211: IFFALSE 8176
// RemoveUnit ( driver ) ;
8213: LD_VAR 0 1
8217: PPUSH
8218: CALL_OW 64
// end ; end ; end_of_file
8222: PPOPN 4
8224: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
8225: LD_INT 0
8227: PPUSH
8228: PPUSH
8229: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
8230: LD_ADDR_VAR 0 1
8234: PUSH
8235: LD_VAR 0 1
8239: PUSH
8240: LD_EXP 1
8244: PUSH
8245: LD_EXP 2
8249: PUSH
8250: LD_EXP 3
8254: PUSH
8255: LD_EXP 4
8259: PUSH
8260: LD_EXP 5
8264: PUSH
8265: LD_EXP 6
8269: PUSH
8270: LD_EXP 7
8274: PUSH
8275: LD_EXP 8
8279: PUSH
8280: LD_EXP 9
8284: PUSH
8285: LD_EXP 10
8289: PUSH
8290: LD_EXP 11
8294: PUSH
8295: LD_EXP 12
8299: PUSH
8300: LD_EXP 13
8304: PUSH
8305: LD_EXP 14
8309: PUSH
8310: LD_EXP 15
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: DIFF
8332: ST_TO_ADDR
// if not characters then
8333: LD_VAR 0 1
8337: NOT
8338: IFFALSE 8342
// exit ;
8340: GO 8421
// speaker := characters [ rand ( 1 , characters ) ] ;
8342: LD_ADDR_VAR 0 6
8346: PUSH
8347: LD_VAR 0 1
8351: PUSH
8352: LD_INT 1
8354: PPUSH
8355: LD_VAR 0 1
8359: PPUSH
8360: CALL_OW 12
8364: ARRAY
8365: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
8366: LD_VAR 0 6
8370: PPUSH
8371: CALL_OW 258
8375: PUSH
8376: LD_INT 1
8378: EQUAL
8379: IFFALSE 8397
// Say ( speaker , dialogMID ) else
8381: LD_VAR 0 6
8385: PPUSH
8386: LD_VAR 0 2
8390: PPUSH
8391: CALL_OW 88
8395: GO 8411
// Say ( speaker , dialogFID ) ;
8397: LD_VAR 0 6
8401: PPUSH
8402: LD_VAR 0 3
8406: PPUSH
8407: CALL_OW 88
// result := speaker ;
8411: LD_ADDR_VAR 0 4
8415: PUSH
8416: LD_VAR 0 6
8420: ST_TO_ADDR
// end ;
8421: LD_VAR 0 4
8425: RET
// export function PrepareDifficulty ; begin
8426: LD_INT 0
8428: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
8429: LD_INT 5
8431: PPUSH
8432: LD_INT 8
8434: PPUSH
8435: LD_INT 2
8437: PPUSH
8438: CALL_OW 322
// if Difficulty = 1 then
8442: LD_OWVAR 67
8446: PUSH
8447: LD_INT 1
8449: EQUAL
8450: IFFALSE 8569
// begin SetTech ( 66 , 8 , state_researched ) ;
8452: LD_INT 66
8454: PPUSH
8455: LD_INT 8
8457: PPUSH
8458: LD_INT 2
8460: PPUSH
8461: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
8465: LD_INT 67
8467: PPUSH
8468: LD_INT 8
8470: PPUSH
8471: LD_INT 0
8473: PPUSH
8474: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8478: LD_INT 68
8480: PPUSH
8481: LD_INT 8
8483: PPUSH
8484: LD_INT 0
8486: PPUSH
8487: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8491: LD_INT 51
8493: PPUSH
8494: LD_INT 8
8496: PPUSH
8497: LD_INT 2
8499: PPUSH
8500: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
8504: LD_INT 52
8506: PPUSH
8507: LD_INT 8
8509: PPUSH
8510: LD_INT 0
8512: PPUSH
8513: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
8517: LD_INT 53
8519: PPUSH
8520: LD_INT 8
8522: PPUSH
8523: LD_INT 0
8525: PPUSH
8526: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8530: LD_INT 60
8532: PPUSH
8533: LD_INT 8
8535: PPUSH
8536: LD_INT 2
8538: PPUSH
8539: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
8543: LD_INT 61
8545: PPUSH
8546: LD_INT 8
8548: PPUSH
8549: LD_INT 0
8551: PPUSH
8552: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8556: LD_INT 62
8558: PPUSH
8559: LD_INT 8
8561: PPUSH
8562: LD_INT 0
8564: PPUSH
8565: CALL_OW 322
// end ; if Difficulty = 2 then
8569: LD_OWVAR 67
8573: PUSH
8574: LD_INT 2
8576: EQUAL
8577: IFFALSE 8696
// begin SetTech ( 66 , 8 , state_researched ) ;
8579: LD_INT 66
8581: PPUSH
8582: LD_INT 8
8584: PPUSH
8585: LD_INT 2
8587: PPUSH
8588: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8592: LD_INT 67
8594: PPUSH
8595: LD_INT 8
8597: PPUSH
8598: LD_INT 2
8600: PPUSH
8601: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8605: LD_INT 68
8607: PPUSH
8608: LD_INT 8
8610: PPUSH
8611: LD_INT 0
8613: PPUSH
8614: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8618: LD_INT 51
8620: PPUSH
8621: LD_INT 8
8623: PPUSH
8624: LD_INT 2
8626: PPUSH
8627: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8631: LD_INT 52
8633: PPUSH
8634: LD_INT 8
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8644: LD_INT 53
8646: PPUSH
8647: LD_INT 8
8649: PPUSH
8650: LD_INT 2
8652: PPUSH
8653: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8657: LD_INT 60
8659: PPUSH
8660: LD_INT 8
8662: PPUSH
8663: LD_INT 2
8665: PPUSH
8666: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8670: LD_INT 61
8672: PPUSH
8673: LD_INT 8
8675: PPUSH
8676: LD_INT 2
8678: PPUSH
8679: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8683: LD_INT 62
8685: PPUSH
8686: LD_INT 8
8688: PPUSH
8689: LD_INT 0
8691: PPUSH
8692: CALL_OW 322
// end ; if Difficulty >= 3 then
8696: LD_OWVAR 67
8700: PUSH
8701: LD_INT 3
8703: GREATEREQUAL
8704: IFFALSE 8823
// begin SetTech ( 66 , 8 , state_researched ) ;
8706: LD_INT 66
8708: PPUSH
8709: LD_INT 8
8711: PPUSH
8712: LD_INT 2
8714: PPUSH
8715: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
8719: LD_INT 67
8721: PPUSH
8722: LD_INT 8
8724: PPUSH
8725: LD_INT 2
8727: PPUSH
8728: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
8732: LD_INT 68
8734: PPUSH
8735: LD_INT 8
8737: PPUSH
8738: LD_INT 0
8740: PPUSH
8741: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
8745: LD_INT 51
8747: PPUSH
8748: LD_INT 8
8750: PPUSH
8751: LD_INT 2
8753: PPUSH
8754: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
8758: LD_INT 52
8760: PPUSH
8761: LD_INT 8
8763: PPUSH
8764: LD_INT 2
8766: PPUSH
8767: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
8771: LD_INT 53
8773: PPUSH
8774: LD_INT 8
8776: PPUSH
8777: LD_INT 2
8779: PPUSH
8780: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
8784: LD_INT 60
8786: PPUSH
8787: LD_INT 8
8789: PPUSH
8790: LD_INT 2
8792: PPUSH
8793: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
8797: LD_INT 61
8799: PPUSH
8800: LD_INT 8
8802: PPUSH
8803: LD_INT 2
8805: PPUSH
8806: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
8810: LD_INT 62
8812: PPUSH
8813: LD_INT 8
8815: PPUSH
8816: LD_INT 0
8818: PPUSH
8819: CALL_OW 322
// end ; end ;
8823: LD_VAR 0 1
8827: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8828: LD_INT 0
8830: PPUSH
8831: PPUSH
// for i in charactersList do
8832: LD_ADDR_VAR 0 4
8836: PUSH
8837: LD_VAR 0 1
8841: PUSH
8842: FOR_IN
8843: IFFALSE 8861
// SaveCharacters ( i , ident ) ;
8845: LD_VAR 0 4
8849: PPUSH
8850: LD_VAR 0 2
8854: PPUSH
8855: CALL_OW 38
8859: GO 8842
8861: POP
8862: POP
// end ; end_of_file
8863: LD_VAR 0 3
8867: RET
// every 0 0$1 trigger eventVar4 = 1 do var m1 , m2 , m3 ;
8868: LD_EXP 38
8872: PUSH
8873: LD_INT 1
8875: EQUAL
8876: IFFALSE 9846
8878: GO 8880
8880: DISABLE
8881: LD_INT 0
8883: PPUSH
8884: PPUSH
8885: PPUSH
// begin m1 := false ;
8886: LD_ADDR_VAR 0 1
8890: PUSH
8891: LD_INT 0
8893: ST_TO_ADDR
// m2 := false ;
8894: LD_ADDR_VAR 0 2
8898: PUSH
8899: LD_INT 0
8901: ST_TO_ADDR
// m3 := false ;
8902: LD_ADDR_VAR 0 3
8906: PUSH
8907: LD_INT 0
8909: ST_TO_ADDR
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
8910: LD_INT 22
8912: PUSH
8913: LD_INT 1
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 21
8922: PUSH
8923: LD_INT 1
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 23
8932: PUSH
8933: LD_INT 1
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 50
8942: PUSH
8943: EMPTY
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: PPUSH
8952: CALL_OW 69
8956: PPUSH
8957: CALL 33880 0 1
8961: PUSH
8962: LD_INT 5
8964: LESS
8965: IFFALSE 8974
// YouLost ( Troops ) ;
8967: LD_STRING Troops
8969: PPUSH
8970: CALL_OW 104
// DialogueOn ;
8974: CALL_OW 6
// Say ( JMM , D9b-JMM-1 ) ;
8978: LD_EXP 1
8982: PPUSH
8983: LD_STRING D9b-JMM-1
8985: PPUSH
8986: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
8990: LD_EXP 15
8994: PPUSH
8995: LD_STRING D9b-Pow-1
8997: PPUSH
8998: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
9002: LD_EXP 1
9006: PPUSH
9007: LD_STRING D9b-JMM-2
9009: PPUSH
9010: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
9014: LD_EXP 15
9018: PPUSH
9019: LD_STRING D9b-Pow-2
9021: PPUSH
9022: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
9026: LD_EXP 1
9030: PPUSH
9031: LD_STRING D9b-JMM-3
9033: PPUSH
9034: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
9038: LD_EXP 15
9042: PPUSH
9043: LD_STRING D9b-Pow-3
9045: PPUSH
9046: CALL_OW 94
// if tick <= 60 60$00 then
9050: LD_OWVAR 1
9054: PUSH
9055: LD_INT 126000
9057: LESSEQUAL
9058: IFFALSE 9067
// SetAchievement ( ACH_ASPEED_13 ) ;
9060: LD_STRING ACH_ASPEED_13
9062: PPUSH
9063: CALL_OW 543
// if burlakStatus = 1 then
9067: LD_EXP 28
9071: PUSH
9072: LD_INT 1
9074: EQUAL
9075: IFFALSE 9097
// begin m1 := true ;
9077: LD_ADDR_VAR 0 1
9081: PUSH
9082: LD_INT 1
9084: ST_TO_ADDR
// AddMedal ( Burlak , 1 ) ;
9085: LD_STRING Burlak
9087: PPUSH
9088: LD_INT 1
9090: PPUSH
9091: CALL_OW 101
// end else
9095: GO 9108
// begin AddMedal ( Burlak , - 1 ) ;
9097: LD_STRING Burlak
9099: PPUSH
9100: LD_INT 1
9102: NEG
9103: PPUSH
9104: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9108: LD_EXP 2
9112: PPUSH
9113: CALL_OW 302
9117: IFFALSE 9139
// begin m2 := true ;
9119: LD_ADDR_VAR 0 2
9123: PUSH
9124: LD_INT 1
9126: ST_TO_ADDR
// AddMedal ( Stevens , 1 ) ;
9127: LD_STRING Stevens
9129: PPUSH
9130: LD_INT 1
9132: PPUSH
9133: CALL_OW 101
// end else
9137: GO 9150
// begin AddMedal ( Stevens , - 1 ) ;
9139: LD_STRING Stevens
9141: PPUSH
9142: LD_INT 1
9144: NEG
9145: PPUSH
9146: CALL_OW 101
// end ; if radarOnSpot = 1 then
9150: LD_EXP 30
9154: PUSH
9155: LD_INT 1
9157: EQUAL
9158: IFFALSE 9180
// begin m3 := true ;
9160: LD_ADDR_VAR 0 3
9164: PUSH
9165: LD_INT 1
9167: ST_TO_ADDR
// AddMedal ( Observation , 1 ) ;
9168: LD_STRING Observation
9170: PPUSH
9171: LD_INT 1
9173: PPUSH
9174: CALL_OW 101
// end else
9178: GO 9191
// begin AddMedal ( Observation , - 1 ) ;
9180: LD_STRING Observation
9182: PPUSH
9183: LD_INT 1
9185: NEG
9186: PPUSH
9187: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
9191: LD_VAR 0 1
9195: PUSH
9196: LD_VAR 0 2
9200: AND
9201: PUSH
9202: LD_VAR 0 3
9206: AND
9207: PUSH
9208: LD_OWVAR 67
9212: PUSH
9213: LD_INT 3
9215: GREATEREQUAL
9216: AND
9217: IFFALSE 9229
// SetAchievementEX ( ACH_AMER , 13 ) ;
9219: LD_STRING ACH_AMER
9221: PPUSH
9222: LD_INT 13
9224: PPUSH
9225: CALL_OW 564
// GiveMedals ( MAIN ) ;
9229: LD_STRING MAIN
9231: PPUSH
9232: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9236: LD_EXP 28
9240: PPUSH
9241: LD_STRING 13_BurlakStatus_1
9243: PPUSH
9244: CALL_OW 39
// if IsLive ( Stevens ) then
9248: LD_EXP 2
9252: PPUSH
9253: CALL_OW 300
9257: IFFALSE 9271
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9259: LD_INT 1
9261: PPUSH
9262: LD_STRING 13_StevensStatus_1
9264: PPUSH
9265: CALL_OW 39
9269: GO 9281
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9271: LD_INT 0
9273: PPUSH
9274: LD_STRING 13_StevensStatus_1
9276: PPUSH
9277: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9281: LD_INT 22
9283: PUSH
9284: LD_INT 1
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PUSH
9291: LD_INT 21
9293: PUSH
9294: LD_INT 1
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: PUSH
9301: LD_INT 2
9303: PUSH
9304: LD_INT 25
9306: PUSH
9307: LD_INT 1
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 25
9316: PUSH
9317: LD_INT 2
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 25
9326: PUSH
9327: LD_INT 3
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 25
9336: PUSH
9337: LD_INT 4
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: LD_INT 25
9346: PUSH
9347: LD_INT 5
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 25
9356: PUSH
9357: LD_INT 8
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: LIST
9377: PPUSH
9378: CALL_OW 69
9382: PPUSH
9383: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9387: LD_EXP 1
9391: PPUSH
9392: LD_EXP 34
9396: PUSH
9397: LD_STRING JMM
9399: STR
9400: PPUSH
9401: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9405: LD_EXP 8
9409: PPUSH
9410: LD_EXP 34
9414: PUSH
9415: LD_STRING Brown
9417: STR
9418: PPUSH
9419: CALL 8828 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9423: LD_EXP 4
9427: PPUSH
9428: LD_EXP 34
9432: PUSH
9433: LD_STRING Donaldson
9435: STR
9436: PPUSH
9437: CALL 8828 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9441: LD_EXP 5
9445: PPUSH
9446: LD_EXP 34
9450: PUSH
9451: LD_STRING Bobby
9453: STR
9454: PPUSH
9455: CALL 8828 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
9459: LD_EXP 6
9463: PPUSH
9464: LD_EXP 34
9468: PUSH
9469: LD_STRING Cyrus
9471: STR
9472: PPUSH
9473: CALL 8828 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
9477: LD_EXP 3
9481: PPUSH
9482: LD_EXP 34
9486: PUSH
9487: LD_STRING Lisa
9489: STR
9490: PPUSH
9491: CALL 8828 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
9495: LD_EXP 13
9499: PPUSH
9500: LD_EXP 34
9504: PUSH
9505: LD_STRING Frank
9507: STR
9508: PPUSH
9509: CALL 8828 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
9513: LD_EXP 14
9517: PPUSH
9518: LD_EXP 34
9522: PUSH
9523: LD_STRING Kikuchi
9525: STR
9526: PPUSH
9527: CALL 8828 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
9531: LD_EXP 10
9535: PPUSH
9536: LD_EXP 34
9540: PUSH
9541: LD_STRING Houten
9543: STR
9544: PPUSH
9545: CALL 8828 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
9549: LD_EXP 12
9553: PPUSH
9554: LD_EXP 34
9558: PUSH
9559: LD_STRING Gary
9561: STR
9562: PPUSH
9563: CALL 8828 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
9567: LD_EXP 11
9571: PPUSH
9572: LD_EXP 34
9576: PUSH
9577: LD_STRING Cornell
9579: STR
9580: PPUSH
9581: CALL 8828 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
9585: LD_EXP 7
9589: PPUSH
9590: LD_EXP 34
9594: PUSH
9595: LD_STRING Denis
9597: STR
9598: PPUSH
9599: CALL 8828 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
9603: LD_EXP 9
9607: PPUSH
9608: LD_EXP 34
9612: PUSH
9613: LD_STRING Gladstone
9615: STR
9616: PPUSH
9617: CALL 8828 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
9621: LD_EXP 2
9625: PPUSH
9626: LD_EXP 34
9630: PUSH
9631: LD_STRING Stevens
9633: STR
9634: PPUSH
9635: CALL 8828 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
9639: LD_INT 50
9641: PUSH
9642: EMPTY
9643: LIST
9644: PUSH
9645: LD_INT 22
9647: PUSH
9648: LD_INT 1
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 21
9657: PUSH
9658: LD_INT 1
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 2
9667: PUSH
9668: LD_INT 25
9670: PUSH
9671: LD_INT 1
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 25
9680: PUSH
9681: LD_INT 2
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: LD_INT 25
9690: PUSH
9691: LD_INT 3
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 25
9700: PUSH
9701: LD_INT 4
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 25
9710: PUSH
9711: LD_INT 5
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: LD_INT 25
9720: PUSH
9721: LD_INT 8
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: PPUSH
9743: CALL_OW 69
9747: PUSH
9748: LD_EXP 1
9752: PUSH
9753: LD_EXP 8
9757: PUSH
9758: LD_EXP 4
9762: PUSH
9763: LD_EXP 5
9767: PUSH
9768: LD_EXP 6
9772: PUSH
9773: LD_EXP 3
9777: PUSH
9778: LD_EXP 13
9782: PUSH
9783: LD_EXP 9
9787: PUSH
9788: LD_EXP 14
9792: PUSH
9793: LD_EXP 7
9797: PUSH
9798: LD_EXP 10
9802: PUSH
9803: LD_EXP 12
9807: PUSH
9808: LD_EXP 11
9812: PUSH
9813: LD_EXP 2
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: DIFF
9834: PPUSH
9835: LD_STRING 13_other_survivors
9837: PPUSH
9838: CALL_OW 38
// YouWin ;
9842: CALL_OW 103
// end ; end_of_file
9846: PPOPN 3
9848: END
// every 0 0$1 trigger sibDestroyedCounter = 2 and not FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) and GetTech ( tech_SibFiss , 1 ) = state_enabled do var i , tmp , yourSiberite ;
9849: LD_EXP 32
9853: PUSH
9854: LD_INT 2
9856: EQUAL
9857: PUSH
9858: LD_INT 34
9860: PUSH
9861: LD_INT 8
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PPUSH
9868: CALL_OW 69
9872: NOT
9873: AND
9874: PUSH
9875: LD_INT 25
9877: PPUSH
9878: LD_INT 1
9880: PPUSH
9881: CALL_OW 321
9885: PUSH
9886: LD_INT 1
9888: EQUAL
9889: AND
9890: IFFALSE 10026
9892: GO 9894
9894: DISABLE
9895: LD_INT 0
9897: PPUSH
9898: PPUSH
9899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9900: LD_ADDR_VAR 0 2
9904: PUSH
9905: LD_INT 22
9907: PUSH
9908: LD_INT 1
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PUSH
9915: LD_INT 21
9917: PUSH
9918: LD_INT 3
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 2
9927: PUSH
9928: LD_INT 30
9930: PUSH
9931: LD_INT 0
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: LD_INT 30
9940: PUSH
9941: LD_INT 1
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: LIST
9957: PPUSH
9958: CALL_OW 69
9962: ST_TO_ADDR
// for i in tmp do
9963: LD_ADDR_VAR 0 1
9967: PUSH
9968: LD_VAR 0 2
9972: PUSH
9973: FOR_IN
9974: IFFALSE 10007
// yourSiberite := yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9976: LD_ADDR_VAR 0 3
9980: PUSH
9981: LD_VAR 0 3
9985: PUSH
9986: LD_VAR 0 1
9990: PPUSH
9991: CALL_OW 274
9995: PPUSH
9996: LD_INT 3
9998: PPUSH
9999: CALL_OW 275
10003: PLUS
10004: ST_TO_ADDR
10005: GO 9973
10007: POP
10008: POP
// if yourSiberite < 60 then
10009: LD_VAR 0 3
10013: PUSH
10014: LD_INT 60
10016: LESS
10017: IFFALSE 10026
// YouLost ( siberite ) ;
10019: LD_STRING siberite
10021: PPUSH
10022: CALL_OW 104
// end ; end_of_file
10026: PPOPN 3
10028: END
// every 8 8$00 + 8 8$00 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10029: LD_INT 22
10031: PUSH
10032: LD_INT 8
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PUSH
10039: LD_INT 21
10041: PUSH
10042: LD_INT 1
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PPUSH
10053: CALL_OW 69
10057: PUSH
10058: LD_INT 6
10060: LESS
10061: IFFALSE 10071
10063: GO 10065
10065: DISABLE
// begin enable ;
10066: ENABLE
// PrepareArabianAttack ;
10067: CALL 4079 0 0
// end ;
10071: END
// every 0 0$30 trigger eventVar1 = 1 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) < 6 do
10072: LD_EXP 35
10076: PUSH
10077: LD_INT 1
10079: EQUAL
10080: PUSH
10081: LD_INT 22
10083: PUSH
10084: LD_INT 8
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: LD_INT 21
10093: PUSH
10094: LD_INT 1
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PPUSH
10105: CALL_OW 69
10109: PUSH
10110: LD_INT 6
10112: LESS
10113: AND
10114: IFFALSE 10141
10116: GO 10118
10118: DISABLE
// begin wait ( 4 4$00 ) ;
10119: LD_INT 8400
10121: PPUSH
10122: CALL_OW 67
// PrepareRussianAttack ;
10126: CALL 3302 0 0
// wait ( 12 12$00 ) ;
10130: LD_INT 25200
10132: PPUSH
10133: CALL_OW 67
// PrepareRussianAttack ;
10137: CALL 3302 0 0
// end ;
10141: END
// export function ArabianAttack ; var i , tmp , path , path2 , vehicles , infantry , units , apes ; begin
10142: LD_INT 0
10144: PPUSH
10145: PPUSH
10146: PPUSH
10147: PPUSH
10148: PPUSH
10149: PPUSH
10150: PPUSH
10151: PPUSH
10152: PPUSH
// units := FilterAllUnits ( [ [ f_side , 8 ] , [ f_tag , 10 ] ] ) ;
10153: LD_ADDR_VAR 0 8
10157: PUSH
10158: LD_INT 22
10160: PUSH
10161: LD_INT 8
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 120
10170: PUSH
10171: LD_INT 10
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 69
10186: ST_TO_ADDR
// if not units then
10187: LD_VAR 0 8
10191: NOT
10192: IFFALSE 10196
// exit ;
10194: GO 10502
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10196: LD_ADDR_VAR 0 4
10200: PUSH
10201: LD_INT 80
10203: PUSH
10204: LD_INT 60
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: LD_INT 54
10213: PUSH
10214: LD_INT 57
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 55
10223: PUSH
10224: LD_INT 74
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: LD_INT 61
10233: PUSH
10234: LD_INT 85
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: ST_TO_ADDR
// path2 := [ [ 93 , 99 ] , [ 85 , 99 ] ] ;
10247: LD_ADDR_VAR 0 5
10251: PUSH
10252: LD_INT 93
10254: PUSH
10255: LD_INT 99
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 85
10264: PUSH
10265: LD_INT 99
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10276: LD_INT 35
10278: PPUSH
10279: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10283: LD_ADDR_VAR 0 6
10287: PUSH
10288: LD_VAR 0 8
10292: PPUSH
10293: LD_INT 21
10295: PUSH
10296: LD_INT 2
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PPUSH
10303: CALL_OW 72
10307: ST_TO_ADDR
// if vehicles then
10308: LD_VAR 0 6
10312: IFFALSE 10328
// AgressiveMove ( vehicles , path ) ;
10314: LD_VAR 0 6
10318: PPUSH
10319: LD_VAR 0 4
10323: PPUSH
10324: CALL 72073 0 2
// infantry := UnitFilter ( units , [ [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10328: LD_ADDR_VAR 0 7
10332: PUSH
10333: LD_VAR 0 8
10337: PPUSH
10338: LD_INT 23
10340: PUSH
10341: LD_INT 2
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 21
10350: PUSH
10351: LD_INT 1
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PPUSH
10362: CALL_OW 72
10366: ST_TO_ADDR
// if infantry then
10367: LD_VAR 0 7
10371: IFFALSE 10387
// AgressiveMove ( infantry , path2 ) ;
10373: LD_VAR 0 7
10377: PPUSH
10378: LD_VAR 0 5
10382: PPUSH
10383: CALL 72073 0 2
// apes := UnitFilter ( units , [ [ f_nation , 0 ] , [ f_type , unit_human ] ] ) ;
10387: LD_ADDR_VAR 0 9
10391: PUSH
10392: LD_VAR 0 8
10396: PPUSH
10397: LD_INT 23
10399: PUSH
10400: LD_INT 0
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 21
10409: PUSH
10410: LD_INT 1
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PPUSH
10421: CALL_OW 72
10425: ST_TO_ADDR
// if apes then
10426: LD_VAR 0 9
10430: IFFALSE 10474
// ComAttackUnit ( apes [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , apes [ 1 ] ) ) ;
10432: LD_VAR 0 9
10436: PUSH
10437: LD_INT 1
10439: ARRAY
10440: PPUSH
10441: LD_INT 22
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PPUSH
10451: CALL_OW 69
10455: PPUSH
10456: LD_VAR 0 9
10460: PUSH
10461: LD_INT 1
10463: ARRAY
10464: PPUSH
10465: CALL_OW 74
10469: PPUSH
10470: CALL_OW 115
// units := UnitFilter ( units , [ f_ok ] ) ;
10474: LD_ADDR_VAR 0 8
10478: PUSH
10479: LD_VAR 0 8
10483: PPUSH
10484: LD_INT 50
10486: PUSH
10487: EMPTY
10488: LIST
10489: PPUSH
10490: CALL_OW 72
10494: ST_TO_ADDR
// until not units ;
10495: LD_VAR 0 8
10499: NOT
10500: IFFALSE 10276
// end ;
10502: LD_VAR 0 1
10506: RET
// export function RussianAttack ; var i , tmp , path , vehicles , units ; begin
10507: LD_INT 0
10509: PPUSH
10510: PPUSH
10511: PPUSH
10512: PPUSH
10513: PPUSH
10514: PPUSH
// units := FilterAllUnits ( [ [ f_side , 3 ] , [ f_tag , 10 ] ] ) ;
10515: LD_ADDR_VAR 0 6
10519: PUSH
10520: LD_INT 22
10522: PUSH
10523: LD_INT 3
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: LD_INT 120
10532: PUSH
10533: LD_INT 10
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PPUSH
10544: CALL_OW 69
10548: ST_TO_ADDR
// if not units then
10549: LD_VAR 0 6
10553: NOT
10554: IFFALSE 10558
// exit ;
10556: GO 10689
// path := [ [ 80 , 60 ] , [ 54 , 57 ] , [ 55 , 74 ] , [ 61 , 85 ] ] ;
10558: LD_ADDR_VAR 0 4
10562: PUSH
10563: LD_INT 80
10565: PUSH
10566: LD_INT 60
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 54
10575: PUSH
10576: LD_INT 57
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 55
10585: PUSH
10586: LD_INT 74
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: LD_INT 61
10595: PUSH
10596: LD_INT 85
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10609: LD_INT 35
10611: PPUSH
10612: CALL_OW 67
// vehicles := UnitFilter ( units , [ f_type , unit_vehicle ] ) ;
10616: LD_ADDR_VAR 0 5
10620: PUSH
10621: LD_VAR 0 6
10625: PPUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PPUSH
10636: CALL_OW 72
10640: ST_TO_ADDR
// if vehicles then
10641: LD_VAR 0 5
10645: IFFALSE 10661
// AgressiveMove ( vehicles , path ) ;
10647: LD_VAR 0 5
10651: PPUSH
10652: LD_VAR 0 4
10656: PPUSH
10657: CALL 72073 0 2
// units := UnitFilter ( units , [ f_ok ] ) ;
10661: LD_ADDR_VAR 0 6
10665: PUSH
10666: LD_VAR 0 6
10670: PPUSH
10671: LD_INT 50
10673: PUSH
10674: EMPTY
10675: LIST
10676: PPUSH
10677: CALL_OW 72
10681: ST_TO_ADDR
// until not units ;
10682: LD_VAR 0 6
10686: NOT
10687: IFFALSE 10609
// end ; end_of_file
10689: LD_VAR 0 1
10693: RET
// every 0 0$01 do var i , cratesSpawned ;
10694: GO 10696
10696: DISABLE
10697: LD_INT 0
10699: PPUSH
10700: PPUSH
// begin cratesSpawned := 0 ;
10701: LD_ADDR_VAR 0 2
10705: PUSH
10706: LD_INT 0
10708: ST_TO_ADDR
// for i := 1 to 6 do
10709: LD_ADDR_VAR 0 1
10713: PUSH
10714: DOUBLE
10715: LD_INT 1
10717: DEC
10718: ST_TO_ADDR
10719: LD_INT 6
10721: PUSH
10722: FOR_TO
10723: IFFALSE 10748
// CreateCratesArea ( rand ( 2 , 5 ) , StartCratesArea , false ) ;
10725: LD_INT 2
10727: PPUSH
10728: LD_INT 5
10730: PPUSH
10731: CALL_OW 12
10735: PPUSH
10736: LD_INT 17
10738: PPUSH
10739: LD_INT 0
10741: PPUSH
10742: CALL_OW 55
10746: GO 10722
10748: POP
10749: POP
// wait ( 0 0$20 ) ;
10750: LD_INT 700
10752: PPUSH
10753: CALL_OW 67
// repeat wait ( 0 0$08 ) ;
10757: LD_INT 280
10759: PPUSH
10760: CALL_OW 67
// if cratesSpawned < 12 then
10764: LD_VAR 0 2
10768: PUSH
10769: LD_INT 12
10771: LESS
10772: IFFALSE 10824
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
10774: LD_INT 105
10776: PPUSH
10777: LD_INT 350
10779: PPUSH
10780: CALL_OW 12
10784: PPUSH
10785: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10789: LD_INT 3
10791: PPUSH
10792: LD_INT 5
10794: PPUSH
10795: CALL_OW 12
10799: PPUSH
10800: LD_INT 13
10802: PPUSH
10803: LD_INT 1
10805: PPUSH
10806: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10810: LD_ADDR_VAR 0 2
10814: PUSH
10815: LD_VAR 0 2
10819: PUSH
10820: LD_INT 1
10822: PLUS
10823: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
10824: LD_VAR 0 2
10828: PUSH
10829: LD_INT 12
10831: GREATEREQUAL
10832: PUSH
10833: LD_VAR 0 2
10837: PUSH
10838: LD_INT 32
10840: LESS
10841: AND
10842: IFFALSE 10894
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
10844: LD_INT 420
10846: PPUSH
10847: LD_INT 700
10849: PPUSH
10850: CALL_OW 12
10854: PPUSH
10855: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10859: LD_INT 3
10861: PPUSH
10862: LD_INT 5
10864: PPUSH
10865: CALL_OW 12
10869: PPUSH
10870: LD_INT 13
10872: PPUSH
10873: LD_INT 1
10875: PPUSH
10876: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10880: LD_ADDR_VAR 0 2
10884: PUSH
10885: LD_VAR 0 2
10889: PUSH
10890: LD_INT 1
10892: PLUS
10893: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
10894: LD_VAR 0 2
10898: PUSH
10899: LD_INT 32
10901: GREATEREQUAL
10902: IFFALSE 10976
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10904: LD_INT 13
10906: PPUSH
10907: CALL_OW 435
10911: PUSH
10912: LD_INT 14
10914: LESS
10915: IFFALSE 10926
// wait ( 0 0$20 ) else
10917: LD_INT 700
10919: PPUSH
10920: CALL_OW 67
10924: GO 10941
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
10926: LD_INT 1750
10928: PPUSH
10929: LD_INT 3150
10931: PPUSH
10932: CALL_OW 12
10936: PPUSH
10937: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
10941: LD_INT 2
10943: PPUSH
10944: LD_INT 5
10946: PPUSH
10947: CALL_OW 12
10951: PPUSH
10952: LD_INT 13
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
10962: LD_ADDR_VAR 0 2
10966: PUSH
10967: LD_VAR 0 2
10971: PUSH
10972: LD_INT 1
10974: PLUS
10975: ST_TO_ADDR
// end ; if cratesSpawned >= 120 then
10976: LD_VAR 0 2
10980: PUSH
10981: LD_INT 120
10983: GREATEREQUAL
10984: IFFALSE 11058
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
10986: LD_INT 13
10988: PPUSH
10989: CALL_OW 435
10993: PUSH
10994: LD_INT 14
10996: LESS
10997: IFFALSE 11008
// wait ( 0 0$40 ) else
10999: LD_INT 1400
11001: PPUSH
11002: CALL_OW 67
11006: GO 11023
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
11008: LD_INT 2450
11010: PPUSH
11011: LD_INT 3850
11013: PPUSH
11014: CALL_OW 12
11018: PPUSH
11019: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11023: LD_INT 1
11025: PPUSH
11026: LD_INT 5
11028: PPUSH
11029: CALL_OW 12
11033: PPUSH
11034: LD_INT 13
11036: PPUSH
11037: LD_INT 1
11039: PPUSH
11040: CALL_OW 55
// cratesSpawned := cratesSpawned + 1 ;
11044: LD_ADDR_VAR 0 2
11048: PUSH
11049: LD_VAR 0 2
11053: PUSH
11054: LD_INT 1
11056: PLUS
11057: ST_TO_ADDR
// end ; until false ;
11058: LD_INT 0
11060: IFFALSE 10757
// end ; end_of_file end_of_file
11062: PPOPN 2
11064: END
// export globalGameSaveCounter ; every 0 0$1 do
11065: GO 11067
11067: DISABLE
// begin enable ;
11068: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11069: LD_STRING updateTimer(
11071: PUSH
11072: LD_OWVAR 1
11076: STR
11077: PUSH
11078: LD_STRING );
11080: STR
11081: PPUSH
11082: CALL_OW 559
// end ;
11086: END
// every 0 0$1 do
11087: GO 11089
11089: DISABLE
// begin globalGameSaveCounter := 0 ;
11090: LD_ADDR_EXP 46
11094: PUSH
11095: LD_INT 0
11097: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11098: LD_STRING setGameSaveCounter(0)
11100: PPUSH
11101: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11105: LD_STRING initStreamRollete();
11107: PPUSH
11108: CALL_OW 559
// InitStreamMode ;
11112: CALL 12455 0 0
// DefineStreamItems ( false ) ;
11116: LD_INT 0
11118: PPUSH
11119: CALL 12919 0 1
// end ;
11123: END
// export function SOS_MapStart ( ) ; begin
11124: LD_INT 0
11126: PPUSH
// if streamModeActive then
11127: LD_EXP 47
11131: IFFALSE 11140
// DefineStreamItems ( true ) ;
11133: LD_INT 1
11135: PPUSH
11136: CALL 12919 0 1
// UpdateLuaVariables ( ) ;
11140: CALL 11157 0 0
// UpdateFactoryWaypoints ( ) ;
11144: CALL 25788 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11148: CALL 26045 0 0
// end ;
11152: LD_VAR 0 1
11156: RET
// function UpdateLuaVariables ( ) ; begin
11157: LD_INT 0
11159: PPUSH
// if globalGameSaveCounter then
11160: LD_EXP 46
11164: IFFALSE 11198
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11166: LD_ADDR_EXP 46
11170: PUSH
11171: LD_EXP 46
11175: PPUSH
11176: CALL 70830 0 1
11180: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11181: LD_STRING setGameSaveCounter(
11183: PUSH
11184: LD_EXP 46
11188: STR
11189: PUSH
11190: LD_STRING )
11192: STR
11193: PPUSH
11194: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11198: LD_STRING setGameDifficulty(
11200: PUSH
11201: LD_OWVAR 67
11205: STR
11206: PUSH
11207: LD_STRING )
11209: STR
11210: PPUSH
11211: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11215: LD_STRING displayDifficulty(
11217: PUSH
11218: LD_OWVAR 67
11222: STR
11223: PUSH
11224: LD_STRING )
11226: STR
11227: PPUSH
11228: CALL_OW 559
// end ;
11232: LD_VAR 0 1
11236: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11237: LD_INT 0
11239: PPUSH
// if p2 = stream_mode then
11240: LD_VAR 0 2
11244: PUSH
11245: LD_INT 100
11247: EQUAL
11248: IFFALSE 12251
// begin if not StreamModeActive then
11250: LD_EXP 47
11254: NOT
11255: IFFALSE 11265
// StreamModeActive := true ;
11257: LD_ADDR_EXP 47
11261: PUSH
11262: LD_INT 1
11264: ST_TO_ADDR
// if p3 = 0 then
11265: LD_VAR 0 3
11269: PUSH
11270: LD_INT 0
11272: EQUAL
11273: IFFALSE 11279
// InitStreamMode ;
11275: CALL 12455 0 0
// if p3 = 1 then
11279: LD_VAR 0 3
11283: PUSH
11284: LD_INT 1
11286: EQUAL
11287: IFFALSE 11297
// sRocket := true ;
11289: LD_ADDR_EXP 52
11293: PUSH
11294: LD_INT 1
11296: ST_TO_ADDR
// if p3 = 2 then
11297: LD_VAR 0 3
11301: PUSH
11302: LD_INT 2
11304: EQUAL
11305: IFFALSE 11315
// sSpeed := true ;
11307: LD_ADDR_EXP 51
11311: PUSH
11312: LD_INT 1
11314: ST_TO_ADDR
// if p3 = 3 then
11315: LD_VAR 0 3
11319: PUSH
11320: LD_INT 3
11322: EQUAL
11323: IFFALSE 11333
// sEngine := true ;
11325: LD_ADDR_EXP 53
11329: PUSH
11330: LD_INT 1
11332: ST_TO_ADDR
// if p3 = 4 then
11333: LD_VAR 0 3
11337: PUSH
11338: LD_INT 4
11340: EQUAL
11341: IFFALSE 11351
// sSpec := true ;
11343: LD_ADDR_EXP 50
11347: PUSH
11348: LD_INT 1
11350: ST_TO_ADDR
// if p3 = 5 then
11351: LD_VAR 0 3
11355: PUSH
11356: LD_INT 5
11358: EQUAL
11359: IFFALSE 11369
// sLevel := true ;
11361: LD_ADDR_EXP 54
11365: PUSH
11366: LD_INT 1
11368: ST_TO_ADDR
// if p3 = 6 then
11369: LD_VAR 0 3
11373: PUSH
11374: LD_INT 6
11376: EQUAL
11377: IFFALSE 11387
// sArmoury := true ;
11379: LD_ADDR_EXP 55
11383: PUSH
11384: LD_INT 1
11386: ST_TO_ADDR
// if p3 = 7 then
11387: LD_VAR 0 3
11391: PUSH
11392: LD_INT 7
11394: EQUAL
11395: IFFALSE 11405
// sRadar := true ;
11397: LD_ADDR_EXP 56
11401: PUSH
11402: LD_INT 1
11404: ST_TO_ADDR
// if p3 = 8 then
11405: LD_VAR 0 3
11409: PUSH
11410: LD_INT 8
11412: EQUAL
11413: IFFALSE 11423
// sBunker := true ;
11415: LD_ADDR_EXP 57
11419: PUSH
11420: LD_INT 1
11422: ST_TO_ADDR
// if p3 = 9 then
11423: LD_VAR 0 3
11427: PUSH
11428: LD_INT 9
11430: EQUAL
11431: IFFALSE 11441
// sHack := true ;
11433: LD_ADDR_EXP 58
11437: PUSH
11438: LD_INT 1
11440: ST_TO_ADDR
// if p3 = 10 then
11441: LD_VAR 0 3
11445: PUSH
11446: LD_INT 10
11448: EQUAL
11449: IFFALSE 11459
// sFire := true ;
11451: LD_ADDR_EXP 59
11455: PUSH
11456: LD_INT 1
11458: ST_TO_ADDR
// if p3 = 11 then
11459: LD_VAR 0 3
11463: PUSH
11464: LD_INT 11
11466: EQUAL
11467: IFFALSE 11477
// sRefresh := true ;
11469: LD_ADDR_EXP 60
11473: PUSH
11474: LD_INT 1
11476: ST_TO_ADDR
// if p3 = 12 then
11477: LD_VAR 0 3
11481: PUSH
11482: LD_INT 12
11484: EQUAL
11485: IFFALSE 11495
// sExp := true ;
11487: LD_ADDR_EXP 61
11491: PUSH
11492: LD_INT 1
11494: ST_TO_ADDR
// if p3 = 13 then
11495: LD_VAR 0 3
11499: PUSH
11500: LD_INT 13
11502: EQUAL
11503: IFFALSE 11513
// sDepot := true ;
11505: LD_ADDR_EXP 62
11509: PUSH
11510: LD_INT 1
11512: ST_TO_ADDR
// if p3 = 14 then
11513: LD_VAR 0 3
11517: PUSH
11518: LD_INT 14
11520: EQUAL
11521: IFFALSE 11531
// sFlag := true ;
11523: LD_ADDR_EXP 63
11527: PUSH
11528: LD_INT 1
11530: ST_TO_ADDR
// if p3 = 15 then
11531: LD_VAR 0 3
11535: PUSH
11536: LD_INT 15
11538: EQUAL
11539: IFFALSE 11549
// sKamikadze := true ;
11541: LD_ADDR_EXP 71
11545: PUSH
11546: LD_INT 1
11548: ST_TO_ADDR
// if p3 = 16 then
11549: LD_VAR 0 3
11553: PUSH
11554: LD_INT 16
11556: EQUAL
11557: IFFALSE 11567
// sTroll := true ;
11559: LD_ADDR_EXP 72
11563: PUSH
11564: LD_INT 1
11566: ST_TO_ADDR
// if p3 = 17 then
11567: LD_VAR 0 3
11571: PUSH
11572: LD_INT 17
11574: EQUAL
11575: IFFALSE 11585
// sSlow := true ;
11577: LD_ADDR_EXP 73
11581: PUSH
11582: LD_INT 1
11584: ST_TO_ADDR
// if p3 = 18 then
11585: LD_VAR 0 3
11589: PUSH
11590: LD_INT 18
11592: EQUAL
11593: IFFALSE 11603
// sLack := true ;
11595: LD_ADDR_EXP 74
11599: PUSH
11600: LD_INT 1
11602: ST_TO_ADDR
// if p3 = 19 then
11603: LD_VAR 0 3
11607: PUSH
11608: LD_INT 19
11610: EQUAL
11611: IFFALSE 11621
// sTank := true ;
11613: LD_ADDR_EXP 76
11617: PUSH
11618: LD_INT 1
11620: ST_TO_ADDR
// if p3 = 20 then
11621: LD_VAR 0 3
11625: PUSH
11626: LD_INT 20
11628: EQUAL
11629: IFFALSE 11639
// sRemote := true ;
11631: LD_ADDR_EXP 77
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// if p3 = 21 then
11639: LD_VAR 0 3
11643: PUSH
11644: LD_INT 21
11646: EQUAL
11647: IFFALSE 11657
// sPowell := true ;
11649: LD_ADDR_EXP 78
11653: PUSH
11654: LD_INT 1
11656: ST_TO_ADDR
// if p3 = 22 then
11657: LD_VAR 0 3
11661: PUSH
11662: LD_INT 22
11664: EQUAL
11665: IFFALSE 11675
// sTeleport := true ;
11667: LD_ADDR_EXP 81
11671: PUSH
11672: LD_INT 1
11674: ST_TO_ADDR
// if p3 = 23 then
11675: LD_VAR 0 3
11679: PUSH
11680: LD_INT 23
11682: EQUAL
11683: IFFALSE 11693
// sOilTower := true ;
11685: LD_ADDR_EXP 83
11689: PUSH
11690: LD_INT 1
11692: ST_TO_ADDR
// if p3 = 24 then
11693: LD_VAR 0 3
11697: PUSH
11698: LD_INT 24
11700: EQUAL
11701: IFFALSE 11711
// sShovel := true ;
11703: LD_ADDR_EXP 84
11707: PUSH
11708: LD_INT 1
11710: ST_TO_ADDR
// if p3 = 25 then
11711: LD_VAR 0 3
11715: PUSH
11716: LD_INT 25
11718: EQUAL
11719: IFFALSE 11729
// sSheik := true ;
11721: LD_ADDR_EXP 85
11725: PUSH
11726: LD_INT 1
11728: ST_TO_ADDR
// if p3 = 26 then
11729: LD_VAR 0 3
11733: PUSH
11734: LD_INT 26
11736: EQUAL
11737: IFFALSE 11747
// sEarthquake := true ;
11739: LD_ADDR_EXP 87
11743: PUSH
11744: LD_INT 1
11746: ST_TO_ADDR
// if p3 = 27 then
11747: LD_VAR 0 3
11751: PUSH
11752: LD_INT 27
11754: EQUAL
11755: IFFALSE 11765
// sAI := true ;
11757: LD_ADDR_EXP 88
11761: PUSH
11762: LD_INT 1
11764: ST_TO_ADDR
// if p3 = 28 then
11765: LD_VAR 0 3
11769: PUSH
11770: LD_INT 28
11772: EQUAL
11773: IFFALSE 11783
// sCargo := true ;
11775: LD_ADDR_EXP 91
11779: PUSH
11780: LD_INT 1
11782: ST_TO_ADDR
// if p3 = 29 then
11783: LD_VAR 0 3
11787: PUSH
11788: LD_INT 29
11790: EQUAL
11791: IFFALSE 11801
// sDLaser := true ;
11793: LD_ADDR_EXP 92
11797: PUSH
11798: LD_INT 1
11800: ST_TO_ADDR
// if p3 = 30 then
11801: LD_VAR 0 3
11805: PUSH
11806: LD_INT 30
11808: EQUAL
11809: IFFALSE 11819
// sExchange := true ;
11811: LD_ADDR_EXP 93
11815: PUSH
11816: LD_INT 1
11818: ST_TO_ADDR
// if p3 = 31 then
11819: LD_VAR 0 3
11823: PUSH
11824: LD_INT 31
11826: EQUAL
11827: IFFALSE 11837
// sFac := true ;
11829: LD_ADDR_EXP 94
11833: PUSH
11834: LD_INT 1
11836: ST_TO_ADDR
// if p3 = 32 then
11837: LD_VAR 0 3
11841: PUSH
11842: LD_INT 32
11844: EQUAL
11845: IFFALSE 11855
// sPower := true ;
11847: LD_ADDR_EXP 95
11851: PUSH
11852: LD_INT 1
11854: ST_TO_ADDR
// if p3 = 33 then
11855: LD_VAR 0 3
11859: PUSH
11860: LD_INT 33
11862: EQUAL
11863: IFFALSE 11873
// sRandom := true ;
11865: LD_ADDR_EXP 96
11869: PUSH
11870: LD_INT 1
11872: ST_TO_ADDR
// if p3 = 34 then
11873: LD_VAR 0 3
11877: PUSH
11878: LD_INT 34
11880: EQUAL
11881: IFFALSE 11891
// sShield := true ;
11883: LD_ADDR_EXP 97
11887: PUSH
11888: LD_INT 1
11890: ST_TO_ADDR
// if p3 = 35 then
11891: LD_VAR 0 3
11895: PUSH
11896: LD_INT 35
11898: EQUAL
11899: IFFALSE 11909
// sTime := true ;
11901: LD_ADDR_EXP 98
11905: PUSH
11906: LD_INT 1
11908: ST_TO_ADDR
// if p3 = 36 then
11909: LD_VAR 0 3
11913: PUSH
11914: LD_INT 36
11916: EQUAL
11917: IFFALSE 11927
// sTools := true ;
11919: LD_ADDR_EXP 99
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// if p3 = 101 then
11927: LD_VAR 0 3
11931: PUSH
11932: LD_INT 101
11934: EQUAL
11935: IFFALSE 11945
// sSold := true ;
11937: LD_ADDR_EXP 64
11941: PUSH
11942: LD_INT 1
11944: ST_TO_ADDR
// if p3 = 102 then
11945: LD_VAR 0 3
11949: PUSH
11950: LD_INT 102
11952: EQUAL
11953: IFFALSE 11963
// sDiff := true ;
11955: LD_ADDR_EXP 65
11959: PUSH
11960: LD_INT 1
11962: ST_TO_ADDR
// if p3 = 103 then
11963: LD_VAR 0 3
11967: PUSH
11968: LD_INT 103
11970: EQUAL
11971: IFFALSE 11981
// sFog := true ;
11973: LD_ADDR_EXP 68
11977: PUSH
11978: LD_INT 1
11980: ST_TO_ADDR
// if p3 = 104 then
11981: LD_VAR 0 3
11985: PUSH
11986: LD_INT 104
11988: EQUAL
11989: IFFALSE 11999
// sReset := true ;
11991: LD_ADDR_EXP 69
11995: PUSH
11996: LD_INT 1
11998: ST_TO_ADDR
// if p3 = 105 then
11999: LD_VAR 0 3
12003: PUSH
12004: LD_INT 105
12006: EQUAL
12007: IFFALSE 12017
// sSun := true ;
12009: LD_ADDR_EXP 70
12013: PUSH
12014: LD_INT 1
12016: ST_TO_ADDR
// if p3 = 106 then
12017: LD_VAR 0 3
12021: PUSH
12022: LD_INT 106
12024: EQUAL
12025: IFFALSE 12035
// sTiger := true ;
12027: LD_ADDR_EXP 66
12031: PUSH
12032: LD_INT 1
12034: ST_TO_ADDR
// if p3 = 107 then
12035: LD_VAR 0 3
12039: PUSH
12040: LD_INT 107
12042: EQUAL
12043: IFFALSE 12053
// sBomb := true ;
12045: LD_ADDR_EXP 67
12049: PUSH
12050: LD_INT 1
12052: ST_TO_ADDR
// if p3 = 108 then
12053: LD_VAR 0 3
12057: PUSH
12058: LD_INT 108
12060: EQUAL
12061: IFFALSE 12071
// sWound := true ;
12063: LD_ADDR_EXP 75
12067: PUSH
12068: LD_INT 1
12070: ST_TO_ADDR
// if p3 = 109 then
12071: LD_VAR 0 3
12075: PUSH
12076: LD_INT 109
12078: EQUAL
12079: IFFALSE 12089
// sBetray := true ;
12081: LD_ADDR_EXP 79
12085: PUSH
12086: LD_INT 1
12088: ST_TO_ADDR
// if p3 = 110 then
12089: LD_VAR 0 3
12093: PUSH
12094: LD_INT 110
12096: EQUAL
12097: IFFALSE 12107
// sContamin := true ;
12099: LD_ADDR_EXP 80
12103: PUSH
12104: LD_INT 1
12106: ST_TO_ADDR
// if p3 = 111 then
12107: LD_VAR 0 3
12111: PUSH
12112: LD_INT 111
12114: EQUAL
12115: IFFALSE 12125
// sOil := true ;
12117: LD_ADDR_EXP 82
12121: PUSH
12122: LD_INT 1
12124: ST_TO_ADDR
// if p3 = 112 then
12125: LD_VAR 0 3
12129: PUSH
12130: LD_INT 112
12132: EQUAL
12133: IFFALSE 12143
// sStu := true ;
12135: LD_ADDR_EXP 86
12139: PUSH
12140: LD_INT 1
12142: ST_TO_ADDR
// if p3 = 113 then
12143: LD_VAR 0 3
12147: PUSH
12148: LD_INT 113
12150: EQUAL
12151: IFFALSE 12161
// sBazooka := true ;
12153: LD_ADDR_EXP 89
12157: PUSH
12158: LD_INT 1
12160: ST_TO_ADDR
// if p3 = 114 then
12161: LD_VAR 0 3
12165: PUSH
12166: LD_INT 114
12168: EQUAL
12169: IFFALSE 12179
// sMortar := true ;
12171: LD_ADDR_EXP 90
12175: PUSH
12176: LD_INT 1
12178: ST_TO_ADDR
// if p3 = 115 then
12179: LD_VAR 0 3
12183: PUSH
12184: LD_INT 115
12186: EQUAL
12187: IFFALSE 12197
// sRanger := true ;
12189: LD_ADDR_EXP 100
12193: PUSH
12194: LD_INT 1
12196: ST_TO_ADDR
// if p3 = 116 then
12197: LD_VAR 0 3
12201: PUSH
12202: LD_INT 116
12204: EQUAL
12205: IFFALSE 12215
// sComputer := true ;
12207: LD_ADDR_EXP 101
12211: PUSH
12212: LD_INT 1
12214: ST_TO_ADDR
// if p3 = 117 then
12215: LD_VAR 0 3
12219: PUSH
12220: LD_INT 117
12222: EQUAL
12223: IFFALSE 12233
// s30 := true ;
12225: LD_ADDR_EXP 102
12229: PUSH
12230: LD_INT 1
12232: ST_TO_ADDR
// if p3 = 118 then
12233: LD_VAR 0 3
12237: PUSH
12238: LD_INT 118
12240: EQUAL
12241: IFFALSE 12251
// s60 := true ;
12243: LD_ADDR_EXP 103
12247: PUSH
12248: LD_INT 1
12250: ST_TO_ADDR
// end ; if p2 = hack_mode then
12251: LD_VAR 0 2
12255: PUSH
12256: LD_INT 101
12258: EQUAL
12259: IFFALSE 12387
// begin case p3 of 1 :
12261: LD_VAR 0 3
12265: PUSH
12266: LD_INT 1
12268: DOUBLE
12269: EQUAL
12270: IFTRUE 12274
12272: GO 12281
12274: POP
// hHackUnlimitedResources ; 2 :
12275: CALL 24534 0 0
12279: GO 12387
12281: LD_INT 2
12283: DOUBLE
12284: EQUAL
12285: IFTRUE 12289
12287: GO 12296
12289: POP
// hHackSetLevel10 ; 3 :
12290: CALL 24667 0 0
12294: GO 12387
12296: LD_INT 3
12298: DOUBLE
12299: EQUAL
12300: IFTRUE 12304
12302: GO 12311
12304: POP
// hHackSetLevel10YourUnits ; 4 :
12305: CALL 24752 0 0
12309: GO 12387
12311: LD_INT 4
12313: DOUBLE
12314: EQUAL
12315: IFTRUE 12319
12317: GO 12326
12319: POP
// hHackInvincible ; 5 :
12320: CALL 25200 0 0
12324: GO 12387
12326: LD_INT 5
12328: DOUBLE
12329: EQUAL
12330: IFTRUE 12334
12332: GO 12341
12334: POP
// hHackInvisible ; 6 :
12335: CALL 25311 0 0
12339: GO 12387
12341: LD_INT 6
12343: DOUBLE
12344: EQUAL
12345: IFTRUE 12349
12347: GO 12356
12349: POP
// hHackChangeYourSide ; 7 :
12350: CALL 25368 0 0
12354: GO 12387
12356: LD_INT 7
12358: DOUBLE
12359: EQUAL
12360: IFTRUE 12364
12362: GO 12371
12364: POP
// hHackChangeUnitSide ; 8 :
12365: CALL 25410 0 0
12369: GO 12387
12371: LD_INT 8
12373: DOUBLE
12374: EQUAL
12375: IFTRUE 12379
12377: GO 12386
12379: POP
// hHackFog ; end ;
12380: CALL 25511 0 0
12384: GO 12387
12386: POP
// end ; if p2 = game_save_mode then
12387: LD_VAR 0 2
12391: PUSH
12392: LD_INT 102
12394: EQUAL
12395: IFFALSE 12450
// begin if p3 = 1 then
12397: LD_VAR 0 3
12401: PUSH
12402: LD_INT 1
12404: EQUAL
12405: IFFALSE 12417
// globalGameSaveCounter := p4 ;
12407: LD_ADDR_EXP 46
12411: PUSH
12412: LD_VAR 0 4
12416: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12417: LD_VAR 0 3
12421: PUSH
12422: LD_INT 2
12424: EQUAL
12425: PUSH
12426: LD_EXP 46
12430: AND
12431: IFFALSE 12450
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12433: LD_STRING setGameSaveCounter(
12435: PUSH
12436: LD_EXP 46
12440: STR
12441: PUSH
12442: LD_STRING )
12444: STR
12445: PPUSH
12446: CALL_OW 559
// end ; end ;
12450: LD_VAR 0 7
12454: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12455: LD_INT 0
12457: PPUSH
// streamModeActive := false ;
12458: LD_ADDR_EXP 47
12462: PUSH
12463: LD_INT 0
12465: ST_TO_ADDR
// normalCounter := 36 ;
12466: LD_ADDR_EXP 48
12470: PUSH
12471: LD_INT 36
12473: ST_TO_ADDR
// hardcoreCounter := 18 ;
12474: LD_ADDR_EXP 49
12478: PUSH
12479: LD_INT 18
12481: ST_TO_ADDR
// sRocket := false ;
12482: LD_ADDR_EXP 52
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
// sSpeed := false ;
12490: LD_ADDR_EXP 51
12494: PUSH
12495: LD_INT 0
12497: ST_TO_ADDR
// sEngine := false ;
12498: LD_ADDR_EXP 53
12502: PUSH
12503: LD_INT 0
12505: ST_TO_ADDR
// sSpec := false ;
12506: LD_ADDR_EXP 50
12510: PUSH
12511: LD_INT 0
12513: ST_TO_ADDR
// sLevel := false ;
12514: LD_ADDR_EXP 54
12518: PUSH
12519: LD_INT 0
12521: ST_TO_ADDR
// sArmoury := false ;
12522: LD_ADDR_EXP 55
12526: PUSH
12527: LD_INT 0
12529: ST_TO_ADDR
// sRadar := false ;
12530: LD_ADDR_EXP 56
12534: PUSH
12535: LD_INT 0
12537: ST_TO_ADDR
// sBunker := false ;
12538: LD_ADDR_EXP 57
12542: PUSH
12543: LD_INT 0
12545: ST_TO_ADDR
// sHack := false ;
12546: LD_ADDR_EXP 58
12550: PUSH
12551: LD_INT 0
12553: ST_TO_ADDR
// sFire := false ;
12554: LD_ADDR_EXP 59
12558: PUSH
12559: LD_INT 0
12561: ST_TO_ADDR
// sRefresh := false ;
12562: LD_ADDR_EXP 60
12566: PUSH
12567: LD_INT 0
12569: ST_TO_ADDR
// sExp := false ;
12570: LD_ADDR_EXP 61
12574: PUSH
12575: LD_INT 0
12577: ST_TO_ADDR
// sDepot := false ;
12578: LD_ADDR_EXP 62
12582: PUSH
12583: LD_INT 0
12585: ST_TO_ADDR
// sFlag := false ;
12586: LD_ADDR_EXP 63
12590: PUSH
12591: LD_INT 0
12593: ST_TO_ADDR
// sKamikadze := false ;
12594: LD_ADDR_EXP 71
12598: PUSH
12599: LD_INT 0
12601: ST_TO_ADDR
// sTroll := false ;
12602: LD_ADDR_EXP 72
12606: PUSH
12607: LD_INT 0
12609: ST_TO_ADDR
// sSlow := false ;
12610: LD_ADDR_EXP 73
12614: PUSH
12615: LD_INT 0
12617: ST_TO_ADDR
// sLack := false ;
12618: LD_ADDR_EXP 74
12622: PUSH
12623: LD_INT 0
12625: ST_TO_ADDR
// sTank := false ;
12626: LD_ADDR_EXP 76
12630: PUSH
12631: LD_INT 0
12633: ST_TO_ADDR
// sRemote := false ;
12634: LD_ADDR_EXP 77
12638: PUSH
12639: LD_INT 0
12641: ST_TO_ADDR
// sPowell := false ;
12642: LD_ADDR_EXP 78
12646: PUSH
12647: LD_INT 0
12649: ST_TO_ADDR
// sTeleport := false ;
12650: LD_ADDR_EXP 81
12654: PUSH
12655: LD_INT 0
12657: ST_TO_ADDR
// sOilTower := false ;
12658: LD_ADDR_EXP 83
12662: PUSH
12663: LD_INT 0
12665: ST_TO_ADDR
// sShovel := false ;
12666: LD_ADDR_EXP 84
12670: PUSH
12671: LD_INT 0
12673: ST_TO_ADDR
// sSheik := false ;
12674: LD_ADDR_EXP 85
12678: PUSH
12679: LD_INT 0
12681: ST_TO_ADDR
// sEarthquake := false ;
12682: LD_ADDR_EXP 87
12686: PUSH
12687: LD_INT 0
12689: ST_TO_ADDR
// sAI := false ;
12690: LD_ADDR_EXP 88
12694: PUSH
12695: LD_INT 0
12697: ST_TO_ADDR
// sCargo := false ;
12698: LD_ADDR_EXP 91
12702: PUSH
12703: LD_INT 0
12705: ST_TO_ADDR
// sDLaser := false ;
12706: LD_ADDR_EXP 92
12710: PUSH
12711: LD_INT 0
12713: ST_TO_ADDR
// sExchange := false ;
12714: LD_ADDR_EXP 93
12718: PUSH
12719: LD_INT 0
12721: ST_TO_ADDR
// sFac := false ;
12722: LD_ADDR_EXP 94
12726: PUSH
12727: LD_INT 0
12729: ST_TO_ADDR
// sPower := false ;
12730: LD_ADDR_EXP 95
12734: PUSH
12735: LD_INT 0
12737: ST_TO_ADDR
// sRandom := false ;
12738: LD_ADDR_EXP 96
12742: PUSH
12743: LD_INT 0
12745: ST_TO_ADDR
// sShield := false ;
12746: LD_ADDR_EXP 97
12750: PUSH
12751: LD_INT 0
12753: ST_TO_ADDR
// sTime := false ;
12754: LD_ADDR_EXP 98
12758: PUSH
12759: LD_INT 0
12761: ST_TO_ADDR
// sTools := false ;
12762: LD_ADDR_EXP 99
12766: PUSH
12767: LD_INT 0
12769: ST_TO_ADDR
// sSold := false ;
12770: LD_ADDR_EXP 64
12774: PUSH
12775: LD_INT 0
12777: ST_TO_ADDR
// sDiff := false ;
12778: LD_ADDR_EXP 65
12782: PUSH
12783: LD_INT 0
12785: ST_TO_ADDR
// sFog := false ;
12786: LD_ADDR_EXP 68
12790: PUSH
12791: LD_INT 0
12793: ST_TO_ADDR
// sReset := false ;
12794: LD_ADDR_EXP 69
12798: PUSH
12799: LD_INT 0
12801: ST_TO_ADDR
// sSun := false ;
12802: LD_ADDR_EXP 70
12806: PUSH
12807: LD_INT 0
12809: ST_TO_ADDR
// sTiger := false ;
12810: LD_ADDR_EXP 66
12814: PUSH
12815: LD_INT 0
12817: ST_TO_ADDR
// sBomb := false ;
12818: LD_ADDR_EXP 67
12822: PUSH
12823: LD_INT 0
12825: ST_TO_ADDR
// sWound := false ;
12826: LD_ADDR_EXP 75
12830: PUSH
12831: LD_INT 0
12833: ST_TO_ADDR
// sBetray := false ;
12834: LD_ADDR_EXP 79
12838: PUSH
12839: LD_INT 0
12841: ST_TO_ADDR
// sContamin := false ;
12842: LD_ADDR_EXP 80
12846: PUSH
12847: LD_INT 0
12849: ST_TO_ADDR
// sOil := false ;
12850: LD_ADDR_EXP 82
12854: PUSH
12855: LD_INT 0
12857: ST_TO_ADDR
// sStu := false ;
12858: LD_ADDR_EXP 86
12862: PUSH
12863: LD_INT 0
12865: ST_TO_ADDR
// sBazooka := false ;
12866: LD_ADDR_EXP 89
12870: PUSH
12871: LD_INT 0
12873: ST_TO_ADDR
// sMortar := false ;
12874: LD_ADDR_EXP 90
12878: PUSH
12879: LD_INT 0
12881: ST_TO_ADDR
// sRanger := false ;
12882: LD_ADDR_EXP 100
12886: PUSH
12887: LD_INT 0
12889: ST_TO_ADDR
// sComputer := false ;
12890: LD_ADDR_EXP 101
12894: PUSH
12895: LD_INT 0
12897: ST_TO_ADDR
// s30 := false ;
12898: LD_ADDR_EXP 102
12902: PUSH
12903: LD_INT 0
12905: ST_TO_ADDR
// s60 := false ;
12906: LD_ADDR_EXP 103
12910: PUSH
12911: LD_INT 0
12913: ST_TO_ADDR
// end ;
12914: LD_VAR 0 1
12918: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12919: LD_INT 0
12921: PPUSH
12922: PPUSH
12923: PPUSH
12924: PPUSH
12925: PPUSH
12926: PPUSH
12927: PPUSH
// result := [ ] ;
12928: LD_ADDR_VAR 0 2
12932: PUSH
12933: EMPTY
12934: ST_TO_ADDR
// if campaign_id = 1 then
12935: LD_OWVAR 69
12939: PUSH
12940: LD_INT 1
12942: EQUAL
12943: IFFALSE 16109
// begin case mission_number of 1 :
12945: LD_OWVAR 70
12949: PUSH
12950: LD_INT 1
12952: DOUBLE
12953: EQUAL
12954: IFTRUE 12958
12956: GO 13034
12958: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12959: LD_ADDR_VAR 0 2
12963: PUSH
12964: LD_INT 2
12966: PUSH
12967: LD_INT 4
12969: PUSH
12970: LD_INT 11
12972: PUSH
12973: LD_INT 12
12975: PUSH
12976: LD_INT 15
12978: PUSH
12979: LD_INT 16
12981: PUSH
12982: LD_INT 22
12984: PUSH
12985: LD_INT 23
12987: PUSH
12988: LD_INT 26
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 101
13004: PUSH
13005: LD_INT 102
13007: PUSH
13008: LD_INT 106
13010: PUSH
13011: LD_INT 116
13013: PUSH
13014: LD_INT 117
13016: PUSH
13017: LD_INT 118
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: ST_TO_ADDR
13032: GO 16107
13034: LD_INT 2
13036: DOUBLE
13037: EQUAL
13038: IFTRUE 13042
13040: GO 13126
13042: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13043: LD_ADDR_VAR 0 2
13047: PUSH
13048: LD_INT 2
13050: PUSH
13051: LD_INT 4
13053: PUSH
13054: LD_INT 11
13056: PUSH
13057: LD_INT 12
13059: PUSH
13060: LD_INT 15
13062: PUSH
13063: LD_INT 16
13065: PUSH
13066: LD_INT 22
13068: PUSH
13069: LD_INT 23
13071: PUSH
13072: LD_INT 26
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 101
13088: PUSH
13089: LD_INT 102
13091: PUSH
13092: LD_INT 105
13094: PUSH
13095: LD_INT 106
13097: PUSH
13098: LD_INT 108
13100: PUSH
13101: LD_INT 116
13103: PUSH
13104: LD_INT 117
13106: PUSH
13107: LD_INT 118
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: ST_TO_ADDR
13124: GO 16107
13126: LD_INT 3
13128: DOUBLE
13129: EQUAL
13130: IFTRUE 13134
13132: GO 13222
13134: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13135: LD_ADDR_VAR 0 2
13139: PUSH
13140: LD_INT 2
13142: PUSH
13143: LD_INT 4
13145: PUSH
13146: LD_INT 5
13148: PUSH
13149: LD_INT 11
13151: PUSH
13152: LD_INT 12
13154: PUSH
13155: LD_INT 15
13157: PUSH
13158: LD_INT 16
13160: PUSH
13161: LD_INT 22
13163: PUSH
13164: LD_INT 26
13166: PUSH
13167: LD_INT 36
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: PUSH
13182: LD_INT 101
13184: PUSH
13185: LD_INT 102
13187: PUSH
13188: LD_INT 105
13190: PUSH
13191: LD_INT 106
13193: PUSH
13194: LD_INT 108
13196: PUSH
13197: LD_INT 116
13199: PUSH
13200: LD_INT 117
13202: PUSH
13203: LD_INT 118
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: ST_TO_ADDR
13220: GO 16107
13222: LD_INT 4
13224: DOUBLE
13225: EQUAL
13226: IFTRUE 13230
13228: GO 13326
13230: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13231: LD_ADDR_VAR 0 2
13235: PUSH
13236: LD_INT 2
13238: PUSH
13239: LD_INT 4
13241: PUSH
13242: LD_INT 5
13244: PUSH
13245: LD_INT 8
13247: PUSH
13248: LD_INT 11
13250: PUSH
13251: LD_INT 12
13253: PUSH
13254: LD_INT 15
13256: PUSH
13257: LD_INT 16
13259: PUSH
13260: LD_INT 22
13262: PUSH
13263: LD_INT 23
13265: PUSH
13266: LD_INT 26
13268: PUSH
13269: LD_INT 36
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 101
13288: PUSH
13289: LD_INT 102
13291: PUSH
13292: LD_INT 105
13294: PUSH
13295: LD_INT 106
13297: PUSH
13298: LD_INT 108
13300: PUSH
13301: LD_INT 116
13303: PUSH
13304: LD_INT 117
13306: PUSH
13307: LD_INT 118
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: ST_TO_ADDR
13324: GO 16107
13326: LD_INT 5
13328: DOUBLE
13329: EQUAL
13330: IFTRUE 13334
13332: GO 13446
13334: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13335: LD_ADDR_VAR 0 2
13339: PUSH
13340: LD_INT 2
13342: PUSH
13343: LD_INT 4
13345: PUSH
13346: LD_INT 5
13348: PUSH
13349: LD_INT 6
13351: PUSH
13352: LD_INT 8
13354: PUSH
13355: LD_INT 11
13357: PUSH
13358: LD_INT 12
13360: PUSH
13361: LD_INT 15
13363: PUSH
13364: LD_INT 16
13366: PUSH
13367: LD_INT 22
13369: PUSH
13370: LD_INT 23
13372: PUSH
13373: LD_INT 25
13375: PUSH
13376: LD_INT 26
13378: PUSH
13379: LD_INT 36
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 101
13400: PUSH
13401: LD_INT 102
13403: PUSH
13404: LD_INT 105
13406: PUSH
13407: LD_INT 106
13409: PUSH
13410: LD_INT 108
13412: PUSH
13413: LD_INT 109
13415: PUSH
13416: LD_INT 112
13418: PUSH
13419: LD_INT 116
13421: PUSH
13422: LD_INT 117
13424: PUSH
13425: LD_INT 118
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: ST_TO_ADDR
13444: GO 16107
13446: LD_INT 6
13448: DOUBLE
13449: EQUAL
13450: IFTRUE 13454
13452: GO 13586
13454: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13455: LD_ADDR_VAR 0 2
13459: PUSH
13460: LD_INT 2
13462: PUSH
13463: LD_INT 4
13465: PUSH
13466: LD_INT 5
13468: PUSH
13469: LD_INT 6
13471: PUSH
13472: LD_INT 8
13474: PUSH
13475: LD_INT 11
13477: PUSH
13478: LD_INT 12
13480: PUSH
13481: LD_INT 15
13483: PUSH
13484: LD_INT 16
13486: PUSH
13487: LD_INT 20
13489: PUSH
13490: LD_INT 21
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_INT 23
13498: PUSH
13499: LD_INT 25
13501: PUSH
13502: LD_INT 26
13504: PUSH
13505: LD_INT 30
13507: PUSH
13508: LD_INT 31
13510: PUSH
13511: LD_INT 32
13513: PUSH
13514: LD_INT 36
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 101
13540: PUSH
13541: LD_INT 102
13543: PUSH
13544: LD_INT 105
13546: PUSH
13547: LD_INT 106
13549: PUSH
13550: LD_INT 108
13552: PUSH
13553: LD_INT 109
13555: PUSH
13556: LD_INT 112
13558: PUSH
13559: LD_INT 116
13561: PUSH
13562: LD_INT 117
13564: PUSH
13565: LD_INT 118
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: ST_TO_ADDR
13584: GO 16107
13586: LD_INT 7
13588: DOUBLE
13589: EQUAL
13590: IFTRUE 13594
13592: GO 13706
13594: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13595: LD_ADDR_VAR 0 2
13599: PUSH
13600: LD_INT 2
13602: PUSH
13603: LD_INT 4
13605: PUSH
13606: LD_INT 5
13608: PUSH
13609: LD_INT 7
13611: PUSH
13612: LD_INT 11
13614: PUSH
13615: LD_INT 12
13617: PUSH
13618: LD_INT 15
13620: PUSH
13621: LD_INT 16
13623: PUSH
13624: LD_INT 20
13626: PUSH
13627: LD_INT 21
13629: PUSH
13630: LD_INT 22
13632: PUSH
13633: LD_INT 23
13635: PUSH
13636: LD_INT 25
13638: PUSH
13639: LD_INT 26
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 101
13660: PUSH
13661: LD_INT 102
13663: PUSH
13664: LD_INT 103
13666: PUSH
13667: LD_INT 105
13669: PUSH
13670: LD_INT 106
13672: PUSH
13673: LD_INT 108
13675: PUSH
13676: LD_INT 112
13678: PUSH
13679: LD_INT 116
13681: PUSH
13682: LD_INT 117
13684: PUSH
13685: LD_INT 118
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: ST_TO_ADDR
13704: GO 16107
13706: LD_INT 8
13708: DOUBLE
13709: EQUAL
13710: IFTRUE 13714
13712: GO 13854
13714: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13715: LD_ADDR_VAR 0 2
13719: PUSH
13720: LD_INT 2
13722: PUSH
13723: LD_INT 4
13725: PUSH
13726: LD_INT 5
13728: PUSH
13729: LD_INT 6
13731: PUSH
13732: LD_INT 7
13734: PUSH
13735: LD_INT 8
13737: PUSH
13738: LD_INT 11
13740: PUSH
13741: LD_INT 12
13743: PUSH
13744: LD_INT 15
13746: PUSH
13747: LD_INT 16
13749: PUSH
13750: LD_INT 20
13752: PUSH
13753: LD_INT 21
13755: PUSH
13756: LD_INT 22
13758: PUSH
13759: LD_INT 23
13761: PUSH
13762: LD_INT 25
13764: PUSH
13765: LD_INT 26
13767: PUSH
13768: LD_INT 30
13770: PUSH
13771: LD_INT 31
13773: PUSH
13774: LD_INT 32
13776: PUSH
13777: LD_INT 36
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 101
13804: PUSH
13805: LD_INT 102
13807: PUSH
13808: LD_INT 103
13810: PUSH
13811: LD_INT 105
13813: PUSH
13814: LD_INT 106
13816: PUSH
13817: LD_INT 108
13819: PUSH
13820: LD_INT 109
13822: PUSH
13823: LD_INT 112
13825: PUSH
13826: LD_INT 116
13828: PUSH
13829: LD_INT 117
13831: PUSH
13832: LD_INT 118
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: ST_TO_ADDR
13852: GO 16107
13854: LD_INT 9
13856: DOUBLE
13857: EQUAL
13858: IFTRUE 13862
13860: GO 14010
13862: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13863: LD_ADDR_VAR 0 2
13867: PUSH
13868: LD_INT 2
13870: PUSH
13871: LD_INT 4
13873: PUSH
13874: LD_INT 5
13876: PUSH
13877: LD_INT 6
13879: PUSH
13880: LD_INT 7
13882: PUSH
13883: LD_INT 8
13885: PUSH
13886: LD_INT 11
13888: PUSH
13889: LD_INT 12
13891: PUSH
13892: LD_INT 15
13894: PUSH
13895: LD_INT 16
13897: PUSH
13898: LD_INT 20
13900: PUSH
13901: LD_INT 21
13903: PUSH
13904: LD_INT 22
13906: PUSH
13907: LD_INT 23
13909: PUSH
13910: LD_INT 25
13912: PUSH
13913: LD_INT 26
13915: PUSH
13916: LD_INT 28
13918: PUSH
13919: LD_INT 30
13921: PUSH
13922: LD_INT 31
13924: PUSH
13925: LD_INT 32
13927: PUSH
13928: LD_INT 36
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 101
13956: PUSH
13957: LD_INT 102
13959: PUSH
13960: LD_INT 103
13962: PUSH
13963: LD_INT 105
13965: PUSH
13966: LD_INT 106
13968: PUSH
13969: LD_INT 108
13971: PUSH
13972: LD_INT 109
13974: PUSH
13975: LD_INT 112
13977: PUSH
13978: LD_INT 114
13980: PUSH
13981: LD_INT 116
13983: PUSH
13984: LD_INT 117
13986: PUSH
13987: LD_INT 118
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: ST_TO_ADDR
14008: GO 16107
14010: LD_INT 10
14012: DOUBLE
14013: EQUAL
14014: IFTRUE 14018
14016: GO 14214
14018: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14019: LD_ADDR_VAR 0 2
14023: PUSH
14024: LD_INT 2
14026: PUSH
14027: LD_INT 4
14029: PUSH
14030: LD_INT 5
14032: PUSH
14033: LD_INT 6
14035: PUSH
14036: LD_INT 7
14038: PUSH
14039: LD_INT 8
14041: PUSH
14042: LD_INT 9
14044: PUSH
14045: LD_INT 10
14047: PUSH
14048: LD_INT 11
14050: PUSH
14051: LD_INT 12
14053: PUSH
14054: LD_INT 13
14056: PUSH
14057: LD_INT 14
14059: PUSH
14060: LD_INT 15
14062: PUSH
14063: LD_INT 16
14065: PUSH
14066: LD_INT 17
14068: PUSH
14069: LD_INT 18
14071: PUSH
14072: LD_INT 19
14074: PUSH
14075: LD_INT 20
14077: PUSH
14078: LD_INT 21
14080: PUSH
14081: LD_INT 22
14083: PUSH
14084: LD_INT 23
14086: PUSH
14087: LD_INT 24
14089: PUSH
14090: LD_INT 25
14092: PUSH
14093: LD_INT 26
14095: PUSH
14096: LD_INT 28
14098: PUSH
14099: LD_INT 30
14101: PUSH
14102: LD_INT 31
14104: PUSH
14105: LD_INT 32
14107: PUSH
14108: LD_INT 36
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: PUSH
14142: LD_INT 101
14144: PUSH
14145: LD_INT 102
14147: PUSH
14148: LD_INT 103
14150: PUSH
14151: LD_INT 104
14153: PUSH
14154: LD_INT 105
14156: PUSH
14157: LD_INT 106
14159: PUSH
14160: LD_INT 107
14162: PUSH
14163: LD_INT 108
14165: PUSH
14166: LD_INT 109
14168: PUSH
14169: LD_INT 110
14171: PUSH
14172: LD_INT 111
14174: PUSH
14175: LD_INT 112
14177: PUSH
14178: LD_INT 114
14180: PUSH
14181: LD_INT 116
14183: PUSH
14184: LD_INT 117
14186: PUSH
14187: LD_INT 118
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: ST_TO_ADDR
14212: GO 16107
14214: LD_INT 11
14216: DOUBLE
14217: EQUAL
14218: IFTRUE 14222
14220: GO 14426
14222: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14223: LD_ADDR_VAR 0 2
14227: PUSH
14228: LD_INT 2
14230: PUSH
14231: LD_INT 3
14233: PUSH
14234: LD_INT 4
14236: PUSH
14237: LD_INT 5
14239: PUSH
14240: LD_INT 6
14242: PUSH
14243: LD_INT 7
14245: PUSH
14246: LD_INT 8
14248: PUSH
14249: LD_INT 9
14251: PUSH
14252: LD_INT 10
14254: PUSH
14255: LD_INT 11
14257: PUSH
14258: LD_INT 12
14260: PUSH
14261: LD_INT 13
14263: PUSH
14264: LD_INT 14
14266: PUSH
14267: LD_INT 15
14269: PUSH
14270: LD_INT 16
14272: PUSH
14273: LD_INT 17
14275: PUSH
14276: LD_INT 18
14278: PUSH
14279: LD_INT 19
14281: PUSH
14282: LD_INT 20
14284: PUSH
14285: LD_INT 21
14287: PUSH
14288: LD_INT 22
14290: PUSH
14291: LD_INT 23
14293: PUSH
14294: LD_INT 24
14296: PUSH
14297: LD_INT 25
14299: PUSH
14300: LD_INT 26
14302: PUSH
14303: LD_INT 28
14305: PUSH
14306: LD_INT 30
14308: PUSH
14309: LD_INT 31
14311: PUSH
14312: LD_INT 32
14314: PUSH
14315: LD_INT 34
14317: PUSH
14318: LD_INT 36
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 101
14356: PUSH
14357: LD_INT 102
14359: PUSH
14360: LD_INT 103
14362: PUSH
14363: LD_INT 104
14365: PUSH
14366: LD_INT 105
14368: PUSH
14369: LD_INT 106
14371: PUSH
14372: LD_INT 107
14374: PUSH
14375: LD_INT 108
14377: PUSH
14378: LD_INT 109
14380: PUSH
14381: LD_INT 110
14383: PUSH
14384: LD_INT 111
14386: PUSH
14387: LD_INT 112
14389: PUSH
14390: LD_INT 114
14392: PUSH
14393: LD_INT 116
14395: PUSH
14396: LD_INT 117
14398: PUSH
14399: LD_INT 118
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: ST_TO_ADDR
14424: GO 16107
14426: LD_INT 12
14428: DOUBLE
14429: EQUAL
14430: IFTRUE 14434
14432: GO 14654
14434: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14435: LD_ADDR_VAR 0 2
14439: PUSH
14440: LD_INT 1
14442: PUSH
14443: LD_INT 2
14445: PUSH
14446: LD_INT 3
14448: PUSH
14449: LD_INT 4
14451: PUSH
14452: LD_INT 5
14454: PUSH
14455: LD_INT 6
14457: PUSH
14458: LD_INT 7
14460: PUSH
14461: LD_INT 8
14463: PUSH
14464: LD_INT 9
14466: PUSH
14467: LD_INT 10
14469: PUSH
14470: LD_INT 11
14472: PUSH
14473: LD_INT 12
14475: PUSH
14476: LD_INT 13
14478: PUSH
14479: LD_INT 14
14481: PUSH
14482: LD_INT 15
14484: PUSH
14485: LD_INT 16
14487: PUSH
14488: LD_INT 17
14490: PUSH
14491: LD_INT 18
14493: PUSH
14494: LD_INT 19
14496: PUSH
14497: LD_INT 20
14499: PUSH
14500: LD_INT 21
14502: PUSH
14503: LD_INT 22
14505: PUSH
14506: LD_INT 23
14508: PUSH
14509: LD_INT 24
14511: PUSH
14512: LD_INT 25
14514: PUSH
14515: LD_INT 26
14517: PUSH
14518: LD_INT 27
14520: PUSH
14521: LD_INT 28
14523: PUSH
14524: LD_INT 30
14526: PUSH
14527: LD_INT 31
14529: PUSH
14530: LD_INT 32
14532: PUSH
14533: LD_INT 33
14535: PUSH
14536: LD_INT 34
14538: PUSH
14539: LD_INT 36
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 101
14580: PUSH
14581: LD_INT 102
14583: PUSH
14584: LD_INT 103
14586: PUSH
14587: LD_INT 104
14589: PUSH
14590: LD_INT 105
14592: PUSH
14593: LD_INT 106
14595: PUSH
14596: LD_INT 107
14598: PUSH
14599: LD_INT 108
14601: PUSH
14602: LD_INT 109
14604: PUSH
14605: LD_INT 110
14607: PUSH
14608: LD_INT 111
14610: PUSH
14611: LD_INT 112
14613: PUSH
14614: LD_INT 113
14616: PUSH
14617: LD_INT 114
14619: PUSH
14620: LD_INT 116
14622: PUSH
14623: LD_INT 117
14625: PUSH
14626: LD_INT 118
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: ST_TO_ADDR
14652: GO 16107
14654: LD_INT 13
14656: DOUBLE
14657: EQUAL
14658: IFTRUE 14662
14660: GO 14870
14662: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14663: LD_ADDR_VAR 0 2
14667: PUSH
14668: LD_INT 1
14670: PUSH
14671: LD_INT 2
14673: PUSH
14674: LD_INT 3
14676: PUSH
14677: LD_INT 4
14679: PUSH
14680: LD_INT 5
14682: PUSH
14683: LD_INT 8
14685: PUSH
14686: LD_INT 9
14688: PUSH
14689: LD_INT 10
14691: PUSH
14692: LD_INT 11
14694: PUSH
14695: LD_INT 12
14697: PUSH
14698: LD_INT 14
14700: PUSH
14701: LD_INT 15
14703: PUSH
14704: LD_INT 16
14706: PUSH
14707: LD_INT 17
14709: PUSH
14710: LD_INT 18
14712: PUSH
14713: LD_INT 19
14715: PUSH
14716: LD_INT 20
14718: PUSH
14719: LD_INT 21
14721: PUSH
14722: LD_INT 22
14724: PUSH
14725: LD_INT 23
14727: PUSH
14728: LD_INT 24
14730: PUSH
14731: LD_INT 25
14733: PUSH
14734: LD_INT 26
14736: PUSH
14737: LD_INT 27
14739: PUSH
14740: LD_INT 28
14742: PUSH
14743: LD_INT 30
14745: PUSH
14746: LD_INT 31
14748: PUSH
14749: LD_INT 32
14751: PUSH
14752: LD_INT 33
14754: PUSH
14755: LD_INT 34
14757: PUSH
14758: LD_INT 36
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: PUSH
14794: LD_INT 101
14796: PUSH
14797: LD_INT 102
14799: PUSH
14800: LD_INT 103
14802: PUSH
14803: LD_INT 104
14805: PUSH
14806: LD_INT 105
14808: PUSH
14809: LD_INT 106
14811: PUSH
14812: LD_INT 107
14814: PUSH
14815: LD_INT 108
14817: PUSH
14818: LD_INT 109
14820: PUSH
14821: LD_INT 110
14823: PUSH
14824: LD_INT 111
14826: PUSH
14827: LD_INT 112
14829: PUSH
14830: LD_INT 113
14832: PUSH
14833: LD_INT 114
14835: PUSH
14836: LD_INT 116
14838: PUSH
14839: LD_INT 117
14841: PUSH
14842: LD_INT 118
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: ST_TO_ADDR
14868: GO 16107
14870: LD_INT 14
14872: DOUBLE
14873: EQUAL
14874: IFTRUE 14878
14876: GO 15102
14878: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14879: LD_ADDR_VAR 0 2
14883: PUSH
14884: LD_INT 1
14886: PUSH
14887: LD_INT 2
14889: PUSH
14890: LD_INT 3
14892: PUSH
14893: LD_INT 4
14895: PUSH
14896: LD_INT 5
14898: PUSH
14899: LD_INT 6
14901: PUSH
14902: LD_INT 7
14904: PUSH
14905: LD_INT 8
14907: PUSH
14908: LD_INT 9
14910: PUSH
14911: LD_INT 10
14913: PUSH
14914: LD_INT 11
14916: PUSH
14917: LD_INT 12
14919: PUSH
14920: LD_INT 13
14922: PUSH
14923: LD_INT 14
14925: PUSH
14926: LD_INT 15
14928: PUSH
14929: LD_INT 16
14931: PUSH
14932: LD_INT 17
14934: PUSH
14935: LD_INT 18
14937: PUSH
14938: LD_INT 19
14940: PUSH
14941: LD_INT 20
14943: PUSH
14944: LD_INT 21
14946: PUSH
14947: LD_INT 22
14949: PUSH
14950: LD_INT 23
14952: PUSH
14953: LD_INT 24
14955: PUSH
14956: LD_INT 25
14958: PUSH
14959: LD_INT 26
14961: PUSH
14962: LD_INT 27
14964: PUSH
14965: LD_INT 28
14967: PUSH
14968: LD_INT 29
14970: PUSH
14971: LD_INT 30
14973: PUSH
14974: LD_INT 31
14976: PUSH
14977: LD_INT 32
14979: PUSH
14980: LD_INT 33
14982: PUSH
14983: LD_INT 34
14985: PUSH
14986: LD_INT 36
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 101
15028: PUSH
15029: LD_INT 102
15031: PUSH
15032: LD_INT 103
15034: PUSH
15035: LD_INT 104
15037: PUSH
15038: LD_INT 105
15040: PUSH
15041: LD_INT 106
15043: PUSH
15044: LD_INT 107
15046: PUSH
15047: LD_INT 108
15049: PUSH
15050: LD_INT 109
15052: PUSH
15053: LD_INT 110
15055: PUSH
15056: LD_INT 111
15058: PUSH
15059: LD_INT 112
15061: PUSH
15062: LD_INT 113
15064: PUSH
15065: LD_INT 114
15067: PUSH
15068: LD_INT 116
15070: PUSH
15071: LD_INT 117
15073: PUSH
15074: LD_INT 118
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: ST_TO_ADDR
15100: GO 16107
15102: LD_INT 15
15104: DOUBLE
15105: EQUAL
15106: IFTRUE 15110
15108: GO 15334
15110: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15111: LD_ADDR_VAR 0 2
15115: PUSH
15116: LD_INT 1
15118: PUSH
15119: LD_INT 2
15121: PUSH
15122: LD_INT 3
15124: PUSH
15125: LD_INT 4
15127: PUSH
15128: LD_INT 5
15130: PUSH
15131: LD_INT 6
15133: PUSH
15134: LD_INT 7
15136: PUSH
15137: LD_INT 8
15139: PUSH
15140: LD_INT 9
15142: PUSH
15143: LD_INT 10
15145: PUSH
15146: LD_INT 11
15148: PUSH
15149: LD_INT 12
15151: PUSH
15152: LD_INT 13
15154: PUSH
15155: LD_INT 14
15157: PUSH
15158: LD_INT 15
15160: PUSH
15161: LD_INT 16
15163: PUSH
15164: LD_INT 17
15166: PUSH
15167: LD_INT 18
15169: PUSH
15170: LD_INT 19
15172: PUSH
15173: LD_INT 20
15175: PUSH
15176: LD_INT 21
15178: PUSH
15179: LD_INT 22
15181: PUSH
15182: LD_INT 23
15184: PUSH
15185: LD_INT 24
15187: PUSH
15188: LD_INT 25
15190: PUSH
15191: LD_INT 26
15193: PUSH
15194: LD_INT 27
15196: PUSH
15197: LD_INT 28
15199: PUSH
15200: LD_INT 29
15202: PUSH
15203: LD_INT 30
15205: PUSH
15206: LD_INT 31
15208: PUSH
15209: LD_INT 32
15211: PUSH
15212: LD_INT 33
15214: PUSH
15215: LD_INT 34
15217: PUSH
15218: LD_INT 36
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: PUSH
15258: LD_INT 101
15260: PUSH
15261: LD_INT 102
15263: PUSH
15264: LD_INT 103
15266: PUSH
15267: LD_INT 104
15269: PUSH
15270: LD_INT 105
15272: PUSH
15273: LD_INT 106
15275: PUSH
15276: LD_INT 107
15278: PUSH
15279: LD_INT 108
15281: PUSH
15282: LD_INT 109
15284: PUSH
15285: LD_INT 110
15287: PUSH
15288: LD_INT 111
15290: PUSH
15291: LD_INT 112
15293: PUSH
15294: LD_INT 113
15296: PUSH
15297: LD_INT 114
15299: PUSH
15300: LD_INT 116
15302: PUSH
15303: LD_INT 117
15305: PUSH
15306: LD_INT 118
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: ST_TO_ADDR
15332: GO 16107
15334: LD_INT 16
15336: DOUBLE
15337: EQUAL
15338: IFTRUE 15342
15340: GO 15478
15342: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15343: LD_ADDR_VAR 0 2
15347: PUSH
15348: LD_INT 2
15350: PUSH
15351: LD_INT 4
15353: PUSH
15354: LD_INT 5
15356: PUSH
15357: LD_INT 7
15359: PUSH
15360: LD_INT 11
15362: PUSH
15363: LD_INT 12
15365: PUSH
15366: LD_INT 15
15368: PUSH
15369: LD_INT 16
15371: PUSH
15372: LD_INT 20
15374: PUSH
15375: LD_INT 21
15377: PUSH
15378: LD_INT 22
15380: PUSH
15381: LD_INT 23
15383: PUSH
15384: LD_INT 25
15386: PUSH
15387: LD_INT 26
15389: PUSH
15390: LD_INT 30
15392: PUSH
15393: LD_INT 31
15395: PUSH
15396: LD_INT 32
15398: PUSH
15399: LD_INT 33
15401: PUSH
15402: LD_INT 34
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 101
15428: PUSH
15429: LD_INT 102
15431: PUSH
15432: LD_INT 103
15434: PUSH
15435: LD_INT 106
15437: PUSH
15438: LD_INT 108
15440: PUSH
15441: LD_INT 112
15443: PUSH
15444: LD_INT 113
15446: PUSH
15447: LD_INT 114
15449: PUSH
15450: LD_INT 116
15452: PUSH
15453: LD_INT 117
15455: PUSH
15456: LD_INT 118
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: ST_TO_ADDR
15476: GO 16107
15478: LD_INT 17
15480: DOUBLE
15481: EQUAL
15482: IFTRUE 15486
15484: GO 15710
15486: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15487: LD_ADDR_VAR 0 2
15491: PUSH
15492: LD_INT 1
15494: PUSH
15495: LD_INT 2
15497: PUSH
15498: LD_INT 3
15500: PUSH
15501: LD_INT 4
15503: PUSH
15504: LD_INT 5
15506: PUSH
15507: LD_INT 6
15509: PUSH
15510: LD_INT 7
15512: PUSH
15513: LD_INT 8
15515: PUSH
15516: LD_INT 9
15518: PUSH
15519: LD_INT 10
15521: PUSH
15522: LD_INT 11
15524: PUSH
15525: LD_INT 12
15527: PUSH
15528: LD_INT 13
15530: PUSH
15531: LD_INT 14
15533: PUSH
15534: LD_INT 15
15536: PUSH
15537: LD_INT 16
15539: PUSH
15540: LD_INT 17
15542: PUSH
15543: LD_INT 18
15545: PUSH
15546: LD_INT 19
15548: PUSH
15549: LD_INT 20
15551: PUSH
15552: LD_INT 21
15554: PUSH
15555: LD_INT 22
15557: PUSH
15558: LD_INT 23
15560: PUSH
15561: LD_INT 24
15563: PUSH
15564: LD_INT 25
15566: PUSH
15567: LD_INT 26
15569: PUSH
15570: LD_INT 27
15572: PUSH
15573: LD_INT 28
15575: PUSH
15576: LD_INT 29
15578: PUSH
15579: LD_INT 30
15581: PUSH
15582: LD_INT 31
15584: PUSH
15585: LD_INT 32
15587: PUSH
15588: LD_INT 33
15590: PUSH
15591: LD_INT 34
15593: PUSH
15594: LD_INT 36
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: PUSH
15634: LD_INT 101
15636: PUSH
15637: LD_INT 102
15639: PUSH
15640: LD_INT 103
15642: PUSH
15643: LD_INT 104
15645: PUSH
15646: LD_INT 105
15648: PUSH
15649: LD_INT 106
15651: PUSH
15652: LD_INT 107
15654: PUSH
15655: LD_INT 108
15657: PUSH
15658: LD_INT 109
15660: PUSH
15661: LD_INT 110
15663: PUSH
15664: LD_INT 111
15666: PUSH
15667: LD_INT 112
15669: PUSH
15670: LD_INT 113
15672: PUSH
15673: LD_INT 114
15675: PUSH
15676: LD_INT 116
15678: PUSH
15679: LD_INT 117
15681: PUSH
15682: LD_INT 118
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: ST_TO_ADDR
15708: GO 16107
15710: LD_INT 18
15712: DOUBLE
15713: EQUAL
15714: IFTRUE 15718
15716: GO 15866
15718: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15719: LD_ADDR_VAR 0 2
15723: PUSH
15724: LD_INT 2
15726: PUSH
15727: LD_INT 4
15729: PUSH
15730: LD_INT 5
15732: PUSH
15733: LD_INT 7
15735: PUSH
15736: LD_INT 11
15738: PUSH
15739: LD_INT 12
15741: PUSH
15742: LD_INT 15
15744: PUSH
15745: LD_INT 16
15747: PUSH
15748: LD_INT 20
15750: PUSH
15751: LD_INT 21
15753: PUSH
15754: LD_INT 22
15756: PUSH
15757: LD_INT 23
15759: PUSH
15760: LD_INT 25
15762: PUSH
15763: LD_INT 26
15765: PUSH
15766: LD_INT 30
15768: PUSH
15769: LD_INT 31
15771: PUSH
15772: LD_INT 32
15774: PUSH
15775: LD_INT 33
15777: PUSH
15778: LD_INT 34
15780: PUSH
15781: LD_INT 35
15783: PUSH
15784: LD_INT 36
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 101
15812: PUSH
15813: LD_INT 102
15815: PUSH
15816: LD_INT 103
15818: PUSH
15819: LD_INT 106
15821: PUSH
15822: LD_INT 108
15824: PUSH
15825: LD_INT 112
15827: PUSH
15828: LD_INT 113
15830: PUSH
15831: LD_INT 114
15833: PUSH
15834: LD_INT 115
15836: PUSH
15837: LD_INT 116
15839: PUSH
15840: LD_INT 117
15842: PUSH
15843: LD_INT 118
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: ST_TO_ADDR
15864: GO 16107
15866: LD_INT 19
15868: DOUBLE
15869: EQUAL
15870: IFTRUE 15874
15872: GO 16106
15874: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15875: LD_ADDR_VAR 0 2
15879: PUSH
15880: LD_INT 1
15882: PUSH
15883: LD_INT 2
15885: PUSH
15886: LD_INT 3
15888: PUSH
15889: LD_INT 4
15891: PUSH
15892: LD_INT 5
15894: PUSH
15895: LD_INT 6
15897: PUSH
15898: LD_INT 7
15900: PUSH
15901: LD_INT 8
15903: PUSH
15904: LD_INT 9
15906: PUSH
15907: LD_INT 10
15909: PUSH
15910: LD_INT 11
15912: PUSH
15913: LD_INT 12
15915: PUSH
15916: LD_INT 13
15918: PUSH
15919: LD_INT 14
15921: PUSH
15922: LD_INT 15
15924: PUSH
15925: LD_INT 16
15927: PUSH
15928: LD_INT 17
15930: PUSH
15931: LD_INT 18
15933: PUSH
15934: LD_INT 19
15936: PUSH
15937: LD_INT 20
15939: PUSH
15940: LD_INT 21
15942: PUSH
15943: LD_INT 22
15945: PUSH
15946: LD_INT 23
15948: PUSH
15949: LD_INT 24
15951: PUSH
15952: LD_INT 25
15954: PUSH
15955: LD_INT 26
15957: PUSH
15958: LD_INT 27
15960: PUSH
15961: LD_INT 28
15963: PUSH
15964: LD_INT 29
15966: PUSH
15967: LD_INT 30
15969: PUSH
15970: LD_INT 31
15972: PUSH
15973: LD_INT 32
15975: PUSH
15976: LD_INT 33
15978: PUSH
15979: LD_INT 34
15981: PUSH
15982: LD_INT 35
15984: PUSH
15985: LD_INT 36
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 101
16028: PUSH
16029: LD_INT 102
16031: PUSH
16032: LD_INT 103
16034: PUSH
16035: LD_INT 104
16037: PUSH
16038: LD_INT 105
16040: PUSH
16041: LD_INT 106
16043: PUSH
16044: LD_INT 107
16046: PUSH
16047: LD_INT 108
16049: PUSH
16050: LD_INT 109
16052: PUSH
16053: LD_INT 110
16055: PUSH
16056: LD_INT 111
16058: PUSH
16059: LD_INT 112
16061: PUSH
16062: LD_INT 113
16064: PUSH
16065: LD_INT 114
16067: PUSH
16068: LD_INT 115
16070: PUSH
16071: LD_INT 116
16073: PUSH
16074: LD_INT 117
16076: PUSH
16077: LD_INT 118
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: ST_TO_ADDR
16104: GO 16107
16106: POP
// end else
16107: GO 16338
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16109: LD_ADDR_VAR 0 2
16113: PUSH
16114: LD_INT 1
16116: PUSH
16117: LD_INT 2
16119: PUSH
16120: LD_INT 3
16122: PUSH
16123: LD_INT 4
16125: PUSH
16126: LD_INT 5
16128: PUSH
16129: LD_INT 6
16131: PUSH
16132: LD_INT 7
16134: PUSH
16135: LD_INT 8
16137: PUSH
16138: LD_INT 9
16140: PUSH
16141: LD_INT 10
16143: PUSH
16144: LD_INT 11
16146: PUSH
16147: LD_INT 12
16149: PUSH
16150: LD_INT 13
16152: PUSH
16153: LD_INT 14
16155: PUSH
16156: LD_INT 15
16158: PUSH
16159: LD_INT 16
16161: PUSH
16162: LD_INT 17
16164: PUSH
16165: LD_INT 18
16167: PUSH
16168: LD_INT 19
16170: PUSH
16171: LD_INT 20
16173: PUSH
16174: LD_INT 21
16176: PUSH
16177: LD_INT 22
16179: PUSH
16180: LD_INT 23
16182: PUSH
16183: LD_INT 24
16185: PUSH
16186: LD_INT 25
16188: PUSH
16189: LD_INT 26
16191: PUSH
16192: LD_INT 27
16194: PUSH
16195: LD_INT 28
16197: PUSH
16198: LD_INT 29
16200: PUSH
16201: LD_INT 30
16203: PUSH
16204: LD_INT 31
16206: PUSH
16207: LD_INT 32
16209: PUSH
16210: LD_INT 33
16212: PUSH
16213: LD_INT 34
16215: PUSH
16216: LD_INT 35
16218: PUSH
16219: LD_INT 36
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 101
16262: PUSH
16263: LD_INT 102
16265: PUSH
16266: LD_INT 103
16268: PUSH
16269: LD_INT 104
16271: PUSH
16272: LD_INT 105
16274: PUSH
16275: LD_INT 106
16277: PUSH
16278: LD_INT 107
16280: PUSH
16281: LD_INT 108
16283: PUSH
16284: LD_INT 109
16286: PUSH
16287: LD_INT 110
16289: PUSH
16290: LD_INT 111
16292: PUSH
16293: LD_INT 112
16295: PUSH
16296: LD_INT 113
16298: PUSH
16299: LD_INT 114
16301: PUSH
16302: LD_INT 115
16304: PUSH
16305: LD_INT 116
16307: PUSH
16308: LD_INT 117
16310: PUSH
16311: LD_INT 118
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: ST_TO_ADDR
// if result then
16338: LD_VAR 0 2
16342: IFFALSE 17128
// begin normal :=  ;
16344: LD_ADDR_VAR 0 5
16348: PUSH
16349: LD_STRING 
16351: ST_TO_ADDR
// hardcore :=  ;
16352: LD_ADDR_VAR 0 6
16356: PUSH
16357: LD_STRING 
16359: ST_TO_ADDR
// active :=  ;
16360: LD_ADDR_VAR 0 7
16364: PUSH
16365: LD_STRING 
16367: ST_TO_ADDR
// for i = 1 to normalCounter do
16368: LD_ADDR_VAR 0 8
16372: PUSH
16373: DOUBLE
16374: LD_INT 1
16376: DEC
16377: ST_TO_ADDR
16378: LD_EXP 48
16382: PUSH
16383: FOR_TO
16384: IFFALSE 16485
// begin tmp := 0 ;
16386: LD_ADDR_VAR 0 3
16390: PUSH
16391: LD_STRING 0
16393: ST_TO_ADDR
// if result [ 1 ] then
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 1
16401: ARRAY
16402: IFFALSE 16467
// if result [ 1 ] [ 1 ] = i then
16404: LD_VAR 0 2
16408: PUSH
16409: LD_INT 1
16411: ARRAY
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PUSH
16417: LD_VAR 0 8
16421: EQUAL
16422: IFFALSE 16467
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16424: LD_ADDR_VAR 0 2
16428: PUSH
16429: LD_VAR 0 2
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: LD_VAR 0 2
16441: PUSH
16442: LD_INT 1
16444: ARRAY
16445: PPUSH
16446: LD_INT 1
16448: PPUSH
16449: CALL_OW 3
16453: PPUSH
16454: CALL_OW 1
16458: ST_TO_ADDR
// tmp := 1 ;
16459: LD_ADDR_VAR 0 3
16463: PUSH
16464: LD_STRING 1
16466: ST_TO_ADDR
// end ; normal := normal & tmp ;
16467: LD_ADDR_VAR 0 5
16471: PUSH
16472: LD_VAR 0 5
16476: PUSH
16477: LD_VAR 0 3
16481: STR
16482: ST_TO_ADDR
// end ;
16483: GO 16383
16485: POP
16486: POP
// for i = 1 to hardcoreCounter do
16487: LD_ADDR_VAR 0 8
16491: PUSH
16492: DOUBLE
16493: LD_INT 1
16495: DEC
16496: ST_TO_ADDR
16497: LD_EXP 49
16501: PUSH
16502: FOR_TO
16503: IFFALSE 16608
// begin tmp := 0 ;
16505: LD_ADDR_VAR 0 3
16509: PUSH
16510: LD_STRING 0
16512: ST_TO_ADDR
// if result [ 2 ] then
16513: LD_VAR 0 2
16517: PUSH
16518: LD_INT 2
16520: ARRAY
16521: IFFALSE 16590
// if result [ 2 ] [ 1 ] = 100 + i then
16523: LD_VAR 0 2
16527: PUSH
16528: LD_INT 2
16530: ARRAY
16531: PUSH
16532: LD_INT 1
16534: ARRAY
16535: PUSH
16536: LD_INT 100
16538: PUSH
16539: LD_VAR 0 8
16543: PLUS
16544: EQUAL
16545: IFFALSE 16590
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16547: LD_ADDR_VAR 0 2
16551: PUSH
16552: LD_VAR 0 2
16556: PPUSH
16557: LD_INT 2
16559: PPUSH
16560: LD_VAR 0 2
16564: PUSH
16565: LD_INT 2
16567: ARRAY
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: CALL_OW 3
16576: PPUSH
16577: CALL_OW 1
16581: ST_TO_ADDR
// tmp := 1 ;
16582: LD_ADDR_VAR 0 3
16586: PUSH
16587: LD_STRING 1
16589: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16590: LD_ADDR_VAR 0 6
16594: PUSH
16595: LD_VAR 0 6
16599: PUSH
16600: LD_VAR 0 3
16604: STR
16605: ST_TO_ADDR
// end ;
16606: GO 16502
16608: POP
16609: POP
// if isGameLoad then
16610: LD_VAR 0 1
16614: IFFALSE 17089
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16616: LD_ADDR_VAR 0 4
16620: PUSH
16621: LD_EXP 52
16625: PUSH
16626: LD_EXP 51
16630: PUSH
16631: LD_EXP 53
16635: PUSH
16636: LD_EXP 50
16640: PUSH
16641: LD_EXP 54
16645: PUSH
16646: LD_EXP 55
16650: PUSH
16651: LD_EXP 56
16655: PUSH
16656: LD_EXP 57
16660: PUSH
16661: LD_EXP 58
16665: PUSH
16666: LD_EXP 59
16670: PUSH
16671: LD_EXP 60
16675: PUSH
16676: LD_EXP 61
16680: PUSH
16681: LD_EXP 62
16685: PUSH
16686: LD_EXP 63
16690: PUSH
16691: LD_EXP 71
16695: PUSH
16696: LD_EXP 72
16700: PUSH
16701: LD_EXP 73
16705: PUSH
16706: LD_EXP 74
16710: PUSH
16711: LD_EXP 76
16715: PUSH
16716: LD_EXP 77
16720: PUSH
16721: LD_EXP 78
16725: PUSH
16726: LD_EXP 81
16730: PUSH
16731: LD_EXP 83
16735: PUSH
16736: LD_EXP 84
16740: PUSH
16741: LD_EXP 85
16745: PUSH
16746: LD_EXP 87
16750: PUSH
16751: LD_EXP 88
16755: PUSH
16756: LD_EXP 91
16760: PUSH
16761: LD_EXP 92
16765: PUSH
16766: LD_EXP 93
16770: PUSH
16771: LD_EXP 94
16775: PUSH
16776: LD_EXP 95
16780: PUSH
16781: LD_EXP 96
16785: PUSH
16786: LD_EXP 97
16790: PUSH
16791: LD_EXP 98
16795: PUSH
16796: LD_EXP 99
16800: PUSH
16801: LD_EXP 64
16805: PUSH
16806: LD_EXP 65
16810: PUSH
16811: LD_EXP 68
16815: PUSH
16816: LD_EXP 69
16820: PUSH
16821: LD_EXP 70
16825: PUSH
16826: LD_EXP 66
16830: PUSH
16831: LD_EXP 67
16835: PUSH
16836: LD_EXP 75
16840: PUSH
16841: LD_EXP 79
16845: PUSH
16846: LD_EXP 80
16850: PUSH
16851: LD_EXP 82
16855: PUSH
16856: LD_EXP 86
16860: PUSH
16861: LD_EXP 89
16865: PUSH
16866: LD_EXP 90
16870: PUSH
16871: LD_EXP 100
16875: PUSH
16876: LD_EXP 101
16880: PUSH
16881: LD_EXP 102
16885: PUSH
16886: LD_EXP 103
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: ST_TO_ADDR
// tmp :=  ;
16947: LD_ADDR_VAR 0 3
16951: PUSH
16952: LD_STRING 
16954: ST_TO_ADDR
// for i = 1 to normalCounter do
16955: LD_ADDR_VAR 0 8
16959: PUSH
16960: DOUBLE
16961: LD_INT 1
16963: DEC
16964: ST_TO_ADDR
16965: LD_EXP 48
16969: PUSH
16970: FOR_TO
16971: IFFALSE 17007
// begin if flags [ i ] then
16973: LD_VAR 0 4
16977: PUSH
16978: LD_VAR 0 8
16982: ARRAY
16983: IFFALSE 17005
// tmp := tmp & i & ; ;
16985: LD_ADDR_VAR 0 3
16989: PUSH
16990: LD_VAR 0 3
16994: PUSH
16995: LD_VAR 0 8
16999: STR
17000: PUSH
17001: LD_STRING ;
17003: STR
17004: ST_TO_ADDR
// end ;
17005: GO 16970
17007: POP
17008: POP
// for i = 1 to hardcoreCounter do
17009: LD_ADDR_VAR 0 8
17013: PUSH
17014: DOUBLE
17015: LD_INT 1
17017: DEC
17018: ST_TO_ADDR
17019: LD_EXP 49
17023: PUSH
17024: FOR_TO
17025: IFFALSE 17071
// begin if flags [ normalCounter + i ] then
17027: LD_VAR 0 4
17031: PUSH
17032: LD_EXP 48
17036: PUSH
17037: LD_VAR 0 8
17041: PLUS
17042: ARRAY
17043: IFFALSE 17069
// tmp := tmp & ( 100 + i ) & ; ;
17045: LD_ADDR_VAR 0 3
17049: PUSH
17050: LD_VAR 0 3
17054: PUSH
17055: LD_INT 100
17057: PUSH
17058: LD_VAR 0 8
17062: PLUS
17063: STR
17064: PUSH
17065: LD_STRING ;
17067: STR
17068: ST_TO_ADDR
// end ;
17069: GO 17024
17071: POP
17072: POP
// if tmp then
17073: LD_VAR 0 3
17077: IFFALSE 17089
// active := tmp ;
17079: LD_ADDR_VAR 0 7
17083: PUSH
17084: LD_VAR 0 3
17088: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17089: LD_STRING getStreamItemsFromMission("
17091: PUSH
17092: LD_VAR 0 5
17096: STR
17097: PUSH
17098: LD_STRING ","
17100: STR
17101: PUSH
17102: LD_VAR 0 6
17106: STR
17107: PUSH
17108: LD_STRING ","
17110: STR
17111: PUSH
17112: LD_VAR 0 7
17116: STR
17117: PUSH
17118: LD_STRING ")
17120: STR
17121: PPUSH
17122: CALL_OW 559
// end else
17126: GO 17135
// ToLua ( getStreamItemsFromMission("","","") ) ;
17128: LD_STRING getStreamItemsFromMission("","","")
17130: PPUSH
17131: CALL_OW 559
// end ;
17135: LD_VAR 0 2
17139: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17140: LD_EXP 47
17144: PUSH
17145: LD_EXP 52
17149: AND
17150: IFFALSE 17274
17152: GO 17154
17154: DISABLE
17155: LD_INT 0
17157: PPUSH
17158: PPUSH
// begin enable ;
17159: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17160: LD_ADDR_VAR 0 2
17164: PUSH
17165: LD_INT 22
17167: PUSH
17168: LD_OWVAR 2
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 2
17179: PUSH
17180: LD_INT 34
17182: PUSH
17183: LD_INT 7
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 34
17192: PUSH
17193: LD_INT 45
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 34
17202: PUSH
17203: LD_INT 28
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 34
17212: PUSH
17213: LD_INT 47
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PPUSH
17231: CALL_OW 69
17235: ST_TO_ADDR
// if not tmp then
17236: LD_VAR 0 2
17240: NOT
17241: IFFALSE 17245
// exit ;
17243: GO 17274
// for i in tmp do
17245: LD_ADDR_VAR 0 1
17249: PUSH
17250: LD_VAR 0 2
17254: PUSH
17255: FOR_IN
17256: IFFALSE 17272
// begin SetLives ( i , 0 ) ;
17258: LD_VAR 0 1
17262: PPUSH
17263: LD_INT 0
17265: PPUSH
17266: CALL_OW 234
// end ;
17270: GO 17255
17272: POP
17273: POP
// end ;
17274: PPOPN 2
17276: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17277: LD_EXP 47
17281: PUSH
17282: LD_EXP 53
17286: AND
17287: IFFALSE 17371
17289: GO 17291
17291: DISABLE
17292: LD_INT 0
17294: PPUSH
17295: PPUSH
// begin enable ;
17296: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17297: LD_ADDR_VAR 0 2
17301: PUSH
17302: LD_INT 22
17304: PUSH
17305: LD_OWVAR 2
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 32
17316: PUSH
17317: LD_INT 3
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PPUSH
17328: CALL_OW 69
17332: ST_TO_ADDR
// if not tmp then
17333: LD_VAR 0 2
17337: NOT
17338: IFFALSE 17342
// exit ;
17340: GO 17371
// for i in tmp do
17342: LD_ADDR_VAR 0 1
17346: PUSH
17347: LD_VAR 0 2
17351: PUSH
17352: FOR_IN
17353: IFFALSE 17369
// begin SetLives ( i , 0 ) ;
17355: LD_VAR 0 1
17359: PPUSH
17360: LD_INT 0
17362: PPUSH
17363: CALL_OW 234
// end ;
17367: GO 17352
17369: POP
17370: POP
// end ;
17371: PPOPN 2
17373: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17374: LD_EXP 47
17378: PUSH
17379: LD_EXP 50
17383: AND
17384: IFFALSE 17477
17386: GO 17388
17388: DISABLE
17389: LD_INT 0
17391: PPUSH
// begin enable ;
17392: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17393: LD_ADDR_VAR 0 1
17397: PUSH
17398: LD_INT 22
17400: PUSH
17401: LD_OWVAR 2
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 2
17412: PUSH
17413: LD_INT 25
17415: PUSH
17416: LD_INT 5
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 25
17425: PUSH
17426: LD_INT 9
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 25
17435: PUSH
17436: LD_INT 8
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PPUSH
17453: CALL_OW 69
17457: PUSH
17458: FOR_IN
17459: IFFALSE 17475
// begin SetClass ( i , 1 ) ;
17461: LD_VAR 0 1
17465: PPUSH
17466: LD_INT 1
17468: PPUSH
17469: CALL_OW 336
// end ;
17473: GO 17458
17475: POP
17476: POP
// end ;
17477: PPOPN 1
17479: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17480: LD_EXP 47
17484: PUSH
17485: LD_EXP 51
17489: AND
17490: PUSH
17491: LD_OWVAR 65
17495: PUSH
17496: LD_INT 7
17498: LESS
17499: AND
17500: IFFALSE 17514
17502: GO 17504
17504: DISABLE
// begin enable ;
17505: ENABLE
// game_speed := 7 ;
17506: LD_ADDR_OWVAR 65
17510: PUSH
17511: LD_INT 7
17513: ST_TO_ADDR
// end ;
17514: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17515: LD_EXP 47
17519: PUSH
17520: LD_EXP 54
17524: AND
17525: IFFALSE 17727
17527: GO 17529
17529: DISABLE
17530: LD_INT 0
17532: PPUSH
17533: PPUSH
17534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17535: LD_ADDR_VAR 0 3
17539: PUSH
17540: LD_INT 81
17542: PUSH
17543: LD_OWVAR 2
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 21
17554: PUSH
17555: LD_INT 1
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PPUSH
17566: CALL_OW 69
17570: ST_TO_ADDR
// if not tmp then
17571: LD_VAR 0 3
17575: NOT
17576: IFFALSE 17580
// exit ;
17578: GO 17727
// if tmp > 5 then
17580: LD_VAR 0 3
17584: PUSH
17585: LD_INT 5
17587: GREATER
17588: IFFALSE 17600
// k := 5 else
17590: LD_ADDR_VAR 0 2
17594: PUSH
17595: LD_INT 5
17597: ST_TO_ADDR
17598: GO 17610
// k := tmp ;
17600: LD_ADDR_VAR 0 2
17604: PUSH
17605: LD_VAR 0 3
17609: ST_TO_ADDR
// for i := 1 to k do
17610: LD_ADDR_VAR 0 1
17614: PUSH
17615: DOUBLE
17616: LD_INT 1
17618: DEC
17619: ST_TO_ADDR
17620: LD_VAR 0 2
17624: PUSH
17625: FOR_TO
17626: IFFALSE 17725
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17628: LD_VAR 0 3
17632: PUSH
17633: LD_VAR 0 1
17637: ARRAY
17638: PPUSH
17639: LD_VAR 0 1
17643: PUSH
17644: LD_INT 4
17646: MOD
17647: PUSH
17648: LD_INT 1
17650: PLUS
17651: PPUSH
17652: CALL_OW 259
17656: PUSH
17657: LD_INT 10
17659: LESS
17660: IFFALSE 17723
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17662: LD_VAR 0 3
17666: PUSH
17667: LD_VAR 0 1
17671: ARRAY
17672: PPUSH
17673: LD_VAR 0 1
17677: PUSH
17678: LD_INT 4
17680: MOD
17681: PUSH
17682: LD_INT 1
17684: PLUS
17685: PPUSH
17686: LD_VAR 0 3
17690: PUSH
17691: LD_VAR 0 1
17695: ARRAY
17696: PPUSH
17697: LD_VAR 0 1
17701: PUSH
17702: LD_INT 4
17704: MOD
17705: PUSH
17706: LD_INT 1
17708: PLUS
17709: PPUSH
17710: CALL_OW 259
17714: PUSH
17715: LD_INT 1
17717: PLUS
17718: PPUSH
17719: CALL_OW 237
17723: GO 17625
17725: POP
17726: POP
// end ;
17727: PPOPN 3
17729: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17730: LD_EXP 47
17734: PUSH
17735: LD_EXP 55
17739: AND
17740: IFFALSE 17760
17742: GO 17744
17744: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17745: LD_INT 4
17747: PPUSH
17748: LD_OWVAR 2
17752: PPUSH
17753: LD_INT 0
17755: PPUSH
17756: CALL_OW 324
17760: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17761: LD_EXP 47
17765: PUSH
17766: LD_EXP 84
17770: AND
17771: IFFALSE 17791
17773: GO 17775
17775: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17776: LD_INT 19
17778: PPUSH
17779: LD_OWVAR 2
17783: PPUSH
17784: LD_INT 0
17786: PPUSH
17787: CALL_OW 324
17791: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17792: LD_EXP 47
17796: PUSH
17797: LD_EXP 56
17801: AND
17802: IFFALSE 17904
17804: GO 17806
17806: DISABLE
17807: LD_INT 0
17809: PPUSH
17810: PPUSH
// begin enable ;
17811: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17812: LD_ADDR_VAR 0 2
17816: PUSH
17817: LD_INT 22
17819: PUSH
17820: LD_OWVAR 2
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PUSH
17829: LD_INT 2
17831: PUSH
17832: LD_INT 34
17834: PUSH
17835: LD_INT 11
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 34
17844: PUSH
17845: LD_INT 30
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: LIST
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PPUSH
17861: CALL_OW 69
17865: ST_TO_ADDR
// if not tmp then
17866: LD_VAR 0 2
17870: NOT
17871: IFFALSE 17875
// exit ;
17873: GO 17904
// for i in tmp do
17875: LD_ADDR_VAR 0 1
17879: PUSH
17880: LD_VAR 0 2
17884: PUSH
17885: FOR_IN
17886: IFFALSE 17902
// begin SetLives ( i , 0 ) ;
17888: LD_VAR 0 1
17892: PPUSH
17893: LD_INT 0
17895: PPUSH
17896: CALL_OW 234
// end ;
17900: GO 17885
17902: POP
17903: POP
// end ;
17904: PPOPN 2
17906: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17907: LD_EXP 47
17911: PUSH
17912: LD_EXP 57
17916: AND
17917: IFFALSE 17937
17919: GO 17921
17921: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17922: LD_INT 32
17924: PPUSH
17925: LD_OWVAR 2
17929: PPUSH
17930: LD_INT 0
17932: PPUSH
17933: CALL_OW 324
17937: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17938: LD_EXP 47
17942: PUSH
17943: LD_EXP 58
17947: AND
17948: IFFALSE 18129
17950: GO 17952
17952: DISABLE
17953: LD_INT 0
17955: PPUSH
17956: PPUSH
17957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17958: LD_ADDR_VAR 0 2
17962: PUSH
17963: LD_INT 22
17965: PUSH
17966: LD_OWVAR 2
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 33
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PPUSH
17989: CALL_OW 69
17993: ST_TO_ADDR
// if not tmp then
17994: LD_VAR 0 2
17998: NOT
17999: IFFALSE 18003
// exit ;
18001: GO 18129
// side := 0 ;
18003: LD_ADDR_VAR 0 3
18007: PUSH
18008: LD_INT 0
18010: ST_TO_ADDR
// for i := 1 to 8 do
18011: LD_ADDR_VAR 0 1
18015: PUSH
18016: DOUBLE
18017: LD_INT 1
18019: DEC
18020: ST_TO_ADDR
18021: LD_INT 8
18023: PUSH
18024: FOR_TO
18025: IFFALSE 18073
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18027: LD_OWVAR 2
18031: PUSH
18032: LD_VAR 0 1
18036: NONEQUAL
18037: PUSH
18038: LD_OWVAR 2
18042: PPUSH
18043: LD_VAR 0 1
18047: PPUSH
18048: CALL_OW 81
18052: PUSH
18053: LD_INT 2
18055: EQUAL
18056: AND
18057: IFFALSE 18071
// begin side := i ;
18059: LD_ADDR_VAR 0 3
18063: PUSH
18064: LD_VAR 0 1
18068: ST_TO_ADDR
// break ;
18069: GO 18073
// end ;
18071: GO 18024
18073: POP
18074: POP
// if not side then
18075: LD_VAR 0 3
18079: NOT
18080: IFFALSE 18084
// exit ;
18082: GO 18129
// for i := 1 to tmp do
18084: LD_ADDR_VAR 0 1
18088: PUSH
18089: DOUBLE
18090: LD_INT 1
18092: DEC
18093: ST_TO_ADDR
18094: LD_VAR 0 2
18098: PUSH
18099: FOR_TO
18100: IFFALSE 18127
// if Prob ( 60 ) then
18102: LD_INT 60
18104: PPUSH
18105: CALL_OW 13
18109: IFFALSE 18125
// SetSide ( i , side ) ;
18111: LD_VAR 0 1
18115: PPUSH
18116: LD_VAR 0 3
18120: PPUSH
18121: CALL_OW 235
18125: GO 18099
18127: POP
18128: POP
// end ;
18129: PPOPN 3
18131: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18132: LD_EXP 47
18136: PUSH
18137: LD_EXP 60
18141: AND
18142: IFFALSE 18261
18144: GO 18146
18146: DISABLE
18147: LD_INT 0
18149: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18150: LD_ADDR_VAR 0 1
18154: PUSH
18155: LD_INT 22
18157: PUSH
18158: LD_OWVAR 2
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 21
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 3
18179: PUSH
18180: LD_INT 23
18182: PUSH
18183: LD_INT 0
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: LIST
18198: PPUSH
18199: CALL_OW 69
18203: PUSH
18204: FOR_IN
18205: IFFALSE 18259
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18207: LD_VAR 0 1
18211: PPUSH
18212: CALL_OW 257
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: LD_INT 2
18222: PUSH
18223: LD_INT 3
18225: PUSH
18226: LD_INT 4
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: IN
18235: IFFALSE 18257
// SetClass ( un , rand ( 1 , 4 ) ) ;
18237: LD_VAR 0 1
18241: PPUSH
18242: LD_INT 1
18244: PPUSH
18245: LD_INT 4
18247: PPUSH
18248: CALL_OW 12
18252: PPUSH
18253: CALL_OW 336
18257: GO 18204
18259: POP
18260: POP
// end ;
18261: PPOPN 1
18263: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18264: LD_EXP 47
18268: PUSH
18269: LD_EXP 59
18273: AND
18274: IFFALSE 18353
18276: GO 18278
18278: DISABLE
18279: LD_INT 0
18281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18282: LD_ADDR_VAR 0 1
18286: PUSH
18287: LD_INT 22
18289: PUSH
18290: LD_OWVAR 2
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 21
18301: PUSH
18302: LD_INT 3
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PPUSH
18313: CALL_OW 69
18317: ST_TO_ADDR
// if not tmp then
18318: LD_VAR 0 1
18322: NOT
18323: IFFALSE 18327
// exit ;
18325: GO 18353
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18327: LD_VAR 0 1
18331: PUSH
18332: LD_INT 1
18334: PPUSH
18335: LD_VAR 0 1
18339: PPUSH
18340: CALL_OW 12
18344: ARRAY
18345: PPUSH
18346: LD_INT 100
18348: PPUSH
18349: CALL_OW 234
// end ;
18353: PPOPN 1
18355: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18356: LD_EXP 47
18360: PUSH
18361: LD_EXP 61
18365: AND
18366: IFFALSE 18464
18368: GO 18370
18370: DISABLE
18371: LD_INT 0
18373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18374: LD_ADDR_VAR 0 1
18378: PUSH
18379: LD_INT 22
18381: PUSH
18382: LD_OWVAR 2
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 21
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PPUSH
18405: CALL_OW 69
18409: ST_TO_ADDR
// if not tmp then
18410: LD_VAR 0 1
18414: NOT
18415: IFFALSE 18419
// exit ;
18417: GO 18464
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18419: LD_VAR 0 1
18423: PUSH
18424: LD_INT 1
18426: PPUSH
18427: LD_VAR 0 1
18431: PPUSH
18432: CALL_OW 12
18436: ARRAY
18437: PPUSH
18438: LD_INT 1
18440: PPUSH
18441: LD_INT 4
18443: PPUSH
18444: CALL_OW 12
18448: PPUSH
18449: LD_INT 3000
18451: PPUSH
18452: LD_INT 9000
18454: PPUSH
18455: CALL_OW 12
18459: PPUSH
18460: CALL_OW 492
// end ;
18464: PPOPN 1
18466: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18467: LD_EXP 47
18471: PUSH
18472: LD_EXP 62
18476: AND
18477: IFFALSE 18497
18479: GO 18481
18481: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18482: LD_INT 1
18484: PPUSH
18485: LD_OWVAR 2
18489: PPUSH
18490: LD_INT 0
18492: PPUSH
18493: CALL_OW 324
18497: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18498: LD_EXP 47
18502: PUSH
18503: LD_EXP 63
18507: AND
18508: IFFALSE 18591
18510: GO 18512
18512: DISABLE
18513: LD_INT 0
18515: PPUSH
18516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18517: LD_ADDR_VAR 0 2
18521: PUSH
18522: LD_INT 22
18524: PUSH
18525: LD_OWVAR 2
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 21
18536: PUSH
18537: LD_INT 3
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PPUSH
18548: CALL_OW 69
18552: ST_TO_ADDR
// if not tmp then
18553: LD_VAR 0 2
18557: NOT
18558: IFFALSE 18562
// exit ;
18560: GO 18591
// for i in tmp do
18562: LD_ADDR_VAR 0 1
18566: PUSH
18567: LD_VAR 0 2
18571: PUSH
18572: FOR_IN
18573: IFFALSE 18589
// SetBLevel ( i , 10 ) ;
18575: LD_VAR 0 1
18579: PPUSH
18580: LD_INT 10
18582: PPUSH
18583: CALL_OW 241
18587: GO 18572
18589: POP
18590: POP
// end ;
18591: PPOPN 2
18593: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18594: LD_EXP 47
18598: PUSH
18599: LD_EXP 64
18603: AND
18604: IFFALSE 18715
18606: GO 18608
18608: DISABLE
18609: LD_INT 0
18611: PPUSH
18612: PPUSH
18613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18614: LD_ADDR_VAR 0 3
18618: PUSH
18619: LD_INT 22
18621: PUSH
18622: LD_OWVAR 2
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 25
18633: PUSH
18634: LD_INT 1
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PPUSH
18645: CALL_OW 69
18649: ST_TO_ADDR
// if not tmp then
18650: LD_VAR 0 3
18654: NOT
18655: IFFALSE 18659
// exit ;
18657: GO 18715
// un := tmp [ rand ( 1 , tmp ) ] ;
18659: LD_ADDR_VAR 0 2
18663: PUSH
18664: LD_VAR 0 3
18668: PUSH
18669: LD_INT 1
18671: PPUSH
18672: LD_VAR 0 3
18676: PPUSH
18677: CALL_OW 12
18681: ARRAY
18682: ST_TO_ADDR
// if Crawls ( un ) then
18683: LD_VAR 0 2
18687: PPUSH
18688: CALL_OW 318
18692: IFFALSE 18703
// ComWalk ( un ) ;
18694: LD_VAR 0 2
18698: PPUSH
18699: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18703: LD_VAR 0 2
18707: PPUSH
18708: LD_INT 5
18710: PPUSH
18711: CALL_OW 336
// end ;
18715: PPOPN 3
18717: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18718: LD_EXP 47
18722: PUSH
18723: LD_EXP 65
18727: AND
18728: PUSH
18729: LD_OWVAR 67
18733: PUSH
18734: LD_INT 4
18736: LESS
18737: AND
18738: IFFALSE 18757
18740: GO 18742
18742: DISABLE
// begin Difficulty := Difficulty + 1 ;
18743: LD_ADDR_OWVAR 67
18747: PUSH
18748: LD_OWVAR 67
18752: PUSH
18753: LD_INT 1
18755: PLUS
18756: ST_TO_ADDR
// end ;
18757: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18758: LD_EXP 47
18762: PUSH
18763: LD_EXP 66
18767: AND
18768: IFFALSE 18871
18770: GO 18772
18772: DISABLE
18773: LD_INT 0
18775: PPUSH
// begin for i := 1 to 5 do
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: DOUBLE
18782: LD_INT 1
18784: DEC
18785: ST_TO_ADDR
18786: LD_INT 5
18788: PUSH
18789: FOR_TO
18790: IFFALSE 18869
// begin uc_nation := nation_nature ;
18792: LD_ADDR_OWVAR 21
18796: PUSH
18797: LD_INT 0
18799: ST_TO_ADDR
// uc_side := 0 ;
18800: LD_ADDR_OWVAR 20
18804: PUSH
18805: LD_INT 0
18807: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18808: LD_ADDR_OWVAR 29
18812: PUSH
18813: LD_INT 12
18815: PUSH
18816: LD_INT 12
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: ST_TO_ADDR
// hc_agressivity := 20 ;
18823: LD_ADDR_OWVAR 35
18827: PUSH
18828: LD_INT 20
18830: ST_TO_ADDR
// hc_class := class_tiger ;
18831: LD_ADDR_OWVAR 28
18835: PUSH
18836: LD_INT 14
18838: ST_TO_ADDR
// hc_gallery :=  ;
18839: LD_ADDR_OWVAR 33
18843: PUSH
18844: LD_STRING 
18846: ST_TO_ADDR
// hc_name :=  ;
18847: LD_ADDR_OWVAR 26
18851: PUSH
18852: LD_STRING 
18854: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18855: CALL_OW 44
18859: PPUSH
18860: LD_INT 0
18862: PPUSH
18863: CALL_OW 51
// end ;
18867: GO 18789
18869: POP
18870: POP
// end ;
18871: PPOPN 1
18873: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18874: LD_EXP 47
18878: PUSH
18879: LD_EXP 67
18883: AND
18884: IFFALSE 18893
18886: GO 18888
18888: DISABLE
// StreamSibBomb ;
18889: CALL 18894 0 0
18893: END
// export function StreamSibBomb ; var i , x , y ; begin
18894: LD_INT 0
18896: PPUSH
18897: PPUSH
18898: PPUSH
18899: PPUSH
// result := false ;
18900: LD_ADDR_VAR 0 1
18904: PUSH
18905: LD_INT 0
18907: ST_TO_ADDR
// for i := 1 to 16 do
18908: LD_ADDR_VAR 0 2
18912: PUSH
18913: DOUBLE
18914: LD_INT 1
18916: DEC
18917: ST_TO_ADDR
18918: LD_INT 16
18920: PUSH
18921: FOR_TO
18922: IFFALSE 19121
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18924: LD_ADDR_VAR 0 3
18928: PUSH
18929: LD_INT 10
18931: PUSH
18932: LD_INT 20
18934: PUSH
18935: LD_INT 30
18937: PUSH
18938: LD_INT 40
18940: PUSH
18941: LD_INT 50
18943: PUSH
18944: LD_INT 60
18946: PUSH
18947: LD_INT 70
18949: PUSH
18950: LD_INT 80
18952: PUSH
18953: LD_INT 90
18955: PUSH
18956: LD_INT 100
18958: PUSH
18959: LD_INT 110
18961: PUSH
18962: LD_INT 120
18964: PUSH
18965: LD_INT 130
18967: PUSH
18968: LD_INT 140
18970: PUSH
18971: LD_INT 150
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 1
18993: PPUSH
18994: LD_INT 15
18996: PPUSH
18997: CALL_OW 12
19001: ARRAY
19002: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19003: LD_ADDR_VAR 0 4
19007: PUSH
19008: LD_INT 10
19010: PUSH
19011: LD_INT 20
19013: PUSH
19014: LD_INT 30
19016: PUSH
19017: LD_INT 40
19019: PUSH
19020: LD_INT 50
19022: PUSH
19023: LD_INT 60
19025: PUSH
19026: LD_INT 70
19028: PUSH
19029: LD_INT 80
19031: PUSH
19032: LD_INT 90
19034: PUSH
19035: LD_INT 100
19037: PUSH
19038: LD_INT 110
19040: PUSH
19041: LD_INT 120
19043: PUSH
19044: LD_INT 130
19046: PUSH
19047: LD_INT 140
19049: PUSH
19050: LD_INT 150
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 1
19072: PPUSH
19073: LD_INT 15
19075: PPUSH
19076: CALL_OW 12
19080: ARRAY
19081: ST_TO_ADDR
// if ValidHex ( x , y ) then
19082: LD_VAR 0 3
19086: PPUSH
19087: LD_VAR 0 4
19091: PPUSH
19092: CALL_OW 488
19096: IFFALSE 19119
// begin result := [ x , y ] ;
19098: LD_ADDR_VAR 0 1
19102: PUSH
19103: LD_VAR 0 3
19107: PUSH
19108: LD_VAR 0 4
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: ST_TO_ADDR
// break ;
19117: GO 19121
// end ; end ;
19119: GO 18921
19121: POP
19122: POP
// if result then
19123: LD_VAR 0 1
19127: IFFALSE 19187
// begin ToLua ( playSibBomb() ) ;
19129: LD_STRING playSibBomb()
19131: PPUSH
19132: CALL_OW 559
// wait ( 0 0$14 ) ;
19136: LD_INT 490
19138: PPUSH
19139: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19143: LD_VAR 0 1
19147: PUSH
19148: LD_INT 1
19150: ARRAY
19151: PPUSH
19152: LD_VAR 0 1
19156: PUSH
19157: LD_INT 2
19159: ARRAY
19160: PPUSH
19161: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19165: LD_VAR 0 1
19169: PUSH
19170: LD_INT 1
19172: ARRAY
19173: PPUSH
19174: LD_VAR 0 1
19178: PUSH
19179: LD_INT 2
19181: ARRAY
19182: PPUSH
19183: CALL_OW 429
// end ; end ;
19187: LD_VAR 0 1
19191: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19192: LD_EXP 47
19196: PUSH
19197: LD_EXP 69
19201: AND
19202: IFFALSE 19214
19204: GO 19206
19206: DISABLE
// YouLost (  ) ;
19207: LD_STRING 
19209: PPUSH
19210: CALL_OW 104
19214: END
// every 0 0$1 trigger StreamModeActive and sFog do
19215: LD_EXP 47
19219: PUSH
19220: LD_EXP 68
19224: AND
19225: IFFALSE 19239
19227: GO 19229
19229: DISABLE
// FogOff ( your_side ) ;
19230: LD_OWVAR 2
19234: PPUSH
19235: CALL_OW 344
19239: END
// every 0 0$1 trigger StreamModeActive and sSun do
19240: LD_EXP 47
19244: PUSH
19245: LD_EXP 70
19249: AND
19250: IFFALSE 19278
19252: GO 19254
19254: DISABLE
// begin solar_recharge_percent := 0 ;
19255: LD_ADDR_OWVAR 79
19259: PUSH
19260: LD_INT 0
19262: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19263: LD_INT 10500
19265: PPUSH
19266: CALL_OW 67
// solar_recharge_percent := 100 ;
19270: LD_ADDR_OWVAR 79
19274: PUSH
19275: LD_INT 100
19277: ST_TO_ADDR
// end ;
19278: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19279: LD_EXP 47
19283: PUSH
19284: LD_EXP 71
19288: AND
19289: IFFALSE 19528
19291: GO 19293
19293: DISABLE
19294: LD_INT 0
19296: PPUSH
19297: PPUSH
19298: PPUSH
// begin tmp := [ ] ;
19299: LD_ADDR_VAR 0 3
19303: PUSH
19304: EMPTY
19305: ST_TO_ADDR
// for i := 1 to 6 do
19306: LD_ADDR_VAR 0 1
19310: PUSH
19311: DOUBLE
19312: LD_INT 1
19314: DEC
19315: ST_TO_ADDR
19316: LD_INT 6
19318: PUSH
19319: FOR_TO
19320: IFFALSE 19425
// begin uc_nation := nation_nature ;
19322: LD_ADDR_OWVAR 21
19326: PUSH
19327: LD_INT 0
19329: ST_TO_ADDR
// uc_side := 0 ;
19330: LD_ADDR_OWVAR 20
19334: PUSH
19335: LD_INT 0
19337: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19338: LD_ADDR_OWVAR 29
19342: PUSH
19343: LD_INT 12
19345: PUSH
19346: LD_INT 12
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: ST_TO_ADDR
// hc_agressivity := 20 ;
19353: LD_ADDR_OWVAR 35
19357: PUSH
19358: LD_INT 20
19360: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19361: LD_ADDR_OWVAR 28
19365: PUSH
19366: LD_INT 17
19368: ST_TO_ADDR
// hc_gallery :=  ;
19369: LD_ADDR_OWVAR 33
19373: PUSH
19374: LD_STRING 
19376: ST_TO_ADDR
// hc_name :=  ;
19377: LD_ADDR_OWVAR 26
19381: PUSH
19382: LD_STRING 
19384: ST_TO_ADDR
// un := CreateHuman ;
19385: LD_ADDR_VAR 0 2
19389: PUSH
19390: CALL_OW 44
19394: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19395: LD_VAR 0 2
19399: PPUSH
19400: LD_INT 1
19402: PPUSH
19403: CALL_OW 51
// tmp := tmp ^ un ;
19407: LD_ADDR_VAR 0 3
19411: PUSH
19412: LD_VAR 0 3
19416: PUSH
19417: LD_VAR 0 2
19421: ADD
19422: ST_TO_ADDR
// end ;
19423: GO 19319
19425: POP
19426: POP
// repeat wait ( 0 0$1 ) ;
19427: LD_INT 35
19429: PPUSH
19430: CALL_OW 67
// for un in tmp do
19434: LD_ADDR_VAR 0 2
19438: PUSH
19439: LD_VAR 0 3
19443: PUSH
19444: FOR_IN
19445: IFFALSE 19519
// begin if IsDead ( un ) then
19447: LD_VAR 0 2
19451: PPUSH
19452: CALL_OW 301
19456: IFFALSE 19476
// begin tmp := tmp diff un ;
19458: LD_ADDR_VAR 0 3
19462: PUSH
19463: LD_VAR 0 3
19467: PUSH
19468: LD_VAR 0 2
19472: DIFF
19473: ST_TO_ADDR
// continue ;
19474: GO 19444
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19476: LD_VAR 0 2
19480: PPUSH
19481: LD_INT 3
19483: PUSH
19484: LD_INT 22
19486: PUSH
19487: LD_INT 0
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PPUSH
19498: CALL_OW 69
19502: PPUSH
19503: LD_VAR 0 2
19507: PPUSH
19508: CALL_OW 74
19512: PPUSH
19513: CALL_OW 115
// end ;
19517: GO 19444
19519: POP
19520: POP
// until not tmp ;
19521: LD_VAR 0 3
19525: NOT
19526: IFFALSE 19427
// end ;
19528: PPOPN 3
19530: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19531: LD_EXP 47
19535: PUSH
19536: LD_EXP 72
19540: AND
19541: IFFALSE 19595
19543: GO 19545
19545: DISABLE
// begin ToLua ( displayTroll(); ) ;
19546: LD_STRING displayTroll();
19548: PPUSH
19549: CALL_OW 559
// wait ( 3 3$00 ) ;
19553: LD_INT 6300
19555: PPUSH
19556: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19560: LD_STRING hideTroll();
19562: PPUSH
19563: CALL_OW 559
// wait ( 1 1$00 ) ;
19567: LD_INT 2100
19569: PPUSH
19570: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19574: LD_STRING displayTroll();
19576: PPUSH
19577: CALL_OW 559
// wait ( 1 1$00 ) ;
19581: LD_INT 2100
19583: PPUSH
19584: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19588: LD_STRING hideTroll();
19590: PPUSH
19591: CALL_OW 559
// end ;
19595: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19596: LD_EXP 47
19600: PUSH
19601: LD_EXP 73
19605: AND
19606: IFFALSE 19669
19608: GO 19610
19610: DISABLE
19611: LD_INT 0
19613: PPUSH
// begin p := 0 ;
19614: LD_ADDR_VAR 0 1
19618: PUSH
19619: LD_INT 0
19621: ST_TO_ADDR
// repeat game_speed := 1 ;
19622: LD_ADDR_OWVAR 65
19626: PUSH
19627: LD_INT 1
19629: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19630: LD_INT 35
19632: PPUSH
19633: CALL_OW 67
// p := p + 1 ;
19637: LD_ADDR_VAR 0 1
19641: PUSH
19642: LD_VAR 0 1
19646: PUSH
19647: LD_INT 1
19649: PLUS
19650: ST_TO_ADDR
// until p >= 60 ;
19651: LD_VAR 0 1
19655: PUSH
19656: LD_INT 60
19658: GREATEREQUAL
19659: IFFALSE 19622
// game_speed := 4 ;
19661: LD_ADDR_OWVAR 65
19665: PUSH
19666: LD_INT 4
19668: ST_TO_ADDR
// end ;
19669: PPOPN 1
19671: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19672: LD_EXP 47
19676: PUSH
19677: LD_EXP 74
19681: AND
19682: IFFALSE 19828
19684: GO 19686
19686: DISABLE
19687: LD_INT 0
19689: PPUSH
19690: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19691: LD_ADDR_VAR 0 1
19695: PUSH
19696: LD_INT 22
19698: PUSH
19699: LD_OWVAR 2
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 2
19710: PUSH
19711: LD_INT 30
19713: PUSH
19714: LD_INT 0
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 30
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: LIST
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PPUSH
19740: CALL_OW 69
19744: ST_TO_ADDR
// if not depot then
19745: LD_VAR 0 1
19749: NOT
19750: IFFALSE 19754
// exit ;
19752: GO 19828
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19754: LD_ADDR_VAR 0 2
19758: PUSH
19759: LD_VAR 0 1
19763: PUSH
19764: LD_INT 1
19766: PPUSH
19767: LD_VAR 0 1
19771: PPUSH
19772: CALL_OW 12
19776: ARRAY
19777: PPUSH
19778: CALL_OW 274
19782: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19783: LD_VAR 0 2
19787: PPUSH
19788: LD_INT 1
19790: PPUSH
19791: LD_INT 0
19793: PPUSH
19794: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19798: LD_VAR 0 2
19802: PPUSH
19803: LD_INT 2
19805: PPUSH
19806: LD_INT 0
19808: PPUSH
19809: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19813: LD_VAR 0 2
19817: PPUSH
19818: LD_INT 3
19820: PPUSH
19821: LD_INT 0
19823: PPUSH
19824: CALL_OW 277
// end ;
19828: PPOPN 2
19830: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19831: LD_EXP 47
19835: PUSH
19836: LD_EXP 75
19840: AND
19841: IFFALSE 19938
19843: GO 19845
19845: DISABLE
19846: LD_INT 0
19848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19849: LD_ADDR_VAR 0 1
19853: PUSH
19854: LD_INT 22
19856: PUSH
19857: LD_OWVAR 2
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 21
19868: PUSH
19869: LD_INT 1
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 3
19878: PUSH
19879: LD_INT 23
19881: PUSH
19882: LD_INT 0
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: LIST
19897: PPUSH
19898: CALL_OW 69
19902: ST_TO_ADDR
// if not tmp then
19903: LD_VAR 0 1
19907: NOT
19908: IFFALSE 19912
// exit ;
19910: GO 19938
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19912: LD_VAR 0 1
19916: PUSH
19917: LD_INT 1
19919: PPUSH
19920: LD_VAR 0 1
19924: PPUSH
19925: CALL_OW 12
19929: ARRAY
19930: PPUSH
19931: LD_INT 200
19933: PPUSH
19934: CALL_OW 234
// end ;
19938: PPOPN 1
19940: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19941: LD_EXP 47
19945: PUSH
19946: LD_EXP 76
19950: AND
19951: IFFALSE 20030
19953: GO 19955
19955: DISABLE
19956: LD_INT 0
19958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19959: LD_ADDR_VAR 0 1
19963: PUSH
19964: LD_INT 22
19966: PUSH
19967: LD_OWVAR 2
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 21
19978: PUSH
19979: LD_INT 2
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PPUSH
19990: CALL_OW 69
19994: ST_TO_ADDR
// if not tmp then
19995: LD_VAR 0 1
19999: NOT
20000: IFFALSE 20004
// exit ;
20002: GO 20030
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20004: LD_VAR 0 1
20008: PUSH
20009: LD_INT 1
20011: PPUSH
20012: LD_VAR 0 1
20016: PPUSH
20017: CALL_OW 12
20021: ARRAY
20022: PPUSH
20023: LD_INT 60
20025: PPUSH
20026: CALL_OW 234
// end ;
20030: PPOPN 1
20032: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20033: LD_EXP 47
20037: PUSH
20038: LD_EXP 77
20042: AND
20043: IFFALSE 20142
20045: GO 20047
20047: DISABLE
20048: LD_INT 0
20050: PPUSH
20051: PPUSH
// begin enable ;
20052: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20053: LD_ADDR_VAR 0 1
20057: PUSH
20058: LD_INT 22
20060: PUSH
20061: LD_OWVAR 2
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 61
20072: PUSH
20073: EMPTY
20074: LIST
20075: PUSH
20076: LD_INT 33
20078: PUSH
20079: LD_INT 2
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: LIST
20090: PPUSH
20091: CALL_OW 69
20095: ST_TO_ADDR
// if not tmp then
20096: LD_VAR 0 1
20100: NOT
20101: IFFALSE 20105
// exit ;
20103: GO 20142
// for i in tmp do
20105: LD_ADDR_VAR 0 2
20109: PUSH
20110: LD_VAR 0 1
20114: PUSH
20115: FOR_IN
20116: IFFALSE 20140
// if IsControledBy ( i ) then
20118: LD_VAR 0 2
20122: PPUSH
20123: CALL_OW 312
20127: IFFALSE 20138
// ComUnlink ( i ) ;
20129: LD_VAR 0 2
20133: PPUSH
20134: CALL_OW 136
20138: GO 20115
20140: POP
20141: POP
// end ;
20142: PPOPN 2
20144: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20145: LD_EXP 47
20149: PUSH
20150: LD_EXP 78
20154: AND
20155: IFFALSE 20295
20157: GO 20159
20159: DISABLE
20160: LD_INT 0
20162: PPUSH
20163: PPUSH
// begin ToLua ( displayPowell(); ) ;
20164: LD_STRING displayPowell();
20166: PPUSH
20167: CALL_OW 559
// uc_side := 0 ;
20171: LD_ADDR_OWVAR 20
20175: PUSH
20176: LD_INT 0
20178: ST_TO_ADDR
// uc_nation := 2 ;
20179: LD_ADDR_OWVAR 21
20183: PUSH
20184: LD_INT 2
20186: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20187: LD_ADDR_OWVAR 37
20191: PUSH
20192: LD_INT 14
20194: ST_TO_ADDR
// vc_engine := engine_siberite ;
20195: LD_ADDR_OWVAR 39
20199: PUSH
20200: LD_INT 3
20202: ST_TO_ADDR
// vc_control := control_apeman ;
20203: LD_ADDR_OWVAR 38
20207: PUSH
20208: LD_INT 5
20210: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20211: LD_ADDR_OWVAR 40
20215: PUSH
20216: LD_INT 29
20218: ST_TO_ADDR
// un := CreateVehicle ;
20219: LD_ADDR_VAR 0 2
20223: PUSH
20224: CALL_OW 45
20228: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20229: LD_VAR 0 2
20233: PPUSH
20234: LD_INT 1
20236: PPUSH
20237: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20241: LD_INT 35
20243: PPUSH
20244: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20248: LD_VAR 0 2
20252: PPUSH
20253: LD_INT 22
20255: PUSH
20256: LD_OWVAR 2
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PPUSH
20265: CALL_OW 69
20269: PPUSH
20270: LD_VAR 0 2
20274: PPUSH
20275: CALL_OW 74
20279: PPUSH
20280: CALL_OW 115
// until IsDead ( un ) ;
20284: LD_VAR 0 2
20288: PPUSH
20289: CALL_OW 301
20293: IFFALSE 20241
// end ;
20295: PPOPN 2
20297: END
// every 0 0$1 trigger StreamModeActive and sStu do
20298: LD_EXP 47
20302: PUSH
20303: LD_EXP 86
20307: AND
20308: IFFALSE 20324
20310: GO 20312
20312: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20313: LD_STRING displayStucuk();
20315: PPUSH
20316: CALL_OW 559
// ResetFog ;
20320: CALL_OW 335
// end ;
20324: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20325: LD_EXP 47
20329: PUSH
20330: LD_EXP 79
20334: AND
20335: IFFALSE 20476
20337: GO 20339
20339: DISABLE
20340: LD_INT 0
20342: PPUSH
20343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20344: LD_ADDR_VAR 0 2
20348: PUSH
20349: LD_INT 22
20351: PUSH
20352: LD_OWVAR 2
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 21
20363: PUSH
20364: LD_INT 1
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PPUSH
20375: CALL_OW 69
20379: ST_TO_ADDR
// if not tmp then
20380: LD_VAR 0 2
20384: NOT
20385: IFFALSE 20389
// exit ;
20387: GO 20476
// un := tmp [ rand ( 1 , tmp ) ] ;
20389: LD_ADDR_VAR 0 1
20393: PUSH
20394: LD_VAR 0 2
20398: PUSH
20399: LD_INT 1
20401: PPUSH
20402: LD_VAR 0 2
20406: PPUSH
20407: CALL_OW 12
20411: ARRAY
20412: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20413: LD_VAR 0 1
20417: PPUSH
20418: LD_INT 0
20420: PPUSH
20421: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20425: LD_VAR 0 1
20429: PPUSH
20430: LD_OWVAR 3
20434: PUSH
20435: LD_VAR 0 1
20439: DIFF
20440: PPUSH
20441: LD_VAR 0 1
20445: PPUSH
20446: CALL_OW 74
20450: PPUSH
20451: CALL_OW 115
// wait ( 0 0$20 ) ;
20455: LD_INT 700
20457: PPUSH
20458: CALL_OW 67
// SetSide ( un , your_side ) ;
20462: LD_VAR 0 1
20466: PPUSH
20467: LD_OWVAR 2
20471: PPUSH
20472: CALL_OW 235
// end ;
20476: PPOPN 2
20478: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20479: LD_EXP 47
20483: PUSH
20484: LD_EXP 80
20488: AND
20489: IFFALSE 20595
20491: GO 20493
20493: DISABLE
20494: LD_INT 0
20496: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20497: LD_ADDR_VAR 0 1
20501: PUSH
20502: LD_INT 22
20504: PUSH
20505: LD_OWVAR 2
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 2
20516: PUSH
20517: LD_INT 30
20519: PUSH
20520: LD_INT 0
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 30
20529: PUSH
20530: LD_INT 1
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PPUSH
20546: CALL_OW 69
20550: ST_TO_ADDR
// if not depot then
20551: LD_VAR 0 1
20555: NOT
20556: IFFALSE 20560
// exit ;
20558: GO 20595
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20560: LD_VAR 0 1
20564: PUSH
20565: LD_INT 1
20567: ARRAY
20568: PPUSH
20569: CALL_OW 250
20573: PPUSH
20574: LD_VAR 0 1
20578: PUSH
20579: LD_INT 1
20581: ARRAY
20582: PPUSH
20583: CALL_OW 251
20587: PPUSH
20588: LD_INT 70
20590: PPUSH
20591: CALL_OW 495
// end ;
20595: PPOPN 1
20597: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20598: LD_EXP 47
20602: PUSH
20603: LD_EXP 81
20607: AND
20608: IFFALSE 20819
20610: GO 20612
20612: DISABLE
20613: LD_INT 0
20615: PPUSH
20616: PPUSH
20617: PPUSH
20618: PPUSH
20619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20620: LD_ADDR_VAR 0 5
20624: PUSH
20625: LD_INT 22
20627: PUSH
20628: LD_OWVAR 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 21
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PPUSH
20651: CALL_OW 69
20655: ST_TO_ADDR
// if not tmp then
20656: LD_VAR 0 5
20660: NOT
20661: IFFALSE 20665
// exit ;
20663: GO 20819
// for i in tmp do
20665: LD_ADDR_VAR 0 1
20669: PUSH
20670: LD_VAR 0 5
20674: PUSH
20675: FOR_IN
20676: IFFALSE 20817
// begin d := rand ( 0 , 5 ) ;
20678: LD_ADDR_VAR 0 4
20682: PUSH
20683: LD_INT 0
20685: PPUSH
20686: LD_INT 5
20688: PPUSH
20689: CALL_OW 12
20693: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20694: LD_ADDR_VAR 0 2
20698: PUSH
20699: LD_VAR 0 1
20703: PPUSH
20704: CALL_OW 250
20708: PPUSH
20709: LD_VAR 0 4
20713: PPUSH
20714: LD_INT 3
20716: PPUSH
20717: LD_INT 12
20719: PPUSH
20720: CALL_OW 12
20724: PPUSH
20725: CALL_OW 272
20729: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20730: LD_ADDR_VAR 0 3
20734: PUSH
20735: LD_VAR 0 1
20739: PPUSH
20740: CALL_OW 251
20744: PPUSH
20745: LD_VAR 0 4
20749: PPUSH
20750: LD_INT 3
20752: PPUSH
20753: LD_INT 12
20755: PPUSH
20756: CALL_OW 12
20760: PPUSH
20761: CALL_OW 273
20765: ST_TO_ADDR
// if ValidHex ( x , y ) then
20766: LD_VAR 0 2
20770: PPUSH
20771: LD_VAR 0 3
20775: PPUSH
20776: CALL_OW 488
20780: IFFALSE 20815
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20782: LD_VAR 0 1
20786: PPUSH
20787: LD_VAR 0 2
20791: PPUSH
20792: LD_VAR 0 3
20796: PPUSH
20797: LD_INT 3
20799: PPUSH
20800: LD_INT 6
20802: PPUSH
20803: CALL_OW 12
20807: PPUSH
20808: LD_INT 1
20810: PPUSH
20811: CALL_OW 483
// end ;
20815: GO 20675
20817: POP
20818: POP
// end ;
20819: PPOPN 5
20821: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20822: LD_EXP 47
20826: PUSH
20827: LD_EXP 82
20831: AND
20832: IFFALSE 20926
20834: GO 20836
20836: DISABLE
20837: LD_INT 0
20839: PPUSH
20840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20841: LD_ADDR_VAR 0 2
20845: PUSH
20846: LD_INT 22
20848: PUSH
20849: LD_OWVAR 2
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 32
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 21
20870: PUSH
20871: LD_INT 2
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: LIST
20882: PPUSH
20883: CALL_OW 69
20887: ST_TO_ADDR
// if not tmp then
20888: LD_VAR 0 2
20892: NOT
20893: IFFALSE 20897
// exit ;
20895: GO 20926
// for i in tmp do
20897: LD_ADDR_VAR 0 1
20901: PUSH
20902: LD_VAR 0 2
20906: PUSH
20907: FOR_IN
20908: IFFALSE 20924
// SetFuel ( i , 0 ) ;
20910: LD_VAR 0 1
20914: PPUSH
20915: LD_INT 0
20917: PPUSH
20918: CALL_OW 240
20922: GO 20907
20924: POP
20925: POP
// end ;
20926: PPOPN 2
20928: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20929: LD_EXP 47
20933: PUSH
20934: LD_EXP 83
20938: AND
20939: IFFALSE 21005
20941: GO 20943
20943: DISABLE
20944: LD_INT 0
20946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20947: LD_ADDR_VAR 0 1
20951: PUSH
20952: LD_INT 22
20954: PUSH
20955: LD_OWVAR 2
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 30
20966: PUSH
20967: LD_INT 29
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PPUSH
20978: CALL_OW 69
20982: ST_TO_ADDR
// if not tmp then
20983: LD_VAR 0 1
20987: NOT
20988: IFFALSE 20992
// exit ;
20990: GO 21005
// DestroyUnit ( tmp [ 1 ] ) ;
20992: LD_VAR 0 1
20996: PUSH
20997: LD_INT 1
20999: ARRAY
21000: PPUSH
21001: CALL_OW 65
// end ;
21005: PPOPN 1
21007: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21008: LD_EXP 47
21012: PUSH
21013: LD_EXP 85
21017: AND
21018: IFFALSE 21147
21020: GO 21022
21022: DISABLE
21023: LD_INT 0
21025: PPUSH
// begin uc_side := 0 ;
21026: LD_ADDR_OWVAR 20
21030: PUSH
21031: LD_INT 0
21033: ST_TO_ADDR
// uc_nation := nation_arabian ;
21034: LD_ADDR_OWVAR 21
21038: PUSH
21039: LD_INT 2
21041: ST_TO_ADDR
// hc_gallery :=  ;
21042: LD_ADDR_OWVAR 33
21046: PUSH
21047: LD_STRING 
21049: ST_TO_ADDR
// hc_name :=  ;
21050: LD_ADDR_OWVAR 26
21054: PUSH
21055: LD_STRING 
21057: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21058: LD_INT 1
21060: PPUSH
21061: LD_INT 11
21063: PPUSH
21064: LD_INT 10
21066: PPUSH
21067: CALL_OW 380
// un := CreateHuman ;
21071: LD_ADDR_VAR 0 1
21075: PUSH
21076: CALL_OW 44
21080: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21081: LD_VAR 0 1
21085: PPUSH
21086: LD_INT 1
21088: PPUSH
21089: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21093: LD_INT 35
21095: PPUSH
21096: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21100: LD_VAR 0 1
21104: PPUSH
21105: LD_INT 22
21107: PUSH
21108: LD_OWVAR 2
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PPUSH
21117: CALL_OW 69
21121: PPUSH
21122: LD_VAR 0 1
21126: PPUSH
21127: CALL_OW 74
21131: PPUSH
21132: CALL_OW 115
// until IsDead ( un ) ;
21136: LD_VAR 0 1
21140: PPUSH
21141: CALL_OW 301
21145: IFFALSE 21093
// end ;
21147: PPOPN 1
21149: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21150: LD_EXP 47
21154: PUSH
21155: LD_EXP 87
21159: AND
21160: IFFALSE 21172
21162: GO 21164
21164: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21165: LD_STRING earthquake(getX(game), 0, 32)
21167: PPUSH
21168: CALL_OW 559
21172: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21173: LD_EXP 47
21177: PUSH
21178: LD_EXP 88
21182: AND
21183: IFFALSE 21274
21185: GO 21187
21187: DISABLE
21188: LD_INT 0
21190: PPUSH
// begin enable ;
21191: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21192: LD_ADDR_VAR 0 1
21196: PUSH
21197: LD_INT 22
21199: PUSH
21200: LD_OWVAR 2
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 21
21211: PUSH
21212: LD_INT 2
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 33
21221: PUSH
21222: LD_INT 3
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: LIST
21233: PPUSH
21234: CALL_OW 69
21238: ST_TO_ADDR
// if not tmp then
21239: LD_VAR 0 1
21243: NOT
21244: IFFALSE 21248
// exit ;
21246: GO 21274
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21248: LD_VAR 0 1
21252: PUSH
21253: LD_INT 1
21255: PPUSH
21256: LD_VAR 0 1
21260: PPUSH
21261: CALL_OW 12
21265: ARRAY
21266: PPUSH
21267: LD_INT 1
21269: PPUSH
21270: CALL_OW 234
// end ;
21274: PPOPN 1
21276: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21277: LD_EXP 47
21281: PUSH
21282: LD_EXP 89
21286: AND
21287: IFFALSE 21428
21289: GO 21291
21291: DISABLE
21292: LD_INT 0
21294: PPUSH
21295: PPUSH
21296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21297: LD_ADDR_VAR 0 3
21301: PUSH
21302: LD_INT 22
21304: PUSH
21305: LD_OWVAR 2
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 25
21316: PUSH
21317: LD_INT 1
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PPUSH
21328: CALL_OW 69
21332: ST_TO_ADDR
// if not tmp then
21333: LD_VAR 0 3
21337: NOT
21338: IFFALSE 21342
// exit ;
21340: GO 21428
// un := tmp [ rand ( 1 , tmp ) ] ;
21342: LD_ADDR_VAR 0 2
21346: PUSH
21347: LD_VAR 0 3
21351: PUSH
21352: LD_INT 1
21354: PPUSH
21355: LD_VAR 0 3
21359: PPUSH
21360: CALL_OW 12
21364: ARRAY
21365: ST_TO_ADDR
// if Crawls ( un ) then
21366: LD_VAR 0 2
21370: PPUSH
21371: CALL_OW 318
21375: IFFALSE 21386
// ComWalk ( un ) ;
21377: LD_VAR 0 2
21381: PPUSH
21382: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21386: LD_VAR 0 2
21390: PPUSH
21391: LD_INT 9
21393: PPUSH
21394: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21398: LD_INT 28
21400: PPUSH
21401: LD_OWVAR 2
21405: PPUSH
21406: LD_INT 2
21408: PPUSH
21409: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21413: LD_INT 29
21415: PPUSH
21416: LD_OWVAR 2
21420: PPUSH
21421: LD_INT 2
21423: PPUSH
21424: CALL_OW 322
// end ;
21428: PPOPN 3
21430: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21431: LD_EXP 47
21435: PUSH
21436: LD_EXP 90
21440: AND
21441: IFFALSE 21552
21443: GO 21445
21445: DISABLE
21446: LD_INT 0
21448: PPUSH
21449: PPUSH
21450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21451: LD_ADDR_VAR 0 3
21455: PUSH
21456: LD_INT 22
21458: PUSH
21459: LD_OWVAR 2
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 25
21470: PUSH
21471: LD_INT 1
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PPUSH
21482: CALL_OW 69
21486: ST_TO_ADDR
// if not tmp then
21487: LD_VAR 0 3
21491: NOT
21492: IFFALSE 21496
// exit ;
21494: GO 21552
// un := tmp [ rand ( 1 , tmp ) ] ;
21496: LD_ADDR_VAR 0 2
21500: PUSH
21501: LD_VAR 0 3
21505: PUSH
21506: LD_INT 1
21508: PPUSH
21509: LD_VAR 0 3
21513: PPUSH
21514: CALL_OW 12
21518: ARRAY
21519: ST_TO_ADDR
// if Crawls ( un ) then
21520: LD_VAR 0 2
21524: PPUSH
21525: CALL_OW 318
21529: IFFALSE 21540
// ComWalk ( un ) ;
21531: LD_VAR 0 2
21535: PPUSH
21536: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21540: LD_VAR 0 2
21544: PPUSH
21545: LD_INT 8
21547: PPUSH
21548: CALL_OW 336
// end ;
21552: PPOPN 3
21554: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21555: LD_EXP 47
21559: PUSH
21560: LD_EXP 91
21564: AND
21565: IFFALSE 21709
21567: GO 21569
21569: DISABLE
21570: LD_INT 0
21572: PPUSH
21573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21574: LD_ADDR_VAR 0 2
21578: PUSH
21579: LD_INT 22
21581: PUSH
21582: LD_OWVAR 2
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 21
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 2
21603: PUSH
21604: LD_INT 34
21606: PUSH
21607: LD_INT 12
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 34
21616: PUSH
21617: LD_INT 51
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 34
21626: PUSH
21627: LD_INT 32
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: PPUSH
21645: CALL_OW 69
21649: ST_TO_ADDR
// if not tmp then
21650: LD_VAR 0 2
21654: NOT
21655: IFFALSE 21659
// exit ;
21657: GO 21709
// for i in tmp do
21659: LD_ADDR_VAR 0 1
21663: PUSH
21664: LD_VAR 0 2
21668: PUSH
21669: FOR_IN
21670: IFFALSE 21707
// if GetCargo ( i , mat_artifact ) = 0 then
21672: LD_VAR 0 1
21676: PPUSH
21677: LD_INT 4
21679: PPUSH
21680: CALL_OW 289
21684: PUSH
21685: LD_INT 0
21687: EQUAL
21688: IFFALSE 21705
// SetCargo ( i , mat_siberit , 100 ) ;
21690: LD_VAR 0 1
21694: PPUSH
21695: LD_INT 3
21697: PPUSH
21698: LD_INT 100
21700: PPUSH
21701: CALL_OW 290
21705: GO 21669
21707: POP
21708: POP
// end ;
21709: PPOPN 2
21711: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21712: LD_EXP 47
21716: PUSH
21717: LD_EXP 92
21721: AND
21722: IFFALSE 21905
21724: GO 21726
21726: DISABLE
21727: LD_INT 0
21729: PPUSH
21730: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21731: LD_ADDR_VAR 0 2
21735: PUSH
21736: LD_INT 22
21738: PUSH
21739: LD_OWVAR 2
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PPUSH
21748: CALL_OW 69
21752: ST_TO_ADDR
// if not tmp then
21753: LD_VAR 0 2
21757: NOT
21758: IFFALSE 21762
// exit ;
21760: GO 21905
// for i := 1 to 2 do
21762: LD_ADDR_VAR 0 1
21766: PUSH
21767: DOUBLE
21768: LD_INT 1
21770: DEC
21771: ST_TO_ADDR
21772: LD_INT 2
21774: PUSH
21775: FOR_TO
21776: IFFALSE 21903
// begin uc_side := your_side ;
21778: LD_ADDR_OWVAR 20
21782: PUSH
21783: LD_OWVAR 2
21787: ST_TO_ADDR
// uc_nation := nation_american ;
21788: LD_ADDR_OWVAR 21
21792: PUSH
21793: LD_INT 1
21795: ST_TO_ADDR
// vc_chassis := us_morphling ;
21796: LD_ADDR_OWVAR 37
21800: PUSH
21801: LD_INT 5
21803: ST_TO_ADDR
// vc_engine := engine_siberite ;
21804: LD_ADDR_OWVAR 39
21808: PUSH
21809: LD_INT 3
21811: ST_TO_ADDR
// vc_control := control_computer ;
21812: LD_ADDR_OWVAR 38
21816: PUSH
21817: LD_INT 3
21819: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21820: LD_ADDR_OWVAR 40
21824: PUSH
21825: LD_INT 10
21827: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21828: LD_VAR 0 2
21832: PUSH
21833: LD_INT 1
21835: ARRAY
21836: PPUSH
21837: CALL_OW 310
21841: NOT
21842: IFFALSE 21889
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21844: CALL_OW 45
21848: PPUSH
21849: LD_VAR 0 2
21853: PUSH
21854: LD_INT 1
21856: ARRAY
21857: PPUSH
21858: CALL_OW 250
21862: PPUSH
21863: LD_VAR 0 2
21867: PUSH
21868: LD_INT 1
21870: ARRAY
21871: PPUSH
21872: CALL_OW 251
21876: PPUSH
21877: LD_INT 12
21879: PPUSH
21880: LD_INT 1
21882: PPUSH
21883: CALL_OW 50
21887: GO 21901
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21889: CALL_OW 45
21893: PPUSH
21894: LD_INT 1
21896: PPUSH
21897: CALL_OW 51
// end ;
21901: GO 21775
21903: POP
21904: POP
// end ;
21905: PPOPN 2
21907: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21908: LD_EXP 47
21912: PUSH
21913: LD_EXP 93
21917: AND
21918: IFFALSE 22140
21920: GO 21922
21922: DISABLE
21923: LD_INT 0
21925: PPUSH
21926: PPUSH
21927: PPUSH
21928: PPUSH
21929: PPUSH
21930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21931: LD_ADDR_VAR 0 6
21935: PUSH
21936: LD_INT 22
21938: PUSH
21939: LD_OWVAR 2
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 21
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 3
21960: PUSH
21961: LD_INT 23
21963: PUSH
21964: LD_INT 0
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: LIST
21979: PPUSH
21980: CALL_OW 69
21984: ST_TO_ADDR
// if not tmp then
21985: LD_VAR 0 6
21989: NOT
21990: IFFALSE 21994
// exit ;
21992: GO 22140
// s1 := rand ( 1 , 4 ) ;
21994: LD_ADDR_VAR 0 2
21998: PUSH
21999: LD_INT 1
22001: PPUSH
22002: LD_INT 4
22004: PPUSH
22005: CALL_OW 12
22009: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22010: LD_ADDR_VAR 0 4
22014: PUSH
22015: LD_VAR 0 6
22019: PUSH
22020: LD_INT 1
22022: ARRAY
22023: PPUSH
22024: LD_VAR 0 2
22028: PPUSH
22029: CALL_OW 259
22033: ST_TO_ADDR
// if s1 = 1 then
22034: LD_VAR 0 2
22038: PUSH
22039: LD_INT 1
22041: EQUAL
22042: IFFALSE 22062
// s2 := rand ( 2 , 4 ) else
22044: LD_ADDR_VAR 0 3
22048: PUSH
22049: LD_INT 2
22051: PPUSH
22052: LD_INT 4
22054: PPUSH
22055: CALL_OW 12
22059: ST_TO_ADDR
22060: GO 22070
// s2 := 1 ;
22062: LD_ADDR_VAR 0 3
22066: PUSH
22067: LD_INT 1
22069: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22070: LD_ADDR_VAR 0 5
22074: PUSH
22075: LD_VAR 0 6
22079: PUSH
22080: LD_INT 1
22082: ARRAY
22083: PPUSH
22084: LD_VAR 0 3
22088: PPUSH
22089: CALL_OW 259
22093: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22094: LD_VAR 0 6
22098: PUSH
22099: LD_INT 1
22101: ARRAY
22102: PPUSH
22103: LD_VAR 0 2
22107: PPUSH
22108: LD_VAR 0 5
22112: PPUSH
22113: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22117: LD_VAR 0 6
22121: PUSH
22122: LD_INT 1
22124: ARRAY
22125: PPUSH
22126: LD_VAR 0 3
22130: PPUSH
22131: LD_VAR 0 4
22135: PPUSH
22136: CALL_OW 237
// end ;
22140: PPOPN 6
22142: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22143: LD_EXP 47
22147: PUSH
22148: LD_EXP 94
22152: AND
22153: IFFALSE 22232
22155: GO 22157
22157: DISABLE
22158: LD_INT 0
22160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22161: LD_ADDR_VAR 0 1
22165: PUSH
22166: LD_INT 22
22168: PUSH
22169: LD_OWVAR 2
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 30
22180: PUSH
22181: LD_INT 3
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PPUSH
22192: CALL_OW 69
22196: ST_TO_ADDR
// if not tmp then
22197: LD_VAR 0 1
22201: NOT
22202: IFFALSE 22206
// exit ;
22204: GO 22232
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22206: LD_VAR 0 1
22210: PUSH
22211: LD_INT 1
22213: PPUSH
22214: LD_VAR 0 1
22218: PPUSH
22219: CALL_OW 12
22223: ARRAY
22224: PPUSH
22225: LD_INT 1
22227: PPUSH
22228: CALL_OW 234
// end ;
22232: PPOPN 1
22234: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22235: LD_EXP 47
22239: PUSH
22240: LD_EXP 95
22244: AND
22245: IFFALSE 22357
22247: GO 22249
22249: DISABLE
22250: LD_INT 0
22252: PPUSH
22253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22254: LD_ADDR_VAR 0 2
22258: PUSH
22259: LD_INT 22
22261: PUSH
22262: LD_OWVAR 2
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 2
22273: PUSH
22274: LD_INT 30
22276: PUSH
22277: LD_INT 27
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 30
22286: PUSH
22287: LD_INT 26
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 30
22296: PUSH
22297: LD_INT 28
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PPUSH
22314: CALL_OW 69
22318: ST_TO_ADDR
// if not tmp then
22319: LD_VAR 0 2
22323: NOT
22324: IFFALSE 22328
// exit ;
22326: GO 22357
// for i in tmp do
22328: LD_ADDR_VAR 0 1
22332: PUSH
22333: LD_VAR 0 2
22337: PUSH
22338: FOR_IN
22339: IFFALSE 22355
// SetLives ( i , 1 ) ;
22341: LD_VAR 0 1
22345: PPUSH
22346: LD_INT 1
22348: PPUSH
22349: CALL_OW 234
22353: GO 22338
22355: POP
22356: POP
// end ;
22357: PPOPN 2
22359: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22360: LD_EXP 47
22364: PUSH
22365: LD_EXP 96
22369: AND
22370: IFFALSE 22657
22372: GO 22374
22374: DISABLE
22375: LD_INT 0
22377: PPUSH
22378: PPUSH
22379: PPUSH
// begin i := rand ( 1 , 7 ) ;
22380: LD_ADDR_VAR 0 1
22384: PUSH
22385: LD_INT 1
22387: PPUSH
22388: LD_INT 7
22390: PPUSH
22391: CALL_OW 12
22395: ST_TO_ADDR
// case i of 1 :
22396: LD_VAR 0 1
22400: PUSH
22401: LD_INT 1
22403: DOUBLE
22404: EQUAL
22405: IFTRUE 22409
22407: GO 22419
22409: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22410: LD_STRING earthquake(getX(game), 0, 32)
22412: PPUSH
22413: CALL_OW 559
22417: GO 22657
22419: LD_INT 2
22421: DOUBLE
22422: EQUAL
22423: IFTRUE 22427
22425: GO 22441
22427: POP
// begin ToLua ( displayStucuk(); ) ;
22428: LD_STRING displayStucuk();
22430: PPUSH
22431: CALL_OW 559
// ResetFog ;
22435: CALL_OW 335
// end ; 3 :
22439: GO 22657
22441: LD_INT 3
22443: DOUBLE
22444: EQUAL
22445: IFTRUE 22449
22447: GO 22553
22449: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22450: LD_ADDR_VAR 0 2
22454: PUSH
22455: LD_INT 22
22457: PUSH
22458: LD_OWVAR 2
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 25
22469: PUSH
22470: LD_INT 1
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PPUSH
22481: CALL_OW 69
22485: ST_TO_ADDR
// if not tmp then
22486: LD_VAR 0 2
22490: NOT
22491: IFFALSE 22495
// exit ;
22493: GO 22657
// un := tmp [ rand ( 1 , tmp ) ] ;
22495: LD_ADDR_VAR 0 3
22499: PUSH
22500: LD_VAR 0 2
22504: PUSH
22505: LD_INT 1
22507: PPUSH
22508: LD_VAR 0 2
22512: PPUSH
22513: CALL_OW 12
22517: ARRAY
22518: ST_TO_ADDR
// if Crawls ( un ) then
22519: LD_VAR 0 3
22523: PPUSH
22524: CALL_OW 318
22528: IFFALSE 22539
// ComWalk ( un ) ;
22530: LD_VAR 0 3
22534: PPUSH
22535: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22539: LD_VAR 0 3
22543: PPUSH
22544: LD_INT 8
22546: PPUSH
22547: CALL_OW 336
// end ; 4 :
22551: GO 22657
22553: LD_INT 4
22555: DOUBLE
22556: EQUAL
22557: IFTRUE 22561
22559: GO 22635
22561: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22562: LD_ADDR_VAR 0 2
22566: PUSH
22567: LD_INT 22
22569: PUSH
22570: LD_OWVAR 2
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 30
22581: PUSH
22582: LD_INT 29
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PPUSH
22593: CALL_OW 69
22597: ST_TO_ADDR
// if not tmp then
22598: LD_VAR 0 2
22602: NOT
22603: IFFALSE 22607
// exit ;
22605: GO 22657
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22607: LD_VAR 0 2
22611: PUSH
22612: LD_INT 1
22614: ARRAY
22615: PPUSH
22616: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22620: LD_VAR 0 2
22624: PUSH
22625: LD_INT 1
22627: ARRAY
22628: PPUSH
22629: CALL_OW 65
// end ; 5 .. 7 :
22633: GO 22657
22635: LD_INT 5
22637: DOUBLE
22638: GREATEREQUAL
22639: IFFALSE 22647
22641: LD_INT 7
22643: DOUBLE
22644: LESSEQUAL
22645: IFTRUE 22649
22647: GO 22656
22649: POP
// StreamSibBomb ; end ;
22650: CALL 18894 0 0
22654: GO 22657
22656: POP
// end ;
22657: PPOPN 3
22659: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22660: LD_EXP 47
22664: PUSH
22665: LD_EXP 97
22669: AND
22670: IFFALSE 22826
22672: GO 22674
22674: DISABLE
22675: LD_INT 0
22677: PPUSH
22678: PPUSH
22679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22680: LD_ADDR_VAR 0 2
22684: PUSH
22685: LD_INT 81
22687: PUSH
22688: LD_OWVAR 2
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 2
22699: PUSH
22700: LD_INT 21
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 21
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: LIST
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PPUSH
22729: CALL_OW 69
22733: ST_TO_ADDR
// if not tmp then
22734: LD_VAR 0 2
22738: NOT
22739: IFFALSE 22743
// exit ;
22741: GO 22826
// p := 0 ;
22743: LD_ADDR_VAR 0 3
22747: PUSH
22748: LD_INT 0
22750: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22751: LD_INT 35
22753: PPUSH
22754: CALL_OW 67
// p := p + 1 ;
22758: LD_ADDR_VAR 0 3
22762: PUSH
22763: LD_VAR 0 3
22767: PUSH
22768: LD_INT 1
22770: PLUS
22771: ST_TO_ADDR
// for i in tmp do
22772: LD_ADDR_VAR 0 1
22776: PUSH
22777: LD_VAR 0 2
22781: PUSH
22782: FOR_IN
22783: IFFALSE 22814
// if GetLives ( i ) < 1000 then
22785: LD_VAR 0 1
22789: PPUSH
22790: CALL_OW 256
22794: PUSH
22795: LD_INT 1000
22797: LESS
22798: IFFALSE 22812
// SetLives ( i , 1000 ) ;
22800: LD_VAR 0 1
22804: PPUSH
22805: LD_INT 1000
22807: PPUSH
22808: CALL_OW 234
22812: GO 22782
22814: POP
22815: POP
// until p > 20 ;
22816: LD_VAR 0 3
22820: PUSH
22821: LD_INT 20
22823: GREATER
22824: IFFALSE 22751
// end ;
22826: PPOPN 3
22828: END
// every 0 0$1 trigger StreamModeActive and sTime do
22829: LD_EXP 47
22833: PUSH
22834: LD_EXP 98
22838: AND
22839: IFFALSE 22874
22841: GO 22843
22843: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22844: LD_INT 28
22846: PPUSH
22847: LD_OWVAR 2
22851: PPUSH
22852: LD_INT 2
22854: PPUSH
22855: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22859: LD_INT 30
22861: PPUSH
22862: LD_OWVAR 2
22866: PPUSH
22867: LD_INT 2
22869: PPUSH
22870: CALL_OW 322
// end ;
22874: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22875: LD_EXP 47
22879: PUSH
22880: LD_EXP 99
22884: AND
22885: IFFALSE 23006
22887: GO 22889
22889: DISABLE
22890: LD_INT 0
22892: PPUSH
22893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22894: LD_ADDR_VAR 0 2
22898: PUSH
22899: LD_INT 22
22901: PUSH
22902: LD_OWVAR 2
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 21
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 3
22923: PUSH
22924: LD_INT 23
22926: PUSH
22927: LD_INT 0
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: LIST
22942: PPUSH
22943: CALL_OW 69
22947: ST_TO_ADDR
// if not tmp then
22948: LD_VAR 0 2
22952: NOT
22953: IFFALSE 22957
// exit ;
22955: GO 23006
// for i in tmp do
22957: LD_ADDR_VAR 0 1
22961: PUSH
22962: LD_VAR 0 2
22966: PUSH
22967: FOR_IN
22968: IFFALSE 23004
// begin if Crawls ( i ) then
22970: LD_VAR 0 1
22974: PPUSH
22975: CALL_OW 318
22979: IFFALSE 22990
// ComWalk ( i ) ;
22981: LD_VAR 0 1
22985: PPUSH
22986: CALL_OW 138
// SetClass ( i , 2 ) ;
22990: LD_VAR 0 1
22994: PPUSH
22995: LD_INT 2
22997: PPUSH
22998: CALL_OW 336
// end ;
23002: GO 22967
23004: POP
23005: POP
// end ;
23006: PPOPN 2
23008: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23009: LD_EXP 47
23013: PUSH
23014: LD_EXP 100
23018: AND
23019: IFFALSE 23307
23021: GO 23023
23023: DISABLE
23024: LD_INT 0
23026: PPUSH
23027: PPUSH
23028: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23029: LD_OWVAR 2
23033: PPUSH
23034: LD_INT 9
23036: PPUSH
23037: LD_INT 1
23039: PPUSH
23040: LD_INT 1
23042: PPUSH
23043: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23047: LD_INT 9
23049: PPUSH
23050: LD_OWVAR 2
23054: PPUSH
23055: CALL_OW 343
// uc_side := 9 ;
23059: LD_ADDR_OWVAR 20
23063: PUSH
23064: LD_INT 9
23066: ST_TO_ADDR
// uc_nation := 2 ;
23067: LD_ADDR_OWVAR 21
23071: PUSH
23072: LD_INT 2
23074: ST_TO_ADDR
// hc_name := Dark Warrior ;
23075: LD_ADDR_OWVAR 26
23079: PUSH
23080: LD_STRING Dark Warrior
23082: ST_TO_ADDR
// hc_gallery :=  ;
23083: LD_ADDR_OWVAR 33
23087: PUSH
23088: LD_STRING 
23090: ST_TO_ADDR
// hc_noskilllimit := true ;
23091: LD_ADDR_OWVAR 76
23095: PUSH
23096: LD_INT 1
23098: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23099: LD_ADDR_OWVAR 31
23103: PUSH
23104: LD_INT 30
23106: PUSH
23107: LD_INT 30
23109: PUSH
23110: LD_INT 30
23112: PUSH
23113: LD_INT 30
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: ST_TO_ADDR
// un := CreateHuman ;
23122: LD_ADDR_VAR 0 3
23126: PUSH
23127: CALL_OW 44
23131: ST_TO_ADDR
// hc_noskilllimit := false ;
23132: LD_ADDR_OWVAR 76
23136: PUSH
23137: LD_INT 0
23139: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23140: LD_VAR 0 3
23144: PPUSH
23145: LD_INT 1
23147: PPUSH
23148: CALL_OW 51
// ToLua ( playRanger() ) ;
23152: LD_STRING playRanger()
23154: PPUSH
23155: CALL_OW 559
// p := 0 ;
23159: LD_ADDR_VAR 0 2
23163: PUSH
23164: LD_INT 0
23166: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23167: LD_INT 35
23169: PPUSH
23170: CALL_OW 67
// p := p + 1 ;
23174: LD_ADDR_VAR 0 2
23178: PUSH
23179: LD_VAR 0 2
23183: PUSH
23184: LD_INT 1
23186: PLUS
23187: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23188: LD_VAR 0 3
23192: PPUSH
23193: CALL_OW 256
23197: PUSH
23198: LD_INT 1000
23200: LESS
23201: IFFALSE 23215
// SetLives ( un , 1000 ) ;
23203: LD_VAR 0 3
23207: PPUSH
23208: LD_INT 1000
23210: PPUSH
23211: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23215: LD_VAR 0 3
23219: PPUSH
23220: LD_INT 81
23222: PUSH
23223: LD_OWVAR 2
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 91
23234: PUSH
23235: LD_VAR 0 3
23239: PUSH
23240: LD_INT 30
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: LIST
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PPUSH
23252: CALL_OW 69
23256: PPUSH
23257: LD_VAR 0 3
23261: PPUSH
23262: CALL_OW 74
23266: PPUSH
23267: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23271: LD_VAR 0 2
23275: PUSH
23276: LD_INT 80
23278: GREATER
23279: PUSH
23280: LD_VAR 0 3
23284: PPUSH
23285: CALL_OW 301
23289: OR
23290: IFFALSE 23167
// if un then
23292: LD_VAR 0 3
23296: IFFALSE 23307
// RemoveUnit ( un ) ;
23298: LD_VAR 0 3
23302: PPUSH
23303: CALL_OW 64
// end ;
23307: PPOPN 3
23309: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23310: LD_EXP 101
23314: IFFALSE 23430
23316: GO 23318
23318: DISABLE
23319: LD_INT 0
23321: PPUSH
23322: PPUSH
23323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23324: LD_ADDR_VAR 0 2
23328: PUSH
23329: LD_INT 81
23331: PUSH
23332: LD_OWVAR 2
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 21
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PPUSH
23355: CALL_OW 69
23359: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23360: LD_STRING playComputer()
23362: PPUSH
23363: CALL_OW 559
// if not tmp then
23367: LD_VAR 0 2
23371: NOT
23372: IFFALSE 23376
// exit ;
23374: GO 23430
// for i in tmp do
23376: LD_ADDR_VAR 0 1
23380: PUSH
23381: LD_VAR 0 2
23385: PUSH
23386: FOR_IN
23387: IFFALSE 23428
// for j := 1 to 4 do
23389: LD_ADDR_VAR 0 3
23393: PUSH
23394: DOUBLE
23395: LD_INT 1
23397: DEC
23398: ST_TO_ADDR
23399: LD_INT 4
23401: PUSH
23402: FOR_TO
23403: IFFALSE 23424
// SetSkill ( i , j , 10 ) ;
23405: LD_VAR 0 1
23409: PPUSH
23410: LD_VAR 0 3
23414: PPUSH
23415: LD_INT 10
23417: PPUSH
23418: CALL_OW 237
23422: GO 23402
23424: POP
23425: POP
23426: GO 23386
23428: POP
23429: POP
// end ;
23430: PPOPN 3
23432: END
// every 0 0$1 trigger s30 do var i , tmp ;
23433: LD_EXP 102
23437: IFFALSE 23506
23439: GO 23441
23441: DISABLE
23442: LD_INT 0
23444: PPUSH
23445: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23446: LD_ADDR_VAR 0 2
23450: PUSH
23451: LD_INT 22
23453: PUSH
23454: LD_OWVAR 2
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PPUSH
23463: CALL_OW 69
23467: ST_TO_ADDR
// if not tmp then
23468: LD_VAR 0 2
23472: NOT
23473: IFFALSE 23477
// exit ;
23475: GO 23506
// for i in tmp do
23477: LD_ADDR_VAR 0 1
23481: PUSH
23482: LD_VAR 0 2
23486: PUSH
23487: FOR_IN
23488: IFFALSE 23504
// SetLives ( i , 300 ) ;
23490: LD_VAR 0 1
23494: PPUSH
23495: LD_INT 300
23497: PPUSH
23498: CALL_OW 234
23502: GO 23487
23504: POP
23505: POP
// end ;
23506: PPOPN 2
23508: END
// every 0 0$1 trigger s60 do var i , tmp ;
23509: LD_EXP 103
23513: IFFALSE 23582
23515: GO 23517
23517: DISABLE
23518: LD_INT 0
23520: PPUSH
23521: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23522: LD_ADDR_VAR 0 2
23526: PUSH
23527: LD_INT 22
23529: PUSH
23530: LD_OWVAR 2
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PPUSH
23539: CALL_OW 69
23543: ST_TO_ADDR
// if not tmp then
23544: LD_VAR 0 2
23548: NOT
23549: IFFALSE 23553
// exit ;
23551: GO 23582
// for i in tmp do
23553: LD_ADDR_VAR 0 1
23557: PUSH
23558: LD_VAR 0 2
23562: PUSH
23563: FOR_IN
23564: IFFALSE 23580
// SetLives ( i , 600 ) ;
23566: LD_VAR 0 1
23570: PPUSH
23571: LD_INT 600
23573: PPUSH
23574: CALL_OW 234
23578: GO 23563
23580: POP
23581: POP
// end ;
23582: PPOPN 2
23584: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23585: LD_INT 0
23587: PPUSH
// case cmd of 301 :
23588: LD_VAR 0 1
23592: PUSH
23593: LD_INT 301
23595: DOUBLE
23596: EQUAL
23597: IFTRUE 23601
23599: GO 23633
23601: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23602: LD_VAR 0 6
23606: PPUSH
23607: LD_VAR 0 7
23611: PPUSH
23612: LD_VAR 0 8
23616: PPUSH
23617: LD_VAR 0 4
23621: PPUSH
23622: LD_VAR 0 5
23626: PPUSH
23627: CALL 24842 0 5
23631: GO 23754
23633: LD_INT 302
23635: DOUBLE
23636: EQUAL
23637: IFTRUE 23641
23639: GO 23678
23641: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23642: LD_VAR 0 6
23646: PPUSH
23647: LD_VAR 0 7
23651: PPUSH
23652: LD_VAR 0 8
23656: PPUSH
23657: LD_VAR 0 9
23661: PPUSH
23662: LD_VAR 0 4
23666: PPUSH
23667: LD_VAR 0 5
23671: PPUSH
23672: CALL 24933 0 6
23676: GO 23754
23678: LD_INT 303
23680: DOUBLE
23681: EQUAL
23682: IFTRUE 23686
23684: GO 23723
23686: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23687: LD_VAR 0 6
23691: PPUSH
23692: LD_VAR 0 7
23696: PPUSH
23697: LD_VAR 0 8
23701: PPUSH
23702: LD_VAR 0 9
23706: PPUSH
23707: LD_VAR 0 4
23711: PPUSH
23712: LD_VAR 0 5
23716: PPUSH
23717: CALL 23759 0 6
23721: GO 23754
23723: LD_INT 304
23725: DOUBLE
23726: EQUAL
23727: IFTRUE 23731
23729: GO 23753
23731: POP
// hHackTeleport ( unit , x , y ) ; end ;
23732: LD_VAR 0 2
23736: PPUSH
23737: LD_VAR 0 4
23741: PPUSH
23742: LD_VAR 0 5
23746: PPUSH
23747: CALL 25526 0 3
23751: GO 23754
23753: POP
// end ;
23754: LD_VAR 0 12
23758: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23759: LD_INT 0
23761: PPUSH
23762: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23763: LD_VAR 0 1
23767: PUSH
23768: LD_INT 1
23770: LESS
23771: PUSH
23772: LD_VAR 0 1
23776: PUSH
23777: LD_INT 3
23779: GREATER
23780: OR
23781: PUSH
23782: LD_VAR 0 5
23786: PPUSH
23787: LD_VAR 0 6
23791: PPUSH
23792: CALL_OW 428
23796: OR
23797: IFFALSE 23801
// exit ;
23799: GO 24529
// uc_side := your_side ;
23801: LD_ADDR_OWVAR 20
23805: PUSH
23806: LD_OWVAR 2
23810: ST_TO_ADDR
// uc_nation := nation ;
23811: LD_ADDR_OWVAR 21
23815: PUSH
23816: LD_VAR 0 1
23820: ST_TO_ADDR
// bc_level = 1 ;
23821: LD_ADDR_OWVAR 43
23825: PUSH
23826: LD_INT 1
23828: ST_TO_ADDR
// case btype of 1 :
23829: LD_VAR 0 2
23833: PUSH
23834: LD_INT 1
23836: DOUBLE
23837: EQUAL
23838: IFTRUE 23842
23840: GO 23853
23842: POP
// bc_type := b_depot ; 2 :
23843: LD_ADDR_OWVAR 42
23847: PUSH
23848: LD_INT 0
23850: ST_TO_ADDR
23851: GO 24473
23853: LD_INT 2
23855: DOUBLE
23856: EQUAL
23857: IFTRUE 23861
23859: GO 23872
23861: POP
// bc_type := b_warehouse ; 3 :
23862: LD_ADDR_OWVAR 42
23866: PUSH
23867: LD_INT 1
23869: ST_TO_ADDR
23870: GO 24473
23872: LD_INT 3
23874: DOUBLE
23875: EQUAL
23876: IFTRUE 23880
23878: GO 23891
23880: POP
// bc_type := b_lab ; 4 .. 9 :
23881: LD_ADDR_OWVAR 42
23885: PUSH
23886: LD_INT 6
23888: ST_TO_ADDR
23889: GO 24473
23891: LD_INT 4
23893: DOUBLE
23894: GREATEREQUAL
23895: IFFALSE 23903
23897: LD_INT 9
23899: DOUBLE
23900: LESSEQUAL
23901: IFTRUE 23905
23903: GO 23965
23905: POP
// begin bc_type := b_lab_half ;
23906: LD_ADDR_OWVAR 42
23910: PUSH
23911: LD_INT 7
23913: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23914: LD_ADDR_OWVAR 44
23918: PUSH
23919: LD_INT 10
23921: PUSH
23922: LD_INT 11
23924: PUSH
23925: LD_INT 12
23927: PUSH
23928: LD_INT 15
23930: PUSH
23931: LD_INT 14
23933: PUSH
23934: LD_INT 13
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: PUSH
23945: LD_VAR 0 2
23949: PUSH
23950: LD_INT 3
23952: MINUS
23953: ARRAY
23954: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23955: LD_ADDR_OWVAR 45
23959: PUSH
23960: LD_INT 9
23962: ST_TO_ADDR
// end ; 10 .. 13 :
23963: GO 24473
23965: LD_INT 10
23967: DOUBLE
23968: GREATEREQUAL
23969: IFFALSE 23977
23971: LD_INT 13
23973: DOUBLE
23974: LESSEQUAL
23975: IFTRUE 23979
23977: GO 24056
23979: POP
// begin bc_type := b_lab_full ;
23980: LD_ADDR_OWVAR 42
23984: PUSH
23985: LD_INT 8
23987: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23988: LD_ADDR_OWVAR 44
23992: PUSH
23993: LD_INT 10
23995: PUSH
23996: LD_INT 12
23998: PUSH
23999: LD_INT 14
24001: PUSH
24002: LD_INT 13
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: PUSH
24011: LD_VAR 0 2
24015: PUSH
24016: LD_INT 9
24018: MINUS
24019: ARRAY
24020: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24021: LD_ADDR_OWVAR 45
24025: PUSH
24026: LD_INT 11
24028: PUSH
24029: LD_INT 15
24031: PUSH
24032: LD_INT 12
24034: PUSH
24035: LD_INT 15
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: PUSH
24044: LD_VAR 0 2
24048: PUSH
24049: LD_INT 9
24051: MINUS
24052: ARRAY
24053: ST_TO_ADDR
// end ; 14 :
24054: GO 24473
24056: LD_INT 14
24058: DOUBLE
24059: EQUAL
24060: IFTRUE 24064
24062: GO 24075
24064: POP
// bc_type := b_workshop ; 15 :
24065: LD_ADDR_OWVAR 42
24069: PUSH
24070: LD_INT 2
24072: ST_TO_ADDR
24073: GO 24473
24075: LD_INT 15
24077: DOUBLE
24078: EQUAL
24079: IFTRUE 24083
24081: GO 24094
24083: POP
// bc_type := b_factory ; 16 :
24084: LD_ADDR_OWVAR 42
24088: PUSH
24089: LD_INT 3
24091: ST_TO_ADDR
24092: GO 24473
24094: LD_INT 16
24096: DOUBLE
24097: EQUAL
24098: IFTRUE 24102
24100: GO 24113
24102: POP
// bc_type := b_ext_gun ; 17 :
24103: LD_ADDR_OWVAR 42
24107: PUSH
24108: LD_INT 17
24110: ST_TO_ADDR
24111: GO 24473
24113: LD_INT 17
24115: DOUBLE
24116: EQUAL
24117: IFTRUE 24121
24119: GO 24149
24121: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24122: LD_ADDR_OWVAR 42
24126: PUSH
24127: LD_INT 19
24129: PUSH
24130: LD_INT 23
24132: PUSH
24133: LD_INT 19
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: LIST
24140: PUSH
24141: LD_VAR 0 1
24145: ARRAY
24146: ST_TO_ADDR
24147: GO 24473
24149: LD_INT 18
24151: DOUBLE
24152: EQUAL
24153: IFTRUE 24157
24155: GO 24168
24157: POP
// bc_type := b_ext_radar ; 19 :
24158: LD_ADDR_OWVAR 42
24162: PUSH
24163: LD_INT 20
24165: ST_TO_ADDR
24166: GO 24473
24168: LD_INT 19
24170: DOUBLE
24171: EQUAL
24172: IFTRUE 24176
24174: GO 24187
24176: POP
// bc_type := b_ext_radio ; 20 :
24177: LD_ADDR_OWVAR 42
24181: PUSH
24182: LD_INT 22
24184: ST_TO_ADDR
24185: GO 24473
24187: LD_INT 20
24189: DOUBLE
24190: EQUAL
24191: IFTRUE 24195
24193: GO 24206
24195: POP
// bc_type := b_ext_siberium ; 21 :
24196: LD_ADDR_OWVAR 42
24200: PUSH
24201: LD_INT 21
24203: ST_TO_ADDR
24204: GO 24473
24206: LD_INT 21
24208: DOUBLE
24209: EQUAL
24210: IFTRUE 24214
24212: GO 24225
24214: POP
// bc_type := b_ext_computer ; 22 :
24215: LD_ADDR_OWVAR 42
24219: PUSH
24220: LD_INT 24
24222: ST_TO_ADDR
24223: GO 24473
24225: LD_INT 22
24227: DOUBLE
24228: EQUAL
24229: IFTRUE 24233
24231: GO 24244
24233: POP
// bc_type := b_ext_track ; 23 :
24234: LD_ADDR_OWVAR 42
24238: PUSH
24239: LD_INT 16
24241: ST_TO_ADDR
24242: GO 24473
24244: LD_INT 23
24246: DOUBLE
24247: EQUAL
24248: IFTRUE 24252
24250: GO 24263
24252: POP
// bc_type := b_ext_laser ; 24 :
24253: LD_ADDR_OWVAR 42
24257: PUSH
24258: LD_INT 25
24260: ST_TO_ADDR
24261: GO 24473
24263: LD_INT 24
24265: DOUBLE
24266: EQUAL
24267: IFTRUE 24271
24269: GO 24282
24271: POP
// bc_type := b_control_tower ; 25 :
24272: LD_ADDR_OWVAR 42
24276: PUSH
24277: LD_INT 36
24279: ST_TO_ADDR
24280: GO 24473
24282: LD_INT 25
24284: DOUBLE
24285: EQUAL
24286: IFTRUE 24290
24288: GO 24301
24290: POP
// bc_type := b_breastwork ; 26 :
24291: LD_ADDR_OWVAR 42
24295: PUSH
24296: LD_INT 31
24298: ST_TO_ADDR
24299: GO 24473
24301: LD_INT 26
24303: DOUBLE
24304: EQUAL
24305: IFTRUE 24309
24307: GO 24320
24309: POP
// bc_type := b_bunker ; 27 :
24310: LD_ADDR_OWVAR 42
24314: PUSH
24315: LD_INT 32
24317: ST_TO_ADDR
24318: GO 24473
24320: LD_INT 27
24322: DOUBLE
24323: EQUAL
24324: IFTRUE 24328
24326: GO 24339
24328: POP
// bc_type := b_turret ; 28 :
24329: LD_ADDR_OWVAR 42
24333: PUSH
24334: LD_INT 33
24336: ST_TO_ADDR
24337: GO 24473
24339: LD_INT 28
24341: DOUBLE
24342: EQUAL
24343: IFTRUE 24347
24345: GO 24358
24347: POP
// bc_type := b_armoury ; 29 :
24348: LD_ADDR_OWVAR 42
24352: PUSH
24353: LD_INT 4
24355: ST_TO_ADDR
24356: GO 24473
24358: LD_INT 29
24360: DOUBLE
24361: EQUAL
24362: IFTRUE 24366
24364: GO 24377
24366: POP
// bc_type := b_barracks ; 30 :
24367: LD_ADDR_OWVAR 42
24371: PUSH
24372: LD_INT 5
24374: ST_TO_ADDR
24375: GO 24473
24377: LD_INT 30
24379: DOUBLE
24380: EQUAL
24381: IFTRUE 24385
24383: GO 24396
24385: POP
// bc_type := b_solar_power ; 31 :
24386: LD_ADDR_OWVAR 42
24390: PUSH
24391: LD_INT 27
24393: ST_TO_ADDR
24394: GO 24473
24396: LD_INT 31
24398: DOUBLE
24399: EQUAL
24400: IFTRUE 24404
24402: GO 24415
24404: POP
// bc_type := b_oil_power ; 32 :
24405: LD_ADDR_OWVAR 42
24409: PUSH
24410: LD_INT 26
24412: ST_TO_ADDR
24413: GO 24473
24415: LD_INT 32
24417: DOUBLE
24418: EQUAL
24419: IFTRUE 24423
24421: GO 24434
24423: POP
// bc_type := b_siberite_power ; 33 :
24424: LD_ADDR_OWVAR 42
24428: PUSH
24429: LD_INT 28
24431: ST_TO_ADDR
24432: GO 24473
24434: LD_INT 33
24436: DOUBLE
24437: EQUAL
24438: IFTRUE 24442
24440: GO 24453
24442: POP
// bc_type := b_oil_mine ; 34 :
24443: LD_ADDR_OWVAR 42
24447: PUSH
24448: LD_INT 29
24450: ST_TO_ADDR
24451: GO 24473
24453: LD_INT 34
24455: DOUBLE
24456: EQUAL
24457: IFTRUE 24461
24459: GO 24472
24461: POP
// bc_type := b_siberite_mine ; end ;
24462: LD_ADDR_OWVAR 42
24466: PUSH
24467: LD_INT 30
24469: ST_TO_ADDR
24470: GO 24473
24472: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24473: LD_ADDR_VAR 0 8
24477: PUSH
24478: LD_VAR 0 5
24482: PPUSH
24483: LD_VAR 0 6
24487: PPUSH
24488: LD_VAR 0 3
24492: PPUSH
24493: CALL_OW 47
24497: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24498: LD_OWVAR 42
24502: PUSH
24503: LD_INT 32
24505: PUSH
24506: LD_INT 33
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: IN
24513: IFFALSE 24529
// PlaceWeaponTurret ( b , weapon ) ;
24515: LD_VAR 0 8
24519: PPUSH
24520: LD_VAR 0 4
24524: PPUSH
24525: CALL_OW 431
// end ;
24529: LD_VAR 0 7
24533: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24534: LD_INT 0
24536: PPUSH
24537: PPUSH
24538: PPUSH
24539: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24540: LD_ADDR_VAR 0 4
24544: PUSH
24545: LD_INT 22
24547: PUSH
24548: LD_OWVAR 2
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 2
24559: PUSH
24560: LD_INT 30
24562: PUSH
24563: LD_INT 0
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 30
24572: PUSH
24573: LD_INT 1
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: LIST
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PPUSH
24589: CALL_OW 69
24593: ST_TO_ADDR
// if not tmp then
24594: LD_VAR 0 4
24598: NOT
24599: IFFALSE 24603
// exit ;
24601: GO 24662
// for i in tmp do
24603: LD_ADDR_VAR 0 2
24607: PUSH
24608: LD_VAR 0 4
24612: PUSH
24613: FOR_IN
24614: IFFALSE 24660
// for j = 1 to 3 do
24616: LD_ADDR_VAR 0 3
24620: PUSH
24621: DOUBLE
24622: LD_INT 1
24624: DEC
24625: ST_TO_ADDR
24626: LD_INT 3
24628: PUSH
24629: FOR_TO
24630: IFFALSE 24656
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24632: LD_VAR 0 2
24636: PPUSH
24637: CALL_OW 274
24641: PPUSH
24642: LD_VAR 0 3
24646: PPUSH
24647: LD_INT 99999
24649: PPUSH
24650: CALL_OW 277
24654: GO 24629
24656: POP
24657: POP
24658: GO 24613
24660: POP
24661: POP
// end ;
24662: LD_VAR 0 1
24666: RET
// export function hHackSetLevel10 ; var i , j ; begin
24667: LD_INT 0
24669: PPUSH
24670: PPUSH
24671: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24672: LD_ADDR_VAR 0 2
24676: PUSH
24677: LD_INT 21
24679: PUSH
24680: LD_INT 1
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PPUSH
24687: CALL_OW 69
24691: PUSH
24692: FOR_IN
24693: IFFALSE 24745
// if IsSelected ( i ) then
24695: LD_VAR 0 2
24699: PPUSH
24700: CALL_OW 306
24704: IFFALSE 24743
// begin for j := 1 to 4 do
24706: LD_ADDR_VAR 0 3
24710: PUSH
24711: DOUBLE
24712: LD_INT 1
24714: DEC
24715: ST_TO_ADDR
24716: LD_INT 4
24718: PUSH
24719: FOR_TO
24720: IFFALSE 24741
// SetSkill ( i , j , 10 ) ;
24722: LD_VAR 0 2
24726: PPUSH
24727: LD_VAR 0 3
24731: PPUSH
24732: LD_INT 10
24734: PPUSH
24735: CALL_OW 237
24739: GO 24719
24741: POP
24742: POP
// end ;
24743: GO 24692
24745: POP
24746: POP
// end ;
24747: LD_VAR 0 1
24751: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24752: LD_INT 0
24754: PPUSH
24755: PPUSH
24756: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24757: LD_ADDR_VAR 0 2
24761: PUSH
24762: LD_INT 22
24764: PUSH
24765: LD_OWVAR 2
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 21
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PPUSH
24788: CALL_OW 69
24792: PUSH
24793: FOR_IN
24794: IFFALSE 24835
// begin for j := 1 to 4 do
24796: LD_ADDR_VAR 0 3
24800: PUSH
24801: DOUBLE
24802: LD_INT 1
24804: DEC
24805: ST_TO_ADDR
24806: LD_INT 4
24808: PUSH
24809: FOR_TO
24810: IFFALSE 24831
// SetSkill ( i , j , 10 ) ;
24812: LD_VAR 0 2
24816: PPUSH
24817: LD_VAR 0 3
24821: PPUSH
24822: LD_INT 10
24824: PPUSH
24825: CALL_OW 237
24829: GO 24809
24831: POP
24832: POP
// end ;
24833: GO 24793
24835: POP
24836: POP
// end ;
24837: LD_VAR 0 1
24841: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24842: LD_INT 0
24844: PPUSH
// uc_side := your_side ;
24845: LD_ADDR_OWVAR 20
24849: PUSH
24850: LD_OWVAR 2
24854: ST_TO_ADDR
// uc_nation := nation ;
24855: LD_ADDR_OWVAR 21
24859: PUSH
24860: LD_VAR 0 1
24864: ST_TO_ADDR
// InitHc ;
24865: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24869: LD_INT 0
24871: PPUSH
24872: LD_VAR 0 2
24876: PPUSH
24877: LD_VAR 0 3
24881: PPUSH
24882: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24886: LD_VAR 0 4
24890: PPUSH
24891: LD_VAR 0 5
24895: PPUSH
24896: CALL_OW 428
24900: PUSH
24901: LD_INT 0
24903: EQUAL
24904: IFFALSE 24928
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24906: CALL_OW 44
24910: PPUSH
24911: LD_VAR 0 4
24915: PPUSH
24916: LD_VAR 0 5
24920: PPUSH
24921: LD_INT 1
24923: PPUSH
24924: CALL_OW 48
// end ;
24928: LD_VAR 0 6
24932: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24933: LD_INT 0
24935: PPUSH
24936: PPUSH
// uc_side := your_side ;
24937: LD_ADDR_OWVAR 20
24941: PUSH
24942: LD_OWVAR 2
24946: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24947: LD_VAR 0 1
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: LD_INT 2
24957: PUSH
24958: LD_INT 3
24960: PUSH
24961: LD_INT 4
24963: PUSH
24964: LD_INT 5
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: IN
24974: IFFALSE 24986
// uc_nation := nation_american else
24976: LD_ADDR_OWVAR 21
24980: PUSH
24981: LD_INT 1
24983: ST_TO_ADDR
24984: GO 25029
// if chassis in [ 11 , 12 , 13 , 14 ] then
24986: LD_VAR 0 1
24990: PUSH
24991: LD_INT 11
24993: PUSH
24994: LD_INT 12
24996: PUSH
24997: LD_INT 13
24999: PUSH
25000: LD_INT 14
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: IN
25009: IFFALSE 25021
// uc_nation := nation_arabian else
25011: LD_ADDR_OWVAR 21
25015: PUSH
25016: LD_INT 2
25018: ST_TO_ADDR
25019: GO 25029
// uc_nation := nation_russian ;
25021: LD_ADDR_OWVAR 21
25025: PUSH
25026: LD_INT 3
25028: ST_TO_ADDR
// vc_chassis := chassis ;
25029: LD_ADDR_OWVAR 37
25033: PUSH
25034: LD_VAR 0 1
25038: ST_TO_ADDR
// vc_engine := engine ;
25039: LD_ADDR_OWVAR 39
25043: PUSH
25044: LD_VAR 0 2
25048: ST_TO_ADDR
// vc_control := control ;
25049: LD_ADDR_OWVAR 38
25053: PUSH
25054: LD_VAR 0 3
25058: ST_TO_ADDR
// vc_weapon := weapon ;
25059: LD_ADDR_OWVAR 40
25063: PUSH
25064: LD_VAR 0 4
25068: ST_TO_ADDR
// un := CreateVehicle ;
25069: LD_ADDR_VAR 0 8
25073: PUSH
25074: CALL_OW 45
25078: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25079: LD_VAR 0 8
25083: PPUSH
25084: LD_INT 0
25086: PPUSH
25087: LD_INT 5
25089: PPUSH
25090: CALL_OW 12
25094: PPUSH
25095: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25099: LD_VAR 0 8
25103: PPUSH
25104: LD_VAR 0 5
25108: PPUSH
25109: LD_VAR 0 6
25113: PPUSH
25114: LD_INT 1
25116: PPUSH
25117: CALL_OW 48
// end ;
25121: LD_VAR 0 7
25125: RET
// export hInvincible ; every 1 do
25126: GO 25128
25128: DISABLE
// hInvincible := [ ] ;
25129: LD_ADDR_EXP 104
25133: PUSH
25134: EMPTY
25135: ST_TO_ADDR
25136: END
// every 10 do var i ;
25137: GO 25139
25139: DISABLE
25140: LD_INT 0
25142: PPUSH
// begin enable ;
25143: ENABLE
// if not hInvincible then
25144: LD_EXP 104
25148: NOT
25149: IFFALSE 25153
// exit ;
25151: GO 25197
// for i in hInvincible do
25153: LD_ADDR_VAR 0 1
25157: PUSH
25158: LD_EXP 104
25162: PUSH
25163: FOR_IN
25164: IFFALSE 25195
// if GetLives ( i ) < 1000 then
25166: LD_VAR 0 1
25170: PPUSH
25171: CALL_OW 256
25175: PUSH
25176: LD_INT 1000
25178: LESS
25179: IFFALSE 25193
// SetLives ( i , 1000 ) ;
25181: LD_VAR 0 1
25185: PPUSH
25186: LD_INT 1000
25188: PPUSH
25189: CALL_OW 234
25193: GO 25163
25195: POP
25196: POP
// end ;
25197: PPOPN 1
25199: END
// export function hHackInvincible ; var i ; begin
25200: LD_INT 0
25202: PPUSH
25203: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25204: LD_ADDR_VAR 0 2
25208: PUSH
25209: LD_INT 2
25211: PUSH
25212: LD_INT 21
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 21
25224: PUSH
25225: LD_INT 2
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: LIST
25236: PPUSH
25237: CALL_OW 69
25241: PUSH
25242: FOR_IN
25243: IFFALSE 25304
// if IsSelected ( i ) then
25245: LD_VAR 0 2
25249: PPUSH
25250: CALL_OW 306
25254: IFFALSE 25302
// begin if i in hInvincible then
25256: LD_VAR 0 2
25260: PUSH
25261: LD_EXP 104
25265: IN
25266: IFFALSE 25286
// hInvincible := hInvincible diff i else
25268: LD_ADDR_EXP 104
25272: PUSH
25273: LD_EXP 104
25277: PUSH
25278: LD_VAR 0 2
25282: DIFF
25283: ST_TO_ADDR
25284: GO 25302
// hInvincible := hInvincible union i ;
25286: LD_ADDR_EXP 104
25290: PUSH
25291: LD_EXP 104
25295: PUSH
25296: LD_VAR 0 2
25300: UNION
25301: ST_TO_ADDR
// end ;
25302: GO 25242
25304: POP
25305: POP
// end ;
25306: LD_VAR 0 1
25310: RET
// export function hHackInvisible ; var i , j ; begin
25311: LD_INT 0
25313: PPUSH
25314: PPUSH
25315: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25316: LD_ADDR_VAR 0 2
25320: PUSH
25321: LD_INT 21
25323: PUSH
25324: LD_INT 1
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PPUSH
25331: CALL_OW 69
25335: PUSH
25336: FOR_IN
25337: IFFALSE 25361
// if IsSelected ( i ) then
25339: LD_VAR 0 2
25343: PPUSH
25344: CALL_OW 306
25348: IFFALSE 25359
// ComForceInvisible ( i ) ;
25350: LD_VAR 0 2
25354: PPUSH
25355: CALL_OW 496
25359: GO 25336
25361: POP
25362: POP
// end ;
25363: LD_VAR 0 1
25367: RET
// export function hHackChangeYourSide ; begin
25368: LD_INT 0
25370: PPUSH
// if your_side = 8 then
25371: LD_OWVAR 2
25375: PUSH
25376: LD_INT 8
25378: EQUAL
25379: IFFALSE 25391
// your_side := 0 else
25381: LD_ADDR_OWVAR 2
25385: PUSH
25386: LD_INT 0
25388: ST_TO_ADDR
25389: GO 25405
// your_side := your_side + 1 ;
25391: LD_ADDR_OWVAR 2
25395: PUSH
25396: LD_OWVAR 2
25400: PUSH
25401: LD_INT 1
25403: PLUS
25404: ST_TO_ADDR
// end ;
25405: LD_VAR 0 1
25409: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25410: LD_INT 0
25412: PPUSH
25413: PPUSH
25414: PPUSH
// for i in all_units do
25415: LD_ADDR_VAR 0 2
25419: PUSH
25420: LD_OWVAR 3
25424: PUSH
25425: FOR_IN
25426: IFFALSE 25504
// if IsSelected ( i ) then
25428: LD_VAR 0 2
25432: PPUSH
25433: CALL_OW 306
25437: IFFALSE 25502
// begin j := GetSide ( i ) ;
25439: LD_ADDR_VAR 0 3
25443: PUSH
25444: LD_VAR 0 2
25448: PPUSH
25449: CALL_OW 255
25453: ST_TO_ADDR
// if j = 8 then
25454: LD_VAR 0 3
25458: PUSH
25459: LD_INT 8
25461: EQUAL
25462: IFFALSE 25474
// j := 0 else
25464: LD_ADDR_VAR 0 3
25468: PUSH
25469: LD_INT 0
25471: ST_TO_ADDR
25472: GO 25488
// j := j + 1 ;
25474: LD_ADDR_VAR 0 3
25478: PUSH
25479: LD_VAR 0 3
25483: PUSH
25484: LD_INT 1
25486: PLUS
25487: ST_TO_ADDR
// SetSide ( i , j ) ;
25488: LD_VAR 0 2
25492: PPUSH
25493: LD_VAR 0 3
25497: PPUSH
25498: CALL_OW 235
// end ;
25502: GO 25425
25504: POP
25505: POP
// end ;
25506: LD_VAR 0 1
25510: RET
// export function hHackFog ; begin
25511: LD_INT 0
25513: PPUSH
// FogOff ( true ) ;
25514: LD_INT 1
25516: PPUSH
25517: CALL_OW 344
// end ;
25521: LD_VAR 0 1
25525: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25526: LD_INT 0
25528: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25529: LD_VAR 0 1
25533: PPUSH
25534: LD_VAR 0 2
25538: PPUSH
25539: LD_VAR 0 3
25543: PPUSH
25544: LD_INT 1
25546: PPUSH
25547: LD_INT 1
25549: PPUSH
25550: CALL_OW 483
// CenterOnXY ( x , y ) ;
25554: LD_VAR 0 2
25558: PPUSH
25559: LD_VAR 0 3
25563: PPUSH
25564: CALL_OW 84
// end ;
25568: LD_VAR 0 4
25572: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25573: LD_INT 0
25575: PPUSH
25576: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25577: LD_VAR 0 1
25581: NOT
25582: PUSH
25583: LD_VAR 0 2
25587: PPUSH
25588: LD_VAR 0 3
25592: PPUSH
25593: CALL_OW 488
25597: NOT
25598: OR
25599: PUSH
25600: LD_VAR 0 1
25604: PPUSH
25605: CALL_OW 266
25609: PUSH
25610: LD_INT 3
25612: NONEQUAL
25613: PUSH
25614: LD_VAR 0 1
25618: PPUSH
25619: CALL_OW 247
25623: PUSH
25624: LD_INT 1
25626: EQUAL
25627: NOT
25628: AND
25629: OR
25630: IFFALSE 25634
// exit ;
25632: GO 25783
// if GetType ( factory ) = unit_human then
25634: LD_VAR 0 1
25638: PPUSH
25639: CALL_OW 247
25643: PUSH
25644: LD_INT 1
25646: EQUAL
25647: IFFALSE 25664
// factory := IsInUnit ( factory ) ;
25649: LD_ADDR_VAR 0 1
25653: PUSH
25654: LD_VAR 0 1
25658: PPUSH
25659: CALL_OW 310
25663: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25664: LD_VAR 0 1
25668: PPUSH
25669: CALL_OW 266
25673: PUSH
25674: LD_INT 3
25676: NONEQUAL
25677: IFFALSE 25681
// exit ;
25679: GO 25783
// if HexInfo ( x , y ) = factory then
25681: LD_VAR 0 2
25685: PPUSH
25686: LD_VAR 0 3
25690: PPUSH
25691: CALL_OW 428
25695: PUSH
25696: LD_VAR 0 1
25700: EQUAL
25701: IFFALSE 25728
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25703: LD_ADDR_EXP 105
25707: PUSH
25708: LD_EXP 105
25712: PPUSH
25713: LD_VAR 0 1
25717: PPUSH
25718: LD_INT 0
25720: PPUSH
25721: CALL_OW 1
25725: ST_TO_ADDR
25726: GO 25779
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25728: LD_ADDR_EXP 105
25732: PUSH
25733: LD_EXP 105
25737: PPUSH
25738: LD_VAR 0 1
25742: PPUSH
25743: LD_VAR 0 1
25747: PPUSH
25748: CALL_OW 255
25752: PUSH
25753: LD_VAR 0 1
25757: PUSH
25758: LD_VAR 0 2
25762: PUSH
25763: LD_VAR 0 3
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: PPUSH
25774: CALL_OW 1
25778: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25779: CALL 25788 0 0
// end ;
25783: LD_VAR 0 4
25787: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25788: LD_INT 0
25790: PPUSH
25791: PPUSH
25792: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25793: LD_STRING resetFactoryWaypoint();
25795: PPUSH
25796: CALL_OW 559
// if factoryWaypoints then
25800: LD_EXP 105
25804: IFFALSE 25930
// begin list := PrepareArray ( factoryWaypoints ) ;
25806: LD_ADDR_VAR 0 3
25810: PUSH
25811: LD_EXP 105
25815: PPUSH
25816: CALL 73227 0 1
25820: ST_TO_ADDR
// for i := 1 to list do
25821: LD_ADDR_VAR 0 2
25825: PUSH
25826: DOUBLE
25827: LD_INT 1
25829: DEC
25830: ST_TO_ADDR
25831: LD_VAR 0 3
25835: PUSH
25836: FOR_TO
25837: IFFALSE 25928
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25839: LD_STRING setFactoryWaypointXY(
25841: PUSH
25842: LD_VAR 0 3
25846: PUSH
25847: LD_VAR 0 2
25851: ARRAY
25852: PUSH
25853: LD_INT 1
25855: ARRAY
25856: STR
25857: PUSH
25858: LD_STRING ,
25860: STR
25861: PUSH
25862: LD_VAR 0 3
25866: PUSH
25867: LD_VAR 0 2
25871: ARRAY
25872: PUSH
25873: LD_INT 2
25875: ARRAY
25876: STR
25877: PUSH
25878: LD_STRING ,
25880: STR
25881: PUSH
25882: LD_VAR 0 3
25886: PUSH
25887: LD_VAR 0 2
25891: ARRAY
25892: PUSH
25893: LD_INT 3
25895: ARRAY
25896: STR
25897: PUSH
25898: LD_STRING ,
25900: STR
25901: PUSH
25902: LD_VAR 0 3
25906: PUSH
25907: LD_VAR 0 2
25911: ARRAY
25912: PUSH
25913: LD_INT 4
25915: ARRAY
25916: STR
25917: PUSH
25918: LD_STRING )
25920: STR
25921: PPUSH
25922: CALL_OW 559
25926: GO 25836
25928: POP
25929: POP
// end ; end ;
25930: LD_VAR 0 1
25934: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25935: LD_INT 0
25937: PPUSH
// if HexInfo ( x , y ) = warehouse then
25938: LD_VAR 0 2
25942: PPUSH
25943: LD_VAR 0 3
25947: PPUSH
25948: CALL_OW 428
25952: PUSH
25953: LD_VAR 0 1
25957: EQUAL
25958: IFFALSE 25985
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25960: LD_ADDR_EXP 106
25964: PUSH
25965: LD_EXP 106
25969: PPUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: LD_INT 0
25977: PPUSH
25978: CALL_OW 1
25982: ST_TO_ADDR
25983: GO 26036
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25985: LD_ADDR_EXP 106
25989: PUSH
25990: LD_EXP 106
25994: PPUSH
25995: LD_VAR 0 1
25999: PPUSH
26000: LD_VAR 0 1
26004: PPUSH
26005: CALL_OW 255
26009: PUSH
26010: LD_VAR 0 1
26014: PUSH
26015: LD_VAR 0 2
26019: PUSH
26020: LD_VAR 0 3
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: PPUSH
26031: CALL_OW 1
26035: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26036: CALL 26045 0 0
// end ;
26040: LD_VAR 0 4
26044: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26045: LD_INT 0
26047: PPUSH
26048: PPUSH
26049: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26050: LD_STRING resetWarehouseGatheringPoints();
26052: PPUSH
26053: CALL_OW 559
// if warehouseGatheringPoints then
26057: LD_EXP 106
26061: IFFALSE 26187
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26063: LD_ADDR_VAR 0 3
26067: PUSH
26068: LD_EXP 106
26072: PPUSH
26073: CALL 73227 0 1
26077: ST_TO_ADDR
// for i := 1 to list do
26078: LD_ADDR_VAR 0 2
26082: PUSH
26083: DOUBLE
26084: LD_INT 1
26086: DEC
26087: ST_TO_ADDR
26088: LD_VAR 0 3
26092: PUSH
26093: FOR_TO
26094: IFFALSE 26185
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26096: LD_STRING setWarehouseGatheringPointXY(
26098: PUSH
26099: LD_VAR 0 3
26103: PUSH
26104: LD_VAR 0 2
26108: ARRAY
26109: PUSH
26110: LD_INT 1
26112: ARRAY
26113: STR
26114: PUSH
26115: LD_STRING ,
26117: STR
26118: PUSH
26119: LD_VAR 0 3
26123: PUSH
26124: LD_VAR 0 2
26128: ARRAY
26129: PUSH
26130: LD_INT 2
26132: ARRAY
26133: STR
26134: PUSH
26135: LD_STRING ,
26137: STR
26138: PUSH
26139: LD_VAR 0 3
26143: PUSH
26144: LD_VAR 0 2
26148: ARRAY
26149: PUSH
26150: LD_INT 3
26152: ARRAY
26153: STR
26154: PUSH
26155: LD_STRING ,
26157: STR
26158: PUSH
26159: LD_VAR 0 3
26163: PUSH
26164: LD_VAR 0 2
26168: ARRAY
26169: PUSH
26170: LD_INT 4
26172: ARRAY
26173: STR
26174: PUSH
26175: LD_STRING )
26177: STR
26178: PPUSH
26179: CALL_OW 559
26183: GO 26093
26185: POP
26186: POP
// end ; end ;
26187: LD_VAR 0 1
26191: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26192: LD_EXP 106
26196: IFFALSE 26881
26198: GO 26200
26200: DISABLE
26201: LD_INT 0
26203: PPUSH
26204: PPUSH
26205: PPUSH
26206: PPUSH
26207: PPUSH
26208: PPUSH
26209: PPUSH
26210: PPUSH
26211: PPUSH
// begin enable ;
26212: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26213: LD_ADDR_VAR 0 3
26217: PUSH
26218: LD_EXP 106
26222: PPUSH
26223: CALL 73227 0 1
26227: ST_TO_ADDR
// if not list then
26228: LD_VAR 0 3
26232: NOT
26233: IFFALSE 26237
// exit ;
26235: GO 26881
// for i := 1 to list do
26237: LD_ADDR_VAR 0 1
26241: PUSH
26242: DOUBLE
26243: LD_INT 1
26245: DEC
26246: ST_TO_ADDR
26247: LD_VAR 0 3
26251: PUSH
26252: FOR_TO
26253: IFFALSE 26879
// begin depot := list [ i ] [ 2 ] ;
26255: LD_ADDR_VAR 0 8
26259: PUSH
26260: LD_VAR 0 3
26264: PUSH
26265: LD_VAR 0 1
26269: ARRAY
26270: PUSH
26271: LD_INT 2
26273: ARRAY
26274: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26275: LD_ADDR_VAR 0 5
26279: PUSH
26280: LD_VAR 0 3
26284: PUSH
26285: LD_VAR 0 1
26289: ARRAY
26290: PUSH
26291: LD_INT 1
26293: ARRAY
26294: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26295: LD_VAR 0 8
26299: PPUSH
26300: CALL_OW 301
26304: PUSH
26305: LD_VAR 0 5
26309: PUSH
26310: LD_VAR 0 8
26314: PPUSH
26315: CALL_OW 255
26319: NONEQUAL
26320: OR
26321: IFFALSE 26350
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26323: LD_ADDR_EXP 106
26327: PUSH
26328: LD_EXP 106
26332: PPUSH
26333: LD_VAR 0 8
26337: PPUSH
26338: LD_INT 0
26340: PPUSH
26341: CALL_OW 1
26345: ST_TO_ADDR
// exit ;
26346: POP
26347: POP
26348: GO 26881
// end ; x := list [ i ] [ 3 ] ;
26350: LD_ADDR_VAR 0 6
26354: PUSH
26355: LD_VAR 0 3
26359: PUSH
26360: LD_VAR 0 1
26364: ARRAY
26365: PUSH
26366: LD_INT 3
26368: ARRAY
26369: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26370: LD_ADDR_VAR 0 7
26374: PUSH
26375: LD_VAR 0 3
26379: PUSH
26380: LD_VAR 0 1
26384: ARRAY
26385: PUSH
26386: LD_INT 4
26388: ARRAY
26389: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26390: LD_ADDR_VAR 0 9
26394: PUSH
26395: LD_VAR 0 6
26399: PPUSH
26400: LD_VAR 0 7
26404: PPUSH
26405: LD_INT 16
26407: PPUSH
26408: CALL 71815 0 3
26412: ST_TO_ADDR
// if not cratesNearbyPoint then
26413: LD_VAR 0 9
26417: NOT
26418: IFFALSE 26424
// exit ;
26420: POP
26421: POP
26422: GO 26881
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26424: LD_ADDR_VAR 0 4
26428: PUSH
26429: LD_INT 22
26431: PUSH
26432: LD_VAR 0 5
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 3
26443: PUSH
26444: LD_INT 60
26446: PUSH
26447: EMPTY
26448: LIST
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 91
26456: PUSH
26457: LD_VAR 0 8
26461: PUSH
26462: LD_INT 6
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 2
26472: PUSH
26473: LD_INT 25
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 25
26485: PUSH
26486: LD_INT 16
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: PPUSH
26504: CALL_OW 69
26508: PUSH
26509: LD_VAR 0 8
26513: PPUSH
26514: CALL_OW 313
26518: PPUSH
26519: LD_INT 3
26521: PUSH
26522: LD_INT 60
26524: PUSH
26525: EMPTY
26526: LIST
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 2
26534: PUSH
26535: LD_INT 25
26537: PUSH
26538: LD_INT 2
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 25
26547: PUSH
26548: LD_INT 16
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: LIST
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PPUSH
26564: CALL_OW 72
26568: UNION
26569: ST_TO_ADDR
// if tmp then
26570: LD_VAR 0 4
26574: IFFALSE 26654
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26576: LD_ADDR_VAR 0 4
26580: PUSH
26581: LD_VAR 0 4
26585: PPUSH
26586: LD_INT 3
26588: PPUSH
26589: CALL 69784 0 2
26593: ST_TO_ADDR
// for j in tmp do
26594: LD_ADDR_VAR 0 2
26598: PUSH
26599: LD_VAR 0 4
26603: PUSH
26604: FOR_IN
26605: IFFALSE 26648
// begin if IsInUnit ( j ) then
26607: LD_VAR 0 2
26611: PPUSH
26612: CALL_OW 310
26616: IFFALSE 26627
// ComExit ( j ) ;
26618: LD_VAR 0 2
26622: PPUSH
26623: CALL 69867 0 1
// AddComCollect ( j , x , y ) ;
26627: LD_VAR 0 2
26631: PPUSH
26632: LD_VAR 0 6
26636: PPUSH
26637: LD_VAR 0 7
26641: PPUSH
26642: CALL_OW 177
// end ;
26646: GO 26604
26648: POP
26649: POP
// exit ;
26650: POP
26651: POP
26652: GO 26881
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26654: LD_ADDR_VAR 0 4
26658: PUSH
26659: LD_INT 22
26661: PUSH
26662: LD_VAR 0 5
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 91
26673: PUSH
26674: LD_VAR 0 8
26678: PUSH
26679: LD_INT 8
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 2
26689: PUSH
26690: LD_INT 34
26692: PUSH
26693: LD_INT 12
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 34
26702: PUSH
26703: LD_INT 51
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 34
26712: PUSH
26713: LD_INT 32
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 34
26722: PUSH
26723: LD_INT 89
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: LIST
26741: PPUSH
26742: CALL_OW 69
26746: ST_TO_ADDR
// if tmp then
26747: LD_VAR 0 4
26751: IFFALSE 26877
// begin for j in tmp do
26753: LD_ADDR_VAR 0 2
26757: PUSH
26758: LD_VAR 0 4
26762: PUSH
26763: FOR_IN
26764: IFFALSE 26875
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26766: LD_VAR 0 2
26770: PPUSH
26771: CALL_OW 262
26775: PUSH
26776: LD_INT 3
26778: EQUAL
26779: PUSH
26780: LD_VAR 0 2
26784: PPUSH
26785: CALL_OW 261
26789: PUSH
26790: LD_INT 20
26792: GREATER
26793: OR
26794: PUSH
26795: LD_VAR 0 2
26799: PPUSH
26800: CALL_OW 314
26804: NOT
26805: AND
26806: PUSH
26807: LD_VAR 0 2
26811: PPUSH
26812: CALL_OW 263
26816: PUSH
26817: LD_INT 1
26819: NONEQUAL
26820: PUSH
26821: LD_VAR 0 2
26825: PPUSH
26826: CALL_OW 311
26830: OR
26831: AND
26832: IFFALSE 26873
// begin ComCollect ( j , x , y ) ;
26834: LD_VAR 0 2
26838: PPUSH
26839: LD_VAR 0 6
26843: PPUSH
26844: LD_VAR 0 7
26848: PPUSH
26849: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26853: LD_VAR 0 2
26857: PPUSH
26858: LD_VAR 0 8
26862: PPUSH
26863: CALL_OW 172
// exit ;
26867: POP
26868: POP
26869: POP
26870: POP
26871: GO 26881
// end ;
26873: GO 26763
26875: POP
26876: POP
// end ; end ;
26877: GO 26252
26879: POP
26880: POP
// end ; end_of_file
26881: PPOPN 9
26883: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26884: LD_INT 0
26886: PPUSH
26887: PPUSH
26888: PPUSH
26889: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26890: LD_VAR 0 1
26894: PPUSH
26895: CALL_OW 264
26899: PUSH
26900: LD_INT 91
26902: EQUAL
26903: IFFALSE 26975
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26905: LD_INT 68
26907: PPUSH
26908: LD_VAR 0 1
26912: PPUSH
26913: CALL_OW 255
26917: PPUSH
26918: CALL_OW 321
26922: PUSH
26923: LD_INT 2
26925: EQUAL
26926: IFFALSE 26938
// eff := 70 else
26928: LD_ADDR_VAR 0 4
26932: PUSH
26933: LD_INT 70
26935: ST_TO_ADDR
26936: GO 26946
// eff := 30 ;
26938: LD_ADDR_VAR 0 4
26942: PUSH
26943: LD_INT 30
26945: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26946: LD_VAR 0 1
26950: PPUSH
26951: CALL_OW 250
26955: PPUSH
26956: LD_VAR 0 1
26960: PPUSH
26961: CALL_OW 251
26965: PPUSH
26966: LD_VAR 0 4
26970: PPUSH
26971: CALL_OW 495
// end ; end ;
26975: LD_VAR 0 2
26979: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26980: LD_INT 0
26982: PPUSH
// end ;
26983: LD_VAR 0 4
26987: RET
// export function SOS_Command ( cmd ) ; begin
26988: LD_INT 0
26990: PPUSH
// end ;
26991: LD_VAR 0 2
26995: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26996: LD_INT 0
26998: PPUSH
// end ;
26999: LD_VAR 0 6
27003: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27004: LD_INT 0
27006: PPUSH
27007: PPUSH
// if not vehicle or not factory then
27008: LD_VAR 0 1
27012: NOT
27013: PUSH
27014: LD_VAR 0 2
27018: NOT
27019: OR
27020: IFFALSE 27024
// exit ;
27022: GO 27255
// if factoryWaypoints >= factory then
27024: LD_EXP 105
27028: PUSH
27029: LD_VAR 0 2
27033: GREATEREQUAL
27034: IFFALSE 27255
// if factoryWaypoints [ factory ] then
27036: LD_EXP 105
27040: PUSH
27041: LD_VAR 0 2
27045: ARRAY
27046: IFFALSE 27255
// begin if GetControl ( vehicle ) = control_manual then
27048: LD_VAR 0 1
27052: PPUSH
27053: CALL_OW 263
27057: PUSH
27058: LD_INT 1
27060: EQUAL
27061: IFFALSE 27142
// begin driver := IsDrivenBy ( vehicle ) ;
27063: LD_ADDR_VAR 0 4
27067: PUSH
27068: LD_VAR 0 1
27072: PPUSH
27073: CALL_OW 311
27077: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27078: LD_VAR 0 4
27082: PPUSH
27083: LD_EXP 105
27087: PUSH
27088: LD_VAR 0 2
27092: ARRAY
27093: PUSH
27094: LD_INT 3
27096: ARRAY
27097: PPUSH
27098: LD_EXP 105
27102: PUSH
27103: LD_VAR 0 2
27107: ARRAY
27108: PUSH
27109: LD_INT 4
27111: ARRAY
27112: PPUSH
27113: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27117: LD_VAR 0 4
27121: PPUSH
27122: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27126: LD_VAR 0 4
27130: PPUSH
27131: LD_VAR 0 2
27135: PPUSH
27136: CALL_OW 180
// end else
27140: GO 27255
// if GetControl ( vehicle ) = control_remote then
27142: LD_VAR 0 1
27146: PPUSH
27147: CALL_OW 263
27151: PUSH
27152: LD_INT 2
27154: EQUAL
27155: IFFALSE 27216
// begin wait ( 0 0$2 ) ;
27157: LD_INT 70
27159: PPUSH
27160: CALL_OW 67
// if Connect ( vehicle ) then
27164: LD_VAR 0 1
27168: PPUSH
27169: CALL 40086 0 1
27173: IFFALSE 27214
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27175: LD_VAR 0 1
27179: PPUSH
27180: LD_EXP 105
27184: PUSH
27185: LD_VAR 0 2
27189: ARRAY
27190: PUSH
27191: LD_INT 3
27193: ARRAY
27194: PPUSH
27195: LD_EXP 105
27199: PUSH
27200: LD_VAR 0 2
27204: ARRAY
27205: PUSH
27206: LD_INT 4
27208: ARRAY
27209: PPUSH
27210: CALL_OW 171
// end else
27214: GO 27255
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27216: LD_VAR 0 1
27220: PPUSH
27221: LD_EXP 105
27225: PUSH
27226: LD_VAR 0 2
27230: ARRAY
27231: PUSH
27232: LD_INT 3
27234: ARRAY
27235: PPUSH
27236: LD_EXP 105
27240: PUSH
27241: LD_VAR 0 2
27245: ARRAY
27246: PUSH
27247: LD_INT 4
27249: ARRAY
27250: PPUSH
27251: CALL_OW 171
// end ; end ;
27255: LD_VAR 0 3
27259: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27260: LD_INT 0
27262: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27263: LD_VAR 0 1
27267: PUSH
27268: LD_INT 250
27270: EQUAL
27271: PUSH
27272: LD_VAR 0 2
27276: PPUSH
27277: CALL_OW 264
27281: PUSH
27282: LD_INT 81
27284: EQUAL
27285: AND
27286: IFFALSE 27307
// MinerPlaceMine ( unit , x , y ) ;
27288: LD_VAR 0 2
27292: PPUSH
27293: LD_VAR 0 4
27297: PPUSH
27298: LD_VAR 0 5
27302: PPUSH
27303: CALL 30297 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27307: LD_VAR 0 1
27311: PUSH
27312: LD_INT 251
27314: EQUAL
27315: PUSH
27316: LD_VAR 0 2
27320: PPUSH
27321: CALL_OW 264
27325: PUSH
27326: LD_INT 81
27328: EQUAL
27329: AND
27330: IFFALSE 27351
// MinerDetonateMine ( unit , x , y ) ;
27332: LD_VAR 0 2
27336: PPUSH
27337: LD_VAR 0 4
27341: PPUSH
27342: LD_VAR 0 5
27346: PPUSH
27347: CALL 30572 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27351: LD_VAR 0 1
27355: PUSH
27356: LD_INT 252
27358: EQUAL
27359: PUSH
27360: LD_VAR 0 2
27364: PPUSH
27365: CALL_OW 264
27369: PUSH
27370: LD_INT 81
27372: EQUAL
27373: AND
27374: IFFALSE 27395
// MinerCreateMinefield ( unit , x , y ) ;
27376: LD_VAR 0 2
27380: PPUSH
27381: LD_VAR 0 4
27385: PPUSH
27386: LD_VAR 0 5
27390: PPUSH
27391: CALL 30989 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27395: LD_VAR 0 1
27399: PUSH
27400: LD_INT 253
27402: EQUAL
27403: PUSH
27404: LD_VAR 0 2
27408: PPUSH
27409: CALL_OW 257
27413: PUSH
27414: LD_INT 5
27416: EQUAL
27417: AND
27418: IFFALSE 27439
// ComBinocular ( unit , x , y ) ;
27420: LD_VAR 0 2
27424: PPUSH
27425: LD_VAR 0 4
27429: PPUSH
27430: LD_VAR 0 5
27434: PPUSH
27435: CALL 31358 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27439: LD_VAR 0 1
27443: PUSH
27444: LD_INT 254
27446: EQUAL
27447: PUSH
27448: LD_VAR 0 2
27452: PPUSH
27453: CALL_OW 264
27457: PUSH
27458: LD_INT 99
27460: EQUAL
27461: AND
27462: PUSH
27463: LD_VAR 0 3
27467: PPUSH
27468: CALL_OW 263
27472: PUSH
27473: LD_INT 3
27475: EQUAL
27476: AND
27477: IFFALSE 27493
// HackDestroyVehicle ( unit , selectedUnit ) ;
27479: LD_VAR 0 2
27483: PPUSH
27484: LD_VAR 0 3
27488: PPUSH
27489: CALL 29661 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27493: LD_VAR 0 1
27497: PUSH
27498: LD_INT 255
27500: EQUAL
27501: PUSH
27502: LD_VAR 0 2
27506: PPUSH
27507: CALL_OW 264
27511: PUSH
27512: LD_INT 14
27514: PUSH
27515: LD_INT 53
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: IN
27522: AND
27523: PUSH
27524: LD_VAR 0 4
27528: PPUSH
27529: LD_VAR 0 5
27533: PPUSH
27534: CALL_OW 488
27538: AND
27539: IFFALSE 27563
// CutTreeXYR ( unit , x , y , 12 ) ;
27541: LD_VAR 0 2
27545: PPUSH
27546: LD_VAR 0 4
27550: PPUSH
27551: LD_VAR 0 5
27555: PPUSH
27556: LD_INT 12
27558: PPUSH
27559: CALL 27658 0 4
// if cmd = 256 then
27563: LD_VAR 0 1
27567: PUSH
27568: LD_INT 256
27570: EQUAL
27571: IFFALSE 27592
// SetFactoryWaypoint ( unit , x , y ) ;
27573: LD_VAR 0 2
27577: PPUSH
27578: LD_VAR 0 4
27582: PPUSH
27583: LD_VAR 0 5
27587: PPUSH
27588: CALL 25573 0 3
// if cmd = 257 then
27592: LD_VAR 0 1
27596: PUSH
27597: LD_INT 257
27599: EQUAL
27600: IFFALSE 27621
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27602: LD_VAR 0 2
27606: PPUSH
27607: LD_VAR 0 4
27611: PPUSH
27612: LD_VAR 0 5
27616: PPUSH
27617: CALL 25935 0 3
// if cmd = 258 then
27621: LD_VAR 0 1
27625: PUSH
27626: LD_INT 258
27628: EQUAL
27629: IFFALSE 27653
// BurnTreeXYR ( unit , x , y , 8 ) ;
27631: LD_VAR 0 2
27635: PPUSH
27636: LD_VAR 0 4
27640: PPUSH
27641: LD_VAR 0 5
27645: PPUSH
27646: LD_INT 8
27648: PPUSH
27649: CALL 28052 0 4
// end ;
27653: LD_VAR 0 6
27657: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27658: LD_INT 0
27660: PPUSH
27661: PPUSH
27662: PPUSH
27663: PPUSH
27664: PPUSH
27665: PPUSH
27666: PPUSH
27667: PPUSH
27668: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27669: LD_VAR 0 1
27673: PPUSH
27674: CALL_OW 302
27678: NOT
27679: PUSH
27680: LD_VAR 0 2
27684: PPUSH
27685: LD_VAR 0 3
27689: PPUSH
27690: CALL_OW 488
27694: NOT
27695: OR
27696: PUSH
27697: LD_VAR 0 4
27701: NOT
27702: OR
27703: IFFALSE 27707
// exit ;
27705: GO 28047
// list := [ ] ;
27707: LD_ADDR_VAR 0 13
27711: PUSH
27712: EMPTY
27713: ST_TO_ADDR
// if x - r < 0 then
27714: LD_VAR 0 2
27718: PUSH
27719: LD_VAR 0 4
27723: MINUS
27724: PUSH
27725: LD_INT 0
27727: LESS
27728: IFFALSE 27740
// min_x := 0 else
27730: LD_ADDR_VAR 0 7
27734: PUSH
27735: LD_INT 0
27737: ST_TO_ADDR
27738: GO 27756
// min_x := x - r ;
27740: LD_ADDR_VAR 0 7
27744: PUSH
27745: LD_VAR 0 2
27749: PUSH
27750: LD_VAR 0 4
27754: MINUS
27755: ST_TO_ADDR
// if y - r < 0 then
27756: LD_VAR 0 3
27760: PUSH
27761: LD_VAR 0 4
27765: MINUS
27766: PUSH
27767: LD_INT 0
27769: LESS
27770: IFFALSE 27782
// min_y := 0 else
27772: LD_ADDR_VAR 0 8
27776: PUSH
27777: LD_INT 0
27779: ST_TO_ADDR
27780: GO 27798
// min_y := y - r ;
27782: LD_ADDR_VAR 0 8
27786: PUSH
27787: LD_VAR 0 3
27791: PUSH
27792: LD_VAR 0 4
27796: MINUS
27797: ST_TO_ADDR
// max_x := x + r ;
27798: LD_ADDR_VAR 0 9
27802: PUSH
27803: LD_VAR 0 2
27807: PUSH
27808: LD_VAR 0 4
27812: PLUS
27813: ST_TO_ADDR
// max_y := y + r ;
27814: LD_ADDR_VAR 0 10
27818: PUSH
27819: LD_VAR 0 3
27823: PUSH
27824: LD_VAR 0 4
27828: PLUS
27829: ST_TO_ADDR
// for _x = min_x to max_x do
27830: LD_ADDR_VAR 0 11
27834: PUSH
27835: DOUBLE
27836: LD_VAR 0 7
27840: DEC
27841: ST_TO_ADDR
27842: LD_VAR 0 9
27846: PUSH
27847: FOR_TO
27848: IFFALSE 27965
// for _y = min_y to max_y do
27850: LD_ADDR_VAR 0 12
27854: PUSH
27855: DOUBLE
27856: LD_VAR 0 8
27860: DEC
27861: ST_TO_ADDR
27862: LD_VAR 0 10
27866: PUSH
27867: FOR_TO
27868: IFFALSE 27961
// begin if not ValidHex ( _x , _y ) then
27870: LD_VAR 0 11
27874: PPUSH
27875: LD_VAR 0 12
27879: PPUSH
27880: CALL_OW 488
27884: NOT
27885: IFFALSE 27889
// continue ;
27887: GO 27867
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27889: LD_VAR 0 11
27893: PPUSH
27894: LD_VAR 0 12
27898: PPUSH
27899: CALL_OW 351
27903: PUSH
27904: LD_VAR 0 11
27908: PPUSH
27909: LD_VAR 0 12
27913: PPUSH
27914: CALL_OW 554
27918: AND
27919: IFFALSE 27959
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27921: LD_ADDR_VAR 0 13
27925: PUSH
27926: LD_VAR 0 13
27930: PPUSH
27931: LD_VAR 0 13
27935: PUSH
27936: LD_INT 1
27938: PLUS
27939: PPUSH
27940: LD_VAR 0 11
27944: PUSH
27945: LD_VAR 0 12
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PPUSH
27954: CALL_OW 2
27958: ST_TO_ADDR
// end ;
27959: GO 27867
27961: POP
27962: POP
27963: GO 27847
27965: POP
27966: POP
// if not list then
27967: LD_VAR 0 13
27971: NOT
27972: IFFALSE 27976
// exit ;
27974: GO 28047
// for i in list do
27976: LD_ADDR_VAR 0 6
27980: PUSH
27981: LD_VAR 0 13
27985: PUSH
27986: FOR_IN
27987: IFFALSE 28045
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27989: LD_VAR 0 1
27993: PPUSH
27994: LD_STRING M
27996: PUSH
27997: LD_VAR 0 6
28001: PUSH
28002: LD_INT 1
28004: ARRAY
28005: PUSH
28006: LD_VAR 0 6
28010: PUSH
28011: LD_INT 2
28013: ARRAY
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: PUSH
28036: EMPTY
28037: LIST
28038: PPUSH
28039: CALL_OW 447
28043: GO 27986
28045: POP
28046: POP
// end ;
28047: LD_VAR 0 5
28051: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28052: LD_INT 0
28054: PPUSH
28055: PPUSH
28056: PPUSH
28057: PPUSH
28058: PPUSH
28059: PPUSH
28060: PPUSH
28061: PPUSH
28062: PPUSH
28063: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28064: LD_VAR 0 1
28068: PPUSH
28069: CALL_OW 302
28073: NOT
28074: PUSH
28075: LD_VAR 0 2
28079: PPUSH
28080: LD_VAR 0 3
28084: PPUSH
28085: CALL_OW 488
28089: NOT
28090: OR
28091: PUSH
28092: LD_VAR 0 4
28096: NOT
28097: OR
28098: IFFALSE 28102
// exit ;
28100: GO 28615
// list := [ ] ;
28102: LD_ADDR_VAR 0 13
28106: PUSH
28107: EMPTY
28108: ST_TO_ADDR
// if x - r < 0 then
28109: LD_VAR 0 2
28113: PUSH
28114: LD_VAR 0 4
28118: MINUS
28119: PUSH
28120: LD_INT 0
28122: LESS
28123: IFFALSE 28135
// min_x := 0 else
28125: LD_ADDR_VAR 0 7
28129: PUSH
28130: LD_INT 0
28132: ST_TO_ADDR
28133: GO 28151
// min_x := x - r ;
28135: LD_ADDR_VAR 0 7
28139: PUSH
28140: LD_VAR 0 2
28144: PUSH
28145: LD_VAR 0 4
28149: MINUS
28150: ST_TO_ADDR
// if y - r < 0 then
28151: LD_VAR 0 3
28155: PUSH
28156: LD_VAR 0 4
28160: MINUS
28161: PUSH
28162: LD_INT 0
28164: LESS
28165: IFFALSE 28177
// min_y := 0 else
28167: LD_ADDR_VAR 0 8
28171: PUSH
28172: LD_INT 0
28174: ST_TO_ADDR
28175: GO 28193
// min_y := y - r ;
28177: LD_ADDR_VAR 0 8
28181: PUSH
28182: LD_VAR 0 3
28186: PUSH
28187: LD_VAR 0 4
28191: MINUS
28192: ST_TO_ADDR
// max_x := x + r ;
28193: LD_ADDR_VAR 0 9
28197: PUSH
28198: LD_VAR 0 2
28202: PUSH
28203: LD_VAR 0 4
28207: PLUS
28208: ST_TO_ADDR
// max_y := y + r ;
28209: LD_ADDR_VAR 0 10
28213: PUSH
28214: LD_VAR 0 3
28218: PUSH
28219: LD_VAR 0 4
28223: PLUS
28224: ST_TO_ADDR
// for _x = min_x to max_x do
28225: LD_ADDR_VAR 0 11
28229: PUSH
28230: DOUBLE
28231: LD_VAR 0 7
28235: DEC
28236: ST_TO_ADDR
28237: LD_VAR 0 9
28241: PUSH
28242: FOR_TO
28243: IFFALSE 28360
// for _y = min_y to max_y do
28245: LD_ADDR_VAR 0 12
28249: PUSH
28250: DOUBLE
28251: LD_VAR 0 8
28255: DEC
28256: ST_TO_ADDR
28257: LD_VAR 0 10
28261: PUSH
28262: FOR_TO
28263: IFFALSE 28356
// begin if not ValidHex ( _x , _y ) then
28265: LD_VAR 0 11
28269: PPUSH
28270: LD_VAR 0 12
28274: PPUSH
28275: CALL_OW 488
28279: NOT
28280: IFFALSE 28284
// continue ;
28282: GO 28262
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28284: LD_VAR 0 11
28288: PPUSH
28289: LD_VAR 0 12
28293: PPUSH
28294: CALL_OW 351
28298: PUSH
28299: LD_VAR 0 11
28303: PPUSH
28304: LD_VAR 0 12
28308: PPUSH
28309: CALL_OW 554
28313: AND
28314: IFFALSE 28354
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28316: LD_ADDR_VAR 0 13
28320: PUSH
28321: LD_VAR 0 13
28325: PPUSH
28326: LD_VAR 0 13
28330: PUSH
28331: LD_INT 1
28333: PLUS
28334: PPUSH
28335: LD_VAR 0 11
28339: PUSH
28340: LD_VAR 0 12
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PPUSH
28349: CALL_OW 2
28353: ST_TO_ADDR
// end ;
28354: GO 28262
28356: POP
28357: POP
28358: GO 28242
28360: POP
28361: POP
// if not list then
28362: LD_VAR 0 13
28366: NOT
28367: IFFALSE 28371
// exit ;
28369: GO 28615
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28371: LD_ADDR_VAR 0 13
28375: PUSH
28376: LD_VAR 0 1
28380: PPUSH
28381: LD_VAR 0 13
28385: PPUSH
28386: LD_INT 1
28388: PPUSH
28389: LD_INT 1
28391: PPUSH
28392: CALL 37228 0 4
28396: ST_TO_ADDR
// ComStop ( flame ) ;
28397: LD_VAR 0 1
28401: PPUSH
28402: CALL_OW 141
// for i in list do
28406: LD_ADDR_VAR 0 6
28410: PUSH
28411: LD_VAR 0 13
28415: PUSH
28416: FOR_IN
28417: IFFALSE 28448
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28419: LD_VAR 0 1
28423: PPUSH
28424: LD_VAR 0 6
28428: PUSH
28429: LD_INT 1
28431: ARRAY
28432: PPUSH
28433: LD_VAR 0 6
28437: PUSH
28438: LD_INT 2
28440: ARRAY
28441: PPUSH
28442: CALL_OW 176
28446: GO 28416
28448: POP
28449: POP
// repeat wait ( 0 0$1 ) ;
28450: LD_INT 35
28452: PPUSH
28453: CALL_OW 67
// task := GetTaskList ( flame ) ;
28457: LD_ADDR_VAR 0 14
28461: PUSH
28462: LD_VAR 0 1
28466: PPUSH
28467: CALL_OW 437
28471: ST_TO_ADDR
// if not task then
28472: LD_VAR 0 14
28476: NOT
28477: IFFALSE 28481
// exit ;
28479: GO 28615
// if task [ 1 ] [ 1 ] <> | then
28481: LD_VAR 0 14
28485: PUSH
28486: LD_INT 1
28488: ARRAY
28489: PUSH
28490: LD_INT 1
28492: ARRAY
28493: PUSH
28494: LD_STRING |
28496: NONEQUAL
28497: IFFALSE 28501
// exit ;
28499: GO 28615
// _x := task [ 1 ] [ 2 ] ;
28501: LD_ADDR_VAR 0 11
28505: PUSH
28506: LD_VAR 0 14
28510: PUSH
28511: LD_INT 1
28513: ARRAY
28514: PUSH
28515: LD_INT 2
28517: ARRAY
28518: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28519: LD_ADDR_VAR 0 12
28523: PUSH
28524: LD_VAR 0 14
28528: PUSH
28529: LD_INT 1
28531: ARRAY
28532: PUSH
28533: LD_INT 3
28535: ARRAY
28536: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28537: LD_VAR 0 11
28541: PPUSH
28542: LD_VAR 0 12
28546: PPUSH
28547: CALL_OW 351
28551: NOT
28552: PUSH
28553: LD_VAR 0 11
28557: PPUSH
28558: LD_VAR 0 12
28562: PPUSH
28563: CALL_OW 554
28567: NOT
28568: OR
28569: IFFALSE 28603
// begin task := Delete ( task , 1 ) ;
28571: LD_ADDR_VAR 0 14
28575: PUSH
28576: LD_VAR 0 14
28580: PPUSH
28581: LD_INT 1
28583: PPUSH
28584: CALL_OW 3
28588: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28589: LD_VAR 0 1
28593: PPUSH
28594: LD_VAR 0 14
28598: PPUSH
28599: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28603: LD_VAR 0 1
28607: PPUSH
28608: CALL_OW 314
28612: NOT
28613: IFFALSE 28450
// end ;
28615: LD_VAR 0 5
28619: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28620: LD_EXP 108
28624: NOT
28625: IFFALSE 28675
28627: GO 28629
28629: DISABLE
// begin initHack := true ;
28630: LD_ADDR_EXP 108
28634: PUSH
28635: LD_INT 1
28637: ST_TO_ADDR
// hackTanks := [ ] ;
28638: LD_ADDR_EXP 109
28642: PUSH
28643: EMPTY
28644: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28645: LD_ADDR_EXP 110
28649: PUSH
28650: EMPTY
28651: ST_TO_ADDR
// hackLimit := 3 ;
28652: LD_ADDR_EXP 111
28656: PUSH
28657: LD_INT 3
28659: ST_TO_ADDR
// hackDist := 12 ;
28660: LD_ADDR_EXP 112
28664: PUSH
28665: LD_INT 12
28667: ST_TO_ADDR
// hackCounter := [ ] ;
28668: LD_ADDR_EXP 113
28672: PUSH
28673: EMPTY
28674: ST_TO_ADDR
// end ;
28675: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28676: LD_EXP 108
28680: PUSH
28681: LD_INT 34
28683: PUSH
28684: LD_INT 99
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PPUSH
28691: CALL_OW 69
28695: AND
28696: IFFALSE 28949
28698: GO 28700
28700: DISABLE
28701: LD_INT 0
28703: PPUSH
28704: PPUSH
// begin enable ;
28705: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28706: LD_ADDR_VAR 0 1
28710: PUSH
28711: LD_INT 34
28713: PUSH
28714: LD_INT 99
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PPUSH
28721: CALL_OW 69
28725: PUSH
28726: FOR_IN
28727: IFFALSE 28947
// begin if not i in hackTanks then
28729: LD_VAR 0 1
28733: PUSH
28734: LD_EXP 109
28738: IN
28739: NOT
28740: IFFALSE 28823
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28742: LD_ADDR_EXP 109
28746: PUSH
28747: LD_EXP 109
28751: PPUSH
28752: LD_EXP 109
28756: PUSH
28757: LD_INT 1
28759: PLUS
28760: PPUSH
28761: LD_VAR 0 1
28765: PPUSH
28766: CALL_OW 1
28770: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28771: LD_ADDR_EXP 110
28775: PUSH
28776: LD_EXP 110
28780: PPUSH
28781: LD_EXP 110
28785: PUSH
28786: LD_INT 1
28788: PLUS
28789: PPUSH
28790: EMPTY
28791: PPUSH
28792: CALL_OW 1
28796: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28797: LD_ADDR_EXP 113
28801: PUSH
28802: LD_EXP 113
28806: PPUSH
28807: LD_EXP 113
28811: PUSH
28812: LD_INT 1
28814: PLUS
28815: PPUSH
28816: EMPTY
28817: PPUSH
28818: CALL_OW 1
28822: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28823: LD_VAR 0 1
28827: PPUSH
28828: CALL_OW 302
28832: NOT
28833: IFFALSE 28846
// begin HackUnlinkAll ( i ) ;
28835: LD_VAR 0 1
28839: PPUSH
28840: CALL 28952 0 1
// continue ;
28844: GO 28726
// end ; HackCheckCapturedStatus ( i ) ;
28846: LD_VAR 0 1
28850: PPUSH
28851: CALL 29395 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28855: LD_ADDR_VAR 0 2
28859: PUSH
28860: LD_INT 81
28862: PUSH
28863: LD_VAR 0 1
28867: PPUSH
28868: CALL_OW 255
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 33
28879: PUSH
28880: LD_INT 3
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 91
28889: PUSH
28890: LD_VAR 0 1
28894: PUSH
28895: LD_EXP 112
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 50
28907: PUSH
28908: EMPTY
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: PPUSH
28917: CALL_OW 69
28921: ST_TO_ADDR
// if not tmp then
28922: LD_VAR 0 2
28926: NOT
28927: IFFALSE 28931
// continue ;
28929: GO 28726
// HackLink ( i , tmp ) ;
28931: LD_VAR 0 1
28935: PPUSH
28936: LD_VAR 0 2
28940: PPUSH
28941: CALL 29088 0 2
// end ;
28945: GO 28726
28947: POP
28948: POP
// end ;
28949: PPOPN 2
28951: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28952: LD_INT 0
28954: PPUSH
28955: PPUSH
28956: PPUSH
// if not hack in hackTanks then
28957: LD_VAR 0 1
28961: PUSH
28962: LD_EXP 109
28966: IN
28967: NOT
28968: IFFALSE 28972
// exit ;
28970: GO 29083
// index := GetElementIndex ( hackTanks , hack ) ;
28972: LD_ADDR_VAR 0 4
28976: PUSH
28977: LD_EXP 109
28981: PPUSH
28982: LD_VAR 0 1
28986: PPUSH
28987: CALL 36525 0 2
28991: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28992: LD_EXP 110
28996: PUSH
28997: LD_VAR 0 4
29001: ARRAY
29002: IFFALSE 29083
// begin for i in hackTanksCaptured [ index ] do
29004: LD_ADDR_VAR 0 3
29008: PUSH
29009: LD_EXP 110
29013: PUSH
29014: LD_VAR 0 4
29018: ARRAY
29019: PUSH
29020: FOR_IN
29021: IFFALSE 29047
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29023: LD_VAR 0 3
29027: PUSH
29028: LD_INT 1
29030: ARRAY
29031: PPUSH
29032: LD_VAR 0 3
29036: PUSH
29037: LD_INT 2
29039: ARRAY
29040: PPUSH
29041: CALL_OW 235
29045: GO 29020
29047: POP
29048: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29049: LD_ADDR_EXP 110
29053: PUSH
29054: LD_EXP 110
29058: PPUSH
29059: LD_VAR 0 4
29063: PPUSH
29064: EMPTY
29065: PPUSH
29066: CALL_OW 1
29070: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29071: LD_VAR 0 1
29075: PPUSH
29076: LD_INT 0
29078: PPUSH
29079: CALL_OW 505
// end ; end ;
29083: LD_VAR 0 2
29087: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29088: LD_INT 0
29090: PPUSH
29091: PPUSH
29092: PPUSH
// if not hack in hackTanks or not vehicles then
29093: LD_VAR 0 1
29097: PUSH
29098: LD_EXP 109
29102: IN
29103: NOT
29104: PUSH
29105: LD_VAR 0 2
29109: NOT
29110: OR
29111: IFFALSE 29115
// exit ;
29113: GO 29390
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29115: LD_ADDR_VAR 0 2
29119: PUSH
29120: LD_VAR 0 1
29124: PPUSH
29125: LD_VAR 0 2
29129: PPUSH
29130: LD_INT 1
29132: PPUSH
29133: LD_INT 1
29135: PPUSH
29136: CALL 37175 0 4
29140: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29141: LD_ADDR_VAR 0 5
29145: PUSH
29146: LD_EXP 109
29150: PPUSH
29151: LD_VAR 0 1
29155: PPUSH
29156: CALL 36525 0 2
29160: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29161: LD_EXP 110
29165: PUSH
29166: LD_VAR 0 5
29170: ARRAY
29171: PUSH
29172: LD_EXP 111
29176: LESS
29177: IFFALSE 29366
// begin for i := 1 to vehicles do
29179: LD_ADDR_VAR 0 4
29183: PUSH
29184: DOUBLE
29185: LD_INT 1
29187: DEC
29188: ST_TO_ADDR
29189: LD_VAR 0 2
29193: PUSH
29194: FOR_TO
29195: IFFALSE 29364
// begin if hackTanksCaptured [ index ] = hackLimit then
29197: LD_EXP 110
29201: PUSH
29202: LD_VAR 0 5
29206: ARRAY
29207: PUSH
29208: LD_EXP 111
29212: EQUAL
29213: IFFALSE 29217
// break ;
29215: GO 29364
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29217: LD_ADDR_EXP 113
29221: PUSH
29222: LD_EXP 113
29226: PPUSH
29227: LD_VAR 0 5
29231: PPUSH
29232: LD_EXP 113
29236: PUSH
29237: LD_VAR 0 5
29241: ARRAY
29242: PUSH
29243: LD_INT 1
29245: PLUS
29246: PPUSH
29247: CALL_OW 1
29251: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29252: LD_ADDR_EXP 110
29256: PUSH
29257: LD_EXP 110
29261: PPUSH
29262: LD_VAR 0 5
29266: PUSH
29267: LD_EXP 110
29271: PUSH
29272: LD_VAR 0 5
29276: ARRAY
29277: PUSH
29278: LD_INT 1
29280: PLUS
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PPUSH
29286: LD_VAR 0 2
29290: PUSH
29291: LD_VAR 0 4
29295: ARRAY
29296: PUSH
29297: LD_VAR 0 2
29301: PUSH
29302: LD_VAR 0 4
29306: ARRAY
29307: PPUSH
29308: CALL_OW 255
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PPUSH
29317: CALL 36740 0 3
29321: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29322: LD_VAR 0 2
29326: PUSH
29327: LD_VAR 0 4
29331: ARRAY
29332: PPUSH
29333: LD_VAR 0 1
29337: PPUSH
29338: CALL_OW 255
29342: PPUSH
29343: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29347: LD_VAR 0 2
29351: PUSH
29352: LD_VAR 0 4
29356: ARRAY
29357: PPUSH
29358: CALL_OW 141
// end ;
29362: GO 29194
29364: POP
29365: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29366: LD_VAR 0 1
29370: PPUSH
29371: LD_EXP 110
29375: PUSH
29376: LD_VAR 0 5
29380: ARRAY
29381: PUSH
29382: LD_INT 0
29384: PLUS
29385: PPUSH
29386: CALL_OW 505
// end ;
29390: LD_VAR 0 3
29394: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29395: LD_INT 0
29397: PPUSH
29398: PPUSH
29399: PPUSH
29400: PPUSH
// if not hack in hackTanks then
29401: LD_VAR 0 1
29405: PUSH
29406: LD_EXP 109
29410: IN
29411: NOT
29412: IFFALSE 29416
// exit ;
29414: GO 29656
// index := GetElementIndex ( hackTanks , hack ) ;
29416: LD_ADDR_VAR 0 4
29420: PUSH
29421: LD_EXP 109
29425: PPUSH
29426: LD_VAR 0 1
29430: PPUSH
29431: CALL 36525 0 2
29435: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29436: LD_ADDR_VAR 0 3
29440: PUSH
29441: DOUBLE
29442: LD_EXP 110
29446: PUSH
29447: LD_VAR 0 4
29451: ARRAY
29452: INC
29453: ST_TO_ADDR
29454: LD_INT 1
29456: PUSH
29457: FOR_DOWNTO
29458: IFFALSE 29630
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29460: LD_ADDR_VAR 0 5
29464: PUSH
29465: LD_EXP 110
29469: PUSH
29470: LD_VAR 0 4
29474: ARRAY
29475: PUSH
29476: LD_VAR 0 3
29480: ARRAY
29481: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29482: LD_VAR 0 5
29486: PUSH
29487: LD_INT 1
29489: ARRAY
29490: PPUSH
29491: CALL_OW 302
29495: NOT
29496: PUSH
29497: LD_VAR 0 5
29501: PUSH
29502: LD_INT 1
29504: ARRAY
29505: PPUSH
29506: CALL_OW 255
29510: PUSH
29511: LD_VAR 0 1
29515: PPUSH
29516: CALL_OW 255
29520: NONEQUAL
29521: OR
29522: IFFALSE 29628
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29524: LD_VAR 0 5
29528: PUSH
29529: LD_INT 1
29531: ARRAY
29532: PPUSH
29533: CALL_OW 305
29537: PUSH
29538: LD_VAR 0 5
29542: PUSH
29543: LD_INT 1
29545: ARRAY
29546: PPUSH
29547: CALL_OW 255
29551: PUSH
29552: LD_VAR 0 1
29556: PPUSH
29557: CALL_OW 255
29561: EQUAL
29562: AND
29563: IFFALSE 29587
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29565: LD_VAR 0 5
29569: PUSH
29570: LD_INT 1
29572: ARRAY
29573: PPUSH
29574: LD_VAR 0 5
29578: PUSH
29579: LD_INT 2
29581: ARRAY
29582: PPUSH
29583: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29587: LD_ADDR_EXP 110
29591: PUSH
29592: LD_EXP 110
29596: PPUSH
29597: LD_VAR 0 4
29601: PPUSH
29602: LD_EXP 110
29606: PUSH
29607: LD_VAR 0 4
29611: ARRAY
29612: PPUSH
29613: LD_VAR 0 3
29617: PPUSH
29618: CALL_OW 3
29622: PPUSH
29623: CALL_OW 1
29627: ST_TO_ADDR
// end ; end ;
29628: GO 29457
29630: POP
29631: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29632: LD_VAR 0 1
29636: PPUSH
29637: LD_EXP 110
29641: PUSH
29642: LD_VAR 0 4
29646: ARRAY
29647: PUSH
29648: LD_INT 0
29650: PLUS
29651: PPUSH
29652: CALL_OW 505
// end ;
29656: LD_VAR 0 2
29660: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29661: LD_INT 0
29663: PPUSH
29664: PPUSH
29665: PPUSH
29666: PPUSH
// if not hack in hackTanks then
29667: LD_VAR 0 1
29671: PUSH
29672: LD_EXP 109
29676: IN
29677: NOT
29678: IFFALSE 29682
// exit ;
29680: GO 29767
// index := GetElementIndex ( hackTanks , hack ) ;
29682: LD_ADDR_VAR 0 5
29686: PUSH
29687: LD_EXP 109
29691: PPUSH
29692: LD_VAR 0 1
29696: PPUSH
29697: CALL 36525 0 2
29701: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29702: LD_ADDR_VAR 0 4
29706: PUSH
29707: DOUBLE
29708: LD_INT 1
29710: DEC
29711: ST_TO_ADDR
29712: LD_EXP 110
29716: PUSH
29717: LD_VAR 0 5
29721: ARRAY
29722: PUSH
29723: FOR_TO
29724: IFFALSE 29765
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29726: LD_EXP 110
29730: PUSH
29731: LD_VAR 0 5
29735: ARRAY
29736: PUSH
29737: LD_VAR 0 4
29741: ARRAY
29742: PUSH
29743: LD_INT 1
29745: ARRAY
29746: PUSH
29747: LD_VAR 0 2
29751: EQUAL
29752: IFFALSE 29763
// KillUnit ( vehicle ) ;
29754: LD_VAR 0 2
29758: PPUSH
29759: CALL_OW 66
29763: GO 29723
29765: POP
29766: POP
// end ;
29767: LD_VAR 0 3
29771: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29772: LD_EXP 114
29776: NOT
29777: IFFALSE 29812
29779: GO 29781
29781: DISABLE
// begin initMiner := true ;
29782: LD_ADDR_EXP 114
29786: PUSH
29787: LD_INT 1
29789: ST_TO_ADDR
// minersList := [ ] ;
29790: LD_ADDR_EXP 115
29794: PUSH
29795: EMPTY
29796: ST_TO_ADDR
// minerMinesList := [ ] ;
29797: LD_ADDR_EXP 116
29801: PUSH
29802: EMPTY
29803: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29804: LD_ADDR_EXP 117
29808: PUSH
29809: LD_INT 5
29811: ST_TO_ADDR
// end ;
29812: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29813: LD_EXP 114
29817: PUSH
29818: LD_INT 34
29820: PUSH
29821: LD_INT 81
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PPUSH
29828: CALL_OW 69
29832: AND
29833: IFFALSE 30294
29835: GO 29837
29837: DISABLE
29838: LD_INT 0
29840: PPUSH
29841: PPUSH
29842: PPUSH
29843: PPUSH
// begin enable ;
29844: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29845: LD_ADDR_VAR 0 1
29849: PUSH
29850: LD_INT 34
29852: PUSH
29853: LD_INT 81
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PPUSH
29860: CALL_OW 69
29864: PUSH
29865: FOR_IN
29866: IFFALSE 29938
// begin if not i in minersList then
29868: LD_VAR 0 1
29872: PUSH
29873: LD_EXP 115
29877: IN
29878: NOT
29879: IFFALSE 29936
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29881: LD_ADDR_EXP 115
29885: PUSH
29886: LD_EXP 115
29890: PPUSH
29891: LD_EXP 115
29895: PUSH
29896: LD_INT 1
29898: PLUS
29899: PPUSH
29900: LD_VAR 0 1
29904: PPUSH
29905: CALL_OW 1
29909: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29910: LD_ADDR_EXP 116
29914: PUSH
29915: LD_EXP 116
29919: PPUSH
29920: LD_EXP 116
29924: PUSH
29925: LD_INT 1
29927: PLUS
29928: PPUSH
29929: EMPTY
29930: PPUSH
29931: CALL_OW 1
29935: ST_TO_ADDR
// end end ;
29936: GO 29865
29938: POP
29939: POP
// for i := minerMinesList downto 1 do
29940: LD_ADDR_VAR 0 1
29944: PUSH
29945: DOUBLE
29946: LD_EXP 116
29950: INC
29951: ST_TO_ADDR
29952: LD_INT 1
29954: PUSH
29955: FOR_DOWNTO
29956: IFFALSE 30292
// begin if IsLive ( minersList [ i ] ) then
29958: LD_EXP 115
29962: PUSH
29963: LD_VAR 0 1
29967: ARRAY
29968: PPUSH
29969: CALL_OW 300
29973: IFFALSE 30001
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29975: LD_EXP 115
29979: PUSH
29980: LD_VAR 0 1
29984: ARRAY
29985: PPUSH
29986: LD_EXP 116
29990: PUSH
29991: LD_VAR 0 1
29995: ARRAY
29996: PPUSH
29997: CALL_OW 505
// if not minerMinesList [ i ] then
30001: LD_EXP 116
30005: PUSH
30006: LD_VAR 0 1
30010: ARRAY
30011: NOT
30012: IFFALSE 30016
// continue ;
30014: GO 29955
// for j := minerMinesList [ i ] downto 1 do
30016: LD_ADDR_VAR 0 2
30020: PUSH
30021: DOUBLE
30022: LD_EXP 116
30026: PUSH
30027: LD_VAR 0 1
30031: ARRAY
30032: INC
30033: ST_TO_ADDR
30034: LD_INT 1
30036: PUSH
30037: FOR_DOWNTO
30038: IFFALSE 30288
// begin side := GetSide ( minersList [ i ] ) ;
30040: LD_ADDR_VAR 0 3
30044: PUSH
30045: LD_EXP 115
30049: PUSH
30050: LD_VAR 0 1
30054: ARRAY
30055: PPUSH
30056: CALL_OW 255
30060: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30061: LD_ADDR_VAR 0 4
30065: PUSH
30066: LD_EXP 116
30070: PUSH
30071: LD_VAR 0 1
30075: ARRAY
30076: PUSH
30077: LD_VAR 0 2
30081: ARRAY
30082: PUSH
30083: LD_INT 1
30085: ARRAY
30086: PPUSH
30087: LD_EXP 116
30091: PUSH
30092: LD_VAR 0 1
30096: ARRAY
30097: PUSH
30098: LD_VAR 0 2
30102: ARRAY
30103: PUSH
30104: LD_INT 2
30106: ARRAY
30107: PPUSH
30108: CALL_OW 428
30112: ST_TO_ADDR
// if not tmp then
30113: LD_VAR 0 4
30117: NOT
30118: IFFALSE 30122
// continue ;
30120: GO 30037
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30122: LD_VAR 0 4
30126: PUSH
30127: LD_INT 81
30129: PUSH
30130: LD_VAR 0 3
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PPUSH
30139: CALL_OW 69
30143: IN
30144: PUSH
30145: LD_EXP 116
30149: PUSH
30150: LD_VAR 0 1
30154: ARRAY
30155: PUSH
30156: LD_VAR 0 2
30160: ARRAY
30161: PUSH
30162: LD_INT 1
30164: ARRAY
30165: PPUSH
30166: LD_EXP 116
30170: PUSH
30171: LD_VAR 0 1
30175: ARRAY
30176: PUSH
30177: LD_VAR 0 2
30181: ARRAY
30182: PUSH
30183: LD_INT 2
30185: ARRAY
30186: PPUSH
30187: CALL_OW 458
30191: AND
30192: IFFALSE 30286
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30194: LD_EXP 116
30198: PUSH
30199: LD_VAR 0 1
30203: ARRAY
30204: PUSH
30205: LD_VAR 0 2
30209: ARRAY
30210: PUSH
30211: LD_INT 1
30213: ARRAY
30214: PPUSH
30215: LD_EXP 116
30219: PUSH
30220: LD_VAR 0 1
30224: ARRAY
30225: PUSH
30226: LD_VAR 0 2
30230: ARRAY
30231: PUSH
30232: LD_INT 2
30234: ARRAY
30235: PPUSH
30236: LD_VAR 0 3
30240: PPUSH
30241: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30245: LD_ADDR_EXP 116
30249: PUSH
30250: LD_EXP 116
30254: PPUSH
30255: LD_VAR 0 1
30259: PPUSH
30260: LD_EXP 116
30264: PUSH
30265: LD_VAR 0 1
30269: ARRAY
30270: PPUSH
30271: LD_VAR 0 2
30275: PPUSH
30276: CALL_OW 3
30280: PPUSH
30281: CALL_OW 1
30285: ST_TO_ADDR
// end ; end ;
30286: GO 30037
30288: POP
30289: POP
// end ;
30290: GO 29955
30292: POP
30293: POP
// end ;
30294: PPOPN 4
30296: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30297: LD_INT 0
30299: PPUSH
30300: PPUSH
// result := false ;
30301: LD_ADDR_VAR 0 4
30305: PUSH
30306: LD_INT 0
30308: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30309: LD_VAR 0 1
30313: PPUSH
30314: CALL_OW 264
30318: PUSH
30319: LD_INT 81
30321: EQUAL
30322: NOT
30323: IFFALSE 30327
// exit ;
30325: GO 30567
// index := GetElementIndex ( minersList , unit ) ;
30327: LD_ADDR_VAR 0 5
30331: PUSH
30332: LD_EXP 115
30336: PPUSH
30337: LD_VAR 0 1
30341: PPUSH
30342: CALL 36525 0 2
30346: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30347: LD_EXP 116
30351: PUSH
30352: LD_VAR 0 5
30356: ARRAY
30357: PUSH
30358: LD_EXP 117
30362: GREATEREQUAL
30363: IFFALSE 30367
// exit ;
30365: GO 30567
// ComMoveXY ( unit , x , y ) ;
30367: LD_VAR 0 1
30371: PPUSH
30372: LD_VAR 0 2
30376: PPUSH
30377: LD_VAR 0 3
30381: PPUSH
30382: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30386: LD_INT 35
30388: PPUSH
30389: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30393: LD_VAR 0 1
30397: PPUSH
30398: LD_VAR 0 2
30402: PPUSH
30403: LD_VAR 0 3
30407: PPUSH
30408: CALL 68266 0 3
30412: NOT
30413: PUSH
30414: LD_VAR 0 1
30418: PPUSH
30419: CALL_OW 314
30423: AND
30424: IFFALSE 30428
// exit ;
30426: GO 30567
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30428: LD_VAR 0 2
30432: PPUSH
30433: LD_VAR 0 3
30437: PPUSH
30438: CALL_OW 428
30442: PUSH
30443: LD_VAR 0 1
30447: EQUAL
30448: PUSH
30449: LD_VAR 0 1
30453: PPUSH
30454: CALL_OW 314
30458: NOT
30459: AND
30460: IFFALSE 30386
// PlaySoundXY ( x , y , PlantMine ) ;
30462: LD_VAR 0 2
30466: PPUSH
30467: LD_VAR 0 3
30471: PPUSH
30472: LD_STRING PlantMine
30474: PPUSH
30475: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30479: LD_VAR 0 2
30483: PPUSH
30484: LD_VAR 0 3
30488: PPUSH
30489: LD_VAR 0 1
30493: PPUSH
30494: CALL_OW 255
30498: PPUSH
30499: LD_INT 0
30501: PPUSH
30502: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30506: LD_ADDR_EXP 116
30510: PUSH
30511: LD_EXP 116
30515: PPUSH
30516: LD_VAR 0 5
30520: PUSH
30521: LD_EXP 116
30525: PUSH
30526: LD_VAR 0 5
30530: ARRAY
30531: PUSH
30532: LD_INT 1
30534: PLUS
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PPUSH
30540: LD_VAR 0 2
30544: PUSH
30545: LD_VAR 0 3
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PPUSH
30554: CALL 36740 0 3
30558: ST_TO_ADDR
// result := true ;
30559: LD_ADDR_VAR 0 4
30563: PUSH
30564: LD_INT 1
30566: ST_TO_ADDR
// end ;
30567: LD_VAR 0 4
30571: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30572: LD_INT 0
30574: PPUSH
30575: PPUSH
30576: PPUSH
// if not unit in minersList then
30577: LD_VAR 0 1
30581: PUSH
30582: LD_EXP 115
30586: IN
30587: NOT
30588: IFFALSE 30592
// exit ;
30590: GO 30984
// index := GetElementIndex ( minersList , unit ) ;
30592: LD_ADDR_VAR 0 6
30596: PUSH
30597: LD_EXP 115
30601: PPUSH
30602: LD_VAR 0 1
30606: PPUSH
30607: CALL 36525 0 2
30611: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30612: LD_ADDR_VAR 0 5
30616: PUSH
30617: DOUBLE
30618: LD_EXP 116
30622: PUSH
30623: LD_VAR 0 6
30627: ARRAY
30628: INC
30629: ST_TO_ADDR
30630: LD_INT 1
30632: PUSH
30633: FOR_DOWNTO
30634: IFFALSE 30795
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30636: LD_EXP 116
30640: PUSH
30641: LD_VAR 0 6
30645: ARRAY
30646: PUSH
30647: LD_VAR 0 5
30651: ARRAY
30652: PUSH
30653: LD_INT 1
30655: ARRAY
30656: PUSH
30657: LD_VAR 0 2
30661: EQUAL
30662: PUSH
30663: LD_EXP 116
30667: PUSH
30668: LD_VAR 0 6
30672: ARRAY
30673: PUSH
30674: LD_VAR 0 5
30678: ARRAY
30679: PUSH
30680: LD_INT 2
30682: ARRAY
30683: PUSH
30684: LD_VAR 0 3
30688: EQUAL
30689: AND
30690: IFFALSE 30793
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30692: LD_EXP 116
30696: PUSH
30697: LD_VAR 0 6
30701: ARRAY
30702: PUSH
30703: LD_VAR 0 5
30707: ARRAY
30708: PUSH
30709: LD_INT 1
30711: ARRAY
30712: PPUSH
30713: LD_EXP 116
30717: PUSH
30718: LD_VAR 0 6
30722: ARRAY
30723: PUSH
30724: LD_VAR 0 5
30728: ARRAY
30729: PUSH
30730: LD_INT 2
30732: ARRAY
30733: PPUSH
30734: LD_VAR 0 1
30738: PPUSH
30739: CALL_OW 255
30743: PPUSH
30744: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30748: LD_ADDR_EXP 116
30752: PUSH
30753: LD_EXP 116
30757: PPUSH
30758: LD_VAR 0 6
30762: PPUSH
30763: LD_EXP 116
30767: PUSH
30768: LD_VAR 0 6
30772: ARRAY
30773: PPUSH
30774: LD_VAR 0 5
30778: PPUSH
30779: CALL_OW 3
30783: PPUSH
30784: CALL_OW 1
30788: ST_TO_ADDR
// exit ;
30789: POP
30790: POP
30791: GO 30984
// end ; end ;
30793: GO 30633
30795: POP
30796: POP
// for i := minerMinesList [ index ] downto 1 do
30797: LD_ADDR_VAR 0 5
30801: PUSH
30802: DOUBLE
30803: LD_EXP 116
30807: PUSH
30808: LD_VAR 0 6
30812: ARRAY
30813: INC
30814: ST_TO_ADDR
30815: LD_INT 1
30817: PUSH
30818: FOR_DOWNTO
30819: IFFALSE 30982
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30821: LD_EXP 116
30825: PUSH
30826: LD_VAR 0 6
30830: ARRAY
30831: PUSH
30832: LD_VAR 0 5
30836: ARRAY
30837: PUSH
30838: LD_INT 1
30840: ARRAY
30841: PPUSH
30842: LD_EXP 116
30846: PUSH
30847: LD_VAR 0 6
30851: ARRAY
30852: PUSH
30853: LD_VAR 0 5
30857: ARRAY
30858: PUSH
30859: LD_INT 2
30861: ARRAY
30862: PPUSH
30863: LD_VAR 0 2
30867: PPUSH
30868: LD_VAR 0 3
30872: PPUSH
30873: CALL_OW 298
30877: PUSH
30878: LD_INT 6
30880: LESS
30881: IFFALSE 30980
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30883: LD_EXP 116
30887: PUSH
30888: LD_VAR 0 6
30892: ARRAY
30893: PUSH
30894: LD_VAR 0 5
30898: ARRAY
30899: PUSH
30900: LD_INT 1
30902: ARRAY
30903: PPUSH
30904: LD_EXP 116
30908: PUSH
30909: LD_VAR 0 6
30913: ARRAY
30914: PUSH
30915: LD_VAR 0 5
30919: ARRAY
30920: PUSH
30921: LD_INT 2
30923: ARRAY
30924: PPUSH
30925: LD_VAR 0 1
30929: PPUSH
30930: CALL_OW 255
30934: PPUSH
30935: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30939: LD_ADDR_EXP 116
30943: PUSH
30944: LD_EXP 116
30948: PPUSH
30949: LD_VAR 0 6
30953: PPUSH
30954: LD_EXP 116
30958: PUSH
30959: LD_VAR 0 6
30963: ARRAY
30964: PPUSH
30965: LD_VAR 0 5
30969: PPUSH
30970: CALL_OW 3
30974: PPUSH
30975: CALL_OW 1
30979: ST_TO_ADDR
// end ; end ;
30980: GO 30818
30982: POP
30983: POP
// end ;
30984: LD_VAR 0 4
30988: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30989: LD_INT 0
30991: PPUSH
30992: PPUSH
30993: PPUSH
30994: PPUSH
30995: PPUSH
30996: PPUSH
30997: PPUSH
30998: PPUSH
30999: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31000: LD_VAR 0 1
31004: PPUSH
31005: CALL_OW 264
31009: PUSH
31010: LD_INT 81
31012: EQUAL
31013: NOT
31014: PUSH
31015: LD_VAR 0 1
31019: PUSH
31020: LD_EXP 115
31024: IN
31025: NOT
31026: OR
31027: IFFALSE 31031
// exit ;
31029: GO 31353
// index := GetElementIndex ( minersList , unit ) ;
31031: LD_ADDR_VAR 0 6
31035: PUSH
31036: LD_EXP 115
31040: PPUSH
31041: LD_VAR 0 1
31045: PPUSH
31046: CALL 36525 0 2
31050: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31051: LD_ADDR_VAR 0 8
31055: PUSH
31056: LD_EXP 117
31060: PUSH
31061: LD_EXP 116
31065: PUSH
31066: LD_VAR 0 6
31070: ARRAY
31071: MINUS
31072: ST_TO_ADDR
// if not minesFreeAmount then
31073: LD_VAR 0 8
31077: NOT
31078: IFFALSE 31082
// exit ;
31080: GO 31353
// tmp := [ ] ;
31082: LD_ADDR_VAR 0 7
31086: PUSH
31087: EMPTY
31088: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31089: LD_ADDR_VAR 0 5
31093: PUSH
31094: DOUBLE
31095: LD_INT 1
31097: DEC
31098: ST_TO_ADDR
31099: LD_VAR 0 8
31103: PUSH
31104: FOR_TO
31105: IFFALSE 31300
// begin _d := rand ( 0 , 5 ) ;
31107: LD_ADDR_VAR 0 11
31111: PUSH
31112: LD_INT 0
31114: PPUSH
31115: LD_INT 5
31117: PPUSH
31118: CALL_OW 12
31122: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31123: LD_ADDR_VAR 0 12
31127: PUSH
31128: LD_INT 2
31130: PPUSH
31131: LD_INT 6
31133: PPUSH
31134: CALL_OW 12
31138: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31139: LD_ADDR_VAR 0 9
31143: PUSH
31144: LD_VAR 0 2
31148: PPUSH
31149: LD_VAR 0 11
31153: PPUSH
31154: LD_VAR 0 12
31158: PPUSH
31159: CALL_OW 272
31163: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31164: LD_ADDR_VAR 0 10
31168: PUSH
31169: LD_VAR 0 3
31173: PPUSH
31174: LD_VAR 0 11
31178: PPUSH
31179: LD_VAR 0 12
31183: PPUSH
31184: CALL_OW 273
31188: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31189: LD_VAR 0 9
31193: PPUSH
31194: LD_VAR 0 10
31198: PPUSH
31199: CALL_OW 488
31203: PUSH
31204: LD_VAR 0 9
31208: PUSH
31209: LD_VAR 0 10
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_VAR 0 7
31222: IN
31223: NOT
31224: AND
31225: PUSH
31226: LD_VAR 0 9
31230: PPUSH
31231: LD_VAR 0 10
31235: PPUSH
31236: CALL_OW 458
31240: NOT
31241: AND
31242: IFFALSE 31284
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31244: LD_ADDR_VAR 0 7
31248: PUSH
31249: LD_VAR 0 7
31253: PPUSH
31254: LD_VAR 0 7
31258: PUSH
31259: LD_INT 1
31261: PLUS
31262: PPUSH
31263: LD_VAR 0 9
31267: PUSH
31268: LD_VAR 0 10
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PPUSH
31277: CALL_OW 1
31281: ST_TO_ADDR
31282: GO 31298
// i := i - 1 ;
31284: LD_ADDR_VAR 0 5
31288: PUSH
31289: LD_VAR 0 5
31293: PUSH
31294: LD_INT 1
31296: MINUS
31297: ST_TO_ADDR
// end ;
31298: GO 31104
31300: POP
31301: POP
// for i in tmp do
31302: LD_ADDR_VAR 0 5
31306: PUSH
31307: LD_VAR 0 7
31311: PUSH
31312: FOR_IN
31313: IFFALSE 31351
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31315: LD_VAR 0 1
31319: PPUSH
31320: LD_VAR 0 5
31324: PUSH
31325: LD_INT 1
31327: ARRAY
31328: PPUSH
31329: LD_VAR 0 5
31333: PUSH
31334: LD_INT 2
31336: ARRAY
31337: PPUSH
31338: CALL 30297 0 3
31342: NOT
31343: IFFALSE 31349
// exit ;
31345: POP
31346: POP
31347: GO 31353
31349: GO 31312
31351: POP
31352: POP
// end ;
31353: LD_VAR 0 4
31357: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31358: LD_INT 0
31360: PPUSH
31361: PPUSH
31362: PPUSH
31363: PPUSH
31364: PPUSH
31365: PPUSH
31366: PPUSH
// if not GetClass ( unit ) = class_sniper then
31367: LD_VAR 0 1
31371: PPUSH
31372: CALL_OW 257
31376: PUSH
31377: LD_INT 5
31379: EQUAL
31380: NOT
31381: IFFALSE 31385
// exit ;
31383: GO 31773
// dist := 8 ;
31385: LD_ADDR_VAR 0 5
31389: PUSH
31390: LD_INT 8
31392: ST_TO_ADDR
// viewRange := 12 ;
31393: LD_ADDR_VAR 0 7
31397: PUSH
31398: LD_INT 12
31400: ST_TO_ADDR
// side := GetSide ( unit ) ;
31401: LD_ADDR_VAR 0 6
31405: PUSH
31406: LD_VAR 0 1
31410: PPUSH
31411: CALL_OW 255
31415: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31416: LD_INT 61
31418: PPUSH
31419: LD_VAR 0 6
31423: PPUSH
31424: CALL_OW 321
31428: PUSH
31429: LD_INT 2
31431: EQUAL
31432: IFFALSE 31442
// viewRange := 16 ;
31434: LD_ADDR_VAR 0 7
31438: PUSH
31439: LD_INT 16
31441: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31442: LD_VAR 0 1
31446: PPUSH
31447: LD_VAR 0 2
31451: PPUSH
31452: LD_VAR 0 3
31456: PPUSH
31457: CALL_OW 297
31461: PUSH
31462: LD_VAR 0 5
31466: GREATER
31467: IFFALSE 31546
// begin ComMoveXY ( unit , x , y ) ;
31469: LD_VAR 0 1
31473: PPUSH
31474: LD_VAR 0 2
31478: PPUSH
31479: LD_VAR 0 3
31483: PPUSH
31484: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31488: LD_INT 35
31490: PPUSH
31491: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31495: LD_VAR 0 1
31499: PPUSH
31500: LD_VAR 0 2
31504: PPUSH
31505: LD_VAR 0 3
31509: PPUSH
31510: CALL 68266 0 3
31514: NOT
31515: IFFALSE 31519
// exit ;
31517: GO 31773
// until GetDistUnitXY ( unit , x , y ) < dist ;
31519: LD_VAR 0 1
31523: PPUSH
31524: LD_VAR 0 2
31528: PPUSH
31529: LD_VAR 0 3
31533: PPUSH
31534: CALL_OW 297
31538: PUSH
31539: LD_VAR 0 5
31543: LESS
31544: IFFALSE 31488
// end ; ComTurnXY ( unit , x , y ) ;
31546: LD_VAR 0 1
31550: PPUSH
31551: LD_VAR 0 2
31555: PPUSH
31556: LD_VAR 0 3
31560: PPUSH
31561: CALL_OW 118
// wait ( 5 ) ;
31565: LD_INT 5
31567: PPUSH
31568: CALL_OW 67
// _d := GetDir ( unit ) ;
31572: LD_ADDR_VAR 0 10
31576: PUSH
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 254
31586: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31587: LD_ADDR_VAR 0 8
31591: PUSH
31592: LD_VAR 0 1
31596: PPUSH
31597: CALL_OW 250
31601: PPUSH
31602: LD_VAR 0 10
31606: PPUSH
31607: LD_VAR 0 5
31611: PPUSH
31612: CALL_OW 272
31616: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31617: LD_ADDR_VAR 0 9
31621: PUSH
31622: LD_VAR 0 1
31626: PPUSH
31627: CALL_OW 251
31631: PPUSH
31632: LD_VAR 0 10
31636: PPUSH
31637: LD_VAR 0 5
31641: PPUSH
31642: CALL_OW 273
31646: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31647: LD_VAR 0 8
31651: PPUSH
31652: LD_VAR 0 9
31656: PPUSH
31657: CALL_OW 488
31661: NOT
31662: IFFALSE 31666
// exit ;
31664: GO 31773
// ComAnimCustom ( unit , 1 ) ;
31666: LD_VAR 0 1
31670: PPUSH
31671: LD_INT 1
31673: PPUSH
31674: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31678: LD_VAR 0 8
31682: PPUSH
31683: LD_VAR 0 9
31687: PPUSH
31688: LD_VAR 0 6
31692: PPUSH
31693: LD_VAR 0 7
31697: PPUSH
31698: CALL_OW 330
// repeat wait ( 1 ) ;
31702: LD_INT 1
31704: PPUSH
31705: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31709: LD_VAR 0 1
31713: PPUSH
31714: CALL_OW 316
31718: PUSH
31719: LD_VAR 0 1
31723: PPUSH
31724: CALL_OW 314
31728: OR
31729: PUSH
31730: LD_VAR 0 1
31734: PPUSH
31735: CALL_OW 302
31739: NOT
31740: OR
31741: PUSH
31742: LD_VAR 0 1
31746: PPUSH
31747: CALL_OW 301
31751: OR
31752: IFFALSE 31702
// RemoveSeeing ( _x , _y , side ) ;
31754: LD_VAR 0 8
31758: PPUSH
31759: LD_VAR 0 9
31763: PPUSH
31764: LD_VAR 0 6
31768: PPUSH
31769: CALL_OW 331
// end ; end_of_file
31773: LD_VAR 0 4
31777: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31778: LD_INT 0
31780: PPUSH
31781: PPUSH
// if exist_mode then
31782: LD_VAR 0 2
31786: IFFALSE 31811
// unit := CreateCharacter ( prefix & ident ) else
31788: LD_ADDR_VAR 0 5
31792: PUSH
31793: LD_VAR 0 3
31797: PUSH
31798: LD_VAR 0 1
31802: STR
31803: PPUSH
31804: CALL_OW 34
31808: ST_TO_ADDR
31809: GO 31826
// unit := NewCharacter ( ident ) ;
31811: LD_ADDR_VAR 0 5
31815: PUSH
31816: LD_VAR 0 1
31820: PPUSH
31821: CALL_OW 25
31825: ST_TO_ADDR
// result := unit ;
31826: LD_ADDR_VAR 0 4
31830: PUSH
31831: LD_VAR 0 5
31835: ST_TO_ADDR
// end ;
31836: LD_VAR 0 4
31840: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31841: LD_INT 0
31843: PPUSH
31844: PPUSH
// if not side or not nation then
31845: LD_VAR 0 1
31849: NOT
31850: PUSH
31851: LD_VAR 0 2
31855: NOT
31856: OR
31857: IFFALSE 31861
// exit ;
31859: GO 32629
// case nation of nation_american :
31861: LD_VAR 0 2
31865: PUSH
31866: LD_INT 1
31868: DOUBLE
31869: EQUAL
31870: IFTRUE 31874
31872: GO 32088
31874: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31875: LD_ADDR_VAR 0 4
31879: PUSH
31880: LD_INT 35
31882: PUSH
31883: LD_INT 45
31885: PUSH
31886: LD_INT 46
31888: PUSH
31889: LD_INT 47
31891: PUSH
31892: LD_INT 82
31894: PUSH
31895: LD_INT 83
31897: PUSH
31898: LD_INT 84
31900: PUSH
31901: LD_INT 85
31903: PUSH
31904: LD_INT 86
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: LD_INT 2
31912: PUSH
31913: LD_INT 6
31915: PUSH
31916: LD_INT 15
31918: PUSH
31919: LD_INT 16
31921: PUSH
31922: LD_INT 7
31924: PUSH
31925: LD_INT 12
31927: PUSH
31928: LD_INT 13
31930: PUSH
31931: LD_INT 10
31933: PUSH
31934: LD_INT 14
31936: PUSH
31937: LD_INT 20
31939: PUSH
31940: LD_INT 21
31942: PUSH
31943: LD_INT 22
31945: PUSH
31946: LD_INT 25
31948: PUSH
31949: LD_INT 32
31951: PUSH
31952: LD_INT 27
31954: PUSH
31955: LD_INT 36
31957: PUSH
31958: LD_INT 69
31960: PUSH
31961: LD_INT 39
31963: PUSH
31964: LD_INT 34
31966: PUSH
31967: LD_INT 40
31969: PUSH
31970: LD_INT 48
31972: PUSH
31973: LD_INT 49
31975: PUSH
31976: LD_INT 50
31978: PUSH
31979: LD_INT 51
31981: PUSH
31982: LD_INT 52
31984: PUSH
31985: LD_INT 53
31987: PUSH
31988: LD_INT 54
31990: PUSH
31991: LD_INT 55
31993: PUSH
31994: LD_INT 56
31996: PUSH
31997: LD_INT 57
31999: PUSH
32000: LD_INT 58
32002: PUSH
32003: LD_INT 59
32005: PUSH
32006: LD_INT 60
32008: PUSH
32009: LD_INT 61
32011: PUSH
32012: LD_INT 62
32014: PUSH
32015: LD_INT 80
32017: PUSH
32018: LD_INT 82
32020: PUSH
32021: LD_INT 83
32023: PUSH
32024: LD_INT 84
32026: PUSH
32027: LD_INT 85
32029: PUSH
32030: LD_INT 86
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: ST_TO_ADDR
32086: GO 32553
32088: LD_INT 2
32090: DOUBLE
32091: EQUAL
32092: IFTRUE 32096
32094: GO 32322
32096: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32097: LD_ADDR_VAR 0 4
32101: PUSH
32102: LD_INT 35
32104: PUSH
32105: LD_INT 45
32107: PUSH
32108: LD_INT 46
32110: PUSH
32111: LD_INT 47
32113: PUSH
32114: LD_INT 82
32116: PUSH
32117: LD_INT 83
32119: PUSH
32120: LD_INT 84
32122: PUSH
32123: LD_INT 85
32125: PUSH
32126: LD_INT 87
32128: PUSH
32129: LD_INT 70
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: LD_INT 11
32137: PUSH
32138: LD_INT 3
32140: PUSH
32141: LD_INT 4
32143: PUSH
32144: LD_INT 5
32146: PUSH
32147: LD_INT 6
32149: PUSH
32150: LD_INT 15
32152: PUSH
32153: LD_INT 18
32155: PUSH
32156: LD_INT 7
32158: PUSH
32159: LD_INT 17
32161: PUSH
32162: LD_INT 8
32164: PUSH
32165: LD_INT 20
32167: PUSH
32168: LD_INT 21
32170: PUSH
32171: LD_INT 22
32173: PUSH
32174: LD_INT 72
32176: PUSH
32177: LD_INT 26
32179: PUSH
32180: LD_INT 69
32182: PUSH
32183: LD_INT 39
32185: PUSH
32186: LD_INT 40
32188: PUSH
32189: LD_INT 41
32191: PUSH
32192: LD_INT 42
32194: PUSH
32195: LD_INT 43
32197: PUSH
32198: LD_INT 48
32200: PUSH
32201: LD_INT 49
32203: PUSH
32204: LD_INT 50
32206: PUSH
32207: LD_INT 51
32209: PUSH
32210: LD_INT 52
32212: PUSH
32213: LD_INT 53
32215: PUSH
32216: LD_INT 54
32218: PUSH
32219: LD_INT 55
32221: PUSH
32222: LD_INT 56
32224: PUSH
32225: LD_INT 60
32227: PUSH
32228: LD_INT 61
32230: PUSH
32231: LD_INT 62
32233: PUSH
32234: LD_INT 66
32236: PUSH
32237: LD_INT 67
32239: PUSH
32240: LD_INT 68
32242: PUSH
32243: LD_INT 81
32245: PUSH
32246: LD_INT 82
32248: PUSH
32249: LD_INT 83
32251: PUSH
32252: LD_INT 84
32254: PUSH
32255: LD_INT 85
32257: PUSH
32258: LD_INT 87
32260: PUSH
32261: LD_INT 88
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: ST_TO_ADDR
32320: GO 32553
32322: LD_INT 3
32324: DOUBLE
32325: EQUAL
32326: IFTRUE 32330
32328: GO 32552
32330: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32331: LD_ADDR_VAR 0 4
32335: PUSH
32336: LD_INT 46
32338: PUSH
32339: LD_INT 47
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: LD_INT 2
32347: PUSH
32348: LD_INT 82
32350: PUSH
32351: LD_INT 83
32353: PUSH
32354: LD_INT 84
32356: PUSH
32357: LD_INT 85
32359: PUSH
32360: LD_INT 86
32362: PUSH
32363: LD_INT 11
32365: PUSH
32366: LD_INT 9
32368: PUSH
32369: LD_INT 20
32371: PUSH
32372: LD_INT 19
32374: PUSH
32375: LD_INT 21
32377: PUSH
32378: LD_INT 24
32380: PUSH
32381: LD_INT 22
32383: PUSH
32384: LD_INT 25
32386: PUSH
32387: LD_INT 28
32389: PUSH
32390: LD_INT 29
32392: PUSH
32393: LD_INT 30
32395: PUSH
32396: LD_INT 31
32398: PUSH
32399: LD_INT 37
32401: PUSH
32402: LD_INT 38
32404: PUSH
32405: LD_INT 32
32407: PUSH
32408: LD_INT 27
32410: PUSH
32411: LD_INT 33
32413: PUSH
32414: LD_INT 69
32416: PUSH
32417: LD_INT 39
32419: PUSH
32420: LD_INT 34
32422: PUSH
32423: LD_INT 40
32425: PUSH
32426: LD_INT 71
32428: PUSH
32429: LD_INT 23
32431: PUSH
32432: LD_INT 44
32434: PUSH
32435: LD_INT 48
32437: PUSH
32438: LD_INT 49
32440: PUSH
32441: LD_INT 50
32443: PUSH
32444: LD_INT 51
32446: PUSH
32447: LD_INT 52
32449: PUSH
32450: LD_INT 53
32452: PUSH
32453: LD_INT 54
32455: PUSH
32456: LD_INT 55
32458: PUSH
32459: LD_INT 56
32461: PUSH
32462: LD_INT 57
32464: PUSH
32465: LD_INT 58
32467: PUSH
32468: LD_INT 59
32470: PUSH
32471: LD_INT 63
32473: PUSH
32474: LD_INT 64
32476: PUSH
32477: LD_INT 65
32479: PUSH
32480: LD_INT 82
32482: PUSH
32483: LD_INT 83
32485: PUSH
32486: LD_INT 84
32488: PUSH
32489: LD_INT 85
32491: PUSH
32492: LD_INT 86
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: ST_TO_ADDR
32550: GO 32553
32552: POP
// if state > - 1 and state < 3 then
32553: LD_VAR 0 3
32557: PUSH
32558: LD_INT 1
32560: NEG
32561: GREATER
32562: PUSH
32563: LD_VAR 0 3
32567: PUSH
32568: LD_INT 3
32570: LESS
32571: AND
32572: IFFALSE 32629
// for i in result do
32574: LD_ADDR_VAR 0 5
32578: PUSH
32579: LD_VAR 0 4
32583: PUSH
32584: FOR_IN
32585: IFFALSE 32627
// if GetTech ( i , side ) <> state then
32587: LD_VAR 0 5
32591: PPUSH
32592: LD_VAR 0 1
32596: PPUSH
32597: CALL_OW 321
32601: PUSH
32602: LD_VAR 0 3
32606: NONEQUAL
32607: IFFALSE 32625
// result := result diff i ;
32609: LD_ADDR_VAR 0 4
32613: PUSH
32614: LD_VAR 0 4
32618: PUSH
32619: LD_VAR 0 5
32623: DIFF
32624: ST_TO_ADDR
32625: GO 32584
32627: POP
32628: POP
// end ;
32629: LD_VAR 0 4
32633: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32634: LD_INT 0
32636: PPUSH
32637: PPUSH
32638: PPUSH
// result := true ;
32639: LD_ADDR_VAR 0 3
32643: PUSH
32644: LD_INT 1
32646: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32647: LD_ADDR_VAR 0 5
32651: PUSH
32652: LD_VAR 0 2
32656: PPUSH
32657: CALL_OW 480
32661: ST_TO_ADDR
// if not tmp then
32662: LD_VAR 0 5
32666: NOT
32667: IFFALSE 32671
// exit ;
32669: GO 32720
// for i in tmp do
32671: LD_ADDR_VAR 0 4
32675: PUSH
32676: LD_VAR 0 5
32680: PUSH
32681: FOR_IN
32682: IFFALSE 32718
// if GetTech ( i , side ) <> state_researched then
32684: LD_VAR 0 4
32688: PPUSH
32689: LD_VAR 0 1
32693: PPUSH
32694: CALL_OW 321
32698: PUSH
32699: LD_INT 2
32701: NONEQUAL
32702: IFFALSE 32716
// begin result := false ;
32704: LD_ADDR_VAR 0 3
32708: PUSH
32709: LD_INT 0
32711: ST_TO_ADDR
// exit ;
32712: POP
32713: POP
32714: GO 32720
// end ;
32716: GO 32681
32718: POP
32719: POP
// end ;
32720: LD_VAR 0 3
32724: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32725: LD_INT 0
32727: PPUSH
32728: PPUSH
32729: PPUSH
32730: PPUSH
32731: PPUSH
32732: PPUSH
32733: PPUSH
32734: PPUSH
32735: PPUSH
32736: PPUSH
32737: PPUSH
32738: PPUSH
32739: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32740: LD_VAR 0 1
32744: NOT
32745: PUSH
32746: LD_VAR 0 1
32750: PPUSH
32751: CALL_OW 257
32755: PUSH
32756: LD_INT 9
32758: NONEQUAL
32759: OR
32760: IFFALSE 32764
// exit ;
32762: GO 33337
// side := GetSide ( unit ) ;
32764: LD_ADDR_VAR 0 9
32768: PUSH
32769: LD_VAR 0 1
32773: PPUSH
32774: CALL_OW 255
32778: ST_TO_ADDR
// tech_space := tech_spacanom ;
32779: LD_ADDR_VAR 0 12
32783: PUSH
32784: LD_INT 29
32786: ST_TO_ADDR
// tech_time := tech_taurad ;
32787: LD_ADDR_VAR 0 13
32791: PUSH
32792: LD_INT 28
32794: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32795: LD_ADDR_VAR 0 11
32799: PUSH
32800: LD_VAR 0 1
32804: PPUSH
32805: CALL_OW 310
32809: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32810: LD_VAR 0 11
32814: PPUSH
32815: CALL_OW 247
32819: PUSH
32820: LD_INT 2
32822: EQUAL
32823: IFFALSE 32827
// exit ;
32825: GO 33337
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32827: LD_ADDR_VAR 0 8
32831: PUSH
32832: LD_INT 81
32834: PUSH
32835: LD_VAR 0 9
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 3
32846: PUSH
32847: LD_INT 21
32849: PUSH
32850: LD_INT 3
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PPUSH
32865: CALL_OW 69
32869: ST_TO_ADDR
// if not tmp then
32870: LD_VAR 0 8
32874: NOT
32875: IFFALSE 32879
// exit ;
32877: GO 33337
// if in_unit then
32879: LD_VAR 0 11
32883: IFFALSE 32907
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32885: LD_ADDR_VAR 0 10
32889: PUSH
32890: LD_VAR 0 8
32894: PPUSH
32895: LD_VAR 0 11
32899: PPUSH
32900: CALL_OW 74
32904: ST_TO_ADDR
32905: GO 32927
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32907: LD_ADDR_VAR 0 10
32911: PUSH
32912: LD_VAR 0 8
32916: PPUSH
32917: LD_VAR 0 1
32921: PPUSH
32922: CALL_OW 74
32926: ST_TO_ADDR
// if not enemy then
32927: LD_VAR 0 10
32931: NOT
32932: IFFALSE 32936
// exit ;
32934: GO 33337
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32936: LD_VAR 0 11
32940: PUSH
32941: LD_VAR 0 11
32945: PPUSH
32946: LD_VAR 0 10
32950: PPUSH
32951: CALL_OW 296
32955: PUSH
32956: LD_INT 13
32958: GREATER
32959: AND
32960: PUSH
32961: LD_VAR 0 1
32965: PPUSH
32966: LD_VAR 0 10
32970: PPUSH
32971: CALL_OW 296
32975: PUSH
32976: LD_INT 12
32978: GREATER
32979: OR
32980: IFFALSE 32984
// exit ;
32982: GO 33337
// missile := [ 1 ] ;
32984: LD_ADDR_VAR 0 14
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: EMPTY
32993: LIST
32994: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32995: LD_VAR 0 9
32999: PPUSH
33000: LD_VAR 0 12
33004: PPUSH
33005: CALL_OW 325
33009: IFFALSE 33038
// missile := Replace ( missile , missile + 1 , 2 ) ;
33011: LD_ADDR_VAR 0 14
33015: PUSH
33016: LD_VAR 0 14
33020: PPUSH
33021: LD_VAR 0 14
33025: PUSH
33026: LD_INT 1
33028: PLUS
33029: PPUSH
33030: LD_INT 2
33032: PPUSH
33033: CALL_OW 1
33037: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33038: LD_VAR 0 9
33042: PPUSH
33043: LD_VAR 0 13
33047: PPUSH
33048: CALL_OW 325
33052: PUSH
33053: LD_VAR 0 10
33057: PPUSH
33058: CALL_OW 255
33062: PPUSH
33063: LD_VAR 0 13
33067: PPUSH
33068: CALL_OW 325
33072: NOT
33073: AND
33074: IFFALSE 33103
// missile := Replace ( missile , missile + 1 , 3 ) ;
33076: LD_ADDR_VAR 0 14
33080: PUSH
33081: LD_VAR 0 14
33085: PPUSH
33086: LD_VAR 0 14
33090: PUSH
33091: LD_INT 1
33093: PLUS
33094: PPUSH
33095: LD_INT 3
33097: PPUSH
33098: CALL_OW 1
33102: ST_TO_ADDR
// if missile < 2 then
33103: LD_VAR 0 14
33107: PUSH
33108: LD_INT 2
33110: LESS
33111: IFFALSE 33115
// exit ;
33113: GO 33337
// x := GetX ( enemy ) ;
33115: LD_ADDR_VAR 0 4
33119: PUSH
33120: LD_VAR 0 10
33124: PPUSH
33125: CALL_OW 250
33129: ST_TO_ADDR
// y := GetY ( enemy ) ;
33130: LD_ADDR_VAR 0 5
33134: PUSH
33135: LD_VAR 0 10
33139: PPUSH
33140: CALL_OW 251
33144: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33145: LD_ADDR_VAR 0 6
33149: PUSH
33150: LD_VAR 0 4
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PPUSH
33159: LD_INT 1
33161: PPUSH
33162: CALL_OW 12
33166: PLUS
33167: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33168: LD_ADDR_VAR 0 7
33172: PUSH
33173: LD_VAR 0 5
33177: PUSH
33178: LD_INT 1
33180: NEG
33181: PPUSH
33182: LD_INT 1
33184: PPUSH
33185: CALL_OW 12
33189: PLUS
33190: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33191: LD_VAR 0 6
33195: PPUSH
33196: LD_VAR 0 7
33200: PPUSH
33201: CALL_OW 488
33205: NOT
33206: IFFALSE 33228
// begin _x := x ;
33208: LD_ADDR_VAR 0 6
33212: PUSH
33213: LD_VAR 0 4
33217: ST_TO_ADDR
// _y := y ;
33218: LD_ADDR_VAR 0 7
33222: PUSH
33223: LD_VAR 0 5
33227: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33228: LD_ADDR_VAR 0 3
33232: PUSH
33233: LD_INT 1
33235: PPUSH
33236: LD_VAR 0 14
33240: PPUSH
33241: CALL_OW 12
33245: ST_TO_ADDR
// case i of 1 :
33246: LD_VAR 0 3
33250: PUSH
33251: LD_INT 1
33253: DOUBLE
33254: EQUAL
33255: IFTRUE 33259
33257: GO 33276
33259: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33260: LD_VAR 0 1
33264: PPUSH
33265: LD_VAR 0 10
33269: PPUSH
33270: CALL_OW 115
33274: GO 33337
33276: LD_INT 2
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33306
33284: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33285: LD_VAR 0 1
33289: PPUSH
33290: LD_VAR 0 6
33294: PPUSH
33295: LD_VAR 0 7
33299: PPUSH
33300: CALL_OW 153
33304: GO 33337
33306: LD_INT 3
33308: DOUBLE
33309: EQUAL
33310: IFTRUE 33314
33312: GO 33336
33314: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33315: LD_VAR 0 1
33319: PPUSH
33320: LD_VAR 0 6
33324: PPUSH
33325: LD_VAR 0 7
33329: PPUSH
33330: CALL_OW 154
33334: GO 33337
33336: POP
// end ;
33337: LD_VAR 0 2
33341: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33342: LD_INT 0
33344: PPUSH
33345: PPUSH
33346: PPUSH
33347: PPUSH
33348: PPUSH
33349: PPUSH
// if not unit or not building then
33350: LD_VAR 0 1
33354: NOT
33355: PUSH
33356: LD_VAR 0 2
33360: NOT
33361: OR
33362: IFFALSE 33366
// exit ;
33364: GO 33524
// x := GetX ( building ) ;
33366: LD_ADDR_VAR 0 5
33370: PUSH
33371: LD_VAR 0 2
33375: PPUSH
33376: CALL_OW 250
33380: ST_TO_ADDR
// y := GetY ( building ) ;
33381: LD_ADDR_VAR 0 6
33385: PUSH
33386: LD_VAR 0 2
33390: PPUSH
33391: CALL_OW 251
33395: ST_TO_ADDR
// for i = 0 to 5 do
33396: LD_ADDR_VAR 0 4
33400: PUSH
33401: DOUBLE
33402: LD_INT 0
33404: DEC
33405: ST_TO_ADDR
33406: LD_INT 5
33408: PUSH
33409: FOR_TO
33410: IFFALSE 33522
// begin _x := ShiftX ( x , i , 3 ) ;
33412: LD_ADDR_VAR 0 7
33416: PUSH
33417: LD_VAR 0 5
33421: PPUSH
33422: LD_VAR 0 4
33426: PPUSH
33427: LD_INT 3
33429: PPUSH
33430: CALL_OW 272
33434: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33435: LD_ADDR_VAR 0 8
33439: PUSH
33440: LD_VAR 0 6
33444: PPUSH
33445: LD_VAR 0 4
33449: PPUSH
33450: LD_INT 3
33452: PPUSH
33453: CALL_OW 273
33457: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33458: LD_VAR 0 7
33462: PPUSH
33463: LD_VAR 0 8
33467: PPUSH
33468: CALL_OW 488
33472: NOT
33473: IFFALSE 33477
// continue ;
33475: GO 33409
// if HexInfo ( _x , _y ) = 0 then
33477: LD_VAR 0 7
33481: PPUSH
33482: LD_VAR 0 8
33486: PPUSH
33487: CALL_OW 428
33491: PUSH
33492: LD_INT 0
33494: EQUAL
33495: IFFALSE 33520
// begin ComMoveXY ( unit , _x , _y ) ;
33497: LD_VAR 0 1
33501: PPUSH
33502: LD_VAR 0 7
33506: PPUSH
33507: LD_VAR 0 8
33511: PPUSH
33512: CALL_OW 111
// exit ;
33516: POP
33517: POP
33518: GO 33524
// end ; end ;
33520: GO 33409
33522: POP
33523: POP
// end ;
33524: LD_VAR 0 3
33528: RET
// export function ScanBase ( side , base_area ) ; begin
33529: LD_INT 0
33531: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33532: LD_ADDR_VAR 0 3
33536: PUSH
33537: LD_VAR 0 2
33541: PPUSH
33542: LD_INT 81
33544: PUSH
33545: LD_VAR 0 1
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PPUSH
33554: CALL_OW 70
33558: ST_TO_ADDR
// end ;
33559: LD_VAR 0 3
33563: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33564: LD_INT 0
33566: PPUSH
33567: PPUSH
33568: PPUSH
33569: PPUSH
// result := false ;
33570: LD_ADDR_VAR 0 2
33574: PUSH
33575: LD_INT 0
33577: ST_TO_ADDR
// side := GetSide ( unit ) ;
33578: LD_ADDR_VAR 0 3
33582: PUSH
33583: LD_VAR 0 1
33587: PPUSH
33588: CALL_OW 255
33592: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33593: LD_ADDR_VAR 0 4
33597: PUSH
33598: LD_VAR 0 1
33602: PPUSH
33603: CALL_OW 248
33607: ST_TO_ADDR
// case nat of 1 :
33608: LD_VAR 0 4
33612: PUSH
33613: LD_INT 1
33615: DOUBLE
33616: EQUAL
33617: IFTRUE 33621
33619: GO 33632
33621: POP
// tech := tech_lassight ; 2 :
33622: LD_ADDR_VAR 0 5
33626: PUSH
33627: LD_INT 12
33629: ST_TO_ADDR
33630: GO 33671
33632: LD_INT 2
33634: DOUBLE
33635: EQUAL
33636: IFTRUE 33640
33638: GO 33651
33640: POP
// tech := tech_mortar ; 3 :
33641: LD_ADDR_VAR 0 5
33645: PUSH
33646: LD_INT 41
33648: ST_TO_ADDR
33649: GO 33671
33651: LD_INT 3
33653: DOUBLE
33654: EQUAL
33655: IFTRUE 33659
33657: GO 33670
33659: POP
// tech := tech_bazooka ; end ;
33660: LD_ADDR_VAR 0 5
33664: PUSH
33665: LD_INT 44
33667: ST_TO_ADDR
33668: GO 33671
33670: POP
// if Researched ( side , tech ) then
33671: LD_VAR 0 3
33675: PPUSH
33676: LD_VAR 0 5
33680: PPUSH
33681: CALL_OW 325
33685: IFFALSE 33712
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33687: LD_ADDR_VAR 0 2
33691: PUSH
33692: LD_INT 5
33694: PUSH
33695: LD_INT 8
33697: PUSH
33698: LD_INT 9
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: PUSH
33706: LD_VAR 0 4
33710: ARRAY
33711: ST_TO_ADDR
// end ;
33712: LD_VAR 0 2
33716: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33717: LD_INT 0
33719: PPUSH
33720: PPUSH
33721: PPUSH
// if not mines then
33722: LD_VAR 0 2
33726: NOT
33727: IFFALSE 33731
// exit ;
33729: GO 33875
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33731: LD_ADDR_VAR 0 5
33735: PUSH
33736: LD_INT 81
33738: PUSH
33739: LD_VAR 0 1
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 3
33750: PUSH
33751: LD_INT 21
33753: PUSH
33754: LD_INT 3
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PPUSH
33769: CALL_OW 69
33773: ST_TO_ADDR
// for i in mines do
33774: LD_ADDR_VAR 0 4
33778: PUSH
33779: LD_VAR 0 2
33783: PUSH
33784: FOR_IN
33785: IFFALSE 33873
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33787: LD_VAR 0 4
33791: PUSH
33792: LD_INT 1
33794: ARRAY
33795: PPUSH
33796: LD_VAR 0 4
33800: PUSH
33801: LD_INT 2
33803: ARRAY
33804: PPUSH
33805: CALL_OW 458
33809: NOT
33810: IFFALSE 33814
// continue ;
33812: GO 33784
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33814: LD_VAR 0 4
33818: PUSH
33819: LD_INT 1
33821: ARRAY
33822: PPUSH
33823: LD_VAR 0 4
33827: PUSH
33828: LD_INT 2
33830: ARRAY
33831: PPUSH
33832: CALL_OW 428
33836: PUSH
33837: LD_VAR 0 5
33841: IN
33842: IFFALSE 33871
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33844: LD_VAR 0 4
33848: PUSH
33849: LD_INT 1
33851: ARRAY
33852: PPUSH
33853: LD_VAR 0 4
33857: PUSH
33858: LD_INT 2
33860: ARRAY
33861: PPUSH
33862: LD_VAR 0 1
33866: PPUSH
33867: CALL_OW 456
// end ;
33871: GO 33784
33873: POP
33874: POP
// end ;
33875: LD_VAR 0 3
33879: RET
// export function Count ( array ) ; begin
33880: LD_INT 0
33882: PPUSH
// result := array + 0 ;
33883: LD_ADDR_VAR 0 2
33887: PUSH
33888: LD_VAR 0 1
33892: PUSH
33893: LD_INT 0
33895: PLUS
33896: ST_TO_ADDR
// end ;
33897: LD_VAR 0 2
33901: RET
// export function IsEmpty ( building ) ; begin
33902: LD_INT 0
33904: PPUSH
// if not building then
33905: LD_VAR 0 1
33909: NOT
33910: IFFALSE 33914
// exit ;
33912: GO 33957
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33914: LD_ADDR_VAR 0 2
33918: PUSH
33919: LD_VAR 0 1
33923: PUSH
33924: LD_INT 22
33926: PUSH
33927: LD_VAR 0 1
33931: PPUSH
33932: CALL_OW 255
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 58
33943: PUSH
33944: EMPTY
33945: LIST
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PPUSH
33951: CALL_OW 69
33955: IN
33956: ST_TO_ADDR
// end ;
33957: LD_VAR 0 2
33961: RET
// export function IsNotFull ( building ) ; var places ; begin
33962: LD_INT 0
33964: PPUSH
33965: PPUSH
// if not building then
33966: LD_VAR 0 1
33970: NOT
33971: IFFALSE 33975
// exit ;
33973: GO 34003
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33975: LD_ADDR_VAR 0 2
33979: PUSH
33980: LD_VAR 0 1
33984: PPUSH
33985: LD_INT 3
33987: PUSH
33988: LD_INT 62
33990: PUSH
33991: EMPTY
33992: LIST
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PPUSH
33998: CALL_OW 72
34002: ST_TO_ADDR
// end ;
34003: LD_VAR 0 2
34007: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34008: LD_INT 0
34010: PPUSH
34011: PPUSH
34012: PPUSH
34013: PPUSH
// tmp := [ ] ;
34014: LD_ADDR_VAR 0 3
34018: PUSH
34019: EMPTY
34020: ST_TO_ADDR
// list := [ ] ;
34021: LD_ADDR_VAR 0 5
34025: PUSH
34026: EMPTY
34027: ST_TO_ADDR
// for i = 16 to 25 do
34028: LD_ADDR_VAR 0 4
34032: PUSH
34033: DOUBLE
34034: LD_INT 16
34036: DEC
34037: ST_TO_ADDR
34038: LD_INT 25
34040: PUSH
34041: FOR_TO
34042: IFFALSE 34115
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34044: LD_ADDR_VAR 0 3
34048: PUSH
34049: LD_VAR 0 3
34053: PUSH
34054: LD_INT 22
34056: PUSH
34057: LD_VAR 0 1
34061: PPUSH
34062: CALL_OW 255
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 91
34073: PUSH
34074: LD_VAR 0 1
34078: PUSH
34079: LD_INT 6
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 30
34089: PUSH
34090: LD_VAR 0 4
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: LIST
34103: PUSH
34104: EMPTY
34105: LIST
34106: PPUSH
34107: CALL_OW 69
34111: ADD
34112: ST_TO_ADDR
34113: GO 34041
34115: POP
34116: POP
// for i = 1 to tmp do
34117: LD_ADDR_VAR 0 4
34121: PUSH
34122: DOUBLE
34123: LD_INT 1
34125: DEC
34126: ST_TO_ADDR
34127: LD_VAR 0 3
34131: PUSH
34132: FOR_TO
34133: IFFALSE 34221
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34135: LD_ADDR_VAR 0 5
34139: PUSH
34140: LD_VAR 0 5
34144: PUSH
34145: LD_VAR 0 3
34149: PUSH
34150: LD_VAR 0 4
34154: ARRAY
34155: PPUSH
34156: CALL_OW 266
34160: PUSH
34161: LD_VAR 0 3
34165: PUSH
34166: LD_VAR 0 4
34170: ARRAY
34171: PPUSH
34172: CALL_OW 250
34176: PUSH
34177: LD_VAR 0 3
34181: PUSH
34182: LD_VAR 0 4
34186: ARRAY
34187: PPUSH
34188: CALL_OW 251
34192: PUSH
34193: LD_VAR 0 3
34197: PUSH
34198: LD_VAR 0 4
34202: ARRAY
34203: PPUSH
34204: CALL_OW 254
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: PUSH
34215: EMPTY
34216: LIST
34217: ADD
34218: ST_TO_ADDR
34219: GO 34132
34221: POP
34222: POP
// result := list ;
34223: LD_ADDR_VAR 0 2
34227: PUSH
34228: LD_VAR 0 5
34232: ST_TO_ADDR
// end ;
34233: LD_VAR 0 2
34237: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34238: LD_INT 0
34240: PPUSH
34241: PPUSH
34242: PPUSH
34243: PPUSH
34244: PPUSH
34245: PPUSH
34246: PPUSH
// if not factory then
34247: LD_VAR 0 1
34251: NOT
34252: IFFALSE 34256
// exit ;
34254: GO 34849
// if control = control_apeman then
34256: LD_VAR 0 4
34260: PUSH
34261: LD_INT 5
34263: EQUAL
34264: IFFALSE 34373
// begin tmp := UnitsInside ( factory ) ;
34266: LD_ADDR_VAR 0 8
34270: PUSH
34271: LD_VAR 0 1
34275: PPUSH
34276: CALL_OW 313
34280: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34281: LD_VAR 0 8
34285: PPUSH
34286: LD_INT 25
34288: PUSH
34289: LD_INT 12
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PPUSH
34296: CALL_OW 72
34300: NOT
34301: IFFALSE 34311
// control := control_manual ;
34303: LD_ADDR_VAR 0 4
34307: PUSH
34308: LD_INT 1
34310: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34311: LD_ADDR_VAR 0 8
34315: PUSH
34316: LD_VAR 0 1
34320: PPUSH
34321: CALL 34008 0 1
34325: ST_TO_ADDR
// if tmp then
34326: LD_VAR 0 8
34330: IFFALSE 34373
// begin for i in tmp do
34332: LD_ADDR_VAR 0 7
34336: PUSH
34337: LD_VAR 0 8
34341: PUSH
34342: FOR_IN
34343: IFFALSE 34371
// if i [ 1 ] = b_ext_radio then
34345: LD_VAR 0 7
34349: PUSH
34350: LD_INT 1
34352: ARRAY
34353: PUSH
34354: LD_INT 22
34356: EQUAL
34357: IFFALSE 34369
// begin control := control_remote ;
34359: LD_ADDR_VAR 0 4
34363: PUSH
34364: LD_INT 2
34366: ST_TO_ADDR
// break ;
34367: GO 34371
// end ;
34369: GO 34342
34371: POP
34372: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34373: LD_VAR 0 1
34377: PPUSH
34378: LD_VAR 0 2
34382: PPUSH
34383: LD_VAR 0 3
34387: PPUSH
34388: LD_VAR 0 4
34392: PPUSH
34393: LD_VAR 0 5
34397: PPUSH
34398: CALL_OW 448
34402: IFFALSE 34437
// begin result := [ chassis , engine , control , weapon ] ;
34404: LD_ADDR_VAR 0 6
34408: PUSH
34409: LD_VAR 0 2
34413: PUSH
34414: LD_VAR 0 3
34418: PUSH
34419: LD_VAR 0 4
34423: PUSH
34424: LD_VAR 0 5
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: ST_TO_ADDR
// exit ;
34435: GO 34849
// end ; _chassis := AvailableChassisList ( factory ) ;
34437: LD_ADDR_VAR 0 9
34441: PUSH
34442: LD_VAR 0 1
34446: PPUSH
34447: CALL_OW 475
34451: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34452: LD_ADDR_VAR 0 11
34456: PUSH
34457: LD_VAR 0 1
34461: PPUSH
34462: CALL_OW 476
34466: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34467: LD_ADDR_VAR 0 12
34471: PUSH
34472: LD_VAR 0 1
34476: PPUSH
34477: CALL_OW 477
34481: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34482: LD_ADDR_VAR 0 10
34486: PUSH
34487: LD_VAR 0 1
34491: PPUSH
34492: CALL_OW 478
34496: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34497: LD_VAR 0 9
34501: NOT
34502: PUSH
34503: LD_VAR 0 11
34507: NOT
34508: OR
34509: PUSH
34510: LD_VAR 0 12
34514: NOT
34515: OR
34516: PUSH
34517: LD_VAR 0 10
34521: NOT
34522: OR
34523: IFFALSE 34558
// begin result := [ chassis , engine , control , weapon ] ;
34525: LD_ADDR_VAR 0 6
34529: PUSH
34530: LD_VAR 0 2
34534: PUSH
34535: LD_VAR 0 3
34539: PUSH
34540: LD_VAR 0 4
34544: PUSH
34545: LD_VAR 0 5
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: ST_TO_ADDR
// exit ;
34556: GO 34849
// end ; if not chassis in _chassis then
34558: LD_VAR 0 2
34562: PUSH
34563: LD_VAR 0 9
34567: IN
34568: NOT
34569: IFFALSE 34595
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34571: LD_ADDR_VAR 0 2
34575: PUSH
34576: LD_VAR 0 9
34580: PUSH
34581: LD_INT 1
34583: PPUSH
34584: LD_VAR 0 9
34588: PPUSH
34589: CALL_OW 12
34593: ARRAY
34594: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34595: LD_VAR 0 2
34599: PPUSH
34600: LD_VAR 0 3
34604: PPUSH
34605: CALL 34854 0 2
34609: NOT
34610: IFFALSE 34669
// repeat engine := _engine [ 1 ] ;
34612: LD_ADDR_VAR 0 3
34616: PUSH
34617: LD_VAR 0 11
34621: PUSH
34622: LD_INT 1
34624: ARRAY
34625: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34626: LD_ADDR_VAR 0 11
34630: PUSH
34631: LD_VAR 0 11
34635: PPUSH
34636: LD_INT 1
34638: PPUSH
34639: CALL_OW 3
34643: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34644: LD_VAR 0 2
34648: PPUSH
34649: LD_VAR 0 3
34653: PPUSH
34654: CALL 34854 0 2
34658: PUSH
34659: LD_VAR 0 11
34663: PUSH
34664: EMPTY
34665: EQUAL
34666: OR
34667: IFFALSE 34612
// if not control in _control then
34669: LD_VAR 0 4
34673: PUSH
34674: LD_VAR 0 12
34678: IN
34679: NOT
34680: IFFALSE 34706
// control := _control [ rand ( 1 , _control ) ] ;
34682: LD_ADDR_VAR 0 4
34686: PUSH
34687: LD_VAR 0 12
34691: PUSH
34692: LD_INT 1
34694: PPUSH
34695: LD_VAR 0 12
34699: PPUSH
34700: CALL_OW 12
34704: ARRAY
34705: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34706: LD_VAR 0 2
34710: PPUSH
34711: LD_VAR 0 5
34715: PPUSH
34716: CALL 35074 0 2
34720: NOT
34721: IFFALSE 34780
// repeat weapon := _weapon [ 1 ] ;
34723: LD_ADDR_VAR 0 5
34727: PUSH
34728: LD_VAR 0 10
34732: PUSH
34733: LD_INT 1
34735: ARRAY
34736: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34737: LD_ADDR_VAR 0 10
34741: PUSH
34742: LD_VAR 0 10
34746: PPUSH
34747: LD_INT 1
34749: PPUSH
34750: CALL_OW 3
34754: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34755: LD_VAR 0 2
34759: PPUSH
34760: LD_VAR 0 5
34764: PPUSH
34765: CALL 35074 0 2
34769: PUSH
34770: LD_VAR 0 10
34774: PUSH
34775: EMPTY
34776: EQUAL
34777: OR
34778: IFFALSE 34723
// result := [ ] ;
34780: LD_ADDR_VAR 0 6
34784: PUSH
34785: EMPTY
34786: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34787: LD_VAR 0 1
34791: PPUSH
34792: LD_VAR 0 2
34796: PPUSH
34797: LD_VAR 0 3
34801: PPUSH
34802: LD_VAR 0 4
34806: PPUSH
34807: LD_VAR 0 5
34811: PPUSH
34812: CALL_OW 448
34816: IFFALSE 34849
// result := [ chassis , engine , control , weapon ] ;
34818: LD_ADDR_VAR 0 6
34822: PUSH
34823: LD_VAR 0 2
34827: PUSH
34828: LD_VAR 0 3
34832: PUSH
34833: LD_VAR 0 4
34837: PUSH
34838: LD_VAR 0 5
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: ST_TO_ADDR
// end ;
34849: LD_VAR 0 6
34853: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34854: LD_INT 0
34856: PPUSH
// if not chassis or not engine then
34857: LD_VAR 0 1
34861: NOT
34862: PUSH
34863: LD_VAR 0 2
34867: NOT
34868: OR
34869: IFFALSE 34873
// exit ;
34871: GO 35069
// case engine of engine_solar :
34873: LD_VAR 0 2
34877: PUSH
34878: LD_INT 2
34880: DOUBLE
34881: EQUAL
34882: IFTRUE 34886
34884: GO 34924
34886: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34887: LD_ADDR_VAR 0 3
34891: PUSH
34892: LD_INT 11
34894: PUSH
34895: LD_INT 12
34897: PUSH
34898: LD_INT 13
34900: PUSH
34901: LD_INT 14
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: LD_INT 2
34909: PUSH
34910: LD_INT 3
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: ST_TO_ADDR
34922: GO 35053
34924: LD_INT 1
34926: DOUBLE
34927: EQUAL
34928: IFTRUE 34932
34930: GO 34994
34932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34933: LD_ADDR_VAR 0 3
34937: PUSH
34938: LD_INT 11
34940: PUSH
34941: LD_INT 12
34943: PUSH
34944: LD_INT 13
34946: PUSH
34947: LD_INT 14
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: LD_INT 2
34955: PUSH
34956: LD_INT 3
34958: PUSH
34959: LD_INT 4
34961: PUSH
34962: LD_INT 5
34964: PUSH
34965: LD_INT 21
34967: PUSH
34968: LD_INT 23
34970: PUSH
34971: LD_INT 22
34973: PUSH
34974: LD_INT 24
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: ST_TO_ADDR
34992: GO 35053
34994: LD_INT 3
34996: DOUBLE
34997: EQUAL
34998: IFTRUE 35002
35000: GO 35052
35002: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35003: LD_ADDR_VAR 0 3
35007: PUSH
35008: LD_INT 13
35010: PUSH
35011: LD_INT 14
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: LD_INT 3
35019: PUSH
35020: LD_INT 4
35022: PUSH
35023: LD_INT 5
35025: PUSH
35026: LD_INT 21
35028: PUSH
35029: LD_INT 22
35031: PUSH
35032: LD_INT 23
35034: PUSH
35035: LD_INT 24
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: ST_TO_ADDR
35050: GO 35053
35052: POP
// result := ( chassis in result ) ;
35053: LD_ADDR_VAR 0 3
35057: PUSH
35058: LD_VAR 0 1
35062: PUSH
35063: LD_VAR 0 3
35067: IN
35068: ST_TO_ADDR
// end ;
35069: LD_VAR 0 3
35073: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35074: LD_INT 0
35076: PPUSH
// if not chassis or not weapon then
35077: LD_VAR 0 1
35081: NOT
35082: PUSH
35083: LD_VAR 0 2
35087: NOT
35088: OR
35089: IFFALSE 35093
// exit ;
35091: GO 36153
// case weapon of us_machine_gun :
35093: LD_VAR 0 2
35097: PUSH
35098: LD_INT 2
35100: DOUBLE
35101: EQUAL
35102: IFTRUE 35106
35104: GO 35136
35106: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35107: LD_ADDR_VAR 0 3
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: LD_INT 2
35117: PUSH
35118: LD_INT 3
35120: PUSH
35121: LD_INT 4
35123: PUSH
35124: LD_INT 5
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: ST_TO_ADDR
35134: GO 36137
35136: LD_INT 3
35138: DOUBLE
35139: EQUAL
35140: IFTRUE 35144
35142: GO 35174
35144: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35145: LD_ADDR_VAR 0 3
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: LD_INT 3
35158: PUSH
35159: LD_INT 4
35161: PUSH
35162: LD_INT 5
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: ST_TO_ADDR
35172: GO 36137
35174: LD_INT 11
35176: DOUBLE
35177: EQUAL
35178: IFTRUE 35182
35180: GO 35212
35182: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35183: LD_ADDR_VAR 0 3
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: LD_INT 3
35196: PUSH
35197: LD_INT 4
35199: PUSH
35200: LD_INT 5
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: ST_TO_ADDR
35210: GO 36137
35212: LD_INT 4
35214: DOUBLE
35215: EQUAL
35216: IFTRUE 35220
35218: GO 35246
35220: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35221: LD_ADDR_VAR 0 3
35225: PUSH
35226: LD_INT 2
35228: PUSH
35229: LD_INT 3
35231: PUSH
35232: LD_INT 4
35234: PUSH
35235: LD_INT 5
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: ST_TO_ADDR
35244: GO 36137
35246: LD_INT 5
35248: DOUBLE
35249: EQUAL
35250: IFTRUE 35254
35252: GO 35280
35254: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35255: LD_ADDR_VAR 0 3
35259: PUSH
35260: LD_INT 2
35262: PUSH
35263: LD_INT 3
35265: PUSH
35266: LD_INT 4
35268: PUSH
35269: LD_INT 5
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: ST_TO_ADDR
35278: GO 36137
35280: LD_INT 9
35282: DOUBLE
35283: EQUAL
35284: IFTRUE 35288
35286: GO 35314
35288: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35289: LD_ADDR_VAR 0 3
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: LD_INT 3
35299: PUSH
35300: LD_INT 4
35302: PUSH
35303: LD_INT 5
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: ST_TO_ADDR
35312: GO 36137
35314: LD_INT 7
35316: DOUBLE
35317: EQUAL
35318: IFTRUE 35322
35320: GO 35348
35322: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35323: LD_ADDR_VAR 0 3
35327: PUSH
35328: LD_INT 2
35330: PUSH
35331: LD_INT 3
35333: PUSH
35334: LD_INT 4
35336: PUSH
35337: LD_INT 5
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: ST_TO_ADDR
35346: GO 36137
35348: LD_INT 12
35350: DOUBLE
35351: EQUAL
35352: IFTRUE 35356
35354: GO 35382
35356: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35357: LD_ADDR_VAR 0 3
35361: PUSH
35362: LD_INT 2
35364: PUSH
35365: LD_INT 3
35367: PUSH
35368: LD_INT 4
35370: PUSH
35371: LD_INT 5
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: ST_TO_ADDR
35380: GO 36137
35382: LD_INT 13
35384: DOUBLE
35385: EQUAL
35386: IFTRUE 35390
35388: GO 35416
35390: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35391: LD_ADDR_VAR 0 3
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: LD_INT 3
35401: PUSH
35402: LD_INT 4
35404: PUSH
35405: LD_INT 5
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: ST_TO_ADDR
35414: GO 36137
35416: LD_INT 14
35418: DOUBLE
35419: EQUAL
35420: IFTRUE 35424
35422: GO 35442
35424: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35425: LD_ADDR_VAR 0 3
35429: PUSH
35430: LD_INT 4
35432: PUSH
35433: LD_INT 5
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: ST_TO_ADDR
35440: GO 36137
35442: LD_INT 6
35444: DOUBLE
35445: EQUAL
35446: IFTRUE 35450
35448: GO 35468
35450: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35451: LD_ADDR_VAR 0 3
35455: PUSH
35456: LD_INT 4
35458: PUSH
35459: LD_INT 5
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: ST_TO_ADDR
35466: GO 36137
35468: LD_INT 10
35470: DOUBLE
35471: EQUAL
35472: IFTRUE 35476
35474: GO 35494
35476: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35477: LD_ADDR_VAR 0 3
35481: PUSH
35482: LD_INT 4
35484: PUSH
35485: LD_INT 5
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: ST_TO_ADDR
35492: GO 36137
35494: LD_INT 22
35496: DOUBLE
35497: EQUAL
35498: IFTRUE 35502
35500: GO 35528
35502: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35503: LD_ADDR_VAR 0 3
35507: PUSH
35508: LD_INT 11
35510: PUSH
35511: LD_INT 12
35513: PUSH
35514: LD_INT 13
35516: PUSH
35517: LD_INT 14
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: ST_TO_ADDR
35526: GO 36137
35528: LD_INT 23
35530: DOUBLE
35531: EQUAL
35532: IFTRUE 35536
35534: GO 35562
35536: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35537: LD_ADDR_VAR 0 3
35541: PUSH
35542: LD_INT 11
35544: PUSH
35545: LD_INT 12
35547: PUSH
35548: LD_INT 13
35550: PUSH
35551: LD_INT 14
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: ST_TO_ADDR
35560: GO 36137
35562: LD_INT 24
35564: DOUBLE
35565: EQUAL
35566: IFTRUE 35570
35568: GO 35596
35570: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35571: LD_ADDR_VAR 0 3
35575: PUSH
35576: LD_INT 11
35578: PUSH
35579: LD_INT 12
35581: PUSH
35582: LD_INT 13
35584: PUSH
35585: LD_INT 14
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: ST_TO_ADDR
35594: GO 36137
35596: LD_INT 30
35598: DOUBLE
35599: EQUAL
35600: IFTRUE 35604
35602: GO 35630
35604: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35605: LD_ADDR_VAR 0 3
35609: PUSH
35610: LD_INT 11
35612: PUSH
35613: LD_INT 12
35615: PUSH
35616: LD_INT 13
35618: PUSH
35619: LD_INT 14
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: ST_TO_ADDR
35628: GO 36137
35630: LD_INT 25
35632: DOUBLE
35633: EQUAL
35634: IFTRUE 35638
35636: GO 35656
35638: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35639: LD_ADDR_VAR 0 3
35643: PUSH
35644: LD_INT 13
35646: PUSH
35647: LD_INT 14
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: ST_TO_ADDR
35654: GO 36137
35656: LD_INT 27
35658: DOUBLE
35659: EQUAL
35660: IFTRUE 35664
35662: GO 35682
35664: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35665: LD_ADDR_VAR 0 3
35669: PUSH
35670: LD_INT 13
35672: PUSH
35673: LD_INT 14
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: ST_TO_ADDR
35680: GO 36137
35682: LD_INT 92
35684: DOUBLE
35685: EQUAL
35686: IFTRUE 35690
35688: GO 35716
35690: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35691: LD_ADDR_VAR 0 3
35695: PUSH
35696: LD_INT 11
35698: PUSH
35699: LD_INT 12
35701: PUSH
35702: LD_INT 13
35704: PUSH
35705: LD_INT 14
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: ST_TO_ADDR
35714: GO 36137
35716: LD_INT 28
35718: DOUBLE
35719: EQUAL
35720: IFTRUE 35724
35722: GO 35742
35724: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35725: LD_ADDR_VAR 0 3
35729: PUSH
35730: LD_INT 13
35732: PUSH
35733: LD_INT 14
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: ST_TO_ADDR
35740: GO 36137
35742: LD_INT 29
35744: DOUBLE
35745: EQUAL
35746: IFTRUE 35750
35748: GO 35768
35750: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35751: LD_ADDR_VAR 0 3
35755: PUSH
35756: LD_INT 13
35758: PUSH
35759: LD_INT 14
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: ST_TO_ADDR
35766: GO 36137
35768: LD_INT 31
35770: DOUBLE
35771: EQUAL
35772: IFTRUE 35776
35774: GO 35794
35776: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35777: LD_ADDR_VAR 0 3
35781: PUSH
35782: LD_INT 13
35784: PUSH
35785: LD_INT 14
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: ST_TO_ADDR
35792: GO 36137
35794: LD_INT 26
35796: DOUBLE
35797: EQUAL
35798: IFTRUE 35802
35800: GO 35820
35802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35803: LD_ADDR_VAR 0 3
35807: PUSH
35808: LD_INT 13
35810: PUSH
35811: LD_INT 14
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: ST_TO_ADDR
35818: GO 36137
35820: LD_INT 42
35822: DOUBLE
35823: EQUAL
35824: IFTRUE 35828
35826: GO 35854
35828: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35829: LD_ADDR_VAR 0 3
35833: PUSH
35834: LD_INT 21
35836: PUSH
35837: LD_INT 22
35839: PUSH
35840: LD_INT 23
35842: PUSH
35843: LD_INT 24
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: ST_TO_ADDR
35852: GO 36137
35854: LD_INT 43
35856: DOUBLE
35857: EQUAL
35858: IFTRUE 35862
35860: GO 35888
35862: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35863: LD_ADDR_VAR 0 3
35867: PUSH
35868: LD_INT 21
35870: PUSH
35871: LD_INT 22
35873: PUSH
35874: LD_INT 23
35876: PUSH
35877: LD_INT 24
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: ST_TO_ADDR
35886: GO 36137
35888: LD_INT 44
35890: DOUBLE
35891: EQUAL
35892: IFTRUE 35896
35894: GO 35922
35896: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35897: LD_ADDR_VAR 0 3
35901: PUSH
35902: LD_INT 21
35904: PUSH
35905: LD_INT 22
35907: PUSH
35908: LD_INT 23
35910: PUSH
35911: LD_INT 24
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: ST_TO_ADDR
35920: GO 36137
35922: LD_INT 45
35924: DOUBLE
35925: EQUAL
35926: IFTRUE 35930
35928: GO 35956
35930: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35931: LD_ADDR_VAR 0 3
35935: PUSH
35936: LD_INT 21
35938: PUSH
35939: LD_INT 22
35941: PUSH
35942: LD_INT 23
35944: PUSH
35945: LD_INT 24
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: ST_TO_ADDR
35954: GO 36137
35956: LD_INT 49
35958: DOUBLE
35959: EQUAL
35960: IFTRUE 35964
35962: GO 35990
35964: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35965: LD_ADDR_VAR 0 3
35969: PUSH
35970: LD_INT 21
35972: PUSH
35973: LD_INT 22
35975: PUSH
35976: LD_INT 23
35978: PUSH
35979: LD_INT 24
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: ST_TO_ADDR
35988: GO 36137
35990: LD_INT 51
35992: DOUBLE
35993: EQUAL
35994: IFTRUE 35998
35996: GO 36024
35998: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35999: LD_ADDR_VAR 0 3
36003: PUSH
36004: LD_INT 21
36006: PUSH
36007: LD_INT 22
36009: PUSH
36010: LD_INT 23
36012: PUSH
36013: LD_INT 24
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: ST_TO_ADDR
36022: GO 36137
36024: LD_INT 52
36026: DOUBLE
36027: EQUAL
36028: IFTRUE 36032
36030: GO 36058
36032: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36033: LD_ADDR_VAR 0 3
36037: PUSH
36038: LD_INT 21
36040: PUSH
36041: LD_INT 22
36043: PUSH
36044: LD_INT 23
36046: PUSH
36047: LD_INT 24
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: ST_TO_ADDR
36056: GO 36137
36058: LD_INT 53
36060: DOUBLE
36061: EQUAL
36062: IFTRUE 36066
36064: GO 36084
36066: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36067: LD_ADDR_VAR 0 3
36071: PUSH
36072: LD_INT 23
36074: PUSH
36075: LD_INT 24
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: ST_TO_ADDR
36082: GO 36137
36084: LD_INT 46
36086: DOUBLE
36087: EQUAL
36088: IFTRUE 36092
36090: GO 36110
36092: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36093: LD_ADDR_VAR 0 3
36097: PUSH
36098: LD_INT 23
36100: PUSH
36101: LD_INT 24
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: ST_TO_ADDR
36108: GO 36137
36110: LD_INT 47
36112: DOUBLE
36113: EQUAL
36114: IFTRUE 36118
36116: GO 36136
36118: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36119: LD_ADDR_VAR 0 3
36123: PUSH
36124: LD_INT 23
36126: PUSH
36127: LD_INT 24
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: ST_TO_ADDR
36134: GO 36137
36136: POP
// result := ( chassis in result ) ;
36137: LD_ADDR_VAR 0 3
36141: PUSH
36142: LD_VAR 0 1
36146: PUSH
36147: LD_VAR 0 3
36151: IN
36152: ST_TO_ADDR
// end ;
36153: LD_VAR 0 3
36157: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36158: LD_INT 0
36160: PPUSH
36161: PPUSH
36162: PPUSH
36163: PPUSH
36164: PPUSH
36165: PPUSH
36166: PPUSH
// result := array ;
36167: LD_ADDR_VAR 0 5
36171: PUSH
36172: LD_VAR 0 1
36176: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36177: LD_VAR 0 1
36181: NOT
36182: PUSH
36183: LD_VAR 0 2
36187: NOT
36188: OR
36189: PUSH
36190: LD_VAR 0 3
36194: NOT
36195: OR
36196: PUSH
36197: LD_VAR 0 2
36201: PUSH
36202: LD_VAR 0 1
36206: GREATER
36207: OR
36208: PUSH
36209: LD_VAR 0 3
36213: PUSH
36214: LD_VAR 0 1
36218: GREATER
36219: OR
36220: IFFALSE 36224
// exit ;
36222: GO 36520
// if direction then
36224: LD_VAR 0 4
36228: IFFALSE 36292
// begin d := 1 ;
36230: LD_ADDR_VAR 0 9
36234: PUSH
36235: LD_INT 1
36237: ST_TO_ADDR
// if i_from > i_to then
36238: LD_VAR 0 2
36242: PUSH
36243: LD_VAR 0 3
36247: GREATER
36248: IFFALSE 36274
// length := ( array - i_from ) + i_to else
36250: LD_ADDR_VAR 0 11
36254: PUSH
36255: LD_VAR 0 1
36259: PUSH
36260: LD_VAR 0 2
36264: MINUS
36265: PUSH
36266: LD_VAR 0 3
36270: PLUS
36271: ST_TO_ADDR
36272: GO 36290
// length := i_to - i_from ;
36274: LD_ADDR_VAR 0 11
36278: PUSH
36279: LD_VAR 0 3
36283: PUSH
36284: LD_VAR 0 2
36288: MINUS
36289: ST_TO_ADDR
// end else
36290: GO 36353
// begin d := - 1 ;
36292: LD_ADDR_VAR 0 9
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: ST_TO_ADDR
// if i_from > i_to then
36301: LD_VAR 0 2
36305: PUSH
36306: LD_VAR 0 3
36310: GREATER
36311: IFFALSE 36331
// length := i_from - i_to else
36313: LD_ADDR_VAR 0 11
36317: PUSH
36318: LD_VAR 0 2
36322: PUSH
36323: LD_VAR 0 3
36327: MINUS
36328: ST_TO_ADDR
36329: GO 36353
// length := ( array - i_to ) + i_from ;
36331: LD_ADDR_VAR 0 11
36335: PUSH
36336: LD_VAR 0 1
36340: PUSH
36341: LD_VAR 0 3
36345: MINUS
36346: PUSH
36347: LD_VAR 0 2
36351: PLUS
36352: ST_TO_ADDR
// end ; if not length then
36353: LD_VAR 0 11
36357: NOT
36358: IFFALSE 36362
// exit ;
36360: GO 36520
// tmp := array ;
36362: LD_ADDR_VAR 0 10
36366: PUSH
36367: LD_VAR 0 1
36371: ST_TO_ADDR
// for i = 1 to length do
36372: LD_ADDR_VAR 0 6
36376: PUSH
36377: DOUBLE
36378: LD_INT 1
36380: DEC
36381: ST_TO_ADDR
36382: LD_VAR 0 11
36386: PUSH
36387: FOR_TO
36388: IFFALSE 36508
// begin for j = 1 to array do
36390: LD_ADDR_VAR 0 7
36394: PUSH
36395: DOUBLE
36396: LD_INT 1
36398: DEC
36399: ST_TO_ADDR
36400: LD_VAR 0 1
36404: PUSH
36405: FOR_TO
36406: IFFALSE 36494
// begin k := j + d ;
36408: LD_ADDR_VAR 0 8
36412: PUSH
36413: LD_VAR 0 7
36417: PUSH
36418: LD_VAR 0 9
36422: PLUS
36423: ST_TO_ADDR
// if k > array then
36424: LD_VAR 0 8
36428: PUSH
36429: LD_VAR 0 1
36433: GREATER
36434: IFFALSE 36444
// k := 1 ;
36436: LD_ADDR_VAR 0 8
36440: PUSH
36441: LD_INT 1
36443: ST_TO_ADDR
// if not k then
36444: LD_VAR 0 8
36448: NOT
36449: IFFALSE 36461
// k := array ;
36451: LD_ADDR_VAR 0 8
36455: PUSH
36456: LD_VAR 0 1
36460: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36461: LD_ADDR_VAR 0 10
36465: PUSH
36466: LD_VAR 0 10
36470: PPUSH
36471: LD_VAR 0 8
36475: PPUSH
36476: LD_VAR 0 1
36480: PUSH
36481: LD_VAR 0 7
36485: ARRAY
36486: PPUSH
36487: CALL_OW 1
36491: ST_TO_ADDR
// end ;
36492: GO 36405
36494: POP
36495: POP
// array := tmp ;
36496: LD_ADDR_VAR 0 1
36500: PUSH
36501: LD_VAR 0 10
36505: ST_TO_ADDR
// end ;
36506: GO 36387
36508: POP
36509: POP
// result := array ;
36510: LD_ADDR_VAR 0 5
36514: PUSH
36515: LD_VAR 0 1
36519: ST_TO_ADDR
// end ;
36520: LD_VAR 0 5
36524: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36525: LD_INT 0
36527: PPUSH
36528: PPUSH
// result := 0 ;
36529: LD_ADDR_VAR 0 3
36533: PUSH
36534: LD_INT 0
36536: ST_TO_ADDR
// if not array or not value in array then
36537: LD_VAR 0 1
36541: NOT
36542: PUSH
36543: LD_VAR 0 2
36547: PUSH
36548: LD_VAR 0 1
36552: IN
36553: NOT
36554: OR
36555: IFFALSE 36559
// exit ;
36557: GO 36613
// for i = 1 to array do
36559: LD_ADDR_VAR 0 4
36563: PUSH
36564: DOUBLE
36565: LD_INT 1
36567: DEC
36568: ST_TO_ADDR
36569: LD_VAR 0 1
36573: PUSH
36574: FOR_TO
36575: IFFALSE 36611
// if value = array [ i ] then
36577: LD_VAR 0 2
36581: PUSH
36582: LD_VAR 0 1
36586: PUSH
36587: LD_VAR 0 4
36591: ARRAY
36592: EQUAL
36593: IFFALSE 36609
// begin result := i ;
36595: LD_ADDR_VAR 0 3
36599: PUSH
36600: LD_VAR 0 4
36604: ST_TO_ADDR
// exit ;
36605: POP
36606: POP
36607: GO 36613
// end ;
36609: GO 36574
36611: POP
36612: POP
// end ;
36613: LD_VAR 0 3
36617: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36618: LD_INT 0
36620: PPUSH
// vc_chassis := chassis ;
36621: LD_ADDR_OWVAR 37
36625: PUSH
36626: LD_VAR 0 1
36630: ST_TO_ADDR
// vc_engine := engine ;
36631: LD_ADDR_OWVAR 39
36635: PUSH
36636: LD_VAR 0 2
36640: ST_TO_ADDR
// vc_control := control ;
36641: LD_ADDR_OWVAR 38
36645: PUSH
36646: LD_VAR 0 3
36650: ST_TO_ADDR
// vc_weapon := weapon ;
36651: LD_ADDR_OWVAR 40
36655: PUSH
36656: LD_VAR 0 4
36660: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36661: LD_ADDR_OWVAR 41
36665: PUSH
36666: LD_VAR 0 5
36670: ST_TO_ADDR
// end ;
36671: LD_VAR 0 6
36675: RET
// export function WantPlant ( unit ) ; var task ; begin
36676: LD_INT 0
36678: PPUSH
36679: PPUSH
// result := false ;
36680: LD_ADDR_VAR 0 2
36684: PUSH
36685: LD_INT 0
36687: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36688: LD_ADDR_VAR 0 3
36692: PUSH
36693: LD_VAR 0 1
36697: PPUSH
36698: CALL_OW 437
36702: ST_TO_ADDR
// if task then
36703: LD_VAR 0 3
36707: IFFALSE 36735
// if task [ 1 ] [ 1 ] = p then
36709: LD_VAR 0 3
36713: PUSH
36714: LD_INT 1
36716: ARRAY
36717: PUSH
36718: LD_INT 1
36720: ARRAY
36721: PUSH
36722: LD_STRING p
36724: EQUAL
36725: IFFALSE 36735
// result := true ;
36727: LD_ADDR_VAR 0 2
36731: PUSH
36732: LD_INT 1
36734: ST_TO_ADDR
// end ;
36735: LD_VAR 0 2
36739: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36740: LD_INT 0
36742: PPUSH
36743: PPUSH
36744: PPUSH
36745: PPUSH
// if pos < 1 then
36746: LD_VAR 0 2
36750: PUSH
36751: LD_INT 1
36753: LESS
36754: IFFALSE 36758
// exit ;
36756: GO 37061
// if pos = 1 then
36758: LD_VAR 0 2
36762: PUSH
36763: LD_INT 1
36765: EQUAL
36766: IFFALSE 36799
// result := Replace ( arr , pos [ 1 ] , value ) else
36768: LD_ADDR_VAR 0 4
36772: PUSH
36773: LD_VAR 0 1
36777: PPUSH
36778: LD_VAR 0 2
36782: PUSH
36783: LD_INT 1
36785: ARRAY
36786: PPUSH
36787: LD_VAR 0 3
36791: PPUSH
36792: CALL_OW 1
36796: ST_TO_ADDR
36797: GO 37061
// begin tmp := arr ;
36799: LD_ADDR_VAR 0 6
36803: PUSH
36804: LD_VAR 0 1
36808: ST_TO_ADDR
// s_arr := [ tmp ] ;
36809: LD_ADDR_VAR 0 7
36813: PUSH
36814: LD_VAR 0 6
36818: PUSH
36819: EMPTY
36820: LIST
36821: ST_TO_ADDR
// for i = 1 to pos - 1 do
36822: LD_ADDR_VAR 0 5
36826: PUSH
36827: DOUBLE
36828: LD_INT 1
36830: DEC
36831: ST_TO_ADDR
36832: LD_VAR 0 2
36836: PUSH
36837: LD_INT 1
36839: MINUS
36840: PUSH
36841: FOR_TO
36842: IFFALSE 36887
// begin tmp := tmp [ pos [ i ] ] ;
36844: LD_ADDR_VAR 0 6
36848: PUSH
36849: LD_VAR 0 6
36853: PUSH
36854: LD_VAR 0 2
36858: PUSH
36859: LD_VAR 0 5
36863: ARRAY
36864: ARRAY
36865: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36866: LD_ADDR_VAR 0 7
36870: PUSH
36871: LD_VAR 0 7
36875: PUSH
36876: LD_VAR 0 6
36880: PUSH
36881: EMPTY
36882: LIST
36883: ADD
36884: ST_TO_ADDR
// end ;
36885: GO 36841
36887: POP
36888: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36889: LD_ADDR_VAR 0 6
36893: PUSH
36894: LD_VAR 0 6
36898: PPUSH
36899: LD_VAR 0 2
36903: PUSH
36904: LD_VAR 0 2
36908: ARRAY
36909: PPUSH
36910: LD_VAR 0 3
36914: PPUSH
36915: CALL_OW 1
36919: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36920: LD_ADDR_VAR 0 7
36924: PUSH
36925: LD_VAR 0 7
36929: PPUSH
36930: LD_VAR 0 7
36934: PPUSH
36935: LD_VAR 0 6
36939: PPUSH
36940: CALL_OW 1
36944: ST_TO_ADDR
// for i = s_arr downto 2 do
36945: LD_ADDR_VAR 0 5
36949: PUSH
36950: DOUBLE
36951: LD_VAR 0 7
36955: INC
36956: ST_TO_ADDR
36957: LD_INT 2
36959: PUSH
36960: FOR_DOWNTO
36961: IFFALSE 37045
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36963: LD_ADDR_VAR 0 6
36967: PUSH
36968: LD_VAR 0 7
36972: PUSH
36973: LD_VAR 0 5
36977: PUSH
36978: LD_INT 1
36980: MINUS
36981: ARRAY
36982: PPUSH
36983: LD_VAR 0 2
36987: PUSH
36988: LD_VAR 0 5
36992: PUSH
36993: LD_INT 1
36995: MINUS
36996: ARRAY
36997: PPUSH
36998: LD_VAR 0 7
37002: PUSH
37003: LD_VAR 0 5
37007: ARRAY
37008: PPUSH
37009: CALL_OW 1
37013: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37014: LD_ADDR_VAR 0 7
37018: PUSH
37019: LD_VAR 0 7
37023: PPUSH
37024: LD_VAR 0 5
37028: PUSH
37029: LD_INT 1
37031: MINUS
37032: PPUSH
37033: LD_VAR 0 6
37037: PPUSH
37038: CALL_OW 1
37042: ST_TO_ADDR
// end ;
37043: GO 36960
37045: POP
37046: POP
// result := s_arr [ 1 ] ;
37047: LD_ADDR_VAR 0 4
37051: PUSH
37052: LD_VAR 0 7
37056: PUSH
37057: LD_INT 1
37059: ARRAY
37060: ST_TO_ADDR
// end ; end ;
37061: LD_VAR 0 4
37065: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37066: LD_INT 0
37068: PPUSH
37069: PPUSH
// if not list then
37070: LD_VAR 0 1
37074: NOT
37075: IFFALSE 37079
// exit ;
37077: GO 37170
// i := list [ pos1 ] ;
37079: LD_ADDR_VAR 0 5
37083: PUSH
37084: LD_VAR 0 1
37088: PUSH
37089: LD_VAR 0 2
37093: ARRAY
37094: ST_TO_ADDR
// if not i then
37095: LD_VAR 0 5
37099: NOT
37100: IFFALSE 37104
// exit ;
37102: GO 37170
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37104: LD_ADDR_VAR 0 1
37108: PUSH
37109: LD_VAR 0 1
37113: PPUSH
37114: LD_VAR 0 2
37118: PPUSH
37119: LD_VAR 0 1
37123: PUSH
37124: LD_VAR 0 3
37128: ARRAY
37129: PPUSH
37130: CALL_OW 1
37134: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37135: LD_ADDR_VAR 0 1
37139: PUSH
37140: LD_VAR 0 1
37144: PPUSH
37145: LD_VAR 0 3
37149: PPUSH
37150: LD_VAR 0 5
37154: PPUSH
37155: CALL_OW 1
37159: ST_TO_ADDR
// result := list ;
37160: LD_ADDR_VAR 0 4
37164: PUSH
37165: LD_VAR 0 1
37169: ST_TO_ADDR
// end ;
37170: LD_VAR 0 4
37174: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37175: LD_INT 0
37177: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37178: LD_ADDR_VAR 0 5
37182: PUSH
37183: LD_VAR 0 1
37187: PPUSH
37188: CALL_OW 250
37192: PPUSH
37193: LD_VAR 0 1
37197: PPUSH
37198: CALL_OW 251
37202: PPUSH
37203: LD_VAR 0 2
37207: PPUSH
37208: LD_VAR 0 3
37212: PPUSH
37213: LD_VAR 0 4
37217: PPUSH
37218: CALL 37596 0 5
37222: ST_TO_ADDR
// end ;
37223: LD_VAR 0 5
37227: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37228: LD_INT 0
37230: PPUSH
37231: PPUSH
37232: PPUSH
37233: PPUSH
// if not list or not unit then
37234: LD_VAR 0 2
37238: NOT
37239: PUSH
37240: LD_VAR 0 1
37244: NOT
37245: OR
37246: IFFALSE 37250
// exit ;
37248: GO 37591
// result := [ ] ;
37250: LD_ADDR_VAR 0 5
37254: PUSH
37255: EMPTY
37256: ST_TO_ADDR
// for i in list do
37257: LD_ADDR_VAR 0 6
37261: PUSH
37262: LD_VAR 0 2
37266: PUSH
37267: FOR_IN
37268: IFFALSE 37486
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37270: LD_ADDR_VAR 0 8
37274: PUSH
37275: LD_VAR 0 1
37279: PPUSH
37280: LD_VAR 0 6
37284: PUSH
37285: LD_INT 1
37287: ARRAY
37288: PPUSH
37289: LD_VAR 0 6
37293: PUSH
37294: LD_INT 2
37296: ARRAY
37297: PPUSH
37298: CALL_OW 297
37302: ST_TO_ADDR
// if not Count ( result ) then
37303: LD_VAR 0 5
37307: PPUSH
37308: CALL 33880 0 1
37312: NOT
37313: IFFALSE 37346
// begin result := Join ( result , [ i , tmp ] ) ;
37315: LD_ADDR_VAR 0 5
37319: PUSH
37320: LD_VAR 0 5
37324: PPUSH
37325: LD_VAR 0 6
37329: PUSH
37330: LD_VAR 0 8
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PPUSH
37339: CALL 69469 0 2
37343: ST_TO_ADDR
// continue ;
37344: GO 37267
// end ; if result [ result ] [ 2 ] <= tmp then
37346: LD_VAR 0 5
37350: PUSH
37351: LD_VAR 0 5
37355: ARRAY
37356: PUSH
37357: LD_INT 2
37359: ARRAY
37360: PUSH
37361: LD_VAR 0 8
37365: LESSEQUAL
37366: IFFALSE 37399
// result := Join ( result , [ i , tmp ] ) else
37368: LD_ADDR_VAR 0 5
37372: PUSH
37373: LD_VAR 0 5
37377: PPUSH
37378: LD_VAR 0 6
37382: PUSH
37383: LD_VAR 0 8
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PPUSH
37392: CALL 69469 0 2
37396: ST_TO_ADDR
37397: GO 37484
// begin for j := 1 to Count ( result ) do
37399: LD_ADDR_VAR 0 7
37403: PUSH
37404: DOUBLE
37405: LD_INT 1
37407: DEC
37408: ST_TO_ADDR
37409: LD_VAR 0 5
37413: PPUSH
37414: CALL 33880 0 1
37418: PUSH
37419: FOR_TO
37420: IFFALSE 37482
// begin if tmp < result [ j ] [ 2 ] then
37422: LD_VAR 0 8
37426: PUSH
37427: LD_VAR 0 5
37431: PUSH
37432: LD_VAR 0 7
37436: ARRAY
37437: PUSH
37438: LD_INT 2
37440: ARRAY
37441: LESS
37442: IFFALSE 37480
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37444: LD_ADDR_VAR 0 5
37448: PUSH
37449: LD_VAR 0 5
37453: PPUSH
37454: LD_VAR 0 7
37458: PPUSH
37459: LD_VAR 0 6
37463: PUSH
37464: LD_VAR 0 8
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PPUSH
37473: CALL_OW 2
37477: ST_TO_ADDR
// break ;
37478: GO 37482
// end ; end ;
37480: GO 37419
37482: POP
37483: POP
// end ; end ;
37484: GO 37267
37486: POP
37487: POP
// if result and not asc then
37488: LD_VAR 0 5
37492: PUSH
37493: LD_VAR 0 3
37497: NOT
37498: AND
37499: IFFALSE 37516
// result := ReverseArray ( result ) ;
37501: LD_ADDR_VAR 0 5
37505: PUSH
37506: LD_VAR 0 5
37510: PPUSH
37511: CALL 64756 0 1
37515: ST_TO_ADDR
// tmp := [ ] ;
37516: LD_ADDR_VAR 0 8
37520: PUSH
37521: EMPTY
37522: ST_TO_ADDR
// if mode then
37523: LD_VAR 0 4
37527: IFFALSE 37591
// begin for i := 1 to result do
37529: LD_ADDR_VAR 0 6
37533: PUSH
37534: DOUBLE
37535: LD_INT 1
37537: DEC
37538: ST_TO_ADDR
37539: LD_VAR 0 5
37543: PUSH
37544: FOR_TO
37545: IFFALSE 37579
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37547: LD_ADDR_VAR 0 8
37551: PUSH
37552: LD_VAR 0 8
37556: PPUSH
37557: LD_VAR 0 5
37561: PUSH
37562: LD_VAR 0 6
37566: ARRAY
37567: PUSH
37568: LD_INT 1
37570: ARRAY
37571: PPUSH
37572: CALL 69469 0 2
37576: ST_TO_ADDR
37577: GO 37544
37579: POP
37580: POP
// result := tmp ;
37581: LD_ADDR_VAR 0 5
37585: PUSH
37586: LD_VAR 0 8
37590: ST_TO_ADDR
// end ; end ;
37591: LD_VAR 0 5
37595: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37596: LD_INT 0
37598: PPUSH
37599: PPUSH
37600: PPUSH
37601: PPUSH
// if not list then
37602: LD_VAR 0 3
37606: NOT
37607: IFFALSE 37611
// exit ;
37609: GO 37999
// result := [ ] ;
37611: LD_ADDR_VAR 0 6
37615: PUSH
37616: EMPTY
37617: ST_TO_ADDR
// for i in list do
37618: LD_ADDR_VAR 0 7
37622: PUSH
37623: LD_VAR 0 3
37627: PUSH
37628: FOR_IN
37629: IFFALSE 37831
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37631: LD_ADDR_VAR 0 9
37635: PUSH
37636: LD_VAR 0 7
37640: PPUSH
37641: LD_VAR 0 1
37645: PPUSH
37646: LD_VAR 0 2
37650: PPUSH
37651: CALL_OW 297
37655: ST_TO_ADDR
// if not result then
37656: LD_VAR 0 6
37660: NOT
37661: IFFALSE 37687
// result := [ [ i , tmp ] ] else
37663: LD_ADDR_VAR 0 6
37667: PUSH
37668: LD_VAR 0 7
37672: PUSH
37673: LD_VAR 0 9
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: EMPTY
37683: LIST
37684: ST_TO_ADDR
37685: GO 37829
// begin if result [ result ] [ 2 ] < tmp then
37687: LD_VAR 0 6
37691: PUSH
37692: LD_VAR 0 6
37696: ARRAY
37697: PUSH
37698: LD_INT 2
37700: ARRAY
37701: PUSH
37702: LD_VAR 0 9
37706: LESS
37707: IFFALSE 37749
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37709: LD_ADDR_VAR 0 6
37713: PUSH
37714: LD_VAR 0 6
37718: PPUSH
37719: LD_VAR 0 6
37723: PUSH
37724: LD_INT 1
37726: PLUS
37727: PPUSH
37728: LD_VAR 0 7
37732: PUSH
37733: LD_VAR 0 9
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PPUSH
37742: CALL_OW 2
37746: ST_TO_ADDR
37747: GO 37829
// for j = 1 to result do
37749: LD_ADDR_VAR 0 8
37753: PUSH
37754: DOUBLE
37755: LD_INT 1
37757: DEC
37758: ST_TO_ADDR
37759: LD_VAR 0 6
37763: PUSH
37764: FOR_TO
37765: IFFALSE 37827
// begin if tmp < result [ j ] [ 2 ] then
37767: LD_VAR 0 9
37771: PUSH
37772: LD_VAR 0 6
37776: PUSH
37777: LD_VAR 0 8
37781: ARRAY
37782: PUSH
37783: LD_INT 2
37785: ARRAY
37786: LESS
37787: IFFALSE 37825
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37789: LD_ADDR_VAR 0 6
37793: PUSH
37794: LD_VAR 0 6
37798: PPUSH
37799: LD_VAR 0 8
37803: PPUSH
37804: LD_VAR 0 7
37808: PUSH
37809: LD_VAR 0 9
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PPUSH
37818: CALL_OW 2
37822: ST_TO_ADDR
// break ;
37823: GO 37827
// end ; end ;
37825: GO 37764
37827: POP
37828: POP
// end ; end ;
37829: GO 37628
37831: POP
37832: POP
// if result and not asc then
37833: LD_VAR 0 6
37837: PUSH
37838: LD_VAR 0 4
37842: NOT
37843: AND
37844: IFFALSE 37919
// begin tmp := result ;
37846: LD_ADDR_VAR 0 9
37850: PUSH
37851: LD_VAR 0 6
37855: ST_TO_ADDR
// for i = tmp downto 1 do
37856: LD_ADDR_VAR 0 7
37860: PUSH
37861: DOUBLE
37862: LD_VAR 0 9
37866: INC
37867: ST_TO_ADDR
37868: LD_INT 1
37870: PUSH
37871: FOR_DOWNTO
37872: IFFALSE 37917
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37874: LD_ADDR_VAR 0 6
37878: PUSH
37879: LD_VAR 0 6
37883: PPUSH
37884: LD_VAR 0 9
37888: PUSH
37889: LD_VAR 0 7
37893: MINUS
37894: PUSH
37895: LD_INT 1
37897: PLUS
37898: PPUSH
37899: LD_VAR 0 9
37903: PUSH
37904: LD_VAR 0 7
37908: ARRAY
37909: PPUSH
37910: CALL_OW 1
37914: ST_TO_ADDR
37915: GO 37871
37917: POP
37918: POP
// end ; tmp := [ ] ;
37919: LD_ADDR_VAR 0 9
37923: PUSH
37924: EMPTY
37925: ST_TO_ADDR
// if mode then
37926: LD_VAR 0 5
37930: IFFALSE 37999
// begin for i = 1 to result do
37932: LD_ADDR_VAR 0 7
37936: PUSH
37937: DOUBLE
37938: LD_INT 1
37940: DEC
37941: ST_TO_ADDR
37942: LD_VAR 0 6
37946: PUSH
37947: FOR_TO
37948: IFFALSE 37987
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37950: LD_ADDR_VAR 0 9
37954: PUSH
37955: LD_VAR 0 9
37959: PPUSH
37960: LD_VAR 0 7
37964: PPUSH
37965: LD_VAR 0 6
37969: PUSH
37970: LD_VAR 0 7
37974: ARRAY
37975: PUSH
37976: LD_INT 1
37978: ARRAY
37979: PPUSH
37980: CALL_OW 1
37984: ST_TO_ADDR
37985: GO 37947
37987: POP
37988: POP
// result := tmp ;
37989: LD_ADDR_VAR 0 6
37993: PUSH
37994: LD_VAR 0 9
37998: ST_TO_ADDR
// end ; end ;
37999: LD_VAR 0 6
38003: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38004: LD_INT 0
38006: PPUSH
38007: PPUSH
38008: PPUSH
38009: PPUSH
38010: PPUSH
38011: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38012: LD_ADDR_VAR 0 5
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: EMPTY
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: ST_TO_ADDR
// if not x or not y then
38034: LD_VAR 0 2
38038: NOT
38039: PUSH
38040: LD_VAR 0 3
38044: NOT
38045: OR
38046: IFFALSE 38050
// exit ;
38048: GO 39700
// if not range then
38050: LD_VAR 0 4
38054: NOT
38055: IFFALSE 38065
// range := 10 ;
38057: LD_ADDR_VAR 0 4
38061: PUSH
38062: LD_INT 10
38064: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38065: LD_ADDR_VAR 0 8
38069: PUSH
38070: LD_INT 81
38072: PUSH
38073: LD_VAR 0 1
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 92
38084: PUSH
38085: LD_VAR 0 2
38089: PUSH
38090: LD_VAR 0 3
38094: PUSH
38095: LD_VAR 0 4
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 3
38108: PUSH
38109: LD_INT 21
38111: PUSH
38112: LD_INT 3
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: PPUSH
38128: CALL_OW 69
38132: ST_TO_ADDR
// if not tmp then
38133: LD_VAR 0 8
38137: NOT
38138: IFFALSE 38142
// exit ;
38140: GO 39700
// for i in tmp do
38142: LD_ADDR_VAR 0 6
38146: PUSH
38147: LD_VAR 0 8
38151: PUSH
38152: FOR_IN
38153: IFFALSE 39675
// begin points := [ 0 , 0 , 0 ] ;
38155: LD_ADDR_VAR 0 9
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: LD_INT 0
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: LIST
38173: ST_TO_ADDR
// bpoints := 1 ;
38174: LD_ADDR_VAR 0 10
38178: PUSH
38179: LD_INT 1
38181: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38182: LD_VAR 0 6
38186: PPUSH
38187: CALL_OW 247
38191: PUSH
38192: LD_INT 1
38194: DOUBLE
38195: EQUAL
38196: IFTRUE 38200
38198: GO 38778
38200: POP
// begin if GetClass ( i ) = 1 then
38201: LD_VAR 0 6
38205: PPUSH
38206: CALL_OW 257
38210: PUSH
38211: LD_INT 1
38213: EQUAL
38214: IFFALSE 38235
// points := [ 10 , 5 , 3 ] ;
38216: LD_ADDR_VAR 0 9
38220: PUSH
38221: LD_INT 10
38223: PUSH
38224: LD_INT 5
38226: PUSH
38227: LD_INT 3
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38235: LD_VAR 0 6
38239: PPUSH
38240: CALL_OW 257
38244: PUSH
38245: LD_INT 2
38247: PUSH
38248: LD_INT 3
38250: PUSH
38251: LD_INT 4
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: IN
38259: IFFALSE 38280
// points := [ 3 , 2 , 1 ] ;
38261: LD_ADDR_VAR 0 9
38265: PUSH
38266: LD_INT 3
38268: PUSH
38269: LD_INT 2
38271: PUSH
38272: LD_INT 1
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: LIST
38279: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38280: LD_VAR 0 6
38284: PPUSH
38285: CALL_OW 257
38289: PUSH
38290: LD_INT 5
38292: EQUAL
38293: IFFALSE 38314
// points := [ 130 , 5 , 2 ] ;
38295: LD_ADDR_VAR 0 9
38299: PUSH
38300: LD_INT 130
38302: PUSH
38303: LD_INT 5
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: LIST
38313: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38314: LD_VAR 0 6
38318: PPUSH
38319: CALL_OW 257
38323: PUSH
38324: LD_INT 8
38326: EQUAL
38327: IFFALSE 38348
// points := [ 35 , 35 , 30 ] ;
38329: LD_ADDR_VAR 0 9
38333: PUSH
38334: LD_INT 35
38336: PUSH
38337: LD_INT 35
38339: PUSH
38340: LD_INT 30
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: LIST
38347: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38348: LD_VAR 0 6
38352: PPUSH
38353: CALL_OW 257
38357: PUSH
38358: LD_INT 9
38360: EQUAL
38361: IFFALSE 38382
// points := [ 20 , 55 , 40 ] ;
38363: LD_ADDR_VAR 0 9
38367: PUSH
38368: LD_INT 20
38370: PUSH
38371: LD_INT 55
38373: PUSH
38374: LD_INT 40
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38382: LD_VAR 0 6
38386: PPUSH
38387: CALL_OW 257
38391: PUSH
38392: LD_INT 12
38394: PUSH
38395: LD_INT 16
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: IN
38402: IFFALSE 38423
// points := [ 5 , 3 , 2 ] ;
38404: LD_ADDR_VAR 0 9
38408: PUSH
38409: LD_INT 5
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: LD_INT 2
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: LIST
38422: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38423: LD_VAR 0 6
38427: PPUSH
38428: CALL_OW 257
38432: PUSH
38433: LD_INT 17
38435: EQUAL
38436: IFFALSE 38457
// points := [ 100 , 50 , 75 ] ;
38438: LD_ADDR_VAR 0 9
38442: PUSH
38443: LD_INT 100
38445: PUSH
38446: LD_INT 50
38448: PUSH
38449: LD_INT 75
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38457: LD_VAR 0 6
38461: PPUSH
38462: CALL_OW 257
38466: PUSH
38467: LD_INT 15
38469: EQUAL
38470: IFFALSE 38491
// points := [ 10 , 5 , 3 ] ;
38472: LD_ADDR_VAR 0 9
38476: PUSH
38477: LD_INT 10
38479: PUSH
38480: LD_INT 5
38482: PUSH
38483: LD_INT 3
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38491: LD_VAR 0 6
38495: PPUSH
38496: CALL_OW 257
38500: PUSH
38501: LD_INT 14
38503: EQUAL
38504: IFFALSE 38525
// points := [ 10 , 0 , 0 ] ;
38506: LD_ADDR_VAR 0 9
38510: PUSH
38511: LD_INT 10
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: LIST
38524: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38525: LD_VAR 0 6
38529: PPUSH
38530: CALL_OW 257
38534: PUSH
38535: LD_INT 11
38537: EQUAL
38538: IFFALSE 38559
// points := [ 30 , 10 , 5 ] ;
38540: LD_ADDR_VAR 0 9
38544: PUSH
38545: LD_INT 30
38547: PUSH
38548: LD_INT 10
38550: PUSH
38551: LD_INT 5
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38559: LD_VAR 0 1
38563: PPUSH
38564: LD_INT 5
38566: PPUSH
38567: CALL_OW 321
38571: PUSH
38572: LD_INT 2
38574: EQUAL
38575: IFFALSE 38592
// bpoints := bpoints * 1.8 ;
38577: LD_ADDR_VAR 0 10
38581: PUSH
38582: LD_VAR 0 10
38586: PUSH
38587: LD_REAL  1.80000000000000E+0000
38590: MUL
38591: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38592: LD_VAR 0 6
38596: PPUSH
38597: CALL_OW 257
38601: PUSH
38602: LD_INT 1
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: LD_INT 3
38610: PUSH
38611: LD_INT 4
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: IN
38620: PUSH
38621: LD_VAR 0 1
38625: PPUSH
38626: LD_INT 51
38628: PPUSH
38629: CALL_OW 321
38633: PUSH
38634: LD_INT 2
38636: EQUAL
38637: AND
38638: IFFALSE 38655
// bpoints := bpoints * 1.2 ;
38640: LD_ADDR_VAR 0 10
38644: PUSH
38645: LD_VAR 0 10
38649: PUSH
38650: LD_REAL  1.20000000000000E+0000
38653: MUL
38654: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38655: LD_VAR 0 6
38659: PPUSH
38660: CALL_OW 257
38664: PUSH
38665: LD_INT 5
38667: PUSH
38668: LD_INT 7
38670: PUSH
38671: LD_INT 9
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: LIST
38678: IN
38679: PUSH
38680: LD_VAR 0 1
38684: PPUSH
38685: LD_INT 52
38687: PPUSH
38688: CALL_OW 321
38692: PUSH
38693: LD_INT 2
38695: EQUAL
38696: AND
38697: IFFALSE 38714
// bpoints := bpoints * 1.5 ;
38699: LD_ADDR_VAR 0 10
38703: PUSH
38704: LD_VAR 0 10
38708: PUSH
38709: LD_REAL  1.50000000000000E+0000
38712: MUL
38713: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38714: LD_VAR 0 1
38718: PPUSH
38719: LD_INT 66
38721: PPUSH
38722: CALL_OW 321
38726: PUSH
38727: LD_INT 2
38729: EQUAL
38730: IFFALSE 38747
// bpoints := bpoints * 1.1 ;
38732: LD_ADDR_VAR 0 10
38736: PUSH
38737: LD_VAR 0 10
38741: PUSH
38742: LD_REAL  1.10000000000000E+0000
38745: MUL
38746: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38747: LD_ADDR_VAR 0 10
38751: PUSH
38752: LD_VAR 0 10
38756: PUSH
38757: LD_VAR 0 6
38761: PPUSH
38762: LD_INT 1
38764: PPUSH
38765: CALL_OW 259
38769: PUSH
38770: LD_REAL  1.15000000000000E+0000
38773: MUL
38774: MUL
38775: ST_TO_ADDR
// end ; unit_vehicle :
38776: GO 39604
38778: LD_INT 2
38780: DOUBLE
38781: EQUAL
38782: IFTRUE 38786
38784: GO 39592
38786: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38787: LD_VAR 0 6
38791: PPUSH
38792: CALL_OW 264
38796: PUSH
38797: LD_INT 2
38799: PUSH
38800: LD_INT 42
38802: PUSH
38803: LD_INT 24
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: LIST
38810: IN
38811: IFFALSE 38832
// points := [ 25 , 5 , 3 ] ;
38813: LD_ADDR_VAR 0 9
38817: PUSH
38818: LD_INT 25
38820: PUSH
38821: LD_INT 5
38823: PUSH
38824: LD_INT 3
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38832: LD_VAR 0 6
38836: PPUSH
38837: CALL_OW 264
38841: PUSH
38842: LD_INT 4
38844: PUSH
38845: LD_INT 43
38847: PUSH
38848: LD_INT 25
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: LIST
38855: IN
38856: IFFALSE 38877
// points := [ 40 , 15 , 5 ] ;
38858: LD_ADDR_VAR 0 9
38862: PUSH
38863: LD_INT 40
38865: PUSH
38866: LD_INT 15
38868: PUSH
38869: LD_INT 5
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: LIST
38876: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38877: LD_VAR 0 6
38881: PPUSH
38882: CALL_OW 264
38886: PUSH
38887: LD_INT 3
38889: PUSH
38890: LD_INT 23
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: IN
38897: IFFALSE 38918
// points := [ 7 , 25 , 8 ] ;
38899: LD_ADDR_VAR 0 9
38903: PUSH
38904: LD_INT 7
38906: PUSH
38907: LD_INT 25
38909: PUSH
38910: LD_INT 8
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38918: LD_VAR 0 6
38922: PPUSH
38923: CALL_OW 264
38927: PUSH
38928: LD_INT 5
38930: PUSH
38931: LD_INT 27
38933: PUSH
38934: LD_INT 44
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: LIST
38941: IN
38942: IFFALSE 38963
// points := [ 14 , 50 , 16 ] ;
38944: LD_ADDR_VAR 0 9
38948: PUSH
38949: LD_INT 14
38951: PUSH
38952: LD_INT 50
38954: PUSH
38955: LD_INT 16
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38963: LD_VAR 0 6
38967: PPUSH
38968: CALL_OW 264
38972: PUSH
38973: LD_INT 6
38975: PUSH
38976: LD_INT 46
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: IN
38983: IFFALSE 39004
// points := [ 32 , 120 , 70 ] ;
38985: LD_ADDR_VAR 0 9
38989: PUSH
38990: LD_INT 32
38992: PUSH
38993: LD_INT 120
38995: PUSH
38996: LD_INT 70
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: LIST
39003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39004: LD_VAR 0 6
39008: PPUSH
39009: CALL_OW 264
39013: PUSH
39014: LD_INT 7
39016: PUSH
39017: LD_INT 28
39019: PUSH
39020: LD_INT 45
39022: PUSH
39023: LD_INT 92
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: IN
39032: IFFALSE 39053
// points := [ 35 , 20 , 45 ] ;
39034: LD_ADDR_VAR 0 9
39038: PUSH
39039: LD_INT 35
39041: PUSH
39042: LD_INT 20
39044: PUSH
39045: LD_INT 45
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39053: LD_VAR 0 6
39057: PPUSH
39058: CALL_OW 264
39062: PUSH
39063: LD_INT 47
39065: PUSH
39066: EMPTY
39067: LIST
39068: IN
39069: IFFALSE 39090
// points := [ 67 , 45 , 75 ] ;
39071: LD_ADDR_VAR 0 9
39075: PUSH
39076: LD_INT 67
39078: PUSH
39079: LD_INT 45
39081: PUSH
39082: LD_INT 75
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: LIST
39089: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39090: LD_VAR 0 6
39094: PPUSH
39095: CALL_OW 264
39099: PUSH
39100: LD_INT 26
39102: PUSH
39103: EMPTY
39104: LIST
39105: IN
39106: IFFALSE 39127
// points := [ 120 , 30 , 80 ] ;
39108: LD_ADDR_VAR 0 9
39112: PUSH
39113: LD_INT 120
39115: PUSH
39116: LD_INT 30
39118: PUSH
39119: LD_INT 80
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39127: LD_VAR 0 6
39131: PPUSH
39132: CALL_OW 264
39136: PUSH
39137: LD_INT 22
39139: PUSH
39140: EMPTY
39141: LIST
39142: IN
39143: IFFALSE 39164
// points := [ 40 , 1 , 1 ] ;
39145: LD_ADDR_VAR 0 9
39149: PUSH
39150: LD_INT 40
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39164: LD_VAR 0 6
39168: PPUSH
39169: CALL_OW 264
39173: PUSH
39174: LD_INT 29
39176: PUSH
39177: EMPTY
39178: LIST
39179: IN
39180: IFFALSE 39201
// points := [ 70 , 200 , 400 ] ;
39182: LD_ADDR_VAR 0 9
39186: PUSH
39187: LD_INT 70
39189: PUSH
39190: LD_INT 200
39192: PUSH
39193: LD_INT 400
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39201: LD_VAR 0 6
39205: PPUSH
39206: CALL_OW 264
39210: PUSH
39211: LD_INT 14
39213: PUSH
39214: LD_INT 53
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: IN
39221: IFFALSE 39242
// points := [ 40 , 10 , 20 ] ;
39223: LD_ADDR_VAR 0 9
39227: PUSH
39228: LD_INT 40
39230: PUSH
39231: LD_INT 10
39233: PUSH
39234: LD_INT 20
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: LIST
39241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39242: LD_VAR 0 6
39246: PPUSH
39247: CALL_OW 264
39251: PUSH
39252: LD_INT 9
39254: PUSH
39255: EMPTY
39256: LIST
39257: IN
39258: IFFALSE 39279
// points := [ 5 , 70 , 20 ] ;
39260: LD_ADDR_VAR 0 9
39264: PUSH
39265: LD_INT 5
39267: PUSH
39268: LD_INT 70
39270: PUSH
39271: LD_INT 20
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: LIST
39278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39279: LD_VAR 0 6
39283: PPUSH
39284: CALL_OW 264
39288: PUSH
39289: LD_INT 10
39291: PUSH
39292: EMPTY
39293: LIST
39294: IN
39295: IFFALSE 39316
// points := [ 35 , 110 , 70 ] ;
39297: LD_ADDR_VAR 0 9
39301: PUSH
39302: LD_INT 35
39304: PUSH
39305: LD_INT 110
39307: PUSH
39308: LD_INT 70
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: LIST
39315: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39316: LD_VAR 0 6
39320: PPUSH
39321: CALL_OW 265
39325: PUSH
39326: LD_INT 25
39328: EQUAL
39329: IFFALSE 39350
// points := [ 80 , 65 , 100 ] ;
39331: LD_ADDR_VAR 0 9
39335: PUSH
39336: LD_INT 80
39338: PUSH
39339: LD_INT 65
39341: PUSH
39342: LD_INT 100
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39350: LD_VAR 0 6
39354: PPUSH
39355: CALL_OW 263
39359: PUSH
39360: LD_INT 1
39362: EQUAL
39363: IFFALSE 39398
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39365: LD_ADDR_VAR 0 10
39369: PUSH
39370: LD_VAR 0 10
39374: PUSH
39375: LD_VAR 0 6
39379: PPUSH
39380: CALL_OW 311
39384: PPUSH
39385: LD_INT 3
39387: PPUSH
39388: CALL_OW 259
39392: PUSH
39393: LD_INT 4
39395: MUL
39396: MUL
39397: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39398: LD_VAR 0 6
39402: PPUSH
39403: CALL_OW 263
39407: PUSH
39408: LD_INT 2
39410: EQUAL
39411: IFFALSE 39462
// begin j := IsControledBy ( i ) ;
39413: LD_ADDR_VAR 0 7
39417: PUSH
39418: LD_VAR 0 6
39422: PPUSH
39423: CALL_OW 312
39427: ST_TO_ADDR
// if j then
39428: LD_VAR 0 7
39432: IFFALSE 39462
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39434: LD_ADDR_VAR 0 10
39438: PUSH
39439: LD_VAR 0 10
39443: PUSH
39444: LD_VAR 0 7
39448: PPUSH
39449: LD_INT 3
39451: PPUSH
39452: CALL_OW 259
39456: PUSH
39457: LD_INT 3
39459: MUL
39460: MUL
39461: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39462: LD_VAR 0 6
39466: PPUSH
39467: CALL_OW 264
39471: PUSH
39472: LD_INT 5
39474: PUSH
39475: LD_INT 6
39477: PUSH
39478: LD_INT 46
39480: PUSH
39481: LD_INT 44
39483: PUSH
39484: LD_INT 47
39486: PUSH
39487: LD_INT 45
39489: PUSH
39490: LD_INT 28
39492: PUSH
39493: LD_INT 7
39495: PUSH
39496: LD_INT 27
39498: PUSH
39499: LD_INT 29
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: IN
39514: PUSH
39515: LD_VAR 0 1
39519: PPUSH
39520: LD_INT 52
39522: PPUSH
39523: CALL_OW 321
39527: PUSH
39528: LD_INT 2
39530: EQUAL
39531: AND
39532: IFFALSE 39549
// bpoints := bpoints * 1.2 ;
39534: LD_ADDR_VAR 0 10
39538: PUSH
39539: LD_VAR 0 10
39543: PUSH
39544: LD_REAL  1.20000000000000E+0000
39547: MUL
39548: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39549: LD_VAR 0 6
39553: PPUSH
39554: CALL_OW 264
39558: PUSH
39559: LD_INT 6
39561: PUSH
39562: LD_INT 46
39564: PUSH
39565: LD_INT 47
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: IN
39573: IFFALSE 39590
// bpoints := bpoints * 1.2 ;
39575: LD_ADDR_VAR 0 10
39579: PUSH
39580: LD_VAR 0 10
39584: PUSH
39585: LD_REAL  1.20000000000000E+0000
39588: MUL
39589: ST_TO_ADDR
// end ; unit_building :
39590: GO 39604
39592: LD_INT 3
39594: DOUBLE
39595: EQUAL
39596: IFTRUE 39600
39598: GO 39603
39600: POP
// ; end ;
39601: GO 39604
39603: POP
// for j = 1 to 3 do
39604: LD_ADDR_VAR 0 7
39608: PUSH
39609: DOUBLE
39610: LD_INT 1
39612: DEC
39613: ST_TO_ADDR
39614: LD_INT 3
39616: PUSH
39617: FOR_TO
39618: IFFALSE 39671
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39620: LD_ADDR_VAR 0 5
39624: PUSH
39625: LD_VAR 0 5
39629: PPUSH
39630: LD_VAR 0 7
39634: PPUSH
39635: LD_VAR 0 5
39639: PUSH
39640: LD_VAR 0 7
39644: ARRAY
39645: PUSH
39646: LD_VAR 0 9
39650: PUSH
39651: LD_VAR 0 7
39655: ARRAY
39656: PUSH
39657: LD_VAR 0 10
39661: MUL
39662: PLUS
39663: PPUSH
39664: CALL_OW 1
39668: ST_TO_ADDR
39669: GO 39617
39671: POP
39672: POP
// end ;
39673: GO 38152
39675: POP
39676: POP
// result := Replace ( result , 4 , tmp ) ;
39677: LD_ADDR_VAR 0 5
39681: PUSH
39682: LD_VAR 0 5
39686: PPUSH
39687: LD_INT 4
39689: PPUSH
39690: LD_VAR 0 8
39694: PPUSH
39695: CALL_OW 1
39699: ST_TO_ADDR
// end ;
39700: LD_VAR 0 5
39704: RET
// export function DangerAtRange ( unit , range ) ; begin
39705: LD_INT 0
39707: PPUSH
// if not unit then
39708: LD_VAR 0 1
39712: NOT
39713: IFFALSE 39717
// exit ;
39715: GO 39762
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39717: LD_ADDR_VAR 0 3
39721: PUSH
39722: LD_VAR 0 1
39726: PPUSH
39727: CALL_OW 255
39731: PPUSH
39732: LD_VAR 0 1
39736: PPUSH
39737: CALL_OW 250
39741: PPUSH
39742: LD_VAR 0 1
39746: PPUSH
39747: CALL_OW 251
39751: PPUSH
39752: LD_VAR 0 2
39756: PPUSH
39757: CALL 38004 0 4
39761: ST_TO_ADDR
// end ;
39762: LD_VAR 0 3
39766: RET
// export function DangerInArea ( side , area ) ; begin
39767: LD_INT 0
39769: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39770: LD_ADDR_VAR 0 3
39774: PUSH
39775: LD_VAR 0 2
39779: PPUSH
39780: LD_INT 81
39782: PUSH
39783: LD_VAR 0 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PPUSH
39792: CALL_OW 70
39796: ST_TO_ADDR
// end ;
39797: LD_VAR 0 3
39801: RET
// export function IsExtension ( b ) ; begin
39802: LD_INT 0
39804: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39805: LD_ADDR_VAR 0 2
39809: PUSH
39810: LD_VAR 0 1
39814: PUSH
39815: LD_INT 23
39817: PUSH
39818: LD_INT 20
39820: PUSH
39821: LD_INT 22
39823: PUSH
39824: LD_INT 17
39826: PUSH
39827: LD_INT 24
39829: PUSH
39830: LD_INT 21
39832: PUSH
39833: LD_INT 19
39835: PUSH
39836: LD_INT 16
39838: PUSH
39839: LD_INT 25
39841: PUSH
39842: LD_INT 18
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: IN
39857: ST_TO_ADDR
// end ;
39858: LD_VAR 0 2
39862: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39863: LD_INT 0
39865: PPUSH
39866: PPUSH
39867: PPUSH
// result := [ ] ;
39868: LD_ADDR_VAR 0 4
39872: PUSH
39873: EMPTY
39874: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39875: LD_ADDR_VAR 0 5
39879: PUSH
39880: LD_VAR 0 2
39884: PPUSH
39885: LD_INT 21
39887: PUSH
39888: LD_INT 3
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PPUSH
39895: CALL_OW 70
39899: ST_TO_ADDR
// if not tmp then
39900: LD_VAR 0 5
39904: NOT
39905: IFFALSE 39909
// exit ;
39907: GO 39973
// if checkLink then
39909: LD_VAR 0 3
39913: IFFALSE 39963
// begin for i in tmp do
39915: LD_ADDR_VAR 0 6
39919: PUSH
39920: LD_VAR 0 5
39924: PUSH
39925: FOR_IN
39926: IFFALSE 39961
// if GetBase ( i ) <> base then
39928: LD_VAR 0 6
39932: PPUSH
39933: CALL_OW 274
39937: PUSH
39938: LD_VAR 0 1
39942: NONEQUAL
39943: IFFALSE 39959
// ComLinkToBase ( base , i ) ;
39945: LD_VAR 0 1
39949: PPUSH
39950: LD_VAR 0 6
39954: PPUSH
39955: CALL_OW 169
39959: GO 39925
39961: POP
39962: POP
// end ; result := tmp ;
39963: LD_ADDR_VAR 0 4
39967: PUSH
39968: LD_VAR 0 5
39972: ST_TO_ADDR
// end ;
39973: LD_VAR 0 4
39977: RET
// export function ComComplete ( units , b ) ; var i ; begin
39978: LD_INT 0
39980: PPUSH
39981: PPUSH
// if not units then
39982: LD_VAR 0 1
39986: NOT
39987: IFFALSE 39991
// exit ;
39989: GO 40081
// for i in units do
39991: LD_ADDR_VAR 0 4
39995: PUSH
39996: LD_VAR 0 1
40000: PUSH
40001: FOR_IN
40002: IFFALSE 40079
// if BuildingStatus ( b ) = bs_build then
40004: LD_VAR 0 2
40008: PPUSH
40009: CALL_OW 461
40013: PUSH
40014: LD_INT 1
40016: EQUAL
40017: IFFALSE 40077
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40019: LD_VAR 0 4
40023: PPUSH
40024: LD_STRING h
40026: PUSH
40027: LD_VAR 0 2
40031: PPUSH
40032: CALL_OW 250
40036: PUSH
40037: LD_VAR 0 2
40041: PPUSH
40042: CALL_OW 251
40046: PUSH
40047: LD_VAR 0 2
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: PUSH
40070: EMPTY
40071: LIST
40072: PPUSH
40073: CALL_OW 446
40077: GO 40001
40079: POP
40080: POP
// end ;
40081: LD_VAR 0 3
40085: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40086: LD_INT 0
40088: PPUSH
40089: PPUSH
40090: PPUSH
40091: PPUSH
40092: PPUSH
40093: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40094: LD_VAR 0 1
40098: NOT
40099: PUSH
40100: LD_VAR 0 1
40104: PPUSH
40105: CALL_OW 263
40109: PUSH
40110: LD_INT 2
40112: NONEQUAL
40113: OR
40114: IFFALSE 40118
// exit ;
40116: GO 40434
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40118: LD_ADDR_VAR 0 6
40122: PUSH
40123: LD_INT 22
40125: PUSH
40126: LD_VAR 0 1
40130: PPUSH
40131: CALL_OW 255
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: LD_INT 30
40145: PUSH
40146: LD_INT 36
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 34
40155: PUSH
40156: LD_INT 31
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: LIST
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PPUSH
40172: CALL_OW 69
40176: ST_TO_ADDR
// if not tmp then
40177: LD_VAR 0 6
40181: NOT
40182: IFFALSE 40186
// exit ;
40184: GO 40434
// result := [ ] ;
40186: LD_ADDR_VAR 0 2
40190: PUSH
40191: EMPTY
40192: ST_TO_ADDR
// for i in tmp do
40193: LD_ADDR_VAR 0 3
40197: PUSH
40198: LD_VAR 0 6
40202: PUSH
40203: FOR_IN
40204: IFFALSE 40275
// begin t := UnitsInside ( i ) ;
40206: LD_ADDR_VAR 0 4
40210: PUSH
40211: LD_VAR 0 3
40215: PPUSH
40216: CALL_OW 313
40220: ST_TO_ADDR
// if t then
40221: LD_VAR 0 4
40225: IFFALSE 40273
// for j in t do
40227: LD_ADDR_VAR 0 7
40231: PUSH
40232: LD_VAR 0 4
40236: PUSH
40237: FOR_IN
40238: IFFALSE 40271
// result := Replace ( result , result + 1 , j ) ;
40240: LD_ADDR_VAR 0 2
40244: PUSH
40245: LD_VAR 0 2
40249: PPUSH
40250: LD_VAR 0 2
40254: PUSH
40255: LD_INT 1
40257: PLUS
40258: PPUSH
40259: LD_VAR 0 7
40263: PPUSH
40264: CALL_OW 1
40268: ST_TO_ADDR
40269: GO 40237
40271: POP
40272: POP
// end ;
40273: GO 40203
40275: POP
40276: POP
// if not result then
40277: LD_VAR 0 2
40281: NOT
40282: IFFALSE 40286
// exit ;
40284: GO 40434
// mech := result [ 1 ] ;
40286: LD_ADDR_VAR 0 5
40290: PUSH
40291: LD_VAR 0 2
40295: PUSH
40296: LD_INT 1
40298: ARRAY
40299: ST_TO_ADDR
// if result > 1 then
40300: LD_VAR 0 2
40304: PUSH
40305: LD_INT 1
40307: GREATER
40308: IFFALSE 40420
// begin for i = 2 to result do
40310: LD_ADDR_VAR 0 3
40314: PUSH
40315: DOUBLE
40316: LD_INT 2
40318: DEC
40319: ST_TO_ADDR
40320: LD_VAR 0 2
40324: PUSH
40325: FOR_TO
40326: IFFALSE 40418
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40328: LD_ADDR_VAR 0 4
40332: PUSH
40333: LD_VAR 0 2
40337: PUSH
40338: LD_VAR 0 3
40342: ARRAY
40343: PPUSH
40344: LD_INT 3
40346: PPUSH
40347: CALL_OW 259
40351: PUSH
40352: LD_VAR 0 2
40356: PUSH
40357: LD_VAR 0 3
40361: ARRAY
40362: PPUSH
40363: CALL_OW 432
40367: MINUS
40368: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40369: LD_VAR 0 4
40373: PUSH
40374: LD_VAR 0 5
40378: PPUSH
40379: LD_INT 3
40381: PPUSH
40382: CALL_OW 259
40386: PUSH
40387: LD_VAR 0 5
40391: PPUSH
40392: CALL_OW 432
40396: MINUS
40397: GREATEREQUAL
40398: IFFALSE 40416
// mech := result [ i ] ;
40400: LD_ADDR_VAR 0 5
40404: PUSH
40405: LD_VAR 0 2
40409: PUSH
40410: LD_VAR 0 3
40414: ARRAY
40415: ST_TO_ADDR
// end ;
40416: GO 40325
40418: POP
40419: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40420: LD_VAR 0 1
40424: PPUSH
40425: LD_VAR 0 5
40429: PPUSH
40430: CALL_OW 135
// end ;
40434: LD_VAR 0 2
40438: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40439: LD_INT 0
40441: PPUSH
40442: PPUSH
40443: PPUSH
40444: PPUSH
40445: PPUSH
40446: PPUSH
40447: PPUSH
40448: PPUSH
40449: PPUSH
40450: PPUSH
40451: PPUSH
40452: PPUSH
40453: PPUSH
// result := [ ] ;
40454: LD_ADDR_VAR 0 7
40458: PUSH
40459: EMPTY
40460: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40461: LD_VAR 0 1
40465: PPUSH
40466: CALL_OW 266
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: IN
40481: NOT
40482: IFFALSE 40486
// exit ;
40484: GO 42120
// if name then
40486: LD_VAR 0 3
40490: IFFALSE 40506
// SetBName ( base_dep , name ) ;
40492: LD_VAR 0 1
40496: PPUSH
40497: LD_VAR 0 3
40501: PPUSH
40502: CALL_OW 500
// base := GetBase ( base_dep ) ;
40506: LD_ADDR_VAR 0 15
40510: PUSH
40511: LD_VAR 0 1
40515: PPUSH
40516: CALL_OW 274
40520: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40521: LD_ADDR_VAR 0 16
40525: PUSH
40526: LD_VAR 0 1
40530: PPUSH
40531: CALL_OW 255
40535: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40536: LD_ADDR_VAR 0 17
40540: PUSH
40541: LD_VAR 0 1
40545: PPUSH
40546: CALL_OW 248
40550: ST_TO_ADDR
// if sources then
40551: LD_VAR 0 5
40555: IFFALSE 40602
// for i = 1 to 3 do
40557: LD_ADDR_VAR 0 8
40561: PUSH
40562: DOUBLE
40563: LD_INT 1
40565: DEC
40566: ST_TO_ADDR
40567: LD_INT 3
40569: PUSH
40570: FOR_TO
40571: IFFALSE 40600
// AddResourceType ( base , i , sources [ i ] ) ;
40573: LD_VAR 0 15
40577: PPUSH
40578: LD_VAR 0 8
40582: PPUSH
40583: LD_VAR 0 5
40587: PUSH
40588: LD_VAR 0 8
40592: ARRAY
40593: PPUSH
40594: CALL_OW 276
40598: GO 40570
40600: POP
40601: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40602: LD_ADDR_VAR 0 18
40606: PUSH
40607: LD_VAR 0 15
40611: PPUSH
40612: LD_VAR 0 2
40616: PPUSH
40617: LD_INT 1
40619: PPUSH
40620: CALL 39863 0 3
40624: ST_TO_ADDR
// InitHc ;
40625: CALL_OW 19
// InitUc ;
40629: CALL_OW 18
// uc_side := side ;
40633: LD_ADDR_OWVAR 20
40637: PUSH
40638: LD_VAR 0 16
40642: ST_TO_ADDR
// uc_nation := nation ;
40643: LD_ADDR_OWVAR 21
40647: PUSH
40648: LD_VAR 0 17
40652: ST_TO_ADDR
// if buildings then
40653: LD_VAR 0 18
40657: IFFALSE 41979
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40659: LD_ADDR_VAR 0 19
40663: PUSH
40664: LD_VAR 0 18
40668: PPUSH
40669: LD_INT 2
40671: PUSH
40672: LD_INT 30
40674: PUSH
40675: LD_INT 29
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 30
40684: PUSH
40685: LD_INT 30
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: LIST
40696: PPUSH
40697: CALL_OW 72
40701: ST_TO_ADDR
// if tmp then
40702: LD_VAR 0 19
40706: IFFALSE 40754
// for i in tmp do
40708: LD_ADDR_VAR 0 8
40712: PUSH
40713: LD_VAR 0 19
40717: PUSH
40718: FOR_IN
40719: IFFALSE 40752
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40721: LD_VAR 0 8
40725: PPUSH
40726: CALL_OW 250
40730: PPUSH
40731: LD_VAR 0 8
40735: PPUSH
40736: CALL_OW 251
40740: PPUSH
40741: LD_VAR 0 16
40745: PPUSH
40746: CALL_OW 441
40750: GO 40718
40752: POP
40753: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40754: LD_VAR 0 18
40758: PPUSH
40759: LD_INT 2
40761: PUSH
40762: LD_INT 30
40764: PUSH
40765: LD_INT 32
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 30
40774: PUSH
40775: LD_INT 33
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: LIST
40786: PPUSH
40787: CALL_OW 72
40791: IFFALSE 40879
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40793: LD_ADDR_VAR 0 8
40797: PUSH
40798: LD_VAR 0 18
40802: PPUSH
40803: LD_INT 2
40805: PUSH
40806: LD_INT 30
40808: PUSH
40809: LD_INT 32
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 30
40818: PUSH
40819: LD_INT 33
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: PPUSH
40831: CALL_OW 72
40835: PUSH
40836: FOR_IN
40837: IFFALSE 40877
// begin if not GetBWeapon ( i ) then
40839: LD_VAR 0 8
40843: PPUSH
40844: CALL_OW 269
40848: NOT
40849: IFFALSE 40875
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40851: LD_VAR 0 8
40855: PPUSH
40856: LD_VAR 0 8
40860: PPUSH
40861: LD_VAR 0 2
40865: PPUSH
40866: CALL 42125 0 2
40870: PPUSH
40871: CALL_OW 431
// end ;
40875: GO 40836
40877: POP
40878: POP
// end ; for i = 1 to personel do
40879: LD_ADDR_VAR 0 8
40883: PUSH
40884: DOUBLE
40885: LD_INT 1
40887: DEC
40888: ST_TO_ADDR
40889: LD_VAR 0 6
40893: PUSH
40894: FOR_TO
40895: IFFALSE 41959
// begin if i > 4 then
40897: LD_VAR 0 8
40901: PUSH
40902: LD_INT 4
40904: GREATER
40905: IFFALSE 40909
// break ;
40907: GO 41959
// case i of 1 :
40909: LD_VAR 0 8
40913: PUSH
40914: LD_INT 1
40916: DOUBLE
40917: EQUAL
40918: IFTRUE 40922
40920: GO 41002
40922: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40923: LD_ADDR_VAR 0 12
40927: PUSH
40928: LD_VAR 0 18
40932: PPUSH
40933: LD_INT 22
40935: PUSH
40936: LD_VAR 0 16
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 58
40947: PUSH
40948: EMPTY
40949: LIST
40950: PUSH
40951: LD_INT 2
40953: PUSH
40954: LD_INT 30
40956: PUSH
40957: LD_INT 32
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 30
40966: PUSH
40967: LD_INT 4
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 30
40976: PUSH
40977: LD_INT 5
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: LIST
40994: PPUSH
40995: CALL_OW 72
40999: ST_TO_ADDR
41000: GO 41224
41002: LD_INT 2
41004: DOUBLE
41005: EQUAL
41006: IFTRUE 41010
41008: GO 41072
41010: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41011: LD_ADDR_VAR 0 12
41015: PUSH
41016: LD_VAR 0 18
41020: PPUSH
41021: LD_INT 22
41023: PUSH
41024: LD_VAR 0 16
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: LD_INT 30
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 30
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PPUSH
41065: CALL_OW 72
41069: ST_TO_ADDR
41070: GO 41224
41072: LD_INT 3
41074: DOUBLE
41075: EQUAL
41076: IFTRUE 41080
41078: GO 41142
41080: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41081: LD_ADDR_VAR 0 12
41085: PUSH
41086: LD_VAR 0 18
41090: PPUSH
41091: LD_INT 22
41093: PUSH
41094: LD_VAR 0 16
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: LD_INT 30
41108: PUSH
41109: LD_INT 2
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 30
41118: PUSH
41119: LD_INT 3
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: LIST
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PPUSH
41135: CALL_OW 72
41139: ST_TO_ADDR
41140: GO 41224
41142: LD_INT 4
41144: DOUBLE
41145: EQUAL
41146: IFTRUE 41150
41148: GO 41223
41150: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41151: LD_ADDR_VAR 0 12
41155: PUSH
41156: LD_VAR 0 18
41160: PPUSH
41161: LD_INT 22
41163: PUSH
41164: LD_VAR 0 16
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: PUSH
41176: LD_INT 30
41178: PUSH
41179: LD_INT 6
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 30
41188: PUSH
41189: LD_INT 7
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 30
41198: PUSH
41199: LD_INT 8
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PPUSH
41216: CALL_OW 72
41220: ST_TO_ADDR
41221: GO 41224
41223: POP
// if i = 1 then
41224: LD_VAR 0 8
41228: PUSH
41229: LD_INT 1
41231: EQUAL
41232: IFFALSE 41343
// begin tmp := [ ] ;
41234: LD_ADDR_VAR 0 19
41238: PUSH
41239: EMPTY
41240: ST_TO_ADDR
// for j in f do
41241: LD_ADDR_VAR 0 9
41245: PUSH
41246: LD_VAR 0 12
41250: PUSH
41251: FOR_IN
41252: IFFALSE 41325
// if GetBType ( j ) = b_bunker then
41254: LD_VAR 0 9
41258: PPUSH
41259: CALL_OW 266
41263: PUSH
41264: LD_INT 32
41266: EQUAL
41267: IFFALSE 41294
// tmp := Insert ( tmp , 1 , j ) else
41269: LD_ADDR_VAR 0 19
41273: PUSH
41274: LD_VAR 0 19
41278: PPUSH
41279: LD_INT 1
41281: PPUSH
41282: LD_VAR 0 9
41286: PPUSH
41287: CALL_OW 2
41291: ST_TO_ADDR
41292: GO 41323
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41294: LD_ADDR_VAR 0 19
41298: PUSH
41299: LD_VAR 0 19
41303: PPUSH
41304: LD_VAR 0 19
41308: PUSH
41309: LD_INT 1
41311: PLUS
41312: PPUSH
41313: LD_VAR 0 9
41317: PPUSH
41318: CALL_OW 2
41322: ST_TO_ADDR
41323: GO 41251
41325: POP
41326: POP
// if tmp then
41327: LD_VAR 0 19
41331: IFFALSE 41343
// f := tmp ;
41333: LD_ADDR_VAR 0 12
41337: PUSH
41338: LD_VAR 0 19
41342: ST_TO_ADDR
// end ; x := personel [ i ] ;
41343: LD_ADDR_VAR 0 13
41347: PUSH
41348: LD_VAR 0 6
41352: PUSH
41353: LD_VAR 0 8
41357: ARRAY
41358: ST_TO_ADDR
// if x = - 1 then
41359: LD_VAR 0 13
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: EQUAL
41368: IFFALSE 41577
// begin for j in f do
41370: LD_ADDR_VAR 0 9
41374: PUSH
41375: LD_VAR 0 12
41379: PUSH
41380: FOR_IN
41381: IFFALSE 41573
// repeat InitHc ;
41383: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41387: LD_VAR 0 9
41391: PPUSH
41392: CALL_OW 266
41396: PUSH
41397: LD_INT 5
41399: EQUAL
41400: IFFALSE 41470
// begin if UnitsInside ( j ) < 3 then
41402: LD_VAR 0 9
41406: PPUSH
41407: CALL_OW 313
41411: PUSH
41412: LD_INT 3
41414: LESS
41415: IFFALSE 41451
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41417: LD_INT 0
41419: PPUSH
41420: LD_INT 5
41422: PUSH
41423: LD_INT 8
41425: PUSH
41426: LD_INT 9
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: LIST
41433: PUSH
41434: LD_VAR 0 17
41438: ARRAY
41439: PPUSH
41440: LD_VAR 0 4
41444: PPUSH
41445: CALL_OW 380
41449: GO 41468
// PrepareHuman ( false , i , skill ) ;
41451: LD_INT 0
41453: PPUSH
41454: LD_VAR 0 8
41458: PPUSH
41459: LD_VAR 0 4
41463: PPUSH
41464: CALL_OW 380
// end else
41468: GO 41487
// PrepareHuman ( false , i , skill ) ;
41470: LD_INT 0
41472: PPUSH
41473: LD_VAR 0 8
41477: PPUSH
41478: LD_VAR 0 4
41482: PPUSH
41483: CALL_OW 380
// un := CreateHuman ;
41487: LD_ADDR_VAR 0 14
41491: PUSH
41492: CALL_OW 44
41496: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41497: LD_ADDR_VAR 0 7
41501: PUSH
41502: LD_VAR 0 7
41506: PPUSH
41507: LD_INT 1
41509: PPUSH
41510: LD_VAR 0 14
41514: PPUSH
41515: CALL_OW 2
41519: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41520: LD_VAR 0 14
41524: PPUSH
41525: LD_VAR 0 9
41529: PPUSH
41530: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41534: LD_VAR 0 9
41538: PPUSH
41539: CALL_OW 313
41543: PUSH
41544: LD_INT 6
41546: EQUAL
41547: PUSH
41548: LD_VAR 0 9
41552: PPUSH
41553: CALL_OW 266
41557: PUSH
41558: LD_INT 32
41560: PUSH
41561: LD_INT 31
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: IN
41568: OR
41569: IFFALSE 41383
41571: GO 41380
41573: POP
41574: POP
// end else
41575: GO 41957
// for j = 1 to x do
41577: LD_ADDR_VAR 0 9
41581: PUSH
41582: DOUBLE
41583: LD_INT 1
41585: DEC
41586: ST_TO_ADDR
41587: LD_VAR 0 13
41591: PUSH
41592: FOR_TO
41593: IFFALSE 41955
// begin InitHc ;
41595: CALL_OW 19
// if not f then
41599: LD_VAR 0 12
41603: NOT
41604: IFFALSE 41693
// begin PrepareHuman ( false , i , skill ) ;
41606: LD_INT 0
41608: PPUSH
41609: LD_VAR 0 8
41613: PPUSH
41614: LD_VAR 0 4
41618: PPUSH
41619: CALL_OW 380
// un := CreateHuman ;
41623: LD_ADDR_VAR 0 14
41627: PUSH
41628: CALL_OW 44
41632: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41633: LD_ADDR_VAR 0 7
41637: PUSH
41638: LD_VAR 0 7
41642: PPUSH
41643: LD_INT 1
41645: PPUSH
41646: LD_VAR 0 14
41650: PPUSH
41651: CALL_OW 2
41655: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41656: LD_VAR 0 14
41660: PPUSH
41661: LD_VAR 0 1
41665: PPUSH
41666: CALL_OW 250
41670: PPUSH
41671: LD_VAR 0 1
41675: PPUSH
41676: CALL_OW 251
41680: PPUSH
41681: LD_INT 10
41683: PPUSH
41684: LD_INT 0
41686: PPUSH
41687: CALL_OW 50
// continue ;
41691: GO 41592
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41693: LD_VAR 0 12
41697: PUSH
41698: LD_INT 1
41700: ARRAY
41701: PPUSH
41702: CALL_OW 313
41706: PUSH
41707: LD_VAR 0 12
41711: PUSH
41712: LD_INT 1
41714: ARRAY
41715: PPUSH
41716: CALL_OW 266
41720: PUSH
41721: LD_INT 32
41723: PUSH
41724: LD_INT 31
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: IN
41731: AND
41732: PUSH
41733: LD_VAR 0 12
41737: PUSH
41738: LD_INT 1
41740: ARRAY
41741: PPUSH
41742: CALL_OW 313
41746: PUSH
41747: LD_INT 6
41749: EQUAL
41750: OR
41751: IFFALSE 41771
// f := Delete ( f , 1 ) ;
41753: LD_ADDR_VAR 0 12
41757: PUSH
41758: LD_VAR 0 12
41762: PPUSH
41763: LD_INT 1
41765: PPUSH
41766: CALL_OW 3
41770: ST_TO_ADDR
// if not f then
41771: LD_VAR 0 12
41775: NOT
41776: IFFALSE 41794
// begin x := x + 2 ;
41778: LD_ADDR_VAR 0 13
41782: PUSH
41783: LD_VAR 0 13
41787: PUSH
41788: LD_INT 2
41790: PLUS
41791: ST_TO_ADDR
// continue ;
41792: GO 41592
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41794: LD_VAR 0 12
41798: PUSH
41799: LD_INT 1
41801: ARRAY
41802: PPUSH
41803: CALL_OW 266
41807: PUSH
41808: LD_INT 5
41810: EQUAL
41811: IFFALSE 41885
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41813: LD_VAR 0 12
41817: PUSH
41818: LD_INT 1
41820: ARRAY
41821: PPUSH
41822: CALL_OW 313
41826: PUSH
41827: LD_INT 3
41829: LESS
41830: IFFALSE 41866
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41832: LD_INT 0
41834: PPUSH
41835: LD_INT 5
41837: PUSH
41838: LD_INT 8
41840: PUSH
41841: LD_INT 9
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: LIST
41848: PUSH
41849: LD_VAR 0 17
41853: ARRAY
41854: PPUSH
41855: LD_VAR 0 4
41859: PPUSH
41860: CALL_OW 380
41864: GO 41883
// PrepareHuman ( false , i , skill ) ;
41866: LD_INT 0
41868: PPUSH
41869: LD_VAR 0 8
41873: PPUSH
41874: LD_VAR 0 4
41878: PPUSH
41879: CALL_OW 380
// end else
41883: GO 41902
// PrepareHuman ( false , i , skill ) ;
41885: LD_INT 0
41887: PPUSH
41888: LD_VAR 0 8
41892: PPUSH
41893: LD_VAR 0 4
41897: PPUSH
41898: CALL_OW 380
// un := CreateHuman ;
41902: LD_ADDR_VAR 0 14
41906: PUSH
41907: CALL_OW 44
41911: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41912: LD_ADDR_VAR 0 7
41916: PUSH
41917: LD_VAR 0 7
41921: PPUSH
41922: LD_INT 1
41924: PPUSH
41925: LD_VAR 0 14
41929: PPUSH
41930: CALL_OW 2
41934: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41935: LD_VAR 0 14
41939: PPUSH
41940: LD_VAR 0 12
41944: PUSH
41945: LD_INT 1
41947: ARRAY
41948: PPUSH
41949: CALL_OW 52
// end ;
41953: GO 41592
41955: POP
41956: POP
// end ;
41957: GO 40894
41959: POP
41960: POP
// result := result ^ buildings ;
41961: LD_ADDR_VAR 0 7
41965: PUSH
41966: LD_VAR 0 7
41970: PUSH
41971: LD_VAR 0 18
41975: ADD
41976: ST_TO_ADDR
// end else
41977: GO 42120
// begin for i = 1 to personel do
41979: LD_ADDR_VAR 0 8
41983: PUSH
41984: DOUBLE
41985: LD_INT 1
41987: DEC
41988: ST_TO_ADDR
41989: LD_VAR 0 6
41993: PUSH
41994: FOR_TO
41995: IFFALSE 42118
// begin if i > 4 then
41997: LD_VAR 0 8
42001: PUSH
42002: LD_INT 4
42004: GREATER
42005: IFFALSE 42009
// break ;
42007: GO 42118
// x := personel [ i ] ;
42009: LD_ADDR_VAR 0 13
42013: PUSH
42014: LD_VAR 0 6
42018: PUSH
42019: LD_VAR 0 8
42023: ARRAY
42024: ST_TO_ADDR
// if x = - 1 then
42025: LD_VAR 0 13
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: EQUAL
42034: IFFALSE 42038
// continue ;
42036: GO 41994
// PrepareHuman ( false , i , skill ) ;
42038: LD_INT 0
42040: PPUSH
42041: LD_VAR 0 8
42045: PPUSH
42046: LD_VAR 0 4
42050: PPUSH
42051: CALL_OW 380
// un := CreateHuman ;
42055: LD_ADDR_VAR 0 14
42059: PUSH
42060: CALL_OW 44
42064: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42065: LD_VAR 0 14
42069: PPUSH
42070: LD_VAR 0 1
42074: PPUSH
42075: CALL_OW 250
42079: PPUSH
42080: LD_VAR 0 1
42084: PPUSH
42085: CALL_OW 251
42089: PPUSH
42090: LD_INT 10
42092: PPUSH
42093: LD_INT 0
42095: PPUSH
42096: CALL_OW 50
// result := result ^ un ;
42100: LD_ADDR_VAR 0 7
42104: PUSH
42105: LD_VAR 0 7
42109: PUSH
42110: LD_VAR 0 14
42114: ADD
42115: ST_TO_ADDR
// end ;
42116: GO 41994
42118: POP
42119: POP
// end ; end ;
42120: LD_VAR 0 7
42124: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42125: LD_INT 0
42127: PPUSH
42128: PPUSH
42129: PPUSH
42130: PPUSH
42131: PPUSH
42132: PPUSH
42133: PPUSH
42134: PPUSH
42135: PPUSH
42136: PPUSH
42137: PPUSH
42138: PPUSH
42139: PPUSH
42140: PPUSH
42141: PPUSH
42142: PPUSH
// result := false ;
42143: LD_ADDR_VAR 0 3
42147: PUSH
42148: LD_INT 0
42150: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42151: LD_VAR 0 1
42155: NOT
42156: PUSH
42157: LD_VAR 0 1
42161: PPUSH
42162: CALL_OW 266
42166: PUSH
42167: LD_INT 32
42169: PUSH
42170: LD_INT 33
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: IN
42177: NOT
42178: OR
42179: IFFALSE 42183
// exit ;
42181: GO 43292
// nat := GetNation ( tower ) ;
42183: LD_ADDR_VAR 0 12
42187: PUSH
42188: LD_VAR 0 1
42192: PPUSH
42193: CALL_OW 248
42197: ST_TO_ADDR
// side := GetSide ( tower ) ;
42198: LD_ADDR_VAR 0 16
42202: PUSH
42203: LD_VAR 0 1
42207: PPUSH
42208: CALL_OW 255
42212: ST_TO_ADDR
// x := GetX ( tower ) ;
42213: LD_ADDR_VAR 0 10
42217: PUSH
42218: LD_VAR 0 1
42222: PPUSH
42223: CALL_OW 250
42227: ST_TO_ADDR
// y := GetY ( tower ) ;
42228: LD_ADDR_VAR 0 11
42232: PUSH
42233: LD_VAR 0 1
42237: PPUSH
42238: CALL_OW 251
42242: ST_TO_ADDR
// if not x or not y then
42243: LD_VAR 0 10
42247: NOT
42248: PUSH
42249: LD_VAR 0 11
42253: NOT
42254: OR
42255: IFFALSE 42259
// exit ;
42257: GO 43292
// weapon := 0 ;
42259: LD_ADDR_VAR 0 18
42263: PUSH
42264: LD_INT 0
42266: ST_TO_ADDR
// fac_list := [ ] ;
42267: LD_ADDR_VAR 0 17
42271: PUSH
42272: EMPTY
42273: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42274: LD_ADDR_VAR 0 6
42278: PUSH
42279: LD_VAR 0 1
42283: PPUSH
42284: CALL_OW 274
42288: PPUSH
42289: LD_VAR 0 2
42293: PPUSH
42294: LD_INT 0
42296: PPUSH
42297: CALL 39863 0 3
42301: PPUSH
42302: LD_INT 30
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PPUSH
42312: CALL_OW 72
42316: ST_TO_ADDR
// if not factories then
42317: LD_VAR 0 6
42321: NOT
42322: IFFALSE 42326
// exit ;
42324: GO 43292
// for i in factories do
42326: LD_ADDR_VAR 0 8
42330: PUSH
42331: LD_VAR 0 6
42335: PUSH
42336: FOR_IN
42337: IFFALSE 42362
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42339: LD_ADDR_VAR 0 17
42343: PUSH
42344: LD_VAR 0 17
42348: PUSH
42349: LD_VAR 0 8
42353: PPUSH
42354: CALL_OW 478
42358: UNION
42359: ST_TO_ADDR
42360: GO 42336
42362: POP
42363: POP
// if not fac_list then
42364: LD_VAR 0 17
42368: NOT
42369: IFFALSE 42373
// exit ;
42371: GO 43292
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42373: LD_ADDR_VAR 0 5
42377: PUSH
42378: LD_INT 4
42380: PUSH
42381: LD_INT 5
42383: PUSH
42384: LD_INT 9
42386: PUSH
42387: LD_INT 10
42389: PUSH
42390: LD_INT 6
42392: PUSH
42393: LD_INT 7
42395: PUSH
42396: LD_INT 11
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 27
42410: PUSH
42411: LD_INT 28
42413: PUSH
42414: LD_INT 26
42416: PUSH
42417: LD_INT 30
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 43
42428: PUSH
42429: LD_INT 44
42431: PUSH
42432: LD_INT 46
42434: PUSH
42435: LD_INT 45
42437: PUSH
42438: LD_INT 47
42440: PUSH
42441: LD_INT 49
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: LIST
42456: PUSH
42457: LD_VAR 0 12
42461: ARRAY
42462: ST_TO_ADDR
// list := list isect fac_list ;
42463: LD_ADDR_VAR 0 5
42467: PUSH
42468: LD_VAR 0 5
42472: PUSH
42473: LD_VAR 0 17
42477: ISECT
42478: ST_TO_ADDR
// if not list then
42479: LD_VAR 0 5
42483: NOT
42484: IFFALSE 42488
// exit ;
42486: GO 43292
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42488: LD_VAR 0 12
42492: PUSH
42493: LD_INT 3
42495: EQUAL
42496: PUSH
42497: LD_INT 49
42499: PUSH
42500: LD_VAR 0 5
42504: IN
42505: AND
42506: PUSH
42507: LD_INT 31
42509: PPUSH
42510: LD_VAR 0 16
42514: PPUSH
42515: CALL_OW 321
42519: PUSH
42520: LD_INT 2
42522: EQUAL
42523: AND
42524: IFFALSE 42584
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42526: LD_INT 22
42528: PUSH
42529: LD_VAR 0 16
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 35
42540: PUSH
42541: LD_INT 49
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 91
42550: PUSH
42551: LD_VAR 0 1
42555: PUSH
42556: LD_INT 10
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: LIST
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: LIST
42568: PPUSH
42569: CALL_OW 69
42573: NOT
42574: IFFALSE 42584
// weapon := ru_time_lapser ;
42576: LD_ADDR_VAR 0 18
42580: PUSH
42581: LD_INT 49
42583: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42584: LD_VAR 0 12
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: LD_INT 2
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: IN
42599: PUSH
42600: LD_INT 11
42602: PUSH
42603: LD_VAR 0 5
42607: IN
42608: PUSH
42609: LD_INT 30
42611: PUSH
42612: LD_VAR 0 5
42616: IN
42617: OR
42618: AND
42619: PUSH
42620: LD_INT 6
42622: PPUSH
42623: LD_VAR 0 16
42627: PPUSH
42628: CALL_OW 321
42632: PUSH
42633: LD_INT 2
42635: EQUAL
42636: AND
42637: IFFALSE 42802
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42639: LD_INT 22
42641: PUSH
42642: LD_VAR 0 16
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 2
42653: PUSH
42654: LD_INT 35
42656: PUSH
42657: LD_INT 11
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 35
42666: PUSH
42667: LD_INT 30
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 91
42681: PUSH
42682: LD_VAR 0 1
42686: PUSH
42687: LD_INT 18
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: LIST
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: LIST
42699: PPUSH
42700: CALL_OW 69
42704: NOT
42705: PUSH
42706: LD_INT 22
42708: PUSH
42709: LD_VAR 0 16
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: LD_INT 30
42723: PUSH
42724: LD_INT 32
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 30
42733: PUSH
42734: LD_INT 33
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 91
42748: PUSH
42749: LD_VAR 0 1
42753: PUSH
42754: LD_INT 12
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: LIST
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: PUSH
42767: EMPTY
42768: LIST
42769: PPUSH
42770: CALL_OW 69
42774: PUSH
42775: LD_INT 2
42777: GREATER
42778: AND
42779: IFFALSE 42802
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42781: LD_ADDR_VAR 0 18
42785: PUSH
42786: LD_INT 11
42788: PUSH
42789: LD_INT 30
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_VAR 0 12
42800: ARRAY
42801: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42802: LD_VAR 0 18
42806: NOT
42807: PUSH
42808: LD_INT 40
42810: PPUSH
42811: LD_VAR 0 16
42815: PPUSH
42816: CALL_OW 321
42820: PUSH
42821: LD_INT 2
42823: EQUAL
42824: AND
42825: PUSH
42826: LD_INT 7
42828: PUSH
42829: LD_VAR 0 5
42833: IN
42834: PUSH
42835: LD_INT 28
42837: PUSH
42838: LD_VAR 0 5
42842: IN
42843: OR
42844: PUSH
42845: LD_INT 45
42847: PUSH
42848: LD_VAR 0 5
42852: IN
42853: OR
42854: AND
42855: IFFALSE 43109
// begin hex := GetHexInfo ( x , y ) ;
42857: LD_ADDR_VAR 0 4
42861: PUSH
42862: LD_VAR 0 10
42866: PPUSH
42867: LD_VAR 0 11
42871: PPUSH
42872: CALL_OW 546
42876: ST_TO_ADDR
// if hex [ 1 ] then
42877: LD_VAR 0 4
42881: PUSH
42882: LD_INT 1
42884: ARRAY
42885: IFFALSE 42889
// exit ;
42887: GO 43292
// height := hex [ 2 ] ;
42889: LD_ADDR_VAR 0 15
42893: PUSH
42894: LD_VAR 0 4
42898: PUSH
42899: LD_INT 2
42901: ARRAY
42902: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42903: LD_ADDR_VAR 0 14
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: LD_INT 3
42916: PUSH
42917: LD_INT 5
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: ST_TO_ADDR
// for i in tmp do
42926: LD_ADDR_VAR 0 8
42930: PUSH
42931: LD_VAR 0 14
42935: PUSH
42936: FOR_IN
42937: IFFALSE 43107
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42939: LD_ADDR_VAR 0 9
42943: PUSH
42944: LD_VAR 0 10
42948: PPUSH
42949: LD_VAR 0 8
42953: PPUSH
42954: LD_INT 5
42956: PPUSH
42957: CALL_OW 272
42961: PUSH
42962: LD_VAR 0 11
42966: PPUSH
42967: LD_VAR 0 8
42971: PPUSH
42972: LD_INT 5
42974: PPUSH
42975: CALL_OW 273
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42984: LD_VAR 0 9
42988: PUSH
42989: LD_INT 1
42991: ARRAY
42992: PPUSH
42993: LD_VAR 0 9
42997: PUSH
42998: LD_INT 2
43000: ARRAY
43001: PPUSH
43002: CALL_OW 488
43006: IFFALSE 43105
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43008: LD_ADDR_VAR 0 4
43012: PUSH
43013: LD_VAR 0 9
43017: PUSH
43018: LD_INT 1
43020: ARRAY
43021: PPUSH
43022: LD_VAR 0 9
43026: PUSH
43027: LD_INT 2
43029: ARRAY
43030: PPUSH
43031: CALL_OW 546
43035: ST_TO_ADDR
// if hex [ 1 ] then
43036: LD_VAR 0 4
43040: PUSH
43041: LD_INT 1
43043: ARRAY
43044: IFFALSE 43048
// continue ;
43046: GO 42936
// h := hex [ 2 ] ;
43048: LD_ADDR_VAR 0 13
43052: PUSH
43053: LD_VAR 0 4
43057: PUSH
43058: LD_INT 2
43060: ARRAY
43061: ST_TO_ADDR
// if h + 7 < height then
43062: LD_VAR 0 13
43066: PUSH
43067: LD_INT 7
43069: PLUS
43070: PUSH
43071: LD_VAR 0 15
43075: LESS
43076: IFFALSE 43105
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43078: LD_ADDR_VAR 0 18
43082: PUSH
43083: LD_INT 7
43085: PUSH
43086: LD_INT 28
43088: PUSH
43089: LD_INT 45
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: LIST
43096: PUSH
43097: LD_VAR 0 12
43101: ARRAY
43102: ST_TO_ADDR
// break ;
43103: GO 43107
// end ; end ; end ;
43105: GO 42936
43107: POP
43108: POP
// end ; if not weapon then
43109: LD_VAR 0 18
43113: NOT
43114: IFFALSE 43174
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43116: LD_ADDR_VAR 0 5
43120: PUSH
43121: LD_VAR 0 5
43125: PUSH
43126: LD_INT 11
43128: PUSH
43129: LD_INT 30
43131: PUSH
43132: LD_INT 49
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: DIFF
43140: ST_TO_ADDR
// if not list then
43141: LD_VAR 0 5
43145: NOT
43146: IFFALSE 43150
// exit ;
43148: GO 43292
// weapon := list [ rand ( 1 , list ) ] ;
43150: LD_ADDR_VAR 0 18
43154: PUSH
43155: LD_VAR 0 5
43159: PUSH
43160: LD_INT 1
43162: PPUSH
43163: LD_VAR 0 5
43167: PPUSH
43168: CALL_OW 12
43172: ARRAY
43173: ST_TO_ADDR
// end ; if weapon then
43174: LD_VAR 0 18
43178: IFFALSE 43292
// begin tmp := CostOfWeapon ( weapon ) ;
43180: LD_ADDR_VAR 0 14
43184: PUSH
43185: LD_VAR 0 18
43189: PPUSH
43190: CALL_OW 451
43194: ST_TO_ADDR
// j := GetBase ( tower ) ;
43195: LD_ADDR_VAR 0 9
43199: PUSH
43200: LD_VAR 0 1
43204: PPUSH
43205: CALL_OW 274
43209: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43210: LD_VAR 0 9
43214: PPUSH
43215: LD_INT 1
43217: PPUSH
43218: CALL_OW 275
43222: PUSH
43223: LD_VAR 0 14
43227: PUSH
43228: LD_INT 1
43230: ARRAY
43231: GREATEREQUAL
43232: PUSH
43233: LD_VAR 0 9
43237: PPUSH
43238: LD_INT 2
43240: PPUSH
43241: CALL_OW 275
43245: PUSH
43246: LD_VAR 0 14
43250: PUSH
43251: LD_INT 2
43253: ARRAY
43254: GREATEREQUAL
43255: AND
43256: PUSH
43257: LD_VAR 0 9
43261: PPUSH
43262: LD_INT 3
43264: PPUSH
43265: CALL_OW 275
43269: PUSH
43270: LD_VAR 0 14
43274: PUSH
43275: LD_INT 3
43277: ARRAY
43278: GREATEREQUAL
43279: AND
43280: IFFALSE 43292
// result := weapon ;
43282: LD_ADDR_VAR 0 3
43286: PUSH
43287: LD_VAR 0 18
43291: ST_TO_ADDR
// end ; end ;
43292: LD_VAR 0 3
43296: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43297: LD_INT 0
43299: PPUSH
43300: PPUSH
// result := true ;
43301: LD_ADDR_VAR 0 3
43305: PUSH
43306: LD_INT 1
43308: ST_TO_ADDR
// if array1 = array2 then
43309: LD_VAR 0 1
43313: PUSH
43314: LD_VAR 0 2
43318: EQUAL
43319: IFFALSE 43379
// begin for i = 1 to array1 do
43321: LD_ADDR_VAR 0 4
43325: PUSH
43326: DOUBLE
43327: LD_INT 1
43329: DEC
43330: ST_TO_ADDR
43331: LD_VAR 0 1
43335: PUSH
43336: FOR_TO
43337: IFFALSE 43375
// if array1 [ i ] <> array2 [ i ] then
43339: LD_VAR 0 1
43343: PUSH
43344: LD_VAR 0 4
43348: ARRAY
43349: PUSH
43350: LD_VAR 0 2
43354: PUSH
43355: LD_VAR 0 4
43359: ARRAY
43360: NONEQUAL
43361: IFFALSE 43373
// begin result := false ;
43363: LD_ADDR_VAR 0 3
43367: PUSH
43368: LD_INT 0
43370: ST_TO_ADDR
// break ;
43371: GO 43375
// end ;
43373: GO 43336
43375: POP
43376: POP
// end else
43377: GO 43387
// result := false ;
43379: LD_ADDR_VAR 0 3
43383: PUSH
43384: LD_INT 0
43386: ST_TO_ADDR
// end ;
43387: LD_VAR 0 3
43391: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43392: LD_INT 0
43394: PPUSH
43395: PPUSH
// if not array1 or not array2 then
43396: LD_VAR 0 1
43400: NOT
43401: PUSH
43402: LD_VAR 0 2
43406: NOT
43407: OR
43408: IFFALSE 43412
// exit ;
43410: GO 43476
// result := true ;
43412: LD_ADDR_VAR 0 3
43416: PUSH
43417: LD_INT 1
43419: ST_TO_ADDR
// for i = 1 to array1 do
43420: LD_ADDR_VAR 0 4
43424: PUSH
43425: DOUBLE
43426: LD_INT 1
43428: DEC
43429: ST_TO_ADDR
43430: LD_VAR 0 1
43434: PUSH
43435: FOR_TO
43436: IFFALSE 43474
// if array1 [ i ] <> array2 [ i ] then
43438: LD_VAR 0 1
43442: PUSH
43443: LD_VAR 0 4
43447: ARRAY
43448: PUSH
43449: LD_VAR 0 2
43453: PUSH
43454: LD_VAR 0 4
43458: ARRAY
43459: NONEQUAL
43460: IFFALSE 43472
// begin result := false ;
43462: LD_ADDR_VAR 0 3
43466: PUSH
43467: LD_INT 0
43469: ST_TO_ADDR
// break ;
43470: GO 43474
// end ;
43472: GO 43435
43474: POP
43475: POP
// end ;
43476: LD_VAR 0 3
43480: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43481: LD_INT 0
43483: PPUSH
43484: PPUSH
43485: PPUSH
// pom := GetBase ( fac ) ;
43486: LD_ADDR_VAR 0 5
43490: PUSH
43491: LD_VAR 0 1
43495: PPUSH
43496: CALL_OW 274
43500: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43501: LD_ADDR_VAR 0 4
43505: PUSH
43506: LD_VAR 0 2
43510: PUSH
43511: LD_INT 1
43513: ARRAY
43514: PPUSH
43515: LD_VAR 0 2
43519: PUSH
43520: LD_INT 2
43522: ARRAY
43523: PPUSH
43524: LD_VAR 0 2
43528: PUSH
43529: LD_INT 3
43531: ARRAY
43532: PPUSH
43533: LD_VAR 0 2
43537: PUSH
43538: LD_INT 4
43540: ARRAY
43541: PPUSH
43542: CALL_OW 449
43546: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43547: LD_ADDR_VAR 0 3
43551: PUSH
43552: LD_VAR 0 5
43556: PPUSH
43557: LD_INT 1
43559: PPUSH
43560: CALL_OW 275
43564: PUSH
43565: LD_VAR 0 4
43569: PUSH
43570: LD_INT 1
43572: ARRAY
43573: GREATEREQUAL
43574: PUSH
43575: LD_VAR 0 5
43579: PPUSH
43580: LD_INT 2
43582: PPUSH
43583: CALL_OW 275
43587: PUSH
43588: LD_VAR 0 4
43592: PUSH
43593: LD_INT 2
43595: ARRAY
43596: GREATEREQUAL
43597: AND
43598: PUSH
43599: LD_VAR 0 5
43603: PPUSH
43604: LD_INT 3
43606: PPUSH
43607: CALL_OW 275
43611: PUSH
43612: LD_VAR 0 4
43616: PUSH
43617: LD_INT 3
43619: ARRAY
43620: GREATEREQUAL
43621: AND
43622: ST_TO_ADDR
// end ;
43623: LD_VAR 0 3
43627: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43628: LD_INT 0
43630: PPUSH
43631: PPUSH
43632: PPUSH
43633: PPUSH
// pom := GetBase ( building ) ;
43634: LD_ADDR_VAR 0 3
43638: PUSH
43639: LD_VAR 0 1
43643: PPUSH
43644: CALL_OW 274
43648: ST_TO_ADDR
// if not pom then
43649: LD_VAR 0 3
43653: NOT
43654: IFFALSE 43658
// exit ;
43656: GO 43828
// btype := GetBType ( building ) ;
43658: LD_ADDR_VAR 0 5
43662: PUSH
43663: LD_VAR 0 1
43667: PPUSH
43668: CALL_OW 266
43672: ST_TO_ADDR
// if btype = b_armoury then
43673: LD_VAR 0 5
43677: PUSH
43678: LD_INT 4
43680: EQUAL
43681: IFFALSE 43691
// btype := b_barracks ;
43683: LD_ADDR_VAR 0 5
43687: PUSH
43688: LD_INT 5
43690: ST_TO_ADDR
// if btype = b_depot then
43691: LD_VAR 0 5
43695: PUSH
43696: LD_INT 0
43698: EQUAL
43699: IFFALSE 43709
// btype := b_warehouse ;
43701: LD_ADDR_VAR 0 5
43705: PUSH
43706: LD_INT 1
43708: ST_TO_ADDR
// if btype = b_workshop then
43709: LD_VAR 0 5
43713: PUSH
43714: LD_INT 2
43716: EQUAL
43717: IFFALSE 43727
// btype := b_factory ;
43719: LD_ADDR_VAR 0 5
43723: PUSH
43724: LD_INT 3
43726: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43727: LD_ADDR_VAR 0 4
43731: PUSH
43732: LD_VAR 0 5
43736: PPUSH
43737: LD_VAR 0 1
43741: PPUSH
43742: CALL_OW 248
43746: PPUSH
43747: CALL_OW 450
43751: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43752: LD_ADDR_VAR 0 2
43756: PUSH
43757: LD_VAR 0 3
43761: PPUSH
43762: LD_INT 1
43764: PPUSH
43765: CALL_OW 275
43769: PUSH
43770: LD_VAR 0 4
43774: PUSH
43775: LD_INT 1
43777: ARRAY
43778: GREATEREQUAL
43779: PUSH
43780: LD_VAR 0 3
43784: PPUSH
43785: LD_INT 2
43787: PPUSH
43788: CALL_OW 275
43792: PUSH
43793: LD_VAR 0 4
43797: PUSH
43798: LD_INT 2
43800: ARRAY
43801: GREATEREQUAL
43802: AND
43803: PUSH
43804: LD_VAR 0 3
43808: PPUSH
43809: LD_INT 3
43811: PPUSH
43812: CALL_OW 275
43816: PUSH
43817: LD_VAR 0 4
43821: PUSH
43822: LD_INT 3
43824: ARRAY
43825: GREATEREQUAL
43826: AND
43827: ST_TO_ADDR
// end ;
43828: LD_VAR 0 2
43832: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43833: LD_INT 0
43835: PPUSH
43836: PPUSH
43837: PPUSH
// pom := GetBase ( building ) ;
43838: LD_ADDR_VAR 0 4
43842: PUSH
43843: LD_VAR 0 1
43847: PPUSH
43848: CALL_OW 274
43852: ST_TO_ADDR
// if not pom then
43853: LD_VAR 0 4
43857: NOT
43858: IFFALSE 43862
// exit ;
43860: GO 43963
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43862: LD_ADDR_VAR 0 5
43866: PUSH
43867: LD_VAR 0 2
43871: PPUSH
43872: LD_VAR 0 1
43876: PPUSH
43877: CALL_OW 248
43881: PPUSH
43882: CALL_OW 450
43886: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43887: LD_ADDR_VAR 0 3
43891: PUSH
43892: LD_VAR 0 4
43896: PPUSH
43897: LD_INT 1
43899: PPUSH
43900: CALL_OW 275
43904: PUSH
43905: LD_VAR 0 5
43909: PUSH
43910: LD_INT 1
43912: ARRAY
43913: GREATEREQUAL
43914: PUSH
43915: LD_VAR 0 4
43919: PPUSH
43920: LD_INT 2
43922: PPUSH
43923: CALL_OW 275
43927: PUSH
43928: LD_VAR 0 5
43932: PUSH
43933: LD_INT 2
43935: ARRAY
43936: GREATEREQUAL
43937: AND
43938: PUSH
43939: LD_VAR 0 4
43943: PPUSH
43944: LD_INT 3
43946: PPUSH
43947: CALL_OW 275
43951: PUSH
43952: LD_VAR 0 5
43956: PUSH
43957: LD_INT 3
43959: ARRAY
43960: GREATEREQUAL
43961: AND
43962: ST_TO_ADDR
// end ;
43963: LD_VAR 0 3
43967: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43968: LD_INT 0
43970: PPUSH
43971: PPUSH
43972: PPUSH
43973: PPUSH
43974: PPUSH
43975: PPUSH
43976: PPUSH
43977: PPUSH
43978: PPUSH
43979: PPUSH
43980: PPUSH
// result := false ;
43981: LD_ADDR_VAR 0 8
43985: PUSH
43986: LD_INT 0
43988: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43989: LD_VAR 0 5
43993: NOT
43994: PUSH
43995: LD_VAR 0 1
43999: NOT
44000: OR
44001: PUSH
44002: LD_VAR 0 2
44006: NOT
44007: OR
44008: PUSH
44009: LD_VAR 0 3
44013: NOT
44014: OR
44015: IFFALSE 44019
// exit ;
44017: GO 44833
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44019: LD_ADDR_VAR 0 14
44023: PUSH
44024: LD_VAR 0 1
44028: PPUSH
44029: LD_VAR 0 2
44033: PPUSH
44034: LD_VAR 0 3
44038: PPUSH
44039: LD_VAR 0 4
44043: PPUSH
44044: LD_VAR 0 5
44048: PUSH
44049: LD_INT 1
44051: ARRAY
44052: PPUSH
44053: CALL_OW 248
44057: PPUSH
44058: LD_INT 0
44060: PPUSH
44061: CALL 46086 0 6
44065: ST_TO_ADDR
// if not hexes then
44066: LD_VAR 0 14
44070: NOT
44071: IFFALSE 44075
// exit ;
44073: GO 44833
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44075: LD_ADDR_VAR 0 17
44079: PUSH
44080: LD_VAR 0 5
44084: PPUSH
44085: LD_INT 22
44087: PUSH
44088: LD_VAR 0 13
44092: PPUSH
44093: CALL_OW 255
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 30
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 30
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: LIST
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PPUSH
44134: CALL_OW 72
44138: ST_TO_ADDR
// for i = 1 to hexes do
44139: LD_ADDR_VAR 0 9
44143: PUSH
44144: DOUBLE
44145: LD_INT 1
44147: DEC
44148: ST_TO_ADDR
44149: LD_VAR 0 14
44153: PUSH
44154: FOR_TO
44155: IFFALSE 44831
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44157: LD_ADDR_VAR 0 13
44161: PUSH
44162: LD_VAR 0 14
44166: PUSH
44167: LD_VAR 0 9
44171: ARRAY
44172: PUSH
44173: LD_INT 1
44175: ARRAY
44176: PPUSH
44177: LD_VAR 0 14
44181: PUSH
44182: LD_VAR 0 9
44186: ARRAY
44187: PUSH
44188: LD_INT 2
44190: ARRAY
44191: PPUSH
44192: CALL_OW 428
44196: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44197: LD_VAR 0 14
44201: PUSH
44202: LD_VAR 0 9
44206: ARRAY
44207: PUSH
44208: LD_INT 1
44210: ARRAY
44211: PPUSH
44212: LD_VAR 0 14
44216: PUSH
44217: LD_VAR 0 9
44221: ARRAY
44222: PUSH
44223: LD_INT 2
44225: ARRAY
44226: PPUSH
44227: CALL_OW 351
44231: PUSH
44232: LD_VAR 0 14
44236: PUSH
44237: LD_VAR 0 9
44241: ARRAY
44242: PUSH
44243: LD_INT 1
44245: ARRAY
44246: PPUSH
44247: LD_VAR 0 14
44251: PUSH
44252: LD_VAR 0 9
44256: ARRAY
44257: PUSH
44258: LD_INT 2
44260: ARRAY
44261: PPUSH
44262: CALL_OW 488
44266: NOT
44267: OR
44268: PUSH
44269: LD_VAR 0 13
44273: PPUSH
44274: CALL_OW 247
44278: PUSH
44279: LD_INT 3
44281: EQUAL
44282: OR
44283: IFFALSE 44289
// exit ;
44285: POP
44286: POP
44287: GO 44833
// if not tmp then
44289: LD_VAR 0 13
44293: NOT
44294: IFFALSE 44298
// continue ;
44296: GO 44154
// result := true ;
44298: LD_ADDR_VAR 0 8
44302: PUSH
44303: LD_INT 1
44305: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44306: LD_VAR 0 6
44310: PUSH
44311: LD_VAR 0 13
44315: PPUSH
44316: CALL_OW 247
44320: PUSH
44321: LD_INT 2
44323: EQUAL
44324: AND
44325: PUSH
44326: LD_VAR 0 13
44330: PPUSH
44331: CALL_OW 263
44335: PUSH
44336: LD_INT 1
44338: EQUAL
44339: AND
44340: IFFALSE 44504
// begin if IsDrivenBy ( tmp ) then
44342: LD_VAR 0 13
44346: PPUSH
44347: CALL_OW 311
44351: IFFALSE 44355
// continue ;
44353: GO 44154
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44355: LD_VAR 0 6
44359: PPUSH
44360: LD_INT 3
44362: PUSH
44363: LD_INT 60
44365: PUSH
44366: EMPTY
44367: LIST
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 3
44375: PUSH
44376: LD_INT 55
44378: PUSH
44379: EMPTY
44380: LIST
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PPUSH
44390: CALL_OW 72
44394: IFFALSE 44502
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44396: LD_ADDR_VAR 0 18
44400: PUSH
44401: LD_VAR 0 6
44405: PPUSH
44406: LD_INT 3
44408: PUSH
44409: LD_INT 60
44411: PUSH
44412: EMPTY
44413: LIST
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 3
44421: PUSH
44422: LD_INT 55
44424: PUSH
44425: EMPTY
44426: LIST
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PPUSH
44436: CALL_OW 72
44440: PUSH
44441: LD_INT 1
44443: ARRAY
44444: ST_TO_ADDR
// if IsInUnit ( driver ) then
44445: LD_VAR 0 18
44449: PPUSH
44450: CALL_OW 310
44454: IFFALSE 44465
// ComExit ( driver ) ;
44456: LD_VAR 0 18
44460: PPUSH
44461: CALL 69867 0 1
// AddComEnterUnit ( driver , tmp ) ;
44465: LD_VAR 0 18
44469: PPUSH
44470: LD_VAR 0 13
44474: PPUSH
44475: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44479: LD_VAR 0 18
44483: PPUSH
44484: LD_VAR 0 7
44488: PPUSH
44489: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44493: LD_VAR 0 18
44497: PPUSH
44498: CALL_OW 181
// end ; continue ;
44502: GO 44154
// end ; if not cleaners or not tmp in cleaners then
44504: LD_VAR 0 6
44508: NOT
44509: PUSH
44510: LD_VAR 0 13
44514: PUSH
44515: LD_VAR 0 6
44519: IN
44520: NOT
44521: OR
44522: IFFALSE 44829
// begin if dep then
44524: LD_VAR 0 17
44528: IFFALSE 44664
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44530: LD_ADDR_VAR 0 16
44534: PUSH
44535: LD_VAR 0 17
44539: PUSH
44540: LD_INT 1
44542: ARRAY
44543: PPUSH
44544: CALL_OW 250
44548: PPUSH
44549: LD_VAR 0 17
44553: PUSH
44554: LD_INT 1
44556: ARRAY
44557: PPUSH
44558: CALL_OW 254
44562: PPUSH
44563: LD_INT 5
44565: PPUSH
44566: CALL_OW 272
44570: PUSH
44571: LD_VAR 0 17
44575: PUSH
44576: LD_INT 1
44578: ARRAY
44579: PPUSH
44580: CALL_OW 251
44584: PPUSH
44585: LD_VAR 0 17
44589: PUSH
44590: LD_INT 1
44592: ARRAY
44593: PPUSH
44594: CALL_OW 254
44598: PPUSH
44599: LD_INT 5
44601: PPUSH
44602: CALL_OW 273
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44611: LD_VAR 0 16
44615: PUSH
44616: LD_INT 1
44618: ARRAY
44619: PPUSH
44620: LD_VAR 0 16
44624: PUSH
44625: LD_INT 2
44627: ARRAY
44628: PPUSH
44629: CALL_OW 488
44633: IFFALSE 44664
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44635: LD_VAR 0 13
44639: PPUSH
44640: LD_VAR 0 16
44644: PUSH
44645: LD_INT 1
44647: ARRAY
44648: PPUSH
44649: LD_VAR 0 16
44653: PUSH
44654: LD_INT 2
44656: ARRAY
44657: PPUSH
44658: CALL_OW 111
// continue ;
44662: GO 44154
// end ; end ; r := GetDir ( tmp ) ;
44664: LD_ADDR_VAR 0 15
44668: PUSH
44669: LD_VAR 0 13
44673: PPUSH
44674: CALL_OW 254
44678: ST_TO_ADDR
// if r = 5 then
44679: LD_VAR 0 15
44683: PUSH
44684: LD_INT 5
44686: EQUAL
44687: IFFALSE 44697
// r := 0 ;
44689: LD_ADDR_VAR 0 15
44693: PUSH
44694: LD_INT 0
44696: ST_TO_ADDR
// for j = r to 5 do
44697: LD_ADDR_VAR 0 10
44701: PUSH
44702: DOUBLE
44703: LD_VAR 0 15
44707: DEC
44708: ST_TO_ADDR
44709: LD_INT 5
44711: PUSH
44712: FOR_TO
44713: IFFALSE 44827
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44715: LD_ADDR_VAR 0 11
44719: PUSH
44720: LD_VAR 0 13
44724: PPUSH
44725: CALL_OW 250
44729: PPUSH
44730: LD_VAR 0 10
44734: PPUSH
44735: LD_INT 2
44737: PPUSH
44738: CALL_OW 272
44742: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44743: LD_ADDR_VAR 0 12
44747: PUSH
44748: LD_VAR 0 13
44752: PPUSH
44753: CALL_OW 251
44757: PPUSH
44758: LD_VAR 0 10
44762: PPUSH
44763: LD_INT 2
44765: PPUSH
44766: CALL_OW 273
44770: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44771: LD_VAR 0 11
44775: PPUSH
44776: LD_VAR 0 12
44780: PPUSH
44781: CALL_OW 488
44785: PUSH
44786: LD_VAR 0 11
44790: PPUSH
44791: LD_VAR 0 12
44795: PPUSH
44796: CALL_OW 428
44800: NOT
44801: AND
44802: IFFALSE 44825
// begin ComMoveXY ( tmp , _x , _y ) ;
44804: LD_VAR 0 13
44808: PPUSH
44809: LD_VAR 0 11
44813: PPUSH
44814: LD_VAR 0 12
44818: PPUSH
44819: CALL_OW 111
// break ;
44823: GO 44827
// end ; end ;
44825: GO 44712
44827: POP
44828: POP
// end ; end ;
44829: GO 44154
44831: POP
44832: POP
// end ;
44833: LD_VAR 0 8
44837: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44838: LD_INT 0
44840: PPUSH
// result := true ;
44841: LD_ADDR_VAR 0 3
44845: PUSH
44846: LD_INT 1
44848: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44849: LD_VAR 0 2
44853: PUSH
44854: LD_INT 24
44856: DOUBLE
44857: EQUAL
44858: IFTRUE 44868
44860: LD_INT 33
44862: DOUBLE
44863: EQUAL
44864: IFTRUE 44868
44866: GO 44893
44868: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44869: LD_ADDR_VAR 0 3
44873: PUSH
44874: LD_INT 32
44876: PPUSH
44877: LD_VAR 0 1
44881: PPUSH
44882: CALL_OW 321
44886: PUSH
44887: LD_INT 2
44889: EQUAL
44890: ST_TO_ADDR
44891: GO 45209
44893: LD_INT 20
44895: DOUBLE
44896: EQUAL
44897: IFTRUE 44901
44899: GO 44926
44901: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44902: LD_ADDR_VAR 0 3
44906: PUSH
44907: LD_INT 6
44909: PPUSH
44910: LD_VAR 0 1
44914: PPUSH
44915: CALL_OW 321
44919: PUSH
44920: LD_INT 2
44922: EQUAL
44923: ST_TO_ADDR
44924: GO 45209
44926: LD_INT 22
44928: DOUBLE
44929: EQUAL
44930: IFTRUE 44940
44932: LD_INT 36
44934: DOUBLE
44935: EQUAL
44936: IFTRUE 44940
44938: GO 44965
44940: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44941: LD_ADDR_VAR 0 3
44945: PUSH
44946: LD_INT 15
44948: PPUSH
44949: LD_VAR 0 1
44953: PPUSH
44954: CALL_OW 321
44958: PUSH
44959: LD_INT 2
44961: EQUAL
44962: ST_TO_ADDR
44963: GO 45209
44965: LD_INT 30
44967: DOUBLE
44968: EQUAL
44969: IFTRUE 44973
44971: GO 44998
44973: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44974: LD_ADDR_VAR 0 3
44978: PUSH
44979: LD_INT 20
44981: PPUSH
44982: LD_VAR 0 1
44986: PPUSH
44987: CALL_OW 321
44991: PUSH
44992: LD_INT 2
44994: EQUAL
44995: ST_TO_ADDR
44996: GO 45209
44998: LD_INT 28
45000: DOUBLE
45001: EQUAL
45002: IFTRUE 45012
45004: LD_INT 21
45006: DOUBLE
45007: EQUAL
45008: IFTRUE 45012
45010: GO 45037
45012: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45013: LD_ADDR_VAR 0 3
45017: PUSH
45018: LD_INT 21
45020: PPUSH
45021: LD_VAR 0 1
45025: PPUSH
45026: CALL_OW 321
45030: PUSH
45031: LD_INT 2
45033: EQUAL
45034: ST_TO_ADDR
45035: GO 45209
45037: LD_INT 16
45039: DOUBLE
45040: EQUAL
45041: IFTRUE 45045
45043: GO 45070
45045: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45046: LD_ADDR_VAR 0 3
45050: PUSH
45051: LD_INT 84
45053: PPUSH
45054: LD_VAR 0 1
45058: PPUSH
45059: CALL_OW 321
45063: PUSH
45064: LD_INT 2
45066: EQUAL
45067: ST_TO_ADDR
45068: GO 45209
45070: LD_INT 19
45072: DOUBLE
45073: EQUAL
45074: IFTRUE 45084
45076: LD_INT 23
45078: DOUBLE
45079: EQUAL
45080: IFTRUE 45084
45082: GO 45109
45084: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45085: LD_ADDR_VAR 0 3
45089: PUSH
45090: LD_INT 83
45092: PPUSH
45093: LD_VAR 0 1
45097: PPUSH
45098: CALL_OW 321
45102: PUSH
45103: LD_INT 2
45105: EQUAL
45106: ST_TO_ADDR
45107: GO 45209
45109: LD_INT 17
45111: DOUBLE
45112: EQUAL
45113: IFTRUE 45117
45115: GO 45142
45117: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45118: LD_ADDR_VAR 0 3
45122: PUSH
45123: LD_INT 39
45125: PPUSH
45126: LD_VAR 0 1
45130: PPUSH
45131: CALL_OW 321
45135: PUSH
45136: LD_INT 2
45138: EQUAL
45139: ST_TO_ADDR
45140: GO 45209
45142: LD_INT 18
45144: DOUBLE
45145: EQUAL
45146: IFTRUE 45150
45148: GO 45175
45150: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45151: LD_ADDR_VAR 0 3
45155: PUSH
45156: LD_INT 40
45158: PPUSH
45159: LD_VAR 0 1
45163: PPUSH
45164: CALL_OW 321
45168: PUSH
45169: LD_INT 2
45171: EQUAL
45172: ST_TO_ADDR
45173: GO 45209
45175: LD_INT 27
45177: DOUBLE
45178: EQUAL
45179: IFTRUE 45183
45181: GO 45208
45183: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45184: LD_ADDR_VAR 0 3
45188: PUSH
45189: LD_INT 35
45191: PPUSH
45192: LD_VAR 0 1
45196: PPUSH
45197: CALL_OW 321
45201: PUSH
45202: LD_INT 2
45204: EQUAL
45205: ST_TO_ADDR
45206: GO 45209
45208: POP
// end ;
45209: LD_VAR 0 3
45213: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45214: LD_INT 0
45216: PPUSH
45217: PPUSH
45218: PPUSH
45219: PPUSH
45220: PPUSH
45221: PPUSH
45222: PPUSH
45223: PPUSH
45224: PPUSH
45225: PPUSH
45226: PPUSH
// result := false ;
45227: LD_ADDR_VAR 0 6
45231: PUSH
45232: LD_INT 0
45234: ST_TO_ADDR
// if btype = b_depot then
45235: LD_VAR 0 2
45239: PUSH
45240: LD_INT 0
45242: EQUAL
45243: IFFALSE 45255
// begin result := true ;
45245: LD_ADDR_VAR 0 6
45249: PUSH
45250: LD_INT 1
45252: ST_TO_ADDR
// exit ;
45253: GO 46081
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45255: LD_VAR 0 1
45259: NOT
45260: PUSH
45261: LD_VAR 0 1
45265: PPUSH
45266: CALL_OW 266
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: IN
45281: NOT
45282: OR
45283: PUSH
45284: LD_VAR 0 2
45288: NOT
45289: OR
45290: PUSH
45291: LD_VAR 0 5
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: LD_INT 3
45307: PUSH
45308: LD_INT 4
45310: PUSH
45311: LD_INT 5
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: IN
45322: NOT
45323: OR
45324: PUSH
45325: LD_VAR 0 3
45329: PPUSH
45330: LD_VAR 0 4
45334: PPUSH
45335: CALL_OW 488
45339: NOT
45340: OR
45341: IFFALSE 45345
// exit ;
45343: GO 46081
// side := GetSide ( depot ) ;
45345: LD_ADDR_VAR 0 9
45349: PUSH
45350: LD_VAR 0 1
45354: PPUSH
45355: CALL_OW 255
45359: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45360: LD_VAR 0 9
45364: PPUSH
45365: LD_VAR 0 2
45369: PPUSH
45370: CALL 44838 0 2
45374: NOT
45375: IFFALSE 45379
// exit ;
45377: GO 46081
// pom := GetBase ( depot ) ;
45379: LD_ADDR_VAR 0 10
45383: PUSH
45384: LD_VAR 0 1
45388: PPUSH
45389: CALL_OW 274
45393: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45394: LD_ADDR_VAR 0 11
45398: PUSH
45399: LD_VAR 0 2
45403: PPUSH
45404: LD_VAR 0 1
45408: PPUSH
45409: CALL_OW 248
45413: PPUSH
45414: CALL_OW 450
45418: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45419: LD_VAR 0 10
45423: PPUSH
45424: LD_INT 1
45426: PPUSH
45427: CALL_OW 275
45431: PUSH
45432: LD_VAR 0 11
45436: PUSH
45437: LD_INT 1
45439: ARRAY
45440: GREATEREQUAL
45441: PUSH
45442: LD_VAR 0 10
45446: PPUSH
45447: LD_INT 2
45449: PPUSH
45450: CALL_OW 275
45454: PUSH
45455: LD_VAR 0 11
45459: PUSH
45460: LD_INT 2
45462: ARRAY
45463: GREATEREQUAL
45464: AND
45465: PUSH
45466: LD_VAR 0 10
45470: PPUSH
45471: LD_INT 3
45473: PPUSH
45474: CALL_OW 275
45478: PUSH
45479: LD_VAR 0 11
45483: PUSH
45484: LD_INT 3
45486: ARRAY
45487: GREATEREQUAL
45488: AND
45489: NOT
45490: IFFALSE 45494
// exit ;
45492: GO 46081
// if GetBType ( depot ) = b_depot then
45494: LD_VAR 0 1
45498: PPUSH
45499: CALL_OW 266
45503: PUSH
45504: LD_INT 0
45506: EQUAL
45507: IFFALSE 45519
// dist := 28 else
45509: LD_ADDR_VAR 0 14
45513: PUSH
45514: LD_INT 28
45516: ST_TO_ADDR
45517: GO 45527
// dist := 36 ;
45519: LD_ADDR_VAR 0 14
45523: PUSH
45524: LD_INT 36
45526: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45527: LD_VAR 0 1
45531: PPUSH
45532: LD_VAR 0 3
45536: PPUSH
45537: LD_VAR 0 4
45541: PPUSH
45542: CALL_OW 297
45546: PUSH
45547: LD_VAR 0 14
45551: GREATER
45552: IFFALSE 45556
// exit ;
45554: GO 46081
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45556: LD_ADDR_VAR 0 12
45560: PUSH
45561: LD_VAR 0 2
45565: PPUSH
45566: LD_VAR 0 3
45570: PPUSH
45571: LD_VAR 0 4
45575: PPUSH
45576: LD_VAR 0 5
45580: PPUSH
45581: LD_VAR 0 1
45585: PPUSH
45586: CALL_OW 248
45590: PPUSH
45591: LD_INT 0
45593: PPUSH
45594: CALL 46086 0 6
45598: ST_TO_ADDR
// if not hexes then
45599: LD_VAR 0 12
45603: NOT
45604: IFFALSE 45608
// exit ;
45606: GO 46081
// hex := GetHexInfo ( x , y ) ;
45608: LD_ADDR_VAR 0 15
45612: PUSH
45613: LD_VAR 0 3
45617: PPUSH
45618: LD_VAR 0 4
45622: PPUSH
45623: CALL_OW 546
45627: ST_TO_ADDR
// if hex [ 1 ] then
45628: LD_VAR 0 15
45632: PUSH
45633: LD_INT 1
45635: ARRAY
45636: IFFALSE 45640
// exit ;
45638: GO 46081
// height := hex [ 2 ] ;
45640: LD_ADDR_VAR 0 13
45644: PUSH
45645: LD_VAR 0 15
45649: PUSH
45650: LD_INT 2
45652: ARRAY
45653: ST_TO_ADDR
// for i = 1 to hexes do
45654: LD_ADDR_VAR 0 7
45658: PUSH
45659: DOUBLE
45660: LD_INT 1
45662: DEC
45663: ST_TO_ADDR
45664: LD_VAR 0 12
45668: PUSH
45669: FOR_TO
45670: IFFALSE 46000
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45672: LD_VAR 0 12
45676: PUSH
45677: LD_VAR 0 7
45681: ARRAY
45682: PUSH
45683: LD_INT 1
45685: ARRAY
45686: PPUSH
45687: LD_VAR 0 12
45691: PUSH
45692: LD_VAR 0 7
45696: ARRAY
45697: PUSH
45698: LD_INT 2
45700: ARRAY
45701: PPUSH
45702: CALL_OW 488
45706: NOT
45707: PUSH
45708: LD_VAR 0 12
45712: PUSH
45713: LD_VAR 0 7
45717: ARRAY
45718: PUSH
45719: LD_INT 1
45721: ARRAY
45722: PPUSH
45723: LD_VAR 0 12
45727: PUSH
45728: LD_VAR 0 7
45732: ARRAY
45733: PUSH
45734: LD_INT 2
45736: ARRAY
45737: PPUSH
45738: CALL_OW 428
45742: PUSH
45743: LD_INT 0
45745: GREATER
45746: OR
45747: PUSH
45748: LD_VAR 0 12
45752: PUSH
45753: LD_VAR 0 7
45757: ARRAY
45758: PUSH
45759: LD_INT 1
45761: ARRAY
45762: PPUSH
45763: LD_VAR 0 12
45767: PUSH
45768: LD_VAR 0 7
45772: ARRAY
45773: PUSH
45774: LD_INT 2
45776: ARRAY
45777: PPUSH
45778: CALL_OW 351
45782: OR
45783: IFFALSE 45789
// exit ;
45785: POP
45786: POP
45787: GO 46081
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45789: LD_ADDR_VAR 0 8
45793: PUSH
45794: LD_VAR 0 12
45798: PUSH
45799: LD_VAR 0 7
45803: ARRAY
45804: PUSH
45805: LD_INT 1
45807: ARRAY
45808: PPUSH
45809: LD_VAR 0 12
45813: PUSH
45814: LD_VAR 0 7
45818: ARRAY
45819: PUSH
45820: LD_INT 2
45822: ARRAY
45823: PPUSH
45824: CALL_OW 546
45828: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45829: LD_VAR 0 8
45833: PUSH
45834: LD_INT 1
45836: ARRAY
45837: PUSH
45838: LD_VAR 0 8
45842: PUSH
45843: LD_INT 2
45845: ARRAY
45846: PUSH
45847: LD_VAR 0 13
45851: PUSH
45852: LD_INT 2
45854: PLUS
45855: GREATER
45856: OR
45857: PUSH
45858: LD_VAR 0 8
45862: PUSH
45863: LD_INT 2
45865: ARRAY
45866: PUSH
45867: LD_VAR 0 13
45871: PUSH
45872: LD_INT 2
45874: MINUS
45875: LESS
45876: OR
45877: PUSH
45878: LD_VAR 0 8
45882: PUSH
45883: LD_INT 3
45885: ARRAY
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: LD_INT 8
45892: PUSH
45893: LD_INT 9
45895: PUSH
45896: LD_INT 10
45898: PUSH
45899: LD_INT 11
45901: PUSH
45902: LD_INT 12
45904: PUSH
45905: LD_INT 13
45907: PUSH
45908: LD_INT 16
45910: PUSH
45911: LD_INT 17
45913: PUSH
45914: LD_INT 18
45916: PUSH
45917: LD_INT 19
45919: PUSH
45920: LD_INT 20
45922: PUSH
45923: LD_INT 21
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: IN
45941: NOT
45942: OR
45943: PUSH
45944: LD_VAR 0 8
45948: PUSH
45949: LD_INT 5
45951: ARRAY
45952: NOT
45953: OR
45954: PUSH
45955: LD_VAR 0 8
45959: PUSH
45960: LD_INT 6
45962: ARRAY
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: LD_INT 2
45969: PUSH
45970: LD_INT 7
45972: PUSH
45973: LD_INT 9
45975: PUSH
45976: LD_INT 10
45978: PUSH
45979: LD_INT 11
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: IN
45990: NOT
45991: OR
45992: IFFALSE 45998
// exit ;
45994: POP
45995: POP
45996: GO 46081
// end ;
45998: GO 45669
46000: POP
46001: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46002: LD_VAR 0 9
46006: PPUSH
46007: LD_VAR 0 3
46011: PPUSH
46012: LD_VAR 0 4
46016: PPUSH
46017: LD_INT 20
46019: PPUSH
46020: CALL 38004 0 4
46024: PUSH
46025: LD_INT 4
46027: ARRAY
46028: IFFALSE 46032
// exit ;
46030: GO 46081
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46032: LD_VAR 0 2
46036: PUSH
46037: LD_INT 29
46039: PUSH
46040: LD_INT 30
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: IN
46047: PUSH
46048: LD_VAR 0 3
46052: PPUSH
46053: LD_VAR 0 4
46057: PPUSH
46058: LD_VAR 0 9
46062: PPUSH
46063: CALL_OW 440
46067: NOT
46068: AND
46069: IFFALSE 46073
// exit ;
46071: GO 46081
// result := true ;
46073: LD_ADDR_VAR 0 6
46077: PUSH
46078: LD_INT 1
46080: ST_TO_ADDR
// end ;
46081: LD_VAR 0 6
46085: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46086: LD_INT 0
46088: PPUSH
46089: PPUSH
46090: PPUSH
46091: PPUSH
46092: PPUSH
46093: PPUSH
46094: PPUSH
46095: PPUSH
46096: PPUSH
46097: PPUSH
46098: PPUSH
46099: PPUSH
46100: PPUSH
46101: PPUSH
46102: PPUSH
46103: PPUSH
46104: PPUSH
46105: PPUSH
46106: PPUSH
46107: PPUSH
46108: PPUSH
46109: PPUSH
46110: PPUSH
46111: PPUSH
46112: PPUSH
46113: PPUSH
46114: PPUSH
46115: PPUSH
46116: PPUSH
46117: PPUSH
46118: PPUSH
46119: PPUSH
46120: PPUSH
46121: PPUSH
46122: PPUSH
46123: PPUSH
46124: PPUSH
46125: PPUSH
46126: PPUSH
46127: PPUSH
46128: PPUSH
46129: PPUSH
46130: PPUSH
46131: PPUSH
46132: PPUSH
46133: PPUSH
46134: PPUSH
46135: PPUSH
46136: PPUSH
46137: PPUSH
46138: PPUSH
46139: PPUSH
46140: PPUSH
46141: PPUSH
46142: PPUSH
46143: PPUSH
46144: PPUSH
46145: PPUSH
// result = [ ] ;
46146: LD_ADDR_VAR 0 7
46150: PUSH
46151: EMPTY
46152: ST_TO_ADDR
// temp_list = [ ] ;
46153: LD_ADDR_VAR 0 9
46157: PUSH
46158: EMPTY
46159: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46160: LD_VAR 0 4
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: LD_INT 3
46176: PUSH
46177: LD_INT 4
46179: PUSH
46180: LD_INT 5
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: IN
46191: NOT
46192: PUSH
46193: LD_VAR 0 1
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: IN
46208: PUSH
46209: LD_VAR 0 5
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 3
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: LIST
46227: IN
46228: NOT
46229: AND
46230: OR
46231: IFFALSE 46235
// exit ;
46233: GO 64626
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46235: LD_VAR 0 1
46239: PUSH
46240: LD_INT 6
46242: PUSH
46243: LD_INT 7
46245: PUSH
46246: LD_INT 8
46248: PUSH
46249: LD_INT 13
46251: PUSH
46252: LD_INT 12
46254: PUSH
46255: LD_INT 15
46257: PUSH
46258: LD_INT 11
46260: PUSH
46261: LD_INT 14
46263: PUSH
46264: LD_INT 10
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: IN
46278: IFFALSE 46288
// btype = b_lab ;
46280: LD_ADDR_VAR 0 1
46284: PUSH
46285: LD_INT 6
46287: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46288: LD_VAR 0 6
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: IN
46307: NOT
46308: PUSH
46309: LD_VAR 0 1
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: LD_INT 6
46328: PUSH
46329: LD_INT 36
46331: PUSH
46332: LD_INT 4
46334: PUSH
46335: LD_INT 5
46337: PUSH
46338: LD_INT 31
46340: PUSH
46341: LD_INT 32
46343: PUSH
46344: LD_INT 33
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: IN
46360: NOT
46361: PUSH
46362: LD_VAR 0 6
46366: PUSH
46367: LD_INT 1
46369: EQUAL
46370: AND
46371: OR
46372: PUSH
46373: LD_VAR 0 1
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: LD_INT 3
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: IN
46388: NOT
46389: PUSH
46390: LD_VAR 0 6
46394: PUSH
46395: LD_INT 2
46397: EQUAL
46398: AND
46399: OR
46400: IFFALSE 46410
// mode = 0 ;
46402: LD_ADDR_VAR 0 6
46406: PUSH
46407: LD_INT 0
46409: ST_TO_ADDR
// case mode of 0 :
46410: LD_VAR 0 6
46414: PUSH
46415: LD_INT 0
46417: DOUBLE
46418: EQUAL
46419: IFTRUE 46423
46421: GO 57876
46423: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46424: LD_ADDR_VAR 0 11
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 3
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 3
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46617: LD_ADDR_VAR 0 12
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: NEG
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 2
46751: NEG
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 3
46774: NEG
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 3
46785: NEG
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46813: LD_ADDR_VAR 0 13
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: LD_INT 3
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 3
46972: NEG
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 3
46984: NEG
46985: PUSH
46986: LD_INT 3
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47012: LD_ADDR_VAR 0 14
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 3
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 3
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47208: LD_ADDR_VAR 0 15
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 2
47331: NEG
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 3
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 3
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47401: LD_ADDR_VAR 0 16
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 2
47536: NEG
47537: PUSH
47538: LD_INT 2
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 3
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 3
47558: PUSH
47559: LD_INT 3
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: LD_INT 3
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47594: LD_ADDR_VAR 0 17
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: NEG
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: NEG
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47824: LD_ADDR_VAR 0 18
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: LD_INT 2
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: LD_INT 2
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: NEG
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48054: LD_ADDR_VAR 0 19
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: LD_INT 2
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: NEG
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48284: LD_ADDR_VAR 0 20
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48514: LD_ADDR_VAR 0 21
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: LD_INT 2
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48744: LD_ADDR_VAR 0 22
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 2
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48974: LD_ADDR_VAR 0 23
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 2
49173: NEG
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: LD_INT 3
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: LD_INT 3
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49254: LD_ADDR_VAR 0 24
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: NEG
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 2
49453: NEG
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: LD_INT 2
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 3
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 3
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49530: LD_ADDR_VAR 0 25
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: LD_INT 2
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: NEG
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 2
49729: NEG
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 3
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 3
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49804: LD_ADDR_VAR 0 26
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 2
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 2
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: NEG
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: LD_INT 3
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: LD_INT 3
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50080: LD_ADDR_VAR 0 27
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 2
50256: NEG
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: LD_INT 2
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 3
50313: NEG
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 3
50325: NEG
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50360: LD_ADDR_VAR 0 28
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 2
50547: NEG
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: LD_INT 3
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 3
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 3
50595: NEG
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 3
50607: NEG
50608: PUSH
50609: LD_INT 2
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50642: LD_ADDR_VAR 0 29
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: LD_INT 2
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: NEG
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: LD_INT 2
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: LD_INT 3
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 3
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 3
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 3
50886: NEG
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50921: LD_ADDR_VAR 0 30
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: LD_INT 2
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 2
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: LD_INT 3
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 3
51133: PUSH
51134: LD_INT 2
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: LD_INT 3
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 3
51164: NEG
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51199: LD_ADDR_VAR 0 31
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 2
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: LD_INT 2
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 2
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: NEG
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: NEG
51389: PUSH
51390: LD_INT 3
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 3
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: LD_INT 3
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 3
51442: NEG
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51477: LD_ADDR_VAR 0 32
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: LD_INT 2
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: LD_INT 3
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 3
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: NEG
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51755: LD_ADDR_VAR 0 33
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 2
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 2
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 2
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 2
51921: NEG
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: NEG
51946: PUSH
51947: LD_INT 3
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 3
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 3
51999: NEG
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52034: LD_ADDR_VAR 0 34
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: LD_INT 2
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: NEG
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: LD_INT 3
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 3
52279: NEG
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52314: LD_ADDR_VAR 0 35
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: NEG
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52426: LD_ADDR_VAR 0 36
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 0
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52538: LD_ADDR_VAR 0 37
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52650: LD_ADDR_VAR 0 38
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 2
52741: NEG
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52762: LD_ADDR_VAR 0 39
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: LD_INT 2
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52874: LD_ADDR_VAR 0 40
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52986: LD_ADDR_VAR 0 41
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 1
53067: NEG
53068: PUSH
53069: LD_INT 2
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: LD_INT 1
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: LD_INT 2
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: LD_INT 3
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 3
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 3
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: LD_INT 2
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: LD_INT 3
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: LD_INT 3
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 2
53249: NEG
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 3
53260: NEG
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 3
53271: NEG
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 3
53283: NEG
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 3
53295: NEG
53296: PUSH
53297: LD_INT 3
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53336: LD_ADDR_VAR 0 42
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 0
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 2
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: LD_INT 2
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: NEG
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: NEG
53527: PUSH
53528: LD_INT 3
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 3
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 3
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 2
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 3
53582: PUSH
53583: LD_INT 3
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 2
53592: PUSH
53593: LD_INT 3
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 3
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 3
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 3
53633: NEG
53634: PUSH
53635: LD_INT 2
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 3
53645: NEG
53646: PUSH
53647: LD_INT 3
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53686: LD_ADDR_VAR 0 43
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 2
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: LD_INT 3
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 3
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 2
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 3
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 3
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: LD_INT 3
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 3
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 3
53982: NEG
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 3
53993: NEG
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54034: LD_ADDR_VAR 0 44
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 2
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: LD_INT 2
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: LD_INT 3
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 3
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 3
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 3
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 3
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: LD_INT 3
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 3
54308: NEG
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 3
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 3
54331: NEG
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 3
54343: NEG
54344: PUSH
54345: LD_INT 3
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54384: LD_ADDR_VAR 0 45
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 2
54550: NEG
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: NEG
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: LD_INT 3
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 3
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 3
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: LD_INT 3
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 3
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 3
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 3
54681: NEG
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 3
54693: NEG
54694: PUSH
54695: LD_INT 3
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54734: LD_ADDR_VAR 0 46
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: LD_INT 2
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 2
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 2
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: NEG
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: LD_INT 3
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 3
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 3
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 3
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: LD_INT 3
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 3
55030: NEG
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 3
55041: NEG
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55082: LD_ADDR_VAR 0 47
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: LD_INT 2
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: NEG
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55233: LD_ADDR_VAR 0 48
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 2
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 2
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55380: LD_ADDR_VAR 0 49
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55524: LD_ADDR_VAR 0 50
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55668: LD_ADDR_VAR 0 51
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55815: LD_ADDR_VAR 0 52
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 2
55919: NEG
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: NEG
55943: PUSH
55944: LD_INT 2
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55966: LD_ADDR_VAR 0 53
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 2
56153: NEG
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56196: LD_ADDR_VAR 0 54
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 0
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 2
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: LD_INT 2
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: LD_INT 2
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 2
56395: NEG
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56426: LD_ADDR_VAR 0 55
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: LD_INT 2
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56656: LD_ADDR_VAR 0 56
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 2
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 2
56832: NEG
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56886: LD_ADDR_VAR 0 57
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 2
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: LD_INT 2
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: LD_INT 2
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: NEG
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 2
57085: NEG
57086: PUSH
57087: LD_INT 2
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57116: LD_ADDR_VAR 0 58
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: LD_INT 1
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 2
57251: PUSH
57252: LD_INT 2
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: LD_INT 2
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 2
57303: NEG
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57346: LD_ADDR_VAR 0 59
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57434: LD_ADDR_VAR 0 60
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57522: LD_ADDR_VAR 0 61
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57610: LD_ADDR_VAR 0 62
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57698: LD_ADDR_VAR 0 63
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57786: LD_ADDR_VAR 0 64
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: ST_TO_ADDR
// end ; 1 :
57874: GO 63771
57876: LD_INT 1
57878: DOUBLE
57879: EQUAL
57880: IFTRUE 57884
57882: GO 60507
57884: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57885: LD_ADDR_VAR 0 11
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: LD_INT 3
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: LD_INT 2
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: LIST
57928: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57929: LD_ADDR_VAR 0 12
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 3
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 3
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: LIST
57969: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57970: LD_ADDR_VAR 0 13
57974: PUSH
57975: LD_INT 3
57977: PUSH
57978: LD_INT 2
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: LD_INT 3
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: LD_INT 3
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: LIST
58009: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58010: LD_ADDR_VAR 0 14
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: LD_INT 3
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: LD_INT 3
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: LIST
58050: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58051: LD_ADDR_VAR 0 15
58055: PUSH
58056: LD_INT 2
58058: NEG
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 3
58080: NEG
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: LIST
58094: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58095: LD_ADDR_VAR 0 16
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 3
58114: NEG
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 3
58126: NEG
58127: PUSH
58128: LD_INT 3
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: LIST
58140: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58141: LD_ADDR_VAR 0 17
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: LD_INT 3
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: LIST
58184: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58185: LD_ADDR_VAR 0 18
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 3
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: LIST
58225: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58226: LD_ADDR_VAR 0 19
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: LD_INT 3
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 2
58253: PUSH
58254: LD_INT 3
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58266: LD_ADDR_VAR 0 20
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 3
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: LD_INT 2
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: LIST
58306: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58307: LD_ADDR_VAR 0 21
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 3
58325: NEG
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 3
58336: NEG
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: LIST
58350: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58351: LD_ADDR_VAR 0 22
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 3
58370: NEG
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 3
58382: NEG
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: LIST
58396: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58397: LD_ADDR_VAR 0 23
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: LD_INT 3
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 4
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: LD_INT 3
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: LIST
58440: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58441: LD_ADDR_VAR 0 24
58445: PUSH
58446: LD_INT 3
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 3
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 4
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58482: LD_ADDR_VAR 0 25
58486: PUSH
58487: LD_INT 3
58489: PUSH
58490: LD_INT 3
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 4
58499: PUSH
58500: LD_INT 3
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 3
58509: PUSH
58510: LD_INT 4
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: LIST
58521: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58522: LD_ADDR_VAR 0 26
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: LD_INT 3
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: LD_INT 4
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 3
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: LIST
58562: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58563: LD_ADDR_VAR 0 27
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 3
58581: NEG
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 4
58592: NEG
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: LIST
58606: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58607: LD_ADDR_VAR 0 28
58611: PUSH
58612: LD_INT 3
58614: NEG
58615: PUSH
58616: LD_INT 3
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: NEG
58627: PUSH
58628: LD_INT 4
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 4
58638: NEG
58639: PUSH
58640: LD_INT 3
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: LIST
58652: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58653: LD_ADDR_VAR 0 29
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: LD_INT 3
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: LD_INT 2
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 4
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 4
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: LD_INT 3
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 5
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: LD_INT 5
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: LD_INT 4
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: LD_INT 6
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: LD_INT 6
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: LD_INT 5
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58808: LD_ADDR_VAR 0 30
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 3
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 3
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 3
58846: PUSH
58847: LD_INT 1
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 4
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 4
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 4
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 5
58888: PUSH
58889: LD_INT 0
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 5
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 5
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 6
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 6
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58951: LD_ADDR_VAR 0 31
58955: PUSH
58956: LD_INT 3
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 3
58968: PUSH
58969: LD_INT 3
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 2
58978: PUSH
58979: LD_INT 3
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 4
58988: PUSH
58989: LD_INT 3
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 4
58998: PUSH
58999: LD_INT 4
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 3
59008: PUSH
59009: LD_INT 4
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 5
59018: PUSH
59019: LD_INT 4
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 5
59028: PUSH
59029: LD_INT 5
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 4
59038: PUSH
59039: LD_INT 5
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 6
59048: PUSH
59049: LD_INT 5
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 6
59058: PUSH
59059: LD_INT 6
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 5
59068: PUSH
59069: LD_INT 6
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59090: LD_ADDR_VAR 0 32
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: LD_INT 3
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 3
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: LD_INT 4
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: LD_INT 4
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 5
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 5
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: LD_INT 4
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: LD_INT 6
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: LD_INT 6
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: LD_INT 5
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59233: LD_ADDR_VAR 0 33
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 3
59251: NEG
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 3
59274: NEG
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 4
59285: NEG
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 4
59296: NEG
59297: PUSH
59298: LD_INT 1
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 4
59308: NEG
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 5
59319: NEG
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 5
59330: NEG
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 5
59342: NEG
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 6
59353: NEG
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 6
59364: NEG
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59388: LD_ADDR_VAR 0 34
59392: PUSH
59393: LD_INT 2
59395: NEG
59396: PUSH
59397: LD_INT 3
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 3
59407: NEG
59408: PUSH
59409: LD_INT 2
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 3
59419: NEG
59420: PUSH
59421: LD_INT 3
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 3
59431: NEG
59432: PUSH
59433: LD_INT 4
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 4
59443: NEG
59444: PUSH
59445: LD_INT 3
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 4
59455: NEG
59456: PUSH
59457: LD_INT 4
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 4
59467: NEG
59468: PUSH
59469: LD_INT 5
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 5
59479: NEG
59480: PUSH
59481: LD_INT 4
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 5
59491: NEG
59492: PUSH
59493: LD_INT 5
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 5
59503: NEG
59504: PUSH
59505: LD_INT 6
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 6
59515: NEG
59516: PUSH
59517: LD_INT 5
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 6
59527: NEG
59528: PUSH
59529: LD_INT 6
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59551: LD_ADDR_VAR 0 41
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: LD_INT 3
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: LD_INT 2
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: LIST
59594: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59595: LD_ADDR_VAR 0 42
59599: PUSH
59600: LD_INT 2
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 2
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 3
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: LIST
59635: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59636: LD_ADDR_VAR 0 43
59640: PUSH
59641: LD_INT 2
59643: PUSH
59644: LD_INT 2
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 3
59653: PUSH
59654: LD_INT 2
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 2
59663: PUSH
59664: LD_INT 3
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: LIST
59675: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59676: LD_ADDR_VAR 0 44
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: LIST
59716: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59717: LD_ADDR_VAR 0 45
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 2
59735: NEG
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 3
59746: NEG
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: LIST
59760: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59761: LD_ADDR_VAR 0 46
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: LD_INT 2
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: LD_INT 3
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 3
59792: NEG
59793: PUSH
59794: LD_INT 2
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: LIST
59806: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59807: LD_ADDR_VAR 0 47
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: LD_INT 3
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 3
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59840: LD_ADDR_VAR 0 48
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: LD_INT 2
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: LD_INT 1
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59871: LD_ADDR_VAR 0 49
59875: PUSH
59876: LD_INT 3
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 3
59888: PUSH
59889: LD_INT 2
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59900: LD_ADDR_VAR 0 50
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: LD_INT 3
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 3
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59929: LD_ADDR_VAR 0 51
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59960: LD_ADDR_VAR 0 52
59964: PUSH
59965: LD_INT 3
59967: NEG
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 3
59979: NEG
59980: PUSH
59981: LD_INT 2
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59993: LD_ADDR_VAR 0 53
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: LD_INT 3
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: LD_INT 3
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: LD_INT 2
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: LIST
60036: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60037: LD_ADDR_VAR 0 54
60041: PUSH
60042: LD_INT 2
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 3
60055: PUSH
60056: LD_INT 0
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 3
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: LIST
60077: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60078: LD_ADDR_VAR 0 55
60082: PUSH
60083: LD_INT 3
60085: PUSH
60086: LD_INT 2
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 3
60095: PUSH
60096: LD_INT 3
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 2
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: LIST
60117: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60118: LD_ADDR_VAR 0 56
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: LD_INT 2
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: LIST
60158: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60159: LD_ADDR_VAR 0 57
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: LD_INT 1
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 3
60177: NEG
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 3
60188: NEG
60189: PUSH
60190: LD_INT 1
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: LIST
60202: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60203: LD_ADDR_VAR 0 58
60207: PUSH
60208: LD_INT 2
60210: NEG
60211: PUSH
60212: LD_INT 3
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 3
60222: NEG
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: NEG
60235: PUSH
60236: LD_INT 3
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: LIST
60248: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60249: LD_ADDR_VAR 0 59
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: LD_INT 2
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 2
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: LIST
60292: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60293: LD_ADDR_VAR 0 60
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: LIST
60333: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60334: LD_ADDR_VAR 0 61
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: LIST
60373: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60374: LD_ADDR_VAR 0 62
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: LD_INT 2
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: LIST
60414: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60415: LD_ADDR_VAR 0 63
60419: PUSH
60420: LD_INT 1
60422: NEG
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: LD_INT 1
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60459: LD_ADDR_VAR 0 64
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 2
60478: NEG
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 2
60490: NEG
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: LIST
60504: ST_TO_ADDR
// end ; 2 :
60505: GO 63771
60507: LD_INT 2
60509: DOUBLE
60510: EQUAL
60511: IFTRUE 60515
60513: GO 63770
60515: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60516: LD_ADDR_VAR 0 29
60520: PUSH
60521: LD_INT 4
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 4
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 5
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 5
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 4
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 3
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 3
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 3
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 5
60606: PUSH
60607: LD_INT 2
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 3
60616: PUSH
60617: LD_INT 3
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 3
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 4
60636: PUSH
60637: LD_INT 3
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 4
60646: PUSH
60647: LD_INT 4
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: LD_INT 4
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: LD_INT 3
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 2
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 4
60686: PUSH
60687: LD_INT 2
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: LD_INT 4
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 4
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: LD_INT 3
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: LD_INT 4
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: LD_INT 5
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: LD_INT 5
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: LD_INT 4
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: LD_INT 3
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: LD_INT 5
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: LD_INT 3
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 3
60799: NEG
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 3
60810: NEG
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: NEG
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 3
60844: NEG
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 4
60855: NEG
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 4
60866: NEG
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 4
60878: NEG
60879: PUSH
60880: LD_INT 2
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: NEG
60891: PUSH
60892: LD_INT 2
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 4
60901: NEG
60902: PUSH
60903: LD_INT 4
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 4
60913: NEG
60914: PUSH
60915: LD_INT 5
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 3
60925: NEG
60926: PUSH
60927: LD_INT 4
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 3
60937: NEG
60938: PUSH
60939: LD_INT 3
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 4
60949: NEG
60950: PUSH
60951: LD_INT 3
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 5
60961: NEG
60962: PUSH
60963: LD_INT 4
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 5
60973: NEG
60974: PUSH
60975: LD_INT 5
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 3
60985: NEG
60986: PUSH
60987: LD_INT 5
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 5
60997: NEG
60998: PUSH
60999: LD_INT 3
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61054: LD_ADDR_VAR 0 30
61058: PUSH
61059: LD_INT 4
61061: PUSH
61062: LD_INT 4
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 4
61071: PUSH
61072: LD_INT 3
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 5
61081: PUSH
61082: LD_INT 4
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 5
61091: PUSH
61092: LD_INT 5
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 4
61101: PUSH
61102: LD_INT 5
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 3
61111: PUSH
61112: LD_INT 4
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 3
61121: PUSH
61122: LD_INT 3
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 5
61131: PUSH
61132: LD_INT 3
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 3
61141: PUSH
61142: LD_INT 5
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: LD_INT 3
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: LD_INT 2
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: LD_INT 3
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: LD_INT 4
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 4
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: LD_INT 3
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 2
61223: PUSH
61224: LD_INT 4
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 2
61233: NEG
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 4
61244: NEG
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 4
61255: NEG
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 3
61267: NEG
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 3
61278: NEG
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 4
61289: NEG
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 5
61300: NEG
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 5
61311: NEG
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 5
61323: NEG
61324: PUSH
61325: LD_INT 2
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 3
61335: NEG
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: LD_INT 3
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 3
61358: NEG
61359: PUSH
61360: LD_INT 4
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: LD_INT 3
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: LD_INT 2
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: LD_INT 2
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 4
61406: NEG
61407: PUSH
61408: LD_INT 3
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 4
61418: NEG
61419: PUSH
61420: LD_INT 4
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 2
61430: NEG
61431: PUSH
61432: LD_INT 4
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 4
61442: NEG
61443: PUSH
61444: LD_INT 2
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: LD_INT 4
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 5
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: LD_INT 4
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: LD_INT 3
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: LD_INT 3
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: LD_INT 4
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: LD_INT 5
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 2
61533: PUSH
61534: LD_INT 3
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: LD_INT 5
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61601: LD_ADDR_VAR 0 31
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 4
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: PUSH
61629: LD_INT 4
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: LD_INT 5
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: LD_INT 5
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: LD_INT 4
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: NEG
61670: PUSH
61671: LD_INT 3
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: LD_INT 5
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 2
61690: NEG
61691: PUSH
61692: LD_INT 3
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 3
61701: NEG
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 3
61712: NEG
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 2
61724: NEG
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 2
61735: NEG
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 3
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 4
61757: NEG
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 4
61768: NEG
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 4
61780: NEG
61781: PUSH
61782: LD_INT 2
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 2
61792: NEG
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 4
61803: NEG
61804: PUSH
61805: LD_INT 4
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 4
61815: NEG
61816: PUSH
61817: LD_INT 5
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 3
61827: NEG
61828: PUSH
61829: LD_INT 4
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 3
61839: NEG
61840: PUSH
61841: LD_INT 3
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 4
61851: NEG
61852: PUSH
61853: LD_INT 3
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 5
61863: NEG
61864: PUSH
61865: LD_INT 4
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 5
61875: NEG
61876: PUSH
61877: LD_INT 5
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 3
61887: NEG
61888: PUSH
61889: LD_INT 5
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 5
61899: NEG
61900: PUSH
61901: LD_INT 3
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: LD_INT 3
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: LD_INT 4
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: PUSH
61934: LD_INT 3
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 2
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: NEG
61967: PUSH
61968: LD_INT 3
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: LD_INT 4
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 2
61990: PUSH
61991: LD_INT 2
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: NEG
62002: PUSH
62003: LD_INT 4
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 4
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 4
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 5
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 5
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 4
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 3
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 3
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 3
62085: PUSH
62086: LD_INT 2
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 5
62096: PUSH
62097: LD_INT 2
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62151: LD_ADDR_VAR 0 32
62155: PUSH
62156: LD_INT 4
62158: NEG
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 4
62169: NEG
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 3
62181: NEG
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 3
62192: NEG
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 4
62203: NEG
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 5
62214: NEG
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 5
62225: NEG
62226: PUSH
62227: LD_INT 1
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 5
62237: NEG
62238: PUSH
62239: LD_INT 2
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 3
62249: NEG
62250: PUSH
62251: LD_INT 2
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 3
62260: NEG
62261: PUSH
62262: LD_INT 3
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 3
62272: NEG
62273: PUSH
62274: LD_INT 4
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 2
62284: NEG
62285: PUSH
62286: LD_INT 3
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: LD_INT 2
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 3
62308: NEG
62309: PUSH
62310: LD_INT 2
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 4
62320: NEG
62321: PUSH
62322: LD_INT 3
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 4
62332: NEG
62333: PUSH
62334: LD_INT 4
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 2
62344: NEG
62345: PUSH
62346: LD_INT 4
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 4
62356: NEG
62357: PUSH
62358: LD_INT 2
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: LD_INT 4
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: LD_INT 5
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: LD_INT 4
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: LD_INT 3
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: LD_INT 3
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 1
62423: NEG
62424: PUSH
62425: LD_INT 4
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: LD_INT 5
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 2
62447: PUSH
62448: LD_INT 3
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: LD_INT 5
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: PUSH
62471: LD_INT 0
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 3
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 4
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 4
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: LD_INT 1
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 2
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 2
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 2
62542: PUSH
62543: LD_INT 2
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 4
62553: PUSH
62554: LD_INT 2
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 4
62563: PUSH
62564: LD_INT 4
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 4
62573: PUSH
62574: LD_INT 3
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 5
62583: PUSH
62584: LD_INT 4
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 5
62593: PUSH
62594: LD_INT 5
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 4
62603: PUSH
62604: LD_INT 5
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 3
62613: PUSH
62614: LD_INT 4
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 3
62623: PUSH
62624: LD_INT 3
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 5
62633: PUSH
62634: LD_INT 3
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 3
62643: PUSH
62644: LD_INT 5
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62698: LD_ADDR_VAR 0 33
62702: PUSH
62703: LD_INT 4
62705: NEG
62706: PUSH
62707: LD_INT 4
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 4
62717: NEG
62718: PUSH
62719: LD_INT 5
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: LD_INT 4
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 3
62741: NEG
62742: PUSH
62743: LD_INT 3
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 4
62753: NEG
62754: PUSH
62755: LD_INT 3
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 5
62765: NEG
62766: PUSH
62767: LD_INT 4
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 5
62777: NEG
62778: PUSH
62779: LD_INT 5
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 3
62789: NEG
62790: PUSH
62791: LD_INT 5
62793: NEG
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 5
62801: NEG
62802: PUSH
62803: LD_INT 3
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: LD_INT 3
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: LD_INT 4
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: LD_INT 3
62838: NEG
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: LD_INT 2
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 2
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 1
62868: NEG
62869: PUSH
62870: LD_INT 3
62872: NEG
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: LD_INT 4
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 2
62892: PUSH
62893: LD_INT 2
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 2
62903: NEG
62904: PUSH
62905: LD_INT 4
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 4
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 4
62925: PUSH
62926: LD_INT 1
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 5
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 5
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 4
62956: PUSH
62957: LD_INT 1
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 3
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 3
62976: PUSH
62977: LD_INT 1
62979: NEG
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 3
62987: PUSH
62988: LD_INT 2
62990: NEG
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 5
62998: PUSH
62999: LD_INT 2
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 3
63008: PUSH
63009: LD_INT 3
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 3
63018: PUSH
63019: LD_INT 2
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 4
63028: PUSH
63029: LD_INT 3
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 4
63038: PUSH
63039: LD_INT 4
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 3
63048: PUSH
63049: LD_INT 4
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 2
63058: PUSH
63059: LD_INT 3
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 2
63068: PUSH
63069: LD_INT 2
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 4
63078: PUSH
63079: LD_INT 2
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 2
63088: PUSH
63089: LD_INT 4
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: LD_INT 4
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: LD_INT 4
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: LD_INT 5
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: LD_INT 5
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: LD_INT 4
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 1
63159: NEG
63160: PUSH
63161: LD_INT 3
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 2
63170: PUSH
63171: LD_INT 5
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: LD_INT 3
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63236: LD_ADDR_VAR 0 34
63240: PUSH
63241: LD_INT 0
63243: PUSH
63244: LD_INT 4
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: LD_INT 5
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: PUSH
63266: LD_INT 4
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 1
63276: PUSH
63277: LD_INT 3
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 0
63287: PUSH
63288: LD_INT 3
63290: NEG
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 1
63298: NEG
63299: PUSH
63300: LD_INT 4
63302: NEG
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: LD_INT 5
63314: NEG
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 2
63322: PUSH
63323: LD_INT 3
63325: NEG
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 2
63333: NEG
63334: PUSH
63335: LD_INT 5
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 3
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 3
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 4
63366: PUSH
63367: LD_INT 0
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 4
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 3
63386: PUSH
63387: LD_INT 1
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 2
63396: PUSH
63397: LD_INT 0
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 2
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 2
63417: PUSH
63418: LD_INT 2
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 4
63428: PUSH
63429: LD_INT 2
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 4
63438: PUSH
63439: LD_INT 4
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 4
63448: PUSH
63449: LD_INT 3
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 5
63458: PUSH
63459: LD_INT 4
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 5
63468: PUSH
63469: LD_INT 5
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 4
63478: PUSH
63479: LD_INT 5
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 3
63488: PUSH
63489: LD_INT 4
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 3
63498: PUSH
63499: LD_INT 3
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 5
63508: PUSH
63509: LD_INT 3
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 3
63518: PUSH
63519: LD_INT 5
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: LD_INT 2
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: LD_INT 3
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: LD_INT 4
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: LD_INT 4
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: LD_INT 3
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 2
63600: PUSH
63601: LD_INT 4
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 2
63610: NEG
63611: PUSH
63612: LD_INT 2
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 4
63621: NEG
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 4
63632: NEG
63633: PUSH
63634: LD_INT 1
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 3
63644: NEG
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 3
63655: NEG
63656: PUSH
63657: LD_INT 1
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 4
63666: NEG
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 5
63677: NEG
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 5
63688: NEG
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 5
63700: NEG
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 3
63712: NEG
63713: PUSH
63714: LD_INT 2
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: ST_TO_ADDR
// end ; end ;
63768: GO 63771
63770: POP
// case btype of b_depot , b_warehouse :
63771: LD_VAR 0 1
63775: PUSH
63776: LD_INT 0
63778: DOUBLE
63779: EQUAL
63780: IFTRUE 63790
63782: LD_INT 1
63784: DOUBLE
63785: EQUAL
63786: IFTRUE 63790
63788: GO 63991
63790: POP
// case nation of nation_american :
63791: LD_VAR 0 5
63795: PUSH
63796: LD_INT 1
63798: DOUBLE
63799: EQUAL
63800: IFTRUE 63804
63802: GO 63860
63804: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63805: LD_ADDR_VAR 0 9
63809: PUSH
63810: LD_VAR 0 11
63814: PUSH
63815: LD_VAR 0 12
63819: PUSH
63820: LD_VAR 0 13
63824: PUSH
63825: LD_VAR 0 14
63829: PUSH
63830: LD_VAR 0 15
63834: PUSH
63835: LD_VAR 0 16
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: PUSH
63848: LD_VAR 0 4
63852: PUSH
63853: LD_INT 1
63855: PLUS
63856: ARRAY
63857: ST_TO_ADDR
63858: GO 63989
63860: LD_INT 2
63862: DOUBLE
63863: EQUAL
63864: IFTRUE 63868
63866: GO 63924
63868: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63869: LD_ADDR_VAR 0 9
63873: PUSH
63874: LD_VAR 0 17
63878: PUSH
63879: LD_VAR 0 18
63883: PUSH
63884: LD_VAR 0 19
63888: PUSH
63889: LD_VAR 0 20
63893: PUSH
63894: LD_VAR 0 21
63898: PUSH
63899: LD_VAR 0 22
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: PUSH
63912: LD_VAR 0 4
63916: PUSH
63917: LD_INT 1
63919: PLUS
63920: ARRAY
63921: ST_TO_ADDR
63922: GO 63989
63924: LD_INT 3
63926: DOUBLE
63927: EQUAL
63928: IFTRUE 63932
63930: GO 63988
63932: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63933: LD_ADDR_VAR 0 9
63937: PUSH
63938: LD_VAR 0 23
63942: PUSH
63943: LD_VAR 0 24
63947: PUSH
63948: LD_VAR 0 25
63952: PUSH
63953: LD_VAR 0 26
63957: PUSH
63958: LD_VAR 0 27
63962: PUSH
63963: LD_VAR 0 28
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: PUSH
63976: LD_VAR 0 4
63980: PUSH
63981: LD_INT 1
63983: PLUS
63984: ARRAY
63985: ST_TO_ADDR
63986: GO 63989
63988: POP
63989: GO 64544
63991: LD_INT 2
63993: DOUBLE
63994: EQUAL
63995: IFTRUE 64005
63997: LD_INT 3
63999: DOUBLE
64000: EQUAL
64001: IFTRUE 64005
64003: GO 64061
64005: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64006: LD_ADDR_VAR 0 9
64010: PUSH
64011: LD_VAR 0 29
64015: PUSH
64016: LD_VAR 0 30
64020: PUSH
64021: LD_VAR 0 31
64025: PUSH
64026: LD_VAR 0 32
64030: PUSH
64031: LD_VAR 0 33
64035: PUSH
64036: LD_VAR 0 34
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: PUSH
64049: LD_VAR 0 4
64053: PUSH
64054: LD_INT 1
64056: PLUS
64057: ARRAY
64058: ST_TO_ADDR
64059: GO 64544
64061: LD_INT 16
64063: DOUBLE
64064: EQUAL
64065: IFTRUE 64123
64067: LD_INT 17
64069: DOUBLE
64070: EQUAL
64071: IFTRUE 64123
64073: LD_INT 18
64075: DOUBLE
64076: EQUAL
64077: IFTRUE 64123
64079: LD_INT 19
64081: DOUBLE
64082: EQUAL
64083: IFTRUE 64123
64085: LD_INT 22
64087: DOUBLE
64088: EQUAL
64089: IFTRUE 64123
64091: LD_INT 20
64093: DOUBLE
64094: EQUAL
64095: IFTRUE 64123
64097: LD_INT 21
64099: DOUBLE
64100: EQUAL
64101: IFTRUE 64123
64103: LD_INT 23
64105: DOUBLE
64106: EQUAL
64107: IFTRUE 64123
64109: LD_INT 24
64111: DOUBLE
64112: EQUAL
64113: IFTRUE 64123
64115: LD_INT 25
64117: DOUBLE
64118: EQUAL
64119: IFTRUE 64123
64121: GO 64179
64123: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64124: LD_ADDR_VAR 0 9
64128: PUSH
64129: LD_VAR 0 35
64133: PUSH
64134: LD_VAR 0 36
64138: PUSH
64139: LD_VAR 0 37
64143: PUSH
64144: LD_VAR 0 38
64148: PUSH
64149: LD_VAR 0 39
64153: PUSH
64154: LD_VAR 0 40
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: PUSH
64167: LD_VAR 0 4
64171: PUSH
64172: LD_INT 1
64174: PLUS
64175: ARRAY
64176: ST_TO_ADDR
64177: GO 64544
64179: LD_INT 6
64181: DOUBLE
64182: EQUAL
64183: IFTRUE 64235
64185: LD_INT 7
64187: DOUBLE
64188: EQUAL
64189: IFTRUE 64235
64191: LD_INT 8
64193: DOUBLE
64194: EQUAL
64195: IFTRUE 64235
64197: LD_INT 13
64199: DOUBLE
64200: EQUAL
64201: IFTRUE 64235
64203: LD_INT 12
64205: DOUBLE
64206: EQUAL
64207: IFTRUE 64235
64209: LD_INT 15
64211: DOUBLE
64212: EQUAL
64213: IFTRUE 64235
64215: LD_INT 11
64217: DOUBLE
64218: EQUAL
64219: IFTRUE 64235
64221: LD_INT 14
64223: DOUBLE
64224: EQUAL
64225: IFTRUE 64235
64227: LD_INT 10
64229: DOUBLE
64230: EQUAL
64231: IFTRUE 64235
64233: GO 64291
64235: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64236: LD_ADDR_VAR 0 9
64240: PUSH
64241: LD_VAR 0 41
64245: PUSH
64246: LD_VAR 0 42
64250: PUSH
64251: LD_VAR 0 43
64255: PUSH
64256: LD_VAR 0 44
64260: PUSH
64261: LD_VAR 0 45
64265: PUSH
64266: LD_VAR 0 46
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: PUSH
64279: LD_VAR 0 4
64283: PUSH
64284: LD_INT 1
64286: PLUS
64287: ARRAY
64288: ST_TO_ADDR
64289: GO 64544
64291: LD_INT 36
64293: DOUBLE
64294: EQUAL
64295: IFTRUE 64299
64297: GO 64355
64299: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64300: LD_ADDR_VAR 0 9
64304: PUSH
64305: LD_VAR 0 47
64309: PUSH
64310: LD_VAR 0 48
64314: PUSH
64315: LD_VAR 0 49
64319: PUSH
64320: LD_VAR 0 50
64324: PUSH
64325: LD_VAR 0 51
64329: PUSH
64330: LD_VAR 0 52
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: PUSH
64343: LD_VAR 0 4
64347: PUSH
64348: LD_INT 1
64350: PLUS
64351: ARRAY
64352: ST_TO_ADDR
64353: GO 64544
64355: LD_INT 4
64357: DOUBLE
64358: EQUAL
64359: IFTRUE 64381
64361: LD_INT 5
64363: DOUBLE
64364: EQUAL
64365: IFTRUE 64381
64367: LD_INT 34
64369: DOUBLE
64370: EQUAL
64371: IFTRUE 64381
64373: LD_INT 37
64375: DOUBLE
64376: EQUAL
64377: IFTRUE 64381
64379: GO 64437
64381: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64382: LD_ADDR_VAR 0 9
64386: PUSH
64387: LD_VAR 0 53
64391: PUSH
64392: LD_VAR 0 54
64396: PUSH
64397: LD_VAR 0 55
64401: PUSH
64402: LD_VAR 0 56
64406: PUSH
64407: LD_VAR 0 57
64411: PUSH
64412: LD_VAR 0 58
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: PUSH
64425: LD_VAR 0 4
64429: PUSH
64430: LD_INT 1
64432: PLUS
64433: ARRAY
64434: ST_TO_ADDR
64435: GO 64544
64437: LD_INT 31
64439: DOUBLE
64440: EQUAL
64441: IFTRUE 64487
64443: LD_INT 32
64445: DOUBLE
64446: EQUAL
64447: IFTRUE 64487
64449: LD_INT 33
64451: DOUBLE
64452: EQUAL
64453: IFTRUE 64487
64455: LD_INT 27
64457: DOUBLE
64458: EQUAL
64459: IFTRUE 64487
64461: LD_INT 26
64463: DOUBLE
64464: EQUAL
64465: IFTRUE 64487
64467: LD_INT 28
64469: DOUBLE
64470: EQUAL
64471: IFTRUE 64487
64473: LD_INT 29
64475: DOUBLE
64476: EQUAL
64477: IFTRUE 64487
64479: LD_INT 30
64481: DOUBLE
64482: EQUAL
64483: IFTRUE 64487
64485: GO 64543
64487: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64488: LD_ADDR_VAR 0 9
64492: PUSH
64493: LD_VAR 0 59
64497: PUSH
64498: LD_VAR 0 60
64502: PUSH
64503: LD_VAR 0 61
64507: PUSH
64508: LD_VAR 0 62
64512: PUSH
64513: LD_VAR 0 63
64517: PUSH
64518: LD_VAR 0 64
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: PUSH
64531: LD_VAR 0 4
64535: PUSH
64536: LD_INT 1
64538: PLUS
64539: ARRAY
64540: ST_TO_ADDR
64541: GO 64544
64543: POP
// temp_list2 = [ ] ;
64544: LD_ADDR_VAR 0 10
64548: PUSH
64549: EMPTY
64550: ST_TO_ADDR
// for i in temp_list do
64551: LD_ADDR_VAR 0 8
64555: PUSH
64556: LD_VAR 0 9
64560: PUSH
64561: FOR_IN
64562: IFFALSE 64614
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64564: LD_ADDR_VAR 0 10
64568: PUSH
64569: LD_VAR 0 10
64573: PUSH
64574: LD_VAR 0 8
64578: PUSH
64579: LD_INT 1
64581: ARRAY
64582: PUSH
64583: LD_VAR 0 2
64587: PLUS
64588: PUSH
64589: LD_VAR 0 8
64593: PUSH
64594: LD_INT 2
64596: ARRAY
64597: PUSH
64598: LD_VAR 0 3
64602: PLUS
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: EMPTY
64609: LIST
64610: ADD
64611: ST_TO_ADDR
64612: GO 64561
64614: POP
64615: POP
// result = temp_list2 ;
64616: LD_ADDR_VAR 0 7
64620: PUSH
64621: LD_VAR 0 10
64625: ST_TO_ADDR
// end ;
64626: LD_VAR 0 7
64630: RET
// export function EnemyInRange ( unit , dist ) ; begin
64631: LD_INT 0
64633: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64634: LD_ADDR_VAR 0 3
64638: PUSH
64639: LD_VAR 0 1
64643: PPUSH
64644: CALL_OW 255
64648: PPUSH
64649: LD_VAR 0 1
64653: PPUSH
64654: CALL_OW 250
64658: PPUSH
64659: LD_VAR 0 1
64663: PPUSH
64664: CALL_OW 251
64668: PPUSH
64669: LD_VAR 0 2
64673: PPUSH
64674: CALL 38004 0 4
64678: PUSH
64679: LD_INT 4
64681: ARRAY
64682: ST_TO_ADDR
// end ;
64683: LD_VAR 0 3
64687: RET
// export function PlayerSeeMe ( unit ) ; begin
64688: LD_INT 0
64690: PPUSH
// result := See ( your_side , unit ) ;
64691: LD_ADDR_VAR 0 2
64695: PUSH
64696: LD_OWVAR 2
64700: PPUSH
64701: LD_VAR 0 1
64705: PPUSH
64706: CALL_OW 292
64710: ST_TO_ADDR
// end ;
64711: LD_VAR 0 2
64715: RET
// export function ReverseDir ( unit ) ; begin
64716: LD_INT 0
64718: PPUSH
// if not unit then
64719: LD_VAR 0 1
64723: NOT
64724: IFFALSE 64728
// exit ;
64726: GO 64751
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64728: LD_ADDR_VAR 0 2
64732: PUSH
64733: LD_VAR 0 1
64737: PPUSH
64738: CALL_OW 254
64742: PUSH
64743: LD_INT 3
64745: PLUS
64746: PUSH
64747: LD_INT 6
64749: MOD
64750: ST_TO_ADDR
// end ;
64751: LD_VAR 0 2
64755: RET
// export function ReverseArray ( array ) ; var i ; begin
64756: LD_INT 0
64758: PPUSH
64759: PPUSH
// if not array then
64760: LD_VAR 0 1
64764: NOT
64765: IFFALSE 64769
// exit ;
64767: GO 64824
// result := [ ] ;
64769: LD_ADDR_VAR 0 2
64773: PUSH
64774: EMPTY
64775: ST_TO_ADDR
// for i := array downto 1 do
64776: LD_ADDR_VAR 0 3
64780: PUSH
64781: DOUBLE
64782: LD_VAR 0 1
64786: INC
64787: ST_TO_ADDR
64788: LD_INT 1
64790: PUSH
64791: FOR_DOWNTO
64792: IFFALSE 64822
// result := Join ( result , array [ i ] ) ;
64794: LD_ADDR_VAR 0 2
64798: PUSH
64799: LD_VAR 0 2
64803: PPUSH
64804: LD_VAR 0 1
64808: PUSH
64809: LD_VAR 0 3
64813: ARRAY
64814: PPUSH
64815: CALL 69469 0 2
64819: ST_TO_ADDR
64820: GO 64791
64822: POP
64823: POP
// end ;
64824: LD_VAR 0 2
64828: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64829: LD_INT 0
64831: PPUSH
64832: PPUSH
64833: PPUSH
64834: PPUSH
64835: PPUSH
64836: PPUSH
// if not unit or not hexes then
64837: LD_VAR 0 1
64841: NOT
64842: PUSH
64843: LD_VAR 0 2
64847: NOT
64848: OR
64849: IFFALSE 64853
// exit ;
64851: GO 64976
// dist := 9999 ;
64853: LD_ADDR_VAR 0 5
64857: PUSH
64858: LD_INT 9999
64860: ST_TO_ADDR
// for i = 1 to hexes do
64861: LD_ADDR_VAR 0 4
64865: PUSH
64866: DOUBLE
64867: LD_INT 1
64869: DEC
64870: ST_TO_ADDR
64871: LD_VAR 0 2
64875: PUSH
64876: FOR_TO
64877: IFFALSE 64964
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64879: LD_ADDR_VAR 0 6
64883: PUSH
64884: LD_VAR 0 1
64888: PPUSH
64889: LD_VAR 0 2
64893: PUSH
64894: LD_VAR 0 4
64898: ARRAY
64899: PUSH
64900: LD_INT 1
64902: ARRAY
64903: PPUSH
64904: LD_VAR 0 2
64908: PUSH
64909: LD_VAR 0 4
64913: ARRAY
64914: PUSH
64915: LD_INT 2
64917: ARRAY
64918: PPUSH
64919: CALL_OW 297
64923: ST_TO_ADDR
// if tdist < dist then
64924: LD_VAR 0 6
64928: PUSH
64929: LD_VAR 0 5
64933: LESS
64934: IFFALSE 64962
// begin hex := hexes [ i ] ;
64936: LD_ADDR_VAR 0 8
64940: PUSH
64941: LD_VAR 0 2
64945: PUSH
64946: LD_VAR 0 4
64950: ARRAY
64951: ST_TO_ADDR
// dist := tdist ;
64952: LD_ADDR_VAR 0 5
64956: PUSH
64957: LD_VAR 0 6
64961: ST_TO_ADDR
// end ; end ;
64962: GO 64876
64964: POP
64965: POP
// result := hex ;
64966: LD_ADDR_VAR 0 3
64970: PUSH
64971: LD_VAR 0 8
64975: ST_TO_ADDR
// end ;
64976: LD_VAR 0 3
64980: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64981: LD_INT 0
64983: PPUSH
64984: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64985: LD_VAR 0 1
64989: NOT
64990: PUSH
64991: LD_VAR 0 1
64995: PUSH
64996: LD_INT 21
64998: PUSH
64999: LD_INT 2
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 23
65008: PUSH
65009: LD_INT 2
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PPUSH
65020: CALL_OW 69
65024: IN
65025: NOT
65026: OR
65027: IFFALSE 65031
// exit ;
65029: GO 65078
// for i = 1 to 3 do
65031: LD_ADDR_VAR 0 3
65035: PUSH
65036: DOUBLE
65037: LD_INT 1
65039: DEC
65040: ST_TO_ADDR
65041: LD_INT 3
65043: PUSH
65044: FOR_TO
65045: IFFALSE 65076
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65047: LD_VAR 0 1
65051: PPUSH
65052: CALL_OW 250
65056: PPUSH
65057: LD_VAR 0 1
65061: PPUSH
65062: CALL_OW 251
65066: PPUSH
65067: LD_INT 1
65069: PPUSH
65070: CALL_OW 453
65074: GO 65044
65076: POP
65077: POP
// end ;
65078: LD_VAR 0 2
65082: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65083: LD_INT 0
65085: PPUSH
65086: PPUSH
65087: PPUSH
65088: PPUSH
65089: PPUSH
65090: PPUSH
// if not unit or not enemy_unit then
65091: LD_VAR 0 1
65095: NOT
65096: PUSH
65097: LD_VAR 0 2
65101: NOT
65102: OR
65103: IFFALSE 65107
// exit ;
65105: GO 65574
// if GetLives ( i ) < 250 then
65107: LD_VAR 0 4
65111: PPUSH
65112: CALL_OW 256
65116: PUSH
65117: LD_INT 250
65119: LESS
65120: IFFALSE 65133
// begin ComAutodestruct ( i ) ;
65122: LD_VAR 0 4
65126: PPUSH
65127: CALL 64981 0 1
// exit ;
65131: GO 65574
// end ; x := GetX ( enemy_unit ) ;
65133: LD_ADDR_VAR 0 7
65137: PUSH
65138: LD_VAR 0 2
65142: PPUSH
65143: CALL_OW 250
65147: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65148: LD_ADDR_VAR 0 8
65152: PUSH
65153: LD_VAR 0 2
65157: PPUSH
65158: CALL_OW 251
65162: ST_TO_ADDR
// if not x or not y then
65163: LD_VAR 0 7
65167: NOT
65168: PUSH
65169: LD_VAR 0 8
65173: NOT
65174: OR
65175: IFFALSE 65179
// exit ;
65177: GO 65574
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65179: LD_ADDR_VAR 0 6
65183: PUSH
65184: LD_VAR 0 7
65188: PPUSH
65189: LD_INT 0
65191: PPUSH
65192: LD_INT 4
65194: PPUSH
65195: CALL_OW 272
65199: PUSH
65200: LD_VAR 0 8
65204: PPUSH
65205: LD_INT 0
65207: PPUSH
65208: LD_INT 4
65210: PPUSH
65211: CALL_OW 273
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_VAR 0 7
65224: PPUSH
65225: LD_INT 1
65227: PPUSH
65228: LD_INT 4
65230: PPUSH
65231: CALL_OW 272
65235: PUSH
65236: LD_VAR 0 8
65240: PPUSH
65241: LD_INT 1
65243: PPUSH
65244: LD_INT 4
65246: PPUSH
65247: CALL_OW 273
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_VAR 0 7
65260: PPUSH
65261: LD_INT 2
65263: PPUSH
65264: LD_INT 4
65266: PPUSH
65267: CALL_OW 272
65271: PUSH
65272: LD_VAR 0 8
65276: PPUSH
65277: LD_INT 2
65279: PPUSH
65280: LD_INT 4
65282: PPUSH
65283: CALL_OW 273
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_VAR 0 7
65296: PPUSH
65297: LD_INT 3
65299: PPUSH
65300: LD_INT 4
65302: PPUSH
65303: CALL_OW 272
65307: PUSH
65308: LD_VAR 0 8
65312: PPUSH
65313: LD_INT 3
65315: PPUSH
65316: LD_INT 4
65318: PPUSH
65319: CALL_OW 273
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_VAR 0 7
65332: PPUSH
65333: LD_INT 4
65335: PPUSH
65336: LD_INT 4
65338: PPUSH
65339: CALL_OW 272
65343: PUSH
65344: LD_VAR 0 8
65348: PPUSH
65349: LD_INT 4
65351: PPUSH
65352: LD_INT 4
65354: PPUSH
65355: CALL_OW 273
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_VAR 0 7
65368: PPUSH
65369: LD_INT 5
65371: PPUSH
65372: LD_INT 4
65374: PPUSH
65375: CALL_OW 272
65379: PUSH
65380: LD_VAR 0 8
65384: PPUSH
65385: LD_INT 5
65387: PPUSH
65388: LD_INT 4
65390: PPUSH
65391: CALL_OW 273
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: ST_TO_ADDR
// for i = tmp downto 1 do
65408: LD_ADDR_VAR 0 4
65412: PUSH
65413: DOUBLE
65414: LD_VAR 0 6
65418: INC
65419: ST_TO_ADDR
65420: LD_INT 1
65422: PUSH
65423: FOR_DOWNTO
65424: IFFALSE 65525
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65426: LD_VAR 0 6
65430: PUSH
65431: LD_VAR 0 4
65435: ARRAY
65436: PUSH
65437: LD_INT 1
65439: ARRAY
65440: PPUSH
65441: LD_VAR 0 6
65445: PUSH
65446: LD_VAR 0 4
65450: ARRAY
65451: PUSH
65452: LD_INT 2
65454: ARRAY
65455: PPUSH
65456: CALL_OW 488
65460: NOT
65461: PUSH
65462: LD_VAR 0 6
65466: PUSH
65467: LD_VAR 0 4
65471: ARRAY
65472: PUSH
65473: LD_INT 1
65475: ARRAY
65476: PPUSH
65477: LD_VAR 0 6
65481: PUSH
65482: LD_VAR 0 4
65486: ARRAY
65487: PUSH
65488: LD_INT 2
65490: ARRAY
65491: PPUSH
65492: CALL_OW 428
65496: PUSH
65497: LD_INT 0
65499: NONEQUAL
65500: OR
65501: IFFALSE 65523
// tmp := Delete ( tmp , i ) ;
65503: LD_ADDR_VAR 0 6
65507: PUSH
65508: LD_VAR 0 6
65512: PPUSH
65513: LD_VAR 0 4
65517: PPUSH
65518: CALL_OW 3
65522: ST_TO_ADDR
65523: GO 65423
65525: POP
65526: POP
// j := GetClosestHex ( unit , tmp ) ;
65527: LD_ADDR_VAR 0 5
65531: PUSH
65532: LD_VAR 0 1
65536: PPUSH
65537: LD_VAR 0 6
65541: PPUSH
65542: CALL 64829 0 2
65546: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65547: LD_VAR 0 1
65551: PPUSH
65552: LD_VAR 0 5
65556: PUSH
65557: LD_INT 1
65559: ARRAY
65560: PPUSH
65561: LD_VAR 0 5
65565: PUSH
65566: LD_INT 2
65568: ARRAY
65569: PPUSH
65570: CALL_OW 111
// end ;
65574: LD_VAR 0 3
65578: RET
// export function PrepareApemanSoldier ( ) ; begin
65579: LD_INT 0
65581: PPUSH
// uc_nation := 0 ;
65582: LD_ADDR_OWVAR 21
65586: PUSH
65587: LD_INT 0
65589: ST_TO_ADDR
// hc_sex := sex_male ;
65590: LD_ADDR_OWVAR 27
65594: PUSH
65595: LD_INT 1
65597: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65598: LD_ADDR_OWVAR 28
65602: PUSH
65603: LD_INT 15
65605: ST_TO_ADDR
// hc_gallery :=  ;
65606: LD_ADDR_OWVAR 33
65610: PUSH
65611: LD_STRING 
65613: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65614: LD_ADDR_OWVAR 31
65618: PUSH
65619: LD_INT 0
65621: PPUSH
65622: LD_INT 3
65624: PPUSH
65625: CALL_OW 12
65629: PUSH
65630: LD_INT 0
65632: PPUSH
65633: LD_INT 3
65635: PPUSH
65636: CALL_OW 12
65640: PUSH
65641: LD_INT 0
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: ST_TO_ADDR
// end ;
65653: LD_VAR 0 1
65657: RET
// export function PrepareApemanEngineer ( ) ; begin
65658: LD_INT 0
65660: PPUSH
// uc_nation := 0 ;
65661: LD_ADDR_OWVAR 21
65665: PUSH
65666: LD_INT 0
65668: ST_TO_ADDR
// hc_sex := sex_male ;
65669: LD_ADDR_OWVAR 27
65673: PUSH
65674: LD_INT 1
65676: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65677: LD_ADDR_OWVAR 28
65681: PUSH
65682: LD_INT 16
65684: ST_TO_ADDR
// hc_gallery :=  ;
65685: LD_ADDR_OWVAR 33
65689: PUSH
65690: LD_STRING 
65692: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65693: LD_ADDR_OWVAR 31
65697: PUSH
65698: LD_INT 0
65700: PPUSH
65701: LD_INT 3
65703: PPUSH
65704: CALL_OW 12
65708: PUSH
65709: LD_INT 0
65711: PPUSH
65712: LD_INT 3
65714: PPUSH
65715: CALL_OW 12
65719: PUSH
65720: LD_INT 0
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: ST_TO_ADDR
// end ;
65732: LD_VAR 0 1
65736: RET
// export function PrepareApeman ( agressivity ) ; begin
65737: LD_INT 0
65739: PPUSH
// uc_side := 0 ;
65740: LD_ADDR_OWVAR 20
65744: PUSH
65745: LD_INT 0
65747: ST_TO_ADDR
// uc_nation := 0 ;
65748: LD_ADDR_OWVAR 21
65752: PUSH
65753: LD_INT 0
65755: ST_TO_ADDR
// hc_sex := sex_male ;
65756: LD_ADDR_OWVAR 27
65760: PUSH
65761: LD_INT 1
65763: ST_TO_ADDR
// hc_class := class_apeman ;
65764: LD_ADDR_OWVAR 28
65768: PUSH
65769: LD_INT 12
65771: ST_TO_ADDR
// hc_gallery :=  ;
65772: LD_ADDR_OWVAR 33
65776: PUSH
65777: LD_STRING 
65779: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65780: LD_ADDR_OWVAR 35
65784: PUSH
65785: LD_VAR 0 1
65789: NEG
65790: PPUSH
65791: LD_VAR 0 1
65795: PPUSH
65796: CALL_OW 12
65800: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65801: LD_ADDR_OWVAR 31
65805: PUSH
65806: LD_INT 0
65808: PPUSH
65809: LD_INT 3
65811: PPUSH
65812: CALL_OW 12
65816: PUSH
65817: LD_INT 0
65819: PPUSH
65820: LD_INT 3
65822: PPUSH
65823: CALL_OW 12
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: LD_INT 0
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: ST_TO_ADDR
// end ;
65840: LD_VAR 0 2
65844: RET
// export function PrepareTiger ( agressivity ) ; begin
65845: LD_INT 0
65847: PPUSH
// uc_side := 0 ;
65848: LD_ADDR_OWVAR 20
65852: PUSH
65853: LD_INT 0
65855: ST_TO_ADDR
// uc_nation := 0 ;
65856: LD_ADDR_OWVAR 21
65860: PUSH
65861: LD_INT 0
65863: ST_TO_ADDR
// hc_class := class_tiger ;
65864: LD_ADDR_OWVAR 28
65868: PUSH
65869: LD_INT 14
65871: ST_TO_ADDR
// hc_gallery :=  ;
65872: LD_ADDR_OWVAR 33
65876: PUSH
65877: LD_STRING 
65879: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65880: LD_ADDR_OWVAR 35
65884: PUSH
65885: LD_VAR 0 1
65889: NEG
65890: PPUSH
65891: LD_VAR 0 1
65895: PPUSH
65896: CALL_OW 12
65900: ST_TO_ADDR
// end ;
65901: LD_VAR 0 2
65905: RET
// export function PrepareEnchidna ( ) ; begin
65906: LD_INT 0
65908: PPUSH
// uc_side := 0 ;
65909: LD_ADDR_OWVAR 20
65913: PUSH
65914: LD_INT 0
65916: ST_TO_ADDR
// uc_nation := 0 ;
65917: LD_ADDR_OWVAR 21
65921: PUSH
65922: LD_INT 0
65924: ST_TO_ADDR
// hc_class := class_baggie ;
65925: LD_ADDR_OWVAR 28
65929: PUSH
65930: LD_INT 13
65932: ST_TO_ADDR
// hc_gallery :=  ;
65933: LD_ADDR_OWVAR 33
65937: PUSH
65938: LD_STRING 
65940: ST_TO_ADDR
// end ;
65941: LD_VAR 0 1
65945: RET
// export function PrepareFrog ( ) ; begin
65946: LD_INT 0
65948: PPUSH
// uc_side := 0 ;
65949: LD_ADDR_OWVAR 20
65953: PUSH
65954: LD_INT 0
65956: ST_TO_ADDR
// uc_nation := 0 ;
65957: LD_ADDR_OWVAR 21
65961: PUSH
65962: LD_INT 0
65964: ST_TO_ADDR
// hc_class := class_frog ;
65965: LD_ADDR_OWVAR 28
65969: PUSH
65970: LD_INT 19
65972: ST_TO_ADDR
// hc_gallery :=  ;
65973: LD_ADDR_OWVAR 33
65977: PUSH
65978: LD_STRING 
65980: ST_TO_ADDR
// end ;
65981: LD_VAR 0 1
65985: RET
// export function PrepareFish ( ) ; begin
65986: LD_INT 0
65988: PPUSH
// uc_side := 0 ;
65989: LD_ADDR_OWVAR 20
65993: PUSH
65994: LD_INT 0
65996: ST_TO_ADDR
// uc_nation := 0 ;
65997: LD_ADDR_OWVAR 21
66001: PUSH
66002: LD_INT 0
66004: ST_TO_ADDR
// hc_class := class_fish ;
66005: LD_ADDR_OWVAR 28
66009: PUSH
66010: LD_INT 20
66012: ST_TO_ADDR
// hc_gallery :=  ;
66013: LD_ADDR_OWVAR 33
66017: PUSH
66018: LD_STRING 
66020: ST_TO_ADDR
// end ;
66021: LD_VAR 0 1
66025: RET
// export function PrepareBird ( ) ; begin
66026: LD_INT 0
66028: PPUSH
// uc_side := 0 ;
66029: LD_ADDR_OWVAR 20
66033: PUSH
66034: LD_INT 0
66036: ST_TO_ADDR
// uc_nation := 0 ;
66037: LD_ADDR_OWVAR 21
66041: PUSH
66042: LD_INT 0
66044: ST_TO_ADDR
// hc_class := class_phororhacos ;
66045: LD_ADDR_OWVAR 28
66049: PUSH
66050: LD_INT 18
66052: ST_TO_ADDR
// hc_gallery :=  ;
66053: LD_ADDR_OWVAR 33
66057: PUSH
66058: LD_STRING 
66060: ST_TO_ADDR
// end ;
66061: LD_VAR 0 1
66065: RET
// export function PrepareHorse ( ) ; begin
66066: LD_INT 0
66068: PPUSH
// uc_side := 0 ;
66069: LD_ADDR_OWVAR 20
66073: PUSH
66074: LD_INT 0
66076: ST_TO_ADDR
// uc_nation := 0 ;
66077: LD_ADDR_OWVAR 21
66081: PUSH
66082: LD_INT 0
66084: ST_TO_ADDR
// hc_class := class_horse ;
66085: LD_ADDR_OWVAR 28
66089: PUSH
66090: LD_INT 21
66092: ST_TO_ADDR
// hc_gallery :=  ;
66093: LD_ADDR_OWVAR 33
66097: PUSH
66098: LD_STRING 
66100: ST_TO_ADDR
// end ;
66101: LD_VAR 0 1
66105: RET
// export function PrepareMastodont ( ) ; begin
66106: LD_INT 0
66108: PPUSH
// uc_side := 0 ;
66109: LD_ADDR_OWVAR 20
66113: PUSH
66114: LD_INT 0
66116: ST_TO_ADDR
// uc_nation := 0 ;
66117: LD_ADDR_OWVAR 21
66121: PUSH
66122: LD_INT 0
66124: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66125: LD_ADDR_OWVAR 37
66129: PUSH
66130: LD_INT 31
66132: ST_TO_ADDR
// vc_control := control_rider ;
66133: LD_ADDR_OWVAR 38
66137: PUSH
66138: LD_INT 4
66140: ST_TO_ADDR
// end ;
66141: LD_VAR 0 1
66145: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66146: LD_INT 0
66148: PPUSH
66149: PPUSH
66150: PPUSH
// uc_side = 0 ;
66151: LD_ADDR_OWVAR 20
66155: PUSH
66156: LD_INT 0
66158: ST_TO_ADDR
// uc_nation = 0 ;
66159: LD_ADDR_OWVAR 21
66163: PUSH
66164: LD_INT 0
66166: ST_TO_ADDR
// InitHc_All ( ) ;
66167: CALL_OW 584
// InitVc ;
66171: CALL_OW 20
// if mastodonts then
66175: LD_VAR 0 6
66179: IFFALSE 66246
// for i = 1 to mastodonts do
66181: LD_ADDR_VAR 0 11
66185: PUSH
66186: DOUBLE
66187: LD_INT 1
66189: DEC
66190: ST_TO_ADDR
66191: LD_VAR 0 6
66195: PUSH
66196: FOR_TO
66197: IFFALSE 66244
// begin vc_chassis := 31 ;
66199: LD_ADDR_OWVAR 37
66203: PUSH
66204: LD_INT 31
66206: ST_TO_ADDR
// vc_control := control_rider ;
66207: LD_ADDR_OWVAR 38
66211: PUSH
66212: LD_INT 4
66214: ST_TO_ADDR
// animal := CreateVehicle ;
66215: LD_ADDR_VAR 0 12
66219: PUSH
66220: CALL_OW 45
66224: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66225: LD_VAR 0 12
66229: PPUSH
66230: LD_VAR 0 8
66234: PPUSH
66235: LD_INT 0
66237: PPUSH
66238: CALL 68374 0 3
// end ;
66242: GO 66196
66244: POP
66245: POP
// if horses then
66246: LD_VAR 0 5
66250: IFFALSE 66317
// for i = 1 to horses do
66252: LD_ADDR_VAR 0 11
66256: PUSH
66257: DOUBLE
66258: LD_INT 1
66260: DEC
66261: ST_TO_ADDR
66262: LD_VAR 0 5
66266: PUSH
66267: FOR_TO
66268: IFFALSE 66315
// begin hc_class := 21 ;
66270: LD_ADDR_OWVAR 28
66274: PUSH
66275: LD_INT 21
66277: ST_TO_ADDR
// hc_gallery :=  ;
66278: LD_ADDR_OWVAR 33
66282: PUSH
66283: LD_STRING 
66285: ST_TO_ADDR
// animal := CreateHuman ;
66286: LD_ADDR_VAR 0 12
66290: PUSH
66291: CALL_OW 44
66295: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66296: LD_VAR 0 12
66300: PPUSH
66301: LD_VAR 0 8
66305: PPUSH
66306: LD_INT 0
66308: PPUSH
66309: CALL 68374 0 3
// end ;
66313: GO 66267
66315: POP
66316: POP
// if birds then
66317: LD_VAR 0 1
66321: IFFALSE 66388
// for i = 1 to birds do
66323: LD_ADDR_VAR 0 11
66327: PUSH
66328: DOUBLE
66329: LD_INT 1
66331: DEC
66332: ST_TO_ADDR
66333: LD_VAR 0 1
66337: PUSH
66338: FOR_TO
66339: IFFALSE 66386
// begin hc_class := 18 ;
66341: LD_ADDR_OWVAR 28
66345: PUSH
66346: LD_INT 18
66348: ST_TO_ADDR
// hc_gallery =  ;
66349: LD_ADDR_OWVAR 33
66353: PUSH
66354: LD_STRING 
66356: ST_TO_ADDR
// animal := CreateHuman ;
66357: LD_ADDR_VAR 0 12
66361: PUSH
66362: CALL_OW 44
66366: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66367: LD_VAR 0 12
66371: PPUSH
66372: LD_VAR 0 8
66376: PPUSH
66377: LD_INT 0
66379: PPUSH
66380: CALL 68374 0 3
// end ;
66384: GO 66338
66386: POP
66387: POP
// if tigers then
66388: LD_VAR 0 2
66392: IFFALSE 66476
// for i = 1 to tigers do
66394: LD_ADDR_VAR 0 11
66398: PUSH
66399: DOUBLE
66400: LD_INT 1
66402: DEC
66403: ST_TO_ADDR
66404: LD_VAR 0 2
66408: PUSH
66409: FOR_TO
66410: IFFALSE 66474
// begin hc_class = class_tiger ;
66412: LD_ADDR_OWVAR 28
66416: PUSH
66417: LD_INT 14
66419: ST_TO_ADDR
// hc_gallery =  ;
66420: LD_ADDR_OWVAR 33
66424: PUSH
66425: LD_STRING 
66427: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66428: LD_ADDR_OWVAR 35
66432: PUSH
66433: LD_INT 7
66435: NEG
66436: PPUSH
66437: LD_INT 7
66439: PPUSH
66440: CALL_OW 12
66444: ST_TO_ADDR
// animal := CreateHuman ;
66445: LD_ADDR_VAR 0 12
66449: PUSH
66450: CALL_OW 44
66454: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66455: LD_VAR 0 12
66459: PPUSH
66460: LD_VAR 0 8
66464: PPUSH
66465: LD_INT 0
66467: PPUSH
66468: CALL 68374 0 3
// end ;
66472: GO 66409
66474: POP
66475: POP
// if apemans then
66476: LD_VAR 0 3
66480: IFFALSE 66603
// for i = 1 to apemans do
66482: LD_ADDR_VAR 0 11
66486: PUSH
66487: DOUBLE
66488: LD_INT 1
66490: DEC
66491: ST_TO_ADDR
66492: LD_VAR 0 3
66496: PUSH
66497: FOR_TO
66498: IFFALSE 66601
// begin hc_class = class_apeman ;
66500: LD_ADDR_OWVAR 28
66504: PUSH
66505: LD_INT 12
66507: ST_TO_ADDR
// hc_gallery =  ;
66508: LD_ADDR_OWVAR 33
66512: PUSH
66513: LD_STRING 
66515: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66516: LD_ADDR_OWVAR 35
66520: PUSH
66521: LD_INT 2
66523: NEG
66524: PPUSH
66525: LD_INT 2
66527: PPUSH
66528: CALL_OW 12
66532: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66533: LD_ADDR_OWVAR 31
66537: PUSH
66538: LD_INT 1
66540: PPUSH
66541: LD_INT 3
66543: PPUSH
66544: CALL_OW 12
66548: PUSH
66549: LD_INT 1
66551: PPUSH
66552: LD_INT 3
66554: PPUSH
66555: CALL_OW 12
66559: PUSH
66560: LD_INT 0
66562: PUSH
66563: LD_INT 0
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: ST_TO_ADDR
// animal := CreateHuman ;
66572: LD_ADDR_VAR 0 12
66576: PUSH
66577: CALL_OW 44
66581: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66582: LD_VAR 0 12
66586: PPUSH
66587: LD_VAR 0 8
66591: PPUSH
66592: LD_INT 0
66594: PPUSH
66595: CALL 68374 0 3
// end ;
66599: GO 66497
66601: POP
66602: POP
// if enchidnas then
66603: LD_VAR 0 4
66607: IFFALSE 66674
// for i = 1 to enchidnas do
66609: LD_ADDR_VAR 0 11
66613: PUSH
66614: DOUBLE
66615: LD_INT 1
66617: DEC
66618: ST_TO_ADDR
66619: LD_VAR 0 4
66623: PUSH
66624: FOR_TO
66625: IFFALSE 66672
// begin hc_class = 13 ;
66627: LD_ADDR_OWVAR 28
66631: PUSH
66632: LD_INT 13
66634: ST_TO_ADDR
// hc_gallery =  ;
66635: LD_ADDR_OWVAR 33
66639: PUSH
66640: LD_STRING 
66642: ST_TO_ADDR
// animal := CreateHuman ;
66643: LD_ADDR_VAR 0 12
66647: PUSH
66648: CALL_OW 44
66652: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66653: LD_VAR 0 12
66657: PPUSH
66658: LD_VAR 0 8
66662: PPUSH
66663: LD_INT 0
66665: PPUSH
66666: CALL 68374 0 3
// end ;
66670: GO 66624
66672: POP
66673: POP
// if fishes then
66674: LD_VAR 0 7
66678: IFFALSE 66745
// for i = 1 to fishes do
66680: LD_ADDR_VAR 0 11
66684: PUSH
66685: DOUBLE
66686: LD_INT 1
66688: DEC
66689: ST_TO_ADDR
66690: LD_VAR 0 7
66694: PUSH
66695: FOR_TO
66696: IFFALSE 66743
// begin hc_class = 20 ;
66698: LD_ADDR_OWVAR 28
66702: PUSH
66703: LD_INT 20
66705: ST_TO_ADDR
// hc_gallery =  ;
66706: LD_ADDR_OWVAR 33
66710: PUSH
66711: LD_STRING 
66713: ST_TO_ADDR
// animal := CreateHuman ;
66714: LD_ADDR_VAR 0 12
66718: PUSH
66719: CALL_OW 44
66723: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66724: LD_VAR 0 12
66728: PPUSH
66729: LD_VAR 0 9
66733: PPUSH
66734: LD_INT 0
66736: PPUSH
66737: CALL 68374 0 3
// end ;
66741: GO 66695
66743: POP
66744: POP
// end ;
66745: LD_VAR 0 10
66749: RET
// export function WantHeal ( sci , unit ) ; begin
66750: LD_INT 0
66752: PPUSH
// if GetTaskList ( sci ) > 0 then
66753: LD_VAR 0 1
66757: PPUSH
66758: CALL_OW 437
66762: PUSH
66763: LD_INT 0
66765: GREATER
66766: IFFALSE 66836
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66768: LD_VAR 0 1
66772: PPUSH
66773: CALL_OW 437
66777: PUSH
66778: LD_INT 1
66780: ARRAY
66781: PUSH
66782: LD_INT 1
66784: ARRAY
66785: PUSH
66786: LD_STRING l
66788: EQUAL
66789: PUSH
66790: LD_VAR 0 1
66794: PPUSH
66795: CALL_OW 437
66799: PUSH
66800: LD_INT 1
66802: ARRAY
66803: PUSH
66804: LD_INT 4
66806: ARRAY
66807: PUSH
66808: LD_VAR 0 2
66812: EQUAL
66813: AND
66814: IFFALSE 66826
// result := true else
66816: LD_ADDR_VAR 0 3
66820: PUSH
66821: LD_INT 1
66823: ST_TO_ADDR
66824: GO 66834
// result := false ;
66826: LD_ADDR_VAR 0 3
66830: PUSH
66831: LD_INT 0
66833: ST_TO_ADDR
// end else
66834: GO 66844
// result := false ;
66836: LD_ADDR_VAR 0 3
66840: PUSH
66841: LD_INT 0
66843: ST_TO_ADDR
// end ;
66844: LD_VAR 0 3
66848: RET
// export function HealTarget ( sci ) ; begin
66849: LD_INT 0
66851: PPUSH
// if not sci then
66852: LD_VAR 0 1
66856: NOT
66857: IFFALSE 66861
// exit ;
66859: GO 66926
// result := 0 ;
66861: LD_ADDR_VAR 0 2
66865: PUSH
66866: LD_INT 0
66868: ST_TO_ADDR
// if GetTaskList ( sci ) then
66869: LD_VAR 0 1
66873: PPUSH
66874: CALL_OW 437
66878: IFFALSE 66926
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66880: LD_VAR 0 1
66884: PPUSH
66885: CALL_OW 437
66889: PUSH
66890: LD_INT 1
66892: ARRAY
66893: PUSH
66894: LD_INT 1
66896: ARRAY
66897: PUSH
66898: LD_STRING l
66900: EQUAL
66901: IFFALSE 66926
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66903: LD_ADDR_VAR 0 2
66907: PUSH
66908: LD_VAR 0 1
66912: PPUSH
66913: CALL_OW 437
66917: PUSH
66918: LD_INT 1
66920: ARRAY
66921: PUSH
66922: LD_INT 4
66924: ARRAY
66925: ST_TO_ADDR
// end ;
66926: LD_VAR 0 2
66930: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66931: LD_INT 0
66933: PPUSH
66934: PPUSH
66935: PPUSH
66936: PPUSH
// if not base_units then
66937: LD_VAR 0 1
66941: NOT
66942: IFFALSE 66946
// exit ;
66944: GO 67033
// result := false ;
66946: LD_ADDR_VAR 0 2
66950: PUSH
66951: LD_INT 0
66953: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66954: LD_ADDR_VAR 0 5
66958: PUSH
66959: LD_VAR 0 1
66963: PPUSH
66964: LD_INT 21
66966: PUSH
66967: LD_INT 3
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PPUSH
66974: CALL_OW 72
66978: ST_TO_ADDR
// if not tmp then
66979: LD_VAR 0 5
66983: NOT
66984: IFFALSE 66988
// exit ;
66986: GO 67033
// for i in tmp do
66988: LD_ADDR_VAR 0 3
66992: PUSH
66993: LD_VAR 0 5
66997: PUSH
66998: FOR_IN
66999: IFFALSE 67031
// begin result := EnemyInRange ( i , 22 ) ;
67001: LD_ADDR_VAR 0 2
67005: PUSH
67006: LD_VAR 0 3
67010: PPUSH
67011: LD_INT 22
67013: PPUSH
67014: CALL 64631 0 2
67018: ST_TO_ADDR
// if result then
67019: LD_VAR 0 2
67023: IFFALSE 67029
// exit ;
67025: POP
67026: POP
67027: GO 67033
// end ;
67029: GO 66998
67031: POP
67032: POP
// end ;
67033: LD_VAR 0 2
67037: RET
// export function FilterByTag ( units , tag ) ; begin
67038: LD_INT 0
67040: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67041: LD_ADDR_VAR 0 3
67045: PUSH
67046: LD_VAR 0 1
67050: PPUSH
67051: LD_INT 120
67053: PUSH
67054: LD_VAR 0 2
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PPUSH
67063: CALL_OW 72
67067: ST_TO_ADDR
// end ;
67068: LD_VAR 0 3
67072: RET
// export function IsDriver ( un ) ; begin
67073: LD_INT 0
67075: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67076: LD_ADDR_VAR 0 2
67080: PUSH
67081: LD_VAR 0 1
67085: PUSH
67086: LD_INT 55
67088: PUSH
67089: EMPTY
67090: LIST
67091: PPUSH
67092: CALL_OW 69
67096: IN
67097: ST_TO_ADDR
// end ;
67098: LD_VAR 0 2
67102: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67103: LD_INT 0
67105: PPUSH
67106: PPUSH
// list := [ ] ;
67107: LD_ADDR_VAR 0 5
67111: PUSH
67112: EMPTY
67113: ST_TO_ADDR
// case d of 0 :
67114: LD_VAR 0 3
67118: PUSH
67119: LD_INT 0
67121: DOUBLE
67122: EQUAL
67123: IFTRUE 67127
67125: GO 67260
67127: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67128: LD_ADDR_VAR 0 5
67132: PUSH
67133: LD_VAR 0 1
67137: PUSH
67138: LD_INT 4
67140: MINUS
67141: PUSH
67142: LD_VAR 0 2
67146: PUSH
67147: LD_INT 4
67149: MINUS
67150: PUSH
67151: LD_INT 2
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: LIST
67158: PUSH
67159: LD_VAR 0 1
67163: PUSH
67164: LD_INT 3
67166: MINUS
67167: PUSH
67168: LD_VAR 0 2
67172: PUSH
67173: LD_INT 1
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: LIST
67180: PUSH
67181: LD_VAR 0 1
67185: PUSH
67186: LD_INT 4
67188: PLUS
67189: PUSH
67190: LD_VAR 0 2
67194: PUSH
67195: LD_INT 4
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: LIST
67202: PUSH
67203: LD_VAR 0 1
67207: PUSH
67208: LD_INT 3
67210: PLUS
67211: PUSH
67212: LD_VAR 0 2
67216: PUSH
67217: LD_INT 3
67219: PLUS
67220: PUSH
67221: LD_INT 5
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: LIST
67228: PUSH
67229: LD_VAR 0 1
67233: PUSH
67234: LD_VAR 0 2
67238: PUSH
67239: LD_INT 4
67241: PLUS
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: LIST
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: ST_TO_ADDR
// end ; 1 :
67258: GO 67958
67260: LD_INT 1
67262: DOUBLE
67263: EQUAL
67264: IFTRUE 67268
67266: GO 67401
67268: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67269: LD_ADDR_VAR 0 5
67273: PUSH
67274: LD_VAR 0 1
67278: PUSH
67279: LD_VAR 0 2
67283: PUSH
67284: LD_INT 4
67286: MINUS
67287: PUSH
67288: LD_INT 3
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: LIST
67295: PUSH
67296: LD_VAR 0 1
67300: PUSH
67301: LD_INT 3
67303: MINUS
67304: PUSH
67305: LD_VAR 0 2
67309: PUSH
67310: LD_INT 3
67312: MINUS
67313: PUSH
67314: LD_INT 2
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: LIST
67321: PUSH
67322: LD_VAR 0 1
67326: PUSH
67327: LD_INT 4
67329: MINUS
67330: PUSH
67331: LD_VAR 0 2
67335: PUSH
67336: LD_INT 1
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: LIST
67343: PUSH
67344: LD_VAR 0 1
67348: PUSH
67349: LD_VAR 0 2
67353: PUSH
67354: LD_INT 3
67356: PLUS
67357: PUSH
67358: LD_INT 0
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: LIST
67365: PUSH
67366: LD_VAR 0 1
67370: PUSH
67371: LD_INT 4
67373: PLUS
67374: PUSH
67375: LD_VAR 0 2
67379: PUSH
67380: LD_INT 4
67382: PLUS
67383: PUSH
67384: LD_INT 5
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: LIST
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: ST_TO_ADDR
// end ; 2 :
67399: GO 67958
67401: LD_INT 2
67403: DOUBLE
67404: EQUAL
67405: IFTRUE 67409
67407: GO 67538
67409: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67410: LD_ADDR_VAR 0 5
67414: PUSH
67415: LD_VAR 0 1
67419: PUSH
67420: LD_VAR 0 2
67424: PUSH
67425: LD_INT 3
67427: MINUS
67428: PUSH
67429: LD_INT 3
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: LIST
67436: PUSH
67437: LD_VAR 0 1
67441: PUSH
67442: LD_INT 4
67444: PLUS
67445: PUSH
67446: LD_VAR 0 2
67450: PUSH
67451: LD_INT 4
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: LIST
67458: PUSH
67459: LD_VAR 0 1
67463: PUSH
67464: LD_VAR 0 2
67468: PUSH
67469: LD_INT 4
67471: PLUS
67472: PUSH
67473: LD_INT 0
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: LIST
67480: PUSH
67481: LD_VAR 0 1
67485: PUSH
67486: LD_INT 3
67488: MINUS
67489: PUSH
67490: LD_VAR 0 2
67494: PUSH
67495: LD_INT 1
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: LIST
67502: PUSH
67503: LD_VAR 0 1
67507: PUSH
67508: LD_INT 4
67510: MINUS
67511: PUSH
67512: LD_VAR 0 2
67516: PUSH
67517: LD_INT 4
67519: MINUS
67520: PUSH
67521: LD_INT 2
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: LIST
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: ST_TO_ADDR
// end ; 3 :
67536: GO 67958
67538: LD_INT 3
67540: DOUBLE
67541: EQUAL
67542: IFTRUE 67546
67544: GO 67679
67546: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67547: LD_ADDR_VAR 0 5
67551: PUSH
67552: LD_VAR 0 1
67556: PUSH
67557: LD_INT 3
67559: PLUS
67560: PUSH
67561: LD_VAR 0 2
67565: PUSH
67566: LD_INT 4
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: LIST
67573: PUSH
67574: LD_VAR 0 1
67578: PUSH
67579: LD_INT 4
67581: PLUS
67582: PUSH
67583: LD_VAR 0 2
67587: PUSH
67588: LD_INT 4
67590: PLUS
67591: PUSH
67592: LD_INT 5
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: LIST
67599: PUSH
67600: LD_VAR 0 1
67604: PUSH
67605: LD_INT 4
67607: MINUS
67608: PUSH
67609: LD_VAR 0 2
67613: PUSH
67614: LD_INT 1
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: LIST
67621: PUSH
67622: LD_VAR 0 1
67626: PUSH
67627: LD_VAR 0 2
67631: PUSH
67632: LD_INT 4
67634: MINUS
67635: PUSH
67636: LD_INT 3
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: LIST
67643: PUSH
67644: LD_VAR 0 1
67648: PUSH
67649: LD_INT 3
67651: MINUS
67652: PUSH
67653: LD_VAR 0 2
67657: PUSH
67658: LD_INT 3
67660: MINUS
67661: PUSH
67662: LD_INT 2
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: LIST
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: ST_TO_ADDR
// end ; 4 :
67677: GO 67958
67679: LD_INT 4
67681: DOUBLE
67682: EQUAL
67683: IFTRUE 67687
67685: GO 67820
67687: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67688: LD_ADDR_VAR 0 5
67692: PUSH
67693: LD_VAR 0 1
67697: PUSH
67698: LD_VAR 0 2
67702: PUSH
67703: LD_INT 4
67705: PLUS
67706: PUSH
67707: LD_INT 0
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: LIST
67714: PUSH
67715: LD_VAR 0 1
67719: PUSH
67720: LD_INT 3
67722: PLUS
67723: PUSH
67724: LD_VAR 0 2
67728: PUSH
67729: LD_INT 3
67731: PLUS
67732: PUSH
67733: LD_INT 5
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: LIST
67740: PUSH
67741: LD_VAR 0 1
67745: PUSH
67746: LD_INT 4
67748: PLUS
67749: PUSH
67750: LD_VAR 0 2
67754: PUSH
67755: LD_INT 4
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: LIST
67762: PUSH
67763: LD_VAR 0 1
67767: PUSH
67768: LD_VAR 0 2
67772: PUSH
67773: LD_INT 3
67775: MINUS
67776: PUSH
67777: LD_INT 3
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: LIST
67784: PUSH
67785: LD_VAR 0 1
67789: PUSH
67790: LD_INT 4
67792: MINUS
67793: PUSH
67794: LD_VAR 0 2
67798: PUSH
67799: LD_INT 4
67801: MINUS
67802: PUSH
67803: LD_INT 2
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: LIST
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: ST_TO_ADDR
// end ; 5 :
67818: GO 67958
67820: LD_INT 5
67822: DOUBLE
67823: EQUAL
67824: IFTRUE 67828
67826: GO 67957
67828: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67829: LD_ADDR_VAR 0 5
67833: PUSH
67834: LD_VAR 0 1
67838: PUSH
67839: LD_INT 4
67841: MINUS
67842: PUSH
67843: LD_VAR 0 2
67847: PUSH
67848: LD_INT 1
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: LIST
67855: PUSH
67856: LD_VAR 0 1
67860: PUSH
67861: LD_VAR 0 2
67865: PUSH
67866: LD_INT 4
67868: MINUS
67869: PUSH
67870: LD_INT 3
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: LIST
67877: PUSH
67878: LD_VAR 0 1
67882: PUSH
67883: LD_INT 4
67885: PLUS
67886: PUSH
67887: LD_VAR 0 2
67891: PUSH
67892: LD_INT 4
67894: PLUS
67895: PUSH
67896: LD_INT 5
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: LIST
67903: PUSH
67904: LD_VAR 0 1
67908: PUSH
67909: LD_INT 3
67911: PLUS
67912: PUSH
67913: LD_VAR 0 2
67917: PUSH
67918: LD_INT 4
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: LIST
67925: PUSH
67926: LD_VAR 0 1
67930: PUSH
67931: LD_VAR 0 2
67935: PUSH
67936: LD_INT 3
67938: PLUS
67939: PUSH
67940: LD_INT 0
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: LIST
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: ST_TO_ADDR
// end ; end ;
67955: GO 67958
67957: POP
// result := list ;
67958: LD_ADDR_VAR 0 4
67962: PUSH
67963: LD_VAR 0 5
67967: ST_TO_ADDR
// end ;
67968: LD_VAR 0 4
67972: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67973: LD_INT 0
67975: PPUSH
67976: PPUSH
67977: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67978: LD_VAR 0 1
67982: NOT
67983: PUSH
67984: LD_VAR 0 2
67988: PUSH
67989: LD_INT 1
67991: PUSH
67992: LD_INT 2
67994: PUSH
67995: LD_INT 3
67997: PUSH
67998: LD_INT 4
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: IN
68007: NOT
68008: OR
68009: IFFALSE 68013
// exit ;
68011: GO 68096
// tmp := [ ] ;
68013: LD_ADDR_VAR 0 5
68017: PUSH
68018: EMPTY
68019: ST_TO_ADDR
// for i in units do
68020: LD_ADDR_VAR 0 4
68024: PUSH
68025: LD_VAR 0 1
68029: PUSH
68030: FOR_IN
68031: IFFALSE 68065
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68033: LD_ADDR_VAR 0 5
68037: PUSH
68038: LD_VAR 0 5
68042: PPUSH
68043: LD_VAR 0 4
68047: PPUSH
68048: LD_VAR 0 2
68052: PPUSH
68053: CALL_OW 259
68057: PPUSH
68058: CALL 69469 0 2
68062: ST_TO_ADDR
68063: GO 68030
68065: POP
68066: POP
// if not tmp then
68067: LD_VAR 0 5
68071: NOT
68072: IFFALSE 68076
// exit ;
68074: GO 68096
// result := SortListByListDesc ( units , tmp ) ;
68076: LD_ADDR_VAR 0 3
68080: PUSH
68081: LD_VAR 0 1
68085: PPUSH
68086: LD_VAR 0 5
68090: PPUSH
68091: CALL_OW 77
68095: ST_TO_ADDR
// end ;
68096: LD_VAR 0 3
68100: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68101: LD_INT 0
68103: PPUSH
68104: PPUSH
68105: PPUSH
// result := false ;
68106: LD_ADDR_VAR 0 3
68110: PUSH
68111: LD_INT 0
68113: ST_TO_ADDR
// if not building then
68114: LD_VAR 0 2
68118: NOT
68119: IFFALSE 68123
// exit ;
68121: GO 68261
// x := GetX ( building ) ;
68123: LD_ADDR_VAR 0 4
68127: PUSH
68128: LD_VAR 0 2
68132: PPUSH
68133: CALL_OW 250
68137: ST_TO_ADDR
// y := GetY ( building ) ;
68138: LD_ADDR_VAR 0 5
68142: PUSH
68143: LD_VAR 0 2
68147: PPUSH
68148: CALL_OW 251
68152: ST_TO_ADDR
// if not x or not y then
68153: LD_VAR 0 4
68157: NOT
68158: PUSH
68159: LD_VAR 0 5
68163: NOT
68164: OR
68165: IFFALSE 68169
// exit ;
68167: GO 68261
// if GetTaskList ( unit ) then
68169: LD_VAR 0 1
68173: PPUSH
68174: CALL_OW 437
68178: IFFALSE 68261
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68180: LD_STRING e
68182: PUSH
68183: LD_VAR 0 1
68187: PPUSH
68188: CALL_OW 437
68192: PUSH
68193: LD_INT 1
68195: ARRAY
68196: PUSH
68197: LD_INT 1
68199: ARRAY
68200: EQUAL
68201: PUSH
68202: LD_VAR 0 4
68206: PUSH
68207: LD_VAR 0 1
68211: PPUSH
68212: CALL_OW 437
68216: PUSH
68217: LD_INT 1
68219: ARRAY
68220: PUSH
68221: LD_INT 2
68223: ARRAY
68224: EQUAL
68225: AND
68226: PUSH
68227: LD_VAR 0 5
68231: PUSH
68232: LD_VAR 0 1
68236: PPUSH
68237: CALL_OW 437
68241: PUSH
68242: LD_INT 1
68244: ARRAY
68245: PUSH
68246: LD_INT 3
68248: ARRAY
68249: EQUAL
68250: AND
68251: IFFALSE 68261
// result := true end ;
68253: LD_ADDR_VAR 0 3
68257: PUSH
68258: LD_INT 1
68260: ST_TO_ADDR
// end ;
68261: LD_VAR 0 3
68265: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68266: LD_INT 0
68268: PPUSH
// result := false ;
68269: LD_ADDR_VAR 0 4
68273: PUSH
68274: LD_INT 0
68276: ST_TO_ADDR
// if GetTaskList ( unit ) then
68277: LD_VAR 0 1
68281: PPUSH
68282: CALL_OW 437
68286: IFFALSE 68369
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68288: LD_STRING M
68290: PUSH
68291: LD_VAR 0 1
68295: PPUSH
68296: CALL_OW 437
68300: PUSH
68301: LD_INT 1
68303: ARRAY
68304: PUSH
68305: LD_INT 1
68307: ARRAY
68308: EQUAL
68309: PUSH
68310: LD_VAR 0 2
68314: PUSH
68315: LD_VAR 0 1
68319: PPUSH
68320: CALL_OW 437
68324: PUSH
68325: LD_INT 1
68327: ARRAY
68328: PUSH
68329: LD_INT 2
68331: ARRAY
68332: EQUAL
68333: AND
68334: PUSH
68335: LD_VAR 0 3
68339: PUSH
68340: LD_VAR 0 1
68344: PPUSH
68345: CALL_OW 437
68349: PUSH
68350: LD_INT 1
68352: ARRAY
68353: PUSH
68354: LD_INT 3
68356: ARRAY
68357: EQUAL
68358: AND
68359: IFFALSE 68369
// result := true ;
68361: LD_ADDR_VAR 0 4
68365: PUSH
68366: LD_INT 1
68368: ST_TO_ADDR
// end ; end ;
68369: LD_VAR 0 4
68373: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68374: LD_INT 0
68376: PPUSH
68377: PPUSH
68378: PPUSH
68379: PPUSH
// if not unit or not area then
68380: LD_VAR 0 1
68384: NOT
68385: PUSH
68386: LD_VAR 0 2
68390: NOT
68391: OR
68392: IFFALSE 68396
// exit ;
68394: GO 68572
// tmp := AreaToList ( area , i ) ;
68396: LD_ADDR_VAR 0 6
68400: PUSH
68401: LD_VAR 0 2
68405: PPUSH
68406: LD_VAR 0 5
68410: PPUSH
68411: CALL_OW 517
68415: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68416: LD_ADDR_VAR 0 5
68420: PUSH
68421: DOUBLE
68422: LD_INT 1
68424: DEC
68425: ST_TO_ADDR
68426: LD_VAR 0 6
68430: PUSH
68431: LD_INT 1
68433: ARRAY
68434: PUSH
68435: FOR_TO
68436: IFFALSE 68570
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68438: LD_ADDR_VAR 0 7
68442: PUSH
68443: LD_VAR 0 6
68447: PUSH
68448: LD_INT 1
68450: ARRAY
68451: PUSH
68452: LD_VAR 0 5
68456: ARRAY
68457: PUSH
68458: LD_VAR 0 6
68462: PUSH
68463: LD_INT 2
68465: ARRAY
68466: PUSH
68467: LD_VAR 0 5
68471: ARRAY
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68477: LD_INT 92
68479: PUSH
68480: LD_VAR 0 7
68484: PUSH
68485: LD_INT 1
68487: ARRAY
68488: PUSH
68489: LD_VAR 0 7
68493: PUSH
68494: LD_INT 2
68496: ARRAY
68497: PUSH
68498: LD_INT 2
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: PPUSH
68507: CALL_OW 69
68511: PUSH
68512: LD_INT 0
68514: EQUAL
68515: IFFALSE 68568
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68517: LD_VAR 0 1
68521: PPUSH
68522: LD_VAR 0 7
68526: PUSH
68527: LD_INT 1
68529: ARRAY
68530: PPUSH
68531: LD_VAR 0 7
68535: PUSH
68536: LD_INT 2
68538: ARRAY
68539: PPUSH
68540: LD_VAR 0 3
68544: PPUSH
68545: CALL_OW 48
// result := IsPlaced ( unit ) ;
68549: LD_ADDR_VAR 0 4
68553: PUSH
68554: LD_VAR 0 1
68558: PPUSH
68559: CALL_OW 305
68563: ST_TO_ADDR
// exit ;
68564: POP
68565: POP
68566: GO 68572
// end ; end ;
68568: GO 68435
68570: POP
68571: POP
// end ;
68572: LD_VAR 0 4
68576: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68577: LD_INT 0
68579: PPUSH
68580: PPUSH
68581: PPUSH
// if not side or side > 8 then
68582: LD_VAR 0 1
68586: NOT
68587: PUSH
68588: LD_VAR 0 1
68592: PUSH
68593: LD_INT 8
68595: GREATER
68596: OR
68597: IFFALSE 68601
// exit ;
68599: GO 68788
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68601: LD_ADDR_VAR 0 4
68605: PUSH
68606: LD_INT 22
68608: PUSH
68609: LD_VAR 0 1
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 21
68620: PUSH
68621: LD_INT 3
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PPUSH
68632: CALL_OW 69
68636: ST_TO_ADDR
// if not tmp then
68637: LD_VAR 0 4
68641: NOT
68642: IFFALSE 68646
// exit ;
68644: GO 68788
// enable_addtolog := true ;
68646: LD_ADDR_OWVAR 81
68650: PUSH
68651: LD_INT 1
68653: ST_TO_ADDR
// AddToLog ( [ ) ;
68654: LD_STRING [
68656: PPUSH
68657: CALL_OW 561
// for i in tmp do
68661: LD_ADDR_VAR 0 3
68665: PUSH
68666: LD_VAR 0 4
68670: PUSH
68671: FOR_IN
68672: IFFALSE 68779
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68674: LD_STRING [
68676: PUSH
68677: LD_VAR 0 3
68681: PPUSH
68682: CALL_OW 266
68686: STR
68687: PUSH
68688: LD_STRING , 
68690: STR
68691: PUSH
68692: LD_VAR 0 3
68696: PPUSH
68697: CALL_OW 250
68701: STR
68702: PUSH
68703: LD_STRING , 
68705: STR
68706: PUSH
68707: LD_VAR 0 3
68711: PPUSH
68712: CALL_OW 251
68716: STR
68717: PUSH
68718: LD_STRING , 
68720: STR
68721: PUSH
68722: LD_VAR 0 3
68726: PPUSH
68727: CALL_OW 254
68731: STR
68732: PUSH
68733: LD_STRING , 
68735: STR
68736: PUSH
68737: LD_VAR 0 3
68741: PPUSH
68742: LD_INT 1
68744: PPUSH
68745: CALL_OW 268
68749: STR
68750: PUSH
68751: LD_STRING , 
68753: STR
68754: PUSH
68755: LD_VAR 0 3
68759: PPUSH
68760: LD_INT 2
68762: PPUSH
68763: CALL_OW 268
68767: STR
68768: PUSH
68769: LD_STRING ],
68771: STR
68772: PPUSH
68773: CALL_OW 561
// end ;
68777: GO 68671
68779: POP
68780: POP
// AddToLog ( ]; ) ;
68781: LD_STRING ];
68783: PPUSH
68784: CALL_OW 561
// end ;
68788: LD_VAR 0 2
68792: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68793: LD_INT 0
68795: PPUSH
68796: PPUSH
68797: PPUSH
68798: PPUSH
68799: PPUSH
// if not area or not rate or not max then
68800: LD_VAR 0 1
68804: NOT
68805: PUSH
68806: LD_VAR 0 2
68810: NOT
68811: OR
68812: PUSH
68813: LD_VAR 0 4
68817: NOT
68818: OR
68819: IFFALSE 68823
// exit ;
68821: GO 69012
// while 1 do
68823: LD_INT 1
68825: IFFALSE 69012
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68827: LD_ADDR_VAR 0 9
68831: PUSH
68832: LD_VAR 0 1
68836: PPUSH
68837: LD_INT 1
68839: PPUSH
68840: CALL_OW 287
68844: PUSH
68845: LD_INT 10
68847: MUL
68848: ST_TO_ADDR
// r := rate / 10 ;
68849: LD_ADDR_VAR 0 7
68853: PUSH
68854: LD_VAR 0 2
68858: PUSH
68859: LD_INT 10
68861: DIVREAL
68862: ST_TO_ADDR
// time := 1 1$00 ;
68863: LD_ADDR_VAR 0 8
68867: PUSH
68868: LD_INT 2100
68870: ST_TO_ADDR
// if amount < min then
68871: LD_VAR 0 9
68875: PUSH
68876: LD_VAR 0 3
68880: LESS
68881: IFFALSE 68899
// r := r * 2 else
68883: LD_ADDR_VAR 0 7
68887: PUSH
68888: LD_VAR 0 7
68892: PUSH
68893: LD_INT 2
68895: MUL
68896: ST_TO_ADDR
68897: GO 68925
// if amount > max then
68899: LD_VAR 0 9
68903: PUSH
68904: LD_VAR 0 4
68908: GREATER
68909: IFFALSE 68925
// r := r / 2 ;
68911: LD_ADDR_VAR 0 7
68915: PUSH
68916: LD_VAR 0 7
68920: PUSH
68921: LD_INT 2
68923: DIVREAL
68924: ST_TO_ADDR
// time := time / r ;
68925: LD_ADDR_VAR 0 8
68929: PUSH
68930: LD_VAR 0 8
68934: PUSH
68935: LD_VAR 0 7
68939: DIVREAL
68940: ST_TO_ADDR
// if time < 0 then
68941: LD_VAR 0 8
68945: PUSH
68946: LD_INT 0
68948: LESS
68949: IFFALSE 68966
// time := time * - 1 ;
68951: LD_ADDR_VAR 0 8
68955: PUSH
68956: LD_VAR 0 8
68960: PUSH
68961: LD_INT 1
68963: NEG
68964: MUL
68965: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68966: LD_VAR 0 8
68970: PUSH
68971: LD_INT 35
68973: PPUSH
68974: LD_INT 875
68976: PPUSH
68977: CALL_OW 12
68981: PLUS
68982: PPUSH
68983: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68987: LD_INT 1
68989: PPUSH
68990: LD_INT 5
68992: PPUSH
68993: CALL_OW 12
68997: PPUSH
68998: LD_VAR 0 1
69002: PPUSH
69003: LD_INT 1
69005: PPUSH
69006: CALL_OW 55
// end ;
69010: GO 68823
// end ;
69012: LD_VAR 0 5
69016: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69017: LD_INT 0
69019: PPUSH
69020: PPUSH
69021: PPUSH
69022: PPUSH
69023: PPUSH
69024: PPUSH
69025: PPUSH
69026: PPUSH
// if not turrets or not factories then
69027: LD_VAR 0 1
69031: NOT
69032: PUSH
69033: LD_VAR 0 2
69037: NOT
69038: OR
69039: IFFALSE 69043
// exit ;
69041: GO 69350
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69043: LD_ADDR_VAR 0 10
69047: PUSH
69048: LD_INT 5
69050: PUSH
69051: LD_INT 6
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 2
69060: PUSH
69061: LD_INT 4
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 3
69070: PUSH
69071: LD_INT 5
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 24
69085: PUSH
69086: LD_INT 25
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 23
69095: PUSH
69096: LD_INT 27
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 42
69109: PUSH
69110: LD_INT 43
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 44
69119: PUSH
69120: LD_INT 46
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 45
69129: PUSH
69130: LD_INT 47
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: LIST
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: LIST
69146: ST_TO_ADDR
// result := [ ] ;
69147: LD_ADDR_VAR 0 3
69151: PUSH
69152: EMPTY
69153: ST_TO_ADDR
// for i in turrets do
69154: LD_ADDR_VAR 0 4
69158: PUSH
69159: LD_VAR 0 1
69163: PUSH
69164: FOR_IN
69165: IFFALSE 69348
// begin nat := GetNation ( i ) ;
69167: LD_ADDR_VAR 0 7
69171: PUSH
69172: LD_VAR 0 4
69176: PPUSH
69177: CALL_OW 248
69181: ST_TO_ADDR
// weapon := 0 ;
69182: LD_ADDR_VAR 0 8
69186: PUSH
69187: LD_INT 0
69189: ST_TO_ADDR
// if not nat then
69190: LD_VAR 0 7
69194: NOT
69195: IFFALSE 69199
// continue ;
69197: GO 69164
// for j in list [ nat ] do
69199: LD_ADDR_VAR 0 5
69203: PUSH
69204: LD_VAR 0 10
69208: PUSH
69209: LD_VAR 0 7
69213: ARRAY
69214: PUSH
69215: FOR_IN
69216: IFFALSE 69257
// if GetBWeapon ( i ) = j [ 1 ] then
69218: LD_VAR 0 4
69222: PPUSH
69223: CALL_OW 269
69227: PUSH
69228: LD_VAR 0 5
69232: PUSH
69233: LD_INT 1
69235: ARRAY
69236: EQUAL
69237: IFFALSE 69255
// begin weapon := j [ 2 ] ;
69239: LD_ADDR_VAR 0 8
69243: PUSH
69244: LD_VAR 0 5
69248: PUSH
69249: LD_INT 2
69251: ARRAY
69252: ST_TO_ADDR
// break ;
69253: GO 69257
// end ;
69255: GO 69215
69257: POP
69258: POP
// if not weapon then
69259: LD_VAR 0 8
69263: NOT
69264: IFFALSE 69268
// continue ;
69266: GO 69164
// for k in factories do
69268: LD_ADDR_VAR 0 6
69272: PUSH
69273: LD_VAR 0 2
69277: PUSH
69278: FOR_IN
69279: IFFALSE 69344
// begin weapons := AvailableWeaponList ( k ) ;
69281: LD_ADDR_VAR 0 9
69285: PUSH
69286: LD_VAR 0 6
69290: PPUSH
69291: CALL_OW 478
69295: ST_TO_ADDR
// if not weapons then
69296: LD_VAR 0 9
69300: NOT
69301: IFFALSE 69305
// continue ;
69303: GO 69278
// if weapon in weapons then
69305: LD_VAR 0 8
69309: PUSH
69310: LD_VAR 0 9
69314: IN
69315: IFFALSE 69342
// begin result := [ i , weapon ] ;
69317: LD_ADDR_VAR 0 3
69321: PUSH
69322: LD_VAR 0 4
69326: PUSH
69327: LD_VAR 0 8
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: ST_TO_ADDR
// exit ;
69336: POP
69337: POP
69338: POP
69339: POP
69340: GO 69350
// end ; end ;
69342: GO 69278
69344: POP
69345: POP
// end ;
69346: GO 69164
69348: POP
69349: POP
// end ;
69350: LD_VAR 0 3
69354: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69355: LD_INT 0
69357: PPUSH
// if not side or side > 8 then
69358: LD_VAR 0 3
69362: NOT
69363: PUSH
69364: LD_VAR 0 3
69368: PUSH
69369: LD_INT 8
69371: GREATER
69372: OR
69373: IFFALSE 69377
// exit ;
69375: GO 69436
// if not range then
69377: LD_VAR 0 4
69381: NOT
69382: IFFALSE 69393
// range := - 12 ;
69384: LD_ADDR_VAR 0 4
69388: PUSH
69389: LD_INT 12
69391: NEG
69392: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69393: LD_VAR 0 1
69397: PPUSH
69398: LD_VAR 0 2
69402: PPUSH
69403: LD_VAR 0 3
69407: PPUSH
69408: LD_VAR 0 4
69412: PPUSH
69413: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69417: LD_VAR 0 1
69421: PPUSH
69422: LD_VAR 0 2
69426: PPUSH
69427: LD_VAR 0 3
69431: PPUSH
69432: CALL_OW 331
// end ;
69436: LD_VAR 0 5
69440: RET
// export function Video ( mode ) ; begin
69441: LD_INT 0
69443: PPUSH
// ingame_video = mode ;
69444: LD_ADDR_OWVAR 52
69448: PUSH
69449: LD_VAR 0 1
69453: ST_TO_ADDR
// interface_hidden = mode ;
69454: LD_ADDR_OWVAR 54
69458: PUSH
69459: LD_VAR 0 1
69463: ST_TO_ADDR
// end ;
69464: LD_VAR 0 2
69468: RET
// export function Join ( array , element ) ; begin
69469: LD_INT 0
69471: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69472: LD_ADDR_VAR 0 3
69476: PUSH
69477: LD_VAR 0 1
69481: PPUSH
69482: LD_VAR 0 1
69486: PUSH
69487: LD_INT 1
69489: PLUS
69490: PPUSH
69491: LD_VAR 0 2
69495: PPUSH
69496: CALL_OW 1
69500: ST_TO_ADDR
// end ;
69501: LD_VAR 0 3
69505: RET
// export function JoinUnion ( array , element ) ; begin
69506: LD_INT 0
69508: PPUSH
// result := array union element ;
69509: LD_ADDR_VAR 0 3
69513: PUSH
69514: LD_VAR 0 1
69518: PUSH
69519: LD_VAR 0 2
69523: UNION
69524: ST_TO_ADDR
// end ;
69525: LD_VAR 0 3
69529: RET
// export function GetBehemoths ( side ) ; begin
69530: LD_INT 0
69532: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69533: LD_ADDR_VAR 0 2
69537: PUSH
69538: LD_INT 22
69540: PUSH
69541: LD_VAR 0 1
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 31
69552: PUSH
69553: LD_INT 25
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PPUSH
69564: CALL_OW 69
69568: ST_TO_ADDR
// end ;
69569: LD_VAR 0 2
69573: RET
// export function Shuffle ( array ) ; var i , index ; begin
69574: LD_INT 0
69576: PPUSH
69577: PPUSH
69578: PPUSH
// result := [ ] ;
69579: LD_ADDR_VAR 0 2
69583: PUSH
69584: EMPTY
69585: ST_TO_ADDR
// if not array then
69586: LD_VAR 0 1
69590: NOT
69591: IFFALSE 69595
// exit ;
69593: GO 69694
// Randomize ;
69595: CALL_OW 10
// for i = array downto 1 do
69599: LD_ADDR_VAR 0 3
69603: PUSH
69604: DOUBLE
69605: LD_VAR 0 1
69609: INC
69610: ST_TO_ADDR
69611: LD_INT 1
69613: PUSH
69614: FOR_DOWNTO
69615: IFFALSE 69692
// begin index := rand ( 1 , array ) ;
69617: LD_ADDR_VAR 0 4
69621: PUSH
69622: LD_INT 1
69624: PPUSH
69625: LD_VAR 0 1
69629: PPUSH
69630: CALL_OW 12
69634: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69635: LD_ADDR_VAR 0 2
69639: PUSH
69640: LD_VAR 0 2
69644: PPUSH
69645: LD_VAR 0 2
69649: PUSH
69650: LD_INT 1
69652: PLUS
69653: PPUSH
69654: LD_VAR 0 1
69658: PUSH
69659: LD_VAR 0 4
69663: ARRAY
69664: PPUSH
69665: CALL_OW 2
69669: ST_TO_ADDR
// array := Delete ( array , index ) ;
69670: LD_ADDR_VAR 0 1
69674: PUSH
69675: LD_VAR 0 1
69679: PPUSH
69680: LD_VAR 0 4
69684: PPUSH
69685: CALL_OW 3
69689: ST_TO_ADDR
// end ;
69690: GO 69614
69692: POP
69693: POP
// end ;
69694: LD_VAR 0 2
69698: RET
// export function GetBaseMaterials ( base ) ; begin
69699: LD_INT 0
69701: PPUSH
// result := [ 0 , 0 , 0 ] ;
69702: LD_ADDR_VAR 0 2
69706: PUSH
69707: LD_INT 0
69709: PUSH
69710: LD_INT 0
69712: PUSH
69713: LD_INT 0
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: LIST
69720: ST_TO_ADDR
// if not base then
69721: LD_VAR 0 1
69725: NOT
69726: IFFALSE 69730
// exit ;
69728: GO 69779
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69730: LD_ADDR_VAR 0 2
69734: PUSH
69735: LD_VAR 0 1
69739: PPUSH
69740: LD_INT 1
69742: PPUSH
69743: CALL_OW 275
69747: PUSH
69748: LD_VAR 0 1
69752: PPUSH
69753: LD_INT 2
69755: PPUSH
69756: CALL_OW 275
69760: PUSH
69761: LD_VAR 0 1
69765: PPUSH
69766: LD_INT 3
69768: PPUSH
69769: CALL_OW 275
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: LIST
69778: ST_TO_ADDR
// end ;
69779: LD_VAR 0 2
69783: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69784: LD_INT 0
69786: PPUSH
69787: PPUSH
// result := array ;
69788: LD_ADDR_VAR 0 3
69792: PUSH
69793: LD_VAR 0 1
69797: ST_TO_ADDR
// if size >= result then
69798: LD_VAR 0 2
69802: PUSH
69803: LD_VAR 0 3
69807: GREATEREQUAL
69808: IFFALSE 69812
// exit ;
69810: GO 69862
// if size then
69812: LD_VAR 0 2
69816: IFFALSE 69862
// for i := array downto size do
69818: LD_ADDR_VAR 0 4
69822: PUSH
69823: DOUBLE
69824: LD_VAR 0 1
69828: INC
69829: ST_TO_ADDR
69830: LD_VAR 0 2
69834: PUSH
69835: FOR_DOWNTO
69836: IFFALSE 69860
// result := Delete ( result , result ) ;
69838: LD_ADDR_VAR 0 3
69842: PUSH
69843: LD_VAR 0 3
69847: PPUSH
69848: LD_VAR 0 3
69852: PPUSH
69853: CALL_OW 3
69857: ST_TO_ADDR
69858: GO 69835
69860: POP
69861: POP
// end ;
69862: LD_VAR 0 3
69866: RET
// export function ComExit ( unit ) ; var tmp ; begin
69867: LD_INT 0
69869: PPUSH
69870: PPUSH
// if not IsInUnit ( unit ) then
69871: LD_VAR 0 1
69875: PPUSH
69876: CALL_OW 310
69880: NOT
69881: IFFALSE 69885
// exit ;
69883: GO 69945
// tmp := IsInUnit ( unit ) ;
69885: LD_ADDR_VAR 0 3
69889: PUSH
69890: LD_VAR 0 1
69894: PPUSH
69895: CALL_OW 310
69899: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69900: LD_VAR 0 3
69904: PPUSH
69905: CALL_OW 247
69909: PUSH
69910: LD_INT 2
69912: EQUAL
69913: IFFALSE 69926
// ComExitVehicle ( unit ) else
69915: LD_VAR 0 1
69919: PPUSH
69920: CALL_OW 121
69924: GO 69935
// ComExitBuilding ( unit ) ;
69926: LD_VAR 0 1
69930: PPUSH
69931: CALL_OW 122
// result := tmp ;
69935: LD_ADDR_VAR 0 2
69939: PUSH
69940: LD_VAR 0 3
69944: ST_TO_ADDR
// end ;
69945: LD_VAR 0 2
69949: RET
// export function ComExitAll ( units ) ; var i ; begin
69950: LD_INT 0
69952: PPUSH
69953: PPUSH
// if not units then
69954: LD_VAR 0 1
69958: NOT
69959: IFFALSE 69963
// exit ;
69961: GO 69989
// for i in units do
69963: LD_ADDR_VAR 0 3
69967: PUSH
69968: LD_VAR 0 1
69972: PUSH
69973: FOR_IN
69974: IFFALSE 69987
// ComExit ( i ) ;
69976: LD_VAR 0 3
69980: PPUSH
69981: CALL 69867 0 1
69985: GO 69973
69987: POP
69988: POP
// end ;
69989: LD_VAR 0 2
69993: RET
// export function ResetHc ; begin
69994: LD_INT 0
69996: PPUSH
// InitHc ;
69997: CALL_OW 19
// hc_importance := 0 ;
70001: LD_ADDR_OWVAR 32
70005: PUSH
70006: LD_INT 0
70008: ST_TO_ADDR
// end ;
70009: LD_VAR 0 1
70013: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70014: LD_INT 0
70016: PPUSH
70017: PPUSH
70018: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70019: LD_ADDR_VAR 0 6
70023: PUSH
70024: LD_VAR 0 1
70028: PUSH
70029: LD_VAR 0 3
70033: PLUS
70034: PUSH
70035: LD_INT 2
70037: DIV
70038: ST_TO_ADDR
// if _x < 0 then
70039: LD_VAR 0 6
70043: PUSH
70044: LD_INT 0
70046: LESS
70047: IFFALSE 70064
// _x := _x * - 1 ;
70049: LD_ADDR_VAR 0 6
70053: PUSH
70054: LD_VAR 0 6
70058: PUSH
70059: LD_INT 1
70061: NEG
70062: MUL
70063: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70064: LD_ADDR_VAR 0 7
70068: PUSH
70069: LD_VAR 0 2
70073: PUSH
70074: LD_VAR 0 4
70078: PLUS
70079: PUSH
70080: LD_INT 2
70082: DIV
70083: ST_TO_ADDR
// if _y < 0 then
70084: LD_VAR 0 7
70088: PUSH
70089: LD_INT 0
70091: LESS
70092: IFFALSE 70109
// _y := _y * - 1 ;
70094: LD_ADDR_VAR 0 7
70098: PUSH
70099: LD_VAR 0 7
70103: PUSH
70104: LD_INT 1
70106: NEG
70107: MUL
70108: ST_TO_ADDR
// result := [ _x , _y ] ;
70109: LD_ADDR_VAR 0 5
70113: PUSH
70114: LD_VAR 0 6
70118: PUSH
70119: LD_VAR 0 7
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: ST_TO_ADDR
// end ;
70128: LD_VAR 0 5
70132: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70133: LD_INT 0
70135: PPUSH
70136: PPUSH
70137: PPUSH
70138: PPUSH
// task := GetTaskList ( unit ) ;
70139: LD_ADDR_VAR 0 7
70143: PUSH
70144: LD_VAR 0 1
70148: PPUSH
70149: CALL_OW 437
70153: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70154: LD_VAR 0 7
70158: NOT
70159: PUSH
70160: LD_VAR 0 1
70164: PPUSH
70165: LD_VAR 0 2
70169: PPUSH
70170: CALL_OW 308
70174: NOT
70175: AND
70176: IFFALSE 70180
// exit ;
70178: GO 70298
// if IsInArea ( unit , area ) then
70180: LD_VAR 0 1
70184: PPUSH
70185: LD_VAR 0 2
70189: PPUSH
70190: CALL_OW 308
70194: IFFALSE 70212
// begin ComMoveToArea ( unit , goAway ) ;
70196: LD_VAR 0 1
70200: PPUSH
70201: LD_VAR 0 3
70205: PPUSH
70206: CALL_OW 113
// exit ;
70210: GO 70298
// end ; if task [ 1 ] [ 1 ] <> M then
70212: LD_VAR 0 7
70216: PUSH
70217: LD_INT 1
70219: ARRAY
70220: PUSH
70221: LD_INT 1
70223: ARRAY
70224: PUSH
70225: LD_STRING M
70227: NONEQUAL
70228: IFFALSE 70232
// exit ;
70230: GO 70298
// x := task [ 1 ] [ 2 ] ;
70232: LD_ADDR_VAR 0 5
70236: PUSH
70237: LD_VAR 0 7
70241: PUSH
70242: LD_INT 1
70244: ARRAY
70245: PUSH
70246: LD_INT 2
70248: ARRAY
70249: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70250: LD_ADDR_VAR 0 6
70254: PUSH
70255: LD_VAR 0 7
70259: PUSH
70260: LD_INT 1
70262: ARRAY
70263: PUSH
70264: LD_INT 3
70266: ARRAY
70267: ST_TO_ADDR
// if InArea ( x , y , area ) then
70268: LD_VAR 0 5
70272: PPUSH
70273: LD_VAR 0 6
70277: PPUSH
70278: LD_VAR 0 2
70282: PPUSH
70283: CALL_OW 309
70287: IFFALSE 70298
// ComStop ( unit ) ;
70289: LD_VAR 0 1
70293: PPUSH
70294: CALL_OW 141
// end ;
70298: LD_VAR 0 4
70302: RET
// export function Abs ( value ) ; begin
70303: LD_INT 0
70305: PPUSH
// result := value ;
70306: LD_ADDR_VAR 0 2
70310: PUSH
70311: LD_VAR 0 1
70315: ST_TO_ADDR
// if value < 0 then
70316: LD_VAR 0 1
70320: PUSH
70321: LD_INT 0
70323: LESS
70324: IFFALSE 70341
// result := value * - 1 ;
70326: LD_ADDR_VAR 0 2
70330: PUSH
70331: LD_VAR 0 1
70335: PUSH
70336: LD_INT 1
70338: NEG
70339: MUL
70340: ST_TO_ADDR
// end ;
70341: LD_VAR 0 2
70345: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70346: LD_INT 0
70348: PPUSH
70349: PPUSH
70350: PPUSH
70351: PPUSH
70352: PPUSH
70353: PPUSH
70354: PPUSH
70355: PPUSH
// if not unit or not building then
70356: LD_VAR 0 1
70360: NOT
70361: PUSH
70362: LD_VAR 0 2
70366: NOT
70367: OR
70368: IFFALSE 70372
// exit ;
70370: GO 70598
// x := GetX ( building ) ;
70372: LD_ADDR_VAR 0 4
70376: PUSH
70377: LD_VAR 0 2
70381: PPUSH
70382: CALL_OW 250
70386: ST_TO_ADDR
// y := GetY ( building ) ;
70387: LD_ADDR_VAR 0 6
70391: PUSH
70392: LD_VAR 0 2
70396: PPUSH
70397: CALL_OW 251
70401: ST_TO_ADDR
// d := GetDir ( building ) ;
70402: LD_ADDR_VAR 0 8
70406: PUSH
70407: LD_VAR 0 2
70411: PPUSH
70412: CALL_OW 254
70416: ST_TO_ADDR
// r := 4 ;
70417: LD_ADDR_VAR 0 9
70421: PUSH
70422: LD_INT 4
70424: ST_TO_ADDR
// for i := 1 to 5 do
70425: LD_ADDR_VAR 0 10
70429: PUSH
70430: DOUBLE
70431: LD_INT 1
70433: DEC
70434: ST_TO_ADDR
70435: LD_INT 5
70437: PUSH
70438: FOR_TO
70439: IFFALSE 70596
// begin _x := ShiftX ( x , d , r + i ) ;
70441: LD_ADDR_VAR 0 5
70445: PUSH
70446: LD_VAR 0 4
70450: PPUSH
70451: LD_VAR 0 8
70455: PPUSH
70456: LD_VAR 0 9
70460: PUSH
70461: LD_VAR 0 10
70465: PLUS
70466: PPUSH
70467: CALL_OW 272
70471: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70472: LD_ADDR_VAR 0 7
70476: PUSH
70477: LD_VAR 0 6
70481: PPUSH
70482: LD_VAR 0 8
70486: PPUSH
70487: LD_VAR 0 9
70491: PUSH
70492: LD_VAR 0 10
70496: PLUS
70497: PPUSH
70498: CALL_OW 273
70502: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70503: LD_VAR 0 5
70507: PPUSH
70508: LD_VAR 0 7
70512: PPUSH
70513: CALL_OW 488
70517: PUSH
70518: LD_VAR 0 5
70522: PPUSH
70523: LD_VAR 0 7
70527: PPUSH
70528: CALL_OW 428
70532: PPUSH
70533: CALL_OW 247
70537: PUSH
70538: LD_INT 3
70540: PUSH
70541: LD_INT 2
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: IN
70548: NOT
70549: AND
70550: IFFALSE 70594
// begin ComMoveXY ( unit , _x , _y ) ;
70552: LD_VAR 0 1
70556: PPUSH
70557: LD_VAR 0 5
70561: PPUSH
70562: LD_VAR 0 7
70566: PPUSH
70567: CALL_OW 111
// result := [ _x , _y ] ;
70571: LD_ADDR_VAR 0 3
70575: PUSH
70576: LD_VAR 0 5
70580: PUSH
70581: LD_VAR 0 7
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: ST_TO_ADDR
// exit ;
70590: POP
70591: POP
70592: GO 70598
// end ; end ;
70594: GO 70438
70596: POP
70597: POP
// end ;
70598: LD_VAR 0 3
70602: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70603: LD_INT 0
70605: PPUSH
70606: PPUSH
70607: PPUSH
// result := 0 ;
70608: LD_ADDR_VAR 0 3
70612: PUSH
70613: LD_INT 0
70615: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70616: LD_VAR 0 1
70620: PUSH
70621: LD_INT 0
70623: LESS
70624: PUSH
70625: LD_VAR 0 1
70629: PUSH
70630: LD_INT 8
70632: GREATER
70633: OR
70634: PUSH
70635: LD_VAR 0 2
70639: PUSH
70640: LD_INT 0
70642: LESS
70643: OR
70644: PUSH
70645: LD_VAR 0 2
70649: PUSH
70650: LD_INT 8
70652: GREATER
70653: OR
70654: IFFALSE 70658
// exit ;
70656: GO 70733
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70658: LD_ADDR_VAR 0 4
70662: PUSH
70663: LD_INT 22
70665: PUSH
70666: LD_VAR 0 2
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PPUSH
70675: CALL_OW 69
70679: PUSH
70680: FOR_IN
70681: IFFALSE 70731
// begin un := UnitShoot ( i ) ;
70683: LD_ADDR_VAR 0 5
70687: PUSH
70688: LD_VAR 0 4
70692: PPUSH
70693: CALL_OW 504
70697: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70698: LD_VAR 0 5
70702: PPUSH
70703: CALL_OW 255
70707: PUSH
70708: LD_VAR 0 1
70712: EQUAL
70713: IFFALSE 70729
// begin result := un ;
70715: LD_ADDR_VAR 0 3
70719: PUSH
70720: LD_VAR 0 5
70724: ST_TO_ADDR
// exit ;
70725: POP
70726: POP
70727: GO 70733
// end ; end ;
70729: GO 70680
70731: POP
70732: POP
// end ;
70733: LD_VAR 0 3
70737: RET
// export function GetCargoBay ( units ) ; begin
70738: LD_INT 0
70740: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70741: LD_ADDR_VAR 0 2
70745: PUSH
70746: LD_VAR 0 1
70750: PPUSH
70751: LD_INT 2
70753: PUSH
70754: LD_INT 34
70756: PUSH
70757: LD_INT 12
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 34
70766: PUSH
70767: LD_INT 51
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 34
70776: PUSH
70777: LD_INT 32
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 34
70786: PUSH
70787: LD_INT 89
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: PPUSH
70801: CALL_OW 72
70805: ST_TO_ADDR
// end ;
70806: LD_VAR 0 2
70810: RET
// export function Negate ( value ) ; begin
70811: LD_INT 0
70813: PPUSH
// result := not value ;
70814: LD_ADDR_VAR 0 2
70818: PUSH
70819: LD_VAR 0 1
70823: NOT
70824: ST_TO_ADDR
// end ;
70825: LD_VAR 0 2
70829: RET
// export function Inc ( value ) ; begin
70830: LD_INT 0
70832: PPUSH
// result := value + 1 ;
70833: LD_ADDR_VAR 0 2
70837: PUSH
70838: LD_VAR 0 1
70842: PUSH
70843: LD_INT 1
70845: PLUS
70846: ST_TO_ADDR
// end ;
70847: LD_VAR 0 2
70851: RET
// export function Dec ( value ) ; begin
70852: LD_INT 0
70854: PPUSH
// result := value - 1 ;
70855: LD_ADDR_VAR 0 2
70859: PUSH
70860: LD_VAR 0 1
70864: PUSH
70865: LD_INT 1
70867: MINUS
70868: ST_TO_ADDR
// end ;
70869: LD_VAR 0 2
70873: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70874: LD_INT 0
70876: PPUSH
70877: PPUSH
70878: PPUSH
70879: PPUSH
70880: PPUSH
70881: PPUSH
70882: PPUSH
70883: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70884: LD_VAR 0 1
70888: PPUSH
70889: LD_VAR 0 2
70893: PPUSH
70894: CALL_OW 488
70898: NOT
70899: PUSH
70900: LD_VAR 0 3
70904: PPUSH
70905: LD_VAR 0 4
70909: PPUSH
70910: CALL_OW 488
70914: NOT
70915: OR
70916: IFFALSE 70929
// begin result := - 1 ;
70918: LD_ADDR_VAR 0 5
70922: PUSH
70923: LD_INT 1
70925: NEG
70926: ST_TO_ADDR
// exit ;
70927: GO 71164
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70929: LD_ADDR_VAR 0 12
70933: PUSH
70934: LD_VAR 0 1
70938: PPUSH
70939: LD_VAR 0 2
70943: PPUSH
70944: LD_VAR 0 3
70948: PPUSH
70949: LD_VAR 0 4
70953: PPUSH
70954: CALL 70014 0 4
70958: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70959: LD_ADDR_VAR 0 11
70963: PUSH
70964: LD_VAR 0 1
70968: PPUSH
70969: LD_VAR 0 2
70973: PPUSH
70974: LD_VAR 0 12
70978: PUSH
70979: LD_INT 1
70981: ARRAY
70982: PPUSH
70983: LD_VAR 0 12
70987: PUSH
70988: LD_INT 2
70990: ARRAY
70991: PPUSH
70992: CALL_OW 298
70996: ST_TO_ADDR
// distance := 9999 ;
70997: LD_ADDR_VAR 0 10
71001: PUSH
71002: LD_INT 9999
71004: ST_TO_ADDR
// for i := 0 to 5 do
71005: LD_ADDR_VAR 0 6
71009: PUSH
71010: DOUBLE
71011: LD_INT 0
71013: DEC
71014: ST_TO_ADDR
71015: LD_INT 5
71017: PUSH
71018: FOR_TO
71019: IFFALSE 71162
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71021: LD_ADDR_VAR 0 7
71025: PUSH
71026: LD_VAR 0 1
71030: PPUSH
71031: LD_VAR 0 6
71035: PPUSH
71036: LD_VAR 0 11
71040: PPUSH
71041: CALL_OW 272
71045: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71046: LD_ADDR_VAR 0 8
71050: PUSH
71051: LD_VAR 0 2
71055: PPUSH
71056: LD_VAR 0 6
71060: PPUSH
71061: LD_VAR 0 11
71065: PPUSH
71066: CALL_OW 273
71070: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71071: LD_VAR 0 7
71075: PPUSH
71076: LD_VAR 0 8
71080: PPUSH
71081: CALL_OW 488
71085: NOT
71086: IFFALSE 71090
// continue ;
71088: GO 71018
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71090: LD_ADDR_VAR 0 9
71094: PUSH
71095: LD_VAR 0 12
71099: PUSH
71100: LD_INT 1
71102: ARRAY
71103: PPUSH
71104: LD_VAR 0 12
71108: PUSH
71109: LD_INT 2
71111: ARRAY
71112: PPUSH
71113: LD_VAR 0 7
71117: PPUSH
71118: LD_VAR 0 8
71122: PPUSH
71123: CALL_OW 298
71127: ST_TO_ADDR
// if tmp < distance then
71128: LD_VAR 0 9
71132: PUSH
71133: LD_VAR 0 10
71137: LESS
71138: IFFALSE 71160
// begin result := i ;
71140: LD_ADDR_VAR 0 5
71144: PUSH
71145: LD_VAR 0 6
71149: ST_TO_ADDR
// distance := tmp ;
71150: LD_ADDR_VAR 0 10
71154: PUSH
71155: LD_VAR 0 9
71159: ST_TO_ADDR
// end ; end ;
71160: GO 71018
71162: POP
71163: POP
// end ;
71164: LD_VAR 0 5
71168: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71169: LD_INT 0
71171: PPUSH
71172: PPUSH
// if not driver or not IsInUnit ( driver ) then
71173: LD_VAR 0 1
71177: NOT
71178: PUSH
71179: LD_VAR 0 1
71183: PPUSH
71184: CALL_OW 310
71188: NOT
71189: OR
71190: IFFALSE 71194
// exit ;
71192: GO 71284
// vehicle := IsInUnit ( driver ) ;
71194: LD_ADDR_VAR 0 3
71198: PUSH
71199: LD_VAR 0 1
71203: PPUSH
71204: CALL_OW 310
71208: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71209: LD_VAR 0 1
71213: PPUSH
71214: LD_STRING \
71216: PUSH
71217: LD_INT 0
71219: PUSH
71220: LD_INT 0
71222: PUSH
71223: LD_INT 0
71225: PUSH
71226: LD_INT 0
71228: PUSH
71229: LD_INT 0
71231: PUSH
71232: LD_INT 0
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: PUSH
71244: LD_STRING E
71246: PUSH
71247: LD_INT 0
71249: PUSH
71250: LD_INT 0
71252: PUSH
71253: LD_VAR 0 3
71257: PUSH
71258: LD_INT 0
71260: PUSH
71261: LD_INT 0
71263: PUSH
71264: LD_INT 0
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PPUSH
71280: CALL_OW 446
// end ;
71284: LD_VAR 0 2
71288: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71289: LD_INT 0
71291: PPUSH
71292: PPUSH
// if not driver or not IsInUnit ( driver ) then
71293: LD_VAR 0 1
71297: NOT
71298: PUSH
71299: LD_VAR 0 1
71303: PPUSH
71304: CALL_OW 310
71308: NOT
71309: OR
71310: IFFALSE 71314
// exit ;
71312: GO 71404
// vehicle := IsInUnit ( driver ) ;
71314: LD_ADDR_VAR 0 3
71318: PUSH
71319: LD_VAR 0 1
71323: PPUSH
71324: CALL_OW 310
71328: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71329: LD_VAR 0 1
71333: PPUSH
71334: LD_STRING \
71336: PUSH
71337: LD_INT 0
71339: PUSH
71340: LD_INT 0
71342: PUSH
71343: LD_INT 0
71345: PUSH
71346: LD_INT 0
71348: PUSH
71349: LD_INT 0
71351: PUSH
71352: LD_INT 0
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: PUSH
71364: LD_STRING E
71366: PUSH
71367: LD_INT 0
71369: PUSH
71370: LD_INT 0
71372: PUSH
71373: LD_VAR 0 3
71377: PUSH
71378: LD_INT 0
71380: PUSH
71381: LD_INT 0
71383: PUSH
71384: LD_INT 0
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PPUSH
71400: CALL_OW 447
// end ;
71404: LD_VAR 0 2
71408: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71409: LD_INT 0
71411: PPUSH
71412: PPUSH
71413: PPUSH
// tmp := [ ] ;
71414: LD_ADDR_VAR 0 5
71418: PUSH
71419: EMPTY
71420: ST_TO_ADDR
// for i in units do
71421: LD_ADDR_VAR 0 4
71425: PUSH
71426: LD_VAR 0 1
71430: PUSH
71431: FOR_IN
71432: IFFALSE 71470
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71434: LD_ADDR_VAR 0 5
71438: PUSH
71439: LD_VAR 0 5
71443: PPUSH
71444: LD_VAR 0 5
71448: PUSH
71449: LD_INT 1
71451: PLUS
71452: PPUSH
71453: LD_VAR 0 4
71457: PPUSH
71458: CALL_OW 256
71462: PPUSH
71463: CALL_OW 2
71467: ST_TO_ADDR
71468: GO 71431
71470: POP
71471: POP
// if not tmp then
71472: LD_VAR 0 5
71476: NOT
71477: IFFALSE 71481
// exit ;
71479: GO 71529
// if asc then
71481: LD_VAR 0 2
71485: IFFALSE 71509
// result := SortListByListAsc ( units , tmp ) else
71487: LD_ADDR_VAR 0 3
71491: PUSH
71492: LD_VAR 0 1
71496: PPUSH
71497: LD_VAR 0 5
71501: PPUSH
71502: CALL_OW 76
71506: ST_TO_ADDR
71507: GO 71529
// result := SortListByListDesc ( units , tmp ) ;
71509: LD_ADDR_VAR 0 3
71513: PUSH
71514: LD_VAR 0 1
71518: PPUSH
71519: LD_VAR 0 5
71523: PPUSH
71524: CALL_OW 77
71528: ST_TO_ADDR
// end ;
71529: LD_VAR 0 3
71533: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71534: LD_INT 0
71536: PPUSH
71537: PPUSH
// task := GetTaskList ( mech ) ;
71538: LD_ADDR_VAR 0 4
71542: PUSH
71543: LD_VAR 0 1
71547: PPUSH
71548: CALL_OW 437
71552: ST_TO_ADDR
// if not task then
71553: LD_VAR 0 4
71557: NOT
71558: IFFALSE 71562
// exit ;
71560: GO 71604
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71562: LD_ADDR_VAR 0 3
71566: PUSH
71567: LD_VAR 0 4
71571: PUSH
71572: LD_INT 1
71574: ARRAY
71575: PUSH
71576: LD_INT 1
71578: ARRAY
71579: PUSH
71580: LD_STRING r
71582: EQUAL
71583: PUSH
71584: LD_VAR 0 4
71588: PUSH
71589: LD_INT 1
71591: ARRAY
71592: PUSH
71593: LD_INT 4
71595: ARRAY
71596: PUSH
71597: LD_VAR 0 2
71601: EQUAL
71602: AND
71603: ST_TO_ADDR
// end ;
71604: LD_VAR 0 3
71608: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71609: LD_INT 0
71611: PPUSH
// SetDir ( unit , d ) ;
71612: LD_VAR 0 1
71616: PPUSH
71617: LD_VAR 0 4
71621: PPUSH
71622: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71626: LD_VAR 0 1
71630: PPUSH
71631: LD_VAR 0 2
71635: PPUSH
71636: LD_VAR 0 3
71640: PPUSH
71641: LD_VAR 0 5
71645: PPUSH
71646: CALL_OW 48
// end ;
71650: LD_VAR 0 6
71654: RET
// export function ToNaturalNumber ( number ) ; begin
71655: LD_INT 0
71657: PPUSH
// result := number div 1 ;
71658: LD_ADDR_VAR 0 2
71662: PUSH
71663: LD_VAR 0 1
71667: PUSH
71668: LD_INT 1
71670: DIV
71671: ST_TO_ADDR
// if number < 0 then
71672: LD_VAR 0 1
71676: PUSH
71677: LD_INT 0
71679: LESS
71680: IFFALSE 71690
// result := 0 ;
71682: LD_ADDR_VAR 0 2
71686: PUSH
71687: LD_INT 0
71689: ST_TO_ADDR
// end ;
71690: LD_VAR 0 2
71694: RET
// export function SortByClass ( units , class ) ; var un ; begin
71695: LD_INT 0
71697: PPUSH
71698: PPUSH
// if not units or not class then
71699: LD_VAR 0 1
71703: NOT
71704: PUSH
71705: LD_VAR 0 2
71709: NOT
71710: OR
71711: IFFALSE 71715
// exit ;
71713: GO 71810
// result := [ ] ;
71715: LD_ADDR_VAR 0 3
71719: PUSH
71720: EMPTY
71721: ST_TO_ADDR
// for un in units do
71722: LD_ADDR_VAR 0 4
71726: PUSH
71727: LD_VAR 0 1
71731: PUSH
71732: FOR_IN
71733: IFFALSE 71808
// if GetClass ( un ) = class then
71735: LD_VAR 0 4
71739: PPUSH
71740: CALL_OW 257
71744: PUSH
71745: LD_VAR 0 2
71749: EQUAL
71750: IFFALSE 71777
// result := Insert ( result , 1 , un ) else
71752: LD_ADDR_VAR 0 3
71756: PUSH
71757: LD_VAR 0 3
71761: PPUSH
71762: LD_INT 1
71764: PPUSH
71765: LD_VAR 0 4
71769: PPUSH
71770: CALL_OW 2
71774: ST_TO_ADDR
71775: GO 71806
// result := Replace ( result , result + 1 , un ) ;
71777: LD_ADDR_VAR 0 3
71781: PUSH
71782: LD_VAR 0 3
71786: PPUSH
71787: LD_VAR 0 3
71791: PUSH
71792: LD_INT 1
71794: PLUS
71795: PPUSH
71796: LD_VAR 0 4
71800: PPUSH
71801: CALL_OW 1
71805: ST_TO_ADDR
71806: GO 71732
71808: POP
71809: POP
// end ;
71810: LD_VAR 0 3
71814: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71815: LD_INT 0
71817: PPUSH
71818: PPUSH
71819: PPUSH
71820: PPUSH
71821: PPUSH
71822: PPUSH
71823: PPUSH
// result := [ ] ;
71824: LD_ADDR_VAR 0 4
71828: PUSH
71829: EMPTY
71830: ST_TO_ADDR
// if x - r < 0 then
71831: LD_VAR 0 1
71835: PUSH
71836: LD_VAR 0 3
71840: MINUS
71841: PUSH
71842: LD_INT 0
71844: LESS
71845: IFFALSE 71857
// min_x := 0 else
71847: LD_ADDR_VAR 0 8
71851: PUSH
71852: LD_INT 0
71854: ST_TO_ADDR
71855: GO 71873
// min_x := x - r ;
71857: LD_ADDR_VAR 0 8
71861: PUSH
71862: LD_VAR 0 1
71866: PUSH
71867: LD_VAR 0 3
71871: MINUS
71872: ST_TO_ADDR
// if y - r < 0 then
71873: LD_VAR 0 2
71877: PUSH
71878: LD_VAR 0 3
71882: MINUS
71883: PUSH
71884: LD_INT 0
71886: LESS
71887: IFFALSE 71899
// min_y := 0 else
71889: LD_ADDR_VAR 0 7
71893: PUSH
71894: LD_INT 0
71896: ST_TO_ADDR
71897: GO 71915
// min_y := y - r ;
71899: LD_ADDR_VAR 0 7
71903: PUSH
71904: LD_VAR 0 2
71908: PUSH
71909: LD_VAR 0 3
71913: MINUS
71914: ST_TO_ADDR
// max_x := x + r ;
71915: LD_ADDR_VAR 0 9
71919: PUSH
71920: LD_VAR 0 1
71924: PUSH
71925: LD_VAR 0 3
71929: PLUS
71930: ST_TO_ADDR
// max_y := y + r ;
71931: LD_ADDR_VAR 0 10
71935: PUSH
71936: LD_VAR 0 2
71940: PUSH
71941: LD_VAR 0 3
71945: PLUS
71946: ST_TO_ADDR
// for _x = min_x to max_x do
71947: LD_ADDR_VAR 0 5
71951: PUSH
71952: DOUBLE
71953: LD_VAR 0 8
71957: DEC
71958: ST_TO_ADDR
71959: LD_VAR 0 9
71963: PUSH
71964: FOR_TO
71965: IFFALSE 72066
// for _y = min_y to max_y do
71967: LD_ADDR_VAR 0 6
71971: PUSH
71972: DOUBLE
71973: LD_VAR 0 7
71977: DEC
71978: ST_TO_ADDR
71979: LD_VAR 0 10
71983: PUSH
71984: FOR_TO
71985: IFFALSE 72062
// begin if not ValidHex ( _x , _y ) then
71987: LD_VAR 0 5
71991: PPUSH
71992: LD_VAR 0 6
71996: PPUSH
71997: CALL_OW 488
72001: NOT
72002: IFFALSE 72006
// continue ;
72004: GO 71984
// if GetResourceTypeXY ( _x , _y ) then
72006: LD_VAR 0 5
72010: PPUSH
72011: LD_VAR 0 6
72015: PPUSH
72016: CALL_OW 283
72020: IFFALSE 72060
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72022: LD_ADDR_VAR 0 4
72026: PUSH
72027: LD_VAR 0 4
72031: PPUSH
72032: LD_VAR 0 4
72036: PUSH
72037: LD_INT 1
72039: PLUS
72040: PPUSH
72041: LD_VAR 0 5
72045: PUSH
72046: LD_VAR 0 6
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PPUSH
72055: CALL_OW 1
72059: ST_TO_ADDR
// end ;
72060: GO 71984
72062: POP
72063: POP
72064: GO 71964
72066: POP
72067: POP
// end ;
72068: LD_VAR 0 4
72072: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72073: LD_INT 0
72075: PPUSH
72076: PPUSH
72077: PPUSH
72078: PPUSH
72079: PPUSH
72080: PPUSH
72081: PPUSH
72082: PPUSH
// if not units then
72083: LD_VAR 0 1
72087: NOT
72088: IFFALSE 72092
// exit ;
72090: GO 72616
// result := UnitFilter ( units , [ f_ok ] ) ;
72092: LD_ADDR_VAR 0 3
72096: PUSH
72097: LD_VAR 0 1
72101: PPUSH
72102: LD_INT 50
72104: PUSH
72105: EMPTY
72106: LIST
72107: PPUSH
72108: CALL_OW 72
72112: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72113: LD_ADDR_VAR 0 8
72117: PUSH
72118: LD_VAR 0 1
72122: PUSH
72123: LD_INT 1
72125: ARRAY
72126: PPUSH
72127: CALL_OW 255
72131: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72132: LD_ADDR_VAR 0 10
72136: PUSH
72137: LD_INT 29
72139: PUSH
72140: LD_INT 91
72142: PUSH
72143: LD_INT 49
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: LIST
72150: ST_TO_ADDR
// if not result then
72151: LD_VAR 0 3
72155: NOT
72156: IFFALSE 72160
// exit ;
72158: GO 72616
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72160: LD_ADDR_VAR 0 5
72164: PUSH
72165: LD_INT 81
72167: PUSH
72168: LD_VAR 0 8
72172: PUSH
72173: EMPTY
72174: LIST
72175: LIST
72176: PPUSH
72177: CALL_OW 69
72181: ST_TO_ADDR
// for i in result do
72182: LD_ADDR_VAR 0 4
72186: PUSH
72187: LD_VAR 0 3
72191: PUSH
72192: FOR_IN
72193: IFFALSE 72614
// begin tag := GetTag ( i ) + 1 ;
72195: LD_ADDR_VAR 0 9
72199: PUSH
72200: LD_VAR 0 4
72204: PPUSH
72205: CALL_OW 110
72209: PUSH
72210: LD_INT 1
72212: PLUS
72213: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72214: LD_ADDR_VAR 0 7
72218: PUSH
72219: LD_VAR 0 4
72223: PPUSH
72224: CALL_OW 250
72228: PPUSH
72229: LD_VAR 0 4
72233: PPUSH
72234: CALL_OW 251
72238: PPUSH
72239: LD_INT 6
72241: PPUSH
72242: CALL 71815 0 3
72246: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72247: LD_VAR 0 4
72251: PPUSH
72252: CALL_OW 247
72256: PUSH
72257: LD_INT 2
72259: EQUAL
72260: PUSH
72261: LD_VAR 0 7
72265: AND
72266: PUSH
72267: LD_VAR 0 4
72271: PPUSH
72272: CALL_OW 264
72276: PUSH
72277: LD_VAR 0 10
72281: IN
72282: NOT
72283: AND
72284: IFFALSE 72323
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72286: LD_VAR 0 4
72290: PPUSH
72291: LD_VAR 0 7
72295: PUSH
72296: LD_INT 1
72298: ARRAY
72299: PUSH
72300: LD_INT 1
72302: ARRAY
72303: PPUSH
72304: LD_VAR 0 7
72308: PUSH
72309: LD_INT 1
72311: ARRAY
72312: PUSH
72313: LD_INT 2
72315: ARRAY
72316: PPUSH
72317: CALL_OW 116
72321: GO 72612
// if path > tag then
72323: LD_VAR 0 2
72327: PUSH
72328: LD_VAR 0 9
72332: GREATER
72333: IFFALSE 72541
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72335: LD_ADDR_VAR 0 6
72339: PUSH
72340: LD_VAR 0 5
72344: PPUSH
72345: LD_INT 91
72347: PUSH
72348: LD_VAR 0 4
72352: PUSH
72353: LD_INT 8
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: LIST
72360: PPUSH
72361: CALL_OW 72
72365: ST_TO_ADDR
// if nearEnemy then
72366: LD_VAR 0 6
72370: IFFALSE 72439
// begin if GetWeapon ( i ) = ru_time_lapser then
72372: LD_VAR 0 4
72376: PPUSH
72377: CALL_OW 264
72381: PUSH
72382: LD_INT 49
72384: EQUAL
72385: IFFALSE 72413
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72387: LD_VAR 0 4
72391: PPUSH
72392: LD_VAR 0 6
72396: PPUSH
72397: LD_VAR 0 4
72401: PPUSH
72402: CALL_OW 74
72406: PPUSH
72407: CALL_OW 112
72411: GO 72437
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72413: LD_VAR 0 4
72417: PPUSH
72418: LD_VAR 0 6
72422: PPUSH
72423: LD_VAR 0 4
72427: PPUSH
72428: CALL_OW 74
72432: PPUSH
72433: CALL 73541 0 2
// end else
72437: GO 72539
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72439: LD_VAR 0 4
72443: PPUSH
72444: LD_VAR 0 2
72448: PUSH
72449: LD_VAR 0 9
72453: ARRAY
72454: PUSH
72455: LD_INT 1
72457: ARRAY
72458: PPUSH
72459: LD_VAR 0 2
72463: PUSH
72464: LD_VAR 0 9
72468: ARRAY
72469: PUSH
72470: LD_INT 2
72472: ARRAY
72473: PPUSH
72474: CALL_OW 297
72478: PUSH
72479: LD_INT 6
72481: GREATER
72482: IFFALSE 72525
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72484: LD_VAR 0 4
72488: PPUSH
72489: LD_VAR 0 2
72493: PUSH
72494: LD_VAR 0 9
72498: ARRAY
72499: PUSH
72500: LD_INT 1
72502: ARRAY
72503: PPUSH
72504: LD_VAR 0 2
72508: PUSH
72509: LD_VAR 0 9
72513: ARRAY
72514: PUSH
72515: LD_INT 2
72517: ARRAY
72518: PPUSH
72519: CALL_OW 114
72523: GO 72539
// SetTag ( i , tag ) ;
72525: LD_VAR 0 4
72529: PPUSH
72530: LD_VAR 0 9
72534: PPUSH
72535: CALL_OW 109
// end else
72539: GO 72612
// if enemy then
72541: LD_VAR 0 5
72545: IFFALSE 72612
// begin if GetWeapon ( i ) = ru_time_lapser then
72547: LD_VAR 0 4
72551: PPUSH
72552: CALL_OW 264
72556: PUSH
72557: LD_INT 49
72559: EQUAL
72560: IFFALSE 72588
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72562: LD_VAR 0 4
72566: PPUSH
72567: LD_VAR 0 5
72571: PPUSH
72572: LD_VAR 0 4
72576: PPUSH
72577: CALL_OW 74
72581: PPUSH
72582: CALL_OW 112
72586: GO 72612
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72588: LD_VAR 0 4
72592: PPUSH
72593: LD_VAR 0 5
72597: PPUSH
72598: LD_VAR 0 4
72602: PPUSH
72603: CALL_OW 74
72607: PPUSH
72608: CALL 73541 0 2
// end ; end ;
72612: GO 72192
72614: POP
72615: POP
// end ;
72616: LD_VAR 0 3
72620: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72621: LD_INT 0
72623: PPUSH
72624: PPUSH
72625: PPUSH
// if not unit or IsInUnit ( unit ) then
72626: LD_VAR 0 1
72630: NOT
72631: PUSH
72632: LD_VAR 0 1
72636: PPUSH
72637: CALL_OW 310
72641: OR
72642: IFFALSE 72646
// exit ;
72644: GO 72737
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72646: LD_ADDR_VAR 0 4
72650: PUSH
72651: LD_VAR 0 1
72655: PPUSH
72656: CALL_OW 250
72660: PPUSH
72661: LD_VAR 0 2
72665: PPUSH
72666: LD_INT 1
72668: PPUSH
72669: CALL_OW 272
72673: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72674: LD_ADDR_VAR 0 5
72678: PUSH
72679: LD_VAR 0 1
72683: PPUSH
72684: CALL_OW 251
72688: PPUSH
72689: LD_VAR 0 2
72693: PPUSH
72694: LD_INT 1
72696: PPUSH
72697: CALL_OW 273
72701: ST_TO_ADDR
// if ValidHex ( x , y ) then
72702: LD_VAR 0 4
72706: PPUSH
72707: LD_VAR 0 5
72711: PPUSH
72712: CALL_OW 488
72716: IFFALSE 72737
// ComTurnXY ( unit , x , y ) ;
72718: LD_VAR 0 1
72722: PPUSH
72723: LD_VAR 0 4
72727: PPUSH
72728: LD_VAR 0 5
72732: PPUSH
72733: CALL_OW 118
// end ;
72737: LD_VAR 0 3
72741: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72742: LD_INT 0
72744: PPUSH
72745: PPUSH
// result := false ;
72746: LD_ADDR_VAR 0 3
72750: PUSH
72751: LD_INT 0
72753: ST_TO_ADDR
// if not units then
72754: LD_VAR 0 2
72758: NOT
72759: IFFALSE 72763
// exit ;
72761: GO 72808
// for i in units do
72763: LD_ADDR_VAR 0 4
72767: PUSH
72768: LD_VAR 0 2
72772: PUSH
72773: FOR_IN
72774: IFFALSE 72806
// if See ( side , i ) then
72776: LD_VAR 0 1
72780: PPUSH
72781: LD_VAR 0 4
72785: PPUSH
72786: CALL_OW 292
72790: IFFALSE 72804
// begin result := true ;
72792: LD_ADDR_VAR 0 3
72796: PUSH
72797: LD_INT 1
72799: ST_TO_ADDR
// exit ;
72800: POP
72801: POP
72802: GO 72808
// end ;
72804: GO 72773
72806: POP
72807: POP
// end ;
72808: LD_VAR 0 3
72812: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72813: LD_INT 0
72815: PPUSH
72816: PPUSH
72817: PPUSH
72818: PPUSH
// if not unit or not points then
72819: LD_VAR 0 1
72823: NOT
72824: PUSH
72825: LD_VAR 0 2
72829: NOT
72830: OR
72831: IFFALSE 72835
// exit ;
72833: GO 72925
// dist := 99999 ;
72835: LD_ADDR_VAR 0 5
72839: PUSH
72840: LD_INT 99999
72842: ST_TO_ADDR
// for i in points do
72843: LD_ADDR_VAR 0 4
72847: PUSH
72848: LD_VAR 0 2
72852: PUSH
72853: FOR_IN
72854: IFFALSE 72923
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72856: LD_ADDR_VAR 0 6
72860: PUSH
72861: LD_VAR 0 1
72865: PPUSH
72866: LD_VAR 0 4
72870: PUSH
72871: LD_INT 1
72873: ARRAY
72874: PPUSH
72875: LD_VAR 0 4
72879: PUSH
72880: LD_INT 2
72882: ARRAY
72883: PPUSH
72884: CALL_OW 297
72888: ST_TO_ADDR
// if tmpDist < dist then
72889: LD_VAR 0 6
72893: PUSH
72894: LD_VAR 0 5
72898: LESS
72899: IFFALSE 72921
// begin result := i ;
72901: LD_ADDR_VAR 0 3
72905: PUSH
72906: LD_VAR 0 4
72910: ST_TO_ADDR
// dist := tmpDist ;
72911: LD_ADDR_VAR 0 5
72915: PUSH
72916: LD_VAR 0 6
72920: ST_TO_ADDR
// end ; end ;
72921: GO 72853
72923: POP
72924: POP
// end ;
72925: LD_VAR 0 3
72929: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72930: LD_INT 0
72932: PPUSH
// uc_side := side ;
72933: LD_ADDR_OWVAR 20
72937: PUSH
72938: LD_VAR 0 1
72942: ST_TO_ADDR
// uc_nation := 3 ;
72943: LD_ADDR_OWVAR 21
72947: PUSH
72948: LD_INT 3
72950: ST_TO_ADDR
// vc_chassis := 25 ;
72951: LD_ADDR_OWVAR 37
72955: PUSH
72956: LD_INT 25
72958: ST_TO_ADDR
// vc_engine := engine_siberite ;
72959: LD_ADDR_OWVAR 39
72963: PUSH
72964: LD_INT 3
72966: ST_TO_ADDR
// vc_control := control_computer ;
72967: LD_ADDR_OWVAR 38
72971: PUSH
72972: LD_INT 3
72974: ST_TO_ADDR
// vc_weapon := 59 ;
72975: LD_ADDR_OWVAR 40
72979: PUSH
72980: LD_INT 59
72982: ST_TO_ADDR
// result := CreateVehicle ;
72983: LD_ADDR_VAR 0 5
72987: PUSH
72988: CALL_OW 45
72992: ST_TO_ADDR
// SetDir ( result , d ) ;
72993: LD_VAR 0 5
72997: PPUSH
72998: LD_VAR 0 4
73002: PPUSH
73003: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73007: LD_VAR 0 5
73011: PPUSH
73012: LD_VAR 0 2
73016: PPUSH
73017: LD_VAR 0 3
73021: PPUSH
73022: LD_INT 0
73024: PPUSH
73025: CALL_OW 48
// end ;
73029: LD_VAR 0 5
73033: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73034: LD_INT 0
73036: PPUSH
73037: PPUSH
73038: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73039: LD_ADDR_VAR 0 2
73043: PUSH
73044: LD_INT 0
73046: PUSH
73047: LD_INT 0
73049: PUSH
73050: LD_INT 0
73052: PUSH
73053: LD_INT 0
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73062: LD_VAR 0 1
73066: NOT
73067: PUSH
73068: LD_VAR 0 1
73072: PPUSH
73073: CALL_OW 264
73077: PUSH
73078: LD_INT 12
73080: PUSH
73081: LD_INT 51
73083: PUSH
73084: LD_INT 32
73086: PUSH
73087: LD_INT 89
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: IN
73096: NOT
73097: OR
73098: IFFALSE 73102
// exit ;
73100: GO 73200
// for i := 1 to 3 do
73102: LD_ADDR_VAR 0 3
73106: PUSH
73107: DOUBLE
73108: LD_INT 1
73110: DEC
73111: ST_TO_ADDR
73112: LD_INT 3
73114: PUSH
73115: FOR_TO
73116: IFFALSE 73198
// begin tmp := GetCargo ( cargo , i ) ;
73118: LD_ADDR_VAR 0 4
73122: PUSH
73123: LD_VAR 0 1
73127: PPUSH
73128: LD_VAR 0 3
73132: PPUSH
73133: CALL_OW 289
73137: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73138: LD_ADDR_VAR 0 2
73142: PUSH
73143: LD_VAR 0 2
73147: PPUSH
73148: LD_VAR 0 3
73152: PPUSH
73153: LD_VAR 0 4
73157: PPUSH
73158: CALL_OW 1
73162: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73163: LD_ADDR_VAR 0 2
73167: PUSH
73168: LD_VAR 0 2
73172: PPUSH
73173: LD_INT 4
73175: PPUSH
73176: LD_VAR 0 2
73180: PUSH
73181: LD_INT 4
73183: ARRAY
73184: PUSH
73185: LD_VAR 0 4
73189: PLUS
73190: PPUSH
73191: CALL_OW 1
73195: ST_TO_ADDR
// end ;
73196: GO 73115
73198: POP
73199: POP
// end ;
73200: LD_VAR 0 2
73204: RET
// export function Length ( array ) ; begin
73205: LD_INT 0
73207: PPUSH
// result := array + 0 ;
73208: LD_ADDR_VAR 0 2
73212: PUSH
73213: LD_VAR 0 1
73217: PUSH
73218: LD_INT 0
73220: PLUS
73221: ST_TO_ADDR
// end ;
73222: LD_VAR 0 2
73226: RET
// export function PrepareArray ( array ) ; begin
73227: LD_INT 0
73229: PPUSH
// result := array diff 0 ;
73230: LD_ADDR_VAR 0 2
73234: PUSH
73235: LD_VAR 0 1
73239: PUSH
73240: LD_INT 0
73242: DIFF
73243: ST_TO_ADDR
// if not result [ 1 ] then
73244: LD_VAR 0 2
73248: PUSH
73249: LD_INT 1
73251: ARRAY
73252: NOT
73253: IFFALSE 73273
// result := Delete ( result , 1 ) ;
73255: LD_ADDR_VAR 0 2
73259: PUSH
73260: LD_VAR 0 2
73264: PPUSH
73265: LD_INT 1
73267: PPUSH
73268: CALL_OW 3
73272: ST_TO_ADDR
// end ;
73273: LD_VAR 0 2
73277: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73278: LD_INT 0
73280: PPUSH
73281: PPUSH
73282: PPUSH
73283: PPUSH
// sibRocketRange := 25 ;
73284: LD_ADDR_VAR 0 6
73288: PUSH
73289: LD_INT 25
73291: ST_TO_ADDR
// result := false ;
73292: LD_ADDR_VAR 0 4
73296: PUSH
73297: LD_INT 0
73299: ST_TO_ADDR
// for i := 0 to 5 do
73300: LD_ADDR_VAR 0 5
73304: PUSH
73305: DOUBLE
73306: LD_INT 0
73308: DEC
73309: ST_TO_ADDR
73310: LD_INT 5
73312: PUSH
73313: FOR_TO
73314: IFFALSE 73381
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73316: LD_VAR 0 1
73320: PPUSH
73321: LD_VAR 0 5
73325: PPUSH
73326: LD_VAR 0 6
73330: PPUSH
73331: CALL_OW 272
73335: PPUSH
73336: LD_VAR 0 2
73340: PPUSH
73341: LD_VAR 0 5
73345: PPUSH
73346: LD_VAR 0 6
73350: PPUSH
73351: CALL_OW 273
73355: PPUSH
73356: LD_VAR 0 3
73360: PPUSH
73361: CALL_OW 309
73365: IFFALSE 73379
// begin result := true ;
73367: LD_ADDR_VAR 0 4
73371: PUSH
73372: LD_INT 1
73374: ST_TO_ADDR
// exit ;
73375: POP
73376: POP
73377: GO 73383
// end ;
73379: GO 73313
73381: POP
73382: POP
// end ;
73383: LD_VAR 0 4
73387: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73388: LD_INT 0
73390: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73391: LD_VAR 0 1
73395: PPUSH
73396: LD_VAR 0 2
73400: PPUSH
73401: LD_INT 0
73403: PPUSH
73404: LD_INT 0
73406: PPUSH
73407: LD_INT 1
73409: PPUSH
73410: LD_INT 0
73412: PPUSH
73413: CALL_OW 587
// end ;
73417: LD_VAR 0 3
73421: RET
// export function CenterOnNow ( unit ) ; begin
73422: LD_INT 0
73424: PPUSH
// result := IsInUnit ( unit ) ;
73425: LD_ADDR_VAR 0 2
73429: PUSH
73430: LD_VAR 0 1
73434: PPUSH
73435: CALL_OW 310
73439: ST_TO_ADDR
// if not result then
73440: LD_VAR 0 2
73444: NOT
73445: IFFALSE 73457
// result := unit ;
73447: LD_ADDR_VAR 0 2
73451: PUSH
73452: LD_VAR 0 1
73456: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73457: LD_VAR 0 1
73461: PPUSH
73462: CALL_OW 87
// end ;
73466: LD_VAR 0 2
73470: RET
// export function ComMoveHex ( unit , hex ) ; begin
73471: LD_INT 0
73473: PPUSH
// if not hex then
73474: LD_VAR 0 2
73478: NOT
73479: IFFALSE 73483
// exit ;
73481: GO 73536
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73483: LD_VAR 0 2
73487: PUSH
73488: LD_INT 1
73490: ARRAY
73491: PPUSH
73492: LD_VAR 0 2
73496: PUSH
73497: LD_INT 2
73499: ARRAY
73500: PPUSH
73501: CALL_OW 428
73505: IFFALSE 73509
// exit ;
73507: GO 73536
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73509: LD_VAR 0 1
73513: PPUSH
73514: LD_VAR 0 2
73518: PUSH
73519: LD_INT 1
73521: ARRAY
73522: PPUSH
73523: LD_VAR 0 2
73527: PUSH
73528: LD_INT 2
73530: ARRAY
73531: PPUSH
73532: CALL_OW 111
// end ;
73536: LD_VAR 0 3
73540: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73541: LD_INT 0
73543: PPUSH
73544: PPUSH
73545: PPUSH
// if not unit or not enemy then
73546: LD_VAR 0 1
73550: NOT
73551: PUSH
73552: LD_VAR 0 2
73556: NOT
73557: OR
73558: IFFALSE 73562
// exit ;
73560: GO 73686
// x := GetX ( enemy ) ;
73562: LD_ADDR_VAR 0 4
73566: PUSH
73567: LD_VAR 0 2
73571: PPUSH
73572: CALL_OW 250
73576: ST_TO_ADDR
// y := GetY ( enemy ) ;
73577: LD_ADDR_VAR 0 5
73581: PUSH
73582: LD_VAR 0 2
73586: PPUSH
73587: CALL_OW 251
73591: ST_TO_ADDR
// if ValidHex ( x , y ) then
73592: LD_VAR 0 4
73596: PPUSH
73597: LD_VAR 0 5
73601: PPUSH
73602: CALL_OW 488
73606: IFFALSE 73686
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73608: LD_VAR 0 2
73612: PPUSH
73613: CALL_OW 247
73617: PUSH
73618: LD_INT 3
73620: PUSH
73621: LD_INT 2
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: IN
73628: PUSH
73629: LD_VAR 0 1
73633: PPUSH
73634: CALL_OW 255
73638: PPUSH
73639: LD_VAR 0 2
73643: PPUSH
73644: CALL_OW 292
73648: OR
73649: IFFALSE 73667
// ComAttackUnit ( unit , enemy ) else
73651: LD_VAR 0 1
73655: PPUSH
73656: LD_VAR 0 2
73660: PPUSH
73661: CALL_OW 115
73665: GO 73686
// ComAgressiveMove ( unit , x , y ) ;
73667: LD_VAR 0 1
73671: PPUSH
73672: LD_VAR 0 4
73676: PPUSH
73677: LD_VAR 0 5
73681: PPUSH
73682: CALL_OW 114
// end ;
73686: LD_VAR 0 3
73690: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73691: LD_INT 0
73693: PPUSH
73694: PPUSH
73695: PPUSH
// list := AreaToList ( area , 0 ) ;
73696: LD_ADDR_VAR 0 5
73700: PUSH
73701: LD_VAR 0 1
73705: PPUSH
73706: LD_INT 0
73708: PPUSH
73709: CALL_OW 517
73713: ST_TO_ADDR
// if not list then
73714: LD_VAR 0 5
73718: NOT
73719: IFFALSE 73723
// exit ;
73721: GO 73853
// if all then
73723: LD_VAR 0 2
73727: IFFALSE 73815
// begin for i := 1 to list [ 1 ] do
73729: LD_ADDR_VAR 0 4
73733: PUSH
73734: DOUBLE
73735: LD_INT 1
73737: DEC
73738: ST_TO_ADDR
73739: LD_VAR 0 5
73743: PUSH
73744: LD_INT 1
73746: ARRAY
73747: PUSH
73748: FOR_TO
73749: IFFALSE 73811
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73751: LD_ADDR_VAR 0 3
73755: PUSH
73756: LD_VAR 0 3
73760: PPUSH
73761: LD_VAR 0 3
73765: PUSH
73766: LD_INT 1
73768: PLUS
73769: PPUSH
73770: LD_VAR 0 5
73774: PUSH
73775: LD_INT 1
73777: ARRAY
73778: PUSH
73779: LD_VAR 0 4
73783: ARRAY
73784: PUSH
73785: LD_VAR 0 5
73789: PUSH
73790: LD_INT 2
73792: ARRAY
73793: PUSH
73794: LD_VAR 0 4
73798: ARRAY
73799: PUSH
73800: EMPTY
73801: LIST
73802: LIST
73803: PPUSH
73804: CALL_OW 1
73808: ST_TO_ADDR
73809: GO 73748
73811: POP
73812: POP
// exit ;
73813: GO 73853
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73815: LD_ADDR_VAR 0 3
73819: PUSH
73820: LD_VAR 0 5
73824: PUSH
73825: LD_INT 1
73827: ARRAY
73828: PUSH
73829: LD_INT 1
73831: ARRAY
73832: PUSH
73833: LD_VAR 0 5
73837: PUSH
73838: LD_INT 2
73840: ARRAY
73841: PUSH
73842: LD_INT 1
73844: ARRAY
73845: PUSH
73846: EMPTY
73847: LIST
73848: LIST
73849: PUSH
73850: EMPTY
73851: LIST
73852: ST_TO_ADDR
// end ;
73853: LD_VAR 0 3
73857: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73858: LD_INT 0
73860: PPUSH
73861: PPUSH
// list := AreaToList ( area , 0 ) ;
73862: LD_ADDR_VAR 0 4
73866: PUSH
73867: LD_VAR 0 1
73871: PPUSH
73872: LD_INT 0
73874: PPUSH
73875: CALL_OW 517
73879: ST_TO_ADDR
// if not list then
73880: LD_VAR 0 4
73884: NOT
73885: IFFALSE 73889
// exit ;
73887: GO 73930
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73889: LD_ADDR_VAR 0 3
73893: PUSH
73894: LD_VAR 0 4
73898: PUSH
73899: LD_INT 1
73901: ARRAY
73902: PUSH
73903: LD_INT 1
73905: ARRAY
73906: PUSH
73907: LD_VAR 0 4
73911: PUSH
73912: LD_INT 2
73914: ARRAY
73915: PUSH
73916: LD_INT 1
73918: ARRAY
73919: PUSH
73920: LD_VAR 0 2
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: LIST
73929: ST_TO_ADDR
// end ;
73930: LD_VAR 0 3
73934: RET
// export function First ( array ) ; begin
73935: LD_INT 0
73937: PPUSH
// if not array then
73938: LD_VAR 0 1
73942: NOT
73943: IFFALSE 73947
// exit ;
73945: GO 73961
// result := array [ 1 ] ;
73947: LD_ADDR_VAR 0 2
73951: PUSH
73952: LD_VAR 0 1
73956: PUSH
73957: LD_INT 1
73959: ARRAY
73960: ST_TO_ADDR
// end ;
73961: LD_VAR 0 2
73965: RET
// export function Last ( array ) ; begin
73966: LD_INT 0
73968: PPUSH
// if not array then
73969: LD_VAR 0 1
73973: NOT
73974: IFFALSE 73978
// exit ;
73976: GO 73994
// result := array [ array ] ;
73978: LD_ADDR_VAR 0 2
73982: PUSH
73983: LD_VAR 0 1
73987: PUSH
73988: LD_VAR 0 1
73992: ARRAY
73993: ST_TO_ADDR
// end ;
73994: LD_VAR 0 2
73998: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73999: LD_INT 0
74001: PPUSH
74002: PPUSH
// result := [ ] ;
74003: LD_ADDR_VAR 0 5
74007: PUSH
74008: EMPTY
74009: ST_TO_ADDR
// if not array then
74010: LD_VAR 0 1
74014: NOT
74015: IFFALSE 74019
// exit ;
74017: GO 74131
// for i := 1 to array do
74019: LD_ADDR_VAR 0 6
74023: PUSH
74024: DOUBLE
74025: LD_INT 1
74027: DEC
74028: ST_TO_ADDR
74029: LD_VAR 0 1
74033: PUSH
74034: FOR_TO
74035: IFFALSE 74129
// if array [ i ] [ index ] = value then
74037: LD_VAR 0 1
74041: PUSH
74042: LD_VAR 0 6
74046: ARRAY
74047: PUSH
74048: LD_VAR 0 2
74052: ARRAY
74053: PUSH
74054: LD_VAR 0 3
74058: EQUAL
74059: IFFALSE 74127
// begin if indexColumn then
74061: LD_VAR 0 4
74065: IFFALSE 74101
// result := Join ( result , array [ i ] [ indexColumn ] ) else
74067: LD_ADDR_VAR 0 5
74071: PUSH
74072: LD_VAR 0 5
74076: PPUSH
74077: LD_VAR 0 1
74081: PUSH
74082: LD_VAR 0 6
74086: ARRAY
74087: PUSH
74088: LD_VAR 0 4
74092: ARRAY
74093: PPUSH
74094: CALL 69469 0 2
74098: ST_TO_ADDR
74099: GO 74127
// result := Join ( result , array [ i ] ) ;
74101: LD_ADDR_VAR 0 5
74105: PUSH
74106: LD_VAR 0 5
74110: PPUSH
74111: LD_VAR 0 1
74115: PUSH
74116: LD_VAR 0 6
74120: ARRAY
74121: PPUSH
74122: CALL 69469 0 2
74126: ST_TO_ADDR
// end ;
74127: GO 74034
74129: POP
74130: POP
// end ;
74131: LD_VAR 0 5
74135: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74136: LD_INT 0
74138: PPUSH
74139: PPUSH
74140: PPUSH
// if btype = b_depot then
74141: LD_VAR 0 2
74145: PUSH
74146: LD_INT 0
74148: EQUAL
74149: IFFALSE 74161
// begin result := true ;
74151: LD_ADDR_VAR 0 3
74155: PUSH
74156: LD_INT 1
74158: ST_TO_ADDR
// exit ;
74159: GO 74277
// end ; pom := GetBase ( depot ) ;
74161: LD_ADDR_VAR 0 4
74165: PUSH
74166: LD_VAR 0 1
74170: PPUSH
74171: CALL_OW 274
74175: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74176: LD_ADDR_VAR 0 5
74180: PUSH
74181: LD_VAR 0 2
74185: PPUSH
74186: LD_VAR 0 1
74190: PPUSH
74191: CALL_OW 248
74195: PPUSH
74196: CALL_OW 450
74200: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74201: LD_ADDR_VAR 0 3
74205: PUSH
74206: LD_VAR 0 4
74210: PPUSH
74211: LD_INT 1
74213: PPUSH
74214: CALL_OW 275
74218: PUSH
74219: LD_VAR 0 5
74223: PUSH
74224: LD_INT 1
74226: ARRAY
74227: GREATEREQUAL
74228: PUSH
74229: LD_VAR 0 4
74233: PPUSH
74234: LD_INT 2
74236: PPUSH
74237: CALL_OW 275
74241: PUSH
74242: LD_VAR 0 5
74246: PUSH
74247: LD_INT 2
74249: ARRAY
74250: GREATEREQUAL
74251: AND
74252: PUSH
74253: LD_VAR 0 4
74257: PPUSH
74258: LD_INT 3
74260: PPUSH
74261: CALL_OW 275
74265: PUSH
74266: LD_VAR 0 5
74270: PUSH
74271: LD_INT 3
74273: ARRAY
74274: GREATEREQUAL
74275: AND
74276: ST_TO_ADDR
// end ;
74277: LD_VAR 0 3
74281: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
74282: LD_INT 0
74284: PPUSH
// if not vehicles or not parkingPoint then
74285: LD_VAR 0 1
74289: NOT
74290: PUSH
74291: LD_VAR 0 2
74295: NOT
74296: OR
74297: IFFALSE 74301
// exit ;
74299: GO 74399
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
74301: LD_ADDR_VAR 0 1
74305: PUSH
74306: LD_VAR 0 1
74310: PPUSH
74311: LD_INT 50
74313: PUSH
74314: EMPTY
74315: LIST
74316: PUSH
74317: LD_INT 3
74319: PUSH
74320: LD_INT 92
74322: PUSH
74323: LD_VAR 0 2
74327: PUSH
74328: LD_INT 1
74330: ARRAY
74331: PUSH
74332: LD_VAR 0 2
74336: PUSH
74337: LD_INT 2
74339: ARRAY
74340: PUSH
74341: LD_INT 8
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: PUSH
74354: EMPTY
74355: LIST
74356: LIST
74357: PPUSH
74358: CALL_OW 72
74362: ST_TO_ADDR
// if not vehicles then
74363: LD_VAR 0 1
74367: NOT
74368: IFFALSE 74372
// exit ;
74370: GO 74399
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
74372: LD_VAR 0 1
74376: PPUSH
74377: LD_VAR 0 2
74381: PUSH
74382: LD_INT 1
74384: ARRAY
74385: PPUSH
74386: LD_VAR 0 2
74390: PUSH
74391: LD_INT 2
74393: ARRAY
74394: PPUSH
74395: CALL_OW 111
// end ;
74399: LD_VAR 0 3
74403: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
74404: LD_INT 0
74406: PPUSH
74407: PPUSH
74408: PPUSH
// if not side or not area then
74409: LD_VAR 0 1
74413: NOT
74414: PUSH
74415: LD_VAR 0 2
74419: NOT
74420: OR
74421: IFFALSE 74425
// exit ;
74423: GO 74544
// tmp := AreaToList ( area , 0 ) ;
74425: LD_ADDR_VAR 0 5
74429: PUSH
74430: LD_VAR 0 2
74434: PPUSH
74435: LD_INT 0
74437: PPUSH
74438: CALL_OW 517
74442: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74443: LD_ADDR_VAR 0 4
74447: PUSH
74448: DOUBLE
74449: LD_INT 1
74451: DEC
74452: ST_TO_ADDR
74453: LD_VAR 0 5
74457: PUSH
74458: LD_INT 1
74460: ARRAY
74461: PUSH
74462: FOR_TO
74463: IFFALSE 74542
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74465: LD_VAR 0 5
74469: PUSH
74470: LD_INT 1
74472: ARRAY
74473: PUSH
74474: LD_VAR 0 4
74478: ARRAY
74479: PPUSH
74480: LD_VAR 0 5
74484: PUSH
74485: LD_INT 2
74487: ARRAY
74488: PUSH
74489: LD_VAR 0 4
74493: ARRAY
74494: PPUSH
74495: CALL_OW 351
74499: IFFALSE 74540
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74501: LD_VAR 0 5
74505: PUSH
74506: LD_INT 1
74508: ARRAY
74509: PUSH
74510: LD_VAR 0 4
74514: ARRAY
74515: PPUSH
74516: LD_VAR 0 5
74520: PUSH
74521: LD_INT 2
74523: ARRAY
74524: PUSH
74525: LD_VAR 0 4
74529: ARRAY
74530: PPUSH
74531: LD_VAR 0 1
74535: PPUSH
74536: CALL_OW 244
// end ;
74540: GO 74462
74542: POP
74543: POP
// end ; end_of_file
74544: LD_VAR 0 3
74548: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74549: LD_VAR 0 1
74553: PUSH
74554: LD_INT 200
74556: DOUBLE
74557: GREATEREQUAL
74558: IFFALSE 74566
74560: LD_INT 299
74562: DOUBLE
74563: LESSEQUAL
74564: IFTRUE 74568
74566: GO 74600
74568: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74569: LD_VAR 0 1
74573: PPUSH
74574: LD_VAR 0 2
74578: PPUSH
74579: LD_VAR 0 3
74583: PPUSH
74584: LD_VAR 0 4
74588: PPUSH
74589: LD_VAR 0 5
74593: PPUSH
74594: CALL 27260 0 5
74598: GO 74677
74600: LD_INT 300
74602: DOUBLE
74603: GREATEREQUAL
74604: IFFALSE 74612
74606: LD_INT 399
74608: DOUBLE
74609: LESSEQUAL
74610: IFTRUE 74614
74612: GO 74676
74614: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74615: LD_VAR 0 1
74619: PPUSH
74620: LD_VAR 0 2
74624: PPUSH
74625: LD_VAR 0 3
74629: PPUSH
74630: LD_VAR 0 4
74634: PPUSH
74635: LD_VAR 0 5
74639: PPUSH
74640: LD_VAR 0 6
74644: PPUSH
74645: LD_VAR 0 7
74649: PPUSH
74650: LD_VAR 0 8
74654: PPUSH
74655: LD_VAR 0 9
74659: PPUSH
74660: LD_VAR 0 10
74664: PPUSH
74665: LD_VAR 0 11
74669: PPUSH
74670: CALL 23585 0 11
74674: GO 74677
74676: POP
// end ;
74677: PPOPN 11
74679: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74680: LD_VAR 0 1
74684: PPUSH
74685: LD_VAR 0 2
74689: PPUSH
74690: LD_VAR 0 3
74694: PPUSH
74695: LD_VAR 0 4
74699: PPUSH
74700: LD_VAR 0 5
74704: PPUSH
74705: CALL 26996 0 5
// end ; end_of_file
74709: PPOPN 5
74711: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74712: LD_VAR 0 1
74716: PPUSH
74717: LD_VAR 0 2
74721: PPUSH
74722: LD_VAR 0 3
74726: PPUSH
74727: LD_VAR 0 4
74731: PPUSH
74732: LD_VAR 0 5
74736: PPUSH
74737: LD_VAR 0 6
74741: PPUSH
74742: CALL 11237 0 6
// end ;
74746: PPOPN 6
74748: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74749: LD_INT 0
74751: PPUSH
// begin if not units then
74752: LD_VAR 0 1
74756: NOT
74757: IFFALSE 74761
// exit ;
74759: GO 74761
// end ;
74761: PPOPN 7
74763: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74764: CALL 11124 0 0
// end ;
74768: PPOPN 1
74770: END
